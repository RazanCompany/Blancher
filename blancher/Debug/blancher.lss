
blancher.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000072  00800200  00003efa  00003f8e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003efa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000d05  00800272  00800272  00004000  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00004000  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004030  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000a70  00000000  00000000  00004070  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000bfc8  00000000  00000000  00004ae0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002ef8  00000000  00000000  00010aa8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000096bd  00000000  00000000  000139a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001c6c  00000000  00000000  0001d060  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00018b6b  00000000  00000000  0001eccc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000098da  00000000  00000000  00037837  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000b38  00000000  00000000  00041111  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00005ee5  00000000  00000000  00041c49  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	9a c0       	rjmp	.+308    	; 0x136 <__ctors_end>
       2:	00 00       	nop
       4:	b9 c0       	rjmp	.+370    	; 0x178 <__bad_interrupt>
       6:	00 00       	nop
       8:	b7 c0       	rjmp	.+366    	; 0x178 <__bad_interrupt>
       a:	00 00       	nop
       c:	b5 c0       	rjmp	.+362    	; 0x178 <__bad_interrupt>
       e:	00 00       	nop
      10:	b3 c0       	rjmp	.+358    	; 0x178 <__bad_interrupt>
      12:	00 00       	nop
      14:	b1 c0       	rjmp	.+354    	; 0x178 <__bad_interrupt>
      16:	00 00       	nop
      18:	af c0       	rjmp	.+350    	; 0x178 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	ad c0       	rjmp	.+346    	; 0x178 <__bad_interrupt>
      1e:	00 00       	nop
      20:	ab c0       	rjmp	.+342    	; 0x178 <__bad_interrupt>
      22:	00 00       	nop
      24:	a9 c0       	rjmp	.+338    	; 0x178 <__bad_interrupt>
      26:	00 00       	nop
      28:	a7 c0       	rjmp	.+334    	; 0x178 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	a5 c0       	rjmp	.+330    	; 0x178 <__bad_interrupt>
      2e:	00 00       	nop
      30:	0c 94 a1 13 	jmp	0x2742	; 0x2742 <__vector_12>
      34:	0c 94 24 1f 	jmp	0x3e48	; 0x3e48 <__vector_13>
      38:	9f c0       	rjmp	.+318    	; 0x178 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	9d c0       	rjmp	.+314    	; 0x178 <__bad_interrupt>
      3e:	00 00       	nop
      40:	9b c0       	rjmp	.+310    	; 0x178 <__bad_interrupt>
      42:	00 00       	nop
      44:	9a c0       	rjmp	.+308    	; 0x17a <__vector_17>
      46:	00 00       	nop
      48:	97 c0       	rjmp	.+302    	; 0x178 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	95 c0       	rjmp	.+298    	; 0x178 <__bad_interrupt>
      4e:	00 00       	nop
      50:	93 c0       	rjmp	.+294    	; 0x178 <__bad_interrupt>
      52:	00 00       	nop
      54:	91 c0       	rjmp	.+290    	; 0x178 <__bad_interrupt>
      56:	00 00       	nop
      58:	8f c0       	rjmp	.+286    	; 0x178 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	8d c0       	rjmp	.+282    	; 0x178 <__bad_interrupt>
      5e:	00 00       	nop
      60:	8b c0       	rjmp	.+278    	; 0x178 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 58 0b 	jmp	0x16b0	; 0x16b0 <__vector_25>
      68:	0c 94 91 0b 	jmp	0x1722	; 0x1722 <__vector_26>
      6c:	85 c0       	rjmp	.+266    	; 0x178 <__bad_interrupt>
      6e:	00 00       	nop
      70:	83 c0       	rjmp	.+262    	; 0x178 <__bad_interrupt>
      72:	00 00       	nop
      74:	0c 94 f4 0a 	jmp	0x15e8	; 0x15e8 <__vector_29>
      78:	7f c0       	rjmp	.+254    	; 0x178 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	7d c0       	rjmp	.+250    	; 0x178 <__bad_interrupt>
      7e:	00 00       	nop
      80:	e2 c0       	rjmp	.+452    	; 0x246 <__vector_32>
      82:	00 00       	nop
      84:	79 c0       	rjmp	.+242    	; 0x178 <__bad_interrupt>
      86:	00 00       	nop
      88:	77 c0       	rjmp	.+238    	; 0x178 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	75 c0       	rjmp	.+234    	; 0x178 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 5e 0c 	jmp	0x18bc	; 0x18bc <__vector_36>
      94:	0c 94 97 0c 	jmp	0x192e	; 0x192e <__vector_37>
      98:	6f c0       	rjmp	.+222    	; 0x178 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	6d c0       	rjmp	.+218    	; 0x178 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	6b c0       	rjmp	.+214    	; 0x178 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	69 c0       	rjmp	.+210    	; 0x178 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	34 c1       	rjmp	.+616    	; 0x312 <__vector_42>
      aa:	00 00       	nop
      ac:	65 c0       	rjmp	.+202    	; 0x178 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	63 c0       	rjmp	.+198    	; 0x178 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	61 c0       	rjmp	.+194    	; 0x178 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	5f c0       	rjmp	.+190    	; 0x178 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	90 c1       	rjmp	.+800    	; 0x3de <__vector_47>
      be:	00 00       	nop
      c0:	5b c0       	rjmp	.+182    	; 0x178 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	59 c0       	rjmp	.+178    	; 0x178 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	57 c0       	rjmp	.+174    	; 0x178 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 6d 0d 	jmp	0x1ada	; 0x1ada <__vector_51>
      d0:	0c 94 a6 0d 	jmp	0x1b4c	; 0x1b4c <__vector_52>
      d4:	51 c0       	rjmp	.+162    	; 0x178 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 79 0e 	jmp	0x1cf2	; 0x1cf2 <__vector_54>
      dc:	0c 94 b2 0e 	jmp	0x1d64	; 0x1d64 <__vector_55>
      e0:	4b c0       	rjmp	.+150    	; 0x178 <__bad_interrupt>
	...

000000e4 <prvIdleTask>:
    /* Reset the event list item to its normal value - so it can be used with
    queues and semaphores. */
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */

    return uxReturn;
}
      e4:	c2 e8       	ldi	r28, 0x82	; 130
      e6:	dc e0       	ldi	r29, 0x0C	; 12
      e8:	08 e9       	ldi	r16, 0x98	; 152
      ea:	1c e0       	ldi	r17, 0x0C	; 12
      ec:	80 91 81 0c 	lds	r24, 0x0C81	; 0x800c81 <uxDeletedTasksWaitingCleanUp>
      f0:	88 23       	and	r24, r24
      f2:	d1 f0       	breq	.+52     	; 0x128 <prvIdleTask+0x44>
      f4:	0f b6       	in	r0, 0x3f	; 63
      f6:	f8 94       	cli
      f8:	0f 92       	push	r0
      fa:	ed 81       	ldd	r30, Y+5	; 0x05
      fc:	fe 81       	ldd	r31, Y+6	; 0x06
      fe:	86 81       	ldd	r24, Z+6	; 0x06
     100:	97 81       	ldd	r25, Z+7	; 0x07
     102:	02 96       	adiw	r24, 0x02	; 2
     104:	0e 94 09 12 	call	0x2412	; 0x2412 <uxListRemove>
     108:	80 91 80 0c 	lds	r24, 0x0C80	; 0x800c80 <uxCurrentNumberOfTasks>
     10c:	81 50       	subi	r24, 0x01	; 1
     10e:	80 93 80 0c 	sts	0x0C80, r24	; 0x800c80 <uxCurrentNumberOfTasks>
     112:	80 91 81 0c 	lds	r24, 0x0C81	; 0x800c81 <uxDeletedTasksWaitingCleanUp>
     116:	81 50       	subi	r24, 0x01	; 1
     118:	80 93 81 0c 	sts	0x0C81, r24	; 0x800c81 <uxDeletedTasksWaitingCleanUp>
     11c:	0f 90       	pop	r0
     11e:	0f be       	out	0x3f, r0	; 63
     120:	80 91 81 0c 	lds	r24, 0x0C81	; 0x800c81 <uxDeletedTasksWaitingCleanUp>
     124:	81 11       	cpse	r24, r1
     126:	e6 cf       	rjmp	.-52     	; 0xf4 <prvIdleTask+0x10>
     128:	f8 01       	movw	r30, r16
     12a:	80 81       	ld	r24, Z
     12c:	82 30       	cpi	r24, 0x02	; 2
     12e:	f0 f2       	brcs	.-68     	; 0xec <prvIdleTask+0x8>
     130:	0e 94 de 12 	call	0x25bc	; 0x25bc <vPortYield>
     134:	db cf       	rjmp	.-74     	; 0xec <prvIdleTask+0x8>

00000136 <__ctors_end>:
     136:	11 24       	eor	r1, r1
     138:	1f be       	out	0x3f, r1	; 63
     13a:	cf ef       	ldi	r28, 0xFF	; 255
     13c:	d1 e2       	ldi	r29, 0x21	; 33
     13e:	de bf       	out	0x3e, r29	; 62
     140:	cd bf       	out	0x3d, r28	; 61
     142:	00 e0       	ldi	r16, 0x00	; 0
     144:	0c bf       	out	0x3c, r16	; 60

00000146 <__do_copy_data>:
     146:	12 e0       	ldi	r17, 0x02	; 2
     148:	a0 e0       	ldi	r26, 0x00	; 0
     14a:	b2 e0       	ldi	r27, 0x02	; 2
     14c:	ea ef       	ldi	r30, 0xFA	; 250
     14e:	fe e3       	ldi	r31, 0x3E	; 62
     150:	00 e0       	ldi	r16, 0x00	; 0
     152:	0b bf       	out	0x3b, r16	; 59
     154:	02 c0       	rjmp	.+4      	; 0x15a <__do_copy_data+0x14>
     156:	07 90       	elpm	r0, Z+
     158:	0d 92       	st	X+, r0
     15a:	a2 37       	cpi	r26, 0x72	; 114
     15c:	b1 07       	cpc	r27, r17
     15e:	d9 f7       	brne	.-10     	; 0x156 <__do_copy_data+0x10>

00000160 <__do_clear_bss>:
     160:	2f e0       	ldi	r18, 0x0F	; 15
     162:	a2 e7       	ldi	r26, 0x72	; 114
     164:	b2 e0       	ldi	r27, 0x02	; 2
     166:	01 c0       	rjmp	.+2      	; 0x16a <.do_clear_bss_start>

00000168 <.do_clear_bss_loop>:
     168:	1d 92       	st	X+, r1

0000016a <.do_clear_bss_start>:
     16a:	a7 37       	cpi	r26, 0x77	; 119
     16c:	b2 07       	cpc	r27, r18
     16e:	e1 f7       	brne	.-8      	; 0x168 <.do_clear_bss_loop>
     170:	0e 94 ad 0a 	call	0x155a	; 0x155a <main>
     174:	0c 94 7b 1f 	jmp	0x3ef6	; 0x3ef6 <_exit>

00000178 <__bad_interrupt>:
     178:	43 cf       	rjmp	.-378    	; 0x0 <__vectors>

0000017a <__vector_17>:
    return 1;// Setup done ok
}//timer_init

// intruptted service routine when we have rech the number of  Ticks On Encoder
ISR(TIMER1_COMPA_vect)
{
     17a:	1f 92       	push	r1
     17c:	0f 92       	push	r0
     17e:	0f b6       	in	r0, 0x3f	; 63
     180:	0f 92       	push	r0
     182:	11 24       	eor	r1, r1
     184:	0b b6       	in	r0, 0x3b	; 59
     186:	0f 92       	push	r0
     188:	cf 92       	push	r12
     18a:	df 92       	push	r13
     18c:	ef 92       	push	r14
     18e:	ff 92       	push	r15
     190:	0f 93       	push	r16
     192:	1f 93       	push	r17
     194:	2f 93       	push	r18
     196:	3f 93       	push	r19
     198:	4f 93       	push	r20
     19a:	5f 93       	push	r21
     19c:	6f 93       	push	r22
     19e:	7f 93       	push	r23
     1a0:	8f 93       	push	r24
     1a2:	9f 93       	push	r25
     1a4:	af 93       	push	r26
     1a6:	bf 93       	push	r27
     1a8:	ef 93       	push	r30
     1aa:	ff 93       	push	r31
	// get the time now
	g_Timer1_new_time = Get_millis();
     1ac:	0e 94 19 1f 	call	0x3e32	; 0x3e32 <Get_millis>
     1b0:	8b 01       	movw	r16, r22
     1b2:	9c 01       	movw	r18, r24
     1b4:	60 93 53 0d 	sts	0x0D53, r22	; 0x800d53 <g_Timer1_new_time>
     1b8:	70 93 54 0d 	sts	0x0D54, r23	; 0x800d54 <g_Timer1_new_time+0x1>
     1bc:	80 93 55 0d 	sts	0x0D55, r24	; 0x800d55 <g_Timer1_new_time+0x2>
     1c0:	90 93 56 0d 	sts	0x0D56, r25	; 0x800d56 <g_Timer1_new_time+0x3>
	// calculate the diff between now and last interrupt
	g_diff_time = g_Timer1_new_time - g_Timer1_old_time;
     1c4:	40 91 33 0d 	lds	r20, 0x0D33	; 0x800d33 <g_Timer1_old_time>
     1c8:	50 91 34 0d 	lds	r21, 0x0D34	; 0x800d34 <g_Timer1_old_time+0x1>
     1cc:	60 91 35 0d 	lds	r22, 0x0D35	; 0x800d35 <g_Timer1_old_time+0x2>
     1d0:	70 91 36 0d 	lds	r23, 0x0D36	; 0x800d36 <g_Timer1_old_time+0x3>
     1d4:	68 01       	movw	r12, r16
     1d6:	79 01       	movw	r14, r18
     1d8:	c4 1a       	sub	r12, r20
     1da:	d5 0a       	sbc	r13, r21
     1dc:	e6 0a       	sbc	r14, r22
     1de:	f7 0a       	sbc	r15, r23
     1e0:	c7 01       	movw	r24, r14
     1e2:	b6 01       	movw	r22, r12
     1e4:	c0 92 3b 0d 	sts	0x0D3B, r12	; 0x800d3b <g_diff_time>
     1e8:	d0 92 3c 0d 	sts	0x0D3C, r13	; 0x800d3c <g_diff_time+0x1>
     1ec:	e0 92 3d 0d 	sts	0x0D3D, r14	; 0x800d3d <g_diff_time+0x2>
     1f0:	f0 92 3e 0d 	sts	0x0D3E, r15	; 0x800d3e <g_diff_time+0x3>
	// save the to the old time to next interrupt
	g_Timer1_old_time = g_Timer1_new_time;
     1f4:	00 93 33 0d 	sts	0x0D33, r16	; 0x800d33 <g_Timer1_old_time>
     1f8:	10 93 34 0d 	sts	0x0D34, r17	; 0x800d34 <g_Timer1_old_time+0x1>
     1fc:	20 93 35 0d 	sts	0x0D35, r18	; 0x800d35 <g_Timer1_old_time+0x2>
     200:	30 93 36 0d 	sts	0x0D36, r19	; 0x800d36 <g_Timer1_old_time+0x3>
	//call back function on upper layer to get time
	g_timer1_config->isr_call_back(g_diff_time);
     204:	e0 91 4d 0d 	lds	r30, 0x0D4D	; 0x800d4d <g_timer1_config>
     208:	f0 91 4e 0d 	lds	r31, 0x0D4E	; 0x800d4e <g_timer1_config+0x1>
     20c:	02 80       	ldd	r0, Z+2	; 0x02
     20e:	f3 81       	ldd	r31, Z+3	; 0x03
     210:	e0 2d       	mov	r30, r0
     212:	19 95       	eicall
}
     214:	ff 91       	pop	r31
     216:	ef 91       	pop	r30
     218:	bf 91       	pop	r27
     21a:	af 91       	pop	r26
     21c:	9f 91       	pop	r25
     21e:	8f 91       	pop	r24
     220:	7f 91       	pop	r23
     222:	6f 91       	pop	r22
     224:	5f 91       	pop	r21
     226:	4f 91       	pop	r20
     228:	3f 91       	pop	r19
     22a:	2f 91       	pop	r18
     22c:	1f 91       	pop	r17
     22e:	0f 91       	pop	r16
     230:	ff 90       	pop	r15
     232:	ef 90       	pop	r14
     234:	df 90       	pop	r13
     236:	cf 90       	pop	r12
     238:	0f 90       	pop	r0
     23a:	0b be       	out	0x3b, r0	; 59
     23c:	0f 90       	pop	r0
     23e:	0f be       	out	0x3f, r0	; 63
     240:	0f 90       	pop	r0
     242:	1f 90       	pop	r1
     244:	18 95       	reti

00000246 <__vector_32>:
// intruptted service routine when we have rech the number of  Ticks On Encoder
ISR(TIMER3_COMPA_vect)
{
     246:	1f 92       	push	r1
     248:	0f 92       	push	r0
     24a:	0f b6       	in	r0, 0x3f	; 63
     24c:	0f 92       	push	r0
     24e:	11 24       	eor	r1, r1
     250:	0b b6       	in	r0, 0x3b	; 59
     252:	0f 92       	push	r0
     254:	cf 92       	push	r12
     256:	df 92       	push	r13
     258:	ef 92       	push	r14
     25a:	ff 92       	push	r15
     25c:	0f 93       	push	r16
     25e:	1f 93       	push	r17
     260:	2f 93       	push	r18
     262:	3f 93       	push	r19
     264:	4f 93       	push	r20
     266:	5f 93       	push	r21
     268:	6f 93       	push	r22
     26a:	7f 93       	push	r23
     26c:	8f 93       	push	r24
     26e:	9f 93       	push	r25
     270:	af 93       	push	r26
     272:	bf 93       	push	r27
     274:	ef 93       	push	r30
     276:	ff 93       	push	r31
	// get the time now
	g_Timer3_new_time = Get_millis();
     278:	0e 94 19 1f 	call	0x3e32	; 0x3e32 <Get_millis>
     27c:	8b 01       	movw	r16, r22
     27e:	9c 01       	movw	r18, r24
     280:	60 93 49 0d 	sts	0x0D49, r22	; 0x800d49 <g_Timer3_new_time>
     284:	70 93 4a 0d 	sts	0x0D4A, r23	; 0x800d4a <g_Timer3_new_time+0x1>
     288:	80 93 4b 0d 	sts	0x0D4B, r24	; 0x800d4b <g_Timer3_new_time+0x2>
     28c:	90 93 4c 0d 	sts	0x0D4C, r25	; 0x800d4c <g_Timer3_new_time+0x3>
	// calculate the diff between now and last interrupt
	g_diff_time = g_Timer3_new_time - g_Timer3_old_time;
     290:	40 91 2d 0d 	lds	r20, 0x0D2D	; 0x800d2d <g_Timer3_old_time>
     294:	50 91 2e 0d 	lds	r21, 0x0D2E	; 0x800d2e <g_Timer3_old_time+0x1>
     298:	60 91 2f 0d 	lds	r22, 0x0D2F	; 0x800d2f <g_Timer3_old_time+0x2>
     29c:	70 91 30 0d 	lds	r23, 0x0D30	; 0x800d30 <g_Timer3_old_time+0x3>
     2a0:	68 01       	movw	r12, r16
     2a2:	79 01       	movw	r14, r18
     2a4:	c4 1a       	sub	r12, r20
     2a6:	d5 0a       	sbc	r13, r21
     2a8:	e6 0a       	sbc	r14, r22
     2aa:	f7 0a       	sbc	r15, r23
     2ac:	c7 01       	movw	r24, r14
     2ae:	b6 01       	movw	r22, r12
     2b0:	c0 92 3b 0d 	sts	0x0D3B, r12	; 0x800d3b <g_diff_time>
     2b4:	d0 92 3c 0d 	sts	0x0D3C, r13	; 0x800d3c <g_diff_time+0x1>
     2b8:	e0 92 3d 0d 	sts	0x0D3D, r14	; 0x800d3d <g_diff_time+0x2>
     2bc:	f0 92 3e 0d 	sts	0x0D3E, r15	; 0x800d3e <g_diff_time+0x3>
	// save the to the old time to next interrupt
	g_Timer3_old_time = g_Timer3_new_time;
     2c0:	00 93 2d 0d 	sts	0x0D2D, r16	; 0x800d2d <g_Timer3_old_time>
     2c4:	10 93 2e 0d 	sts	0x0D2E, r17	; 0x800d2e <g_Timer3_old_time+0x1>
     2c8:	20 93 2f 0d 	sts	0x0D2F, r18	; 0x800d2f <g_Timer3_old_time+0x2>
     2cc:	30 93 30 0d 	sts	0x0D30, r19	; 0x800d30 <g_Timer3_old_time+0x3>
	//call back function on upper layer to get time
	g_timer3_config->isr_call_back(g_diff_time);
     2d0:	e0 91 31 0d 	lds	r30, 0x0D31	; 0x800d31 <g_timer3_config>
     2d4:	f0 91 32 0d 	lds	r31, 0x0D32	; 0x800d32 <g_timer3_config+0x1>
     2d8:	02 80       	ldd	r0, Z+2	; 0x02
     2da:	f3 81       	ldd	r31, Z+3	; 0x03
     2dc:	e0 2d       	mov	r30, r0
     2de:	19 95       	eicall
}
     2e0:	ff 91       	pop	r31
     2e2:	ef 91       	pop	r30
     2e4:	bf 91       	pop	r27
     2e6:	af 91       	pop	r26
     2e8:	9f 91       	pop	r25
     2ea:	8f 91       	pop	r24
     2ec:	7f 91       	pop	r23
     2ee:	6f 91       	pop	r22
     2f0:	5f 91       	pop	r21
     2f2:	4f 91       	pop	r20
     2f4:	3f 91       	pop	r19
     2f6:	2f 91       	pop	r18
     2f8:	1f 91       	pop	r17
     2fa:	0f 91       	pop	r16
     2fc:	ff 90       	pop	r15
     2fe:	ef 90       	pop	r14
     300:	df 90       	pop	r13
     302:	cf 90       	pop	r12
     304:	0f 90       	pop	r0
     306:	0b be       	out	0x3b, r0	; 59
     308:	0f 90       	pop	r0
     30a:	0f be       	out	0x3f, r0	; 63
     30c:	0f 90       	pop	r0
     30e:	1f 90       	pop	r1
     310:	18 95       	reti

00000312 <__vector_42>:
// intruptted service routine when we have rech the number of  Ticks On Encoder
ISR(TIMER4_COMPA_vect)
{
     312:	1f 92       	push	r1
     314:	0f 92       	push	r0
     316:	0f b6       	in	r0, 0x3f	; 63
     318:	0f 92       	push	r0
     31a:	11 24       	eor	r1, r1
     31c:	0b b6       	in	r0, 0x3b	; 59
     31e:	0f 92       	push	r0
     320:	cf 92       	push	r12
     322:	df 92       	push	r13
     324:	ef 92       	push	r14
     326:	ff 92       	push	r15
     328:	0f 93       	push	r16
     32a:	1f 93       	push	r17
     32c:	2f 93       	push	r18
     32e:	3f 93       	push	r19
     330:	4f 93       	push	r20
     332:	5f 93       	push	r21
     334:	6f 93       	push	r22
     336:	7f 93       	push	r23
     338:	8f 93       	push	r24
     33a:	9f 93       	push	r25
     33c:	af 93       	push	r26
     33e:	bf 93       	push	r27
     340:	ef 93       	push	r30
     342:	ff 93       	push	r31
	// get the time now
	g_Timer4_new_time = Get_millis();
     344:	0e 94 19 1f 	call	0x3e32	; 0x3e32 <Get_millis>
     348:	8b 01       	movw	r16, r22
     34a:	9c 01       	movw	r18, r24
     34c:	60 93 3f 0d 	sts	0x0D3F, r22	; 0x800d3f <g_Timer4_new_time>
     350:	70 93 40 0d 	sts	0x0D40, r23	; 0x800d40 <g_Timer4_new_time+0x1>
     354:	80 93 41 0d 	sts	0x0D41, r24	; 0x800d41 <g_Timer4_new_time+0x2>
     358:	90 93 42 0d 	sts	0x0D42, r25	; 0x800d42 <g_Timer4_new_time+0x3>
	// calculate the diff between now and last interrupt
	g_diff_time = g_Timer4_new_time - g_Timer4_old_time;
     35c:	40 91 4f 0d 	lds	r20, 0x0D4F	; 0x800d4f <g_Timer4_old_time>
     360:	50 91 50 0d 	lds	r21, 0x0D50	; 0x800d50 <g_Timer4_old_time+0x1>
     364:	60 91 51 0d 	lds	r22, 0x0D51	; 0x800d51 <g_Timer4_old_time+0x2>
     368:	70 91 52 0d 	lds	r23, 0x0D52	; 0x800d52 <g_Timer4_old_time+0x3>
     36c:	68 01       	movw	r12, r16
     36e:	79 01       	movw	r14, r18
     370:	c4 1a       	sub	r12, r20
     372:	d5 0a       	sbc	r13, r21
     374:	e6 0a       	sbc	r14, r22
     376:	f7 0a       	sbc	r15, r23
     378:	c7 01       	movw	r24, r14
     37a:	b6 01       	movw	r22, r12
     37c:	c0 92 3b 0d 	sts	0x0D3B, r12	; 0x800d3b <g_diff_time>
     380:	d0 92 3c 0d 	sts	0x0D3C, r13	; 0x800d3c <g_diff_time+0x1>
     384:	e0 92 3d 0d 	sts	0x0D3D, r14	; 0x800d3d <g_diff_time+0x2>
     388:	f0 92 3e 0d 	sts	0x0D3E, r15	; 0x800d3e <g_diff_time+0x3>
	// save the to the old time to next interrupt
	g_Timer4_old_time = g_Timer4_new_time;
     38c:	00 93 4f 0d 	sts	0x0D4F, r16	; 0x800d4f <g_Timer4_old_time>
     390:	10 93 50 0d 	sts	0x0D50, r17	; 0x800d50 <g_Timer4_old_time+0x1>
     394:	20 93 51 0d 	sts	0x0D51, r18	; 0x800d51 <g_Timer4_old_time+0x2>
     398:	30 93 52 0d 	sts	0x0D52, r19	; 0x800d52 <g_Timer4_old_time+0x3>
	//call back function on upper layer to get time
	g_timer4_config->isr_call_back(g_diff_time);
     39c:	e0 91 43 0d 	lds	r30, 0x0D43	; 0x800d43 <g_timer4_config>
     3a0:	f0 91 44 0d 	lds	r31, 0x0D44	; 0x800d44 <g_timer4_config+0x1>
     3a4:	02 80       	ldd	r0, Z+2	; 0x02
     3a6:	f3 81       	ldd	r31, Z+3	; 0x03
     3a8:	e0 2d       	mov	r30, r0
     3aa:	19 95       	eicall
}
     3ac:	ff 91       	pop	r31
     3ae:	ef 91       	pop	r30
     3b0:	bf 91       	pop	r27
     3b2:	af 91       	pop	r26
     3b4:	9f 91       	pop	r25
     3b6:	8f 91       	pop	r24
     3b8:	7f 91       	pop	r23
     3ba:	6f 91       	pop	r22
     3bc:	5f 91       	pop	r21
     3be:	4f 91       	pop	r20
     3c0:	3f 91       	pop	r19
     3c2:	2f 91       	pop	r18
     3c4:	1f 91       	pop	r17
     3c6:	0f 91       	pop	r16
     3c8:	ff 90       	pop	r15
     3ca:	ef 90       	pop	r14
     3cc:	df 90       	pop	r13
     3ce:	cf 90       	pop	r12
     3d0:	0f 90       	pop	r0
     3d2:	0b be       	out	0x3b, r0	; 59
     3d4:	0f 90       	pop	r0
     3d6:	0f be       	out	0x3f, r0	; 63
     3d8:	0f 90       	pop	r0
     3da:	1f 90       	pop	r1
     3dc:	18 95       	reti

000003de <__vector_47>:
// intruptted service routine when we have rech the number of  Ticks On Encoder
ISR(TIMER5_COMPA_vect)
{
     3de:	1f 92       	push	r1
     3e0:	0f 92       	push	r0
     3e2:	0f b6       	in	r0, 0x3f	; 63
     3e4:	0f 92       	push	r0
     3e6:	11 24       	eor	r1, r1
     3e8:	0b b6       	in	r0, 0x3b	; 59
     3ea:	0f 92       	push	r0
     3ec:	2f 93       	push	r18
     3ee:	3f 93       	push	r19
     3f0:	4f 93       	push	r20
     3f2:	5f 93       	push	r21
     3f4:	6f 93       	push	r22
     3f6:	7f 93       	push	r23
     3f8:	8f 93       	push	r24
     3fa:	9f 93       	push	r25
     3fc:	af 93       	push	r26
     3fe:	bf 93       	push	r27
     400:	ef 93       	push	r30
     402:	ff 93       	push	r31
	// calculate the diff between now and last interrupt
	g_diff_time = g_Timer5_new_time - g_Timer5_old_time;
	// save the to the old time to next interrupt
	g_Timer5_old_time = g_Timer5_new_time;*/
	// clear the counter
	UART0_putc('a');
     404:	81 e6       	ldi	r24, 0x61	; 97
     406:	0e 94 1b 0c 	call	0x1836	; 0x1836 <UART0_putc>
	TIMER5_COUNT_L = 0;
     40a:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <__TEXT_REGION_LENGTH__+0x700124>
	//call back function on upper layer to get time
	g_timer5_config->isr_call_back(g_diff_time);
     40e:	60 91 3b 0d 	lds	r22, 0x0D3B	; 0x800d3b <g_diff_time>
     412:	70 91 3c 0d 	lds	r23, 0x0D3C	; 0x800d3c <g_diff_time+0x1>
     416:	80 91 3d 0d 	lds	r24, 0x0D3D	; 0x800d3d <g_diff_time+0x2>
     41a:	90 91 3e 0d 	lds	r25, 0x0D3E	; 0x800d3e <g_diff_time+0x3>
     41e:	e0 91 57 0d 	lds	r30, 0x0D57	; 0x800d57 <g_timer5_config>
     422:	f0 91 58 0d 	lds	r31, 0x0D58	; 0x800d58 <g_timer5_config+0x1>
     426:	02 80       	ldd	r0, Z+2	; 0x02
     428:	f3 81       	ldd	r31, Z+3	; 0x03
     42a:	e0 2d       	mov	r30, r0
     42c:	19 95       	eicall
	
}
     42e:	ff 91       	pop	r31
     430:	ef 91       	pop	r30
     432:	bf 91       	pop	r27
     434:	af 91       	pop	r26
     436:	9f 91       	pop	r25
     438:	8f 91       	pop	r24
     43a:	7f 91       	pop	r23
     43c:	6f 91       	pop	r22
     43e:	5f 91       	pop	r21
     440:	4f 91       	pop	r20
     442:	3f 91       	pop	r19
     444:	2f 91       	pop	r18
     446:	0f 90       	pop	r0
     448:	0b be       	out	0x3b, r0	; 59
     44a:	0f 90       	pop	r0
     44c:	0f be       	out	0x3f, r0	; 63
     44e:	0f 90       	pop	r0
     450:	1f 90       	pop	r1
     452:	18 95       	reti

00000454 <LCD_post_transmission>:

//
void Lcd_Write(uint16_t address, uint16_t value){
	Modbus_Set_transmit_buffer(LCD,0, value);
    Modbus_Write_multiple_registers(LCD,address, 0x01);
}
     454:	60 e0       	ldi	r22, 0x00	; 0
     456:	80 e0       	ldi	r24, 0x00	; 0
     458:	0c 94 3b 0b 	jmp	0x1676	; 0x1676 <Modbus_change_state>
     45c:	08 95       	ret

0000045e <LCD_pre_transmission>:
     45e:	61 e0       	ldi	r22, 0x01	; 1
     460:	80 e0       	ldi	r24, 0x00	; 0
     462:	0c 94 3b 0b 	jmp	0x1676	; 0x1676 <Modbus_change_state>
     466:	08 95       	ret

00000468 <Lcd_init>:
     468:	e2 e7       	ldi	r30, 0x72	; 114
     46a:	f2 e0       	ldi	r31, 0x02	; 2
     46c:	20 83       	st	Z, r18
     46e:	81 83       	std	Z+1, r24	; 0x01
     470:	42 83       	std	Z+2, r20	; 0x02
     472:	53 83       	std	Z+3, r21	; 0x03
     474:	64 83       	std	Z+4, r22	; 0x04
     476:	75 83       	std	Z+5, r23	; 0x05
     478:	8f e2       	ldi	r24, 0x2F	; 47
     47a:	92 e0       	ldi	r25, 0x02	; 2
     47c:	97 83       	std	Z+7, r25	; 0x07
     47e:	86 83       	std	Z+6, r24	; 0x06
     480:	8a e2       	ldi	r24, 0x2A	; 42
     482:	92 e0       	ldi	r25, 0x02	; 2
     484:	91 87       	std	Z+9, r25	; 0x09
     486:	80 87       	std	Z+8, r24	; 0x08
     488:	bf 01       	movw	r22, r30
     48a:	80 e0       	ldi	r24, 0x00	; 0
     48c:	cb c6       	rjmp	.+3478   	; 0x1224 <Modbus_init>
     48e:	08 95       	ret

00000490 <Lcd_Read_multiple_data>:
 *
 *                    LCD Multiple Data functions 
 * 
************************************************************************************************************/

uint8_t Lcd_Read_multiple_data(uint16_t address ,uint16_t *pData,uint8_t QTY){
     490:	ff 92       	push	r15
     492:	0f 93       	push	r16
     494:	1f 93       	push	r17
     496:	cf 93       	push	r28
     498:	df 93       	push	r29
     49a:	f6 2e       	mov	r15, r22
     49c:	c7 2f       	mov	r28, r23
     49e:	d4 2f       	mov	r29, r20
	uint8_t err = Modbus_Read_holding_registers(LCD,address,QTY);
     4a0:	50 e0       	ldi	r21, 0x00	; 0
     4a2:	bc 01       	movw	r22, r24
     4a4:	80 e0       	ldi	r24, 0x00	; 0
     4a6:	f0 d7       	rcall	.+4064   	; 0x1488 <Modbus_Read_holding_registers>
	if(err == 0){
     4a8:	81 11       	cpse	r24, r1
     4aa:	12 c0       	rjmp	.+36     	; 0x4d0 <Lcd_Read_multiple_data+0x40>
		for(uint8_t i=0; i<QTY;i++){
     4ac:	dd 23       	and	r29, r29
     4ae:	79 f0       	breq	.+30     	; 0x4ce <Lcd_Read_multiple_data+0x3e>
     4b0:	0f 2d       	mov	r16, r15
     4b2:	1c 2f       	mov	r17, r28
     4b4:	c0 e0       	ldi	r28, 0x00	; 0
			(*(pData+i)) = Modbus_Get_response_buffer(LCD,i);
     4b6:	6c 2f       	mov	r22, r28
     4b8:	80 e0       	ldi	r24, 0x00	; 0
     4ba:	a2 d7       	rcall	.+3908   	; 0x1400 <Modbus_Get_response_buffer>
     4bc:	f8 01       	movw	r30, r16
     4be:	81 93       	st	Z+, r24
     4c0:	91 93       	st	Z+, r25
     4c2:	8f 01       	movw	r16, r30
************************************************************************************************************/

uint8_t Lcd_Read_multiple_data(uint16_t address ,uint16_t *pData,uint8_t QTY){
	uint8_t err = Modbus_Read_holding_registers(LCD,address,QTY);
	if(err == 0){
		for(uint8_t i=0; i<QTY;i++){
     4c4:	cf 5f       	subi	r28, 0xFF	; 255
     4c6:	dc 13       	cpse	r29, r28
     4c8:	f6 cf       	rjmp	.-20     	; 0x4b6 <Lcd_Read_multiple_data+0x26>
			(*(pData+i)) = Modbus_Get_response_buffer(LCD,i);
		}
		return LCD_OK;	
     4ca:	80 e0       	ldi	r24, 0x00	; 0
     4cc:	01 c0       	rjmp	.+2      	; 0x4d0 <Lcd_Read_multiple_data+0x40>
     4ce:	80 e0       	ldi	r24, 0x00	; 0
	}
	else {
		return err;
	}

}
     4d0:	df 91       	pop	r29
     4d2:	cf 91       	pop	r28
     4d4:	1f 91       	pop	r17
     4d6:	0f 91       	pop	r16
     4d8:	ff 90       	pop	r15
     4da:	08 95       	ret

000004dc <Lcd_Write_multiple_data>:

uint8_t Lcd_Write_multiple_data(uint16_t address ,uint16_t *pData,uint8_t QTY){
     4dc:	ef 92       	push	r14
     4de:	ff 92       	push	r15
     4e0:	0f 93       	push	r16
     4e2:	1f 93       	push	r17
     4e4:	cf 93       	push	r28
     4e6:	df 93       	push	r29
     4e8:	7c 01       	movw	r14, r24
     4ea:	d4 2f       	mov	r29, r20
	for(uint8_t i=0;i<QTY;i++){
     4ec:	44 23       	and	r20, r20
     4ee:	69 f0       	breq	.+26     	; 0x50a <Lcd_Write_multiple_data+0x2e>
     4f0:	06 2f       	mov	r16, r22
     4f2:	17 2f       	mov	r17, r23
     4f4:	c0 e0       	ldi	r28, 0x00	; 0
		Modbus_Set_transmit_buffer(LCD,i, (*(pData+i)));
     4f6:	f8 01       	movw	r30, r16
     4f8:	41 91       	ld	r20, Z+
     4fa:	51 91       	ld	r21, Z+
     4fc:	8f 01       	movw	r16, r30
     4fe:	6c 2f       	mov	r22, r28
     500:	80 e0       	ldi	r24, 0x00	; 0
     502:	a1 d7       	rcall	.+3906   	; 0x1446 <Modbus_Set_transmit_buffer>
	}

}

uint8_t Lcd_Write_multiple_data(uint16_t address ,uint16_t *pData,uint8_t QTY){
	for(uint8_t i=0;i<QTY;i++){
     504:	cf 5f       	subi	r28, 0xFF	; 255
     506:	dc 13       	cpse	r29, r28
     508:	f6 cf       	rjmp	.-20     	; 0x4f6 <Lcd_Write_multiple_data+0x1a>
		Modbus_Set_transmit_buffer(LCD,i, (*(pData+i)));
	}
	return Modbus_Write_multiple_registers(LCD,address,QTY);
     50a:	4d 2f       	mov	r20, r29
     50c:	50 e0       	ldi	r21, 0x00	; 0
     50e:	b7 01       	movw	r22, r14
     510:	80 e0       	ldi	r24, 0x00	; 0
     512:	d6 d7       	rcall	.+4012   	; 0x14c0 <Modbus_Write_multiple_registers>
	
}
     514:	df 91       	pop	r29
     516:	cf 91       	pop	r28
     518:	1f 91       	pop	r17
     51a:	0f 91       	pop	r16
     51c:	ff 90       	pop	r15
     51e:	ef 90       	pop	r14
     520:	08 95       	ret

00000522 <Modbus_mster_transaction>:
     522:	8f 92       	push	r8
     524:	9f 92       	push	r9
     526:	af 92       	push	r10
     528:	bf 92       	push	r11
     52a:	df 92       	push	r13
     52c:	ef 92       	push	r14
     52e:	ff 92       	push	r15
     530:	0f 93       	push	r16
     532:	1f 93       	push	r17
     534:	cf 93       	push	r28
     536:	df 93       	push	r29
     538:	cd b7       	in	r28, 0x3d	; 61
     53a:	de b7       	in	r29, 0x3e	; 62
     53c:	da 95       	dec	r29
     53e:	0f b6       	in	r0, 0x3f	; 63
     540:	f8 94       	cli
     542:	de bf       	out	0x3e, r29	; 62
     544:	0f be       	out	0x3f, r0	; 63
     546:	cd bf       	out	0x3d, r28	; 61
     548:	d6 2e       	mov	r13, r22
     54a:	81 11       	cpse	r24, r1
     54c:	00 c3       	rjmp	.+1536   	; 0xb4e <Modbus_mster_transaction+0x62c>
     54e:	80 91 b2 04 	lds	r24, 0x04B2	; 0x8004b2 <g_mod0_slave>
     552:	89 83       	std	Y+1, r24	; 0x01
     554:	2f ef       	ldi	r18, 0xFF	; 255
     556:	62 13       	cpse	r22, r18
     558:	06 c0       	rjmp	.+12     	; 0x566 <Modbus_mster_transaction+0x44>
     55a:	8f e0       	ldi	r24, 0x0F	; 15
     55c:	8a 83       	std	Y+2, r24	; 0x02
     55e:	68 94       	set
     560:	bb 24       	eor	r11, r11
     562:	b1 f8       	bld	r11, 1
     564:	32 c0       	rjmp	.+100    	; 0x5ca <Modbus_mster_transaction+0xa8>
     566:	6a 83       	std	Y+2, r22	; 0x02
     568:	81 e0       	ldi	r24, 0x01	; 1
     56a:	68 17       	cp	r22, r24
     56c:	b8 f0       	brcs	.+46     	; 0x59c <Modbus_mster_transaction+0x7a>
     56e:	94 e0       	ldi	r25, 0x04	; 4
     570:	96 17       	cp	r25, r22
     572:	18 f4       	brcc	.+6      	; 0x57a <Modbus_mster_transaction+0x58>
     574:	a7 e1       	ldi	r26, 0x17	; 23
     576:	6a 13       	cpse	r22, r26
     578:	11 c0       	rjmp	.+34     	; 0x59c <Modbus_mster_transaction+0x7a>
     57a:	80 91 b0 04 	lds	r24, 0x04B0	; 0x8004b0 <g_mod0_read_address>
     57e:	90 91 b1 04 	lds	r25, 0x04B1	; 0x8004b1 <g_mod0_read_address+0x1>
     582:	9b 83       	std	Y+3, r25	; 0x03
     584:	8c 83       	std	Y+4, r24	; 0x04
     586:	80 91 ae 04 	lds	r24, 0x04AE	; 0x8004ae <g_mod0_read_qty>
     58a:	90 91 af 04 	lds	r25, 0x04AF	; 0x8004af <g_mod0_read_qty+0x1>
     58e:	9d 83       	std	Y+5, r25	; 0x05
     590:	8e 83       	std	Y+6, r24	; 0x06
     592:	0f 2e       	mov	r0, r31
     594:	f6 e0       	ldi	r31, 0x06	; 6
     596:	bf 2e       	mov	r11, r31
     598:	f0 2d       	mov	r31, r0
     59a:	03 c0       	rjmp	.+6      	; 0x5a2 <Modbus_mster_transaction+0x80>
     59c:	68 94       	set
     59e:	bb 24       	eor	r11, r11
     5a0:	b1 f8       	bld	r11, 1
     5a2:	b0 e1       	ldi	r27, 0x10	; 16
     5a4:	bd 15       	cp	r27, r13
     5a6:	40 f0       	brcs	.+16     	; 0x5b8 <Modbus_mster_transaction+0x96>
     5a8:	ef e0       	ldi	r30, 0x0F	; 15
     5aa:	de 16       	cp	r13, r30
     5ac:	70 f4       	brcc	.+28     	; 0x5ca <Modbus_mster_transaction+0xa8>
     5ae:	8b ef       	ldi	r24, 0xFB	; 251
     5b0:	8d 0d       	add	r24, r13
     5b2:	82 30       	cpi	r24, 0x02	; 2
     5b4:	00 f5       	brcc	.+64     	; 0x5f6 <Modbus_mster_transaction+0xd4>
     5b6:	09 c0       	rjmp	.+18     	; 0x5ca <Modbus_mster_transaction+0xa8>
     5b8:	f6 e1       	ldi	r31, 0x16	; 22
     5ba:	df 16       	cp	r13, r31
     5bc:	e0 f0       	brcs	.+56     	; 0x5f6 <Modbus_mster_transaction+0xd4>
     5be:	27 e1       	ldi	r18, 0x17	; 23
     5c0:	2d 15       	cp	r18, r13
     5c2:	18 f4       	brcc	.+6      	; 0x5ca <Modbus_mster_transaction+0xa8>
     5c4:	8f ef       	ldi	r24, 0xFF	; 255
     5c6:	d8 12       	cpse	r13, r24
     5c8:	16 c0       	rjmp	.+44     	; 0x5f6 <Modbus_mster_transaction+0xd4>
     5ca:	90 91 2c 04 	lds	r25, 0x042C	; 0x80042c <g_mod0_write_address>
     5ce:	80 91 2d 04 	lds	r24, 0x042D	; 0x80042d <g_mod0_write_address+0x1>
     5d2:	e1 e0       	ldi	r30, 0x01	; 1
     5d4:	f0 e0       	ldi	r31, 0x00	; 0
     5d6:	ec 0f       	add	r30, r28
     5d8:	fd 1f       	adc	r31, r29
     5da:	eb 0d       	add	r30, r11
     5dc:	f1 1d       	adc	r31, r1
     5de:	80 83       	st	Z, r24
     5e0:	81 e0       	ldi	r24, 0x01	; 1
     5e2:	8b 0d       	add	r24, r11
     5e4:	e1 e0       	ldi	r30, 0x01	; 1
     5e6:	f0 e0       	ldi	r31, 0x00	; 0
     5e8:	ec 0f       	add	r30, r28
     5ea:	fd 1f       	adc	r31, r29
     5ec:	e8 0f       	add	r30, r24
     5ee:	f1 1d       	adc	r31, r1
     5f0:	b3 94       	inc	r11
     5f2:	b3 94       	inc	r11
     5f4:	90 83       	st	Z, r25
     5f6:	90 e1       	ldi	r25, 0x10	; 16
     5f8:	d9 16       	cp	r13, r25
     5fa:	09 f4       	brne	.+2      	; 0x5fe <Modbus_mster_transaction+0xdc>
     5fc:	ad c0       	rjmp	.+346    	; 0x758 <Modbus_mster_transaction+0x236>
     5fe:	9d 15       	cp	r25, r13
     600:	58 f0       	brcs	.+22     	; 0x618 <Modbus_mster_transaction+0xf6>
     602:	a6 e0       	ldi	r26, 0x06	; 6
     604:	da 16       	cp	r13, r26
     606:	61 f1       	breq	.+88     	; 0x660 <Modbus_mster_transaction+0x13e>
     608:	bf e0       	ldi	r27, 0x0F	; 15
     60a:	db 16       	cp	r13, r27
     60c:	09 f4       	brne	.+2      	; 0x610 <Modbus_mster_transaction+0xee>
     60e:	41 c0       	rjmp	.+130    	; 0x692 <Modbus_mster_transaction+0x170>
     610:	e5 e0       	ldi	r30, 0x05	; 5
     612:	de 12       	cpse	r13, r30
     614:	1a c1       	rjmp	.+564    	; 0x84a <Modbus_mster_transaction+0x328>
     616:	0d c0       	rjmp	.+26     	; 0x632 <Modbus_mster_transaction+0x110>
     618:	f7 e1       	ldi	r31, 0x17	; 23
     61a:	df 16       	cp	r13, r31
     61c:	09 f4       	brne	.+2      	; 0x620 <Modbus_mster_transaction+0xfe>
     61e:	9c c0       	rjmp	.+312    	; 0x758 <Modbus_mster_transaction+0x236>
     620:	2f ef       	ldi	r18, 0xFF	; 255
     622:	d2 16       	cp	r13, r18
     624:	09 f4       	brne	.+2      	; 0x628 <Modbus_mster_transaction+0x106>
     626:	98 c0       	rjmp	.+304    	; 0x758 <Modbus_mster_transaction+0x236>
     628:	86 e1       	ldi	r24, 0x16	; 22
     62a:	d8 16       	cp	r13, r24
     62c:	09 f4       	brne	.+2      	; 0x630 <Modbus_mster_transaction+0x10e>
     62e:	df c0       	rjmp	.+446    	; 0x7ee <Modbus_mster_transaction+0x2cc>
     630:	0c c1       	rjmp	.+536    	; 0x84a <Modbus_mster_transaction+0x328>
     632:	90 91 2a 04 	lds	r25, 0x042A	; 0x80042a <g_mod0_write_qty>
     636:	80 91 2b 04 	lds	r24, 0x042B	; 0x80042b <g_mod0_write_qty+0x1>
     63a:	e1 e0       	ldi	r30, 0x01	; 1
     63c:	f0 e0       	ldi	r31, 0x00	; 0
     63e:	ec 0f       	add	r30, r28
     640:	fd 1f       	adc	r31, r29
     642:	eb 0d       	add	r30, r11
     644:	f1 1d       	adc	r31, r1
     646:	80 83       	st	Z, r24
     648:	81 e0       	ldi	r24, 0x01	; 1
     64a:	8b 0d       	add	r24, r11
     64c:	e1 e0       	ldi	r30, 0x01	; 1
     64e:	f0 e0       	ldi	r31, 0x00	; 0
     650:	ec 0f       	add	r30, r28
     652:	fd 1f       	adc	r31, r29
     654:	e8 0f       	add	r30, r24
     656:	f1 1d       	adc	r31, r1
     658:	b3 94       	inc	r11
     65a:	b3 94       	inc	r11
     65c:	90 83       	st	Z, r25
     65e:	f5 c0       	rjmp	.+490    	; 0x84a <Modbus_mster_transaction+0x328>
     660:	ea ea       	ldi	r30, 0xAA	; 170
     662:	f3 e0       	ldi	r31, 0x03	; 3
     664:	80 81       	ld	r24, Z
     666:	91 81       	ldd	r25, Z+1	; 0x01
     668:	a1 e0       	ldi	r26, 0x01	; 1
     66a:	b0 e0       	ldi	r27, 0x00	; 0
     66c:	ac 0f       	add	r26, r28
     66e:	bd 1f       	adc	r27, r29
     670:	ab 0d       	add	r26, r11
     672:	b1 1d       	adc	r27, r1
     674:	9c 93       	st	X, r25
     676:	20 81       	ld	r18, Z
     678:	31 81       	ldd	r19, Z+1	; 0x01
     67a:	81 e0       	ldi	r24, 0x01	; 1
     67c:	8b 0d       	add	r24, r11
     67e:	e1 e0       	ldi	r30, 0x01	; 1
     680:	f0 e0       	ldi	r31, 0x00	; 0
     682:	ec 0f       	add	r30, r28
     684:	fd 1f       	adc	r31, r29
     686:	e8 0f       	add	r30, r24
     688:	f1 1d       	adc	r31, r1
     68a:	b3 94       	inc	r11
     68c:	b3 94       	inc	r11
     68e:	20 83       	st	Z, r18
     690:	dc c0       	rjmp	.+440    	; 0x84a <Modbus_mster_transaction+0x328>
     692:	80 91 2a 04 	lds	r24, 0x042A	; 0x80042a <g_mod0_write_qty>
     696:	90 91 2b 04 	lds	r25, 0x042B	; 0x80042b <g_mod0_write_qty+0x1>
     69a:	e1 e0       	ldi	r30, 0x01	; 1
     69c:	f0 e0       	ldi	r31, 0x00	; 0
     69e:	ec 0f       	add	r30, r28
     6a0:	fd 1f       	adc	r31, r29
     6a2:	eb 0d       	add	r30, r11
     6a4:	f1 1d       	adc	r31, r1
     6a6:	90 83       	st	Z, r25
     6a8:	32 e0       	ldi	r19, 0x02	; 2
     6aa:	3b 0d       	add	r19, r11
     6ac:	21 e0       	ldi	r18, 0x01	; 1
     6ae:	2b 0d       	add	r18, r11
     6b0:	e1 e0       	ldi	r30, 0x01	; 1
     6b2:	f0 e0       	ldi	r31, 0x00	; 0
     6b4:	ec 0f       	add	r30, r28
     6b6:	fd 1f       	adc	r31, r29
     6b8:	e2 0f       	add	r30, r18
     6ba:	f1 1d       	adc	r31, r1
     6bc:	80 83       	st	Z, r24
     6be:	ac 01       	movw	r20, r24
     6c0:	47 70       	andi	r20, 0x07	; 7
     6c2:	55 27       	eor	r21, r21
     6c4:	45 2b       	or	r20, r21
     6c6:	49 f0       	breq	.+18     	; 0x6da <Modbus_mster_transaction+0x1b8>
     6c8:	96 95       	lsr	r25
     6ca:	87 95       	ror	r24
     6cc:	96 95       	lsr	r25
     6ce:	87 95       	ror	r24
     6d0:	96 95       	lsr	r25
     6d2:	87 95       	ror	r24
     6d4:	21 e0       	ldi	r18, 0x01	; 1
     6d6:	28 0f       	add	r18, r24
     6d8:	07 c0       	rjmp	.+14     	; 0x6e8 <Modbus_mster_transaction+0x1c6>
     6da:	96 95       	lsr	r25
     6dc:	87 95       	ror	r24
     6de:	96 95       	lsr	r25
     6e0:	87 95       	ror	r24
     6e2:	96 95       	lsr	r25
     6e4:	87 95       	ror	r24
     6e6:	28 2f       	mov	r18, r24
     6e8:	93 e0       	ldi	r25, 0x03	; 3
     6ea:	b9 0e       	add	r11, r25
     6ec:	fe 01       	movw	r30, r28
     6ee:	e3 0f       	add	r30, r19
     6f0:	f1 1d       	adc	r31, r1
     6f2:	21 83       	std	Z+1, r18	; 0x01
     6f4:	22 23       	and	r18, r18
     6f6:	09 f4       	brne	.+2      	; 0x6fa <Modbus_mster_transaction+0x1d8>
     6f8:	a8 c0       	rjmp	.+336    	; 0x84a <Modbus_mster_transaction+0x328>
     6fa:	80 e0       	ldi	r24, 0x00	; 0
     6fc:	98 2f       	mov	r25, r24
     6fe:	91 70       	andi	r25, 0x01	; 1
     700:	80 ff       	sbrs	r24, 0
     702:	03 c0       	rjmp	.+6      	; 0x70a <Modbus_mster_transaction+0x1e8>
     704:	91 30       	cpi	r25, 0x01	; 1
     706:	99 f0       	breq	.+38     	; 0x72e <Modbus_mster_transaction+0x20c>
     708:	23 c0       	rjmp	.+70     	; 0x750 <Modbus_mster_transaction+0x22e>
     70a:	e8 2f       	mov	r30, r24
     70c:	e6 95       	lsr	r30
     70e:	f0 e0       	ldi	r31, 0x00	; 0
     710:	ee 0f       	add	r30, r30
     712:	ff 1f       	adc	r31, r31
     714:	e6 55       	subi	r30, 0x56	; 86
     716:	fc 4f       	sbci	r31, 0xFC	; 252
     718:	40 81       	ld	r20, Z
     71a:	51 81       	ldd	r21, Z+1	; 0x01
     71c:	e1 e0       	ldi	r30, 0x01	; 1
     71e:	f0 e0       	ldi	r31, 0x00	; 0
     720:	ec 0f       	add	r30, r28
     722:	fd 1f       	adc	r31, r29
     724:	eb 0d       	add	r30, r11
     726:	f1 1d       	adc	r31, r1
     728:	40 83       	st	Z, r20
     72a:	b3 94       	inc	r11
     72c:	11 c0       	rjmp	.+34     	; 0x750 <Modbus_mster_transaction+0x22e>
     72e:	e8 2f       	mov	r30, r24
     730:	e6 95       	lsr	r30
     732:	f0 e0       	ldi	r31, 0x00	; 0
     734:	ee 0f       	add	r30, r30
     736:	ff 1f       	adc	r31, r31
     738:	e6 55       	subi	r30, 0x56	; 86
     73a:	fc 4f       	sbci	r31, 0xFC	; 252
     73c:	40 81       	ld	r20, Z
     73e:	51 81       	ldd	r21, Z+1	; 0x01
     740:	e1 e0       	ldi	r30, 0x01	; 1
     742:	f0 e0       	ldi	r31, 0x00	; 0
     744:	ec 0f       	add	r30, r28
     746:	fd 1f       	adc	r31, r29
     748:	eb 0d       	add	r30, r11
     74a:	f1 1d       	adc	r31, r1
     74c:	50 83       	st	Z, r21
     74e:	b3 94       	inc	r11
     750:	8f 5f       	subi	r24, 0xFF	; 255
     752:	28 13       	cpse	r18, r24
     754:	d3 cf       	rjmp	.-90     	; 0x6fc <Modbus_mster_transaction+0x1da>
     756:	79 c0       	rjmp	.+242    	; 0x84a <Modbus_mster_transaction+0x328>
     758:	60 91 2a 04 	lds	r22, 0x042A	; 0x80042a <g_mod0_write_qty>
     75c:	70 91 2b 04 	lds	r23, 0x042B	; 0x80042b <g_mod0_write_qty+0x1>
     760:	e1 e0       	ldi	r30, 0x01	; 1
     762:	f0 e0       	ldi	r31, 0x00	; 0
     764:	ec 0f       	add	r30, r28
     766:	fd 1f       	adc	r31, r29
     768:	eb 0d       	add	r30, r11
     76a:	f1 1d       	adc	r31, r1
     76c:	70 83       	st	Z, r23
     76e:	81 e0       	ldi	r24, 0x01	; 1
     770:	8b 0d       	add	r24, r11
     772:	e1 e0       	ldi	r30, 0x01	; 1
     774:	f0 e0       	ldi	r31, 0x00	; 0
     776:	ec 0f       	add	r30, r28
     778:	fd 1f       	adc	r31, r29
     77a:	e8 0f       	add	r30, r24
     77c:	f1 1d       	adc	r31, r1
     77e:	60 83       	st	Z, r22
     780:	82 e0       	ldi	r24, 0x02	; 2
     782:	8b 0d       	add	r24, r11
     784:	e1 e0       	ldi	r30, 0x01	; 1
     786:	f0 e0       	ldi	r31, 0x00	; 0
     788:	ec 0f       	add	r30, r28
     78a:	fd 1f       	adc	r31, r29
     78c:	e8 0f       	add	r30, r24
     78e:	f1 1d       	adc	r31, r1
     790:	a3 e0       	ldi	r26, 0x03	; 3
     792:	ba 0e       	add	r11, r26
     794:	86 2f       	mov	r24, r22
     796:	88 0f       	add	r24, r24
     798:	80 83       	st	Z, r24
     79a:	77 27       	eor	r23, r23
     79c:	16 16       	cp	r1, r22
     79e:	17 06       	cpc	r1, r23
     7a0:	0c f0       	brlt	.+2      	; 0x7a4 <Modbus_mster_transaction+0x282>
     7a2:	53 c0       	rjmp	.+166    	; 0x84a <Modbus_mster_transaction+0x328>
     7a4:	80 e0       	ldi	r24, 0x00	; 0
     7a6:	90 e0       	ldi	r25, 0x00	; 0
     7a8:	20 e0       	ldi	r18, 0x00	; 0
     7aa:	88 0f       	add	r24, r24
     7ac:	99 1f       	adc	r25, r25
     7ae:	fc 01       	movw	r30, r24
     7b0:	e6 55       	subi	r30, 0x56	; 86
     7b2:	fc 4f       	sbci	r31, 0xFC	; 252
     7b4:	80 81       	ld	r24, Z
     7b6:	91 81       	ldd	r25, Z+1	; 0x01
     7b8:	a1 e0       	ldi	r26, 0x01	; 1
     7ba:	b0 e0       	ldi	r27, 0x00	; 0
     7bc:	ac 0f       	add	r26, r28
     7be:	bd 1f       	adc	r27, r29
     7c0:	ab 0d       	add	r26, r11
     7c2:	b1 1d       	adc	r27, r1
     7c4:	9c 93       	st	X, r25
     7c6:	40 81       	ld	r20, Z
     7c8:	51 81       	ldd	r21, Z+1	; 0x01
     7ca:	81 e0       	ldi	r24, 0x01	; 1
     7cc:	8b 0d       	add	r24, r11
     7ce:	e1 e0       	ldi	r30, 0x01	; 1
     7d0:	f0 e0       	ldi	r31, 0x00	; 0
     7d2:	ec 0f       	add	r30, r28
     7d4:	fd 1f       	adc	r31, r29
     7d6:	e8 0f       	add	r30, r24
     7d8:	f1 1d       	adc	r31, r1
     7da:	b3 94       	inc	r11
     7dc:	b3 94       	inc	r11
     7de:	40 83       	st	Z, r20
     7e0:	2f 5f       	subi	r18, 0xFF	; 255
     7e2:	82 2f       	mov	r24, r18
     7e4:	90 e0       	ldi	r25, 0x00	; 0
     7e6:	86 17       	cp	r24, r22
     7e8:	97 07       	cpc	r25, r23
     7ea:	fc f2       	brlt	.-66     	; 0x7aa <Modbus_mster_transaction+0x288>
     7ec:	2e c0       	rjmp	.+92     	; 0x84a <Modbus_mster_transaction+0x328>
     7ee:	ea ea       	ldi	r30, 0xAA	; 170
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	80 81       	ld	r24, Z
     7f4:	91 81       	ldd	r25, Z+1	; 0x01
     7f6:	a1 e0       	ldi	r26, 0x01	; 1
     7f8:	b0 e0       	ldi	r27, 0x00	; 0
     7fa:	ac 0f       	add	r26, r28
     7fc:	bd 1f       	adc	r27, r29
     7fe:	ab 0d       	add	r26, r11
     800:	b1 1d       	adc	r27, r1
     802:	9c 93       	st	X, r25
     804:	80 81       	ld	r24, Z
     806:	91 81       	ldd	r25, Z+1	; 0x01
     808:	91 e0       	ldi	r25, 0x01	; 1
     80a:	9b 0d       	add	r25, r11
     80c:	a1 e0       	ldi	r26, 0x01	; 1
     80e:	b0 e0       	ldi	r27, 0x00	; 0
     810:	ac 0f       	add	r26, r28
     812:	bd 1f       	adc	r27, r29
     814:	a9 0f       	add	r26, r25
     816:	b1 1d       	adc	r27, r1
     818:	8c 93       	st	X, r24
     81a:	82 81       	ldd	r24, Z+2	; 0x02
     81c:	93 81       	ldd	r25, Z+3	; 0x03
     81e:	82 e0       	ldi	r24, 0x02	; 2
     820:	8b 0d       	add	r24, r11
     822:	a1 e0       	ldi	r26, 0x01	; 1
     824:	b0 e0       	ldi	r27, 0x00	; 0
     826:	ac 0f       	add	r26, r28
     828:	bd 1f       	adc	r27, r29
     82a:	a8 0f       	add	r26, r24
     82c:	b1 1d       	adc	r27, r1
     82e:	9c 93       	st	X, r25
     830:	22 81       	ldd	r18, Z+2	; 0x02
     832:	33 81       	ldd	r19, Z+3	; 0x03
     834:	83 e0       	ldi	r24, 0x03	; 3
     836:	8b 0d       	add	r24, r11
     838:	e1 e0       	ldi	r30, 0x01	; 1
     83a:	f0 e0       	ldi	r31, 0x00	; 0
     83c:	ec 0f       	add	r30, r28
     83e:	fd 1f       	adc	r31, r29
     840:	e8 0f       	add	r30, r24
     842:	f1 1d       	adc	r31, r1
     844:	b4 e0       	ldi	r27, 0x04	; 4
     846:	bb 0e       	add	r11, r27
     848:	20 83       	st	Z, r18
     84a:	bb 20       	and	r11, r11
     84c:	b9 f0       	breq	.+46     	; 0x87c <Modbus_mster_transaction+0x35a>
     84e:	8e 01       	movw	r16, r28
     850:	0f 5f       	subi	r16, 0xFF	; 255
     852:	1f 4f       	sbci	r17, 0xFF	; 255
     854:	ee 24       	eor	r14, r14
     856:	ea 94       	dec	r14
     858:	eb 0c       	add	r14, r11
     85a:	f1 2c       	mov	r15, r1
     85c:	ef ef       	ldi	r30, 0xFF	; 255
     85e:	ee 1a       	sub	r14, r30
     860:	fe 0a       	sbc	r15, r30
     862:	e0 0e       	add	r14, r16
     864:	f1 1e       	adc	r15, r17
     866:	8f ef       	ldi	r24, 0xFF	; 255
     868:	9f ef       	ldi	r25, 0xFF	; 255
     86a:	d8 01       	movw	r26, r16
     86c:	6d 91       	ld	r22, X+
     86e:	8d 01       	movw	r16, r26
     870:	0e 94 f8 1e 	call	0x3df0	; 0x3df0 <crc16_update>
     874:	0e 15       	cp	r16, r14
     876:	1f 05       	cpc	r17, r15
     878:	c1 f7       	brne	.-16     	; 0x86a <Modbus_mster_transaction+0x348>
     87a:	02 c0       	rjmp	.+4      	; 0x880 <Modbus_mster_transaction+0x35e>
     87c:	8f ef       	ldi	r24, 0xFF	; 255
     87e:	9f ef       	ldi	r25, 0xFF	; 255
     880:	ee 24       	eor	r14, r14
     882:	e3 94       	inc	r14
     884:	eb 0c       	add	r14, r11
     886:	e1 e0       	ldi	r30, 0x01	; 1
     888:	f0 e0       	ldi	r31, 0x00	; 0
     88a:	ec 0f       	add	r30, r28
     88c:	fd 1f       	adc	r31, r29
     88e:	eb 0d       	add	r30, r11
     890:	f1 1d       	adc	r31, r1
     892:	80 83       	st	Z, r24
     894:	b3 94       	inc	r11
     896:	b3 94       	inc	r11
     898:	e1 e0       	ldi	r30, 0x01	; 1
     89a:	f0 e0       	ldi	r31, 0x00	; 0
     89c:	ec 0f       	add	r30, r28
     89e:	fd 1f       	adc	r31, r29
     8a0:	ee 0d       	add	r30, r14
     8a2:	f1 1d       	adc	r31, r1
     8a4:	90 83       	st	Z, r25
     8a6:	e1 e0       	ldi	r30, 0x01	; 1
     8a8:	f0 e0       	ldi	r31, 0x00	; 0
     8aa:	ec 0f       	add	r30, r28
     8ac:	fd 1f       	adc	r31, r29
     8ae:	eb 0d       	add	r30, r11
     8b0:	f1 1d       	adc	r31, r1
     8b2:	10 82       	st	Z, r1
     8b4:	e0 91 9d 03 	lds	r30, 0x039D	; 0x80039d <g_mod0_Serial_getc>
     8b8:	f0 91 9e 03 	lds	r31, 0x039E	; 0x80039e <g_mod0_Serial_getc+0x1>
     8bc:	19 95       	eicall
     8be:	81 15       	cp	r24, r1
     8c0:	91 40       	sbci	r25, 0x01	; 1
     8c2:	c1 f7       	brne	.-16     	; 0x8b4 <Modbus_mster_transaction+0x392>
     8c4:	e0 91 a3 03 	lds	r30, 0x03A3	; 0x8003a3 <g_mod0_pre_transmission>
     8c8:	f0 91 a4 03 	lds	r31, 0x03A4	; 0x8003a4 <g_mod0_pre_transmission+0x1>
     8cc:	30 97       	sbiw	r30, 0x00	; 0
     8ce:	09 f0       	breq	.+2      	; 0x8d2 <Modbus_mster_transaction+0x3b0>
     8d0:	19 95       	eicall
     8d2:	bb 20       	and	r11, r11
     8d4:	a1 f0       	breq	.+40     	; 0x8fe <Modbus_mster_transaction+0x3dc>
     8d6:	8e 01       	movw	r16, r28
     8d8:	0f 5f       	subi	r16, 0xFF	; 255
     8da:	1f 4f       	sbci	r17, 0xFF	; 255
     8dc:	f1 2c       	mov	r15, r1
     8de:	ef ef       	ldi	r30, 0xFF	; 255
     8e0:	ee 1a       	sub	r14, r30
     8e2:	fe 0a       	sbc	r15, r30
     8e4:	e0 0e       	add	r14, r16
     8e6:	f1 1e       	adc	r15, r17
     8e8:	e0 91 9f 03 	lds	r30, 0x039F	; 0x80039f <g_mod0_Serial_putc>
     8ec:	f0 91 a0 03 	lds	r31, 0x03A0	; 0x8003a0 <g_mod0_Serial_putc+0x1>
     8f0:	d8 01       	movw	r26, r16
     8f2:	8d 91       	ld	r24, X+
     8f4:	8d 01       	movw	r16, r26
     8f6:	19 95       	eicall
     8f8:	0e 15       	cp	r16, r14
     8fa:	1f 05       	cpc	r17, r15
     8fc:	a9 f7       	brne	.-22     	; 0x8e8 <Modbus_mster_transaction+0x3c6>
     8fe:	e0 91 9b 03 	lds	r30, 0x039B	; 0x80039b <g_mod0_Serial_flush>
     902:	f0 91 9c 03 	lds	r31, 0x039C	; 0x80039c <g_mod0_Serial_flush+0x1>
     906:	19 95       	eicall
     908:	ef e8       	ldi	r30, 0x8F	; 143
     90a:	f1 e0       	ldi	r31, 0x01	; 1
     90c:	31 97       	sbiw	r30, 0x01	; 1
     90e:	f1 f7       	brne	.-4      	; 0x90c <Modbus_mster_transaction+0x3ea>
     910:	00 c0       	rjmp	.+0      	; 0x912 <Modbus_mster_transaction+0x3f0>
     912:	00 00       	nop
     914:	e0 91 a1 03 	lds	r30, 0x03A1	; 0x8003a1 <g_mod0_post_transmission>
     918:	f0 91 a2 03 	lds	r31, 0x03A2	; 0x8003a2 <g_mod0_post_transmission+0x1>
     91c:	30 97       	sbiw	r30, 0x00	; 0
     91e:	09 f0       	breq	.+2      	; 0x922 <Modbus_mster_transaction+0x400>
     920:	19 95       	eicall
     922:	ff ef       	ldi	r31, 0xFF	; 255
     924:	23 ed       	ldi	r18, 0xD3	; 211
     926:	80 e3       	ldi	r24, 0x30	; 48
     928:	f1 50       	subi	r31, 0x01	; 1
     92a:	20 40       	sbci	r18, 0x00	; 0
     92c:	80 40       	sbci	r24, 0x00	; 0
     92e:	e1 f7       	brne	.-8      	; 0x928 <Modbus_mster_transaction+0x406>
     930:	00 c0       	rjmp	.+0      	; 0x932 <Modbus_mster_transaction+0x410>
     932:	00 00       	nop
     934:	0e 94 19 1f 	call	0x3e32	; 0x3e32 <Get_millis>
     938:	4b 01       	movw	r8, r22
     93a:	5c 01       	movw	r10, r24
     93c:	08 e0       	ldi	r16, 0x08	; 8
     93e:	10 e0       	ldi	r17, 0x00	; 0
     940:	ed 2c       	mov	r14, r13
     942:	f1 2c       	mov	r15, r1
     944:	e0 91 99 03 	lds	r30, 0x0399	; 0x800399 <g_mod0_Serial_available>
     948:	f0 91 9a 03 	lds	r31, 0x039A	; 0x80039a <g_mod0_Serial_available+0x1>
     94c:	19 95       	eicall
     94e:	89 2b       	or	r24, r25
     950:	91 f0       	breq	.+36     	; 0x976 <Modbus_mster_transaction+0x454>
     952:	dd 24       	eor	r13, r13
     954:	d3 94       	inc	r13
     956:	d1 0e       	add	r13, r17
     958:	e0 91 9d 03 	lds	r30, 0x039D	; 0x80039d <g_mod0_Serial_getc>
     95c:	f0 91 9e 03 	lds	r31, 0x039E	; 0x80039e <g_mod0_Serial_getc+0x1>
     960:	19 95       	eicall
     962:	e1 e0       	ldi	r30, 0x01	; 1
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	ec 0f       	add	r30, r28
     968:	fd 1f       	adc	r31, r29
     96a:	e1 0f       	add	r30, r17
     96c:	f1 1d       	adc	r31, r1
     96e:	80 83       	st	Z, r24
     970:	01 50       	subi	r16, 0x01	; 1
     972:	1d 2d       	mov	r17, r13
     974:	07 c0       	rjmp	.+14     	; 0x984 <Modbus_mster_transaction+0x462>
     976:	e0 91 a5 03 	lds	r30, 0x03A5	; 0x8003a5 <g_mod0_idle>
     97a:	f0 91 a6 03 	lds	r31, 0x03A6	; 0x8003a6 <g_mod0_idle+0x1>
     97e:	30 97       	sbiw	r30, 0x00	; 0
     980:	09 f0       	breq	.+2      	; 0x984 <Modbus_mster_transaction+0x462>
     982:	19 95       	eicall
     984:	15 30       	cpi	r17, 0x05	; 5
     986:	59 f5       	brne	.+86     	; 0x9de <Modbus_mster_transaction+0x4bc>
     988:	99 81       	ldd	r25, Y+1	; 0x01
     98a:	80 91 b2 04 	lds	r24, 0x04B2	; 0x8004b2 <g_mod0_slave>
     98e:	98 13       	cpse	r25, r24
     990:	2b c4       	rjmp	.+2134   	; 0x11e8 <Modbus_mster_transaction+0xcc6>
     992:	8a 81       	ldd	r24, Y+2	; 0x02
     994:	28 2f       	mov	r18, r24
     996:	2f 77       	andi	r18, 0x7F	; 127
     998:	30 e0       	ldi	r19, 0x00	; 0
     99a:	2e 15       	cp	r18, r14
     99c:	3f 05       	cpc	r19, r15
     99e:	09 f0       	breq	.+2      	; 0x9a2 <Modbus_mster_transaction+0x480>
     9a0:	25 c4       	rjmp	.+2122   	; 0x11ec <Modbus_mster_transaction+0xcca>
     9a2:	88 23       	and	r24, r24
     9a4:	2c f4       	brge	.+10     	; 0x9b0 <Modbus_mster_transaction+0x48e>
     9a6:	8b 81       	ldd	r24, Y+3	; 0x03
     9a8:	88 23       	and	r24, r24
     9aa:	09 f4       	brne	.+2      	; 0x9ae <Modbus_mster_transaction+0x48c>
     9ac:	3d c0       	rjmp	.+122    	; 0xa28 <Modbus_mster_transaction+0x506>
     9ae:	ca c0       	rjmp	.+404    	; 0xb44 <Modbus_mster_transaction+0x622>
     9b0:	81 31       	cpi	r24, 0x11	; 17
     9b2:	58 f4       	brcc	.+22     	; 0x9ca <Modbus_mster_transaction+0x4a8>
     9b4:	8f 30       	cpi	r24, 0x0F	; 15
     9b6:	08 f0       	brcs	.+2      	; 0x9ba <Modbus_mster_transaction+0x498>
     9b8:	b5 c3       	rjmp	.+1898   	; 0x1124 <Modbus_mster_transaction+0xc02>
     9ba:	81 30       	cpi	r24, 0x01	; 1
     9bc:	80 f0       	brcs	.+32     	; 0x9de <Modbus_mster_transaction+0x4bc>
     9be:	85 30       	cpi	r24, 0x05	; 5
     9c0:	68 f0       	brcs	.+26     	; 0x9dc <Modbus_mster_transaction+0x4ba>
     9c2:	87 30       	cpi	r24, 0x07	; 7
     9c4:	08 f4       	brcc	.+2      	; 0x9c8 <Modbus_mster_transaction+0x4a6>
     9c6:	ae c3       	rjmp	.+1884   	; 0x1124 <Modbus_mster_transaction+0xc02>
     9c8:	0a c0       	rjmp	.+20     	; 0x9de <Modbus_mster_transaction+0x4bc>
     9ca:	87 31       	cpi	r24, 0x17	; 23
     9cc:	39 f0       	breq	.+14     	; 0x9dc <Modbus_mster_transaction+0x4ba>
     9ce:	8f 3f       	cpi	r24, 0xFF	; 255
     9d0:	09 f4       	brne	.+2      	; 0x9d4 <Modbus_mster_transaction+0x4b2>
     9d2:	a8 c3       	rjmp	.+1872   	; 0x1124 <Modbus_mster_transaction+0xc02>
     9d4:	86 31       	cpi	r24, 0x16	; 22
     9d6:	19 f4       	brne	.+6      	; 0x9de <Modbus_mster_transaction+0x4bc>
     9d8:	05 e0       	ldi	r16, 0x05	; 5
     9da:	a5 c3       	rjmp	.+1866   	; 0x1126 <Modbus_mster_transaction+0xc04>
     9dc:	0b 81       	ldd	r16, Y+3	; 0x03
     9de:	0e 94 19 1f 	call	0x3e32	; 0x3e32 <Get_millis>
     9e2:	dc 01       	movw	r26, r24
     9e4:	cb 01       	movw	r24, r22
     9e6:	88 19       	sub	r24, r8
     9e8:	99 09       	sbc	r25, r9
     9ea:	aa 09       	sbc	r26, r10
     9ec:	bb 09       	sbc	r27, r11
     9ee:	81 3d       	cpi	r24, 0xD1	; 209
     9f0:	97 40       	sbci	r25, 0x07	; 7
     9f2:	a1 05       	cpc	r26, r1
     9f4:	b1 05       	cpc	r27, r1
     9f6:	08 f4       	brcc	.+2      	; 0x9fa <Modbus_mster_transaction+0x4d8>
     9f8:	eb c3       	rjmp	.+2006   	; 0x11d0 <Modbus_mster_transaction+0xcae>
     9fa:	80 e0       	ldi	r24, 0x00	; 0
     9fc:	92 e0       	ldi	r25, 0x02	; 2
     9fe:	50 d7       	rcall	.+3744   	; 0x18a0 <UART0_puts>
     a00:	8a e0       	ldi	r24, 0x0A	; 10
     a02:	19 d7       	rcall	.+3634   	; 0x1836 <UART0_putc>
     a04:	01 11       	cpse	r16, r1
     a06:	f4 c3       	rjmp	.+2024   	; 0x11f0 <Modbus_mster_transaction+0xcce>
     a08:	82 ee       	ldi	r24, 0xE2	; 226
     a0a:	81 11       	cpse	r24, r1
     a0c:	9b c0       	rjmp	.+310    	; 0xb44 <Modbus_mster_transaction+0x622>
     a0e:	15 30       	cpi	r17, 0x05	; 5
     a10:	08 f4       	brcc	.+2      	; 0xa14 <Modbus_mster_transaction+0x4f2>
     a12:	a9 c3       	rjmp	.+1874   	; 0x1166 <Modbus_mster_transaction+0xc44>
     a14:	a1 2e       	mov	r10, r17
     a16:	b1 2c       	mov	r11, r1
     a18:	75 01       	movw	r14, r10
     a1a:	f2 e0       	ldi	r31, 0x02	; 2
     a1c:	ef 1a       	sub	r14, r31
     a1e:	f1 08       	sbc	r15, r1
     a20:	1e 14       	cp	r1, r14
     a22:	1f 04       	cpc	r1, r15
     a24:	5c f0       	brlt	.+22     	; 0xa3c <Modbus_mster_transaction+0x51a>
     a26:	8e c3       	rjmp	.+1820   	; 0x1144 <Modbus_mster_transaction+0xc22>
     a28:	0f 2e       	mov	r0, r31
     a2a:	f3 e0       	ldi	r31, 0x03	; 3
     a2c:	ef 2e       	mov	r14, r31
     a2e:	f1 2c       	mov	r15, r1
     a30:	f0 2d       	mov	r31, r0
     a32:	0f 2e       	mov	r0, r31
     a34:	f5 e0       	ldi	r31, 0x05	; 5
     a36:	af 2e       	mov	r10, r31
     a38:	b1 2c       	mov	r11, r1
     a3a:	f0 2d       	mov	r31, r0
     a3c:	20 e0       	ldi	r18, 0x00	; 0
     a3e:	30 e0       	ldi	r19, 0x00	; 0
     a40:	8f ef       	ldi	r24, 0xFF	; 255
     a42:	9f ef       	ldi	r25, 0xFF	; 255
     a44:	10 e0       	ldi	r17, 0x00	; 0
     a46:	e1 e0       	ldi	r30, 0x01	; 1
     a48:	f0 e0       	ldi	r31, 0x00	; 0
     a4a:	ec 0f       	add	r30, r28
     a4c:	fd 1f       	adc	r31, r29
     a4e:	e2 0f       	add	r30, r18
     a50:	f3 1f       	adc	r31, r19
     a52:	60 81       	ld	r22, Z
     a54:	0e 94 f8 1e 	call	0x3df0	; 0x3df0 <crc16_update>
     a58:	1f 5f       	subi	r17, 0xFF	; 255
     a5a:	21 2f       	mov	r18, r17
     a5c:	30 e0       	ldi	r19, 0x00	; 0
     a5e:	2e 15       	cp	r18, r14
     a60:	3f 05       	cpc	r19, r15
     a62:	8c f3       	brlt	.-30     	; 0xa46 <Modbus_mster_transaction+0x524>
     a64:	71 c3       	rjmp	.+1762   	; 0x1148 <Modbus_mster_transaction+0xc26>
     a66:	89 2f       	mov	r24, r25
     a68:	99 27       	eor	r25, r25
     a6a:	fe 01       	movw	r30, r28
     a6c:	ea 0d       	add	r30, r10
     a6e:	fb 1d       	adc	r31, r11
     a70:	20 81       	ld	r18, Z
     a72:	30 e0       	ldi	r19, 0x00	; 0
     a74:	82 17       	cp	r24, r18
     a76:	93 07       	cpc	r25, r19
     a78:	09 f0       	breq	.+2      	; 0xa7c <Modbus_mster_transaction+0x55a>
     a7a:	73 c3       	rjmp	.+1766   	; 0x1162 <Modbus_mster_transaction+0xc40>
     a7c:	74 c3       	rjmp	.+1768   	; 0x1166 <Modbus_mster_transaction+0xc44>
     a7e:	9b 81       	ldd	r25, Y+3	; 0x03
     a80:	96 95       	lsr	r25
     a82:	e9 f5       	brne	.+122    	; 0xafe <Modbus_mster_transaction+0x5dc>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	5e c0       	rjmp	.+188    	; 0xb44 <Modbus_mster_transaction+0x622>
     a88:	7b 81       	ldd	r23, Y+3	; 0x03
     a8a:	97 2f       	mov	r25, r23
     a8c:	96 95       	lsr	r25
     a8e:	09 f4       	brne	.+2      	; 0xa92 <Modbus_mster_transaction+0x570>
     a90:	78 c3       	rjmp	.+1776   	; 0x1182 <Modbus_mster_transaction+0xc60>
     a92:	fe 01       	movw	r30, r28
     a94:	31 96       	adiw	r30, 0x01	; 1
     a96:	40 e0       	ldi	r20, 0x00	; 0
     a98:	50 e0       	ldi	r21, 0x00	; 0
     a9a:	80 e0       	ldi	r24, 0x00	; 0
     a9c:	80 34       	cpi	r24, 0x40	; 64
     a9e:	70 f4       	brcc	.+28     	; 0xabc <Modbus_mster_transaction+0x59a>
     aa0:	24 81       	ldd	r18, Z+4	; 0x04
     aa2:	30 e0       	ldi	r19, 0x00	; 0
     aa4:	32 2f       	mov	r19, r18
     aa6:	22 27       	eor	r18, r18
     aa8:	63 81       	ldd	r22, Z+3	; 0x03
     aaa:	26 2b       	or	r18, r22
     aac:	da 01       	movw	r26, r20
     aae:	aa 0f       	add	r26, r26
     ab0:	bb 1f       	adc	r27, r27
     ab2:	a2 5d       	subi	r26, 0xD2	; 210
     ab4:	bb 4f       	sbci	r27, 0xFB	; 251
     ab6:	11 96       	adiw	r26, 0x01	; 1
     ab8:	3c 93       	st	X, r19
     aba:	2e 93       	st	-X, r18
     abc:	8f 5f       	subi	r24, 0xFF	; 255
     abe:	4f 5f       	subi	r20, 0xFF	; 255
     ac0:	5f 4f       	sbci	r21, 0xFF	; 255
     ac2:	32 96       	adiw	r30, 0x02	; 2
     ac4:	89 13       	cpse	r24, r25
     ac6:	ea cf       	rjmp	.-44     	; 0xa9c <Modbus_mster_transaction+0x57a>
     ac8:	8f ef       	ldi	r24, 0xFF	; 255
     aca:	89 0f       	add	r24, r25
     acc:	80 93 a7 03 	sts	0x03A7, r24	; 0x8003a7 <g_mod0_response_buffer_length>
     ad0:	70 ff       	sbrs	r23, 0
     ad2:	35 c0       	rjmp	.+106    	; 0xb3e <Modbus_mster_transaction+0x61c>
     ad4:	90 34       	cpi	r25, 0x40	; 64
     ad6:	70 f4       	brcc	.+28     	; 0xaf4 <Modbus_mster_transaction+0x5d2>
     ad8:	29 2f       	mov	r18, r25
     ada:	30 e0       	ldi	r19, 0x00	; 0
     adc:	22 0f       	add	r18, r18
     ade:	33 1f       	adc	r19, r19
     ae0:	fe 01       	movw	r30, r28
     ae2:	e2 0f       	add	r30, r18
     ae4:	f3 1f       	adc	r31, r19
     ae6:	44 81       	ldd	r20, Z+4	; 0x04
     ae8:	50 e0       	ldi	r21, 0x00	; 0
     aea:	f9 01       	movw	r30, r18
     aec:	e2 5d       	subi	r30, 0xD2	; 210
     aee:	fb 4f       	sbci	r31, 0xFB	; 251
     af0:	51 83       	std	Z+1, r21	; 0x01
     af2:	40 83       	st	Z, r20
     af4:	9f 5f       	subi	r25, 0xFF	; 255
     af6:	90 93 a7 03 	sts	0x03A7, r25	; 0x8003a7 <g_mod0_response_buffer_length>
     afa:	80 e0       	ldi	r24, 0x00	; 0
     afc:	23 c0       	rjmp	.+70     	; 0xb44 <Modbus_mster_transaction+0x622>
     afe:	fe 01       	movw	r30, r28
     b00:	31 96       	adiw	r30, 0x01	; 1
     b02:	40 e0       	ldi	r20, 0x00	; 0
     b04:	50 e0       	ldi	r21, 0x00	; 0
     b06:	80 e0       	ldi	r24, 0x00	; 0
     b08:	80 34       	cpi	r24, 0x40	; 64
     b0a:	70 f4       	brcc	.+28     	; 0xb28 <Modbus_mster_transaction+0x606>
     b0c:	23 81       	ldd	r18, Z+3	; 0x03
     b0e:	30 e0       	ldi	r19, 0x00	; 0
     b10:	32 2f       	mov	r19, r18
     b12:	22 27       	eor	r18, r18
     b14:	64 81       	ldd	r22, Z+4	; 0x04
     b16:	26 2b       	or	r18, r22
     b18:	da 01       	movw	r26, r20
     b1a:	aa 0f       	add	r26, r26
     b1c:	bb 1f       	adc	r27, r27
     b1e:	a2 5d       	subi	r26, 0xD2	; 210
     b20:	bb 4f       	sbci	r27, 0xFB	; 251
     b22:	11 96       	adiw	r26, 0x01	; 1
     b24:	3c 93       	st	X, r19
     b26:	2e 93       	st	-X, r18
     b28:	8f 5f       	subi	r24, 0xFF	; 255
     b2a:	4f 5f       	subi	r20, 0xFF	; 255
     b2c:	5f 4f       	sbci	r21, 0xFF	; 255
     b2e:	32 96       	adiw	r30, 0x02	; 2
     b30:	89 13       	cpse	r24, r25
     b32:	ea cf       	rjmp	.-44     	; 0xb08 <Modbus_mster_transaction+0x5e6>
     b34:	91 50       	subi	r25, 0x01	; 1
     b36:	90 93 a7 03 	sts	0x03A7, r25	; 0x8003a7 <g_mod0_response_buffer_length>
     b3a:	80 e0       	ldi	r24, 0x00	; 0
     b3c:	03 c0       	rjmp	.+6      	; 0xb44 <Modbus_mster_transaction+0x622>
     b3e:	80 e0       	ldi	r24, 0x00	; 0
     b40:	01 c0       	rjmp	.+2      	; 0xb44 <Modbus_mster_transaction+0x622>
     b42:	80 e0       	ldi	r24, 0x00	; 0
     b44:	10 92 a9 03 	sts	0x03A9, r1	; 0x8003a9 <g_mod0_transmit_buffer_index>
     b48:	10 92 a8 03 	sts	0x03A8, r1	; 0x8003a8 <g_mod0_response_buffer_index>
     b4c:	59 c3       	rjmp	.+1714   	; 0x1200 <Modbus_mster_transaction+0xcde>
     b4e:	81 30       	cpi	r24, 0x01	; 1
     b50:	09 f0       	breq	.+2      	; 0xb54 <Modbus_mster_transaction+0x632>
     b52:	e6 c2       	rjmp	.+1484   	; 0x1120 <Modbus_mster_transaction+0xbfe>
     b54:	80 91 98 03 	lds	r24, 0x0398	; 0x800398 <g_mod1_slave>
     b58:	89 83       	std	Y+1, r24	; 0x01
     b5a:	2f ef       	ldi	r18, 0xFF	; 255
     b5c:	62 13       	cpse	r22, r18
     b5e:	06 c0       	rjmp	.+12     	; 0xb6c <Modbus_mster_transaction+0x64a>
     b60:	8f e0       	ldi	r24, 0x0F	; 15
     b62:	8a 83       	std	Y+2, r24	; 0x02
     b64:	68 94       	set
     b66:	bb 24       	eor	r11, r11
     b68:	b1 f8       	bld	r11, 1
     b6a:	32 c0       	rjmp	.+100    	; 0xbd0 <Modbus_mster_transaction+0x6ae>
     b6c:	6a 83       	std	Y+2, r22	; 0x02
     b6e:	81 e0       	ldi	r24, 0x01	; 1
     b70:	68 17       	cp	r22, r24
     b72:	b8 f0       	brcs	.+46     	; 0xba2 <Modbus_mster_transaction+0x680>
     b74:	94 e0       	ldi	r25, 0x04	; 4
     b76:	96 17       	cp	r25, r22
     b78:	18 f4       	brcc	.+6      	; 0xb80 <Modbus_mster_transaction+0x65e>
     b7a:	a7 e1       	ldi	r26, 0x17	; 23
     b7c:	6a 13       	cpse	r22, r26
     b7e:	11 c0       	rjmp	.+34     	; 0xba2 <Modbus_mster_transaction+0x680>
     b80:	80 91 96 03 	lds	r24, 0x0396	; 0x800396 <g_mod1_read_address>
     b84:	90 91 97 03 	lds	r25, 0x0397	; 0x800397 <g_mod1_read_address+0x1>
     b88:	9b 83       	std	Y+3, r25	; 0x03
     b8a:	8c 83       	std	Y+4, r24	; 0x04
     b8c:	80 91 94 03 	lds	r24, 0x0394	; 0x800394 <g_mod1_read_qty>
     b90:	90 91 95 03 	lds	r25, 0x0395	; 0x800395 <g_mod1_read_qty+0x1>
     b94:	9d 83       	std	Y+5, r25	; 0x05
     b96:	8e 83       	std	Y+6, r24	; 0x06
     b98:	0f 2e       	mov	r0, r31
     b9a:	f6 e0       	ldi	r31, 0x06	; 6
     b9c:	bf 2e       	mov	r11, r31
     b9e:	f0 2d       	mov	r31, r0
     ba0:	03 c0       	rjmp	.+6      	; 0xba8 <Modbus_mster_transaction+0x686>
     ba2:	68 94       	set
     ba4:	bb 24       	eor	r11, r11
     ba6:	b1 f8       	bld	r11, 1
     ba8:	b0 e1       	ldi	r27, 0x10	; 16
     baa:	bd 15       	cp	r27, r13
     bac:	40 f0       	brcs	.+16     	; 0xbbe <Modbus_mster_transaction+0x69c>
     bae:	ef e0       	ldi	r30, 0x0F	; 15
     bb0:	de 16       	cp	r13, r30
     bb2:	70 f4       	brcc	.+28     	; 0xbd0 <Modbus_mster_transaction+0x6ae>
     bb4:	8b ef       	ldi	r24, 0xFB	; 251
     bb6:	8d 0d       	add	r24, r13
     bb8:	82 30       	cpi	r24, 0x02	; 2
     bba:	00 f5       	brcc	.+64     	; 0xbfc <Modbus_mster_transaction+0x6da>
     bbc:	09 c0       	rjmp	.+18     	; 0xbd0 <Modbus_mster_transaction+0x6ae>
     bbe:	f6 e1       	ldi	r31, 0x16	; 22
     bc0:	df 16       	cp	r13, r31
     bc2:	e0 f0       	brcs	.+56     	; 0xbfc <Modbus_mster_transaction+0x6da>
     bc4:	27 e1       	ldi	r18, 0x17	; 23
     bc6:	2d 15       	cp	r18, r13
     bc8:	18 f4       	brcc	.+6      	; 0xbd0 <Modbus_mster_transaction+0x6ae>
     bca:	8f ef       	ldi	r24, 0xFF	; 255
     bcc:	d8 12       	cpse	r13, r24
     bce:	16 c0       	rjmp	.+44     	; 0xbfc <Modbus_mster_transaction+0x6da>
     bd0:	90 91 12 03 	lds	r25, 0x0312	; 0x800312 <g_mod1_write_address>
     bd4:	80 91 13 03 	lds	r24, 0x0313	; 0x800313 <g_mod1_write_address+0x1>
     bd8:	e1 e0       	ldi	r30, 0x01	; 1
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	ec 0f       	add	r30, r28
     bde:	fd 1f       	adc	r31, r29
     be0:	eb 0d       	add	r30, r11
     be2:	f1 1d       	adc	r31, r1
     be4:	80 83       	st	Z, r24
     be6:	81 e0       	ldi	r24, 0x01	; 1
     be8:	8b 0d       	add	r24, r11
     bea:	e1 e0       	ldi	r30, 0x01	; 1
     bec:	f0 e0       	ldi	r31, 0x00	; 0
     bee:	ec 0f       	add	r30, r28
     bf0:	fd 1f       	adc	r31, r29
     bf2:	e8 0f       	add	r30, r24
     bf4:	f1 1d       	adc	r31, r1
     bf6:	b3 94       	inc	r11
     bf8:	b3 94       	inc	r11
     bfa:	90 83       	st	Z, r25
     bfc:	90 e1       	ldi	r25, 0x10	; 16
     bfe:	d9 16       	cp	r13, r25
     c00:	09 f4       	brne	.+2      	; 0xc04 <Modbus_mster_transaction+0x6e2>
     c02:	ad c0       	rjmp	.+346    	; 0xd5e <Modbus_mster_transaction+0x83c>
     c04:	9d 15       	cp	r25, r13
     c06:	58 f0       	brcs	.+22     	; 0xc1e <Modbus_mster_transaction+0x6fc>
     c08:	a6 e0       	ldi	r26, 0x06	; 6
     c0a:	da 16       	cp	r13, r26
     c0c:	61 f1       	breq	.+88     	; 0xc66 <Modbus_mster_transaction+0x744>
     c0e:	bf e0       	ldi	r27, 0x0F	; 15
     c10:	db 16       	cp	r13, r27
     c12:	09 f4       	brne	.+2      	; 0xc16 <Modbus_mster_transaction+0x6f4>
     c14:	41 c0       	rjmp	.+130    	; 0xc98 <Modbus_mster_transaction+0x776>
     c16:	e5 e0       	ldi	r30, 0x05	; 5
     c18:	de 12       	cpse	r13, r30
     c1a:	1b c1       	rjmp	.+566    	; 0xe52 <Modbus_mster_transaction+0x930>
     c1c:	0d c0       	rjmp	.+26     	; 0xc38 <Modbus_mster_transaction+0x716>
     c1e:	f7 e1       	ldi	r31, 0x17	; 23
     c20:	df 16       	cp	r13, r31
     c22:	09 f4       	brne	.+2      	; 0xc26 <Modbus_mster_transaction+0x704>
     c24:	9c c0       	rjmp	.+312    	; 0xd5e <Modbus_mster_transaction+0x83c>
     c26:	2f ef       	ldi	r18, 0xFF	; 255
     c28:	d2 16       	cp	r13, r18
     c2a:	09 f4       	brne	.+2      	; 0xc2e <Modbus_mster_transaction+0x70c>
     c2c:	98 c0       	rjmp	.+304    	; 0xd5e <Modbus_mster_transaction+0x83c>
     c2e:	86 e1       	ldi	r24, 0x16	; 22
     c30:	d8 16       	cp	r13, r24
     c32:	09 f4       	brne	.+2      	; 0xc36 <Modbus_mster_transaction+0x714>
     c34:	e0 c0       	rjmp	.+448    	; 0xdf6 <Modbus_mster_transaction+0x8d4>
     c36:	0d c1       	rjmp	.+538    	; 0xe52 <Modbus_mster_transaction+0x930>
     c38:	90 91 10 03 	lds	r25, 0x0310	; 0x800310 <g_mod1_write_qty>
     c3c:	80 91 11 03 	lds	r24, 0x0311	; 0x800311 <g_mod1_write_qty+0x1>
     c40:	e1 e0       	ldi	r30, 0x01	; 1
     c42:	f0 e0       	ldi	r31, 0x00	; 0
     c44:	ec 0f       	add	r30, r28
     c46:	fd 1f       	adc	r31, r29
     c48:	eb 0d       	add	r30, r11
     c4a:	f1 1d       	adc	r31, r1
     c4c:	80 83       	st	Z, r24
     c4e:	81 e0       	ldi	r24, 0x01	; 1
     c50:	8b 0d       	add	r24, r11
     c52:	e1 e0       	ldi	r30, 0x01	; 1
     c54:	f0 e0       	ldi	r31, 0x00	; 0
     c56:	ec 0f       	add	r30, r28
     c58:	fd 1f       	adc	r31, r29
     c5a:	e8 0f       	add	r30, r24
     c5c:	f1 1d       	adc	r31, r1
     c5e:	b3 94       	inc	r11
     c60:	b3 94       	inc	r11
     c62:	90 83       	st	Z, r25
     c64:	f6 c0       	rjmp	.+492    	; 0xe52 <Modbus_mster_transaction+0x930>
     c66:	e0 e9       	ldi	r30, 0x90	; 144
     c68:	f2 e0       	ldi	r31, 0x02	; 2
     c6a:	80 81       	ld	r24, Z
     c6c:	91 81       	ldd	r25, Z+1	; 0x01
     c6e:	a1 e0       	ldi	r26, 0x01	; 1
     c70:	b0 e0       	ldi	r27, 0x00	; 0
     c72:	ac 0f       	add	r26, r28
     c74:	bd 1f       	adc	r27, r29
     c76:	ab 0d       	add	r26, r11
     c78:	b1 1d       	adc	r27, r1
     c7a:	9c 93       	st	X, r25
     c7c:	20 81       	ld	r18, Z
     c7e:	31 81       	ldd	r19, Z+1	; 0x01
     c80:	81 e0       	ldi	r24, 0x01	; 1
     c82:	8b 0d       	add	r24, r11
     c84:	e1 e0       	ldi	r30, 0x01	; 1
     c86:	f0 e0       	ldi	r31, 0x00	; 0
     c88:	ec 0f       	add	r30, r28
     c8a:	fd 1f       	adc	r31, r29
     c8c:	e8 0f       	add	r30, r24
     c8e:	f1 1d       	adc	r31, r1
     c90:	b3 94       	inc	r11
     c92:	b3 94       	inc	r11
     c94:	20 83       	st	Z, r18
     c96:	dd c0       	rjmp	.+442    	; 0xe52 <Modbus_mster_transaction+0x930>
     c98:	80 91 10 03 	lds	r24, 0x0310	; 0x800310 <g_mod1_write_qty>
     c9c:	90 91 11 03 	lds	r25, 0x0311	; 0x800311 <g_mod1_write_qty+0x1>
     ca0:	e1 e0       	ldi	r30, 0x01	; 1
     ca2:	f0 e0       	ldi	r31, 0x00	; 0
     ca4:	ec 0f       	add	r30, r28
     ca6:	fd 1f       	adc	r31, r29
     ca8:	eb 0d       	add	r30, r11
     caa:	f1 1d       	adc	r31, r1
     cac:	90 83       	st	Z, r25
     cae:	22 e0       	ldi	r18, 0x02	; 2
     cb0:	2b 0d       	add	r18, r11
     cb2:	31 e0       	ldi	r19, 0x01	; 1
     cb4:	3b 0d       	add	r19, r11
     cb6:	e1 e0       	ldi	r30, 0x01	; 1
     cb8:	f0 e0       	ldi	r31, 0x00	; 0
     cba:	ec 0f       	add	r30, r28
     cbc:	fd 1f       	adc	r31, r29
     cbe:	e3 0f       	add	r30, r19
     cc0:	f1 1d       	adc	r31, r1
     cc2:	80 83       	st	Z, r24
     cc4:	ac 01       	movw	r20, r24
     cc6:	47 70       	andi	r20, 0x07	; 7
     cc8:	55 27       	eor	r21, r21
     cca:	45 2b       	or	r20, r21
     ccc:	49 f0       	breq	.+18     	; 0xce0 <Modbus_mster_transaction+0x7be>
     cce:	96 95       	lsr	r25
     cd0:	87 95       	ror	r24
     cd2:	96 95       	lsr	r25
     cd4:	87 95       	ror	r24
     cd6:	96 95       	lsr	r25
     cd8:	87 95       	ror	r24
     cda:	91 e0       	ldi	r25, 0x01	; 1
     cdc:	98 0f       	add	r25, r24
     cde:	07 c0       	rjmp	.+14     	; 0xcee <Modbus_mster_transaction+0x7cc>
     ce0:	96 95       	lsr	r25
     ce2:	87 95       	ror	r24
     ce4:	96 95       	lsr	r25
     ce6:	87 95       	ror	r24
     ce8:	96 95       	lsr	r25
     cea:	87 95       	ror	r24
     cec:	98 2f       	mov	r25, r24
     cee:	a3 e0       	ldi	r26, 0x03	; 3
     cf0:	ba 0e       	add	r11, r26
     cf2:	fe 01       	movw	r30, r28
     cf4:	e2 0f       	add	r30, r18
     cf6:	f1 1d       	adc	r31, r1
     cf8:	91 83       	std	Z+1, r25	; 0x01
     cfa:	99 23       	and	r25, r25
     cfc:	09 f4       	brne	.+2      	; 0xd00 <Modbus_mster_transaction+0x7de>
     cfe:	a9 c0       	rjmp	.+338    	; 0xe52 <Modbus_mster_transaction+0x930>
     d00:	80 e0       	ldi	r24, 0x00	; 0
     d02:	28 2f       	mov	r18, r24
     d04:	21 70       	andi	r18, 0x01	; 1
     d06:	80 ff       	sbrs	r24, 0
     d08:	03 c0       	rjmp	.+6      	; 0xd10 <Modbus_mster_transaction+0x7ee>
     d0a:	21 30       	cpi	r18, 0x01	; 1
     d0c:	99 f0       	breq	.+38     	; 0xd34 <Modbus_mster_transaction+0x812>
     d0e:	23 c0       	rjmp	.+70     	; 0xd56 <Modbus_mster_transaction+0x834>
     d10:	e8 2f       	mov	r30, r24
     d12:	e6 95       	lsr	r30
     d14:	f0 e0       	ldi	r31, 0x00	; 0
     d16:	ee 0f       	add	r30, r30
     d18:	ff 1f       	adc	r31, r31
     d1a:	e0 57       	subi	r30, 0x70	; 112
     d1c:	fd 4f       	sbci	r31, 0xFD	; 253
     d1e:	20 81       	ld	r18, Z
     d20:	31 81       	ldd	r19, Z+1	; 0x01
     d22:	e1 e0       	ldi	r30, 0x01	; 1
     d24:	f0 e0       	ldi	r31, 0x00	; 0
     d26:	ec 0f       	add	r30, r28
     d28:	fd 1f       	adc	r31, r29
     d2a:	eb 0d       	add	r30, r11
     d2c:	f1 1d       	adc	r31, r1
     d2e:	20 83       	st	Z, r18
     d30:	b3 94       	inc	r11
     d32:	11 c0       	rjmp	.+34     	; 0xd56 <Modbus_mster_transaction+0x834>
     d34:	e8 2f       	mov	r30, r24
     d36:	e6 95       	lsr	r30
     d38:	f0 e0       	ldi	r31, 0x00	; 0
     d3a:	ee 0f       	add	r30, r30
     d3c:	ff 1f       	adc	r31, r31
     d3e:	e0 57       	subi	r30, 0x70	; 112
     d40:	fd 4f       	sbci	r31, 0xFD	; 253
     d42:	20 81       	ld	r18, Z
     d44:	31 81       	ldd	r19, Z+1	; 0x01
     d46:	e1 e0       	ldi	r30, 0x01	; 1
     d48:	f0 e0       	ldi	r31, 0x00	; 0
     d4a:	ec 0f       	add	r30, r28
     d4c:	fd 1f       	adc	r31, r29
     d4e:	eb 0d       	add	r30, r11
     d50:	f1 1d       	adc	r31, r1
     d52:	30 83       	st	Z, r19
     d54:	b3 94       	inc	r11
     d56:	8f 5f       	subi	r24, 0xFF	; 255
     d58:	98 13       	cpse	r25, r24
     d5a:	d3 cf       	rjmp	.-90     	; 0xd02 <Modbus_mster_transaction+0x7e0>
     d5c:	7a c0       	rjmp	.+244    	; 0xe52 <Modbus_mster_transaction+0x930>
     d5e:	80 91 10 03 	lds	r24, 0x0310	; 0x800310 <g_mod1_write_qty>
     d62:	90 91 11 03 	lds	r25, 0x0311	; 0x800311 <g_mod1_write_qty+0x1>
     d66:	e1 e0       	ldi	r30, 0x01	; 1
     d68:	f0 e0       	ldi	r31, 0x00	; 0
     d6a:	ec 0f       	add	r30, r28
     d6c:	fd 1f       	adc	r31, r29
     d6e:	eb 0d       	add	r30, r11
     d70:	f1 1d       	adc	r31, r1
     d72:	90 83       	st	Z, r25
     d74:	21 e0       	ldi	r18, 0x01	; 1
     d76:	2b 0d       	add	r18, r11
     d78:	e1 e0       	ldi	r30, 0x01	; 1
     d7a:	f0 e0       	ldi	r31, 0x00	; 0
     d7c:	ec 0f       	add	r30, r28
     d7e:	fd 1f       	adc	r31, r29
     d80:	e2 0f       	add	r30, r18
     d82:	f1 1d       	adc	r31, r1
     d84:	80 83       	st	Z, r24
     d86:	22 e0       	ldi	r18, 0x02	; 2
     d88:	2b 0d       	add	r18, r11
     d8a:	e1 e0       	ldi	r30, 0x01	; 1
     d8c:	f0 e0       	ldi	r31, 0x00	; 0
     d8e:	ec 0f       	add	r30, r28
     d90:	fd 1f       	adc	r31, r29
     d92:	e2 0f       	add	r30, r18
     d94:	f1 1d       	adc	r31, r1
     d96:	b3 e0       	ldi	r27, 0x03	; 3
     d98:	bb 0e       	add	r11, r27
     d9a:	28 2f       	mov	r18, r24
     d9c:	22 0f       	add	r18, r18
     d9e:	20 83       	st	Z, r18
     da0:	ac 01       	movw	r20, r24
     da2:	55 27       	eor	r21, r21
     da4:	14 16       	cp	r1, r20
     da6:	15 06       	cpc	r1, r21
     da8:	0c f0       	brlt	.+2      	; 0xdac <Modbus_mster_transaction+0x88a>
     daa:	53 c0       	rjmp	.+166    	; 0xe52 <Modbus_mster_transaction+0x930>
     dac:	80 e0       	ldi	r24, 0x00	; 0
     dae:	90 e0       	ldi	r25, 0x00	; 0
     db0:	20 e0       	ldi	r18, 0x00	; 0
     db2:	88 0f       	add	r24, r24
     db4:	99 1f       	adc	r25, r25
     db6:	fc 01       	movw	r30, r24
     db8:	e0 57       	subi	r30, 0x70	; 112
     dba:	fd 4f       	sbci	r31, 0xFD	; 253
     dbc:	80 81       	ld	r24, Z
     dbe:	91 81       	ldd	r25, Z+1	; 0x01
     dc0:	a1 e0       	ldi	r26, 0x01	; 1
     dc2:	b0 e0       	ldi	r27, 0x00	; 0
     dc4:	ac 0f       	add	r26, r28
     dc6:	bd 1f       	adc	r27, r29
     dc8:	ab 0d       	add	r26, r11
     dca:	b1 1d       	adc	r27, r1
     dcc:	9c 93       	st	X, r25
     dce:	60 81       	ld	r22, Z
     dd0:	71 81       	ldd	r23, Z+1	; 0x01
     dd2:	81 e0       	ldi	r24, 0x01	; 1
     dd4:	8b 0d       	add	r24, r11
     dd6:	e1 e0       	ldi	r30, 0x01	; 1
     dd8:	f0 e0       	ldi	r31, 0x00	; 0
     dda:	ec 0f       	add	r30, r28
     ddc:	fd 1f       	adc	r31, r29
     dde:	e8 0f       	add	r30, r24
     de0:	f1 1d       	adc	r31, r1
     de2:	b3 94       	inc	r11
     de4:	b3 94       	inc	r11
     de6:	60 83       	st	Z, r22
     de8:	2f 5f       	subi	r18, 0xFF	; 255
     dea:	82 2f       	mov	r24, r18
     dec:	90 e0       	ldi	r25, 0x00	; 0
     dee:	84 17       	cp	r24, r20
     df0:	95 07       	cpc	r25, r21
     df2:	fc f2       	brlt	.-66     	; 0xdb2 <Modbus_mster_transaction+0x890>
     df4:	2e c0       	rjmp	.+92     	; 0xe52 <Modbus_mster_transaction+0x930>
     df6:	e0 e9       	ldi	r30, 0x90	; 144
     df8:	f2 e0       	ldi	r31, 0x02	; 2
     dfa:	80 81       	ld	r24, Z
     dfc:	91 81       	ldd	r25, Z+1	; 0x01
     dfe:	a1 e0       	ldi	r26, 0x01	; 1
     e00:	b0 e0       	ldi	r27, 0x00	; 0
     e02:	ac 0f       	add	r26, r28
     e04:	bd 1f       	adc	r27, r29
     e06:	ab 0d       	add	r26, r11
     e08:	b1 1d       	adc	r27, r1
     e0a:	9c 93       	st	X, r25
     e0c:	80 81       	ld	r24, Z
     e0e:	91 81       	ldd	r25, Z+1	; 0x01
     e10:	91 e0       	ldi	r25, 0x01	; 1
     e12:	9b 0d       	add	r25, r11
     e14:	a1 e0       	ldi	r26, 0x01	; 1
     e16:	b0 e0       	ldi	r27, 0x00	; 0
     e18:	ac 0f       	add	r26, r28
     e1a:	bd 1f       	adc	r27, r29
     e1c:	a9 0f       	add	r26, r25
     e1e:	b1 1d       	adc	r27, r1
     e20:	8c 93       	st	X, r24
     e22:	82 81       	ldd	r24, Z+2	; 0x02
     e24:	93 81       	ldd	r25, Z+3	; 0x03
     e26:	82 e0       	ldi	r24, 0x02	; 2
     e28:	8b 0d       	add	r24, r11
     e2a:	a1 e0       	ldi	r26, 0x01	; 1
     e2c:	b0 e0       	ldi	r27, 0x00	; 0
     e2e:	ac 0f       	add	r26, r28
     e30:	bd 1f       	adc	r27, r29
     e32:	a8 0f       	add	r26, r24
     e34:	b1 1d       	adc	r27, r1
     e36:	9c 93       	st	X, r25
     e38:	22 81       	ldd	r18, Z+2	; 0x02
     e3a:	33 81       	ldd	r19, Z+3	; 0x03
     e3c:	83 e0       	ldi	r24, 0x03	; 3
     e3e:	8b 0d       	add	r24, r11
     e40:	e1 e0       	ldi	r30, 0x01	; 1
     e42:	f0 e0       	ldi	r31, 0x00	; 0
     e44:	ec 0f       	add	r30, r28
     e46:	fd 1f       	adc	r31, r29
     e48:	e8 0f       	add	r30, r24
     e4a:	f1 1d       	adc	r31, r1
     e4c:	84 e0       	ldi	r24, 0x04	; 4
     e4e:	b8 0e       	add	r11, r24
     e50:	20 83       	st	Z, r18
     e52:	bb 20       	and	r11, r11
     e54:	b9 f0       	breq	.+46     	; 0xe84 <Modbus_mster_transaction+0x962>
     e56:	8e 01       	movw	r16, r28
     e58:	0f 5f       	subi	r16, 0xFF	; 255
     e5a:	1f 4f       	sbci	r17, 0xFF	; 255
     e5c:	ee 24       	eor	r14, r14
     e5e:	ea 94       	dec	r14
     e60:	eb 0c       	add	r14, r11
     e62:	f1 2c       	mov	r15, r1
     e64:	9f ef       	ldi	r25, 0xFF	; 255
     e66:	e9 1a       	sub	r14, r25
     e68:	f9 0a       	sbc	r15, r25
     e6a:	e0 0e       	add	r14, r16
     e6c:	f1 1e       	adc	r15, r17
     e6e:	8f ef       	ldi	r24, 0xFF	; 255
     e70:	9f ef       	ldi	r25, 0xFF	; 255
     e72:	d8 01       	movw	r26, r16
     e74:	6d 91       	ld	r22, X+
     e76:	8d 01       	movw	r16, r26
     e78:	0e 94 f8 1e 	call	0x3df0	; 0x3df0 <crc16_update>
     e7c:	0e 15       	cp	r16, r14
     e7e:	1f 05       	cpc	r17, r15
     e80:	c1 f7       	brne	.-16     	; 0xe72 <Modbus_mster_transaction+0x950>
     e82:	02 c0       	rjmp	.+4      	; 0xe88 <Modbus_mster_transaction+0x966>
     e84:	8f ef       	ldi	r24, 0xFF	; 255
     e86:	9f ef       	ldi	r25, 0xFF	; 255
     e88:	ee 24       	eor	r14, r14
     e8a:	e3 94       	inc	r14
     e8c:	eb 0c       	add	r14, r11
     e8e:	e1 e0       	ldi	r30, 0x01	; 1
     e90:	f0 e0       	ldi	r31, 0x00	; 0
     e92:	ec 0f       	add	r30, r28
     e94:	fd 1f       	adc	r31, r29
     e96:	eb 0d       	add	r30, r11
     e98:	f1 1d       	adc	r31, r1
     e9a:	80 83       	st	Z, r24
     e9c:	b3 94       	inc	r11
     e9e:	b3 94       	inc	r11
     ea0:	e1 e0       	ldi	r30, 0x01	; 1
     ea2:	f0 e0       	ldi	r31, 0x00	; 0
     ea4:	ec 0f       	add	r30, r28
     ea6:	fd 1f       	adc	r31, r29
     ea8:	ee 0d       	add	r30, r14
     eaa:	f1 1d       	adc	r31, r1
     eac:	90 83       	st	Z, r25
     eae:	e1 e0       	ldi	r30, 0x01	; 1
     eb0:	f0 e0       	ldi	r31, 0x00	; 0
     eb2:	ec 0f       	add	r30, r28
     eb4:	fd 1f       	adc	r31, r29
     eb6:	eb 0d       	add	r30, r11
     eb8:	f1 1d       	adc	r31, r1
     eba:	10 82       	st	Z, r1
     ebc:	e0 91 83 02 	lds	r30, 0x0283	; 0x800283 <g_mod1_Serial_getc>
     ec0:	f0 91 84 02 	lds	r31, 0x0284	; 0x800284 <g_mod1_Serial_getc+0x1>
     ec4:	19 95       	eicall
     ec6:	81 15       	cp	r24, r1
     ec8:	91 40       	sbci	r25, 0x01	; 1
     eca:	c1 f7       	brne	.-16     	; 0xebc <Modbus_mster_transaction+0x99a>
     ecc:	e0 91 89 02 	lds	r30, 0x0289	; 0x800289 <g_mod1_pre_transmission>
     ed0:	f0 91 8a 02 	lds	r31, 0x028A	; 0x80028a <g_mod1_pre_transmission+0x1>
     ed4:	30 97       	sbiw	r30, 0x00	; 0
     ed6:	09 f0       	breq	.+2      	; 0xeda <Modbus_mster_transaction+0x9b8>
     ed8:	19 95       	eicall
     eda:	bb 20       	and	r11, r11
     edc:	a1 f0       	breq	.+40     	; 0xf06 <Modbus_mster_transaction+0x9e4>
     ede:	8e 01       	movw	r16, r28
     ee0:	0f 5f       	subi	r16, 0xFF	; 255
     ee2:	1f 4f       	sbci	r17, 0xFF	; 255
     ee4:	f1 2c       	mov	r15, r1
     ee6:	ef ef       	ldi	r30, 0xFF	; 255
     ee8:	ee 1a       	sub	r14, r30
     eea:	fe 0a       	sbc	r15, r30
     eec:	e0 0e       	add	r14, r16
     eee:	f1 1e       	adc	r15, r17
     ef0:	e0 91 85 02 	lds	r30, 0x0285	; 0x800285 <g_mod1_Serial_putc>
     ef4:	f0 91 86 02 	lds	r31, 0x0286	; 0x800286 <g_mod1_Serial_putc+0x1>
     ef8:	d8 01       	movw	r26, r16
     efa:	8d 91       	ld	r24, X+
     efc:	8d 01       	movw	r16, r26
     efe:	19 95       	eicall
     f00:	e0 16       	cp	r14, r16
     f02:	f1 06       	cpc	r15, r17
     f04:	a9 f7       	brne	.-22     	; 0xef0 <Modbus_mster_transaction+0x9ce>
     f06:	e0 91 7f 02 	lds	r30, 0x027F	; 0x80027f <g_mod1_Serial_flush>
     f0a:	f0 91 80 02 	lds	r31, 0x0280	; 0x800280 <g_mod1_Serial_flush+0x1>
     f0e:	19 95       	eicall
     f10:	e0 91 87 02 	lds	r30, 0x0287	; 0x800287 <g_mod1_post_transmission>
     f14:	f0 91 88 02 	lds	r31, 0x0288	; 0x800288 <g_mod1_post_transmission+0x1>
     f18:	30 97       	sbiw	r30, 0x00	; 0
     f1a:	09 f0       	breq	.+2      	; 0xf1e <Modbus_mster_transaction+0x9fc>
     f1c:	19 95       	eicall
     f1e:	0e 94 19 1f 	call	0x3e32	; 0x3e32 <Get_millis>
     f22:	4b 01       	movw	r8, r22
     f24:	5c 01       	movw	r10, r24
     f26:	08 e0       	ldi	r16, 0x08	; 8
     f28:	10 e0       	ldi	r17, 0x00	; 0
     f2a:	ed 2c       	mov	r14, r13
     f2c:	f1 2c       	mov	r15, r1
     f2e:	e0 91 81 02 	lds	r30, 0x0281	; 0x800281 <g_mod1_Serial_available>
     f32:	f0 91 82 02 	lds	r31, 0x0282	; 0x800282 <g_mod1_Serial_available+0x1>
     f36:	19 95       	eicall
     f38:	89 2b       	or	r24, r25
     f3a:	91 f0       	breq	.+36     	; 0xf60 <Modbus_mster_transaction+0xa3e>
     f3c:	dd 24       	eor	r13, r13
     f3e:	d3 94       	inc	r13
     f40:	d1 0e       	add	r13, r17
     f42:	e0 91 83 02 	lds	r30, 0x0283	; 0x800283 <g_mod1_Serial_getc>
     f46:	f0 91 84 02 	lds	r31, 0x0284	; 0x800284 <g_mod1_Serial_getc+0x1>
     f4a:	19 95       	eicall
     f4c:	e1 e0       	ldi	r30, 0x01	; 1
     f4e:	f0 e0       	ldi	r31, 0x00	; 0
     f50:	ec 0f       	add	r30, r28
     f52:	fd 1f       	adc	r31, r29
     f54:	e1 0f       	add	r30, r17
     f56:	f1 1d       	adc	r31, r1
     f58:	80 83       	st	Z, r24
     f5a:	01 50       	subi	r16, 0x01	; 1
     f5c:	1d 2d       	mov	r17, r13
     f5e:	07 c0       	rjmp	.+14     	; 0xf6e <Modbus_mster_transaction+0xa4c>
     f60:	e0 91 8b 02 	lds	r30, 0x028B	; 0x80028b <g_mod1_idle>
     f64:	f0 91 8c 02 	lds	r31, 0x028C	; 0x80028c <g_mod1_idle+0x1>
     f68:	30 97       	sbiw	r30, 0x00	; 0
     f6a:	09 f0       	breq	.+2      	; 0xf6e <Modbus_mster_transaction+0xa4c>
     f6c:	19 95       	eicall
     f6e:	15 30       	cpi	r17, 0x05	; 5
     f70:	51 f5       	brne	.+84     	; 0xfc6 <Modbus_mster_transaction+0xaa4>
     f72:	99 81       	ldd	r25, Y+1	; 0x01
     f74:	80 91 98 03 	lds	r24, 0x0398	; 0x800398 <g_mod1_slave>
     f78:	98 13       	cpse	r25, r24
     f7a:	3c c1       	rjmp	.+632    	; 0x11f4 <Modbus_mster_transaction+0xcd2>
     f7c:	8a 81       	ldd	r24, Y+2	; 0x02
     f7e:	28 2f       	mov	r18, r24
     f80:	2f 77       	andi	r18, 0x7F	; 127
     f82:	30 e0       	ldi	r19, 0x00	; 0
     f84:	2e 15       	cp	r18, r14
     f86:	3f 05       	cpc	r19, r15
     f88:	09 f0       	breq	.+2      	; 0xf8c <Modbus_mster_transaction+0xa6a>
     f8a:	36 c1       	rjmp	.+620    	; 0x11f8 <Modbus_mster_transaction+0xcd6>
     f8c:	88 23       	and	r24, r24
     f8e:	24 f4       	brge	.+8      	; 0xf98 <Modbus_mster_transaction+0xa76>
     f90:	8b 81       	ldd	r24, Y+3	; 0x03
     f92:	88 23       	and	r24, r24
     f94:	b1 f1       	breq	.+108    	; 0x1002 <Modbus_mster_transaction+0xae0>
     f96:	bf c0       	rjmp	.+382    	; 0x1116 <Modbus_mster_transaction+0xbf4>
     f98:	81 31       	cpi	r24, 0x11	; 17
     f9a:	48 f4       	brcc	.+18     	; 0xfae <Modbus_mster_transaction+0xa8c>
     f9c:	8f 30       	cpi	r24, 0x0F	; 15
     f9e:	70 f4       	brcc	.+28     	; 0xfbc <Modbus_mster_transaction+0xa9a>
     fa0:	81 30       	cpi	r24, 0x01	; 1
     fa2:	88 f0       	brcs	.+34     	; 0xfc6 <Modbus_mster_transaction+0xaa4>
     fa4:	85 30       	cpi	r24, 0x05	; 5
     fa6:	60 f0       	brcs	.+24     	; 0xfc0 <Modbus_mster_transaction+0xa9e>
     fa8:	87 30       	cpi	r24, 0x07	; 7
     faa:	40 f0       	brcs	.+16     	; 0xfbc <Modbus_mster_transaction+0xa9a>
     fac:	0c c0       	rjmp	.+24     	; 0xfc6 <Modbus_mster_transaction+0xaa4>
     fae:	87 31       	cpi	r24, 0x17	; 23
     fb0:	39 f0       	breq	.+14     	; 0xfc0 <Modbus_mster_transaction+0xa9e>
     fb2:	8f 3f       	cpi	r24, 0xFF	; 255
     fb4:	19 f0       	breq	.+6      	; 0xfbc <Modbus_mster_transaction+0xa9a>
     fb6:	86 31       	cpi	r24, 0x16	; 22
     fb8:	29 f0       	breq	.+10     	; 0xfc4 <Modbus_mster_transaction+0xaa2>
     fba:	05 c0       	rjmp	.+10     	; 0xfc6 <Modbus_mster_transaction+0xaa4>
     fbc:	03 e0       	ldi	r16, 0x03	; 3
     fbe:	03 c0       	rjmp	.+6      	; 0xfc6 <Modbus_mster_transaction+0xaa4>
     fc0:	0b 81       	ldd	r16, Y+3	; 0x03
     fc2:	01 c0       	rjmp	.+2      	; 0xfc6 <Modbus_mster_transaction+0xaa4>
     fc4:	05 e0       	ldi	r16, 0x05	; 5
     fc6:	0e 94 19 1f 	call	0x3e32	; 0x3e32 <Get_millis>
     fca:	dc 01       	movw	r26, r24
     fcc:	cb 01       	movw	r24, r22
     fce:	88 19       	sub	r24, r8
     fd0:	99 09       	sbc	r25, r9
     fd2:	aa 09       	sbc	r26, r10
     fd4:	bb 09       	sbc	r27, r11
     fd6:	81 3d       	cpi	r24, 0xD1	; 209
     fd8:	97 40       	sbci	r25, 0x07	; 7
     fda:	a1 05       	cpc	r26, r1
     fdc:	b1 05       	cpc	r27, r1
     fde:	08 f0       	brcs	.+2      	; 0xfe2 <Modbus_mster_transaction+0xac0>
     fe0:	fb c0       	rjmp	.+502    	; 0x11d8 <Modbus_mster_transaction+0xcb6>
     fe2:	fe c0       	rjmp	.+508    	; 0x11e0 <Modbus_mster_transaction+0xcbe>
     fe4:	81 11       	cpse	r24, r1
     fe6:	97 c0       	rjmp	.+302    	; 0x1116 <Modbus_mster_transaction+0xbf4>
     fe8:	15 30       	cpi	r17, 0x05	; 5
     fea:	08 f4       	brcc	.+2      	; 0xfee <Modbus_mster_transaction+0xacc>
     fec:	df c0       	rjmp	.+446    	; 0x11ac <Modbus_mster_transaction+0xc8a>
     fee:	01 2f       	mov	r16, r17
     ff0:	10 e0       	ldi	r17, 0x00	; 0
     ff2:	78 01       	movw	r14, r16
     ff4:	f2 e0       	ldi	r31, 0x02	; 2
     ff6:	ef 1a       	sub	r14, r31
     ff8:	f1 08       	sbc	r15, r1
     ffa:	1e 14       	cp	r1, r14
     ffc:	1f 04       	cpc	r1, r15
     ffe:	44 f0       	brlt	.+16     	; 0x1010 <Modbus_mster_transaction+0xaee>
    1000:	c4 c0       	rjmp	.+392    	; 0x118a <Modbus_mster_transaction+0xc68>
    1002:	0f 2e       	mov	r0, r31
    1004:	f3 e0       	ldi	r31, 0x03	; 3
    1006:	ef 2e       	mov	r14, r31
    1008:	f1 2c       	mov	r15, r1
    100a:	f0 2d       	mov	r31, r0
    100c:	05 e0       	ldi	r16, 0x05	; 5
    100e:	10 e0       	ldi	r17, 0x00	; 0
    1010:	20 e0       	ldi	r18, 0x00	; 0
    1012:	30 e0       	ldi	r19, 0x00	; 0
    1014:	8f ef       	ldi	r24, 0xFF	; 255
    1016:	9f ef       	ldi	r25, 0xFF	; 255
    1018:	d1 2c       	mov	r13, r1
    101a:	e1 e0       	ldi	r30, 0x01	; 1
    101c:	f0 e0       	ldi	r31, 0x00	; 0
    101e:	ec 0f       	add	r30, r28
    1020:	fd 1f       	adc	r31, r29
    1022:	e2 0f       	add	r30, r18
    1024:	f3 1f       	adc	r31, r19
    1026:	60 81       	ld	r22, Z
    1028:	0e 94 f8 1e 	call	0x3df0	; 0x3df0 <crc16_update>
    102c:	d3 94       	inc	r13
    102e:	2d 2d       	mov	r18, r13
    1030:	30 e0       	ldi	r19, 0x00	; 0
    1032:	2e 15       	cp	r18, r14
    1034:	3f 05       	cpc	r19, r15
    1036:	8c f3       	brlt	.-30     	; 0x101a <Modbus_mster_transaction+0xaf8>
    1038:	aa c0       	rjmp	.+340    	; 0x118e <Modbus_mster_transaction+0xc6c>
    103a:	89 2f       	mov	r24, r25
    103c:	99 27       	eor	r25, r25
    103e:	fe 01       	movw	r30, r28
    1040:	e0 0f       	add	r30, r16
    1042:	f1 1f       	adc	r31, r17
    1044:	20 81       	ld	r18, Z
    1046:	30 e0       	ldi	r19, 0x00	; 0
    1048:	82 17       	cp	r24, r18
    104a:	93 07       	cpc	r25, r19
    104c:	09 f0       	breq	.+2      	; 0x1050 <Modbus_mster_transaction+0xb2e>
    104e:	ac c0       	rjmp	.+344    	; 0x11a8 <Modbus_mster_transaction+0xc86>
    1050:	ad c0       	rjmp	.+346    	; 0x11ac <Modbus_mster_transaction+0xc8a>
    1052:	8b 81       	ldd	r24, Y+3	; 0x03
    1054:	86 95       	lsr	r24
    1056:	e1 f5       	brne	.+120    	; 0x10d0 <Modbus_mster_transaction+0xbae>
    1058:	5e c0       	rjmp	.+188    	; 0x1116 <Modbus_mster_transaction+0xbf4>
    105a:	6b 81       	ldd	r22, Y+3	; 0x03
    105c:	86 2f       	mov	r24, r22
    105e:	86 95       	lsr	r24
    1060:	09 f4       	brne	.+2      	; 0x1064 <Modbus_mster_transaction+0xb42>
    1062:	b2 c0       	rjmp	.+356    	; 0x11c8 <Modbus_mster_transaction+0xca6>
    1064:	fe 01       	movw	r30, r28
    1066:	31 96       	adiw	r30, 0x01	; 1
    1068:	40 e0       	ldi	r20, 0x00	; 0
    106a:	50 e0       	ldi	r21, 0x00	; 0
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	90 34       	cpi	r25, 0x40	; 64
    1070:	70 f4       	brcc	.+28     	; 0x108e <Modbus_mster_transaction+0xb6c>
    1072:	24 81       	ldd	r18, Z+4	; 0x04
    1074:	30 e0       	ldi	r19, 0x00	; 0
    1076:	32 2f       	mov	r19, r18
    1078:	22 27       	eor	r18, r18
    107a:	73 81       	ldd	r23, Z+3	; 0x03
    107c:	27 2b       	or	r18, r23
    107e:	da 01       	movw	r26, r20
    1080:	aa 0f       	add	r26, r26
    1082:	bb 1f       	adc	r27, r27
    1084:	ac 5e       	subi	r26, 0xEC	; 236
    1086:	bc 4f       	sbci	r27, 0xFC	; 252
    1088:	11 96       	adiw	r26, 0x01	; 1
    108a:	3c 93       	st	X, r19
    108c:	2e 93       	st	-X, r18
    108e:	9f 5f       	subi	r25, 0xFF	; 255
    1090:	4f 5f       	subi	r20, 0xFF	; 255
    1092:	5f 4f       	sbci	r21, 0xFF	; 255
    1094:	32 96       	adiw	r30, 0x02	; 2
    1096:	98 13       	cpse	r25, r24
    1098:	ea cf       	rjmp	.-44     	; 0x106e <Modbus_mster_transaction+0xb4c>
    109a:	9f ef       	ldi	r25, 0xFF	; 255
    109c:	98 0f       	add	r25, r24
    109e:	90 93 8d 02 	sts	0x028D, r25	; 0x80028d <g_mod1_response_buffer_length>
    10a2:	60 ff       	sbrs	r22, 0
    10a4:	35 c0       	rjmp	.+106    	; 0x1110 <Modbus_mster_transaction+0xbee>
    10a6:	80 34       	cpi	r24, 0x40	; 64
    10a8:	70 f4       	brcc	.+28     	; 0x10c6 <Modbus_mster_transaction+0xba4>
    10aa:	28 2f       	mov	r18, r24
    10ac:	30 e0       	ldi	r19, 0x00	; 0
    10ae:	22 0f       	add	r18, r18
    10b0:	33 1f       	adc	r19, r19
    10b2:	fe 01       	movw	r30, r28
    10b4:	e2 0f       	add	r30, r18
    10b6:	f3 1f       	adc	r31, r19
    10b8:	44 81       	ldd	r20, Z+4	; 0x04
    10ba:	50 e0       	ldi	r21, 0x00	; 0
    10bc:	f9 01       	movw	r30, r18
    10be:	ec 5e       	subi	r30, 0xEC	; 236
    10c0:	fc 4f       	sbci	r31, 0xFC	; 252
    10c2:	51 83       	std	Z+1, r21	; 0x01
    10c4:	40 83       	st	Z, r20
    10c6:	8f 5f       	subi	r24, 0xFF	; 255
    10c8:	80 93 8d 02 	sts	0x028D, r24	; 0x80028d <g_mod1_response_buffer_length>
    10cc:	80 e0       	ldi	r24, 0x00	; 0
    10ce:	23 c0       	rjmp	.+70     	; 0x1116 <Modbus_mster_transaction+0xbf4>
    10d0:	fe 01       	movw	r30, r28
    10d2:	31 96       	adiw	r30, 0x01	; 1
    10d4:	40 e0       	ldi	r20, 0x00	; 0
    10d6:	50 e0       	ldi	r21, 0x00	; 0
    10d8:	90 e0       	ldi	r25, 0x00	; 0
    10da:	90 34       	cpi	r25, 0x40	; 64
    10dc:	70 f4       	brcc	.+28     	; 0x10fa <Modbus_mster_transaction+0xbd8>
    10de:	23 81       	ldd	r18, Z+3	; 0x03
    10e0:	30 e0       	ldi	r19, 0x00	; 0
    10e2:	32 2f       	mov	r19, r18
    10e4:	22 27       	eor	r18, r18
    10e6:	64 81       	ldd	r22, Z+4	; 0x04
    10e8:	26 2b       	or	r18, r22
    10ea:	da 01       	movw	r26, r20
    10ec:	aa 0f       	add	r26, r26
    10ee:	bb 1f       	adc	r27, r27
    10f0:	ac 5e       	subi	r26, 0xEC	; 236
    10f2:	bc 4f       	sbci	r27, 0xFC	; 252
    10f4:	11 96       	adiw	r26, 0x01	; 1
    10f6:	3c 93       	st	X, r19
    10f8:	2e 93       	st	-X, r18
    10fa:	9f 5f       	subi	r25, 0xFF	; 255
    10fc:	4f 5f       	subi	r20, 0xFF	; 255
    10fe:	5f 4f       	sbci	r21, 0xFF	; 255
    1100:	32 96       	adiw	r30, 0x02	; 2
    1102:	98 13       	cpse	r25, r24
    1104:	ea cf       	rjmp	.-44     	; 0x10da <Modbus_mster_transaction+0xbb8>
    1106:	81 50       	subi	r24, 0x01	; 1
    1108:	80 93 8d 02 	sts	0x028D, r24	; 0x80028d <g_mod1_response_buffer_length>
    110c:	80 e0       	ldi	r24, 0x00	; 0
    110e:	03 c0       	rjmp	.+6      	; 0x1116 <Modbus_mster_transaction+0xbf4>
    1110:	80 e0       	ldi	r24, 0x00	; 0
    1112:	01 c0       	rjmp	.+2      	; 0x1116 <Modbus_mster_transaction+0xbf4>
    1114:	80 e0       	ldi	r24, 0x00	; 0
    1116:	10 92 8f 02 	sts	0x028F, r1	; 0x80028f <g_mod1_transmit_buffer_index>
    111a:	10 92 8e 02 	sts	0x028E, r1	; 0x80028e <g_mod1_response_buffer_index>
    111e:	70 c0       	rjmp	.+224    	; 0x1200 <Modbus_mster_transaction+0xcde>
    1120:	84 ee       	ldi	r24, 0xE4	; 228
    1122:	6e c0       	rjmp	.+220    	; 0x1200 <Modbus_mster_transaction+0xcde>
    1124:	03 e0       	ldi	r16, 0x03	; 3
    1126:	0e 94 19 1f 	call	0x3e32	; 0x3e32 <Get_millis>
    112a:	dc 01       	movw	r26, r24
    112c:	cb 01       	movw	r24, r22
    112e:	88 19       	sub	r24, r8
    1130:	99 09       	sbc	r25, r9
    1132:	aa 09       	sbc	r26, r10
    1134:	bb 09       	sbc	r27, r11
    1136:	81 3d       	cpi	r24, 0xD1	; 209
    1138:	97 40       	sbci	r25, 0x07	; 7
    113a:	a1 05       	cpc	r26, r1
    113c:	b1 05       	cpc	r27, r1
    113e:	08 f4       	brcc	.+2      	; 0x1142 <Modbus_mster_transaction+0xc20>
    1140:	01 cc       	rjmp	.-2046   	; 0x944 <Modbus_mster_transaction+0x422>
    1142:	5b cc       	rjmp	.-1866   	; 0x9fa <Modbus_mster_transaction+0x4d8>
    1144:	8f ef       	ldi	r24, 0xFF	; 255
    1146:	9f ef       	ldi	r25, 0xFF	; 255
    1148:	fe 01       	movw	r30, r28
    114a:	ee 0d       	add	r30, r14
    114c:	ff 1d       	adc	r31, r15
    114e:	21 81       	ldd	r18, Z+1	; 0x01
    1150:	30 e0       	ldi	r19, 0x00	; 0
    1152:	ac 01       	movw	r20, r24
    1154:	55 27       	eor	r21, r21
    1156:	42 17       	cp	r20, r18
    1158:	53 07       	cpc	r21, r19
    115a:	09 f4       	brne	.+2      	; 0x115e <Modbus_mster_transaction+0xc3c>
    115c:	84 cc       	rjmp	.-1784   	; 0xa66 <Modbus_mster_transaction+0x544>
    115e:	83 ee       	ldi	r24, 0xE3	; 227
    1160:	f1 cc       	rjmp	.-1566   	; 0xb44 <Modbus_mster_transaction+0x622>
    1162:	83 ee       	ldi	r24, 0xE3	; 227
    1164:	ef cc       	rjmp	.-1570   	; 0xb44 <Modbus_mster_transaction+0x622>
    1166:	8a 81       	ldd	r24, Y+2	; 0x02
    1168:	85 30       	cpi	r24, 0x05	; 5
    116a:	38 f4       	brcc	.+14     	; 0x117a <Modbus_mster_transaction+0xc58>
    116c:	83 30       	cpi	r24, 0x03	; 3
    116e:	08 f0       	brcs	.+2      	; 0x1172 <Modbus_mster_transaction+0xc50>
    1170:	86 cc       	rjmp	.-1780   	; 0xa7e <Modbus_mster_transaction+0x55c>
    1172:	81 30       	cpi	r24, 0x01	; 1
    1174:	08 f0       	brcs	.+2      	; 0x1178 <Modbus_mster_transaction+0xc56>
    1176:	88 cc       	rjmp	.-1776   	; 0xa88 <Modbus_mster_transaction+0x566>
    1178:	e4 cc       	rjmp	.-1592   	; 0xb42 <Modbus_mster_transaction+0x620>
    117a:	87 31       	cpi	r24, 0x17	; 23
    117c:	09 f4       	brne	.+2      	; 0x1180 <Modbus_mster_transaction+0xc5e>
    117e:	7f cc       	rjmp	.-1794   	; 0xa7e <Modbus_mster_transaction+0x55c>
    1180:	e0 cc       	rjmp	.-1600   	; 0xb42 <Modbus_mster_transaction+0x620>
    1182:	70 fd       	sbrc	r23, 0
    1184:	a9 cc       	rjmp	.-1710   	; 0xad8 <Modbus_mster_transaction+0x5b6>
    1186:	80 e0       	ldi	r24, 0x00	; 0
    1188:	dd cc       	rjmp	.-1606   	; 0xb44 <Modbus_mster_transaction+0x622>
    118a:	8f ef       	ldi	r24, 0xFF	; 255
    118c:	9f ef       	ldi	r25, 0xFF	; 255
    118e:	fe 01       	movw	r30, r28
    1190:	ee 0d       	add	r30, r14
    1192:	ff 1d       	adc	r31, r15
    1194:	21 81       	ldd	r18, Z+1	; 0x01
    1196:	30 e0       	ldi	r19, 0x00	; 0
    1198:	ac 01       	movw	r20, r24
    119a:	55 27       	eor	r21, r21
    119c:	42 17       	cp	r20, r18
    119e:	53 07       	cpc	r21, r19
    11a0:	09 f4       	brne	.+2      	; 0x11a4 <Modbus_mster_transaction+0xc82>
    11a2:	4b cf       	rjmp	.-362    	; 0x103a <Modbus_mster_transaction+0xb18>
    11a4:	83 ee       	ldi	r24, 0xE3	; 227
    11a6:	b7 cf       	rjmp	.-146    	; 0x1116 <Modbus_mster_transaction+0xbf4>
    11a8:	83 ee       	ldi	r24, 0xE3	; 227
    11aa:	b5 cf       	rjmp	.-150    	; 0x1116 <Modbus_mster_transaction+0xbf4>
    11ac:	8a 81       	ldd	r24, Y+2	; 0x02
    11ae:	85 30       	cpi	r24, 0x05	; 5
    11b0:	38 f4       	brcc	.+14     	; 0x11c0 <Modbus_mster_transaction+0xc9e>
    11b2:	83 30       	cpi	r24, 0x03	; 3
    11b4:	08 f0       	brcs	.+2      	; 0x11b8 <Modbus_mster_transaction+0xc96>
    11b6:	4d cf       	rjmp	.-358    	; 0x1052 <Modbus_mster_transaction+0xb30>
    11b8:	81 30       	cpi	r24, 0x01	; 1
    11ba:	08 f0       	brcs	.+2      	; 0x11be <Modbus_mster_transaction+0xc9c>
    11bc:	4e cf       	rjmp	.-356    	; 0x105a <Modbus_mster_transaction+0xb38>
    11be:	aa cf       	rjmp	.-172    	; 0x1114 <Modbus_mster_transaction+0xbf2>
    11c0:	87 31       	cpi	r24, 0x17	; 23
    11c2:	09 f4       	brne	.+2      	; 0x11c6 <Modbus_mster_transaction+0xca4>
    11c4:	46 cf       	rjmp	.-372    	; 0x1052 <Modbus_mster_transaction+0xb30>
    11c6:	a6 cf       	rjmp	.-180    	; 0x1114 <Modbus_mster_transaction+0xbf2>
    11c8:	60 fd       	sbrc	r22, 0
    11ca:	6f cf       	rjmp	.-290    	; 0x10aa <Modbus_mster_transaction+0xb88>
    11cc:	80 e0       	ldi	r24, 0x00	; 0
    11ce:	a3 cf       	rjmp	.-186    	; 0x1116 <Modbus_mster_transaction+0xbf4>
    11d0:	01 11       	cpse	r16, r1
    11d2:	b8 cb       	rjmp	.-2192   	; 0x944 <Modbus_mster_transaction+0x422>
    11d4:	80 e0       	ldi	r24, 0x00	; 0
    11d6:	19 cc       	rjmp	.-1998   	; 0xa0a <Modbus_mster_transaction+0x4e8>
    11d8:	01 11       	cpse	r16, r1
    11da:	10 c0       	rjmp	.+32     	; 0x11fc <Modbus_mster_transaction+0xcda>
    11dc:	82 ee       	ldi	r24, 0xE2	; 226
    11de:	02 cf       	rjmp	.-508    	; 0xfe4 <Modbus_mster_transaction+0xac2>
    11e0:	01 11       	cpse	r16, r1
    11e2:	a5 ce       	rjmp	.-694    	; 0xf2e <Modbus_mster_transaction+0xa0c>
    11e4:	80 e0       	ldi	r24, 0x00	; 0
    11e6:	fe ce       	rjmp	.-516    	; 0xfe4 <Modbus_mster_transaction+0xac2>
    11e8:	80 ee       	ldi	r24, 0xE0	; 224
    11ea:	ac cc       	rjmp	.-1704   	; 0xb44 <Modbus_mster_transaction+0x622>
    11ec:	81 ee       	ldi	r24, 0xE1	; 225
    11ee:	aa cc       	rjmp	.-1708   	; 0xb44 <Modbus_mster_transaction+0x622>
    11f0:	82 ee       	ldi	r24, 0xE2	; 226
    11f2:	a8 cc       	rjmp	.-1712   	; 0xb44 <Modbus_mster_transaction+0x622>
    11f4:	80 ee       	ldi	r24, 0xE0	; 224
    11f6:	8f cf       	rjmp	.-226    	; 0x1116 <Modbus_mster_transaction+0xbf4>
    11f8:	81 ee       	ldi	r24, 0xE1	; 225
    11fa:	8d cf       	rjmp	.-230    	; 0x1116 <Modbus_mster_transaction+0xbf4>
    11fc:	82 ee       	ldi	r24, 0xE2	; 226
    11fe:	8b cf       	rjmp	.-234    	; 0x1116 <Modbus_mster_transaction+0xbf4>
    1200:	d3 95       	inc	r29
    1202:	0f b6       	in	r0, 0x3f	; 63
    1204:	f8 94       	cli
    1206:	de bf       	out	0x3e, r29	; 62
    1208:	0f be       	out	0x3f, r0	; 63
    120a:	cd bf       	out	0x3d, r28	; 61
    120c:	df 91       	pop	r29
    120e:	cf 91       	pop	r28
    1210:	1f 91       	pop	r17
    1212:	0f 91       	pop	r16
    1214:	ff 90       	pop	r15
    1216:	ef 90       	pop	r14
    1218:	df 90       	pop	r13
    121a:	bf 90       	pop	r11
    121c:	af 90       	pop	r10
    121e:	9f 90       	pop	r9
    1220:	8f 90       	pop	r8
    1222:	08 95       	ret

00001224 <Modbus_init>:
    1224:	fb 01       	movw	r30, r22
    1226:	81 11       	cpse	r24, r1
    1228:	86 c0       	rjmp	.+268    	; 0x1336 <Modbus_init+0x112>
    122a:	80 81       	ld	r24, Z
    122c:	80 93 b2 04 	sts	0x04B2, r24	; 0x8004b2 <g_mod0_slave>
    1230:	41 81       	ldd	r20, Z+1	; 0x01
    1232:	62 81       	ldd	r22, Z+2	; 0x02
    1234:	73 81       	ldd	r23, Z+3	; 0x03
    1236:	84 81       	ldd	r24, Z+4	; 0x04
    1238:	95 81       	ldd	r25, Z+5	; 0x05
    123a:	26 81       	ldd	r18, Z+6	; 0x06
    123c:	37 81       	ldd	r19, Z+7	; 0x07
    123e:	30 93 a4 03 	sts	0x03A4, r19	; 0x8003a4 <g_mod0_pre_transmission+0x1>
    1242:	20 93 a3 03 	sts	0x03A3, r18	; 0x8003a3 <g_mod0_pre_transmission>
    1246:	20 85       	ldd	r18, Z+8	; 0x08
    1248:	31 85       	ldd	r19, Z+9	; 0x09
    124a:	30 93 a2 03 	sts	0x03A2, r19	; 0x8003a2 <g_mod0_post_transmission+0x1>
    124e:	20 93 a1 03 	sts	0x03A1, r18	; 0x8003a1 <g_mod0_post_transmission>
    1252:	10 92 a6 03 	sts	0x03A6, r1	; 0x8003a6 <g_mod0_idle+0x1>
    1256:	10 92 a5 03 	sts	0x03A5, r1	; 0x8003a5 <g_mod0_idle>
    125a:	10 92 a8 03 	sts	0x03A8, r1	; 0x8003a8 <g_mod0_response_buffer_index>
    125e:	10 92 a7 03 	sts	0x03A7, r1	; 0x8003a7 <g_mod0_response_buffer_length>
    1262:	41 30       	cpi	r20, 0x01	; 1
    1264:	09 f5       	brne	.+66     	; 0x12a8 <Modbus_init+0x84>
    1266:	20 91 7e 02 	lds	r18, 0x027E	; 0x80027e <UART1_used.1994>
    126a:	21 11       	cpse	r18, r1
    126c:	c8 c0       	rjmp	.+400    	; 0x13fe <Modbus_init+0x1da>
    126e:	21 e0       	ldi	r18, 0x01	; 1
    1270:	20 93 7e 02 	sts	0x027E, r18	; 0x80027e <UART1_used.1994>
    1274:	91 d3       	rcall	.+1826   	; 0x1998 <UART1_init>
    1276:	8a e5       	ldi	r24, 0x5A	; 90
    1278:	9d e0       	ldi	r25, 0x0D	; 13
    127a:	90 93 9a 03 	sts	0x039A, r25	; 0x80039a <g_mod0_Serial_available+0x1>
    127e:	80 93 99 03 	sts	0x0399, r24	; 0x800399 <g_mod0_Serial_available>
    1282:	88 e6       	ldi	r24, 0x68	; 104
    1284:	9d e0       	ldi	r25, 0x0D	; 13
    1286:	90 93 9c 03 	sts	0x039C, r25	; 0x80039c <g_mod0_Serial_flush+0x1>
    128a:	80 93 9b 03 	sts	0x039B, r24	; 0x80039b <g_mod0_Serial_flush>
    128e:	81 e2       	ldi	r24, 0x21	; 33
    1290:	9d e0       	ldi	r25, 0x0D	; 13
    1292:	90 93 9e 03 	sts	0x039E, r25	; 0x80039e <g_mod0_Serial_getc+0x1>
    1296:	80 93 9d 03 	sts	0x039D, r24	; 0x80039d <g_mod0_Serial_getc>
    129a:	81 e4       	ldi	r24, 0x41	; 65
    129c:	9d e0       	ldi	r25, 0x0D	; 13
    129e:	90 93 a0 03 	sts	0x03A0, r25	; 0x8003a0 <g_mod0_Serial_putc+0x1>
    12a2:	80 93 9f 03 	sts	0x039F, r24	; 0x80039f <g_mod0_Serial_putc>
    12a6:	08 95       	ret
    12a8:	42 30       	cpi	r20, 0x02	; 2
    12aa:	09 f5       	brne	.+66     	; 0x12ee <Modbus_init+0xca>
    12ac:	20 91 7d 02 	lds	r18, 0x027D	; 0x80027d <UART2_used.1995>
    12b0:	21 11       	cpse	r18, r1
    12b2:	a5 c0       	rjmp	.+330    	; 0x13fe <Modbus_init+0x1da>
    12b4:	21 e0       	ldi	r18, 0x01	; 1
    12b6:	20 93 7d 02 	sts	0x027D, r18	; 0x80027d <UART2_used.1995>
    12ba:	7d d4       	rcall	.+2298   	; 0x1bb6 <UART2_init>
    12bc:	86 e6       	ldi	r24, 0x66	; 102
    12be:	9e e0       	ldi	r25, 0x0E	; 14
    12c0:	90 93 9a 03 	sts	0x039A, r25	; 0x80039a <g_mod0_Serial_available+0x1>
    12c4:	80 93 99 03 	sts	0x0399, r24	; 0x800399 <g_mod0_Serial_available>
    12c8:	84 e7       	ldi	r24, 0x74	; 116
    12ca:	9e e0       	ldi	r25, 0x0E	; 14
    12cc:	90 93 9c 03 	sts	0x039C, r25	; 0x80039c <g_mod0_Serial_flush+0x1>
    12d0:	80 93 9b 03 	sts	0x039B, r24	; 0x80039b <g_mod0_Serial_flush>
    12d4:	80 e3       	ldi	r24, 0x30	; 48
    12d6:	9e e0       	ldi	r25, 0x0E	; 14
    12d8:	90 93 9e 03 	sts	0x039E, r25	; 0x80039e <g_mod0_Serial_getc+0x1>
    12dc:	80 93 9d 03 	sts	0x039D, r24	; 0x80039d <g_mod0_Serial_getc>
    12e0:	8d e4       	ldi	r24, 0x4D	; 77
    12e2:	9e e0       	ldi	r25, 0x0E	; 14
    12e4:	90 93 a0 03 	sts	0x03A0, r25	; 0x8003a0 <g_mod0_Serial_putc+0x1>
    12e8:	80 93 9f 03 	sts	0x039F, r24	; 0x80039f <g_mod0_Serial_putc>
    12ec:	08 95       	ret
    12ee:	43 30       	cpi	r20, 0x03	; 3
    12f0:	09 f0       	breq	.+2      	; 0x12f4 <Modbus_init+0xd0>
    12f2:	85 c0       	rjmp	.+266    	; 0x13fe <Modbus_init+0x1da>
    12f4:	20 91 7c 02 	lds	r18, 0x027C	; 0x80027c <UART3_used.1996>
    12f8:	21 11       	cpse	r18, r1
    12fa:	81 c0       	rjmp	.+258    	; 0x13fe <Modbus_init+0x1da>
    12fc:	21 e0       	ldi	r18, 0x01	; 1
    12fe:	20 93 7c 02 	sts	0x027C, r18	; 0x80027c <UART3_used.1996>
    1302:	65 d5       	rcall	.+2762   	; 0x1dce <UART3_init>
    1304:	82 e7       	ldi	r24, 0x72	; 114
    1306:	9f e0       	ldi	r25, 0x0F	; 15
    1308:	90 93 9a 03 	sts	0x039A, r25	; 0x80039a <g_mod0_Serial_available+0x1>
    130c:	80 93 99 03 	sts	0x0399, r24	; 0x800399 <g_mod0_Serial_available>
    1310:	80 e8       	ldi	r24, 0x80	; 128
    1312:	9f e0       	ldi	r25, 0x0F	; 15
    1314:	90 93 9c 03 	sts	0x039C, r25	; 0x80039c <g_mod0_Serial_flush+0x1>
    1318:	80 93 9b 03 	sts	0x039B, r24	; 0x80039b <g_mod0_Serial_flush>
    131c:	8c e3       	ldi	r24, 0x3C	; 60
    131e:	9f e0       	ldi	r25, 0x0F	; 15
    1320:	90 93 9e 03 	sts	0x039E, r25	; 0x80039e <g_mod0_Serial_getc+0x1>
    1324:	80 93 9d 03 	sts	0x039D, r24	; 0x80039d <g_mod0_Serial_getc>
    1328:	89 e5       	ldi	r24, 0x59	; 89
    132a:	9f e0       	ldi	r25, 0x0F	; 15
    132c:	90 93 a0 03 	sts	0x03A0, r25	; 0x8003a0 <g_mod0_Serial_putc+0x1>
    1330:	80 93 9f 03 	sts	0x039F, r24	; 0x80039f <g_mod0_Serial_putc>
    1334:	08 95       	ret
    1336:	81 30       	cpi	r24, 0x01	; 1
    1338:	09 f0       	breq	.+2      	; 0x133c <Modbus_init+0x118>
    133a:	61 c0       	rjmp	.+194    	; 0x13fe <Modbus_init+0x1da>
    133c:	80 81       	ld	r24, Z
    133e:	80 93 98 03 	sts	0x0398, r24	; 0x800398 <g_mod1_slave>
    1342:	41 81       	ldd	r20, Z+1	; 0x01
    1344:	62 81       	ldd	r22, Z+2	; 0x02
    1346:	73 81       	ldd	r23, Z+3	; 0x03
    1348:	84 81       	ldd	r24, Z+4	; 0x04
    134a:	95 81       	ldd	r25, Z+5	; 0x05
    134c:	26 81       	ldd	r18, Z+6	; 0x06
    134e:	37 81       	ldd	r19, Z+7	; 0x07
    1350:	30 93 8a 02 	sts	0x028A, r19	; 0x80028a <g_mod1_pre_transmission+0x1>
    1354:	20 93 89 02 	sts	0x0289, r18	; 0x800289 <g_mod1_pre_transmission>
    1358:	20 85       	ldd	r18, Z+8	; 0x08
    135a:	31 85       	ldd	r19, Z+9	; 0x09
    135c:	30 93 88 02 	sts	0x0288, r19	; 0x800288 <g_mod1_post_transmission+0x1>
    1360:	20 93 87 02 	sts	0x0287, r18	; 0x800287 <g_mod1_post_transmission>
    1364:	10 92 8c 02 	sts	0x028C, r1	; 0x80028c <g_mod1_idle+0x1>
    1368:	10 92 8b 02 	sts	0x028B, r1	; 0x80028b <g_mod1_idle>
    136c:	10 92 8e 02 	sts	0x028E, r1	; 0x80028e <g_mod1_response_buffer_index>
    1370:	10 92 8d 02 	sts	0x028D, r1	; 0x80028d <g_mod1_response_buffer_length>
    1374:	41 30       	cpi	r20, 0x01	; 1
    1376:	09 f5       	brne	.+66     	; 0x13ba <Modbus_init+0x196>
    1378:	20 91 7e 02 	lds	r18, 0x027E	; 0x80027e <UART1_used.1994>
    137c:	21 11       	cpse	r18, r1
    137e:	3f c0       	rjmp	.+126    	; 0x13fe <Modbus_init+0x1da>
    1380:	21 e0       	ldi	r18, 0x01	; 1
    1382:	20 93 7e 02 	sts	0x027E, r18	; 0x80027e <UART1_used.1994>
    1386:	08 d3       	rcall	.+1552   	; 0x1998 <UART1_init>
    1388:	8a e5       	ldi	r24, 0x5A	; 90
    138a:	9d e0       	ldi	r25, 0x0D	; 13
    138c:	90 93 82 02 	sts	0x0282, r25	; 0x800282 <g_mod1_Serial_available+0x1>
    1390:	80 93 81 02 	sts	0x0281, r24	; 0x800281 <g_mod1_Serial_available>
    1394:	88 e6       	ldi	r24, 0x68	; 104
    1396:	9d e0       	ldi	r25, 0x0D	; 13
    1398:	90 93 80 02 	sts	0x0280, r25	; 0x800280 <g_mod1_Serial_flush+0x1>
    139c:	80 93 7f 02 	sts	0x027F, r24	; 0x80027f <g_mod1_Serial_flush>
    13a0:	81 e2       	ldi	r24, 0x21	; 33
    13a2:	9d e0       	ldi	r25, 0x0D	; 13
    13a4:	90 93 84 02 	sts	0x0284, r25	; 0x800284 <g_mod1_Serial_getc+0x1>
    13a8:	80 93 83 02 	sts	0x0283, r24	; 0x800283 <g_mod1_Serial_getc>
    13ac:	81 e4       	ldi	r24, 0x41	; 65
    13ae:	9d e0       	ldi	r25, 0x0D	; 13
    13b0:	90 93 86 02 	sts	0x0286, r25	; 0x800286 <g_mod1_Serial_putc+0x1>
    13b4:	80 93 85 02 	sts	0x0285, r24	; 0x800285 <g_mod1_Serial_putc>
    13b8:	08 95       	ret
    13ba:	42 30       	cpi	r20, 0x02	; 2
    13bc:	01 f5       	brne	.+64     	; 0x13fe <Modbus_init+0x1da>
    13be:	20 91 7d 02 	lds	r18, 0x027D	; 0x80027d <UART2_used.1995>
    13c2:	21 11       	cpse	r18, r1
    13c4:	1c c0       	rjmp	.+56     	; 0x13fe <Modbus_init+0x1da>
    13c6:	21 e0       	ldi	r18, 0x01	; 1
    13c8:	20 93 7d 02 	sts	0x027D, r18	; 0x80027d <UART2_used.1995>
    13cc:	f4 d3       	rcall	.+2024   	; 0x1bb6 <UART2_init>
    13ce:	86 e6       	ldi	r24, 0x66	; 102
    13d0:	9e e0       	ldi	r25, 0x0E	; 14
    13d2:	90 93 82 02 	sts	0x0282, r25	; 0x800282 <g_mod1_Serial_available+0x1>
    13d6:	80 93 81 02 	sts	0x0281, r24	; 0x800281 <g_mod1_Serial_available>
    13da:	84 e7       	ldi	r24, 0x74	; 116
    13dc:	9e e0       	ldi	r25, 0x0E	; 14
    13de:	90 93 80 02 	sts	0x0280, r25	; 0x800280 <g_mod1_Serial_flush+0x1>
    13e2:	80 93 7f 02 	sts	0x027F, r24	; 0x80027f <g_mod1_Serial_flush>
    13e6:	80 e3       	ldi	r24, 0x30	; 48
    13e8:	9e e0       	ldi	r25, 0x0E	; 14
    13ea:	90 93 84 02 	sts	0x0284, r25	; 0x800284 <g_mod1_Serial_getc+0x1>
    13ee:	80 93 83 02 	sts	0x0283, r24	; 0x800283 <g_mod1_Serial_getc>
    13f2:	8d e4       	ldi	r24, 0x4D	; 77
    13f4:	9e e0       	ldi	r25, 0x0E	; 14
    13f6:	90 93 86 02 	sts	0x0286, r25	; 0x800286 <g_mod1_Serial_putc+0x1>
    13fa:	80 93 85 02 	sts	0x0285, r24	; 0x800285 <g_mod1_Serial_putc>
    13fe:	08 95       	ret

00001400 <Modbus_Get_response_buffer>:
    1400:	81 11       	cpse	r24, r1
    1402:	0b c0       	rjmp	.+22     	; 0x141a <Modbus_Get_response_buffer+0x1a>
    1404:	60 34       	cpi	r22, 0x40	; 64
    1406:	b0 f4       	brcc	.+44     	; 0x1434 <Modbus_Get_response_buffer+0x34>
    1408:	e6 2f       	mov	r30, r22
    140a:	f0 e0       	ldi	r31, 0x00	; 0
    140c:	ee 0f       	add	r30, r30
    140e:	ff 1f       	adc	r31, r31
    1410:	e2 5d       	subi	r30, 0xD2	; 210
    1412:	fb 4f       	sbci	r31, 0xFB	; 251
    1414:	80 81       	ld	r24, Z
    1416:	91 81       	ldd	r25, Z+1	; 0x01
    1418:	08 95       	ret
    141a:	81 30       	cpi	r24, 0x01	; 1
    141c:	71 f4       	brne	.+28     	; 0x143a <Modbus_Get_response_buffer+0x3a>
    141e:	60 34       	cpi	r22, 0x40	; 64
    1420:	78 f4       	brcc	.+30     	; 0x1440 <Modbus_Get_response_buffer+0x40>
    1422:	e6 2f       	mov	r30, r22
    1424:	f0 e0       	ldi	r31, 0x00	; 0
    1426:	ee 0f       	add	r30, r30
    1428:	ff 1f       	adc	r31, r31
    142a:	ec 5e       	subi	r30, 0xEC	; 236
    142c:	fc 4f       	sbci	r31, 0xFC	; 252
    142e:	80 81       	ld	r24, Z
    1430:	91 81       	ldd	r25, Z+1	; 0x01
    1432:	08 95       	ret
    1434:	8f ef       	ldi	r24, 0xFF	; 255
    1436:	9f ef       	ldi	r25, 0xFF	; 255
    1438:	08 95       	ret
    143a:	8f ef       	ldi	r24, 0xFF	; 255
    143c:	9f ef       	ldi	r25, 0xFF	; 255
    143e:	08 95       	ret
    1440:	8f ef       	ldi	r24, 0xFF	; 255
    1442:	9f ef       	ldi	r25, 0xFF	; 255
    1444:	08 95       	ret

00001446 <Modbus_Set_transmit_buffer>:
    1446:	81 11       	cpse	r24, r1
    1448:	0b c0       	rjmp	.+22     	; 0x1460 <Modbus_Set_transmit_buffer+0x1a>
    144a:	60 34       	cpi	r22, 0x40	; 64
    144c:	b8 f4       	brcc	.+46     	; 0x147c <Modbus_Set_transmit_buffer+0x36>
    144e:	e6 2f       	mov	r30, r22
    1450:	f0 e0       	ldi	r31, 0x00	; 0
    1452:	ee 0f       	add	r30, r30
    1454:	ff 1f       	adc	r31, r31
    1456:	e6 55       	subi	r30, 0x56	; 86
    1458:	fc 4f       	sbci	r31, 0xFC	; 252
    145a:	51 83       	std	Z+1, r21	; 0x01
    145c:	40 83       	st	Z, r20
    145e:	08 95       	ret
    1460:	81 30       	cpi	r24, 0x01	; 1
    1462:	71 f4       	brne	.+28     	; 0x1480 <Modbus_Set_transmit_buffer+0x3a>
    1464:	60 34       	cpi	r22, 0x40	; 64
    1466:	70 f4       	brcc	.+28     	; 0x1484 <Modbus_Set_transmit_buffer+0x3e>
    1468:	e6 2f       	mov	r30, r22
    146a:	f0 e0       	ldi	r31, 0x00	; 0
    146c:	ee 0f       	add	r30, r30
    146e:	ff 1f       	adc	r31, r31
    1470:	e0 57       	subi	r30, 0x70	; 112
    1472:	fd 4f       	sbci	r31, 0xFD	; 253
    1474:	51 83       	std	Z+1, r21	; 0x01
    1476:	40 83       	st	Z, r20
    1478:	80 e0       	ldi	r24, 0x00	; 0
    147a:	08 95       	ret
    147c:	82 e0       	ldi	r24, 0x02	; 2
    147e:	08 95       	ret
    1480:	82 e0       	ldi	r24, 0x02	; 2
    1482:	08 95       	ret
    1484:	82 e0       	ldi	r24, 0x02	; 2
    1486:	08 95       	ret

00001488 <Modbus_Read_holding_registers>:
    1488:	81 11       	cpse	r24, r1
    148a:	0b c0       	rjmp	.+22     	; 0x14a2 <Modbus_Read_holding_registers+0x1a>
    148c:	70 93 b1 04 	sts	0x04B1, r23	; 0x8004b1 <g_mod0_read_address+0x1>
    1490:	60 93 b0 04 	sts	0x04B0, r22	; 0x8004b0 <g_mod0_read_address>
    1494:	50 93 af 04 	sts	0x04AF, r21	; 0x8004af <g_mod0_read_qty+0x1>
    1498:	40 93 ae 04 	sts	0x04AE, r20	; 0x8004ae <g_mod0_read_qty>
    149c:	63 e0       	ldi	r22, 0x03	; 3
    149e:	41 c8       	rjmp	.-3966   	; 0x522 <Modbus_mster_transaction>
    14a0:	08 95       	ret
    14a2:	81 30       	cpi	r24, 0x01	; 1
    14a4:	59 f4       	brne	.+22     	; 0x14bc <Modbus_Read_holding_registers+0x34>
    14a6:	70 93 97 03 	sts	0x0397, r23	; 0x800397 <g_mod1_read_address+0x1>
    14aa:	60 93 96 03 	sts	0x0396, r22	; 0x800396 <g_mod1_read_address>
    14ae:	50 93 95 03 	sts	0x0395, r21	; 0x800395 <g_mod1_read_qty+0x1>
    14b2:	40 93 94 03 	sts	0x0394, r20	; 0x800394 <g_mod1_read_qty>
    14b6:	63 e0       	ldi	r22, 0x03	; 3
    14b8:	34 c8       	rjmp	.-3992   	; 0x522 <Modbus_mster_transaction>
    14ba:	08 95       	ret
    14bc:	84 ee       	ldi	r24, 0xE4	; 228
    14be:	08 95       	ret

000014c0 <Modbus_Write_multiple_registers>:
    14c0:	81 11       	cpse	r24, r1
    14c2:	0b c0       	rjmp	.+22     	; 0x14da <Modbus_Write_multiple_registers+0x1a>
    14c4:	70 93 2d 04 	sts	0x042D, r23	; 0x80042d <g_mod0_write_address+0x1>
    14c8:	60 93 2c 04 	sts	0x042C, r22	; 0x80042c <g_mod0_write_address>
    14cc:	50 93 2b 04 	sts	0x042B, r21	; 0x80042b <g_mod0_write_qty+0x1>
    14d0:	40 93 2a 04 	sts	0x042A, r20	; 0x80042a <g_mod0_write_qty>
    14d4:	60 e1       	ldi	r22, 0x10	; 16
    14d6:	25 c8       	rjmp	.-4022   	; 0x522 <Modbus_mster_transaction>
    14d8:	08 95       	ret
    14da:	81 30       	cpi	r24, 0x01	; 1
    14dc:	59 f4       	brne	.+22     	; 0x14f4 <Modbus_Write_multiple_registers+0x34>
    14de:	70 93 13 03 	sts	0x0313, r23	; 0x800313 <g_mod1_write_address+0x1>
    14e2:	60 93 12 03 	sts	0x0312, r22	; 0x800312 <g_mod1_write_address>
    14e6:	50 93 11 03 	sts	0x0311, r21	; 0x800311 <g_mod1_write_qty+0x1>
    14ea:	40 93 10 03 	sts	0x0310, r20	; 0x800310 <g_mod1_write_qty>
    14ee:	60 e1       	ldi	r22, 0x10	; 16
    14f0:	18 c8       	rjmp	.-4048   	; 0x522 <Modbus_mster_transaction>
    14f2:	08 95       	ret
    14f4:	84 ee       	ldi	r24, 0xE4	; 228
    14f6:	08 95       	ret

000014f8 <LCD_readTimeout>:


TaskHandle_t xHandle1 = NULL , xHandle2 = NULL;

/******* LCD callback functions for errors ***********************************************/
static void LCD_readTimeout(void){
    14f8:	08 95       	ret

000014fa <LCD_writeTimeout>:
	
}

static void LCD_writeTimeout(void){
    14fa:	08 95       	ret

000014fc <vTask2>:
}
static void vTask2(void* pvParameters)
{
	uint8_t x=0;
	uint16_t RTE_data=0;
	UART0_puts("Enter Task2");
    14fc:	83 e1       	ldi	r24, 0x13	; 19
    14fe:	92 e0       	ldi	r25, 0x02	; 2
    1500:	cf d1       	rcall	.+926    	; 0x18a0 <UART0_puts>
// 		UART0_putc('\n');
// 	}
}
static void vTask2(void* pvParameters)
{
	uint8_t x=0;
    1502:	c0 e0       	ldi	r28, 0x00	; 0
	uint16_t RTE_data=0;
	UART0_puts("Enter Task2");
	while(1){
		UART0_puts("Task2 set current temp with =");
    1504:	8f e1       	ldi	r24, 0x1F	; 31
    1506:	92 e0       	ldi	r25, 0x02	; 2
    1508:	cb d1       	rcall	.+918    	; 0x18a0 <UART0_puts>
		UART0_OutUDec(x);
    150a:	6c 2f       	mov	r22, r28
    150c:	70 e0       	ldi	r23, 0x00	; 0
    150e:	80 e0       	ldi	r24, 0x00	; 0
    1510:	90 e0       	ldi	r25, 0x00	; 0
		UART0_putc('\n');
    1512:	aa d1       	rcall	.+852    	; 0x1868 <UART0_OutUDec>
    1514:	8a e0       	ldi	r24, 0x0A	; 10
		RTE_set_Current_temperature(++x);
    1516:	8f d1       	rcall	.+798    	; 0x1836 <UART0_putc>
    1518:	cf 5f       	subi	r28, 0xFF	; 255
    151a:	8c 2f       	mov	r24, r28
		UART0_puts("Task2 Requires ");
    151c:	90 e0       	ldi	r25, 0x00	; 0
    151e:	de d6       	rcall	.+3516   	; 0x22dc <RTE_set_Current_temperature>
    1520:	8d e3       	ldi	r24, 0x3D	; 61
		RTE_data = RTE_get_RPM_max();
    1522:	92 e0       	ldi	r25, 0x02	; 2
    1524:	bd d1       	rcall	.+890    	; 0x18a0 <UART0_puts>
		UART0_puts("Task2 RTE_data = ");
    1526:	5b d5       	rcall	.+2742   	; 0x1fde <RTE_get_RPM_max>
    1528:	8c 01       	movw	r16, r24
    152a:	8d e4       	ldi	r24, 0x4D	; 77
		UART0_OutUDec(RTE_data);
    152c:	92 e0       	ldi	r25, 0x02	; 2
    152e:	b8 d1       	rcall	.+880    	; 0x18a0 <UART0_puts>
    1530:	b8 01       	movw	r22, r16
    1532:	80 e0       	ldi	r24, 0x00	; 0
    1534:	90 e0       	ldi	r25, 0x00	; 0
		UART0_putc('\n');
    1536:	98 d1       	rcall	.+816    	; 0x1868 <UART0_OutUDec>
    1538:	8a e0       	ldi	r24, 0x0A	; 10
    153a:	7d d1       	rcall	.+762    	; 0x1836 <UART0_putc>
    153c:	e3 cf       	rjmp	.-58     	; 0x1504 <vTask2+0x8>

0000153e <vTask1>:
}



static void vTask1(void* pvParameters)
{
    153e:	cf 93       	push	r28
    1540:	df 93       	push	r29
    1542:	1f 92       	push	r1
    1544:	cd b7       	in	r28, 0x3d	; 61
    1546:	de b7       	in	r29, 0x3e	; 62
	char x=0;
    1548:	19 82       	std	Y+1, r1	; 0x01
	LCD_main(&x);
    154a:	ce 01       	movw	r24, r28
    154c:	01 96       	adiw	r24, 0x01	; 1
    154e:	0e 94 67 1e 	call	0x3cce	; 0x3cce <LCD_main>
// 		xSemaphoreTake(Sema_Test_handle,portMAX_DELAY);
// 		UART0_puts("Vtask1 Released data= ");
// 		UART0_OutUDec(Test);
// 		UART0_putc('\n');
// 	}
}
    1552:	0f 90       	pop	r0
    1554:	df 91       	pop	r29
    1556:	cf 91       	pop	r28
    1558:	08 95       	ret

0000155a <main>:
	
}


int main(void) {
	DDRE = 0xFF;
    155a:	8f ef       	ldi	r24, 0xFF	; 255
    155c:	8d b9       	out	0x0d, r24	; 13
	UART0_init(9600); //for debug
    155e:	60 e8       	ldi	r22, 0x80	; 128
    1560:	75 e2       	ldi	r23, 0x25	; 37
    1562:	80 e0       	ldi	r24, 0x00	; 0
    1564:	90 e0       	ldi	r25, 0x00	; 0
    1566:	12 d1       	rcall	.+548    	; 0x178c <UART0_init>
    System_init();
    1568:	0e 94 e9 1e 	call	0x3dd2	; 0x3dd2 <System_init>
		
	LCD_main_Init(LCD_readTimeout,LCD_writeTimeout);
    156c:	6d e7       	ldi	r22, 0x7D	; 125
    156e:	7a e0       	ldi	r23, 0x0A	; 10
    1570:	8c e7       	ldi	r24, 0x7C	; 124
    1572:	9a e0       	ldi	r25, 0x0A	; 10
    1574:	0e 94 5e 1e 	call	0x3cbc	; 0x3cbc <LCD_main_Init>
	/* Create the task without using any dynamic memory allocation. */
	xHandle1 = xTaskCreateStatic(
    1578:	0f 2e       	mov	r0, r31
    157a:	f9 e5       	ldi	r31, 0x59	; 89
    157c:	cf 2e       	mov	r12, r31
    157e:	fd e0       	ldi	r31, 0x0D	; 13
    1580:	df 2e       	mov	r13, r31
    1582:	f0 2d       	mov	r31, r0
    1584:	0f 2e       	mov	r0, r31
    1586:	f4 eb       	ldi	r31, 0xB4	; 180
    1588:	ef 2e       	mov	r14, r31
    158a:	fd e0       	ldi	r31, 0x0D	; 13
    158c:	ff 2e       	mov	r15, r31
    158e:	f0 2d       	mov	r31, r0
    1590:	02 e0       	ldi	r16, 0x02	; 2
    1592:	20 e0       	ldi	r18, 0x00	; 0
    1594:	30 e0       	ldi	r19, 0x00	; 0
    1596:	48 ec       	ldi	r20, 0xC8	; 200
    1598:	50 e0       	ldi	r21, 0x00	; 0
    159a:	6f e5       	ldi	r22, 0x5F	; 95
    159c:	72 e0       	ldi	r23, 0x02	; 2
    159e:	8f e9       	ldi	r24, 0x9F	; 159
    15a0:	9a e0       	ldi	r25, 0x0A	; 10
    15a2:	0e 94 4f 17 	call	0x2e9e	; 0x2e9e <xTaskCreateStatic>
    15a6:	90 93 b6 04 	sts	0x04B6, r25	; 0x8004b6 <xHandle1+0x1>
    15aa:	80 93 b5 04 	sts	0x04B5, r24	; 0x8004b5 <xHandle1>
					NULL, /* Parameter passed into the task. */
					2,/* Priority at which the task is created. */
					xStack1, /* Array to use as the task's stack. */
					&xTask1Buffer); /* Variable to hold the task's data structure. */
	
	xHandle2 = xTaskCreateStatic(
    15ae:	0f 2e       	mov	r0, r31
    15b0:	f1 e8       	ldi	r31, 0x81	; 129
    15b2:	cf 2e       	mov	r12, r31
    15b4:	fd e0       	ldi	r31, 0x0D	; 13
    15b6:	df 2e       	mov	r13, r31
    15b8:	f0 2d       	mov	r31, r0
    15ba:	0f 2e       	mov	r0, r31
    15bc:	fc e7       	ldi	r31, 0x7C	; 124
    15be:	ef 2e       	mov	r14, r31
    15c0:	fe e0       	ldi	r31, 0x0E	; 14
    15c2:	ff 2e       	mov	r15, r31
    15c4:	f0 2d       	mov	r31, r0
    15c6:	20 e0       	ldi	r18, 0x00	; 0
    15c8:	30 e0       	ldi	r19, 0x00	; 0
    15ca:	48 ec       	ldi	r20, 0xC8	; 200
    15cc:	50 e0       	ldi	r21, 0x00	; 0
    15ce:	69 e1       	ldi	r22, 0x19	; 25
    15d0:	72 e0       	ldi	r23, 0x02	; 2
    15d2:	8e e7       	ldi	r24, 0x7E	; 126
    15d4:	9a e0       	ldi	r25, 0x0A	; 10
    15d6:	0e 94 4f 17 	call	0x2e9e	; 0x2e9e <xTaskCreateStatic>
    15da:	90 93 b4 04 	sts	0x04B4, r25	; 0x8004b4 <xHandle2+0x1>
    15de:	80 93 b3 04 	sts	0x04B3, r24	; 0x8004b3 <xHandle2>
// 		
// 	}
// 	

	  // Start scheduler.
	  vTaskStartScheduler();
    15e2:	0e 94 46 18 	call	0x308c	; 0x308c <vTaskStartScheduler>
    15e6:	ff cf       	rjmp	.-2      	; 0x15e6 <main+0x8c>

000015e8 <__vector_29>:
	return returned_data ;
}


ISR(ADC_vect)
{
    15e8:	1f 92       	push	r1
    15ea:	0f 92       	push	r0
    15ec:	0f b6       	in	r0, 0x3f	; 63
    15ee:	0f 92       	push	r0
    15f0:	11 24       	eor	r1, r1
    15f2:	2f 93       	push	r18
    15f4:	8f 93       	push	r24
    15f6:	9f 93       	push	r25
	   uint8_t The_low_adc_reg = ADC_DATA_REG_LOW ;
    15f8:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
	  // get 10 bits out of the high and low register .
	  g_analog_data =  The_low_adc_reg | (ADC_DATA_REG_HIGH <<8);
    15fc:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
    1600:	90 e0       	ldi	r25, 0x00	; 0
    1602:	92 2b       	or	r25, r18
    1604:	90 93 b9 04 	sts	0x04B9, r25	; 0x8004b9 <g_analog_data+0x1>
    1608:	80 93 b8 04 	sts	0x04B8, r24	; 0x8004b8 <g_analog_data>
	  g_converted = 1 ;
    160c:	81 e0       	ldi	r24, 0x01	; 1
    160e:	80 93 b7 04 	sts	0x04B7, r24	; 0x8004b7 <g_converted>
}
    1612:	9f 91       	pop	r25
    1614:	8f 91       	pop	r24
    1616:	2f 91       	pop	r18
    1618:	0f 90       	pop	r0
    161a:	0f be       	out	0x3f, r0	; 63
    161c:	0f 90       	pop	r0
    161e:	1f 90       	pop	r1
    1620:	18 95       	reti

00001622 <DIO_init>:
    1622:	50 98       	cbi	0x0a, 0	; 10
    1624:	51 98       	cbi	0x0a, 1	; 10
    1626:	51 98       	cbi	0x0a, 1	; 10
    1628:	53 98       	cbi	0x0a, 3	; 10
    162a:	20 98       	cbi	0x04, 0	; 4
    162c:	55 98       	cbi	0x0a, 5	; 10
    162e:	54 98       	cbi	0x0a, 4	; 10
    1630:	3c 9a       	sbi	0x07, 4	; 7
    1632:	3f 9a       	sbi	0x07, 7	; 7
    1634:	3d 9a       	sbi	0x07, 5	; 7
    1636:	39 9a       	sbi	0x07, 1	; 7
    1638:	39 9a       	sbi	0x07, 1	; 7
    163a:	57 9a       	sbi	0x0a, 7	; 10
    163c:	38 9a       	sbi	0x07, 0	; 7
    163e:	38 98       	cbi	0x07, 0	; 7
    1640:	56 9a       	sbi	0x0a, 6	; 10
    1642:	3b 9a       	sbi	0x07, 3	; 7
    1644:	e4 e0       	ldi	r30, 0x04	; 4
    1646:	f1 e0       	ldi	r31, 0x01	; 1
    1648:	80 81       	ld	r24, Z
    164a:	84 60       	ori	r24, 0x04	; 4
    164c:	80 83       	st	Z, r24
    164e:	3f 9a       	sbi	0x07, 7	; 7
    1650:	3f 9a       	sbi	0x07, 7	; 7
    1652:	3f 9a       	sbi	0x07, 7	; 7
    1654:	e1 e0       	ldi	r30, 0x01	; 1
    1656:	f1 e0       	ldi	r31, 0x01	; 1
    1658:	80 81       	ld	r24, Z
    165a:	8e 7f       	andi	r24, 0xFE	; 254
    165c:	80 83       	st	Z, r24
    165e:	80 81       	ld	r24, Z
    1660:	82 60       	ori	r24, 0x02	; 2
    1662:	80 83       	st	Z, r24
    1664:	e2 e0       	ldi	r30, 0x02	; 2
    1666:	f1 e0       	ldi	r31, 0x01	; 1
    1668:	80 81       	ld	r24, Z
    166a:	81 60       	ori	r24, 0x01	; 1
    166c:	80 83       	st	Z, r24
    166e:	52 98       	cbi	0x0a, 2	; 10
    1670:	53 9a       	sbi	0x0a, 3	; 10
    1672:	5a 9a       	sbi	0x0b, 2	; 11
    1674:	08 95       	ret

00001676 <Modbus_change_state>:
    1676:	88 23       	and	r24, r24
    1678:	19 f0       	breq	.+6      	; 0x1680 <Modbus_change_state+0xa>
    167a:	81 30       	cpi	r24, 0x01	; 1
    167c:	89 f0       	breq	.+34     	; 0x16a0 <Modbus_change_state+0x2a>
    167e:	08 95       	ret
    1680:	61 30       	cpi	r22, 0x01	; 1
    1682:	31 f4       	brne	.+12     	; 0x1690 <Modbus_change_state+0x1a>
    1684:	e5 e0       	ldi	r30, 0x05	; 5
    1686:	f1 e0       	ldi	r31, 0x01	; 1
    1688:	80 81       	ld	r24, Z
    168a:	84 60       	ori	r24, 0x04	; 4
    168c:	80 83       	st	Z, r24
    168e:	08 95       	ret
    1690:	61 11       	cpse	r22, r1
    1692:	0d c0       	rjmp	.+26     	; 0x16ae <Modbus_change_state+0x38>
    1694:	e5 e0       	ldi	r30, 0x05	; 5
    1696:	f1 e0       	ldi	r31, 0x01	; 1
    1698:	80 81       	ld	r24, Z
    169a:	8b 7f       	andi	r24, 0xFB	; 251
    169c:	80 83       	st	Z, r24
    169e:	08 95       	ret
    16a0:	61 30       	cpi	r22, 0x01	; 1
    16a2:	11 f4       	brne	.+4      	; 0x16a8 <Modbus_change_state+0x32>
    16a4:	47 9a       	sbi	0x08, 7	; 8
    16a6:	08 95       	ret
    16a8:	61 11       	cpse	r22, r1
    16aa:	01 c0       	rjmp	.+2      	; 0x16ae <Modbus_change_state+0x38>
    16ac:	47 98       	cbi	0x08, 7	; 8
    16ae:	08 95       	ret

000016b0 <__vector_25>:

	while ((c = pgm_read_byte(progmem_s++))) {
		UART3_putc(c);
	}

} /* UART3_puts_p */
    16b0:	1f 92       	push	r1
    16b2:	0f 92       	push	r0
    16b4:	0f b6       	in	r0, 0x3f	; 63
    16b6:	0f 92       	push	r0
    16b8:	11 24       	eor	r1, r1
    16ba:	0b b6       	in	r0, 0x3b	; 59
    16bc:	0f 92       	push	r0
    16be:	2f 93       	push	r18
    16c0:	3f 93       	push	r19
    16c2:	4f 93       	push	r20
    16c4:	5f 93       	push	r21
    16c6:	8f 93       	push	r24
    16c8:	9f 93       	push	r25
    16ca:	ef 93       	push	r30
    16cc:	ff 93       	push	r31
    16ce:	20 91 c0 00 	lds	r18, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
    16d2:	30 91 c6 00 	lds	r19, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    16d6:	28 71       	andi	r18, 0x18	; 24
    16d8:	80 91 cf 07 	lds	r24, 0x07CF	; 0x8007cf <UART_RxHead>
    16dc:	90 e0       	ldi	r25, 0x00	; 0
    16de:	01 96       	adiw	r24, 0x01	; 1
    16e0:	8f 77       	andi	r24, 0x7F	; 127
    16e2:	99 27       	eor	r25, r25
    16e4:	40 91 ce 07 	lds	r20, 0x07CE	; 0x8007ce <UART_RxTail>
    16e8:	50 e0       	ldi	r21, 0x00	; 0
    16ea:	84 17       	cp	r24, r20
    16ec:	95 07       	cpc	r25, r21
    16ee:	39 f0       	breq	.+14     	; 0x16fe <__vector_25+0x4e>
    16f0:	80 93 cf 07 	sts	0x07CF, r24	; 0x8007cf <UART_RxHead>
    16f4:	fc 01       	movw	r30, r24
    16f6:	ee 52       	subi	r30, 0x2E	; 46
    16f8:	f8 4f       	sbci	r31, 0xF8	; 248
    16fa:	30 83       	st	Z, r19
    16fc:	01 c0       	rjmp	.+2      	; 0x1700 <__vector_25+0x50>
    16fe:	22 e0       	ldi	r18, 0x02	; 2
    1700:	20 93 cd 07 	sts	0x07CD, r18	; 0x8007cd <UART_LastRxError>
    1704:	ff 91       	pop	r31
    1706:	ef 91       	pop	r30
    1708:	9f 91       	pop	r25
    170a:	8f 91       	pop	r24
    170c:	5f 91       	pop	r21
    170e:	4f 91       	pop	r20
    1710:	3f 91       	pop	r19
    1712:	2f 91       	pop	r18
    1714:	0f 90       	pop	r0
    1716:	0b be       	out	0x3b, r0	; 59
    1718:	0f 90       	pop	r0
    171a:	0f be       	out	0x3f, r0	; 63
    171c:	0f 90       	pop	r0
    171e:	1f 90       	pop	r1
    1720:	18 95       	reti

00001722 <__vector_26>:
    1722:	1f 92       	push	r1
    1724:	0f 92       	push	r0
    1726:	0f b6       	in	r0, 0x3f	; 63
    1728:	0f 92       	push	r0
    172a:	11 24       	eor	r1, r1
    172c:	0b b6       	in	r0, 0x3b	; 59
    172e:	0f 92       	push	r0
    1730:	8f 93       	push	r24
    1732:	9f 93       	push	r25
    1734:	ef 93       	push	r30
    1736:	ff 93       	push	r31
    1738:	90 91 d1 07 	lds	r25, 0x07D1	; 0x8007d1 <UART_TxHead>
    173c:	80 91 d0 07 	lds	r24, 0x07D0	; 0x8007d0 <UART_TxTail>
    1740:	98 17       	cp	r25, r24
    1742:	89 f0       	breq	.+34     	; 0x1766 <__vector_26+0x44>
    1744:	80 91 d0 07 	lds	r24, 0x07D0	; 0x8007d0 <UART_TxTail>
    1748:	90 e0       	ldi	r25, 0x00	; 0
    174a:	01 96       	adiw	r24, 0x01	; 1
    174c:	8f 77       	andi	r24, 0x7F	; 127
    174e:	99 27       	eor	r25, r25
    1750:	80 93 d0 07 	sts	0x07D0, r24	; 0x8007d0 <UART_TxTail>
    1754:	fc 01       	movw	r30, r24
    1756:	ee 5a       	subi	r30, 0xAE	; 174
    1758:	f7 4f       	sbci	r31, 0xF7	; 247
    175a:	80 81       	ld	r24, Z
    175c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    1760:	10 92 bd 04 	sts	0x04BD, r1	; 0x8004bd <UART0_Transmission_end>
    1764:	08 c0       	rjmp	.+16     	; 0x1776 <__vector_26+0x54>
    1766:	e1 ec       	ldi	r30, 0xC1	; 193
    1768:	f0 e0       	ldi	r31, 0x00	; 0
    176a:	80 81       	ld	r24, Z
    176c:	8f 7d       	andi	r24, 0xDF	; 223
    176e:	80 83       	st	Z, r24
    1770:	81 e0       	ldi	r24, 0x01	; 1
    1772:	80 93 bd 04 	sts	0x04BD, r24	; 0x8004bd <UART0_Transmission_end>
    1776:	ff 91       	pop	r31
    1778:	ef 91       	pop	r30
    177a:	9f 91       	pop	r25
    177c:	8f 91       	pop	r24
    177e:	0f 90       	pop	r0
    1780:	0b be       	out	0x3b, r0	; 59
    1782:	0f 90       	pop	r0
    1784:	0f be       	out	0x3f, r0	; 63
    1786:	0f 90       	pop	r0
    1788:	1f 90       	pop	r1
    178a:	18 95       	reti

0000178c <UART0_init>:
    178c:	0f 93       	push	r16
    178e:	1f 93       	push	r17
    1790:	8b 01       	movw	r16, r22
    1792:	9c 01       	movw	r18, r24
    1794:	f8 94       	cli
    1796:	10 92 d1 07 	sts	0x07D1, r1	; 0x8007d1 <UART_TxHead>
    179a:	10 92 d0 07 	sts	0x07D0, r1	; 0x8007d0 <UART_TxTail>
    179e:	10 92 cf 07 	sts	0x07CF, r1	; 0x8007cf <UART_RxHead>
    17a2:	10 92 ce 07 	sts	0x07CE, r1	; 0x8007ce <UART_RxTail>
    17a6:	78 94       	sei
    17a8:	dc 01       	movw	r26, r24
    17aa:	cb 01       	movw	r24, r22
    17ac:	80 58       	subi	r24, 0x80	; 128
    17ae:	9b 47       	sbci	r25, 0x7B	; 123
    17b0:	a1 4e       	sbci	r26, 0xE1	; 225
    17b2:	bf 4f       	sbci	r27, 0xFF	; 255
    17b4:	88 0f       	add	r24, r24
    17b6:	99 1f       	adc	r25, r25
    17b8:	aa 1f       	adc	r26, r26
    17ba:	bb 1f       	adc	r27, r27
    17bc:	88 0f       	add	r24, r24
    17be:	99 1f       	adc	r25, r25
    17c0:	aa 1f       	adc	r26, r26
    17c2:	bb 1f       	adc	r27, r27
    17c4:	bc 01       	movw	r22, r24
    17c6:	cd 01       	movw	r24, r26
    17c8:	66 0f       	add	r22, r22
    17ca:	77 1f       	adc	r23, r23
    17cc:	88 1f       	adc	r24, r24
    17ce:	99 1f       	adc	r25, r25
    17d0:	00 0f       	add	r16, r16
    17d2:	11 1f       	adc	r17, r17
    17d4:	22 1f       	adc	r18, r18
    17d6:	33 1f       	adc	r19, r19
    17d8:	00 0f       	add	r16, r16
    17da:	11 1f       	adc	r17, r17
    17dc:	22 1f       	adc	r18, r18
    17de:	33 1f       	adc	r19, r19
    17e0:	a9 01       	movw	r20, r18
    17e2:	98 01       	movw	r18, r16
    17e4:	22 0f       	add	r18, r18
    17e6:	33 1f       	adc	r19, r19
    17e8:	44 1f       	adc	r20, r20
    17ea:	55 1f       	adc	r21, r21
    17ec:	22 0f       	add	r18, r18
    17ee:	33 1f       	adc	r19, r19
    17f0:	44 1f       	adc	r20, r20
    17f2:	55 1f       	adc	r21, r21
    17f4:	0e 94 49 1f 	call	0x3e92	; 0x3e92 <__udivmodsi4>
    17f8:	ba 01       	movw	r22, r20
    17fa:	a9 01       	movw	r20, r18
    17fc:	41 50       	subi	r20, 0x01	; 1
    17fe:	51 09       	sbc	r21, r1
    1800:	61 09       	sbc	r22, r1
    1802:	71 09       	sbc	r23, r1
    1804:	57 ff       	sbrs	r21, 7
    1806:	06 c0       	rjmp	.+12     	; 0x1814 <UART0_init+0x88>
    1808:	82 e0       	ldi	r24, 0x02	; 2
    180a:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
    180e:	5f 77       	andi	r21, 0x7F	; 127
    1810:	66 27       	eor	r22, r22
    1812:	77 27       	eor	r23, r23
    1814:	bb 27       	eor	r27, r27
    1816:	a7 2f       	mov	r26, r23
    1818:	96 2f       	mov	r25, r22
    181a:	85 2f       	mov	r24, r21
    181c:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
    1820:	40 93 c4 00 	sts	0x00C4, r20	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
    1824:	88 e9       	ldi	r24, 0x98	; 152
    1826:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    182a:	86 e0       	ldi	r24, 0x06	; 6
    182c:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
    1830:	1f 91       	pop	r17
    1832:	0f 91       	pop	r16
    1834:	08 95       	ret

00001836 <UART0_putc>:
    1836:	40 91 d1 07 	lds	r20, 0x07D1	; 0x8007d1 <UART_TxHead>
    183a:	50 e0       	ldi	r21, 0x00	; 0
    183c:	4f 5f       	subi	r20, 0xFF	; 255
    183e:	5f 4f       	sbci	r21, 0xFF	; 255
    1840:	4f 77       	andi	r20, 0x7F	; 127
    1842:	55 27       	eor	r21, r21
    1844:	20 91 d0 07 	lds	r18, 0x07D0	; 0x8007d0 <UART_TxTail>
    1848:	30 e0       	ldi	r19, 0x00	; 0
    184a:	42 17       	cp	r20, r18
    184c:	53 07       	cpc	r21, r19
    184e:	d1 f3       	breq	.-12     	; 0x1844 <UART0_putc+0xe>
    1850:	fa 01       	movw	r30, r20
    1852:	ee 5a       	subi	r30, 0xAE	; 174
    1854:	f7 4f       	sbci	r31, 0xF7	; 247
    1856:	80 83       	st	Z, r24
    1858:	40 93 d1 07 	sts	0x07D1, r20	; 0x8007d1 <UART_TxHead>
    185c:	e1 ec       	ldi	r30, 0xC1	; 193
    185e:	f0 e0       	ldi	r31, 0x00	; 0
    1860:	80 81       	ld	r24, Z
    1862:	80 62       	ori	r24, 0x20	; 32
    1864:	80 83       	st	Z, r24
    1866:	08 95       	ret

00001868 <UART0_OutUDec>:
    1868:	0f 93       	push	r16
    186a:	1f 93       	push	r17
    186c:	cf 93       	push	r28
    186e:	df 93       	push	r29
    1870:	6a 30       	cpi	r22, 0x0A	; 10
    1872:	71 05       	cpc	r23, r1
    1874:	81 05       	cpc	r24, r1
    1876:	91 05       	cpc	r25, r1
    1878:	58 f0       	brcs	.+22     	; 0x1890 <UART0_OutUDec+0x28>
    187a:	2a e0       	ldi	r18, 0x0A	; 10
    187c:	30 e0       	ldi	r19, 0x00	; 0
    187e:	40 e0       	ldi	r20, 0x00	; 0
    1880:	50 e0       	ldi	r21, 0x00	; 0
    1882:	0e 94 49 1f 	call	0x3e92	; 0x3e92 <__udivmodsi4>
    1886:	06 2f       	mov	r16, r22
    1888:	ca 01       	movw	r24, r20
    188a:	b9 01       	movw	r22, r18
    188c:	ed df       	rcall	.-38     	; 0x1868 <UART0_OutUDec>
    188e:	60 2f       	mov	r22, r16
    1890:	80 e3       	ldi	r24, 0x30	; 48
    1892:	86 0f       	add	r24, r22
    1894:	d0 df       	rcall	.-96     	; 0x1836 <UART0_putc>
    1896:	df 91       	pop	r29
    1898:	cf 91       	pop	r28
    189a:	1f 91       	pop	r17
    189c:	0f 91       	pop	r16
    189e:	08 95       	ret

000018a0 <UART0_puts>:
    18a0:	cf 93       	push	r28
    18a2:	df 93       	push	r29
    18a4:	ec 01       	movw	r28, r24
    18a6:	88 81       	ld	r24, Y
    18a8:	88 23       	and	r24, r24
    18aa:	29 f0       	breq	.+10     	; 0x18b6 <UART0_puts+0x16>
    18ac:	21 96       	adiw	r28, 0x01	; 1
    18ae:	c3 df       	rcall	.-122    	; 0x1836 <UART0_putc>
    18b0:	89 91       	ld	r24, Y+
    18b2:	81 11       	cpse	r24, r1
    18b4:	fc cf       	rjmp	.-8      	; 0x18ae <UART0_puts+0xe>
    18b6:	df 91       	pop	r29
    18b8:	cf 91       	pop	r28
    18ba:	08 95       	ret

000018bc <__vector_36>:
    18bc:	1f 92       	push	r1
    18be:	0f 92       	push	r0
    18c0:	0f b6       	in	r0, 0x3f	; 63
    18c2:	0f 92       	push	r0
    18c4:	11 24       	eor	r1, r1
    18c6:	0b b6       	in	r0, 0x3b	; 59
    18c8:	0f 92       	push	r0
    18ca:	2f 93       	push	r18
    18cc:	3f 93       	push	r19
    18ce:	4f 93       	push	r20
    18d0:	5f 93       	push	r21
    18d2:	8f 93       	push	r24
    18d4:	9f 93       	push	r25
    18d6:	ef 93       	push	r30
    18d8:	ff 93       	push	r31
    18da:	20 91 c8 00 	lds	r18, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
    18de:	30 91 ce 00 	lds	r19, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    18e2:	28 71       	andi	r18, 0x18	; 24
    18e4:	80 91 ca 06 	lds	r24, 0x06CA	; 0x8006ca <UART1_RxHead>
    18e8:	90 e0       	ldi	r25, 0x00	; 0
    18ea:	01 96       	adiw	r24, 0x01	; 1
    18ec:	8f 77       	andi	r24, 0x7F	; 127
    18ee:	99 27       	eor	r25, r25
    18f0:	40 91 c9 06 	lds	r20, 0x06C9	; 0x8006c9 <UART1_RxTail>
    18f4:	50 e0       	ldi	r21, 0x00	; 0
    18f6:	84 17       	cp	r24, r20
    18f8:	95 07       	cpc	r25, r21
    18fa:	39 f0       	breq	.+14     	; 0x190a <__vector_36+0x4e>
    18fc:	80 93 ca 06 	sts	0x06CA, r24	; 0x8006ca <UART1_RxHead>
    1900:	fc 01       	movw	r30, r24
    1902:	e3 53       	subi	r30, 0x33	; 51
    1904:	f9 4f       	sbci	r31, 0xF9	; 249
    1906:	30 83       	st	Z, r19
    1908:	01 c0       	rjmp	.+2      	; 0x190c <__vector_36+0x50>
    190a:	22 e0       	ldi	r18, 0x02	; 2
    190c:	20 93 c8 06 	sts	0x06C8, r18	; 0x8006c8 <UART1_LastRxError>
    1910:	ff 91       	pop	r31
    1912:	ef 91       	pop	r30
    1914:	9f 91       	pop	r25
    1916:	8f 91       	pop	r24
    1918:	5f 91       	pop	r21
    191a:	4f 91       	pop	r20
    191c:	3f 91       	pop	r19
    191e:	2f 91       	pop	r18
    1920:	0f 90       	pop	r0
    1922:	0b be       	out	0x3b, r0	; 59
    1924:	0f 90       	pop	r0
    1926:	0f be       	out	0x3f, r0	; 63
    1928:	0f 90       	pop	r0
    192a:	1f 90       	pop	r1
    192c:	18 95       	reti

0000192e <__vector_37>:
    192e:	1f 92       	push	r1
    1930:	0f 92       	push	r0
    1932:	0f b6       	in	r0, 0x3f	; 63
    1934:	0f 92       	push	r0
    1936:	11 24       	eor	r1, r1
    1938:	0b b6       	in	r0, 0x3b	; 59
    193a:	0f 92       	push	r0
    193c:	8f 93       	push	r24
    193e:	9f 93       	push	r25
    1940:	ef 93       	push	r30
    1942:	ff 93       	push	r31
    1944:	90 91 cc 06 	lds	r25, 0x06CC	; 0x8006cc <UART1_TxHead>
    1948:	80 91 cb 06 	lds	r24, 0x06CB	; 0x8006cb <UART1_TxTail>
    194c:	98 17       	cp	r25, r24
    194e:	89 f0       	breq	.+34     	; 0x1972 <__vector_37+0x44>
    1950:	80 91 cb 06 	lds	r24, 0x06CB	; 0x8006cb <UART1_TxTail>
    1954:	90 e0       	ldi	r25, 0x00	; 0
    1956:	01 96       	adiw	r24, 0x01	; 1
    1958:	8f 77       	andi	r24, 0x7F	; 127
    195a:	99 27       	eor	r25, r25
    195c:	80 93 cb 06 	sts	0x06CB, r24	; 0x8006cb <UART1_TxTail>
    1960:	fc 01       	movw	r30, r24
    1962:	e3 5b       	subi	r30, 0xB3	; 179
    1964:	f8 4f       	sbci	r31, 0xF8	; 248
    1966:	80 81       	ld	r24, Z
    1968:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    196c:	10 92 bc 04 	sts	0x04BC, r1	; 0x8004bc <UART1_Transmission_end>
    1970:	08 c0       	rjmp	.+16     	; 0x1982 <__vector_37+0x54>
    1972:	e9 ec       	ldi	r30, 0xC9	; 201
    1974:	f0 e0       	ldi	r31, 0x00	; 0
    1976:	80 81       	ld	r24, Z
    1978:	8f 7d       	andi	r24, 0xDF	; 223
    197a:	80 83       	st	Z, r24
    197c:	81 e0       	ldi	r24, 0x01	; 1
    197e:	80 93 bc 04 	sts	0x04BC, r24	; 0x8004bc <UART1_Transmission_end>
    1982:	ff 91       	pop	r31
    1984:	ef 91       	pop	r30
    1986:	9f 91       	pop	r25
    1988:	8f 91       	pop	r24
    198a:	0f 90       	pop	r0
    198c:	0b be       	out	0x3b, r0	; 59
    198e:	0f 90       	pop	r0
    1990:	0f be       	out	0x3f, r0	; 63
    1992:	0f 90       	pop	r0
    1994:	1f 90       	pop	r1
    1996:	18 95       	reti

00001998 <UART1_init>:
    1998:	0f 93       	push	r16
    199a:	1f 93       	push	r17
    199c:	8b 01       	movw	r16, r22
    199e:	9c 01       	movw	r18, r24
    19a0:	f8 94       	cli
    19a2:	10 92 cc 06 	sts	0x06CC, r1	; 0x8006cc <UART1_TxHead>
    19a6:	10 92 cb 06 	sts	0x06CB, r1	; 0x8006cb <UART1_TxTail>
    19aa:	10 92 ca 06 	sts	0x06CA, r1	; 0x8006ca <UART1_RxHead>
    19ae:	10 92 c9 06 	sts	0x06C9, r1	; 0x8006c9 <UART1_RxTail>
    19b2:	78 94       	sei
    19b4:	dc 01       	movw	r26, r24
    19b6:	cb 01       	movw	r24, r22
    19b8:	80 58       	subi	r24, 0x80	; 128
    19ba:	9b 47       	sbci	r25, 0x7B	; 123
    19bc:	a1 4e       	sbci	r26, 0xE1	; 225
    19be:	bf 4f       	sbci	r27, 0xFF	; 255
    19c0:	88 0f       	add	r24, r24
    19c2:	99 1f       	adc	r25, r25
    19c4:	aa 1f       	adc	r26, r26
    19c6:	bb 1f       	adc	r27, r27
    19c8:	88 0f       	add	r24, r24
    19ca:	99 1f       	adc	r25, r25
    19cc:	aa 1f       	adc	r26, r26
    19ce:	bb 1f       	adc	r27, r27
    19d0:	bc 01       	movw	r22, r24
    19d2:	cd 01       	movw	r24, r26
    19d4:	66 0f       	add	r22, r22
    19d6:	77 1f       	adc	r23, r23
    19d8:	88 1f       	adc	r24, r24
    19da:	99 1f       	adc	r25, r25
    19dc:	00 0f       	add	r16, r16
    19de:	11 1f       	adc	r17, r17
    19e0:	22 1f       	adc	r18, r18
    19e2:	33 1f       	adc	r19, r19
    19e4:	00 0f       	add	r16, r16
    19e6:	11 1f       	adc	r17, r17
    19e8:	22 1f       	adc	r18, r18
    19ea:	33 1f       	adc	r19, r19
    19ec:	a9 01       	movw	r20, r18
    19ee:	98 01       	movw	r18, r16
    19f0:	22 0f       	add	r18, r18
    19f2:	33 1f       	adc	r19, r19
    19f4:	44 1f       	adc	r20, r20
    19f6:	55 1f       	adc	r21, r21
    19f8:	22 0f       	add	r18, r18
    19fa:	33 1f       	adc	r19, r19
    19fc:	44 1f       	adc	r20, r20
    19fe:	55 1f       	adc	r21, r21
    1a00:	0e 94 49 1f 	call	0x3e92	; 0x3e92 <__udivmodsi4>
    1a04:	ba 01       	movw	r22, r20
    1a06:	a9 01       	movw	r20, r18
    1a08:	41 50       	subi	r20, 0x01	; 1
    1a0a:	51 09       	sbc	r21, r1
    1a0c:	61 09       	sbc	r22, r1
    1a0e:	71 09       	sbc	r23, r1
    1a10:	57 ff       	sbrs	r21, 7
    1a12:	06 c0       	rjmp	.+12     	; 0x1a20 <UART1_init+0x88>
    1a14:	82 e0       	ldi	r24, 0x02	; 2
    1a16:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
    1a1a:	5f 77       	andi	r21, 0x7F	; 127
    1a1c:	66 27       	eor	r22, r22
    1a1e:	77 27       	eor	r23, r23
    1a20:	bb 27       	eor	r27, r27
    1a22:	a7 2f       	mov	r26, r23
    1a24:	96 2f       	mov	r25, r22
    1a26:	85 2f       	mov	r24, r21
    1a28:	80 93 cd 00 	sts	0x00CD, r24	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7000cd>
    1a2c:	40 93 cc 00 	sts	0x00CC, r20	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7000cc>
    1a30:	88 e9       	ldi	r24, 0x98	; 152
    1a32:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7000c9>
    1a36:	86 e0       	ldi	r24, 0x06	; 6
    1a38:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7000ca>
    1a3c:	1f 91       	pop	r17
    1a3e:	0f 91       	pop	r16
    1a40:	08 95       	ret

00001a42 <UART1_getc>:
    1a42:	f8 94       	cli
    1a44:	90 91 ca 06 	lds	r25, 0x06CA	; 0x8006ca <UART1_RxHead>
    1a48:	80 91 c9 06 	lds	r24, 0x06C9	; 0x8006c9 <UART1_RxTail>
    1a4c:	98 13       	cpse	r25, r24
    1a4e:	04 c0       	rjmp	.+8      	; 0x1a58 <UART1_getc+0x16>
    1a50:	78 94       	sei
    1a52:	80 e0       	ldi	r24, 0x00	; 0
    1a54:	91 e0       	ldi	r25, 0x01	; 1
    1a56:	08 95       	ret
    1a58:	80 91 c9 06 	lds	r24, 0x06C9	; 0x8006c9 <UART1_RxTail>
    1a5c:	90 e0       	ldi	r25, 0x00	; 0
    1a5e:	01 96       	adiw	r24, 0x01	; 1
    1a60:	8f 77       	andi	r24, 0x7F	; 127
    1a62:	99 27       	eor	r25, r25
    1a64:	80 93 c9 06 	sts	0x06C9, r24	; 0x8006c9 <UART1_RxTail>
    1a68:	78 94       	sei
    1a6a:	fc 01       	movw	r30, r24
    1a6c:	e3 53       	subi	r30, 0x33	; 51
    1a6e:	f9 4f       	sbci	r31, 0xF9	; 249
    1a70:	20 81       	ld	r18, Z
    1a72:	80 91 c8 06 	lds	r24, 0x06C8	; 0x8006c8 <UART1_LastRxError>
    1a76:	90 e0       	ldi	r25, 0x00	; 0
    1a78:	98 2f       	mov	r25, r24
    1a7a:	88 27       	eor	r24, r24
    1a7c:	82 0f       	add	r24, r18
    1a7e:	91 1d       	adc	r25, r1
    1a80:	08 95       	ret

00001a82 <UART1_putc>:
    1a82:	40 91 cc 06 	lds	r20, 0x06CC	; 0x8006cc <UART1_TxHead>
    1a86:	50 e0       	ldi	r21, 0x00	; 0
    1a88:	4f 5f       	subi	r20, 0xFF	; 255
    1a8a:	5f 4f       	sbci	r21, 0xFF	; 255
    1a8c:	4f 77       	andi	r20, 0x7F	; 127
    1a8e:	55 27       	eor	r21, r21
    1a90:	20 91 cb 06 	lds	r18, 0x06CB	; 0x8006cb <UART1_TxTail>
    1a94:	30 e0       	ldi	r19, 0x00	; 0
    1a96:	42 17       	cp	r20, r18
    1a98:	53 07       	cpc	r21, r19
    1a9a:	d1 f3       	breq	.-12     	; 0x1a90 <UART1_putc+0xe>
    1a9c:	fa 01       	movw	r30, r20
    1a9e:	e3 5b       	subi	r30, 0xB3	; 179
    1aa0:	f8 4f       	sbci	r31, 0xF8	; 248
    1aa2:	80 83       	st	Z, r24
    1aa4:	40 93 cc 06 	sts	0x06CC, r20	; 0x8006cc <UART1_TxHead>
    1aa8:	e9 ec       	ldi	r30, 0xC9	; 201
    1aaa:	f0 e0       	ldi	r31, 0x00	; 0
    1aac:	80 81       	ld	r24, Z
    1aae:	80 62       	ori	r24, 0x20	; 32
    1ab0:	80 83       	st	Z, r24
    1ab2:	08 95       	ret

00001ab4 <UART1_available>:
    1ab4:	f8 94       	cli
    1ab6:	80 91 ca 06 	lds	r24, 0x06CA	; 0x8006ca <UART1_RxHead>
    1aba:	20 91 c9 06 	lds	r18, 0x06C9	; 0x8006c9 <UART1_RxTail>
    1abe:	78 94       	sei
    1ac0:	90 e0       	ldi	r25, 0x00	; 0
    1ac2:	80 58       	subi	r24, 0x80	; 128
    1ac4:	9f 4f       	sbci	r25, 0xFF	; 255
    1ac6:	82 1b       	sub	r24, r18
    1ac8:	91 09       	sbc	r25, r1
    1aca:	8f 77       	andi	r24, 0x7F	; 127
    1acc:	99 27       	eor	r25, r25
    1ace:	08 95       	ret

00001ad0 <UART1_flush>:
    1ad0:	80 91 bc 04 	lds	r24, 0x04BC	; 0x8004bc <UART1_Transmission_end>
    1ad4:	88 23       	and	r24, r24
    1ad6:	e1 f3       	breq	.-8      	; 0x1ad0 <UART1_flush>
    1ad8:	08 95       	ret

00001ada <__vector_51>:
    1ada:	1f 92       	push	r1
    1adc:	0f 92       	push	r0
    1ade:	0f b6       	in	r0, 0x3f	; 63
    1ae0:	0f 92       	push	r0
    1ae2:	11 24       	eor	r1, r1
    1ae4:	0b b6       	in	r0, 0x3b	; 59
    1ae6:	0f 92       	push	r0
    1ae8:	2f 93       	push	r18
    1aea:	3f 93       	push	r19
    1aec:	4f 93       	push	r20
    1aee:	5f 93       	push	r21
    1af0:	8f 93       	push	r24
    1af2:	9f 93       	push	r25
    1af4:	ef 93       	push	r30
    1af6:	ff 93       	push	r31
    1af8:	20 91 d0 00 	lds	r18, 0x00D0	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7000d0>
    1afc:	30 91 d6 00 	lds	r19, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    1b00:	28 71       	andi	r18, 0x18	; 24
    1b02:	80 91 c5 05 	lds	r24, 0x05C5	; 0x8005c5 <UART2_RxHead>
    1b06:	90 e0       	ldi	r25, 0x00	; 0
    1b08:	01 96       	adiw	r24, 0x01	; 1
    1b0a:	8f 77       	andi	r24, 0x7F	; 127
    1b0c:	99 27       	eor	r25, r25
    1b0e:	40 91 c4 05 	lds	r20, 0x05C4	; 0x8005c4 <UART2_RxTail>
    1b12:	50 e0       	ldi	r21, 0x00	; 0
    1b14:	84 17       	cp	r24, r20
    1b16:	95 07       	cpc	r25, r21
    1b18:	39 f0       	breq	.+14     	; 0x1b28 <__vector_51+0x4e>
    1b1a:	80 93 c5 05 	sts	0x05C5, r24	; 0x8005c5 <UART2_RxHead>
    1b1e:	fc 01       	movw	r30, r24
    1b20:	e8 53       	subi	r30, 0x38	; 56
    1b22:	fa 4f       	sbci	r31, 0xFA	; 250
    1b24:	30 83       	st	Z, r19
    1b26:	01 c0       	rjmp	.+2      	; 0x1b2a <__vector_51+0x50>
    1b28:	22 e0       	ldi	r18, 0x02	; 2
    1b2a:	20 93 c3 05 	sts	0x05C3, r18	; 0x8005c3 <UART2_LastRxError>
    1b2e:	ff 91       	pop	r31
    1b30:	ef 91       	pop	r30
    1b32:	9f 91       	pop	r25
    1b34:	8f 91       	pop	r24
    1b36:	5f 91       	pop	r21
    1b38:	4f 91       	pop	r20
    1b3a:	3f 91       	pop	r19
    1b3c:	2f 91       	pop	r18
    1b3e:	0f 90       	pop	r0
    1b40:	0b be       	out	0x3b, r0	; 59
    1b42:	0f 90       	pop	r0
    1b44:	0f be       	out	0x3f, r0	; 63
    1b46:	0f 90       	pop	r0
    1b48:	1f 90       	pop	r1
    1b4a:	18 95       	reti

00001b4c <__vector_52>:
    1b4c:	1f 92       	push	r1
    1b4e:	0f 92       	push	r0
    1b50:	0f b6       	in	r0, 0x3f	; 63
    1b52:	0f 92       	push	r0
    1b54:	11 24       	eor	r1, r1
    1b56:	0b b6       	in	r0, 0x3b	; 59
    1b58:	0f 92       	push	r0
    1b5a:	8f 93       	push	r24
    1b5c:	9f 93       	push	r25
    1b5e:	ef 93       	push	r30
    1b60:	ff 93       	push	r31
    1b62:	90 91 c7 05 	lds	r25, 0x05C7	; 0x8005c7 <UART2_TxHead>
    1b66:	80 91 c6 05 	lds	r24, 0x05C6	; 0x8005c6 <UART2_TxTail>
    1b6a:	98 17       	cp	r25, r24
    1b6c:	89 f0       	breq	.+34     	; 0x1b90 <__vector_52+0x44>
    1b6e:	80 91 c6 05 	lds	r24, 0x05C6	; 0x8005c6 <UART2_TxTail>
    1b72:	90 e0       	ldi	r25, 0x00	; 0
    1b74:	01 96       	adiw	r24, 0x01	; 1
    1b76:	8f 77       	andi	r24, 0x7F	; 127
    1b78:	99 27       	eor	r25, r25
    1b7a:	80 93 c6 05 	sts	0x05C6, r24	; 0x8005c6 <UART2_TxTail>
    1b7e:	fc 01       	movw	r30, r24
    1b80:	e8 5b       	subi	r30, 0xB8	; 184
    1b82:	f9 4f       	sbci	r31, 0xF9	; 249
    1b84:	80 81       	ld	r24, Z
    1b86:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    1b8a:	10 92 bb 04 	sts	0x04BB, r1	; 0x8004bb <UART2_Transmission_end>
    1b8e:	08 c0       	rjmp	.+16     	; 0x1ba0 <__vector_52+0x54>
    1b90:	e1 ed       	ldi	r30, 0xD1	; 209
    1b92:	f0 e0       	ldi	r31, 0x00	; 0
    1b94:	80 81       	ld	r24, Z
    1b96:	8f 7d       	andi	r24, 0xDF	; 223
    1b98:	80 83       	st	Z, r24
    1b9a:	81 e0       	ldi	r24, 0x01	; 1
    1b9c:	80 93 bb 04 	sts	0x04BB, r24	; 0x8004bb <UART2_Transmission_end>
    1ba0:	ff 91       	pop	r31
    1ba2:	ef 91       	pop	r30
    1ba4:	9f 91       	pop	r25
    1ba6:	8f 91       	pop	r24
    1ba8:	0f 90       	pop	r0
    1baa:	0b be       	out	0x3b, r0	; 59
    1bac:	0f 90       	pop	r0
    1bae:	0f be       	out	0x3f, r0	; 63
    1bb0:	0f 90       	pop	r0
    1bb2:	1f 90       	pop	r1
    1bb4:	18 95       	reti

00001bb6 <UART2_init>:
    1bb6:	0f 93       	push	r16
    1bb8:	1f 93       	push	r17
    1bba:	8b 01       	movw	r16, r22
    1bbc:	9c 01       	movw	r18, r24
    1bbe:	f8 94       	cli
    1bc0:	10 92 c7 05 	sts	0x05C7, r1	; 0x8005c7 <UART2_TxHead>
    1bc4:	10 92 c6 05 	sts	0x05C6, r1	; 0x8005c6 <UART2_TxTail>
    1bc8:	10 92 c5 05 	sts	0x05C5, r1	; 0x8005c5 <UART2_RxHead>
    1bcc:	10 92 c4 05 	sts	0x05C4, r1	; 0x8005c4 <UART2_RxTail>
    1bd0:	78 94       	sei
    1bd2:	dc 01       	movw	r26, r24
    1bd4:	cb 01       	movw	r24, r22
    1bd6:	80 58       	subi	r24, 0x80	; 128
    1bd8:	9b 47       	sbci	r25, 0x7B	; 123
    1bda:	a1 4e       	sbci	r26, 0xE1	; 225
    1bdc:	bf 4f       	sbci	r27, 0xFF	; 255
    1bde:	88 0f       	add	r24, r24
    1be0:	99 1f       	adc	r25, r25
    1be2:	aa 1f       	adc	r26, r26
    1be4:	bb 1f       	adc	r27, r27
    1be6:	88 0f       	add	r24, r24
    1be8:	99 1f       	adc	r25, r25
    1bea:	aa 1f       	adc	r26, r26
    1bec:	bb 1f       	adc	r27, r27
    1bee:	bc 01       	movw	r22, r24
    1bf0:	cd 01       	movw	r24, r26
    1bf2:	66 0f       	add	r22, r22
    1bf4:	77 1f       	adc	r23, r23
    1bf6:	88 1f       	adc	r24, r24
    1bf8:	99 1f       	adc	r25, r25
    1bfa:	00 0f       	add	r16, r16
    1bfc:	11 1f       	adc	r17, r17
    1bfe:	22 1f       	adc	r18, r18
    1c00:	33 1f       	adc	r19, r19
    1c02:	00 0f       	add	r16, r16
    1c04:	11 1f       	adc	r17, r17
    1c06:	22 1f       	adc	r18, r18
    1c08:	33 1f       	adc	r19, r19
    1c0a:	a9 01       	movw	r20, r18
    1c0c:	98 01       	movw	r18, r16
    1c0e:	22 0f       	add	r18, r18
    1c10:	33 1f       	adc	r19, r19
    1c12:	44 1f       	adc	r20, r20
    1c14:	55 1f       	adc	r21, r21
    1c16:	22 0f       	add	r18, r18
    1c18:	33 1f       	adc	r19, r19
    1c1a:	44 1f       	adc	r20, r20
    1c1c:	55 1f       	adc	r21, r21
    1c1e:	0e 94 49 1f 	call	0x3e92	; 0x3e92 <__udivmodsi4>
    1c22:	ba 01       	movw	r22, r20
    1c24:	a9 01       	movw	r20, r18
    1c26:	41 50       	subi	r20, 0x01	; 1
    1c28:	51 09       	sbc	r21, r1
    1c2a:	61 09       	sbc	r22, r1
    1c2c:	71 09       	sbc	r23, r1
    1c2e:	57 ff       	sbrs	r21, 7
    1c30:	06 c0       	rjmp	.+12     	; 0x1c3e <UART2_init+0x88>
    1c32:	82 e0       	ldi	r24, 0x02	; 2
    1c34:	80 93 d0 00 	sts	0x00D0, r24	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7000d0>
    1c38:	5f 77       	andi	r21, 0x7F	; 127
    1c3a:	66 27       	eor	r22, r22
    1c3c:	77 27       	eor	r23, r23
    1c3e:	bb 27       	eor	r27, r27
    1c40:	a7 2f       	mov	r26, r23
    1c42:	96 2f       	mov	r25, r22
    1c44:	85 2f       	mov	r24, r21
    1c46:	80 93 d5 00 	sts	0x00D5, r24	; 0x8000d5 <__TEXT_REGION_LENGTH__+0x7000d5>
    1c4a:	40 93 d4 00 	sts	0x00D4, r20	; 0x8000d4 <__TEXT_REGION_LENGTH__+0x7000d4>
    1c4e:	88 e9       	ldi	r24, 0x98	; 152
    1c50:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7000d1>
    1c54:	86 e0       	ldi	r24, 0x06	; 6
    1c56:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7000d2>
    1c5a:	1f 91       	pop	r17
    1c5c:	0f 91       	pop	r16
    1c5e:	08 95       	ret

00001c60 <UART2_getc>:
    1c60:	90 91 c5 05 	lds	r25, 0x05C5	; 0x8005c5 <UART2_RxHead>
    1c64:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <UART2_RxTail>
    1c68:	98 17       	cp	r25, r24
    1c6a:	a1 f0       	breq	.+40     	; 0x1c94 <UART2_getc+0x34>
    1c6c:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <UART2_RxTail>
    1c70:	90 e0       	ldi	r25, 0x00	; 0
    1c72:	01 96       	adiw	r24, 0x01	; 1
    1c74:	8f 77       	andi	r24, 0x7F	; 127
    1c76:	99 27       	eor	r25, r25
    1c78:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <UART2_RxTail>
    1c7c:	fc 01       	movw	r30, r24
    1c7e:	e8 53       	subi	r30, 0x38	; 56
    1c80:	fa 4f       	sbci	r31, 0xFA	; 250
    1c82:	20 81       	ld	r18, Z
    1c84:	80 91 c3 05 	lds	r24, 0x05C3	; 0x8005c3 <UART2_LastRxError>
    1c88:	90 e0       	ldi	r25, 0x00	; 0
    1c8a:	98 2f       	mov	r25, r24
    1c8c:	88 27       	eor	r24, r24
    1c8e:	82 0f       	add	r24, r18
    1c90:	91 1d       	adc	r25, r1
    1c92:	08 95       	ret
    1c94:	80 e0       	ldi	r24, 0x00	; 0
    1c96:	91 e0       	ldi	r25, 0x01	; 1
    1c98:	08 95       	ret

00001c9a <UART2_putc>:
    1c9a:	40 91 c7 05 	lds	r20, 0x05C7	; 0x8005c7 <UART2_TxHead>
    1c9e:	50 e0       	ldi	r21, 0x00	; 0
    1ca0:	4f 5f       	subi	r20, 0xFF	; 255
    1ca2:	5f 4f       	sbci	r21, 0xFF	; 255
    1ca4:	4f 77       	andi	r20, 0x7F	; 127
    1ca6:	55 27       	eor	r21, r21
    1ca8:	20 91 c6 05 	lds	r18, 0x05C6	; 0x8005c6 <UART2_TxTail>
    1cac:	30 e0       	ldi	r19, 0x00	; 0
    1cae:	42 17       	cp	r20, r18
    1cb0:	53 07       	cpc	r21, r19
    1cb2:	d1 f3       	breq	.-12     	; 0x1ca8 <UART2_putc+0xe>
    1cb4:	fa 01       	movw	r30, r20
    1cb6:	e8 5b       	subi	r30, 0xB8	; 184
    1cb8:	f9 4f       	sbci	r31, 0xF9	; 249
    1cba:	80 83       	st	Z, r24
    1cbc:	40 93 c7 05 	sts	0x05C7, r20	; 0x8005c7 <UART2_TxHead>
    1cc0:	e1 ed       	ldi	r30, 0xD1	; 209
    1cc2:	f0 e0       	ldi	r31, 0x00	; 0
    1cc4:	80 81       	ld	r24, Z
    1cc6:	80 62       	ori	r24, 0x20	; 32
    1cc8:	80 83       	st	Z, r24
    1cca:	08 95       	ret

00001ccc <UART2_available>:
    1ccc:	f8 94       	cli
    1cce:	80 91 c5 05 	lds	r24, 0x05C5	; 0x8005c5 <UART2_RxHead>
    1cd2:	20 91 c4 05 	lds	r18, 0x05C4	; 0x8005c4 <UART2_RxTail>
    1cd6:	78 94       	sei
    1cd8:	90 e0       	ldi	r25, 0x00	; 0
    1cda:	80 58       	subi	r24, 0x80	; 128
    1cdc:	9f 4f       	sbci	r25, 0xFF	; 255
    1cde:	82 1b       	sub	r24, r18
    1ce0:	91 09       	sbc	r25, r1
    1ce2:	8f 77       	andi	r24, 0x7F	; 127
    1ce4:	99 27       	eor	r25, r25
    1ce6:	08 95       	ret

00001ce8 <UART2_flush>:
    1ce8:	80 91 bb 04 	lds	r24, 0x04BB	; 0x8004bb <UART2_Transmission_end>
    1cec:	88 23       	and	r24, r24
    1cee:	e1 f3       	breq	.-8      	; 0x1ce8 <UART2_flush>
    1cf0:	08 95       	ret

00001cf2 <__vector_54>:
    1cf2:	1f 92       	push	r1
    1cf4:	0f 92       	push	r0
    1cf6:	0f b6       	in	r0, 0x3f	; 63
    1cf8:	0f 92       	push	r0
    1cfa:	11 24       	eor	r1, r1
    1cfc:	0b b6       	in	r0, 0x3b	; 59
    1cfe:	0f 92       	push	r0
    1d00:	2f 93       	push	r18
    1d02:	3f 93       	push	r19
    1d04:	4f 93       	push	r20
    1d06:	5f 93       	push	r21
    1d08:	8f 93       	push	r24
    1d0a:	9f 93       	push	r25
    1d0c:	ef 93       	push	r30
    1d0e:	ff 93       	push	r31
    1d10:	20 91 30 01 	lds	r18, 0x0130	; 0x800130 <__TEXT_REGION_LENGTH__+0x700130>
    1d14:	30 91 36 01 	lds	r19, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    1d18:	28 71       	andi	r18, 0x18	; 24
    1d1a:	80 91 c0 04 	lds	r24, 0x04C0	; 0x8004c0 <UART3_RxHead>
    1d1e:	90 e0       	ldi	r25, 0x00	; 0
    1d20:	01 96       	adiw	r24, 0x01	; 1
    1d22:	8f 77       	andi	r24, 0x7F	; 127
    1d24:	99 27       	eor	r25, r25
    1d26:	40 91 bf 04 	lds	r20, 0x04BF	; 0x8004bf <UART3_RxTail>
    1d2a:	50 e0       	ldi	r21, 0x00	; 0
    1d2c:	84 17       	cp	r24, r20
    1d2e:	95 07       	cpc	r25, r21
    1d30:	39 f0       	breq	.+14     	; 0x1d40 <__vector_54+0x4e>
    1d32:	80 93 c0 04 	sts	0x04C0, r24	; 0x8004c0 <UART3_RxHead>
    1d36:	fc 01       	movw	r30, r24
    1d38:	ed 53       	subi	r30, 0x3D	; 61
    1d3a:	fb 4f       	sbci	r31, 0xFB	; 251
    1d3c:	30 83       	st	Z, r19
    1d3e:	01 c0       	rjmp	.+2      	; 0x1d42 <__vector_54+0x50>
    1d40:	22 e0       	ldi	r18, 0x02	; 2
    1d42:	20 93 be 04 	sts	0x04BE, r18	; 0x8004be <UART3_LastRxError>
    1d46:	ff 91       	pop	r31
    1d48:	ef 91       	pop	r30
    1d4a:	9f 91       	pop	r25
    1d4c:	8f 91       	pop	r24
    1d4e:	5f 91       	pop	r21
    1d50:	4f 91       	pop	r20
    1d52:	3f 91       	pop	r19
    1d54:	2f 91       	pop	r18
    1d56:	0f 90       	pop	r0
    1d58:	0b be       	out	0x3b, r0	; 59
    1d5a:	0f 90       	pop	r0
    1d5c:	0f be       	out	0x3f, r0	; 63
    1d5e:	0f 90       	pop	r0
    1d60:	1f 90       	pop	r1
    1d62:	18 95       	reti

00001d64 <__vector_55>:
    1d64:	1f 92       	push	r1
    1d66:	0f 92       	push	r0
    1d68:	0f b6       	in	r0, 0x3f	; 63
    1d6a:	0f 92       	push	r0
    1d6c:	11 24       	eor	r1, r1
    1d6e:	0b b6       	in	r0, 0x3b	; 59
    1d70:	0f 92       	push	r0
    1d72:	8f 93       	push	r24
    1d74:	9f 93       	push	r25
    1d76:	ef 93       	push	r30
    1d78:	ff 93       	push	r31
    1d7a:	90 91 c2 04 	lds	r25, 0x04C2	; 0x8004c2 <UART3_TxHead>
    1d7e:	80 91 c1 04 	lds	r24, 0x04C1	; 0x8004c1 <UART3_TxTail>
    1d82:	98 17       	cp	r25, r24
    1d84:	89 f0       	breq	.+34     	; 0x1da8 <__vector_55+0x44>
    1d86:	80 91 c1 04 	lds	r24, 0x04C1	; 0x8004c1 <UART3_TxTail>
    1d8a:	90 e0       	ldi	r25, 0x00	; 0
    1d8c:	01 96       	adiw	r24, 0x01	; 1
    1d8e:	8f 77       	andi	r24, 0x7F	; 127
    1d90:	99 27       	eor	r25, r25
    1d92:	80 93 c1 04 	sts	0x04C1, r24	; 0x8004c1 <UART3_TxTail>
    1d96:	fc 01       	movw	r30, r24
    1d98:	ed 5b       	subi	r30, 0xBD	; 189
    1d9a:	fa 4f       	sbci	r31, 0xFA	; 250
    1d9c:	80 81       	ld	r24, Z
    1d9e:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    1da2:	10 92 ba 04 	sts	0x04BA, r1	; 0x8004ba <UART3_Transmission_end>
    1da6:	08 c0       	rjmp	.+16     	; 0x1db8 <__vector_55+0x54>
    1da8:	e1 e3       	ldi	r30, 0x31	; 49
    1daa:	f1 e0       	ldi	r31, 0x01	; 1
    1dac:	80 81       	ld	r24, Z
    1dae:	8f 7d       	andi	r24, 0xDF	; 223
    1db0:	80 83       	st	Z, r24
    1db2:	81 e0       	ldi	r24, 0x01	; 1
    1db4:	80 93 ba 04 	sts	0x04BA, r24	; 0x8004ba <UART3_Transmission_end>
    1db8:	ff 91       	pop	r31
    1dba:	ef 91       	pop	r30
    1dbc:	9f 91       	pop	r25
    1dbe:	8f 91       	pop	r24
    1dc0:	0f 90       	pop	r0
    1dc2:	0b be       	out	0x3b, r0	; 59
    1dc4:	0f 90       	pop	r0
    1dc6:	0f be       	out	0x3f, r0	; 63
    1dc8:	0f 90       	pop	r0
    1dca:	1f 90       	pop	r1
    1dcc:	18 95       	reti

00001dce <UART3_init>:
    1dce:	0f 93       	push	r16
    1dd0:	1f 93       	push	r17
    1dd2:	8b 01       	movw	r16, r22
    1dd4:	9c 01       	movw	r18, r24
    1dd6:	f8 94       	cli
    1dd8:	10 92 c2 04 	sts	0x04C2, r1	; 0x8004c2 <UART3_TxHead>
    1ddc:	10 92 c1 04 	sts	0x04C1, r1	; 0x8004c1 <UART3_TxTail>
    1de0:	10 92 c0 04 	sts	0x04C0, r1	; 0x8004c0 <UART3_RxHead>
    1de4:	10 92 bf 04 	sts	0x04BF, r1	; 0x8004bf <UART3_RxTail>
    1de8:	78 94       	sei
    1dea:	dc 01       	movw	r26, r24
    1dec:	cb 01       	movw	r24, r22
    1dee:	80 58       	subi	r24, 0x80	; 128
    1df0:	9b 47       	sbci	r25, 0x7B	; 123
    1df2:	a1 4e       	sbci	r26, 0xE1	; 225
    1df4:	bf 4f       	sbci	r27, 0xFF	; 255
    1df6:	88 0f       	add	r24, r24
    1df8:	99 1f       	adc	r25, r25
    1dfa:	aa 1f       	adc	r26, r26
    1dfc:	bb 1f       	adc	r27, r27
    1dfe:	88 0f       	add	r24, r24
    1e00:	99 1f       	adc	r25, r25
    1e02:	aa 1f       	adc	r26, r26
    1e04:	bb 1f       	adc	r27, r27
    1e06:	bc 01       	movw	r22, r24
    1e08:	cd 01       	movw	r24, r26
    1e0a:	66 0f       	add	r22, r22
    1e0c:	77 1f       	adc	r23, r23
    1e0e:	88 1f       	adc	r24, r24
    1e10:	99 1f       	adc	r25, r25
    1e12:	00 0f       	add	r16, r16
    1e14:	11 1f       	adc	r17, r17
    1e16:	22 1f       	adc	r18, r18
    1e18:	33 1f       	adc	r19, r19
    1e1a:	00 0f       	add	r16, r16
    1e1c:	11 1f       	adc	r17, r17
    1e1e:	22 1f       	adc	r18, r18
    1e20:	33 1f       	adc	r19, r19
    1e22:	a9 01       	movw	r20, r18
    1e24:	98 01       	movw	r18, r16
    1e26:	22 0f       	add	r18, r18
    1e28:	33 1f       	adc	r19, r19
    1e2a:	44 1f       	adc	r20, r20
    1e2c:	55 1f       	adc	r21, r21
    1e2e:	22 0f       	add	r18, r18
    1e30:	33 1f       	adc	r19, r19
    1e32:	44 1f       	adc	r20, r20
    1e34:	55 1f       	adc	r21, r21
    1e36:	0e 94 49 1f 	call	0x3e92	; 0x3e92 <__udivmodsi4>
    1e3a:	ba 01       	movw	r22, r20
    1e3c:	a9 01       	movw	r20, r18
    1e3e:	41 50       	subi	r20, 0x01	; 1
    1e40:	51 09       	sbc	r21, r1
    1e42:	61 09       	sbc	r22, r1
    1e44:	71 09       	sbc	r23, r1
    1e46:	57 ff       	sbrs	r21, 7
    1e48:	06 c0       	rjmp	.+12     	; 0x1e56 <UART3_init+0x88>
    1e4a:	82 e0       	ldi	r24, 0x02	; 2
    1e4c:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <__TEXT_REGION_LENGTH__+0x700130>
    1e50:	5f 77       	andi	r21, 0x7F	; 127
    1e52:	66 27       	eor	r22, r22
    1e54:	77 27       	eor	r23, r23
    1e56:	bb 27       	eor	r27, r27
    1e58:	a7 2f       	mov	r26, r23
    1e5a:	96 2f       	mov	r25, r22
    1e5c:	85 2f       	mov	r24, r21
    1e5e:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <__TEXT_REGION_LENGTH__+0x700135>
    1e62:	40 93 34 01 	sts	0x0134, r20	; 0x800134 <__TEXT_REGION_LENGTH__+0x700134>
    1e66:	88 e9       	ldi	r24, 0x98	; 152
    1e68:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <__TEXT_REGION_LENGTH__+0x700131>
    1e6c:	86 e0       	ldi	r24, 0x06	; 6
    1e6e:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <__TEXT_REGION_LENGTH__+0x700132>
    1e72:	1f 91       	pop	r17
    1e74:	0f 91       	pop	r16
    1e76:	08 95       	ret

00001e78 <UART3_getc>:
    1e78:	90 91 c0 04 	lds	r25, 0x04C0	; 0x8004c0 <UART3_RxHead>
    1e7c:	80 91 bf 04 	lds	r24, 0x04BF	; 0x8004bf <UART3_RxTail>
    1e80:	98 17       	cp	r25, r24
    1e82:	a1 f0       	breq	.+40     	; 0x1eac <UART3_getc+0x34>
    1e84:	80 91 bf 04 	lds	r24, 0x04BF	; 0x8004bf <UART3_RxTail>
    1e88:	90 e0       	ldi	r25, 0x00	; 0
    1e8a:	01 96       	adiw	r24, 0x01	; 1
    1e8c:	8f 77       	andi	r24, 0x7F	; 127
    1e8e:	99 27       	eor	r25, r25
    1e90:	80 93 bf 04 	sts	0x04BF, r24	; 0x8004bf <UART3_RxTail>
    1e94:	fc 01       	movw	r30, r24
    1e96:	ed 53       	subi	r30, 0x3D	; 61
    1e98:	fb 4f       	sbci	r31, 0xFB	; 251
    1e9a:	20 81       	ld	r18, Z
    1e9c:	80 91 be 04 	lds	r24, 0x04BE	; 0x8004be <UART3_LastRxError>
    1ea0:	90 e0       	ldi	r25, 0x00	; 0
    1ea2:	98 2f       	mov	r25, r24
    1ea4:	88 27       	eor	r24, r24
    1ea6:	82 0f       	add	r24, r18
    1ea8:	91 1d       	adc	r25, r1
    1eaa:	08 95       	ret
    1eac:	80 e0       	ldi	r24, 0x00	; 0
    1eae:	91 e0       	ldi	r25, 0x01	; 1
    1eb0:	08 95       	ret

00001eb2 <UART3_putc>:
    1eb2:	40 91 c2 04 	lds	r20, 0x04C2	; 0x8004c2 <UART3_TxHead>
    1eb6:	50 e0       	ldi	r21, 0x00	; 0
    1eb8:	4f 5f       	subi	r20, 0xFF	; 255
    1eba:	5f 4f       	sbci	r21, 0xFF	; 255
    1ebc:	4f 77       	andi	r20, 0x7F	; 127
    1ebe:	55 27       	eor	r21, r21
    1ec0:	20 91 c1 04 	lds	r18, 0x04C1	; 0x8004c1 <UART3_TxTail>
    1ec4:	30 e0       	ldi	r19, 0x00	; 0
    1ec6:	42 17       	cp	r20, r18
    1ec8:	53 07       	cpc	r21, r19
    1eca:	d1 f3       	breq	.-12     	; 0x1ec0 <UART3_putc+0xe>
    1ecc:	fa 01       	movw	r30, r20
    1ece:	ed 5b       	subi	r30, 0xBD	; 189
    1ed0:	fa 4f       	sbci	r31, 0xFA	; 250
    1ed2:	80 83       	st	Z, r24
    1ed4:	40 93 c2 04 	sts	0x04C2, r20	; 0x8004c2 <UART3_TxHead>
    1ed8:	e1 e3       	ldi	r30, 0x31	; 49
    1eda:	f1 e0       	ldi	r31, 0x01	; 1
    1edc:	80 81       	ld	r24, Z
    1ede:	80 62       	ori	r24, 0x20	; 32
    1ee0:	80 83       	st	Z, r24
    1ee2:	08 95       	ret

00001ee4 <UART3_available>:
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1ee4:	f8 94       	cli
uint16_t UART3_available(void)
{
	uint16_t ret;
	
	ATOMIC_BLOCK(ATOMIC_FORCEON) {
		ret = (UART_RX3_BUFFER_SIZE + UART3_RxHead - UART3_RxTail) & UART_RX3_BUFFER_MASK;
    1ee6:	80 91 c0 04 	lds	r24, 0x04C0	; 0x8004c0 <UART3_RxHead>
    1eea:	20 91 bf 04 	lds	r18, 0x04BF	; 0x8004bf <UART3_RxTail>
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
    1eee:	78 94       	sei
	}
	return ret;
    1ef0:	90 e0       	ldi	r25, 0x00	; 0
    1ef2:	80 58       	subi	r24, 0x80	; 128
    1ef4:	9f 4f       	sbci	r25, 0xFF	; 255
    1ef6:	82 1b       	sub	r24, r18
    1ef8:	91 09       	sbc	r25, r1
} /* UART3_available */
    1efa:	8f 77       	andi	r24, 0x7F	; 127
    1efc:	99 27       	eor	r25, r25
    1efe:	08 95       	ret

00001f00 <UART3_flush>:
void UART3_flush(void)
{
//	ATOMIC_BLOCK(ATOMIC_FORCEON) {
//		UART3_RxHead = UART3_RxTail;
//	} commented by mohab
	while(0 == UART3_Transmission_end);
    1f00:	80 91 ba 04 	lds	r24, 0x04BA	; 0x8004ba <UART3_Transmission_end>
    1f04:	88 23       	and	r24, r24
    1f06:	e1 f3       	breq	.-8      	; 0x1f00 <UART3_flush>
} /* UART3_flush */
    1f08:	08 95       	ret

00001f0a <RTE_encoder_init>:


/*static uint16_t Conveyor_speed;*/
static uint16_t Drum_speed;

void RTE_encoder_init(void){
    1f0a:	08 95       	ret

00001f0c <RTE_get_Drum_speed>:



uint16_t RTE_get_Drum_speed(void){
	return Drum_speed;
}
    1f0c:	80 91 d2 08 	lds	r24, 0x08D2	; 0x8008d2 <Drum_speed>
    1f10:	90 91 d3 08 	lds	r25, 0x08D3	; 0x8008d3 <Drum_speed+0x1>
    1f14:	08 95       	ret

00001f16 <RTE_invertersetting_init>:
}

uint16_t RTE_get_Time_minute(void){
	xSemaphoreTake(Sema_Time_minute_handle,portMAX_DELAY);
	return Time_minute;
}
    1f16:	0f 93       	push	r16
    1f18:	03 e0       	ldi	r16, 0x03	; 3
    1f1a:	25 e8       	ldi	r18, 0x85	; 133
    1f1c:	39 e0       	ldi	r19, 0x09	; 9
    1f1e:	40 e0       	ldi	r20, 0x00	; 0
    1f20:	50 e0       	ldi	r21, 0x00	; 0
    1f22:	60 e0       	ldi	r22, 0x00	; 0
    1f24:	81 e0       	ldi	r24, 0x01	; 1
    1f26:	1d d5       	rcall	.+2618   	; 0x2962 <xQueueGenericCreateStatic>
    1f28:	90 93 a5 09 	sts	0x09A5, r25	; 0x8009a5 <Sema_Gear_ratio_handle+0x1>
    1f2c:	80 93 a4 09 	sts	0x09A4, r24	; 0x8009a4 <Sema_Gear_ratio_handle>
    1f30:	22 e6       	ldi	r18, 0x62	; 98
    1f32:	39 e0       	ldi	r19, 0x09	; 9
    1f34:	40 e0       	ldi	r20, 0x00	; 0
    1f36:	50 e0       	ldi	r21, 0x00	; 0
    1f38:	60 e0       	ldi	r22, 0x00	; 0
    1f3a:	81 e0       	ldi	r24, 0x01	; 1
    1f3c:	12 d5       	rcall	.+2596   	; 0x2962 <xQueueGenericCreateStatic>
    1f3e:	90 93 82 09 	sts	0x0982, r25	; 0x800982 <Sema_RPM_max_handle+0x1>
    1f42:	80 93 81 09 	sts	0x0981, r24	; 0x800981 <Sema_RPM_max_handle>
    1f46:	2f e3       	ldi	r18, 0x3F	; 63
    1f48:	39 e0       	ldi	r19, 0x09	; 9
    1f4a:	40 e0       	ldi	r20, 0x00	; 0
    1f4c:	50 e0       	ldi	r21, 0x00	; 0
    1f4e:	60 e0       	ldi	r22, 0x00	; 0
    1f50:	81 e0       	ldi	r24, 0x01	; 1
    1f52:	07 d5       	rcall	.+2574   	; 0x2962 <xQueueGenericCreateStatic>
    1f54:	90 93 5f 09 	sts	0x095F, r25	; 0x80095f <Sema_Conveyor_length_handle+0x1>
    1f58:	80 93 5e 09 	sts	0x095E, r24	; 0x80095e <Sema_Conveyor_length_handle>
    1f5c:	2c e1       	ldi	r18, 0x1C	; 28
    1f5e:	39 e0       	ldi	r19, 0x09	; 9
    1f60:	40 e0       	ldi	r20, 0x00	; 0
    1f62:	50 e0       	ldi	r21, 0x00	; 0
    1f64:	60 e0       	ldi	r22, 0x00	; 0
    1f66:	81 e0       	ldi	r24, 0x01	; 1
    1f68:	fc d4       	rcall	.+2552   	; 0x2962 <xQueueGenericCreateStatic>
    1f6a:	90 93 3c 09 	sts	0x093C, r25	; 0x80093c <Sema_Driver_diameter_handle+0x1>
    1f6e:	80 93 3b 09 	sts	0x093B, r24	; 0x80093b <Sema_Driver_diameter_handle>
    1f72:	29 ef       	ldi	r18, 0xF9	; 249
    1f74:	38 e0       	ldi	r19, 0x08	; 8
    1f76:	40 e0       	ldi	r20, 0x00	; 0
    1f78:	50 e0       	ldi	r21, 0x00	; 0
    1f7a:	60 e0       	ldi	r22, 0x00	; 0
    1f7c:	81 e0       	ldi	r24, 0x01	; 1
    1f7e:	f1 d4       	rcall	.+2530   	; 0x2962 <xQueueGenericCreateStatic>
    1f80:	90 93 19 09 	sts	0x0919, r25	; 0x800919 <Sema_Time_minute_handle+0x1>
    1f84:	80 93 18 09 	sts	0x0918, r24	; 0x800918 <Sema_Time_minute_handle>
    1f88:	26 ed       	ldi	r18, 0xD6	; 214
    1f8a:	38 e0       	ldi	r19, 0x08	; 8
    1f8c:	40 e0       	ldi	r20, 0x00	; 0
    1f8e:	50 e0       	ldi	r21, 0x00	; 0
    1f90:	60 e0       	ldi	r22, 0x00	; 0
    1f92:	81 e0       	ldi	r24, 0x01	; 1
    1f94:	e6 d4       	rcall	.+2508   	; 0x2962 <xQueueGenericCreateStatic>
    1f96:	90 93 f6 08 	sts	0x08F6, r25	; 0x8008f6 <Sema_Time_second_handle+0x1>
    1f9a:	80 93 f5 08 	sts	0x08F5, r24	; 0x8008f5 <Sema_Time_second_handle>
    1f9e:	0f 91       	pop	r16
    1fa0:	08 95       	ret

00001fa2 <RTE_set_Gear_ratio>:
    1fa2:	90 93 84 09 	sts	0x0984, r25	; 0x800984 <Gear_ratio+0x1>
    1fa6:	80 93 83 09 	sts	0x0983, r24	; 0x800983 <Gear_ratio>
    1faa:	20 e0       	ldi	r18, 0x00	; 0
    1fac:	40 e0       	ldi	r20, 0x00	; 0
    1fae:	50 e0       	ldi	r21, 0x00	; 0
    1fb0:	60 e0       	ldi	r22, 0x00	; 0
    1fb2:	70 e0       	ldi	r23, 0x00	; 0
    1fb4:	80 91 a4 09 	lds	r24, 0x09A4	; 0x8009a4 <Sema_Gear_ratio_handle>
    1fb8:	90 91 a5 09 	lds	r25, 0x09A5	; 0x8009a5 <Sema_Gear_ratio_handle+0x1>
    1fbc:	e7 c4       	rjmp	.+2510   	; 0x298c <xQueueGenericSend>
    1fbe:	08 95       	ret

00001fc0 <RTE_set_RPM_max>:
    1fc0:	90 93 61 09 	sts	0x0961, r25	; 0x800961 <RPM_max+0x1>
    1fc4:	80 93 60 09 	sts	0x0960, r24	; 0x800960 <RPM_max>
    1fc8:	20 e0       	ldi	r18, 0x00	; 0
    1fca:	40 e0       	ldi	r20, 0x00	; 0
    1fcc:	50 e0       	ldi	r21, 0x00	; 0
    1fce:	60 e0       	ldi	r22, 0x00	; 0
    1fd0:	70 e0       	ldi	r23, 0x00	; 0
    1fd2:	80 91 81 09 	lds	r24, 0x0981	; 0x800981 <Sema_RPM_max_handle>
    1fd6:	90 91 82 09 	lds	r25, 0x0982	; 0x800982 <Sema_RPM_max_handle+0x1>
    1fda:	d8 c4       	rjmp	.+2480   	; 0x298c <xQueueGenericSend>
    1fdc:	08 95       	ret

00001fde <RTE_get_RPM_max>:
    1fde:	6f ef       	ldi	r22, 0xFF	; 255
    1fe0:	7f ef       	ldi	r23, 0xFF	; 255
    1fe2:	80 91 81 09 	lds	r24, 0x0981	; 0x800981 <Sema_RPM_max_handle>
    1fe6:	90 91 82 09 	lds	r25, 0x0982	; 0x800982 <Sema_RPM_max_handle+0x1>
    1fea:	23 d6       	rcall	.+3142   	; 0x2c32 <xQueueSemaphoreTake>
    1fec:	80 91 60 09 	lds	r24, 0x0960	; 0x800960 <RPM_max>
    1ff0:	90 91 61 09 	lds	r25, 0x0961	; 0x800961 <RPM_max+0x1>
    1ff4:	08 95       	ret

00001ff6 <RTE_set_Conveyor_length>:
    1ff6:	90 93 3e 09 	sts	0x093E, r25	; 0x80093e <Conveyor_length+0x1>
    1ffa:	80 93 3d 09 	sts	0x093D, r24	; 0x80093d <Conveyor_length>
    1ffe:	20 e0       	ldi	r18, 0x00	; 0
    2000:	40 e0       	ldi	r20, 0x00	; 0
    2002:	50 e0       	ldi	r21, 0x00	; 0
    2004:	60 e0       	ldi	r22, 0x00	; 0
    2006:	70 e0       	ldi	r23, 0x00	; 0
    2008:	80 91 5e 09 	lds	r24, 0x095E	; 0x80095e <Sema_Conveyor_length_handle>
    200c:	90 91 5f 09 	lds	r25, 0x095F	; 0x80095f <Sema_Conveyor_length_handle+0x1>
    2010:	bd c4       	rjmp	.+2426   	; 0x298c <xQueueGenericSend>
    2012:	08 95       	ret

00002014 <RTE_set_Driver_diameter>:
    2014:	90 93 1b 09 	sts	0x091B, r25	; 0x80091b <Driver_diameter+0x1>
    2018:	80 93 1a 09 	sts	0x091A, r24	; 0x80091a <Driver_diameter>
    201c:	20 e0       	ldi	r18, 0x00	; 0
    201e:	40 e0       	ldi	r20, 0x00	; 0
    2020:	50 e0       	ldi	r21, 0x00	; 0
    2022:	60 e0       	ldi	r22, 0x00	; 0
    2024:	70 e0       	ldi	r23, 0x00	; 0
    2026:	80 91 3b 09 	lds	r24, 0x093B	; 0x80093b <Sema_Driver_diameter_handle>
    202a:	90 91 3c 09 	lds	r25, 0x093C	; 0x80093c <Sema_Driver_diameter_handle+0x1>
    202e:	ae c4       	rjmp	.+2396   	; 0x298c <xQueueGenericSend>
    2030:	08 95       	ret

00002032 <RTE_set_Time_minute>:
    2032:	90 93 f8 08 	sts	0x08F8, r25	; 0x8008f8 <Time_minute+0x1>
    2036:	80 93 f7 08 	sts	0x08F7, r24	; 0x8008f7 <Time_minute>
    203a:	20 e0       	ldi	r18, 0x00	; 0
    203c:	40 e0       	ldi	r20, 0x00	; 0
    203e:	50 e0       	ldi	r21, 0x00	; 0
    2040:	60 e0       	ldi	r22, 0x00	; 0
    2042:	70 e0       	ldi	r23, 0x00	; 0
    2044:	80 91 18 09 	lds	r24, 0x0918	; 0x800918 <Sema_Time_minute_handle>
    2048:	90 91 19 09 	lds	r25, 0x0919	; 0x800919 <Sema_Time_minute_handle+0x1>
    204c:	9f c4       	rjmp	.+2366   	; 0x298c <xQueueGenericSend>
    204e:	08 95       	ret

00002050 <RTE_set_Time_second>:

void RTE_set_Time_second(uint16_t u16Timesecond){
	Time_second = u16Timesecond;
    2050:	90 93 d5 08 	sts	0x08D5, r25	; 0x8008d5 <Time_second+0x1>
    2054:	80 93 d4 08 	sts	0x08D4, r24	; 0x8008d4 <Time_second>
	xSemaphoreGive(Sema_Time_second_handle);
    2058:	20 e0       	ldi	r18, 0x00	; 0
    205a:	40 e0       	ldi	r20, 0x00	; 0
    205c:	50 e0       	ldi	r21, 0x00	; 0
    205e:	60 e0       	ldi	r22, 0x00	; 0
    2060:	70 e0       	ldi	r23, 0x00	; 0
    2062:	80 91 f5 08 	lds	r24, 0x08F5	; 0x8008f5 <Sema_Time_second_handle>
    2066:	90 91 f6 08 	lds	r25, 0x08F6	; 0x8008f6 <Sema_Time_second_handle+0x1>
    206a:	90 c4       	rjmp	.+2336   	; 0x298c <xQueueGenericSend>
    206c:	08 95       	ret

0000206e <RTE_levels_init>:

static SemaphoreHandle_t Sema_blancher_level_handle;
static StaticSemaphore_t Sema_blancher_level_Buffer;
static uint16_t blancher_level;

void RTE_levels_init(void){
    206e:	0f 93       	push	r16
	Sema_tank_level_handle = xSemaphoreCreateBinaryStatic(&Sema_tank_level_Buffer);
    2070:	03 e0       	ldi	r16, 0x03	; 3
    2072:	27 ec       	ldi	r18, 0xC7	; 199
    2074:	39 e0       	ldi	r19, 0x09	; 9
    2076:	40 e0       	ldi	r20, 0x00	; 0
    2078:	50 e0       	ldi	r21, 0x00	; 0
    207a:	60 e0       	ldi	r22, 0x00	; 0
    207c:	81 e0       	ldi	r24, 0x01	; 1
    207e:	71 d4       	rcall	.+2274   	; 0x2962 <xQueueGenericCreateStatic>
    2080:	90 93 e7 09 	sts	0x09E7, r25	; 0x8009e7 <Sema_tank_level_handle+0x1>
    2084:	80 93 e6 09 	sts	0x09E6, r24	; 0x8009e6 <Sema_tank_level_handle>
	Sema_blancher_level_handle = xSemaphoreCreateBinaryStatic(&Sema_blancher_level_Buffer);
    2088:	26 ea       	ldi	r18, 0xA6	; 166
    208a:	39 e0       	ldi	r19, 0x09	; 9
    208c:	40 e0       	ldi	r20, 0x00	; 0
    208e:	50 e0       	ldi	r21, 0x00	; 0
    2090:	60 e0       	ldi	r22, 0x00	; 0
    2092:	81 e0       	ldi	r24, 0x01	; 1
    2094:	66 d4       	rcall	.+2252   	; 0x2962 <xQueueGenericCreateStatic>
    2096:	90 93 c6 09 	sts	0x09C6, r25	; 0x8009c6 <Sema_blancher_level_handle+0x1>
    209a:	80 93 c5 09 	sts	0x09C5, r24	; 0x8009c5 <Sema_blancher_level_handle>
}
    209e:	0f 91       	pop	r16
    20a0:	08 95       	ret

000020a2 <RTE_init>:
#include "RTE_levels.h"
#include "RTE_temperature.h"
#include "RTE_main.h"

void RTE_init(void){
	RTE_encoder_init();
    20a2:	33 df       	rcall	.-410    	; 0x1f0a <RTE_encoder_init>
	RTE_invertersetting_init();
    20a4:	38 df       	rcall	.-400    	; 0x1f16 <RTE_invertersetting_init>
	RTE_operations_init();
    20a6:	03 d0       	rcall	.+6      	; 0x20ae <RTE_operations_init>
	RTE_levels_init();
    20a8:	e2 df       	rcall	.-60     	; 0x206e <RTE_levels_init>
    20aa:	6d c0       	rjmp	.+218    	; 0x2186 <RTE_temperature_init>
	RTE_temperature_init();
    20ac:	08 95       	ret

000020ae <RTE_operations_init>:
    20ae:	0f 93       	push	r16
    20b0:	03 e0       	ldi	r16, 0x03	; 3
}

uint16_t RTE_get_Wash_Operation(void){
	xSemaphoreTake(Sema_Wash_Operation_handle,portMAX_DELAY);
	return Wash_Operation;
}
    20b2:	23 e5       	ldi	r18, 0x53	; 83
    20b4:	3a e0       	ldi	r19, 0x0A	; 10
    20b6:	40 e0       	ldi	r20, 0x00	; 0
    20b8:	50 e0       	ldi	r21, 0x00	; 0
    20ba:	60 e0       	ldi	r22, 0x00	; 0
    20bc:	81 e0       	ldi	r24, 0x01	; 1
    20be:	51 d4       	rcall	.+2210   	; 0x2962 <xQueueGenericCreateStatic>
    20c0:	90 93 73 0a 	sts	0x0A73, r25	; 0x800a73 <Sema_System_on_handle+0x1>
    20c4:	80 93 72 0a 	sts	0x0A72, r24	; 0x800a72 <Sema_System_on_handle>
    20c8:	20 e3       	ldi	r18, 0x30	; 48
    20ca:	3a e0       	ldi	r19, 0x0A	; 10
    20cc:	40 e0       	ldi	r20, 0x00	; 0
    20ce:	50 e0       	ldi	r21, 0x00	; 0
    20d0:	60 e0       	ldi	r22, 0x00	; 0
    20d2:	81 e0       	ldi	r24, 0x01	; 1
    20d4:	46 d4       	rcall	.+2188   	; 0x2962 <xQueueGenericCreateStatic>
    20d6:	90 93 50 0a 	sts	0x0A50, r25	; 0x800a50 <Sema_Start_blancher_Operation_handle+0x1>
    20da:	80 93 4f 0a 	sts	0x0A4F, r24	; 0x800a4f <Sema_Start_blancher_Operation_handle>
    20de:	2d e0       	ldi	r18, 0x0D	; 13
    20e0:	3a e0       	ldi	r19, 0x0A	; 10
    20e2:	40 e0       	ldi	r20, 0x00	; 0
    20e4:	50 e0       	ldi	r21, 0x00	; 0
    20e6:	60 e0       	ldi	r22, 0x00	; 0
    20e8:	81 e0       	ldi	r24, 0x01	; 1
    20ea:	3b d4       	rcall	.+2166   	; 0x2962 <xQueueGenericCreateStatic>
    20ec:	90 93 2d 0a 	sts	0x0A2D, r25	; 0x800a2d <Sema_Wash_Operation_handle+0x1>
    20f0:	80 93 2c 0a 	sts	0x0A2C, r24	; 0x800a2c <Sema_Wash_Operation_handle>
    20f4:	2a ee       	ldi	r18, 0xEA	; 234
    20f6:	39 e0       	ldi	r19, 0x09	; 9
    20f8:	40 e0       	ldi	r20, 0x00	; 0
    20fa:	50 e0       	ldi	r21, 0x00	; 0
    20fc:	60 e0       	ldi	r22, 0x00	; 0
    20fe:	81 e0       	ldi	r24, 0x01	; 1
    2100:	30 d4       	rcall	.+2144   	; 0x2962 <xQueueGenericCreateStatic>
    2102:	90 93 0a 0a 	sts	0x0A0A, r25	; 0x800a0a <Sema_Tank_Calibration_Operation_handle+0x1>
    2106:	80 93 09 0a 	sts	0x0A09, r24	; 0x800a09 <Sema_Tank_Calibration_Operation_handle>
    210a:	0f 91       	pop	r16
    210c:	08 95       	ret

0000210e <RTE_set_System_on>:
    210e:	90 93 52 0a 	sts	0x0A52, r25	; 0x800a52 <System_on+0x1>
    2112:	80 93 51 0a 	sts	0x0A51, r24	; 0x800a51 <System_on>
    2116:	20 e0       	ldi	r18, 0x00	; 0
    2118:	40 e0       	ldi	r20, 0x00	; 0
    211a:	50 e0       	ldi	r21, 0x00	; 0
    211c:	60 e0       	ldi	r22, 0x00	; 0
    211e:	70 e0       	ldi	r23, 0x00	; 0
    2120:	80 91 72 0a 	lds	r24, 0x0A72	; 0x800a72 <Sema_System_on_handle>
    2124:	90 91 73 0a 	lds	r25, 0x0A73	; 0x800a73 <Sema_System_on_handle+0x1>
    2128:	31 c4       	rjmp	.+2146   	; 0x298c <xQueueGenericSend>
    212a:	08 95       	ret

0000212c <RTE_set_Start_blancher_Operation>:
    212c:	90 93 2f 0a 	sts	0x0A2F, r25	; 0x800a2f <Start_blancher_Operation+0x1>
    2130:	80 93 2e 0a 	sts	0x0A2E, r24	; 0x800a2e <Start_blancher_Operation>
    2134:	20 e0       	ldi	r18, 0x00	; 0
    2136:	40 e0       	ldi	r20, 0x00	; 0
    2138:	50 e0       	ldi	r21, 0x00	; 0
    213a:	60 e0       	ldi	r22, 0x00	; 0
    213c:	70 e0       	ldi	r23, 0x00	; 0
    213e:	80 91 4f 0a 	lds	r24, 0x0A4F	; 0x800a4f <Sema_Start_blancher_Operation_handle>
    2142:	90 91 50 0a 	lds	r25, 0x0A50	; 0x800a50 <Sema_Start_blancher_Operation_handle+0x1>
    2146:	22 c4       	rjmp	.+2116   	; 0x298c <xQueueGenericSend>
    2148:	08 95       	ret

0000214a <RTE_set_Wash_Operation>:
    214a:	90 93 0c 0a 	sts	0x0A0C, r25	; 0x800a0c <Wash_Operation+0x1>
    214e:	80 93 0b 0a 	sts	0x0A0B, r24	; 0x800a0b <Wash_Operation>
    2152:	20 e0       	ldi	r18, 0x00	; 0
    2154:	40 e0       	ldi	r20, 0x00	; 0
    2156:	50 e0       	ldi	r21, 0x00	; 0
    2158:	60 e0       	ldi	r22, 0x00	; 0
    215a:	70 e0       	ldi	r23, 0x00	; 0
    215c:	80 91 2c 0a 	lds	r24, 0x0A2C	; 0x800a2c <Sema_Wash_Operation_handle>
    2160:	90 91 2d 0a 	lds	r25, 0x0A2D	; 0x800a2d <Sema_Wash_Operation_handle+0x1>
    2164:	13 c4       	rjmp	.+2086   	; 0x298c <xQueueGenericSend>
    2166:	08 95       	ret

00002168 <RTE_set_Tank_Calibration_Operation>:




void RTE_set_Tank_Calibration_Operation(uint16_t u16Tank_Calibration_Operation){
	Tank_Calibration_Operation = u16Tank_Calibration_Operation;
    2168:	90 93 e9 09 	sts	0x09E9, r25	; 0x8009e9 <Tank_Calibration_Operation+0x1>
    216c:	80 93 e8 09 	sts	0x09E8, r24	; 0x8009e8 <Tank_Calibration_Operation>
	xSemaphoreGive(Sema_Tank_Calibration_Operation_handle);
    2170:	20 e0       	ldi	r18, 0x00	; 0
    2172:	40 e0       	ldi	r20, 0x00	; 0
    2174:	50 e0       	ldi	r21, 0x00	; 0
    2176:	60 e0       	ldi	r22, 0x00	; 0
    2178:	70 e0       	ldi	r23, 0x00	; 0
    217a:	80 91 09 0a 	lds	r24, 0x0A09	; 0x800a09 <Sema_Tank_Calibration_Operation_handle>
    217e:	90 91 0a 0a 	lds	r25, 0x0A0A	; 0x800a0a <Sema_Tank_Calibration_Operation_handle+0x1>
    2182:	04 c4       	rjmp	.+2056   	; 0x298c <xQueueGenericSend>
    2184:	08 95       	ret

00002186 <RTE_temperature_init>:
}

uint16_t RTE_get_Negative_offset_temperature(void){
	xSemaphoreTake(Sema_Negative_offset_temp_handle,portMAX_DELAY);
	return Negative_offset_temp;
}
    2186:	0f 93       	push	r16
    2188:	03 e0       	ldi	r16, 0x03	; 3
    218a:	28 e4       	ldi	r18, 0x48	; 72
    218c:	3b e0       	ldi	r19, 0x0B	; 11
    218e:	40 e0       	ldi	r20, 0x00	; 0
    2190:	50 e0       	ldi	r21, 0x00	; 0
    2192:	60 e0       	ldi	r22, 0x00	; 0
    2194:	81 e0       	ldi	r24, 0x01	; 1
    2196:	e5 d3       	rcall	.+1994   	; 0x2962 <xQueueGenericCreateStatic>
    2198:	90 93 68 0b 	sts	0x0B68, r25	; 0x800b68 <Sema_Sleep_temp_handle+0x1>
    219c:	80 93 67 0b 	sts	0x0B67, r24	; 0x800b67 <Sema_Sleep_temp_handle>
    21a0:	25 e2       	ldi	r18, 0x25	; 37
    21a2:	3b e0       	ldi	r19, 0x0B	; 11
    21a4:	40 e0       	ldi	r20, 0x00	; 0
    21a6:	50 e0       	ldi	r21, 0x00	; 0
    21a8:	60 e0       	ldi	r22, 0x00	; 0
    21aa:	81 e0       	ldi	r24, 0x01	; 1
    21ac:	da d3       	rcall	.+1972   	; 0x2962 <xQueueGenericCreateStatic>
    21ae:	90 93 45 0b 	sts	0x0B45, r25	; 0x800b45 <Sema_Set_temp_handle+0x1>
    21b2:	80 93 44 0b 	sts	0x0B44, r24	; 0x800b44 <Sema_Set_temp_handle>
    21b6:	22 e0       	ldi	r18, 0x02	; 2
    21b8:	3b e0       	ldi	r19, 0x0B	; 11
    21ba:	40 e0       	ldi	r20, 0x00	; 0
    21bc:	50 e0       	ldi	r21, 0x00	; 0
    21be:	60 e0       	ldi	r22, 0x00	; 0
    21c0:	81 e0       	ldi	r24, 0x01	; 1
    21c2:	cf d3       	rcall	.+1950   	; 0x2962 <xQueueGenericCreateStatic>
    21c4:	90 93 22 0b 	sts	0x0B22, r25	; 0x800b22 <Sema_threshold_set_temp_handle+0x1>
    21c8:	80 93 21 0b 	sts	0x0B21, r24	; 0x800b21 <Sema_threshold_set_temp_handle>
    21cc:	2f ed       	ldi	r18, 0xDF	; 223
    21ce:	3a e0       	ldi	r19, 0x0A	; 10
    21d0:	40 e0       	ldi	r20, 0x00	; 0
    21d2:	50 e0       	ldi	r21, 0x00	; 0
    21d4:	60 e0       	ldi	r22, 0x00	; 0
    21d6:	81 e0       	ldi	r24, 0x01	; 1
    21d8:	c4 d3       	rcall	.+1928   	; 0x2962 <xQueueGenericCreateStatic>
    21da:	90 93 ff 0a 	sts	0x0AFF, r25	; 0x800aff <Sema_threshold_sleep_temp_handle+0x1>
    21de:	80 93 fe 0a 	sts	0x0AFE, r24	; 0x800afe <Sema_threshold_sleep_temp_handle>
    21e2:	2c eb       	ldi	r18, 0xBC	; 188
    21e4:	3a e0       	ldi	r19, 0x0A	; 10
    21e6:	40 e0       	ldi	r20, 0x00	; 0
    21e8:	50 e0       	ldi	r21, 0x00	; 0
    21ea:	60 e0       	ldi	r22, 0x00	; 0
    21ec:	81 e0       	ldi	r24, 0x01	; 1
    21ee:	b9 d3       	rcall	.+1906   	; 0x2962 <xQueueGenericCreateStatic>
    21f0:	90 93 dc 0a 	sts	0x0ADC, r25	; 0x800adc <Sema_Positive_offset_temp_handle+0x1>
    21f4:	80 93 db 0a 	sts	0x0ADB, r24	; 0x800adb <Sema_Positive_offset_temp_handle>
    21f8:	29 e9       	ldi	r18, 0x99	; 153
    21fa:	3a e0       	ldi	r19, 0x0A	; 10
    21fc:	40 e0       	ldi	r20, 0x00	; 0
    21fe:	50 e0       	ldi	r21, 0x00	; 0
    2200:	60 e0       	ldi	r22, 0x00	; 0
    2202:	81 e0       	ldi	r24, 0x01	; 1
    2204:	ae d3       	rcall	.+1884   	; 0x2962 <xQueueGenericCreateStatic>
    2206:	90 93 b9 0a 	sts	0x0AB9, r25	; 0x800ab9 <Sema_Negative_offset_temp_handle+0x1>
    220a:	80 93 b8 0a 	sts	0x0AB8, r24	; 0x800ab8 <Sema_Negative_offset_temp_handle>
    220e:	26 e7       	ldi	r18, 0x76	; 118
    2210:	3a e0       	ldi	r19, 0x0A	; 10
    2212:	40 e0       	ldi	r20, 0x00	; 0
    2214:	50 e0       	ldi	r21, 0x00	; 0
    2216:	60 e0       	ldi	r22, 0x00	; 0
    2218:	81 e0       	ldi	r24, 0x01	; 1
    221a:	a3 d3       	rcall	.+1862   	; 0x2962 <xQueueGenericCreateStatic>
    221c:	90 93 96 0a 	sts	0x0A96, r25	; 0x800a96 <Sema_APP_current_temp_handle+0x1>
    2220:	80 93 95 0a 	sts	0x0A95, r24	; 0x800a95 <Sema_APP_current_temp_handle>
    2224:	0f 91       	pop	r16
    2226:	08 95       	ret

00002228 <RTE_set_Sleep_temperature>:
    2228:	90 93 47 0b 	sts	0x0B47, r25	; 0x800b47 <Sleep_temp+0x1>
    222c:	80 93 46 0b 	sts	0x0B46, r24	; 0x800b46 <Sleep_temp>
    2230:	20 e0       	ldi	r18, 0x00	; 0
    2232:	40 e0       	ldi	r20, 0x00	; 0
    2234:	50 e0       	ldi	r21, 0x00	; 0
    2236:	60 e0       	ldi	r22, 0x00	; 0
    2238:	70 e0       	ldi	r23, 0x00	; 0
    223a:	80 91 67 0b 	lds	r24, 0x0B67	; 0x800b67 <Sema_Sleep_temp_handle>
    223e:	90 91 68 0b 	lds	r25, 0x0B68	; 0x800b68 <Sema_Sleep_temp_handle+0x1>
    2242:	a4 c3       	rjmp	.+1864   	; 0x298c <xQueueGenericSend>
    2244:	08 95       	ret

00002246 <RTE_set_Set_temperature>:
    2246:	90 93 24 0b 	sts	0x0B24, r25	; 0x800b24 <Set_temp+0x1>
    224a:	80 93 23 0b 	sts	0x0B23, r24	; 0x800b23 <Set_temp>
    224e:	20 e0       	ldi	r18, 0x00	; 0
    2250:	40 e0       	ldi	r20, 0x00	; 0
    2252:	50 e0       	ldi	r21, 0x00	; 0
    2254:	60 e0       	ldi	r22, 0x00	; 0
    2256:	70 e0       	ldi	r23, 0x00	; 0
    2258:	80 91 44 0b 	lds	r24, 0x0B44	; 0x800b44 <Sema_Set_temp_handle>
    225c:	90 91 45 0b 	lds	r25, 0x0B45	; 0x800b45 <Sema_Set_temp_handle+0x1>
    2260:	95 c3       	rjmp	.+1834   	; 0x298c <xQueueGenericSend>
    2262:	08 95       	ret

00002264 <RTE_set_Threshold_set_temperature>:
    2264:	90 93 01 0b 	sts	0x0B01, r25	; 0x800b01 <Threshold_set_temp+0x1>
    2268:	80 93 00 0b 	sts	0x0B00, r24	; 0x800b00 <Threshold_set_temp>
    226c:	20 e0       	ldi	r18, 0x00	; 0
    226e:	40 e0       	ldi	r20, 0x00	; 0
    2270:	50 e0       	ldi	r21, 0x00	; 0
    2272:	60 e0       	ldi	r22, 0x00	; 0
    2274:	70 e0       	ldi	r23, 0x00	; 0
    2276:	80 91 21 0b 	lds	r24, 0x0B21	; 0x800b21 <Sema_threshold_set_temp_handle>
    227a:	90 91 22 0b 	lds	r25, 0x0B22	; 0x800b22 <Sema_threshold_set_temp_handle+0x1>
    227e:	86 c3       	rjmp	.+1804   	; 0x298c <xQueueGenericSend>
    2280:	08 95       	ret

00002282 <RTE_set_Threshold_sleep_temperature>:
    2282:	90 93 de 0a 	sts	0x0ADE, r25	; 0x800ade <Threshold_sleep_temp+0x1>
    2286:	80 93 dd 0a 	sts	0x0ADD, r24	; 0x800add <Threshold_sleep_temp>
    228a:	20 e0       	ldi	r18, 0x00	; 0
    228c:	40 e0       	ldi	r20, 0x00	; 0
    228e:	50 e0       	ldi	r21, 0x00	; 0
    2290:	60 e0       	ldi	r22, 0x00	; 0
    2292:	70 e0       	ldi	r23, 0x00	; 0
    2294:	80 91 fe 0a 	lds	r24, 0x0AFE	; 0x800afe <Sema_threshold_sleep_temp_handle>
    2298:	90 91 ff 0a 	lds	r25, 0x0AFF	; 0x800aff <Sema_threshold_sleep_temp_handle+0x1>
    229c:	77 c3       	rjmp	.+1774   	; 0x298c <xQueueGenericSend>
    229e:	08 95       	ret

000022a0 <RTE_set_Positive_offset_temperature>:
    22a0:	90 93 bb 0a 	sts	0x0ABB, r25	; 0x800abb <Positive_offset_temp+0x1>
    22a4:	80 93 ba 0a 	sts	0x0ABA, r24	; 0x800aba <Positive_offset_temp>
    22a8:	20 e0       	ldi	r18, 0x00	; 0
    22aa:	40 e0       	ldi	r20, 0x00	; 0
    22ac:	50 e0       	ldi	r21, 0x00	; 0
    22ae:	60 e0       	ldi	r22, 0x00	; 0
    22b0:	70 e0       	ldi	r23, 0x00	; 0
    22b2:	80 91 db 0a 	lds	r24, 0x0ADB	; 0x800adb <Sema_Positive_offset_temp_handle>
    22b6:	90 91 dc 0a 	lds	r25, 0x0ADC	; 0x800adc <Sema_Positive_offset_temp_handle+0x1>
    22ba:	68 c3       	rjmp	.+1744   	; 0x298c <xQueueGenericSend>
    22bc:	08 95       	ret

000022be <RTE_set_Negative_offset_temperature>:
    22be:	90 93 98 0a 	sts	0x0A98, r25	; 0x800a98 <Negative_offset_temp+0x1>
    22c2:	80 93 97 0a 	sts	0x0A97, r24	; 0x800a97 <Negative_offset_temp>
    22c6:	20 e0       	ldi	r18, 0x00	; 0
    22c8:	40 e0       	ldi	r20, 0x00	; 0
    22ca:	50 e0       	ldi	r21, 0x00	; 0
    22cc:	60 e0       	ldi	r22, 0x00	; 0
    22ce:	70 e0       	ldi	r23, 0x00	; 0
    22d0:	80 91 b8 0a 	lds	r24, 0x0AB8	; 0x800ab8 <Sema_Negative_offset_temp_handle>
    22d4:	90 91 b9 0a 	lds	r25, 0x0AB9	; 0x800ab9 <Sema_Negative_offset_temp_handle+0x1>
    22d8:	59 c3       	rjmp	.+1714   	; 0x298c <xQueueGenericSend>
    22da:	08 95       	ret

000022dc <RTE_set_Current_temperature>:




void RTE_set_Current_temperature(uint16_t u16Currenttemp){
	Current_temperature = u16Currenttemp;
    22dc:	90 93 75 0a 	sts	0x0A75, r25	; 0x800a75 <Current_temperature+0x1>
    22e0:	80 93 74 0a 	sts	0x0A74, r24	; 0x800a74 <Current_temperature>
    22e4:	08 95       	ret

000022e6 <RTE_get_Current_temperature>:
}

uint16_t RTE_get_Current_temperature(void){
	return Current_temperature;
}
    22e6:	80 91 74 0a 	lds	r24, 0x0A74	; 0x800a74 <Current_temperature>
    22ea:	90 91 75 0a 	lds	r25, 0x0A75	; 0x800a75 <Current_temperature+0x1>
    22ee:	08 95       	ret

000022f0 <vApplicationStackOverflowHook>:
	   This routine will never return.
	   This routine is referenced in the task.c file of FreeRTOS as an extern.
	\*---------------------------------------------------------------------------*/

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
	DDRB  |= _BV(DDB7);
    22f0:	27 9a       	sbi	0x04, 7	; 4
	PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    22f2:	2f 9a       	sbi	0x05, 7	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    22f4:	2f ef       	ldi	r18, 0xFF	; 255
    22f6:	87 ea       	ldi	r24, 0xA7	; 167
    22f8:	91 e6       	ldi	r25, 0x61	; 97
    22fa:	21 50       	subi	r18, 0x01	; 1
    22fc:	80 40       	sbci	r24, 0x00	; 0
    22fe:	90 40       	sbci	r25, 0x00	; 0
    2300:	e1 f7       	brne	.-8      	; 0x22fa <vApplicationStackOverflowHook+0xa>
    2302:	00 c0       	rjmp	.+0      	; 0x2304 <vApplicationStackOverflowHook+0x14>
    2304:	00 00       	nop
	for(;;)
	{
		_delay_ms(2000);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
		PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED slow blink.
    2306:	1f 9a       	sbi	0x03, 7	; 3
    2308:	f5 cf       	rjmp	.-22     	; 0x22f4 <vApplicationStackOverflowHook+0x4>

0000230a <vApplicationGetIdleTaskMemory>:
                                    configSTACK_DEPTH_TYPE *pulIdleTaskStackSize )
{
    static StaticTask_t xIdleTaskTCB;
    static StackType_t uxIdleTaskStack[ configMINIMAL_STACK_SIZE ];

    *ppxIdleTaskTCBBuffer = &xIdleTaskTCB;
    230a:	2b e3       	ldi	r18, 0x3B	; 59
    230c:	3c e0       	ldi	r19, 0x0C	; 12
    230e:	fc 01       	movw	r30, r24
    2310:	31 83       	std	Z+1, r19	; 0x01
    2312:	20 83       	st	Z, r18
    *ppxIdleTaskStackBuffer = uxIdleTaskStack;
    2314:	86 ee       	ldi	r24, 0xE6	; 230
    2316:	9b e0       	ldi	r25, 0x0B	; 11
    2318:	fb 01       	movw	r30, r22
    231a:	91 83       	std	Z+1, r25	; 0x01
    231c:	80 83       	st	Z, r24
    *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
    231e:	85 e5       	ldi	r24, 0x55	; 85
    2320:	90 e0       	ldi	r25, 0x00	; 0
    2322:	fa 01       	movw	r30, r20
    2324:	91 83       	std	Z+1, r25	; 0x01
    2326:	80 83       	st	Z, r24
    2328:	08 95       	ret

0000232a <vApplicationGetTimerTaskMemory>:
                                     configSTACK_DEPTH_TYPE *pulTimerTaskStackSize )
{
    static StaticTask_t xTimerTaskTCB;
    static StackType_t uxTimerTaskStack[ configTIMER_TASK_STACK_DEPTH ];

    *ppxTimerTaskTCBBuffer = &xTimerTaskTCB;
    232a:	2e eb       	ldi	r18, 0xBE	; 190
    232c:	3b e0       	ldi	r19, 0x0B	; 11
    232e:	fc 01       	movw	r30, r24
    2330:	31 83       	std	Z+1, r19	; 0x01
    2332:	20 83       	st	Z, r18
    *ppxTimerTaskStackBuffer = uxTimerTaskStack;
    2334:	89 e6       	ldi	r24, 0x69	; 105
    2336:	9b e0       	ldi	r25, 0x0B	; 11
    2338:	fb 01       	movw	r30, r22
    233a:	91 83       	std	Z+1, r25	; 0x01
    233c:	80 83       	st	Z, r24
    *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
    233e:	85 e5       	ldi	r24, 0x55	; 85
    2340:	90 e0       	ldi	r25, 0x00	; 0
    2342:	fa 01       	movw	r30, r20
    2344:	91 83       	std	Z+1, r25	; 0x01
    2346:	80 83       	st	Z, r24
    2348:	08 95       	ret

0000234a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    234a:	fc 01       	movw	r30, r24
    /* The list structure contains a list item which is used to mark the
    end of the list.  To initialise the list the list end is inserted
    as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );            /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    234c:	03 96       	adiw	r24, 0x03	; 3
    234e:	92 83       	std	Z+2, r25	; 0x02
    2350:	81 83       	std	Z+1, r24	; 0x01

    /* The list end value is the highest possible value in the list to
    ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
    2352:	2f ef       	ldi	r18, 0xFF	; 255
    2354:	3f ef       	ldi	r19, 0xFF	; 255
    2356:	34 83       	std	Z+4, r19	; 0x04
    2358:	23 83       	std	Z+3, r18	; 0x03

    /* The list end next and previous pointers point to itself so we know
    when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );    /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    235a:	96 83       	std	Z+6, r25	; 0x06
    235c:	85 83       	std	Z+5, r24	; 0x05
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    235e:	90 87       	std	Z+8, r25	; 0x08
    2360:	87 83       	std	Z+7, r24	; 0x07

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    2362:	10 82       	st	Z, r1
    2364:	08 95       	ret

00002366 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
    2366:	fc 01       	movw	r30, r24
    2368:	11 86       	std	Z+9, r1	; 0x09
    236a:	10 86       	std	Z+8, r1	; 0x08
    236c:	08 95       	ret

0000236e <vListInsertEnd>:
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    236e:	cf 93       	push	r28
    2370:	df 93       	push	r29
    2372:	9c 01       	movw	r18, r24
    2374:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
    2376:	dc 01       	movw	r26, r24
    2378:	11 96       	adiw	r26, 0x01	; 1
    237a:	cd 91       	ld	r28, X+
    237c:	dc 91       	ld	r29, X
    237e:	12 97       	sbiw	r26, 0x02	; 2
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
    makes the new list item the last item to be removed by a call to
    listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
    2380:	d3 83       	std	Z+3, r29	; 0x03
    2382:	c2 83       	std	Z+2, r28	; 0x02
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    2384:	8c 81       	ldd	r24, Y+4	; 0x04
    2386:	9d 81       	ldd	r25, Y+5	; 0x05
    2388:	95 83       	std	Z+5, r25	; 0x05
    238a:	84 83       	std	Z+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
    238c:	8c 81       	ldd	r24, Y+4	; 0x04
    238e:	9d 81       	ldd	r25, Y+5	; 0x05
    2390:	dc 01       	movw	r26, r24
    2392:	13 96       	adiw	r26, 0x03	; 3
    2394:	7c 93       	st	X, r23
    2396:	6e 93       	st	-X, r22
    2398:	12 97       	sbiw	r26, 0x02	; 2
    pxIndex->pxPrevious = pxNewListItem;
    239a:	7d 83       	std	Y+5, r23	; 0x05
    239c:	6c 83       	std	Y+4, r22	; 0x04

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
    239e:	31 87       	std	Z+9, r19	; 0x09
    23a0:	20 87       	std	Z+8, r18	; 0x08

    ( pxList->uxNumberOfItems )++;
    23a2:	f9 01       	movw	r30, r18
    23a4:	80 81       	ld	r24, Z
    23a6:	8f 5f       	subi	r24, 0xFF	; 255
    23a8:	80 83       	st	Z, r24
}
    23aa:	df 91       	pop	r29
    23ac:	cf 91       	pop	r28
    23ae:	08 95       	ret

000023b0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    23b0:	cf 93       	push	r28
    23b2:	df 93       	push	r29
    23b4:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    23b6:	48 81       	ld	r20, Y
    23b8:	59 81       	ldd	r21, Y+1	; 0x01
    new list item should be placed after it.  This ensures that TCBs which are
    stored in ready lists (all of which have the same xItemValue value) get a
    share of the CPU.  However, if the xItemValue is the same as the back marker
    the iteration loop below will not end.  Therefore the value is checked
    first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
    23ba:	4f 3f       	cpi	r20, 0xFF	; 255
    23bc:	2f ef       	ldi	r18, 0xFF	; 255
    23be:	52 07       	cpc	r21, r18
    23c0:	21 f4       	brne	.+8      	; 0x23ca <vListInsert+0x1a>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
    23c2:	fc 01       	movw	r30, r24
    23c4:	a7 81       	ldd	r26, Z+7	; 0x07
    23c6:	b0 85       	ldd	r27, Z+8	; 0x08
    23c8:	0d c0       	rjmp	.+26     	; 0x23e4 <vListInsert+0x34>
            4) Using a queue or semaphore before it has been initialised or
               before the scheduler has been started (are interrupts firing
               before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
    23ca:	dc 01       	movw	r26, r24
    23cc:	13 96       	adiw	r26, 0x03	; 3
    23ce:	01 c0       	rjmp	.+2      	; 0x23d2 <vListInsert+0x22>
    23d0:	df 01       	movw	r26, r30
    23d2:	12 96       	adiw	r26, 0x02	; 2
    23d4:	ed 91       	ld	r30, X+
    23d6:	fc 91       	ld	r31, X
    23d8:	13 97       	sbiw	r26, 0x03	; 3
    23da:	20 81       	ld	r18, Z
    23dc:	31 81       	ldd	r19, Z+1	; 0x01
    23de:	42 17       	cp	r20, r18
    23e0:	53 07       	cpc	r21, r19
    23e2:	b0 f7       	brcc	.-20     	; 0x23d0 <vListInsert+0x20>
            /* There is nothing to do here, just iterating to the wanted
            insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
    23e4:	12 96       	adiw	r26, 0x02	; 2
    23e6:	ed 91       	ld	r30, X+
    23e8:	fc 91       	ld	r31, X
    23ea:	13 97       	sbiw	r26, 0x03	; 3
    23ec:	fb 83       	std	Y+3, r31	; 0x03
    23ee:	ea 83       	std	Y+2, r30	; 0x02
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    23f0:	d5 83       	std	Z+5, r29	; 0x05
    23f2:	c4 83       	std	Z+4, r28	; 0x04
    pxNewListItem->pxPrevious = pxIterator;
    23f4:	bd 83       	std	Y+5, r27	; 0x05
    23f6:	ac 83       	std	Y+4, r26	; 0x04
    pxIterator->pxNext = pxNewListItem;
    23f8:	13 96       	adiw	r26, 0x03	; 3
    23fa:	dc 93       	st	X, r29
    23fc:	ce 93       	st	-X, r28
    23fe:	12 97       	sbiw	r26, 0x02	; 2

    /* Remember which list the item is in.  This allows fast removal of the
    item later. */
    pxNewListItem->pxContainer = pxList;
    2400:	99 87       	std	Y+9, r25	; 0x09
    2402:	88 87       	std	Y+8, r24	; 0x08

    ( pxList->uxNumberOfItems )++;
    2404:	fc 01       	movw	r30, r24
    2406:	20 81       	ld	r18, Z
    2408:	2f 5f       	subi	r18, 0xFF	; 255
    240a:	20 83       	st	Z, r18
}
    240c:	df 91       	pop	r29
    240e:	cf 91       	pop	r28
    2410:	08 95       	ret

00002412 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    2412:	cf 93       	push	r28
    2414:	df 93       	push	r29
    2416:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
    2418:	a0 85       	ldd	r26, Z+8	; 0x08
    241a:	b1 85       	ldd	r27, Z+9	; 0x09

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    241c:	c2 81       	ldd	r28, Z+2	; 0x02
    241e:	d3 81       	ldd	r29, Z+3	; 0x03
    2420:	84 81       	ldd	r24, Z+4	; 0x04
    2422:	95 81       	ldd	r25, Z+5	; 0x05
    2424:	9d 83       	std	Y+5, r25	; 0x05
    2426:	8c 83       	std	Y+4, r24	; 0x04
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    2428:	c4 81       	ldd	r28, Z+4	; 0x04
    242a:	d5 81       	ldd	r29, Z+5	; 0x05
    242c:	82 81       	ldd	r24, Z+2	; 0x02
    242e:	93 81       	ldd	r25, Z+3	; 0x03
    2430:	9b 83       	std	Y+3, r25	; 0x03
    2432:	8a 83       	std	Y+2, r24	; 0x02

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
    2434:	11 96       	adiw	r26, 0x01	; 1
    2436:	8d 91       	ld	r24, X+
    2438:	9c 91       	ld	r25, X
    243a:	12 97       	sbiw	r26, 0x02	; 2
    243c:	e8 17       	cp	r30, r24
    243e:	f9 07       	cpc	r31, r25
    2440:	31 f4       	brne	.+12     	; 0x244e <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
    2442:	84 81       	ldd	r24, Z+4	; 0x04
    2444:	95 81       	ldd	r25, Z+5	; 0x05
    2446:	12 96       	adiw	r26, 0x02	; 2
    2448:	9c 93       	st	X, r25
    244a:	8e 93       	st	-X, r24
    244c:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
    244e:	11 86       	std	Z+9, r1	; 0x09
    2450:	10 86       	std	Z+8, r1	; 0x08
    ( pxList->uxNumberOfItems )--;
    2452:	8c 91       	ld	r24, X
    2454:	81 50       	subi	r24, 0x01	; 1
    2456:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
    2458:	8c 91       	ld	r24, X
}
    245a:	df 91       	pop	r29
    245c:	cf 91       	pop	r28
    245e:	08 95       	ret

00002460 <pxPortInitialiseStack>:
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
    2460:	31 e1       	ldi	r19, 0x11	; 17
    2462:	fc 01       	movw	r30, r24
    2464:	30 83       	st	Z, r19
    2466:	31 97       	sbiw	r30, 0x01	; 1
    2468:	22 e2       	ldi	r18, 0x22	; 34
    246a:	20 83       	st	Z, r18
    246c:	31 97       	sbiw	r30, 0x01	; 1
    246e:	a3 e3       	ldi	r26, 0x33	; 51
    2470:	a0 83       	st	Z, r26
    2472:	31 97       	sbiw	r30, 0x01	; 1
    2474:	60 83       	st	Z, r22
    2476:	31 97       	sbiw	r30, 0x01	; 1
    2478:	70 83       	st	Z, r23
    247a:	31 97       	sbiw	r30, 0x01	; 1
    247c:	10 82       	st	Z, r1
    247e:	31 97       	sbiw	r30, 0x01	; 1
    2480:	10 82       	st	Z, r1
    2482:	31 97       	sbiw	r30, 0x01	; 1
    2484:	60 e8       	ldi	r22, 0x80	; 128
    2486:	60 83       	st	Z, r22
    2488:	31 97       	sbiw	r30, 0x01	; 1
    248a:	10 82       	st	Z, r1
    248c:	31 97       	sbiw	r30, 0x01	; 1
    248e:	10 82       	st	Z, r1
    2490:	31 97       	sbiw	r30, 0x01	; 1
    2492:	10 82       	st	Z, r1
    2494:	31 97       	sbiw	r30, 0x01	; 1
    2496:	62 e0       	ldi	r22, 0x02	; 2
    2498:	60 83       	st	Z, r22
    249a:	31 97       	sbiw	r30, 0x01	; 1
    249c:	63 e0       	ldi	r22, 0x03	; 3
    249e:	60 83       	st	Z, r22
    24a0:	31 97       	sbiw	r30, 0x01	; 1
    24a2:	64 e0       	ldi	r22, 0x04	; 4
    24a4:	60 83       	st	Z, r22
    24a6:	31 97       	sbiw	r30, 0x01	; 1
    24a8:	65 e0       	ldi	r22, 0x05	; 5
    24aa:	60 83       	st	Z, r22
    24ac:	31 97       	sbiw	r30, 0x01	; 1
    24ae:	66 e0       	ldi	r22, 0x06	; 6
    24b0:	60 83       	st	Z, r22
    24b2:	31 97       	sbiw	r30, 0x01	; 1
    24b4:	67 e0       	ldi	r22, 0x07	; 7
    24b6:	60 83       	st	Z, r22
    24b8:	31 97       	sbiw	r30, 0x01	; 1
    24ba:	68 e0       	ldi	r22, 0x08	; 8
    24bc:	60 83       	st	Z, r22
    24be:	31 97       	sbiw	r30, 0x01	; 1
    24c0:	69 e0       	ldi	r22, 0x09	; 9
    24c2:	60 83       	st	Z, r22
    24c4:	31 97       	sbiw	r30, 0x01	; 1
    24c6:	60 e1       	ldi	r22, 0x10	; 16
    24c8:	60 83       	st	Z, r22
    24ca:	31 97       	sbiw	r30, 0x01	; 1
    24cc:	30 83       	st	Z, r19
    24ce:	31 97       	sbiw	r30, 0x01	; 1
    24d0:	32 e1       	ldi	r19, 0x12	; 18
    24d2:	30 83       	st	Z, r19
    24d4:	31 97       	sbiw	r30, 0x01	; 1
    24d6:	33 e1       	ldi	r19, 0x13	; 19
    24d8:	30 83       	st	Z, r19
    24da:	31 97       	sbiw	r30, 0x01	; 1
    24dc:	34 e1       	ldi	r19, 0x14	; 20
    24de:	30 83       	st	Z, r19
    24e0:	31 97       	sbiw	r30, 0x01	; 1
    24e2:	35 e1       	ldi	r19, 0x15	; 21
    24e4:	30 83       	st	Z, r19
    24e6:	31 97       	sbiw	r30, 0x01	; 1
    24e8:	36 e1       	ldi	r19, 0x16	; 22
    24ea:	30 83       	st	Z, r19
    24ec:	31 97       	sbiw	r30, 0x01	; 1
    24ee:	37 e1       	ldi	r19, 0x17	; 23
    24f0:	30 83       	st	Z, r19
    24f2:	31 97       	sbiw	r30, 0x01	; 1
    24f4:	38 e1       	ldi	r19, 0x18	; 24
    24f6:	30 83       	st	Z, r19
    24f8:	31 97       	sbiw	r30, 0x01	; 1
    24fa:	39 e1       	ldi	r19, 0x19	; 25
    24fc:	30 83       	st	Z, r19
    24fe:	31 97       	sbiw	r30, 0x01	; 1
    2500:	30 e2       	ldi	r19, 0x20	; 32
    2502:	30 83       	st	Z, r19
    2504:	31 97       	sbiw	r30, 0x01	; 1
    2506:	31 e2       	ldi	r19, 0x21	; 33
    2508:	30 83       	st	Z, r19
    250a:	31 97       	sbiw	r30, 0x01	; 1
    250c:	20 83       	st	Z, r18
    250e:	31 97       	sbiw	r30, 0x01	; 1
    2510:	23 e2       	ldi	r18, 0x23	; 35
    2512:	20 83       	st	Z, r18
    2514:	31 97       	sbiw	r30, 0x01	; 1
    2516:	40 83       	st	Z, r20
    2518:	31 97       	sbiw	r30, 0x01	; 1
    251a:	50 83       	st	Z, r21
    251c:	31 97       	sbiw	r30, 0x01	; 1
    251e:	26 e2       	ldi	r18, 0x26	; 38
    2520:	20 83       	st	Z, r18
    2522:	31 97       	sbiw	r30, 0x01	; 1
    2524:	27 e2       	ldi	r18, 0x27	; 39
    2526:	20 83       	st	Z, r18
    2528:	31 97       	sbiw	r30, 0x01	; 1
    252a:	28 e2       	ldi	r18, 0x28	; 40
    252c:	20 83       	st	Z, r18
    252e:	31 97       	sbiw	r30, 0x01	; 1
    2530:	29 e2       	ldi	r18, 0x29	; 41
    2532:	20 83       	st	Z, r18
    2534:	31 97       	sbiw	r30, 0x01	; 1
    2536:	20 e3       	ldi	r18, 0x30	; 48
    2538:	20 83       	st	Z, r18
    253a:	31 97       	sbiw	r30, 0x01	; 1
    253c:	21 e3       	ldi	r18, 0x31	; 49
    253e:	20 83       	st	Z, r18
    2540:	89 97       	sbiw	r24, 0x29	; 41
    2542:	08 95       	ret

00002544 <xPortStartScheduler>:
    2544:	a8 95       	wdr
    2546:	90 ec       	ldi	r25, 0xC0	; 192
    2548:	88 e1       	ldi	r24, 0x18	; 24
    254a:	0f b6       	in	r0, 0x3f	; 63
    254c:	f8 94       	cli
    254e:	a8 95       	wdr
    2550:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
    2554:	0f be       	out	0x3f, r0	; 63
    2556:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
    255a:	a0 91 bc 0c 	lds	r26, 0x0CBC	; 0x800cbc <pxCurrentTCB>
    255e:	b0 91 bd 0c 	lds	r27, 0x0CBD	; 0x800cbd <pxCurrentTCB+0x1>
    2562:	cd 91       	ld	r28, X+
    2564:	cd bf       	out	0x3d, r28	; 61
    2566:	dd 91       	ld	r29, X+
    2568:	de bf       	out	0x3e, r29	; 62
    256a:	ff 91       	pop	r31
    256c:	ef 91       	pop	r30
    256e:	df 91       	pop	r29
    2570:	cf 91       	pop	r28
    2572:	bf 91       	pop	r27
    2574:	af 91       	pop	r26
    2576:	9f 91       	pop	r25
    2578:	8f 91       	pop	r24
    257a:	7f 91       	pop	r23
    257c:	6f 91       	pop	r22
    257e:	5f 91       	pop	r21
    2580:	4f 91       	pop	r20
    2582:	3f 91       	pop	r19
    2584:	2f 91       	pop	r18
    2586:	1f 91       	pop	r17
    2588:	0f 91       	pop	r16
    258a:	ff 90       	pop	r15
    258c:	ef 90       	pop	r14
    258e:	df 90       	pop	r13
    2590:	cf 90       	pop	r12
    2592:	bf 90       	pop	r11
    2594:	af 90       	pop	r10
    2596:	9f 90       	pop	r9
    2598:	8f 90       	pop	r8
    259a:	7f 90       	pop	r7
    259c:	6f 90       	pop	r6
    259e:	5f 90       	pop	r5
    25a0:	4f 90       	pop	r4
    25a2:	3f 90       	pop	r3
    25a4:	2f 90       	pop	r2
    25a6:	1f 90       	pop	r1
    25a8:	0f 90       	pop	r0
    25aa:	0c be       	out	0x3c, r0	; 60
    25ac:	0f 90       	pop	r0
    25ae:	0b be       	out	0x3b, r0	; 59
    25b0:	0f 90       	pop	r0
    25b2:	0f be       	out	0x3f, r0	; 63
    25b4:	0f 90       	pop	r0
    25b6:	08 95       	ret
    25b8:	81 e0       	ldi	r24, 0x01	; 1
    25ba:	08 95       	ret

000025bc <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    25bc:	0f 92       	push	r0
    25be:	0f b6       	in	r0, 0x3f	; 63
    25c0:	f8 94       	cli
    25c2:	0f 92       	push	r0
    25c4:	0b b6       	in	r0, 0x3b	; 59
    25c6:	0f 92       	push	r0
    25c8:	0c b6       	in	r0, 0x3c	; 60
    25ca:	0f 92       	push	r0
    25cc:	1f 92       	push	r1
    25ce:	11 24       	eor	r1, r1
    25d0:	2f 92       	push	r2
    25d2:	3f 92       	push	r3
    25d4:	4f 92       	push	r4
    25d6:	5f 92       	push	r5
    25d8:	6f 92       	push	r6
    25da:	7f 92       	push	r7
    25dc:	8f 92       	push	r8
    25de:	9f 92       	push	r9
    25e0:	af 92       	push	r10
    25e2:	bf 92       	push	r11
    25e4:	cf 92       	push	r12
    25e6:	df 92       	push	r13
    25e8:	ef 92       	push	r14
    25ea:	ff 92       	push	r15
    25ec:	0f 93       	push	r16
    25ee:	1f 93       	push	r17
    25f0:	2f 93       	push	r18
    25f2:	3f 93       	push	r19
    25f4:	4f 93       	push	r20
    25f6:	5f 93       	push	r21
    25f8:	6f 93       	push	r22
    25fa:	7f 93       	push	r23
    25fc:	8f 93       	push	r24
    25fe:	9f 93       	push	r25
    2600:	af 93       	push	r26
    2602:	bf 93       	push	r27
    2604:	cf 93       	push	r28
    2606:	df 93       	push	r29
    2608:	ef 93       	push	r30
    260a:	ff 93       	push	r31
    260c:	a0 91 bc 0c 	lds	r26, 0x0CBC	; 0x800cbc <pxCurrentTCB>
    2610:	b0 91 bd 0c 	lds	r27, 0x0CBD	; 0x800cbd <pxCurrentTCB+0x1>
    2614:	0d b6       	in	r0, 0x3d	; 61
    2616:	0d 92       	st	X+, r0
    2618:	0e b6       	in	r0, 0x3e	; 62
    261a:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    261c:	cf d6       	rcall	.+3486   	; 0x33bc <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    261e:	a0 91 bc 0c 	lds	r26, 0x0CBC	; 0x800cbc <pxCurrentTCB>
    2622:	b0 91 bd 0c 	lds	r27, 0x0CBD	; 0x800cbd <pxCurrentTCB+0x1>
    2626:	cd 91       	ld	r28, X+
    2628:	cd bf       	out	0x3d, r28	; 61
    262a:	dd 91       	ld	r29, X+
    262c:	de bf       	out	0x3e, r29	; 62
    262e:	ff 91       	pop	r31
    2630:	ef 91       	pop	r30
    2632:	df 91       	pop	r29
    2634:	cf 91       	pop	r28
    2636:	bf 91       	pop	r27
    2638:	af 91       	pop	r26
    263a:	9f 91       	pop	r25
    263c:	8f 91       	pop	r24
    263e:	7f 91       	pop	r23
    2640:	6f 91       	pop	r22
    2642:	5f 91       	pop	r21
    2644:	4f 91       	pop	r20
    2646:	3f 91       	pop	r19
    2648:	2f 91       	pop	r18
    264a:	1f 91       	pop	r17
    264c:	0f 91       	pop	r16
    264e:	ff 90       	pop	r15
    2650:	ef 90       	pop	r14
    2652:	df 90       	pop	r13
    2654:	cf 90       	pop	r12
    2656:	bf 90       	pop	r11
    2658:	af 90       	pop	r10
    265a:	9f 90       	pop	r9
    265c:	8f 90       	pop	r8
    265e:	7f 90       	pop	r7
    2660:	6f 90       	pop	r6
    2662:	5f 90       	pop	r5
    2664:	4f 90       	pop	r4
    2666:	3f 90       	pop	r3
    2668:	2f 90       	pop	r2
    266a:	1f 90       	pop	r1
    266c:	0f 90       	pop	r0
    266e:	0c be       	out	0x3c, r0	; 60
    2670:	0f 90       	pop	r0
    2672:	0b be       	out	0x3b, r0	; 59
    2674:	0f 90       	pop	r0
    2676:	0f be       	out	0x3f, r0	; 63
    2678:	0f 90       	pop	r0

	__asm__ __volatile__ ( "ret" );
    267a:	08 95       	ret

0000267c <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    267c:	0f 92       	push	r0
    267e:	0f b6       	in	r0, 0x3f	; 63
    2680:	f8 94       	cli
    2682:	0f 92       	push	r0
    2684:	0b b6       	in	r0, 0x3b	; 59
    2686:	0f 92       	push	r0
    2688:	0c b6       	in	r0, 0x3c	; 60
    268a:	0f 92       	push	r0
    268c:	1f 92       	push	r1
    268e:	11 24       	eor	r1, r1
    2690:	2f 92       	push	r2
    2692:	3f 92       	push	r3
    2694:	4f 92       	push	r4
    2696:	5f 92       	push	r5
    2698:	6f 92       	push	r6
    269a:	7f 92       	push	r7
    269c:	8f 92       	push	r8
    269e:	9f 92       	push	r9
    26a0:	af 92       	push	r10
    26a2:	bf 92       	push	r11
    26a4:	cf 92       	push	r12
    26a6:	df 92       	push	r13
    26a8:	ef 92       	push	r14
    26aa:	ff 92       	push	r15
    26ac:	0f 93       	push	r16
    26ae:	1f 93       	push	r17
    26b0:	2f 93       	push	r18
    26b2:	3f 93       	push	r19
    26b4:	4f 93       	push	r20
    26b6:	5f 93       	push	r21
    26b8:	6f 93       	push	r22
    26ba:	7f 93       	push	r23
    26bc:	8f 93       	push	r24
    26be:	9f 93       	push	r25
    26c0:	af 93       	push	r26
    26c2:	bf 93       	push	r27
    26c4:	cf 93       	push	r28
    26c6:	df 93       	push	r29
    26c8:	ef 93       	push	r30
    26ca:	ff 93       	push	r31
    26cc:	a0 91 bc 0c 	lds	r26, 0x0CBC	; 0x800cbc <pxCurrentTCB>
    26d0:	b0 91 bd 0c 	lds	r27, 0x0CBD	; 0x800cbd <pxCurrentTCB+0x1>
    26d4:	0d b6       	in	r0, 0x3d	; 61
    26d6:	0d 92       	st	X+, r0
    26d8:	0e b6       	in	r0, 0x3e	; 62
    26da:	0d 92       	st	X+, r0

	sleep_reset();		//	 reset the sleep_mode() faster than sleep_disable();
    26dc:	13 be       	out	0x33, r1	; 51

	if( xTaskIncrementTick() != pdFALSE )
    26de:	2e d5       	rcall	.+2652   	; 0x313c <xTaskIncrementTick>
    26e0:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
    26e2:	6c d6       	rcall	.+3288   	; 0x33bc <vTaskSwitchContext>
    26e4:	a0 91 bc 0c 	lds	r26, 0x0CBC	; 0x800cbc <pxCurrentTCB>
	}

	portRESTORE_CONTEXT();
    26e8:	b0 91 bd 0c 	lds	r27, 0x0CBD	; 0x800cbd <pxCurrentTCB+0x1>
    26ec:	cd 91       	ld	r28, X+
    26ee:	cd bf       	out	0x3d, r28	; 61
    26f0:	dd 91       	ld	r29, X+
    26f2:	de bf       	out	0x3e, r29	; 62
    26f4:	ff 91       	pop	r31
    26f6:	ef 91       	pop	r30
    26f8:	df 91       	pop	r29
    26fa:	cf 91       	pop	r28
    26fc:	bf 91       	pop	r27
    26fe:	af 91       	pop	r26
    2700:	9f 91       	pop	r25
    2702:	8f 91       	pop	r24
    2704:	7f 91       	pop	r23
    2706:	6f 91       	pop	r22
    2708:	5f 91       	pop	r21
    270a:	4f 91       	pop	r20
    270c:	3f 91       	pop	r19
    270e:	2f 91       	pop	r18
    2710:	1f 91       	pop	r17
    2712:	0f 91       	pop	r16
    2714:	ff 90       	pop	r15
    2716:	ef 90       	pop	r14
    2718:	df 90       	pop	r13
    271a:	cf 90       	pop	r12
    271c:	bf 90       	pop	r11
    271e:	af 90       	pop	r10
    2720:	9f 90       	pop	r9
    2722:	8f 90       	pop	r8
    2724:	7f 90       	pop	r7
    2726:	6f 90       	pop	r6
    2728:	5f 90       	pop	r5
    272a:	4f 90       	pop	r4
    272c:	3f 90       	pop	r3
    272e:	2f 90       	pop	r2
    2730:	1f 90       	pop	r1
    2732:	0f 90       	pop	r0
    2734:	0c be       	out	0x3c, r0	; 60
    2736:	0f 90       	pop	r0
    2738:	0b be       	out	0x3b, r0	; 59
    273a:	0f 90       	pop	r0
    273c:	0f be       	out	0x3f, r0	; 63
    273e:	0f 90       	pop	r0
    2740:	08 95       	ret

00002742 <__vector_12>:

	__asm__ __volatile__ ( "ret" );
    2742:	9c df       	rcall	.-200    	; 0x267c <vPortYieldFromTick>
//	ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
	ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
	ISR(portSCHEDULER_ISR)
	{
		vPortYieldFromTick();
		__asm__ __volatile__ ( "reti" );
    2744:	18 95       	reti

00002746 <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    2746:	0f b6       	in	r0, 0x3f	; 63
    2748:	f8 94       	cli
    274a:	0f 92       	push	r0
    274c:	fc 01       	movw	r30, r24
    274e:	92 8d       	ldd	r25, Z+26	; 0x1a
    2750:	0f 90       	pop	r0
    2752:	0f be       	out	0x3f, r0	; 63
    2754:	81 e0       	ldi	r24, 0x01	; 1
    2756:	91 11       	cpse	r25, r1
    2758:	80 e0       	ldi	r24, 0x00	; 0
    275a:	08 95       	ret

0000275c <prvCopyDataToQueue>:
    275c:	0f 93       	push	r16
    275e:	1f 93       	push	r17
    2760:	cf 93       	push	r28
    2762:	df 93       	push	r29
    2764:	ec 01       	movw	r28, r24
    2766:	04 2f       	mov	r16, r20
    2768:	1a 8d       	ldd	r17, Y+26	; 0x1a
    276a:	4c 8d       	ldd	r20, Y+28	; 0x1c
    276c:	41 11       	cpse	r20, r1
    276e:	0b c0       	rjmp	.+22     	; 0x2786 <prvCopyDataToQueue+0x2a>
    2770:	88 81       	ld	r24, Y
    2772:	99 81       	ldd	r25, Y+1	; 0x01
    2774:	89 2b       	or	r24, r25
    2776:	09 f0       	breq	.+2      	; 0x277a <prvCopyDataToQueue+0x1e>
    2778:	41 c0       	rjmp	.+130    	; 0x27fc <prvCopyDataToQueue+0xa0>
    277a:	8c 81       	ldd	r24, Y+4	; 0x04
    277c:	9d 81       	ldd	r25, Y+5	; 0x05
    277e:	ca d7       	rcall	.+3988   	; 0x3714 <xTaskPriorityDisinherit>
    2780:	1d 82       	std	Y+5, r1	; 0x05
    2782:	1c 82       	std	Y+4, r1	; 0x04
    2784:	42 c0       	rjmp	.+132    	; 0x280a <prvCopyDataToQueue+0xae>
    2786:	01 11       	cpse	r16, r1
    2788:	17 c0       	rjmp	.+46     	; 0x27b8 <prvCopyDataToQueue+0x5c>
    278a:	50 e0       	ldi	r21, 0x00	; 0
    278c:	8a 81       	ldd	r24, Y+2	; 0x02
    278e:	9b 81       	ldd	r25, Y+3	; 0x03
    2790:	0e 94 6b 1f 	call	0x3ed6	; 0x3ed6 <memcpy>
    2794:	2c 8d       	ldd	r18, Y+28	; 0x1c
    2796:	8a 81       	ldd	r24, Y+2	; 0x02
    2798:	9b 81       	ldd	r25, Y+3	; 0x03
    279a:	82 0f       	add	r24, r18
    279c:	91 1d       	adc	r25, r1
    279e:	9b 83       	std	Y+3, r25	; 0x03
    27a0:	8a 83       	std	Y+2, r24	; 0x02
    27a2:	2c 81       	ldd	r18, Y+4	; 0x04
    27a4:	3d 81       	ldd	r19, Y+5	; 0x05
    27a6:	82 17       	cp	r24, r18
    27a8:	93 07       	cpc	r25, r19
    27aa:	50 f1       	brcs	.+84     	; 0x2800 <prvCopyDataToQueue+0xa4>
    27ac:	88 81       	ld	r24, Y
    27ae:	99 81       	ldd	r25, Y+1	; 0x01
    27b0:	9b 83       	std	Y+3, r25	; 0x03
    27b2:	8a 83       	std	Y+2, r24	; 0x02
    27b4:	80 e0       	ldi	r24, 0x00	; 0
    27b6:	29 c0       	rjmp	.+82     	; 0x280a <prvCopyDataToQueue+0xae>
    27b8:	50 e0       	ldi	r21, 0x00	; 0
    27ba:	8e 81       	ldd	r24, Y+6	; 0x06
    27bc:	9f 81       	ldd	r25, Y+7	; 0x07
    27be:	0e 94 6b 1f 	call	0x3ed6	; 0x3ed6 <memcpy>
    27c2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    27c4:	90 e0       	ldi	r25, 0x00	; 0
    27c6:	91 95       	neg	r25
    27c8:	81 95       	neg	r24
    27ca:	91 09       	sbc	r25, r1
    27cc:	2e 81       	ldd	r18, Y+6	; 0x06
    27ce:	3f 81       	ldd	r19, Y+7	; 0x07
    27d0:	28 0f       	add	r18, r24
    27d2:	39 1f       	adc	r19, r25
    27d4:	3f 83       	std	Y+7, r19	; 0x07
    27d6:	2e 83       	std	Y+6, r18	; 0x06
    27d8:	48 81       	ld	r20, Y
    27da:	59 81       	ldd	r21, Y+1	; 0x01
    27dc:	24 17       	cp	r18, r20
    27de:	35 07       	cpc	r19, r21
    27e0:	30 f4       	brcc	.+12     	; 0x27ee <prvCopyDataToQueue+0x92>
    27e2:	2c 81       	ldd	r18, Y+4	; 0x04
    27e4:	3d 81       	ldd	r19, Y+5	; 0x05
    27e6:	82 0f       	add	r24, r18
    27e8:	93 1f       	adc	r25, r19
    27ea:	9f 83       	std	Y+7, r25	; 0x07
    27ec:	8e 83       	std	Y+6, r24	; 0x06
    27ee:	02 30       	cpi	r16, 0x02	; 2
    27f0:	49 f4       	brne	.+18     	; 0x2804 <prvCopyDataToQueue+0xa8>
    27f2:	11 23       	and	r17, r17
    27f4:	49 f0       	breq	.+18     	; 0x2808 <prvCopyDataToQueue+0xac>
    27f6:	11 50       	subi	r17, 0x01	; 1
    27f8:	80 e0       	ldi	r24, 0x00	; 0
    27fa:	07 c0       	rjmp	.+14     	; 0x280a <prvCopyDataToQueue+0xae>
    27fc:	80 e0       	ldi	r24, 0x00	; 0
    27fe:	05 c0       	rjmp	.+10     	; 0x280a <prvCopyDataToQueue+0xae>
    2800:	80 e0       	ldi	r24, 0x00	; 0
    2802:	03 c0       	rjmp	.+6      	; 0x280a <prvCopyDataToQueue+0xae>
    2804:	80 e0       	ldi	r24, 0x00	; 0
    2806:	01 c0       	rjmp	.+2      	; 0x280a <prvCopyDataToQueue+0xae>
    2808:	80 e0       	ldi	r24, 0x00	; 0
    280a:	1f 5f       	subi	r17, 0xFF	; 255
    280c:	1a 8f       	std	Y+26, r17	; 0x1a
    280e:	df 91       	pop	r29
    2810:	cf 91       	pop	r28
    2812:	1f 91       	pop	r17
    2814:	0f 91       	pop	r16
    2816:	08 95       	ret

00002818 <prvCopyDataFromQueue>:
    2818:	fc 01       	movw	r30, r24
    281a:	44 8d       	ldd	r20, Z+28	; 0x1c
    281c:	44 23       	and	r20, r20
    281e:	a9 f0       	breq	.+42     	; 0x284a <prvCopyDataFromQueue+0x32>
    2820:	50 e0       	ldi	r21, 0x00	; 0
    2822:	26 81       	ldd	r18, Z+6	; 0x06
    2824:	37 81       	ldd	r19, Z+7	; 0x07
    2826:	24 0f       	add	r18, r20
    2828:	35 1f       	adc	r19, r21
    282a:	37 83       	std	Z+7, r19	; 0x07
    282c:	26 83       	std	Z+6, r18	; 0x06
    282e:	84 81       	ldd	r24, Z+4	; 0x04
    2830:	95 81       	ldd	r25, Z+5	; 0x05
    2832:	28 17       	cp	r18, r24
    2834:	39 07       	cpc	r19, r25
    2836:	20 f0       	brcs	.+8      	; 0x2840 <prvCopyDataFromQueue+0x28>
    2838:	80 81       	ld	r24, Z
    283a:	91 81       	ldd	r25, Z+1	; 0x01
    283c:	97 83       	std	Z+7, r25	; 0x07
    283e:	86 83       	std	Z+6, r24	; 0x06
    2840:	cb 01       	movw	r24, r22
    2842:	66 81       	ldd	r22, Z+6	; 0x06
    2844:	77 81       	ldd	r23, Z+7	; 0x07
    2846:	0c 94 6b 1f 	jmp	0x3ed6	; 0x3ed6 <memcpy>
    284a:	08 95       	ret

0000284c <prvUnlockQueue>:
    284c:	ef 92       	push	r14
    284e:	ff 92       	push	r15
    2850:	0f 93       	push	r16
    2852:	1f 93       	push	r17
    2854:	cf 93       	push	r28
    2856:	8c 01       	movw	r16, r24
    2858:	0f b6       	in	r0, 0x3f	; 63
    285a:	f8 94       	cli
    285c:	0f 92       	push	r0
    285e:	fc 01       	movw	r30, r24
    2860:	c6 8d       	ldd	r28, Z+30	; 0x1e
    2862:	1c 16       	cp	r1, r28
    2864:	9c f4       	brge	.+38     	; 0x288c <prvUnlockQueue+0x40>
    2866:	81 89       	ldd	r24, Z+17	; 0x11
    2868:	81 11       	cpse	r24, r1
    286a:	06 c0       	rjmp	.+12     	; 0x2878 <prvUnlockQueue+0x2c>
    286c:	0f c0       	rjmp	.+30     	; 0x288c <prvUnlockQueue+0x40>
    286e:	f8 01       	movw	r30, r16
    2870:	81 89       	ldd	r24, Z+17	; 0x11
    2872:	81 11       	cpse	r24, r1
    2874:	05 c0       	rjmp	.+10     	; 0x2880 <prvUnlockQueue+0x34>
    2876:	0a c0       	rjmp	.+20     	; 0x288c <prvUnlockQueue+0x40>
    2878:	78 01       	movw	r14, r16
    287a:	f1 e1       	ldi	r31, 0x11	; 17
    287c:	ef 0e       	add	r14, r31
    287e:	f1 1c       	adc	r15, r1
    2880:	c7 01       	movw	r24, r14
    2882:	46 d6       	rcall	.+3212   	; 0x3510 <xTaskRemoveFromEventList>
    2884:	81 11       	cpse	r24, r1
    2886:	c2 d6       	rcall	.+3460   	; 0x360c <vTaskMissedYield>
    2888:	c1 50       	subi	r28, 0x01	; 1
    288a:	89 f7       	brne	.-30     	; 0x286e <prvUnlockQueue+0x22>
    288c:	8f ef       	ldi	r24, 0xFF	; 255
    288e:	f8 01       	movw	r30, r16
    2890:	86 8f       	std	Z+30, r24	; 0x1e
    2892:	0f 90       	pop	r0
    2894:	0f be       	out	0x3f, r0	; 63
    2896:	0f b6       	in	r0, 0x3f	; 63
    2898:	f8 94       	cli
    289a:	0f 92       	push	r0
    289c:	c5 8d       	ldd	r28, Z+29	; 0x1d
    289e:	1c 16       	cp	r1, r28
    28a0:	9c f4       	brge	.+38     	; 0x28c8 <prvUnlockQueue+0x7c>
    28a2:	80 85       	ldd	r24, Z+8	; 0x08
    28a4:	81 11       	cpse	r24, r1
    28a6:	06 c0       	rjmp	.+12     	; 0x28b4 <prvUnlockQueue+0x68>
    28a8:	0f c0       	rjmp	.+30     	; 0x28c8 <prvUnlockQueue+0x7c>
    28aa:	f8 01       	movw	r30, r16
    28ac:	80 85       	ldd	r24, Z+8	; 0x08
    28ae:	81 11       	cpse	r24, r1
    28b0:	05 c0       	rjmp	.+10     	; 0x28bc <prvUnlockQueue+0x70>
    28b2:	0a c0       	rjmp	.+20     	; 0x28c8 <prvUnlockQueue+0x7c>
    28b4:	78 01       	movw	r14, r16
    28b6:	f8 e0       	ldi	r31, 0x08	; 8
    28b8:	ef 0e       	add	r14, r31
    28ba:	f1 1c       	adc	r15, r1
    28bc:	c7 01       	movw	r24, r14
    28be:	28 d6       	rcall	.+3152   	; 0x3510 <xTaskRemoveFromEventList>
    28c0:	81 11       	cpse	r24, r1
    28c2:	a4 d6       	rcall	.+3400   	; 0x360c <vTaskMissedYield>
    28c4:	c1 50       	subi	r28, 0x01	; 1
    28c6:	89 f7       	brne	.-30     	; 0x28aa <prvUnlockQueue+0x5e>
    28c8:	8f ef       	ldi	r24, 0xFF	; 255
    28ca:	f8 01       	movw	r30, r16
    28cc:	85 8f       	std	Z+29, r24	; 0x1d
    28ce:	0f 90       	pop	r0
    28d0:	0f be       	out	0x3f, r0	; 63
    28d2:	cf 91       	pop	r28
    28d4:	1f 91       	pop	r17
    28d6:	0f 91       	pop	r16
    28d8:	ff 90       	pop	r15
    28da:	ef 90       	pop	r14
    28dc:	08 95       	ret

000028de <xQueueGenericReset>:
    28de:	cf 93       	push	r28
    28e0:	df 93       	push	r29
    28e2:	ec 01       	movw	r28, r24
    28e4:	0f b6       	in	r0, 0x3f	; 63
    28e6:	f8 94       	cli
    28e8:	0f 92       	push	r0
    28ea:	e8 81       	ld	r30, Y
    28ec:	f9 81       	ldd	r31, Y+1	; 0x01
    28ee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    28f0:	2c 8d       	ldd	r18, Y+28	; 0x1c
    28f2:	90 e0       	ldi	r25, 0x00	; 0
    28f4:	30 e0       	ldi	r19, 0x00	; 0
    28f6:	82 9f       	mul	r24, r18
    28f8:	a0 01       	movw	r20, r0
    28fa:	83 9f       	mul	r24, r19
    28fc:	50 0d       	add	r21, r0
    28fe:	92 9f       	mul	r25, r18
    2900:	50 0d       	add	r21, r0
    2902:	11 24       	eor	r1, r1
    2904:	4e 0f       	add	r20, r30
    2906:	5f 1f       	adc	r21, r31
    2908:	5d 83       	std	Y+5, r21	; 0x05
    290a:	4c 83       	std	Y+4, r20	; 0x04
    290c:	1a 8e       	std	Y+26, r1	; 0x1a
    290e:	fb 83       	std	Y+3, r31	; 0x03
    2910:	ea 83       	std	Y+2, r30	; 0x02
    2912:	01 97       	sbiw	r24, 0x01	; 1
    2914:	82 9f       	mul	r24, r18
    2916:	a0 01       	movw	r20, r0
    2918:	83 9f       	mul	r24, r19
    291a:	50 0d       	add	r21, r0
    291c:	92 9f       	mul	r25, r18
    291e:	50 0d       	add	r21, r0
    2920:	11 24       	eor	r1, r1
    2922:	cf 01       	movw	r24, r30
    2924:	84 0f       	add	r24, r20
    2926:	95 1f       	adc	r25, r21
    2928:	9f 83       	std	Y+7, r25	; 0x07
    292a:	8e 83       	std	Y+6, r24	; 0x06
    292c:	8f ef       	ldi	r24, 0xFF	; 255
    292e:	8d 8f       	std	Y+29, r24	; 0x1d
    2930:	8e 8f       	std	Y+30, r24	; 0x1e
    2932:	61 11       	cpse	r22, r1
    2934:	0a c0       	rjmp	.+20     	; 0x294a <xQueueGenericReset+0x6c>
    2936:	88 85       	ldd	r24, Y+8	; 0x08
    2938:	88 23       	and	r24, r24
    293a:	69 f0       	breq	.+26     	; 0x2956 <xQueueGenericReset+0x78>
    293c:	ce 01       	movw	r24, r28
    293e:	08 96       	adiw	r24, 0x08	; 8
    2940:	e7 d5       	rcall	.+3022   	; 0x3510 <xTaskRemoveFromEventList>
    2942:	88 23       	and	r24, r24
    2944:	41 f0       	breq	.+16     	; 0x2956 <xQueueGenericReset+0x78>
    2946:	3a de       	rcall	.-908    	; 0x25bc <vPortYield>
    2948:	06 c0       	rjmp	.+12     	; 0x2956 <xQueueGenericReset+0x78>
    294a:	ce 01       	movw	r24, r28
    294c:	08 96       	adiw	r24, 0x08	; 8
    294e:	fd dc       	rcall	.-1542   	; 0x234a <vListInitialise>
    2950:	ce 01       	movw	r24, r28
    2952:	41 96       	adiw	r24, 0x11	; 17
    2954:	fa dc       	rcall	.-1548   	; 0x234a <vListInitialise>
    2956:	0f 90       	pop	r0
    2958:	0f be       	out	0x3f, r0	; 63
    295a:	81 e0       	ldi	r24, 0x01	; 1
    295c:	df 91       	pop	r29
    295e:	cf 91       	pop	r28
    2960:	08 95       	ret

00002962 <xQueueGenericCreateStatic>:
    2962:	cf 93       	push	r28
    2964:	df 93       	push	r29
    2966:	e9 01       	movw	r28, r18
    2968:	20 97       	sbiw	r28, 0x00	; 0
    296a:	61 f0       	breq	.+24     	; 0x2984 <xQueueGenericCreateStatic+0x22>
    296c:	61 11       	cpse	r22, r1
    296e:	03 c0       	rjmp	.+6      	; 0x2976 <xQueueGenericCreateStatic+0x14>
    2970:	39 83       	std	Y+1, r19	; 0x01
    2972:	28 83       	st	Y, r18
    2974:	02 c0       	rjmp	.+4      	; 0x297a <xQueueGenericCreateStatic+0x18>
    2976:	59 83       	std	Y+1, r21	; 0x01
    2978:	48 83       	st	Y, r20
    297a:	8b 8f       	std	Y+27, r24	; 0x1b
    297c:	6c 8f       	std	Y+28, r22	; 0x1c
    297e:	61 e0       	ldi	r22, 0x01	; 1
    2980:	ce 01       	movw	r24, r28
    2982:	ad df       	rcall	.-166    	; 0x28de <xQueueGenericReset>
    2984:	ce 01       	movw	r24, r28
    2986:	df 91       	pop	r29
    2988:	cf 91       	pop	r28
    298a:	08 95       	ret

0000298c <xQueueGenericSend>:
    298c:	9f 92       	push	r9
    298e:	af 92       	push	r10
    2990:	bf 92       	push	r11
    2992:	cf 92       	push	r12
    2994:	df 92       	push	r13
    2996:	ef 92       	push	r14
    2998:	ff 92       	push	r15
    299a:	0f 93       	push	r16
    299c:	1f 93       	push	r17
    299e:	cf 93       	push	r28
    29a0:	df 93       	push	r29
    29a2:	00 d0       	rcall	.+0      	; 0x29a4 <xQueueGenericSend+0x18>
    29a4:	1f 92       	push	r1
    29a6:	1f 92       	push	r1
    29a8:	cd b7       	in	r28, 0x3d	; 61
    29aa:	de b7       	in	r29, 0x3e	; 62
    29ac:	8c 01       	movw	r16, r24
    29ae:	6b 01       	movw	r12, r22
    29b0:	5d 83       	std	Y+5, r21	; 0x05
    29b2:	4c 83       	std	Y+4, r20	; 0x04
    29b4:	a2 2e       	mov	r10, r18
    29b6:	b1 2c       	mov	r11, r1
    29b8:	99 24       	eor	r9, r9
    29ba:	93 94       	inc	r9
    29bc:	7c 01       	movw	r14, r24
    29be:	88 e0       	ldi	r24, 0x08	; 8
    29c0:	e8 0e       	add	r14, r24
    29c2:	f1 1c       	adc	r15, r1
    29c4:	0f b6       	in	r0, 0x3f	; 63
    29c6:	f8 94       	cli
    29c8:	0f 92       	push	r0
    29ca:	f8 01       	movw	r30, r16
    29cc:	92 8d       	ldd	r25, Z+26	; 0x1a
    29ce:	83 8d       	ldd	r24, Z+27	; 0x1b
    29d0:	98 17       	cp	r25, r24
    29d2:	18 f0       	brcs	.+6      	; 0x29da <xQueueGenericSend+0x4e>
    29d4:	f2 e0       	ldi	r31, 0x02	; 2
    29d6:	af 12       	cpse	r10, r31
    29d8:	15 c0       	rjmp	.+42     	; 0x2a04 <xQueueGenericSend+0x78>
    29da:	4a 2d       	mov	r20, r10
    29dc:	b6 01       	movw	r22, r12
    29de:	c8 01       	movw	r24, r16
    29e0:	bd de       	rcall	.-646    	; 0x275c <prvCopyDataToQueue>
    29e2:	f8 01       	movw	r30, r16
    29e4:	91 89       	ldd	r25, Z+17	; 0x11
    29e6:	99 23       	and	r25, r25
    29e8:	39 f0       	breq	.+14     	; 0x29f8 <xQueueGenericSend+0x6c>
    29ea:	c8 01       	movw	r24, r16
    29ec:	41 96       	adiw	r24, 0x11	; 17
    29ee:	90 d5       	rcall	.+2848   	; 0x3510 <xTaskRemoveFromEventList>
    29f0:	88 23       	and	r24, r24
    29f2:	21 f0       	breq	.+8      	; 0x29fc <xQueueGenericSend+0x70>
    29f4:	e3 dd       	rcall	.-1082   	; 0x25bc <vPortYield>
    29f6:	02 c0       	rjmp	.+4      	; 0x29fc <xQueueGenericSend+0x70>
    29f8:	81 11       	cpse	r24, r1
    29fa:	e0 dd       	rcall	.-1088   	; 0x25bc <vPortYield>
    29fc:	0f 90       	pop	r0
    29fe:	0f be       	out	0x3f, r0	; 63
    2a00:	81 e0       	ldi	r24, 0x01	; 1
    2a02:	45 c0       	rjmp	.+138    	; 0x2a8e <xQueueGenericSend+0x102>
    2a04:	8c 81       	ldd	r24, Y+4	; 0x04
    2a06:	9d 81       	ldd	r25, Y+5	; 0x05
    2a08:	89 2b       	or	r24, r25
    2a0a:	21 f4       	brne	.+8      	; 0x2a14 <xQueueGenericSend+0x88>
    2a0c:	0f 90       	pop	r0
    2a0e:	0f be       	out	0x3f, r0	; 63
    2a10:	80 e0       	ldi	r24, 0x00	; 0
    2a12:	3d c0       	rjmp	.+122    	; 0x2a8e <xQueueGenericSend+0x102>
    2a14:	b1 10       	cpse	r11, r1
    2a16:	04 c0       	rjmp	.+8      	; 0x2a20 <xQueueGenericSend+0x94>
    2a18:	ce 01       	movw	r24, r28
    2a1a:	01 96       	adiw	r24, 0x01	; 1
    2a1c:	c1 d5       	rcall	.+2946   	; 0x35a0 <vTaskInternalSetTimeOutState>
    2a1e:	b9 2c       	mov	r11, r9
    2a20:	0f 90       	pop	r0
    2a22:	0f be       	out	0x3f, r0	; 63
    2a24:	7b d3       	rcall	.+1782   	; 0x311c <vTaskSuspendAll>
    2a26:	0f b6       	in	r0, 0x3f	; 63
    2a28:	f8 94       	cli
    2a2a:	0f 92       	push	r0
    2a2c:	f8 01       	movw	r30, r16
    2a2e:	85 8d       	ldd	r24, Z+29	; 0x1d
    2a30:	8f 3f       	cpi	r24, 0xFF	; 255
    2a32:	09 f4       	brne	.+2      	; 0x2a36 <xQueueGenericSend+0xaa>
    2a34:	15 8e       	std	Z+29, r1	; 0x1d
    2a36:	f8 01       	movw	r30, r16
    2a38:	86 8d       	ldd	r24, Z+30	; 0x1e
    2a3a:	8f 3f       	cpi	r24, 0xFF	; 255
    2a3c:	09 f4       	brne	.+2      	; 0x2a40 <xQueueGenericSend+0xb4>
    2a3e:	16 8e       	std	Z+30, r1	; 0x1e
    2a40:	0f 90       	pop	r0
    2a42:	0f be       	out	0x3f, r0	; 63
    2a44:	be 01       	movw	r22, r28
    2a46:	6c 5f       	subi	r22, 0xFC	; 252
    2a48:	7f 4f       	sbci	r23, 0xFF	; 255
    2a4a:	ce 01       	movw	r24, r28
    2a4c:	01 96       	adiw	r24, 0x01	; 1
    2a4e:	b3 d5       	rcall	.+2918   	; 0x35b6 <xTaskCheckForTimeOut>
    2a50:	81 11       	cpse	r24, r1
    2a52:	19 c0       	rjmp	.+50     	; 0x2a86 <xQueueGenericSend+0xfa>
    2a54:	0f b6       	in	r0, 0x3f	; 63
    2a56:	f8 94       	cli
    2a58:	0f 92       	push	r0
    2a5a:	f8 01       	movw	r30, r16
    2a5c:	92 8d       	ldd	r25, Z+26	; 0x1a
    2a5e:	83 8d       	ldd	r24, Z+27	; 0x1b
    2a60:	0f 90       	pop	r0
    2a62:	0f be       	out	0x3f, r0	; 63
    2a64:	98 13       	cpse	r25, r24
    2a66:	0b c0       	rjmp	.+22     	; 0x2a7e <xQueueGenericSend+0xf2>
    2a68:	6c 81       	ldd	r22, Y+4	; 0x04
    2a6a:	7d 81       	ldd	r23, Y+5	; 0x05
    2a6c:	c7 01       	movw	r24, r14
    2a6e:	27 d5       	rcall	.+2638   	; 0x34be <vTaskPlaceOnEventList>
    2a70:	c8 01       	movw	r24, r16
    2a72:	ec de       	rcall	.-552    	; 0x284c <prvUnlockQueue>
    2a74:	1a d4       	rcall	.+2100   	; 0x32aa <xTaskResumeAll>
    2a76:	81 11       	cpse	r24, r1
    2a78:	a5 cf       	rjmp	.-182    	; 0x29c4 <xQueueGenericSend+0x38>
    2a7a:	a0 dd       	rcall	.-1216   	; 0x25bc <vPortYield>
    2a7c:	a3 cf       	rjmp	.-186    	; 0x29c4 <xQueueGenericSend+0x38>
    2a7e:	c8 01       	movw	r24, r16
    2a80:	e5 de       	rcall	.-566    	; 0x284c <prvUnlockQueue>
    2a82:	13 d4       	rcall	.+2086   	; 0x32aa <xTaskResumeAll>
    2a84:	9f cf       	rjmp	.-194    	; 0x29c4 <xQueueGenericSend+0x38>
    2a86:	c8 01       	movw	r24, r16
    2a88:	e1 de       	rcall	.-574    	; 0x284c <prvUnlockQueue>
    2a8a:	0f d4       	rcall	.+2078   	; 0x32aa <xTaskResumeAll>
    2a8c:	80 e0       	ldi	r24, 0x00	; 0
    2a8e:	0f 90       	pop	r0
    2a90:	0f 90       	pop	r0
    2a92:	0f 90       	pop	r0
    2a94:	0f 90       	pop	r0
    2a96:	0f 90       	pop	r0
    2a98:	df 91       	pop	r29
    2a9a:	cf 91       	pop	r28
    2a9c:	1f 91       	pop	r17
    2a9e:	0f 91       	pop	r16
    2aa0:	ff 90       	pop	r15
    2aa2:	ef 90       	pop	r14
    2aa4:	df 90       	pop	r13
    2aa6:	cf 90       	pop	r12
    2aa8:	bf 90       	pop	r11
    2aaa:	af 90       	pop	r10
    2aac:	9f 90       	pop	r9
    2aae:	08 95       	ret

00002ab0 <xQueueGenericSendFromISR>:
    2ab0:	ef 92       	push	r14
    2ab2:	ff 92       	push	r15
    2ab4:	0f 93       	push	r16
    2ab6:	1f 93       	push	r17
    2ab8:	cf 93       	push	r28
    2aba:	df 93       	push	r29
    2abc:	8a 01       	movw	r16, r20
    2abe:	fc 01       	movw	r30, r24
    2ac0:	52 8d       	ldd	r21, Z+26	; 0x1a
    2ac2:	33 8d       	ldd	r19, Z+27	; 0x1b
    2ac4:	53 17       	cp	r21, r19
    2ac6:	10 f0       	brcs	.+4      	; 0x2acc <xQueueGenericSendFromISR+0x1c>
    2ac8:	22 30       	cpi	r18, 0x02	; 2
    2aca:	e1 f4       	brne	.+56     	; 0x2b04 <xQueueGenericSendFromISR+0x54>
    2acc:	42 2f       	mov	r20, r18
    2ace:	78 01       	movw	r14, r16
    2ad0:	ec 01       	movw	r28, r24
    2ad2:	1e 8d       	ldd	r17, Y+30	; 0x1e
    2ad4:	43 de       	rcall	.-890    	; 0x275c <prvCopyDataToQueue>
    2ad6:	1f 3f       	cpi	r17, 0xFF	; 255
    2ad8:	79 f4       	brne	.+30     	; 0x2af8 <xQueueGenericSendFromISR+0x48>
    2ada:	89 89       	ldd	r24, Y+17	; 0x11
    2adc:	88 23       	and	r24, r24
    2ade:	a1 f0       	breq	.+40     	; 0x2b08 <xQueueGenericSendFromISR+0x58>
    2ae0:	ce 01       	movw	r24, r28
    2ae2:	41 96       	adiw	r24, 0x11	; 17
    2ae4:	15 d5       	rcall	.+2602   	; 0x3510 <xTaskRemoveFromEventList>
    2ae6:	88 23       	and	r24, r24
    2ae8:	89 f0       	breq	.+34     	; 0x2b0c <xQueueGenericSendFromISR+0x5c>
    2aea:	e1 14       	cp	r14, r1
    2aec:	f1 04       	cpc	r15, r1
    2aee:	81 f0       	breq	.+32     	; 0x2b10 <xQueueGenericSendFromISR+0x60>
    2af0:	81 e0       	ldi	r24, 0x01	; 1
    2af2:	f7 01       	movw	r30, r14
    2af4:	80 83       	st	Z, r24
    2af6:	0d c0       	rjmp	.+26     	; 0x2b12 <xQueueGenericSendFromISR+0x62>
    2af8:	ff 24       	eor	r15, r15
    2afa:	f3 94       	inc	r15
    2afc:	f1 0e       	add	r15, r17
    2afe:	fe 8e       	std	Y+30, r15	; 0x1e
    2b00:	81 e0       	ldi	r24, 0x01	; 1
    2b02:	07 c0       	rjmp	.+14     	; 0x2b12 <xQueueGenericSendFromISR+0x62>
    2b04:	80 e0       	ldi	r24, 0x00	; 0
    2b06:	05 c0       	rjmp	.+10     	; 0x2b12 <xQueueGenericSendFromISR+0x62>
    2b08:	81 e0       	ldi	r24, 0x01	; 1
    2b0a:	03 c0       	rjmp	.+6      	; 0x2b12 <xQueueGenericSendFromISR+0x62>
    2b0c:	81 e0       	ldi	r24, 0x01	; 1
    2b0e:	01 c0       	rjmp	.+2      	; 0x2b12 <xQueueGenericSendFromISR+0x62>
    2b10:	81 e0       	ldi	r24, 0x01	; 1
    2b12:	df 91       	pop	r29
    2b14:	cf 91       	pop	r28
    2b16:	1f 91       	pop	r17
    2b18:	0f 91       	pop	r16
    2b1a:	ff 90       	pop	r15
    2b1c:	ef 90       	pop	r14
    2b1e:	08 95       	ret

00002b20 <xQueueReceive>:
    2b20:	9f 92       	push	r9
    2b22:	af 92       	push	r10
    2b24:	bf 92       	push	r11
    2b26:	cf 92       	push	r12
    2b28:	df 92       	push	r13
    2b2a:	ef 92       	push	r14
    2b2c:	ff 92       	push	r15
    2b2e:	0f 93       	push	r16
    2b30:	1f 93       	push	r17
    2b32:	cf 93       	push	r28
    2b34:	df 93       	push	r29
    2b36:	00 d0       	rcall	.+0      	; 0x2b38 <xQueueReceive+0x18>
    2b38:	1f 92       	push	r1
    2b3a:	1f 92       	push	r1
    2b3c:	cd b7       	in	r28, 0x3d	; 61
    2b3e:	de b7       	in	r29, 0x3e	; 62
    2b40:	8c 01       	movw	r16, r24
    2b42:	5b 01       	movw	r10, r22
    2b44:	5d 83       	std	Y+5, r21	; 0x05
    2b46:	4c 83       	std	Y+4, r20	; 0x04
    2b48:	e1 2c       	mov	r14, r1
    2b4a:	99 24       	eor	r9, r9
    2b4c:	93 94       	inc	r9
    2b4e:	6c 01       	movw	r12, r24
    2b50:	81 e1       	ldi	r24, 0x11	; 17
    2b52:	c8 0e       	add	r12, r24
    2b54:	d1 1c       	adc	r13, r1
    2b56:	0f b6       	in	r0, 0x3f	; 63
    2b58:	f8 94       	cli
    2b5a:	0f 92       	push	r0
    2b5c:	f8 01       	movw	r30, r16
    2b5e:	f2 8c       	ldd	r15, Z+26	; 0x1a
    2b60:	ff 20       	and	r15, r15
    2b62:	91 f0       	breq	.+36     	; 0x2b88 <xQueueReceive+0x68>
    2b64:	b5 01       	movw	r22, r10
    2b66:	c8 01       	movw	r24, r16
    2b68:	57 de       	rcall	.-850    	; 0x2818 <prvCopyDataFromQueue>
    2b6a:	fa 94       	dec	r15
    2b6c:	f8 01       	movw	r30, r16
    2b6e:	f2 8e       	std	Z+26, r15	; 0x1a
    2b70:	80 85       	ldd	r24, Z+8	; 0x08
    2b72:	88 23       	and	r24, r24
    2b74:	29 f0       	breq	.+10     	; 0x2b80 <xQueueReceive+0x60>
    2b76:	c8 01       	movw	r24, r16
    2b78:	08 96       	adiw	r24, 0x08	; 8
    2b7a:	ca d4       	rcall	.+2452   	; 0x3510 <xTaskRemoveFromEventList>
    2b7c:	81 11       	cpse	r24, r1
    2b7e:	1e dd       	rcall	.-1476   	; 0x25bc <vPortYield>
    2b80:	0f 90       	pop	r0
    2b82:	0f be       	out	0x3f, r0	; 63
    2b84:	81 e0       	ldi	r24, 0x01	; 1
    2b86:	44 c0       	rjmp	.+136    	; 0x2c10 <xQueueReceive+0xf0>
    2b88:	8c 81       	ldd	r24, Y+4	; 0x04
    2b8a:	9d 81       	ldd	r25, Y+5	; 0x05
    2b8c:	89 2b       	or	r24, r25
    2b8e:	21 f4       	brne	.+8      	; 0x2b98 <xQueueReceive+0x78>
    2b90:	0f 90       	pop	r0
    2b92:	0f be       	out	0x3f, r0	; 63
    2b94:	80 e0       	ldi	r24, 0x00	; 0
    2b96:	3c c0       	rjmp	.+120    	; 0x2c10 <xQueueReceive+0xf0>
    2b98:	e1 10       	cpse	r14, r1
    2b9a:	04 c0       	rjmp	.+8      	; 0x2ba4 <xQueueReceive+0x84>
    2b9c:	ce 01       	movw	r24, r28
    2b9e:	01 96       	adiw	r24, 0x01	; 1
    2ba0:	ff d4       	rcall	.+2558   	; 0x35a0 <vTaskInternalSetTimeOutState>
    2ba2:	e9 2c       	mov	r14, r9
    2ba4:	0f 90       	pop	r0
    2ba6:	0f be       	out	0x3f, r0	; 63
    2ba8:	b9 d2       	rcall	.+1394   	; 0x311c <vTaskSuspendAll>
    2baa:	0f b6       	in	r0, 0x3f	; 63
    2bac:	f8 94       	cli
    2bae:	0f 92       	push	r0
    2bb0:	f8 01       	movw	r30, r16
    2bb2:	85 8d       	ldd	r24, Z+29	; 0x1d
    2bb4:	8f 3f       	cpi	r24, 0xFF	; 255
    2bb6:	09 f4       	brne	.+2      	; 0x2bba <xQueueReceive+0x9a>
    2bb8:	15 8e       	std	Z+29, r1	; 0x1d
    2bba:	f8 01       	movw	r30, r16
    2bbc:	86 8d       	ldd	r24, Z+30	; 0x1e
    2bbe:	8f 3f       	cpi	r24, 0xFF	; 255
    2bc0:	09 f4       	brne	.+2      	; 0x2bc4 <xQueueReceive+0xa4>
    2bc2:	16 8e       	std	Z+30, r1	; 0x1e
    2bc4:	0f 90       	pop	r0
    2bc6:	0f be       	out	0x3f, r0	; 63
    2bc8:	be 01       	movw	r22, r28
    2bca:	6c 5f       	subi	r22, 0xFC	; 252
    2bcc:	7f 4f       	sbci	r23, 0xFF	; 255
    2bce:	ce 01       	movw	r24, r28
    2bd0:	01 96       	adiw	r24, 0x01	; 1
    2bd2:	f1 d4       	rcall	.+2530   	; 0x35b6 <xTaskCheckForTimeOut>
    2bd4:	81 11       	cpse	r24, r1
    2bd6:	13 c0       	rjmp	.+38     	; 0x2bfe <xQueueReceive+0xde>
    2bd8:	c8 01       	movw	r24, r16
    2bda:	b5 dd       	rcall	.-1174   	; 0x2746 <prvIsQueueEmpty>
    2bdc:	88 23       	and	r24, r24
    2bde:	59 f0       	breq	.+22     	; 0x2bf6 <xQueueReceive+0xd6>
    2be0:	6c 81       	ldd	r22, Y+4	; 0x04
    2be2:	7d 81       	ldd	r23, Y+5	; 0x05
    2be4:	c6 01       	movw	r24, r12
    2be6:	6b d4       	rcall	.+2262   	; 0x34be <vTaskPlaceOnEventList>
    2be8:	c8 01       	movw	r24, r16
    2bea:	30 de       	rcall	.-928    	; 0x284c <prvUnlockQueue>
    2bec:	5e d3       	rcall	.+1724   	; 0x32aa <xTaskResumeAll>
    2bee:	81 11       	cpse	r24, r1
    2bf0:	b2 cf       	rjmp	.-156    	; 0x2b56 <xQueueReceive+0x36>
    2bf2:	e4 dc       	rcall	.-1592   	; 0x25bc <vPortYield>
    2bf4:	b0 cf       	rjmp	.-160    	; 0x2b56 <xQueueReceive+0x36>
    2bf6:	c8 01       	movw	r24, r16
    2bf8:	29 de       	rcall	.-942    	; 0x284c <prvUnlockQueue>
    2bfa:	57 d3       	rcall	.+1710   	; 0x32aa <xTaskResumeAll>
    2bfc:	ac cf       	rjmp	.-168    	; 0x2b56 <xQueueReceive+0x36>
    2bfe:	c8 01       	movw	r24, r16
    2c00:	25 de       	rcall	.-950    	; 0x284c <prvUnlockQueue>
    2c02:	53 d3       	rcall	.+1702   	; 0x32aa <xTaskResumeAll>
    2c04:	c8 01       	movw	r24, r16
    2c06:	9f dd       	rcall	.-1218   	; 0x2746 <prvIsQueueEmpty>
    2c08:	88 23       	and	r24, r24
    2c0a:	09 f4       	brne	.+2      	; 0x2c0e <xQueueReceive+0xee>
    2c0c:	a4 cf       	rjmp	.-184    	; 0x2b56 <xQueueReceive+0x36>
    2c0e:	80 e0       	ldi	r24, 0x00	; 0
    2c10:	0f 90       	pop	r0
    2c12:	0f 90       	pop	r0
    2c14:	0f 90       	pop	r0
    2c16:	0f 90       	pop	r0
    2c18:	0f 90       	pop	r0
    2c1a:	df 91       	pop	r29
    2c1c:	cf 91       	pop	r28
    2c1e:	1f 91       	pop	r17
    2c20:	0f 91       	pop	r16
    2c22:	ff 90       	pop	r15
    2c24:	ef 90       	pop	r14
    2c26:	df 90       	pop	r13
    2c28:	cf 90       	pop	r12
    2c2a:	bf 90       	pop	r11
    2c2c:	af 90       	pop	r10
    2c2e:	9f 90       	pop	r9
    2c30:	08 95       	ret

00002c32 <xQueueSemaphoreTake>:
    2c32:	bf 92       	push	r11
    2c34:	cf 92       	push	r12
    2c36:	df 92       	push	r13
    2c38:	ef 92       	push	r14
    2c3a:	ff 92       	push	r15
    2c3c:	0f 93       	push	r16
    2c3e:	1f 93       	push	r17
    2c40:	cf 93       	push	r28
    2c42:	df 93       	push	r29
    2c44:	00 d0       	rcall	.+0      	; 0x2c46 <xQueueSemaphoreTake+0x14>
    2c46:	1f 92       	push	r1
    2c48:	1f 92       	push	r1
    2c4a:	cd b7       	in	r28, 0x3d	; 61
    2c4c:	de b7       	in	r29, 0x3e	; 62
    2c4e:	8c 01       	movw	r16, r24
    2c50:	7d 83       	std	Y+5, r23	; 0x05
    2c52:	6c 83       	std	Y+4, r22	; 0x04
    2c54:	b1 2c       	mov	r11, r1
    2c56:	d1 2c       	mov	r13, r1
    2c58:	cc 24       	eor	r12, r12
    2c5a:	c3 94       	inc	r12
    2c5c:	7c 01       	movw	r14, r24
    2c5e:	81 e1       	ldi	r24, 0x11	; 17
    2c60:	e8 0e       	add	r14, r24
    2c62:	f1 1c       	adc	r15, r1
    2c64:	0f b6       	in	r0, 0x3f	; 63
    2c66:	f8 94       	cli
    2c68:	0f 92       	push	r0
    2c6a:	d8 01       	movw	r26, r16
    2c6c:	5a 96       	adiw	r26, 0x1a	; 26
    2c6e:	8c 91       	ld	r24, X
    2c70:	5a 97       	sbiw	r26, 0x1a	; 26
    2c72:	88 23       	and	r24, r24
    2c74:	d1 f0       	breq	.+52     	; 0x2caa <xQueueSemaphoreTake+0x78>
    2c76:	81 50       	subi	r24, 0x01	; 1
    2c78:	5a 96       	adiw	r26, 0x1a	; 26
    2c7a:	8c 93       	st	X, r24
    2c7c:	5a 97       	sbiw	r26, 0x1a	; 26
    2c7e:	8d 91       	ld	r24, X+
    2c80:	9c 91       	ld	r25, X
    2c82:	89 2b       	or	r24, r25
    2c84:	21 f4       	brne	.+8      	; 0x2c8e <xQueueSemaphoreTake+0x5c>
    2c86:	d6 d5       	rcall	.+2988   	; 0x3834 <pvTaskIncrementMutexHeldCount>
    2c88:	f8 01       	movw	r30, r16
    2c8a:	95 83       	std	Z+5, r25	; 0x05
    2c8c:	84 83       	std	Z+4, r24	; 0x04
    2c8e:	d8 01       	movw	r26, r16
    2c90:	18 96       	adiw	r26, 0x08	; 8
    2c92:	8c 91       	ld	r24, X
    2c94:	88 23       	and	r24, r24
    2c96:	29 f0       	breq	.+10     	; 0x2ca2 <xQueueSemaphoreTake+0x70>
    2c98:	c8 01       	movw	r24, r16
    2c9a:	08 96       	adiw	r24, 0x08	; 8
    2c9c:	39 d4       	rcall	.+2162   	; 0x3510 <xTaskRemoveFromEventList>
    2c9e:	81 11       	cpse	r24, r1
    2ca0:	8d dc       	rcall	.-1766   	; 0x25bc <vPortYield>
    2ca2:	0f 90       	pop	r0
    2ca4:	0f be       	out	0x3f, r0	; 63
    2ca6:	81 e0       	ldi	r24, 0x01	; 1
    2ca8:	70 c0       	rjmp	.+224    	; 0x2d8a <xQueueSemaphoreTake+0x158>
    2caa:	8c 81       	ldd	r24, Y+4	; 0x04
    2cac:	9d 81       	ldd	r25, Y+5	; 0x05
    2cae:	89 2b       	or	r24, r25
    2cb0:	21 f4       	brne	.+8      	; 0x2cba <xQueueSemaphoreTake+0x88>
    2cb2:	0f 90       	pop	r0
    2cb4:	0f be       	out	0x3f, r0	; 63
    2cb6:	80 e0       	ldi	r24, 0x00	; 0
    2cb8:	68 c0       	rjmp	.+208    	; 0x2d8a <xQueueSemaphoreTake+0x158>
    2cba:	d1 10       	cpse	r13, r1
    2cbc:	04 c0       	rjmp	.+8      	; 0x2cc6 <xQueueSemaphoreTake+0x94>
    2cbe:	ce 01       	movw	r24, r28
    2cc0:	01 96       	adiw	r24, 0x01	; 1
    2cc2:	6e d4       	rcall	.+2268   	; 0x35a0 <vTaskInternalSetTimeOutState>
    2cc4:	dc 2c       	mov	r13, r12
    2cc6:	0f 90       	pop	r0
    2cc8:	0f be       	out	0x3f, r0	; 63
    2cca:	28 d2       	rcall	.+1104   	; 0x311c <vTaskSuspendAll>
    2ccc:	0f b6       	in	r0, 0x3f	; 63
    2cce:	f8 94       	cli
    2cd0:	0f 92       	push	r0
    2cd2:	f8 01       	movw	r30, r16
    2cd4:	85 8d       	ldd	r24, Z+29	; 0x1d
    2cd6:	8f 3f       	cpi	r24, 0xFF	; 255
    2cd8:	09 f4       	brne	.+2      	; 0x2cdc <xQueueSemaphoreTake+0xaa>
    2cda:	15 8e       	std	Z+29, r1	; 0x1d
    2cdc:	d8 01       	movw	r26, r16
    2cde:	5e 96       	adiw	r26, 0x1e	; 30
    2ce0:	8c 91       	ld	r24, X
    2ce2:	5e 97       	sbiw	r26, 0x1e	; 30
    2ce4:	8f 3f       	cpi	r24, 0xFF	; 255
    2ce6:	11 f4       	brne	.+4      	; 0x2cec <xQueueSemaphoreTake+0xba>
    2ce8:	5e 96       	adiw	r26, 0x1e	; 30
    2cea:	1c 92       	st	X, r1
    2cec:	0f 90       	pop	r0
    2cee:	0f be       	out	0x3f, r0	; 63
    2cf0:	be 01       	movw	r22, r28
    2cf2:	6c 5f       	subi	r22, 0xFC	; 252
    2cf4:	7f 4f       	sbci	r23, 0xFF	; 255
    2cf6:	ce 01       	movw	r24, r28
    2cf8:	01 96       	adiw	r24, 0x01	; 1
    2cfa:	5d d4       	rcall	.+2234   	; 0x35b6 <xTaskCheckForTimeOut>
    2cfc:	81 11       	cpse	r24, r1
    2cfe:	21 c0       	rjmp	.+66     	; 0x2d42 <xQueueSemaphoreTake+0x110>
    2d00:	c8 01       	movw	r24, r16
    2d02:	21 dd       	rcall	.-1470   	; 0x2746 <prvIsQueueEmpty>
    2d04:	88 23       	and	r24, r24
    2d06:	c9 f0       	breq	.+50     	; 0x2d3a <xQueueSemaphoreTake+0x108>
    2d08:	f8 01       	movw	r30, r16
    2d0a:	80 81       	ld	r24, Z
    2d0c:	91 81       	ldd	r25, Z+1	; 0x01
    2d0e:	89 2b       	or	r24, r25
    2d10:	49 f4       	brne	.+18     	; 0x2d24 <xQueueSemaphoreTake+0xf2>
    2d12:	0f b6       	in	r0, 0x3f	; 63
    2d14:	f8 94       	cli
    2d16:	0f 92       	push	r0
    2d18:	84 81       	ldd	r24, Z+4	; 0x04
    2d1a:	95 81       	ldd	r25, Z+5	; 0x05
    2d1c:	89 d4       	rcall	.+2322   	; 0x3630 <xTaskPriorityInherit>
    2d1e:	b8 2e       	mov	r11, r24
    2d20:	0f 90       	pop	r0
    2d22:	0f be       	out	0x3f, r0	; 63
    2d24:	6c 81       	ldd	r22, Y+4	; 0x04
    2d26:	7d 81       	ldd	r23, Y+5	; 0x05
    2d28:	c7 01       	movw	r24, r14
    2d2a:	c9 d3       	rcall	.+1938   	; 0x34be <vTaskPlaceOnEventList>
    2d2c:	c8 01       	movw	r24, r16
    2d2e:	8e dd       	rcall	.-1252   	; 0x284c <prvUnlockQueue>
    2d30:	bc d2       	rcall	.+1400   	; 0x32aa <xTaskResumeAll>
    2d32:	81 11       	cpse	r24, r1
    2d34:	97 cf       	rjmp	.-210    	; 0x2c64 <xQueueSemaphoreTake+0x32>
    2d36:	42 dc       	rcall	.-1916   	; 0x25bc <vPortYield>
    2d38:	95 cf       	rjmp	.-214    	; 0x2c64 <xQueueSemaphoreTake+0x32>
    2d3a:	c8 01       	movw	r24, r16
    2d3c:	87 dd       	rcall	.-1266   	; 0x284c <prvUnlockQueue>
    2d3e:	b5 d2       	rcall	.+1386   	; 0x32aa <xTaskResumeAll>
    2d40:	91 cf       	rjmp	.-222    	; 0x2c64 <xQueueSemaphoreTake+0x32>
    2d42:	c8 01       	movw	r24, r16
    2d44:	83 dd       	rcall	.-1274   	; 0x284c <prvUnlockQueue>
    2d46:	b1 d2       	rcall	.+1378   	; 0x32aa <xTaskResumeAll>
    2d48:	c8 01       	movw	r24, r16
    2d4a:	fd dc       	rcall	.-1542   	; 0x2746 <prvIsQueueEmpty>
    2d4c:	88 23       	and	r24, r24
    2d4e:	09 f4       	brne	.+2      	; 0x2d52 <xQueueSemaphoreTake+0x120>
    2d50:	89 cf       	rjmp	.-238    	; 0x2c64 <xQueueSemaphoreTake+0x32>
    2d52:	bb 20       	and	r11, r11
    2d54:	c9 f0       	breq	.+50     	; 0x2d88 <xQueueSemaphoreTake+0x156>
    2d56:	0f b6       	in	r0, 0x3f	; 63
    2d58:	f8 94       	cli
    2d5a:	0f 92       	push	r0
    2d5c:	f8 01       	movw	r30, r16
    2d5e:	81 89       	ldd	r24, Z+17	; 0x11
    2d60:	88 23       	and	r24, r24
    2d62:	39 f0       	breq	.+14     	; 0x2d72 <xQueueSemaphoreTake+0x140>
    2d64:	06 88       	ldd	r0, Z+22	; 0x16
    2d66:	f7 89       	ldd	r31, Z+23	; 0x17
    2d68:	e0 2d       	mov	r30, r0
    2d6a:	80 81       	ld	r24, Z
    2d6c:	64 e0       	ldi	r22, 0x04	; 4
    2d6e:	68 1b       	sub	r22, r24
    2d70:	01 c0       	rjmp	.+2      	; 0x2d74 <xQueueSemaphoreTake+0x142>
    2d72:	60 e0       	ldi	r22, 0x00	; 0
    2d74:	d8 01       	movw	r26, r16
    2d76:	14 96       	adiw	r26, 0x04	; 4
    2d78:	8d 91       	ld	r24, X+
    2d7a:	9c 91       	ld	r25, X
    2d7c:	15 97       	sbiw	r26, 0x05	; 5
    2d7e:	0a d5       	rcall	.+2580   	; 0x3794 <vTaskPriorityDisinheritAfterTimeout>
    2d80:	0f 90       	pop	r0
    2d82:	0f be       	out	0x3f, r0	; 63
    2d84:	80 e0       	ldi	r24, 0x00	; 0
    2d86:	01 c0       	rjmp	.+2      	; 0x2d8a <xQueueSemaphoreTake+0x158>
    2d88:	80 e0       	ldi	r24, 0x00	; 0
    2d8a:	0f 90       	pop	r0
    2d8c:	0f 90       	pop	r0
    2d8e:	0f 90       	pop	r0
    2d90:	0f 90       	pop	r0
    2d92:	0f 90       	pop	r0
    2d94:	df 91       	pop	r29
    2d96:	cf 91       	pop	r28
    2d98:	1f 91       	pop	r17
    2d9a:	0f 91       	pop	r16
    2d9c:	ff 90       	pop	r15
    2d9e:	ef 90       	pop	r14
    2da0:	df 90       	pop	r13
    2da2:	cf 90       	pop	r12
    2da4:	bf 90       	pop	r11
    2da6:	08 95       	ret

00002da8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
    {
    2da8:	cf 93       	push	r28
    2daa:	df 93       	push	r29
    2dac:	ec 01       	movw	r28, r24
        will not actually cause the task to block, just place it on a blocked
        list.  It will not block until the scheduler is unlocked - at which
        time a yield will be performed.  If an item is added to the queue while
        the queue is locked, and the calling task blocks on the queue, then the
        calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    2dae:	0f b6       	in	r0, 0x3f	; 63
    2db0:	f8 94       	cli
    2db2:	0f 92       	push	r0
    2db4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2db6:	8f 3f       	cpi	r24, 0xFF	; 255
    2db8:	09 f4       	brne	.+2      	; 0x2dbc <vQueueWaitForMessageRestricted+0x14>
    2dba:	1d 8e       	std	Y+29, r1	; 0x1d
    2dbc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2dbe:	8f 3f       	cpi	r24, 0xFF	; 255
    2dc0:	09 f4       	brne	.+2      	; 0x2dc4 <vQueueWaitForMessageRestricted+0x1c>
    2dc2:	1e 8e       	std	Y+30, r1	; 0x1e
    2dc4:	0f 90       	pop	r0
    2dc6:	0f be       	out	0x3f, r0	; 63
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    2dc8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2dca:	81 11       	cpse	r24, r1
    2dcc:	03 c0       	rjmp	.+6      	; 0x2dd4 <vQueueWaitForMessageRestricted+0x2c>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    2dce:	ce 01       	movw	r24, r28
    2dd0:	41 96       	adiw	r24, 0x11	; 17
    2dd2:	86 d3       	rcall	.+1804   	; 0x34e0 <vTaskPlaceOnEventListRestricted>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
        prvUnlockQueue( pxQueue );
    2dd4:	ce 01       	movw	r24, r28
    2dd6:	3a dd       	rcall	.-1420   	; 0x284c <prvUnlockQueue>
    }
    2dd8:	df 91       	pop	r29
    2dda:	cf 91       	pop	r28
    2ddc:	08 95       	ret

00002dde <prvResetNextTaskUnblockTime>:
    2dde:	e0 91 96 0c 	lds	r30, 0x0C96	; 0x800c96 <pxDelayedTaskList>
    2de2:	f0 91 97 0c 	lds	r31, 0x0C97	; 0x800c97 <pxDelayedTaskList+0x1>
    2de6:	80 81       	ld	r24, Z
    2de8:	81 11       	cpse	r24, r1
    2dea:	07 c0       	rjmp	.+14     	; 0x2dfa <prvResetNextTaskUnblockTime+0x1c>
    2dec:	8f ef       	ldi	r24, 0xFF	; 255
    2dee:	9f ef       	ldi	r25, 0xFF	; 255
    2df0:	90 93 77 0c 	sts	0x0C77, r25	; 0x800c77 <xNextTaskUnblockTime+0x1>
    2df4:	80 93 76 0c 	sts	0x0C76, r24	; 0x800c76 <xNextTaskUnblockTime>
    2df8:	08 95       	ret
    2dfa:	e0 91 96 0c 	lds	r30, 0x0C96	; 0x800c96 <pxDelayedTaskList>
    2dfe:	f0 91 97 0c 	lds	r31, 0x0C97	; 0x800c97 <pxDelayedTaskList+0x1>
    2e02:	05 80       	ldd	r0, Z+5	; 0x05
    2e04:	f6 81       	ldd	r31, Z+6	; 0x06
    2e06:	e0 2d       	mov	r30, r0
    2e08:	06 80       	ldd	r0, Z+6	; 0x06
    2e0a:	f7 81       	ldd	r31, Z+7	; 0x07
    2e0c:	e0 2d       	mov	r30, r0
    2e0e:	82 81       	ldd	r24, Z+2	; 0x02
    2e10:	93 81       	ldd	r25, Z+3	; 0x03
    2e12:	90 93 77 0c 	sts	0x0C77, r25	; 0x800c77 <xNextTaskUnblockTime+0x1>
    2e16:	80 93 76 0c 	sts	0x0C76, r24	; 0x800c76 <xNextTaskUnblockTime>
    2e1a:	08 95       	ret

00002e1c <prvAddCurrentTaskToDelayedList>:
    2e1c:	0f 93       	push	r16
    2e1e:	1f 93       	push	r17
    2e20:	cf 93       	push	r28
    2e22:	df 93       	push	r29
    2e24:	ec 01       	movw	r28, r24
    2e26:	00 91 7e 0c 	lds	r16, 0x0C7E	; 0x800c7e <xTickCount>
    2e2a:	10 91 7f 0c 	lds	r17, 0x0C7F	; 0x800c7f <xTickCount+0x1>
    2e2e:	80 91 bc 0c 	lds	r24, 0x0CBC	; 0x800cbc <pxCurrentTCB>
    2e32:	90 91 bd 0c 	lds	r25, 0x0CBD	; 0x800cbd <pxCurrentTCB+0x1>
    2e36:	02 96       	adiw	r24, 0x02	; 2
    2e38:	ec da       	rcall	.-2600   	; 0x2412 <uxListRemove>
    2e3a:	c0 0f       	add	r28, r16
    2e3c:	d1 1f       	adc	r29, r17
    2e3e:	e0 91 bc 0c 	lds	r30, 0x0CBC	; 0x800cbc <pxCurrentTCB>
    2e42:	f0 91 bd 0c 	lds	r31, 0x0CBD	; 0x800cbd <pxCurrentTCB+0x1>
    2e46:	d3 83       	std	Z+3, r29	; 0x03
    2e48:	c2 83       	std	Z+2, r28	; 0x02
    2e4a:	c0 17       	cp	r28, r16
    2e4c:	d1 07       	cpc	r29, r17
    2e4e:	60 f4       	brcc	.+24     	; 0x2e68 <prvAddCurrentTaskToDelayedList+0x4c>
    2e50:	60 91 bc 0c 	lds	r22, 0x0CBC	; 0x800cbc <pxCurrentTCB>
    2e54:	70 91 bd 0c 	lds	r23, 0x0CBD	; 0x800cbd <pxCurrentTCB+0x1>
    2e58:	80 91 94 0c 	lds	r24, 0x0C94	; 0x800c94 <pxOverflowDelayedTaskList>
    2e5c:	90 91 95 0c 	lds	r25, 0x0C95	; 0x800c95 <pxOverflowDelayedTaskList+0x1>
    2e60:	6e 5f       	subi	r22, 0xFE	; 254
    2e62:	7f 4f       	sbci	r23, 0xFF	; 255
    2e64:	a5 da       	rcall	.-2742   	; 0x23b0 <vListInsert>
    2e66:	16 c0       	rjmp	.+44     	; 0x2e94 <prvAddCurrentTaskToDelayedList+0x78>
    2e68:	60 91 bc 0c 	lds	r22, 0x0CBC	; 0x800cbc <pxCurrentTCB>
    2e6c:	70 91 bd 0c 	lds	r23, 0x0CBD	; 0x800cbd <pxCurrentTCB+0x1>
    2e70:	80 91 96 0c 	lds	r24, 0x0C96	; 0x800c96 <pxDelayedTaskList>
    2e74:	90 91 97 0c 	lds	r25, 0x0C97	; 0x800c97 <pxDelayedTaskList+0x1>
    2e78:	6e 5f       	subi	r22, 0xFE	; 254
    2e7a:	7f 4f       	sbci	r23, 0xFF	; 255
    2e7c:	99 da       	rcall	.-2766   	; 0x23b0 <vListInsert>
    2e7e:	80 91 76 0c 	lds	r24, 0x0C76	; 0x800c76 <xNextTaskUnblockTime>
    2e82:	90 91 77 0c 	lds	r25, 0x0C77	; 0x800c77 <xNextTaskUnblockTime+0x1>
    2e86:	c8 17       	cp	r28, r24
    2e88:	d9 07       	cpc	r29, r25
    2e8a:	20 f4       	brcc	.+8      	; 0x2e94 <prvAddCurrentTaskToDelayedList+0x78>
    2e8c:	d0 93 77 0c 	sts	0x0C77, r29	; 0x800c77 <xNextTaskUnblockTime+0x1>
    2e90:	c0 93 76 0c 	sts	0x0C76, r28	; 0x800c76 <xNextTaskUnblockTime>
    2e94:	df 91       	pop	r29
    2e96:	cf 91       	pop	r28
    2e98:	1f 91       	pop	r17
    2e9a:	0f 91       	pop	r16
    2e9c:	08 95       	ret

00002e9e <xTaskCreateStatic>:
    2e9e:	6f 92       	push	r6
    2ea0:	7f 92       	push	r7
    2ea2:	8f 92       	push	r8
    2ea4:	9f 92       	push	r9
    2ea6:	af 92       	push	r10
    2ea8:	bf 92       	push	r11
    2eaa:	cf 92       	push	r12
    2eac:	df 92       	push	r13
    2eae:	ef 92       	push	r14
    2eb0:	ff 92       	push	r15
    2eb2:	0f 93       	push	r16
    2eb4:	cf 93       	push	r28
    2eb6:	df 93       	push	r29
    2eb8:	c1 14       	cp	r12, r1
    2eba:	d1 04       	cpc	r13, r1
    2ebc:	09 f4       	brne	.+2      	; 0x2ec0 <xTaskCreateStatic+0x22>
    2ebe:	cd c0       	rjmp	.+410    	; 0x305a <xTaskCreateStatic+0x1bc>
    2ec0:	e1 14       	cp	r14, r1
    2ec2:	f1 04       	cpc	r15, r1
    2ec4:	09 f4       	brne	.+2      	; 0x2ec8 <xTaskCreateStatic+0x2a>
    2ec6:	cc c0       	rjmp	.+408    	; 0x3060 <xTaskCreateStatic+0x1c2>
    2ec8:	e6 01       	movw	r28, r12
    2eca:	59 01       	movw	r10, r18
    2ecc:	3a 01       	movw	r6, r20
    2ece:	4b 01       	movw	r8, r22
    2ed0:	6c 01       	movw	r12, r24
    2ed2:	f8 8e       	std	Y+24, r15	; 0x18
    2ed4:	ef 8a       	std	Y+23, r14	; 0x17
    2ed6:	65 ea       	ldi	r22, 0xA5	; 165
    2ed8:	70 e0       	ldi	r23, 0x00	; 0
    2eda:	c7 01       	movw	r24, r14
    2edc:	0e 94 74 1f 	call	0x3ee8	; 0x3ee8 <memset>
    2ee0:	81 e0       	ldi	r24, 0x01	; 1
    2ee2:	68 1a       	sub	r6, r24
    2ee4:	71 08       	sbc	r7, r1
    2ee6:	ef 88       	ldd	r14, Y+23	; 0x17
    2ee8:	f8 8c       	ldd	r15, Y+24	; 0x18
    2eea:	e6 0c       	add	r14, r6
    2eec:	f7 1c       	adc	r15, r7
    2eee:	d4 01       	movw	r26, r8
    2ef0:	8c 91       	ld	r24, X
    2ef2:	89 8f       	std	Y+25, r24	; 0x19
    2ef4:	8c 91       	ld	r24, X
    2ef6:	88 23       	and	r24, r24
    2ef8:	a1 f0       	breq	.+40     	; 0x2f22 <xTaskCreateStatic+0x84>
    2efa:	ae 01       	movw	r20, r28
    2efc:	46 5e       	subi	r20, 0xE6	; 230
    2efe:	5f 4f       	sbci	r21, 0xFF	; 255
    2f00:	f4 01       	movw	r30, r8
    2f02:	31 96       	adiw	r30, 0x01	; 1
    2f04:	b8 e0       	ldi	r27, 0x08	; 8
    2f06:	8b 0e       	add	r8, r27
    2f08:	91 1c       	adc	r9, r1
    2f0a:	cf 01       	movw	r24, r30
    2f0c:	21 91       	ld	r18, Z+
    2f0e:	da 01       	movw	r26, r20
    2f10:	2d 93       	st	X+, r18
    2f12:	ad 01       	movw	r20, r26
    2f14:	dc 01       	movw	r26, r24
    2f16:	8c 91       	ld	r24, X
    2f18:	88 23       	and	r24, r24
    2f1a:	19 f0       	breq	.+6      	; 0x2f22 <xTaskCreateStatic+0x84>
    2f1c:	e8 15       	cp	r30, r8
    2f1e:	f9 05       	cpc	r31, r9
    2f20:	a1 f7       	brne	.-24     	; 0x2f0a <xTaskCreateStatic+0x6c>
    2f22:	18 a2       	std	Y+32, r1	; 0x20
    2f24:	04 30       	cpi	r16, 0x04	; 4
    2f26:	08 f0       	brcs	.+2      	; 0x2f2a <xTaskCreateStatic+0x8c>
    2f28:	03 e0       	ldi	r16, 0x03	; 3
    2f2a:	0e 8b       	std	Y+22, r16	; 0x16
    2f2c:	09 a3       	std	Y+33, r16	; 0x21
    2f2e:	1a a2       	std	Y+34, r1	; 0x22
    2f30:	4e 01       	movw	r8, r28
    2f32:	b2 e0       	ldi	r27, 0x02	; 2
    2f34:	8b 0e       	add	r8, r27
    2f36:	91 1c       	adc	r9, r1
    2f38:	c4 01       	movw	r24, r8
    2f3a:	15 da       	rcall	.-3030   	; 0x2366 <vListInitialiseItem>
    2f3c:	ce 01       	movw	r24, r28
    2f3e:	0c 96       	adiw	r24, 0x0c	; 12
    2f40:	12 da       	rcall	.-3036   	; 0x2366 <vListInitialiseItem>
    2f42:	d9 87       	std	Y+9, r29	; 0x09
    2f44:	c8 87       	std	Y+8, r28	; 0x08
    2f46:	84 e0       	ldi	r24, 0x04	; 4
    2f48:	90 e0       	ldi	r25, 0x00	; 0
    2f4a:	80 1b       	sub	r24, r16
    2f4c:	91 09       	sbc	r25, r1
    2f4e:	9d 87       	std	Y+13, r25	; 0x0d
    2f50:	8c 87       	std	Y+12, r24	; 0x0c
    2f52:	db 8b       	std	Y+19, r29	; 0x13
    2f54:	ca 8b       	std	Y+18, r28	; 0x12
    2f56:	1b a2       	std	Y+35, r1	; 0x23
    2f58:	1c a2       	std	Y+36, r1	; 0x24
    2f5a:	1d a2       	std	Y+37, r1	; 0x25
    2f5c:	1e a2       	std	Y+38, r1	; 0x26
    2f5e:	1f a2       	std	Y+39, r1	; 0x27
    2f60:	a5 01       	movw	r20, r10
    2f62:	b6 01       	movw	r22, r12
    2f64:	c7 01       	movw	r24, r14
    2f66:	7c da       	rcall	.-2824   	; 0x2460 <pxPortInitialiseStack>
    2f68:	99 83       	std	Y+1, r25	; 0x01
    2f6a:	88 83       	st	Y, r24
    2f6c:	0f b6       	in	r0, 0x3f	; 63
    2f6e:	f8 94       	cli
    2f70:	0f 92       	push	r0
    2f72:	80 91 80 0c 	lds	r24, 0x0C80	; 0x800c80 <uxCurrentNumberOfTasks>
    2f76:	8f 5f       	subi	r24, 0xFF	; 255
    2f78:	80 93 80 0c 	sts	0x0C80, r24	; 0x800c80 <uxCurrentNumberOfTasks>
    2f7c:	80 91 bc 0c 	lds	r24, 0x0CBC	; 0x800cbc <pxCurrentTCB>
    2f80:	90 91 bd 0c 	lds	r25, 0x0CBD	; 0x800cbd <pxCurrentTCB+0x1>
    2f84:	89 2b       	or	r24, r25
    2f86:	69 f5       	brne	.+90     	; 0x2fe2 <xTaskCreateStatic+0x144>
    2f88:	d0 93 bd 0c 	sts	0x0CBD, r29	; 0x800cbd <pxCurrentTCB+0x1>
    2f8c:	c0 93 bc 0c 	sts	0x0CBC, r28	; 0x800cbc <pxCurrentTCB>
    2f90:	80 91 80 0c 	lds	r24, 0x0C80	; 0x800c80 <uxCurrentNumberOfTasks>
    2f94:	81 30       	cpi	r24, 0x01	; 1
    2f96:	a9 f5       	brne	.+106    	; 0x3002 <xTaskCreateStatic+0x164>
    2f98:	88 e9       	ldi	r24, 0x98	; 152
    2f9a:	9c e0       	ldi	r25, 0x0C	; 12
    2f9c:	d6 d9       	rcall	.-3156   	; 0x234a <vListInitialise>
    2f9e:	81 ea       	ldi	r24, 0xA1	; 161
    2fa0:	9c e0       	ldi	r25, 0x0C	; 12
    2fa2:	d3 d9       	rcall	.-3162   	; 0x234a <vListInitialise>
    2fa4:	8a ea       	ldi	r24, 0xAA	; 170
    2fa6:	9c e0       	ldi	r25, 0x0C	; 12
    2fa8:	d0 d9       	rcall	.-3168   	; 0x234a <vListInitialise>
    2faa:	83 eb       	ldi	r24, 0xB3	; 179
    2fac:	9c e0       	ldi	r25, 0x0C	; 12
    2fae:	cd d9       	rcall	.-3174   	; 0x234a <vListInitialise>
    2fb0:	8c e6       	ldi	r24, 0x6C	; 108
    2fb2:	9c e0       	ldi	r25, 0x0C	; 12
    2fb4:	ca d9       	rcall	.-3180   	; 0x234a <vListInitialise>
    2fb6:	83 e6       	ldi	r24, 0x63	; 99
    2fb8:	9c e0       	ldi	r25, 0x0C	; 12
    2fba:	c7 d9       	rcall	.-3186   	; 0x234a <vListInitialise>
    2fbc:	8b e8       	ldi	r24, 0x8B	; 139
    2fbe:	9c e0       	ldi	r25, 0x0C	; 12
    2fc0:	c4 d9       	rcall	.-3192   	; 0x234a <vListInitialise>
    2fc2:	82 e8       	ldi	r24, 0x82	; 130
    2fc4:	9c e0       	ldi	r25, 0x0C	; 12
    2fc6:	c1 d9       	rcall	.-3198   	; 0x234a <vListInitialise>
    2fc8:	8c e6       	ldi	r24, 0x6C	; 108
    2fca:	9c e0       	ldi	r25, 0x0C	; 12
    2fcc:	90 93 97 0c 	sts	0x0C97, r25	; 0x800c97 <pxDelayedTaskList+0x1>
    2fd0:	80 93 96 0c 	sts	0x0C96, r24	; 0x800c96 <pxDelayedTaskList>
    2fd4:	83 e6       	ldi	r24, 0x63	; 99
    2fd6:	9c e0       	ldi	r25, 0x0C	; 12
    2fd8:	90 93 95 0c 	sts	0x0C95, r25	; 0x800c95 <pxOverflowDelayedTaskList+0x1>
    2fdc:	80 93 94 0c 	sts	0x0C94, r24	; 0x800c94 <pxOverflowDelayedTaskList>
    2fe0:	10 c0       	rjmp	.+32     	; 0x3002 <xTaskCreateStatic+0x164>
    2fe2:	80 91 7c 0c 	lds	r24, 0x0C7C	; 0x800c7c <xSchedulerRunning>
    2fe6:	81 11       	cpse	r24, r1
    2fe8:	0c c0       	rjmp	.+24     	; 0x3002 <xTaskCreateStatic+0x164>
    2fea:	e0 91 bc 0c 	lds	r30, 0x0CBC	; 0x800cbc <pxCurrentTCB>
    2fee:	f0 91 bd 0c 	lds	r31, 0x0CBD	; 0x800cbd <pxCurrentTCB+0x1>
    2ff2:	96 89       	ldd	r25, Z+22	; 0x16
    2ff4:	8e 89       	ldd	r24, Y+22	; 0x16
    2ff6:	89 17       	cp	r24, r25
    2ff8:	20 f0       	brcs	.+8      	; 0x3002 <xTaskCreateStatic+0x164>
    2ffa:	d0 93 bd 0c 	sts	0x0CBD, r29	; 0x800cbd <pxCurrentTCB+0x1>
    2ffe:	c0 93 bc 0c 	sts	0x0CBC, r28	; 0x800cbc <pxCurrentTCB>
    3002:	80 91 78 0c 	lds	r24, 0x0C78	; 0x800c78 <uxTaskNumber>
    3006:	8f 5f       	subi	r24, 0xFF	; 255
    3008:	80 93 78 0c 	sts	0x0C78, r24	; 0x800c78 <uxTaskNumber>
    300c:	8e 89       	ldd	r24, Y+22	; 0x16
    300e:	90 91 7d 0c 	lds	r25, 0x0C7D	; 0x800c7d <uxTopReadyPriority>
    3012:	98 17       	cp	r25, r24
    3014:	10 f4       	brcc	.+4      	; 0x301a <xTaskCreateStatic+0x17c>
    3016:	80 93 7d 0c 	sts	0x0C7D, r24	; 0x800c7d <uxTopReadyPriority>
    301a:	90 e0       	ldi	r25, 0x00	; 0
    301c:	9c 01       	movw	r18, r24
    301e:	22 0f       	add	r18, r18
    3020:	33 1f       	adc	r19, r19
    3022:	22 0f       	add	r18, r18
    3024:	33 1f       	adc	r19, r19
    3026:	22 0f       	add	r18, r18
    3028:	33 1f       	adc	r19, r19
    302a:	82 0f       	add	r24, r18
    302c:	93 1f       	adc	r25, r19
    302e:	b4 01       	movw	r22, r8
    3030:	88 56       	subi	r24, 0x68	; 104
    3032:	93 4f       	sbci	r25, 0xF3	; 243
    3034:	9c d9       	rcall	.-3272   	; 0x236e <vListInsertEnd>
    3036:	0f 90       	pop	r0
    3038:	0f be       	out	0x3f, r0	; 63
    303a:	80 91 7c 0c 	lds	r24, 0x0C7C	; 0x800c7c <xSchedulerRunning>
    303e:	88 23       	and	r24, r24
    3040:	91 f0       	breq	.+36     	; 0x3066 <xTaskCreateStatic+0x1c8>
    3042:	e0 91 bc 0c 	lds	r30, 0x0CBC	; 0x800cbc <pxCurrentTCB>
    3046:	f0 91 bd 0c 	lds	r31, 0x0CBD	; 0x800cbd <pxCurrentTCB+0x1>
    304a:	96 89       	ldd	r25, Z+22	; 0x16
    304c:	8e 89       	ldd	r24, Y+22	; 0x16
    304e:	98 17       	cp	r25, r24
    3050:	68 f4       	brcc	.+26     	; 0x306c <xTaskCreateStatic+0x1ce>
    3052:	b4 da       	rcall	.-2712   	; 0x25bc <vPortYield>
    3054:	8c 2f       	mov	r24, r28
    3056:	9d 2f       	mov	r25, r29
    3058:	0b c0       	rjmp	.+22     	; 0x3070 <xTaskCreateStatic+0x1d2>
    305a:	80 e0       	ldi	r24, 0x00	; 0
    305c:	90 e0       	ldi	r25, 0x00	; 0
    305e:	08 c0       	rjmp	.+16     	; 0x3070 <xTaskCreateStatic+0x1d2>
    3060:	80 e0       	ldi	r24, 0x00	; 0
    3062:	90 e0       	ldi	r25, 0x00	; 0
    3064:	05 c0       	rjmp	.+10     	; 0x3070 <xTaskCreateStatic+0x1d2>
    3066:	8c 2f       	mov	r24, r28
    3068:	9d 2f       	mov	r25, r29
    306a:	02 c0       	rjmp	.+4      	; 0x3070 <xTaskCreateStatic+0x1d2>
    306c:	8c 2f       	mov	r24, r28
    306e:	9d 2f       	mov	r25, r29
    3070:	df 91       	pop	r29
    3072:	cf 91       	pop	r28
    3074:	0f 91       	pop	r16
    3076:	ff 90       	pop	r15
    3078:	ef 90       	pop	r14
    307a:	df 90       	pop	r13
    307c:	cf 90       	pop	r12
    307e:	bf 90       	pop	r11
    3080:	af 90       	pop	r10
    3082:	9f 90       	pop	r9
    3084:	8f 90       	pop	r8
    3086:	7f 90       	pop	r7
    3088:	6f 90       	pop	r6
    308a:	08 95       	ret

0000308c <vTaskStartScheduler>:
    308c:	cf 92       	push	r12
    308e:	df 92       	push	r13
    3090:	ef 92       	push	r14
    3092:	ff 92       	push	r15
    3094:	0f 93       	push	r16
    3096:	cf 93       	push	r28
    3098:	df 93       	push	r29
    309a:	00 d0       	rcall	.+0      	; 0x309c <vTaskStartScheduler+0x10>
    309c:	00 d0       	rcall	.+0      	; 0x309e <vTaskStartScheduler+0x12>
    309e:	cd b7       	in	r28, 0x3d	; 61
    30a0:	de b7       	in	r29, 0x3e	; 62
    30a2:	1e 82       	std	Y+6, r1	; 0x06
    30a4:	1d 82       	std	Y+5, r1	; 0x05
    30a6:	1c 82       	std	Y+4, r1	; 0x04
    30a8:	1b 82       	std	Y+3, r1	; 0x03
    30aa:	ae 01       	movw	r20, r28
    30ac:	4f 5f       	subi	r20, 0xFF	; 255
    30ae:	5f 4f       	sbci	r21, 0xFF	; 255
    30b0:	be 01       	movw	r22, r28
    30b2:	6d 5f       	subi	r22, 0xFD	; 253
    30b4:	7f 4f       	sbci	r23, 0xFF	; 255
    30b6:	ce 01       	movw	r24, r28
    30b8:	05 96       	adiw	r24, 0x05	; 5
    30ba:	27 d9       	rcall	.-3506   	; 0x230a <vApplicationGetIdleTaskMemory>
    30bc:	cd 80       	ldd	r12, Y+5	; 0x05
    30be:	de 80       	ldd	r13, Y+6	; 0x06
    30c0:	eb 80       	ldd	r14, Y+3	; 0x03
    30c2:	fc 80       	ldd	r15, Y+4	; 0x04
    30c4:	49 81       	ldd	r20, Y+1	; 0x01
    30c6:	5a 81       	ldd	r21, Y+2	; 0x02
    30c8:	00 e0       	ldi	r16, 0x00	; 0
    30ca:	20 e0       	ldi	r18, 0x00	; 0
    30cc:	30 e0       	ldi	r19, 0x00	; 0
    30ce:	65 e6       	ldi	r22, 0x65	; 101
    30d0:	72 e0       	ldi	r23, 0x02	; 2
    30d2:	82 e7       	ldi	r24, 0x72	; 114
    30d4:	90 e0       	ldi	r25, 0x00	; 0
    30d6:	e3 de       	rcall	.-570    	; 0x2e9e <xTaskCreateStatic>
    30d8:	89 2b       	or	r24, r25
    30da:	91 f0       	breq	.+36     	; 0x3100 <vTaskStartScheduler+0x74>
    30dc:	1a d4       	rcall	.+2100   	; 0x3912 <xTimerCreateTimerTask>
    30de:	81 30       	cpi	r24, 0x01	; 1
    30e0:	79 f4       	brne	.+30     	; 0x3100 <vTaskStartScheduler+0x74>
    30e2:	f8 94       	cli
    30e4:	8f ef       	ldi	r24, 0xFF	; 255
    30e6:	9f ef       	ldi	r25, 0xFF	; 255
    30e8:	90 93 77 0c 	sts	0x0C77, r25	; 0x800c77 <xNextTaskUnblockTime+0x1>
    30ec:	80 93 76 0c 	sts	0x0C76, r24	; 0x800c76 <xNextTaskUnblockTime>
    30f0:	81 e0       	ldi	r24, 0x01	; 1
    30f2:	80 93 7c 0c 	sts	0x0C7C, r24	; 0x800c7c <xSchedulerRunning>
    30f6:	10 92 7f 0c 	sts	0x0C7F, r1	; 0x800c7f <xTickCount+0x1>
    30fa:	10 92 7e 0c 	sts	0x0C7E, r1	; 0x800c7e <xTickCount>
    30fe:	22 da       	rcall	.-3004   	; 0x2544 <xPortStartScheduler>
    3100:	26 96       	adiw	r28, 0x06	; 6
    3102:	0f b6       	in	r0, 0x3f	; 63
    3104:	f8 94       	cli
    3106:	de bf       	out	0x3e, r29	; 62
    3108:	0f be       	out	0x3f, r0	; 63
    310a:	cd bf       	out	0x3d, r28	; 61
    310c:	df 91       	pop	r29
    310e:	cf 91       	pop	r28
    3110:	0f 91       	pop	r16
    3112:	ff 90       	pop	r15
    3114:	ef 90       	pop	r14
    3116:	df 90       	pop	r13
    3118:	cf 90       	pop	r12
    311a:	08 95       	ret

0000311c <vTaskSuspendAll>:
    311c:	80 91 75 0c 	lds	r24, 0x0C75	; 0x800c75 <uxSchedulerSuspended>
    3120:	8f 5f       	subi	r24, 0xFF	; 255
    3122:	80 93 75 0c 	sts	0x0C75, r24	; 0x800c75 <uxSchedulerSuspended>
    3126:	08 95       	ret

00003128 <xTaskGetTickCount>:
    3128:	0f b6       	in	r0, 0x3f	; 63
    312a:	f8 94       	cli
    312c:	0f 92       	push	r0
    312e:	80 91 7e 0c 	lds	r24, 0x0C7E	; 0x800c7e <xTickCount>
    3132:	90 91 7f 0c 	lds	r25, 0x0C7F	; 0x800c7f <xTickCount+0x1>
    3136:	0f 90       	pop	r0
    3138:	0f be       	out	0x3f, r0	; 63
    313a:	08 95       	ret

0000313c <xTaskIncrementTick>:
    313c:	cf 92       	push	r12
    313e:	df 92       	push	r13
    3140:	ef 92       	push	r14
    3142:	ff 92       	push	r15
    3144:	0f 93       	push	r16
    3146:	1f 93       	push	r17
    3148:	cf 93       	push	r28
    314a:	df 93       	push	r29
    314c:	80 91 75 0c 	lds	r24, 0x0C75	; 0x800c75 <uxSchedulerSuspended>
    3150:	81 11       	cpse	r24, r1
    3152:	95 c0       	rjmp	.+298    	; 0x327e <xTaskIncrementTick+0x142>
    3154:	e0 90 7e 0c 	lds	r14, 0x0C7E	; 0x800c7e <xTickCount>
    3158:	f0 90 7f 0c 	lds	r15, 0x0C7F	; 0x800c7f <xTickCount+0x1>
    315c:	8f ef       	ldi	r24, 0xFF	; 255
    315e:	e8 1a       	sub	r14, r24
    3160:	f8 0a       	sbc	r15, r24
    3162:	f0 92 7f 0c 	sts	0x0C7F, r15	; 0x800c7f <xTickCount+0x1>
    3166:	e0 92 7e 0c 	sts	0x0C7E, r14	; 0x800c7e <xTickCount>
    316a:	e1 14       	cp	r14, r1
    316c:	f1 04       	cpc	r15, r1
    316e:	b1 f4       	brne	.+44     	; 0x319c <xTaskIncrementTick+0x60>
    3170:	80 91 96 0c 	lds	r24, 0x0C96	; 0x800c96 <pxDelayedTaskList>
    3174:	90 91 97 0c 	lds	r25, 0x0C97	; 0x800c97 <pxDelayedTaskList+0x1>
    3178:	20 91 94 0c 	lds	r18, 0x0C94	; 0x800c94 <pxOverflowDelayedTaskList>
    317c:	30 91 95 0c 	lds	r19, 0x0C95	; 0x800c95 <pxOverflowDelayedTaskList+0x1>
    3180:	30 93 97 0c 	sts	0x0C97, r19	; 0x800c97 <pxDelayedTaskList+0x1>
    3184:	20 93 96 0c 	sts	0x0C96, r18	; 0x800c96 <pxDelayedTaskList>
    3188:	90 93 95 0c 	sts	0x0C95, r25	; 0x800c95 <pxOverflowDelayedTaskList+0x1>
    318c:	80 93 94 0c 	sts	0x0C94, r24	; 0x800c94 <pxOverflowDelayedTaskList>
    3190:	80 91 79 0c 	lds	r24, 0x0C79	; 0x800c79 <xNumOfOverflows>
    3194:	8f 5f       	subi	r24, 0xFF	; 255
    3196:	80 93 79 0c 	sts	0x0C79, r24	; 0x800c79 <xNumOfOverflows>
    319a:	21 de       	rcall	.-958    	; 0x2dde <prvResetNextTaskUnblockTime>
    319c:	80 91 76 0c 	lds	r24, 0x0C76	; 0x800c76 <xNextTaskUnblockTime>
    31a0:	90 91 77 0c 	lds	r25, 0x0C77	; 0x800c77 <xNextTaskUnblockTime+0x1>
    31a4:	e8 16       	cp	r14, r24
    31a6:	f9 06       	cpc	r15, r25
    31a8:	10 f4       	brcc	.+4      	; 0x31ae <xTaskIncrementTick+0x72>
    31aa:	d1 2c       	mov	r13, r1
    31ac:	50 c0       	rjmp	.+160    	; 0x324e <xTaskIncrementTick+0x112>
    31ae:	d1 2c       	mov	r13, r1
    31b0:	cc 24       	eor	r12, r12
    31b2:	c3 94       	inc	r12
    31b4:	e0 91 96 0c 	lds	r30, 0x0C96	; 0x800c96 <pxDelayedTaskList>
    31b8:	f0 91 97 0c 	lds	r31, 0x0C97	; 0x800c97 <pxDelayedTaskList+0x1>
    31bc:	80 81       	ld	r24, Z
    31be:	81 11       	cpse	r24, r1
    31c0:	07 c0       	rjmp	.+14     	; 0x31d0 <xTaskIncrementTick+0x94>
    31c2:	8f ef       	ldi	r24, 0xFF	; 255
    31c4:	9f ef       	ldi	r25, 0xFF	; 255
    31c6:	90 93 77 0c 	sts	0x0C77, r25	; 0x800c77 <xNextTaskUnblockTime+0x1>
    31ca:	80 93 76 0c 	sts	0x0C76, r24	; 0x800c76 <xNextTaskUnblockTime>
    31ce:	3f c0       	rjmp	.+126    	; 0x324e <xTaskIncrementTick+0x112>
    31d0:	e0 91 96 0c 	lds	r30, 0x0C96	; 0x800c96 <pxDelayedTaskList>
    31d4:	f0 91 97 0c 	lds	r31, 0x0C97	; 0x800c97 <pxDelayedTaskList+0x1>
    31d8:	05 80       	ldd	r0, Z+5	; 0x05
    31da:	f6 81       	ldd	r31, Z+6	; 0x06
    31dc:	e0 2d       	mov	r30, r0
    31de:	c6 81       	ldd	r28, Z+6	; 0x06
    31e0:	d7 81       	ldd	r29, Z+7	; 0x07
    31e2:	8a 81       	ldd	r24, Y+2	; 0x02
    31e4:	9b 81       	ldd	r25, Y+3	; 0x03
    31e6:	e8 16       	cp	r14, r24
    31e8:	f9 06       	cpc	r15, r25
    31ea:	28 f4       	brcc	.+10     	; 0x31f6 <xTaskIncrementTick+0xba>
    31ec:	90 93 77 0c 	sts	0x0C77, r25	; 0x800c77 <xNextTaskUnblockTime+0x1>
    31f0:	80 93 76 0c 	sts	0x0C76, r24	; 0x800c76 <xNextTaskUnblockTime>
    31f4:	2c c0       	rjmp	.+88     	; 0x324e <xTaskIncrementTick+0x112>
    31f6:	8e 01       	movw	r16, r28
    31f8:	0e 5f       	subi	r16, 0xFE	; 254
    31fa:	1f 4f       	sbci	r17, 0xFF	; 255
    31fc:	c8 01       	movw	r24, r16
    31fe:	09 d9       	rcall	.-3566   	; 0x2412 <uxListRemove>
    3200:	8c 89       	ldd	r24, Y+20	; 0x14
    3202:	9d 89       	ldd	r25, Y+21	; 0x15
    3204:	89 2b       	or	r24, r25
    3206:	19 f0       	breq	.+6      	; 0x320e <xTaskIncrementTick+0xd2>
    3208:	ce 01       	movw	r24, r28
    320a:	0c 96       	adiw	r24, 0x0c	; 12
    320c:	02 d9       	rcall	.-3580   	; 0x2412 <uxListRemove>
    320e:	8e 89       	ldd	r24, Y+22	; 0x16
    3210:	90 91 7d 0c 	lds	r25, 0x0C7D	; 0x800c7d <uxTopReadyPriority>
    3214:	98 17       	cp	r25, r24
    3216:	10 f4       	brcc	.+4      	; 0x321c <xTaskIncrementTick+0xe0>
    3218:	80 93 7d 0c 	sts	0x0C7D, r24	; 0x800c7d <uxTopReadyPriority>
    321c:	90 e0       	ldi	r25, 0x00	; 0
    321e:	9c 01       	movw	r18, r24
    3220:	22 0f       	add	r18, r18
    3222:	33 1f       	adc	r19, r19
    3224:	22 0f       	add	r18, r18
    3226:	33 1f       	adc	r19, r19
    3228:	22 0f       	add	r18, r18
    322a:	33 1f       	adc	r19, r19
    322c:	82 0f       	add	r24, r18
    322e:	93 1f       	adc	r25, r19
    3230:	b8 01       	movw	r22, r16
    3232:	88 56       	subi	r24, 0x68	; 104
    3234:	93 4f       	sbci	r25, 0xF3	; 243
    3236:	9b d8       	rcall	.-3786   	; 0x236e <vListInsertEnd>
    3238:	e0 91 bc 0c 	lds	r30, 0x0CBC	; 0x800cbc <pxCurrentTCB>
    323c:	f0 91 bd 0c 	lds	r31, 0x0CBD	; 0x800cbd <pxCurrentTCB+0x1>
    3240:	9e 89       	ldd	r25, Y+22	; 0x16
    3242:	86 89       	ldd	r24, Z+22	; 0x16
    3244:	98 17       	cp	r25, r24
    3246:	08 f4       	brcc	.+2      	; 0x324a <xTaskIncrementTick+0x10e>
    3248:	b5 cf       	rjmp	.-150    	; 0x31b4 <xTaskIncrementTick+0x78>
    324a:	dc 2c       	mov	r13, r12
    324c:	b3 cf       	rjmp	.-154    	; 0x31b4 <xTaskIncrementTick+0x78>
    324e:	e0 91 bc 0c 	lds	r30, 0x0CBC	; 0x800cbc <pxCurrentTCB>
    3252:	f0 91 bd 0c 	lds	r31, 0x0CBD	; 0x800cbd <pxCurrentTCB+0x1>
    3256:	86 89       	ldd	r24, Z+22	; 0x16
    3258:	90 e0       	ldi	r25, 0x00	; 0
    325a:	fc 01       	movw	r30, r24
    325c:	ee 0f       	add	r30, r30
    325e:	ff 1f       	adc	r31, r31
    3260:	ee 0f       	add	r30, r30
    3262:	ff 1f       	adc	r31, r31
    3264:	ee 0f       	add	r30, r30
    3266:	ff 1f       	adc	r31, r31
    3268:	8e 0f       	add	r24, r30
    326a:	9f 1f       	adc	r25, r31
    326c:	fc 01       	movw	r30, r24
    326e:	e8 56       	subi	r30, 0x68	; 104
    3270:	f3 4f       	sbci	r31, 0xF3	; 243
    3272:	80 81       	ld	r24, Z
    3274:	82 30       	cpi	r24, 0x02	; 2
    3276:	48 f0       	brcs	.+18     	; 0x328a <xTaskIncrementTick+0x14e>
    3278:	dd 24       	eor	r13, r13
    327a:	d3 94       	inc	r13
    327c:	06 c0       	rjmp	.+12     	; 0x328a <xTaskIncrementTick+0x14e>
    327e:	80 91 7b 0c 	lds	r24, 0x0C7B	; 0x800c7b <uxPendedTicks>
    3282:	8f 5f       	subi	r24, 0xFF	; 255
    3284:	80 93 7b 0c 	sts	0x0C7B, r24	; 0x800c7b <uxPendedTicks>
    3288:	d1 2c       	mov	r13, r1
    328a:	80 91 7a 0c 	lds	r24, 0x0C7A	; 0x800c7a <xYieldPending>
    328e:	88 23       	and	r24, r24
    3290:	11 f0       	breq	.+4      	; 0x3296 <xTaskIncrementTick+0x15a>
    3292:	dd 24       	eor	r13, r13
    3294:	d3 94       	inc	r13
    3296:	8d 2d       	mov	r24, r13
    3298:	df 91       	pop	r29
    329a:	cf 91       	pop	r28
    329c:	1f 91       	pop	r17
    329e:	0f 91       	pop	r16
    32a0:	ff 90       	pop	r15
    32a2:	ef 90       	pop	r14
    32a4:	df 90       	pop	r13
    32a6:	cf 90       	pop	r12
    32a8:	08 95       	ret

000032aa <xTaskResumeAll>:
    32aa:	df 92       	push	r13
    32ac:	ef 92       	push	r14
    32ae:	ff 92       	push	r15
    32b0:	0f 93       	push	r16
    32b2:	1f 93       	push	r17
    32b4:	cf 93       	push	r28
    32b6:	df 93       	push	r29
    32b8:	0f b6       	in	r0, 0x3f	; 63
    32ba:	f8 94       	cli
    32bc:	0f 92       	push	r0
    32be:	80 91 75 0c 	lds	r24, 0x0C75	; 0x800c75 <uxSchedulerSuspended>
    32c2:	81 50       	subi	r24, 0x01	; 1
    32c4:	80 93 75 0c 	sts	0x0C75, r24	; 0x800c75 <uxSchedulerSuspended>
    32c8:	80 91 75 0c 	lds	r24, 0x0C75	; 0x800c75 <uxSchedulerSuspended>
    32cc:	81 11       	cpse	r24, r1
    32ce:	59 c0       	rjmp	.+178    	; 0x3382 <xTaskResumeAll+0xd8>
    32d0:	80 91 80 0c 	lds	r24, 0x0C80	; 0x800c80 <uxCurrentNumberOfTasks>
    32d4:	81 11       	cpse	r24, r1
    32d6:	30 c0       	rjmp	.+96     	; 0x3338 <xTaskResumeAll+0x8e>
    32d8:	57 c0       	rjmp	.+174    	; 0x3388 <xTaskResumeAll+0xde>
    32da:	d7 01       	movw	r26, r14
    32dc:	15 96       	adiw	r26, 0x05	; 5
    32de:	ed 91       	ld	r30, X+
    32e0:	fc 91       	ld	r31, X
    32e2:	16 97       	sbiw	r26, 0x06	; 6
    32e4:	c6 81       	ldd	r28, Z+6	; 0x06
    32e6:	d7 81       	ldd	r29, Z+7	; 0x07
    32e8:	ce 01       	movw	r24, r28
    32ea:	0c 96       	adiw	r24, 0x0c	; 12
    32ec:	92 d8       	rcall	.-3804   	; 0x2412 <uxListRemove>
    32ee:	8e 01       	movw	r16, r28
    32f0:	0e 5f       	subi	r16, 0xFE	; 254
    32f2:	1f 4f       	sbci	r17, 0xFF	; 255
    32f4:	c8 01       	movw	r24, r16
    32f6:	8d d8       	rcall	.-3814   	; 0x2412 <uxListRemove>
    32f8:	8e 89       	ldd	r24, Y+22	; 0x16
    32fa:	90 91 7d 0c 	lds	r25, 0x0C7D	; 0x800c7d <uxTopReadyPriority>
    32fe:	98 17       	cp	r25, r24
    3300:	10 f4       	brcc	.+4      	; 0x3306 <xTaskResumeAll+0x5c>
    3302:	80 93 7d 0c 	sts	0x0C7D, r24	; 0x800c7d <uxTopReadyPriority>
    3306:	90 e0       	ldi	r25, 0x00	; 0
    3308:	9c 01       	movw	r18, r24
    330a:	22 0f       	add	r18, r18
    330c:	33 1f       	adc	r19, r19
    330e:	22 0f       	add	r18, r18
    3310:	33 1f       	adc	r19, r19
    3312:	22 0f       	add	r18, r18
    3314:	33 1f       	adc	r19, r19
    3316:	82 0f       	add	r24, r18
    3318:	93 1f       	adc	r25, r19
    331a:	b8 01       	movw	r22, r16
    331c:	88 56       	subi	r24, 0x68	; 104
    331e:	93 4f       	sbci	r25, 0xF3	; 243
    3320:	26 d8       	rcall	.-4020   	; 0x236e <vListInsertEnd>
    3322:	e0 91 bc 0c 	lds	r30, 0x0CBC	; 0x800cbc <pxCurrentTCB>
    3326:	f0 91 bd 0c 	lds	r31, 0x0CBD	; 0x800cbd <pxCurrentTCB+0x1>
    332a:	9e 89       	ldd	r25, Y+22	; 0x16
    332c:	86 89       	ldd	r24, Z+22	; 0x16
    332e:	98 17       	cp	r25, r24
    3330:	68 f0       	brcs	.+26     	; 0x334c <xTaskResumeAll+0xa2>
    3332:	d0 92 7a 0c 	sts	0x0C7A, r13	; 0x800c7a <xYieldPending>
    3336:	0a c0       	rjmp	.+20     	; 0x334c <xTaskResumeAll+0xa2>
    3338:	c0 e0       	ldi	r28, 0x00	; 0
    333a:	d0 e0       	ldi	r29, 0x00	; 0
    333c:	0f 2e       	mov	r0, r31
    333e:	fb e8       	ldi	r31, 0x8B	; 139
    3340:	ef 2e       	mov	r14, r31
    3342:	fc e0       	ldi	r31, 0x0C	; 12
    3344:	ff 2e       	mov	r15, r31
    3346:	f0 2d       	mov	r31, r0
    3348:	dd 24       	eor	r13, r13
    334a:	d3 94       	inc	r13
    334c:	f7 01       	movw	r30, r14
    334e:	80 81       	ld	r24, Z
    3350:	81 11       	cpse	r24, r1
    3352:	c3 cf       	rjmp	.-122    	; 0x32da <xTaskResumeAll+0x30>
    3354:	cd 2b       	or	r28, r29
    3356:	09 f0       	breq	.+2      	; 0x335a <xTaskResumeAll+0xb0>
    3358:	42 dd       	rcall	.-1404   	; 0x2dde <prvResetNextTaskUnblockTime>
    335a:	c0 91 7b 0c 	lds	r28, 0x0C7B	; 0x800c7b <uxPendedTicks>
    335e:	cc 23       	and	r28, r28
    3360:	49 f0       	breq	.+18     	; 0x3374 <xTaskResumeAll+0xca>
    3362:	d1 e0       	ldi	r29, 0x01	; 1
    3364:	eb de       	rcall	.-554    	; 0x313c <xTaskIncrementTick>
    3366:	81 11       	cpse	r24, r1
    3368:	d0 93 7a 0c 	sts	0x0C7A, r29	; 0x800c7a <xYieldPending>
    336c:	c1 50       	subi	r28, 0x01	; 1
    336e:	d1 f7       	brne	.-12     	; 0x3364 <xTaskResumeAll+0xba>
    3370:	10 92 7b 0c 	sts	0x0C7B, r1	; 0x800c7b <uxPendedTicks>
    3374:	80 91 7a 0c 	lds	r24, 0x0C7A	; 0x800c7a <xYieldPending>
    3378:	88 23       	and	r24, r24
    337a:	29 f0       	breq	.+10     	; 0x3386 <xTaskResumeAll+0xdc>
    337c:	1f d9       	rcall	.-3522   	; 0x25bc <vPortYield>
    337e:	81 e0       	ldi	r24, 0x01	; 1
    3380:	03 c0       	rjmp	.+6      	; 0x3388 <xTaskResumeAll+0xde>
    3382:	80 e0       	ldi	r24, 0x00	; 0
    3384:	01 c0       	rjmp	.+2      	; 0x3388 <xTaskResumeAll+0xde>
    3386:	80 e0       	ldi	r24, 0x00	; 0
    3388:	0f 90       	pop	r0
    338a:	0f be       	out	0x3f, r0	; 63
    338c:	df 91       	pop	r29
    338e:	cf 91       	pop	r28
    3390:	1f 91       	pop	r17
    3392:	0f 91       	pop	r16
    3394:	ff 90       	pop	r15
    3396:	ef 90       	pop	r14
    3398:	df 90       	pop	r13
    339a:	08 95       	ret

0000339c <vTaskDelay>:
    339c:	cf 93       	push	r28
    339e:	df 93       	push	r29
    33a0:	ec 01       	movw	r28, r24
    33a2:	89 2b       	or	r24, r25
    33a4:	39 f0       	breq	.+14     	; 0x33b4 <vTaskDelay+0x18>
    33a6:	ba de       	rcall	.-652    	; 0x311c <vTaskSuspendAll>
    33a8:	60 e0       	ldi	r22, 0x00	; 0
    33aa:	ce 01       	movw	r24, r28
    33ac:	37 dd       	rcall	.-1426   	; 0x2e1c <prvAddCurrentTaskToDelayedList>
    33ae:	7d df       	rcall	.-262    	; 0x32aa <xTaskResumeAll>
    33b0:	81 11       	cpse	r24, r1
    33b2:	01 c0       	rjmp	.+2      	; 0x33b6 <vTaskDelay+0x1a>
    33b4:	03 d9       	rcall	.-3578   	; 0x25bc <vPortYield>
    33b6:	df 91       	pop	r29
    33b8:	cf 91       	pop	r28
    33ba:	08 95       	ret

000033bc <vTaskSwitchContext>:
    33bc:	80 91 75 0c 	lds	r24, 0x0C75	; 0x800c75 <uxSchedulerSuspended>
    33c0:	88 23       	and	r24, r24
    33c2:	21 f0       	breq	.+8      	; 0x33cc <vTaskSwitchContext+0x10>
    33c4:	81 e0       	ldi	r24, 0x01	; 1
    33c6:	80 93 7a 0c 	sts	0x0C7A, r24	; 0x800c7a <xYieldPending>
    33ca:	08 95       	ret
    33cc:	10 92 7a 0c 	sts	0x0C7A, r1	; 0x800c7a <xYieldPending>
    33d0:	a0 91 bc 0c 	lds	r26, 0x0CBC	; 0x800cbc <pxCurrentTCB>
    33d4:	b0 91 bd 0c 	lds	r27, 0x0CBD	; 0x800cbd <pxCurrentTCB+0x1>
    33d8:	e0 91 bc 0c 	lds	r30, 0x0CBC	; 0x800cbc <pxCurrentTCB>
    33dc:	f0 91 bd 0c 	lds	r31, 0x0CBD	; 0x800cbd <pxCurrentTCB+0x1>
    33e0:	2d 91       	ld	r18, X+
    33e2:	3c 91       	ld	r19, X
    33e4:	87 89       	ldd	r24, Z+23	; 0x17
    33e6:	90 8d       	ldd	r25, Z+24	; 0x18
    33e8:	82 17       	cp	r24, r18
    33ea:	93 07       	cpc	r25, r19
    33ec:	60 f0       	brcs	.+24     	; 0x3406 <vTaskSwitchContext+0x4a>
    33ee:	60 91 bc 0c 	lds	r22, 0x0CBC	; 0x800cbc <pxCurrentTCB>
    33f2:	70 91 bd 0c 	lds	r23, 0x0CBD	; 0x800cbd <pxCurrentTCB+0x1>
    33f6:	80 91 bc 0c 	lds	r24, 0x0CBC	; 0x800cbc <pxCurrentTCB>
    33fa:	90 91 bd 0c 	lds	r25, 0x0CBD	; 0x800cbd <pxCurrentTCB+0x1>
    33fe:	67 5e       	subi	r22, 0xE7	; 231
    3400:	7f 4f       	sbci	r23, 0xFF	; 255
    3402:	0e 94 78 11 	call	0x22f0	; 0x22f0 <vApplicationStackOverflowHook>
    3406:	20 91 7d 0c 	lds	r18, 0x0C7D	; 0x800c7d <uxTopReadyPriority>
    340a:	82 2f       	mov	r24, r18
    340c:	90 e0       	ldi	r25, 0x00	; 0
    340e:	fc 01       	movw	r30, r24
    3410:	ee 0f       	add	r30, r30
    3412:	ff 1f       	adc	r31, r31
    3414:	ee 0f       	add	r30, r30
    3416:	ff 1f       	adc	r31, r31
    3418:	ee 0f       	add	r30, r30
    341a:	ff 1f       	adc	r31, r31
    341c:	e8 0f       	add	r30, r24
    341e:	f9 1f       	adc	r31, r25
    3420:	e8 56       	subi	r30, 0x68	; 104
    3422:	f3 4f       	sbci	r31, 0xF3	; 243
    3424:	30 81       	ld	r19, Z
    3426:	31 11       	cpse	r19, r1
    3428:	11 c0       	rjmp	.+34     	; 0x344c <vTaskSwitchContext+0x90>
    342a:	21 50       	subi	r18, 0x01	; 1
    342c:	82 2f       	mov	r24, r18
    342e:	90 e0       	ldi	r25, 0x00	; 0
    3430:	fc 01       	movw	r30, r24
    3432:	ee 0f       	add	r30, r30
    3434:	ff 1f       	adc	r31, r31
    3436:	ee 0f       	add	r30, r30
    3438:	ff 1f       	adc	r31, r31
    343a:	ee 0f       	add	r30, r30
    343c:	ff 1f       	adc	r31, r31
    343e:	e8 0f       	add	r30, r24
    3440:	f9 1f       	adc	r31, r25
    3442:	e8 56       	subi	r30, 0x68	; 104
    3444:	f3 4f       	sbci	r31, 0xF3	; 243
    3446:	30 81       	ld	r19, Z
    3448:	33 23       	and	r19, r19
    344a:	79 f3       	breq	.-34     	; 0x342a <vTaskSwitchContext+0x6e>
    344c:	ac 01       	movw	r20, r24
    344e:	44 0f       	add	r20, r20
    3450:	55 1f       	adc	r21, r21
    3452:	44 0f       	add	r20, r20
    3454:	55 1f       	adc	r21, r21
    3456:	44 0f       	add	r20, r20
    3458:	55 1f       	adc	r21, r21
    345a:	48 0f       	add	r20, r24
    345c:	59 1f       	adc	r21, r25
    345e:	da 01       	movw	r26, r20
    3460:	a8 56       	subi	r26, 0x68	; 104
    3462:	b3 4f       	sbci	r27, 0xF3	; 243
    3464:	11 96       	adiw	r26, 0x01	; 1
    3466:	ed 91       	ld	r30, X+
    3468:	fc 91       	ld	r31, X
    346a:	12 97       	sbiw	r26, 0x02	; 2
    346c:	02 80       	ldd	r0, Z+2	; 0x02
    346e:	f3 81       	ldd	r31, Z+3	; 0x03
    3470:	e0 2d       	mov	r30, r0
    3472:	12 96       	adiw	r26, 0x02	; 2
    3474:	fc 93       	st	X, r31
    3476:	ee 93       	st	-X, r30
    3478:	11 97       	sbiw	r26, 0x01	; 1
    347a:	45 56       	subi	r20, 0x65	; 101
    347c:	53 4f       	sbci	r21, 0xF3	; 243
    347e:	e4 17       	cp	r30, r20
    3480:	f5 07       	cpc	r31, r21
    3482:	29 f4       	brne	.+10     	; 0x348e <vTaskSwitchContext+0xd2>
    3484:	42 81       	ldd	r20, Z+2	; 0x02
    3486:	53 81       	ldd	r21, Z+3	; 0x03
    3488:	fd 01       	movw	r30, r26
    348a:	52 83       	std	Z+2, r21	; 0x02
    348c:	41 83       	std	Z+1, r20	; 0x01
    348e:	fc 01       	movw	r30, r24
    3490:	ee 0f       	add	r30, r30
    3492:	ff 1f       	adc	r31, r31
    3494:	ee 0f       	add	r30, r30
    3496:	ff 1f       	adc	r31, r31
    3498:	ee 0f       	add	r30, r30
    349a:	ff 1f       	adc	r31, r31
    349c:	8e 0f       	add	r24, r30
    349e:	9f 1f       	adc	r25, r31
    34a0:	fc 01       	movw	r30, r24
    34a2:	e8 56       	subi	r30, 0x68	; 104
    34a4:	f3 4f       	sbci	r31, 0xF3	; 243
    34a6:	01 80       	ldd	r0, Z+1	; 0x01
    34a8:	f2 81       	ldd	r31, Z+2	; 0x02
    34aa:	e0 2d       	mov	r30, r0
    34ac:	86 81       	ldd	r24, Z+6	; 0x06
    34ae:	97 81       	ldd	r25, Z+7	; 0x07
    34b0:	90 93 bd 0c 	sts	0x0CBD, r25	; 0x800cbd <pxCurrentTCB+0x1>
    34b4:	80 93 bc 0c 	sts	0x0CBC, r24	; 0x800cbc <pxCurrentTCB>
    34b8:	20 93 7d 0c 	sts	0x0C7D, r18	; 0x800c7d <uxTopReadyPriority>
    34bc:	08 95       	ret

000034be <vTaskPlaceOnEventList>:
    34be:	cf 93       	push	r28
    34c0:	df 93       	push	r29
    34c2:	eb 01       	movw	r28, r22
    34c4:	60 91 bc 0c 	lds	r22, 0x0CBC	; 0x800cbc <pxCurrentTCB>
    34c8:	70 91 bd 0c 	lds	r23, 0x0CBD	; 0x800cbd <pxCurrentTCB+0x1>
    34cc:	64 5f       	subi	r22, 0xF4	; 244
    34ce:	7f 4f       	sbci	r23, 0xFF	; 255
    34d0:	0e 94 d8 11 	call	0x23b0	; 0x23b0 <vListInsert>
    34d4:	61 e0       	ldi	r22, 0x01	; 1
    34d6:	ce 01       	movw	r24, r28
    34d8:	a1 dc       	rcall	.-1726   	; 0x2e1c <prvAddCurrentTaskToDelayedList>
    34da:	df 91       	pop	r29
    34dc:	cf 91       	pop	r28
    34de:	08 95       	ret

000034e0 <vTaskPlaceOnEventListRestricted>:
    34e0:	0f 93       	push	r16
    34e2:	1f 93       	push	r17
    34e4:	cf 93       	push	r28
    34e6:	8b 01       	movw	r16, r22
    34e8:	c4 2f       	mov	r28, r20
    34ea:	60 91 bc 0c 	lds	r22, 0x0CBC	; 0x800cbc <pxCurrentTCB>
    34ee:	70 91 bd 0c 	lds	r23, 0x0CBD	; 0x800cbd <pxCurrentTCB+0x1>
    34f2:	64 5f       	subi	r22, 0xF4	; 244
    34f4:	7f 4f       	sbci	r23, 0xFF	; 255
    34f6:	0e 94 b7 11 	call	0x236e	; 0x236e <vListInsertEnd>
    34fa:	cc 23       	and	r28, r28
    34fc:	11 f0       	breq	.+4      	; 0x3502 <vTaskPlaceOnEventListRestricted+0x22>
    34fe:	0f ef       	ldi	r16, 0xFF	; 255
    3500:	1f ef       	ldi	r17, 0xFF	; 255
    3502:	6c 2f       	mov	r22, r28
    3504:	c8 01       	movw	r24, r16
    3506:	8a dc       	rcall	.-1772   	; 0x2e1c <prvAddCurrentTaskToDelayedList>
    3508:	cf 91       	pop	r28
    350a:	1f 91       	pop	r17
    350c:	0f 91       	pop	r16
    350e:	08 95       	ret

00003510 <xTaskRemoveFromEventList>:
    3510:	0f 93       	push	r16
    3512:	1f 93       	push	r17
    3514:	cf 93       	push	r28
    3516:	df 93       	push	r29
    3518:	dc 01       	movw	r26, r24
    351a:	15 96       	adiw	r26, 0x05	; 5
    351c:	ed 91       	ld	r30, X+
    351e:	fc 91       	ld	r31, X
    3520:	16 97       	sbiw	r26, 0x06	; 6
    3522:	c6 81       	ldd	r28, Z+6	; 0x06
    3524:	d7 81       	ldd	r29, Z+7	; 0x07
    3526:	8e 01       	movw	r16, r28
    3528:	04 5f       	subi	r16, 0xF4	; 244
    352a:	1f 4f       	sbci	r17, 0xFF	; 255
    352c:	c8 01       	movw	r24, r16
    352e:	0e 94 09 12 	call	0x2412	; 0x2412 <uxListRemove>
    3532:	80 91 75 0c 	lds	r24, 0x0C75	; 0x800c75 <uxSchedulerSuspended>
    3536:	81 11       	cpse	r24, r1
    3538:	1c c0       	rjmp	.+56     	; 0x3572 <xTaskRemoveFromEventList+0x62>
    353a:	0a 50       	subi	r16, 0x0A	; 10
    353c:	11 09       	sbc	r17, r1
    353e:	c8 01       	movw	r24, r16
    3540:	0e 94 09 12 	call	0x2412	; 0x2412 <uxListRemove>
    3544:	8e 89       	ldd	r24, Y+22	; 0x16
    3546:	90 91 7d 0c 	lds	r25, 0x0C7D	; 0x800c7d <uxTopReadyPriority>
    354a:	98 17       	cp	r25, r24
    354c:	10 f4       	brcc	.+4      	; 0x3552 <xTaskRemoveFromEventList+0x42>
    354e:	80 93 7d 0c 	sts	0x0C7D, r24	; 0x800c7d <uxTopReadyPriority>
    3552:	90 e0       	ldi	r25, 0x00	; 0
    3554:	9c 01       	movw	r18, r24
    3556:	22 0f       	add	r18, r18
    3558:	33 1f       	adc	r19, r19
    355a:	22 0f       	add	r18, r18
    355c:	33 1f       	adc	r19, r19
    355e:	22 0f       	add	r18, r18
    3560:	33 1f       	adc	r19, r19
    3562:	82 0f       	add	r24, r18
    3564:	93 1f       	adc	r25, r19
    3566:	b8 01       	movw	r22, r16
    3568:	88 56       	subi	r24, 0x68	; 104
    356a:	93 4f       	sbci	r25, 0xF3	; 243
    356c:	0e 94 b7 11 	call	0x236e	; 0x236e <vListInsertEnd>
    3570:	05 c0       	rjmp	.+10     	; 0x357c <xTaskRemoveFromEventList+0x6c>
    3572:	b8 01       	movw	r22, r16
    3574:	8b e8       	ldi	r24, 0x8B	; 139
    3576:	9c e0       	ldi	r25, 0x0C	; 12
    3578:	0e 94 b7 11 	call	0x236e	; 0x236e <vListInsertEnd>
    357c:	e0 91 bc 0c 	lds	r30, 0x0CBC	; 0x800cbc <pxCurrentTCB>
    3580:	f0 91 bd 0c 	lds	r31, 0x0CBD	; 0x800cbd <pxCurrentTCB+0x1>
    3584:	9e 89       	ldd	r25, Y+22	; 0x16
    3586:	86 89       	ldd	r24, Z+22	; 0x16
    3588:	89 17       	cp	r24, r25
    358a:	20 f4       	brcc	.+8      	; 0x3594 <xTaskRemoveFromEventList+0x84>
    358c:	81 e0       	ldi	r24, 0x01	; 1
    358e:	80 93 7a 0c 	sts	0x0C7A, r24	; 0x800c7a <xYieldPending>
    3592:	01 c0       	rjmp	.+2      	; 0x3596 <xTaskRemoveFromEventList+0x86>
    3594:	80 e0       	ldi	r24, 0x00	; 0
    3596:	df 91       	pop	r29
    3598:	cf 91       	pop	r28
    359a:	1f 91       	pop	r17
    359c:	0f 91       	pop	r16
    359e:	08 95       	ret

000035a0 <vTaskInternalSetTimeOutState>:
    35a0:	20 91 79 0c 	lds	r18, 0x0C79	; 0x800c79 <xNumOfOverflows>
    35a4:	fc 01       	movw	r30, r24
    35a6:	20 83       	st	Z, r18
    35a8:	20 91 7e 0c 	lds	r18, 0x0C7E	; 0x800c7e <xTickCount>
    35ac:	30 91 7f 0c 	lds	r19, 0x0C7F	; 0x800c7f <xTickCount+0x1>
    35b0:	32 83       	std	Z+2, r19	; 0x02
    35b2:	21 83       	std	Z+1, r18	; 0x01
    35b4:	08 95       	ret

000035b6 <xTaskCheckForTimeOut>:
    35b6:	0f b6       	in	r0, 0x3f	; 63
    35b8:	f8 94       	cli
    35ba:	0f 92       	push	r0
    35bc:	20 91 7e 0c 	lds	r18, 0x0C7E	; 0x800c7e <xTickCount>
    35c0:	30 91 7f 0c 	lds	r19, 0x0C7F	; 0x800c7f <xTickCount+0x1>
    35c4:	dc 01       	movw	r26, r24
    35c6:	11 96       	adiw	r26, 0x01	; 1
    35c8:	4d 91       	ld	r20, X+
    35ca:	5c 91       	ld	r21, X
    35cc:	12 97       	sbiw	r26, 0x02	; 2
    35ce:	e0 91 79 0c 	lds	r30, 0x0C79	; 0x800c79 <xNumOfOverflows>
    35d2:	fc 91       	ld	r31, X
    35d4:	fe 17       	cp	r31, r30
    35d6:	19 f0       	breq	.+6      	; 0x35de <xTaskCheckForTimeOut+0x28>
    35d8:	24 17       	cp	r18, r20
    35da:	35 07       	cpc	r19, r21
    35dc:	98 f4       	brcc	.+38     	; 0x3604 <xTaskCheckForTimeOut+0x4e>
    35de:	24 1b       	sub	r18, r20
    35e0:	35 0b       	sbc	r19, r21
    35e2:	fb 01       	movw	r30, r22
    35e4:	40 81       	ld	r20, Z
    35e6:	51 81       	ldd	r21, Z+1	; 0x01
    35e8:	24 17       	cp	r18, r20
    35ea:	35 07       	cpc	r19, r21
    35ec:	38 f4       	brcc	.+14     	; 0x35fc <xTaskCheckForTimeOut+0x46>
    35ee:	42 1b       	sub	r20, r18
    35f0:	53 0b       	sbc	r21, r19
    35f2:	51 83       	std	Z+1, r21	; 0x01
    35f4:	40 83       	st	Z, r20
    35f6:	d4 df       	rcall	.-88     	; 0x35a0 <vTaskInternalSetTimeOutState>
    35f8:	80 e0       	ldi	r24, 0x00	; 0
    35fa:	05 c0       	rjmp	.+10     	; 0x3606 <xTaskCheckForTimeOut+0x50>
    35fc:	11 82       	std	Z+1, r1	; 0x01
    35fe:	10 82       	st	Z, r1
    3600:	81 e0       	ldi	r24, 0x01	; 1
    3602:	01 c0       	rjmp	.+2      	; 0x3606 <xTaskCheckForTimeOut+0x50>
    3604:	81 e0       	ldi	r24, 0x01	; 1
    3606:	0f 90       	pop	r0
    3608:	0f be       	out	0x3f, r0	; 63
    360a:	08 95       	ret

0000360c <vTaskMissedYield>:
    360c:	81 e0       	ldi	r24, 0x01	; 1
    360e:	80 93 7a 0c 	sts	0x0C7A, r24	; 0x800c7a <xYieldPending>
    3612:	08 95       	ret

00003614 <xTaskGetSchedulerState>:
    3614:	80 91 7c 0c 	lds	r24, 0x0C7C	; 0x800c7c <xSchedulerRunning>
    3618:	88 23       	and	r24, r24
    361a:	31 f0       	breq	.+12     	; 0x3628 <xTaskGetSchedulerState+0x14>
    361c:	80 91 75 0c 	lds	r24, 0x0C75	; 0x800c75 <uxSchedulerSuspended>
    3620:	88 23       	and	r24, r24
    3622:	21 f0       	breq	.+8      	; 0x362c <xTaskGetSchedulerState+0x18>
    3624:	80 e0       	ldi	r24, 0x00	; 0
    3626:	08 95       	ret
    3628:	81 e0       	ldi	r24, 0x01	; 1
    362a:	08 95       	ret
    362c:	82 e0       	ldi	r24, 0x02	; 2
    362e:	08 95       	ret

00003630 <xTaskPriorityInherit>:
    3630:	0f 93       	push	r16
    3632:	1f 93       	push	r17
    3634:	cf 93       	push	r28
    3636:	df 93       	push	r29
    3638:	fc 01       	movw	r30, r24
    363a:	89 2b       	or	r24, r25
    363c:	09 f4       	brne	.+2      	; 0x3640 <xTaskPriorityInherit+0x10>
    363e:	64 c0       	rjmp	.+200    	; 0x3708 <xTaskPriorityInherit+0xd8>
    3640:	26 89       	ldd	r18, Z+22	; 0x16
    3642:	a0 91 bc 0c 	lds	r26, 0x0CBC	; 0x800cbc <pxCurrentTCB>
    3646:	b0 91 bd 0c 	lds	r27, 0x0CBD	; 0x800cbd <pxCurrentTCB+0x1>
    364a:	56 96       	adiw	r26, 0x16	; 22
    364c:	8c 91       	ld	r24, X
    364e:	28 17       	cp	r18, r24
    3650:	08 f0       	brcs	.+2      	; 0x3654 <xTaskPriorityInherit+0x24>
    3652:	4e c0       	rjmp	.+156    	; 0x36f0 <xTaskPriorityInherit+0xc0>
    3654:	84 85       	ldd	r24, Z+12	; 0x0c
    3656:	95 85       	ldd	r25, Z+13	; 0x0d
    3658:	99 23       	and	r25, r25
    365a:	64 f0       	brlt	.+24     	; 0x3674 <xTaskPriorityInherit+0x44>
    365c:	a0 91 bc 0c 	lds	r26, 0x0CBC	; 0x800cbc <pxCurrentTCB>
    3660:	b0 91 bd 0c 	lds	r27, 0x0CBD	; 0x800cbd <pxCurrentTCB+0x1>
    3664:	56 96       	adiw	r26, 0x16	; 22
    3666:	3c 91       	ld	r19, X
    3668:	84 e0       	ldi	r24, 0x04	; 4
    366a:	90 e0       	ldi	r25, 0x00	; 0
    366c:	83 1b       	sub	r24, r19
    366e:	91 09       	sbc	r25, r1
    3670:	95 87       	std	Z+13, r25	; 0x0d
    3672:	84 87       	std	Z+12, r24	; 0x0c
    3674:	30 e0       	ldi	r19, 0x00	; 0
    3676:	c9 01       	movw	r24, r18
    3678:	88 0f       	add	r24, r24
    367a:	99 1f       	adc	r25, r25
    367c:	88 0f       	add	r24, r24
    367e:	99 1f       	adc	r25, r25
    3680:	88 0f       	add	r24, r24
    3682:	99 1f       	adc	r25, r25
    3684:	28 0f       	add	r18, r24
    3686:	39 1f       	adc	r19, r25
    3688:	28 56       	subi	r18, 0x68	; 104
    368a:	33 4f       	sbci	r19, 0xF3	; 243
    368c:	82 85       	ldd	r24, Z+10	; 0x0a
    368e:	93 85       	ldd	r25, Z+11	; 0x0b
    3690:	82 17       	cp	r24, r18
    3692:	93 07       	cpc	r25, r19
    3694:	21 f5       	brne	.+72     	; 0x36de <xTaskPriorityInherit+0xae>
    3696:	8f 01       	movw	r16, r30
    3698:	ef 01       	movw	r28, r30
    369a:	22 96       	adiw	r28, 0x02	; 2
    369c:	ce 01       	movw	r24, r28
    369e:	0e 94 09 12 	call	0x2412	; 0x2412 <uxListRemove>
    36a2:	e0 91 bc 0c 	lds	r30, 0x0CBC	; 0x800cbc <pxCurrentTCB>
    36a6:	f0 91 bd 0c 	lds	r31, 0x0CBD	; 0x800cbd <pxCurrentTCB+0x1>
    36aa:	86 89       	ldd	r24, Z+22	; 0x16
    36ac:	f8 01       	movw	r30, r16
    36ae:	86 8b       	std	Z+22, r24	; 0x16
    36b0:	90 91 7d 0c 	lds	r25, 0x0C7D	; 0x800c7d <uxTopReadyPriority>
    36b4:	98 17       	cp	r25, r24
    36b6:	10 f4       	brcc	.+4      	; 0x36bc <xTaskPriorityInherit+0x8c>
    36b8:	80 93 7d 0c 	sts	0x0C7D, r24	; 0x800c7d <uxTopReadyPriority>
    36bc:	90 e0       	ldi	r25, 0x00	; 0
    36be:	9c 01       	movw	r18, r24
    36c0:	22 0f       	add	r18, r18
    36c2:	33 1f       	adc	r19, r19
    36c4:	22 0f       	add	r18, r18
    36c6:	33 1f       	adc	r19, r19
    36c8:	22 0f       	add	r18, r18
    36ca:	33 1f       	adc	r19, r19
    36cc:	82 0f       	add	r24, r18
    36ce:	93 1f       	adc	r25, r19
    36d0:	be 01       	movw	r22, r28
    36d2:	88 56       	subi	r24, 0x68	; 104
    36d4:	93 4f       	sbci	r25, 0xF3	; 243
    36d6:	0e 94 b7 11 	call	0x236e	; 0x236e <vListInsertEnd>
    36da:	81 e0       	ldi	r24, 0x01	; 1
    36dc:	16 c0       	rjmp	.+44     	; 0x370a <xTaskPriorityInherit+0xda>
    36de:	a0 91 bc 0c 	lds	r26, 0x0CBC	; 0x800cbc <pxCurrentTCB>
    36e2:	b0 91 bd 0c 	lds	r27, 0x0CBD	; 0x800cbd <pxCurrentTCB+0x1>
    36e6:	56 96       	adiw	r26, 0x16	; 22
    36e8:	8c 91       	ld	r24, X
    36ea:	86 8b       	std	Z+22, r24	; 0x16
    36ec:	81 e0       	ldi	r24, 0x01	; 1
    36ee:	0d c0       	rjmp	.+26     	; 0x370a <xTaskPriorityInherit+0xda>
    36f0:	a0 91 bc 0c 	lds	r26, 0x0CBC	; 0x800cbc <pxCurrentTCB>
    36f4:	b0 91 bd 0c 	lds	r27, 0x0CBD	; 0x800cbd <pxCurrentTCB+0x1>
    36f8:	81 e0       	ldi	r24, 0x01	; 1
    36fa:	21 a1       	ldd	r18, Z+33	; 0x21
    36fc:	56 96       	adiw	r26, 0x16	; 22
    36fe:	9c 91       	ld	r25, X
    3700:	29 17       	cp	r18, r25
    3702:	18 f0       	brcs	.+6      	; 0x370a <xTaskPriorityInherit+0xda>
    3704:	80 e0       	ldi	r24, 0x00	; 0
    3706:	01 c0       	rjmp	.+2      	; 0x370a <xTaskPriorityInherit+0xda>
    3708:	80 e0       	ldi	r24, 0x00	; 0
    370a:	df 91       	pop	r29
    370c:	cf 91       	pop	r28
    370e:	1f 91       	pop	r17
    3710:	0f 91       	pop	r16
    3712:	08 95       	ret

00003714 <xTaskPriorityDisinherit>:
    3714:	0f 93       	push	r16
    3716:	1f 93       	push	r17
    3718:	cf 93       	push	r28
    371a:	df 93       	push	r29
    371c:	fc 01       	movw	r30, r24
    371e:	89 2b       	or	r24, r25
    3720:	79 f1       	breq	.+94     	; 0x3780 <xTaskPriorityDisinherit+0x6c>
    3722:	82 a1       	ldd	r24, Z+34	; 0x22
    3724:	81 50       	subi	r24, 0x01	; 1
    3726:	82 a3       	std	Z+34, r24	; 0x22
    3728:	26 89       	ldd	r18, Z+22	; 0x16
    372a:	91 a1       	ldd	r25, Z+33	; 0x21
    372c:	29 17       	cp	r18, r25
    372e:	51 f1       	breq	.+84     	; 0x3784 <xTaskPriorityDisinherit+0x70>
    3730:	81 11       	cpse	r24, r1
    3732:	2a c0       	rjmp	.+84     	; 0x3788 <xTaskPriorityDisinherit+0x74>
    3734:	ef 01       	movw	r28, r30
    3736:	8f 01       	movw	r16, r30
    3738:	0e 5f       	subi	r16, 0xFE	; 254
    373a:	1f 4f       	sbci	r17, 0xFF	; 255
    373c:	c8 01       	movw	r24, r16
    373e:	0e 94 09 12 	call	0x2412	; 0x2412 <uxListRemove>
    3742:	89 a1       	ldd	r24, Y+33	; 0x21
    3744:	8e 8b       	std	Y+22, r24	; 0x16
    3746:	24 e0       	ldi	r18, 0x04	; 4
    3748:	30 e0       	ldi	r19, 0x00	; 0
    374a:	28 1b       	sub	r18, r24
    374c:	31 09       	sbc	r19, r1
    374e:	3d 87       	std	Y+13, r19	; 0x0d
    3750:	2c 87       	std	Y+12, r18	; 0x0c
    3752:	90 91 7d 0c 	lds	r25, 0x0C7D	; 0x800c7d <uxTopReadyPriority>
    3756:	98 17       	cp	r25, r24
    3758:	10 f4       	brcc	.+4      	; 0x375e <xTaskPriorityDisinherit+0x4a>
    375a:	80 93 7d 0c 	sts	0x0C7D, r24	; 0x800c7d <uxTopReadyPriority>
    375e:	90 e0       	ldi	r25, 0x00	; 0
    3760:	9c 01       	movw	r18, r24
    3762:	22 0f       	add	r18, r18
    3764:	33 1f       	adc	r19, r19
    3766:	22 0f       	add	r18, r18
    3768:	33 1f       	adc	r19, r19
    376a:	22 0f       	add	r18, r18
    376c:	33 1f       	adc	r19, r19
    376e:	82 0f       	add	r24, r18
    3770:	93 1f       	adc	r25, r19
    3772:	b8 01       	movw	r22, r16
    3774:	88 56       	subi	r24, 0x68	; 104
    3776:	93 4f       	sbci	r25, 0xF3	; 243
    3778:	0e 94 b7 11 	call	0x236e	; 0x236e <vListInsertEnd>
    377c:	81 e0       	ldi	r24, 0x01	; 1
    377e:	05 c0       	rjmp	.+10     	; 0x378a <xTaskPriorityDisinherit+0x76>
    3780:	80 e0       	ldi	r24, 0x00	; 0
    3782:	03 c0       	rjmp	.+6      	; 0x378a <xTaskPriorityDisinherit+0x76>
    3784:	80 e0       	ldi	r24, 0x00	; 0
    3786:	01 c0       	rjmp	.+2      	; 0x378a <xTaskPriorityDisinherit+0x76>
    3788:	80 e0       	ldi	r24, 0x00	; 0
    378a:	df 91       	pop	r29
    378c:	cf 91       	pop	r28
    378e:	1f 91       	pop	r17
    3790:	0f 91       	pop	r16
    3792:	08 95       	ret

00003794 <vTaskPriorityDisinheritAfterTimeout>:
    3794:	0f 93       	push	r16
    3796:	1f 93       	push	r17
    3798:	cf 93       	push	r28
    379a:	df 93       	push	r29
    379c:	fc 01       	movw	r30, r24
    379e:	89 2b       	or	r24, r25
    37a0:	09 f4       	brne	.+2      	; 0x37a4 <vTaskPriorityDisinheritAfterTimeout+0x10>
    37a2:	43 c0       	rjmp	.+134    	; 0x382a <vTaskPriorityDisinheritAfterTimeout+0x96>
    37a4:	91 a1       	ldd	r25, Z+33	; 0x21
    37a6:	96 17       	cp	r25, r22
    37a8:	08 f4       	brcc	.+2      	; 0x37ac <vTaskPriorityDisinheritAfterTimeout+0x18>
    37aa:	96 2f       	mov	r25, r22
    37ac:	86 89       	ldd	r24, Z+22	; 0x16
    37ae:	89 17       	cp	r24, r25
    37b0:	e1 f1       	breq	.+120    	; 0x382a <vTaskPriorityDisinheritAfterTimeout+0x96>
    37b2:	22 a1       	ldd	r18, Z+34	; 0x22
    37b4:	21 30       	cpi	r18, 0x01	; 1
    37b6:	c9 f5       	brne	.+114    	; 0x382a <vTaskPriorityDisinheritAfterTimeout+0x96>
    37b8:	96 8b       	std	Z+22, r25	; 0x16
    37ba:	24 85       	ldd	r18, Z+12	; 0x0c
    37bc:	35 85       	ldd	r19, Z+13	; 0x0d
    37be:	33 23       	and	r19, r19
    37c0:	34 f0       	brlt	.+12     	; 0x37ce <vTaskPriorityDisinheritAfterTimeout+0x3a>
    37c2:	24 e0       	ldi	r18, 0x04	; 4
    37c4:	30 e0       	ldi	r19, 0x00	; 0
    37c6:	29 1b       	sub	r18, r25
    37c8:	31 09       	sbc	r19, r1
    37ca:	35 87       	std	Z+13, r19	; 0x0d
    37cc:	24 87       	std	Z+12, r18	; 0x0c
    37ce:	90 e0       	ldi	r25, 0x00	; 0
    37d0:	9c 01       	movw	r18, r24
    37d2:	22 0f       	add	r18, r18
    37d4:	33 1f       	adc	r19, r19
    37d6:	22 0f       	add	r18, r18
    37d8:	33 1f       	adc	r19, r19
    37da:	22 0f       	add	r18, r18
    37dc:	33 1f       	adc	r19, r19
    37de:	82 0f       	add	r24, r18
    37e0:	93 1f       	adc	r25, r19
    37e2:	88 56       	subi	r24, 0x68	; 104
    37e4:	93 4f       	sbci	r25, 0xF3	; 243
    37e6:	22 85       	ldd	r18, Z+10	; 0x0a
    37e8:	33 85       	ldd	r19, Z+11	; 0x0b
    37ea:	28 17       	cp	r18, r24
    37ec:	39 07       	cpc	r19, r25
    37ee:	e9 f4       	brne	.+58     	; 0x382a <vTaskPriorityDisinheritAfterTimeout+0x96>
    37f0:	ef 01       	movw	r28, r30
    37f2:	8f 01       	movw	r16, r30
    37f4:	0e 5f       	subi	r16, 0xFE	; 254
    37f6:	1f 4f       	sbci	r17, 0xFF	; 255
    37f8:	c8 01       	movw	r24, r16
    37fa:	0e 94 09 12 	call	0x2412	; 0x2412 <uxListRemove>
    37fe:	8e 89       	ldd	r24, Y+22	; 0x16
    3800:	90 91 7d 0c 	lds	r25, 0x0C7D	; 0x800c7d <uxTopReadyPriority>
    3804:	98 17       	cp	r25, r24
    3806:	10 f4       	brcc	.+4      	; 0x380c <vTaskPriorityDisinheritAfterTimeout+0x78>
    3808:	80 93 7d 0c 	sts	0x0C7D, r24	; 0x800c7d <uxTopReadyPriority>
    380c:	90 e0       	ldi	r25, 0x00	; 0
    380e:	9c 01       	movw	r18, r24
    3810:	22 0f       	add	r18, r18
    3812:	33 1f       	adc	r19, r19
    3814:	22 0f       	add	r18, r18
    3816:	33 1f       	adc	r19, r19
    3818:	22 0f       	add	r18, r18
    381a:	33 1f       	adc	r19, r19
    381c:	82 0f       	add	r24, r18
    381e:	93 1f       	adc	r25, r19
    3820:	b8 01       	movw	r22, r16
    3822:	88 56       	subi	r24, 0x68	; 104
    3824:	93 4f       	sbci	r25, 0xF3	; 243
    3826:	0e 94 b7 11 	call	0x236e	; 0x236e <vListInsertEnd>
    382a:	df 91       	pop	r29
    382c:	cf 91       	pop	r28
    382e:	1f 91       	pop	r17
    3830:	0f 91       	pop	r16
    3832:	08 95       	ret

00003834 <pvTaskIncrementMutexHeldCount>:

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
        then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
    3834:	80 91 bc 0c 	lds	r24, 0x0CBC	; 0x800cbc <pxCurrentTCB>
    3838:	90 91 bd 0c 	lds	r25, 0x0CBD	; 0x800cbd <pxCurrentTCB+0x1>
    383c:	89 2b       	or	r24, r25
    383e:	39 f0       	breq	.+14     	; 0x384e <pvTaskIncrementMutexHeldCount+0x1a>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
    3840:	e0 91 bc 0c 	lds	r30, 0x0CBC	; 0x800cbc <pxCurrentTCB>
    3844:	f0 91 bd 0c 	lds	r31, 0x0CBD	; 0x800cbd <pxCurrentTCB+0x1>
    3848:	82 a1       	ldd	r24, Z+34	; 0x22
    384a:	8f 5f       	subi	r24, 0xFF	; 255
    384c:	82 a3       	std	Z+34, r24	; 0x22
        }

        return pxCurrentTCB;
    384e:	80 91 bc 0c 	lds	r24, 0x0CBC	; 0x800cbc <pxCurrentTCB>
    3852:	90 91 bd 0c 	lds	r25, 0x0CBD	; 0x800cbd <pxCurrentTCB+0x1>
    }
    3856:	08 95       	ret

00003858 <prvInsertTimerInActiveList>:
            }
            #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
        }

        return pxNewTimer;
    }
    3858:	fc 01       	movw	r30, r24
    385a:	73 83       	std	Z+3, r23	; 0x03
    385c:	62 83       	std	Z+2, r22	; 0x02
    385e:	91 87       	std	Z+9, r25	; 0x09
    3860:	80 87       	std	Z+8, r24	; 0x08
    3862:	46 17       	cp	r20, r22
    3864:	57 07       	cpc	r21, r23
    3866:	90 f0       	brcs	.+36     	; 0x388c <prvInsertTimerInActiveList+0x34>
    3868:	42 1b       	sub	r20, r18
    386a:	53 0b       	sbc	r21, r19
    386c:	84 85       	ldd	r24, Z+12	; 0x0c
    386e:	95 85       	ldd	r25, Z+13	; 0x0d
    3870:	48 17       	cp	r20, r24
    3872:	59 07       	cpc	r21, r25
    3874:	e0 f4       	brcc	.+56     	; 0x38ae <prvInsertTimerInActiveList+0x56>
    3876:	bf 01       	movw	r22, r30
    3878:	6e 5f       	subi	r22, 0xFE	; 254
    387a:	7f 4f       	sbci	r23, 0xFF	; 255
    387c:	80 91 27 0d 	lds	r24, 0x0D27	; 0x800d27 <pxOverflowTimerList>
    3880:	90 91 28 0d 	lds	r25, 0x0D28	; 0x800d28 <pxOverflowTimerList+0x1>
    3884:	0e 94 d8 11 	call	0x23b0	; 0x23b0 <vListInsert>
    3888:	80 e0       	ldi	r24, 0x00	; 0
    388a:	08 95       	ret
    388c:	42 17       	cp	r20, r18
    388e:	53 07       	cpc	r21, r19
    3890:	18 f4       	brcc	.+6      	; 0x3898 <prvInsertTimerInActiveList+0x40>
    3892:	62 17       	cp	r22, r18
    3894:	73 07       	cpc	r23, r19
    3896:	68 f4       	brcc	.+26     	; 0x38b2 <prvInsertTimerInActiveList+0x5a>
    3898:	bf 01       	movw	r22, r30
    389a:	6e 5f       	subi	r22, 0xFE	; 254
    389c:	7f 4f       	sbci	r23, 0xFF	; 255
    389e:	80 91 29 0d 	lds	r24, 0x0D29	; 0x800d29 <pxCurrentTimerList>
    38a2:	90 91 2a 0d 	lds	r25, 0x0D2A	; 0x800d2a <pxCurrentTimerList+0x1>
    38a6:	0e 94 d8 11 	call	0x23b0	; 0x23b0 <vListInsert>
    38aa:	80 e0       	ldi	r24, 0x00	; 0
    38ac:	08 95       	ret
    38ae:	81 e0       	ldi	r24, 0x01	; 1
    38b0:	08 95       	ret
    38b2:	81 e0       	ldi	r24, 0x01	; 1
    38b4:	08 95       	ret

000038b6 <prvCheckForValidListAndQueue>:
    38b6:	0f 93       	push	r16
    38b8:	0f b6       	in	r0, 0x3f	; 63
    38ba:	f8 94       	cli
    38bc:	0f 92       	push	r0
    38be:	80 91 25 0d 	lds	r24, 0x0D25	; 0x800d25 <xTimerQueue>
    38c2:	90 91 26 0d 	lds	r25, 0x0D26	; 0x800d26 <xTimerQueue+0x1>
    38c6:	89 2b       	or	r24, r25
    38c8:	01 f5       	brne	.+64     	; 0x390a <prvCheckForValidListAndQueue+0x54>
    38ca:	88 e1       	ldi	r24, 0x18	; 24
    38cc:	9d e0       	ldi	r25, 0x0D	; 13
    38ce:	0e 94 a5 11 	call	0x234a	; 0x234a <vListInitialise>
    38d2:	8f e0       	ldi	r24, 0x0F	; 15
    38d4:	9d e0       	ldi	r25, 0x0D	; 13
    38d6:	0e 94 a5 11 	call	0x234a	; 0x234a <vListInitialise>
    38da:	88 e1       	ldi	r24, 0x18	; 24
    38dc:	9d e0       	ldi	r25, 0x0D	; 13
    38de:	90 93 2a 0d 	sts	0x0D2A, r25	; 0x800d2a <pxCurrentTimerList+0x1>
    38e2:	80 93 29 0d 	sts	0x0D29, r24	; 0x800d29 <pxCurrentTimerList>
    38e6:	8f e0       	ldi	r24, 0x0F	; 15
    38e8:	9d e0       	ldi	r25, 0x0D	; 13
    38ea:	90 93 28 0d 	sts	0x0D28, r25	; 0x800d28 <pxOverflowTimerList+0x1>
    38ee:	80 93 27 0d 	sts	0x0D27, r24	; 0x800d27 <pxOverflowTimerList>
    38f2:	00 e0       	ldi	r16, 0x00	; 0
    38f4:	2e eb       	ldi	r18, 0xBE	; 190
    38f6:	3c e0       	ldi	r19, 0x0C	; 12
    38f8:	4d ed       	ldi	r20, 0xDD	; 221
    38fa:	5c e0       	ldi	r21, 0x0C	; 12
    38fc:	65 e0       	ldi	r22, 0x05	; 5
    38fe:	8a e0       	ldi	r24, 0x0A	; 10
    3900:	30 d8       	rcall	.-4000   	; 0x2962 <xQueueGenericCreateStatic>
    3902:	90 93 26 0d 	sts	0x0D26, r25	; 0x800d26 <xTimerQueue+0x1>
    3906:	80 93 25 0d 	sts	0x0D25, r24	; 0x800d25 <xTimerQueue>
    390a:	0f 90       	pop	r0
    390c:	0f be       	out	0x3f, r0	; 63
    390e:	0f 91       	pop	r16
    3910:	08 95       	ret

00003912 <xTimerCreateTimerTask>:
    3912:	cf 92       	push	r12
    3914:	df 92       	push	r13
    3916:	ef 92       	push	r14
    3918:	ff 92       	push	r15
    391a:	0f 93       	push	r16
    391c:	cf 93       	push	r28
    391e:	df 93       	push	r29
    3920:	00 d0       	rcall	.+0      	; 0x3922 <xTimerCreateTimerTask+0x10>
    3922:	00 d0       	rcall	.+0      	; 0x3924 <xTimerCreateTimerTask+0x12>
    3924:	cd b7       	in	r28, 0x3d	; 61
    3926:	de b7       	in	r29, 0x3e	; 62
    3928:	c6 df       	rcall	.-116    	; 0x38b6 <prvCheckForValidListAndQueue>
    392a:	80 91 25 0d 	lds	r24, 0x0D25	; 0x800d25 <xTimerQueue>
    392e:	90 91 26 0d 	lds	r25, 0x0D26	; 0x800d26 <xTimerQueue+0x1>
    3932:	89 2b       	or	r24, r25
    3934:	31 f1       	breq	.+76     	; 0x3982 <xTimerCreateTimerTask+0x70>
    3936:	1e 82       	std	Y+6, r1	; 0x06
    3938:	1d 82       	std	Y+5, r1	; 0x05
    393a:	1c 82       	std	Y+4, r1	; 0x04
    393c:	1b 82       	std	Y+3, r1	; 0x03
    393e:	ae 01       	movw	r20, r28
    3940:	4f 5f       	subi	r20, 0xFF	; 255
    3942:	5f 4f       	sbci	r21, 0xFF	; 255
    3944:	be 01       	movw	r22, r28
    3946:	6d 5f       	subi	r22, 0xFD	; 253
    3948:	7f 4f       	sbci	r23, 0xFF	; 255
    394a:	ce 01       	movw	r24, r28
    394c:	05 96       	adiw	r24, 0x05	; 5
    394e:	0e 94 95 11 	call	0x232a	; 0x232a <vApplicationGetTimerTaskMemory>
    3952:	cd 80       	ldd	r12, Y+5	; 0x05
    3954:	de 80       	ldd	r13, Y+6	; 0x06
    3956:	eb 80       	ldd	r14, Y+3	; 0x03
    3958:	fc 80       	ldd	r15, Y+4	; 0x04
    395a:	49 81       	ldd	r20, Y+1	; 0x01
    395c:	5a 81       	ldd	r21, Y+2	; 0x02
    395e:	03 e0       	ldi	r16, 0x03	; 3
    3960:	20 e0       	ldi	r18, 0x00	; 0
    3962:	30 e0       	ldi	r19, 0x00	; 0
    3964:	6a e6       	ldi	r22, 0x6A	; 106
    3966:	72 e0       	ldi	r23, 0x02	; 2
    3968:	84 e8       	ldi	r24, 0x84	; 132
    396a:	9d e1       	ldi	r25, 0x1D	; 29
    396c:	98 da       	rcall	.-2768   	; 0x2e9e <xTaskCreateStatic>
    396e:	9c 01       	movw	r18, r24
    3970:	90 93 24 0d 	sts	0x0D24, r25	; 0x800d24 <xTimerTaskHandle+0x1>
    3974:	80 93 23 0d 	sts	0x0D23, r24	; 0x800d23 <xTimerTaskHandle>
    3978:	81 e0       	ldi	r24, 0x01	; 1
    397a:	23 2b       	or	r18, r19
    397c:	19 f4       	brne	.+6      	; 0x3984 <xTimerCreateTimerTask+0x72>
    397e:	80 e0       	ldi	r24, 0x00	; 0
    3980:	01 c0       	rjmp	.+2      	; 0x3984 <xTimerCreateTimerTask+0x72>
    3982:	80 e0       	ldi	r24, 0x00	; 0
    3984:	26 96       	adiw	r28, 0x06	; 6
    3986:	0f b6       	in	r0, 0x3f	; 63
    3988:	f8 94       	cli
    398a:	de bf       	out	0x3e, r29	; 62
    398c:	0f be       	out	0x3f, r0	; 63
    398e:	cd bf       	out	0x3d, r28	; 61
    3990:	df 91       	pop	r29
    3992:	cf 91       	pop	r28
    3994:	0f 91       	pop	r16
    3996:	ff 90       	pop	r15
    3998:	ef 90       	pop	r14
    399a:	df 90       	pop	r13
    399c:	cf 90       	pop	r12
    399e:	08 95       	ret

000039a0 <xTimerGenericCommand>:
    }
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
    39a0:	0f 93       	push	r16
    39a2:	1f 93       	push	r17
    39a4:	cf 93       	push	r28
    39a6:	df 93       	push	r29
    39a8:	00 d0       	rcall	.+0      	; 0x39aa <xTimerGenericCommand+0xa>
    39aa:	1f 92       	push	r1
    39ac:	1f 92       	push	r1
    39ae:	cd b7       	in	r28, 0x3d	; 61
    39b0:	de b7       	in	r29, 0x3e	; 62

    configASSERT( xTimer );

    /* Send a message to the timer service task to perform a particular action
    on a particular timer definition. */
    if( xTimerQueue != NULL )
    39b2:	e0 91 25 0d 	lds	r30, 0x0D25	; 0x800d25 <xTimerQueue>
    39b6:	f0 91 26 0d 	lds	r31, 0x0D26	; 0x800d26 <xTimerQueue+0x1>
    39ba:	30 97       	sbiw	r30, 0x00	; 0
    39bc:	61 f1       	breq	.+88     	; 0x3a16 <xTimerGenericCommand+0x76>
    39be:	d9 01       	movw	r26, r18
    {
        /* Send a command to the timer service task to start the xTimer timer. */
        xMessage.xMessageID = xCommandID;
    39c0:	69 83       	std	Y+1, r22	; 0x01
        xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    39c2:	5b 83       	std	Y+3, r21	; 0x03
    39c4:	4a 83       	std	Y+2, r20	; 0x02
        xMessage.u.xTimerParameters.pxTimer = xTimer;
    39c6:	9d 83       	std	Y+5, r25	; 0x05
    39c8:	8c 83       	std	Y+4, r24	; 0x04

        if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    39ca:	66 30       	cpi	r22, 0x06	; 6
    39cc:	e4 f4       	brge	.+56     	; 0x3a06 <xTimerGenericCommand+0x66>
        {
            if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    39ce:	22 de       	rcall	.-956    	; 0x3614 <xTaskGetSchedulerState>
    39d0:	82 30       	cpi	r24, 0x02	; 2
    39d2:	61 f4       	brne	.+24     	; 0x39ec <xTimerGenericCommand+0x4c>
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    39d4:	20 e0       	ldi	r18, 0x00	; 0
    39d6:	a8 01       	movw	r20, r16
    39d8:	be 01       	movw	r22, r28
    39da:	6f 5f       	subi	r22, 0xFF	; 255
    39dc:	7f 4f       	sbci	r23, 0xFF	; 255
    39de:	80 91 25 0d 	lds	r24, 0x0D25	; 0x800d25 <xTimerQueue>
    39e2:	90 91 26 0d 	lds	r25, 0x0D26	; 0x800d26 <xTimerQueue+0x1>
    39e6:	0e 94 c6 14 	call	0x298c	; 0x298c <xQueueGenericSend>
    39ea:	16 c0       	rjmp	.+44     	; 0x3a18 <xTimerGenericCommand+0x78>
            }
            else
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    39ec:	20 e0       	ldi	r18, 0x00	; 0
    39ee:	40 e0       	ldi	r20, 0x00	; 0
    39f0:	50 e0       	ldi	r21, 0x00	; 0
    39f2:	be 01       	movw	r22, r28
    39f4:	6f 5f       	subi	r22, 0xFF	; 255
    39f6:	7f 4f       	sbci	r23, 0xFF	; 255
    39f8:	80 91 25 0d 	lds	r24, 0x0D25	; 0x800d25 <xTimerQueue>
    39fc:	90 91 26 0d 	lds	r25, 0x0D26	; 0x800d26 <xTimerQueue+0x1>
    3a00:	0e 94 c6 14 	call	0x298c	; 0x298c <xQueueGenericSend>
    3a04:	09 c0       	rjmp	.+18     	; 0x3a18 <xTimerGenericCommand+0x78>
            }
        }
        else
        {
            xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    3a06:	20 e0       	ldi	r18, 0x00	; 0
    3a08:	ad 01       	movw	r20, r26
    3a0a:	be 01       	movw	r22, r28
    3a0c:	6f 5f       	subi	r22, 0xFF	; 255
    3a0e:	7f 4f       	sbci	r23, 0xFF	; 255
    3a10:	cf 01       	movw	r24, r30
    3a12:	4e d8       	rcall	.-3940   	; 0x2ab0 <xQueueGenericSendFromISR>
    3a14:	01 c0       	rjmp	.+2      	; 0x3a18 <xTimerGenericCommand+0x78>
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
    3a16:	80 e0       	ldi	r24, 0x00	; 0
    {
        mtCOVERAGE_TEST_MARKER();
    }

    return xReturn;
}
    3a18:	0f 90       	pop	r0
    3a1a:	0f 90       	pop	r0
    3a1c:	0f 90       	pop	r0
    3a1e:	0f 90       	pop	r0
    3a20:	0f 90       	pop	r0
    3a22:	df 91       	pop	r29
    3a24:	cf 91       	pop	r28
    3a26:	1f 91       	pop	r17
    3a28:	0f 91       	pop	r16
    3a2a:	08 95       	ret

00003a2c <prvSampleTimeNow>:
    return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
    3a2c:	af 92       	push	r10
    3a2e:	bf 92       	push	r11
    3a30:	cf 92       	push	r12
    3a32:	df 92       	push	r13
    3a34:	ef 92       	push	r14
    3a36:	ff 92       	push	r15
    3a38:	0f 93       	push	r16
    3a3a:	1f 93       	push	r17
    3a3c:	cf 93       	push	r28
    3a3e:	df 93       	push	r29
    3a40:	6c 01       	movw	r12, r24
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

    xTimeNow = xTaskGetTickCount();
    3a42:	72 db       	rcall	.-2332   	; 0x3128 <xTaskGetTickCount>
    3a44:	7c 01       	movw	r14, r24

    if( xTimeNow < xLastTime )
    3a46:	80 91 21 0d 	lds	r24, 0x0D21	; 0x800d21 <xLastTime.2391>
    3a4a:	90 91 22 0d 	lds	r25, 0x0D22	; 0x800d22 <xLastTime.2391+0x1>
    3a4e:	e8 16       	cp	r14, r24
    3a50:	f9 06       	cpc	r15, r25
    3a52:	08 f0       	brcs	.+2      	; 0x3a56 <prvSampleTimeNow+0x2a>
    3a54:	47 c0       	rjmp	.+142    	; 0x3ae4 <prvSampleTimeNow+0xb8>
    3a56:	2f c0       	rjmp	.+94     	; 0x3ab6 <prvSampleTimeNow+0x8a>
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    {
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    3a58:	05 80       	ldd	r0, Z+5	; 0x05
    3a5a:	f6 81       	ldd	r31, Z+6	; 0x06
    3a5c:	e0 2d       	mov	r30, r0
    3a5e:	a0 80       	ld	r10, Z
    3a60:	b1 80       	ldd	r11, Z+1	; 0x01

        /* Remove the timer from the list. */
        pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    3a62:	c6 81       	ldd	r28, Z+6	; 0x06
    3a64:	d7 81       	ldd	r29, Z+7	; 0x07
        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    3a66:	8e 01       	movw	r16, r28
    3a68:	0e 5f       	subi	r16, 0xFE	; 254
    3a6a:	1f 4f       	sbci	r17, 0xFF	; 255
    3a6c:	c8 01       	movw	r24, r16
    3a6e:	0e 94 09 12 	call	0x2412	; 0x2412 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* Execute its callback, then send a command to restart the timer if
        it is an auto-reload timer.  It cannot be restarted here as the lists
        have not yet been switched. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    3a72:	e9 89       	ldd	r30, Y+17	; 0x11
    3a74:	fa 89       	ldd	r31, Y+18	; 0x12
    3a76:	ce 01       	movw	r24, r28
    3a78:	19 95       	eicall

        if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    3a7a:	8e 85       	ldd	r24, Y+14	; 0x0e
    3a7c:	81 30       	cpi	r24, 0x01	; 1
    3a7e:	d9 f4       	brne	.+54     	; 0x3ab6 <prvSampleTimeNow+0x8a>
            the timer going into the same timer list then it has already expired
            and the timer should be re-inserted into the current list so it is
            processed again within this loop.  Otherwise a command should be sent
            to restart the timer to ensure it is only inserted into a list after
            the lists have been swapped. */
            xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    3a80:	8c 85       	ldd	r24, Y+12	; 0x0c
    3a82:	9d 85       	ldd	r25, Y+13	; 0x0d
    3a84:	8a 0d       	add	r24, r10
    3a86:	9b 1d       	adc	r25, r11
            if( xReloadTime > xNextExpireTime )
    3a88:	a8 16       	cp	r10, r24
    3a8a:	b9 06       	cpc	r11, r25
    3a8c:	60 f4       	brcc	.+24     	; 0x3aa6 <prvSampleTimeNow+0x7a>
            {
                listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    3a8e:	9b 83       	std	Y+3, r25	; 0x03
    3a90:	8a 83       	std	Y+2, r24	; 0x02
                listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    3a92:	d9 87       	std	Y+9, r29	; 0x09
    3a94:	c8 87       	std	Y+8, r28	; 0x08
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    3a96:	b8 01       	movw	r22, r16
    3a98:	80 91 29 0d 	lds	r24, 0x0D29	; 0x800d29 <pxCurrentTimerList>
    3a9c:	90 91 2a 0d 	lds	r25, 0x0D2A	; 0x800d2a <pxCurrentTimerList+0x1>
    3aa0:	0e 94 d8 11 	call	0x23b0	; 0x23b0 <vListInsert>
    3aa4:	08 c0       	rjmp	.+16     	; 0x3ab6 <prvSampleTimeNow+0x8a>
            }
            else
            {
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    3aa6:	00 e0       	ldi	r16, 0x00	; 0
    3aa8:	10 e0       	ldi	r17, 0x00	; 0
    3aaa:	20 e0       	ldi	r18, 0x00	; 0
    3aac:	30 e0       	ldi	r19, 0x00	; 0
    3aae:	a5 01       	movw	r20, r10
    3ab0:	60 e0       	ldi	r22, 0x00	; 0
    3ab2:	ce 01       	movw	r24, r28
    3ab4:	75 df       	rcall	.-278    	; 0x39a0 <xTimerGenericCommand>

    /* The tick count has overflowed.  The timer lists must be switched.
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    3ab6:	e0 91 29 0d 	lds	r30, 0x0D29	; 0x800d29 <pxCurrentTimerList>
    3aba:	f0 91 2a 0d 	lds	r31, 0x0D2A	; 0x800d2a <pxCurrentTimerList+0x1>
    3abe:	80 81       	ld	r24, Z
    3ac0:	81 11       	cpse	r24, r1
    3ac2:	ca cf       	rjmp	.-108    	; 0x3a58 <prvSampleTimeNow+0x2c>
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxTemp = pxCurrentTimerList;
    pxCurrentTimerList = pxOverflowTimerList;
    3ac4:	80 91 27 0d 	lds	r24, 0x0D27	; 0x800d27 <pxOverflowTimerList>
    3ac8:	90 91 28 0d 	lds	r25, 0x0D28	; 0x800d28 <pxOverflowTimerList+0x1>
    3acc:	90 93 2a 0d 	sts	0x0D2A, r25	; 0x800d2a <pxCurrentTimerList+0x1>
    3ad0:	80 93 29 0d 	sts	0x0D29, r24	; 0x800d29 <pxCurrentTimerList>
    pxOverflowTimerList = pxTemp;
    3ad4:	f0 93 28 0d 	sts	0x0D28, r31	; 0x800d28 <pxOverflowTimerList+0x1>
    3ad8:	e0 93 27 0d 	sts	0x0D27, r30	; 0x800d27 <pxOverflowTimerList>
    xTimeNow = xTaskGetTickCount();

    if( xTimeNow < xLastTime )
    {
        prvSwitchTimerLists();
        *pxTimerListsWereSwitched = pdTRUE;
    3adc:	81 e0       	ldi	r24, 0x01	; 1
    3ade:	f6 01       	movw	r30, r12
    3ae0:	80 83       	st	Z, r24
    3ae2:	02 c0       	rjmp	.+4      	; 0x3ae8 <prvSampleTimeNow+0xbc>
    }
    else
    {
        *pxTimerListsWereSwitched = pdFALSE;
    3ae4:	f6 01       	movw	r30, r12
    3ae6:	10 82       	st	Z, r1
    }

    xLastTime = xTimeNow;
    3ae8:	f0 92 22 0d 	sts	0x0D22, r15	; 0x800d22 <xLastTime.2391+0x1>
    3aec:	e0 92 21 0d 	sts	0x0D21, r14	; 0x800d21 <xLastTime.2391>

    return xTimeNow;
}
    3af0:	c7 01       	movw	r24, r14
    3af2:	df 91       	pop	r29
    3af4:	cf 91       	pop	r28
    3af6:	1f 91       	pop	r17
    3af8:	0f 91       	pop	r16
    3afa:	ff 90       	pop	r15
    3afc:	ef 90       	pop	r14
    3afe:	df 90       	pop	r13
    3b00:	cf 90       	pop	r12
    3b02:	bf 90       	pop	r11
    3b04:	af 90       	pop	r10
    3b06:	08 95       	ret

00003b08 <prvTimerTask>:
    pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
}
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
    3b08:	cf 93       	push	r28
    3b0a:	df 93       	push	r29
    3b0c:	00 d0       	rcall	.+0      	; 0x3b0e <prvTimerTask+0x6>
    3b0e:	00 d0       	rcall	.+0      	; 0x3b10 <prvTimerTask+0x8>
    3b10:	cd b7       	in	r28, 0x3d	; 61
    3b12:	de b7       	in	r29, 0x3e	; 62
        /* Obtain the time now to make an assessment as to whether the timer
        has expired or not.  If obtaining the time causes the lists to switch
        then don't process this timer as any timers that remained in the list
        when the lists were switched will have been processed within the
        prvSampleTimeNow() function. */
        xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    3b14:	ce 01       	movw	r24, r28
    3b16:	01 96       	adiw	r24, 0x01	; 1
    3b18:	4c 01       	movw	r8, r24
                case when the current timer list is empty. */
                if( xListWasEmpty != pdFALSE )
                {
                    /* The current timer list is empty - is the overflow list
                    also empty? */
                    xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    3b1a:	44 24       	eor	r4, r4
    3b1c:	43 94       	inc	r4
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    }
    else
    {
        /* Ensure the task unblocks when the tick count rolls over. */
        xNextExpireTime = ( TickType_t ) 0U;
    3b1e:	e1 2c       	mov	r14, r1
    3b20:	f1 2c       	mov	r15, r1
                case when the current timer list is empty. */
                if( xListWasEmpty != pdFALSE )
                {
                    /* The current timer list is empty - is the overflow list
                    also empty? */
                    xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    3b22:	51 2c       	mov	r5, r1
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

    while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    3b24:	c8 2e       	mov	r12, r24
    3b26:	d9 2c       	mov	r13, r9
    the timer with the nearest expiry time will expire.  If there are no
    active timers then just set the next expire time to 0.  That will cause
    this task to unblock when the tick count overflows, at which point the
    timer lists will be switched and the next expiry time can be
    re-assessed.  */
    *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    3b28:	e0 91 29 0d 	lds	r30, 0x0D29	; 0x800d29 <pxCurrentTimerList>
    3b2c:	f0 91 2a 0d 	lds	r31, 0x0D2A	; 0x800d2a <pxCurrentTimerList+0x1>
    3b30:	80 81       	ld	r24, Z
    if( *pxListWasEmpty == pdFALSE )
    3b32:	88 23       	and	r24, r24
    3b34:	09 f4       	brne	.+2      	; 0x3b38 <prvTimerTask+0x30>
    3b36:	b0 c0       	rjmp	.+352    	; 0x3c98 <prvTimerTask+0x190>
    {
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    3b38:	05 80       	ldd	r0, Z+5	; 0x05
    3b3a:	f6 81       	ldd	r31, Z+6	; 0x06
    3b3c:	e0 2d       	mov	r30, r0
    3b3e:	a0 80       	ld	r10, Z
    3b40:	b1 80       	ldd	r11, Z+1	; 0x01
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

    vTaskSuspendAll();
    3b42:	ec da       	rcall	.-2600   	; 0x311c <vTaskSuspendAll>
        /* Obtain the time now to make an assessment as to whether the timer
        has expired or not.  If obtaining the time causes the lists to switch
        then don't process this timer as any timers that remained in the list
        when the lists were switched will have been processed within the
        prvSampleTimeNow() function. */
        xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    3b44:	c4 01       	movw	r24, r8
    3b46:	72 df       	rcall	.-284    	; 0x3a2c <prvSampleTimeNow>
    3b48:	8c 01       	movw	r16, r24
        if( xTimerListsWereSwitched == pdFALSE )
    3b4a:	89 81       	ldd	r24, Y+1	; 0x01
    3b4c:	81 11       	cpse	r24, r1
    3b4e:	42 c0       	rjmp	.+132    	; 0x3bd4 <prvTimerTask+0xcc>
        {
            /* The tick count has not overflowed, has the timer expired? */
            if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    3b50:	0a 15       	cp	r16, r10
    3b52:	1b 05       	cpc	r17, r11
            {
                ( void ) xTaskResumeAll();
    3b54:	80 f1       	brcs	.+96     	; 0x3bb6 <prvTimerTask+0xae>
    3b56:	a9 db       	rcall	.-2222   	; 0x32aa <xTaskResumeAll>
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    3b58:	e0 91 29 0d 	lds	r30, 0x0D29	; 0x800d29 <pxCurrentTimerList>
    3b5c:	f0 91 2a 0d 	lds	r31, 0x0D2A	; 0x800d2a <pxCurrentTimerList+0x1>
    3b60:	05 80       	ldd	r0, Z+5	; 0x05
    3b62:	f6 81       	ldd	r31, Z+6	; 0x06
    3b64:	e0 2d       	mov	r30, r0
    3b66:	66 80       	ldd	r6, Z+6	; 0x06
    3b68:	77 80       	ldd	r7, Z+7	; 0x07

    /* Remove the timer from the list of active timers.  A check has already
    been performed to ensure the list is not empty. */
    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    3b6a:	c3 01       	movw	r24, r6
    3b6c:	02 96       	adiw	r24, 0x02	; 2
    3b6e:	0e 94 09 12 	call	0x2412	; 0x2412 <uxListRemove>
    traceTIMER_EXPIRED( pxTimer );

    /* If the timer is an auto reload timer then calculate the next
    expiry time and re-insert the timer in the list of active timers. */
    if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    3b72:	d3 01       	movw	r26, r6
    3b74:	1e 96       	adiw	r26, 0x0e	; 14
    3b76:	8c 91       	ld	r24, X
    3b78:	1e 97       	sbiw	r26, 0x0e	; 14
    3b7a:	81 30       	cpi	r24, 0x01	; 1
    3b7c:	a1 f4       	brne	.+40     	; 0x3ba6 <prvTimerTask+0x9e>
    {
        /* The timer is inserted into a list using a time relative to anything
        other than the current time.  It will therefore be inserted into the
        correct list relative to the time this task thinks it is now. */
        if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    3b7e:	1c 96       	adiw	r26, 0x0c	; 12
    3b80:	6d 91       	ld	r22, X+
    3b82:	7c 91       	ld	r23, X
    3b84:	1d 97       	sbiw	r26, 0x0d	; 13
    3b86:	6a 0d       	add	r22, r10
    3b88:	7b 1d       	adc	r23, r11
    3b8a:	95 01       	movw	r18, r10
    3b8c:	a8 01       	movw	r20, r16
    3b8e:	c3 01       	movw	r24, r6
    3b90:	63 de       	rcall	.-826    	; 0x3858 <prvInsertTimerInActiveList>
    3b92:	88 23       	and	r24, r24
    3b94:	41 f0       	breq	.+16     	; 0x3ba6 <prvTimerTask+0x9e>
        {
            /* The timer expired before it was added to the active timer
            list.  Reload it now.  */
            xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    3b96:	0e 2d       	mov	r16, r14
    3b98:	1f 2d       	mov	r17, r15
    3b9a:	2e 2d       	mov	r18, r14
    3b9c:	3f 2d       	mov	r19, r15
    3b9e:	a5 01       	movw	r20, r10
    3ba0:	65 2d       	mov	r22, r5
    3ba2:	c3 01       	movw	r24, r6
    3ba4:	fd de       	rcall	.-518    	; 0x39a0 <xTimerGenericCommand>
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* Call the timer callback. */
    pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    3ba6:	d3 01       	movw	r26, r6
    3ba8:	51 96       	adiw	r26, 0x11	; 17
    3baa:	ed 91       	ld	r30, X+
    3bac:	fc 91       	ld	r31, X
    3bae:	52 97       	sbiw	r26, 0x12	; 18
    3bb0:	c3 01       	movw	r24, r6
    3bb2:	19 95       	eicall
    3bb4:	64 c0       	rjmp	.+200    	; 0x3c7e <prvTimerTask+0x176>
        prvSampleTimeNow() function. */
        xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
        if( xTimerListsWereSwitched == pdFALSE )
        {
            /* The tick count has not overflowed, has the timer expired? */
            if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    3bb6:	45 2d       	mov	r20, r5
                    /* The current timer list is empty - is the overflow list
                    also empty? */
                    xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
                }

                vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    3bb8:	b5 01       	movw	r22, r10
    3bba:	60 1b       	sub	r22, r16
    3bbc:	71 0b       	sbc	r23, r17
    3bbe:	80 91 25 0d 	lds	r24, 0x0D25	; 0x800d25 <xTimerQueue>
    3bc2:	90 91 26 0d 	lds	r25, 0x0D26	; 0x800d26 <xTimerQueue+0x1>

                if( xTaskResumeAll() == pdFALSE )
    3bc6:	f0 d8       	rcall	.-3616   	; 0x2da8 <vQueueWaitForMessageRestricted>
    3bc8:	70 db       	rcall	.-2336   	; 0x32aa <xTaskResumeAll>
    3bca:	81 11       	cpse	r24, r1
                {
                    /* Yield to wait for either a command to arrive, or the
                    block time to expire.  If a command arrived between the
                    critical section being exited and this yield then the yield
                    will not cause the task to block. */
                    portYIELD_WITHIN_API();
    3bcc:	58 c0       	rjmp	.+176    	; 0x3c7e <prvTimerTask+0x176>
    3bce:	0e 94 de 12 	call	0x25bc	; 0x25bc <vPortYield>
                }
            }
        }
        else
        {
            ( void ) xTaskResumeAll();
    3bd2:	55 c0       	rjmp	.+170    	; 0x3c7e <prvTimerTask+0x176>
    3bd4:	6a db       	rcall	.-2348   	; 0x32aa <xTaskResumeAll>
    3bd6:	53 c0       	rjmp	.+166    	; 0x3c7e <prvTimerTask+0x176>
        }
        #endif /* INCLUDE_xTimerPendFunctionCall */

        /* Commands that are positive are timer commands rather than pended
        function calls. */
        if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    3bd8:	89 81       	ldd	r24, Y+1	; 0x01
    3bda:	88 23       	and	r24, r24
    3bdc:	0c f4       	brge	.+2      	; 0x3be0 <prvTimerTask+0xd8>
    3bde:	4f c0       	rjmp	.+158    	; 0x3c7e <prvTimerTask+0x176>
        {
            /* The messages uses the xTimerParameters member to work on a
            software timer. */
            pxTimer = xMessage.u.xTimerParameters.pxTimer;
    3be0:	ac 80       	ldd	r10, Y+4	; 0x04
    3be2:	bd 80       	ldd	r11, Y+5	; 0x05

        if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    3be4:	f5 01       	movw	r30, r10
    3be6:	82 85       	ldd	r24, Z+10	; 0x0a
    3be8:	93 85       	ldd	r25, Z+11	; 0x0b
    3bea:	89 2b       	or	r24, r25
            {
                /* The timer is in a list, remove it. */
                ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    3bec:	21 f0       	breq	.+8      	; 0x3bf6 <prvTimerTask+0xee>
    3bee:	c5 01       	movw	r24, r10
    3bf0:	02 96       	adiw	r24, 0x02	; 2
    3bf2:	0e 94 09 12 	call	0x2412	; 0x2412 <uxListRemove>
            it must be present in the function call.  prvSampleTimeNow() must be
            called after the message is received from xTimerQueue so there is no
            possibility of a higher priority task adding a message to the message
            queue with a time that is ahead of the timer daemon task (because it
            pre-empted the timer daemon task after the xTimeNow value was set). */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    3bf6:	ce 01       	movw	r24, r28
    3bf8:	06 96       	adiw	r24, 0x06	; 6
    3bfa:	18 df       	rcall	.-464    	; 0x3a2c <prvSampleTimeNow>
    3bfc:	ac 01       	movw	r20, r24

            switch( xMessage.xMessageID )
    3bfe:	99 81       	ldd	r25, Y+1	; 0x01
    3c00:	94 30       	cpi	r25, 0x04	; 4
    3c02:	89 f1       	breq	.+98     	; 0x3c66 <prvTimerTask+0x15e>
    3c04:	1c f4       	brge	.+6      	; 0x3c0c <prvTimerTask+0x104>
    3c06:	93 30       	cpi	r25, 0x03	; 3
    3c08:	d0 f5       	brcc	.+116    	; 0x3c7e <prvTimerTask+0x176>
    3c0a:	07 c0       	rjmp	.+14     	; 0x3c1a <prvTimerTask+0x112>
    3c0c:	96 30       	cpi	r25, 0x06	; 6
    3c0e:	bc f1       	brlt	.+110    	; 0x3c7e <prvTimerTask+0x176>
    3c10:	98 30       	cpi	r25, 0x08	; 8
    3c12:	1c f0       	brlt	.+6      	; 0x3c1a <prvTimerTask+0x112>
    3c14:	99 30       	cpi	r25, 0x09	; 9
    3c16:	39 f1       	breq	.+78     	; 0x3c66 <prvTimerTask+0x15e>
    3c18:	32 c0       	rjmp	.+100    	; 0x3c7e <prvTimerTask+0x176>
                case tmrCOMMAND_START_FROM_ISR :
                case tmrCOMMAND_RESET :
                case tmrCOMMAND_RESET_FROM_ISR :
                case tmrCOMMAND_START_DONT_TRACE :
                    /* Start or restart a timer. */
                    if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    3c1a:	2a 81       	ldd	r18, Y+2	; 0x02
    3c1c:	3b 81       	ldd	r19, Y+3	; 0x03
    3c1e:	d5 01       	movw	r26, r10
    3c20:	1c 96       	adiw	r26, 0x0c	; 12
    3c22:	6d 91       	ld	r22, X+
    3c24:	7c 91       	ld	r23, X
    3c26:	1d 97       	sbiw	r26, 0x0d	; 13
    3c28:	62 0f       	add	r22, r18
    3c2a:	73 1f       	adc	r23, r19
    3c2c:	c5 01       	movw	r24, r10
    3c2e:	14 de       	rcall	.-984    	; 0x3858 <prvInsertTimerInActiveList>
    3c30:	88 23       	and	r24, r24
    3c32:	29 f1       	breq	.+74     	; 0x3c7e <prvTimerTask+0x176>
                    {
                        /* The timer expired before it was added to the active
                        timer list.  Process it now. */
                        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    3c34:	d5 01       	movw	r26, r10
    3c36:	51 96       	adiw	r26, 0x11	; 17
    3c38:	ed 91       	ld	r30, X+
    3c3a:	fc 91       	ld	r31, X
    3c3c:	52 97       	sbiw	r26, 0x12	; 18
    3c3e:	c5 01       	movw	r24, r10
    3c40:	19 95       	eicall
                        traceTIMER_EXPIRED( pxTimer );

                        if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    3c42:	f5 01       	movw	r30, r10
    3c44:	86 85       	ldd	r24, Z+14	; 0x0e
    3c46:	81 30       	cpi	r24, 0x01	; 1
    3c48:	d1 f4       	brne	.+52     	; 0x3c7e <prvTimerTask+0x176>
                        {
                            xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    3c4a:	4a 81       	ldd	r20, Y+2	; 0x02
    3c4c:	5b 81       	ldd	r21, Y+3	; 0x03
    3c4e:	84 85       	ldd	r24, Z+12	; 0x0c
    3c50:	95 85       	ldd	r25, Z+13	; 0x0d
    3c52:	48 0f       	add	r20, r24
    3c54:	59 1f       	adc	r21, r25
    3c56:	0e 2d       	mov	r16, r14
    3c58:	1f 2d       	mov	r17, r15
    3c5a:	2e 2d       	mov	r18, r14
    3c5c:	3f 2d       	mov	r19, r15
    3c5e:	65 2d       	mov	r22, r5
    3c60:	c5 01       	movw	r24, r10
    3c62:	9e de       	rcall	.-708    	; 0x39a0 <xTimerGenericCommand>
    3c64:	0c c0       	rjmp	.+24     	; 0x3c7e <prvTimerTask+0x176>
                    There is nothing to do here. */
                    break;

                case tmrCOMMAND_CHANGE_PERIOD :
                case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
                    pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    3c66:	6a 81       	ldd	r22, Y+2	; 0x02
    3c68:	7b 81       	ldd	r23, Y+3	; 0x03
    3c6a:	d5 01       	movw	r26, r10
    3c6c:	1d 96       	adiw	r26, 0x0d	; 13
    3c6e:	7c 93       	st	X, r23
    3c70:	6e 93       	st	-X, r22
                    be longer or shorter than the old one.  The command time is
                    therefore set to the current time, and as the period cannot
                    be zero the next expiry time can only be in the future,
                    meaning (unlike for the xTimerStart() case above) there is
                    no fail case that needs to be handled here. */
                    ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    3c72:	1c 97       	sbiw	r26, 0x0c	; 12
    3c74:	64 0f       	add	r22, r20
    3c76:	75 1f       	adc	r23, r21
    3c78:	9a 01       	movw	r18, r20
    3c7a:	c5 01       	movw	r24, r10
    3c7c:	ed dd       	rcall	.-1062   	; 0x3858 <prvInsertTimerInActiveList>
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

    while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    3c7e:	4e 2d       	mov	r20, r14
    3c80:	5f 2d       	mov	r21, r15
    3c82:	6c 2d       	mov	r22, r12
    3c84:	7d 2d       	mov	r23, r13
    3c86:	80 91 25 0d 	lds	r24, 0x0D25	; 0x800d25 <xTimerQueue>
    3c8a:	90 91 26 0d 	lds	r25, 0x0D26	; 0x800d26 <xTimerQueue+0x1>
    3c8e:	0e 94 90 15 	call	0x2b20	; 0x2b20 <xQueueReceive>
    3c92:	81 11       	cpse	r24, r1
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

    vTaskSuspendAll();
    3c94:	a1 cf       	rjmp	.-190    	; 0x3bd8 <prvTimerTask+0xd0>
    3c96:	48 cf       	rjmp	.-368    	; 0x3b28 <prvTimerTask+0x20>
        /* Obtain the time now to make an assessment as to whether the timer
        has expired or not.  If obtaining the time causes the lists to switch
        then don't process this timer as any timers that remained in the list
        when the lists were switched will have been processed within the
        prvSampleTimeNow() function. */
        xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    3c98:	41 da       	rcall	.-2942   	; 0x311c <vTaskSuspendAll>
    3c9a:	c4 01       	movw	r24, r8
    3c9c:	c7 de       	rcall	.-626    	; 0x3a2c <prvSampleTimeNow>
    3c9e:	8c 01       	movw	r16, r24
        if( xTimerListsWereSwitched == pdFALSE )
    3ca0:	89 81       	ldd	r24, Y+1	; 0x01
    3ca2:	81 11       	cpse	r24, r1
    3ca4:	97 cf       	rjmp	.-210    	; 0x3bd4 <prvTimerTask+0xcc>
                case when the current timer list is empty. */
                if( xListWasEmpty != pdFALSE )
                {
                    /* The current timer list is empty - is the overflow list
                    also empty? */
                    xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    3ca6:	e0 91 27 0d 	lds	r30, 0x0D27	; 0x800d27 <pxOverflowTimerList>
    3caa:	f0 91 28 0d 	lds	r31, 0x0D28	; 0x800d28 <pxOverflowTimerList+0x1>
    3cae:	80 81       	ld	r24, Z
    3cb0:	44 2d       	mov	r20, r4
    3cb2:	81 11       	cpse	r24, r1
    3cb4:	45 2d       	mov	r20, r5
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    }
    else
    {
        /* Ensure the task unblocks when the tick count rolls over. */
        xNextExpireTime = ( TickType_t ) 0U;
    3cb6:	ae 2c       	mov	r10, r14
    3cb8:	bf 2c       	mov	r11, r15
    3cba:	7e cf       	rjmp	.-260    	; 0x3bb8 <prvTimerTask+0xb0>

00003cbc <LCD_main_Init>:

void (*g_callback_read_timeout)(void);
void (*g_callback_write_timeout)(void);

void LCD_main_Init( void(*callback_read_timeout)(void) , void(*callback_write_timeout)(void)){
	g_callback_read_timeout = callback_read_timeout;
    3cbc:	90 93 72 0f 	sts	0x0F72, r25	; 0x800f72 <g_callback_read_timeout+0x1>
    3cc0:	80 93 71 0f 	sts	0x0F71, r24	; 0x800f71 <g_callback_read_timeout>
	g_callback_write_timeout = callback_write_timeout;
    3cc4:	70 93 70 0f 	sts	0x0F70, r23	; 0x800f70 <g_callback_write_timeout+0x1>
    3cc8:	60 93 6f 0f 	sts	0x0F6F, r22	; 0x800f6f <g_callback_write_timeout>
    3ccc:	08 95       	ret

00003cce <LCD_main>:
	RTE_set_Start_blancher_Operation(s_Lcd_data_read.Start_blancher_operation);
}


static void LCD_RTE_COLLECT(void){
		s_Lcd_data_write.Drum_speed = RTE_get_Drum_speed();
    3cce:	0b e4       	ldi	r16, 0x4B	; 75
    3cd0:	1f e0       	ldi	r17, 0x0F	; 15


static uint8_t LCD_READ_Parameters(void){
	//call LCD_read_mutliple regs (fill the struct) and check for the errors //s_Lcd_data_read
	//set rte parameters
	return Lcd_Read_multiple_data(LCD_START_READ_ADDRESS,(uint16_t*)&s_Lcd_data_read,LCD_READ_REGS_NUMBER);
    3cd2:	41 e1       	ldi	r20, 0x11	; 17
    3cd4:	6f e4       	ldi	r22, 0x4F	; 79
    3cd6:	7f e0       	ldi	r23, 0x0F	; 15
    3cd8:	81 e0       	ldi	r24, 0x01	; 1
    3cda:	90 e0       	ldi	r25, 0x00	; 0
    3cdc:	0e 94 48 02 	call	0x490	; 0x490 <Lcd_Read_multiple_data>
	static uint8_t read_err_counter = 0 ,write_err_counter = 0 ;

	while(1){
		
		uint8_t r_err =  LCD_READ_Parameters();
 		if(LCD_RESPONCE_TIMED_OUT == r_err)
    3ce0:	82 3e       	cpi	r24, 0xE2	; 226
    3ce2:	71 f4       	brne	.+28     	; 0x3d00 <LCD_main+0x32>
 		{
			 read_err_counter++;
    3ce4:	80 91 2c 0d 	lds	r24, 0x0D2C	; 0x800d2c <read_err_counter.2568>
    3ce8:	8f 5f       	subi	r24, 0xFF	; 255
    3cea:	80 93 2c 0d 	sts	0x0D2C, r24	; 0x800d2c <read_err_counter.2568>
			 if(LCD_READING_TIMEOUT_MATURE == read_err_counter){
    3cee:	85 30       	cpi	r24, 0x05	; 5
    3cf0:	09 f0       	breq	.+2      	; 0x3cf4 <LCD_main+0x26>
    3cf2:	4a c0       	rjmp	.+148    	; 0x3d88 <LCD_main+0xba>
				//  callback error notification for reading timeout
				g_callback_read_timeout();
    3cf4:	e0 91 71 0f 	lds	r30, 0x0F71	; 0x800f71 <g_callback_read_timeout>
    3cf8:	f0 91 72 0f 	lds	r31, 0x0F72	; 0x800f72 <g_callback_read_timeout+0x1>
    3cfc:	19 95       	eicall
    3cfe:	44 c0       	rjmp	.+136    	; 0x3d88 <LCD_main+0xba>
}

//drum speed & current temp
//s_Lcd_data_read
static void LCD_RTE_FEED(void){
	RTE_set_Set_temperature(s_Lcd_data_read.Set_temp);
    3d00:	cf e4       	ldi	r28, 0x4F	; 79
    3d02:	df e0       	ldi	r29, 0x0F	; 15
    3d04:	8a 85       	ldd	r24, Y+10	; 0x0a
    3d06:	9b 85       	ldd	r25, Y+11	; 0x0b
    3d08:	0e 94 23 11 	call	0x2246	; 0x2246 <RTE_set_Set_temperature>
	RTE_set_Sleep_temperature(s_Lcd_data_read.Sleep_temp);
    3d0c:	88 85       	ldd	r24, Y+8	; 0x08
    3d0e:	99 85       	ldd	r25, Y+9	; 0x09
    3d10:	0e 94 14 11 	call	0x2228	; 0x2228 <RTE_set_Sleep_temperature>
	RTE_set_Threshold_set_temperature(s_Lcd_data_read.Threshold_set_temp);
    3d14:	8c 85       	ldd	r24, Y+12	; 0x0c
    3d16:	9d 85       	ldd	r25, Y+13	; 0x0d
    3d18:	0e 94 32 11 	call	0x2264	; 0x2264 <RTE_set_Threshold_set_temperature>
	RTE_set_Threshold_sleep_temperature(s_Lcd_data_read.Threshold_sleep_temp);
    3d1c:	8e 85       	ldd	r24, Y+14	; 0x0e
    3d1e:	9f 85       	ldd	r25, Y+15	; 0x0f
    3d20:	0e 94 41 11 	call	0x2282	; 0x2282 <RTE_set_Threshold_sleep_temperature>
	RTE_set_Negative_offset_temperature(s_Lcd_data_read.Negative_offset_temp);
    3d24:	8a 89       	ldd	r24, Y+18	; 0x12
    3d26:	9b 89       	ldd	r25, Y+19	; 0x13
    3d28:	0e 94 5f 11 	call	0x22be	; 0x22be <RTE_set_Negative_offset_temperature>
	RTE_set_Positive_offset_temperature(s_Lcd_data_read.Positive_offset_temp);
    3d2c:	88 89       	ldd	r24, Y+16	; 0x10
    3d2e:	99 89       	ldd	r25, Y+17	; 0x11
    3d30:	0e 94 50 11 	call	0x22a0	; 0x22a0 <RTE_set_Positive_offset_temperature>
	RTE_set_System_on(s_Lcd_data_read.System_on);
    3d34:	88 81       	ld	r24, Y
    3d36:	99 81       	ldd	r25, Y+1	; 0x01
    3d38:	0e 94 87 10 	call	0x210e	; 0x210e <RTE_set_System_on>
	RTE_set_Wash_Operation(s_Lcd_data_read.Wash_operation);
    3d3c:	8c 81       	ldd	r24, Y+4	; 0x04
    3d3e:	9d 81       	ldd	r25, Y+5	; 0x05
    3d40:	0e 94 a5 10 	call	0x214a	; 0x214a <RTE_set_Wash_Operation>
	RTE_set_Tank_Calibration_Operation(s_Lcd_data_read.Tank_calibration_operation);
    3d44:	8e 81       	ldd	r24, Y+6	; 0x06
    3d46:	9f 81       	ldd	r25, Y+7	; 0x07
    3d48:	0e 94 b4 10 	call	0x2168	; 0x2168 <RTE_set_Tank_Calibration_Operation>
	RTE_set_Gear_ratio(s_Lcd_data_read.Gear_ratio);
    3d4c:	8c 89       	ldd	r24, Y+20	; 0x14
    3d4e:	9d 89       	ldd	r25, Y+21	; 0x15
    3d50:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <RTE_set_Gear_ratio>
	RTE_set_Conveyor_length(s_Lcd_data_read.Conveyor_length);
    3d54:	8e 89       	ldd	r24, Y+22	; 0x16
    3d56:	9f 89       	ldd	r25, Y+23	; 0x17
    3d58:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <RTE_set_Conveyor_length>
	RTE_set_Driver_diameter(s_Lcd_data_read.Driver_diameter);
    3d5c:	88 8d       	ldd	r24, Y+24	; 0x18
    3d5e:	99 8d       	ldd	r25, Y+25	; 0x19
    3d60:	0e 94 0a 10 	call	0x2014	; 0x2014 <RTE_set_Driver_diameter>
	RTE_set_Time_minute(s_Lcd_data_read.Time_minute);
    3d64:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3d66:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3d68:	0e 94 19 10 	call	0x2032	; 0x2032 <RTE_set_Time_minute>
	RTE_set_Time_second(s_Lcd_data_read.Time_second);
    3d6c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3d6e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3d70:	0e 94 28 10 	call	0x2050	; 0x2050 <RTE_set_Time_second>
	RTE_set_RPM_max(s_Lcd_data_read.RPM_max);
    3d74:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3d76:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3d78:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <RTE_set_RPM_max>
	RTE_set_Start_blancher_Operation(s_Lcd_data_read.Start_blancher_operation);
    3d7c:	8a 81       	ldd	r24, Y+2	; 0x02
    3d7e:	9b 81       	ldd	r25, Y+3	; 0x03
    3d80:	0e 94 96 10 	call	0x212c	; 0x212c <RTE_set_Start_blancher_Operation>
			 }
			 
 		}
	    else{
			LCD_RTE_FEED();	
			read_err_counter = 0;
    3d84:	10 92 2c 0d 	sts	0x0D2C, r1	; 0x800d2c <read_err_counter.2568>
	RTE_set_Start_blancher_Operation(s_Lcd_data_read.Start_blancher_operation);
}


static void LCD_RTE_COLLECT(void){
		s_Lcd_data_write.Drum_speed = RTE_get_Drum_speed();
    3d88:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <RTE_get_Drum_speed>
    3d8c:	f8 01       	movw	r30, r16
    3d8e:	91 83       	std	Z+1, r25	; 0x01
    3d90:	80 83       	st	Z, r24
		s_Lcd_data_write.Current_temperature = RTE_get_Current_temperature();
    3d92:	0e 94 73 11 	call	0x22e6	; 0x22e6 <RTE_get_Current_temperature>
    3d96:	f8 01       	movw	r30, r16
    3d98:	93 83       	std	Z+3, r25	; 0x03
    3d9a:	82 83       	std	Z+2, r24	; 0x02

}


static uint8_t LCD_WRITE_Parameters(void){
	return Lcd_Write_multiple_data(LCD_START_WRITE_ADDRESS,(uint16_t*)&s_Lcd_data_write,LCD_WRITE_REGS_NUMBER);
    3d9c:	42 e0       	ldi	r20, 0x02	; 2
    3d9e:	b8 01       	movw	r22, r16
    3da0:	80 e0       	ldi	r24, 0x00	; 0
    3da2:	9f e0       	ldi	r25, 0x0F	; 15
    3da4:	0e 94 6e 02 	call	0x4dc	; 0x4dc <Lcd_Write_multiple_data>
			read_err_counter = 0;
		}
		
 		LCD_RTE_COLLECT();
		uint8_t w_err = LCD_WRITE_Parameters();
		if(LCD_RESPONCE_TIMED_OUT == w_err)
    3da8:	82 3e       	cpi	r24, 0xE2	; 226
    3daa:	69 f4       	brne	.+26     	; 0x3dc6 <LCD_main+0xf8>
		{
			write_err_counter++;
    3dac:	80 91 2b 0d 	lds	r24, 0x0D2B	; 0x800d2b <write_err_counter.2569>
    3db0:	8f 5f       	subi	r24, 0xFF	; 255
    3db2:	80 93 2b 0d 	sts	0x0D2B, r24	; 0x800d2b <write_err_counter.2569>
			if( LCD_WRITING_TIMEOUT_MATURE == write_err_counter){
    3db6:	85 30       	cpi	r24, 0x05	; 5
    3db8:	41 f4       	brne	.+16     	; 0x3dca <LCD_main+0xfc>
				//callback error notification for writing timeout
				g_callback_write_timeout();
    3dba:	e0 91 6f 0f 	lds	r30, 0x0F6F	; 0x800f6f <g_callback_write_timeout>
    3dbe:	f0 91 70 0f 	lds	r31, 0x0F70	; 0x800f70 <g_callback_write_timeout+0x1>
    3dc2:	19 95       	eicall
    3dc4:	02 c0       	rjmp	.+4      	; 0x3dca <LCD_main+0xfc>
			}	
		}
		else{
			write_err_counter = 0;
    3dc6:	10 92 2b 0d 	sts	0x0D2B, r1	; 0x800d2b <write_err_counter.2569>
				UART0_OutUDec(Debug_read[i]);
				UART0_puts("\n");
				
			}
		#endif
		vTaskDelay(200/portTICK_PERIOD_MS);
    3dca:	8c e0       	ldi	r24, 0x0C	; 12
    3dcc:	90 e0       	ldi	r25, 0x00	; 0
    3dce:	e6 da       	rcall	.-2612   	; 0x339c <vTaskDelay>
		//_delay_ms(2000);
	}
    3dd0:	80 cf       	rjmp	.-256    	; 0x3cd2 <LCD_main+0x4>

00003dd2 <System_init>:


gSystemError System_init(void){
	
	gSystemError res = E_OK;
	DIO_init();
    3dd2:	0e 94 11 0b 	call	0x1622	; 0x1622 <DIO_init>
	millis_init();	
    3dd6:	1e d0       	rcall	.+60     	; 0x3e14 <millis_init>
	Lcd_init(UART3,115200,1);
    3dd8:	21 e0       	ldi	r18, 0x01	; 1
    3dda:	40 e0       	ldi	r20, 0x00	; 0
    3ddc:	52 ec       	ldi	r21, 0xC2	; 194
    3dde:	61 e0       	ldi	r22, 0x01	; 1
    3de0:	70 e0       	ldi	r23, 0x00	; 0
    3de2:	83 e0       	ldi	r24, 0x03	; 3
    3de4:	0e 94 34 02 	call	0x468	; 0x468 <Lcd_init>
	RTE_init();
    3de8:	0e 94 51 10 	call	0x20a2	; 0x20a2 <RTE_init>
	return res;

    3dec:	80 e0       	ldi	r24, 0x00	; 0
    3dee:	08 95       	ret

00003df0 <crc16_update>:

uint16_t crc16_update(uint16_t crc, uint8_t a)
{
  int i;

  crc ^= a;
    3df0:	86 27       	eor	r24, r22
    3df2:	28 e0       	ldi	r18, 0x08	; 8
    3df4:	30 e0       	ldi	r19, 0x00	; 0
  for (i = 0; i < 8; ++i)
  {
    if (crc & 1)
    3df6:	80 ff       	sbrs	r24, 0
    3df8:	07 c0       	rjmp	.+14     	; 0x3e08 <crc16_update+0x18>
      crc = (crc >> 1) ^ 0xA001;
    3dfa:	96 95       	lsr	r25
    3dfc:	87 95       	ror	r24
    3dfe:	41 e0       	ldi	r20, 0x01	; 1
    3e00:	84 27       	eor	r24, r20
    3e02:	40 ea       	ldi	r20, 0xA0	; 160
    3e04:	94 27       	eor	r25, r20
    3e06:	02 c0       	rjmp	.+4      	; 0x3e0c <crc16_update+0x1c>
    else
      crc = (crc >> 1);
    3e08:	96 95       	lsr	r25
    3e0a:	87 95       	ror	r24
    3e0c:	21 50       	subi	r18, 0x01	; 1
    3e0e:	31 09       	sbc	r19, r1
uint16_t crc16_update(uint16_t crc, uint8_t a)
{
  int i;

  crc ^= a;
  for (i = 0; i < 8; ++i)
    3e10:	91 f7       	brne	.-28     	; 0x3df6 <crc16_update+0x6>
    else
      crc = (crc >> 1);
  }

  return crc;
}
    3e12:	08 95       	ret

00003e14 <millis_init>:

//init the timer on ctc mode to calvulate millis
void millis_init()
{
	//CTC mode
	TIMER2_CONGFIG_A = 0x02;
    3e14:	82 e0       	ldi	r24, 0x02	; 2
    3e16:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
	// Clock/64
	TIMER2_CONGFIG_B = 0x04;
    3e1a:	84 e0       	ldi	r24, 0x04	; 4
    3e1c:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7000b1>
    // Load into the output compare
    TIMER2_COMPARE = CTC_MATCH_OVERFLOW;
    3e20:	8a ef       	ldi	r24, 0xFA	; 250
    3e22:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7000b3>
    // Enable the compare match interrupt
    SET_BIT(TIMER2_INTERUPT, TIMER2_COMPARE_INT);
    3e26:	e0 e7       	ldi	r30, 0x70	; 112
    3e28:	f0 e0       	ldi	r31, 0x00	; 0
    3e2a:	80 81       	ld	r24, Z
    3e2c:	82 60       	ori	r24, 0x02	; 2
    3e2e:	80 83       	st	Z, r24
    3e30:	08 95       	ret

00003e32 <Get_millis>:
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    3e32:	f8 94       	cli
    unsigned long millis_return;

    // Ensure this cannot be disrupted
    ATOMIC_BLOCK(ATOMIC_FORCEON) {
    	// copy the ISR counter
        millis_return = timer1_millis;
    3e34:	60 91 73 0f 	lds	r22, 0x0F73	; 0x800f73 <timer1_millis>
    3e38:	70 91 74 0f 	lds	r23, 0x0F74	; 0x800f74 <timer1_millis+0x1>
    3e3c:	80 91 75 0f 	lds	r24, 0x0F75	; 0x800f75 <timer1_millis+0x2>
    3e40:	90 91 76 0f 	lds	r25, 0x0F76	; 0x800f76 <timer1_millis+0x3>
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
    3e44:	78 94       	sei
    }

    return millis_return;
}//Get_millis
    3e46:	08 95       	ret

00003e48 <__vector_13>:



ISR (TIMER2_COMPA_vect)
{
    3e48:	1f 92       	push	r1
    3e4a:	0f 92       	push	r0
    3e4c:	0f b6       	in	r0, 0x3f	; 63
    3e4e:	0f 92       	push	r0
    3e50:	11 24       	eor	r1, r1
    3e52:	8f 93       	push	r24
    3e54:	9f 93       	push	r25
    3e56:	af 93       	push	r26
    3e58:	bf 93       	push	r27
	//MILLI SEC
    timer1_millis++;
    3e5a:	80 91 73 0f 	lds	r24, 0x0F73	; 0x800f73 <timer1_millis>
    3e5e:	90 91 74 0f 	lds	r25, 0x0F74	; 0x800f74 <timer1_millis+0x1>
    3e62:	a0 91 75 0f 	lds	r26, 0x0F75	; 0x800f75 <timer1_millis+0x2>
    3e66:	b0 91 76 0f 	lds	r27, 0x0F76	; 0x800f76 <timer1_millis+0x3>
    3e6a:	01 96       	adiw	r24, 0x01	; 1
    3e6c:	a1 1d       	adc	r26, r1
    3e6e:	b1 1d       	adc	r27, r1
    3e70:	80 93 73 0f 	sts	0x0F73, r24	; 0x800f73 <timer1_millis>
    3e74:	90 93 74 0f 	sts	0x0F74, r25	; 0x800f74 <timer1_millis+0x1>
    3e78:	a0 93 75 0f 	sts	0x0F75, r26	; 0x800f75 <timer1_millis+0x2>
    3e7c:	b0 93 76 0f 	sts	0x0F76, r27	; 0x800f76 <timer1_millis+0x3>
}//ISR
    3e80:	bf 91       	pop	r27
    3e82:	af 91       	pop	r26
    3e84:	9f 91       	pop	r25
    3e86:	8f 91       	pop	r24
    3e88:	0f 90       	pop	r0
    3e8a:	0f be       	out	0x3f, r0	; 63
    3e8c:	0f 90       	pop	r0
    3e8e:	1f 90       	pop	r1
    3e90:	18 95       	reti

00003e92 <__udivmodsi4>:
    3e92:	a1 e2       	ldi	r26, 0x21	; 33
    3e94:	1a 2e       	mov	r1, r26
    3e96:	aa 1b       	sub	r26, r26
    3e98:	bb 1b       	sub	r27, r27
    3e9a:	fd 01       	movw	r30, r26
    3e9c:	0d c0       	rjmp	.+26     	; 0x3eb8 <__udivmodsi4_ep>

00003e9e <__udivmodsi4_loop>:
    3e9e:	aa 1f       	adc	r26, r26
    3ea0:	bb 1f       	adc	r27, r27
    3ea2:	ee 1f       	adc	r30, r30
    3ea4:	ff 1f       	adc	r31, r31
    3ea6:	a2 17       	cp	r26, r18
    3ea8:	b3 07       	cpc	r27, r19
    3eaa:	e4 07       	cpc	r30, r20
    3eac:	f5 07       	cpc	r31, r21
    3eae:	20 f0       	brcs	.+8      	; 0x3eb8 <__udivmodsi4_ep>
    3eb0:	a2 1b       	sub	r26, r18
    3eb2:	b3 0b       	sbc	r27, r19
    3eb4:	e4 0b       	sbc	r30, r20
    3eb6:	f5 0b       	sbc	r31, r21

00003eb8 <__udivmodsi4_ep>:
    3eb8:	66 1f       	adc	r22, r22
    3eba:	77 1f       	adc	r23, r23
    3ebc:	88 1f       	adc	r24, r24
    3ebe:	99 1f       	adc	r25, r25
    3ec0:	1a 94       	dec	r1
    3ec2:	69 f7       	brne	.-38     	; 0x3e9e <__udivmodsi4_loop>
    3ec4:	60 95       	com	r22
    3ec6:	70 95       	com	r23
    3ec8:	80 95       	com	r24
    3eca:	90 95       	com	r25
    3ecc:	9b 01       	movw	r18, r22
    3ece:	ac 01       	movw	r20, r24
    3ed0:	bd 01       	movw	r22, r26
    3ed2:	cf 01       	movw	r24, r30
    3ed4:	08 95       	ret

00003ed6 <memcpy>:
    3ed6:	fb 01       	movw	r30, r22
    3ed8:	dc 01       	movw	r26, r24
    3eda:	02 c0       	rjmp	.+4      	; 0x3ee0 <memcpy+0xa>
    3edc:	01 90       	ld	r0, Z+
    3ede:	0d 92       	st	X+, r0
    3ee0:	41 50       	subi	r20, 0x01	; 1
    3ee2:	50 40       	sbci	r21, 0x00	; 0
    3ee4:	d8 f7       	brcc	.-10     	; 0x3edc <memcpy+0x6>
    3ee6:	08 95       	ret

00003ee8 <memset>:
    3ee8:	dc 01       	movw	r26, r24
    3eea:	01 c0       	rjmp	.+2      	; 0x3eee <memset+0x6>
    3eec:	6d 93       	st	X+, r22
    3eee:	41 50       	subi	r20, 0x01	; 1
    3ef0:	50 40       	sbci	r21, 0x00	; 0
    3ef2:	e0 f7       	brcc	.-8      	; 0x3eec <memset+0x4>
    3ef4:	08 95       	ret

00003ef6 <_exit>:
    3ef6:	f8 94       	cli

00003ef8 <__stop_program>:
    3ef8:	ff cf       	rjmp	.-2      	; 0x3ef8 <__stop_program>
