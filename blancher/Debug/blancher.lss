
blancher.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000008c  00800200  00003710  000037a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003710  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000009ac  0080028c  0080028c  00003830  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00003830  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003860  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000007b8  00000000  00000000  000038a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000ae00  00000000  00000000  00004058  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000027d0  00000000  00000000  0000ee58  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000073d7  00000000  00000000  00011628  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000019f4  00000000  00000000  00018a00  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00017e25  00000000  00000000  0001a3f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000b177  00000000  00000000  00032219  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000008d0  00000000  00000000  0003d390  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000061f8  00000000  00000000  0003dc60  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	9a c0       	rjmp	.+308    	; 0x136 <__ctors_end>
       2:	00 00       	nop
       4:	b9 c0       	rjmp	.+370    	; 0x178 <__bad_interrupt>
       6:	00 00       	nop
       8:	b7 c0       	rjmp	.+366    	; 0x178 <__bad_interrupt>
       a:	00 00       	nop
       c:	b5 c0       	rjmp	.+362    	; 0x178 <__bad_interrupt>
       e:	00 00       	nop
      10:	b3 c0       	rjmp	.+358    	; 0x178 <__bad_interrupt>
      12:	00 00       	nop
      14:	b1 c0       	rjmp	.+354    	; 0x178 <__bad_interrupt>
      16:	00 00       	nop
      18:	af c0       	rjmp	.+350    	; 0x178 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	ad c0       	rjmp	.+346    	; 0x178 <__bad_interrupt>
      1e:	00 00       	nop
      20:	ab c0       	rjmp	.+342    	; 0x178 <__bad_interrupt>
      22:	00 00       	nop
      24:	a9 c0       	rjmp	.+338    	; 0x178 <__bad_interrupt>
      26:	00 00       	nop
      28:	a7 c0       	rjmp	.+334    	; 0x178 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	a5 c0       	rjmp	.+330    	; 0x178 <__bad_interrupt>
      2e:	00 00       	nop
      30:	0c 94 2c 0e 	jmp	0x1c58	; 0x1c58 <__vector_12>
      34:	0c 94 2f 1b 	jmp	0x365e	; 0x365e <__vector_13>
      38:	9f c0       	rjmp	.+318    	; 0x178 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	9d c0       	rjmp	.+314    	; 0x178 <__bad_interrupt>
      3e:	00 00       	nop
      40:	9b c0       	rjmp	.+310    	; 0x178 <__bad_interrupt>
      42:	00 00       	nop
      44:	9a c0       	rjmp	.+308    	; 0x17a <__vector_17>
      46:	00 00       	nop
      48:	97 c0       	rjmp	.+302    	; 0x178 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	95 c0       	rjmp	.+298    	; 0x178 <__bad_interrupt>
      4e:	00 00       	nop
      50:	93 c0       	rjmp	.+294    	; 0x178 <__bad_interrupt>
      52:	00 00       	nop
      54:	91 c0       	rjmp	.+290    	; 0x178 <__bad_interrupt>
      56:	00 00       	nop
      58:	8f c0       	rjmp	.+286    	; 0x178 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	8d c0       	rjmp	.+282    	; 0x178 <__bad_interrupt>
      5e:	00 00       	nop
      60:	8b c0       	rjmp	.+278    	; 0x178 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 15 0a 	jmp	0x142a	; 0x142a <__vector_25>
      68:	0c 94 4e 0a 	jmp	0x149c	; 0x149c <__vector_26>
      6c:	85 c0       	rjmp	.+266    	; 0x178 <__bad_interrupt>
      6e:	00 00       	nop
      70:	83 c0       	rjmp	.+262    	; 0x178 <__bad_interrupt>
      72:	00 00       	nop
      74:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <__vector_29>
      78:	7f c0       	rjmp	.+254    	; 0x178 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	7d c0       	rjmp	.+250    	; 0x178 <__bad_interrupt>
      7e:	00 00       	nop
      80:	e2 c0       	rjmp	.+452    	; 0x246 <__vector_32>
      82:	00 00       	nop
      84:	79 c0       	rjmp	.+242    	; 0x178 <__bad_interrupt>
      86:	00 00       	nop
      88:	77 c0       	rjmp	.+238    	; 0x178 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	75 c0       	rjmp	.+234    	; 0x178 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 1b 0b 	jmp	0x1636	; 0x1636 <__vector_36>
      94:	0c 94 54 0b 	jmp	0x16a8	; 0x16a8 <__vector_37>
      98:	6f c0       	rjmp	.+222    	; 0x178 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	6d c0       	rjmp	.+218    	; 0x178 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	6b c0       	rjmp	.+214    	; 0x178 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	69 c0       	rjmp	.+210    	; 0x178 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	34 c1       	rjmp	.+616    	; 0x312 <__vector_42>
      aa:	00 00       	nop
      ac:	65 c0       	rjmp	.+202    	; 0x178 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	63 c0       	rjmp	.+198    	; 0x178 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	61 c0       	rjmp	.+194    	; 0x178 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	5f c0       	rjmp	.+190    	; 0x178 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	90 c1       	rjmp	.+800    	; 0x3de <__vector_47>
      be:	00 00       	nop
      c0:	5b c0       	rjmp	.+182    	; 0x178 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	59 c0       	rjmp	.+178    	; 0x178 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	57 c0       	rjmp	.+174    	; 0x178 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 89 0b 	jmp	0x1712	; 0x1712 <__vector_51>
      d0:	0c 94 cc 0b 	jmp	0x1798	; 0x1798 <__vector_52>
      d4:	51 c0       	rjmp	.+162    	; 0x178 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	4f c0       	rjmp	.+158    	; 0x178 <__bad_interrupt>
      da:	00 00       	nop
      dc:	4d c0       	rjmp	.+154    	; 0x178 <__bad_interrupt>
      de:	00 00       	nop
      e0:	4b c0       	rjmp	.+150    	; 0x178 <__bad_interrupt>
	...

000000e4 <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
      e4:	cc e5       	ldi	r28, 0x5C	; 92
      e6:	d9 e0       	ldi	r29, 0x09	; 9
      e8:	02 e7       	ldi	r16, 0x72	; 114
      ea:	19 e0       	ldi	r17, 0x09	; 9
      ec:	80 91 5b 09 	lds	r24, 0x095B	; 0x80095b <uxDeletedTasksWaitingCleanUp>
      f0:	88 23       	and	r24, r24
      f2:	d1 f0       	breq	.+52     	; 0x128 <prvIdleTask+0x44>
      f4:	0f b6       	in	r0, 0x3f	; 63
      f6:	f8 94       	cli
      f8:	0f 92       	push	r0
      fa:	ed 81       	ldd	r30, Y+5	; 0x05
      fc:	fe 81       	ldd	r31, Y+6	; 0x06
      fe:	86 81       	ldd	r24, Z+6	; 0x06
     100:	97 81       	ldd	r25, Z+7	; 0x07
     102:	02 96       	adiw	r24, 0x02	; 2
     104:	0e 94 92 0c 	call	0x1924	; 0x1924 <uxListRemove>
     108:	80 91 51 09 	lds	r24, 0x0951	; 0x800951 <uxCurrentNumberOfTasks>
     10c:	81 50       	subi	r24, 0x01	; 1
     10e:	80 93 51 09 	sts	0x0951, r24	; 0x800951 <uxCurrentNumberOfTasks>
     112:	80 91 5b 09 	lds	r24, 0x095B	; 0x80095b <uxDeletedTasksWaitingCleanUp>
     116:	81 50       	subi	r24, 0x01	; 1
     118:	80 93 5b 09 	sts	0x095B, r24	; 0x80095b <uxDeletedTasksWaitingCleanUp>
     11c:	0f 90       	pop	r0
     11e:	0f be       	out	0x3f, r0	; 63
     120:	80 91 5b 09 	lds	r24, 0x095B	; 0x80095b <uxDeletedTasksWaitingCleanUp>
     124:	81 11       	cpse	r24, r1
     126:	e6 cf       	rjmp	.-52     	; 0xf4 <prvIdleTask+0x10>
     128:	f8 01       	movw	r30, r16
     12a:	80 81       	ld	r24, Z
     12c:	82 30       	cpi	r24, 0x02	; 2
     12e:	f0 f2       	brcs	.-68     	; 0xec <prvIdleTask+0x8>
     130:	0e 94 67 0d 	call	0x1ace	; 0x1ace <vPortYield>
     134:	db cf       	rjmp	.-74     	; 0xec <prvIdleTask+0x8>

00000136 <__ctors_end>:
     136:	11 24       	eor	r1, r1
     138:	1f be       	out	0x3f, r1	; 63
     13a:	cf ef       	ldi	r28, 0xFF	; 255
     13c:	d1 e2       	ldi	r29, 0x21	; 33
     13e:	de bf       	out	0x3e, r29	; 62
     140:	cd bf       	out	0x3d, r28	; 61
     142:	00 e0       	ldi	r16, 0x00	; 0
     144:	0c bf       	out	0x3c, r16	; 60

00000146 <__do_copy_data>:
     146:	12 e0       	ldi	r17, 0x02	; 2
     148:	a0 e0       	ldi	r26, 0x00	; 0
     14a:	b2 e0       	ldi	r27, 0x02	; 2
     14c:	e0 e1       	ldi	r30, 0x10	; 16
     14e:	f7 e3       	ldi	r31, 0x37	; 55
     150:	00 e0       	ldi	r16, 0x00	; 0
     152:	0b bf       	out	0x3b, r16	; 59
     154:	02 c0       	rjmp	.+4      	; 0x15a <__do_copy_data+0x14>
     156:	07 90       	elpm	r0, Z+
     158:	0d 92       	st	X+, r0
     15a:	ac 38       	cpi	r26, 0x8C	; 140
     15c:	b1 07       	cpc	r27, r17
     15e:	d9 f7       	brne	.-10     	; 0x156 <__do_copy_data+0x10>

00000160 <__do_clear_bss>:
     160:	2c e0       	ldi	r18, 0x0C	; 12
     162:	ac e8       	ldi	r26, 0x8C	; 140
     164:	b2 e0       	ldi	r27, 0x02	; 2
     166:	01 c0       	rjmp	.+2      	; 0x16a <.do_clear_bss_start>

00000168 <.do_clear_bss_loop>:
     168:	1d 92       	st	X+, r1

0000016a <.do_clear_bss_start>:
     16a:	a8 33       	cpi	r26, 0x38	; 56
     16c:	b2 07       	cpc	r27, r18
     16e:	e1 f7       	brne	.-8      	; 0x168 <.do_clear_bss_loop>
     170:	0e 94 9b 09 	call	0x1336	; 0x1336 <main>
     174:	0c 94 86 1b 	jmp	0x370c	; 0x370c <_exit>

00000178 <__bad_interrupt>:
     178:	43 cf       	rjmp	.-378    	; 0x0 <__vectors>

0000017a <__vector_17>:
     17a:	1f 92       	push	r1
     17c:	0f 92       	push	r0
     17e:	0f b6       	in	r0, 0x3f	; 63
     180:	0f 92       	push	r0
     182:	11 24       	eor	r1, r1
     184:	0b b6       	in	r0, 0x3b	; 59
     186:	0f 92       	push	r0
     188:	cf 92       	push	r12
     18a:	df 92       	push	r13
     18c:	ef 92       	push	r14
     18e:	ff 92       	push	r15
     190:	0f 93       	push	r16
     192:	1f 93       	push	r17
     194:	2f 93       	push	r18
     196:	3f 93       	push	r19
     198:	4f 93       	push	r20
     19a:	5f 93       	push	r21
     19c:	6f 93       	push	r22
     19e:	7f 93       	push	r23
     1a0:	8f 93       	push	r24
     1a2:	9f 93       	push	r25
     1a4:	af 93       	push	r26
     1a6:	bf 93       	push	r27
     1a8:	ef 93       	push	r30
     1aa:	ff 93       	push	r31
     1ac:	0e 94 24 1b 	call	0x3648	; 0x3648 <Get_millis>
     1b0:	8b 01       	movw	r16, r22
     1b2:	9c 01       	movw	r18, r24
     1b4:	60 93 2b 0a 	sts	0x0A2B, r22	; 0x800a2b <g_Timer1_new_time>
     1b8:	70 93 2c 0a 	sts	0x0A2C, r23	; 0x800a2c <g_Timer1_new_time+0x1>
     1bc:	80 93 2d 0a 	sts	0x0A2D, r24	; 0x800a2d <g_Timer1_new_time+0x2>
     1c0:	90 93 2e 0a 	sts	0x0A2E, r25	; 0x800a2e <g_Timer1_new_time+0x3>
     1c4:	40 91 0b 0a 	lds	r20, 0x0A0B	; 0x800a0b <g_Timer1_old_time>
     1c8:	50 91 0c 0a 	lds	r21, 0x0A0C	; 0x800a0c <g_Timer1_old_time+0x1>
     1cc:	60 91 0d 0a 	lds	r22, 0x0A0D	; 0x800a0d <g_Timer1_old_time+0x2>
     1d0:	70 91 0e 0a 	lds	r23, 0x0A0E	; 0x800a0e <g_Timer1_old_time+0x3>
     1d4:	68 01       	movw	r12, r16
     1d6:	79 01       	movw	r14, r18
     1d8:	c4 1a       	sub	r12, r20
     1da:	d5 0a       	sbc	r13, r21
     1dc:	e6 0a       	sbc	r14, r22
     1de:	f7 0a       	sbc	r15, r23
     1e0:	c7 01       	movw	r24, r14
     1e2:	b6 01       	movw	r22, r12
     1e4:	c0 92 13 0a 	sts	0x0A13, r12	; 0x800a13 <g_diff_time>
     1e8:	d0 92 14 0a 	sts	0x0A14, r13	; 0x800a14 <g_diff_time+0x1>
     1ec:	e0 92 15 0a 	sts	0x0A15, r14	; 0x800a15 <g_diff_time+0x2>
     1f0:	f0 92 16 0a 	sts	0x0A16, r15	; 0x800a16 <g_diff_time+0x3>
     1f4:	00 93 0b 0a 	sts	0x0A0B, r16	; 0x800a0b <g_Timer1_old_time>
     1f8:	10 93 0c 0a 	sts	0x0A0C, r17	; 0x800a0c <g_Timer1_old_time+0x1>
     1fc:	20 93 0d 0a 	sts	0x0A0D, r18	; 0x800a0d <g_Timer1_old_time+0x2>
     200:	30 93 0e 0a 	sts	0x0A0E, r19	; 0x800a0e <g_Timer1_old_time+0x3>
     204:	e0 91 25 0a 	lds	r30, 0x0A25	; 0x800a25 <g_timer1_config>
     208:	f0 91 26 0a 	lds	r31, 0x0A26	; 0x800a26 <g_timer1_config+0x1>
     20c:	02 80       	ldd	r0, Z+2	; 0x02
     20e:	f3 81       	ldd	r31, Z+3	; 0x03
     210:	e0 2d       	mov	r30, r0
     212:	19 95       	eicall
     214:	ff 91       	pop	r31
     216:	ef 91       	pop	r30
     218:	bf 91       	pop	r27
     21a:	af 91       	pop	r26
     21c:	9f 91       	pop	r25
     21e:	8f 91       	pop	r24
     220:	7f 91       	pop	r23
     222:	6f 91       	pop	r22
     224:	5f 91       	pop	r21
     226:	4f 91       	pop	r20
     228:	3f 91       	pop	r19
     22a:	2f 91       	pop	r18
     22c:	1f 91       	pop	r17
     22e:	0f 91       	pop	r16
     230:	ff 90       	pop	r15
     232:	ef 90       	pop	r14
     234:	df 90       	pop	r13
     236:	cf 90       	pop	r12
     238:	0f 90       	pop	r0
     23a:	0b be       	out	0x3b, r0	; 59
     23c:	0f 90       	pop	r0
     23e:	0f be       	out	0x3f, r0	; 63
     240:	0f 90       	pop	r0
     242:	1f 90       	pop	r1
     244:	18 95       	reti

00000246 <__vector_32>:
     246:	1f 92       	push	r1
     248:	0f 92       	push	r0
     24a:	0f b6       	in	r0, 0x3f	; 63
     24c:	0f 92       	push	r0
     24e:	11 24       	eor	r1, r1
     250:	0b b6       	in	r0, 0x3b	; 59
     252:	0f 92       	push	r0
     254:	cf 92       	push	r12
     256:	df 92       	push	r13
     258:	ef 92       	push	r14
     25a:	ff 92       	push	r15
     25c:	0f 93       	push	r16
     25e:	1f 93       	push	r17
     260:	2f 93       	push	r18
     262:	3f 93       	push	r19
     264:	4f 93       	push	r20
     266:	5f 93       	push	r21
     268:	6f 93       	push	r22
     26a:	7f 93       	push	r23
     26c:	8f 93       	push	r24
     26e:	9f 93       	push	r25
     270:	af 93       	push	r26
     272:	bf 93       	push	r27
     274:	ef 93       	push	r30
     276:	ff 93       	push	r31
     278:	0e 94 24 1b 	call	0x3648	; 0x3648 <Get_millis>
     27c:	8b 01       	movw	r16, r22
     27e:	9c 01       	movw	r18, r24
     280:	60 93 21 0a 	sts	0x0A21, r22	; 0x800a21 <g_Timer3_new_time>
     284:	70 93 22 0a 	sts	0x0A22, r23	; 0x800a22 <g_Timer3_new_time+0x1>
     288:	80 93 23 0a 	sts	0x0A23, r24	; 0x800a23 <g_Timer3_new_time+0x2>
     28c:	90 93 24 0a 	sts	0x0A24, r25	; 0x800a24 <g_Timer3_new_time+0x3>
     290:	40 91 05 0a 	lds	r20, 0x0A05	; 0x800a05 <g_Timer3_old_time>
     294:	50 91 06 0a 	lds	r21, 0x0A06	; 0x800a06 <g_Timer3_old_time+0x1>
     298:	60 91 07 0a 	lds	r22, 0x0A07	; 0x800a07 <g_Timer3_old_time+0x2>
     29c:	70 91 08 0a 	lds	r23, 0x0A08	; 0x800a08 <g_Timer3_old_time+0x3>
     2a0:	68 01       	movw	r12, r16
     2a2:	79 01       	movw	r14, r18
     2a4:	c4 1a       	sub	r12, r20
     2a6:	d5 0a       	sbc	r13, r21
     2a8:	e6 0a       	sbc	r14, r22
     2aa:	f7 0a       	sbc	r15, r23
     2ac:	c7 01       	movw	r24, r14
     2ae:	b6 01       	movw	r22, r12
     2b0:	c0 92 13 0a 	sts	0x0A13, r12	; 0x800a13 <g_diff_time>
     2b4:	d0 92 14 0a 	sts	0x0A14, r13	; 0x800a14 <g_diff_time+0x1>
     2b8:	e0 92 15 0a 	sts	0x0A15, r14	; 0x800a15 <g_diff_time+0x2>
     2bc:	f0 92 16 0a 	sts	0x0A16, r15	; 0x800a16 <g_diff_time+0x3>
     2c0:	00 93 05 0a 	sts	0x0A05, r16	; 0x800a05 <g_Timer3_old_time>
     2c4:	10 93 06 0a 	sts	0x0A06, r17	; 0x800a06 <g_Timer3_old_time+0x1>
     2c8:	20 93 07 0a 	sts	0x0A07, r18	; 0x800a07 <g_Timer3_old_time+0x2>
     2cc:	30 93 08 0a 	sts	0x0A08, r19	; 0x800a08 <g_Timer3_old_time+0x3>
     2d0:	e0 91 09 0a 	lds	r30, 0x0A09	; 0x800a09 <g_timer3_config>
     2d4:	f0 91 0a 0a 	lds	r31, 0x0A0A	; 0x800a0a <g_timer3_config+0x1>
     2d8:	02 80       	ldd	r0, Z+2	; 0x02
     2da:	f3 81       	ldd	r31, Z+3	; 0x03
     2dc:	e0 2d       	mov	r30, r0
     2de:	19 95       	eicall
     2e0:	ff 91       	pop	r31
     2e2:	ef 91       	pop	r30
     2e4:	bf 91       	pop	r27
     2e6:	af 91       	pop	r26
     2e8:	9f 91       	pop	r25
     2ea:	8f 91       	pop	r24
     2ec:	7f 91       	pop	r23
     2ee:	6f 91       	pop	r22
     2f0:	5f 91       	pop	r21
     2f2:	4f 91       	pop	r20
     2f4:	3f 91       	pop	r19
     2f6:	2f 91       	pop	r18
     2f8:	1f 91       	pop	r17
     2fa:	0f 91       	pop	r16
     2fc:	ff 90       	pop	r15
     2fe:	ef 90       	pop	r14
     300:	df 90       	pop	r13
     302:	cf 90       	pop	r12
     304:	0f 90       	pop	r0
     306:	0b be       	out	0x3b, r0	; 59
     308:	0f 90       	pop	r0
     30a:	0f be       	out	0x3f, r0	; 63
     30c:	0f 90       	pop	r0
     30e:	1f 90       	pop	r1
     310:	18 95       	reti

00000312 <__vector_42>:
     312:	1f 92       	push	r1
     314:	0f 92       	push	r0
     316:	0f b6       	in	r0, 0x3f	; 63
     318:	0f 92       	push	r0
     31a:	11 24       	eor	r1, r1
     31c:	0b b6       	in	r0, 0x3b	; 59
     31e:	0f 92       	push	r0
     320:	cf 92       	push	r12
     322:	df 92       	push	r13
     324:	ef 92       	push	r14
     326:	ff 92       	push	r15
     328:	0f 93       	push	r16
     32a:	1f 93       	push	r17
     32c:	2f 93       	push	r18
     32e:	3f 93       	push	r19
     330:	4f 93       	push	r20
     332:	5f 93       	push	r21
     334:	6f 93       	push	r22
     336:	7f 93       	push	r23
     338:	8f 93       	push	r24
     33a:	9f 93       	push	r25
     33c:	af 93       	push	r26
     33e:	bf 93       	push	r27
     340:	ef 93       	push	r30
     342:	ff 93       	push	r31
     344:	0e 94 24 1b 	call	0x3648	; 0x3648 <Get_millis>
     348:	8b 01       	movw	r16, r22
     34a:	9c 01       	movw	r18, r24
     34c:	60 93 17 0a 	sts	0x0A17, r22	; 0x800a17 <g_Timer4_new_time>
     350:	70 93 18 0a 	sts	0x0A18, r23	; 0x800a18 <g_Timer4_new_time+0x1>
     354:	80 93 19 0a 	sts	0x0A19, r24	; 0x800a19 <g_Timer4_new_time+0x2>
     358:	90 93 1a 0a 	sts	0x0A1A, r25	; 0x800a1a <g_Timer4_new_time+0x3>
     35c:	40 91 27 0a 	lds	r20, 0x0A27	; 0x800a27 <g_Timer4_old_time>
     360:	50 91 28 0a 	lds	r21, 0x0A28	; 0x800a28 <g_Timer4_old_time+0x1>
     364:	60 91 29 0a 	lds	r22, 0x0A29	; 0x800a29 <g_Timer4_old_time+0x2>
     368:	70 91 2a 0a 	lds	r23, 0x0A2A	; 0x800a2a <g_Timer4_old_time+0x3>
     36c:	68 01       	movw	r12, r16
     36e:	79 01       	movw	r14, r18
     370:	c4 1a       	sub	r12, r20
     372:	d5 0a       	sbc	r13, r21
     374:	e6 0a       	sbc	r14, r22
     376:	f7 0a       	sbc	r15, r23
     378:	c7 01       	movw	r24, r14
     37a:	b6 01       	movw	r22, r12
     37c:	c0 92 13 0a 	sts	0x0A13, r12	; 0x800a13 <g_diff_time>
     380:	d0 92 14 0a 	sts	0x0A14, r13	; 0x800a14 <g_diff_time+0x1>
     384:	e0 92 15 0a 	sts	0x0A15, r14	; 0x800a15 <g_diff_time+0x2>
     388:	f0 92 16 0a 	sts	0x0A16, r15	; 0x800a16 <g_diff_time+0x3>
     38c:	00 93 27 0a 	sts	0x0A27, r16	; 0x800a27 <g_Timer4_old_time>
     390:	10 93 28 0a 	sts	0x0A28, r17	; 0x800a28 <g_Timer4_old_time+0x1>
     394:	20 93 29 0a 	sts	0x0A29, r18	; 0x800a29 <g_Timer4_old_time+0x2>
     398:	30 93 2a 0a 	sts	0x0A2A, r19	; 0x800a2a <g_Timer4_old_time+0x3>
     39c:	e0 91 1b 0a 	lds	r30, 0x0A1B	; 0x800a1b <g_timer4_config>
     3a0:	f0 91 1c 0a 	lds	r31, 0x0A1C	; 0x800a1c <g_timer4_config+0x1>
     3a4:	02 80       	ldd	r0, Z+2	; 0x02
     3a6:	f3 81       	ldd	r31, Z+3	; 0x03
     3a8:	e0 2d       	mov	r30, r0
     3aa:	19 95       	eicall
     3ac:	ff 91       	pop	r31
     3ae:	ef 91       	pop	r30
     3b0:	bf 91       	pop	r27
     3b2:	af 91       	pop	r26
     3b4:	9f 91       	pop	r25
     3b6:	8f 91       	pop	r24
     3b8:	7f 91       	pop	r23
     3ba:	6f 91       	pop	r22
     3bc:	5f 91       	pop	r21
     3be:	4f 91       	pop	r20
     3c0:	3f 91       	pop	r19
     3c2:	2f 91       	pop	r18
     3c4:	1f 91       	pop	r17
     3c6:	0f 91       	pop	r16
     3c8:	ff 90       	pop	r15
     3ca:	ef 90       	pop	r14
     3cc:	df 90       	pop	r13
     3ce:	cf 90       	pop	r12
     3d0:	0f 90       	pop	r0
     3d2:	0b be       	out	0x3b, r0	; 59
     3d4:	0f 90       	pop	r0
     3d6:	0f be       	out	0x3f, r0	; 63
     3d8:	0f 90       	pop	r0
     3da:	1f 90       	pop	r1
     3dc:	18 95       	reti

000003de <__vector_47>:
     3de:	1f 92       	push	r1
     3e0:	0f 92       	push	r0
     3e2:	0f b6       	in	r0, 0x3f	; 63
     3e4:	0f 92       	push	r0
     3e6:	11 24       	eor	r1, r1
     3e8:	0b b6       	in	r0, 0x3b	; 59
     3ea:	0f 92       	push	r0
     3ec:	cf 92       	push	r12
     3ee:	df 92       	push	r13
     3f0:	ef 92       	push	r14
     3f2:	ff 92       	push	r15
     3f4:	0f 93       	push	r16
     3f6:	1f 93       	push	r17
     3f8:	2f 93       	push	r18
     3fa:	3f 93       	push	r19
     3fc:	4f 93       	push	r20
     3fe:	5f 93       	push	r21
     400:	6f 93       	push	r22
     402:	7f 93       	push	r23
     404:	8f 93       	push	r24
     406:	9f 93       	push	r25
     408:	af 93       	push	r26
     40a:	bf 93       	push	r27
     40c:	ef 93       	push	r30
     40e:	ff 93       	push	r31
     410:	95 b1       	in	r25, 0x05	; 5
     412:	81 e0       	ldi	r24, 0x01	; 1
     414:	89 27       	eor	r24, r25
     416:	85 b9       	out	0x05, r24	; 5
     418:	0e 94 24 1b 	call	0x3648	; 0x3648 <Get_millis>
     41c:	8b 01       	movw	r16, r22
     41e:	9c 01       	movw	r18, r24
     420:	60 93 1d 0a 	sts	0x0A1D, r22	; 0x800a1d <g_Timer5_new_time>
     424:	70 93 1e 0a 	sts	0x0A1E, r23	; 0x800a1e <g_Timer5_new_time+0x1>
     428:	80 93 1f 0a 	sts	0x0A1F, r24	; 0x800a1f <g_Timer5_new_time+0x2>
     42c:	90 93 20 0a 	sts	0x0A20, r25	; 0x800a20 <g_Timer5_new_time+0x3>
     430:	40 91 0f 0a 	lds	r20, 0x0A0F	; 0x800a0f <g_Timer5_old_time>
     434:	50 91 10 0a 	lds	r21, 0x0A10	; 0x800a10 <g_Timer5_old_time+0x1>
     438:	60 91 11 0a 	lds	r22, 0x0A11	; 0x800a11 <g_Timer5_old_time+0x2>
     43c:	70 91 12 0a 	lds	r23, 0x0A12	; 0x800a12 <g_Timer5_old_time+0x3>
     440:	68 01       	movw	r12, r16
     442:	79 01       	movw	r14, r18
     444:	c4 1a       	sub	r12, r20
     446:	d5 0a       	sbc	r13, r21
     448:	e6 0a       	sbc	r14, r22
     44a:	f7 0a       	sbc	r15, r23
     44c:	c7 01       	movw	r24, r14
     44e:	b6 01       	movw	r22, r12
     450:	c0 92 13 0a 	sts	0x0A13, r12	; 0x800a13 <g_diff_time>
     454:	d0 92 14 0a 	sts	0x0A14, r13	; 0x800a14 <g_diff_time+0x1>
     458:	e0 92 15 0a 	sts	0x0A15, r14	; 0x800a15 <g_diff_time+0x2>
     45c:	f0 92 16 0a 	sts	0x0A16, r15	; 0x800a16 <g_diff_time+0x3>
     460:	00 93 0f 0a 	sts	0x0A0F, r16	; 0x800a0f <g_Timer5_old_time>
     464:	10 93 10 0a 	sts	0x0A10, r17	; 0x800a10 <g_Timer5_old_time+0x1>
     468:	20 93 11 0a 	sts	0x0A11, r18	; 0x800a11 <g_Timer5_old_time+0x2>
     46c:	30 93 12 0a 	sts	0x0A12, r19	; 0x800a12 <g_Timer5_old_time+0x3>
     470:	e0 91 2f 0a 	lds	r30, 0x0A2F	; 0x800a2f <g_timer5_config>
     474:	f0 91 30 0a 	lds	r31, 0x0A30	; 0x800a30 <g_timer5_config+0x1>
     478:	02 80       	ldd	r0, Z+2	; 0x02
     47a:	f3 81       	ldd	r31, Z+3	; 0x03
     47c:	e0 2d       	mov	r30, r0
     47e:	19 95       	eicall
     480:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <__TEXT_REGION_LENGTH__+0x700124>
     484:	ff 91       	pop	r31
     486:	ef 91       	pop	r30
     488:	bf 91       	pop	r27
     48a:	af 91       	pop	r26
     48c:	9f 91       	pop	r25
     48e:	8f 91       	pop	r24
     490:	7f 91       	pop	r23
     492:	6f 91       	pop	r22
     494:	5f 91       	pop	r21
     496:	4f 91       	pop	r20
     498:	3f 91       	pop	r19
     49a:	2f 91       	pop	r18
     49c:	1f 91       	pop	r17
     49e:	0f 91       	pop	r16
     4a0:	ff 90       	pop	r15
     4a2:	ef 90       	pop	r14
     4a4:	df 90       	pop	r13
     4a6:	cf 90       	pop	r12
     4a8:	0f 90       	pop	r0
     4aa:	0b be       	out	0x3b, r0	; 59
     4ac:	0f 90       	pop	r0
     4ae:	0f be       	out	0x3f, r0	; 63
     4b0:	0f 90       	pop	r0
     4b2:	1f 90       	pop	r1
     4b4:	18 95       	reti

000004b6 <lcd_set_buzzer>:
}

// to open buzzer to 2 second pass 200 to this function
void lcd_set_buzzer(uint16_t value){ //v

		Modbus_Set_transmit_buffer(LCD,0,value);
     4b6:	ac 01       	movw	r20, r24
     4b8:	60 e0       	ldi	r22, 0x00	; 0
     4ba:	80 e0       	ldi	r24, 0x00	; 0
     4bc:	88 d6       	rcall	.+3344   	; 0x11ce <Modbus_Set_transmit_buffer>
		Modbus_Write_multiple_coils(LCD,LCD_BUZZER_REG, 1);
     4be:	41 e0       	ldi	r20, 0x01	; 1
     4c0:	50 e0       	ldi	r21, 0x00	; 0
     4c2:	62 e0       	ldi	r22, 0x02	; 2
     4c4:	70 e0       	ldi	r23, 0x00	; 0
     4c6:	80 e0       	ldi	r24, 0x00	; 0
     4c8:	a3 c6       	rjmp	.+3398   	; 0x1210 <Modbus_Write_multiple_coils>
     4ca:	08 95       	ret

000004cc <Modbus_mster_transaction>:
		g_mod1_write_qty = 0;
		g_mod1_transmit_buffer[0] = u16WriteValue;
		return Modbus_mster_transaction(device, WRITE_SINGLE_REGISTER);
	}
	return INVALID_DEVICE; //error
}
     4cc:	8f 92       	push	r8
     4ce:	9f 92       	push	r9
     4d0:	af 92       	push	r10
     4d2:	bf 92       	push	r11
     4d4:	df 92       	push	r13
     4d6:	ef 92       	push	r14
     4d8:	ff 92       	push	r15
     4da:	0f 93       	push	r16
     4dc:	1f 93       	push	r17
     4de:	cf 93       	push	r28
     4e0:	df 93       	push	r29
     4e2:	cd b7       	in	r28, 0x3d	; 61
     4e4:	de b7       	in	r29, 0x3e	; 62
     4e6:	da 95       	dec	r29
     4e8:	0f b6       	in	r0, 0x3f	; 63
     4ea:	f8 94       	cli
     4ec:	de bf       	out	0x3e, r29	; 62
     4ee:	0f be       	out	0x3f, r0	; 63
     4f0:	cd bf       	out	0x3d, r28	; 61
     4f2:	d6 2e       	mov	r13, r22
     4f4:	81 11       	cpse	r24, r1
     4f6:	00 c3       	rjmp	.+1536   	; 0xaf8 <Modbus_mster_transaction+0x62c>
     4f8:	80 91 bf 04 	lds	r24, 0x04BF	; 0x8004bf <g_mod0_slave>
     4fc:	89 83       	std	Y+1, r24	; 0x01
     4fe:	2f ef       	ldi	r18, 0xFF	; 255
     500:	62 13       	cpse	r22, r18
     502:	06 c0       	rjmp	.+12     	; 0x510 <Modbus_mster_transaction+0x44>
     504:	8f e0       	ldi	r24, 0x0F	; 15
     506:	8a 83       	std	Y+2, r24	; 0x02
     508:	68 94       	set
     50a:	bb 24       	eor	r11, r11
     50c:	b1 f8       	bld	r11, 1
     50e:	32 c0       	rjmp	.+100    	; 0x574 <Modbus_mster_transaction+0xa8>
     510:	6a 83       	std	Y+2, r22	; 0x02
     512:	81 e0       	ldi	r24, 0x01	; 1
     514:	68 17       	cp	r22, r24
     516:	b8 f0       	brcs	.+46     	; 0x546 <Modbus_mster_transaction+0x7a>
     518:	94 e0       	ldi	r25, 0x04	; 4
     51a:	96 17       	cp	r25, r22
     51c:	18 f4       	brcc	.+6      	; 0x524 <Modbus_mster_transaction+0x58>
     51e:	a7 e1       	ldi	r26, 0x17	; 23
     520:	6a 13       	cpse	r22, r26
     522:	11 c0       	rjmp	.+34     	; 0x546 <Modbus_mster_transaction+0x7a>
     524:	80 91 bd 04 	lds	r24, 0x04BD	; 0x8004bd <g_mod0_read_address>
     528:	90 91 be 04 	lds	r25, 0x04BE	; 0x8004be <g_mod0_read_address+0x1>
     52c:	9b 83       	std	Y+3, r25	; 0x03
     52e:	8c 83       	std	Y+4, r24	; 0x04
     530:	80 91 bb 04 	lds	r24, 0x04BB	; 0x8004bb <g_mod0_read_qty>
     534:	90 91 bc 04 	lds	r25, 0x04BC	; 0x8004bc <g_mod0_read_qty+0x1>
     538:	9d 83       	std	Y+5, r25	; 0x05
     53a:	8e 83       	std	Y+6, r24	; 0x06
     53c:	0f 2e       	mov	r0, r31
     53e:	f6 e0       	ldi	r31, 0x06	; 6
     540:	bf 2e       	mov	r11, r31
     542:	f0 2d       	mov	r31, r0
     544:	03 c0       	rjmp	.+6      	; 0x54c <Modbus_mster_transaction+0x80>
     546:	68 94       	set
     548:	bb 24       	eor	r11, r11
     54a:	b1 f8       	bld	r11, 1
     54c:	b0 e1       	ldi	r27, 0x10	; 16
     54e:	bd 15       	cp	r27, r13
     550:	40 f0       	brcs	.+16     	; 0x562 <Modbus_mster_transaction+0x96>
     552:	ef e0       	ldi	r30, 0x0F	; 15
     554:	de 16       	cp	r13, r30
     556:	70 f4       	brcc	.+28     	; 0x574 <Modbus_mster_transaction+0xa8>
     558:	8b ef       	ldi	r24, 0xFB	; 251
     55a:	8d 0d       	add	r24, r13
     55c:	82 30       	cpi	r24, 0x02	; 2
     55e:	00 f5       	brcc	.+64     	; 0x5a0 <Modbus_mster_transaction+0xd4>
     560:	09 c0       	rjmp	.+18     	; 0x574 <Modbus_mster_transaction+0xa8>
     562:	f6 e1       	ldi	r31, 0x16	; 22
     564:	df 16       	cp	r13, r31
     566:	e0 f0       	brcs	.+56     	; 0x5a0 <Modbus_mster_transaction+0xd4>
     568:	27 e1       	ldi	r18, 0x17	; 23
     56a:	2d 15       	cp	r18, r13
     56c:	18 f4       	brcc	.+6      	; 0x574 <Modbus_mster_transaction+0xa8>
     56e:	8f ef       	ldi	r24, 0xFF	; 255
     570:	d8 12       	cpse	r13, r24
     572:	16 c0       	rjmp	.+44     	; 0x5a0 <Modbus_mster_transaction+0xd4>
     574:	90 91 39 04 	lds	r25, 0x0439	; 0x800439 <g_mod0_write_address>
     578:	80 91 3a 04 	lds	r24, 0x043A	; 0x80043a <g_mod0_write_address+0x1>
     57c:	e1 e0       	ldi	r30, 0x01	; 1
     57e:	f0 e0       	ldi	r31, 0x00	; 0
     580:	ec 0f       	add	r30, r28
     582:	fd 1f       	adc	r31, r29
     584:	eb 0d       	add	r30, r11
     586:	f1 1d       	adc	r31, r1
     588:	80 83       	st	Z, r24
     58a:	81 e0       	ldi	r24, 0x01	; 1
     58c:	8b 0d       	add	r24, r11
     58e:	e1 e0       	ldi	r30, 0x01	; 1
     590:	f0 e0       	ldi	r31, 0x00	; 0
     592:	ec 0f       	add	r30, r28
     594:	fd 1f       	adc	r31, r29
     596:	e8 0f       	add	r30, r24
     598:	f1 1d       	adc	r31, r1
     59a:	b3 94       	inc	r11
     59c:	b3 94       	inc	r11
     59e:	90 83       	st	Z, r25
     5a0:	90 e1       	ldi	r25, 0x10	; 16
     5a2:	d9 16       	cp	r13, r25
     5a4:	09 f4       	brne	.+2      	; 0x5a8 <Modbus_mster_transaction+0xdc>
     5a6:	ad c0       	rjmp	.+346    	; 0x702 <Modbus_mster_transaction+0x236>
     5a8:	9d 15       	cp	r25, r13
     5aa:	58 f0       	brcs	.+22     	; 0x5c2 <Modbus_mster_transaction+0xf6>
     5ac:	a6 e0       	ldi	r26, 0x06	; 6
     5ae:	da 16       	cp	r13, r26
     5b0:	61 f1       	breq	.+88     	; 0x60a <Modbus_mster_transaction+0x13e>
     5b2:	bf e0       	ldi	r27, 0x0F	; 15
     5b4:	db 16       	cp	r13, r27
     5b6:	09 f4       	brne	.+2      	; 0x5ba <Modbus_mster_transaction+0xee>
     5b8:	41 c0       	rjmp	.+130    	; 0x63c <Modbus_mster_transaction+0x170>
     5ba:	e5 e0       	ldi	r30, 0x05	; 5
     5bc:	de 12       	cpse	r13, r30
     5be:	1a c1       	rjmp	.+564    	; 0x7f4 <Modbus_mster_transaction+0x328>
     5c0:	0d c0       	rjmp	.+26     	; 0x5dc <Modbus_mster_transaction+0x110>
     5c2:	f7 e1       	ldi	r31, 0x17	; 23
     5c4:	df 16       	cp	r13, r31
     5c6:	09 f4       	brne	.+2      	; 0x5ca <Modbus_mster_transaction+0xfe>
     5c8:	9c c0       	rjmp	.+312    	; 0x702 <Modbus_mster_transaction+0x236>
     5ca:	2f ef       	ldi	r18, 0xFF	; 255
     5cc:	d2 16       	cp	r13, r18
     5ce:	09 f4       	brne	.+2      	; 0x5d2 <Modbus_mster_transaction+0x106>
     5d0:	98 c0       	rjmp	.+304    	; 0x702 <Modbus_mster_transaction+0x236>
     5d2:	86 e1       	ldi	r24, 0x16	; 22
     5d4:	d8 16       	cp	r13, r24
     5d6:	09 f4       	brne	.+2      	; 0x5da <Modbus_mster_transaction+0x10e>
     5d8:	df c0       	rjmp	.+446    	; 0x798 <Modbus_mster_transaction+0x2cc>
     5da:	0c c1       	rjmp	.+536    	; 0x7f4 <Modbus_mster_transaction+0x328>
     5dc:	90 91 37 04 	lds	r25, 0x0437	; 0x800437 <g_mod0_write_qty>
     5e0:	80 91 38 04 	lds	r24, 0x0438	; 0x800438 <g_mod0_write_qty+0x1>
     5e4:	e1 e0       	ldi	r30, 0x01	; 1
     5e6:	f0 e0       	ldi	r31, 0x00	; 0
     5e8:	ec 0f       	add	r30, r28
     5ea:	fd 1f       	adc	r31, r29
     5ec:	eb 0d       	add	r30, r11
     5ee:	f1 1d       	adc	r31, r1
     5f0:	80 83       	st	Z, r24
     5f2:	81 e0       	ldi	r24, 0x01	; 1
     5f4:	8b 0d       	add	r24, r11
     5f6:	e1 e0       	ldi	r30, 0x01	; 1
     5f8:	f0 e0       	ldi	r31, 0x00	; 0
     5fa:	ec 0f       	add	r30, r28
     5fc:	fd 1f       	adc	r31, r29
     5fe:	e8 0f       	add	r30, r24
     600:	f1 1d       	adc	r31, r1
     602:	b3 94       	inc	r11
     604:	b3 94       	inc	r11
     606:	90 83       	st	Z, r25
     608:	f5 c0       	rjmp	.+490    	; 0x7f4 <Modbus_mster_transaction+0x328>
     60a:	e7 eb       	ldi	r30, 0xB7	; 183
     60c:	f3 e0       	ldi	r31, 0x03	; 3
     60e:	80 81       	ld	r24, Z
     610:	91 81       	ldd	r25, Z+1	; 0x01
     612:	a1 e0       	ldi	r26, 0x01	; 1
     614:	b0 e0       	ldi	r27, 0x00	; 0
     616:	ac 0f       	add	r26, r28
     618:	bd 1f       	adc	r27, r29
     61a:	ab 0d       	add	r26, r11
     61c:	b1 1d       	adc	r27, r1
     61e:	9c 93       	st	X, r25
     620:	20 81       	ld	r18, Z
     622:	31 81       	ldd	r19, Z+1	; 0x01
     624:	81 e0       	ldi	r24, 0x01	; 1
     626:	8b 0d       	add	r24, r11
     628:	e1 e0       	ldi	r30, 0x01	; 1
     62a:	f0 e0       	ldi	r31, 0x00	; 0
     62c:	ec 0f       	add	r30, r28
     62e:	fd 1f       	adc	r31, r29
     630:	e8 0f       	add	r30, r24
     632:	f1 1d       	adc	r31, r1
     634:	b3 94       	inc	r11
     636:	b3 94       	inc	r11
     638:	20 83       	st	Z, r18
     63a:	dc c0       	rjmp	.+440    	; 0x7f4 <Modbus_mster_transaction+0x328>
     63c:	80 91 37 04 	lds	r24, 0x0437	; 0x800437 <g_mod0_write_qty>
     640:	90 91 38 04 	lds	r25, 0x0438	; 0x800438 <g_mod0_write_qty+0x1>
     644:	e1 e0       	ldi	r30, 0x01	; 1
     646:	f0 e0       	ldi	r31, 0x00	; 0
     648:	ec 0f       	add	r30, r28
     64a:	fd 1f       	adc	r31, r29
     64c:	eb 0d       	add	r30, r11
     64e:	f1 1d       	adc	r31, r1
     650:	90 83       	st	Z, r25
     652:	32 e0       	ldi	r19, 0x02	; 2
     654:	3b 0d       	add	r19, r11
     656:	21 e0       	ldi	r18, 0x01	; 1
     658:	2b 0d       	add	r18, r11
     65a:	e1 e0       	ldi	r30, 0x01	; 1
     65c:	f0 e0       	ldi	r31, 0x00	; 0
     65e:	ec 0f       	add	r30, r28
     660:	fd 1f       	adc	r31, r29
     662:	e2 0f       	add	r30, r18
     664:	f1 1d       	adc	r31, r1
     666:	80 83       	st	Z, r24
     668:	ac 01       	movw	r20, r24
     66a:	47 70       	andi	r20, 0x07	; 7
     66c:	55 27       	eor	r21, r21
     66e:	45 2b       	or	r20, r21
     670:	49 f0       	breq	.+18     	; 0x684 <Modbus_mster_transaction+0x1b8>
     672:	96 95       	lsr	r25
     674:	87 95       	ror	r24
     676:	96 95       	lsr	r25
     678:	87 95       	ror	r24
     67a:	96 95       	lsr	r25
     67c:	87 95       	ror	r24
     67e:	21 e0       	ldi	r18, 0x01	; 1
     680:	28 0f       	add	r18, r24
     682:	07 c0       	rjmp	.+14     	; 0x692 <Modbus_mster_transaction+0x1c6>
     684:	96 95       	lsr	r25
     686:	87 95       	ror	r24
     688:	96 95       	lsr	r25
     68a:	87 95       	ror	r24
     68c:	96 95       	lsr	r25
     68e:	87 95       	ror	r24
     690:	28 2f       	mov	r18, r24
     692:	93 e0       	ldi	r25, 0x03	; 3
     694:	b9 0e       	add	r11, r25
     696:	fe 01       	movw	r30, r28
     698:	e3 0f       	add	r30, r19
     69a:	f1 1d       	adc	r31, r1
     69c:	21 83       	std	Z+1, r18	; 0x01
     69e:	22 23       	and	r18, r18
     6a0:	09 f4       	brne	.+2      	; 0x6a4 <Modbus_mster_transaction+0x1d8>
     6a2:	a8 c0       	rjmp	.+336    	; 0x7f4 <Modbus_mster_transaction+0x328>
     6a4:	80 e0       	ldi	r24, 0x00	; 0
     6a6:	98 2f       	mov	r25, r24
     6a8:	91 70       	andi	r25, 0x01	; 1
     6aa:	80 ff       	sbrs	r24, 0
     6ac:	03 c0       	rjmp	.+6      	; 0x6b4 <Modbus_mster_transaction+0x1e8>
     6ae:	91 30       	cpi	r25, 0x01	; 1
     6b0:	99 f0       	breq	.+38     	; 0x6d8 <Modbus_mster_transaction+0x20c>
     6b2:	23 c0       	rjmp	.+70     	; 0x6fa <Modbus_mster_transaction+0x22e>
     6b4:	e8 2f       	mov	r30, r24
     6b6:	e6 95       	lsr	r30
     6b8:	f0 e0       	ldi	r31, 0x00	; 0
     6ba:	ee 0f       	add	r30, r30
     6bc:	ff 1f       	adc	r31, r31
     6be:	e9 54       	subi	r30, 0x49	; 73
     6c0:	fc 4f       	sbci	r31, 0xFC	; 252
     6c2:	40 81       	ld	r20, Z
     6c4:	51 81       	ldd	r21, Z+1	; 0x01
     6c6:	e1 e0       	ldi	r30, 0x01	; 1
     6c8:	f0 e0       	ldi	r31, 0x00	; 0
     6ca:	ec 0f       	add	r30, r28
     6cc:	fd 1f       	adc	r31, r29
     6ce:	eb 0d       	add	r30, r11
     6d0:	f1 1d       	adc	r31, r1
     6d2:	40 83       	st	Z, r20
     6d4:	b3 94       	inc	r11
     6d6:	11 c0       	rjmp	.+34     	; 0x6fa <Modbus_mster_transaction+0x22e>
     6d8:	e8 2f       	mov	r30, r24
     6da:	e6 95       	lsr	r30
     6dc:	f0 e0       	ldi	r31, 0x00	; 0
     6de:	ee 0f       	add	r30, r30
     6e0:	ff 1f       	adc	r31, r31
     6e2:	e9 54       	subi	r30, 0x49	; 73
     6e4:	fc 4f       	sbci	r31, 0xFC	; 252
     6e6:	40 81       	ld	r20, Z
     6e8:	51 81       	ldd	r21, Z+1	; 0x01
     6ea:	e1 e0       	ldi	r30, 0x01	; 1
     6ec:	f0 e0       	ldi	r31, 0x00	; 0
     6ee:	ec 0f       	add	r30, r28
     6f0:	fd 1f       	adc	r31, r29
     6f2:	eb 0d       	add	r30, r11
     6f4:	f1 1d       	adc	r31, r1
     6f6:	50 83       	st	Z, r21
     6f8:	b3 94       	inc	r11
     6fa:	8f 5f       	subi	r24, 0xFF	; 255
     6fc:	28 13       	cpse	r18, r24
     6fe:	d3 cf       	rjmp	.-90     	; 0x6a6 <Modbus_mster_transaction+0x1da>
     700:	79 c0       	rjmp	.+242    	; 0x7f4 <Modbus_mster_transaction+0x328>
     702:	60 91 37 04 	lds	r22, 0x0437	; 0x800437 <g_mod0_write_qty>
     706:	70 91 38 04 	lds	r23, 0x0438	; 0x800438 <g_mod0_write_qty+0x1>
     70a:	e1 e0       	ldi	r30, 0x01	; 1
     70c:	f0 e0       	ldi	r31, 0x00	; 0
     70e:	ec 0f       	add	r30, r28
     710:	fd 1f       	adc	r31, r29
     712:	eb 0d       	add	r30, r11
     714:	f1 1d       	adc	r31, r1
     716:	70 83       	st	Z, r23
     718:	81 e0       	ldi	r24, 0x01	; 1
     71a:	8b 0d       	add	r24, r11
     71c:	e1 e0       	ldi	r30, 0x01	; 1
     71e:	f0 e0       	ldi	r31, 0x00	; 0
     720:	ec 0f       	add	r30, r28
     722:	fd 1f       	adc	r31, r29
     724:	e8 0f       	add	r30, r24
     726:	f1 1d       	adc	r31, r1
     728:	60 83       	st	Z, r22
     72a:	82 e0       	ldi	r24, 0x02	; 2
     72c:	8b 0d       	add	r24, r11
     72e:	e1 e0       	ldi	r30, 0x01	; 1
     730:	f0 e0       	ldi	r31, 0x00	; 0
     732:	ec 0f       	add	r30, r28
     734:	fd 1f       	adc	r31, r29
     736:	e8 0f       	add	r30, r24
     738:	f1 1d       	adc	r31, r1
     73a:	a3 e0       	ldi	r26, 0x03	; 3
     73c:	ba 0e       	add	r11, r26
     73e:	86 2f       	mov	r24, r22
     740:	88 0f       	add	r24, r24
     742:	80 83       	st	Z, r24
     744:	77 27       	eor	r23, r23
     746:	16 16       	cp	r1, r22
     748:	17 06       	cpc	r1, r23
     74a:	0c f0       	brlt	.+2      	; 0x74e <Modbus_mster_transaction+0x282>
     74c:	53 c0       	rjmp	.+166    	; 0x7f4 <Modbus_mster_transaction+0x328>
     74e:	80 e0       	ldi	r24, 0x00	; 0
     750:	90 e0       	ldi	r25, 0x00	; 0
     752:	20 e0       	ldi	r18, 0x00	; 0
     754:	88 0f       	add	r24, r24
     756:	99 1f       	adc	r25, r25
     758:	fc 01       	movw	r30, r24
     75a:	e9 54       	subi	r30, 0x49	; 73
     75c:	fc 4f       	sbci	r31, 0xFC	; 252
     75e:	80 81       	ld	r24, Z
     760:	91 81       	ldd	r25, Z+1	; 0x01
     762:	a1 e0       	ldi	r26, 0x01	; 1
     764:	b0 e0       	ldi	r27, 0x00	; 0
     766:	ac 0f       	add	r26, r28
     768:	bd 1f       	adc	r27, r29
     76a:	ab 0d       	add	r26, r11
     76c:	b1 1d       	adc	r27, r1
     76e:	9c 93       	st	X, r25
     770:	40 81       	ld	r20, Z
     772:	51 81       	ldd	r21, Z+1	; 0x01
     774:	81 e0       	ldi	r24, 0x01	; 1
     776:	8b 0d       	add	r24, r11
     778:	e1 e0       	ldi	r30, 0x01	; 1
     77a:	f0 e0       	ldi	r31, 0x00	; 0
     77c:	ec 0f       	add	r30, r28
     77e:	fd 1f       	adc	r31, r29
     780:	e8 0f       	add	r30, r24
     782:	f1 1d       	adc	r31, r1
     784:	b3 94       	inc	r11
     786:	b3 94       	inc	r11
     788:	40 83       	st	Z, r20
     78a:	2f 5f       	subi	r18, 0xFF	; 255
     78c:	82 2f       	mov	r24, r18
     78e:	90 e0       	ldi	r25, 0x00	; 0
     790:	86 17       	cp	r24, r22
     792:	97 07       	cpc	r25, r23
     794:	fc f2       	brlt	.-66     	; 0x754 <Modbus_mster_transaction+0x288>
     796:	2e c0       	rjmp	.+92     	; 0x7f4 <Modbus_mster_transaction+0x328>
     798:	e7 eb       	ldi	r30, 0xB7	; 183
     79a:	f3 e0       	ldi	r31, 0x03	; 3
     79c:	80 81       	ld	r24, Z
     79e:	91 81       	ldd	r25, Z+1	; 0x01
     7a0:	a1 e0       	ldi	r26, 0x01	; 1
     7a2:	b0 e0       	ldi	r27, 0x00	; 0
     7a4:	ac 0f       	add	r26, r28
     7a6:	bd 1f       	adc	r27, r29
     7a8:	ab 0d       	add	r26, r11
     7aa:	b1 1d       	adc	r27, r1
     7ac:	9c 93       	st	X, r25
     7ae:	80 81       	ld	r24, Z
     7b0:	91 81       	ldd	r25, Z+1	; 0x01
     7b2:	91 e0       	ldi	r25, 0x01	; 1
     7b4:	9b 0d       	add	r25, r11
     7b6:	a1 e0       	ldi	r26, 0x01	; 1
     7b8:	b0 e0       	ldi	r27, 0x00	; 0
     7ba:	ac 0f       	add	r26, r28
     7bc:	bd 1f       	adc	r27, r29
     7be:	a9 0f       	add	r26, r25
     7c0:	b1 1d       	adc	r27, r1
     7c2:	8c 93       	st	X, r24
     7c4:	82 81       	ldd	r24, Z+2	; 0x02
     7c6:	93 81       	ldd	r25, Z+3	; 0x03
     7c8:	82 e0       	ldi	r24, 0x02	; 2
     7ca:	8b 0d       	add	r24, r11
     7cc:	a1 e0       	ldi	r26, 0x01	; 1
     7ce:	b0 e0       	ldi	r27, 0x00	; 0
     7d0:	ac 0f       	add	r26, r28
     7d2:	bd 1f       	adc	r27, r29
     7d4:	a8 0f       	add	r26, r24
     7d6:	b1 1d       	adc	r27, r1
     7d8:	9c 93       	st	X, r25
     7da:	22 81       	ldd	r18, Z+2	; 0x02
     7dc:	33 81       	ldd	r19, Z+3	; 0x03
     7de:	83 e0       	ldi	r24, 0x03	; 3
     7e0:	8b 0d       	add	r24, r11
     7e2:	e1 e0       	ldi	r30, 0x01	; 1
     7e4:	f0 e0       	ldi	r31, 0x00	; 0
     7e6:	ec 0f       	add	r30, r28
     7e8:	fd 1f       	adc	r31, r29
     7ea:	e8 0f       	add	r30, r24
     7ec:	f1 1d       	adc	r31, r1
     7ee:	b4 e0       	ldi	r27, 0x04	; 4
     7f0:	bb 0e       	add	r11, r27
     7f2:	20 83       	st	Z, r18
     7f4:	bb 20       	and	r11, r11
     7f6:	b9 f0       	breq	.+46     	; 0x826 <Modbus_mster_transaction+0x35a>
     7f8:	8e 01       	movw	r16, r28
     7fa:	0f 5f       	subi	r16, 0xFF	; 255
     7fc:	1f 4f       	sbci	r17, 0xFF	; 255
     7fe:	ee 24       	eor	r14, r14
     800:	ea 94       	dec	r14
     802:	eb 0c       	add	r14, r11
     804:	f1 2c       	mov	r15, r1
     806:	ef ef       	ldi	r30, 0xFF	; 255
     808:	ee 1a       	sub	r14, r30
     80a:	fe 0a       	sbc	r15, r30
     80c:	e0 0e       	add	r14, r16
     80e:	f1 1e       	adc	r15, r17
     810:	8f ef       	ldi	r24, 0xFF	; 255
     812:	9f ef       	ldi	r25, 0xFF	; 255
     814:	d8 01       	movw	r26, r16
     816:	6d 91       	ld	r22, X+
     818:	8d 01       	movw	r16, r26
     81a:	0e 94 12 1b 	call	0x3624	; 0x3624 <crc16_update>
     81e:	0e 15       	cp	r16, r14
     820:	1f 05       	cpc	r17, r15
     822:	c1 f7       	brne	.-16     	; 0x814 <Modbus_mster_transaction+0x348>
     824:	02 c0       	rjmp	.+4      	; 0x82a <Modbus_mster_transaction+0x35e>
     826:	8f ef       	ldi	r24, 0xFF	; 255
     828:	9f ef       	ldi	r25, 0xFF	; 255
     82a:	ee 24       	eor	r14, r14
     82c:	e3 94       	inc	r14
     82e:	eb 0c       	add	r14, r11
     830:	e1 e0       	ldi	r30, 0x01	; 1
     832:	f0 e0       	ldi	r31, 0x00	; 0
     834:	ec 0f       	add	r30, r28
     836:	fd 1f       	adc	r31, r29
     838:	eb 0d       	add	r30, r11
     83a:	f1 1d       	adc	r31, r1
     83c:	80 83       	st	Z, r24
     83e:	b3 94       	inc	r11
     840:	b3 94       	inc	r11
     842:	e1 e0       	ldi	r30, 0x01	; 1
     844:	f0 e0       	ldi	r31, 0x00	; 0
     846:	ec 0f       	add	r30, r28
     848:	fd 1f       	adc	r31, r29
     84a:	ee 0d       	add	r30, r14
     84c:	f1 1d       	adc	r31, r1
     84e:	90 83       	st	Z, r25
     850:	e1 e0       	ldi	r30, 0x01	; 1
     852:	f0 e0       	ldi	r31, 0x00	; 0
     854:	ec 0f       	add	r30, r28
     856:	fd 1f       	adc	r31, r29
     858:	eb 0d       	add	r30, r11
     85a:	f1 1d       	adc	r31, r1
     85c:	10 82       	st	Z, r1
     85e:	e0 91 aa 03 	lds	r30, 0x03AA	; 0x8003aa <g_mod0_Serial_getc>
     862:	f0 91 ab 03 	lds	r31, 0x03AB	; 0x8003ab <g_mod0_Serial_getc+0x1>
     866:	19 95       	eicall
     868:	81 15       	cp	r24, r1
     86a:	91 40       	sbci	r25, 0x01	; 1
     86c:	c1 f7       	brne	.-16     	; 0x85e <Modbus_mster_transaction+0x392>
     86e:	e0 91 b0 03 	lds	r30, 0x03B0	; 0x8003b0 <g_mod0_pre_transmission>
     872:	f0 91 b1 03 	lds	r31, 0x03B1	; 0x8003b1 <g_mod0_pre_transmission+0x1>
     876:	30 97       	sbiw	r30, 0x00	; 0
     878:	09 f0       	breq	.+2      	; 0x87c <Modbus_mster_transaction+0x3b0>
     87a:	19 95       	eicall
     87c:	bb 20       	and	r11, r11
     87e:	a1 f0       	breq	.+40     	; 0x8a8 <Modbus_mster_transaction+0x3dc>
     880:	8e 01       	movw	r16, r28
     882:	0f 5f       	subi	r16, 0xFF	; 255
     884:	1f 4f       	sbci	r17, 0xFF	; 255
     886:	f1 2c       	mov	r15, r1
     888:	ef ef       	ldi	r30, 0xFF	; 255
     88a:	ee 1a       	sub	r14, r30
     88c:	fe 0a       	sbc	r15, r30
     88e:	e0 0e       	add	r14, r16
     890:	f1 1e       	adc	r15, r17
     892:	e0 91 ac 03 	lds	r30, 0x03AC	; 0x8003ac <g_mod0_Serial_putc>
     896:	f0 91 ad 03 	lds	r31, 0x03AD	; 0x8003ad <g_mod0_Serial_putc+0x1>
     89a:	d8 01       	movw	r26, r16
     89c:	8d 91       	ld	r24, X+
     89e:	8d 01       	movw	r16, r26
     8a0:	19 95       	eicall
     8a2:	0e 15       	cp	r16, r14
     8a4:	1f 05       	cpc	r17, r15
     8a6:	a9 f7       	brne	.-22     	; 0x892 <Modbus_mster_transaction+0x3c6>
     8a8:	e0 91 a8 03 	lds	r30, 0x03A8	; 0x8003a8 <g_mod0_Serial_flush>
     8ac:	f0 91 a9 03 	lds	r31, 0x03A9	; 0x8003a9 <g_mod0_Serial_flush+0x1>
     8b0:	19 95       	eicall
     8b2:	ef e8       	ldi	r30, 0x8F	; 143
     8b4:	f1 e0       	ldi	r31, 0x01	; 1
     8b6:	31 97       	sbiw	r30, 0x01	; 1
     8b8:	f1 f7       	brne	.-4      	; 0x8b6 <Modbus_mster_transaction+0x3ea>
     8ba:	00 c0       	rjmp	.+0      	; 0x8bc <Modbus_mster_transaction+0x3f0>
     8bc:	00 00       	nop
     8be:	e0 91 ae 03 	lds	r30, 0x03AE	; 0x8003ae <g_mod0_post_transmission>
     8c2:	f0 91 af 03 	lds	r31, 0x03AF	; 0x8003af <g_mod0_post_transmission+0x1>
     8c6:	30 97       	sbiw	r30, 0x00	; 0
     8c8:	09 f0       	breq	.+2      	; 0x8cc <Modbus_mster_transaction+0x400>
     8ca:	19 95       	eicall
     8cc:	ff ef       	ldi	r31, 0xFF	; 255
     8ce:	23 ed       	ldi	r18, 0xD3	; 211
     8d0:	80 e3       	ldi	r24, 0x30	; 48
     8d2:	f1 50       	subi	r31, 0x01	; 1
     8d4:	20 40       	sbci	r18, 0x00	; 0
     8d6:	80 40       	sbci	r24, 0x00	; 0
     8d8:	e1 f7       	brne	.-8      	; 0x8d2 <Modbus_mster_transaction+0x406>
     8da:	00 c0       	rjmp	.+0      	; 0x8dc <Modbus_mster_transaction+0x410>
     8dc:	00 00       	nop
     8de:	0e 94 24 1b 	call	0x3648	; 0x3648 <Get_millis>
     8e2:	4b 01       	movw	r8, r22
     8e4:	5c 01       	movw	r10, r24
     8e6:	08 e0       	ldi	r16, 0x08	; 8
     8e8:	10 e0       	ldi	r17, 0x00	; 0
     8ea:	ed 2c       	mov	r14, r13
     8ec:	f1 2c       	mov	r15, r1
     8ee:	e0 91 a6 03 	lds	r30, 0x03A6	; 0x8003a6 <g_mod0_Serial_available>
     8f2:	f0 91 a7 03 	lds	r31, 0x03A7	; 0x8003a7 <g_mod0_Serial_available+0x1>
     8f6:	19 95       	eicall
     8f8:	89 2b       	or	r24, r25
     8fa:	91 f0       	breq	.+36     	; 0x920 <Modbus_mster_transaction+0x454>
     8fc:	dd 24       	eor	r13, r13
     8fe:	d3 94       	inc	r13
     900:	d1 0e       	add	r13, r17
     902:	e0 91 aa 03 	lds	r30, 0x03AA	; 0x8003aa <g_mod0_Serial_getc>
     906:	f0 91 ab 03 	lds	r31, 0x03AB	; 0x8003ab <g_mod0_Serial_getc+0x1>
     90a:	19 95       	eicall
     90c:	e1 e0       	ldi	r30, 0x01	; 1
     90e:	f0 e0       	ldi	r31, 0x00	; 0
     910:	ec 0f       	add	r30, r28
     912:	fd 1f       	adc	r31, r29
     914:	e1 0f       	add	r30, r17
     916:	f1 1d       	adc	r31, r1
     918:	80 83       	st	Z, r24
     91a:	01 50       	subi	r16, 0x01	; 1
     91c:	1d 2d       	mov	r17, r13
     91e:	07 c0       	rjmp	.+14     	; 0x92e <Modbus_mster_transaction+0x462>
     920:	e0 91 b2 03 	lds	r30, 0x03B2	; 0x8003b2 <g_mod0_idle>
     924:	f0 91 b3 03 	lds	r31, 0x03B3	; 0x8003b3 <g_mod0_idle+0x1>
     928:	30 97       	sbiw	r30, 0x00	; 0
     92a:	09 f0       	breq	.+2      	; 0x92e <Modbus_mster_transaction+0x462>
     92c:	19 95       	eicall
     92e:	15 30       	cpi	r17, 0x05	; 5
     930:	59 f5       	brne	.+86     	; 0x988 <Modbus_mster_transaction+0x4bc>
     932:	99 81       	ldd	r25, Y+1	; 0x01
     934:	80 91 bf 04 	lds	r24, 0x04BF	; 0x8004bf <g_mod0_slave>
     938:	98 13       	cpse	r25, r24
     93a:	2b c4       	rjmp	.+2134   	; 0x1192 <Modbus_mster_transaction+0xcc6>
     93c:	8a 81       	ldd	r24, Y+2	; 0x02
     93e:	28 2f       	mov	r18, r24
     940:	2f 77       	andi	r18, 0x7F	; 127
     942:	30 e0       	ldi	r19, 0x00	; 0
     944:	2e 15       	cp	r18, r14
     946:	3f 05       	cpc	r19, r15
     948:	09 f0       	breq	.+2      	; 0x94c <Modbus_mster_transaction+0x480>
     94a:	25 c4       	rjmp	.+2122   	; 0x1196 <Modbus_mster_transaction+0xcca>
     94c:	88 23       	and	r24, r24
     94e:	2c f4       	brge	.+10     	; 0x95a <Modbus_mster_transaction+0x48e>
     950:	8b 81       	ldd	r24, Y+3	; 0x03
     952:	88 23       	and	r24, r24
     954:	09 f4       	brne	.+2      	; 0x958 <Modbus_mster_transaction+0x48c>
     956:	3d c0       	rjmp	.+122    	; 0x9d2 <Modbus_mster_transaction+0x506>
     958:	ca c0       	rjmp	.+404    	; 0xaee <Modbus_mster_transaction+0x622>
     95a:	81 31       	cpi	r24, 0x11	; 17
     95c:	58 f4       	brcc	.+22     	; 0x974 <Modbus_mster_transaction+0x4a8>
     95e:	8f 30       	cpi	r24, 0x0F	; 15
     960:	08 f0       	brcs	.+2      	; 0x964 <Modbus_mster_transaction+0x498>
     962:	b5 c3       	rjmp	.+1898   	; 0x10ce <Modbus_mster_transaction+0xc02>
     964:	81 30       	cpi	r24, 0x01	; 1
     966:	80 f0       	brcs	.+32     	; 0x988 <Modbus_mster_transaction+0x4bc>
     968:	85 30       	cpi	r24, 0x05	; 5
     96a:	68 f0       	brcs	.+26     	; 0x986 <Modbus_mster_transaction+0x4ba>
     96c:	87 30       	cpi	r24, 0x07	; 7
     96e:	08 f4       	brcc	.+2      	; 0x972 <Modbus_mster_transaction+0x4a6>
     970:	ae c3       	rjmp	.+1884   	; 0x10ce <Modbus_mster_transaction+0xc02>
     972:	0a c0       	rjmp	.+20     	; 0x988 <Modbus_mster_transaction+0x4bc>
     974:	87 31       	cpi	r24, 0x17	; 23
     976:	39 f0       	breq	.+14     	; 0x986 <Modbus_mster_transaction+0x4ba>
     978:	8f 3f       	cpi	r24, 0xFF	; 255
     97a:	09 f4       	brne	.+2      	; 0x97e <Modbus_mster_transaction+0x4b2>
     97c:	a8 c3       	rjmp	.+1872   	; 0x10ce <Modbus_mster_transaction+0xc02>
     97e:	86 31       	cpi	r24, 0x16	; 22
     980:	19 f4       	brne	.+6      	; 0x988 <Modbus_mster_transaction+0x4bc>
     982:	05 e0       	ldi	r16, 0x05	; 5
     984:	a5 c3       	rjmp	.+1866   	; 0x10d0 <Modbus_mster_transaction+0xc04>
     986:	0b 81       	ldd	r16, Y+3	; 0x03
     988:	0e 94 24 1b 	call	0x3648	; 0x3648 <Get_millis>
     98c:	dc 01       	movw	r26, r24
     98e:	cb 01       	movw	r24, r22
     990:	88 19       	sub	r24, r8
     992:	99 09       	sbc	r25, r9
     994:	aa 09       	sbc	r26, r10
     996:	bb 09       	sbc	r27, r11
     998:	81 3d       	cpi	r24, 0xD1	; 209
     99a:	97 40       	sbci	r25, 0x07	; 7
     99c:	a1 05       	cpc	r26, r1
     99e:	b1 05       	cpc	r27, r1
     9a0:	08 f4       	brcc	.+2      	; 0x9a4 <Modbus_mster_transaction+0x4d8>
     9a2:	eb c3       	rjmp	.+2006   	; 0x117a <Modbus_mster_transaction+0xcae>
     9a4:	80 e0       	ldi	r24, 0x00	; 0
     9a6:	92 e0       	ldi	r25, 0x02	; 2
     9a8:	38 d6       	rcall	.+3184   	; 0x161a <UART0_puts>
     9aa:	8a e0       	ldi	r24, 0x0A	; 10
     9ac:	01 d6       	rcall	.+3074   	; 0x15b0 <UART0_putc>
     9ae:	01 11       	cpse	r16, r1
     9b0:	f4 c3       	rjmp	.+2024   	; 0x119a <Modbus_mster_transaction+0xcce>
     9b2:	82 ee       	ldi	r24, 0xE2	; 226
     9b4:	81 11       	cpse	r24, r1
     9b6:	9b c0       	rjmp	.+310    	; 0xaee <Modbus_mster_transaction+0x622>
     9b8:	15 30       	cpi	r17, 0x05	; 5
     9ba:	08 f4       	brcc	.+2      	; 0x9be <Modbus_mster_transaction+0x4f2>
     9bc:	a9 c3       	rjmp	.+1874   	; 0x1110 <Modbus_mster_transaction+0xc44>
     9be:	a1 2e       	mov	r10, r17
     9c0:	b1 2c       	mov	r11, r1
     9c2:	75 01       	movw	r14, r10
     9c4:	f2 e0       	ldi	r31, 0x02	; 2
     9c6:	ef 1a       	sub	r14, r31
     9c8:	f1 08       	sbc	r15, r1
     9ca:	1e 14       	cp	r1, r14
     9cc:	1f 04       	cpc	r1, r15
     9ce:	5c f0       	brlt	.+22     	; 0x9e6 <Modbus_mster_transaction+0x51a>
     9d0:	8e c3       	rjmp	.+1820   	; 0x10ee <Modbus_mster_transaction+0xc22>
     9d2:	0f 2e       	mov	r0, r31
     9d4:	f3 e0       	ldi	r31, 0x03	; 3
     9d6:	ef 2e       	mov	r14, r31
     9d8:	f1 2c       	mov	r15, r1
     9da:	f0 2d       	mov	r31, r0
     9dc:	0f 2e       	mov	r0, r31
     9de:	f5 e0       	ldi	r31, 0x05	; 5
     9e0:	af 2e       	mov	r10, r31
     9e2:	b1 2c       	mov	r11, r1
     9e4:	f0 2d       	mov	r31, r0
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	8f ef       	ldi	r24, 0xFF	; 255
     9ec:	9f ef       	ldi	r25, 0xFF	; 255
     9ee:	10 e0       	ldi	r17, 0x00	; 0
     9f0:	e1 e0       	ldi	r30, 0x01	; 1
     9f2:	f0 e0       	ldi	r31, 0x00	; 0
     9f4:	ec 0f       	add	r30, r28
     9f6:	fd 1f       	adc	r31, r29
     9f8:	e2 0f       	add	r30, r18
     9fa:	f3 1f       	adc	r31, r19
     9fc:	60 81       	ld	r22, Z
     9fe:	0e 94 12 1b 	call	0x3624	; 0x3624 <crc16_update>
     a02:	1f 5f       	subi	r17, 0xFF	; 255
     a04:	21 2f       	mov	r18, r17
     a06:	30 e0       	ldi	r19, 0x00	; 0
     a08:	2e 15       	cp	r18, r14
     a0a:	3f 05       	cpc	r19, r15
     a0c:	8c f3       	brlt	.-30     	; 0x9f0 <Modbus_mster_transaction+0x524>
     a0e:	71 c3       	rjmp	.+1762   	; 0x10f2 <Modbus_mster_transaction+0xc26>
     a10:	89 2f       	mov	r24, r25
     a12:	99 27       	eor	r25, r25
     a14:	fe 01       	movw	r30, r28
     a16:	ea 0d       	add	r30, r10
     a18:	fb 1d       	adc	r31, r11
     a1a:	20 81       	ld	r18, Z
     a1c:	30 e0       	ldi	r19, 0x00	; 0
     a1e:	82 17       	cp	r24, r18
     a20:	93 07       	cpc	r25, r19
     a22:	09 f0       	breq	.+2      	; 0xa26 <Modbus_mster_transaction+0x55a>
     a24:	73 c3       	rjmp	.+1766   	; 0x110c <Modbus_mster_transaction+0xc40>
     a26:	74 c3       	rjmp	.+1768   	; 0x1110 <Modbus_mster_transaction+0xc44>
     a28:	9b 81       	ldd	r25, Y+3	; 0x03
     a2a:	96 95       	lsr	r25
     a2c:	e9 f5       	brne	.+122    	; 0xaa8 <Modbus_mster_transaction+0x5dc>
     a2e:	80 e0       	ldi	r24, 0x00	; 0
     a30:	5e c0       	rjmp	.+188    	; 0xaee <Modbus_mster_transaction+0x622>
     a32:	7b 81       	ldd	r23, Y+3	; 0x03
     a34:	97 2f       	mov	r25, r23
     a36:	96 95       	lsr	r25
     a38:	09 f4       	brne	.+2      	; 0xa3c <Modbus_mster_transaction+0x570>
     a3a:	78 c3       	rjmp	.+1776   	; 0x112c <Modbus_mster_transaction+0xc60>
     a3c:	fe 01       	movw	r30, r28
     a3e:	31 96       	adiw	r30, 0x01	; 1
     a40:	40 e0       	ldi	r20, 0x00	; 0
     a42:	50 e0       	ldi	r21, 0x00	; 0
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	80 34       	cpi	r24, 0x40	; 64
     a48:	70 f4       	brcc	.+28     	; 0xa66 <Modbus_mster_transaction+0x59a>
     a4a:	24 81       	ldd	r18, Z+4	; 0x04
     a4c:	30 e0       	ldi	r19, 0x00	; 0
     a4e:	32 2f       	mov	r19, r18
     a50:	22 27       	eor	r18, r18
     a52:	63 81       	ldd	r22, Z+3	; 0x03
     a54:	26 2b       	or	r18, r22
     a56:	da 01       	movw	r26, r20
     a58:	aa 0f       	add	r26, r26
     a5a:	bb 1f       	adc	r27, r27
     a5c:	a5 5c       	subi	r26, 0xC5	; 197
     a5e:	bb 4f       	sbci	r27, 0xFB	; 251
     a60:	11 96       	adiw	r26, 0x01	; 1
     a62:	3c 93       	st	X, r19
     a64:	2e 93       	st	-X, r18
     a66:	8f 5f       	subi	r24, 0xFF	; 255
     a68:	4f 5f       	subi	r20, 0xFF	; 255
     a6a:	5f 4f       	sbci	r21, 0xFF	; 255
     a6c:	32 96       	adiw	r30, 0x02	; 2
     a6e:	89 13       	cpse	r24, r25
     a70:	ea cf       	rjmp	.-44     	; 0xa46 <Modbus_mster_transaction+0x57a>
     a72:	8f ef       	ldi	r24, 0xFF	; 255
     a74:	89 0f       	add	r24, r25
     a76:	80 93 b4 03 	sts	0x03B4, r24	; 0x8003b4 <g_mod0_response_buffer_length>
     a7a:	70 ff       	sbrs	r23, 0
     a7c:	35 c0       	rjmp	.+106    	; 0xae8 <Modbus_mster_transaction+0x61c>
     a7e:	90 34       	cpi	r25, 0x40	; 64
     a80:	70 f4       	brcc	.+28     	; 0xa9e <Modbus_mster_transaction+0x5d2>
     a82:	29 2f       	mov	r18, r25
     a84:	30 e0       	ldi	r19, 0x00	; 0
     a86:	22 0f       	add	r18, r18
     a88:	33 1f       	adc	r19, r19
     a8a:	fe 01       	movw	r30, r28
     a8c:	e2 0f       	add	r30, r18
     a8e:	f3 1f       	adc	r31, r19
     a90:	44 81       	ldd	r20, Z+4	; 0x04
     a92:	50 e0       	ldi	r21, 0x00	; 0
     a94:	f9 01       	movw	r30, r18
     a96:	e5 5c       	subi	r30, 0xC5	; 197
     a98:	fb 4f       	sbci	r31, 0xFB	; 251
     a9a:	51 83       	std	Z+1, r21	; 0x01
     a9c:	40 83       	st	Z, r20
     a9e:	9f 5f       	subi	r25, 0xFF	; 255
     aa0:	90 93 b4 03 	sts	0x03B4, r25	; 0x8003b4 <g_mod0_response_buffer_length>
     aa4:	80 e0       	ldi	r24, 0x00	; 0
     aa6:	23 c0       	rjmp	.+70     	; 0xaee <Modbus_mster_transaction+0x622>
     aa8:	fe 01       	movw	r30, r28
     aaa:	31 96       	adiw	r30, 0x01	; 1
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	80 e0       	ldi	r24, 0x00	; 0
     ab2:	80 34       	cpi	r24, 0x40	; 64
     ab4:	70 f4       	brcc	.+28     	; 0xad2 <Modbus_mster_transaction+0x606>
     ab6:	23 81       	ldd	r18, Z+3	; 0x03
     ab8:	30 e0       	ldi	r19, 0x00	; 0
     aba:	32 2f       	mov	r19, r18
     abc:	22 27       	eor	r18, r18
     abe:	64 81       	ldd	r22, Z+4	; 0x04
     ac0:	26 2b       	or	r18, r22
     ac2:	da 01       	movw	r26, r20
     ac4:	aa 0f       	add	r26, r26
     ac6:	bb 1f       	adc	r27, r27
     ac8:	a5 5c       	subi	r26, 0xC5	; 197
     aca:	bb 4f       	sbci	r27, 0xFB	; 251
     acc:	11 96       	adiw	r26, 0x01	; 1
     ace:	3c 93       	st	X, r19
     ad0:	2e 93       	st	-X, r18
     ad2:	8f 5f       	subi	r24, 0xFF	; 255
     ad4:	4f 5f       	subi	r20, 0xFF	; 255
     ad6:	5f 4f       	sbci	r21, 0xFF	; 255
     ad8:	32 96       	adiw	r30, 0x02	; 2
     ada:	89 13       	cpse	r24, r25
     adc:	ea cf       	rjmp	.-44     	; 0xab2 <Modbus_mster_transaction+0x5e6>
     ade:	91 50       	subi	r25, 0x01	; 1
     ae0:	90 93 b4 03 	sts	0x03B4, r25	; 0x8003b4 <g_mod0_response_buffer_length>
     ae4:	80 e0       	ldi	r24, 0x00	; 0
     ae6:	03 c0       	rjmp	.+6      	; 0xaee <Modbus_mster_transaction+0x622>
     ae8:	80 e0       	ldi	r24, 0x00	; 0
     aea:	01 c0       	rjmp	.+2      	; 0xaee <Modbus_mster_transaction+0x622>
     aec:	80 e0       	ldi	r24, 0x00	; 0
     aee:	10 92 b6 03 	sts	0x03B6, r1	; 0x8003b6 <g_mod0_transmit_buffer_index>
     af2:	10 92 b5 03 	sts	0x03B5, r1	; 0x8003b5 <g_mod0_response_buffer_index>
     af6:	59 c3       	rjmp	.+1714   	; 0x11aa <Modbus_mster_transaction+0xcde>
     af8:	81 30       	cpi	r24, 0x01	; 1
     afa:	09 f0       	breq	.+2      	; 0xafe <Modbus_mster_transaction+0x632>
     afc:	e6 c2       	rjmp	.+1484   	; 0x10ca <Modbus_mster_transaction+0xbfe>
     afe:	80 91 a5 03 	lds	r24, 0x03A5	; 0x8003a5 <g_mod1_slave>
     b02:	89 83       	std	Y+1, r24	; 0x01
     b04:	2f ef       	ldi	r18, 0xFF	; 255
     b06:	62 13       	cpse	r22, r18
     b08:	06 c0       	rjmp	.+12     	; 0xb16 <Modbus_mster_transaction+0x64a>
     b0a:	8f e0       	ldi	r24, 0x0F	; 15
     b0c:	8a 83       	std	Y+2, r24	; 0x02
     b0e:	68 94       	set
     b10:	bb 24       	eor	r11, r11
     b12:	b1 f8       	bld	r11, 1
     b14:	32 c0       	rjmp	.+100    	; 0xb7a <Modbus_mster_transaction+0x6ae>
     b16:	6a 83       	std	Y+2, r22	; 0x02
     b18:	81 e0       	ldi	r24, 0x01	; 1
     b1a:	68 17       	cp	r22, r24
     b1c:	b8 f0       	brcs	.+46     	; 0xb4c <Modbus_mster_transaction+0x680>
     b1e:	94 e0       	ldi	r25, 0x04	; 4
     b20:	96 17       	cp	r25, r22
     b22:	18 f4       	brcc	.+6      	; 0xb2a <Modbus_mster_transaction+0x65e>
     b24:	a7 e1       	ldi	r26, 0x17	; 23
     b26:	6a 13       	cpse	r22, r26
     b28:	11 c0       	rjmp	.+34     	; 0xb4c <Modbus_mster_transaction+0x680>
     b2a:	80 91 a3 03 	lds	r24, 0x03A3	; 0x8003a3 <g_mod1_read_address>
     b2e:	90 91 a4 03 	lds	r25, 0x03A4	; 0x8003a4 <g_mod1_read_address+0x1>
     b32:	9b 83       	std	Y+3, r25	; 0x03
     b34:	8c 83       	std	Y+4, r24	; 0x04
     b36:	80 91 a1 03 	lds	r24, 0x03A1	; 0x8003a1 <g_mod1_read_qty>
     b3a:	90 91 a2 03 	lds	r25, 0x03A2	; 0x8003a2 <g_mod1_read_qty+0x1>
     b3e:	9d 83       	std	Y+5, r25	; 0x05
     b40:	8e 83       	std	Y+6, r24	; 0x06
     b42:	0f 2e       	mov	r0, r31
     b44:	f6 e0       	ldi	r31, 0x06	; 6
     b46:	bf 2e       	mov	r11, r31
     b48:	f0 2d       	mov	r31, r0
     b4a:	03 c0       	rjmp	.+6      	; 0xb52 <Modbus_mster_transaction+0x686>
     b4c:	68 94       	set
     b4e:	bb 24       	eor	r11, r11
     b50:	b1 f8       	bld	r11, 1
     b52:	b0 e1       	ldi	r27, 0x10	; 16
     b54:	bd 15       	cp	r27, r13
     b56:	40 f0       	brcs	.+16     	; 0xb68 <Modbus_mster_transaction+0x69c>
     b58:	ef e0       	ldi	r30, 0x0F	; 15
     b5a:	de 16       	cp	r13, r30
     b5c:	70 f4       	brcc	.+28     	; 0xb7a <Modbus_mster_transaction+0x6ae>
     b5e:	8b ef       	ldi	r24, 0xFB	; 251
     b60:	8d 0d       	add	r24, r13
     b62:	82 30       	cpi	r24, 0x02	; 2
     b64:	00 f5       	brcc	.+64     	; 0xba6 <Modbus_mster_transaction+0x6da>
     b66:	09 c0       	rjmp	.+18     	; 0xb7a <Modbus_mster_transaction+0x6ae>
     b68:	f6 e1       	ldi	r31, 0x16	; 22
     b6a:	df 16       	cp	r13, r31
     b6c:	e0 f0       	brcs	.+56     	; 0xba6 <Modbus_mster_transaction+0x6da>
     b6e:	27 e1       	ldi	r18, 0x17	; 23
     b70:	2d 15       	cp	r18, r13
     b72:	18 f4       	brcc	.+6      	; 0xb7a <Modbus_mster_transaction+0x6ae>
     b74:	8f ef       	ldi	r24, 0xFF	; 255
     b76:	d8 12       	cpse	r13, r24
     b78:	16 c0       	rjmp	.+44     	; 0xba6 <Modbus_mster_transaction+0x6da>
     b7a:	90 91 1f 03 	lds	r25, 0x031F	; 0x80031f <g_mod1_write_address>
     b7e:	80 91 20 03 	lds	r24, 0x0320	; 0x800320 <g_mod1_write_address+0x1>
     b82:	e1 e0       	ldi	r30, 0x01	; 1
     b84:	f0 e0       	ldi	r31, 0x00	; 0
     b86:	ec 0f       	add	r30, r28
     b88:	fd 1f       	adc	r31, r29
     b8a:	eb 0d       	add	r30, r11
     b8c:	f1 1d       	adc	r31, r1
     b8e:	80 83       	st	Z, r24
     b90:	81 e0       	ldi	r24, 0x01	; 1
     b92:	8b 0d       	add	r24, r11
     b94:	e1 e0       	ldi	r30, 0x01	; 1
     b96:	f0 e0       	ldi	r31, 0x00	; 0
     b98:	ec 0f       	add	r30, r28
     b9a:	fd 1f       	adc	r31, r29
     b9c:	e8 0f       	add	r30, r24
     b9e:	f1 1d       	adc	r31, r1
     ba0:	b3 94       	inc	r11
     ba2:	b3 94       	inc	r11
     ba4:	90 83       	st	Z, r25
     ba6:	90 e1       	ldi	r25, 0x10	; 16
     ba8:	d9 16       	cp	r13, r25
     baa:	09 f4       	brne	.+2      	; 0xbae <Modbus_mster_transaction+0x6e2>
     bac:	ad c0       	rjmp	.+346    	; 0xd08 <Modbus_mster_transaction+0x83c>
     bae:	9d 15       	cp	r25, r13
     bb0:	58 f0       	brcs	.+22     	; 0xbc8 <Modbus_mster_transaction+0x6fc>
     bb2:	a6 e0       	ldi	r26, 0x06	; 6
     bb4:	da 16       	cp	r13, r26
     bb6:	61 f1       	breq	.+88     	; 0xc10 <Modbus_mster_transaction+0x744>
     bb8:	bf e0       	ldi	r27, 0x0F	; 15
     bba:	db 16       	cp	r13, r27
     bbc:	09 f4       	brne	.+2      	; 0xbc0 <Modbus_mster_transaction+0x6f4>
     bbe:	41 c0       	rjmp	.+130    	; 0xc42 <Modbus_mster_transaction+0x776>
     bc0:	e5 e0       	ldi	r30, 0x05	; 5
     bc2:	de 12       	cpse	r13, r30
     bc4:	1b c1       	rjmp	.+566    	; 0xdfc <Modbus_mster_transaction+0x930>
     bc6:	0d c0       	rjmp	.+26     	; 0xbe2 <Modbus_mster_transaction+0x716>
     bc8:	f7 e1       	ldi	r31, 0x17	; 23
     bca:	df 16       	cp	r13, r31
     bcc:	09 f4       	brne	.+2      	; 0xbd0 <Modbus_mster_transaction+0x704>
     bce:	9c c0       	rjmp	.+312    	; 0xd08 <Modbus_mster_transaction+0x83c>
     bd0:	2f ef       	ldi	r18, 0xFF	; 255
     bd2:	d2 16       	cp	r13, r18
     bd4:	09 f4       	brne	.+2      	; 0xbd8 <Modbus_mster_transaction+0x70c>
     bd6:	98 c0       	rjmp	.+304    	; 0xd08 <Modbus_mster_transaction+0x83c>
     bd8:	86 e1       	ldi	r24, 0x16	; 22
     bda:	d8 16       	cp	r13, r24
     bdc:	09 f4       	brne	.+2      	; 0xbe0 <Modbus_mster_transaction+0x714>
     bde:	e0 c0       	rjmp	.+448    	; 0xda0 <Modbus_mster_transaction+0x8d4>
     be0:	0d c1       	rjmp	.+538    	; 0xdfc <Modbus_mster_transaction+0x930>
     be2:	90 91 1d 03 	lds	r25, 0x031D	; 0x80031d <g_mod1_write_qty>
     be6:	80 91 1e 03 	lds	r24, 0x031E	; 0x80031e <g_mod1_write_qty+0x1>
     bea:	e1 e0       	ldi	r30, 0x01	; 1
     bec:	f0 e0       	ldi	r31, 0x00	; 0
     bee:	ec 0f       	add	r30, r28
     bf0:	fd 1f       	adc	r31, r29
     bf2:	eb 0d       	add	r30, r11
     bf4:	f1 1d       	adc	r31, r1
     bf6:	80 83       	st	Z, r24
     bf8:	81 e0       	ldi	r24, 0x01	; 1
     bfa:	8b 0d       	add	r24, r11
     bfc:	e1 e0       	ldi	r30, 0x01	; 1
     bfe:	f0 e0       	ldi	r31, 0x00	; 0
     c00:	ec 0f       	add	r30, r28
     c02:	fd 1f       	adc	r31, r29
     c04:	e8 0f       	add	r30, r24
     c06:	f1 1d       	adc	r31, r1
     c08:	b3 94       	inc	r11
     c0a:	b3 94       	inc	r11
     c0c:	90 83       	st	Z, r25
     c0e:	f6 c0       	rjmp	.+492    	; 0xdfc <Modbus_mster_transaction+0x930>
     c10:	ed e9       	ldi	r30, 0x9D	; 157
     c12:	f2 e0       	ldi	r31, 0x02	; 2
     c14:	80 81       	ld	r24, Z
     c16:	91 81       	ldd	r25, Z+1	; 0x01
     c18:	a1 e0       	ldi	r26, 0x01	; 1
     c1a:	b0 e0       	ldi	r27, 0x00	; 0
     c1c:	ac 0f       	add	r26, r28
     c1e:	bd 1f       	adc	r27, r29
     c20:	ab 0d       	add	r26, r11
     c22:	b1 1d       	adc	r27, r1
     c24:	9c 93       	st	X, r25
     c26:	20 81       	ld	r18, Z
     c28:	31 81       	ldd	r19, Z+1	; 0x01
     c2a:	81 e0       	ldi	r24, 0x01	; 1
     c2c:	8b 0d       	add	r24, r11
     c2e:	e1 e0       	ldi	r30, 0x01	; 1
     c30:	f0 e0       	ldi	r31, 0x00	; 0
     c32:	ec 0f       	add	r30, r28
     c34:	fd 1f       	adc	r31, r29
     c36:	e8 0f       	add	r30, r24
     c38:	f1 1d       	adc	r31, r1
     c3a:	b3 94       	inc	r11
     c3c:	b3 94       	inc	r11
     c3e:	20 83       	st	Z, r18
     c40:	dd c0       	rjmp	.+442    	; 0xdfc <Modbus_mster_transaction+0x930>
     c42:	80 91 1d 03 	lds	r24, 0x031D	; 0x80031d <g_mod1_write_qty>
     c46:	90 91 1e 03 	lds	r25, 0x031E	; 0x80031e <g_mod1_write_qty+0x1>
     c4a:	e1 e0       	ldi	r30, 0x01	; 1
     c4c:	f0 e0       	ldi	r31, 0x00	; 0
     c4e:	ec 0f       	add	r30, r28
     c50:	fd 1f       	adc	r31, r29
     c52:	eb 0d       	add	r30, r11
     c54:	f1 1d       	adc	r31, r1
     c56:	90 83       	st	Z, r25
     c58:	22 e0       	ldi	r18, 0x02	; 2
     c5a:	2b 0d       	add	r18, r11
     c5c:	31 e0       	ldi	r19, 0x01	; 1
     c5e:	3b 0d       	add	r19, r11
     c60:	e1 e0       	ldi	r30, 0x01	; 1
     c62:	f0 e0       	ldi	r31, 0x00	; 0
     c64:	ec 0f       	add	r30, r28
     c66:	fd 1f       	adc	r31, r29
     c68:	e3 0f       	add	r30, r19
     c6a:	f1 1d       	adc	r31, r1
     c6c:	80 83       	st	Z, r24
     c6e:	ac 01       	movw	r20, r24
     c70:	47 70       	andi	r20, 0x07	; 7
     c72:	55 27       	eor	r21, r21
     c74:	45 2b       	or	r20, r21
     c76:	49 f0       	breq	.+18     	; 0xc8a <Modbus_mster_transaction+0x7be>
     c78:	96 95       	lsr	r25
     c7a:	87 95       	ror	r24
     c7c:	96 95       	lsr	r25
     c7e:	87 95       	ror	r24
     c80:	96 95       	lsr	r25
     c82:	87 95       	ror	r24
     c84:	91 e0       	ldi	r25, 0x01	; 1
     c86:	98 0f       	add	r25, r24
     c88:	07 c0       	rjmp	.+14     	; 0xc98 <Modbus_mster_transaction+0x7cc>
     c8a:	96 95       	lsr	r25
     c8c:	87 95       	ror	r24
     c8e:	96 95       	lsr	r25
     c90:	87 95       	ror	r24
     c92:	96 95       	lsr	r25
     c94:	87 95       	ror	r24
     c96:	98 2f       	mov	r25, r24
     c98:	a3 e0       	ldi	r26, 0x03	; 3
     c9a:	ba 0e       	add	r11, r26
     c9c:	fe 01       	movw	r30, r28
     c9e:	e2 0f       	add	r30, r18
     ca0:	f1 1d       	adc	r31, r1
     ca2:	91 83       	std	Z+1, r25	; 0x01
     ca4:	99 23       	and	r25, r25
     ca6:	09 f4       	brne	.+2      	; 0xcaa <Modbus_mster_transaction+0x7de>
     ca8:	a9 c0       	rjmp	.+338    	; 0xdfc <Modbus_mster_transaction+0x930>
     caa:	80 e0       	ldi	r24, 0x00	; 0
     cac:	28 2f       	mov	r18, r24
     cae:	21 70       	andi	r18, 0x01	; 1
     cb0:	80 ff       	sbrs	r24, 0
     cb2:	03 c0       	rjmp	.+6      	; 0xcba <Modbus_mster_transaction+0x7ee>
     cb4:	21 30       	cpi	r18, 0x01	; 1
     cb6:	99 f0       	breq	.+38     	; 0xcde <Modbus_mster_transaction+0x812>
     cb8:	23 c0       	rjmp	.+70     	; 0xd00 <Modbus_mster_transaction+0x834>
     cba:	e8 2f       	mov	r30, r24
     cbc:	e6 95       	lsr	r30
     cbe:	f0 e0       	ldi	r31, 0x00	; 0
     cc0:	ee 0f       	add	r30, r30
     cc2:	ff 1f       	adc	r31, r31
     cc4:	e3 56       	subi	r30, 0x63	; 99
     cc6:	fd 4f       	sbci	r31, 0xFD	; 253
     cc8:	20 81       	ld	r18, Z
     cca:	31 81       	ldd	r19, Z+1	; 0x01
     ccc:	e1 e0       	ldi	r30, 0x01	; 1
     cce:	f0 e0       	ldi	r31, 0x00	; 0
     cd0:	ec 0f       	add	r30, r28
     cd2:	fd 1f       	adc	r31, r29
     cd4:	eb 0d       	add	r30, r11
     cd6:	f1 1d       	adc	r31, r1
     cd8:	20 83       	st	Z, r18
     cda:	b3 94       	inc	r11
     cdc:	11 c0       	rjmp	.+34     	; 0xd00 <Modbus_mster_transaction+0x834>
     cde:	e8 2f       	mov	r30, r24
     ce0:	e6 95       	lsr	r30
     ce2:	f0 e0       	ldi	r31, 0x00	; 0
     ce4:	ee 0f       	add	r30, r30
     ce6:	ff 1f       	adc	r31, r31
     ce8:	e3 56       	subi	r30, 0x63	; 99
     cea:	fd 4f       	sbci	r31, 0xFD	; 253
     cec:	20 81       	ld	r18, Z
     cee:	31 81       	ldd	r19, Z+1	; 0x01
     cf0:	e1 e0       	ldi	r30, 0x01	; 1
     cf2:	f0 e0       	ldi	r31, 0x00	; 0
     cf4:	ec 0f       	add	r30, r28
     cf6:	fd 1f       	adc	r31, r29
     cf8:	eb 0d       	add	r30, r11
     cfa:	f1 1d       	adc	r31, r1
     cfc:	30 83       	st	Z, r19
     cfe:	b3 94       	inc	r11
     d00:	8f 5f       	subi	r24, 0xFF	; 255
     d02:	98 13       	cpse	r25, r24
     d04:	d3 cf       	rjmp	.-90     	; 0xcac <Modbus_mster_transaction+0x7e0>
     d06:	7a c0       	rjmp	.+244    	; 0xdfc <Modbus_mster_transaction+0x930>
     d08:	80 91 1d 03 	lds	r24, 0x031D	; 0x80031d <g_mod1_write_qty>
     d0c:	90 91 1e 03 	lds	r25, 0x031E	; 0x80031e <g_mod1_write_qty+0x1>
     d10:	e1 e0       	ldi	r30, 0x01	; 1
     d12:	f0 e0       	ldi	r31, 0x00	; 0
     d14:	ec 0f       	add	r30, r28
     d16:	fd 1f       	adc	r31, r29
     d18:	eb 0d       	add	r30, r11
     d1a:	f1 1d       	adc	r31, r1
     d1c:	90 83       	st	Z, r25
     d1e:	21 e0       	ldi	r18, 0x01	; 1
     d20:	2b 0d       	add	r18, r11
     d22:	e1 e0       	ldi	r30, 0x01	; 1
     d24:	f0 e0       	ldi	r31, 0x00	; 0
     d26:	ec 0f       	add	r30, r28
     d28:	fd 1f       	adc	r31, r29
     d2a:	e2 0f       	add	r30, r18
     d2c:	f1 1d       	adc	r31, r1
     d2e:	80 83       	st	Z, r24
     d30:	22 e0       	ldi	r18, 0x02	; 2
     d32:	2b 0d       	add	r18, r11
     d34:	e1 e0       	ldi	r30, 0x01	; 1
     d36:	f0 e0       	ldi	r31, 0x00	; 0
     d38:	ec 0f       	add	r30, r28
     d3a:	fd 1f       	adc	r31, r29
     d3c:	e2 0f       	add	r30, r18
     d3e:	f1 1d       	adc	r31, r1
     d40:	b3 e0       	ldi	r27, 0x03	; 3
     d42:	bb 0e       	add	r11, r27
     d44:	28 2f       	mov	r18, r24
     d46:	22 0f       	add	r18, r18
     d48:	20 83       	st	Z, r18
     d4a:	ac 01       	movw	r20, r24
     d4c:	55 27       	eor	r21, r21
     d4e:	14 16       	cp	r1, r20
     d50:	15 06       	cpc	r1, r21
     d52:	0c f0       	brlt	.+2      	; 0xd56 <Modbus_mster_transaction+0x88a>
     d54:	53 c0       	rjmp	.+166    	; 0xdfc <Modbus_mster_transaction+0x930>
     d56:	80 e0       	ldi	r24, 0x00	; 0
     d58:	90 e0       	ldi	r25, 0x00	; 0
     d5a:	20 e0       	ldi	r18, 0x00	; 0
     d5c:	88 0f       	add	r24, r24
     d5e:	99 1f       	adc	r25, r25
     d60:	fc 01       	movw	r30, r24
     d62:	e3 56       	subi	r30, 0x63	; 99
     d64:	fd 4f       	sbci	r31, 0xFD	; 253
     d66:	80 81       	ld	r24, Z
     d68:	91 81       	ldd	r25, Z+1	; 0x01
     d6a:	a1 e0       	ldi	r26, 0x01	; 1
     d6c:	b0 e0       	ldi	r27, 0x00	; 0
     d6e:	ac 0f       	add	r26, r28
     d70:	bd 1f       	adc	r27, r29
     d72:	ab 0d       	add	r26, r11
     d74:	b1 1d       	adc	r27, r1
     d76:	9c 93       	st	X, r25
     d78:	60 81       	ld	r22, Z
     d7a:	71 81       	ldd	r23, Z+1	; 0x01
     d7c:	81 e0       	ldi	r24, 0x01	; 1
     d7e:	8b 0d       	add	r24, r11
     d80:	e1 e0       	ldi	r30, 0x01	; 1
     d82:	f0 e0       	ldi	r31, 0x00	; 0
     d84:	ec 0f       	add	r30, r28
     d86:	fd 1f       	adc	r31, r29
     d88:	e8 0f       	add	r30, r24
     d8a:	f1 1d       	adc	r31, r1
     d8c:	b3 94       	inc	r11
     d8e:	b3 94       	inc	r11
     d90:	60 83       	st	Z, r22
     d92:	2f 5f       	subi	r18, 0xFF	; 255
     d94:	82 2f       	mov	r24, r18
     d96:	90 e0       	ldi	r25, 0x00	; 0
     d98:	84 17       	cp	r24, r20
     d9a:	95 07       	cpc	r25, r21
     d9c:	fc f2       	brlt	.-66     	; 0xd5c <Modbus_mster_transaction+0x890>
     d9e:	2e c0       	rjmp	.+92     	; 0xdfc <Modbus_mster_transaction+0x930>
     da0:	ed e9       	ldi	r30, 0x9D	; 157
     da2:	f2 e0       	ldi	r31, 0x02	; 2
     da4:	80 81       	ld	r24, Z
     da6:	91 81       	ldd	r25, Z+1	; 0x01
     da8:	a1 e0       	ldi	r26, 0x01	; 1
     daa:	b0 e0       	ldi	r27, 0x00	; 0
     dac:	ac 0f       	add	r26, r28
     dae:	bd 1f       	adc	r27, r29
     db0:	ab 0d       	add	r26, r11
     db2:	b1 1d       	adc	r27, r1
     db4:	9c 93       	st	X, r25
     db6:	80 81       	ld	r24, Z
     db8:	91 81       	ldd	r25, Z+1	; 0x01
     dba:	91 e0       	ldi	r25, 0x01	; 1
     dbc:	9b 0d       	add	r25, r11
     dbe:	a1 e0       	ldi	r26, 0x01	; 1
     dc0:	b0 e0       	ldi	r27, 0x00	; 0
     dc2:	ac 0f       	add	r26, r28
     dc4:	bd 1f       	adc	r27, r29
     dc6:	a9 0f       	add	r26, r25
     dc8:	b1 1d       	adc	r27, r1
     dca:	8c 93       	st	X, r24
     dcc:	82 81       	ldd	r24, Z+2	; 0x02
     dce:	93 81       	ldd	r25, Z+3	; 0x03
     dd0:	82 e0       	ldi	r24, 0x02	; 2
     dd2:	8b 0d       	add	r24, r11
     dd4:	a1 e0       	ldi	r26, 0x01	; 1
     dd6:	b0 e0       	ldi	r27, 0x00	; 0
     dd8:	ac 0f       	add	r26, r28
     dda:	bd 1f       	adc	r27, r29
     ddc:	a8 0f       	add	r26, r24
     dde:	b1 1d       	adc	r27, r1
     de0:	9c 93       	st	X, r25
     de2:	22 81       	ldd	r18, Z+2	; 0x02
     de4:	33 81       	ldd	r19, Z+3	; 0x03
     de6:	83 e0       	ldi	r24, 0x03	; 3
     de8:	8b 0d       	add	r24, r11
     dea:	e1 e0       	ldi	r30, 0x01	; 1
     dec:	f0 e0       	ldi	r31, 0x00	; 0
     dee:	ec 0f       	add	r30, r28
     df0:	fd 1f       	adc	r31, r29
     df2:	e8 0f       	add	r30, r24
     df4:	f1 1d       	adc	r31, r1
     df6:	84 e0       	ldi	r24, 0x04	; 4
     df8:	b8 0e       	add	r11, r24
     dfa:	20 83       	st	Z, r18
     dfc:	bb 20       	and	r11, r11
     dfe:	b9 f0       	breq	.+46     	; 0xe2e <Modbus_mster_transaction+0x962>
     e00:	8e 01       	movw	r16, r28
     e02:	0f 5f       	subi	r16, 0xFF	; 255
     e04:	1f 4f       	sbci	r17, 0xFF	; 255
     e06:	ee 24       	eor	r14, r14
     e08:	ea 94       	dec	r14
     e0a:	eb 0c       	add	r14, r11
     e0c:	f1 2c       	mov	r15, r1
     e0e:	9f ef       	ldi	r25, 0xFF	; 255
     e10:	e9 1a       	sub	r14, r25
     e12:	f9 0a       	sbc	r15, r25
     e14:	e0 0e       	add	r14, r16
     e16:	f1 1e       	adc	r15, r17
     e18:	8f ef       	ldi	r24, 0xFF	; 255
     e1a:	9f ef       	ldi	r25, 0xFF	; 255
     e1c:	d8 01       	movw	r26, r16
     e1e:	6d 91       	ld	r22, X+
     e20:	8d 01       	movw	r16, r26
     e22:	0e 94 12 1b 	call	0x3624	; 0x3624 <crc16_update>
     e26:	0e 15       	cp	r16, r14
     e28:	1f 05       	cpc	r17, r15
     e2a:	c1 f7       	brne	.-16     	; 0xe1c <Modbus_mster_transaction+0x950>
     e2c:	02 c0       	rjmp	.+4      	; 0xe32 <Modbus_mster_transaction+0x966>
     e2e:	8f ef       	ldi	r24, 0xFF	; 255
     e30:	9f ef       	ldi	r25, 0xFF	; 255
     e32:	ee 24       	eor	r14, r14
     e34:	e3 94       	inc	r14
     e36:	eb 0c       	add	r14, r11
     e38:	e1 e0       	ldi	r30, 0x01	; 1
     e3a:	f0 e0       	ldi	r31, 0x00	; 0
     e3c:	ec 0f       	add	r30, r28
     e3e:	fd 1f       	adc	r31, r29
     e40:	eb 0d       	add	r30, r11
     e42:	f1 1d       	adc	r31, r1
     e44:	80 83       	st	Z, r24
     e46:	b3 94       	inc	r11
     e48:	b3 94       	inc	r11
     e4a:	e1 e0       	ldi	r30, 0x01	; 1
     e4c:	f0 e0       	ldi	r31, 0x00	; 0
     e4e:	ec 0f       	add	r30, r28
     e50:	fd 1f       	adc	r31, r29
     e52:	ee 0d       	add	r30, r14
     e54:	f1 1d       	adc	r31, r1
     e56:	90 83       	st	Z, r25
     e58:	e1 e0       	ldi	r30, 0x01	; 1
     e5a:	f0 e0       	ldi	r31, 0x00	; 0
     e5c:	ec 0f       	add	r30, r28
     e5e:	fd 1f       	adc	r31, r29
     e60:	eb 0d       	add	r30, r11
     e62:	f1 1d       	adc	r31, r1
     e64:	10 82       	st	Z, r1
     e66:	e0 91 90 02 	lds	r30, 0x0290	; 0x800290 <g_mod1_Serial_getc>
     e6a:	f0 91 91 02 	lds	r31, 0x0291	; 0x800291 <g_mod1_Serial_getc+0x1>
     e6e:	19 95       	eicall
     e70:	81 15       	cp	r24, r1
     e72:	91 40       	sbci	r25, 0x01	; 1
     e74:	c1 f7       	brne	.-16     	; 0xe66 <Modbus_mster_transaction+0x99a>
     e76:	e0 91 96 02 	lds	r30, 0x0296	; 0x800296 <g_mod1_pre_transmission>
     e7a:	f0 91 97 02 	lds	r31, 0x0297	; 0x800297 <g_mod1_pre_transmission+0x1>
     e7e:	30 97       	sbiw	r30, 0x00	; 0
     e80:	09 f0       	breq	.+2      	; 0xe84 <Modbus_mster_transaction+0x9b8>
     e82:	19 95       	eicall
     e84:	bb 20       	and	r11, r11
     e86:	a1 f0       	breq	.+40     	; 0xeb0 <Modbus_mster_transaction+0x9e4>
     e88:	8e 01       	movw	r16, r28
     e8a:	0f 5f       	subi	r16, 0xFF	; 255
     e8c:	1f 4f       	sbci	r17, 0xFF	; 255
     e8e:	f1 2c       	mov	r15, r1
     e90:	ef ef       	ldi	r30, 0xFF	; 255
     e92:	ee 1a       	sub	r14, r30
     e94:	fe 0a       	sbc	r15, r30
     e96:	e0 0e       	add	r14, r16
     e98:	f1 1e       	adc	r15, r17
     e9a:	e0 91 92 02 	lds	r30, 0x0292	; 0x800292 <g_mod1_Serial_putc>
     e9e:	f0 91 93 02 	lds	r31, 0x0293	; 0x800293 <g_mod1_Serial_putc+0x1>
     ea2:	d8 01       	movw	r26, r16
     ea4:	8d 91       	ld	r24, X+
     ea6:	8d 01       	movw	r16, r26
     ea8:	19 95       	eicall
     eaa:	e0 16       	cp	r14, r16
     eac:	f1 06       	cpc	r15, r17
     eae:	a9 f7       	brne	.-22     	; 0xe9a <Modbus_mster_transaction+0x9ce>
     eb0:	e0 91 8c 02 	lds	r30, 0x028C	; 0x80028c <__data_end>
     eb4:	f0 91 8d 02 	lds	r31, 0x028D	; 0x80028d <__data_end+0x1>
     eb8:	19 95       	eicall
     eba:	e0 91 94 02 	lds	r30, 0x0294	; 0x800294 <g_mod1_post_transmission>
     ebe:	f0 91 95 02 	lds	r31, 0x0295	; 0x800295 <g_mod1_post_transmission+0x1>
     ec2:	30 97       	sbiw	r30, 0x00	; 0
     ec4:	09 f0       	breq	.+2      	; 0xec8 <Modbus_mster_transaction+0x9fc>
     ec6:	19 95       	eicall
     ec8:	0e 94 24 1b 	call	0x3648	; 0x3648 <Get_millis>
     ecc:	4b 01       	movw	r8, r22
     ece:	5c 01       	movw	r10, r24
     ed0:	08 e0       	ldi	r16, 0x08	; 8
     ed2:	10 e0       	ldi	r17, 0x00	; 0
     ed4:	ed 2c       	mov	r14, r13
     ed6:	f1 2c       	mov	r15, r1
     ed8:	e0 91 8e 02 	lds	r30, 0x028E	; 0x80028e <g_mod1_Serial_available>
     edc:	f0 91 8f 02 	lds	r31, 0x028F	; 0x80028f <g_mod1_Serial_available+0x1>
     ee0:	19 95       	eicall
     ee2:	89 2b       	or	r24, r25
     ee4:	91 f0       	breq	.+36     	; 0xf0a <Modbus_mster_transaction+0xa3e>
     ee6:	dd 24       	eor	r13, r13
     ee8:	d3 94       	inc	r13
     eea:	d1 0e       	add	r13, r17
     eec:	e0 91 90 02 	lds	r30, 0x0290	; 0x800290 <g_mod1_Serial_getc>
     ef0:	f0 91 91 02 	lds	r31, 0x0291	; 0x800291 <g_mod1_Serial_getc+0x1>
     ef4:	19 95       	eicall
     ef6:	e1 e0       	ldi	r30, 0x01	; 1
     ef8:	f0 e0       	ldi	r31, 0x00	; 0
     efa:	ec 0f       	add	r30, r28
     efc:	fd 1f       	adc	r31, r29
     efe:	e1 0f       	add	r30, r17
     f00:	f1 1d       	adc	r31, r1
     f02:	80 83       	st	Z, r24
     f04:	01 50       	subi	r16, 0x01	; 1
     f06:	1d 2d       	mov	r17, r13
     f08:	07 c0       	rjmp	.+14     	; 0xf18 <Modbus_mster_transaction+0xa4c>
     f0a:	e0 91 98 02 	lds	r30, 0x0298	; 0x800298 <g_mod1_idle>
     f0e:	f0 91 99 02 	lds	r31, 0x0299	; 0x800299 <g_mod1_idle+0x1>
     f12:	30 97       	sbiw	r30, 0x00	; 0
     f14:	09 f0       	breq	.+2      	; 0xf18 <Modbus_mster_transaction+0xa4c>
     f16:	19 95       	eicall
     f18:	15 30       	cpi	r17, 0x05	; 5
     f1a:	51 f5       	brne	.+84     	; 0xf70 <Modbus_mster_transaction+0xaa4>
     f1c:	99 81       	ldd	r25, Y+1	; 0x01
     f1e:	80 91 a5 03 	lds	r24, 0x03A5	; 0x8003a5 <g_mod1_slave>
     f22:	98 13       	cpse	r25, r24
     f24:	3c c1       	rjmp	.+632    	; 0x119e <Modbus_mster_transaction+0xcd2>
     f26:	8a 81       	ldd	r24, Y+2	; 0x02
     f28:	28 2f       	mov	r18, r24
     f2a:	2f 77       	andi	r18, 0x7F	; 127
     f2c:	30 e0       	ldi	r19, 0x00	; 0
     f2e:	2e 15       	cp	r18, r14
     f30:	3f 05       	cpc	r19, r15
     f32:	09 f0       	breq	.+2      	; 0xf36 <Modbus_mster_transaction+0xa6a>
     f34:	36 c1       	rjmp	.+620    	; 0x11a2 <Modbus_mster_transaction+0xcd6>
     f36:	88 23       	and	r24, r24
     f38:	24 f4       	brge	.+8      	; 0xf42 <Modbus_mster_transaction+0xa76>
     f3a:	8b 81       	ldd	r24, Y+3	; 0x03
     f3c:	88 23       	and	r24, r24
     f3e:	b1 f1       	breq	.+108    	; 0xfac <Modbus_mster_transaction+0xae0>
     f40:	bf c0       	rjmp	.+382    	; 0x10c0 <Modbus_mster_transaction+0xbf4>
     f42:	81 31       	cpi	r24, 0x11	; 17
     f44:	48 f4       	brcc	.+18     	; 0xf58 <Modbus_mster_transaction+0xa8c>
     f46:	8f 30       	cpi	r24, 0x0F	; 15
     f48:	70 f4       	brcc	.+28     	; 0xf66 <Modbus_mster_transaction+0xa9a>
     f4a:	81 30       	cpi	r24, 0x01	; 1
     f4c:	88 f0       	brcs	.+34     	; 0xf70 <Modbus_mster_transaction+0xaa4>
     f4e:	85 30       	cpi	r24, 0x05	; 5
     f50:	60 f0       	brcs	.+24     	; 0xf6a <Modbus_mster_transaction+0xa9e>
     f52:	87 30       	cpi	r24, 0x07	; 7
     f54:	40 f0       	brcs	.+16     	; 0xf66 <Modbus_mster_transaction+0xa9a>
     f56:	0c c0       	rjmp	.+24     	; 0xf70 <Modbus_mster_transaction+0xaa4>
     f58:	87 31       	cpi	r24, 0x17	; 23
     f5a:	39 f0       	breq	.+14     	; 0xf6a <Modbus_mster_transaction+0xa9e>
     f5c:	8f 3f       	cpi	r24, 0xFF	; 255
     f5e:	19 f0       	breq	.+6      	; 0xf66 <Modbus_mster_transaction+0xa9a>
     f60:	86 31       	cpi	r24, 0x16	; 22
     f62:	29 f0       	breq	.+10     	; 0xf6e <Modbus_mster_transaction+0xaa2>
     f64:	05 c0       	rjmp	.+10     	; 0xf70 <Modbus_mster_transaction+0xaa4>
     f66:	03 e0       	ldi	r16, 0x03	; 3
     f68:	03 c0       	rjmp	.+6      	; 0xf70 <Modbus_mster_transaction+0xaa4>
     f6a:	0b 81       	ldd	r16, Y+3	; 0x03
     f6c:	01 c0       	rjmp	.+2      	; 0xf70 <Modbus_mster_transaction+0xaa4>
     f6e:	05 e0       	ldi	r16, 0x05	; 5
     f70:	0e 94 24 1b 	call	0x3648	; 0x3648 <Get_millis>
     f74:	dc 01       	movw	r26, r24
     f76:	cb 01       	movw	r24, r22
     f78:	88 19       	sub	r24, r8
     f7a:	99 09       	sbc	r25, r9
     f7c:	aa 09       	sbc	r26, r10
     f7e:	bb 09       	sbc	r27, r11
     f80:	81 3d       	cpi	r24, 0xD1	; 209
     f82:	97 40       	sbci	r25, 0x07	; 7
     f84:	a1 05       	cpc	r26, r1
     f86:	b1 05       	cpc	r27, r1
     f88:	08 f0       	brcs	.+2      	; 0xf8c <Modbus_mster_transaction+0xac0>
     f8a:	fb c0       	rjmp	.+502    	; 0x1182 <Modbus_mster_transaction+0xcb6>
     f8c:	fe c0       	rjmp	.+508    	; 0x118a <Modbus_mster_transaction+0xcbe>
     f8e:	81 11       	cpse	r24, r1
     f90:	97 c0       	rjmp	.+302    	; 0x10c0 <Modbus_mster_transaction+0xbf4>
     f92:	15 30       	cpi	r17, 0x05	; 5
     f94:	08 f4       	brcc	.+2      	; 0xf98 <Modbus_mster_transaction+0xacc>
     f96:	df c0       	rjmp	.+446    	; 0x1156 <Modbus_mster_transaction+0xc8a>
     f98:	01 2f       	mov	r16, r17
     f9a:	10 e0       	ldi	r17, 0x00	; 0
     f9c:	78 01       	movw	r14, r16
     f9e:	f2 e0       	ldi	r31, 0x02	; 2
     fa0:	ef 1a       	sub	r14, r31
     fa2:	f1 08       	sbc	r15, r1
     fa4:	1e 14       	cp	r1, r14
     fa6:	1f 04       	cpc	r1, r15
     fa8:	44 f0       	brlt	.+16     	; 0xfba <Modbus_mster_transaction+0xaee>
     faa:	c4 c0       	rjmp	.+392    	; 0x1134 <Modbus_mster_transaction+0xc68>
     fac:	0f 2e       	mov	r0, r31
     fae:	f3 e0       	ldi	r31, 0x03	; 3
     fb0:	ef 2e       	mov	r14, r31
     fb2:	f1 2c       	mov	r15, r1
     fb4:	f0 2d       	mov	r31, r0
     fb6:	05 e0       	ldi	r16, 0x05	; 5
     fb8:	10 e0       	ldi	r17, 0x00	; 0
     fba:	20 e0       	ldi	r18, 0x00	; 0
     fbc:	30 e0       	ldi	r19, 0x00	; 0
     fbe:	8f ef       	ldi	r24, 0xFF	; 255
     fc0:	9f ef       	ldi	r25, 0xFF	; 255
     fc2:	d1 2c       	mov	r13, r1
     fc4:	e1 e0       	ldi	r30, 0x01	; 1
     fc6:	f0 e0       	ldi	r31, 0x00	; 0
     fc8:	ec 0f       	add	r30, r28
     fca:	fd 1f       	adc	r31, r29
     fcc:	e2 0f       	add	r30, r18
     fce:	f3 1f       	adc	r31, r19
     fd0:	60 81       	ld	r22, Z
     fd2:	0e 94 12 1b 	call	0x3624	; 0x3624 <crc16_update>
     fd6:	d3 94       	inc	r13
     fd8:	2d 2d       	mov	r18, r13
     fda:	30 e0       	ldi	r19, 0x00	; 0
     fdc:	2e 15       	cp	r18, r14
     fde:	3f 05       	cpc	r19, r15
     fe0:	8c f3       	brlt	.-30     	; 0xfc4 <Modbus_mster_transaction+0xaf8>
     fe2:	aa c0       	rjmp	.+340    	; 0x1138 <Modbus_mster_transaction+0xc6c>
     fe4:	89 2f       	mov	r24, r25
     fe6:	99 27       	eor	r25, r25
     fe8:	fe 01       	movw	r30, r28
     fea:	e0 0f       	add	r30, r16
     fec:	f1 1f       	adc	r31, r17
     fee:	20 81       	ld	r18, Z
     ff0:	30 e0       	ldi	r19, 0x00	; 0
     ff2:	82 17       	cp	r24, r18
     ff4:	93 07       	cpc	r25, r19
     ff6:	09 f0       	breq	.+2      	; 0xffa <Modbus_mster_transaction+0xb2e>
     ff8:	ac c0       	rjmp	.+344    	; 0x1152 <Modbus_mster_transaction+0xc86>
     ffa:	ad c0       	rjmp	.+346    	; 0x1156 <Modbus_mster_transaction+0xc8a>
     ffc:	8b 81       	ldd	r24, Y+3	; 0x03
     ffe:	86 95       	lsr	r24
    1000:	e1 f5       	brne	.+120    	; 0x107a <Modbus_mster_transaction+0xbae>
    1002:	5e c0       	rjmp	.+188    	; 0x10c0 <Modbus_mster_transaction+0xbf4>
    1004:	6b 81       	ldd	r22, Y+3	; 0x03
    1006:	86 2f       	mov	r24, r22
    1008:	86 95       	lsr	r24
    100a:	09 f4       	brne	.+2      	; 0x100e <Modbus_mster_transaction+0xb42>
    100c:	b2 c0       	rjmp	.+356    	; 0x1172 <Modbus_mster_transaction+0xca6>
    100e:	fe 01       	movw	r30, r28
    1010:	31 96       	adiw	r30, 0x01	; 1
    1012:	40 e0       	ldi	r20, 0x00	; 0
    1014:	50 e0       	ldi	r21, 0x00	; 0
    1016:	90 e0       	ldi	r25, 0x00	; 0
    1018:	90 34       	cpi	r25, 0x40	; 64
    101a:	70 f4       	brcc	.+28     	; 0x1038 <Modbus_mster_transaction+0xb6c>
    101c:	24 81       	ldd	r18, Z+4	; 0x04
    101e:	30 e0       	ldi	r19, 0x00	; 0
    1020:	32 2f       	mov	r19, r18
    1022:	22 27       	eor	r18, r18
    1024:	73 81       	ldd	r23, Z+3	; 0x03
    1026:	27 2b       	or	r18, r23
    1028:	da 01       	movw	r26, r20
    102a:	aa 0f       	add	r26, r26
    102c:	bb 1f       	adc	r27, r27
    102e:	af 5d       	subi	r26, 0xDF	; 223
    1030:	bc 4f       	sbci	r27, 0xFC	; 252
    1032:	11 96       	adiw	r26, 0x01	; 1
    1034:	3c 93       	st	X, r19
    1036:	2e 93       	st	-X, r18
    1038:	9f 5f       	subi	r25, 0xFF	; 255
    103a:	4f 5f       	subi	r20, 0xFF	; 255
    103c:	5f 4f       	sbci	r21, 0xFF	; 255
    103e:	32 96       	adiw	r30, 0x02	; 2
    1040:	98 13       	cpse	r25, r24
    1042:	ea cf       	rjmp	.-44     	; 0x1018 <Modbus_mster_transaction+0xb4c>
    1044:	9f ef       	ldi	r25, 0xFF	; 255
    1046:	98 0f       	add	r25, r24
    1048:	90 93 9a 02 	sts	0x029A, r25	; 0x80029a <g_mod1_response_buffer_length>
    104c:	60 ff       	sbrs	r22, 0
    104e:	35 c0       	rjmp	.+106    	; 0x10ba <Modbus_mster_transaction+0xbee>
    1050:	80 34       	cpi	r24, 0x40	; 64
    1052:	70 f4       	brcc	.+28     	; 0x1070 <Modbus_mster_transaction+0xba4>
    1054:	28 2f       	mov	r18, r24
    1056:	30 e0       	ldi	r19, 0x00	; 0
    1058:	22 0f       	add	r18, r18
    105a:	33 1f       	adc	r19, r19
    105c:	fe 01       	movw	r30, r28
    105e:	e2 0f       	add	r30, r18
    1060:	f3 1f       	adc	r31, r19
    1062:	44 81       	ldd	r20, Z+4	; 0x04
    1064:	50 e0       	ldi	r21, 0x00	; 0
    1066:	f9 01       	movw	r30, r18
    1068:	ef 5d       	subi	r30, 0xDF	; 223
    106a:	fc 4f       	sbci	r31, 0xFC	; 252
    106c:	51 83       	std	Z+1, r21	; 0x01
    106e:	40 83       	st	Z, r20
    1070:	8f 5f       	subi	r24, 0xFF	; 255
    1072:	80 93 9a 02 	sts	0x029A, r24	; 0x80029a <g_mod1_response_buffer_length>
    1076:	80 e0       	ldi	r24, 0x00	; 0
    1078:	23 c0       	rjmp	.+70     	; 0x10c0 <Modbus_mster_transaction+0xbf4>
    107a:	fe 01       	movw	r30, r28
    107c:	31 96       	adiw	r30, 0x01	; 1
    107e:	40 e0       	ldi	r20, 0x00	; 0
    1080:	50 e0       	ldi	r21, 0x00	; 0
    1082:	90 e0       	ldi	r25, 0x00	; 0
    1084:	90 34       	cpi	r25, 0x40	; 64
    1086:	70 f4       	brcc	.+28     	; 0x10a4 <Modbus_mster_transaction+0xbd8>
    1088:	23 81       	ldd	r18, Z+3	; 0x03
    108a:	30 e0       	ldi	r19, 0x00	; 0
    108c:	32 2f       	mov	r19, r18
    108e:	22 27       	eor	r18, r18
    1090:	64 81       	ldd	r22, Z+4	; 0x04
    1092:	26 2b       	or	r18, r22
    1094:	da 01       	movw	r26, r20
    1096:	aa 0f       	add	r26, r26
    1098:	bb 1f       	adc	r27, r27
    109a:	af 5d       	subi	r26, 0xDF	; 223
    109c:	bc 4f       	sbci	r27, 0xFC	; 252
    109e:	11 96       	adiw	r26, 0x01	; 1
    10a0:	3c 93       	st	X, r19
    10a2:	2e 93       	st	-X, r18
    10a4:	9f 5f       	subi	r25, 0xFF	; 255
    10a6:	4f 5f       	subi	r20, 0xFF	; 255
    10a8:	5f 4f       	sbci	r21, 0xFF	; 255
    10aa:	32 96       	adiw	r30, 0x02	; 2
    10ac:	98 13       	cpse	r25, r24
    10ae:	ea cf       	rjmp	.-44     	; 0x1084 <Modbus_mster_transaction+0xbb8>
    10b0:	81 50       	subi	r24, 0x01	; 1
    10b2:	80 93 9a 02 	sts	0x029A, r24	; 0x80029a <g_mod1_response_buffer_length>
    10b6:	80 e0       	ldi	r24, 0x00	; 0
    10b8:	03 c0       	rjmp	.+6      	; 0x10c0 <Modbus_mster_transaction+0xbf4>
    10ba:	80 e0       	ldi	r24, 0x00	; 0
    10bc:	01 c0       	rjmp	.+2      	; 0x10c0 <Modbus_mster_transaction+0xbf4>
    10be:	80 e0       	ldi	r24, 0x00	; 0
    10c0:	10 92 9c 02 	sts	0x029C, r1	; 0x80029c <g_mod1_transmit_buffer_index>
    10c4:	10 92 9b 02 	sts	0x029B, r1	; 0x80029b <g_mod1_response_buffer_index>
    10c8:	70 c0       	rjmp	.+224    	; 0x11aa <Modbus_mster_transaction+0xcde>
    10ca:	84 ee       	ldi	r24, 0xE4	; 228
    10cc:	6e c0       	rjmp	.+220    	; 0x11aa <Modbus_mster_transaction+0xcde>
    10ce:	03 e0       	ldi	r16, 0x03	; 3
    10d0:	0e 94 24 1b 	call	0x3648	; 0x3648 <Get_millis>
    10d4:	dc 01       	movw	r26, r24
    10d6:	cb 01       	movw	r24, r22
    10d8:	88 19       	sub	r24, r8
    10da:	99 09       	sbc	r25, r9
    10dc:	aa 09       	sbc	r26, r10
    10de:	bb 09       	sbc	r27, r11
    10e0:	81 3d       	cpi	r24, 0xD1	; 209
    10e2:	97 40       	sbci	r25, 0x07	; 7
    10e4:	a1 05       	cpc	r26, r1
    10e6:	b1 05       	cpc	r27, r1
    10e8:	08 f4       	brcc	.+2      	; 0x10ec <Modbus_mster_transaction+0xc20>
    10ea:	01 cc       	rjmp	.-2046   	; 0x8ee <Modbus_mster_transaction+0x422>
    10ec:	5b cc       	rjmp	.-1866   	; 0x9a4 <Modbus_mster_transaction+0x4d8>
    10ee:	8f ef       	ldi	r24, 0xFF	; 255
    10f0:	9f ef       	ldi	r25, 0xFF	; 255
    10f2:	fe 01       	movw	r30, r28
    10f4:	ee 0d       	add	r30, r14
    10f6:	ff 1d       	adc	r31, r15
    10f8:	21 81       	ldd	r18, Z+1	; 0x01
    10fa:	30 e0       	ldi	r19, 0x00	; 0
    10fc:	ac 01       	movw	r20, r24
    10fe:	55 27       	eor	r21, r21
    1100:	42 17       	cp	r20, r18
    1102:	53 07       	cpc	r21, r19
    1104:	09 f4       	brne	.+2      	; 0x1108 <Modbus_mster_transaction+0xc3c>
    1106:	84 cc       	rjmp	.-1784   	; 0xa10 <Modbus_mster_transaction+0x544>
    1108:	83 ee       	ldi	r24, 0xE3	; 227
    110a:	f1 cc       	rjmp	.-1566   	; 0xaee <Modbus_mster_transaction+0x622>
    110c:	83 ee       	ldi	r24, 0xE3	; 227
    110e:	ef cc       	rjmp	.-1570   	; 0xaee <Modbus_mster_transaction+0x622>
    1110:	8a 81       	ldd	r24, Y+2	; 0x02
    1112:	85 30       	cpi	r24, 0x05	; 5
    1114:	38 f4       	brcc	.+14     	; 0x1124 <Modbus_mster_transaction+0xc58>
    1116:	83 30       	cpi	r24, 0x03	; 3
    1118:	08 f0       	brcs	.+2      	; 0x111c <Modbus_mster_transaction+0xc50>
    111a:	86 cc       	rjmp	.-1780   	; 0xa28 <Modbus_mster_transaction+0x55c>
    111c:	81 30       	cpi	r24, 0x01	; 1
    111e:	08 f0       	brcs	.+2      	; 0x1122 <Modbus_mster_transaction+0xc56>
    1120:	88 cc       	rjmp	.-1776   	; 0xa32 <Modbus_mster_transaction+0x566>
    1122:	e4 cc       	rjmp	.-1592   	; 0xaec <Modbus_mster_transaction+0x620>
    1124:	87 31       	cpi	r24, 0x17	; 23
    1126:	09 f4       	brne	.+2      	; 0x112a <Modbus_mster_transaction+0xc5e>
    1128:	7f cc       	rjmp	.-1794   	; 0xa28 <Modbus_mster_transaction+0x55c>
    112a:	e0 cc       	rjmp	.-1600   	; 0xaec <Modbus_mster_transaction+0x620>
    112c:	70 fd       	sbrc	r23, 0
    112e:	a9 cc       	rjmp	.-1710   	; 0xa82 <Modbus_mster_transaction+0x5b6>
    1130:	80 e0       	ldi	r24, 0x00	; 0
    1132:	dd cc       	rjmp	.-1606   	; 0xaee <Modbus_mster_transaction+0x622>
    1134:	8f ef       	ldi	r24, 0xFF	; 255
    1136:	9f ef       	ldi	r25, 0xFF	; 255
    1138:	fe 01       	movw	r30, r28
    113a:	ee 0d       	add	r30, r14
    113c:	ff 1d       	adc	r31, r15
    113e:	21 81       	ldd	r18, Z+1	; 0x01
    1140:	30 e0       	ldi	r19, 0x00	; 0
    1142:	ac 01       	movw	r20, r24
    1144:	55 27       	eor	r21, r21
    1146:	42 17       	cp	r20, r18
    1148:	53 07       	cpc	r21, r19
    114a:	09 f4       	brne	.+2      	; 0x114e <Modbus_mster_transaction+0xc82>
    114c:	4b cf       	rjmp	.-362    	; 0xfe4 <Modbus_mster_transaction+0xb18>
    114e:	83 ee       	ldi	r24, 0xE3	; 227
    1150:	b7 cf       	rjmp	.-146    	; 0x10c0 <Modbus_mster_transaction+0xbf4>
    1152:	83 ee       	ldi	r24, 0xE3	; 227
    1154:	b5 cf       	rjmp	.-150    	; 0x10c0 <Modbus_mster_transaction+0xbf4>
    1156:	8a 81       	ldd	r24, Y+2	; 0x02
    1158:	85 30       	cpi	r24, 0x05	; 5
    115a:	38 f4       	brcc	.+14     	; 0x116a <Modbus_mster_transaction+0xc9e>
    115c:	83 30       	cpi	r24, 0x03	; 3
    115e:	08 f0       	brcs	.+2      	; 0x1162 <Modbus_mster_transaction+0xc96>
    1160:	4d cf       	rjmp	.-358    	; 0xffc <Modbus_mster_transaction+0xb30>
    1162:	81 30       	cpi	r24, 0x01	; 1
    1164:	08 f0       	brcs	.+2      	; 0x1168 <Modbus_mster_transaction+0xc9c>
    1166:	4e cf       	rjmp	.-356    	; 0x1004 <Modbus_mster_transaction+0xb38>
    1168:	aa cf       	rjmp	.-172    	; 0x10be <Modbus_mster_transaction+0xbf2>
    116a:	87 31       	cpi	r24, 0x17	; 23
    116c:	09 f4       	brne	.+2      	; 0x1170 <Modbus_mster_transaction+0xca4>
    116e:	46 cf       	rjmp	.-372    	; 0xffc <Modbus_mster_transaction+0xb30>
    1170:	a6 cf       	rjmp	.-180    	; 0x10be <Modbus_mster_transaction+0xbf2>
    1172:	60 fd       	sbrc	r22, 0
    1174:	6f cf       	rjmp	.-290    	; 0x1054 <Modbus_mster_transaction+0xb88>
    1176:	80 e0       	ldi	r24, 0x00	; 0
    1178:	a3 cf       	rjmp	.-186    	; 0x10c0 <Modbus_mster_transaction+0xbf4>
    117a:	01 11       	cpse	r16, r1
    117c:	b8 cb       	rjmp	.-2192   	; 0x8ee <Modbus_mster_transaction+0x422>
    117e:	80 e0       	ldi	r24, 0x00	; 0
    1180:	19 cc       	rjmp	.-1998   	; 0x9b4 <Modbus_mster_transaction+0x4e8>
    1182:	01 11       	cpse	r16, r1
    1184:	10 c0       	rjmp	.+32     	; 0x11a6 <Modbus_mster_transaction+0xcda>
    1186:	82 ee       	ldi	r24, 0xE2	; 226
    1188:	02 cf       	rjmp	.-508    	; 0xf8e <Modbus_mster_transaction+0xac2>
    118a:	01 11       	cpse	r16, r1
    118c:	a5 ce       	rjmp	.-694    	; 0xed8 <Modbus_mster_transaction+0xa0c>
    118e:	80 e0       	ldi	r24, 0x00	; 0
    1190:	fe ce       	rjmp	.-516    	; 0xf8e <Modbus_mster_transaction+0xac2>
    1192:	80 ee       	ldi	r24, 0xE0	; 224
    1194:	ac cc       	rjmp	.-1704   	; 0xaee <Modbus_mster_transaction+0x622>
    1196:	81 ee       	ldi	r24, 0xE1	; 225
    1198:	aa cc       	rjmp	.-1708   	; 0xaee <Modbus_mster_transaction+0x622>
    119a:	82 ee       	ldi	r24, 0xE2	; 226
    119c:	a8 cc       	rjmp	.-1712   	; 0xaee <Modbus_mster_transaction+0x622>
    119e:	80 ee       	ldi	r24, 0xE0	; 224
    11a0:	8f cf       	rjmp	.-226    	; 0x10c0 <Modbus_mster_transaction+0xbf4>
    11a2:	81 ee       	ldi	r24, 0xE1	; 225
    11a4:	8d cf       	rjmp	.-230    	; 0x10c0 <Modbus_mster_transaction+0xbf4>
    11a6:	82 ee       	ldi	r24, 0xE2	; 226
    11a8:	8b cf       	rjmp	.-234    	; 0x10c0 <Modbus_mster_transaction+0xbf4>
    11aa:	d3 95       	inc	r29
    11ac:	0f b6       	in	r0, 0x3f	; 63
    11ae:	f8 94       	cli
    11b0:	de bf       	out	0x3e, r29	; 62
    11b2:	0f be       	out	0x3f, r0	; 63
    11b4:	cd bf       	out	0x3d, r28	; 61
    11b6:	df 91       	pop	r29
    11b8:	cf 91       	pop	r28
    11ba:	1f 91       	pop	r17
    11bc:	0f 91       	pop	r16
    11be:	ff 90       	pop	r15
    11c0:	ef 90       	pop	r14
    11c2:	df 90       	pop	r13
    11c4:	bf 90       	pop	r11
    11c6:	af 90       	pop	r10
    11c8:	9f 90       	pop	r9
    11ca:	8f 90       	pop	r8
    11cc:	08 95       	ret

000011ce <Modbus_Set_transmit_buffer>:
    11ce:	81 11       	cpse	r24, r1
    11d0:	0b c0       	rjmp	.+22     	; 0x11e8 <Modbus_Set_transmit_buffer+0x1a>
    11d2:	60 34       	cpi	r22, 0x40	; 64
    11d4:	b8 f4       	brcc	.+46     	; 0x1204 <Modbus_Set_transmit_buffer+0x36>
    11d6:	e6 2f       	mov	r30, r22
    11d8:	f0 e0       	ldi	r31, 0x00	; 0
    11da:	ee 0f       	add	r30, r30
    11dc:	ff 1f       	adc	r31, r31
    11de:	e9 54       	subi	r30, 0x49	; 73
    11e0:	fc 4f       	sbci	r31, 0xFC	; 252
    11e2:	51 83       	std	Z+1, r21	; 0x01
    11e4:	40 83       	st	Z, r20
    11e6:	08 95       	ret
    11e8:	81 30       	cpi	r24, 0x01	; 1
    11ea:	71 f4       	brne	.+28     	; 0x1208 <Modbus_Set_transmit_buffer+0x3a>
    11ec:	60 34       	cpi	r22, 0x40	; 64
    11ee:	70 f4       	brcc	.+28     	; 0x120c <Modbus_Set_transmit_buffer+0x3e>
    11f0:	e6 2f       	mov	r30, r22
    11f2:	f0 e0       	ldi	r31, 0x00	; 0
    11f4:	ee 0f       	add	r30, r30
    11f6:	ff 1f       	adc	r31, r31
    11f8:	e3 56       	subi	r30, 0x63	; 99
    11fa:	fd 4f       	sbci	r31, 0xFD	; 253
    11fc:	51 83       	std	Z+1, r21	; 0x01
    11fe:	40 83       	st	Z, r20
    1200:	80 e0       	ldi	r24, 0x00	; 0
    1202:	08 95       	ret
    1204:	82 e0       	ldi	r24, 0x02	; 2
    1206:	08 95       	ret
    1208:	82 e0       	ldi	r24, 0x02	; 2
    120a:	08 95       	ret
    120c:	82 e0       	ldi	r24, 0x02	; 2
    120e:	08 95       	ret

00001210 <Modbus_Write_multiple_coils>:
@return 0 on success; exception number on failure
@ingroup discrete
*/
uint8_t Modbus_Write_multiple_coils(uint8_t device, uint16_t u16WriteAddress, uint16_t u16BitQty)
{
	if(DEVICE_0 == device){
    1210:	81 11       	cpse	r24, r1
    1212:	0b c0       	rjmp	.+22     	; 0x122a <Modbus_Write_multiple_coils+0x1a>
		g_mod0_write_address = u16WriteAddress;
    1214:	70 93 3a 04 	sts	0x043A, r23	; 0x80043a <g_mod0_write_address+0x1>
    1218:	60 93 39 04 	sts	0x0439, r22	; 0x800439 <g_mod0_write_address>
		g_mod0_write_qty = u16BitQty;
    121c:	50 93 38 04 	sts	0x0438, r21	; 0x800438 <g_mod0_write_qty+0x1>
    1220:	40 93 37 04 	sts	0x0437, r20	; 0x800437 <g_mod0_write_qty>
		return Modbus_mster_transaction(device, WRITE_MULTIPLE_COILS);
    1224:	6f e0       	ldi	r22, 0x0F	; 15
    1226:	52 c9       	rjmp	.-3420   	; 0x4cc <Modbus_mster_transaction>
    1228:	08 95       	ret
	}
	else if(DEVICE_1 == device){
    122a:	81 30       	cpi	r24, 0x01	; 1
    122c:	59 f4       	brne	.+22     	; 0x1244 <Modbus_Write_multiple_coils+0x34>
		g_mod1_write_address = u16WriteAddress;
    122e:	70 93 20 03 	sts	0x0320, r23	; 0x800320 <g_mod1_write_address+0x1>
    1232:	60 93 1f 03 	sts	0x031F, r22	; 0x80031f <g_mod1_write_address>
		g_mod1_write_qty = u16BitQty;
    1236:	50 93 1e 03 	sts	0x031E, r21	; 0x80031e <g_mod1_write_qty+0x1>
    123a:	40 93 1d 03 	sts	0x031D, r20	; 0x80031d <g_mod1_write_qty>
		return Modbus_mster_transaction(device, WRITE_MULTIPLE_COILS);
    123e:	6f e0       	ldi	r22, 0x0F	; 15
    1240:	45 c9       	rjmp	.-3446   	; 0x4cc <Modbus_mster_transaction>
    1242:	08 95       	ret
	}
	return INVALID_DEVICE; //error
    1244:	84 ee       	ldi	r24, 0xE4	; 228
}
    1246:	08 95       	ret

00001248 <vTask2>:
										
		
	}
}
static void vTask2(void* pvParameters)
{
    1248:	cf 93       	push	r28
    124a:	df 93       	push	r29
    124c:	00 d0       	rcall	.+0      	; 0x124e <vTask2+0x6>
    124e:	1f 92       	push	r1
    1250:	cd b7       	in	r28, 0x3d	; 61
    1252:	de b7       	in	r29, 0x3e	; 62
    1254:	7e 01       	movw	r14, r28
    1256:	85 e0       	ldi	r24, 0x05	; 5
    1258:	e8 0e       	add	r14, r24
    125a:	f1 1c       	adc	r15, r1
		size_t xReceivedBytes;
		const TickType_t xBlockTime = pdMS_TO_TICKS( 100 );
		/* Receive the next message from the message buffer. Wait in the Blocked
		state (so not using any CPU processing time) for a maximum of 100ms for
		a message to become available. */
		UART0_puts("Vtask2 requires data\n");
    125c:	83 e1       	ldi	r24, 0x13	; 19
    125e:	92 e0       	ldi	r25, 0x02	; 2
    1260:	dc d1       	rcall	.+952    	; 0x161a <UART0_puts>
		xReceivedBytes = xMessageBufferReceive( xMessageBuffer,
    1262:	26 e0       	ldi	r18, 0x06	; 6
    1264:	30 e0       	ldi	r19, 0x00	; 0
    1266:	44 e0       	ldi	r20, 0x04	; 4
    1268:	50 e0       	ldi	r21, 0x00	; 0
    126a:	be 01       	movw	r22, r28
    126c:	6f 5f       	subi	r22, 0xFF	; 255
    126e:	7f 4f       	sbci	r23, 0xFF	; 255
    1270:	80 91 59 0a 	lds	r24, 0x0A59	; 0x800a59 <xMessageBuffer>
    1274:	90 91 5a 0a 	lds	r25, 0x0A5A	; 0x800a5a <xMessageBuffer+0x1>
    1278:	0e 94 86 12 	call	0x250c	; 0x250c <xStreamBufferReceive>
												( void * ) ucRxData,
												sizeof( ucRxData ),
												xBlockTime );
		if(xReceivedBytes==0){
    127c:	89 2b       	or	r24, r25
    127e:	21 f4       	brne	.+8      	; 0x1288 <vTask2+0x40>
			UART0_puts("NO data\n");
    1280:	89 e2       	ldi	r24, 0x29	; 41
    1282:	92 e0       	ldi	r25, 0x02	; 2
    1284:	ca d1       	rcall	.+916    	; 0x161a <UART0_puts>
    1286:	ea cf       	rjmp	.-44     	; 0x125c <vTask2+0x14>
		}
		else{
			UART0_puts("Vtask2 receives data\n");
    1288:	82 e3       	ldi	r24, 0x32	; 50
    128a:	92 e0       	ldi	r25, 0x02	; 2
    128c:	c6 d1       	rcall	.+908    	; 0x161a <UART0_puts>
    128e:	8e 01       	movw	r16, r28
    1290:	0f 5f       	subi	r16, 0xFF	; 255
    1292:	1f 4f       	sbci	r17, 0xFF	; 255
			for(uint8_t i =0 ; i<4;i++){
				UART0_OutUDec(ucRxData[i]);
    1294:	f8 01       	movw	r30, r16
    1296:	61 91       	ld	r22, Z+
    1298:	8f 01       	movw	r16, r30
    129a:	70 e0       	ldi	r23, 0x00	; 0
    129c:	80 e0       	ldi	r24, 0x00	; 0
    129e:	90 e0       	ldi	r25, 0x00	; 0
				UART0_putc(',');
    12a0:	a0 d1       	rcall	.+832    	; 0x15e2 <UART0_OutUDec>
    12a2:	8c e2       	ldi	r24, 0x2C	; 44
		if(xReceivedBytes==0){
			UART0_puts("NO data\n");
		}
		else{
			UART0_puts("Vtask2 receives data\n");
			for(uint8_t i =0 ; i<4;i++){
    12a4:	85 d1       	rcall	.+778    	; 0x15b0 <UART0_putc>
    12a6:	0e 15       	cp	r16, r14
    12a8:	1f 05       	cpc	r17, r15
				UART0_OutUDec(ucRxData[i]);
				UART0_putc(',');
			}
			UART0_putc('\n');
    12aa:	a1 f7       	brne	.-24     	; 0x1294 <vTask2+0x4c>
    12ac:	8a e0       	ldi	r24, 0x0A	; 10
    12ae:	80 d1       	rcall	.+768    	; 0x15b0 <UART0_putc>
			//vTaskDelay(1000/portTICK_PERIOD_MS);
		
		}
	
	}
    12b0:	d5 cf       	rjmp	.-86     	; 0x125c <vTask2+0x14>

000012b2 <vTask1>:
	  vTaskStartScheduler();

	while (1){}
}
static void vTask1(void* pvParameters)
{
    12b2:	cf 93       	push	r28
    12b4:	df 93       	push	r29
    12b6:	00 d0       	rcall	.+0      	; 0x12b8 <vTask1+0x6>
    12b8:	1f 92       	push	r1
    12ba:	cd b7       	in	r28, 0x3d	; 61
    12bc:	de b7       	in	r29, 0x3e	; 62
	uint8_t ucArrayToSend[] = { 5, 6, 9, 1 };
    12be:	85 e0       	ldi	r24, 0x05	; 5
    12c0:	89 83       	std	Y+1, r24	; 0x01
    12c2:	86 e0       	ldi	r24, 0x06	; 6
    12c4:	8a 83       	std	Y+2, r24	; 0x02
    12c6:	89 e0       	ldi	r24, 0x09	; 9
    12c8:	8b 83       	std	Y+3, r24	; 0x03
    12ca:	81 e0       	ldi	r24, 0x01	; 1
    12cc:	8c 83       	std	Y+4, r24	; 0x04
    12ce:	7e 01       	movw	r14, r28
    12d0:	85 e0       	ldi	r24, 0x05	; 5
    12d2:	e8 0e       	add	r14, r24
    12d4:	f1 1c       	adc	r15, r1
    12d6:	8e 01       	movw	r16, r28
    12d8:	0f 5f       	subi	r16, 0xFF	; 255
    12da:	1f 4f       	sbci	r17, 0xFF	; 255
	  vTaskStartScheduler();

	while (1){}
}
static void vTask1(void* pvParameters)
{
    12dc:	f8 01       	movw	r30, r16
	while(1)
	{
			size_t xBytesSent;
		
			for(uint8_t i =0 ;i<4;i++){
				++ucArrayToSend[i];
    12de:	80 81       	ld	r24, Z
    12e0:	8f 5f       	subi	r24, 0xFF	; 255
    12e2:	81 93       	st	Z+, r24
	uint8_t ucArrayToSend[] = { 5, 6, 9, 1 };
	while(1)
	{
			size_t xBytesSent;
		
			for(uint8_t i =0 ;i<4;i++){
    12e4:	ee 15       	cp	r30, r14
    12e6:	ff 05       	cpc	r31, r15
    12e8:	d1 f7       	brne	.-12     	; 0x12de <vTask1+0x2c>
				++ucArrayToSend[i];
			}
		const TickType_t x100ms = pdMS_TO_TICKS( 100 );
		/* Send an array to the message buffer, blocking for a maximum of 100ms to
		wait for enough space to be available in the message buffer. */
		UART0_puts("Vtask1 sends data\n");
    12ea:	88 e4       	ldi	r24, 0x48	; 72
    12ec:	92 e0       	ldi	r25, 0x02	; 2
    12ee:	95 d1       	rcall	.+810    	; 0x161a <UART0_puts>
		for(uint8_t i =0 ; i<4;i++){
				UART0_OutUDec(ucArrayToSend[i]);
    12f0:	f8 01       	movw	r30, r16
    12f2:	61 91       	ld	r22, Z+
    12f4:	8f 01       	movw	r16, r30
    12f6:	70 e0       	ldi	r23, 0x00	; 0
    12f8:	80 e0       	ldi	r24, 0x00	; 0
    12fa:	90 e0       	ldi	r25, 0x00	; 0
    12fc:	72 d1       	rcall	.+740    	; 0x15e2 <UART0_OutUDec>
				UART0_putc(',');
    12fe:	8c e2       	ldi	r24, 0x2C	; 44
    1300:	57 d1       	rcall	.+686    	; 0x15b0 <UART0_putc>
    1302:	0e 15       	cp	r16, r14
			}
		const TickType_t x100ms = pdMS_TO_TICKS( 100 );
		/* Send an array to the message buffer, blocking for a maximum of 100ms to
		wait for enough space to be available in the message buffer. */
		UART0_puts("Vtask1 sends data\n");
		for(uint8_t i =0 ; i<4;i++){
    1304:	1f 05       	cpc	r17, r15
    1306:	a1 f7       	brne	.-24     	; 0x12f0 <vTask1+0x3e>
				UART0_OutUDec(ucArrayToSend[i]);
				UART0_putc(',');
		}
		UART0_putc('\n');
    1308:	8a e0       	ldi	r24, 0x0A	; 10
    130a:	52 d1       	rcall	.+676    	; 0x15b0 <UART0_putc>
    130c:	20 e0       	ldi	r18, 0x00	; 0
		xBytesSent = xMessageBufferSend( xMessageBuffer,
    130e:	30 e0       	ldi	r19, 0x00	; 0
    1310:	44 e0       	ldi	r20, 0x04	; 4
    1312:	50 e0       	ldi	r21, 0x00	; 0
    1314:	be 01       	movw	r22, r28
    1316:	6f 5f       	subi	r22, 0xFF	; 255
    1318:	7f 4f       	sbci	r23, 0xFF	; 255
    131a:	80 91 59 0a 	lds	r24, 0x0A59	; 0x800a59 <xMessageBuffer>
    131e:	90 91 5a 0a 	lds	r25, 0x0A5A	; 0x800a5a <xMessageBuffer+0x1>
    1322:	0e 94 ee 11 	call	0x23dc	; 0x23dc <xStreamBufferSend>
										( void * ) ucArrayToSend,
										sizeof( ucArrayToSend ),
										0 );
		UART0_puts("Vtask1 sent_____R data\n");
    1326:	8b e5       	ldi	r24, 0x5B	; 91
    1328:	92 e0       	ldi	r25, 0x02	; 2
    132a:	77 d1       	rcall	.+750    	; 0x161a <UART0_puts>
    132c:	8a ef       	ldi	r24, 0xFA	; 250
	    vTaskDelay(4000/portTICK_PERIOD_MS);
    132e:	90 e0       	ldi	r25, 0x00	; 0
    1330:	0e 94 1e 16 	call	0x2c3c	; 0x2c3c <vTaskDelay>
    1334:	d0 cf       	rjmp	.-96     	; 0x12d6 <vTask1+0x24>

00001336 <main>:
										
		
	}
    1336:	8f ef       	ldi	r24, 0xFF	; 255
/* The variable used to hold the message buffer structure. */
StaticMessageBuffer_t xMessageBufferStruct;
MessageBufferHandle_t xMessageBuffer;

int main() {
	DDRE = 0xFF;
    1338:	8d b9       	out	0x0d, r24	; 13
	UART0_init(9600);
    133a:	60 e8       	ldi	r22, 0x80	; 128
    133c:	75 e2       	ldi	r23, 0x25	; 37
    133e:	80 e0       	ldi	r24, 0x00	; 0
    1340:	90 e0       	ldi	r25, 0x00	; 0
    1342:	e1 d0       	rcall	.+450    	; 0x1506 <UART0_init>
	//Lcd_init(UART2,115200,1);
	lcd_set_buzzer(1);
    1344:	81 e0       	ldi	r24, 0x01	; 1
    1346:	90 e0       	ldi	r25, 0x00	; 0
    1348:	b6 d8       	rcall	.-3732   	; 0x4b6 <lcd_set_buzzer>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    134a:	2f ef       	ldi	r18, 0xFF	; 255
    134c:	83 ed       	ldi	r24, 0xD3	; 211
    134e:	90 e3       	ldi	r25, 0x30	; 48
    1350:	21 50       	subi	r18, 0x01	; 1
    1352:	80 40       	sbci	r24, 0x00	; 0
    1354:	90 40       	sbci	r25, 0x00	; 0
    1356:	e1 f7       	brne	.-8      	; 0x1350 <main+0x1a>
    1358:	00 c0       	rjmp	.+0      	; 0x135a <main+0x24>
    135a:	00 00       	nop
	_delay_ms(1000);
	lcd_set_buzzer(0);
    135c:	80 e0       	ldi	r24, 0x00	; 0
    135e:	90 e0       	ldi	r25, 0x00	; 0
    1360:	aa d8       	rcall	.-3756   	; 0x4b6 <lcd_set_buzzer>
    1362:	2f ef       	ldi	r18, 0xFF	; 255
    1364:	83 ed       	ldi	r24, 0xD3	; 211
    1366:	90 e3       	ldi	r25, 0x30	; 48
    1368:	21 50       	subi	r18, 0x01	; 1
    136a:	80 40       	sbci	r24, 0x00	; 0
    136c:	90 40       	sbci	r25, 0x00	; 0
    136e:	e1 f7       	brne	.-8      	; 0x1368 <main+0x32>
    1370:	00 c0       	rjmp	.+0      	; 0x1372 <main+0x3c>
    1372:	00 00       	nop
	_delay_ms(1000);
	
	TaskHandle_t xHandle1 = NULL , xHandle2 = NULL ;
	//UART2_init(115200);
	/* Create the task without using any dynamic memory allocation. */
	xHandle1 = xTaskCreateStatic(
    1374:	0f 2e       	mov	r0, r31
    1376:	f1 e3       	ldi	r31, 0x31	; 49
    1378:	cf 2e       	mov	r12, r31
    137a:	fa e0       	ldi	r31, 0x0A	; 10
    137c:	df 2e       	mov	r13, r31
    137e:	f0 2d       	mov	r31, r0
    1380:	0f 2e       	mov	r0, r31
    1382:	fe e8       	ldi	r31, 0x8E	; 142
    1384:	ef 2e       	mov	r14, r31
    1386:	fa e0       	ldi	r31, 0x0A	; 10
    1388:	ff 2e       	mov	r15, r31
    138a:	f0 2d       	mov	r31, r0
    138c:	02 e0       	ldi	r16, 0x02	; 2
    138e:	20 e0       	ldi	r18, 0x00	; 0
    1390:	30 e0       	ldi	r19, 0x00	; 0
    1392:	48 ec       	ldi	r20, 0xC8	; 200
    1394:	50 e0       	ldi	r21, 0x00	; 0
    1396:	63 e7       	ldi	r22, 0x73	; 115
    1398:	72 e0       	ldi	r23, 0x02	; 2
    139a:	89 e5       	ldi	r24, 0x59	; 89
    139c:	99 e0       	ldi	r25, 0x09	; 9
    139e:	0e 94 93 13 	call	0x2726	; 0x2726 <xTaskCreateStatic>
					NULL, /* Parameter passed into the task. */
					2,/* Priority at which the task is created. */
					xStack1, /* Array to use as the task's stack. */
					&xTask1Buffer); /* Variable to hold the task's data structure. */
	
	xHandle2 = xTaskCreateStatic(
    13a2:	0f 2e       	mov	r0, r31
    13a4:	fb e5       	ldi	r31, 0x5B	; 91
    13a6:	cf 2e       	mov	r12, r31
    13a8:	fa e0       	ldi	r31, 0x0A	; 10
    13aa:	df 2e       	mov	r13, r31
    13ac:	f0 2d       	mov	r31, r0
    13ae:	0f 2e       	mov	r0, r31
    13b0:	f5 e6       	ldi	r31, 0x65	; 101
    13b2:	ef 2e       	mov	r14, r31
    13b4:	fb e0       	ldi	r31, 0x0B	; 11
    13b6:	ff 2e       	mov	r15, r31
    13b8:	f0 2d       	mov	r31, r0
    13ba:	20 e0       	ldi	r18, 0x00	; 0
    13bc:	30 e0       	ldi	r19, 0x00	; 0
    13be:	48 ec       	ldi	r20, 0xC8	; 200
    13c0:	50 e0       	ldi	r21, 0x00	; 0
    13c2:	69 e7       	ldi	r22, 0x79	; 121
    13c4:	72 e0       	ldi	r23, 0x02	; 2
    13c6:	84 e2       	ldi	r24, 0x24	; 36
    13c8:	99 e0       	ldi	r25, 0x09	; 9
    13ca:	0e 94 93 13 	call	0x2726	; 0x2726 <xTaskCreateStatic>
				&xTask2Buffer ); /* Variable to hold the task's data structure. */



		//
		xMessageBuffer = xMessageBufferCreateStatic( sizeof( ucStorageBuffer ),
    13ce:	06 e5       	ldi	r16, 0x56	; 86
    13d0:	1b e0       	ldi	r17, 0x0B	; 11
    13d2:	20 ec       	ldi	r18, 0xC0	; 192
    13d4:	34 e0       	ldi	r19, 0x04	; 4
    13d6:	41 e0       	ldi	r20, 0x01	; 1
    13d8:	60 e0       	ldi	r22, 0x00	; 0
    13da:	70 e0       	ldi	r23, 0x00	; 0
    13dc:	84 e6       	ldi	r24, 0x64	; 100
    13de:	90 e0       	ldi	r25, 0x00	; 0
    13e0:	bc d7       	rcall	.+3960   	; 0x235a <xStreamBufferGenericCreateStatic>
    13e2:	90 93 5a 0a 	sts	0x0A5A, r25	; 0x800a5a <xMessageBuffer+0x1>
    13e6:	80 93 59 0a 	sts	0x0A59, r24	; 0x800a59 <xMessageBuffer>
														ucStorageBuffer, &xMessageBufferStruct );


	  // Start scheduler.
	  vTaskStartScheduler();
    13ea:	0e 94 8e 14 	call	0x291c	; 0x291c <vTaskStartScheduler>
    13ee:	ff cf       	rjmp	.-2      	; 0x13ee <main+0xb8>

000013f0 <__vector_29>:
    13f0:	1f 92       	push	r1
    13f2:	0f 92       	push	r0
    13f4:	0f b6       	in	r0, 0x3f	; 63
    13f6:	0f 92       	push	r0
    13f8:	11 24       	eor	r1, r1
    13fa:	2f 93       	push	r18
    13fc:	8f 93       	push	r24
    13fe:	9f 93       	push	r25
    1400:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
    1404:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
    1408:	90 e0       	ldi	r25, 0x00	; 0
    140a:	92 2b       	or	r25, r18
    140c:	90 93 26 05 	sts	0x0526, r25	; 0x800526 <g_analog_data+0x1>
    1410:	80 93 25 05 	sts	0x0525, r24	; 0x800525 <g_analog_data>
    1414:	81 e0       	ldi	r24, 0x01	; 1
    1416:	80 93 24 05 	sts	0x0524, r24	; 0x800524 <g_converted>
    141a:	9f 91       	pop	r25
    141c:	8f 91       	pop	r24
    141e:	2f 91       	pop	r18
    1420:	0f 90       	pop	r0
    1422:	0f be       	out	0x3f, r0	; 63
    1424:	0f 90       	pop	r0
    1426:	1f 90       	pop	r1
    1428:	18 95       	reti

0000142a <__vector_25>:
    142a:	1f 92       	push	r1
    142c:	0f 92       	push	r0
    142e:	0f b6       	in	r0, 0x3f	; 63
    1430:	0f 92       	push	r0
    1432:	11 24       	eor	r1, r1
    1434:	0b b6       	in	r0, 0x3b	; 59
    1436:	0f 92       	push	r0
    1438:	2f 93       	push	r18
    143a:	3f 93       	push	r19
    143c:	4f 93       	push	r20
    143e:	5f 93       	push	r21
    1440:	8f 93       	push	r24
    1442:	9f 93       	push	r25
    1444:	ef 93       	push	r30
    1446:	ff 93       	push	r31
    1448:	20 91 c0 00 	lds	r18, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
    144c:	30 91 c6 00 	lds	r19, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    1450:	28 71       	andi	r18, 0x18	; 24
    1452:	80 91 37 07 	lds	r24, 0x0737	; 0x800737 <UART_RxHead>
    1456:	90 e0       	ldi	r25, 0x00	; 0
    1458:	01 96       	adiw	r24, 0x01	; 1
    145a:	8f 77       	andi	r24, 0x7F	; 127
    145c:	99 27       	eor	r25, r25
    145e:	40 91 36 07 	lds	r20, 0x0736	; 0x800736 <UART_RxTail>
    1462:	50 e0       	ldi	r21, 0x00	; 0
    1464:	84 17       	cp	r24, r20
    1466:	95 07       	cpc	r25, r21
    1468:	39 f0       	breq	.+14     	; 0x1478 <__vector_25+0x4e>
    146a:	80 93 37 07 	sts	0x0737, r24	; 0x800737 <UART_RxHead>
    146e:	fc 01       	movw	r30, r24
    1470:	e6 5c       	subi	r30, 0xC6	; 198
    1472:	f8 4f       	sbci	r31, 0xF8	; 248
    1474:	30 83       	st	Z, r19
    1476:	01 c0       	rjmp	.+2      	; 0x147a <__vector_25+0x50>
    1478:	22 e0       	ldi	r18, 0x02	; 2
    147a:	20 93 35 07 	sts	0x0735, r18	; 0x800735 <UART_LastRxError>
    147e:	ff 91       	pop	r31
    1480:	ef 91       	pop	r30
    1482:	9f 91       	pop	r25
    1484:	8f 91       	pop	r24
    1486:	5f 91       	pop	r21
    1488:	4f 91       	pop	r20
    148a:	3f 91       	pop	r19
    148c:	2f 91       	pop	r18
    148e:	0f 90       	pop	r0
    1490:	0b be       	out	0x3b, r0	; 59
    1492:	0f 90       	pop	r0
    1494:	0f be       	out	0x3f, r0	; 63
    1496:	0f 90       	pop	r0
    1498:	1f 90       	pop	r1
    149a:	18 95       	reti

0000149c <__vector_26>:
    149c:	1f 92       	push	r1
    149e:	0f 92       	push	r0
    14a0:	0f b6       	in	r0, 0x3f	; 63
    14a2:	0f 92       	push	r0
    14a4:	11 24       	eor	r1, r1
    14a6:	0b b6       	in	r0, 0x3b	; 59
    14a8:	0f 92       	push	r0
    14aa:	8f 93       	push	r24
    14ac:	9f 93       	push	r25
    14ae:	ef 93       	push	r30
    14b0:	ff 93       	push	r31
    14b2:	90 91 39 07 	lds	r25, 0x0739	; 0x800739 <UART_TxHead>
    14b6:	80 91 38 07 	lds	r24, 0x0738	; 0x800738 <UART_TxTail>
    14ba:	98 17       	cp	r25, r24
    14bc:	89 f0       	breq	.+34     	; 0x14e0 <__vector_26+0x44>
    14be:	80 91 38 07 	lds	r24, 0x0738	; 0x800738 <UART_TxTail>
    14c2:	90 e0       	ldi	r25, 0x00	; 0
    14c4:	01 96       	adiw	r24, 0x01	; 1
    14c6:	8f 77       	andi	r24, 0x7F	; 127
    14c8:	99 27       	eor	r25, r25
    14ca:	80 93 38 07 	sts	0x0738, r24	; 0x800738 <UART_TxTail>
    14ce:	fc 01       	movw	r30, r24
    14d0:	e6 54       	subi	r30, 0x46	; 70
    14d2:	f8 4f       	sbci	r31, 0xF8	; 248
    14d4:	80 81       	ld	r24, Z
    14d6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    14da:	10 92 2a 05 	sts	0x052A, r1	; 0x80052a <UART0_Transmission_end>
    14de:	08 c0       	rjmp	.+16     	; 0x14f0 <__vector_26+0x54>
    14e0:	e1 ec       	ldi	r30, 0xC1	; 193
    14e2:	f0 e0       	ldi	r31, 0x00	; 0
    14e4:	80 81       	ld	r24, Z
    14e6:	8f 7d       	andi	r24, 0xDF	; 223
    14e8:	80 83       	st	Z, r24
    14ea:	81 e0       	ldi	r24, 0x01	; 1
    14ec:	80 93 2a 05 	sts	0x052A, r24	; 0x80052a <UART0_Transmission_end>
    14f0:	ff 91       	pop	r31
    14f2:	ef 91       	pop	r30
    14f4:	9f 91       	pop	r25
    14f6:	8f 91       	pop	r24
    14f8:	0f 90       	pop	r0
    14fa:	0b be       	out	0x3b, r0	; 59
    14fc:	0f 90       	pop	r0
    14fe:	0f be       	out	0x3f, r0	; 63
    1500:	0f 90       	pop	r0
    1502:	1f 90       	pop	r1
    1504:	18 95       	reti

00001506 <UART0_init>:
    1506:	0f 93       	push	r16
    1508:	1f 93       	push	r17
    150a:	8b 01       	movw	r16, r22
    150c:	9c 01       	movw	r18, r24
    150e:	f8 94       	cli
    1510:	10 92 39 07 	sts	0x0739, r1	; 0x800739 <UART_TxHead>
    1514:	10 92 38 07 	sts	0x0738, r1	; 0x800738 <UART_TxTail>
    1518:	10 92 37 07 	sts	0x0737, r1	; 0x800737 <UART_RxHead>
    151c:	10 92 36 07 	sts	0x0736, r1	; 0x800736 <UART_RxTail>
    1520:	78 94       	sei
    1522:	dc 01       	movw	r26, r24
    1524:	cb 01       	movw	r24, r22
    1526:	80 58       	subi	r24, 0x80	; 128
    1528:	9b 47       	sbci	r25, 0x7B	; 123
    152a:	a1 4e       	sbci	r26, 0xE1	; 225
    152c:	bf 4f       	sbci	r27, 0xFF	; 255
    152e:	88 0f       	add	r24, r24
    1530:	99 1f       	adc	r25, r25
    1532:	aa 1f       	adc	r26, r26
    1534:	bb 1f       	adc	r27, r27
    1536:	88 0f       	add	r24, r24
    1538:	99 1f       	adc	r25, r25
    153a:	aa 1f       	adc	r26, r26
    153c:	bb 1f       	adc	r27, r27
    153e:	bc 01       	movw	r22, r24
    1540:	cd 01       	movw	r24, r26
    1542:	66 0f       	add	r22, r22
    1544:	77 1f       	adc	r23, r23
    1546:	88 1f       	adc	r24, r24
    1548:	99 1f       	adc	r25, r25
    154a:	00 0f       	add	r16, r16
    154c:	11 1f       	adc	r17, r17
    154e:	22 1f       	adc	r18, r18
    1550:	33 1f       	adc	r19, r19
    1552:	00 0f       	add	r16, r16
    1554:	11 1f       	adc	r17, r17
    1556:	22 1f       	adc	r18, r18
    1558:	33 1f       	adc	r19, r19
    155a:	a9 01       	movw	r20, r18
    155c:	98 01       	movw	r18, r16
    155e:	22 0f       	add	r18, r18
    1560:	33 1f       	adc	r19, r19
    1562:	44 1f       	adc	r20, r20
    1564:	55 1f       	adc	r21, r21
    1566:	22 0f       	add	r18, r18
    1568:	33 1f       	adc	r19, r19
    156a:	44 1f       	adc	r20, r20
    156c:	55 1f       	adc	r21, r21
    156e:	0e 94 54 1b 	call	0x36a8	; 0x36a8 <__udivmodsi4>
    1572:	ba 01       	movw	r22, r20
    1574:	a9 01       	movw	r20, r18
    1576:	41 50       	subi	r20, 0x01	; 1
    1578:	51 09       	sbc	r21, r1
    157a:	61 09       	sbc	r22, r1
    157c:	71 09       	sbc	r23, r1
    157e:	57 ff       	sbrs	r21, 7
    1580:	06 c0       	rjmp	.+12     	; 0x158e <UART0_init+0x88>
    1582:	82 e0       	ldi	r24, 0x02	; 2
    1584:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
    1588:	5f 77       	andi	r21, 0x7F	; 127
    158a:	66 27       	eor	r22, r22
    158c:	77 27       	eor	r23, r23
    158e:	bb 27       	eor	r27, r27
    1590:	a7 2f       	mov	r26, r23
    1592:	96 2f       	mov	r25, r22
    1594:	85 2f       	mov	r24, r21
    1596:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
    159a:	40 93 c4 00 	sts	0x00C4, r20	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
    159e:	88 e9       	ldi	r24, 0x98	; 152
    15a0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    15a4:	86 e0       	ldi	r24, 0x06	; 6
    15a6:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
    15aa:	1f 91       	pop	r17
    15ac:	0f 91       	pop	r16
    15ae:	08 95       	ret

000015b0 <UART0_putc>:
    15b0:	40 91 39 07 	lds	r20, 0x0739	; 0x800739 <UART_TxHead>
    15b4:	50 e0       	ldi	r21, 0x00	; 0
    15b6:	4f 5f       	subi	r20, 0xFF	; 255
    15b8:	5f 4f       	sbci	r21, 0xFF	; 255
    15ba:	4f 77       	andi	r20, 0x7F	; 127
    15bc:	55 27       	eor	r21, r21
    15be:	20 91 38 07 	lds	r18, 0x0738	; 0x800738 <UART_TxTail>
    15c2:	30 e0       	ldi	r19, 0x00	; 0
    15c4:	42 17       	cp	r20, r18
    15c6:	53 07       	cpc	r21, r19
    15c8:	d1 f3       	breq	.-12     	; 0x15be <UART0_putc+0xe>
    15ca:	fa 01       	movw	r30, r20
    15cc:	e6 54       	subi	r30, 0x46	; 70
    15ce:	f8 4f       	sbci	r31, 0xF8	; 248
    15d0:	80 83       	st	Z, r24
    15d2:	40 93 39 07 	sts	0x0739, r20	; 0x800739 <UART_TxHead>
    15d6:	e1 ec       	ldi	r30, 0xC1	; 193
    15d8:	f0 e0       	ldi	r31, 0x00	; 0
    15da:	80 81       	ld	r24, Z
    15dc:	80 62       	ori	r24, 0x20	; 32
    15de:	80 83       	st	Z, r24
    15e0:	08 95       	ret

000015e2 <UART0_OutUDec>:
    15e2:	0f 93       	push	r16
    15e4:	1f 93       	push	r17
    15e6:	cf 93       	push	r28
    15e8:	df 93       	push	r29
    15ea:	6a 30       	cpi	r22, 0x0A	; 10
    15ec:	71 05       	cpc	r23, r1
    15ee:	81 05       	cpc	r24, r1
    15f0:	91 05       	cpc	r25, r1
    15f2:	58 f0       	brcs	.+22     	; 0x160a <UART0_OutUDec+0x28>
    15f4:	2a e0       	ldi	r18, 0x0A	; 10
    15f6:	30 e0       	ldi	r19, 0x00	; 0
    15f8:	40 e0       	ldi	r20, 0x00	; 0
    15fa:	50 e0       	ldi	r21, 0x00	; 0
    15fc:	0e 94 54 1b 	call	0x36a8	; 0x36a8 <__udivmodsi4>
    1600:	06 2f       	mov	r16, r22
    1602:	ca 01       	movw	r24, r20
    1604:	b9 01       	movw	r22, r18
    1606:	ed df       	rcall	.-38     	; 0x15e2 <UART0_OutUDec>
    1608:	60 2f       	mov	r22, r16
    160a:	80 e3       	ldi	r24, 0x30	; 48
    160c:	86 0f       	add	r24, r22
    160e:	d0 df       	rcall	.-96     	; 0x15b0 <UART0_putc>
    1610:	df 91       	pop	r29
    1612:	cf 91       	pop	r28
    1614:	1f 91       	pop	r17
    1616:	0f 91       	pop	r16
    1618:	08 95       	ret

0000161a <UART0_puts>:
    161a:	cf 93       	push	r28
    161c:	df 93       	push	r29
    161e:	ec 01       	movw	r28, r24
    1620:	88 81       	ld	r24, Y
    1622:	88 23       	and	r24, r24
    1624:	29 f0       	breq	.+10     	; 0x1630 <UART0_puts+0x16>
    1626:	21 96       	adiw	r28, 0x01	; 1
    1628:	c3 df       	rcall	.-122    	; 0x15b0 <UART0_putc>
    162a:	89 91       	ld	r24, Y+
    162c:	81 11       	cpse	r24, r1
    162e:	fc cf       	rjmp	.-8      	; 0x1628 <UART0_puts+0xe>
    1630:	df 91       	pop	r29
    1632:	cf 91       	pop	r28
    1634:	08 95       	ret

00001636 <__vector_36>:
    1636:	1f 92       	push	r1
    1638:	0f 92       	push	r0
    163a:	0f b6       	in	r0, 0x3f	; 63
    163c:	0f 92       	push	r0
    163e:	11 24       	eor	r1, r1
    1640:	0b b6       	in	r0, 0x3b	; 59
    1642:	0f 92       	push	r0
    1644:	2f 93       	push	r18
    1646:	3f 93       	push	r19
    1648:	4f 93       	push	r20
    164a:	5f 93       	push	r21
    164c:	8f 93       	push	r24
    164e:	9f 93       	push	r25
    1650:	ef 93       	push	r30
    1652:	ff 93       	push	r31
    1654:	20 91 c8 00 	lds	r18, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
    1658:	30 91 ce 00 	lds	r19, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    165c:	28 71       	andi	r18, 0x18	; 24
    165e:	80 91 32 06 	lds	r24, 0x0632	; 0x800632 <UART1_RxHead>
    1662:	90 e0       	ldi	r25, 0x00	; 0
    1664:	01 96       	adiw	r24, 0x01	; 1
    1666:	8f 77       	andi	r24, 0x7F	; 127
    1668:	99 27       	eor	r25, r25
    166a:	40 91 31 06 	lds	r20, 0x0631	; 0x800631 <UART1_RxTail>
    166e:	50 e0       	ldi	r21, 0x00	; 0
    1670:	84 17       	cp	r24, r20
    1672:	95 07       	cpc	r25, r21
    1674:	39 f0       	breq	.+14     	; 0x1684 <__vector_36+0x4e>
    1676:	80 93 32 06 	sts	0x0632, r24	; 0x800632 <UART1_RxHead>
    167a:	fc 01       	movw	r30, r24
    167c:	eb 5c       	subi	r30, 0xCB	; 203
    167e:	f9 4f       	sbci	r31, 0xF9	; 249
    1680:	30 83       	st	Z, r19
    1682:	01 c0       	rjmp	.+2      	; 0x1686 <__vector_36+0x50>
    1684:	22 e0       	ldi	r18, 0x02	; 2
    1686:	20 93 30 06 	sts	0x0630, r18	; 0x800630 <UART1_LastRxError>
    168a:	ff 91       	pop	r31
    168c:	ef 91       	pop	r30
    168e:	9f 91       	pop	r25
    1690:	8f 91       	pop	r24
    1692:	5f 91       	pop	r21
    1694:	4f 91       	pop	r20
    1696:	3f 91       	pop	r19
    1698:	2f 91       	pop	r18
    169a:	0f 90       	pop	r0
    169c:	0b be       	out	0x3b, r0	; 59
    169e:	0f 90       	pop	r0
    16a0:	0f be       	out	0x3f, r0	; 63
    16a2:	0f 90       	pop	r0
    16a4:	1f 90       	pop	r1
    16a6:	18 95       	reti

000016a8 <__vector_37>:
    16a8:	1f 92       	push	r1
    16aa:	0f 92       	push	r0
    16ac:	0f b6       	in	r0, 0x3f	; 63
    16ae:	0f 92       	push	r0
    16b0:	11 24       	eor	r1, r1
    16b2:	0b b6       	in	r0, 0x3b	; 59
    16b4:	0f 92       	push	r0
    16b6:	8f 93       	push	r24
    16b8:	9f 93       	push	r25
    16ba:	ef 93       	push	r30
    16bc:	ff 93       	push	r31
    16be:	90 91 34 06 	lds	r25, 0x0634	; 0x800634 <UART1_TxHead>
    16c2:	80 91 33 06 	lds	r24, 0x0633	; 0x800633 <UART1_TxTail>
    16c6:	98 17       	cp	r25, r24
    16c8:	89 f0       	breq	.+34     	; 0x16ec <__vector_37+0x44>
    16ca:	80 91 33 06 	lds	r24, 0x0633	; 0x800633 <UART1_TxTail>
    16ce:	90 e0       	ldi	r25, 0x00	; 0
    16d0:	01 96       	adiw	r24, 0x01	; 1
    16d2:	8f 77       	andi	r24, 0x7F	; 127
    16d4:	99 27       	eor	r25, r25
    16d6:	80 93 33 06 	sts	0x0633, r24	; 0x800633 <UART1_TxTail>
    16da:	fc 01       	movw	r30, r24
    16dc:	eb 54       	subi	r30, 0x4B	; 75
    16de:	f9 4f       	sbci	r31, 0xF9	; 249
    16e0:	80 81       	ld	r24, Z
    16e2:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    16e6:	10 92 29 05 	sts	0x0529, r1	; 0x800529 <UART1_Transmission_end>
    16ea:	08 c0       	rjmp	.+16     	; 0x16fc <__vector_37+0x54>
    16ec:	e9 ec       	ldi	r30, 0xC9	; 201
    16ee:	f0 e0       	ldi	r31, 0x00	; 0
    16f0:	80 81       	ld	r24, Z
    16f2:	8f 7d       	andi	r24, 0xDF	; 223
    16f4:	80 83       	st	Z, r24
    16f6:	81 e0       	ldi	r24, 0x01	; 1
    16f8:	80 93 29 05 	sts	0x0529, r24	; 0x800529 <UART1_Transmission_end>
    16fc:	ff 91       	pop	r31
    16fe:	ef 91       	pop	r30
    1700:	9f 91       	pop	r25
    1702:	8f 91       	pop	r24
    1704:	0f 90       	pop	r0
    1706:	0b be       	out	0x3b, r0	; 59
    1708:	0f 90       	pop	r0
    170a:	0f be       	out	0x3f, r0	; 63
    170c:	0f 90       	pop	r0
    170e:	1f 90       	pop	r1
    1710:	18 95       	reti

00001712 <__vector_51>:
    1712:	1f 92       	push	r1
    1714:	0f 92       	push	r0
    1716:	0f b6       	in	r0, 0x3f	; 63
    1718:	0f 92       	push	r0
    171a:	11 24       	eor	r1, r1
    171c:	0b b6       	in	r0, 0x3b	; 59
    171e:	0f 92       	push	r0
    1720:	2f 93       	push	r18
    1722:	3f 93       	push	r19
    1724:	4f 93       	push	r20
    1726:	5f 93       	push	r21
    1728:	8f 93       	push	r24
    172a:	9f 93       	push	r25
    172c:	ef 93       	push	r30
    172e:	ff 93       	push	r31
    1730:	20 91 d0 00 	lds	r18, 0x00D0	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7000d0>
    1734:	30 91 d6 00 	lds	r19, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    1738:	80 91 27 05 	lds	r24, 0x0527	; 0x800527 <count.2060>
    173c:	e8 2f       	mov	r30, r24
    173e:	f0 e0       	ldi	r31, 0x00	; 0
    1740:	e3 5d       	subi	r30, 0xD3	; 211
    1742:	f3 4f       	sbci	r31, 0xF3	; 243
    1744:	30 83       	st	Z, r19
    1746:	8f 5f       	subi	r24, 0xFF	; 255
    1748:	80 93 27 05 	sts	0x0527, r24	; 0x800527 <count.2060>
    174c:	28 71       	andi	r18, 0x18	; 24
    174e:	80 91 2d 05 	lds	r24, 0x052D	; 0x80052d <UART2_RxHead>
    1752:	90 e0       	ldi	r25, 0x00	; 0
    1754:	01 96       	adiw	r24, 0x01	; 1
    1756:	8f 77       	andi	r24, 0x7F	; 127
    1758:	99 27       	eor	r25, r25
    175a:	40 91 2c 05 	lds	r20, 0x052C	; 0x80052c <UART2_RxTail>
    175e:	50 e0       	ldi	r21, 0x00	; 0
    1760:	84 17       	cp	r24, r20
    1762:	95 07       	cpc	r25, r21
    1764:	39 f0       	breq	.+14     	; 0x1774 <__vector_51+0x62>
    1766:	80 93 2d 05 	sts	0x052D, r24	; 0x80052d <UART2_RxHead>
    176a:	fc 01       	movw	r30, r24
    176c:	e0 5d       	subi	r30, 0xD0	; 208
    176e:	fa 4f       	sbci	r31, 0xFA	; 250
    1770:	30 83       	st	Z, r19
    1772:	01 c0       	rjmp	.+2      	; 0x1776 <__vector_51+0x64>
    1774:	22 e0       	ldi	r18, 0x02	; 2
    1776:	20 93 2b 05 	sts	0x052B, r18	; 0x80052b <UART2_LastRxError>
    177a:	ff 91       	pop	r31
    177c:	ef 91       	pop	r30
    177e:	9f 91       	pop	r25
    1780:	8f 91       	pop	r24
    1782:	5f 91       	pop	r21
    1784:	4f 91       	pop	r20
    1786:	3f 91       	pop	r19
    1788:	2f 91       	pop	r18
    178a:	0f 90       	pop	r0
    178c:	0b be       	out	0x3b, r0	; 59
    178e:	0f 90       	pop	r0
    1790:	0f be       	out	0x3f, r0	; 63
    1792:	0f 90       	pop	r0
    1794:	1f 90       	pop	r1
    1796:	18 95       	reti

00001798 <__vector_52>:
    1798:	1f 92       	push	r1
    179a:	0f 92       	push	r0
    179c:	0f b6       	in	r0, 0x3f	; 63
    179e:	0f 92       	push	r0
    17a0:	11 24       	eor	r1, r1
    17a2:	0b b6       	in	r0, 0x3b	; 59
    17a4:	0f 92       	push	r0
    17a6:	8f 93       	push	r24
    17a8:	9f 93       	push	r25
    17aa:	ef 93       	push	r30
    17ac:	ff 93       	push	r31
    17ae:	90 91 2f 05 	lds	r25, 0x052F	; 0x80052f <UART2_TxHead>
    17b2:	80 91 2e 05 	lds	r24, 0x052E	; 0x80052e <UART2_TxTail>
    17b6:	98 17       	cp	r25, r24
    17b8:	89 f0       	breq	.+34     	; 0x17dc <__vector_52+0x44>
    17ba:	80 91 2e 05 	lds	r24, 0x052E	; 0x80052e <UART2_TxTail>
    17be:	90 e0       	ldi	r25, 0x00	; 0
    17c0:	01 96       	adiw	r24, 0x01	; 1
    17c2:	8f 77       	andi	r24, 0x7F	; 127
    17c4:	99 27       	eor	r25, r25
    17c6:	80 93 2e 05 	sts	0x052E, r24	; 0x80052e <UART2_TxTail>
    17ca:	fc 01       	movw	r30, r24
    17cc:	e0 55       	subi	r30, 0x50	; 80
    17ce:	fa 4f       	sbci	r31, 0xFA	; 250
    17d0:	80 81       	ld	r24, Z
    17d2:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    17d6:	10 92 28 05 	sts	0x0528, r1	; 0x800528 <UART2_Transmission_end>
    17da:	08 c0       	rjmp	.+16     	; 0x17ec <__vector_52+0x54>
    17dc:	e1 ed       	ldi	r30, 0xD1	; 209
    17de:	f0 e0       	ldi	r31, 0x00	; 0
    17e0:	80 81       	ld	r24, Z
    17e2:	8f 7d       	andi	r24, 0xDF	; 223
    17e4:	80 83       	st	Z, r24
    17e6:	81 e0       	ldi	r24, 0x01	; 1
    17e8:	80 93 28 05 	sts	0x0528, r24	; 0x800528 <UART2_Transmission_end>
    17ec:	ff 91       	pop	r31
    17ee:	ef 91       	pop	r30
    17f0:	9f 91       	pop	r25
    17f2:	8f 91       	pop	r24
    17f4:	0f 90       	pop	r0
    17f6:	0b be       	out	0x3b, r0	; 59
    17f8:	0f 90       	pop	r0
    17fa:	0f be       	out	0x3f, r0	; 63
    17fc:	0f 90       	pop	r0
    17fe:	1f 90       	pop	r1
    1800:	18 95       	reti

00001802 <vApplicationStackOverflowHook>:
	   This routine will never return.
	   This routine is referenced in the task.c file of FreeRTOS as an extern.
	\*---------------------------------------------------------------------------*/

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
	DDRB  |= _BV(DDB7);
    1802:	27 9a       	sbi	0x04, 7	; 4
	PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    1804:	2f 9a       	sbi	0x05, 7	; 5
    1806:	2f e7       	ldi	r18, 0x7F	; 127
    1808:	8a e1       	ldi	r24, 0x1A	; 26
    180a:	96 e0       	ldi	r25, 0x06	; 6
    180c:	21 50       	subi	r18, 0x01	; 1
    180e:	80 40       	sbci	r24, 0x00	; 0
    1810:	90 40       	sbci	r25, 0x00	; 0
    1812:	e1 f7       	brne	.-8      	; 0x180c <vApplicationStackOverflowHook+0xa>
    1814:	00 c0       	rjmp	.+0      	; 0x1816 <vApplicationStackOverflowHook+0x14>
    1816:	00 00       	nop
	for(;;)
	{
		_delay_ms(2000);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
		PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED slow blink.
    1818:	1f 9a       	sbi	0x03, 7	; 3
    181a:	f5 cf       	rjmp	.-22     	; 0x1806 <vApplicationStackOverflowHook+0x4>

0000181c <vApplicationGetIdleTaskMemory>:
                                    configSTACK_DEPTH_TYPE *pulIdleTaskStackSize )
{
    static StaticTask_t xIdleTaskTCB;
    static StackType_t uxIdleTaskStack[ configMINIMAL_STACK_SIZE ];

    *ppxIdleTaskTCBBuffer = &xIdleTaskTCB;
    181c:	2c e0       	ldi	r18, 0x0C	; 12
    181e:	39 e0       	ldi	r19, 0x09	; 9
    1820:	fc 01       	movw	r30, r24
    1822:	31 83       	std	Z+1, r19	; 0x01
    1824:	20 83       	st	Z, r18
    *ppxIdleTaskStackBuffer = uxIdleTaskStack;
    1826:	87 eb       	ldi	r24, 0xB7	; 183
    1828:	98 e0       	ldi	r25, 0x08	; 8
    182a:	fb 01       	movw	r30, r22
    182c:	91 83       	std	Z+1, r25	; 0x01
    182e:	80 83       	st	Z, r24
    *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
    1830:	85 e5       	ldi	r24, 0x55	; 85
    1832:	90 e0       	ldi	r25, 0x00	; 0
    1834:	fa 01       	movw	r30, r20
    1836:	91 83       	std	Z+1, r25	; 0x01
    1838:	80 83       	st	Z, r24
    183a:	08 95       	ret

0000183c <vApplicationGetTimerTaskMemory>:
                                     configSTACK_DEPTH_TYPE *pulTimerTaskStackSize )
{
    static StaticTask_t xTimerTaskTCB;
    static StackType_t uxTimerTaskStack[ configTIMER_TASK_STACK_DEPTH ];

    *ppxTimerTaskTCBBuffer = &xTimerTaskTCB;
    183c:	2f e8       	ldi	r18, 0x8F	; 143
    183e:	38 e0       	ldi	r19, 0x08	; 8
    1840:	fc 01       	movw	r30, r24
    1842:	31 83       	std	Z+1, r19	; 0x01
    1844:	20 83       	st	Z, r18
    *ppxTimerTaskStackBuffer = uxTimerTaskStack;
    1846:	8a e3       	ldi	r24, 0x3A	; 58
    1848:	98 e0       	ldi	r25, 0x08	; 8
    184a:	fb 01       	movw	r30, r22
    184c:	91 83       	std	Z+1, r25	; 0x01
    184e:	80 83       	st	Z, r24
    *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
    1850:	85 e5       	ldi	r24, 0x55	; 85
    1852:	90 e0       	ldi	r25, 0x00	; 0
    1854:	fa 01       	movw	r30, r20
    1856:	91 83       	std	Z+1, r25	; 0x01
    1858:	80 83       	st	Z, r24
    185a:	08 95       	ret

0000185c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    185c:	fc 01       	movw	r30, r24
    /* The list structure contains a list item which is used to mark the
    end of the list.  To initialise the list the list end is inserted
    as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );            /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    185e:	03 96       	adiw	r24, 0x03	; 3
    1860:	92 83       	std	Z+2, r25	; 0x02
    1862:	81 83       	std	Z+1, r24	; 0x01

    /* The list end value is the highest possible value in the list to
    ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
    1864:	2f ef       	ldi	r18, 0xFF	; 255
    1866:	3f ef       	ldi	r19, 0xFF	; 255
    1868:	34 83       	std	Z+4, r19	; 0x04
    186a:	23 83       	std	Z+3, r18	; 0x03

    /* The list end next and previous pointers point to itself so we know
    when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );    /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    186c:	96 83       	std	Z+6, r25	; 0x06
    186e:	85 83       	std	Z+5, r24	; 0x05
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1870:	90 87       	std	Z+8, r25	; 0x08
    1872:	87 83       	std	Z+7, r24	; 0x07

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    1874:	10 82       	st	Z, r1
    1876:	08 95       	ret

00001878 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
    1878:	fc 01       	movw	r30, r24
    187a:	11 86       	std	Z+9, r1	; 0x09
    187c:	10 86       	std	Z+8, r1	; 0x08
    187e:	08 95       	ret

00001880 <vListInsertEnd>:
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    1880:	cf 93       	push	r28
    1882:	df 93       	push	r29
    1884:	9c 01       	movw	r18, r24
    1886:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
    1888:	dc 01       	movw	r26, r24
    188a:	11 96       	adiw	r26, 0x01	; 1
    188c:	cd 91       	ld	r28, X+
    188e:	dc 91       	ld	r29, X
    1890:	12 97       	sbiw	r26, 0x02	; 2
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
    makes the new list item the last item to be removed by a call to
    listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
    1892:	d3 83       	std	Z+3, r29	; 0x03
    1894:	c2 83       	std	Z+2, r28	; 0x02
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    1896:	8c 81       	ldd	r24, Y+4	; 0x04
    1898:	9d 81       	ldd	r25, Y+5	; 0x05
    189a:	95 83       	std	Z+5, r25	; 0x05
    189c:	84 83       	std	Z+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
    189e:	8c 81       	ldd	r24, Y+4	; 0x04
    18a0:	9d 81       	ldd	r25, Y+5	; 0x05
    18a2:	dc 01       	movw	r26, r24
    18a4:	13 96       	adiw	r26, 0x03	; 3
    18a6:	7c 93       	st	X, r23
    18a8:	6e 93       	st	-X, r22
    18aa:	12 97       	sbiw	r26, 0x02	; 2
    pxIndex->pxPrevious = pxNewListItem;
    18ac:	7d 83       	std	Y+5, r23	; 0x05
    18ae:	6c 83       	std	Y+4, r22	; 0x04

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
    18b0:	31 87       	std	Z+9, r19	; 0x09
    18b2:	20 87       	std	Z+8, r18	; 0x08

    ( pxList->uxNumberOfItems )++;
    18b4:	f9 01       	movw	r30, r18
    18b6:	80 81       	ld	r24, Z
    18b8:	8f 5f       	subi	r24, 0xFF	; 255
    18ba:	80 83       	st	Z, r24
}
    18bc:	df 91       	pop	r29
    18be:	cf 91       	pop	r28
    18c0:	08 95       	ret

000018c2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    18c2:	cf 93       	push	r28
    18c4:	df 93       	push	r29
    18c6:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    18c8:	48 81       	ld	r20, Y
    18ca:	59 81       	ldd	r21, Y+1	; 0x01
    new list item should be placed after it.  This ensures that TCBs which are
    stored in ready lists (all of which have the same xItemValue value) get a
    share of the CPU.  However, if the xItemValue is the same as the back marker
    the iteration loop below will not end.  Therefore the value is checked
    first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
    18cc:	4f 3f       	cpi	r20, 0xFF	; 255
    18ce:	2f ef       	ldi	r18, 0xFF	; 255
    18d0:	52 07       	cpc	r21, r18
    18d2:	21 f4       	brne	.+8      	; 0x18dc <vListInsert+0x1a>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
    18d4:	fc 01       	movw	r30, r24
    18d6:	a7 81       	ldd	r26, Z+7	; 0x07
    18d8:	b0 85       	ldd	r27, Z+8	; 0x08
    18da:	0d c0       	rjmp	.+26     	; 0x18f6 <vListInsert+0x34>
            4) Using a queue or semaphore before it has been initialised or
               before the scheduler has been started (are interrupts firing
               before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
    18dc:	dc 01       	movw	r26, r24
    18de:	13 96       	adiw	r26, 0x03	; 3
    18e0:	01 c0       	rjmp	.+2      	; 0x18e4 <vListInsert+0x22>
    18e2:	df 01       	movw	r26, r30
    18e4:	12 96       	adiw	r26, 0x02	; 2
    18e6:	ed 91       	ld	r30, X+
    18e8:	fc 91       	ld	r31, X
    18ea:	13 97       	sbiw	r26, 0x03	; 3
    18ec:	20 81       	ld	r18, Z
    18ee:	31 81       	ldd	r19, Z+1	; 0x01
    18f0:	42 17       	cp	r20, r18
    18f2:	53 07       	cpc	r21, r19
    18f4:	b0 f7       	brcc	.-20     	; 0x18e2 <vListInsert+0x20>
            /* There is nothing to do here, just iterating to the wanted
            insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
    18f6:	12 96       	adiw	r26, 0x02	; 2
    18f8:	ed 91       	ld	r30, X+
    18fa:	fc 91       	ld	r31, X
    18fc:	13 97       	sbiw	r26, 0x03	; 3
    18fe:	fb 83       	std	Y+3, r31	; 0x03
    1900:	ea 83       	std	Y+2, r30	; 0x02
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    1902:	d5 83       	std	Z+5, r29	; 0x05
    1904:	c4 83       	std	Z+4, r28	; 0x04
    pxNewListItem->pxPrevious = pxIterator;
    1906:	bd 83       	std	Y+5, r27	; 0x05
    1908:	ac 83       	std	Y+4, r26	; 0x04
    pxIterator->pxNext = pxNewListItem;
    190a:	13 96       	adiw	r26, 0x03	; 3
    190c:	dc 93       	st	X, r29
    190e:	ce 93       	st	-X, r28
    1910:	12 97       	sbiw	r26, 0x02	; 2

    /* Remember which list the item is in.  This allows fast removal of the
    item later. */
    pxNewListItem->pxContainer = pxList;
    1912:	99 87       	std	Y+9, r25	; 0x09
    1914:	88 87       	std	Y+8, r24	; 0x08

    ( pxList->uxNumberOfItems )++;
    1916:	fc 01       	movw	r30, r24
    1918:	20 81       	ld	r18, Z
    191a:	2f 5f       	subi	r18, 0xFF	; 255
    191c:	20 83       	st	Z, r18
}
    191e:	df 91       	pop	r29
    1920:	cf 91       	pop	r28
    1922:	08 95       	ret

00001924 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    1924:	cf 93       	push	r28
    1926:	df 93       	push	r29
    1928:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
    192a:	a0 85       	ldd	r26, Z+8	; 0x08
    192c:	b1 85       	ldd	r27, Z+9	; 0x09

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    192e:	c2 81       	ldd	r28, Z+2	; 0x02
    1930:	d3 81       	ldd	r29, Z+3	; 0x03
    1932:	84 81       	ldd	r24, Z+4	; 0x04
    1934:	95 81       	ldd	r25, Z+5	; 0x05
    1936:	9d 83       	std	Y+5, r25	; 0x05
    1938:	8c 83       	std	Y+4, r24	; 0x04
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    193a:	c4 81       	ldd	r28, Z+4	; 0x04
    193c:	d5 81       	ldd	r29, Z+5	; 0x05
    193e:	82 81       	ldd	r24, Z+2	; 0x02
    1940:	93 81       	ldd	r25, Z+3	; 0x03
    1942:	9b 83       	std	Y+3, r25	; 0x03
    1944:	8a 83       	std	Y+2, r24	; 0x02

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
    1946:	11 96       	adiw	r26, 0x01	; 1
    1948:	8d 91       	ld	r24, X+
    194a:	9c 91       	ld	r25, X
    194c:	12 97       	sbiw	r26, 0x02	; 2
    194e:	e8 17       	cp	r30, r24
    1950:	f9 07       	cpc	r31, r25
    1952:	31 f4       	brne	.+12     	; 0x1960 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
    1954:	84 81       	ldd	r24, Z+4	; 0x04
    1956:	95 81       	ldd	r25, Z+5	; 0x05
    1958:	12 96       	adiw	r26, 0x02	; 2
    195a:	9c 93       	st	X, r25
    195c:	8e 93       	st	-X, r24
    195e:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
    1960:	11 86       	std	Z+9, r1	; 0x09
    1962:	10 86       	std	Z+8, r1	; 0x08
    ( pxList->uxNumberOfItems )--;
    1964:	8c 91       	ld	r24, X
    1966:	81 50       	subi	r24, 0x01	; 1
    1968:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
    196a:	8c 91       	ld	r24, X
}
    196c:	df 91       	pop	r29
    196e:	cf 91       	pop	r28
    1970:	08 95       	ret

00001972 <pxPortInitialiseStack>:
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
    1972:	31 e1       	ldi	r19, 0x11	; 17
    1974:	fc 01       	movw	r30, r24
    1976:	30 83       	st	Z, r19
    1978:	31 97       	sbiw	r30, 0x01	; 1
    197a:	22 e2       	ldi	r18, 0x22	; 34
    197c:	20 83       	st	Z, r18
    197e:	31 97       	sbiw	r30, 0x01	; 1
    1980:	a3 e3       	ldi	r26, 0x33	; 51
    1982:	a0 83       	st	Z, r26
    1984:	31 97       	sbiw	r30, 0x01	; 1
    1986:	60 83       	st	Z, r22
    1988:	31 97       	sbiw	r30, 0x01	; 1
    198a:	70 83       	st	Z, r23
    198c:	31 97       	sbiw	r30, 0x01	; 1
    198e:	10 82       	st	Z, r1
    1990:	31 97       	sbiw	r30, 0x01	; 1
    1992:	10 82       	st	Z, r1
    1994:	31 97       	sbiw	r30, 0x01	; 1
    1996:	60 e8       	ldi	r22, 0x80	; 128
    1998:	60 83       	st	Z, r22
    199a:	31 97       	sbiw	r30, 0x01	; 1
    199c:	10 82       	st	Z, r1
    199e:	31 97       	sbiw	r30, 0x01	; 1
    19a0:	10 82       	st	Z, r1
    19a2:	31 97       	sbiw	r30, 0x01	; 1
    19a4:	10 82       	st	Z, r1
    19a6:	31 97       	sbiw	r30, 0x01	; 1
    19a8:	62 e0       	ldi	r22, 0x02	; 2
    19aa:	60 83       	st	Z, r22
    19ac:	31 97       	sbiw	r30, 0x01	; 1
    19ae:	63 e0       	ldi	r22, 0x03	; 3
    19b0:	60 83       	st	Z, r22
    19b2:	31 97       	sbiw	r30, 0x01	; 1
    19b4:	64 e0       	ldi	r22, 0x04	; 4
    19b6:	60 83       	st	Z, r22
    19b8:	31 97       	sbiw	r30, 0x01	; 1
    19ba:	65 e0       	ldi	r22, 0x05	; 5
    19bc:	60 83       	st	Z, r22
    19be:	31 97       	sbiw	r30, 0x01	; 1
    19c0:	66 e0       	ldi	r22, 0x06	; 6
    19c2:	60 83       	st	Z, r22
    19c4:	31 97       	sbiw	r30, 0x01	; 1
    19c6:	67 e0       	ldi	r22, 0x07	; 7
    19c8:	60 83       	st	Z, r22
    19ca:	31 97       	sbiw	r30, 0x01	; 1
    19cc:	68 e0       	ldi	r22, 0x08	; 8
    19ce:	60 83       	st	Z, r22
    19d0:	31 97       	sbiw	r30, 0x01	; 1
    19d2:	69 e0       	ldi	r22, 0x09	; 9
    19d4:	60 83       	st	Z, r22
    19d6:	31 97       	sbiw	r30, 0x01	; 1
    19d8:	60 e1       	ldi	r22, 0x10	; 16
    19da:	60 83       	st	Z, r22
    19dc:	31 97       	sbiw	r30, 0x01	; 1
    19de:	30 83       	st	Z, r19
    19e0:	31 97       	sbiw	r30, 0x01	; 1
    19e2:	32 e1       	ldi	r19, 0x12	; 18
    19e4:	30 83       	st	Z, r19
    19e6:	31 97       	sbiw	r30, 0x01	; 1
    19e8:	33 e1       	ldi	r19, 0x13	; 19
    19ea:	30 83       	st	Z, r19
    19ec:	31 97       	sbiw	r30, 0x01	; 1
    19ee:	34 e1       	ldi	r19, 0x14	; 20
    19f0:	30 83       	st	Z, r19
    19f2:	31 97       	sbiw	r30, 0x01	; 1
    19f4:	35 e1       	ldi	r19, 0x15	; 21
    19f6:	30 83       	st	Z, r19
    19f8:	31 97       	sbiw	r30, 0x01	; 1
    19fa:	36 e1       	ldi	r19, 0x16	; 22
    19fc:	30 83       	st	Z, r19
    19fe:	31 97       	sbiw	r30, 0x01	; 1
    1a00:	37 e1       	ldi	r19, 0x17	; 23
    1a02:	30 83       	st	Z, r19
    1a04:	31 97       	sbiw	r30, 0x01	; 1
    1a06:	38 e1       	ldi	r19, 0x18	; 24
    1a08:	30 83       	st	Z, r19
    1a0a:	31 97       	sbiw	r30, 0x01	; 1
    1a0c:	39 e1       	ldi	r19, 0x19	; 25
    1a0e:	30 83       	st	Z, r19
    1a10:	31 97       	sbiw	r30, 0x01	; 1
    1a12:	30 e2       	ldi	r19, 0x20	; 32
    1a14:	30 83       	st	Z, r19
    1a16:	31 97       	sbiw	r30, 0x01	; 1
    1a18:	31 e2       	ldi	r19, 0x21	; 33
    1a1a:	30 83       	st	Z, r19
    1a1c:	31 97       	sbiw	r30, 0x01	; 1
    1a1e:	20 83       	st	Z, r18
    1a20:	31 97       	sbiw	r30, 0x01	; 1
    1a22:	23 e2       	ldi	r18, 0x23	; 35
    1a24:	20 83       	st	Z, r18
    1a26:	31 97       	sbiw	r30, 0x01	; 1
    1a28:	40 83       	st	Z, r20
    1a2a:	31 97       	sbiw	r30, 0x01	; 1
    1a2c:	50 83       	st	Z, r21
    1a2e:	31 97       	sbiw	r30, 0x01	; 1
    1a30:	26 e2       	ldi	r18, 0x26	; 38
    1a32:	20 83       	st	Z, r18
    1a34:	31 97       	sbiw	r30, 0x01	; 1
    1a36:	27 e2       	ldi	r18, 0x27	; 39
    1a38:	20 83       	st	Z, r18
    1a3a:	31 97       	sbiw	r30, 0x01	; 1
    1a3c:	28 e2       	ldi	r18, 0x28	; 40
    1a3e:	20 83       	st	Z, r18
    1a40:	31 97       	sbiw	r30, 0x01	; 1
    1a42:	29 e2       	ldi	r18, 0x29	; 41
    1a44:	20 83       	st	Z, r18
    1a46:	31 97       	sbiw	r30, 0x01	; 1
    1a48:	20 e3       	ldi	r18, 0x30	; 48
    1a4a:	20 83       	st	Z, r18
    1a4c:	31 97       	sbiw	r30, 0x01	; 1
    1a4e:	21 e3       	ldi	r18, 0x31	; 49
    1a50:	20 83       	st	Z, r18
    1a52:	89 97       	sbiw	r24, 0x29	; 41
    1a54:	08 95       	ret

00001a56 <xPortStartScheduler>:
    1a56:	a8 95       	wdr
    1a58:	90 ec       	ldi	r25, 0xC0	; 192
    1a5a:	88 e1       	ldi	r24, 0x18	; 24
    1a5c:	0f b6       	in	r0, 0x3f	; 63
    1a5e:	f8 94       	cli
    1a60:	a8 95       	wdr
    1a62:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
    1a66:	0f be       	out	0x3f, r0	; 63
    1a68:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
    1a6c:	a0 91 96 09 	lds	r26, 0x0996	; 0x800996 <pxCurrentTCB>
    1a70:	b0 91 97 09 	lds	r27, 0x0997	; 0x800997 <pxCurrentTCB+0x1>
    1a74:	cd 91       	ld	r28, X+
    1a76:	cd bf       	out	0x3d, r28	; 61
    1a78:	dd 91       	ld	r29, X+
    1a7a:	de bf       	out	0x3e, r29	; 62
    1a7c:	ff 91       	pop	r31
    1a7e:	ef 91       	pop	r30
    1a80:	df 91       	pop	r29
    1a82:	cf 91       	pop	r28
    1a84:	bf 91       	pop	r27
    1a86:	af 91       	pop	r26
    1a88:	9f 91       	pop	r25
    1a8a:	8f 91       	pop	r24
    1a8c:	7f 91       	pop	r23
    1a8e:	6f 91       	pop	r22
    1a90:	5f 91       	pop	r21
    1a92:	4f 91       	pop	r20
    1a94:	3f 91       	pop	r19
    1a96:	2f 91       	pop	r18
    1a98:	1f 91       	pop	r17
    1a9a:	0f 91       	pop	r16
    1a9c:	ff 90       	pop	r15
    1a9e:	ef 90       	pop	r14
    1aa0:	df 90       	pop	r13
    1aa2:	cf 90       	pop	r12
    1aa4:	bf 90       	pop	r11
    1aa6:	af 90       	pop	r10
    1aa8:	9f 90       	pop	r9
    1aaa:	8f 90       	pop	r8
    1aac:	7f 90       	pop	r7
    1aae:	6f 90       	pop	r6
    1ab0:	5f 90       	pop	r5
    1ab2:	4f 90       	pop	r4
    1ab4:	3f 90       	pop	r3
    1ab6:	2f 90       	pop	r2
    1ab8:	1f 90       	pop	r1
    1aba:	0f 90       	pop	r0
    1abc:	0c be       	out	0x3c, r0	; 60
    1abe:	0f 90       	pop	r0
    1ac0:	0b be       	out	0x3b, r0	; 59
    1ac2:	0f 90       	pop	r0
    1ac4:	0f be       	out	0x3f, r0	; 63
    1ac6:	0f 90       	pop	r0
    1ac8:	08 95       	ret
    1aca:	81 e0       	ldi	r24, 0x01	; 1
    1acc:	08 95       	ret

00001ace <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    1ace:	0f 92       	push	r0
    1ad0:	0f b6       	in	r0, 0x3f	; 63
    1ad2:	f8 94       	cli
    1ad4:	0f 92       	push	r0
    1ad6:	0b b6       	in	r0, 0x3b	; 59
    1ad8:	0f 92       	push	r0
    1ada:	0c b6       	in	r0, 0x3c	; 60
    1adc:	0f 92       	push	r0
    1ade:	1f 92       	push	r1
    1ae0:	11 24       	eor	r1, r1
    1ae2:	2f 92       	push	r2
    1ae4:	3f 92       	push	r3
    1ae6:	4f 92       	push	r4
    1ae8:	5f 92       	push	r5
    1aea:	6f 92       	push	r6
    1aec:	7f 92       	push	r7
    1aee:	8f 92       	push	r8
    1af0:	9f 92       	push	r9
    1af2:	af 92       	push	r10
    1af4:	bf 92       	push	r11
    1af6:	cf 92       	push	r12
    1af8:	df 92       	push	r13
    1afa:	ef 92       	push	r14
    1afc:	ff 92       	push	r15
    1afe:	0f 93       	push	r16
    1b00:	1f 93       	push	r17
    1b02:	2f 93       	push	r18
    1b04:	3f 93       	push	r19
    1b06:	4f 93       	push	r20
    1b08:	5f 93       	push	r21
    1b0a:	6f 93       	push	r22
    1b0c:	7f 93       	push	r23
    1b0e:	8f 93       	push	r24
    1b10:	9f 93       	push	r25
    1b12:	af 93       	push	r26
    1b14:	bf 93       	push	r27
    1b16:	cf 93       	push	r28
    1b18:	df 93       	push	r29
    1b1a:	ef 93       	push	r30
    1b1c:	ff 93       	push	r31
    1b1e:	a0 91 96 09 	lds	r26, 0x0996	; 0x800996 <pxCurrentTCB>
    1b22:	b0 91 97 09 	lds	r27, 0x0997	; 0x800997 <pxCurrentTCB+0x1>
    1b26:	0d b6       	in	r0, 0x3d	; 61
    1b28:	0d 92       	st	X+, r0
    1b2a:	0e b6       	in	r0, 0x3e	; 62
    1b2c:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    1b2e:	0e 94 2f 16 	call	0x2c5e	; 0x2c5e <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    1b32:	a0 91 96 09 	lds	r26, 0x0996	; 0x800996 <pxCurrentTCB>
    1b36:	b0 91 97 09 	lds	r27, 0x0997	; 0x800997 <pxCurrentTCB+0x1>
    1b3a:	cd 91       	ld	r28, X+
    1b3c:	cd bf       	out	0x3d, r28	; 61
    1b3e:	dd 91       	ld	r29, X+
    1b40:	de bf       	out	0x3e, r29	; 62
    1b42:	ff 91       	pop	r31
    1b44:	ef 91       	pop	r30
    1b46:	df 91       	pop	r29
    1b48:	cf 91       	pop	r28
    1b4a:	bf 91       	pop	r27
    1b4c:	af 91       	pop	r26
    1b4e:	9f 91       	pop	r25
    1b50:	8f 91       	pop	r24
    1b52:	7f 91       	pop	r23
    1b54:	6f 91       	pop	r22
    1b56:	5f 91       	pop	r21
    1b58:	4f 91       	pop	r20
    1b5a:	3f 91       	pop	r19
    1b5c:	2f 91       	pop	r18
    1b5e:	1f 91       	pop	r17
    1b60:	0f 91       	pop	r16
    1b62:	ff 90       	pop	r15
    1b64:	ef 90       	pop	r14
    1b66:	df 90       	pop	r13
    1b68:	cf 90       	pop	r12
    1b6a:	bf 90       	pop	r11
    1b6c:	af 90       	pop	r10
    1b6e:	9f 90       	pop	r9
    1b70:	8f 90       	pop	r8
    1b72:	7f 90       	pop	r7
    1b74:	6f 90       	pop	r6
    1b76:	5f 90       	pop	r5
    1b78:	4f 90       	pop	r4
    1b7a:	3f 90       	pop	r3
    1b7c:	2f 90       	pop	r2
    1b7e:	1f 90       	pop	r1
    1b80:	0f 90       	pop	r0
    1b82:	0c be       	out	0x3c, r0	; 60
    1b84:	0f 90       	pop	r0
    1b86:	0b be       	out	0x3b, r0	; 59
    1b88:	0f 90       	pop	r0
    1b8a:	0f be       	out	0x3f, r0	; 63
    1b8c:	0f 90       	pop	r0

	__asm__ __volatile__ ( "ret" );
    1b8e:	08 95       	ret

00001b90 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    1b90:	0f 92       	push	r0
    1b92:	0f b6       	in	r0, 0x3f	; 63
    1b94:	f8 94       	cli
    1b96:	0f 92       	push	r0
    1b98:	0b b6       	in	r0, 0x3b	; 59
    1b9a:	0f 92       	push	r0
    1b9c:	0c b6       	in	r0, 0x3c	; 60
    1b9e:	0f 92       	push	r0
    1ba0:	1f 92       	push	r1
    1ba2:	11 24       	eor	r1, r1
    1ba4:	2f 92       	push	r2
    1ba6:	3f 92       	push	r3
    1ba8:	4f 92       	push	r4
    1baa:	5f 92       	push	r5
    1bac:	6f 92       	push	r6
    1bae:	7f 92       	push	r7
    1bb0:	8f 92       	push	r8
    1bb2:	9f 92       	push	r9
    1bb4:	af 92       	push	r10
    1bb6:	bf 92       	push	r11
    1bb8:	cf 92       	push	r12
    1bba:	df 92       	push	r13
    1bbc:	ef 92       	push	r14
    1bbe:	ff 92       	push	r15
    1bc0:	0f 93       	push	r16
    1bc2:	1f 93       	push	r17
    1bc4:	2f 93       	push	r18
    1bc6:	3f 93       	push	r19
    1bc8:	4f 93       	push	r20
    1bca:	5f 93       	push	r21
    1bcc:	6f 93       	push	r22
    1bce:	7f 93       	push	r23
    1bd0:	8f 93       	push	r24
    1bd2:	9f 93       	push	r25
    1bd4:	af 93       	push	r26
    1bd6:	bf 93       	push	r27
    1bd8:	cf 93       	push	r28
    1bda:	df 93       	push	r29
    1bdc:	ef 93       	push	r30
    1bde:	ff 93       	push	r31
    1be0:	a0 91 96 09 	lds	r26, 0x0996	; 0x800996 <pxCurrentTCB>
    1be4:	b0 91 97 09 	lds	r27, 0x0997	; 0x800997 <pxCurrentTCB+0x1>
    1be8:	0d b6       	in	r0, 0x3d	; 61
    1bea:	0d 92       	st	X+, r0
    1bec:	0e b6       	in	r0, 0x3e	; 62
    1bee:	0d 92       	st	X+, r0

	sleep_reset();		//	 reset the sleep_mode() faster than sleep_disable();
    1bf0:	13 be       	out	0x33, r1	; 51

	if( xTaskIncrementTick() != pdFALSE )
    1bf2:	ed d6       	rcall	.+3546   	; 0x29ce <xTaskIncrementTick>
    1bf4:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
    1bf6:	0e 94 2f 16 	call	0x2c5e	; 0x2c5e <vTaskSwitchContext>
	}

	portRESTORE_CONTEXT();
    1bfa:	a0 91 96 09 	lds	r26, 0x0996	; 0x800996 <pxCurrentTCB>
    1bfe:	b0 91 97 09 	lds	r27, 0x0997	; 0x800997 <pxCurrentTCB+0x1>
    1c02:	cd 91       	ld	r28, X+
    1c04:	cd bf       	out	0x3d, r28	; 61
    1c06:	dd 91       	ld	r29, X+
    1c08:	de bf       	out	0x3e, r29	; 62
    1c0a:	ff 91       	pop	r31
    1c0c:	ef 91       	pop	r30
    1c0e:	df 91       	pop	r29
    1c10:	cf 91       	pop	r28
    1c12:	bf 91       	pop	r27
    1c14:	af 91       	pop	r26
    1c16:	9f 91       	pop	r25
    1c18:	8f 91       	pop	r24
    1c1a:	7f 91       	pop	r23
    1c1c:	6f 91       	pop	r22
    1c1e:	5f 91       	pop	r21
    1c20:	4f 91       	pop	r20
    1c22:	3f 91       	pop	r19
    1c24:	2f 91       	pop	r18
    1c26:	1f 91       	pop	r17
    1c28:	0f 91       	pop	r16
    1c2a:	ff 90       	pop	r15
    1c2c:	ef 90       	pop	r14
    1c2e:	df 90       	pop	r13
    1c30:	cf 90       	pop	r12
    1c32:	bf 90       	pop	r11
    1c34:	af 90       	pop	r10
    1c36:	9f 90       	pop	r9
    1c38:	8f 90       	pop	r8
    1c3a:	7f 90       	pop	r7
    1c3c:	6f 90       	pop	r6
    1c3e:	5f 90       	pop	r5
    1c40:	4f 90       	pop	r4
    1c42:	3f 90       	pop	r3
    1c44:	2f 90       	pop	r2
    1c46:	1f 90       	pop	r1
    1c48:	0f 90       	pop	r0
    1c4a:	0c be       	out	0x3c, r0	; 60
    1c4c:	0f 90       	pop	r0
    1c4e:	0b be       	out	0x3b, r0	; 59
    1c50:	0f 90       	pop	r0
    1c52:	0f be       	out	0x3f, r0	; 63
    1c54:	0f 90       	pop	r0

	__asm__ __volatile__ ( "ret" );
    1c56:	08 95       	ret

00001c58 <__vector_12>:
	 */
//	ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
	ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
	ISR(portSCHEDULER_ISR)
	{
		vPortYieldFromTick();
    1c58:	9b df       	rcall	.-202    	; 0x1b90 <vPortYieldFromTick>
		__asm__ __volatile__ ( "reti" );
    1c5a:	18 95       	reti

00001c5c <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    1c5c:	0f b6       	in	r0, 0x3f	; 63
    1c5e:	f8 94       	cli
    1c60:	0f 92       	push	r0
    1c62:	fc 01       	movw	r30, r24
    1c64:	92 8d       	ldd	r25, Z+26	; 0x1a
    1c66:	0f 90       	pop	r0
    1c68:	0f be       	out	0x3f, r0	; 63
    1c6a:	81 e0       	ldi	r24, 0x01	; 1
    1c6c:	91 11       	cpse	r25, r1
    1c6e:	80 e0       	ldi	r24, 0x00	; 0
    1c70:	08 95       	ret

00001c72 <prvCopyDataToQueue>:
    1c72:	0f 93       	push	r16
    1c74:	1f 93       	push	r17
    1c76:	cf 93       	push	r28
    1c78:	df 93       	push	r29
    1c7a:	ec 01       	movw	r28, r24
    1c7c:	04 2f       	mov	r16, r20
    1c7e:	1a 8d       	ldd	r17, Y+26	; 0x1a
    1c80:	4c 8d       	ldd	r20, Y+28	; 0x1c
    1c82:	41 11       	cpse	r20, r1
    1c84:	0c c0       	rjmp	.+24     	; 0x1c9e <prvCopyDataToQueue+0x2c>
    1c86:	88 81       	ld	r24, Y
    1c88:	99 81       	ldd	r25, Y+1	; 0x01
    1c8a:	89 2b       	or	r24, r25
    1c8c:	09 f0       	breq	.+2      	; 0x1c90 <prvCopyDataToQueue+0x1e>
    1c8e:	42 c0       	rjmp	.+132    	; 0x1d14 <prvCopyDataToQueue+0xa2>
    1c90:	8c 81       	ldd	r24, Y+4	; 0x04
    1c92:	9d 81       	ldd	r25, Y+5	; 0x05
    1c94:	0e 94 88 17 	call	0x2f10	; 0x2f10 <xTaskPriorityDisinherit>
    1c98:	1d 82       	std	Y+5, r1	; 0x05
    1c9a:	1c 82       	std	Y+4, r1	; 0x04
    1c9c:	42 c0       	rjmp	.+132    	; 0x1d22 <prvCopyDataToQueue+0xb0>
    1c9e:	01 11       	cpse	r16, r1
    1ca0:	17 c0       	rjmp	.+46     	; 0x1cd0 <prvCopyDataToQueue+0x5e>
    1ca2:	50 e0       	ldi	r21, 0x00	; 0
    1ca4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca6:	9b 81       	ldd	r25, Y+3	; 0x03
    1ca8:	0e 94 76 1b 	call	0x36ec	; 0x36ec <memcpy>
    1cac:	2c 8d       	ldd	r18, Y+28	; 0x1c
    1cae:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb0:	9b 81       	ldd	r25, Y+3	; 0x03
    1cb2:	82 0f       	add	r24, r18
    1cb4:	91 1d       	adc	r25, r1
    1cb6:	9b 83       	std	Y+3, r25	; 0x03
    1cb8:	8a 83       	std	Y+2, r24	; 0x02
    1cba:	2c 81       	ldd	r18, Y+4	; 0x04
    1cbc:	3d 81       	ldd	r19, Y+5	; 0x05
    1cbe:	82 17       	cp	r24, r18
    1cc0:	93 07       	cpc	r25, r19
    1cc2:	50 f1       	brcs	.+84     	; 0x1d18 <prvCopyDataToQueue+0xa6>
    1cc4:	88 81       	ld	r24, Y
    1cc6:	99 81       	ldd	r25, Y+1	; 0x01
    1cc8:	9b 83       	std	Y+3, r25	; 0x03
    1cca:	8a 83       	std	Y+2, r24	; 0x02
    1ccc:	80 e0       	ldi	r24, 0x00	; 0
    1cce:	29 c0       	rjmp	.+82     	; 0x1d22 <prvCopyDataToQueue+0xb0>
    1cd0:	50 e0       	ldi	r21, 0x00	; 0
    1cd2:	8e 81       	ldd	r24, Y+6	; 0x06
    1cd4:	9f 81       	ldd	r25, Y+7	; 0x07
    1cd6:	0e 94 76 1b 	call	0x36ec	; 0x36ec <memcpy>
    1cda:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1cdc:	90 e0       	ldi	r25, 0x00	; 0
    1cde:	91 95       	neg	r25
    1ce0:	81 95       	neg	r24
    1ce2:	91 09       	sbc	r25, r1
    1ce4:	2e 81       	ldd	r18, Y+6	; 0x06
    1ce6:	3f 81       	ldd	r19, Y+7	; 0x07
    1ce8:	28 0f       	add	r18, r24
    1cea:	39 1f       	adc	r19, r25
    1cec:	3f 83       	std	Y+7, r19	; 0x07
    1cee:	2e 83       	std	Y+6, r18	; 0x06
    1cf0:	48 81       	ld	r20, Y
    1cf2:	59 81       	ldd	r21, Y+1	; 0x01
    1cf4:	24 17       	cp	r18, r20
    1cf6:	35 07       	cpc	r19, r21
    1cf8:	30 f4       	brcc	.+12     	; 0x1d06 <prvCopyDataToQueue+0x94>
    1cfa:	2c 81       	ldd	r18, Y+4	; 0x04
    1cfc:	3d 81       	ldd	r19, Y+5	; 0x05
    1cfe:	82 0f       	add	r24, r18
    1d00:	93 1f       	adc	r25, r19
    1d02:	9f 83       	std	Y+7, r25	; 0x07
    1d04:	8e 83       	std	Y+6, r24	; 0x06
    1d06:	02 30       	cpi	r16, 0x02	; 2
    1d08:	49 f4       	brne	.+18     	; 0x1d1c <prvCopyDataToQueue+0xaa>
    1d0a:	11 23       	and	r17, r17
    1d0c:	49 f0       	breq	.+18     	; 0x1d20 <prvCopyDataToQueue+0xae>
    1d0e:	11 50       	subi	r17, 0x01	; 1
    1d10:	80 e0       	ldi	r24, 0x00	; 0
    1d12:	07 c0       	rjmp	.+14     	; 0x1d22 <prvCopyDataToQueue+0xb0>
    1d14:	80 e0       	ldi	r24, 0x00	; 0
    1d16:	05 c0       	rjmp	.+10     	; 0x1d22 <prvCopyDataToQueue+0xb0>
    1d18:	80 e0       	ldi	r24, 0x00	; 0
    1d1a:	03 c0       	rjmp	.+6      	; 0x1d22 <prvCopyDataToQueue+0xb0>
    1d1c:	80 e0       	ldi	r24, 0x00	; 0
    1d1e:	01 c0       	rjmp	.+2      	; 0x1d22 <prvCopyDataToQueue+0xb0>
    1d20:	80 e0       	ldi	r24, 0x00	; 0
    1d22:	1f 5f       	subi	r17, 0xFF	; 255
    1d24:	1a 8f       	std	Y+26, r17	; 0x1a
    1d26:	df 91       	pop	r29
    1d28:	cf 91       	pop	r28
    1d2a:	1f 91       	pop	r17
    1d2c:	0f 91       	pop	r16
    1d2e:	08 95       	ret

00001d30 <prvCopyDataFromQueue>:
    1d30:	fc 01       	movw	r30, r24
    1d32:	44 8d       	ldd	r20, Z+28	; 0x1c
    1d34:	44 23       	and	r20, r20
    1d36:	a9 f0       	breq	.+42     	; 0x1d62 <prvCopyDataFromQueue+0x32>
    1d38:	50 e0       	ldi	r21, 0x00	; 0
    1d3a:	26 81       	ldd	r18, Z+6	; 0x06
    1d3c:	37 81       	ldd	r19, Z+7	; 0x07
    1d3e:	24 0f       	add	r18, r20
    1d40:	35 1f       	adc	r19, r21
    1d42:	37 83       	std	Z+7, r19	; 0x07
    1d44:	26 83       	std	Z+6, r18	; 0x06
    1d46:	84 81       	ldd	r24, Z+4	; 0x04
    1d48:	95 81       	ldd	r25, Z+5	; 0x05
    1d4a:	28 17       	cp	r18, r24
    1d4c:	39 07       	cpc	r19, r25
    1d4e:	20 f0       	brcs	.+8      	; 0x1d58 <prvCopyDataFromQueue+0x28>
    1d50:	80 81       	ld	r24, Z
    1d52:	91 81       	ldd	r25, Z+1	; 0x01
    1d54:	97 83       	std	Z+7, r25	; 0x07
    1d56:	86 83       	std	Z+6, r24	; 0x06
    1d58:	cb 01       	movw	r24, r22
    1d5a:	66 81       	ldd	r22, Z+6	; 0x06
    1d5c:	77 81       	ldd	r23, Z+7	; 0x07
    1d5e:	0c 94 76 1b 	jmp	0x36ec	; 0x36ec <memcpy>
    1d62:	08 95       	ret

00001d64 <prvUnlockQueue>:
    1d64:	ef 92       	push	r14
    1d66:	ff 92       	push	r15
    1d68:	0f 93       	push	r16
    1d6a:	1f 93       	push	r17
    1d6c:	cf 93       	push	r28
    1d6e:	8c 01       	movw	r16, r24
    1d70:	0f b6       	in	r0, 0x3f	; 63
    1d72:	f8 94       	cli
    1d74:	0f 92       	push	r0
    1d76:	fc 01       	movw	r30, r24
    1d78:	c6 8d       	ldd	r28, Z+30	; 0x1e
    1d7a:	1c 16       	cp	r1, r28
    1d7c:	ac f4       	brge	.+42     	; 0x1da8 <prvUnlockQueue+0x44>
    1d7e:	81 89       	ldd	r24, Z+17	; 0x11
    1d80:	81 11       	cpse	r24, r1
    1d82:	06 c0       	rjmp	.+12     	; 0x1d90 <prvUnlockQueue+0x2c>
    1d84:	11 c0       	rjmp	.+34     	; 0x1da8 <prvUnlockQueue+0x44>
    1d86:	f8 01       	movw	r30, r16
    1d88:	81 89       	ldd	r24, Z+17	; 0x11
    1d8a:	81 11       	cpse	r24, r1
    1d8c:	05 c0       	rjmp	.+10     	; 0x1d98 <prvUnlockQueue+0x34>
    1d8e:	0c c0       	rjmp	.+24     	; 0x1da8 <prvUnlockQueue+0x44>
    1d90:	78 01       	movw	r14, r16
    1d92:	f1 e1       	ldi	r31, 0x11	; 17
    1d94:	ef 0e       	add	r14, r31
    1d96:	f1 1c       	adc	r15, r1
    1d98:	c7 01       	movw	r24, r14
    1d9a:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <xTaskRemoveFromEventList>
    1d9e:	81 11       	cpse	r24, r1
    1da0:	0e 94 71 17 	call	0x2ee2	; 0x2ee2 <vTaskMissedYield>
    1da4:	c1 50       	subi	r28, 0x01	; 1
    1da6:	79 f7       	brne	.-34     	; 0x1d86 <prvUnlockQueue+0x22>
    1da8:	8f ef       	ldi	r24, 0xFF	; 255
    1daa:	f8 01       	movw	r30, r16
    1dac:	86 8f       	std	Z+30, r24	; 0x1e
    1dae:	0f 90       	pop	r0
    1db0:	0f be       	out	0x3f, r0	; 63
    1db2:	0f b6       	in	r0, 0x3f	; 63
    1db4:	f8 94       	cli
    1db6:	0f 92       	push	r0
    1db8:	c5 8d       	ldd	r28, Z+29	; 0x1d
    1dba:	1c 16       	cp	r1, r28
    1dbc:	a4 f4       	brge	.+40     	; 0x1de6 <prvUnlockQueue+0x82>
    1dbe:	80 85       	ldd	r24, Z+8	; 0x08
    1dc0:	81 11       	cpse	r24, r1
    1dc2:	06 c0       	rjmp	.+12     	; 0x1dd0 <prvUnlockQueue+0x6c>
    1dc4:	10 c0       	rjmp	.+32     	; 0x1de6 <prvUnlockQueue+0x82>
    1dc6:	f8 01       	movw	r30, r16
    1dc8:	80 85       	ldd	r24, Z+8	; 0x08
    1dca:	81 11       	cpse	r24, r1
    1dcc:	05 c0       	rjmp	.+10     	; 0x1dd8 <prvUnlockQueue+0x74>
    1dce:	0b c0       	rjmp	.+22     	; 0x1de6 <prvUnlockQueue+0x82>
    1dd0:	78 01       	movw	r14, r16
    1dd2:	f8 e0       	ldi	r31, 0x08	; 8
    1dd4:	ef 0e       	add	r14, r31
    1dd6:	f1 1c       	adc	r15, r1
    1dd8:	c7 01       	movw	r24, r14
    1dda:	eb d7       	rcall	.+4054   	; 0x2db2 <xTaskRemoveFromEventList>
    1ddc:	81 11       	cpse	r24, r1
    1dde:	0e 94 71 17 	call	0x2ee2	; 0x2ee2 <vTaskMissedYield>
    1de2:	c1 50       	subi	r28, 0x01	; 1
    1de4:	81 f7       	brne	.-32     	; 0x1dc6 <prvUnlockQueue+0x62>
    1de6:	8f ef       	ldi	r24, 0xFF	; 255
    1de8:	f8 01       	movw	r30, r16
    1dea:	85 8f       	std	Z+29, r24	; 0x1d
    1dec:	0f 90       	pop	r0
    1dee:	0f be       	out	0x3f, r0	; 63
    1df0:	cf 91       	pop	r28
    1df2:	1f 91       	pop	r17
    1df4:	0f 91       	pop	r16
    1df6:	ff 90       	pop	r15
    1df8:	ef 90       	pop	r14
    1dfa:	08 95       	ret

00001dfc <xQueueGenericReset>:
    1dfc:	cf 93       	push	r28
    1dfe:	df 93       	push	r29
    1e00:	ec 01       	movw	r28, r24
    1e02:	0f b6       	in	r0, 0x3f	; 63
    1e04:	f8 94       	cli
    1e06:	0f 92       	push	r0
    1e08:	e8 81       	ld	r30, Y
    1e0a:	f9 81       	ldd	r31, Y+1	; 0x01
    1e0c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e0e:	2c 8d       	ldd	r18, Y+28	; 0x1c
    1e10:	90 e0       	ldi	r25, 0x00	; 0
    1e12:	30 e0       	ldi	r19, 0x00	; 0
    1e14:	82 9f       	mul	r24, r18
    1e16:	a0 01       	movw	r20, r0
    1e18:	83 9f       	mul	r24, r19
    1e1a:	50 0d       	add	r21, r0
    1e1c:	92 9f       	mul	r25, r18
    1e1e:	50 0d       	add	r21, r0
    1e20:	11 24       	eor	r1, r1
    1e22:	4e 0f       	add	r20, r30
    1e24:	5f 1f       	adc	r21, r31
    1e26:	5d 83       	std	Y+5, r21	; 0x05
    1e28:	4c 83       	std	Y+4, r20	; 0x04
    1e2a:	1a 8e       	std	Y+26, r1	; 0x1a
    1e2c:	fb 83       	std	Y+3, r31	; 0x03
    1e2e:	ea 83       	std	Y+2, r30	; 0x02
    1e30:	01 97       	sbiw	r24, 0x01	; 1
    1e32:	82 9f       	mul	r24, r18
    1e34:	a0 01       	movw	r20, r0
    1e36:	83 9f       	mul	r24, r19
    1e38:	50 0d       	add	r21, r0
    1e3a:	92 9f       	mul	r25, r18
    1e3c:	50 0d       	add	r21, r0
    1e3e:	11 24       	eor	r1, r1
    1e40:	cf 01       	movw	r24, r30
    1e42:	84 0f       	add	r24, r20
    1e44:	95 1f       	adc	r25, r21
    1e46:	9f 83       	std	Y+7, r25	; 0x07
    1e48:	8e 83       	std	Y+6, r24	; 0x06
    1e4a:	8f ef       	ldi	r24, 0xFF	; 255
    1e4c:	8d 8f       	std	Y+29, r24	; 0x1d
    1e4e:	8e 8f       	std	Y+30, r24	; 0x1e
    1e50:	61 11       	cpse	r22, r1
    1e52:	0a c0       	rjmp	.+20     	; 0x1e68 <xQueueGenericReset+0x6c>
    1e54:	88 85       	ldd	r24, Y+8	; 0x08
    1e56:	88 23       	and	r24, r24
    1e58:	69 f0       	breq	.+26     	; 0x1e74 <xQueueGenericReset+0x78>
    1e5a:	ce 01       	movw	r24, r28
    1e5c:	08 96       	adiw	r24, 0x08	; 8
    1e5e:	a9 d7       	rcall	.+3922   	; 0x2db2 <xTaskRemoveFromEventList>
    1e60:	88 23       	and	r24, r24
    1e62:	41 f0       	breq	.+16     	; 0x1e74 <xQueueGenericReset+0x78>
    1e64:	34 de       	rcall	.-920    	; 0x1ace <vPortYield>
    1e66:	06 c0       	rjmp	.+12     	; 0x1e74 <xQueueGenericReset+0x78>
    1e68:	ce 01       	movw	r24, r28
    1e6a:	08 96       	adiw	r24, 0x08	; 8
    1e6c:	f7 dc       	rcall	.-1554   	; 0x185c <vListInitialise>
    1e6e:	ce 01       	movw	r24, r28
    1e70:	41 96       	adiw	r24, 0x11	; 17
    1e72:	f4 dc       	rcall	.-1560   	; 0x185c <vListInitialise>
    1e74:	0f 90       	pop	r0
    1e76:	0f be       	out	0x3f, r0	; 63
    1e78:	81 e0       	ldi	r24, 0x01	; 1
    1e7a:	df 91       	pop	r29
    1e7c:	cf 91       	pop	r28
    1e7e:	08 95       	ret

00001e80 <xQueueGenericCreateStatic>:
    1e80:	cf 93       	push	r28
    1e82:	df 93       	push	r29
    1e84:	e9 01       	movw	r28, r18
    1e86:	20 97       	sbiw	r28, 0x00	; 0
    1e88:	61 f0       	breq	.+24     	; 0x1ea2 <xQueueGenericCreateStatic+0x22>
    1e8a:	61 11       	cpse	r22, r1
    1e8c:	03 c0       	rjmp	.+6      	; 0x1e94 <xQueueGenericCreateStatic+0x14>
    1e8e:	39 83       	std	Y+1, r19	; 0x01
    1e90:	28 83       	st	Y, r18
    1e92:	02 c0       	rjmp	.+4      	; 0x1e98 <xQueueGenericCreateStatic+0x18>
    1e94:	59 83       	std	Y+1, r21	; 0x01
    1e96:	48 83       	st	Y, r20
    1e98:	8b 8f       	std	Y+27, r24	; 0x1b
    1e9a:	6c 8f       	std	Y+28, r22	; 0x1c
    1e9c:	61 e0       	ldi	r22, 0x01	; 1
    1e9e:	ce 01       	movw	r24, r28
    1ea0:	ad df       	rcall	.-166    	; 0x1dfc <xQueueGenericReset>
    1ea2:	ce 01       	movw	r24, r28
    1ea4:	df 91       	pop	r29
    1ea6:	cf 91       	pop	r28
    1ea8:	08 95       	ret

00001eaa <xQueueGenericSend>:
    1eaa:	9f 92       	push	r9
    1eac:	af 92       	push	r10
    1eae:	bf 92       	push	r11
    1eb0:	cf 92       	push	r12
    1eb2:	df 92       	push	r13
    1eb4:	ef 92       	push	r14
    1eb6:	ff 92       	push	r15
    1eb8:	0f 93       	push	r16
    1eba:	1f 93       	push	r17
    1ebc:	cf 93       	push	r28
    1ebe:	df 93       	push	r29
    1ec0:	00 d0       	rcall	.+0      	; 0x1ec2 <xQueueGenericSend+0x18>
    1ec2:	1f 92       	push	r1
    1ec4:	1f 92       	push	r1
    1ec6:	cd b7       	in	r28, 0x3d	; 61
    1ec8:	de b7       	in	r29, 0x3e	; 62
    1eca:	8c 01       	movw	r16, r24
    1ecc:	6b 01       	movw	r12, r22
    1ece:	5d 83       	std	Y+5, r21	; 0x05
    1ed0:	4c 83       	std	Y+4, r20	; 0x04
    1ed2:	a2 2e       	mov	r10, r18
    1ed4:	b1 2c       	mov	r11, r1
    1ed6:	99 24       	eor	r9, r9
    1ed8:	93 94       	inc	r9
    1eda:	7c 01       	movw	r14, r24
    1edc:	88 e0       	ldi	r24, 0x08	; 8
    1ede:	e8 0e       	add	r14, r24
    1ee0:	f1 1c       	adc	r15, r1
    1ee2:	0f b6       	in	r0, 0x3f	; 63
    1ee4:	f8 94       	cli
    1ee6:	0f 92       	push	r0
    1ee8:	f8 01       	movw	r30, r16
    1eea:	92 8d       	ldd	r25, Z+26	; 0x1a
    1eec:	83 8d       	ldd	r24, Z+27	; 0x1b
    1eee:	98 17       	cp	r25, r24
    1ef0:	18 f0       	brcs	.+6      	; 0x1ef8 <xQueueGenericSend+0x4e>
    1ef2:	f2 e0       	ldi	r31, 0x02	; 2
    1ef4:	af 12       	cpse	r10, r31
    1ef6:	15 c0       	rjmp	.+42     	; 0x1f22 <xQueueGenericSend+0x78>
    1ef8:	4a 2d       	mov	r20, r10
    1efa:	b6 01       	movw	r22, r12
    1efc:	c8 01       	movw	r24, r16
    1efe:	b9 de       	rcall	.-654    	; 0x1c72 <prvCopyDataToQueue>
    1f00:	f8 01       	movw	r30, r16
    1f02:	91 89       	ldd	r25, Z+17	; 0x11
    1f04:	99 23       	and	r25, r25
    1f06:	39 f0       	breq	.+14     	; 0x1f16 <xQueueGenericSend+0x6c>
    1f08:	c8 01       	movw	r24, r16
    1f0a:	41 96       	adiw	r24, 0x11	; 17
    1f0c:	52 d7       	rcall	.+3748   	; 0x2db2 <xTaskRemoveFromEventList>
    1f0e:	88 23       	and	r24, r24
    1f10:	21 f0       	breq	.+8      	; 0x1f1a <xQueueGenericSend+0x70>
    1f12:	dd dd       	rcall	.-1094   	; 0x1ace <vPortYield>
    1f14:	02 c0       	rjmp	.+4      	; 0x1f1a <xQueueGenericSend+0x70>
    1f16:	81 11       	cpse	r24, r1
    1f18:	da dd       	rcall	.-1100   	; 0x1ace <vPortYield>
    1f1a:	0f 90       	pop	r0
    1f1c:	0f be       	out	0x3f, r0	; 63
    1f1e:	81 e0       	ldi	r24, 0x01	; 1
    1f20:	45 c0       	rjmp	.+138    	; 0x1fac <xQueueGenericSend+0x102>
    1f22:	8c 81       	ldd	r24, Y+4	; 0x04
    1f24:	9d 81       	ldd	r25, Y+5	; 0x05
    1f26:	89 2b       	or	r24, r25
    1f28:	21 f4       	brne	.+8      	; 0x1f32 <xQueueGenericSend+0x88>
    1f2a:	0f 90       	pop	r0
    1f2c:	0f be       	out	0x3f, r0	; 63
    1f2e:	80 e0       	ldi	r24, 0x00	; 0
    1f30:	3d c0       	rjmp	.+122    	; 0x1fac <xQueueGenericSend+0x102>
    1f32:	b1 10       	cpse	r11, r1
    1f34:	04 c0       	rjmp	.+8      	; 0x1f3e <xQueueGenericSend+0x94>
    1f36:	ce 01       	movw	r24, r28
    1f38:	01 96       	adiw	r24, 0x01	; 1
    1f3a:	93 d7       	rcall	.+3878   	; 0x2e62 <vTaskInternalSetTimeOutState>
    1f3c:	b9 2c       	mov	r11, r9
    1f3e:	0f 90       	pop	r0
    1f40:	0f be       	out	0x3f, r0	; 63
    1f42:	35 d5       	rcall	.+2666   	; 0x29ae <vTaskSuspendAll>
    1f44:	0f b6       	in	r0, 0x3f	; 63
    1f46:	f8 94       	cli
    1f48:	0f 92       	push	r0
    1f4a:	f8 01       	movw	r30, r16
    1f4c:	85 8d       	ldd	r24, Z+29	; 0x1d
    1f4e:	8f 3f       	cpi	r24, 0xFF	; 255
    1f50:	09 f4       	brne	.+2      	; 0x1f54 <xQueueGenericSend+0xaa>
    1f52:	15 8e       	std	Z+29, r1	; 0x1d
    1f54:	f8 01       	movw	r30, r16
    1f56:	86 8d       	ldd	r24, Z+30	; 0x1e
    1f58:	8f 3f       	cpi	r24, 0xFF	; 255
    1f5a:	09 f4       	brne	.+2      	; 0x1f5e <xQueueGenericSend+0xb4>
    1f5c:	16 8e       	std	Z+30, r1	; 0x1e
    1f5e:	0f 90       	pop	r0
    1f60:	0f be       	out	0x3f, r0	; 63
    1f62:	be 01       	movw	r22, r28
    1f64:	6c 5f       	subi	r22, 0xFC	; 252
    1f66:	7f 4f       	sbci	r23, 0xFF	; 255
    1f68:	ce 01       	movw	r24, r28
    1f6a:	01 96       	adiw	r24, 0x01	; 1
    1f6c:	85 d7       	rcall	.+3850   	; 0x2e78 <xTaskCheckForTimeOut>
    1f6e:	81 11       	cpse	r24, r1
    1f70:	19 c0       	rjmp	.+50     	; 0x1fa4 <xQueueGenericSend+0xfa>
    1f72:	0f b6       	in	r0, 0x3f	; 63
    1f74:	f8 94       	cli
    1f76:	0f 92       	push	r0
    1f78:	f8 01       	movw	r30, r16
    1f7a:	92 8d       	ldd	r25, Z+26	; 0x1a
    1f7c:	83 8d       	ldd	r24, Z+27	; 0x1b
    1f7e:	0f 90       	pop	r0
    1f80:	0f be       	out	0x3f, r0	; 63
    1f82:	98 13       	cpse	r25, r24
    1f84:	0b c0       	rjmp	.+22     	; 0x1f9c <xQueueGenericSend+0xf2>
    1f86:	6c 81       	ldd	r22, Y+4	; 0x04
    1f88:	7d 81       	ldd	r23, Y+5	; 0x05
    1f8a:	c7 01       	movw	r24, r14
    1f8c:	e9 d6       	rcall	.+3538   	; 0x2d60 <vTaskPlaceOnEventList>
    1f8e:	c8 01       	movw	r24, r16
    1f90:	e9 de       	rcall	.-558    	; 0x1d64 <prvUnlockQueue>
    1f92:	d7 d5       	rcall	.+2990   	; 0x2b42 <xTaskResumeAll>
    1f94:	81 11       	cpse	r24, r1
    1f96:	a5 cf       	rjmp	.-182    	; 0x1ee2 <xQueueGenericSend+0x38>
    1f98:	9a dd       	rcall	.-1228   	; 0x1ace <vPortYield>
    1f9a:	a3 cf       	rjmp	.-186    	; 0x1ee2 <xQueueGenericSend+0x38>
    1f9c:	c8 01       	movw	r24, r16
    1f9e:	e2 de       	rcall	.-572    	; 0x1d64 <prvUnlockQueue>
    1fa0:	d0 d5       	rcall	.+2976   	; 0x2b42 <xTaskResumeAll>
    1fa2:	9f cf       	rjmp	.-194    	; 0x1ee2 <xQueueGenericSend+0x38>
    1fa4:	c8 01       	movw	r24, r16
    1fa6:	de de       	rcall	.-580    	; 0x1d64 <prvUnlockQueue>
    1fa8:	cc d5       	rcall	.+2968   	; 0x2b42 <xTaskResumeAll>
    1faa:	80 e0       	ldi	r24, 0x00	; 0
    1fac:	0f 90       	pop	r0
    1fae:	0f 90       	pop	r0
    1fb0:	0f 90       	pop	r0
    1fb2:	0f 90       	pop	r0
    1fb4:	0f 90       	pop	r0
    1fb6:	df 91       	pop	r29
    1fb8:	cf 91       	pop	r28
    1fba:	1f 91       	pop	r17
    1fbc:	0f 91       	pop	r16
    1fbe:	ff 90       	pop	r15
    1fc0:	ef 90       	pop	r14
    1fc2:	df 90       	pop	r13
    1fc4:	cf 90       	pop	r12
    1fc6:	bf 90       	pop	r11
    1fc8:	af 90       	pop	r10
    1fca:	9f 90       	pop	r9
    1fcc:	08 95       	ret

00001fce <xQueueGenericSendFromISR>:
    1fce:	ef 92       	push	r14
    1fd0:	ff 92       	push	r15
    1fd2:	0f 93       	push	r16
    1fd4:	1f 93       	push	r17
    1fd6:	cf 93       	push	r28
    1fd8:	df 93       	push	r29
    1fda:	8a 01       	movw	r16, r20
    1fdc:	fc 01       	movw	r30, r24
    1fde:	52 8d       	ldd	r21, Z+26	; 0x1a
    1fe0:	33 8d       	ldd	r19, Z+27	; 0x1b
    1fe2:	53 17       	cp	r21, r19
    1fe4:	10 f0       	brcs	.+4      	; 0x1fea <xQueueGenericSendFromISR+0x1c>
    1fe6:	22 30       	cpi	r18, 0x02	; 2
    1fe8:	e1 f4       	brne	.+56     	; 0x2022 <xQueueGenericSendFromISR+0x54>
    1fea:	42 2f       	mov	r20, r18
    1fec:	78 01       	movw	r14, r16
    1fee:	ec 01       	movw	r28, r24
    1ff0:	1e 8d       	ldd	r17, Y+30	; 0x1e
    1ff2:	3f de       	rcall	.-898    	; 0x1c72 <prvCopyDataToQueue>
    1ff4:	1f 3f       	cpi	r17, 0xFF	; 255
    1ff6:	79 f4       	brne	.+30     	; 0x2016 <xQueueGenericSendFromISR+0x48>
    1ff8:	89 89       	ldd	r24, Y+17	; 0x11
    1ffa:	88 23       	and	r24, r24
    1ffc:	a1 f0       	breq	.+40     	; 0x2026 <xQueueGenericSendFromISR+0x58>
    1ffe:	ce 01       	movw	r24, r28
    2000:	41 96       	adiw	r24, 0x11	; 17
    2002:	d7 d6       	rcall	.+3502   	; 0x2db2 <xTaskRemoveFromEventList>
    2004:	88 23       	and	r24, r24
    2006:	89 f0       	breq	.+34     	; 0x202a <xQueueGenericSendFromISR+0x5c>
    2008:	e1 14       	cp	r14, r1
    200a:	f1 04       	cpc	r15, r1
    200c:	81 f0       	breq	.+32     	; 0x202e <xQueueGenericSendFromISR+0x60>
    200e:	81 e0       	ldi	r24, 0x01	; 1
    2010:	f7 01       	movw	r30, r14
    2012:	80 83       	st	Z, r24
    2014:	0d c0       	rjmp	.+26     	; 0x2030 <xQueueGenericSendFromISR+0x62>
    2016:	ff 24       	eor	r15, r15
    2018:	f3 94       	inc	r15
    201a:	f1 0e       	add	r15, r17
    201c:	fe 8e       	std	Y+30, r15	; 0x1e
    201e:	81 e0       	ldi	r24, 0x01	; 1
    2020:	07 c0       	rjmp	.+14     	; 0x2030 <xQueueGenericSendFromISR+0x62>
    2022:	80 e0       	ldi	r24, 0x00	; 0
    2024:	05 c0       	rjmp	.+10     	; 0x2030 <xQueueGenericSendFromISR+0x62>
    2026:	81 e0       	ldi	r24, 0x01	; 1
    2028:	03 c0       	rjmp	.+6      	; 0x2030 <xQueueGenericSendFromISR+0x62>
    202a:	81 e0       	ldi	r24, 0x01	; 1
    202c:	01 c0       	rjmp	.+2      	; 0x2030 <xQueueGenericSendFromISR+0x62>
    202e:	81 e0       	ldi	r24, 0x01	; 1
    2030:	df 91       	pop	r29
    2032:	cf 91       	pop	r28
    2034:	1f 91       	pop	r17
    2036:	0f 91       	pop	r16
    2038:	ff 90       	pop	r15
    203a:	ef 90       	pop	r14
    203c:	08 95       	ret

0000203e <xQueueReceive>:
    203e:	9f 92       	push	r9
    2040:	af 92       	push	r10
    2042:	bf 92       	push	r11
    2044:	cf 92       	push	r12
    2046:	df 92       	push	r13
    2048:	ef 92       	push	r14
    204a:	ff 92       	push	r15
    204c:	0f 93       	push	r16
    204e:	1f 93       	push	r17
    2050:	cf 93       	push	r28
    2052:	df 93       	push	r29
    2054:	00 d0       	rcall	.+0      	; 0x2056 <xQueueReceive+0x18>
    2056:	1f 92       	push	r1
    2058:	1f 92       	push	r1
    205a:	cd b7       	in	r28, 0x3d	; 61
    205c:	de b7       	in	r29, 0x3e	; 62
    205e:	8c 01       	movw	r16, r24
    2060:	5b 01       	movw	r10, r22
    2062:	5d 83       	std	Y+5, r21	; 0x05
    2064:	4c 83       	std	Y+4, r20	; 0x04
    2066:	e1 2c       	mov	r14, r1
    2068:	99 24       	eor	r9, r9
    206a:	93 94       	inc	r9
    206c:	6c 01       	movw	r12, r24
    206e:	81 e1       	ldi	r24, 0x11	; 17
    2070:	c8 0e       	add	r12, r24
    2072:	d1 1c       	adc	r13, r1
    2074:	0f b6       	in	r0, 0x3f	; 63
    2076:	f8 94       	cli
    2078:	0f 92       	push	r0
    207a:	f8 01       	movw	r30, r16
    207c:	f2 8c       	ldd	r15, Z+26	; 0x1a
    207e:	ff 20       	and	r15, r15
    2080:	91 f0       	breq	.+36     	; 0x20a6 <xQueueReceive+0x68>
    2082:	b5 01       	movw	r22, r10
    2084:	c8 01       	movw	r24, r16
    2086:	54 de       	rcall	.-856    	; 0x1d30 <prvCopyDataFromQueue>
    2088:	fa 94       	dec	r15
    208a:	f8 01       	movw	r30, r16
    208c:	f2 8e       	std	Z+26, r15	; 0x1a
    208e:	80 85       	ldd	r24, Z+8	; 0x08
    2090:	88 23       	and	r24, r24
    2092:	29 f0       	breq	.+10     	; 0x209e <xQueueReceive+0x60>
    2094:	c8 01       	movw	r24, r16
    2096:	08 96       	adiw	r24, 0x08	; 8
    2098:	8c d6       	rcall	.+3352   	; 0x2db2 <xTaskRemoveFromEventList>
    209a:	81 11       	cpse	r24, r1
    209c:	18 dd       	rcall	.-1488   	; 0x1ace <vPortYield>
    209e:	0f 90       	pop	r0
    20a0:	0f be       	out	0x3f, r0	; 63
    20a2:	81 e0       	ldi	r24, 0x01	; 1
    20a4:	44 c0       	rjmp	.+136    	; 0x212e <xQueueReceive+0xf0>
    20a6:	8c 81       	ldd	r24, Y+4	; 0x04
    20a8:	9d 81       	ldd	r25, Y+5	; 0x05
    20aa:	89 2b       	or	r24, r25
    20ac:	21 f4       	brne	.+8      	; 0x20b6 <xQueueReceive+0x78>
    20ae:	0f 90       	pop	r0
    20b0:	0f be       	out	0x3f, r0	; 63
    20b2:	80 e0       	ldi	r24, 0x00	; 0
    20b4:	3c c0       	rjmp	.+120    	; 0x212e <xQueueReceive+0xf0>
    20b6:	e1 10       	cpse	r14, r1
    20b8:	04 c0       	rjmp	.+8      	; 0x20c2 <xQueueReceive+0x84>
    20ba:	ce 01       	movw	r24, r28
    20bc:	01 96       	adiw	r24, 0x01	; 1
    20be:	d1 d6       	rcall	.+3490   	; 0x2e62 <vTaskInternalSetTimeOutState>
    20c0:	e9 2c       	mov	r14, r9
    20c2:	0f 90       	pop	r0
    20c4:	0f be       	out	0x3f, r0	; 63
    20c6:	73 d4       	rcall	.+2278   	; 0x29ae <vTaskSuspendAll>
    20c8:	0f b6       	in	r0, 0x3f	; 63
    20ca:	f8 94       	cli
    20cc:	0f 92       	push	r0
    20ce:	f8 01       	movw	r30, r16
    20d0:	85 8d       	ldd	r24, Z+29	; 0x1d
    20d2:	8f 3f       	cpi	r24, 0xFF	; 255
    20d4:	09 f4       	brne	.+2      	; 0x20d8 <xQueueReceive+0x9a>
    20d6:	15 8e       	std	Z+29, r1	; 0x1d
    20d8:	f8 01       	movw	r30, r16
    20da:	86 8d       	ldd	r24, Z+30	; 0x1e
    20dc:	8f 3f       	cpi	r24, 0xFF	; 255
    20de:	09 f4       	brne	.+2      	; 0x20e2 <xQueueReceive+0xa4>
    20e0:	16 8e       	std	Z+30, r1	; 0x1e
    20e2:	0f 90       	pop	r0
    20e4:	0f be       	out	0x3f, r0	; 63
    20e6:	be 01       	movw	r22, r28
    20e8:	6c 5f       	subi	r22, 0xFC	; 252
    20ea:	7f 4f       	sbci	r23, 0xFF	; 255
    20ec:	ce 01       	movw	r24, r28
    20ee:	01 96       	adiw	r24, 0x01	; 1
    20f0:	c3 d6       	rcall	.+3462   	; 0x2e78 <xTaskCheckForTimeOut>
    20f2:	81 11       	cpse	r24, r1
    20f4:	13 c0       	rjmp	.+38     	; 0x211c <xQueueReceive+0xde>
    20f6:	c8 01       	movw	r24, r16
    20f8:	b1 dd       	rcall	.-1182   	; 0x1c5c <prvIsQueueEmpty>
    20fa:	88 23       	and	r24, r24
    20fc:	59 f0       	breq	.+22     	; 0x2114 <xQueueReceive+0xd6>
    20fe:	6c 81       	ldd	r22, Y+4	; 0x04
    2100:	7d 81       	ldd	r23, Y+5	; 0x05
    2102:	c6 01       	movw	r24, r12
    2104:	2d d6       	rcall	.+3162   	; 0x2d60 <vTaskPlaceOnEventList>
    2106:	c8 01       	movw	r24, r16
    2108:	2d de       	rcall	.-934    	; 0x1d64 <prvUnlockQueue>
    210a:	1b d5       	rcall	.+2614   	; 0x2b42 <xTaskResumeAll>
    210c:	81 11       	cpse	r24, r1
    210e:	b2 cf       	rjmp	.-156    	; 0x2074 <xQueueReceive+0x36>
    2110:	de dc       	rcall	.-1604   	; 0x1ace <vPortYield>
    2112:	b0 cf       	rjmp	.-160    	; 0x2074 <xQueueReceive+0x36>
    2114:	c8 01       	movw	r24, r16
    2116:	26 de       	rcall	.-948    	; 0x1d64 <prvUnlockQueue>
    2118:	14 d5       	rcall	.+2600   	; 0x2b42 <xTaskResumeAll>
    211a:	ac cf       	rjmp	.-168    	; 0x2074 <xQueueReceive+0x36>
    211c:	c8 01       	movw	r24, r16
    211e:	22 de       	rcall	.-956    	; 0x1d64 <prvUnlockQueue>
    2120:	10 d5       	rcall	.+2592   	; 0x2b42 <xTaskResumeAll>
    2122:	c8 01       	movw	r24, r16
    2124:	9b dd       	rcall	.-1226   	; 0x1c5c <prvIsQueueEmpty>
    2126:	88 23       	and	r24, r24
    2128:	09 f4       	brne	.+2      	; 0x212c <xQueueReceive+0xee>
    212a:	a4 cf       	rjmp	.-184    	; 0x2074 <xQueueReceive+0x36>
    212c:	80 e0       	ldi	r24, 0x00	; 0
    212e:	0f 90       	pop	r0
    2130:	0f 90       	pop	r0
    2132:	0f 90       	pop	r0
    2134:	0f 90       	pop	r0
    2136:	0f 90       	pop	r0
    2138:	df 91       	pop	r29
    213a:	cf 91       	pop	r28
    213c:	1f 91       	pop	r17
    213e:	0f 91       	pop	r16
    2140:	ff 90       	pop	r15
    2142:	ef 90       	pop	r14
    2144:	df 90       	pop	r13
    2146:	cf 90       	pop	r12
    2148:	bf 90       	pop	r11
    214a:	af 90       	pop	r10
    214c:	9f 90       	pop	r9
    214e:	08 95       	ret

00002150 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
    {
    2150:	cf 93       	push	r28
    2152:	df 93       	push	r29
    2154:	ec 01       	movw	r28, r24
        will not actually cause the task to block, just place it on a blocked
        list.  It will not block until the scheduler is unlocked - at which
        time a yield will be performed.  If an item is added to the queue while
        the queue is locked, and the calling task blocks on the queue, then the
        calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    2156:	0f b6       	in	r0, 0x3f	; 63
    2158:	f8 94       	cli
    215a:	0f 92       	push	r0
    215c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    215e:	8f 3f       	cpi	r24, 0xFF	; 255
    2160:	09 f4       	brne	.+2      	; 0x2164 <vQueueWaitForMessageRestricted+0x14>
    2162:	1d 8e       	std	Y+29, r1	; 0x1d
    2164:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2166:	8f 3f       	cpi	r24, 0xFF	; 255
    2168:	09 f4       	brne	.+2      	; 0x216c <vQueueWaitForMessageRestricted+0x1c>
    216a:	1e 8e       	std	Y+30, r1	; 0x1e
    216c:	0f 90       	pop	r0
    216e:	0f be       	out	0x3f, r0	; 63
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    2170:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2172:	81 11       	cpse	r24, r1
    2174:	03 c0       	rjmp	.+6      	; 0x217c <vQueueWaitForMessageRestricted+0x2c>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    2176:	ce 01       	movw	r24, r28
    2178:	41 96       	adiw	r24, 0x11	; 17
    217a:	03 d6       	rcall	.+3078   	; 0x2d82 <vTaskPlaceOnEventListRestricted>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
        prvUnlockQueue( pxQueue );
    217c:	ce 01       	movw	r24, r28
    217e:	f2 dd       	rcall	.-1052   	; 0x1d64 <prvUnlockQueue>
    }
    2180:	df 91       	pop	r29
    2182:	cf 91       	pop	r28
    2184:	08 95       	ret

00002186 <prvBytesInBuffer>:
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

    return xReturn;
}
    2186:	fc 01       	movw	r30, r24
    2188:	44 81       	ldd	r20, Z+4	; 0x04
    218a:	55 81       	ldd	r21, Z+5	; 0x05
    218c:	22 81       	ldd	r18, Z+2	; 0x02
    218e:	33 81       	ldd	r19, Z+3	; 0x03
    2190:	24 0f       	add	r18, r20
    2192:	35 1f       	adc	r19, r21
    2194:	80 81       	ld	r24, Z
    2196:	91 81       	ldd	r25, Z+1	; 0x01
    2198:	b9 01       	movw	r22, r18
    219a:	68 1b       	sub	r22, r24
    219c:	79 0b       	sbc	r23, r25
    219e:	cb 01       	movw	r24, r22
    21a0:	64 17       	cp	r22, r20
    21a2:	75 07       	cpc	r23, r21
    21a4:	10 f0       	brcs	.+4      	; 0x21aa <prvBytesInBuffer+0x24>
    21a6:	84 1b       	sub	r24, r20
    21a8:	95 0b       	sbc	r25, r21
    21aa:	08 95       	ret

000021ac <prvWriteBytesToBuffer>:
    21ac:	af 92       	push	r10
    21ae:	bf 92       	push	r11
    21b0:	cf 92       	push	r12
    21b2:	df 92       	push	r13
    21b4:	ef 92       	push	r14
    21b6:	ff 92       	push	r15
    21b8:	0f 93       	push	r16
    21ba:	1f 93       	push	r17
    21bc:	cf 93       	push	r28
    21be:	df 93       	push	r29
    21c0:	6c 01       	movw	r12, r24
    21c2:	5b 01       	movw	r10, r22
    21c4:	7a 01       	movw	r14, r20
    21c6:	fc 01       	movw	r30, r24
    21c8:	c2 81       	ldd	r28, Z+2	; 0x02
    21ca:	d3 81       	ldd	r29, Z+3	; 0x03
    21cc:	04 81       	ldd	r16, Z+4	; 0x04
    21ce:	15 81       	ldd	r17, Z+5	; 0x05
    21d0:	0c 1b       	sub	r16, r28
    21d2:	1d 0b       	sbc	r17, r29
    21d4:	40 17       	cp	r20, r16
    21d6:	51 07       	cpc	r21, r17
    21d8:	08 f4       	brcc	.+2      	; 0x21dc <prvWriteBytesToBuffer+0x30>
    21da:	8a 01       	movw	r16, r20
    21dc:	f6 01       	movw	r30, r12
    21de:	84 85       	ldd	r24, Z+12	; 0x0c
    21e0:	95 85       	ldd	r25, Z+13	; 0x0d
    21e2:	a8 01       	movw	r20, r16
    21e4:	b5 01       	movw	r22, r10
    21e6:	8c 0f       	add	r24, r28
    21e8:	9d 1f       	adc	r25, r29
    21ea:	0e 94 76 1b 	call	0x36ec	; 0x36ec <memcpy>
    21ee:	0e 15       	cp	r16, r14
    21f0:	1f 05       	cpc	r17, r15
    21f2:	58 f4       	brcc	.+22     	; 0x220a <__stack+0xb>
    21f4:	a7 01       	movw	r20, r14
    21f6:	40 1b       	sub	r20, r16
    21f8:	51 0b       	sbc	r21, r17
    21fa:	b5 01       	movw	r22, r10
    21fc:	60 0f       	add	r22, r16
    21fe:	71 1f       	adc	r23, r17
    2200:	f6 01       	movw	r30, r12
    2202:	84 85       	ldd	r24, Z+12	; 0x0c
    2204:	95 85       	ldd	r25, Z+13	; 0x0d
    2206:	0e 94 76 1b 	call	0x36ec	; 0x36ec <memcpy>
    220a:	ce 01       	movw	r24, r28
    220c:	8e 0d       	add	r24, r14
    220e:	9f 1d       	adc	r25, r15
    2210:	f6 01       	movw	r30, r12
    2212:	24 81       	ldd	r18, Z+4	; 0x04
    2214:	35 81       	ldd	r19, Z+5	; 0x05
    2216:	82 17       	cp	r24, r18
    2218:	93 07       	cpc	r25, r19
    221a:	10 f0       	brcs	.+4      	; 0x2220 <__stack+0x21>
    221c:	82 1b       	sub	r24, r18
    221e:	93 0b       	sbc	r25, r19
    2220:	f6 01       	movw	r30, r12
    2222:	93 83       	std	Z+3, r25	; 0x03
    2224:	82 83       	std	Z+2, r24	; 0x02
    2226:	c7 01       	movw	r24, r14
    2228:	df 91       	pop	r29
    222a:	cf 91       	pop	r28
    222c:	1f 91       	pop	r17
    222e:	0f 91       	pop	r16
    2230:	ff 90       	pop	r15
    2232:	ef 90       	pop	r14
    2234:	df 90       	pop	r13
    2236:	cf 90       	pop	r12
    2238:	bf 90       	pop	r11
    223a:	af 90       	pop	r10
    223c:	08 95       	ret

0000223e <prvWriteMessageToBuffer>:
    223e:	cf 92       	push	r12
    2240:	df 92       	push	r13
    2242:	ef 92       	push	r14
    2244:	ff 92       	push	r15
    2246:	0f 93       	push	r16
    2248:	1f 93       	push	r17
    224a:	cf 93       	push	r28
    224c:	df 93       	push	r29
    224e:	1f 92       	push	r1
    2250:	1f 92       	push	r1
    2252:	cd b7       	in	r28, 0x3d	; 61
    2254:	de b7       	in	r29, 0x3e	; 62
    2256:	5a 83       	std	Y+2, r21	; 0x02
    2258:	49 83       	std	Y+1, r20	; 0x01
    225a:	21 15       	cp	r18, r1
    225c:	31 05       	cpc	r19, r1
    225e:	c9 f0       	breq	.+50     	; 0x2292 <prvWriteMessageToBuffer+0x54>
    2260:	6b 01       	movw	r12, r22
    2262:	7c 01       	movw	r14, r24
    2264:	fc 01       	movw	r30, r24
    2266:	86 85       	ldd	r24, Z+14	; 0x0e
    2268:	80 fd       	sbrc	r24, 0
    226a:	08 c0       	rjmp	.+16     	; 0x227c <prvWriteMessageToBuffer+0x3e>
    226c:	ca 01       	movw	r24, r20
    226e:	24 17       	cp	r18, r20
    2270:	35 07       	cpc	r19, r21
    2272:	08 f4       	brcc	.+2      	; 0x2276 <prvWriteMessageToBuffer+0x38>
    2274:	c9 01       	movw	r24, r18
    2276:	9a 83       	std	Y+2, r25	; 0x02
    2278:	89 83       	std	Y+1, r24	; 0x01
    227a:	11 c0       	rjmp	.+34     	; 0x229e <prvWriteMessageToBuffer+0x60>
    227c:	20 17       	cp	r18, r16
    227e:	31 07       	cpc	r19, r17
    2280:	58 f0       	brcs	.+22     	; 0x2298 <prvWriteMessageToBuffer+0x5a>
    2282:	42 e0       	ldi	r20, 0x02	; 2
    2284:	50 e0       	ldi	r21, 0x00	; 0
    2286:	be 01       	movw	r22, r28
    2288:	6f 5f       	subi	r22, 0xFF	; 255
    228a:	7f 4f       	sbci	r23, 0xFF	; 255
    228c:	c7 01       	movw	r24, r14
    228e:	8e df       	rcall	.-228    	; 0x21ac <prvWriteBytesToBuffer>
    2290:	06 c0       	rjmp	.+12     	; 0x229e <prvWriteMessageToBuffer+0x60>
    2292:	80 e0       	ldi	r24, 0x00	; 0
    2294:	90 e0       	ldi	r25, 0x00	; 0
    2296:	08 c0       	rjmp	.+16     	; 0x22a8 <prvWriteMessageToBuffer+0x6a>
    2298:	80 e0       	ldi	r24, 0x00	; 0
    229a:	90 e0       	ldi	r25, 0x00	; 0
    229c:	05 c0       	rjmp	.+10     	; 0x22a8 <prvWriteMessageToBuffer+0x6a>
    229e:	49 81       	ldd	r20, Y+1	; 0x01
    22a0:	5a 81       	ldd	r21, Y+2	; 0x02
    22a2:	b6 01       	movw	r22, r12
    22a4:	c7 01       	movw	r24, r14
    22a6:	82 df       	rcall	.-252    	; 0x21ac <prvWriteBytesToBuffer>
    22a8:	0f 90       	pop	r0
    22aa:	0f 90       	pop	r0
    22ac:	df 91       	pop	r29
    22ae:	cf 91       	pop	r28
    22b0:	1f 91       	pop	r17
    22b2:	0f 91       	pop	r16
    22b4:	ff 90       	pop	r15
    22b6:	ef 90       	pop	r14
    22b8:	df 90       	pop	r13
    22ba:	cf 90       	pop	r12
    22bc:	08 95       	ret

000022be <prvReadBytesFromBuffer>:
    22be:	af 92       	push	r10
    22c0:	bf 92       	push	r11
    22c2:	cf 92       	push	r12
    22c4:	df 92       	push	r13
    22c6:	ef 92       	push	r14
    22c8:	ff 92       	push	r15
    22ca:	0f 93       	push	r16
    22cc:	1f 93       	push	r17
    22ce:	cf 93       	push	r28
    22d0:	df 93       	push	r29
    22d2:	7c 01       	movw	r14, r24
    22d4:	5b 01       	movw	r10, r22
    22d6:	e9 01       	movw	r28, r18
    22d8:	42 17       	cp	r20, r18
    22da:	53 07       	cpc	r21, r19
    22dc:	08 f4       	brcc	.+2      	; 0x22e0 <prvReadBytesFromBuffer+0x22>
    22de:	ea 01       	movw	r28, r20
    22e0:	20 97       	sbiw	r28, 0x00	; 0
    22e2:	79 f1       	breq	.+94     	; 0x2342 <prvReadBytesFromBuffer+0x84>
    22e4:	f7 01       	movw	r30, r14
    22e6:	00 81       	ld	r16, Z
    22e8:	11 81       	ldd	r17, Z+1	; 0x01
    22ea:	c4 80       	ldd	r12, Z+4	; 0x04
    22ec:	d5 80       	ldd	r13, Z+5	; 0x05
    22ee:	c0 1a       	sub	r12, r16
    22f0:	d1 0a       	sbc	r13, r17
    22f2:	cc 15       	cp	r28, r12
    22f4:	dd 05       	cpc	r29, r13
    22f6:	08 f4       	brcc	.+2      	; 0x22fa <prvReadBytesFromBuffer+0x3c>
    22f8:	6e 01       	movw	r12, r28
    22fa:	f7 01       	movw	r30, r14
    22fc:	64 85       	ldd	r22, Z+12	; 0x0c
    22fe:	75 85       	ldd	r23, Z+13	; 0x0d
    2300:	60 0f       	add	r22, r16
    2302:	71 1f       	adc	r23, r17
    2304:	a6 01       	movw	r20, r12
    2306:	c5 01       	movw	r24, r10
    2308:	0e 94 76 1b 	call	0x36ec	; 0x36ec <memcpy>
    230c:	cc 16       	cp	r12, r28
    230e:	dd 06       	cpc	r13, r29
    2310:	58 f4       	brcc	.+22     	; 0x2328 <prvReadBytesFromBuffer+0x6a>
    2312:	ae 01       	movw	r20, r28
    2314:	4c 19       	sub	r20, r12
    2316:	5d 09       	sbc	r21, r13
    2318:	f7 01       	movw	r30, r14
    231a:	64 85       	ldd	r22, Z+12	; 0x0c
    231c:	75 85       	ldd	r23, Z+13	; 0x0d
    231e:	c5 01       	movw	r24, r10
    2320:	8c 0d       	add	r24, r12
    2322:	9d 1d       	adc	r25, r13
    2324:	0e 94 76 1b 	call	0x36ec	; 0x36ec <memcpy>
    2328:	0c 0f       	add	r16, r28
    232a:	1d 1f       	adc	r17, r29
    232c:	f7 01       	movw	r30, r14
    232e:	84 81       	ldd	r24, Z+4	; 0x04
    2330:	95 81       	ldd	r25, Z+5	; 0x05
    2332:	08 17       	cp	r16, r24
    2334:	19 07       	cpc	r17, r25
    2336:	10 f0       	brcs	.+4      	; 0x233c <prvReadBytesFromBuffer+0x7e>
    2338:	08 1b       	sub	r16, r24
    233a:	19 0b       	sbc	r17, r25
    233c:	f7 01       	movw	r30, r14
    233e:	11 83       	std	Z+1, r17	; 0x01
    2340:	00 83       	st	Z, r16
    2342:	ce 01       	movw	r24, r28
    2344:	df 91       	pop	r29
    2346:	cf 91       	pop	r28
    2348:	1f 91       	pop	r17
    234a:	0f 91       	pop	r16
    234c:	ff 90       	pop	r15
    234e:	ef 90       	pop	r14
    2350:	df 90       	pop	r13
    2352:	cf 90       	pop	r12
    2354:	bf 90       	pop	r11
    2356:	af 90       	pop	r10
    2358:	08 95       	ret

0000235a <xStreamBufferGenericCreateStatic>:
    235a:	0f 93       	push	r16
    235c:	1f 93       	push	r17
    235e:	cf 93       	push	r28
    2360:	df 93       	push	r29
    2362:	dc 01       	movw	r26, r24
    2364:	f8 01       	movw	r30, r16
    2366:	61 15       	cp	r22, r1
    2368:	71 05       	cpc	r23, r1
    236a:	11 f4       	brne	.+4      	; 0x2370 <xStreamBufferGenericCreateStatic+0x16>
    236c:	61 e0       	ldi	r22, 0x01	; 1
    236e:	70 e0       	ldi	r23, 0x00	; 0
    2370:	41 11       	cpse	r20, r1
    2372:	02 c0       	rjmp	.+4      	; 0x2378 <xStreamBufferGenericCreateStatic+0x1e>
    2374:	92 e0       	ldi	r25, 0x02	; 2
    2376:	01 c0       	rjmp	.+2      	; 0x237a <xStreamBufferGenericCreateStatic+0x20>
    2378:	93 e0       	ldi	r25, 0x03	; 3
    237a:	21 15       	cp	r18, r1
    237c:	31 05       	cpc	r19, r1
    237e:	91 f0       	breq	.+36     	; 0x23a4 <xStreamBufferGenericCreateStatic+0x4a>
    2380:	30 97       	sbiw	r30, 0x00	; 0
    2382:	99 f0       	breq	.+38     	; 0x23aa <xStreamBufferGenericCreateStatic+0x50>
    2384:	8f e0       	ldi	r24, 0x0F	; 15
    2386:	ef 01       	movw	r28, r30
    2388:	19 92       	st	Y+, r1
    238a:	8a 95       	dec	r24
    238c:	e9 f7       	brne	.-6      	; 0x2388 <xStreamBufferGenericCreateStatic+0x2e>
    238e:	35 87       	std	Z+13, r19	; 0x0d
    2390:	24 87       	std	Z+12, r18	; 0x0c
    2392:	b5 83       	std	Z+5, r27	; 0x05
    2394:	a4 83       	std	Z+4, r26	; 0x04
    2396:	77 83       	std	Z+7, r23	; 0x07
    2398:	66 83       	std	Z+6, r22	; 0x06
    239a:	92 60       	ori	r25, 0x02	; 2
    239c:	96 87       	std	Z+14, r25	; 0x0e
    239e:	8e 2f       	mov	r24, r30
    23a0:	9f 2f       	mov	r25, r31
    23a2:	05 c0       	rjmp	.+10     	; 0x23ae <xStreamBufferGenericCreateStatic+0x54>
    23a4:	80 e0       	ldi	r24, 0x00	; 0
    23a6:	90 e0       	ldi	r25, 0x00	; 0
    23a8:	02 c0       	rjmp	.+4      	; 0x23ae <xStreamBufferGenericCreateStatic+0x54>
    23aa:	8e 2f       	mov	r24, r30
    23ac:	9f 2f       	mov	r25, r31
    23ae:	df 91       	pop	r29
    23b0:	cf 91       	pop	r28
    23b2:	1f 91       	pop	r17
    23b4:	0f 91       	pop	r16
    23b6:	08 95       	ret

000023b8 <xStreamBufferSpacesAvailable>:
    23b8:	fc 01       	movw	r30, r24
    23ba:	24 81       	ldd	r18, Z+4	; 0x04
    23bc:	35 81       	ldd	r19, Z+5	; 0x05
    23be:	80 81       	ld	r24, Z
    23c0:	91 81       	ldd	r25, Z+1	; 0x01
    23c2:	42 81       	ldd	r20, Z+2	; 0x02
    23c4:	53 81       	ldd	r21, Z+3	; 0x03
    23c6:	82 0f       	add	r24, r18
    23c8:	93 1f       	adc	r25, r19
    23ca:	01 97       	sbiw	r24, 0x01	; 1
    23cc:	84 1b       	sub	r24, r20
    23ce:	95 0b       	sbc	r25, r21
    23d0:	82 17       	cp	r24, r18
    23d2:	93 07       	cpc	r25, r19
    23d4:	10 f0       	brcs	.+4      	; 0x23da <xStreamBufferSpacesAvailable+0x22>
    23d6:	82 1b       	sub	r24, r18
    23d8:	93 0b       	sbc	r25, r19
    23da:	08 95       	ret

000023dc <xStreamBufferSend>:
    23dc:	4f 92       	push	r4
    23de:	5f 92       	push	r5
    23e0:	6f 92       	push	r6
    23e2:	7f 92       	push	r7
    23e4:	8f 92       	push	r8
    23e6:	9f 92       	push	r9
    23e8:	af 92       	push	r10
    23ea:	bf 92       	push	r11
    23ec:	cf 92       	push	r12
    23ee:	df 92       	push	r13
    23f0:	ef 92       	push	r14
    23f2:	ff 92       	push	r15
    23f4:	0f 93       	push	r16
    23f6:	1f 93       	push	r17
    23f8:	cf 93       	push	r28
    23fa:	df 93       	push	r29
    23fc:	00 d0       	rcall	.+0      	; 0x23fe <xStreamBufferSend+0x22>
    23fe:	1f 92       	push	r1
    2400:	1f 92       	push	r1
    2402:	cd b7       	in	r28, 0x3d	; 61
    2404:	de b7       	in	r29, 0x3e	; 62
    2406:	6c 01       	movw	r12, r24
    2408:	2b 01       	movw	r4, r22
    240a:	3a 01       	movw	r6, r20
    240c:	3d 83       	std	Y+5, r19	; 0x05
    240e:	2c 83       	std	Y+4, r18	; 0x04
    2410:	fc 01       	movw	r30, r24
    2412:	86 85       	ldd	r24, Z+14	; 0x0e
    2414:	80 ff       	sbrs	r24, 0
    2416:	05 c0       	rjmp	.+10     	; 0x2422 <xStreamBufferSend+0x46>
    2418:	4a 01       	movw	r8, r20
    241a:	f2 e0       	ldi	r31, 0x02	; 2
    241c:	8f 0e       	add	r8, r31
    241e:	91 1c       	adc	r9, r1
    2420:	01 c0       	rjmp	.+2      	; 0x2424 <xStreamBufferSend+0x48>
    2422:	4a 01       	movw	r8, r20
    2424:	8c 81       	ldd	r24, Y+4	; 0x04
    2426:	9d 81       	ldd	r25, Y+5	; 0x05
    2428:	89 2b       	or	r24, r25
    242a:	09 f4       	brne	.+2      	; 0x242e <xStreamBufferSend+0x52>
    242c:	31 c0       	rjmp	.+98     	; 0x2490 <xStreamBufferSend+0xb4>
    242e:	ce 01       	movw	r24, r28
    2430:	01 96       	adiw	r24, 0x01	; 1
    2432:	07 d5       	rcall	.+2574   	; 0x2e42 <vTaskSetTimeOutState>
    2434:	0f b6       	in	r0, 0x3f	; 63
    2436:	f8 94       	cli
    2438:	0f 92       	push	r0
    243a:	c6 01       	movw	r24, r12
    243c:	bd df       	rcall	.-134    	; 0x23b8 <xStreamBufferSpacesAvailable>
    243e:	5c 01       	movw	r10, r24
    2440:	88 15       	cp	r24, r8
    2442:	99 05       	cpc	r25, r9
    2444:	00 f5       	brcc	.+64     	; 0x2486 <xStreamBufferSend+0xaa>
    2446:	80 e0       	ldi	r24, 0x00	; 0
    2448:	90 e0       	ldi	r25, 0x00	; 0
    244a:	a3 d6       	rcall	.+3398   	; 0x3192 <xTaskNotifyStateClear>
    244c:	4e d5       	rcall	.+2716   	; 0x2eea <xTaskGetCurrentTaskHandle>
    244e:	f6 01       	movw	r30, r12
    2450:	93 87       	std	Z+11, r25	; 0x0b
    2452:	82 87       	std	Z+10, r24	; 0x0a
    2454:	0f 90       	pop	r0
    2456:	0f be       	out	0x3f, r0	; 63
    2458:	ec 80       	ldd	r14, Y+4	; 0x04
    245a:	fd 80       	ldd	r15, Y+5	; 0x05
    245c:	00 e0       	ldi	r16, 0x00	; 0
    245e:	10 e0       	ldi	r17, 0x00	; 0
    2460:	20 e0       	ldi	r18, 0x00	; 0
    2462:	30 e0       	ldi	r19, 0x00	; 0
    2464:	a9 01       	movw	r20, r18
    2466:	60 e0       	ldi	r22, 0x00	; 0
    2468:	70 e0       	ldi	r23, 0x00	; 0
    246a:	cb 01       	movw	r24, r22
    246c:	91 d5       	rcall	.+2850   	; 0x2f90 <xTaskNotifyWait>
    246e:	f6 01       	movw	r30, r12
    2470:	13 86       	std	Z+11, r1	; 0x0b
    2472:	12 86       	std	Z+10, r1	; 0x0a
    2474:	be 01       	movw	r22, r28
    2476:	6c 5f       	subi	r22, 0xFC	; 252
    2478:	7f 4f       	sbci	r23, 0xFF	; 255
    247a:	ce 01       	movw	r24, r28
    247c:	01 96       	adiw	r24, 0x01	; 1
    247e:	fc d4       	rcall	.+2552   	; 0x2e78 <xTaskCheckForTimeOut>
    2480:	88 23       	and	r24, r24
    2482:	c1 f2       	breq	.-80     	; 0x2434 <xStreamBufferSend+0x58>
    2484:	02 c0       	rjmp	.+4      	; 0x248a <xStreamBufferSend+0xae>
    2486:	0f 90       	pop	r0
    2488:	0f be       	out	0x3f, r0	; 63
    248a:	a1 14       	cp	r10, r1
    248c:	b1 04       	cpc	r11, r1
    248e:	19 f4       	brne	.+6      	; 0x2496 <xStreamBufferSend+0xba>
    2490:	c6 01       	movw	r24, r12
    2492:	92 df       	rcall	.-220    	; 0x23b8 <xStreamBufferSpacesAvailable>
    2494:	5c 01       	movw	r10, r24
    2496:	84 01       	movw	r16, r8
    2498:	95 01       	movw	r18, r10
    249a:	a3 01       	movw	r20, r6
    249c:	b2 01       	movw	r22, r4
    249e:	c6 01       	movw	r24, r12
    24a0:	ce de       	rcall	.-612    	; 0x223e <prvWriteMessageToBuffer>
    24a2:	7c 01       	movw	r14, r24
    24a4:	89 2b       	or	r24, r25
    24a6:	d9 f0       	breq	.+54     	; 0x24de <xStreamBufferSend+0x102>
    24a8:	c6 01       	movw	r24, r12
    24aa:	6d de       	rcall	.-806    	; 0x2186 <prvBytesInBuffer>
    24ac:	f6 01       	movw	r30, r12
    24ae:	26 81       	ldd	r18, Z+6	; 0x06
    24b0:	37 81       	ldd	r19, Z+7	; 0x07
    24b2:	82 17       	cp	r24, r18
    24b4:	93 07       	cpc	r25, r19
    24b6:	98 f0       	brcs	.+38     	; 0x24de <xStreamBufferSend+0x102>
    24b8:	7a d2       	rcall	.+1268   	; 0x29ae <vTaskSuspendAll>
    24ba:	f6 01       	movw	r30, r12
    24bc:	80 85       	ldd	r24, Z+8	; 0x08
    24be:	91 85       	ldd	r25, Z+9	; 0x09
    24c0:	89 2b       	or	r24, r25
    24c2:	61 f0       	breq	.+24     	; 0x24dc <xStreamBufferSend+0x100>
    24c4:	80 85       	ldd	r24, Z+8	; 0x08
    24c6:	91 85       	ldd	r25, Z+9	; 0x09
    24c8:	00 e0       	ldi	r16, 0x00	; 0
    24ca:	10 e0       	ldi	r17, 0x00	; 0
    24cc:	20 e0       	ldi	r18, 0x00	; 0
    24ce:	40 e0       	ldi	r20, 0x00	; 0
    24d0:	50 e0       	ldi	r21, 0x00	; 0
    24d2:	ba 01       	movw	r22, r20
    24d4:	e0 d5       	rcall	.+3008   	; 0x3096 <xTaskGenericNotify>
    24d6:	f6 01       	movw	r30, r12
    24d8:	11 86       	std	Z+9, r1	; 0x09
    24da:	10 86       	std	Z+8, r1	; 0x08
    24dc:	32 d3       	rcall	.+1636   	; 0x2b42 <xTaskResumeAll>
    24de:	c7 01       	movw	r24, r14
    24e0:	0f 90       	pop	r0
    24e2:	0f 90       	pop	r0
    24e4:	0f 90       	pop	r0
    24e6:	0f 90       	pop	r0
    24e8:	0f 90       	pop	r0
    24ea:	df 91       	pop	r29
    24ec:	cf 91       	pop	r28
    24ee:	1f 91       	pop	r17
    24f0:	0f 91       	pop	r16
    24f2:	ff 90       	pop	r15
    24f4:	ef 90       	pop	r14
    24f6:	df 90       	pop	r13
    24f8:	cf 90       	pop	r12
    24fa:	bf 90       	pop	r11
    24fc:	af 90       	pop	r10
    24fe:	9f 90       	pop	r9
    2500:	8f 90       	pop	r8
    2502:	7f 90       	pop	r7
    2504:	6f 90       	pop	r6
    2506:	5f 90       	pop	r5
    2508:	4f 90       	pop	r4
    250a:	08 95       	ret

0000250c <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void *pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    250c:	6f 92       	push	r6
    250e:	7f 92       	push	r7
    2510:	8f 92       	push	r8
    2512:	9f 92       	push	r9
    2514:	af 92       	push	r10
    2516:	bf 92       	push	r11
    2518:	cf 92       	push	r12
    251a:	df 92       	push	r13
    251c:	ef 92       	push	r14
    251e:	ff 92       	push	r15
    2520:	0f 93       	push	r16
    2522:	1f 93       	push	r17
    2524:	cf 93       	push	r28
    2526:	df 93       	push	r29
    2528:	1f 92       	push	r1
    252a:	1f 92       	push	r1
    252c:	cd b7       	in	r28, 0x3d	; 61
    252e:	de b7       	in	r29, 0x3e	; 62
    2530:	6c 01       	movw	r12, r24
    2532:	3b 01       	movw	r6, r22
    2534:	4a 01       	movw	r8, r20
    2536:	79 01       	movw	r14, r18
    /* This receive function is used by both message buffers, which store
    discrete messages, and stream buffers, which store a continuous stream of
    bytes.  Discrete messages include an additional
    sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    2538:	fc 01       	movw	r30, r24
    253a:	86 85       	ldd	r24, Z+14	; 0x0e
    253c:	80 fd       	sbrc	r24, 0
    253e:	03 c0       	rjmp	.+6      	; 0x2546 <xStreamBufferReceive+0x3a>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    2540:	a1 2c       	mov	r10, r1
    2542:	b1 2c       	mov	r11, r1
    2544:	04 c0       	rjmp	.+8      	; 0x254e <xStreamBufferReceive+0x42>
    bytes.  Discrete messages include an additional
    sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    2546:	68 94       	set
    2548:	aa 24       	eor	r10, r10
    254a:	a1 f8       	bld	r10, 1
    254c:	b1 2c       	mov	r11, r1
    else
    {
        xBytesToStoreMessageLength = 0;
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    254e:	e1 14       	cp	r14, r1
    2550:	f1 04       	cpc	r15, r1
    2552:	29 f1       	breq	.+74     	; 0x259e <xStreamBufferReceive+0x92>
    {
        /* Checking if there is data and clearing the notification state must be
        performed atomically. */
        taskENTER_CRITICAL();
    2554:	0f b6       	in	r0, 0x3f	; 63
    2556:	f8 94       	cli
    2558:	0f 92       	push	r0
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    255a:	c6 01       	movw	r24, r12
    255c:	14 de       	rcall	.-984    	; 0x2186 <prvBytesInBuffer>
    255e:	8c 01       	movw	r16, r24
            /* If this function was invoked by a message buffer read then
            xBytesToStoreMessageLength holds the number of bytes used to hold
            the length of the next discrete message.  If this function was
            invoked by a stream buffer read then xBytesToStoreMessageLength will
            be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
    2560:	a8 16       	cp	r10, r24
    2562:	b9 06       	cpc	r11, r25
    2564:	38 f0       	brcs	.+14     	; 0x2574 <xStreamBufferReceive+0x68>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
    2566:	80 e0       	ldi	r24, 0x00	; 0
    2568:	90 e0       	ldi	r25, 0x00	; 0

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    256a:	13 d6       	rcall	.+3110   	; 0x3192 <xTaskNotifyStateClear>
    256c:	be d4       	rcall	.+2428   	; 0x2eea <xTaskGetCurrentTaskHandle>
    256e:	f6 01       	movw	r30, r12
    2570:	91 87       	std	Z+9, r25	; 0x09
    2572:	80 87       	std	Z+8, r24	; 0x08
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    2574:	0f 90       	pop	r0
    2576:	0f be       	out	0x3f, r0	; 63

        if( xBytesAvailable <= xBytesToStoreMessageLength )
    2578:	a0 16       	cp	r10, r16
    257a:	b1 06       	cpc	r11, r17
    257c:	b0 f0       	brcs	.+44     	; 0x25aa <xStreamBufferReceive+0x9e>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    257e:	00 e0       	ldi	r16, 0x00	; 0
    2580:	10 e0       	ldi	r17, 0x00	; 0
    2582:	20 e0       	ldi	r18, 0x00	; 0
    2584:	30 e0       	ldi	r19, 0x00	; 0
    2586:	a9 01       	movw	r20, r18
    2588:	60 e0       	ldi	r22, 0x00	; 0
    258a:	70 e0       	ldi	r23, 0x00	; 0
    258c:	cb 01       	movw	r24, r22
    258e:	00 d5       	rcall	.+2560   	; 0x2f90 <xTaskNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
    2590:	f6 01       	movw	r30, r12
    2592:	11 86       	std	Z+9, r1	; 0x09

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    2594:	10 86       	std	Z+8, r1	; 0x08
    2596:	c6 01       	movw	r24, r12
    2598:	f6 dd       	rcall	.-1044   	; 0x2186 <prvBytesInBuffer>
    259a:	8c 01       	movw	r16, r24
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    259c:	03 c0       	rjmp	.+6      	; 0x25a4 <xStreamBufferReceive+0x98>
    259e:	c6 01       	movw	r24, r12
    25a0:	f2 dd       	rcall	.-1052   	; 0x2186 <prvBytesInBuffer>
    25a2:	8c 01       	movw	r16, r24
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
    holds the number of bytes used to store the message length) or a stream of
    bytes (where xBytesToStoreMessageLength is zero), the number of bytes
    available must be greater than xBytesToStoreMessageLength to be able to
    read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    25a4:	a0 16       	cp	r10, r16
    25a6:	b1 06       	cpc	r11, r17
    25a8:	b8 f5       	brcc	.+110    	; 0x2618 <xStreamBufferReceive+0x10c>
                                        size_t xBytesToStoreMessageLength )
{
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

    if( xBytesToStoreMessageLength != ( size_t ) 0 )
    25aa:	a1 14       	cp	r10, r1
    25ac:	b1 04       	cpc	r11, r1
    25ae:	c1 f0       	breq	.+48     	; 0x25e0 <xStreamBufferReceive+0xd4>
    {
        /* A discrete message is being received.  First receive the length
        of the message.  A copy of the tail is stored so the buffer can be
        returned to its prior state if the length of the message is too
        large for the provided buffer. */
        xOriginalTail = pxStreamBuffer->xTail;
    25b0:	f6 01       	movw	r30, r12
    25b2:	e0 80       	ld	r14, Z
    25b4:	f1 80       	ldd	r15, Z+1	; 0x01
        ( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
    25b6:	98 01       	movw	r18, r16
    25b8:	a5 01       	movw	r20, r10
    25ba:	be 01       	movw	r22, r28
    25bc:	6f 5f       	subi	r22, 0xFF	; 255
    25be:	7f 4f       	sbci	r23, 0xFF	; 255
    25c0:	c6 01       	movw	r24, r12
    25c2:	7d de       	rcall	.-774    	; 0x22be <prvReadBytesFromBuffer>
        xNextMessageLength = ( size_t ) xTempNextMessageLength;
    25c4:	89 81       	ldd	r24, Y+1	; 0x01
    25c6:	9a 81       	ldd	r25, Y+2	; 0x02

        /* Reduce the number of bytes available by the number of bytes just
        read out. */
        xBytesAvailable -= xBytesToStoreMessageLength;
    25c8:	0a 19       	sub	r16, r10
    25ca:	1b 09       	sbc	r17, r11

        /* Check there is enough space in the buffer provided by the
        user. */
        if( xNextMessageLength > xBufferLengthBytes )
    25cc:	88 16       	cp	r8, r24
    25ce:	99 06       	cpc	r9, r25
    25d0:	30 f4       	brcc	.+12     	; 0x25de <xStreamBufferReceive+0xd2>
        {
            /* The user has provided insufficient space to read the message
            so return the buffer to its previous state (so the length of
            the message is in the buffer again). */
            pxStreamBuffer->xTail = xOriginalTail;
    25d2:	f6 01       	movw	r30, r12
    25d4:	f1 82       	std	Z+1, r15	; 0x01
    25d6:	e0 82       	st	Z, r14
            xNextMessageLength = 0;
    25d8:	81 2c       	mov	r8, r1
    25da:	91 2c       	mov	r9, r1
        of the message.  A copy of the tail is stored so the buffer can be
        returned to its prior state if the length of the message is too
        large for the provided buffer. */
        xOriginalTail = pxStreamBuffer->xTail;
        ( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
        xNextMessageLength = ( size_t ) xTempNextMessageLength;
    25dc:	01 c0       	rjmp	.+2      	; 0x25e0 <xStreamBufferReceive+0xd4>
        message), so read as many bytes as possible. */
        xNextMessageLength = xBufferLengthBytes;
    }

    /* Read the actual data. */
    xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
    25de:	4c 01       	movw	r8, r24
    25e0:	98 01       	movw	r18, r16
    25e2:	a4 01       	movw	r20, r8
    25e4:	b3 01       	movw	r22, r6
    25e6:	c6 01       	movw	r24, r12
    25e8:	6a de       	rcall	.-812    	; 0x22be <prvReadBytesFromBuffer>
    if( xBytesAvailable > xBytesToStoreMessageLength )
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    25ea:	7c 01       	movw	r14, r24
    25ec:	89 2b       	or	r24, r25
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            sbRECEIVE_COMPLETED( pxStreamBuffer );
    25ee:	b1 f0       	breq	.+44     	; 0x261c <xStreamBufferReceive+0x110>
    25f0:	de d1       	rcall	.+956    	; 0x29ae <vTaskSuspendAll>
    25f2:	f6 01       	movw	r30, r12
    25f4:	82 85       	ldd	r24, Z+10	; 0x0a
    25f6:	93 85       	ldd	r25, Z+11	; 0x0b
    25f8:	89 2b       	or	r24, r25
    25fa:	61 f0       	breq	.+24     	; 0x2614 <xStreamBufferReceive+0x108>
    25fc:	82 85       	ldd	r24, Z+10	; 0x0a
    25fe:	93 85       	ldd	r25, Z+11	; 0x0b
    2600:	00 e0       	ldi	r16, 0x00	; 0
    2602:	10 e0       	ldi	r17, 0x00	; 0
    2604:	20 e0       	ldi	r18, 0x00	; 0
    2606:	40 e0       	ldi	r20, 0x00	; 0
    2608:	50 e0       	ldi	r21, 0x00	; 0
    260a:	ba 01       	movw	r22, r20
    260c:	44 d5       	rcall	.+2696   	; 0x3096 <xTaskGenericNotify>
    260e:	f6 01       	movw	r30, r12
    2610:	13 86       	std	Z+11, r1	; 0x0b
    2612:	12 86       	std	Z+10, r1	; 0x0a
    2614:	96 d2       	rcall	.+1324   	; 0x2b42 <xTaskResumeAll>
    2616:	02 c0       	rjmp	.+4      	; 0x261c <xStreamBufferReceive+0x110>
                             void *pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    2618:	e1 2c       	mov	r14, r1
    261a:	f1 2c       	mov	r15, r1
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
}
    261c:	c7 01       	movw	r24, r14
    261e:	0f 90       	pop	r0
    2620:	0f 90       	pop	r0
    2622:	df 91       	pop	r29
    2624:	cf 91       	pop	r28
    2626:	1f 91       	pop	r17
    2628:	0f 91       	pop	r16
    262a:	ff 90       	pop	r15
    262c:	ef 90       	pop	r14
    262e:	df 90       	pop	r13
    2630:	cf 90       	pop	r12
    2632:	bf 90       	pop	r11
    2634:	af 90       	pop	r10
    2636:	9f 90       	pop	r9
    2638:	8f 90       	pop	r8
    263a:	7f 90       	pop	r7
    263c:	6f 90       	pop	r6
    263e:	08 95       	ret

00002640 <prvResetNextTaskUnblockTime>:
    2640:	e0 91 70 09 	lds	r30, 0x0970	; 0x800970 <pxDelayedTaskList>
    2644:	f0 91 71 09 	lds	r31, 0x0971	; 0x800971 <pxDelayedTaskList+0x1>
    2648:	80 81       	ld	r24, Z
    264a:	81 11       	cpse	r24, r1
    264c:	07 c0       	rjmp	.+14     	; 0x265c <prvResetNextTaskUnblockTime+0x1c>
    264e:	8f ef       	ldi	r24, 0xFF	; 255
    2650:	9f ef       	ldi	r25, 0xFF	; 255
    2652:	90 93 48 09 	sts	0x0948, r25	; 0x800948 <xNextTaskUnblockTime+0x1>
    2656:	80 93 47 09 	sts	0x0947, r24	; 0x800947 <xNextTaskUnblockTime>
    265a:	08 95       	ret
    265c:	e0 91 70 09 	lds	r30, 0x0970	; 0x800970 <pxDelayedTaskList>
    2660:	f0 91 71 09 	lds	r31, 0x0971	; 0x800971 <pxDelayedTaskList+0x1>
    2664:	05 80       	ldd	r0, Z+5	; 0x05
    2666:	f6 81       	ldd	r31, Z+6	; 0x06
    2668:	e0 2d       	mov	r30, r0
    266a:	06 80       	ldd	r0, Z+6	; 0x06
    266c:	f7 81       	ldd	r31, Z+7	; 0x07
    266e:	e0 2d       	mov	r30, r0
    2670:	82 81       	ldd	r24, Z+2	; 0x02
    2672:	93 81       	ldd	r25, Z+3	; 0x03
    2674:	90 93 48 09 	sts	0x0948, r25	; 0x800948 <xNextTaskUnblockTime+0x1>
    2678:	80 93 47 09 	sts	0x0947, r24	; 0x800947 <xNextTaskUnblockTime>
    267c:	08 95       	ret

0000267e <prvAddCurrentTaskToDelayedList>:
    267e:	ff 92       	push	r15
    2680:	0f 93       	push	r16
    2682:	1f 93       	push	r17
    2684:	cf 93       	push	r28
    2686:	df 93       	push	r29
    2688:	ec 01       	movw	r28, r24
    268a:	f6 2e       	mov	r15, r22
    268c:	00 91 4f 09 	lds	r16, 0x094F	; 0x80094f <xTickCount>
    2690:	10 91 50 09 	lds	r17, 0x0950	; 0x800950 <xTickCount+0x1>
    2694:	80 91 96 09 	lds	r24, 0x0996	; 0x800996 <pxCurrentTCB>
    2698:	90 91 97 09 	lds	r25, 0x0997	; 0x800997 <pxCurrentTCB+0x1>
    269c:	02 96       	adiw	r24, 0x02	; 2
    269e:	42 d9       	rcall	.-3452   	; 0x1924 <uxListRemove>
    26a0:	cf 3f       	cpi	r28, 0xFF	; 255
    26a2:	8f ef       	ldi	r24, 0xFF	; 255
    26a4:	d8 07       	cpc	r29, r24
    26a6:	61 f4       	brne	.+24     	; 0x26c0 <prvAddCurrentTaskToDelayedList+0x42>
    26a8:	ff 20       	and	r15, r15
    26aa:	51 f0       	breq	.+20     	; 0x26c0 <prvAddCurrentTaskToDelayedList+0x42>
    26ac:	60 91 96 09 	lds	r22, 0x0996	; 0x800996 <pxCurrentTCB>
    26b0:	70 91 97 09 	lds	r23, 0x0997	; 0x800997 <pxCurrentTCB+0x1>
    26b4:	6e 5f       	subi	r22, 0xFE	; 254
    26b6:	7f 4f       	sbci	r23, 0xFF	; 255
    26b8:	82 e5       	ldi	r24, 0x52	; 82
    26ba:	99 e0       	ldi	r25, 0x09	; 9
    26bc:	e1 d8       	rcall	.-3646   	; 0x1880 <vListInsertEnd>
    26be:	2d c0       	rjmp	.+90     	; 0x271a <prvAddCurrentTaskToDelayedList+0x9c>
    26c0:	c0 0f       	add	r28, r16
    26c2:	d1 1f       	adc	r29, r17
    26c4:	e0 91 96 09 	lds	r30, 0x0996	; 0x800996 <pxCurrentTCB>
    26c8:	f0 91 97 09 	lds	r31, 0x0997	; 0x800997 <pxCurrentTCB+0x1>
    26cc:	d3 83       	std	Z+3, r29	; 0x03
    26ce:	c2 83       	std	Z+2, r28	; 0x02
    26d0:	c0 17       	cp	r28, r16
    26d2:	d1 07       	cpc	r29, r17
    26d4:	60 f4       	brcc	.+24     	; 0x26ee <prvAddCurrentTaskToDelayedList+0x70>
    26d6:	60 91 96 09 	lds	r22, 0x0996	; 0x800996 <pxCurrentTCB>
    26da:	70 91 97 09 	lds	r23, 0x0997	; 0x800997 <pxCurrentTCB+0x1>
    26de:	80 91 6e 09 	lds	r24, 0x096E	; 0x80096e <pxOverflowDelayedTaskList>
    26e2:	90 91 6f 09 	lds	r25, 0x096F	; 0x80096f <pxOverflowDelayedTaskList+0x1>
    26e6:	6e 5f       	subi	r22, 0xFE	; 254
    26e8:	7f 4f       	sbci	r23, 0xFF	; 255
    26ea:	eb d8       	rcall	.-3626   	; 0x18c2 <vListInsert>
    26ec:	16 c0       	rjmp	.+44     	; 0x271a <prvAddCurrentTaskToDelayedList+0x9c>
    26ee:	60 91 96 09 	lds	r22, 0x0996	; 0x800996 <pxCurrentTCB>
    26f2:	70 91 97 09 	lds	r23, 0x0997	; 0x800997 <pxCurrentTCB+0x1>
    26f6:	80 91 70 09 	lds	r24, 0x0970	; 0x800970 <pxDelayedTaskList>
    26fa:	90 91 71 09 	lds	r25, 0x0971	; 0x800971 <pxDelayedTaskList+0x1>
    26fe:	6e 5f       	subi	r22, 0xFE	; 254
    2700:	7f 4f       	sbci	r23, 0xFF	; 255
    2702:	df d8       	rcall	.-3650   	; 0x18c2 <vListInsert>
    2704:	80 91 47 09 	lds	r24, 0x0947	; 0x800947 <xNextTaskUnblockTime>
    2708:	90 91 48 09 	lds	r25, 0x0948	; 0x800948 <xNextTaskUnblockTime+0x1>
    270c:	c8 17       	cp	r28, r24
    270e:	d9 07       	cpc	r29, r25
    2710:	20 f4       	brcc	.+8      	; 0x271a <prvAddCurrentTaskToDelayedList+0x9c>
    2712:	d0 93 48 09 	sts	0x0948, r29	; 0x800948 <xNextTaskUnblockTime+0x1>
    2716:	c0 93 47 09 	sts	0x0947, r28	; 0x800947 <xNextTaskUnblockTime>
    271a:	df 91       	pop	r29
    271c:	cf 91       	pop	r28
    271e:	1f 91       	pop	r17
    2720:	0f 91       	pop	r16
    2722:	ff 90       	pop	r15
    2724:	08 95       	ret

00002726 <xTaskCreateStatic>:
    2726:	6f 92       	push	r6
    2728:	7f 92       	push	r7
    272a:	8f 92       	push	r8
    272c:	9f 92       	push	r9
    272e:	af 92       	push	r10
    2730:	bf 92       	push	r11
    2732:	cf 92       	push	r12
    2734:	df 92       	push	r13
    2736:	ef 92       	push	r14
    2738:	ff 92       	push	r15
    273a:	0f 93       	push	r16
    273c:	cf 93       	push	r28
    273e:	df 93       	push	r29
    2740:	c1 14       	cp	r12, r1
    2742:	d1 04       	cpc	r13, r1
    2744:	09 f4       	brne	.+2      	; 0x2748 <xTaskCreateStatic+0x22>
    2746:	d1 c0       	rjmp	.+418    	; 0x28ea <xTaskCreateStatic+0x1c4>
    2748:	e1 14       	cp	r14, r1
    274a:	f1 04       	cpc	r15, r1
    274c:	09 f4       	brne	.+2      	; 0x2750 <xTaskCreateStatic+0x2a>
    274e:	d0 c0       	rjmp	.+416    	; 0x28f0 <xTaskCreateStatic+0x1ca>
    2750:	e6 01       	movw	r28, r12
    2752:	59 01       	movw	r10, r18
    2754:	3a 01       	movw	r6, r20
    2756:	4b 01       	movw	r8, r22
    2758:	6c 01       	movw	r12, r24
    275a:	f8 8e       	std	Y+24, r15	; 0x18
    275c:	ef 8a       	std	Y+23, r14	; 0x17
    275e:	65 ea       	ldi	r22, 0xA5	; 165
    2760:	70 e0       	ldi	r23, 0x00	; 0
    2762:	c7 01       	movw	r24, r14
    2764:	cc d7       	rcall	.+3992   	; 0x36fe <memset>
    2766:	81 e0       	ldi	r24, 0x01	; 1
    2768:	68 1a       	sub	r6, r24
    276a:	71 08       	sbc	r7, r1
    276c:	ef 88       	ldd	r14, Y+23	; 0x17
    276e:	f8 8c       	ldd	r15, Y+24	; 0x18
    2770:	e6 0c       	add	r14, r6
    2772:	f7 1c       	adc	r15, r7
    2774:	d4 01       	movw	r26, r8
    2776:	8c 91       	ld	r24, X
    2778:	89 8f       	std	Y+25, r24	; 0x19
    277a:	8c 91       	ld	r24, X
    277c:	88 23       	and	r24, r24
    277e:	a1 f0       	breq	.+40     	; 0x27a8 <xTaskCreateStatic+0x82>
    2780:	ae 01       	movw	r20, r28
    2782:	46 5e       	subi	r20, 0xE6	; 230
    2784:	5f 4f       	sbci	r21, 0xFF	; 255
    2786:	f4 01       	movw	r30, r8
    2788:	31 96       	adiw	r30, 0x01	; 1
    278a:	b8 e0       	ldi	r27, 0x08	; 8
    278c:	8b 0e       	add	r8, r27
    278e:	91 1c       	adc	r9, r1
    2790:	cf 01       	movw	r24, r30
    2792:	21 91       	ld	r18, Z+
    2794:	da 01       	movw	r26, r20
    2796:	2d 93       	st	X+, r18
    2798:	ad 01       	movw	r20, r26
    279a:	dc 01       	movw	r26, r24
    279c:	8c 91       	ld	r24, X
    279e:	88 23       	and	r24, r24
    27a0:	19 f0       	breq	.+6      	; 0x27a8 <xTaskCreateStatic+0x82>
    27a2:	e8 15       	cp	r30, r8
    27a4:	f9 05       	cpc	r31, r9
    27a6:	a1 f7       	brne	.-24     	; 0x2790 <xTaskCreateStatic+0x6a>
    27a8:	18 a2       	std	Y+32, r1	; 0x20
    27aa:	04 30       	cpi	r16, 0x04	; 4
    27ac:	08 f0       	brcs	.+2      	; 0x27b0 <xTaskCreateStatic+0x8a>
    27ae:	03 e0       	ldi	r16, 0x03	; 3
    27b0:	0e 8b       	std	Y+22, r16	; 0x16
    27b2:	09 a3       	std	Y+33, r16	; 0x21
    27b4:	1a a2       	std	Y+34, r1	; 0x22
    27b6:	4e 01       	movw	r8, r28
    27b8:	b2 e0       	ldi	r27, 0x02	; 2
    27ba:	8b 0e       	add	r8, r27
    27bc:	91 1c       	adc	r9, r1
    27be:	c4 01       	movw	r24, r8
    27c0:	5b d8       	rcall	.-3914   	; 0x1878 <vListInitialiseItem>
    27c2:	ce 01       	movw	r24, r28
    27c4:	0c 96       	adiw	r24, 0x0c	; 12
    27c6:	58 d8       	rcall	.-3920   	; 0x1878 <vListInitialiseItem>
    27c8:	d9 87       	std	Y+9, r29	; 0x09
    27ca:	c8 87       	std	Y+8, r28	; 0x08
    27cc:	84 e0       	ldi	r24, 0x04	; 4
    27ce:	90 e0       	ldi	r25, 0x00	; 0
    27d0:	80 1b       	sub	r24, r16
    27d2:	91 09       	sbc	r25, r1
    27d4:	9d 87       	std	Y+13, r25	; 0x0d
    27d6:	8c 87       	std	Y+12, r24	; 0x0c
    27d8:	db 8b       	std	Y+19, r29	; 0x13
    27da:	ca 8b       	std	Y+18, r28	; 0x12
    27dc:	1b a2       	std	Y+35, r1	; 0x23
    27de:	1c a2       	std	Y+36, r1	; 0x24
    27e0:	1d a2       	std	Y+37, r1	; 0x25
    27e2:	1e a2       	std	Y+38, r1	; 0x26
    27e4:	1f a2       	std	Y+39, r1	; 0x27
    27e6:	a5 01       	movw	r20, r10
    27e8:	b6 01       	movw	r22, r12
    27ea:	c7 01       	movw	r24, r14
    27ec:	c2 d8       	rcall	.-3708   	; 0x1972 <pxPortInitialiseStack>
    27ee:	99 83       	std	Y+1, r25	; 0x01
    27f0:	88 83       	st	Y, r24
    27f2:	0f b6       	in	r0, 0x3f	; 63
    27f4:	f8 94       	cli
    27f6:	0f 92       	push	r0
    27f8:	80 91 51 09 	lds	r24, 0x0951	; 0x800951 <uxCurrentNumberOfTasks>
    27fc:	8f 5f       	subi	r24, 0xFF	; 255
    27fe:	80 93 51 09 	sts	0x0951, r24	; 0x800951 <uxCurrentNumberOfTasks>
    2802:	80 91 96 09 	lds	r24, 0x0996	; 0x800996 <pxCurrentTCB>
    2806:	90 91 97 09 	lds	r25, 0x0997	; 0x800997 <pxCurrentTCB+0x1>
    280a:	89 2b       	or	r24, r25
    280c:	89 f5       	brne	.+98     	; 0x2870 <xTaskCreateStatic+0x14a>
    280e:	d0 93 97 09 	sts	0x0997, r29	; 0x800997 <pxCurrentTCB+0x1>
    2812:	c0 93 96 09 	sts	0x0996, r28	; 0x800996 <pxCurrentTCB>
    2816:	80 91 51 09 	lds	r24, 0x0951	; 0x800951 <uxCurrentNumberOfTasks>
    281a:	81 30       	cpi	r24, 0x01	; 1
    281c:	09 f0       	breq	.+2      	; 0x2820 <xTaskCreateStatic+0xfa>
    281e:	38 c0       	rjmp	.+112    	; 0x2890 <xTaskCreateStatic+0x16a>
    2820:	82 e7       	ldi	r24, 0x72	; 114
    2822:	99 e0       	ldi	r25, 0x09	; 9
    2824:	1b d8       	rcall	.-4042   	; 0x185c <vListInitialise>
    2826:	8b e7       	ldi	r24, 0x7B	; 123
    2828:	99 e0       	ldi	r25, 0x09	; 9
    282a:	18 d8       	rcall	.-4048   	; 0x185c <vListInitialise>
    282c:	84 e8       	ldi	r24, 0x84	; 132
    282e:	99 e0       	ldi	r25, 0x09	; 9
    2830:	15 d8       	rcall	.-4054   	; 0x185c <vListInitialise>
    2832:	8d e8       	ldi	r24, 0x8D	; 141
    2834:	99 e0       	ldi	r25, 0x09	; 9
    2836:	12 d8       	rcall	.-4060   	; 0x185c <vListInitialise>
    2838:	8d e3       	ldi	r24, 0x3D	; 61
    283a:	99 e0       	ldi	r25, 0x09	; 9
    283c:	0f d8       	rcall	.-4066   	; 0x185c <vListInitialise>
    283e:	84 e3       	ldi	r24, 0x34	; 52
    2840:	99 e0       	ldi	r25, 0x09	; 9
    2842:	0c d8       	rcall	.-4072   	; 0x185c <vListInitialise>
    2844:	85 e6       	ldi	r24, 0x65	; 101
    2846:	99 e0       	ldi	r25, 0x09	; 9
    2848:	09 d8       	rcall	.-4078   	; 0x185c <vListInitialise>
    284a:	8c e5       	ldi	r24, 0x5C	; 92
    284c:	99 e0       	ldi	r25, 0x09	; 9
    284e:	06 d8       	rcall	.-4084   	; 0x185c <vListInitialise>
    2850:	82 e5       	ldi	r24, 0x52	; 82
    2852:	99 e0       	ldi	r25, 0x09	; 9
    2854:	03 d8       	rcall	.-4090   	; 0x185c <vListInitialise>
    2856:	8d e3       	ldi	r24, 0x3D	; 61
    2858:	99 e0       	ldi	r25, 0x09	; 9
    285a:	90 93 71 09 	sts	0x0971, r25	; 0x800971 <pxDelayedTaskList+0x1>
    285e:	80 93 70 09 	sts	0x0970, r24	; 0x800970 <pxDelayedTaskList>
    2862:	84 e3       	ldi	r24, 0x34	; 52
    2864:	99 e0       	ldi	r25, 0x09	; 9
    2866:	90 93 6f 09 	sts	0x096F, r25	; 0x80096f <pxOverflowDelayedTaskList+0x1>
    286a:	80 93 6e 09 	sts	0x096E, r24	; 0x80096e <pxOverflowDelayedTaskList>
    286e:	10 c0       	rjmp	.+32     	; 0x2890 <xTaskCreateStatic+0x16a>
    2870:	80 91 4d 09 	lds	r24, 0x094D	; 0x80094d <xSchedulerRunning>
    2874:	81 11       	cpse	r24, r1
    2876:	0c c0       	rjmp	.+24     	; 0x2890 <xTaskCreateStatic+0x16a>
    2878:	e0 91 96 09 	lds	r30, 0x0996	; 0x800996 <pxCurrentTCB>
    287c:	f0 91 97 09 	lds	r31, 0x0997	; 0x800997 <pxCurrentTCB+0x1>
    2880:	96 89       	ldd	r25, Z+22	; 0x16
    2882:	8e 89       	ldd	r24, Y+22	; 0x16
    2884:	89 17       	cp	r24, r25
    2886:	20 f0       	brcs	.+8      	; 0x2890 <xTaskCreateStatic+0x16a>
    2888:	d0 93 97 09 	sts	0x0997, r29	; 0x800997 <pxCurrentTCB+0x1>
    288c:	c0 93 96 09 	sts	0x0996, r28	; 0x800996 <pxCurrentTCB>
    2890:	80 91 49 09 	lds	r24, 0x0949	; 0x800949 <uxTaskNumber>
    2894:	8f 5f       	subi	r24, 0xFF	; 255
    2896:	80 93 49 09 	sts	0x0949, r24	; 0x800949 <uxTaskNumber>
    289a:	8e 89       	ldd	r24, Y+22	; 0x16
    289c:	90 91 4e 09 	lds	r25, 0x094E	; 0x80094e <uxTopReadyPriority>
    28a0:	98 17       	cp	r25, r24
    28a2:	10 f4       	brcc	.+4      	; 0x28a8 <xTaskCreateStatic+0x182>
    28a4:	80 93 4e 09 	sts	0x094E, r24	; 0x80094e <uxTopReadyPriority>
    28a8:	90 e0       	ldi	r25, 0x00	; 0
    28aa:	9c 01       	movw	r18, r24
    28ac:	22 0f       	add	r18, r18
    28ae:	33 1f       	adc	r19, r19
    28b0:	22 0f       	add	r18, r18
    28b2:	33 1f       	adc	r19, r19
    28b4:	22 0f       	add	r18, r18
    28b6:	33 1f       	adc	r19, r19
    28b8:	82 0f       	add	r24, r18
    28ba:	93 1f       	adc	r25, r19
    28bc:	b4 01       	movw	r22, r8
    28be:	8e 58       	subi	r24, 0x8E	; 142
    28c0:	96 4f       	sbci	r25, 0xF6	; 246
    28c2:	0e 94 40 0c 	call	0x1880	; 0x1880 <vListInsertEnd>
    28c6:	0f 90       	pop	r0
    28c8:	0f be       	out	0x3f, r0	; 63
    28ca:	80 91 4d 09 	lds	r24, 0x094D	; 0x80094d <xSchedulerRunning>
    28ce:	88 23       	and	r24, r24
    28d0:	91 f0       	breq	.+36     	; 0x28f6 <xTaskCreateStatic+0x1d0>
    28d2:	e0 91 96 09 	lds	r30, 0x0996	; 0x800996 <pxCurrentTCB>
    28d6:	f0 91 97 09 	lds	r31, 0x0997	; 0x800997 <pxCurrentTCB+0x1>
    28da:	96 89       	ldd	r25, Z+22	; 0x16
    28dc:	8e 89       	ldd	r24, Y+22	; 0x16
    28de:	98 17       	cp	r25, r24
    28e0:	68 f4       	brcc	.+26     	; 0x28fc <xTaskCreateStatic+0x1d6>
    28e2:	f5 d8       	rcall	.-3606   	; 0x1ace <vPortYield>
    28e4:	8c 2f       	mov	r24, r28
    28e6:	9d 2f       	mov	r25, r29
    28e8:	0b c0       	rjmp	.+22     	; 0x2900 <xTaskCreateStatic+0x1da>
    28ea:	80 e0       	ldi	r24, 0x00	; 0
    28ec:	90 e0       	ldi	r25, 0x00	; 0
    28ee:	08 c0       	rjmp	.+16     	; 0x2900 <xTaskCreateStatic+0x1da>
    28f0:	80 e0       	ldi	r24, 0x00	; 0
    28f2:	90 e0       	ldi	r25, 0x00	; 0
    28f4:	05 c0       	rjmp	.+10     	; 0x2900 <xTaskCreateStatic+0x1da>
    28f6:	8c 2f       	mov	r24, r28
    28f8:	9d 2f       	mov	r25, r29
    28fa:	02 c0       	rjmp	.+4      	; 0x2900 <xTaskCreateStatic+0x1da>
    28fc:	8c 2f       	mov	r24, r28
    28fe:	9d 2f       	mov	r25, r29
    2900:	df 91       	pop	r29
    2902:	cf 91       	pop	r28
    2904:	0f 91       	pop	r16
    2906:	ff 90       	pop	r15
    2908:	ef 90       	pop	r14
    290a:	df 90       	pop	r13
    290c:	cf 90       	pop	r12
    290e:	bf 90       	pop	r11
    2910:	af 90       	pop	r10
    2912:	9f 90       	pop	r9
    2914:	8f 90       	pop	r8
    2916:	7f 90       	pop	r7
    2918:	6f 90       	pop	r6
    291a:	08 95       	ret

0000291c <vTaskStartScheduler>:
    291c:	cf 92       	push	r12
    291e:	df 92       	push	r13
    2920:	ef 92       	push	r14
    2922:	ff 92       	push	r15
    2924:	0f 93       	push	r16
    2926:	cf 93       	push	r28
    2928:	df 93       	push	r29
    292a:	00 d0       	rcall	.+0      	; 0x292c <vTaskStartScheduler+0x10>
    292c:	00 d0       	rcall	.+0      	; 0x292e <vTaskStartScheduler+0x12>
    292e:	cd b7       	in	r28, 0x3d	; 61
    2930:	de b7       	in	r29, 0x3e	; 62
    2932:	1e 82       	std	Y+6, r1	; 0x06
    2934:	1d 82       	std	Y+5, r1	; 0x05
    2936:	1c 82       	std	Y+4, r1	; 0x04
    2938:	1b 82       	std	Y+3, r1	; 0x03
    293a:	ae 01       	movw	r20, r28
    293c:	4f 5f       	subi	r20, 0xFF	; 255
    293e:	5f 4f       	sbci	r21, 0xFF	; 255
    2940:	be 01       	movw	r22, r28
    2942:	6d 5f       	subi	r22, 0xFD	; 253
    2944:	7f 4f       	sbci	r23, 0xFF	; 255
    2946:	ce 01       	movw	r24, r28
    2948:	05 96       	adiw	r24, 0x05	; 5
    294a:	0e 94 0e 0c 	call	0x181c	; 0x181c <vApplicationGetIdleTaskMemory>
    294e:	cd 80       	ldd	r12, Y+5	; 0x05
    2950:	de 80       	ldd	r13, Y+6	; 0x06
    2952:	eb 80       	ldd	r14, Y+3	; 0x03
    2954:	fc 80       	ldd	r15, Y+4	; 0x04
    2956:	49 81       	ldd	r20, Y+1	; 0x01
    2958:	5a 81       	ldd	r21, Y+2	; 0x02
    295a:	00 e0       	ldi	r16, 0x00	; 0
    295c:	20 e0       	ldi	r18, 0x00	; 0
    295e:	30 e0       	ldi	r19, 0x00	; 0
    2960:	6f e7       	ldi	r22, 0x7F	; 127
    2962:	72 e0       	ldi	r23, 0x02	; 2
    2964:	82 e7       	ldi	r24, 0x72	; 114
    2966:	90 e0       	ldi	r25, 0x00	; 0
    2968:	de de       	rcall	.-580    	; 0x2726 <xTaskCreateStatic>
    296a:	89 2b       	or	r24, r25
    296c:	91 f0       	breq	.+36     	; 0x2992 <vTaskStartScheduler+0x76>
    296e:	83 d4       	rcall	.+2310   	; 0x3276 <xTimerCreateTimerTask>
    2970:	81 30       	cpi	r24, 0x01	; 1
    2972:	79 f4       	brne	.+30     	; 0x2992 <vTaskStartScheduler+0x76>
    2974:	f8 94       	cli
    2976:	8f ef       	ldi	r24, 0xFF	; 255
    2978:	9f ef       	ldi	r25, 0xFF	; 255
    297a:	90 93 48 09 	sts	0x0948, r25	; 0x800948 <xNextTaskUnblockTime+0x1>
    297e:	80 93 47 09 	sts	0x0947, r24	; 0x800947 <xNextTaskUnblockTime>
    2982:	81 e0       	ldi	r24, 0x01	; 1
    2984:	80 93 4d 09 	sts	0x094D, r24	; 0x80094d <xSchedulerRunning>
    2988:	10 92 50 09 	sts	0x0950, r1	; 0x800950 <xTickCount+0x1>
    298c:	10 92 4f 09 	sts	0x094F, r1	; 0x80094f <xTickCount>
    2990:	62 d8       	rcall	.-3900   	; 0x1a56 <xPortStartScheduler>
    2992:	26 96       	adiw	r28, 0x06	; 6
    2994:	0f b6       	in	r0, 0x3f	; 63
    2996:	f8 94       	cli
    2998:	de bf       	out	0x3e, r29	; 62
    299a:	0f be       	out	0x3f, r0	; 63
    299c:	cd bf       	out	0x3d, r28	; 61
    299e:	df 91       	pop	r29
    29a0:	cf 91       	pop	r28
    29a2:	0f 91       	pop	r16
    29a4:	ff 90       	pop	r15
    29a6:	ef 90       	pop	r14
    29a8:	df 90       	pop	r13
    29aa:	cf 90       	pop	r12
    29ac:	08 95       	ret

000029ae <vTaskSuspendAll>:
    29ae:	80 91 46 09 	lds	r24, 0x0946	; 0x800946 <uxSchedulerSuspended>
    29b2:	8f 5f       	subi	r24, 0xFF	; 255
    29b4:	80 93 46 09 	sts	0x0946, r24	; 0x800946 <uxSchedulerSuspended>
    29b8:	08 95       	ret

000029ba <xTaskGetTickCount>:
    29ba:	0f b6       	in	r0, 0x3f	; 63
    29bc:	f8 94       	cli
    29be:	0f 92       	push	r0
    29c0:	80 91 4f 09 	lds	r24, 0x094F	; 0x80094f <xTickCount>
    29c4:	90 91 50 09 	lds	r25, 0x0950	; 0x800950 <xTickCount+0x1>
    29c8:	0f 90       	pop	r0
    29ca:	0f be       	out	0x3f, r0	; 63
    29cc:	08 95       	ret

000029ce <xTaskIncrementTick>:
    29ce:	cf 92       	push	r12
    29d0:	df 92       	push	r13
    29d2:	ef 92       	push	r14
    29d4:	ff 92       	push	r15
    29d6:	0f 93       	push	r16
    29d8:	1f 93       	push	r17
    29da:	cf 93       	push	r28
    29dc:	df 93       	push	r29
    29de:	80 91 46 09 	lds	r24, 0x0946	; 0x800946 <uxSchedulerSuspended>
    29e2:	81 11       	cpse	r24, r1
    29e4:	98 c0       	rjmp	.+304    	; 0x2b16 <xTaskIncrementTick+0x148>
    29e6:	e0 90 4f 09 	lds	r14, 0x094F	; 0x80094f <xTickCount>
    29ea:	f0 90 50 09 	lds	r15, 0x0950	; 0x800950 <xTickCount+0x1>
    29ee:	8f ef       	ldi	r24, 0xFF	; 255
    29f0:	e8 1a       	sub	r14, r24
    29f2:	f8 0a       	sbc	r15, r24
    29f4:	f0 92 50 09 	sts	0x0950, r15	; 0x800950 <xTickCount+0x1>
    29f8:	e0 92 4f 09 	sts	0x094F, r14	; 0x80094f <xTickCount>
    29fc:	e1 14       	cp	r14, r1
    29fe:	f1 04       	cpc	r15, r1
    2a00:	b1 f4       	brne	.+44     	; 0x2a2e <xTaskIncrementTick+0x60>
    2a02:	80 91 70 09 	lds	r24, 0x0970	; 0x800970 <pxDelayedTaskList>
    2a06:	90 91 71 09 	lds	r25, 0x0971	; 0x800971 <pxDelayedTaskList+0x1>
    2a0a:	20 91 6e 09 	lds	r18, 0x096E	; 0x80096e <pxOverflowDelayedTaskList>
    2a0e:	30 91 6f 09 	lds	r19, 0x096F	; 0x80096f <pxOverflowDelayedTaskList+0x1>
    2a12:	30 93 71 09 	sts	0x0971, r19	; 0x800971 <pxDelayedTaskList+0x1>
    2a16:	20 93 70 09 	sts	0x0970, r18	; 0x800970 <pxDelayedTaskList>
    2a1a:	90 93 6f 09 	sts	0x096F, r25	; 0x80096f <pxOverflowDelayedTaskList+0x1>
    2a1e:	80 93 6e 09 	sts	0x096E, r24	; 0x80096e <pxOverflowDelayedTaskList>
    2a22:	80 91 4a 09 	lds	r24, 0x094A	; 0x80094a <xNumOfOverflows>
    2a26:	8f 5f       	subi	r24, 0xFF	; 255
    2a28:	80 93 4a 09 	sts	0x094A, r24	; 0x80094a <xNumOfOverflows>
    2a2c:	09 de       	rcall	.-1006   	; 0x2640 <prvResetNextTaskUnblockTime>
    2a2e:	80 91 47 09 	lds	r24, 0x0947	; 0x800947 <xNextTaskUnblockTime>
    2a32:	90 91 48 09 	lds	r25, 0x0948	; 0x800948 <xNextTaskUnblockTime+0x1>
    2a36:	e8 16       	cp	r14, r24
    2a38:	f9 06       	cpc	r15, r25
    2a3a:	10 f4       	brcc	.+4      	; 0x2a40 <xTaskIncrementTick+0x72>
    2a3c:	d1 2c       	mov	r13, r1
    2a3e:	53 c0       	rjmp	.+166    	; 0x2ae6 <xTaskIncrementTick+0x118>
    2a40:	d1 2c       	mov	r13, r1
    2a42:	cc 24       	eor	r12, r12
    2a44:	c3 94       	inc	r12
    2a46:	e0 91 70 09 	lds	r30, 0x0970	; 0x800970 <pxDelayedTaskList>
    2a4a:	f0 91 71 09 	lds	r31, 0x0971	; 0x800971 <pxDelayedTaskList+0x1>
    2a4e:	80 81       	ld	r24, Z
    2a50:	81 11       	cpse	r24, r1
    2a52:	07 c0       	rjmp	.+14     	; 0x2a62 <xTaskIncrementTick+0x94>
    2a54:	8f ef       	ldi	r24, 0xFF	; 255
    2a56:	9f ef       	ldi	r25, 0xFF	; 255
    2a58:	90 93 48 09 	sts	0x0948, r25	; 0x800948 <xNextTaskUnblockTime+0x1>
    2a5c:	80 93 47 09 	sts	0x0947, r24	; 0x800947 <xNextTaskUnblockTime>
    2a60:	42 c0       	rjmp	.+132    	; 0x2ae6 <xTaskIncrementTick+0x118>
    2a62:	e0 91 70 09 	lds	r30, 0x0970	; 0x800970 <pxDelayedTaskList>
    2a66:	f0 91 71 09 	lds	r31, 0x0971	; 0x800971 <pxDelayedTaskList+0x1>
    2a6a:	05 80       	ldd	r0, Z+5	; 0x05
    2a6c:	f6 81       	ldd	r31, Z+6	; 0x06
    2a6e:	e0 2d       	mov	r30, r0
    2a70:	c6 81       	ldd	r28, Z+6	; 0x06
    2a72:	d7 81       	ldd	r29, Z+7	; 0x07
    2a74:	8a 81       	ldd	r24, Y+2	; 0x02
    2a76:	9b 81       	ldd	r25, Y+3	; 0x03
    2a78:	e8 16       	cp	r14, r24
    2a7a:	f9 06       	cpc	r15, r25
    2a7c:	28 f4       	brcc	.+10     	; 0x2a88 <xTaskIncrementTick+0xba>
    2a7e:	90 93 48 09 	sts	0x0948, r25	; 0x800948 <xNextTaskUnblockTime+0x1>
    2a82:	80 93 47 09 	sts	0x0947, r24	; 0x800947 <xNextTaskUnblockTime>
    2a86:	2f c0       	rjmp	.+94     	; 0x2ae6 <xTaskIncrementTick+0x118>
    2a88:	8e 01       	movw	r16, r28
    2a8a:	0e 5f       	subi	r16, 0xFE	; 254
    2a8c:	1f 4f       	sbci	r17, 0xFF	; 255
    2a8e:	c8 01       	movw	r24, r16
    2a90:	0e 94 92 0c 	call	0x1924	; 0x1924 <uxListRemove>
    2a94:	8c 89       	ldd	r24, Y+20	; 0x14
    2a96:	9d 89       	ldd	r25, Y+21	; 0x15
    2a98:	89 2b       	or	r24, r25
    2a9a:	21 f0       	breq	.+8      	; 0x2aa4 <xTaskIncrementTick+0xd6>
    2a9c:	ce 01       	movw	r24, r28
    2a9e:	0c 96       	adiw	r24, 0x0c	; 12
    2aa0:	0e 94 92 0c 	call	0x1924	; 0x1924 <uxListRemove>
    2aa4:	8e 89       	ldd	r24, Y+22	; 0x16
    2aa6:	90 91 4e 09 	lds	r25, 0x094E	; 0x80094e <uxTopReadyPriority>
    2aaa:	98 17       	cp	r25, r24
    2aac:	10 f4       	brcc	.+4      	; 0x2ab2 <xTaskIncrementTick+0xe4>
    2aae:	80 93 4e 09 	sts	0x094E, r24	; 0x80094e <uxTopReadyPriority>
    2ab2:	90 e0       	ldi	r25, 0x00	; 0
    2ab4:	9c 01       	movw	r18, r24
    2ab6:	22 0f       	add	r18, r18
    2ab8:	33 1f       	adc	r19, r19
    2aba:	22 0f       	add	r18, r18
    2abc:	33 1f       	adc	r19, r19
    2abe:	22 0f       	add	r18, r18
    2ac0:	33 1f       	adc	r19, r19
    2ac2:	82 0f       	add	r24, r18
    2ac4:	93 1f       	adc	r25, r19
    2ac6:	b8 01       	movw	r22, r16
    2ac8:	8e 58       	subi	r24, 0x8E	; 142
    2aca:	96 4f       	sbci	r25, 0xF6	; 246
    2acc:	0e 94 40 0c 	call	0x1880	; 0x1880 <vListInsertEnd>
    2ad0:	e0 91 96 09 	lds	r30, 0x0996	; 0x800996 <pxCurrentTCB>
    2ad4:	f0 91 97 09 	lds	r31, 0x0997	; 0x800997 <pxCurrentTCB+0x1>
    2ad8:	9e 89       	ldd	r25, Y+22	; 0x16
    2ada:	86 89       	ldd	r24, Z+22	; 0x16
    2adc:	98 17       	cp	r25, r24
    2ade:	08 f4       	brcc	.+2      	; 0x2ae2 <xTaskIncrementTick+0x114>
    2ae0:	b2 cf       	rjmp	.-156    	; 0x2a46 <xTaskIncrementTick+0x78>
    2ae2:	dc 2c       	mov	r13, r12
    2ae4:	b0 cf       	rjmp	.-160    	; 0x2a46 <xTaskIncrementTick+0x78>
    2ae6:	e0 91 96 09 	lds	r30, 0x0996	; 0x800996 <pxCurrentTCB>
    2aea:	f0 91 97 09 	lds	r31, 0x0997	; 0x800997 <pxCurrentTCB+0x1>
    2aee:	86 89       	ldd	r24, Z+22	; 0x16
    2af0:	90 e0       	ldi	r25, 0x00	; 0
    2af2:	fc 01       	movw	r30, r24
    2af4:	ee 0f       	add	r30, r30
    2af6:	ff 1f       	adc	r31, r31
    2af8:	ee 0f       	add	r30, r30
    2afa:	ff 1f       	adc	r31, r31
    2afc:	ee 0f       	add	r30, r30
    2afe:	ff 1f       	adc	r31, r31
    2b00:	8e 0f       	add	r24, r30
    2b02:	9f 1f       	adc	r25, r31
    2b04:	fc 01       	movw	r30, r24
    2b06:	ee 58       	subi	r30, 0x8E	; 142
    2b08:	f6 4f       	sbci	r31, 0xF6	; 246
    2b0a:	80 81       	ld	r24, Z
    2b0c:	82 30       	cpi	r24, 0x02	; 2
    2b0e:	48 f0       	brcs	.+18     	; 0x2b22 <xTaskIncrementTick+0x154>
    2b10:	dd 24       	eor	r13, r13
    2b12:	d3 94       	inc	r13
    2b14:	06 c0       	rjmp	.+12     	; 0x2b22 <xTaskIncrementTick+0x154>
    2b16:	80 91 4c 09 	lds	r24, 0x094C	; 0x80094c <uxPendedTicks>
    2b1a:	8f 5f       	subi	r24, 0xFF	; 255
    2b1c:	80 93 4c 09 	sts	0x094C, r24	; 0x80094c <uxPendedTicks>
    2b20:	d1 2c       	mov	r13, r1
    2b22:	80 91 4b 09 	lds	r24, 0x094B	; 0x80094b <xYieldPending>
    2b26:	88 23       	and	r24, r24
    2b28:	11 f0       	breq	.+4      	; 0x2b2e <xTaskIncrementTick+0x160>
    2b2a:	dd 24       	eor	r13, r13
    2b2c:	d3 94       	inc	r13
    2b2e:	8d 2d       	mov	r24, r13
    2b30:	df 91       	pop	r29
    2b32:	cf 91       	pop	r28
    2b34:	1f 91       	pop	r17
    2b36:	0f 91       	pop	r16
    2b38:	ff 90       	pop	r15
    2b3a:	ef 90       	pop	r14
    2b3c:	df 90       	pop	r13
    2b3e:	cf 90       	pop	r12
    2b40:	08 95       	ret

00002b42 <xTaskResumeAll>:
    2b42:	df 92       	push	r13
    2b44:	ef 92       	push	r14
    2b46:	ff 92       	push	r15
    2b48:	0f 93       	push	r16
    2b4a:	1f 93       	push	r17
    2b4c:	cf 93       	push	r28
    2b4e:	df 93       	push	r29
    2b50:	0f b6       	in	r0, 0x3f	; 63
    2b52:	f8 94       	cli
    2b54:	0f 92       	push	r0
    2b56:	80 91 46 09 	lds	r24, 0x0946	; 0x800946 <uxSchedulerSuspended>
    2b5a:	81 50       	subi	r24, 0x01	; 1
    2b5c:	80 93 46 09 	sts	0x0946, r24	; 0x800946 <uxSchedulerSuspended>
    2b60:	80 91 46 09 	lds	r24, 0x0946	; 0x800946 <uxSchedulerSuspended>
    2b64:	81 11       	cpse	r24, r1
    2b66:	5d c0       	rjmp	.+186    	; 0x2c22 <xTaskResumeAll+0xe0>
    2b68:	80 91 51 09 	lds	r24, 0x0951	; 0x800951 <uxCurrentNumberOfTasks>
    2b6c:	81 11       	cpse	r24, r1
    2b6e:	33 c0       	rjmp	.+102    	; 0x2bd6 <xTaskResumeAll+0x94>
    2b70:	5b c0       	rjmp	.+182    	; 0x2c28 <xTaskResumeAll+0xe6>
    2b72:	d7 01       	movw	r26, r14
    2b74:	15 96       	adiw	r26, 0x05	; 5
    2b76:	ed 91       	ld	r30, X+
    2b78:	fc 91       	ld	r31, X
    2b7a:	16 97       	sbiw	r26, 0x06	; 6
    2b7c:	c6 81       	ldd	r28, Z+6	; 0x06
    2b7e:	d7 81       	ldd	r29, Z+7	; 0x07
    2b80:	ce 01       	movw	r24, r28
    2b82:	0c 96       	adiw	r24, 0x0c	; 12
    2b84:	0e 94 92 0c 	call	0x1924	; 0x1924 <uxListRemove>
    2b88:	8e 01       	movw	r16, r28
    2b8a:	0e 5f       	subi	r16, 0xFE	; 254
    2b8c:	1f 4f       	sbci	r17, 0xFF	; 255
    2b8e:	c8 01       	movw	r24, r16
    2b90:	0e 94 92 0c 	call	0x1924	; 0x1924 <uxListRemove>
    2b94:	8e 89       	ldd	r24, Y+22	; 0x16
    2b96:	90 91 4e 09 	lds	r25, 0x094E	; 0x80094e <uxTopReadyPriority>
    2b9a:	98 17       	cp	r25, r24
    2b9c:	10 f4       	brcc	.+4      	; 0x2ba2 <xTaskResumeAll+0x60>
    2b9e:	80 93 4e 09 	sts	0x094E, r24	; 0x80094e <uxTopReadyPriority>
    2ba2:	90 e0       	ldi	r25, 0x00	; 0
    2ba4:	9c 01       	movw	r18, r24
    2ba6:	22 0f       	add	r18, r18
    2ba8:	33 1f       	adc	r19, r19
    2baa:	22 0f       	add	r18, r18
    2bac:	33 1f       	adc	r19, r19
    2bae:	22 0f       	add	r18, r18
    2bb0:	33 1f       	adc	r19, r19
    2bb2:	82 0f       	add	r24, r18
    2bb4:	93 1f       	adc	r25, r19
    2bb6:	b8 01       	movw	r22, r16
    2bb8:	8e 58       	subi	r24, 0x8E	; 142
    2bba:	96 4f       	sbci	r25, 0xF6	; 246
    2bbc:	0e 94 40 0c 	call	0x1880	; 0x1880 <vListInsertEnd>
    2bc0:	e0 91 96 09 	lds	r30, 0x0996	; 0x800996 <pxCurrentTCB>
    2bc4:	f0 91 97 09 	lds	r31, 0x0997	; 0x800997 <pxCurrentTCB+0x1>
    2bc8:	9e 89       	ldd	r25, Y+22	; 0x16
    2bca:	86 89       	ldd	r24, Z+22	; 0x16
    2bcc:	98 17       	cp	r25, r24
    2bce:	68 f0       	brcs	.+26     	; 0x2bea <xTaskResumeAll+0xa8>
    2bd0:	d0 92 4b 09 	sts	0x094B, r13	; 0x80094b <xYieldPending>
    2bd4:	0a c0       	rjmp	.+20     	; 0x2bea <xTaskResumeAll+0xa8>
    2bd6:	c0 e0       	ldi	r28, 0x00	; 0
    2bd8:	d0 e0       	ldi	r29, 0x00	; 0
    2bda:	0f 2e       	mov	r0, r31
    2bdc:	f5 e6       	ldi	r31, 0x65	; 101
    2bde:	ef 2e       	mov	r14, r31
    2be0:	f9 e0       	ldi	r31, 0x09	; 9
    2be2:	ff 2e       	mov	r15, r31
    2be4:	f0 2d       	mov	r31, r0
    2be6:	dd 24       	eor	r13, r13
    2be8:	d3 94       	inc	r13
    2bea:	f7 01       	movw	r30, r14
    2bec:	80 81       	ld	r24, Z
    2bee:	81 11       	cpse	r24, r1
    2bf0:	c0 cf       	rjmp	.-128    	; 0x2b72 <xTaskResumeAll+0x30>
    2bf2:	cd 2b       	or	r28, r29
    2bf4:	09 f0       	breq	.+2      	; 0x2bf8 <xTaskResumeAll+0xb6>
    2bf6:	24 dd       	rcall	.-1464   	; 0x2640 <prvResetNextTaskUnblockTime>
    2bf8:	c0 91 4c 09 	lds	r28, 0x094C	; 0x80094c <uxPendedTicks>
    2bfc:	cc 23       	and	r28, r28
    2bfe:	49 f0       	breq	.+18     	; 0x2c12 <xTaskResumeAll+0xd0>
    2c00:	d1 e0       	ldi	r29, 0x01	; 1
    2c02:	e5 de       	rcall	.-566    	; 0x29ce <xTaskIncrementTick>
    2c04:	81 11       	cpse	r24, r1
    2c06:	d0 93 4b 09 	sts	0x094B, r29	; 0x80094b <xYieldPending>
    2c0a:	c1 50       	subi	r28, 0x01	; 1
    2c0c:	d1 f7       	brne	.-12     	; 0x2c02 <xTaskResumeAll+0xc0>
    2c0e:	10 92 4c 09 	sts	0x094C, r1	; 0x80094c <uxPendedTicks>
    2c12:	80 91 4b 09 	lds	r24, 0x094B	; 0x80094b <xYieldPending>
    2c16:	88 23       	and	r24, r24
    2c18:	31 f0       	breq	.+12     	; 0x2c26 <xTaskResumeAll+0xe4>
    2c1a:	0e 94 67 0d 	call	0x1ace	; 0x1ace <vPortYield>
    2c1e:	81 e0       	ldi	r24, 0x01	; 1
    2c20:	03 c0       	rjmp	.+6      	; 0x2c28 <xTaskResumeAll+0xe6>
    2c22:	80 e0       	ldi	r24, 0x00	; 0
    2c24:	01 c0       	rjmp	.+2      	; 0x2c28 <xTaskResumeAll+0xe6>
    2c26:	80 e0       	ldi	r24, 0x00	; 0
    2c28:	0f 90       	pop	r0
    2c2a:	0f be       	out	0x3f, r0	; 63
    2c2c:	df 91       	pop	r29
    2c2e:	cf 91       	pop	r28
    2c30:	1f 91       	pop	r17
    2c32:	0f 91       	pop	r16
    2c34:	ff 90       	pop	r15
    2c36:	ef 90       	pop	r14
    2c38:	df 90       	pop	r13
    2c3a:	08 95       	ret

00002c3c <vTaskDelay>:
    2c3c:	cf 93       	push	r28
    2c3e:	df 93       	push	r29
    2c40:	ec 01       	movw	r28, r24
    2c42:	89 2b       	or	r24, r25
    2c44:	39 f0       	breq	.+14     	; 0x2c54 <vTaskDelay+0x18>
    2c46:	b3 de       	rcall	.-666    	; 0x29ae <vTaskSuspendAll>
    2c48:	60 e0       	ldi	r22, 0x00	; 0
    2c4a:	ce 01       	movw	r24, r28
    2c4c:	18 dd       	rcall	.-1488   	; 0x267e <prvAddCurrentTaskToDelayedList>
    2c4e:	79 df       	rcall	.-270    	; 0x2b42 <xTaskResumeAll>
    2c50:	81 11       	cpse	r24, r1
    2c52:	02 c0       	rjmp	.+4      	; 0x2c58 <vTaskDelay+0x1c>
    2c54:	0e 94 67 0d 	call	0x1ace	; 0x1ace <vPortYield>
    2c58:	df 91       	pop	r29
    2c5a:	cf 91       	pop	r28
    2c5c:	08 95       	ret

00002c5e <vTaskSwitchContext>:
    2c5e:	80 91 46 09 	lds	r24, 0x0946	; 0x800946 <uxSchedulerSuspended>
    2c62:	88 23       	and	r24, r24
    2c64:	21 f0       	breq	.+8      	; 0x2c6e <vTaskSwitchContext+0x10>
    2c66:	81 e0       	ldi	r24, 0x01	; 1
    2c68:	80 93 4b 09 	sts	0x094B, r24	; 0x80094b <xYieldPending>
    2c6c:	08 95       	ret
    2c6e:	10 92 4b 09 	sts	0x094B, r1	; 0x80094b <xYieldPending>
    2c72:	a0 91 96 09 	lds	r26, 0x0996	; 0x800996 <pxCurrentTCB>
    2c76:	b0 91 97 09 	lds	r27, 0x0997	; 0x800997 <pxCurrentTCB+0x1>
    2c7a:	e0 91 96 09 	lds	r30, 0x0996	; 0x800996 <pxCurrentTCB>
    2c7e:	f0 91 97 09 	lds	r31, 0x0997	; 0x800997 <pxCurrentTCB+0x1>
    2c82:	2d 91       	ld	r18, X+
    2c84:	3c 91       	ld	r19, X
    2c86:	87 89       	ldd	r24, Z+23	; 0x17
    2c88:	90 8d       	ldd	r25, Z+24	; 0x18
    2c8a:	82 17       	cp	r24, r18
    2c8c:	93 07       	cpc	r25, r19
    2c8e:	60 f0       	brcs	.+24     	; 0x2ca8 <vTaskSwitchContext+0x4a>
    2c90:	60 91 96 09 	lds	r22, 0x0996	; 0x800996 <pxCurrentTCB>
    2c94:	70 91 97 09 	lds	r23, 0x0997	; 0x800997 <pxCurrentTCB+0x1>
    2c98:	80 91 96 09 	lds	r24, 0x0996	; 0x800996 <pxCurrentTCB>
    2c9c:	90 91 97 09 	lds	r25, 0x0997	; 0x800997 <pxCurrentTCB+0x1>
    2ca0:	67 5e       	subi	r22, 0xE7	; 231
    2ca2:	7f 4f       	sbci	r23, 0xFF	; 255
    2ca4:	0e 94 01 0c 	call	0x1802	; 0x1802 <vApplicationStackOverflowHook>
    2ca8:	20 91 4e 09 	lds	r18, 0x094E	; 0x80094e <uxTopReadyPriority>
    2cac:	82 2f       	mov	r24, r18
    2cae:	90 e0       	ldi	r25, 0x00	; 0
    2cb0:	fc 01       	movw	r30, r24
    2cb2:	ee 0f       	add	r30, r30
    2cb4:	ff 1f       	adc	r31, r31
    2cb6:	ee 0f       	add	r30, r30
    2cb8:	ff 1f       	adc	r31, r31
    2cba:	ee 0f       	add	r30, r30
    2cbc:	ff 1f       	adc	r31, r31
    2cbe:	e8 0f       	add	r30, r24
    2cc0:	f9 1f       	adc	r31, r25
    2cc2:	ee 58       	subi	r30, 0x8E	; 142
    2cc4:	f6 4f       	sbci	r31, 0xF6	; 246
    2cc6:	30 81       	ld	r19, Z
    2cc8:	31 11       	cpse	r19, r1
    2cca:	11 c0       	rjmp	.+34     	; 0x2cee <vTaskSwitchContext+0x90>
    2ccc:	21 50       	subi	r18, 0x01	; 1
    2cce:	82 2f       	mov	r24, r18
    2cd0:	90 e0       	ldi	r25, 0x00	; 0
    2cd2:	fc 01       	movw	r30, r24
    2cd4:	ee 0f       	add	r30, r30
    2cd6:	ff 1f       	adc	r31, r31
    2cd8:	ee 0f       	add	r30, r30
    2cda:	ff 1f       	adc	r31, r31
    2cdc:	ee 0f       	add	r30, r30
    2cde:	ff 1f       	adc	r31, r31
    2ce0:	e8 0f       	add	r30, r24
    2ce2:	f9 1f       	adc	r31, r25
    2ce4:	ee 58       	subi	r30, 0x8E	; 142
    2ce6:	f6 4f       	sbci	r31, 0xF6	; 246
    2ce8:	30 81       	ld	r19, Z
    2cea:	33 23       	and	r19, r19
    2cec:	79 f3       	breq	.-34     	; 0x2ccc <vTaskSwitchContext+0x6e>
    2cee:	ac 01       	movw	r20, r24
    2cf0:	44 0f       	add	r20, r20
    2cf2:	55 1f       	adc	r21, r21
    2cf4:	44 0f       	add	r20, r20
    2cf6:	55 1f       	adc	r21, r21
    2cf8:	44 0f       	add	r20, r20
    2cfa:	55 1f       	adc	r21, r21
    2cfc:	48 0f       	add	r20, r24
    2cfe:	59 1f       	adc	r21, r25
    2d00:	da 01       	movw	r26, r20
    2d02:	ae 58       	subi	r26, 0x8E	; 142
    2d04:	b6 4f       	sbci	r27, 0xF6	; 246
    2d06:	11 96       	adiw	r26, 0x01	; 1
    2d08:	ed 91       	ld	r30, X+
    2d0a:	fc 91       	ld	r31, X
    2d0c:	12 97       	sbiw	r26, 0x02	; 2
    2d0e:	02 80       	ldd	r0, Z+2	; 0x02
    2d10:	f3 81       	ldd	r31, Z+3	; 0x03
    2d12:	e0 2d       	mov	r30, r0
    2d14:	12 96       	adiw	r26, 0x02	; 2
    2d16:	fc 93       	st	X, r31
    2d18:	ee 93       	st	-X, r30
    2d1a:	11 97       	sbiw	r26, 0x01	; 1
    2d1c:	4b 58       	subi	r20, 0x8B	; 139
    2d1e:	56 4f       	sbci	r21, 0xF6	; 246
    2d20:	e4 17       	cp	r30, r20
    2d22:	f5 07       	cpc	r31, r21
    2d24:	29 f4       	brne	.+10     	; 0x2d30 <vTaskSwitchContext+0xd2>
    2d26:	42 81       	ldd	r20, Z+2	; 0x02
    2d28:	53 81       	ldd	r21, Z+3	; 0x03
    2d2a:	fd 01       	movw	r30, r26
    2d2c:	52 83       	std	Z+2, r21	; 0x02
    2d2e:	41 83       	std	Z+1, r20	; 0x01
    2d30:	fc 01       	movw	r30, r24
    2d32:	ee 0f       	add	r30, r30
    2d34:	ff 1f       	adc	r31, r31
    2d36:	ee 0f       	add	r30, r30
    2d38:	ff 1f       	adc	r31, r31
    2d3a:	ee 0f       	add	r30, r30
    2d3c:	ff 1f       	adc	r31, r31
    2d3e:	8e 0f       	add	r24, r30
    2d40:	9f 1f       	adc	r25, r31
    2d42:	fc 01       	movw	r30, r24
    2d44:	ee 58       	subi	r30, 0x8E	; 142
    2d46:	f6 4f       	sbci	r31, 0xF6	; 246
    2d48:	01 80       	ldd	r0, Z+1	; 0x01
    2d4a:	f2 81       	ldd	r31, Z+2	; 0x02
    2d4c:	e0 2d       	mov	r30, r0
    2d4e:	86 81       	ldd	r24, Z+6	; 0x06
    2d50:	97 81       	ldd	r25, Z+7	; 0x07
    2d52:	90 93 97 09 	sts	0x0997, r25	; 0x800997 <pxCurrentTCB+0x1>
    2d56:	80 93 96 09 	sts	0x0996, r24	; 0x800996 <pxCurrentTCB>
    2d5a:	20 93 4e 09 	sts	0x094E, r18	; 0x80094e <uxTopReadyPriority>
    2d5e:	08 95       	ret

00002d60 <vTaskPlaceOnEventList>:
    2d60:	cf 93       	push	r28
    2d62:	df 93       	push	r29
    2d64:	eb 01       	movw	r28, r22
    2d66:	60 91 96 09 	lds	r22, 0x0996	; 0x800996 <pxCurrentTCB>
    2d6a:	70 91 97 09 	lds	r23, 0x0997	; 0x800997 <pxCurrentTCB+0x1>
    2d6e:	64 5f       	subi	r22, 0xF4	; 244
    2d70:	7f 4f       	sbci	r23, 0xFF	; 255
    2d72:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <vListInsert>
    2d76:	61 e0       	ldi	r22, 0x01	; 1
    2d78:	ce 01       	movw	r24, r28
    2d7a:	81 dc       	rcall	.-1790   	; 0x267e <prvAddCurrentTaskToDelayedList>
    2d7c:	df 91       	pop	r29
    2d7e:	cf 91       	pop	r28
    2d80:	08 95       	ret

00002d82 <vTaskPlaceOnEventListRestricted>:
    2d82:	0f 93       	push	r16
    2d84:	1f 93       	push	r17
    2d86:	cf 93       	push	r28
    2d88:	8b 01       	movw	r16, r22
    2d8a:	c4 2f       	mov	r28, r20
    2d8c:	60 91 96 09 	lds	r22, 0x0996	; 0x800996 <pxCurrentTCB>
    2d90:	70 91 97 09 	lds	r23, 0x0997	; 0x800997 <pxCurrentTCB+0x1>
    2d94:	64 5f       	subi	r22, 0xF4	; 244
    2d96:	7f 4f       	sbci	r23, 0xFF	; 255
    2d98:	0e 94 40 0c 	call	0x1880	; 0x1880 <vListInsertEnd>
    2d9c:	cc 23       	and	r28, r28
    2d9e:	11 f0       	breq	.+4      	; 0x2da4 <vTaskPlaceOnEventListRestricted+0x22>
    2da0:	0f ef       	ldi	r16, 0xFF	; 255
    2da2:	1f ef       	ldi	r17, 0xFF	; 255
    2da4:	6c 2f       	mov	r22, r28
    2da6:	c8 01       	movw	r24, r16
    2da8:	6a dc       	rcall	.-1836   	; 0x267e <prvAddCurrentTaskToDelayedList>
    2daa:	cf 91       	pop	r28
    2dac:	1f 91       	pop	r17
    2dae:	0f 91       	pop	r16
    2db0:	08 95       	ret

00002db2 <xTaskRemoveFromEventList>:
    2db2:	0f 93       	push	r16
    2db4:	1f 93       	push	r17
    2db6:	cf 93       	push	r28
    2db8:	df 93       	push	r29
    2dba:	dc 01       	movw	r26, r24
    2dbc:	15 96       	adiw	r26, 0x05	; 5
    2dbe:	ed 91       	ld	r30, X+
    2dc0:	fc 91       	ld	r31, X
    2dc2:	16 97       	sbiw	r26, 0x06	; 6
    2dc4:	c6 81       	ldd	r28, Z+6	; 0x06
    2dc6:	d7 81       	ldd	r29, Z+7	; 0x07
    2dc8:	8e 01       	movw	r16, r28
    2dca:	04 5f       	subi	r16, 0xF4	; 244
    2dcc:	1f 4f       	sbci	r17, 0xFF	; 255
    2dce:	c8 01       	movw	r24, r16
    2dd0:	0e 94 92 0c 	call	0x1924	; 0x1924 <uxListRemove>
    2dd4:	80 91 46 09 	lds	r24, 0x0946	; 0x800946 <uxSchedulerSuspended>
    2dd8:	81 11       	cpse	r24, r1
    2dda:	1c c0       	rjmp	.+56     	; 0x2e14 <xTaskRemoveFromEventList+0x62>
    2ddc:	0a 50       	subi	r16, 0x0A	; 10
    2dde:	11 09       	sbc	r17, r1
    2de0:	c8 01       	movw	r24, r16
    2de2:	0e 94 92 0c 	call	0x1924	; 0x1924 <uxListRemove>
    2de6:	8e 89       	ldd	r24, Y+22	; 0x16
    2de8:	90 91 4e 09 	lds	r25, 0x094E	; 0x80094e <uxTopReadyPriority>
    2dec:	98 17       	cp	r25, r24
    2dee:	10 f4       	brcc	.+4      	; 0x2df4 <xTaskRemoveFromEventList+0x42>
    2df0:	80 93 4e 09 	sts	0x094E, r24	; 0x80094e <uxTopReadyPriority>
    2df4:	90 e0       	ldi	r25, 0x00	; 0
    2df6:	9c 01       	movw	r18, r24
    2df8:	22 0f       	add	r18, r18
    2dfa:	33 1f       	adc	r19, r19
    2dfc:	22 0f       	add	r18, r18
    2dfe:	33 1f       	adc	r19, r19
    2e00:	22 0f       	add	r18, r18
    2e02:	33 1f       	adc	r19, r19
    2e04:	82 0f       	add	r24, r18
    2e06:	93 1f       	adc	r25, r19
    2e08:	b8 01       	movw	r22, r16
    2e0a:	8e 58       	subi	r24, 0x8E	; 142
    2e0c:	96 4f       	sbci	r25, 0xF6	; 246
    2e0e:	0e 94 40 0c 	call	0x1880	; 0x1880 <vListInsertEnd>
    2e12:	05 c0       	rjmp	.+10     	; 0x2e1e <xTaskRemoveFromEventList+0x6c>
    2e14:	b8 01       	movw	r22, r16
    2e16:	85 e6       	ldi	r24, 0x65	; 101
    2e18:	99 e0       	ldi	r25, 0x09	; 9
    2e1a:	0e 94 40 0c 	call	0x1880	; 0x1880 <vListInsertEnd>
    2e1e:	e0 91 96 09 	lds	r30, 0x0996	; 0x800996 <pxCurrentTCB>
    2e22:	f0 91 97 09 	lds	r31, 0x0997	; 0x800997 <pxCurrentTCB+0x1>
    2e26:	9e 89       	ldd	r25, Y+22	; 0x16
    2e28:	86 89       	ldd	r24, Z+22	; 0x16
    2e2a:	89 17       	cp	r24, r25
    2e2c:	20 f4       	brcc	.+8      	; 0x2e36 <xTaskRemoveFromEventList+0x84>
    2e2e:	81 e0       	ldi	r24, 0x01	; 1
    2e30:	80 93 4b 09 	sts	0x094B, r24	; 0x80094b <xYieldPending>
    2e34:	01 c0       	rjmp	.+2      	; 0x2e38 <xTaskRemoveFromEventList+0x86>
    2e36:	80 e0       	ldi	r24, 0x00	; 0
    2e38:	df 91       	pop	r29
    2e3a:	cf 91       	pop	r28
    2e3c:	1f 91       	pop	r17
    2e3e:	0f 91       	pop	r16
    2e40:	08 95       	ret

00002e42 <vTaskSetTimeOutState>:
    2e42:	0f b6       	in	r0, 0x3f	; 63
    2e44:	f8 94       	cli
    2e46:	0f 92       	push	r0
    2e48:	20 91 4a 09 	lds	r18, 0x094A	; 0x80094a <xNumOfOverflows>
    2e4c:	fc 01       	movw	r30, r24
    2e4e:	20 83       	st	Z, r18
    2e50:	20 91 4f 09 	lds	r18, 0x094F	; 0x80094f <xTickCount>
    2e54:	30 91 50 09 	lds	r19, 0x0950	; 0x800950 <xTickCount+0x1>
    2e58:	32 83       	std	Z+2, r19	; 0x02
    2e5a:	21 83       	std	Z+1, r18	; 0x01
    2e5c:	0f 90       	pop	r0
    2e5e:	0f be       	out	0x3f, r0	; 63
    2e60:	08 95       	ret

00002e62 <vTaskInternalSetTimeOutState>:
    2e62:	20 91 4a 09 	lds	r18, 0x094A	; 0x80094a <xNumOfOverflows>
    2e66:	fc 01       	movw	r30, r24
    2e68:	20 83       	st	Z, r18
    2e6a:	20 91 4f 09 	lds	r18, 0x094F	; 0x80094f <xTickCount>
    2e6e:	30 91 50 09 	lds	r19, 0x0950	; 0x800950 <xTickCount+0x1>
    2e72:	32 83       	std	Z+2, r19	; 0x02
    2e74:	21 83       	std	Z+1, r18	; 0x01
    2e76:	08 95       	ret

00002e78 <xTaskCheckForTimeOut>:
    2e78:	cf 93       	push	r28
    2e7a:	df 93       	push	r29
    2e7c:	0f b6       	in	r0, 0x3f	; 63
    2e7e:	f8 94       	cli
    2e80:	0f 92       	push	r0
    2e82:	20 91 4f 09 	lds	r18, 0x094F	; 0x80094f <xTickCount>
    2e86:	30 91 50 09 	lds	r19, 0x0950	; 0x800950 <xTickCount+0x1>
    2e8a:	db 01       	movw	r26, r22
    2e8c:	4d 91       	ld	r20, X+
    2e8e:	5c 91       	ld	r21, X
    2e90:	4f 3f       	cpi	r20, 0xFF	; 255
    2e92:	bf ef       	ldi	r27, 0xFF	; 255
    2e94:	5b 07       	cpc	r21, r27
    2e96:	e9 f0       	breq	.+58     	; 0x2ed2 <xTaskCheckForTimeOut+0x5a>
    2e98:	ec 01       	movw	r28, r24
    2e9a:	e9 81       	ldd	r30, Y+1	; 0x01
    2e9c:	fa 81       	ldd	r31, Y+2	; 0x02
    2e9e:	a0 91 4a 09 	lds	r26, 0x094A	; 0x80094a <xNumOfOverflows>
    2ea2:	b8 81       	ld	r27, Y
    2ea4:	ba 17       	cp	r27, r26
    2ea6:	19 f0       	breq	.+6      	; 0x2eae <xTaskCheckForTimeOut+0x36>
    2ea8:	2e 17       	cp	r18, r30
    2eaa:	3f 07       	cpc	r19, r31
    2eac:	a0 f4       	brcc	.+40     	; 0x2ed6 <xTaskCheckForTimeOut+0x5e>
    2eae:	2e 1b       	sub	r18, r30
    2eb0:	3f 0b       	sbc	r19, r31
    2eb2:	24 17       	cp	r18, r20
    2eb4:	35 07       	cpc	r19, r21
    2eb6:	40 f4       	brcc	.+16     	; 0x2ec8 <xTaskCheckForTimeOut+0x50>
    2eb8:	fb 01       	movw	r30, r22
    2eba:	42 1b       	sub	r20, r18
    2ebc:	53 0b       	sbc	r21, r19
    2ebe:	51 83       	std	Z+1, r21	; 0x01
    2ec0:	40 83       	st	Z, r20
    2ec2:	cf df       	rcall	.-98     	; 0x2e62 <vTaskInternalSetTimeOutState>
    2ec4:	80 e0       	ldi	r24, 0x00	; 0
    2ec6:	08 c0       	rjmp	.+16     	; 0x2ed8 <xTaskCheckForTimeOut+0x60>
    2ec8:	fb 01       	movw	r30, r22
    2eca:	11 82       	std	Z+1, r1	; 0x01
    2ecc:	10 82       	st	Z, r1
    2ece:	81 e0       	ldi	r24, 0x01	; 1
    2ed0:	03 c0       	rjmp	.+6      	; 0x2ed8 <xTaskCheckForTimeOut+0x60>
    2ed2:	80 e0       	ldi	r24, 0x00	; 0
    2ed4:	01 c0       	rjmp	.+2      	; 0x2ed8 <xTaskCheckForTimeOut+0x60>
    2ed6:	81 e0       	ldi	r24, 0x01	; 1
    2ed8:	0f 90       	pop	r0
    2eda:	0f be       	out	0x3f, r0	; 63
    2edc:	df 91       	pop	r29
    2ede:	cf 91       	pop	r28
    2ee0:	08 95       	ret

00002ee2 <vTaskMissedYield>:
    2ee2:	81 e0       	ldi	r24, 0x01	; 1
    2ee4:	80 93 4b 09 	sts	0x094B, r24	; 0x80094b <xYieldPending>
    2ee8:	08 95       	ret

00002eea <xTaskGetCurrentTaskHandle>:
    2eea:	80 91 96 09 	lds	r24, 0x0996	; 0x800996 <pxCurrentTCB>
    2eee:	90 91 97 09 	lds	r25, 0x0997	; 0x800997 <pxCurrentTCB+0x1>
    2ef2:	08 95       	ret

00002ef4 <xTaskGetSchedulerState>:
    2ef4:	80 91 4d 09 	lds	r24, 0x094D	; 0x80094d <xSchedulerRunning>
    2ef8:	88 23       	and	r24, r24
    2efa:	31 f0       	breq	.+12     	; 0x2f08 <xTaskGetSchedulerState+0x14>
    2efc:	80 91 46 09 	lds	r24, 0x0946	; 0x800946 <uxSchedulerSuspended>
    2f00:	88 23       	and	r24, r24
    2f02:	21 f0       	breq	.+8      	; 0x2f0c <xTaskGetSchedulerState+0x18>
    2f04:	80 e0       	ldi	r24, 0x00	; 0
    2f06:	08 95       	ret
    2f08:	81 e0       	ldi	r24, 0x01	; 1
    2f0a:	08 95       	ret
    2f0c:	82 e0       	ldi	r24, 0x02	; 2
    2f0e:	08 95       	ret

00002f10 <xTaskPriorityDisinherit>:
    2f10:	0f 93       	push	r16
    2f12:	1f 93       	push	r17
    2f14:	cf 93       	push	r28
    2f16:	df 93       	push	r29
    2f18:	fc 01       	movw	r30, r24
    2f1a:	89 2b       	or	r24, r25
    2f1c:	79 f1       	breq	.+94     	; 0x2f7c <xTaskPriorityDisinherit+0x6c>
    2f1e:	82 a1       	ldd	r24, Z+34	; 0x22
    2f20:	81 50       	subi	r24, 0x01	; 1
    2f22:	82 a3       	std	Z+34, r24	; 0x22
    2f24:	26 89       	ldd	r18, Z+22	; 0x16
    2f26:	91 a1       	ldd	r25, Z+33	; 0x21
    2f28:	29 17       	cp	r18, r25
    2f2a:	51 f1       	breq	.+84     	; 0x2f80 <xTaskPriorityDisinherit+0x70>
    2f2c:	81 11       	cpse	r24, r1
    2f2e:	2a c0       	rjmp	.+84     	; 0x2f84 <xTaskPriorityDisinherit+0x74>
    2f30:	ef 01       	movw	r28, r30
    2f32:	8f 01       	movw	r16, r30
    2f34:	0e 5f       	subi	r16, 0xFE	; 254
    2f36:	1f 4f       	sbci	r17, 0xFF	; 255
    2f38:	c8 01       	movw	r24, r16
    2f3a:	0e 94 92 0c 	call	0x1924	; 0x1924 <uxListRemove>
    2f3e:	89 a1       	ldd	r24, Y+33	; 0x21
    2f40:	8e 8b       	std	Y+22, r24	; 0x16
    2f42:	24 e0       	ldi	r18, 0x04	; 4
    2f44:	30 e0       	ldi	r19, 0x00	; 0
    2f46:	28 1b       	sub	r18, r24
    2f48:	31 09       	sbc	r19, r1
    2f4a:	3d 87       	std	Y+13, r19	; 0x0d
    2f4c:	2c 87       	std	Y+12, r18	; 0x0c
    2f4e:	90 91 4e 09 	lds	r25, 0x094E	; 0x80094e <uxTopReadyPriority>
    2f52:	98 17       	cp	r25, r24
    2f54:	10 f4       	brcc	.+4      	; 0x2f5a <xTaskPriorityDisinherit+0x4a>
    2f56:	80 93 4e 09 	sts	0x094E, r24	; 0x80094e <uxTopReadyPriority>
    2f5a:	90 e0       	ldi	r25, 0x00	; 0
    2f5c:	9c 01       	movw	r18, r24
    2f5e:	22 0f       	add	r18, r18
    2f60:	33 1f       	adc	r19, r19
    2f62:	22 0f       	add	r18, r18
    2f64:	33 1f       	adc	r19, r19
    2f66:	22 0f       	add	r18, r18
    2f68:	33 1f       	adc	r19, r19
    2f6a:	82 0f       	add	r24, r18
    2f6c:	93 1f       	adc	r25, r19
    2f6e:	b8 01       	movw	r22, r16
    2f70:	8e 58       	subi	r24, 0x8E	; 142
    2f72:	96 4f       	sbci	r25, 0xF6	; 246
    2f74:	0e 94 40 0c 	call	0x1880	; 0x1880 <vListInsertEnd>
    2f78:	81 e0       	ldi	r24, 0x01	; 1
    2f7a:	05 c0       	rjmp	.+10     	; 0x2f86 <xTaskPriorityDisinherit+0x76>
    2f7c:	80 e0       	ldi	r24, 0x00	; 0
    2f7e:	03 c0       	rjmp	.+6      	; 0x2f86 <xTaskPriorityDisinherit+0x76>
    2f80:	80 e0       	ldi	r24, 0x00	; 0
    2f82:	01 c0       	rjmp	.+2      	; 0x2f86 <xTaskPriorityDisinherit+0x76>
    2f84:	80 e0       	ldi	r24, 0x00	; 0
    2f86:	df 91       	pop	r29
    2f88:	cf 91       	pop	r28
    2f8a:	1f 91       	pop	r17
    2f8c:	0f 91       	pop	r16
    2f8e:	08 95       	ret

00002f90 <xTaskNotifyWait>:
    2f90:	4f 92       	push	r4
    2f92:	5f 92       	push	r5
    2f94:	6f 92       	push	r6
    2f96:	7f 92       	push	r7
    2f98:	8f 92       	push	r8
    2f9a:	9f 92       	push	r9
    2f9c:	af 92       	push	r10
    2f9e:	bf 92       	push	r11
    2fa0:	ef 92       	push	r14
    2fa2:	ff 92       	push	r15
    2fa4:	0f 93       	push	r16
    2fa6:	1f 93       	push	r17
    2fa8:	49 01       	movw	r8, r18
    2faa:	5a 01       	movw	r10, r20
    2fac:	0f b6       	in	r0, 0x3f	; 63
    2fae:	f8 94       	cli
    2fb0:	0f 92       	push	r0
    2fb2:	e0 91 96 09 	lds	r30, 0x0996	; 0x800996 <pxCurrentTCB>
    2fb6:	f0 91 97 09 	lds	r31, 0x0997	; 0x800997 <pxCurrentTCB+0x1>
    2fba:	27 a1       	ldd	r18, Z+39	; 0x27
    2fbc:	22 30       	cpi	r18, 0x02	; 2
    2fbe:	21 f1       	breq	.+72     	; 0x3008 <xTaskNotifyWait+0x78>
    2fc0:	e0 91 96 09 	lds	r30, 0x0996	; 0x800996 <pxCurrentTCB>
    2fc4:	f0 91 97 09 	lds	r31, 0x0997	; 0x800997 <pxCurrentTCB+0x1>
    2fc8:	43 a0       	ldd	r4, Z+35	; 0x23
    2fca:	54 a0       	ldd	r5, Z+36	; 0x24
    2fcc:	65 a0       	ldd	r6, Z+37	; 0x25
    2fce:	76 a0       	ldd	r7, Z+38	; 0x26
    2fd0:	dc 01       	movw	r26, r24
    2fd2:	cb 01       	movw	r24, r22
    2fd4:	80 95       	com	r24
    2fd6:	90 95       	com	r25
    2fd8:	a0 95       	com	r26
    2fda:	b0 95       	com	r27
    2fdc:	84 21       	and	r24, r4
    2fde:	95 21       	and	r25, r5
    2fe0:	a6 21       	and	r26, r6
    2fe2:	b7 21       	and	r27, r7
    2fe4:	83 a3       	std	Z+35, r24	; 0x23
    2fe6:	94 a3       	std	Z+36, r25	; 0x24
    2fe8:	a5 a3       	std	Z+37, r26	; 0x25
    2fea:	b6 a3       	std	Z+38, r27	; 0x26
    2fec:	e0 91 96 09 	lds	r30, 0x0996	; 0x800996 <pxCurrentTCB>
    2ff0:	f0 91 97 09 	lds	r31, 0x0997	; 0x800997 <pxCurrentTCB+0x1>
    2ff4:	81 e0       	ldi	r24, 0x01	; 1
    2ff6:	87 a3       	std	Z+39, r24	; 0x27
    2ff8:	e1 14       	cp	r14, r1
    2ffa:	f1 04       	cpc	r15, r1
    2ffc:	29 f0       	breq	.+10     	; 0x3008 <xTaskNotifyWait+0x78>
    2ffe:	61 e0       	ldi	r22, 0x01	; 1
    3000:	c7 01       	movw	r24, r14
    3002:	3d db       	rcall	.-2438   	; 0x267e <prvAddCurrentTaskToDelayedList>
    3004:	0e 94 67 0d 	call	0x1ace	; 0x1ace <vPortYield>
    3008:	0f 90       	pop	r0
    300a:	0f be       	out	0x3f, r0	; 63
    300c:	0f b6       	in	r0, 0x3f	; 63
    300e:	f8 94       	cli
    3010:	0f 92       	push	r0
    3012:	01 15       	cp	r16, r1
    3014:	11 05       	cpc	r17, r1
    3016:	69 f0       	breq	.+26     	; 0x3032 <xTaskNotifyWait+0xa2>
    3018:	e0 91 96 09 	lds	r30, 0x0996	; 0x800996 <pxCurrentTCB>
    301c:	f0 91 97 09 	lds	r31, 0x0997	; 0x800997 <pxCurrentTCB+0x1>
    3020:	83 a1       	ldd	r24, Z+35	; 0x23
    3022:	94 a1       	ldd	r25, Z+36	; 0x24
    3024:	a5 a1       	ldd	r26, Z+37	; 0x25
    3026:	b6 a1       	ldd	r27, Z+38	; 0x26
    3028:	f8 01       	movw	r30, r16
    302a:	80 83       	st	Z, r24
    302c:	91 83       	std	Z+1, r25	; 0x01
    302e:	a2 83       	std	Z+2, r26	; 0x02
    3030:	b3 83       	std	Z+3, r27	; 0x03
    3032:	e0 91 96 09 	lds	r30, 0x0996	; 0x800996 <pxCurrentTCB>
    3036:	f0 91 97 09 	lds	r31, 0x0997	; 0x800997 <pxCurrentTCB+0x1>
    303a:	87 a1       	ldd	r24, Z+39	; 0x27
    303c:	82 30       	cpi	r24, 0x02	; 2
    303e:	b1 f4       	brne	.+44     	; 0x306c <xTaskNotifyWait+0xdc>
    3040:	e0 91 96 09 	lds	r30, 0x0996	; 0x800996 <pxCurrentTCB>
    3044:	f0 91 97 09 	lds	r31, 0x0997	; 0x800997 <pxCurrentTCB+0x1>
    3048:	83 a1       	ldd	r24, Z+35	; 0x23
    304a:	94 a1       	ldd	r25, Z+36	; 0x24
    304c:	a5 a1       	ldd	r26, Z+37	; 0x25
    304e:	b6 a1       	ldd	r27, Z+38	; 0x26
    3050:	80 94       	com	r8
    3052:	90 94       	com	r9
    3054:	a0 94       	com	r10
    3056:	b0 94       	com	r11
    3058:	88 22       	and	r8, r24
    305a:	99 22       	and	r9, r25
    305c:	aa 22       	and	r10, r26
    305e:	bb 22       	and	r11, r27
    3060:	83 a2       	std	Z+35, r8	; 0x23
    3062:	94 a2       	std	Z+36, r9	; 0x24
    3064:	a5 a2       	std	Z+37, r10	; 0x25
    3066:	b6 a2       	std	Z+38, r11	; 0x26
    3068:	81 e0       	ldi	r24, 0x01	; 1
    306a:	01 c0       	rjmp	.+2      	; 0x306e <xTaskNotifyWait+0xde>
    306c:	80 e0       	ldi	r24, 0x00	; 0
    306e:	e0 91 96 09 	lds	r30, 0x0996	; 0x800996 <pxCurrentTCB>
    3072:	f0 91 97 09 	lds	r31, 0x0997	; 0x800997 <pxCurrentTCB+0x1>
    3076:	17 a2       	std	Z+39, r1	; 0x27
    3078:	0f 90       	pop	r0
    307a:	0f be       	out	0x3f, r0	; 63
    307c:	1f 91       	pop	r17
    307e:	0f 91       	pop	r16
    3080:	ff 90       	pop	r15
    3082:	ef 90       	pop	r14
    3084:	bf 90       	pop	r11
    3086:	af 90       	pop	r10
    3088:	9f 90       	pop	r9
    308a:	8f 90       	pop	r8
    308c:	7f 90       	pop	r7
    308e:	6f 90       	pop	r6
    3090:	5f 90       	pop	r5
    3092:	4f 90       	pop	r4
    3094:	08 95       	ret

00003096 <xTaskGenericNotify>:
    3096:	0f 93       	push	r16
    3098:	1f 93       	push	r17
    309a:	cf 93       	push	r28
    309c:	df 93       	push	r29
    309e:	fc 01       	movw	r30, r24
    30a0:	0f b6       	in	r0, 0x3f	; 63
    30a2:	f8 94       	cli
    30a4:	0f 92       	push	r0
    30a6:	01 15       	cp	r16, r1
    30a8:	11 05       	cpc	r17, r1
    30aa:	49 f0       	breq	.+18     	; 0x30be <xTaskGenericNotify+0x28>
    30ac:	83 a1       	ldd	r24, Z+35	; 0x23
    30ae:	94 a1       	ldd	r25, Z+36	; 0x24
    30b0:	a5 a1       	ldd	r26, Z+37	; 0x25
    30b2:	b6 a1       	ldd	r27, Z+38	; 0x26
    30b4:	e8 01       	movw	r28, r16
    30b6:	88 83       	st	Y, r24
    30b8:	99 83       	std	Y+1, r25	; 0x01
    30ba:	aa 83       	std	Y+2, r26	; 0x02
    30bc:	bb 83       	std	Y+3, r27	; 0x03
    30be:	87 a1       	ldd	r24, Z+39	; 0x27
    30c0:	92 e0       	ldi	r25, 0x02	; 2
    30c2:	97 a3       	std	Z+39, r25	; 0x27
    30c4:	22 30       	cpi	r18, 0x02	; 2
    30c6:	b1 f0       	breq	.+44     	; 0x30f4 <xTaskGenericNotify+0x5e>
    30c8:	18 f4       	brcc	.+6      	; 0x30d0 <xTaskGenericNotify+0x3a>
    30ca:	21 30       	cpi	r18, 0x01	; 1
    30cc:	31 f0       	breq	.+12     	; 0x30da <xTaskGenericNotify+0x44>
    30ce:	2a c0       	rjmp	.+84     	; 0x3124 <xTaskGenericNotify+0x8e>
    30d0:	23 30       	cpi	r18, 0x03	; 3
    30d2:	e9 f0       	breq	.+58     	; 0x310e <xTaskGenericNotify+0x78>
    30d4:	24 30       	cpi	r18, 0x04	; 4
    30d6:	01 f1       	breq	.+64     	; 0x3118 <xTaskGenericNotify+0x82>
    30d8:	25 c0       	rjmp	.+74     	; 0x3124 <xTaskGenericNotify+0x8e>
    30da:	03 a1       	ldd	r16, Z+35	; 0x23
    30dc:	14 a1       	ldd	r17, Z+36	; 0x24
    30de:	25 a1       	ldd	r18, Z+37	; 0x25
    30e0:	36 a1       	ldd	r19, Z+38	; 0x26
    30e2:	40 2b       	or	r20, r16
    30e4:	51 2b       	or	r21, r17
    30e6:	62 2b       	or	r22, r18
    30e8:	73 2b       	or	r23, r19
    30ea:	43 a3       	std	Z+35, r20	; 0x23
    30ec:	54 a3       	std	Z+36, r21	; 0x24
    30ee:	65 a3       	std	Z+37, r22	; 0x25
    30f0:	76 a3       	std	Z+38, r23	; 0x26
    30f2:	18 c0       	rjmp	.+48     	; 0x3124 <xTaskGenericNotify+0x8e>
    30f4:	43 a1       	ldd	r20, Z+35	; 0x23
    30f6:	54 a1       	ldd	r21, Z+36	; 0x24
    30f8:	65 a1       	ldd	r22, Z+37	; 0x25
    30fa:	76 a1       	ldd	r23, Z+38	; 0x26
    30fc:	4f 5f       	subi	r20, 0xFF	; 255
    30fe:	5f 4f       	sbci	r21, 0xFF	; 255
    3100:	6f 4f       	sbci	r22, 0xFF	; 255
    3102:	7f 4f       	sbci	r23, 0xFF	; 255
    3104:	43 a3       	std	Z+35, r20	; 0x23
    3106:	54 a3       	std	Z+36, r21	; 0x24
    3108:	65 a3       	std	Z+37, r22	; 0x25
    310a:	76 a3       	std	Z+38, r23	; 0x26
    310c:	0b c0       	rjmp	.+22     	; 0x3124 <xTaskGenericNotify+0x8e>
    310e:	43 a3       	std	Z+35, r20	; 0x23
    3110:	54 a3       	std	Z+36, r21	; 0x24
    3112:	65 a3       	std	Z+37, r22	; 0x25
    3114:	76 a3       	std	Z+38, r23	; 0x26
    3116:	06 c0       	rjmp	.+12     	; 0x3124 <xTaskGenericNotify+0x8e>
    3118:	82 30       	cpi	r24, 0x02	; 2
    311a:	79 f1       	breq	.+94     	; 0x317a <xTaskGenericNotify+0xe4>
    311c:	43 a3       	std	Z+35, r20	; 0x23
    311e:	54 a3       	std	Z+36, r21	; 0x24
    3120:	65 a3       	std	Z+37, r22	; 0x25
    3122:	76 a3       	std	Z+38, r23	; 0x26
    3124:	81 30       	cpi	r24, 0x01	; 1
    3126:	59 f5       	brne	.+86     	; 0x317e <xTaskGenericNotify+0xe8>
    3128:	ef 01       	movw	r28, r30
    312a:	8f 01       	movw	r16, r30
    312c:	0e 5f       	subi	r16, 0xFE	; 254
    312e:	1f 4f       	sbci	r17, 0xFF	; 255
    3130:	c8 01       	movw	r24, r16
    3132:	0e 94 92 0c 	call	0x1924	; 0x1924 <uxListRemove>
    3136:	8e 89       	ldd	r24, Y+22	; 0x16
    3138:	90 91 4e 09 	lds	r25, 0x094E	; 0x80094e <uxTopReadyPriority>
    313c:	98 17       	cp	r25, r24
    313e:	10 f4       	brcc	.+4      	; 0x3144 <xTaskGenericNotify+0xae>
    3140:	80 93 4e 09 	sts	0x094E, r24	; 0x80094e <uxTopReadyPriority>
    3144:	90 e0       	ldi	r25, 0x00	; 0
    3146:	9c 01       	movw	r18, r24
    3148:	22 0f       	add	r18, r18
    314a:	33 1f       	adc	r19, r19
    314c:	22 0f       	add	r18, r18
    314e:	33 1f       	adc	r19, r19
    3150:	22 0f       	add	r18, r18
    3152:	33 1f       	adc	r19, r19
    3154:	82 0f       	add	r24, r18
    3156:	93 1f       	adc	r25, r19
    3158:	b8 01       	movw	r22, r16
    315a:	8e 58       	subi	r24, 0x8E	; 142
    315c:	96 4f       	sbci	r25, 0xF6	; 246
    315e:	0e 94 40 0c 	call	0x1880	; 0x1880 <vListInsertEnd>
    3162:	e0 91 96 09 	lds	r30, 0x0996	; 0x800996 <pxCurrentTCB>
    3166:	f0 91 97 09 	lds	r31, 0x0997	; 0x800997 <pxCurrentTCB+0x1>
    316a:	9e 89       	ldd	r25, Y+22	; 0x16
    316c:	86 89       	ldd	r24, Z+22	; 0x16
    316e:	89 17       	cp	r24, r25
    3170:	40 f4       	brcc	.+16     	; 0x3182 <xTaskGenericNotify+0xec>
    3172:	0e 94 67 0d 	call	0x1ace	; 0x1ace <vPortYield>
    3176:	81 e0       	ldi	r24, 0x01	; 1
    3178:	05 c0       	rjmp	.+10     	; 0x3184 <xTaskGenericNotify+0xee>
    317a:	80 e0       	ldi	r24, 0x00	; 0
    317c:	03 c0       	rjmp	.+6      	; 0x3184 <xTaskGenericNotify+0xee>
    317e:	81 e0       	ldi	r24, 0x01	; 1
    3180:	01 c0       	rjmp	.+2      	; 0x3184 <xTaskGenericNotify+0xee>
    3182:	81 e0       	ldi	r24, 0x01	; 1
    3184:	0f 90       	pop	r0
    3186:	0f be       	out	0x3f, r0	; 63
    3188:	df 91       	pop	r29
    318a:	cf 91       	pop	r28
    318c:	1f 91       	pop	r17
    318e:	0f 91       	pop	r16
    3190:	08 95       	ret

00003192 <xTaskNotifyStateClear>:
    TCB_t *pxTCB;
    BaseType_t xReturn;

        /* If null is passed in here then it is the calling task that is having
        its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    3192:	00 97       	sbiw	r24, 0x00	; 0
    3194:	21 f4       	brne	.+8      	; 0x319e <xTaskNotifyStateClear+0xc>
    3196:	80 91 96 09 	lds	r24, 0x0996	; 0x800996 <pxCurrentTCB>
    319a:	90 91 97 09 	lds	r25, 0x0997	; 0x800997 <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    319e:	0f b6       	in	r0, 0x3f	; 63
    31a0:	f8 94       	cli
    31a2:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
    31a4:	fc 01       	movw	r30, r24
    31a6:	27 a1       	ldd	r18, Z+39	; 0x27
    31a8:	22 30       	cpi	r18, 0x02	; 2
    31aa:	19 f4       	brne	.+6      	; 0x31b2 <xTaskNotifyStateClear+0x20>
            {
                pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    31ac:	17 a2       	std	Z+39, r1	; 0x27
                xReturn = pdPASS;
    31ae:	81 e0       	ldi	r24, 0x01	; 1
    31b0:	01 c0       	rjmp	.+2      	; 0x31b4 <xTaskNotifyStateClear+0x22>
            }
            else
            {
                xReturn = pdFAIL;
    31b2:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        taskEXIT_CRITICAL();
    31b4:	0f 90       	pop	r0
    31b6:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    }
    31b8:	08 95       	ret

000031ba <prvInsertTimerInActiveList>:
            }
            #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
        }

        return pxNewTimer;
    }
    31ba:	fc 01       	movw	r30, r24
    31bc:	73 83       	std	Z+3, r23	; 0x03
    31be:	62 83       	std	Z+2, r22	; 0x02
    31c0:	91 87       	std	Z+9, r25	; 0x09
    31c2:	80 87       	std	Z+8, r24	; 0x08
    31c4:	46 17       	cp	r20, r22
    31c6:	57 07       	cpc	r21, r23
    31c8:	90 f0       	brcs	.+36     	; 0x31ee <prvInsertTimerInActiveList+0x34>
    31ca:	42 1b       	sub	r20, r18
    31cc:	53 0b       	sbc	r21, r19
    31ce:	84 85       	ldd	r24, Z+12	; 0x0c
    31d0:	95 85       	ldd	r25, Z+13	; 0x0d
    31d2:	48 17       	cp	r20, r24
    31d4:	59 07       	cpc	r21, r25
    31d6:	e0 f4       	brcc	.+56     	; 0x3210 <prvInsertTimerInActiveList+0x56>
    31d8:	bf 01       	movw	r22, r30
    31da:	6e 5f       	subi	r22, 0xFE	; 254
    31dc:	7f 4f       	sbci	r23, 0xFF	; 255
    31de:	80 91 01 0a 	lds	r24, 0x0A01	; 0x800a01 <pxOverflowTimerList>
    31e2:	90 91 02 0a 	lds	r25, 0x0A02	; 0x800a02 <pxOverflowTimerList+0x1>
    31e6:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <vListInsert>
    31ea:	80 e0       	ldi	r24, 0x00	; 0
    31ec:	08 95       	ret
    31ee:	42 17       	cp	r20, r18
    31f0:	53 07       	cpc	r21, r19
    31f2:	18 f4       	brcc	.+6      	; 0x31fa <prvInsertTimerInActiveList+0x40>
    31f4:	62 17       	cp	r22, r18
    31f6:	73 07       	cpc	r23, r19
    31f8:	68 f4       	brcc	.+26     	; 0x3214 <prvInsertTimerInActiveList+0x5a>
    31fa:	bf 01       	movw	r22, r30
    31fc:	6e 5f       	subi	r22, 0xFE	; 254
    31fe:	7f 4f       	sbci	r23, 0xFF	; 255
    3200:	80 91 03 0a 	lds	r24, 0x0A03	; 0x800a03 <pxCurrentTimerList>
    3204:	90 91 04 0a 	lds	r25, 0x0A04	; 0x800a04 <pxCurrentTimerList+0x1>
    3208:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <vListInsert>
    320c:	80 e0       	ldi	r24, 0x00	; 0
    320e:	08 95       	ret
    3210:	81 e0       	ldi	r24, 0x01	; 1
    3212:	08 95       	ret
    3214:	81 e0       	ldi	r24, 0x01	; 1
    3216:	08 95       	ret

00003218 <prvCheckForValidListAndQueue>:
    3218:	0f 93       	push	r16
    321a:	0f b6       	in	r0, 0x3f	; 63
    321c:	f8 94       	cli
    321e:	0f 92       	push	r0
    3220:	80 91 ff 09 	lds	r24, 0x09FF	; 0x8009ff <xTimerQueue>
    3224:	90 91 00 0a 	lds	r25, 0x0A00	; 0x800a00 <xTimerQueue+0x1>
    3228:	89 2b       	or	r24, r25
    322a:	09 f5       	brne	.+66     	; 0x326e <prvCheckForValidListAndQueue+0x56>
    322c:	82 ef       	ldi	r24, 0xF2	; 242
    322e:	99 e0       	ldi	r25, 0x09	; 9
    3230:	0e 94 2e 0c 	call	0x185c	; 0x185c <vListInitialise>
    3234:	89 ee       	ldi	r24, 0xE9	; 233
    3236:	99 e0       	ldi	r25, 0x09	; 9
    3238:	0e 94 2e 0c 	call	0x185c	; 0x185c <vListInitialise>
    323c:	82 ef       	ldi	r24, 0xF2	; 242
    323e:	99 e0       	ldi	r25, 0x09	; 9
    3240:	90 93 04 0a 	sts	0x0A04, r25	; 0x800a04 <pxCurrentTimerList+0x1>
    3244:	80 93 03 0a 	sts	0x0A03, r24	; 0x800a03 <pxCurrentTimerList>
    3248:	89 ee       	ldi	r24, 0xE9	; 233
    324a:	99 e0       	ldi	r25, 0x09	; 9
    324c:	90 93 02 0a 	sts	0x0A02, r25	; 0x800a02 <pxOverflowTimerList+0x1>
    3250:	80 93 01 0a 	sts	0x0A01, r24	; 0x800a01 <pxOverflowTimerList>
    3254:	00 e0       	ldi	r16, 0x00	; 0
    3256:	28 e9       	ldi	r18, 0x98	; 152
    3258:	39 e0       	ldi	r19, 0x09	; 9
    325a:	47 eb       	ldi	r20, 0xB7	; 183
    325c:	59 e0       	ldi	r21, 0x09	; 9
    325e:	65 e0       	ldi	r22, 0x05	; 5
    3260:	8a e0       	ldi	r24, 0x0A	; 10
    3262:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <xQueueGenericCreateStatic>
    3266:	90 93 00 0a 	sts	0x0A00, r25	; 0x800a00 <xTimerQueue+0x1>
    326a:	80 93 ff 09 	sts	0x09FF, r24	; 0x8009ff <xTimerQueue>
    326e:	0f 90       	pop	r0
    3270:	0f be       	out	0x3f, r0	; 63
    3272:	0f 91       	pop	r16
    3274:	08 95       	ret

00003276 <xTimerCreateTimerTask>:
    3276:	cf 92       	push	r12
    3278:	df 92       	push	r13
    327a:	ef 92       	push	r14
    327c:	ff 92       	push	r15
    327e:	0f 93       	push	r16
    3280:	cf 93       	push	r28
    3282:	df 93       	push	r29
    3284:	00 d0       	rcall	.+0      	; 0x3286 <xTimerCreateTimerTask+0x10>
    3286:	00 d0       	rcall	.+0      	; 0x3288 <xTimerCreateTimerTask+0x12>
    3288:	cd b7       	in	r28, 0x3d	; 61
    328a:	de b7       	in	r29, 0x3e	; 62
    328c:	c5 df       	rcall	.-118    	; 0x3218 <prvCheckForValidListAndQueue>
    328e:	80 91 ff 09 	lds	r24, 0x09FF	; 0x8009ff <xTimerQueue>
    3292:	90 91 00 0a 	lds	r25, 0x0A00	; 0x800a00 <xTimerQueue+0x1>
    3296:	89 2b       	or	r24, r25
    3298:	31 f1       	breq	.+76     	; 0x32e6 <xTimerCreateTimerTask+0x70>
    329a:	1e 82       	std	Y+6, r1	; 0x06
    329c:	1d 82       	std	Y+5, r1	; 0x05
    329e:	1c 82       	std	Y+4, r1	; 0x04
    32a0:	1b 82       	std	Y+3, r1	; 0x03
    32a2:	ae 01       	movw	r20, r28
    32a4:	4f 5f       	subi	r20, 0xFF	; 255
    32a6:	5f 4f       	sbci	r21, 0xFF	; 255
    32a8:	be 01       	movw	r22, r28
    32aa:	6d 5f       	subi	r22, 0xFD	; 253
    32ac:	7f 4f       	sbci	r23, 0xFF	; 255
    32ae:	ce 01       	movw	r24, r28
    32b0:	05 96       	adiw	r24, 0x05	; 5
    32b2:	0e 94 1e 0c 	call	0x183c	; 0x183c <vApplicationGetTimerTaskMemory>
    32b6:	cd 80       	ldd	r12, Y+5	; 0x05
    32b8:	de 80       	ldd	r13, Y+6	; 0x06
    32ba:	eb 80       	ldd	r14, Y+3	; 0x03
    32bc:	fc 80       	ldd	r15, Y+4	; 0x04
    32be:	49 81       	ldd	r20, Y+1	; 0x01
    32c0:	5a 81       	ldd	r21, Y+2	; 0x02
    32c2:	03 e0       	ldi	r16, 0x03	; 3
    32c4:	20 e0       	ldi	r18, 0x00	; 0
    32c6:	30 e0       	ldi	r19, 0x00	; 0
    32c8:	64 e8       	ldi	r22, 0x84	; 132
    32ca:	72 e0       	ldi	r23, 0x02	; 2
    32cc:	87 e3       	ldi	r24, 0x37	; 55
    32ce:	9a e1       	ldi	r25, 0x1A	; 26
    32d0:	2a da       	rcall	.-2988   	; 0x2726 <xTaskCreateStatic>
    32d2:	9c 01       	movw	r18, r24
    32d4:	90 93 fe 09 	sts	0x09FE, r25	; 0x8009fe <xTimerTaskHandle+0x1>
    32d8:	80 93 fd 09 	sts	0x09FD, r24	; 0x8009fd <xTimerTaskHandle>
    32dc:	81 e0       	ldi	r24, 0x01	; 1
    32de:	23 2b       	or	r18, r19
    32e0:	19 f4       	brne	.+6      	; 0x32e8 <xTimerCreateTimerTask+0x72>
    32e2:	80 e0       	ldi	r24, 0x00	; 0
    32e4:	01 c0       	rjmp	.+2      	; 0x32e8 <xTimerCreateTimerTask+0x72>
    32e6:	80 e0       	ldi	r24, 0x00	; 0
    32e8:	26 96       	adiw	r28, 0x06	; 6
    32ea:	0f b6       	in	r0, 0x3f	; 63
    32ec:	f8 94       	cli
    32ee:	de bf       	out	0x3e, r29	; 62
    32f0:	0f be       	out	0x3f, r0	; 63
    32f2:	cd bf       	out	0x3d, r28	; 61
    32f4:	df 91       	pop	r29
    32f6:	cf 91       	pop	r28
    32f8:	0f 91       	pop	r16
    32fa:	ff 90       	pop	r15
    32fc:	ef 90       	pop	r14
    32fe:	df 90       	pop	r13
    3300:	cf 90       	pop	r12
    3302:	08 95       	ret

00003304 <xTimerGenericCommand>:
    }
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
    3304:	0f 93       	push	r16
    3306:	1f 93       	push	r17
    3308:	cf 93       	push	r28
    330a:	df 93       	push	r29
    330c:	00 d0       	rcall	.+0      	; 0x330e <xTimerGenericCommand+0xa>
    330e:	1f 92       	push	r1
    3310:	1f 92       	push	r1
    3312:	cd b7       	in	r28, 0x3d	; 61
    3314:	de b7       	in	r29, 0x3e	; 62

    configASSERT( xTimer );

    /* Send a message to the timer service task to perform a particular action
    on a particular timer definition. */
    if( xTimerQueue != NULL )
    3316:	e0 91 ff 09 	lds	r30, 0x09FF	; 0x8009ff <xTimerQueue>
    331a:	f0 91 00 0a 	lds	r31, 0x0A00	; 0x800a00 <xTimerQueue+0x1>
    331e:	30 97       	sbiw	r30, 0x00	; 0
    3320:	69 f1       	breq	.+90     	; 0x337c <xTimerGenericCommand+0x78>
    3322:	d9 01       	movw	r26, r18
    {
        /* Send a command to the timer service task to start the xTimer timer. */
        xMessage.xMessageID = xCommandID;
    3324:	69 83       	std	Y+1, r22	; 0x01
        xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    3326:	5b 83       	std	Y+3, r21	; 0x03
    3328:	4a 83       	std	Y+2, r20	; 0x02
        xMessage.u.xTimerParameters.pxTimer = xTimer;
    332a:	9d 83       	std	Y+5, r25	; 0x05
    332c:	8c 83       	std	Y+4, r24	; 0x04

        if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    332e:	66 30       	cpi	r22, 0x06	; 6
    3330:	e4 f4       	brge	.+56     	; 0x336a <xTimerGenericCommand+0x66>
        {
            if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    3332:	e0 dd       	rcall	.-1088   	; 0x2ef4 <xTaskGetSchedulerState>
    3334:	82 30       	cpi	r24, 0x02	; 2
    3336:	61 f4       	brne	.+24     	; 0x3350 <xTimerGenericCommand+0x4c>
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    3338:	20 e0       	ldi	r18, 0x00	; 0
    333a:	a8 01       	movw	r20, r16
    333c:	be 01       	movw	r22, r28
    333e:	6f 5f       	subi	r22, 0xFF	; 255
    3340:	7f 4f       	sbci	r23, 0xFF	; 255
    3342:	80 91 ff 09 	lds	r24, 0x09FF	; 0x8009ff <xTimerQueue>
    3346:	90 91 00 0a 	lds	r25, 0x0A00	; 0x800a00 <xTimerQueue+0x1>
    334a:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <xQueueGenericSend>
    334e:	17 c0       	rjmp	.+46     	; 0x337e <xTimerGenericCommand+0x7a>
            }
            else
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    3350:	20 e0       	ldi	r18, 0x00	; 0
    3352:	40 e0       	ldi	r20, 0x00	; 0
    3354:	50 e0       	ldi	r21, 0x00	; 0
    3356:	be 01       	movw	r22, r28
    3358:	6f 5f       	subi	r22, 0xFF	; 255
    335a:	7f 4f       	sbci	r23, 0xFF	; 255
    335c:	80 91 ff 09 	lds	r24, 0x09FF	; 0x8009ff <xTimerQueue>
    3360:	90 91 00 0a 	lds	r25, 0x0A00	; 0x800a00 <xTimerQueue+0x1>
    3364:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <xQueueGenericSend>
    3368:	0a c0       	rjmp	.+20     	; 0x337e <xTimerGenericCommand+0x7a>
            }
        }
        else
        {
            xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    336a:	20 e0       	ldi	r18, 0x00	; 0
    336c:	ad 01       	movw	r20, r26
    336e:	be 01       	movw	r22, r28
    3370:	6f 5f       	subi	r22, 0xFF	; 255
    3372:	7f 4f       	sbci	r23, 0xFF	; 255
    3374:	cf 01       	movw	r24, r30
    3376:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <xQueueGenericSendFromISR>
    337a:	01 c0       	rjmp	.+2      	; 0x337e <xTimerGenericCommand+0x7a>
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
    337c:	80 e0       	ldi	r24, 0x00	; 0
    {
        mtCOVERAGE_TEST_MARKER();
    }

    return xReturn;
}
    337e:	0f 90       	pop	r0
    3380:	0f 90       	pop	r0
    3382:	0f 90       	pop	r0
    3384:	0f 90       	pop	r0
    3386:	0f 90       	pop	r0
    3388:	df 91       	pop	r29
    338a:	cf 91       	pop	r28
    338c:	1f 91       	pop	r17
    338e:	0f 91       	pop	r16
    3390:	08 95       	ret

00003392 <prvSampleTimeNow>:
    return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
    3392:	af 92       	push	r10
    3394:	bf 92       	push	r11
    3396:	cf 92       	push	r12
    3398:	df 92       	push	r13
    339a:	ef 92       	push	r14
    339c:	ff 92       	push	r15
    339e:	0f 93       	push	r16
    33a0:	1f 93       	push	r17
    33a2:	cf 93       	push	r28
    33a4:	df 93       	push	r29
    33a6:	6c 01       	movw	r12, r24
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

    xTimeNow = xTaskGetTickCount();
    33a8:	08 db       	rcall	.-2544   	; 0x29ba <xTaskGetTickCount>
    33aa:	7c 01       	movw	r14, r24

    if( xTimeNow < xLastTime )
    33ac:	80 91 fb 09 	lds	r24, 0x09FB	; 0x8009fb <xLastTime.2391>
    33b0:	90 91 fc 09 	lds	r25, 0x09FC	; 0x8009fc <xLastTime.2391+0x1>
    33b4:	e8 16       	cp	r14, r24
    33b6:	f9 06       	cpc	r15, r25
    33b8:	08 f0       	brcs	.+2      	; 0x33bc <prvSampleTimeNow+0x2a>
    33ba:	47 c0       	rjmp	.+142    	; 0x344a <prvSampleTimeNow+0xb8>
    33bc:	2f c0       	rjmp	.+94     	; 0x341c <prvSampleTimeNow+0x8a>
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    {
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    33be:	05 80       	ldd	r0, Z+5	; 0x05
    33c0:	f6 81       	ldd	r31, Z+6	; 0x06
    33c2:	e0 2d       	mov	r30, r0
    33c4:	a0 80       	ld	r10, Z
    33c6:	b1 80       	ldd	r11, Z+1	; 0x01

        /* Remove the timer from the list. */
        pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    33c8:	c6 81       	ldd	r28, Z+6	; 0x06
    33ca:	d7 81       	ldd	r29, Z+7	; 0x07
        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    33cc:	8e 01       	movw	r16, r28
    33ce:	0e 5f       	subi	r16, 0xFE	; 254
    33d0:	1f 4f       	sbci	r17, 0xFF	; 255
    33d2:	c8 01       	movw	r24, r16
    33d4:	0e 94 92 0c 	call	0x1924	; 0x1924 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* Execute its callback, then send a command to restart the timer if
        it is an auto-reload timer.  It cannot be restarted here as the lists
        have not yet been switched. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    33d8:	e9 89       	ldd	r30, Y+17	; 0x11
    33da:	fa 89       	ldd	r31, Y+18	; 0x12
    33dc:	ce 01       	movw	r24, r28
    33de:	19 95       	eicall

        if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    33e0:	8e 85       	ldd	r24, Y+14	; 0x0e
    33e2:	81 30       	cpi	r24, 0x01	; 1
    33e4:	d9 f4       	brne	.+54     	; 0x341c <prvSampleTimeNow+0x8a>
            the timer going into the same timer list then it has already expired
            and the timer should be re-inserted into the current list so it is
            processed again within this loop.  Otherwise a command should be sent
            to restart the timer to ensure it is only inserted into a list after
            the lists have been swapped. */
            xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    33e6:	8c 85       	ldd	r24, Y+12	; 0x0c
    33e8:	9d 85       	ldd	r25, Y+13	; 0x0d
    33ea:	8a 0d       	add	r24, r10
    33ec:	9b 1d       	adc	r25, r11
            if( xReloadTime > xNextExpireTime )
    33ee:	a8 16       	cp	r10, r24
    33f0:	b9 06       	cpc	r11, r25
    33f2:	60 f4       	brcc	.+24     	; 0x340c <prvSampleTimeNow+0x7a>
            {
                listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    33f4:	9b 83       	std	Y+3, r25	; 0x03
    33f6:	8a 83       	std	Y+2, r24	; 0x02
                listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    33f8:	d9 87       	std	Y+9, r29	; 0x09
    33fa:	c8 87       	std	Y+8, r28	; 0x08
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    33fc:	b8 01       	movw	r22, r16
    33fe:	80 91 03 0a 	lds	r24, 0x0A03	; 0x800a03 <pxCurrentTimerList>
    3402:	90 91 04 0a 	lds	r25, 0x0A04	; 0x800a04 <pxCurrentTimerList+0x1>
    3406:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <vListInsert>
    340a:	08 c0       	rjmp	.+16     	; 0x341c <prvSampleTimeNow+0x8a>
            }
            else
            {
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    340c:	00 e0       	ldi	r16, 0x00	; 0
    340e:	10 e0       	ldi	r17, 0x00	; 0
    3410:	20 e0       	ldi	r18, 0x00	; 0
    3412:	30 e0       	ldi	r19, 0x00	; 0
    3414:	a5 01       	movw	r20, r10
    3416:	60 e0       	ldi	r22, 0x00	; 0
    3418:	ce 01       	movw	r24, r28
    341a:	74 df       	rcall	.-280    	; 0x3304 <xTimerGenericCommand>

    /* The tick count has overflowed.  The timer lists must be switched.
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    341c:	e0 91 03 0a 	lds	r30, 0x0A03	; 0x800a03 <pxCurrentTimerList>
    3420:	f0 91 04 0a 	lds	r31, 0x0A04	; 0x800a04 <pxCurrentTimerList+0x1>
    3424:	80 81       	ld	r24, Z
    3426:	81 11       	cpse	r24, r1
    3428:	ca cf       	rjmp	.-108    	; 0x33be <prvSampleTimeNow+0x2c>
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxTemp = pxCurrentTimerList;
    pxCurrentTimerList = pxOverflowTimerList;
    342a:	80 91 01 0a 	lds	r24, 0x0A01	; 0x800a01 <pxOverflowTimerList>
    342e:	90 91 02 0a 	lds	r25, 0x0A02	; 0x800a02 <pxOverflowTimerList+0x1>
    3432:	90 93 04 0a 	sts	0x0A04, r25	; 0x800a04 <pxCurrentTimerList+0x1>
    3436:	80 93 03 0a 	sts	0x0A03, r24	; 0x800a03 <pxCurrentTimerList>
    pxOverflowTimerList = pxTemp;
    343a:	f0 93 02 0a 	sts	0x0A02, r31	; 0x800a02 <pxOverflowTimerList+0x1>
    343e:	e0 93 01 0a 	sts	0x0A01, r30	; 0x800a01 <pxOverflowTimerList>
    xTimeNow = xTaskGetTickCount();

    if( xTimeNow < xLastTime )
    {
        prvSwitchTimerLists();
        *pxTimerListsWereSwitched = pdTRUE;
    3442:	81 e0       	ldi	r24, 0x01	; 1
    3444:	f6 01       	movw	r30, r12
    3446:	80 83       	st	Z, r24
    3448:	02 c0       	rjmp	.+4      	; 0x344e <prvSampleTimeNow+0xbc>
    }
    else
    {
        *pxTimerListsWereSwitched = pdFALSE;
    344a:	f6 01       	movw	r30, r12
    344c:	10 82       	st	Z, r1
    }

    xLastTime = xTimeNow;
    344e:	f0 92 fc 09 	sts	0x09FC, r15	; 0x8009fc <xLastTime.2391+0x1>
    3452:	e0 92 fb 09 	sts	0x09FB, r14	; 0x8009fb <xLastTime.2391>

    return xTimeNow;
}
    3456:	c7 01       	movw	r24, r14
    3458:	df 91       	pop	r29
    345a:	cf 91       	pop	r28
    345c:	1f 91       	pop	r17
    345e:	0f 91       	pop	r16
    3460:	ff 90       	pop	r15
    3462:	ef 90       	pop	r14
    3464:	df 90       	pop	r13
    3466:	cf 90       	pop	r12
    3468:	bf 90       	pop	r11
    346a:	af 90       	pop	r10
    346c:	08 95       	ret

0000346e <prvTimerTask>:
    pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
}
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
    346e:	cf 93       	push	r28
    3470:	df 93       	push	r29
    3472:	00 d0       	rcall	.+0      	; 0x3474 <prvTimerTask+0x6>
    3474:	00 d0       	rcall	.+0      	; 0x3476 <prvTimerTask+0x8>
    3476:	cd b7       	in	r28, 0x3d	; 61
    3478:	de b7       	in	r29, 0x3e	; 62
        /* Obtain the time now to make an assessment as to whether the timer
        has expired or not.  If obtaining the time causes the lists to switch
        then don't process this timer as any timers that remained in the list
        when the lists were switched will have been processed within the
        prvSampleTimeNow() function. */
        xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    347a:	ce 01       	movw	r24, r28
    347c:	01 96       	adiw	r24, 0x01	; 1
    347e:	4c 01       	movw	r8, r24
                case when the current timer list is empty. */
                if( xListWasEmpty != pdFALSE )
                {
                    /* The current timer list is empty - is the overflow list
                    also empty? */
                    xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    3480:	44 24       	eor	r4, r4
    3482:	43 94       	inc	r4
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    }
    else
    {
        /* Ensure the task unblocks when the tick count rolls over. */
        xNextExpireTime = ( TickType_t ) 0U;
    3484:	e1 2c       	mov	r14, r1
    3486:	f1 2c       	mov	r15, r1
                case when the current timer list is empty. */
                if( xListWasEmpty != pdFALSE )
                {
                    /* The current timer list is empty - is the overflow list
                    also empty? */
                    xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    3488:	51 2c       	mov	r5, r1
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

    while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    348a:	c8 2e       	mov	r12, r24
    348c:	d9 2c       	mov	r13, r9
    the timer with the nearest expiry time will expire.  If there are no
    active timers then just set the next expire time to 0.  That will cause
    this task to unblock when the tick count overflows, at which point the
    timer lists will be switched and the next expiry time can be
    re-assessed.  */
    *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    348e:	e0 91 03 0a 	lds	r30, 0x0A03	; 0x800a03 <pxCurrentTimerList>
    3492:	f0 91 04 0a 	lds	r31, 0x0A04	; 0x800a04 <pxCurrentTimerList+0x1>
    3496:	80 81       	ld	r24, Z
    if( *pxListWasEmpty == pdFALSE )
    3498:	88 23       	and	r24, r24
    349a:	09 f4       	brne	.+2      	; 0x349e <prvTimerTask+0x30>
    349c:	b1 c0       	rjmp	.+354    	; 0x3600 <prvTimerTask+0x192>
    {
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    349e:	05 80       	ldd	r0, Z+5	; 0x05
    34a0:	f6 81       	ldd	r31, Z+6	; 0x06
    34a2:	e0 2d       	mov	r30, r0
    34a4:	a0 80       	ld	r10, Z
    34a6:	b1 80       	ldd	r11, Z+1	; 0x01
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

    vTaskSuspendAll();
    34a8:	82 da       	rcall	.-2812   	; 0x29ae <vTaskSuspendAll>
        /* Obtain the time now to make an assessment as to whether the timer
        has expired or not.  If obtaining the time causes the lists to switch
        then don't process this timer as any timers that remained in the list
        when the lists were switched will have been processed within the
        prvSampleTimeNow() function. */
        xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    34aa:	c4 01       	movw	r24, r8
    34ac:	72 df       	rcall	.-284    	; 0x3392 <prvSampleTimeNow>
    34ae:	8c 01       	movw	r16, r24
        if( xTimerListsWereSwitched == pdFALSE )
    34b0:	89 81       	ldd	r24, Y+1	; 0x01
    34b2:	81 11       	cpse	r24, r1
    34b4:	43 c0       	rjmp	.+134    	; 0x353c <prvTimerTask+0xce>
        {
            /* The tick count has not overflowed, has the timer expired? */
            if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    34b6:	0a 15       	cp	r16, r10
    34b8:	1b 05       	cpc	r17, r11
            {
                ( void ) xTaskResumeAll();
    34ba:	80 f1       	brcs	.+96     	; 0x351c <prvTimerTask+0xae>
    34bc:	42 db       	rcall	.-2428   	; 0x2b42 <xTaskResumeAll>
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    34be:	e0 91 03 0a 	lds	r30, 0x0A03	; 0x800a03 <pxCurrentTimerList>
    34c2:	f0 91 04 0a 	lds	r31, 0x0A04	; 0x800a04 <pxCurrentTimerList+0x1>
    34c6:	05 80       	ldd	r0, Z+5	; 0x05
    34c8:	f6 81       	ldd	r31, Z+6	; 0x06
    34ca:	e0 2d       	mov	r30, r0
    34cc:	66 80       	ldd	r6, Z+6	; 0x06
    34ce:	77 80       	ldd	r7, Z+7	; 0x07

    /* Remove the timer from the list of active timers.  A check has already
    been performed to ensure the list is not empty. */
    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    34d0:	c3 01       	movw	r24, r6
    34d2:	02 96       	adiw	r24, 0x02	; 2
    34d4:	0e 94 92 0c 	call	0x1924	; 0x1924 <uxListRemove>
    traceTIMER_EXPIRED( pxTimer );

    /* If the timer is an auto reload timer then calculate the next
    expiry time and re-insert the timer in the list of active timers. */
    if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    34d8:	d3 01       	movw	r26, r6
    34da:	1e 96       	adiw	r26, 0x0e	; 14
    34dc:	8c 91       	ld	r24, X
    34de:	1e 97       	sbiw	r26, 0x0e	; 14
    34e0:	81 30       	cpi	r24, 0x01	; 1
    34e2:	a1 f4       	brne	.+40     	; 0x350c <prvTimerTask+0x9e>
    {
        /* The timer is inserted into a list using a time relative to anything
        other than the current time.  It will therefore be inserted into the
        correct list relative to the time this task thinks it is now. */
        if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    34e4:	1c 96       	adiw	r26, 0x0c	; 12
    34e6:	6d 91       	ld	r22, X+
    34e8:	7c 91       	ld	r23, X
    34ea:	1d 97       	sbiw	r26, 0x0d	; 13
    34ec:	6a 0d       	add	r22, r10
    34ee:	7b 1d       	adc	r23, r11
    34f0:	95 01       	movw	r18, r10
    34f2:	a8 01       	movw	r20, r16
    34f4:	c3 01       	movw	r24, r6
    34f6:	61 de       	rcall	.-830    	; 0x31ba <prvInsertTimerInActiveList>
    34f8:	88 23       	and	r24, r24
    34fa:	41 f0       	breq	.+16     	; 0x350c <prvTimerTask+0x9e>
        {
            /* The timer expired before it was added to the active timer
            list.  Reload it now.  */
            xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    34fc:	0e 2d       	mov	r16, r14
    34fe:	1f 2d       	mov	r17, r15
    3500:	2e 2d       	mov	r18, r14
    3502:	3f 2d       	mov	r19, r15
    3504:	a5 01       	movw	r20, r10
    3506:	65 2d       	mov	r22, r5
    3508:	c3 01       	movw	r24, r6
    350a:	fc de       	rcall	.-520    	; 0x3304 <xTimerGenericCommand>
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* Call the timer callback. */
    pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    350c:	d3 01       	movw	r26, r6
    350e:	51 96       	adiw	r26, 0x11	; 17
    3510:	ed 91       	ld	r30, X+
    3512:	fc 91       	ld	r31, X
    3514:	52 97       	sbiw	r26, 0x12	; 18
    3516:	c3 01       	movw	r24, r6
    3518:	19 95       	eicall
    351a:	65 c0       	rjmp	.+202    	; 0x35e6 <prvTimerTask+0x178>
        prvSampleTimeNow() function. */
        xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
        if( xTimerListsWereSwitched == pdFALSE )
        {
            /* The tick count has not overflowed, has the timer expired? */
            if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    351c:	45 2d       	mov	r20, r5
                    /* The current timer list is empty - is the overflow list
                    also empty? */
                    xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
                }

                vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    351e:	b5 01       	movw	r22, r10
    3520:	60 1b       	sub	r22, r16
    3522:	71 0b       	sbc	r23, r17
    3524:	80 91 ff 09 	lds	r24, 0x09FF	; 0x8009ff <xTimerQueue>
    3528:	90 91 00 0a 	lds	r25, 0x0A00	; 0x800a00 <xTimerQueue+0x1>
    352c:	0e 94 a8 10 	call	0x2150	; 0x2150 <vQueueWaitForMessageRestricted>

                if( xTaskResumeAll() == pdFALSE )
    3530:	08 db       	rcall	.-2544   	; 0x2b42 <xTaskResumeAll>
    3532:	81 11       	cpse	r24, r1
                {
                    /* Yield to wait for either a command to arrive, or the
                    block time to expire.  If a command arrived between the
                    critical section being exited and this yield then the yield
                    will not cause the task to block. */
                    portYIELD_WITHIN_API();
    3534:	58 c0       	rjmp	.+176    	; 0x35e6 <prvTimerTask+0x178>
    3536:	0e 94 67 0d 	call	0x1ace	; 0x1ace <vPortYield>
                }
            }
        }
        else
        {
            ( void ) xTaskResumeAll();
    353a:	55 c0       	rjmp	.+170    	; 0x35e6 <prvTimerTask+0x178>
    353c:	02 db       	rcall	.-2556   	; 0x2b42 <xTaskResumeAll>
    353e:	53 c0       	rjmp	.+166    	; 0x35e6 <prvTimerTask+0x178>
        }
        #endif /* INCLUDE_xTimerPendFunctionCall */

        /* Commands that are positive are timer commands rather than pended
        function calls. */
        if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    3540:	89 81       	ldd	r24, Y+1	; 0x01
    3542:	88 23       	and	r24, r24
    3544:	0c f4       	brge	.+2      	; 0x3548 <prvTimerTask+0xda>
    3546:	4f c0       	rjmp	.+158    	; 0x35e6 <prvTimerTask+0x178>
        {
            /* The messages uses the xTimerParameters member to work on a
            software timer. */
            pxTimer = xMessage.u.xTimerParameters.pxTimer;
    3548:	ac 80       	ldd	r10, Y+4	; 0x04
    354a:	bd 80       	ldd	r11, Y+5	; 0x05

        if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    354c:	f5 01       	movw	r30, r10
    354e:	82 85       	ldd	r24, Z+10	; 0x0a
    3550:	93 85       	ldd	r25, Z+11	; 0x0b
    3552:	89 2b       	or	r24, r25
            {
                /* The timer is in a list, remove it. */
                ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    3554:	21 f0       	breq	.+8      	; 0x355e <prvTimerTask+0xf0>
    3556:	c5 01       	movw	r24, r10
    3558:	02 96       	adiw	r24, 0x02	; 2
    355a:	0e 94 92 0c 	call	0x1924	; 0x1924 <uxListRemove>
            it must be present in the function call.  prvSampleTimeNow() must be
            called after the message is received from xTimerQueue so there is no
            possibility of a higher priority task adding a message to the message
            queue with a time that is ahead of the timer daemon task (because it
            pre-empted the timer daemon task after the xTimeNow value was set). */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    355e:	ce 01       	movw	r24, r28
    3560:	06 96       	adiw	r24, 0x06	; 6
    3562:	17 df       	rcall	.-466    	; 0x3392 <prvSampleTimeNow>
    3564:	ac 01       	movw	r20, r24

            switch( xMessage.xMessageID )
    3566:	99 81       	ldd	r25, Y+1	; 0x01
    3568:	94 30       	cpi	r25, 0x04	; 4
    356a:	89 f1       	breq	.+98     	; 0x35ce <prvTimerTask+0x160>
    356c:	1c f4       	brge	.+6      	; 0x3574 <prvTimerTask+0x106>
    356e:	93 30       	cpi	r25, 0x03	; 3
    3570:	d0 f5       	brcc	.+116    	; 0x35e6 <prvTimerTask+0x178>
    3572:	07 c0       	rjmp	.+14     	; 0x3582 <prvTimerTask+0x114>
    3574:	96 30       	cpi	r25, 0x06	; 6
    3576:	bc f1       	brlt	.+110    	; 0x35e6 <prvTimerTask+0x178>
    3578:	98 30       	cpi	r25, 0x08	; 8
    357a:	1c f0       	brlt	.+6      	; 0x3582 <prvTimerTask+0x114>
    357c:	99 30       	cpi	r25, 0x09	; 9
    357e:	39 f1       	breq	.+78     	; 0x35ce <prvTimerTask+0x160>
    3580:	32 c0       	rjmp	.+100    	; 0x35e6 <prvTimerTask+0x178>
                case tmrCOMMAND_START_FROM_ISR :
                case tmrCOMMAND_RESET :
                case tmrCOMMAND_RESET_FROM_ISR :
                case tmrCOMMAND_START_DONT_TRACE :
                    /* Start or restart a timer. */
                    if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    3582:	2a 81       	ldd	r18, Y+2	; 0x02
    3584:	3b 81       	ldd	r19, Y+3	; 0x03
    3586:	d5 01       	movw	r26, r10
    3588:	1c 96       	adiw	r26, 0x0c	; 12
    358a:	6d 91       	ld	r22, X+
    358c:	7c 91       	ld	r23, X
    358e:	1d 97       	sbiw	r26, 0x0d	; 13
    3590:	62 0f       	add	r22, r18
    3592:	73 1f       	adc	r23, r19
    3594:	c5 01       	movw	r24, r10
    3596:	11 de       	rcall	.-990    	; 0x31ba <prvInsertTimerInActiveList>
    3598:	88 23       	and	r24, r24
    359a:	29 f1       	breq	.+74     	; 0x35e6 <prvTimerTask+0x178>
                    {
                        /* The timer expired before it was added to the active
                        timer list.  Process it now. */
                        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    359c:	d5 01       	movw	r26, r10
    359e:	51 96       	adiw	r26, 0x11	; 17
    35a0:	ed 91       	ld	r30, X+
    35a2:	fc 91       	ld	r31, X
    35a4:	52 97       	sbiw	r26, 0x12	; 18
    35a6:	c5 01       	movw	r24, r10
    35a8:	19 95       	eicall
                        traceTIMER_EXPIRED( pxTimer );

                        if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    35aa:	f5 01       	movw	r30, r10
    35ac:	86 85       	ldd	r24, Z+14	; 0x0e
    35ae:	81 30       	cpi	r24, 0x01	; 1
    35b0:	d1 f4       	brne	.+52     	; 0x35e6 <prvTimerTask+0x178>
                        {
                            xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    35b2:	4a 81       	ldd	r20, Y+2	; 0x02
    35b4:	5b 81       	ldd	r21, Y+3	; 0x03
    35b6:	84 85       	ldd	r24, Z+12	; 0x0c
    35b8:	95 85       	ldd	r25, Z+13	; 0x0d
    35ba:	48 0f       	add	r20, r24
    35bc:	59 1f       	adc	r21, r25
    35be:	0e 2d       	mov	r16, r14
    35c0:	1f 2d       	mov	r17, r15
    35c2:	2e 2d       	mov	r18, r14
    35c4:	3f 2d       	mov	r19, r15
    35c6:	65 2d       	mov	r22, r5
    35c8:	c5 01       	movw	r24, r10
    35ca:	9c de       	rcall	.-712    	; 0x3304 <xTimerGenericCommand>
    35cc:	0c c0       	rjmp	.+24     	; 0x35e6 <prvTimerTask+0x178>
                    There is nothing to do here. */
                    break;

                case tmrCOMMAND_CHANGE_PERIOD :
                case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
                    pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    35ce:	6a 81       	ldd	r22, Y+2	; 0x02
    35d0:	7b 81       	ldd	r23, Y+3	; 0x03
    35d2:	d5 01       	movw	r26, r10
    35d4:	1d 96       	adiw	r26, 0x0d	; 13
    35d6:	7c 93       	st	X, r23
    35d8:	6e 93       	st	-X, r22
                    be longer or shorter than the old one.  The command time is
                    therefore set to the current time, and as the period cannot
                    be zero the next expiry time can only be in the future,
                    meaning (unlike for the xTimerStart() case above) there is
                    no fail case that needs to be handled here. */
                    ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    35da:	1c 97       	sbiw	r26, 0x0c	; 12
    35dc:	64 0f       	add	r22, r20
    35de:	75 1f       	adc	r23, r21
    35e0:	9a 01       	movw	r18, r20
    35e2:	c5 01       	movw	r24, r10
    35e4:	ea dd       	rcall	.-1068   	; 0x31ba <prvInsertTimerInActiveList>
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

    while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    35e6:	4e 2d       	mov	r20, r14
    35e8:	5f 2d       	mov	r21, r15
    35ea:	6c 2d       	mov	r22, r12
    35ec:	7d 2d       	mov	r23, r13
    35ee:	80 91 ff 09 	lds	r24, 0x09FF	; 0x8009ff <xTimerQueue>
    35f2:	90 91 00 0a 	lds	r25, 0x0A00	; 0x800a00 <xTimerQueue+0x1>
    35f6:	0e 94 1f 10 	call	0x203e	; 0x203e <xQueueReceive>
    35fa:	81 11       	cpse	r24, r1
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

    vTaskSuspendAll();
    35fc:	a1 cf       	rjmp	.-190    	; 0x3540 <prvTimerTask+0xd2>
    35fe:	47 cf       	rjmp	.-370    	; 0x348e <prvTimerTask+0x20>
        /* Obtain the time now to make an assessment as to whether the timer
        has expired or not.  If obtaining the time causes the lists to switch
        then don't process this timer as any timers that remained in the list
        when the lists were switched will have been processed within the
        prvSampleTimeNow() function. */
        xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    3600:	d6 d9       	rcall	.-3156   	; 0x29ae <vTaskSuspendAll>
    3602:	c4 01       	movw	r24, r8
    3604:	c6 de       	rcall	.-628    	; 0x3392 <prvSampleTimeNow>
    3606:	8c 01       	movw	r16, r24
        if( xTimerListsWereSwitched == pdFALSE )
    3608:	89 81       	ldd	r24, Y+1	; 0x01
    360a:	81 11       	cpse	r24, r1
    360c:	97 cf       	rjmp	.-210    	; 0x353c <prvTimerTask+0xce>
                case when the current timer list is empty. */
                if( xListWasEmpty != pdFALSE )
                {
                    /* The current timer list is empty - is the overflow list
                    also empty? */
                    xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    360e:	e0 91 01 0a 	lds	r30, 0x0A01	; 0x800a01 <pxOverflowTimerList>
    3612:	f0 91 02 0a 	lds	r31, 0x0A02	; 0x800a02 <pxOverflowTimerList+0x1>
    3616:	80 81       	ld	r24, Z
    3618:	44 2d       	mov	r20, r4
    361a:	81 11       	cpse	r24, r1
    361c:	45 2d       	mov	r20, r5
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    }
    else
    {
        /* Ensure the task unblocks when the tick count rolls over. */
        xNextExpireTime = ( TickType_t ) 0U;
    361e:	ae 2c       	mov	r10, r14
    3620:	bf 2c       	mov	r11, r15
    3622:	7d cf       	rjmp	.-262    	; 0x351e <prvTimerTask+0xb0>

00003624 <crc16_update>:
    3624:	86 27       	eor	r24, r22
    3626:	28 e0       	ldi	r18, 0x08	; 8
    3628:	30 e0       	ldi	r19, 0x00	; 0
    362a:	80 ff       	sbrs	r24, 0
    362c:	07 c0       	rjmp	.+14     	; 0x363c <crc16_update+0x18>
    362e:	96 95       	lsr	r25
    3630:	87 95       	ror	r24
    3632:	41 e0       	ldi	r20, 0x01	; 1
    3634:	84 27       	eor	r24, r20
    3636:	40 ea       	ldi	r20, 0xA0	; 160
    3638:	94 27       	eor	r25, r20
    363a:	02 c0       	rjmp	.+4      	; 0x3640 <crc16_update+0x1c>
    363c:	96 95       	lsr	r25
    363e:	87 95       	ror	r24
    3640:	21 50       	subi	r18, 0x01	; 1
    3642:	31 09       	sbc	r19, r1
    3644:	91 f7       	brne	.-28     	; 0x362a <crc16_update+0x6>
    3646:	08 95       	ret

00003648 <Get_millis>:
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    3648:	f8 94       	cli
    364a:	60 91 34 0c 	lds	r22, 0x0C34	; 0x800c34 <timer1_millis>
    364e:	70 91 35 0c 	lds	r23, 0x0C35	; 0x800c35 <timer1_millis+0x1>
    3652:	80 91 36 0c 	lds	r24, 0x0C36	; 0x800c36 <timer1_millis+0x2>
    3656:	90 91 37 0c 	lds	r25, 0x0C37	; 0x800c37 <timer1_millis+0x3>
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
    365a:	78 94       	sei
    365c:	08 95       	ret

0000365e <__vector_13>:
    365e:	1f 92       	push	r1
    3660:	0f 92       	push	r0
    3662:	0f b6       	in	r0, 0x3f	; 63
    3664:	0f 92       	push	r0
    3666:	11 24       	eor	r1, r1
    3668:	8f 93       	push	r24
    366a:	9f 93       	push	r25
    366c:	af 93       	push	r26
    366e:	bf 93       	push	r27
    3670:	80 91 34 0c 	lds	r24, 0x0C34	; 0x800c34 <timer1_millis>
    3674:	90 91 35 0c 	lds	r25, 0x0C35	; 0x800c35 <timer1_millis+0x1>
    3678:	a0 91 36 0c 	lds	r26, 0x0C36	; 0x800c36 <timer1_millis+0x2>
    367c:	b0 91 37 0c 	lds	r27, 0x0C37	; 0x800c37 <timer1_millis+0x3>
    3680:	01 96       	adiw	r24, 0x01	; 1
    3682:	a1 1d       	adc	r26, r1
    3684:	b1 1d       	adc	r27, r1
    3686:	80 93 34 0c 	sts	0x0C34, r24	; 0x800c34 <timer1_millis>
    368a:	90 93 35 0c 	sts	0x0C35, r25	; 0x800c35 <timer1_millis+0x1>
    368e:	a0 93 36 0c 	sts	0x0C36, r26	; 0x800c36 <timer1_millis+0x2>
    3692:	b0 93 37 0c 	sts	0x0C37, r27	; 0x800c37 <timer1_millis+0x3>
    3696:	bf 91       	pop	r27
    3698:	af 91       	pop	r26
    369a:	9f 91       	pop	r25
    369c:	8f 91       	pop	r24
    369e:	0f 90       	pop	r0
    36a0:	0f be       	out	0x3f, r0	; 63
    36a2:	0f 90       	pop	r0
    36a4:	1f 90       	pop	r1
    36a6:	18 95       	reti

000036a8 <__udivmodsi4>:
    36a8:	a1 e2       	ldi	r26, 0x21	; 33
    36aa:	1a 2e       	mov	r1, r26
    36ac:	aa 1b       	sub	r26, r26
    36ae:	bb 1b       	sub	r27, r27
    36b0:	fd 01       	movw	r30, r26
    36b2:	0d c0       	rjmp	.+26     	; 0x36ce <__udivmodsi4_ep>

000036b4 <__udivmodsi4_loop>:
    36b4:	aa 1f       	adc	r26, r26
    36b6:	bb 1f       	adc	r27, r27
    36b8:	ee 1f       	adc	r30, r30
    36ba:	ff 1f       	adc	r31, r31
    36bc:	a2 17       	cp	r26, r18
    36be:	b3 07       	cpc	r27, r19
    36c0:	e4 07       	cpc	r30, r20
    36c2:	f5 07       	cpc	r31, r21
    36c4:	20 f0       	brcs	.+8      	; 0x36ce <__udivmodsi4_ep>
    36c6:	a2 1b       	sub	r26, r18
    36c8:	b3 0b       	sbc	r27, r19
    36ca:	e4 0b       	sbc	r30, r20
    36cc:	f5 0b       	sbc	r31, r21

000036ce <__udivmodsi4_ep>:
    36ce:	66 1f       	adc	r22, r22
    36d0:	77 1f       	adc	r23, r23
    36d2:	88 1f       	adc	r24, r24
    36d4:	99 1f       	adc	r25, r25
    36d6:	1a 94       	dec	r1
    36d8:	69 f7       	brne	.-38     	; 0x36b4 <__udivmodsi4_loop>
    36da:	60 95       	com	r22
    36dc:	70 95       	com	r23
    36de:	80 95       	com	r24
    36e0:	90 95       	com	r25
    36e2:	9b 01       	movw	r18, r22
    36e4:	ac 01       	movw	r20, r24
    36e6:	bd 01       	movw	r22, r26
    36e8:	cf 01       	movw	r24, r30
    36ea:	08 95       	ret

000036ec <memcpy>:
    36ec:	fb 01       	movw	r30, r22
    36ee:	dc 01       	movw	r26, r24
    36f0:	02 c0       	rjmp	.+4      	; 0x36f6 <memcpy+0xa>
    36f2:	01 90       	ld	r0, Z+
    36f4:	0d 92       	st	X+, r0
    36f6:	41 50       	subi	r20, 0x01	; 1
    36f8:	50 40       	sbci	r21, 0x00	; 0
    36fa:	d8 f7       	brcc	.-10     	; 0x36f2 <memcpy+0x6>
    36fc:	08 95       	ret

000036fe <memset>:
    36fe:	dc 01       	movw	r26, r24
    3700:	01 c0       	rjmp	.+2      	; 0x3704 <memset+0x6>
    3702:	6d 93       	st	X+, r22
    3704:	41 50       	subi	r20, 0x01	; 1
    3706:	50 40       	sbci	r21, 0x00	; 0
    3708:	e0 f7       	brcc	.-8      	; 0x3702 <memset+0x4>
    370a:	08 95       	ret

0000370c <_exit>:
    370c:	f8 94       	cli

0000370e <__stop_program>:
    370e:	ff cf       	rjmp	.-2      	; 0x370e <__stop_program>
