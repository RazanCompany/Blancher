
blancher.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002b2  00800200  00004ff2  00005086  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004ff2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00001622  008004b2  008004b2  00005338  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00005338  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00005368  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000d00  00000000  00000000  000053a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000ea9e  00000000  00000000  000060a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003c96  00000000  00000000  00014b46  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000cf54  00000000  00000000  000187dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000020e8  00000000  00000000  00025730  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00019864  00000000  00000000  00027818  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000a7d1  00000000  00000000  0004107c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000cf0  00000000  00000000  0004b84d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00006d4a  00000000  00000000  0004c53d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	db c0       	rjmp	.+438    	; 0x1b8 <__ctors_end>
       2:	00 00       	nop
       4:	fa c0       	rjmp	.+500    	; 0x1fa <__bad_interrupt>
       6:	00 00       	nop
       8:	f8 c0       	rjmp	.+496    	; 0x1fa <__bad_interrupt>
       a:	00 00       	nop
       c:	f6 c0       	rjmp	.+492    	; 0x1fa <__bad_interrupt>
       e:	00 00       	nop
      10:	f4 c0       	rjmp	.+488    	; 0x1fa <__bad_interrupt>
      12:	00 00       	nop
      14:	f2 c0       	rjmp	.+484    	; 0x1fa <__bad_interrupt>
      16:	00 00       	nop
      18:	f0 c0       	rjmp	.+480    	; 0x1fa <__bad_interrupt>
      1a:	00 00       	nop
      1c:	ee c0       	rjmp	.+476    	; 0x1fa <__bad_interrupt>
      1e:	00 00       	nop
      20:	ec c0       	rjmp	.+472    	; 0x1fa <__bad_interrupt>
      22:	00 00       	nop
      24:	ea c0       	rjmp	.+468    	; 0x1fa <__bad_interrupt>
      26:	00 00       	nop
      28:	e8 c0       	rjmp	.+464    	; 0x1fa <__bad_interrupt>
      2a:	00 00       	nop
      2c:	e6 c0       	rjmp	.+460    	; 0x1fa <__bad_interrupt>
      2e:	00 00       	nop
      30:	0c 94 bc 17 	jmp	0x2f78	; 0x2f78 <__vector_12>
      34:	0c 94 db 23 	jmp	0x47b6	; 0x47b6 <__vector_13>
      38:	e0 c0       	rjmp	.+448    	; 0x1fa <__bad_interrupt>
      3a:	00 00       	nop
      3c:	de c0       	rjmp	.+444    	; 0x1fa <__bad_interrupt>
      3e:	00 00       	nop
      40:	dc c0       	rjmp	.+440    	; 0x1fa <__bad_interrupt>
      42:	00 00       	nop
      44:	0c 94 a8 0e 	jmp	0x1d50	; 0x1d50 <__vector_17>
      48:	d8 c0       	rjmp	.+432    	; 0x1fa <__bad_interrupt>
      4a:	00 00       	nop
      4c:	d6 c0       	rjmp	.+428    	; 0x1fa <__bad_interrupt>
      4e:	00 00       	nop
      50:	d4 c0       	rjmp	.+424    	; 0x1fa <__bad_interrupt>
      52:	00 00       	nop
      54:	d2 c0       	rjmp	.+420    	; 0x1fa <__bad_interrupt>
      56:	00 00       	nop
      58:	d0 c0       	rjmp	.+416    	; 0x1fa <__bad_interrupt>
      5a:	00 00       	nop
      5c:	ce c0       	rjmp	.+412    	; 0x1fa <__bad_interrupt>
      5e:	00 00       	nop
      60:	cc c0       	rjmp	.+408    	; 0x1fa <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 6a 10 	jmp	0x20d4	; 0x20d4 <__vector_25>
      68:	0c 94 a3 10 	jmp	0x2146	; 0x2146 <__vector_26>
      6c:	c6 c0       	rjmp	.+396    	; 0x1fa <__bad_interrupt>
      6e:	00 00       	nop
      70:	c4 c0       	rjmp	.+392    	; 0x1fa <__bad_interrupt>
      72:	00 00       	nop
      74:	0c 94 73 0d 	jmp	0x1ae6	; 0x1ae6 <__vector_29>
      78:	c0 c0       	rjmp	.+384    	; 0x1fa <__bad_interrupt>
      7a:	00 00       	nop
      7c:	be c0       	rjmp	.+380    	; 0x1fa <__bad_interrupt>
      7e:	00 00       	nop
      80:	0c 94 18 0f 	jmp	0x1e30	; 0x1e30 <__vector_32>
      84:	ba c0       	rjmp	.+372    	; 0x1fa <__bad_interrupt>
      86:	00 00       	nop
      88:	b8 c0       	rjmp	.+368    	; 0x1fa <__bad_interrupt>
      8a:	00 00       	nop
      8c:	b6 c0       	rjmp	.+364    	; 0x1fa <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 70 11 	jmp	0x22e0	; 0x22e0 <__vector_36>
      94:	0c 94 a9 11 	jmp	0x2352	; 0x2352 <__vector_37>
      98:	b0 c0       	rjmp	.+352    	; 0x1fa <__bad_interrupt>
      9a:	00 00       	nop
      9c:	ae c0       	rjmp	.+348    	; 0x1fa <__bad_interrupt>
      9e:	00 00       	nop
      a0:	ac c0       	rjmp	.+344    	; 0x1fa <__bad_interrupt>
      a2:	00 00       	nop
      a4:	aa c0       	rjmp	.+340    	; 0x1fa <__bad_interrupt>
      a6:	00 00       	nop
      a8:	0c 94 88 0f 	jmp	0x1f10	; 0x1f10 <__vector_42>
      ac:	a6 c0       	rjmp	.+332    	; 0x1fa <__bad_interrupt>
      ae:	00 00       	nop
      b0:	a4 c0       	rjmp	.+328    	; 0x1fa <__bad_interrupt>
      b2:	00 00       	nop
      b4:	a2 c0       	rjmp	.+324    	; 0x1fa <__bad_interrupt>
      b6:	00 00       	nop
      b8:	a0 c0       	rjmp	.+320    	; 0x1fa <__bad_interrupt>
      ba:	00 00       	nop
      bc:	0c 94 f8 0f 	jmp	0x1ff0	; 0x1ff0 <__vector_47>
      c0:	9c c0       	rjmp	.+312    	; 0x1fa <__bad_interrupt>
      c2:	00 00       	nop
      c4:	9a c0       	rjmp	.+308    	; 0x1fa <__bad_interrupt>
      c6:	00 00       	nop
      c8:	98 c0       	rjmp	.+304    	; 0x1fa <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 7f 12 	jmp	0x24fe	; 0x24fe <__vector_51>
      d0:	0c 94 b8 12 	jmp	0x2570	; 0x2570 <__vector_52>
      d4:	92 c0       	rjmp	.+292    	; 0x1fa <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 8b 13 	jmp	0x2716	; 0x2716 <__vector_54>
      dc:	0c 94 c4 13 	jmp	0x2788	; 0x2788 <__vector_55>
      e0:	8c c0       	rjmp	.+280    	; 0x1fa <__bad_interrupt>
      e2:	00 00       	nop
      e4:	07 63       	ori	r16, 0x37	; 55
      e6:	42 36       	cpi	r20, 0x62	; 98
      e8:	b7 9b       	sbis	0x16, 7	; 22
      ea:	d8 a7       	std	Y+40, r29	; 0x28
      ec:	1a 39       	cpi	r17, 0x9A	; 154
      ee:	68 56       	subi	r22, 0x68	; 104
      f0:	18 ae       	std	Y+56, r1	; 0x38
      f2:	ba ab       	std	Y+50, r27	; 0x32
      f4:	55 8c       	ldd	r5, Z+29	; 0x1d
      f6:	1d 3c       	cpi	r17, 0xCD	; 205
      f8:	b7 cc       	rjmp	.-1682   	; 0xfffffa68 <__eeprom_end+0xff7efa68>
      fa:	57 63       	ori	r21, 0x37	; 55
      fc:	bd 6d       	ori	r27, 0xDD	; 221
      fe:	ed fd       	.word	0xfded	; ????
     100:	75 3e       	cpi	r23, 0xE5	; 229
     102:	f6 17       	cp	r31, r22
     104:	72 31       	cpi	r23, 0x12	; 18
     106:	bf 00       	.word	0x00bf	; ????
     108:	00 00       	nop
     10a:	80 3f       	cpi	r24, 0xF0	; 240
     10c:	08 00       	.word	0x0008	; ????
     10e:	00 00       	nop
     110:	be 92       	st	-X, r11
     112:	24 49       	sbci	r18, 0x94	; 148
     114:	12 3e       	cpi	r17, 0xE2	; 226
     116:	ab aa       	std	Y+51, r10	; 0x33
     118:	aa 2a       	or	r10, r26
     11a:	be cd       	rjmp	.-1156   	; 0xfffffc98 <__eeprom_end+0xff7efc98>
     11c:	cc cc       	rjmp	.-1640   	; 0xfffffab6 <__eeprom_end+0xff7efab6>
     11e:	4c 3e       	cpi	r20, 0xEC	; 236
     120:	00 00       	nop
     122:	00 80       	ld	r0, Z
     124:	be ab       	std	Y+54, r27	; 0x36
     126:	aa aa       	std	Y+50, r10	; 0x32
     128:	aa 3e       	cpi	r26, 0xEA	; 234
     12a:	00 00       	nop
     12c:	00 00       	nop
     12e:	bf 00       	.word	0x00bf	; ????
     130:	00 00       	nop
     132:	80 3f       	cpi	r24, 0xF0	; 240
     134:	00 00       	nop
     136:	00 00       	nop
     138:	00 08       	sbc	r0, r0
     13a:	41 78       	andi	r20, 0x81	; 129
     13c:	d3 bb       	out	0x13, r29	; 19
     13e:	43 87       	std	Z+11, r20	; 0x0b
     140:	d1 13       	cpse	r29, r17
     142:	3d 19       	sub	r19, r13
     144:	0e 3c       	cpi	r16, 0xCE	; 206
     146:	c3 bd       	out	0x23, r28	; 35
     148:	42 82       	std	Z+2, r4	; 0x02
     14a:	ad 2b       	or	r26, r29
     14c:	3e 68       	ori	r19, 0x8E	; 142
     14e:	ec 82       	std	Y+4, r14	; 0x04
     150:	76 be       	out	0x36, r7	; 54
     152:	d9 8f       	std	Y+25, r29	; 0x19
     154:	e1 a9       	ldd	r30, Z+49	; 0x31
     156:	3e 4c       	sbci	r19, 0xCE	; 206
     158:	80 ef       	ldi	r24, 0xF0	; 240
     15a:	ff be       	out	0x3f, r15	; 63
     15c:	01 c4       	rjmp	.+2050   	; 0x960 <Modbus_mster_transaction+0x1fc>
     15e:	ff 7f       	andi	r31, 0xFF	; 255
     160:	3f 00       	.word	0x003f	; ????
     162:	00 00       	nop
	...

00000166 <prvIdleTask>:
    /* Reset the event list item to its normal value - so it can be used with
    queues and semaphores. */
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */

    return uxReturn;
}
     166:	ca ed       	ldi	r28, 0xDA	; 218
     168:	de e0       	ldi	r29, 0x0E	; 14
     16a:	00 ef       	ldi	r16, 0xF0	; 240
     16c:	1e e0       	ldi	r17, 0x0E	; 14
     16e:	80 91 d9 0e 	lds	r24, 0x0ED9	; 0x800ed9 <uxDeletedTasksWaitingCleanUp>
     172:	88 23       	and	r24, r24
     174:	d1 f0       	breq	.+52     	; 0x1aa <prvIdleTask+0x44>
     176:	0f b6       	in	r0, 0x3f	; 63
     178:	f8 94       	cli
     17a:	0f 92       	push	r0
     17c:	ed 81       	ldd	r30, Y+5	; 0x05
     17e:	fe 81       	ldd	r31, Y+6	; 0x06
     180:	86 81       	ldd	r24, Z+6	; 0x06
     182:	97 81       	ldd	r25, Z+7	; 0x07
     184:	02 96       	adiw	r24, 0x02	; 2
     186:	0e 94 24 16 	call	0x2c48	; 0x2c48 <uxListRemove>
     18a:	80 91 d8 0e 	lds	r24, 0x0ED8	; 0x800ed8 <uxCurrentNumberOfTasks>
     18e:	81 50       	subi	r24, 0x01	; 1
     190:	80 93 d8 0e 	sts	0x0ED8, r24	; 0x800ed8 <uxCurrentNumberOfTasks>
     194:	80 91 d9 0e 	lds	r24, 0x0ED9	; 0x800ed9 <uxDeletedTasksWaitingCleanUp>
     198:	81 50       	subi	r24, 0x01	; 1
     19a:	80 93 d9 0e 	sts	0x0ED9, r24	; 0x800ed9 <uxDeletedTasksWaitingCleanUp>
     19e:	0f 90       	pop	r0
     1a0:	0f be       	out	0x3f, r0	; 63
     1a2:	80 91 d9 0e 	lds	r24, 0x0ED9	; 0x800ed9 <uxDeletedTasksWaitingCleanUp>
     1a6:	81 11       	cpse	r24, r1
     1a8:	e6 cf       	rjmp	.-52     	; 0x176 <prvIdleTask+0x10>
     1aa:	f8 01       	movw	r30, r16
     1ac:	80 81       	ld	r24, Z
     1ae:	82 30       	cpi	r24, 0x02	; 2
     1b0:	f0 f2       	brcs	.-68     	; 0x16e <prvIdleTask+0x8>
     1b2:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <vPortYield>
     1b6:	db cf       	rjmp	.-74     	; 0x16e <prvIdleTask+0x8>

000001b8 <__ctors_end>:
     1b8:	11 24       	eor	r1, r1
     1ba:	1f be       	out	0x3f, r1	; 63
     1bc:	cf ef       	ldi	r28, 0xFF	; 255
     1be:	d1 e2       	ldi	r29, 0x21	; 33
     1c0:	de bf       	out	0x3e, r29	; 62
     1c2:	cd bf       	out	0x3d, r28	; 61
     1c4:	00 e0       	ldi	r16, 0x00	; 0
     1c6:	0c bf       	out	0x3c, r16	; 60

000001c8 <__do_copy_data>:
     1c8:	14 e0       	ldi	r17, 0x04	; 4
     1ca:	a0 e0       	ldi	r26, 0x00	; 0
     1cc:	b2 e0       	ldi	r27, 0x02	; 2
     1ce:	e2 ef       	ldi	r30, 0xF2	; 242
     1d0:	ff e4       	ldi	r31, 0x4F	; 79
     1d2:	00 e0       	ldi	r16, 0x00	; 0
     1d4:	0b bf       	out	0x3b, r16	; 59
     1d6:	02 c0       	rjmp	.+4      	; 0x1dc <__do_copy_data+0x14>
     1d8:	07 90       	elpm	r0, Z+
     1da:	0d 92       	st	X+, r0
     1dc:	a2 3b       	cpi	r26, 0xB2	; 178
     1de:	b1 07       	cpc	r27, r17
     1e0:	d9 f7       	brne	.-10     	; 0x1d8 <__do_copy_data+0x10>

000001e2 <__do_clear_bss>:
     1e2:	2a e1       	ldi	r18, 0x1A	; 26
     1e4:	a2 eb       	ldi	r26, 0xB2	; 178
     1e6:	b4 e0       	ldi	r27, 0x04	; 4
     1e8:	01 c0       	rjmp	.+2      	; 0x1ec <.do_clear_bss_start>

000001ea <.do_clear_bss_loop>:
     1ea:	1d 92       	st	X+, r1

000001ec <.do_clear_bss_start>:
     1ec:	a4 3d       	cpi	r26, 0xD4	; 212
     1ee:	b2 07       	cpc	r27, r18
     1f0:	e1 f7       	brne	.-8      	; 0x1ea <.do_clear_bss_loop>
     1f2:	0e 94 b2 0c 	call	0x1964	; 0x1964 <main>
     1f6:	0c 94 f7 27 	jmp	0x4fee	; 0x4fee <_exit>

000001fa <__bad_interrupt>:
     1fa:	02 cf       	rjmp	.-508    	; 0x0 <__vectors>

000001fc <Sequance_task>:

g_Inveter_Config Inverter_check_config;
gSystemError errors ;

void Sequance_task(void* pvParameters)
{
     1fc:	cf 93       	push	r28
     1fe:	df 93       	push	r29
     200:	1f 92       	push	r1
     202:	1f 92       	push	r1
     204:	cd b7       	in	r28, 0x3d	; 61
     206:	de b7       	in	r29, 0x3e	; 62
		xSemaphoreGive(LCD_mutex_handle);
		UART0_puts("TO R M\n");
	}
#endif
#ifdef DRUM_CONVEYOR_CHECK   
	Inverter_check_config.distance = distance ;
     208:	e2 eb       	ldi	r30, 0xB2	; 178
     20a:	ff e0       	ldi	r31, 0x0F	; 15
     20c:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <distance>
     210:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <distance+0x1>
     214:	93 83       	std	Z+3, r25	; 0x03
     216:	82 83       	std	Z+2, r24	; 0x02
	Inverter_check_config.gear_ratio=gear_ratio;
     218:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <gear_ratio>
     21c:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <gear_ratio+0x1>
     220:	91 83       	std	Z+1, r25	; 0x01
     222:	80 83       	st	Z, r24
	Inverter_check_config.gear_diameter = gear_diameter;
     224:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <gear_diameter>
     228:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <gear_diameter+0x1>
     22c:	95 83       	std	Z+5, r25	; 0x05
     22e:	84 83       	std	Z+4, r24	; 0x04
	Inverter_check_config.motor_rpm_max = motor_rpm_max;
     230:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
     234:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__data_start+0x1>
     238:	97 83       	std	Z+7, r25	; 0x07
     23a:	86 83       	std	Z+6, r24	; 0x06
	Inverter_check_config.time_user_M = 0;
     23c:	11 86       	std	Z+9, r1	; 0x09
     23e:	10 86       	std	Z+8, r1	; 0x08
	Inverter_check_config.time_user_S = 5 ;
     240:	85 e0       	ldi	r24, 0x05	; 5
     242:	90 e0       	ldi	r25, 0x00	; 0
     244:	93 87       	std	Z+11, r25	; 0x0b
     246:	82 87       	std	Z+10, r24	; 0x0a
			
	// check inverter & conveyor
	Inverter_set_Freq(&Inverter_check_config);
     248:	cf 01       	movw	r24, r30
     24a:	46 d1       	rcall	.+652    	; 0x4d8 <Inverter_set_Freq>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     24c:	2f ef       	ldi	r18, 0xFF	; 255
     24e:	33 ed       	ldi	r19, 0xD3	; 211
     250:	80 e3       	ldi	r24, 0x30	; 48
     252:	21 50       	subi	r18, 0x01	; 1
     254:	30 40       	sbci	r19, 0x00	; 0
     256:	80 40       	sbci	r24, 0x00	; 0
     258:	e1 f7       	brne	.-8      	; 0x252 <Sequance_task+0x56>
     25a:	00 c0       	rjmp	.+0      	; 0x25c <Sequance_task+0x60>
     25c:	00 00       	nop
	_delay_ms(1000);
	Inverter_change_state(HIGH);
     25e:	81 e0       	ldi	r24, 0x01	; 1
     260:	28 d2       	rcall	.+1104   	; 0x6b2 <Inverter_change_state>
	Conveyor_motor_change_state(HIGH);
     262:	81 e0       	ldi	r24, 0x01	; 1
     264:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <Conveyor_motor_change_state>
     268:	9f ef       	ldi	r25, 0xFF	; 255
     26a:	29 e5       	ldi	r18, 0x59	; 89
     26c:	32 e6       	ldi	r19, 0x62	; 98
     26e:	82 e0       	ldi	r24, 0x02	; 2
     270:	91 50       	subi	r25, 0x01	; 1
     272:	20 40       	sbci	r18, 0x00	; 0
     274:	30 40       	sbci	r19, 0x00	; 0
     276:	80 40       	sbci	r24, 0x00	; 0
     278:	d9 f7       	brne	.-10     	; 0x270 <Sequance_task+0x74>
     27a:	00 c0       	rjmp	.+0      	; 0x27c <Sequance_task+0x80>
	_delay_ms(15000);
	if( Drum_speed() == 0){
     27c:	00 00       	nop
     27e:	71 d0       	rcall	.+226    	; 0x362 <Drum_speed>
     280:	89 2b       	or	r24, r25
     282:	09 f0       	breq	.+2      	; 0x286 <Sequance_task+0x8a>
     284:	53 c0       	rjmp	.+166    	; 0x32c <Sequance_task+0x130>
		UART0_puts(" Drum speed Err \n");
     286:	88 e0       	ldi	r24, 0x08	; 8
     288:	92 e0       	ldi	r25, 0x02	; 2
     28a:	0e 94 62 11 	call	0x22c4	; 0x22c4 <UART0_puts>
		Inverter_change_state(LOW);
     28e:	80 e0       	ldi	r24, 0x00	; 0
     290:	10 d2       	rcall	.+1056   	; 0x6b2 <Inverter_change_state>
 		uint16_t response  = 0;
     292:	1a 82       	std	Y+2, r1	; 0x02
     294:	19 82       	std	Y+1, r1	; 0x01
		xSemaphoreTake( LCD_mutex_handle , portMAX_DELAY ) ;
     296:	6f ef       	ldi	r22, 0xFF	; 255
     298:	7f ef       	ldi	r23, 0xFF	; 255
     29a:	80 91 8c 1a 	lds	r24, 0x1A8C	; 0x801a8c <LCD_mutex_handle>
     29e:	90 91 8d 1a 	lds	r25, 0x1A8D	; 0x801a8d <LCD_mutex_handle+0x1>
     2a2:	0e 94 34 1a 	call	0x3468	; 0x3468 <xQueueSemaphoreTake>
		UART0_puts("D T M\n");
     2a6:	8a e1       	ldi	r24, 0x1A	; 26
     2a8:	92 e0       	ldi	r25, 0x02	; 2
     2aa:	0e 94 62 11 	call	0x22c4	; 0x22c4 <UART0_puts>
		lcd_Jump_to(DRUM_MOTOR_ERROR_PIC );
     2ae:	8c e0       	ldi	r24, 0x0C	; 12
     2b0:	90 e0       	ldi	r25, 0x00	; 0
     2b2:	4c d2       	rcall	.+1176   	; 0x74c <lcd_Jump_to>
     2b4:	9f ef       	ldi	r25, 0xFF	; 255
     2b6:	23 ec       	ldi	r18, 0xC3	; 195
     2b8:	39 e0       	ldi	r19, 0x09	; 9
     2ba:	91 50       	subi	r25, 0x01	; 1
     2bc:	20 40       	sbci	r18, 0x00	; 0
     2be:	30 40       	sbci	r19, 0x00	; 0
     2c0:	e1 f7       	brne	.-8      	; 0x2ba <Sequance_task+0xbe>
     2c2:	00 c0       	rjmp	.+0      	; 0x2c4 <Sequance_task+0xc8>
     2c4:	00 00       	nop
		_delay_ms(200);
 		while(response == 0 )
     2c6:	89 81       	ldd	r24, Y+1	; 0x01
     2c8:	9a 81       	ldd	r25, Y+2	; 0x02
     2ca:	89 2b       	or	r24, r25
     2cc:	99 f4       	brne	.+38     	; 0x2f4 <Sequance_task+0xf8>
 		{
			Lcd_Read(DRUM_MOTOR_ERROR_RESPONSE,&response);
     2ce:	be 01       	movw	r22, r28
     2d0:	6f 5f       	subi	r22, 0xFF	; 255
     2d2:	7f 4f       	sbci	r23, 0xFF	; 255
     2d4:	84 e0       	ldi	r24, 0x04	; 4
     2d6:	9a e0       	ldi	r25, 0x0A	; 10
     2d8:	26 d2       	rcall	.+1100   	; 0x726 <Lcd_Read>
     2da:	8f ef       	ldi	r24, 0xFF	; 255
     2dc:	93 ec       	ldi	r25, 0xC3	; 195
     2de:	29 e0       	ldi	r18, 0x09	; 9
     2e0:	81 50       	subi	r24, 0x01	; 1
     2e2:	90 40       	sbci	r25, 0x00	; 0
     2e4:	20 40       	sbci	r18, 0x00	; 0
     2e6:	e1 f7       	brne	.-8      	; 0x2e0 <Sequance_task+0xe4>
     2e8:	00 c0       	rjmp	.+0      	; 0x2ea <Sequance_task+0xee>
     2ea:	00 00       	nop
 		uint16_t response  = 0;
		xSemaphoreTake( LCD_mutex_handle , portMAX_DELAY ) ;
		UART0_puts("D T M\n");
		lcd_Jump_to(DRUM_MOTOR_ERROR_PIC );
		_delay_ms(200);
 		while(response == 0 )
     2ec:	89 81       	ldd	r24, Y+1	; 0x01
     2ee:	9a 81       	ldd	r25, Y+2	; 0x02
     2f0:	89 2b       	or	r24, r25
     2f2:	69 f3       	breq	.-38     	; 0x2ce <Sequance_task+0xd2>
 		{
			Lcd_Read(DRUM_MOTOR_ERROR_RESPONSE,&response);
			_delay_ms(200);
 		}
		 UART0_puts("Response = ");
     2f4:	81 e2       	ldi	r24, 0x21	; 33
     2f6:	92 e0       	ldi	r25, 0x02	; 2
     2f8:	0e 94 62 11 	call	0x22c4	; 0x22c4 <UART0_puts>
		 UART0_OutUDec(response);
     2fc:	69 81       	ldd	r22, Y+1	; 0x01
     2fe:	7a 81       	ldd	r23, Y+2	; 0x02
     300:	80 e0       	ldi	r24, 0x00	; 0
     302:	90 e0       	ldi	r25, 0x00	; 0
     304:	0e 94 46 11 	call	0x228c	; 0x228c <UART0_OutUDec>
		 UART0_putc('\n');
     308:	8a e0       	ldi	r24, 0x0A	; 10
     30a:	0e 94 2d 11 	call	0x225a	; 0x225a <UART0_putc>
		xSemaphoreGive(LCD_mutex_handle);
     30e:	20 e0       	ldi	r18, 0x00	; 0
     310:	40 e0       	ldi	r20, 0x00	; 0
     312:	50 e0       	ldi	r21, 0x00	; 0
     314:	60 e0       	ldi	r22, 0x00	; 0
     316:	70 e0       	ldi	r23, 0x00	; 0
     318:	80 91 8c 1a 	lds	r24, 0x1A8C	; 0x801a8c <LCD_mutex_handle>
     31c:	90 91 8d 1a 	lds	r25, 0x1A8D	; 0x801a8d <LCD_mutex_handle+0x1>
     320:	0e 94 e1 18 	call	0x31c2	; 0x31c2 <xQueueGenericSend>
		UART0_puts("D R M\n");
     324:	8d e2       	ldi	r24, 0x2D	; 45
     326:	92 e0       	ldi	r25, 0x02	; 2
     328:	0e 94 62 11 	call	0x22c4	; 0x22c4 <UART0_puts>
	}
 	Inverter_change_state(LOW);
     32c:	80 e0       	ldi	r24, 0x00	; 0
     32e:	c1 d1       	rcall	.+898    	; 0x6b2 <Inverter_change_state>
// 	 }
//  	Conveyor_motor_change_state(LOW);	
#endif
	while (1) 
	{
		UART0_puts(" inside seq \n");
     330:	84 e3       	ldi	r24, 0x34	; 52
     332:	92 e0       	ldi	r25, 0x02	; 2
     334:	0e 94 62 11 	call	0x22c4	; 0x22c4 <UART0_puts>
		vTaskDelay(500/portTICK_PERIOD_MS);
     338:	8f e1       	ldi	r24, 0x1F	; 31
     33a:	90 e0       	ldi	r25, 0x00	; 0
     33c:	0e 94 eb 1d 	call	0x3bd6	; 0x3bd6 <vTaskDelay>
     340:	f7 cf       	rjmp	.-18     	; 0x330 <Sequance_task+0x134>

00000342 <Set_drum_time_callback>:
	Encoder_init(Set_drum_time_callback,DRUM_SPEED_ENCODER_TIMER_NUMBER, 16);
	
}
static void Set_drum_time_callback(uint32_t dif_time)
{
	g_drum_time = dif_time;
     342:	60 93 bf 0f 	sts	0x0FBF, r22	; 0x800fbf <g_drum_time>
     346:	70 93 c0 0f 	sts	0x0FC0, r23	; 0x800fc0 <g_drum_time+0x1>
     34a:	80 93 c1 0f 	sts	0x0FC1, r24	; 0x800fc1 <g_drum_time+0x2>
     34e:	90 93 c2 0f 	sts	0x0FC2, r25	; 0x800fc2 <g_drum_time+0x3>
     352:	08 95       	ret

00000354 <Drum_speed_init>:
 * call back function
 * parameters@ difference time between every ISR For Drum
 * return@ Nothing
 */
void Drum_speed_init(void){
	Encoder_init(Set_drum_time_callback,DRUM_SPEED_ENCODER_TIMER_NUMBER, 16);
     354:	40 e1       	ldi	r20, 0x10	; 16
     356:	50 e0       	ldi	r21, 0x00	; 0
     358:	65 e0       	ldi	r22, 0x05	; 5
     35a:	81 ea       	ldi	r24, 0xA1	; 161
     35c:	91 e0       	ldi	r25, 0x01	; 1
     35e:	54 c0       	rjmp	.+168    	; 0x408 <Encoder_init>
     360:	08 95       	ret

00000362 <Drum_speed>:
}


//application call
uint16_t Drum_speed(void)
{
     362:	cf 92       	push	r12
     364:	df 92       	push	r13
     366:	ef 92       	push	r14
     368:	ff 92       	push	r15
	float s;
	uint16_t val;
	s = (float)(g_drum_time * 4) / (60000);
     36a:	80 91 bf 0f 	lds	r24, 0x0FBF	; 0x800fbf <g_drum_time>
     36e:	90 91 c0 0f 	lds	r25, 0x0FC0	; 0x800fc0 <g_drum_time+0x1>
     372:	a0 91 c1 0f 	lds	r26, 0x0FC1	; 0x800fc1 <g_drum_time+0x2>
     376:	b0 91 c2 0f 	lds	r27, 0x0FC2	; 0x800fc2 <g_drum_time+0x3>
     37a:	bc 01       	movw	r22, r24
     37c:	cd 01       	movw	r24, r26
     37e:	66 0f       	add	r22, r22
     380:	77 1f       	adc	r23, r23
     382:	88 1f       	adc	r24, r24
     384:	99 1f       	adc	r25, r25
     386:	66 0f       	add	r22, r22
     388:	77 1f       	adc	r23, r23
     38a:	88 1f       	adc	r24, r24
     38c:	99 1f       	adc	r25, r25
     38e:	0e 94 fd 24 	call	0x49fa	; 0x49fa <__floatunsisf>
     392:	20 e0       	ldi	r18, 0x00	; 0
     394:	30 e6       	ldi	r19, 0x60	; 96
     396:	4a e6       	ldi	r20, 0x6A	; 106
     398:	57 e4       	ldi	r21, 0x47	; 71
     39a:	0e 94 69 24 	call	0x48d2	; 0x48d2 <__divsf3>
     39e:	6b 01       	movw	r12, r22
     3a0:	7c 01       	movw	r14, r24
	g_drum_time = 0;
     3a2:	10 92 bf 0f 	sts	0x0FBF, r1	; 0x800fbf <g_drum_time>
     3a6:	10 92 c0 0f 	sts	0x0FC0, r1	; 0x800fc0 <g_drum_time+0x1>
     3aa:	10 92 c1 0f 	sts	0x0FC1, r1	; 0x800fc1 <g_drum_time+0x2>
     3ae:	10 92 c2 0f 	sts	0x0FC2, r1	; 0x800fc2 <g_drum_time+0x3>
	if (s != 0 )
     3b2:	20 e0       	ldi	r18, 0x00	; 0
     3b4:	30 e0       	ldi	r19, 0x00	; 0
     3b6:	a9 01       	movw	r20, r18
     3b8:	0e 94 65 24 	call	0x48ca	; 0x48ca <__cmpsf2>
     3bc:	88 23       	and	r24, r24
     3be:	51 f0       	breq	.+20     	; 0x3d4 <Drum_speed+0x72>
	{
		s = 1 / s ;
     3c0:	a7 01       	movw	r20, r14
     3c2:	96 01       	movw	r18, r12
     3c4:	60 e0       	ldi	r22, 0x00	; 0
     3c6:	70 e0       	ldi	r23, 0x00	; 0
     3c8:	80 e8       	ldi	r24, 0x80	; 128
     3ca:	9f e3       	ldi	r25, 0x3F	; 63
     3cc:	0e 94 69 24 	call	0x48d2	; 0x48d2 <__divsf3>
     3d0:	6b 01       	movw	r12, r22
     3d2:	7c 01       	movw	r14, r24
	}
	val = round(s);
     3d4:	c7 01       	movw	r24, r14
     3d6:	b6 01       	movw	r22, r12
     3d8:	0e 94 62 26 	call	0x4cc4	; 0x4cc4 <round>
     3dc:	0e 94 d1 24 	call	0x49a2	; 0x49a2 <__fixunssfsi>
     3e0:	6b 01       	movw	r12, r22
     3e2:	7c 01       	movw	r14, r24
	UART0_puts("SP");
     3e4:	82 e4       	ldi	r24, 0x42	; 66
     3e6:	92 e0       	ldi	r25, 0x02	; 2
     3e8:	0e 94 62 11 	call	0x22c4	; 0x22c4 <UART0_puts>
	UART0_OutUDec(val);
     3ec:	b6 01       	movw	r22, r12
     3ee:	80 e0       	ldi	r24, 0x00	; 0
     3f0:	90 e0       	ldi	r25, 0x00	; 0
     3f2:	0e 94 46 11 	call	0x228c	; 0x228c <UART0_OutUDec>
	UART0_putc('\n');
     3f6:	8a e0       	ldi	r24, 0x0A	; 10
     3f8:	0e 94 2d 11 	call	0x225a	; 0x225a <UART0_putc>
	return val;
	
}
     3fc:	c6 01       	movw	r24, r12
     3fe:	ff 90       	pop	r15
     400:	ef 90       	pop	r14
     402:	df 90       	pop	r13
     404:	cf 90       	pop	r12
     406:	08 95       	ret

00000408 <Encoder_init>:
 */

void Encoder_init(void (*pISR_callback)(uint32_t),uint8_t timer_number,uint16_t ticks_number )
{
	//encoder of Drum on timer 5
	Encoder_1_confg.timer_number = timer_number;
     408:	e3 ec       	ldi	r30, 0xC3	; 195
     40a:	ff e0       	ldi	r31, 0x0F	; 15
     40c:	64 83       	std	Z+4, r22	; 0x04
	// number of ticks 16 to interrupted
	Encoder_1_confg.ticks = ticks_number;
     40e:	51 83       	std	Z+1, r21	; 0x01
     410:	40 83       	st	Z, r20
	//Call back Function 
	Encoder_1_confg.isr_call_back = pISR_callback ; 
     412:	93 83       	std	Z+3, r25	; 0x03
     414:	82 83       	std	Z+2, r24	; 0x02
    timers_init(&Encoder_1_confg);
     416:	cf 01       	movw	r24, r30
     418:	0c 94 28 0e 	jmp	0x1c50	; 0x1c50 <timers_init>
     41c:	08 95       	ret

0000041e <flowrate_feeding_callback>:
	/*
	*	this function is called back from the ISR to increment the liters counter .
	*/
  // call the feeding operation callback .
    // UART0_puts("FLOW_FEED FFFFFFFFFFFFFFFFFFFFFFFFF\n");
     feeding_operation_callback();
     41e:	e0 91 c8 0f 	lds	r30, 0x0FC8	; 0x800fc8 <feeding_operation_callback>
     422:	f0 91 c9 0f 	lds	r31, 0x0FC9	; 0x800fc9 <feeding_operation_callback+0x1>
     426:	19 95       	eicall
     428:	08 95       	ret

0000042a <flowrate_outing_callback>:
	/*
	*	this function is called back from the isr to increment the liters counter .
	*/
  // call the feeding operation callback .
  //UART0_puts("FLOW_OUT OOOOOOOOOOOOOOOOOOOOOOOOOOOO\n");
     out_operation_callback();
     42a:	e0 91 ca 0f 	lds	r30, 0x0FCA	; 0x800fca <out_operation_callback>
     42e:	f0 91 cb 0f 	lds	r31, 0x0FCB	; 0x800fcb <out_operation_callback+0x1>
     432:	19 95       	eicall
     434:	08 95       	ret

00000436 <Flow_rate_init>:
// struts to hold the timers config .
g_Timer_Config feeding_configeration;
g_Timer_Config outing_configeration;

void Flow_rate_init(void (*callback1)(void) , void (*callback2)(void)) 
{
     436:	ef 92       	push	r14
     438:	ff 92       	push	r15
     43a:	0f 93       	push	r16
     43c:	1f 93       	push	r17
     43e:	cf 93       	push	r28
     440:	df 93       	push	r29
     442:	7c 01       	movw	r14, r24
     444:	8b 01       	movw	r16, r22
	
	feeding_configeration.ticks = TICKS_FOR_HALF_LITER ;
     446:	e1 ed       	ldi	r30, 0xD1	; 209
     448:	ff e0       	ldi	r31, 0x0F	; 15
     44a:	c5 e0       	ldi	r28, 0x05	; 5
     44c:	d0 e0       	ldi	r29, 0x00	; 0
     44e:	d1 83       	std	Z+1, r29	; 0x01
     450:	c0 83       	st	Z, r28
	feeding_configeration.timer_number = FLOWRATE_SENSOR_1_TIMER_NUMBER ;//flowrate1_timer_number
     452:	84 e0       	ldi	r24, 0x04	; 4
     454:	84 83       	std	Z+4, r24	; 0x04
	feeding_configeration.isr_call_back = flowrate_feeding_callback ;
     456:	8f e0       	ldi	r24, 0x0F	; 15
     458:	92 e0       	ldi	r25, 0x02	; 2
     45a:	93 83       	std	Z+3, r25	; 0x03
     45c:	82 83       	std	Z+2, r24	; 0x02
	// initialize the needed timer with the previous config .
    timers_init(&feeding_configeration);
     45e:	cf 01       	movw	r24, r30
     460:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <timers_init>
	// initialize other timer for the second flow rate .
	outing_configeration.ticks = TICKS_FOR_HALF_LITER ;
     464:	ec ec       	ldi	r30, 0xCC	; 204
     466:	ff e0       	ldi	r31, 0x0F	; 15
     468:	d1 83       	std	Z+1, r29	; 0x01
     46a:	c0 83       	st	Z, r28
	outing_configeration.timer_number = FLOWRATE_SENSOR_2_TIMER_NUMBER ;//flowrate2_timer_number
     46c:	83 e0       	ldi	r24, 0x03	; 3
     46e:	84 83       	std	Z+4, r24	; 0x04
	outing_configeration.isr_call_back = flowrate_outing_callback ;
     470:	85 e1       	ldi	r24, 0x15	; 21
     472:	92 e0       	ldi	r25, 0x02	; 2
     474:	93 83       	std	Z+3, r25	; 0x03
     476:	82 83       	std	Z+2, r24	; 0x02
	
	// initialize the needed timer with the previous config .
	timers_init(&outing_configeration);
     478:	cf 01       	movw	r24, r30
     47a:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <timers_init>
	feeding_operation_callback = callback1;
     47e:	f0 92 c9 0f 	sts	0x0FC9, r15	; 0x800fc9 <feeding_operation_callback+0x1>
     482:	e0 92 c8 0f 	sts	0x0FC8, r14	; 0x800fc8 <feeding_operation_callback>
	out_operation_callback = callback2 ;
     486:	10 93 cb 0f 	sts	0x0FCB, r17	; 0x800fcb <out_operation_callback+0x1>
     48a:	00 93 ca 0f 	sts	0x0FCA, r16	; 0x800fca <out_operation_callback>
}
     48e:	df 91       	pop	r29
     490:	cf 91       	pop	r28
     492:	1f 91       	pop	r17
     494:	0f 91       	pop	r16
     496:	ff 90       	pop	r15
     498:	ef 90       	pop	r14
     49a:	08 95       	ret

0000049c <Inverter_pre_transmition>:
 */



void Inverter_DEBUG_set_Freq(uint16_t sitting_freq){
	Modbus_Write_single_register(INVERTER,INVERTER_FRE_ADD,sitting_freq);
     49c:	61 e0       	ldi	r22, 0x01	; 1
     49e:	81 e0       	ldi	r24, 0x01	; 1
     4a0:	0c 94 f3 0d 	jmp	0x1be6	; 0x1be6 <Modbus_change_state>
     4a4:	08 95       	ret

000004a6 <Inverter_post_transmition>:
     4a6:	60 e0       	ldi	r22, 0x00	; 0
     4a8:	81 e0       	ldi	r24, 0x01	; 1
     4aa:	0c 94 f3 0d 	jmp	0x1be6	; 0x1be6 <Modbus_change_state>
     4ae:	08 95       	ret

000004b0 <Inverter_init>:
     4b0:	e2 eb       	ldi	r30, 0xB2	; 178
     4b2:	f4 e0       	ldi	r31, 0x04	; 4
     4b4:	81 83       	std	Z+1, r24	; 0x01
     4b6:	42 83       	std	Z+2, r20	; 0x02
     4b8:	53 83       	std	Z+3, r21	; 0x03
     4ba:	64 83       	std	Z+4, r22	; 0x04
     4bc:	75 83       	std	Z+5, r23	; 0x05
     4be:	20 83       	st	Z, r18
     4c0:	83 e5       	ldi	r24, 0x53	; 83
     4c2:	92 e0       	ldi	r25, 0x02	; 2
     4c4:	91 87       	std	Z+9, r25	; 0x09
     4c6:	80 87       	std	Z+8, r24	; 0x08
     4c8:	8e e4       	ldi	r24, 0x4E	; 78
     4ca:	92 e0       	ldi	r25, 0x02	; 2
     4cc:	97 83       	std	Z+7, r25	; 0x07
     4ce:	86 83       	std	Z+6, r24	; 0x06
     4d0:	bf 01       	movw	r22, r30
     4d2:	81 e0       	ldi	r24, 0x01	; 1
     4d4:	d5 c7       	rjmp	.+4010   	; 0x1480 <Modbus_init>
     4d6:	08 95       	ret

000004d8 <Inverter_set_Freq>:
}

void Inverter_set_Freq(g_Inveter_Config *In_cofig )
{
     4d8:	6f 92       	push	r6
     4da:	7f 92       	push	r7
     4dc:	8f 92       	push	r8
     4de:	9f 92       	push	r9
     4e0:	af 92       	push	r10
     4e2:	bf 92       	push	r11
     4e4:	cf 92       	push	r12
     4e6:	df 92       	push	r13
     4e8:	ef 92       	push	r14
     4ea:	ff 92       	push	r15
     4ec:	0f 93       	push	r16
     4ee:	1f 93       	push	r17
     4f0:	cf 93       	push	r28
     4f2:	df 93       	push	r29
     4f4:	8c 01       	movw	r16, r24
	
	
	//Modbus_Write_single_register(INVERTER,0x2001,5000);// Motor speed on address 0x2001 
	Motor_config = In_cofig; // transform our data to global struct
     4f6:	90 93 d7 0f 	sts	0x0FD7, r25	; 0x800fd7 <Motor_config+0x1>
     4fa:	80 93 d6 0f 	sts	0x0FD6, r24	; 0x800fd6 <Motor_config>
	// calculated the whole timer
	float time_user =(float)(Motor_config->time_user_S/60) + (Motor_config->time_user_M);
	 // calculated the Rpm required For motor
	float rpm_required = (float)(Motor_config->distance *  Motor_config->gear_ratio) / (float)(time_user * (Motor_config->gear_diameter) * 22 / 7) ;
     4fe:	fc 01       	movw	r30, r24
     500:	c0 81       	ld	r28, Z
     502:	d1 81       	ldd	r29, Z+1	; 0x01
     504:	82 81       	ldd	r24, Z+2	; 0x02
     506:	93 81       	ldd	r25, Z+3	; 0x03
     508:	c8 9f       	mul	r28, r24
     50a:	b0 01       	movw	r22, r0
     50c:	c9 9f       	mul	r28, r25
     50e:	70 0d       	add	r23, r0
     510:	d8 9f       	mul	r29, r24
     512:	70 0d       	add	r23, r0
     514:	11 24       	eor	r1, r1
     516:	80 e0       	ldi	r24, 0x00	; 0
     518:	90 e0       	ldi	r25, 0x00	; 0
     51a:	0e 94 fd 24 	call	0x49fa	; 0x49fa <__floatunsisf>
     51e:	6b 01       	movw	r12, r22
     520:	7c 01       	movw	r14, r24
     522:	f8 01       	movw	r30, r16
     524:	22 85       	ldd	r18, Z+10	; 0x0a
     526:	33 85       	ldd	r19, Z+11	; 0x0b
     528:	a9 e8       	ldi	r26, 0x89	; 137
     52a:	b8 e8       	ldi	r27, 0x88	; 136
     52c:	0e 94 d8 27 	call	0x4fb0	; 0x4fb0 <__umulhisi3>
     530:	96 95       	lsr	r25
     532:	87 95       	ror	r24
     534:	92 95       	swap	r25
     536:	82 95       	swap	r24
     538:	8f 70       	andi	r24, 0x0F	; 15
     53a:	89 27       	eor	r24, r25
     53c:	9f 70       	andi	r25, 0x0F	; 15
     53e:	89 27       	eor	r24, r25
     540:	bc 01       	movw	r22, r24
     542:	80 e0       	ldi	r24, 0x00	; 0
     544:	90 e0       	ldi	r25, 0x00	; 0
     546:	0e 94 fd 24 	call	0x49fa	; 0x49fa <__floatunsisf>
     54a:	4b 01       	movw	r8, r22
     54c:	5c 01       	movw	r10, r24
     54e:	f8 01       	movw	r30, r16
     550:	60 85       	ldd	r22, Z+8	; 0x08
     552:	71 85       	ldd	r23, Z+9	; 0x09
     554:	80 e0       	ldi	r24, 0x00	; 0
     556:	90 e0       	ldi	r25, 0x00	; 0
     558:	0e 94 fd 24 	call	0x49fa	; 0x49fa <__floatunsisf>
     55c:	9b 01       	movw	r18, r22
     55e:	ac 01       	movw	r20, r24
     560:	c5 01       	movw	r24, r10
     562:	b4 01       	movw	r22, r8
     564:	0e 94 01 24 	call	0x4802	; 0x4802 <__addsf3>
     568:	4b 01       	movw	r8, r22
     56a:	5c 01       	movw	r10, r24
     56c:	f8 01       	movw	r30, r16
     56e:	64 81       	ldd	r22, Z+4	; 0x04
     570:	75 81       	ldd	r23, Z+5	; 0x05
     572:	80 e0       	ldi	r24, 0x00	; 0
     574:	90 e0       	ldi	r25, 0x00	; 0
     576:	0e 94 fd 24 	call	0x49fa	; 0x49fa <__floatunsisf>
     57a:	9b 01       	movw	r18, r22
     57c:	ac 01       	movw	r20, r24
     57e:	c5 01       	movw	r24, r10
     580:	b4 01       	movw	r22, r8
     582:	0e 94 b3 25 	call	0x4b66	; 0x4b66 <__mulsf3>
     586:	20 e0       	ldi	r18, 0x00	; 0
     588:	30 e0       	ldi	r19, 0x00	; 0
     58a:	40 eb       	ldi	r20, 0xB0	; 176
     58c:	51 e4       	ldi	r21, 0x41	; 65
     58e:	0e 94 b3 25 	call	0x4b66	; 0x4b66 <__mulsf3>
     592:	20 e0       	ldi	r18, 0x00	; 0
     594:	30 e0       	ldi	r19, 0x00	; 0
     596:	40 ee       	ldi	r20, 0xE0	; 224
     598:	50 e4       	ldi	r21, 0x40	; 64
     59a:	0e 94 69 24 	call	0x48d2	; 0x48d2 <__divsf3>
     59e:	9b 01       	movw	r18, r22
     5a0:	ac 01       	movw	r20, r24
     5a2:	c7 01       	movw	r24, r14
     5a4:	b6 01       	movw	r22, r12
     5a6:	0e 94 69 24 	call	0x48d2	; 0x48d2 <__divsf3>
     5aa:	f6 2e       	mov	r15, r22
     5ac:	e7 2e       	mov	r14, r23
     5ae:	d8 2e       	mov	r13, r24
     5b0:	c9 2e       	mov	r12, r25
	  
	// made the range of the Rpm between 0 and RPM_MAX    
	uint16_t maxRPM =Motor_config->motor_rpm_max;
     5b2:	f8 01       	movw	r30, r16
     5b4:	06 81       	ldd	r16, Z+6	; 0x06
     5b6:	17 81       	ldd	r17, Z+7	; 0x07
	uint16_t minRPM = maxRPM / 2;    
	if(rpm_required > maxRPM){
     5b8:	b8 01       	movw	r22, r16
     5ba:	80 e0       	ldi	r24, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	0e 94 fd 24 	call	0x49fa	; 0x49fa <__floatunsisf>
     5c2:	b6 2e       	mov	r11, r22
     5c4:	a7 2e       	mov	r10, r23
     5c6:	98 2e       	mov	r9, r24
     5c8:	89 2e       	mov	r8, r25
     5ca:	26 2f       	mov	r18, r22
     5cc:	37 2f       	mov	r19, r23
     5ce:	48 2f       	mov	r20, r24
     5d0:	59 2f       	mov	r21, r25
     5d2:	6f 2d       	mov	r22, r15
     5d4:	7e 2d       	mov	r23, r14
     5d6:	8d 2d       	mov	r24, r13
     5d8:	9c 2d       	mov	r25, r12
     5da:	0e 94 af 25 	call	0x4b5e	; 0x4b5e <__gesf2>
     5de:	18 16       	cp	r1, r24
     5e0:	e4 f0       	brlt	.+56     	; 0x61a <Inverter_set_Freq+0x142>
		    rpm_required = maxRPM;
	   }//End IF
	else if(rpm_required < minRPM){
     5e2:	b8 01       	movw	r22, r16
     5e4:	76 95       	lsr	r23
     5e6:	67 95       	ror	r22
     5e8:	80 e0       	ldi	r24, 0x00	; 0
     5ea:	90 e0       	ldi	r25, 0x00	; 0
     5ec:	0e 94 fd 24 	call	0x49fa	; 0x49fa <__floatunsisf>
     5f0:	16 2f       	mov	r17, r22
     5f2:	07 2f       	mov	r16, r23
     5f4:	78 2e       	mov	r7, r24
     5f6:	69 2e       	mov	r6, r25
     5f8:	26 2f       	mov	r18, r22
     5fa:	37 2f       	mov	r19, r23
     5fc:	48 2f       	mov	r20, r24
     5fe:	59 2f       	mov	r21, r25
     600:	6f 2d       	mov	r22, r15
     602:	7e 2d       	mov	r23, r14
     604:	8d 2d       	mov	r24, r13
     606:	9c 2d       	mov	r25, r12
     608:	0e 94 65 24 	call	0x48ca	; 0x48ca <__cmpsf2>
     60c:	88 23       	and	r24, r24
     60e:	4c f4       	brge	.+18     	; 0x622 <Inverter_set_Freq+0x14a>
		    rpm_required = minRPM;
     610:	f1 2e       	mov	r15, r17
     612:	e0 2e       	mov	r14, r16
     614:	d7 2c       	mov	r13, r7
     616:	c6 2c       	mov	r12, r6
     618:	04 c0       	rjmp	.+8      	; 0x622 <Inverter_set_Freq+0x14a>
	  
	// made the range of the Rpm between 0 and RPM_MAX    
	uint16_t maxRPM =Motor_config->motor_rpm_max;
	uint16_t minRPM = maxRPM / 2;    
	if(rpm_required > maxRPM){
		    rpm_required = maxRPM;
     61a:	fb 2c       	mov	r15, r11
     61c:	ea 2c       	mov	r14, r10
     61e:	d9 2c       	mov	r13, r9
     620:	c8 2c       	mov	r12, r8
	   }//End IF
	else if(rpm_required < minRPM){
		    rpm_required = minRPM;
	    }// END IF
	// Put the value of RPM To Global Value
    g_rpm_Motor = (float)(rpm_required)/(Motor_config->gear_ratio);
     622:	be 01       	movw	r22, r28
     624:	80 e0       	ldi	r24, 0x00	; 0
     626:	90 e0       	ldi	r25, 0x00	; 0
     628:	0e 94 fd 24 	call	0x49fa	; 0x49fa <__floatunsisf>
     62c:	9b 01       	movw	r18, r22
     62e:	ac 01       	movw	r20, r24
     630:	6f 2d       	mov	r22, r15
     632:	7e 2d       	mov	r23, r14
     634:	8d 2d       	mov	r24, r13
     636:	9c 2d       	mov	r25, r12
     638:	0e 94 69 24 	call	0x48d2	; 0x48d2 <__divsf3>
     63c:	60 93 d8 0f 	sts	0x0FD8, r22	; 0x800fd8 <g_rpm_Motor>
     640:	70 93 d9 0f 	sts	0x0FD9, r23	; 0x800fd9 <g_rpm_Motor+0x1>
     644:	80 93 da 0f 	sts	0x0FDA, r24	; 0x800fda <g_rpm_Motor+0x2>
     648:	90 93 db 0f 	sts	0x0FDB, r25	; 0x800fdb <g_rpm_Motor+0x3>
	// calculate the settings Frequency
    uint16_t sitting_freq = rpm_required * 5000  / (Motor_config->motor_rpm_max);
     64c:	20 e0       	ldi	r18, 0x00	; 0
     64e:	30 e4       	ldi	r19, 0x40	; 64
     650:	4c e9       	ldi	r20, 0x9C	; 156
     652:	55 e4       	ldi	r21, 0x45	; 69
     654:	6f 2d       	mov	r22, r15
     656:	7e 2d       	mov	r23, r14
     658:	8d 2d       	mov	r24, r13
     65a:	9c 2d       	mov	r25, r12
     65c:	0e 94 b3 25 	call	0x4b66	; 0x4b66 <__mulsf3>
     660:	2b 2d       	mov	r18, r11
     662:	3a 2d       	mov	r19, r10
     664:	49 2d       	mov	r20, r9
     666:	58 2d       	mov	r21, r8
     668:	0e 94 69 24 	call	0x48d2	; 0x48d2 <__divsf3>
     66c:	0e 94 d1 24 	call	0x49a2	; 0x49a2 <__fixunssfsi>
     670:	ab 01       	movw	r20, r22
	    // Manual limitation for motor speed
	if(sitting_freq > 5000){
     672:	69 38       	cpi	r22, 0x89	; 137
     674:	73 41       	sbci	r23, 0x13	; 19
     676:	38 f4       	brcc	.+14     	; 0x686 <Inverter_set_Freq+0x1ae>
		    sitting_freq = 5000;
	}// End IF
	else if(sitting_freq < 2500){
     678:	44 3c       	cpi	r20, 0xC4	; 196
     67a:	89 e0       	ldi	r24, 0x09	; 9
     67c:	58 07       	cpc	r21, r24
     67e:	28 f4       	brcc	.+10     	; 0x68a <Inverter_set_Freq+0x1b2>
		    sitting_freq = 2500;
     680:	44 ec       	ldi	r20, 0xC4	; 196
     682:	59 e0       	ldi	r21, 0x09	; 9
     684:	02 c0       	rjmp	.+4      	; 0x68a <Inverter_set_Freq+0x1b2>
    g_rpm_Motor = (float)(rpm_required)/(Motor_config->gear_ratio);
	// calculate the settings Frequency
    uint16_t sitting_freq = rpm_required * 5000  / (Motor_config->motor_rpm_max);
	    // Manual limitation for motor speed
	if(sitting_freq > 5000){
		    sitting_freq = 5000;
     686:	48 e8       	ldi	r20, 0x88	; 136
     688:	53 e1       	ldi	r21, 0x13	; 19
		    sitting_freq = 2500;
	}// End IF
    //set new value 
	
	//sitting_freq-=10;
    Modbus_Write_single_register(INVERTER,INVERTER_FRE_ADD,sitting_freq);// Motor speed on address 0x2001 
     68a:	61 e0       	ldi	r22, 0x01	; 1
     68c:	70 e2       	ldi	r23, 0x20	; 32
     68e:	81 e0       	ldi	r24, 0x01	; 1
     690:	0e 94 94 0b 	call	0x1728	; 0x1728 <Modbus_Write_single_register>
		  	
}// End Function
     694:	df 91       	pop	r29
     696:	cf 91       	pop	r28
     698:	1f 91       	pop	r17
     69a:	0f 91       	pop	r16
     69c:	ff 90       	pop	r15
     69e:	ef 90       	pop	r14
     6a0:	df 90       	pop	r13
     6a2:	cf 90       	pop	r12
     6a4:	bf 90       	pop	r11
     6a6:	af 90       	pop	r10
     6a8:	9f 90       	pop	r9
     6aa:	8f 90       	pop	r8
     6ac:	7f 90       	pop	r7
     6ae:	6f 90       	pop	r6
     6b0:	08 95       	ret

000006b2 <Inverter_change_state>:
void Inverter_change_state(uint8_t stat)
{
	if(stat == 0){
     6b2:	81 11       	cpse	r24, r1
     6b4:	08 c0       	rjmp	.+16     	; 0x6c6 <Inverter_change_state+0x14>
		 Modbus_Write_single_register(INVERTER,INVERTER_StART_ADD,5);  // Motor off
     6b6:	45 e0       	ldi	r20, 0x05	; 5
     6b8:	50 e0       	ldi	r21, 0x00	; 0
     6ba:	60 e0       	ldi	r22, 0x00	; 0
     6bc:	70 e2       	ldi	r23, 0x20	; 32
     6be:	81 e0       	ldi	r24, 0x01	; 1
     6c0:	0c 94 94 0b 	jmp	0x1728	; 0x1728 <Modbus_Write_single_register>
     6c4:	08 95       	ret
	}
	else if(stat == 1){
     6c6:	81 30       	cpi	r24, 0x01	; 1
     6c8:	31 f4       	brne	.+12     	; 0x6d6 <Inverter_change_state+0x24>
		 Modbus_Write_single_register(INVERTER,INVERTER_StART_ADD,1);    // Motor On
     6ca:	41 e0       	ldi	r20, 0x01	; 1
     6cc:	50 e0       	ldi	r21, 0x00	; 0
     6ce:	60 e0       	ldi	r22, 0x00	; 0
     6d0:	70 e2       	ldi	r23, 0x20	; 32
     6d2:	0c 94 94 0b 	jmp	0x1728	; 0x1728 <Modbus_Write_single_register>
     6d6:	08 95       	ret

000006d8 <Modbus_idle_task>:
	for(uint8_t i=0;i<QTY;i++){
		Modbus_Set_transmit_buffer(LCD,i, (*(pData+i)));
	}
	return Modbus_Write_multiple_registers(LCD,address,QTY);
	
}
     6d8:	80 e0       	ldi	r24, 0x00	; 0
     6da:	90 e0       	ldi	r25, 0x00	; 0
     6dc:	0c 94 eb 1d 	jmp	0x3bd6	; 0x3bd6 <vTaskDelay>
     6e0:	08 95       	ret

000006e2 <LCD_post_transmission>:
     6e2:	60 e0       	ldi	r22, 0x00	; 0
     6e4:	80 e0       	ldi	r24, 0x00	; 0
     6e6:	0c 94 f3 0d 	jmp	0x1be6	; 0x1be6 <Modbus_change_state>
     6ea:	08 95       	ret

000006ec <LCD_pre_transmission>:
     6ec:	61 e0       	ldi	r22, 0x01	; 1
     6ee:	80 e0       	ldi	r24, 0x00	; 0
     6f0:	0c 94 f3 0d 	jmp	0x1be6	; 0x1be6 <Modbus_change_state>
     6f4:	08 95       	ret

000006f6 <Lcd_init>:
     6f6:	ee eb       	ldi	r30, 0xBE	; 190
     6f8:	f4 e0       	ldi	r31, 0x04	; 4
     6fa:	20 83       	st	Z, r18
     6fc:	81 83       	std	Z+1, r24	; 0x01
     6fe:	42 83       	std	Z+2, r20	; 0x02
     700:	53 83       	std	Z+3, r21	; 0x03
     702:	64 83       	std	Z+4, r22	; 0x04
     704:	75 83       	std	Z+5, r23	; 0x05
     706:	86 e7       	ldi	r24, 0x76	; 118
     708:	93 e0       	ldi	r25, 0x03	; 3
     70a:	97 83       	std	Z+7, r25	; 0x07
     70c:	86 83       	std	Z+6, r24	; 0x06
     70e:	81 e7       	ldi	r24, 0x71	; 113
     710:	93 e0       	ldi	r25, 0x03	; 3
     712:	91 87       	std	Z+9, r25	; 0x09
     714:	80 87       	std	Z+8, r24	; 0x08
     716:	8c e6       	ldi	r24, 0x6C	; 108
     718:	93 e0       	ldi	r25, 0x03	; 3
     71a:	93 87       	std	Z+11, r25	; 0x0b
     71c:	82 87       	std	Z+10, r24	; 0x0a
     71e:	bf 01       	movw	r22, r30
     720:	80 e0       	ldi	r24, 0x00	; 0
     722:	ae c6       	rjmp	.+3420   	; 0x1480 <Modbus_init>
     724:	08 95       	ret

00000726 <Lcd_Read>:
     726:	cf 93       	push	r28
     728:	df 93       	push	r29
     72a:	eb 01       	movw	r28, r22
     72c:	41 e0       	ldi	r20, 0x01	; 1
     72e:	50 e0       	ldi	r21, 0x00	; 0
     730:	bc 01       	movw	r22, r24
     732:	80 e0       	ldi	r24, 0x00	; 0
     734:	dd d7       	rcall	.+4026   	; 0x16f0 <Modbus_Read_holding_registers>
     736:	81 11       	cpse	r24, r1
     738:	04 c0       	rjmp	.+8      	; 0x742 <Lcd_Read+0x1c>
     73a:	60 e0       	ldi	r22, 0x00	; 0
     73c:	95 d7       	rcall	.+3882   	; 0x1668 <Modbus_Get_response_buffer>
     73e:	99 83       	std	Y+1, r25	; 0x01
     740:	88 83       	st	Y, r24
     742:	89 e0       	ldi	r24, 0x09	; 9
     744:	90 e0       	ldi	r25, 0x00	; 0
     746:	df 91       	pop	r29
     748:	cf 91       	pop	r28
     74a:	08 95       	ret

0000074c <lcd_Jump_to>:
************************************************************************************************************/

// jump to spacific image
uint8_t lcd_Jump_to(uint16_t pic_id){ // v
	
		Modbus_Set_transmit_buffer(LCD,0,pic_id);
     74c:	ac 01       	movw	r20, r24
     74e:	60 e0       	ldi	r22, 0x00	; 0
     750:	80 e0       	ldi	r24, 0x00	; 0
     752:	ad d7       	rcall	.+3930   	; 0x16ae <Modbus_Set_transmit_buffer>
		return Modbus_Our_write_multiple_coils(LCD,LCD_CURRENT_PIC_REG, 1);
     754:	41 e0       	ldi	r20, 0x01	; 1
     756:	50 e0       	ldi	r21, 0x00	; 0
     758:	63 e0       	ldi	r22, 0x03	; 3
     75a:	70 e0       	ldi	r23, 0x00	; 0
     75c:	80 e0       	ldi	r24, 0x00	; 0
     75e:	0c 94 b9 0b 	jmp	0x1772	; 0x1772 <Modbus_Our_write_multiple_coils>
		
}
     762:	08 95       	ret

00000764 <Modbus_mster_transaction>:
		g_mod1_write_address = u16WriteAddress;
		g_mod1_write_qty = u16BitQty;
		return Modbus_mster_transaction(device, WRITE_MULTIPLE_COILS);
	}
	return INVALID_DEVICE; //error
}
     764:	8f 92       	push	r8
     766:	9f 92       	push	r9
     768:	af 92       	push	r10
     76a:	bf 92       	push	r11
     76c:	df 92       	push	r13
     76e:	ef 92       	push	r14
     770:	ff 92       	push	r15
     772:	0f 93       	push	r16
     774:	1f 93       	push	r17
     776:	cf 93       	push	r28
     778:	df 93       	push	r29
     77a:	cd b7       	in	r28, 0x3d	; 61
     77c:	de b7       	in	r29, 0x3e	; 62
     77e:	da 95       	dec	r29
     780:	0f b6       	in	r0, 0x3f	; 63
     782:	f8 94       	cli
     784:	de bf       	out	0x3e, r29	; 62
     786:	0f be       	out	0x3f, r0	; 63
     788:	cd bf       	out	0x3d, r28	; 61
     78a:	d6 2e       	mov	r13, r22
     78c:	81 11       	cpse	r24, r1
     78e:	f5 c2       	rjmp	.+1514   	; 0xd7a <Modbus_mster_transaction+0x616>
     790:	80 91 00 07 	lds	r24, 0x0700	; 0x800700 <g_mod0_slave>
     794:	89 83       	std	Y+1, r24	; 0x01
     796:	2f ef       	ldi	r18, 0xFF	; 255
     798:	62 13       	cpse	r22, r18
     79a:	06 c0       	rjmp	.+12     	; 0x7a8 <Modbus_mster_transaction+0x44>
     79c:	8f e0       	ldi	r24, 0x0F	; 15
     79e:	8a 83       	std	Y+2, r24	; 0x02
     7a0:	68 94       	set
     7a2:	bb 24       	eor	r11, r11
     7a4:	b1 f8       	bld	r11, 1
     7a6:	32 c0       	rjmp	.+100    	; 0x80c <Modbus_mster_transaction+0xa8>
     7a8:	6a 83       	std	Y+2, r22	; 0x02
     7aa:	81 e0       	ldi	r24, 0x01	; 1
     7ac:	68 17       	cp	r22, r24
     7ae:	b8 f0       	brcs	.+46     	; 0x7de <Modbus_mster_transaction+0x7a>
     7b0:	94 e0       	ldi	r25, 0x04	; 4
     7b2:	96 17       	cp	r25, r22
     7b4:	18 f4       	brcc	.+6      	; 0x7bc <Modbus_mster_transaction+0x58>
     7b6:	a7 e1       	ldi	r26, 0x17	; 23
     7b8:	6a 13       	cpse	r22, r26
     7ba:	11 c0       	rjmp	.+34     	; 0x7de <Modbus_mster_transaction+0x7a>
     7bc:	80 91 fe 06 	lds	r24, 0x06FE	; 0x8006fe <g_mod0_read_address>
     7c0:	90 91 ff 06 	lds	r25, 0x06FF	; 0x8006ff <g_mod0_read_address+0x1>
     7c4:	9b 83       	std	Y+3, r25	; 0x03
     7c6:	8c 83       	std	Y+4, r24	; 0x04
     7c8:	80 91 fc 06 	lds	r24, 0x06FC	; 0x8006fc <g_mod0_read_qty>
     7cc:	90 91 fd 06 	lds	r25, 0x06FD	; 0x8006fd <g_mod0_read_qty+0x1>
     7d0:	9d 83       	std	Y+5, r25	; 0x05
     7d2:	8e 83       	std	Y+6, r24	; 0x06
     7d4:	0f 2e       	mov	r0, r31
     7d6:	f6 e0       	ldi	r31, 0x06	; 6
     7d8:	bf 2e       	mov	r11, r31
     7da:	f0 2d       	mov	r31, r0
     7dc:	03 c0       	rjmp	.+6      	; 0x7e4 <Modbus_mster_transaction+0x80>
     7de:	68 94       	set
     7e0:	bb 24       	eor	r11, r11
     7e2:	b1 f8       	bld	r11, 1
     7e4:	b0 e1       	ldi	r27, 0x10	; 16
     7e6:	bd 15       	cp	r27, r13
     7e8:	40 f0       	brcs	.+16     	; 0x7fa <Modbus_mster_transaction+0x96>
     7ea:	ef e0       	ldi	r30, 0x0F	; 15
     7ec:	de 16       	cp	r13, r30
     7ee:	70 f4       	brcc	.+28     	; 0x80c <Modbus_mster_transaction+0xa8>
     7f0:	8b ef       	ldi	r24, 0xFB	; 251
     7f2:	8d 0d       	add	r24, r13
     7f4:	82 30       	cpi	r24, 0x02	; 2
     7f6:	00 f5       	brcc	.+64     	; 0x838 <Modbus_mster_transaction+0xd4>
     7f8:	09 c0       	rjmp	.+18     	; 0x80c <Modbus_mster_transaction+0xa8>
     7fa:	f6 e1       	ldi	r31, 0x16	; 22
     7fc:	df 16       	cp	r13, r31
     7fe:	e0 f0       	brcs	.+56     	; 0x838 <Modbus_mster_transaction+0xd4>
     800:	27 e1       	ldi	r18, 0x17	; 23
     802:	2d 15       	cp	r18, r13
     804:	18 f4       	brcc	.+6      	; 0x80c <Modbus_mster_transaction+0xa8>
     806:	8f ef       	ldi	r24, 0xFF	; 255
     808:	d8 12       	cpse	r13, r24
     80a:	16 c0       	rjmp	.+44     	; 0x838 <Modbus_mster_transaction+0xd4>
     80c:	90 91 7a 06 	lds	r25, 0x067A	; 0x80067a <g_mod0_write_address>
     810:	80 91 7b 06 	lds	r24, 0x067B	; 0x80067b <g_mod0_write_address+0x1>
     814:	e1 e0       	ldi	r30, 0x01	; 1
     816:	f0 e0       	ldi	r31, 0x00	; 0
     818:	ec 0f       	add	r30, r28
     81a:	fd 1f       	adc	r31, r29
     81c:	eb 0d       	add	r30, r11
     81e:	f1 1d       	adc	r31, r1
     820:	80 83       	st	Z, r24
     822:	81 e0       	ldi	r24, 0x01	; 1
     824:	8b 0d       	add	r24, r11
     826:	e1 e0       	ldi	r30, 0x01	; 1
     828:	f0 e0       	ldi	r31, 0x00	; 0
     82a:	ec 0f       	add	r30, r28
     82c:	fd 1f       	adc	r31, r29
     82e:	e8 0f       	add	r30, r24
     830:	f1 1d       	adc	r31, r1
     832:	b3 94       	inc	r11
     834:	b3 94       	inc	r11
     836:	90 83       	st	Z, r25
     838:	90 e1       	ldi	r25, 0x10	; 16
     83a:	d9 16       	cp	r13, r25
     83c:	09 f4       	brne	.+2      	; 0x840 <Modbus_mster_transaction+0xdc>
     83e:	ad c0       	rjmp	.+346    	; 0x99a <Modbus_mster_transaction+0x236>
     840:	9d 15       	cp	r25, r13
     842:	58 f0       	brcs	.+22     	; 0x85a <Modbus_mster_transaction+0xf6>
     844:	a6 e0       	ldi	r26, 0x06	; 6
     846:	da 16       	cp	r13, r26
     848:	61 f1       	breq	.+88     	; 0x8a2 <Modbus_mster_transaction+0x13e>
     84a:	bf e0       	ldi	r27, 0x0F	; 15
     84c:	db 16       	cp	r13, r27
     84e:	09 f4       	brne	.+2      	; 0x852 <Modbus_mster_transaction+0xee>
     850:	41 c0       	rjmp	.+130    	; 0x8d4 <Modbus_mster_transaction+0x170>
     852:	e5 e0       	ldi	r30, 0x05	; 5
     854:	de 12       	cpse	r13, r30
     856:	1a c1       	rjmp	.+564    	; 0xa8c <Modbus_mster_transaction+0x328>
     858:	0d c0       	rjmp	.+26     	; 0x874 <Modbus_mster_transaction+0x110>
     85a:	f7 e1       	ldi	r31, 0x17	; 23
     85c:	df 16       	cp	r13, r31
     85e:	09 f4       	brne	.+2      	; 0x862 <Modbus_mster_transaction+0xfe>
     860:	9c c0       	rjmp	.+312    	; 0x99a <Modbus_mster_transaction+0x236>
     862:	2f ef       	ldi	r18, 0xFF	; 255
     864:	d2 16       	cp	r13, r18
     866:	09 f4       	brne	.+2      	; 0x86a <Modbus_mster_transaction+0x106>
     868:	98 c0       	rjmp	.+304    	; 0x99a <Modbus_mster_transaction+0x236>
     86a:	86 e1       	ldi	r24, 0x16	; 22
     86c:	d8 16       	cp	r13, r24
     86e:	09 f4       	brne	.+2      	; 0x872 <Modbus_mster_transaction+0x10e>
     870:	df c0       	rjmp	.+446    	; 0xa30 <Modbus_mster_transaction+0x2cc>
     872:	0c c1       	rjmp	.+536    	; 0xa8c <Modbus_mster_transaction+0x328>
     874:	90 91 78 06 	lds	r25, 0x0678	; 0x800678 <g_mod0_write_qty>
     878:	80 91 79 06 	lds	r24, 0x0679	; 0x800679 <g_mod0_write_qty+0x1>
     87c:	e1 e0       	ldi	r30, 0x01	; 1
     87e:	f0 e0       	ldi	r31, 0x00	; 0
     880:	ec 0f       	add	r30, r28
     882:	fd 1f       	adc	r31, r29
     884:	eb 0d       	add	r30, r11
     886:	f1 1d       	adc	r31, r1
     888:	80 83       	st	Z, r24
     88a:	81 e0       	ldi	r24, 0x01	; 1
     88c:	8b 0d       	add	r24, r11
     88e:	e1 e0       	ldi	r30, 0x01	; 1
     890:	f0 e0       	ldi	r31, 0x00	; 0
     892:	ec 0f       	add	r30, r28
     894:	fd 1f       	adc	r31, r29
     896:	e8 0f       	add	r30, r24
     898:	f1 1d       	adc	r31, r1
     89a:	b3 94       	inc	r11
     89c:	b3 94       	inc	r11
     89e:	90 83       	st	Z, r25
     8a0:	f5 c0       	rjmp	.+490    	; 0xa8c <Modbus_mster_transaction+0x328>
     8a2:	e8 ef       	ldi	r30, 0xF8	; 248
     8a4:	f5 e0       	ldi	r31, 0x05	; 5
     8a6:	80 81       	ld	r24, Z
     8a8:	91 81       	ldd	r25, Z+1	; 0x01
     8aa:	a1 e0       	ldi	r26, 0x01	; 1
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	ac 0f       	add	r26, r28
     8b0:	bd 1f       	adc	r27, r29
     8b2:	ab 0d       	add	r26, r11
     8b4:	b1 1d       	adc	r27, r1
     8b6:	9c 93       	st	X, r25
     8b8:	20 81       	ld	r18, Z
     8ba:	31 81       	ldd	r19, Z+1	; 0x01
     8bc:	81 e0       	ldi	r24, 0x01	; 1
     8be:	8b 0d       	add	r24, r11
     8c0:	e1 e0       	ldi	r30, 0x01	; 1
     8c2:	f0 e0       	ldi	r31, 0x00	; 0
     8c4:	ec 0f       	add	r30, r28
     8c6:	fd 1f       	adc	r31, r29
     8c8:	e8 0f       	add	r30, r24
     8ca:	f1 1d       	adc	r31, r1
     8cc:	b3 94       	inc	r11
     8ce:	b3 94       	inc	r11
     8d0:	20 83       	st	Z, r18
     8d2:	dc c0       	rjmp	.+440    	; 0xa8c <Modbus_mster_transaction+0x328>
     8d4:	80 91 78 06 	lds	r24, 0x0678	; 0x800678 <g_mod0_write_qty>
     8d8:	90 91 79 06 	lds	r25, 0x0679	; 0x800679 <g_mod0_write_qty+0x1>
     8dc:	e1 e0       	ldi	r30, 0x01	; 1
     8de:	f0 e0       	ldi	r31, 0x00	; 0
     8e0:	ec 0f       	add	r30, r28
     8e2:	fd 1f       	adc	r31, r29
     8e4:	eb 0d       	add	r30, r11
     8e6:	f1 1d       	adc	r31, r1
     8e8:	90 83       	st	Z, r25
     8ea:	32 e0       	ldi	r19, 0x02	; 2
     8ec:	3b 0d       	add	r19, r11
     8ee:	21 e0       	ldi	r18, 0x01	; 1
     8f0:	2b 0d       	add	r18, r11
     8f2:	e1 e0       	ldi	r30, 0x01	; 1
     8f4:	f0 e0       	ldi	r31, 0x00	; 0
     8f6:	ec 0f       	add	r30, r28
     8f8:	fd 1f       	adc	r31, r29
     8fa:	e2 0f       	add	r30, r18
     8fc:	f1 1d       	adc	r31, r1
     8fe:	80 83       	st	Z, r24
     900:	ac 01       	movw	r20, r24
     902:	47 70       	andi	r20, 0x07	; 7
     904:	55 27       	eor	r21, r21
     906:	45 2b       	or	r20, r21
     908:	49 f0       	breq	.+18     	; 0x91c <Modbus_mster_transaction+0x1b8>
     90a:	96 95       	lsr	r25
     90c:	87 95       	ror	r24
     90e:	96 95       	lsr	r25
     910:	87 95       	ror	r24
     912:	96 95       	lsr	r25
     914:	87 95       	ror	r24
     916:	21 e0       	ldi	r18, 0x01	; 1
     918:	28 0f       	add	r18, r24
     91a:	07 c0       	rjmp	.+14     	; 0x92a <Modbus_mster_transaction+0x1c6>
     91c:	96 95       	lsr	r25
     91e:	87 95       	ror	r24
     920:	96 95       	lsr	r25
     922:	87 95       	ror	r24
     924:	96 95       	lsr	r25
     926:	87 95       	ror	r24
     928:	28 2f       	mov	r18, r24
     92a:	93 e0       	ldi	r25, 0x03	; 3
     92c:	b9 0e       	add	r11, r25
     92e:	fe 01       	movw	r30, r28
     930:	e3 0f       	add	r30, r19
     932:	f1 1d       	adc	r31, r1
     934:	21 83       	std	Z+1, r18	; 0x01
     936:	22 23       	and	r18, r18
     938:	09 f4       	brne	.+2      	; 0x93c <Modbus_mster_transaction+0x1d8>
     93a:	a8 c0       	rjmp	.+336    	; 0xa8c <Modbus_mster_transaction+0x328>
     93c:	80 e0       	ldi	r24, 0x00	; 0
     93e:	98 2f       	mov	r25, r24
     940:	91 70       	andi	r25, 0x01	; 1
     942:	80 ff       	sbrs	r24, 0
     944:	03 c0       	rjmp	.+6      	; 0x94c <Modbus_mster_transaction+0x1e8>
     946:	91 30       	cpi	r25, 0x01	; 1
     948:	99 f0       	breq	.+38     	; 0x970 <Modbus_mster_transaction+0x20c>
     94a:	23 c0       	rjmp	.+70     	; 0x992 <Modbus_mster_transaction+0x22e>
     94c:	e8 2f       	mov	r30, r24
     94e:	e6 95       	lsr	r30
     950:	f0 e0       	ldi	r31, 0x00	; 0
     952:	ee 0f       	add	r30, r30
     954:	ff 1f       	adc	r31, r31
     956:	e8 50       	subi	r30, 0x08	; 8
     958:	fa 4f       	sbci	r31, 0xFA	; 250
     95a:	40 81       	ld	r20, Z
     95c:	51 81       	ldd	r21, Z+1	; 0x01
     95e:	e1 e0       	ldi	r30, 0x01	; 1
     960:	f0 e0       	ldi	r31, 0x00	; 0
     962:	ec 0f       	add	r30, r28
     964:	fd 1f       	adc	r31, r29
     966:	eb 0d       	add	r30, r11
     968:	f1 1d       	adc	r31, r1
     96a:	40 83       	st	Z, r20
     96c:	b3 94       	inc	r11
     96e:	11 c0       	rjmp	.+34     	; 0x992 <Modbus_mster_transaction+0x22e>
     970:	e8 2f       	mov	r30, r24
     972:	e6 95       	lsr	r30
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	ee 0f       	add	r30, r30
     978:	ff 1f       	adc	r31, r31
     97a:	e8 50       	subi	r30, 0x08	; 8
     97c:	fa 4f       	sbci	r31, 0xFA	; 250
     97e:	40 81       	ld	r20, Z
     980:	51 81       	ldd	r21, Z+1	; 0x01
     982:	e1 e0       	ldi	r30, 0x01	; 1
     984:	f0 e0       	ldi	r31, 0x00	; 0
     986:	ec 0f       	add	r30, r28
     988:	fd 1f       	adc	r31, r29
     98a:	eb 0d       	add	r30, r11
     98c:	f1 1d       	adc	r31, r1
     98e:	50 83       	st	Z, r21
     990:	b3 94       	inc	r11
     992:	8f 5f       	subi	r24, 0xFF	; 255
     994:	28 13       	cpse	r18, r24
     996:	d3 cf       	rjmp	.-90     	; 0x93e <Modbus_mster_transaction+0x1da>
     998:	79 c0       	rjmp	.+242    	; 0xa8c <Modbus_mster_transaction+0x328>
     99a:	60 91 78 06 	lds	r22, 0x0678	; 0x800678 <g_mod0_write_qty>
     99e:	70 91 79 06 	lds	r23, 0x0679	; 0x800679 <g_mod0_write_qty+0x1>
     9a2:	e1 e0       	ldi	r30, 0x01	; 1
     9a4:	f0 e0       	ldi	r31, 0x00	; 0
     9a6:	ec 0f       	add	r30, r28
     9a8:	fd 1f       	adc	r31, r29
     9aa:	eb 0d       	add	r30, r11
     9ac:	f1 1d       	adc	r31, r1
     9ae:	70 83       	st	Z, r23
     9b0:	81 e0       	ldi	r24, 0x01	; 1
     9b2:	8b 0d       	add	r24, r11
     9b4:	e1 e0       	ldi	r30, 0x01	; 1
     9b6:	f0 e0       	ldi	r31, 0x00	; 0
     9b8:	ec 0f       	add	r30, r28
     9ba:	fd 1f       	adc	r31, r29
     9bc:	e8 0f       	add	r30, r24
     9be:	f1 1d       	adc	r31, r1
     9c0:	60 83       	st	Z, r22
     9c2:	82 e0       	ldi	r24, 0x02	; 2
     9c4:	8b 0d       	add	r24, r11
     9c6:	e1 e0       	ldi	r30, 0x01	; 1
     9c8:	f0 e0       	ldi	r31, 0x00	; 0
     9ca:	ec 0f       	add	r30, r28
     9cc:	fd 1f       	adc	r31, r29
     9ce:	e8 0f       	add	r30, r24
     9d0:	f1 1d       	adc	r31, r1
     9d2:	a3 e0       	ldi	r26, 0x03	; 3
     9d4:	ba 0e       	add	r11, r26
     9d6:	86 2f       	mov	r24, r22
     9d8:	88 0f       	add	r24, r24
     9da:	80 83       	st	Z, r24
     9dc:	77 27       	eor	r23, r23
     9de:	16 16       	cp	r1, r22
     9e0:	17 06       	cpc	r1, r23
     9e2:	0c f0       	brlt	.+2      	; 0x9e6 <Modbus_mster_transaction+0x282>
     9e4:	53 c0       	rjmp	.+166    	; 0xa8c <Modbus_mster_transaction+0x328>
     9e6:	80 e0       	ldi	r24, 0x00	; 0
     9e8:	90 e0       	ldi	r25, 0x00	; 0
     9ea:	20 e0       	ldi	r18, 0x00	; 0
     9ec:	88 0f       	add	r24, r24
     9ee:	99 1f       	adc	r25, r25
     9f0:	fc 01       	movw	r30, r24
     9f2:	e8 50       	subi	r30, 0x08	; 8
     9f4:	fa 4f       	sbci	r31, 0xFA	; 250
     9f6:	80 81       	ld	r24, Z
     9f8:	91 81       	ldd	r25, Z+1	; 0x01
     9fa:	a1 e0       	ldi	r26, 0x01	; 1
     9fc:	b0 e0       	ldi	r27, 0x00	; 0
     9fe:	ac 0f       	add	r26, r28
     a00:	bd 1f       	adc	r27, r29
     a02:	ab 0d       	add	r26, r11
     a04:	b1 1d       	adc	r27, r1
     a06:	9c 93       	st	X, r25
     a08:	40 81       	ld	r20, Z
     a0a:	51 81       	ldd	r21, Z+1	; 0x01
     a0c:	81 e0       	ldi	r24, 0x01	; 1
     a0e:	8b 0d       	add	r24, r11
     a10:	e1 e0       	ldi	r30, 0x01	; 1
     a12:	f0 e0       	ldi	r31, 0x00	; 0
     a14:	ec 0f       	add	r30, r28
     a16:	fd 1f       	adc	r31, r29
     a18:	e8 0f       	add	r30, r24
     a1a:	f1 1d       	adc	r31, r1
     a1c:	b3 94       	inc	r11
     a1e:	b3 94       	inc	r11
     a20:	40 83       	st	Z, r20
     a22:	2f 5f       	subi	r18, 0xFF	; 255
     a24:	82 2f       	mov	r24, r18
     a26:	90 e0       	ldi	r25, 0x00	; 0
     a28:	86 17       	cp	r24, r22
     a2a:	97 07       	cpc	r25, r23
     a2c:	fc f2       	brlt	.-66     	; 0x9ec <Modbus_mster_transaction+0x288>
     a2e:	2e c0       	rjmp	.+92     	; 0xa8c <Modbus_mster_transaction+0x328>
     a30:	e8 ef       	ldi	r30, 0xF8	; 248
     a32:	f5 e0       	ldi	r31, 0x05	; 5
     a34:	80 81       	ld	r24, Z
     a36:	91 81       	ldd	r25, Z+1	; 0x01
     a38:	a1 e0       	ldi	r26, 0x01	; 1
     a3a:	b0 e0       	ldi	r27, 0x00	; 0
     a3c:	ac 0f       	add	r26, r28
     a3e:	bd 1f       	adc	r27, r29
     a40:	ab 0d       	add	r26, r11
     a42:	b1 1d       	adc	r27, r1
     a44:	9c 93       	st	X, r25
     a46:	80 81       	ld	r24, Z
     a48:	91 81       	ldd	r25, Z+1	; 0x01
     a4a:	91 e0       	ldi	r25, 0x01	; 1
     a4c:	9b 0d       	add	r25, r11
     a4e:	a1 e0       	ldi	r26, 0x01	; 1
     a50:	b0 e0       	ldi	r27, 0x00	; 0
     a52:	ac 0f       	add	r26, r28
     a54:	bd 1f       	adc	r27, r29
     a56:	a9 0f       	add	r26, r25
     a58:	b1 1d       	adc	r27, r1
     a5a:	8c 93       	st	X, r24
     a5c:	82 81       	ldd	r24, Z+2	; 0x02
     a5e:	93 81       	ldd	r25, Z+3	; 0x03
     a60:	82 e0       	ldi	r24, 0x02	; 2
     a62:	8b 0d       	add	r24, r11
     a64:	a1 e0       	ldi	r26, 0x01	; 1
     a66:	b0 e0       	ldi	r27, 0x00	; 0
     a68:	ac 0f       	add	r26, r28
     a6a:	bd 1f       	adc	r27, r29
     a6c:	a8 0f       	add	r26, r24
     a6e:	b1 1d       	adc	r27, r1
     a70:	9c 93       	st	X, r25
     a72:	22 81       	ldd	r18, Z+2	; 0x02
     a74:	33 81       	ldd	r19, Z+3	; 0x03
     a76:	83 e0       	ldi	r24, 0x03	; 3
     a78:	8b 0d       	add	r24, r11
     a7a:	e1 e0       	ldi	r30, 0x01	; 1
     a7c:	f0 e0       	ldi	r31, 0x00	; 0
     a7e:	ec 0f       	add	r30, r28
     a80:	fd 1f       	adc	r31, r29
     a82:	e8 0f       	add	r30, r24
     a84:	f1 1d       	adc	r31, r1
     a86:	b4 e0       	ldi	r27, 0x04	; 4
     a88:	bb 0e       	add	r11, r27
     a8a:	20 83       	st	Z, r18
     a8c:	bb 20       	and	r11, r11
     a8e:	b9 f0       	breq	.+46     	; 0xabe <Modbus_mster_transaction+0x35a>
     a90:	8e 01       	movw	r16, r28
     a92:	0f 5f       	subi	r16, 0xFF	; 255
     a94:	1f 4f       	sbci	r17, 0xFF	; 255
     a96:	ee 24       	eor	r14, r14
     a98:	ea 94       	dec	r14
     a9a:	eb 0c       	add	r14, r11
     a9c:	f1 2c       	mov	r15, r1
     a9e:	ef ef       	ldi	r30, 0xFF	; 255
     aa0:	ee 1a       	sub	r14, r30
     aa2:	fe 0a       	sbc	r15, r30
     aa4:	e0 0e       	add	r14, r16
     aa6:	f1 1e       	adc	r15, r17
     aa8:	8f ef       	ldi	r24, 0xFF	; 255
     aaa:	9f ef       	ldi	r25, 0xFF	; 255
     aac:	d8 01       	movw	r26, r16
     aae:	6d 91       	ld	r22, X+
     ab0:	8d 01       	movw	r16, r26
     ab2:	0e 94 af 23 	call	0x475e	; 0x475e <crc16_update>
     ab6:	0e 15       	cp	r16, r14
     ab8:	1f 05       	cpc	r17, r15
     aba:	c1 f7       	brne	.-16     	; 0xaac <Modbus_mster_transaction+0x348>
     abc:	02 c0       	rjmp	.+4      	; 0xac2 <Modbus_mster_transaction+0x35e>
     abe:	8f ef       	ldi	r24, 0xFF	; 255
     ac0:	9f ef       	ldi	r25, 0xFF	; 255
     ac2:	ee 24       	eor	r14, r14
     ac4:	e3 94       	inc	r14
     ac6:	eb 0c       	add	r14, r11
     ac8:	e1 e0       	ldi	r30, 0x01	; 1
     aca:	f0 e0       	ldi	r31, 0x00	; 0
     acc:	ec 0f       	add	r30, r28
     ace:	fd 1f       	adc	r31, r29
     ad0:	eb 0d       	add	r30, r11
     ad2:	f1 1d       	adc	r31, r1
     ad4:	80 83       	st	Z, r24
     ad6:	b3 94       	inc	r11
     ad8:	b3 94       	inc	r11
     ada:	e1 e0       	ldi	r30, 0x01	; 1
     adc:	f0 e0       	ldi	r31, 0x00	; 0
     ade:	ec 0f       	add	r30, r28
     ae0:	fd 1f       	adc	r31, r29
     ae2:	ee 0d       	add	r30, r14
     ae4:	f1 1d       	adc	r31, r1
     ae6:	90 83       	st	Z, r25
     ae8:	e1 e0       	ldi	r30, 0x01	; 1
     aea:	f0 e0       	ldi	r31, 0x00	; 0
     aec:	ec 0f       	add	r30, r28
     aee:	fd 1f       	adc	r31, r29
     af0:	eb 0d       	add	r30, r11
     af2:	f1 1d       	adc	r31, r1
     af4:	10 82       	st	Z, r1
     af6:	e0 91 eb 05 	lds	r30, 0x05EB	; 0x8005eb <g_mod0_Serial_getc>
     afa:	f0 91 ec 05 	lds	r31, 0x05EC	; 0x8005ec <g_mod0_Serial_getc+0x1>
     afe:	19 95       	eicall
     b00:	81 15       	cp	r24, r1
     b02:	91 40       	sbci	r25, 0x01	; 1
     b04:	c1 f7       	brne	.-16     	; 0xaf6 <Modbus_mster_transaction+0x392>
     b06:	e0 91 f1 05 	lds	r30, 0x05F1	; 0x8005f1 <g_mod0_pre_transmission>
     b0a:	f0 91 f2 05 	lds	r31, 0x05F2	; 0x8005f2 <g_mod0_pre_transmission+0x1>
     b0e:	30 97       	sbiw	r30, 0x00	; 0
     b10:	09 f0       	breq	.+2      	; 0xb14 <Modbus_mster_transaction+0x3b0>
     b12:	19 95       	eicall
     b14:	bb 20       	and	r11, r11
     b16:	a1 f0       	breq	.+40     	; 0xb40 <Modbus_mster_transaction+0x3dc>
     b18:	8e 01       	movw	r16, r28
     b1a:	0f 5f       	subi	r16, 0xFF	; 255
     b1c:	1f 4f       	sbci	r17, 0xFF	; 255
     b1e:	f1 2c       	mov	r15, r1
     b20:	ef ef       	ldi	r30, 0xFF	; 255
     b22:	ee 1a       	sub	r14, r30
     b24:	fe 0a       	sbc	r15, r30
     b26:	e0 0e       	add	r14, r16
     b28:	f1 1e       	adc	r15, r17
     b2a:	e0 91 ed 05 	lds	r30, 0x05ED	; 0x8005ed <g_mod0_Serial_putc>
     b2e:	f0 91 ee 05 	lds	r31, 0x05EE	; 0x8005ee <g_mod0_Serial_putc+0x1>
     b32:	d8 01       	movw	r26, r16
     b34:	8d 91       	ld	r24, X+
     b36:	8d 01       	movw	r16, r26
     b38:	19 95       	eicall
     b3a:	0e 15       	cp	r16, r14
     b3c:	1f 05       	cpc	r17, r15
     b3e:	a9 f7       	brne	.-22     	; 0xb2a <Modbus_mster_transaction+0x3c6>
     b40:	e0 91 e9 05 	lds	r30, 0x05E9	; 0x8005e9 <g_mod0_Serial_flush>
     b44:	f0 91 ea 05 	lds	r31, 0x05EA	; 0x8005ea <g_mod0_Serial_flush+0x1>
     b48:	19 95       	eicall
     b4a:	ef e8       	ldi	r30, 0x8F	; 143
     b4c:	f1 e0       	ldi	r31, 0x01	; 1
     b4e:	31 97       	sbiw	r30, 0x01	; 1
     b50:	f1 f7       	brne	.-4      	; 0xb4e <Modbus_mster_transaction+0x3ea>
     b52:	00 c0       	rjmp	.+0      	; 0xb54 <Modbus_mster_transaction+0x3f0>
     b54:	00 00       	nop
     b56:	e0 91 ef 05 	lds	r30, 0x05EF	; 0x8005ef <g_mod0_post_transmission>
     b5a:	f0 91 f0 05 	lds	r31, 0x05F0	; 0x8005f0 <g_mod0_post_transmission+0x1>
     b5e:	30 97       	sbiw	r30, 0x00	; 0
     b60:	09 f0       	breq	.+2      	; 0xb64 <Modbus_mster_transaction+0x400>
     b62:	19 95       	eicall
     b64:	0e 94 d0 23 	call	0x47a0	; 0x47a0 <Get_millis>
     b68:	4b 01       	movw	r8, r22
     b6a:	5c 01       	movw	r10, r24
     b6c:	08 e0       	ldi	r16, 0x08	; 8
     b6e:	10 e0       	ldi	r17, 0x00	; 0
     b70:	ed 2c       	mov	r14, r13
     b72:	f1 2c       	mov	r15, r1
     b74:	e0 91 e7 05 	lds	r30, 0x05E7	; 0x8005e7 <g_mod0_Serial_available>
     b78:	f0 91 e8 05 	lds	r31, 0x05E8	; 0x8005e8 <g_mod0_Serial_available+0x1>
     b7c:	19 95       	eicall
     b7e:	89 2b       	or	r24, r25
     b80:	91 f0       	breq	.+36     	; 0xba6 <Modbus_mster_transaction+0x442>
     b82:	dd 24       	eor	r13, r13
     b84:	d3 94       	inc	r13
     b86:	d1 0e       	add	r13, r17
     b88:	e0 91 eb 05 	lds	r30, 0x05EB	; 0x8005eb <g_mod0_Serial_getc>
     b8c:	f0 91 ec 05 	lds	r31, 0x05EC	; 0x8005ec <g_mod0_Serial_getc+0x1>
     b90:	19 95       	eicall
     b92:	e1 e0       	ldi	r30, 0x01	; 1
     b94:	f0 e0       	ldi	r31, 0x00	; 0
     b96:	ec 0f       	add	r30, r28
     b98:	fd 1f       	adc	r31, r29
     b9a:	e1 0f       	add	r30, r17
     b9c:	f1 1d       	adc	r31, r1
     b9e:	80 83       	st	Z, r24
     ba0:	01 50       	subi	r16, 0x01	; 1
     ba2:	1d 2d       	mov	r17, r13
     ba4:	07 c0       	rjmp	.+14     	; 0xbb4 <Modbus_mster_transaction+0x450>
     ba6:	e0 91 f3 05 	lds	r30, 0x05F3	; 0x8005f3 <g_mod0_idle>
     baa:	f0 91 f4 05 	lds	r31, 0x05F4	; 0x8005f4 <g_mod0_idle+0x1>
     bae:	30 97       	sbiw	r30, 0x00	; 0
     bb0:	09 f0       	breq	.+2      	; 0xbb4 <Modbus_mster_transaction+0x450>
     bb2:	19 95       	eicall
     bb4:	15 30       	cpi	r17, 0x05	; 5
     bb6:	51 f5       	brne	.+84     	; 0xc0c <Modbus_mster_transaction+0x4a8>
     bb8:	99 81       	ldd	r25, Y+1	; 0x01
     bba:	80 91 00 07 	lds	r24, 0x0700	; 0x800700 <g_mod0_slave>
     bbe:	98 13       	cpse	r25, r24
     bc0:	41 c4       	rjmp	.+2178   	; 0x1444 <Modbus_mster_transaction+0xce0>
     bc2:	8a 81       	ldd	r24, Y+2	; 0x02
     bc4:	28 2f       	mov	r18, r24
     bc6:	2f 77       	andi	r18, 0x7F	; 127
     bc8:	30 e0       	ldi	r19, 0x00	; 0
     bca:	2e 15       	cp	r18, r14
     bcc:	3f 05       	cpc	r19, r15
     bce:	09 f0       	breq	.+2      	; 0xbd2 <Modbus_mster_transaction+0x46e>
     bd0:	3b c4       	rjmp	.+2166   	; 0x1448 <Modbus_mster_transaction+0xce4>
     bd2:	88 23       	and	r24, r24
     bd4:	24 f4       	brge	.+8      	; 0xbde <Modbus_mster_transaction+0x47a>
     bd6:	8b 81       	ldd	r24, Y+3	; 0x03
     bd8:	88 23       	and	r24, r24
     bda:	e1 f1       	breq	.+120    	; 0xc54 <Modbus_mster_transaction+0x4f0>
     bdc:	c9 c0       	rjmp	.+402    	; 0xd70 <Modbus_mster_transaction+0x60c>
     bde:	81 31       	cpi	r24, 0x11	; 17
     be0:	58 f4       	brcc	.+22     	; 0xbf8 <Modbus_mster_transaction+0x494>
     be2:	8f 30       	cpi	r24, 0x0F	; 15
     be4:	08 f0       	brcs	.+2      	; 0xbe8 <Modbus_mster_transaction+0x484>
     be6:	c0 c3       	rjmp	.+1920   	; 0x1368 <Modbus_mster_transaction+0xc04>
     be8:	81 30       	cpi	r24, 0x01	; 1
     bea:	80 f0       	brcs	.+32     	; 0xc0c <Modbus_mster_transaction+0x4a8>
     bec:	85 30       	cpi	r24, 0x05	; 5
     bee:	68 f0       	brcs	.+26     	; 0xc0a <Modbus_mster_transaction+0x4a6>
     bf0:	87 30       	cpi	r24, 0x07	; 7
     bf2:	08 f4       	brcc	.+2      	; 0xbf6 <Modbus_mster_transaction+0x492>
     bf4:	b9 c3       	rjmp	.+1906   	; 0x1368 <Modbus_mster_transaction+0xc04>
     bf6:	0a c0       	rjmp	.+20     	; 0xc0c <Modbus_mster_transaction+0x4a8>
     bf8:	87 31       	cpi	r24, 0x17	; 23
     bfa:	39 f0       	breq	.+14     	; 0xc0a <Modbus_mster_transaction+0x4a6>
     bfc:	8f 3f       	cpi	r24, 0xFF	; 255
     bfe:	09 f4       	brne	.+2      	; 0xc02 <Modbus_mster_transaction+0x49e>
     c00:	b3 c3       	rjmp	.+1894   	; 0x1368 <Modbus_mster_transaction+0xc04>
     c02:	86 31       	cpi	r24, 0x16	; 22
     c04:	19 f4       	brne	.+6      	; 0xc0c <Modbus_mster_transaction+0x4a8>
     c06:	05 e0       	ldi	r16, 0x05	; 5
     c08:	b0 c3       	rjmp	.+1888   	; 0x136a <Modbus_mster_transaction+0xc06>
     c0a:	0b 81       	ldd	r16, Y+3	; 0x03
     c0c:	0e 94 d0 23 	call	0x47a0	; 0x47a0 <Get_millis>
     c10:	dc 01       	movw	r26, r24
     c12:	cb 01       	movw	r24, r22
     c14:	88 19       	sub	r24, r8
     c16:	99 09       	sbc	r25, r9
     c18:	aa 09       	sbc	r26, r10
     c1a:	bb 09       	sbc	r27, r11
     c1c:	89 3c       	cpi	r24, 0xC9	; 201
     c1e:	91 05       	cpc	r25, r1
     c20:	a1 05       	cpc	r26, r1
     c22:	b1 05       	cpc	r27, r1
     c24:	08 f4       	brcc	.+2      	; 0xc28 <Modbus_mster_transaction+0x4c4>
     c26:	06 c4       	rjmp	.+2060   	; 0x1434 <Modbus_mster_transaction+0xcd0>
     c28:	85 e4       	ldi	r24, 0x45	; 69
     c2a:	92 e0       	ldi	r25, 0x02	; 2
     c2c:	0e 94 62 11 	call	0x22c4	; 0x22c4 <UART0_puts>
     c30:	01 11       	cpse	r16, r1
     c32:	0c c4       	rjmp	.+2072   	; 0x144c <Modbus_mster_transaction+0xce8>
     c34:	82 ee       	ldi	r24, 0xE2	; 226
     c36:	81 11       	cpse	r24, r1
     c38:	9b c0       	rjmp	.+310    	; 0xd70 <Modbus_mster_transaction+0x60c>
     c3a:	15 30       	cpi	r17, 0x05	; 5
     c3c:	08 f4       	brcc	.+2      	; 0xc40 <Modbus_mster_transaction+0x4dc>
     c3e:	b5 c3       	rjmp	.+1898   	; 0x13aa <Modbus_mster_transaction+0xc46>
     c40:	a1 2e       	mov	r10, r17
     c42:	b1 2c       	mov	r11, r1
     c44:	75 01       	movw	r14, r10
     c46:	f2 e0       	ldi	r31, 0x02	; 2
     c48:	ef 1a       	sub	r14, r31
     c4a:	f1 08       	sbc	r15, r1
     c4c:	1e 14       	cp	r1, r14
     c4e:	1f 04       	cpc	r1, r15
     c50:	5c f0       	brlt	.+22     	; 0xc68 <Modbus_mster_transaction+0x504>
     c52:	9a c3       	rjmp	.+1844   	; 0x1388 <Modbus_mster_transaction+0xc24>
     c54:	0f 2e       	mov	r0, r31
     c56:	f3 e0       	ldi	r31, 0x03	; 3
     c58:	ef 2e       	mov	r14, r31
     c5a:	f1 2c       	mov	r15, r1
     c5c:	f0 2d       	mov	r31, r0
     c5e:	0f 2e       	mov	r0, r31
     c60:	f5 e0       	ldi	r31, 0x05	; 5
     c62:	af 2e       	mov	r10, r31
     c64:	b1 2c       	mov	r11, r1
     c66:	f0 2d       	mov	r31, r0
     c68:	20 e0       	ldi	r18, 0x00	; 0
     c6a:	30 e0       	ldi	r19, 0x00	; 0
     c6c:	8f ef       	ldi	r24, 0xFF	; 255
     c6e:	9f ef       	ldi	r25, 0xFF	; 255
     c70:	10 e0       	ldi	r17, 0x00	; 0
     c72:	e1 e0       	ldi	r30, 0x01	; 1
     c74:	f0 e0       	ldi	r31, 0x00	; 0
     c76:	ec 0f       	add	r30, r28
     c78:	fd 1f       	adc	r31, r29
     c7a:	e2 0f       	add	r30, r18
     c7c:	f3 1f       	adc	r31, r19
     c7e:	60 81       	ld	r22, Z
     c80:	0e 94 af 23 	call	0x475e	; 0x475e <crc16_update>
     c84:	1f 5f       	subi	r17, 0xFF	; 255
     c86:	21 2f       	mov	r18, r17
     c88:	30 e0       	ldi	r19, 0x00	; 0
     c8a:	2e 15       	cp	r18, r14
     c8c:	3f 05       	cpc	r19, r15
     c8e:	8c f3       	brlt	.-30     	; 0xc72 <Modbus_mster_transaction+0x50e>
     c90:	7d c3       	rjmp	.+1786   	; 0x138c <Modbus_mster_transaction+0xc28>
     c92:	89 2f       	mov	r24, r25
     c94:	99 27       	eor	r25, r25
     c96:	fe 01       	movw	r30, r28
     c98:	ea 0d       	add	r30, r10
     c9a:	fb 1d       	adc	r31, r11
     c9c:	20 81       	ld	r18, Z
     c9e:	30 e0       	ldi	r19, 0x00	; 0
     ca0:	82 17       	cp	r24, r18
     ca2:	93 07       	cpc	r25, r19
     ca4:	09 f0       	breq	.+2      	; 0xca8 <Modbus_mster_transaction+0x544>
     ca6:	7f c3       	rjmp	.+1790   	; 0x13a6 <Modbus_mster_transaction+0xc42>
     ca8:	80 c3       	rjmp	.+1792   	; 0x13aa <Modbus_mster_transaction+0xc46>
     caa:	9b 81       	ldd	r25, Y+3	; 0x03
     cac:	96 95       	lsr	r25
     cae:	e9 f5       	brne	.+122    	; 0xd2a <Modbus_mster_transaction+0x5c6>
     cb0:	80 e0       	ldi	r24, 0x00	; 0
     cb2:	5e c0       	rjmp	.+188    	; 0xd70 <Modbus_mster_transaction+0x60c>
     cb4:	7b 81       	ldd	r23, Y+3	; 0x03
     cb6:	97 2f       	mov	r25, r23
     cb8:	96 95       	lsr	r25
     cba:	09 f4       	brne	.+2      	; 0xcbe <Modbus_mster_transaction+0x55a>
     cbc:	84 c3       	rjmp	.+1800   	; 0x13c6 <Modbus_mster_transaction+0xc62>
     cbe:	fe 01       	movw	r30, r28
     cc0:	31 96       	adiw	r30, 0x01	; 1
     cc2:	40 e0       	ldi	r20, 0x00	; 0
     cc4:	50 e0       	ldi	r21, 0x00	; 0
     cc6:	80 e0       	ldi	r24, 0x00	; 0
     cc8:	80 34       	cpi	r24, 0x40	; 64
     cca:	70 f4       	brcc	.+28     	; 0xce8 <Modbus_mster_transaction+0x584>
     ccc:	24 81       	ldd	r18, Z+4	; 0x04
     cce:	30 e0       	ldi	r19, 0x00	; 0
     cd0:	32 2f       	mov	r19, r18
     cd2:	22 27       	eor	r18, r18
     cd4:	63 81       	ldd	r22, Z+3	; 0x03
     cd6:	26 2b       	or	r18, r22
     cd8:	da 01       	movw	r26, r20
     cda:	aa 0f       	add	r26, r26
     cdc:	bb 1f       	adc	r27, r27
     cde:	a4 58       	subi	r26, 0x84	; 132
     ce0:	b9 4f       	sbci	r27, 0xF9	; 249
     ce2:	11 96       	adiw	r26, 0x01	; 1
     ce4:	3c 93       	st	X, r19
     ce6:	2e 93       	st	-X, r18
     ce8:	8f 5f       	subi	r24, 0xFF	; 255
     cea:	4f 5f       	subi	r20, 0xFF	; 255
     cec:	5f 4f       	sbci	r21, 0xFF	; 255
     cee:	32 96       	adiw	r30, 0x02	; 2
     cf0:	89 13       	cpse	r24, r25
     cf2:	ea cf       	rjmp	.-44     	; 0xcc8 <Modbus_mster_transaction+0x564>
     cf4:	8f ef       	ldi	r24, 0xFF	; 255
     cf6:	89 0f       	add	r24, r25
     cf8:	80 93 f5 05 	sts	0x05F5, r24	; 0x8005f5 <g_mod0_response_buffer_length>
     cfc:	70 ff       	sbrs	r23, 0
     cfe:	35 c0       	rjmp	.+106    	; 0xd6a <Modbus_mster_transaction+0x606>
     d00:	90 34       	cpi	r25, 0x40	; 64
     d02:	70 f4       	brcc	.+28     	; 0xd20 <Modbus_mster_transaction+0x5bc>
     d04:	29 2f       	mov	r18, r25
     d06:	30 e0       	ldi	r19, 0x00	; 0
     d08:	22 0f       	add	r18, r18
     d0a:	33 1f       	adc	r19, r19
     d0c:	fe 01       	movw	r30, r28
     d0e:	e2 0f       	add	r30, r18
     d10:	f3 1f       	adc	r31, r19
     d12:	44 81       	ldd	r20, Z+4	; 0x04
     d14:	50 e0       	ldi	r21, 0x00	; 0
     d16:	f9 01       	movw	r30, r18
     d18:	e4 58       	subi	r30, 0x84	; 132
     d1a:	f9 4f       	sbci	r31, 0xF9	; 249
     d1c:	51 83       	std	Z+1, r21	; 0x01
     d1e:	40 83       	st	Z, r20
     d20:	9f 5f       	subi	r25, 0xFF	; 255
     d22:	90 93 f5 05 	sts	0x05F5, r25	; 0x8005f5 <g_mod0_response_buffer_length>
     d26:	80 e0       	ldi	r24, 0x00	; 0
     d28:	23 c0       	rjmp	.+70     	; 0xd70 <Modbus_mster_transaction+0x60c>
     d2a:	fe 01       	movw	r30, r28
     d2c:	31 96       	adiw	r30, 0x01	; 1
     d2e:	40 e0       	ldi	r20, 0x00	; 0
     d30:	50 e0       	ldi	r21, 0x00	; 0
     d32:	80 e0       	ldi	r24, 0x00	; 0
     d34:	80 34       	cpi	r24, 0x40	; 64
     d36:	70 f4       	brcc	.+28     	; 0xd54 <Modbus_mster_transaction+0x5f0>
     d38:	23 81       	ldd	r18, Z+3	; 0x03
     d3a:	30 e0       	ldi	r19, 0x00	; 0
     d3c:	32 2f       	mov	r19, r18
     d3e:	22 27       	eor	r18, r18
     d40:	64 81       	ldd	r22, Z+4	; 0x04
     d42:	26 2b       	or	r18, r22
     d44:	da 01       	movw	r26, r20
     d46:	aa 0f       	add	r26, r26
     d48:	bb 1f       	adc	r27, r27
     d4a:	a4 58       	subi	r26, 0x84	; 132
     d4c:	b9 4f       	sbci	r27, 0xF9	; 249
     d4e:	11 96       	adiw	r26, 0x01	; 1
     d50:	3c 93       	st	X, r19
     d52:	2e 93       	st	-X, r18
     d54:	8f 5f       	subi	r24, 0xFF	; 255
     d56:	4f 5f       	subi	r20, 0xFF	; 255
     d58:	5f 4f       	sbci	r21, 0xFF	; 255
     d5a:	32 96       	adiw	r30, 0x02	; 2
     d5c:	89 13       	cpse	r24, r25
     d5e:	ea cf       	rjmp	.-44     	; 0xd34 <Modbus_mster_transaction+0x5d0>
     d60:	91 50       	subi	r25, 0x01	; 1
     d62:	90 93 f5 05 	sts	0x05F5, r25	; 0x8005f5 <g_mod0_response_buffer_length>
     d66:	80 e0       	ldi	r24, 0x00	; 0
     d68:	03 c0       	rjmp	.+6      	; 0xd70 <Modbus_mster_transaction+0x60c>
     d6a:	80 e0       	ldi	r24, 0x00	; 0
     d6c:	01 c0       	rjmp	.+2      	; 0xd70 <Modbus_mster_transaction+0x60c>
     d6e:	80 e0       	ldi	r24, 0x00	; 0
     d70:	10 92 f7 05 	sts	0x05F7, r1	; 0x8005f7 <g_mod0_transmit_buffer_index>
     d74:	10 92 f6 05 	sts	0x05F6, r1	; 0x8005f6 <g_mod0_response_buffer_index>
     d78:	71 c3       	rjmp	.+1762   	; 0x145c <Modbus_mster_transaction+0xcf8>
     d7a:	81 30       	cpi	r24, 0x01	; 1
     d7c:	09 f0       	breq	.+2      	; 0xd80 <Modbus_mster_transaction+0x61c>
     d7e:	f2 c2       	rjmp	.+1508   	; 0x1364 <Modbus_mster_transaction+0xc00>
     d80:	80 91 e6 05 	lds	r24, 0x05E6	; 0x8005e6 <g_mod1_slave>
     d84:	89 83       	std	Y+1, r24	; 0x01
     d86:	2f ef       	ldi	r18, 0xFF	; 255
     d88:	62 13       	cpse	r22, r18
     d8a:	06 c0       	rjmp	.+12     	; 0xd98 <Modbus_mster_transaction+0x634>
     d8c:	8f e0       	ldi	r24, 0x0F	; 15
     d8e:	8a 83       	std	Y+2, r24	; 0x02
     d90:	68 94       	set
     d92:	bb 24       	eor	r11, r11
     d94:	b1 f8       	bld	r11, 1
     d96:	32 c0       	rjmp	.+100    	; 0xdfc <Modbus_mster_transaction+0x698>
     d98:	6a 83       	std	Y+2, r22	; 0x02
     d9a:	81 e0       	ldi	r24, 0x01	; 1
     d9c:	68 17       	cp	r22, r24
     d9e:	b8 f0       	brcs	.+46     	; 0xdce <Modbus_mster_transaction+0x66a>
     da0:	94 e0       	ldi	r25, 0x04	; 4
     da2:	96 17       	cp	r25, r22
     da4:	18 f4       	brcc	.+6      	; 0xdac <Modbus_mster_transaction+0x648>
     da6:	a7 e1       	ldi	r26, 0x17	; 23
     da8:	6a 13       	cpse	r22, r26
     daa:	11 c0       	rjmp	.+34     	; 0xdce <Modbus_mster_transaction+0x66a>
     dac:	80 91 e4 05 	lds	r24, 0x05E4	; 0x8005e4 <g_mod1_read_address>
     db0:	90 91 e5 05 	lds	r25, 0x05E5	; 0x8005e5 <g_mod1_read_address+0x1>
     db4:	9b 83       	std	Y+3, r25	; 0x03
     db6:	8c 83       	std	Y+4, r24	; 0x04
     db8:	80 91 e2 05 	lds	r24, 0x05E2	; 0x8005e2 <g_mod1_read_qty>
     dbc:	90 91 e3 05 	lds	r25, 0x05E3	; 0x8005e3 <g_mod1_read_qty+0x1>
     dc0:	9d 83       	std	Y+5, r25	; 0x05
     dc2:	8e 83       	std	Y+6, r24	; 0x06
     dc4:	0f 2e       	mov	r0, r31
     dc6:	f6 e0       	ldi	r31, 0x06	; 6
     dc8:	bf 2e       	mov	r11, r31
     dca:	f0 2d       	mov	r31, r0
     dcc:	03 c0       	rjmp	.+6      	; 0xdd4 <Modbus_mster_transaction+0x670>
     dce:	68 94       	set
     dd0:	bb 24       	eor	r11, r11
     dd2:	b1 f8       	bld	r11, 1
     dd4:	b0 e1       	ldi	r27, 0x10	; 16
     dd6:	bd 15       	cp	r27, r13
     dd8:	40 f0       	brcs	.+16     	; 0xdea <Modbus_mster_transaction+0x686>
     dda:	ef e0       	ldi	r30, 0x0F	; 15
     ddc:	de 16       	cp	r13, r30
     dde:	70 f4       	brcc	.+28     	; 0xdfc <Modbus_mster_transaction+0x698>
     de0:	8b ef       	ldi	r24, 0xFB	; 251
     de2:	8d 0d       	add	r24, r13
     de4:	82 30       	cpi	r24, 0x02	; 2
     de6:	00 f5       	brcc	.+64     	; 0xe28 <Modbus_mster_transaction+0x6c4>
     de8:	09 c0       	rjmp	.+18     	; 0xdfc <Modbus_mster_transaction+0x698>
     dea:	f6 e1       	ldi	r31, 0x16	; 22
     dec:	df 16       	cp	r13, r31
     dee:	e0 f0       	brcs	.+56     	; 0xe28 <Modbus_mster_transaction+0x6c4>
     df0:	27 e1       	ldi	r18, 0x17	; 23
     df2:	2d 15       	cp	r18, r13
     df4:	18 f4       	brcc	.+6      	; 0xdfc <Modbus_mster_transaction+0x698>
     df6:	8f ef       	ldi	r24, 0xFF	; 255
     df8:	d8 12       	cpse	r13, r24
     dfa:	16 c0       	rjmp	.+44     	; 0xe28 <Modbus_mster_transaction+0x6c4>
     dfc:	90 91 60 05 	lds	r25, 0x0560	; 0x800560 <g_mod1_write_address>
     e00:	80 91 61 05 	lds	r24, 0x0561	; 0x800561 <g_mod1_write_address+0x1>
     e04:	e1 e0       	ldi	r30, 0x01	; 1
     e06:	f0 e0       	ldi	r31, 0x00	; 0
     e08:	ec 0f       	add	r30, r28
     e0a:	fd 1f       	adc	r31, r29
     e0c:	eb 0d       	add	r30, r11
     e0e:	f1 1d       	adc	r31, r1
     e10:	80 83       	st	Z, r24
     e12:	81 e0       	ldi	r24, 0x01	; 1
     e14:	8b 0d       	add	r24, r11
     e16:	e1 e0       	ldi	r30, 0x01	; 1
     e18:	f0 e0       	ldi	r31, 0x00	; 0
     e1a:	ec 0f       	add	r30, r28
     e1c:	fd 1f       	adc	r31, r29
     e1e:	e8 0f       	add	r30, r24
     e20:	f1 1d       	adc	r31, r1
     e22:	b3 94       	inc	r11
     e24:	b3 94       	inc	r11
     e26:	90 83       	st	Z, r25
     e28:	90 e1       	ldi	r25, 0x10	; 16
     e2a:	d9 16       	cp	r13, r25
     e2c:	09 f4       	brne	.+2      	; 0xe30 <Modbus_mster_transaction+0x6cc>
     e2e:	ad c0       	rjmp	.+346    	; 0xf8a <Modbus_mster_transaction+0x826>
     e30:	9d 15       	cp	r25, r13
     e32:	58 f0       	brcs	.+22     	; 0xe4a <Modbus_mster_transaction+0x6e6>
     e34:	a6 e0       	ldi	r26, 0x06	; 6
     e36:	da 16       	cp	r13, r26
     e38:	61 f1       	breq	.+88     	; 0xe92 <Modbus_mster_transaction+0x72e>
     e3a:	bf e0       	ldi	r27, 0x0F	; 15
     e3c:	db 16       	cp	r13, r27
     e3e:	09 f4       	brne	.+2      	; 0xe42 <Modbus_mster_transaction+0x6de>
     e40:	41 c0       	rjmp	.+130    	; 0xec4 <Modbus_mster_transaction+0x760>
     e42:	e5 e0       	ldi	r30, 0x05	; 5
     e44:	de 12       	cpse	r13, r30
     e46:	1b c1       	rjmp	.+566    	; 0x107e <Modbus_mster_transaction+0x91a>
     e48:	0d c0       	rjmp	.+26     	; 0xe64 <Modbus_mster_transaction+0x700>
     e4a:	f7 e1       	ldi	r31, 0x17	; 23
     e4c:	df 16       	cp	r13, r31
     e4e:	09 f4       	brne	.+2      	; 0xe52 <Modbus_mster_transaction+0x6ee>
     e50:	9c c0       	rjmp	.+312    	; 0xf8a <Modbus_mster_transaction+0x826>
     e52:	2f ef       	ldi	r18, 0xFF	; 255
     e54:	d2 16       	cp	r13, r18
     e56:	09 f4       	brne	.+2      	; 0xe5a <Modbus_mster_transaction+0x6f6>
     e58:	98 c0       	rjmp	.+304    	; 0xf8a <Modbus_mster_transaction+0x826>
     e5a:	86 e1       	ldi	r24, 0x16	; 22
     e5c:	d8 16       	cp	r13, r24
     e5e:	09 f4       	brne	.+2      	; 0xe62 <Modbus_mster_transaction+0x6fe>
     e60:	e0 c0       	rjmp	.+448    	; 0x1022 <Modbus_mster_transaction+0x8be>
     e62:	0d c1       	rjmp	.+538    	; 0x107e <Modbus_mster_transaction+0x91a>
     e64:	90 91 5e 05 	lds	r25, 0x055E	; 0x80055e <g_mod1_write_qty>
     e68:	80 91 5f 05 	lds	r24, 0x055F	; 0x80055f <g_mod1_write_qty+0x1>
     e6c:	e1 e0       	ldi	r30, 0x01	; 1
     e6e:	f0 e0       	ldi	r31, 0x00	; 0
     e70:	ec 0f       	add	r30, r28
     e72:	fd 1f       	adc	r31, r29
     e74:	eb 0d       	add	r30, r11
     e76:	f1 1d       	adc	r31, r1
     e78:	80 83       	st	Z, r24
     e7a:	81 e0       	ldi	r24, 0x01	; 1
     e7c:	8b 0d       	add	r24, r11
     e7e:	e1 e0       	ldi	r30, 0x01	; 1
     e80:	f0 e0       	ldi	r31, 0x00	; 0
     e82:	ec 0f       	add	r30, r28
     e84:	fd 1f       	adc	r31, r29
     e86:	e8 0f       	add	r30, r24
     e88:	f1 1d       	adc	r31, r1
     e8a:	b3 94       	inc	r11
     e8c:	b3 94       	inc	r11
     e8e:	90 83       	st	Z, r25
     e90:	f6 c0       	rjmp	.+492    	; 0x107e <Modbus_mster_transaction+0x91a>
     e92:	ee ed       	ldi	r30, 0xDE	; 222
     e94:	f4 e0       	ldi	r31, 0x04	; 4
     e96:	80 81       	ld	r24, Z
     e98:	91 81       	ldd	r25, Z+1	; 0x01
     e9a:	a1 e0       	ldi	r26, 0x01	; 1
     e9c:	b0 e0       	ldi	r27, 0x00	; 0
     e9e:	ac 0f       	add	r26, r28
     ea0:	bd 1f       	adc	r27, r29
     ea2:	ab 0d       	add	r26, r11
     ea4:	b1 1d       	adc	r27, r1
     ea6:	9c 93       	st	X, r25
     ea8:	20 81       	ld	r18, Z
     eaa:	31 81       	ldd	r19, Z+1	; 0x01
     eac:	81 e0       	ldi	r24, 0x01	; 1
     eae:	8b 0d       	add	r24, r11
     eb0:	e1 e0       	ldi	r30, 0x01	; 1
     eb2:	f0 e0       	ldi	r31, 0x00	; 0
     eb4:	ec 0f       	add	r30, r28
     eb6:	fd 1f       	adc	r31, r29
     eb8:	e8 0f       	add	r30, r24
     eba:	f1 1d       	adc	r31, r1
     ebc:	b3 94       	inc	r11
     ebe:	b3 94       	inc	r11
     ec0:	20 83       	st	Z, r18
     ec2:	dd c0       	rjmp	.+442    	; 0x107e <Modbus_mster_transaction+0x91a>
     ec4:	80 91 5e 05 	lds	r24, 0x055E	; 0x80055e <g_mod1_write_qty>
     ec8:	90 91 5f 05 	lds	r25, 0x055F	; 0x80055f <g_mod1_write_qty+0x1>
     ecc:	e1 e0       	ldi	r30, 0x01	; 1
     ece:	f0 e0       	ldi	r31, 0x00	; 0
     ed0:	ec 0f       	add	r30, r28
     ed2:	fd 1f       	adc	r31, r29
     ed4:	eb 0d       	add	r30, r11
     ed6:	f1 1d       	adc	r31, r1
     ed8:	90 83       	st	Z, r25
     eda:	22 e0       	ldi	r18, 0x02	; 2
     edc:	2b 0d       	add	r18, r11
     ede:	31 e0       	ldi	r19, 0x01	; 1
     ee0:	3b 0d       	add	r19, r11
     ee2:	e1 e0       	ldi	r30, 0x01	; 1
     ee4:	f0 e0       	ldi	r31, 0x00	; 0
     ee6:	ec 0f       	add	r30, r28
     ee8:	fd 1f       	adc	r31, r29
     eea:	e3 0f       	add	r30, r19
     eec:	f1 1d       	adc	r31, r1
     eee:	80 83       	st	Z, r24
     ef0:	ac 01       	movw	r20, r24
     ef2:	47 70       	andi	r20, 0x07	; 7
     ef4:	55 27       	eor	r21, r21
     ef6:	45 2b       	or	r20, r21
     ef8:	49 f0       	breq	.+18     	; 0xf0c <Modbus_mster_transaction+0x7a8>
     efa:	96 95       	lsr	r25
     efc:	87 95       	ror	r24
     efe:	96 95       	lsr	r25
     f00:	87 95       	ror	r24
     f02:	96 95       	lsr	r25
     f04:	87 95       	ror	r24
     f06:	91 e0       	ldi	r25, 0x01	; 1
     f08:	98 0f       	add	r25, r24
     f0a:	07 c0       	rjmp	.+14     	; 0xf1a <Modbus_mster_transaction+0x7b6>
     f0c:	96 95       	lsr	r25
     f0e:	87 95       	ror	r24
     f10:	96 95       	lsr	r25
     f12:	87 95       	ror	r24
     f14:	96 95       	lsr	r25
     f16:	87 95       	ror	r24
     f18:	98 2f       	mov	r25, r24
     f1a:	a3 e0       	ldi	r26, 0x03	; 3
     f1c:	ba 0e       	add	r11, r26
     f1e:	fe 01       	movw	r30, r28
     f20:	e2 0f       	add	r30, r18
     f22:	f1 1d       	adc	r31, r1
     f24:	91 83       	std	Z+1, r25	; 0x01
     f26:	99 23       	and	r25, r25
     f28:	09 f4       	brne	.+2      	; 0xf2c <Modbus_mster_transaction+0x7c8>
     f2a:	a9 c0       	rjmp	.+338    	; 0x107e <Modbus_mster_transaction+0x91a>
     f2c:	80 e0       	ldi	r24, 0x00	; 0
     f2e:	28 2f       	mov	r18, r24
     f30:	21 70       	andi	r18, 0x01	; 1
     f32:	80 ff       	sbrs	r24, 0
     f34:	03 c0       	rjmp	.+6      	; 0xf3c <Modbus_mster_transaction+0x7d8>
     f36:	21 30       	cpi	r18, 0x01	; 1
     f38:	99 f0       	breq	.+38     	; 0xf60 <Modbus_mster_transaction+0x7fc>
     f3a:	23 c0       	rjmp	.+70     	; 0xf82 <Modbus_mster_transaction+0x81e>
     f3c:	e8 2f       	mov	r30, r24
     f3e:	e6 95       	lsr	r30
     f40:	f0 e0       	ldi	r31, 0x00	; 0
     f42:	ee 0f       	add	r30, r30
     f44:	ff 1f       	adc	r31, r31
     f46:	e2 52       	subi	r30, 0x22	; 34
     f48:	fb 4f       	sbci	r31, 0xFB	; 251
     f4a:	20 81       	ld	r18, Z
     f4c:	31 81       	ldd	r19, Z+1	; 0x01
     f4e:	e1 e0       	ldi	r30, 0x01	; 1
     f50:	f0 e0       	ldi	r31, 0x00	; 0
     f52:	ec 0f       	add	r30, r28
     f54:	fd 1f       	adc	r31, r29
     f56:	eb 0d       	add	r30, r11
     f58:	f1 1d       	adc	r31, r1
     f5a:	20 83       	st	Z, r18
     f5c:	b3 94       	inc	r11
     f5e:	11 c0       	rjmp	.+34     	; 0xf82 <Modbus_mster_transaction+0x81e>
     f60:	e8 2f       	mov	r30, r24
     f62:	e6 95       	lsr	r30
     f64:	f0 e0       	ldi	r31, 0x00	; 0
     f66:	ee 0f       	add	r30, r30
     f68:	ff 1f       	adc	r31, r31
     f6a:	e2 52       	subi	r30, 0x22	; 34
     f6c:	fb 4f       	sbci	r31, 0xFB	; 251
     f6e:	20 81       	ld	r18, Z
     f70:	31 81       	ldd	r19, Z+1	; 0x01
     f72:	e1 e0       	ldi	r30, 0x01	; 1
     f74:	f0 e0       	ldi	r31, 0x00	; 0
     f76:	ec 0f       	add	r30, r28
     f78:	fd 1f       	adc	r31, r29
     f7a:	eb 0d       	add	r30, r11
     f7c:	f1 1d       	adc	r31, r1
     f7e:	30 83       	st	Z, r19
     f80:	b3 94       	inc	r11
     f82:	8f 5f       	subi	r24, 0xFF	; 255
     f84:	98 13       	cpse	r25, r24
     f86:	d3 cf       	rjmp	.-90     	; 0xf2e <Modbus_mster_transaction+0x7ca>
     f88:	7a c0       	rjmp	.+244    	; 0x107e <Modbus_mster_transaction+0x91a>
     f8a:	80 91 5e 05 	lds	r24, 0x055E	; 0x80055e <g_mod1_write_qty>
     f8e:	90 91 5f 05 	lds	r25, 0x055F	; 0x80055f <g_mod1_write_qty+0x1>
     f92:	e1 e0       	ldi	r30, 0x01	; 1
     f94:	f0 e0       	ldi	r31, 0x00	; 0
     f96:	ec 0f       	add	r30, r28
     f98:	fd 1f       	adc	r31, r29
     f9a:	eb 0d       	add	r30, r11
     f9c:	f1 1d       	adc	r31, r1
     f9e:	90 83       	st	Z, r25
     fa0:	21 e0       	ldi	r18, 0x01	; 1
     fa2:	2b 0d       	add	r18, r11
     fa4:	e1 e0       	ldi	r30, 0x01	; 1
     fa6:	f0 e0       	ldi	r31, 0x00	; 0
     fa8:	ec 0f       	add	r30, r28
     faa:	fd 1f       	adc	r31, r29
     fac:	e2 0f       	add	r30, r18
     fae:	f1 1d       	adc	r31, r1
     fb0:	80 83       	st	Z, r24
     fb2:	22 e0       	ldi	r18, 0x02	; 2
     fb4:	2b 0d       	add	r18, r11
     fb6:	e1 e0       	ldi	r30, 0x01	; 1
     fb8:	f0 e0       	ldi	r31, 0x00	; 0
     fba:	ec 0f       	add	r30, r28
     fbc:	fd 1f       	adc	r31, r29
     fbe:	e2 0f       	add	r30, r18
     fc0:	f1 1d       	adc	r31, r1
     fc2:	b3 e0       	ldi	r27, 0x03	; 3
     fc4:	bb 0e       	add	r11, r27
     fc6:	28 2f       	mov	r18, r24
     fc8:	22 0f       	add	r18, r18
     fca:	20 83       	st	Z, r18
     fcc:	ac 01       	movw	r20, r24
     fce:	55 27       	eor	r21, r21
     fd0:	14 16       	cp	r1, r20
     fd2:	15 06       	cpc	r1, r21
     fd4:	0c f0       	brlt	.+2      	; 0xfd8 <Modbus_mster_transaction+0x874>
     fd6:	53 c0       	rjmp	.+166    	; 0x107e <Modbus_mster_transaction+0x91a>
     fd8:	80 e0       	ldi	r24, 0x00	; 0
     fda:	90 e0       	ldi	r25, 0x00	; 0
     fdc:	20 e0       	ldi	r18, 0x00	; 0
     fde:	88 0f       	add	r24, r24
     fe0:	99 1f       	adc	r25, r25
     fe2:	fc 01       	movw	r30, r24
     fe4:	e2 52       	subi	r30, 0x22	; 34
     fe6:	fb 4f       	sbci	r31, 0xFB	; 251
     fe8:	80 81       	ld	r24, Z
     fea:	91 81       	ldd	r25, Z+1	; 0x01
     fec:	a1 e0       	ldi	r26, 0x01	; 1
     fee:	b0 e0       	ldi	r27, 0x00	; 0
     ff0:	ac 0f       	add	r26, r28
     ff2:	bd 1f       	adc	r27, r29
     ff4:	ab 0d       	add	r26, r11
     ff6:	b1 1d       	adc	r27, r1
     ff8:	9c 93       	st	X, r25
     ffa:	60 81       	ld	r22, Z
     ffc:	71 81       	ldd	r23, Z+1	; 0x01
     ffe:	81 e0       	ldi	r24, 0x01	; 1
    1000:	8b 0d       	add	r24, r11
    1002:	e1 e0       	ldi	r30, 0x01	; 1
    1004:	f0 e0       	ldi	r31, 0x00	; 0
    1006:	ec 0f       	add	r30, r28
    1008:	fd 1f       	adc	r31, r29
    100a:	e8 0f       	add	r30, r24
    100c:	f1 1d       	adc	r31, r1
    100e:	b3 94       	inc	r11
    1010:	b3 94       	inc	r11
    1012:	60 83       	st	Z, r22
    1014:	2f 5f       	subi	r18, 0xFF	; 255
    1016:	82 2f       	mov	r24, r18
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	84 17       	cp	r24, r20
    101c:	95 07       	cpc	r25, r21
    101e:	fc f2       	brlt	.-66     	; 0xfde <Modbus_mster_transaction+0x87a>
    1020:	2e c0       	rjmp	.+92     	; 0x107e <Modbus_mster_transaction+0x91a>
    1022:	ee ed       	ldi	r30, 0xDE	; 222
    1024:	f4 e0       	ldi	r31, 0x04	; 4
    1026:	80 81       	ld	r24, Z
    1028:	91 81       	ldd	r25, Z+1	; 0x01
    102a:	a1 e0       	ldi	r26, 0x01	; 1
    102c:	b0 e0       	ldi	r27, 0x00	; 0
    102e:	ac 0f       	add	r26, r28
    1030:	bd 1f       	adc	r27, r29
    1032:	ab 0d       	add	r26, r11
    1034:	b1 1d       	adc	r27, r1
    1036:	9c 93       	st	X, r25
    1038:	80 81       	ld	r24, Z
    103a:	91 81       	ldd	r25, Z+1	; 0x01
    103c:	91 e0       	ldi	r25, 0x01	; 1
    103e:	9b 0d       	add	r25, r11
    1040:	a1 e0       	ldi	r26, 0x01	; 1
    1042:	b0 e0       	ldi	r27, 0x00	; 0
    1044:	ac 0f       	add	r26, r28
    1046:	bd 1f       	adc	r27, r29
    1048:	a9 0f       	add	r26, r25
    104a:	b1 1d       	adc	r27, r1
    104c:	8c 93       	st	X, r24
    104e:	82 81       	ldd	r24, Z+2	; 0x02
    1050:	93 81       	ldd	r25, Z+3	; 0x03
    1052:	82 e0       	ldi	r24, 0x02	; 2
    1054:	8b 0d       	add	r24, r11
    1056:	a1 e0       	ldi	r26, 0x01	; 1
    1058:	b0 e0       	ldi	r27, 0x00	; 0
    105a:	ac 0f       	add	r26, r28
    105c:	bd 1f       	adc	r27, r29
    105e:	a8 0f       	add	r26, r24
    1060:	b1 1d       	adc	r27, r1
    1062:	9c 93       	st	X, r25
    1064:	22 81       	ldd	r18, Z+2	; 0x02
    1066:	33 81       	ldd	r19, Z+3	; 0x03
    1068:	83 e0       	ldi	r24, 0x03	; 3
    106a:	8b 0d       	add	r24, r11
    106c:	e1 e0       	ldi	r30, 0x01	; 1
    106e:	f0 e0       	ldi	r31, 0x00	; 0
    1070:	ec 0f       	add	r30, r28
    1072:	fd 1f       	adc	r31, r29
    1074:	e8 0f       	add	r30, r24
    1076:	f1 1d       	adc	r31, r1
    1078:	84 e0       	ldi	r24, 0x04	; 4
    107a:	b8 0e       	add	r11, r24
    107c:	20 83       	st	Z, r18
    107e:	bb 20       	and	r11, r11
    1080:	b9 f0       	breq	.+46     	; 0x10b0 <Modbus_mster_transaction+0x94c>
    1082:	8e 01       	movw	r16, r28
    1084:	0f 5f       	subi	r16, 0xFF	; 255
    1086:	1f 4f       	sbci	r17, 0xFF	; 255
    1088:	ee 24       	eor	r14, r14
    108a:	ea 94       	dec	r14
    108c:	eb 0c       	add	r14, r11
    108e:	f1 2c       	mov	r15, r1
    1090:	9f ef       	ldi	r25, 0xFF	; 255
    1092:	e9 1a       	sub	r14, r25
    1094:	f9 0a       	sbc	r15, r25
    1096:	e0 0e       	add	r14, r16
    1098:	f1 1e       	adc	r15, r17
    109a:	8f ef       	ldi	r24, 0xFF	; 255
    109c:	9f ef       	ldi	r25, 0xFF	; 255
    109e:	d8 01       	movw	r26, r16
    10a0:	6d 91       	ld	r22, X+
    10a2:	8d 01       	movw	r16, r26
    10a4:	0e 94 af 23 	call	0x475e	; 0x475e <crc16_update>
    10a8:	0e 15       	cp	r16, r14
    10aa:	1f 05       	cpc	r17, r15
    10ac:	c1 f7       	brne	.-16     	; 0x109e <Modbus_mster_transaction+0x93a>
    10ae:	02 c0       	rjmp	.+4      	; 0x10b4 <Modbus_mster_transaction+0x950>
    10b0:	8f ef       	ldi	r24, 0xFF	; 255
    10b2:	9f ef       	ldi	r25, 0xFF	; 255
    10b4:	ee 24       	eor	r14, r14
    10b6:	e3 94       	inc	r14
    10b8:	eb 0c       	add	r14, r11
    10ba:	e1 e0       	ldi	r30, 0x01	; 1
    10bc:	f0 e0       	ldi	r31, 0x00	; 0
    10be:	ec 0f       	add	r30, r28
    10c0:	fd 1f       	adc	r31, r29
    10c2:	eb 0d       	add	r30, r11
    10c4:	f1 1d       	adc	r31, r1
    10c6:	80 83       	st	Z, r24
    10c8:	b3 94       	inc	r11
    10ca:	b3 94       	inc	r11
    10cc:	e1 e0       	ldi	r30, 0x01	; 1
    10ce:	f0 e0       	ldi	r31, 0x00	; 0
    10d0:	ec 0f       	add	r30, r28
    10d2:	fd 1f       	adc	r31, r29
    10d4:	ee 0d       	add	r30, r14
    10d6:	f1 1d       	adc	r31, r1
    10d8:	90 83       	st	Z, r25
    10da:	e1 e0       	ldi	r30, 0x01	; 1
    10dc:	f0 e0       	ldi	r31, 0x00	; 0
    10de:	ec 0f       	add	r30, r28
    10e0:	fd 1f       	adc	r31, r29
    10e2:	eb 0d       	add	r30, r11
    10e4:	f1 1d       	adc	r31, r1
    10e6:	10 82       	st	Z, r1
    10e8:	e0 91 d1 04 	lds	r30, 0x04D1	; 0x8004d1 <g_mod1_Serial_getc>
    10ec:	f0 91 d2 04 	lds	r31, 0x04D2	; 0x8004d2 <g_mod1_Serial_getc+0x1>
    10f0:	19 95       	eicall
    10f2:	81 15       	cp	r24, r1
    10f4:	91 40       	sbci	r25, 0x01	; 1
    10f6:	c1 f7       	brne	.-16     	; 0x10e8 <Modbus_mster_transaction+0x984>
    10f8:	e0 91 d7 04 	lds	r30, 0x04D7	; 0x8004d7 <g_mod1_pre_transmission>
    10fc:	f0 91 d8 04 	lds	r31, 0x04D8	; 0x8004d8 <g_mod1_pre_transmission+0x1>
    1100:	30 97       	sbiw	r30, 0x00	; 0
    1102:	09 f0       	breq	.+2      	; 0x1106 <Modbus_mster_transaction+0x9a2>
    1104:	19 95       	eicall
    1106:	bb 20       	and	r11, r11
    1108:	a1 f0       	breq	.+40     	; 0x1132 <Modbus_mster_transaction+0x9ce>
    110a:	8e 01       	movw	r16, r28
    110c:	0f 5f       	subi	r16, 0xFF	; 255
    110e:	1f 4f       	sbci	r17, 0xFF	; 255
    1110:	f1 2c       	mov	r15, r1
    1112:	ef ef       	ldi	r30, 0xFF	; 255
    1114:	ee 1a       	sub	r14, r30
    1116:	fe 0a       	sbc	r15, r30
    1118:	e0 0e       	add	r14, r16
    111a:	f1 1e       	adc	r15, r17
    111c:	e0 91 d3 04 	lds	r30, 0x04D3	; 0x8004d3 <g_mod1_Serial_putc>
    1120:	f0 91 d4 04 	lds	r31, 0x04D4	; 0x8004d4 <g_mod1_Serial_putc+0x1>
    1124:	d8 01       	movw	r26, r16
    1126:	8d 91       	ld	r24, X+
    1128:	8d 01       	movw	r16, r26
    112a:	19 95       	eicall
    112c:	e0 16       	cp	r14, r16
    112e:	f1 06       	cpc	r15, r17
    1130:	a9 f7       	brne	.-22     	; 0x111c <Modbus_mster_transaction+0x9b8>
    1132:	e0 91 cd 04 	lds	r30, 0x04CD	; 0x8004cd <g_mod1_Serial_flush>
    1136:	f0 91 ce 04 	lds	r31, 0x04CE	; 0x8004ce <g_mod1_Serial_flush+0x1>
    113a:	19 95       	eicall
    113c:	e7 e0       	ldi	r30, 0x07	; 7
    113e:	f7 e0       	ldi	r31, 0x07	; 7
    1140:	31 97       	sbiw	r30, 0x01	; 1
    1142:	f1 f7       	brne	.-4      	; 0x1140 <Modbus_mster_transaction+0x9dc>
    1144:	00 c0       	rjmp	.+0      	; 0x1146 <Modbus_mster_transaction+0x9e2>
    1146:	00 00       	nop
    1148:	e0 91 d5 04 	lds	r30, 0x04D5	; 0x8004d5 <g_mod1_post_transmission>
    114c:	f0 91 d6 04 	lds	r31, 0x04D6	; 0x8004d6 <g_mod1_post_transmission+0x1>
    1150:	30 97       	sbiw	r30, 0x00	; 0
    1152:	09 f0       	breq	.+2      	; 0x1156 <Modbus_mster_transaction+0x9f2>
    1154:	19 95       	eicall
    1156:	0e 94 d0 23 	call	0x47a0	; 0x47a0 <Get_millis>
    115a:	4b 01       	movw	r8, r22
    115c:	5c 01       	movw	r10, r24
    115e:	08 e0       	ldi	r16, 0x08	; 8
    1160:	10 e0       	ldi	r17, 0x00	; 0
    1162:	ed 2c       	mov	r14, r13
    1164:	f1 2c       	mov	r15, r1
    1166:	e0 91 cf 04 	lds	r30, 0x04CF	; 0x8004cf <g_mod1_Serial_available>
    116a:	f0 91 d0 04 	lds	r31, 0x04D0	; 0x8004d0 <g_mod1_Serial_available+0x1>
    116e:	19 95       	eicall
    1170:	89 2b       	or	r24, r25
    1172:	91 f0       	breq	.+36     	; 0x1198 <Modbus_mster_transaction+0xa34>
    1174:	dd 24       	eor	r13, r13
    1176:	d3 94       	inc	r13
    1178:	d1 0e       	add	r13, r17
    117a:	e0 91 d1 04 	lds	r30, 0x04D1	; 0x8004d1 <g_mod1_Serial_getc>
    117e:	f0 91 d2 04 	lds	r31, 0x04D2	; 0x8004d2 <g_mod1_Serial_getc+0x1>
    1182:	19 95       	eicall
    1184:	e1 e0       	ldi	r30, 0x01	; 1
    1186:	f0 e0       	ldi	r31, 0x00	; 0
    1188:	ec 0f       	add	r30, r28
    118a:	fd 1f       	adc	r31, r29
    118c:	e1 0f       	add	r30, r17
    118e:	f1 1d       	adc	r31, r1
    1190:	80 83       	st	Z, r24
    1192:	01 50       	subi	r16, 0x01	; 1
    1194:	1d 2d       	mov	r17, r13
    1196:	07 c0       	rjmp	.+14     	; 0x11a6 <Modbus_mster_transaction+0xa42>
    1198:	e0 91 d9 04 	lds	r30, 0x04D9	; 0x8004d9 <g_mod1_idle>
    119c:	f0 91 da 04 	lds	r31, 0x04DA	; 0x8004da <g_mod1_idle+0x1>
    11a0:	30 97       	sbiw	r30, 0x00	; 0
    11a2:	09 f0       	breq	.+2      	; 0x11a6 <Modbus_mster_transaction+0xa42>
    11a4:	19 95       	eicall
    11a6:	15 30       	cpi	r17, 0x05	; 5
    11a8:	51 f5       	brne	.+84     	; 0x11fe <Modbus_mster_transaction+0xa9a>
    11aa:	99 81       	ldd	r25, Y+1	; 0x01
    11ac:	80 91 e6 05 	lds	r24, 0x05E6	; 0x8005e6 <g_mod1_slave>
    11b0:	98 13       	cpse	r25, r24
    11b2:	4e c1       	rjmp	.+668    	; 0x1450 <Modbus_mster_transaction+0xcec>
    11b4:	8a 81       	ldd	r24, Y+2	; 0x02
    11b6:	28 2f       	mov	r18, r24
    11b8:	2f 77       	andi	r18, 0x7F	; 127
    11ba:	30 e0       	ldi	r19, 0x00	; 0
    11bc:	2e 15       	cp	r18, r14
    11be:	3f 05       	cpc	r19, r15
    11c0:	09 f0       	breq	.+2      	; 0x11c4 <Modbus_mster_transaction+0xa60>
    11c2:	48 c1       	rjmp	.+656    	; 0x1454 <Modbus_mster_transaction+0xcf0>
    11c4:	88 23       	and	r24, r24
    11c6:	24 f4       	brge	.+8      	; 0x11d0 <Modbus_mster_transaction+0xa6c>
    11c8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ca:	88 23       	and	r24, r24
    11cc:	e1 f1       	breq	.+120    	; 0x1246 <Modbus_mster_transaction+0xae2>
    11ce:	c5 c0       	rjmp	.+394    	; 0x135a <Modbus_mster_transaction+0xbf6>
    11d0:	81 31       	cpi	r24, 0x11	; 17
    11d2:	58 f4       	brcc	.+22     	; 0x11ea <Modbus_mster_transaction+0xa86>
    11d4:	8f 30       	cpi	r24, 0x0F	; 15
    11d6:	08 f0       	brcs	.+2      	; 0x11da <Modbus_mster_transaction+0xa76>
    11d8:	fa c0       	rjmp	.+500    	; 0x13ce <Modbus_mster_transaction+0xc6a>
    11da:	81 30       	cpi	r24, 0x01	; 1
    11dc:	80 f0       	brcs	.+32     	; 0x11fe <Modbus_mster_transaction+0xa9a>
    11de:	85 30       	cpi	r24, 0x05	; 5
    11e0:	68 f0       	brcs	.+26     	; 0x11fc <Modbus_mster_transaction+0xa98>
    11e2:	87 30       	cpi	r24, 0x07	; 7
    11e4:	08 f4       	brcc	.+2      	; 0x11e8 <Modbus_mster_transaction+0xa84>
    11e6:	f3 c0       	rjmp	.+486    	; 0x13ce <Modbus_mster_transaction+0xc6a>
    11e8:	0a c0       	rjmp	.+20     	; 0x11fe <Modbus_mster_transaction+0xa9a>
    11ea:	87 31       	cpi	r24, 0x17	; 23
    11ec:	39 f0       	breq	.+14     	; 0x11fc <Modbus_mster_transaction+0xa98>
    11ee:	8f 3f       	cpi	r24, 0xFF	; 255
    11f0:	09 f4       	brne	.+2      	; 0x11f4 <Modbus_mster_transaction+0xa90>
    11f2:	ed c0       	rjmp	.+474    	; 0x13ce <Modbus_mster_transaction+0xc6a>
    11f4:	86 31       	cpi	r24, 0x16	; 22
    11f6:	19 f4       	brne	.+6      	; 0x11fe <Modbus_mster_transaction+0xa9a>
    11f8:	05 e0       	ldi	r16, 0x05	; 5
    11fa:	ea c0       	rjmp	.+468    	; 0x13d0 <Modbus_mster_transaction+0xc6c>
    11fc:	0b 81       	ldd	r16, Y+3	; 0x03
    11fe:	0e 94 d0 23 	call	0x47a0	; 0x47a0 <Get_millis>
    1202:	dc 01       	movw	r26, r24
    1204:	cb 01       	movw	r24, r22
    1206:	88 19       	sub	r24, r8
    1208:	99 09       	sbc	r25, r9
    120a:	aa 09       	sbc	r26, r10
    120c:	bb 09       	sbc	r27, r11
    120e:	89 3c       	cpi	r24, 0xC9	; 201
    1210:	91 05       	cpc	r25, r1
    1212:	a1 05       	cpc	r26, r1
    1214:	b1 05       	cpc	r27, r1
    1216:	08 f4       	brcc	.+2      	; 0x121a <Modbus_mster_transaction+0xab6>
    1218:	11 c1       	rjmp	.+546    	; 0x143c <Modbus_mster_transaction+0xcd8>
    121a:	8e e5       	ldi	r24, 0x5E	; 94
    121c:	92 e0       	ldi	r25, 0x02	; 2
    121e:	0e 94 62 11 	call	0x22c4	; 0x22c4 <UART0_puts>
    1222:	01 11       	cpse	r16, r1
    1224:	19 c1       	rjmp	.+562    	; 0x1458 <Modbus_mster_transaction+0xcf4>
    1226:	82 ee       	ldi	r24, 0xE2	; 226
    1228:	81 11       	cpse	r24, r1
    122a:	97 c0       	rjmp	.+302    	; 0x135a <Modbus_mster_transaction+0xbf6>
    122c:	15 30       	cpi	r17, 0x05	; 5
    122e:	08 f4       	brcc	.+2      	; 0x1232 <Modbus_mster_transaction+0xace>
    1230:	ef c0       	rjmp	.+478    	; 0x1410 <Modbus_mster_transaction+0xcac>
    1232:	01 2f       	mov	r16, r17
    1234:	10 e0       	ldi	r17, 0x00	; 0
    1236:	78 01       	movw	r14, r16
    1238:	f2 e0       	ldi	r31, 0x02	; 2
    123a:	ef 1a       	sub	r14, r31
    123c:	f1 08       	sbc	r15, r1
    123e:	1e 14       	cp	r1, r14
    1240:	1f 04       	cpc	r1, r15
    1242:	44 f0       	brlt	.+16     	; 0x1254 <Modbus_mster_transaction+0xaf0>
    1244:	d4 c0       	rjmp	.+424    	; 0x13ee <Modbus_mster_transaction+0xc8a>
    1246:	0f 2e       	mov	r0, r31
    1248:	f3 e0       	ldi	r31, 0x03	; 3
    124a:	ef 2e       	mov	r14, r31
    124c:	f1 2c       	mov	r15, r1
    124e:	f0 2d       	mov	r31, r0
    1250:	05 e0       	ldi	r16, 0x05	; 5
    1252:	10 e0       	ldi	r17, 0x00	; 0
    1254:	20 e0       	ldi	r18, 0x00	; 0
    1256:	30 e0       	ldi	r19, 0x00	; 0
    1258:	8f ef       	ldi	r24, 0xFF	; 255
    125a:	9f ef       	ldi	r25, 0xFF	; 255
    125c:	d1 2c       	mov	r13, r1
    125e:	e1 e0       	ldi	r30, 0x01	; 1
    1260:	f0 e0       	ldi	r31, 0x00	; 0
    1262:	ec 0f       	add	r30, r28
    1264:	fd 1f       	adc	r31, r29
    1266:	e2 0f       	add	r30, r18
    1268:	f3 1f       	adc	r31, r19
    126a:	60 81       	ld	r22, Z
    126c:	0e 94 af 23 	call	0x475e	; 0x475e <crc16_update>
    1270:	d3 94       	inc	r13
    1272:	2d 2d       	mov	r18, r13
    1274:	30 e0       	ldi	r19, 0x00	; 0
    1276:	2e 15       	cp	r18, r14
    1278:	3f 05       	cpc	r19, r15
    127a:	8c f3       	brlt	.-30     	; 0x125e <Modbus_mster_transaction+0xafa>
    127c:	ba c0       	rjmp	.+372    	; 0x13f2 <Modbus_mster_transaction+0xc8e>
    127e:	89 2f       	mov	r24, r25
    1280:	99 27       	eor	r25, r25
    1282:	fe 01       	movw	r30, r28
    1284:	e0 0f       	add	r30, r16
    1286:	f1 1f       	adc	r31, r17
    1288:	20 81       	ld	r18, Z
    128a:	30 e0       	ldi	r19, 0x00	; 0
    128c:	82 17       	cp	r24, r18
    128e:	93 07       	cpc	r25, r19
    1290:	09 f0       	breq	.+2      	; 0x1294 <Modbus_mster_transaction+0xb30>
    1292:	bc c0       	rjmp	.+376    	; 0x140c <Modbus_mster_transaction+0xca8>
    1294:	bd c0       	rjmp	.+378    	; 0x1410 <Modbus_mster_transaction+0xcac>
    1296:	8b 81       	ldd	r24, Y+3	; 0x03
    1298:	86 95       	lsr	r24
    129a:	e1 f5       	brne	.+120    	; 0x1314 <Modbus_mster_transaction+0xbb0>
    129c:	5e c0       	rjmp	.+188    	; 0x135a <Modbus_mster_transaction+0xbf6>
    129e:	6b 81       	ldd	r22, Y+3	; 0x03
    12a0:	86 2f       	mov	r24, r22
    12a2:	86 95       	lsr	r24
    12a4:	09 f4       	brne	.+2      	; 0x12a8 <Modbus_mster_transaction+0xb44>
    12a6:	c2 c0       	rjmp	.+388    	; 0x142c <Modbus_mster_transaction+0xcc8>
    12a8:	fe 01       	movw	r30, r28
    12aa:	31 96       	adiw	r30, 0x01	; 1
    12ac:	40 e0       	ldi	r20, 0x00	; 0
    12ae:	50 e0       	ldi	r21, 0x00	; 0
    12b0:	90 e0       	ldi	r25, 0x00	; 0
    12b2:	90 34       	cpi	r25, 0x40	; 64
    12b4:	70 f4       	brcc	.+28     	; 0x12d2 <Modbus_mster_transaction+0xb6e>
    12b6:	24 81       	ldd	r18, Z+4	; 0x04
    12b8:	30 e0       	ldi	r19, 0x00	; 0
    12ba:	32 2f       	mov	r19, r18
    12bc:	22 27       	eor	r18, r18
    12be:	73 81       	ldd	r23, Z+3	; 0x03
    12c0:	27 2b       	or	r18, r23
    12c2:	da 01       	movw	r26, r20
    12c4:	aa 0f       	add	r26, r26
    12c6:	bb 1f       	adc	r27, r27
    12c8:	ae 59       	subi	r26, 0x9E	; 158
    12ca:	ba 4f       	sbci	r27, 0xFA	; 250
    12cc:	11 96       	adiw	r26, 0x01	; 1
    12ce:	3c 93       	st	X, r19
    12d0:	2e 93       	st	-X, r18
    12d2:	9f 5f       	subi	r25, 0xFF	; 255
    12d4:	4f 5f       	subi	r20, 0xFF	; 255
    12d6:	5f 4f       	sbci	r21, 0xFF	; 255
    12d8:	32 96       	adiw	r30, 0x02	; 2
    12da:	98 13       	cpse	r25, r24
    12dc:	ea cf       	rjmp	.-44     	; 0x12b2 <Modbus_mster_transaction+0xb4e>
    12de:	9f ef       	ldi	r25, 0xFF	; 255
    12e0:	98 0f       	add	r25, r24
    12e2:	90 93 db 04 	sts	0x04DB, r25	; 0x8004db <g_mod1_response_buffer_length>
    12e6:	60 ff       	sbrs	r22, 0
    12e8:	35 c0       	rjmp	.+106    	; 0x1354 <Modbus_mster_transaction+0xbf0>
    12ea:	80 34       	cpi	r24, 0x40	; 64
    12ec:	70 f4       	brcc	.+28     	; 0x130a <Modbus_mster_transaction+0xba6>
    12ee:	28 2f       	mov	r18, r24
    12f0:	30 e0       	ldi	r19, 0x00	; 0
    12f2:	22 0f       	add	r18, r18
    12f4:	33 1f       	adc	r19, r19
    12f6:	fe 01       	movw	r30, r28
    12f8:	e2 0f       	add	r30, r18
    12fa:	f3 1f       	adc	r31, r19
    12fc:	44 81       	ldd	r20, Z+4	; 0x04
    12fe:	50 e0       	ldi	r21, 0x00	; 0
    1300:	f9 01       	movw	r30, r18
    1302:	ee 59       	subi	r30, 0x9E	; 158
    1304:	fa 4f       	sbci	r31, 0xFA	; 250
    1306:	51 83       	std	Z+1, r21	; 0x01
    1308:	40 83       	st	Z, r20
    130a:	8f 5f       	subi	r24, 0xFF	; 255
    130c:	80 93 db 04 	sts	0x04DB, r24	; 0x8004db <g_mod1_response_buffer_length>
    1310:	80 e0       	ldi	r24, 0x00	; 0
    1312:	23 c0       	rjmp	.+70     	; 0x135a <Modbus_mster_transaction+0xbf6>
    1314:	fe 01       	movw	r30, r28
    1316:	31 96       	adiw	r30, 0x01	; 1
    1318:	40 e0       	ldi	r20, 0x00	; 0
    131a:	50 e0       	ldi	r21, 0x00	; 0
    131c:	90 e0       	ldi	r25, 0x00	; 0
    131e:	90 34       	cpi	r25, 0x40	; 64
    1320:	70 f4       	brcc	.+28     	; 0x133e <Modbus_mster_transaction+0xbda>
    1322:	23 81       	ldd	r18, Z+3	; 0x03
    1324:	30 e0       	ldi	r19, 0x00	; 0
    1326:	32 2f       	mov	r19, r18
    1328:	22 27       	eor	r18, r18
    132a:	64 81       	ldd	r22, Z+4	; 0x04
    132c:	26 2b       	or	r18, r22
    132e:	da 01       	movw	r26, r20
    1330:	aa 0f       	add	r26, r26
    1332:	bb 1f       	adc	r27, r27
    1334:	ae 59       	subi	r26, 0x9E	; 158
    1336:	ba 4f       	sbci	r27, 0xFA	; 250
    1338:	11 96       	adiw	r26, 0x01	; 1
    133a:	3c 93       	st	X, r19
    133c:	2e 93       	st	-X, r18
    133e:	9f 5f       	subi	r25, 0xFF	; 255
    1340:	4f 5f       	subi	r20, 0xFF	; 255
    1342:	5f 4f       	sbci	r21, 0xFF	; 255
    1344:	32 96       	adiw	r30, 0x02	; 2
    1346:	98 13       	cpse	r25, r24
    1348:	ea cf       	rjmp	.-44     	; 0x131e <Modbus_mster_transaction+0xbba>
    134a:	81 50       	subi	r24, 0x01	; 1
    134c:	80 93 db 04 	sts	0x04DB, r24	; 0x8004db <g_mod1_response_buffer_length>
    1350:	80 e0       	ldi	r24, 0x00	; 0
    1352:	03 c0       	rjmp	.+6      	; 0x135a <Modbus_mster_transaction+0xbf6>
    1354:	80 e0       	ldi	r24, 0x00	; 0
    1356:	01 c0       	rjmp	.+2      	; 0x135a <Modbus_mster_transaction+0xbf6>
    1358:	80 e0       	ldi	r24, 0x00	; 0
    135a:	10 92 dd 04 	sts	0x04DD, r1	; 0x8004dd <g_mod1_transmit_buffer_index>
    135e:	10 92 dc 04 	sts	0x04DC, r1	; 0x8004dc <g_mod1_response_buffer_index>
    1362:	7c c0       	rjmp	.+248    	; 0x145c <Modbus_mster_transaction+0xcf8>
    1364:	84 ee       	ldi	r24, 0xE4	; 228
    1366:	7a c0       	rjmp	.+244    	; 0x145c <Modbus_mster_transaction+0xcf8>
    1368:	03 e0       	ldi	r16, 0x03	; 3
    136a:	0e 94 d0 23 	call	0x47a0	; 0x47a0 <Get_millis>
    136e:	dc 01       	movw	r26, r24
    1370:	cb 01       	movw	r24, r22
    1372:	88 19       	sub	r24, r8
    1374:	99 09       	sbc	r25, r9
    1376:	aa 09       	sbc	r26, r10
    1378:	bb 09       	sbc	r27, r11
    137a:	89 3c       	cpi	r24, 0xC9	; 201
    137c:	91 05       	cpc	r25, r1
    137e:	a1 05       	cpc	r26, r1
    1380:	b1 05       	cpc	r27, r1
    1382:	08 f4       	brcc	.+2      	; 0x1386 <Modbus_mster_transaction+0xc22>
    1384:	f7 cb       	rjmp	.-2066   	; 0xb74 <Modbus_mster_transaction+0x410>
    1386:	50 cc       	rjmp	.-1888   	; 0xc28 <Modbus_mster_transaction+0x4c4>
    1388:	8f ef       	ldi	r24, 0xFF	; 255
    138a:	9f ef       	ldi	r25, 0xFF	; 255
    138c:	fe 01       	movw	r30, r28
    138e:	ee 0d       	add	r30, r14
    1390:	ff 1d       	adc	r31, r15
    1392:	21 81       	ldd	r18, Z+1	; 0x01
    1394:	30 e0       	ldi	r19, 0x00	; 0
    1396:	ac 01       	movw	r20, r24
    1398:	55 27       	eor	r21, r21
    139a:	42 17       	cp	r20, r18
    139c:	53 07       	cpc	r21, r19
    139e:	09 f4       	brne	.+2      	; 0x13a2 <Modbus_mster_transaction+0xc3e>
    13a0:	78 cc       	rjmp	.-1808   	; 0xc92 <Modbus_mster_transaction+0x52e>
    13a2:	83 ee       	ldi	r24, 0xE3	; 227
    13a4:	e5 cc       	rjmp	.-1590   	; 0xd70 <Modbus_mster_transaction+0x60c>
    13a6:	83 ee       	ldi	r24, 0xE3	; 227
    13a8:	e3 cc       	rjmp	.-1594   	; 0xd70 <Modbus_mster_transaction+0x60c>
    13aa:	8a 81       	ldd	r24, Y+2	; 0x02
    13ac:	85 30       	cpi	r24, 0x05	; 5
    13ae:	38 f4       	brcc	.+14     	; 0x13be <Modbus_mster_transaction+0xc5a>
    13b0:	83 30       	cpi	r24, 0x03	; 3
    13b2:	08 f0       	brcs	.+2      	; 0x13b6 <Modbus_mster_transaction+0xc52>
    13b4:	7a cc       	rjmp	.-1804   	; 0xcaa <Modbus_mster_transaction+0x546>
    13b6:	81 30       	cpi	r24, 0x01	; 1
    13b8:	08 f0       	brcs	.+2      	; 0x13bc <Modbus_mster_transaction+0xc58>
    13ba:	7c cc       	rjmp	.-1800   	; 0xcb4 <Modbus_mster_transaction+0x550>
    13bc:	d8 cc       	rjmp	.-1616   	; 0xd6e <Modbus_mster_transaction+0x60a>
    13be:	87 31       	cpi	r24, 0x17	; 23
    13c0:	09 f4       	brne	.+2      	; 0x13c4 <Modbus_mster_transaction+0xc60>
    13c2:	73 cc       	rjmp	.-1818   	; 0xcaa <Modbus_mster_transaction+0x546>
    13c4:	d4 cc       	rjmp	.-1624   	; 0xd6e <Modbus_mster_transaction+0x60a>
    13c6:	70 fd       	sbrc	r23, 0
    13c8:	9d cc       	rjmp	.-1734   	; 0xd04 <Modbus_mster_transaction+0x5a0>
    13ca:	80 e0       	ldi	r24, 0x00	; 0
    13cc:	d1 cc       	rjmp	.-1630   	; 0xd70 <Modbus_mster_transaction+0x60c>
    13ce:	03 e0       	ldi	r16, 0x03	; 3
    13d0:	0e 94 d0 23 	call	0x47a0	; 0x47a0 <Get_millis>
    13d4:	dc 01       	movw	r26, r24
    13d6:	cb 01       	movw	r24, r22
    13d8:	88 19       	sub	r24, r8
    13da:	99 09       	sbc	r25, r9
    13dc:	aa 09       	sbc	r26, r10
    13de:	bb 09       	sbc	r27, r11
    13e0:	89 3c       	cpi	r24, 0xC9	; 201
    13e2:	91 05       	cpc	r25, r1
    13e4:	a1 05       	cpc	r26, r1
    13e6:	b1 05       	cpc	r27, r1
    13e8:	08 f4       	brcc	.+2      	; 0x13ec <Modbus_mster_transaction+0xc88>
    13ea:	bd ce       	rjmp	.-646    	; 0x1166 <Modbus_mster_transaction+0xa02>
    13ec:	16 cf       	rjmp	.-468    	; 0x121a <Modbus_mster_transaction+0xab6>
    13ee:	8f ef       	ldi	r24, 0xFF	; 255
    13f0:	9f ef       	ldi	r25, 0xFF	; 255
    13f2:	fe 01       	movw	r30, r28
    13f4:	ee 0d       	add	r30, r14
    13f6:	ff 1d       	adc	r31, r15
    13f8:	21 81       	ldd	r18, Z+1	; 0x01
    13fa:	30 e0       	ldi	r19, 0x00	; 0
    13fc:	ac 01       	movw	r20, r24
    13fe:	55 27       	eor	r21, r21
    1400:	42 17       	cp	r20, r18
    1402:	53 07       	cpc	r21, r19
    1404:	09 f4       	brne	.+2      	; 0x1408 <Modbus_mster_transaction+0xca4>
    1406:	3b cf       	rjmp	.-394    	; 0x127e <Modbus_mster_transaction+0xb1a>
    1408:	83 ee       	ldi	r24, 0xE3	; 227
    140a:	a7 cf       	rjmp	.-178    	; 0x135a <Modbus_mster_transaction+0xbf6>
    140c:	83 ee       	ldi	r24, 0xE3	; 227
    140e:	a5 cf       	rjmp	.-182    	; 0x135a <Modbus_mster_transaction+0xbf6>
    1410:	8a 81       	ldd	r24, Y+2	; 0x02
    1412:	85 30       	cpi	r24, 0x05	; 5
    1414:	38 f4       	brcc	.+14     	; 0x1424 <Modbus_mster_transaction+0xcc0>
    1416:	83 30       	cpi	r24, 0x03	; 3
    1418:	08 f0       	brcs	.+2      	; 0x141c <Modbus_mster_transaction+0xcb8>
    141a:	3d cf       	rjmp	.-390    	; 0x1296 <Modbus_mster_transaction+0xb32>
    141c:	81 30       	cpi	r24, 0x01	; 1
    141e:	08 f0       	brcs	.+2      	; 0x1422 <Modbus_mster_transaction+0xcbe>
    1420:	3e cf       	rjmp	.-388    	; 0x129e <Modbus_mster_transaction+0xb3a>
    1422:	9a cf       	rjmp	.-204    	; 0x1358 <Modbus_mster_transaction+0xbf4>
    1424:	87 31       	cpi	r24, 0x17	; 23
    1426:	09 f4       	brne	.+2      	; 0x142a <Modbus_mster_transaction+0xcc6>
    1428:	36 cf       	rjmp	.-404    	; 0x1296 <Modbus_mster_transaction+0xb32>
    142a:	96 cf       	rjmp	.-212    	; 0x1358 <Modbus_mster_transaction+0xbf4>
    142c:	60 fd       	sbrc	r22, 0
    142e:	5f cf       	rjmp	.-322    	; 0x12ee <Modbus_mster_transaction+0xb8a>
    1430:	80 e0       	ldi	r24, 0x00	; 0
    1432:	93 cf       	rjmp	.-218    	; 0x135a <Modbus_mster_transaction+0xbf6>
    1434:	01 11       	cpse	r16, r1
    1436:	9e cb       	rjmp	.-2244   	; 0xb74 <Modbus_mster_transaction+0x410>
    1438:	80 e0       	ldi	r24, 0x00	; 0
    143a:	fd cb       	rjmp	.-2054   	; 0xc36 <Modbus_mster_transaction+0x4d2>
    143c:	01 11       	cpse	r16, r1
    143e:	93 ce       	rjmp	.-730    	; 0x1166 <Modbus_mster_transaction+0xa02>
    1440:	80 e0       	ldi	r24, 0x00	; 0
    1442:	f2 ce       	rjmp	.-540    	; 0x1228 <Modbus_mster_transaction+0xac4>
    1444:	80 ee       	ldi	r24, 0xE0	; 224
    1446:	94 cc       	rjmp	.-1752   	; 0xd70 <Modbus_mster_transaction+0x60c>
    1448:	81 ee       	ldi	r24, 0xE1	; 225
    144a:	92 cc       	rjmp	.-1756   	; 0xd70 <Modbus_mster_transaction+0x60c>
    144c:	82 ee       	ldi	r24, 0xE2	; 226
    144e:	90 cc       	rjmp	.-1760   	; 0xd70 <Modbus_mster_transaction+0x60c>
    1450:	80 ee       	ldi	r24, 0xE0	; 224
    1452:	83 cf       	rjmp	.-250    	; 0x135a <Modbus_mster_transaction+0xbf6>
    1454:	81 ee       	ldi	r24, 0xE1	; 225
    1456:	81 cf       	rjmp	.-254    	; 0x135a <Modbus_mster_transaction+0xbf6>
    1458:	82 ee       	ldi	r24, 0xE2	; 226
    145a:	7f cf       	rjmp	.-258    	; 0x135a <Modbus_mster_transaction+0xbf6>
    145c:	d3 95       	inc	r29
    145e:	0f b6       	in	r0, 0x3f	; 63
    1460:	f8 94       	cli
    1462:	de bf       	out	0x3e, r29	; 62
    1464:	0f be       	out	0x3f, r0	; 63
    1466:	cd bf       	out	0x3d, r28	; 61
    1468:	df 91       	pop	r29
    146a:	cf 91       	pop	r28
    146c:	1f 91       	pop	r17
    146e:	0f 91       	pop	r16
    1470:	ff 90       	pop	r15
    1472:	ef 90       	pop	r14
    1474:	df 90       	pop	r13
    1476:	bf 90       	pop	r11
    1478:	af 90       	pop	r10
    147a:	9f 90       	pop	r9
    147c:	8f 90       	pop	r8
    147e:	08 95       	ret

00001480 <Modbus_init>:
    1480:	fb 01       	movw	r30, r22
    1482:	81 11       	cpse	r24, r1
    1484:	8a c0       	rjmp	.+276    	; 0x159a <Modbus_init+0x11a>
    1486:	80 81       	ld	r24, Z
    1488:	80 93 00 07 	sts	0x0700, r24	; 0x800700 <g_mod0_slave>
    148c:	41 81       	ldd	r20, Z+1	; 0x01
    148e:	62 81       	ldd	r22, Z+2	; 0x02
    1490:	73 81       	ldd	r23, Z+3	; 0x03
    1492:	84 81       	ldd	r24, Z+4	; 0x04
    1494:	95 81       	ldd	r25, Z+5	; 0x05
    1496:	26 81       	ldd	r18, Z+6	; 0x06
    1498:	37 81       	ldd	r19, Z+7	; 0x07
    149a:	30 93 f2 05 	sts	0x05F2, r19	; 0x8005f2 <g_mod0_pre_transmission+0x1>
    149e:	20 93 f1 05 	sts	0x05F1, r18	; 0x8005f1 <g_mod0_pre_transmission>
    14a2:	20 85       	ldd	r18, Z+8	; 0x08
    14a4:	31 85       	ldd	r19, Z+9	; 0x09
    14a6:	30 93 f0 05 	sts	0x05F0, r19	; 0x8005f0 <g_mod0_post_transmission+0x1>
    14aa:	20 93 ef 05 	sts	0x05EF, r18	; 0x8005ef <g_mod0_post_transmission>
    14ae:	22 85       	ldd	r18, Z+10	; 0x0a
    14b0:	33 85       	ldd	r19, Z+11	; 0x0b
    14b2:	30 93 f4 05 	sts	0x05F4, r19	; 0x8005f4 <g_mod0_idle+0x1>
    14b6:	20 93 f3 05 	sts	0x05F3, r18	; 0x8005f3 <g_mod0_idle>
    14ba:	10 92 f6 05 	sts	0x05F6, r1	; 0x8005f6 <g_mod0_response_buffer_index>
    14be:	10 92 f5 05 	sts	0x05F5, r1	; 0x8005f5 <g_mod0_response_buffer_length>
    14c2:	41 30       	cpi	r20, 0x01	; 1
    14c4:	09 f5       	brne	.+66     	; 0x1508 <Modbus_init+0x88>
    14c6:	20 91 cc 04 	lds	r18, 0x04CC	; 0x8004cc <UART1_used.1996>
    14ca:	21 11       	cpse	r18, r1
    14cc:	cc c0       	rjmp	.+408    	; 0x1666 <Modbus_init+0x1e6>
    14ce:	21 e0       	ldi	r18, 0x01	; 1
    14d0:	20 93 cc 04 	sts	0x04CC, r18	; 0x8004cc <UART1_used.1996>
    14d4:	73 d7       	rcall	.+3814   	; 0x23bc <UART1_init>
    14d6:	8c e6       	ldi	r24, 0x6C	; 108
    14d8:	92 e1       	ldi	r25, 0x12	; 18
    14da:	90 93 e8 05 	sts	0x05E8, r25	; 0x8005e8 <g_mod0_Serial_available+0x1>
    14de:	80 93 e7 05 	sts	0x05E7, r24	; 0x8005e7 <g_mod0_Serial_available>
    14e2:	8a e7       	ldi	r24, 0x7A	; 122
    14e4:	92 e1       	ldi	r25, 0x12	; 18
    14e6:	90 93 ea 05 	sts	0x05EA, r25	; 0x8005ea <g_mod0_Serial_flush+0x1>
    14ea:	80 93 e9 05 	sts	0x05E9, r24	; 0x8005e9 <g_mod0_Serial_flush>
    14ee:	83 e3       	ldi	r24, 0x33	; 51
    14f0:	92 e1       	ldi	r25, 0x12	; 18
    14f2:	90 93 ec 05 	sts	0x05EC, r25	; 0x8005ec <g_mod0_Serial_getc+0x1>
    14f6:	80 93 eb 05 	sts	0x05EB, r24	; 0x8005eb <g_mod0_Serial_getc>
    14fa:	83 e5       	ldi	r24, 0x53	; 83
    14fc:	92 e1       	ldi	r25, 0x12	; 18
    14fe:	90 93 ee 05 	sts	0x05EE, r25	; 0x8005ee <g_mod0_Serial_putc+0x1>
    1502:	80 93 ed 05 	sts	0x05ED, r24	; 0x8005ed <g_mod0_Serial_putc>
    1506:	08 95       	ret
    1508:	42 30       	cpi	r20, 0x02	; 2
    150a:	11 f5       	brne	.+68     	; 0x1550 <Modbus_init+0xd0>
    150c:	20 91 cb 04 	lds	r18, 0x04CB	; 0x8004cb <UART2_used.1997>
    1510:	21 11       	cpse	r18, r1
    1512:	a9 c0       	rjmp	.+338    	; 0x1666 <Modbus_init+0x1e6>
    1514:	21 e0       	ldi	r18, 0x01	; 1
    1516:	20 93 cb 04 	sts	0x04CB, r18	; 0x8004cb <UART2_used.1997>
    151a:	0e 94 ed 12 	call	0x25da	; 0x25da <UART2_init>
    151e:	88 e7       	ldi	r24, 0x78	; 120
    1520:	93 e1       	ldi	r25, 0x13	; 19
    1522:	90 93 e8 05 	sts	0x05E8, r25	; 0x8005e8 <g_mod0_Serial_available+0x1>
    1526:	80 93 e7 05 	sts	0x05E7, r24	; 0x8005e7 <g_mod0_Serial_available>
    152a:	86 e8       	ldi	r24, 0x86	; 134
    152c:	93 e1       	ldi	r25, 0x13	; 19
    152e:	90 93 ea 05 	sts	0x05EA, r25	; 0x8005ea <g_mod0_Serial_flush+0x1>
    1532:	80 93 e9 05 	sts	0x05E9, r24	; 0x8005e9 <g_mod0_Serial_flush>
    1536:	82 e4       	ldi	r24, 0x42	; 66
    1538:	93 e1       	ldi	r25, 0x13	; 19
    153a:	90 93 ec 05 	sts	0x05EC, r25	; 0x8005ec <g_mod0_Serial_getc+0x1>
    153e:	80 93 eb 05 	sts	0x05EB, r24	; 0x8005eb <g_mod0_Serial_getc>
    1542:	8f e5       	ldi	r24, 0x5F	; 95
    1544:	93 e1       	ldi	r25, 0x13	; 19
    1546:	90 93 ee 05 	sts	0x05EE, r25	; 0x8005ee <g_mod0_Serial_putc+0x1>
    154a:	80 93 ed 05 	sts	0x05ED, r24	; 0x8005ed <g_mod0_Serial_putc>
    154e:	08 95       	ret
    1550:	43 30       	cpi	r20, 0x03	; 3
    1552:	09 f0       	breq	.+2      	; 0x1556 <Modbus_init+0xd6>
    1554:	88 c0       	rjmp	.+272    	; 0x1666 <Modbus_init+0x1e6>
    1556:	20 91 ca 04 	lds	r18, 0x04CA	; 0x8004ca <UART3_used.1998>
    155a:	21 11       	cpse	r18, r1
    155c:	84 c0       	rjmp	.+264    	; 0x1666 <Modbus_init+0x1e6>
    155e:	21 e0       	ldi	r18, 0x01	; 1
    1560:	20 93 ca 04 	sts	0x04CA, r18	; 0x8004ca <UART3_used.1998>
    1564:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <UART3_init>
    1568:	84 e8       	ldi	r24, 0x84	; 132
    156a:	94 e1       	ldi	r25, 0x14	; 20
    156c:	90 93 e8 05 	sts	0x05E8, r25	; 0x8005e8 <g_mod0_Serial_available+0x1>
    1570:	80 93 e7 05 	sts	0x05E7, r24	; 0x8005e7 <g_mod0_Serial_available>
    1574:	82 e9       	ldi	r24, 0x92	; 146
    1576:	94 e1       	ldi	r25, 0x14	; 20
    1578:	90 93 ea 05 	sts	0x05EA, r25	; 0x8005ea <g_mod0_Serial_flush+0x1>
    157c:	80 93 e9 05 	sts	0x05E9, r24	; 0x8005e9 <g_mod0_Serial_flush>
    1580:	8e e4       	ldi	r24, 0x4E	; 78
    1582:	94 e1       	ldi	r25, 0x14	; 20
    1584:	90 93 ec 05 	sts	0x05EC, r25	; 0x8005ec <g_mod0_Serial_getc+0x1>
    1588:	80 93 eb 05 	sts	0x05EB, r24	; 0x8005eb <g_mod0_Serial_getc>
    158c:	8b e6       	ldi	r24, 0x6B	; 107
    158e:	94 e1       	ldi	r25, 0x14	; 20
    1590:	90 93 ee 05 	sts	0x05EE, r25	; 0x8005ee <g_mod0_Serial_putc+0x1>
    1594:	80 93 ed 05 	sts	0x05ED, r24	; 0x8005ed <g_mod0_Serial_putc>
    1598:	08 95       	ret
    159a:	81 30       	cpi	r24, 0x01	; 1
    159c:	09 f0       	breq	.+2      	; 0x15a0 <Modbus_init+0x120>
    159e:	63 c0       	rjmp	.+198    	; 0x1666 <Modbus_init+0x1e6>
    15a0:	80 81       	ld	r24, Z
    15a2:	80 93 e6 05 	sts	0x05E6, r24	; 0x8005e6 <g_mod1_slave>
    15a6:	41 81       	ldd	r20, Z+1	; 0x01
    15a8:	62 81       	ldd	r22, Z+2	; 0x02
    15aa:	73 81       	ldd	r23, Z+3	; 0x03
    15ac:	84 81       	ldd	r24, Z+4	; 0x04
    15ae:	95 81       	ldd	r25, Z+5	; 0x05
    15b0:	26 81       	ldd	r18, Z+6	; 0x06
    15b2:	37 81       	ldd	r19, Z+7	; 0x07
    15b4:	30 93 d8 04 	sts	0x04D8, r19	; 0x8004d8 <g_mod1_pre_transmission+0x1>
    15b8:	20 93 d7 04 	sts	0x04D7, r18	; 0x8004d7 <g_mod1_pre_transmission>
    15bc:	20 85       	ldd	r18, Z+8	; 0x08
    15be:	31 85       	ldd	r19, Z+9	; 0x09
    15c0:	30 93 d6 04 	sts	0x04D6, r19	; 0x8004d6 <g_mod1_post_transmission+0x1>
    15c4:	20 93 d5 04 	sts	0x04D5, r18	; 0x8004d5 <g_mod1_post_transmission>
    15c8:	22 85       	ldd	r18, Z+10	; 0x0a
    15ca:	33 85       	ldd	r19, Z+11	; 0x0b
    15cc:	30 93 da 04 	sts	0x04DA, r19	; 0x8004da <g_mod1_idle+0x1>
    15d0:	20 93 d9 04 	sts	0x04D9, r18	; 0x8004d9 <g_mod1_idle>
    15d4:	10 92 dc 04 	sts	0x04DC, r1	; 0x8004dc <g_mod1_response_buffer_index>
    15d8:	10 92 db 04 	sts	0x04DB, r1	; 0x8004db <g_mod1_response_buffer_length>
    15dc:	41 30       	cpi	r20, 0x01	; 1
    15de:	09 f5       	brne	.+66     	; 0x1622 <Modbus_init+0x1a2>
    15e0:	20 91 cc 04 	lds	r18, 0x04CC	; 0x8004cc <UART1_used.1996>
    15e4:	21 11       	cpse	r18, r1
    15e6:	3f c0       	rjmp	.+126    	; 0x1666 <Modbus_init+0x1e6>
    15e8:	21 e0       	ldi	r18, 0x01	; 1
    15ea:	20 93 cc 04 	sts	0x04CC, r18	; 0x8004cc <UART1_used.1996>
    15ee:	e6 d6       	rcall	.+3532   	; 0x23bc <UART1_init>
    15f0:	8c e6       	ldi	r24, 0x6C	; 108
    15f2:	92 e1       	ldi	r25, 0x12	; 18
    15f4:	90 93 d0 04 	sts	0x04D0, r25	; 0x8004d0 <g_mod1_Serial_available+0x1>
    15f8:	80 93 cf 04 	sts	0x04CF, r24	; 0x8004cf <g_mod1_Serial_available>
    15fc:	8a e7       	ldi	r24, 0x7A	; 122
    15fe:	92 e1       	ldi	r25, 0x12	; 18
    1600:	90 93 ce 04 	sts	0x04CE, r25	; 0x8004ce <g_mod1_Serial_flush+0x1>
    1604:	80 93 cd 04 	sts	0x04CD, r24	; 0x8004cd <g_mod1_Serial_flush>
    1608:	83 e3       	ldi	r24, 0x33	; 51
    160a:	92 e1       	ldi	r25, 0x12	; 18
    160c:	90 93 d2 04 	sts	0x04D2, r25	; 0x8004d2 <g_mod1_Serial_getc+0x1>
    1610:	80 93 d1 04 	sts	0x04D1, r24	; 0x8004d1 <g_mod1_Serial_getc>
    1614:	83 e5       	ldi	r24, 0x53	; 83
    1616:	92 e1       	ldi	r25, 0x12	; 18
    1618:	90 93 d4 04 	sts	0x04D4, r25	; 0x8004d4 <g_mod1_Serial_putc+0x1>
    161c:	80 93 d3 04 	sts	0x04D3, r24	; 0x8004d3 <g_mod1_Serial_putc>
    1620:	08 95       	ret
    1622:	42 30       	cpi	r20, 0x02	; 2
    1624:	01 f5       	brne	.+64     	; 0x1666 <Modbus_init+0x1e6>
    1626:	20 91 cb 04 	lds	r18, 0x04CB	; 0x8004cb <UART2_used.1997>
    162a:	21 11       	cpse	r18, r1
    162c:	1c c0       	rjmp	.+56     	; 0x1666 <Modbus_init+0x1e6>
    162e:	21 e0       	ldi	r18, 0x01	; 1
    1630:	20 93 cb 04 	sts	0x04CB, r18	; 0x8004cb <UART2_used.1997>
    1634:	d2 d7       	rcall	.+4004   	; 0x25da <UART2_init>
    1636:	88 e7       	ldi	r24, 0x78	; 120
    1638:	93 e1       	ldi	r25, 0x13	; 19
    163a:	90 93 d0 04 	sts	0x04D0, r25	; 0x8004d0 <g_mod1_Serial_available+0x1>
    163e:	80 93 cf 04 	sts	0x04CF, r24	; 0x8004cf <g_mod1_Serial_available>
    1642:	86 e8       	ldi	r24, 0x86	; 134
    1644:	93 e1       	ldi	r25, 0x13	; 19
    1646:	90 93 ce 04 	sts	0x04CE, r25	; 0x8004ce <g_mod1_Serial_flush+0x1>
    164a:	80 93 cd 04 	sts	0x04CD, r24	; 0x8004cd <g_mod1_Serial_flush>
    164e:	82 e4       	ldi	r24, 0x42	; 66
    1650:	93 e1       	ldi	r25, 0x13	; 19
    1652:	90 93 d2 04 	sts	0x04D2, r25	; 0x8004d2 <g_mod1_Serial_getc+0x1>
    1656:	80 93 d1 04 	sts	0x04D1, r24	; 0x8004d1 <g_mod1_Serial_getc>
    165a:	8f e5       	ldi	r24, 0x5F	; 95
    165c:	93 e1       	ldi	r25, 0x13	; 19
    165e:	90 93 d4 04 	sts	0x04D4, r25	; 0x8004d4 <g_mod1_Serial_putc+0x1>
    1662:	80 93 d3 04 	sts	0x04D3, r24	; 0x8004d3 <g_mod1_Serial_putc>
    1666:	08 95       	ret

00001668 <Modbus_Get_response_buffer>:
    1668:	81 11       	cpse	r24, r1
    166a:	0b c0       	rjmp	.+22     	; 0x1682 <Modbus_Get_response_buffer+0x1a>
    166c:	60 34       	cpi	r22, 0x40	; 64
    166e:	b0 f4       	brcc	.+44     	; 0x169c <Modbus_Get_response_buffer+0x34>
    1670:	e6 2f       	mov	r30, r22
    1672:	f0 e0       	ldi	r31, 0x00	; 0
    1674:	ee 0f       	add	r30, r30
    1676:	ff 1f       	adc	r31, r31
    1678:	e4 58       	subi	r30, 0x84	; 132
    167a:	f9 4f       	sbci	r31, 0xF9	; 249
    167c:	80 81       	ld	r24, Z
    167e:	91 81       	ldd	r25, Z+1	; 0x01
    1680:	08 95       	ret
    1682:	81 30       	cpi	r24, 0x01	; 1
    1684:	71 f4       	brne	.+28     	; 0x16a2 <Modbus_Get_response_buffer+0x3a>
    1686:	60 34       	cpi	r22, 0x40	; 64
    1688:	78 f4       	brcc	.+30     	; 0x16a8 <Modbus_Get_response_buffer+0x40>
    168a:	e6 2f       	mov	r30, r22
    168c:	f0 e0       	ldi	r31, 0x00	; 0
    168e:	ee 0f       	add	r30, r30
    1690:	ff 1f       	adc	r31, r31
    1692:	ee 59       	subi	r30, 0x9E	; 158
    1694:	fa 4f       	sbci	r31, 0xFA	; 250
    1696:	80 81       	ld	r24, Z
    1698:	91 81       	ldd	r25, Z+1	; 0x01
    169a:	08 95       	ret
    169c:	8f ef       	ldi	r24, 0xFF	; 255
    169e:	9f ef       	ldi	r25, 0xFF	; 255
    16a0:	08 95       	ret
    16a2:	8f ef       	ldi	r24, 0xFF	; 255
    16a4:	9f ef       	ldi	r25, 0xFF	; 255
    16a6:	08 95       	ret
    16a8:	8f ef       	ldi	r24, 0xFF	; 255
    16aa:	9f ef       	ldi	r25, 0xFF	; 255
    16ac:	08 95       	ret

000016ae <Modbus_Set_transmit_buffer>:
    16ae:	81 11       	cpse	r24, r1
    16b0:	0b c0       	rjmp	.+22     	; 0x16c8 <Modbus_Set_transmit_buffer+0x1a>
    16b2:	60 34       	cpi	r22, 0x40	; 64
    16b4:	b8 f4       	brcc	.+46     	; 0x16e4 <Modbus_Set_transmit_buffer+0x36>
    16b6:	e6 2f       	mov	r30, r22
    16b8:	f0 e0       	ldi	r31, 0x00	; 0
    16ba:	ee 0f       	add	r30, r30
    16bc:	ff 1f       	adc	r31, r31
    16be:	e8 50       	subi	r30, 0x08	; 8
    16c0:	fa 4f       	sbci	r31, 0xFA	; 250
    16c2:	51 83       	std	Z+1, r21	; 0x01
    16c4:	40 83       	st	Z, r20
    16c6:	08 95       	ret
    16c8:	81 30       	cpi	r24, 0x01	; 1
    16ca:	71 f4       	brne	.+28     	; 0x16e8 <Modbus_Set_transmit_buffer+0x3a>
    16cc:	60 34       	cpi	r22, 0x40	; 64
    16ce:	70 f4       	brcc	.+28     	; 0x16ec <Modbus_Set_transmit_buffer+0x3e>
    16d0:	e6 2f       	mov	r30, r22
    16d2:	f0 e0       	ldi	r31, 0x00	; 0
    16d4:	ee 0f       	add	r30, r30
    16d6:	ff 1f       	adc	r31, r31
    16d8:	e2 52       	subi	r30, 0x22	; 34
    16da:	fb 4f       	sbci	r31, 0xFB	; 251
    16dc:	51 83       	std	Z+1, r21	; 0x01
    16de:	40 83       	st	Z, r20
    16e0:	80 e0       	ldi	r24, 0x00	; 0
    16e2:	08 95       	ret
    16e4:	82 e0       	ldi	r24, 0x02	; 2
    16e6:	08 95       	ret
    16e8:	82 e0       	ldi	r24, 0x02	; 2
    16ea:	08 95       	ret
    16ec:	82 e0       	ldi	r24, 0x02	; 2
    16ee:	08 95       	ret

000016f0 <Modbus_Read_holding_registers>:
    16f0:	81 11       	cpse	r24, r1
    16f2:	0b c0       	rjmp	.+22     	; 0x170a <Modbus_Read_holding_registers+0x1a>
    16f4:	70 93 ff 06 	sts	0x06FF, r23	; 0x8006ff <g_mod0_read_address+0x1>
    16f8:	60 93 fe 06 	sts	0x06FE, r22	; 0x8006fe <g_mod0_read_address>
    16fc:	50 93 fd 06 	sts	0x06FD, r21	; 0x8006fd <g_mod0_read_qty+0x1>
    1700:	40 93 fc 06 	sts	0x06FC, r20	; 0x8006fc <g_mod0_read_qty>
    1704:	63 e0       	ldi	r22, 0x03	; 3
    1706:	2e c8       	rjmp	.-4004   	; 0x764 <Modbus_mster_transaction>
    1708:	08 95       	ret
    170a:	81 30       	cpi	r24, 0x01	; 1
    170c:	59 f4       	brne	.+22     	; 0x1724 <Modbus_Read_holding_registers+0x34>
    170e:	70 93 e5 05 	sts	0x05E5, r23	; 0x8005e5 <g_mod1_read_address+0x1>
    1712:	60 93 e4 05 	sts	0x05E4, r22	; 0x8005e4 <g_mod1_read_address>
    1716:	50 93 e3 05 	sts	0x05E3, r21	; 0x8005e3 <g_mod1_read_qty+0x1>
    171a:	40 93 e2 05 	sts	0x05E2, r20	; 0x8005e2 <g_mod1_read_qty>
    171e:	63 e0       	ldi	r22, 0x03	; 3
    1720:	21 c8       	rjmp	.-4030   	; 0x764 <Modbus_mster_transaction>
    1722:	08 95       	ret
    1724:	84 ee       	ldi	r24, 0xE4	; 228
    1726:	08 95       	ret

00001728 <Modbus_Write_single_register>:
    1728:	81 11       	cpse	r24, r1
    172a:	0f c0       	rjmp	.+30     	; 0x174a <Modbus_Write_single_register+0x22>
    172c:	70 93 7b 06 	sts	0x067B, r23	; 0x80067b <g_mod0_write_address+0x1>
    1730:	60 93 7a 06 	sts	0x067A, r22	; 0x80067a <g_mod0_write_address>
    1734:	10 92 79 06 	sts	0x0679, r1	; 0x800679 <g_mod0_write_qty+0x1>
    1738:	10 92 78 06 	sts	0x0678, r1	; 0x800678 <g_mod0_write_qty>
    173c:	50 93 f9 05 	sts	0x05F9, r21	; 0x8005f9 <g_mod0_transmit_buffer+0x1>
    1740:	40 93 f8 05 	sts	0x05F8, r20	; 0x8005f8 <g_mod0_transmit_buffer>
    1744:	66 e0       	ldi	r22, 0x06	; 6
    1746:	0e c8       	rjmp	.-4068   	; 0x764 <Modbus_mster_transaction>
    1748:	08 95       	ret
    174a:	81 30       	cpi	r24, 0x01	; 1
    174c:	81 f4       	brne	.+32     	; 0x176e <Modbus_Write_single_register+0x46>
    174e:	70 93 61 05 	sts	0x0561, r23	; 0x800561 <g_mod1_write_address+0x1>
    1752:	60 93 60 05 	sts	0x0560, r22	; 0x800560 <g_mod1_write_address>
    1756:	10 92 5f 05 	sts	0x055F, r1	; 0x80055f <g_mod1_write_qty+0x1>
    175a:	10 92 5e 05 	sts	0x055E, r1	; 0x80055e <g_mod1_write_qty>
    175e:	50 93 df 04 	sts	0x04DF, r21	; 0x8004df <g_mod1_transmit_buffer+0x1>
    1762:	40 93 de 04 	sts	0x04DE, r20	; 0x8004de <g_mod1_transmit_buffer>
    1766:	66 e0       	ldi	r22, 0x06	; 6
    1768:	0c 94 b2 03 	jmp	0x764	; 0x764 <Modbus_mster_transaction>
    176c:	08 95       	ret
    176e:	84 ee       	ldi	r24, 0xE4	; 228
    1770:	08 95       	ret

00001772 <Modbus_Our_write_multiple_coils>:

/** Our write multiple coils  **/
uint8_t Modbus_Our_write_multiple_coils(uint8_t device, uint16_t u16WriteAddress, uint16_t u16BitQty)
{
	if(DEVICE_0 == device){
    1772:	81 11       	cpse	r24, r1
    1774:	0c c0       	rjmp	.+24     	; 0x178e <Modbus_Our_write_multiple_coils+0x1c>
		g_mod0_write_address = u16WriteAddress;
    1776:	70 93 7b 06 	sts	0x067B, r23	; 0x80067b <g_mod0_write_address+0x1>
    177a:	60 93 7a 06 	sts	0x067A, r22	; 0x80067a <g_mod0_write_address>
		g_mod0_write_qty = u16BitQty;
    177e:	50 93 79 06 	sts	0x0679, r21	; 0x800679 <g_mod0_write_qty+0x1>
    1782:	40 93 78 06 	sts	0x0678, r20	; 0x800678 <g_mod0_write_qty>
		return Modbus_mster_transaction(device, OUR_WRITE_MULTIPLE_COILS);
    1786:	6f ef       	ldi	r22, 0xFF	; 255
    1788:	0c 94 b2 03 	jmp	0x764	; 0x764 <Modbus_mster_transaction>
    178c:	08 95       	ret

	}
	else if(DEVICE_1 == device){
    178e:	81 30       	cpi	r24, 0x01	; 1
    1790:	61 f4       	brne	.+24     	; 0x17aa <Modbus_Our_write_multiple_coils+0x38>
		g_mod1_write_address = u16WriteAddress;
    1792:	70 93 61 05 	sts	0x0561, r23	; 0x800561 <g_mod1_write_address+0x1>
    1796:	60 93 60 05 	sts	0x0560, r22	; 0x800560 <g_mod1_write_address>
		g_mod1_write_qty = u16BitQty;
    179a:	50 93 5f 05 	sts	0x055F, r21	; 0x80055f <g_mod1_write_qty+0x1>
    179e:	40 93 5e 05 	sts	0x055E, r20	; 0x80055e <g_mod1_write_qty>
		return Modbus_mster_transaction(device, OUR_WRITE_MULTIPLE_COILS);
    17a2:	6f ef       	ldi	r22, 0xFF	; 255
    17a4:	0c 94 b2 03 	jmp	0x764	; 0x764 <Modbus_mster_transaction>
    17a8:	08 95       	ret
	}
	return INVALID_DEVICE; //error
    17aa:	84 ee       	ldi	r24, 0xE4	; 228
}
    17ac:	08 95       	ret

000017ae <temp_init>:

void temp_init(uint8_t channal)
{
	// initialize the ADC module in order to be able
	// to get reading from the sensor.
	ADC_init(channal);
    17ae:	6d c1       	rjmp	.+730    	; 0x1a8a <ADC_init>
    17b0:	08 95       	ret

000017b2 <temp_read>:
}

uint16_t temp_read(void)
{
    17b2:	cf 92       	push	r12
    17b4:	df 92       	push	r13
    17b6:	ef 92       	push	r14
    17b8:	ff 92       	push	r15
    17ba:	cf 93       	push	r28
    17bc:	cf e0       	ldi	r28, 0x0F	; 15
	// this function returns the temperature sensor reading
	double Temp ,  vout, rt, a = 0.0039083 , r0 =100, y, b = -0.000000577,x ;
	// sum of samples taken
	double sum = 0.0;
    17be:	c1 2c       	mov	r12, r1
    17c0:	d1 2c       	mov	r13, r1
    17c2:	76 01       	movw	r14, r12
	unsigned char sample_count = 0;

    // read 30 values of ADC and take their average.
 	while (sample_count < 15)
	{
	      uint16_t xx  = ADC_read();
    17c4:	84 d1       	rcall	.+776    	; 0x1ace <ADC_read>
	      sum += xx;
    17c6:	bc 01       	movw	r22, r24
    17c8:	80 e0       	ldi	r24, 0x00	; 0
    17ca:	90 e0       	ldi	r25, 0x00	; 0
    17cc:	0e 94 fd 24 	call	0x49fa	; 0x49fa <__floatunsisf>
    17d0:	9b 01       	movw	r18, r22
    17d2:	ac 01       	movw	r20, r24
    17d4:	c7 01       	movw	r24, r14
    17d6:	b6 01       	movw	r22, r12
    17d8:	0e 94 01 24 	call	0x4802	; 0x4802 <__addsf3>
    17dc:	6b 01       	movw	r12, r22
    17de:	7c 01       	movw	r14, r24
	      sample_count++;
		  vTaskDelay(1/portTICK_PERIOD_MS);
    17e0:	80 e0       	ldi	r24, 0x00	; 0
    17e2:	90 e0       	ldi	r25, 0x00	; 0
    17e4:	0e 94 eb 1d 	call	0x3bd6	; 0x3bd6 <vTaskDelay>
    17e8:	c1 50       	subi	r28, 0x01	; 1
	double sum = 0.0;
	// current sample number
	unsigned char sample_count = 0;

    // read 30 values of ADC and take their average.
 	while (sample_count < 15)
    17ea:	61 f7       	brne	.-40     	; 0x17c4 <temp_read+0x12>
	      sample_count++;
		  vTaskDelay(1/portTICK_PERIOD_MS);
	}
     
    // the average of ADC readings
	 vout = (double)sum / (double)15;
    17ec:	20 e0       	ldi	r18, 0x00	; 0
    17ee:	30 e0       	ldi	r19, 0x00	; 0
    17f0:	40 e7       	ldi	r20, 0x70	; 112
    17f2:	51 e4       	ldi	r21, 0x41	; 65
    17f4:	c7 01       	movw	r24, r14
    17f6:	b6 01       	movw	r22, r12
    17f8:	0e 94 69 24 	call	0x48d2	; 0x48d2 <__divsf3>
	 //UART0_puts("volt :");

     
	 vout  = vout * 2.484;
    17fc:	2b ed       	ldi	r18, 0xDB	; 219
    17fe:	39 ef       	ldi	r19, 0xF9	; 249
    1800:	4e e1       	ldi	r20, 0x1E	; 30
    1802:	50 e4       	ldi	r21, 0x40	; 64
    1804:	0e 94 b3 25 	call	0x4b66	; 0x4b66 <__mulsf3>

	 // some math equations to Get The temperature value from ADC reading.
	 Temp = (-1 * a) ;
	 x =  pow(a,2);
	 y = 4  * b * (1 - (rt/r0));
	 x = x - y;
    1808:	20 e0       	ldi	r18, 0x00	; 0
    180a:	30 e0       	ldi	r19, 0x00	; 0
    180c:	40 e8       	ldi	r20, 0x80	; 128
    180e:	5a e3       	ldi	r21, 0x3A	; 58
    1810:	0e 94 b3 25 	call	0x4b66	; 0x4b66 <__mulsf3>
    1814:	20 e0       	ldi	r18, 0x00	; 0
    1816:	30 e0       	ldi	r19, 0x00	; 0
    1818:	4a e7       	ldi	r20, 0x7A	; 122
    181a:	54 e4       	ldi	r21, 0x44	; 68
    181c:	0e 94 b3 25 	call	0x4b66	; 0x4b66 <__mulsf3>
    1820:	23 e0       	ldi	r18, 0x03	; 3
    1822:	39 e0       	ldi	r19, 0x09	; 9
    1824:	42 ef       	ldi	r20, 0xF2	; 242
    1826:	50 e4       	ldi	r21, 0x40	; 64
    1828:	0e 94 69 24 	call	0x48d2	; 0x48d2 <__divsf3>
    182c:	20 e0       	ldi	r18, 0x00	; 0
    182e:	30 e0       	ldi	r19, 0x00	; 0
    1830:	48 ec       	ldi	r20, 0xC8	; 200
    1832:	52 e4       	ldi	r21, 0x42	; 66
    1834:	0e 94 69 24 	call	0x48d2	; 0x48d2 <__divsf3>
    1838:	9b 01       	movw	r18, r22
    183a:	ac 01       	movw	r20, r24
    183c:	60 e0       	ldi	r22, 0x00	; 0
    183e:	70 e0       	ldi	r23, 0x00	; 0
    1840:	80 e8       	ldi	r24, 0x80	; 128
    1842:	9f e3       	ldi	r25, 0x3F	; 63
    1844:	0e 94 00 24 	call	0x4800	; 0x4800 <__subsf3>
    1848:	23 e2       	ldi	r18, 0x23	; 35
    184a:	33 ee       	ldi	r19, 0xE3	; 227
    184c:	4a e1       	ldi	r20, 0x1A	; 26
    184e:	56 eb       	ldi	r21, 0xB6	; 182
    1850:	0e 94 b3 25 	call	0x4b66	; 0x4b66 <__mulsf3>
    1854:	9b 01       	movw	r18, r22
    1856:	ac 01       	movw	r20, r24
    1858:	66 e6       	ldi	r22, 0x66	; 102
    185a:	72 e2       	ldi	r23, 0x22	; 34
    185c:	80 e8       	ldi	r24, 0x80	; 128
    185e:	97 e3       	ldi	r25, 0x37	; 55
    1860:	0e 94 00 24 	call	0x4800	; 0x4800 <__subsf3>
	 x = pow(x,0.5);
    1864:	20 e0       	ldi	r18, 0x00	; 0
    1866:	30 e0       	ldi	r19, 0x00	; 0
    1868:	40 e0       	ldi	r20, 0x00	; 0
    186a:	5f e3       	ldi	r21, 0x3F	; 63
    186c:	0e 94 16 26 	call	0x4c2c	; 0x4c2c <pow>
	 Temp = Temp + x ;
    1870:	22 e3       	ldi	r18, 0x32	; 50
    1872:	31 e1       	ldi	r19, 0x11	; 17
    1874:	40 e8       	ldi	r20, 0x80	; 128
    1876:	5b e3       	ldi	r21, 0x3B	; 59
    1878:	0e 94 00 24 	call	0x4800	; 0x4800 <__subsf3>
	 Temp /= (2 * b);

	 return round(Temp);
    187c:	23 e2       	ldi	r18, 0x23	; 35
    187e:	33 ee       	ldi	r19, 0xE3	; 227
    1880:	4a e9       	ldi	r20, 0x9A	; 154
    1882:	55 eb       	ldi	r21, 0xB5	; 181
    1884:	0e 94 69 24 	call	0x48d2	; 0x48d2 <__divsf3>
    1888:	0e 94 62 26 	call	0x4cc4	; 0x4cc4 <round>
    188c:	0e 94 d1 24 	call	0x49a2	; 0x49a2 <__fixunssfsi>
}
    1890:	cb 01       	movw	r24, r22
    1892:	cf 91       	pop	r28
    1894:	ff 90       	pop	r15
    1896:	ef 90       	pop	r14
    1898:	df 90       	pop	r13
    189a:	cf 90       	pop	r12
    189c:	08 95       	ret

0000189e <Temperature_over_temp>:
	UART0_puts("Level_sensor_error_callback \n");
}

/******* Over Temp functions for error callbacks **********************************************/
static void Temperature_over_temp(void){
	UART0_puts("Temperature_over_temp \n");
    189e:	87 e7       	ldi	r24, 0x77	; 119
    18a0:	92 e0       	ldi	r25, 0x02	; 2
    18a2:	10 c5       	rjmp	.+2592   	; 0x22c4 <UART0_puts>
    18a4:	08 95       	ret

000018a6 <Level_sensor_error_callback>:
	
}

/******* Level sensors functions for error callbacks **********************************************/
static void Level_sensor_error_callback(void){
	UART0_puts("Level_sensor_error_callback \n");
    18a6:	8f e8       	ldi	r24, 0x8F	; 143
    18a8:	92 e0       	ldi	r25, 0x02	; 2
    18aa:	0c c5       	rjmp	.+2584   	; 0x22c4 <UART0_puts>
    18ac:	08 95       	ret

000018ae <LCD_writeTimeout>:
static void LCD_readTimeout(void){
	UART0_puts("LCD_READ_TIMEOUT ---------------------------- \n");
}

static void LCD_writeTimeout(void){
	UART0_puts("LCD_WRITE_TIMEOUT ++++++++++++++++++++++++++++ \n");
    18ae:	8d ea       	ldi	r24, 0xAD	; 173
    18b0:	92 e0       	ldi	r25, 0x02	; 2
    18b2:	08 c5       	rjmp	.+2576   	; 0x22c4 <UART0_puts>
    18b4:	08 95       	ret

000018b6 <LCD_readTimeout>:

//debug
#include "MCAL/UART.h"
/******* LCD callback functions for errors callbacks ***********************************************/
static void LCD_readTimeout(void){
	UART0_puts("LCD_READ_TIMEOUT ---------------------------- \n");
    18b6:	8e ed       	ldi	r24, 0xDE	; 222
    18b8:	92 e0       	ldi	r25, 0x02	; 2
    18ba:	04 c5       	rjmp	.+2568   	; 0x22c4 <UART0_puts>
    18bc:	08 95       	ret

000018be <Service_error_init>:
	
}


void Service_error_init(void){
		LCD_main_err_Init(LCD_readTimeout,LCD_writeTimeout);
    18be:	67 e5       	ldi	r22, 0x57	; 87
    18c0:	7c e0       	ldi	r23, 0x0C	; 12
    18c2:	8b e5       	ldi	r24, 0x5B	; 91
    18c4:	9c e0       	ldi	r25, 0x0C	; 12
    18c6:	0e 94 95 22 	call	0x452a	; 0x452a <LCD_main_err_Init>
		Level_main_err_init(Level_sensor_error_callback);
    18ca:	83 e5       	ldi	r24, 0x53	; 83
    18cc:	9c e0       	ldi	r25, 0x0C	; 12
    18ce:	0e 94 9e 22 	call	0x453c	; 0x453c <Level_main_err_init>
		Temp_main_err_init(Temperature_over_temp);
    18d2:	8f e4       	ldi	r24, 0x4F	; 79
    18d4:	9c e0       	ldi	r25, 0x0C	; 12
    18d6:	0c 94 6d 23 	jmp	0x46da	; 0x46da <Temp_main_err_init>
    18da:	08 95       	ret

000018dc <vTask5>:
static void vTask5(void* pvParameters)
{
	// watch dog pin .
	while(1)
	{
		 Watch_dog_change_state(HIGH);
    18dc:	81 e0       	ldi	r24, 0x01	; 1
    18de:	a8 d1       	rcall	.+848    	; 0x1c30 <Watch_dog_change_state>
		 vTaskDelay(500/portTICK_PERIOD_MS);
    18e0:	8f e1       	ldi	r24, 0x1F	; 31
    18e2:	90 e0       	ldi	r25, 0x00	; 0
    18e4:	0e 94 eb 1d 	call	0x3bd6	; 0x3bd6 <vTaskDelay>
		 Watch_dog_change_state(LOW);
    18e8:	80 e0       	ldi	r24, 0x00	; 0
    18ea:	a2 d1       	rcall	.+836    	; 0x1c30 <Watch_dog_change_state>
		 vTaskDelay(500/portTICK_PERIOD_MS);
    18ec:	8f e1       	ldi	r24, 0x1F	; 31
    18ee:	90 e0       	ldi	r25, 0x00	; 0
    18f0:	0e 94 eb 1d 	call	0x3bd6	; 0x3bd6 <vTaskDelay>
    18f4:	f3 cf       	rjmp	.-26     	; 0x18dc <vTask5>

000018f6 <vTask4>:
	Temp_main(&x);
}

static void vTask4(void* pvParameters)
{
	UART0_puts("Enter Task4\n");
    18f6:	8e e0       	ldi	r24, 0x0E	; 14
    18f8:	93 e0       	ldi	r25, 0x03	; 3
    18fa:	e4 d4       	rcall	.+2504   	; 0x22c4 <UART0_puts>
		while (1)
		{
			
			//UART0_puts("vTask4 Exist\n");
			//_delay_ms(1000);
			Tank_out_operation(2);
    18fc:	82 e0       	ldi	r24, 0x02	; 2
    18fe:	90 e0       	ldi	r25, 0x00	; 0
    1900:	0e 94 49 23 	call	0x4692	; 0x4692 <Tank_out_operation>
			vTaskDelay(500/portTICK_PERIOD_MS);
    1904:	8f e1       	ldi	r24, 0x1F	; 31
    1906:	90 e0       	ldi	r25, 0x00	; 0
    1908:	0e 94 eb 1d 	call	0x3bd6	; 0x3bd6 <vTaskDelay>
    190c:	f7 cf       	rjmp	.-18     	; 0x18fc <vTask4+0x6>

0000190e <vTask3>:
	}
}


static void vTask3(void* pvParameters)
{
    190e:	cf 93       	push	r28
    1910:	df 93       	push	r29
    1912:	1f 92       	push	r1
    1914:	cd b7       	in	r28, 0x3d	; 61
    1916:	de b7       	in	r29, 0x3e	; 62
	char x=0;
    1918:	19 82       	std	Y+1, r1	; 0x01
	UART0_puts("LEVEL Task3 \n");
    191a:	8b e1       	ldi	r24, 0x1B	; 27
    191c:	93 e0       	ldi	r25, 0x03	; 3
    191e:	d2 d4       	rcall	.+2468   	; 0x22c4 <UART0_puts>
	Temp_main(&x);
    1920:	ce 01       	movw	r24, r28
    1922:	01 96       	adiw	r24, 0x01	; 1
    1924:	0e 94 72 23 	call	0x46e4	; 0x46e4 <Temp_main>
}
    1928:	0f 90       	pop	r0
    192a:	df 91       	pop	r29
    192c:	cf 91       	pop	r28
    192e:	08 95       	ret

00001930 <vTask2>:
static void vTask2(void* pvParameters)
{
	char x=0;
	//LCD_main(&x);
	while(1){
		Tank_feed_operation(2);
    1930:	82 e0       	ldi	r24, 0x02	; 2
    1932:	90 e0       	ldi	r25, 0x00	; 0
    1934:	0e 94 2b 23 	call	0x4656	; 0x4656 <Tank_feed_operation>
		vTaskDelay(4000/portTICK_PERIOD_MS);
    1938:	8a ef       	ldi	r24, 0xFA	; 250
    193a:	90 e0       	ldi	r25, 0x00	; 0
    193c:	0e 94 eb 1d 	call	0x3bd6	; 0x3bd6 <vTaskDelay>
    1940:	f7 cf       	rjmp	.-18     	; 0x1930 <vTask2>

00001942 <vTask1>:




static void vTask1(void* pvParameters)
{
    1942:	cf 93       	push	r28
    1944:	df 93       	push	r29
    1946:	1f 92       	push	r1
    1948:	cd b7       	in	r28, 0x3d	; 61
    194a:	de b7       	in	r29, 0x3e	; 62
	char x=0;
    194c:	19 82       	std	Y+1, r1	; 0x01
	UART0_puts("Sequence Task1 \n");
    194e:	89 e2       	ldi	r24, 0x29	; 41
    1950:	93 e0       	ldi	r25, 0x03	; 3
    1952:	b8 d4       	rcall	.+2416   	; 0x22c4 <UART0_puts>
//	Level_main(&x);
    Sequance_task(&x);
    1954:	ce 01       	movw	r24, r28
    1956:	01 96       	adiw	r24, 0x01	; 1
    1958:	0e 94 fe 00 	call	0x1fc	; 0x1fc <Sequance_task>
//   while (1)
//   {
// 	   UART0_puts("task1 alive\n");
//   }

}
    195c:	0f 90       	pop	r0
    195e:	df 91       	pop	r29
    1960:	cf 91       	pop	r28
    1962:	08 95       	ret

00001964 <main>:




int main(void) {
	DDRE = 0xFF;
    1964:	8f ef       	ldi	r24, 0xFF	; 255
    1966:	8d b9       	out	0x0d, r24	; 13
	UART0_init(9600); //for debug
    1968:	60 e8       	ldi	r22, 0x80	; 128
    196a:	75 e2       	ldi	r23, 0x25	; 37
    196c:	80 e0       	ldi	r24, 0x00	; 0
    196e:	90 e0       	ldi	r25, 0x00	; 0
    1970:	1f d4       	rcall	.+2110   	; 0x21b0 <UART0_init>
    System_init();
    1972:	0e 94 90 23 	call	0x4720	; 0x4720 <System_init>
	
	//Lcd_init(UART3,115200,1);
	UART0_puts("start \n");
    1976:	8a e3       	ldi	r24, 0x3A	; 58
    1978:	93 e0       	ldi	r25, 0x03	; 3
    197a:	a4 d4       	rcall	.+2376   	; 0x22c4 <UART0_puts>
// 	_delay_ms(1000);
// 
//  }
	//Temp_main_init();
	/* Create the task without using any dynamic memory allocation. */
	xHandle1 = xTaskCreateStatic( //print LCD data from RTE lowest priority
    197c:	0f 2e       	mov	r0, r31
    197e:	f6 e0       	ldi	r31, 0x06	; 6
    1980:	cf 2e       	mov	r12, r31
    1982:	f0 e1       	ldi	r31, 0x10	; 16
    1984:	df 2e       	mov	r13, r31
    1986:	f0 2d       	mov	r31, r0
    1988:	0f 2e       	mov	r0, r31
    198a:	f9 e5       	ldi	r31, 0x59	; 89
    198c:	ef 2e       	mov	r14, r31
    198e:	f2 e1       	ldi	r31, 0x12	; 18
    1990:	ff 2e       	mov	r15, r31
    1992:	f0 2d       	mov	r31, r0
    1994:	02 e0       	ldi	r16, 0x02	; 2
    1996:	20 e0       	ldi	r18, 0x00	; 0
    1998:	30 e0       	ldi	r19, 0x00	; 0
    199a:	44 ef       	ldi	r20, 0xF4	; 244
    199c:	51 e0       	ldi	r21, 0x01	; 1
    199e:	62 e4       	ldi	r22, 0x42	; 66
    19a0:	73 e0       	ldi	r23, 0x03	; 3
    19a2:	81 ea       	ldi	r24, 0xA1	; 161
    19a4:	9c e0       	ldi	r25, 0x0C	; 12
    19a6:	0e 94 6a 1b 	call	0x36d4	; 0x36d4 <xTaskCreateStatic>
    19aa:	90 93 0a 07 	sts	0x070A, r25	; 0x80070a <xHandle1+0x1>
    19ae:	80 93 09 07 	sts	0x0709, r24	; 0x800709 <xHandle1>
					NULL, /* Parameter passed into the task. */
					2,/* Priority at which the task is created. */
					xStack1, /* Array to use as the task's stack. */
					&xTask1Buffer); /* Variable to hold the task's data structure. */
	
	xHandle2 = xTaskCreateStatic( //LCD highest priority
    19b2:	0f 2e       	mov	r0, r31
    19b4:	f0 e3       	ldi	r31, 0x30	; 48
    19b6:	cf 2e       	mov	r12, r31
    19b8:	f0 e1       	ldi	r31, 0x10	; 16
    19ba:	df 2e       	mov	r13, r31
    19bc:	f0 2d       	mov	r31, r0
    19be:	0f 2e       	mov	r0, r31
    19c0:	fb e6       	ldi	r31, 0x6B	; 107
    19c2:	ef 2e       	mov	r14, r31
    19c4:	f6 e1       	ldi	r31, 0x16	; 22
    19c6:	ff 2e       	mov	r15, r31
    19c8:	f0 2d       	mov	r31, r0
    19ca:	20 e0       	ldi	r18, 0x00	; 0
    19cc:	30 e0       	ldi	r19, 0x00	; 0
    19ce:	44 ef       	ldi	r20, 0xF4	; 244
    19d0:	51 e0       	ldi	r21, 0x01	; 1
    19d2:	68 e4       	ldi	r22, 0x48	; 72
    19d4:	73 e0       	ldi	r23, 0x03	; 3
    19d6:	88 e9       	ldi	r24, 0x98	; 152
    19d8:	9c e0       	ldi	r25, 0x0C	; 12
    19da:	0e 94 6a 1b 	call	0x36d4	; 0x36d4 <xTaskCreateStatic>
    19de:	90 93 08 07 	sts	0x0708, r25	; 0x800708 <xHandle2+0x1>
    19e2:	80 93 07 07 	sts	0x0707, r24	; 0x800707 <xHandle2>
				NULL, /* Parameter passed into the task. */
				2,/* Priority at which the task is created. */
				xStack2, /* Array to use as the task's stack. */
				&xTask2Buffer); /* Variable to hold the task's data structure. */
				
	xHandle3 = xTaskCreateStatic( //temp mid priority
    19e6:	0f 2e       	mov	r0, r31
    19e8:	fd e4       	ldi	r31, 0x4D	; 77
    19ea:	cf 2e       	mov	r12, r31
    19ec:	f4 e1       	ldi	r31, 0x14	; 20
    19ee:	df 2e       	mov	r13, r31
    19f0:	f0 2d       	mov	r31, r0
    19f2:	0f 2e       	mov	r0, r31
    19f4:	f6 e6       	ldi	r31, 0x66	; 102
    19f6:	ef 2e       	mov	r14, r31
    19f8:	f8 e1       	ldi	r31, 0x18	; 24
    19fa:	ff 2e       	mov	r15, r31
    19fc:	f0 2d       	mov	r31, r0
    19fe:	20 e0       	ldi	r18, 0x00	; 0
    1a00:	30 e0       	ldi	r19, 0x00	; 0
    1a02:	44 ef       	ldi	r20, 0xF4	; 244
    1a04:	51 e0       	ldi	r21, 0x01	; 1
    1a06:	6e e4       	ldi	r22, 0x4E	; 78
    1a08:	73 e0       	ldi	r23, 0x03	; 3
    1a0a:	87 e8       	ldi	r24, 0x87	; 135
    1a0c:	9c e0       	ldi	r25, 0x0C	; 12
    1a0e:	0e 94 6a 1b 	call	0x36d4	; 0x36d4 <xTaskCreateStatic>
    1a12:	90 93 06 07 	sts	0x0706, r25	; 0x800706 <xHandle3+0x1>
    1a16:	80 93 05 07 	sts	0x0705, r24	; 0x800705 <xHandle3>
				NULL, /* Parameter passed into the task. */
				2,/* Priority at which the task is created. */
				xStack3, /* Array to use as the task's stack. */
				&xTask3Buffer); /* Variable to hold the task's data structure. */
	
	xHandle4 = xTaskCreateStatic(
    1a1a:	0f 2e       	mov	r0, r31
    1a1c:	fc ed       	ldi	r31, 0xDC	; 220
    1a1e:	cf 2e       	mov	r12, r31
    1a20:	ff e0       	ldi	r31, 0x0F	; 15
    1a22:	df 2e       	mov	r13, r31
    1a24:	f0 2d       	mov	r31, r0
    1a26:	0f 2e       	mov	r0, r31
    1a28:	f5 e6       	ldi	r31, 0x65	; 101
    1a2a:	ef 2e       	mov	r14, r31
    1a2c:	f0 e1       	ldi	r31, 0x10	; 16
    1a2e:	ff 2e       	mov	r15, r31
    1a30:	f0 2d       	mov	r31, r0
    1a32:	20 e0       	ldi	r18, 0x00	; 0
    1a34:	30 e0       	ldi	r19, 0x00	; 0
    1a36:	44 ef       	ldi	r20, 0xF4	; 244
    1a38:	51 e0       	ldi	r21, 0x01	; 1
    1a3a:	64 e5       	ldi	r22, 0x54	; 84
    1a3c:	73 e0       	ldi	r23, 0x03	; 3
    1a3e:	8b e7       	ldi	r24, 0x7B	; 123
    1a40:	9c e0       	ldi	r25, 0x0C	; 12
    1a42:	0e 94 6a 1b 	call	0x36d4	; 0x36d4 <xTaskCreateStatic>
    1a46:	90 93 04 07 	sts	0x0704, r25	; 0x800704 <xHandle4+0x1>
    1a4a:	80 93 03 07 	sts	0x0703, r24	; 0x800703 <xHandle4>
				2,/* Priority at which the task is created. */
				xStack4, /* Array to use as the task's stack. */
				&xTask4Buffer); /* Variable to hold the task's data structure. */
				
				
	xHandle5 = xTaskCreateStatic(
    1a4e:	0f 2e       	mov	r0, r31
    1a50:	fa e5       	ldi	r31, 0x5A	; 90
    1a52:	cf 2e       	mov	r12, r31
    1a54:	fa e1       	ldi	r31, 0x1A	; 26
    1a56:	df 2e       	mov	r13, r31
    1a58:	f0 2d       	mov	r31, r0
    1a5a:	0f 2e       	mov	r0, r31
    1a5c:	f7 e7       	ldi	r31, 0x77	; 119
    1a5e:	ef 2e       	mov	r14, r31
    1a60:	f4 e1       	ldi	r31, 0x14	; 20
    1a62:	ff 2e       	mov	r15, r31
    1a64:	f0 2d       	mov	r31, r0
    1a66:	05 e0       	ldi	r16, 0x05	; 5
    1a68:	20 e0       	ldi	r18, 0x00	; 0
    1a6a:	30 e0       	ldi	r19, 0x00	; 0
    1a6c:	44 ef       	ldi	r20, 0xF4	; 244
    1a6e:	51 e0       	ldi	r21, 0x01	; 1
    1a70:	6a e5       	ldi	r22, 0x5A	; 90
    1a72:	73 e0       	ldi	r23, 0x03	; 3
    1a74:	8e e6       	ldi	r24, 0x6E	; 110
    1a76:	9c e0       	ldi	r25, 0x0C	; 12
    1a78:	0e 94 6a 1b 	call	0x36d4	; 0x36d4 <xTaskCreateStatic>
    1a7c:	90 93 02 07 	sts	0x0702, r25	; 0x800702 <xHandle5+0x1>
    1a80:	80 93 01 07 	sts	0x0701, r24	; 0x800701 <xHandle5>
// 	}
	

	  // Start scheduler.
	  //Tank_operation_init();
	  vTaskStartScheduler();
    1a84:	0e 94 63 1c 	call	0x38c6	; 0x38c6 <vTaskStartScheduler>
    1a88:	ff cf       	rjmp	.-2      	; 0x1a88 <main+0x124>

00001a8a <ADC_init>:
	 * this function configure ADC module and
	 * you  pass the channel you work with from 0 to 7
	 */

   // make the ADC pin as input.
  CLR_BIT(ADC_DIRECTION_REG ,channel );
    1a8a:	90 b3       	in	r25, 0x10	; 16
    1a8c:	21 e0       	ldi	r18, 0x01	; 1
    1a8e:	30 e0       	ldi	r19, 0x00	; 0
    1a90:	08 2e       	mov	r0, r24
    1a92:	02 c0       	rjmp	.+4      	; 0x1a98 <ADC_init+0xe>
    1a94:	22 0f       	add	r18, r18
    1a96:	33 1f       	adc	r19, r19
    1a98:	0a 94       	dec	r0
    1a9a:	e2 f7       	brpl	.-8      	; 0x1a94 <ADC_init+0xa>
    1a9c:	20 95       	com	r18
    1a9e:	29 23       	and	r18, r25
    1aa0:	20 bb       	out	0x10, r18	; 16
  //   external ref .
  CLR_HIGH_NIBBLE(ADC_MULTIPLEXER_SELECTION_REG);
    1aa2:	ec e7       	ldi	r30, 0x7C	; 124
    1aa4:	f0 e0       	ldi	r31, 0x00	; 0
    1aa6:	90 81       	ld	r25, Z
    1aa8:	9f 70       	andi	r25, 0x0F	; 15
    1aaa:	90 83       	st	Z, r25
  //   operated channel ( channel ) .
  PUT_VAL_LOW_NIBBLE(ADC_MULTIPLEXER_SELECTION_REG , channel);
    1aac:	90 81       	ld	r25, Z
    1aae:	90 7f       	andi	r25, 0xF0	; 240
    1ab0:	90 83       	st	Z, r25
    1ab2:	8f 70       	andi	r24, 0x0F	; 15
    1ab4:	98 2b       	or	r25, r24
    1ab6:	90 83       	st	Z, r25
  //  enable ADC  & enable interrupt && ps / 128.
  PUT_VAL_reg(ADC_CONTROL_STATUS_A_REG , 0x8f);
    1ab8:	8f e8       	ldi	r24, 0x8F	; 143
    1aba:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>

  // enable global interrupt.
  sei();
    1abe:	78 94       	sei
    1ac0:	08 95       	ret

00001ac2 <ADC_enable_reading>:
}

void ADC_enable_reading(void)
{
	// restart the conversion .
	SET_BIT(ADC_CONTROL_STATUS_A_REG , ADC_START_CONVERSION_bit);
    1ac2:	ea e7       	ldi	r30, 0x7A	; 122
    1ac4:	f0 e0       	ldi	r31, 0x00	; 0
    1ac6:	80 81       	ld	r24, Z
    1ac8:	80 64       	ori	r24, 0x40	; 64
    1aca:	80 83       	st	Z, r24
    1acc:	08 95       	ret

00001ace <ADC_read>:
}

uint16_t ADC_read(void)
{
	// re-start the conversion .
	ADC_enable_reading();
    1ace:	f9 df       	rcall	.-14     	; 0x1ac2 <ADC_enable_reading>
	static uint16_t returned_data;
	g_converted = 0 ;
    1ad0:	10 92 0b 07 	sts	0x070B, r1	; 0x80070b <g_converted>
    1ad4:	80 ec       	ldi	r24, 0xC0	; 192
    1ad6:	92 e1       	ldi	r25, 0x12	; 18
    1ad8:	01 97       	sbiw	r24, 0x01	; 1
	// the conversion takes about 260 us so we will wait 4800 ticks till it ends .
	uint16_t time_out = 4800 ;
	while(!g_converted && 0 != time_out ){time_out --; }
    1ada:	f1 f7       	brne	.-4      	; 0x1ad8 <ADC_read+0xa>
	returned_data = g_analog_data ;
    1adc:	80 91 0c 07 	lds	r24, 0x070C	; 0x80070c <g_analog_data>
    1ae0:	90 91 0d 07 	lds	r25, 0x070D	; 0x80070d <g_analog_data+0x1>
		return returned_data ;
}
    1ae4:	08 95       	ret

00001ae6 <__vector_29>:


ISR(ADC_vect)
{
    1ae6:	1f 92       	push	r1
    1ae8:	0f 92       	push	r0
    1aea:	0f b6       	in	r0, 0x3f	; 63
    1aec:	0f 92       	push	r0
    1aee:	11 24       	eor	r1, r1
    1af0:	2f 93       	push	r18
    1af2:	8f 93       	push	r24
    1af4:	9f 93       	push	r25
	   uint8_t The_low_adc_reg = ADC_DATA_REG_LOW ;
    1af6:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
	  // get 10 bits out of the high and low register .
	  g_analog_data =  The_low_adc_reg | (ADC_DATA_REG_HIGH <<8);
    1afa:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
    1afe:	90 e0       	ldi	r25, 0x00	; 0
    1b00:	92 2b       	or	r25, r18
    1b02:	90 93 0d 07 	sts	0x070D, r25	; 0x80070d <g_analog_data+0x1>
    1b06:	80 93 0c 07 	sts	0x070C, r24	; 0x80070c <g_analog_data>
	//  UART0_OutUDec(g_analog_data);
	 // UART0_putc('\n');
	  g_converted = 1 ;
    1b0a:	81 e0       	ldi	r24, 0x01	; 1
    1b0c:	80 93 0b 07 	sts	0x070B, r24	; 0x80070b <g_converted>
}
    1b10:	9f 91       	pop	r25
    1b12:	8f 91       	pop	r24
    1b14:	2f 91       	pop	r18
    1b16:	0f 90       	pop	r0
    1b18:	0f be       	out	0x3f, r0	; 63
    1b1a:	0f 90       	pop	r0
    1b1c:	1f 90       	pop	r1
    1b1e:	18 95       	reti

00001b20 <DIO_init>:
void Blower_change_state(uint8_t state)
{
	if (HIGH == state)
		SET_BIT(TANK_VALVE_2_DATA_REG , TANK_VALVE_2_PIN);
	else if(LOW == state)
		CLR_BIT(TANK_VALVE_2_DATA_REG , TANK_VALVE_2_PIN);
    1b20:	ea e0       	ldi	r30, 0x0A	; 10
    1b22:	f1 e0       	ldi	r31, 0x01	; 1
    1b24:	80 81       	ld	r24, Z
    1b26:	8f 7e       	andi	r24, 0xEF	; 239
    1b28:	80 83       	st	Z, r24
    1b2a:	80 81       	ld	r24, Z
    1b2c:	8f 7d       	andi	r24, 0xDF	; 223
    1b2e:	80 83       	st	Z, r24
    1b30:	80 81       	ld	r24, Z
    1b32:	8f 7b       	andi	r24, 0xBF	; 191
    1b34:	80 83       	st	Z, r24
    1b36:	80 81       	ld	r24, Z
    1b38:	8f 77       	andi	r24, 0x7F	; 127
    1b3a:	80 83       	st	Z, r24
    1b3c:	3c 98       	cbi	0x07, 4	; 7
    1b3e:	3d 98       	cbi	0x07, 5	; 7
    1b40:	3a 98       	cbi	0x07, 2	; 7
    1b42:	80 81       	ld	r24, Z
    1b44:	87 7f       	andi	r24, 0xF7	; 247
    1b46:	80 83       	st	Z, r24
    1b48:	09 9a       	sbi	0x01, 1	; 1
    1b4a:	0a 9a       	sbi	0x01, 2	; 1
    1b4c:	e7 e0       	ldi	r30, 0x07	; 7
    1b4e:	f1 e0       	ldi	r31, 0x01	; 1
    1b50:	80 81       	ld	r24, Z
    1b52:	80 64       	ori	r24, 0x40	; 64
    1b54:	80 83       	st	Z, r24
    1b56:	0e 9a       	sbi	0x01, 6	; 1
    1b58:	0e 9a       	sbi	0x01, 6	; 1
    1b5a:	80 81       	ld	r24, Z
    1b5c:	80 62       	ori	r24, 0x20	; 32
    1b5e:	80 83       	st	Z, r24
    1b60:	80 81       	ld	r24, Z
    1b62:	80 68       	ori	r24, 0x80	; 128
    1b64:	80 83       	st	Z, r24
    1b66:	38 98       	cbi	0x07, 0	; 7
    1b68:	08 9a       	sbi	0x01, 0	; 1
    1b6a:	0b 9a       	sbi	0x01, 3	; 1
    1b6c:	e4 e0       	ldi	r30, 0x04	; 4
    1b6e:	f1 e0       	ldi	r31, 0x01	; 1
    1b70:	80 81       	ld	r24, Z
    1b72:	84 60       	ori	r24, 0x04	; 4
    1b74:	80 83       	st	Z, r24
    1b76:	54 9a       	sbi	0x0a, 4	; 10
    1b78:	0e 9a       	sbi	0x01, 6	; 1
    1b7a:	3f 9a       	sbi	0x07, 7	; 7
    1b7c:	80 81       	ld	r24, Z
    1b7e:	80 64       	ori	r24, 0x40	; 64
    1b80:	80 83       	st	Z, r24
    1b82:	0f 9a       	sbi	0x01, 7	; 1
    1b84:	e1 e0       	ldi	r30, 0x01	; 1
    1b86:	f1 e0       	ldi	r31, 0x01	; 1
    1b88:	80 81       	ld	r24, Z
    1b8a:	8e 7f       	andi	r24, 0xFE	; 254
    1b8c:	80 83       	st	Z, r24
    1b8e:	80 81       	ld	r24, Z
    1b90:	82 60       	ori	r24, 0x02	; 2
    1b92:	80 83       	st	Z, r24
    1b94:	e2 e0       	ldi	r30, 0x02	; 2
    1b96:	f1 e0       	ldi	r31, 0x01	; 1
    1b98:	80 81       	ld	r24, Z
    1b9a:	81 60       	ori	r24, 0x01	; 1
    1b9c:	80 83       	st	Z, r24
    1b9e:	52 98       	cbi	0x0a, 2	; 10
    1ba0:	53 9a       	sbi	0x0a, 3	; 10
    1ba2:	5a 9a       	sbi	0x0b, 2	; 11
    1ba4:	08 95       	ret

00001ba6 <Tank_valve_1_change_state>:
    1ba6:	81 30       	cpi	r24, 0x01	; 1
    1ba8:	11 f4       	brne	.+4      	; 0x1bae <Tank_valve_1_change_state+0x8>
    1baa:	11 9a       	sbi	0x02, 1	; 2
    1bac:	08 95       	ret
    1bae:	81 11       	cpse	r24, r1
    1bb0:	01 c0       	rjmp	.+2      	; 0x1bb4 <Tank_valve_1_change_state+0xe>
    1bb2:	11 98       	cbi	0x02, 1	; 2
    1bb4:	08 95       	ret

00001bb6 <Conveyor_motor_change_state>:
    1bb6:	81 30       	cpi	r24, 0x01	; 1
    1bb8:	31 f4       	brne	.+12     	; 0x1bc6 <Conveyor_motor_change_state+0x10>
    1bba:	e8 e0       	ldi	r30, 0x08	; 8
    1bbc:	f1 e0       	ldi	r31, 0x01	; 1
    1bbe:	80 81       	ld	r24, Z
    1bc0:	80 68       	ori	r24, 0x80	; 128
    1bc2:	80 83       	st	Z, r24
    1bc4:	08 95       	ret
    1bc6:	81 11       	cpse	r24, r1
    1bc8:	05 c0       	rjmp	.+10     	; 0x1bd4 <Conveyor_motor_change_state+0x1e>
    1bca:	e8 e0       	ldi	r30, 0x08	; 8
    1bcc:	f1 e0       	ldi	r31, 0x01	; 1
    1bce:	80 81       	ld	r24, Z
    1bd0:	8f 77       	andi	r24, 0x7F	; 127
    1bd2:	80 83       	st	Z, r24
    1bd4:	08 95       	ret

00001bd6 <Pump_change_state>:
    1bd6:	81 30       	cpi	r24, 0x01	; 1
    1bd8:	11 f4       	brne	.+4      	; 0x1bde <Pump_change_state+0x8>
    1bda:	10 9a       	sbi	0x02, 0	; 2
    1bdc:	08 95       	ret
    1bde:	81 11       	cpse	r24, r1
    1be0:	01 c0       	rjmp	.+2      	; 0x1be4 <Pump_change_state+0xe>
    1be2:	10 98       	cbi	0x02, 0	; 2
    1be4:	08 95       	ret

00001be6 <Modbus_change_state>:
    1be6:	88 23       	and	r24, r24
    1be8:	19 f0       	breq	.+6      	; 0x1bf0 <Modbus_change_state+0xa>
    1bea:	81 30       	cpi	r24, 0x01	; 1
    1bec:	89 f0       	breq	.+34     	; 0x1c10 <Modbus_change_state+0x2a>
    1bee:	08 95       	ret
    1bf0:	61 30       	cpi	r22, 0x01	; 1
    1bf2:	31 f4       	brne	.+12     	; 0x1c00 <Modbus_change_state+0x1a>
    1bf4:	e5 e0       	ldi	r30, 0x05	; 5
    1bf6:	f1 e0       	ldi	r31, 0x01	; 1
    1bf8:	80 81       	ld	r24, Z
    1bfa:	84 60       	ori	r24, 0x04	; 4
    1bfc:	80 83       	st	Z, r24
    1bfe:	08 95       	ret
    1c00:	61 11       	cpse	r22, r1
    1c02:	0d c0       	rjmp	.+26     	; 0x1c1e <Modbus_change_state+0x38>
    1c04:	e5 e0       	ldi	r30, 0x05	; 5
    1c06:	f1 e0       	ldi	r31, 0x01	; 1
    1c08:	80 81       	ld	r24, Z
    1c0a:	8b 7f       	andi	r24, 0xFB	; 251
    1c0c:	80 83       	st	Z, r24
    1c0e:	08 95       	ret
    1c10:	61 30       	cpi	r22, 0x01	; 1
    1c12:	11 f4       	brne	.+4      	; 0x1c18 <Modbus_change_state+0x32>
    1c14:	5c 9a       	sbi	0x0b, 4	; 11
    1c16:	08 95       	ret
    1c18:	61 11       	cpse	r22, r1
    1c1a:	01 c0       	rjmp	.+2      	; 0x1c1e <Modbus_change_state+0x38>
    1c1c:	5c 98       	cbi	0x0b, 4	; 11
    1c1e:	08 95       	ret

00001c20 <Tank_valve_2_change_state>:
    1c20:	81 30       	cpi	r24, 0x01	; 1
    1c22:	11 f4       	brne	.+4      	; 0x1c28 <Tank_valve_2_change_state+0x8>
    1c24:	47 9a       	sbi	0x08, 7	; 8
    1c26:	08 95       	ret
    1c28:	81 11       	cpse	r24, r1
    1c2a:	01 c0       	rjmp	.+2      	; 0x1c2e <Tank_valve_2_change_state+0xe>
    1c2c:	47 98       	cbi	0x08, 7	; 8
    1c2e:	08 95       	ret

00001c30 <Watch_dog_change_state>:
}


void Watch_dog_change_state(uint8_t state)
{
	if (HIGH == state)
    1c30:	81 30       	cpi	r24, 0x01	; 1
    1c32:	31 f4       	brne	.+12     	; 0x1c40 <Watch_dog_change_state+0x10>
	SET_BIT(WATCH_DOG_DATA_REG , WATCH_DOG_PIN);
    1c34:	e5 e0       	ldi	r30, 0x05	; 5
    1c36:	f1 e0       	ldi	r31, 0x01	; 1
    1c38:	80 81       	ld	r24, Z
    1c3a:	80 64       	ori	r24, 0x40	; 64
    1c3c:	80 83       	st	Z, r24
    1c3e:	08 95       	ret
	else if(LOW == state)
    1c40:	81 11       	cpse	r24, r1
    1c42:	05 c0       	rjmp	.+10     	; 0x1c4e <Watch_dog_change_state+0x1e>
	CLR_BIT(WATCH_DOG_DATA_REG , WATCH_DOG_PIN);
    1c44:	e5 e0       	ldi	r30, 0x05	; 5
    1c46:	f1 e0       	ldi	r31, 0x01	; 1
    1c48:	80 81       	ld	r24, Z
    1c4a:	8f 7b       	andi	r24, 0xBF	; 191
    1c4c:	80 83       	st	Z, r24
    1c4e:	08 95       	ret

00001c50 <timers_init>:
 * set_up the timer and interrupt config and
 * parameters timer_ config struct contain all info about Timer
 * return 1 if the function setup OK -1 if not
 */
uint8_t timers_init(g_Timer_Config *config)
{
    1c50:	fc 01       	movw	r30, r24
	// choose the timer number depend on the config timer_number
	if(config->timer_number == 1){
    1c52:	94 81       	ldd	r25, Z+4	; 0x04
    1c54:	91 30       	cpi	r25, 0x01	; 1
    1c56:	c1 f4       	brne	.+48     	; 0x1c88 <timers_init+0x38>

		// off all the modes of  first config register on timer
		DDRD &= ~ (1<<6);
    1c58:	56 98       	cbi	0x0a, 6	; 10
		PORTD |=(1<<6);
    1c5a:	5e 9a       	sbi	0x0b, 6	; 11
		TIMER1_CONGFIG_A = 0X00;
    1c5c:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
		// External counter on T1 and set the Top vale is OCRnA
		TIMER1_CONGFIG_B = 0x0E;
    1c60:	8e e0       	ldi	r24, 0x0E	; 14
    1c62:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
		// number of Encoder Tick for Each interrupt
		TIMER1_COMPARE = config->ticks - 1;
    1c66:	80 81       	ld	r24, Z
    1c68:	91 81       	ldd	r25, Z+1	; 0x01
    1c6a:	01 97       	sbiw	r24, 0x01	; 1
    1c6c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
    1c70:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
		// Enable interrupt Bit on the timer Mask
		SET_BIT(TIMER1_INTERUPT, TIMER1_COMPARE_INT);
    1c74:	af e6       	ldi	r26, 0x6F	; 111
    1c76:	b0 e0       	ldi	r27, 0x00	; 0
    1c78:	8c 91       	ld	r24, X
    1c7a:	82 60       	ori	r24, 0x02	; 2
    1c7c:	8c 93       	st	X, r24
		// copy the config parameter to Timer struct
		g_timer1_config = config;
    1c7e:	f0 93 89 1a 	sts	0x1A89, r31	; 0x801a89 <g_timer1_config+0x1>
    1c82:	e0 93 88 1a 	sts	0x1A88, r30	; 0x801a88 <g_timer1_config>
    1c86:	5f c0       	rjmp	.+190    	; 0x1d46 <timers_init+0xf6>
		// set the time before get ticks ISR time
		//g_Timer1_old_time = Get_millis();
	}// timer_number = 1

	else if(config->timer_number == 3)
    1c88:	93 30       	cpi	r25, 0x03	; 3
    1c8a:	c1 f4       	brne	.+48     	; 0x1cbc <timers_init+0x6c>
	{
		//UART0_puts("calllllllllllllllllllll\n");
		DDRE &=~ (1<<6);
    1c8c:	6e 98       	cbi	0x0d, 6	; 13
		PORTE |=(1<<6);
    1c8e:	76 9a       	sbi	0x0e, 6	; 14
		// off all the modes of  first config register on timer
		TIMER3_CONGFIG_A = 0X00;
    1c90:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
		//External counter on T1 and set the Top vale is OCRnA
		TIMER3_CONGFIG_B = 0x0E;
    1c94:	8e e0       	ldi	r24, 0x0E	; 14
    1c96:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>
		// number of Encoder Tick for Each interrupt
		TIMER3_COMPARE = config->ticks - 1;
    1c9a:	80 81       	ld	r24, Z
    1c9c:	91 81       	ldd	r25, Z+1	; 0x01
    1c9e:	01 97       	sbiw	r24, 0x01	; 1
    1ca0:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
    1ca4:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>
		// Enable interrupt Bit on the timer Mask
		SET_BIT(TIMER3_INTERUPT, TIMER3_COMPARE_INT);
    1ca8:	a1 e7       	ldi	r26, 0x71	; 113
    1caa:	b0 e0       	ldi	r27, 0x00	; 0
    1cac:	8c 91       	ld	r24, X
    1cae:	82 60       	ori	r24, 0x02	; 2
    1cb0:	8c 93       	st	X, r24
		// copy the config parameter to Timer struct
		g_timer3_config = config;
    1cb2:	f0 93 85 1a 	sts	0x1A85, r31	; 0x801a85 <g_timer3_config+0x1>
    1cb6:	e0 93 84 1a 	sts	0x1A84, r30	; 0x801a84 <g_timer3_config>
    1cba:	45 c0       	rjmp	.+138    	; 0x1d46 <timers_init+0xf6>
		// set the time before get ticks ISR time
		//g_Timer3_old_time = Get_millis();
	}//timer_number = 3
	else if(config->timer_number == 4){
    1cbc:	94 30       	cpi	r25, 0x04	; 4
    1cbe:	01 f5       	brne	.+64     	; 0x1d00 <timers_init+0xb0>
		//UART0_puts("cassssssssssssssssssssssssssss\n");
		DDRH &= ~ (1<<7);
    1cc0:	a1 e0       	ldi	r26, 0x01	; 1
    1cc2:	b1 e0       	ldi	r27, 0x01	; 1
    1cc4:	8c 91       	ld	r24, X
    1cc6:	8f 77       	andi	r24, 0x7F	; 127
    1cc8:	8c 93       	st	X, r24
		PORTH |=(1<<7);
    1cca:	a2 e0       	ldi	r26, 0x02	; 2
    1ccc:	b1 e0       	ldi	r27, 0x01	; 1
    1cce:	8c 91       	ld	r24, X
    1cd0:	80 68       	ori	r24, 0x80	; 128
    1cd2:	8c 93       	st	X, r24
		// off all the modes of  first config register on timer
		TIMER4_CONGFIG_A = 0X00;
    1cd4:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
		// External counter on T1 and set the Top vale is OCRnA
		TIMER4_CONGFIG_B = 0x0E;
    1cd8:	8e e0       	ldi	r24, 0x0E	; 14
    1cda:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>
		// number of Encoder Tick for Each interrupt
		TIMER4_COMPARE = config->ticks - 1;
    1cde:	80 81       	ld	r24, Z
    1ce0:	91 81       	ldd	r25, Z+1	; 0x01
    1ce2:	01 97       	sbiw	r24, 0x01	; 1
    1ce4:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
    1ce8:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
		// Enable interrupt Bit on the timer Mask
		SET_BIT(TIMER4_INTERUPT, TIMER4_COMPARE_INT);
    1cec:	a2 e7       	ldi	r26, 0x72	; 114
    1cee:	b0 e0       	ldi	r27, 0x00	; 0
    1cf0:	8c 91       	ld	r24, X
    1cf2:	82 60       	ori	r24, 0x02	; 2
    1cf4:	8c 93       	st	X, r24
		// copy the config parameter to Timer struct
		g_timer4_config = config;
    1cf6:	f0 93 87 1a 	sts	0x1A87, r31	; 0x801a87 <g_timer4_config+0x1>
    1cfa:	e0 93 86 1a 	sts	0x1A86, r30	; 0x801a86 <g_timer4_config>
    1cfe:	23 c0       	rjmp	.+70     	; 0x1d46 <timers_init+0xf6>
		// set the time before get ticks ISR time
		//g_Timer4_old_time = Get_millis();
	}//timer_number = 4

	else if(config->timer_number == 5){
    1d00:	95 30       	cpi	r25, 0x05	; 5
    1d02:	21 f5       	brne	.+72     	; 0x1d4c <timers_init+0xfc>
		
		DDRL &=~(1<<2);
    1d04:	aa e0       	ldi	r26, 0x0A	; 10
    1d06:	b1 e0       	ldi	r27, 0x01	; 1
    1d08:	8c 91       	ld	r24, X
    1d0a:	8b 7f       	andi	r24, 0xFB	; 251
    1d0c:	8c 93       	st	X, r24
		PORTL |=(1<<2);
    1d0e:	ab e0       	ldi	r26, 0x0B	; 11
    1d10:	b1 e0       	ldi	r27, 0x01	; 1
    1d12:	8c 91       	ld	r24, X
    1d14:	84 60       	ori	r24, 0x04	; 4
    1d16:	8c 93       	st	X, r24
		// off all the modes of  first config register on timer
		TIMER5_CONGFIG_A = 0X00;
    1d18:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
		//  External counter on T1 and set the Top vale is OCRnA
		TIMER5_CONGFIG_B = 0x0E;
    1d1c:	8e e0       	ldi	r24, 0x0E	; 14
    1d1e:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <__TEXT_REGION_LENGTH__+0x700121>
		//number of Encoder Tick for Each interrupt
		TIMER5_COMPARE = config->ticks - 1;
    1d22:	80 81       	ld	r24, Z
    1d24:	91 81       	ldd	r25, Z+1	; 0x01
    1d26:	01 97       	sbiw	r24, 0x01	; 1
    1d28:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
    1d2c:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
		// Enable interrupt Bit on the timer Mask
		SET_BIT(TIMER5_INTERUPT, TIMER5_COMPARE_INT);
    1d30:	a3 e7       	ldi	r26, 0x73	; 115
    1d32:	b0 e0       	ldi	r27, 0x00	; 0
    1d34:	8c 91       	ld	r24, X
    1d36:	82 60       	ori	r24, 0x02	; 2
    1d38:	8c 93       	st	X, r24
		// copy the config parameter to Timer struct
		g_timer5_config = config;
    1d3a:	f0 93 8b 1a 	sts	0x1A8B, r31	; 0x801a8b <g_timer5_config+0x1>
    1d3e:	e0 93 8a 1a 	sts	0x1A8A, r30	; 0x801a8a <g_timer5_config>
		// set the time before get ticks ISR time
		//g_Timer5_old_time = Get_millis();
		//Clear the counter number
		TIMER5_COUNT_L = 0;
    1d42:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <__TEXT_REGION_LENGTH__+0x700124>
	{
		//Error the timer number not valid
		return -1;
	}// Else

    sei();
    1d46:	78 94       	sei
    return 1;// Setup done ok
    1d48:	81 e0       	ldi	r24, 0x01	; 1
    1d4a:	08 95       	ret
	}//timer_number = 5

	else
	{
		//Error the timer number not valid
		return -1;
    1d4c:	8f ef       	ldi	r24, 0xFF	; 255
	}// Else

    sei();
    return 1;// Setup done ok
}//timer_init
    1d4e:	08 95       	ret

00001d50 <__vector_17>:

// interrupted service routine when we have reach the number of  Ticks On Encoder
ISR(TIMER1_COMPA_vect)
{
    1d50:	1f 92       	push	r1
    1d52:	0f 92       	push	r0
    1d54:	0f b6       	in	r0, 0x3f	; 63
    1d56:	0f 92       	push	r0
    1d58:	11 24       	eor	r1, r1
    1d5a:	0b b6       	in	r0, 0x3b	; 59
    1d5c:	0f 92       	push	r0
    1d5e:	2f 93       	push	r18
    1d60:	3f 93       	push	r19
    1d62:	4f 93       	push	r20
    1d64:	5f 93       	push	r21
    1d66:	6f 93       	push	r22
    1d68:	7f 93       	push	r23
    1d6a:	8f 93       	push	r24
    1d6c:	9f 93       	push	r25
    1d6e:	af 93       	push	r26
    1d70:	bf 93       	push	r27
    1d72:	ef 93       	push	r30
    1d74:	ff 93       	push	r31
    1d76:	cf 93       	push	r28
    1d78:	df 93       	push	r29
    1d7a:	00 d0       	rcall	.+0      	; 0x1d7c <__vector_17+0x2c>
    1d7c:	1f 92       	push	r1
    1d7e:	cd b7       	in	r28, 0x3d	; 61
    1d80:	de b7       	in	r29, 0x3e	; 62
	volatile uint32_t diff_time;      // to save the different between new time and old time
	volatile static uint32_t s_Timer1_old_time;
	volatile static uint32_t s_Timer1_new_time;
	// get the time now
	s_Timer1_new_time = Get_millis();
    1d82:	0e 94 d0 23 	call	0x47a0	; 0x47a0 <Get_millis>
    1d86:	60 93 2a 07 	sts	0x072A, r22	; 0x80072a <s_Timer1_new_time.1769>
    1d8a:	70 93 2b 07 	sts	0x072B, r23	; 0x80072b <s_Timer1_new_time.1769+0x1>
    1d8e:	80 93 2c 07 	sts	0x072C, r24	; 0x80072c <s_Timer1_new_time.1769+0x2>
    1d92:	90 93 2d 07 	sts	0x072D, r25	; 0x80072d <s_Timer1_new_time.1769+0x3>
	//UART0_puts("blaaaaa\n");
	// calculate the diff between now and last interrupt
	diff_time = s_Timer1_new_time - s_Timer1_old_time;
    1d96:	80 91 2a 07 	lds	r24, 0x072A	; 0x80072a <s_Timer1_new_time.1769>
    1d9a:	90 91 2b 07 	lds	r25, 0x072B	; 0x80072b <s_Timer1_new_time.1769+0x1>
    1d9e:	a0 91 2c 07 	lds	r26, 0x072C	; 0x80072c <s_Timer1_new_time.1769+0x2>
    1da2:	b0 91 2d 07 	lds	r27, 0x072D	; 0x80072d <s_Timer1_new_time.1769+0x3>
    1da6:	40 91 26 07 	lds	r20, 0x0726	; 0x800726 <s_Timer1_old_time.1768>
    1daa:	50 91 27 07 	lds	r21, 0x0727	; 0x800727 <s_Timer1_old_time.1768+0x1>
    1dae:	60 91 28 07 	lds	r22, 0x0728	; 0x800728 <s_Timer1_old_time.1768+0x2>
    1db2:	70 91 29 07 	lds	r23, 0x0729	; 0x800729 <s_Timer1_old_time.1768+0x3>
    1db6:	84 1b       	sub	r24, r20
    1db8:	95 0b       	sbc	r25, r21
    1dba:	a6 0b       	sbc	r26, r22
    1dbc:	b7 0b       	sbc	r27, r23
    1dbe:	89 83       	std	Y+1, r24	; 0x01
    1dc0:	9a 83       	std	Y+2, r25	; 0x02
    1dc2:	ab 83       	std	Y+3, r26	; 0x03
    1dc4:	bc 83       	std	Y+4, r27	; 0x04
	// save the to the old time to next interrupt
	s_Timer1_old_time = s_Timer1_new_time;
    1dc6:	80 91 2a 07 	lds	r24, 0x072A	; 0x80072a <s_Timer1_new_time.1769>
    1dca:	90 91 2b 07 	lds	r25, 0x072B	; 0x80072b <s_Timer1_new_time.1769+0x1>
    1dce:	a0 91 2c 07 	lds	r26, 0x072C	; 0x80072c <s_Timer1_new_time.1769+0x2>
    1dd2:	b0 91 2d 07 	lds	r27, 0x072D	; 0x80072d <s_Timer1_new_time.1769+0x3>
    1dd6:	80 93 26 07 	sts	0x0726, r24	; 0x800726 <s_Timer1_old_time.1768>
    1dda:	90 93 27 07 	sts	0x0727, r25	; 0x800727 <s_Timer1_old_time.1768+0x1>
    1dde:	a0 93 28 07 	sts	0x0728, r26	; 0x800728 <s_Timer1_old_time.1768+0x2>
    1de2:	b0 93 29 07 	sts	0x0729, r27	; 0x800729 <s_Timer1_old_time.1768+0x3>
	//call back function on upper layer to get time
	g_timer1_config->isr_call_back(diff_time);
    1de6:	69 81       	ldd	r22, Y+1	; 0x01
    1de8:	7a 81       	ldd	r23, Y+2	; 0x02
    1dea:	8b 81       	ldd	r24, Y+3	; 0x03
    1dec:	9c 81       	ldd	r25, Y+4	; 0x04
    1dee:	e0 91 88 1a 	lds	r30, 0x1A88	; 0x801a88 <g_timer1_config>
    1df2:	f0 91 89 1a 	lds	r31, 0x1A89	; 0x801a89 <g_timer1_config+0x1>
    1df6:	02 80       	ldd	r0, Z+2	; 0x02
    1df8:	f3 81       	ldd	r31, Z+3	; 0x03
    1dfa:	e0 2d       	mov	r30, r0
    1dfc:	19 95       	eicall
}
    1dfe:	0f 90       	pop	r0
    1e00:	0f 90       	pop	r0
    1e02:	0f 90       	pop	r0
    1e04:	0f 90       	pop	r0
    1e06:	df 91       	pop	r29
    1e08:	cf 91       	pop	r28
    1e0a:	ff 91       	pop	r31
    1e0c:	ef 91       	pop	r30
    1e0e:	bf 91       	pop	r27
    1e10:	af 91       	pop	r26
    1e12:	9f 91       	pop	r25
    1e14:	8f 91       	pop	r24
    1e16:	7f 91       	pop	r23
    1e18:	6f 91       	pop	r22
    1e1a:	5f 91       	pop	r21
    1e1c:	4f 91       	pop	r20
    1e1e:	3f 91       	pop	r19
    1e20:	2f 91       	pop	r18
    1e22:	0f 90       	pop	r0
    1e24:	0b be       	out	0x3b, r0	; 59
    1e26:	0f 90       	pop	r0
    1e28:	0f be       	out	0x3f, r0	; 63
    1e2a:	0f 90       	pop	r0
    1e2c:	1f 90       	pop	r1
    1e2e:	18 95       	reti

00001e30 <__vector_32>:
// interrupted service routine when we have reach the number of  Ticks On Encoder
ISR(TIMER3_COMPA_vect)
{
    1e30:	1f 92       	push	r1
    1e32:	0f 92       	push	r0
    1e34:	0f b6       	in	r0, 0x3f	; 63
    1e36:	0f 92       	push	r0
    1e38:	11 24       	eor	r1, r1
    1e3a:	0b b6       	in	r0, 0x3b	; 59
    1e3c:	0f 92       	push	r0
    1e3e:	2f 93       	push	r18
    1e40:	3f 93       	push	r19
    1e42:	4f 93       	push	r20
    1e44:	5f 93       	push	r21
    1e46:	6f 93       	push	r22
    1e48:	7f 93       	push	r23
    1e4a:	8f 93       	push	r24
    1e4c:	9f 93       	push	r25
    1e4e:	af 93       	push	r26
    1e50:	bf 93       	push	r27
    1e52:	ef 93       	push	r30
    1e54:	ff 93       	push	r31
    1e56:	cf 93       	push	r28
    1e58:	df 93       	push	r29
    1e5a:	00 d0       	rcall	.+0      	; 0x1e5c <__vector_32+0x2c>
    1e5c:	1f 92       	push	r1
    1e5e:	cd b7       	in	r28, 0x3d	; 61
    1e60:	de b7       	in	r29, 0x3e	; 62
	volatile uint32_t diff_time;      // to save the different between new time and old time
	volatile static uint32_t s_Timer3_old_time;
	volatile static uint32_t s_Timer3_new_time;
	// get the time now
	//UART0_puts("ISR3333333333333333333333333333333333333\n");
	s_Timer3_new_time = Get_millis();
    1e62:	0e 94 d0 23 	call	0x47a0	; 0x47a0 <Get_millis>
    1e66:	60 93 22 07 	sts	0x0722, r22	; 0x800722 <s_Timer3_new_time.1777>
    1e6a:	70 93 23 07 	sts	0x0723, r23	; 0x800723 <s_Timer3_new_time.1777+0x1>
    1e6e:	80 93 24 07 	sts	0x0724, r24	; 0x800724 <s_Timer3_new_time.1777+0x2>
    1e72:	90 93 25 07 	sts	0x0725, r25	; 0x800725 <s_Timer3_new_time.1777+0x3>
	// calculate the diff between now and last interrupt
	diff_time = s_Timer3_new_time - s_Timer3_old_time;
    1e76:	80 91 22 07 	lds	r24, 0x0722	; 0x800722 <s_Timer3_new_time.1777>
    1e7a:	90 91 23 07 	lds	r25, 0x0723	; 0x800723 <s_Timer3_new_time.1777+0x1>
    1e7e:	a0 91 24 07 	lds	r26, 0x0724	; 0x800724 <s_Timer3_new_time.1777+0x2>
    1e82:	b0 91 25 07 	lds	r27, 0x0725	; 0x800725 <s_Timer3_new_time.1777+0x3>
    1e86:	40 91 1e 07 	lds	r20, 0x071E	; 0x80071e <s_Timer3_old_time.1776>
    1e8a:	50 91 1f 07 	lds	r21, 0x071F	; 0x80071f <s_Timer3_old_time.1776+0x1>
    1e8e:	60 91 20 07 	lds	r22, 0x0720	; 0x800720 <s_Timer3_old_time.1776+0x2>
    1e92:	70 91 21 07 	lds	r23, 0x0721	; 0x800721 <s_Timer3_old_time.1776+0x3>
    1e96:	84 1b       	sub	r24, r20
    1e98:	95 0b       	sbc	r25, r21
    1e9a:	a6 0b       	sbc	r26, r22
    1e9c:	b7 0b       	sbc	r27, r23
    1e9e:	89 83       	std	Y+1, r24	; 0x01
    1ea0:	9a 83       	std	Y+2, r25	; 0x02
    1ea2:	ab 83       	std	Y+3, r26	; 0x03
    1ea4:	bc 83       	std	Y+4, r27	; 0x04
	// save the to the old time to next interrupt
	s_Timer3_old_time = s_Timer3_new_time;
    1ea6:	80 91 22 07 	lds	r24, 0x0722	; 0x800722 <s_Timer3_new_time.1777>
    1eaa:	90 91 23 07 	lds	r25, 0x0723	; 0x800723 <s_Timer3_new_time.1777+0x1>
    1eae:	a0 91 24 07 	lds	r26, 0x0724	; 0x800724 <s_Timer3_new_time.1777+0x2>
    1eb2:	b0 91 25 07 	lds	r27, 0x0725	; 0x800725 <s_Timer3_new_time.1777+0x3>
    1eb6:	80 93 1e 07 	sts	0x071E, r24	; 0x80071e <s_Timer3_old_time.1776>
    1eba:	90 93 1f 07 	sts	0x071F, r25	; 0x80071f <s_Timer3_old_time.1776+0x1>
    1ebe:	a0 93 20 07 	sts	0x0720, r26	; 0x800720 <s_Timer3_old_time.1776+0x2>
    1ec2:	b0 93 21 07 	sts	0x0721, r27	; 0x800721 <s_Timer3_old_time.1776+0x3>
	//call back function on upper layer to get time
	g_timer3_config->isr_call_back(diff_time);
    1ec6:	69 81       	ldd	r22, Y+1	; 0x01
    1ec8:	7a 81       	ldd	r23, Y+2	; 0x02
    1eca:	8b 81       	ldd	r24, Y+3	; 0x03
    1ecc:	9c 81       	ldd	r25, Y+4	; 0x04
    1ece:	e0 91 84 1a 	lds	r30, 0x1A84	; 0x801a84 <g_timer3_config>
    1ed2:	f0 91 85 1a 	lds	r31, 0x1A85	; 0x801a85 <g_timer3_config+0x1>
    1ed6:	02 80       	ldd	r0, Z+2	; 0x02
    1ed8:	f3 81       	ldd	r31, Z+3	; 0x03
    1eda:	e0 2d       	mov	r30, r0
    1edc:	19 95       	eicall
}
    1ede:	0f 90       	pop	r0
    1ee0:	0f 90       	pop	r0
    1ee2:	0f 90       	pop	r0
    1ee4:	0f 90       	pop	r0
    1ee6:	df 91       	pop	r29
    1ee8:	cf 91       	pop	r28
    1eea:	ff 91       	pop	r31
    1eec:	ef 91       	pop	r30
    1eee:	bf 91       	pop	r27
    1ef0:	af 91       	pop	r26
    1ef2:	9f 91       	pop	r25
    1ef4:	8f 91       	pop	r24
    1ef6:	7f 91       	pop	r23
    1ef8:	6f 91       	pop	r22
    1efa:	5f 91       	pop	r21
    1efc:	4f 91       	pop	r20
    1efe:	3f 91       	pop	r19
    1f00:	2f 91       	pop	r18
    1f02:	0f 90       	pop	r0
    1f04:	0b be       	out	0x3b, r0	; 59
    1f06:	0f 90       	pop	r0
    1f08:	0f be       	out	0x3f, r0	; 63
    1f0a:	0f 90       	pop	r0
    1f0c:	1f 90       	pop	r1
    1f0e:	18 95       	reti

00001f10 <__vector_42>:
// interrupted service routine when we have reach the number of  Ticks On Encoder
ISR(TIMER4_COMPA_vect)
{
    1f10:	1f 92       	push	r1
    1f12:	0f 92       	push	r0
    1f14:	0f b6       	in	r0, 0x3f	; 63
    1f16:	0f 92       	push	r0
    1f18:	11 24       	eor	r1, r1
    1f1a:	0b b6       	in	r0, 0x3b	; 59
    1f1c:	0f 92       	push	r0
    1f1e:	2f 93       	push	r18
    1f20:	3f 93       	push	r19
    1f22:	4f 93       	push	r20
    1f24:	5f 93       	push	r21
    1f26:	6f 93       	push	r22
    1f28:	7f 93       	push	r23
    1f2a:	8f 93       	push	r24
    1f2c:	9f 93       	push	r25
    1f2e:	af 93       	push	r26
    1f30:	bf 93       	push	r27
    1f32:	ef 93       	push	r30
    1f34:	ff 93       	push	r31
    1f36:	cf 93       	push	r28
    1f38:	df 93       	push	r29
    1f3a:	00 d0       	rcall	.+0      	; 0x1f3c <__vector_42+0x2c>
    1f3c:	1f 92       	push	r1
    1f3e:	cd b7       	in	r28, 0x3d	; 61
    1f40:	de b7       	in	r29, 0x3e	; 62
	volatile uint32_t diff_time;      // to save the different between new time and old time
	volatile static uint32_t s_Timer4_old_time;
	volatile static uint32_t s_Timer4_new_time;
	// get the time now
	//UART0_puts("ISR444444444444444444444444444444444444\n");
	s_Timer4_new_time = Get_millis();
    1f42:	0e 94 d0 23 	call	0x47a0	; 0x47a0 <Get_millis>
    1f46:	60 93 1a 07 	sts	0x071A, r22	; 0x80071a <s_Timer4_new_time.1785>
    1f4a:	70 93 1b 07 	sts	0x071B, r23	; 0x80071b <s_Timer4_new_time.1785+0x1>
    1f4e:	80 93 1c 07 	sts	0x071C, r24	; 0x80071c <s_Timer4_new_time.1785+0x2>
    1f52:	90 93 1d 07 	sts	0x071D, r25	; 0x80071d <s_Timer4_new_time.1785+0x3>
	// calculate the diff between now and last interrupt
	diff_time = s_Timer4_new_time - s_Timer4_old_time;
    1f56:	80 91 1a 07 	lds	r24, 0x071A	; 0x80071a <s_Timer4_new_time.1785>
    1f5a:	90 91 1b 07 	lds	r25, 0x071B	; 0x80071b <s_Timer4_new_time.1785+0x1>
    1f5e:	a0 91 1c 07 	lds	r26, 0x071C	; 0x80071c <s_Timer4_new_time.1785+0x2>
    1f62:	b0 91 1d 07 	lds	r27, 0x071D	; 0x80071d <s_Timer4_new_time.1785+0x3>
    1f66:	40 91 16 07 	lds	r20, 0x0716	; 0x800716 <s_Timer4_old_time.1784>
    1f6a:	50 91 17 07 	lds	r21, 0x0717	; 0x800717 <s_Timer4_old_time.1784+0x1>
    1f6e:	60 91 18 07 	lds	r22, 0x0718	; 0x800718 <s_Timer4_old_time.1784+0x2>
    1f72:	70 91 19 07 	lds	r23, 0x0719	; 0x800719 <s_Timer4_old_time.1784+0x3>
    1f76:	84 1b       	sub	r24, r20
    1f78:	95 0b       	sbc	r25, r21
    1f7a:	a6 0b       	sbc	r26, r22
    1f7c:	b7 0b       	sbc	r27, r23
    1f7e:	89 83       	std	Y+1, r24	; 0x01
    1f80:	9a 83       	std	Y+2, r25	; 0x02
    1f82:	ab 83       	std	Y+3, r26	; 0x03
    1f84:	bc 83       	std	Y+4, r27	; 0x04
	// save the to the old time to next interrupt
	s_Timer4_old_time = s_Timer4_new_time;
    1f86:	80 91 1a 07 	lds	r24, 0x071A	; 0x80071a <s_Timer4_new_time.1785>
    1f8a:	90 91 1b 07 	lds	r25, 0x071B	; 0x80071b <s_Timer4_new_time.1785+0x1>
    1f8e:	a0 91 1c 07 	lds	r26, 0x071C	; 0x80071c <s_Timer4_new_time.1785+0x2>
    1f92:	b0 91 1d 07 	lds	r27, 0x071D	; 0x80071d <s_Timer4_new_time.1785+0x3>
    1f96:	80 93 16 07 	sts	0x0716, r24	; 0x800716 <s_Timer4_old_time.1784>
    1f9a:	90 93 17 07 	sts	0x0717, r25	; 0x800717 <s_Timer4_old_time.1784+0x1>
    1f9e:	a0 93 18 07 	sts	0x0718, r26	; 0x800718 <s_Timer4_old_time.1784+0x2>
    1fa2:	b0 93 19 07 	sts	0x0719, r27	; 0x800719 <s_Timer4_old_time.1784+0x3>
	//call back function on upper layer to get time
	g_timer4_config->isr_call_back(diff_time);
    1fa6:	69 81       	ldd	r22, Y+1	; 0x01
    1fa8:	7a 81       	ldd	r23, Y+2	; 0x02
    1faa:	8b 81       	ldd	r24, Y+3	; 0x03
    1fac:	9c 81       	ldd	r25, Y+4	; 0x04
    1fae:	e0 91 86 1a 	lds	r30, 0x1A86	; 0x801a86 <g_timer4_config>
    1fb2:	f0 91 87 1a 	lds	r31, 0x1A87	; 0x801a87 <g_timer4_config+0x1>
    1fb6:	02 80       	ldd	r0, Z+2	; 0x02
    1fb8:	f3 81       	ldd	r31, Z+3	; 0x03
    1fba:	e0 2d       	mov	r30, r0
    1fbc:	19 95       	eicall
}
    1fbe:	0f 90       	pop	r0
    1fc0:	0f 90       	pop	r0
    1fc2:	0f 90       	pop	r0
    1fc4:	0f 90       	pop	r0
    1fc6:	df 91       	pop	r29
    1fc8:	cf 91       	pop	r28
    1fca:	ff 91       	pop	r31
    1fcc:	ef 91       	pop	r30
    1fce:	bf 91       	pop	r27
    1fd0:	af 91       	pop	r26
    1fd2:	9f 91       	pop	r25
    1fd4:	8f 91       	pop	r24
    1fd6:	7f 91       	pop	r23
    1fd8:	6f 91       	pop	r22
    1fda:	5f 91       	pop	r21
    1fdc:	4f 91       	pop	r20
    1fde:	3f 91       	pop	r19
    1fe0:	2f 91       	pop	r18
    1fe2:	0f 90       	pop	r0
    1fe4:	0b be       	out	0x3b, r0	; 59
    1fe6:	0f 90       	pop	r0
    1fe8:	0f be       	out	0x3f, r0	; 63
    1fea:	0f 90       	pop	r0
    1fec:	1f 90       	pop	r1
    1fee:	18 95       	reti

00001ff0 <__vector_47>:
// interrupted service routine when we have reach the number of  Ticks On Encoder
ISR(TIMER5_COMPA_vect)
{
    1ff0:	1f 92       	push	r1
    1ff2:	0f 92       	push	r0
    1ff4:	0f b6       	in	r0, 0x3f	; 63
    1ff6:	0f 92       	push	r0
    1ff8:	11 24       	eor	r1, r1
    1ffa:	0b b6       	in	r0, 0x3b	; 59
    1ffc:	0f 92       	push	r0
    1ffe:	2f 93       	push	r18
    2000:	3f 93       	push	r19
    2002:	4f 93       	push	r20
    2004:	5f 93       	push	r21
    2006:	6f 93       	push	r22
    2008:	7f 93       	push	r23
    200a:	8f 93       	push	r24
    200c:	9f 93       	push	r25
    200e:	af 93       	push	r26
    2010:	bf 93       	push	r27
    2012:	ef 93       	push	r30
    2014:	ff 93       	push	r31
    2016:	cf 93       	push	r28
    2018:	df 93       	push	r29
    201a:	00 d0       	rcall	.+0      	; 0x201c <__vector_47+0x2c>
    201c:	1f 92       	push	r1
    201e:	cd b7       	in	r28, 0x3d	; 61
    2020:	de b7       	in	r29, 0x3e	; 62
	volatile static uint32_t s_Timer5_old_time;
	volatile static uint32_t s_Timer5_new_time;
	//TOG_BIT(PORTB,0);
	//UART0_puts("TIMER55555555555555555\n");
	// get the time now
	s_Timer5_new_time = Get_millis();
    2022:	0e 94 d0 23 	call	0x47a0	; 0x47a0 <Get_millis>
    2026:	60 93 12 07 	sts	0x0712, r22	; 0x800712 <s_Timer5_new_time.1793>
    202a:	70 93 13 07 	sts	0x0713, r23	; 0x800713 <s_Timer5_new_time.1793+0x1>
    202e:	80 93 14 07 	sts	0x0714, r24	; 0x800714 <s_Timer5_new_time.1793+0x2>
    2032:	90 93 15 07 	sts	0x0715, r25	; 0x800715 <s_Timer5_new_time.1793+0x3>
	// calculate the difference between now and last interrupt
	diff_time = s_Timer5_new_time - s_Timer5_old_time;
    2036:	80 91 12 07 	lds	r24, 0x0712	; 0x800712 <s_Timer5_new_time.1793>
    203a:	90 91 13 07 	lds	r25, 0x0713	; 0x800713 <s_Timer5_new_time.1793+0x1>
    203e:	a0 91 14 07 	lds	r26, 0x0714	; 0x800714 <s_Timer5_new_time.1793+0x2>
    2042:	b0 91 15 07 	lds	r27, 0x0715	; 0x800715 <s_Timer5_new_time.1793+0x3>
    2046:	40 91 0e 07 	lds	r20, 0x070E	; 0x80070e <s_Timer5_old_time.1792>
    204a:	50 91 0f 07 	lds	r21, 0x070F	; 0x80070f <s_Timer5_old_time.1792+0x1>
    204e:	60 91 10 07 	lds	r22, 0x0710	; 0x800710 <s_Timer5_old_time.1792+0x2>
    2052:	70 91 11 07 	lds	r23, 0x0711	; 0x800711 <s_Timer5_old_time.1792+0x3>
    2056:	84 1b       	sub	r24, r20
    2058:	95 0b       	sbc	r25, r21
    205a:	a6 0b       	sbc	r26, r22
    205c:	b7 0b       	sbc	r27, r23
    205e:	89 83       	std	Y+1, r24	; 0x01
    2060:	9a 83       	std	Y+2, r25	; 0x02
    2062:	ab 83       	std	Y+3, r26	; 0x03
    2064:	bc 83       	std	Y+4, r27	; 0x04
	// save the to the old time to next interrupt
	s_Timer5_old_time = s_Timer5_new_time;
    2066:	80 91 12 07 	lds	r24, 0x0712	; 0x800712 <s_Timer5_new_time.1793>
    206a:	90 91 13 07 	lds	r25, 0x0713	; 0x800713 <s_Timer5_new_time.1793+0x1>
    206e:	a0 91 14 07 	lds	r26, 0x0714	; 0x800714 <s_Timer5_new_time.1793+0x2>
    2072:	b0 91 15 07 	lds	r27, 0x0715	; 0x800715 <s_Timer5_new_time.1793+0x3>
    2076:	80 93 0e 07 	sts	0x070E, r24	; 0x80070e <s_Timer5_old_time.1792>
    207a:	90 93 0f 07 	sts	0x070F, r25	; 0x80070f <s_Timer5_old_time.1792+0x1>
    207e:	a0 93 10 07 	sts	0x0710, r26	; 0x800710 <s_Timer5_old_time.1792+0x2>
    2082:	b0 93 11 07 	sts	0x0711, r27	; 0x800711 <s_Timer5_old_time.1792+0x3>
	// clear the counter
	TIMER5_COUNT_L = 0;
    2086:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <__TEXT_REGION_LENGTH__+0x700124>
	//call back function on upper layer to get time
	g_timer5_config->isr_call_back(diff_time);
    208a:	69 81       	ldd	r22, Y+1	; 0x01
    208c:	7a 81       	ldd	r23, Y+2	; 0x02
    208e:	8b 81       	ldd	r24, Y+3	; 0x03
    2090:	9c 81       	ldd	r25, Y+4	; 0x04
    2092:	e0 91 8a 1a 	lds	r30, 0x1A8A	; 0x801a8a <g_timer5_config>
    2096:	f0 91 8b 1a 	lds	r31, 0x1A8B	; 0x801a8b <g_timer5_config+0x1>
    209a:	02 80       	ldd	r0, Z+2	; 0x02
    209c:	f3 81       	ldd	r31, Z+3	; 0x03
    209e:	e0 2d       	mov	r30, r0
    20a0:	19 95       	eicall
	
}
    20a2:	0f 90       	pop	r0
    20a4:	0f 90       	pop	r0
    20a6:	0f 90       	pop	r0
    20a8:	0f 90       	pop	r0
    20aa:	df 91       	pop	r29
    20ac:	cf 91       	pop	r28
    20ae:	ff 91       	pop	r31
    20b0:	ef 91       	pop	r30
    20b2:	bf 91       	pop	r27
    20b4:	af 91       	pop	r26
    20b6:	9f 91       	pop	r25
    20b8:	8f 91       	pop	r24
    20ba:	7f 91       	pop	r23
    20bc:	6f 91       	pop	r22
    20be:	5f 91       	pop	r21
    20c0:	4f 91       	pop	r20
    20c2:	3f 91       	pop	r19
    20c4:	2f 91       	pop	r18
    20c6:	0f 90       	pop	r0
    20c8:	0b be       	out	0x3b, r0	; 59
    20ca:	0f 90       	pop	r0
    20cc:	0f be       	out	0x3f, r0	; 63
    20ce:	0f 90       	pop	r0
    20d0:	1f 90       	pop	r1
    20d2:	18 95       	reti

000020d4 <__vector_25>:

	while ((c = pgm_read_byte(progmem_s++))) {
		UART3_putc(c);
	}

} /* UART3_puts_p */
    20d4:	1f 92       	push	r1
    20d6:	0f 92       	push	r0
    20d8:	0f b6       	in	r0, 0x3f	; 63
    20da:	0f 92       	push	r0
    20dc:	11 24       	eor	r1, r1
    20de:	0b b6       	in	r0, 0x3b	; 59
    20e0:	0f 92       	push	r0
    20e2:	2f 93       	push	r18
    20e4:	3f 93       	push	r19
    20e6:	4f 93       	push	r20
    20e8:	5f 93       	push	r21
    20ea:	8f 93       	push	r24
    20ec:	9f 93       	push	r25
    20ee:	ef 93       	push	r30
    20f0:	ff 93       	push	r31
    20f2:	20 91 c0 00 	lds	r18, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
    20f6:	30 91 c6 00 	lds	r19, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    20fa:	28 71       	andi	r18, 0x18	; 24
    20fc:	80 91 43 0a 	lds	r24, 0x0A43	; 0x800a43 <UART_RxHead>
    2100:	90 e0       	ldi	r25, 0x00	; 0
    2102:	01 96       	adiw	r24, 0x01	; 1
    2104:	8f 77       	andi	r24, 0x7F	; 127
    2106:	99 27       	eor	r25, r25
    2108:	40 91 42 0a 	lds	r20, 0x0A42	; 0x800a42 <UART_RxTail>
    210c:	50 e0       	ldi	r21, 0x00	; 0
    210e:	84 17       	cp	r24, r20
    2110:	95 07       	cpc	r25, r21
    2112:	39 f0       	breq	.+14     	; 0x2122 <__vector_25+0x4e>
    2114:	80 93 43 0a 	sts	0x0A43, r24	; 0x800a43 <UART_RxHead>
    2118:	fc 01       	movw	r30, r24
    211a:	ea 5b       	subi	r30, 0xBA	; 186
    211c:	f5 4f       	sbci	r31, 0xF5	; 245
    211e:	30 83       	st	Z, r19
    2120:	01 c0       	rjmp	.+2      	; 0x2124 <__vector_25+0x50>
    2122:	22 e0       	ldi	r18, 0x02	; 2
    2124:	20 93 41 0a 	sts	0x0A41, r18	; 0x800a41 <UART_LastRxError>
    2128:	ff 91       	pop	r31
    212a:	ef 91       	pop	r30
    212c:	9f 91       	pop	r25
    212e:	8f 91       	pop	r24
    2130:	5f 91       	pop	r21
    2132:	4f 91       	pop	r20
    2134:	3f 91       	pop	r19
    2136:	2f 91       	pop	r18
    2138:	0f 90       	pop	r0
    213a:	0b be       	out	0x3b, r0	; 59
    213c:	0f 90       	pop	r0
    213e:	0f be       	out	0x3f, r0	; 63
    2140:	0f 90       	pop	r0
    2142:	1f 90       	pop	r1
    2144:	18 95       	reti

00002146 <__vector_26>:
    2146:	1f 92       	push	r1
    2148:	0f 92       	push	r0
    214a:	0f b6       	in	r0, 0x3f	; 63
    214c:	0f 92       	push	r0
    214e:	11 24       	eor	r1, r1
    2150:	0b b6       	in	r0, 0x3b	; 59
    2152:	0f 92       	push	r0
    2154:	8f 93       	push	r24
    2156:	9f 93       	push	r25
    2158:	ef 93       	push	r30
    215a:	ff 93       	push	r31
    215c:	90 91 45 0a 	lds	r25, 0x0A45	; 0x800a45 <UART_TxHead>
    2160:	80 91 44 0a 	lds	r24, 0x0A44	; 0x800a44 <UART_TxTail>
    2164:	98 17       	cp	r25, r24
    2166:	89 f0       	breq	.+34     	; 0x218a <__vector_26+0x44>
    2168:	80 91 44 0a 	lds	r24, 0x0A44	; 0x800a44 <UART_TxTail>
    216c:	90 e0       	ldi	r25, 0x00	; 0
    216e:	01 96       	adiw	r24, 0x01	; 1
    2170:	8f 77       	andi	r24, 0x7F	; 127
    2172:	99 27       	eor	r25, r25
    2174:	80 93 44 0a 	sts	0x0A44, r24	; 0x800a44 <UART_TxTail>
    2178:	fc 01       	movw	r30, r24
    217a:	ea 53       	subi	r30, 0x3A	; 58
    217c:	f5 4f       	sbci	r31, 0xF5	; 245
    217e:	80 81       	ld	r24, Z
    2180:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    2184:	10 92 31 07 	sts	0x0731, r1	; 0x800731 <UART0_Transmission_end>
    2188:	08 c0       	rjmp	.+16     	; 0x219a <__vector_26+0x54>
    218a:	e1 ec       	ldi	r30, 0xC1	; 193
    218c:	f0 e0       	ldi	r31, 0x00	; 0
    218e:	80 81       	ld	r24, Z
    2190:	8f 7d       	andi	r24, 0xDF	; 223
    2192:	80 83       	st	Z, r24
    2194:	81 e0       	ldi	r24, 0x01	; 1
    2196:	80 93 31 07 	sts	0x0731, r24	; 0x800731 <UART0_Transmission_end>
    219a:	ff 91       	pop	r31
    219c:	ef 91       	pop	r30
    219e:	9f 91       	pop	r25
    21a0:	8f 91       	pop	r24
    21a2:	0f 90       	pop	r0
    21a4:	0b be       	out	0x3b, r0	; 59
    21a6:	0f 90       	pop	r0
    21a8:	0f be       	out	0x3f, r0	; 63
    21aa:	0f 90       	pop	r0
    21ac:	1f 90       	pop	r1
    21ae:	18 95       	reti

000021b0 <UART0_init>:
    21b0:	0f 93       	push	r16
    21b2:	1f 93       	push	r17
    21b4:	8b 01       	movw	r16, r22
    21b6:	9c 01       	movw	r18, r24
    21b8:	f8 94       	cli
    21ba:	10 92 45 0a 	sts	0x0A45, r1	; 0x800a45 <UART_TxHead>
    21be:	10 92 44 0a 	sts	0x0A44, r1	; 0x800a44 <UART_TxTail>
    21c2:	10 92 43 0a 	sts	0x0A43, r1	; 0x800a43 <UART_RxHead>
    21c6:	10 92 42 0a 	sts	0x0A42, r1	; 0x800a42 <UART_RxTail>
    21ca:	78 94       	sei
    21cc:	dc 01       	movw	r26, r24
    21ce:	cb 01       	movw	r24, r22
    21d0:	80 58       	subi	r24, 0x80	; 128
    21d2:	9b 47       	sbci	r25, 0x7B	; 123
    21d4:	a1 4e       	sbci	r26, 0xE1	; 225
    21d6:	bf 4f       	sbci	r27, 0xFF	; 255
    21d8:	88 0f       	add	r24, r24
    21da:	99 1f       	adc	r25, r25
    21dc:	aa 1f       	adc	r26, r26
    21de:	bb 1f       	adc	r27, r27
    21e0:	88 0f       	add	r24, r24
    21e2:	99 1f       	adc	r25, r25
    21e4:	aa 1f       	adc	r26, r26
    21e6:	bb 1f       	adc	r27, r27
    21e8:	bc 01       	movw	r22, r24
    21ea:	cd 01       	movw	r24, r26
    21ec:	66 0f       	add	r22, r22
    21ee:	77 1f       	adc	r23, r23
    21f0:	88 1f       	adc	r24, r24
    21f2:	99 1f       	adc	r25, r25
    21f4:	00 0f       	add	r16, r16
    21f6:	11 1f       	adc	r17, r17
    21f8:	22 1f       	adc	r18, r18
    21fa:	33 1f       	adc	r19, r19
    21fc:	00 0f       	add	r16, r16
    21fe:	11 1f       	adc	r17, r17
    2200:	22 1f       	adc	r18, r18
    2202:	33 1f       	adc	r19, r19
    2204:	a9 01       	movw	r20, r18
    2206:	98 01       	movw	r18, r16
    2208:	22 0f       	add	r18, r18
    220a:	33 1f       	adc	r19, r19
    220c:	44 1f       	adc	r20, r20
    220e:	55 1f       	adc	r21, r21
    2210:	22 0f       	add	r18, r18
    2212:	33 1f       	adc	r19, r19
    2214:	44 1f       	adc	r20, r20
    2216:	55 1f       	adc	r21, r21
    2218:	0e 94 b6 27 	call	0x4f6c	; 0x4f6c <__udivmodsi4>
    221c:	ba 01       	movw	r22, r20
    221e:	a9 01       	movw	r20, r18
    2220:	41 50       	subi	r20, 0x01	; 1
    2222:	51 09       	sbc	r21, r1
    2224:	61 09       	sbc	r22, r1
    2226:	71 09       	sbc	r23, r1
    2228:	57 ff       	sbrs	r21, 7
    222a:	06 c0       	rjmp	.+12     	; 0x2238 <__stack+0x39>
    222c:	82 e0       	ldi	r24, 0x02	; 2
    222e:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
    2232:	5f 77       	andi	r21, 0x7F	; 127
    2234:	66 27       	eor	r22, r22
    2236:	77 27       	eor	r23, r23
    2238:	bb 27       	eor	r27, r27
    223a:	a7 2f       	mov	r26, r23
    223c:	96 2f       	mov	r25, r22
    223e:	85 2f       	mov	r24, r21
    2240:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
    2244:	40 93 c4 00 	sts	0x00C4, r20	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
    2248:	88 e9       	ldi	r24, 0x98	; 152
    224a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    224e:	86 e0       	ldi	r24, 0x06	; 6
    2250:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
    2254:	1f 91       	pop	r17
    2256:	0f 91       	pop	r16
    2258:	08 95       	ret

0000225a <UART0_putc>:
    225a:	40 91 45 0a 	lds	r20, 0x0A45	; 0x800a45 <UART_TxHead>
    225e:	50 e0       	ldi	r21, 0x00	; 0
    2260:	4f 5f       	subi	r20, 0xFF	; 255
    2262:	5f 4f       	sbci	r21, 0xFF	; 255
    2264:	4f 77       	andi	r20, 0x7F	; 127
    2266:	55 27       	eor	r21, r21
    2268:	20 91 44 0a 	lds	r18, 0x0A44	; 0x800a44 <UART_TxTail>
    226c:	30 e0       	ldi	r19, 0x00	; 0
    226e:	42 17       	cp	r20, r18
    2270:	53 07       	cpc	r21, r19
    2272:	d1 f3       	breq	.-12     	; 0x2268 <UART0_putc+0xe>
    2274:	fa 01       	movw	r30, r20
    2276:	ea 53       	subi	r30, 0x3A	; 58
    2278:	f5 4f       	sbci	r31, 0xF5	; 245
    227a:	80 83       	st	Z, r24
    227c:	40 93 45 0a 	sts	0x0A45, r20	; 0x800a45 <UART_TxHead>
    2280:	e1 ec       	ldi	r30, 0xC1	; 193
    2282:	f0 e0       	ldi	r31, 0x00	; 0
    2284:	80 81       	ld	r24, Z
    2286:	80 62       	ori	r24, 0x20	; 32
    2288:	80 83       	st	Z, r24
    228a:	08 95       	ret

0000228c <UART0_OutUDec>:
    228c:	0f 93       	push	r16
    228e:	1f 93       	push	r17
    2290:	cf 93       	push	r28
    2292:	df 93       	push	r29
    2294:	6a 30       	cpi	r22, 0x0A	; 10
    2296:	71 05       	cpc	r23, r1
    2298:	81 05       	cpc	r24, r1
    229a:	91 05       	cpc	r25, r1
    229c:	58 f0       	brcs	.+22     	; 0x22b4 <UART0_OutUDec+0x28>
    229e:	2a e0       	ldi	r18, 0x0A	; 10
    22a0:	30 e0       	ldi	r19, 0x00	; 0
    22a2:	40 e0       	ldi	r20, 0x00	; 0
    22a4:	50 e0       	ldi	r21, 0x00	; 0
    22a6:	0e 94 b6 27 	call	0x4f6c	; 0x4f6c <__udivmodsi4>
    22aa:	06 2f       	mov	r16, r22
    22ac:	ca 01       	movw	r24, r20
    22ae:	b9 01       	movw	r22, r18
    22b0:	ed df       	rcall	.-38     	; 0x228c <UART0_OutUDec>
    22b2:	60 2f       	mov	r22, r16
    22b4:	80 e3       	ldi	r24, 0x30	; 48
    22b6:	86 0f       	add	r24, r22
    22b8:	d0 df       	rcall	.-96     	; 0x225a <UART0_putc>
    22ba:	df 91       	pop	r29
    22bc:	cf 91       	pop	r28
    22be:	1f 91       	pop	r17
    22c0:	0f 91       	pop	r16
    22c2:	08 95       	ret

000022c4 <UART0_puts>:
    22c4:	cf 93       	push	r28
    22c6:	df 93       	push	r29
    22c8:	ec 01       	movw	r28, r24
    22ca:	88 81       	ld	r24, Y
    22cc:	88 23       	and	r24, r24
    22ce:	29 f0       	breq	.+10     	; 0x22da <UART0_puts+0x16>
    22d0:	21 96       	adiw	r28, 0x01	; 1
    22d2:	c3 df       	rcall	.-122    	; 0x225a <UART0_putc>
    22d4:	89 91       	ld	r24, Y+
    22d6:	81 11       	cpse	r24, r1
    22d8:	fc cf       	rjmp	.-8      	; 0x22d2 <UART0_puts+0xe>
    22da:	df 91       	pop	r29
    22dc:	cf 91       	pop	r28
    22de:	08 95       	ret

000022e0 <__vector_36>:
    22e0:	1f 92       	push	r1
    22e2:	0f 92       	push	r0
    22e4:	0f b6       	in	r0, 0x3f	; 63
    22e6:	0f 92       	push	r0
    22e8:	11 24       	eor	r1, r1
    22ea:	0b b6       	in	r0, 0x3b	; 59
    22ec:	0f 92       	push	r0
    22ee:	2f 93       	push	r18
    22f0:	3f 93       	push	r19
    22f2:	4f 93       	push	r20
    22f4:	5f 93       	push	r21
    22f6:	8f 93       	push	r24
    22f8:	9f 93       	push	r25
    22fa:	ef 93       	push	r30
    22fc:	ff 93       	push	r31
    22fe:	20 91 c8 00 	lds	r18, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
    2302:	30 91 ce 00 	lds	r19, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    2306:	28 71       	andi	r18, 0x18	; 24
    2308:	80 91 3e 09 	lds	r24, 0x093E	; 0x80093e <UART1_RxHead>
    230c:	90 e0       	ldi	r25, 0x00	; 0
    230e:	01 96       	adiw	r24, 0x01	; 1
    2310:	8f 77       	andi	r24, 0x7F	; 127
    2312:	99 27       	eor	r25, r25
    2314:	40 91 3d 09 	lds	r20, 0x093D	; 0x80093d <UART1_RxTail>
    2318:	50 e0       	ldi	r21, 0x00	; 0
    231a:	84 17       	cp	r24, r20
    231c:	95 07       	cpc	r25, r21
    231e:	39 f0       	breq	.+14     	; 0x232e <__vector_36+0x4e>
    2320:	80 93 3e 09 	sts	0x093E, r24	; 0x80093e <UART1_RxHead>
    2324:	fc 01       	movw	r30, r24
    2326:	ef 5b       	subi	r30, 0xBF	; 191
    2328:	f6 4f       	sbci	r31, 0xF6	; 246
    232a:	30 83       	st	Z, r19
    232c:	01 c0       	rjmp	.+2      	; 0x2330 <__vector_36+0x50>
    232e:	22 e0       	ldi	r18, 0x02	; 2
    2330:	20 93 3c 09 	sts	0x093C, r18	; 0x80093c <UART1_LastRxError>
    2334:	ff 91       	pop	r31
    2336:	ef 91       	pop	r30
    2338:	9f 91       	pop	r25
    233a:	8f 91       	pop	r24
    233c:	5f 91       	pop	r21
    233e:	4f 91       	pop	r20
    2340:	3f 91       	pop	r19
    2342:	2f 91       	pop	r18
    2344:	0f 90       	pop	r0
    2346:	0b be       	out	0x3b, r0	; 59
    2348:	0f 90       	pop	r0
    234a:	0f be       	out	0x3f, r0	; 63
    234c:	0f 90       	pop	r0
    234e:	1f 90       	pop	r1
    2350:	18 95       	reti

00002352 <__vector_37>:
    2352:	1f 92       	push	r1
    2354:	0f 92       	push	r0
    2356:	0f b6       	in	r0, 0x3f	; 63
    2358:	0f 92       	push	r0
    235a:	11 24       	eor	r1, r1
    235c:	0b b6       	in	r0, 0x3b	; 59
    235e:	0f 92       	push	r0
    2360:	8f 93       	push	r24
    2362:	9f 93       	push	r25
    2364:	ef 93       	push	r30
    2366:	ff 93       	push	r31
    2368:	90 91 40 09 	lds	r25, 0x0940	; 0x800940 <UART1_TxHead>
    236c:	80 91 3f 09 	lds	r24, 0x093F	; 0x80093f <UART1_TxTail>
    2370:	98 17       	cp	r25, r24
    2372:	89 f0       	breq	.+34     	; 0x2396 <__vector_37+0x44>
    2374:	80 91 3f 09 	lds	r24, 0x093F	; 0x80093f <UART1_TxTail>
    2378:	90 e0       	ldi	r25, 0x00	; 0
    237a:	01 96       	adiw	r24, 0x01	; 1
    237c:	8f 77       	andi	r24, 0x7F	; 127
    237e:	99 27       	eor	r25, r25
    2380:	80 93 3f 09 	sts	0x093F, r24	; 0x80093f <UART1_TxTail>
    2384:	fc 01       	movw	r30, r24
    2386:	ef 53       	subi	r30, 0x3F	; 63
    2388:	f6 4f       	sbci	r31, 0xF6	; 246
    238a:	80 81       	ld	r24, Z
    238c:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    2390:	10 92 30 07 	sts	0x0730, r1	; 0x800730 <UART1_Transmission_end>
    2394:	08 c0       	rjmp	.+16     	; 0x23a6 <__vector_37+0x54>
    2396:	e9 ec       	ldi	r30, 0xC9	; 201
    2398:	f0 e0       	ldi	r31, 0x00	; 0
    239a:	80 81       	ld	r24, Z
    239c:	8f 7d       	andi	r24, 0xDF	; 223
    239e:	80 83       	st	Z, r24
    23a0:	81 e0       	ldi	r24, 0x01	; 1
    23a2:	80 93 30 07 	sts	0x0730, r24	; 0x800730 <UART1_Transmission_end>
    23a6:	ff 91       	pop	r31
    23a8:	ef 91       	pop	r30
    23aa:	9f 91       	pop	r25
    23ac:	8f 91       	pop	r24
    23ae:	0f 90       	pop	r0
    23b0:	0b be       	out	0x3b, r0	; 59
    23b2:	0f 90       	pop	r0
    23b4:	0f be       	out	0x3f, r0	; 63
    23b6:	0f 90       	pop	r0
    23b8:	1f 90       	pop	r1
    23ba:	18 95       	reti

000023bc <UART1_init>:
    23bc:	0f 93       	push	r16
    23be:	1f 93       	push	r17
    23c0:	8b 01       	movw	r16, r22
    23c2:	9c 01       	movw	r18, r24
    23c4:	f8 94       	cli
    23c6:	10 92 40 09 	sts	0x0940, r1	; 0x800940 <UART1_TxHead>
    23ca:	10 92 3f 09 	sts	0x093F, r1	; 0x80093f <UART1_TxTail>
    23ce:	10 92 3e 09 	sts	0x093E, r1	; 0x80093e <UART1_RxHead>
    23d2:	10 92 3d 09 	sts	0x093D, r1	; 0x80093d <UART1_RxTail>
    23d6:	78 94       	sei
    23d8:	dc 01       	movw	r26, r24
    23da:	cb 01       	movw	r24, r22
    23dc:	80 58       	subi	r24, 0x80	; 128
    23de:	9b 47       	sbci	r25, 0x7B	; 123
    23e0:	a1 4e       	sbci	r26, 0xE1	; 225
    23e2:	bf 4f       	sbci	r27, 0xFF	; 255
    23e4:	88 0f       	add	r24, r24
    23e6:	99 1f       	adc	r25, r25
    23e8:	aa 1f       	adc	r26, r26
    23ea:	bb 1f       	adc	r27, r27
    23ec:	88 0f       	add	r24, r24
    23ee:	99 1f       	adc	r25, r25
    23f0:	aa 1f       	adc	r26, r26
    23f2:	bb 1f       	adc	r27, r27
    23f4:	bc 01       	movw	r22, r24
    23f6:	cd 01       	movw	r24, r26
    23f8:	66 0f       	add	r22, r22
    23fa:	77 1f       	adc	r23, r23
    23fc:	88 1f       	adc	r24, r24
    23fe:	99 1f       	adc	r25, r25
    2400:	00 0f       	add	r16, r16
    2402:	11 1f       	adc	r17, r17
    2404:	22 1f       	adc	r18, r18
    2406:	33 1f       	adc	r19, r19
    2408:	00 0f       	add	r16, r16
    240a:	11 1f       	adc	r17, r17
    240c:	22 1f       	adc	r18, r18
    240e:	33 1f       	adc	r19, r19
    2410:	a9 01       	movw	r20, r18
    2412:	98 01       	movw	r18, r16
    2414:	22 0f       	add	r18, r18
    2416:	33 1f       	adc	r19, r19
    2418:	44 1f       	adc	r20, r20
    241a:	55 1f       	adc	r21, r21
    241c:	22 0f       	add	r18, r18
    241e:	33 1f       	adc	r19, r19
    2420:	44 1f       	adc	r20, r20
    2422:	55 1f       	adc	r21, r21
    2424:	0e 94 b6 27 	call	0x4f6c	; 0x4f6c <__udivmodsi4>
    2428:	ba 01       	movw	r22, r20
    242a:	a9 01       	movw	r20, r18
    242c:	41 50       	subi	r20, 0x01	; 1
    242e:	51 09       	sbc	r21, r1
    2430:	61 09       	sbc	r22, r1
    2432:	71 09       	sbc	r23, r1
    2434:	57 ff       	sbrs	r21, 7
    2436:	06 c0       	rjmp	.+12     	; 0x2444 <UART1_init+0x88>
    2438:	82 e0       	ldi	r24, 0x02	; 2
    243a:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
    243e:	5f 77       	andi	r21, 0x7F	; 127
    2440:	66 27       	eor	r22, r22
    2442:	77 27       	eor	r23, r23
    2444:	bb 27       	eor	r27, r27
    2446:	a7 2f       	mov	r26, r23
    2448:	96 2f       	mov	r25, r22
    244a:	85 2f       	mov	r24, r21
    244c:	80 93 cd 00 	sts	0x00CD, r24	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7000cd>
    2450:	40 93 cc 00 	sts	0x00CC, r20	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7000cc>
    2454:	88 e9       	ldi	r24, 0x98	; 152
    2456:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7000c9>
    245a:	86 e0       	ldi	r24, 0x06	; 6
    245c:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7000ca>
    2460:	1f 91       	pop	r17
    2462:	0f 91       	pop	r16
    2464:	08 95       	ret

00002466 <UART1_getc>:
    2466:	f8 94       	cli
    2468:	90 91 3e 09 	lds	r25, 0x093E	; 0x80093e <UART1_RxHead>
    246c:	80 91 3d 09 	lds	r24, 0x093D	; 0x80093d <UART1_RxTail>
    2470:	98 13       	cpse	r25, r24
    2472:	04 c0       	rjmp	.+8      	; 0x247c <UART1_getc+0x16>
    2474:	78 94       	sei
    2476:	80 e0       	ldi	r24, 0x00	; 0
    2478:	91 e0       	ldi	r25, 0x01	; 1
    247a:	08 95       	ret
    247c:	80 91 3d 09 	lds	r24, 0x093D	; 0x80093d <UART1_RxTail>
    2480:	90 e0       	ldi	r25, 0x00	; 0
    2482:	01 96       	adiw	r24, 0x01	; 1
    2484:	8f 77       	andi	r24, 0x7F	; 127
    2486:	99 27       	eor	r25, r25
    2488:	80 93 3d 09 	sts	0x093D, r24	; 0x80093d <UART1_RxTail>
    248c:	78 94       	sei
    248e:	fc 01       	movw	r30, r24
    2490:	ef 5b       	subi	r30, 0xBF	; 191
    2492:	f6 4f       	sbci	r31, 0xF6	; 246
    2494:	20 81       	ld	r18, Z
    2496:	80 91 3c 09 	lds	r24, 0x093C	; 0x80093c <UART1_LastRxError>
    249a:	90 e0       	ldi	r25, 0x00	; 0
    249c:	98 2f       	mov	r25, r24
    249e:	88 27       	eor	r24, r24
    24a0:	82 0f       	add	r24, r18
    24a2:	91 1d       	adc	r25, r1
    24a4:	08 95       	ret

000024a6 <UART1_putc>:
    24a6:	40 91 40 09 	lds	r20, 0x0940	; 0x800940 <UART1_TxHead>
    24aa:	50 e0       	ldi	r21, 0x00	; 0
    24ac:	4f 5f       	subi	r20, 0xFF	; 255
    24ae:	5f 4f       	sbci	r21, 0xFF	; 255
    24b0:	4f 77       	andi	r20, 0x7F	; 127
    24b2:	55 27       	eor	r21, r21
    24b4:	20 91 3f 09 	lds	r18, 0x093F	; 0x80093f <UART1_TxTail>
    24b8:	30 e0       	ldi	r19, 0x00	; 0
    24ba:	42 17       	cp	r20, r18
    24bc:	53 07       	cpc	r21, r19
    24be:	d1 f3       	breq	.-12     	; 0x24b4 <UART1_putc+0xe>
    24c0:	fa 01       	movw	r30, r20
    24c2:	ef 53       	subi	r30, 0x3F	; 63
    24c4:	f6 4f       	sbci	r31, 0xF6	; 246
    24c6:	80 83       	st	Z, r24
    24c8:	40 93 40 09 	sts	0x0940, r20	; 0x800940 <UART1_TxHead>
    24cc:	e9 ec       	ldi	r30, 0xC9	; 201
    24ce:	f0 e0       	ldi	r31, 0x00	; 0
    24d0:	80 81       	ld	r24, Z
    24d2:	80 62       	ori	r24, 0x20	; 32
    24d4:	80 83       	st	Z, r24
    24d6:	08 95       	ret

000024d8 <UART1_available>:
    24d8:	f8 94       	cli
    24da:	80 91 3e 09 	lds	r24, 0x093E	; 0x80093e <UART1_RxHead>
    24de:	20 91 3d 09 	lds	r18, 0x093D	; 0x80093d <UART1_RxTail>
    24e2:	78 94       	sei
    24e4:	90 e0       	ldi	r25, 0x00	; 0
    24e6:	80 58       	subi	r24, 0x80	; 128
    24e8:	9f 4f       	sbci	r25, 0xFF	; 255
    24ea:	82 1b       	sub	r24, r18
    24ec:	91 09       	sbc	r25, r1
    24ee:	8f 77       	andi	r24, 0x7F	; 127
    24f0:	99 27       	eor	r25, r25
    24f2:	08 95       	ret

000024f4 <UART1_flush>:
    24f4:	80 91 30 07 	lds	r24, 0x0730	; 0x800730 <UART1_Transmission_end>
    24f8:	88 23       	and	r24, r24
    24fa:	e1 f3       	breq	.-8      	; 0x24f4 <UART1_flush>
    24fc:	08 95       	ret

000024fe <__vector_51>:
    24fe:	1f 92       	push	r1
    2500:	0f 92       	push	r0
    2502:	0f b6       	in	r0, 0x3f	; 63
    2504:	0f 92       	push	r0
    2506:	11 24       	eor	r1, r1
    2508:	0b b6       	in	r0, 0x3b	; 59
    250a:	0f 92       	push	r0
    250c:	2f 93       	push	r18
    250e:	3f 93       	push	r19
    2510:	4f 93       	push	r20
    2512:	5f 93       	push	r21
    2514:	8f 93       	push	r24
    2516:	9f 93       	push	r25
    2518:	ef 93       	push	r30
    251a:	ff 93       	push	r31
    251c:	20 91 d0 00 	lds	r18, 0x00D0	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7000d0>
    2520:	30 91 d6 00 	lds	r19, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    2524:	28 71       	andi	r18, 0x18	; 24
    2526:	80 91 39 08 	lds	r24, 0x0839	; 0x800839 <UART2_RxHead>
    252a:	90 e0       	ldi	r25, 0x00	; 0
    252c:	01 96       	adiw	r24, 0x01	; 1
    252e:	8f 77       	andi	r24, 0x7F	; 127
    2530:	99 27       	eor	r25, r25
    2532:	40 91 38 08 	lds	r20, 0x0838	; 0x800838 <UART2_RxTail>
    2536:	50 e0       	ldi	r21, 0x00	; 0
    2538:	84 17       	cp	r24, r20
    253a:	95 07       	cpc	r25, r21
    253c:	39 f0       	breq	.+14     	; 0x254c <__vector_51+0x4e>
    253e:	80 93 39 08 	sts	0x0839, r24	; 0x800839 <UART2_RxHead>
    2542:	fc 01       	movw	r30, r24
    2544:	e4 5c       	subi	r30, 0xC4	; 196
    2546:	f7 4f       	sbci	r31, 0xF7	; 247
    2548:	30 83       	st	Z, r19
    254a:	01 c0       	rjmp	.+2      	; 0x254e <__vector_51+0x50>
    254c:	22 e0       	ldi	r18, 0x02	; 2
    254e:	20 93 37 08 	sts	0x0837, r18	; 0x800837 <UART2_LastRxError>
    2552:	ff 91       	pop	r31
    2554:	ef 91       	pop	r30
    2556:	9f 91       	pop	r25
    2558:	8f 91       	pop	r24
    255a:	5f 91       	pop	r21
    255c:	4f 91       	pop	r20
    255e:	3f 91       	pop	r19
    2560:	2f 91       	pop	r18
    2562:	0f 90       	pop	r0
    2564:	0b be       	out	0x3b, r0	; 59
    2566:	0f 90       	pop	r0
    2568:	0f be       	out	0x3f, r0	; 63
    256a:	0f 90       	pop	r0
    256c:	1f 90       	pop	r1
    256e:	18 95       	reti

00002570 <__vector_52>:
    2570:	1f 92       	push	r1
    2572:	0f 92       	push	r0
    2574:	0f b6       	in	r0, 0x3f	; 63
    2576:	0f 92       	push	r0
    2578:	11 24       	eor	r1, r1
    257a:	0b b6       	in	r0, 0x3b	; 59
    257c:	0f 92       	push	r0
    257e:	8f 93       	push	r24
    2580:	9f 93       	push	r25
    2582:	ef 93       	push	r30
    2584:	ff 93       	push	r31
    2586:	90 91 3b 08 	lds	r25, 0x083B	; 0x80083b <UART2_TxHead>
    258a:	80 91 3a 08 	lds	r24, 0x083A	; 0x80083a <UART2_TxTail>
    258e:	98 17       	cp	r25, r24
    2590:	89 f0       	breq	.+34     	; 0x25b4 <__vector_52+0x44>
    2592:	80 91 3a 08 	lds	r24, 0x083A	; 0x80083a <UART2_TxTail>
    2596:	90 e0       	ldi	r25, 0x00	; 0
    2598:	01 96       	adiw	r24, 0x01	; 1
    259a:	8f 77       	andi	r24, 0x7F	; 127
    259c:	99 27       	eor	r25, r25
    259e:	80 93 3a 08 	sts	0x083A, r24	; 0x80083a <UART2_TxTail>
    25a2:	fc 01       	movw	r30, r24
    25a4:	e4 54       	subi	r30, 0x44	; 68
    25a6:	f7 4f       	sbci	r31, 0xF7	; 247
    25a8:	80 81       	ld	r24, Z
    25aa:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    25ae:	10 92 2f 07 	sts	0x072F, r1	; 0x80072f <UART2_Transmission_end>
    25b2:	08 c0       	rjmp	.+16     	; 0x25c4 <__vector_52+0x54>
    25b4:	e1 ed       	ldi	r30, 0xD1	; 209
    25b6:	f0 e0       	ldi	r31, 0x00	; 0
    25b8:	80 81       	ld	r24, Z
    25ba:	8f 7d       	andi	r24, 0xDF	; 223
    25bc:	80 83       	st	Z, r24
    25be:	81 e0       	ldi	r24, 0x01	; 1
    25c0:	80 93 2f 07 	sts	0x072F, r24	; 0x80072f <UART2_Transmission_end>
    25c4:	ff 91       	pop	r31
    25c6:	ef 91       	pop	r30
    25c8:	9f 91       	pop	r25
    25ca:	8f 91       	pop	r24
    25cc:	0f 90       	pop	r0
    25ce:	0b be       	out	0x3b, r0	; 59
    25d0:	0f 90       	pop	r0
    25d2:	0f be       	out	0x3f, r0	; 63
    25d4:	0f 90       	pop	r0
    25d6:	1f 90       	pop	r1
    25d8:	18 95       	reti

000025da <UART2_init>:
    25da:	0f 93       	push	r16
    25dc:	1f 93       	push	r17
    25de:	8b 01       	movw	r16, r22
    25e0:	9c 01       	movw	r18, r24
    25e2:	f8 94       	cli
    25e4:	10 92 3b 08 	sts	0x083B, r1	; 0x80083b <UART2_TxHead>
    25e8:	10 92 3a 08 	sts	0x083A, r1	; 0x80083a <UART2_TxTail>
    25ec:	10 92 39 08 	sts	0x0839, r1	; 0x800839 <UART2_RxHead>
    25f0:	10 92 38 08 	sts	0x0838, r1	; 0x800838 <UART2_RxTail>
    25f4:	78 94       	sei
    25f6:	dc 01       	movw	r26, r24
    25f8:	cb 01       	movw	r24, r22
    25fa:	80 58       	subi	r24, 0x80	; 128
    25fc:	9b 47       	sbci	r25, 0x7B	; 123
    25fe:	a1 4e       	sbci	r26, 0xE1	; 225
    2600:	bf 4f       	sbci	r27, 0xFF	; 255
    2602:	88 0f       	add	r24, r24
    2604:	99 1f       	adc	r25, r25
    2606:	aa 1f       	adc	r26, r26
    2608:	bb 1f       	adc	r27, r27
    260a:	88 0f       	add	r24, r24
    260c:	99 1f       	adc	r25, r25
    260e:	aa 1f       	adc	r26, r26
    2610:	bb 1f       	adc	r27, r27
    2612:	bc 01       	movw	r22, r24
    2614:	cd 01       	movw	r24, r26
    2616:	66 0f       	add	r22, r22
    2618:	77 1f       	adc	r23, r23
    261a:	88 1f       	adc	r24, r24
    261c:	99 1f       	adc	r25, r25
    261e:	00 0f       	add	r16, r16
    2620:	11 1f       	adc	r17, r17
    2622:	22 1f       	adc	r18, r18
    2624:	33 1f       	adc	r19, r19
    2626:	00 0f       	add	r16, r16
    2628:	11 1f       	adc	r17, r17
    262a:	22 1f       	adc	r18, r18
    262c:	33 1f       	adc	r19, r19
    262e:	a9 01       	movw	r20, r18
    2630:	98 01       	movw	r18, r16
    2632:	22 0f       	add	r18, r18
    2634:	33 1f       	adc	r19, r19
    2636:	44 1f       	adc	r20, r20
    2638:	55 1f       	adc	r21, r21
    263a:	22 0f       	add	r18, r18
    263c:	33 1f       	adc	r19, r19
    263e:	44 1f       	adc	r20, r20
    2640:	55 1f       	adc	r21, r21
    2642:	0e 94 b6 27 	call	0x4f6c	; 0x4f6c <__udivmodsi4>
    2646:	ba 01       	movw	r22, r20
    2648:	a9 01       	movw	r20, r18
    264a:	41 50       	subi	r20, 0x01	; 1
    264c:	51 09       	sbc	r21, r1
    264e:	61 09       	sbc	r22, r1
    2650:	71 09       	sbc	r23, r1
    2652:	57 ff       	sbrs	r21, 7
    2654:	06 c0       	rjmp	.+12     	; 0x2662 <UART2_init+0x88>
    2656:	82 e0       	ldi	r24, 0x02	; 2
    2658:	80 93 d0 00 	sts	0x00D0, r24	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7000d0>
    265c:	5f 77       	andi	r21, 0x7F	; 127
    265e:	66 27       	eor	r22, r22
    2660:	77 27       	eor	r23, r23
    2662:	bb 27       	eor	r27, r27
    2664:	a7 2f       	mov	r26, r23
    2666:	96 2f       	mov	r25, r22
    2668:	85 2f       	mov	r24, r21
    266a:	80 93 d5 00 	sts	0x00D5, r24	; 0x8000d5 <__TEXT_REGION_LENGTH__+0x7000d5>
    266e:	40 93 d4 00 	sts	0x00D4, r20	; 0x8000d4 <__TEXT_REGION_LENGTH__+0x7000d4>
    2672:	88 e9       	ldi	r24, 0x98	; 152
    2674:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7000d1>
    2678:	86 e0       	ldi	r24, 0x06	; 6
    267a:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7000d2>
    267e:	1f 91       	pop	r17
    2680:	0f 91       	pop	r16
    2682:	08 95       	ret

00002684 <UART2_getc>:
    2684:	90 91 39 08 	lds	r25, 0x0839	; 0x800839 <UART2_RxHead>
    2688:	80 91 38 08 	lds	r24, 0x0838	; 0x800838 <UART2_RxTail>
    268c:	98 17       	cp	r25, r24
    268e:	a1 f0       	breq	.+40     	; 0x26b8 <UART2_getc+0x34>
    2690:	80 91 38 08 	lds	r24, 0x0838	; 0x800838 <UART2_RxTail>
    2694:	90 e0       	ldi	r25, 0x00	; 0
    2696:	01 96       	adiw	r24, 0x01	; 1
    2698:	8f 77       	andi	r24, 0x7F	; 127
    269a:	99 27       	eor	r25, r25
    269c:	80 93 38 08 	sts	0x0838, r24	; 0x800838 <UART2_RxTail>
    26a0:	fc 01       	movw	r30, r24
    26a2:	e4 5c       	subi	r30, 0xC4	; 196
    26a4:	f7 4f       	sbci	r31, 0xF7	; 247
    26a6:	20 81       	ld	r18, Z
    26a8:	80 91 37 08 	lds	r24, 0x0837	; 0x800837 <UART2_LastRxError>
    26ac:	90 e0       	ldi	r25, 0x00	; 0
    26ae:	98 2f       	mov	r25, r24
    26b0:	88 27       	eor	r24, r24
    26b2:	82 0f       	add	r24, r18
    26b4:	91 1d       	adc	r25, r1
    26b6:	08 95       	ret
    26b8:	80 e0       	ldi	r24, 0x00	; 0
    26ba:	91 e0       	ldi	r25, 0x01	; 1
    26bc:	08 95       	ret

000026be <UART2_putc>:
    26be:	40 91 3b 08 	lds	r20, 0x083B	; 0x80083b <UART2_TxHead>
    26c2:	50 e0       	ldi	r21, 0x00	; 0
    26c4:	4f 5f       	subi	r20, 0xFF	; 255
    26c6:	5f 4f       	sbci	r21, 0xFF	; 255
    26c8:	4f 77       	andi	r20, 0x7F	; 127
    26ca:	55 27       	eor	r21, r21
    26cc:	20 91 3a 08 	lds	r18, 0x083A	; 0x80083a <UART2_TxTail>
    26d0:	30 e0       	ldi	r19, 0x00	; 0
    26d2:	42 17       	cp	r20, r18
    26d4:	53 07       	cpc	r21, r19
    26d6:	d1 f3       	breq	.-12     	; 0x26cc <UART2_putc+0xe>
    26d8:	fa 01       	movw	r30, r20
    26da:	e4 54       	subi	r30, 0x44	; 68
    26dc:	f7 4f       	sbci	r31, 0xF7	; 247
    26de:	80 83       	st	Z, r24
    26e0:	40 93 3b 08 	sts	0x083B, r20	; 0x80083b <UART2_TxHead>
    26e4:	e1 ed       	ldi	r30, 0xD1	; 209
    26e6:	f0 e0       	ldi	r31, 0x00	; 0
    26e8:	80 81       	ld	r24, Z
    26ea:	80 62       	ori	r24, 0x20	; 32
    26ec:	80 83       	st	Z, r24
    26ee:	08 95       	ret

000026f0 <UART2_available>:
    26f0:	f8 94       	cli
    26f2:	80 91 39 08 	lds	r24, 0x0839	; 0x800839 <UART2_RxHead>
    26f6:	20 91 38 08 	lds	r18, 0x0838	; 0x800838 <UART2_RxTail>
    26fa:	78 94       	sei
    26fc:	90 e0       	ldi	r25, 0x00	; 0
    26fe:	80 58       	subi	r24, 0x80	; 128
    2700:	9f 4f       	sbci	r25, 0xFF	; 255
    2702:	82 1b       	sub	r24, r18
    2704:	91 09       	sbc	r25, r1
    2706:	8f 77       	andi	r24, 0x7F	; 127
    2708:	99 27       	eor	r25, r25
    270a:	08 95       	ret

0000270c <UART2_flush>:
    270c:	80 91 2f 07 	lds	r24, 0x072F	; 0x80072f <UART2_Transmission_end>
    2710:	88 23       	and	r24, r24
    2712:	e1 f3       	breq	.-8      	; 0x270c <UART2_flush>
    2714:	08 95       	ret

00002716 <__vector_54>:
    2716:	1f 92       	push	r1
    2718:	0f 92       	push	r0
    271a:	0f b6       	in	r0, 0x3f	; 63
    271c:	0f 92       	push	r0
    271e:	11 24       	eor	r1, r1
    2720:	0b b6       	in	r0, 0x3b	; 59
    2722:	0f 92       	push	r0
    2724:	2f 93       	push	r18
    2726:	3f 93       	push	r19
    2728:	4f 93       	push	r20
    272a:	5f 93       	push	r21
    272c:	8f 93       	push	r24
    272e:	9f 93       	push	r25
    2730:	ef 93       	push	r30
    2732:	ff 93       	push	r31
    2734:	20 91 30 01 	lds	r18, 0x0130	; 0x800130 <__TEXT_REGION_LENGTH__+0x700130>
    2738:	30 91 36 01 	lds	r19, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    273c:	28 71       	andi	r18, 0x18	; 24
    273e:	80 91 34 07 	lds	r24, 0x0734	; 0x800734 <UART3_RxHead>
    2742:	90 e0       	ldi	r25, 0x00	; 0
    2744:	01 96       	adiw	r24, 0x01	; 1
    2746:	8f 77       	andi	r24, 0x7F	; 127
    2748:	99 27       	eor	r25, r25
    274a:	40 91 33 07 	lds	r20, 0x0733	; 0x800733 <UART3_RxTail>
    274e:	50 e0       	ldi	r21, 0x00	; 0
    2750:	84 17       	cp	r24, r20
    2752:	95 07       	cpc	r25, r21
    2754:	39 f0       	breq	.+14     	; 0x2764 <__vector_54+0x4e>
    2756:	80 93 34 07 	sts	0x0734, r24	; 0x800734 <UART3_RxHead>
    275a:	fc 01       	movw	r30, r24
    275c:	e9 5c       	subi	r30, 0xC9	; 201
    275e:	f8 4f       	sbci	r31, 0xF8	; 248
    2760:	30 83       	st	Z, r19
    2762:	01 c0       	rjmp	.+2      	; 0x2766 <__vector_54+0x50>
    2764:	22 e0       	ldi	r18, 0x02	; 2
    2766:	20 93 32 07 	sts	0x0732, r18	; 0x800732 <UART3_LastRxError>
    276a:	ff 91       	pop	r31
    276c:	ef 91       	pop	r30
    276e:	9f 91       	pop	r25
    2770:	8f 91       	pop	r24
    2772:	5f 91       	pop	r21
    2774:	4f 91       	pop	r20
    2776:	3f 91       	pop	r19
    2778:	2f 91       	pop	r18
    277a:	0f 90       	pop	r0
    277c:	0b be       	out	0x3b, r0	; 59
    277e:	0f 90       	pop	r0
    2780:	0f be       	out	0x3f, r0	; 63
    2782:	0f 90       	pop	r0
    2784:	1f 90       	pop	r1
    2786:	18 95       	reti

00002788 <__vector_55>:
    2788:	1f 92       	push	r1
    278a:	0f 92       	push	r0
    278c:	0f b6       	in	r0, 0x3f	; 63
    278e:	0f 92       	push	r0
    2790:	11 24       	eor	r1, r1
    2792:	0b b6       	in	r0, 0x3b	; 59
    2794:	0f 92       	push	r0
    2796:	8f 93       	push	r24
    2798:	9f 93       	push	r25
    279a:	ef 93       	push	r30
    279c:	ff 93       	push	r31
    279e:	90 91 36 07 	lds	r25, 0x0736	; 0x800736 <UART3_TxHead>
    27a2:	80 91 35 07 	lds	r24, 0x0735	; 0x800735 <UART3_TxTail>
    27a6:	98 17       	cp	r25, r24
    27a8:	89 f0       	breq	.+34     	; 0x27cc <__vector_55+0x44>
    27aa:	80 91 35 07 	lds	r24, 0x0735	; 0x800735 <UART3_TxTail>
    27ae:	90 e0       	ldi	r25, 0x00	; 0
    27b0:	01 96       	adiw	r24, 0x01	; 1
    27b2:	8f 77       	andi	r24, 0x7F	; 127
    27b4:	99 27       	eor	r25, r25
    27b6:	80 93 35 07 	sts	0x0735, r24	; 0x800735 <UART3_TxTail>
    27ba:	fc 01       	movw	r30, r24
    27bc:	e9 54       	subi	r30, 0x49	; 73
    27be:	f8 4f       	sbci	r31, 0xF8	; 248
    27c0:	80 81       	ld	r24, Z
    27c2:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    27c6:	10 92 2e 07 	sts	0x072E, r1	; 0x80072e <UART3_Transmission_end>
    27ca:	08 c0       	rjmp	.+16     	; 0x27dc <__vector_55+0x54>
    27cc:	e1 e3       	ldi	r30, 0x31	; 49
    27ce:	f1 e0       	ldi	r31, 0x01	; 1
    27d0:	80 81       	ld	r24, Z
    27d2:	8f 7d       	andi	r24, 0xDF	; 223
    27d4:	80 83       	st	Z, r24
    27d6:	81 e0       	ldi	r24, 0x01	; 1
    27d8:	80 93 2e 07 	sts	0x072E, r24	; 0x80072e <UART3_Transmission_end>
    27dc:	ff 91       	pop	r31
    27de:	ef 91       	pop	r30
    27e0:	9f 91       	pop	r25
    27e2:	8f 91       	pop	r24
    27e4:	0f 90       	pop	r0
    27e6:	0b be       	out	0x3b, r0	; 59
    27e8:	0f 90       	pop	r0
    27ea:	0f be       	out	0x3f, r0	; 63
    27ec:	0f 90       	pop	r0
    27ee:	1f 90       	pop	r1
    27f0:	18 95       	reti

000027f2 <UART3_init>:
    27f2:	0f 93       	push	r16
    27f4:	1f 93       	push	r17
    27f6:	8b 01       	movw	r16, r22
    27f8:	9c 01       	movw	r18, r24
    27fa:	f8 94       	cli
    27fc:	10 92 36 07 	sts	0x0736, r1	; 0x800736 <UART3_TxHead>
    2800:	10 92 35 07 	sts	0x0735, r1	; 0x800735 <UART3_TxTail>
    2804:	10 92 34 07 	sts	0x0734, r1	; 0x800734 <UART3_RxHead>
    2808:	10 92 33 07 	sts	0x0733, r1	; 0x800733 <UART3_RxTail>
    280c:	78 94       	sei
    280e:	dc 01       	movw	r26, r24
    2810:	cb 01       	movw	r24, r22
    2812:	80 58       	subi	r24, 0x80	; 128
    2814:	9b 47       	sbci	r25, 0x7B	; 123
    2816:	a1 4e       	sbci	r26, 0xE1	; 225
    2818:	bf 4f       	sbci	r27, 0xFF	; 255
    281a:	88 0f       	add	r24, r24
    281c:	99 1f       	adc	r25, r25
    281e:	aa 1f       	adc	r26, r26
    2820:	bb 1f       	adc	r27, r27
    2822:	88 0f       	add	r24, r24
    2824:	99 1f       	adc	r25, r25
    2826:	aa 1f       	adc	r26, r26
    2828:	bb 1f       	adc	r27, r27
    282a:	bc 01       	movw	r22, r24
    282c:	cd 01       	movw	r24, r26
    282e:	66 0f       	add	r22, r22
    2830:	77 1f       	adc	r23, r23
    2832:	88 1f       	adc	r24, r24
    2834:	99 1f       	adc	r25, r25
    2836:	00 0f       	add	r16, r16
    2838:	11 1f       	adc	r17, r17
    283a:	22 1f       	adc	r18, r18
    283c:	33 1f       	adc	r19, r19
    283e:	00 0f       	add	r16, r16
    2840:	11 1f       	adc	r17, r17
    2842:	22 1f       	adc	r18, r18
    2844:	33 1f       	adc	r19, r19
    2846:	a9 01       	movw	r20, r18
    2848:	98 01       	movw	r18, r16
    284a:	22 0f       	add	r18, r18
    284c:	33 1f       	adc	r19, r19
    284e:	44 1f       	adc	r20, r20
    2850:	55 1f       	adc	r21, r21
    2852:	22 0f       	add	r18, r18
    2854:	33 1f       	adc	r19, r19
    2856:	44 1f       	adc	r20, r20
    2858:	55 1f       	adc	r21, r21
    285a:	0e 94 b6 27 	call	0x4f6c	; 0x4f6c <__udivmodsi4>
    285e:	ba 01       	movw	r22, r20
    2860:	a9 01       	movw	r20, r18
    2862:	41 50       	subi	r20, 0x01	; 1
    2864:	51 09       	sbc	r21, r1
    2866:	61 09       	sbc	r22, r1
    2868:	71 09       	sbc	r23, r1
    286a:	57 ff       	sbrs	r21, 7
    286c:	06 c0       	rjmp	.+12     	; 0x287a <UART3_init+0x88>
    286e:	82 e0       	ldi	r24, 0x02	; 2
    2870:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <__TEXT_REGION_LENGTH__+0x700130>
    2874:	5f 77       	andi	r21, 0x7F	; 127
    2876:	66 27       	eor	r22, r22
    2878:	77 27       	eor	r23, r23
    287a:	bb 27       	eor	r27, r27
    287c:	a7 2f       	mov	r26, r23
    287e:	96 2f       	mov	r25, r22
    2880:	85 2f       	mov	r24, r21
    2882:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <__TEXT_REGION_LENGTH__+0x700135>
    2886:	40 93 34 01 	sts	0x0134, r20	; 0x800134 <__TEXT_REGION_LENGTH__+0x700134>
    288a:	88 e9       	ldi	r24, 0x98	; 152
    288c:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <__TEXT_REGION_LENGTH__+0x700131>
    2890:	86 e0       	ldi	r24, 0x06	; 6
    2892:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <__TEXT_REGION_LENGTH__+0x700132>
    2896:	1f 91       	pop	r17
    2898:	0f 91       	pop	r16
    289a:	08 95       	ret

0000289c <UART3_getc>:
    289c:	90 91 34 07 	lds	r25, 0x0734	; 0x800734 <UART3_RxHead>
    28a0:	80 91 33 07 	lds	r24, 0x0733	; 0x800733 <UART3_RxTail>
    28a4:	98 17       	cp	r25, r24
    28a6:	a1 f0       	breq	.+40     	; 0x28d0 <UART3_getc+0x34>
    28a8:	80 91 33 07 	lds	r24, 0x0733	; 0x800733 <UART3_RxTail>
    28ac:	90 e0       	ldi	r25, 0x00	; 0
    28ae:	01 96       	adiw	r24, 0x01	; 1
    28b0:	8f 77       	andi	r24, 0x7F	; 127
    28b2:	99 27       	eor	r25, r25
    28b4:	80 93 33 07 	sts	0x0733, r24	; 0x800733 <UART3_RxTail>
    28b8:	fc 01       	movw	r30, r24
    28ba:	e9 5c       	subi	r30, 0xC9	; 201
    28bc:	f8 4f       	sbci	r31, 0xF8	; 248
    28be:	20 81       	ld	r18, Z
    28c0:	80 91 32 07 	lds	r24, 0x0732	; 0x800732 <UART3_LastRxError>
    28c4:	90 e0       	ldi	r25, 0x00	; 0
    28c6:	98 2f       	mov	r25, r24
    28c8:	88 27       	eor	r24, r24
    28ca:	82 0f       	add	r24, r18
    28cc:	91 1d       	adc	r25, r1
    28ce:	08 95       	ret
    28d0:	80 e0       	ldi	r24, 0x00	; 0
    28d2:	91 e0       	ldi	r25, 0x01	; 1
    28d4:	08 95       	ret

000028d6 <UART3_putc>:
    28d6:	40 91 36 07 	lds	r20, 0x0736	; 0x800736 <UART3_TxHead>
    28da:	50 e0       	ldi	r21, 0x00	; 0
    28dc:	4f 5f       	subi	r20, 0xFF	; 255
    28de:	5f 4f       	sbci	r21, 0xFF	; 255
    28e0:	4f 77       	andi	r20, 0x7F	; 127
    28e2:	55 27       	eor	r21, r21
    28e4:	20 91 35 07 	lds	r18, 0x0735	; 0x800735 <UART3_TxTail>
    28e8:	30 e0       	ldi	r19, 0x00	; 0
    28ea:	42 17       	cp	r20, r18
    28ec:	53 07       	cpc	r21, r19
    28ee:	d1 f3       	breq	.-12     	; 0x28e4 <UART3_putc+0xe>
    28f0:	fa 01       	movw	r30, r20
    28f2:	e9 54       	subi	r30, 0x49	; 73
    28f4:	f8 4f       	sbci	r31, 0xF8	; 248
    28f6:	80 83       	st	Z, r24
    28f8:	40 93 36 07 	sts	0x0736, r20	; 0x800736 <UART3_TxHead>
    28fc:	e1 e3       	ldi	r30, 0x31	; 49
    28fe:	f1 e0       	ldi	r31, 0x01	; 1
    2900:	80 81       	ld	r24, Z
    2902:	80 62       	ori	r24, 0x20	; 32
    2904:	80 83       	st	Z, r24
    2906:	08 95       	ret

00002908 <UART3_available>:
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2908:	f8 94       	cli
uint16_t UART3_available(void)
{
	uint16_t ret;
	
	ATOMIC_BLOCK(ATOMIC_FORCEON) {
		ret = (UART_RX3_BUFFER_SIZE + UART3_RxHead - UART3_RxTail) & UART_RX3_BUFFER_MASK;
    290a:	80 91 34 07 	lds	r24, 0x0734	; 0x800734 <UART3_RxHead>
    290e:	20 91 33 07 	lds	r18, 0x0733	; 0x800733 <UART3_RxTail>
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
    2912:	78 94       	sei
	}
	return ret;
    2914:	90 e0       	ldi	r25, 0x00	; 0
    2916:	80 58       	subi	r24, 0x80	; 128
    2918:	9f 4f       	sbci	r25, 0xFF	; 255
    291a:	82 1b       	sub	r24, r18
    291c:	91 09       	sbc	r25, r1
} /* UART3_available */
    291e:	8f 77       	andi	r24, 0x7F	; 127
    2920:	99 27       	eor	r25, r25
    2922:	08 95       	ret

00002924 <UART3_flush>:
void UART3_flush(void)
{
//	ATOMIC_BLOCK(ATOMIC_FORCEON) {
//		UART3_RxHead = UART3_RxTail;
//	} commented by mohab
	while(0 == UART3_Transmission_end);
    2924:	80 91 2e 07 	lds	r24, 0x072E	; 0x80072e <UART3_Transmission_end>
    2928:	88 23       	and	r24, r24
    292a:	e1 f3       	breq	.-8      	; 0x2924 <UART3_flush>
} /* UART3_flush */
    292c:	08 95       	ret

0000292e <RTE_drum_init>:


/*static uint16_t Conveyor_speed;*/
static uint16_t Drum_speed = 0;

void RTE_drum_init(void){
    292e:	08 95       	ret

00002930 <RTE_invertersetting_init>:

static SemaphoreHandle_t Sema_Time_second_handle;
static StaticSemaphore_t Sema_Time_second_Buffer;
static uint16_t Time_second;

void RTE_invertersetting_init(void){
    2930:	0f 93       	push	r16
	Sema_Gear_ratio_handle = xSemaphoreCreateBinaryStatic(&Sema_Gear_ratio_Buffer);
    2932:	03 e0       	ldi	r16, 0x03	; 3
    2934:	2b ee       	ldi	r18, 0xEB	; 235
    2936:	3b e0       	ldi	r19, 0x0B	; 11
    2938:	40 e0       	ldi	r20, 0x00	; 0
    293a:	50 e0       	ldi	r21, 0x00	; 0
    293c:	60 e0       	ldi	r22, 0x00	; 0
    293e:	81 e0       	ldi	r24, 0x01	; 1
    2940:	2b d4       	rcall	.+2134   	; 0x3198 <xQueueGenericCreateStatic>
    2942:	90 93 0b 0c 	sts	0x0C0B, r25	; 0x800c0b <Sema_Gear_ratio_handle+0x1>
    2946:	80 93 0a 0c 	sts	0x0C0A, r24	; 0x800c0a <Sema_Gear_ratio_handle>
	Sema_RPM_max_handle = xSemaphoreCreateBinaryStatic(&Sema_RPM_max_Buffer);
    294a:	2a ec       	ldi	r18, 0xCA	; 202
    294c:	3b e0       	ldi	r19, 0x0B	; 11
    294e:	40 e0       	ldi	r20, 0x00	; 0
    2950:	50 e0       	ldi	r21, 0x00	; 0
    2952:	60 e0       	ldi	r22, 0x00	; 0
    2954:	81 e0       	ldi	r24, 0x01	; 1
    2956:	20 d4       	rcall	.+2112   	; 0x3198 <xQueueGenericCreateStatic>
    2958:	90 93 ea 0b 	sts	0x0BEA, r25	; 0x800bea <Sema_RPM_max_handle+0x1>
    295c:	80 93 e9 0b 	sts	0x0BE9, r24	; 0x800be9 <Sema_RPM_max_handle>
	Sema_Conveyor_length_handle =  xSemaphoreCreateBinaryStatic(&Sema_Conveyor_length_Buffer);
    2960:	29 ea       	ldi	r18, 0xA9	; 169
    2962:	3b e0       	ldi	r19, 0x0B	; 11
    2964:	40 e0       	ldi	r20, 0x00	; 0
    2966:	50 e0       	ldi	r21, 0x00	; 0
    2968:	60 e0       	ldi	r22, 0x00	; 0
    296a:	81 e0       	ldi	r24, 0x01	; 1
    296c:	15 d4       	rcall	.+2090   	; 0x3198 <xQueueGenericCreateStatic>
    296e:	90 93 c9 0b 	sts	0x0BC9, r25	; 0x800bc9 <Sema_Conveyor_length_handle+0x1>
    2972:	80 93 c8 0b 	sts	0x0BC8, r24	; 0x800bc8 <Sema_Conveyor_length_handle>
	Sema_Driver_diameter_handle =  xSemaphoreCreateBinaryStatic(&Sema_Driver_diameter_Buffer);
    2976:	28 e8       	ldi	r18, 0x88	; 136
    2978:	3b e0       	ldi	r19, 0x0B	; 11
    297a:	40 e0       	ldi	r20, 0x00	; 0
    297c:	50 e0       	ldi	r21, 0x00	; 0
    297e:	60 e0       	ldi	r22, 0x00	; 0
    2980:	81 e0       	ldi	r24, 0x01	; 1
    2982:	0a d4       	rcall	.+2068   	; 0x3198 <xQueueGenericCreateStatic>
    2984:	90 93 a8 0b 	sts	0x0BA8, r25	; 0x800ba8 <Sema_Driver_diameter_handle+0x1>
    2988:	80 93 a7 0b 	sts	0x0BA7, r24	; 0x800ba7 <Sema_Driver_diameter_handle>
	Sema_Time_minute_handle =  xSemaphoreCreateBinaryStatic(&Sema_Time_minute_Buffer);
    298c:	27 e6       	ldi	r18, 0x67	; 103
    298e:	3b e0       	ldi	r19, 0x0B	; 11
    2990:	40 e0       	ldi	r20, 0x00	; 0
    2992:	50 e0       	ldi	r21, 0x00	; 0
    2994:	60 e0       	ldi	r22, 0x00	; 0
    2996:	81 e0       	ldi	r24, 0x01	; 1
    2998:	ff d3       	rcall	.+2046   	; 0x3198 <xQueueGenericCreateStatic>
    299a:	90 93 87 0b 	sts	0x0B87, r25	; 0x800b87 <Sema_Time_minute_handle+0x1>
    299e:	80 93 86 0b 	sts	0x0B86, r24	; 0x800b86 <Sema_Time_minute_handle>
	Sema_Time_second_handle =  xSemaphoreCreateBinaryStatic(&Sema_Time_second_Buffer);
    29a2:	26 e4       	ldi	r18, 0x46	; 70
    29a4:	3b e0       	ldi	r19, 0x0B	; 11
    29a6:	40 e0       	ldi	r20, 0x00	; 0
    29a8:	50 e0       	ldi	r21, 0x00	; 0
    29aa:	60 e0       	ldi	r22, 0x00	; 0
    29ac:	81 e0       	ldi	r24, 0x01	; 1
    29ae:	f4 d3       	rcall	.+2024   	; 0x3198 <xQueueGenericCreateStatic>
    29b0:	90 93 66 0b 	sts	0x0B66, r25	; 0x800b66 <Sema_Time_second_handle+0x1>
    29b4:	80 93 65 0b 	sts	0x0B65, r24	; 0x800b65 <Sema_Time_second_handle>
}
    29b8:	0f 91       	pop	r16
    29ba:	08 95       	ret

000029bc <RTE_levels_init>:

static SemaphoreHandle_t Sema_blancher_level_handle;
static StaticSemaphore_t Sema_blancher_level_Buffer;
static uint16_t blancher_level;

void RTE_levels_init(void){
    29bc:	0f 93       	push	r16
	Sema_tank_level_handle = xSemaphoreCreateBinaryStatic(&Sema_tank_level_Buffer);
    29be:	03 e0       	ldi	r16, 0x03	; 3
    29c0:	2d e2       	ldi	r18, 0x2D	; 45
    29c2:	3c e0       	ldi	r19, 0x0C	; 12
    29c4:	40 e0       	ldi	r20, 0x00	; 0
    29c6:	50 e0       	ldi	r21, 0x00	; 0
    29c8:	60 e0       	ldi	r22, 0x00	; 0
    29ca:	81 e0       	ldi	r24, 0x01	; 1
    29cc:	e5 d3       	rcall	.+1994   	; 0x3198 <xQueueGenericCreateStatic>
    29ce:	90 93 4d 0c 	sts	0x0C4D, r25	; 0x800c4d <Sema_tank_level_handle+0x1>
    29d2:	80 93 4c 0c 	sts	0x0C4C, r24	; 0x800c4c <Sema_tank_level_handle>
	Sema_blancher_level_handle = xSemaphoreCreateBinaryStatic(&Sema_blancher_level_Buffer);
    29d6:	2c e0       	ldi	r18, 0x0C	; 12
    29d8:	3c e0       	ldi	r19, 0x0C	; 12
    29da:	40 e0       	ldi	r20, 0x00	; 0
    29dc:	50 e0       	ldi	r21, 0x00	; 0
    29de:	60 e0       	ldi	r22, 0x00	; 0
    29e0:	81 e0       	ldi	r24, 0x01	; 1
    29e2:	da d3       	rcall	.+1972   	; 0x3198 <xQueueGenericCreateStatic>
    29e4:	90 93 2c 0c 	sts	0x0C2C, r25	; 0x800c2c <Sema_blancher_level_handle+0x1>
    29e8:	80 93 2b 0c 	sts	0x0C2B, r24	; 0x800c2b <Sema_blancher_level_handle>
}
    29ec:	0f 91       	pop	r16
    29ee:	08 95       	ret

000029f0 <RTE_init>:
#include "RTE_levels.h"
#include "RTE_temperature.h"
#include "RTE_main.h"

void RTE_init(void){
	RTE_drum_init();
    29f0:	9e df       	rcall	.-196    	; 0x292e <RTE_drum_init>
	RTE_invertersetting_init();
    29f2:	9e df       	rcall	.-196    	; 0x2930 <RTE_invertersetting_init>
	RTE_operations_init();
    29f4:	03 d0       	rcall	.+6      	; 0x29fc <RTE_operations_init>
	RTE_levels_init();
    29f6:	e2 df       	rcall	.-60     	; 0x29bc <RTE_levels_init>
    29f8:	31 c0       	rjmp	.+98     	; 0x2a5c <RTE_temperature_init>
	RTE_temperature_init();
    29fa:	08 95       	ret

000029fc <RTE_operations_init>:
    29fc:	0f 93       	push	r16
    29fe:	03 e0       	ldi	r16, 0x03	; 3
static SemaphoreHandle_t Sema_Tank_Calibration_Operation_handle;
static StaticSemaphore_t Sema_Tank_Calibration_Operation_Buffer;
static uint16_t Tank_Calibration_Operation;

void RTE_operations_init(void){
	Sema_System_on_handle = xSemaphoreCreateBinaryStatic(&Sema_System_on_Buffer);
    2a00:	21 eb       	ldi	r18, 0xB1	; 177
    2a02:	3c e0       	ldi	r19, 0x0C	; 12
    2a04:	40 e0       	ldi	r20, 0x00	; 0
    2a06:	50 e0       	ldi	r21, 0x00	; 0
    2a08:	60 e0       	ldi	r22, 0x00	; 0
    2a0a:	81 e0       	ldi	r24, 0x01	; 1
    2a0c:	c5 d3       	rcall	.+1930   	; 0x3198 <xQueueGenericCreateStatic>
    2a0e:	90 93 d1 0c 	sts	0x0CD1, r25	; 0x800cd1 <Sema_System_on_handle+0x1>
    2a12:	80 93 d0 0c 	sts	0x0CD0, r24	; 0x800cd0 <Sema_System_on_handle>
	Sema_Start_blancher_Operation_handle = xSemaphoreCreateBinaryStatic(&Sema_Start_blancher_Operation_Buffer);
    2a16:	20 e9       	ldi	r18, 0x90	; 144
    2a18:	3c e0       	ldi	r19, 0x0C	; 12
    2a1a:	40 e0       	ldi	r20, 0x00	; 0
    2a1c:	50 e0       	ldi	r21, 0x00	; 0
    2a1e:	60 e0       	ldi	r22, 0x00	; 0
    2a20:	81 e0       	ldi	r24, 0x01	; 1
    2a22:	ba d3       	rcall	.+1908   	; 0x3198 <xQueueGenericCreateStatic>
    2a24:	90 93 b0 0c 	sts	0x0CB0, r25	; 0x800cb0 <Sema_Start_blancher_Operation_handle+0x1>
    2a28:	80 93 af 0c 	sts	0x0CAF, r24	; 0x800caf <Sema_Start_blancher_Operation_handle>
	Sema_Wash_Operation_handle = xSemaphoreCreateBinaryStatic(&Sema_Wash_Operation_Buffer);
    2a2c:	2f e6       	ldi	r18, 0x6F	; 111
    2a2e:	3c e0       	ldi	r19, 0x0C	; 12
    2a30:	40 e0       	ldi	r20, 0x00	; 0
    2a32:	50 e0       	ldi	r21, 0x00	; 0
    2a34:	60 e0       	ldi	r22, 0x00	; 0
    2a36:	81 e0       	ldi	r24, 0x01	; 1
    2a38:	af d3       	rcall	.+1886   	; 0x3198 <xQueueGenericCreateStatic>
    2a3a:	90 93 8f 0c 	sts	0x0C8F, r25	; 0x800c8f <Sema_Wash_Operation_handle+0x1>
    2a3e:	80 93 8e 0c 	sts	0x0C8E, r24	; 0x800c8e <Sema_Wash_Operation_handle>
	Sema_Tank_Calibration_Operation_handle = xSemaphoreCreateBinaryStatic(&Sema_Tank_Calibration_Operation_Buffer);
    2a42:	2e e4       	ldi	r18, 0x4E	; 78
    2a44:	3c e0       	ldi	r19, 0x0C	; 12
    2a46:	40 e0       	ldi	r20, 0x00	; 0
    2a48:	50 e0       	ldi	r21, 0x00	; 0
    2a4a:	60 e0       	ldi	r22, 0x00	; 0
    2a4c:	81 e0       	ldi	r24, 0x01	; 1
    2a4e:	a4 d3       	rcall	.+1864   	; 0x3198 <xQueueGenericCreateStatic>
    2a50:	90 93 6e 0c 	sts	0x0C6E, r25	; 0x800c6e <Sema_Tank_Calibration_Operation_handle+0x1>
    2a54:	80 93 6d 0c 	sts	0x0C6D, r24	; 0x800c6d <Sema_Tank_Calibration_Operation_handle>

}
    2a58:	0f 91       	pop	r16
    2a5a:	08 95       	ret

00002a5c <RTE_temperature_init>:
	Current_temperature = u16Currenttemp;
}

uint16_t RTE_get_Current_temperature(void){
	return Current_temperature;
}
    2a5c:	0f 93       	push	r16
    2a5e:	03 e0       	ldi	r16, 0x03	; 3
    2a60:	2c e9       	ldi	r18, 0x9C	; 156
    2a62:	3d e0       	ldi	r19, 0x0D	; 13
    2a64:	40 e0       	ldi	r20, 0x00	; 0
    2a66:	50 e0       	ldi	r21, 0x00	; 0
    2a68:	60 e0       	ldi	r22, 0x00	; 0
    2a6a:	81 e0       	ldi	r24, 0x01	; 1
    2a6c:	95 d3       	rcall	.+1834   	; 0x3198 <xQueueGenericCreateStatic>
    2a6e:	90 93 bc 0d 	sts	0x0DBC, r25	; 0x800dbc <Sema_Sleep_temp_handle+0x1>
    2a72:	80 93 bb 0d 	sts	0x0DBB, r24	; 0x800dbb <Sema_Sleep_temp_handle>
    2a76:	2b e7       	ldi	r18, 0x7B	; 123
    2a78:	3d e0       	ldi	r19, 0x0D	; 13
    2a7a:	40 e0       	ldi	r20, 0x00	; 0
    2a7c:	50 e0       	ldi	r21, 0x00	; 0
    2a7e:	60 e0       	ldi	r22, 0x00	; 0
    2a80:	81 e0       	ldi	r24, 0x01	; 1
    2a82:	8a d3       	rcall	.+1812   	; 0x3198 <xQueueGenericCreateStatic>
    2a84:	90 93 9b 0d 	sts	0x0D9B, r25	; 0x800d9b <Sema_Set_temp_handle+0x1>
    2a88:	80 93 9a 0d 	sts	0x0D9A, r24	; 0x800d9a <Sema_Set_temp_handle>
    2a8c:	2a e5       	ldi	r18, 0x5A	; 90
    2a8e:	3d e0       	ldi	r19, 0x0D	; 13
    2a90:	40 e0       	ldi	r20, 0x00	; 0
    2a92:	50 e0       	ldi	r21, 0x00	; 0
    2a94:	60 e0       	ldi	r22, 0x00	; 0
    2a96:	81 e0       	ldi	r24, 0x01	; 1
    2a98:	7f d3       	rcall	.+1790   	; 0x3198 <xQueueGenericCreateStatic>
    2a9a:	90 93 7a 0d 	sts	0x0D7A, r25	; 0x800d7a <Sema_threshold_set_temp_handle+0x1>
    2a9e:	80 93 79 0d 	sts	0x0D79, r24	; 0x800d79 <Sema_threshold_set_temp_handle>
    2aa2:	29 e3       	ldi	r18, 0x39	; 57
    2aa4:	3d e0       	ldi	r19, 0x0D	; 13
    2aa6:	40 e0       	ldi	r20, 0x00	; 0
    2aa8:	50 e0       	ldi	r21, 0x00	; 0
    2aaa:	60 e0       	ldi	r22, 0x00	; 0
    2aac:	81 e0       	ldi	r24, 0x01	; 1
    2aae:	74 d3       	rcall	.+1768   	; 0x3198 <xQueueGenericCreateStatic>
    2ab0:	90 93 59 0d 	sts	0x0D59, r25	; 0x800d59 <Sema_threshold_sleep_temp_handle+0x1>
    2ab4:	80 93 58 0d 	sts	0x0D58, r24	; 0x800d58 <Sema_threshold_sleep_temp_handle>
    2ab8:	28 e1       	ldi	r18, 0x18	; 24
    2aba:	3d e0       	ldi	r19, 0x0D	; 13
    2abc:	40 e0       	ldi	r20, 0x00	; 0
    2abe:	50 e0       	ldi	r21, 0x00	; 0
    2ac0:	60 e0       	ldi	r22, 0x00	; 0
    2ac2:	81 e0       	ldi	r24, 0x01	; 1
    2ac4:	69 d3       	rcall	.+1746   	; 0x3198 <xQueueGenericCreateStatic>
    2ac6:	90 93 38 0d 	sts	0x0D38, r25	; 0x800d38 <Sema_Positive_offset_temp_handle+0x1>
    2aca:	80 93 37 0d 	sts	0x0D37, r24	; 0x800d37 <Sema_Positive_offset_temp_handle>
    2ace:	27 ef       	ldi	r18, 0xF7	; 247
    2ad0:	3c e0       	ldi	r19, 0x0C	; 12
    2ad2:	40 e0       	ldi	r20, 0x00	; 0
    2ad4:	50 e0       	ldi	r21, 0x00	; 0
    2ad6:	60 e0       	ldi	r22, 0x00	; 0
    2ad8:	81 e0       	ldi	r24, 0x01	; 1
    2ada:	5e d3       	rcall	.+1724   	; 0x3198 <xQueueGenericCreateStatic>
    2adc:	90 93 17 0d 	sts	0x0D17, r25	; 0x800d17 <Sema_Negative_offset_temp_handle+0x1>
    2ae0:	80 93 16 0d 	sts	0x0D16, r24	; 0x800d16 <Sema_Negative_offset_temp_handle>
    2ae4:	26 ed       	ldi	r18, 0xD6	; 214
    2ae6:	3c e0       	ldi	r19, 0x0C	; 12
    2ae8:	40 e0       	ldi	r20, 0x00	; 0
    2aea:	50 e0       	ldi	r21, 0x00	; 0
    2aec:	60 e0       	ldi	r22, 0x00	; 0
    2aee:	81 e0       	ldi	r24, 0x01	; 1
    2af0:	53 d3       	rcall	.+1702   	; 0x3198 <xQueueGenericCreateStatic>
    2af2:	90 93 f6 0c 	sts	0x0CF6, r25	; 0x800cf6 <Sema_APP_current_temp_handle+0x1>
    2af6:	80 93 f5 0c 	sts	0x0CF5, r24	; 0x800cf5 <Sema_APP_current_temp_handle>
    2afa:	0f 91       	pop	r16
    2afc:	08 95       	ret

00002afe <RTE_set_Current_temperature>:
    2afe:	90 93 d3 0c 	sts	0x0CD3, r25	; 0x800cd3 <Current_temperature+0x1>
    2b02:	80 93 d2 0c 	sts	0x0CD2, r24	; 0x800cd2 <Current_temperature>
    2b06:	08 95       	ret

00002b08 <RTE_set_app_Current_temperature>:

void RTE_set_app_Current_temperature(uint16_t u16Currenttemp){
	APP_current_temp = u16Currenttemp;
    2b08:	90 93 d5 0c 	sts	0x0CD5, r25	; 0x800cd5 <APP_current_temp+0x1>
    2b0c:	80 93 d4 0c 	sts	0x0CD4, r24	; 0x800cd4 <APP_current_temp>
	xSemaphoreGive(Sema_APP_current_temp_handle);
    2b10:	20 e0       	ldi	r18, 0x00	; 0
    2b12:	40 e0       	ldi	r20, 0x00	; 0
    2b14:	50 e0       	ldi	r21, 0x00	; 0
    2b16:	60 e0       	ldi	r22, 0x00	; 0
    2b18:	70 e0       	ldi	r23, 0x00	; 0
    2b1a:	80 91 f5 0c 	lds	r24, 0x0CF5	; 0x800cf5 <Sema_APP_current_temp_handle>
    2b1e:	90 91 f6 0c 	lds	r25, 0x0CF6	; 0x800cf6 <Sema_APP_current_temp_handle+0x1>
    2b22:	4f c3       	rjmp	.+1694   	; 0x31c2 <xQueueGenericSend>
    2b24:	08 95       	ret

00002b26 <vApplicationStackOverflowHook>:
	   This routine will never return.
	   This routine is referenced in the task.c file of FreeRTOS as an extern.
	\*---------------------------------------------------------------------------*/

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
	DDRB  |= _BV(DDB7);
    2b26:	27 9a       	sbi	0x04, 7	; 4
	PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    2b28:	2f 9a       	sbi	0x05, 7	; 5
    2b2a:	2f ef       	ldi	r18, 0xFF	; 255
    2b2c:	87 ea       	ldi	r24, 0xA7	; 167
    2b2e:	91 e6       	ldi	r25, 0x61	; 97
    2b30:	21 50       	subi	r18, 0x01	; 1
    2b32:	80 40       	sbci	r24, 0x00	; 0
    2b34:	90 40       	sbci	r25, 0x00	; 0
    2b36:	e1 f7       	brne	.-8      	; 0x2b30 <vApplicationStackOverflowHook+0xa>
    2b38:	00 c0       	rjmp	.+0      	; 0x2b3a <vApplicationStackOverflowHook+0x14>
    2b3a:	00 00       	nop
	for(;;)
	{
		_delay_ms(2000);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
		PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED slow blink.
    2b3c:	1f 9a       	sbi	0x03, 7	; 3
    2b3e:	f5 cf       	rjmp	.-22     	; 0x2b2a <vApplicationStackOverflowHook+0x4>

00002b40 <vApplicationGetIdleTaskMemory>:
                                    configSTACK_DEPTH_TYPE *pulIdleTaskStackSize )
{
    static StaticTask_t xIdleTaskTCB;
    static StackType_t uxIdleTaskStack[ configMINIMAL_STACK_SIZE ];

    *ppxIdleTaskTCBBuffer = &xIdleTaskTCB;
    2b40:	21 e9       	ldi	r18, 0x91	; 145
    2b42:	3e e0       	ldi	r19, 0x0E	; 14
    2b44:	fc 01       	movw	r30, r24
    2b46:	31 83       	std	Z+1, r19	; 0x01
    2b48:	20 83       	st	Z, r18
    *ppxIdleTaskStackBuffer = uxIdleTaskStack;
    2b4a:	8c e3       	ldi	r24, 0x3C	; 60
    2b4c:	9e e0       	ldi	r25, 0x0E	; 14
    2b4e:	fb 01       	movw	r30, r22
    2b50:	91 83       	std	Z+1, r25	; 0x01
    2b52:	80 83       	st	Z, r24
    *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
    2b54:	85 e5       	ldi	r24, 0x55	; 85
    2b56:	90 e0       	ldi	r25, 0x00	; 0
    2b58:	fa 01       	movw	r30, r20
    2b5a:	91 83       	std	Z+1, r25	; 0x01
    2b5c:	80 83       	st	Z, r24
    2b5e:	08 95       	ret

00002b60 <vApplicationGetTimerTaskMemory>:
                                     configSTACK_DEPTH_TYPE *pulTimerTaskStackSize )
{
    static StaticTask_t xTimerTaskTCB;
    static StackType_t uxTimerTaskStack[ configTIMER_TASK_STACK_DEPTH ];

    *ppxTimerTaskTCBBuffer = &xTimerTaskTCB;
    2b60:	22 e1       	ldi	r18, 0x12	; 18
    2b62:	3e e0       	ldi	r19, 0x0E	; 14
    2b64:	fc 01       	movw	r30, r24
    2b66:	31 83       	std	Z+1, r19	; 0x01
    2b68:	20 83       	st	Z, r18
    *ppxTimerTaskStackBuffer = uxTimerTaskStack;
    2b6a:	8d eb       	ldi	r24, 0xBD	; 189
    2b6c:	9d e0       	ldi	r25, 0x0D	; 13
    2b6e:	fb 01       	movw	r30, r22
    2b70:	91 83       	std	Z+1, r25	; 0x01
    2b72:	80 83       	st	Z, r24
    *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
    2b74:	85 e5       	ldi	r24, 0x55	; 85
    2b76:	90 e0       	ldi	r25, 0x00	; 0
    2b78:	fa 01       	movw	r30, r20
    2b7a:	91 83       	std	Z+1, r25	; 0x01
    2b7c:	80 83       	st	Z, r24
    2b7e:	08 95       	ret

00002b80 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    2b80:	fc 01       	movw	r30, r24
    /* The list structure contains a list item which is used to mark the
    end of the list.  To initialise the list the list end is inserted
    as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );            /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    2b82:	03 96       	adiw	r24, 0x03	; 3
    2b84:	92 83       	std	Z+2, r25	; 0x02
    2b86:	81 83       	std	Z+1, r24	; 0x01

    /* The list end value is the highest possible value in the list to
    ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
    2b88:	2f ef       	ldi	r18, 0xFF	; 255
    2b8a:	3f ef       	ldi	r19, 0xFF	; 255
    2b8c:	34 83       	std	Z+4, r19	; 0x04
    2b8e:	23 83       	std	Z+3, r18	; 0x03

    /* The list end next and previous pointers point to itself so we know
    when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );    /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    2b90:	96 83       	std	Z+6, r25	; 0x06
    2b92:	85 83       	std	Z+5, r24	; 0x05
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    2b94:	90 87       	std	Z+8, r25	; 0x08
    2b96:	87 83       	std	Z+7, r24	; 0x07

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    2b98:	10 82       	st	Z, r1
    2b9a:	08 95       	ret

00002b9c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
    2b9c:	fc 01       	movw	r30, r24
    2b9e:	11 86       	std	Z+9, r1	; 0x09
    2ba0:	10 86       	std	Z+8, r1	; 0x08
    2ba2:	08 95       	ret

00002ba4 <vListInsertEnd>:
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    2ba4:	cf 93       	push	r28
    2ba6:	df 93       	push	r29
    2ba8:	9c 01       	movw	r18, r24
    2baa:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
    2bac:	dc 01       	movw	r26, r24
    2bae:	11 96       	adiw	r26, 0x01	; 1
    2bb0:	cd 91       	ld	r28, X+
    2bb2:	dc 91       	ld	r29, X
    2bb4:	12 97       	sbiw	r26, 0x02	; 2
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
    makes the new list item the last item to be removed by a call to
    listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
    2bb6:	d3 83       	std	Z+3, r29	; 0x03
    2bb8:	c2 83       	std	Z+2, r28	; 0x02
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    2bba:	8c 81       	ldd	r24, Y+4	; 0x04
    2bbc:	9d 81       	ldd	r25, Y+5	; 0x05
    2bbe:	95 83       	std	Z+5, r25	; 0x05
    2bc0:	84 83       	std	Z+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
    2bc2:	8c 81       	ldd	r24, Y+4	; 0x04
    2bc4:	9d 81       	ldd	r25, Y+5	; 0x05
    2bc6:	dc 01       	movw	r26, r24
    2bc8:	13 96       	adiw	r26, 0x03	; 3
    2bca:	7c 93       	st	X, r23
    2bcc:	6e 93       	st	-X, r22
    2bce:	12 97       	sbiw	r26, 0x02	; 2
    pxIndex->pxPrevious = pxNewListItem;
    2bd0:	7d 83       	std	Y+5, r23	; 0x05
    2bd2:	6c 83       	std	Y+4, r22	; 0x04

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
    2bd4:	31 87       	std	Z+9, r19	; 0x09
    2bd6:	20 87       	std	Z+8, r18	; 0x08

    ( pxList->uxNumberOfItems )++;
    2bd8:	f9 01       	movw	r30, r18
    2bda:	80 81       	ld	r24, Z
    2bdc:	8f 5f       	subi	r24, 0xFF	; 255
    2bde:	80 83       	st	Z, r24
}
    2be0:	df 91       	pop	r29
    2be2:	cf 91       	pop	r28
    2be4:	08 95       	ret

00002be6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    2be6:	cf 93       	push	r28
    2be8:	df 93       	push	r29
    2bea:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    2bec:	48 81       	ld	r20, Y
    2bee:	59 81       	ldd	r21, Y+1	; 0x01
    new list item should be placed after it.  This ensures that TCBs which are
    stored in ready lists (all of which have the same xItemValue value) get a
    share of the CPU.  However, if the xItemValue is the same as the back marker
    the iteration loop below will not end.  Therefore the value is checked
    first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
    2bf0:	4f 3f       	cpi	r20, 0xFF	; 255
    2bf2:	2f ef       	ldi	r18, 0xFF	; 255
    2bf4:	52 07       	cpc	r21, r18
    2bf6:	21 f4       	brne	.+8      	; 0x2c00 <vListInsert+0x1a>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
    2bf8:	fc 01       	movw	r30, r24
    2bfa:	a7 81       	ldd	r26, Z+7	; 0x07
    2bfc:	b0 85       	ldd	r27, Z+8	; 0x08
    2bfe:	0d c0       	rjmp	.+26     	; 0x2c1a <vListInsert+0x34>
            4) Using a queue or semaphore before it has been initialised or
               before the scheduler has been started (are interrupts firing
               before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
    2c00:	dc 01       	movw	r26, r24
    2c02:	13 96       	adiw	r26, 0x03	; 3
    2c04:	01 c0       	rjmp	.+2      	; 0x2c08 <vListInsert+0x22>
    2c06:	df 01       	movw	r26, r30
    2c08:	12 96       	adiw	r26, 0x02	; 2
    2c0a:	ed 91       	ld	r30, X+
    2c0c:	fc 91       	ld	r31, X
    2c0e:	13 97       	sbiw	r26, 0x03	; 3
    2c10:	20 81       	ld	r18, Z
    2c12:	31 81       	ldd	r19, Z+1	; 0x01
    2c14:	42 17       	cp	r20, r18
    2c16:	53 07       	cpc	r21, r19
    2c18:	b0 f7       	brcc	.-20     	; 0x2c06 <vListInsert+0x20>
            /* There is nothing to do here, just iterating to the wanted
            insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
    2c1a:	12 96       	adiw	r26, 0x02	; 2
    2c1c:	ed 91       	ld	r30, X+
    2c1e:	fc 91       	ld	r31, X
    2c20:	13 97       	sbiw	r26, 0x03	; 3
    2c22:	fb 83       	std	Y+3, r31	; 0x03
    2c24:	ea 83       	std	Y+2, r30	; 0x02
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    2c26:	d5 83       	std	Z+5, r29	; 0x05
    2c28:	c4 83       	std	Z+4, r28	; 0x04
    pxNewListItem->pxPrevious = pxIterator;
    2c2a:	bd 83       	std	Y+5, r27	; 0x05
    2c2c:	ac 83       	std	Y+4, r26	; 0x04
    pxIterator->pxNext = pxNewListItem;
    2c2e:	13 96       	adiw	r26, 0x03	; 3
    2c30:	dc 93       	st	X, r29
    2c32:	ce 93       	st	-X, r28
    2c34:	12 97       	sbiw	r26, 0x02	; 2

    /* Remember which list the item is in.  This allows fast removal of the
    item later. */
    pxNewListItem->pxContainer = pxList;
    2c36:	99 87       	std	Y+9, r25	; 0x09
    2c38:	88 87       	std	Y+8, r24	; 0x08

    ( pxList->uxNumberOfItems )++;
    2c3a:	fc 01       	movw	r30, r24
    2c3c:	20 81       	ld	r18, Z
    2c3e:	2f 5f       	subi	r18, 0xFF	; 255
    2c40:	20 83       	st	Z, r18
}
    2c42:	df 91       	pop	r29
    2c44:	cf 91       	pop	r28
    2c46:	08 95       	ret

00002c48 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    2c48:	cf 93       	push	r28
    2c4a:	df 93       	push	r29
    2c4c:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
    2c4e:	a0 85       	ldd	r26, Z+8	; 0x08
    2c50:	b1 85       	ldd	r27, Z+9	; 0x09

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    2c52:	c2 81       	ldd	r28, Z+2	; 0x02
    2c54:	d3 81       	ldd	r29, Z+3	; 0x03
    2c56:	84 81       	ldd	r24, Z+4	; 0x04
    2c58:	95 81       	ldd	r25, Z+5	; 0x05
    2c5a:	9d 83       	std	Y+5, r25	; 0x05
    2c5c:	8c 83       	std	Y+4, r24	; 0x04
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    2c5e:	c4 81       	ldd	r28, Z+4	; 0x04
    2c60:	d5 81       	ldd	r29, Z+5	; 0x05
    2c62:	82 81       	ldd	r24, Z+2	; 0x02
    2c64:	93 81       	ldd	r25, Z+3	; 0x03
    2c66:	9b 83       	std	Y+3, r25	; 0x03
    2c68:	8a 83       	std	Y+2, r24	; 0x02

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
    2c6a:	11 96       	adiw	r26, 0x01	; 1
    2c6c:	8d 91       	ld	r24, X+
    2c6e:	9c 91       	ld	r25, X
    2c70:	12 97       	sbiw	r26, 0x02	; 2
    2c72:	e8 17       	cp	r30, r24
    2c74:	f9 07       	cpc	r31, r25
    2c76:	31 f4       	brne	.+12     	; 0x2c84 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
    2c78:	84 81       	ldd	r24, Z+4	; 0x04
    2c7a:	95 81       	ldd	r25, Z+5	; 0x05
    2c7c:	12 96       	adiw	r26, 0x02	; 2
    2c7e:	9c 93       	st	X, r25
    2c80:	8e 93       	st	-X, r24
    2c82:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
    2c84:	11 86       	std	Z+9, r1	; 0x09
    2c86:	10 86       	std	Z+8, r1	; 0x08
    ( pxList->uxNumberOfItems )--;
    2c88:	8c 91       	ld	r24, X
    2c8a:	81 50       	subi	r24, 0x01	; 1
    2c8c:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
    2c8e:	8c 91       	ld	r24, X
}
    2c90:	df 91       	pop	r29
    2c92:	cf 91       	pop	r28
    2c94:	08 95       	ret

00002c96 <pxPortInitialiseStack>:
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
    2c96:	31 e1       	ldi	r19, 0x11	; 17
    2c98:	fc 01       	movw	r30, r24
    2c9a:	30 83       	st	Z, r19
    2c9c:	31 97       	sbiw	r30, 0x01	; 1
    2c9e:	22 e2       	ldi	r18, 0x22	; 34
    2ca0:	20 83       	st	Z, r18
    2ca2:	31 97       	sbiw	r30, 0x01	; 1
    2ca4:	a3 e3       	ldi	r26, 0x33	; 51
    2ca6:	a0 83       	st	Z, r26
    2ca8:	31 97       	sbiw	r30, 0x01	; 1
    2caa:	60 83       	st	Z, r22
    2cac:	31 97       	sbiw	r30, 0x01	; 1
    2cae:	70 83       	st	Z, r23
    2cb0:	31 97       	sbiw	r30, 0x01	; 1
    2cb2:	10 82       	st	Z, r1
    2cb4:	31 97       	sbiw	r30, 0x01	; 1
    2cb6:	10 82       	st	Z, r1
    2cb8:	31 97       	sbiw	r30, 0x01	; 1
    2cba:	60 e8       	ldi	r22, 0x80	; 128
    2cbc:	60 83       	st	Z, r22
    2cbe:	31 97       	sbiw	r30, 0x01	; 1
    2cc0:	10 82       	st	Z, r1
    2cc2:	31 97       	sbiw	r30, 0x01	; 1
    2cc4:	10 82       	st	Z, r1
    2cc6:	31 97       	sbiw	r30, 0x01	; 1
    2cc8:	10 82       	st	Z, r1
    2cca:	31 97       	sbiw	r30, 0x01	; 1
    2ccc:	62 e0       	ldi	r22, 0x02	; 2
    2cce:	60 83       	st	Z, r22
    2cd0:	31 97       	sbiw	r30, 0x01	; 1
    2cd2:	63 e0       	ldi	r22, 0x03	; 3
    2cd4:	60 83       	st	Z, r22
    2cd6:	31 97       	sbiw	r30, 0x01	; 1
    2cd8:	64 e0       	ldi	r22, 0x04	; 4
    2cda:	60 83       	st	Z, r22
    2cdc:	31 97       	sbiw	r30, 0x01	; 1
    2cde:	65 e0       	ldi	r22, 0x05	; 5
    2ce0:	60 83       	st	Z, r22
    2ce2:	31 97       	sbiw	r30, 0x01	; 1
    2ce4:	66 e0       	ldi	r22, 0x06	; 6
    2ce6:	60 83       	st	Z, r22
    2ce8:	31 97       	sbiw	r30, 0x01	; 1
    2cea:	67 e0       	ldi	r22, 0x07	; 7
    2cec:	60 83       	st	Z, r22
    2cee:	31 97       	sbiw	r30, 0x01	; 1
    2cf0:	68 e0       	ldi	r22, 0x08	; 8
    2cf2:	60 83       	st	Z, r22
    2cf4:	31 97       	sbiw	r30, 0x01	; 1
    2cf6:	69 e0       	ldi	r22, 0x09	; 9
    2cf8:	60 83       	st	Z, r22
    2cfa:	31 97       	sbiw	r30, 0x01	; 1
    2cfc:	60 e1       	ldi	r22, 0x10	; 16
    2cfe:	60 83       	st	Z, r22
    2d00:	31 97       	sbiw	r30, 0x01	; 1
    2d02:	30 83       	st	Z, r19
    2d04:	31 97       	sbiw	r30, 0x01	; 1
    2d06:	32 e1       	ldi	r19, 0x12	; 18
    2d08:	30 83       	st	Z, r19
    2d0a:	31 97       	sbiw	r30, 0x01	; 1
    2d0c:	33 e1       	ldi	r19, 0x13	; 19
    2d0e:	30 83       	st	Z, r19
    2d10:	31 97       	sbiw	r30, 0x01	; 1
    2d12:	34 e1       	ldi	r19, 0x14	; 20
    2d14:	30 83       	st	Z, r19
    2d16:	31 97       	sbiw	r30, 0x01	; 1
    2d18:	35 e1       	ldi	r19, 0x15	; 21
    2d1a:	30 83       	st	Z, r19
    2d1c:	31 97       	sbiw	r30, 0x01	; 1
    2d1e:	36 e1       	ldi	r19, 0x16	; 22
    2d20:	30 83       	st	Z, r19
    2d22:	31 97       	sbiw	r30, 0x01	; 1
    2d24:	37 e1       	ldi	r19, 0x17	; 23
    2d26:	30 83       	st	Z, r19
    2d28:	31 97       	sbiw	r30, 0x01	; 1
    2d2a:	38 e1       	ldi	r19, 0x18	; 24
    2d2c:	30 83       	st	Z, r19
    2d2e:	31 97       	sbiw	r30, 0x01	; 1
    2d30:	39 e1       	ldi	r19, 0x19	; 25
    2d32:	30 83       	st	Z, r19
    2d34:	31 97       	sbiw	r30, 0x01	; 1
    2d36:	30 e2       	ldi	r19, 0x20	; 32
    2d38:	30 83       	st	Z, r19
    2d3a:	31 97       	sbiw	r30, 0x01	; 1
    2d3c:	31 e2       	ldi	r19, 0x21	; 33
    2d3e:	30 83       	st	Z, r19
    2d40:	31 97       	sbiw	r30, 0x01	; 1
    2d42:	20 83       	st	Z, r18
    2d44:	31 97       	sbiw	r30, 0x01	; 1
    2d46:	23 e2       	ldi	r18, 0x23	; 35
    2d48:	20 83       	st	Z, r18
    2d4a:	31 97       	sbiw	r30, 0x01	; 1
    2d4c:	40 83       	st	Z, r20
    2d4e:	31 97       	sbiw	r30, 0x01	; 1
    2d50:	50 83       	st	Z, r21
    2d52:	31 97       	sbiw	r30, 0x01	; 1
    2d54:	26 e2       	ldi	r18, 0x26	; 38
    2d56:	20 83       	st	Z, r18
    2d58:	31 97       	sbiw	r30, 0x01	; 1
    2d5a:	27 e2       	ldi	r18, 0x27	; 39
    2d5c:	20 83       	st	Z, r18
    2d5e:	31 97       	sbiw	r30, 0x01	; 1
    2d60:	28 e2       	ldi	r18, 0x28	; 40
    2d62:	20 83       	st	Z, r18
    2d64:	31 97       	sbiw	r30, 0x01	; 1
    2d66:	29 e2       	ldi	r18, 0x29	; 41
    2d68:	20 83       	st	Z, r18
    2d6a:	31 97       	sbiw	r30, 0x01	; 1
    2d6c:	20 e3       	ldi	r18, 0x30	; 48
    2d6e:	20 83       	st	Z, r18
    2d70:	31 97       	sbiw	r30, 0x01	; 1
    2d72:	21 e3       	ldi	r18, 0x31	; 49
    2d74:	20 83       	st	Z, r18
    2d76:	89 97       	sbiw	r24, 0x29	; 41
    2d78:	08 95       	ret

00002d7a <xPortStartScheduler>:
    2d7a:	a8 95       	wdr
    2d7c:	90 ec       	ldi	r25, 0xC0	; 192
    2d7e:	88 e1       	ldi	r24, 0x18	; 24
    2d80:	0f b6       	in	r0, 0x3f	; 63
    2d82:	f8 94       	cli
    2d84:	a8 95       	wdr
    2d86:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
    2d8a:	0f be       	out	0x3f, r0	; 63
    2d8c:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
    2d90:	a0 91 14 0f 	lds	r26, 0x0F14	; 0x800f14 <pxCurrentTCB>
    2d94:	b0 91 15 0f 	lds	r27, 0x0F15	; 0x800f15 <pxCurrentTCB+0x1>
    2d98:	cd 91       	ld	r28, X+
    2d9a:	cd bf       	out	0x3d, r28	; 61
    2d9c:	dd 91       	ld	r29, X+
    2d9e:	de bf       	out	0x3e, r29	; 62
    2da0:	ff 91       	pop	r31
    2da2:	ef 91       	pop	r30
    2da4:	df 91       	pop	r29
    2da6:	cf 91       	pop	r28
    2da8:	bf 91       	pop	r27
    2daa:	af 91       	pop	r26
    2dac:	9f 91       	pop	r25
    2dae:	8f 91       	pop	r24
    2db0:	7f 91       	pop	r23
    2db2:	6f 91       	pop	r22
    2db4:	5f 91       	pop	r21
    2db6:	4f 91       	pop	r20
    2db8:	3f 91       	pop	r19
    2dba:	2f 91       	pop	r18
    2dbc:	1f 91       	pop	r17
    2dbe:	0f 91       	pop	r16
    2dc0:	ff 90       	pop	r15
    2dc2:	ef 90       	pop	r14
    2dc4:	df 90       	pop	r13
    2dc6:	cf 90       	pop	r12
    2dc8:	bf 90       	pop	r11
    2dca:	af 90       	pop	r10
    2dcc:	9f 90       	pop	r9
    2dce:	8f 90       	pop	r8
    2dd0:	7f 90       	pop	r7
    2dd2:	6f 90       	pop	r6
    2dd4:	5f 90       	pop	r5
    2dd6:	4f 90       	pop	r4
    2dd8:	3f 90       	pop	r3
    2dda:	2f 90       	pop	r2
    2ddc:	1f 90       	pop	r1
    2dde:	0f 90       	pop	r0
    2de0:	0c be       	out	0x3c, r0	; 60
    2de2:	0f 90       	pop	r0
    2de4:	0b be       	out	0x3b, r0	; 59
    2de6:	0f 90       	pop	r0
    2de8:	0f be       	out	0x3f, r0	; 63
    2dea:	0f 90       	pop	r0
    2dec:	08 95       	ret
    2dee:	81 e0       	ldi	r24, 0x01	; 1
    2df0:	08 95       	ret

00002df2 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    2df2:	0f 92       	push	r0
    2df4:	0f b6       	in	r0, 0x3f	; 63
    2df6:	f8 94       	cli
    2df8:	0f 92       	push	r0
    2dfa:	0b b6       	in	r0, 0x3b	; 59
    2dfc:	0f 92       	push	r0
    2dfe:	0c b6       	in	r0, 0x3c	; 60
    2e00:	0f 92       	push	r0
    2e02:	1f 92       	push	r1
    2e04:	11 24       	eor	r1, r1
    2e06:	2f 92       	push	r2
    2e08:	3f 92       	push	r3
    2e0a:	4f 92       	push	r4
    2e0c:	5f 92       	push	r5
    2e0e:	6f 92       	push	r6
    2e10:	7f 92       	push	r7
    2e12:	8f 92       	push	r8
    2e14:	9f 92       	push	r9
    2e16:	af 92       	push	r10
    2e18:	bf 92       	push	r11
    2e1a:	cf 92       	push	r12
    2e1c:	df 92       	push	r13
    2e1e:	ef 92       	push	r14
    2e20:	ff 92       	push	r15
    2e22:	0f 93       	push	r16
    2e24:	1f 93       	push	r17
    2e26:	2f 93       	push	r18
    2e28:	3f 93       	push	r19
    2e2a:	4f 93       	push	r20
    2e2c:	5f 93       	push	r21
    2e2e:	6f 93       	push	r22
    2e30:	7f 93       	push	r23
    2e32:	8f 93       	push	r24
    2e34:	9f 93       	push	r25
    2e36:	af 93       	push	r26
    2e38:	bf 93       	push	r27
    2e3a:	cf 93       	push	r28
    2e3c:	df 93       	push	r29
    2e3e:	ef 93       	push	r30
    2e40:	ff 93       	push	r31
    2e42:	a0 91 14 0f 	lds	r26, 0x0F14	; 0x800f14 <pxCurrentTCB>
    2e46:	b0 91 15 0f 	lds	r27, 0x0F15	; 0x800f15 <pxCurrentTCB+0x1>
    2e4a:	0d b6       	in	r0, 0x3d	; 61
    2e4c:	0d 92       	st	X+, r0
    2e4e:	0e b6       	in	r0, 0x3e	; 62
    2e50:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    2e52:	d1 d6       	rcall	.+3490   	; 0x3bf6 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    2e54:	a0 91 14 0f 	lds	r26, 0x0F14	; 0x800f14 <pxCurrentTCB>
    2e58:	b0 91 15 0f 	lds	r27, 0x0F15	; 0x800f15 <pxCurrentTCB+0x1>
    2e5c:	cd 91       	ld	r28, X+
    2e5e:	cd bf       	out	0x3d, r28	; 61
    2e60:	dd 91       	ld	r29, X+
    2e62:	de bf       	out	0x3e, r29	; 62
    2e64:	ff 91       	pop	r31
    2e66:	ef 91       	pop	r30
    2e68:	df 91       	pop	r29
    2e6a:	cf 91       	pop	r28
    2e6c:	bf 91       	pop	r27
    2e6e:	af 91       	pop	r26
    2e70:	9f 91       	pop	r25
    2e72:	8f 91       	pop	r24
    2e74:	7f 91       	pop	r23
    2e76:	6f 91       	pop	r22
    2e78:	5f 91       	pop	r21
    2e7a:	4f 91       	pop	r20
    2e7c:	3f 91       	pop	r19
    2e7e:	2f 91       	pop	r18
    2e80:	1f 91       	pop	r17
    2e82:	0f 91       	pop	r16
    2e84:	ff 90       	pop	r15
    2e86:	ef 90       	pop	r14
    2e88:	df 90       	pop	r13
    2e8a:	cf 90       	pop	r12
    2e8c:	bf 90       	pop	r11
    2e8e:	af 90       	pop	r10
    2e90:	9f 90       	pop	r9
    2e92:	8f 90       	pop	r8
    2e94:	7f 90       	pop	r7
    2e96:	6f 90       	pop	r6
    2e98:	5f 90       	pop	r5
    2e9a:	4f 90       	pop	r4
    2e9c:	3f 90       	pop	r3
    2e9e:	2f 90       	pop	r2
    2ea0:	1f 90       	pop	r1
    2ea2:	0f 90       	pop	r0
    2ea4:	0c be       	out	0x3c, r0	; 60
    2ea6:	0f 90       	pop	r0
    2ea8:	0b be       	out	0x3b, r0	; 59
    2eaa:	0f 90       	pop	r0
    2eac:	0f be       	out	0x3f, r0	; 63
    2eae:	0f 90       	pop	r0

	__asm__ __volatile__ ( "ret" );
    2eb0:	08 95       	ret

00002eb2 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    2eb2:	0f 92       	push	r0
    2eb4:	0f b6       	in	r0, 0x3f	; 63
    2eb6:	f8 94       	cli
    2eb8:	0f 92       	push	r0
    2eba:	0b b6       	in	r0, 0x3b	; 59
    2ebc:	0f 92       	push	r0
    2ebe:	0c b6       	in	r0, 0x3c	; 60
    2ec0:	0f 92       	push	r0
    2ec2:	1f 92       	push	r1
    2ec4:	11 24       	eor	r1, r1
    2ec6:	2f 92       	push	r2
    2ec8:	3f 92       	push	r3
    2eca:	4f 92       	push	r4
    2ecc:	5f 92       	push	r5
    2ece:	6f 92       	push	r6
    2ed0:	7f 92       	push	r7
    2ed2:	8f 92       	push	r8
    2ed4:	9f 92       	push	r9
    2ed6:	af 92       	push	r10
    2ed8:	bf 92       	push	r11
    2eda:	cf 92       	push	r12
    2edc:	df 92       	push	r13
    2ede:	ef 92       	push	r14
    2ee0:	ff 92       	push	r15
    2ee2:	0f 93       	push	r16
    2ee4:	1f 93       	push	r17
    2ee6:	2f 93       	push	r18
    2ee8:	3f 93       	push	r19
    2eea:	4f 93       	push	r20
    2eec:	5f 93       	push	r21
    2eee:	6f 93       	push	r22
    2ef0:	7f 93       	push	r23
    2ef2:	8f 93       	push	r24
    2ef4:	9f 93       	push	r25
    2ef6:	af 93       	push	r26
    2ef8:	bf 93       	push	r27
    2efa:	cf 93       	push	r28
    2efc:	df 93       	push	r29
    2efe:	ef 93       	push	r30
    2f00:	ff 93       	push	r31
    2f02:	a0 91 14 0f 	lds	r26, 0x0F14	; 0x800f14 <pxCurrentTCB>
    2f06:	b0 91 15 0f 	lds	r27, 0x0F15	; 0x800f15 <pxCurrentTCB+0x1>
    2f0a:	0d b6       	in	r0, 0x3d	; 61
    2f0c:	0d 92       	st	X+, r0
    2f0e:	0e b6       	in	r0, 0x3e	; 62
    2f10:	0d 92       	st	X+, r0

	sleep_reset();		//	 reset the sleep_mode() faster than sleep_disable();
    2f12:	13 be       	out	0x33, r1	; 51

	if( xTaskIncrementTick() != pdFALSE )
    2f14:	30 d5       	rcall	.+2656   	; 0x3976 <xTaskIncrementTick>
    2f16:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
    2f18:	6e d6       	rcall	.+3292   	; 0x3bf6 <vTaskSwitchContext>
    2f1a:	a0 91 14 0f 	lds	r26, 0x0F14	; 0x800f14 <pxCurrentTCB>
	}

	portRESTORE_CONTEXT();
    2f1e:	b0 91 15 0f 	lds	r27, 0x0F15	; 0x800f15 <pxCurrentTCB+0x1>
    2f22:	cd 91       	ld	r28, X+
    2f24:	cd bf       	out	0x3d, r28	; 61
    2f26:	dd 91       	ld	r29, X+
    2f28:	de bf       	out	0x3e, r29	; 62
    2f2a:	ff 91       	pop	r31
    2f2c:	ef 91       	pop	r30
    2f2e:	df 91       	pop	r29
    2f30:	cf 91       	pop	r28
    2f32:	bf 91       	pop	r27
    2f34:	af 91       	pop	r26
    2f36:	9f 91       	pop	r25
    2f38:	8f 91       	pop	r24
    2f3a:	7f 91       	pop	r23
    2f3c:	6f 91       	pop	r22
    2f3e:	5f 91       	pop	r21
    2f40:	4f 91       	pop	r20
    2f42:	3f 91       	pop	r19
    2f44:	2f 91       	pop	r18
    2f46:	1f 91       	pop	r17
    2f48:	0f 91       	pop	r16
    2f4a:	ff 90       	pop	r15
    2f4c:	ef 90       	pop	r14
    2f4e:	df 90       	pop	r13
    2f50:	cf 90       	pop	r12
    2f52:	bf 90       	pop	r11
    2f54:	af 90       	pop	r10
    2f56:	9f 90       	pop	r9
    2f58:	8f 90       	pop	r8
    2f5a:	7f 90       	pop	r7
    2f5c:	6f 90       	pop	r6
    2f5e:	5f 90       	pop	r5
    2f60:	4f 90       	pop	r4
    2f62:	3f 90       	pop	r3
    2f64:	2f 90       	pop	r2
    2f66:	1f 90       	pop	r1
    2f68:	0f 90       	pop	r0
    2f6a:	0c be       	out	0x3c, r0	; 60
    2f6c:	0f 90       	pop	r0
    2f6e:	0b be       	out	0x3b, r0	; 59
    2f70:	0f 90       	pop	r0
    2f72:	0f be       	out	0x3f, r0	; 63
    2f74:	0f 90       	pop	r0
    2f76:	08 95       	ret

00002f78 <__vector_12>:

	__asm__ __volatile__ ( "ret" );
    2f78:	9c df       	rcall	.-200    	; 0x2eb2 <vPortYieldFromTick>
//	ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
	ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
	ISR(portSCHEDULER_ISR)
	{
		vPortYieldFromTick();
		__asm__ __volatile__ ( "reti" );
    2f7a:	18 95       	reti

00002f7c <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    2f7c:	0f b6       	in	r0, 0x3f	; 63
    2f7e:	f8 94       	cli
    2f80:	0f 92       	push	r0
    2f82:	fc 01       	movw	r30, r24
    2f84:	92 8d       	ldd	r25, Z+26	; 0x1a
    2f86:	0f 90       	pop	r0
    2f88:	0f be       	out	0x3f, r0	; 63
    2f8a:	81 e0       	ldi	r24, 0x01	; 1
    2f8c:	91 11       	cpse	r25, r1
    2f8e:	80 e0       	ldi	r24, 0x00	; 0
    2f90:	08 95       	ret

00002f92 <prvCopyDataToQueue>:
    2f92:	0f 93       	push	r16
    2f94:	1f 93       	push	r17
    2f96:	cf 93       	push	r28
    2f98:	df 93       	push	r29
    2f9a:	ec 01       	movw	r28, r24
    2f9c:	04 2f       	mov	r16, r20
    2f9e:	1a 8d       	ldd	r17, Y+26	; 0x1a
    2fa0:	4c 8d       	ldd	r20, Y+28	; 0x1c
    2fa2:	41 11       	cpse	r20, r1
    2fa4:	0b c0       	rjmp	.+22     	; 0x2fbc <prvCopyDataToQueue+0x2a>
    2fa6:	88 81       	ld	r24, Y
    2fa8:	99 81       	ldd	r25, Y+1	; 0x01
    2faa:	89 2b       	or	r24, r25
    2fac:	09 f0       	breq	.+2      	; 0x2fb0 <prvCopyDataToQueue+0x1e>
    2fae:	41 c0       	rjmp	.+130    	; 0x3032 <prvCopyDataToQueue+0xa0>
    2fb0:	8c 81       	ldd	r24, Y+4	; 0x04
    2fb2:	9d 81       	ldd	r25, Y+5	; 0x05
    2fb4:	cc d7       	rcall	.+3992   	; 0x3f4e <xTaskPriorityDisinherit>
    2fb6:	1d 82       	std	Y+5, r1	; 0x05
    2fb8:	1c 82       	std	Y+4, r1	; 0x04
    2fba:	42 c0       	rjmp	.+132    	; 0x3040 <prvCopyDataToQueue+0xae>
    2fbc:	01 11       	cpse	r16, r1
    2fbe:	17 c0       	rjmp	.+46     	; 0x2fee <prvCopyDataToQueue+0x5c>
    2fc0:	50 e0       	ldi	r21, 0x00	; 0
    2fc2:	8a 81       	ldd	r24, Y+2	; 0x02
    2fc4:	9b 81       	ldd	r25, Y+3	; 0x03
    2fc6:	0e 94 e7 27 	call	0x4fce	; 0x4fce <memcpy>
    2fca:	2c 8d       	ldd	r18, Y+28	; 0x1c
    2fcc:	8a 81       	ldd	r24, Y+2	; 0x02
    2fce:	9b 81       	ldd	r25, Y+3	; 0x03
    2fd0:	82 0f       	add	r24, r18
    2fd2:	91 1d       	adc	r25, r1
    2fd4:	9b 83       	std	Y+3, r25	; 0x03
    2fd6:	8a 83       	std	Y+2, r24	; 0x02
    2fd8:	2c 81       	ldd	r18, Y+4	; 0x04
    2fda:	3d 81       	ldd	r19, Y+5	; 0x05
    2fdc:	82 17       	cp	r24, r18
    2fde:	93 07       	cpc	r25, r19
    2fe0:	50 f1       	brcs	.+84     	; 0x3036 <prvCopyDataToQueue+0xa4>
    2fe2:	88 81       	ld	r24, Y
    2fe4:	99 81       	ldd	r25, Y+1	; 0x01
    2fe6:	9b 83       	std	Y+3, r25	; 0x03
    2fe8:	8a 83       	std	Y+2, r24	; 0x02
    2fea:	80 e0       	ldi	r24, 0x00	; 0
    2fec:	29 c0       	rjmp	.+82     	; 0x3040 <prvCopyDataToQueue+0xae>
    2fee:	50 e0       	ldi	r21, 0x00	; 0
    2ff0:	8e 81       	ldd	r24, Y+6	; 0x06
    2ff2:	9f 81       	ldd	r25, Y+7	; 0x07
    2ff4:	0e 94 e7 27 	call	0x4fce	; 0x4fce <memcpy>
    2ff8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2ffa:	90 e0       	ldi	r25, 0x00	; 0
    2ffc:	91 95       	neg	r25
    2ffe:	81 95       	neg	r24
    3000:	91 09       	sbc	r25, r1
    3002:	2e 81       	ldd	r18, Y+6	; 0x06
    3004:	3f 81       	ldd	r19, Y+7	; 0x07
    3006:	28 0f       	add	r18, r24
    3008:	39 1f       	adc	r19, r25
    300a:	3f 83       	std	Y+7, r19	; 0x07
    300c:	2e 83       	std	Y+6, r18	; 0x06
    300e:	48 81       	ld	r20, Y
    3010:	59 81       	ldd	r21, Y+1	; 0x01
    3012:	24 17       	cp	r18, r20
    3014:	35 07       	cpc	r19, r21
    3016:	30 f4       	brcc	.+12     	; 0x3024 <prvCopyDataToQueue+0x92>
    3018:	2c 81       	ldd	r18, Y+4	; 0x04
    301a:	3d 81       	ldd	r19, Y+5	; 0x05
    301c:	82 0f       	add	r24, r18
    301e:	93 1f       	adc	r25, r19
    3020:	9f 83       	std	Y+7, r25	; 0x07
    3022:	8e 83       	std	Y+6, r24	; 0x06
    3024:	02 30       	cpi	r16, 0x02	; 2
    3026:	49 f4       	brne	.+18     	; 0x303a <prvCopyDataToQueue+0xa8>
    3028:	11 23       	and	r17, r17
    302a:	49 f0       	breq	.+18     	; 0x303e <prvCopyDataToQueue+0xac>
    302c:	11 50       	subi	r17, 0x01	; 1
    302e:	80 e0       	ldi	r24, 0x00	; 0
    3030:	07 c0       	rjmp	.+14     	; 0x3040 <prvCopyDataToQueue+0xae>
    3032:	80 e0       	ldi	r24, 0x00	; 0
    3034:	05 c0       	rjmp	.+10     	; 0x3040 <prvCopyDataToQueue+0xae>
    3036:	80 e0       	ldi	r24, 0x00	; 0
    3038:	03 c0       	rjmp	.+6      	; 0x3040 <prvCopyDataToQueue+0xae>
    303a:	80 e0       	ldi	r24, 0x00	; 0
    303c:	01 c0       	rjmp	.+2      	; 0x3040 <prvCopyDataToQueue+0xae>
    303e:	80 e0       	ldi	r24, 0x00	; 0
    3040:	1f 5f       	subi	r17, 0xFF	; 255
    3042:	1a 8f       	std	Y+26, r17	; 0x1a
    3044:	df 91       	pop	r29
    3046:	cf 91       	pop	r28
    3048:	1f 91       	pop	r17
    304a:	0f 91       	pop	r16
    304c:	08 95       	ret

0000304e <prvCopyDataFromQueue>:
    304e:	fc 01       	movw	r30, r24
    3050:	44 8d       	ldd	r20, Z+28	; 0x1c
    3052:	44 23       	and	r20, r20
    3054:	a9 f0       	breq	.+42     	; 0x3080 <prvCopyDataFromQueue+0x32>
    3056:	50 e0       	ldi	r21, 0x00	; 0
    3058:	26 81       	ldd	r18, Z+6	; 0x06
    305a:	37 81       	ldd	r19, Z+7	; 0x07
    305c:	24 0f       	add	r18, r20
    305e:	35 1f       	adc	r19, r21
    3060:	37 83       	std	Z+7, r19	; 0x07
    3062:	26 83       	std	Z+6, r18	; 0x06
    3064:	84 81       	ldd	r24, Z+4	; 0x04
    3066:	95 81       	ldd	r25, Z+5	; 0x05
    3068:	28 17       	cp	r18, r24
    306a:	39 07       	cpc	r19, r25
    306c:	20 f0       	brcs	.+8      	; 0x3076 <prvCopyDataFromQueue+0x28>
    306e:	80 81       	ld	r24, Z
    3070:	91 81       	ldd	r25, Z+1	; 0x01
    3072:	97 83       	std	Z+7, r25	; 0x07
    3074:	86 83       	std	Z+6, r24	; 0x06
    3076:	cb 01       	movw	r24, r22
    3078:	66 81       	ldd	r22, Z+6	; 0x06
    307a:	77 81       	ldd	r23, Z+7	; 0x07
    307c:	0c 94 e7 27 	jmp	0x4fce	; 0x4fce <memcpy>
    3080:	08 95       	ret

00003082 <prvUnlockQueue>:
    3082:	ef 92       	push	r14
    3084:	ff 92       	push	r15
    3086:	0f 93       	push	r16
    3088:	1f 93       	push	r17
    308a:	cf 93       	push	r28
    308c:	8c 01       	movw	r16, r24
    308e:	0f b6       	in	r0, 0x3f	; 63
    3090:	f8 94       	cli
    3092:	0f 92       	push	r0
    3094:	fc 01       	movw	r30, r24
    3096:	c6 8d       	ldd	r28, Z+30	; 0x1e
    3098:	1c 16       	cp	r1, r28
    309a:	9c f4       	brge	.+38     	; 0x30c2 <prvUnlockQueue+0x40>
    309c:	81 89       	ldd	r24, Z+17	; 0x11
    309e:	81 11       	cpse	r24, r1
    30a0:	06 c0       	rjmp	.+12     	; 0x30ae <prvUnlockQueue+0x2c>
    30a2:	0f c0       	rjmp	.+30     	; 0x30c2 <prvUnlockQueue+0x40>
    30a4:	f8 01       	movw	r30, r16
    30a6:	81 89       	ldd	r24, Z+17	; 0x11
    30a8:	81 11       	cpse	r24, r1
    30aa:	05 c0       	rjmp	.+10     	; 0x30b6 <prvUnlockQueue+0x34>
    30ac:	0a c0       	rjmp	.+20     	; 0x30c2 <prvUnlockQueue+0x40>
    30ae:	78 01       	movw	r14, r16
    30b0:	f1 e1       	ldi	r31, 0x11	; 17
    30b2:	ef 0e       	add	r14, r31
    30b4:	f1 1c       	adc	r15, r1
    30b6:	c7 01       	movw	r24, r14
    30b8:	48 d6       	rcall	.+3216   	; 0x3d4a <xTaskRemoveFromEventList>
    30ba:	81 11       	cpse	r24, r1
    30bc:	c4 d6       	rcall	.+3464   	; 0x3e46 <vTaskMissedYield>
    30be:	c1 50       	subi	r28, 0x01	; 1
    30c0:	89 f7       	brne	.-30     	; 0x30a4 <prvUnlockQueue+0x22>
    30c2:	8f ef       	ldi	r24, 0xFF	; 255
    30c4:	f8 01       	movw	r30, r16
    30c6:	86 8f       	std	Z+30, r24	; 0x1e
    30c8:	0f 90       	pop	r0
    30ca:	0f be       	out	0x3f, r0	; 63
    30cc:	0f b6       	in	r0, 0x3f	; 63
    30ce:	f8 94       	cli
    30d0:	0f 92       	push	r0
    30d2:	c5 8d       	ldd	r28, Z+29	; 0x1d
    30d4:	1c 16       	cp	r1, r28
    30d6:	9c f4       	brge	.+38     	; 0x30fe <prvUnlockQueue+0x7c>
    30d8:	80 85       	ldd	r24, Z+8	; 0x08
    30da:	81 11       	cpse	r24, r1
    30dc:	06 c0       	rjmp	.+12     	; 0x30ea <prvUnlockQueue+0x68>
    30de:	0f c0       	rjmp	.+30     	; 0x30fe <prvUnlockQueue+0x7c>
    30e0:	f8 01       	movw	r30, r16
    30e2:	80 85       	ldd	r24, Z+8	; 0x08
    30e4:	81 11       	cpse	r24, r1
    30e6:	05 c0       	rjmp	.+10     	; 0x30f2 <prvUnlockQueue+0x70>
    30e8:	0a c0       	rjmp	.+20     	; 0x30fe <prvUnlockQueue+0x7c>
    30ea:	78 01       	movw	r14, r16
    30ec:	f8 e0       	ldi	r31, 0x08	; 8
    30ee:	ef 0e       	add	r14, r31
    30f0:	f1 1c       	adc	r15, r1
    30f2:	c7 01       	movw	r24, r14
    30f4:	2a d6       	rcall	.+3156   	; 0x3d4a <xTaskRemoveFromEventList>
    30f6:	81 11       	cpse	r24, r1
    30f8:	a6 d6       	rcall	.+3404   	; 0x3e46 <vTaskMissedYield>
    30fa:	c1 50       	subi	r28, 0x01	; 1
    30fc:	89 f7       	brne	.-30     	; 0x30e0 <prvUnlockQueue+0x5e>
    30fe:	8f ef       	ldi	r24, 0xFF	; 255
    3100:	f8 01       	movw	r30, r16
    3102:	85 8f       	std	Z+29, r24	; 0x1d
    3104:	0f 90       	pop	r0
    3106:	0f be       	out	0x3f, r0	; 63
    3108:	cf 91       	pop	r28
    310a:	1f 91       	pop	r17
    310c:	0f 91       	pop	r16
    310e:	ff 90       	pop	r15
    3110:	ef 90       	pop	r14
    3112:	08 95       	ret

00003114 <xQueueGenericReset>:
    3114:	cf 93       	push	r28
    3116:	df 93       	push	r29
    3118:	ec 01       	movw	r28, r24
    311a:	0f b6       	in	r0, 0x3f	; 63
    311c:	f8 94       	cli
    311e:	0f 92       	push	r0
    3120:	e8 81       	ld	r30, Y
    3122:	f9 81       	ldd	r31, Y+1	; 0x01
    3124:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3126:	2c 8d       	ldd	r18, Y+28	; 0x1c
    3128:	90 e0       	ldi	r25, 0x00	; 0
    312a:	30 e0       	ldi	r19, 0x00	; 0
    312c:	82 9f       	mul	r24, r18
    312e:	a0 01       	movw	r20, r0
    3130:	83 9f       	mul	r24, r19
    3132:	50 0d       	add	r21, r0
    3134:	92 9f       	mul	r25, r18
    3136:	50 0d       	add	r21, r0
    3138:	11 24       	eor	r1, r1
    313a:	4e 0f       	add	r20, r30
    313c:	5f 1f       	adc	r21, r31
    313e:	5d 83       	std	Y+5, r21	; 0x05
    3140:	4c 83       	std	Y+4, r20	; 0x04
    3142:	1a 8e       	std	Y+26, r1	; 0x1a
    3144:	fb 83       	std	Y+3, r31	; 0x03
    3146:	ea 83       	std	Y+2, r30	; 0x02
    3148:	01 97       	sbiw	r24, 0x01	; 1
    314a:	82 9f       	mul	r24, r18
    314c:	a0 01       	movw	r20, r0
    314e:	83 9f       	mul	r24, r19
    3150:	50 0d       	add	r21, r0
    3152:	92 9f       	mul	r25, r18
    3154:	50 0d       	add	r21, r0
    3156:	11 24       	eor	r1, r1
    3158:	cf 01       	movw	r24, r30
    315a:	84 0f       	add	r24, r20
    315c:	95 1f       	adc	r25, r21
    315e:	9f 83       	std	Y+7, r25	; 0x07
    3160:	8e 83       	std	Y+6, r24	; 0x06
    3162:	8f ef       	ldi	r24, 0xFF	; 255
    3164:	8d 8f       	std	Y+29, r24	; 0x1d
    3166:	8e 8f       	std	Y+30, r24	; 0x1e
    3168:	61 11       	cpse	r22, r1
    316a:	0a c0       	rjmp	.+20     	; 0x3180 <xQueueGenericReset+0x6c>
    316c:	88 85       	ldd	r24, Y+8	; 0x08
    316e:	88 23       	and	r24, r24
    3170:	69 f0       	breq	.+26     	; 0x318c <xQueueGenericReset+0x78>
    3172:	ce 01       	movw	r24, r28
    3174:	08 96       	adiw	r24, 0x08	; 8
    3176:	e9 d5       	rcall	.+3026   	; 0x3d4a <xTaskRemoveFromEventList>
    3178:	88 23       	and	r24, r24
    317a:	41 f0       	breq	.+16     	; 0x318c <xQueueGenericReset+0x78>
    317c:	3a de       	rcall	.-908    	; 0x2df2 <vPortYield>
    317e:	06 c0       	rjmp	.+12     	; 0x318c <xQueueGenericReset+0x78>
    3180:	ce 01       	movw	r24, r28
    3182:	08 96       	adiw	r24, 0x08	; 8
    3184:	fd dc       	rcall	.-1542   	; 0x2b80 <vListInitialise>
    3186:	ce 01       	movw	r24, r28
    3188:	41 96       	adiw	r24, 0x11	; 17
    318a:	fa dc       	rcall	.-1548   	; 0x2b80 <vListInitialise>
    318c:	0f 90       	pop	r0
    318e:	0f be       	out	0x3f, r0	; 63
    3190:	81 e0       	ldi	r24, 0x01	; 1
    3192:	df 91       	pop	r29
    3194:	cf 91       	pop	r28
    3196:	08 95       	ret

00003198 <xQueueGenericCreateStatic>:
    3198:	cf 93       	push	r28
    319a:	df 93       	push	r29
    319c:	e9 01       	movw	r28, r18
    319e:	20 97       	sbiw	r28, 0x00	; 0
    31a0:	61 f0       	breq	.+24     	; 0x31ba <xQueueGenericCreateStatic+0x22>
    31a2:	61 11       	cpse	r22, r1
    31a4:	03 c0       	rjmp	.+6      	; 0x31ac <xQueueGenericCreateStatic+0x14>
    31a6:	39 83       	std	Y+1, r19	; 0x01
    31a8:	28 83       	st	Y, r18
    31aa:	02 c0       	rjmp	.+4      	; 0x31b0 <xQueueGenericCreateStatic+0x18>
    31ac:	59 83       	std	Y+1, r21	; 0x01
    31ae:	48 83       	st	Y, r20
    31b0:	8b 8f       	std	Y+27, r24	; 0x1b
    31b2:	6c 8f       	std	Y+28, r22	; 0x1c
    31b4:	61 e0       	ldi	r22, 0x01	; 1
    31b6:	ce 01       	movw	r24, r28
    31b8:	ad df       	rcall	.-166    	; 0x3114 <xQueueGenericReset>
    31ba:	ce 01       	movw	r24, r28
    31bc:	df 91       	pop	r29
    31be:	cf 91       	pop	r28
    31c0:	08 95       	ret

000031c2 <xQueueGenericSend>:
    31c2:	9f 92       	push	r9
    31c4:	af 92       	push	r10
    31c6:	bf 92       	push	r11
    31c8:	cf 92       	push	r12
    31ca:	df 92       	push	r13
    31cc:	ef 92       	push	r14
    31ce:	ff 92       	push	r15
    31d0:	0f 93       	push	r16
    31d2:	1f 93       	push	r17
    31d4:	cf 93       	push	r28
    31d6:	df 93       	push	r29
    31d8:	00 d0       	rcall	.+0      	; 0x31da <xQueueGenericSend+0x18>
    31da:	1f 92       	push	r1
    31dc:	1f 92       	push	r1
    31de:	cd b7       	in	r28, 0x3d	; 61
    31e0:	de b7       	in	r29, 0x3e	; 62
    31e2:	8c 01       	movw	r16, r24
    31e4:	6b 01       	movw	r12, r22
    31e6:	5d 83       	std	Y+5, r21	; 0x05
    31e8:	4c 83       	std	Y+4, r20	; 0x04
    31ea:	a2 2e       	mov	r10, r18
    31ec:	b1 2c       	mov	r11, r1
    31ee:	99 24       	eor	r9, r9
    31f0:	93 94       	inc	r9
    31f2:	7c 01       	movw	r14, r24
    31f4:	88 e0       	ldi	r24, 0x08	; 8
    31f6:	e8 0e       	add	r14, r24
    31f8:	f1 1c       	adc	r15, r1
    31fa:	0f b6       	in	r0, 0x3f	; 63
    31fc:	f8 94       	cli
    31fe:	0f 92       	push	r0
    3200:	f8 01       	movw	r30, r16
    3202:	92 8d       	ldd	r25, Z+26	; 0x1a
    3204:	83 8d       	ldd	r24, Z+27	; 0x1b
    3206:	98 17       	cp	r25, r24
    3208:	18 f0       	brcs	.+6      	; 0x3210 <xQueueGenericSend+0x4e>
    320a:	f2 e0       	ldi	r31, 0x02	; 2
    320c:	af 12       	cpse	r10, r31
    320e:	15 c0       	rjmp	.+42     	; 0x323a <xQueueGenericSend+0x78>
    3210:	4a 2d       	mov	r20, r10
    3212:	b6 01       	movw	r22, r12
    3214:	c8 01       	movw	r24, r16
    3216:	bd de       	rcall	.-646    	; 0x2f92 <prvCopyDataToQueue>
    3218:	f8 01       	movw	r30, r16
    321a:	91 89       	ldd	r25, Z+17	; 0x11
    321c:	99 23       	and	r25, r25
    321e:	39 f0       	breq	.+14     	; 0x322e <xQueueGenericSend+0x6c>
    3220:	c8 01       	movw	r24, r16
    3222:	41 96       	adiw	r24, 0x11	; 17
    3224:	92 d5       	rcall	.+2852   	; 0x3d4a <xTaskRemoveFromEventList>
    3226:	88 23       	and	r24, r24
    3228:	21 f0       	breq	.+8      	; 0x3232 <xQueueGenericSend+0x70>
    322a:	e3 dd       	rcall	.-1082   	; 0x2df2 <vPortYield>
    322c:	02 c0       	rjmp	.+4      	; 0x3232 <xQueueGenericSend+0x70>
    322e:	81 11       	cpse	r24, r1
    3230:	e0 dd       	rcall	.-1088   	; 0x2df2 <vPortYield>
    3232:	0f 90       	pop	r0
    3234:	0f be       	out	0x3f, r0	; 63
    3236:	81 e0       	ldi	r24, 0x01	; 1
    3238:	45 c0       	rjmp	.+138    	; 0x32c4 <xQueueGenericSend+0x102>
    323a:	8c 81       	ldd	r24, Y+4	; 0x04
    323c:	9d 81       	ldd	r25, Y+5	; 0x05
    323e:	89 2b       	or	r24, r25
    3240:	21 f4       	brne	.+8      	; 0x324a <xQueueGenericSend+0x88>
    3242:	0f 90       	pop	r0
    3244:	0f be       	out	0x3f, r0	; 63
    3246:	80 e0       	ldi	r24, 0x00	; 0
    3248:	3d c0       	rjmp	.+122    	; 0x32c4 <xQueueGenericSend+0x102>
    324a:	b1 10       	cpse	r11, r1
    324c:	04 c0       	rjmp	.+8      	; 0x3256 <xQueueGenericSend+0x94>
    324e:	ce 01       	movw	r24, r28
    3250:	01 96       	adiw	r24, 0x01	; 1
    3252:	c3 d5       	rcall	.+2950   	; 0x3dda <vTaskInternalSetTimeOutState>
    3254:	b9 2c       	mov	r11, r9
    3256:	0f 90       	pop	r0
    3258:	0f be       	out	0x3f, r0	; 63
    325a:	7d d3       	rcall	.+1786   	; 0x3956 <vTaskSuspendAll>
    325c:	0f b6       	in	r0, 0x3f	; 63
    325e:	f8 94       	cli
    3260:	0f 92       	push	r0
    3262:	f8 01       	movw	r30, r16
    3264:	85 8d       	ldd	r24, Z+29	; 0x1d
    3266:	8f 3f       	cpi	r24, 0xFF	; 255
    3268:	09 f4       	brne	.+2      	; 0x326c <xQueueGenericSend+0xaa>
    326a:	15 8e       	std	Z+29, r1	; 0x1d
    326c:	f8 01       	movw	r30, r16
    326e:	86 8d       	ldd	r24, Z+30	; 0x1e
    3270:	8f 3f       	cpi	r24, 0xFF	; 255
    3272:	09 f4       	brne	.+2      	; 0x3276 <xQueueGenericSend+0xb4>
    3274:	16 8e       	std	Z+30, r1	; 0x1e
    3276:	0f 90       	pop	r0
    3278:	0f be       	out	0x3f, r0	; 63
    327a:	be 01       	movw	r22, r28
    327c:	6c 5f       	subi	r22, 0xFC	; 252
    327e:	7f 4f       	sbci	r23, 0xFF	; 255
    3280:	ce 01       	movw	r24, r28
    3282:	01 96       	adiw	r24, 0x01	; 1
    3284:	b5 d5       	rcall	.+2922   	; 0x3df0 <xTaskCheckForTimeOut>
    3286:	81 11       	cpse	r24, r1
    3288:	19 c0       	rjmp	.+50     	; 0x32bc <xQueueGenericSend+0xfa>
    328a:	0f b6       	in	r0, 0x3f	; 63
    328c:	f8 94       	cli
    328e:	0f 92       	push	r0
    3290:	f8 01       	movw	r30, r16
    3292:	92 8d       	ldd	r25, Z+26	; 0x1a
    3294:	83 8d       	ldd	r24, Z+27	; 0x1b
    3296:	0f 90       	pop	r0
    3298:	0f be       	out	0x3f, r0	; 63
    329a:	98 13       	cpse	r25, r24
    329c:	0b c0       	rjmp	.+22     	; 0x32b4 <xQueueGenericSend+0xf2>
    329e:	6c 81       	ldd	r22, Y+4	; 0x04
    32a0:	7d 81       	ldd	r23, Y+5	; 0x05
    32a2:	c7 01       	movw	r24, r14
    32a4:	29 d5       	rcall	.+2642   	; 0x3cf8 <vTaskPlaceOnEventList>
    32a6:	c8 01       	movw	r24, r16
    32a8:	ec de       	rcall	.-552    	; 0x3082 <prvUnlockQueue>
    32aa:	1c d4       	rcall	.+2104   	; 0x3ae4 <xTaskResumeAll>
    32ac:	81 11       	cpse	r24, r1
    32ae:	a5 cf       	rjmp	.-182    	; 0x31fa <xQueueGenericSend+0x38>
    32b0:	a0 dd       	rcall	.-1216   	; 0x2df2 <vPortYield>
    32b2:	a3 cf       	rjmp	.-186    	; 0x31fa <xQueueGenericSend+0x38>
    32b4:	c8 01       	movw	r24, r16
    32b6:	e5 de       	rcall	.-566    	; 0x3082 <prvUnlockQueue>
    32b8:	15 d4       	rcall	.+2090   	; 0x3ae4 <xTaskResumeAll>
    32ba:	9f cf       	rjmp	.-194    	; 0x31fa <xQueueGenericSend+0x38>
    32bc:	c8 01       	movw	r24, r16
    32be:	e1 de       	rcall	.-574    	; 0x3082 <prvUnlockQueue>
    32c0:	11 d4       	rcall	.+2082   	; 0x3ae4 <xTaskResumeAll>
    32c2:	80 e0       	ldi	r24, 0x00	; 0
    32c4:	0f 90       	pop	r0
    32c6:	0f 90       	pop	r0
    32c8:	0f 90       	pop	r0
    32ca:	0f 90       	pop	r0
    32cc:	0f 90       	pop	r0
    32ce:	df 91       	pop	r29
    32d0:	cf 91       	pop	r28
    32d2:	1f 91       	pop	r17
    32d4:	0f 91       	pop	r16
    32d6:	ff 90       	pop	r15
    32d8:	ef 90       	pop	r14
    32da:	df 90       	pop	r13
    32dc:	cf 90       	pop	r12
    32de:	bf 90       	pop	r11
    32e0:	af 90       	pop	r10
    32e2:	9f 90       	pop	r9
    32e4:	08 95       	ret

000032e6 <xQueueGenericSendFromISR>:
    32e6:	ef 92       	push	r14
    32e8:	ff 92       	push	r15
    32ea:	0f 93       	push	r16
    32ec:	1f 93       	push	r17
    32ee:	cf 93       	push	r28
    32f0:	df 93       	push	r29
    32f2:	8a 01       	movw	r16, r20
    32f4:	fc 01       	movw	r30, r24
    32f6:	52 8d       	ldd	r21, Z+26	; 0x1a
    32f8:	33 8d       	ldd	r19, Z+27	; 0x1b
    32fa:	53 17       	cp	r21, r19
    32fc:	10 f0       	brcs	.+4      	; 0x3302 <xQueueGenericSendFromISR+0x1c>
    32fe:	22 30       	cpi	r18, 0x02	; 2
    3300:	e1 f4       	brne	.+56     	; 0x333a <xQueueGenericSendFromISR+0x54>
    3302:	42 2f       	mov	r20, r18
    3304:	78 01       	movw	r14, r16
    3306:	ec 01       	movw	r28, r24
    3308:	1e 8d       	ldd	r17, Y+30	; 0x1e
    330a:	43 de       	rcall	.-890    	; 0x2f92 <prvCopyDataToQueue>
    330c:	1f 3f       	cpi	r17, 0xFF	; 255
    330e:	79 f4       	brne	.+30     	; 0x332e <xQueueGenericSendFromISR+0x48>
    3310:	89 89       	ldd	r24, Y+17	; 0x11
    3312:	88 23       	and	r24, r24
    3314:	a1 f0       	breq	.+40     	; 0x333e <xQueueGenericSendFromISR+0x58>
    3316:	ce 01       	movw	r24, r28
    3318:	41 96       	adiw	r24, 0x11	; 17
    331a:	17 d5       	rcall	.+2606   	; 0x3d4a <xTaskRemoveFromEventList>
    331c:	88 23       	and	r24, r24
    331e:	89 f0       	breq	.+34     	; 0x3342 <xQueueGenericSendFromISR+0x5c>
    3320:	e1 14       	cp	r14, r1
    3322:	f1 04       	cpc	r15, r1
    3324:	81 f0       	breq	.+32     	; 0x3346 <xQueueGenericSendFromISR+0x60>
    3326:	81 e0       	ldi	r24, 0x01	; 1
    3328:	f7 01       	movw	r30, r14
    332a:	80 83       	st	Z, r24
    332c:	0d c0       	rjmp	.+26     	; 0x3348 <xQueueGenericSendFromISR+0x62>
    332e:	ff 24       	eor	r15, r15
    3330:	f3 94       	inc	r15
    3332:	f1 0e       	add	r15, r17
    3334:	fe 8e       	std	Y+30, r15	; 0x1e
    3336:	81 e0       	ldi	r24, 0x01	; 1
    3338:	07 c0       	rjmp	.+14     	; 0x3348 <xQueueGenericSendFromISR+0x62>
    333a:	80 e0       	ldi	r24, 0x00	; 0
    333c:	05 c0       	rjmp	.+10     	; 0x3348 <xQueueGenericSendFromISR+0x62>
    333e:	81 e0       	ldi	r24, 0x01	; 1
    3340:	03 c0       	rjmp	.+6      	; 0x3348 <xQueueGenericSendFromISR+0x62>
    3342:	81 e0       	ldi	r24, 0x01	; 1
    3344:	01 c0       	rjmp	.+2      	; 0x3348 <xQueueGenericSendFromISR+0x62>
    3346:	81 e0       	ldi	r24, 0x01	; 1
    3348:	df 91       	pop	r29
    334a:	cf 91       	pop	r28
    334c:	1f 91       	pop	r17
    334e:	0f 91       	pop	r16
    3350:	ff 90       	pop	r15
    3352:	ef 90       	pop	r14
    3354:	08 95       	ret

00003356 <xQueueReceive>:
    3356:	9f 92       	push	r9
    3358:	af 92       	push	r10
    335a:	bf 92       	push	r11
    335c:	cf 92       	push	r12
    335e:	df 92       	push	r13
    3360:	ef 92       	push	r14
    3362:	ff 92       	push	r15
    3364:	0f 93       	push	r16
    3366:	1f 93       	push	r17
    3368:	cf 93       	push	r28
    336a:	df 93       	push	r29
    336c:	00 d0       	rcall	.+0      	; 0x336e <xQueueReceive+0x18>
    336e:	1f 92       	push	r1
    3370:	1f 92       	push	r1
    3372:	cd b7       	in	r28, 0x3d	; 61
    3374:	de b7       	in	r29, 0x3e	; 62
    3376:	8c 01       	movw	r16, r24
    3378:	5b 01       	movw	r10, r22
    337a:	5d 83       	std	Y+5, r21	; 0x05
    337c:	4c 83       	std	Y+4, r20	; 0x04
    337e:	e1 2c       	mov	r14, r1
    3380:	99 24       	eor	r9, r9
    3382:	93 94       	inc	r9
    3384:	6c 01       	movw	r12, r24
    3386:	81 e1       	ldi	r24, 0x11	; 17
    3388:	c8 0e       	add	r12, r24
    338a:	d1 1c       	adc	r13, r1
    338c:	0f b6       	in	r0, 0x3f	; 63
    338e:	f8 94       	cli
    3390:	0f 92       	push	r0
    3392:	f8 01       	movw	r30, r16
    3394:	f2 8c       	ldd	r15, Z+26	; 0x1a
    3396:	ff 20       	and	r15, r15
    3398:	91 f0       	breq	.+36     	; 0x33be <xQueueReceive+0x68>
    339a:	b5 01       	movw	r22, r10
    339c:	c8 01       	movw	r24, r16
    339e:	57 de       	rcall	.-850    	; 0x304e <prvCopyDataFromQueue>
    33a0:	fa 94       	dec	r15
    33a2:	f8 01       	movw	r30, r16
    33a4:	f2 8e       	std	Z+26, r15	; 0x1a
    33a6:	80 85       	ldd	r24, Z+8	; 0x08
    33a8:	88 23       	and	r24, r24
    33aa:	29 f0       	breq	.+10     	; 0x33b6 <xQueueReceive+0x60>
    33ac:	c8 01       	movw	r24, r16
    33ae:	08 96       	adiw	r24, 0x08	; 8
    33b0:	cc d4       	rcall	.+2456   	; 0x3d4a <xTaskRemoveFromEventList>
    33b2:	81 11       	cpse	r24, r1
    33b4:	1e dd       	rcall	.-1476   	; 0x2df2 <vPortYield>
    33b6:	0f 90       	pop	r0
    33b8:	0f be       	out	0x3f, r0	; 63
    33ba:	81 e0       	ldi	r24, 0x01	; 1
    33bc:	44 c0       	rjmp	.+136    	; 0x3446 <xQueueReceive+0xf0>
    33be:	8c 81       	ldd	r24, Y+4	; 0x04
    33c0:	9d 81       	ldd	r25, Y+5	; 0x05
    33c2:	89 2b       	or	r24, r25
    33c4:	21 f4       	brne	.+8      	; 0x33ce <xQueueReceive+0x78>
    33c6:	0f 90       	pop	r0
    33c8:	0f be       	out	0x3f, r0	; 63
    33ca:	80 e0       	ldi	r24, 0x00	; 0
    33cc:	3c c0       	rjmp	.+120    	; 0x3446 <xQueueReceive+0xf0>
    33ce:	e1 10       	cpse	r14, r1
    33d0:	04 c0       	rjmp	.+8      	; 0x33da <xQueueReceive+0x84>
    33d2:	ce 01       	movw	r24, r28
    33d4:	01 96       	adiw	r24, 0x01	; 1
    33d6:	01 d5       	rcall	.+2562   	; 0x3dda <vTaskInternalSetTimeOutState>
    33d8:	e9 2c       	mov	r14, r9
    33da:	0f 90       	pop	r0
    33dc:	0f be       	out	0x3f, r0	; 63
    33de:	bb d2       	rcall	.+1398   	; 0x3956 <vTaskSuspendAll>
    33e0:	0f b6       	in	r0, 0x3f	; 63
    33e2:	f8 94       	cli
    33e4:	0f 92       	push	r0
    33e6:	f8 01       	movw	r30, r16
    33e8:	85 8d       	ldd	r24, Z+29	; 0x1d
    33ea:	8f 3f       	cpi	r24, 0xFF	; 255
    33ec:	09 f4       	brne	.+2      	; 0x33f0 <xQueueReceive+0x9a>
    33ee:	15 8e       	std	Z+29, r1	; 0x1d
    33f0:	f8 01       	movw	r30, r16
    33f2:	86 8d       	ldd	r24, Z+30	; 0x1e
    33f4:	8f 3f       	cpi	r24, 0xFF	; 255
    33f6:	09 f4       	brne	.+2      	; 0x33fa <xQueueReceive+0xa4>
    33f8:	16 8e       	std	Z+30, r1	; 0x1e
    33fa:	0f 90       	pop	r0
    33fc:	0f be       	out	0x3f, r0	; 63
    33fe:	be 01       	movw	r22, r28
    3400:	6c 5f       	subi	r22, 0xFC	; 252
    3402:	7f 4f       	sbci	r23, 0xFF	; 255
    3404:	ce 01       	movw	r24, r28
    3406:	01 96       	adiw	r24, 0x01	; 1
    3408:	f3 d4       	rcall	.+2534   	; 0x3df0 <xTaskCheckForTimeOut>
    340a:	81 11       	cpse	r24, r1
    340c:	13 c0       	rjmp	.+38     	; 0x3434 <xQueueReceive+0xde>
    340e:	c8 01       	movw	r24, r16
    3410:	b5 dd       	rcall	.-1174   	; 0x2f7c <prvIsQueueEmpty>
    3412:	88 23       	and	r24, r24
    3414:	59 f0       	breq	.+22     	; 0x342c <xQueueReceive+0xd6>
    3416:	6c 81       	ldd	r22, Y+4	; 0x04
    3418:	7d 81       	ldd	r23, Y+5	; 0x05
    341a:	c6 01       	movw	r24, r12
    341c:	6d d4       	rcall	.+2266   	; 0x3cf8 <vTaskPlaceOnEventList>
    341e:	c8 01       	movw	r24, r16
    3420:	30 de       	rcall	.-928    	; 0x3082 <prvUnlockQueue>
    3422:	60 d3       	rcall	.+1728   	; 0x3ae4 <xTaskResumeAll>
    3424:	81 11       	cpse	r24, r1
    3426:	b2 cf       	rjmp	.-156    	; 0x338c <xQueueReceive+0x36>
    3428:	e4 dc       	rcall	.-1592   	; 0x2df2 <vPortYield>
    342a:	b0 cf       	rjmp	.-160    	; 0x338c <xQueueReceive+0x36>
    342c:	c8 01       	movw	r24, r16
    342e:	29 de       	rcall	.-942    	; 0x3082 <prvUnlockQueue>
    3430:	59 d3       	rcall	.+1714   	; 0x3ae4 <xTaskResumeAll>
    3432:	ac cf       	rjmp	.-168    	; 0x338c <xQueueReceive+0x36>
    3434:	c8 01       	movw	r24, r16
    3436:	25 de       	rcall	.-950    	; 0x3082 <prvUnlockQueue>
    3438:	55 d3       	rcall	.+1706   	; 0x3ae4 <xTaskResumeAll>
    343a:	c8 01       	movw	r24, r16
    343c:	9f dd       	rcall	.-1218   	; 0x2f7c <prvIsQueueEmpty>
    343e:	88 23       	and	r24, r24
    3440:	09 f4       	brne	.+2      	; 0x3444 <xQueueReceive+0xee>
    3442:	a4 cf       	rjmp	.-184    	; 0x338c <xQueueReceive+0x36>
    3444:	80 e0       	ldi	r24, 0x00	; 0
    3446:	0f 90       	pop	r0
    3448:	0f 90       	pop	r0
    344a:	0f 90       	pop	r0
    344c:	0f 90       	pop	r0
    344e:	0f 90       	pop	r0
    3450:	df 91       	pop	r29
    3452:	cf 91       	pop	r28
    3454:	1f 91       	pop	r17
    3456:	0f 91       	pop	r16
    3458:	ff 90       	pop	r15
    345a:	ef 90       	pop	r14
    345c:	df 90       	pop	r13
    345e:	cf 90       	pop	r12
    3460:	bf 90       	pop	r11
    3462:	af 90       	pop	r10
    3464:	9f 90       	pop	r9
    3466:	08 95       	ret

00003468 <xQueueSemaphoreTake>:
    3468:	bf 92       	push	r11
    346a:	cf 92       	push	r12
    346c:	df 92       	push	r13
    346e:	ef 92       	push	r14
    3470:	ff 92       	push	r15
    3472:	0f 93       	push	r16
    3474:	1f 93       	push	r17
    3476:	cf 93       	push	r28
    3478:	df 93       	push	r29
    347a:	00 d0       	rcall	.+0      	; 0x347c <xQueueSemaphoreTake+0x14>
    347c:	1f 92       	push	r1
    347e:	1f 92       	push	r1
    3480:	cd b7       	in	r28, 0x3d	; 61
    3482:	de b7       	in	r29, 0x3e	; 62
    3484:	8c 01       	movw	r16, r24
    3486:	7d 83       	std	Y+5, r23	; 0x05
    3488:	6c 83       	std	Y+4, r22	; 0x04
    348a:	b1 2c       	mov	r11, r1
    348c:	d1 2c       	mov	r13, r1
    348e:	cc 24       	eor	r12, r12
    3490:	c3 94       	inc	r12
    3492:	7c 01       	movw	r14, r24
    3494:	81 e1       	ldi	r24, 0x11	; 17
    3496:	e8 0e       	add	r14, r24
    3498:	f1 1c       	adc	r15, r1
    349a:	0f b6       	in	r0, 0x3f	; 63
    349c:	f8 94       	cli
    349e:	0f 92       	push	r0
    34a0:	d8 01       	movw	r26, r16
    34a2:	5a 96       	adiw	r26, 0x1a	; 26
    34a4:	8c 91       	ld	r24, X
    34a6:	5a 97       	sbiw	r26, 0x1a	; 26
    34a8:	88 23       	and	r24, r24
    34aa:	d1 f0       	breq	.+52     	; 0x34e0 <xQueueSemaphoreTake+0x78>
    34ac:	81 50       	subi	r24, 0x01	; 1
    34ae:	5a 96       	adiw	r26, 0x1a	; 26
    34b0:	8c 93       	st	X, r24
    34b2:	5a 97       	sbiw	r26, 0x1a	; 26
    34b4:	8d 91       	ld	r24, X+
    34b6:	9c 91       	ld	r25, X
    34b8:	89 2b       	or	r24, r25
    34ba:	21 f4       	brne	.+8      	; 0x34c4 <xQueueSemaphoreTake+0x5c>
    34bc:	d8 d5       	rcall	.+2992   	; 0x406e <pvTaskIncrementMutexHeldCount>
    34be:	f8 01       	movw	r30, r16
    34c0:	95 83       	std	Z+5, r25	; 0x05
    34c2:	84 83       	std	Z+4, r24	; 0x04
    34c4:	d8 01       	movw	r26, r16
    34c6:	18 96       	adiw	r26, 0x08	; 8
    34c8:	8c 91       	ld	r24, X
    34ca:	88 23       	and	r24, r24
    34cc:	29 f0       	breq	.+10     	; 0x34d8 <xQueueSemaphoreTake+0x70>
    34ce:	c8 01       	movw	r24, r16
    34d0:	08 96       	adiw	r24, 0x08	; 8
    34d2:	3b d4       	rcall	.+2166   	; 0x3d4a <xTaskRemoveFromEventList>
    34d4:	81 11       	cpse	r24, r1
    34d6:	8d dc       	rcall	.-1766   	; 0x2df2 <vPortYield>
    34d8:	0f 90       	pop	r0
    34da:	0f be       	out	0x3f, r0	; 63
    34dc:	81 e0       	ldi	r24, 0x01	; 1
    34de:	70 c0       	rjmp	.+224    	; 0x35c0 <xQueueSemaphoreTake+0x158>
    34e0:	8c 81       	ldd	r24, Y+4	; 0x04
    34e2:	9d 81       	ldd	r25, Y+5	; 0x05
    34e4:	89 2b       	or	r24, r25
    34e6:	21 f4       	brne	.+8      	; 0x34f0 <xQueueSemaphoreTake+0x88>
    34e8:	0f 90       	pop	r0
    34ea:	0f be       	out	0x3f, r0	; 63
    34ec:	80 e0       	ldi	r24, 0x00	; 0
    34ee:	68 c0       	rjmp	.+208    	; 0x35c0 <xQueueSemaphoreTake+0x158>
    34f0:	d1 10       	cpse	r13, r1
    34f2:	04 c0       	rjmp	.+8      	; 0x34fc <xQueueSemaphoreTake+0x94>
    34f4:	ce 01       	movw	r24, r28
    34f6:	01 96       	adiw	r24, 0x01	; 1
    34f8:	70 d4       	rcall	.+2272   	; 0x3dda <vTaskInternalSetTimeOutState>
    34fa:	dc 2c       	mov	r13, r12
    34fc:	0f 90       	pop	r0
    34fe:	0f be       	out	0x3f, r0	; 63
    3500:	2a d2       	rcall	.+1108   	; 0x3956 <vTaskSuspendAll>
    3502:	0f b6       	in	r0, 0x3f	; 63
    3504:	f8 94       	cli
    3506:	0f 92       	push	r0
    3508:	f8 01       	movw	r30, r16
    350a:	85 8d       	ldd	r24, Z+29	; 0x1d
    350c:	8f 3f       	cpi	r24, 0xFF	; 255
    350e:	09 f4       	brne	.+2      	; 0x3512 <xQueueSemaphoreTake+0xaa>
    3510:	15 8e       	std	Z+29, r1	; 0x1d
    3512:	d8 01       	movw	r26, r16
    3514:	5e 96       	adiw	r26, 0x1e	; 30
    3516:	8c 91       	ld	r24, X
    3518:	5e 97       	sbiw	r26, 0x1e	; 30
    351a:	8f 3f       	cpi	r24, 0xFF	; 255
    351c:	11 f4       	brne	.+4      	; 0x3522 <xQueueSemaphoreTake+0xba>
    351e:	5e 96       	adiw	r26, 0x1e	; 30
    3520:	1c 92       	st	X, r1
    3522:	0f 90       	pop	r0
    3524:	0f be       	out	0x3f, r0	; 63
    3526:	be 01       	movw	r22, r28
    3528:	6c 5f       	subi	r22, 0xFC	; 252
    352a:	7f 4f       	sbci	r23, 0xFF	; 255
    352c:	ce 01       	movw	r24, r28
    352e:	01 96       	adiw	r24, 0x01	; 1
    3530:	5f d4       	rcall	.+2238   	; 0x3df0 <xTaskCheckForTimeOut>
    3532:	81 11       	cpse	r24, r1
    3534:	21 c0       	rjmp	.+66     	; 0x3578 <xQueueSemaphoreTake+0x110>
    3536:	c8 01       	movw	r24, r16
    3538:	21 dd       	rcall	.-1470   	; 0x2f7c <prvIsQueueEmpty>
    353a:	88 23       	and	r24, r24
    353c:	c9 f0       	breq	.+50     	; 0x3570 <xQueueSemaphoreTake+0x108>
    353e:	f8 01       	movw	r30, r16
    3540:	80 81       	ld	r24, Z
    3542:	91 81       	ldd	r25, Z+1	; 0x01
    3544:	89 2b       	or	r24, r25
    3546:	49 f4       	brne	.+18     	; 0x355a <xQueueSemaphoreTake+0xf2>
    3548:	0f b6       	in	r0, 0x3f	; 63
    354a:	f8 94       	cli
    354c:	0f 92       	push	r0
    354e:	84 81       	ldd	r24, Z+4	; 0x04
    3550:	95 81       	ldd	r25, Z+5	; 0x05
    3552:	8b d4       	rcall	.+2326   	; 0x3e6a <xTaskPriorityInherit>
    3554:	b8 2e       	mov	r11, r24
    3556:	0f 90       	pop	r0
    3558:	0f be       	out	0x3f, r0	; 63
    355a:	6c 81       	ldd	r22, Y+4	; 0x04
    355c:	7d 81       	ldd	r23, Y+5	; 0x05
    355e:	c7 01       	movw	r24, r14
    3560:	cb d3       	rcall	.+1942   	; 0x3cf8 <vTaskPlaceOnEventList>
    3562:	c8 01       	movw	r24, r16
    3564:	8e dd       	rcall	.-1252   	; 0x3082 <prvUnlockQueue>
    3566:	be d2       	rcall	.+1404   	; 0x3ae4 <xTaskResumeAll>
    3568:	81 11       	cpse	r24, r1
    356a:	97 cf       	rjmp	.-210    	; 0x349a <xQueueSemaphoreTake+0x32>
    356c:	42 dc       	rcall	.-1916   	; 0x2df2 <vPortYield>
    356e:	95 cf       	rjmp	.-214    	; 0x349a <xQueueSemaphoreTake+0x32>
    3570:	c8 01       	movw	r24, r16
    3572:	87 dd       	rcall	.-1266   	; 0x3082 <prvUnlockQueue>
    3574:	b7 d2       	rcall	.+1390   	; 0x3ae4 <xTaskResumeAll>
    3576:	91 cf       	rjmp	.-222    	; 0x349a <xQueueSemaphoreTake+0x32>
    3578:	c8 01       	movw	r24, r16
    357a:	83 dd       	rcall	.-1274   	; 0x3082 <prvUnlockQueue>
    357c:	b3 d2       	rcall	.+1382   	; 0x3ae4 <xTaskResumeAll>
    357e:	c8 01       	movw	r24, r16
    3580:	fd dc       	rcall	.-1542   	; 0x2f7c <prvIsQueueEmpty>
    3582:	88 23       	and	r24, r24
    3584:	09 f4       	brne	.+2      	; 0x3588 <xQueueSemaphoreTake+0x120>
    3586:	89 cf       	rjmp	.-238    	; 0x349a <xQueueSemaphoreTake+0x32>
    3588:	bb 20       	and	r11, r11
    358a:	c9 f0       	breq	.+50     	; 0x35be <xQueueSemaphoreTake+0x156>
    358c:	0f b6       	in	r0, 0x3f	; 63
    358e:	f8 94       	cli
    3590:	0f 92       	push	r0
    3592:	f8 01       	movw	r30, r16
    3594:	81 89       	ldd	r24, Z+17	; 0x11
    3596:	88 23       	and	r24, r24
    3598:	39 f0       	breq	.+14     	; 0x35a8 <xQueueSemaphoreTake+0x140>
    359a:	06 88       	ldd	r0, Z+22	; 0x16
    359c:	f7 89       	ldd	r31, Z+23	; 0x17
    359e:	e0 2d       	mov	r30, r0
    35a0:	80 81       	ld	r24, Z
    35a2:	64 e0       	ldi	r22, 0x04	; 4
    35a4:	68 1b       	sub	r22, r24
    35a6:	01 c0       	rjmp	.+2      	; 0x35aa <xQueueSemaphoreTake+0x142>
    35a8:	60 e0       	ldi	r22, 0x00	; 0
    35aa:	d8 01       	movw	r26, r16
    35ac:	14 96       	adiw	r26, 0x04	; 4
    35ae:	8d 91       	ld	r24, X+
    35b0:	9c 91       	ld	r25, X
    35b2:	15 97       	sbiw	r26, 0x05	; 5
    35b4:	0c d5       	rcall	.+2584   	; 0x3fce <vTaskPriorityDisinheritAfterTimeout>
    35b6:	0f 90       	pop	r0
    35b8:	0f be       	out	0x3f, r0	; 63
    35ba:	80 e0       	ldi	r24, 0x00	; 0
    35bc:	01 c0       	rjmp	.+2      	; 0x35c0 <xQueueSemaphoreTake+0x158>
    35be:	80 e0       	ldi	r24, 0x00	; 0
    35c0:	0f 90       	pop	r0
    35c2:	0f 90       	pop	r0
    35c4:	0f 90       	pop	r0
    35c6:	0f 90       	pop	r0
    35c8:	0f 90       	pop	r0
    35ca:	df 91       	pop	r29
    35cc:	cf 91       	pop	r28
    35ce:	1f 91       	pop	r17
    35d0:	0f 91       	pop	r16
    35d2:	ff 90       	pop	r15
    35d4:	ef 90       	pop	r14
    35d6:	df 90       	pop	r13
    35d8:	cf 90       	pop	r12
    35da:	bf 90       	pop	r11
    35dc:	08 95       	ret

000035de <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
    {
    35de:	cf 93       	push	r28
    35e0:	df 93       	push	r29
    35e2:	ec 01       	movw	r28, r24
        will not actually cause the task to block, just place it on a blocked
        list.  It will not block until the scheduler is unlocked - at which
        time a yield will be performed.  If an item is added to the queue while
        the queue is locked, and the calling task blocks on the queue, then the
        calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    35e4:	0f b6       	in	r0, 0x3f	; 63
    35e6:	f8 94       	cli
    35e8:	0f 92       	push	r0
    35ea:	8d 8d       	ldd	r24, Y+29	; 0x1d
    35ec:	8f 3f       	cpi	r24, 0xFF	; 255
    35ee:	09 f4       	brne	.+2      	; 0x35f2 <vQueueWaitForMessageRestricted+0x14>
    35f0:	1d 8e       	std	Y+29, r1	; 0x1d
    35f2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    35f4:	8f 3f       	cpi	r24, 0xFF	; 255
    35f6:	09 f4       	brne	.+2      	; 0x35fa <vQueueWaitForMessageRestricted+0x1c>
    35f8:	1e 8e       	std	Y+30, r1	; 0x1e
    35fa:	0f 90       	pop	r0
    35fc:	0f be       	out	0x3f, r0	; 63
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    35fe:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3600:	81 11       	cpse	r24, r1
    3602:	03 c0       	rjmp	.+6      	; 0x360a <vQueueWaitForMessageRestricted+0x2c>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    3604:	ce 01       	movw	r24, r28
    3606:	41 96       	adiw	r24, 0x11	; 17
    3608:	88 d3       	rcall	.+1808   	; 0x3d1a <vTaskPlaceOnEventListRestricted>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
        prvUnlockQueue( pxQueue );
    360a:	ce 01       	movw	r24, r28
    360c:	3a dd       	rcall	.-1420   	; 0x3082 <prvUnlockQueue>
    }
    360e:	df 91       	pop	r29
    3610:	cf 91       	pop	r28
    3612:	08 95       	ret

00003614 <prvResetNextTaskUnblockTime>:
    3614:	e0 91 ee 0e 	lds	r30, 0x0EEE	; 0x800eee <pxDelayedTaskList>
    3618:	f0 91 ef 0e 	lds	r31, 0x0EEF	; 0x800eef <pxDelayedTaskList+0x1>
    361c:	80 81       	ld	r24, Z
    361e:	81 11       	cpse	r24, r1
    3620:	07 c0       	rjmp	.+14     	; 0x3630 <prvResetNextTaskUnblockTime+0x1c>
    3622:	8f ef       	ldi	r24, 0xFF	; 255
    3624:	9f ef       	ldi	r25, 0xFF	; 255
    3626:	90 93 cf 0e 	sts	0x0ECF, r25	; 0x800ecf <xNextTaskUnblockTime+0x1>
    362a:	80 93 ce 0e 	sts	0x0ECE, r24	; 0x800ece <xNextTaskUnblockTime>
    362e:	08 95       	ret
    3630:	e0 91 ee 0e 	lds	r30, 0x0EEE	; 0x800eee <pxDelayedTaskList>
    3634:	f0 91 ef 0e 	lds	r31, 0x0EEF	; 0x800eef <pxDelayedTaskList+0x1>
    3638:	05 80       	ldd	r0, Z+5	; 0x05
    363a:	f6 81       	ldd	r31, Z+6	; 0x06
    363c:	e0 2d       	mov	r30, r0
    363e:	06 80       	ldd	r0, Z+6	; 0x06
    3640:	f7 81       	ldd	r31, Z+7	; 0x07
    3642:	e0 2d       	mov	r30, r0
    3644:	82 81       	ldd	r24, Z+2	; 0x02
    3646:	93 81       	ldd	r25, Z+3	; 0x03
    3648:	90 93 cf 0e 	sts	0x0ECF, r25	; 0x800ecf <xNextTaskUnblockTime+0x1>
    364c:	80 93 ce 0e 	sts	0x0ECE, r24	; 0x800ece <xNextTaskUnblockTime>
    3650:	08 95       	ret

00003652 <prvAddCurrentTaskToDelayedList>:
    3652:	0f 93       	push	r16
    3654:	1f 93       	push	r17
    3656:	cf 93       	push	r28
    3658:	df 93       	push	r29
    365a:	ec 01       	movw	r28, r24
    365c:	00 91 d6 0e 	lds	r16, 0x0ED6	; 0x800ed6 <xTickCount>
    3660:	10 91 d7 0e 	lds	r17, 0x0ED7	; 0x800ed7 <xTickCount+0x1>
    3664:	80 91 14 0f 	lds	r24, 0x0F14	; 0x800f14 <pxCurrentTCB>
    3668:	90 91 15 0f 	lds	r25, 0x0F15	; 0x800f15 <pxCurrentTCB+0x1>
    366c:	02 96       	adiw	r24, 0x02	; 2
    366e:	ec da       	rcall	.-2600   	; 0x2c48 <uxListRemove>
    3670:	c0 0f       	add	r28, r16
    3672:	d1 1f       	adc	r29, r17
    3674:	e0 91 14 0f 	lds	r30, 0x0F14	; 0x800f14 <pxCurrentTCB>
    3678:	f0 91 15 0f 	lds	r31, 0x0F15	; 0x800f15 <pxCurrentTCB+0x1>
    367c:	d3 83       	std	Z+3, r29	; 0x03
    367e:	c2 83       	std	Z+2, r28	; 0x02
    3680:	c0 17       	cp	r28, r16
    3682:	d1 07       	cpc	r29, r17
    3684:	60 f4       	brcc	.+24     	; 0x369e <prvAddCurrentTaskToDelayedList+0x4c>
    3686:	60 91 14 0f 	lds	r22, 0x0F14	; 0x800f14 <pxCurrentTCB>
    368a:	70 91 15 0f 	lds	r23, 0x0F15	; 0x800f15 <pxCurrentTCB+0x1>
    368e:	80 91 ec 0e 	lds	r24, 0x0EEC	; 0x800eec <pxOverflowDelayedTaskList>
    3692:	90 91 ed 0e 	lds	r25, 0x0EED	; 0x800eed <pxOverflowDelayedTaskList+0x1>
    3696:	6e 5f       	subi	r22, 0xFE	; 254
    3698:	7f 4f       	sbci	r23, 0xFF	; 255
    369a:	a5 da       	rcall	.-2742   	; 0x2be6 <vListInsert>
    369c:	16 c0       	rjmp	.+44     	; 0x36ca <prvAddCurrentTaskToDelayedList+0x78>
    369e:	60 91 14 0f 	lds	r22, 0x0F14	; 0x800f14 <pxCurrentTCB>
    36a2:	70 91 15 0f 	lds	r23, 0x0F15	; 0x800f15 <pxCurrentTCB+0x1>
    36a6:	80 91 ee 0e 	lds	r24, 0x0EEE	; 0x800eee <pxDelayedTaskList>
    36aa:	90 91 ef 0e 	lds	r25, 0x0EEF	; 0x800eef <pxDelayedTaskList+0x1>
    36ae:	6e 5f       	subi	r22, 0xFE	; 254
    36b0:	7f 4f       	sbci	r23, 0xFF	; 255
    36b2:	99 da       	rcall	.-2766   	; 0x2be6 <vListInsert>
    36b4:	80 91 ce 0e 	lds	r24, 0x0ECE	; 0x800ece <xNextTaskUnblockTime>
    36b8:	90 91 cf 0e 	lds	r25, 0x0ECF	; 0x800ecf <xNextTaskUnblockTime+0x1>
    36bc:	c8 17       	cp	r28, r24
    36be:	d9 07       	cpc	r29, r25
    36c0:	20 f4       	brcc	.+8      	; 0x36ca <prvAddCurrentTaskToDelayedList+0x78>
    36c2:	d0 93 cf 0e 	sts	0x0ECF, r29	; 0x800ecf <xNextTaskUnblockTime+0x1>
    36c6:	c0 93 ce 0e 	sts	0x0ECE, r28	; 0x800ece <xNextTaskUnblockTime>
    36ca:	df 91       	pop	r29
    36cc:	cf 91       	pop	r28
    36ce:	1f 91       	pop	r17
    36d0:	0f 91       	pop	r16
    36d2:	08 95       	ret

000036d4 <xTaskCreateStatic>:
    36d4:	6f 92       	push	r6
    36d6:	7f 92       	push	r7
    36d8:	8f 92       	push	r8
    36da:	9f 92       	push	r9
    36dc:	af 92       	push	r10
    36de:	bf 92       	push	r11
    36e0:	cf 92       	push	r12
    36e2:	df 92       	push	r13
    36e4:	ef 92       	push	r14
    36e6:	ff 92       	push	r15
    36e8:	0f 93       	push	r16
    36ea:	cf 93       	push	r28
    36ec:	df 93       	push	r29
    36ee:	c1 14       	cp	r12, r1
    36f0:	d1 04       	cpc	r13, r1
    36f2:	09 f4       	brne	.+2      	; 0x36f6 <xTaskCreateStatic+0x22>
    36f4:	cf c0       	rjmp	.+414    	; 0x3894 <xTaskCreateStatic+0x1c0>
    36f6:	e1 14       	cp	r14, r1
    36f8:	f1 04       	cpc	r15, r1
    36fa:	09 f4       	brne	.+2      	; 0x36fe <xTaskCreateStatic+0x2a>
    36fc:	ce c0       	rjmp	.+412    	; 0x389a <xTaskCreateStatic+0x1c6>
    36fe:	e6 01       	movw	r28, r12
    3700:	59 01       	movw	r10, r18
    3702:	3a 01       	movw	r6, r20
    3704:	4b 01       	movw	r8, r22
    3706:	6c 01       	movw	r12, r24
    3708:	f8 8e       	std	Y+24, r15	; 0x18
    370a:	ef 8a       	std	Y+23, r14	; 0x17
    370c:	65 ea       	ldi	r22, 0xA5	; 165
    370e:	70 e0       	ldi	r23, 0x00	; 0
    3710:	c7 01       	movw	r24, r14
    3712:	0e 94 f0 27 	call	0x4fe0	; 0x4fe0 <memset>
    3716:	81 e0       	ldi	r24, 0x01	; 1
    3718:	68 1a       	sub	r6, r24
    371a:	71 08       	sbc	r7, r1
    371c:	ef 88       	ldd	r14, Y+23	; 0x17
    371e:	f8 8c       	ldd	r15, Y+24	; 0x18
    3720:	e6 0c       	add	r14, r6
    3722:	f7 1c       	adc	r15, r7
    3724:	d4 01       	movw	r26, r8
    3726:	8c 91       	ld	r24, X
    3728:	89 8f       	std	Y+25, r24	; 0x19
    372a:	8c 91       	ld	r24, X
    372c:	88 23       	and	r24, r24
    372e:	a1 f0       	breq	.+40     	; 0x3758 <xTaskCreateStatic+0x84>
    3730:	ae 01       	movw	r20, r28
    3732:	46 5e       	subi	r20, 0xE6	; 230
    3734:	5f 4f       	sbci	r21, 0xFF	; 255
    3736:	f4 01       	movw	r30, r8
    3738:	31 96       	adiw	r30, 0x01	; 1
    373a:	b8 e0       	ldi	r27, 0x08	; 8
    373c:	8b 0e       	add	r8, r27
    373e:	91 1c       	adc	r9, r1
    3740:	cf 01       	movw	r24, r30
    3742:	21 91       	ld	r18, Z+
    3744:	da 01       	movw	r26, r20
    3746:	2d 93       	st	X+, r18
    3748:	ad 01       	movw	r20, r26
    374a:	dc 01       	movw	r26, r24
    374c:	8c 91       	ld	r24, X
    374e:	88 23       	and	r24, r24
    3750:	19 f0       	breq	.+6      	; 0x3758 <xTaskCreateStatic+0x84>
    3752:	e8 15       	cp	r30, r8
    3754:	f9 05       	cpc	r31, r9
    3756:	a1 f7       	brne	.-24     	; 0x3740 <xTaskCreateStatic+0x6c>
    3758:	18 a2       	std	Y+32, r1	; 0x20
    375a:	04 30       	cpi	r16, 0x04	; 4
    375c:	08 f0       	brcs	.+2      	; 0x3760 <xTaskCreateStatic+0x8c>
    375e:	03 e0       	ldi	r16, 0x03	; 3
    3760:	0e 8b       	std	Y+22, r16	; 0x16
    3762:	09 a3       	std	Y+33, r16	; 0x21
    3764:	1a a2       	std	Y+34, r1	; 0x22
    3766:	4e 01       	movw	r8, r28
    3768:	b2 e0       	ldi	r27, 0x02	; 2
    376a:	8b 0e       	add	r8, r27
    376c:	91 1c       	adc	r9, r1
    376e:	c4 01       	movw	r24, r8
    3770:	15 da       	rcall	.-3030   	; 0x2b9c <vListInitialiseItem>
    3772:	ce 01       	movw	r24, r28
    3774:	0c 96       	adiw	r24, 0x0c	; 12
    3776:	12 da       	rcall	.-3036   	; 0x2b9c <vListInitialiseItem>
    3778:	d9 87       	std	Y+9, r29	; 0x09
    377a:	c8 87       	std	Y+8, r28	; 0x08
    377c:	84 e0       	ldi	r24, 0x04	; 4
    377e:	90 e0       	ldi	r25, 0x00	; 0
    3780:	80 1b       	sub	r24, r16
    3782:	91 09       	sbc	r25, r1
    3784:	9d 87       	std	Y+13, r25	; 0x0d
    3786:	8c 87       	std	Y+12, r24	; 0x0c
    3788:	db 8b       	std	Y+19, r29	; 0x13
    378a:	ca 8b       	std	Y+18, r28	; 0x12
    378c:	1c a2       	std	Y+36, r1	; 0x24
    378e:	1b a2       	std	Y+35, r1	; 0x23
    3790:	1d a2       	std	Y+37, r1	; 0x25
    3792:	1e a2       	std	Y+38, r1	; 0x26
    3794:	1f a2       	std	Y+39, r1	; 0x27
    3796:	18 a6       	std	Y+40, r1	; 0x28
    3798:	19 a6       	std	Y+41, r1	; 0x29
    379a:	a5 01       	movw	r20, r10
    379c:	b6 01       	movw	r22, r12
    379e:	c7 01       	movw	r24, r14
    37a0:	7a da       	rcall	.-2828   	; 0x2c96 <pxPortInitialiseStack>
    37a2:	99 83       	std	Y+1, r25	; 0x01
    37a4:	88 83       	st	Y, r24
    37a6:	0f b6       	in	r0, 0x3f	; 63
    37a8:	f8 94       	cli
    37aa:	0f 92       	push	r0
    37ac:	80 91 d8 0e 	lds	r24, 0x0ED8	; 0x800ed8 <uxCurrentNumberOfTasks>
    37b0:	8f 5f       	subi	r24, 0xFF	; 255
    37b2:	80 93 d8 0e 	sts	0x0ED8, r24	; 0x800ed8 <uxCurrentNumberOfTasks>
    37b6:	80 91 14 0f 	lds	r24, 0x0F14	; 0x800f14 <pxCurrentTCB>
    37ba:	90 91 15 0f 	lds	r25, 0x0F15	; 0x800f15 <pxCurrentTCB+0x1>
    37be:	89 2b       	or	r24, r25
    37c0:	69 f5       	brne	.+90     	; 0x381c <xTaskCreateStatic+0x148>
    37c2:	d0 93 15 0f 	sts	0x0F15, r29	; 0x800f15 <pxCurrentTCB+0x1>
    37c6:	c0 93 14 0f 	sts	0x0F14, r28	; 0x800f14 <pxCurrentTCB>
    37ca:	80 91 d8 0e 	lds	r24, 0x0ED8	; 0x800ed8 <uxCurrentNumberOfTasks>
    37ce:	81 30       	cpi	r24, 0x01	; 1
    37d0:	a9 f5       	brne	.+106    	; 0x383c <xTaskCreateStatic+0x168>
    37d2:	80 ef       	ldi	r24, 0xF0	; 240
    37d4:	9e e0       	ldi	r25, 0x0E	; 14
    37d6:	d4 d9       	rcall	.-3160   	; 0x2b80 <vListInitialise>
    37d8:	89 ef       	ldi	r24, 0xF9	; 249
    37da:	9e e0       	ldi	r25, 0x0E	; 14
    37dc:	d1 d9       	rcall	.-3166   	; 0x2b80 <vListInitialise>
    37de:	82 e0       	ldi	r24, 0x02	; 2
    37e0:	9f e0       	ldi	r25, 0x0F	; 15
    37e2:	ce d9       	rcall	.-3172   	; 0x2b80 <vListInitialise>
    37e4:	8b e0       	ldi	r24, 0x0B	; 11
    37e6:	9f e0       	ldi	r25, 0x0F	; 15
    37e8:	cb d9       	rcall	.-3178   	; 0x2b80 <vListInitialise>
    37ea:	84 ec       	ldi	r24, 0xC4	; 196
    37ec:	9e e0       	ldi	r25, 0x0E	; 14
    37ee:	c8 d9       	rcall	.-3184   	; 0x2b80 <vListInitialise>
    37f0:	8b eb       	ldi	r24, 0xBB	; 187
    37f2:	9e e0       	ldi	r25, 0x0E	; 14
    37f4:	c5 d9       	rcall	.-3190   	; 0x2b80 <vListInitialise>
    37f6:	83 ee       	ldi	r24, 0xE3	; 227
    37f8:	9e e0       	ldi	r25, 0x0E	; 14
    37fa:	c2 d9       	rcall	.-3196   	; 0x2b80 <vListInitialise>
    37fc:	8a ed       	ldi	r24, 0xDA	; 218
    37fe:	9e e0       	ldi	r25, 0x0E	; 14
    3800:	bf d9       	rcall	.-3202   	; 0x2b80 <vListInitialise>
    3802:	84 ec       	ldi	r24, 0xC4	; 196
    3804:	9e e0       	ldi	r25, 0x0E	; 14
    3806:	90 93 ef 0e 	sts	0x0EEF, r25	; 0x800eef <pxDelayedTaskList+0x1>
    380a:	80 93 ee 0e 	sts	0x0EEE, r24	; 0x800eee <pxDelayedTaskList>
    380e:	8b eb       	ldi	r24, 0xBB	; 187
    3810:	9e e0       	ldi	r25, 0x0E	; 14
    3812:	90 93 ed 0e 	sts	0x0EED, r25	; 0x800eed <pxOverflowDelayedTaskList+0x1>
    3816:	80 93 ec 0e 	sts	0x0EEC, r24	; 0x800eec <pxOverflowDelayedTaskList>
    381a:	10 c0       	rjmp	.+32     	; 0x383c <xTaskCreateStatic+0x168>
    381c:	80 91 d4 0e 	lds	r24, 0x0ED4	; 0x800ed4 <xSchedulerRunning>
    3820:	81 11       	cpse	r24, r1
    3822:	0c c0       	rjmp	.+24     	; 0x383c <xTaskCreateStatic+0x168>
    3824:	e0 91 14 0f 	lds	r30, 0x0F14	; 0x800f14 <pxCurrentTCB>
    3828:	f0 91 15 0f 	lds	r31, 0x0F15	; 0x800f15 <pxCurrentTCB+0x1>
    382c:	96 89       	ldd	r25, Z+22	; 0x16
    382e:	8e 89       	ldd	r24, Y+22	; 0x16
    3830:	89 17       	cp	r24, r25
    3832:	20 f0       	brcs	.+8      	; 0x383c <xTaskCreateStatic+0x168>
    3834:	d0 93 15 0f 	sts	0x0F15, r29	; 0x800f15 <pxCurrentTCB+0x1>
    3838:	c0 93 14 0f 	sts	0x0F14, r28	; 0x800f14 <pxCurrentTCB>
    383c:	80 91 d0 0e 	lds	r24, 0x0ED0	; 0x800ed0 <uxTaskNumber>
    3840:	8f 5f       	subi	r24, 0xFF	; 255
    3842:	80 93 d0 0e 	sts	0x0ED0, r24	; 0x800ed0 <uxTaskNumber>
    3846:	8e 89       	ldd	r24, Y+22	; 0x16
    3848:	90 91 d5 0e 	lds	r25, 0x0ED5	; 0x800ed5 <uxTopReadyPriority>
    384c:	98 17       	cp	r25, r24
    384e:	10 f4       	brcc	.+4      	; 0x3854 <xTaskCreateStatic+0x180>
    3850:	80 93 d5 0e 	sts	0x0ED5, r24	; 0x800ed5 <uxTopReadyPriority>
    3854:	90 e0       	ldi	r25, 0x00	; 0
    3856:	9c 01       	movw	r18, r24
    3858:	22 0f       	add	r18, r18
    385a:	33 1f       	adc	r19, r19
    385c:	22 0f       	add	r18, r18
    385e:	33 1f       	adc	r19, r19
    3860:	22 0f       	add	r18, r18
    3862:	33 1f       	adc	r19, r19
    3864:	82 0f       	add	r24, r18
    3866:	93 1f       	adc	r25, r19
    3868:	b4 01       	movw	r22, r8
    386a:	80 51       	subi	r24, 0x10	; 16
    386c:	91 4f       	sbci	r25, 0xF1	; 241
    386e:	9a d9       	rcall	.-3276   	; 0x2ba4 <vListInsertEnd>
    3870:	0f 90       	pop	r0
    3872:	0f be       	out	0x3f, r0	; 63
    3874:	80 91 d4 0e 	lds	r24, 0x0ED4	; 0x800ed4 <xSchedulerRunning>
    3878:	88 23       	and	r24, r24
    387a:	91 f0       	breq	.+36     	; 0x38a0 <xTaskCreateStatic+0x1cc>
    387c:	e0 91 14 0f 	lds	r30, 0x0F14	; 0x800f14 <pxCurrentTCB>
    3880:	f0 91 15 0f 	lds	r31, 0x0F15	; 0x800f15 <pxCurrentTCB+0x1>
    3884:	96 89       	ldd	r25, Z+22	; 0x16
    3886:	8e 89       	ldd	r24, Y+22	; 0x16
    3888:	98 17       	cp	r25, r24
    388a:	68 f4       	brcc	.+26     	; 0x38a6 <xTaskCreateStatic+0x1d2>
    388c:	b2 da       	rcall	.-2716   	; 0x2df2 <vPortYield>
    388e:	8c 2f       	mov	r24, r28
    3890:	9d 2f       	mov	r25, r29
    3892:	0b c0       	rjmp	.+22     	; 0x38aa <xTaskCreateStatic+0x1d6>
    3894:	80 e0       	ldi	r24, 0x00	; 0
    3896:	90 e0       	ldi	r25, 0x00	; 0
    3898:	08 c0       	rjmp	.+16     	; 0x38aa <xTaskCreateStatic+0x1d6>
    389a:	80 e0       	ldi	r24, 0x00	; 0
    389c:	90 e0       	ldi	r25, 0x00	; 0
    389e:	05 c0       	rjmp	.+10     	; 0x38aa <xTaskCreateStatic+0x1d6>
    38a0:	8c 2f       	mov	r24, r28
    38a2:	9d 2f       	mov	r25, r29
    38a4:	02 c0       	rjmp	.+4      	; 0x38aa <xTaskCreateStatic+0x1d6>
    38a6:	8c 2f       	mov	r24, r28
    38a8:	9d 2f       	mov	r25, r29
    38aa:	df 91       	pop	r29
    38ac:	cf 91       	pop	r28
    38ae:	0f 91       	pop	r16
    38b0:	ff 90       	pop	r15
    38b2:	ef 90       	pop	r14
    38b4:	df 90       	pop	r13
    38b6:	cf 90       	pop	r12
    38b8:	bf 90       	pop	r11
    38ba:	af 90       	pop	r10
    38bc:	9f 90       	pop	r9
    38be:	8f 90       	pop	r8
    38c0:	7f 90       	pop	r7
    38c2:	6f 90       	pop	r6
    38c4:	08 95       	ret

000038c6 <vTaskStartScheduler>:
    38c6:	cf 92       	push	r12
    38c8:	df 92       	push	r13
    38ca:	ef 92       	push	r14
    38cc:	ff 92       	push	r15
    38ce:	0f 93       	push	r16
    38d0:	cf 93       	push	r28
    38d2:	df 93       	push	r29
    38d4:	00 d0       	rcall	.+0      	; 0x38d6 <vTaskStartScheduler+0x10>
    38d6:	00 d0       	rcall	.+0      	; 0x38d8 <vTaskStartScheduler+0x12>
    38d8:	cd b7       	in	r28, 0x3d	; 61
    38da:	de b7       	in	r29, 0x3e	; 62
    38dc:	1e 82       	std	Y+6, r1	; 0x06
    38de:	1d 82       	std	Y+5, r1	; 0x05
    38e0:	1c 82       	std	Y+4, r1	; 0x04
    38e2:	1b 82       	std	Y+3, r1	; 0x03
    38e4:	ae 01       	movw	r20, r28
    38e6:	4f 5f       	subi	r20, 0xFF	; 255
    38e8:	5f 4f       	sbci	r21, 0xFF	; 255
    38ea:	be 01       	movw	r22, r28
    38ec:	6d 5f       	subi	r22, 0xFD	; 253
    38ee:	7f 4f       	sbci	r23, 0xFF	; 255
    38f0:	ce 01       	movw	r24, r28
    38f2:	05 96       	adiw	r24, 0x05	; 5
    38f4:	25 d9       	rcall	.-3510   	; 0x2b40 <vApplicationGetIdleTaskMemory>
    38f6:	cd 80       	ldd	r12, Y+5	; 0x05
    38f8:	de 80       	ldd	r13, Y+6	; 0x06
    38fa:	eb 80       	ldd	r14, Y+3	; 0x03
    38fc:	fc 80       	ldd	r15, Y+4	; 0x04
    38fe:	49 81       	ldd	r20, Y+1	; 0x01
    3900:	5a 81       	ldd	r21, Y+2	; 0x02
    3902:	00 e0       	ldi	r16, 0x00	; 0
    3904:	20 e0       	ldi	r18, 0x00	; 0
    3906:	30 e0       	ldi	r19, 0x00	; 0
    3908:	60 e6       	ldi	r22, 0x60	; 96
    390a:	73 e0       	ldi	r23, 0x03	; 3
    390c:	83 eb       	ldi	r24, 0xB3	; 179
    390e:	90 e0       	ldi	r25, 0x00	; 0
    3910:	e1 de       	rcall	.-574    	; 0x36d4 <xTaskCreateStatic>
    3912:	89 2b       	or	r24, r25
    3914:	91 f0       	breq	.+36     	; 0x393a <vTaskStartScheduler+0x74>
    3916:	1a d4       	rcall	.+2100   	; 0x414c <xTimerCreateTimerTask>
    3918:	81 30       	cpi	r24, 0x01	; 1
    391a:	79 f4       	brne	.+30     	; 0x393a <vTaskStartScheduler+0x74>
    391c:	f8 94       	cli
    391e:	8f ef       	ldi	r24, 0xFF	; 255
    3920:	9f ef       	ldi	r25, 0xFF	; 255
    3922:	90 93 cf 0e 	sts	0x0ECF, r25	; 0x800ecf <xNextTaskUnblockTime+0x1>
    3926:	80 93 ce 0e 	sts	0x0ECE, r24	; 0x800ece <xNextTaskUnblockTime>
    392a:	81 e0       	ldi	r24, 0x01	; 1
    392c:	80 93 d4 0e 	sts	0x0ED4, r24	; 0x800ed4 <xSchedulerRunning>
    3930:	10 92 d7 0e 	sts	0x0ED7, r1	; 0x800ed7 <xTickCount+0x1>
    3934:	10 92 d6 0e 	sts	0x0ED6, r1	; 0x800ed6 <xTickCount>
    3938:	20 da       	rcall	.-3008   	; 0x2d7a <xPortStartScheduler>
    393a:	26 96       	adiw	r28, 0x06	; 6
    393c:	0f b6       	in	r0, 0x3f	; 63
    393e:	f8 94       	cli
    3940:	de bf       	out	0x3e, r29	; 62
    3942:	0f be       	out	0x3f, r0	; 63
    3944:	cd bf       	out	0x3d, r28	; 61
    3946:	df 91       	pop	r29
    3948:	cf 91       	pop	r28
    394a:	0f 91       	pop	r16
    394c:	ff 90       	pop	r15
    394e:	ef 90       	pop	r14
    3950:	df 90       	pop	r13
    3952:	cf 90       	pop	r12
    3954:	08 95       	ret

00003956 <vTaskSuspendAll>:
    3956:	80 91 cd 0e 	lds	r24, 0x0ECD	; 0x800ecd <uxSchedulerSuspended>
    395a:	8f 5f       	subi	r24, 0xFF	; 255
    395c:	80 93 cd 0e 	sts	0x0ECD, r24	; 0x800ecd <uxSchedulerSuspended>
    3960:	08 95       	ret

00003962 <xTaskGetTickCount>:
    3962:	0f b6       	in	r0, 0x3f	; 63
    3964:	f8 94       	cli
    3966:	0f 92       	push	r0
    3968:	80 91 d6 0e 	lds	r24, 0x0ED6	; 0x800ed6 <xTickCount>
    396c:	90 91 d7 0e 	lds	r25, 0x0ED7	; 0x800ed7 <xTickCount+0x1>
    3970:	0f 90       	pop	r0
    3972:	0f be       	out	0x3f, r0	; 63
    3974:	08 95       	ret

00003976 <xTaskIncrementTick>:
    3976:	cf 92       	push	r12
    3978:	df 92       	push	r13
    397a:	ef 92       	push	r14
    397c:	ff 92       	push	r15
    397e:	0f 93       	push	r16
    3980:	1f 93       	push	r17
    3982:	cf 93       	push	r28
    3984:	df 93       	push	r29
    3986:	80 91 cd 0e 	lds	r24, 0x0ECD	; 0x800ecd <uxSchedulerSuspended>
    398a:	81 11       	cpse	r24, r1
    398c:	95 c0       	rjmp	.+298    	; 0x3ab8 <xTaskIncrementTick+0x142>
    398e:	e0 90 d6 0e 	lds	r14, 0x0ED6	; 0x800ed6 <xTickCount>
    3992:	f0 90 d7 0e 	lds	r15, 0x0ED7	; 0x800ed7 <xTickCount+0x1>
    3996:	8f ef       	ldi	r24, 0xFF	; 255
    3998:	e8 1a       	sub	r14, r24
    399a:	f8 0a       	sbc	r15, r24
    399c:	f0 92 d7 0e 	sts	0x0ED7, r15	; 0x800ed7 <xTickCount+0x1>
    39a0:	e0 92 d6 0e 	sts	0x0ED6, r14	; 0x800ed6 <xTickCount>
    39a4:	e1 14       	cp	r14, r1
    39a6:	f1 04       	cpc	r15, r1
    39a8:	b1 f4       	brne	.+44     	; 0x39d6 <xTaskIncrementTick+0x60>
    39aa:	80 91 ee 0e 	lds	r24, 0x0EEE	; 0x800eee <pxDelayedTaskList>
    39ae:	90 91 ef 0e 	lds	r25, 0x0EEF	; 0x800eef <pxDelayedTaskList+0x1>
    39b2:	20 91 ec 0e 	lds	r18, 0x0EEC	; 0x800eec <pxOverflowDelayedTaskList>
    39b6:	30 91 ed 0e 	lds	r19, 0x0EED	; 0x800eed <pxOverflowDelayedTaskList+0x1>
    39ba:	30 93 ef 0e 	sts	0x0EEF, r19	; 0x800eef <pxDelayedTaskList+0x1>
    39be:	20 93 ee 0e 	sts	0x0EEE, r18	; 0x800eee <pxDelayedTaskList>
    39c2:	90 93 ed 0e 	sts	0x0EED, r25	; 0x800eed <pxOverflowDelayedTaskList+0x1>
    39c6:	80 93 ec 0e 	sts	0x0EEC, r24	; 0x800eec <pxOverflowDelayedTaskList>
    39ca:	80 91 d1 0e 	lds	r24, 0x0ED1	; 0x800ed1 <xNumOfOverflows>
    39ce:	8f 5f       	subi	r24, 0xFF	; 255
    39d0:	80 93 d1 0e 	sts	0x0ED1, r24	; 0x800ed1 <xNumOfOverflows>
    39d4:	1f de       	rcall	.-962    	; 0x3614 <prvResetNextTaskUnblockTime>
    39d6:	80 91 ce 0e 	lds	r24, 0x0ECE	; 0x800ece <xNextTaskUnblockTime>
    39da:	90 91 cf 0e 	lds	r25, 0x0ECF	; 0x800ecf <xNextTaskUnblockTime+0x1>
    39de:	e8 16       	cp	r14, r24
    39e0:	f9 06       	cpc	r15, r25
    39e2:	10 f4       	brcc	.+4      	; 0x39e8 <xTaskIncrementTick+0x72>
    39e4:	d1 2c       	mov	r13, r1
    39e6:	50 c0       	rjmp	.+160    	; 0x3a88 <xTaskIncrementTick+0x112>
    39e8:	d1 2c       	mov	r13, r1
    39ea:	cc 24       	eor	r12, r12
    39ec:	c3 94       	inc	r12
    39ee:	e0 91 ee 0e 	lds	r30, 0x0EEE	; 0x800eee <pxDelayedTaskList>
    39f2:	f0 91 ef 0e 	lds	r31, 0x0EEF	; 0x800eef <pxDelayedTaskList+0x1>
    39f6:	80 81       	ld	r24, Z
    39f8:	81 11       	cpse	r24, r1
    39fa:	07 c0       	rjmp	.+14     	; 0x3a0a <xTaskIncrementTick+0x94>
    39fc:	8f ef       	ldi	r24, 0xFF	; 255
    39fe:	9f ef       	ldi	r25, 0xFF	; 255
    3a00:	90 93 cf 0e 	sts	0x0ECF, r25	; 0x800ecf <xNextTaskUnblockTime+0x1>
    3a04:	80 93 ce 0e 	sts	0x0ECE, r24	; 0x800ece <xNextTaskUnblockTime>
    3a08:	3f c0       	rjmp	.+126    	; 0x3a88 <xTaskIncrementTick+0x112>
    3a0a:	e0 91 ee 0e 	lds	r30, 0x0EEE	; 0x800eee <pxDelayedTaskList>
    3a0e:	f0 91 ef 0e 	lds	r31, 0x0EEF	; 0x800eef <pxDelayedTaskList+0x1>
    3a12:	05 80       	ldd	r0, Z+5	; 0x05
    3a14:	f6 81       	ldd	r31, Z+6	; 0x06
    3a16:	e0 2d       	mov	r30, r0
    3a18:	c6 81       	ldd	r28, Z+6	; 0x06
    3a1a:	d7 81       	ldd	r29, Z+7	; 0x07
    3a1c:	8a 81       	ldd	r24, Y+2	; 0x02
    3a1e:	9b 81       	ldd	r25, Y+3	; 0x03
    3a20:	e8 16       	cp	r14, r24
    3a22:	f9 06       	cpc	r15, r25
    3a24:	28 f4       	brcc	.+10     	; 0x3a30 <xTaskIncrementTick+0xba>
    3a26:	90 93 cf 0e 	sts	0x0ECF, r25	; 0x800ecf <xNextTaskUnblockTime+0x1>
    3a2a:	80 93 ce 0e 	sts	0x0ECE, r24	; 0x800ece <xNextTaskUnblockTime>
    3a2e:	2c c0       	rjmp	.+88     	; 0x3a88 <xTaskIncrementTick+0x112>
    3a30:	8e 01       	movw	r16, r28
    3a32:	0e 5f       	subi	r16, 0xFE	; 254
    3a34:	1f 4f       	sbci	r17, 0xFF	; 255
    3a36:	c8 01       	movw	r24, r16
    3a38:	07 d9       	rcall	.-3570   	; 0x2c48 <uxListRemove>
    3a3a:	8c 89       	ldd	r24, Y+20	; 0x14
    3a3c:	9d 89       	ldd	r25, Y+21	; 0x15
    3a3e:	89 2b       	or	r24, r25
    3a40:	19 f0       	breq	.+6      	; 0x3a48 <xTaskIncrementTick+0xd2>
    3a42:	ce 01       	movw	r24, r28
    3a44:	0c 96       	adiw	r24, 0x0c	; 12
    3a46:	00 d9       	rcall	.-3584   	; 0x2c48 <uxListRemove>
    3a48:	8e 89       	ldd	r24, Y+22	; 0x16
    3a4a:	90 91 d5 0e 	lds	r25, 0x0ED5	; 0x800ed5 <uxTopReadyPriority>
    3a4e:	98 17       	cp	r25, r24
    3a50:	10 f4       	brcc	.+4      	; 0x3a56 <xTaskIncrementTick+0xe0>
    3a52:	80 93 d5 0e 	sts	0x0ED5, r24	; 0x800ed5 <uxTopReadyPriority>
    3a56:	90 e0       	ldi	r25, 0x00	; 0
    3a58:	9c 01       	movw	r18, r24
    3a5a:	22 0f       	add	r18, r18
    3a5c:	33 1f       	adc	r19, r19
    3a5e:	22 0f       	add	r18, r18
    3a60:	33 1f       	adc	r19, r19
    3a62:	22 0f       	add	r18, r18
    3a64:	33 1f       	adc	r19, r19
    3a66:	82 0f       	add	r24, r18
    3a68:	93 1f       	adc	r25, r19
    3a6a:	b8 01       	movw	r22, r16
    3a6c:	80 51       	subi	r24, 0x10	; 16
    3a6e:	91 4f       	sbci	r25, 0xF1	; 241
    3a70:	99 d8       	rcall	.-3790   	; 0x2ba4 <vListInsertEnd>
    3a72:	e0 91 14 0f 	lds	r30, 0x0F14	; 0x800f14 <pxCurrentTCB>
    3a76:	f0 91 15 0f 	lds	r31, 0x0F15	; 0x800f15 <pxCurrentTCB+0x1>
    3a7a:	9e 89       	ldd	r25, Y+22	; 0x16
    3a7c:	86 89       	ldd	r24, Z+22	; 0x16
    3a7e:	98 17       	cp	r25, r24
    3a80:	08 f4       	brcc	.+2      	; 0x3a84 <xTaskIncrementTick+0x10e>
    3a82:	b5 cf       	rjmp	.-150    	; 0x39ee <xTaskIncrementTick+0x78>
    3a84:	dc 2c       	mov	r13, r12
    3a86:	b3 cf       	rjmp	.-154    	; 0x39ee <xTaskIncrementTick+0x78>
    3a88:	e0 91 14 0f 	lds	r30, 0x0F14	; 0x800f14 <pxCurrentTCB>
    3a8c:	f0 91 15 0f 	lds	r31, 0x0F15	; 0x800f15 <pxCurrentTCB+0x1>
    3a90:	86 89       	ldd	r24, Z+22	; 0x16
    3a92:	90 e0       	ldi	r25, 0x00	; 0
    3a94:	fc 01       	movw	r30, r24
    3a96:	ee 0f       	add	r30, r30
    3a98:	ff 1f       	adc	r31, r31
    3a9a:	ee 0f       	add	r30, r30
    3a9c:	ff 1f       	adc	r31, r31
    3a9e:	ee 0f       	add	r30, r30
    3aa0:	ff 1f       	adc	r31, r31
    3aa2:	8e 0f       	add	r24, r30
    3aa4:	9f 1f       	adc	r25, r31
    3aa6:	fc 01       	movw	r30, r24
    3aa8:	e0 51       	subi	r30, 0x10	; 16
    3aaa:	f1 4f       	sbci	r31, 0xF1	; 241
    3aac:	80 81       	ld	r24, Z
    3aae:	82 30       	cpi	r24, 0x02	; 2
    3ab0:	48 f0       	brcs	.+18     	; 0x3ac4 <xTaskIncrementTick+0x14e>
    3ab2:	dd 24       	eor	r13, r13
    3ab4:	d3 94       	inc	r13
    3ab6:	06 c0       	rjmp	.+12     	; 0x3ac4 <xTaskIncrementTick+0x14e>
    3ab8:	80 91 d3 0e 	lds	r24, 0x0ED3	; 0x800ed3 <uxPendedTicks>
    3abc:	8f 5f       	subi	r24, 0xFF	; 255
    3abe:	80 93 d3 0e 	sts	0x0ED3, r24	; 0x800ed3 <uxPendedTicks>
    3ac2:	d1 2c       	mov	r13, r1
    3ac4:	80 91 d2 0e 	lds	r24, 0x0ED2	; 0x800ed2 <xYieldPending>
    3ac8:	88 23       	and	r24, r24
    3aca:	11 f0       	breq	.+4      	; 0x3ad0 <xTaskIncrementTick+0x15a>
    3acc:	dd 24       	eor	r13, r13
    3ace:	d3 94       	inc	r13
    3ad0:	8d 2d       	mov	r24, r13
    3ad2:	df 91       	pop	r29
    3ad4:	cf 91       	pop	r28
    3ad6:	1f 91       	pop	r17
    3ad8:	0f 91       	pop	r16
    3ada:	ff 90       	pop	r15
    3adc:	ef 90       	pop	r14
    3ade:	df 90       	pop	r13
    3ae0:	cf 90       	pop	r12
    3ae2:	08 95       	ret

00003ae4 <xTaskResumeAll>:
    3ae4:	df 92       	push	r13
    3ae6:	ef 92       	push	r14
    3ae8:	ff 92       	push	r15
    3aea:	0f 93       	push	r16
    3aec:	1f 93       	push	r17
    3aee:	cf 93       	push	r28
    3af0:	df 93       	push	r29
    3af2:	0f b6       	in	r0, 0x3f	; 63
    3af4:	f8 94       	cli
    3af6:	0f 92       	push	r0
    3af8:	80 91 cd 0e 	lds	r24, 0x0ECD	; 0x800ecd <uxSchedulerSuspended>
    3afc:	81 50       	subi	r24, 0x01	; 1
    3afe:	80 93 cd 0e 	sts	0x0ECD, r24	; 0x800ecd <uxSchedulerSuspended>
    3b02:	80 91 cd 0e 	lds	r24, 0x0ECD	; 0x800ecd <uxSchedulerSuspended>
    3b06:	81 11       	cpse	r24, r1
    3b08:	59 c0       	rjmp	.+178    	; 0x3bbc <xTaskResumeAll+0xd8>
    3b0a:	80 91 d8 0e 	lds	r24, 0x0ED8	; 0x800ed8 <uxCurrentNumberOfTasks>
    3b0e:	81 11       	cpse	r24, r1
    3b10:	30 c0       	rjmp	.+96     	; 0x3b72 <xTaskResumeAll+0x8e>
    3b12:	57 c0       	rjmp	.+174    	; 0x3bc2 <xTaskResumeAll+0xde>
    3b14:	d7 01       	movw	r26, r14
    3b16:	15 96       	adiw	r26, 0x05	; 5
    3b18:	ed 91       	ld	r30, X+
    3b1a:	fc 91       	ld	r31, X
    3b1c:	16 97       	sbiw	r26, 0x06	; 6
    3b1e:	c6 81       	ldd	r28, Z+6	; 0x06
    3b20:	d7 81       	ldd	r29, Z+7	; 0x07
    3b22:	ce 01       	movw	r24, r28
    3b24:	0c 96       	adiw	r24, 0x0c	; 12
    3b26:	90 d8       	rcall	.-3808   	; 0x2c48 <uxListRemove>
    3b28:	8e 01       	movw	r16, r28
    3b2a:	0e 5f       	subi	r16, 0xFE	; 254
    3b2c:	1f 4f       	sbci	r17, 0xFF	; 255
    3b2e:	c8 01       	movw	r24, r16
    3b30:	8b d8       	rcall	.-3818   	; 0x2c48 <uxListRemove>
    3b32:	8e 89       	ldd	r24, Y+22	; 0x16
    3b34:	90 91 d5 0e 	lds	r25, 0x0ED5	; 0x800ed5 <uxTopReadyPriority>
    3b38:	98 17       	cp	r25, r24
    3b3a:	10 f4       	brcc	.+4      	; 0x3b40 <xTaskResumeAll+0x5c>
    3b3c:	80 93 d5 0e 	sts	0x0ED5, r24	; 0x800ed5 <uxTopReadyPriority>
    3b40:	90 e0       	ldi	r25, 0x00	; 0
    3b42:	9c 01       	movw	r18, r24
    3b44:	22 0f       	add	r18, r18
    3b46:	33 1f       	adc	r19, r19
    3b48:	22 0f       	add	r18, r18
    3b4a:	33 1f       	adc	r19, r19
    3b4c:	22 0f       	add	r18, r18
    3b4e:	33 1f       	adc	r19, r19
    3b50:	82 0f       	add	r24, r18
    3b52:	93 1f       	adc	r25, r19
    3b54:	b8 01       	movw	r22, r16
    3b56:	80 51       	subi	r24, 0x10	; 16
    3b58:	91 4f       	sbci	r25, 0xF1	; 241
    3b5a:	24 d8       	rcall	.-4024   	; 0x2ba4 <vListInsertEnd>
    3b5c:	e0 91 14 0f 	lds	r30, 0x0F14	; 0x800f14 <pxCurrentTCB>
    3b60:	f0 91 15 0f 	lds	r31, 0x0F15	; 0x800f15 <pxCurrentTCB+0x1>
    3b64:	9e 89       	ldd	r25, Y+22	; 0x16
    3b66:	86 89       	ldd	r24, Z+22	; 0x16
    3b68:	98 17       	cp	r25, r24
    3b6a:	68 f0       	brcs	.+26     	; 0x3b86 <xTaskResumeAll+0xa2>
    3b6c:	d0 92 d2 0e 	sts	0x0ED2, r13	; 0x800ed2 <xYieldPending>
    3b70:	0a c0       	rjmp	.+20     	; 0x3b86 <xTaskResumeAll+0xa2>
    3b72:	c0 e0       	ldi	r28, 0x00	; 0
    3b74:	d0 e0       	ldi	r29, 0x00	; 0
    3b76:	0f 2e       	mov	r0, r31
    3b78:	f3 ee       	ldi	r31, 0xE3	; 227
    3b7a:	ef 2e       	mov	r14, r31
    3b7c:	fe e0       	ldi	r31, 0x0E	; 14
    3b7e:	ff 2e       	mov	r15, r31
    3b80:	f0 2d       	mov	r31, r0
    3b82:	dd 24       	eor	r13, r13
    3b84:	d3 94       	inc	r13
    3b86:	f7 01       	movw	r30, r14
    3b88:	80 81       	ld	r24, Z
    3b8a:	81 11       	cpse	r24, r1
    3b8c:	c3 cf       	rjmp	.-122    	; 0x3b14 <xTaskResumeAll+0x30>
    3b8e:	cd 2b       	or	r28, r29
    3b90:	09 f0       	breq	.+2      	; 0x3b94 <xTaskResumeAll+0xb0>
    3b92:	40 dd       	rcall	.-1408   	; 0x3614 <prvResetNextTaskUnblockTime>
    3b94:	c0 91 d3 0e 	lds	r28, 0x0ED3	; 0x800ed3 <uxPendedTicks>
    3b98:	cc 23       	and	r28, r28
    3b9a:	49 f0       	breq	.+18     	; 0x3bae <xTaskResumeAll+0xca>
    3b9c:	d1 e0       	ldi	r29, 0x01	; 1
    3b9e:	eb de       	rcall	.-554    	; 0x3976 <xTaskIncrementTick>
    3ba0:	81 11       	cpse	r24, r1
    3ba2:	d0 93 d2 0e 	sts	0x0ED2, r29	; 0x800ed2 <xYieldPending>
    3ba6:	c1 50       	subi	r28, 0x01	; 1
    3ba8:	d1 f7       	brne	.-12     	; 0x3b9e <xTaskResumeAll+0xba>
    3baa:	10 92 d3 0e 	sts	0x0ED3, r1	; 0x800ed3 <uxPendedTicks>
    3bae:	80 91 d2 0e 	lds	r24, 0x0ED2	; 0x800ed2 <xYieldPending>
    3bb2:	88 23       	and	r24, r24
    3bb4:	29 f0       	breq	.+10     	; 0x3bc0 <xTaskResumeAll+0xdc>
    3bb6:	1d d9       	rcall	.-3526   	; 0x2df2 <vPortYield>
    3bb8:	81 e0       	ldi	r24, 0x01	; 1
    3bba:	03 c0       	rjmp	.+6      	; 0x3bc2 <xTaskResumeAll+0xde>
    3bbc:	80 e0       	ldi	r24, 0x00	; 0
    3bbe:	01 c0       	rjmp	.+2      	; 0x3bc2 <xTaskResumeAll+0xde>
    3bc0:	80 e0       	ldi	r24, 0x00	; 0
    3bc2:	0f 90       	pop	r0
    3bc4:	0f be       	out	0x3f, r0	; 63
    3bc6:	df 91       	pop	r29
    3bc8:	cf 91       	pop	r28
    3bca:	1f 91       	pop	r17
    3bcc:	0f 91       	pop	r16
    3bce:	ff 90       	pop	r15
    3bd0:	ef 90       	pop	r14
    3bd2:	df 90       	pop	r13
    3bd4:	08 95       	ret

00003bd6 <vTaskDelay>:
    3bd6:	cf 93       	push	r28
    3bd8:	df 93       	push	r29
    3bda:	ec 01       	movw	r28, r24
    3bdc:	89 2b       	or	r24, r25
    3bde:	39 f0       	breq	.+14     	; 0x3bee <vTaskDelay+0x18>
    3be0:	ba de       	rcall	.-652    	; 0x3956 <vTaskSuspendAll>
    3be2:	60 e0       	ldi	r22, 0x00	; 0
    3be4:	ce 01       	movw	r24, r28
    3be6:	35 dd       	rcall	.-1430   	; 0x3652 <prvAddCurrentTaskToDelayedList>
    3be8:	7d df       	rcall	.-262    	; 0x3ae4 <xTaskResumeAll>
    3bea:	81 11       	cpse	r24, r1
    3bec:	01 c0       	rjmp	.+2      	; 0x3bf0 <vTaskDelay+0x1a>
    3bee:	01 d9       	rcall	.-3582   	; 0x2df2 <vPortYield>
    3bf0:	df 91       	pop	r29
    3bf2:	cf 91       	pop	r28
    3bf4:	08 95       	ret

00003bf6 <vTaskSwitchContext>:
    3bf6:	80 91 cd 0e 	lds	r24, 0x0ECD	; 0x800ecd <uxSchedulerSuspended>
    3bfa:	88 23       	and	r24, r24
    3bfc:	21 f0       	breq	.+8      	; 0x3c06 <vTaskSwitchContext+0x10>
    3bfe:	81 e0       	ldi	r24, 0x01	; 1
    3c00:	80 93 d2 0e 	sts	0x0ED2, r24	; 0x800ed2 <xYieldPending>
    3c04:	08 95       	ret
    3c06:	10 92 d2 0e 	sts	0x0ED2, r1	; 0x800ed2 <xYieldPending>
    3c0a:	a0 91 14 0f 	lds	r26, 0x0F14	; 0x800f14 <pxCurrentTCB>
    3c0e:	b0 91 15 0f 	lds	r27, 0x0F15	; 0x800f15 <pxCurrentTCB+0x1>
    3c12:	e0 91 14 0f 	lds	r30, 0x0F14	; 0x800f14 <pxCurrentTCB>
    3c16:	f0 91 15 0f 	lds	r31, 0x0F15	; 0x800f15 <pxCurrentTCB+0x1>
    3c1a:	2d 91       	ld	r18, X+
    3c1c:	3c 91       	ld	r19, X
    3c1e:	87 89       	ldd	r24, Z+23	; 0x17
    3c20:	90 8d       	ldd	r25, Z+24	; 0x18
    3c22:	82 17       	cp	r24, r18
    3c24:	93 07       	cpc	r25, r19
    3c26:	60 f0       	brcs	.+24     	; 0x3c40 <vTaskSwitchContext+0x4a>
    3c28:	60 91 14 0f 	lds	r22, 0x0F14	; 0x800f14 <pxCurrentTCB>
    3c2c:	70 91 15 0f 	lds	r23, 0x0F15	; 0x800f15 <pxCurrentTCB+0x1>
    3c30:	80 91 14 0f 	lds	r24, 0x0F14	; 0x800f14 <pxCurrentTCB>
    3c34:	90 91 15 0f 	lds	r25, 0x0F15	; 0x800f15 <pxCurrentTCB+0x1>
    3c38:	67 5e       	subi	r22, 0xE7	; 231
    3c3a:	7f 4f       	sbci	r23, 0xFF	; 255
    3c3c:	0e 94 93 15 	call	0x2b26	; 0x2b26 <vApplicationStackOverflowHook>
    3c40:	20 91 d5 0e 	lds	r18, 0x0ED5	; 0x800ed5 <uxTopReadyPriority>
    3c44:	82 2f       	mov	r24, r18
    3c46:	90 e0       	ldi	r25, 0x00	; 0
    3c48:	fc 01       	movw	r30, r24
    3c4a:	ee 0f       	add	r30, r30
    3c4c:	ff 1f       	adc	r31, r31
    3c4e:	ee 0f       	add	r30, r30
    3c50:	ff 1f       	adc	r31, r31
    3c52:	ee 0f       	add	r30, r30
    3c54:	ff 1f       	adc	r31, r31
    3c56:	e8 0f       	add	r30, r24
    3c58:	f9 1f       	adc	r31, r25
    3c5a:	e0 51       	subi	r30, 0x10	; 16
    3c5c:	f1 4f       	sbci	r31, 0xF1	; 241
    3c5e:	30 81       	ld	r19, Z
    3c60:	31 11       	cpse	r19, r1
    3c62:	11 c0       	rjmp	.+34     	; 0x3c86 <vTaskSwitchContext+0x90>
    3c64:	21 50       	subi	r18, 0x01	; 1
    3c66:	82 2f       	mov	r24, r18
    3c68:	90 e0       	ldi	r25, 0x00	; 0
    3c6a:	fc 01       	movw	r30, r24
    3c6c:	ee 0f       	add	r30, r30
    3c6e:	ff 1f       	adc	r31, r31
    3c70:	ee 0f       	add	r30, r30
    3c72:	ff 1f       	adc	r31, r31
    3c74:	ee 0f       	add	r30, r30
    3c76:	ff 1f       	adc	r31, r31
    3c78:	e8 0f       	add	r30, r24
    3c7a:	f9 1f       	adc	r31, r25
    3c7c:	e0 51       	subi	r30, 0x10	; 16
    3c7e:	f1 4f       	sbci	r31, 0xF1	; 241
    3c80:	30 81       	ld	r19, Z
    3c82:	33 23       	and	r19, r19
    3c84:	79 f3       	breq	.-34     	; 0x3c64 <vTaskSwitchContext+0x6e>
    3c86:	ac 01       	movw	r20, r24
    3c88:	44 0f       	add	r20, r20
    3c8a:	55 1f       	adc	r21, r21
    3c8c:	44 0f       	add	r20, r20
    3c8e:	55 1f       	adc	r21, r21
    3c90:	44 0f       	add	r20, r20
    3c92:	55 1f       	adc	r21, r21
    3c94:	48 0f       	add	r20, r24
    3c96:	59 1f       	adc	r21, r25
    3c98:	da 01       	movw	r26, r20
    3c9a:	a0 51       	subi	r26, 0x10	; 16
    3c9c:	b1 4f       	sbci	r27, 0xF1	; 241
    3c9e:	11 96       	adiw	r26, 0x01	; 1
    3ca0:	ed 91       	ld	r30, X+
    3ca2:	fc 91       	ld	r31, X
    3ca4:	12 97       	sbiw	r26, 0x02	; 2
    3ca6:	02 80       	ldd	r0, Z+2	; 0x02
    3ca8:	f3 81       	ldd	r31, Z+3	; 0x03
    3caa:	e0 2d       	mov	r30, r0
    3cac:	12 96       	adiw	r26, 0x02	; 2
    3cae:	fc 93       	st	X, r31
    3cb0:	ee 93       	st	-X, r30
    3cb2:	11 97       	sbiw	r26, 0x01	; 1
    3cb4:	4d 50       	subi	r20, 0x0D	; 13
    3cb6:	51 4f       	sbci	r21, 0xF1	; 241
    3cb8:	e4 17       	cp	r30, r20
    3cba:	f5 07       	cpc	r31, r21
    3cbc:	29 f4       	brne	.+10     	; 0x3cc8 <vTaskSwitchContext+0xd2>
    3cbe:	42 81       	ldd	r20, Z+2	; 0x02
    3cc0:	53 81       	ldd	r21, Z+3	; 0x03
    3cc2:	fd 01       	movw	r30, r26
    3cc4:	52 83       	std	Z+2, r21	; 0x02
    3cc6:	41 83       	std	Z+1, r20	; 0x01
    3cc8:	fc 01       	movw	r30, r24
    3cca:	ee 0f       	add	r30, r30
    3ccc:	ff 1f       	adc	r31, r31
    3cce:	ee 0f       	add	r30, r30
    3cd0:	ff 1f       	adc	r31, r31
    3cd2:	ee 0f       	add	r30, r30
    3cd4:	ff 1f       	adc	r31, r31
    3cd6:	8e 0f       	add	r24, r30
    3cd8:	9f 1f       	adc	r25, r31
    3cda:	fc 01       	movw	r30, r24
    3cdc:	e0 51       	subi	r30, 0x10	; 16
    3cde:	f1 4f       	sbci	r31, 0xF1	; 241
    3ce0:	01 80       	ldd	r0, Z+1	; 0x01
    3ce2:	f2 81       	ldd	r31, Z+2	; 0x02
    3ce4:	e0 2d       	mov	r30, r0
    3ce6:	86 81       	ldd	r24, Z+6	; 0x06
    3ce8:	97 81       	ldd	r25, Z+7	; 0x07
    3cea:	90 93 15 0f 	sts	0x0F15, r25	; 0x800f15 <pxCurrentTCB+0x1>
    3cee:	80 93 14 0f 	sts	0x0F14, r24	; 0x800f14 <pxCurrentTCB>
    3cf2:	20 93 d5 0e 	sts	0x0ED5, r18	; 0x800ed5 <uxTopReadyPriority>
    3cf6:	08 95       	ret

00003cf8 <vTaskPlaceOnEventList>:
    3cf8:	cf 93       	push	r28
    3cfa:	df 93       	push	r29
    3cfc:	eb 01       	movw	r28, r22
    3cfe:	60 91 14 0f 	lds	r22, 0x0F14	; 0x800f14 <pxCurrentTCB>
    3d02:	70 91 15 0f 	lds	r23, 0x0F15	; 0x800f15 <pxCurrentTCB+0x1>
    3d06:	64 5f       	subi	r22, 0xF4	; 244
    3d08:	7f 4f       	sbci	r23, 0xFF	; 255
    3d0a:	0e 94 f3 15 	call	0x2be6	; 0x2be6 <vListInsert>
    3d0e:	61 e0       	ldi	r22, 0x01	; 1
    3d10:	ce 01       	movw	r24, r28
    3d12:	9f dc       	rcall	.-1730   	; 0x3652 <prvAddCurrentTaskToDelayedList>
    3d14:	df 91       	pop	r29
    3d16:	cf 91       	pop	r28
    3d18:	08 95       	ret

00003d1a <vTaskPlaceOnEventListRestricted>:
    3d1a:	0f 93       	push	r16
    3d1c:	1f 93       	push	r17
    3d1e:	cf 93       	push	r28
    3d20:	8b 01       	movw	r16, r22
    3d22:	c4 2f       	mov	r28, r20
    3d24:	60 91 14 0f 	lds	r22, 0x0F14	; 0x800f14 <pxCurrentTCB>
    3d28:	70 91 15 0f 	lds	r23, 0x0F15	; 0x800f15 <pxCurrentTCB+0x1>
    3d2c:	64 5f       	subi	r22, 0xF4	; 244
    3d2e:	7f 4f       	sbci	r23, 0xFF	; 255
    3d30:	0e 94 d2 15 	call	0x2ba4	; 0x2ba4 <vListInsertEnd>
    3d34:	cc 23       	and	r28, r28
    3d36:	11 f0       	breq	.+4      	; 0x3d3c <vTaskPlaceOnEventListRestricted+0x22>
    3d38:	0f ef       	ldi	r16, 0xFF	; 255
    3d3a:	1f ef       	ldi	r17, 0xFF	; 255
    3d3c:	6c 2f       	mov	r22, r28
    3d3e:	c8 01       	movw	r24, r16
    3d40:	88 dc       	rcall	.-1776   	; 0x3652 <prvAddCurrentTaskToDelayedList>
    3d42:	cf 91       	pop	r28
    3d44:	1f 91       	pop	r17
    3d46:	0f 91       	pop	r16
    3d48:	08 95       	ret

00003d4a <xTaskRemoveFromEventList>:
    3d4a:	0f 93       	push	r16
    3d4c:	1f 93       	push	r17
    3d4e:	cf 93       	push	r28
    3d50:	df 93       	push	r29
    3d52:	dc 01       	movw	r26, r24
    3d54:	15 96       	adiw	r26, 0x05	; 5
    3d56:	ed 91       	ld	r30, X+
    3d58:	fc 91       	ld	r31, X
    3d5a:	16 97       	sbiw	r26, 0x06	; 6
    3d5c:	c6 81       	ldd	r28, Z+6	; 0x06
    3d5e:	d7 81       	ldd	r29, Z+7	; 0x07
    3d60:	8e 01       	movw	r16, r28
    3d62:	04 5f       	subi	r16, 0xF4	; 244
    3d64:	1f 4f       	sbci	r17, 0xFF	; 255
    3d66:	c8 01       	movw	r24, r16
    3d68:	0e 94 24 16 	call	0x2c48	; 0x2c48 <uxListRemove>
    3d6c:	80 91 cd 0e 	lds	r24, 0x0ECD	; 0x800ecd <uxSchedulerSuspended>
    3d70:	81 11       	cpse	r24, r1
    3d72:	1c c0       	rjmp	.+56     	; 0x3dac <xTaskRemoveFromEventList+0x62>
    3d74:	0a 50       	subi	r16, 0x0A	; 10
    3d76:	11 09       	sbc	r17, r1
    3d78:	c8 01       	movw	r24, r16
    3d7a:	0e 94 24 16 	call	0x2c48	; 0x2c48 <uxListRemove>
    3d7e:	8e 89       	ldd	r24, Y+22	; 0x16
    3d80:	90 91 d5 0e 	lds	r25, 0x0ED5	; 0x800ed5 <uxTopReadyPriority>
    3d84:	98 17       	cp	r25, r24
    3d86:	10 f4       	brcc	.+4      	; 0x3d8c <xTaskRemoveFromEventList+0x42>
    3d88:	80 93 d5 0e 	sts	0x0ED5, r24	; 0x800ed5 <uxTopReadyPriority>
    3d8c:	90 e0       	ldi	r25, 0x00	; 0
    3d8e:	9c 01       	movw	r18, r24
    3d90:	22 0f       	add	r18, r18
    3d92:	33 1f       	adc	r19, r19
    3d94:	22 0f       	add	r18, r18
    3d96:	33 1f       	adc	r19, r19
    3d98:	22 0f       	add	r18, r18
    3d9a:	33 1f       	adc	r19, r19
    3d9c:	82 0f       	add	r24, r18
    3d9e:	93 1f       	adc	r25, r19
    3da0:	b8 01       	movw	r22, r16
    3da2:	80 51       	subi	r24, 0x10	; 16
    3da4:	91 4f       	sbci	r25, 0xF1	; 241
    3da6:	0e 94 d2 15 	call	0x2ba4	; 0x2ba4 <vListInsertEnd>
    3daa:	05 c0       	rjmp	.+10     	; 0x3db6 <xTaskRemoveFromEventList+0x6c>
    3dac:	b8 01       	movw	r22, r16
    3dae:	83 ee       	ldi	r24, 0xE3	; 227
    3db0:	9e e0       	ldi	r25, 0x0E	; 14
    3db2:	0e 94 d2 15 	call	0x2ba4	; 0x2ba4 <vListInsertEnd>
    3db6:	e0 91 14 0f 	lds	r30, 0x0F14	; 0x800f14 <pxCurrentTCB>
    3dba:	f0 91 15 0f 	lds	r31, 0x0F15	; 0x800f15 <pxCurrentTCB+0x1>
    3dbe:	9e 89       	ldd	r25, Y+22	; 0x16
    3dc0:	86 89       	ldd	r24, Z+22	; 0x16
    3dc2:	89 17       	cp	r24, r25
    3dc4:	20 f4       	brcc	.+8      	; 0x3dce <xTaskRemoveFromEventList+0x84>
    3dc6:	81 e0       	ldi	r24, 0x01	; 1
    3dc8:	80 93 d2 0e 	sts	0x0ED2, r24	; 0x800ed2 <xYieldPending>
    3dcc:	01 c0       	rjmp	.+2      	; 0x3dd0 <xTaskRemoveFromEventList+0x86>
    3dce:	80 e0       	ldi	r24, 0x00	; 0
    3dd0:	df 91       	pop	r29
    3dd2:	cf 91       	pop	r28
    3dd4:	1f 91       	pop	r17
    3dd6:	0f 91       	pop	r16
    3dd8:	08 95       	ret

00003dda <vTaskInternalSetTimeOutState>:
    3dda:	20 91 d1 0e 	lds	r18, 0x0ED1	; 0x800ed1 <xNumOfOverflows>
    3dde:	fc 01       	movw	r30, r24
    3de0:	20 83       	st	Z, r18
    3de2:	20 91 d6 0e 	lds	r18, 0x0ED6	; 0x800ed6 <xTickCount>
    3de6:	30 91 d7 0e 	lds	r19, 0x0ED7	; 0x800ed7 <xTickCount+0x1>
    3dea:	32 83       	std	Z+2, r19	; 0x02
    3dec:	21 83       	std	Z+1, r18	; 0x01
    3dee:	08 95       	ret

00003df0 <xTaskCheckForTimeOut>:
    3df0:	0f b6       	in	r0, 0x3f	; 63
    3df2:	f8 94       	cli
    3df4:	0f 92       	push	r0
    3df6:	20 91 d6 0e 	lds	r18, 0x0ED6	; 0x800ed6 <xTickCount>
    3dfa:	30 91 d7 0e 	lds	r19, 0x0ED7	; 0x800ed7 <xTickCount+0x1>
    3dfe:	dc 01       	movw	r26, r24
    3e00:	11 96       	adiw	r26, 0x01	; 1
    3e02:	4d 91       	ld	r20, X+
    3e04:	5c 91       	ld	r21, X
    3e06:	12 97       	sbiw	r26, 0x02	; 2
    3e08:	e0 91 d1 0e 	lds	r30, 0x0ED1	; 0x800ed1 <xNumOfOverflows>
    3e0c:	fc 91       	ld	r31, X
    3e0e:	fe 17       	cp	r31, r30
    3e10:	19 f0       	breq	.+6      	; 0x3e18 <xTaskCheckForTimeOut+0x28>
    3e12:	24 17       	cp	r18, r20
    3e14:	35 07       	cpc	r19, r21
    3e16:	98 f4       	brcc	.+38     	; 0x3e3e <xTaskCheckForTimeOut+0x4e>
    3e18:	24 1b       	sub	r18, r20
    3e1a:	35 0b       	sbc	r19, r21
    3e1c:	fb 01       	movw	r30, r22
    3e1e:	40 81       	ld	r20, Z
    3e20:	51 81       	ldd	r21, Z+1	; 0x01
    3e22:	24 17       	cp	r18, r20
    3e24:	35 07       	cpc	r19, r21
    3e26:	38 f4       	brcc	.+14     	; 0x3e36 <xTaskCheckForTimeOut+0x46>
    3e28:	42 1b       	sub	r20, r18
    3e2a:	53 0b       	sbc	r21, r19
    3e2c:	51 83       	std	Z+1, r21	; 0x01
    3e2e:	40 83       	st	Z, r20
    3e30:	d4 df       	rcall	.-88     	; 0x3dda <vTaskInternalSetTimeOutState>
    3e32:	80 e0       	ldi	r24, 0x00	; 0
    3e34:	05 c0       	rjmp	.+10     	; 0x3e40 <xTaskCheckForTimeOut+0x50>
    3e36:	11 82       	std	Z+1, r1	; 0x01
    3e38:	10 82       	st	Z, r1
    3e3a:	81 e0       	ldi	r24, 0x01	; 1
    3e3c:	01 c0       	rjmp	.+2      	; 0x3e40 <xTaskCheckForTimeOut+0x50>
    3e3e:	81 e0       	ldi	r24, 0x01	; 1
    3e40:	0f 90       	pop	r0
    3e42:	0f be       	out	0x3f, r0	; 63
    3e44:	08 95       	ret

00003e46 <vTaskMissedYield>:
    3e46:	81 e0       	ldi	r24, 0x01	; 1
    3e48:	80 93 d2 0e 	sts	0x0ED2, r24	; 0x800ed2 <xYieldPending>
    3e4c:	08 95       	ret

00003e4e <xTaskGetSchedulerState>:
    3e4e:	80 91 d4 0e 	lds	r24, 0x0ED4	; 0x800ed4 <xSchedulerRunning>
    3e52:	88 23       	and	r24, r24
    3e54:	31 f0       	breq	.+12     	; 0x3e62 <xTaskGetSchedulerState+0x14>
    3e56:	80 91 cd 0e 	lds	r24, 0x0ECD	; 0x800ecd <uxSchedulerSuspended>
    3e5a:	88 23       	and	r24, r24
    3e5c:	21 f0       	breq	.+8      	; 0x3e66 <xTaskGetSchedulerState+0x18>
    3e5e:	80 e0       	ldi	r24, 0x00	; 0
    3e60:	08 95       	ret
    3e62:	81 e0       	ldi	r24, 0x01	; 1
    3e64:	08 95       	ret
    3e66:	82 e0       	ldi	r24, 0x02	; 2
    3e68:	08 95       	ret

00003e6a <xTaskPriorityInherit>:
    3e6a:	0f 93       	push	r16
    3e6c:	1f 93       	push	r17
    3e6e:	cf 93       	push	r28
    3e70:	df 93       	push	r29
    3e72:	fc 01       	movw	r30, r24
    3e74:	89 2b       	or	r24, r25
    3e76:	09 f4       	brne	.+2      	; 0x3e7a <xTaskPriorityInherit+0x10>
    3e78:	64 c0       	rjmp	.+200    	; 0x3f42 <xTaskPriorityInherit+0xd8>
    3e7a:	26 89       	ldd	r18, Z+22	; 0x16
    3e7c:	a0 91 14 0f 	lds	r26, 0x0F14	; 0x800f14 <pxCurrentTCB>
    3e80:	b0 91 15 0f 	lds	r27, 0x0F15	; 0x800f15 <pxCurrentTCB+0x1>
    3e84:	56 96       	adiw	r26, 0x16	; 22
    3e86:	8c 91       	ld	r24, X
    3e88:	28 17       	cp	r18, r24
    3e8a:	08 f0       	brcs	.+2      	; 0x3e8e <xTaskPriorityInherit+0x24>
    3e8c:	4e c0       	rjmp	.+156    	; 0x3f2a <xTaskPriorityInherit+0xc0>
    3e8e:	84 85       	ldd	r24, Z+12	; 0x0c
    3e90:	95 85       	ldd	r25, Z+13	; 0x0d
    3e92:	99 23       	and	r25, r25
    3e94:	64 f0       	brlt	.+24     	; 0x3eae <xTaskPriorityInherit+0x44>
    3e96:	a0 91 14 0f 	lds	r26, 0x0F14	; 0x800f14 <pxCurrentTCB>
    3e9a:	b0 91 15 0f 	lds	r27, 0x0F15	; 0x800f15 <pxCurrentTCB+0x1>
    3e9e:	56 96       	adiw	r26, 0x16	; 22
    3ea0:	3c 91       	ld	r19, X
    3ea2:	84 e0       	ldi	r24, 0x04	; 4
    3ea4:	90 e0       	ldi	r25, 0x00	; 0
    3ea6:	83 1b       	sub	r24, r19
    3ea8:	91 09       	sbc	r25, r1
    3eaa:	95 87       	std	Z+13, r25	; 0x0d
    3eac:	84 87       	std	Z+12, r24	; 0x0c
    3eae:	30 e0       	ldi	r19, 0x00	; 0
    3eb0:	c9 01       	movw	r24, r18
    3eb2:	88 0f       	add	r24, r24
    3eb4:	99 1f       	adc	r25, r25
    3eb6:	88 0f       	add	r24, r24
    3eb8:	99 1f       	adc	r25, r25
    3eba:	88 0f       	add	r24, r24
    3ebc:	99 1f       	adc	r25, r25
    3ebe:	28 0f       	add	r18, r24
    3ec0:	39 1f       	adc	r19, r25
    3ec2:	20 51       	subi	r18, 0x10	; 16
    3ec4:	31 4f       	sbci	r19, 0xF1	; 241
    3ec6:	82 85       	ldd	r24, Z+10	; 0x0a
    3ec8:	93 85       	ldd	r25, Z+11	; 0x0b
    3eca:	82 17       	cp	r24, r18
    3ecc:	93 07       	cpc	r25, r19
    3ece:	21 f5       	brne	.+72     	; 0x3f18 <xTaskPriorityInherit+0xae>
    3ed0:	8f 01       	movw	r16, r30
    3ed2:	ef 01       	movw	r28, r30
    3ed4:	22 96       	adiw	r28, 0x02	; 2
    3ed6:	ce 01       	movw	r24, r28
    3ed8:	0e 94 24 16 	call	0x2c48	; 0x2c48 <uxListRemove>
    3edc:	e0 91 14 0f 	lds	r30, 0x0F14	; 0x800f14 <pxCurrentTCB>
    3ee0:	f0 91 15 0f 	lds	r31, 0x0F15	; 0x800f15 <pxCurrentTCB+0x1>
    3ee4:	86 89       	ldd	r24, Z+22	; 0x16
    3ee6:	f8 01       	movw	r30, r16
    3ee8:	86 8b       	std	Z+22, r24	; 0x16
    3eea:	90 91 d5 0e 	lds	r25, 0x0ED5	; 0x800ed5 <uxTopReadyPriority>
    3eee:	98 17       	cp	r25, r24
    3ef0:	10 f4       	brcc	.+4      	; 0x3ef6 <xTaskPriorityInherit+0x8c>
    3ef2:	80 93 d5 0e 	sts	0x0ED5, r24	; 0x800ed5 <uxTopReadyPriority>
    3ef6:	90 e0       	ldi	r25, 0x00	; 0
    3ef8:	9c 01       	movw	r18, r24
    3efa:	22 0f       	add	r18, r18
    3efc:	33 1f       	adc	r19, r19
    3efe:	22 0f       	add	r18, r18
    3f00:	33 1f       	adc	r19, r19
    3f02:	22 0f       	add	r18, r18
    3f04:	33 1f       	adc	r19, r19
    3f06:	82 0f       	add	r24, r18
    3f08:	93 1f       	adc	r25, r19
    3f0a:	be 01       	movw	r22, r28
    3f0c:	80 51       	subi	r24, 0x10	; 16
    3f0e:	91 4f       	sbci	r25, 0xF1	; 241
    3f10:	0e 94 d2 15 	call	0x2ba4	; 0x2ba4 <vListInsertEnd>
    3f14:	81 e0       	ldi	r24, 0x01	; 1
    3f16:	16 c0       	rjmp	.+44     	; 0x3f44 <xTaskPriorityInherit+0xda>
    3f18:	a0 91 14 0f 	lds	r26, 0x0F14	; 0x800f14 <pxCurrentTCB>
    3f1c:	b0 91 15 0f 	lds	r27, 0x0F15	; 0x800f15 <pxCurrentTCB+0x1>
    3f20:	56 96       	adiw	r26, 0x16	; 22
    3f22:	8c 91       	ld	r24, X
    3f24:	86 8b       	std	Z+22, r24	; 0x16
    3f26:	81 e0       	ldi	r24, 0x01	; 1
    3f28:	0d c0       	rjmp	.+26     	; 0x3f44 <xTaskPriorityInherit+0xda>
    3f2a:	a0 91 14 0f 	lds	r26, 0x0F14	; 0x800f14 <pxCurrentTCB>
    3f2e:	b0 91 15 0f 	lds	r27, 0x0F15	; 0x800f15 <pxCurrentTCB+0x1>
    3f32:	81 e0       	ldi	r24, 0x01	; 1
    3f34:	21 a1       	ldd	r18, Z+33	; 0x21
    3f36:	56 96       	adiw	r26, 0x16	; 22
    3f38:	9c 91       	ld	r25, X
    3f3a:	29 17       	cp	r18, r25
    3f3c:	18 f0       	brcs	.+6      	; 0x3f44 <xTaskPriorityInherit+0xda>
    3f3e:	80 e0       	ldi	r24, 0x00	; 0
    3f40:	01 c0       	rjmp	.+2      	; 0x3f44 <xTaskPriorityInherit+0xda>
    3f42:	80 e0       	ldi	r24, 0x00	; 0
    3f44:	df 91       	pop	r29
    3f46:	cf 91       	pop	r28
    3f48:	1f 91       	pop	r17
    3f4a:	0f 91       	pop	r16
    3f4c:	08 95       	ret

00003f4e <xTaskPriorityDisinherit>:
    3f4e:	0f 93       	push	r16
    3f50:	1f 93       	push	r17
    3f52:	cf 93       	push	r28
    3f54:	df 93       	push	r29
    3f56:	fc 01       	movw	r30, r24
    3f58:	89 2b       	or	r24, r25
    3f5a:	79 f1       	breq	.+94     	; 0x3fba <xTaskPriorityDisinherit+0x6c>
    3f5c:	82 a1       	ldd	r24, Z+34	; 0x22
    3f5e:	81 50       	subi	r24, 0x01	; 1
    3f60:	82 a3       	std	Z+34, r24	; 0x22
    3f62:	26 89       	ldd	r18, Z+22	; 0x16
    3f64:	91 a1       	ldd	r25, Z+33	; 0x21
    3f66:	29 17       	cp	r18, r25
    3f68:	51 f1       	breq	.+84     	; 0x3fbe <xTaskPriorityDisinherit+0x70>
    3f6a:	81 11       	cpse	r24, r1
    3f6c:	2a c0       	rjmp	.+84     	; 0x3fc2 <xTaskPriorityDisinherit+0x74>
    3f6e:	ef 01       	movw	r28, r30
    3f70:	8f 01       	movw	r16, r30
    3f72:	0e 5f       	subi	r16, 0xFE	; 254
    3f74:	1f 4f       	sbci	r17, 0xFF	; 255
    3f76:	c8 01       	movw	r24, r16
    3f78:	0e 94 24 16 	call	0x2c48	; 0x2c48 <uxListRemove>
    3f7c:	89 a1       	ldd	r24, Y+33	; 0x21
    3f7e:	8e 8b       	std	Y+22, r24	; 0x16
    3f80:	24 e0       	ldi	r18, 0x04	; 4
    3f82:	30 e0       	ldi	r19, 0x00	; 0
    3f84:	28 1b       	sub	r18, r24
    3f86:	31 09       	sbc	r19, r1
    3f88:	3d 87       	std	Y+13, r19	; 0x0d
    3f8a:	2c 87       	std	Y+12, r18	; 0x0c
    3f8c:	90 91 d5 0e 	lds	r25, 0x0ED5	; 0x800ed5 <uxTopReadyPriority>
    3f90:	98 17       	cp	r25, r24
    3f92:	10 f4       	brcc	.+4      	; 0x3f98 <xTaskPriorityDisinherit+0x4a>
    3f94:	80 93 d5 0e 	sts	0x0ED5, r24	; 0x800ed5 <uxTopReadyPriority>
    3f98:	90 e0       	ldi	r25, 0x00	; 0
    3f9a:	9c 01       	movw	r18, r24
    3f9c:	22 0f       	add	r18, r18
    3f9e:	33 1f       	adc	r19, r19
    3fa0:	22 0f       	add	r18, r18
    3fa2:	33 1f       	adc	r19, r19
    3fa4:	22 0f       	add	r18, r18
    3fa6:	33 1f       	adc	r19, r19
    3fa8:	82 0f       	add	r24, r18
    3faa:	93 1f       	adc	r25, r19
    3fac:	b8 01       	movw	r22, r16
    3fae:	80 51       	subi	r24, 0x10	; 16
    3fb0:	91 4f       	sbci	r25, 0xF1	; 241
    3fb2:	0e 94 d2 15 	call	0x2ba4	; 0x2ba4 <vListInsertEnd>
    3fb6:	81 e0       	ldi	r24, 0x01	; 1
    3fb8:	05 c0       	rjmp	.+10     	; 0x3fc4 <xTaskPriorityDisinherit+0x76>
    3fba:	80 e0       	ldi	r24, 0x00	; 0
    3fbc:	03 c0       	rjmp	.+6      	; 0x3fc4 <xTaskPriorityDisinherit+0x76>
    3fbe:	80 e0       	ldi	r24, 0x00	; 0
    3fc0:	01 c0       	rjmp	.+2      	; 0x3fc4 <xTaskPriorityDisinherit+0x76>
    3fc2:	80 e0       	ldi	r24, 0x00	; 0
    3fc4:	df 91       	pop	r29
    3fc6:	cf 91       	pop	r28
    3fc8:	1f 91       	pop	r17
    3fca:	0f 91       	pop	r16
    3fcc:	08 95       	ret

00003fce <vTaskPriorityDisinheritAfterTimeout>:
    3fce:	0f 93       	push	r16
    3fd0:	1f 93       	push	r17
    3fd2:	cf 93       	push	r28
    3fd4:	df 93       	push	r29
    3fd6:	fc 01       	movw	r30, r24
    3fd8:	89 2b       	or	r24, r25
    3fda:	09 f4       	brne	.+2      	; 0x3fde <vTaskPriorityDisinheritAfterTimeout+0x10>
    3fdc:	43 c0       	rjmp	.+134    	; 0x4064 <vTaskPriorityDisinheritAfterTimeout+0x96>
    3fde:	91 a1       	ldd	r25, Z+33	; 0x21
    3fe0:	96 17       	cp	r25, r22
    3fe2:	08 f4       	brcc	.+2      	; 0x3fe6 <vTaskPriorityDisinheritAfterTimeout+0x18>
    3fe4:	96 2f       	mov	r25, r22
    3fe6:	86 89       	ldd	r24, Z+22	; 0x16
    3fe8:	89 17       	cp	r24, r25
    3fea:	e1 f1       	breq	.+120    	; 0x4064 <vTaskPriorityDisinheritAfterTimeout+0x96>
    3fec:	22 a1       	ldd	r18, Z+34	; 0x22
    3fee:	21 30       	cpi	r18, 0x01	; 1
    3ff0:	c9 f5       	brne	.+114    	; 0x4064 <vTaskPriorityDisinheritAfterTimeout+0x96>
    3ff2:	96 8b       	std	Z+22, r25	; 0x16
    3ff4:	24 85       	ldd	r18, Z+12	; 0x0c
    3ff6:	35 85       	ldd	r19, Z+13	; 0x0d
    3ff8:	33 23       	and	r19, r19
    3ffa:	34 f0       	brlt	.+12     	; 0x4008 <vTaskPriorityDisinheritAfterTimeout+0x3a>
    3ffc:	24 e0       	ldi	r18, 0x04	; 4
    3ffe:	30 e0       	ldi	r19, 0x00	; 0
    4000:	29 1b       	sub	r18, r25
    4002:	31 09       	sbc	r19, r1
    4004:	35 87       	std	Z+13, r19	; 0x0d
    4006:	24 87       	std	Z+12, r18	; 0x0c
    4008:	90 e0       	ldi	r25, 0x00	; 0
    400a:	9c 01       	movw	r18, r24
    400c:	22 0f       	add	r18, r18
    400e:	33 1f       	adc	r19, r19
    4010:	22 0f       	add	r18, r18
    4012:	33 1f       	adc	r19, r19
    4014:	22 0f       	add	r18, r18
    4016:	33 1f       	adc	r19, r19
    4018:	82 0f       	add	r24, r18
    401a:	93 1f       	adc	r25, r19
    401c:	80 51       	subi	r24, 0x10	; 16
    401e:	91 4f       	sbci	r25, 0xF1	; 241
    4020:	22 85       	ldd	r18, Z+10	; 0x0a
    4022:	33 85       	ldd	r19, Z+11	; 0x0b
    4024:	28 17       	cp	r18, r24
    4026:	39 07       	cpc	r19, r25
    4028:	e9 f4       	brne	.+58     	; 0x4064 <vTaskPriorityDisinheritAfterTimeout+0x96>
    402a:	ef 01       	movw	r28, r30
    402c:	8f 01       	movw	r16, r30
    402e:	0e 5f       	subi	r16, 0xFE	; 254
    4030:	1f 4f       	sbci	r17, 0xFF	; 255
    4032:	c8 01       	movw	r24, r16
    4034:	0e 94 24 16 	call	0x2c48	; 0x2c48 <uxListRemove>
    4038:	8e 89       	ldd	r24, Y+22	; 0x16
    403a:	90 91 d5 0e 	lds	r25, 0x0ED5	; 0x800ed5 <uxTopReadyPriority>
    403e:	98 17       	cp	r25, r24
    4040:	10 f4       	brcc	.+4      	; 0x4046 <vTaskPriorityDisinheritAfterTimeout+0x78>
    4042:	80 93 d5 0e 	sts	0x0ED5, r24	; 0x800ed5 <uxTopReadyPriority>
    4046:	90 e0       	ldi	r25, 0x00	; 0
    4048:	9c 01       	movw	r18, r24
    404a:	22 0f       	add	r18, r18
    404c:	33 1f       	adc	r19, r19
    404e:	22 0f       	add	r18, r18
    4050:	33 1f       	adc	r19, r19
    4052:	22 0f       	add	r18, r18
    4054:	33 1f       	adc	r19, r19
    4056:	82 0f       	add	r24, r18
    4058:	93 1f       	adc	r25, r19
    405a:	b8 01       	movw	r22, r16
    405c:	80 51       	subi	r24, 0x10	; 16
    405e:	91 4f       	sbci	r25, 0xF1	; 241
    4060:	0e 94 d2 15 	call	0x2ba4	; 0x2ba4 <vListInsertEnd>
    4064:	df 91       	pop	r29
    4066:	cf 91       	pop	r28
    4068:	1f 91       	pop	r17
    406a:	0f 91       	pop	r16
    406c:	08 95       	ret

0000406e <pvTaskIncrementMutexHeldCount>:

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
        then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
    406e:	80 91 14 0f 	lds	r24, 0x0F14	; 0x800f14 <pxCurrentTCB>
    4072:	90 91 15 0f 	lds	r25, 0x0F15	; 0x800f15 <pxCurrentTCB+0x1>
    4076:	89 2b       	or	r24, r25
    4078:	39 f0       	breq	.+14     	; 0x4088 <pvTaskIncrementMutexHeldCount+0x1a>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
    407a:	e0 91 14 0f 	lds	r30, 0x0F14	; 0x800f14 <pxCurrentTCB>
    407e:	f0 91 15 0f 	lds	r31, 0x0F15	; 0x800f15 <pxCurrentTCB+0x1>
    4082:	82 a1       	ldd	r24, Z+34	; 0x22
    4084:	8f 5f       	subi	r24, 0xFF	; 255
    4086:	82 a3       	std	Z+34, r24	; 0x22
        }

        return pxCurrentTCB;
    4088:	80 91 14 0f 	lds	r24, 0x0F14	; 0x800f14 <pxCurrentTCB>
    408c:	90 91 15 0f 	lds	r25, 0x0F15	; 0x800f15 <pxCurrentTCB+0x1>
    }
    4090:	08 95       	ret

00004092 <prvInsertTimerInActiveList>:
            }
            #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
        }

        return pxNewTimer;
    }
    4092:	fc 01       	movw	r30, r24
    4094:	73 83       	std	Z+3, r23	; 0x03
    4096:	62 83       	std	Z+2, r22	; 0x02
    4098:	91 87       	std	Z+9, r25	; 0x09
    409a:	80 87       	std	Z+8, r24	; 0x08
    409c:	46 17       	cp	r20, r22
    409e:	57 07       	cpc	r21, r23
    40a0:	90 f0       	brcs	.+36     	; 0x40c6 <prvInsertTimerInActiveList+0x34>
    40a2:	42 1b       	sub	r20, r18
    40a4:	53 0b       	sbc	r21, r19
    40a6:	84 85       	ldd	r24, Z+12	; 0x0c
    40a8:	95 85       	ldd	r25, Z+13	; 0x0d
    40aa:	48 17       	cp	r20, r24
    40ac:	59 07       	cpc	r21, r25
    40ae:	e0 f4       	brcc	.+56     	; 0x40e8 <prvInsertTimerInActiveList+0x56>
    40b0:	bf 01       	movw	r22, r30
    40b2:	6e 5f       	subi	r22, 0xFE	; 254
    40b4:	7f 4f       	sbci	r23, 0xFF	; 255
    40b6:	80 91 7f 0f 	lds	r24, 0x0F7F	; 0x800f7f <pxOverflowTimerList>
    40ba:	90 91 80 0f 	lds	r25, 0x0F80	; 0x800f80 <pxOverflowTimerList+0x1>
    40be:	0e 94 f3 15 	call	0x2be6	; 0x2be6 <vListInsert>
    40c2:	80 e0       	ldi	r24, 0x00	; 0
    40c4:	08 95       	ret
    40c6:	42 17       	cp	r20, r18
    40c8:	53 07       	cpc	r21, r19
    40ca:	18 f4       	brcc	.+6      	; 0x40d2 <prvInsertTimerInActiveList+0x40>
    40cc:	62 17       	cp	r22, r18
    40ce:	73 07       	cpc	r23, r19
    40d0:	68 f4       	brcc	.+26     	; 0x40ec <prvInsertTimerInActiveList+0x5a>
    40d2:	bf 01       	movw	r22, r30
    40d4:	6e 5f       	subi	r22, 0xFE	; 254
    40d6:	7f 4f       	sbci	r23, 0xFF	; 255
    40d8:	80 91 81 0f 	lds	r24, 0x0F81	; 0x800f81 <pxCurrentTimerList>
    40dc:	90 91 82 0f 	lds	r25, 0x0F82	; 0x800f82 <pxCurrentTimerList+0x1>
    40e0:	0e 94 f3 15 	call	0x2be6	; 0x2be6 <vListInsert>
    40e4:	80 e0       	ldi	r24, 0x00	; 0
    40e6:	08 95       	ret
    40e8:	81 e0       	ldi	r24, 0x01	; 1
    40ea:	08 95       	ret
    40ec:	81 e0       	ldi	r24, 0x01	; 1
    40ee:	08 95       	ret

000040f0 <prvCheckForValidListAndQueue>:
    40f0:	0f 93       	push	r16
    40f2:	0f b6       	in	r0, 0x3f	; 63
    40f4:	f8 94       	cli
    40f6:	0f 92       	push	r0
    40f8:	80 91 7d 0f 	lds	r24, 0x0F7D	; 0x800f7d <xTimerQueue>
    40fc:	90 91 7e 0f 	lds	r25, 0x0F7E	; 0x800f7e <xTimerQueue+0x1>
    4100:	89 2b       	or	r24, r25
    4102:	01 f5       	brne	.+64     	; 0x4144 <prvCheckForValidListAndQueue+0x54>
    4104:	80 e7       	ldi	r24, 0x70	; 112
    4106:	9f e0       	ldi	r25, 0x0F	; 15
    4108:	0e 94 c0 15 	call	0x2b80	; 0x2b80 <vListInitialise>
    410c:	87 e6       	ldi	r24, 0x67	; 103
    410e:	9f e0       	ldi	r25, 0x0F	; 15
    4110:	0e 94 c0 15 	call	0x2b80	; 0x2b80 <vListInitialise>
    4114:	80 e7       	ldi	r24, 0x70	; 112
    4116:	9f e0       	ldi	r25, 0x0F	; 15
    4118:	90 93 82 0f 	sts	0x0F82, r25	; 0x800f82 <pxCurrentTimerList+0x1>
    411c:	80 93 81 0f 	sts	0x0F81, r24	; 0x800f81 <pxCurrentTimerList>
    4120:	87 e6       	ldi	r24, 0x67	; 103
    4122:	9f e0       	ldi	r25, 0x0F	; 15
    4124:	90 93 80 0f 	sts	0x0F80, r25	; 0x800f80 <pxOverflowTimerList+0x1>
    4128:	80 93 7f 0f 	sts	0x0F7F, r24	; 0x800f7f <pxOverflowTimerList>
    412c:	00 e0       	ldi	r16, 0x00	; 0
    412e:	26 e1       	ldi	r18, 0x16	; 22
    4130:	3f e0       	ldi	r19, 0x0F	; 15
    4132:	45 e3       	ldi	r20, 0x35	; 53
    4134:	5f e0       	ldi	r21, 0x0F	; 15
    4136:	65 e0       	ldi	r22, 0x05	; 5
    4138:	8a e0       	ldi	r24, 0x0A	; 10
    413a:	2e d8       	rcall	.-4004   	; 0x3198 <xQueueGenericCreateStatic>
    413c:	90 93 7e 0f 	sts	0x0F7E, r25	; 0x800f7e <xTimerQueue+0x1>
    4140:	80 93 7d 0f 	sts	0x0F7D, r24	; 0x800f7d <xTimerQueue>
    4144:	0f 90       	pop	r0
    4146:	0f be       	out	0x3f, r0	; 63
    4148:	0f 91       	pop	r16
    414a:	08 95       	ret

0000414c <xTimerCreateTimerTask>:
    414c:	cf 92       	push	r12
    414e:	df 92       	push	r13
    4150:	ef 92       	push	r14
    4152:	ff 92       	push	r15
    4154:	0f 93       	push	r16
    4156:	cf 93       	push	r28
    4158:	df 93       	push	r29
    415a:	00 d0       	rcall	.+0      	; 0x415c <xTimerCreateTimerTask+0x10>
    415c:	00 d0       	rcall	.+0      	; 0x415e <xTimerCreateTimerTask+0x12>
    415e:	cd b7       	in	r28, 0x3d	; 61
    4160:	de b7       	in	r29, 0x3e	; 62
    4162:	c6 df       	rcall	.-116    	; 0x40f0 <prvCheckForValidListAndQueue>
    4164:	80 91 7d 0f 	lds	r24, 0x0F7D	; 0x800f7d <xTimerQueue>
    4168:	90 91 7e 0f 	lds	r25, 0x0F7E	; 0x800f7e <xTimerQueue+0x1>
    416c:	89 2b       	or	r24, r25
    416e:	31 f1       	breq	.+76     	; 0x41bc <xTimerCreateTimerTask+0x70>
    4170:	1e 82       	std	Y+6, r1	; 0x06
    4172:	1d 82       	std	Y+5, r1	; 0x05
    4174:	1c 82       	std	Y+4, r1	; 0x04
    4176:	1b 82       	std	Y+3, r1	; 0x03
    4178:	ae 01       	movw	r20, r28
    417a:	4f 5f       	subi	r20, 0xFF	; 255
    417c:	5f 4f       	sbci	r21, 0xFF	; 255
    417e:	be 01       	movw	r22, r28
    4180:	6d 5f       	subi	r22, 0xFD	; 253
    4182:	7f 4f       	sbci	r23, 0xFF	; 255
    4184:	ce 01       	movw	r24, r28
    4186:	05 96       	adiw	r24, 0x05	; 5
    4188:	0e 94 b0 15 	call	0x2b60	; 0x2b60 <vApplicationGetTimerTaskMemory>
    418c:	cd 80       	ldd	r12, Y+5	; 0x05
    418e:	de 80       	ldd	r13, Y+6	; 0x06
    4190:	eb 80       	ldd	r14, Y+3	; 0x03
    4192:	fc 80       	ldd	r15, Y+4	; 0x04
    4194:	49 81       	ldd	r20, Y+1	; 0x01
    4196:	5a 81       	ldd	r21, Y+2	; 0x02
    4198:	03 e0       	ldi	r16, 0x03	; 3
    419a:	20 e0       	ldi	r18, 0x00	; 0
    419c:	30 e0       	ldi	r19, 0x00	; 0
    419e:	65 e6       	ldi	r22, 0x65	; 101
    41a0:	73 e0       	ldi	r23, 0x03	; 3
    41a2:	81 ea       	ldi	r24, 0xA1	; 161
    41a4:	91 e2       	ldi	r25, 0x21	; 33
    41a6:	96 da       	rcall	.-2772   	; 0x36d4 <xTaskCreateStatic>
    41a8:	9c 01       	movw	r18, r24
    41aa:	90 93 7c 0f 	sts	0x0F7C, r25	; 0x800f7c <xTimerTaskHandle+0x1>
    41ae:	80 93 7b 0f 	sts	0x0F7B, r24	; 0x800f7b <xTimerTaskHandle>
    41b2:	81 e0       	ldi	r24, 0x01	; 1
    41b4:	23 2b       	or	r18, r19
    41b6:	19 f4       	brne	.+6      	; 0x41be <xTimerCreateTimerTask+0x72>
    41b8:	80 e0       	ldi	r24, 0x00	; 0
    41ba:	01 c0       	rjmp	.+2      	; 0x41be <xTimerCreateTimerTask+0x72>
    41bc:	80 e0       	ldi	r24, 0x00	; 0
    41be:	26 96       	adiw	r28, 0x06	; 6
    41c0:	0f b6       	in	r0, 0x3f	; 63
    41c2:	f8 94       	cli
    41c4:	de bf       	out	0x3e, r29	; 62
    41c6:	0f be       	out	0x3f, r0	; 63
    41c8:	cd bf       	out	0x3d, r28	; 61
    41ca:	df 91       	pop	r29
    41cc:	cf 91       	pop	r28
    41ce:	0f 91       	pop	r16
    41d0:	ff 90       	pop	r15
    41d2:	ef 90       	pop	r14
    41d4:	df 90       	pop	r13
    41d6:	cf 90       	pop	r12
    41d8:	08 95       	ret

000041da <xTimerGenericCommand>:
    }
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
    41da:	0f 93       	push	r16
    41dc:	1f 93       	push	r17
    41de:	cf 93       	push	r28
    41e0:	df 93       	push	r29
    41e2:	00 d0       	rcall	.+0      	; 0x41e4 <xTimerGenericCommand+0xa>
    41e4:	1f 92       	push	r1
    41e6:	1f 92       	push	r1
    41e8:	cd b7       	in	r28, 0x3d	; 61
    41ea:	de b7       	in	r29, 0x3e	; 62

    configASSERT( xTimer );

    /* Send a message to the timer service task to perform a particular action
    on a particular timer definition. */
    if( xTimerQueue != NULL )
    41ec:	e0 91 7d 0f 	lds	r30, 0x0F7D	; 0x800f7d <xTimerQueue>
    41f0:	f0 91 7e 0f 	lds	r31, 0x0F7E	; 0x800f7e <xTimerQueue+0x1>
    41f4:	30 97       	sbiw	r30, 0x00	; 0
    41f6:	61 f1       	breq	.+88     	; 0x4250 <xTimerGenericCommand+0x76>
    41f8:	d9 01       	movw	r26, r18
    {
        /* Send a command to the timer service task to start the xTimer timer. */
        xMessage.xMessageID = xCommandID;
    41fa:	69 83       	std	Y+1, r22	; 0x01
        xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    41fc:	5b 83       	std	Y+3, r21	; 0x03
    41fe:	4a 83       	std	Y+2, r20	; 0x02
        xMessage.u.xTimerParameters.pxTimer = xTimer;
    4200:	9d 83       	std	Y+5, r25	; 0x05
    4202:	8c 83       	std	Y+4, r24	; 0x04

        if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    4204:	66 30       	cpi	r22, 0x06	; 6
    4206:	e4 f4       	brge	.+56     	; 0x4240 <xTimerGenericCommand+0x66>
        {
            if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    4208:	22 de       	rcall	.-956    	; 0x3e4e <xTaskGetSchedulerState>
    420a:	82 30       	cpi	r24, 0x02	; 2
    420c:	61 f4       	brne	.+24     	; 0x4226 <xTimerGenericCommand+0x4c>
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    420e:	20 e0       	ldi	r18, 0x00	; 0
    4210:	a8 01       	movw	r20, r16
    4212:	be 01       	movw	r22, r28
    4214:	6f 5f       	subi	r22, 0xFF	; 255
    4216:	7f 4f       	sbci	r23, 0xFF	; 255
    4218:	80 91 7d 0f 	lds	r24, 0x0F7D	; 0x800f7d <xTimerQueue>
    421c:	90 91 7e 0f 	lds	r25, 0x0F7E	; 0x800f7e <xTimerQueue+0x1>
    4220:	0e 94 e1 18 	call	0x31c2	; 0x31c2 <xQueueGenericSend>
    4224:	16 c0       	rjmp	.+44     	; 0x4252 <xTimerGenericCommand+0x78>
            }
            else
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    4226:	20 e0       	ldi	r18, 0x00	; 0
    4228:	40 e0       	ldi	r20, 0x00	; 0
    422a:	50 e0       	ldi	r21, 0x00	; 0
    422c:	be 01       	movw	r22, r28
    422e:	6f 5f       	subi	r22, 0xFF	; 255
    4230:	7f 4f       	sbci	r23, 0xFF	; 255
    4232:	80 91 7d 0f 	lds	r24, 0x0F7D	; 0x800f7d <xTimerQueue>
    4236:	90 91 7e 0f 	lds	r25, 0x0F7E	; 0x800f7e <xTimerQueue+0x1>
    423a:	0e 94 e1 18 	call	0x31c2	; 0x31c2 <xQueueGenericSend>
    423e:	09 c0       	rjmp	.+18     	; 0x4252 <xTimerGenericCommand+0x78>
            }
        }
        else
        {
            xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    4240:	20 e0       	ldi	r18, 0x00	; 0
    4242:	ad 01       	movw	r20, r26
    4244:	be 01       	movw	r22, r28
    4246:	6f 5f       	subi	r22, 0xFF	; 255
    4248:	7f 4f       	sbci	r23, 0xFF	; 255
    424a:	cf 01       	movw	r24, r30
    424c:	4c d8       	rcall	.-3944   	; 0x32e6 <xQueueGenericSendFromISR>
    424e:	01 c0       	rjmp	.+2      	; 0x4252 <xTimerGenericCommand+0x78>
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
    4250:	80 e0       	ldi	r24, 0x00	; 0
    {
        mtCOVERAGE_TEST_MARKER();
    }

    return xReturn;
}
    4252:	0f 90       	pop	r0
    4254:	0f 90       	pop	r0
    4256:	0f 90       	pop	r0
    4258:	0f 90       	pop	r0
    425a:	0f 90       	pop	r0
    425c:	df 91       	pop	r29
    425e:	cf 91       	pop	r28
    4260:	1f 91       	pop	r17
    4262:	0f 91       	pop	r16
    4264:	08 95       	ret

00004266 <prvSampleTimeNow>:
    return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
    4266:	af 92       	push	r10
    4268:	bf 92       	push	r11
    426a:	cf 92       	push	r12
    426c:	df 92       	push	r13
    426e:	ef 92       	push	r14
    4270:	ff 92       	push	r15
    4272:	0f 93       	push	r16
    4274:	1f 93       	push	r17
    4276:	cf 93       	push	r28
    4278:	df 93       	push	r29
    427a:	6c 01       	movw	r12, r24
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

    xTimeNow = xTaskGetTickCount();
    427c:	72 db       	rcall	.-2332   	; 0x3962 <xTaskGetTickCount>
    427e:	7c 01       	movw	r14, r24

    if( xTimeNow < xLastTime )
    4280:	80 91 79 0f 	lds	r24, 0x0F79	; 0x800f79 <xLastTime.2397>
    4284:	90 91 7a 0f 	lds	r25, 0x0F7A	; 0x800f7a <xLastTime.2397+0x1>
    4288:	e8 16       	cp	r14, r24
    428a:	f9 06       	cpc	r15, r25
    428c:	08 f0       	brcs	.+2      	; 0x4290 <prvSampleTimeNow+0x2a>
    428e:	47 c0       	rjmp	.+142    	; 0x431e <prvSampleTimeNow+0xb8>
    4290:	2f c0       	rjmp	.+94     	; 0x42f0 <prvSampleTimeNow+0x8a>
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    {
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    4292:	05 80       	ldd	r0, Z+5	; 0x05
    4294:	f6 81       	ldd	r31, Z+6	; 0x06
    4296:	e0 2d       	mov	r30, r0
    4298:	a0 80       	ld	r10, Z
    429a:	b1 80       	ldd	r11, Z+1	; 0x01

        /* Remove the timer from the list. */
        pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    429c:	c6 81       	ldd	r28, Z+6	; 0x06
    429e:	d7 81       	ldd	r29, Z+7	; 0x07
        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    42a0:	8e 01       	movw	r16, r28
    42a2:	0e 5f       	subi	r16, 0xFE	; 254
    42a4:	1f 4f       	sbci	r17, 0xFF	; 255
    42a6:	c8 01       	movw	r24, r16
    42a8:	0e 94 24 16 	call	0x2c48	; 0x2c48 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* Execute its callback, then send a command to restart the timer if
        it is an auto-reload timer.  It cannot be restarted here as the lists
        have not yet been switched. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    42ac:	e9 89       	ldd	r30, Y+17	; 0x11
    42ae:	fa 89       	ldd	r31, Y+18	; 0x12
    42b0:	ce 01       	movw	r24, r28
    42b2:	19 95       	eicall

        if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    42b4:	8e 85       	ldd	r24, Y+14	; 0x0e
    42b6:	81 30       	cpi	r24, 0x01	; 1
    42b8:	d9 f4       	brne	.+54     	; 0x42f0 <prvSampleTimeNow+0x8a>
            the timer going into the same timer list then it has already expired
            and the timer should be re-inserted into the current list so it is
            processed again within this loop.  Otherwise a command should be sent
            to restart the timer to ensure it is only inserted into a list after
            the lists have been swapped. */
            xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    42ba:	8c 85       	ldd	r24, Y+12	; 0x0c
    42bc:	9d 85       	ldd	r25, Y+13	; 0x0d
    42be:	8a 0d       	add	r24, r10
    42c0:	9b 1d       	adc	r25, r11
            if( xReloadTime > xNextExpireTime )
    42c2:	a8 16       	cp	r10, r24
    42c4:	b9 06       	cpc	r11, r25
    42c6:	60 f4       	brcc	.+24     	; 0x42e0 <prvSampleTimeNow+0x7a>
            {
                listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    42c8:	9b 83       	std	Y+3, r25	; 0x03
    42ca:	8a 83       	std	Y+2, r24	; 0x02
                listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    42cc:	d9 87       	std	Y+9, r29	; 0x09
    42ce:	c8 87       	std	Y+8, r28	; 0x08
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    42d0:	b8 01       	movw	r22, r16
    42d2:	80 91 81 0f 	lds	r24, 0x0F81	; 0x800f81 <pxCurrentTimerList>
    42d6:	90 91 82 0f 	lds	r25, 0x0F82	; 0x800f82 <pxCurrentTimerList+0x1>
    42da:	0e 94 f3 15 	call	0x2be6	; 0x2be6 <vListInsert>
    42de:	08 c0       	rjmp	.+16     	; 0x42f0 <prvSampleTimeNow+0x8a>
            }
            else
            {
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    42e0:	00 e0       	ldi	r16, 0x00	; 0
    42e2:	10 e0       	ldi	r17, 0x00	; 0
    42e4:	20 e0       	ldi	r18, 0x00	; 0
    42e6:	30 e0       	ldi	r19, 0x00	; 0
    42e8:	a5 01       	movw	r20, r10
    42ea:	60 e0       	ldi	r22, 0x00	; 0
    42ec:	ce 01       	movw	r24, r28
    42ee:	75 df       	rcall	.-278    	; 0x41da <xTimerGenericCommand>

    /* The tick count has overflowed.  The timer lists must be switched.
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    42f0:	e0 91 81 0f 	lds	r30, 0x0F81	; 0x800f81 <pxCurrentTimerList>
    42f4:	f0 91 82 0f 	lds	r31, 0x0F82	; 0x800f82 <pxCurrentTimerList+0x1>
    42f8:	80 81       	ld	r24, Z
    42fa:	81 11       	cpse	r24, r1
    42fc:	ca cf       	rjmp	.-108    	; 0x4292 <prvSampleTimeNow+0x2c>
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxTemp = pxCurrentTimerList;
    pxCurrentTimerList = pxOverflowTimerList;
    42fe:	80 91 7f 0f 	lds	r24, 0x0F7F	; 0x800f7f <pxOverflowTimerList>
    4302:	90 91 80 0f 	lds	r25, 0x0F80	; 0x800f80 <pxOverflowTimerList+0x1>
    4306:	90 93 82 0f 	sts	0x0F82, r25	; 0x800f82 <pxCurrentTimerList+0x1>
    430a:	80 93 81 0f 	sts	0x0F81, r24	; 0x800f81 <pxCurrentTimerList>
    pxOverflowTimerList = pxTemp;
    430e:	f0 93 80 0f 	sts	0x0F80, r31	; 0x800f80 <pxOverflowTimerList+0x1>
    4312:	e0 93 7f 0f 	sts	0x0F7F, r30	; 0x800f7f <pxOverflowTimerList>
    xTimeNow = xTaskGetTickCount();

    if( xTimeNow < xLastTime )
    {
        prvSwitchTimerLists();
        *pxTimerListsWereSwitched = pdTRUE;
    4316:	81 e0       	ldi	r24, 0x01	; 1
    4318:	f6 01       	movw	r30, r12
    431a:	80 83       	st	Z, r24
    431c:	02 c0       	rjmp	.+4      	; 0x4322 <prvSampleTimeNow+0xbc>
    }
    else
    {
        *pxTimerListsWereSwitched = pdFALSE;
    431e:	f6 01       	movw	r30, r12
    4320:	10 82       	st	Z, r1
    }

    xLastTime = xTimeNow;
    4322:	f0 92 7a 0f 	sts	0x0F7A, r15	; 0x800f7a <xLastTime.2397+0x1>
    4326:	e0 92 79 0f 	sts	0x0F79, r14	; 0x800f79 <xLastTime.2397>

    return xTimeNow;
}
    432a:	c7 01       	movw	r24, r14
    432c:	df 91       	pop	r29
    432e:	cf 91       	pop	r28
    4330:	1f 91       	pop	r17
    4332:	0f 91       	pop	r16
    4334:	ff 90       	pop	r15
    4336:	ef 90       	pop	r14
    4338:	df 90       	pop	r13
    433a:	cf 90       	pop	r12
    433c:	bf 90       	pop	r11
    433e:	af 90       	pop	r10
    4340:	08 95       	ret

00004342 <prvTimerTask>:
    pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
}
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
    4342:	cf 93       	push	r28
    4344:	df 93       	push	r29
    4346:	00 d0       	rcall	.+0      	; 0x4348 <prvTimerTask+0x6>
    4348:	00 d0       	rcall	.+0      	; 0x434a <prvTimerTask+0x8>
    434a:	cd b7       	in	r28, 0x3d	; 61
    434c:	de b7       	in	r29, 0x3e	; 62
        /* Obtain the time now to make an assessment as to whether the timer
        has expired or not.  If obtaining the time causes the lists to switch
        then don't process this timer as any timers that remained in the list
        when the lists were switched will have been processed within the
        prvSampleTimeNow() function. */
        xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    434e:	ce 01       	movw	r24, r28
    4350:	01 96       	adiw	r24, 0x01	; 1
    4352:	4c 01       	movw	r8, r24
                case when the current timer list is empty. */
                if( xListWasEmpty != pdFALSE )
                {
                    /* The current timer list is empty - is the overflow list
                    also empty? */
                    xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    4354:	44 24       	eor	r4, r4
    4356:	43 94       	inc	r4
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    }
    else
    {
        /* Ensure the task unblocks when the tick count rolls over. */
        xNextExpireTime = ( TickType_t ) 0U;
    4358:	e1 2c       	mov	r14, r1
    435a:	f1 2c       	mov	r15, r1
                case when the current timer list is empty. */
                if( xListWasEmpty != pdFALSE )
                {
                    /* The current timer list is empty - is the overflow list
                    also empty? */
                    xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    435c:	51 2c       	mov	r5, r1
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

    while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    435e:	c8 2e       	mov	r12, r24
    4360:	d9 2c       	mov	r13, r9
    the timer with the nearest expiry time will expire.  If there are no
    active timers then just set the next expire time to 0.  That will cause
    this task to unblock when the tick count overflows, at which point the
    timer lists will be switched and the next expiry time can be
    re-assessed.  */
    *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    4362:	e0 91 81 0f 	lds	r30, 0x0F81	; 0x800f81 <pxCurrentTimerList>
    4366:	f0 91 82 0f 	lds	r31, 0x0F82	; 0x800f82 <pxCurrentTimerList+0x1>
    436a:	80 81       	ld	r24, Z
    if( *pxListWasEmpty == pdFALSE )
    436c:	88 23       	and	r24, r24
    436e:	09 f4       	brne	.+2      	; 0x4372 <prvTimerTask+0x30>
    4370:	b0 c0       	rjmp	.+352    	; 0x44d2 <prvTimerTask+0x190>
    {
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    4372:	05 80       	ldd	r0, Z+5	; 0x05
    4374:	f6 81       	ldd	r31, Z+6	; 0x06
    4376:	e0 2d       	mov	r30, r0
    4378:	a0 80       	ld	r10, Z
    437a:	b1 80       	ldd	r11, Z+1	; 0x01
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

    vTaskSuspendAll();
    437c:	ec da       	rcall	.-2600   	; 0x3956 <vTaskSuspendAll>
        /* Obtain the time now to make an assessment as to whether the timer
        has expired or not.  If obtaining the time causes the lists to switch
        then don't process this timer as any timers that remained in the list
        when the lists were switched will have been processed within the
        prvSampleTimeNow() function. */
        xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    437e:	c4 01       	movw	r24, r8
    4380:	72 df       	rcall	.-284    	; 0x4266 <prvSampleTimeNow>
    4382:	8c 01       	movw	r16, r24
        if( xTimerListsWereSwitched == pdFALSE )
    4384:	89 81       	ldd	r24, Y+1	; 0x01
    4386:	81 11       	cpse	r24, r1
    4388:	42 c0       	rjmp	.+132    	; 0x440e <prvTimerTask+0xcc>
        {
            /* The tick count has not overflowed, has the timer expired? */
            if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    438a:	0a 15       	cp	r16, r10
    438c:	1b 05       	cpc	r17, r11
            {
                ( void ) xTaskResumeAll();
    438e:	80 f1       	brcs	.+96     	; 0x43f0 <prvTimerTask+0xae>
    4390:	a9 db       	rcall	.-2222   	; 0x3ae4 <xTaskResumeAll>
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    4392:	e0 91 81 0f 	lds	r30, 0x0F81	; 0x800f81 <pxCurrentTimerList>
    4396:	f0 91 82 0f 	lds	r31, 0x0F82	; 0x800f82 <pxCurrentTimerList+0x1>
    439a:	05 80       	ldd	r0, Z+5	; 0x05
    439c:	f6 81       	ldd	r31, Z+6	; 0x06
    439e:	e0 2d       	mov	r30, r0
    43a0:	66 80       	ldd	r6, Z+6	; 0x06
    43a2:	77 80       	ldd	r7, Z+7	; 0x07

    /* Remove the timer from the list of active timers.  A check has already
    been performed to ensure the list is not empty. */
    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    43a4:	c3 01       	movw	r24, r6
    43a6:	02 96       	adiw	r24, 0x02	; 2
    43a8:	0e 94 24 16 	call	0x2c48	; 0x2c48 <uxListRemove>
    traceTIMER_EXPIRED( pxTimer );

    /* If the timer is an auto reload timer then calculate the next
    expiry time and re-insert the timer in the list of active timers. */
    if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    43ac:	d3 01       	movw	r26, r6
    43ae:	1e 96       	adiw	r26, 0x0e	; 14
    43b0:	8c 91       	ld	r24, X
    43b2:	1e 97       	sbiw	r26, 0x0e	; 14
    43b4:	81 30       	cpi	r24, 0x01	; 1
    43b6:	a1 f4       	brne	.+40     	; 0x43e0 <prvTimerTask+0x9e>
    {
        /* The timer is inserted into a list using a time relative to anything
        other than the current time.  It will therefore be inserted into the
        correct list relative to the time this task thinks it is now. */
        if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    43b8:	1c 96       	adiw	r26, 0x0c	; 12
    43ba:	6d 91       	ld	r22, X+
    43bc:	7c 91       	ld	r23, X
    43be:	1d 97       	sbiw	r26, 0x0d	; 13
    43c0:	6a 0d       	add	r22, r10
    43c2:	7b 1d       	adc	r23, r11
    43c4:	95 01       	movw	r18, r10
    43c6:	a8 01       	movw	r20, r16
    43c8:	c3 01       	movw	r24, r6
    43ca:	63 de       	rcall	.-826    	; 0x4092 <prvInsertTimerInActiveList>
    43cc:	88 23       	and	r24, r24
    43ce:	41 f0       	breq	.+16     	; 0x43e0 <prvTimerTask+0x9e>
        {
            /* The timer expired before it was added to the active timer
            list.  Reload it now.  */
            xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    43d0:	0e 2d       	mov	r16, r14
    43d2:	1f 2d       	mov	r17, r15
    43d4:	2e 2d       	mov	r18, r14
    43d6:	3f 2d       	mov	r19, r15
    43d8:	a5 01       	movw	r20, r10
    43da:	65 2d       	mov	r22, r5
    43dc:	c3 01       	movw	r24, r6
    43de:	fd de       	rcall	.-518    	; 0x41da <xTimerGenericCommand>
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* Call the timer callback. */
    pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    43e0:	d3 01       	movw	r26, r6
    43e2:	51 96       	adiw	r26, 0x11	; 17
    43e4:	ed 91       	ld	r30, X+
    43e6:	fc 91       	ld	r31, X
    43e8:	52 97       	sbiw	r26, 0x12	; 18
    43ea:	c3 01       	movw	r24, r6
    43ec:	19 95       	eicall
    43ee:	64 c0       	rjmp	.+200    	; 0x44b8 <prvTimerTask+0x176>
        prvSampleTimeNow() function. */
        xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
        if( xTimerListsWereSwitched == pdFALSE )
        {
            /* The tick count has not overflowed, has the timer expired? */
            if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    43f0:	45 2d       	mov	r20, r5
                    /* The current timer list is empty - is the overflow list
                    also empty? */
                    xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
                }

                vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    43f2:	b5 01       	movw	r22, r10
    43f4:	60 1b       	sub	r22, r16
    43f6:	71 0b       	sbc	r23, r17
    43f8:	80 91 7d 0f 	lds	r24, 0x0F7D	; 0x800f7d <xTimerQueue>
    43fc:	90 91 7e 0f 	lds	r25, 0x0F7E	; 0x800f7e <xTimerQueue+0x1>

                if( xTaskResumeAll() == pdFALSE )
    4400:	ee d8       	rcall	.-3620   	; 0x35de <vQueueWaitForMessageRestricted>
    4402:	70 db       	rcall	.-2336   	; 0x3ae4 <xTaskResumeAll>
    4404:	81 11       	cpse	r24, r1
                {
                    /* Yield to wait for either a command to arrive, or the
                    block time to expire.  If a command arrived between the
                    critical section being exited and this yield then the yield
                    will not cause the task to block. */
                    portYIELD_WITHIN_API();
    4406:	58 c0       	rjmp	.+176    	; 0x44b8 <prvTimerTask+0x176>
    4408:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <vPortYield>
                }
            }
        }
        else
        {
            ( void ) xTaskResumeAll();
    440c:	55 c0       	rjmp	.+170    	; 0x44b8 <prvTimerTask+0x176>
    440e:	6a db       	rcall	.-2348   	; 0x3ae4 <xTaskResumeAll>
    4410:	53 c0       	rjmp	.+166    	; 0x44b8 <prvTimerTask+0x176>
        }
        #endif /* INCLUDE_xTimerPendFunctionCall */

        /* Commands that are positive are timer commands rather than pended
        function calls. */
        if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    4412:	89 81       	ldd	r24, Y+1	; 0x01
    4414:	88 23       	and	r24, r24
    4416:	0c f4       	brge	.+2      	; 0x441a <prvTimerTask+0xd8>
    4418:	4f c0       	rjmp	.+158    	; 0x44b8 <prvTimerTask+0x176>
        {
            /* The messages uses the xTimerParameters member to work on a
            software timer. */
            pxTimer = xMessage.u.xTimerParameters.pxTimer;
    441a:	ac 80       	ldd	r10, Y+4	; 0x04
    441c:	bd 80       	ldd	r11, Y+5	; 0x05

        if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    441e:	f5 01       	movw	r30, r10
    4420:	82 85       	ldd	r24, Z+10	; 0x0a
    4422:	93 85       	ldd	r25, Z+11	; 0x0b
    4424:	89 2b       	or	r24, r25
            {
                /* The timer is in a list, remove it. */
                ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    4426:	21 f0       	breq	.+8      	; 0x4430 <prvTimerTask+0xee>
    4428:	c5 01       	movw	r24, r10
    442a:	02 96       	adiw	r24, 0x02	; 2
    442c:	0e 94 24 16 	call	0x2c48	; 0x2c48 <uxListRemove>
            it must be present in the function call.  prvSampleTimeNow() must be
            called after the message is received from xTimerQueue so there is no
            possibility of a higher priority task adding a message to the message
            queue with a time that is ahead of the timer daemon task (because it
            pre-empted the timer daemon task after the xTimeNow value was set). */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    4430:	ce 01       	movw	r24, r28
    4432:	06 96       	adiw	r24, 0x06	; 6
    4434:	18 df       	rcall	.-464    	; 0x4266 <prvSampleTimeNow>
    4436:	ac 01       	movw	r20, r24

            switch( xMessage.xMessageID )
    4438:	99 81       	ldd	r25, Y+1	; 0x01
    443a:	94 30       	cpi	r25, 0x04	; 4
    443c:	89 f1       	breq	.+98     	; 0x44a0 <prvTimerTask+0x15e>
    443e:	1c f4       	brge	.+6      	; 0x4446 <prvTimerTask+0x104>
    4440:	93 30       	cpi	r25, 0x03	; 3
    4442:	d0 f5       	brcc	.+116    	; 0x44b8 <prvTimerTask+0x176>
    4444:	07 c0       	rjmp	.+14     	; 0x4454 <prvTimerTask+0x112>
    4446:	96 30       	cpi	r25, 0x06	; 6
    4448:	bc f1       	brlt	.+110    	; 0x44b8 <prvTimerTask+0x176>
    444a:	98 30       	cpi	r25, 0x08	; 8
    444c:	1c f0       	brlt	.+6      	; 0x4454 <prvTimerTask+0x112>
    444e:	99 30       	cpi	r25, 0x09	; 9
    4450:	39 f1       	breq	.+78     	; 0x44a0 <prvTimerTask+0x15e>
    4452:	32 c0       	rjmp	.+100    	; 0x44b8 <prvTimerTask+0x176>
                case tmrCOMMAND_START_FROM_ISR :
                case tmrCOMMAND_RESET :
                case tmrCOMMAND_RESET_FROM_ISR :
                case tmrCOMMAND_START_DONT_TRACE :
                    /* Start or restart a timer. */
                    if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    4454:	2a 81       	ldd	r18, Y+2	; 0x02
    4456:	3b 81       	ldd	r19, Y+3	; 0x03
    4458:	d5 01       	movw	r26, r10
    445a:	1c 96       	adiw	r26, 0x0c	; 12
    445c:	6d 91       	ld	r22, X+
    445e:	7c 91       	ld	r23, X
    4460:	1d 97       	sbiw	r26, 0x0d	; 13
    4462:	62 0f       	add	r22, r18
    4464:	73 1f       	adc	r23, r19
    4466:	c5 01       	movw	r24, r10
    4468:	14 de       	rcall	.-984    	; 0x4092 <prvInsertTimerInActiveList>
    446a:	88 23       	and	r24, r24
    446c:	29 f1       	breq	.+74     	; 0x44b8 <prvTimerTask+0x176>
                    {
                        /* The timer expired before it was added to the active
                        timer list.  Process it now. */
                        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    446e:	d5 01       	movw	r26, r10
    4470:	51 96       	adiw	r26, 0x11	; 17
    4472:	ed 91       	ld	r30, X+
    4474:	fc 91       	ld	r31, X
    4476:	52 97       	sbiw	r26, 0x12	; 18
    4478:	c5 01       	movw	r24, r10
    447a:	19 95       	eicall
                        traceTIMER_EXPIRED( pxTimer );

                        if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    447c:	f5 01       	movw	r30, r10
    447e:	86 85       	ldd	r24, Z+14	; 0x0e
    4480:	81 30       	cpi	r24, 0x01	; 1
    4482:	d1 f4       	brne	.+52     	; 0x44b8 <prvTimerTask+0x176>
                        {
                            xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    4484:	4a 81       	ldd	r20, Y+2	; 0x02
    4486:	5b 81       	ldd	r21, Y+3	; 0x03
    4488:	84 85       	ldd	r24, Z+12	; 0x0c
    448a:	95 85       	ldd	r25, Z+13	; 0x0d
    448c:	48 0f       	add	r20, r24
    448e:	59 1f       	adc	r21, r25
    4490:	0e 2d       	mov	r16, r14
    4492:	1f 2d       	mov	r17, r15
    4494:	2e 2d       	mov	r18, r14
    4496:	3f 2d       	mov	r19, r15
    4498:	65 2d       	mov	r22, r5
    449a:	c5 01       	movw	r24, r10
    449c:	9e de       	rcall	.-708    	; 0x41da <xTimerGenericCommand>
    449e:	0c c0       	rjmp	.+24     	; 0x44b8 <prvTimerTask+0x176>
                    There is nothing to do here. */
                    break;

                case tmrCOMMAND_CHANGE_PERIOD :
                case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
                    pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    44a0:	6a 81       	ldd	r22, Y+2	; 0x02
    44a2:	7b 81       	ldd	r23, Y+3	; 0x03
    44a4:	d5 01       	movw	r26, r10
    44a6:	1d 96       	adiw	r26, 0x0d	; 13
    44a8:	7c 93       	st	X, r23
    44aa:	6e 93       	st	-X, r22
                    be longer or shorter than the old one.  The command time is
                    therefore set to the current time, and as the period cannot
                    be zero the next expiry time can only be in the future,
                    meaning (unlike for the xTimerStart() case above) there is
                    no fail case that needs to be handled here. */
                    ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    44ac:	1c 97       	sbiw	r26, 0x0c	; 12
    44ae:	64 0f       	add	r22, r20
    44b0:	75 1f       	adc	r23, r21
    44b2:	9a 01       	movw	r18, r20
    44b4:	c5 01       	movw	r24, r10
    44b6:	ed dd       	rcall	.-1062   	; 0x4092 <prvInsertTimerInActiveList>
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

    while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    44b8:	4e 2d       	mov	r20, r14
    44ba:	5f 2d       	mov	r21, r15
    44bc:	6c 2d       	mov	r22, r12
    44be:	7d 2d       	mov	r23, r13
    44c0:	80 91 7d 0f 	lds	r24, 0x0F7D	; 0x800f7d <xTimerQueue>
    44c4:	90 91 7e 0f 	lds	r25, 0x0F7E	; 0x800f7e <xTimerQueue+0x1>
    44c8:	0e 94 ab 19 	call	0x3356	; 0x3356 <xQueueReceive>
    44cc:	81 11       	cpse	r24, r1
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

    vTaskSuspendAll();
    44ce:	a1 cf       	rjmp	.-190    	; 0x4412 <prvTimerTask+0xd0>
    44d0:	48 cf       	rjmp	.-368    	; 0x4362 <prvTimerTask+0x20>
        /* Obtain the time now to make an assessment as to whether the timer
        has expired or not.  If obtaining the time causes the lists to switch
        then don't process this timer as any timers that remained in the list
        when the lists were switched will have been processed within the
        prvSampleTimeNow() function. */
        xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    44d2:	41 da       	rcall	.-2942   	; 0x3956 <vTaskSuspendAll>
    44d4:	c4 01       	movw	r24, r8
    44d6:	c7 de       	rcall	.-626    	; 0x4266 <prvSampleTimeNow>
    44d8:	8c 01       	movw	r16, r24
        if( xTimerListsWereSwitched == pdFALSE )
    44da:	89 81       	ldd	r24, Y+1	; 0x01
    44dc:	81 11       	cpse	r24, r1
    44de:	97 cf       	rjmp	.-210    	; 0x440e <prvTimerTask+0xcc>
                case when the current timer list is empty. */
                if( xListWasEmpty != pdFALSE )
                {
                    /* The current timer list is empty - is the overflow list
                    also empty? */
                    xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    44e0:	e0 91 7f 0f 	lds	r30, 0x0F7F	; 0x800f7f <pxOverflowTimerList>
    44e4:	f0 91 80 0f 	lds	r31, 0x0F80	; 0x800f80 <pxOverflowTimerList+0x1>
    44e8:	80 81       	ld	r24, Z
    44ea:	44 2d       	mov	r20, r4
    44ec:	81 11       	cpse	r24, r1
    44ee:	45 2d       	mov	r20, r5
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    }
    else
    {
        /* Ensure the task unblocks when the tick count rolls over. */
        xNextExpireTime = ( TickType_t ) 0U;
    44f0:	ae 2c       	mov	r10, r14
    44f2:	bf 2c       	mov	r11, r15
    44f4:	7e cf       	rjmp	.-260    	; 0x43f2 <prvTimerTask+0xb0>

000044f6 <RTOS_sync_init>:
static StaticSemaphore_t LCD_mutex_Buffer;



void RTOS_sync_init(void)
{
    44f6:	0f 93       	push	r16
    LCD_mutex_handle = xSemaphoreCreateBinaryStatic( &LCD_mutex_Buffer );
    44f8:	03 e0       	ldi	r16, 0x03	; 3
    44fa:	23 e8       	ldi	r18, 0x83	; 131
    44fc:	3f e0       	ldi	r19, 0x0F	; 15
    44fe:	40 e0       	ldi	r20, 0x00	; 0
    4500:	50 e0       	ldi	r21, 0x00	; 0
    4502:	60 e0       	ldi	r22, 0x00	; 0
    4504:	81 e0       	ldi	r24, 0x01	; 1
    4506:	0e 94 cc 18 	call	0x3198	; 0x3198 <xQueueGenericCreateStatic>
    450a:	90 93 8d 1a 	sts	0x1A8D, r25	; 0x801a8d <LCD_mutex_handle+0x1>
    450e:	80 93 8c 1a 	sts	0x1A8C, r24	; 0x801a8c <LCD_mutex_handle>
	xSemaphoreGive(LCD_mutex_handle);
    4512:	20 e0       	ldi	r18, 0x00	; 0
    4514:	40 e0       	ldi	r20, 0x00	; 0
    4516:	50 e0       	ldi	r21, 0x00	; 0
    4518:	60 e0       	ldi	r22, 0x00	; 0
    451a:	70 e0       	ldi	r23, 0x00	; 0
    451c:	0e 94 e1 18 	call	0x31c2	; 0x31c2 <xQueueGenericSend>
    4520:	0f 91       	pop	r16
    4522:	08 95       	ret

00004524 <Drum_speed_Tasks_init>:
#include "../RTE/RTE_drum.h"



void Drum_speed_Tasks_init(void){
	Drum_speed_init();
    4524:	0c 94 aa 01 	jmp	0x354	; 0x354 <Drum_speed_init>
    4528:	08 95       	ret

0000452a <LCD_main_err_Init>:

void (*g_callback_read_timeout)(void) = NULL;
void (*g_callback_write_timeout)(void) = NULL;

void LCD_main_err_Init( void(*callback_read_timeout)(void) , void(*callback_write_timeout)(void)){
	g_callback_read_timeout = callback_read_timeout;
    452a:	90 93 a5 0f 	sts	0x0FA5, r25	; 0x800fa5 <g_callback_read_timeout+0x1>
    452e:	80 93 a4 0f 	sts	0x0FA4, r24	; 0x800fa4 <g_callback_read_timeout>
	g_callback_write_timeout = callback_write_timeout;
    4532:	70 93 a3 0f 	sts	0x0FA3, r23	; 0x800fa3 <g_callback_write_timeout+0x1>
    4536:	60 93 a2 0f 	sts	0x0FA2, r22	; 0x800fa2 <g_callback_write_timeout>
    453a:	08 95       	ret

0000453c <Level_main_err_init>:

#include "../MCAL/UART.h"
 
void (*g_callback_level_sensor_fail) (void) = NULL;
void Level_main_err_init( void (*callback_level_sensor_fail) (void) ){
	 g_callback_level_sensor_fail = callback_level_sensor_fail;
    453c:	90 93 a7 0f 	sts	0x0FA7, r25	; 0x800fa7 <g_callback_level_sensor_fail+0x1>
    4540:	80 93 a6 0f 	sts	0x0FA6, r24	; 0x800fa6 <g_callback_level_sensor_fail>
    4544:	08 95       	ret

00004546 <Tank_out_callback>:
}

static void Tank_out_callback(void)
{
	
	g_out_liters_counter ++ ;
    4546:	80 91 ac 0f 	lds	r24, 0x0FAC	; 0x800fac <g_out_liters_counter>
    454a:	90 91 ad 0f 	lds	r25, 0x0FAD	; 0x800fad <g_out_liters_counter+0x1>
    454e:	01 96       	adiw	r24, 0x01	; 1
    4550:	90 93 ad 0f 	sts	0x0FAD, r25	; 0x800fad <g_out_liters_counter+0x1>
    4554:	80 93 ac 0f 	sts	0x0FAC, r24	; 0x800fac <g_out_liters_counter>
	if (g_out_liters_counter >= g_out_liters )
    4558:	20 91 ac 0f 	lds	r18, 0x0FAC	; 0x800fac <g_out_liters_counter>
    455c:	30 91 ad 0f 	lds	r19, 0x0FAD	; 0x800fad <g_out_liters_counter+0x1>
    4560:	80 91 a8 0f 	lds	r24, 0x0FA8	; 0x800fa8 <g_out_liters>
    4564:	90 91 a9 0f 	lds	r25, 0x0FA9	; 0x800fa9 <g_out_liters+0x1>
    4568:	28 17       	cp	r18, r24
    456a:	39 07       	cpc	r19, r25
    456c:	f0 f0       	brcs	.+60     	; 0x45aa <Tank_out_callback+0x64>
	{
		// release the semaphore
		UART0_puts("beforrrreeeeee OWOWOWOWOOWOWOWOWOWOOWOWOWOWOOWOW");
    456e:	8d e6       	ldi	r24, 0x6D	; 109
    4570:	93 e0       	ldi	r25, 0x03	; 3
    4572:	0e 94 62 11 	call	0x22c4	; 0x22c4 <UART0_puts>
		xSemaphoreGive(outing_Semaphore );
    4576:	20 e0       	ldi	r18, 0x00	; 0
    4578:	40 e0       	ldi	r20, 0x00	; 0
    457a:	50 e0       	ldi	r21, 0x00	; 0
    457c:	60 e0       	ldi	r22, 0x00	; 0
    457e:	70 e0       	ldi	r23, 0x00	; 0
    4580:	80 91 8e 1a 	lds	r24, 0x1A8E	; 0x801a8e <outing_Semaphore>
    4584:	90 91 8f 1a 	lds	r25, 0x1A8F	; 0x801a8f <outing_Semaphore+0x1>
    4588:	0e 94 e1 18 	call	0x31c2	; 0x31c2 <xQueueGenericSend>
		UART0_puts("g_out_liters_counter OWOWOWOWOOWOWOWOWOWOOWOWOWOWOOWOW");
    458c:	8e e9       	ldi	r24, 0x9E	; 158
    458e:	93 e0       	ldi	r25, 0x03	; 3
    4590:	0e 94 62 11 	call	0x22c4	; 0x22c4 <UART0_puts>
		UART0_OutUDec(g_out_liters_counter);
    4594:	60 91 ac 0f 	lds	r22, 0x0FAC	; 0x800fac <g_out_liters_counter>
    4598:	70 91 ad 0f 	lds	r23, 0x0FAD	; 0x800fad <g_out_liters_counter+0x1>
    459c:	80 e0       	ldi	r24, 0x00	; 0
    459e:	90 e0       	ldi	r25, 0x00	; 0
    45a0:	0e 94 46 11 	call	0x228c	; 0x228c <UART0_OutUDec>
		UART0_putc('\n');
    45a4:	8a e0       	ldi	r24, 0x0A	; 10
    45a6:	0c 94 2d 11 	jmp	0x225a	; 0x225a <UART0_putc>
    45aa:	08 95       	ret

000045ac <Tank_feed_callback>:

static void Tank_feed_callback (void)
{
	//UART0_puts("")

	g_feeding_liters_counter ++ ;
    45ac:	80 91 ae 0f 	lds	r24, 0x0FAE	; 0x800fae <g_feeding_liters_counter>
    45b0:	90 91 af 0f 	lds	r25, 0x0FAF	; 0x800faf <g_feeding_liters_counter+0x1>
    45b4:	01 96       	adiw	r24, 0x01	; 1
    45b6:	90 93 af 0f 	sts	0x0FAF, r25	; 0x800faf <g_feeding_liters_counter+0x1>
    45ba:	80 93 ae 0f 	sts	0x0FAE, r24	; 0x800fae <g_feeding_liters_counter>
	// keep monitoring the amount of water .
	if (g_feeding_liters_counter >= g_feed_liters )
    45be:	20 91 ae 0f 	lds	r18, 0x0FAE	; 0x800fae <g_feeding_liters_counter>
    45c2:	30 91 af 0f 	lds	r19, 0x0FAF	; 0x800faf <g_feeding_liters_counter+0x1>
    45c6:	80 91 aa 0f 	lds	r24, 0x0FAA	; 0x800faa <g_feed_liters>
    45ca:	90 91 ab 0f 	lds	r25, 0x0FAB	; 0x800fab <g_feed_liters+0x1>
    45ce:	28 17       	cp	r18, r24
    45d0:	39 07       	cpc	r19, r25
    45d2:	f0 f0       	brcs	.+60     	; 0x4610 <Tank_feed_callback+0x64>
	{
		// release the semaphore
		UART0_puts("BEFORRRRRE FWFWFWFWFWFWFWFWFWFWFWFWFWFWF");
    45d4:	85 ed       	ldi	r24, 0xD5	; 213
    45d6:	93 e0       	ldi	r25, 0x03	; 3
    45d8:	0e 94 62 11 	call	0x22c4	; 0x22c4 <UART0_puts>
		xSemaphoreGive(Feeding_Semaphore);
    45dc:	20 e0       	ldi	r18, 0x00	; 0
    45de:	40 e0       	ldi	r20, 0x00	; 0
    45e0:	50 e0       	ldi	r21, 0x00	; 0
    45e2:	60 e0       	ldi	r22, 0x00	; 0
    45e4:	70 e0       	ldi	r23, 0x00	; 0
    45e6:	80 91 ce 1a 	lds	r24, 0x1ACE	; 0x801ace <Feeding_Semaphore>
    45ea:	90 91 cf 1a 	lds	r25, 0x1ACF	; 0x801acf <Feeding_Semaphore+0x1>
    45ee:	0e 94 e1 18 	call	0x31c2	; 0x31c2 <xQueueGenericSend>
		UART0_puts("g_feeding_liters_counter FWFWFWFWFWFWFWFWFWFWFWFWFWFWF");
    45f2:	8e ef       	ldi	r24, 0xFE	; 254
    45f4:	93 e0       	ldi	r25, 0x03	; 3
    45f6:	0e 94 62 11 	call	0x22c4	; 0x22c4 <UART0_puts>
		UART0_OutUDec(g_feeding_liters_counter);
    45fa:	60 91 ae 0f 	lds	r22, 0x0FAE	; 0x800fae <g_feeding_liters_counter>
    45fe:	70 91 af 0f 	lds	r23, 0x0FAF	; 0x800faf <g_feeding_liters_counter+0x1>
    4602:	80 e0       	ldi	r24, 0x00	; 0
    4604:	90 e0       	ldi	r25, 0x00	; 0
    4606:	0e 94 46 11 	call	0x228c	; 0x228c <UART0_OutUDec>
		UART0_putc('\n');
    460a:	8a e0       	ldi	r24, 0x0A	; 10
    460c:	0c 94 2d 11 	jmp	0x225a	; 0x225a <UART0_putc>
    4610:	08 95       	ret

00004612 <Tank_operation_init>:




void Tank_operation_init(void)
{
    4612:	0f 93       	push	r16
	Flow_rate_init(Tank_feed_callback , Tank_out_callback);	
    4614:	63 ea       	ldi	r22, 0xA3	; 163
    4616:	72 e2       	ldi	r23, 0x22	; 34
    4618:	86 ed       	ldi	r24, 0xD6	; 214
    461a:	92 e2       	ldi	r25, 0x22	; 34
    461c:	0e 94 1b 02 	call	0x436	; 0x436 <Flow_rate_init>
	Feeding_Semaphore = xSemaphoreCreateBinaryStatic( &feeding_SemaphoreBuffer );
    4620:	03 e0       	ldi	r16, 0x03	; 3
    4622:	2f ea       	ldi	r18, 0xAF	; 175
    4624:	3a e1       	ldi	r19, 0x1A	; 26
    4626:	40 e0       	ldi	r20, 0x00	; 0
    4628:	50 e0       	ldi	r21, 0x00	; 0
    462a:	60 e0       	ldi	r22, 0x00	; 0
    462c:	81 e0       	ldi	r24, 0x01	; 1
    462e:	0e 94 cc 18 	call	0x3198	; 0x3198 <xQueueGenericCreateStatic>
    4632:	90 93 cf 1a 	sts	0x1ACF, r25	; 0x801acf <Feeding_Semaphore+0x1>
    4636:	80 93 ce 1a 	sts	0x1ACE, r24	; 0x801ace <Feeding_Semaphore>
	outing_Semaphore = xSemaphoreCreateBinaryStatic( &outing_SemaphoreBuffer );
    463a:	20 e9       	ldi	r18, 0x90	; 144
    463c:	3a e1       	ldi	r19, 0x1A	; 26
    463e:	40 e0       	ldi	r20, 0x00	; 0
    4640:	50 e0       	ldi	r21, 0x00	; 0
    4642:	60 e0       	ldi	r22, 0x00	; 0
    4644:	81 e0       	ldi	r24, 0x01	; 1
    4646:	0e 94 cc 18 	call	0x3198	; 0x3198 <xQueueGenericCreateStatic>
    464a:	90 93 8f 1a 	sts	0x1A8F, r25	; 0x801a8f <outing_Semaphore+0x1>
    464e:	80 93 8e 1a 	sts	0x1A8E, r24	; 0x801a8e <outing_Semaphore>
}
    4652:	0f 91       	pop	r16
    4654:	08 95       	ret

00004656 <Tank_feed_operation>:

gSystemError Tank_feed_operation(uint16_t liters)
{   
	g_feeding_liters_counter = 0;
    4656:	10 92 af 0f 	sts	0x0FAF, r1	; 0x800faf <g_feeding_liters_counter+0x1>
    465a:	10 92 ae 0f 	sts	0x0FAE, r1	; 0x800fae <g_feeding_liters_counter>
	g_feed_liters = liters * 2 ;
    465e:	88 0f       	add	r24, r24
    4660:	99 1f       	adc	r25, r25
    4662:	90 93 ab 0f 	sts	0x0FAB, r25	; 0x800fab <g_feed_liters+0x1>
    4666:	80 93 aa 0f 	sts	0x0FAA, r24	; 0x800faa <g_feed_liters>

	// start the feeding valve to fill the tank.
	Tank_valve_1_change_state(HIGH);
    466a:	81 e0       	ldi	r24, 0x01	; 1
    466c:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <Tank_valve_1_change_state>
// 	if(xSemaphoreTake(Feeding_Semaphore , ( TickType_t ) (liters * 2000)) == pdFALSE  )
// 	{
// 		Tank_valve_1_change_state(LOW);
// 		return E_Fail ;
// 	}
	xSemaphoreTake(Feeding_Semaphore , portMAX_DELAY); //debug
    4670:	6f ef       	ldi	r22, 0xFF	; 255
    4672:	7f ef       	ldi	r23, 0xFF	; 255
    4674:	80 91 ce 1a 	lds	r24, 0x1ACE	; 0x801ace <Feeding_Semaphore>
    4678:	90 91 cf 1a 	lds	r25, 0x1ACF	; 0x801acf <Feeding_Semaphore+0x1>
    467c:	0e 94 34 1a 	call	0x3468	; 0x3468 <xQueueSemaphoreTake>
	// turn the feeding valve when the proper amount pass.
	UART0_puts("SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS");
    4680:	85 e3       	ldi	r24, 0x35	; 53
    4682:	94 e0       	ldi	r25, 0x04	; 4
    4684:	0e 94 62 11 	call	0x22c4	; 0x22c4 <UART0_puts>
	Tank_valve_1_change_state(LOW);
    4688:	80 e0       	ldi	r24, 0x00	; 0
    468a:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <Tank_valve_1_change_state>
	return E_OK ;
}
    468e:	80 e0       	ldi	r24, 0x00	; 0
    4690:	08 95       	ret

00004692 <Tank_out_operation>:


gSystemError Tank_out_operation(uint16_t liters)
{
  
	g_out_liters_counter = 0;
    4692:	10 92 ad 0f 	sts	0x0FAD, r1	; 0x800fad <g_out_liters_counter+0x1>
    4696:	10 92 ac 0f 	sts	0x0FAC, r1	; 0x800fac <g_out_liters_counter>
	g_out_liters = liters * 2 ;
    469a:	88 0f       	add	r24, r24
    469c:	99 1f       	adc	r25, r25
    469e:	90 93 a9 0f 	sts	0x0FA9, r25	; 0x800fa9 <g_out_liters+0x1>
    46a2:	80 93 a8 0f 	sts	0x0FA8, r24	; 0x800fa8 <g_out_liters>
	// opening the out valve and pump 
	Tank_valve_2_change_state(HIGH);
    46a6:	81 e0       	ldi	r24, 0x01	; 1
    46a8:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <Tank_valve_2_change_state>
	Pump_change_state(HIGH);
    46ac:	81 e0       	ldi	r24, 0x01	; 1
    46ae:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <Pump_change_state>
// 	{
// 		Pump_change_state(LOW);
// 		Tank_valve_2_change_state(LOW);
// 		return E_Fail ;
// 	}
	xSemaphoreTake(outing_Semaphore , portMAX_DELAY);
    46b2:	6f ef       	ldi	r22, 0xFF	; 255
    46b4:	7f ef       	ldi	r23, 0xFF	; 255
    46b6:	80 91 8e 1a 	lds	r24, 0x1A8E	; 0x801a8e <outing_Semaphore>
    46ba:	90 91 8f 1a 	lds	r25, 0x1A8F	; 0x801a8f <outing_Semaphore+0x1>
    46be:	0e 94 34 1a 	call	0x3468	; 0x3468 <xQueueSemaphoreTake>
	// turn the pump and valve off .
	UART0_puts("GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG");
    46c2:	8b e6       	ldi	r24, 0x6B	; 107
    46c4:	94 e0       	ldi	r25, 0x04	; 4
    46c6:	0e 94 62 11 	call	0x22c4	; 0x22c4 <UART0_puts>
	Pump_change_state(LOW);
    46ca:	80 e0       	ldi	r24, 0x00	; 0
    46cc:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <Pump_change_state>
	Tank_valve_2_change_state(LOW);
    46d0:	80 e0       	ldi	r24, 0x00	; 0
    46d2:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <Tank_valve_2_change_state>
	return E_OK ;
}
    46d6:	80 e0       	ldi	r24, 0x00	; 0
    46d8:	08 95       	ret

000046da <Temp_main_err_init>:
*Parameters @ Nothing
*return Nothing 
*/
void (*over_temp_callback)(void) = NULL;
void Temp_main_err_init( void (*callback_over_temp) (void) ){
	over_temp_callback = callback_over_temp;
    46da:	90 93 b1 0f 	sts	0x0FB1, r25	; 0x800fb1 <over_temp_callback+0x1>
    46de:	80 93 b0 0f 	sts	0x0FB0, r24	; 0x800fb0 <over_temp_callback>
    46e2:	08 95       	ret

000046e4 <Temp_main>:
}

void Temp_main(void* pvParameters){
	uint16_t current_temp=0;
	uint8_t count=0;
    46e4:	10 e0       	ldi	r17, 0x00	; 0
	//uint16_t x_time = 0;
	while (1)
	{
		UART0_puts("Temp task alive\n");
    46e6:	81 ea       	ldi	r24, 0xA1	; 161
    46e8:	94 e0       	ldi	r25, 0x04	; 4
    46ea:	0e 94 62 11 	call	0x22c4	; 0x22c4 <UART0_puts>
		//x_time = Get_millis();
		current_temp = temp_read();
    46ee:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <temp_read>
    46f2:	ec 01       	movw	r28, r24
		//UART0_puts("current temp = ");
 		//UART0_OutUDec(current_temp);
 		//UART0_putc('\n');
		if(current_temp > TEMP_OVER_TEMP){
    46f4:	cd 97       	sbiw	r24, 0x3d	; 61
    46f6:	50 f0       	brcs	.+20     	; 0x470c <Temp_main+0x28>
			count++;
    46f8:	1f 5f       	subi	r17, 0xFF	; 255
			if(count >= TEMP_OVER_TEMP_STILL_TIME){
    46fa:	16 30       	cpi	r17, 0x06	; 6
    46fc:	38 f0       	brcs	.+14     	; 0x470c <Temp_main+0x28>
				//callback
				if(over_temp_callback == NULL){
    46fe:	e0 91 b0 0f 	lds	r30, 0x0FB0	; 0x800fb0 <over_temp_callback>
    4702:	f0 91 b1 0f 	lds	r31, 0x0FB1	; 0x800fb1 <over_temp_callback+0x1>
    4706:	30 97       	sbiw	r30, 0x00	; 0
    4708:	09 f0       	breq	.+2      	; 0x470c <Temp_main+0x28>
					
				}
				else
				{
					 over_temp_callback();
    470a:	19 95       	eicall
				}
			}
		}
		// set temp for LCD 
		RTE_set_Current_temperature(current_temp);
    470c:	ce 01       	movw	r24, r28
    470e:	0e 94 7f 15 	call	0x2afe	; 0x2afe <RTE_set_Current_temperature>
		// set the temp for the application .
		RTE_set_app_Current_temperature(current_temp);
    4712:	ce 01       	movw	r24, r28
    4714:	0e 94 84 15 	call	0x2b08	; 0x2b08 <RTE_set_app_Current_temperature>
		//x_time =  Get_millis() - x_time ;
		//UART0_puts("temp ex time = ");
		//UART0_OutUDec(x_time);
		//UART0_putc('\n');
		vTaskDelay(50/portTICK_PERIOD_MS) ;
    4718:	83 e0       	ldi	r24, 0x03	; 3
    471a:	90 e0       	ldi	r25, 0x00	; 0
    471c:	5c da       	rcall	.-2888   	; 0x3bd6 <vTaskDelay>
	}
    471e:	e3 cf       	rjmp	.-58     	; 0x46e6 <Temp_main+0x2>

00004720 <System_init>:


gSystemError System_init(void){
	
	gSystemError res = E_OK;
	DIO_init();
    4720:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <DIO_init>
	millis_init();	
    4724:	2e d0       	rcall	.+92     	; 0x4782 <millis_init>
	Service_error_init();
    4726:	0e 94 5f 0c 	call	0x18be	; 0x18be <Service_error_init>
	RTE_init();
    472a:	0e 94 f8 14 	call	0x29f0	; 0x29f0 <RTE_init>
	RTOS_sync_init();
    472e:	e3 de       	rcall	.-570    	; 0x44f6 <RTOS_sync_init>
	temp_init(0);
    4730:	80 e0       	ldi	r24, 0x00	; 0
    4732:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <temp_init>
	Inverter_init(UART1,38400,3);
    4736:	23 e0       	ldi	r18, 0x03	; 3
    4738:	40 e0       	ldi	r20, 0x00	; 0
    473a:	56 e9       	ldi	r21, 0x96	; 150
    473c:	60 e0       	ldi	r22, 0x00	; 0
    473e:	70 e0       	ldi	r23, 0x00	; 0
    4740:	81 e0       	ldi	r24, 0x01	; 1
    4742:	0e 94 58 02 	call	0x4b0	; 0x4b0 <Inverter_init>
	Lcd_init(UART3,115200,1);
    4746:	21 e0       	ldi	r18, 0x01	; 1
    4748:	40 e0       	ldi	r20, 0x00	; 0
    474a:	52 ec       	ldi	r21, 0xC2	; 194
    474c:	61 e0       	ldi	r22, 0x01	; 1
    474e:	70 e0       	ldi	r23, 0x00	; 0
    4750:	83 e0       	ldi	r24, 0x03	; 3
    4752:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <Lcd_init>
	Drum_speed_Tasks_init();         //fixed here because no main task
    4756:	e6 de       	rcall	.-564    	; 0x4524 <Drum_speed_Tasks_init>
	Tank_operation_init();
    4758:	5c df       	rcall	.-328    	; 0x4612 <Tank_operation_init>
    475a:	80 e0       	ldi	r24, 0x00	; 0
	
	return res;

    475c:	08 95       	ret

0000475e <crc16_update>:

uint16_t crc16_update(uint16_t crc, uint8_t a)
{
  int i;

  crc ^= a;
    475e:	86 27       	eor	r24, r22
    4760:	28 e0       	ldi	r18, 0x08	; 8
    4762:	30 e0       	ldi	r19, 0x00	; 0
  for (i = 0; i < 8; ++i)
  {
    if (crc & 1)
    4764:	80 ff       	sbrs	r24, 0
    4766:	07 c0       	rjmp	.+14     	; 0x4776 <crc16_update+0x18>
      crc = (crc >> 1) ^ 0xA001;
    4768:	96 95       	lsr	r25
    476a:	87 95       	ror	r24
    476c:	41 e0       	ldi	r20, 0x01	; 1
    476e:	84 27       	eor	r24, r20
    4770:	40 ea       	ldi	r20, 0xA0	; 160
    4772:	94 27       	eor	r25, r20
    4774:	02 c0       	rjmp	.+4      	; 0x477a <crc16_update+0x1c>
    else
      crc = (crc >> 1);
    4776:	96 95       	lsr	r25
    4778:	87 95       	ror	r24
    477a:	21 50       	subi	r18, 0x01	; 1
    477c:	31 09       	sbc	r19, r1
uint16_t crc16_update(uint16_t crc, uint8_t a)
{
  int i;

  crc ^= a;
  for (i = 0; i < 8; ++i)
    477e:	91 f7       	brne	.-28     	; 0x4764 <crc16_update+0x6>
    else
      crc = (crc >> 1);
  }

  return crc;
}
    4780:	08 95       	ret

00004782 <millis_init>:

//init the timer on ctc mode to calvulate millis
void millis_init()
{
	//CTC mode
	TIMER2_CONGFIG_A = 0x02;
    4782:	82 e0       	ldi	r24, 0x02	; 2
    4784:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
	// Clock/64
	TIMER2_CONGFIG_B = 0x04;
    4788:	84 e0       	ldi	r24, 0x04	; 4
    478a:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7000b1>
    // Load into the output compare
    TIMER2_COMPARE = CTC_MATCH_OVERFLOW;
    478e:	8a ef       	ldi	r24, 0xFA	; 250
    4790:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7000b3>
    // Enable the compare match interrupt
    SET_BIT(TIMER2_INTERUPT, TIMER2_COMPARE_INT);
    4794:	e0 e7       	ldi	r30, 0x70	; 112
    4796:	f0 e0       	ldi	r31, 0x00	; 0
    4798:	80 81       	ld	r24, Z
    479a:	82 60       	ori	r24, 0x02	; 2
    479c:	80 83       	st	Z, r24
    479e:	08 95       	ret

000047a0 <Get_millis>:
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    47a0:	f8 94       	cli
    unsigned long millis_return;

    // Ensure this cannot be disrupted
    ATOMIC_BLOCK(ATOMIC_FORCEON) {
    	// copy the ISR counter
        millis_return = timer1_millis;
    47a2:	60 91 d0 1a 	lds	r22, 0x1AD0	; 0x801ad0 <timer1_millis>
    47a6:	70 91 d1 1a 	lds	r23, 0x1AD1	; 0x801ad1 <timer1_millis+0x1>
    47aa:	80 91 d2 1a 	lds	r24, 0x1AD2	; 0x801ad2 <timer1_millis+0x2>
    47ae:	90 91 d3 1a 	lds	r25, 0x1AD3	; 0x801ad3 <timer1_millis+0x3>
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
    47b2:	78 94       	sei
    }

    return millis_return;
}//Get_millis
    47b4:	08 95       	ret

000047b6 <__vector_13>:



ISR (TIMER2_COMPA_vect)
{
    47b6:	1f 92       	push	r1
    47b8:	0f 92       	push	r0
    47ba:	0f b6       	in	r0, 0x3f	; 63
    47bc:	0f 92       	push	r0
    47be:	11 24       	eor	r1, r1
    47c0:	8f 93       	push	r24
    47c2:	9f 93       	push	r25
    47c4:	af 93       	push	r26
    47c6:	bf 93       	push	r27
	//MILLI SEC
    timer1_millis++;
    47c8:	80 91 d0 1a 	lds	r24, 0x1AD0	; 0x801ad0 <timer1_millis>
    47cc:	90 91 d1 1a 	lds	r25, 0x1AD1	; 0x801ad1 <timer1_millis+0x1>
    47d0:	a0 91 d2 1a 	lds	r26, 0x1AD2	; 0x801ad2 <timer1_millis+0x2>
    47d4:	b0 91 d3 1a 	lds	r27, 0x1AD3	; 0x801ad3 <timer1_millis+0x3>
    47d8:	01 96       	adiw	r24, 0x01	; 1
    47da:	a1 1d       	adc	r26, r1
    47dc:	b1 1d       	adc	r27, r1
    47de:	80 93 d0 1a 	sts	0x1AD0, r24	; 0x801ad0 <timer1_millis>
    47e2:	90 93 d1 1a 	sts	0x1AD1, r25	; 0x801ad1 <timer1_millis+0x1>
    47e6:	a0 93 d2 1a 	sts	0x1AD2, r26	; 0x801ad2 <timer1_millis+0x2>
    47ea:	b0 93 d3 1a 	sts	0x1AD3, r27	; 0x801ad3 <timer1_millis+0x3>
}//ISR
    47ee:	bf 91       	pop	r27
    47f0:	af 91       	pop	r26
    47f2:	9f 91       	pop	r25
    47f4:	8f 91       	pop	r24
    47f6:	0f 90       	pop	r0
    47f8:	0f be       	out	0x3f, r0	; 63
    47fa:	0f 90       	pop	r0
    47fc:	1f 90       	pop	r1
    47fe:	18 95       	reti

00004800 <__subsf3>:
    4800:	50 58       	subi	r21, 0x80	; 128

00004802 <__addsf3>:
    4802:	bb 27       	eor	r27, r27
    4804:	aa 27       	eor	r26, r26
    4806:	0e d0       	rcall	.+28     	; 0x4824 <__addsf3x>
    4808:	70 c1       	rjmp	.+736    	; 0x4aea <__fp_round>
    480a:	61 d1       	rcall	.+706    	; 0x4ace <__fp_pscA>
    480c:	30 f0       	brcs	.+12     	; 0x481a <__addsf3+0x18>
    480e:	66 d1       	rcall	.+716    	; 0x4adc <__fp_pscB>
    4810:	20 f0       	brcs	.+8      	; 0x481a <__addsf3+0x18>
    4812:	31 f4       	brne	.+12     	; 0x4820 <__addsf3+0x1e>
    4814:	9f 3f       	cpi	r25, 0xFF	; 255
    4816:	11 f4       	brne	.+4      	; 0x481c <__addsf3+0x1a>
    4818:	1e f4       	brtc	.+6      	; 0x4820 <__addsf3+0x1e>
    481a:	56 c1       	rjmp	.+684    	; 0x4ac8 <__fp_nan>
    481c:	0e f4       	brtc	.+2      	; 0x4820 <__addsf3+0x1e>
    481e:	e0 95       	com	r30
    4820:	e7 fb       	bst	r30, 7
    4822:	4c c1       	rjmp	.+664    	; 0x4abc <__fp_inf>

00004824 <__addsf3x>:
    4824:	e9 2f       	mov	r30, r25
    4826:	72 d1       	rcall	.+740    	; 0x4b0c <__fp_split3>
    4828:	80 f3       	brcs	.-32     	; 0x480a <__addsf3+0x8>
    482a:	ba 17       	cp	r27, r26
    482c:	62 07       	cpc	r22, r18
    482e:	73 07       	cpc	r23, r19
    4830:	84 07       	cpc	r24, r20
    4832:	95 07       	cpc	r25, r21
    4834:	18 f0       	brcs	.+6      	; 0x483c <__addsf3x+0x18>
    4836:	71 f4       	brne	.+28     	; 0x4854 <__addsf3x+0x30>
    4838:	9e f5       	brtc	.+102    	; 0x48a0 <__addsf3x+0x7c>
    483a:	8a c1       	rjmp	.+788    	; 0x4b50 <__fp_zero>
    483c:	0e f4       	brtc	.+2      	; 0x4840 <__addsf3x+0x1c>
    483e:	e0 95       	com	r30
    4840:	0b 2e       	mov	r0, r27
    4842:	ba 2f       	mov	r27, r26
    4844:	a0 2d       	mov	r26, r0
    4846:	0b 01       	movw	r0, r22
    4848:	b9 01       	movw	r22, r18
    484a:	90 01       	movw	r18, r0
    484c:	0c 01       	movw	r0, r24
    484e:	ca 01       	movw	r24, r20
    4850:	a0 01       	movw	r20, r0
    4852:	11 24       	eor	r1, r1
    4854:	ff 27       	eor	r31, r31
    4856:	59 1b       	sub	r21, r25
    4858:	99 f0       	breq	.+38     	; 0x4880 <__addsf3x+0x5c>
    485a:	59 3f       	cpi	r21, 0xF9	; 249
    485c:	50 f4       	brcc	.+20     	; 0x4872 <__addsf3x+0x4e>
    485e:	50 3e       	cpi	r21, 0xE0	; 224
    4860:	68 f1       	brcs	.+90     	; 0x48bc <__addsf3x+0x98>
    4862:	1a 16       	cp	r1, r26
    4864:	f0 40       	sbci	r31, 0x00	; 0
    4866:	a2 2f       	mov	r26, r18
    4868:	23 2f       	mov	r18, r19
    486a:	34 2f       	mov	r19, r20
    486c:	44 27       	eor	r20, r20
    486e:	58 5f       	subi	r21, 0xF8	; 248
    4870:	f3 cf       	rjmp	.-26     	; 0x4858 <__addsf3x+0x34>
    4872:	46 95       	lsr	r20
    4874:	37 95       	ror	r19
    4876:	27 95       	ror	r18
    4878:	a7 95       	ror	r26
    487a:	f0 40       	sbci	r31, 0x00	; 0
    487c:	53 95       	inc	r21
    487e:	c9 f7       	brne	.-14     	; 0x4872 <__addsf3x+0x4e>
    4880:	7e f4       	brtc	.+30     	; 0x48a0 <__addsf3x+0x7c>
    4882:	1f 16       	cp	r1, r31
    4884:	ba 0b       	sbc	r27, r26
    4886:	62 0b       	sbc	r22, r18
    4888:	73 0b       	sbc	r23, r19
    488a:	84 0b       	sbc	r24, r20
    488c:	ba f0       	brmi	.+46     	; 0x48bc <__addsf3x+0x98>
    488e:	91 50       	subi	r25, 0x01	; 1
    4890:	a1 f0       	breq	.+40     	; 0x48ba <__addsf3x+0x96>
    4892:	ff 0f       	add	r31, r31
    4894:	bb 1f       	adc	r27, r27
    4896:	66 1f       	adc	r22, r22
    4898:	77 1f       	adc	r23, r23
    489a:	88 1f       	adc	r24, r24
    489c:	c2 f7       	brpl	.-16     	; 0x488e <__addsf3x+0x6a>
    489e:	0e c0       	rjmp	.+28     	; 0x48bc <__addsf3x+0x98>
    48a0:	ba 0f       	add	r27, r26
    48a2:	62 1f       	adc	r22, r18
    48a4:	73 1f       	adc	r23, r19
    48a6:	84 1f       	adc	r24, r20
    48a8:	48 f4       	brcc	.+18     	; 0x48bc <__addsf3x+0x98>
    48aa:	87 95       	ror	r24
    48ac:	77 95       	ror	r23
    48ae:	67 95       	ror	r22
    48b0:	b7 95       	ror	r27
    48b2:	f7 95       	ror	r31
    48b4:	9e 3f       	cpi	r25, 0xFE	; 254
    48b6:	08 f0       	brcs	.+2      	; 0x48ba <__addsf3x+0x96>
    48b8:	b3 cf       	rjmp	.-154    	; 0x4820 <__addsf3+0x1e>
    48ba:	93 95       	inc	r25
    48bc:	88 0f       	add	r24, r24
    48be:	08 f0       	brcs	.+2      	; 0x48c2 <__addsf3x+0x9e>
    48c0:	99 27       	eor	r25, r25
    48c2:	ee 0f       	add	r30, r30
    48c4:	97 95       	ror	r25
    48c6:	87 95       	ror	r24
    48c8:	08 95       	ret

000048ca <__cmpsf2>:
    48ca:	d4 d0       	rcall	.+424    	; 0x4a74 <__fp_cmp>
    48cc:	08 f4       	brcc	.+2      	; 0x48d0 <__cmpsf2+0x6>
    48ce:	81 e0       	ldi	r24, 0x01	; 1
    48d0:	08 95       	ret

000048d2 <__divsf3>:
    48d2:	0c d0       	rcall	.+24     	; 0x48ec <__divsf3x>
    48d4:	0a c1       	rjmp	.+532    	; 0x4aea <__fp_round>
    48d6:	02 d1       	rcall	.+516    	; 0x4adc <__fp_pscB>
    48d8:	40 f0       	brcs	.+16     	; 0x48ea <__divsf3+0x18>
    48da:	f9 d0       	rcall	.+498    	; 0x4ace <__fp_pscA>
    48dc:	30 f0       	brcs	.+12     	; 0x48ea <__divsf3+0x18>
    48de:	21 f4       	brne	.+8      	; 0x48e8 <__divsf3+0x16>
    48e0:	5f 3f       	cpi	r21, 0xFF	; 255
    48e2:	19 f0       	breq	.+6      	; 0x48ea <__divsf3+0x18>
    48e4:	eb c0       	rjmp	.+470    	; 0x4abc <__fp_inf>
    48e6:	51 11       	cpse	r21, r1
    48e8:	34 c1       	rjmp	.+616    	; 0x4b52 <__fp_szero>
    48ea:	ee c0       	rjmp	.+476    	; 0x4ac8 <__fp_nan>

000048ec <__divsf3x>:
    48ec:	0f d1       	rcall	.+542    	; 0x4b0c <__fp_split3>
    48ee:	98 f3       	brcs	.-26     	; 0x48d6 <__divsf3+0x4>

000048f0 <__divsf3_pse>:
    48f0:	99 23       	and	r25, r25
    48f2:	c9 f3       	breq	.-14     	; 0x48e6 <__divsf3+0x14>
    48f4:	55 23       	and	r21, r21
    48f6:	b1 f3       	breq	.-20     	; 0x48e4 <__divsf3+0x12>
    48f8:	95 1b       	sub	r25, r21
    48fa:	55 0b       	sbc	r21, r21
    48fc:	bb 27       	eor	r27, r27
    48fe:	aa 27       	eor	r26, r26
    4900:	62 17       	cp	r22, r18
    4902:	73 07       	cpc	r23, r19
    4904:	84 07       	cpc	r24, r20
    4906:	38 f0       	brcs	.+14     	; 0x4916 <__divsf3_pse+0x26>
    4908:	9f 5f       	subi	r25, 0xFF	; 255
    490a:	5f 4f       	sbci	r21, 0xFF	; 255
    490c:	22 0f       	add	r18, r18
    490e:	33 1f       	adc	r19, r19
    4910:	44 1f       	adc	r20, r20
    4912:	aa 1f       	adc	r26, r26
    4914:	a9 f3       	breq	.-22     	; 0x4900 <__divsf3_pse+0x10>
    4916:	33 d0       	rcall	.+102    	; 0x497e <__divsf3_pse+0x8e>
    4918:	0e 2e       	mov	r0, r30
    491a:	3a f0       	brmi	.+14     	; 0x492a <__divsf3_pse+0x3a>
    491c:	e0 e8       	ldi	r30, 0x80	; 128
    491e:	30 d0       	rcall	.+96     	; 0x4980 <__divsf3_pse+0x90>
    4920:	91 50       	subi	r25, 0x01	; 1
    4922:	50 40       	sbci	r21, 0x00	; 0
    4924:	e6 95       	lsr	r30
    4926:	00 1c       	adc	r0, r0
    4928:	ca f7       	brpl	.-14     	; 0x491c <__divsf3_pse+0x2c>
    492a:	29 d0       	rcall	.+82     	; 0x497e <__divsf3_pse+0x8e>
    492c:	fe 2f       	mov	r31, r30
    492e:	27 d0       	rcall	.+78     	; 0x497e <__divsf3_pse+0x8e>
    4930:	66 0f       	add	r22, r22
    4932:	77 1f       	adc	r23, r23
    4934:	88 1f       	adc	r24, r24
    4936:	bb 1f       	adc	r27, r27
    4938:	26 17       	cp	r18, r22
    493a:	37 07       	cpc	r19, r23
    493c:	48 07       	cpc	r20, r24
    493e:	ab 07       	cpc	r26, r27
    4940:	b0 e8       	ldi	r27, 0x80	; 128
    4942:	09 f0       	breq	.+2      	; 0x4946 <__divsf3_pse+0x56>
    4944:	bb 0b       	sbc	r27, r27
    4946:	80 2d       	mov	r24, r0
    4948:	bf 01       	movw	r22, r30
    494a:	ff 27       	eor	r31, r31
    494c:	93 58       	subi	r25, 0x83	; 131
    494e:	5f 4f       	sbci	r21, 0xFF	; 255
    4950:	2a f0       	brmi	.+10     	; 0x495c <__divsf3_pse+0x6c>
    4952:	9e 3f       	cpi	r25, 0xFE	; 254
    4954:	51 05       	cpc	r21, r1
    4956:	68 f0       	brcs	.+26     	; 0x4972 <__divsf3_pse+0x82>
    4958:	b1 c0       	rjmp	.+354    	; 0x4abc <__fp_inf>
    495a:	fb c0       	rjmp	.+502    	; 0x4b52 <__fp_szero>
    495c:	5f 3f       	cpi	r21, 0xFF	; 255
    495e:	ec f3       	brlt	.-6      	; 0x495a <__divsf3_pse+0x6a>
    4960:	98 3e       	cpi	r25, 0xE8	; 232
    4962:	dc f3       	brlt	.-10     	; 0x495a <__divsf3_pse+0x6a>
    4964:	86 95       	lsr	r24
    4966:	77 95       	ror	r23
    4968:	67 95       	ror	r22
    496a:	b7 95       	ror	r27
    496c:	f7 95       	ror	r31
    496e:	9f 5f       	subi	r25, 0xFF	; 255
    4970:	c9 f7       	brne	.-14     	; 0x4964 <__divsf3_pse+0x74>
    4972:	88 0f       	add	r24, r24
    4974:	91 1d       	adc	r25, r1
    4976:	96 95       	lsr	r25
    4978:	87 95       	ror	r24
    497a:	97 f9       	bld	r25, 7
    497c:	08 95       	ret
    497e:	e1 e0       	ldi	r30, 0x01	; 1
    4980:	66 0f       	add	r22, r22
    4982:	77 1f       	adc	r23, r23
    4984:	88 1f       	adc	r24, r24
    4986:	bb 1f       	adc	r27, r27
    4988:	62 17       	cp	r22, r18
    498a:	73 07       	cpc	r23, r19
    498c:	84 07       	cpc	r24, r20
    498e:	ba 07       	cpc	r27, r26
    4990:	20 f0       	brcs	.+8      	; 0x499a <__divsf3_pse+0xaa>
    4992:	62 1b       	sub	r22, r18
    4994:	73 0b       	sbc	r23, r19
    4996:	84 0b       	sbc	r24, r20
    4998:	ba 0b       	sbc	r27, r26
    499a:	ee 1f       	adc	r30, r30
    499c:	88 f7       	brcc	.-30     	; 0x4980 <__divsf3_pse+0x90>
    499e:	e0 95       	com	r30
    49a0:	08 95       	ret

000049a2 <__fixunssfsi>:
    49a2:	bc d0       	rcall	.+376    	; 0x4b1c <__fp_splitA>
    49a4:	88 f0       	brcs	.+34     	; 0x49c8 <__fixunssfsi+0x26>
    49a6:	9f 57       	subi	r25, 0x7F	; 127
    49a8:	90 f0       	brcs	.+36     	; 0x49ce <__fixunssfsi+0x2c>
    49aa:	b9 2f       	mov	r27, r25
    49ac:	99 27       	eor	r25, r25
    49ae:	b7 51       	subi	r27, 0x17	; 23
    49b0:	a0 f0       	brcs	.+40     	; 0x49da <__fixunssfsi+0x38>
    49b2:	d1 f0       	breq	.+52     	; 0x49e8 <__fixunssfsi+0x46>
    49b4:	66 0f       	add	r22, r22
    49b6:	77 1f       	adc	r23, r23
    49b8:	88 1f       	adc	r24, r24
    49ba:	99 1f       	adc	r25, r25
    49bc:	1a f0       	brmi	.+6      	; 0x49c4 <__fixunssfsi+0x22>
    49be:	ba 95       	dec	r27
    49c0:	c9 f7       	brne	.-14     	; 0x49b4 <__fixunssfsi+0x12>
    49c2:	12 c0       	rjmp	.+36     	; 0x49e8 <__fixunssfsi+0x46>
    49c4:	b1 30       	cpi	r27, 0x01	; 1
    49c6:	81 f0       	breq	.+32     	; 0x49e8 <__fixunssfsi+0x46>
    49c8:	c3 d0       	rcall	.+390    	; 0x4b50 <__fp_zero>
    49ca:	b1 e0       	ldi	r27, 0x01	; 1
    49cc:	08 95       	ret
    49ce:	c0 c0       	rjmp	.+384    	; 0x4b50 <__fp_zero>
    49d0:	67 2f       	mov	r22, r23
    49d2:	78 2f       	mov	r23, r24
    49d4:	88 27       	eor	r24, r24
    49d6:	b8 5f       	subi	r27, 0xF8	; 248
    49d8:	39 f0       	breq	.+14     	; 0x49e8 <__fixunssfsi+0x46>
    49da:	b9 3f       	cpi	r27, 0xF9	; 249
    49dc:	cc f3       	brlt	.-14     	; 0x49d0 <__fixunssfsi+0x2e>
    49de:	86 95       	lsr	r24
    49e0:	77 95       	ror	r23
    49e2:	67 95       	ror	r22
    49e4:	b3 95       	inc	r27
    49e6:	d9 f7       	brne	.-10     	; 0x49de <__fixunssfsi+0x3c>
    49e8:	3e f4       	brtc	.+14     	; 0x49f8 <__fixunssfsi+0x56>
    49ea:	90 95       	com	r25
    49ec:	80 95       	com	r24
    49ee:	70 95       	com	r23
    49f0:	61 95       	neg	r22
    49f2:	7f 4f       	sbci	r23, 0xFF	; 255
    49f4:	8f 4f       	sbci	r24, 0xFF	; 255
    49f6:	9f 4f       	sbci	r25, 0xFF	; 255
    49f8:	08 95       	ret

000049fa <__floatunsisf>:
    49fa:	e8 94       	clt
    49fc:	09 c0       	rjmp	.+18     	; 0x4a10 <__floatsisf+0x12>

000049fe <__floatsisf>:
    49fe:	97 fb       	bst	r25, 7
    4a00:	3e f4       	brtc	.+14     	; 0x4a10 <__floatsisf+0x12>
    4a02:	90 95       	com	r25
    4a04:	80 95       	com	r24
    4a06:	70 95       	com	r23
    4a08:	61 95       	neg	r22
    4a0a:	7f 4f       	sbci	r23, 0xFF	; 255
    4a0c:	8f 4f       	sbci	r24, 0xFF	; 255
    4a0e:	9f 4f       	sbci	r25, 0xFF	; 255
    4a10:	99 23       	and	r25, r25
    4a12:	a9 f0       	breq	.+42     	; 0x4a3e <__floatsisf+0x40>
    4a14:	f9 2f       	mov	r31, r25
    4a16:	96 e9       	ldi	r25, 0x96	; 150
    4a18:	bb 27       	eor	r27, r27
    4a1a:	93 95       	inc	r25
    4a1c:	f6 95       	lsr	r31
    4a1e:	87 95       	ror	r24
    4a20:	77 95       	ror	r23
    4a22:	67 95       	ror	r22
    4a24:	b7 95       	ror	r27
    4a26:	f1 11       	cpse	r31, r1
    4a28:	f8 cf       	rjmp	.-16     	; 0x4a1a <__floatsisf+0x1c>
    4a2a:	fa f4       	brpl	.+62     	; 0x4a6a <__floatsisf+0x6c>
    4a2c:	bb 0f       	add	r27, r27
    4a2e:	11 f4       	brne	.+4      	; 0x4a34 <__floatsisf+0x36>
    4a30:	60 ff       	sbrs	r22, 0
    4a32:	1b c0       	rjmp	.+54     	; 0x4a6a <__floatsisf+0x6c>
    4a34:	6f 5f       	subi	r22, 0xFF	; 255
    4a36:	7f 4f       	sbci	r23, 0xFF	; 255
    4a38:	8f 4f       	sbci	r24, 0xFF	; 255
    4a3a:	9f 4f       	sbci	r25, 0xFF	; 255
    4a3c:	16 c0       	rjmp	.+44     	; 0x4a6a <__floatsisf+0x6c>
    4a3e:	88 23       	and	r24, r24
    4a40:	11 f0       	breq	.+4      	; 0x4a46 <__floatsisf+0x48>
    4a42:	96 e9       	ldi	r25, 0x96	; 150
    4a44:	11 c0       	rjmp	.+34     	; 0x4a68 <__floatsisf+0x6a>
    4a46:	77 23       	and	r23, r23
    4a48:	21 f0       	breq	.+8      	; 0x4a52 <__floatsisf+0x54>
    4a4a:	9e e8       	ldi	r25, 0x8E	; 142
    4a4c:	87 2f       	mov	r24, r23
    4a4e:	76 2f       	mov	r23, r22
    4a50:	05 c0       	rjmp	.+10     	; 0x4a5c <__floatsisf+0x5e>
    4a52:	66 23       	and	r22, r22
    4a54:	71 f0       	breq	.+28     	; 0x4a72 <__floatsisf+0x74>
    4a56:	96 e8       	ldi	r25, 0x86	; 134
    4a58:	86 2f       	mov	r24, r22
    4a5a:	70 e0       	ldi	r23, 0x00	; 0
    4a5c:	60 e0       	ldi	r22, 0x00	; 0
    4a5e:	2a f0       	brmi	.+10     	; 0x4a6a <__floatsisf+0x6c>
    4a60:	9a 95       	dec	r25
    4a62:	66 0f       	add	r22, r22
    4a64:	77 1f       	adc	r23, r23
    4a66:	88 1f       	adc	r24, r24
    4a68:	da f7       	brpl	.-10     	; 0x4a60 <__floatsisf+0x62>
    4a6a:	88 0f       	add	r24, r24
    4a6c:	96 95       	lsr	r25
    4a6e:	87 95       	ror	r24
    4a70:	97 f9       	bld	r25, 7
    4a72:	08 95       	ret

00004a74 <__fp_cmp>:
    4a74:	99 0f       	add	r25, r25
    4a76:	00 08       	sbc	r0, r0
    4a78:	55 0f       	add	r21, r21
    4a7a:	aa 0b       	sbc	r26, r26
    4a7c:	e0 e8       	ldi	r30, 0x80	; 128
    4a7e:	fe ef       	ldi	r31, 0xFE	; 254
    4a80:	16 16       	cp	r1, r22
    4a82:	17 06       	cpc	r1, r23
    4a84:	e8 07       	cpc	r30, r24
    4a86:	f9 07       	cpc	r31, r25
    4a88:	c0 f0       	brcs	.+48     	; 0x4aba <__fp_cmp+0x46>
    4a8a:	12 16       	cp	r1, r18
    4a8c:	13 06       	cpc	r1, r19
    4a8e:	e4 07       	cpc	r30, r20
    4a90:	f5 07       	cpc	r31, r21
    4a92:	98 f0       	brcs	.+38     	; 0x4aba <__fp_cmp+0x46>
    4a94:	62 1b       	sub	r22, r18
    4a96:	73 0b       	sbc	r23, r19
    4a98:	84 0b       	sbc	r24, r20
    4a9a:	95 0b       	sbc	r25, r21
    4a9c:	39 f4       	brne	.+14     	; 0x4aac <__fp_cmp+0x38>
    4a9e:	0a 26       	eor	r0, r26
    4aa0:	61 f0       	breq	.+24     	; 0x4aba <__fp_cmp+0x46>
    4aa2:	23 2b       	or	r18, r19
    4aa4:	24 2b       	or	r18, r20
    4aa6:	25 2b       	or	r18, r21
    4aa8:	21 f4       	brne	.+8      	; 0x4ab2 <__fp_cmp+0x3e>
    4aaa:	08 95       	ret
    4aac:	0a 26       	eor	r0, r26
    4aae:	09 f4       	brne	.+2      	; 0x4ab2 <__fp_cmp+0x3e>
    4ab0:	a1 40       	sbci	r26, 0x01	; 1
    4ab2:	a6 95       	lsr	r26
    4ab4:	8f ef       	ldi	r24, 0xFF	; 255
    4ab6:	81 1d       	adc	r24, r1
    4ab8:	81 1d       	adc	r24, r1
    4aba:	08 95       	ret

00004abc <__fp_inf>:
    4abc:	97 f9       	bld	r25, 7
    4abe:	9f 67       	ori	r25, 0x7F	; 127
    4ac0:	80 e8       	ldi	r24, 0x80	; 128
    4ac2:	70 e0       	ldi	r23, 0x00	; 0
    4ac4:	60 e0       	ldi	r22, 0x00	; 0
    4ac6:	08 95       	ret

00004ac8 <__fp_nan>:
    4ac8:	9f ef       	ldi	r25, 0xFF	; 255
    4aca:	80 ec       	ldi	r24, 0xC0	; 192
    4acc:	08 95       	ret

00004ace <__fp_pscA>:
    4ace:	00 24       	eor	r0, r0
    4ad0:	0a 94       	dec	r0
    4ad2:	16 16       	cp	r1, r22
    4ad4:	17 06       	cpc	r1, r23
    4ad6:	18 06       	cpc	r1, r24
    4ad8:	09 06       	cpc	r0, r25
    4ada:	08 95       	ret

00004adc <__fp_pscB>:
    4adc:	00 24       	eor	r0, r0
    4ade:	0a 94       	dec	r0
    4ae0:	12 16       	cp	r1, r18
    4ae2:	13 06       	cpc	r1, r19
    4ae4:	14 06       	cpc	r1, r20
    4ae6:	05 06       	cpc	r0, r21
    4ae8:	08 95       	ret

00004aea <__fp_round>:
    4aea:	09 2e       	mov	r0, r25
    4aec:	03 94       	inc	r0
    4aee:	00 0c       	add	r0, r0
    4af0:	11 f4       	brne	.+4      	; 0x4af6 <__fp_round+0xc>
    4af2:	88 23       	and	r24, r24
    4af4:	52 f0       	brmi	.+20     	; 0x4b0a <__fp_round+0x20>
    4af6:	bb 0f       	add	r27, r27
    4af8:	40 f4       	brcc	.+16     	; 0x4b0a <__fp_round+0x20>
    4afa:	bf 2b       	or	r27, r31
    4afc:	11 f4       	brne	.+4      	; 0x4b02 <__fp_round+0x18>
    4afe:	60 ff       	sbrs	r22, 0
    4b00:	04 c0       	rjmp	.+8      	; 0x4b0a <__fp_round+0x20>
    4b02:	6f 5f       	subi	r22, 0xFF	; 255
    4b04:	7f 4f       	sbci	r23, 0xFF	; 255
    4b06:	8f 4f       	sbci	r24, 0xFF	; 255
    4b08:	9f 4f       	sbci	r25, 0xFF	; 255
    4b0a:	08 95       	ret

00004b0c <__fp_split3>:
    4b0c:	57 fd       	sbrc	r21, 7
    4b0e:	90 58       	subi	r25, 0x80	; 128
    4b10:	44 0f       	add	r20, r20
    4b12:	55 1f       	adc	r21, r21
    4b14:	59 f0       	breq	.+22     	; 0x4b2c <__fp_splitA+0x10>
    4b16:	5f 3f       	cpi	r21, 0xFF	; 255
    4b18:	71 f0       	breq	.+28     	; 0x4b36 <__fp_splitA+0x1a>
    4b1a:	47 95       	ror	r20

00004b1c <__fp_splitA>:
    4b1c:	88 0f       	add	r24, r24
    4b1e:	97 fb       	bst	r25, 7
    4b20:	99 1f       	adc	r25, r25
    4b22:	61 f0       	breq	.+24     	; 0x4b3c <__fp_splitA+0x20>
    4b24:	9f 3f       	cpi	r25, 0xFF	; 255
    4b26:	79 f0       	breq	.+30     	; 0x4b46 <__fp_splitA+0x2a>
    4b28:	87 95       	ror	r24
    4b2a:	08 95       	ret
    4b2c:	12 16       	cp	r1, r18
    4b2e:	13 06       	cpc	r1, r19
    4b30:	14 06       	cpc	r1, r20
    4b32:	55 1f       	adc	r21, r21
    4b34:	f2 cf       	rjmp	.-28     	; 0x4b1a <__fp_split3+0xe>
    4b36:	46 95       	lsr	r20
    4b38:	f1 df       	rcall	.-30     	; 0x4b1c <__fp_splitA>
    4b3a:	08 c0       	rjmp	.+16     	; 0x4b4c <__fp_splitA+0x30>
    4b3c:	16 16       	cp	r1, r22
    4b3e:	17 06       	cpc	r1, r23
    4b40:	18 06       	cpc	r1, r24
    4b42:	99 1f       	adc	r25, r25
    4b44:	f1 cf       	rjmp	.-30     	; 0x4b28 <__fp_splitA+0xc>
    4b46:	86 95       	lsr	r24
    4b48:	71 05       	cpc	r23, r1
    4b4a:	61 05       	cpc	r22, r1
    4b4c:	08 94       	sec
    4b4e:	08 95       	ret

00004b50 <__fp_zero>:
    4b50:	e8 94       	clt

00004b52 <__fp_szero>:
    4b52:	bb 27       	eor	r27, r27
    4b54:	66 27       	eor	r22, r22
    4b56:	77 27       	eor	r23, r23
    4b58:	cb 01       	movw	r24, r22
    4b5a:	97 f9       	bld	r25, 7
    4b5c:	08 95       	ret

00004b5e <__gesf2>:
    4b5e:	8a df       	rcall	.-236    	; 0x4a74 <__fp_cmp>
    4b60:	08 f4       	brcc	.+2      	; 0x4b64 <__gesf2+0x6>
    4b62:	8f ef       	ldi	r24, 0xFF	; 255
    4b64:	08 95       	ret

00004b66 <__mulsf3>:
    4b66:	0b d0       	rcall	.+22     	; 0x4b7e <__mulsf3x>
    4b68:	c0 cf       	rjmp	.-128    	; 0x4aea <__fp_round>
    4b6a:	b1 df       	rcall	.-158    	; 0x4ace <__fp_pscA>
    4b6c:	28 f0       	brcs	.+10     	; 0x4b78 <__mulsf3+0x12>
    4b6e:	b6 df       	rcall	.-148    	; 0x4adc <__fp_pscB>
    4b70:	18 f0       	brcs	.+6      	; 0x4b78 <__mulsf3+0x12>
    4b72:	95 23       	and	r25, r21
    4b74:	09 f0       	breq	.+2      	; 0x4b78 <__mulsf3+0x12>
    4b76:	a2 cf       	rjmp	.-188    	; 0x4abc <__fp_inf>
    4b78:	a7 cf       	rjmp	.-178    	; 0x4ac8 <__fp_nan>
    4b7a:	11 24       	eor	r1, r1
    4b7c:	ea cf       	rjmp	.-44     	; 0x4b52 <__fp_szero>

00004b7e <__mulsf3x>:
    4b7e:	c6 df       	rcall	.-116    	; 0x4b0c <__fp_split3>
    4b80:	a0 f3       	brcs	.-24     	; 0x4b6a <__mulsf3+0x4>

00004b82 <__mulsf3_pse>:
    4b82:	95 9f       	mul	r25, r21
    4b84:	d1 f3       	breq	.-12     	; 0x4b7a <__mulsf3+0x14>
    4b86:	95 0f       	add	r25, r21
    4b88:	50 e0       	ldi	r21, 0x00	; 0
    4b8a:	55 1f       	adc	r21, r21
    4b8c:	62 9f       	mul	r22, r18
    4b8e:	f0 01       	movw	r30, r0
    4b90:	72 9f       	mul	r23, r18
    4b92:	bb 27       	eor	r27, r27
    4b94:	f0 0d       	add	r31, r0
    4b96:	b1 1d       	adc	r27, r1
    4b98:	63 9f       	mul	r22, r19
    4b9a:	aa 27       	eor	r26, r26
    4b9c:	f0 0d       	add	r31, r0
    4b9e:	b1 1d       	adc	r27, r1
    4ba0:	aa 1f       	adc	r26, r26
    4ba2:	64 9f       	mul	r22, r20
    4ba4:	66 27       	eor	r22, r22
    4ba6:	b0 0d       	add	r27, r0
    4ba8:	a1 1d       	adc	r26, r1
    4baa:	66 1f       	adc	r22, r22
    4bac:	82 9f       	mul	r24, r18
    4bae:	22 27       	eor	r18, r18
    4bb0:	b0 0d       	add	r27, r0
    4bb2:	a1 1d       	adc	r26, r1
    4bb4:	62 1f       	adc	r22, r18
    4bb6:	73 9f       	mul	r23, r19
    4bb8:	b0 0d       	add	r27, r0
    4bba:	a1 1d       	adc	r26, r1
    4bbc:	62 1f       	adc	r22, r18
    4bbe:	83 9f       	mul	r24, r19
    4bc0:	a0 0d       	add	r26, r0
    4bc2:	61 1d       	adc	r22, r1
    4bc4:	22 1f       	adc	r18, r18
    4bc6:	74 9f       	mul	r23, r20
    4bc8:	33 27       	eor	r19, r19
    4bca:	a0 0d       	add	r26, r0
    4bcc:	61 1d       	adc	r22, r1
    4bce:	23 1f       	adc	r18, r19
    4bd0:	84 9f       	mul	r24, r20
    4bd2:	60 0d       	add	r22, r0
    4bd4:	21 1d       	adc	r18, r1
    4bd6:	82 2f       	mov	r24, r18
    4bd8:	76 2f       	mov	r23, r22
    4bda:	6a 2f       	mov	r22, r26
    4bdc:	11 24       	eor	r1, r1
    4bde:	9f 57       	subi	r25, 0x7F	; 127
    4be0:	50 40       	sbci	r21, 0x00	; 0
    4be2:	8a f0       	brmi	.+34     	; 0x4c06 <__mulsf3_pse+0x84>
    4be4:	e1 f0       	breq	.+56     	; 0x4c1e <__mulsf3_pse+0x9c>
    4be6:	88 23       	and	r24, r24
    4be8:	4a f0       	brmi	.+18     	; 0x4bfc <__mulsf3_pse+0x7a>
    4bea:	ee 0f       	add	r30, r30
    4bec:	ff 1f       	adc	r31, r31
    4bee:	bb 1f       	adc	r27, r27
    4bf0:	66 1f       	adc	r22, r22
    4bf2:	77 1f       	adc	r23, r23
    4bf4:	88 1f       	adc	r24, r24
    4bf6:	91 50       	subi	r25, 0x01	; 1
    4bf8:	50 40       	sbci	r21, 0x00	; 0
    4bfa:	a9 f7       	brne	.-22     	; 0x4be6 <__mulsf3_pse+0x64>
    4bfc:	9e 3f       	cpi	r25, 0xFE	; 254
    4bfe:	51 05       	cpc	r21, r1
    4c00:	70 f0       	brcs	.+28     	; 0x4c1e <__mulsf3_pse+0x9c>
    4c02:	5c cf       	rjmp	.-328    	; 0x4abc <__fp_inf>
    4c04:	a6 cf       	rjmp	.-180    	; 0x4b52 <__fp_szero>
    4c06:	5f 3f       	cpi	r21, 0xFF	; 255
    4c08:	ec f3       	brlt	.-6      	; 0x4c04 <__mulsf3_pse+0x82>
    4c0a:	98 3e       	cpi	r25, 0xE8	; 232
    4c0c:	dc f3       	brlt	.-10     	; 0x4c04 <__mulsf3_pse+0x82>
    4c0e:	86 95       	lsr	r24
    4c10:	77 95       	ror	r23
    4c12:	67 95       	ror	r22
    4c14:	b7 95       	ror	r27
    4c16:	f7 95       	ror	r31
    4c18:	e7 95       	ror	r30
    4c1a:	9f 5f       	subi	r25, 0xFF	; 255
    4c1c:	c1 f7       	brne	.-16     	; 0x4c0e <__mulsf3_pse+0x8c>
    4c1e:	fe 2b       	or	r31, r30
    4c20:	88 0f       	add	r24, r24
    4c22:	91 1d       	adc	r25, r1
    4c24:	96 95       	lsr	r25
    4c26:	87 95       	ror	r24
    4c28:	97 f9       	bld	r25, 7
    4c2a:	08 95       	ret

00004c2c <pow>:
    4c2c:	fa 01       	movw	r30, r20
    4c2e:	ee 0f       	add	r30, r30
    4c30:	ff 1f       	adc	r31, r31
    4c32:	30 96       	adiw	r30, 0x00	; 0
    4c34:	21 05       	cpc	r18, r1
    4c36:	31 05       	cpc	r19, r1
    4c38:	99 f1       	breq	.+102    	; 0x4ca0 <pow+0x74>
    4c3a:	61 15       	cp	r22, r1
    4c3c:	71 05       	cpc	r23, r1
    4c3e:	61 f4       	brne	.+24     	; 0x4c58 <pow+0x2c>
    4c40:	80 38       	cpi	r24, 0x80	; 128
    4c42:	bf e3       	ldi	r27, 0x3F	; 63
    4c44:	9b 07       	cpc	r25, r27
    4c46:	49 f1       	breq	.+82     	; 0x4c9a <pow+0x6e>
    4c48:	68 94       	set
    4c4a:	90 38       	cpi	r25, 0x80	; 128
    4c4c:	81 05       	cpc	r24, r1
    4c4e:	61 f0       	breq	.+24     	; 0x4c68 <pow+0x3c>
    4c50:	80 38       	cpi	r24, 0x80	; 128
    4c52:	bf ef       	ldi	r27, 0xFF	; 255
    4c54:	9b 07       	cpc	r25, r27
    4c56:	41 f0       	breq	.+16     	; 0x4c68 <pow+0x3c>
    4c58:	99 23       	and	r25, r25
    4c5a:	42 f5       	brpl	.+80     	; 0x4cac <pow+0x80>
    4c5c:	ff 3f       	cpi	r31, 0xFF	; 255
    4c5e:	e1 05       	cpc	r30, r1
    4c60:	31 05       	cpc	r19, r1
    4c62:	21 05       	cpc	r18, r1
    4c64:	11 f1       	breq	.+68     	; 0x4caa <pow+0x7e>
    4c66:	e8 94       	clt
    4c68:	08 94       	sec
    4c6a:	e7 95       	ror	r30
    4c6c:	d9 01       	movw	r26, r18
    4c6e:	aa 23       	and	r26, r26
    4c70:	29 f4       	brne	.+10     	; 0x4c7c <pow+0x50>
    4c72:	ab 2f       	mov	r26, r27
    4c74:	be 2f       	mov	r27, r30
    4c76:	f8 5f       	subi	r31, 0xF8	; 248
    4c78:	d0 f3       	brcs	.-12     	; 0x4c6e <pow+0x42>
    4c7a:	10 c0       	rjmp	.+32     	; 0x4c9c <pow+0x70>
    4c7c:	ff 5f       	subi	r31, 0xFF	; 255
    4c7e:	70 f4       	brcc	.+28     	; 0x4c9c <pow+0x70>
    4c80:	a6 95       	lsr	r26
    4c82:	e0 f7       	brcc	.-8      	; 0x4c7c <pow+0x50>
    4c84:	f7 39       	cpi	r31, 0x97	; 151
    4c86:	50 f0       	brcs	.+20     	; 0x4c9c <pow+0x70>
    4c88:	19 f0       	breq	.+6      	; 0x4c90 <pow+0x64>
    4c8a:	ff 3a       	cpi	r31, 0xAF	; 175
    4c8c:	38 f4       	brcc	.+14     	; 0x4c9c <pow+0x70>
    4c8e:	9f 77       	andi	r25, 0x7F	; 127
    4c90:	9f 93       	push	r25
    4c92:	0c d0       	rcall	.+24     	; 0x4cac <pow+0x80>
    4c94:	0f 90       	pop	r0
    4c96:	07 fc       	sbrc	r0, 7
    4c98:	90 58       	subi	r25, 0x80	; 128
    4c9a:	08 95       	ret
    4c9c:	3e f0       	brts	.+14     	; 0x4cac <pow+0x80>
    4c9e:	14 cf       	rjmp	.-472    	; 0x4ac8 <__fp_nan>
    4ca0:	60 e0       	ldi	r22, 0x00	; 0
    4ca2:	70 e0       	ldi	r23, 0x00	; 0
    4ca4:	80 e8       	ldi	r24, 0x80	; 128
    4ca6:	9f e3       	ldi	r25, 0x3F	; 63
    4ca8:	08 95       	ret
    4caa:	4f e7       	ldi	r20, 0x7F	; 127
    4cac:	9f 77       	andi	r25, 0x7F	; 127
    4cae:	5f 93       	push	r21
    4cb0:	4f 93       	push	r20
    4cb2:	3f 93       	push	r19
    4cb4:	2f 93       	push	r18
    4cb6:	e7 d0       	rcall	.+462    	; 0x4e86 <log>
    4cb8:	2f 91       	pop	r18
    4cba:	3f 91       	pop	r19
    4cbc:	4f 91       	pop	r20
    4cbe:	5f 91       	pop	r21
    4cc0:	52 df       	rcall	.-348    	; 0x4b66 <__mulsf3>
    4cc2:	25 c0       	rjmp	.+74     	; 0x4d0e <exp>

00004cc4 <round>:
    4cc4:	2b df       	rcall	.-426    	; 0x4b1c <__fp_splitA>
    4cc6:	e0 f0       	brcs	.+56     	; 0x4d00 <round+0x3c>
    4cc8:	9e 37       	cpi	r25, 0x7E	; 126
    4cca:	d8 f0       	brcs	.+54     	; 0x4d02 <round+0x3e>
    4ccc:	96 39       	cpi	r25, 0x96	; 150
    4cce:	b8 f4       	brcc	.+46     	; 0x4cfe <round+0x3a>
    4cd0:	9e 38       	cpi	r25, 0x8E	; 142
    4cd2:	48 f4       	brcc	.+18     	; 0x4ce6 <round+0x22>
    4cd4:	67 2f       	mov	r22, r23
    4cd6:	78 2f       	mov	r23, r24
    4cd8:	88 27       	eor	r24, r24
    4cda:	98 5f       	subi	r25, 0xF8	; 248
    4cdc:	f9 cf       	rjmp	.-14     	; 0x4cd0 <round+0xc>
    4cde:	86 95       	lsr	r24
    4ce0:	77 95       	ror	r23
    4ce2:	67 95       	ror	r22
    4ce4:	93 95       	inc	r25
    4ce6:	95 39       	cpi	r25, 0x95	; 149
    4ce8:	d0 f3       	brcs	.-12     	; 0x4cde <round+0x1a>
    4cea:	b6 2f       	mov	r27, r22
    4cec:	b1 70       	andi	r27, 0x01	; 1
    4cee:	6b 0f       	add	r22, r27
    4cf0:	71 1d       	adc	r23, r1
    4cf2:	81 1d       	adc	r24, r1
    4cf4:	20 f4       	brcc	.+8      	; 0x4cfe <round+0x3a>
    4cf6:	87 95       	ror	r24
    4cf8:	77 95       	ror	r23
    4cfa:	67 95       	ror	r22
    4cfc:	93 95       	inc	r25
    4cfe:	33 c0       	rjmp	.+102    	; 0x4d66 <__fp_mintl>
    4d00:	4d c0       	rjmp	.+154    	; 0x4d9c <__fp_mpack>
    4d02:	27 cf       	rjmp	.-434    	; 0x4b52 <__fp_szero>
    4d04:	19 f4       	brne	.+6      	; 0x4d0c <round+0x48>
    4d06:	0e f0       	brts	.+2      	; 0x4d0a <round+0x46>
    4d08:	d9 ce       	rjmp	.-590    	; 0x4abc <__fp_inf>
    4d0a:	22 cf       	rjmp	.-444    	; 0x4b50 <__fp_zero>
    4d0c:	dd ce       	rjmp	.-582    	; 0x4ac8 <__fp_nan>

00004d0e <exp>:
    4d0e:	06 df       	rcall	.-500    	; 0x4b1c <__fp_splitA>
    4d10:	c8 f3       	brcs	.-14     	; 0x4d04 <round+0x40>
    4d12:	96 38       	cpi	r25, 0x86	; 134
    4d14:	c0 f7       	brcc	.-16     	; 0x4d06 <round+0x42>
    4d16:	07 f8       	bld	r0, 7
    4d18:	0f 92       	push	r0
    4d1a:	e8 94       	clt
    4d1c:	2b e3       	ldi	r18, 0x3B	; 59
    4d1e:	3a ea       	ldi	r19, 0xAA	; 170
    4d20:	48 eb       	ldi	r20, 0xB8	; 184
    4d22:	5f e7       	ldi	r21, 0x7F	; 127
    4d24:	2e df       	rcall	.-420    	; 0x4b82 <__mulsf3_pse>
    4d26:	0f 92       	push	r0
    4d28:	0f 92       	push	r0
    4d2a:	0f 92       	push	r0
    4d2c:	4d b7       	in	r20, 0x3d	; 61
    4d2e:	5e b7       	in	r21, 0x3e	; 62
    4d30:	0f 92       	push	r0
    4d32:	e9 d0       	rcall	.+466    	; 0x4f06 <modf>
    4d34:	e4 ee       	ldi	r30, 0xE4	; 228
    4d36:	f0 e0       	ldi	r31, 0x00	; 0
    4d38:	3f d0       	rcall	.+126    	; 0x4db8 <__fp_powser>
    4d3a:	4f 91       	pop	r20
    4d3c:	5f 91       	pop	r21
    4d3e:	ef 91       	pop	r30
    4d40:	ff 91       	pop	r31
    4d42:	e5 95       	asr	r30
    4d44:	ee 1f       	adc	r30, r30
    4d46:	ff 1f       	adc	r31, r31
    4d48:	49 f0       	breq	.+18     	; 0x4d5c <exp+0x4e>
    4d4a:	fe 57       	subi	r31, 0x7E	; 126
    4d4c:	e0 68       	ori	r30, 0x80	; 128
    4d4e:	44 27       	eor	r20, r20
    4d50:	ee 0f       	add	r30, r30
    4d52:	44 1f       	adc	r20, r20
    4d54:	fa 95       	dec	r31
    4d56:	e1 f7       	brne	.-8      	; 0x4d50 <exp+0x42>
    4d58:	41 95       	neg	r20
    4d5a:	55 0b       	sbc	r21, r21
    4d5c:	5b d0       	rcall	.+182    	; 0x4e14 <ldexp>
    4d5e:	0f 90       	pop	r0
    4d60:	07 fe       	sbrs	r0, 7
    4d62:	4f c0       	rjmp	.+158    	; 0x4e02 <inverse>
    4d64:	08 95       	ret

00004d66 <__fp_mintl>:
    4d66:	88 23       	and	r24, r24
    4d68:	71 f4       	brne	.+28     	; 0x4d86 <__fp_mintl+0x20>
    4d6a:	77 23       	and	r23, r23
    4d6c:	21 f0       	breq	.+8      	; 0x4d76 <__fp_mintl+0x10>
    4d6e:	98 50       	subi	r25, 0x08	; 8
    4d70:	87 2b       	or	r24, r23
    4d72:	76 2f       	mov	r23, r22
    4d74:	07 c0       	rjmp	.+14     	; 0x4d84 <__fp_mintl+0x1e>
    4d76:	66 23       	and	r22, r22
    4d78:	11 f4       	brne	.+4      	; 0x4d7e <__fp_mintl+0x18>
    4d7a:	99 27       	eor	r25, r25
    4d7c:	0d c0       	rjmp	.+26     	; 0x4d98 <__fp_mintl+0x32>
    4d7e:	90 51       	subi	r25, 0x10	; 16
    4d80:	86 2b       	or	r24, r22
    4d82:	70 e0       	ldi	r23, 0x00	; 0
    4d84:	60 e0       	ldi	r22, 0x00	; 0
    4d86:	2a f0       	brmi	.+10     	; 0x4d92 <__fp_mintl+0x2c>
    4d88:	9a 95       	dec	r25
    4d8a:	66 0f       	add	r22, r22
    4d8c:	77 1f       	adc	r23, r23
    4d8e:	88 1f       	adc	r24, r24
    4d90:	da f7       	brpl	.-10     	; 0x4d88 <__fp_mintl+0x22>
    4d92:	88 0f       	add	r24, r24
    4d94:	96 95       	lsr	r25
    4d96:	87 95       	ror	r24
    4d98:	97 f9       	bld	r25, 7
    4d9a:	08 95       	ret

00004d9c <__fp_mpack>:
    4d9c:	9f 3f       	cpi	r25, 0xFF	; 255
    4d9e:	31 f0       	breq	.+12     	; 0x4dac <__fp_mpack_finite+0xc>

00004da0 <__fp_mpack_finite>:
    4da0:	91 50       	subi	r25, 0x01	; 1
    4da2:	20 f4       	brcc	.+8      	; 0x4dac <__fp_mpack_finite+0xc>
    4da4:	87 95       	ror	r24
    4da6:	77 95       	ror	r23
    4da8:	67 95       	ror	r22
    4daa:	b7 95       	ror	r27
    4dac:	88 0f       	add	r24, r24
    4dae:	91 1d       	adc	r25, r1
    4db0:	96 95       	lsr	r25
    4db2:	87 95       	ror	r24
    4db4:	97 f9       	bld	r25, 7
    4db6:	08 95       	ret

00004db8 <__fp_powser>:
    4db8:	df 93       	push	r29
    4dba:	cf 93       	push	r28
    4dbc:	1f 93       	push	r17
    4dbe:	0f 93       	push	r16
    4dc0:	ff 92       	push	r15
    4dc2:	ef 92       	push	r14
    4dc4:	df 92       	push	r13
    4dc6:	7b 01       	movw	r14, r22
    4dc8:	8c 01       	movw	r16, r24
    4dca:	68 94       	set
    4dcc:	05 c0       	rjmp	.+10     	; 0x4dd8 <__fp_powser+0x20>
    4dce:	da 2e       	mov	r13, r26
    4dd0:	ef 01       	movw	r28, r30
    4dd2:	d5 de       	rcall	.-598    	; 0x4b7e <__mulsf3x>
    4dd4:	fe 01       	movw	r30, r28
    4dd6:	e8 94       	clt
    4dd8:	a5 91       	lpm	r26, Z+
    4dda:	25 91       	lpm	r18, Z+
    4ddc:	35 91       	lpm	r19, Z+
    4dde:	45 91       	lpm	r20, Z+
    4de0:	55 91       	lpm	r21, Z+
    4de2:	ae f3       	brts	.-22     	; 0x4dce <__fp_powser+0x16>
    4de4:	ef 01       	movw	r28, r30
    4de6:	1e dd       	rcall	.-1476   	; 0x4824 <__addsf3x>
    4de8:	fe 01       	movw	r30, r28
    4dea:	97 01       	movw	r18, r14
    4dec:	a8 01       	movw	r20, r16
    4dee:	da 94       	dec	r13
    4df0:	79 f7       	brne	.-34     	; 0x4dd0 <__fp_powser+0x18>
    4df2:	df 90       	pop	r13
    4df4:	ef 90       	pop	r14
    4df6:	ff 90       	pop	r15
    4df8:	0f 91       	pop	r16
    4dfa:	1f 91       	pop	r17
    4dfc:	cf 91       	pop	r28
    4dfe:	df 91       	pop	r29
    4e00:	08 95       	ret

00004e02 <inverse>:
    4e02:	9b 01       	movw	r18, r22
    4e04:	ac 01       	movw	r20, r24
    4e06:	60 e0       	ldi	r22, 0x00	; 0
    4e08:	70 e0       	ldi	r23, 0x00	; 0
    4e0a:	80 e8       	ldi	r24, 0x80	; 128
    4e0c:	9f e3       	ldi	r25, 0x3F	; 63
    4e0e:	61 cd       	rjmp	.-1342   	; 0x48d2 <__divsf3>
    4e10:	55 ce       	rjmp	.-854    	; 0x4abc <__fp_inf>
    4e12:	c4 cf       	rjmp	.-120    	; 0x4d9c <__fp_mpack>

00004e14 <ldexp>:
    4e14:	83 de       	rcall	.-762    	; 0x4b1c <__fp_splitA>
    4e16:	e8 f3       	brcs	.-6      	; 0x4e12 <inverse+0x10>
    4e18:	99 23       	and	r25, r25
    4e1a:	d9 f3       	breq	.-10     	; 0x4e12 <inverse+0x10>
    4e1c:	94 0f       	add	r25, r20
    4e1e:	51 1d       	adc	r21, r1
    4e20:	bb f3       	brvs	.-18     	; 0x4e10 <inverse+0xe>
    4e22:	91 50       	subi	r25, 0x01	; 1
    4e24:	50 40       	sbci	r21, 0x00	; 0
    4e26:	94 f0       	brlt	.+36     	; 0x4e4c <ldexp+0x38>
    4e28:	59 f0       	breq	.+22     	; 0x4e40 <ldexp+0x2c>
    4e2a:	88 23       	and	r24, r24
    4e2c:	32 f0       	brmi	.+12     	; 0x4e3a <ldexp+0x26>
    4e2e:	66 0f       	add	r22, r22
    4e30:	77 1f       	adc	r23, r23
    4e32:	88 1f       	adc	r24, r24
    4e34:	91 50       	subi	r25, 0x01	; 1
    4e36:	50 40       	sbci	r21, 0x00	; 0
    4e38:	c1 f7       	brne	.-16     	; 0x4e2a <ldexp+0x16>
    4e3a:	9e 3f       	cpi	r25, 0xFE	; 254
    4e3c:	51 05       	cpc	r21, r1
    4e3e:	44 f7       	brge	.-48     	; 0x4e10 <inverse+0xe>
    4e40:	88 0f       	add	r24, r24
    4e42:	91 1d       	adc	r25, r1
    4e44:	96 95       	lsr	r25
    4e46:	87 95       	ror	r24
    4e48:	97 f9       	bld	r25, 7
    4e4a:	08 95       	ret
    4e4c:	5f 3f       	cpi	r21, 0xFF	; 255
    4e4e:	ac f0       	brlt	.+42     	; 0x4e7a <ldexp+0x66>
    4e50:	98 3e       	cpi	r25, 0xE8	; 232
    4e52:	9c f0       	brlt	.+38     	; 0x4e7a <ldexp+0x66>
    4e54:	bb 27       	eor	r27, r27
    4e56:	86 95       	lsr	r24
    4e58:	77 95       	ror	r23
    4e5a:	67 95       	ror	r22
    4e5c:	b7 95       	ror	r27
    4e5e:	08 f4       	brcc	.+2      	; 0x4e62 <ldexp+0x4e>
    4e60:	b1 60       	ori	r27, 0x01	; 1
    4e62:	93 95       	inc	r25
    4e64:	c1 f7       	brne	.-16     	; 0x4e56 <ldexp+0x42>
    4e66:	bb 0f       	add	r27, r27
    4e68:	58 f7       	brcc	.-42     	; 0x4e40 <ldexp+0x2c>
    4e6a:	11 f4       	brne	.+4      	; 0x4e70 <ldexp+0x5c>
    4e6c:	60 ff       	sbrs	r22, 0
    4e6e:	e8 cf       	rjmp	.-48     	; 0x4e40 <ldexp+0x2c>
    4e70:	6f 5f       	subi	r22, 0xFF	; 255
    4e72:	7f 4f       	sbci	r23, 0xFF	; 255
    4e74:	8f 4f       	sbci	r24, 0xFF	; 255
    4e76:	9f 4f       	sbci	r25, 0xFF	; 255
    4e78:	e3 cf       	rjmp	.-58     	; 0x4e40 <ldexp+0x2c>
    4e7a:	6b ce       	rjmp	.-810    	; 0x4b52 <__fp_szero>
    4e7c:	0e f0       	brts	.+2      	; 0x4e80 <ldexp+0x6c>
    4e7e:	8e cf       	rjmp	.-228    	; 0x4d9c <__fp_mpack>
    4e80:	23 ce       	rjmp	.-954    	; 0x4ac8 <__fp_nan>
    4e82:	68 94       	set
    4e84:	1b ce       	rjmp	.-970    	; 0x4abc <__fp_inf>

00004e86 <log>:
    4e86:	4a de       	rcall	.-876    	; 0x4b1c <__fp_splitA>
    4e88:	c8 f3       	brcs	.-14     	; 0x4e7c <ldexp+0x68>
    4e8a:	99 23       	and	r25, r25
    4e8c:	d1 f3       	breq	.-12     	; 0x4e82 <ldexp+0x6e>
    4e8e:	c6 f3       	brts	.-16     	; 0x4e80 <ldexp+0x6c>
    4e90:	df 93       	push	r29
    4e92:	cf 93       	push	r28
    4e94:	1f 93       	push	r17
    4e96:	0f 93       	push	r16
    4e98:	ff 92       	push	r15
    4e9a:	c9 2f       	mov	r28, r25
    4e9c:	dd 27       	eor	r29, r29
    4e9e:	88 23       	and	r24, r24
    4ea0:	2a f0       	brmi	.+10     	; 0x4eac <log+0x26>
    4ea2:	21 97       	sbiw	r28, 0x01	; 1
    4ea4:	66 0f       	add	r22, r22
    4ea6:	77 1f       	adc	r23, r23
    4ea8:	88 1f       	adc	r24, r24
    4eaa:	da f7       	brpl	.-10     	; 0x4ea2 <log+0x1c>
    4eac:	20 e0       	ldi	r18, 0x00	; 0
    4eae:	30 e0       	ldi	r19, 0x00	; 0
    4eb0:	40 e8       	ldi	r20, 0x80	; 128
    4eb2:	5f eb       	ldi	r21, 0xBF	; 191
    4eb4:	9f e3       	ldi	r25, 0x3F	; 63
    4eb6:	88 39       	cpi	r24, 0x98	; 152
    4eb8:	20 f0       	brcs	.+8      	; 0x4ec2 <log+0x3c>
    4eba:	80 3e       	cpi	r24, 0xE0	; 224
    4ebc:	30 f0       	brcs	.+12     	; 0x4eca <log+0x44>
    4ebe:	21 96       	adiw	r28, 0x01	; 1
    4ec0:	8f 77       	andi	r24, 0x7F	; 127
    4ec2:	9f dc       	rcall	.-1730   	; 0x4802 <__addsf3>
    4ec4:	ec e0       	ldi	r30, 0x0C	; 12
    4ec6:	f1 e0       	ldi	r31, 0x01	; 1
    4ec8:	03 c0       	rjmp	.+6      	; 0x4ed0 <log+0x4a>
    4eca:	9b dc       	rcall	.-1738   	; 0x4802 <__addsf3>
    4ecc:	e9 e3       	ldi	r30, 0x39	; 57
    4ece:	f1 e0       	ldi	r31, 0x01	; 1
    4ed0:	73 df       	rcall	.-282    	; 0x4db8 <__fp_powser>
    4ed2:	8b 01       	movw	r16, r22
    4ed4:	be 01       	movw	r22, r28
    4ed6:	ec 01       	movw	r28, r24
    4ed8:	fb 2e       	mov	r15, r27
    4eda:	6f 57       	subi	r22, 0x7F	; 127
    4edc:	71 09       	sbc	r23, r1
    4ede:	75 95       	asr	r23
    4ee0:	77 1f       	adc	r23, r23
    4ee2:	88 0b       	sbc	r24, r24
    4ee4:	99 0b       	sbc	r25, r25
    4ee6:	8b dd       	rcall	.-1258   	; 0x49fe <__floatsisf>
    4ee8:	28 e1       	ldi	r18, 0x18	; 24
    4eea:	32 e7       	ldi	r19, 0x72	; 114
    4eec:	41 e3       	ldi	r20, 0x31	; 49
    4eee:	5f e3       	ldi	r21, 0x3F	; 63
    4ef0:	46 de       	rcall	.-884    	; 0x4b7e <__mulsf3x>
    4ef2:	af 2d       	mov	r26, r15
    4ef4:	98 01       	movw	r18, r16
    4ef6:	ae 01       	movw	r20, r28
    4ef8:	ff 90       	pop	r15
    4efa:	0f 91       	pop	r16
    4efc:	1f 91       	pop	r17
    4efe:	cf 91       	pop	r28
    4f00:	df 91       	pop	r29
    4f02:	90 dc       	rcall	.-1760   	; 0x4824 <__addsf3x>
    4f04:	f2 cd       	rjmp	.-1052   	; 0x4aea <__fp_round>

00004f06 <modf>:
    4f06:	fa 01       	movw	r30, r20
    4f08:	dc 01       	movw	r26, r24
    4f0a:	aa 0f       	add	r26, r26
    4f0c:	bb 1f       	adc	r27, r27
    4f0e:	9b 01       	movw	r18, r22
    4f10:	ac 01       	movw	r20, r24
    4f12:	bf 57       	subi	r27, 0x7F	; 127
    4f14:	28 f4       	brcc	.+10     	; 0x4f20 <modf+0x1a>
    4f16:	22 27       	eor	r18, r18
    4f18:	33 27       	eor	r19, r19
    4f1a:	44 27       	eor	r20, r20
    4f1c:	50 78       	andi	r21, 0x80	; 128
    4f1e:	1f c0       	rjmp	.+62     	; 0x4f5e <modf+0x58>
    4f20:	b7 51       	subi	r27, 0x17	; 23
    4f22:	88 f4       	brcc	.+34     	; 0x4f46 <modf+0x40>
    4f24:	ab 2f       	mov	r26, r27
    4f26:	00 24       	eor	r0, r0
    4f28:	46 95       	lsr	r20
    4f2a:	37 95       	ror	r19
    4f2c:	27 95       	ror	r18
    4f2e:	01 1c       	adc	r0, r1
    4f30:	a3 95       	inc	r26
    4f32:	d2 f3       	brmi	.-12     	; 0x4f28 <modf+0x22>
    4f34:	00 20       	and	r0, r0
    4f36:	69 f0       	breq	.+26     	; 0x4f52 <modf+0x4c>
    4f38:	22 0f       	add	r18, r18
    4f3a:	33 1f       	adc	r19, r19
    4f3c:	44 1f       	adc	r20, r20
    4f3e:	b3 95       	inc	r27
    4f40:	da f3       	brmi	.-10     	; 0x4f38 <modf+0x32>
    4f42:	0d d0       	rcall	.+26     	; 0x4f5e <modf+0x58>
    4f44:	5d cc       	rjmp	.-1862   	; 0x4800 <__subsf3>
    4f46:	61 30       	cpi	r22, 0x01	; 1
    4f48:	71 05       	cpc	r23, r1
    4f4a:	a0 e8       	ldi	r26, 0x80	; 128
    4f4c:	8a 07       	cpc	r24, r26
    4f4e:	b9 46       	sbci	r27, 0x69	; 105
    4f50:	30 f4       	brcc	.+12     	; 0x4f5e <modf+0x58>
    4f52:	9b 01       	movw	r18, r22
    4f54:	ac 01       	movw	r20, r24
    4f56:	66 27       	eor	r22, r22
    4f58:	77 27       	eor	r23, r23
    4f5a:	88 27       	eor	r24, r24
    4f5c:	90 78       	andi	r25, 0x80	; 128
    4f5e:	30 96       	adiw	r30, 0x00	; 0
    4f60:	21 f0       	breq	.+8      	; 0x4f6a <modf+0x64>
    4f62:	20 83       	st	Z, r18
    4f64:	31 83       	std	Z+1, r19	; 0x01
    4f66:	42 83       	std	Z+2, r20	; 0x02
    4f68:	53 83       	std	Z+3, r21	; 0x03
    4f6a:	08 95       	ret

00004f6c <__udivmodsi4>:
    4f6c:	a1 e2       	ldi	r26, 0x21	; 33
    4f6e:	1a 2e       	mov	r1, r26
    4f70:	aa 1b       	sub	r26, r26
    4f72:	bb 1b       	sub	r27, r27
    4f74:	fd 01       	movw	r30, r26
    4f76:	0d c0       	rjmp	.+26     	; 0x4f92 <__udivmodsi4_ep>

00004f78 <__udivmodsi4_loop>:
    4f78:	aa 1f       	adc	r26, r26
    4f7a:	bb 1f       	adc	r27, r27
    4f7c:	ee 1f       	adc	r30, r30
    4f7e:	ff 1f       	adc	r31, r31
    4f80:	a2 17       	cp	r26, r18
    4f82:	b3 07       	cpc	r27, r19
    4f84:	e4 07       	cpc	r30, r20
    4f86:	f5 07       	cpc	r31, r21
    4f88:	20 f0       	brcs	.+8      	; 0x4f92 <__udivmodsi4_ep>
    4f8a:	a2 1b       	sub	r26, r18
    4f8c:	b3 0b       	sbc	r27, r19
    4f8e:	e4 0b       	sbc	r30, r20
    4f90:	f5 0b       	sbc	r31, r21

00004f92 <__udivmodsi4_ep>:
    4f92:	66 1f       	adc	r22, r22
    4f94:	77 1f       	adc	r23, r23
    4f96:	88 1f       	adc	r24, r24
    4f98:	99 1f       	adc	r25, r25
    4f9a:	1a 94       	dec	r1
    4f9c:	69 f7       	brne	.-38     	; 0x4f78 <__udivmodsi4_loop>
    4f9e:	60 95       	com	r22
    4fa0:	70 95       	com	r23
    4fa2:	80 95       	com	r24
    4fa4:	90 95       	com	r25
    4fa6:	9b 01       	movw	r18, r22
    4fa8:	ac 01       	movw	r20, r24
    4faa:	bd 01       	movw	r22, r26
    4fac:	cf 01       	movw	r24, r30
    4fae:	08 95       	ret

00004fb0 <__umulhisi3>:
    4fb0:	a2 9f       	mul	r26, r18
    4fb2:	b0 01       	movw	r22, r0
    4fb4:	b3 9f       	mul	r27, r19
    4fb6:	c0 01       	movw	r24, r0
    4fb8:	a3 9f       	mul	r26, r19
    4fba:	70 0d       	add	r23, r0
    4fbc:	81 1d       	adc	r24, r1
    4fbe:	11 24       	eor	r1, r1
    4fc0:	91 1d       	adc	r25, r1
    4fc2:	b2 9f       	mul	r27, r18
    4fc4:	70 0d       	add	r23, r0
    4fc6:	81 1d       	adc	r24, r1
    4fc8:	11 24       	eor	r1, r1
    4fca:	91 1d       	adc	r25, r1
    4fcc:	08 95       	ret

00004fce <memcpy>:
    4fce:	fb 01       	movw	r30, r22
    4fd0:	dc 01       	movw	r26, r24
    4fd2:	02 c0       	rjmp	.+4      	; 0x4fd8 <memcpy+0xa>
    4fd4:	01 90       	ld	r0, Z+
    4fd6:	0d 92       	st	X+, r0
    4fd8:	41 50       	subi	r20, 0x01	; 1
    4fda:	50 40       	sbci	r21, 0x00	; 0
    4fdc:	d8 f7       	brcc	.-10     	; 0x4fd4 <memcpy+0x6>
    4fde:	08 95       	ret

00004fe0 <memset>:
    4fe0:	dc 01       	movw	r26, r24
    4fe2:	01 c0       	rjmp	.+2      	; 0x4fe6 <memset+0x6>
    4fe4:	6d 93       	st	X+, r22
    4fe6:	41 50       	subi	r20, 0x01	; 1
    4fe8:	50 40       	sbci	r21, 0x00	; 0
    4fea:	e0 f7       	brcc	.-8      	; 0x4fe4 <memset+0x4>
    4fec:	08 95       	ret

00004fee <_exit>:
    4fee:	f8 94       	cli

00004ff0 <__stop_program>:
    4ff0:	ff cf       	rjmp	.-2      	; 0x4ff0 <__stop_program>
