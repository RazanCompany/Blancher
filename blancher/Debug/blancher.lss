
blancher.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000027a  00800200  00004c06  00004c9a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004c06  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000160f  0080047a  0080047a  00004f14  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00004f14  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004f44  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000cc8  00000000  00000000  00004f84  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000e400  00000000  00000000  00005c4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003aca  00000000  00000000  0001404c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000c777  00000000  00000000  00017b16  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000020d0  00000000  00000000  00024290  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00019763  00000000  00000000  00026360  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000a699  00000000  00000000  0003fac3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000ce0  00000000  00000000  0004a15c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000037b6  00000000  00000000  0004ae3c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	db c0       	rjmp	.+438    	; 0x1b8 <__ctors_end>
       2:	00 00       	nop
       4:	fa c0       	rjmp	.+500    	; 0x1fa <__bad_interrupt>
       6:	00 00       	nop
       8:	f8 c0       	rjmp	.+496    	; 0x1fa <__bad_interrupt>
       a:	00 00       	nop
       c:	f6 c0       	rjmp	.+492    	; 0x1fa <__bad_interrupt>
       e:	00 00       	nop
      10:	f4 c0       	rjmp	.+488    	; 0x1fa <__bad_interrupt>
      12:	00 00       	nop
      14:	f2 c0       	rjmp	.+484    	; 0x1fa <__bad_interrupt>
      16:	00 00       	nop
      18:	f0 c0       	rjmp	.+480    	; 0x1fa <__bad_interrupt>
      1a:	00 00       	nop
      1c:	ee c0       	rjmp	.+476    	; 0x1fa <__bad_interrupt>
      1e:	00 00       	nop
      20:	ec c0       	rjmp	.+472    	; 0x1fa <__bad_interrupt>
      22:	00 00       	nop
      24:	ea c0       	rjmp	.+468    	; 0x1fa <__bad_interrupt>
      26:	00 00       	nop
      28:	e8 c0       	rjmp	.+464    	; 0x1fa <__bad_interrupt>
      2a:	00 00       	nop
      2c:	e6 c0       	rjmp	.+460    	; 0x1fa <__bad_interrupt>
      2e:	00 00       	nop
      30:	0c 94 a4 15 	jmp	0x2b48	; 0x2b48 <__vector_12>
      34:	0c 94 20 22 	jmp	0x4440	; 0x4440 <__vector_13>
      38:	e0 c0       	rjmp	.+448    	; 0x1fa <__bad_interrupt>
      3a:	00 00       	nop
      3c:	de c0       	rjmp	.+444    	; 0x1fa <__bad_interrupt>
      3e:	00 00       	nop
      40:	dc c0       	rjmp	.+440    	; 0x1fa <__bad_interrupt>
      42:	00 00       	nop
      44:	0c 94 90 0c 	jmp	0x1920	; 0x1920 <__vector_17>
      48:	d8 c0       	rjmp	.+432    	; 0x1fa <__bad_interrupt>
      4a:	00 00       	nop
      4c:	d6 c0       	rjmp	.+428    	; 0x1fa <__bad_interrupt>
      4e:	00 00       	nop
      50:	d4 c0       	rjmp	.+424    	; 0x1fa <__bad_interrupt>
      52:	00 00       	nop
      54:	d2 c0       	rjmp	.+420    	; 0x1fa <__bad_interrupt>
      56:	00 00       	nop
      58:	d0 c0       	rjmp	.+416    	; 0x1fa <__bad_interrupt>
      5a:	00 00       	nop
      5c:	ce c0       	rjmp	.+412    	; 0x1fa <__bad_interrupt>
      5e:	00 00       	nop
      60:	cc c0       	rjmp	.+408    	; 0x1fa <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 52 0e 	jmp	0x1ca4	; 0x1ca4 <__vector_25>
      68:	0c 94 8b 0e 	jmp	0x1d16	; 0x1d16 <__vector_26>
      6c:	c6 c0       	rjmp	.+396    	; 0x1fa <__bad_interrupt>
      6e:	00 00       	nop
      70:	c4 c0       	rjmp	.+392    	; 0x1fa <__bad_interrupt>
      72:	00 00       	nop
      74:	0c 94 93 0b 	jmp	0x1726	; 0x1726 <__vector_29>
      78:	c0 c0       	rjmp	.+384    	; 0x1fa <__bad_interrupt>
      7a:	00 00       	nop
      7c:	be c0       	rjmp	.+380    	; 0x1fa <__bad_interrupt>
      7e:	00 00       	nop
      80:	0c 94 00 0d 	jmp	0x1a00	; 0x1a00 <__vector_32>
      84:	ba c0       	rjmp	.+372    	; 0x1fa <__bad_interrupt>
      86:	00 00       	nop
      88:	b8 c0       	rjmp	.+368    	; 0x1fa <__bad_interrupt>
      8a:	00 00       	nop
      8c:	b6 c0       	rjmp	.+364    	; 0x1fa <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 58 0f 	jmp	0x1eb0	; 0x1eb0 <__vector_36>
      94:	0c 94 91 0f 	jmp	0x1f22	; 0x1f22 <__vector_37>
      98:	b0 c0       	rjmp	.+352    	; 0x1fa <__bad_interrupt>
      9a:	00 00       	nop
      9c:	ae c0       	rjmp	.+348    	; 0x1fa <__bad_interrupt>
      9e:	00 00       	nop
      a0:	ac c0       	rjmp	.+344    	; 0x1fa <__bad_interrupt>
      a2:	00 00       	nop
      a4:	aa c0       	rjmp	.+340    	; 0x1fa <__bad_interrupt>
      a6:	00 00       	nop
      a8:	0c 94 70 0d 	jmp	0x1ae0	; 0x1ae0 <__vector_42>
      ac:	a6 c0       	rjmp	.+332    	; 0x1fa <__bad_interrupt>
      ae:	00 00       	nop
      b0:	a4 c0       	rjmp	.+328    	; 0x1fa <__bad_interrupt>
      b2:	00 00       	nop
      b4:	a2 c0       	rjmp	.+324    	; 0x1fa <__bad_interrupt>
      b6:	00 00       	nop
      b8:	a0 c0       	rjmp	.+320    	; 0x1fa <__bad_interrupt>
      ba:	00 00       	nop
      bc:	0c 94 e0 0d 	jmp	0x1bc0	; 0x1bc0 <__vector_47>
      c0:	9c c0       	rjmp	.+312    	; 0x1fa <__bad_interrupt>
      c2:	00 00       	nop
      c4:	9a c0       	rjmp	.+308    	; 0x1fa <__bad_interrupt>
      c6:	00 00       	nop
      c8:	98 c0       	rjmp	.+304    	; 0x1fa <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 67 10 	jmp	0x20ce	; 0x20ce <__vector_51>
      d0:	0c 94 a0 10 	jmp	0x2140	; 0x2140 <__vector_52>
      d4:	92 c0       	rjmp	.+292    	; 0x1fa <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 73 11 	jmp	0x22e6	; 0x22e6 <__vector_54>
      dc:	0c 94 ac 11 	jmp	0x2358	; 0x2358 <__vector_55>
      e0:	8c c0       	rjmp	.+280    	; 0x1fa <__bad_interrupt>
      e2:	00 00       	nop
      e4:	07 63       	ori	r16, 0x37	; 55
      e6:	42 36       	cpi	r20, 0x62	; 98
      e8:	b7 9b       	sbis	0x16, 7	; 22
      ea:	d8 a7       	std	Y+40, r29	; 0x28
      ec:	1a 39       	cpi	r17, 0x9A	; 154
      ee:	68 56       	subi	r22, 0x68	; 104
      f0:	18 ae       	std	Y+56, r1	; 0x38
      f2:	ba ab       	std	Y+50, r27	; 0x32
      f4:	55 8c       	ldd	r5, Z+29	; 0x1d
      f6:	1d 3c       	cpi	r17, 0xCD	; 205
      f8:	b7 cc       	rjmp	.-1682   	; 0xfffffa68 <__eeprom_end+0xff7efa68>
      fa:	57 63       	ori	r21, 0x37	; 55
      fc:	bd 6d       	ori	r27, 0xDD	; 221
      fe:	ed fd       	.word	0xfded	; ????
     100:	75 3e       	cpi	r23, 0xE5	; 229
     102:	f6 17       	cp	r31, r22
     104:	72 31       	cpi	r23, 0x12	; 18
     106:	bf 00       	.word	0x00bf	; ????
     108:	00 00       	nop
     10a:	80 3f       	cpi	r24, 0xF0	; 240
     10c:	08 00       	.word	0x0008	; ????
     10e:	00 00       	nop
     110:	be 92       	st	-X, r11
     112:	24 49       	sbci	r18, 0x94	; 148
     114:	12 3e       	cpi	r17, 0xE2	; 226
     116:	ab aa       	std	Y+51, r10	; 0x33
     118:	aa 2a       	or	r10, r26
     11a:	be cd       	rjmp	.-1156   	; 0xfffffc98 <__eeprom_end+0xff7efc98>
     11c:	cc cc       	rjmp	.-1640   	; 0xfffffab6 <__eeprom_end+0xff7efab6>
     11e:	4c 3e       	cpi	r20, 0xEC	; 236
     120:	00 00       	nop
     122:	00 80       	ld	r0, Z
     124:	be ab       	std	Y+54, r27	; 0x36
     126:	aa aa       	std	Y+50, r10	; 0x32
     128:	aa 3e       	cpi	r26, 0xEA	; 234
     12a:	00 00       	nop
     12c:	00 00       	nop
     12e:	bf 00       	.word	0x00bf	; ????
     130:	00 00       	nop
     132:	80 3f       	cpi	r24, 0xF0	; 240
     134:	00 00       	nop
     136:	00 00       	nop
     138:	00 08       	sbc	r0, r0
     13a:	41 78       	andi	r20, 0x81	; 129
     13c:	d3 bb       	out	0x13, r29	; 19
     13e:	43 87       	std	Z+11, r20	; 0x0b
     140:	d1 13       	cpse	r29, r17
     142:	3d 19       	sub	r19, r13
     144:	0e 3c       	cpi	r16, 0xCE	; 206
     146:	c3 bd       	out	0x23, r28	; 35
     148:	42 82       	std	Z+2, r4	; 0x02
     14a:	ad 2b       	or	r26, r29
     14c:	3e 68       	ori	r19, 0x8E	; 142
     14e:	ec 82       	std	Y+4, r14	; 0x04
     150:	76 be       	out	0x36, r7	; 54
     152:	d9 8f       	std	Y+25, r29	; 0x19
     154:	e1 a9       	ldd	r30, Z+49	; 0x31
     156:	3e 4c       	sbci	r19, 0xCE	; 206
     158:	80 ef       	ldi	r24, 0xF0	; 240
     15a:	ff be       	out	0x3f, r15	; 63
     15c:	01 c4       	rjmp	.+2050   	; 0x960 <__LOCK_REGION_LENGTH__+0x560>
     15e:	ff 7f       	andi	r31, 0xFF	; 255
     160:	3f 00       	.word	0x003f	; ????
     162:	00 00       	nop
	...

00000166 <prvIdleTask>:
    /* Reset the event list item to its normal value - so it can be used with
    queues and semaphores. */
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */

    return uxReturn;
}
     166:	c2 ea       	ldi	r28, 0xA2	; 162
     168:	de e0       	ldi	r29, 0x0E	; 14
     16a:	08 eb       	ldi	r16, 0xB8	; 184
     16c:	1e e0       	ldi	r17, 0x0E	; 14
     16e:	80 91 a1 0e 	lds	r24, 0x0EA1	; 0x800ea1 <uxDeletedTasksWaitingCleanUp>
     172:	88 23       	and	r24, r24
     174:	d1 f0       	breq	.+52     	; 0x1aa <prvIdleTask+0x44>
     176:	0f b6       	in	r0, 0x3f	; 63
     178:	f8 94       	cli
     17a:	0f 92       	push	r0
     17c:	ed 81       	ldd	r30, Y+5	; 0x05
     17e:	fe 81       	ldd	r31, Y+6	; 0x06
     180:	86 81       	ldd	r24, Z+6	; 0x06
     182:	97 81       	ldd	r25, Z+7	; 0x07
     184:	02 96       	adiw	r24, 0x02	; 2
     186:	0e 94 0c 14 	call	0x2818	; 0x2818 <uxListRemove>
     18a:	80 91 a0 0e 	lds	r24, 0x0EA0	; 0x800ea0 <uxCurrentNumberOfTasks>
     18e:	81 50       	subi	r24, 0x01	; 1
     190:	80 93 a0 0e 	sts	0x0EA0, r24	; 0x800ea0 <uxCurrentNumberOfTasks>
     194:	80 91 a1 0e 	lds	r24, 0x0EA1	; 0x800ea1 <uxDeletedTasksWaitingCleanUp>
     198:	81 50       	subi	r24, 0x01	; 1
     19a:	80 93 a1 0e 	sts	0x0EA1, r24	; 0x800ea1 <uxDeletedTasksWaitingCleanUp>
     19e:	0f 90       	pop	r0
     1a0:	0f be       	out	0x3f, r0	; 63
     1a2:	80 91 a1 0e 	lds	r24, 0x0EA1	; 0x800ea1 <uxDeletedTasksWaitingCleanUp>
     1a6:	81 11       	cpse	r24, r1
     1a8:	e6 cf       	rjmp	.-52     	; 0x176 <prvIdleTask+0x10>
     1aa:	f8 01       	movw	r30, r16
     1ac:	80 81       	ld	r24, Z
     1ae:	82 30       	cpi	r24, 0x02	; 2
     1b0:	f0 f2       	brcs	.-68     	; 0x16e <prvIdleTask+0x8>
     1b2:	0e 94 e1 14 	call	0x29c2	; 0x29c2 <vPortYield>
     1b6:	db cf       	rjmp	.-74     	; 0x16e <prvIdleTask+0x8>

000001b8 <__ctors_end>:
     1b8:	11 24       	eor	r1, r1
     1ba:	1f be       	out	0x3f, r1	; 63
     1bc:	cf ef       	ldi	r28, 0xFF	; 255
     1be:	d1 e2       	ldi	r29, 0x21	; 33
     1c0:	de bf       	out	0x3e, r29	; 62
     1c2:	cd bf       	out	0x3d, r28	; 61
     1c4:	00 e0       	ldi	r16, 0x00	; 0
     1c6:	0c bf       	out	0x3c, r16	; 60

000001c8 <__do_copy_data>:
     1c8:	14 e0       	ldi	r17, 0x04	; 4
     1ca:	a0 e0       	ldi	r26, 0x00	; 0
     1cc:	b2 e0       	ldi	r27, 0x02	; 2
     1ce:	e6 e0       	ldi	r30, 0x06	; 6
     1d0:	fc e4       	ldi	r31, 0x4C	; 76
     1d2:	00 e0       	ldi	r16, 0x00	; 0
     1d4:	0b bf       	out	0x3b, r16	; 59
     1d6:	02 c0       	rjmp	.+4      	; 0x1dc <__do_copy_data+0x14>
     1d8:	07 90       	elpm	r0, Z+
     1da:	0d 92       	st	X+, r0
     1dc:	aa 37       	cpi	r26, 0x7A	; 122
     1de:	b1 07       	cpc	r27, r17
     1e0:	d9 f7       	brne	.-10     	; 0x1d8 <__do_copy_data+0x10>

000001e2 <__do_clear_bss>:
     1e2:	2a e1       	ldi	r18, 0x1A	; 26
     1e4:	aa e7       	ldi	r26, 0x7A	; 122
     1e6:	b4 e0       	ldi	r27, 0x04	; 4
     1e8:	01 c0       	rjmp	.+2      	; 0x1ec <.do_clear_bss_start>

000001ea <.do_clear_bss_loop>:
     1ea:	1d 92       	st	X+, r1

000001ec <.do_clear_bss_start>:
     1ec:	a9 38       	cpi	r26, 0x89	; 137
     1ee:	b2 07       	cpc	r27, r18
     1f0:	e1 f7       	brne	.-8      	; 0x1ea <.do_clear_bss_loop>
     1f2:	0e 94 c6 0a 	call	0x158c	; 0x158c <main>
     1f6:	0c 94 01 26 	jmp	0x4c02	; 0x4c02 <_exit>

000001fa <__bad_interrupt>:
     1fa:	02 cf       	rjmp	.-508    	; 0x0 <__vectors>

000001fc <Set_drum_time_callback>:
	Encoder_init(Set_drum_time_callback,DRUM_SPEED_ENCODER_TIMER_NUMBER, 16);
	
}
static void Set_drum_time_callback(uint32_t dif_time)
{
	g_drum_time = dif_time;
     1fc:	60 93 7a 0f 	sts	0x0F7A, r22	; 0x800f7a <g_drum_time>
     200:	70 93 7b 0f 	sts	0x0F7B, r23	; 0x800f7b <g_drum_time+0x1>
     204:	80 93 7c 0f 	sts	0x0F7C, r24	; 0x800f7c <g_drum_time+0x2>
     208:	90 93 7d 0f 	sts	0x0F7D, r25	; 0x800f7d <g_drum_time+0x3>
     20c:	08 95       	ret

0000020e <Drum_speed_init>:
 * call back function
 * parameters@ difference time between every ISR For Drum
 * return@ Nothing
 */
void Drum_speed_init(void){
	Encoder_init(Set_drum_time_callback,DRUM_SPEED_ENCODER_TIMER_NUMBER, 16);
     20e:	40 e1       	ldi	r20, 0x10	; 16
     210:	50 e0       	ldi	r21, 0x00	; 0
     212:	65 e0       	ldi	r22, 0x05	; 5
     214:	8e ef       	ldi	r24, 0xFE	; 254
     216:	90 e0       	ldi	r25, 0x00	; 0
     218:	01 c0       	rjmp	.+2      	; 0x21c <Encoder_init>
     21a:	08 95       	ret

0000021c <Encoder_init>:
 */

void Encoder_init(void (*pISR_callback)(uint32_t),uint8_t timer_number,uint16_t ticks_number )
{
	//encoder of Drum on timer 5
	Encoder_1_confg.timer_number = timer_number;
     21c:	ee e7       	ldi	r30, 0x7E	; 126
     21e:	ff e0       	ldi	r31, 0x0F	; 15
     220:	64 83       	std	Z+4, r22	; 0x04
	// number of ticks 16 to interrupted
	Encoder_1_confg.ticks = ticks_number;
     222:	51 83       	std	Z+1, r21	; 0x01
     224:	40 83       	st	Z, r20
	//Call back Function 
	Encoder_1_confg.isr_call_back = pISR_callback ; 
     226:	93 83       	std	Z+3, r25	; 0x03
     228:	82 83       	std	Z+2, r24	; 0x02
    timers_init(&Encoder_1_confg);
     22a:	cf 01       	movw	r24, r30
     22c:	0c 94 10 0c 	jmp	0x1820	; 0x1820 <timers_init>
     230:	08 95       	ret

00000232 <flowrate_feeding_callback>:
	/*
	*	this function is called back from the ISR to increment the liters counter .
	*/
  // call the feeding operation callback .
    // UART0_puts("FLOW_FEED FFFFFFFFFFFFFFFFFFFFFFFFF\n");
     feeding_operation_callback();
     232:	e0 91 83 0f 	lds	r30, 0x0F83	; 0x800f83 <feeding_operation_callback>
     236:	f0 91 84 0f 	lds	r31, 0x0F84	; 0x800f84 <feeding_operation_callback+0x1>
     23a:	19 95       	eicall
     23c:	08 95       	ret

0000023e <flowrate_outing_callback>:
	/*
	*	this function is called back from the isr to increment the liters counter .
	*/
  // call the feeding operation callback .
  //UART0_puts("FLOW_OUT OOOOOOOOOOOOOOOOOOOOOOOOOOOO\n");
     out_operation_callback();
     23e:	e0 91 85 0f 	lds	r30, 0x0F85	; 0x800f85 <out_operation_callback>
     242:	f0 91 86 0f 	lds	r31, 0x0F86	; 0x800f86 <out_operation_callback+0x1>
     246:	19 95       	eicall
     248:	08 95       	ret

0000024a <Flow_rate_init>:
// struts to hold the timers config .
g_Timer_Config feeding_configeration;
g_Timer_Config outing_configeration;

void Flow_rate_init(void (*callback1)(void) , void (*callback2)(void)) 
{
     24a:	ef 92       	push	r14
     24c:	ff 92       	push	r15
     24e:	0f 93       	push	r16
     250:	1f 93       	push	r17
     252:	cf 93       	push	r28
     254:	df 93       	push	r29
     256:	7c 01       	movw	r14, r24
     258:	8b 01       	movw	r16, r22
	
	feeding_configeration.ticks = TICKS_FOR_HALF_LITER ;
     25a:	ec e8       	ldi	r30, 0x8C	; 140
     25c:	ff e0       	ldi	r31, 0x0F	; 15
     25e:	c5 e0       	ldi	r28, 0x05	; 5
     260:	d0 e0       	ldi	r29, 0x00	; 0
     262:	d1 83       	std	Z+1, r29	; 0x01
     264:	c0 83       	st	Z, r28
	feeding_configeration.timer_number = FLOWRATE_SENSOR_1_TIMER_NUMBER ;//flowrate1_timer_number
     266:	84 e0       	ldi	r24, 0x04	; 4
     268:	84 83       	std	Z+4, r24	; 0x04
	feeding_configeration.isr_call_back = flowrate_feeding_callback ;
     26a:	89 e1       	ldi	r24, 0x19	; 25
     26c:	91 e0       	ldi	r25, 0x01	; 1
     26e:	93 83       	std	Z+3, r25	; 0x03
     270:	82 83       	std	Z+2, r24	; 0x02
	// initialize the needed timer with the previous config .
    timers_init(&feeding_configeration);
     272:	cf 01       	movw	r24, r30
     274:	0e 94 10 0c 	call	0x1820	; 0x1820 <timers_init>
	// initialize other timer for the second flow rate .
	outing_configeration.ticks = TICKS_FOR_HALF_LITER ;
     278:	e7 e8       	ldi	r30, 0x87	; 135
     27a:	ff e0       	ldi	r31, 0x0F	; 15
     27c:	d1 83       	std	Z+1, r29	; 0x01
     27e:	c0 83       	st	Z, r28
	outing_configeration.timer_number = FLOWRATE_SENSOR_2_TIMER_NUMBER ;//flowrate2_timer_number
     280:	83 e0       	ldi	r24, 0x03	; 3
     282:	84 83       	std	Z+4, r24	; 0x04
	outing_configeration.isr_call_back = flowrate_outing_callback ;
     284:	8f e1       	ldi	r24, 0x1F	; 31
     286:	91 e0       	ldi	r25, 0x01	; 1
     288:	93 83       	std	Z+3, r25	; 0x03
     28a:	82 83       	std	Z+2, r24	; 0x02
	
	// initialize the needed timer with the previous config .
	timers_init(&outing_configeration);
     28c:	cf 01       	movw	r24, r30
     28e:	0e 94 10 0c 	call	0x1820	; 0x1820 <timers_init>
	feeding_operation_callback = callback1;
     292:	f0 92 84 0f 	sts	0x0F84, r15	; 0x800f84 <feeding_operation_callback+0x1>
     296:	e0 92 83 0f 	sts	0x0F83, r14	; 0x800f83 <feeding_operation_callback>
	out_operation_callback = callback2 ;
     29a:	10 93 86 0f 	sts	0x0F86, r17	; 0x800f86 <out_operation_callback+0x1>
     29e:	00 93 85 0f 	sts	0x0F85, r16	; 0x800f85 <out_operation_callback>
}
     2a2:	df 91       	pop	r29
     2a4:	cf 91       	pop	r28
     2a6:	1f 91       	pop	r17
     2a8:	0f 91       	pop	r16
     2aa:	ff 90       	pop	r15
     2ac:	ef 90       	pop	r14
     2ae:	08 95       	ret

000002b0 <Inverter_pre_transmition>:
 * set the enable pin for modbus to start send
 * parameters  Nothing
 * return Nothing
 */
void Inverter_pre_transmition(void) {
	Modbus_change_state(INVERTER, HIGH);
     2b0:	61 e0       	ldi	r22, 0x01	; 1
     2b2:	81 e0       	ldi	r24, 0x01	; 1
     2b4:	0c 94 f3 0b 	jmp	0x17e6	; 0x17e6 <Modbus_change_state>
     2b8:	08 95       	ret

000002ba <Inverter_post_transmition>:
 * Clear the enable pin for modbus to start send
 * parameters  Nothing
 * return Nothing
 */
void Inverter_post_transmition(void) {
	Modbus_change_state(INVERTER, LOW);
     2ba:	60 e0       	ldi	r22, 0x00	; 0
     2bc:	81 e0       	ldi	r24, 0x01	; 1
     2be:	0c 94 f3 0b 	jmp	0x17e6	; 0x17e6 <Modbus_change_state>
     2c2:	08 95       	ret

000002c4 <Inverter_init>:
 */
void Inverter_init( UART_Modules uart_n, uint32_t baudrate, uint8_t slave_id )
{
	
	// Modbus Parameters
	s_inv_mod_confg.uart_num = uart_n;
     2c4:	ea e7       	ldi	r30, 0x7A	; 122
     2c6:	f4 e0       	ldi	r31, 0x04	; 4
     2c8:	81 83       	std	Z+1, r24	; 0x01
	s_inv_mod_confg.baud_rate =  baudrate;
     2ca:	42 83       	std	Z+2, r20	; 0x02
     2cc:	53 83       	std	Z+3, r21	; 0x03
     2ce:	64 83       	std	Z+4, r22	; 0x04
     2d0:	75 83       	std	Z+5, r23	; 0x05
	s_inv_mod_confg.slave_address = slave_id;
     2d2:	20 83       	st	Z, r18
	s_inv_mod_confg.post_transmission = Inverter_post_transmition;
     2d4:	8d e5       	ldi	r24, 0x5D	; 93
     2d6:	91 e0       	ldi	r25, 0x01	; 1
     2d8:	91 87       	std	Z+9, r25	; 0x09
     2da:	80 87       	std	Z+8, r24	; 0x08
	s_inv_mod_confg.pre_transmission = Inverter_pre_transmition;
     2dc:	88 e5       	ldi	r24, 0x58	; 88
     2de:	91 e0       	ldi	r25, 0x01	; 1
     2e0:	97 83       	std	Z+7, r25	; 0x07
     2e2:	86 83       	std	Z+6, r24	; 0x06
// 	UART0_puts("slave id ");
// 	UART0_OutUDec(slave_id);

	// init the mod bus on Mod Bus
	
	Modbus_init(INVERTER, &s_inv_mod_confg);
     2e4:	bf 01       	movw	r22, r30
     2e6:	81 e0       	ldi	r24, 0x01	; 1
     2e8:	e4 c6       	rjmp	.+3528   	; 0x10b2 <Modbus_init>
     2ea:	08 95       	ret

000002ec <Modbus_idle_task>:
	for(uint8_t i=0;i<QTY;i++){
		Modbus_Set_transmit_buffer(LCD,i, (*(pData+i)));
	}
	return Modbus_Write_multiple_registers(LCD,address,QTY);
	
}
     2ec:	80 e0       	ldi	r24, 0x00	; 0
     2ee:	90 e0       	ldi	r25, 0x00	; 0
     2f0:	0c 94 d3 1b 	jmp	0x37a6	; 0x37a6 <vTaskDelay>
     2f4:	08 95       	ret

000002f6 <LCD_post_transmission>:
     2f6:	60 e0       	ldi	r22, 0x00	; 0
     2f8:	80 e0       	ldi	r24, 0x00	; 0
     2fa:	0c 94 f3 0b 	jmp	0x17e6	; 0x17e6 <Modbus_change_state>
     2fe:	08 95       	ret

00000300 <LCD_pre_transmission>:
     300:	61 e0       	ldi	r22, 0x01	; 1
     302:	80 e0       	ldi	r24, 0x00	; 0
     304:	0c 94 f3 0b 	jmp	0x17e6	; 0x17e6 <Modbus_change_state>
     308:	08 95       	ret

0000030a <Lcd_init>:
     30a:	e6 e8       	ldi	r30, 0x86	; 134
     30c:	f4 e0       	ldi	r31, 0x04	; 4
     30e:	20 83       	st	Z, r18
     310:	81 83       	std	Z+1, r24	; 0x01
     312:	42 83       	std	Z+2, r20	; 0x02
     314:	53 83       	std	Z+3, r21	; 0x03
     316:	64 83       	std	Z+4, r22	; 0x04
     318:	75 83       	std	Z+5, r23	; 0x05
     31a:	80 e8       	ldi	r24, 0x80	; 128
     31c:	91 e0       	ldi	r25, 0x01	; 1
     31e:	97 83       	std	Z+7, r25	; 0x07
     320:	86 83       	std	Z+6, r24	; 0x06
     322:	8b e7       	ldi	r24, 0x7B	; 123
     324:	91 e0       	ldi	r25, 0x01	; 1
     326:	91 87       	std	Z+9, r25	; 0x09
     328:	80 87       	std	Z+8, r24	; 0x08
     32a:	86 e7       	ldi	r24, 0x76	; 118
     32c:	91 e0       	ldi	r25, 0x01	; 1
     32e:	93 87       	std	Z+11, r25	; 0x0b
     330:	82 87       	std	Z+10, r24	; 0x0a
     332:	bf 01       	movw	r22, r30
     334:	80 e0       	ldi	r24, 0x00	; 0
     336:	bd c6       	rjmp	.+3450   	; 0x10b2 <Modbus_init>
     338:	08 95       	ret

0000033a <Lcd_Read>:
     33a:	cf 93       	push	r28
     33c:	df 93       	push	r29
     33e:	eb 01       	movw	r28, r22
     340:	41 e0       	ldi	r20, 0x01	; 1
     342:	50 e0       	ldi	r21, 0x00	; 0
     344:	bc 01       	movw	r22, r24
     346:	80 e0       	ldi	r24, 0x00	; 0
     348:	ec d7       	rcall	.+4056   	; 0x1322 <Modbus_Read_holding_registers>
     34a:	81 11       	cpse	r24, r1
     34c:	04 c0       	rjmp	.+8      	; 0x356 <Lcd_Read+0x1c>
     34e:	60 e0       	ldi	r22, 0x00	; 0
     350:	a4 d7       	rcall	.+3912   	; 0x129a <Modbus_Get_response_buffer>
     352:	99 83       	std	Y+1, r25	; 0x01
     354:	88 83       	st	Y, r24
     356:	89 e0       	ldi	r24, 0x09	; 9
     358:	90 e0       	ldi	r25, 0x00	; 0
     35a:	df 91       	pop	r29
     35c:	cf 91       	pop	r28
     35e:	08 95       	ret

00000360 <Lcd_Write>:
     360:	cf 93       	push	r28
     362:	df 93       	push	r29
     364:	ec 01       	movw	r28, r24
     366:	ab 01       	movw	r20, r22
     368:	60 e0       	ldi	r22, 0x00	; 0
     36a:	80 e0       	ldi	r24, 0x00	; 0
     36c:	b9 d7       	rcall	.+3954   	; 0x12e0 <Modbus_Set_transmit_buffer>
     36e:	41 e0       	ldi	r20, 0x01	; 1
     370:	50 e0       	ldi	r21, 0x00	; 0
     372:	be 01       	movw	r22, r28
     374:	80 e0       	ldi	r24, 0x00	; 0
     376:	0e 94 c9 09 	call	0x1392	; 0x1392 <Modbus_Write_multiple_registers>
     37a:	df 91       	pop	r29
     37c:	cf 91       	pop	r28
     37e:	08 95       	ret

00000380 <lcd_Jump_to>:
************************************************************************************************************/

// jump to spacific image
uint8_t lcd_Jump_to(uint16_t pic_id){ // v
	
		Modbus_Set_transmit_buffer(LCD,0,pic_id);
     380:	ac 01       	movw	r20, r24
     382:	60 e0       	ldi	r22, 0x00	; 0
     384:	80 e0       	ldi	r24, 0x00	; 0
     386:	ac d7       	rcall	.+3928   	; 0x12e0 <Modbus_Set_transmit_buffer>
		return Modbus_Our_write_multiple_coils(LCD,LCD_CURRENT_PIC_REG, 1);
     388:	41 e0       	ldi	r20, 0x01	; 1
     38a:	50 e0       	ldi	r21, 0x00	; 0
     38c:	63 e0       	ldi	r22, 0x03	; 3
     38e:	70 e0       	ldi	r23, 0x00	; 0
     390:	80 e0       	ldi	r24, 0x00	; 0
     392:	e3 c7       	rjmp	.+4038   	; 0x135a <Modbus_Our_write_multiple_coils>
		
}
     394:	08 95       	ret

00000396 <Modbus_mster_transaction>:
		g_mod1_write_address = u16WriteAddress;
		g_mod1_write_qty = u16BitQty;
		return Modbus_mster_transaction(device, WRITE_MULTIPLE_COILS);
	}
	return INVALID_DEVICE; //error
}
     396:	8f 92       	push	r8
     398:	9f 92       	push	r9
     39a:	af 92       	push	r10
     39c:	bf 92       	push	r11
     39e:	df 92       	push	r13
     3a0:	ef 92       	push	r14
     3a2:	ff 92       	push	r15
     3a4:	0f 93       	push	r16
     3a6:	1f 93       	push	r17
     3a8:	cf 93       	push	r28
     3aa:	df 93       	push	r29
     3ac:	cd b7       	in	r28, 0x3d	; 61
     3ae:	de b7       	in	r29, 0x3e	; 62
     3b0:	da 95       	dec	r29
     3b2:	0f b6       	in	r0, 0x3f	; 63
     3b4:	f8 94       	cli
     3b6:	de bf       	out	0x3e, r29	; 62
     3b8:	0f be       	out	0x3f, r0	; 63
     3ba:	cd bf       	out	0x3d, r28	; 61
     3bc:	d6 2e       	mov	r13, r22
     3be:	81 11       	cpse	r24, r1
     3c0:	f5 c2       	rjmp	.+1514   	; 0x9ac <__LOCK_REGION_LENGTH__+0x5ac>
     3c2:	80 91 c8 06 	lds	r24, 0x06C8	; 0x8006c8 <g_mod0_slave>
     3c6:	89 83       	std	Y+1, r24	; 0x01
     3c8:	2f ef       	ldi	r18, 0xFF	; 255
     3ca:	62 13       	cpse	r22, r18
     3cc:	06 c0       	rjmp	.+12     	; 0x3da <Modbus_mster_transaction+0x44>
     3ce:	8f e0       	ldi	r24, 0x0F	; 15
     3d0:	8a 83       	std	Y+2, r24	; 0x02
     3d2:	68 94       	set
     3d4:	bb 24       	eor	r11, r11
     3d6:	b1 f8       	bld	r11, 1
     3d8:	32 c0       	rjmp	.+100    	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
     3da:	6a 83       	std	Y+2, r22	; 0x02
     3dc:	81 e0       	ldi	r24, 0x01	; 1
     3de:	68 17       	cp	r22, r24
     3e0:	b8 f0       	brcs	.+46     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
     3e2:	94 e0       	ldi	r25, 0x04	; 4
     3e4:	96 17       	cp	r25, r22
     3e6:	18 f4       	brcc	.+6      	; 0x3ee <Modbus_mster_transaction+0x58>
     3e8:	a7 e1       	ldi	r26, 0x17	; 23
     3ea:	6a 13       	cpse	r22, r26
     3ec:	11 c0       	rjmp	.+34     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
     3ee:	80 91 c6 06 	lds	r24, 0x06C6	; 0x8006c6 <g_mod0_read_address>
     3f2:	90 91 c7 06 	lds	r25, 0x06C7	; 0x8006c7 <g_mod0_read_address+0x1>
     3f6:	9b 83       	std	Y+3, r25	; 0x03
     3f8:	8c 83       	std	Y+4, r24	; 0x04
     3fa:	80 91 c4 06 	lds	r24, 0x06C4	; 0x8006c4 <g_mod0_read_qty>
     3fe:	90 91 c5 06 	lds	r25, 0x06C5	; 0x8006c5 <g_mod0_read_qty+0x1>
     402:	9d 83       	std	Y+5, r25	; 0x05
     404:	8e 83       	std	Y+6, r24	; 0x06
     406:	0f 2e       	mov	r0, r31
     408:	f6 e0       	ldi	r31, 0x06	; 6
     40a:	bf 2e       	mov	r11, r31
     40c:	f0 2d       	mov	r31, r0
     40e:	03 c0       	rjmp	.+6      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
     410:	68 94       	set
     412:	bb 24       	eor	r11, r11
     414:	b1 f8       	bld	r11, 1
     416:	b0 e1       	ldi	r27, 0x10	; 16
     418:	bd 15       	cp	r27, r13
     41a:	40 f0       	brcs	.+16     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
     41c:	ef e0       	ldi	r30, 0x0F	; 15
     41e:	de 16       	cp	r13, r30
     420:	70 f4       	brcc	.+28     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
     422:	8b ef       	ldi	r24, 0xFB	; 251
     424:	8d 0d       	add	r24, r13
     426:	82 30       	cpi	r24, 0x02	; 2
     428:	00 f5       	brcc	.+64     	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
     42a:	09 c0       	rjmp	.+18     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
     42c:	f6 e1       	ldi	r31, 0x16	; 22
     42e:	df 16       	cp	r13, r31
     430:	e0 f0       	brcs	.+56     	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
     432:	27 e1       	ldi	r18, 0x17	; 23
     434:	2d 15       	cp	r18, r13
     436:	18 f4       	brcc	.+6      	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
     438:	8f ef       	ldi	r24, 0xFF	; 255
     43a:	d8 12       	cpse	r13, r24
     43c:	16 c0       	rjmp	.+44     	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
     43e:	90 91 42 06 	lds	r25, 0x0642	; 0x800642 <g_mod0_write_address>
     442:	80 91 43 06 	lds	r24, 0x0643	; 0x800643 <g_mod0_write_address+0x1>
     446:	e1 e0       	ldi	r30, 0x01	; 1
     448:	f0 e0       	ldi	r31, 0x00	; 0
     44a:	ec 0f       	add	r30, r28
     44c:	fd 1f       	adc	r31, r29
     44e:	eb 0d       	add	r30, r11
     450:	f1 1d       	adc	r31, r1
     452:	80 83       	st	Z, r24
     454:	81 e0       	ldi	r24, 0x01	; 1
     456:	8b 0d       	add	r24, r11
     458:	e1 e0       	ldi	r30, 0x01	; 1
     45a:	f0 e0       	ldi	r31, 0x00	; 0
     45c:	ec 0f       	add	r30, r28
     45e:	fd 1f       	adc	r31, r29
     460:	e8 0f       	add	r30, r24
     462:	f1 1d       	adc	r31, r1
     464:	b3 94       	inc	r11
     466:	b3 94       	inc	r11
     468:	90 83       	st	Z, r25
     46a:	90 e1       	ldi	r25, 0x10	; 16
     46c:	d9 16       	cp	r13, r25
     46e:	09 f4       	brne	.+2      	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
     470:	ad c0       	rjmp	.+346    	; 0x5cc <__LOCK_REGION_LENGTH__+0x1cc>
     472:	9d 15       	cp	r25, r13
     474:	58 f0       	brcs	.+22     	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
     476:	a6 e0       	ldi	r26, 0x06	; 6
     478:	da 16       	cp	r13, r26
     47a:	61 f1       	breq	.+88     	; 0x4d4 <__LOCK_REGION_LENGTH__+0xd4>
     47c:	bf e0       	ldi	r27, 0x0F	; 15
     47e:	db 16       	cp	r13, r27
     480:	09 f4       	brne	.+2      	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
     482:	41 c0       	rjmp	.+130    	; 0x506 <__LOCK_REGION_LENGTH__+0x106>
     484:	e5 e0       	ldi	r30, 0x05	; 5
     486:	de 12       	cpse	r13, r30
     488:	1a c1       	rjmp	.+564    	; 0x6be <__LOCK_REGION_LENGTH__+0x2be>
     48a:	0d c0       	rjmp	.+26     	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
     48c:	f7 e1       	ldi	r31, 0x17	; 23
     48e:	df 16       	cp	r13, r31
     490:	09 f4       	brne	.+2      	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
     492:	9c c0       	rjmp	.+312    	; 0x5cc <__LOCK_REGION_LENGTH__+0x1cc>
     494:	2f ef       	ldi	r18, 0xFF	; 255
     496:	d2 16       	cp	r13, r18
     498:	09 f4       	brne	.+2      	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
     49a:	98 c0       	rjmp	.+304    	; 0x5cc <__LOCK_REGION_LENGTH__+0x1cc>
     49c:	86 e1       	ldi	r24, 0x16	; 22
     49e:	d8 16       	cp	r13, r24
     4a0:	09 f4       	brne	.+2      	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
     4a2:	df c0       	rjmp	.+446    	; 0x662 <__LOCK_REGION_LENGTH__+0x262>
     4a4:	0c c1       	rjmp	.+536    	; 0x6be <__LOCK_REGION_LENGTH__+0x2be>
     4a6:	90 91 40 06 	lds	r25, 0x0640	; 0x800640 <g_mod0_write_qty>
     4aa:	80 91 41 06 	lds	r24, 0x0641	; 0x800641 <g_mod0_write_qty+0x1>
     4ae:	e1 e0       	ldi	r30, 0x01	; 1
     4b0:	f0 e0       	ldi	r31, 0x00	; 0
     4b2:	ec 0f       	add	r30, r28
     4b4:	fd 1f       	adc	r31, r29
     4b6:	eb 0d       	add	r30, r11
     4b8:	f1 1d       	adc	r31, r1
     4ba:	80 83       	st	Z, r24
     4bc:	81 e0       	ldi	r24, 0x01	; 1
     4be:	8b 0d       	add	r24, r11
     4c0:	e1 e0       	ldi	r30, 0x01	; 1
     4c2:	f0 e0       	ldi	r31, 0x00	; 0
     4c4:	ec 0f       	add	r30, r28
     4c6:	fd 1f       	adc	r31, r29
     4c8:	e8 0f       	add	r30, r24
     4ca:	f1 1d       	adc	r31, r1
     4cc:	b3 94       	inc	r11
     4ce:	b3 94       	inc	r11
     4d0:	90 83       	st	Z, r25
     4d2:	f5 c0       	rjmp	.+490    	; 0x6be <__LOCK_REGION_LENGTH__+0x2be>
     4d4:	e0 ec       	ldi	r30, 0xC0	; 192
     4d6:	f5 e0       	ldi	r31, 0x05	; 5
     4d8:	80 81       	ld	r24, Z
     4da:	91 81       	ldd	r25, Z+1	; 0x01
     4dc:	a1 e0       	ldi	r26, 0x01	; 1
     4de:	b0 e0       	ldi	r27, 0x00	; 0
     4e0:	ac 0f       	add	r26, r28
     4e2:	bd 1f       	adc	r27, r29
     4e4:	ab 0d       	add	r26, r11
     4e6:	b1 1d       	adc	r27, r1
     4e8:	9c 93       	st	X, r25
     4ea:	20 81       	ld	r18, Z
     4ec:	31 81       	ldd	r19, Z+1	; 0x01
     4ee:	81 e0       	ldi	r24, 0x01	; 1
     4f0:	8b 0d       	add	r24, r11
     4f2:	e1 e0       	ldi	r30, 0x01	; 1
     4f4:	f0 e0       	ldi	r31, 0x00	; 0
     4f6:	ec 0f       	add	r30, r28
     4f8:	fd 1f       	adc	r31, r29
     4fa:	e8 0f       	add	r30, r24
     4fc:	f1 1d       	adc	r31, r1
     4fe:	b3 94       	inc	r11
     500:	b3 94       	inc	r11
     502:	20 83       	st	Z, r18
     504:	dc c0       	rjmp	.+440    	; 0x6be <__LOCK_REGION_LENGTH__+0x2be>
     506:	80 91 40 06 	lds	r24, 0x0640	; 0x800640 <g_mod0_write_qty>
     50a:	90 91 41 06 	lds	r25, 0x0641	; 0x800641 <g_mod0_write_qty+0x1>
     50e:	e1 e0       	ldi	r30, 0x01	; 1
     510:	f0 e0       	ldi	r31, 0x00	; 0
     512:	ec 0f       	add	r30, r28
     514:	fd 1f       	adc	r31, r29
     516:	eb 0d       	add	r30, r11
     518:	f1 1d       	adc	r31, r1
     51a:	90 83       	st	Z, r25
     51c:	32 e0       	ldi	r19, 0x02	; 2
     51e:	3b 0d       	add	r19, r11
     520:	21 e0       	ldi	r18, 0x01	; 1
     522:	2b 0d       	add	r18, r11
     524:	e1 e0       	ldi	r30, 0x01	; 1
     526:	f0 e0       	ldi	r31, 0x00	; 0
     528:	ec 0f       	add	r30, r28
     52a:	fd 1f       	adc	r31, r29
     52c:	e2 0f       	add	r30, r18
     52e:	f1 1d       	adc	r31, r1
     530:	80 83       	st	Z, r24
     532:	ac 01       	movw	r20, r24
     534:	47 70       	andi	r20, 0x07	; 7
     536:	55 27       	eor	r21, r21
     538:	45 2b       	or	r20, r21
     53a:	49 f0       	breq	.+18     	; 0x54e <__LOCK_REGION_LENGTH__+0x14e>
     53c:	96 95       	lsr	r25
     53e:	87 95       	ror	r24
     540:	96 95       	lsr	r25
     542:	87 95       	ror	r24
     544:	96 95       	lsr	r25
     546:	87 95       	ror	r24
     548:	21 e0       	ldi	r18, 0x01	; 1
     54a:	28 0f       	add	r18, r24
     54c:	07 c0       	rjmp	.+14     	; 0x55c <__LOCK_REGION_LENGTH__+0x15c>
     54e:	96 95       	lsr	r25
     550:	87 95       	ror	r24
     552:	96 95       	lsr	r25
     554:	87 95       	ror	r24
     556:	96 95       	lsr	r25
     558:	87 95       	ror	r24
     55a:	28 2f       	mov	r18, r24
     55c:	93 e0       	ldi	r25, 0x03	; 3
     55e:	b9 0e       	add	r11, r25
     560:	fe 01       	movw	r30, r28
     562:	e3 0f       	add	r30, r19
     564:	f1 1d       	adc	r31, r1
     566:	21 83       	std	Z+1, r18	; 0x01
     568:	22 23       	and	r18, r18
     56a:	09 f4       	brne	.+2      	; 0x56e <__LOCK_REGION_LENGTH__+0x16e>
     56c:	a8 c0       	rjmp	.+336    	; 0x6be <__LOCK_REGION_LENGTH__+0x2be>
     56e:	80 e0       	ldi	r24, 0x00	; 0
     570:	98 2f       	mov	r25, r24
     572:	91 70       	andi	r25, 0x01	; 1
     574:	80 ff       	sbrs	r24, 0
     576:	03 c0       	rjmp	.+6      	; 0x57e <__LOCK_REGION_LENGTH__+0x17e>
     578:	91 30       	cpi	r25, 0x01	; 1
     57a:	99 f0       	breq	.+38     	; 0x5a2 <__LOCK_REGION_LENGTH__+0x1a2>
     57c:	23 c0       	rjmp	.+70     	; 0x5c4 <__LOCK_REGION_LENGTH__+0x1c4>
     57e:	e8 2f       	mov	r30, r24
     580:	e6 95       	lsr	r30
     582:	f0 e0       	ldi	r31, 0x00	; 0
     584:	ee 0f       	add	r30, r30
     586:	ff 1f       	adc	r31, r31
     588:	e0 54       	subi	r30, 0x40	; 64
     58a:	fa 4f       	sbci	r31, 0xFA	; 250
     58c:	40 81       	ld	r20, Z
     58e:	51 81       	ldd	r21, Z+1	; 0x01
     590:	e1 e0       	ldi	r30, 0x01	; 1
     592:	f0 e0       	ldi	r31, 0x00	; 0
     594:	ec 0f       	add	r30, r28
     596:	fd 1f       	adc	r31, r29
     598:	eb 0d       	add	r30, r11
     59a:	f1 1d       	adc	r31, r1
     59c:	40 83       	st	Z, r20
     59e:	b3 94       	inc	r11
     5a0:	11 c0       	rjmp	.+34     	; 0x5c4 <__LOCK_REGION_LENGTH__+0x1c4>
     5a2:	e8 2f       	mov	r30, r24
     5a4:	e6 95       	lsr	r30
     5a6:	f0 e0       	ldi	r31, 0x00	; 0
     5a8:	ee 0f       	add	r30, r30
     5aa:	ff 1f       	adc	r31, r31
     5ac:	e0 54       	subi	r30, 0x40	; 64
     5ae:	fa 4f       	sbci	r31, 0xFA	; 250
     5b0:	40 81       	ld	r20, Z
     5b2:	51 81       	ldd	r21, Z+1	; 0x01
     5b4:	e1 e0       	ldi	r30, 0x01	; 1
     5b6:	f0 e0       	ldi	r31, 0x00	; 0
     5b8:	ec 0f       	add	r30, r28
     5ba:	fd 1f       	adc	r31, r29
     5bc:	eb 0d       	add	r30, r11
     5be:	f1 1d       	adc	r31, r1
     5c0:	50 83       	st	Z, r21
     5c2:	b3 94       	inc	r11
     5c4:	8f 5f       	subi	r24, 0xFF	; 255
     5c6:	28 13       	cpse	r18, r24
     5c8:	d3 cf       	rjmp	.-90     	; 0x570 <__LOCK_REGION_LENGTH__+0x170>
     5ca:	79 c0       	rjmp	.+242    	; 0x6be <__LOCK_REGION_LENGTH__+0x2be>
     5cc:	60 91 40 06 	lds	r22, 0x0640	; 0x800640 <g_mod0_write_qty>
     5d0:	70 91 41 06 	lds	r23, 0x0641	; 0x800641 <g_mod0_write_qty+0x1>
     5d4:	e1 e0       	ldi	r30, 0x01	; 1
     5d6:	f0 e0       	ldi	r31, 0x00	; 0
     5d8:	ec 0f       	add	r30, r28
     5da:	fd 1f       	adc	r31, r29
     5dc:	eb 0d       	add	r30, r11
     5de:	f1 1d       	adc	r31, r1
     5e0:	70 83       	st	Z, r23
     5e2:	81 e0       	ldi	r24, 0x01	; 1
     5e4:	8b 0d       	add	r24, r11
     5e6:	e1 e0       	ldi	r30, 0x01	; 1
     5e8:	f0 e0       	ldi	r31, 0x00	; 0
     5ea:	ec 0f       	add	r30, r28
     5ec:	fd 1f       	adc	r31, r29
     5ee:	e8 0f       	add	r30, r24
     5f0:	f1 1d       	adc	r31, r1
     5f2:	60 83       	st	Z, r22
     5f4:	82 e0       	ldi	r24, 0x02	; 2
     5f6:	8b 0d       	add	r24, r11
     5f8:	e1 e0       	ldi	r30, 0x01	; 1
     5fa:	f0 e0       	ldi	r31, 0x00	; 0
     5fc:	ec 0f       	add	r30, r28
     5fe:	fd 1f       	adc	r31, r29
     600:	e8 0f       	add	r30, r24
     602:	f1 1d       	adc	r31, r1
     604:	a3 e0       	ldi	r26, 0x03	; 3
     606:	ba 0e       	add	r11, r26
     608:	86 2f       	mov	r24, r22
     60a:	88 0f       	add	r24, r24
     60c:	80 83       	st	Z, r24
     60e:	77 27       	eor	r23, r23
     610:	16 16       	cp	r1, r22
     612:	17 06       	cpc	r1, r23
     614:	0c f0       	brlt	.+2      	; 0x618 <__LOCK_REGION_LENGTH__+0x218>
     616:	53 c0       	rjmp	.+166    	; 0x6be <__LOCK_REGION_LENGTH__+0x2be>
     618:	80 e0       	ldi	r24, 0x00	; 0
     61a:	90 e0       	ldi	r25, 0x00	; 0
     61c:	20 e0       	ldi	r18, 0x00	; 0
     61e:	88 0f       	add	r24, r24
     620:	99 1f       	adc	r25, r25
     622:	fc 01       	movw	r30, r24
     624:	e0 54       	subi	r30, 0x40	; 64
     626:	fa 4f       	sbci	r31, 0xFA	; 250
     628:	80 81       	ld	r24, Z
     62a:	91 81       	ldd	r25, Z+1	; 0x01
     62c:	a1 e0       	ldi	r26, 0x01	; 1
     62e:	b0 e0       	ldi	r27, 0x00	; 0
     630:	ac 0f       	add	r26, r28
     632:	bd 1f       	adc	r27, r29
     634:	ab 0d       	add	r26, r11
     636:	b1 1d       	adc	r27, r1
     638:	9c 93       	st	X, r25
     63a:	40 81       	ld	r20, Z
     63c:	51 81       	ldd	r21, Z+1	; 0x01
     63e:	81 e0       	ldi	r24, 0x01	; 1
     640:	8b 0d       	add	r24, r11
     642:	e1 e0       	ldi	r30, 0x01	; 1
     644:	f0 e0       	ldi	r31, 0x00	; 0
     646:	ec 0f       	add	r30, r28
     648:	fd 1f       	adc	r31, r29
     64a:	e8 0f       	add	r30, r24
     64c:	f1 1d       	adc	r31, r1
     64e:	b3 94       	inc	r11
     650:	b3 94       	inc	r11
     652:	40 83       	st	Z, r20
     654:	2f 5f       	subi	r18, 0xFF	; 255
     656:	82 2f       	mov	r24, r18
     658:	90 e0       	ldi	r25, 0x00	; 0
     65a:	86 17       	cp	r24, r22
     65c:	97 07       	cpc	r25, r23
     65e:	fc f2       	brlt	.-66     	; 0x61e <__LOCK_REGION_LENGTH__+0x21e>
     660:	2e c0       	rjmp	.+92     	; 0x6be <__LOCK_REGION_LENGTH__+0x2be>
     662:	e0 ec       	ldi	r30, 0xC0	; 192
     664:	f5 e0       	ldi	r31, 0x05	; 5
     666:	80 81       	ld	r24, Z
     668:	91 81       	ldd	r25, Z+1	; 0x01
     66a:	a1 e0       	ldi	r26, 0x01	; 1
     66c:	b0 e0       	ldi	r27, 0x00	; 0
     66e:	ac 0f       	add	r26, r28
     670:	bd 1f       	adc	r27, r29
     672:	ab 0d       	add	r26, r11
     674:	b1 1d       	adc	r27, r1
     676:	9c 93       	st	X, r25
     678:	80 81       	ld	r24, Z
     67a:	91 81       	ldd	r25, Z+1	; 0x01
     67c:	91 e0       	ldi	r25, 0x01	; 1
     67e:	9b 0d       	add	r25, r11
     680:	a1 e0       	ldi	r26, 0x01	; 1
     682:	b0 e0       	ldi	r27, 0x00	; 0
     684:	ac 0f       	add	r26, r28
     686:	bd 1f       	adc	r27, r29
     688:	a9 0f       	add	r26, r25
     68a:	b1 1d       	adc	r27, r1
     68c:	8c 93       	st	X, r24
     68e:	82 81       	ldd	r24, Z+2	; 0x02
     690:	93 81       	ldd	r25, Z+3	; 0x03
     692:	82 e0       	ldi	r24, 0x02	; 2
     694:	8b 0d       	add	r24, r11
     696:	a1 e0       	ldi	r26, 0x01	; 1
     698:	b0 e0       	ldi	r27, 0x00	; 0
     69a:	ac 0f       	add	r26, r28
     69c:	bd 1f       	adc	r27, r29
     69e:	a8 0f       	add	r26, r24
     6a0:	b1 1d       	adc	r27, r1
     6a2:	9c 93       	st	X, r25
     6a4:	22 81       	ldd	r18, Z+2	; 0x02
     6a6:	33 81       	ldd	r19, Z+3	; 0x03
     6a8:	83 e0       	ldi	r24, 0x03	; 3
     6aa:	8b 0d       	add	r24, r11
     6ac:	e1 e0       	ldi	r30, 0x01	; 1
     6ae:	f0 e0       	ldi	r31, 0x00	; 0
     6b0:	ec 0f       	add	r30, r28
     6b2:	fd 1f       	adc	r31, r29
     6b4:	e8 0f       	add	r30, r24
     6b6:	f1 1d       	adc	r31, r1
     6b8:	b4 e0       	ldi	r27, 0x04	; 4
     6ba:	bb 0e       	add	r11, r27
     6bc:	20 83       	st	Z, r18
     6be:	bb 20       	and	r11, r11
     6c0:	b9 f0       	breq	.+46     	; 0x6f0 <__LOCK_REGION_LENGTH__+0x2f0>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5f       	subi	r16, 0xFF	; 255
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ee 24       	eor	r14, r14
     6ca:	ea 94       	dec	r14
     6cc:	eb 0c       	add	r14, r11
     6ce:	f1 2c       	mov	r15, r1
     6d0:	ef ef       	ldi	r30, 0xFF	; 255
     6d2:	ee 1a       	sub	r14, r30
     6d4:	fe 0a       	sbc	r15, r30
     6d6:	e0 0e       	add	r14, r16
     6d8:	f1 1e       	adc	r15, r17
     6da:	8f ef       	ldi	r24, 0xFF	; 255
     6dc:	9f ef       	ldi	r25, 0xFF	; 255
     6de:	d8 01       	movw	r26, r16
     6e0:	6d 91       	ld	r22, X+
     6e2:	8d 01       	movw	r16, r26
     6e4:	0e 94 f4 21 	call	0x43e8	; 0x43e8 <crc16_update>
     6e8:	0e 15       	cp	r16, r14
     6ea:	1f 05       	cpc	r17, r15
     6ec:	c1 f7       	brne	.-16     	; 0x6de <__LOCK_REGION_LENGTH__+0x2de>
     6ee:	02 c0       	rjmp	.+4      	; 0x6f4 <__LOCK_REGION_LENGTH__+0x2f4>
     6f0:	8f ef       	ldi	r24, 0xFF	; 255
     6f2:	9f ef       	ldi	r25, 0xFF	; 255
     6f4:	ee 24       	eor	r14, r14
     6f6:	e3 94       	inc	r14
     6f8:	eb 0c       	add	r14, r11
     6fa:	e1 e0       	ldi	r30, 0x01	; 1
     6fc:	f0 e0       	ldi	r31, 0x00	; 0
     6fe:	ec 0f       	add	r30, r28
     700:	fd 1f       	adc	r31, r29
     702:	eb 0d       	add	r30, r11
     704:	f1 1d       	adc	r31, r1
     706:	80 83       	st	Z, r24
     708:	b3 94       	inc	r11
     70a:	b3 94       	inc	r11
     70c:	e1 e0       	ldi	r30, 0x01	; 1
     70e:	f0 e0       	ldi	r31, 0x00	; 0
     710:	ec 0f       	add	r30, r28
     712:	fd 1f       	adc	r31, r29
     714:	ee 0d       	add	r30, r14
     716:	f1 1d       	adc	r31, r1
     718:	90 83       	st	Z, r25
     71a:	e1 e0       	ldi	r30, 0x01	; 1
     71c:	f0 e0       	ldi	r31, 0x00	; 0
     71e:	ec 0f       	add	r30, r28
     720:	fd 1f       	adc	r31, r29
     722:	eb 0d       	add	r30, r11
     724:	f1 1d       	adc	r31, r1
     726:	10 82       	st	Z, r1
     728:	e0 91 b3 05 	lds	r30, 0x05B3	; 0x8005b3 <g_mod0_Serial_getc>
     72c:	f0 91 b4 05 	lds	r31, 0x05B4	; 0x8005b4 <g_mod0_Serial_getc+0x1>
     730:	19 95       	eicall
     732:	81 15       	cp	r24, r1
     734:	91 40       	sbci	r25, 0x01	; 1
     736:	c1 f7       	brne	.-16     	; 0x728 <__LOCK_REGION_LENGTH__+0x328>
     738:	e0 91 b9 05 	lds	r30, 0x05B9	; 0x8005b9 <g_mod0_pre_transmission>
     73c:	f0 91 ba 05 	lds	r31, 0x05BA	; 0x8005ba <g_mod0_pre_transmission+0x1>
     740:	30 97       	sbiw	r30, 0x00	; 0
     742:	09 f0       	breq	.+2      	; 0x746 <__LOCK_REGION_LENGTH__+0x346>
     744:	19 95       	eicall
     746:	bb 20       	and	r11, r11
     748:	a1 f0       	breq	.+40     	; 0x772 <__LOCK_REGION_LENGTH__+0x372>
     74a:	8e 01       	movw	r16, r28
     74c:	0f 5f       	subi	r16, 0xFF	; 255
     74e:	1f 4f       	sbci	r17, 0xFF	; 255
     750:	f1 2c       	mov	r15, r1
     752:	ef ef       	ldi	r30, 0xFF	; 255
     754:	ee 1a       	sub	r14, r30
     756:	fe 0a       	sbc	r15, r30
     758:	e0 0e       	add	r14, r16
     75a:	f1 1e       	adc	r15, r17
     75c:	e0 91 b5 05 	lds	r30, 0x05B5	; 0x8005b5 <g_mod0_Serial_putc>
     760:	f0 91 b6 05 	lds	r31, 0x05B6	; 0x8005b6 <g_mod0_Serial_putc+0x1>
     764:	d8 01       	movw	r26, r16
     766:	8d 91       	ld	r24, X+
     768:	8d 01       	movw	r16, r26
     76a:	19 95       	eicall
     76c:	0e 15       	cp	r16, r14
     76e:	1f 05       	cpc	r17, r15
     770:	a9 f7       	brne	.-22     	; 0x75c <__LOCK_REGION_LENGTH__+0x35c>
     772:	e0 91 b1 05 	lds	r30, 0x05B1	; 0x8005b1 <g_mod0_Serial_flush>
     776:	f0 91 b2 05 	lds	r31, 0x05B2	; 0x8005b2 <g_mod0_Serial_flush+0x1>
     77a:	19 95       	eicall
     77c:	ef e8       	ldi	r30, 0x8F	; 143
     77e:	f1 e0       	ldi	r31, 0x01	; 1
     780:	31 97       	sbiw	r30, 0x01	; 1
     782:	f1 f7       	brne	.-4      	; 0x780 <__LOCK_REGION_LENGTH__+0x380>
     784:	00 c0       	rjmp	.+0      	; 0x786 <__LOCK_REGION_LENGTH__+0x386>
     786:	00 00       	nop
     788:	e0 91 b7 05 	lds	r30, 0x05B7	; 0x8005b7 <g_mod0_post_transmission>
     78c:	f0 91 b8 05 	lds	r31, 0x05B8	; 0x8005b8 <g_mod0_post_transmission+0x1>
     790:	30 97       	sbiw	r30, 0x00	; 0
     792:	09 f0       	breq	.+2      	; 0x796 <__LOCK_REGION_LENGTH__+0x396>
     794:	19 95       	eicall
     796:	0e 94 15 22 	call	0x442a	; 0x442a <Get_millis>
     79a:	4b 01       	movw	r8, r22
     79c:	5c 01       	movw	r10, r24
     79e:	08 e0       	ldi	r16, 0x08	; 8
     7a0:	10 e0       	ldi	r17, 0x00	; 0
     7a2:	ed 2c       	mov	r14, r13
     7a4:	f1 2c       	mov	r15, r1
     7a6:	e0 91 af 05 	lds	r30, 0x05AF	; 0x8005af <g_mod0_Serial_available>
     7aa:	f0 91 b0 05 	lds	r31, 0x05B0	; 0x8005b0 <g_mod0_Serial_available+0x1>
     7ae:	19 95       	eicall
     7b0:	89 2b       	or	r24, r25
     7b2:	91 f0       	breq	.+36     	; 0x7d8 <__LOCK_REGION_LENGTH__+0x3d8>
     7b4:	dd 24       	eor	r13, r13
     7b6:	d3 94       	inc	r13
     7b8:	d1 0e       	add	r13, r17
     7ba:	e0 91 b3 05 	lds	r30, 0x05B3	; 0x8005b3 <g_mod0_Serial_getc>
     7be:	f0 91 b4 05 	lds	r31, 0x05B4	; 0x8005b4 <g_mod0_Serial_getc+0x1>
     7c2:	19 95       	eicall
     7c4:	e1 e0       	ldi	r30, 0x01	; 1
     7c6:	f0 e0       	ldi	r31, 0x00	; 0
     7c8:	ec 0f       	add	r30, r28
     7ca:	fd 1f       	adc	r31, r29
     7cc:	e1 0f       	add	r30, r17
     7ce:	f1 1d       	adc	r31, r1
     7d0:	80 83       	st	Z, r24
     7d2:	01 50       	subi	r16, 0x01	; 1
     7d4:	1d 2d       	mov	r17, r13
     7d6:	07 c0       	rjmp	.+14     	; 0x7e6 <__LOCK_REGION_LENGTH__+0x3e6>
     7d8:	e0 91 bb 05 	lds	r30, 0x05BB	; 0x8005bb <g_mod0_idle>
     7dc:	f0 91 bc 05 	lds	r31, 0x05BC	; 0x8005bc <g_mod0_idle+0x1>
     7e0:	30 97       	sbiw	r30, 0x00	; 0
     7e2:	09 f0       	breq	.+2      	; 0x7e6 <__LOCK_REGION_LENGTH__+0x3e6>
     7e4:	19 95       	eicall
     7e6:	15 30       	cpi	r17, 0x05	; 5
     7e8:	51 f5       	brne	.+84     	; 0x83e <__LOCK_REGION_LENGTH__+0x43e>
     7ea:	99 81       	ldd	r25, Y+1	; 0x01
     7ec:	80 91 c8 06 	lds	r24, 0x06C8	; 0x8006c8 <g_mod0_slave>
     7f0:	98 13       	cpse	r25, r24
     7f2:	41 c4       	rjmp	.+2178   	; 0x1076 <__LOCK_REGION_LENGTH__+0xc76>
     7f4:	8a 81       	ldd	r24, Y+2	; 0x02
     7f6:	28 2f       	mov	r18, r24
     7f8:	2f 77       	andi	r18, 0x7F	; 127
     7fa:	30 e0       	ldi	r19, 0x00	; 0
     7fc:	2e 15       	cp	r18, r14
     7fe:	3f 05       	cpc	r19, r15
     800:	09 f0       	breq	.+2      	; 0x804 <__LOCK_REGION_LENGTH__+0x404>
     802:	3b c4       	rjmp	.+2166   	; 0x107a <__LOCK_REGION_LENGTH__+0xc7a>
     804:	88 23       	and	r24, r24
     806:	24 f4       	brge	.+8      	; 0x810 <__LOCK_REGION_LENGTH__+0x410>
     808:	8b 81       	ldd	r24, Y+3	; 0x03
     80a:	88 23       	and	r24, r24
     80c:	e1 f1       	breq	.+120    	; 0x886 <__LOCK_REGION_LENGTH__+0x486>
     80e:	c9 c0       	rjmp	.+402    	; 0x9a2 <__LOCK_REGION_LENGTH__+0x5a2>
     810:	81 31       	cpi	r24, 0x11	; 17
     812:	58 f4       	brcc	.+22     	; 0x82a <__LOCK_REGION_LENGTH__+0x42a>
     814:	8f 30       	cpi	r24, 0x0F	; 15
     816:	08 f0       	brcs	.+2      	; 0x81a <__LOCK_REGION_LENGTH__+0x41a>
     818:	c0 c3       	rjmp	.+1920   	; 0xf9a <__LOCK_REGION_LENGTH__+0xb9a>
     81a:	81 30       	cpi	r24, 0x01	; 1
     81c:	80 f0       	brcs	.+32     	; 0x83e <__LOCK_REGION_LENGTH__+0x43e>
     81e:	85 30       	cpi	r24, 0x05	; 5
     820:	68 f0       	brcs	.+26     	; 0x83c <__LOCK_REGION_LENGTH__+0x43c>
     822:	87 30       	cpi	r24, 0x07	; 7
     824:	08 f4       	brcc	.+2      	; 0x828 <__LOCK_REGION_LENGTH__+0x428>
     826:	b9 c3       	rjmp	.+1906   	; 0xf9a <__LOCK_REGION_LENGTH__+0xb9a>
     828:	0a c0       	rjmp	.+20     	; 0x83e <__LOCK_REGION_LENGTH__+0x43e>
     82a:	87 31       	cpi	r24, 0x17	; 23
     82c:	39 f0       	breq	.+14     	; 0x83c <__LOCK_REGION_LENGTH__+0x43c>
     82e:	8f 3f       	cpi	r24, 0xFF	; 255
     830:	09 f4       	brne	.+2      	; 0x834 <__LOCK_REGION_LENGTH__+0x434>
     832:	b3 c3       	rjmp	.+1894   	; 0xf9a <__LOCK_REGION_LENGTH__+0xb9a>
     834:	86 31       	cpi	r24, 0x16	; 22
     836:	19 f4       	brne	.+6      	; 0x83e <__LOCK_REGION_LENGTH__+0x43e>
     838:	05 e0       	ldi	r16, 0x05	; 5
     83a:	b0 c3       	rjmp	.+1888   	; 0xf9c <__LOCK_REGION_LENGTH__+0xb9c>
     83c:	0b 81       	ldd	r16, Y+3	; 0x03
     83e:	0e 94 15 22 	call	0x442a	; 0x442a <Get_millis>
     842:	dc 01       	movw	r26, r24
     844:	cb 01       	movw	r24, r22
     846:	88 19       	sub	r24, r8
     848:	99 09       	sbc	r25, r9
     84a:	aa 09       	sbc	r26, r10
     84c:	bb 09       	sbc	r27, r11
     84e:	89 3c       	cpi	r24, 0xC9	; 201
     850:	91 05       	cpc	r25, r1
     852:	a1 05       	cpc	r26, r1
     854:	b1 05       	cpc	r27, r1
     856:	08 f4       	brcc	.+2      	; 0x85a <__LOCK_REGION_LENGTH__+0x45a>
     858:	06 c4       	rjmp	.+2060   	; 0x1066 <__LOCK_REGION_LENGTH__+0xc66>
     85a:	80 e0       	ldi	r24, 0x00	; 0
     85c:	92 e0       	ldi	r25, 0x02	; 2
     85e:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <UART0_puts>
     862:	01 11       	cpse	r16, r1
     864:	0c c4       	rjmp	.+2072   	; 0x107e <__LOCK_REGION_LENGTH__+0xc7e>
     866:	82 ee       	ldi	r24, 0xE2	; 226
     868:	81 11       	cpse	r24, r1
     86a:	9b c0       	rjmp	.+310    	; 0x9a2 <__LOCK_REGION_LENGTH__+0x5a2>
     86c:	15 30       	cpi	r17, 0x05	; 5
     86e:	08 f4       	brcc	.+2      	; 0x872 <__LOCK_REGION_LENGTH__+0x472>
     870:	b5 c3       	rjmp	.+1898   	; 0xfdc <__LOCK_REGION_LENGTH__+0xbdc>
     872:	a1 2e       	mov	r10, r17
     874:	b1 2c       	mov	r11, r1
     876:	75 01       	movw	r14, r10
     878:	f2 e0       	ldi	r31, 0x02	; 2
     87a:	ef 1a       	sub	r14, r31
     87c:	f1 08       	sbc	r15, r1
     87e:	1e 14       	cp	r1, r14
     880:	1f 04       	cpc	r1, r15
     882:	5c f0       	brlt	.+22     	; 0x89a <__LOCK_REGION_LENGTH__+0x49a>
     884:	9a c3       	rjmp	.+1844   	; 0xfba <__LOCK_REGION_LENGTH__+0xbba>
     886:	0f 2e       	mov	r0, r31
     888:	f3 e0       	ldi	r31, 0x03	; 3
     88a:	ef 2e       	mov	r14, r31
     88c:	f1 2c       	mov	r15, r1
     88e:	f0 2d       	mov	r31, r0
     890:	0f 2e       	mov	r0, r31
     892:	f5 e0       	ldi	r31, 0x05	; 5
     894:	af 2e       	mov	r10, r31
     896:	b1 2c       	mov	r11, r1
     898:	f0 2d       	mov	r31, r0
     89a:	20 e0       	ldi	r18, 0x00	; 0
     89c:	30 e0       	ldi	r19, 0x00	; 0
     89e:	8f ef       	ldi	r24, 0xFF	; 255
     8a0:	9f ef       	ldi	r25, 0xFF	; 255
     8a2:	10 e0       	ldi	r17, 0x00	; 0
     8a4:	e1 e0       	ldi	r30, 0x01	; 1
     8a6:	f0 e0       	ldi	r31, 0x00	; 0
     8a8:	ec 0f       	add	r30, r28
     8aa:	fd 1f       	adc	r31, r29
     8ac:	e2 0f       	add	r30, r18
     8ae:	f3 1f       	adc	r31, r19
     8b0:	60 81       	ld	r22, Z
     8b2:	0e 94 f4 21 	call	0x43e8	; 0x43e8 <crc16_update>
     8b6:	1f 5f       	subi	r17, 0xFF	; 255
     8b8:	21 2f       	mov	r18, r17
     8ba:	30 e0       	ldi	r19, 0x00	; 0
     8bc:	2e 15       	cp	r18, r14
     8be:	3f 05       	cpc	r19, r15
     8c0:	8c f3       	brlt	.-30     	; 0x8a4 <__LOCK_REGION_LENGTH__+0x4a4>
     8c2:	7d c3       	rjmp	.+1786   	; 0xfbe <__LOCK_REGION_LENGTH__+0xbbe>
     8c4:	89 2f       	mov	r24, r25
     8c6:	99 27       	eor	r25, r25
     8c8:	fe 01       	movw	r30, r28
     8ca:	ea 0d       	add	r30, r10
     8cc:	fb 1d       	adc	r31, r11
     8ce:	20 81       	ld	r18, Z
     8d0:	30 e0       	ldi	r19, 0x00	; 0
     8d2:	82 17       	cp	r24, r18
     8d4:	93 07       	cpc	r25, r19
     8d6:	09 f0       	breq	.+2      	; 0x8da <__LOCK_REGION_LENGTH__+0x4da>
     8d8:	7f c3       	rjmp	.+1790   	; 0xfd8 <__LOCK_REGION_LENGTH__+0xbd8>
     8da:	80 c3       	rjmp	.+1792   	; 0xfdc <__LOCK_REGION_LENGTH__+0xbdc>
     8dc:	9b 81       	ldd	r25, Y+3	; 0x03
     8de:	96 95       	lsr	r25
     8e0:	e9 f5       	brne	.+122    	; 0x95c <__LOCK_REGION_LENGTH__+0x55c>
     8e2:	80 e0       	ldi	r24, 0x00	; 0
     8e4:	5e c0       	rjmp	.+188    	; 0x9a2 <__LOCK_REGION_LENGTH__+0x5a2>
     8e6:	7b 81       	ldd	r23, Y+3	; 0x03
     8e8:	97 2f       	mov	r25, r23
     8ea:	96 95       	lsr	r25
     8ec:	09 f4       	brne	.+2      	; 0x8f0 <__LOCK_REGION_LENGTH__+0x4f0>
     8ee:	84 c3       	rjmp	.+1800   	; 0xff8 <__LOCK_REGION_LENGTH__+0xbf8>
     8f0:	fe 01       	movw	r30, r28
     8f2:	31 96       	adiw	r30, 0x01	; 1
     8f4:	40 e0       	ldi	r20, 0x00	; 0
     8f6:	50 e0       	ldi	r21, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	80 34       	cpi	r24, 0x40	; 64
     8fc:	70 f4       	brcc	.+28     	; 0x91a <__LOCK_REGION_LENGTH__+0x51a>
     8fe:	24 81       	ldd	r18, Z+4	; 0x04
     900:	30 e0       	ldi	r19, 0x00	; 0
     902:	32 2f       	mov	r19, r18
     904:	22 27       	eor	r18, r18
     906:	63 81       	ldd	r22, Z+3	; 0x03
     908:	26 2b       	or	r18, r22
     90a:	da 01       	movw	r26, r20
     90c:	aa 0f       	add	r26, r26
     90e:	bb 1f       	adc	r27, r27
     910:	ac 5b       	subi	r26, 0xBC	; 188
     912:	b9 4f       	sbci	r27, 0xF9	; 249
     914:	11 96       	adiw	r26, 0x01	; 1
     916:	3c 93       	st	X, r19
     918:	2e 93       	st	-X, r18
     91a:	8f 5f       	subi	r24, 0xFF	; 255
     91c:	4f 5f       	subi	r20, 0xFF	; 255
     91e:	5f 4f       	sbci	r21, 0xFF	; 255
     920:	32 96       	adiw	r30, 0x02	; 2
     922:	89 13       	cpse	r24, r25
     924:	ea cf       	rjmp	.-44     	; 0x8fa <__LOCK_REGION_LENGTH__+0x4fa>
     926:	8f ef       	ldi	r24, 0xFF	; 255
     928:	89 0f       	add	r24, r25
     92a:	80 93 bd 05 	sts	0x05BD, r24	; 0x8005bd <g_mod0_response_buffer_length>
     92e:	70 ff       	sbrs	r23, 0
     930:	35 c0       	rjmp	.+106    	; 0x99c <__LOCK_REGION_LENGTH__+0x59c>
     932:	90 34       	cpi	r25, 0x40	; 64
     934:	70 f4       	brcc	.+28     	; 0x952 <__LOCK_REGION_LENGTH__+0x552>
     936:	29 2f       	mov	r18, r25
     938:	30 e0       	ldi	r19, 0x00	; 0
     93a:	22 0f       	add	r18, r18
     93c:	33 1f       	adc	r19, r19
     93e:	fe 01       	movw	r30, r28
     940:	e2 0f       	add	r30, r18
     942:	f3 1f       	adc	r31, r19
     944:	44 81       	ldd	r20, Z+4	; 0x04
     946:	50 e0       	ldi	r21, 0x00	; 0
     948:	f9 01       	movw	r30, r18
     94a:	ec 5b       	subi	r30, 0xBC	; 188
     94c:	f9 4f       	sbci	r31, 0xF9	; 249
     94e:	51 83       	std	Z+1, r21	; 0x01
     950:	40 83       	st	Z, r20
     952:	9f 5f       	subi	r25, 0xFF	; 255
     954:	90 93 bd 05 	sts	0x05BD, r25	; 0x8005bd <g_mod0_response_buffer_length>
     958:	80 e0       	ldi	r24, 0x00	; 0
     95a:	23 c0       	rjmp	.+70     	; 0x9a2 <__LOCK_REGION_LENGTH__+0x5a2>
     95c:	fe 01       	movw	r30, r28
     95e:	31 96       	adiw	r30, 0x01	; 1
     960:	40 e0       	ldi	r20, 0x00	; 0
     962:	50 e0       	ldi	r21, 0x00	; 0
     964:	80 e0       	ldi	r24, 0x00	; 0
     966:	80 34       	cpi	r24, 0x40	; 64
     968:	70 f4       	brcc	.+28     	; 0x986 <__LOCK_REGION_LENGTH__+0x586>
     96a:	23 81       	ldd	r18, Z+3	; 0x03
     96c:	30 e0       	ldi	r19, 0x00	; 0
     96e:	32 2f       	mov	r19, r18
     970:	22 27       	eor	r18, r18
     972:	64 81       	ldd	r22, Z+4	; 0x04
     974:	26 2b       	or	r18, r22
     976:	da 01       	movw	r26, r20
     978:	aa 0f       	add	r26, r26
     97a:	bb 1f       	adc	r27, r27
     97c:	ac 5b       	subi	r26, 0xBC	; 188
     97e:	b9 4f       	sbci	r27, 0xF9	; 249
     980:	11 96       	adiw	r26, 0x01	; 1
     982:	3c 93       	st	X, r19
     984:	2e 93       	st	-X, r18
     986:	8f 5f       	subi	r24, 0xFF	; 255
     988:	4f 5f       	subi	r20, 0xFF	; 255
     98a:	5f 4f       	sbci	r21, 0xFF	; 255
     98c:	32 96       	adiw	r30, 0x02	; 2
     98e:	89 13       	cpse	r24, r25
     990:	ea cf       	rjmp	.-44     	; 0x966 <__LOCK_REGION_LENGTH__+0x566>
     992:	91 50       	subi	r25, 0x01	; 1
     994:	90 93 bd 05 	sts	0x05BD, r25	; 0x8005bd <g_mod0_response_buffer_length>
     998:	80 e0       	ldi	r24, 0x00	; 0
     99a:	03 c0       	rjmp	.+6      	; 0x9a2 <__LOCK_REGION_LENGTH__+0x5a2>
     99c:	80 e0       	ldi	r24, 0x00	; 0
     99e:	01 c0       	rjmp	.+2      	; 0x9a2 <__LOCK_REGION_LENGTH__+0x5a2>
     9a0:	80 e0       	ldi	r24, 0x00	; 0
     9a2:	10 92 bf 05 	sts	0x05BF, r1	; 0x8005bf <g_mod0_transmit_buffer_index>
     9a6:	10 92 be 05 	sts	0x05BE, r1	; 0x8005be <g_mod0_response_buffer_index>
     9aa:	71 c3       	rjmp	.+1762   	; 0x108e <__LOCK_REGION_LENGTH__+0xc8e>
     9ac:	81 30       	cpi	r24, 0x01	; 1
     9ae:	09 f0       	breq	.+2      	; 0x9b2 <__LOCK_REGION_LENGTH__+0x5b2>
     9b0:	f2 c2       	rjmp	.+1508   	; 0xf96 <__LOCK_REGION_LENGTH__+0xb96>
     9b2:	80 91 ae 05 	lds	r24, 0x05AE	; 0x8005ae <g_mod1_slave>
     9b6:	89 83       	std	Y+1, r24	; 0x01
     9b8:	2f ef       	ldi	r18, 0xFF	; 255
     9ba:	62 13       	cpse	r22, r18
     9bc:	06 c0       	rjmp	.+12     	; 0x9ca <__LOCK_REGION_LENGTH__+0x5ca>
     9be:	8f e0       	ldi	r24, 0x0F	; 15
     9c0:	8a 83       	std	Y+2, r24	; 0x02
     9c2:	68 94       	set
     9c4:	bb 24       	eor	r11, r11
     9c6:	b1 f8       	bld	r11, 1
     9c8:	32 c0       	rjmp	.+100    	; 0xa2e <__LOCK_REGION_LENGTH__+0x62e>
     9ca:	6a 83       	std	Y+2, r22	; 0x02
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	68 17       	cp	r22, r24
     9d0:	b8 f0       	brcs	.+46     	; 0xa00 <__LOCK_REGION_LENGTH__+0x600>
     9d2:	94 e0       	ldi	r25, 0x04	; 4
     9d4:	96 17       	cp	r25, r22
     9d6:	18 f4       	brcc	.+6      	; 0x9de <__LOCK_REGION_LENGTH__+0x5de>
     9d8:	a7 e1       	ldi	r26, 0x17	; 23
     9da:	6a 13       	cpse	r22, r26
     9dc:	11 c0       	rjmp	.+34     	; 0xa00 <__LOCK_REGION_LENGTH__+0x600>
     9de:	80 91 ac 05 	lds	r24, 0x05AC	; 0x8005ac <g_mod1_read_address>
     9e2:	90 91 ad 05 	lds	r25, 0x05AD	; 0x8005ad <g_mod1_read_address+0x1>
     9e6:	9b 83       	std	Y+3, r25	; 0x03
     9e8:	8c 83       	std	Y+4, r24	; 0x04
     9ea:	80 91 aa 05 	lds	r24, 0x05AA	; 0x8005aa <g_mod1_read_qty>
     9ee:	90 91 ab 05 	lds	r25, 0x05AB	; 0x8005ab <g_mod1_read_qty+0x1>
     9f2:	9d 83       	std	Y+5, r25	; 0x05
     9f4:	8e 83       	std	Y+6, r24	; 0x06
     9f6:	0f 2e       	mov	r0, r31
     9f8:	f6 e0       	ldi	r31, 0x06	; 6
     9fa:	bf 2e       	mov	r11, r31
     9fc:	f0 2d       	mov	r31, r0
     9fe:	03 c0       	rjmp	.+6      	; 0xa06 <__LOCK_REGION_LENGTH__+0x606>
     a00:	68 94       	set
     a02:	bb 24       	eor	r11, r11
     a04:	b1 f8       	bld	r11, 1
     a06:	b0 e1       	ldi	r27, 0x10	; 16
     a08:	bd 15       	cp	r27, r13
     a0a:	40 f0       	brcs	.+16     	; 0xa1c <__LOCK_REGION_LENGTH__+0x61c>
     a0c:	ef e0       	ldi	r30, 0x0F	; 15
     a0e:	de 16       	cp	r13, r30
     a10:	70 f4       	brcc	.+28     	; 0xa2e <__LOCK_REGION_LENGTH__+0x62e>
     a12:	8b ef       	ldi	r24, 0xFB	; 251
     a14:	8d 0d       	add	r24, r13
     a16:	82 30       	cpi	r24, 0x02	; 2
     a18:	00 f5       	brcc	.+64     	; 0xa5a <__LOCK_REGION_LENGTH__+0x65a>
     a1a:	09 c0       	rjmp	.+18     	; 0xa2e <__LOCK_REGION_LENGTH__+0x62e>
     a1c:	f6 e1       	ldi	r31, 0x16	; 22
     a1e:	df 16       	cp	r13, r31
     a20:	e0 f0       	brcs	.+56     	; 0xa5a <__LOCK_REGION_LENGTH__+0x65a>
     a22:	27 e1       	ldi	r18, 0x17	; 23
     a24:	2d 15       	cp	r18, r13
     a26:	18 f4       	brcc	.+6      	; 0xa2e <__LOCK_REGION_LENGTH__+0x62e>
     a28:	8f ef       	ldi	r24, 0xFF	; 255
     a2a:	d8 12       	cpse	r13, r24
     a2c:	16 c0       	rjmp	.+44     	; 0xa5a <__LOCK_REGION_LENGTH__+0x65a>
     a2e:	90 91 28 05 	lds	r25, 0x0528	; 0x800528 <g_mod1_write_address>
     a32:	80 91 29 05 	lds	r24, 0x0529	; 0x800529 <g_mod1_write_address+0x1>
     a36:	e1 e0       	ldi	r30, 0x01	; 1
     a38:	f0 e0       	ldi	r31, 0x00	; 0
     a3a:	ec 0f       	add	r30, r28
     a3c:	fd 1f       	adc	r31, r29
     a3e:	eb 0d       	add	r30, r11
     a40:	f1 1d       	adc	r31, r1
     a42:	80 83       	st	Z, r24
     a44:	81 e0       	ldi	r24, 0x01	; 1
     a46:	8b 0d       	add	r24, r11
     a48:	e1 e0       	ldi	r30, 0x01	; 1
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	ec 0f       	add	r30, r28
     a4e:	fd 1f       	adc	r31, r29
     a50:	e8 0f       	add	r30, r24
     a52:	f1 1d       	adc	r31, r1
     a54:	b3 94       	inc	r11
     a56:	b3 94       	inc	r11
     a58:	90 83       	st	Z, r25
     a5a:	90 e1       	ldi	r25, 0x10	; 16
     a5c:	d9 16       	cp	r13, r25
     a5e:	09 f4       	brne	.+2      	; 0xa62 <__LOCK_REGION_LENGTH__+0x662>
     a60:	ad c0       	rjmp	.+346    	; 0xbbc <__LOCK_REGION_LENGTH__+0x7bc>
     a62:	9d 15       	cp	r25, r13
     a64:	58 f0       	brcs	.+22     	; 0xa7c <__LOCK_REGION_LENGTH__+0x67c>
     a66:	a6 e0       	ldi	r26, 0x06	; 6
     a68:	da 16       	cp	r13, r26
     a6a:	61 f1       	breq	.+88     	; 0xac4 <__LOCK_REGION_LENGTH__+0x6c4>
     a6c:	bf e0       	ldi	r27, 0x0F	; 15
     a6e:	db 16       	cp	r13, r27
     a70:	09 f4       	brne	.+2      	; 0xa74 <__LOCK_REGION_LENGTH__+0x674>
     a72:	41 c0       	rjmp	.+130    	; 0xaf6 <__LOCK_REGION_LENGTH__+0x6f6>
     a74:	e5 e0       	ldi	r30, 0x05	; 5
     a76:	de 12       	cpse	r13, r30
     a78:	1b c1       	rjmp	.+566    	; 0xcb0 <__LOCK_REGION_LENGTH__+0x8b0>
     a7a:	0d c0       	rjmp	.+26     	; 0xa96 <__LOCK_REGION_LENGTH__+0x696>
     a7c:	f7 e1       	ldi	r31, 0x17	; 23
     a7e:	df 16       	cp	r13, r31
     a80:	09 f4       	brne	.+2      	; 0xa84 <__LOCK_REGION_LENGTH__+0x684>
     a82:	9c c0       	rjmp	.+312    	; 0xbbc <__LOCK_REGION_LENGTH__+0x7bc>
     a84:	2f ef       	ldi	r18, 0xFF	; 255
     a86:	d2 16       	cp	r13, r18
     a88:	09 f4       	brne	.+2      	; 0xa8c <__LOCK_REGION_LENGTH__+0x68c>
     a8a:	98 c0       	rjmp	.+304    	; 0xbbc <__LOCK_REGION_LENGTH__+0x7bc>
     a8c:	86 e1       	ldi	r24, 0x16	; 22
     a8e:	d8 16       	cp	r13, r24
     a90:	09 f4       	brne	.+2      	; 0xa94 <__LOCK_REGION_LENGTH__+0x694>
     a92:	e0 c0       	rjmp	.+448    	; 0xc54 <__LOCK_REGION_LENGTH__+0x854>
     a94:	0d c1       	rjmp	.+538    	; 0xcb0 <__LOCK_REGION_LENGTH__+0x8b0>
     a96:	90 91 26 05 	lds	r25, 0x0526	; 0x800526 <g_mod1_write_qty>
     a9a:	80 91 27 05 	lds	r24, 0x0527	; 0x800527 <g_mod1_write_qty+0x1>
     a9e:	e1 e0       	ldi	r30, 0x01	; 1
     aa0:	f0 e0       	ldi	r31, 0x00	; 0
     aa2:	ec 0f       	add	r30, r28
     aa4:	fd 1f       	adc	r31, r29
     aa6:	eb 0d       	add	r30, r11
     aa8:	f1 1d       	adc	r31, r1
     aaa:	80 83       	st	Z, r24
     aac:	81 e0       	ldi	r24, 0x01	; 1
     aae:	8b 0d       	add	r24, r11
     ab0:	e1 e0       	ldi	r30, 0x01	; 1
     ab2:	f0 e0       	ldi	r31, 0x00	; 0
     ab4:	ec 0f       	add	r30, r28
     ab6:	fd 1f       	adc	r31, r29
     ab8:	e8 0f       	add	r30, r24
     aba:	f1 1d       	adc	r31, r1
     abc:	b3 94       	inc	r11
     abe:	b3 94       	inc	r11
     ac0:	90 83       	st	Z, r25
     ac2:	f6 c0       	rjmp	.+492    	; 0xcb0 <__LOCK_REGION_LENGTH__+0x8b0>
     ac4:	e6 ea       	ldi	r30, 0xA6	; 166
     ac6:	f4 e0       	ldi	r31, 0x04	; 4
     ac8:	80 81       	ld	r24, Z
     aca:	91 81       	ldd	r25, Z+1	; 0x01
     acc:	a1 e0       	ldi	r26, 0x01	; 1
     ace:	b0 e0       	ldi	r27, 0x00	; 0
     ad0:	ac 0f       	add	r26, r28
     ad2:	bd 1f       	adc	r27, r29
     ad4:	ab 0d       	add	r26, r11
     ad6:	b1 1d       	adc	r27, r1
     ad8:	9c 93       	st	X, r25
     ada:	20 81       	ld	r18, Z
     adc:	31 81       	ldd	r19, Z+1	; 0x01
     ade:	81 e0       	ldi	r24, 0x01	; 1
     ae0:	8b 0d       	add	r24, r11
     ae2:	e1 e0       	ldi	r30, 0x01	; 1
     ae4:	f0 e0       	ldi	r31, 0x00	; 0
     ae6:	ec 0f       	add	r30, r28
     ae8:	fd 1f       	adc	r31, r29
     aea:	e8 0f       	add	r30, r24
     aec:	f1 1d       	adc	r31, r1
     aee:	b3 94       	inc	r11
     af0:	b3 94       	inc	r11
     af2:	20 83       	st	Z, r18
     af4:	dd c0       	rjmp	.+442    	; 0xcb0 <__LOCK_REGION_LENGTH__+0x8b0>
     af6:	80 91 26 05 	lds	r24, 0x0526	; 0x800526 <g_mod1_write_qty>
     afa:	90 91 27 05 	lds	r25, 0x0527	; 0x800527 <g_mod1_write_qty+0x1>
     afe:	e1 e0       	ldi	r30, 0x01	; 1
     b00:	f0 e0       	ldi	r31, 0x00	; 0
     b02:	ec 0f       	add	r30, r28
     b04:	fd 1f       	adc	r31, r29
     b06:	eb 0d       	add	r30, r11
     b08:	f1 1d       	adc	r31, r1
     b0a:	90 83       	st	Z, r25
     b0c:	22 e0       	ldi	r18, 0x02	; 2
     b0e:	2b 0d       	add	r18, r11
     b10:	31 e0       	ldi	r19, 0x01	; 1
     b12:	3b 0d       	add	r19, r11
     b14:	e1 e0       	ldi	r30, 0x01	; 1
     b16:	f0 e0       	ldi	r31, 0x00	; 0
     b18:	ec 0f       	add	r30, r28
     b1a:	fd 1f       	adc	r31, r29
     b1c:	e3 0f       	add	r30, r19
     b1e:	f1 1d       	adc	r31, r1
     b20:	80 83       	st	Z, r24
     b22:	ac 01       	movw	r20, r24
     b24:	47 70       	andi	r20, 0x07	; 7
     b26:	55 27       	eor	r21, r21
     b28:	45 2b       	or	r20, r21
     b2a:	49 f0       	breq	.+18     	; 0xb3e <__LOCK_REGION_LENGTH__+0x73e>
     b2c:	96 95       	lsr	r25
     b2e:	87 95       	ror	r24
     b30:	96 95       	lsr	r25
     b32:	87 95       	ror	r24
     b34:	96 95       	lsr	r25
     b36:	87 95       	ror	r24
     b38:	91 e0       	ldi	r25, 0x01	; 1
     b3a:	98 0f       	add	r25, r24
     b3c:	07 c0       	rjmp	.+14     	; 0xb4c <__LOCK_REGION_LENGTH__+0x74c>
     b3e:	96 95       	lsr	r25
     b40:	87 95       	ror	r24
     b42:	96 95       	lsr	r25
     b44:	87 95       	ror	r24
     b46:	96 95       	lsr	r25
     b48:	87 95       	ror	r24
     b4a:	98 2f       	mov	r25, r24
     b4c:	a3 e0       	ldi	r26, 0x03	; 3
     b4e:	ba 0e       	add	r11, r26
     b50:	fe 01       	movw	r30, r28
     b52:	e2 0f       	add	r30, r18
     b54:	f1 1d       	adc	r31, r1
     b56:	91 83       	std	Z+1, r25	; 0x01
     b58:	99 23       	and	r25, r25
     b5a:	09 f4       	brne	.+2      	; 0xb5e <__LOCK_REGION_LENGTH__+0x75e>
     b5c:	a9 c0       	rjmp	.+338    	; 0xcb0 <__LOCK_REGION_LENGTH__+0x8b0>
     b5e:	80 e0       	ldi	r24, 0x00	; 0
     b60:	28 2f       	mov	r18, r24
     b62:	21 70       	andi	r18, 0x01	; 1
     b64:	80 ff       	sbrs	r24, 0
     b66:	03 c0       	rjmp	.+6      	; 0xb6e <__LOCK_REGION_LENGTH__+0x76e>
     b68:	21 30       	cpi	r18, 0x01	; 1
     b6a:	99 f0       	breq	.+38     	; 0xb92 <__LOCK_REGION_LENGTH__+0x792>
     b6c:	23 c0       	rjmp	.+70     	; 0xbb4 <__LOCK_REGION_LENGTH__+0x7b4>
     b6e:	e8 2f       	mov	r30, r24
     b70:	e6 95       	lsr	r30
     b72:	f0 e0       	ldi	r31, 0x00	; 0
     b74:	ee 0f       	add	r30, r30
     b76:	ff 1f       	adc	r31, r31
     b78:	ea 55       	subi	r30, 0x5A	; 90
     b7a:	fb 4f       	sbci	r31, 0xFB	; 251
     b7c:	20 81       	ld	r18, Z
     b7e:	31 81       	ldd	r19, Z+1	; 0x01
     b80:	e1 e0       	ldi	r30, 0x01	; 1
     b82:	f0 e0       	ldi	r31, 0x00	; 0
     b84:	ec 0f       	add	r30, r28
     b86:	fd 1f       	adc	r31, r29
     b88:	eb 0d       	add	r30, r11
     b8a:	f1 1d       	adc	r31, r1
     b8c:	20 83       	st	Z, r18
     b8e:	b3 94       	inc	r11
     b90:	11 c0       	rjmp	.+34     	; 0xbb4 <__LOCK_REGION_LENGTH__+0x7b4>
     b92:	e8 2f       	mov	r30, r24
     b94:	e6 95       	lsr	r30
     b96:	f0 e0       	ldi	r31, 0x00	; 0
     b98:	ee 0f       	add	r30, r30
     b9a:	ff 1f       	adc	r31, r31
     b9c:	ea 55       	subi	r30, 0x5A	; 90
     b9e:	fb 4f       	sbci	r31, 0xFB	; 251
     ba0:	20 81       	ld	r18, Z
     ba2:	31 81       	ldd	r19, Z+1	; 0x01
     ba4:	e1 e0       	ldi	r30, 0x01	; 1
     ba6:	f0 e0       	ldi	r31, 0x00	; 0
     ba8:	ec 0f       	add	r30, r28
     baa:	fd 1f       	adc	r31, r29
     bac:	eb 0d       	add	r30, r11
     bae:	f1 1d       	adc	r31, r1
     bb0:	30 83       	st	Z, r19
     bb2:	b3 94       	inc	r11
     bb4:	8f 5f       	subi	r24, 0xFF	; 255
     bb6:	98 13       	cpse	r25, r24
     bb8:	d3 cf       	rjmp	.-90     	; 0xb60 <__LOCK_REGION_LENGTH__+0x760>
     bba:	7a c0       	rjmp	.+244    	; 0xcb0 <__LOCK_REGION_LENGTH__+0x8b0>
     bbc:	80 91 26 05 	lds	r24, 0x0526	; 0x800526 <g_mod1_write_qty>
     bc0:	90 91 27 05 	lds	r25, 0x0527	; 0x800527 <g_mod1_write_qty+0x1>
     bc4:	e1 e0       	ldi	r30, 0x01	; 1
     bc6:	f0 e0       	ldi	r31, 0x00	; 0
     bc8:	ec 0f       	add	r30, r28
     bca:	fd 1f       	adc	r31, r29
     bcc:	eb 0d       	add	r30, r11
     bce:	f1 1d       	adc	r31, r1
     bd0:	90 83       	st	Z, r25
     bd2:	21 e0       	ldi	r18, 0x01	; 1
     bd4:	2b 0d       	add	r18, r11
     bd6:	e1 e0       	ldi	r30, 0x01	; 1
     bd8:	f0 e0       	ldi	r31, 0x00	; 0
     bda:	ec 0f       	add	r30, r28
     bdc:	fd 1f       	adc	r31, r29
     bde:	e2 0f       	add	r30, r18
     be0:	f1 1d       	adc	r31, r1
     be2:	80 83       	st	Z, r24
     be4:	22 e0       	ldi	r18, 0x02	; 2
     be6:	2b 0d       	add	r18, r11
     be8:	e1 e0       	ldi	r30, 0x01	; 1
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	ec 0f       	add	r30, r28
     bee:	fd 1f       	adc	r31, r29
     bf0:	e2 0f       	add	r30, r18
     bf2:	f1 1d       	adc	r31, r1
     bf4:	b3 e0       	ldi	r27, 0x03	; 3
     bf6:	bb 0e       	add	r11, r27
     bf8:	28 2f       	mov	r18, r24
     bfa:	22 0f       	add	r18, r18
     bfc:	20 83       	st	Z, r18
     bfe:	ac 01       	movw	r20, r24
     c00:	55 27       	eor	r21, r21
     c02:	14 16       	cp	r1, r20
     c04:	15 06       	cpc	r1, r21
     c06:	0c f0       	brlt	.+2      	; 0xc0a <__LOCK_REGION_LENGTH__+0x80a>
     c08:	53 c0       	rjmp	.+166    	; 0xcb0 <__LOCK_REGION_LENGTH__+0x8b0>
     c0a:	80 e0       	ldi	r24, 0x00	; 0
     c0c:	90 e0       	ldi	r25, 0x00	; 0
     c0e:	20 e0       	ldi	r18, 0x00	; 0
     c10:	88 0f       	add	r24, r24
     c12:	99 1f       	adc	r25, r25
     c14:	fc 01       	movw	r30, r24
     c16:	ea 55       	subi	r30, 0x5A	; 90
     c18:	fb 4f       	sbci	r31, 0xFB	; 251
     c1a:	80 81       	ld	r24, Z
     c1c:	91 81       	ldd	r25, Z+1	; 0x01
     c1e:	a1 e0       	ldi	r26, 0x01	; 1
     c20:	b0 e0       	ldi	r27, 0x00	; 0
     c22:	ac 0f       	add	r26, r28
     c24:	bd 1f       	adc	r27, r29
     c26:	ab 0d       	add	r26, r11
     c28:	b1 1d       	adc	r27, r1
     c2a:	9c 93       	st	X, r25
     c2c:	60 81       	ld	r22, Z
     c2e:	71 81       	ldd	r23, Z+1	; 0x01
     c30:	81 e0       	ldi	r24, 0x01	; 1
     c32:	8b 0d       	add	r24, r11
     c34:	e1 e0       	ldi	r30, 0x01	; 1
     c36:	f0 e0       	ldi	r31, 0x00	; 0
     c38:	ec 0f       	add	r30, r28
     c3a:	fd 1f       	adc	r31, r29
     c3c:	e8 0f       	add	r30, r24
     c3e:	f1 1d       	adc	r31, r1
     c40:	b3 94       	inc	r11
     c42:	b3 94       	inc	r11
     c44:	60 83       	st	Z, r22
     c46:	2f 5f       	subi	r18, 0xFF	; 255
     c48:	82 2f       	mov	r24, r18
     c4a:	90 e0       	ldi	r25, 0x00	; 0
     c4c:	84 17       	cp	r24, r20
     c4e:	95 07       	cpc	r25, r21
     c50:	fc f2       	brlt	.-66     	; 0xc10 <__LOCK_REGION_LENGTH__+0x810>
     c52:	2e c0       	rjmp	.+92     	; 0xcb0 <__LOCK_REGION_LENGTH__+0x8b0>
     c54:	e6 ea       	ldi	r30, 0xA6	; 166
     c56:	f4 e0       	ldi	r31, 0x04	; 4
     c58:	80 81       	ld	r24, Z
     c5a:	91 81       	ldd	r25, Z+1	; 0x01
     c5c:	a1 e0       	ldi	r26, 0x01	; 1
     c5e:	b0 e0       	ldi	r27, 0x00	; 0
     c60:	ac 0f       	add	r26, r28
     c62:	bd 1f       	adc	r27, r29
     c64:	ab 0d       	add	r26, r11
     c66:	b1 1d       	adc	r27, r1
     c68:	9c 93       	st	X, r25
     c6a:	80 81       	ld	r24, Z
     c6c:	91 81       	ldd	r25, Z+1	; 0x01
     c6e:	91 e0       	ldi	r25, 0x01	; 1
     c70:	9b 0d       	add	r25, r11
     c72:	a1 e0       	ldi	r26, 0x01	; 1
     c74:	b0 e0       	ldi	r27, 0x00	; 0
     c76:	ac 0f       	add	r26, r28
     c78:	bd 1f       	adc	r27, r29
     c7a:	a9 0f       	add	r26, r25
     c7c:	b1 1d       	adc	r27, r1
     c7e:	8c 93       	st	X, r24
     c80:	82 81       	ldd	r24, Z+2	; 0x02
     c82:	93 81       	ldd	r25, Z+3	; 0x03
     c84:	82 e0       	ldi	r24, 0x02	; 2
     c86:	8b 0d       	add	r24, r11
     c88:	a1 e0       	ldi	r26, 0x01	; 1
     c8a:	b0 e0       	ldi	r27, 0x00	; 0
     c8c:	ac 0f       	add	r26, r28
     c8e:	bd 1f       	adc	r27, r29
     c90:	a8 0f       	add	r26, r24
     c92:	b1 1d       	adc	r27, r1
     c94:	9c 93       	st	X, r25
     c96:	22 81       	ldd	r18, Z+2	; 0x02
     c98:	33 81       	ldd	r19, Z+3	; 0x03
     c9a:	83 e0       	ldi	r24, 0x03	; 3
     c9c:	8b 0d       	add	r24, r11
     c9e:	e1 e0       	ldi	r30, 0x01	; 1
     ca0:	f0 e0       	ldi	r31, 0x00	; 0
     ca2:	ec 0f       	add	r30, r28
     ca4:	fd 1f       	adc	r31, r29
     ca6:	e8 0f       	add	r30, r24
     ca8:	f1 1d       	adc	r31, r1
     caa:	84 e0       	ldi	r24, 0x04	; 4
     cac:	b8 0e       	add	r11, r24
     cae:	20 83       	st	Z, r18
     cb0:	bb 20       	and	r11, r11
     cb2:	b9 f0       	breq	.+46     	; 0xce2 <__LOCK_REGION_LENGTH__+0x8e2>
     cb4:	8e 01       	movw	r16, r28
     cb6:	0f 5f       	subi	r16, 0xFF	; 255
     cb8:	1f 4f       	sbci	r17, 0xFF	; 255
     cba:	ee 24       	eor	r14, r14
     cbc:	ea 94       	dec	r14
     cbe:	eb 0c       	add	r14, r11
     cc0:	f1 2c       	mov	r15, r1
     cc2:	9f ef       	ldi	r25, 0xFF	; 255
     cc4:	e9 1a       	sub	r14, r25
     cc6:	f9 0a       	sbc	r15, r25
     cc8:	e0 0e       	add	r14, r16
     cca:	f1 1e       	adc	r15, r17
     ccc:	8f ef       	ldi	r24, 0xFF	; 255
     cce:	9f ef       	ldi	r25, 0xFF	; 255
     cd0:	d8 01       	movw	r26, r16
     cd2:	6d 91       	ld	r22, X+
     cd4:	8d 01       	movw	r16, r26
     cd6:	0e 94 f4 21 	call	0x43e8	; 0x43e8 <crc16_update>
     cda:	0e 15       	cp	r16, r14
     cdc:	1f 05       	cpc	r17, r15
     cde:	c1 f7       	brne	.-16     	; 0xcd0 <__LOCK_REGION_LENGTH__+0x8d0>
     ce0:	02 c0       	rjmp	.+4      	; 0xce6 <__LOCK_REGION_LENGTH__+0x8e6>
     ce2:	8f ef       	ldi	r24, 0xFF	; 255
     ce4:	9f ef       	ldi	r25, 0xFF	; 255
     ce6:	ee 24       	eor	r14, r14
     ce8:	e3 94       	inc	r14
     cea:	eb 0c       	add	r14, r11
     cec:	e1 e0       	ldi	r30, 0x01	; 1
     cee:	f0 e0       	ldi	r31, 0x00	; 0
     cf0:	ec 0f       	add	r30, r28
     cf2:	fd 1f       	adc	r31, r29
     cf4:	eb 0d       	add	r30, r11
     cf6:	f1 1d       	adc	r31, r1
     cf8:	80 83       	st	Z, r24
     cfa:	b3 94       	inc	r11
     cfc:	b3 94       	inc	r11
     cfe:	e1 e0       	ldi	r30, 0x01	; 1
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	ec 0f       	add	r30, r28
     d04:	fd 1f       	adc	r31, r29
     d06:	ee 0d       	add	r30, r14
     d08:	f1 1d       	adc	r31, r1
     d0a:	90 83       	st	Z, r25
     d0c:	e1 e0       	ldi	r30, 0x01	; 1
     d0e:	f0 e0       	ldi	r31, 0x00	; 0
     d10:	ec 0f       	add	r30, r28
     d12:	fd 1f       	adc	r31, r29
     d14:	eb 0d       	add	r30, r11
     d16:	f1 1d       	adc	r31, r1
     d18:	10 82       	st	Z, r1
     d1a:	e0 91 99 04 	lds	r30, 0x0499	; 0x800499 <g_mod1_Serial_getc>
     d1e:	f0 91 9a 04 	lds	r31, 0x049A	; 0x80049a <g_mod1_Serial_getc+0x1>
     d22:	19 95       	eicall
     d24:	81 15       	cp	r24, r1
     d26:	91 40       	sbci	r25, 0x01	; 1
     d28:	c1 f7       	brne	.-16     	; 0xd1a <__LOCK_REGION_LENGTH__+0x91a>
     d2a:	e0 91 9f 04 	lds	r30, 0x049F	; 0x80049f <g_mod1_pre_transmission>
     d2e:	f0 91 a0 04 	lds	r31, 0x04A0	; 0x8004a0 <g_mod1_pre_transmission+0x1>
     d32:	30 97       	sbiw	r30, 0x00	; 0
     d34:	09 f0       	breq	.+2      	; 0xd38 <__LOCK_REGION_LENGTH__+0x938>
     d36:	19 95       	eicall
     d38:	bb 20       	and	r11, r11
     d3a:	a1 f0       	breq	.+40     	; 0xd64 <__LOCK_REGION_LENGTH__+0x964>
     d3c:	8e 01       	movw	r16, r28
     d3e:	0f 5f       	subi	r16, 0xFF	; 255
     d40:	1f 4f       	sbci	r17, 0xFF	; 255
     d42:	f1 2c       	mov	r15, r1
     d44:	ef ef       	ldi	r30, 0xFF	; 255
     d46:	ee 1a       	sub	r14, r30
     d48:	fe 0a       	sbc	r15, r30
     d4a:	e0 0e       	add	r14, r16
     d4c:	f1 1e       	adc	r15, r17
     d4e:	e0 91 9b 04 	lds	r30, 0x049B	; 0x80049b <g_mod1_Serial_putc>
     d52:	f0 91 9c 04 	lds	r31, 0x049C	; 0x80049c <g_mod1_Serial_putc+0x1>
     d56:	d8 01       	movw	r26, r16
     d58:	8d 91       	ld	r24, X+
     d5a:	8d 01       	movw	r16, r26
     d5c:	19 95       	eicall
     d5e:	e0 16       	cp	r14, r16
     d60:	f1 06       	cpc	r15, r17
     d62:	a9 f7       	brne	.-22     	; 0xd4e <__LOCK_REGION_LENGTH__+0x94e>
     d64:	e0 91 95 04 	lds	r30, 0x0495	; 0x800495 <g_mod1_Serial_flush>
     d68:	f0 91 96 04 	lds	r31, 0x0496	; 0x800496 <g_mod1_Serial_flush+0x1>
     d6c:	19 95       	eicall
     d6e:	e7 e0       	ldi	r30, 0x07	; 7
     d70:	f7 e0       	ldi	r31, 0x07	; 7
     d72:	31 97       	sbiw	r30, 0x01	; 1
     d74:	f1 f7       	brne	.-4      	; 0xd72 <__LOCK_REGION_LENGTH__+0x972>
     d76:	00 c0       	rjmp	.+0      	; 0xd78 <__LOCK_REGION_LENGTH__+0x978>
     d78:	00 00       	nop
     d7a:	e0 91 9d 04 	lds	r30, 0x049D	; 0x80049d <g_mod1_post_transmission>
     d7e:	f0 91 9e 04 	lds	r31, 0x049E	; 0x80049e <g_mod1_post_transmission+0x1>
     d82:	30 97       	sbiw	r30, 0x00	; 0
     d84:	09 f0       	breq	.+2      	; 0xd88 <__LOCK_REGION_LENGTH__+0x988>
     d86:	19 95       	eicall
     d88:	0e 94 15 22 	call	0x442a	; 0x442a <Get_millis>
     d8c:	4b 01       	movw	r8, r22
     d8e:	5c 01       	movw	r10, r24
     d90:	08 e0       	ldi	r16, 0x08	; 8
     d92:	10 e0       	ldi	r17, 0x00	; 0
     d94:	ed 2c       	mov	r14, r13
     d96:	f1 2c       	mov	r15, r1
     d98:	e0 91 97 04 	lds	r30, 0x0497	; 0x800497 <g_mod1_Serial_available>
     d9c:	f0 91 98 04 	lds	r31, 0x0498	; 0x800498 <g_mod1_Serial_available+0x1>
     da0:	19 95       	eicall
     da2:	89 2b       	or	r24, r25
     da4:	91 f0       	breq	.+36     	; 0xdca <__LOCK_REGION_LENGTH__+0x9ca>
     da6:	dd 24       	eor	r13, r13
     da8:	d3 94       	inc	r13
     daa:	d1 0e       	add	r13, r17
     dac:	e0 91 99 04 	lds	r30, 0x0499	; 0x800499 <g_mod1_Serial_getc>
     db0:	f0 91 9a 04 	lds	r31, 0x049A	; 0x80049a <g_mod1_Serial_getc+0x1>
     db4:	19 95       	eicall
     db6:	e1 e0       	ldi	r30, 0x01	; 1
     db8:	f0 e0       	ldi	r31, 0x00	; 0
     dba:	ec 0f       	add	r30, r28
     dbc:	fd 1f       	adc	r31, r29
     dbe:	e1 0f       	add	r30, r17
     dc0:	f1 1d       	adc	r31, r1
     dc2:	80 83       	st	Z, r24
     dc4:	01 50       	subi	r16, 0x01	; 1
     dc6:	1d 2d       	mov	r17, r13
     dc8:	07 c0       	rjmp	.+14     	; 0xdd8 <__LOCK_REGION_LENGTH__+0x9d8>
     dca:	e0 91 a1 04 	lds	r30, 0x04A1	; 0x8004a1 <g_mod1_idle>
     dce:	f0 91 a2 04 	lds	r31, 0x04A2	; 0x8004a2 <g_mod1_idle+0x1>
     dd2:	30 97       	sbiw	r30, 0x00	; 0
     dd4:	09 f0       	breq	.+2      	; 0xdd8 <__LOCK_REGION_LENGTH__+0x9d8>
     dd6:	19 95       	eicall
     dd8:	15 30       	cpi	r17, 0x05	; 5
     dda:	51 f5       	brne	.+84     	; 0xe30 <__LOCK_REGION_LENGTH__+0xa30>
     ddc:	99 81       	ldd	r25, Y+1	; 0x01
     dde:	80 91 ae 05 	lds	r24, 0x05AE	; 0x8005ae <g_mod1_slave>
     de2:	98 13       	cpse	r25, r24
     de4:	4e c1       	rjmp	.+668    	; 0x1082 <__LOCK_REGION_LENGTH__+0xc82>
     de6:	8a 81       	ldd	r24, Y+2	; 0x02
     de8:	28 2f       	mov	r18, r24
     dea:	2f 77       	andi	r18, 0x7F	; 127
     dec:	30 e0       	ldi	r19, 0x00	; 0
     dee:	2e 15       	cp	r18, r14
     df0:	3f 05       	cpc	r19, r15
     df2:	09 f0       	breq	.+2      	; 0xdf6 <__LOCK_REGION_LENGTH__+0x9f6>
     df4:	48 c1       	rjmp	.+656    	; 0x1086 <__LOCK_REGION_LENGTH__+0xc86>
     df6:	88 23       	and	r24, r24
     df8:	24 f4       	brge	.+8      	; 0xe02 <__LOCK_REGION_LENGTH__+0xa02>
     dfa:	8b 81       	ldd	r24, Y+3	; 0x03
     dfc:	88 23       	and	r24, r24
     dfe:	e1 f1       	breq	.+120    	; 0xe78 <__LOCK_REGION_LENGTH__+0xa78>
     e00:	c5 c0       	rjmp	.+394    	; 0xf8c <__LOCK_REGION_LENGTH__+0xb8c>
     e02:	81 31       	cpi	r24, 0x11	; 17
     e04:	58 f4       	brcc	.+22     	; 0xe1c <__LOCK_REGION_LENGTH__+0xa1c>
     e06:	8f 30       	cpi	r24, 0x0F	; 15
     e08:	08 f0       	brcs	.+2      	; 0xe0c <__LOCK_REGION_LENGTH__+0xa0c>
     e0a:	fa c0       	rjmp	.+500    	; 0x1000 <__LOCK_REGION_LENGTH__+0xc00>
     e0c:	81 30       	cpi	r24, 0x01	; 1
     e0e:	80 f0       	brcs	.+32     	; 0xe30 <__LOCK_REGION_LENGTH__+0xa30>
     e10:	85 30       	cpi	r24, 0x05	; 5
     e12:	68 f0       	brcs	.+26     	; 0xe2e <__LOCK_REGION_LENGTH__+0xa2e>
     e14:	87 30       	cpi	r24, 0x07	; 7
     e16:	08 f4       	brcc	.+2      	; 0xe1a <__LOCK_REGION_LENGTH__+0xa1a>
     e18:	f3 c0       	rjmp	.+486    	; 0x1000 <__LOCK_REGION_LENGTH__+0xc00>
     e1a:	0a c0       	rjmp	.+20     	; 0xe30 <__LOCK_REGION_LENGTH__+0xa30>
     e1c:	87 31       	cpi	r24, 0x17	; 23
     e1e:	39 f0       	breq	.+14     	; 0xe2e <__LOCK_REGION_LENGTH__+0xa2e>
     e20:	8f 3f       	cpi	r24, 0xFF	; 255
     e22:	09 f4       	brne	.+2      	; 0xe26 <__LOCK_REGION_LENGTH__+0xa26>
     e24:	ed c0       	rjmp	.+474    	; 0x1000 <__LOCK_REGION_LENGTH__+0xc00>
     e26:	86 31       	cpi	r24, 0x16	; 22
     e28:	19 f4       	brne	.+6      	; 0xe30 <__LOCK_REGION_LENGTH__+0xa30>
     e2a:	05 e0       	ldi	r16, 0x05	; 5
     e2c:	ea c0       	rjmp	.+468    	; 0x1002 <__LOCK_REGION_LENGTH__+0xc02>
     e2e:	0b 81       	ldd	r16, Y+3	; 0x03
     e30:	0e 94 15 22 	call	0x442a	; 0x442a <Get_millis>
     e34:	dc 01       	movw	r26, r24
     e36:	cb 01       	movw	r24, r22
     e38:	88 19       	sub	r24, r8
     e3a:	99 09       	sbc	r25, r9
     e3c:	aa 09       	sbc	r26, r10
     e3e:	bb 09       	sbc	r27, r11
     e40:	89 3c       	cpi	r24, 0xC9	; 201
     e42:	91 05       	cpc	r25, r1
     e44:	a1 05       	cpc	r26, r1
     e46:	b1 05       	cpc	r27, r1
     e48:	08 f4       	brcc	.+2      	; 0xe4c <__LOCK_REGION_LENGTH__+0xa4c>
     e4a:	11 c1       	rjmp	.+546    	; 0x106e <__LOCK_REGION_LENGTH__+0xc6e>
     e4c:	89 e1       	ldi	r24, 0x19	; 25
     e4e:	92 e0       	ldi	r25, 0x02	; 2
     e50:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <UART0_puts>
     e54:	01 11       	cpse	r16, r1
     e56:	19 c1       	rjmp	.+562    	; 0x108a <__LOCK_REGION_LENGTH__+0xc8a>
     e58:	82 ee       	ldi	r24, 0xE2	; 226
     e5a:	81 11       	cpse	r24, r1
     e5c:	97 c0       	rjmp	.+302    	; 0xf8c <__LOCK_REGION_LENGTH__+0xb8c>
     e5e:	15 30       	cpi	r17, 0x05	; 5
     e60:	08 f4       	brcc	.+2      	; 0xe64 <__LOCK_REGION_LENGTH__+0xa64>
     e62:	ef c0       	rjmp	.+478    	; 0x1042 <__LOCK_REGION_LENGTH__+0xc42>
     e64:	01 2f       	mov	r16, r17
     e66:	10 e0       	ldi	r17, 0x00	; 0
     e68:	78 01       	movw	r14, r16
     e6a:	f2 e0       	ldi	r31, 0x02	; 2
     e6c:	ef 1a       	sub	r14, r31
     e6e:	f1 08       	sbc	r15, r1
     e70:	1e 14       	cp	r1, r14
     e72:	1f 04       	cpc	r1, r15
     e74:	44 f0       	brlt	.+16     	; 0xe86 <__LOCK_REGION_LENGTH__+0xa86>
     e76:	d4 c0       	rjmp	.+424    	; 0x1020 <__LOCK_REGION_LENGTH__+0xc20>
     e78:	0f 2e       	mov	r0, r31
     e7a:	f3 e0       	ldi	r31, 0x03	; 3
     e7c:	ef 2e       	mov	r14, r31
     e7e:	f1 2c       	mov	r15, r1
     e80:	f0 2d       	mov	r31, r0
     e82:	05 e0       	ldi	r16, 0x05	; 5
     e84:	10 e0       	ldi	r17, 0x00	; 0
     e86:	20 e0       	ldi	r18, 0x00	; 0
     e88:	30 e0       	ldi	r19, 0x00	; 0
     e8a:	8f ef       	ldi	r24, 0xFF	; 255
     e8c:	9f ef       	ldi	r25, 0xFF	; 255
     e8e:	d1 2c       	mov	r13, r1
     e90:	e1 e0       	ldi	r30, 0x01	; 1
     e92:	f0 e0       	ldi	r31, 0x00	; 0
     e94:	ec 0f       	add	r30, r28
     e96:	fd 1f       	adc	r31, r29
     e98:	e2 0f       	add	r30, r18
     e9a:	f3 1f       	adc	r31, r19
     e9c:	60 81       	ld	r22, Z
     e9e:	0e 94 f4 21 	call	0x43e8	; 0x43e8 <crc16_update>
     ea2:	d3 94       	inc	r13
     ea4:	2d 2d       	mov	r18, r13
     ea6:	30 e0       	ldi	r19, 0x00	; 0
     ea8:	2e 15       	cp	r18, r14
     eaa:	3f 05       	cpc	r19, r15
     eac:	8c f3       	brlt	.-30     	; 0xe90 <__LOCK_REGION_LENGTH__+0xa90>
     eae:	ba c0       	rjmp	.+372    	; 0x1024 <__LOCK_REGION_LENGTH__+0xc24>
     eb0:	89 2f       	mov	r24, r25
     eb2:	99 27       	eor	r25, r25
     eb4:	fe 01       	movw	r30, r28
     eb6:	e0 0f       	add	r30, r16
     eb8:	f1 1f       	adc	r31, r17
     eba:	20 81       	ld	r18, Z
     ebc:	30 e0       	ldi	r19, 0x00	; 0
     ebe:	82 17       	cp	r24, r18
     ec0:	93 07       	cpc	r25, r19
     ec2:	09 f0       	breq	.+2      	; 0xec6 <__LOCK_REGION_LENGTH__+0xac6>
     ec4:	bc c0       	rjmp	.+376    	; 0x103e <__LOCK_REGION_LENGTH__+0xc3e>
     ec6:	bd c0       	rjmp	.+378    	; 0x1042 <__LOCK_REGION_LENGTH__+0xc42>
     ec8:	8b 81       	ldd	r24, Y+3	; 0x03
     eca:	86 95       	lsr	r24
     ecc:	e1 f5       	brne	.+120    	; 0xf46 <__LOCK_REGION_LENGTH__+0xb46>
     ece:	5e c0       	rjmp	.+188    	; 0xf8c <__LOCK_REGION_LENGTH__+0xb8c>
     ed0:	6b 81       	ldd	r22, Y+3	; 0x03
     ed2:	86 2f       	mov	r24, r22
     ed4:	86 95       	lsr	r24
     ed6:	09 f4       	brne	.+2      	; 0xeda <__LOCK_REGION_LENGTH__+0xada>
     ed8:	c2 c0       	rjmp	.+388    	; 0x105e <__LOCK_REGION_LENGTH__+0xc5e>
     eda:	fe 01       	movw	r30, r28
     edc:	31 96       	adiw	r30, 0x01	; 1
     ede:	40 e0       	ldi	r20, 0x00	; 0
     ee0:	50 e0       	ldi	r21, 0x00	; 0
     ee2:	90 e0       	ldi	r25, 0x00	; 0
     ee4:	90 34       	cpi	r25, 0x40	; 64
     ee6:	70 f4       	brcc	.+28     	; 0xf04 <__LOCK_REGION_LENGTH__+0xb04>
     ee8:	24 81       	ldd	r18, Z+4	; 0x04
     eea:	30 e0       	ldi	r19, 0x00	; 0
     eec:	32 2f       	mov	r19, r18
     eee:	22 27       	eor	r18, r18
     ef0:	73 81       	ldd	r23, Z+3	; 0x03
     ef2:	27 2b       	or	r18, r23
     ef4:	da 01       	movw	r26, r20
     ef6:	aa 0f       	add	r26, r26
     ef8:	bb 1f       	adc	r27, r27
     efa:	a6 5d       	subi	r26, 0xD6	; 214
     efc:	ba 4f       	sbci	r27, 0xFA	; 250
     efe:	11 96       	adiw	r26, 0x01	; 1
     f00:	3c 93       	st	X, r19
     f02:	2e 93       	st	-X, r18
     f04:	9f 5f       	subi	r25, 0xFF	; 255
     f06:	4f 5f       	subi	r20, 0xFF	; 255
     f08:	5f 4f       	sbci	r21, 0xFF	; 255
     f0a:	32 96       	adiw	r30, 0x02	; 2
     f0c:	98 13       	cpse	r25, r24
     f0e:	ea cf       	rjmp	.-44     	; 0xee4 <__LOCK_REGION_LENGTH__+0xae4>
     f10:	9f ef       	ldi	r25, 0xFF	; 255
     f12:	98 0f       	add	r25, r24
     f14:	90 93 a3 04 	sts	0x04A3, r25	; 0x8004a3 <g_mod1_response_buffer_length>
     f18:	60 ff       	sbrs	r22, 0
     f1a:	35 c0       	rjmp	.+106    	; 0xf86 <__LOCK_REGION_LENGTH__+0xb86>
     f1c:	80 34       	cpi	r24, 0x40	; 64
     f1e:	70 f4       	brcc	.+28     	; 0xf3c <__LOCK_REGION_LENGTH__+0xb3c>
     f20:	28 2f       	mov	r18, r24
     f22:	30 e0       	ldi	r19, 0x00	; 0
     f24:	22 0f       	add	r18, r18
     f26:	33 1f       	adc	r19, r19
     f28:	fe 01       	movw	r30, r28
     f2a:	e2 0f       	add	r30, r18
     f2c:	f3 1f       	adc	r31, r19
     f2e:	44 81       	ldd	r20, Z+4	; 0x04
     f30:	50 e0       	ldi	r21, 0x00	; 0
     f32:	f9 01       	movw	r30, r18
     f34:	e6 5d       	subi	r30, 0xD6	; 214
     f36:	fa 4f       	sbci	r31, 0xFA	; 250
     f38:	51 83       	std	Z+1, r21	; 0x01
     f3a:	40 83       	st	Z, r20
     f3c:	8f 5f       	subi	r24, 0xFF	; 255
     f3e:	80 93 a3 04 	sts	0x04A3, r24	; 0x8004a3 <g_mod1_response_buffer_length>
     f42:	80 e0       	ldi	r24, 0x00	; 0
     f44:	23 c0       	rjmp	.+70     	; 0xf8c <__LOCK_REGION_LENGTH__+0xb8c>
     f46:	fe 01       	movw	r30, r28
     f48:	31 96       	adiw	r30, 0x01	; 1
     f4a:	40 e0       	ldi	r20, 0x00	; 0
     f4c:	50 e0       	ldi	r21, 0x00	; 0
     f4e:	90 e0       	ldi	r25, 0x00	; 0
     f50:	90 34       	cpi	r25, 0x40	; 64
     f52:	70 f4       	brcc	.+28     	; 0xf70 <__LOCK_REGION_LENGTH__+0xb70>
     f54:	23 81       	ldd	r18, Z+3	; 0x03
     f56:	30 e0       	ldi	r19, 0x00	; 0
     f58:	32 2f       	mov	r19, r18
     f5a:	22 27       	eor	r18, r18
     f5c:	64 81       	ldd	r22, Z+4	; 0x04
     f5e:	26 2b       	or	r18, r22
     f60:	da 01       	movw	r26, r20
     f62:	aa 0f       	add	r26, r26
     f64:	bb 1f       	adc	r27, r27
     f66:	a6 5d       	subi	r26, 0xD6	; 214
     f68:	ba 4f       	sbci	r27, 0xFA	; 250
     f6a:	11 96       	adiw	r26, 0x01	; 1
     f6c:	3c 93       	st	X, r19
     f6e:	2e 93       	st	-X, r18
     f70:	9f 5f       	subi	r25, 0xFF	; 255
     f72:	4f 5f       	subi	r20, 0xFF	; 255
     f74:	5f 4f       	sbci	r21, 0xFF	; 255
     f76:	32 96       	adiw	r30, 0x02	; 2
     f78:	98 13       	cpse	r25, r24
     f7a:	ea cf       	rjmp	.-44     	; 0xf50 <__LOCK_REGION_LENGTH__+0xb50>
     f7c:	81 50       	subi	r24, 0x01	; 1
     f7e:	80 93 a3 04 	sts	0x04A3, r24	; 0x8004a3 <g_mod1_response_buffer_length>
     f82:	80 e0       	ldi	r24, 0x00	; 0
     f84:	03 c0       	rjmp	.+6      	; 0xf8c <__LOCK_REGION_LENGTH__+0xb8c>
     f86:	80 e0       	ldi	r24, 0x00	; 0
     f88:	01 c0       	rjmp	.+2      	; 0xf8c <__LOCK_REGION_LENGTH__+0xb8c>
     f8a:	80 e0       	ldi	r24, 0x00	; 0
     f8c:	10 92 a5 04 	sts	0x04A5, r1	; 0x8004a5 <g_mod1_transmit_buffer_index>
     f90:	10 92 a4 04 	sts	0x04A4, r1	; 0x8004a4 <g_mod1_response_buffer_index>
     f94:	7c c0       	rjmp	.+248    	; 0x108e <__LOCK_REGION_LENGTH__+0xc8e>
     f96:	84 ee       	ldi	r24, 0xE4	; 228
     f98:	7a c0       	rjmp	.+244    	; 0x108e <__LOCK_REGION_LENGTH__+0xc8e>
     f9a:	03 e0       	ldi	r16, 0x03	; 3
     f9c:	0e 94 15 22 	call	0x442a	; 0x442a <Get_millis>
     fa0:	dc 01       	movw	r26, r24
     fa2:	cb 01       	movw	r24, r22
     fa4:	88 19       	sub	r24, r8
     fa6:	99 09       	sbc	r25, r9
     fa8:	aa 09       	sbc	r26, r10
     faa:	bb 09       	sbc	r27, r11
     fac:	89 3c       	cpi	r24, 0xC9	; 201
     fae:	91 05       	cpc	r25, r1
     fb0:	a1 05       	cpc	r26, r1
     fb2:	b1 05       	cpc	r27, r1
     fb4:	08 f4       	brcc	.+2      	; 0xfb8 <__LOCK_REGION_LENGTH__+0xbb8>
     fb6:	f7 cb       	rjmp	.-2066   	; 0x7a6 <__LOCK_REGION_LENGTH__+0x3a6>
     fb8:	50 cc       	rjmp	.-1888   	; 0x85a <__LOCK_REGION_LENGTH__+0x45a>
     fba:	8f ef       	ldi	r24, 0xFF	; 255
     fbc:	9f ef       	ldi	r25, 0xFF	; 255
     fbe:	fe 01       	movw	r30, r28
     fc0:	ee 0d       	add	r30, r14
     fc2:	ff 1d       	adc	r31, r15
     fc4:	21 81       	ldd	r18, Z+1	; 0x01
     fc6:	30 e0       	ldi	r19, 0x00	; 0
     fc8:	ac 01       	movw	r20, r24
     fca:	55 27       	eor	r21, r21
     fcc:	42 17       	cp	r20, r18
     fce:	53 07       	cpc	r21, r19
     fd0:	09 f4       	brne	.+2      	; 0xfd4 <__LOCK_REGION_LENGTH__+0xbd4>
     fd2:	78 cc       	rjmp	.-1808   	; 0x8c4 <__LOCK_REGION_LENGTH__+0x4c4>
     fd4:	83 ee       	ldi	r24, 0xE3	; 227
     fd6:	e5 cc       	rjmp	.-1590   	; 0x9a2 <__LOCK_REGION_LENGTH__+0x5a2>
     fd8:	83 ee       	ldi	r24, 0xE3	; 227
     fda:	e3 cc       	rjmp	.-1594   	; 0x9a2 <__LOCK_REGION_LENGTH__+0x5a2>
     fdc:	8a 81       	ldd	r24, Y+2	; 0x02
     fde:	85 30       	cpi	r24, 0x05	; 5
     fe0:	38 f4       	brcc	.+14     	; 0xff0 <__LOCK_REGION_LENGTH__+0xbf0>
     fe2:	83 30       	cpi	r24, 0x03	; 3
     fe4:	08 f0       	brcs	.+2      	; 0xfe8 <__LOCK_REGION_LENGTH__+0xbe8>
     fe6:	7a cc       	rjmp	.-1804   	; 0x8dc <__LOCK_REGION_LENGTH__+0x4dc>
     fe8:	81 30       	cpi	r24, 0x01	; 1
     fea:	08 f0       	brcs	.+2      	; 0xfee <__LOCK_REGION_LENGTH__+0xbee>
     fec:	7c cc       	rjmp	.-1800   	; 0x8e6 <__LOCK_REGION_LENGTH__+0x4e6>
     fee:	d8 cc       	rjmp	.-1616   	; 0x9a0 <__LOCK_REGION_LENGTH__+0x5a0>
     ff0:	87 31       	cpi	r24, 0x17	; 23
     ff2:	09 f4       	brne	.+2      	; 0xff6 <__LOCK_REGION_LENGTH__+0xbf6>
     ff4:	73 cc       	rjmp	.-1818   	; 0x8dc <__LOCK_REGION_LENGTH__+0x4dc>
     ff6:	d4 cc       	rjmp	.-1624   	; 0x9a0 <__LOCK_REGION_LENGTH__+0x5a0>
     ff8:	70 fd       	sbrc	r23, 0
     ffa:	9d cc       	rjmp	.-1734   	; 0x936 <__LOCK_REGION_LENGTH__+0x536>
     ffc:	80 e0       	ldi	r24, 0x00	; 0
     ffe:	d1 cc       	rjmp	.-1630   	; 0x9a2 <__LOCK_REGION_LENGTH__+0x5a2>
    1000:	03 e0       	ldi	r16, 0x03	; 3
    1002:	0e 94 15 22 	call	0x442a	; 0x442a <Get_millis>
    1006:	dc 01       	movw	r26, r24
    1008:	cb 01       	movw	r24, r22
    100a:	88 19       	sub	r24, r8
    100c:	99 09       	sbc	r25, r9
    100e:	aa 09       	sbc	r26, r10
    1010:	bb 09       	sbc	r27, r11
    1012:	89 3c       	cpi	r24, 0xC9	; 201
    1014:	91 05       	cpc	r25, r1
    1016:	a1 05       	cpc	r26, r1
    1018:	b1 05       	cpc	r27, r1
    101a:	08 f4       	brcc	.+2      	; 0x101e <__LOCK_REGION_LENGTH__+0xc1e>
    101c:	bd ce       	rjmp	.-646    	; 0xd98 <__LOCK_REGION_LENGTH__+0x998>
    101e:	16 cf       	rjmp	.-468    	; 0xe4c <__LOCK_REGION_LENGTH__+0xa4c>
    1020:	8f ef       	ldi	r24, 0xFF	; 255
    1022:	9f ef       	ldi	r25, 0xFF	; 255
    1024:	fe 01       	movw	r30, r28
    1026:	ee 0d       	add	r30, r14
    1028:	ff 1d       	adc	r31, r15
    102a:	21 81       	ldd	r18, Z+1	; 0x01
    102c:	30 e0       	ldi	r19, 0x00	; 0
    102e:	ac 01       	movw	r20, r24
    1030:	55 27       	eor	r21, r21
    1032:	42 17       	cp	r20, r18
    1034:	53 07       	cpc	r21, r19
    1036:	09 f4       	brne	.+2      	; 0x103a <__LOCK_REGION_LENGTH__+0xc3a>
    1038:	3b cf       	rjmp	.-394    	; 0xeb0 <__LOCK_REGION_LENGTH__+0xab0>
    103a:	83 ee       	ldi	r24, 0xE3	; 227
    103c:	a7 cf       	rjmp	.-178    	; 0xf8c <__LOCK_REGION_LENGTH__+0xb8c>
    103e:	83 ee       	ldi	r24, 0xE3	; 227
    1040:	a5 cf       	rjmp	.-182    	; 0xf8c <__LOCK_REGION_LENGTH__+0xb8c>
    1042:	8a 81       	ldd	r24, Y+2	; 0x02
    1044:	85 30       	cpi	r24, 0x05	; 5
    1046:	38 f4       	brcc	.+14     	; 0x1056 <__LOCK_REGION_LENGTH__+0xc56>
    1048:	83 30       	cpi	r24, 0x03	; 3
    104a:	08 f0       	brcs	.+2      	; 0x104e <__LOCK_REGION_LENGTH__+0xc4e>
    104c:	3d cf       	rjmp	.-390    	; 0xec8 <__LOCK_REGION_LENGTH__+0xac8>
    104e:	81 30       	cpi	r24, 0x01	; 1
    1050:	08 f0       	brcs	.+2      	; 0x1054 <__LOCK_REGION_LENGTH__+0xc54>
    1052:	3e cf       	rjmp	.-388    	; 0xed0 <__LOCK_REGION_LENGTH__+0xad0>
    1054:	9a cf       	rjmp	.-204    	; 0xf8a <__LOCK_REGION_LENGTH__+0xb8a>
    1056:	87 31       	cpi	r24, 0x17	; 23
    1058:	09 f4       	brne	.+2      	; 0x105c <__LOCK_REGION_LENGTH__+0xc5c>
    105a:	36 cf       	rjmp	.-404    	; 0xec8 <__LOCK_REGION_LENGTH__+0xac8>
    105c:	96 cf       	rjmp	.-212    	; 0xf8a <__LOCK_REGION_LENGTH__+0xb8a>
    105e:	60 fd       	sbrc	r22, 0
    1060:	5f cf       	rjmp	.-322    	; 0xf20 <__LOCK_REGION_LENGTH__+0xb20>
    1062:	80 e0       	ldi	r24, 0x00	; 0
    1064:	93 cf       	rjmp	.-218    	; 0xf8c <__LOCK_REGION_LENGTH__+0xb8c>
    1066:	01 11       	cpse	r16, r1
    1068:	9e cb       	rjmp	.-2244   	; 0x7a6 <__LOCK_REGION_LENGTH__+0x3a6>
    106a:	80 e0       	ldi	r24, 0x00	; 0
    106c:	fd cb       	rjmp	.-2054   	; 0x868 <__LOCK_REGION_LENGTH__+0x468>
    106e:	01 11       	cpse	r16, r1
    1070:	93 ce       	rjmp	.-730    	; 0xd98 <__LOCK_REGION_LENGTH__+0x998>
    1072:	80 e0       	ldi	r24, 0x00	; 0
    1074:	f2 ce       	rjmp	.-540    	; 0xe5a <__LOCK_REGION_LENGTH__+0xa5a>
    1076:	80 ee       	ldi	r24, 0xE0	; 224
    1078:	94 cc       	rjmp	.-1752   	; 0x9a2 <__LOCK_REGION_LENGTH__+0x5a2>
    107a:	81 ee       	ldi	r24, 0xE1	; 225
    107c:	92 cc       	rjmp	.-1756   	; 0x9a2 <__LOCK_REGION_LENGTH__+0x5a2>
    107e:	82 ee       	ldi	r24, 0xE2	; 226
    1080:	90 cc       	rjmp	.-1760   	; 0x9a2 <__LOCK_REGION_LENGTH__+0x5a2>
    1082:	80 ee       	ldi	r24, 0xE0	; 224
    1084:	83 cf       	rjmp	.-250    	; 0xf8c <__LOCK_REGION_LENGTH__+0xb8c>
    1086:	81 ee       	ldi	r24, 0xE1	; 225
    1088:	81 cf       	rjmp	.-254    	; 0xf8c <__LOCK_REGION_LENGTH__+0xb8c>
    108a:	82 ee       	ldi	r24, 0xE2	; 226
    108c:	7f cf       	rjmp	.-258    	; 0xf8c <__LOCK_REGION_LENGTH__+0xb8c>
    108e:	d3 95       	inc	r29
    1090:	0f b6       	in	r0, 0x3f	; 63
    1092:	f8 94       	cli
    1094:	de bf       	out	0x3e, r29	; 62
    1096:	0f be       	out	0x3f, r0	; 63
    1098:	cd bf       	out	0x3d, r28	; 61
    109a:	df 91       	pop	r29
    109c:	cf 91       	pop	r28
    109e:	1f 91       	pop	r17
    10a0:	0f 91       	pop	r16
    10a2:	ff 90       	pop	r15
    10a4:	ef 90       	pop	r14
    10a6:	df 90       	pop	r13
    10a8:	bf 90       	pop	r11
    10aa:	af 90       	pop	r10
    10ac:	9f 90       	pop	r9
    10ae:	8f 90       	pop	r8
    10b0:	08 95       	ret

000010b2 <Modbus_init>:
    10b2:	fb 01       	movw	r30, r22
    10b4:	81 11       	cpse	r24, r1
    10b6:	8a c0       	rjmp	.+276    	; 0x11cc <Modbus_init+0x11a>
    10b8:	80 81       	ld	r24, Z
    10ba:	80 93 c8 06 	sts	0x06C8, r24	; 0x8006c8 <g_mod0_slave>
    10be:	41 81       	ldd	r20, Z+1	; 0x01
    10c0:	62 81       	ldd	r22, Z+2	; 0x02
    10c2:	73 81       	ldd	r23, Z+3	; 0x03
    10c4:	84 81       	ldd	r24, Z+4	; 0x04
    10c6:	95 81       	ldd	r25, Z+5	; 0x05
    10c8:	26 81       	ldd	r18, Z+6	; 0x06
    10ca:	37 81       	ldd	r19, Z+7	; 0x07
    10cc:	30 93 ba 05 	sts	0x05BA, r19	; 0x8005ba <g_mod0_pre_transmission+0x1>
    10d0:	20 93 b9 05 	sts	0x05B9, r18	; 0x8005b9 <g_mod0_pre_transmission>
    10d4:	20 85       	ldd	r18, Z+8	; 0x08
    10d6:	31 85       	ldd	r19, Z+9	; 0x09
    10d8:	30 93 b8 05 	sts	0x05B8, r19	; 0x8005b8 <g_mod0_post_transmission+0x1>
    10dc:	20 93 b7 05 	sts	0x05B7, r18	; 0x8005b7 <g_mod0_post_transmission>
    10e0:	22 85       	ldd	r18, Z+10	; 0x0a
    10e2:	33 85       	ldd	r19, Z+11	; 0x0b
    10e4:	30 93 bc 05 	sts	0x05BC, r19	; 0x8005bc <g_mod0_idle+0x1>
    10e8:	20 93 bb 05 	sts	0x05BB, r18	; 0x8005bb <g_mod0_idle>
    10ec:	10 92 be 05 	sts	0x05BE, r1	; 0x8005be <g_mod0_response_buffer_index>
    10f0:	10 92 bd 05 	sts	0x05BD, r1	; 0x8005bd <g_mod0_response_buffer_length>
    10f4:	41 30       	cpi	r20, 0x01	; 1
    10f6:	09 f5       	brne	.+66     	; 0x113a <Modbus_init+0x88>
    10f8:	20 91 94 04 	lds	r18, 0x0494	; 0x800494 <UART1_used.1996>
    10fc:	21 11       	cpse	r18, r1
    10fe:	cc c0       	rjmp	.+408    	; 0x1298 <Modbus_init+0x1e6>
    1100:	21 e0       	ldi	r18, 0x01	; 1
    1102:	20 93 94 04 	sts	0x0494, r18	; 0x800494 <UART1_used.1996>
    1106:	42 d7       	rcall	.+3716   	; 0x1f8c <UART1_init>
    1108:	84 e5       	ldi	r24, 0x54	; 84
    110a:	90 e1       	ldi	r25, 0x10	; 16
    110c:	90 93 b0 05 	sts	0x05B0, r25	; 0x8005b0 <g_mod0_Serial_available+0x1>
    1110:	80 93 af 05 	sts	0x05AF, r24	; 0x8005af <g_mod0_Serial_available>
    1114:	82 e6       	ldi	r24, 0x62	; 98
    1116:	90 e1       	ldi	r25, 0x10	; 16
    1118:	90 93 b2 05 	sts	0x05B2, r25	; 0x8005b2 <g_mod0_Serial_flush+0x1>
    111c:	80 93 b1 05 	sts	0x05B1, r24	; 0x8005b1 <g_mod0_Serial_flush>
    1120:	8b e1       	ldi	r24, 0x1B	; 27
    1122:	90 e1       	ldi	r25, 0x10	; 16
    1124:	90 93 b4 05 	sts	0x05B4, r25	; 0x8005b4 <g_mod0_Serial_getc+0x1>
    1128:	80 93 b3 05 	sts	0x05B3, r24	; 0x8005b3 <g_mod0_Serial_getc>
    112c:	8b e3       	ldi	r24, 0x3B	; 59
    112e:	90 e1       	ldi	r25, 0x10	; 16
    1130:	90 93 b6 05 	sts	0x05B6, r25	; 0x8005b6 <g_mod0_Serial_putc+0x1>
    1134:	80 93 b5 05 	sts	0x05B5, r24	; 0x8005b5 <g_mod0_Serial_putc>
    1138:	08 95       	ret
    113a:	42 30       	cpi	r20, 0x02	; 2
    113c:	11 f5       	brne	.+68     	; 0x1182 <Modbus_init+0xd0>
    113e:	20 91 93 04 	lds	r18, 0x0493	; 0x800493 <UART2_used.1997>
    1142:	21 11       	cpse	r18, r1
    1144:	a9 c0       	rjmp	.+338    	; 0x1298 <Modbus_init+0x1e6>
    1146:	21 e0       	ldi	r18, 0x01	; 1
    1148:	20 93 93 04 	sts	0x0493, r18	; 0x800493 <UART2_used.1997>
    114c:	0e 94 d5 10 	call	0x21aa	; 0x21aa <UART2_init>
    1150:	80 e6       	ldi	r24, 0x60	; 96
    1152:	91 e1       	ldi	r25, 0x11	; 17
    1154:	90 93 b0 05 	sts	0x05B0, r25	; 0x8005b0 <g_mod0_Serial_available+0x1>
    1158:	80 93 af 05 	sts	0x05AF, r24	; 0x8005af <g_mod0_Serial_available>
    115c:	8e e6       	ldi	r24, 0x6E	; 110
    115e:	91 e1       	ldi	r25, 0x11	; 17
    1160:	90 93 b2 05 	sts	0x05B2, r25	; 0x8005b2 <g_mod0_Serial_flush+0x1>
    1164:	80 93 b1 05 	sts	0x05B1, r24	; 0x8005b1 <g_mod0_Serial_flush>
    1168:	8a e2       	ldi	r24, 0x2A	; 42
    116a:	91 e1       	ldi	r25, 0x11	; 17
    116c:	90 93 b4 05 	sts	0x05B4, r25	; 0x8005b4 <g_mod0_Serial_getc+0x1>
    1170:	80 93 b3 05 	sts	0x05B3, r24	; 0x8005b3 <g_mod0_Serial_getc>
    1174:	87 e4       	ldi	r24, 0x47	; 71
    1176:	91 e1       	ldi	r25, 0x11	; 17
    1178:	90 93 b6 05 	sts	0x05B6, r25	; 0x8005b6 <g_mod0_Serial_putc+0x1>
    117c:	80 93 b5 05 	sts	0x05B5, r24	; 0x8005b5 <g_mod0_Serial_putc>
    1180:	08 95       	ret
    1182:	43 30       	cpi	r20, 0x03	; 3
    1184:	09 f0       	breq	.+2      	; 0x1188 <Modbus_init+0xd6>
    1186:	88 c0       	rjmp	.+272    	; 0x1298 <Modbus_init+0x1e6>
    1188:	20 91 92 04 	lds	r18, 0x0492	; 0x800492 <UART3_used.1998>
    118c:	21 11       	cpse	r18, r1
    118e:	84 c0       	rjmp	.+264    	; 0x1298 <Modbus_init+0x1e6>
    1190:	21 e0       	ldi	r18, 0x01	; 1
    1192:	20 93 92 04 	sts	0x0492, r18	; 0x800492 <UART3_used.1998>
    1196:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <UART3_init>
    119a:	8c e6       	ldi	r24, 0x6C	; 108
    119c:	92 e1       	ldi	r25, 0x12	; 18
    119e:	90 93 b0 05 	sts	0x05B0, r25	; 0x8005b0 <g_mod0_Serial_available+0x1>
    11a2:	80 93 af 05 	sts	0x05AF, r24	; 0x8005af <g_mod0_Serial_available>
    11a6:	8a e7       	ldi	r24, 0x7A	; 122
    11a8:	92 e1       	ldi	r25, 0x12	; 18
    11aa:	90 93 b2 05 	sts	0x05B2, r25	; 0x8005b2 <g_mod0_Serial_flush+0x1>
    11ae:	80 93 b1 05 	sts	0x05B1, r24	; 0x8005b1 <g_mod0_Serial_flush>
    11b2:	86 e3       	ldi	r24, 0x36	; 54
    11b4:	92 e1       	ldi	r25, 0x12	; 18
    11b6:	90 93 b4 05 	sts	0x05B4, r25	; 0x8005b4 <g_mod0_Serial_getc+0x1>
    11ba:	80 93 b3 05 	sts	0x05B3, r24	; 0x8005b3 <g_mod0_Serial_getc>
    11be:	83 e5       	ldi	r24, 0x53	; 83
    11c0:	92 e1       	ldi	r25, 0x12	; 18
    11c2:	90 93 b6 05 	sts	0x05B6, r25	; 0x8005b6 <g_mod0_Serial_putc+0x1>
    11c6:	80 93 b5 05 	sts	0x05B5, r24	; 0x8005b5 <g_mod0_Serial_putc>
    11ca:	08 95       	ret
    11cc:	81 30       	cpi	r24, 0x01	; 1
    11ce:	09 f0       	breq	.+2      	; 0x11d2 <Modbus_init+0x120>
    11d0:	63 c0       	rjmp	.+198    	; 0x1298 <Modbus_init+0x1e6>
    11d2:	80 81       	ld	r24, Z
    11d4:	80 93 ae 05 	sts	0x05AE, r24	; 0x8005ae <g_mod1_slave>
    11d8:	41 81       	ldd	r20, Z+1	; 0x01
    11da:	62 81       	ldd	r22, Z+2	; 0x02
    11dc:	73 81       	ldd	r23, Z+3	; 0x03
    11de:	84 81       	ldd	r24, Z+4	; 0x04
    11e0:	95 81       	ldd	r25, Z+5	; 0x05
    11e2:	26 81       	ldd	r18, Z+6	; 0x06
    11e4:	37 81       	ldd	r19, Z+7	; 0x07
    11e6:	30 93 a0 04 	sts	0x04A0, r19	; 0x8004a0 <g_mod1_pre_transmission+0x1>
    11ea:	20 93 9f 04 	sts	0x049F, r18	; 0x80049f <g_mod1_pre_transmission>
    11ee:	20 85       	ldd	r18, Z+8	; 0x08
    11f0:	31 85       	ldd	r19, Z+9	; 0x09
    11f2:	30 93 9e 04 	sts	0x049E, r19	; 0x80049e <g_mod1_post_transmission+0x1>
    11f6:	20 93 9d 04 	sts	0x049D, r18	; 0x80049d <g_mod1_post_transmission>
    11fa:	22 85       	ldd	r18, Z+10	; 0x0a
    11fc:	33 85       	ldd	r19, Z+11	; 0x0b
    11fe:	30 93 a2 04 	sts	0x04A2, r19	; 0x8004a2 <g_mod1_idle+0x1>
    1202:	20 93 a1 04 	sts	0x04A1, r18	; 0x8004a1 <g_mod1_idle>
    1206:	10 92 a4 04 	sts	0x04A4, r1	; 0x8004a4 <g_mod1_response_buffer_index>
    120a:	10 92 a3 04 	sts	0x04A3, r1	; 0x8004a3 <g_mod1_response_buffer_length>
    120e:	41 30       	cpi	r20, 0x01	; 1
    1210:	09 f5       	brne	.+66     	; 0x1254 <Modbus_init+0x1a2>
    1212:	20 91 94 04 	lds	r18, 0x0494	; 0x800494 <UART1_used.1996>
    1216:	21 11       	cpse	r18, r1
    1218:	3f c0       	rjmp	.+126    	; 0x1298 <Modbus_init+0x1e6>
    121a:	21 e0       	ldi	r18, 0x01	; 1
    121c:	20 93 94 04 	sts	0x0494, r18	; 0x800494 <UART1_used.1996>
    1220:	b5 d6       	rcall	.+3434   	; 0x1f8c <UART1_init>
    1222:	84 e5       	ldi	r24, 0x54	; 84
    1224:	90 e1       	ldi	r25, 0x10	; 16
    1226:	90 93 98 04 	sts	0x0498, r25	; 0x800498 <g_mod1_Serial_available+0x1>
    122a:	80 93 97 04 	sts	0x0497, r24	; 0x800497 <g_mod1_Serial_available>
    122e:	82 e6       	ldi	r24, 0x62	; 98
    1230:	90 e1       	ldi	r25, 0x10	; 16
    1232:	90 93 96 04 	sts	0x0496, r25	; 0x800496 <g_mod1_Serial_flush+0x1>
    1236:	80 93 95 04 	sts	0x0495, r24	; 0x800495 <g_mod1_Serial_flush>
    123a:	8b e1       	ldi	r24, 0x1B	; 27
    123c:	90 e1       	ldi	r25, 0x10	; 16
    123e:	90 93 9a 04 	sts	0x049A, r25	; 0x80049a <g_mod1_Serial_getc+0x1>
    1242:	80 93 99 04 	sts	0x0499, r24	; 0x800499 <g_mod1_Serial_getc>
    1246:	8b e3       	ldi	r24, 0x3B	; 59
    1248:	90 e1       	ldi	r25, 0x10	; 16
    124a:	90 93 9c 04 	sts	0x049C, r25	; 0x80049c <g_mod1_Serial_putc+0x1>
    124e:	80 93 9b 04 	sts	0x049B, r24	; 0x80049b <g_mod1_Serial_putc>
    1252:	08 95       	ret
    1254:	42 30       	cpi	r20, 0x02	; 2
    1256:	01 f5       	brne	.+64     	; 0x1298 <Modbus_init+0x1e6>
    1258:	20 91 93 04 	lds	r18, 0x0493	; 0x800493 <UART2_used.1997>
    125c:	21 11       	cpse	r18, r1
    125e:	1c c0       	rjmp	.+56     	; 0x1298 <Modbus_init+0x1e6>
    1260:	21 e0       	ldi	r18, 0x01	; 1
    1262:	20 93 93 04 	sts	0x0493, r18	; 0x800493 <UART2_used.1997>
    1266:	a1 d7       	rcall	.+3906   	; 0x21aa <UART2_init>
    1268:	80 e6       	ldi	r24, 0x60	; 96
    126a:	91 e1       	ldi	r25, 0x11	; 17
    126c:	90 93 98 04 	sts	0x0498, r25	; 0x800498 <g_mod1_Serial_available+0x1>
    1270:	80 93 97 04 	sts	0x0497, r24	; 0x800497 <g_mod1_Serial_available>
    1274:	8e e6       	ldi	r24, 0x6E	; 110
    1276:	91 e1       	ldi	r25, 0x11	; 17
    1278:	90 93 96 04 	sts	0x0496, r25	; 0x800496 <g_mod1_Serial_flush+0x1>
    127c:	80 93 95 04 	sts	0x0495, r24	; 0x800495 <g_mod1_Serial_flush>
    1280:	8a e2       	ldi	r24, 0x2A	; 42
    1282:	91 e1       	ldi	r25, 0x11	; 17
    1284:	90 93 9a 04 	sts	0x049A, r25	; 0x80049a <g_mod1_Serial_getc+0x1>
    1288:	80 93 99 04 	sts	0x0499, r24	; 0x800499 <g_mod1_Serial_getc>
    128c:	87 e4       	ldi	r24, 0x47	; 71
    128e:	91 e1       	ldi	r25, 0x11	; 17
    1290:	90 93 9c 04 	sts	0x049C, r25	; 0x80049c <g_mod1_Serial_putc+0x1>
    1294:	80 93 9b 04 	sts	0x049B, r24	; 0x80049b <g_mod1_Serial_putc>
    1298:	08 95       	ret

0000129a <Modbus_Get_response_buffer>:
    129a:	81 11       	cpse	r24, r1
    129c:	0b c0       	rjmp	.+22     	; 0x12b4 <Modbus_Get_response_buffer+0x1a>
    129e:	60 34       	cpi	r22, 0x40	; 64
    12a0:	b0 f4       	brcc	.+44     	; 0x12ce <Modbus_Get_response_buffer+0x34>
    12a2:	e6 2f       	mov	r30, r22
    12a4:	f0 e0       	ldi	r31, 0x00	; 0
    12a6:	ee 0f       	add	r30, r30
    12a8:	ff 1f       	adc	r31, r31
    12aa:	ec 5b       	subi	r30, 0xBC	; 188
    12ac:	f9 4f       	sbci	r31, 0xF9	; 249
    12ae:	80 81       	ld	r24, Z
    12b0:	91 81       	ldd	r25, Z+1	; 0x01
    12b2:	08 95       	ret
    12b4:	81 30       	cpi	r24, 0x01	; 1
    12b6:	71 f4       	brne	.+28     	; 0x12d4 <Modbus_Get_response_buffer+0x3a>
    12b8:	60 34       	cpi	r22, 0x40	; 64
    12ba:	78 f4       	brcc	.+30     	; 0x12da <Modbus_Get_response_buffer+0x40>
    12bc:	e6 2f       	mov	r30, r22
    12be:	f0 e0       	ldi	r31, 0x00	; 0
    12c0:	ee 0f       	add	r30, r30
    12c2:	ff 1f       	adc	r31, r31
    12c4:	e6 5d       	subi	r30, 0xD6	; 214
    12c6:	fa 4f       	sbci	r31, 0xFA	; 250
    12c8:	80 81       	ld	r24, Z
    12ca:	91 81       	ldd	r25, Z+1	; 0x01
    12cc:	08 95       	ret
    12ce:	8f ef       	ldi	r24, 0xFF	; 255
    12d0:	9f ef       	ldi	r25, 0xFF	; 255
    12d2:	08 95       	ret
    12d4:	8f ef       	ldi	r24, 0xFF	; 255
    12d6:	9f ef       	ldi	r25, 0xFF	; 255
    12d8:	08 95       	ret
    12da:	8f ef       	ldi	r24, 0xFF	; 255
    12dc:	9f ef       	ldi	r25, 0xFF	; 255
    12de:	08 95       	ret

000012e0 <Modbus_Set_transmit_buffer>:
    12e0:	81 11       	cpse	r24, r1
    12e2:	0b c0       	rjmp	.+22     	; 0x12fa <Modbus_Set_transmit_buffer+0x1a>
    12e4:	60 34       	cpi	r22, 0x40	; 64
    12e6:	b8 f4       	brcc	.+46     	; 0x1316 <Modbus_Set_transmit_buffer+0x36>
    12e8:	e6 2f       	mov	r30, r22
    12ea:	f0 e0       	ldi	r31, 0x00	; 0
    12ec:	ee 0f       	add	r30, r30
    12ee:	ff 1f       	adc	r31, r31
    12f0:	e0 54       	subi	r30, 0x40	; 64
    12f2:	fa 4f       	sbci	r31, 0xFA	; 250
    12f4:	51 83       	std	Z+1, r21	; 0x01
    12f6:	40 83       	st	Z, r20
    12f8:	08 95       	ret
    12fa:	81 30       	cpi	r24, 0x01	; 1
    12fc:	71 f4       	brne	.+28     	; 0x131a <Modbus_Set_transmit_buffer+0x3a>
    12fe:	60 34       	cpi	r22, 0x40	; 64
    1300:	70 f4       	brcc	.+28     	; 0x131e <Modbus_Set_transmit_buffer+0x3e>
    1302:	e6 2f       	mov	r30, r22
    1304:	f0 e0       	ldi	r31, 0x00	; 0
    1306:	ee 0f       	add	r30, r30
    1308:	ff 1f       	adc	r31, r31
    130a:	ea 55       	subi	r30, 0x5A	; 90
    130c:	fb 4f       	sbci	r31, 0xFB	; 251
    130e:	51 83       	std	Z+1, r21	; 0x01
    1310:	40 83       	st	Z, r20
    1312:	80 e0       	ldi	r24, 0x00	; 0
    1314:	08 95       	ret
    1316:	82 e0       	ldi	r24, 0x02	; 2
    1318:	08 95       	ret
    131a:	82 e0       	ldi	r24, 0x02	; 2
    131c:	08 95       	ret
    131e:	82 e0       	ldi	r24, 0x02	; 2
    1320:	08 95       	ret

00001322 <Modbus_Read_holding_registers>:
    1322:	81 11       	cpse	r24, r1
    1324:	0b c0       	rjmp	.+22     	; 0x133c <Modbus_Read_holding_registers+0x1a>
    1326:	70 93 c7 06 	sts	0x06C7, r23	; 0x8006c7 <g_mod0_read_address+0x1>
    132a:	60 93 c6 06 	sts	0x06C6, r22	; 0x8006c6 <g_mod0_read_address>
    132e:	50 93 c5 06 	sts	0x06C5, r21	; 0x8006c5 <g_mod0_read_qty+0x1>
    1332:	40 93 c4 06 	sts	0x06C4, r20	; 0x8006c4 <g_mod0_read_qty>
    1336:	63 e0       	ldi	r22, 0x03	; 3
    1338:	2e c8       	rjmp	.-4004   	; 0x396 <Modbus_mster_transaction>
    133a:	08 95       	ret
    133c:	81 30       	cpi	r24, 0x01	; 1
    133e:	59 f4       	brne	.+22     	; 0x1356 <Modbus_Read_holding_registers+0x34>
    1340:	70 93 ad 05 	sts	0x05AD, r23	; 0x8005ad <g_mod1_read_address+0x1>
    1344:	60 93 ac 05 	sts	0x05AC, r22	; 0x8005ac <g_mod1_read_address>
    1348:	50 93 ab 05 	sts	0x05AB, r21	; 0x8005ab <g_mod1_read_qty+0x1>
    134c:	40 93 aa 05 	sts	0x05AA, r20	; 0x8005aa <g_mod1_read_qty>
    1350:	63 e0       	ldi	r22, 0x03	; 3
    1352:	21 c8       	rjmp	.-4030   	; 0x396 <Modbus_mster_transaction>
    1354:	08 95       	ret
    1356:	84 ee       	ldi	r24, 0xE4	; 228
    1358:	08 95       	ret

0000135a <Modbus_Our_write_multiple_coils>:

/** Our write multiple coils  **/
uint8_t Modbus_Our_write_multiple_coils(uint8_t device, uint16_t u16WriteAddress, uint16_t u16BitQty)
{
	if(DEVICE_0 == device){
    135a:	81 11       	cpse	r24, r1
    135c:	0b c0       	rjmp	.+22     	; 0x1374 <Modbus_Our_write_multiple_coils+0x1a>
		g_mod0_write_address = u16WriteAddress;
    135e:	70 93 43 06 	sts	0x0643, r23	; 0x800643 <g_mod0_write_address+0x1>
    1362:	60 93 42 06 	sts	0x0642, r22	; 0x800642 <g_mod0_write_address>
		g_mod0_write_qty = u16BitQty;
    1366:	50 93 41 06 	sts	0x0641, r21	; 0x800641 <g_mod0_write_qty+0x1>
    136a:	40 93 40 06 	sts	0x0640, r20	; 0x800640 <g_mod0_write_qty>
		return Modbus_mster_transaction(device, OUR_WRITE_MULTIPLE_COILS);
    136e:	6f ef       	ldi	r22, 0xFF	; 255
    1370:	12 c8       	rjmp	.-4060   	; 0x396 <Modbus_mster_transaction>
    1372:	08 95       	ret

	}
	else if(DEVICE_1 == device){
    1374:	81 30       	cpi	r24, 0x01	; 1
    1376:	59 f4       	brne	.+22     	; 0x138e <Modbus_Our_write_multiple_coils+0x34>
		g_mod1_write_address = u16WriteAddress;
    1378:	70 93 29 05 	sts	0x0529, r23	; 0x800529 <g_mod1_write_address+0x1>
    137c:	60 93 28 05 	sts	0x0528, r22	; 0x800528 <g_mod1_write_address>
		g_mod1_write_qty = u16BitQty;
    1380:	50 93 27 05 	sts	0x0527, r21	; 0x800527 <g_mod1_write_qty+0x1>
    1384:	40 93 26 05 	sts	0x0526, r20	; 0x800526 <g_mod1_write_qty>
		return Modbus_mster_transaction(device, OUR_WRITE_MULTIPLE_COILS);
    1388:	6f ef       	ldi	r22, 0xFF	; 255
    138a:	05 c8       	rjmp	.-4086   	; 0x396 <Modbus_mster_transaction>
    138c:	08 95       	ret
	}
	return INVALID_DEVICE; //error
    138e:	84 ee       	ldi	r24, 0xE4	; 228
}
    1390:	08 95       	ret

00001392 <Modbus_Write_multiple_registers>:
@return 0 on success; exception number on failure
@ingroup register
*/
uint8_t Modbus_Write_multiple_registers(uint8_t device,uint16_t u16WriteAddress, uint16_t u16WriteQty)
{
	if(DEVICE_0 == device){
    1392:	81 11       	cpse	r24, r1
    1394:	0c c0       	rjmp	.+24     	; 0x13ae <Modbus_Write_multiple_registers+0x1c>
	
		g_mod0_write_address = u16WriteAddress;
    1396:	70 93 43 06 	sts	0x0643, r23	; 0x800643 <g_mod0_write_address+0x1>
    139a:	60 93 42 06 	sts	0x0642, r22	; 0x800642 <g_mod0_write_address>
		g_mod0_write_qty = u16WriteQty;
    139e:	50 93 41 06 	sts	0x0641, r21	; 0x800641 <g_mod0_write_qty+0x1>
    13a2:	40 93 40 06 	sts	0x0640, r20	; 0x800640 <g_mod0_write_qty>
		return Modbus_mster_transaction(device, WRITE_MULTIPLE_REGISTERS);
    13a6:	60 e1       	ldi	r22, 0x10	; 16
    13a8:	0c 94 cb 01 	jmp	0x396	; 0x396 <Modbus_mster_transaction>
    13ac:	08 95       	ret
	}
	else if(DEVICE_1 == device){
    13ae:	81 30       	cpi	r24, 0x01	; 1
    13b0:	61 f4       	brne	.+24     	; 0x13ca <Modbus_Write_multiple_registers+0x38>
		g_mod1_write_address = u16WriteAddress;
    13b2:	70 93 29 05 	sts	0x0529, r23	; 0x800529 <g_mod1_write_address+0x1>
    13b6:	60 93 28 05 	sts	0x0528, r22	; 0x800528 <g_mod1_write_address>
		g_mod1_write_qty = u16WriteQty;
    13ba:	50 93 27 05 	sts	0x0527, r21	; 0x800527 <g_mod1_write_qty+0x1>
    13be:	40 93 26 05 	sts	0x0526, r20	; 0x800526 <g_mod1_write_qty>
		return Modbus_mster_transaction(device, WRITE_MULTIPLE_REGISTERS);
    13c2:	60 e1       	ldi	r22, 0x10	; 16
    13c4:	0c 94 cb 01 	jmp	0x396	; 0x396 <Modbus_mster_transaction>
    13c8:	08 95       	ret
	}
	return  INVALID_DEVICE;
    13ca:	84 ee       	ldi	r24, 0xE4	; 228
}
    13cc:	08 95       	ret

000013ce <temp_init>:

void temp_init(uint8_t channal)
{
	// initialize the ADC module in order to be able
	// to get reading from the sensor.
	ADC_init(channal);
    13ce:	7d c1       	rjmp	.+762    	; 0x16ca <ADC_init>
    13d0:	08 95       	ret

000013d2 <temp_read>:
}

uint16_t temp_read(void)
{
    13d2:	cf 92       	push	r12
    13d4:	df 92       	push	r13
    13d6:	ef 92       	push	r14
    13d8:	ff 92       	push	r15
    13da:	cf 93       	push	r28
    13dc:	cf e0       	ldi	r28, 0x0F	; 15
	// this function returns the temperature sensor reading
	double Temp ,  vout, rt, a = 0.0039083 , r0 =100, y, b = -0.000000577,x ;
	// sum of samples taken
	double sum = 0.0;
    13de:	c1 2c       	mov	r12, r1
    13e0:	d1 2c       	mov	r13, r1
    13e2:	76 01       	movw	r14, r12
	unsigned char sample_count = 0;

    // read 30 values of ADC and take their average.
 	while (sample_count < 15)
	{
	      uint16_t xx  = ADC_read();
    13e4:	94 d1       	rcall	.+808    	; 0x170e <ADC_read>
	      sum += xx;
    13e6:	bc 01       	movw	r22, r24
    13e8:	80 e0       	ldi	r24, 0x00	; 0
    13ea:	90 e0       	ldi	r25, 0x00	; 0
    13ec:	0e 94 3e 23 	call	0x467c	; 0x467c <__floatunsisf>
    13f0:	9b 01       	movw	r18, r22
    13f2:	ac 01       	movw	r20, r24
    13f4:	c7 01       	movw	r24, r14
    13f6:	b6 01       	movw	r22, r12
    13f8:	0e 94 46 22 	call	0x448c	; 0x448c <__addsf3>
    13fc:	6b 01       	movw	r12, r22
    13fe:	7c 01       	movw	r14, r24
	      sample_count++;
		  vTaskDelay(1/portTICK_PERIOD_MS);
    1400:	80 e0       	ldi	r24, 0x00	; 0
    1402:	90 e0       	ldi	r25, 0x00	; 0
    1404:	0e 94 d3 1b 	call	0x37a6	; 0x37a6 <vTaskDelay>
    1408:	c1 50       	subi	r28, 0x01	; 1
	double sum = 0.0;
	// current sample number
	unsigned char sample_count = 0;

    // read 30 values of ADC and take their average.
 	while (sample_count < 15)
    140a:	61 f7       	brne	.-40     	; 0x13e4 <temp_read+0x12>
	      sample_count++;
		  vTaskDelay(1/portTICK_PERIOD_MS);
	}
     
    // the average of ADC readings
	 vout = (double)sum / (double)15;
    140c:	20 e0       	ldi	r18, 0x00	; 0
    140e:	30 e0       	ldi	r19, 0x00	; 0
    1410:	40 e7       	ldi	r20, 0x70	; 112
    1412:	51 e4       	ldi	r21, 0x41	; 65
    1414:	c7 01       	movw	r24, r14
    1416:	b6 01       	movw	r22, r12
    1418:	0e 94 aa 22 	call	0x4554	; 0x4554 <__divsf3>
	 //UART0_puts("volt :");

     
	 vout  = vout * 2.484;
    141c:	2b ed       	ldi	r18, 0xDB	; 219
    141e:	39 ef       	ldi	r19, 0xF9	; 249
    1420:	4e e1       	ldi	r20, 0x1E	; 30
    1422:	50 e4       	ldi	r21, 0x40	; 64
    1424:	0e 94 cc 23 	call	0x4798	; 0x4798 <__mulsf3>

	 // some math equations to Get The temperature value from ADC reading.
	 Temp = (-1 * a) ;
	 x =  pow(a,2);
	 y = 4  * b * (1 - (rt/r0));
	 x = x - y;
    1428:	20 e0       	ldi	r18, 0x00	; 0
    142a:	30 e0       	ldi	r19, 0x00	; 0
    142c:	40 e8       	ldi	r20, 0x80	; 128
    142e:	5a e3       	ldi	r21, 0x3A	; 58
    1430:	0e 94 cc 23 	call	0x4798	; 0x4798 <__mulsf3>
    1434:	20 e0       	ldi	r18, 0x00	; 0
    1436:	30 e0       	ldi	r19, 0x00	; 0
    1438:	4a e7       	ldi	r20, 0x7A	; 122
    143a:	54 e4       	ldi	r21, 0x44	; 68
    143c:	0e 94 cc 23 	call	0x4798	; 0x4798 <__mulsf3>
    1440:	23 e0       	ldi	r18, 0x03	; 3
    1442:	39 e0       	ldi	r19, 0x09	; 9
    1444:	42 ef       	ldi	r20, 0xF2	; 242
    1446:	50 e4       	ldi	r21, 0x40	; 64
    1448:	0e 94 aa 22 	call	0x4554	; 0x4554 <__divsf3>
    144c:	20 e0       	ldi	r18, 0x00	; 0
    144e:	30 e0       	ldi	r19, 0x00	; 0
    1450:	48 ec       	ldi	r20, 0xC8	; 200
    1452:	52 e4       	ldi	r21, 0x42	; 66
    1454:	0e 94 aa 22 	call	0x4554	; 0x4554 <__divsf3>
    1458:	9b 01       	movw	r18, r22
    145a:	ac 01       	movw	r20, r24
    145c:	60 e0       	ldi	r22, 0x00	; 0
    145e:	70 e0       	ldi	r23, 0x00	; 0
    1460:	80 e8       	ldi	r24, 0x80	; 128
    1462:	9f e3       	ldi	r25, 0x3F	; 63
    1464:	0e 94 45 22 	call	0x448a	; 0x448a <__subsf3>
    1468:	23 e2       	ldi	r18, 0x23	; 35
    146a:	33 ee       	ldi	r19, 0xE3	; 227
    146c:	4a e1       	ldi	r20, 0x1A	; 26
    146e:	56 eb       	ldi	r21, 0xB6	; 182
    1470:	0e 94 cc 23 	call	0x4798	; 0x4798 <__mulsf3>
    1474:	9b 01       	movw	r18, r22
    1476:	ac 01       	movw	r20, r24
    1478:	66 e6       	ldi	r22, 0x66	; 102
    147a:	72 e2       	ldi	r23, 0x22	; 34
    147c:	80 e8       	ldi	r24, 0x80	; 128
    147e:	97 e3       	ldi	r25, 0x37	; 55
    1480:	0e 94 45 22 	call	0x448a	; 0x448a <__subsf3>
	 x = pow(x,0.5);
    1484:	20 e0       	ldi	r18, 0x00	; 0
    1486:	30 e0       	ldi	r19, 0x00	; 0
    1488:	40 e0       	ldi	r20, 0x00	; 0
    148a:	5f e3       	ldi	r21, 0x3F	; 63
    148c:	0e 94 2f 24 	call	0x485e	; 0x485e <pow>
	 Temp = Temp + x ;
    1490:	22 e3       	ldi	r18, 0x32	; 50
    1492:	31 e1       	ldi	r19, 0x11	; 17
    1494:	40 e8       	ldi	r20, 0x80	; 128
    1496:	5b e3       	ldi	r21, 0x3B	; 59
    1498:	0e 94 45 22 	call	0x448a	; 0x448a <__subsf3>
	 Temp /= (2 * b);

	 return round(Temp);
    149c:	23 e2       	ldi	r18, 0x23	; 35
    149e:	33 ee       	ldi	r19, 0xE3	; 227
    14a0:	4a e9       	ldi	r20, 0x9A	; 154
    14a2:	55 eb       	ldi	r21, 0xB5	; 181
    14a4:	0e 94 aa 22 	call	0x4554	; 0x4554 <__divsf3>
    14a8:	0e 94 7b 24 	call	0x48f6	; 0x48f6 <round>
    14ac:	0e 94 12 23 	call	0x4624	; 0x4624 <__fixunssfsi>
}
    14b0:	cb 01       	movw	r24, r22
    14b2:	cf 91       	pop	r28
    14b4:	ff 90       	pop	r15
    14b6:	ef 90       	pop	r14
    14b8:	df 90       	pop	r13
    14ba:	cf 90       	pop	r12
    14bc:	08 95       	ret

000014be <Temperature_over_temp>:
	UART0_puts("Level_sensor_error_callback \n");
}

/******* Over Temp functions for error callbacks **********************************************/
static void Temperature_over_temp(void){
	UART0_puts("Temperature_over_temp \n");
    14be:	82 e3       	ldi	r24, 0x32	; 50
    14c0:	92 e0       	ldi	r25, 0x02	; 2
    14c2:	e8 c4       	rjmp	.+2512   	; 0x1e94 <UART0_puts>
    14c4:	08 95       	ret

000014c6 <Level_sensor_error_callback>:
	
}

/******* Level sensors functions for error callbacks **********************************************/
static void Level_sensor_error_callback(void){
	UART0_puts("Level_sensor_error_callback \n");
    14c6:	8a e4       	ldi	r24, 0x4A	; 74
    14c8:	92 e0       	ldi	r25, 0x02	; 2
    14ca:	e4 c4       	rjmp	.+2504   	; 0x1e94 <UART0_puts>
    14cc:	08 95       	ret

000014ce <LCD_writeTimeout>:
static void LCD_readTimeout(void){
	UART0_puts("LCD_READ_TIMEOUT ---------------------------- \n");
}

static void LCD_writeTimeout(void){
	UART0_puts("LCD_WRITE_TIMEOUT ++++++++++++++++++++++++++++ \n");
    14ce:	88 e6       	ldi	r24, 0x68	; 104
    14d0:	92 e0       	ldi	r25, 0x02	; 2
    14d2:	e0 c4       	rjmp	.+2496   	; 0x1e94 <UART0_puts>
    14d4:	08 95       	ret

000014d6 <LCD_readTimeout>:

//debug
#include "MCAL/UART.h"
/******* LCD callback functions for errors callbacks ***********************************************/
static void LCD_readTimeout(void){
	UART0_puts("LCD_READ_TIMEOUT ---------------------------- \n");
    14d6:	89 e9       	ldi	r24, 0x99	; 153
    14d8:	92 e0       	ldi	r25, 0x02	; 2
    14da:	dc c4       	rjmp	.+2488   	; 0x1e94 <UART0_puts>
    14dc:	08 95       	ret

000014de <Service_error_init>:
	
}


void Service_error_init(void){
		LCD_main_err_Init(LCD_readTimeout,LCD_writeTimeout);
    14de:	67 e6       	ldi	r22, 0x67	; 103
    14e0:	7a e0       	ldi	r23, 0x0A	; 10
    14e2:	8b e6       	ldi	r24, 0x6B	; 107
    14e4:	9a e0       	ldi	r25, 0x0A	; 10
    14e6:	0e 94 7d 20 	call	0x40fa	; 0x40fa <LCD_main_err_Init>
		Level_main_err_init(Level_sensor_error_callback);
    14ea:	83 e6       	ldi	r24, 0x63	; 99
    14ec:	9a e0       	ldi	r25, 0x0A	; 10
    14ee:	0e 94 25 21 	call	0x424a	; 0x424a <Level_main_err_init>
		Temp_main_err_init(Temperature_over_temp);
    14f2:	8f e5       	ldi	r24, 0x5F	; 95
    14f4:	9a e0       	ldi	r25, 0x0A	; 10
    14f6:	0c 94 b2 21 	jmp	0x4364	; 0x4364 <Temp_main_err_init>
    14fa:	08 95       	ret

000014fc <vTask5>:
	while(1)
	{
		// Watch_dog_change_state(HIGH);
		//
		// Watch_dog_change_state(LOW);
		 vTaskDelay(500/portTICK_PERIOD_MS);
    14fc:	8f e1       	ldi	r24, 0x1F	; 31
    14fe:	90 e0       	ldi	r25, 0x00	; 0
    1500:	0e 94 d3 1b 	call	0x37a6	; 0x37a6 <vTaskDelay>
    1504:	fb cf       	rjmp	.-10     	; 0x14fc <vTask5>

00001506 <vTask2>:
{
	//char x=0;
	//LCD_main(&x);
	while(1){
		//Tank_feed_operation(2);
		vTaskDelay(4000/portTICK_PERIOD_MS);
    1506:	8a ef       	ldi	r24, 0xFA	; 250
    1508:	90 e0       	ldi	r25, 0x00	; 0
    150a:	0e 94 d3 1b 	call	0x37a6	; 0x37a6 <vTaskDelay>
    150e:	fb cf       	rjmp	.-10     	; 0x1506 <vTask2>

00001510 <vTask1>:


static void vTask1(void* pvParameters)
{
	char x=0;
	UART0_puts("Sequence Task1 \n");
    1510:	89 ec       	ldi	r24, 0xC9	; 201
    1512:	92 e0       	ldi	r25, 0x02	; 2
    1514:	bf d4       	rcall	.+2430   	; 0x1e94 <UART0_puts>
//	Level_main(&x);
 //   Sequance_task(&x);
  while (1)
  {
	 //  UART0_puts("task1 alive\n");
	 vTaskDelay(200/portTICK_PERIOD_MS);
    1516:	8c e0       	ldi	r24, 0x0C	; 12
    1518:	90 e0       	ldi	r25, 0x00	; 0
    151a:	0e 94 d3 1b 	call	0x37a6	; 0x37a6 <vTaskDelay>
    151e:	fb cf       	rjmp	.-10     	; 0x1516 <vTask1+0x6>

00001520 <vTask4>:
	UART0_puts("LEVEL Task3 \n");
	Temp_main(&x);
}

static void vTask4(void* pvParameters)
{
    1520:	cf 93       	push	r28
    1522:	df 93       	push	r29
    1524:	1f 92       	push	r1
    1526:	1f 92       	push	r1
    1528:	cd b7       	in	r28, 0x3d	; 61
    152a:	de b7       	in	r29, 0x3e	; 62
	UART0_puts("Enter Task4\n");
    152c:	8a ed       	ldi	r24, 0xDA	; 218
    152e:	92 e0       	ldi	r25, 0x02	; 2
    1530:	b1 d4       	rcall	.+2402   	; 0x1e94 <UART0_puts>
	uint16_t response =0 ;
    1532:	1a 82       	std	Y+2, r1	; 0x02
    1534:	19 82       	std	Y+1, r1	; 0x01
		{
			
			//UART0_puts("vTask4 Exist\n");
			//_delay_ms(1000);
			//Tank_out_operation(2);
			LCD_main_Report_error(DRUM_MOTOR_ERROR_PIC);
    1536:	8c e0       	ldi	r24, 0x0C	; 12
    1538:	90 e0       	ldi	r25, 0x00	; 0
    153a:	0e 94 86 20 	call	0x410c	; 0x410c <LCD_main_Report_error>
			LCD_main_wait_error_response(DRUM_MOTOR_ERROR_RESPONSE,&response);
    153e:	be 01       	movw	r22, r28
    1540:	6f 5f       	subi	r22, 0xFF	; 255
    1542:	7f 4f       	sbci	r23, 0xFF	; 255
    1544:	84 e0       	ldi	r24, 0x04	; 4
    1546:	9a e0       	ldi	r25, 0x0A	; 10
    1548:	0e 94 b9 20 	call	0x4172	; 0x4172 <LCD_main_wait_error_response>
			UART0_puts("RESPONSE = ");
    154c:	87 ee       	ldi	r24, 0xE7	; 231
    154e:	92 e0       	ldi	r25, 0x02	; 2
    1550:	a1 d4       	rcall	.+2370   	; 0x1e94 <UART0_puts>
			UART0_OutUDec(response);
    1552:	69 81       	ldd	r22, Y+1	; 0x01
    1554:	7a 81       	ldd	r23, Y+2	; 0x02
    1556:	80 e0       	ldi	r24, 0x00	; 0
    1558:	90 e0       	ldi	r25, 0x00	; 0
			UART0_putc('\n');
    155a:	80 d4       	rcall	.+2304   	; 0x1e5c <UART0_OutUDec>
    155c:	8a e0       	ldi	r24, 0x0A	; 10
    155e:	65 d4       	rcall	.+2250   	; 0x1e2a <UART0_putc>
			vTaskDelay(300/portTICK_PERIOD_MS);
    1560:	82 e1       	ldi	r24, 0x12	; 18
    1562:	90 e0       	ldi	r25, 0x00	; 0
    1564:	0e 94 d3 1b 	call	0x37a6	; 0x37a6 <vTaskDelay>
    1568:	e6 cf       	rjmp	.-52     	; 0x1536 <vTask4+0x16>

0000156a <vTask3>:
	}
}


static void vTask3(void* pvParameters)
{
    156a:	cf 93       	push	r28
    156c:	df 93       	push	r29
    156e:	1f 92       	push	r1
    1570:	cd b7       	in	r28, 0x3d	; 61
    1572:	de b7       	in	r29, 0x3e	; 62
	char x=0;
    1574:	19 82       	std	Y+1, r1	; 0x01
	UART0_puts("LEVEL Task3 \n");
    1576:	83 ef       	ldi	r24, 0xF3	; 243
    1578:	92 e0       	ldi	r25, 0x02	; 2
    157a:	8c d4       	rcall	.+2328   	; 0x1e94 <UART0_puts>
	Temp_main(&x);
    157c:	ce 01       	movw	r24, r28
    157e:	01 96       	adiw	r24, 0x01	; 1
    1580:	0e 94 b7 21 	call	0x436e	; 0x436e <Temp_main>
}
    1584:	0f 90       	pop	r0
    1586:	df 91       	pop	r29
    1588:	cf 91       	pop	r28
    158a:	08 95       	ret

0000158c <main>:
TaskHandle_t xHandle1 = NULL , xHandle2 = NULL ,xHandle3 = NULL , xHandle4 = NULL , xHandle5 = NULL ;




int main(void) {
    158c:	cf 92       	push	r12
    158e:	df 92       	push	r13
    1590:	ef 92       	push	r14
    1592:	ff 92       	push	r15
    1594:	0f 93       	push	r16
	DDRE = 0xFF;
    1596:	8f ef       	ldi	r24, 0xFF	; 255
    1598:	8d b9       	out	0x0d, r24	; 13
	UART0_init(9600); //for debug
    159a:	60 e8       	ldi	r22, 0x80	; 128
    159c:	75 e2       	ldi	r23, 0x25	; 37
    159e:	80 e0       	ldi	r24, 0x00	; 0
    15a0:	90 e0       	ldi	r25, 0x00	; 0
    15a2:	ee d3       	rcall	.+2012   	; 0x1d80 <UART0_init>
    System_init();
    15a4:	0e 94 d5 21 	call	0x43aa	; 0x43aa <System_init>
	
	//Lcd_init(UART3,115200,1);
	UART0_puts("start \n");
    15a8:	81 e0       	ldi	r24, 0x01	; 1
    15aa:	93 e0       	ldi	r25, 0x03	; 3
    15ac:	73 d4       	rcall	.+2278   	; 0x1e94 <UART0_puts>
// 	_delay_ms(1000);
// 
//  }
	//Temp_main_init();
	/* Create the task without using any dynamic memory allocation. */
	xHandle1 = xTaskCreateStatic( //print LCD data from RTE lowest priority
    15ae:	0f 2e       	mov	r0, r31
    15b0:	fb eb       	ldi	r31, 0xBB	; 187
    15b2:	cf 2e       	mov	r12, r31
    15b4:	ff e0       	ldi	r31, 0x0F	; 15
    15b6:	df 2e       	mov	r13, r31
    15b8:	f0 2d       	mov	r31, r0
    15ba:	0f 2e       	mov	r0, r31
    15bc:	fe e0       	ldi	r31, 0x0E	; 14
    15be:	ef 2e       	mov	r14, r31
    15c0:	f2 e1       	ldi	r31, 0x12	; 18
    15c2:	ff 2e       	mov	r15, r31
    15c4:	f0 2d       	mov	r31, r0
    15c6:	02 e0       	ldi	r16, 0x02	; 2
    15c8:	20 e0       	ldi	r18, 0x00	; 0
    15ca:	30 e0       	ldi	r19, 0x00	; 0
    15cc:	44 ef       	ldi	r20, 0xF4	; 244
    15ce:	51 e0       	ldi	r21, 0x01	; 1
    15d0:	69 e0       	ldi	r22, 0x09	; 9
    15d2:	73 e0       	ldi	r23, 0x03	; 3
    15d4:	88 e8       	ldi	r24, 0x88	; 136
    15d6:	9a e0       	ldi	r25, 0x0A	; 10
    15d8:	0e 94 52 19 	call	0x32a4	; 0x32a4 <xTaskCreateStatic>
    15dc:	90 93 d2 06 	sts	0x06D2, r25	; 0x8006d2 <xHandle1+0x1>
    15e0:	80 93 d1 06 	sts	0x06D1, r24	; 0x8006d1 <xHandle1>
					NULL, /* Parameter passed into the task. */
					2,/* Priority at which the task is created. */
					xStack1, /* Array to use as the task's stack. */
					&xTask1Buffer); /* Variable to hold the task's data structure. */
	
	xHandle2 = xTaskCreateStatic( //LCD highest priority
    15e4:	0f 2e       	mov	r0, r31
    15e6:	f5 ee       	ldi	r31, 0xE5	; 229
    15e8:	cf 2e       	mov	r12, r31
    15ea:	ff e0       	ldi	r31, 0x0F	; 15
    15ec:	df 2e       	mov	r13, r31
    15ee:	f0 2d       	mov	r31, r0
    15f0:	0f 2e       	mov	r0, r31
    15f2:	f0 e2       	ldi	r31, 0x20	; 32
    15f4:	ef 2e       	mov	r14, r31
    15f6:	f6 e1       	ldi	r31, 0x16	; 22
    15f8:	ff 2e       	mov	r15, r31
    15fa:	f0 2d       	mov	r31, r0
    15fc:	20 e0       	ldi	r18, 0x00	; 0
    15fe:	30 e0       	ldi	r19, 0x00	; 0
    1600:	44 ef       	ldi	r20, 0xF4	; 244
    1602:	51 e0       	ldi	r21, 0x01	; 1
    1604:	6f e0       	ldi	r22, 0x0F	; 15
    1606:	73 e0       	ldi	r23, 0x03	; 3
    1608:	83 e8       	ldi	r24, 0x83	; 131
    160a:	9a e0       	ldi	r25, 0x0A	; 10
    160c:	0e 94 52 19 	call	0x32a4	; 0x32a4 <xTaskCreateStatic>
    1610:	90 93 d0 06 	sts	0x06D0, r25	; 0x8006d0 <xHandle2+0x1>
    1614:	80 93 cf 06 	sts	0x06CF, r24	; 0x8006cf <xHandle2>
				NULL, /* Parameter passed into the task. */
				2,/* Priority at which the task is created. */
				xStack2, /* Array to use as the task's stack. */
				&xTask2Buffer); /* Variable to hold the task's data structure. */
				
	xHandle3 = xTaskCreateStatic( //temp mid priority
    1618:	0f 2e       	mov	r0, r31
    161a:	f2 e0       	ldi	r31, 0x02	; 2
    161c:	cf 2e       	mov	r12, r31
    161e:	f4 e1       	ldi	r31, 0x14	; 20
    1620:	df 2e       	mov	r13, r31
    1622:	f0 2d       	mov	r31, r0
    1624:	0f 2e       	mov	r0, r31
    1626:	fb e1       	ldi	r31, 0x1B	; 27
    1628:	ef 2e       	mov	r14, r31
    162a:	f8 e1       	ldi	r31, 0x18	; 24
    162c:	ff 2e       	mov	r15, r31
    162e:	f0 2d       	mov	r31, r0
    1630:	20 e0       	ldi	r18, 0x00	; 0
    1632:	30 e0       	ldi	r19, 0x00	; 0
    1634:	44 ef       	ldi	r20, 0xF4	; 244
    1636:	51 e0       	ldi	r21, 0x01	; 1
    1638:	65 e1       	ldi	r22, 0x15	; 21
    163a:	73 e0       	ldi	r23, 0x03	; 3
    163c:	85 eb       	ldi	r24, 0xB5	; 181
    163e:	9a e0       	ldi	r25, 0x0A	; 10
    1640:	0e 94 52 19 	call	0x32a4	; 0x32a4 <xTaskCreateStatic>
    1644:	90 93 ce 06 	sts	0x06CE, r25	; 0x8006ce <xHandle3+0x1>
    1648:	80 93 cd 06 	sts	0x06CD, r24	; 0x8006cd <xHandle3>
				NULL, /* Parameter passed into the task. */
				2,/* Priority at which the task is created. */
				xStack3, /* Array to use as the task's stack. */
				&xTask3Buffer); /* Variable to hold the task's data structure. */
	
	xHandle4 = xTaskCreateStatic(
    164c:	0f 2e       	mov	r0, r31
    164e:	f1 e9       	ldi	r31, 0x91	; 145
    1650:	cf 2e       	mov	r12, r31
    1652:	ff e0       	ldi	r31, 0x0F	; 15
    1654:	df 2e       	mov	r13, r31
    1656:	f0 2d       	mov	r31, r0
    1658:	0f 2e       	mov	r0, r31
    165a:	fa e1       	ldi	r31, 0x1A	; 26
    165c:	ef 2e       	mov	r14, r31
    165e:	f0 e1       	ldi	r31, 0x10	; 16
    1660:	ff 2e       	mov	r15, r31
    1662:	f0 2d       	mov	r31, r0
    1664:	20 e0       	ldi	r18, 0x00	; 0
    1666:	30 e0       	ldi	r19, 0x00	; 0
    1668:	44 ef       	ldi	r20, 0xF4	; 244
    166a:	51 e0       	ldi	r21, 0x01	; 1
    166c:	6b e1       	ldi	r22, 0x1B	; 27
    166e:	73 e0       	ldi	r23, 0x03	; 3
    1670:	80 e9       	ldi	r24, 0x90	; 144
    1672:	9a e0       	ldi	r25, 0x0A	; 10
    1674:	0e 94 52 19 	call	0x32a4	; 0x32a4 <xTaskCreateStatic>
    1678:	90 93 cc 06 	sts	0x06CC, r25	; 0x8006cc <xHandle4+0x1>
    167c:	80 93 cb 06 	sts	0x06CB, r24	; 0x8006cb <xHandle4>
				2,/* Priority at which the task is created. */
				xStack4, /* Array to use as the task's stack. */
				&xTask4Buffer); /* Variable to hold the task's data structure. */
				
				
	xHandle5 = xTaskCreateStatic(
    1680:	0f 2e       	mov	r0, r31
    1682:	ff e0       	ldi	r31, 0x0F	; 15
    1684:	cf 2e       	mov	r12, r31
    1686:	fa e1       	ldi	r31, 0x1A	; 26
    1688:	df 2e       	mov	r13, r31
    168a:	f0 2d       	mov	r31, r0
    168c:	0f 2e       	mov	r0, r31
    168e:	fc e2       	ldi	r31, 0x2C	; 44
    1690:	ef 2e       	mov	r14, r31
    1692:	f4 e1       	ldi	r31, 0x14	; 20
    1694:	ff 2e       	mov	r15, r31
    1696:	f0 2d       	mov	r31, r0
    1698:	05 e0       	ldi	r16, 0x05	; 5
    169a:	20 e0       	ldi	r18, 0x00	; 0
    169c:	30 e0       	ldi	r19, 0x00	; 0
    169e:	44 ef       	ldi	r20, 0xF4	; 244
    16a0:	51 e0       	ldi	r21, 0x01	; 1
    16a2:	61 e2       	ldi	r22, 0x21	; 33
    16a4:	73 e0       	ldi	r23, 0x03	; 3
    16a6:	8e e7       	ldi	r24, 0x7E	; 126
    16a8:	9a e0       	ldi	r25, 0x0A	; 10
    16aa:	0e 94 52 19 	call	0x32a4	; 0x32a4 <xTaskCreateStatic>
    16ae:	90 93 ca 06 	sts	0x06CA, r25	; 0x8006ca <xHandle5+0x1>
    16b2:	80 93 c9 06 	sts	0x06C9, r24	; 0x8006c9 <xHandle5>
// 	}
	

	  // Start scheduler.
	  //Tank_operation_init();
	  vTaskStartScheduler();
    16b6:	0e 94 4b 1a 	call	0x3496	; 0x3496 <vTaskStartScheduler>

}
    16ba:	80 e0       	ldi	r24, 0x00	; 0
    16bc:	90 e0       	ldi	r25, 0x00	; 0
    16be:	0f 91       	pop	r16
    16c0:	ff 90       	pop	r15
    16c2:	ef 90       	pop	r14
    16c4:	df 90       	pop	r13
    16c6:	cf 90       	pop	r12
    16c8:	08 95       	ret

000016ca <ADC_init>:
	 * this function configure ADC module and
	 * you  pass the channel you work with from 0 to 7
	 */

   // make the ADC pin as input.
  CLR_BIT(ADC_DIRECTION_REG ,channel );
    16ca:	90 b3       	in	r25, 0x10	; 16
    16cc:	21 e0       	ldi	r18, 0x01	; 1
    16ce:	30 e0       	ldi	r19, 0x00	; 0
    16d0:	08 2e       	mov	r0, r24
    16d2:	02 c0       	rjmp	.+4      	; 0x16d8 <ADC_init+0xe>
    16d4:	22 0f       	add	r18, r18
    16d6:	33 1f       	adc	r19, r19
    16d8:	0a 94       	dec	r0
    16da:	e2 f7       	brpl	.-8      	; 0x16d4 <ADC_init+0xa>
    16dc:	20 95       	com	r18
    16de:	29 23       	and	r18, r25
    16e0:	20 bb       	out	0x10, r18	; 16
  //   external ref .
  CLR_HIGH_NIBBLE(ADC_MULTIPLEXER_SELECTION_REG);
    16e2:	ec e7       	ldi	r30, 0x7C	; 124
    16e4:	f0 e0       	ldi	r31, 0x00	; 0
    16e6:	90 81       	ld	r25, Z
    16e8:	9f 70       	andi	r25, 0x0F	; 15
    16ea:	90 83       	st	Z, r25
  //   operated channel ( channel ) .
  PUT_VAL_LOW_NIBBLE(ADC_MULTIPLEXER_SELECTION_REG , channel);
    16ec:	90 81       	ld	r25, Z
    16ee:	90 7f       	andi	r25, 0xF0	; 240
    16f0:	90 83       	st	Z, r25
    16f2:	8f 70       	andi	r24, 0x0F	; 15
    16f4:	98 2b       	or	r25, r24
    16f6:	90 83       	st	Z, r25
  //  enable ADC  & enable interrupt && ps / 128.
  PUT_VAL_reg(ADC_CONTROL_STATUS_A_REG , 0x8f);
    16f8:	8f e8       	ldi	r24, 0x8F	; 143
    16fa:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>

  // enable global interrupt.
  sei();
    16fe:	78 94       	sei
    1700:	08 95       	ret

00001702 <ADC_enable_reading>:
}

void ADC_enable_reading(void)
{
	// restart the conversion .
	SET_BIT(ADC_CONTROL_STATUS_A_REG , ADC_START_CONVERSION_bit);
    1702:	ea e7       	ldi	r30, 0x7A	; 122
    1704:	f0 e0       	ldi	r31, 0x00	; 0
    1706:	80 81       	ld	r24, Z
    1708:	80 64       	ori	r24, 0x40	; 64
    170a:	80 83       	st	Z, r24
    170c:	08 95       	ret

0000170e <ADC_read>:
}

uint16_t ADC_read(void)
{
	// re-start the conversion .
	ADC_enable_reading();
    170e:	f9 df       	rcall	.-14     	; 0x1702 <ADC_enable_reading>
	static uint16_t returned_data;
	g_converted = 0 ;
    1710:	10 92 d3 06 	sts	0x06D3, r1	; 0x8006d3 <g_converted>
    1714:	80 ec       	ldi	r24, 0xC0	; 192
    1716:	92 e1       	ldi	r25, 0x12	; 18
    1718:	01 97       	sbiw	r24, 0x01	; 1
	// the conversion takes about 260 us so we will wait 4800 ticks till it ends .
	uint16_t time_out = 4800 ;
	while(!g_converted && 0 != time_out ){time_out --; }
    171a:	f1 f7       	brne	.-4      	; 0x1718 <ADC_read+0xa>
	returned_data = g_analog_data ;
    171c:	80 91 d4 06 	lds	r24, 0x06D4	; 0x8006d4 <g_analog_data>
    1720:	90 91 d5 06 	lds	r25, 0x06D5	; 0x8006d5 <g_analog_data+0x1>
		return returned_data ;
}
    1724:	08 95       	ret

00001726 <__vector_29>:


ISR(ADC_vect)
{
    1726:	1f 92       	push	r1
    1728:	0f 92       	push	r0
    172a:	0f b6       	in	r0, 0x3f	; 63
    172c:	0f 92       	push	r0
    172e:	11 24       	eor	r1, r1
    1730:	2f 93       	push	r18
    1732:	8f 93       	push	r24
    1734:	9f 93       	push	r25
	   uint8_t The_low_adc_reg = ADC_DATA_REG_LOW ;
    1736:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
	  // get 10 bits out of the high and low register .
	  g_analog_data =  The_low_adc_reg | (ADC_DATA_REG_HIGH <<8);
    173a:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
    173e:	90 e0       	ldi	r25, 0x00	; 0
    1740:	92 2b       	or	r25, r18
    1742:	90 93 d5 06 	sts	0x06D5, r25	; 0x8006d5 <g_analog_data+0x1>
    1746:	80 93 d4 06 	sts	0x06D4, r24	; 0x8006d4 <g_analog_data>
	//  UART0_OutUDec(g_analog_data);
	 // UART0_putc('\n');
	  g_converted = 1 ;
    174a:	81 e0       	ldi	r24, 0x01	; 1
    174c:	80 93 d3 06 	sts	0x06D3, r24	; 0x8006d3 <g_converted>
}
    1750:	9f 91       	pop	r25
    1752:	8f 91       	pop	r24
    1754:	2f 91       	pop	r18
    1756:	0f 90       	pop	r0
    1758:	0f be       	out	0x3f, r0	; 63
    175a:	0f 90       	pop	r0
    175c:	1f 90       	pop	r1
    175e:	18 95       	reti

00001760 <DIO_init>:
void Spark_change_state(uint8_t state)
{
	if (HIGH == state)
		SET_BIT(SPARK_DATA_REG , SPARK_PIN);
	else if(LOW == state)
		CLR_BIT(SPARK_DATA_REG , SPARK_PIN);
    1760:	ea e0       	ldi	r30, 0x0A	; 10
    1762:	f1 e0       	ldi	r31, 0x01	; 1
    1764:	80 81       	ld	r24, Z
    1766:	8f 7e       	andi	r24, 0xEF	; 239
    1768:	80 83       	st	Z, r24
    176a:	80 81       	ld	r24, Z
    176c:	8f 7d       	andi	r24, 0xDF	; 223
    176e:	80 83       	st	Z, r24
    1770:	80 81       	ld	r24, Z
    1772:	8f 7b       	andi	r24, 0xBF	; 191
    1774:	80 83       	st	Z, r24
    1776:	80 81       	ld	r24, Z
    1778:	8f 77       	andi	r24, 0x7F	; 127
    177a:	80 83       	st	Z, r24
    177c:	3c 98       	cbi	0x07, 4	; 7
    177e:	3d 98       	cbi	0x07, 5	; 7
    1780:	3a 98       	cbi	0x07, 2	; 7
    1782:	80 81       	ld	r24, Z
    1784:	87 7f       	andi	r24, 0xF7	; 247
    1786:	80 83       	st	Z, r24
    1788:	09 9a       	sbi	0x01, 1	; 1
    178a:	0a 9a       	sbi	0x01, 2	; 1
    178c:	e7 e0       	ldi	r30, 0x07	; 7
    178e:	f1 e0       	ldi	r31, 0x01	; 1
    1790:	80 81       	ld	r24, Z
    1792:	80 64       	ori	r24, 0x40	; 64
    1794:	80 83       	st	Z, r24
    1796:	0e 9a       	sbi	0x01, 6	; 1
    1798:	0e 9a       	sbi	0x01, 6	; 1
    179a:	80 81       	ld	r24, Z
    179c:	80 62       	ori	r24, 0x20	; 32
    179e:	80 83       	st	Z, r24
    17a0:	80 81       	ld	r24, Z
    17a2:	80 68       	ori	r24, 0x80	; 128
    17a4:	80 83       	st	Z, r24
    17a6:	38 98       	cbi	0x07, 0	; 7
    17a8:	08 9a       	sbi	0x01, 0	; 1
    17aa:	0b 9a       	sbi	0x01, 3	; 1
    17ac:	e4 e0       	ldi	r30, 0x04	; 4
    17ae:	f1 e0       	ldi	r31, 0x01	; 1
    17b0:	80 81       	ld	r24, Z
    17b2:	84 60       	ori	r24, 0x04	; 4
    17b4:	80 83       	st	Z, r24
    17b6:	54 9a       	sbi	0x0a, 4	; 10
    17b8:	0e 9a       	sbi	0x01, 6	; 1
    17ba:	3f 9a       	sbi	0x07, 7	; 7
    17bc:	80 81       	ld	r24, Z
    17be:	80 64       	ori	r24, 0x40	; 64
    17c0:	80 83       	st	Z, r24
    17c2:	0f 9a       	sbi	0x01, 7	; 1
    17c4:	e1 e0       	ldi	r30, 0x01	; 1
    17c6:	f1 e0       	ldi	r31, 0x01	; 1
    17c8:	80 81       	ld	r24, Z
    17ca:	8e 7f       	andi	r24, 0xFE	; 254
    17cc:	80 83       	st	Z, r24
    17ce:	80 81       	ld	r24, Z
    17d0:	82 60       	ori	r24, 0x02	; 2
    17d2:	80 83       	st	Z, r24
    17d4:	e2 e0       	ldi	r30, 0x02	; 2
    17d6:	f1 e0       	ldi	r31, 0x01	; 1
    17d8:	80 81       	ld	r24, Z
    17da:	81 60       	ori	r24, 0x01	; 1
    17dc:	80 83       	st	Z, r24
    17de:	52 98       	cbi	0x0a, 2	; 10
    17e0:	53 9a       	sbi	0x0a, 3	; 10
    17e2:	5a 9a       	sbi	0x0b, 2	; 11
    17e4:	08 95       	ret

000017e6 <Modbus_change_state>:

//_________ MODE BUS initialize and enable______________________//

void Modbus_change_state(uint8_t device ,uint8_t state){
	
	switch (device){
    17e6:	88 23       	and	r24, r24
    17e8:	19 f0       	breq	.+6      	; 0x17f0 <Modbus_change_state+0xa>
    17ea:	81 30       	cpi	r24, 0x01	; 1
    17ec:	89 f0       	breq	.+34     	; 0x1810 <Modbus_change_state+0x2a>
    17ee:	08 95       	ret
		case DEVICE_0:
		 	if (HIGH == state)
    17f0:	61 30       	cpi	r22, 0x01	; 1
    17f2:	31 f4       	brne	.+12     	; 0x1800 <Modbus_change_state+0x1a>
		 		SET_BIT(DEVICE_0_MODBUS_DATA_REG , DEVICE_0_MODBUS_PIN);
    17f4:	e5 e0       	ldi	r30, 0x05	; 5
    17f6:	f1 e0       	ldi	r31, 0x01	; 1
    17f8:	80 81       	ld	r24, Z
    17fa:	84 60       	ori	r24, 0x04	; 4
    17fc:	80 83       	st	Z, r24
    17fe:	08 95       	ret
		 	else if(LOW == state)
    1800:	61 11       	cpse	r22, r1
    1802:	0d c0       	rjmp	.+26     	; 0x181e <Modbus_change_state+0x38>
		 		CLR_BIT(DEVICE_0_MODBUS_DATA_REG , DEVICE_0_MODBUS_PIN);
    1804:	e5 e0       	ldi	r30, 0x05	; 5
    1806:	f1 e0       	ldi	r31, 0x01	; 1
    1808:	80 81       	ld	r24, Z
    180a:	8b 7f       	andi	r24, 0xFB	; 251
    180c:	80 83       	st	Z, r24
    180e:	08 95       	ret
			
			break;
		case DEVICE_1:
		     if (HIGH == state)
    1810:	61 30       	cpi	r22, 0x01	; 1
    1812:	11 f4       	brne	.+4      	; 0x1818 <Modbus_change_state+0x32>
		         SET_BIT(DEVICE_1_MODBUS_DATA_REG , DEVICE_1_MODBUS_PIN);
    1814:	5c 9a       	sbi	0x0b, 4	; 11
    1816:	08 95       	ret
		     else if(LOW == state)
    1818:	61 11       	cpse	r22, r1
    181a:	01 c0       	rjmp	.+2      	; 0x181e <Modbus_change_state+0x38>
		         CLR_BIT(DEVICE_1_MODBUS_DATA_REG , DEVICE_1_MODBUS_PIN);
    181c:	5c 98       	cbi	0x0b, 4	; 11
    181e:	08 95       	ret

00001820 <timers_init>:
 * set_up the timer and interrupt config and
 * parameters timer_ config struct contain all info about Timer
 * return 1 if the function setup OK -1 if not
 */
uint8_t timers_init(g_Timer_Config *config)
{
    1820:	fc 01       	movw	r30, r24
	// choose the timer number depend on the config timer_number
	if(config->timer_number == 1){
    1822:	94 81       	ldd	r25, Z+4	; 0x04
    1824:	91 30       	cpi	r25, 0x01	; 1
    1826:	c1 f4       	brne	.+48     	; 0x1858 <timers_init+0x38>

		// off all the modes of  first config register on timer
		DDRD &= ~ (1<<6);
    1828:	56 98       	cbi	0x0a, 6	; 10
		PORTD |=(1<<6);
    182a:	5e 9a       	sbi	0x0b, 6	; 11
		TIMER1_CONGFIG_A = 0X00;
    182c:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
		// External counter on T1 and set the Top vale is OCRnA
		TIMER1_CONGFIG_B = 0x0E;
    1830:	8e e0       	ldi	r24, 0x0E	; 14
    1832:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
		// number of Encoder Tick for Each interrupt
		TIMER1_COMPARE = config->ticks - 1;
    1836:	80 81       	ld	r24, Z
    1838:	91 81       	ldd	r25, Z+1	; 0x01
    183a:	01 97       	sbiw	r24, 0x01	; 1
    183c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
    1840:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
		// Enable interrupt Bit on the timer Mask
		SET_BIT(TIMER1_INTERUPT, TIMER1_COMPARE_INT);
    1844:	af e6       	ldi	r26, 0x6F	; 111
    1846:	b0 e0       	ldi	r27, 0x00	; 0
    1848:	8c 91       	ld	r24, X
    184a:	82 60       	ori	r24, 0x02	; 2
    184c:	8c 93       	st	X, r24
		// copy the config parameter to Timer struct
		g_timer1_config = config;
    184e:	f0 93 3e 1a 	sts	0x1A3E, r31	; 0x801a3e <g_timer1_config+0x1>
    1852:	e0 93 3d 1a 	sts	0x1A3D, r30	; 0x801a3d <g_timer1_config>
    1856:	5f c0       	rjmp	.+190    	; 0x1916 <timers_init+0xf6>
		// set the time before get ticks ISR time
		//g_Timer1_old_time = Get_millis();
	}// timer_number = 1

	else if(config->timer_number == 3)
    1858:	93 30       	cpi	r25, 0x03	; 3
    185a:	c1 f4       	brne	.+48     	; 0x188c <timers_init+0x6c>
	{
		//UART0_puts("calllllllllllllllllllll\n");
		DDRE &=~ (1<<6);
    185c:	6e 98       	cbi	0x0d, 6	; 13
		PORTE |=(1<<6);
    185e:	76 9a       	sbi	0x0e, 6	; 14
		// off all the modes of  first config register on timer
		TIMER3_CONGFIG_A = 0X00;
    1860:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
		//External counter on T1 and set the Top vale is OCRnA
		TIMER3_CONGFIG_B = 0x0E;
    1864:	8e e0       	ldi	r24, 0x0E	; 14
    1866:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>
		// number of Encoder Tick for Each interrupt
		TIMER3_COMPARE = config->ticks - 1;
    186a:	80 81       	ld	r24, Z
    186c:	91 81       	ldd	r25, Z+1	; 0x01
    186e:	01 97       	sbiw	r24, 0x01	; 1
    1870:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
    1874:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>
		// Enable interrupt Bit on the timer Mask
		SET_BIT(TIMER3_INTERUPT, TIMER3_COMPARE_INT);
    1878:	a1 e7       	ldi	r26, 0x71	; 113
    187a:	b0 e0       	ldi	r27, 0x00	; 0
    187c:	8c 91       	ld	r24, X
    187e:	82 60       	ori	r24, 0x02	; 2
    1880:	8c 93       	st	X, r24
		// copy the config parameter to Timer struct
		g_timer3_config = config;
    1882:	f0 93 3a 1a 	sts	0x1A3A, r31	; 0x801a3a <g_timer3_config+0x1>
    1886:	e0 93 39 1a 	sts	0x1A39, r30	; 0x801a39 <g_timer3_config>
    188a:	45 c0       	rjmp	.+138    	; 0x1916 <timers_init+0xf6>
		// set the time before get ticks ISR time
		//g_Timer3_old_time = Get_millis();
	}//timer_number = 3
	else if(config->timer_number == 4){
    188c:	94 30       	cpi	r25, 0x04	; 4
    188e:	01 f5       	brne	.+64     	; 0x18d0 <timers_init+0xb0>
		//UART0_puts("cassssssssssssssssssssssssssss\n");
		DDRH &= ~ (1<<7);
    1890:	a1 e0       	ldi	r26, 0x01	; 1
    1892:	b1 e0       	ldi	r27, 0x01	; 1
    1894:	8c 91       	ld	r24, X
    1896:	8f 77       	andi	r24, 0x7F	; 127
    1898:	8c 93       	st	X, r24
		PORTH |=(1<<7);
    189a:	a2 e0       	ldi	r26, 0x02	; 2
    189c:	b1 e0       	ldi	r27, 0x01	; 1
    189e:	8c 91       	ld	r24, X
    18a0:	80 68       	ori	r24, 0x80	; 128
    18a2:	8c 93       	st	X, r24
		// off all the modes of  first config register on timer
		TIMER4_CONGFIG_A = 0X00;
    18a4:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
		// External counter on T1 and set the Top vale is OCRnA
		TIMER4_CONGFIG_B = 0x0E;
    18a8:	8e e0       	ldi	r24, 0x0E	; 14
    18aa:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>
		// number of Encoder Tick for Each interrupt
		TIMER4_COMPARE = config->ticks - 1;
    18ae:	80 81       	ld	r24, Z
    18b0:	91 81       	ldd	r25, Z+1	; 0x01
    18b2:	01 97       	sbiw	r24, 0x01	; 1
    18b4:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
    18b8:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
		// Enable interrupt Bit on the timer Mask
		SET_BIT(TIMER4_INTERUPT, TIMER4_COMPARE_INT);
    18bc:	a2 e7       	ldi	r26, 0x72	; 114
    18be:	b0 e0       	ldi	r27, 0x00	; 0
    18c0:	8c 91       	ld	r24, X
    18c2:	82 60       	ori	r24, 0x02	; 2
    18c4:	8c 93       	st	X, r24
		// copy the config parameter to Timer struct
		g_timer4_config = config;
    18c6:	f0 93 3c 1a 	sts	0x1A3C, r31	; 0x801a3c <g_timer4_config+0x1>
    18ca:	e0 93 3b 1a 	sts	0x1A3B, r30	; 0x801a3b <g_timer4_config>
    18ce:	23 c0       	rjmp	.+70     	; 0x1916 <timers_init+0xf6>
		// set the time before get ticks ISR time
		//g_Timer4_old_time = Get_millis();
	}//timer_number = 4

	else if(config->timer_number == 5){
    18d0:	95 30       	cpi	r25, 0x05	; 5
    18d2:	21 f5       	brne	.+72     	; 0x191c <timers_init+0xfc>
		
		DDRL &=~(1<<2);
    18d4:	aa e0       	ldi	r26, 0x0A	; 10
    18d6:	b1 e0       	ldi	r27, 0x01	; 1
    18d8:	8c 91       	ld	r24, X
    18da:	8b 7f       	andi	r24, 0xFB	; 251
    18dc:	8c 93       	st	X, r24
		PORTL |=(1<<2);
    18de:	ab e0       	ldi	r26, 0x0B	; 11
    18e0:	b1 e0       	ldi	r27, 0x01	; 1
    18e2:	8c 91       	ld	r24, X
    18e4:	84 60       	ori	r24, 0x04	; 4
    18e6:	8c 93       	st	X, r24
		// off all the modes of  first config register on timer
		TIMER5_CONGFIG_A = 0X00;
    18e8:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
		//  External counter on T1 and set the Top vale is OCRnA
		TIMER5_CONGFIG_B = 0x0E;
    18ec:	8e e0       	ldi	r24, 0x0E	; 14
    18ee:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <__TEXT_REGION_LENGTH__+0x700121>
		//number of Encoder Tick for Each interrupt
		TIMER5_COMPARE = config->ticks - 1;
    18f2:	80 81       	ld	r24, Z
    18f4:	91 81       	ldd	r25, Z+1	; 0x01
    18f6:	01 97       	sbiw	r24, 0x01	; 1
    18f8:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
    18fc:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
		// Enable interrupt Bit on the timer Mask
		SET_BIT(TIMER5_INTERUPT, TIMER5_COMPARE_INT);
    1900:	a3 e7       	ldi	r26, 0x73	; 115
    1902:	b0 e0       	ldi	r27, 0x00	; 0
    1904:	8c 91       	ld	r24, X
    1906:	82 60       	ori	r24, 0x02	; 2
    1908:	8c 93       	st	X, r24
		// copy the config parameter to Timer struct
		g_timer5_config = config;
    190a:	f0 93 40 1a 	sts	0x1A40, r31	; 0x801a40 <g_timer5_config+0x1>
    190e:	e0 93 3f 1a 	sts	0x1A3F, r30	; 0x801a3f <g_timer5_config>
		// set the time before get ticks ISR time
		//g_Timer5_old_time = Get_millis();
		//Clear the counter number
		TIMER5_COUNT_L = 0;
    1912:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <__TEXT_REGION_LENGTH__+0x700124>
	{
		//Error the timer number not valid
		return -1;
	}// Else

    sei();
    1916:	78 94       	sei
    return 1;// Setup done ok
    1918:	81 e0       	ldi	r24, 0x01	; 1
    191a:	08 95       	ret
	}//timer_number = 5

	else
	{
		//Error the timer number not valid
		return -1;
    191c:	8f ef       	ldi	r24, 0xFF	; 255
	}// Else

    sei();
    return 1;// Setup done ok
}//timer_init
    191e:	08 95       	ret

00001920 <__vector_17>:

// interrupted service routine when we have reach the number of  Ticks On Encoder
ISR(TIMER1_COMPA_vect)
{
    1920:	1f 92       	push	r1
    1922:	0f 92       	push	r0
    1924:	0f b6       	in	r0, 0x3f	; 63
    1926:	0f 92       	push	r0
    1928:	11 24       	eor	r1, r1
    192a:	0b b6       	in	r0, 0x3b	; 59
    192c:	0f 92       	push	r0
    192e:	2f 93       	push	r18
    1930:	3f 93       	push	r19
    1932:	4f 93       	push	r20
    1934:	5f 93       	push	r21
    1936:	6f 93       	push	r22
    1938:	7f 93       	push	r23
    193a:	8f 93       	push	r24
    193c:	9f 93       	push	r25
    193e:	af 93       	push	r26
    1940:	bf 93       	push	r27
    1942:	ef 93       	push	r30
    1944:	ff 93       	push	r31
    1946:	cf 93       	push	r28
    1948:	df 93       	push	r29
    194a:	00 d0       	rcall	.+0      	; 0x194c <__vector_17+0x2c>
    194c:	1f 92       	push	r1
    194e:	cd b7       	in	r28, 0x3d	; 61
    1950:	de b7       	in	r29, 0x3e	; 62
	volatile uint32_t diff_time;      // to save the different between new time and old time
	volatile static uint32_t s_Timer1_old_time;
	volatile static uint32_t s_Timer1_new_time;
	// get the time now
	s_Timer1_new_time = Get_millis();
    1952:	0e 94 15 22 	call	0x442a	; 0x442a <Get_millis>
    1956:	60 93 f2 06 	sts	0x06F2, r22	; 0x8006f2 <s_Timer1_new_time.1769>
    195a:	70 93 f3 06 	sts	0x06F3, r23	; 0x8006f3 <s_Timer1_new_time.1769+0x1>
    195e:	80 93 f4 06 	sts	0x06F4, r24	; 0x8006f4 <s_Timer1_new_time.1769+0x2>
    1962:	90 93 f5 06 	sts	0x06F5, r25	; 0x8006f5 <s_Timer1_new_time.1769+0x3>
	//UART0_puts("blaaaaa\n");
	// calculate the diff between now and last interrupt
	diff_time = s_Timer1_new_time - s_Timer1_old_time;
    1966:	80 91 f2 06 	lds	r24, 0x06F2	; 0x8006f2 <s_Timer1_new_time.1769>
    196a:	90 91 f3 06 	lds	r25, 0x06F3	; 0x8006f3 <s_Timer1_new_time.1769+0x1>
    196e:	a0 91 f4 06 	lds	r26, 0x06F4	; 0x8006f4 <s_Timer1_new_time.1769+0x2>
    1972:	b0 91 f5 06 	lds	r27, 0x06F5	; 0x8006f5 <s_Timer1_new_time.1769+0x3>
    1976:	40 91 ee 06 	lds	r20, 0x06EE	; 0x8006ee <s_Timer1_old_time.1768>
    197a:	50 91 ef 06 	lds	r21, 0x06EF	; 0x8006ef <s_Timer1_old_time.1768+0x1>
    197e:	60 91 f0 06 	lds	r22, 0x06F0	; 0x8006f0 <s_Timer1_old_time.1768+0x2>
    1982:	70 91 f1 06 	lds	r23, 0x06F1	; 0x8006f1 <s_Timer1_old_time.1768+0x3>
    1986:	84 1b       	sub	r24, r20
    1988:	95 0b       	sbc	r25, r21
    198a:	a6 0b       	sbc	r26, r22
    198c:	b7 0b       	sbc	r27, r23
    198e:	89 83       	std	Y+1, r24	; 0x01
    1990:	9a 83       	std	Y+2, r25	; 0x02
    1992:	ab 83       	std	Y+3, r26	; 0x03
    1994:	bc 83       	std	Y+4, r27	; 0x04
	// save the to the old time to next interrupt
	s_Timer1_old_time = s_Timer1_new_time;
    1996:	80 91 f2 06 	lds	r24, 0x06F2	; 0x8006f2 <s_Timer1_new_time.1769>
    199a:	90 91 f3 06 	lds	r25, 0x06F3	; 0x8006f3 <s_Timer1_new_time.1769+0x1>
    199e:	a0 91 f4 06 	lds	r26, 0x06F4	; 0x8006f4 <s_Timer1_new_time.1769+0x2>
    19a2:	b0 91 f5 06 	lds	r27, 0x06F5	; 0x8006f5 <s_Timer1_new_time.1769+0x3>
    19a6:	80 93 ee 06 	sts	0x06EE, r24	; 0x8006ee <s_Timer1_old_time.1768>
    19aa:	90 93 ef 06 	sts	0x06EF, r25	; 0x8006ef <s_Timer1_old_time.1768+0x1>
    19ae:	a0 93 f0 06 	sts	0x06F0, r26	; 0x8006f0 <s_Timer1_old_time.1768+0x2>
    19b2:	b0 93 f1 06 	sts	0x06F1, r27	; 0x8006f1 <s_Timer1_old_time.1768+0x3>
	//call back function on upper layer to get time
	g_timer1_config->isr_call_back(diff_time);
    19b6:	69 81       	ldd	r22, Y+1	; 0x01
    19b8:	7a 81       	ldd	r23, Y+2	; 0x02
    19ba:	8b 81       	ldd	r24, Y+3	; 0x03
    19bc:	9c 81       	ldd	r25, Y+4	; 0x04
    19be:	e0 91 3d 1a 	lds	r30, 0x1A3D	; 0x801a3d <g_timer1_config>
    19c2:	f0 91 3e 1a 	lds	r31, 0x1A3E	; 0x801a3e <g_timer1_config+0x1>
    19c6:	02 80       	ldd	r0, Z+2	; 0x02
    19c8:	f3 81       	ldd	r31, Z+3	; 0x03
    19ca:	e0 2d       	mov	r30, r0
    19cc:	19 95       	eicall
}
    19ce:	0f 90       	pop	r0
    19d0:	0f 90       	pop	r0
    19d2:	0f 90       	pop	r0
    19d4:	0f 90       	pop	r0
    19d6:	df 91       	pop	r29
    19d8:	cf 91       	pop	r28
    19da:	ff 91       	pop	r31
    19dc:	ef 91       	pop	r30
    19de:	bf 91       	pop	r27
    19e0:	af 91       	pop	r26
    19e2:	9f 91       	pop	r25
    19e4:	8f 91       	pop	r24
    19e6:	7f 91       	pop	r23
    19e8:	6f 91       	pop	r22
    19ea:	5f 91       	pop	r21
    19ec:	4f 91       	pop	r20
    19ee:	3f 91       	pop	r19
    19f0:	2f 91       	pop	r18
    19f2:	0f 90       	pop	r0
    19f4:	0b be       	out	0x3b, r0	; 59
    19f6:	0f 90       	pop	r0
    19f8:	0f be       	out	0x3f, r0	; 63
    19fa:	0f 90       	pop	r0
    19fc:	1f 90       	pop	r1
    19fe:	18 95       	reti

00001a00 <__vector_32>:
// interrupted service routine when we have reach the number of  Ticks On Encoder
ISR(TIMER3_COMPA_vect)
{
    1a00:	1f 92       	push	r1
    1a02:	0f 92       	push	r0
    1a04:	0f b6       	in	r0, 0x3f	; 63
    1a06:	0f 92       	push	r0
    1a08:	11 24       	eor	r1, r1
    1a0a:	0b b6       	in	r0, 0x3b	; 59
    1a0c:	0f 92       	push	r0
    1a0e:	2f 93       	push	r18
    1a10:	3f 93       	push	r19
    1a12:	4f 93       	push	r20
    1a14:	5f 93       	push	r21
    1a16:	6f 93       	push	r22
    1a18:	7f 93       	push	r23
    1a1a:	8f 93       	push	r24
    1a1c:	9f 93       	push	r25
    1a1e:	af 93       	push	r26
    1a20:	bf 93       	push	r27
    1a22:	ef 93       	push	r30
    1a24:	ff 93       	push	r31
    1a26:	cf 93       	push	r28
    1a28:	df 93       	push	r29
    1a2a:	00 d0       	rcall	.+0      	; 0x1a2c <__vector_32+0x2c>
    1a2c:	1f 92       	push	r1
    1a2e:	cd b7       	in	r28, 0x3d	; 61
    1a30:	de b7       	in	r29, 0x3e	; 62
	volatile uint32_t diff_time;      // to save the different between new time and old time
	volatile static uint32_t s_Timer3_old_time;
	volatile static uint32_t s_Timer3_new_time;
	// get the time now
	//UART0_puts("ISR3333333333333333333333333333333333333\n");
	s_Timer3_new_time = Get_millis();
    1a32:	0e 94 15 22 	call	0x442a	; 0x442a <Get_millis>
    1a36:	60 93 ea 06 	sts	0x06EA, r22	; 0x8006ea <s_Timer3_new_time.1777>
    1a3a:	70 93 eb 06 	sts	0x06EB, r23	; 0x8006eb <s_Timer3_new_time.1777+0x1>
    1a3e:	80 93 ec 06 	sts	0x06EC, r24	; 0x8006ec <s_Timer3_new_time.1777+0x2>
    1a42:	90 93 ed 06 	sts	0x06ED, r25	; 0x8006ed <s_Timer3_new_time.1777+0x3>
	// calculate the diff between now and last interrupt
	diff_time = s_Timer3_new_time - s_Timer3_old_time;
    1a46:	80 91 ea 06 	lds	r24, 0x06EA	; 0x8006ea <s_Timer3_new_time.1777>
    1a4a:	90 91 eb 06 	lds	r25, 0x06EB	; 0x8006eb <s_Timer3_new_time.1777+0x1>
    1a4e:	a0 91 ec 06 	lds	r26, 0x06EC	; 0x8006ec <s_Timer3_new_time.1777+0x2>
    1a52:	b0 91 ed 06 	lds	r27, 0x06ED	; 0x8006ed <s_Timer3_new_time.1777+0x3>
    1a56:	40 91 e6 06 	lds	r20, 0x06E6	; 0x8006e6 <s_Timer3_old_time.1776>
    1a5a:	50 91 e7 06 	lds	r21, 0x06E7	; 0x8006e7 <s_Timer3_old_time.1776+0x1>
    1a5e:	60 91 e8 06 	lds	r22, 0x06E8	; 0x8006e8 <s_Timer3_old_time.1776+0x2>
    1a62:	70 91 e9 06 	lds	r23, 0x06E9	; 0x8006e9 <s_Timer3_old_time.1776+0x3>
    1a66:	84 1b       	sub	r24, r20
    1a68:	95 0b       	sbc	r25, r21
    1a6a:	a6 0b       	sbc	r26, r22
    1a6c:	b7 0b       	sbc	r27, r23
    1a6e:	89 83       	std	Y+1, r24	; 0x01
    1a70:	9a 83       	std	Y+2, r25	; 0x02
    1a72:	ab 83       	std	Y+3, r26	; 0x03
    1a74:	bc 83       	std	Y+4, r27	; 0x04
	// save the to the old time to next interrupt
	s_Timer3_old_time = s_Timer3_new_time;
    1a76:	80 91 ea 06 	lds	r24, 0x06EA	; 0x8006ea <s_Timer3_new_time.1777>
    1a7a:	90 91 eb 06 	lds	r25, 0x06EB	; 0x8006eb <s_Timer3_new_time.1777+0x1>
    1a7e:	a0 91 ec 06 	lds	r26, 0x06EC	; 0x8006ec <s_Timer3_new_time.1777+0x2>
    1a82:	b0 91 ed 06 	lds	r27, 0x06ED	; 0x8006ed <s_Timer3_new_time.1777+0x3>
    1a86:	80 93 e6 06 	sts	0x06E6, r24	; 0x8006e6 <s_Timer3_old_time.1776>
    1a8a:	90 93 e7 06 	sts	0x06E7, r25	; 0x8006e7 <s_Timer3_old_time.1776+0x1>
    1a8e:	a0 93 e8 06 	sts	0x06E8, r26	; 0x8006e8 <s_Timer3_old_time.1776+0x2>
    1a92:	b0 93 e9 06 	sts	0x06E9, r27	; 0x8006e9 <s_Timer3_old_time.1776+0x3>
	//call back function on upper layer to get time
	g_timer3_config->isr_call_back(diff_time);
    1a96:	69 81       	ldd	r22, Y+1	; 0x01
    1a98:	7a 81       	ldd	r23, Y+2	; 0x02
    1a9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a9c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a9e:	e0 91 39 1a 	lds	r30, 0x1A39	; 0x801a39 <g_timer3_config>
    1aa2:	f0 91 3a 1a 	lds	r31, 0x1A3A	; 0x801a3a <g_timer3_config+0x1>
    1aa6:	02 80       	ldd	r0, Z+2	; 0x02
    1aa8:	f3 81       	ldd	r31, Z+3	; 0x03
    1aaa:	e0 2d       	mov	r30, r0
    1aac:	19 95       	eicall
}
    1aae:	0f 90       	pop	r0
    1ab0:	0f 90       	pop	r0
    1ab2:	0f 90       	pop	r0
    1ab4:	0f 90       	pop	r0
    1ab6:	df 91       	pop	r29
    1ab8:	cf 91       	pop	r28
    1aba:	ff 91       	pop	r31
    1abc:	ef 91       	pop	r30
    1abe:	bf 91       	pop	r27
    1ac0:	af 91       	pop	r26
    1ac2:	9f 91       	pop	r25
    1ac4:	8f 91       	pop	r24
    1ac6:	7f 91       	pop	r23
    1ac8:	6f 91       	pop	r22
    1aca:	5f 91       	pop	r21
    1acc:	4f 91       	pop	r20
    1ace:	3f 91       	pop	r19
    1ad0:	2f 91       	pop	r18
    1ad2:	0f 90       	pop	r0
    1ad4:	0b be       	out	0x3b, r0	; 59
    1ad6:	0f 90       	pop	r0
    1ad8:	0f be       	out	0x3f, r0	; 63
    1ada:	0f 90       	pop	r0
    1adc:	1f 90       	pop	r1
    1ade:	18 95       	reti

00001ae0 <__vector_42>:
// interrupted service routine when we have reach the number of  Ticks On Encoder
ISR(TIMER4_COMPA_vect)
{
    1ae0:	1f 92       	push	r1
    1ae2:	0f 92       	push	r0
    1ae4:	0f b6       	in	r0, 0x3f	; 63
    1ae6:	0f 92       	push	r0
    1ae8:	11 24       	eor	r1, r1
    1aea:	0b b6       	in	r0, 0x3b	; 59
    1aec:	0f 92       	push	r0
    1aee:	2f 93       	push	r18
    1af0:	3f 93       	push	r19
    1af2:	4f 93       	push	r20
    1af4:	5f 93       	push	r21
    1af6:	6f 93       	push	r22
    1af8:	7f 93       	push	r23
    1afa:	8f 93       	push	r24
    1afc:	9f 93       	push	r25
    1afe:	af 93       	push	r26
    1b00:	bf 93       	push	r27
    1b02:	ef 93       	push	r30
    1b04:	ff 93       	push	r31
    1b06:	cf 93       	push	r28
    1b08:	df 93       	push	r29
    1b0a:	00 d0       	rcall	.+0      	; 0x1b0c <__vector_42+0x2c>
    1b0c:	1f 92       	push	r1
    1b0e:	cd b7       	in	r28, 0x3d	; 61
    1b10:	de b7       	in	r29, 0x3e	; 62
	volatile uint32_t diff_time;      // to save the different between new time and old time
	volatile static uint32_t s_Timer4_old_time;
	volatile static uint32_t s_Timer4_new_time;
	// get the time now
	//UART0_puts("ISR444444444444444444444444444444444444\n");
	s_Timer4_new_time = Get_millis();
    1b12:	0e 94 15 22 	call	0x442a	; 0x442a <Get_millis>
    1b16:	60 93 e2 06 	sts	0x06E2, r22	; 0x8006e2 <s_Timer4_new_time.1785>
    1b1a:	70 93 e3 06 	sts	0x06E3, r23	; 0x8006e3 <s_Timer4_new_time.1785+0x1>
    1b1e:	80 93 e4 06 	sts	0x06E4, r24	; 0x8006e4 <s_Timer4_new_time.1785+0x2>
    1b22:	90 93 e5 06 	sts	0x06E5, r25	; 0x8006e5 <s_Timer4_new_time.1785+0x3>
	// calculate the diff between now and last interrupt
	diff_time = s_Timer4_new_time - s_Timer4_old_time;
    1b26:	80 91 e2 06 	lds	r24, 0x06E2	; 0x8006e2 <s_Timer4_new_time.1785>
    1b2a:	90 91 e3 06 	lds	r25, 0x06E3	; 0x8006e3 <s_Timer4_new_time.1785+0x1>
    1b2e:	a0 91 e4 06 	lds	r26, 0x06E4	; 0x8006e4 <s_Timer4_new_time.1785+0x2>
    1b32:	b0 91 e5 06 	lds	r27, 0x06E5	; 0x8006e5 <s_Timer4_new_time.1785+0x3>
    1b36:	40 91 de 06 	lds	r20, 0x06DE	; 0x8006de <s_Timer4_old_time.1784>
    1b3a:	50 91 df 06 	lds	r21, 0x06DF	; 0x8006df <s_Timer4_old_time.1784+0x1>
    1b3e:	60 91 e0 06 	lds	r22, 0x06E0	; 0x8006e0 <s_Timer4_old_time.1784+0x2>
    1b42:	70 91 e1 06 	lds	r23, 0x06E1	; 0x8006e1 <s_Timer4_old_time.1784+0x3>
    1b46:	84 1b       	sub	r24, r20
    1b48:	95 0b       	sbc	r25, r21
    1b4a:	a6 0b       	sbc	r26, r22
    1b4c:	b7 0b       	sbc	r27, r23
    1b4e:	89 83       	std	Y+1, r24	; 0x01
    1b50:	9a 83       	std	Y+2, r25	; 0x02
    1b52:	ab 83       	std	Y+3, r26	; 0x03
    1b54:	bc 83       	std	Y+4, r27	; 0x04
	// save the to the old time to next interrupt
	s_Timer4_old_time = s_Timer4_new_time;
    1b56:	80 91 e2 06 	lds	r24, 0x06E2	; 0x8006e2 <s_Timer4_new_time.1785>
    1b5a:	90 91 e3 06 	lds	r25, 0x06E3	; 0x8006e3 <s_Timer4_new_time.1785+0x1>
    1b5e:	a0 91 e4 06 	lds	r26, 0x06E4	; 0x8006e4 <s_Timer4_new_time.1785+0x2>
    1b62:	b0 91 e5 06 	lds	r27, 0x06E5	; 0x8006e5 <s_Timer4_new_time.1785+0x3>
    1b66:	80 93 de 06 	sts	0x06DE, r24	; 0x8006de <s_Timer4_old_time.1784>
    1b6a:	90 93 df 06 	sts	0x06DF, r25	; 0x8006df <s_Timer4_old_time.1784+0x1>
    1b6e:	a0 93 e0 06 	sts	0x06E0, r26	; 0x8006e0 <s_Timer4_old_time.1784+0x2>
    1b72:	b0 93 e1 06 	sts	0x06E1, r27	; 0x8006e1 <s_Timer4_old_time.1784+0x3>
	//call back function on upper layer to get time
	g_timer4_config->isr_call_back(diff_time);
    1b76:	69 81       	ldd	r22, Y+1	; 0x01
    1b78:	7a 81       	ldd	r23, Y+2	; 0x02
    1b7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b7c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b7e:	e0 91 3b 1a 	lds	r30, 0x1A3B	; 0x801a3b <g_timer4_config>
    1b82:	f0 91 3c 1a 	lds	r31, 0x1A3C	; 0x801a3c <g_timer4_config+0x1>
    1b86:	02 80       	ldd	r0, Z+2	; 0x02
    1b88:	f3 81       	ldd	r31, Z+3	; 0x03
    1b8a:	e0 2d       	mov	r30, r0
    1b8c:	19 95       	eicall
}
    1b8e:	0f 90       	pop	r0
    1b90:	0f 90       	pop	r0
    1b92:	0f 90       	pop	r0
    1b94:	0f 90       	pop	r0
    1b96:	df 91       	pop	r29
    1b98:	cf 91       	pop	r28
    1b9a:	ff 91       	pop	r31
    1b9c:	ef 91       	pop	r30
    1b9e:	bf 91       	pop	r27
    1ba0:	af 91       	pop	r26
    1ba2:	9f 91       	pop	r25
    1ba4:	8f 91       	pop	r24
    1ba6:	7f 91       	pop	r23
    1ba8:	6f 91       	pop	r22
    1baa:	5f 91       	pop	r21
    1bac:	4f 91       	pop	r20
    1bae:	3f 91       	pop	r19
    1bb0:	2f 91       	pop	r18
    1bb2:	0f 90       	pop	r0
    1bb4:	0b be       	out	0x3b, r0	; 59
    1bb6:	0f 90       	pop	r0
    1bb8:	0f be       	out	0x3f, r0	; 63
    1bba:	0f 90       	pop	r0
    1bbc:	1f 90       	pop	r1
    1bbe:	18 95       	reti

00001bc0 <__vector_47>:
// interrupted service routine when we have reach the number of  Ticks On Encoder
ISR(TIMER5_COMPA_vect)
{
    1bc0:	1f 92       	push	r1
    1bc2:	0f 92       	push	r0
    1bc4:	0f b6       	in	r0, 0x3f	; 63
    1bc6:	0f 92       	push	r0
    1bc8:	11 24       	eor	r1, r1
    1bca:	0b b6       	in	r0, 0x3b	; 59
    1bcc:	0f 92       	push	r0
    1bce:	2f 93       	push	r18
    1bd0:	3f 93       	push	r19
    1bd2:	4f 93       	push	r20
    1bd4:	5f 93       	push	r21
    1bd6:	6f 93       	push	r22
    1bd8:	7f 93       	push	r23
    1bda:	8f 93       	push	r24
    1bdc:	9f 93       	push	r25
    1bde:	af 93       	push	r26
    1be0:	bf 93       	push	r27
    1be2:	ef 93       	push	r30
    1be4:	ff 93       	push	r31
    1be6:	cf 93       	push	r28
    1be8:	df 93       	push	r29
    1bea:	00 d0       	rcall	.+0      	; 0x1bec <__vector_47+0x2c>
    1bec:	1f 92       	push	r1
    1bee:	cd b7       	in	r28, 0x3d	; 61
    1bf0:	de b7       	in	r29, 0x3e	; 62
	volatile static uint32_t s_Timer5_old_time;
	volatile static uint32_t s_Timer5_new_time;
	//TOG_BIT(PORTB,0);
	//UART0_puts("TIMER55555555555555555\n");
	// get the time now
	s_Timer5_new_time = Get_millis();
    1bf2:	0e 94 15 22 	call	0x442a	; 0x442a <Get_millis>
    1bf6:	60 93 da 06 	sts	0x06DA, r22	; 0x8006da <s_Timer5_new_time.1793>
    1bfa:	70 93 db 06 	sts	0x06DB, r23	; 0x8006db <s_Timer5_new_time.1793+0x1>
    1bfe:	80 93 dc 06 	sts	0x06DC, r24	; 0x8006dc <s_Timer5_new_time.1793+0x2>
    1c02:	90 93 dd 06 	sts	0x06DD, r25	; 0x8006dd <s_Timer5_new_time.1793+0x3>
	// calculate the difference between now and last interrupt
	diff_time = s_Timer5_new_time - s_Timer5_old_time;
    1c06:	80 91 da 06 	lds	r24, 0x06DA	; 0x8006da <s_Timer5_new_time.1793>
    1c0a:	90 91 db 06 	lds	r25, 0x06DB	; 0x8006db <s_Timer5_new_time.1793+0x1>
    1c0e:	a0 91 dc 06 	lds	r26, 0x06DC	; 0x8006dc <s_Timer5_new_time.1793+0x2>
    1c12:	b0 91 dd 06 	lds	r27, 0x06DD	; 0x8006dd <s_Timer5_new_time.1793+0x3>
    1c16:	40 91 d6 06 	lds	r20, 0x06D6	; 0x8006d6 <s_Timer5_old_time.1792>
    1c1a:	50 91 d7 06 	lds	r21, 0x06D7	; 0x8006d7 <s_Timer5_old_time.1792+0x1>
    1c1e:	60 91 d8 06 	lds	r22, 0x06D8	; 0x8006d8 <s_Timer5_old_time.1792+0x2>
    1c22:	70 91 d9 06 	lds	r23, 0x06D9	; 0x8006d9 <s_Timer5_old_time.1792+0x3>
    1c26:	84 1b       	sub	r24, r20
    1c28:	95 0b       	sbc	r25, r21
    1c2a:	a6 0b       	sbc	r26, r22
    1c2c:	b7 0b       	sbc	r27, r23
    1c2e:	89 83       	std	Y+1, r24	; 0x01
    1c30:	9a 83       	std	Y+2, r25	; 0x02
    1c32:	ab 83       	std	Y+3, r26	; 0x03
    1c34:	bc 83       	std	Y+4, r27	; 0x04
	// save the to the old time to next interrupt
	s_Timer5_old_time = s_Timer5_new_time;
    1c36:	80 91 da 06 	lds	r24, 0x06DA	; 0x8006da <s_Timer5_new_time.1793>
    1c3a:	90 91 db 06 	lds	r25, 0x06DB	; 0x8006db <s_Timer5_new_time.1793+0x1>
    1c3e:	a0 91 dc 06 	lds	r26, 0x06DC	; 0x8006dc <s_Timer5_new_time.1793+0x2>
    1c42:	b0 91 dd 06 	lds	r27, 0x06DD	; 0x8006dd <s_Timer5_new_time.1793+0x3>
    1c46:	80 93 d6 06 	sts	0x06D6, r24	; 0x8006d6 <s_Timer5_old_time.1792>
    1c4a:	90 93 d7 06 	sts	0x06D7, r25	; 0x8006d7 <s_Timer5_old_time.1792+0x1>
    1c4e:	a0 93 d8 06 	sts	0x06D8, r26	; 0x8006d8 <s_Timer5_old_time.1792+0x2>
    1c52:	b0 93 d9 06 	sts	0x06D9, r27	; 0x8006d9 <s_Timer5_old_time.1792+0x3>
	// clear the counter
	TIMER5_COUNT_L = 0;
    1c56:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <__TEXT_REGION_LENGTH__+0x700124>
	//call back function on upper layer to get time
	g_timer5_config->isr_call_back(diff_time);
    1c5a:	69 81       	ldd	r22, Y+1	; 0x01
    1c5c:	7a 81       	ldd	r23, Y+2	; 0x02
    1c5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c60:	9c 81       	ldd	r25, Y+4	; 0x04
    1c62:	e0 91 3f 1a 	lds	r30, 0x1A3F	; 0x801a3f <g_timer5_config>
    1c66:	f0 91 40 1a 	lds	r31, 0x1A40	; 0x801a40 <g_timer5_config+0x1>
    1c6a:	02 80       	ldd	r0, Z+2	; 0x02
    1c6c:	f3 81       	ldd	r31, Z+3	; 0x03
    1c6e:	e0 2d       	mov	r30, r0
    1c70:	19 95       	eicall
	
}
    1c72:	0f 90       	pop	r0
    1c74:	0f 90       	pop	r0
    1c76:	0f 90       	pop	r0
    1c78:	0f 90       	pop	r0
    1c7a:	df 91       	pop	r29
    1c7c:	cf 91       	pop	r28
    1c7e:	ff 91       	pop	r31
    1c80:	ef 91       	pop	r30
    1c82:	bf 91       	pop	r27
    1c84:	af 91       	pop	r26
    1c86:	9f 91       	pop	r25
    1c88:	8f 91       	pop	r24
    1c8a:	7f 91       	pop	r23
    1c8c:	6f 91       	pop	r22
    1c8e:	5f 91       	pop	r21
    1c90:	4f 91       	pop	r20
    1c92:	3f 91       	pop	r19
    1c94:	2f 91       	pop	r18
    1c96:	0f 90       	pop	r0
    1c98:	0b be       	out	0x3b, r0	; 59
    1c9a:	0f 90       	pop	r0
    1c9c:	0f be       	out	0x3f, r0	; 63
    1c9e:	0f 90       	pop	r0
    1ca0:	1f 90       	pop	r1
    1ca2:	18 95       	reti

00001ca4 <__vector_25>:

	while ((c = pgm_read_byte(progmem_s++))) {
		UART3_putc(c);
	}

} /* UART3_puts_p */
    1ca4:	1f 92       	push	r1
    1ca6:	0f 92       	push	r0
    1ca8:	0f b6       	in	r0, 0x3f	; 63
    1caa:	0f 92       	push	r0
    1cac:	11 24       	eor	r1, r1
    1cae:	0b b6       	in	r0, 0x3b	; 59
    1cb0:	0f 92       	push	r0
    1cb2:	2f 93       	push	r18
    1cb4:	3f 93       	push	r19
    1cb6:	4f 93       	push	r20
    1cb8:	5f 93       	push	r21
    1cba:	8f 93       	push	r24
    1cbc:	9f 93       	push	r25
    1cbe:	ef 93       	push	r30
    1cc0:	ff 93       	push	r31
    1cc2:	20 91 c0 00 	lds	r18, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
    1cc6:	30 91 c6 00 	lds	r19, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    1cca:	28 71       	andi	r18, 0x18	; 24
    1ccc:	80 91 0b 0a 	lds	r24, 0x0A0B	; 0x800a0b <UART_RxHead>
    1cd0:	90 e0       	ldi	r25, 0x00	; 0
    1cd2:	01 96       	adiw	r24, 0x01	; 1
    1cd4:	8f 77       	andi	r24, 0x7F	; 127
    1cd6:	99 27       	eor	r25, r25
    1cd8:	40 91 0a 0a 	lds	r20, 0x0A0A	; 0x800a0a <UART_RxTail>
    1cdc:	50 e0       	ldi	r21, 0x00	; 0
    1cde:	84 17       	cp	r24, r20
    1ce0:	95 07       	cpc	r25, r21
    1ce2:	39 f0       	breq	.+14     	; 0x1cf2 <__vector_25+0x4e>
    1ce4:	80 93 0b 0a 	sts	0x0A0B, r24	; 0x800a0b <UART_RxHead>
    1ce8:	fc 01       	movw	r30, r24
    1cea:	e2 5f       	subi	r30, 0xF2	; 242
    1cec:	f5 4f       	sbci	r31, 0xF5	; 245
    1cee:	30 83       	st	Z, r19
    1cf0:	01 c0       	rjmp	.+2      	; 0x1cf4 <__vector_25+0x50>
    1cf2:	22 e0       	ldi	r18, 0x02	; 2
    1cf4:	20 93 09 0a 	sts	0x0A09, r18	; 0x800a09 <UART_LastRxError>
    1cf8:	ff 91       	pop	r31
    1cfa:	ef 91       	pop	r30
    1cfc:	9f 91       	pop	r25
    1cfe:	8f 91       	pop	r24
    1d00:	5f 91       	pop	r21
    1d02:	4f 91       	pop	r20
    1d04:	3f 91       	pop	r19
    1d06:	2f 91       	pop	r18
    1d08:	0f 90       	pop	r0
    1d0a:	0b be       	out	0x3b, r0	; 59
    1d0c:	0f 90       	pop	r0
    1d0e:	0f be       	out	0x3f, r0	; 63
    1d10:	0f 90       	pop	r0
    1d12:	1f 90       	pop	r1
    1d14:	18 95       	reti

00001d16 <__vector_26>:
    1d16:	1f 92       	push	r1
    1d18:	0f 92       	push	r0
    1d1a:	0f b6       	in	r0, 0x3f	; 63
    1d1c:	0f 92       	push	r0
    1d1e:	11 24       	eor	r1, r1
    1d20:	0b b6       	in	r0, 0x3b	; 59
    1d22:	0f 92       	push	r0
    1d24:	8f 93       	push	r24
    1d26:	9f 93       	push	r25
    1d28:	ef 93       	push	r30
    1d2a:	ff 93       	push	r31
    1d2c:	90 91 0d 0a 	lds	r25, 0x0A0D	; 0x800a0d <UART_TxHead>
    1d30:	80 91 0c 0a 	lds	r24, 0x0A0C	; 0x800a0c <UART_TxTail>
    1d34:	98 17       	cp	r25, r24
    1d36:	89 f0       	breq	.+34     	; 0x1d5a <__vector_26+0x44>
    1d38:	80 91 0c 0a 	lds	r24, 0x0A0C	; 0x800a0c <UART_TxTail>
    1d3c:	90 e0       	ldi	r25, 0x00	; 0
    1d3e:	01 96       	adiw	r24, 0x01	; 1
    1d40:	8f 77       	andi	r24, 0x7F	; 127
    1d42:	99 27       	eor	r25, r25
    1d44:	80 93 0c 0a 	sts	0x0A0C, r24	; 0x800a0c <UART_TxTail>
    1d48:	fc 01       	movw	r30, r24
    1d4a:	e2 57       	subi	r30, 0x72	; 114
    1d4c:	f5 4f       	sbci	r31, 0xF5	; 245
    1d4e:	80 81       	ld	r24, Z
    1d50:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    1d54:	10 92 f9 06 	sts	0x06F9, r1	; 0x8006f9 <UART0_Transmission_end>
    1d58:	08 c0       	rjmp	.+16     	; 0x1d6a <__vector_26+0x54>
    1d5a:	e1 ec       	ldi	r30, 0xC1	; 193
    1d5c:	f0 e0       	ldi	r31, 0x00	; 0
    1d5e:	80 81       	ld	r24, Z
    1d60:	8f 7d       	andi	r24, 0xDF	; 223
    1d62:	80 83       	st	Z, r24
    1d64:	81 e0       	ldi	r24, 0x01	; 1
    1d66:	80 93 f9 06 	sts	0x06F9, r24	; 0x8006f9 <UART0_Transmission_end>
    1d6a:	ff 91       	pop	r31
    1d6c:	ef 91       	pop	r30
    1d6e:	9f 91       	pop	r25
    1d70:	8f 91       	pop	r24
    1d72:	0f 90       	pop	r0
    1d74:	0b be       	out	0x3b, r0	; 59
    1d76:	0f 90       	pop	r0
    1d78:	0f be       	out	0x3f, r0	; 63
    1d7a:	0f 90       	pop	r0
    1d7c:	1f 90       	pop	r1
    1d7e:	18 95       	reti

00001d80 <UART0_init>:
    1d80:	0f 93       	push	r16
    1d82:	1f 93       	push	r17
    1d84:	8b 01       	movw	r16, r22
    1d86:	9c 01       	movw	r18, r24
    1d88:	f8 94       	cli
    1d8a:	10 92 0d 0a 	sts	0x0A0D, r1	; 0x800a0d <UART_TxHead>
    1d8e:	10 92 0c 0a 	sts	0x0A0C, r1	; 0x800a0c <UART_TxTail>
    1d92:	10 92 0b 0a 	sts	0x0A0B, r1	; 0x800a0b <UART_RxHead>
    1d96:	10 92 0a 0a 	sts	0x0A0A, r1	; 0x800a0a <UART_RxTail>
    1d9a:	78 94       	sei
    1d9c:	dc 01       	movw	r26, r24
    1d9e:	cb 01       	movw	r24, r22
    1da0:	80 58       	subi	r24, 0x80	; 128
    1da2:	9b 47       	sbci	r25, 0x7B	; 123
    1da4:	a1 4e       	sbci	r26, 0xE1	; 225
    1da6:	bf 4f       	sbci	r27, 0xFF	; 255
    1da8:	88 0f       	add	r24, r24
    1daa:	99 1f       	adc	r25, r25
    1dac:	aa 1f       	adc	r26, r26
    1dae:	bb 1f       	adc	r27, r27
    1db0:	88 0f       	add	r24, r24
    1db2:	99 1f       	adc	r25, r25
    1db4:	aa 1f       	adc	r26, r26
    1db6:	bb 1f       	adc	r27, r27
    1db8:	bc 01       	movw	r22, r24
    1dba:	cd 01       	movw	r24, r26
    1dbc:	66 0f       	add	r22, r22
    1dbe:	77 1f       	adc	r23, r23
    1dc0:	88 1f       	adc	r24, r24
    1dc2:	99 1f       	adc	r25, r25
    1dc4:	00 0f       	add	r16, r16
    1dc6:	11 1f       	adc	r17, r17
    1dc8:	22 1f       	adc	r18, r18
    1dca:	33 1f       	adc	r19, r19
    1dcc:	00 0f       	add	r16, r16
    1dce:	11 1f       	adc	r17, r17
    1dd0:	22 1f       	adc	r18, r18
    1dd2:	33 1f       	adc	r19, r19
    1dd4:	a9 01       	movw	r20, r18
    1dd6:	98 01       	movw	r18, r16
    1dd8:	22 0f       	add	r18, r18
    1dda:	33 1f       	adc	r19, r19
    1ddc:	44 1f       	adc	r20, r20
    1dde:	55 1f       	adc	r21, r21
    1de0:	22 0f       	add	r18, r18
    1de2:	33 1f       	adc	r19, r19
    1de4:	44 1f       	adc	r20, r20
    1de6:	55 1f       	adc	r21, r21
    1de8:	0e 94 cf 25 	call	0x4b9e	; 0x4b9e <__udivmodsi4>
    1dec:	ba 01       	movw	r22, r20
    1dee:	a9 01       	movw	r20, r18
    1df0:	41 50       	subi	r20, 0x01	; 1
    1df2:	51 09       	sbc	r21, r1
    1df4:	61 09       	sbc	r22, r1
    1df6:	71 09       	sbc	r23, r1
    1df8:	57 ff       	sbrs	r21, 7
    1dfa:	06 c0       	rjmp	.+12     	; 0x1e08 <UART0_init+0x88>
    1dfc:	82 e0       	ldi	r24, 0x02	; 2
    1dfe:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
    1e02:	5f 77       	andi	r21, 0x7F	; 127
    1e04:	66 27       	eor	r22, r22
    1e06:	77 27       	eor	r23, r23
    1e08:	bb 27       	eor	r27, r27
    1e0a:	a7 2f       	mov	r26, r23
    1e0c:	96 2f       	mov	r25, r22
    1e0e:	85 2f       	mov	r24, r21
    1e10:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
    1e14:	40 93 c4 00 	sts	0x00C4, r20	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
    1e18:	88 e9       	ldi	r24, 0x98	; 152
    1e1a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    1e1e:	86 e0       	ldi	r24, 0x06	; 6
    1e20:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
    1e24:	1f 91       	pop	r17
    1e26:	0f 91       	pop	r16
    1e28:	08 95       	ret

00001e2a <UART0_putc>:
    1e2a:	40 91 0d 0a 	lds	r20, 0x0A0D	; 0x800a0d <UART_TxHead>
    1e2e:	50 e0       	ldi	r21, 0x00	; 0
    1e30:	4f 5f       	subi	r20, 0xFF	; 255
    1e32:	5f 4f       	sbci	r21, 0xFF	; 255
    1e34:	4f 77       	andi	r20, 0x7F	; 127
    1e36:	55 27       	eor	r21, r21
    1e38:	20 91 0c 0a 	lds	r18, 0x0A0C	; 0x800a0c <UART_TxTail>
    1e3c:	30 e0       	ldi	r19, 0x00	; 0
    1e3e:	42 17       	cp	r20, r18
    1e40:	53 07       	cpc	r21, r19
    1e42:	d1 f3       	breq	.-12     	; 0x1e38 <UART0_putc+0xe>
    1e44:	fa 01       	movw	r30, r20
    1e46:	e2 57       	subi	r30, 0x72	; 114
    1e48:	f5 4f       	sbci	r31, 0xF5	; 245
    1e4a:	80 83       	st	Z, r24
    1e4c:	40 93 0d 0a 	sts	0x0A0D, r20	; 0x800a0d <UART_TxHead>
    1e50:	e1 ec       	ldi	r30, 0xC1	; 193
    1e52:	f0 e0       	ldi	r31, 0x00	; 0
    1e54:	80 81       	ld	r24, Z
    1e56:	80 62       	ori	r24, 0x20	; 32
    1e58:	80 83       	st	Z, r24
    1e5a:	08 95       	ret

00001e5c <UART0_OutUDec>:
    1e5c:	0f 93       	push	r16
    1e5e:	1f 93       	push	r17
    1e60:	cf 93       	push	r28
    1e62:	df 93       	push	r29
    1e64:	6a 30       	cpi	r22, 0x0A	; 10
    1e66:	71 05       	cpc	r23, r1
    1e68:	81 05       	cpc	r24, r1
    1e6a:	91 05       	cpc	r25, r1
    1e6c:	58 f0       	brcs	.+22     	; 0x1e84 <UART0_OutUDec+0x28>
    1e6e:	2a e0       	ldi	r18, 0x0A	; 10
    1e70:	30 e0       	ldi	r19, 0x00	; 0
    1e72:	40 e0       	ldi	r20, 0x00	; 0
    1e74:	50 e0       	ldi	r21, 0x00	; 0
    1e76:	0e 94 cf 25 	call	0x4b9e	; 0x4b9e <__udivmodsi4>
    1e7a:	06 2f       	mov	r16, r22
    1e7c:	ca 01       	movw	r24, r20
    1e7e:	b9 01       	movw	r22, r18
    1e80:	ed df       	rcall	.-38     	; 0x1e5c <UART0_OutUDec>
    1e82:	60 2f       	mov	r22, r16
    1e84:	80 e3       	ldi	r24, 0x30	; 48
    1e86:	86 0f       	add	r24, r22
    1e88:	d0 df       	rcall	.-96     	; 0x1e2a <UART0_putc>
    1e8a:	df 91       	pop	r29
    1e8c:	cf 91       	pop	r28
    1e8e:	1f 91       	pop	r17
    1e90:	0f 91       	pop	r16
    1e92:	08 95       	ret

00001e94 <UART0_puts>:
    1e94:	cf 93       	push	r28
    1e96:	df 93       	push	r29
    1e98:	ec 01       	movw	r28, r24
    1e9a:	88 81       	ld	r24, Y
    1e9c:	88 23       	and	r24, r24
    1e9e:	29 f0       	breq	.+10     	; 0x1eaa <UART0_puts+0x16>
    1ea0:	21 96       	adiw	r28, 0x01	; 1
    1ea2:	c3 df       	rcall	.-122    	; 0x1e2a <UART0_putc>
    1ea4:	89 91       	ld	r24, Y+
    1ea6:	81 11       	cpse	r24, r1
    1ea8:	fc cf       	rjmp	.-8      	; 0x1ea2 <UART0_puts+0xe>
    1eaa:	df 91       	pop	r29
    1eac:	cf 91       	pop	r28
    1eae:	08 95       	ret

00001eb0 <__vector_36>:
    1eb0:	1f 92       	push	r1
    1eb2:	0f 92       	push	r0
    1eb4:	0f b6       	in	r0, 0x3f	; 63
    1eb6:	0f 92       	push	r0
    1eb8:	11 24       	eor	r1, r1
    1eba:	0b b6       	in	r0, 0x3b	; 59
    1ebc:	0f 92       	push	r0
    1ebe:	2f 93       	push	r18
    1ec0:	3f 93       	push	r19
    1ec2:	4f 93       	push	r20
    1ec4:	5f 93       	push	r21
    1ec6:	8f 93       	push	r24
    1ec8:	9f 93       	push	r25
    1eca:	ef 93       	push	r30
    1ecc:	ff 93       	push	r31
    1ece:	20 91 c8 00 	lds	r18, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
    1ed2:	30 91 ce 00 	lds	r19, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    1ed6:	28 71       	andi	r18, 0x18	; 24
    1ed8:	80 91 06 09 	lds	r24, 0x0906	; 0x800906 <UART1_RxHead>
    1edc:	90 e0       	ldi	r25, 0x00	; 0
    1ede:	01 96       	adiw	r24, 0x01	; 1
    1ee0:	8f 77       	andi	r24, 0x7F	; 127
    1ee2:	99 27       	eor	r25, r25
    1ee4:	40 91 05 09 	lds	r20, 0x0905	; 0x800905 <UART1_RxTail>
    1ee8:	50 e0       	ldi	r21, 0x00	; 0
    1eea:	84 17       	cp	r24, r20
    1eec:	95 07       	cpc	r25, r21
    1eee:	39 f0       	breq	.+14     	; 0x1efe <__vector_36+0x4e>
    1ef0:	80 93 06 09 	sts	0x0906, r24	; 0x800906 <UART1_RxHead>
    1ef4:	fc 01       	movw	r30, r24
    1ef6:	e7 5f       	subi	r30, 0xF7	; 247
    1ef8:	f6 4f       	sbci	r31, 0xF6	; 246
    1efa:	30 83       	st	Z, r19
    1efc:	01 c0       	rjmp	.+2      	; 0x1f00 <__vector_36+0x50>
    1efe:	22 e0       	ldi	r18, 0x02	; 2
    1f00:	20 93 04 09 	sts	0x0904, r18	; 0x800904 <UART1_LastRxError>
    1f04:	ff 91       	pop	r31
    1f06:	ef 91       	pop	r30
    1f08:	9f 91       	pop	r25
    1f0a:	8f 91       	pop	r24
    1f0c:	5f 91       	pop	r21
    1f0e:	4f 91       	pop	r20
    1f10:	3f 91       	pop	r19
    1f12:	2f 91       	pop	r18
    1f14:	0f 90       	pop	r0
    1f16:	0b be       	out	0x3b, r0	; 59
    1f18:	0f 90       	pop	r0
    1f1a:	0f be       	out	0x3f, r0	; 63
    1f1c:	0f 90       	pop	r0
    1f1e:	1f 90       	pop	r1
    1f20:	18 95       	reti

00001f22 <__vector_37>:
    1f22:	1f 92       	push	r1
    1f24:	0f 92       	push	r0
    1f26:	0f b6       	in	r0, 0x3f	; 63
    1f28:	0f 92       	push	r0
    1f2a:	11 24       	eor	r1, r1
    1f2c:	0b b6       	in	r0, 0x3b	; 59
    1f2e:	0f 92       	push	r0
    1f30:	8f 93       	push	r24
    1f32:	9f 93       	push	r25
    1f34:	ef 93       	push	r30
    1f36:	ff 93       	push	r31
    1f38:	90 91 08 09 	lds	r25, 0x0908	; 0x800908 <UART1_TxHead>
    1f3c:	80 91 07 09 	lds	r24, 0x0907	; 0x800907 <UART1_TxTail>
    1f40:	98 17       	cp	r25, r24
    1f42:	89 f0       	breq	.+34     	; 0x1f66 <__vector_37+0x44>
    1f44:	80 91 07 09 	lds	r24, 0x0907	; 0x800907 <UART1_TxTail>
    1f48:	90 e0       	ldi	r25, 0x00	; 0
    1f4a:	01 96       	adiw	r24, 0x01	; 1
    1f4c:	8f 77       	andi	r24, 0x7F	; 127
    1f4e:	99 27       	eor	r25, r25
    1f50:	80 93 07 09 	sts	0x0907, r24	; 0x800907 <UART1_TxTail>
    1f54:	fc 01       	movw	r30, r24
    1f56:	e7 57       	subi	r30, 0x77	; 119
    1f58:	f6 4f       	sbci	r31, 0xF6	; 246
    1f5a:	80 81       	ld	r24, Z
    1f5c:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    1f60:	10 92 f8 06 	sts	0x06F8, r1	; 0x8006f8 <UART1_Transmission_end>
    1f64:	08 c0       	rjmp	.+16     	; 0x1f76 <__vector_37+0x54>
    1f66:	e9 ec       	ldi	r30, 0xC9	; 201
    1f68:	f0 e0       	ldi	r31, 0x00	; 0
    1f6a:	80 81       	ld	r24, Z
    1f6c:	8f 7d       	andi	r24, 0xDF	; 223
    1f6e:	80 83       	st	Z, r24
    1f70:	81 e0       	ldi	r24, 0x01	; 1
    1f72:	80 93 f8 06 	sts	0x06F8, r24	; 0x8006f8 <UART1_Transmission_end>
    1f76:	ff 91       	pop	r31
    1f78:	ef 91       	pop	r30
    1f7a:	9f 91       	pop	r25
    1f7c:	8f 91       	pop	r24
    1f7e:	0f 90       	pop	r0
    1f80:	0b be       	out	0x3b, r0	; 59
    1f82:	0f 90       	pop	r0
    1f84:	0f be       	out	0x3f, r0	; 63
    1f86:	0f 90       	pop	r0
    1f88:	1f 90       	pop	r1
    1f8a:	18 95       	reti

00001f8c <UART1_init>:
    1f8c:	0f 93       	push	r16
    1f8e:	1f 93       	push	r17
    1f90:	8b 01       	movw	r16, r22
    1f92:	9c 01       	movw	r18, r24
    1f94:	f8 94       	cli
    1f96:	10 92 08 09 	sts	0x0908, r1	; 0x800908 <UART1_TxHead>
    1f9a:	10 92 07 09 	sts	0x0907, r1	; 0x800907 <UART1_TxTail>
    1f9e:	10 92 06 09 	sts	0x0906, r1	; 0x800906 <UART1_RxHead>
    1fa2:	10 92 05 09 	sts	0x0905, r1	; 0x800905 <UART1_RxTail>
    1fa6:	78 94       	sei
    1fa8:	dc 01       	movw	r26, r24
    1faa:	cb 01       	movw	r24, r22
    1fac:	80 58       	subi	r24, 0x80	; 128
    1fae:	9b 47       	sbci	r25, 0x7B	; 123
    1fb0:	a1 4e       	sbci	r26, 0xE1	; 225
    1fb2:	bf 4f       	sbci	r27, 0xFF	; 255
    1fb4:	88 0f       	add	r24, r24
    1fb6:	99 1f       	adc	r25, r25
    1fb8:	aa 1f       	adc	r26, r26
    1fba:	bb 1f       	adc	r27, r27
    1fbc:	88 0f       	add	r24, r24
    1fbe:	99 1f       	adc	r25, r25
    1fc0:	aa 1f       	adc	r26, r26
    1fc2:	bb 1f       	adc	r27, r27
    1fc4:	bc 01       	movw	r22, r24
    1fc6:	cd 01       	movw	r24, r26
    1fc8:	66 0f       	add	r22, r22
    1fca:	77 1f       	adc	r23, r23
    1fcc:	88 1f       	adc	r24, r24
    1fce:	99 1f       	adc	r25, r25
    1fd0:	00 0f       	add	r16, r16
    1fd2:	11 1f       	adc	r17, r17
    1fd4:	22 1f       	adc	r18, r18
    1fd6:	33 1f       	adc	r19, r19
    1fd8:	00 0f       	add	r16, r16
    1fda:	11 1f       	adc	r17, r17
    1fdc:	22 1f       	adc	r18, r18
    1fde:	33 1f       	adc	r19, r19
    1fe0:	a9 01       	movw	r20, r18
    1fe2:	98 01       	movw	r18, r16
    1fe4:	22 0f       	add	r18, r18
    1fe6:	33 1f       	adc	r19, r19
    1fe8:	44 1f       	adc	r20, r20
    1fea:	55 1f       	adc	r21, r21
    1fec:	22 0f       	add	r18, r18
    1fee:	33 1f       	adc	r19, r19
    1ff0:	44 1f       	adc	r20, r20
    1ff2:	55 1f       	adc	r21, r21
    1ff4:	0e 94 cf 25 	call	0x4b9e	; 0x4b9e <__udivmodsi4>
    1ff8:	ba 01       	movw	r22, r20
    1ffa:	a9 01       	movw	r20, r18
    1ffc:	41 50       	subi	r20, 0x01	; 1
    1ffe:	51 09       	sbc	r21, r1
    2000:	61 09       	sbc	r22, r1
    2002:	71 09       	sbc	r23, r1
    2004:	57 ff       	sbrs	r21, 7
    2006:	06 c0       	rjmp	.+12     	; 0x2014 <UART1_init+0x88>
    2008:	82 e0       	ldi	r24, 0x02	; 2
    200a:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
    200e:	5f 77       	andi	r21, 0x7F	; 127
    2010:	66 27       	eor	r22, r22
    2012:	77 27       	eor	r23, r23
    2014:	bb 27       	eor	r27, r27
    2016:	a7 2f       	mov	r26, r23
    2018:	96 2f       	mov	r25, r22
    201a:	85 2f       	mov	r24, r21
    201c:	80 93 cd 00 	sts	0x00CD, r24	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7000cd>
    2020:	40 93 cc 00 	sts	0x00CC, r20	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7000cc>
    2024:	88 e9       	ldi	r24, 0x98	; 152
    2026:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7000c9>
    202a:	86 e0       	ldi	r24, 0x06	; 6
    202c:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7000ca>
    2030:	1f 91       	pop	r17
    2032:	0f 91       	pop	r16
    2034:	08 95       	ret

00002036 <UART1_getc>:
    2036:	f8 94       	cli
    2038:	90 91 06 09 	lds	r25, 0x0906	; 0x800906 <UART1_RxHead>
    203c:	80 91 05 09 	lds	r24, 0x0905	; 0x800905 <UART1_RxTail>
    2040:	98 13       	cpse	r25, r24
    2042:	04 c0       	rjmp	.+8      	; 0x204c <UART1_getc+0x16>
    2044:	78 94       	sei
    2046:	80 e0       	ldi	r24, 0x00	; 0
    2048:	91 e0       	ldi	r25, 0x01	; 1
    204a:	08 95       	ret
    204c:	80 91 05 09 	lds	r24, 0x0905	; 0x800905 <UART1_RxTail>
    2050:	90 e0       	ldi	r25, 0x00	; 0
    2052:	01 96       	adiw	r24, 0x01	; 1
    2054:	8f 77       	andi	r24, 0x7F	; 127
    2056:	99 27       	eor	r25, r25
    2058:	80 93 05 09 	sts	0x0905, r24	; 0x800905 <UART1_RxTail>
    205c:	78 94       	sei
    205e:	fc 01       	movw	r30, r24
    2060:	e7 5f       	subi	r30, 0xF7	; 247
    2062:	f6 4f       	sbci	r31, 0xF6	; 246
    2064:	20 81       	ld	r18, Z
    2066:	80 91 04 09 	lds	r24, 0x0904	; 0x800904 <UART1_LastRxError>
    206a:	90 e0       	ldi	r25, 0x00	; 0
    206c:	98 2f       	mov	r25, r24
    206e:	88 27       	eor	r24, r24
    2070:	82 0f       	add	r24, r18
    2072:	91 1d       	adc	r25, r1
    2074:	08 95       	ret

00002076 <UART1_putc>:
    2076:	40 91 08 09 	lds	r20, 0x0908	; 0x800908 <UART1_TxHead>
    207a:	50 e0       	ldi	r21, 0x00	; 0
    207c:	4f 5f       	subi	r20, 0xFF	; 255
    207e:	5f 4f       	sbci	r21, 0xFF	; 255
    2080:	4f 77       	andi	r20, 0x7F	; 127
    2082:	55 27       	eor	r21, r21
    2084:	20 91 07 09 	lds	r18, 0x0907	; 0x800907 <UART1_TxTail>
    2088:	30 e0       	ldi	r19, 0x00	; 0
    208a:	42 17       	cp	r20, r18
    208c:	53 07       	cpc	r21, r19
    208e:	d1 f3       	breq	.-12     	; 0x2084 <UART1_putc+0xe>
    2090:	fa 01       	movw	r30, r20
    2092:	e7 57       	subi	r30, 0x77	; 119
    2094:	f6 4f       	sbci	r31, 0xF6	; 246
    2096:	80 83       	st	Z, r24
    2098:	40 93 08 09 	sts	0x0908, r20	; 0x800908 <UART1_TxHead>
    209c:	e9 ec       	ldi	r30, 0xC9	; 201
    209e:	f0 e0       	ldi	r31, 0x00	; 0
    20a0:	80 81       	ld	r24, Z
    20a2:	80 62       	ori	r24, 0x20	; 32
    20a4:	80 83       	st	Z, r24
    20a6:	08 95       	ret

000020a8 <UART1_available>:
    20a8:	f8 94       	cli
    20aa:	80 91 06 09 	lds	r24, 0x0906	; 0x800906 <UART1_RxHead>
    20ae:	20 91 05 09 	lds	r18, 0x0905	; 0x800905 <UART1_RxTail>
    20b2:	78 94       	sei
    20b4:	90 e0       	ldi	r25, 0x00	; 0
    20b6:	80 58       	subi	r24, 0x80	; 128
    20b8:	9f 4f       	sbci	r25, 0xFF	; 255
    20ba:	82 1b       	sub	r24, r18
    20bc:	91 09       	sbc	r25, r1
    20be:	8f 77       	andi	r24, 0x7F	; 127
    20c0:	99 27       	eor	r25, r25
    20c2:	08 95       	ret

000020c4 <UART1_flush>:
    20c4:	80 91 f8 06 	lds	r24, 0x06F8	; 0x8006f8 <UART1_Transmission_end>
    20c8:	88 23       	and	r24, r24
    20ca:	e1 f3       	breq	.-8      	; 0x20c4 <UART1_flush>
    20cc:	08 95       	ret

000020ce <__vector_51>:
    20ce:	1f 92       	push	r1
    20d0:	0f 92       	push	r0
    20d2:	0f b6       	in	r0, 0x3f	; 63
    20d4:	0f 92       	push	r0
    20d6:	11 24       	eor	r1, r1
    20d8:	0b b6       	in	r0, 0x3b	; 59
    20da:	0f 92       	push	r0
    20dc:	2f 93       	push	r18
    20de:	3f 93       	push	r19
    20e0:	4f 93       	push	r20
    20e2:	5f 93       	push	r21
    20e4:	8f 93       	push	r24
    20e6:	9f 93       	push	r25
    20e8:	ef 93       	push	r30
    20ea:	ff 93       	push	r31
    20ec:	20 91 d0 00 	lds	r18, 0x00D0	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7000d0>
    20f0:	30 91 d6 00 	lds	r19, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    20f4:	28 71       	andi	r18, 0x18	; 24
    20f6:	80 91 01 08 	lds	r24, 0x0801	; 0x800801 <UART2_RxHead>
    20fa:	90 e0       	ldi	r25, 0x00	; 0
    20fc:	01 96       	adiw	r24, 0x01	; 1
    20fe:	8f 77       	andi	r24, 0x7F	; 127
    2100:	99 27       	eor	r25, r25
    2102:	40 91 00 08 	lds	r20, 0x0800	; 0x800800 <UART2_RxTail>
    2106:	50 e0       	ldi	r21, 0x00	; 0
    2108:	84 17       	cp	r24, r20
    210a:	95 07       	cpc	r25, r21
    210c:	39 f0       	breq	.+14     	; 0x211c <__vector_51+0x4e>
    210e:	80 93 01 08 	sts	0x0801, r24	; 0x800801 <UART2_RxHead>
    2112:	fc 01       	movw	r30, r24
    2114:	ec 5f       	subi	r30, 0xFC	; 252
    2116:	f7 4f       	sbci	r31, 0xF7	; 247
    2118:	30 83       	st	Z, r19
    211a:	01 c0       	rjmp	.+2      	; 0x211e <__vector_51+0x50>
    211c:	22 e0       	ldi	r18, 0x02	; 2
    211e:	20 93 ff 07 	sts	0x07FF, r18	; 0x8007ff <UART2_LastRxError>
    2122:	ff 91       	pop	r31
    2124:	ef 91       	pop	r30
    2126:	9f 91       	pop	r25
    2128:	8f 91       	pop	r24
    212a:	5f 91       	pop	r21
    212c:	4f 91       	pop	r20
    212e:	3f 91       	pop	r19
    2130:	2f 91       	pop	r18
    2132:	0f 90       	pop	r0
    2134:	0b be       	out	0x3b, r0	; 59
    2136:	0f 90       	pop	r0
    2138:	0f be       	out	0x3f, r0	; 63
    213a:	0f 90       	pop	r0
    213c:	1f 90       	pop	r1
    213e:	18 95       	reti

00002140 <__vector_52>:
    2140:	1f 92       	push	r1
    2142:	0f 92       	push	r0
    2144:	0f b6       	in	r0, 0x3f	; 63
    2146:	0f 92       	push	r0
    2148:	11 24       	eor	r1, r1
    214a:	0b b6       	in	r0, 0x3b	; 59
    214c:	0f 92       	push	r0
    214e:	8f 93       	push	r24
    2150:	9f 93       	push	r25
    2152:	ef 93       	push	r30
    2154:	ff 93       	push	r31
    2156:	90 91 03 08 	lds	r25, 0x0803	; 0x800803 <UART2_TxHead>
    215a:	80 91 02 08 	lds	r24, 0x0802	; 0x800802 <UART2_TxTail>
    215e:	98 17       	cp	r25, r24
    2160:	89 f0       	breq	.+34     	; 0x2184 <__vector_52+0x44>
    2162:	80 91 02 08 	lds	r24, 0x0802	; 0x800802 <UART2_TxTail>
    2166:	90 e0       	ldi	r25, 0x00	; 0
    2168:	01 96       	adiw	r24, 0x01	; 1
    216a:	8f 77       	andi	r24, 0x7F	; 127
    216c:	99 27       	eor	r25, r25
    216e:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <UART2_TxTail>
    2172:	fc 01       	movw	r30, r24
    2174:	ec 57       	subi	r30, 0x7C	; 124
    2176:	f7 4f       	sbci	r31, 0xF7	; 247
    2178:	80 81       	ld	r24, Z
    217a:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    217e:	10 92 f7 06 	sts	0x06F7, r1	; 0x8006f7 <UART2_Transmission_end>
    2182:	08 c0       	rjmp	.+16     	; 0x2194 <__vector_52+0x54>
    2184:	e1 ed       	ldi	r30, 0xD1	; 209
    2186:	f0 e0       	ldi	r31, 0x00	; 0
    2188:	80 81       	ld	r24, Z
    218a:	8f 7d       	andi	r24, 0xDF	; 223
    218c:	80 83       	st	Z, r24
    218e:	81 e0       	ldi	r24, 0x01	; 1
    2190:	80 93 f7 06 	sts	0x06F7, r24	; 0x8006f7 <UART2_Transmission_end>
    2194:	ff 91       	pop	r31
    2196:	ef 91       	pop	r30
    2198:	9f 91       	pop	r25
    219a:	8f 91       	pop	r24
    219c:	0f 90       	pop	r0
    219e:	0b be       	out	0x3b, r0	; 59
    21a0:	0f 90       	pop	r0
    21a2:	0f be       	out	0x3f, r0	; 63
    21a4:	0f 90       	pop	r0
    21a6:	1f 90       	pop	r1
    21a8:	18 95       	reti

000021aa <UART2_init>:
    21aa:	0f 93       	push	r16
    21ac:	1f 93       	push	r17
    21ae:	8b 01       	movw	r16, r22
    21b0:	9c 01       	movw	r18, r24
    21b2:	f8 94       	cli
    21b4:	10 92 03 08 	sts	0x0803, r1	; 0x800803 <UART2_TxHead>
    21b8:	10 92 02 08 	sts	0x0802, r1	; 0x800802 <UART2_TxTail>
    21bc:	10 92 01 08 	sts	0x0801, r1	; 0x800801 <UART2_RxHead>
    21c0:	10 92 00 08 	sts	0x0800, r1	; 0x800800 <UART2_RxTail>
    21c4:	78 94       	sei
    21c6:	dc 01       	movw	r26, r24
    21c8:	cb 01       	movw	r24, r22
    21ca:	80 58       	subi	r24, 0x80	; 128
    21cc:	9b 47       	sbci	r25, 0x7B	; 123
    21ce:	a1 4e       	sbci	r26, 0xE1	; 225
    21d0:	bf 4f       	sbci	r27, 0xFF	; 255
    21d2:	88 0f       	add	r24, r24
    21d4:	99 1f       	adc	r25, r25
    21d6:	aa 1f       	adc	r26, r26
    21d8:	bb 1f       	adc	r27, r27
    21da:	88 0f       	add	r24, r24
    21dc:	99 1f       	adc	r25, r25
    21de:	aa 1f       	adc	r26, r26
    21e0:	bb 1f       	adc	r27, r27
    21e2:	bc 01       	movw	r22, r24
    21e4:	cd 01       	movw	r24, r26
    21e6:	66 0f       	add	r22, r22
    21e8:	77 1f       	adc	r23, r23
    21ea:	88 1f       	adc	r24, r24
    21ec:	99 1f       	adc	r25, r25
    21ee:	00 0f       	add	r16, r16
    21f0:	11 1f       	adc	r17, r17
    21f2:	22 1f       	adc	r18, r18
    21f4:	33 1f       	adc	r19, r19
    21f6:	00 0f       	add	r16, r16
    21f8:	11 1f       	adc	r17, r17
    21fa:	22 1f       	adc	r18, r18
    21fc:	33 1f       	adc	r19, r19
    21fe:	a9 01       	movw	r20, r18
    2200:	98 01       	movw	r18, r16
    2202:	22 0f       	add	r18, r18
    2204:	33 1f       	adc	r19, r19
    2206:	44 1f       	adc	r20, r20
    2208:	55 1f       	adc	r21, r21
    220a:	22 0f       	add	r18, r18
    220c:	33 1f       	adc	r19, r19
    220e:	44 1f       	adc	r20, r20
    2210:	55 1f       	adc	r21, r21
    2212:	0e 94 cf 25 	call	0x4b9e	; 0x4b9e <__udivmodsi4>
    2216:	ba 01       	movw	r22, r20
    2218:	a9 01       	movw	r20, r18
    221a:	41 50       	subi	r20, 0x01	; 1
    221c:	51 09       	sbc	r21, r1
    221e:	61 09       	sbc	r22, r1
    2220:	71 09       	sbc	r23, r1
    2222:	57 ff       	sbrs	r21, 7
    2224:	06 c0       	rjmp	.+12     	; 0x2232 <__stack+0x33>
    2226:	82 e0       	ldi	r24, 0x02	; 2
    2228:	80 93 d0 00 	sts	0x00D0, r24	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7000d0>
    222c:	5f 77       	andi	r21, 0x7F	; 127
    222e:	66 27       	eor	r22, r22
    2230:	77 27       	eor	r23, r23
    2232:	bb 27       	eor	r27, r27
    2234:	a7 2f       	mov	r26, r23
    2236:	96 2f       	mov	r25, r22
    2238:	85 2f       	mov	r24, r21
    223a:	80 93 d5 00 	sts	0x00D5, r24	; 0x8000d5 <__TEXT_REGION_LENGTH__+0x7000d5>
    223e:	40 93 d4 00 	sts	0x00D4, r20	; 0x8000d4 <__TEXT_REGION_LENGTH__+0x7000d4>
    2242:	88 e9       	ldi	r24, 0x98	; 152
    2244:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7000d1>
    2248:	86 e0       	ldi	r24, 0x06	; 6
    224a:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7000d2>
    224e:	1f 91       	pop	r17
    2250:	0f 91       	pop	r16
    2252:	08 95       	ret

00002254 <UART2_getc>:
    2254:	90 91 01 08 	lds	r25, 0x0801	; 0x800801 <UART2_RxHead>
    2258:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <UART2_RxTail>
    225c:	98 17       	cp	r25, r24
    225e:	a1 f0       	breq	.+40     	; 0x2288 <UART2_getc+0x34>
    2260:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <UART2_RxTail>
    2264:	90 e0       	ldi	r25, 0x00	; 0
    2266:	01 96       	adiw	r24, 0x01	; 1
    2268:	8f 77       	andi	r24, 0x7F	; 127
    226a:	99 27       	eor	r25, r25
    226c:	80 93 00 08 	sts	0x0800, r24	; 0x800800 <UART2_RxTail>
    2270:	fc 01       	movw	r30, r24
    2272:	ec 5f       	subi	r30, 0xFC	; 252
    2274:	f7 4f       	sbci	r31, 0xF7	; 247
    2276:	20 81       	ld	r18, Z
    2278:	80 91 ff 07 	lds	r24, 0x07FF	; 0x8007ff <UART2_LastRxError>
    227c:	90 e0       	ldi	r25, 0x00	; 0
    227e:	98 2f       	mov	r25, r24
    2280:	88 27       	eor	r24, r24
    2282:	82 0f       	add	r24, r18
    2284:	91 1d       	adc	r25, r1
    2286:	08 95       	ret
    2288:	80 e0       	ldi	r24, 0x00	; 0
    228a:	91 e0       	ldi	r25, 0x01	; 1
    228c:	08 95       	ret

0000228e <UART2_putc>:
    228e:	40 91 03 08 	lds	r20, 0x0803	; 0x800803 <UART2_TxHead>
    2292:	50 e0       	ldi	r21, 0x00	; 0
    2294:	4f 5f       	subi	r20, 0xFF	; 255
    2296:	5f 4f       	sbci	r21, 0xFF	; 255
    2298:	4f 77       	andi	r20, 0x7F	; 127
    229a:	55 27       	eor	r21, r21
    229c:	20 91 02 08 	lds	r18, 0x0802	; 0x800802 <UART2_TxTail>
    22a0:	30 e0       	ldi	r19, 0x00	; 0
    22a2:	42 17       	cp	r20, r18
    22a4:	53 07       	cpc	r21, r19
    22a6:	d1 f3       	breq	.-12     	; 0x229c <UART2_putc+0xe>
    22a8:	fa 01       	movw	r30, r20
    22aa:	ec 57       	subi	r30, 0x7C	; 124
    22ac:	f7 4f       	sbci	r31, 0xF7	; 247
    22ae:	80 83       	st	Z, r24
    22b0:	40 93 03 08 	sts	0x0803, r20	; 0x800803 <UART2_TxHead>
    22b4:	e1 ed       	ldi	r30, 0xD1	; 209
    22b6:	f0 e0       	ldi	r31, 0x00	; 0
    22b8:	80 81       	ld	r24, Z
    22ba:	80 62       	ori	r24, 0x20	; 32
    22bc:	80 83       	st	Z, r24
    22be:	08 95       	ret

000022c0 <UART2_available>:
    22c0:	f8 94       	cli
    22c2:	80 91 01 08 	lds	r24, 0x0801	; 0x800801 <UART2_RxHead>
    22c6:	20 91 00 08 	lds	r18, 0x0800	; 0x800800 <UART2_RxTail>
    22ca:	78 94       	sei
    22cc:	90 e0       	ldi	r25, 0x00	; 0
    22ce:	80 58       	subi	r24, 0x80	; 128
    22d0:	9f 4f       	sbci	r25, 0xFF	; 255
    22d2:	82 1b       	sub	r24, r18
    22d4:	91 09       	sbc	r25, r1
    22d6:	8f 77       	andi	r24, 0x7F	; 127
    22d8:	99 27       	eor	r25, r25
    22da:	08 95       	ret

000022dc <UART2_flush>:
    22dc:	80 91 f7 06 	lds	r24, 0x06F7	; 0x8006f7 <UART2_Transmission_end>
    22e0:	88 23       	and	r24, r24
    22e2:	e1 f3       	breq	.-8      	; 0x22dc <UART2_flush>
    22e4:	08 95       	ret

000022e6 <__vector_54>:
    22e6:	1f 92       	push	r1
    22e8:	0f 92       	push	r0
    22ea:	0f b6       	in	r0, 0x3f	; 63
    22ec:	0f 92       	push	r0
    22ee:	11 24       	eor	r1, r1
    22f0:	0b b6       	in	r0, 0x3b	; 59
    22f2:	0f 92       	push	r0
    22f4:	2f 93       	push	r18
    22f6:	3f 93       	push	r19
    22f8:	4f 93       	push	r20
    22fa:	5f 93       	push	r21
    22fc:	8f 93       	push	r24
    22fe:	9f 93       	push	r25
    2300:	ef 93       	push	r30
    2302:	ff 93       	push	r31
    2304:	20 91 30 01 	lds	r18, 0x0130	; 0x800130 <__TEXT_REGION_LENGTH__+0x700130>
    2308:	30 91 36 01 	lds	r19, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    230c:	28 71       	andi	r18, 0x18	; 24
    230e:	80 91 fc 06 	lds	r24, 0x06FC	; 0x8006fc <UART3_RxHead>
    2312:	90 e0       	ldi	r25, 0x00	; 0
    2314:	01 96       	adiw	r24, 0x01	; 1
    2316:	8f 77       	andi	r24, 0x7F	; 127
    2318:	99 27       	eor	r25, r25
    231a:	40 91 fb 06 	lds	r20, 0x06FB	; 0x8006fb <UART3_RxTail>
    231e:	50 e0       	ldi	r21, 0x00	; 0
    2320:	84 17       	cp	r24, r20
    2322:	95 07       	cpc	r25, r21
    2324:	39 f0       	breq	.+14     	; 0x2334 <__vector_54+0x4e>
    2326:	80 93 fc 06 	sts	0x06FC, r24	; 0x8006fc <UART3_RxHead>
    232a:	fc 01       	movw	r30, r24
    232c:	e1 50       	subi	r30, 0x01	; 1
    232e:	f9 4f       	sbci	r31, 0xF9	; 249
    2330:	30 83       	st	Z, r19
    2332:	01 c0       	rjmp	.+2      	; 0x2336 <__vector_54+0x50>
    2334:	22 e0       	ldi	r18, 0x02	; 2
    2336:	20 93 fa 06 	sts	0x06FA, r18	; 0x8006fa <UART3_LastRxError>
    233a:	ff 91       	pop	r31
    233c:	ef 91       	pop	r30
    233e:	9f 91       	pop	r25
    2340:	8f 91       	pop	r24
    2342:	5f 91       	pop	r21
    2344:	4f 91       	pop	r20
    2346:	3f 91       	pop	r19
    2348:	2f 91       	pop	r18
    234a:	0f 90       	pop	r0
    234c:	0b be       	out	0x3b, r0	; 59
    234e:	0f 90       	pop	r0
    2350:	0f be       	out	0x3f, r0	; 63
    2352:	0f 90       	pop	r0
    2354:	1f 90       	pop	r1
    2356:	18 95       	reti

00002358 <__vector_55>:
    2358:	1f 92       	push	r1
    235a:	0f 92       	push	r0
    235c:	0f b6       	in	r0, 0x3f	; 63
    235e:	0f 92       	push	r0
    2360:	11 24       	eor	r1, r1
    2362:	0b b6       	in	r0, 0x3b	; 59
    2364:	0f 92       	push	r0
    2366:	8f 93       	push	r24
    2368:	9f 93       	push	r25
    236a:	ef 93       	push	r30
    236c:	ff 93       	push	r31
    236e:	90 91 fe 06 	lds	r25, 0x06FE	; 0x8006fe <UART3_TxHead>
    2372:	80 91 fd 06 	lds	r24, 0x06FD	; 0x8006fd <UART3_TxTail>
    2376:	98 17       	cp	r25, r24
    2378:	89 f0       	breq	.+34     	; 0x239c <__vector_55+0x44>
    237a:	80 91 fd 06 	lds	r24, 0x06FD	; 0x8006fd <UART3_TxTail>
    237e:	90 e0       	ldi	r25, 0x00	; 0
    2380:	01 96       	adiw	r24, 0x01	; 1
    2382:	8f 77       	andi	r24, 0x7F	; 127
    2384:	99 27       	eor	r25, r25
    2386:	80 93 fd 06 	sts	0x06FD, r24	; 0x8006fd <UART3_TxTail>
    238a:	fc 01       	movw	r30, r24
    238c:	e1 58       	subi	r30, 0x81	; 129
    238e:	f8 4f       	sbci	r31, 0xF8	; 248
    2390:	80 81       	ld	r24, Z
    2392:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    2396:	10 92 f6 06 	sts	0x06F6, r1	; 0x8006f6 <UART3_Transmission_end>
    239a:	08 c0       	rjmp	.+16     	; 0x23ac <__vector_55+0x54>
    239c:	e1 e3       	ldi	r30, 0x31	; 49
    239e:	f1 e0       	ldi	r31, 0x01	; 1
    23a0:	80 81       	ld	r24, Z
    23a2:	8f 7d       	andi	r24, 0xDF	; 223
    23a4:	80 83       	st	Z, r24
    23a6:	81 e0       	ldi	r24, 0x01	; 1
    23a8:	80 93 f6 06 	sts	0x06F6, r24	; 0x8006f6 <UART3_Transmission_end>
    23ac:	ff 91       	pop	r31
    23ae:	ef 91       	pop	r30
    23b0:	9f 91       	pop	r25
    23b2:	8f 91       	pop	r24
    23b4:	0f 90       	pop	r0
    23b6:	0b be       	out	0x3b, r0	; 59
    23b8:	0f 90       	pop	r0
    23ba:	0f be       	out	0x3f, r0	; 63
    23bc:	0f 90       	pop	r0
    23be:	1f 90       	pop	r1
    23c0:	18 95       	reti

000023c2 <UART3_init>:
    23c2:	0f 93       	push	r16
    23c4:	1f 93       	push	r17
    23c6:	8b 01       	movw	r16, r22
    23c8:	9c 01       	movw	r18, r24
    23ca:	f8 94       	cli
    23cc:	10 92 fe 06 	sts	0x06FE, r1	; 0x8006fe <UART3_TxHead>
    23d0:	10 92 fd 06 	sts	0x06FD, r1	; 0x8006fd <UART3_TxTail>
    23d4:	10 92 fc 06 	sts	0x06FC, r1	; 0x8006fc <UART3_RxHead>
    23d8:	10 92 fb 06 	sts	0x06FB, r1	; 0x8006fb <UART3_RxTail>
    23dc:	78 94       	sei
    23de:	dc 01       	movw	r26, r24
    23e0:	cb 01       	movw	r24, r22
    23e2:	80 58       	subi	r24, 0x80	; 128
    23e4:	9b 47       	sbci	r25, 0x7B	; 123
    23e6:	a1 4e       	sbci	r26, 0xE1	; 225
    23e8:	bf 4f       	sbci	r27, 0xFF	; 255
    23ea:	88 0f       	add	r24, r24
    23ec:	99 1f       	adc	r25, r25
    23ee:	aa 1f       	adc	r26, r26
    23f0:	bb 1f       	adc	r27, r27
    23f2:	88 0f       	add	r24, r24
    23f4:	99 1f       	adc	r25, r25
    23f6:	aa 1f       	adc	r26, r26
    23f8:	bb 1f       	adc	r27, r27
    23fa:	bc 01       	movw	r22, r24
    23fc:	cd 01       	movw	r24, r26
    23fe:	66 0f       	add	r22, r22
    2400:	77 1f       	adc	r23, r23
    2402:	88 1f       	adc	r24, r24
    2404:	99 1f       	adc	r25, r25
    2406:	00 0f       	add	r16, r16
    2408:	11 1f       	adc	r17, r17
    240a:	22 1f       	adc	r18, r18
    240c:	33 1f       	adc	r19, r19
    240e:	00 0f       	add	r16, r16
    2410:	11 1f       	adc	r17, r17
    2412:	22 1f       	adc	r18, r18
    2414:	33 1f       	adc	r19, r19
    2416:	a9 01       	movw	r20, r18
    2418:	98 01       	movw	r18, r16
    241a:	22 0f       	add	r18, r18
    241c:	33 1f       	adc	r19, r19
    241e:	44 1f       	adc	r20, r20
    2420:	55 1f       	adc	r21, r21
    2422:	22 0f       	add	r18, r18
    2424:	33 1f       	adc	r19, r19
    2426:	44 1f       	adc	r20, r20
    2428:	55 1f       	adc	r21, r21
    242a:	0e 94 cf 25 	call	0x4b9e	; 0x4b9e <__udivmodsi4>
    242e:	ba 01       	movw	r22, r20
    2430:	a9 01       	movw	r20, r18
    2432:	41 50       	subi	r20, 0x01	; 1
    2434:	51 09       	sbc	r21, r1
    2436:	61 09       	sbc	r22, r1
    2438:	71 09       	sbc	r23, r1
    243a:	57 ff       	sbrs	r21, 7
    243c:	06 c0       	rjmp	.+12     	; 0x244a <UART3_init+0x88>
    243e:	82 e0       	ldi	r24, 0x02	; 2
    2440:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <__TEXT_REGION_LENGTH__+0x700130>
    2444:	5f 77       	andi	r21, 0x7F	; 127
    2446:	66 27       	eor	r22, r22
    2448:	77 27       	eor	r23, r23
    244a:	bb 27       	eor	r27, r27
    244c:	a7 2f       	mov	r26, r23
    244e:	96 2f       	mov	r25, r22
    2450:	85 2f       	mov	r24, r21
    2452:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <__TEXT_REGION_LENGTH__+0x700135>
    2456:	40 93 34 01 	sts	0x0134, r20	; 0x800134 <__TEXT_REGION_LENGTH__+0x700134>
    245a:	88 e9       	ldi	r24, 0x98	; 152
    245c:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <__TEXT_REGION_LENGTH__+0x700131>
    2460:	86 e0       	ldi	r24, 0x06	; 6
    2462:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <__TEXT_REGION_LENGTH__+0x700132>
    2466:	1f 91       	pop	r17
    2468:	0f 91       	pop	r16
    246a:	08 95       	ret

0000246c <UART3_getc>:
    246c:	90 91 fc 06 	lds	r25, 0x06FC	; 0x8006fc <UART3_RxHead>
    2470:	80 91 fb 06 	lds	r24, 0x06FB	; 0x8006fb <UART3_RxTail>
    2474:	98 17       	cp	r25, r24
    2476:	a1 f0       	breq	.+40     	; 0x24a0 <UART3_getc+0x34>
    2478:	80 91 fb 06 	lds	r24, 0x06FB	; 0x8006fb <UART3_RxTail>
    247c:	90 e0       	ldi	r25, 0x00	; 0
    247e:	01 96       	adiw	r24, 0x01	; 1
    2480:	8f 77       	andi	r24, 0x7F	; 127
    2482:	99 27       	eor	r25, r25
    2484:	80 93 fb 06 	sts	0x06FB, r24	; 0x8006fb <UART3_RxTail>
    2488:	fc 01       	movw	r30, r24
    248a:	e1 50       	subi	r30, 0x01	; 1
    248c:	f9 4f       	sbci	r31, 0xF9	; 249
    248e:	20 81       	ld	r18, Z
    2490:	80 91 fa 06 	lds	r24, 0x06FA	; 0x8006fa <UART3_LastRxError>
    2494:	90 e0       	ldi	r25, 0x00	; 0
    2496:	98 2f       	mov	r25, r24
    2498:	88 27       	eor	r24, r24
    249a:	82 0f       	add	r24, r18
    249c:	91 1d       	adc	r25, r1
    249e:	08 95       	ret
    24a0:	80 e0       	ldi	r24, 0x00	; 0
    24a2:	91 e0       	ldi	r25, 0x01	; 1
    24a4:	08 95       	ret

000024a6 <UART3_putc>:
    24a6:	40 91 fe 06 	lds	r20, 0x06FE	; 0x8006fe <UART3_TxHead>
    24aa:	50 e0       	ldi	r21, 0x00	; 0
    24ac:	4f 5f       	subi	r20, 0xFF	; 255
    24ae:	5f 4f       	sbci	r21, 0xFF	; 255
    24b0:	4f 77       	andi	r20, 0x7F	; 127
    24b2:	55 27       	eor	r21, r21
    24b4:	20 91 fd 06 	lds	r18, 0x06FD	; 0x8006fd <UART3_TxTail>
    24b8:	30 e0       	ldi	r19, 0x00	; 0
    24ba:	42 17       	cp	r20, r18
    24bc:	53 07       	cpc	r21, r19
    24be:	d1 f3       	breq	.-12     	; 0x24b4 <UART3_putc+0xe>
    24c0:	fa 01       	movw	r30, r20
    24c2:	e1 58       	subi	r30, 0x81	; 129
    24c4:	f8 4f       	sbci	r31, 0xF8	; 248
    24c6:	80 83       	st	Z, r24
    24c8:	40 93 fe 06 	sts	0x06FE, r20	; 0x8006fe <UART3_TxHead>
    24cc:	e1 e3       	ldi	r30, 0x31	; 49
    24ce:	f1 e0       	ldi	r31, 0x01	; 1
    24d0:	80 81       	ld	r24, Z
    24d2:	80 62       	ori	r24, 0x20	; 32
    24d4:	80 83       	st	Z, r24
    24d6:	08 95       	ret

000024d8 <UART3_available>:
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    24d8:	f8 94       	cli
uint16_t UART3_available(void)
{
	uint16_t ret;
	
	ATOMIC_BLOCK(ATOMIC_FORCEON) {
		ret = (UART_RX3_BUFFER_SIZE + UART3_RxHead - UART3_RxTail) & UART_RX3_BUFFER_MASK;
    24da:	80 91 fc 06 	lds	r24, 0x06FC	; 0x8006fc <UART3_RxHead>
    24de:	20 91 fb 06 	lds	r18, 0x06FB	; 0x8006fb <UART3_RxTail>
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
    24e2:	78 94       	sei
	}
	return ret;
    24e4:	90 e0       	ldi	r25, 0x00	; 0
    24e6:	80 58       	subi	r24, 0x80	; 128
    24e8:	9f 4f       	sbci	r25, 0xFF	; 255
    24ea:	82 1b       	sub	r24, r18
    24ec:	91 09       	sbc	r25, r1
} /* UART3_available */
    24ee:	8f 77       	andi	r24, 0x7F	; 127
    24f0:	99 27       	eor	r25, r25
    24f2:	08 95       	ret

000024f4 <UART3_flush>:
void UART3_flush(void)
{
//	ATOMIC_BLOCK(ATOMIC_FORCEON) {
//		UART3_RxHead = UART3_RxTail;
//	} commented by mohab
	while(0 == UART3_Transmission_end);
    24f4:	80 91 f6 06 	lds	r24, 0x06F6	; 0x8006f6 <UART3_Transmission_end>
    24f8:	88 23       	and	r24, r24
    24fa:	e1 f3       	breq	.-8      	; 0x24f4 <UART3_flush>
} /* UART3_flush */
    24fc:	08 95       	ret

000024fe <RTE_drum_init>:


/*static uint16_t Conveyor_speed;*/
static uint16_t Drum_speed = 0;

void RTE_drum_init(void){
    24fe:	08 95       	ret

00002500 <RTE_invertersetting_init>:

static SemaphoreHandle_t Sema_Time_second_handle;
static StaticSemaphore_t Sema_Time_second_Buffer;
static uint16_t Time_second;

void RTE_invertersetting_init(void){
    2500:	0f 93       	push	r16
	Sema_Gear_ratio_handle = xSemaphoreCreateBinaryStatic(&Sema_Gear_ratio_Buffer);
    2502:	03 e0       	ldi	r16, 0x03	; 3
    2504:	23 eb       	ldi	r18, 0xB3	; 179
    2506:	3b e0       	ldi	r19, 0x0B	; 11
    2508:	40 e0       	ldi	r20, 0x00	; 0
    250a:	50 e0       	ldi	r21, 0x00	; 0
    250c:	60 e0       	ldi	r22, 0x00	; 0
    250e:	81 e0       	ldi	r24, 0x01	; 1
    2510:	2b d4       	rcall	.+2134   	; 0x2d68 <xQueueGenericCreateStatic>
    2512:	90 93 d3 0b 	sts	0x0BD3, r25	; 0x800bd3 <Sema_Gear_ratio_handle+0x1>
    2516:	80 93 d2 0b 	sts	0x0BD2, r24	; 0x800bd2 <Sema_Gear_ratio_handle>
	Sema_RPM_max_handle = xSemaphoreCreateBinaryStatic(&Sema_RPM_max_Buffer);
    251a:	22 e9       	ldi	r18, 0x92	; 146
    251c:	3b e0       	ldi	r19, 0x0B	; 11
    251e:	40 e0       	ldi	r20, 0x00	; 0
    2520:	50 e0       	ldi	r21, 0x00	; 0
    2522:	60 e0       	ldi	r22, 0x00	; 0
    2524:	81 e0       	ldi	r24, 0x01	; 1
    2526:	20 d4       	rcall	.+2112   	; 0x2d68 <xQueueGenericCreateStatic>
    2528:	90 93 b2 0b 	sts	0x0BB2, r25	; 0x800bb2 <Sema_RPM_max_handle+0x1>
    252c:	80 93 b1 0b 	sts	0x0BB1, r24	; 0x800bb1 <Sema_RPM_max_handle>
	Sema_Conveyor_length_handle =  xSemaphoreCreateBinaryStatic(&Sema_Conveyor_length_Buffer);
    2530:	21 e7       	ldi	r18, 0x71	; 113
    2532:	3b e0       	ldi	r19, 0x0B	; 11
    2534:	40 e0       	ldi	r20, 0x00	; 0
    2536:	50 e0       	ldi	r21, 0x00	; 0
    2538:	60 e0       	ldi	r22, 0x00	; 0
    253a:	81 e0       	ldi	r24, 0x01	; 1
    253c:	15 d4       	rcall	.+2090   	; 0x2d68 <xQueueGenericCreateStatic>
    253e:	90 93 91 0b 	sts	0x0B91, r25	; 0x800b91 <Sema_Conveyor_length_handle+0x1>
    2542:	80 93 90 0b 	sts	0x0B90, r24	; 0x800b90 <Sema_Conveyor_length_handle>
	Sema_Driver_diameter_handle =  xSemaphoreCreateBinaryStatic(&Sema_Driver_diameter_Buffer);
    2546:	20 e5       	ldi	r18, 0x50	; 80
    2548:	3b e0       	ldi	r19, 0x0B	; 11
    254a:	40 e0       	ldi	r20, 0x00	; 0
    254c:	50 e0       	ldi	r21, 0x00	; 0
    254e:	60 e0       	ldi	r22, 0x00	; 0
    2550:	81 e0       	ldi	r24, 0x01	; 1
    2552:	0a d4       	rcall	.+2068   	; 0x2d68 <xQueueGenericCreateStatic>
    2554:	90 93 70 0b 	sts	0x0B70, r25	; 0x800b70 <Sema_Driver_diameter_handle+0x1>
    2558:	80 93 6f 0b 	sts	0x0B6F, r24	; 0x800b6f <Sema_Driver_diameter_handle>
	Sema_Time_minute_handle =  xSemaphoreCreateBinaryStatic(&Sema_Time_minute_Buffer);
    255c:	2f e2       	ldi	r18, 0x2F	; 47
    255e:	3b e0       	ldi	r19, 0x0B	; 11
    2560:	40 e0       	ldi	r20, 0x00	; 0
    2562:	50 e0       	ldi	r21, 0x00	; 0
    2564:	60 e0       	ldi	r22, 0x00	; 0
    2566:	81 e0       	ldi	r24, 0x01	; 1
    2568:	ff d3       	rcall	.+2046   	; 0x2d68 <xQueueGenericCreateStatic>
    256a:	90 93 4f 0b 	sts	0x0B4F, r25	; 0x800b4f <Sema_Time_minute_handle+0x1>
    256e:	80 93 4e 0b 	sts	0x0B4E, r24	; 0x800b4e <Sema_Time_minute_handle>
	Sema_Time_second_handle =  xSemaphoreCreateBinaryStatic(&Sema_Time_second_Buffer);
    2572:	2e e0       	ldi	r18, 0x0E	; 14
    2574:	3b e0       	ldi	r19, 0x0B	; 11
    2576:	40 e0       	ldi	r20, 0x00	; 0
    2578:	50 e0       	ldi	r21, 0x00	; 0
    257a:	60 e0       	ldi	r22, 0x00	; 0
    257c:	81 e0       	ldi	r24, 0x01	; 1
    257e:	f4 d3       	rcall	.+2024   	; 0x2d68 <xQueueGenericCreateStatic>
    2580:	90 93 2e 0b 	sts	0x0B2E, r25	; 0x800b2e <Sema_Time_second_handle+0x1>
    2584:	80 93 2d 0b 	sts	0x0B2D, r24	; 0x800b2d <Sema_Time_second_handle>
}
    2588:	0f 91       	pop	r16
    258a:	08 95       	ret

0000258c <RTE_levels_init>:

static SemaphoreHandle_t Sema_blancher_level_handle;
static StaticSemaphore_t Sema_blancher_level_Buffer;
static uint16_t blancher_level;

void RTE_levels_init(void){
    258c:	0f 93       	push	r16
	Sema_tank_level_handle = xSemaphoreCreateBinaryStatic(&Sema_tank_level_Buffer);
    258e:	03 e0       	ldi	r16, 0x03	; 3
    2590:	25 ef       	ldi	r18, 0xF5	; 245
    2592:	3b e0       	ldi	r19, 0x0B	; 11
    2594:	40 e0       	ldi	r20, 0x00	; 0
    2596:	50 e0       	ldi	r21, 0x00	; 0
    2598:	60 e0       	ldi	r22, 0x00	; 0
    259a:	81 e0       	ldi	r24, 0x01	; 1
    259c:	e5 d3       	rcall	.+1994   	; 0x2d68 <xQueueGenericCreateStatic>
    259e:	90 93 15 0c 	sts	0x0C15, r25	; 0x800c15 <Sema_tank_level_handle+0x1>
    25a2:	80 93 14 0c 	sts	0x0C14, r24	; 0x800c14 <Sema_tank_level_handle>
	Sema_blancher_level_handle = xSemaphoreCreateBinaryStatic(&Sema_blancher_level_Buffer);
    25a6:	24 ed       	ldi	r18, 0xD4	; 212
    25a8:	3b e0       	ldi	r19, 0x0B	; 11
    25aa:	40 e0       	ldi	r20, 0x00	; 0
    25ac:	50 e0       	ldi	r21, 0x00	; 0
    25ae:	60 e0       	ldi	r22, 0x00	; 0
    25b0:	81 e0       	ldi	r24, 0x01	; 1
    25b2:	da d3       	rcall	.+1972   	; 0x2d68 <xQueueGenericCreateStatic>
    25b4:	90 93 f4 0b 	sts	0x0BF4, r25	; 0x800bf4 <Sema_blancher_level_handle+0x1>
    25b8:	80 93 f3 0b 	sts	0x0BF3, r24	; 0x800bf3 <Sema_blancher_level_handle>
}
    25bc:	0f 91       	pop	r16
    25be:	08 95       	ret

000025c0 <RTE_init>:
#include "RTE_levels.h"
#include "RTE_temperature.h"
#include "RTE_main.h"

void RTE_init(void){
	RTE_drum_init();
    25c0:	9e df       	rcall	.-196    	; 0x24fe <RTE_drum_init>
	RTE_invertersetting_init();
    25c2:	9e df       	rcall	.-196    	; 0x2500 <RTE_invertersetting_init>
	RTE_operations_init();
    25c4:	03 d0       	rcall	.+6      	; 0x25cc <RTE_operations_init>
	RTE_levels_init();
    25c6:	e2 df       	rcall	.-60     	; 0x258c <RTE_levels_init>
    25c8:	31 c0       	rjmp	.+98     	; 0x262c <RTE_temperature_init>
	RTE_temperature_init();
    25ca:	08 95       	ret

000025cc <RTE_operations_init>:
    25cc:	0f 93       	push	r16
    25ce:	03 e0       	ldi	r16, 0x03	; 3
static SemaphoreHandle_t Sema_Tank_Calibration_Operation_handle;
static StaticSemaphore_t Sema_Tank_Calibration_Operation_Buffer;
static uint16_t Tank_Calibration_Operation;

void RTE_operations_init(void){
	Sema_System_on_handle = xSemaphoreCreateBinaryStatic(&Sema_System_on_Buffer);
    25d0:	29 e7       	ldi	r18, 0x79	; 121
    25d2:	3c e0       	ldi	r19, 0x0C	; 12
    25d4:	40 e0       	ldi	r20, 0x00	; 0
    25d6:	50 e0       	ldi	r21, 0x00	; 0
    25d8:	60 e0       	ldi	r22, 0x00	; 0
    25da:	81 e0       	ldi	r24, 0x01	; 1
    25dc:	c5 d3       	rcall	.+1930   	; 0x2d68 <xQueueGenericCreateStatic>
    25de:	90 93 99 0c 	sts	0x0C99, r25	; 0x800c99 <Sema_System_on_handle+0x1>
    25e2:	80 93 98 0c 	sts	0x0C98, r24	; 0x800c98 <Sema_System_on_handle>
	Sema_Start_blancher_Operation_handle = xSemaphoreCreateBinaryStatic(&Sema_Start_blancher_Operation_Buffer);
    25e6:	28 e5       	ldi	r18, 0x58	; 88
    25e8:	3c e0       	ldi	r19, 0x0C	; 12
    25ea:	40 e0       	ldi	r20, 0x00	; 0
    25ec:	50 e0       	ldi	r21, 0x00	; 0
    25ee:	60 e0       	ldi	r22, 0x00	; 0
    25f0:	81 e0       	ldi	r24, 0x01	; 1
    25f2:	ba d3       	rcall	.+1908   	; 0x2d68 <xQueueGenericCreateStatic>
    25f4:	90 93 78 0c 	sts	0x0C78, r25	; 0x800c78 <Sema_Start_blancher_Operation_handle+0x1>
    25f8:	80 93 77 0c 	sts	0x0C77, r24	; 0x800c77 <Sema_Start_blancher_Operation_handle>
	Sema_Wash_Operation_handle = xSemaphoreCreateBinaryStatic(&Sema_Wash_Operation_Buffer);
    25fc:	27 e3       	ldi	r18, 0x37	; 55
    25fe:	3c e0       	ldi	r19, 0x0C	; 12
    2600:	40 e0       	ldi	r20, 0x00	; 0
    2602:	50 e0       	ldi	r21, 0x00	; 0
    2604:	60 e0       	ldi	r22, 0x00	; 0
    2606:	81 e0       	ldi	r24, 0x01	; 1
    2608:	af d3       	rcall	.+1886   	; 0x2d68 <xQueueGenericCreateStatic>
    260a:	90 93 57 0c 	sts	0x0C57, r25	; 0x800c57 <Sema_Wash_Operation_handle+0x1>
    260e:	80 93 56 0c 	sts	0x0C56, r24	; 0x800c56 <Sema_Wash_Operation_handle>
	Sema_Tank_Calibration_Operation_handle = xSemaphoreCreateBinaryStatic(&Sema_Tank_Calibration_Operation_Buffer);
    2612:	26 e1       	ldi	r18, 0x16	; 22
    2614:	3c e0       	ldi	r19, 0x0C	; 12
    2616:	40 e0       	ldi	r20, 0x00	; 0
    2618:	50 e0       	ldi	r21, 0x00	; 0
    261a:	60 e0       	ldi	r22, 0x00	; 0
    261c:	81 e0       	ldi	r24, 0x01	; 1
    261e:	a4 d3       	rcall	.+1864   	; 0x2d68 <xQueueGenericCreateStatic>
    2620:	90 93 36 0c 	sts	0x0C36, r25	; 0x800c36 <Sema_Tank_Calibration_Operation_handle+0x1>
    2624:	80 93 35 0c 	sts	0x0C35, r24	; 0x800c35 <Sema_Tank_Calibration_Operation_handle>

}
    2628:	0f 91       	pop	r16
    262a:	08 95       	ret

0000262c <RTE_temperature_init>:
	Current_temperature = u16Currenttemp;
}

uint16_t RTE_get_Current_temperature(void){
	return Current_temperature;
}
    262c:	0f 93       	push	r16
    262e:	03 e0       	ldi	r16, 0x03	; 3
    2630:	24 e6       	ldi	r18, 0x64	; 100
    2632:	3d e0       	ldi	r19, 0x0D	; 13
    2634:	40 e0       	ldi	r20, 0x00	; 0
    2636:	50 e0       	ldi	r21, 0x00	; 0
    2638:	60 e0       	ldi	r22, 0x00	; 0
    263a:	81 e0       	ldi	r24, 0x01	; 1
    263c:	95 d3       	rcall	.+1834   	; 0x2d68 <xQueueGenericCreateStatic>
    263e:	90 93 84 0d 	sts	0x0D84, r25	; 0x800d84 <Sema_Sleep_temp_handle+0x1>
    2642:	80 93 83 0d 	sts	0x0D83, r24	; 0x800d83 <Sema_Sleep_temp_handle>
    2646:	23 e4       	ldi	r18, 0x43	; 67
    2648:	3d e0       	ldi	r19, 0x0D	; 13
    264a:	40 e0       	ldi	r20, 0x00	; 0
    264c:	50 e0       	ldi	r21, 0x00	; 0
    264e:	60 e0       	ldi	r22, 0x00	; 0
    2650:	81 e0       	ldi	r24, 0x01	; 1
    2652:	8a d3       	rcall	.+1812   	; 0x2d68 <xQueueGenericCreateStatic>
    2654:	90 93 63 0d 	sts	0x0D63, r25	; 0x800d63 <Sema_Set_temp_handle+0x1>
    2658:	80 93 62 0d 	sts	0x0D62, r24	; 0x800d62 <Sema_Set_temp_handle>
    265c:	22 e2       	ldi	r18, 0x22	; 34
    265e:	3d e0       	ldi	r19, 0x0D	; 13
    2660:	40 e0       	ldi	r20, 0x00	; 0
    2662:	50 e0       	ldi	r21, 0x00	; 0
    2664:	60 e0       	ldi	r22, 0x00	; 0
    2666:	81 e0       	ldi	r24, 0x01	; 1
    2668:	7f d3       	rcall	.+1790   	; 0x2d68 <xQueueGenericCreateStatic>
    266a:	90 93 42 0d 	sts	0x0D42, r25	; 0x800d42 <Sema_threshold_set_temp_handle+0x1>
    266e:	80 93 41 0d 	sts	0x0D41, r24	; 0x800d41 <Sema_threshold_set_temp_handle>
    2672:	21 e0       	ldi	r18, 0x01	; 1
    2674:	3d e0       	ldi	r19, 0x0D	; 13
    2676:	40 e0       	ldi	r20, 0x00	; 0
    2678:	50 e0       	ldi	r21, 0x00	; 0
    267a:	60 e0       	ldi	r22, 0x00	; 0
    267c:	81 e0       	ldi	r24, 0x01	; 1
    267e:	74 d3       	rcall	.+1768   	; 0x2d68 <xQueueGenericCreateStatic>
    2680:	90 93 21 0d 	sts	0x0D21, r25	; 0x800d21 <Sema_threshold_sleep_temp_handle+0x1>
    2684:	80 93 20 0d 	sts	0x0D20, r24	; 0x800d20 <Sema_threshold_sleep_temp_handle>
    2688:	20 ee       	ldi	r18, 0xE0	; 224
    268a:	3c e0       	ldi	r19, 0x0C	; 12
    268c:	40 e0       	ldi	r20, 0x00	; 0
    268e:	50 e0       	ldi	r21, 0x00	; 0
    2690:	60 e0       	ldi	r22, 0x00	; 0
    2692:	81 e0       	ldi	r24, 0x01	; 1
    2694:	69 d3       	rcall	.+1746   	; 0x2d68 <xQueueGenericCreateStatic>
    2696:	90 93 00 0d 	sts	0x0D00, r25	; 0x800d00 <Sema_Positive_offset_temp_handle+0x1>
    269a:	80 93 ff 0c 	sts	0x0CFF, r24	; 0x800cff <Sema_Positive_offset_temp_handle>
    269e:	2f eb       	ldi	r18, 0xBF	; 191
    26a0:	3c e0       	ldi	r19, 0x0C	; 12
    26a2:	40 e0       	ldi	r20, 0x00	; 0
    26a4:	50 e0       	ldi	r21, 0x00	; 0
    26a6:	60 e0       	ldi	r22, 0x00	; 0
    26a8:	81 e0       	ldi	r24, 0x01	; 1
    26aa:	5e d3       	rcall	.+1724   	; 0x2d68 <xQueueGenericCreateStatic>
    26ac:	90 93 df 0c 	sts	0x0CDF, r25	; 0x800cdf <Sema_Negative_offset_temp_handle+0x1>
    26b0:	80 93 de 0c 	sts	0x0CDE, r24	; 0x800cde <Sema_Negative_offset_temp_handle>
    26b4:	2e e9       	ldi	r18, 0x9E	; 158
    26b6:	3c e0       	ldi	r19, 0x0C	; 12
    26b8:	40 e0       	ldi	r20, 0x00	; 0
    26ba:	50 e0       	ldi	r21, 0x00	; 0
    26bc:	60 e0       	ldi	r22, 0x00	; 0
    26be:	81 e0       	ldi	r24, 0x01	; 1
    26c0:	53 d3       	rcall	.+1702   	; 0x2d68 <xQueueGenericCreateStatic>
    26c2:	90 93 be 0c 	sts	0x0CBE, r25	; 0x800cbe <Sema_APP_current_temp_handle+0x1>
    26c6:	80 93 bd 0c 	sts	0x0CBD, r24	; 0x800cbd <Sema_APP_current_temp_handle>
    26ca:	0f 91       	pop	r16
    26cc:	08 95       	ret

000026ce <RTE_set_Current_temperature>:
    26ce:	90 93 9b 0c 	sts	0x0C9B, r25	; 0x800c9b <Current_temperature+0x1>
    26d2:	80 93 9a 0c 	sts	0x0C9A, r24	; 0x800c9a <Current_temperature>
    26d6:	08 95       	ret

000026d8 <RTE_set_app_Current_temperature>:

void RTE_set_app_Current_temperature(uint16_t u16Currenttemp){
	APP_current_temp = u16Currenttemp;
    26d8:	90 93 9d 0c 	sts	0x0C9D, r25	; 0x800c9d <APP_current_temp+0x1>
    26dc:	80 93 9c 0c 	sts	0x0C9C, r24	; 0x800c9c <APP_current_temp>
	xSemaphoreGive(Sema_APP_current_temp_handle);
    26e0:	20 e0       	ldi	r18, 0x00	; 0
    26e2:	40 e0       	ldi	r20, 0x00	; 0
    26e4:	50 e0       	ldi	r21, 0x00	; 0
    26e6:	60 e0       	ldi	r22, 0x00	; 0
    26e8:	70 e0       	ldi	r23, 0x00	; 0
    26ea:	80 91 bd 0c 	lds	r24, 0x0CBD	; 0x800cbd <Sema_APP_current_temp_handle>
    26ee:	90 91 be 0c 	lds	r25, 0x0CBE	; 0x800cbe <Sema_APP_current_temp_handle+0x1>
    26f2:	4f c3       	rjmp	.+1694   	; 0x2d92 <xQueueGenericSend>
    26f4:	08 95       	ret

000026f6 <vApplicationStackOverflowHook>:
	   This routine will never return.
	   This routine is referenced in the task.c file of FreeRTOS as an extern.
	\*---------------------------------------------------------------------------*/

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
	DDRB  |= _BV(DDB7);
    26f6:	27 9a       	sbi	0x04, 7	; 4
	PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    26f8:	2f 9a       	sbi	0x05, 7	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    26fa:	2f ef       	ldi	r18, 0xFF	; 255
    26fc:	87 ea       	ldi	r24, 0xA7	; 167
    26fe:	91 e6       	ldi	r25, 0x61	; 97
    2700:	21 50       	subi	r18, 0x01	; 1
    2702:	80 40       	sbci	r24, 0x00	; 0
    2704:	90 40       	sbci	r25, 0x00	; 0
    2706:	e1 f7       	brne	.-8      	; 0x2700 <vApplicationStackOverflowHook+0xa>
    2708:	00 c0       	rjmp	.+0      	; 0x270a <vApplicationStackOverflowHook+0x14>
    270a:	00 00       	nop
	for(;;)
	{
		_delay_ms(2000);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
		PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED slow blink.
    270c:	1f 9a       	sbi	0x03, 7	; 3
    270e:	f5 cf       	rjmp	.-22     	; 0x26fa <vApplicationStackOverflowHook+0x4>

00002710 <vApplicationGetIdleTaskMemory>:
                                    configSTACK_DEPTH_TYPE *pulIdleTaskStackSize )
{
    static StaticTask_t xIdleTaskTCB;
    static StackType_t uxIdleTaskStack[ configMINIMAL_STACK_SIZE ];

    *ppxIdleTaskTCBBuffer = &xIdleTaskTCB;
    2710:	29 e5       	ldi	r18, 0x59	; 89
    2712:	3e e0       	ldi	r19, 0x0E	; 14
    2714:	fc 01       	movw	r30, r24
    2716:	31 83       	std	Z+1, r19	; 0x01
    2718:	20 83       	st	Z, r18
    *ppxIdleTaskStackBuffer = uxIdleTaskStack;
    271a:	84 e0       	ldi	r24, 0x04	; 4
    271c:	9e e0       	ldi	r25, 0x0E	; 14
    271e:	fb 01       	movw	r30, r22
    2720:	91 83       	std	Z+1, r25	; 0x01
    2722:	80 83       	st	Z, r24
    *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
    2724:	85 e5       	ldi	r24, 0x55	; 85
    2726:	90 e0       	ldi	r25, 0x00	; 0
    2728:	fa 01       	movw	r30, r20
    272a:	91 83       	std	Z+1, r25	; 0x01
    272c:	80 83       	st	Z, r24
    272e:	08 95       	ret

00002730 <vApplicationGetTimerTaskMemory>:
                                     configSTACK_DEPTH_TYPE *pulTimerTaskStackSize )
{
    static StaticTask_t xTimerTaskTCB;
    static StackType_t uxTimerTaskStack[ configTIMER_TASK_STACK_DEPTH ];

    *ppxTimerTaskTCBBuffer = &xTimerTaskTCB;
    2730:	2a ed       	ldi	r18, 0xDA	; 218
    2732:	3d e0       	ldi	r19, 0x0D	; 13
    2734:	fc 01       	movw	r30, r24
    2736:	31 83       	std	Z+1, r19	; 0x01
    2738:	20 83       	st	Z, r18
    *ppxTimerTaskStackBuffer = uxTimerTaskStack;
    273a:	85 e8       	ldi	r24, 0x85	; 133
    273c:	9d e0       	ldi	r25, 0x0D	; 13
    273e:	fb 01       	movw	r30, r22
    2740:	91 83       	std	Z+1, r25	; 0x01
    2742:	80 83       	st	Z, r24
    *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
    2744:	85 e5       	ldi	r24, 0x55	; 85
    2746:	90 e0       	ldi	r25, 0x00	; 0
    2748:	fa 01       	movw	r30, r20
    274a:	91 83       	std	Z+1, r25	; 0x01
    274c:	80 83       	st	Z, r24
    274e:	08 95       	ret

00002750 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    2750:	fc 01       	movw	r30, r24
    /* The list structure contains a list item which is used to mark the
    end of the list.  To initialise the list the list end is inserted
    as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );            /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    2752:	03 96       	adiw	r24, 0x03	; 3
    2754:	92 83       	std	Z+2, r25	; 0x02
    2756:	81 83       	std	Z+1, r24	; 0x01

    /* The list end value is the highest possible value in the list to
    ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
    2758:	2f ef       	ldi	r18, 0xFF	; 255
    275a:	3f ef       	ldi	r19, 0xFF	; 255
    275c:	34 83       	std	Z+4, r19	; 0x04
    275e:	23 83       	std	Z+3, r18	; 0x03

    /* The list end next and previous pointers point to itself so we know
    when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );    /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    2760:	96 83       	std	Z+6, r25	; 0x06
    2762:	85 83       	std	Z+5, r24	; 0x05
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    2764:	90 87       	std	Z+8, r25	; 0x08
    2766:	87 83       	std	Z+7, r24	; 0x07

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    2768:	10 82       	st	Z, r1
    276a:	08 95       	ret

0000276c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
    276c:	fc 01       	movw	r30, r24
    276e:	11 86       	std	Z+9, r1	; 0x09
    2770:	10 86       	std	Z+8, r1	; 0x08
    2772:	08 95       	ret

00002774 <vListInsertEnd>:
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    2774:	cf 93       	push	r28
    2776:	df 93       	push	r29
    2778:	9c 01       	movw	r18, r24
    277a:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
    277c:	dc 01       	movw	r26, r24
    277e:	11 96       	adiw	r26, 0x01	; 1
    2780:	cd 91       	ld	r28, X+
    2782:	dc 91       	ld	r29, X
    2784:	12 97       	sbiw	r26, 0x02	; 2
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
    makes the new list item the last item to be removed by a call to
    listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
    2786:	d3 83       	std	Z+3, r29	; 0x03
    2788:	c2 83       	std	Z+2, r28	; 0x02
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    278a:	8c 81       	ldd	r24, Y+4	; 0x04
    278c:	9d 81       	ldd	r25, Y+5	; 0x05
    278e:	95 83       	std	Z+5, r25	; 0x05
    2790:	84 83       	std	Z+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
    2792:	8c 81       	ldd	r24, Y+4	; 0x04
    2794:	9d 81       	ldd	r25, Y+5	; 0x05
    2796:	dc 01       	movw	r26, r24
    2798:	13 96       	adiw	r26, 0x03	; 3
    279a:	7c 93       	st	X, r23
    279c:	6e 93       	st	-X, r22
    279e:	12 97       	sbiw	r26, 0x02	; 2
    pxIndex->pxPrevious = pxNewListItem;
    27a0:	7d 83       	std	Y+5, r23	; 0x05
    27a2:	6c 83       	std	Y+4, r22	; 0x04

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
    27a4:	31 87       	std	Z+9, r19	; 0x09
    27a6:	20 87       	std	Z+8, r18	; 0x08

    ( pxList->uxNumberOfItems )++;
    27a8:	f9 01       	movw	r30, r18
    27aa:	80 81       	ld	r24, Z
    27ac:	8f 5f       	subi	r24, 0xFF	; 255
    27ae:	80 83       	st	Z, r24
}
    27b0:	df 91       	pop	r29
    27b2:	cf 91       	pop	r28
    27b4:	08 95       	ret

000027b6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    27b6:	cf 93       	push	r28
    27b8:	df 93       	push	r29
    27ba:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    27bc:	48 81       	ld	r20, Y
    27be:	59 81       	ldd	r21, Y+1	; 0x01
    new list item should be placed after it.  This ensures that TCBs which are
    stored in ready lists (all of which have the same xItemValue value) get a
    share of the CPU.  However, if the xItemValue is the same as the back marker
    the iteration loop below will not end.  Therefore the value is checked
    first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
    27c0:	4f 3f       	cpi	r20, 0xFF	; 255
    27c2:	2f ef       	ldi	r18, 0xFF	; 255
    27c4:	52 07       	cpc	r21, r18
    27c6:	21 f4       	brne	.+8      	; 0x27d0 <vListInsert+0x1a>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
    27c8:	fc 01       	movw	r30, r24
    27ca:	a7 81       	ldd	r26, Z+7	; 0x07
    27cc:	b0 85       	ldd	r27, Z+8	; 0x08
    27ce:	0d c0       	rjmp	.+26     	; 0x27ea <vListInsert+0x34>
            4) Using a queue or semaphore before it has been initialised or
               before the scheduler has been started (are interrupts firing
               before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
    27d0:	dc 01       	movw	r26, r24
    27d2:	13 96       	adiw	r26, 0x03	; 3
    27d4:	01 c0       	rjmp	.+2      	; 0x27d8 <vListInsert+0x22>
    27d6:	df 01       	movw	r26, r30
    27d8:	12 96       	adiw	r26, 0x02	; 2
    27da:	ed 91       	ld	r30, X+
    27dc:	fc 91       	ld	r31, X
    27de:	13 97       	sbiw	r26, 0x03	; 3
    27e0:	20 81       	ld	r18, Z
    27e2:	31 81       	ldd	r19, Z+1	; 0x01
    27e4:	42 17       	cp	r20, r18
    27e6:	53 07       	cpc	r21, r19
    27e8:	b0 f7       	brcc	.-20     	; 0x27d6 <vListInsert+0x20>
            /* There is nothing to do here, just iterating to the wanted
            insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
    27ea:	12 96       	adiw	r26, 0x02	; 2
    27ec:	ed 91       	ld	r30, X+
    27ee:	fc 91       	ld	r31, X
    27f0:	13 97       	sbiw	r26, 0x03	; 3
    27f2:	fb 83       	std	Y+3, r31	; 0x03
    27f4:	ea 83       	std	Y+2, r30	; 0x02
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    27f6:	d5 83       	std	Z+5, r29	; 0x05
    27f8:	c4 83       	std	Z+4, r28	; 0x04
    pxNewListItem->pxPrevious = pxIterator;
    27fa:	bd 83       	std	Y+5, r27	; 0x05
    27fc:	ac 83       	std	Y+4, r26	; 0x04
    pxIterator->pxNext = pxNewListItem;
    27fe:	13 96       	adiw	r26, 0x03	; 3
    2800:	dc 93       	st	X, r29
    2802:	ce 93       	st	-X, r28
    2804:	12 97       	sbiw	r26, 0x02	; 2

    /* Remember which list the item is in.  This allows fast removal of the
    item later. */
    pxNewListItem->pxContainer = pxList;
    2806:	99 87       	std	Y+9, r25	; 0x09
    2808:	88 87       	std	Y+8, r24	; 0x08

    ( pxList->uxNumberOfItems )++;
    280a:	fc 01       	movw	r30, r24
    280c:	20 81       	ld	r18, Z
    280e:	2f 5f       	subi	r18, 0xFF	; 255
    2810:	20 83       	st	Z, r18
}
    2812:	df 91       	pop	r29
    2814:	cf 91       	pop	r28
    2816:	08 95       	ret

00002818 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    2818:	cf 93       	push	r28
    281a:	df 93       	push	r29
    281c:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
    281e:	a0 85       	ldd	r26, Z+8	; 0x08
    2820:	b1 85       	ldd	r27, Z+9	; 0x09

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    2822:	c2 81       	ldd	r28, Z+2	; 0x02
    2824:	d3 81       	ldd	r29, Z+3	; 0x03
    2826:	84 81       	ldd	r24, Z+4	; 0x04
    2828:	95 81       	ldd	r25, Z+5	; 0x05
    282a:	9d 83       	std	Y+5, r25	; 0x05
    282c:	8c 83       	std	Y+4, r24	; 0x04
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    282e:	c4 81       	ldd	r28, Z+4	; 0x04
    2830:	d5 81       	ldd	r29, Z+5	; 0x05
    2832:	82 81       	ldd	r24, Z+2	; 0x02
    2834:	93 81       	ldd	r25, Z+3	; 0x03
    2836:	9b 83       	std	Y+3, r25	; 0x03
    2838:	8a 83       	std	Y+2, r24	; 0x02

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
    283a:	11 96       	adiw	r26, 0x01	; 1
    283c:	8d 91       	ld	r24, X+
    283e:	9c 91       	ld	r25, X
    2840:	12 97       	sbiw	r26, 0x02	; 2
    2842:	e8 17       	cp	r30, r24
    2844:	f9 07       	cpc	r31, r25
    2846:	31 f4       	brne	.+12     	; 0x2854 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
    2848:	84 81       	ldd	r24, Z+4	; 0x04
    284a:	95 81       	ldd	r25, Z+5	; 0x05
    284c:	12 96       	adiw	r26, 0x02	; 2
    284e:	9c 93       	st	X, r25
    2850:	8e 93       	st	-X, r24
    2852:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
    2854:	11 86       	std	Z+9, r1	; 0x09
    2856:	10 86       	std	Z+8, r1	; 0x08
    ( pxList->uxNumberOfItems )--;
    2858:	8c 91       	ld	r24, X
    285a:	81 50       	subi	r24, 0x01	; 1
    285c:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
    285e:	8c 91       	ld	r24, X
}
    2860:	df 91       	pop	r29
    2862:	cf 91       	pop	r28
    2864:	08 95       	ret

00002866 <pxPortInitialiseStack>:
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
    2866:	31 e1       	ldi	r19, 0x11	; 17
    2868:	fc 01       	movw	r30, r24
    286a:	30 83       	st	Z, r19
    286c:	31 97       	sbiw	r30, 0x01	; 1
    286e:	22 e2       	ldi	r18, 0x22	; 34
    2870:	20 83       	st	Z, r18
    2872:	31 97       	sbiw	r30, 0x01	; 1
    2874:	a3 e3       	ldi	r26, 0x33	; 51
    2876:	a0 83       	st	Z, r26
    2878:	31 97       	sbiw	r30, 0x01	; 1
    287a:	60 83       	st	Z, r22
    287c:	31 97       	sbiw	r30, 0x01	; 1
    287e:	70 83       	st	Z, r23
    2880:	31 97       	sbiw	r30, 0x01	; 1
    2882:	10 82       	st	Z, r1
    2884:	31 97       	sbiw	r30, 0x01	; 1
    2886:	10 82       	st	Z, r1
    2888:	31 97       	sbiw	r30, 0x01	; 1
    288a:	60 e8       	ldi	r22, 0x80	; 128
    288c:	60 83       	st	Z, r22
    288e:	31 97       	sbiw	r30, 0x01	; 1
    2890:	10 82       	st	Z, r1
    2892:	31 97       	sbiw	r30, 0x01	; 1
    2894:	10 82       	st	Z, r1
    2896:	31 97       	sbiw	r30, 0x01	; 1
    2898:	10 82       	st	Z, r1
    289a:	31 97       	sbiw	r30, 0x01	; 1
    289c:	62 e0       	ldi	r22, 0x02	; 2
    289e:	60 83       	st	Z, r22
    28a0:	31 97       	sbiw	r30, 0x01	; 1
    28a2:	63 e0       	ldi	r22, 0x03	; 3
    28a4:	60 83       	st	Z, r22
    28a6:	31 97       	sbiw	r30, 0x01	; 1
    28a8:	64 e0       	ldi	r22, 0x04	; 4
    28aa:	60 83       	st	Z, r22
    28ac:	31 97       	sbiw	r30, 0x01	; 1
    28ae:	65 e0       	ldi	r22, 0x05	; 5
    28b0:	60 83       	st	Z, r22
    28b2:	31 97       	sbiw	r30, 0x01	; 1
    28b4:	66 e0       	ldi	r22, 0x06	; 6
    28b6:	60 83       	st	Z, r22
    28b8:	31 97       	sbiw	r30, 0x01	; 1
    28ba:	67 e0       	ldi	r22, 0x07	; 7
    28bc:	60 83       	st	Z, r22
    28be:	31 97       	sbiw	r30, 0x01	; 1
    28c0:	68 e0       	ldi	r22, 0x08	; 8
    28c2:	60 83       	st	Z, r22
    28c4:	31 97       	sbiw	r30, 0x01	; 1
    28c6:	69 e0       	ldi	r22, 0x09	; 9
    28c8:	60 83       	st	Z, r22
    28ca:	31 97       	sbiw	r30, 0x01	; 1
    28cc:	60 e1       	ldi	r22, 0x10	; 16
    28ce:	60 83       	st	Z, r22
    28d0:	31 97       	sbiw	r30, 0x01	; 1
    28d2:	30 83       	st	Z, r19
    28d4:	31 97       	sbiw	r30, 0x01	; 1
    28d6:	32 e1       	ldi	r19, 0x12	; 18
    28d8:	30 83       	st	Z, r19
    28da:	31 97       	sbiw	r30, 0x01	; 1
    28dc:	33 e1       	ldi	r19, 0x13	; 19
    28de:	30 83       	st	Z, r19
    28e0:	31 97       	sbiw	r30, 0x01	; 1
    28e2:	34 e1       	ldi	r19, 0x14	; 20
    28e4:	30 83       	st	Z, r19
    28e6:	31 97       	sbiw	r30, 0x01	; 1
    28e8:	35 e1       	ldi	r19, 0x15	; 21
    28ea:	30 83       	st	Z, r19
    28ec:	31 97       	sbiw	r30, 0x01	; 1
    28ee:	36 e1       	ldi	r19, 0x16	; 22
    28f0:	30 83       	st	Z, r19
    28f2:	31 97       	sbiw	r30, 0x01	; 1
    28f4:	37 e1       	ldi	r19, 0x17	; 23
    28f6:	30 83       	st	Z, r19
    28f8:	31 97       	sbiw	r30, 0x01	; 1
    28fa:	38 e1       	ldi	r19, 0x18	; 24
    28fc:	30 83       	st	Z, r19
    28fe:	31 97       	sbiw	r30, 0x01	; 1
    2900:	39 e1       	ldi	r19, 0x19	; 25
    2902:	30 83       	st	Z, r19
    2904:	31 97       	sbiw	r30, 0x01	; 1
    2906:	30 e2       	ldi	r19, 0x20	; 32
    2908:	30 83       	st	Z, r19
    290a:	31 97       	sbiw	r30, 0x01	; 1
    290c:	31 e2       	ldi	r19, 0x21	; 33
    290e:	30 83       	st	Z, r19
    2910:	31 97       	sbiw	r30, 0x01	; 1
    2912:	20 83       	st	Z, r18
    2914:	31 97       	sbiw	r30, 0x01	; 1
    2916:	23 e2       	ldi	r18, 0x23	; 35
    2918:	20 83       	st	Z, r18
    291a:	31 97       	sbiw	r30, 0x01	; 1
    291c:	40 83       	st	Z, r20
    291e:	31 97       	sbiw	r30, 0x01	; 1
    2920:	50 83       	st	Z, r21
    2922:	31 97       	sbiw	r30, 0x01	; 1
    2924:	26 e2       	ldi	r18, 0x26	; 38
    2926:	20 83       	st	Z, r18
    2928:	31 97       	sbiw	r30, 0x01	; 1
    292a:	27 e2       	ldi	r18, 0x27	; 39
    292c:	20 83       	st	Z, r18
    292e:	31 97       	sbiw	r30, 0x01	; 1
    2930:	28 e2       	ldi	r18, 0x28	; 40
    2932:	20 83       	st	Z, r18
    2934:	31 97       	sbiw	r30, 0x01	; 1
    2936:	29 e2       	ldi	r18, 0x29	; 41
    2938:	20 83       	st	Z, r18
    293a:	31 97       	sbiw	r30, 0x01	; 1
    293c:	20 e3       	ldi	r18, 0x30	; 48
    293e:	20 83       	st	Z, r18
    2940:	31 97       	sbiw	r30, 0x01	; 1
    2942:	21 e3       	ldi	r18, 0x31	; 49
    2944:	20 83       	st	Z, r18
    2946:	89 97       	sbiw	r24, 0x29	; 41
    2948:	08 95       	ret

0000294a <xPortStartScheduler>:
    294a:	a8 95       	wdr
    294c:	90 ec       	ldi	r25, 0xC0	; 192
    294e:	88 e1       	ldi	r24, 0x18	; 24
    2950:	0f b6       	in	r0, 0x3f	; 63
    2952:	f8 94       	cli
    2954:	a8 95       	wdr
    2956:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
    295a:	0f be       	out	0x3f, r0	; 63
    295c:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
    2960:	a0 91 dc 0e 	lds	r26, 0x0EDC	; 0x800edc <pxCurrentTCB>
    2964:	b0 91 dd 0e 	lds	r27, 0x0EDD	; 0x800edd <pxCurrentTCB+0x1>
    2968:	cd 91       	ld	r28, X+
    296a:	cd bf       	out	0x3d, r28	; 61
    296c:	dd 91       	ld	r29, X+
    296e:	de bf       	out	0x3e, r29	; 62
    2970:	ff 91       	pop	r31
    2972:	ef 91       	pop	r30
    2974:	df 91       	pop	r29
    2976:	cf 91       	pop	r28
    2978:	bf 91       	pop	r27
    297a:	af 91       	pop	r26
    297c:	9f 91       	pop	r25
    297e:	8f 91       	pop	r24
    2980:	7f 91       	pop	r23
    2982:	6f 91       	pop	r22
    2984:	5f 91       	pop	r21
    2986:	4f 91       	pop	r20
    2988:	3f 91       	pop	r19
    298a:	2f 91       	pop	r18
    298c:	1f 91       	pop	r17
    298e:	0f 91       	pop	r16
    2990:	ff 90       	pop	r15
    2992:	ef 90       	pop	r14
    2994:	df 90       	pop	r13
    2996:	cf 90       	pop	r12
    2998:	bf 90       	pop	r11
    299a:	af 90       	pop	r10
    299c:	9f 90       	pop	r9
    299e:	8f 90       	pop	r8
    29a0:	7f 90       	pop	r7
    29a2:	6f 90       	pop	r6
    29a4:	5f 90       	pop	r5
    29a6:	4f 90       	pop	r4
    29a8:	3f 90       	pop	r3
    29aa:	2f 90       	pop	r2
    29ac:	1f 90       	pop	r1
    29ae:	0f 90       	pop	r0
    29b0:	0c be       	out	0x3c, r0	; 60
    29b2:	0f 90       	pop	r0
    29b4:	0b be       	out	0x3b, r0	; 59
    29b6:	0f 90       	pop	r0
    29b8:	0f be       	out	0x3f, r0	; 63
    29ba:	0f 90       	pop	r0
    29bc:	08 95       	ret
    29be:	81 e0       	ldi	r24, 0x01	; 1
    29c0:	08 95       	ret

000029c2 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    29c2:	0f 92       	push	r0
    29c4:	0f b6       	in	r0, 0x3f	; 63
    29c6:	f8 94       	cli
    29c8:	0f 92       	push	r0
    29ca:	0b b6       	in	r0, 0x3b	; 59
    29cc:	0f 92       	push	r0
    29ce:	0c b6       	in	r0, 0x3c	; 60
    29d0:	0f 92       	push	r0
    29d2:	1f 92       	push	r1
    29d4:	11 24       	eor	r1, r1
    29d6:	2f 92       	push	r2
    29d8:	3f 92       	push	r3
    29da:	4f 92       	push	r4
    29dc:	5f 92       	push	r5
    29de:	6f 92       	push	r6
    29e0:	7f 92       	push	r7
    29e2:	8f 92       	push	r8
    29e4:	9f 92       	push	r9
    29e6:	af 92       	push	r10
    29e8:	bf 92       	push	r11
    29ea:	cf 92       	push	r12
    29ec:	df 92       	push	r13
    29ee:	ef 92       	push	r14
    29f0:	ff 92       	push	r15
    29f2:	0f 93       	push	r16
    29f4:	1f 93       	push	r17
    29f6:	2f 93       	push	r18
    29f8:	3f 93       	push	r19
    29fa:	4f 93       	push	r20
    29fc:	5f 93       	push	r21
    29fe:	6f 93       	push	r22
    2a00:	7f 93       	push	r23
    2a02:	8f 93       	push	r24
    2a04:	9f 93       	push	r25
    2a06:	af 93       	push	r26
    2a08:	bf 93       	push	r27
    2a0a:	cf 93       	push	r28
    2a0c:	df 93       	push	r29
    2a0e:	ef 93       	push	r30
    2a10:	ff 93       	push	r31
    2a12:	a0 91 dc 0e 	lds	r26, 0x0EDC	; 0x800edc <pxCurrentTCB>
    2a16:	b0 91 dd 0e 	lds	r27, 0x0EDD	; 0x800edd <pxCurrentTCB+0x1>
    2a1a:	0d b6       	in	r0, 0x3d	; 61
    2a1c:	0d 92       	st	X+, r0
    2a1e:	0e b6       	in	r0, 0x3e	; 62
    2a20:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    2a22:	d1 d6       	rcall	.+3490   	; 0x37c6 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    2a24:	a0 91 dc 0e 	lds	r26, 0x0EDC	; 0x800edc <pxCurrentTCB>
    2a28:	b0 91 dd 0e 	lds	r27, 0x0EDD	; 0x800edd <pxCurrentTCB+0x1>
    2a2c:	cd 91       	ld	r28, X+
    2a2e:	cd bf       	out	0x3d, r28	; 61
    2a30:	dd 91       	ld	r29, X+
    2a32:	de bf       	out	0x3e, r29	; 62
    2a34:	ff 91       	pop	r31
    2a36:	ef 91       	pop	r30
    2a38:	df 91       	pop	r29
    2a3a:	cf 91       	pop	r28
    2a3c:	bf 91       	pop	r27
    2a3e:	af 91       	pop	r26
    2a40:	9f 91       	pop	r25
    2a42:	8f 91       	pop	r24
    2a44:	7f 91       	pop	r23
    2a46:	6f 91       	pop	r22
    2a48:	5f 91       	pop	r21
    2a4a:	4f 91       	pop	r20
    2a4c:	3f 91       	pop	r19
    2a4e:	2f 91       	pop	r18
    2a50:	1f 91       	pop	r17
    2a52:	0f 91       	pop	r16
    2a54:	ff 90       	pop	r15
    2a56:	ef 90       	pop	r14
    2a58:	df 90       	pop	r13
    2a5a:	cf 90       	pop	r12
    2a5c:	bf 90       	pop	r11
    2a5e:	af 90       	pop	r10
    2a60:	9f 90       	pop	r9
    2a62:	8f 90       	pop	r8
    2a64:	7f 90       	pop	r7
    2a66:	6f 90       	pop	r6
    2a68:	5f 90       	pop	r5
    2a6a:	4f 90       	pop	r4
    2a6c:	3f 90       	pop	r3
    2a6e:	2f 90       	pop	r2
    2a70:	1f 90       	pop	r1
    2a72:	0f 90       	pop	r0
    2a74:	0c be       	out	0x3c, r0	; 60
    2a76:	0f 90       	pop	r0
    2a78:	0b be       	out	0x3b, r0	; 59
    2a7a:	0f 90       	pop	r0
    2a7c:	0f be       	out	0x3f, r0	; 63
    2a7e:	0f 90       	pop	r0

	__asm__ __volatile__ ( "ret" );
    2a80:	08 95       	ret

00002a82 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    2a82:	0f 92       	push	r0
    2a84:	0f b6       	in	r0, 0x3f	; 63
    2a86:	f8 94       	cli
    2a88:	0f 92       	push	r0
    2a8a:	0b b6       	in	r0, 0x3b	; 59
    2a8c:	0f 92       	push	r0
    2a8e:	0c b6       	in	r0, 0x3c	; 60
    2a90:	0f 92       	push	r0
    2a92:	1f 92       	push	r1
    2a94:	11 24       	eor	r1, r1
    2a96:	2f 92       	push	r2
    2a98:	3f 92       	push	r3
    2a9a:	4f 92       	push	r4
    2a9c:	5f 92       	push	r5
    2a9e:	6f 92       	push	r6
    2aa0:	7f 92       	push	r7
    2aa2:	8f 92       	push	r8
    2aa4:	9f 92       	push	r9
    2aa6:	af 92       	push	r10
    2aa8:	bf 92       	push	r11
    2aaa:	cf 92       	push	r12
    2aac:	df 92       	push	r13
    2aae:	ef 92       	push	r14
    2ab0:	ff 92       	push	r15
    2ab2:	0f 93       	push	r16
    2ab4:	1f 93       	push	r17
    2ab6:	2f 93       	push	r18
    2ab8:	3f 93       	push	r19
    2aba:	4f 93       	push	r20
    2abc:	5f 93       	push	r21
    2abe:	6f 93       	push	r22
    2ac0:	7f 93       	push	r23
    2ac2:	8f 93       	push	r24
    2ac4:	9f 93       	push	r25
    2ac6:	af 93       	push	r26
    2ac8:	bf 93       	push	r27
    2aca:	cf 93       	push	r28
    2acc:	df 93       	push	r29
    2ace:	ef 93       	push	r30
    2ad0:	ff 93       	push	r31
    2ad2:	a0 91 dc 0e 	lds	r26, 0x0EDC	; 0x800edc <pxCurrentTCB>
    2ad6:	b0 91 dd 0e 	lds	r27, 0x0EDD	; 0x800edd <pxCurrentTCB+0x1>
    2ada:	0d b6       	in	r0, 0x3d	; 61
    2adc:	0d 92       	st	X+, r0
    2ade:	0e b6       	in	r0, 0x3e	; 62
    2ae0:	0d 92       	st	X+, r0

	sleep_reset();		//	 reset the sleep_mode() faster than sleep_disable();
    2ae2:	13 be       	out	0x33, r1	; 51

	if( xTaskIncrementTick() != pdFALSE )
    2ae4:	30 d5       	rcall	.+2656   	; 0x3546 <xTaskIncrementTick>
    2ae6:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
    2ae8:	6e d6       	rcall	.+3292   	; 0x37c6 <vTaskSwitchContext>
    2aea:	a0 91 dc 0e 	lds	r26, 0x0EDC	; 0x800edc <pxCurrentTCB>
	}

	portRESTORE_CONTEXT();
    2aee:	b0 91 dd 0e 	lds	r27, 0x0EDD	; 0x800edd <pxCurrentTCB+0x1>
    2af2:	cd 91       	ld	r28, X+
    2af4:	cd bf       	out	0x3d, r28	; 61
    2af6:	dd 91       	ld	r29, X+
    2af8:	de bf       	out	0x3e, r29	; 62
    2afa:	ff 91       	pop	r31
    2afc:	ef 91       	pop	r30
    2afe:	df 91       	pop	r29
    2b00:	cf 91       	pop	r28
    2b02:	bf 91       	pop	r27
    2b04:	af 91       	pop	r26
    2b06:	9f 91       	pop	r25
    2b08:	8f 91       	pop	r24
    2b0a:	7f 91       	pop	r23
    2b0c:	6f 91       	pop	r22
    2b0e:	5f 91       	pop	r21
    2b10:	4f 91       	pop	r20
    2b12:	3f 91       	pop	r19
    2b14:	2f 91       	pop	r18
    2b16:	1f 91       	pop	r17
    2b18:	0f 91       	pop	r16
    2b1a:	ff 90       	pop	r15
    2b1c:	ef 90       	pop	r14
    2b1e:	df 90       	pop	r13
    2b20:	cf 90       	pop	r12
    2b22:	bf 90       	pop	r11
    2b24:	af 90       	pop	r10
    2b26:	9f 90       	pop	r9
    2b28:	8f 90       	pop	r8
    2b2a:	7f 90       	pop	r7
    2b2c:	6f 90       	pop	r6
    2b2e:	5f 90       	pop	r5
    2b30:	4f 90       	pop	r4
    2b32:	3f 90       	pop	r3
    2b34:	2f 90       	pop	r2
    2b36:	1f 90       	pop	r1
    2b38:	0f 90       	pop	r0
    2b3a:	0c be       	out	0x3c, r0	; 60
    2b3c:	0f 90       	pop	r0
    2b3e:	0b be       	out	0x3b, r0	; 59
    2b40:	0f 90       	pop	r0
    2b42:	0f be       	out	0x3f, r0	; 63
    2b44:	0f 90       	pop	r0
    2b46:	08 95       	ret

00002b48 <__vector_12>:

	__asm__ __volatile__ ( "ret" );
    2b48:	9c df       	rcall	.-200    	; 0x2a82 <vPortYieldFromTick>
//	ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
	ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
	ISR(portSCHEDULER_ISR)
	{
		vPortYieldFromTick();
		__asm__ __volatile__ ( "reti" );
    2b4a:	18 95       	reti

00002b4c <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    2b4c:	0f b6       	in	r0, 0x3f	; 63
    2b4e:	f8 94       	cli
    2b50:	0f 92       	push	r0
    2b52:	fc 01       	movw	r30, r24
    2b54:	92 8d       	ldd	r25, Z+26	; 0x1a
    2b56:	0f 90       	pop	r0
    2b58:	0f be       	out	0x3f, r0	; 63
    2b5a:	81 e0       	ldi	r24, 0x01	; 1
    2b5c:	91 11       	cpse	r25, r1
    2b5e:	80 e0       	ldi	r24, 0x00	; 0
    2b60:	08 95       	ret

00002b62 <prvCopyDataToQueue>:
    2b62:	0f 93       	push	r16
    2b64:	1f 93       	push	r17
    2b66:	cf 93       	push	r28
    2b68:	df 93       	push	r29
    2b6a:	ec 01       	movw	r28, r24
    2b6c:	04 2f       	mov	r16, r20
    2b6e:	1a 8d       	ldd	r17, Y+26	; 0x1a
    2b70:	4c 8d       	ldd	r20, Y+28	; 0x1c
    2b72:	41 11       	cpse	r20, r1
    2b74:	0b c0       	rjmp	.+22     	; 0x2b8c <prvCopyDataToQueue+0x2a>
    2b76:	88 81       	ld	r24, Y
    2b78:	99 81       	ldd	r25, Y+1	; 0x01
    2b7a:	89 2b       	or	r24, r25
    2b7c:	09 f0       	breq	.+2      	; 0x2b80 <prvCopyDataToQueue+0x1e>
    2b7e:	41 c0       	rjmp	.+130    	; 0x2c02 <prvCopyDataToQueue+0xa0>
    2b80:	8c 81       	ldd	r24, Y+4	; 0x04
    2b82:	9d 81       	ldd	r25, Y+5	; 0x05
    2b84:	cc d7       	rcall	.+3992   	; 0x3b1e <xTaskPriorityDisinherit>
    2b86:	1d 82       	std	Y+5, r1	; 0x05
    2b88:	1c 82       	std	Y+4, r1	; 0x04
    2b8a:	42 c0       	rjmp	.+132    	; 0x2c10 <prvCopyDataToQueue+0xae>
    2b8c:	01 11       	cpse	r16, r1
    2b8e:	17 c0       	rjmp	.+46     	; 0x2bbe <prvCopyDataToQueue+0x5c>
    2b90:	50 e0       	ldi	r21, 0x00	; 0
    2b92:	8a 81       	ldd	r24, Y+2	; 0x02
    2b94:	9b 81       	ldd	r25, Y+3	; 0x03
    2b96:	0e 94 f1 25 	call	0x4be2	; 0x4be2 <memcpy>
    2b9a:	2c 8d       	ldd	r18, Y+28	; 0x1c
    2b9c:	8a 81       	ldd	r24, Y+2	; 0x02
    2b9e:	9b 81       	ldd	r25, Y+3	; 0x03
    2ba0:	82 0f       	add	r24, r18
    2ba2:	91 1d       	adc	r25, r1
    2ba4:	9b 83       	std	Y+3, r25	; 0x03
    2ba6:	8a 83       	std	Y+2, r24	; 0x02
    2ba8:	2c 81       	ldd	r18, Y+4	; 0x04
    2baa:	3d 81       	ldd	r19, Y+5	; 0x05
    2bac:	82 17       	cp	r24, r18
    2bae:	93 07       	cpc	r25, r19
    2bb0:	50 f1       	brcs	.+84     	; 0x2c06 <prvCopyDataToQueue+0xa4>
    2bb2:	88 81       	ld	r24, Y
    2bb4:	99 81       	ldd	r25, Y+1	; 0x01
    2bb6:	9b 83       	std	Y+3, r25	; 0x03
    2bb8:	8a 83       	std	Y+2, r24	; 0x02
    2bba:	80 e0       	ldi	r24, 0x00	; 0
    2bbc:	29 c0       	rjmp	.+82     	; 0x2c10 <prvCopyDataToQueue+0xae>
    2bbe:	50 e0       	ldi	r21, 0x00	; 0
    2bc0:	8e 81       	ldd	r24, Y+6	; 0x06
    2bc2:	9f 81       	ldd	r25, Y+7	; 0x07
    2bc4:	0e 94 f1 25 	call	0x4be2	; 0x4be2 <memcpy>
    2bc8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2bca:	90 e0       	ldi	r25, 0x00	; 0
    2bcc:	91 95       	neg	r25
    2bce:	81 95       	neg	r24
    2bd0:	91 09       	sbc	r25, r1
    2bd2:	2e 81       	ldd	r18, Y+6	; 0x06
    2bd4:	3f 81       	ldd	r19, Y+7	; 0x07
    2bd6:	28 0f       	add	r18, r24
    2bd8:	39 1f       	adc	r19, r25
    2bda:	3f 83       	std	Y+7, r19	; 0x07
    2bdc:	2e 83       	std	Y+6, r18	; 0x06
    2bde:	48 81       	ld	r20, Y
    2be0:	59 81       	ldd	r21, Y+1	; 0x01
    2be2:	24 17       	cp	r18, r20
    2be4:	35 07       	cpc	r19, r21
    2be6:	30 f4       	brcc	.+12     	; 0x2bf4 <prvCopyDataToQueue+0x92>
    2be8:	2c 81       	ldd	r18, Y+4	; 0x04
    2bea:	3d 81       	ldd	r19, Y+5	; 0x05
    2bec:	82 0f       	add	r24, r18
    2bee:	93 1f       	adc	r25, r19
    2bf0:	9f 83       	std	Y+7, r25	; 0x07
    2bf2:	8e 83       	std	Y+6, r24	; 0x06
    2bf4:	02 30       	cpi	r16, 0x02	; 2
    2bf6:	49 f4       	brne	.+18     	; 0x2c0a <prvCopyDataToQueue+0xa8>
    2bf8:	11 23       	and	r17, r17
    2bfa:	49 f0       	breq	.+18     	; 0x2c0e <prvCopyDataToQueue+0xac>
    2bfc:	11 50       	subi	r17, 0x01	; 1
    2bfe:	80 e0       	ldi	r24, 0x00	; 0
    2c00:	07 c0       	rjmp	.+14     	; 0x2c10 <prvCopyDataToQueue+0xae>
    2c02:	80 e0       	ldi	r24, 0x00	; 0
    2c04:	05 c0       	rjmp	.+10     	; 0x2c10 <prvCopyDataToQueue+0xae>
    2c06:	80 e0       	ldi	r24, 0x00	; 0
    2c08:	03 c0       	rjmp	.+6      	; 0x2c10 <prvCopyDataToQueue+0xae>
    2c0a:	80 e0       	ldi	r24, 0x00	; 0
    2c0c:	01 c0       	rjmp	.+2      	; 0x2c10 <prvCopyDataToQueue+0xae>
    2c0e:	80 e0       	ldi	r24, 0x00	; 0
    2c10:	1f 5f       	subi	r17, 0xFF	; 255
    2c12:	1a 8f       	std	Y+26, r17	; 0x1a
    2c14:	df 91       	pop	r29
    2c16:	cf 91       	pop	r28
    2c18:	1f 91       	pop	r17
    2c1a:	0f 91       	pop	r16
    2c1c:	08 95       	ret

00002c1e <prvCopyDataFromQueue>:
    2c1e:	fc 01       	movw	r30, r24
    2c20:	44 8d       	ldd	r20, Z+28	; 0x1c
    2c22:	44 23       	and	r20, r20
    2c24:	a9 f0       	breq	.+42     	; 0x2c50 <prvCopyDataFromQueue+0x32>
    2c26:	50 e0       	ldi	r21, 0x00	; 0
    2c28:	26 81       	ldd	r18, Z+6	; 0x06
    2c2a:	37 81       	ldd	r19, Z+7	; 0x07
    2c2c:	24 0f       	add	r18, r20
    2c2e:	35 1f       	adc	r19, r21
    2c30:	37 83       	std	Z+7, r19	; 0x07
    2c32:	26 83       	std	Z+6, r18	; 0x06
    2c34:	84 81       	ldd	r24, Z+4	; 0x04
    2c36:	95 81       	ldd	r25, Z+5	; 0x05
    2c38:	28 17       	cp	r18, r24
    2c3a:	39 07       	cpc	r19, r25
    2c3c:	20 f0       	brcs	.+8      	; 0x2c46 <prvCopyDataFromQueue+0x28>
    2c3e:	80 81       	ld	r24, Z
    2c40:	91 81       	ldd	r25, Z+1	; 0x01
    2c42:	97 83       	std	Z+7, r25	; 0x07
    2c44:	86 83       	std	Z+6, r24	; 0x06
    2c46:	cb 01       	movw	r24, r22
    2c48:	66 81       	ldd	r22, Z+6	; 0x06
    2c4a:	77 81       	ldd	r23, Z+7	; 0x07
    2c4c:	0c 94 f1 25 	jmp	0x4be2	; 0x4be2 <memcpy>
    2c50:	08 95       	ret

00002c52 <prvUnlockQueue>:
    2c52:	ef 92       	push	r14
    2c54:	ff 92       	push	r15
    2c56:	0f 93       	push	r16
    2c58:	1f 93       	push	r17
    2c5a:	cf 93       	push	r28
    2c5c:	8c 01       	movw	r16, r24
    2c5e:	0f b6       	in	r0, 0x3f	; 63
    2c60:	f8 94       	cli
    2c62:	0f 92       	push	r0
    2c64:	fc 01       	movw	r30, r24
    2c66:	c6 8d       	ldd	r28, Z+30	; 0x1e
    2c68:	1c 16       	cp	r1, r28
    2c6a:	9c f4       	brge	.+38     	; 0x2c92 <prvUnlockQueue+0x40>
    2c6c:	81 89       	ldd	r24, Z+17	; 0x11
    2c6e:	81 11       	cpse	r24, r1
    2c70:	06 c0       	rjmp	.+12     	; 0x2c7e <prvUnlockQueue+0x2c>
    2c72:	0f c0       	rjmp	.+30     	; 0x2c92 <prvUnlockQueue+0x40>
    2c74:	f8 01       	movw	r30, r16
    2c76:	81 89       	ldd	r24, Z+17	; 0x11
    2c78:	81 11       	cpse	r24, r1
    2c7a:	05 c0       	rjmp	.+10     	; 0x2c86 <prvUnlockQueue+0x34>
    2c7c:	0a c0       	rjmp	.+20     	; 0x2c92 <prvUnlockQueue+0x40>
    2c7e:	78 01       	movw	r14, r16
    2c80:	f1 e1       	ldi	r31, 0x11	; 17
    2c82:	ef 0e       	add	r14, r31
    2c84:	f1 1c       	adc	r15, r1
    2c86:	c7 01       	movw	r24, r14
    2c88:	48 d6       	rcall	.+3216   	; 0x391a <xTaskRemoveFromEventList>
    2c8a:	81 11       	cpse	r24, r1
    2c8c:	c4 d6       	rcall	.+3464   	; 0x3a16 <vTaskMissedYield>
    2c8e:	c1 50       	subi	r28, 0x01	; 1
    2c90:	89 f7       	brne	.-30     	; 0x2c74 <prvUnlockQueue+0x22>
    2c92:	8f ef       	ldi	r24, 0xFF	; 255
    2c94:	f8 01       	movw	r30, r16
    2c96:	86 8f       	std	Z+30, r24	; 0x1e
    2c98:	0f 90       	pop	r0
    2c9a:	0f be       	out	0x3f, r0	; 63
    2c9c:	0f b6       	in	r0, 0x3f	; 63
    2c9e:	f8 94       	cli
    2ca0:	0f 92       	push	r0
    2ca2:	c5 8d       	ldd	r28, Z+29	; 0x1d
    2ca4:	1c 16       	cp	r1, r28
    2ca6:	9c f4       	brge	.+38     	; 0x2cce <prvUnlockQueue+0x7c>
    2ca8:	80 85       	ldd	r24, Z+8	; 0x08
    2caa:	81 11       	cpse	r24, r1
    2cac:	06 c0       	rjmp	.+12     	; 0x2cba <prvUnlockQueue+0x68>
    2cae:	0f c0       	rjmp	.+30     	; 0x2cce <prvUnlockQueue+0x7c>
    2cb0:	f8 01       	movw	r30, r16
    2cb2:	80 85       	ldd	r24, Z+8	; 0x08
    2cb4:	81 11       	cpse	r24, r1
    2cb6:	05 c0       	rjmp	.+10     	; 0x2cc2 <prvUnlockQueue+0x70>
    2cb8:	0a c0       	rjmp	.+20     	; 0x2cce <prvUnlockQueue+0x7c>
    2cba:	78 01       	movw	r14, r16
    2cbc:	f8 e0       	ldi	r31, 0x08	; 8
    2cbe:	ef 0e       	add	r14, r31
    2cc0:	f1 1c       	adc	r15, r1
    2cc2:	c7 01       	movw	r24, r14
    2cc4:	2a d6       	rcall	.+3156   	; 0x391a <xTaskRemoveFromEventList>
    2cc6:	81 11       	cpse	r24, r1
    2cc8:	a6 d6       	rcall	.+3404   	; 0x3a16 <vTaskMissedYield>
    2cca:	c1 50       	subi	r28, 0x01	; 1
    2ccc:	89 f7       	brne	.-30     	; 0x2cb0 <prvUnlockQueue+0x5e>
    2cce:	8f ef       	ldi	r24, 0xFF	; 255
    2cd0:	f8 01       	movw	r30, r16
    2cd2:	85 8f       	std	Z+29, r24	; 0x1d
    2cd4:	0f 90       	pop	r0
    2cd6:	0f be       	out	0x3f, r0	; 63
    2cd8:	cf 91       	pop	r28
    2cda:	1f 91       	pop	r17
    2cdc:	0f 91       	pop	r16
    2cde:	ff 90       	pop	r15
    2ce0:	ef 90       	pop	r14
    2ce2:	08 95       	ret

00002ce4 <xQueueGenericReset>:
    2ce4:	cf 93       	push	r28
    2ce6:	df 93       	push	r29
    2ce8:	ec 01       	movw	r28, r24
    2cea:	0f b6       	in	r0, 0x3f	; 63
    2cec:	f8 94       	cli
    2cee:	0f 92       	push	r0
    2cf0:	e8 81       	ld	r30, Y
    2cf2:	f9 81       	ldd	r31, Y+1	; 0x01
    2cf4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2cf6:	2c 8d       	ldd	r18, Y+28	; 0x1c
    2cf8:	90 e0       	ldi	r25, 0x00	; 0
    2cfa:	30 e0       	ldi	r19, 0x00	; 0
    2cfc:	82 9f       	mul	r24, r18
    2cfe:	a0 01       	movw	r20, r0
    2d00:	83 9f       	mul	r24, r19
    2d02:	50 0d       	add	r21, r0
    2d04:	92 9f       	mul	r25, r18
    2d06:	50 0d       	add	r21, r0
    2d08:	11 24       	eor	r1, r1
    2d0a:	4e 0f       	add	r20, r30
    2d0c:	5f 1f       	adc	r21, r31
    2d0e:	5d 83       	std	Y+5, r21	; 0x05
    2d10:	4c 83       	std	Y+4, r20	; 0x04
    2d12:	1a 8e       	std	Y+26, r1	; 0x1a
    2d14:	fb 83       	std	Y+3, r31	; 0x03
    2d16:	ea 83       	std	Y+2, r30	; 0x02
    2d18:	01 97       	sbiw	r24, 0x01	; 1
    2d1a:	82 9f       	mul	r24, r18
    2d1c:	a0 01       	movw	r20, r0
    2d1e:	83 9f       	mul	r24, r19
    2d20:	50 0d       	add	r21, r0
    2d22:	92 9f       	mul	r25, r18
    2d24:	50 0d       	add	r21, r0
    2d26:	11 24       	eor	r1, r1
    2d28:	cf 01       	movw	r24, r30
    2d2a:	84 0f       	add	r24, r20
    2d2c:	95 1f       	adc	r25, r21
    2d2e:	9f 83       	std	Y+7, r25	; 0x07
    2d30:	8e 83       	std	Y+6, r24	; 0x06
    2d32:	8f ef       	ldi	r24, 0xFF	; 255
    2d34:	8d 8f       	std	Y+29, r24	; 0x1d
    2d36:	8e 8f       	std	Y+30, r24	; 0x1e
    2d38:	61 11       	cpse	r22, r1
    2d3a:	0a c0       	rjmp	.+20     	; 0x2d50 <xQueueGenericReset+0x6c>
    2d3c:	88 85       	ldd	r24, Y+8	; 0x08
    2d3e:	88 23       	and	r24, r24
    2d40:	69 f0       	breq	.+26     	; 0x2d5c <xQueueGenericReset+0x78>
    2d42:	ce 01       	movw	r24, r28
    2d44:	08 96       	adiw	r24, 0x08	; 8
    2d46:	e9 d5       	rcall	.+3026   	; 0x391a <xTaskRemoveFromEventList>
    2d48:	88 23       	and	r24, r24
    2d4a:	41 f0       	breq	.+16     	; 0x2d5c <xQueueGenericReset+0x78>
    2d4c:	3a de       	rcall	.-908    	; 0x29c2 <vPortYield>
    2d4e:	06 c0       	rjmp	.+12     	; 0x2d5c <xQueueGenericReset+0x78>
    2d50:	ce 01       	movw	r24, r28
    2d52:	08 96       	adiw	r24, 0x08	; 8
    2d54:	fd dc       	rcall	.-1542   	; 0x2750 <vListInitialise>
    2d56:	ce 01       	movw	r24, r28
    2d58:	41 96       	adiw	r24, 0x11	; 17
    2d5a:	fa dc       	rcall	.-1548   	; 0x2750 <vListInitialise>
    2d5c:	0f 90       	pop	r0
    2d5e:	0f be       	out	0x3f, r0	; 63
    2d60:	81 e0       	ldi	r24, 0x01	; 1
    2d62:	df 91       	pop	r29
    2d64:	cf 91       	pop	r28
    2d66:	08 95       	ret

00002d68 <xQueueGenericCreateStatic>:
    2d68:	cf 93       	push	r28
    2d6a:	df 93       	push	r29
    2d6c:	e9 01       	movw	r28, r18
    2d6e:	20 97       	sbiw	r28, 0x00	; 0
    2d70:	61 f0       	breq	.+24     	; 0x2d8a <xQueueGenericCreateStatic+0x22>
    2d72:	61 11       	cpse	r22, r1
    2d74:	03 c0       	rjmp	.+6      	; 0x2d7c <xQueueGenericCreateStatic+0x14>
    2d76:	39 83       	std	Y+1, r19	; 0x01
    2d78:	28 83       	st	Y, r18
    2d7a:	02 c0       	rjmp	.+4      	; 0x2d80 <xQueueGenericCreateStatic+0x18>
    2d7c:	59 83       	std	Y+1, r21	; 0x01
    2d7e:	48 83       	st	Y, r20
    2d80:	8b 8f       	std	Y+27, r24	; 0x1b
    2d82:	6c 8f       	std	Y+28, r22	; 0x1c
    2d84:	61 e0       	ldi	r22, 0x01	; 1
    2d86:	ce 01       	movw	r24, r28
    2d88:	ad df       	rcall	.-166    	; 0x2ce4 <xQueueGenericReset>
    2d8a:	ce 01       	movw	r24, r28
    2d8c:	df 91       	pop	r29
    2d8e:	cf 91       	pop	r28
    2d90:	08 95       	ret

00002d92 <xQueueGenericSend>:
    2d92:	9f 92       	push	r9
    2d94:	af 92       	push	r10
    2d96:	bf 92       	push	r11
    2d98:	cf 92       	push	r12
    2d9a:	df 92       	push	r13
    2d9c:	ef 92       	push	r14
    2d9e:	ff 92       	push	r15
    2da0:	0f 93       	push	r16
    2da2:	1f 93       	push	r17
    2da4:	cf 93       	push	r28
    2da6:	df 93       	push	r29
    2da8:	00 d0       	rcall	.+0      	; 0x2daa <xQueueGenericSend+0x18>
    2daa:	1f 92       	push	r1
    2dac:	1f 92       	push	r1
    2dae:	cd b7       	in	r28, 0x3d	; 61
    2db0:	de b7       	in	r29, 0x3e	; 62
    2db2:	8c 01       	movw	r16, r24
    2db4:	6b 01       	movw	r12, r22
    2db6:	5d 83       	std	Y+5, r21	; 0x05
    2db8:	4c 83       	std	Y+4, r20	; 0x04
    2dba:	a2 2e       	mov	r10, r18
    2dbc:	b1 2c       	mov	r11, r1
    2dbe:	99 24       	eor	r9, r9
    2dc0:	93 94       	inc	r9
    2dc2:	7c 01       	movw	r14, r24
    2dc4:	88 e0       	ldi	r24, 0x08	; 8
    2dc6:	e8 0e       	add	r14, r24
    2dc8:	f1 1c       	adc	r15, r1
    2dca:	0f b6       	in	r0, 0x3f	; 63
    2dcc:	f8 94       	cli
    2dce:	0f 92       	push	r0
    2dd0:	f8 01       	movw	r30, r16
    2dd2:	92 8d       	ldd	r25, Z+26	; 0x1a
    2dd4:	83 8d       	ldd	r24, Z+27	; 0x1b
    2dd6:	98 17       	cp	r25, r24
    2dd8:	18 f0       	brcs	.+6      	; 0x2de0 <xQueueGenericSend+0x4e>
    2dda:	f2 e0       	ldi	r31, 0x02	; 2
    2ddc:	af 12       	cpse	r10, r31
    2dde:	15 c0       	rjmp	.+42     	; 0x2e0a <xQueueGenericSend+0x78>
    2de0:	4a 2d       	mov	r20, r10
    2de2:	b6 01       	movw	r22, r12
    2de4:	c8 01       	movw	r24, r16
    2de6:	bd de       	rcall	.-646    	; 0x2b62 <prvCopyDataToQueue>
    2de8:	f8 01       	movw	r30, r16
    2dea:	91 89       	ldd	r25, Z+17	; 0x11
    2dec:	99 23       	and	r25, r25
    2dee:	39 f0       	breq	.+14     	; 0x2dfe <xQueueGenericSend+0x6c>
    2df0:	c8 01       	movw	r24, r16
    2df2:	41 96       	adiw	r24, 0x11	; 17
    2df4:	92 d5       	rcall	.+2852   	; 0x391a <xTaskRemoveFromEventList>
    2df6:	88 23       	and	r24, r24
    2df8:	21 f0       	breq	.+8      	; 0x2e02 <xQueueGenericSend+0x70>
    2dfa:	e3 dd       	rcall	.-1082   	; 0x29c2 <vPortYield>
    2dfc:	02 c0       	rjmp	.+4      	; 0x2e02 <xQueueGenericSend+0x70>
    2dfe:	81 11       	cpse	r24, r1
    2e00:	e0 dd       	rcall	.-1088   	; 0x29c2 <vPortYield>
    2e02:	0f 90       	pop	r0
    2e04:	0f be       	out	0x3f, r0	; 63
    2e06:	81 e0       	ldi	r24, 0x01	; 1
    2e08:	45 c0       	rjmp	.+138    	; 0x2e94 <xQueueGenericSend+0x102>
    2e0a:	8c 81       	ldd	r24, Y+4	; 0x04
    2e0c:	9d 81       	ldd	r25, Y+5	; 0x05
    2e0e:	89 2b       	or	r24, r25
    2e10:	21 f4       	brne	.+8      	; 0x2e1a <xQueueGenericSend+0x88>
    2e12:	0f 90       	pop	r0
    2e14:	0f be       	out	0x3f, r0	; 63
    2e16:	80 e0       	ldi	r24, 0x00	; 0
    2e18:	3d c0       	rjmp	.+122    	; 0x2e94 <xQueueGenericSend+0x102>
    2e1a:	b1 10       	cpse	r11, r1
    2e1c:	04 c0       	rjmp	.+8      	; 0x2e26 <xQueueGenericSend+0x94>
    2e1e:	ce 01       	movw	r24, r28
    2e20:	01 96       	adiw	r24, 0x01	; 1
    2e22:	c3 d5       	rcall	.+2950   	; 0x39aa <vTaskInternalSetTimeOutState>
    2e24:	b9 2c       	mov	r11, r9
    2e26:	0f 90       	pop	r0
    2e28:	0f be       	out	0x3f, r0	; 63
    2e2a:	7d d3       	rcall	.+1786   	; 0x3526 <vTaskSuspendAll>
    2e2c:	0f b6       	in	r0, 0x3f	; 63
    2e2e:	f8 94       	cli
    2e30:	0f 92       	push	r0
    2e32:	f8 01       	movw	r30, r16
    2e34:	85 8d       	ldd	r24, Z+29	; 0x1d
    2e36:	8f 3f       	cpi	r24, 0xFF	; 255
    2e38:	09 f4       	brne	.+2      	; 0x2e3c <xQueueGenericSend+0xaa>
    2e3a:	15 8e       	std	Z+29, r1	; 0x1d
    2e3c:	f8 01       	movw	r30, r16
    2e3e:	86 8d       	ldd	r24, Z+30	; 0x1e
    2e40:	8f 3f       	cpi	r24, 0xFF	; 255
    2e42:	09 f4       	brne	.+2      	; 0x2e46 <xQueueGenericSend+0xb4>
    2e44:	16 8e       	std	Z+30, r1	; 0x1e
    2e46:	0f 90       	pop	r0
    2e48:	0f be       	out	0x3f, r0	; 63
    2e4a:	be 01       	movw	r22, r28
    2e4c:	6c 5f       	subi	r22, 0xFC	; 252
    2e4e:	7f 4f       	sbci	r23, 0xFF	; 255
    2e50:	ce 01       	movw	r24, r28
    2e52:	01 96       	adiw	r24, 0x01	; 1
    2e54:	b5 d5       	rcall	.+2922   	; 0x39c0 <xTaskCheckForTimeOut>
    2e56:	81 11       	cpse	r24, r1
    2e58:	19 c0       	rjmp	.+50     	; 0x2e8c <xQueueGenericSend+0xfa>
    2e5a:	0f b6       	in	r0, 0x3f	; 63
    2e5c:	f8 94       	cli
    2e5e:	0f 92       	push	r0
    2e60:	f8 01       	movw	r30, r16
    2e62:	92 8d       	ldd	r25, Z+26	; 0x1a
    2e64:	83 8d       	ldd	r24, Z+27	; 0x1b
    2e66:	0f 90       	pop	r0
    2e68:	0f be       	out	0x3f, r0	; 63
    2e6a:	98 13       	cpse	r25, r24
    2e6c:	0b c0       	rjmp	.+22     	; 0x2e84 <xQueueGenericSend+0xf2>
    2e6e:	6c 81       	ldd	r22, Y+4	; 0x04
    2e70:	7d 81       	ldd	r23, Y+5	; 0x05
    2e72:	c7 01       	movw	r24, r14
    2e74:	29 d5       	rcall	.+2642   	; 0x38c8 <vTaskPlaceOnEventList>
    2e76:	c8 01       	movw	r24, r16
    2e78:	ec de       	rcall	.-552    	; 0x2c52 <prvUnlockQueue>
    2e7a:	1c d4       	rcall	.+2104   	; 0x36b4 <xTaskResumeAll>
    2e7c:	81 11       	cpse	r24, r1
    2e7e:	a5 cf       	rjmp	.-182    	; 0x2dca <xQueueGenericSend+0x38>
    2e80:	a0 dd       	rcall	.-1216   	; 0x29c2 <vPortYield>
    2e82:	a3 cf       	rjmp	.-186    	; 0x2dca <xQueueGenericSend+0x38>
    2e84:	c8 01       	movw	r24, r16
    2e86:	e5 de       	rcall	.-566    	; 0x2c52 <prvUnlockQueue>
    2e88:	15 d4       	rcall	.+2090   	; 0x36b4 <xTaskResumeAll>
    2e8a:	9f cf       	rjmp	.-194    	; 0x2dca <xQueueGenericSend+0x38>
    2e8c:	c8 01       	movw	r24, r16
    2e8e:	e1 de       	rcall	.-574    	; 0x2c52 <prvUnlockQueue>
    2e90:	11 d4       	rcall	.+2082   	; 0x36b4 <xTaskResumeAll>
    2e92:	80 e0       	ldi	r24, 0x00	; 0
    2e94:	0f 90       	pop	r0
    2e96:	0f 90       	pop	r0
    2e98:	0f 90       	pop	r0
    2e9a:	0f 90       	pop	r0
    2e9c:	0f 90       	pop	r0
    2e9e:	df 91       	pop	r29
    2ea0:	cf 91       	pop	r28
    2ea2:	1f 91       	pop	r17
    2ea4:	0f 91       	pop	r16
    2ea6:	ff 90       	pop	r15
    2ea8:	ef 90       	pop	r14
    2eaa:	df 90       	pop	r13
    2eac:	cf 90       	pop	r12
    2eae:	bf 90       	pop	r11
    2eb0:	af 90       	pop	r10
    2eb2:	9f 90       	pop	r9
    2eb4:	08 95       	ret

00002eb6 <xQueueGenericSendFromISR>:
    2eb6:	ef 92       	push	r14
    2eb8:	ff 92       	push	r15
    2eba:	0f 93       	push	r16
    2ebc:	1f 93       	push	r17
    2ebe:	cf 93       	push	r28
    2ec0:	df 93       	push	r29
    2ec2:	8a 01       	movw	r16, r20
    2ec4:	fc 01       	movw	r30, r24
    2ec6:	52 8d       	ldd	r21, Z+26	; 0x1a
    2ec8:	33 8d       	ldd	r19, Z+27	; 0x1b
    2eca:	53 17       	cp	r21, r19
    2ecc:	10 f0       	brcs	.+4      	; 0x2ed2 <xQueueGenericSendFromISR+0x1c>
    2ece:	22 30       	cpi	r18, 0x02	; 2
    2ed0:	e1 f4       	brne	.+56     	; 0x2f0a <xQueueGenericSendFromISR+0x54>
    2ed2:	42 2f       	mov	r20, r18
    2ed4:	78 01       	movw	r14, r16
    2ed6:	ec 01       	movw	r28, r24
    2ed8:	1e 8d       	ldd	r17, Y+30	; 0x1e
    2eda:	43 de       	rcall	.-890    	; 0x2b62 <prvCopyDataToQueue>
    2edc:	1f 3f       	cpi	r17, 0xFF	; 255
    2ede:	79 f4       	brne	.+30     	; 0x2efe <xQueueGenericSendFromISR+0x48>
    2ee0:	89 89       	ldd	r24, Y+17	; 0x11
    2ee2:	88 23       	and	r24, r24
    2ee4:	a1 f0       	breq	.+40     	; 0x2f0e <xQueueGenericSendFromISR+0x58>
    2ee6:	ce 01       	movw	r24, r28
    2ee8:	41 96       	adiw	r24, 0x11	; 17
    2eea:	17 d5       	rcall	.+2606   	; 0x391a <xTaskRemoveFromEventList>
    2eec:	88 23       	and	r24, r24
    2eee:	89 f0       	breq	.+34     	; 0x2f12 <xQueueGenericSendFromISR+0x5c>
    2ef0:	e1 14       	cp	r14, r1
    2ef2:	f1 04       	cpc	r15, r1
    2ef4:	81 f0       	breq	.+32     	; 0x2f16 <xQueueGenericSendFromISR+0x60>
    2ef6:	81 e0       	ldi	r24, 0x01	; 1
    2ef8:	f7 01       	movw	r30, r14
    2efa:	80 83       	st	Z, r24
    2efc:	0d c0       	rjmp	.+26     	; 0x2f18 <xQueueGenericSendFromISR+0x62>
    2efe:	ff 24       	eor	r15, r15
    2f00:	f3 94       	inc	r15
    2f02:	f1 0e       	add	r15, r17
    2f04:	fe 8e       	std	Y+30, r15	; 0x1e
    2f06:	81 e0       	ldi	r24, 0x01	; 1
    2f08:	07 c0       	rjmp	.+14     	; 0x2f18 <xQueueGenericSendFromISR+0x62>
    2f0a:	80 e0       	ldi	r24, 0x00	; 0
    2f0c:	05 c0       	rjmp	.+10     	; 0x2f18 <xQueueGenericSendFromISR+0x62>
    2f0e:	81 e0       	ldi	r24, 0x01	; 1
    2f10:	03 c0       	rjmp	.+6      	; 0x2f18 <xQueueGenericSendFromISR+0x62>
    2f12:	81 e0       	ldi	r24, 0x01	; 1
    2f14:	01 c0       	rjmp	.+2      	; 0x2f18 <xQueueGenericSendFromISR+0x62>
    2f16:	81 e0       	ldi	r24, 0x01	; 1
    2f18:	df 91       	pop	r29
    2f1a:	cf 91       	pop	r28
    2f1c:	1f 91       	pop	r17
    2f1e:	0f 91       	pop	r16
    2f20:	ff 90       	pop	r15
    2f22:	ef 90       	pop	r14
    2f24:	08 95       	ret

00002f26 <xQueueReceive>:
    2f26:	9f 92       	push	r9
    2f28:	af 92       	push	r10
    2f2a:	bf 92       	push	r11
    2f2c:	cf 92       	push	r12
    2f2e:	df 92       	push	r13
    2f30:	ef 92       	push	r14
    2f32:	ff 92       	push	r15
    2f34:	0f 93       	push	r16
    2f36:	1f 93       	push	r17
    2f38:	cf 93       	push	r28
    2f3a:	df 93       	push	r29
    2f3c:	00 d0       	rcall	.+0      	; 0x2f3e <xQueueReceive+0x18>
    2f3e:	1f 92       	push	r1
    2f40:	1f 92       	push	r1
    2f42:	cd b7       	in	r28, 0x3d	; 61
    2f44:	de b7       	in	r29, 0x3e	; 62
    2f46:	8c 01       	movw	r16, r24
    2f48:	5b 01       	movw	r10, r22
    2f4a:	5d 83       	std	Y+5, r21	; 0x05
    2f4c:	4c 83       	std	Y+4, r20	; 0x04
    2f4e:	e1 2c       	mov	r14, r1
    2f50:	99 24       	eor	r9, r9
    2f52:	93 94       	inc	r9
    2f54:	6c 01       	movw	r12, r24
    2f56:	81 e1       	ldi	r24, 0x11	; 17
    2f58:	c8 0e       	add	r12, r24
    2f5a:	d1 1c       	adc	r13, r1
    2f5c:	0f b6       	in	r0, 0x3f	; 63
    2f5e:	f8 94       	cli
    2f60:	0f 92       	push	r0
    2f62:	f8 01       	movw	r30, r16
    2f64:	f2 8c       	ldd	r15, Z+26	; 0x1a
    2f66:	ff 20       	and	r15, r15
    2f68:	91 f0       	breq	.+36     	; 0x2f8e <xQueueReceive+0x68>
    2f6a:	b5 01       	movw	r22, r10
    2f6c:	c8 01       	movw	r24, r16
    2f6e:	57 de       	rcall	.-850    	; 0x2c1e <prvCopyDataFromQueue>
    2f70:	fa 94       	dec	r15
    2f72:	f8 01       	movw	r30, r16
    2f74:	f2 8e       	std	Z+26, r15	; 0x1a
    2f76:	80 85       	ldd	r24, Z+8	; 0x08
    2f78:	88 23       	and	r24, r24
    2f7a:	29 f0       	breq	.+10     	; 0x2f86 <xQueueReceive+0x60>
    2f7c:	c8 01       	movw	r24, r16
    2f7e:	08 96       	adiw	r24, 0x08	; 8
    2f80:	cc d4       	rcall	.+2456   	; 0x391a <xTaskRemoveFromEventList>
    2f82:	81 11       	cpse	r24, r1
    2f84:	1e dd       	rcall	.-1476   	; 0x29c2 <vPortYield>
    2f86:	0f 90       	pop	r0
    2f88:	0f be       	out	0x3f, r0	; 63
    2f8a:	81 e0       	ldi	r24, 0x01	; 1
    2f8c:	44 c0       	rjmp	.+136    	; 0x3016 <xQueueReceive+0xf0>
    2f8e:	8c 81       	ldd	r24, Y+4	; 0x04
    2f90:	9d 81       	ldd	r25, Y+5	; 0x05
    2f92:	89 2b       	or	r24, r25
    2f94:	21 f4       	brne	.+8      	; 0x2f9e <xQueueReceive+0x78>
    2f96:	0f 90       	pop	r0
    2f98:	0f be       	out	0x3f, r0	; 63
    2f9a:	80 e0       	ldi	r24, 0x00	; 0
    2f9c:	3c c0       	rjmp	.+120    	; 0x3016 <xQueueReceive+0xf0>
    2f9e:	e1 10       	cpse	r14, r1
    2fa0:	04 c0       	rjmp	.+8      	; 0x2faa <xQueueReceive+0x84>
    2fa2:	ce 01       	movw	r24, r28
    2fa4:	01 96       	adiw	r24, 0x01	; 1
    2fa6:	01 d5       	rcall	.+2562   	; 0x39aa <vTaskInternalSetTimeOutState>
    2fa8:	e9 2c       	mov	r14, r9
    2faa:	0f 90       	pop	r0
    2fac:	0f be       	out	0x3f, r0	; 63
    2fae:	bb d2       	rcall	.+1398   	; 0x3526 <vTaskSuspendAll>
    2fb0:	0f b6       	in	r0, 0x3f	; 63
    2fb2:	f8 94       	cli
    2fb4:	0f 92       	push	r0
    2fb6:	f8 01       	movw	r30, r16
    2fb8:	85 8d       	ldd	r24, Z+29	; 0x1d
    2fba:	8f 3f       	cpi	r24, 0xFF	; 255
    2fbc:	09 f4       	brne	.+2      	; 0x2fc0 <xQueueReceive+0x9a>
    2fbe:	15 8e       	std	Z+29, r1	; 0x1d
    2fc0:	f8 01       	movw	r30, r16
    2fc2:	86 8d       	ldd	r24, Z+30	; 0x1e
    2fc4:	8f 3f       	cpi	r24, 0xFF	; 255
    2fc6:	09 f4       	brne	.+2      	; 0x2fca <xQueueReceive+0xa4>
    2fc8:	16 8e       	std	Z+30, r1	; 0x1e
    2fca:	0f 90       	pop	r0
    2fcc:	0f be       	out	0x3f, r0	; 63
    2fce:	be 01       	movw	r22, r28
    2fd0:	6c 5f       	subi	r22, 0xFC	; 252
    2fd2:	7f 4f       	sbci	r23, 0xFF	; 255
    2fd4:	ce 01       	movw	r24, r28
    2fd6:	01 96       	adiw	r24, 0x01	; 1
    2fd8:	f3 d4       	rcall	.+2534   	; 0x39c0 <xTaskCheckForTimeOut>
    2fda:	81 11       	cpse	r24, r1
    2fdc:	13 c0       	rjmp	.+38     	; 0x3004 <xQueueReceive+0xde>
    2fde:	c8 01       	movw	r24, r16
    2fe0:	b5 dd       	rcall	.-1174   	; 0x2b4c <prvIsQueueEmpty>
    2fe2:	88 23       	and	r24, r24
    2fe4:	59 f0       	breq	.+22     	; 0x2ffc <xQueueReceive+0xd6>
    2fe6:	6c 81       	ldd	r22, Y+4	; 0x04
    2fe8:	7d 81       	ldd	r23, Y+5	; 0x05
    2fea:	c6 01       	movw	r24, r12
    2fec:	6d d4       	rcall	.+2266   	; 0x38c8 <vTaskPlaceOnEventList>
    2fee:	c8 01       	movw	r24, r16
    2ff0:	30 de       	rcall	.-928    	; 0x2c52 <prvUnlockQueue>
    2ff2:	60 d3       	rcall	.+1728   	; 0x36b4 <xTaskResumeAll>
    2ff4:	81 11       	cpse	r24, r1
    2ff6:	b2 cf       	rjmp	.-156    	; 0x2f5c <xQueueReceive+0x36>
    2ff8:	e4 dc       	rcall	.-1592   	; 0x29c2 <vPortYield>
    2ffa:	b0 cf       	rjmp	.-160    	; 0x2f5c <xQueueReceive+0x36>
    2ffc:	c8 01       	movw	r24, r16
    2ffe:	29 de       	rcall	.-942    	; 0x2c52 <prvUnlockQueue>
    3000:	59 d3       	rcall	.+1714   	; 0x36b4 <xTaskResumeAll>
    3002:	ac cf       	rjmp	.-168    	; 0x2f5c <xQueueReceive+0x36>
    3004:	c8 01       	movw	r24, r16
    3006:	25 de       	rcall	.-950    	; 0x2c52 <prvUnlockQueue>
    3008:	55 d3       	rcall	.+1706   	; 0x36b4 <xTaskResumeAll>
    300a:	c8 01       	movw	r24, r16
    300c:	9f dd       	rcall	.-1218   	; 0x2b4c <prvIsQueueEmpty>
    300e:	88 23       	and	r24, r24
    3010:	09 f4       	brne	.+2      	; 0x3014 <xQueueReceive+0xee>
    3012:	a4 cf       	rjmp	.-184    	; 0x2f5c <xQueueReceive+0x36>
    3014:	80 e0       	ldi	r24, 0x00	; 0
    3016:	0f 90       	pop	r0
    3018:	0f 90       	pop	r0
    301a:	0f 90       	pop	r0
    301c:	0f 90       	pop	r0
    301e:	0f 90       	pop	r0
    3020:	df 91       	pop	r29
    3022:	cf 91       	pop	r28
    3024:	1f 91       	pop	r17
    3026:	0f 91       	pop	r16
    3028:	ff 90       	pop	r15
    302a:	ef 90       	pop	r14
    302c:	df 90       	pop	r13
    302e:	cf 90       	pop	r12
    3030:	bf 90       	pop	r11
    3032:	af 90       	pop	r10
    3034:	9f 90       	pop	r9
    3036:	08 95       	ret

00003038 <xQueueSemaphoreTake>:
    3038:	bf 92       	push	r11
    303a:	cf 92       	push	r12
    303c:	df 92       	push	r13
    303e:	ef 92       	push	r14
    3040:	ff 92       	push	r15
    3042:	0f 93       	push	r16
    3044:	1f 93       	push	r17
    3046:	cf 93       	push	r28
    3048:	df 93       	push	r29
    304a:	00 d0       	rcall	.+0      	; 0x304c <xQueueSemaphoreTake+0x14>
    304c:	1f 92       	push	r1
    304e:	1f 92       	push	r1
    3050:	cd b7       	in	r28, 0x3d	; 61
    3052:	de b7       	in	r29, 0x3e	; 62
    3054:	8c 01       	movw	r16, r24
    3056:	7d 83       	std	Y+5, r23	; 0x05
    3058:	6c 83       	std	Y+4, r22	; 0x04
    305a:	b1 2c       	mov	r11, r1
    305c:	d1 2c       	mov	r13, r1
    305e:	cc 24       	eor	r12, r12
    3060:	c3 94       	inc	r12
    3062:	7c 01       	movw	r14, r24
    3064:	81 e1       	ldi	r24, 0x11	; 17
    3066:	e8 0e       	add	r14, r24
    3068:	f1 1c       	adc	r15, r1
    306a:	0f b6       	in	r0, 0x3f	; 63
    306c:	f8 94       	cli
    306e:	0f 92       	push	r0
    3070:	d8 01       	movw	r26, r16
    3072:	5a 96       	adiw	r26, 0x1a	; 26
    3074:	8c 91       	ld	r24, X
    3076:	5a 97       	sbiw	r26, 0x1a	; 26
    3078:	88 23       	and	r24, r24
    307a:	d1 f0       	breq	.+52     	; 0x30b0 <xQueueSemaphoreTake+0x78>
    307c:	81 50       	subi	r24, 0x01	; 1
    307e:	5a 96       	adiw	r26, 0x1a	; 26
    3080:	8c 93       	st	X, r24
    3082:	5a 97       	sbiw	r26, 0x1a	; 26
    3084:	8d 91       	ld	r24, X+
    3086:	9c 91       	ld	r25, X
    3088:	89 2b       	or	r24, r25
    308a:	21 f4       	brne	.+8      	; 0x3094 <xQueueSemaphoreTake+0x5c>
    308c:	d8 d5       	rcall	.+2992   	; 0x3c3e <pvTaskIncrementMutexHeldCount>
    308e:	f8 01       	movw	r30, r16
    3090:	95 83       	std	Z+5, r25	; 0x05
    3092:	84 83       	std	Z+4, r24	; 0x04
    3094:	d8 01       	movw	r26, r16
    3096:	18 96       	adiw	r26, 0x08	; 8
    3098:	8c 91       	ld	r24, X
    309a:	88 23       	and	r24, r24
    309c:	29 f0       	breq	.+10     	; 0x30a8 <xQueueSemaphoreTake+0x70>
    309e:	c8 01       	movw	r24, r16
    30a0:	08 96       	adiw	r24, 0x08	; 8
    30a2:	3b d4       	rcall	.+2166   	; 0x391a <xTaskRemoveFromEventList>
    30a4:	81 11       	cpse	r24, r1
    30a6:	8d dc       	rcall	.-1766   	; 0x29c2 <vPortYield>
    30a8:	0f 90       	pop	r0
    30aa:	0f be       	out	0x3f, r0	; 63
    30ac:	81 e0       	ldi	r24, 0x01	; 1
    30ae:	70 c0       	rjmp	.+224    	; 0x3190 <xQueueSemaphoreTake+0x158>
    30b0:	8c 81       	ldd	r24, Y+4	; 0x04
    30b2:	9d 81       	ldd	r25, Y+5	; 0x05
    30b4:	89 2b       	or	r24, r25
    30b6:	21 f4       	brne	.+8      	; 0x30c0 <xQueueSemaphoreTake+0x88>
    30b8:	0f 90       	pop	r0
    30ba:	0f be       	out	0x3f, r0	; 63
    30bc:	80 e0       	ldi	r24, 0x00	; 0
    30be:	68 c0       	rjmp	.+208    	; 0x3190 <xQueueSemaphoreTake+0x158>
    30c0:	d1 10       	cpse	r13, r1
    30c2:	04 c0       	rjmp	.+8      	; 0x30cc <xQueueSemaphoreTake+0x94>
    30c4:	ce 01       	movw	r24, r28
    30c6:	01 96       	adiw	r24, 0x01	; 1
    30c8:	70 d4       	rcall	.+2272   	; 0x39aa <vTaskInternalSetTimeOutState>
    30ca:	dc 2c       	mov	r13, r12
    30cc:	0f 90       	pop	r0
    30ce:	0f be       	out	0x3f, r0	; 63
    30d0:	2a d2       	rcall	.+1108   	; 0x3526 <vTaskSuspendAll>
    30d2:	0f b6       	in	r0, 0x3f	; 63
    30d4:	f8 94       	cli
    30d6:	0f 92       	push	r0
    30d8:	f8 01       	movw	r30, r16
    30da:	85 8d       	ldd	r24, Z+29	; 0x1d
    30dc:	8f 3f       	cpi	r24, 0xFF	; 255
    30de:	09 f4       	brne	.+2      	; 0x30e2 <xQueueSemaphoreTake+0xaa>
    30e0:	15 8e       	std	Z+29, r1	; 0x1d
    30e2:	d8 01       	movw	r26, r16
    30e4:	5e 96       	adiw	r26, 0x1e	; 30
    30e6:	8c 91       	ld	r24, X
    30e8:	5e 97       	sbiw	r26, 0x1e	; 30
    30ea:	8f 3f       	cpi	r24, 0xFF	; 255
    30ec:	11 f4       	brne	.+4      	; 0x30f2 <xQueueSemaphoreTake+0xba>
    30ee:	5e 96       	adiw	r26, 0x1e	; 30
    30f0:	1c 92       	st	X, r1
    30f2:	0f 90       	pop	r0
    30f4:	0f be       	out	0x3f, r0	; 63
    30f6:	be 01       	movw	r22, r28
    30f8:	6c 5f       	subi	r22, 0xFC	; 252
    30fa:	7f 4f       	sbci	r23, 0xFF	; 255
    30fc:	ce 01       	movw	r24, r28
    30fe:	01 96       	adiw	r24, 0x01	; 1
    3100:	5f d4       	rcall	.+2238   	; 0x39c0 <xTaskCheckForTimeOut>
    3102:	81 11       	cpse	r24, r1
    3104:	21 c0       	rjmp	.+66     	; 0x3148 <xQueueSemaphoreTake+0x110>
    3106:	c8 01       	movw	r24, r16
    3108:	21 dd       	rcall	.-1470   	; 0x2b4c <prvIsQueueEmpty>
    310a:	88 23       	and	r24, r24
    310c:	c9 f0       	breq	.+50     	; 0x3140 <xQueueSemaphoreTake+0x108>
    310e:	f8 01       	movw	r30, r16
    3110:	80 81       	ld	r24, Z
    3112:	91 81       	ldd	r25, Z+1	; 0x01
    3114:	89 2b       	or	r24, r25
    3116:	49 f4       	brne	.+18     	; 0x312a <xQueueSemaphoreTake+0xf2>
    3118:	0f b6       	in	r0, 0x3f	; 63
    311a:	f8 94       	cli
    311c:	0f 92       	push	r0
    311e:	84 81       	ldd	r24, Z+4	; 0x04
    3120:	95 81       	ldd	r25, Z+5	; 0x05
    3122:	8b d4       	rcall	.+2326   	; 0x3a3a <xTaskPriorityInherit>
    3124:	b8 2e       	mov	r11, r24
    3126:	0f 90       	pop	r0
    3128:	0f be       	out	0x3f, r0	; 63
    312a:	6c 81       	ldd	r22, Y+4	; 0x04
    312c:	7d 81       	ldd	r23, Y+5	; 0x05
    312e:	c7 01       	movw	r24, r14
    3130:	cb d3       	rcall	.+1942   	; 0x38c8 <vTaskPlaceOnEventList>
    3132:	c8 01       	movw	r24, r16
    3134:	8e dd       	rcall	.-1252   	; 0x2c52 <prvUnlockQueue>
    3136:	be d2       	rcall	.+1404   	; 0x36b4 <xTaskResumeAll>
    3138:	81 11       	cpse	r24, r1
    313a:	97 cf       	rjmp	.-210    	; 0x306a <xQueueSemaphoreTake+0x32>
    313c:	42 dc       	rcall	.-1916   	; 0x29c2 <vPortYield>
    313e:	95 cf       	rjmp	.-214    	; 0x306a <xQueueSemaphoreTake+0x32>
    3140:	c8 01       	movw	r24, r16
    3142:	87 dd       	rcall	.-1266   	; 0x2c52 <prvUnlockQueue>
    3144:	b7 d2       	rcall	.+1390   	; 0x36b4 <xTaskResumeAll>
    3146:	91 cf       	rjmp	.-222    	; 0x306a <xQueueSemaphoreTake+0x32>
    3148:	c8 01       	movw	r24, r16
    314a:	83 dd       	rcall	.-1274   	; 0x2c52 <prvUnlockQueue>
    314c:	b3 d2       	rcall	.+1382   	; 0x36b4 <xTaskResumeAll>
    314e:	c8 01       	movw	r24, r16
    3150:	fd dc       	rcall	.-1542   	; 0x2b4c <prvIsQueueEmpty>
    3152:	88 23       	and	r24, r24
    3154:	09 f4       	brne	.+2      	; 0x3158 <xQueueSemaphoreTake+0x120>
    3156:	89 cf       	rjmp	.-238    	; 0x306a <xQueueSemaphoreTake+0x32>
    3158:	bb 20       	and	r11, r11
    315a:	c9 f0       	breq	.+50     	; 0x318e <xQueueSemaphoreTake+0x156>
    315c:	0f b6       	in	r0, 0x3f	; 63
    315e:	f8 94       	cli
    3160:	0f 92       	push	r0
    3162:	f8 01       	movw	r30, r16
    3164:	81 89       	ldd	r24, Z+17	; 0x11
    3166:	88 23       	and	r24, r24
    3168:	39 f0       	breq	.+14     	; 0x3178 <xQueueSemaphoreTake+0x140>
    316a:	06 88       	ldd	r0, Z+22	; 0x16
    316c:	f7 89       	ldd	r31, Z+23	; 0x17
    316e:	e0 2d       	mov	r30, r0
    3170:	80 81       	ld	r24, Z
    3172:	64 e0       	ldi	r22, 0x04	; 4
    3174:	68 1b       	sub	r22, r24
    3176:	01 c0       	rjmp	.+2      	; 0x317a <xQueueSemaphoreTake+0x142>
    3178:	60 e0       	ldi	r22, 0x00	; 0
    317a:	d8 01       	movw	r26, r16
    317c:	14 96       	adiw	r26, 0x04	; 4
    317e:	8d 91       	ld	r24, X+
    3180:	9c 91       	ld	r25, X
    3182:	15 97       	sbiw	r26, 0x05	; 5
    3184:	0c d5       	rcall	.+2584   	; 0x3b9e <vTaskPriorityDisinheritAfterTimeout>
    3186:	0f 90       	pop	r0
    3188:	0f be       	out	0x3f, r0	; 63
    318a:	80 e0       	ldi	r24, 0x00	; 0
    318c:	01 c0       	rjmp	.+2      	; 0x3190 <xQueueSemaphoreTake+0x158>
    318e:	80 e0       	ldi	r24, 0x00	; 0
    3190:	0f 90       	pop	r0
    3192:	0f 90       	pop	r0
    3194:	0f 90       	pop	r0
    3196:	0f 90       	pop	r0
    3198:	0f 90       	pop	r0
    319a:	df 91       	pop	r29
    319c:	cf 91       	pop	r28
    319e:	1f 91       	pop	r17
    31a0:	0f 91       	pop	r16
    31a2:	ff 90       	pop	r15
    31a4:	ef 90       	pop	r14
    31a6:	df 90       	pop	r13
    31a8:	cf 90       	pop	r12
    31aa:	bf 90       	pop	r11
    31ac:	08 95       	ret

000031ae <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
    {
    31ae:	cf 93       	push	r28
    31b0:	df 93       	push	r29
    31b2:	ec 01       	movw	r28, r24
        will not actually cause the task to block, just place it on a blocked
        list.  It will not block until the scheduler is unlocked - at which
        time a yield will be performed.  If an item is added to the queue while
        the queue is locked, and the calling task blocks on the queue, then the
        calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    31b4:	0f b6       	in	r0, 0x3f	; 63
    31b6:	f8 94       	cli
    31b8:	0f 92       	push	r0
    31ba:	8d 8d       	ldd	r24, Y+29	; 0x1d
    31bc:	8f 3f       	cpi	r24, 0xFF	; 255
    31be:	09 f4       	brne	.+2      	; 0x31c2 <vQueueWaitForMessageRestricted+0x14>
    31c0:	1d 8e       	std	Y+29, r1	; 0x1d
    31c2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    31c4:	8f 3f       	cpi	r24, 0xFF	; 255
    31c6:	09 f4       	brne	.+2      	; 0x31ca <vQueueWaitForMessageRestricted+0x1c>
    31c8:	1e 8e       	std	Y+30, r1	; 0x1e
    31ca:	0f 90       	pop	r0
    31cc:	0f be       	out	0x3f, r0	; 63
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    31ce:	8a 8d       	ldd	r24, Y+26	; 0x1a
    31d0:	81 11       	cpse	r24, r1
    31d2:	03 c0       	rjmp	.+6      	; 0x31da <vQueueWaitForMessageRestricted+0x2c>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    31d4:	ce 01       	movw	r24, r28
    31d6:	41 96       	adiw	r24, 0x11	; 17
    31d8:	88 d3       	rcall	.+1808   	; 0x38ea <vTaskPlaceOnEventListRestricted>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
        prvUnlockQueue( pxQueue );
    31da:	ce 01       	movw	r24, r28
    31dc:	3a dd       	rcall	.-1420   	; 0x2c52 <prvUnlockQueue>
    }
    31de:	df 91       	pop	r29
    31e0:	cf 91       	pop	r28
    31e2:	08 95       	ret

000031e4 <prvResetNextTaskUnblockTime>:
    31e4:	e0 91 b6 0e 	lds	r30, 0x0EB6	; 0x800eb6 <pxDelayedTaskList>
    31e8:	f0 91 b7 0e 	lds	r31, 0x0EB7	; 0x800eb7 <pxDelayedTaskList+0x1>
    31ec:	80 81       	ld	r24, Z
    31ee:	81 11       	cpse	r24, r1
    31f0:	07 c0       	rjmp	.+14     	; 0x3200 <prvResetNextTaskUnblockTime+0x1c>
    31f2:	8f ef       	ldi	r24, 0xFF	; 255
    31f4:	9f ef       	ldi	r25, 0xFF	; 255
    31f6:	90 93 97 0e 	sts	0x0E97, r25	; 0x800e97 <xNextTaskUnblockTime+0x1>
    31fa:	80 93 96 0e 	sts	0x0E96, r24	; 0x800e96 <xNextTaskUnblockTime>
    31fe:	08 95       	ret
    3200:	e0 91 b6 0e 	lds	r30, 0x0EB6	; 0x800eb6 <pxDelayedTaskList>
    3204:	f0 91 b7 0e 	lds	r31, 0x0EB7	; 0x800eb7 <pxDelayedTaskList+0x1>
    3208:	05 80       	ldd	r0, Z+5	; 0x05
    320a:	f6 81       	ldd	r31, Z+6	; 0x06
    320c:	e0 2d       	mov	r30, r0
    320e:	06 80       	ldd	r0, Z+6	; 0x06
    3210:	f7 81       	ldd	r31, Z+7	; 0x07
    3212:	e0 2d       	mov	r30, r0
    3214:	82 81       	ldd	r24, Z+2	; 0x02
    3216:	93 81       	ldd	r25, Z+3	; 0x03
    3218:	90 93 97 0e 	sts	0x0E97, r25	; 0x800e97 <xNextTaskUnblockTime+0x1>
    321c:	80 93 96 0e 	sts	0x0E96, r24	; 0x800e96 <xNextTaskUnblockTime>
    3220:	08 95       	ret

00003222 <prvAddCurrentTaskToDelayedList>:
    3222:	0f 93       	push	r16
    3224:	1f 93       	push	r17
    3226:	cf 93       	push	r28
    3228:	df 93       	push	r29
    322a:	ec 01       	movw	r28, r24
    322c:	00 91 9e 0e 	lds	r16, 0x0E9E	; 0x800e9e <xTickCount>
    3230:	10 91 9f 0e 	lds	r17, 0x0E9F	; 0x800e9f <xTickCount+0x1>
    3234:	80 91 dc 0e 	lds	r24, 0x0EDC	; 0x800edc <pxCurrentTCB>
    3238:	90 91 dd 0e 	lds	r25, 0x0EDD	; 0x800edd <pxCurrentTCB+0x1>
    323c:	02 96       	adiw	r24, 0x02	; 2
    323e:	ec da       	rcall	.-2600   	; 0x2818 <uxListRemove>
    3240:	c0 0f       	add	r28, r16
    3242:	d1 1f       	adc	r29, r17
    3244:	e0 91 dc 0e 	lds	r30, 0x0EDC	; 0x800edc <pxCurrentTCB>
    3248:	f0 91 dd 0e 	lds	r31, 0x0EDD	; 0x800edd <pxCurrentTCB+0x1>
    324c:	d3 83       	std	Z+3, r29	; 0x03
    324e:	c2 83       	std	Z+2, r28	; 0x02
    3250:	c0 17       	cp	r28, r16
    3252:	d1 07       	cpc	r29, r17
    3254:	60 f4       	brcc	.+24     	; 0x326e <prvAddCurrentTaskToDelayedList+0x4c>
    3256:	60 91 dc 0e 	lds	r22, 0x0EDC	; 0x800edc <pxCurrentTCB>
    325a:	70 91 dd 0e 	lds	r23, 0x0EDD	; 0x800edd <pxCurrentTCB+0x1>
    325e:	80 91 b4 0e 	lds	r24, 0x0EB4	; 0x800eb4 <pxOverflowDelayedTaskList>
    3262:	90 91 b5 0e 	lds	r25, 0x0EB5	; 0x800eb5 <pxOverflowDelayedTaskList+0x1>
    3266:	6e 5f       	subi	r22, 0xFE	; 254
    3268:	7f 4f       	sbci	r23, 0xFF	; 255
    326a:	a5 da       	rcall	.-2742   	; 0x27b6 <vListInsert>
    326c:	16 c0       	rjmp	.+44     	; 0x329a <prvAddCurrentTaskToDelayedList+0x78>
    326e:	60 91 dc 0e 	lds	r22, 0x0EDC	; 0x800edc <pxCurrentTCB>
    3272:	70 91 dd 0e 	lds	r23, 0x0EDD	; 0x800edd <pxCurrentTCB+0x1>
    3276:	80 91 b6 0e 	lds	r24, 0x0EB6	; 0x800eb6 <pxDelayedTaskList>
    327a:	90 91 b7 0e 	lds	r25, 0x0EB7	; 0x800eb7 <pxDelayedTaskList+0x1>
    327e:	6e 5f       	subi	r22, 0xFE	; 254
    3280:	7f 4f       	sbci	r23, 0xFF	; 255
    3282:	99 da       	rcall	.-2766   	; 0x27b6 <vListInsert>
    3284:	80 91 96 0e 	lds	r24, 0x0E96	; 0x800e96 <xNextTaskUnblockTime>
    3288:	90 91 97 0e 	lds	r25, 0x0E97	; 0x800e97 <xNextTaskUnblockTime+0x1>
    328c:	c8 17       	cp	r28, r24
    328e:	d9 07       	cpc	r29, r25
    3290:	20 f4       	brcc	.+8      	; 0x329a <prvAddCurrentTaskToDelayedList+0x78>
    3292:	d0 93 97 0e 	sts	0x0E97, r29	; 0x800e97 <xNextTaskUnblockTime+0x1>
    3296:	c0 93 96 0e 	sts	0x0E96, r28	; 0x800e96 <xNextTaskUnblockTime>
    329a:	df 91       	pop	r29
    329c:	cf 91       	pop	r28
    329e:	1f 91       	pop	r17
    32a0:	0f 91       	pop	r16
    32a2:	08 95       	ret

000032a4 <xTaskCreateStatic>:
    32a4:	6f 92       	push	r6
    32a6:	7f 92       	push	r7
    32a8:	8f 92       	push	r8
    32aa:	9f 92       	push	r9
    32ac:	af 92       	push	r10
    32ae:	bf 92       	push	r11
    32b0:	cf 92       	push	r12
    32b2:	df 92       	push	r13
    32b4:	ef 92       	push	r14
    32b6:	ff 92       	push	r15
    32b8:	0f 93       	push	r16
    32ba:	cf 93       	push	r28
    32bc:	df 93       	push	r29
    32be:	c1 14       	cp	r12, r1
    32c0:	d1 04       	cpc	r13, r1
    32c2:	09 f4       	brne	.+2      	; 0x32c6 <xTaskCreateStatic+0x22>
    32c4:	cf c0       	rjmp	.+414    	; 0x3464 <xTaskCreateStatic+0x1c0>
    32c6:	e1 14       	cp	r14, r1
    32c8:	f1 04       	cpc	r15, r1
    32ca:	09 f4       	brne	.+2      	; 0x32ce <xTaskCreateStatic+0x2a>
    32cc:	ce c0       	rjmp	.+412    	; 0x346a <xTaskCreateStatic+0x1c6>
    32ce:	e6 01       	movw	r28, r12
    32d0:	59 01       	movw	r10, r18
    32d2:	3a 01       	movw	r6, r20
    32d4:	4b 01       	movw	r8, r22
    32d6:	6c 01       	movw	r12, r24
    32d8:	f8 8e       	std	Y+24, r15	; 0x18
    32da:	ef 8a       	std	Y+23, r14	; 0x17
    32dc:	65 ea       	ldi	r22, 0xA5	; 165
    32de:	70 e0       	ldi	r23, 0x00	; 0
    32e0:	c7 01       	movw	r24, r14
    32e2:	0e 94 fa 25 	call	0x4bf4	; 0x4bf4 <memset>
    32e6:	81 e0       	ldi	r24, 0x01	; 1
    32e8:	68 1a       	sub	r6, r24
    32ea:	71 08       	sbc	r7, r1
    32ec:	ef 88       	ldd	r14, Y+23	; 0x17
    32ee:	f8 8c       	ldd	r15, Y+24	; 0x18
    32f0:	e6 0c       	add	r14, r6
    32f2:	f7 1c       	adc	r15, r7
    32f4:	d4 01       	movw	r26, r8
    32f6:	8c 91       	ld	r24, X
    32f8:	89 8f       	std	Y+25, r24	; 0x19
    32fa:	8c 91       	ld	r24, X
    32fc:	88 23       	and	r24, r24
    32fe:	a1 f0       	breq	.+40     	; 0x3328 <xTaskCreateStatic+0x84>
    3300:	ae 01       	movw	r20, r28
    3302:	46 5e       	subi	r20, 0xE6	; 230
    3304:	5f 4f       	sbci	r21, 0xFF	; 255
    3306:	f4 01       	movw	r30, r8
    3308:	31 96       	adiw	r30, 0x01	; 1
    330a:	b8 e0       	ldi	r27, 0x08	; 8
    330c:	8b 0e       	add	r8, r27
    330e:	91 1c       	adc	r9, r1
    3310:	cf 01       	movw	r24, r30
    3312:	21 91       	ld	r18, Z+
    3314:	da 01       	movw	r26, r20
    3316:	2d 93       	st	X+, r18
    3318:	ad 01       	movw	r20, r26
    331a:	dc 01       	movw	r26, r24
    331c:	8c 91       	ld	r24, X
    331e:	88 23       	and	r24, r24
    3320:	19 f0       	breq	.+6      	; 0x3328 <xTaskCreateStatic+0x84>
    3322:	e8 15       	cp	r30, r8
    3324:	f9 05       	cpc	r31, r9
    3326:	a1 f7       	brne	.-24     	; 0x3310 <xTaskCreateStatic+0x6c>
    3328:	18 a2       	std	Y+32, r1	; 0x20
    332a:	04 30       	cpi	r16, 0x04	; 4
    332c:	08 f0       	brcs	.+2      	; 0x3330 <xTaskCreateStatic+0x8c>
    332e:	03 e0       	ldi	r16, 0x03	; 3
    3330:	0e 8b       	std	Y+22, r16	; 0x16
    3332:	09 a3       	std	Y+33, r16	; 0x21
    3334:	1a a2       	std	Y+34, r1	; 0x22
    3336:	4e 01       	movw	r8, r28
    3338:	b2 e0       	ldi	r27, 0x02	; 2
    333a:	8b 0e       	add	r8, r27
    333c:	91 1c       	adc	r9, r1
    333e:	c4 01       	movw	r24, r8
    3340:	15 da       	rcall	.-3030   	; 0x276c <vListInitialiseItem>
    3342:	ce 01       	movw	r24, r28
    3344:	0c 96       	adiw	r24, 0x0c	; 12
    3346:	12 da       	rcall	.-3036   	; 0x276c <vListInitialiseItem>
    3348:	d9 87       	std	Y+9, r29	; 0x09
    334a:	c8 87       	std	Y+8, r28	; 0x08
    334c:	84 e0       	ldi	r24, 0x04	; 4
    334e:	90 e0       	ldi	r25, 0x00	; 0
    3350:	80 1b       	sub	r24, r16
    3352:	91 09       	sbc	r25, r1
    3354:	9d 87       	std	Y+13, r25	; 0x0d
    3356:	8c 87       	std	Y+12, r24	; 0x0c
    3358:	db 8b       	std	Y+19, r29	; 0x13
    335a:	ca 8b       	std	Y+18, r28	; 0x12
    335c:	1c a2       	std	Y+36, r1	; 0x24
    335e:	1b a2       	std	Y+35, r1	; 0x23
    3360:	1d a2       	std	Y+37, r1	; 0x25
    3362:	1e a2       	std	Y+38, r1	; 0x26
    3364:	1f a2       	std	Y+39, r1	; 0x27
    3366:	18 a6       	std	Y+40, r1	; 0x28
    3368:	19 a6       	std	Y+41, r1	; 0x29
    336a:	a5 01       	movw	r20, r10
    336c:	b6 01       	movw	r22, r12
    336e:	c7 01       	movw	r24, r14
    3370:	7a da       	rcall	.-2828   	; 0x2866 <pxPortInitialiseStack>
    3372:	99 83       	std	Y+1, r25	; 0x01
    3374:	88 83       	st	Y, r24
    3376:	0f b6       	in	r0, 0x3f	; 63
    3378:	f8 94       	cli
    337a:	0f 92       	push	r0
    337c:	80 91 a0 0e 	lds	r24, 0x0EA0	; 0x800ea0 <uxCurrentNumberOfTasks>
    3380:	8f 5f       	subi	r24, 0xFF	; 255
    3382:	80 93 a0 0e 	sts	0x0EA0, r24	; 0x800ea0 <uxCurrentNumberOfTasks>
    3386:	80 91 dc 0e 	lds	r24, 0x0EDC	; 0x800edc <pxCurrentTCB>
    338a:	90 91 dd 0e 	lds	r25, 0x0EDD	; 0x800edd <pxCurrentTCB+0x1>
    338e:	89 2b       	or	r24, r25
    3390:	69 f5       	brne	.+90     	; 0x33ec <xTaskCreateStatic+0x148>
    3392:	d0 93 dd 0e 	sts	0x0EDD, r29	; 0x800edd <pxCurrentTCB+0x1>
    3396:	c0 93 dc 0e 	sts	0x0EDC, r28	; 0x800edc <pxCurrentTCB>
    339a:	80 91 a0 0e 	lds	r24, 0x0EA0	; 0x800ea0 <uxCurrentNumberOfTasks>
    339e:	81 30       	cpi	r24, 0x01	; 1
    33a0:	a9 f5       	brne	.+106    	; 0x340c <xTaskCreateStatic+0x168>
    33a2:	88 eb       	ldi	r24, 0xB8	; 184
    33a4:	9e e0       	ldi	r25, 0x0E	; 14
    33a6:	d4 d9       	rcall	.-3160   	; 0x2750 <vListInitialise>
    33a8:	81 ec       	ldi	r24, 0xC1	; 193
    33aa:	9e e0       	ldi	r25, 0x0E	; 14
    33ac:	d1 d9       	rcall	.-3166   	; 0x2750 <vListInitialise>
    33ae:	8a ec       	ldi	r24, 0xCA	; 202
    33b0:	9e e0       	ldi	r25, 0x0E	; 14
    33b2:	ce d9       	rcall	.-3172   	; 0x2750 <vListInitialise>
    33b4:	83 ed       	ldi	r24, 0xD3	; 211
    33b6:	9e e0       	ldi	r25, 0x0E	; 14
    33b8:	cb d9       	rcall	.-3178   	; 0x2750 <vListInitialise>
    33ba:	8c e8       	ldi	r24, 0x8C	; 140
    33bc:	9e e0       	ldi	r25, 0x0E	; 14
    33be:	c8 d9       	rcall	.-3184   	; 0x2750 <vListInitialise>
    33c0:	83 e8       	ldi	r24, 0x83	; 131
    33c2:	9e e0       	ldi	r25, 0x0E	; 14
    33c4:	c5 d9       	rcall	.-3190   	; 0x2750 <vListInitialise>
    33c6:	8b ea       	ldi	r24, 0xAB	; 171
    33c8:	9e e0       	ldi	r25, 0x0E	; 14
    33ca:	c2 d9       	rcall	.-3196   	; 0x2750 <vListInitialise>
    33cc:	82 ea       	ldi	r24, 0xA2	; 162
    33ce:	9e e0       	ldi	r25, 0x0E	; 14
    33d0:	bf d9       	rcall	.-3202   	; 0x2750 <vListInitialise>
    33d2:	8c e8       	ldi	r24, 0x8C	; 140
    33d4:	9e e0       	ldi	r25, 0x0E	; 14
    33d6:	90 93 b7 0e 	sts	0x0EB7, r25	; 0x800eb7 <pxDelayedTaskList+0x1>
    33da:	80 93 b6 0e 	sts	0x0EB6, r24	; 0x800eb6 <pxDelayedTaskList>
    33de:	83 e8       	ldi	r24, 0x83	; 131
    33e0:	9e e0       	ldi	r25, 0x0E	; 14
    33e2:	90 93 b5 0e 	sts	0x0EB5, r25	; 0x800eb5 <pxOverflowDelayedTaskList+0x1>
    33e6:	80 93 b4 0e 	sts	0x0EB4, r24	; 0x800eb4 <pxOverflowDelayedTaskList>
    33ea:	10 c0       	rjmp	.+32     	; 0x340c <xTaskCreateStatic+0x168>
    33ec:	80 91 9c 0e 	lds	r24, 0x0E9C	; 0x800e9c <xSchedulerRunning>
    33f0:	81 11       	cpse	r24, r1
    33f2:	0c c0       	rjmp	.+24     	; 0x340c <xTaskCreateStatic+0x168>
    33f4:	e0 91 dc 0e 	lds	r30, 0x0EDC	; 0x800edc <pxCurrentTCB>
    33f8:	f0 91 dd 0e 	lds	r31, 0x0EDD	; 0x800edd <pxCurrentTCB+0x1>
    33fc:	96 89       	ldd	r25, Z+22	; 0x16
    33fe:	8e 89       	ldd	r24, Y+22	; 0x16
    3400:	89 17       	cp	r24, r25
    3402:	20 f0       	brcs	.+8      	; 0x340c <xTaskCreateStatic+0x168>
    3404:	d0 93 dd 0e 	sts	0x0EDD, r29	; 0x800edd <pxCurrentTCB+0x1>
    3408:	c0 93 dc 0e 	sts	0x0EDC, r28	; 0x800edc <pxCurrentTCB>
    340c:	80 91 98 0e 	lds	r24, 0x0E98	; 0x800e98 <uxTaskNumber>
    3410:	8f 5f       	subi	r24, 0xFF	; 255
    3412:	80 93 98 0e 	sts	0x0E98, r24	; 0x800e98 <uxTaskNumber>
    3416:	8e 89       	ldd	r24, Y+22	; 0x16
    3418:	90 91 9d 0e 	lds	r25, 0x0E9D	; 0x800e9d <uxTopReadyPriority>
    341c:	98 17       	cp	r25, r24
    341e:	10 f4       	brcc	.+4      	; 0x3424 <xTaskCreateStatic+0x180>
    3420:	80 93 9d 0e 	sts	0x0E9D, r24	; 0x800e9d <uxTopReadyPriority>
    3424:	90 e0       	ldi	r25, 0x00	; 0
    3426:	9c 01       	movw	r18, r24
    3428:	22 0f       	add	r18, r18
    342a:	33 1f       	adc	r19, r19
    342c:	22 0f       	add	r18, r18
    342e:	33 1f       	adc	r19, r19
    3430:	22 0f       	add	r18, r18
    3432:	33 1f       	adc	r19, r19
    3434:	82 0f       	add	r24, r18
    3436:	93 1f       	adc	r25, r19
    3438:	b4 01       	movw	r22, r8
    343a:	88 54       	subi	r24, 0x48	; 72
    343c:	91 4f       	sbci	r25, 0xF1	; 241
    343e:	9a d9       	rcall	.-3276   	; 0x2774 <vListInsertEnd>
    3440:	0f 90       	pop	r0
    3442:	0f be       	out	0x3f, r0	; 63
    3444:	80 91 9c 0e 	lds	r24, 0x0E9C	; 0x800e9c <xSchedulerRunning>
    3448:	88 23       	and	r24, r24
    344a:	91 f0       	breq	.+36     	; 0x3470 <xTaskCreateStatic+0x1cc>
    344c:	e0 91 dc 0e 	lds	r30, 0x0EDC	; 0x800edc <pxCurrentTCB>
    3450:	f0 91 dd 0e 	lds	r31, 0x0EDD	; 0x800edd <pxCurrentTCB+0x1>
    3454:	96 89       	ldd	r25, Z+22	; 0x16
    3456:	8e 89       	ldd	r24, Y+22	; 0x16
    3458:	98 17       	cp	r25, r24
    345a:	68 f4       	brcc	.+26     	; 0x3476 <xTaskCreateStatic+0x1d2>
    345c:	b2 da       	rcall	.-2716   	; 0x29c2 <vPortYield>
    345e:	8c 2f       	mov	r24, r28
    3460:	9d 2f       	mov	r25, r29
    3462:	0b c0       	rjmp	.+22     	; 0x347a <xTaskCreateStatic+0x1d6>
    3464:	80 e0       	ldi	r24, 0x00	; 0
    3466:	90 e0       	ldi	r25, 0x00	; 0
    3468:	08 c0       	rjmp	.+16     	; 0x347a <xTaskCreateStatic+0x1d6>
    346a:	80 e0       	ldi	r24, 0x00	; 0
    346c:	90 e0       	ldi	r25, 0x00	; 0
    346e:	05 c0       	rjmp	.+10     	; 0x347a <xTaskCreateStatic+0x1d6>
    3470:	8c 2f       	mov	r24, r28
    3472:	9d 2f       	mov	r25, r29
    3474:	02 c0       	rjmp	.+4      	; 0x347a <xTaskCreateStatic+0x1d6>
    3476:	8c 2f       	mov	r24, r28
    3478:	9d 2f       	mov	r25, r29
    347a:	df 91       	pop	r29
    347c:	cf 91       	pop	r28
    347e:	0f 91       	pop	r16
    3480:	ff 90       	pop	r15
    3482:	ef 90       	pop	r14
    3484:	df 90       	pop	r13
    3486:	cf 90       	pop	r12
    3488:	bf 90       	pop	r11
    348a:	af 90       	pop	r10
    348c:	9f 90       	pop	r9
    348e:	8f 90       	pop	r8
    3490:	7f 90       	pop	r7
    3492:	6f 90       	pop	r6
    3494:	08 95       	ret

00003496 <vTaskStartScheduler>:
    3496:	cf 92       	push	r12
    3498:	df 92       	push	r13
    349a:	ef 92       	push	r14
    349c:	ff 92       	push	r15
    349e:	0f 93       	push	r16
    34a0:	cf 93       	push	r28
    34a2:	df 93       	push	r29
    34a4:	00 d0       	rcall	.+0      	; 0x34a6 <vTaskStartScheduler+0x10>
    34a6:	00 d0       	rcall	.+0      	; 0x34a8 <vTaskStartScheduler+0x12>
    34a8:	cd b7       	in	r28, 0x3d	; 61
    34aa:	de b7       	in	r29, 0x3e	; 62
    34ac:	1e 82       	std	Y+6, r1	; 0x06
    34ae:	1d 82       	std	Y+5, r1	; 0x05
    34b0:	1c 82       	std	Y+4, r1	; 0x04
    34b2:	1b 82       	std	Y+3, r1	; 0x03
    34b4:	ae 01       	movw	r20, r28
    34b6:	4f 5f       	subi	r20, 0xFF	; 255
    34b8:	5f 4f       	sbci	r21, 0xFF	; 255
    34ba:	be 01       	movw	r22, r28
    34bc:	6d 5f       	subi	r22, 0xFD	; 253
    34be:	7f 4f       	sbci	r23, 0xFF	; 255
    34c0:	ce 01       	movw	r24, r28
    34c2:	05 96       	adiw	r24, 0x05	; 5
    34c4:	25 d9       	rcall	.-3510   	; 0x2710 <vApplicationGetIdleTaskMemory>
    34c6:	cd 80       	ldd	r12, Y+5	; 0x05
    34c8:	de 80       	ldd	r13, Y+6	; 0x06
    34ca:	eb 80       	ldd	r14, Y+3	; 0x03
    34cc:	fc 80       	ldd	r15, Y+4	; 0x04
    34ce:	49 81       	ldd	r20, Y+1	; 0x01
    34d0:	5a 81       	ldd	r21, Y+2	; 0x02
    34d2:	00 e0       	ldi	r16, 0x00	; 0
    34d4:	20 e0       	ldi	r18, 0x00	; 0
    34d6:	30 e0       	ldi	r19, 0x00	; 0
    34d8:	67 e2       	ldi	r22, 0x27	; 39
    34da:	73 e0       	ldi	r23, 0x03	; 3
    34dc:	83 eb       	ldi	r24, 0xB3	; 179
    34de:	90 e0       	ldi	r25, 0x00	; 0
    34e0:	e1 de       	rcall	.-574    	; 0x32a4 <xTaskCreateStatic>
    34e2:	89 2b       	or	r24, r25
    34e4:	91 f0       	breq	.+36     	; 0x350a <vTaskStartScheduler+0x74>
    34e6:	1a d4       	rcall	.+2100   	; 0x3d1c <xTimerCreateTimerTask>
    34e8:	81 30       	cpi	r24, 0x01	; 1
    34ea:	79 f4       	brne	.+30     	; 0x350a <vTaskStartScheduler+0x74>
    34ec:	f8 94       	cli
    34ee:	8f ef       	ldi	r24, 0xFF	; 255
    34f0:	9f ef       	ldi	r25, 0xFF	; 255
    34f2:	90 93 97 0e 	sts	0x0E97, r25	; 0x800e97 <xNextTaskUnblockTime+0x1>
    34f6:	80 93 96 0e 	sts	0x0E96, r24	; 0x800e96 <xNextTaskUnblockTime>
    34fa:	81 e0       	ldi	r24, 0x01	; 1
    34fc:	80 93 9c 0e 	sts	0x0E9C, r24	; 0x800e9c <xSchedulerRunning>
    3500:	10 92 9f 0e 	sts	0x0E9F, r1	; 0x800e9f <xTickCount+0x1>
    3504:	10 92 9e 0e 	sts	0x0E9E, r1	; 0x800e9e <xTickCount>
    3508:	20 da       	rcall	.-3008   	; 0x294a <xPortStartScheduler>
    350a:	26 96       	adiw	r28, 0x06	; 6
    350c:	0f b6       	in	r0, 0x3f	; 63
    350e:	f8 94       	cli
    3510:	de bf       	out	0x3e, r29	; 62
    3512:	0f be       	out	0x3f, r0	; 63
    3514:	cd bf       	out	0x3d, r28	; 61
    3516:	df 91       	pop	r29
    3518:	cf 91       	pop	r28
    351a:	0f 91       	pop	r16
    351c:	ff 90       	pop	r15
    351e:	ef 90       	pop	r14
    3520:	df 90       	pop	r13
    3522:	cf 90       	pop	r12
    3524:	08 95       	ret

00003526 <vTaskSuspendAll>:
    3526:	80 91 95 0e 	lds	r24, 0x0E95	; 0x800e95 <uxSchedulerSuspended>
    352a:	8f 5f       	subi	r24, 0xFF	; 255
    352c:	80 93 95 0e 	sts	0x0E95, r24	; 0x800e95 <uxSchedulerSuspended>
    3530:	08 95       	ret

00003532 <xTaskGetTickCount>:
    3532:	0f b6       	in	r0, 0x3f	; 63
    3534:	f8 94       	cli
    3536:	0f 92       	push	r0
    3538:	80 91 9e 0e 	lds	r24, 0x0E9E	; 0x800e9e <xTickCount>
    353c:	90 91 9f 0e 	lds	r25, 0x0E9F	; 0x800e9f <xTickCount+0x1>
    3540:	0f 90       	pop	r0
    3542:	0f be       	out	0x3f, r0	; 63
    3544:	08 95       	ret

00003546 <xTaskIncrementTick>:
    3546:	cf 92       	push	r12
    3548:	df 92       	push	r13
    354a:	ef 92       	push	r14
    354c:	ff 92       	push	r15
    354e:	0f 93       	push	r16
    3550:	1f 93       	push	r17
    3552:	cf 93       	push	r28
    3554:	df 93       	push	r29
    3556:	80 91 95 0e 	lds	r24, 0x0E95	; 0x800e95 <uxSchedulerSuspended>
    355a:	81 11       	cpse	r24, r1
    355c:	95 c0       	rjmp	.+298    	; 0x3688 <xTaskIncrementTick+0x142>
    355e:	e0 90 9e 0e 	lds	r14, 0x0E9E	; 0x800e9e <xTickCount>
    3562:	f0 90 9f 0e 	lds	r15, 0x0E9F	; 0x800e9f <xTickCount+0x1>
    3566:	8f ef       	ldi	r24, 0xFF	; 255
    3568:	e8 1a       	sub	r14, r24
    356a:	f8 0a       	sbc	r15, r24
    356c:	f0 92 9f 0e 	sts	0x0E9F, r15	; 0x800e9f <xTickCount+0x1>
    3570:	e0 92 9e 0e 	sts	0x0E9E, r14	; 0x800e9e <xTickCount>
    3574:	e1 14       	cp	r14, r1
    3576:	f1 04       	cpc	r15, r1
    3578:	b1 f4       	brne	.+44     	; 0x35a6 <xTaskIncrementTick+0x60>
    357a:	80 91 b6 0e 	lds	r24, 0x0EB6	; 0x800eb6 <pxDelayedTaskList>
    357e:	90 91 b7 0e 	lds	r25, 0x0EB7	; 0x800eb7 <pxDelayedTaskList+0x1>
    3582:	20 91 b4 0e 	lds	r18, 0x0EB4	; 0x800eb4 <pxOverflowDelayedTaskList>
    3586:	30 91 b5 0e 	lds	r19, 0x0EB5	; 0x800eb5 <pxOverflowDelayedTaskList+0x1>
    358a:	30 93 b7 0e 	sts	0x0EB7, r19	; 0x800eb7 <pxDelayedTaskList+0x1>
    358e:	20 93 b6 0e 	sts	0x0EB6, r18	; 0x800eb6 <pxDelayedTaskList>
    3592:	90 93 b5 0e 	sts	0x0EB5, r25	; 0x800eb5 <pxOverflowDelayedTaskList+0x1>
    3596:	80 93 b4 0e 	sts	0x0EB4, r24	; 0x800eb4 <pxOverflowDelayedTaskList>
    359a:	80 91 99 0e 	lds	r24, 0x0E99	; 0x800e99 <xNumOfOverflows>
    359e:	8f 5f       	subi	r24, 0xFF	; 255
    35a0:	80 93 99 0e 	sts	0x0E99, r24	; 0x800e99 <xNumOfOverflows>
    35a4:	1f de       	rcall	.-962    	; 0x31e4 <prvResetNextTaskUnblockTime>
    35a6:	80 91 96 0e 	lds	r24, 0x0E96	; 0x800e96 <xNextTaskUnblockTime>
    35aa:	90 91 97 0e 	lds	r25, 0x0E97	; 0x800e97 <xNextTaskUnblockTime+0x1>
    35ae:	e8 16       	cp	r14, r24
    35b0:	f9 06       	cpc	r15, r25
    35b2:	10 f4       	brcc	.+4      	; 0x35b8 <xTaskIncrementTick+0x72>
    35b4:	d1 2c       	mov	r13, r1
    35b6:	50 c0       	rjmp	.+160    	; 0x3658 <xTaskIncrementTick+0x112>
    35b8:	d1 2c       	mov	r13, r1
    35ba:	cc 24       	eor	r12, r12
    35bc:	c3 94       	inc	r12
    35be:	e0 91 b6 0e 	lds	r30, 0x0EB6	; 0x800eb6 <pxDelayedTaskList>
    35c2:	f0 91 b7 0e 	lds	r31, 0x0EB7	; 0x800eb7 <pxDelayedTaskList+0x1>
    35c6:	80 81       	ld	r24, Z
    35c8:	81 11       	cpse	r24, r1
    35ca:	07 c0       	rjmp	.+14     	; 0x35da <xTaskIncrementTick+0x94>
    35cc:	8f ef       	ldi	r24, 0xFF	; 255
    35ce:	9f ef       	ldi	r25, 0xFF	; 255
    35d0:	90 93 97 0e 	sts	0x0E97, r25	; 0x800e97 <xNextTaskUnblockTime+0x1>
    35d4:	80 93 96 0e 	sts	0x0E96, r24	; 0x800e96 <xNextTaskUnblockTime>
    35d8:	3f c0       	rjmp	.+126    	; 0x3658 <xTaskIncrementTick+0x112>
    35da:	e0 91 b6 0e 	lds	r30, 0x0EB6	; 0x800eb6 <pxDelayedTaskList>
    35de:	f0 91 b7 0e 	lds	r31, 0x0EB7	; 0x800eb7 <pxDelayedTaskList+0x1>
    35e2:	05 80       	ldd	r0, Z+5	; 0x05
    35e4:	f6 81       	ldd	r31, Z+6	; 0x06
    35e6:	e0 2d       	mov	r30, r0
    35e8:	c6 81       	ldd	r28, Z+6	; 0x06
    35ea:	d7 81       	ldd	r29, Z+7	; 0x07
    35ec:	8a 81       	ldd	r24, Y+2	; 0x02
    35ee:	9b 81       	ldd	r25, Y+3	; 0x03
    35f0:	e8 16       	cp	r14, r24
    35f2:	f9 06       	cpc	r15, r25
    35f4:	28 f4       	brcc	.+10     	; 0x3600 <xTaskIncrementTick+0xba>
    35f6:	90 93 97 0e 	sts	0x0E97, r25	; 0x800e97 <xNextTaskUnblockTime+0x1>
    35fa:	80 93 96 0e 	sts	0x0E96, r24	; 0x800e96 <xNextTaskUnblockTime>
    35fe:	2c c0       	rjmp	.+88     	; 0x3658 <xTaskIncrementTick+0x112>
    3600:	8e 01       	movw	r16, r28
    3602:	0e 5f       	subi	r16, 0xFE	; 254
    3604:	1f 4f       	sbci	r17, 0xFF	; 255
    3606:	c8 01       	movw	r24, r16
    3608:	07 d9       	rcall	.-3570   	; 0x2818 <uxListRemove>
    360a:	8c 89       	ldd	r24, Y+20	; 0x14
    360c:	9d 89       	ldd	r25, Y+21	; 0x15
    360e:	89 2b       	or	r24, r25
    3610:	19 f0       	breq	.+6      	; 0x3618 <xTaskIncrementTick+0xd2>
    3612:	ce 01       	movw	r24, r28
    3614:	0c 96       	adiw	r24, 0x0c	; 12
    3616:	00 d9       	rcall	.-3584   	; 0x2818 <uxListRemove>
    3618:	8e 89       	ldd	r24, Y+22	; 0x16
    361a:	90 91 9d 0e 	lds	r25, 0x0E9D	; 0x800e9d <uxTopReadyPriority>
    361e:	98 17       	cp	r25, r24
    3620:	10 f4       	brcc	.+4      	; 0x3626 <xTaskIncrementTick+0xe0>
    3622:	80 93 9d 0e 	sts	0x0E9D, r24	; 0x800e9d <uxTopReadyPriority>
    3626:	90 e0       	ldi	r25, 0x00	; 0
    3628:	9c 01       	movw	r18, r24
    362a:	22 0f       	add	r18, r18
    362c:	33 1f       	adc	r19, r19
    362e:	22 0f       	add	r18, r18
    3630:	33 1f       	adc	r19, r19
    3632:	22 0f       	add	r18, r18
    3634:	33 1f       	adc	r19, r19
    3636:	82 0f       	add	r24, r18
    3638:	93 1f       	adc	r25, r19
    363a:	b8 01       	movw	r22, r16
    363c:	88 54       	subi	r24, 0x48	; 72
    363e:	91 4f       	sbci	r25, 0xF1	; 241
    3640:	99 d8       	rcall	.-3790   	; 0x2774 <vListInsertEnd>
    3642:	e0 91 dc 0e 	lds	r30, 0x0EDC	; 0x800edc <pxCurrentTCB>
    3646:	f0 91 dd 0e 	lds	r31, 0x0EDD	; 0x800edd <pxCurrentTCB+0x1>
    364a:	9e 89       	ldd	r25, Y+22	; 0x16
    364c:	86 89       	ldd	r24, Z+22	; 0x16
    364e:	98 17       	cp	r25, r24
    3650:	08 f4       	brcc	.+2      	; 0x3654 <xTaskIncrementTick+0x10e>
    3652:	b5 cf       	rjmp	.-150    	; 0x35be <xTaskIncrementTick+0x78>
    3654:	dc 2c       	mov	r13, r12
    3656:	b3 cf       	rjmp	.-154    	; 0x35be <xTaskIncrementTick+0x78>
    3658:	e0 91 dc 0e 	lds	r30, 0x0EDC	; 0x800edc <pxCurrentTCB>
    365c:	f0 91 dd 0e 	lds	r31, 0x0EDD	; 0x800edd <pxCurrentTCB+0x1>
    3660:	86 89       	ldd	r24, Z+22	; 0x16
    3662:	90 e0       	ldi	r25, 0x00	; 0
    3664:	fc 01       	movw	r30, r24
    3666:	ee 0f       	add	r30, r30
    3668:	ff 1f       	adc	r31, r31
    366a:	ee 0f       	add	r30, r30
    366c:	ff 1f       	adc	r31, r31
    366e:	ee 0f       	add	r30, r30
    3670:	ff 1f       	adc	r31, r31
    3672:	8e 0f       	add	r24, r30
    3674:	9f 1f       	adc	r25, r31
    3676:	fc 01       	movw	r30, r24
    3678:	e8 54       	subi	r30, 0x48	; 72
    367a:	f1 4f       	sbci	r31, 0xF1	; 241
    367c:	80 81       	ld	r24, Z
    367e:	82 30       	cpi	r24, 0x02	; 2
    3680:	48 f0       	brcs	.+18     	; 0x3694 <xTaskIncrementTick+0x14e>
    3682:	dd 24       	eor	r13, r13
    3684:	d3 94       	inc	r13
    3686:	06 c0       	rjmp	.+12     	; 0x3694 <xTaskIncrementTick+0x14e>
    3688:	80 91 9b 0e 	lds	r24, 0x0E9B	; 0x800e9b <uxPendedTicks>
    368c:	8f 5f       	subi	r24, 0xFF	; 255
    368e:	80 93 9b 0e 	sts	0x0E9B, r24	; 0x800e9b <uxPendedTicks>
    3692:	d1 2c       	mov	r13, r1
    3694:	80 91 9a 0e 	lds	r24, 0x0E9A	; 0x800e9a <xYieldPending>
    3698:	88 23       	and	r24, r24
    369a:	11 f0       	breq	.+4      	; 0x36a0 <xTaskIncrementTick+0x15a>
    369c:	dd 24       	eor	r13, r13
    369e:	d3 94       	inc	r13
    36a0:	8d 2d       	mov	r24, r13
    36a2:	df 91       	pop	r29
    36a4:	cf 91       	pop	r28
    36a6:	1f 91       	pop	r17
    36a8:	0f 91       	pop	r16
    36aa:	ff 90       	pop	r15
    36ac:	ef 90       	pop	r14
    36ae:	df 90       	pop	r13
    36b0:	cf 90       	pop	r12
    36b2:	08 95       	ret

000036b4 <xTaskResumeAll>:
    36b4:	df 92       	push	r13
    36b6:	ef 92       	push	r14
    36b8:	ff 92       	push	r15
    36ba:	0f 93       	push	r16
    36bc:	1f 93       	push	r17
    36be:	cf 93       	push	r28
    36c0:	df 93       	push	r29
    36c2:	0f b6       	in	r0, 0x3f	; 63
    36c4:	f8 94       	cli
    36c6:	0f 92       	push	r0
    36c8:	80 91 95 0e 	lds	r24, 0x0E95	; 0x800e95 <uxSchedulerSuspended>
    36cc:	81 50       	subi	r24, 0x01	; 1
    36ce:	80 93 95 0e 	sts	0x0E95, r24	; 0x800e95 <uxSchedulerSuspended>
    36d2:	80 91 95 0e 	lds	r24, 0x0E95	; 0x800e95 <uxSchedulerSuspended>
    36d6:	81 11       	cpse	r24, r1
    36d8:	59 c0       	rjmp	.+178    	; 0x378c <xTaskResumeAll+0xd8>
    36da:	80 91 a0 0e 	lds	r24, 0x0EA0	; 0x800ea0 <uxCurrentNumberOfTasks>
    36de:	81 11       	cpse	r24, r1
    36e0:	30 c0       	rjmp	.+96     	; 0x3742 <xTaskResumeAll+0x8e>
    36e2:	57 c0       	rjmp	.+174    	; 0x3792 <xTaskResumeAll+0xde>
    36e4:	d7 01       	movw	r26, r14
    36e6:	15 96       	adiw	r26, 0x05	; 5
    36e8:	ed 91       	ld	r30, X+
    36ea:	fc 91       	ld	r31, X
    36ec:	16 97       	sbiw	r26, 0x06	; 6
    36ee:	c6 81       	ldd	r28, Z+6	; 0x06
    36f0:	d7 81       	ldd	r29, Z+7	; 0x07
    36f2:	ce 01       	movw	r24, r28
    36f4:	0c 96       	adiw	r24, 0x0c	; 12
    36f6:	90 d8       	rcall	.-3808   	; 0x2818 <uxListRemove>
    36f8:	8e 01       	movw	r16, r28
    36fa:	0e 5f       	subi	r16, 0xFE	; 254
    36fc:	1f 4f       	sbci	r17, 0xFF	; 255
    36fe:	c8 01       	movw	r24, r16
    3700:	8b d8       	rcall	.-3818   	; 0x2818 <uxListRemove>
    3702:	8e 89       	ldd	r24, Y+22	; 0x16
    3704:	90 91 9d 0e 	lds	r25, 0x0E9D	; 0x800e9d <uxTopReadyPriority>
    3708:	98 17       	cp	r25, r24
    370a:	10 f4       	brcc	.+4      	; 0x3710 <xTaskResumeAll+0x5c>
    370c:	80 93 9d 0e 	sts	0x0E9D, r24	; 0x800e9d <uxTopReadyPriority>
    3710:	90 e0       	ldi	r25, 0x00	; 0
    3712:	9c 01       	movw	r18, r24
    3714:	22 0f       	add	r18, r18
    3716:	33 1f       	adc	r19, r19
    3718:	22 0f       	add	r18, r18
    371a:	33 1f       	adc	r19, r19
    371c:	22 0f       	add	r18, r18
    371e:	33 1f       	adc	r19, r19
    3720:	82 0f       	add	r24, r18
    3722:	93 1f       	adc	r25, r19
    3724:	b8 01       	movw	r22, r16
    3726:	88 54       	subi	r24, 0x48	; 72
    3728:	91 4f       	sbci	r25, 0xF1	; 241
    372a:	24 d8       	rcall	.-4024   	; 0x2774 <vListInsertEnd>
    372c:	e0 91 dc 0e 	lds	r30, 0x0EDC	; 0x800edc <pxCurrentTCB>
    3730:	f0 91 dd 0e 	lds	r31, 0x0EDD	; 0x800edd <pxCurrentTCB+0x1>
    3734:	9e 89       	ldd	r25, Y+22	; 0x16
    3736:	86 89       	ldd	r24, Z+22	; 0x16
    3738:	98 17       	cp	r25, r24
    373a:	68 f0       	brcs	.+26     	; 0x3756 <xTaskResumeAll+0xa2>
    373c:	d0 92 9a 0e 	sts	0x0E9A, r13	; 0x800e9a <xYieldPending>
    3740:	0a c0       	rjmp	.+20     	; 0x3756 <xTaskResumeAll+0xa2>
    3742:	c0 e0       	ldi	r28, 0x00	; 0
    3744:	d0 e0       	ldi	r29, 0x00	; 0
    3746:	0f 2e       	mov	r0, r31
    3748:	fb ea       	ldi	r31, 0xAB	; 171
    374a:	ef 2e       	mov	r14, r31
    374c:	fe e0       	ldi	r31, 0x0E	; 14
    374e:	ff 2e       	mov	r15, r31
    3750:	f0 2d       	mov	r31, r0
    3752:	dd 24       	eor	r13, r13
    3754:	d3 94       	inc	r13
    3756:	f7 01       	movw	r30, r14
    3758:	80 81       	ld	r24, Z
    375a:	81 11       	cpse	r24, r1
    375c:	c3 cf       	rjmp	.-122    	; 0x36e4 <xTaskResumeAll+0x30>
    375e:	cd 2b       	or	r28, r29
    3760:	09 f0       	breq	.+2      	; 0x3764 <xTaskResumeAll+0xb0>
    3762:	40 dd       	rcall	.-1408   	; 0x31e4 <prvResetNextTaskUnblockTime>
    3764:	c0 91 9b 0e 	lds	r28, 0x0E9B	; 0x800e9b <uxPendedTicks>
    3768:	cc 23       	and	r28, r28
    376a:	49 f0       	breq	.+18     	; 0x377e <xTaskResumeAll+0xca>
    376c:	d1 e0       	ldi	r29, 0x01	; 1
    376e:	eb de       	rcall	.-554    	; 0x3546 <xTaskIncrementTick>
    3770:	81 11       	cpse	r24, r1
    3772:	d0 93 9a 0e 	sts	0x0E9A, r29	; 0x800e9a <xYieldPending>
    3776:	c1 50       	subi	r28, 0x01	; 1
    3778:	d1 f7       	brne	.-12     	; 0x376e <xTaskResumeAll+0xba>
    377a:	10 92 9b 0e 	sts	0x0E9B, r1	; 0x800e9b <uxPendedTicks>
    377e:	80 91 9a 0e 	lds	r24, 0x0E9A	; 0x800e9a <xYieldPending>
    3782:	88 23       	and	r24, r24
    3784:	29 f0       	breq	.+10     	; 0x3790 <xTaskResumeAll+0xdc>
    3786:	1d d9       	rcall	.-3526   	; 0x29c2 <vPortYield>
    3788:	81 e0       	ldi	r24, 0x01	; 1
    378a:	03 c0       	rjmp	.+6      	; 0x3792 <xTaskResumeAll+0xde>
    378c:	80 e0       	ldi	r24, 0x00	; 0
    378e:	01 c0       	rjmp	.+2      	; 0x3792 <xTaskResumeAll+0xde>
    3790:	80 e0       	ldi	r24, 0x00	; 0
    3792:	0f 90       	pop	r0
    3794:	0f be       	out	0x3f, r0	; 63
    3796:	df 91       	pop	r29
    3798:	cf 91       	pop	r28
    379a:	1f 91       	pop	r17
    379c:	0f 91       	pop	r16
    379e:	ff 90       	pop	r15
    37a0:	ef 90       	pop	r14
    37a2:	df 90       	pop	r13
    37a4:	08 95       	ret

000037a6 <vTaskDelay>:
    37a6:	cf 93       	push	r28
    37a8:	df 93       	push	r29
    37aa:	ec 01       	movw	r28, r24
    37ac:	89 2b       	or	r24, r25
    37ae:	39 f0       	breq	.+14     	; 0x37be <vTaskDelay+0x18>
    37b0:	ba de       	rcall	.-652    	; 0x3526 <vTaskSuspendAll>
    37b2:	60 e0       	ldi	r22, 0x00	; 0
    37b4:	ce 01       	movw	r24, r28
    37b6:	35 dd       	rcall	.-1430   	; 0x3222 <prvAddCurrentTaskToDelayedList>
    37b8:	7d df       	rcall	.-262    	; 0x36b4 <xTaskResumeAll>
    37ba:	81 11       	cpse	r24, r1
    37bc:	01 c0       	rjmp	.+2      	; 0x37c0 <vTaskDelay+0x1a>
    37be:	01 d9       	rcall	.-3582   	; 0x29c2 <vPortYield>
    37c0:	df 91       	pop	r29
    37c2:	cf 91       	pop	r28
    37c4:	08 95       	ret

000037c6 <vTaskSwitchContext>:
    37c6:	80 91 95 0e 	lds	r24, 0x0E95	; 0x800e95 <uxSchedulerSuspended>
    37ca:	88 23       	and	r24, r24
    37cc:	21 f0       	breq	.+8      	; 0x37d6 <vTaskSwitchContext+0x10>
    37ce:	81 e0       	ldi	r24, 0x01	; 1
    37d0:	80 93 9a 0e 	sts	0x0E9A, r24	; 0x800e9a <xYieldPending>
    37d4:	08 95       	ret
    37d6:	10 92 9a 0e 	sts	0x0E9A, r1	; 0x800e9a <xYieldPending>
    37da:	a0 91 dc 0e 	lds	r26, 0x0EDC	; 0x800edc <pxCurrentTCB>
    37de:	b0 91 dd 0e 	lds	r27, 0x0EDD	; 0x800edd <pxCurrentTCB+0x1>
    37e2:	e0 91 dc 0e 	lds	r30, 0x0EDC	; 0x800edc <pxCurrentTCB>
    37e6:	f0 91 dd 0e 	lds	r31, 0x0EDD	; 0x800edd <pxCurrentTCB+0x1>
    37ea:	2d 91       	ld	r18, X+
    37ec:	3c 91       	ld	r19, X
    37ee:	87 89       	ldd	r24, Z+23	; 0x17
    37f0:	90 8d       	ldd	r25, Z+24	; 0x18
    37f2:	82 17       	cp	r24, r18
    37f4:	93 07       	cpc	r25, r19
    37f6:	60 f0       	brcs	.+24     	; 0x3810 <vTaskSwitchContext+0x4a>
    37f8:	60 91 dc 0e 	lds	r22, 0x0EDC	; 0x800edc <pxCurrentTCB>
    37fc:	70 91 dd 0e 	lds	r23, 0x0EDD	; 0x800edd <pxCurrentTCB+0x1>
    3800:	80 91 dc 0e 	lds	r24, 0x0EDC	; 0x800edc <pxCurrentTCB>
    3804:	90 91 dd 0e 	lds	r25, 0x0EDD	; 0x800edd <pxCurrentTCB+0x1>
    3808:	67 5e       	subi	r22, 0xE7	; 231
    380a:	7f 4f       	sbci	r23, 0xFF	; 255
    380c:	0e 94 7b 13 	call	0x26f6	; 0x26f6 <vApplicationStackOverflowHook>
    3810:	20 91 9d 0e 	lds	r18, 0x0E9D	; 0x800e9d <uxTopReadyPriority>
    3814:	82 2f       	mov	r24, r18
    3816:	90 e0       	ldi	r25, 0x00	; 0
    3818:	fc 01       	movw	r30, r24
    381a:	ee 0f       	add	r30, r30
    381c:	ff 1f       	adc	r31, r31
    381e:	ee 0f       	add	r30, r30
    3820:	ff 1f       	adc	r31, r31
    3822:	ee 0f       	add	r30, r30
    3824:	ff 1f       	adc	r31, r31
    3826:	e8 0f       	add	r30, r24
    3828:	f9 1f       	adc	r31, r25
    382a:	e8 54       	subi	r30, 0x48	; 72
    382c:	f1 4f       	sbci	r31, 0xF1	; 241
    382e:	30 81       	ld	r19, Z
    3830:	31 11       	cpse	r19, r1
    3832:	11 c0       	rjmp	.+34     	; 0x3856 <vTaskSwitchContext+0x90>
    3834:	21 50       	subi	r18, 0x01	; 1
    3836:	82 2f       	mov	r24, r18
    3838:	90 e0       	ldi	r25, 0x00	; 0
    383a:	fc 01       	movw	r30, r24
    383c:	ee 0f       	add	r30, r30
    383e:	ff 1f       	adc	r31, r31
    3840:	ee 0f       	add	r30, r30
    3842:	ff 1f       	adc	r31, r31
    3844:	ee 0f       	add	r30, r30
    3846:	ff 1f       	adc	r31, r31
    3848:	e8 0f       	add	r30, r24
    384a:	f9 1f       	adc	r31, r25
    384c:	e8 54       	subi	r30, 0x48	; 72
    384e:	f1 4f       	sbci	r31, 0xF1	; 241
    3850:	30 81       	ld	r19, Z
    3852:	33 23       	and	r19, r19
    3854:	79 f3       	breq	.-34     	; 0x3834 <vTaskSwitchContext+0x6e>
    3856:	ac 01       	movw	r20, r24
    3858:	44 0f       	add	r20, r20
    385a:	55 1f       	adc	r21, r21
    385c:	44 0f       	add	r20, r20
    385e:	55 1f       	adc	r21, r21
    3860:	44 0f       	add	r20, r20
    3862:	55 1f       	adc	r21, r21
    3864:	48 0f       	add	r20, r24
    3866:	59 1f       	adc	r21, r25
    3868:	da 01       	movw	r26, r20
    386a:	a8 54       	subi	r26, 0x48	; 72
    386c:	b1 4f       	sbci	r27, 0xF1	; 241
    386e:	11 96       	adiw	r26, 0x01	; 1
    3870:	ed 91       	ld	r30, X+
    3872:	fc 91       	ld	r31, X
    3874:	12 97       	sbiw	r26, 0x02	; 2
    3876:	02 80       	ldd	r0, Z+2	; 0x02
    3878:	f3 81       	ldd	r31, Z+3	; 0x03
    387a:	e0 2d       	mov	r30, r0
    387c:	12 96       	adiw	r26, 0x02	; 2
    387e:	fc 93       	st	X, r31
    3880:	ee 93       	st	-X, r30
    3882:	11 97       	sbiw	r26, 0x01	; 1
    3884:	45 54       	subi	r20, 0x45	; 69
    3886:	51 4f       	sbci	r21, 0xF1	; 241
    3888:	e4 17       	cp	r30, r20
    388a:	f5 07       	cpc	r31, r21
    388c:	29 f4       	brne	.+10     	; 0x3898 <vTaskSwitchContext+0xd2>
    388e:	42 81       	ldd	r20, Z+2	; 0x02
    3890:	53 81       	ldd	r21, Z+3	; 0x03
    3892:	fd 01       	movw	r30, r26
    3894:	52 83       	std	Z+2, r21	; 0x02
    3896:	41 83       	std	Z+1, r20	; 0x01
    3898:	fc 01       	movw	r30, r24
    389a:	ee 0f       	add	r30, r30
    389c:	ff 1f       	adc	r31, r31
    389e:	ee 0f       	add	r30, r30
    38a0:	ff 1f       	adc	r31, r31
    38a2:	ee 0f       	add	r30, r30
    38a4:	ff 1f       	adc	r31, r31
    38a6:	8e 0f       	add	r24, r30
    38a8:	9f 1f       	adc	r25, r31
    38aa:	fc 01       	movw	r30, r24
    38ac:	e8 54       	subi	r30, 0x48	; 72
    38ae:	f1 4f       	sbci	r31, 0xF1	; 241
    38b0:	01 80       	ldd	r0, Z+1	; 0x01
    38b2:	f2 81       	ldd	r31, Z+2	; 0x02
    38b4:	e0 2d       	mov	r30, r0
    38b6:	86 81       	ldd	r24, Z+6	; 0x06
    38b8:	97 81       	ldd	r25, Z+7	; 0x07
    38ba:	90 93 dd 0e 	sts	0x0EDD, r25	; 0x800edd <pxCurrentTCB+0x1>
    38be:	80 93 dc 0e 	sts	0x0EDC, r24	; 0x800edc <pxCurrentTCB>
    38c2:	20 93 9d 0e 	sts	0x0E9D, r18	; 0x800e9d <uxTopReadyPriority>
    38c6:	08 95       	ret

000038c8 <vTaskPlaceOnEventList>:
    38c8:	cf 93       	push	r28
    38ca:	df 93       	push	r29
    38cc:	eb 01       	movw	r28, r22
    38ce:	60 91 dc 0e 	lds	r22, 0x0EDC	; 0x800edc <pxCurrentTCB>
    38d2:	70 91 dd 0e 	lds	r23, 0x0EDD	; 0x800edd <pxCurrentTCB+0x1>
    38d6:	64 5f       	subi	r22, 0xF4	; 244
    38d8:	7f 4f       	sbci	r23, 0xFF	; 255
    38da:	0e 94 db 13 	call	0x27b6	; 0x27b6 <vListInsert>
    38de:	61 e0       	ldi	r22, 0x01	; 1
    38e0:	ce 01       	movw	r24, r28
    38e2:	9f dc       	rcall	.-1730   	; 0x3222 <prvAddCurrentTaskToDelayedList>
    38e4:	df 91       	pop	r29
    38e6:	cf 91       	pop	r28
    38e8:	08 95       	ret

000038ea <vTaskPlaceOnEventListRestricted>:
    38ea:	0f 93       	push	r16
    38ec:	1f 93       	push	r17
    38ee:	cf 93       	push	r28
    38f0:	8b 01       	movw	r16, r22
    38f2:	c4 2f       	mov	r28, r20
    38f4:	60 91 dc 0e 	lds	r22, 0x0EDC	; 0x800edc <pxCurrentTCB>
    38f8:	70 91 dd 0e 	lds	r23, 0x0EDD	; 0x800edd <pxCurrentTCB+0x1>
    38fc:	64 5f       	subi	r22, 0xF4	; 244
    38fe:	7f 4f       	sbci	r23, 0xFF	; 255
    3900:	0e 94 ba 13 	call	0x2774	; 0x2774 <vListInsertEnd>
    3904:	cc 23       	and	r28, r28
    3906:	11 f0       	breq	.+4      	; 0x390c <vTaskPlaceOnEventListRestricted+0x22>
    3908:	0f ef       	ldi	r16, 0xFF	; 255
    390a:	1f ef       	ldi	r17, 0xFF	; 255
    390c:	6c 2f       	mov	r22, r28
    390e:	c8 01       	movw	r24, r16
    3910:	88 dc       	rcall	.-1776   	; 0x3222 <prvAddCurrentTaskToDelayedList>
    3912:	cf 91       	pop	r28
    3914:	1f 91       	pop	r17
    3916:	0f 91       	pop	r16
    3918:	08 95       	ret

0000391a <xTaskRemoveFromEventList>:
    391a:	0f 93       	push	r16
    391c:	1f 93       	push	r17
    391e:	cf 93       	push	r28
    3920:	df 93       	push	r29
    3922:	dc 01       	movw	r26, r24
    3924:	15 96       	adiw	r26, 0x05	; 5
    3926:	ed 91       	ld	r30, X+
    3928:	fc 91       	ld	r31, X
    392a:	16 97       	sbiw	r26, 0x06	; 6
    392c:	c6 81       	ldd	r28, Z+6	; 0x06
    392e:	d7 81       	ldd	r29, Z+7	; 0x07
    3930:	8e 01       	movw	r16, r28
    3932:	04 5f       	subi	r16, 0xF4	; 244
    3934:	1f 4f       	sbci	r17, 0xFF	; 255
    3936:	c8 01       	movw	r24, r16
    3938:	0e 94 0c 14 	call	0x2818	; 0x2818 <uxListRemove>
    393c:	80 91 95 0e 	lds	r24, 0x0E95	; 0x800e95 <uxSchedulerSuspended>
    3940:	81 11       	cpse	r24, r1
    3942:	1c c0       	rjmp	.+56     	; 0x397c <xTaskRemoveFromEventList+0x62>
    3944:	0a 50       	subi	r16, 0x0A	; 10
    3946:	11 09       	sbc	r17, r1
    3948:	c8 01       	movw	r24, r16
    394a:	0e 94 0c 14 	call	0x2818	; 0x2818 <uxListRemove>
    394e:	8e 89       	ldd	r24, Y+22	; 0x16
    3950:	90 91 9d 0e 	lds	r25, 0x0E9D	; 0x800e9d <uxTopReadyPriority>
    3954:	98 17       	cp	r25, r24
    3956:	10 f4       	brcc	.+4      	; 0x395c <xTaskRemoveFromEventList+0x42>
    3958:	80 93 9d 0e 	sts	0x0E9D, r24	; 0x800e9d <uxTopReadyPriority>
    395c:	90 e0       	ldi	r25, 0x00	; 0
    395e:	9c 01       	movw	r18, r24
    3960:	22 0f       	add	r18, r18
    3962:	33 1f       	adc	r19, r19
    3964:	22 0f       	add	r18, r18
    3966:	33 1f       	adc	r19, r19
    3968:	22 0f       	add	r18, r18
    396a:	33 1f       	adc	r19, r19
    396c:	82 0f       	add	r24, r18
    396e:	93 1f       	adc	r25, r19
    3970:	b8 01       	movw	r22, r16
    3972:	88 54       	subi	r24, 0x48	; 72
    3974:	91 4f       	sbci	r25, 0xF1	; 241
    3976:	0e 94 ba 13 	call	0x2774	; 0x2774 <vListInsertEnd>
    397a:	05 c0       	rjmp	.+10     	; 0x3986 <xTaskRemoveFromEventList+0x6c>
    397c:	b8 01       	movw	r22, r16
    397e:	8b ea       	ldi	r24, 0xAB	; 171
    3980:	9e e0       	ldi	r25, 0x0E	; 14
    3982:	0e 94 ba 13 	call	0x2774	; 0x2774 <vListInsertEnd>
    3986:	e0 91 dc 0e 	lds	r30, 0x0EDC	; 0x800edc <pxCurrentTCB>
    398a:	f0 91 dd 0e 	lds	r31, 0x0EDD	; 0x800edd <pxCurrentTCB+0x1>
    398e:	9e 89       	ldd	r25, Y+22	; 0x16
    3990:	86 89       	ldd	r24, Z+22	; 0x16
    3992:	89 17       	cp	r24, r25
    3994:	20 f4       	brcc	.+8      	; 0x399e <xTaskRemoveFromEventList+0x84>
    3996:	81 e0       	ldi	r24, 0x01	; 1
    3998:	80 93 9a 0e 	sts	0x0E9A, r24	; 0x800e9a <xYieldPending>
    399c:	01 c0       	rjmp	.+2      	; 0x39a0 <xTaskRemoveFromEventList+0x86>
    399e:	80 e0       	ldi	r24, 0x00	; 0
    39a0:	df 91       	pop	r29
    39a2:	cf 91       	pop	r28
    39a4:	1f 91       	pop	r17
    39a6:	0f 91       	pop	r16
    39a8:	08 95       	ret

000039aa <vTaskInternalSetTimeOutState>:
    39aa:	20 91 99 0e 	lds	r18, 0x0E99	; 0x800e99 <xNumOfOverflows>
    39ae:	fc 01       	movw	r30, r24
    39b0:	20 83       	st	Z, r18
    39b2:	20 91 9e 0e 	lds	r18, 0x0E9E	; 0x800e9e <xTickCount>
    39b6:	30 91 9f 0e 	lds	r19, 0x0E9F	; 0x800e9f <xTickCount+0x1>
    39ba:	32 83       	std	Z+2, r19	; 0x02
    39bc:	21 83       	std	Z+1, r18	; 0x01
    39be:	08 95       	ret

000039c0 <xTaskCheckForTimeOut>:
    39c0:	0f b6       	in	r0, 0x3f	; 63
    39c2:	f8 94       	cli
    39c4:	0f 92       	push	r0
    39c6:	20 91 9e 0e 	lds	r18, 0x0E9E	; 0x800e9e <xTickCount>
    39ca:	30 91 9f 0e 	lds	r19, 0x0E9F	; 0x800e9f <xTickCount+0x1>
    39ce:	dc 01       	movw	r26, r24
    39d0:	11 96       	adiw	r26, 0x01	; 1
    39d2:	4d 91       	ld	r20, X+
    39d4:	5c 91       	ld	r21, X
    39d6:	12 97       	sbiw	r26, 0x02	; 2
    39d8:	e0 91 99 0e 	lds	r30, 0x0E99	; 0x800e99 <xNumOfOverflows>
    39dc:	fc 91       	ld	r31, X
    39de:	fe 17       	cp	r31, r30
    39e0:	19 f0       	breq	.+6      	; 0x39e8 <xTaskCheckForTimeOut+0x28>
    39e2:	24 17       	cp	r18, r20
    39e4:	35 07       	cpc	r19, r21
    39e6:	98 f4       	brcc	.+38     	; 0x3a0e <xTaskCheckForTimeOut+0x4e>
    39e8:	24 1b       	sub	r18, r20
    39ea:	35 0b       	sbc	r19, r21
    39ec:	fb 01       	movw	r30, r22
    39ee:	40 81       	ld	r20, Z
    39f0:	51 81       	ldd	r21, Z+1	; 0x01
    39f2:	24 17       	cp	r18, r20
    39f4:	35 07       	cpc	r19, r21
    39f6:	38 f4       	brcc	.+14     	; 0x3a06 <xTaskCheckForTimeOut+0x46>
    39f8:	42 1b       	sub	r20, r18
    39fa:	53 0b       	sbc	r21, r19
    39fc:	51 83       	std	Z+1, r21	; 0x01
    39fe:	40 83       	st	Z, r20
    3a00:	d4 df       	rcall	.-88     	; 0x39aa <vTaskInternalSetTimeOutState>
    3a02:	80 e0       	ldi	r24, 0x00	; 0
    3a04:	05 c0       	rjmp	.+10     	; 0x3a10 <xTaskCheckForTimeOut+0x50>
    3a06:	11 82       	std	Z+1, r1	; 0x01
    3a08:	10 82       	st	Z, r1
    3a0a:	81 e0       	ldi	r24, 0x01	; 1
    3a0c:	01 c0       	rjmp	.+2      	; 0x3a10 <xTaskCheckForTimeOut+0x50>
    3a0e:	81 e0       	ldi	r24, 0x01	; 1
    3a10:	0f 90       	pop	r0
    3a12:	0f be       	out	0x3f, r0	; 63
    3a14:	08 95       	ret

00003a16 <vTaskMissedYield>:
    3a16:	81 e0       	ldi	r24, 0x01	; 1
    3a18:	80 93 9a 0e 	sts	0x0E9A, r24	; 0x800e9a <xYieldPending>
    3a1c:	08 95       	ret

00003a1e <xTaskGetSchedulerState>:
    3a1e:	80 91 9c 0e 	lds	r24, 0x0E9C	; 0x800e9c <xSchedulerRunning>
    3a22:	88 23       	and	r24, r24
    3a24:	31 f0       	breq	.+12     	; 0x3a32 <xTaskGetSchedulerState+0x14>
    3a26:	80 91 95 0e 	lds	r24, 0x0E95	; 0x800e95 <uxSchedulerSuspended>
    3a2a:	88 23       	and	r24, r24
    3a2c:	21 f0       	breq	.+8      	; 0x3a36 <xTaskGetSchedulerState+0x18>
    3a2e:	80 e0       	ldi	r24, 0x00	; 0
    3a30:	08 95       	ret
    3a32:	81 e0       	ldi	r24, 0x01	; 1
    3a34:	08 95       	ret
    3a36:	82 e0       	ldi	r24, 0x02	; 2
    3a38:	08 95       	ret

00003a3a <xTaskPriorityInherit>:
    3a3a:	0f 93       	push	r16
    3a3c:	1f 93       	push	r17
    3a3e:	cf 93       	push	r28
    3a40:	df 93       	push	r29
    3a42:	fc 01       	movw	r30, r24
    3a44:	89 2b       	or	r24, r25
    3a46:	09 f4       	brne	.+2      	; 0x3a4a <xTaskPriorityInherit+0x10>
    3a48:	64 c0       	rjmp	.+200    	; 0x3b12 <xTaskPriorityInherit+0xd8>
    3a4a:	26 89       	ldd	r18, Z+22	; 0x16
    3a4c:	a0 91 dc 0e 	lds	r26, 0x0EDC	; 0x800edc <pxCurrentTCB>
    3a50:	b0 91 dd 0e 	lds	r27, 0x0EDD	; 0x800edd <pxCurrentTCB+0x1>
    3a54:	56 96       	adiw	r26, 0x16	; 22
    3a56:	8c 91       	ld	r24, X
    3a58:	28 17       	cp	r18, r24
    3a5a:	08 f0       	brcs	.+2      	; 0x3a5e <xTaskPriorityInherit+0x24>
    3a5c:	4e c0       	rjmp	.+156    	; 0x3afa <xTaskPriorityInherit+0xc0>
    3a5e:	84 85       	ldd	r24, Z+12	; 0x0c
    3a60:	95 85       	ldd	r25, Z+13	; 0x0d
    3a62:	99 23       	and	r25, r25
    3a64:	64 f0       	brlt	.+24     	; 0x3a7e <xTaskPriorityInherit+0x44>
    3a66:	a0 91 dc 0e 	lds	r26, 0x0EDC	; 0x800edc <pxCurrentTCB>
    3a6a:	b0 91 dd 0e 	lds	r27, 0x0EDD	; 0x800edd <pxCurrentTCB+0x1>
    3a6e:	56 96       	adiw	r26, 0x16	; 22
    3a70:	3c 91       	ld	r19, X
    3a72:	84 e0       	ldi	r24, 0x04	; 4
    3a74:	90 e0       	ldi	r25, 0x00	; 0
    3a76:	83 1b       	sub	r24, r19
    3a78:	91 09       	sbc	r25, r1
    3a7a:	95 87       	std	Z+13, r25	; 0x0d
    3a7c:	84 87       	std	Z+12, r24	; 0x0c
    3a7e:	30 e0       	ldi	r19, 0x00	; 0
    3a80:	c9 01       	movw	r24, r18
    3a82:	88 0f       	add	r24, r24
    3a84:	99 1f       	adc	r25, r25
    3a86:	88 0f       	add	r24, r24
    3a88:	99 1f       	adc	r25, r25
    3a8a:	88 0f       	add	r24, r24
    3a8c:	99 1f       	adc	r25, r25
    3a8e:	28 0f       	add	r18, r24
    3a90:	39 1f       	adc	r19, r25
    3a92:	28 54       	subi	r18, 0x48	; 72
    3a94:	31 4f       	sbci	r19, 0xF1	; 241
    3a96:	82 85       	ldd	r24, Z+10	; 0x0a
    3a98:	93 85       	ldd	r25, Z+11	; 0x0b
    3a9a:	82 17       	cp	r24, r18
    3a9c:	93 07       	cpc	r25, r19
    3a9e:	21 f5       	brne	.+72     	; 0x3ae8 <xTaskPriorityInherit+0xae>
    3aa0:	8f 01       	movw	r16, r30
    3aa2:	ef 01       	movw	r28, r30
    3aa4:	22 96       	adiw	r28, 0x02	; 2
    3aa6:	ce 01       	movw	r24, r28
    3aa8:	0e 94 0c 14 	call	0x2818	; 0x2818 <uxListRemove>
    3aac:	e0 91 dc 0e 	lds	r30, 0x0EDC	; 0x800edc <pxCurrentTCB>
    3ab0:	f0 91 dd 0e 	lds	r31, 0x0EDD	; 0x800edd <pxCurrentTCB+0x1>
    3ab4:	86 89       	ldd	r24, Z+22	; 0x16
    3ab6:	f8 01       	movw	r30, r16
    3ab8:	86 8b       	std	Z+22, r24	; 0x16
    3aba:	90 91 9d 0e 	lds	r25, 0x0E9D	; 0x800e9d <uxTopReadyPriority>
    3abe:	98 17       	cp	r25, r24
    3ac0:	10 f4       	brcc	.+4      	; 0x3ac6 <xTaskPriorityInherit+0x8c>
    3ac2:	80 93 9d 0e 	sts	0x0E9D, r24	; 0x800e9d <uxTopReadyPriority>
    3ac6:	90 e0       	ldi	r25, 0x00	; 0
    3ac8:	9c 01       	movw	r18, r24
    3aca:	22 0f       	add	r18, r18
    3acc:	33 1f       	adc	r19, r19
    3ace:	22 0f       	add	r18, r18
    3ad0:	33 1f       	adc	r19, r19
    3ad2:	22 0f       	add	r18, r18
    3ad4:	33 1f       	adc	r19, r19
    3ad6:	82 0f       	add	r24, r18
    3ad8:	93 1f       	adc	r25, r19
    3ada:	be 01       	movw	r22, r28
    3adc:	88 54       	subi	r24, 0x48	; 72
    3ade:	91 4f       	sbci	r25, 0xF1	; 241
    3ae0:	0e 94 ba 13 	call	0x2774	; 0x2774 <vListInsertEnd>
    3ae4:	81 e0       	ldi	r24, 0x01	; 1
    3ae6:	16 c0       	rjmp	.+44     	; 0x3b14 <xTaskPriorityInherit+0xda>
    3ae8:	a0 91 dc 0e 	lds	r26, 0x0EDC	; 0x800edc <pxCurrentTCB>
    3aec:	b0 91 dd 0e 	lds	r27, 0x0EDD	; 0x800edd <pxCurrentTCB+0x1>
    3af0:	56 96       	adiw	r26, 0x16	; 22
    3af2:	8c 91       	ld	r24, X
    3af4:	86 8b       	std	Z+22, r24	; 0x16
    3af6:	81 e0       	ldi	r24, 0x01	; 1
    3af8:	0d c0       	rjmp	.+26     	; 0x3b14 <xTaskPriorityInherit+0xda>
    3afa:	a0 91 dc 0e 	lds	r26, 0x0EDC	; 0x800edc <pxCurrentTCB>
    3afe:	b0 91 dd 0e 	lds	r27, 0x0EDD	; 0x800edd <pxCurrentTCB+0x1>
    3b02:	81 e0       	ldi	r24, 0x01	; 1
    3b04:	21 a1       	ldd	r18, Z+33	; 0x21
    3b06:	56 96       	adiw	r26, 0x16	; 22
    3b08:	9c 91       	ld	r25, X
    3b0a:	29 17       	cp	r18, r25
    3b0c:	18 f0       	brcs	.+6      	; 0x3b14 <xTaskPriorityInherit+0xda>
    3b0e:	80 e0       	ldi	r24, 0x00	; 0
    3b10:	01 c0       	rjmp	.+2      	; 0x3b14 <xTaskPriorityInherit+0xda>
    3b12:	80 e0       	ldi	r24, 0x00	; 0
    3b14:	df 91       	pop	r29
    3b16:	cf 91       	pop	r28
    3b18:	1f 91       	pop	r17
    3b1a:	0f 91       	pop	r16
    3b1c:	08 95       	ret

00003b1e <xTaskPriorityDisinherit>:
    3b1e:	0f 93       	push	r16
    3b20:	1f 93       	push	r17
    3b22:	cf 93       	push	r28
    3b24:	df 93       	push	r29
    3b26:	fc 01       	movw	r30, r24
    3b28:	89 2b       	or	r24, r25
    3b2a:	79 f1       	breq	.+94     	; 0x3b8a <xTaskPriorityDisinherit+0x6c>
    3b2c:	82 a1       	ldd	r24, Z+34	; 0x22
    3b2e:	81 50       	subi	r24, 0x01	; 1
    3b30:	82 a3       	std	Z+34, r24	; 0x22
    3b32:	26 89       	ldd	r18, Z+22	; 0x16
    3b34:	91 a1       	ldd	r25, Z+33	; 0x21
    3b36:	29 17       	cp	r18, r25
    3b38:	51 f1       	breq	.+84     	; 0x3b8e <xTaskPriorityDisinherit+0x70>
    3b3a:	81 11       	cpse	r24, r1
    3b3c:	2a c0       	rjmp	.+84     	; 0x3b92 <xTaskPriorityDisinherit+0x74>
    3b3e:	ef 01       	movw	r28, r30
    3b40:	8f 01       	movw	r16, r30
    3b42:	0e 5f       	subi	r16, 0xFE	; 254
    3b44:	1f 4f       	sbci	r17, 0xFF	; 255
    3b46:	c8 01       	movw	r24, r16
    3b48:	0e 94 0c 14 	call	0x2818	; 0x2818 <uxListRemove>
    3b4c:	89 a1       	ldd	r24, Y+33	; 0x21
    3b4e:	8e 8b       	std	Y+22, r24	; 0x16
    3b50:	24 e0       	ldi	r18, 0x04	; 4
    3b52:	30 e0       	ldi	r19, 0x00	; 0
    3b54:	28 1b       	sub	r18, r24
    3b56:	31 09       	sbc	r19, r1
    3b58:	3d 87       	std	Y+13, r19	; 0x0d
    3b5a:	2c 87       	std	Y+12, r18	; 0x0c
    3b5c:	90 91 9d 0e 	lds	r25, 0x0E9D	; 0x800e9d <uxTopReadyPriority>
    3b60:	98 17       	cp	r25, r24
    3b62:	10 f4       	brcc	.+4      	; 0x3b68 <xTaskPriorityDisinherit+0x4a>
    3b64:	80 93 9d 0e 	sts	0x0E9D, r24	; 0x800e9d <uxTopReadyPriority>
    3b68:	90 e0       	ldi	r25, 0x00	; 0
    3b6a:	9c 01       	movw	r18, r24
    3b6c:	22 0f       	add	r18, r18
    3b6e:	33 1f       	adc	r19, r19
    3b70:	22 0f       	add	r18, r18
    3b72:	33 1f       	adc	r19, r19
    3b74:	22 0f       	add	r18, r18
    3b76:	33 1f       	adc	r19, r19
    3b78:	82 0f       	add	r24, r18
    3b7a:	93 1f       	adc	r25, r19
    3b7c:	b8 01       	movw	r22, r16
    3b7e:	88 54       	subi	r24, 0x48	; 72
    3b80:	91 4f       	sbci	r25, 0xF1	; 241
    3b82:	0e 94 ba 13 	call	0x2774	; 0x2774 <vListInsertEnd>
    3b86:	81 e0       	ldi	r24, 0x01	; 1
    3b88:	05 c0       	rjmp	.+10     	; 0x3b94 <xTaskPriorityDisinherit+0x76>
    3b8a:	80 e0       	ldi	r24, 0x00	; 0
    3b8c:	03 c0       	rjmp	.+6      	; 0x3b94 <xTaskPriorityDisinherit+0x76>
    3b8e:	80 e0       	ldi	r24, 0x00	; 0
    3b90:	01 c0       	rjmp	.+2      	; 0x3b94 <xTaskPriorityDisinherit+0x76>
    3b92:	80 e0       	ldi	r24, 0x00	; 0
    3b94:	df 91       	pop	r29
    3b96:	cf 91       	pop	r28
    3b98:	1f 91       	pop	r17
    3b9a:	0f 91       	pop	r16
    3b9c:	08 95       	ret

00003b9e <vTaskPriorityDisinheritAfterTimeout>:
    3b9e:	0f 93       	push	r16
    3ba0:	1f 93       	push	r17
    3ba2:	cf 93       	push	r28
    3ba4:	df 93       	push	r29
    3ba6:	fc 01       	movw	r30, r24
    3ba8:	89 2b       	or	r24, r25
    3baa:	09 f4       	brne	.+2      	; 0x3bae <vTaskPriorityDisinheritAfterTimeout+0x10>
    3bac:	43 c0       	rjmp	.+134    	; 0x3c34 <vTaskPriorityDisinheritAfterTimeout+0x96>
    3bae:	91 a1       	ldd	r25, Z+33	; 0x21
    3bb0:	96 17       	cp	r25, r22
    3bb2:	08 f4       	brcc	.+2      	; 0x3bb6 <vTaskPriorityDisinheritAfterTimeout+0x18>
    3bb4:	96 2f       	mov	r25, r22
    3bb6:	86 89       	ldd	r24, Z+22	; 0x16
    3bb8:	89 17       	cp	r24, r25
    3bba:	e1 f1       	breq	.+120    	; 0x3c34 <vTaskPriorityDisinheritAfterTimeout+0x96>
    3bbc:	22 a1       	ldd	r18, Z+34	; 0x22
    3bbe:	21 30       	cpi	r18, 0x01	; 1
    3bc0:	c9 f5       	brne	.+114    	; 0x3c34 <vTaskPriorityDisinheritAfterTimeout+0x96>
    3bc2:	96 8b       	std	Z+22, r25	; 0x16
    3bc4:	24 85       	ldd	r18, Z+12	; 0x0c
    3bc6:	35 85       	ldd	r19, Z+13	; 0x0d
    3bc8:	33 23       	and	r19, r19
    3bca:	34 f0       	brlt	.+12     	; 0x3bd8 <vTaskPriorityDisinheritAfterTimeout+0x3a>
    3bcc:	24 e0       	ldi	r18, 0x04	; 4
    3bce:	30 e0       	ldi	r19, 0x00	; 0
    3bd0:	29 1b       	sub	r18, r25
    3bd2:	31 09       	sbc	r19, r1
    3bd4:	35 87       	std	Z+13, r19	; 0x0d
    3bd6:	24 87       	std	Z+12, r18	; 0x0c
    3bd8:	90 e0       	ldi	r25, 0x00	; 0
    3bda:	9c 01       	movw	r18, r24
    3bdc:	22 0f       	add	r18, r18
    3bde:	33 1f       	adc	r19, r19
    3be0:	22 0f       	add	r18, r18
    3be2:	33 1f       	adc	r19, r19
    3be4:	22 0f       	add	r18, r18
    3be6:	33 1f       	adc	r19, r19
    3be8:	82 0f       	add	r24, r18
    3bea:	93 1f       	adc	r25, r19
    3bec:	88 54       	subi	r24, 0x48	; 72
    3bee:	91 4f       	sbci	r25, 0xF1	; 241
    3bf0:	22 85       	ldd	r18, Z+10	; 0x0a
    3bf2:	33 85       	ldd	r19, Z+11	; 0x0b
    3bf4:	28 17       	cp	r18, r24
    3bf6:	39 07       	cpc	r19, r25
    3bf8:	e9 f4       	brne	.+58     	; 0x3c34 <vTaskPriorityDisinheritAfterTimeout+0x96>
    3bfa:	ef 01       	movw	r28, r30
    3bfc:	8f 01       	movw	r16, r30
    3bfe:	0e 5f       	subi	r16, 0xFE	; 254
    3c00:	1f 4f       	sbci	r17, 0xFF	; 255
    3c02:	c8 01       	movw	r24, r16
    3c04:	0e 94 0c 14 	call	0x2818	; 0x2818 <uxListRemove>
    3c08:	8e 89       	ldd	r24, Y+22	; 0x16
    3c0a:	90 91 9d 0e 	lds	r25, 0x0E9D	; 0x800e9d <uxTopReadyPriority>
    3c0e:	98 17       	cp	r25, r24
    3c10:	10 f4       	brcc	.+4      	; 0x3c16 <vTaskPriorityDisinheritAfterTimeout+0x78>
    3c12:	80 93 9d 0e 	sts	0x0E9D, r24	; 0x800e9d <uxTopReadyPriority>
    3c16:	90 e0       	ldi	r25, 0x00	; 0
    3c18:	9c 01       	movw	r18, r24
    3c1a:	22 0f       	add	r18, r18
    3c1c:	33 1f       	adc	r19, r19
    3c1e:	22 0f       	add	r18, r18
    3c20:	33 1f       	adc	r19, r19
    3c22:	22 0f       	add	r18, r18
    3c24:	33 1f       	adc	r19, r19
    3c26:	82 0f       	add	r24, r18
    3c28:	93 1f       	adc	r25, r19
    3c2a:	b8 01       	movw	r22, r16
    3c2c:	88 54       	subi	r24, 0x48	; 72
    3c2e:	91 4f       	sbci	r25, 0xF1	; 241
    3c30:	0e 94 ba 13 	call	0x2774	; 0x2774 <vListInsertEnd>
    3c34:	df 91       	pop	r29
    3c36:	cf 91       	pop	r28
    3c38:	1f 91       	pop	r17
    3c3a:	0f 91       	pop	r16
    3c3c:	08 95       	ret

00003c3e <pvTaskIncrementMutexHeldCount>:

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
        then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
    3c3e:	80 91 dc 0e 	lds	r24, 0x0EDC	; 0x800edc <pxCurrentTCB>
    3c42:	90 91 dd 0e 	lds	r25, 0x0EDD	; 0x800edd <pxCurrentTCB+0x1>
    3c46:	89 2b       	or	r24, r25
    3c48:	39 f0       	breq	.+14     	; 0x3c58 <pvTaskIncrementMutexHeldCount+0x1a>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
    3c4a:	e0 91 dc 0e 	lds	r30, 0x0EDC	; 0x800edc <pxCurrentTCB>
    3c4e:	f0 91 dd 0e 	lds	r31, 0x0EDD	; 0x800edd <pxCurrentTCB+0x1>
    3c52:	82 a1       	ldd	r24, Z+34	; 0x22
    3c54:	8f 5f       	subi	r24, 0xFF	; 255
    3c56:	82 a3       	std	Z+34, r24	; 0x22
        }

        return pxCurrentTCB;
    3c58:	80 91 dc 0e 	lds	r24, 0x0EDC	; 0x800edc <pxCurrentTCB>
    3c5c:	90 91 dd 0e 	lds	r25, 0x0EDD	; 0x800edd <pxCurrentTCB+0x1>
    }
    3c60:	08 95       	ret

00003c62 <prvInsertTimerInActiveList>:
            }
            #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
        }

        return pxNewTimer;
    }
    3c62:	fc 01       	movw	r30, r24
    3c64:	73 83       	std	Z+3, r23	; 0x03
    3c66:	62 83       	std	Z+2, r22	; 0x02
    3c68:	91 87       	std	Z+9, r25	; 0x09
    3c6a:	80 87       	std	Z+8, r24	; 0x08
    3c6c:	46 17       	cp	r20, r22
    3c6e:	57 07       	cpc	r21, r23
    3c70:	90 f0       	brcs	.+36     	; 0x3c96 <prvInsertTimerInActiveList+0x34>
    3c72:	42 1b       	sub	r20, r18
    3c74:	53 0b       	sbc	r21, r19
    3c76:	84 85       	ldd	r24, Z+12	; 0x0c
    3c78:	95 85       	ldd	r25, Z+13	; 0x0d
    3c7a:	48 17       	cp	r20, r24
    3c7c:	59 07       	cpc	r21, r25
    3c7e:	e0 f4       	brcc	.+56     	; 0x3cb8 <prvInsertTimerInActiveList+0x56>
    3c80:	bf 01       	movw	r22, r30
    3c82:	6e 5f       	subi	r22, 0xFE	; 254
    3c84:	7f 4f       	sbci	r23, 0xFF	; 255
    3c86:	80 91 47 0f 	lds	r24, 0x0F47	; 0x800f47 <pxOverflowTimerList>
    3c8a:	90 91 48 0f 	lds	r25, 0x0F48	; 0x800f48 <pxOverflowTimerList+0x1>
    3c8e:	0e 94 db 13 	call	0x27b6	; 0x27b6 <vListInsert>
    3c92:	80 e0       	ldi	r24, 0x00	; 0
    3c94:	08 95       	ret
    3c96:	42 17       	cp	r20, r18
    3c98:	53 07       	cpc	r21, r19
    3c9a:	18 f4       	brcc	.+6      	; 0x3ca2 <prvInsertTimerInActiveList+0x40>
    3c9c:	62 17       	cp	r22, r18
    3c9e:	73 07       	cpc	r23, r19
    3ca0:	68 f4       	brcc	.+26     	; 0x3cbc <prvInsertTimerInActiveList+0x5a>
    3ca2:	bf 01       	movw	r22, r30
    3ca4:	6e 5f       	subi	r22, 0xFE	; 254
    3ca6:	7f 4f       	sbci	r23, 0xFF	; 255
    3ca8:	80 91 49 0f 	lds	r24, 0x0F49	; 0x800f49 <pxCurrentTimerList>
    3cac:	90 91 4a 0f 	lds	r25, 0x0F4A	; 0x800f4a <pxCurrentTimerList+0x1>
    3cb0:	0e 94 db 13 	call	0x27b6	; 0x27b6 <vListInsert>
    3cb4:	80 e0       	ldi	r24, 0x00	; 0
    3cb6:	08 95       	ret
    3cb8:	81 e0       	ldi	r24, 0x01	; 1
    3cba:	08 95       	ret
    3cbc:	81 e0       	ldi	r24, 0x01	; 1
    3cbe:	08 95       	ret

00003cc0 <prvCheckForValidListAndQueue>:
    3cc0:	0f 93       	push	r16
    3cc2:	0f b6       	in	r0, 0x3f	; 63
    3cc4:	f8 94       	cli
    3cc6:	0f 92       	push	r0
    3cc8:	80 91 45 0f 	lds	r24, 0x0F45	; 0x800f45 <xTimerQueue>
    3ccc:	90 91 46 0f 	lds	r25, 0x0F46	; 0x800f46 <xTimerQueue+0x1>
    3cd0:	89 2b       	or	r24, r25
    3cd2:	01 f5       	brne	.+64     	; 0x3d14 <prvCheckForValidListAndQueue+0x54>
    3cd4:	88 e3       	ldi	r24, 0x38	; 56
    3cd6:	9f e0       	ldi	r25, 0x0F	; 15
    3cd8:	0e 94 a8 13 	call	0x2750	; 0x2750 <vListInitialise>
    3cdc:	8f e2       	ldi	r24, 0x2F	; 47
    3cde:	9f e0       	ldi	r25, 0x0F	; 15
    3ce0:	0e 94 a8 13 	call	0x2750	; 0x2750 <vListInitialise>
    3ce4:	88 e3       	ldi	r24, 0x38	; 56
    3ce6:	9f e0       	ldi	r25, 0x0F	; 15
    3ce8:	90 93 4a 0f 	sts	0x0F4A, r25	; 0x800f4a <pxCurrentTimerList+0x1>
    3cec:	80 93 49 0f 	sts	0x0F49, r24	; 0x800f49 <pxCurrentTimerList>
    3cf0:	8f e2       	ldi	r24, 0x2F	; 47
    3cf2:	9f e0       	ldi	r25, 0x0F	; 15
    3cf4:	90 93 48 0f 	sts	0x0F48, r25	; 0x800f48 <pxOverflowTimerList+0x1>
    3cf8:	80 93 47 0f 	sts	0x0F47, r24	; 0x800f47 <pxOverflowTimerList>
    3cfc:	00 e0       	ldi	r16, 0x00	; 0
    3cfe:	2e ed       	ldi	r18, 0xDE	; 222
    3d00:	3e e0       	ldi	r19, 0x0E	; 14
    3d02:	4d ef       	ldi	r20, 0xFD	; 253
    3d04:	5e e0       	ldi	r21, 0x0E	; 14
    3d06:	65 e0       	ldi	r22, 0x05	; 5
    3d08:	8a e0       	ldi	r24, 0x0A	; 10
    3d0a:	2e d8       	rcall	.-4004   	; 0x2d68 <xQueueGenericCreateStatic>
    3d0c:	90 93 46 0f 	sts	0x0F46, r25	; 0x800f46 <xTimerQueue+0x1>
    3d10:	80 93 45 0f 	sts	0x0F45, r24	; 0x800f45 <xTimerQueue>
    3d14:	0f 90       	pop	r0
    3d16:	0f be       	out	0x3f, r0	; 63
    3d18:	0f 91       	pop	r16
    3d1a:	08 95       	ret

00003d1c <xTimerCreateTimerTask>:
    3d1c:	cf 92       	push	r12
    3d1e:	df 92       	push	r13
    3d20:	ef 92       	push	r14
    3d22:	ff 92       	push	r15
    3d24:	0f 93       	push	r16
    3d26:	cf 93       	push	r28
    3d28:	df 93       	push	r29
    3d2a:	00 d0       	rcall	.+0      	; 0x3d2c <xTimerCreateTimerTask+0x10>
    3d2c:	00 d0       	rcall	.+0      	; 0x3d2e <xTimerCreateTimerTask+0x12>
    3d2e:	cd b7       	in	r28, 0x3d	; 61
    3d30:	de b7       	in	r29, 0x3e	; 62
    3d32:	c6 df       	rcall	.-116    	; 0x3cc0 <prvCheckForValidListAndQueue>
    3d34:	80 91 45 0f 	lds	r24, 0x0F45	; 0x800f45 <xTimerQueue>
    3d38:	90 91 46 0f 	lds	r25, 0x0F46	; 0x800f46 <xTimerQueue+0x1>
    3d3c:	89 2b       	or	r24, r25
    3d3e:	31 f1       	breq	.+76     	; 0x3d8c <xTimerCreateTimerTask+0x70>
    3d40:	1e 82       	std	Y+6, r1	; 0x06
    3d42:	1d 82       	std	Y+5, r1	; 0x05
    3d44:	1c 82       	std	Y+4, r1	; 0x04
    3d46:	1b 82       	std	Y+3, r1	; 0x03
    3d48:	ae 01       	movw	r20, r28
    3d4a:	4f 5f       	subi	r20, 0xFF	; 255
    3d4c:	5f 4f       	sbci	r21, 0xFF	; 255
    3d4e:	be 01       	movw	r22, r28
    3d50:	6d 5f       	subi	r22, 0xFD	; 253
    3d52:	7f 4f       	sbci	r23, 0xFF	; 255
    3d54:	ce 01       	movw	r24, r28
    3d56:	05 96       	adiw	r24, 0x05	; 5
    3d58:	0e 94 98 13 	call	0x2730	; 0x2730 <vApplicationGetTimerTaskMemory>
    3d5c:	cd 80       	ldd	r12, Y+5	; 0x05
    3d5e:	de 80       	ldd	r13, Y+6	; 0x06
    3d60:	eb 80       	ldd	r14, Y+3	; 0x03
    3d62:	fc 80       	ldd	r15, Y+4	; 0x04
    3d64:	49 81       	ldd	r20, Y+1	; 0x01
    3d66:	5a 81       	ldd	r21, Y+2	; 0x02
    3d68:	03 e0       	ldi	r16, 0x03	; 3
    3d6a:	20 e0       	ldi	r18, 0x00	; 0
    3d6c:	30 e0       	ldi	r19, 0x00	; 0
    3d6e:	6c e2       	ldi	r22, 0x2C	; 44
    3d70:	73 e0       	ldi	r23, 0x03	; 3
    3d72:	89 e8       	ldi	r24, 0x89	; 137
    3d74:	9f e1       	ldi	r25, 0x1F	; 31
    3d76:	96 da       	rcall	.-2772   	; 0x32a4 <xTaskCreateStatic>
    3d78:	9c 01       	movw	r18, r24
    3d7a:	90 93 44 0f 	sts	0x0F44, r25	; 0x800f44 <xTimerTaskHandle+0x1>
    3d7e:	80 93 43 0f 	sts	0x0F43, r24	; 0x800f43 <xTimerTaskHandle>
    3d82:	81 e0       	ldi	r24, 0x01	; 1
    3d84:	23 2b       	or	r18, r19
    3d86:	19 f4       	brne	.+6      	; 0x3d8e <xTimerCreateTimerTask+0x72>
    3d88:	80 e0       	ldi	r24, 0x00	; 0
    3d8a:	01 c0       	rjmp	.+2      	; 0x3d8e <xTimerCreateTimerTask+0x72>
    3d8c:	80 e0       	ldi	r24, 0x00	; 0
    3d8e:	26 96       	adiw	r28, 0x06	; 6
    3d90:	0f b6       	in	r0, 0x3f	; 63
    3d92:	f8 94       	cli
    3d94:	de bf       	out	0x3e, r29	; 62
    3d96:	0f be       	out	0x3f, r0	; 63
    3d98:	cd bf       	out	0x3d, r28	; 61
    3d9a:	df 91       	pop	r29
    3d9c:	cf 91       	pop	r28
    3d9e:	0f 91       	pop	r16
    3da0:	ff 90       	pop	r15
    3da2:	ef 90       	pop	r14
    3da4:	df 90       	pop	r13
    3da6:	cf 90       	pop	r12
    3da8:	08 95       	ret

00003daa <xTimerGenericCommand>:
    }
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
    3daa:	0f 93       	push	r16
    3dac:	1f 93       	push	r17
    3dae:	cf 93       	push	r28
    3db0:	df 93       	push	r29
    3db2:	00 d0       	rcall	.+0      	; 0x3db4 <xTimerGenericCommand+0xa>
    3db4:	1f 92       	push	r1
    3db6:	1f 92       	push	r1
    3db8:	cd b7       	in	r28, 0x3d	; 61
    3dba:	de b7       	in	r29, 0x3e	; 62

    configASSERT( xTimer );

    /* Send a message to the timer service task to perform a particular action
    on a particular timer definition. */
    if( xTimerQueue != NULL )
    3dbc:	e0 91 45 0f 	lds	r30, 0x0F45	; 0x800f45 <xTimerQueue>
    3dc0:	f0 91 46 0f 	lds	r31, 0x0F46	; 0x800f46 <xTimerQueue+0x1>
    3dc4:	30 97       	sbiw	r30, 0x00	; 0
    3dc6:	61 f1       	breq	.+88     	; 0x3e20 <xTimerGenericCommand+0x76>
    3dc8:	d9 01       	movw	r26, r18
    {
        /* Send a command to the timer service task to start the xTimer timer. */
        xMessage.xMessageID = xCommandID;
    3dca:	69 83       	std	Y+1, r22	; 0x01
        xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    3dcc:	5b 83       	std	Y+3, r21	; 0x03
    3dce:	4a 83       	std	Y+2, r20	; 0x02
        xMessage.u.xTimerParameters.pxTimer = xTimer;
    3dd0:	9d 83       	std	Y+5, r25	; 0x05
    3dd2:	8c 83       	std	Y+4, r24	; 0x04

        if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    3dd4:	66 30       	cpi	r22, 0x06	; 6
    3dd6:	e4 f4       	brge	.+56     	; 0x3e10 <xTimerGenericCommand+0x66>
        {
            if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    3dd8:	22 de       	rcall	.-956    	; 0x3a1e <xTaskGetSchedulerState>
    3dda:	82 30       	cpi	r24, 0x02	; 2
    3ddc:	61 f4       	brne	.+24     	; 0x3df6 <xTimerGenericCommand+0x4c>
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    3dde:	20 e0       	ldi	r18, 0x00	; 0
    3de0:	a8 01       	movw	r20, r16
    3de2:	be 01       	movw	r22, r28
    3de4:	6f 5f       	subi	r22, 0xFF	; 255
    3de6:	7f 4f       	sbci	r23, 0xFF	; 255
    3de8:	80 91 45 0f 	lds	r24, 0x0F45	; 0x800f45 <xTimerQueue>
    3dec:	90 91 46 0f 	lds	r25, 0x0F46	; 0x800f46 <xTimerQueue+0x1>
    3df0:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <xQueueGenericSend>
    3df4:	16 c0       	rjmp	.+44     	; 0x3e22 <xTimerGenericCommand+0x78>
            }
            else
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    3df6:	20 e0       	ldi	r18, 0x00	; 0
    3df8:	40 e0       	ldi	r20, 0x00	; 0
    3dfa:	50 e0       	ldi	r21, 0x00	; 0
    3dfc:	be 01       	movw	r22, r28
    3dfe:	6f 5f       	subi	r22, 0xFF	; 255
    3e00:	7f 4f       	sbci	r23, 0xFF	; 255
    3e02:	80 91 45 0f 	lds	r24, 0x0F45	; 0x800f45 <xTimerQueue>
    3e06:	90 91 46 0f 	lds	r25, 0x0F46	; 0x800f46 <xTimerQueue+0x1>
    3e0a:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <xQueueGenericSend>
    3e0e:	09 c0       	rjmp	.+18     	; 0x3e22 <xTimerGenericCommand+0x78>
            }
        }
        else
        {
            xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    3e10:	20 e0       	ldi	r18, 0x00	; 0
    3e12:	ad 01       	movw	r20, r26
    3e14:	be 01       	movw	r22, r28
    3e16:	6f 5f       	subi	r22, 0xFF	; 255
    3e18:	7f 4f       	sbci	r23, 0xFF	; 255
    3e1a:	cf 01       	movw	r24, r30
    3e1c:	4c d8       	rcall	.-3944   	; 0x2eb6 <xQueueGenericSendFromISR>
    3e1e:	01 c0       	rjmp	.+2      	; 0x3e22 <xTimerGenericCommand+0x78>
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
    3e20:	80 e0       	ldi	r24, 0x00	; 0
    {
        mtCOVERAGE_TEST_MARKER();
    }

    return xReturn;
}
    3e22:	0f 90       	pop	r0
    3e24:	0f 90       	pop	r0
    3e26:	0f 90       	pop	r0
    3e28:	0f 90       	pop	r0
    3e2a:	0f 90       	pop	r0
    3e2c:	df 91       	pop	r29
    3e2e:	cf 91       	pop	r28
    3e30:	1f 91       	pop	r17
    3e32:	0f 91       	pop	r16
    3e34:	08 95       	ret

00003e36 <prvSampleTimeNow>:
    return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
    3e36:	af 92       	push	r10
    3e38:	bf 92       	push	r11
    3e3a:	cf 92       	push	r12
    3e3c:	df 92       	push	r13
    3e3e:	ef 92       	push	r14
    3e40:	ff 92       	push	r15
    3e42:	0f 93       	push	r16
    3e44:	1f 93       	push	r17
    3e46:	cf 93       	push	r28
    3e48:	df 93       	push	r29
    3e4a:	6c 01       	movw	r12, r24
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

    xTimeNow = xTaskGetTickCount();
    3e4c:	72 db       	rcall	.-2332   	; 0x3532 <xTaskGetTickCount>
    3e4e:	7c 01       	movw	r14, r24

    if( xTimeNow < xLastTime )
    3e50:	80 91 41 0f 	lds	r24, 0x0F41	; 0x800f41 <xLastTime.2397>
    3e54:	90 91 42 0f 	lds	r25, 0x0F42	; 0x800f42 <xLastTime.2397+0x1>
    3e58:	e8 16       	cp	r14, r24
    3e5a:	f9 06       	cpc	r15, r25
    3e5c:	08 f0       	brcs	.+2      	; 0x3e60 <prvSampleTimeNow+0x2a>
    3e5e:	47 c0       	rjmp	.+142    	; 0x3eee <prvSampleTimeNow+0xb8>
    3e60:	2f c0       	rjmp	.+94     	; 0x3ec0 <prvSampleTimeNow+0x8a>
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    {
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    3e62:	05 80       	ldd	r0, Z+5	; 0x05
    3e64:	f6 81       	ldd	r31, Z+6	; 0x06
    3e66:	e0 2d       	mov	r30, r0
    3e68:	a0 80       	ld	r10, Z
    3e6a:	b1 80       	ldd	r11, Z+1	; 0x01

        /* Remove the timer from the list. */
        pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    3e6c:	c6 81       	ldd	r28, Z+6	; 0x06
    3e6e:	d7 81       	ldd	r29, Z+7	; 0x07
        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    3e70:	8e 01       	movw	r16, r28
    3e72:	0e 5f       	subi	r16, 0xFE	; 254
    3e74:	1f 4f       	sbci	r17, 0xFF	; 255
    3e76:	c8 01       	movw	r24, r16
    3e78:	0e 94 0c 14 	call	0x2818	; 0x2818 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* Execute its callback, then send a command to restart the timer if
        it is an auto-reload timer.  It cannot be restarted here as the lists
        have not yet been switched. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    3e7c:	e9 89       	ldd	r30, Y+17	; 0x11
    3e7e:	fa 89       	ldd	r31, Y+18	; 0x12
    3e80:	ce 01       	movw	r24, r28
    3e82:	19 95       	eicall

        if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    3e84:	8e 85       	ldd	r24, Y+14	; 0x0e
    3e86:	81 30       	cpi	r24, 0x01	; 1
    3e88:	d9 f4       	brne	.+54     	; 0x3ec0 <prvSampleTimeNow+0x8a>
            the timer going into the same timer list then it has already expired
            and the timer should be re-inserted into the current list so it is
            processed again within this loop.  Otherwise a command should be sent
            to restart the timer to ensure it is only inserted into a list after
            the lists have been swapped. */
            xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    3e8a:	8c 85       	ldd	r24, Y+12	; 0x0c
    3e8c:	9d 85       	ldd	r25, Y+13	; 0x0d
    3e8e:	8a 0d       	add	r24, r10
    3e90:	9b 1d       	adc	r25, r11
            if( xReloadTime > xNextExpireTime )
    3e92:	a8 16       	cp	r10, r24
    3e94:	b9 06       	cpc	r11, r25
    3e96:	60 f4       	brcc	.+24     	; 0x3eb0 <prvSampleTimeNow+0x7a>
            {
                listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    3e98:	9b 83       	std	Y+3, r25	; 0x03
    3e9a:	8a 83       	std	Y+2, r24	; 0x02
                listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    3e9c:	d9 87       	std	Y+9, r29	; 0x09
    3e9e:	c8 87       	std	Y+8, r28	; 0x08
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    3ea0:	b8 01       	movw	r22, r16
    3ea2:	80 91 49 0f 	lds	r24, 0x0F49	; 0x800f49 <pxCurrentTimerList>
    3ea6:	90 91 4a 0f 	lds	r25, 0x0F4A	; 0x800f4a <pxCurrentTimerList+0x1>
    3eaa:	0e 94 db 13 	call	0x27b6	; 0x27b6 <vListInsert>
    3eae:	08 c0       	rjmp	.+16     	; 0x3ec0 <prvSampleTimeNow+0x8a>
            }
            else
            {
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    3eb0:	00 e0       	ldi	r16, 0x00	; 0
    3eb2:	10 e0       	ldi	r17, 0x00	; 0
    3eb4:	20 e0       	ldi	r18, 0x00	; 0
    3eb6:	30 e0       	ldi	r19, 0x00	; 0
    3eb8:	a5 01       	movw	r20, r10
    3eba:	60 e0       	ldi	r22, 0x00	; 0
    3ebc:	ce 01       	movw	r24, r28
    3ebe:	75 df       	rcall	.-278    	; 0x3daa <xTimerGenericCommand>

    /* The tick count has overflowed.  The timer lists must be switched.
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    3ec0:	e0 91 49 0f 	lds	r30, 0x0F49	; 0x800f49 <pxCurrentTimerList>
    3ec4:	f0 91 4a 0f 	lds	r31, 0x0F4A	; 0x800f4a <pxCurrentTimerList+0x1>
    3ec8:	80 81       	ld	r24, Z
    3eca:	81 11       	cpse	r24, r1
    3ecc:	ca cf       	rjmp	.-108    	; 0x3e62 <prvSampleTimeNow+0x2c>
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxTemp = pxCurrentTimerList;
    pxCurrentTimerList = pxOverflowTimerList;
    3ece:	80 91 47 0f 	lds	r24, 0x0F47	; 0x800f47 <pxOverflowTimerList>
    3ed2:	90 91 48 0f 	lds	r25, 0x0F48	; 0x800f48 <pxOverflowTimerList+0x1>
    3ed6:	90 93 4a 0f 	sts	0x0F4A, r25	; 0x800f4a <pxCurrentTimerList+0x1>
    3eda:	80 93 49 0f 	sts	0x0F49, r24	; 0x800f49 <pxCurrentTimerList>
    pxOverflowTimerList = pxTemp;
    3ede:	f0 93 48 0f 	sts	0x0F48, r31	; 0x800f48 <pxOverflowTimerList+0x1>
    3ee2:	e0 93 47 0f 	sts	0x0F47, r30	; 0x800f47 <pxOverflowTimerList>
    xTimeNow = xTaskGetTickCount();

    if( xTimeNow < xLastTime )
    {
        prvSwitchTimerLists();
        *pxTimerListsWereSwitched = pdTRUE;
    3ee6:	81 e0       	ldi	r24, 0x01	; 1
    3ee8:	f6 01       	movw	r30, r12
    3eea:	80 83       	st	Z, r24
    3eec:	02 c0       	rjmp	.+4      	; 0x3ef2 <prvSampleTimeNow+0xbc>
    }
    else
    {
        *pxTimerListsWereSwitched = pdFALSE;
    3eee:	f6 01       	movw	r30, r12
    3ef0:	10 82       	st	Z, r1
    }

    xLastTime = xTimeNow;
    3ef2:	f0 92 42 0f 	sts	0x0F42, r15	; 0x800f42 <xLastTime.2397+0x1>
    3ef6:	e0 92 41 0f 	sts	0x0F41, r14	; 0x800f41 <xLastTime.2397>

    return xTimeNow;
}
    3efa:	c7 01       	movw	r24, r14
    3efc:	df 91       	pop	r29
    3efe:	cf 91       	pop	r28
    3f00:	1f 91       	pop	r17
    3f02:	0f 91       	pop	r16
    3f04:	ff 90       	pop	r15
    3f06:	ef 90       	pop	r14
    3f08:	df 90       	pop	r13
    3f0a:	cf 90       	pop	r12
    3f0c:	bf 90       	pop	r11
    3f0e:	af 90       	pop	r10
    3f10:	08 95       	ret

00003f12 <prvTimerTask>:
    pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
}
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
    3f12:	cf 93       	push	r28
    3f14:	df 93       	push	r29
    3f16:	00 d0       	rcall	.+0      	; 0x3f18 <prvTimerTask+0x6>
    3f18:	00 d0       	rcall	.+0      	; 0x3f1a <prvTimerTask+0x8>
    3f1a:	cd b7       	in	r28, 0x3d	; 61
    3f1c:	de b7       	in	r29, 0x3e	; 62
        /* Obtain the time now to make an assessment as to whether the timer
        has expired or not.  If obtaining the time causes the lists to switch
        then don't process this timer as any timers that remained in the list
        when the lists were switched will have been processed within the
        prvSampleTimeNow() function. */
        xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    3f1e:	ce 01       	movw	r24, r28
    3f20:	01 96       	adiw	r24, 0x01	; 1
    3f22:	4c 01       	movw	r8, r24
                case when the current timer list is empty. */
                if( xListWasEmpty != pdFALSE )
                {
                    /* The current timer list is empty - is the overflow list
                    also empty? */
                    xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    3f24:	44 24       	eor	r4, r4
    3f26:	43 94       	inc	r4
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    }
    else
    {
        /* Ensure the task unblocks when the tick count rolls over. */
        xNextExpireTime = ( TickType_t ) 0U;
    3f28:	e1 2c       	mov	r14, r1
    3f2a:	f1 2c       	mov	r15, r1
                case when the current timer list is empty. */
                if( xListWasEmpty != pdFALSE )
                {
                    /* The current timer list is empty - is the overflow list
                    also empty? */
                    xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    3f2c:	51 2c       	mov	r5, r1
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

    while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    3f2e:	c8 2e       	mov	r12, r24
    3f30:	d9 2c       	mov	r13, r9
    the timer with the nearest expiry time will expire.  If there are no
    active timers then just set the next expire time to 0.  That will cause
    this task to unblock when the tick count overflows, at which point the
    timer lists will be switched and the next expiry time can be
    re-assessed.  */
    *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    3f32:	e0 91 49 0f 	lds	r30, 0x0F49	; 0x800f49 <pxCurrentTimerList>
    3f36:	f0 91 4a 0f 	lds	r31, 0x0F4A	; 0x800f4a <pxCurrentTimerList+0x1>
    3f3a:	80 81       	ld	r24, Z
    if( *pxListWasEmpty == pdFALSE )
    3f3c:	88 23       	and	r24, r24
    3f3e:	09 f4       	brne	.+2      	; 0x3f42 <prvTimerTask+0x30>
    3f40:	b0 c0       	rjmp	.+352    	; 0x40a2 <prvTimerTask+0x190>
    {
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    3f42:	05 80       	ldd	r0, Z+5	; 0x05
    3f44:	f6 81       	ldd	r31, Z+6	; 0x06
    3f46:	e0 2d       	mov	r30, r0
    3f48:	a0 80       	ld	r10, Z
    3f4a:	b1 80       	ldd	r11, Z+1	; 0x01
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

    vTaskSuspendAll();
    3f4c:	ec da       	rcall	.-2600   	; 0x3526 <vTaskSuspendAll>
        /* Obtain the time now to make an assessment as to whether the timer
        has expired or not.  If obtaining the time causes the lists to switch
        then don't process this timer as any timers that remained in the list
        when the lists were switched will have been processed within the
        prvSampleTimeNow() function. */
        xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    3f4e:	c4 01       	movw	r24, r8
    3f50:	72 df       	rcall	.-284    	; 0x3e36 <prvSampleTimeNow>
    3f52:	8c 01       	movw	r16, r24
        if( xTimerListsWereSwitched == pdFALSE )
    3f54:	89 81       	ldd	r24, Y+1	; 0x01
    3f56:	81 11       	cpse	r24, r1
    3f58:	42 c0       	rjmp	.+132    	; 0x3fde <prvTimerTask+0xcc>
        {
            /* The tick count has not overflowed, has the timer expired? */
            if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    3f5a:	0a 15       	cp	r16, r10
    3f5c:	1b 05       	cpc	r17, r11
            {
                ( void ) xTaskResumeAll();
    3f5e:	80 f1       	brcs	.+96     	; 0x3fc0 <prvTimerTask+0xae>
    3f60:	a9 db       	rcall	.-2222   	; 0x36b4 <xTaskResumeAll>
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    3f62:	e0 91 49 0f 	lds	r30, 0x0F49	; 0x800f49 <pxCurrentTimerList>
    3f66:	f0 91 4a 0f 	lds	r31, 0x0F4A	; 0x800f4a <pxCurrentTimerList+0x1>
    3f6a:	05 80       	ldd	r0, Z+5	; 0x05
    3f6c:	f6 81       	ldd	r31, Z+6	; 0x06
    3f6e:	e0 2d       	mov	r30, r0
    3f70:	66 80       	ldd	r6, Z+6	; 0x06
    3f72:	77 80       	ldd	r7, Z+7	; 0x07

    /* Remove the timer from the list of active timers.  A check has already
    been performed to ensure the list is not empty. */
    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    3f74:	c3 01       	movw	r24, r6
    3f76:	02 96       	adiw	r24, 0x02	; 2
    3f78:	0e 94 0c 14 	call	0x2818	; 0x2818 <uxListRemove>
    traceTIMER_EXPIRED( pxTimer );

    /* If the timer is an auto reload timer then calculate the next
    expiry time and re-insert the timer in the list of active timers. */
    if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    3f7c:	d3 01       	movw	r26, r6
    3f7e:	1e 96       	adiw	r26, 0x0e	; 14
    3f80:	8c 91       	ld	r24, X
    3f82:	1e 97       	sbiw	r26, 0x0e	; 14
    3f84:	81 30       	cpi	r24, 0x01	; 1
    3f86:	a1 f4       	brne	.+40     	; 0x3fb0 <prvTimerTask+0x9e>
    {
        /* The timer is inserted into a list using a time relative to anything
        other than the current time.  It will therefore be inserted into the
        correct list relative to the time this task thinks it is now. */
        if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    3f88:	1c 96       	adiw	r26, 0x0c	; 12
    3f8a:	6d 91       	ld	r22, X+
    3f8c:	7c 91       	ld	r23, X
    3f8e:	1d 97       	sbiw	r26, 0x0d	; 13
    3f90:	6a 0d       	add	r22, r10
    3f92:	7b 1d       	adc	r23, r11
    3f94:	95 01       	movw	r18, r10
    3f96:	a8 01       	movw	r20, r16
    3f98:	c3 01       	movw	r24, r6
    3f9a:	63 de       	rcall	.-826    	; 0x3c62 <prvInsertTimerInActiveList>
    3f9c:	88 23       	and	r24, r24
    3f9e:	41 f0       	breq	.+16     	; 0x3fb0 <prvTimerTask+0x9e>
        {
            /* The timer expired before it was added to the active timer
            list.  Reload it now.  */
            xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    3fa0:	0e 2d       	mov	r16, r14
    3fa2:	1f 2d       	mov	r17, r15
    3fa4:	2e 2d       	mov	r18, r14
    3fa6:	3f 2d       	mov	r19, r15
    3fa8:	a5 01       	movw	r20, r10
    3faa:	65 2d       	mov	r22, r5
    3fac:	c3 01       	movw	r24, r6
    3fae:	fd de       	rcall	.-518    	; 0x3daa <xTimerGenericCommand>
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* Call the timer callback. */
    pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    3fb0:	d3 01       	movw	r26, r6
    3fb2:	51 96       	adiw	r26, 0x11	; 17
    3fb4:	ed 91       	ld	r30, X+
    3fb6:	fc 91       	ld	r31, X
    3fb8:	52 97       	sbiw	r26, 0x12	; 18
    3fba:	c3 01       	movw	r24, r6
    3fbc:	19 95       	eicall
    3fbe:	64 c0       	rjmp	.+200    	; 0x4088 <prvTimerTask+0x176>
        prvSampleTimeNow() function. */
        xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
        if( xTimerListsWereSwitched == pdFALSE )
        {
            /* The tick count has not overflowed, has the timer expired? */
            if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    3fc0:	45 2d       	mov	r20, r5
                    /* The current timer list is empty - is the overflow list
                    also empty? */
                    xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
                }

                vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    3fc2:	b5 01       	movw	r22, r10
    3fc4:	60 1b       	sub	r22, r16
    3fc6:	71 0b       	sbc	r23, r17
    3fc8:	80 91 45 0f 	lds	r24, 0x0F45	; 0x800f45 <xTimerQueue>
    3fcc:	90 91 46 0f 	lds	r25, 0x0F46	; 0x800f46 <xTimerQueue+0x1>

                if( xTaskResumeAll() == pdFALSE )
    3fd0:	ee d8       	rcall	.-3620   	; 0x31ae <vQueueWaitForMessageRestricted>
    3fd2:	70 db       	rcall	.-2336   	; 0x36b4 <xTaskResumeAll>
    3fd4:	81 11       	cpse	r24, r1
                {
                    /* Yield to wait for either a command to arrive, or the
                    block time to expire.  If a command arrived between the
                    critical section being exited and this yield then the yield
                    will not cause the task to block. */
                    portYIELD_WITHIN_API();
    3fd6:	58 c0       	rjmp	.+176    	; 0x4088 <prvTimerTask+0x176>
    3fd8:	0e 94 e1 14 	call	0x29c2	; 0x29c2 <vPortYield>
                }
            }
        }
        else
        {
            ( void ) xTaskResumeAll();
    3fdc:	55 c0       	rjmp	.+170    	; 0x4088 <prvTimerTask+0x176>
    3fde:	6a db       	rcall	.-2348   	; 0x36b4 <xTaskResumeAll>
    3fe0:	53 c0       	rjmp	.+166    	; 0x4088 <prvTimerTask+0x176>
        }
        #endif /* INCLUDE_xTimerPendFunctionCall */

        /* Commands that are positive are timer commands rather than pended
        function calls. */
        if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    3fe2:	89 81       	ldd	r24, Y+1	; 0x01
    3fe4:	88 23       	and	r24, r24
    3fe6:	0c f4       	brge	.+2      	; 0x3fea <prvTimerTask+0xd8>
    3fe8:	4f c0       	rjmp	.+158    	; 0x4088 <prvTimerTask+0x176>
        {
            /* The messages uses the xTimerParameters member to work on a
            software timer. */
            pxTimer = xMessage.u.xTimerParameters.pxTimer;
    3fea:	ac 80       	ldd	r10, Y+4	; 0x04
    3fec:	bd 80       	ldd	r11, Y+5	; 0x05

        if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    3fee:	f5 01       	movw	r30, r10
    3ff0:	82 85       	ldd	r24, Z+10	; 0x0a
    3ff2:	93 85       	ldd	r25, Z+11	; 0x0b
    3ff4:	89 2b       	or	r24, r25
            {
                /* The timer is in a list, remove it. */
                ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    3ff6:	21 f0       	breq	.+8      	; 0x4000 <prvTimerTask+0xee>
    3ff8:	c5 01       	movw	r24, r10
    3ffa:	02 96       	adiw	r24, 0x02	; 2
    3ffc:	0e 94 0c 14 	call	0x2818	; 0x2818 <uxListRemove>
            it must be present in the function call.  prvSampleTimeNow() must be
            called after the message is received from xTimerQueue so there is no
            possibility of a higher priority task adding a message to the message
            queue with a time that is ahead of the timer daemon task (because it
            pre-empted the timer daemon task after the xTimeNow value was set). */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    4000:	ce 01       	movw	r24, r28
    4002:	06 96       	adiw	r24, 0x06	; 6
    4004:	18 df       	rcall	.-464    	; 0x3e36 <prvSampleTimeNow>
    4006:	ac 01       	movw	r20, r24

            switch( xMessage.xMessageID )
    4008:	99 81       	ldd	r25, Y+1	; 0x01
    400a:	94 30       	cpi	r25, 0x04	; 4
    400c:	89 f1       	breq	.+98     	; 0x4070 <prvTimerTask+0x15e>
    400e:	1c f4       	brge	.+6      	; 0x4016 <prvTimerTask+0x104>
    4010:	93 30       	cpi	r25, 0x03	; 3
    4012:	d0 f5       	brcc	.+116    	; 0x4088 <prvTimerTask+0x176>
    4014:	07 c0       	rjmp	.+14     	; 0x4024 <prvTimerTask+0x112>
    4016:	96 30       	cpi	r25, 0x06	; 6
    4018:	bc f1       	brlt	.+110    	; 0x4088 <prvTimerTask+0x176>
    401a:	98 30       	cpi	r25, 0x08	; 8
    401c:	1c f0       	brlt	.+6      	; 0x4024 <prvTimerTask+0x112>
    401e:	99 30       	cpi	r25, 0x09	; 9
    4020:	39 f1       	breq	.+78     	; 0x4070 <prvTimerTask+0x15e>
    4022:	32 c0       	rjmp	.+100    	; 0x4088 <prvTimerTask+0x176>
                case tmrCOMMAND_START_FROM_ISR :
                case tmrCOMMAND_RESET :
                case tmrCOMMAND_RESET_FROM_ISR :
                case tmrCOMMAND_START_DONT_TRACE :
                    /* Start or restart a timer. */
                    if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    4024:	2a 81       	ldd	r18, Y+2	; 0x02
    4026:	3b 81       	ldd	r19, Y+3	; 0x03
    4028:	d5 01       	movw	r26, r10
    402a:	1c 96       	adiw	r26, 0x0c	; 12
    402c:	6d 91       	ld	r22, X+
    402e:	7c 91       	ld	r23, X
    4030:	1d 97       	sbiw	r26, 0x0d	; 13
    4032:	62 0f       	add	r22, r18
    4034:	73 1f       	adc	r23, r19
    4036:	c5 01       	movw	r24, r10
    4038:	14 de       	rcall	.-984    	; 0x3c62 <prvInsertTimerInActiveList>
    403a:	88 23       	and	r24, r24
    403c:	29 f1       	breq	.+74     	; 0x4088 <prvTimerTask+0x176>
                    {
                        /* The timer expired before it was added to the active
                        timer list.  Process it now. */
                        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    403e:	d5 01       	movw	r26, r10
    4040:	51 96       	adiw	r26, 0x11	; 17
    4042:	ed 91       	ld	r30, X+
    4044:	fc 91       	ld	r31, X
    4046:	52 97       	sbiw	r26, 0x12	; 18
    4048:	c5 01       	movw	r24, r10
    404a:	19 95       	eicall
                        traceTIMER_EXPIRED( pxTimer );

                        if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    404c:	f5 01       	movw	r30, r10
    404e:	86 85       	ldd	r24, Z+14	; 0x0e
    4050:	81 30       	cpi	r24, 0x01	; 1
    4052:	d1 f4       	brne	.+52     	; 0x4088 <prvTimerTask+0x176>
                        {
                            xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    4054:	4a 81       	ldd	r20, Y+2	; 0x02
    4056:	5b 81       	ldd	r21, Y+3	; 0x03
    4058:	84 85       	ldd	r24, Z+12	; 0x0c
    405a:	95 85       	ldd	r25, Z+13	; 0x0d
    405c:	48 0f       	add	r20, r24
    405e:	59 1f       	adc	r21, r25
    4060:	0e 2d       	mov	r16, r14
    4062:	1f 2d       	mov	r17, r15
    4064:	2e 2d       	mov	r18, r14
    4066:	3f 2d       	mov	r19, r15
    4068:	65 2d       	mov	r22, r5
    406a:	c5 01       	movw	r24, r10
    406c:	9e de       	rcall	.-708    	; 0x3daa <xTimerGenericCommand>
    406e:	0c c0       	rjmp	.+24     	; 0x4088 <prvTimerTask+0x176>
                    There is nothing to do here. */
                    break;

                case tmrCOMMAND_CHANGE_PERIOD :
                case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
                    pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    4070:	6a 81       	ldd	r22, Y+2	; 0x02
    4072:	7b 81       	ldd	r23, Y+3	; 0x03
    4074:	d5 01       	movw	r26, r10
    4076:	1d 96       	adiw	r26, 0x0d	; 13
    4078:	7c 93       	st	X, r23
    407a:	6e 93       	st	-X, r22
                    be longer or shorter than the old one.  The command time is
                    therefore set to the current time, and as the period cannot
                    be zero the next expiry time can only be in the future,
                    meaning (unlike for the xTimerStart() case above) there is
                    no fail case that needs to be handled here. */
                    ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    407c:	1c 97       	sbiw	r26, 0x0c	; 12
    407e:	64 0f       	add	r22, r20
    4080:	75 1f       	adc	r23, r21
    4082:	9a 01       	movw	r18, r20
    4084:	c5 01       	movw	r24, r10
    4086:	ed dd       	rcall	.-1062   	; 0x3c62 <prvInsertTimerInActiveList>
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

    while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    4088:	4e 2d       	mov	r20, r14
    408a:	5f 2d       	mov	r21, r15
    408c:	6c 2d       	mov	r22, r12
    408e:	7d 2d       	mov	r23, r13
    4090:	80 91 45 0f 	lds	r24, 0x0F45	; 0x800f45 <xTimerQueue>
    4094:	90 91 46 0f 	lds	r25, 0x0F46	; 0x800f46 <xTimerQueue+0x1>
    4098:	0e 94 93 17 	call	0x2f26	; 0x2f26 <xQueueReceive>
    409c:	81 11       	cpse	r24, r1
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

    vTaskSuspendAll();
    409e:	a1 cf       	rjmp	.-190    	; 0x3fe2 <prvTimerTask+0xd0>
    40a0:	48 cf       	rjmp	.-368    	; 0x3f32 <prvTimerTask+0x20>
        /* Obtain the time now to make an assessment as to whether the timer
        has expired or not.  If obtaining the time causes the lists to switch
        then don't process this timer as any timers that remained in the list
        when the lists were switched will have been processed within the
        prvSampleTimeNow() function. */
        xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    40a2:	41 da       	rcall	.-2942   	; 0x3526 <vTaskSuspendAll>
    40a4:	c4 01       	movw	r24, r8
    40a6:	c7 de       	rcall	.-626    	; 0x3e36 <prvSampleTimeNow>
    40a8:	8c 01       	movw	r16, r24
        if( xTimerListsWereSwitched == pdFALSE )
    40aa:	89 81       	ldd	r24, Y+1	; 0x01
    40ac:	81 11       	cpse	r24, r1
    40ae:	97 cf       	rjmp	.-210    	; 0x3fde <prvTimerTask+0xcc>
                case when the current timer list is empty. */
                if( xListWasEmpty != pdFALSE )
                {
                    /* The current timer list is empty - is the overflow list
                    also empty? */
                    xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    40b0:	e0 91 47 0f 	lds	r30, 0x0F47	; 0x800f47 <pxOverflowTimerList>
    40b4:	f0 91 48 0f 	lds	r31, 0x0F48	; 0x800f48 <pxOverflowTimerList+0x1>
    40b8:	80 81       	ld	r24, Z
    40ba:	44 2d       	mov	r20, r4
    40bc:	81 11       	cpse	r24, r1
    40be:	45 2d       	mov	r20, r5
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    }
    else
    {
        /* Ensure the task unblocks when the tick count rolls over. */
        xNextExpireTime = ( TickType_t ) 0U;
    40c0:	ae 2c       	mov	r10, r14
    40c2:	bf 2c       	mov	r11, r15
    40c4:	7e cf       	rjmp	.-260    	; 0x3fc2 <prvTimerTask+0xb0>

000040c6 <RTOS_sync_init>:
static StaticSemaphore_t LCD_mutex_Buffer;



void RTOS_sync_init(void)
{
    40c6:	0f 93       	push	r16
    LCD_mutex_handle = xSemaphoreCreateBinaryStatic( &LCD_mutex_Buffer );
    40c8:	03 e0       	ldi	r16, 0x03	; 3
    40ca:	2b e4       	ldi	r18, 0x4B	; 75
    40cc:	3f e0       	ldi	r19, 0x0F	; 15
    40ce:	40 e0       	ldi	r20, 0x00	; 0
    40d0:	50 e0       	ldi	r21, 0x00	; 0
    40d2:	60 e0       	ldi	r22, 0x00	; 0
    40d4:	81 e0       	ldi	r24, 0x01	; 1
    40d6:	0e 94 b4 16 	call	0x2d68	; 0x2d68 <xQueueGenericCreateStatic>
    40da:	90 93 42 1a 	sts	0x1A42, r25	; 0x801a42 <LCD_mutex_handle+0x1>
    40de:	80 93 41 1a 	sts	0x1A41, r24	; 0x801a41 <LCD_mutex_handle>
	xSemaphoreGive(LCD_mutex_handle);
    40e2:	20 e0       	ldi	r18, 0x00	; 0
    40e4:	40 e0       	ldi	r20, 0x00	; 0
    40e6:	50 e0       	ldi	r21, 0x00	; 0
    40e8:	60 e0       	ldi	r22, 0x00	; 0
    40ea:	70 e0       	ldi	r23, 0x00	; 0
    40ec:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <xQueueGenericSend>
    40f0:	0f 91       	pop	r16
    40f2:	08 95       	ret

000040f4 <Drum_speed_Tasks_init>:
#include "../RTE/RTE_drum.h"



void Drum_speed_Tasks_init(void){
	Drum_speed_init();
    40f4:	0c 94 07 01 	jmp	0x20e	; 0x20e <Drum_speed_init>
    40f8:	08 95       	ret

000040fa <LCD_main_err_Init>:

void (*g_callback_read_timeout)(void) = NULL;
void (*g_callback_write_timeout)(void) = NULL;

void LCD_main_err_Init( void(*callback_read_timeout)(void) , void(*callback_write_timeout)(void)){
	g_callback_read_timeout = callback_read_timeout;
    40fa:	90 93 6d 0f 	sts	0x0F6D, r25	; 0x800f6d <g_callback_read_timeout+0x1>
    40fe:	80 93 6c 0f 	sts	0x0F6C, r24	; 0x800f6c <g_callback_read_timeout>
	g_callback_write_timeout = callback_write_timeout;
    4102:	70 93 6b 0f 	sts	0x0F6B, r23	; 0x800f6b <g_callback_write_timeout+0x1>
    4106:	60 93 6a 0f 	sts	0x0F6A, r22	; 0x800f6a <g_callback_write_timeout>
    410a:	08 95       	ret

0000410c <LCD_main_Report_error>:
}


uint8_t LCD_main_Report_error(uint16_t PIC_ID){
    410c:	0f 93       	push	r16
    410e:	1f 93       	push	r17
    4110:	cf 93       	push	r28
    4112:	df 93       	push	r29
    4114:	8c 01       	movw	r16, r24
    4116:	c6 e0       	ldi	r28, 0x06	; 6
	uint8_t res = SUCCESS;
	uint8_t count = 0;
	while(1){
		xSemaphoreTake(LCD_mutex_handle , portMAX_DELAY);
    4118:	6f ef       	ldi	r22, 0xFF	; 255
    411a:	7f ef       	ldi	r23, 0xFF	; 255
    411c:	80 91 41 1a 	lds	r24, 0x1A41	; 0x801a41 <LCD_mutex_handle>
    4120:	90 91 42 1a 	lds	r25, 0x1A42	; 0x801a42 <LCD_mutex_handle+0x1>
    4124:	0e 94 1c 18 	call	0x3038	; 0x3038 <xQueueSemaphoreTake>
		res = lcd_Jump_to(PIC_ID);
    4128:	c8 01       	movw	r24, r16
    412a:	0e 94 c0 01 	call	0x380	; 0x380 <lcd_Jump_to>
    412e:	d8 2f       	mov	r29, r24
		xSemaphoreGive(LCD_mutex_handle);
    4130:	20 e0       	ldi	r18, 0x00	; 0
    4132:	40 e0       	ldi	r20, 0x00	; 0
    4134:	50 e0       	ldi	r21, 0x00	; 0
    4136:	60 e0       	ldi	r22, 0x00	; 0
    4138:	70 e0       	ldi	r23, 0x00	; 0
    413a:	80 91 41 1a 	lds	r24, 0x1A41	; 0x801a41 <LCD_mutex_handle>
    413e:	90 91 42 1a 	lds	r25, 0x1A42	; 0x801a42 <LCD_mutex_handle+0x1>
    4142:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <xQueueGenericSend>
		if(res == LCD_RESPONCE_TIMED_OUT) {count++;}
    4146:	d2 3e       	cpi	r29, 0xE2	; 226
    4148:	71 f4       	brne	.+28     	; 0x4166 <LCD_main_Report_error+0x5a>
    414a:	c1 50       	subi	r28, 0x01	; 1
		else {break;}
		if(count == 6){
    414c:	41 f4       	brne	.+16     	; 0x415e <LCD_main_Report_error+0x52>
			if(g_callback_write_timeout == NULL){}
    414e:	e0 91 6a 0f 	lds	r30, 0x0F6A	; 0x800f6a <g_callback_write_timeout>
    4152:	f0 91 6b 0f 	lds	r31, 0x0F6B	; 0x800f6b <g_callback_write_timeout+0x1>
    4156:	30 97       	sbiw	r30, 0x00	; 0
    4158:	31 f0       	breq	.+12     	; 0x4166 <LCD_main_Report_error+0x5a>
			else{
				g_callback_write_timeout();
    415a:	19 95       	eicall
    415c:	04 c0       	rjmp	.+8      	; 0x4166 <LCD_main_Report_error+0x5a>
			}
			break;
		}
		vTaskDelay(200/portTICK_PERIOD_MS);
    415e:	8c e0       	ldi	r24, 0x0C	; 12
    4160:	90 e0       	ldi	r25, 0x00	; 0
    4162:	21 db       	rcall	.-2494   	; 0x37a6 <vTaskDelay>
	}
    4164:	d9 cf       	rjmp	.-78     	; 0x4118 <LCD_main_Report_error+0xc>
	return res;
}
    4166:	8d 2f       	mov	r24, r29
    4168:	df 91       	pop	r29
    416a:	cf 91       	pop	r28
    416c:	1f 91       	pop	r17
    416e:	0f 91       	pop	r16
    4170:	08 95       	ret

00004172 <LCD_main_wait_error_response>:


uint8_t LCD_main_wait_error_response(uint16_t Response_address, uint16_t* response){
    4172:	ef 92       	push	r14
    4174:	ff 92       	push	r15
    4176:	0f 93       	push	r16
    4178:	1f 93       	push	r17
    417a:	cf 93       	push	r28
    417c:	df 93       	push	r29
    417e:	8c 01       	movw	r16, r24
    4180:	7b 01       	movw	r14, r22
	
	uint8_t res = SUCCESS;
	uint8_t count = 0;
	* response = 0;
    4182:	fb 01       	movw	r30, r22
    4184:	11 82       	std	Z+1, r1	; 0x01
    4186:	10 82       	st	Z, r1
    4188:	c0 e0       	ldi	r28, 0x00	; 0
	while (*response == 0)
	{
		xSemaphoreTake(LCD_mutex_handle , portMAX_DELAY);
    418a:	6f ef       	ldi	r22, 0xFF	; 255
    418c:	7f ef       	ldi	r23, 0xFF	; 255
    418e:	80 91 41 1a 	lds	r24, 0x1A41	; 0x801a41 <LCD_mutex_handle>
    4192:	90 91 42 1a 	lds	r25, 0x1A42	; 0x801a42 <LCD_mutex_handle+0x1>
    4196:	0e 94 1c 18 	call	0x3038	; 0x3038 <xQueueSemaphoreTake>
		res = Lcd_Read(Response_address , response);
    419a:	b7 01       	movw	r22, r14
    419c:	c8 01       	movw	r24, r16
    419e:	0e 94 9d 01 	call	0x33a	; 0x33a <Lcd_Read>
    41a2:	d8 2f       	mov	r29, r24
		xSemaphoreGive(LCD_mutex_handle);
    41a4:	20 e0       	ldi	r18, 0x00	; 0
    41a6:	40 e0       	ldi	r20, 0x00	; 0
    41a8:	50 e0       	ldi	r21, 0x00	; 0
    41aa:	60 e0       	ldi	r22, 0x00	; 0
    41ac:	70 e0       	ldi	r23, 0x00	; 0
    41ae:	80 91 41 1a 	lds	r24, 0x1A41	; 0x801a41 <LCD_mutex_handle>
    41b2:	90 91 42 1a 	lds	r25, 0x1A42	; 0x801a42 <LCD_mutex_handle+0x1>
    41b6:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <xQueueGenericSend>
		
		if(res == LCD_RESPONCE_TIMED_OUT) count++;
    41ba:	d2 3e       	cpi	r29, 0xE2	; 226
    41bc:	59 f4       	brne	.+22     	; 0x41d4 <LCD_main_wait_error_response+0x62>
    41be:	cf 5f       	subi	r28, 0xFF	; 255
		else { count = 0;}
		
		if(count == 6 ){
    41c0:	c6 30       	cpi	r28, 0x06	; 6
    41c2:	49 f4       	brne	.+18     	; 0x41d6 <LCD_main_wait_error_response+0x64>
			if(g_callback_read_timeout == NULL){}
    41c4:	e0 91 6c 0f 	lds	r30, 0x0F6C	; 0x800f6c <g_callback_read_timeout>
    41c8:	f0 91 6d 0f 	lds	r31, 0x0F6D	; 0x800f6d <g_callback_read_timeout+0x1>
    41cc:	30 97       	sbiw	r30, 0x00	; 0
    41ce:	59 f0       	breq	.+22     	; 0x41e6 <LCD_main_wait_error_response+0x74>
			else
			{
				g_callback_read_timeout();
    41d0:	19 95       	eicall
    41d2:	09 c0       	rjmp	.+18     	; 0x41e6 <LCD_main_wait_error_response+0x74>
		xSemaphoreTake(LCD_mutex_handle , portMAX_DELAY);
		res = Lcd_Read(Response_address , response);
		xSemaphoreGive(LCD_mutex_handle);
		
		if(res == LCD_RESPONCE_TIMED_OUT) count++;
		else { count = 0;}
    41d4:	c0 e0       	ldi	r28, 0x00	; 0
			{
				g_callback_read_timeout();
			}
			break;
		}
		vTaskDelay(200/portTICK_PERIOD_MS);
    41d6:	8c e0       	ldi	r24, 0x0C	; 12
    41d8:	90 e0       	ldi	r25, 0x00	; 0
    41da:	e5 da       	rcall	.-2614   	; 0x37a6 <vTaskDelay>
uint8_t LCD_main_wait_error_response(uint16_t Response_address, uint16_t* response){
	
	uint8_t res = SUCCESS;
	uint8_t count = 0;
	* response = 0;
	while (*response == 0)
    41dc:	f7 01       	movw	r30, r14
    41de:	80 81       	ld	r24, Z
    41e0:	91 81       	ldd	r25, Z+1	; 0x01
    41e2:	89 2b       	or	r24, r25
    41e4:	91 f2       	breq	.-92     	; 0x418a <LCD_main_wait_error_response+0x18>
		vTaskDelay(200/portTICK_PERIOD_MS);
		
		
	}
	while(1){
		xSemaphoreTake(LCD_mutex_handle , portMAX_DELAY);
    41e6:	6f ef       	ldi	r22, 0xFF	; 255
    41e8:	7f ef       	ldi	r23, 0xFF	; 255
    41ea:	80 91 41 1a 	lds	r24, 0x1A41	; 0x801a41 <LCD_mutex_handle>
    41ee:	90 91 42 1a 	lds	r25, 0x1A42	; 0x801a42 <LCD_mutex_handle+0x1>
    41f2:	0e 94 1c 18 	call	0x3038	; 0x3038 <xQueueSemaphoreTake>
		res = Lcd_Write(Response_address , 0);
    41f6:	60 e0       	ldi	r22, 0x00	; 0
    41f8:	70 e0       	ldi	r23, 0x00	; 0
    41fa:	c8 01       	movw	r24, r16
    41fc:	0e 94 b0 01 	call	0x360	; 0x360 <Lcd_Write>
    4200:	d8 2f       	mov	r29, r24
		xSemaphoreGive(LCD_mutex_handle);
    4202:	20 e0       	ldi	r18, 0x00	; 0
    4204:	40 e0       	ldi	r20, 0x00	; 0
    4206:	50 e0       	ldi	r21, 0x00	; 0
    4208:	60 e0       	ldi	r22, 0x00	; 0
    420a:	70 e0       	ldi	r23, 0x00	; 0
    420c:	80 91 41 1a 	lds	r24, 0x1A41	; 0x801a41 <LCD_mutex_handle>
    4210:	90 91 42 1a 	lds	r25, 0x1A42	; 0x801a42 <LCD_mutex_handle+0x1>
    4214:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <xQueueGenericSend>
			
			
		if(res == LCD_RESPONCE_TIMED_OUT) {count++;}
    4218:	d2 3e       	cpi	r29, 0xE2	; 226
    421a:	79 f4       	brne	.+30     	; 0x423a <LCD_main_wait_error_response+0xc8>
    421c:	cf 5f       	subi	r28, 0xFF	; 255
		else {break;}
		if(count == 6 ){
    421e:	c6 30       	cpi	r28, 0x06	; 6
    4220:	41 f4       	brne	.+16     	; 0x4232 <LCD_main_wait_error_response+0xc0>
			if(g_callback_write_timeout == NULL){}
    4222:	e0 91 6a 0f 	lds	r30, 0x0F6A	; 0x800f6a <g_callback_write_timeout>
    4226:	f0 91 6b 0f 	lds	r31, 0x0F6B	; 0x800f6b <g_callback_write_timeout+0x1>
    422a:	30 97       	sbiw	r30, 0x00	; 0
    422c:	31 f0       	breq	.+12     	; 0x423a <LCD_main_wait_error_response+0xc8>
			else
			{
				g_callback_write_timeout();
    422e:	19 95       	eicall
    4230:	04 c0       	rjmp	.+8      	; 0x423a <LCD_main_wait_error_response+0xc8>
			}
			break;
		}
		
		vTaskDelay(200/portTICK_PERIOD_MS);
    4232:	8c e0       	ldi	r24, 0x0C	; 12
    4234:	90 e0       	ldi	r25, 0x00	; 0
    4236:	b7 da       	rcall	.-2706   	; 0x37a6 <vTaskDelay>
	}
    4238:	d6 cf       	rjmp	.-84     	; 0x41e6 <LCD_main_wait_error_response+0x74>
	return res;
}
    423a:	8d 2f       	mov	r24, r29
    423c:	df 91       	pop	r29
    423e:	cf 91       	pop	r28
    4240:	1f 91       	pop	r17
    4242:	0f 91       	pop	r16
    4244:	ff 90       	pop	r15
    4246:	ef 90       	pop	r14
    4248:	08 95       	ret

0000424a <Level_main_err_init>:

#include "../MCAL/UART.h"
 
void (*g_callback_level_sensor_fail) (void) = NULL;
void Level_main_err_init( void (*callback_level_sensor_fail) (void) ){
	 g_callback_level_sensor_fail = callback_level_sensor_fail;
    424a:	90 93 6f 0f 	sts	0x0F6F, r25	; 0x800f6f <g_callback_level_sensor_fail+0x1>
    424e:	80 93 6e 0f 	sts	0x0F6E, r24	; 0x800f6e <g_callback_level_sensor_fail>
    4252:	08 95       	ret

00004254 <Tank_out_callback>:
}

static void Tank_out_callback(void)
{
	
	g_out_liters_counter ++ ;
    4254:	80 91 74 0f 	lds	r24, 0x0F74	; 0x800f74 <g_out_liters_counter>
    4258:	90 91 75 0f 	lds	r25, 0x0F75	; 0x800f75 <g_out_liters_counter+0x1>
    425c:	01 96       	adiw	r24, 0x01	; 1
    425e:	90 93 75 0f 	sts	0x0F75, r25	; 0x800f75 <g_out_liters_counter+0x1>
    4262:	80 93 74 0f 	sts	0x0F74, r24	; 0x800f74 <g_out_liters_counter>
	if (g_out_liters_counter >= g_out_liters )
    4266:	20 91 74 0f 	lds	r18, 0x0F74	; 0x800f74 <g_out_liters_counter>
    426a:	30 91 75 0f 	lds	r19, 0x0F75	; 0x800f75 <g_out_liters_counter+0x1>
    426e:	80 91 70 0f 	lds	r24, 0x0F70	; 0x800f70 <g_out_liters>
    4272:	90 91 71 0f 	lds	r25, 0x0F71	; 0x800f71 <g_out_liters+0x1>
    4276:	28 17       	cp	r18, r24
    4278:	39 07       	cpc	r19, r25
    427a:	f0 f0       	brcs	.+60     	; 0x42b8 <Tank_out_callback+0x64>
	{
		// release the semaphore
		UART0_puts("beforrrreeeeee OWOWOWOWOOWOWOWOWOWOOWOWOWOWOOWOW");
    427c:	84 e3       	ldi	r24, 0x34	; 52
    427e:	93 e0       	ldi	r25, 0x03	; 3
    4280:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <UART0_puts>
		xSemaphoreGive(outing_Semaphore );
    4284:	20 e0       	ldi	r18, 0x00	; 0
    4286:	40 e0       	ldi	r20, 0x00	; 0
    4288:	50 e0       	ldi	r21, 0x00	; 0
    428a:	60 e0       	ldi	r22, 0x00	; 0
    428c:	70 e0       	ldi	r23, 0x00	; 0
    428e:	80 91 43 1a 	lds	r24, 0x1A43	; 0x801a43 <outing_Semaphore>
    4292:	90 91 44 1a 	lds	r25, 0x1A44	; 0x801a44 <outing_Semaphore+0x1>
    4296:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <xQueueGenericSend>
		UART0_puts("g_out_liters_counter OWOWOWOWOOWOWOWOWOWOOWOWOWOWOOWOW");
    429a:	85 e6       	ldi	r24, 0x65	; 101
    429c:	93 e0       	ldi	r25, 0x03	; 3
    429e:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <UART0_puts>
		UART0_OutUDec(g_out_liters_counter);
    42a2:	60 91 74 0f 	lds	r22, 0x0F74	; 0x800f74 <g_out_liters_counter>
    42a6:	70 91 75 0f 	lds	r23, 0x0F75	; 0x800f75 <g_out_liters_counter+0x1>
    42aa:	80 e0       	ldi	r24, 0x00	; 0
    42ac:	90 e0       	ldi	r25, 0x00	; 0
    42ae:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <UART0_OutUDec>
		UART0_putc('\n');
    42b2:	8a e0       	ldi	r24, 0x0A	; 10
    42b4:	0c 94 15 0f 	jmp	0x1e2a	; 0x1e2a <UART0_putc>
    42b8:	08 95       	ret

000042ba <Tank_feed_callback>:

static void Tank_feed_callback (void)
{
	//UART0_puts("")

	g_feeding_liters_counter ++ ;
    42ba:	80 91 76 0f 	lds	r24, 0x0F76	; 0x800f76 <g_feeding_liters_counter>
    42be:	90 91 77 0f 	lds	r25, 0x0F77	; 0x800f77 <g_feeding_liters_counter+0x1>
    42c2:	01 96       	adiw	r24, 0x01	; 1
    42c4:	90 93 77 0f 	sts	0x0F77, r25	; 0x800f77 <g_feeding_liters_counter+0x1>
    42c8:	80 93 76 0f 	sts	0x0F76, r24	; 0x800f76 <g_feeding_liters_counter>
	// keep monitoring the amount of water .
	if (g_feeding_liters_counter >= g_feed_liters )
    42cc:	20 91 76 0f 	lds	r18, 0x0F76	; 0x800f76 <g_feeding_liters_counter>
    42d0:	30 91 77 0f 	lds	r19, 0x0F77	; 0x800f77 <g_feeding_liters_counter+0x1>
    42d4:	80 91 72 0f 	lds	r24, 0x0F72	; 0x800f72 <g_feed_liters>
    42d8:	90 91 73 0f 	lds	r25, 0x0F73	; 0x800f73 <g_feed_liters+0x1>
    42dc:	28 17       	cp	r18, r24
    42de:	39 07       	cpc	r19, r25
    42e0:	f0 f0       	brcs	.+60     	; 0x431e <Tank_feed_callback+0x64>
	{
		// release the semaphore
		UART0_puts("BEFORRRRRE FWFWFWFWFWFWFWFWFWFWFWFWFWFWF");
    42e2:	8c e9       	ldi	r24, 0x9C	; 156
    42e4:	93 e0       	ldi	r25, 0x03	; 3
    42e6:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <UART0_puts>
		xSemaphoreGive(Feeding_Semaphore);
    42ea:	20 e0       	ldi	r18, 0x00	; 0
    42ec:	40 e0       	ldi	r20, 0x00	; 0
    42ee:	50 e0       	ldi	r21, 0x00	; 0
    42f0:	60 e0       	ldi	r22, 0x00	; 0
    42f2:	70 e0       	ldi	r23, 0x00	; 0
    42f4:	80 91 83 1a 	lds	r24, 0x1A83	; 0x801a83 <Feeding_Semaphore>
    42f8:	90 91 84 1a 	lds	r25, 0x1A84	; 0x801a84 <Feeding_Semaphore+0x1>
    42fc:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <xQueueGenericSend>
		UART0_puts("g_feeding_liters_counter FWFWFWFWFWFWFWFWFWFWFWFWFWFWF");
    4300:	85 ec       	ldi	r24, 0xC5	; 197
    4302:	93 e0       	ldi	r25, 0x03	; 3
    4304:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <UART0_puts>
		UART0_OutUDec(g_feeding_liters_counter);
    4308:	60 91 76 0f 	lds	r22, 0x0F76	; 0x800f76 <g_feeding_liters_counter>
    430c:	70 91 77 0f 	lds	r23, 0x0F77	; 0x800f77 <g_feeding_liters_counter+0x1>
    4310:	80 e0       	ldi	r24, 0x00	; 0
    4312:	90 e0       	ldi	r25, 0x00	; 0
    4314:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <UART0_OutUDec>
		UART0_putc('\n');
    4318:	8a e0       	ldi	r24, 0x0A	; 10
    431a:	0c 94 15 0f 	jmp	0x1e2a	; 0x1e2a <UART0_putc>
    431e:	08 95       	ret

00004320 <Tank_operation_init>:




void Tank_operation_init(void)
{
    4320:	0f 93       	push	r16
	Flow_rate_init(Tank_feed_callback , Tank_out_callback);	
    4322:	6a e2       	ldi	r22, 0x2A	; 42
    4324:	71 e2       	ldi	r23, 0x21	; 33
    4326:	8d e5       	ldi	r24, 0x5D	; 93
    4328:	91 e2       	ldi	r25, 0x21	; 33
    432a:	0e 94 25 01 	call	0x24a	; 0x24a <Flow_rate_init>
	Feeding_Semaphore = xSemaphoreCreateBinaryStatic( &feeding_SemaphoreBuffer );
    432e:	03 e0       	ldi	r16, 0x03	; 3
    4330:	24 e6       	ldi	r18, 0x64	; 100
    4332:	3a e1       	ldi	r19, 0x1A	; 26
    4334:	40 e0       	ldi	r20, 0x00	; 0
    4336:	50 e0       	ldi	r21, 0x00	; 0
    4338:	60 e0       	ldi	r22, 0x00	; 0
    433a:	81 e0       	ldi	r24, 0x01	; 1
    433c:	0e 94 b4 16 	call	0x2d68	; 0x2d68 <xQueueGenericCreateStatic>
    4340:	90 93 84 1a 	sts	0x1A84, r25	; 0x801a84 <Feeding_Semaphore+0x1>
    4344:	80 93 83 1a 	sts	0x1A83, r24	; 0x801a83 <Feeding_Semaphore>
	outing_Semaphore = xSemaphoreCreateBinaryStatic( &outing_SemaphoreBuffer );
    4348:	25 e4       	ldi	r18, 0x45	; 69
    434a:	3a e1       	ldi	r19, 0x1A	; 26
    434c:	40 e0       	ldi	r20, 0x00	; 0
    434e:	50 e0       	ldi	r21, 0x00	; 0
    4350:	60 e0       	ldi	r22, 0x00	; 0
    4352:	81 e0       	ldi	r24, 0x01	; 1
    4354:	0e 94 b4 16 	call	0x2d68	; 0x2d68 <xQueueGenericCreateStatic>
    4358:	90 93 44 1a 	sts	0x1A44, r25	; 0x801a44 <outing_Semaphore+0x1>
    435c:	80 93 43 1a 	sts	0x1A43, r24	; 0x801a43 <outing_Semaphore>
}
    4360:	0f 91       	pop	r16
    4362:	08 95       	ret

00004364 <Temp_main_err_init>:
*Parameters @ Nothing
*return Nothing 
*/
void (*over_temp_callback)(void) = NULL;
void Temp_main_err_init( void (*callback_over_temp) (void) ){
	over_temp_callback = callback_over_temp;
    4364:	90 93 79 0f 	sts	0x0F79, r25	; 0x800f79 <over_temp_callback+0x1>
    4368:	80 93 78 0f 	sts	0x0F78, r24	; 0x800f78 <over_temp_callback>
    436c:	08 95       	ret

0000436e <Temp_main>:
}

void Temp_main(void* pvParameters){
	uint16_t current_temp=0;
	uint8_t count=0;
    436e:	10 e0       	ldi	r17, 0x00	; 0
	//uint16_t x_time = 0;
	while (1)
	{
		UART0_puts("Temp task alive\n");
    4370:	88 e6       	ldi	r24, 0x68	; 104
    4372:	94 e0       	ldi	r25, 0x04	; 4
    4374:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <UART0_puts>
		//x_time = Get_millis();
		current_temp = temp_read();
    4378:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <temp_read>
    437c:	ec 01       	movw	r28, r24
		//UART0_puts("current temp = ");
 		//UART0_OutUDec(current_temp);
 		//UART0_putc('\n');
		if(current_temp > TEMP_OVER_TEMP){
    437e:	cd 97       	sbiw	r24, 0x3d	; 61
    4380:	50 f0       	brcs	.+20     	; 0x4396 <Temp_main+0x28>
			count++;
    4382:	1f 5f       	subi	r17, 0xFF	; 255
			if(count >= TEMP_OVER_TEMP_STILL_TIME){
    4384:	16 30       	cpi	r17, 0x06	; 6
    4386:	38 f0       	brcs	.+14     	; 0x4396 <Temp_main+0x28>
				//callback
				if(over_temp_callback == NULL){
    4388:	e0 91 78 0f 	lds	r30, 0x0F78	; 0x800f78 <over_temp_callback>
    438c:	f0 91 79 0f 	lds	r31, 0x0F79	; 0x800f79 <over_temp_callback+0x1>
    4390:	30 97       	sbiw	r30, 0x00	; 0
    4392:	09 f0       	breq	.+2      	; 0x4396 <Temp_main+0x28>
					
				}
				else
				{
					 over_temp_callback();
    4394:	19 95       	eicall
				}
			}
		}
		// set temp for LCD 
		RTE_set_Current_temperature(current_temp);
    4396:	ce 01       	movw	r24, r28
    4398:	0e 94 67 13 	call	0x26ce	; 0x26ce <RTE_set_Current_temperature>
		// set the temp for the application .
		RTE_set_app_Current_temperature(current_temp);
    439c:	ce 01       	movw	r24, r28
    439e:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <RTE_set_app_Current_temperature>
		//x_time =  Get_millis() - x_time ;
		//UART0_puts("temp ex time = ");
		//UART0_OutUDec(x_time);
		//UART0_putc('\n');
		vTaskDelay(50/portTICK_PERIOD_MS) ;
    43a2:	83 e0       	ldi	r24, 0x03	; 3
    43a4:	90 e0       	ldi	r25, 0x00	; 0
    43a6:	ff d9       	rcall	.-3074   	; 0x37a6 <vTaskDelay>
	}
    43a8:	e3 cf       	rjmp	.-58     	; 0x4370 <Temp_main+0x2>

000043aa <System_init>:


gSystemError System_init(void){
	
	gSystemError res = E_OK;
	DIO_init();
    43aa:	0e 94 b0 0b 	call	0x1760	; 0x1760 <DIO_init>
	millis_init();	
    43ae:	2e d0       	rcall	.+92     	; 0x440c <millis_init>
	Service_error_init();
    43b0:	0e 94 6f 0a 	call	0x14de	; 0x14de <Service_error_init>
	RTE_init();
    43b4:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <RTE_init>
	RTOS_sync_init();
    43b8:	86 de       	rcall	.-756    	; 0x40c6 <RTOS_sync_init>
	temp_init(0);
    43ba:	80 e0       	ldi	r24, 0x00	; 0
    43bc:	0e 94 e7 09 	call	0x13ce	; 0x13ce <temp_init>
	Inverter_init(UART1,38400,3);
    43c0:	23 e0       	ldi	r18, 0x03	; 3
    43c2:	40 e0       	ldi	r20, 0x00	; 0
    43c4:	56 e9       	ldi	r21, 0x96	; 150
    43c6:	60 e0       	ldi	r22, 0x00	; 0
    43c8:	70 e0       	ldi	r23, 0x00	; 0
    43ca:	81 e0       	ldi	r24, 0x01	; 1
    43cc:	0e 94 62 01 	call	0x2c4	; 0x2c4 <Inverter_init>
	Lcd_init(UART3,115200,1);
    43d0:	21 e0       	ldi	r18, 0x01	; 1
    43d2:	40 e0       	ldi	r20, 0x00	; 0
    43d4:	52 ec       	ldi	r21, 0xC2	; 194
    43d6:	61 e0       	ldi	r22, 0x01	; 1
    43d8:	70 e0       	ldi	r23, 0x00	; 0
    43da:	83 e0       	ldi	r24, 0x03	; 3
    43dc:	0e 94 85 01 	call	0x30a	; 0x30a <Lcd_init>
	Drum_speed_Tasks_init();         //fixed here because no main task
    43e0:	89 de       	rcall	.-750    	; 0x40f4 <Drum_speed_Tasks_init>
	Tank_operation_init();
    43e2:	9e df       	rcall	.-196    	; 0x4320 <Tank_operation_init>
    43e4:	80 e0       	ldi	r24, 0x00	; 0
	
	return res;

    43e6:	08 95       	ret

000043e8 <crc16_update>:

uint16_t crc16_update(uint16_t crc, uint8_t a)
{
  int i;

  crc ^= a;
    43e8:	86 27       	eor	r24, r22
    43ea:	28 e0       	ldi	r18, 0x08	; 8
    43ec:	30 e0       	ldi	r19, 0x00	; 0
  for (i = 0; i < 8; ++i)
  {
    if (crc & 1)
    43ee:	80 ff       	sbrs	r24, 0
    43f0:	07 c0       	rjmp	.+14     	; 0x4400 <crc16_update+0x18>
      crc = (crc >> 1) ^ 0xA001;
    43f2:	96 95       	lsr	r25
    43f4:	87 95       	ror	r24
    43f6:	41 e0       	ldi	r20, 0x01	; 1
    43f8:	84 27       	eor	r24, r20
    43fa:	40 ea       	ldi	r20, 0xA0	; 160
    43fc:	94 27       	eor	r25, r20
    43fe:	02 c0       	rjmp	.+4      	; 0x4404 <crc16_update+0x1c>
    else
      crc = (crc >> 1);
    4400:	96 95       	lsr	r25
    4402:	87 95       	ror	r24
    4404:	21 50       	subi	r18, 0x01	; 1
    4406:	31 09       	sbc	r19, r1
uint16_t crc16_update(uint16_t crc, uint8_t a)
{
  int i;

  crc ^= a;
  for (i = 0; i < 8; ++i)
    4408:	91 f7       	brne	.-28     	; 0x43ee <crc16_update+0x6>
    else
      crc = (crc >> 1);
  }

  return crc;
}
    440a:	08 95       	ret

0000440c <millis_init>:

//init the timer on ctc mode to calvulate millis
void millis_init()
{
	//CTC mode
	TIMER2_CONGFIG_A = 0x02;
    440c:	82 e0       	ldi	r24, 0x02	; 2
    440e:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
	// Clock/64
	TIMER2_CONGFIG_B = 0x04;
    4412:	84 e0       	ldi	r24, 0x04	; 4
    4414:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7000b1>
    // Load into the output compare
    TIMER2_COMPARE = CTC_MATCH_OVERFLOW;
    4418:	8a ef       	ldi	r24, 0xFA	; 250
    441a:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7000b3>
    // Enable the compare match interrupt
    SET_BIT(TIMER2_INTERUPT, TIMER2_COMPARE_INT);
    441e:	e0 e7       	ldi	r30, 0x70	; 112
    4420:	f0 e0       	ldi	r31, 0x00	; 0
    4422:	80 81       	ld	r24, Z
    4424:	82 60       	ori	r24, 0x02	; 2
    4426:	80 83       	st	Z, r24
    4428:	08 95       	ret

0000442a <Get_millis>:
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    442a:	f8 94       	cli
    unsigned long millis_return;

    // Ensure this cannot be disrupted
    ATOMIC_BLOCK(ATOMIC_FORCEON) {
    	// copy the ISR counter
        millis_return = timer1_millis;
    442c:	60 91 85 1a 	lds	r22, 0x1A85	; 0x801a85 <timer1_millis>
    4430:	70 91 86 1a 	lds	r23, 0x1A86	; 0x801a86 <timer1_millis+0x1>
    4434:	80 91 87 1a 	lds	r24, 0x1A87	; 0x801a87 <timer1_millis+0x2>
    4438:	90 91 88 1a 	lds	r25, 0x1A88	; 0x801a88 <timer1_millis+0x3>
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
    443c:	78 94       	sei
    }

    return millis_return;
}//Get_millis
    443e:	08 95       	ret

00004440 <__vector_13>:



ISR (TIMER2_COMPA_vect)
{
    4440:	1f 92       	push	r1
    4442:	0f 92       	push	r0
    4444:	0f b6       	in	r0, 0x3f	; 63
    4446:	0f 92       	push	r0
    4448:	11 24       	eor	r1, r1
    444a:	8f 93       	push	r24
    444c:	9f 93       	push	r25
    444e:	af 93       	push	r26
    4450:	bf 93       	push	r27
	//MILLI SEC
    timer1_millis++;
    4452:	80 91 85 1a 	lds	r24, 0x1A85	; 0x801a85 <timer1_millis>
    4456:	90 91 86 1a 	lds	r25, 0x1A86	; 0x801a86 <timer1_millis+0x1>
    445a:	a0 91 87 1a 	lds	r26, 0x1A87	; 0x801a87 <timer1_millis+0x2>
    445e:	b0 91 88 1a 	lds	r27, 0x1A88	; 0x801a88 <timer1_millis+0x3>
    4462:	01 96       	adiw	r24, 0x01	; 1
    4464:	a1 1d       	adc	r26, r1
    4466:	b1 1d       	adc	r27, r1
    4468:	80 93 85 1a 	sts	0x1A85, r24	; 0x801a85 <timer1_millis>
    446c:	90 93 86 1a 	sts	0x1A86, r25	; 0x801a86 <timer1_millis+0x1>
    4470:	a0 93 87 1a 	sts	0x1A87, r26	; 0x801a87 <timer1_millis+0x2>
    4474:	b0 93 88 1a 	sts	0x1A88, r27	; 0x801a88 <timer1_millis+0x3>
}//ISR
    4478:	bf 91       	pop	r27
    447a:	af 91       	pop	r26
    447c:	9f 91       	pop	r25
    447e:	8f 91       	pop	r24
    4480:	0f 90       	pop	r0
    4482:	0f be       	out	0x3f, r0	; 63
    4484:	0f 90       	pop	r0
    4486:	1f 90       	pop	r1
    4488:	18 95       	reti

0000448a <__subsf3>:
    448a:	50 58       	subi	r21, 0x80	; 128

0000448c <__addsf3>:
    448c:	bb 27       	eor	r27, r27
    448e:	aa 27       	eor	r26, r26
    4490:	0e d0       	rcall	.+28     	; 0x44ae <__addsf3x>
    4492:	48 c1       	rjmp	.+656    	; 0x4724 <__fp_round>
    4494:	39 d1       	rcall	.+626    	; 0x4708 <__fp_pscA>
    4496:	30 f0       	brcs	.+12     	; 0x44a4 <__addsf3+0x18>
    4498:	3e d1       	rcall	.+636    	; 0x4716 <__fp_pscB>
    449a:	20 f0       	brcs	.+8      	; 0x44a4 <__addsf3+0x18>
    449c:	31 f4       	brne	.+12     	; 0x44aa <__addsf3+0x1e>
    449e:	9f 3f       	cpi	r25, 0xFF	; 255
    44a0:	11 f4       	brne	.+4      	; 0x44a6 <__addsf3+0x1a>
    44a2:	1e f4       	brtc	.+6      	; 0x44aa <__addsf3+0x1e>
    44a4:	2e c1       	rjmp	.+604    	; 0x4702 <__fp_nan>
    44a6:	0e f4       	brtc	.+2      	; 0x44aa <__addsf3+0x1e>
    44a8:	e0 95       	com	r30
    44aa:	e7 fb       	bst	r30, 7
    44ac:	24 c1       	rjmp	.+584    	; 0x46f6 <__fp_inf>

000044ae <__addsf3x>:
    44ae:	e9 2f       	mov	r30, r25
    44b0:	4a d1       	rcall	.+660    	; 0x4746 <__fp_split3>
    44b2:	80 f3       	brcs	.-32     	; 0x4494 <__addsf3+0x8>
    44b4:	ba 17       	cp	r27, r26
    44b6:	62 07       	cpc	r22, r18
    44b8:	73 07       	cpc	r23, r19
    44ba:	84 07       	cpc	r24, r20
    44bc:	95 07       	cpc	r25, r21
    44be:	18 f0       	brcs	.+6      	; 0x44c6 <__addsf3x+0x18>
    44c0:	71 f4       	brne	.+28     	; 0x44de <__addsf3x+0x30>
    44c2:	9e f5       	brtc	.+102    	; 0x452a <__addsf3x+0x7c>
    44c4:	62 c1       	rjmp	.+708    	; 0x478a <__fp_zero>
    44c6:	0e f4       	brtc	.+2      	; 0x44ca <__addsf3x+0x1c>
    44c8:	e0 95       	com	r30
    44ca:	0b 2e       	mov	r0, r27
    44cc:	ba 2f       	mov	r27, r26
    44ce:	a0 2d       	mov	r26, r0
    44d0:	0b 01       	movw	r0, r22
    44d2:	b9 01       	movw	r22, r18
    44d4:	90 01       	movw	r18, r0
    44d6:	0c 01       	movw	r0, r24
    44d8:	ca 01       	movw	r24, r20
    44da:	a0 01       	movw	r20, r0
    44dc:	11 24       	eor	r1, r1
    44de:	ff 27       	eor	r31, r31
    44e0:	59 1b       	sub	r21, r25
    44e2:	99 f0       	breq	.+38     	; 0x450a <__addsf3x+0x5c>
    44e4:	59 3f       	cpi	r21, 0xF9	; 249
    44e6:	50 f4       	brcc	.+20     	; 0x44fc <__addsf3x+0x4e>
    44e8:	50 3e       	cpi	r21, 0xE0	; 224
    44ea:	68 f1       	brcs	.+90     	; 0x4546 <__addsf3x+0x98>
    44ec:	1a 16       	cp	r1, r26
    44ee:	f0 40       	sbci	r31, 0x00	; 0
    44f0:	a2 2f       	mov	r26, r18
    44f2:	23 2f       	mov	r18, r19
    44f4:	34 2f       	mov	r19, r20
    44f6:	44 27       	eor	r20, r20
    44f8:	58 5f       	subi	r21, 0xF8	; 248
    44fa:	f3 cf       	rjmp	.-26     	; 0x44e2 <__addsf3x+0x34>
    44fc:	46 95       	lsr	r20
    44fe:	37 95       	ror	r19
    4500:	27 95       	ror	r18
    4502:	a7 95       	ror	r26
    4504:	f0 40       	sbci	r31, 0x00	; 0
    4506:	53 95       	inc	r21
    4508:	c9 f7       	brne	.-14     	; 0x44fc <__addsf3x+0x4e>
    450a:	7e f4       	brtc	.+30     	; 0x452a <__addsf3x+0x7c>
    450c:	1f 16       	cp	r1, r31
    450e:	ba 0b       	sbc	r27, r26
    4510:	62 0b       	sbc	r22, r18
    4512:	73 0b       	sbc	r23, r19
    4514:	84 0b       	sbc	r24, r20
    4516:	ba f0       	brmi	.+46     	; 0x4546 <__addsf3x+0x98>
    4518:	91 50       	subi	r25, 0x01	; 1
    451a:	a1 f0       	breq	.+40     	; 0x4544 <__addsf3x+0x96>
    451c:	ff 0f       	add	r31, r31
    451e:	bb 1f       	adc	r27, r27
    4520:	66 1f       	adc	r22, r22
    4522:	77 1f       	adc	r23, r23
    4524:	88 1f       	adc	r24, r24
    4526:	c2 f7       	brpl	.-16     	; 0x4518 <__addsf3x+0x6a>
    4528:	0e c0       	rjmp	.+28     	; 0x4546 <__addsf3x+0x98>
    452a:	ba 0f       	add	r27, r26
    452c:	62 1f       	adc	r22, r18
    452e:	73 1f       	adc	r23, r19
    4530:	84 1f       	adc	r24, r20
    4532:	48 f4       	brcc	.+18     	; 0x4546 <__addsf3x+0x98>
    4534:	87 95       	ror	r24
    4536:	77 95       	ror	r23
    4538:	67 95       	ror	r22
    453a:	b7 95       	ror	r27
    453c:	f7 95       	ror	r31
    453e:	9e 3f       	cpi	r25, 0xFE	; 254
    4540:	08 f0       	brcs	.+2      	; 0x4544 <__addsf3x+0x96>
    4542:	b3 cf       	rjmp	.-154    	; 0x44aa <__addsf3+0x1e>
    4544:	93 95       	inc	r25
    4546:	88 0f       	add	r24, r24
    4548:	08 f0       	brcs	.+2      	; 0x454c <__addsf3x+0x9e>
    454a:	99 27       	eor	r25, r25
    454c:	ee 0f       	add	r30, r30
    454e:	97 95       	ror	r25
    4550:	87 95       	ror	r24
    4552:	08 95       	ret

00004554 <__divsf3>:
    4554:	0c d0       	rcall	.+24     	; 0x456e <__divsf3x>
    4556:	e6 c0       	rjmp	.+460    	; 0x4724 <__fp_round>
    4558:	de d0       	rcall	.+444    	; 0x4716 <__fp_pscB>
    455a:	40 f0       	brcs	.+16     	; 0x456c <__divsf3+0x18>
    455c:	d5 d0       	rcall	.+426    	; 0x4708 <__fp_pscA>
    455e:	30 f0       	brcs	.+12     	; 0x456c <__divsf3+0x18>
    4560:	21 f4       	brne	.+8      	; 0x456a <__divsf3+0x16>
    4562:	5f 3f       	cpi	r21, 0xFF	; 255
    4564:	19 f0       	breq	.+6      	; 0x456c <__divsf3+0x18>
    4566:	c7 c0       	rjmp	.+398    	; 0x46f6 <__fp_inf>
    4568:	51 11       	cpse	r21, r1
    456a:	10 c1       	rjmp	.+544    	; 0x478c <__fp_szero>
    456c:	ca c0       	rjmp	.+404    	; 0x4702 <__fp_nan>

0000456e <__divsf3x>:
    456e:	eb d0       	rcall	.+470    	; 0x4746 <__fp_split3>
    4570:	98 f3       	brcs	.-26     	; 0x4558 <__divsf3+0x4>

00004572 <__divsf3_pse>:
    4572:	99 23       	and	r25, r25
    4574:	c9 f3       	breq	.-14     	; 0x4568 <__divsf3+0x14>
    4576:	55 23       	and	r21, r21
    4578:	b1 f3       	breq	.-20     	; 0x4566 <__divsf3+0x12>
    457a:	95 1b       	sub	r25, r21
    457c:	55 0b       	sbc	r21, r21
    457e:	bb 27       	eor	r27, r27
    4580:	aa 27       	eor	r26, r26
    4582:	62 17       	cp	r22, r18
    4584:	73 07       	cpc	r23, r19
    4586:	84 07       	cpc	r24, r20
    4588:	38 f0       	brcs	.+14     	; 0x4598 <__divsf3_pse+0x26>
    458a:	9f 5f       	subi	r25, 0xFF	; 255
    458c:	5f 4f       	sbci	r21, 0xFF	; 255
    458e:	22 0f       	add	r18, r18
    4590:	33 1f       	adc	r19, r19
    4592:	44 1f       	adc	r20, r20
    4594:	aa 1f       	adc	r26, r26
    4596:	a9 f3       	breq	.-22     	; 0x4582 <__divsf3_pse+0x10>
    4598:	33 d0       	rcall	.+102    	; 0x4600 <__divsf3_pse+0x8e>
    459a:	0e 2e       	mov	r0, r30
    459c:	3a f0       	brmi	.+14     	; 0x45ac <__divsf3_pse+0x3a>
    459e:	e0 e8       	ldi	r30, 0x80	; 128
    45a0:	30 d0       	rcall	.+96     	; 0x4602 <__divsf3_pse+0x90>
    45a2:	91 50       	subi	r25, 0x01	; 1
    45a4:	50 40       	sbci	r21, 0x00	; 0
    45a6:	e6 95       	lsr	r30
    45a8:	00 1c       	adc	r0, r0
    45aa:	ca f7       	brpl	.-14     	; 0x459e <__divsf3_pse+0x2c>
    45ac:	29 d0       	rcall	.+82     	; 0x4600 <__divsf3_pse+0x8e>
    45ae:	fe 2f       	mov	r31, r30
    45b0:	27 d0       	rcall	.+78     	; 0x4600 <__divsf3_pse+0x8e>
    45b2:	66 0f       	add	r22, r22
    45b4:	77 1f       	adc	r23, r23
    45b6:	88 1f       	adc	r24, r24
    45b8:	bb 1f       	adc	r27, r27
    45ba:	26 17       	cp	r18, r22
    45bc:	37 07       	cpc	r19, r23
    45be:	48 07       	cpc	r20, r24
    45c0:	ab 07       	cpc	r26, r27
    45c2:	b0 e8       	ldi	r27, 0x80	; 128
    45c4:	09 f0       	breq	.+2      	; 0x45c8 <__divsf3_pse+0x56>
    45c6:	bb 0b       	sbc	r27, r27
    45c8:	80 2d       	mov	r24, r0
    45ca:	bf 01       	movw	r22, r30
    45cc:	ff 27       	eor	r31, r31
    45ce:	93 58       	subi	r25, 0x83	; 131
    45d0:	5f 4f       	sbci	r21, 0xFF	; 255
    45d2:	2a f0       	brmi	.+10     	; 0x45de <__divsf3_pse+0x6c>
    45d4:	9e 3f       	cpi	r25, 0xFE	; 254
    45d6:	51 05       	cpc	r21, r1
    45d8:	68 f0       	brcs	.+26     	; 0x45f4 <__divsf3_pse+0x82>
    45da:	8d c0       	rjmp	.+282    	; 0x46f6 <__fp_inf>
    45dc:	d7 c0       	rjmp	.+430    	; 0x478c <__fp_szero>
    45de:	5f 3f       	cpi	r21, 0xFF	; 255
    45e0:	ec f3       	brlt	.-6      	; 0x45dc <__divsf3_pse+0x6a>
    45e2:	98 3e       	cpi	r25, 0xE8	; 232
    45e4:	dc f3       	brlt	.-10     	; 0x45dc <__divsf3_pse+0x6a>
    45e6:	86 95       	lsr	r24
    45e8:	77 95       	ror	r23
    45ea:	67 95       	ror	r22
    45ec:	b7 95       	ror	r27
    45ee:	f7 95       	ror	r31
    45f0:	9f 5f       	subi	r25, 0xFF	; 255
    45f2:	c9 f7       	brne	.-14     	; 0x45e6 <__divsf3_pse+0x74>
    45f4:	88 0f       	add	r24, r24
    45f6:	91 1d       	adc	r25, r1
    45f8:	96 95       	lsr	r25
    45fa:	87 95       	ror	r24
    45fc:	97 f9       	bld	r25, 7
    45fe:	08 95       	ret
    4600:	e1 e0       	ldi	r30, 0x01	; 1
    4602:	66 0f       	add	r22, r22
    4604:	77 1f       	adc	r23, r23
    4606:	88 1f       	adc	r24, r24
    4608:	bb 1f       	adc	r27, r27
    460a:	62 17       	cp	r22, r18
    460c:	73 07       	cpc	r23, r19
    460e:	84 07       	cpc	r24, r20
    4610:	ba 07       	cpc	r27, r26
    4612:	20 f0       	brcs	.+8      	; 0x461c <__divsf3_pse+0xaa>
    4614:	62 1b       	sub	r22, r18
    4616:	73 0b       	sbc	r23, r19
    4618:	84 0b       	sbc	r24, r20
    461a:	ba 0b       	sbc	r27, r26
    461c:	ee 1f       	adc	r30, r30
    461e:	88 f7       	brcc	.-30     	; 0x4602 <__divsf3_pse+0x90>
    4620:	e0 95       	com	r30
    4622:	08 95       	ret

00004624 <__fixunssfsi>:
    4624:	98 d0       	rcall	.+304    	; 0x4756 <__fp_splitA>
    4626:	88 f0       	brcs	.+34     	; 0x464a <__fixunssfsi+0x26>
    4628:	9f 57       	subi	r25, 0x7F	; 127
    462a:	90 f0       	brcs	.+36     	; 0x4650 <__fixunssfsi+0x2c>
    462c:	b9 2f       	mov	r27, r25
    462e:	99 27       	eor	r25, r25
    4630:	b7 51       	subi	r27, 0x17	; 23
    4632:	a0 f0       	brcs	.+40     	; 0x465c <__fixunssfsi+0x38>
    4634:	d1 f0       	breq	.+52     	; 0x466a <__fixunssfsi+0x46>
    4636:	66 0f       	add	r22, r22
    4638:	77 1f       	adc	r23, r23
    463a:	88 1f       	adc	r24, r24
    463c:	99 1f       	adc	r25, r25
    463e:	1a f0       	brmi	.+6      	; 0x4646 <__fixunssfsi+0x22>
    4640:	ba 95       	dec	r27
    4642:	c9 f7       	brne	.-14     	; 0x4636 <__fixunssfsi+0x12>
    4644:	12 c0       	rjmp	.+36     	; 0x466a <__fixunssfsi+0x46>
    4646:	b1 30       	cpi	r27, 0x01	; 1
    4648:	81 f0       	breq	.+32     	; 0x466a <__fixunssfsi+0x46>
    464a:	9f d0       	rcall	.+318    	; 0x478a <__fp_zero>
    464c:	b1 e0       	ldi	r27, 0x01	; 1
    464e:	08 95       	ret
    4650:	9c c0       	rjmp	.+312    	; 0x478a <__fp_zero>
    4652:	67 2f       	mov	r22, r23
    4654:	78 2f       	mov	r23, r24
    4656:	88 27       	eor	r24, r24
    4658:	b8 5f       	subi	r27, 0xF8	; 248
    465a:	39 f0       	breq	.+14     	; 0x466a <__fixunssfsi+0x46>
    465c:	b9 3f       	cpi	r27, 0xF9	; 249
    465e:	cc f3       	brlt	.-14     	; 0x4652 <__fixunssfsi+0x2e>
    4660:	86 95       	lsr	r24
    4662:	77 95       	ror	r23
    4664:	67 95       	ror	r22
    4666:	b3 95       	inc	r27
    4668:	d9 f7       	brne	.-10     	; 0x4660 <__fixunssfsi+0x3c>
    466a:	3e f4       	brtc	.+14     	; 0x467a <__fixunssfsi+0x56>
    466c:	90 95       	com	r25
    466e:	80 95       	com	r24
    4670:	70 95       	com	r23
    4672:	61 95       	neg	r22
    4674:	7f 4f       	sbci	r23, 0xFF	; 255
    4676:	8f 4f       	sbci	r24, 0xFF	; 255
    4678:	9f 4f       	sbci	r25, 0xFF	; 255
    467a:	08 95       	ret

0000467c <__floatunsisf>:
    467c:	e8 94       	clt
    467e:	09 c0       	rjmp	.+18     	; 0x4692 <__floatsisf+0x12>

00004680 <__floatsisf>:
    4680:	97 fb       	bst	r25, 7
    4682:	3e f4       	brtc	.+14     	; 0x4692 <__floatsisf+0x12>
    4684:	90 95       	com	r25
    4686:	80 95       	com	r24
    4688:	70 95       	com	r23
    468a:	61 95       	neg	r22
    468c:	7f 4f       	sbci	r23, 0xFF	; 255
    468e:	8f 4f       	sbci	r24, 0xFF	; 255
    4690:	9f 4f       	sbci	r25, 0xFF	; 255
    4692:	99 23       	and	r25, r25
    4694:	a9 f0       	breq	.+42     	; 0x46c0 <__floatsisf+0x40>
    4696:	f9 2f       	mov	r31, r25
    4698:	96 e9       	ldi	r25, 0x96	; 150
    469a:	bb 27       	eor	r27, r27
    469c:	93 95       	inc	r25
    469e:	f6 95       	lsr	r31
    46a0:	87 95       	ror	r24
    46a2:	77 95       	ror	r23
    46a4:	67 95       	ror	r22
    46a6:	b7 95       	ror	r27
    46a8:	f1 11       	cpse	r31, r1
    46aa:	f8 cf       	rjmp	.-16     	; 0x469c <__floatsisf+0x1c>
    46ac:	fa f4       	brpl	.+62     	; 0x46ec <__floatsisf+0x6c>
    46ae:	bb 0f       	add	r27, r27
    46b0:	11 f4       	brne	.+4      	; 0x46b6 <__floatsisf+0x36>
    46b2:	60 ff       	sbrs	r22, 0
    46b4:	1b c0       	rjmp	.+54     	; 0x46ec <__floatsisf+0x6c>
    46b6:	6f 5f       	subi	r22, 0xFF	; 255
    46b8:	7f 4f       	sbci	r23, 0xFF	; 255
    46ba:	8f 4f       	sbci	r24, 0xFF	; 255
    46bc:	9f 4f       	sbci	r25, 0xFF	; 255
    46be:	16 c0       	rjmp	.+44     	; 0x46ec <__floatsisf+0x6c>
    46c0:	88 23       	and	r24, r24
    46c2:	11 f0       	breq	.+4      	; 0x46c8 <__floatsisf+0x48>
    46c4:	96 e9       	ldi	r25, 0x96	; 150
    46c6:	11 c0       	rjmp	.+34     	; 0x46ea <__floatsisf+0x6a>
    46c8:	77 23       	and	r23, r23
    46ca:	21 f0       	breq	.+8      	; 0x46d4 <__floatsisf+0x54>
    46cc:	9e e8       	ldi	r25, 0x8E	; 142
    46ce:	87 2f       	mov	r24, r23
    46d0:	76 2f       	mov	r23, r22
    46d2:	05 c0       	rjmp	.+10     	; 0x46de <__floatsisf+0x5e>
    46d4:	66 23       	and	r22, r22
    46d6:	71 f0       	breq	.+28     	; 0x46f4 <__floatsisf+0x74>
    46d8:	96 e8       	ldi	r25, 0x86	; 134
    46da:	86 2f       	mov	r24, r22
    46dc:	70 e0       	ldi	r23, 0x00	; 0
    46de:	60 e0       	ldi	r22, 0x00	; 0
    46e0:	2a f0       	brmi	.+10     	; 0x46ec <__floatsisf+0x6c>
    46e2:	9a 95       	dec	r25
    46e4:	66 0f       	add	r22, r22
    46e6:	77 1f       	adc	r23, r23
    46e8:	88 1f       	adc	r24, r24
    46ea:	da f7       	brpl	.-10     	; 0x46e2 <__floatsisf+0x62>
    46ec:	88 0f       	add	r24, r24
    46ee:	96 95       	lsr	r25
    46f0:	87 95       	ror	r24
    46f2:	97 f9       	bld	r25, 7
    46f4:	08 95       	ret

000046f6 <__fp_inf>:
    46f6:	97 f9       	bld	r25, 7
    46f8:	9f 67       	ori	r25, 0x7F	; 127
    46fa:	80 e8       	ldi	r24, 0x80	; 128
    46fc:	70 e0       	ldi	r23, 0x00	; 0
    46fe:	60 e0       	ldi	r22, 0x00	; 0
    4700:	08 95       	ret

00004702 <__fp_nan>:
    4702:	9f ef       	ldi	r25, 0xFF	; 255
    4704:	80 ec       	ldi	r24, 0xC0	; 192
    4706:	08 95       	ret

00004708 <__fp_pscA>:
    4708:	00 24       	eor	r0, r0
    470a:	0a 94       	dec	r0
    470c:	16 16       	cp	r1, r22
    470e:	17 06       	cpc	r1, r23
    4710:	18 06       	cpc	r1, r24
    4712:	09 06       	cpc	r0, r25
    4714:	08 95       	ret

00004716 <__fp_pscB>:
    4716:	00 24       	eor	r0, r0
    4718:	0a 94       	dec	r0
    471a:	12 16       	cp	r1, r18
    471c:	13 06       	cpc	r1, r19
    471e:	14 06       	cpc	r1, r20
    4720:	05 06       	cpc	r0, r21
    4722:	08 95       	ret

00004724 <__fp_round>:
    4724:	09 2e       	mov	r0, r25
    4726:	03 94       	inc	r0
    4728:	00 0c       	add	r0, r0
    472a:	11 f4       	brne	.+4      	; 0x4730 <__fp_round+0xc>
    472c:	88 23       	and	r24, r24
    472e:	52 f0       	brmi	.+20     	; 0x4744 <__fp_round+0x20>
    4730:	bb 0f       	add	r27, r27
    4732:	40 f4       	brcc	.+16     	; 0x4744 <__fp_round+0x20>
    4734:	bf 2b       	or	r27, r31
    4736:	11 f4       	brne	.+4      	; 0x473c <__fp_round+0x18>
    4738:	60 ff       	sbrs	r22, 0
    473a:	04 c0       	rjmp	.+8      	; 0x4744 <__fp_round+0x20>
    473c:	6f 5f       	subi	r22, 0xFF	; 255
    473e:	7f 4f       	sbci	r23, 0xFF	; 255
    4740:	8f 4f       	sbci	r24, 0xFF	; 255
    4742:	9f 4f       	sbci	r25, 0xFF	; 255
    4744:	08 95       	ret

00004746 <__fp_split3>:
    4746:	57 fd       	sbrc	r21, 7
    4748:	90 58       	subi	r25, 0x80	; 128
    474a:	44 0f       	add	r20, r20
    474c:	55 1f       	adc	r21, r21
    474e:	59 f0       	breq	.+22     	; 0x4766 <__fp_splitA+0x10>
    4750:	5f 3f       	cpi	r21, 0xFF	; 255
    4752:	71 f0       	breq	.+28     	; 0x4770 <__fp_splitA+0x1a>
    4754:	47 95       	ror	r20

00004756 <__fp_splitA>:
    4756:	88 0f       	add	r24, r24
    4758:	97 fb       	bst	r25, 7
    475a:	99 1f       	adc	r25, r25
    475c:	61 f0       	breq	.+24     	; 0x4776 <__fp_splitA+0x20>
    475e:	9f 3f       	cpi	r25, 0xFF	; 255
    4760:	79 f0       	breq	.+30     	; 0x4780 <__fp_splitA+0x2a>
    4762:	87 95       	ror	r24
    4764:	08 95       	ret
    4766:	12 16       	cp	r1, r18
    4768:	13 06       	cpc	r1, r19
    476a:	14 06       	cpc	r1, r20
    476c:	55 1f       	adc	r21, r21
    476e:	f2 cf       	rjmp	.-28     	; 0x4754 <__fp_split3+0xe>
    4770:	46 95       	lsr	r20
    4772:	f1 df       	rcall	.-30     	; 0x4756 <__fp_splitA>
    4774:	08 c0       	rjmp	.+16     	; 0x4786 <__fp_splitA+0x30>
    4776:	16 16       	cp	r1, r22
    4778:	17 06       	cpc	r1, r23
    477a:	18 06       	cpc	r1, r24
    477c:	99 1f       	adc	r25, r25
    477e:	f1 cf       	rjmp	.-30     	; 0x4762 <__fp_splitA+0xc>
    4780:	86 95       	lsr	r24
    4782:	71 05       	cpc	r23, r1
    4784:	61 05       	cpc	r22, r1
    4786:	08 94       	sec
    4788:	08 95       	ret

0000478a <__fp_zero>:
    478a:	e8 94       	clt

0000478c <__fp_szero>:
    478c:	bb 27       	eor	r27, r27
    478e:	66 27       	eor	r22, r22
    4790:	77 27       	eor	r23, r23
    4792:	cb 01       	movw	r24, r22
    4794:	97 f9       	bld	r25, 7
    4796:	08 95       	ret

00004798 <__mulsf3>:
    4798:	0b d0       	rcall	.+22     	; 0x47b0 <__mulsf3x>
    479a:	c4 cf       	rjmp	.-120    	; 0x4724 <__fp_round>
    479c:	b5 df       	rcall	.-150    	; 0x4708 <__fp_pscA>
    479e:	28 f0       	brcs	.+10     	; 0x47aa <__mulsf3+0x12>
    47a0:	ba df       	rcall	.-140    	; 0x4716 <__fp_pscB>
    47a2:	18 f0       	brcs	.+6      	; 0x47aa <__mulsf3+0x12>
    47a4:	95 23       	and	r25, r21
    47a6:	09 f0       	breq	.+2      	; 0x47aa <__mulsf3+0x12>
    47a8:	a6 cf       	rjmp	.-180    	; 0x46f6 <__fp_inf>
    47aa:	ab cf       	rjmp	.-170    	; 0x4702 <__fp_nan>
    47ac:	11 24       	eor	r1, r1
    47ae:	ee cf       	rjmp	.-36     	; 0x478c <__fp_szero>

000047b0 <__mulsf3x>:
    47b0:	ca df       	rcall	.-108    	; 0x4746 <__fp_split3>
    47b2:	a0 f3       	brcs	.-24     	; 0x479c <__mulsf3+0x4>

000047b4 <__mulsf3_pse>:
    47b4:	95 9f       	mul	r25, r21
    47b6:	d1 f3       	breq	.-12     	; 0x47ac <__mulsf3+0x14>
    47b8:	95 0f       	add	r25, r21
    47ba:	50 e0       	ldi	r21, 0x00	; 0
    47bc:	55 1f       	adc	r21, r21
    47be:	62 9f       	mul	r22, r18
    47c0:	f0 01       	movw	r30, r0
    47c2:	72 9f       	mul	r23, r18
    47c4:	bb 27       	eor	r27, r27
    47c6:	f0 0d       	add	r31, r0
    47c8:	b1 1d       	adc	r27, r1
    47ca:	63 9f       	mul	r22, r19
    47cc:	aa 27       	eor	r26, r26
    47ce:	f0 0d       	add	r31, r0
    47d0:	b1 1d       	adc	r27, r1
    47d2:	aa 1f       	adc	r26, r26
    47d4:	64 9f       	mul	r22, r20
    47d6:	66 27       	eor	r22, r22
    47d8:	b0 0d       	add	r27, r0
    47da:	a1 1d       	adc	r26, r1
    47dc:	66 1f       	adc	r22, r22
    47de:	82 9f       	mul	r24, r18
    47e0:	22 27       	eor	r18, r18
    47e2:	b0 0d       	add	r27, r0
    47e4:	a1 1d       	adc	r26, r1
    47e6:	62 1f       	adc	r22, r18
    47e8:	73 9f       	mul	r23, r19
    47ea:	b0 0d       	add	r27, r0
    47ec:	a1 1d       	adc	r26, r1
    47ee:	62 1f       	adc	r22, r18
    47f0:	83 9f       	mul	r24, r19
    47f2:	a0 0d       	add	r26, r0
    47f4:	61 1d       	adc	r22, r1
    47f6:	22 1f       	adc	r18, r18
    47f8:	74 9f       	mul	r23, r20
    47fa:	33 27       	eor	r19, r19
    47fc:	a0 0d       	add	r26, r0
    47fe:	61 1d       	adc	r22, r1
    4800:	23 1f       	adc	r18, r19
    4802:	84 9f       	mul	r24, r20
    4804:	60 0d       	add	r22, r0
    4806:	21 1d       	adc	r18, r1
    4808:	82 2f       	mov	r24, r18
    480a:	76 2f       	mov	r23, r22
    480c:	6a 2f       	mov	r22, r26
    480e:	11 24       	eor	r1, r1
    4810:	9f 57       	subi	r25, 0x7F	; 127
    4812:	50 40       	sbci	r21, 0x00	; 0
    4814:	8a f0       	brmi	.+34     	; 0x4838 <__mulsf3_pse+0x84>
    4816:	e1 f0       	breq	.+56     	; 0x4850 <__mulsf3_pse+0x9c>
    4818:	88 23       	and	r24, r24
    481a:	4a f0       	brmi	.+18     	; 0x482e <__mulsf3_pse+0x7a>
    481c:	ee 0f       	add	r30, r30
    481e:	ff 1f       	adc	r31, r31
    4820:	bb 1f       	adc	r27, r27
    4822:	66 1f       	adc	r22, r22
    4824:	77 1f       	adc	r23, r23
    4826:	88 1f       	adc	r24, r24
    4828:	91 50       	subi	r25, 0x01	; 1
    482a:	50 40       	sbci	r21, 0x00	; 0
    482c:	a9 f7       	brne	.-22     	; 0x4818 <__mulsf3_pse+0x64>
    482e:	9e 3f       	cpi	r25, 0xFE	; 254
    4830:	51 05       	cpc	r21, r1
    4832:	70 f0       	brcs	.+28     	; 0x4850 <__mulsf3_pse+0x9c>
    4834:	60 cf       	rjmp	.-320    	; 0x46f6 <__fp_inf>
    4836:	aa cf       	rjmp	.-172    	; 0x478c <__fp_szero>
    4838:	5f 3f       	cpi	r21, 0xFF	; 255
    483a:	ec f3       	brlt	.-6      	; 0x4836 <__mulsf3_pse+0x82>
    483c:	98 3e       	cpi	r25, 0xE8	; 232
    483e:	dc f3       	brlt	.-10     	; 0x4836 <__mulsf3_pse+0x82>
    4840:	86 95       	lsr	r24
    4842:	77 95       	ror	r23
    4844:	67 95       	ror	r22
    4846:	b7 95       	ror	r27
    4848:	f7 95       	ror	r31
    484a:	e7 95       	ror	r30
    484c:	9f 5f       	subi	r25, 0xFF	; 255
    484e:	c1 f7       	brne	.-16     	; 0x4840 <__mulsf3_pse+0x8c>
    4850:	fe 2b       	or	r31, r30
    4852:	88 0f       	add	r24, r24
    4854:	91 1d       	adc	r25, r1
    4856:	96 95       	lsr	r25
    4858:	87 95       	ror	r24
    485a:	97 f9       	bld	r25, 7
    485c:	08 95       	ret

0000485e <pow>:
    485e:	fa 01       	movw	r30, r20
    4860:	ee 0f       	add	r30, r30
    4862:	ff 1f       	adc	r31, r31
    4864:	30 96       	adiw	r30, 0x00	; 0
    4866:	21 05       	cpc	r18, r1
    4868:	31 05       	cpc	r19, r1
    486a:	99 f1       	breq	.+102    	; 0x48d2 <pow+0x74>
    486c:	61 15       	cp	r22, r1
    486e:	71 05       	cpc	r23, r1
    4870:	61 f4       	brne	.+24     	; 0x488a <pow+0x2c>
    4872:	80 38       	cpi	r24, 0x80	; 128
    4874:	bf e3       	ldi	r27, 0x3F	; 63
    4876:	9b 07       	cpc	r25, r27
    4878:	49 f1       	breq	.+82     	; 0x48cc <pow+0x6e>
    487a:	68 94       	set
    487c:	90 38       	cpi	r25, 0x80	; 128
    487e:	81 05       	cpc	r24, r1
    4880:	61 f0       	breq	.+24     	; 0x489a <pow+0x3c>
    4882:	80 38       	cpi	r24, 0x80	; 128
    4884:	bf ef       	ldi	r27, 0xFF	; 255
    4886:	9b 07       	cpc	r25, r27
    4888:	41 f0       	breq	.+16     	; 0x489a <pow+0x3c>
    488a:	99 23       	and	r25, r25
    488c:	42 f5       	brpl	.+80     	; 0x48de <pow+0x80>
    488e:	ff 3f       	cpi	r31, 0xFF	; 255
    4890:	e1 05       	cpc	r30, r1
    4892:	31 05       	cpc	r19, r1
    4894:	21 05       	cpc	r18, r1
    4896:	11 f1       	breq	.+68     	; 0x48dc <pow+0x7e>
    4898:	e8 94       	clt
    489a:	08 94       	sec
    489c:	e7 95       	ror	r30
    489e:	d9 01       	movw	r26, r18
    48a0:	aa 23       	and	r26, r26
    48a2:	29 f4       	brne	.+10     	; 0x48ae <pow+0x50>
    48a4:	ab 2f       	mov	r26, r27
    48a6:	be 2f       	mov	r27, r30
    48a8:	f8 5f       	subi	r31, 0xF8	; 248
    48aa:	d0 f3       	brcs	.-12     	; 0x48a0 <pow+0x42>
    48ac:	10 c0       	rjmp	.+32     	; 0x48ce <pow+0x70>
    48ae:	ff 5f       	subi	r31, 0xFF	; 255
    48b0:	70 f4       	brcc	.+28     	; 0x48ce <pow+0x70>
    48b2:	a6 95       	lsr	r26
    48b4:	e0 f7       	brcc	.-8      	; 0x48ae <pow+0x50>
    48b6:	f7 39       	cpi	r31, 0x97	; 151
    48b8:	50 f0       	brcs	.+20     	; 0x48ce <pow+0x70>
    48ba:	19 f0       	breq	.+6      	; 0x48c2 <pow+0x64>
    48bc:	ff 3a       	cpi	r31, 0xAF	; 175
    48be:	38 f4       	brcc	.+14     	; 0x48ce <pow+0x70>
    48c0:	9f 77       	andi	r25, 0x7F	; 127
    48c2:	9f 93       	push	r25
    48c4:	0c d0       	rcall	.+24     	; 0x48de <pow+0x80>
    48c6:	0f 90       	pop	r0
    48c8:	07 fc       	sbrc	r0, 7
    48ca:	90 58       	subi	r25, 0x80	; 128
    48cc:	08 95       	ret
    48ce:	3e f0       	brts	.+14     	; 0x48de <pow+0x80>
    48d0:	18 cf       	rjmp	.-464    	; 0x4702 <__fp_nan>
    48d2:	60 e0       	ldi	r22, 0x00	; 0
    48d4:	70 e0       	ldi	r23, 0x00	; 0
    48d6:	80 e8       	ldi	r24, 0x80	; 128
    48d8:	9f e3       	ldi	r25, 0x3F	; 63
    48da:	08 95       	ret
    48dc:	4f e7       	ldi	r20, 0x7F	; 127
    48de:	9f 77       	andi	r25, 0x7F	; 127
    48e0:	5f 93       	push	r21
    48e2:	4f 93       	push	r20
    48e4:	3f 93       	push	r19
    48e6:	2f 93       	push	r18
    48e8:	e7 d0       	rcall	.+462    	; 0x4ab8 <log>
    48ea:	2f 91       	pop	r18
    48ec:	3f 91       	pop	r19
    48ee:	4f 91       	pop	r20
    48f0:	5f 91       	pop	r21
    48f2:	52 df       	rcall	.-348    	; 0x4798 <__mulsf3>
    48f4:	25 c0       	rjmp	.+74     	; 0x4940 <exp>

000048f6 <round>:
    48f6:	2f df       	rcall	.-418    	; 0x4756 <__fp_splitA>
    48f8:	e0 f0       	brcs	.+56     	; 0x4932 <round+0x3c>
    48fa:	9e 37       	cpi	r25, 0x7E	; 126
    48fc:	d8 f0       	brcs	.+54     	; 0x4934 <round+0x3e>
    48fe:	96 39       	cpi	r25, 0x96	; 150
    4900:	b8 f4       	brcc	.+46     	; 0x4930 <round+0x3a>
    4902:	9e 38       	cpi	r25, 0x8E	; 142
    4904:	48 f4       	brcc	.+18     	; 0x4918 <round+0x22>
    4906:	67 2f       	mov	r22, r23
    4908:	78 2f       	mov	r23, r24
    490a:	88 27       	eor	r24, r24
    490c:	98 5f       	subi	r25, 0xF8	; 248
    490e:	f9 cf       	rjmp	.-14     	; 0x4902 <round+0xc>
    4910:	86 95       	lsr	r24
    4912:	77 95       	ror	r23
    4914:	67 95       	ror	r22
    4916:	93 95       	inc	r25
    4918:	95 39       	cpi	r25, 0x95	; 149
    491a:	d0 f3       	brcs	.-12     	; 0x4910 <round+0x1a>
    491c:	b6 2f       	mov	r27, r22
    491e:	b1 70       	andi	r27, 0x01	; 1
    4920:	6b 0f       	add	r22, r27
    4922:	71 1d       	adc	r23, r1
    4924:	81 1d       	adc	r24, r1
    4926:	20 f4       	brcc	.+8      	; 0x4930 <round+0x3a>
    4928:	87 95       	ror	r24
    492a:	77 95       	ror	r23
    492c:	67 95       	ror	r22
    492e:	93 95       	inc	r25
    4930:	33 c0       	rjmp	.+102    	; 0x4998 <__fp_mintl>
    4932:	4d c0       	rjmp	.+154    	; 0x49ce <__fp_mpack>
    4934:	2b cf       	rjmp	.-426    	; 0x478c <__fp_szero>
    4936:	19 f4       	brne	.+6      	; 0x493e <round+0x48>
    4938:	0e f0       	brts	.+2      	; 0x493c <round+0x46>
    493a:	dd ce       	rjmp	.-582    	; 0x46f6 <__fp_inf>
    493c:	26 cf       	rjmp	.-436    	; 0x478a <__fp_zero>
    493e:	e1 ce       	rjmp	.-574    	; 0x4702 <__fp_nan>

00004940 <exp>:
    4940:	0a df       	rcall	.-492    	; 0x4756 <__fp_splitA>
    4942:	c8 f3       	brcs	.-14     	; 0x4936 <round+0x40>
    4944:	96 38       	cpi	r25, 0x86	; 134
    4946:	c0 f7       	brcc	.-16     	; 0x4938 <round+0x42>
    4948:	07 f8       	bld	r0, 7
    494a:	0f 92       	push	r0
    494c:	e8 94       	clt
    494e:	2b e3       	ldi	r18, 0x3B	; 59
    4950:	3a ea       	ldi	r19, 0xAA	; 170
    4952:	48 eb       	ldi	r20, 0xB8	; 184
    4954:	5f e7       	ldi	r21, 0x7F	; 127
    4956:	2e df       	rcall	.-420    	; 0x47b4 <__mulsf3_pse>
    4958:	0f 92       	push	r0
    495a:	0f 92       	push	r0
    495c:	0f 92       	push	r0
    495e:	4d b7       	in	r20, 0x3d	; 61
    4960:	5e b7       	in	r21, 0x3e	; 62
    4962:	0f 92       	push	r0
    4964:	e9 d0       	rcall	.+466    	; 0x4b38 <modf>
    4966:	e4 ee       	ldi	r30, 0xE4	; 228
    4968:	f0 e0       	ldi	r31, 0x00	; 0
    496a:	3f d0       	rcall	.+126    	; 0x49ea <__fp_powser>
    496c:	4f 91       	pop	r20
    496e:	5f 91       	pop	r21
    4970:	ef 91       	pop	r30
    4972:	ff 91       	pop	r31
    4974:	e5 95       	asr	r30
    4976:	ee 1f       	adc	r30, r30
    4978:	ff 1f       	adc	r31, r31
    497a:	49 f0       	breq	.+18     	; 0x498e <exp+0x4e>
    497c:	fe 57       	subi	r31, 0x7E	; 126
    497e:	e0 68       	ori	r30, 0x80	; 128
    4980:	44 27       	eor	r20, r20
    4982:	ee 0f       	add	r30, r30
    4984:	44 1f       	adc	r20, r20
    4986:	fa 95       	dec	r31
    4988:	e1 f7       	brne	.-8      	; 0x4982 <exp+0x42>
    498a:	41 95       	neg	r20
    498c:	55 0b       	sbc	r21, r21
    498e:	5b d0       	rcall	.+182    	; 0x4a46 <ldexp>
    4990:	0f 90       	pop	r0
    4992:	07 fe       	sbrs	r0, 7
    4994:	4f c0       	rjmp	.+158    	; 0x4a34 <inverse>
    4996:	08 95       	ret

00004998 <__fp_mintl>:
    4998:	88 23       	and	r24, r24
    499a:	71 f4       	brne	.+28     	; 0x49b8 <__fp_mintl+0x20>
    499c:	77 23       	and	r23, r23
    499e:	21 f0       	breq	.+8      	; 0x49a8 <__fp_mintl+0x10>
    49a0:	98 50       	subi	r25, 0x08	; 8
    49a2:	87 2b       	or	r24, r23
    49a4:	76 2f       	mov	r23, r22
    49a6:	07 c0       	rjmp	.+14     	; 0x49b6 <__fp_mintl+0x1e>
    49a8:	66 23       	and	r22, r22
    49aa:	11 f4       	brne	.+4      	; 0x49b0 <__fp_mintl+0x18>
    49ac:	99 27       	eor	r25, r25
    49ae:	0d c0       	rjmp	.+26     	; 0x49ca <__fp_mintl+0x32>
    49b0:	90 51       	subi	r25, 0x10	; 16
    49b2:	86 2b       	or	r24, r22
    49b4:	70 e0       	ldi	r23, 0x00	; 0
    49b6:	60 e0       	ldi	r22, 0x00	; 0
    49b8:	2a f0       	brmi	.+10     	; 0x49c4 <__fp_mintl+0x2c>
    49ba:	9a 95       	dec	r25
    49bc:	66 0f       	add	r22, r22
    49be:	77 1f       	adc	r23, r23
    49c0:	88 1f       	adc	r24, r24
    49c2:	da f7       	brpl	.-10     	; 0x49ba <__fp_mintl+0x22>
    49c4:	88 0f       	add	r24, r24
    49c6:	96 95       	lsr	r25
    49c8:	87 95       	ror	r24
    49ca:	97 f9       	bld	r25, 7
    49cc:	08 95       	ret

000049ce <__fp_mpack>:
    49ce:	9f 3f       	cpi	r25, 0xFF	; 255
    49d0:	31 f0       	breq	.+12     	; 0x49de <__fp_mpack_finite+0xc>

000049d2 <__fp_mpack_finite>:
    49d2:	91 50       	subi	r25, 0x01	; 1
    49d4:	20 f4       	brcc	.+8      	; 0x49de <__fp_mpack_finite+0xc>
    49d6:	87 95       	ror	r24
    49d8:	77 95       	ror	r23
    49da:	67 95       	ror	r22
    49dc:	b7 95       	ror	r27
    49de:	88 0f       	add	r24, r24
    49e0:	91 1d       	adc	r25, r1
    49e2:	96 95       	lsr	r25
    49e4:	87 95       	ror	r24
    49e6:	97 f9       	bld	r25, 7
    49e8:	08 95       	ret

000049ea <__fp_powser>:
    49ea:	df 93       	push	r29
    49ec:	cf 93       	push	r28
    49ee:	1f 93       	push	r17
    49f0:	0f 93       	push	r16
    49f2:	ff 92       	push	r15
    49f4:	ef 92       	push	r14
    49f6:	df 92       	push	r13
    49f8:	7b 01       	movw	r14, r22
    49fa:	8c 01       	movw	r16, r24
    49fc:	68 94       	set
    49fe:	05 c0       	rjmp	.+10     	; 0x4a0a <__fp_powser+0x20>
    4a00:	da 2e       	mov	r13, r26
    4a02:	ef 01       	movw	r28, r30
    4a04:	d5 de       	rcall	.-598    	; 0x47b0 <__mulsf3x>
    4a06:	fe 01       	movw	r30, r28
    4a08:	e8 94       	clt
    4a0a:	a5 91       	lpm	r26, Z+
    4a0c:	25 91       	lpm	r18, Z+
    4a0e:	35 91       	lpm	r19, Z+
    4a10:	45 91       	lpm	r20, Z+
    4a12:	55 91       	lpm	r21, Z+
    4a14:	ae f3       	brts	.-22     	; 0x4a00 <__fp_powser+0x16>
    4a16:	ef 01       	movw	r28, r30
    4a18:	4a dd       	rcall	.-1388   	; 0x44ae <__addsf3x>
    4a1a:	fe 01       	movw	r30, r28
    4a1c:	97 01       	movw	r18, r14
    4a1e:	a8 01       	movw	r20, r16
    4a20:	da 94       	dec	r13
    4a22:	79 f7       	brne	.-34     	; 0x4a02 <__fp_powser+0x18>
    4a24:	df 90       	pop	r13
    4a26:	ef 90       	pop	r14
    4a28:	ff 90       	pop	r15
    4a2a:	0f 91       	pop	r16
    4a2c:	1f 91       	pop	r17
    4a2e:	cf 91       	pop	r28
    4a30:	df 91       	pop	r29
    4a32:	08 95       	ret

00004a34 <inverse>:
    4a34:	9b 01       	movw	r18, r22
    4a36:	ac 01       	movw	r20, r24
    4a38:	60 e0       	ldi	r22, 0x00	; 0
    4a3a:	70 e0       	ldi	r23, 0x00	; 0
    4a3c:	80 e8       	ldi	r24, 0x80	; 128
    4a3e:	9f e3       	ldi	r25, 0x3F	; 63
    4a40:	89 cd       	rjmp	.-1262   	; 0x4554 <__divsf3>
    4a42:	59 ce       	rjmp	.-846    	; 0x46f6 <__fp_inf>
    4a44:	c4 cf       	rjmp	.-120    	; 0x49ce <__fp_mpack>

00004a46 <ldexp>:
    4a46:	87 de       	rcall	.-754    	; 0x4756 <__fp_splitA>
    4a48:	e8 f3       	brcs	.-6      	; 0x4a44 <inverse+0x10>
    4a4a:	99 23       	and	r25, r25
    4a4c:	d9 f3       	breq	.-10     	; 0x4a44 <inverse+0x10>
    4a4e:	94 0f       	add	r25, r20
    4a50:	51 1d       	adc	r21, r1
    4a52:	bb f3       	brvs	.-18     	; 0x4a42 <inverse+0xe>
    4a54:	91 50       	subi	r25, 0x01	; 1
    4a56:	50 40       	sbci	r21, 0x00	; 0
    4a58:	94 f0       	brlt	.+36     	; 0x4a7e <ldexp+0x38>
    4a5a:	59 f0       	breq	.+22     	; 0x4a72 <ldexp+0x2c>
    4a5c:	88 23       	and	r24, r24
    4a5e:	32 f0       	brmi	.+12     	; 0x4a6c <ldexp+0x26>
    4a60:	66 0f       	add	r22, r22
    4a62:	77 1f       	adc	r23, r23
    4a64:	88 1f       	adc	r24, r24
    4a66:	91 50       	subi	r25, 0x01	; 1
    4a68:	50 40       	sbci	r21, 0x00	; 0
    4a6a:	c1 f7       	brne	.-16     	; 0x4a5c <ldexp+0x16>
    4a6c:	9e 3f       	cpi	r25, 0xFE	; 254
    4a6e:	51 05       	cpc	r21, r1
    4a70:	44 f7       	brge	.-48     	; 0x4a42 <inverse+0xe>
    4a72:	88 0f       	add	r24, r24
    4a74:	91 1d       	adc	r25, r1
    4a76:	96 95       	lsr	r25
    4a78:	87 95       	ror	r24
    4a7a:	97 f9       	bld	r25, 7
    4a7c:	08 95       	ret
    4a7e:	5f 3f       	cpi	r21, 0xFF	; 255
    4a80:	ac f0       	brlt	.+42     	; 0x4aac <ldexp+0x66>
    4a82:	98 3e       	cpi	r25, 0xE8	; 232
    4a84:	9c f0       	brlt	.+38     	; 0x4aac <ldexp+0x66>
    4a86:	bb 27       	eor	r27, r27
    4a88:	86 95       	lsr	r24
    4a8a:	77 95       	ror	r23
    4a8c:	67 95       	ror	r22
    4a8e:	b7 95       	ror	r27
    4a90:	08 f4       	brcc	.+2      	; 0x4a94 <ldexp+0x4e>
    4a92:	b1 60       	ori	r27, 0x01	; 1
    4a94:	93 95       	inc	r25
    4a96:	c1 f7       	brne	.-16     	; 0x4a88 <ldexp+0x42>
    4a98:	bb 0f       	add	r27, r27
    4a9a:	58 f7       	brcc	.-42     	; 0x4a72 <ldexp+0x2c>
    4a9c:	11 f4       	brne	.+4      	; 0x4aa2 <ldexp+0x5c>
    4a9e:	60 ff       	sbrs	r22, 0
    4aa0:	e8 cf       	rjmp	.-48     	; 0x4a72 <ldexp+0x2c>
    4aa2:	6f 5f       	subi	r22, 0xFF	; 255
    4aa4:	7f 4f       	sbci	r23, 0xFF	; 255
    4aa6:	8f 4f       	sbci	r24, 0xFF	; 255
    4aa8:	9f 4f       	sbci	r25, 0xFF	; 255
    4aaa:	e3 cf       	rjmp	.-58     	; 0x4a72 <ldexp+0x2c>
    4aac:	6f ce       	rjmp	.-802    	; 0x478c <__fp_szero>
    4aae:	0e f0       	brts	.+2      	; 0x4ab2 <ldexp+0x6c>
    4ab0:	8e cf       	rjmp	.-228    	; 0x49ce <__fp_mpack>
    4ab2:	27 ce       	rjmp	.-946    	; 0x4702 <__fp_nan>
    4ab4:	68 94       	set
    4ab6:	1f ce       	rjmp	.-962    	; 0x46f6 <__fp_inf>

00004ab8 <log>:
    4ab8:	4e de       	rcall	.-868    	; 0x4756 <__fp_splitA>
    4aba:	c8 f3       	brcs	.-14     	; 0x4aae <ldexp+0x68>
    4abc:	99 23       	and	r25, r25
    4abe:	d1 f3       	breq	.-12     	; 0x4ab4 <ldexp+0x6e>
    4ac0:	c6 f3       	brts	.-16     	; 0x4ab2 <ldexp+0x6c>
    4ac2:	df 93       	push	r29
    4ac4:	cf 93       	push	r28
    4ac6:	1f 93       	push	r17
    4ac8:	0f 93       	push	r16
    4aca:	ff 92       	push	r15
    4acc:	c9 2f       	mov	r28, r25
    4ace:	dd 27       	eor	r29, r29
    4ad0:	88 23       	and	r24, r24
    4ad2:	2a f0       	brmi	.+10     	; 0x4ade <log+0x26>
    4ad4:	21 97       	sbiw	r28, 0x01	; 1
    4ad6:	66 0f       	add	r22, r22
    4ad8:	77 1f       	adc	r23, r23
    4ada:	88 1f       	adc	r24, r24
    4adc:	da f7       	brpl	.-10     	; 0x4ad4 <log+0x1c>
    4ade:	20 e0       	ldi	r18, 0x00	; 0
    4ae0:	30 e0       	ldi	r19, 0x00	; 0
    4ae2:	40 e8       	ldi	r20, 0x80	; 128
    4ae4:	5f eb       	ldi	r21, 0xBF	; 191
    4ae6:	9f e3       	ldi	r25, 0x3F	; 63
    4ae8:	88 39       	cpi	r24, 0x98	; 152
    4aea:	20 f0       	brcs	.+8      	; 0x4af4 <log+0x3c>
    4aec:	80 3e       	cpi	r24, 0xE0	; 224
    4aee:	30 f0       	brcs	.+12     	; 0x4afc <log+0x44>
    4af0:	21 96       	adiw	r28, 0x01	; 1
    4af2:	8f 77       	andi	r24, 0x7F	; 127
    4af4:	cb dc       	rcall	.-1642   	; 0x448c <__addsf3>
    4af6:	ec e0       	ldi	r30, 0x0C	; 12
    4af8:	f1 e0       	ldi	r31, 0x01	; 1
    4afa:	03 c0       	rjmp	.+6      	; 0x4b02 <log+0x4a>
    4afc:	c7 dc       	rcall	.-1650   	; 0x448c <__addsf3>
    4afe:	e9 e3       	ldi	r30, 0x39	; 57
    4b00:	f1 e0       	ldi	r31, 0x01	; 1
    4b02:	73 df       	rcall	.-282    	; 0x49ea <__fp_powser>
    4b04:	8b 01       	movw	r16, r22
    4b06:	be 01       	movw	r22, r28
    4b08:	ec 01       	movw	r28, r24
    4b0a:	fb 2e       	mov	r15, r27
    4b0c:	6f 57       	subi	r22, 0x7F	; 127
    4b0e:	71 09       	sbc	r23, r1
    4b10:	75 95       	asr	r23
    4b12:	77 1f       	adc	r23, r23
    4b14:	88 0b       	sbc	r24, r24
    4b16:	99 0b       	sbc	r25, r25
    4b18:	b3 dd       	rcall	.-1178   	; 0x4680 <__floatsisf>
    4b1a:	28 e1       	ldi	r18, 0x18	; 24
    4b1c:	32 e7       	ldi	r19, 0x72	; 114
    4b1e:	41 e3       	ldi	r20, 0x31	; 49
    4b20:	5f e3       	ldi	r21, 0x3F	; 63
    4b22:	46 de       	rcall	.-884    	; 0x47b0 <__mulsf3x>
    4b24:	af 2d       	mov	r26, r15
    4b26:	98 01       	movw	r18, r16
    4b28:	ae 01       	movw	r20, r28
    4b2a:	ff 90       	pop	r15
    4b2c:	0f 91       	pop	r16
    4b2e:	1f 91       	pop	r17
    4b30:	cf 91       	pop	r28
    4b32:	df 91       	pop	r29
    4b34:	bc dc       	rcall	.-1672   	; 0x44ae <__addsf3x>
    4b36:	f6 cd       	rjmp	.-1044   	; 0x4724 <__fp_round>

00004b38 <modf>:
    4b38:	fa 01       	movw	r30, r20
    4b3a:	dc 01       	movw	r26, r24
    4b3c:	aa 0f       	add	r26, r26
    4b3e:	bb 1f       	adc	r27, r27
    4b40:	9b 01       	movw	r18, r22
    4b42:	ac 01       	movw	r20, r24
    4b44:	bf 57       	subi	r27, 0x7F	; 127
    4b46:	28 f4       	brcc	.+10     	; 0x4b52 <modf+0x1a>
    4b48:	22 27       	eor	r18, r18
    4b4a:	33 27       	eor	r19, r19
    4b4c:	44 27       	eor	r20, r20
    4b4e:	50 78       	andi	r21, 0x80	; 128
    4b50:	1f c0       	rjmp	.+62     	; 0x4b90 <modf+0x58>
    4b52:	b7 51       	subi	r27, 0x17	; 23
    4b54:	88 f4       	brcc	.+34     	; 0x4b78 <modf+0x40>
    4b56:	ab 2f       	mov	r26, r27
    4b58:	00 24       	eor	r0, r0
    4b5a:	46 95       	lsr	r20
    4b5c:	37 95       	ror	r19
    4b5e:	27 95       	ror	r18
    4b60:	01 1c       	adc	r0, r1
    4b62:	a3 95       	inc	r26
    4b64:	d2 f3       	brmi	.-12     	; 0x4b5a <modf+0x22>
    4b66:	00 20       	and	r0, r0
    4b68:	69 f0       	breq	.+26     	; 0x4b84 <modf+0x4c>
    4b6a:	22 0f       	add	r18, r18
    4b6c:	33 1f       	adc	r19, r19
    4b6e:	44 1f       	adc	r20, r20
    4b70:	b3 95       	inc	r27
    4b72:	da f3       	brmi	.-10     	; 0x4b6a <modf+0x32>
    4b74:	0d d0       	rcall	.+26     	; 0x4b90 <modf+0x58>
    4b76:	89 cc       	rjmp	.-1774   	; 0x448a <__subsf3>
    4b78:	61 30       	cpi	r22, 0x01	; 1
    4b7a:	71 05       	cpc	r23, r1
    4b7c:	a0 e8       	ldi	r26, 0x80	; 128
    4b7e:	8a 07       	cpc	r24, r26
    4b80:	b9 46       	sbci	r27, 0x69	; 105
    4b82:	30 f4       	brcc	.+12     	; 0x4b90 <modf+0x58>
    4b84:	9b 01       	movw	r18, r22
    4b86:	ac 01       	movw	r20, r24
    4b88:	66 27       	eor	r22, r22
    4b8a:	77 27       	eor	r23, r23
    4b8c:	88 27       	eor	r24, r24
    4b8e:	90 78       	andi	r25, 0x80	; 128
    4b90:	30 96       	adiw	r30, 0x00	; 0
    4b92:	21 f0       	breq	.+8      	; 0x4b9c <modf+0x64>
    4b94:	20 83       	st	Z, r18
    4b96:	31 83       	std	Z+1, r19	; 0x01
    4b98:	42 83       	std	Z+2, r20	; 0x02
    4b9a:	53 83       	std	Z+3, r21	; 0x03
    4b9c:	08 95       	ret

00004b9e <__udivmodsi4>:
    4b9e:	a1 e2       	ldi	r26, 0x21	; 33
    4ba0:	1a 2e       	mov	r1, r26
    4ba2:	aa 1b       	sub	r26, r26
    4ba4:	bb 1b       	sub	r27, r27
    4ba6:	fd 01       	movw	r30, r26
    4ba8:	0d c0       	rjmp	.+26     	; 0x4bc4 <__udivmodsi4_ep>

00004baa <__udivmodsi4_loop>:
    4baa:	aa 1f       	adc	r26, r26
    4bac:	bb 1f       	adc	r27, r27
    4bae:	ee 1f       	adc	r30, r30
    4bb0:	ff 1f       	adc	r31, r31
    4bb2:	a2 17       	cp	r26, r18
    4bb4:	b3 07       	cpc	r27, r19
    4bb6:	e4 07       	cpc	r30, r20
    4bb8:	f5 07       	cpc	r31, r21
    4bba:	20 f0       	brcs	.+8      	; 0x4bc4 <__udivmodsi4_ep>
    4bbc:	a2 1b       	sub	r26, r18
    4bbe:	b3 0b       	sbc	r27, r19
    4bc0:	e4 0b       	sbc	r30, r20
    4bc2:	f5 0b       	sbc	r31, r21

00004bc4 <__udivmodsi4_ep>:
    4bc4:	66 1f       	adc	r22, r22
    4bc6:	77 1f       	adc	r23, r23
    4bc8:	88 1f       	adc	r24, r24
    4bca:	99 1f       	adc	r25, r25
    4bcc:	1a 94       	dec	r1
    4bce:	69 f7       	brne	.-38     	; 0x4baa <__udivmodsi4_loop>
    4bd0:	60 95       	com	r22
    4bd2:	70 95       	com	r23
    4bd4:	80 95       	com	r24
    4bd6:	90 95       	com	r25
    4bd8:	9b 01       	movw	r18, r22
    4bda:	ac 01       	movw	r20, r24
    4bdc:	bd 01       	movw	r22, r26
    4bde:	cf 01       	movw	r24, r30
    4be0:	08 95       	ret

00004be2 <memcpy>:
    4be2:	fb 01       	movw	r30, r22
    4be4:	dc 01       	movw	r26, r24
    4be6:	02 c0       	rjmp	.+4      	; 0x4bec <memcpy+0xa>
    4be8:	01 90       	ld	r0, Z+
    4bea:	0d 92       	st	X+, r0
    4bec:	41 50       	subi	r20, 0x01	; 1
    4bee:	50 40       	sbci	r21, 0x00	; 0
    4bf0:	d8 f7       	brcc	.-10     	; 0x4be8 <memcpy+0x6>
    4bf2:	08 95       	ret

00004bf4 <memset>:
    4bf4:	dc 01       	movw	r26, r24
    4bf6:	01 c0       	rjmp	.+2      	; 0x4bfa <memset+0x6>
    4bf8:	6d 93       	st	X+, r22
    4bfa:	41 50       	subi	r20, 0x01	; 1
    4bfc:	50 40       	sbci	r21, 0x00	; 0
    4bfe:	e0 f7       	brcc	.-8      	; 0x4bf8 <memset+0x4>
    4c00:	08 95       	ret

00004c02 <_exit>:
    4c02:	f8 94       	cli

00004c04 <__stop_program>:
    4c04:	ff cf       	rjmp	.-2      	; 0x4c04 <__stop_program>
