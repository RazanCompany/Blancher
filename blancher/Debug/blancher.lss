
blancher.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
<<<<<<< HEAD
  0 .data         000000a2  00800200  00003f98  0000402c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003f98  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000ae2  008002a2  008002a2  000040ce  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000040ce  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004100  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000008f0  00000000  00000000  00004140  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000b99c  00000000  00000000  00004a30  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002a5f  00000000  00000000  000103cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000836e  00000000  00000000  00012e2b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001cac  00000000  00000000  0001b19c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00018427  00000000  00000000  0001ce48  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000b78f  00000000  00000000  0003526f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000a00  00000000  00000000  000409fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000064b7  00000000  00000000  000413fe  2**0
=======
  0 .data         0000007a  00800200  0000301c  000030b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000301c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000008ac  0080027a  0080027a  0000312a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000312a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000315c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000008b0  00000000  00000000  0000319c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000b4c3  00000000  00000000  00003a4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000282a  00000000  00000000  0000ef0f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00007d29  00000000  00000000  00011739  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001c54  00000000  00000000  00019464  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0001822d  00000000  00000000  0001b0b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000b66f  00000000  00000000  000332e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000009e0  00000000  00000000  0003e954  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00006242  00000000  00000000  0003f334  2**0
>>>>>>> 131ed066d936db6cb82dc024f16de69a40fef126
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	9a c0       	rjmp	.+308    	; 0x136 <__ctors_end>
       2:	00 00       	nop
<<<<<<< HEAD
       4:	b9 c0       	rjmp	.+370    	; 0x178 <__bad_interrupt>
       6:	00 00       	nop
       8:	b7 c0       	rjmp	.+366    	; 0x178 <__bad_interrupt>
       a:	00 00       	nop
       c:	b5 c0       	rjmp	.+362    	; 0x178 <__bad_interrupt>
       e:	00 00       	nop
      10:	b3 c0       	rjmp	.+358    	; 0x178 <__bad_interrupt>
      12:	00 00       	nop
      14:	b1 c0       	rjmp	.+354    	; 0x178 <__bad_interrupt>
      16:	00 00       	nop
      18:	af c0       	rjmp	.+350    	; 0x178 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	ad c0       	rjmp	.+346    	; 0x178 <__bad_interrupt>
      1e:	00 00       	nop
      20:	ab c0       	rjmp	.+342    	; 0x178 <__bad_interrupt>
      22:	00 00       	nop
      24:	a9 c0       	rjmp	.+338    	; 0x178 <__bad_interrupt>
      26:	00 00       	nop
      28:	a7 c0       	rjmp	.+334    	; 0x178 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	a5 c0       	rjmp	.+330    	; 0x178 <__bad_interrupt>
      2e:	00 00       	nop
      30:	0c 94 0f 12 	jmp	0x241e	; 0x241e <__vector_12>
      34:	0c 94 73 1f 	jmp	0x3ee6	; 0x3ee6 <__vector_13>
      38:	9f c0       	rjmp	.+318    	; 0x178 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	9d c0       	rjmp	.+314    	; 0x178 <__bad_interrupt>
      3e:	00 00       	nop
      40:	9b c0       	rjmp	.+310    	; 0x178 <__bad_interrupt>
      42:	00 00       	nop
      44:	9a c0       	rjmp	.+308    	; 0x17a <__vector_17>
      46:	00 00       	nop
      48:	97 c0       	rjmp	.+302    	; 0x178 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	95 c0       	rjmp	.+298    	; 0x178 <__bad_interrupt>
      4e:	00 00       	nop
      50:	93 c0       	rjmp	.+294    	; 0x178 <__bad_interrupt>
      52:	00 00       	nop
      54:	91 c0       	rjmp	.+290    	; 0x178 <__bad_interrupt>
      56:	00 00       	nop
      58:	8f c0       	rjmp	.+286    	; 0x178 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	8d c0       	rjmp	.+282    	; 0x178 <__bad_interrupt>
      5e:	00 00       	nop
      60:	8b c0       	rjmp	.+278    	; 0x178 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 b7 0b 	jmp	0x176e	; 0x176e <__vector_25>
      68:	0c 94 f0 0b 	jmp	0x17e0	; 0x17e0 <__vector_26>
      6c:	85 c0       	rjmp	.+266    	; 0x178 <__bad_interrupt>
      6e:	00 00       	nop
      70:	83 c0       	rjmp	.+262    	; 0x178 <__bad_interrupt>
      72:	00 00       	nop
      74:	0c 94 53 0b 	jmp	0x16a6	; 0x16a6 <__vector_29>
      78:	7f c0       	rjmp	.+254    	; 0x178 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	7d c0       	rjmp	.+250    	; 0x178 <__bad_interrupt>
      7e:	00 00       	nop
      80:	e2 c0       	rjmp	.+452    	; 0x246 <__vector_32>
      82:	00 00       	nop
      84:	79 c0       	rjmp	.+242    	; 0x178 <__bad_interrupt>
      86:	00 00       	nop
      88:	77 c0       	rjmp	.+238    	; 0x178 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	75 c0       	rjmp	.+234    	; 0x178 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 bd 0c 	jmp	0x197a	; 0x197a <__vector_36>
      94:	0c 94 f6 0c 	jmp	0x19ec	; 0x19ec <__vector_37>
      98:	6f c0       	rjmp	.+222    	; 0x178 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	6d c0       	rjmp	.+218    	; 0x178 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	6b c0       	rjmp	.+214    	; 0x178 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	69 c0       	rjmp	.+210    	; 0x178 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	34 c1       	rjmp	.+616    	; 0x312 <__vector_42>
      aa:	00 00       	nop
      ac:	65 c0       	rjmp	.+202    	; 0x178 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	63 c0       	rjmp	.+198    	; 0x178 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	61 c0       	rjmp	.+194    	; 0x178 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	5f c0       	rjmp	.+190    	; 0x178 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	90 c1       	rjmp	.+800    	; 0x3de <__vector_47>
      be:	00 00       	nop
      c0:	5b c0       	rjmp	.+182    	; 0x178 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	59 c0       	rjmp	.+178    	; 0x178 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	57 c0       	rjmp	.+174    	; 0x178 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 cc 0d 	jmp	0x1b98	; 0x1b98 <__vector_51>
      d0:	0c 94 05 0e 	jmp	0x1c0a	; 0x1c0a <__vector_52>
      d4:	51 c0       	rjmp	.+162    	; 0x178 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 d8 0e 	jmp	0x1db0	; 0x1db0 <__vector_54>
      dc:	0c 94 11 0f 	jmp	0x1e22	; 0x1e22 <__vector_55>
      e0:	4b c0       	rjmp	.+150    	; 0x178 <__bad_interrupt>
	...

000000e4 <prvIdleTask>:
      e4:	c4 e8       	ldi	r28, 0x84	; 132
      e6:	da e0       	ldi	r29, 0x0A	; 10
      e8:	0a e9       	ldi	r16, 0x9A	; 154
      ea:	1a e0       	ldi	r17, 0x0A	; 10
      ec:	80 91 83 0a 	lds	r24, 0x0A83	; 0x800a83 <uxDeletedTasksWaitingCleanUp>
=======
       4:	b8 c0       	rjmp	.+368    	; 0x176 <__bad_interrupt>
       6:	00 00       	nop
       8:	b6 c0       	rjmp	.+364    	; 0x176 <__bad_interrupt>
       a:	00 00       	nop
       c:	b4 c0       	rjmp	.+360    	; 0x176 <__bad_interrupt>
       e:	00 00       	nop
      10:	b2 c0       	rjmp	.+356    	; 0x176 <__bad_interrupt>
      12:	00 00       	nop
      14:	b0 c0       	rjmp	.+352    	; 0x176 <__bad_interrupt>
      16:	00 00       	nop
      18:	ae c0       	rjmp	.+348    	; 0x176 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	ac c0       	rjmp	.+344    	; 0x176 <__bad_interrupt>
      1e:	00 00       	nop
      20:	aa c0       	rjmp	.+340    	; 0x176 <__bad_interrupt>
      22:	00 00       	nop
      24:	a8 c0       	rjmp	.+336    	; 0x176 <__bad_interrupt>
      26:	00 00       	nop
      28:	a6 c0       	rjmp	.+332    	; 0x176 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	a4 c0       	rjmp	.+328    	; 0x176 <__bad_interrupt>
      2e:	00 00       	nop
      30:	0c 94 b5 0a 	jmp	0x156a	; 0x156a <__vector_12>
      34:	0c 94 b5 17 	jmp	0x2f6a	; 0x2f6a <__vector_13>
      38:	9e c0       	rjmp	.+316    	; 0x176 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	9c c0       	rjmp	.+312    	; 0x176 <__bad_interrupt>
      3e:	00 00       	nop
      40:	9a c0       	rjmp	.+308    	; 0x176 <__bad_interrupt>
      42:	00 00       	nop
      44:	99 c0       	rjmp	.+306    	; 0x178 <__vector_17>
      46:	00 00       	nop
      48:	96 c0       	rjmp	.+300    	; 0x176 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	94 c0       	rjmp	.+296    	; 0x176 <__bad_interrupt>
      4e:	00 00       	nop
      50:	92 c0       	rjmp	.+292    	; 0x176 <__bad_interrupt>
      52:	00 00       	nop
      54:	90 c0       	rjmp	.+288    	; 0x176 <__bad_interrupt>
      56:	00 00       	nop
      58:	8e c0       	rjmp	.+284    	; 0x176 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	8c c0       	rjmp	.+280    	; 0x176 <__bad_interrupt>
      5e:	00 00       	nop
      60:	8a c0       	rjmp	.+276    	; 0x176 <__bad_interrupt>
      62:	00 00       	nop
      64:	2a c4       	rjmp	.+2132   	; 0x8ba <__vector_25>
      66:	00 00       	nop
      68:	61 c4       	rjmp	.+2242   	; 0x92c <__vector_26>
      6a:	00 00       	nop
      6c:	84 c0       	rjmp	.+264    	; 0x176 <__bad_interrupt>
      6e:	00 00       	nop
      70:	82 c0       	rjmp	.+260    	; 0x176 <__bad_interrupt>
      72:	00 00       	nop
      74:	be c3       	rjmp	.+1916   	; 0x7f2 <__vector_29>
      76:	00 00       	nop
      78:	7e c0       	rjmp	.+252    	; 0x176 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	7c c0       	rjmp	.+248    	; 0x176 <__bad_interrupt>
      7e:	00 00       	nop
      80:	e1 c0       	rjmp	.+450    	; 0x244 <__vector_32>
      82:	00 00       	nop
      84:	78 c0       	rjmp	.+240    	; 0x176 <__bad_interrupt>
      86:	00 00       	nop
      88:	76 c0       	rjmp	.+236    	; 0x176 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	74 c0       	rjmp	.+232    	; 0x176 <__bad_interrupt>
      8e:	00 00       	nop
      90:	1a c5       	rjmp	.+2612   	; 0xac6 <__vector_36>
      92:	00 00       	nop
      94:	51 c5       	rjmp	.+2722   	; 0xb38 <__vector_37>
      96:	00 00       	nop
      98:	6e c0       	rjmp	.+220    	; 0x176 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	6c c0       	rjmp	.+216    	; 0x176 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	6a c0       	rjmp	.+212    	; 0x176 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	68 c0       	rjmp	.+208    	; 0x176 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	33 c1       	rjmp	.+614    	; 0x310 <__vector_42>
      aa:	00 00       	nop
      ac:	64 c0       	rjmp	.+200    	; 0x176 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	62 c0       	rjmp	.+196    	; 0x176 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	60 c0       	rjmp	.+192    	; 0x176 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	5e c0       	rjmp	.+188    	; 0x176 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	8f c1       	rjmp	.+798    	; 0x3dc <__vector_47>
      be:	00 00       	nop
      c0:	5a c0       	rjmp	.+180    	; 0x176 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	58 c0       	rjmp	.+176    	; 0x176 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	56 c0       	rjmp	.+172    	; 0x176 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0b c6       	rjmp	.+3094   	; 0xce4 <__vector_51>
      ce:	00 00       	nop
      d0:	42 c6       	rjmp	.+3204   	; 0xd56 <__vector_52>
      d2:	00 00       	nop
      d4:	50 c0       	rjmp	.+160    	; 0x176 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	11 c7       	rjmp	.+3618   	; 0xefc <__vector_54>
      da:	00 00       	nop
      dc:	48 c7       	rjmp	.+3728   	; 0xf6e <__vector_55>
      de:	00 00       	nop
      e0:	4a c0       	rjmp	.+148    	; 0x176 <__bad_interrupt>
	...

000000e4 <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
      e4:	ca e4       	ldi	r28, 0x4A	; 74
      e6:	d8 e0       	ldi	r29, 0x08	; 8
      e8:	00 e6       	ldi	r16, 0x60	; 96
      ea:	18 e0       	ldi	r17, 0x08	; 8
      ec:	80 91 49 08 	lds	r24, 0x0849	; 0x800849 <uxDeletedTasksWaitingCleanUp>
>>>>>>> 131ed066d936db6cb82dc024f16de69a40fef126
      f0:	88 23       	and	r24, r24
      f2:	d1 f0       	breq	.+52     	; 0x128 <prvIdleTask+0x44>
      f4:	0f b6       	in	r0, 0x3f	; 63
      f6:	f8 94       	cli
      f8:	0f 92       	push	r0
      fa:	ed 81       	ldd	r30, Y+5	; 0x05
      fc:	fe 81       	ldd	r31, Y+6	; 0x06
      fe:	86 81       	ldd	r24, Z+6	; 0x06
     100:	97 81       	ldd	r25, Z+7	; 0x07
     102:	02 96       	adiw	r24, 0x02	; 2
<<<<<<< HEAD
     104:	0e 94 75 10 	call	0x20ea	; 0x20ea <uxListRemove>
     108:	80 91 79 0a 	lds	r24, 0x0A79	; 0x800a79 <uxCurrentNumberOfTasks>
     10c:	81 50       	subi	r24, 0x01	; 1
     10e:	80 93 79 0a 	sts	0x0A79, r24	; 0x800a79 <uxCurrentNumberOfTasks>
     112:	80 91 83 0a 	lds	r24, 0x0A83	; 0x800a83 <uxDeletedTasksWaitingCleanUp>
     116:	81 50       	subi	r24, 0x01	; 1
     118:	80 93 83 0a 	sts	0x0A83, r24	; 0x800a83 <uxDeletedTasksWaitingCleanUp>
     11c:	0f 90       	pop	r0
     11e:	0f be       	out	0x3f, r0	; 63
     120:	80 91 83 0a 	lds	r24, 0x0A83	; 0x800a83 <uxDeletedTasksWaitingCleanUp>
=======
     104:	0e 94 1b 09 	call	0x1236	; 0x1236 <uxListRemove>
     108:	80 91 3f 08 	lds	r24, 0x083F	; 0x80083f <uxCurrentNumberOfTasks>
     10c:	81 50       	subi	r24, 0x01	; 1
     10e:	80 93 3f 08 	sts	0x083F, r24	; 0x80083f <uxCurrentNumberOfTasks>
     112:	80 91 49 08 	lds	r24, 0x0849	; 0x800849 <uxDeletedTasksWaitingCleanUp>
     116:	81 50       	subi	r24, 0x01	; 1
     118:	80 93 49 08 	sts	0x0849, r24	; 0x800849 <uxDeletedTasksWaitingCleanUp>
     11c:	0f 90       	pop	r0
     11e:	0f be       	out	0x3f, r0	; 63
     120:	80 91 49 08 	lds	r24, 0x0849	; 0x800849 <uxDeletedTasksWaitingCleanUp>
>>>>>>> 131ed066d936db6cb82dc024f16de69a40fef126
     124:	81 11       	cpse	r24, r1
     126:	e6 cf       	rjmp	.-52     	; 0xf4 <prvIdleTask+0x10>
     128:	f8 01       	movw	r30, r16
     12a:	80 81       	ld	r24, Z
     12c:	82 30       	cpi	r24, 0x02	; 2
     12e:	f0 f2       	brcs	.-68     	; 0xec <prvIdleTask+0x8>
<<<<<<< HEAD
     130:	0e 94 4a 11 	call	0x2294	; 0x2294 <vPortYield>
=======
     130:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <vPortYield>
>>>>>>> 131ed066d936db6cb82dc024f16de69a40fef126
     134:	db cf       	rjmp	.-74     	; 0xec <prvIdleTask+0x8>

00000136 <__ctors_end>:
     136:	11 24       	eor	r1, r1
     138:	1f be       	out	0x3f, r1	; 63
     13a:	cf ef       	ldi	r28, 0xFF	; 255
     13c:	d1 e2       	ldi	r29, 0x21	; 33
     13e:	de bf       	out	0x3e, r29	; 62
     140:	cd bf       	out	0x3d, r28	; 61
     142:	00 e0       	ldi	r16, 0x00	; 0
     144:	0c bf       	out	0x3c, r16	; 60

00000146 <__do_copy_data>:
     146:	12 e0       	ldi	r17, 0x02	; 2
     148:	a0 e0       	ldi	r26, 0x00	; 0
     14a:	b2 e0       	ldi	r27, 0x02	; 2
<<<<<<< HEAD
     14c:	e8 e9       	ldi	r30, 0x98	; 152
     14e:	ff e3       	ldi	r31, 0x3F	; 63
=======
     14c:	ec e1       	ldi	r30, 0x1C	; 28
     14e:	f0 e3       	ldi	r31, 0x30	; 48
>>>>>>> 131ed066d936db6cb82dc024f16de69a40fef126
     150:	00 e0       	ldi	r16, 0x00	; 0
     152:	0b bf       	out	0x3b, r16	; 59
     154:	02 c0       	rjmp	.+4      	; 0x15a <__do_copy_data+0x14>
     156:	07 90       	elpm	r0, Z+
     158:	0d 92       	st	X+, r0
<<<<<<< HEAD
     15a:	a2 3a       	cpi	r26, 0xA2	; 162
=======
     15a:	aa 37       	cpi	r26, 0x7A	; 122
>>>>>>> 131ed066d936db6cb82dc024f16de69a40fef126
     15c:	b1 07       	cpc	r27, r17
     15e:	d9 f7       	brne	.-10     	; 0x156 <__do_copy_data+0x10>

00000160 <__do_clear_bss>:
<<<<<<< HEAD
     160:	2d e0       	ldi	r18, 0x0D	; 13
     162:	a2 ea       	ldi	r26, 0xA2	; 162
=======
     160:	2b e0       	ldi	r18, 0x0B	; 11
     162:	aa e7       	ldi	r26, 0x7A	; 122
>>>>>>> 131ed066d936db6cb82dc024f16de69a40fef126
     164:	b2 e0       	ldi	r27, 0x02	; 2
     166:	01 c0       	rjmp	.+2      	; 0x16a <.do_clear_bss_start>

00000168 <.do_clear_bss_loop>:
     168:	1d 92       	st	X+, r1

0000016a <.do_clear_bss_start>:
<<<<<<< HEAD
     16a:	a4 38       	cpi	r26, 0x84	; 132
     16c:	b2 07       	cpc	r27, r18
     16e:	e1 f7       	brne	.-8      	; 0x168 <.do_clear_bss_loop>
     170:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <main>
     174:	0c 94 ca 1f 	jmp	0x3f94	; 0x3f94 <_exit>

00000178 <__bad_interrupt>:
     178:	43 cf       	rjmp	.-378    	; 0x0 <__vectors>

0000017a <__vector_17>:
=======
     16a:	a6 32       	cpi	r26, 0x26	; 38
     16c:	b2 07       	cpc	r27, r18
     16e:	e1 f7       	brne	.-8      	; 0x168 <.do_clear_bss_loop>
     170:	f0 d2       	rcall	.+1504   	; 0x752 <main>
     172:	0c 94 0c 18 	jmp	0x3018	; 0x3018 <_exit>

00000176 <__bad_interrupt>:
     176:	44 cf       	rjmp	.-376    	; 0x0 <__vectors>

00000178 <__vector_17>:
>>>>>>> 131ed066d936db6cb82dc024f16de69a40fef126
    return 1;// Setup done ok
}//timer_init

// intruptted service routine when we have rech the number of  Ticks On Encoder
ISR(TIMER1_COMPA_vect)
{
<<<<<<< HEAD
     17a:	1f 92       	push	r1
     17c:	0f 92       	push	r0
     17e:	0f b6       	in	r0, 0x3f	; 63
     180:	0f 92       	push	r0
     182:	11 24       	eor	r1, r1
     184:	0b b6       	in	r0, 0x3b	; 59
     186:	0f 92       	push	r0
     188:	cf 92       	push	r12
     18a:	df 92       	push	r13
     18c:	ef 92       	push	r14
     18e:	ff 92       	push	r15
     190:	0f 93       	push	r16
     192:	1f 93       	push	r17
     194:	2f 93       	push	r18
     196:	3f 93       	push	r19
     198:	4f 93       	push	r20
     19a:	5f 93       	push	r21
     19c:	6f 93       	push	r22
     19e:	7f 93       	push	r23
     1a0:	8f 93       	push	r24
     1a2:	9f 93       	push	r25
     1a4:	af 93       	push	r26
     1a6:	bf 93       	push	r27
     1a8:	ef 93       	push	r30
     1aa:	ff 93       	push	r31
	// get the time now
	g_Timer1_new_time = Get_millis();
     1ac:	0e 94 68 1f 	call	0x3ed0	; 0x3ed0 <Get_millis>
     1b0:	8b 01       	movw	r16, r22
     1b2:	9c 01       	movw	r18, r24
     1b4:	60 93 53 0b 	sts	0x0B53, r22	; 0x800b53 <g_Timer1_new_time>
     1b8:	70 93 54 0b 	sts	0x0B54, r23	; 0x800b54 <g_Timer1_new_time+0x1>
     1bc:	80 93 55 0b 	sts	0x0B55, r24	; 0x800b55 <g_Timer1_new_time+0x2>
     1c0:	90 93 56 0b 	sts	0x0B56, r25	; 0x800b56 <g_Timer1_new_time+0x3>
	// calculate the diff between now and last interrupt
	g_diff_time = g_Timer1_new_time - g_Timer1_old_time;
     1c4:	40 91 33 0b 	lds	r20, 0x0B33	; 0x800b33 <g_Timer1_old_time>
     1c8:	50 91 34 0b 	lds	r21, 0x0B34	; 0x800b34 <g_Timer1_old_time+0x1>
     1cc:	60 91 35 0b 	lds	r22, 0x0B35	; 0x800b35 <g_Timer1_old_time+0x2>
     1d0:	70 91 36 0b 	lds	r23, 0x0B36	; 0x800b36 <g_Timer1_old_time+0x3>
     1d4:	68 01       	movw	r12, r16
     1d6:	79 01       	movw	r14, r18
     1d8:	c4 1a       	sub	r12, r20
     1da:	d5 0a       	sbc	r13, r21
     1dc:	e6 0a       	sbc	r14, r22
     1de:	f7 0a       	sbc	r15, r23
     1e0:	c7 01       	movw	r24, r14
     1e2:	b6 01       	movw	r22, r12
     1e4:	c0 92 3b 0b 	sts	0x0B3B, r12	; 0x800b3b <g_diff_time>
     1e8:	d0 92 3c 0b 	sts	0x0B3C, r13	; 0x800b3c <g_diff_time+0x1>
     1ec:	e0 92 3d 0b 	sts	0x0B3D, r14	; 0x800b3d <g_diff_time+0x2>
     1f0:	f0 92 3e 0b 	sts	0x0B3E, r15	; 0x800b3e <g_diff_time+0x3>
	// save the to the old time to next interrupt
	g_Timer1_old_time = g_Timer1_new_time;
     1f4:	00 93 33 0b 	sts	0x0B33, r16	; 0x800b33 <g_Timer1_old_time>
     1f8:	10 93 34 0b 	sts	0x0B34, r17	; 0x800b34 <g_Timer1_old_time+0x1>
     1fc:	20 93 35 0b 	sts	0x0B35, r18	; 0x800b35 <g_Timer1_old_time+0x2>
     200:	30 93 36 0b 	sts	0x0B36, r19	; 0x800b36 <g_Timer1_old_time+0x3>
	//call back function on upper layer to get time
	g_timer1_config->isr_call_back(g_diff_time);
     204:	e0 91 4d 0b 	lds	r30, 0x0B4D	; 0x800b4d <g_timer1_config>
     208:	f0 91 4e 0b 	lds	r31, 0x0B4E	; 0x800b4e <g_timer1_config+0x1>
     20c:	02 80       	ldd	r0, Z+2	; 0x02
     20e:	f3 81       	ldd	r31, Z+3	; 0x03
     210:	e0 2d       	mov	r30, r0
     212:	19 95       	eicall
}
     214:	ff 91       	pop	r31
     216:	ef 91       	pop	r30
     218:	bf 91       	pop	r27
     21a:	af 91       	pop	r26
     21c:	9f 91       	pop	r25
     21e:	8f 91       	pop	r24
     220:	7f 91       	pop	r23
     222:	6f 91       	pop	r22
     224:	5f 91       	pop	r21
     226:	4f 91       	pop	r20
     228:	3f 91       	pop	r19
     22a:	2f 91       	pop	r18
     22c:	1f 91       	pop	r17
     22e:	0f 91       	pop	r16
     230:	ff 90       	pop	r15
     232:	ef 90       	pop	r14
     234:	df 90       	pop	r13
     236:	cf 90       	pop	r12
     238:	0f 90       	pop	r0
     23a:	0b be       	out	0x3b, r0	; 59
     23c:	0f 90       	pop	r0
     23e:	0f be       	out	0x3f, r0	; 63
     240:	0f 90       	pop	r0
     242:	1f 90       	pop	r1
     244:	18 95       	reti

00000246 <__vector_32>:
// intruptted service routine when we have rech the number of  Ticks On Encoder
ISR(TIMER3_COMPA_vect)
{
     246:	1f 92       	push	r1
     248:	0f 92       	push	r0
     24a:	0f b6       	in	r0, 0x3f	; 63
     24c:	0f 92       	push	r0
     24e:	11 24       	eor	r1, r1
     250:	0b b6       	in	r0, 0x3b	; 59
     252:	0f 92       	push	r0
     254:	cf 92       	push	r12
     256:	df 92       	push	r13
     258:	ef 92       	push	r14
     25a:	ff 92       	push	r15
     25c:	0f 93       	push	r16
     25e:	1f 93       	push	r17
     260:	2f 93       	push	r18
     262:	3f 93       	push	r19
     264:	4f 93       	push	r20
     266:	5f 93       	push	r21
     268:	6f 93       	push	r22
     26a:	7f 93       	push	r23
     26c:	8f 93       	push	r24
     26e:	9f 93       	push	r25
     270:	af 93       	push	r26
     272:	bf 93       	push	r27
     274:	ef 93       	push	r30
     276:	ff 93       	push	r31
	// get the time now
	g_Timer3_new_time = Get_millis();
     278:	0e 94 68 1f 	call	0x3ed0	; 0x3ed0 <Get_millis>
     27c:	8b 01       	movw	r16, r22
     27e:	9c 01       	movw	r18, r24
     280:	60 93 49 0b 	sts	0x0B49, r22	; 0x800b49 <g_Timer3_new_time>
     284:	70 93 4a 0b 	sts	0x0B4A, r23	; 0x800b4a <g_Timer3_new_time+0x1>
     288:	80 93 4b 0b 	sts	0x0B4B, r24	; 0x800b4b <g_Timer3_new_time+0x2>
     28c:	90 93 4c 0b 	sts	0x0B4C, r25	; 0x800b4c <g_Timer3_new_time+0x3>
	// calculate the diff between now and last interrupt
	g_diff_time = g_Timer3_new_time - g_Timer3_old_time;
     290:	40 91 2d 0b 	lds	r20, 0x0B2D	; 0x800b2d <g_Timer3_old_time>
     294:	50 91 2e 0b 	lds	r21, 0x0B2E	; 0x800b2e <g_Timer3_old_time+0x1>
     298:	60 91 2f 0b 	lds	r22, 0x0B2F	; 0x800b2f <g_Timer3_old_time+0x2>
     29c:	70 91 30 0b 	lds	r23, 0x0B30	; 0x800b30 <g_Timer3_old_time+0x3>
     2a0:	68 01       	movw	r12, r16
     2a2:	79 01       	movw	r14, r18
     2a4:	c4 1a       	sub	r12, r20
     2a6:	d5 0a       	sbc	r13, r21
     2a8:	e6 0a       	sbc	r14, r22
     2aa:	f7 0a       	sbc	r15, r23
     2ac:	c7 01       	movw	r24, r14
     2ae:	b6 01       	movw	r22, r12
     2b0:	c0 92 3b 0b 	sts	0x0B3B, r12	; 0x800b3b <g_diff_time>
     2b4:	d0 92 3c 0b 	sts	0x0B3C, r13	; 0x800b3c <g_diff_time+0x1>
     2b8:	e0 92 3d 0b 	sts	0x0B3D, r14	; 0x800b3d <g_diff_time+0x2>
     2bc:	f0 92 3e 0b 	sts	0x0B3E, r15	; 0x800b3e <g_diff_time+0x3>
	// save the to the old time to next interrupt
	g_Timer3_old_time = g_Timer3_new_time;
     2c0:	00 93 2d 0b 	sts	0x0B2D, r16	; 0x800b2d <g_Timer3_old_time>
     2c4:	10 93 2e 0b 	sts	0x0B2E, r17	; 0x800b2e <g_Timer3_old_time+0x1>
     2c8:	20 93 2f 0b 	sts	0x0B2F, r18	; 0x800b2f <g_Timer3_old_time+0x2>
     2cc:	30 93 30 0b 	sts	0x0B30, r19	; 0x800b30 <g_Timer3_old_time+0x3>
	//call back function on upper layer to get time
	g_timer3_config->isr_call_back(g_diff_time);
     2d0:	e0 91 31 0b 	lds	r30, 0x0B31	; 0x800b31 <g_timer3_config>
     2d4:	f0 91 32 0b 	lds	r31, 0x0B32	; 0x800b32 <g_timer3_config+0x1>
     2d8:	02 80       	ldd	r0, Z+2	; 0x02
     2da:	f3 81       	ldd	r31, Z+3	; 0x03
     2dc:	e0 2d       	mov	r30, r0
     2de:	19 95       	eicall
}
     2e0:	ff 91       	pop	r31
     2e2:	ef 91       	pop	r30
     2e4:	bf 91       	pop	r27
     2e6:	af 91       	pop	r26
     2e8:	9f 91       	pop	r25
     2ea:	8f 91       	pop	r24
     2ec:	7f 91       	pop	r23
     2ee:	6f 91       	pop	r22
     2f0:	5f 91       	pop	r21
     2f2:	4f 91       	pop	r20
     2f4:	3f 91       	pop	r19
     2f6:	2f 91       	pop	r18
     2f8:	1f 91       	pop	r17
     2fa:	0f 91       	pop	r16
     2fc:	ff 90       	pop	r15
     2fe:	ef 90       	pop	r14
     300:	df 90       	pop	r13
     302:	cf 90       	pop	r12
     304:	0f 90       	pop	r0
     306:	0b be       	out	0x3b, r0	; 59
     308:	0f 90       	pop	r0
     30a:	0f be       	out	0x3f, r0	; 63
     30c:	0f 90       	pop	r0
     30e:	1f 90       	pop	r1
     310:	18 95       	reti

00000312 <__vector_42>:
// intruptted service routine when we have rech the number of  Ticks On Encoder
ISR(TIMER4_COMPA_vect)
{
     312:	1f 92       	push	r1
     314:	0f 92       	push	r0
     316:	0f b6       	in	r0, 0x3f	; 63
     318:	0f 92       	push	r0
     31a:	11 24       	eor	r1, r1
     31c:	0b b6       	in	r0, 0x3b	; 59
     31e:	0f 92       	push	r0
     320:	cf 92       	push	r12
     322:	df 92       	push	r13
     324:	ef 92       	push	r14
     326:	ff 92       	push	r15
     328:	0f 93       	push	r16
     32a:	1f 93       	push	r17
     32c:	2f 93       	push	r18
     32e:	3f 93       	push	r19
     330:	4f 93       	push	r20
     332:	5f 93       	push	r21
     334:	6f 93       	push	r22
     336:	7f 93       	push	r23
     338:	8f 93       	push	r24
     33a:	9f 93       	push	r25
     33c:	af 93       	push	r26
     33e:	bf 93       	push	r27
     340:	ef 93       	push	r30
     342:	ff 93       	push	r31
	// get the time now
	g_Timer4_new_time = Get_millis();
     344:	0e 94 68 1f 	call	0x3ed0	; 0x3ed0 <Get_millis>
     348:	8b 01       	movw	r16, r22
     34a:	9c 01       	movw	r18, r24
     34c:	60 93 3f 0b 	sts	0x0B3F, r22	; 0x800b3f <g_Timer4_new_time>
     350:	70 93 40 0b 	sts	0x0B40, r23	; 0x800b40 <g_Timer4_new_time+0x1>
     354:	80 93 41 0b 	sts	0x0B41, r24	; 0x800b41 <g_Timer4_new_time+0x2>
     358:	90 93 42 0b 	sts	0x0B42, r25	; 0x800b42 <g_Timer4_new_time+0x3>
	// calculate the diff between now and last interrupt
	g_diff_time = g_Timer4_new_time - g_Timer4_old_time;
     35c:	40 91 4f 0b 	lds	r20, 0x0B4F	; 0x800b4f <g_Timer4_old_time>
     360:	50 91 50 0b 	lds	r21, 0x0B50	; 0x800b50 <g_Timer4_old_time+0x1>
     364:	60 91 51 0b 	lds	r22, 0x0B51	; 0x800b51 <g_Timer4_old_time+0x2>
     368:	70 91 52 0b 	lds	r23, 0x0B52	; 0x800b52 <g_Timer4_old_time+0x3>
     36c:	68 01       	movw	r12, r16
     36e:	79 01       	movw	r14, r18
     370:	c4 1a       	sub	r12, r20
     372:	d5 0a       	sbc	r13, r21
     374:	e6 0a       	sbc	r14, r22
     376:	f7 0a       	sbc	r15, r23
     378:	c7 01       	movw	r24, r14
     37a:	b6 01       	movw	r22, r12
     37c:	c0 92 3b 0b 	sts	0x0B3B, r12	; 0x800b3b <g_diff_time>
     380:	d0 92 3c 0b 	sts	0x0B3C, r13	; 0x800b3c <g_diff_time+0x1>
     384:	e0 92 3d 0b 	sts	0x0B3D, r14	; 0x800b3d <g_diff_time+0x2>
     388:	f0 92 3e 0b 	sts	0x0B3E, r15	; 0x800b3e <g_diff_time+0x3>
	// save the to the old time to next interrupt
	g_Timer4_old_time = g_Timer4_new_time;
     38c:	00 93 4f 0b 	sts	0x0B4F, r16	; 0x800b4f <g_Timer4_old_time>
     390:	10 93 50 0b 	sts	0x0B50, r17	; 0x800b50 <g_Timer4_old_time+0x1>
     394:	20 93 51 0b 	sts	0x0B51, r18	; 0x800b51 <g_Timer4_old_time+0x2>
     398:	30 93 52 0b 	sts	0x0B52, r19	; 0x800b52 <g_Timer4_old_time+0x3>
	//call back function on upper layer to get time
	g_timer4_config->isr_call_back(g_diff_time);
     39c:	e0 91 43 0b 	lds	r30, 0x0B43	; 0x800b43 <g_timer4_config>
     3a0:	f0 91 44 0b 	lds	r31, 0x0B44	; 0x800b44 <g_timer4_config+0x1>
     3a4:	02 80       	ldd	r0, Z+2	; 0x02
     3a6:	f3 81       	ldd	r31, Z+3	; 0x03
     3a8:	e0 2d       	mov	r30, r0
     3aa:	19 95       	eicall
}
     3ac:	ff 91       	pop	r31
     3ae:	ef 91       	pop	r30
     3b0:	bf 91       	pop	r27
     3b2:	af 91       	pop	r26
     3b4:	9f 91       	pop	r25
     3b6:	8f 91       	pop	r24
     3b8:	7f 91       	pop	r23
     3ba:	6f 91       	pop	r22
     3bc:	5f 91       	pop	r21
     3be:	4f 91       	pop	r20
     3c0:	3f 91       	pop	r19
     3c2:	2f 91       	pop	r18
     3c4:	1f 91       	pop	r17
     3c6:	0f 91       	pop	r16
     3c8:	ff 90       	pop	r15
     3ca:	ef 90       	pop	r14
     3cc:	df 90       	pop	r13
     3ce:	cf 90       	pop	r12
     3d0:	0f 90       	pop	r0
     3d2:	0b be       	out	0x3b, r0	; 59
     3d4:	0f 90       	pop	r0
     3d6:	0f be       	out	0x3f, r0	; 63
     3d8:	0f 90       	pop	r0
     3da:	1f 90       	pop	r1
     3dc:	18 95       	reti

000003de <__vector_47>:
// intruptted service routine when we have rech the number of  Ticks On Encoder
ISR(TIMER5_COMPA_vect)
{
     3de:	1f 92       	push	r1
     3e0:	0f 92       	push	r0
     3e2:	0f b6       	in	r0, 0x3f	; 63
     3e4:	0f 92       	push	r0
     3e6:	11 24       	eor	r1, r1
     3e8:	0b b6       	in	r0, 0x3b	; 59
     3ea:	0f 92       	push	r0
     3ec:	2f 93       	push	r18
     3ee:	3f 93       	push	r19
     3f0:	4f 93       	push	r20
     3f2:	5f 93       	push	r21
     3f4:	6f 93       	push	r22
     3f6:	7f 93       	push	r23
     3f8:	8f 93       	push	r24
     3fa:	9f 93       	push	r25
     3fc:	af 93       	push	r26
     3fe:	bf 93       	push	r27
     400:	ef 93       	push	r30
     402:	ff 93       	push	r31
	// calculate the diff between now and last interrupt
	g_diff_time = g_Timer5_new_time - g_Timer5_old_time;
	// save the to the old time to next interrupt
	g_Timer5_old_time = g_Timer5_new_time;*/
	// clear the counter
	UART0_putc('a');
     404:	81 e6       	ldi	r24, 0x61	; 97
     406:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <UART0_putc>
	TIMER5_COUNT_L = 0;
     40a:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <__TEXT_REGION_LENGTH__+0x700124>
	//call back function on upper layer to get time
	g_timer5_config->isr_call_back(g_diff_time);
     40e:	60 91 3b 0b 	lds	r22, 0x0B3B	; 0x800b3b <g_diff_time>
     412:	70 91 3c 0b 	lds	r23, 0x0B3C	; 0x800b3c <g_diff_time+0x1>
     416:	80 91 3d 0b 	lds	r24, 0x0B3D	; 0x800b3d <g_diff_time+0x2>
     41a:	90 91 3e 0b 	lds	r25, 0x0B3E	; 0x800b3e <g_diff_time+0x3>
     41e:	e0 91 57 0b 	lds	r30, 0x0B57	; 0x800b57 <g_timer5_config>
     422:	f0 91 58 0b 	lds	r31, 0x0B58	; 0x800b58 <g_timer5_config+0x1>
     426:	02 80       	ldd	r0, Z+2	; 0x02
     428:	f3 81       	ldd	r31, Z+3	; 0x03
     42a:	e0 2d       	mov	r30, r0
     42c:	19 95       	eicall
	
}
     42e:	ff 91       	pop	r31
     430:	ef 91       	pop	r30
     432:	bf 91       	pop	r27
     434:	af 91       	pop	r26
     436:	9f 91       	pop	r25
     438:	8f 91       	pop	r24
     43a:	7f 91       	pop	r23
     43c:	6f 91       	pop	r22
     43e:	5f 91       	pop	r21
     440:	4f 91       	pop	r20
     442:	3f 91       	pop	r19
     444:	2f 91       	pop	r18
     446:	0f 90       	pop	r0
     448:	0b be       	out	0x3b, r0	; 59
     44a:	0f 90       	pop	r0
     44c:	0f be       	out	0x3f, r0	; 63
     44e:	0f 90       	pop	r0
     450:	1f 90       	pop	r1
     452:	18 95       	reti

00000454 <LCD_pre_transmission>:

//
void Lcd_Write(uint16_t address, uint16_t value){
	Modbus_Set_transmit_buffer(LCD,0, value);
    Modbus_Write_multiple_registers(LCD,address, 0x01);
}
     454:	61 e0       	ldi	r22, 0x01	; 1
     456:	80 e0       	ldi	r24, 0x00	; 0
     458:	0c 94 9a 0b 	jmp	0x1734	; 0x1734 <Modbus_change_state>
     45c:	08 95       	ret

0000045e <LCD_post_transmission>:
     45e:	60 e0       	ldi	r22, 0x00	; 0
     460:	80 e0       	ldi	r24, 0x00	; 0
     462:	0c 94 9a 0b 	jmp	0x1734	; 0x1734 <Modbus_change_state>
     466:	08 95       	ret

00000468 <Lcd_init>:
     468:	e2 ea       	ldi	r30, 0xA2	; 162
     46a:	f2 e0       	ldi	r31, 0x02	; 2
     46c:	20 83       	st	Z, r18
     46e:	81 83       	std	Z+1, r24	; 0x01
     470:	42 83       	std	Z+2, r20	; 0x02
     472:	53 83       	std	Z+3, r21	; 0x03
     474:	64 83       	std	Z+4, r22	; 0x04
     476:	75 83       	std	Z+5, r23	; 0x05
     478:	8a e2       	ldi	r24, 0x2A	; 42
     47a:	92 e0       	ldi	r25, 0x02	; 2
     47c:	97 83       	std	Z+7, r25	; 0x07
     47e:	86 83       	std	Z+6, r24	; 0x06
     480:	8f e2       	ldi	r24, 0x2F	; 47
     482:	92 e0       	ldi	r25, 0x02	; 2
     484:	91 87       	std	Z+9, r25	; 0x09
     486:	80 87       	std	Z+8, r24	; 0x08
     488:	bf 01       	movw	r22, r30
     48a:	80 e0       	ldi	r24, 0x00	; 0
     48c:	d0 c6       	rjmp	.+3488   	; 0x122e <Modbus_init>
     48e:	08 95       	ret

00000490 <Lcd_Read_multiple_data>:
 *
 *                    LCD Multiple Data functions 
 * 
************************************************************************************************************/

uint16_t Lcd_Read_multiple_data(uint16_t address ,uint16_t *pData,uint8_t QTY){
     490:	ff 92       	push	r15
     492:	0f 93       	push	r16
     494:	1f 93       	push	r17
     496:	cf 93       	push	r28
     498:	df 93       	push	r29
     49a:	f6 2e       	mov	r15, r22
     49c:	c7 2f       	mov	r28, r23
     49e:	d4 2f       	mov	r29, r20
	int err = Modbus_Read_holding_registers(LCD,address,QTY);
     4a0:	50 e0       	ldi	r21, 0x00	; 0
     4a2:	bc 01       	movw	r22, r24
     4a4:	80 e0       	ldi	r24, 0x00	; 0
     4a6:	f5 d7       	rcall	.+4074   	; 0x1492 <Modbus_Read_holding_registers>
	if(err == 0){
     4a8:	81 11       	cpse	r24, r1
     4aa:	12 c0       	rjmp	.+36     	; 0x4d0 <Lcd_Read_multiple_data+0x40>
		for(uint8_t i=0; i<QTY;i++){
     4ac:	dd 23       	and	r29, r29
     4ae:	99 f0       	breq	.+38     	; 0x4d6 <Lcd_Read_multiple_data+0x46>
     4b0:	0f 2d       	mov	r16, r15
     4b2:	1c 2f       	mov	r17, r28
     4b4:	c0 e0       	ldi	r28, 0x00	; 0
			(*(pData+i)) = Modbus_Get_response_buffer(LCD,i);
     4b6:	6c 2f       	mov	r22, r28
     4b8:	80 e0       	ldi	r24, 0x00	; 0
     4ba:	a7 d7       	rcall	.+3918   	; 0x140a <Modbus_Get_response_buffer>
     4bc:	f8 01       	movw	r30, r16
     4be:	81 93       	st	Z+, r24
     4c0:	91 93       	st	Z+, r25
     4c2:	8f 01       	movw	r16, r30
************************************************************************************************************/

uint16_t Lcd_Read_multiple_data(uint16_t address ,uint16_t *pData,uint8_t QTY){
	int err = Modbus_Read_holding_registers(LCD,address,QTY);
	if(err == 0){
		for(uint8_t i=0; i<QTY;i++){
     4c4:	cf 5f       	subi	r28, 0xFF	; 255
     4c6:	dc 13       	cpse	r29, r28
     4c8:	f6 cf       	rjmp	.-20     	; 0x4b6 <Lcd_Read_multiple_data+0x26>
			(*(pData+i)) = Modbus_Get_response_buffer(LCD,i);
		}
		return LCD_OK;	
     4ca:	80 e0       	ldi	r24, 0x00	; 0
     4cc:	90 e0       	ldi	r25, 0x00	; 0
     4ce:	05 c0       	rjmp	.+10     	; 0x4da <Lcd_Read_multiple_data+0x4a>
	}
	else {
		return LCD_READ_ERROR;
     4d0:	89 e0       	ldi	r24, 0x09	; 9
     4d2:	90 e0       	ldi	r25, 0x00	; 0
     4d4:	02 c0       	rjmp	.+4      	; 0x4da <Lcd_Read_multiple_data+0x4a>
	int err = Modbus_Read_holding_registers(LCD,address,QTY);
	if(err == 0){
		for(uint8_t i=0; i<QTY;i++){
			(*(pData+i)) = Modbus_Get_response_buffer(LCD,i);
		}
		return LCD_OK;	
     4d6:	80 e0       	ldi	r24, 0x00	; 0
     4d8:	90 e0       	ldi	r25, 0x00	; 0
	}
	else {
		return LCD_READ_ERROR;
	}

}
     4da:	df 91       	pop	r29
     4dc:	cf 91       	pop	r28
     4de:	1f 91       	pop	r17
     4e0:	0f 91       	pop	r16
     4e2:	ff 90       	pop	r15
     4e4:	08 95       	ret

000004e6 <Lcd_Write_multiple_data>:

void Lcd_Write_multiple_data(uint16_t address ,uint16_t *pData,uint8_t QTY){
     4e6:	ef 92       	push	r14
     4e8:	ff 92       	push	r15
     4ea:	0f 93       	push	r16
     4ec:	1f 93       	push	r17
     4ee:	cf 93       	push	r28
     4f0:	df 93       	push	r29
     4f2:	7c 01       	movw	r14, r24
     4f4:	d4 2f       	mov	r29, r20
	for(uint8_t i=0;i<QTY;i++){
     4f6:	44 23       	and	r20, r20
     4f8:	69 f0       	breq	.+26     	; 0x514 <Lcd_Write_multiple_data+0x2e>
     4fa:	06 2f       	mov	r16, r22
     4fc:	17 2f       	mov	r17, r23
     4fe:	c0 e0       	ldi	r28, 0x00	; 0
		Modbus_Set_transmit_buffer(LCD,i, (*(pData+i)));
     500:	f8 01       	movw	r30, r16
     502:	41 91       	ld	r20, Z+
     504:	51 91       	ld	r21, Z+
     506:	8f 01       	movw	r16, r30
     508:	6c 2f       	mov	r22, r28
     50a:	80 e0       	ldi	r24, 0x00	; 0
     50c:	a1 d7       	rcall	.+3906   	; 0x1450 <Modbus_Set_transmit_buffer>
	}

}

void Lcd_Write_multiple_data(uint16_t address ,uint16_t *pData,uint8_t QTY){
	for(uint8_t i=0;i<QTY;i++){
     50e:	cf 5f       	subi	r28, 0xFF	; 255
     510:	dc 13       	cpse	r29, r28
     512:	f6 cf       	rjmp	.-20     	; 0x500 <Lcd_Write_multiple_data+0x1a>
		Modbus_Set_transmit_buffer(LCD,i, (*(pData+i)));
	}
	Modbus_Write_multiple_registers(LCD,address,QTY);
     514:	4d 2f       	mov	r20, r29
     516:	50 e0       	ldi	r21, 0x00	; 0
     518:	b7 01       	movw	r22, r14
     51a:	80 e0       	ldi	r24, 0x00	; 0
     51c:	d6 d7       	rcall	.+4012   	; 0x14ca <Modbus_Write_multiple_registers>
	
}
     51e:	df 91       	pop	r29
     520:	cf 91       	pop	r28
     522:	1f 91       	pop	r17
     524:	0f 91       	pop	r16
     526:	ff 90       	pop	r15
     528:	ef 90       	pop	r14
     52a:	08 95       	ret

0000052c <Modbus_mster_transaction>:
		g_mod1_write_address = u16WriteAddress;
		g_mod1_write_qty = u16BitQty;
		return Modbus_mster_transaction(device, OUR_WRITE_MULTIPLE_COILS);
	}
	return INVALID_DEVICE; //error
}
     52c:	8f 92       	push	r8
     52e:	9f 92       	push	r9
     530:	af 92       	push	r10
     532:	bf 92       	push	r11
     534:	df 92       	push	r13
     536:	ef 92       	push	r14
     538:	ff 92       	push	r15
     53a:	0f 93       	push	r16
     53c:	1f 93       	push	r17
     53e:	cf 93       	push	r28
     540:	df 93       	push	r29
     542:	cd b7       	in	r28, 0x3d	; 61
     544:	de b7       	in	r29, 0x3e	; 62
     546:	da 95       	dec	r29
     548:	0f b6       	in	r0, 0x3f	; 63
     54a:	f8 94       	cli
     54c:	de bf       	out	0x3e, r29	; 62
     54e:	0f be       	out	0x3f, r0	; 63
     550:	cd bf       	out	0x3d, r28	; 61
     552:	d6 2e       	mov	r13, r22
     554:	81 11       	cpse	r24, r1
     556:	00 c3       	rjmp	.+1536   	; 0xb58 <Modbus_mster_transaction+0x62c>
     558:	80 91 e2 04 	lds	r24, 0x04E2	; 0x8004e2 <g_mod0_slave>
     55c:	89 83       	std	Y+1, r24	; 0x01
     55e:	2f ef       	ldi	r18, 0xFF	; 255
     560:	62 13       	cpse	r22, r18
     562:	06 c0       	rjmp	.+12     	; 0x570 <Modbus_mster_transaction+0x44>
     564:	8f e0       	ldi	r24, 0x0F	; 15
     566:	8a 83       	std	Y+2, r24	; 0x02
     568:	68 94       	set
     56a:	bb 24       	eor	r11, r11
     56c:	b1 f8       	bld	r11, 1
     56e:	32 c0       	rjmp	.+100    	; 0x5d4 <Modbus_mster_transaction+0xa8>
     570:	6a 83       	std	Y+2, r22	; 0x02
     572:	81 e0       	ldi	r24, 0x01	; 1
     574:	68 17       	cp	r22, r24
     576:	b8 f0       	brcs	.+46     	; 0x5a6 <Modbus_mster_transaction+0x7a>
     578:	94 e0       	ldi	r25, 0x04	; 4
     57a:	96 17       	cp	r25, r22
     57c:	18 f4       	brcc	.+6      	; 0x584 <Modbus_mster_transaction+0x58>
     57e:	a7 e1       	ldi	r26, 0x17	; 23
     580:	6a 13       	cpse	r22, r26
     582:	11 c0       	rjmp	.+34     	; 0x5a6 <Modbus_mster_transaction+0x7a>
     584:	80 91 e0 04 	lds	r24, 0x04E0	; 0x8004e0 <g_mod0_read_address>
     588:	90 91 e1 04 	lds	r25, 0x04E1	; 0x8004e1 <g_mod0_read_address+0x1>
     58c:	9b 83       	std	Y+3, r25	; 0x03
     58e:	8c 83       	std	Y+4, r24	; 0x04
     590:	80 91 de 04 	lds	r24, 0x04DE	; 0x8004de <g_mod0_read_qty>
     594:	90 91 df 04 	lds	r25, 0x04DF	; 0x8004df <g_mod0_read_qty+0x1>
     598:	9d 83       	std	Y+5, r25	; 0x05
     59a:	8e 83       	std	Y+6, r24	; 0x06
     59c:	0f 2e       	mov	r0, r31
     59e:	f6 e0       	ldi	r31, 0x06	; 6
     5a0:	bf 2e       	mov	r11, r31
     5a2:	f0 2d       	mov	r31, r0
     5a4:	03 c0       	rjmp	.+6      	; 0x5ac <Modbus_mster_transaction+0x80>
     5a6:	68 94       	set
     5a8:	bb 24       	eor	r11, r11
     5aa:	b1 f8       	bld	r11, 1
     5ac:	b0 e1       	ldi	r27, 0x10	; 16
     5ae:	bd 15       	cp	r27, r13
     5b0:	40 f0       	brcs	.+16     	; 0x5c2 <Modbus_mster_transaction+0x96>
     5b2:	ef e0       	ldi	r30, 0x0F	; 15
     5b4:	de 16       	cp	r13, r30
     5b6:	70 f4       	brcc	.+28     	; 0x5d4 <Modbus_mster_transaction+0xa8>
     5b8:	8b ef       	ldi	r24, 0xFB	; 251
     5ba:	8d 0d       	add	r24, r13
     5bc:	82 30       	cpi	r24, 0x02	; 2
     5be:	00 f5       	brcc	.+64     	; 0x600 <Modbus_mster_transaction+0xd4>
     5c0:	09 c0       	rjmp	.+18     	; 0x5d4 <Modbus_mster_transaction+0xa8>
     5c2:	f6 e1       	ldi	r31, 0x16	; 22
     5c4:	df 16       	cp	r13, r31
     5c6:	e0 f0       	brcs	.+56     	; 0x600 <Modbus_mster_transaction+0xd4>
     5c8:	27 e1       	ldi	r18, 0x17	; 23
     5ca:	2d 15       	cp	r18, r13
     5cc:	18 f4       	brcc	.+6      	; 0x5d4 <Modbus_mster_transaction+0xa8>
     5ce:	8f ef       	ldi	r24, 0xFF	; 255
     5d0:	d8 12       	cpse	r13, r24
     5d2:	16 c0       	rjmp	.+44     	; 0x600 <Modbus_mster_transaction+0xd4>
     5d4:	90 91 5c 04 	lds	r25, 0x045C	; 0x80045c <g_mod0_write_address>
     5d8:	80 91 5d 04 	lds	r24, 0x045D	; 0x80045d <g_mod0_write_address+0x1>
     5dc:	e1 e0       	ldi	r30, 0x01	; 1
     5de:	f0 e0       	ldi	r31, 0x00	; 0
     5e0:	ec 0f       	add	r30, r28
     5e2:	fd 1f       	adc	r31, r29
     5e4:	eb 0d       	add	r30, r11
     5e6:	f1 1d       	adc	r31, r1
     5e8:	80 83       	st	Z, r24
     5ea:	81 e0       	ldi	r24, 0x01	; 1
     5ec:	8b 0d       	add	r24, r11
     5ee:	e1 e0       	ldi	r30, 0x01	; 1
     5f0:	f0 e0       	ldi	r31, 0x00	; 0
     5f2:	ec 0f       	add	r30, r28
     5f4:	fd 1f       	adc	r31, r29
     5f6:	e8 0f       	add	r30, r24
     5f8:	f1 1d       	adc	r31, r1
     5fa:	b3 94       	inc	r11
     5fc:	b3 94       	inc	r11
     5fe:	90 83       	st	Z, r25
     600:	90 e1       	ldi	r25, 0x10	; 16
     602:	d9 16       	cp	r13, r25
     604:	09 f4       	brne	.+2      	; 0x608 <Modbus_mster_transaction+0xdc>
     606:	ad c0       	rjmp	.+346    	; 0x762 <Modbus_mster_transaction+0x236>
     608:	9d 15       	cp	r25, r13
     60a:	58 f0       	brcs	.+22     	; 0x622 <Modbus_mster_transaction+0xf6>
     60c:	a6 e0       	ldi	r26, 0x06	; 6
     60e:	da 16       	cp	r13, r26
     610:	61 f1       	breq	.+88     	; 0x66a <Modbus_mster_transaction+0x13e>
     612:	bf e0       	ldi	r27, 0x0F	; 15
     614:	db 16       	cp	r13, r27
     616:	09 f4       	brne	.+2      	; 0x61a <Modbus_mster_transaction+0xee>
     618:	41 c0       	rjmp	.+130    	; 0x69c <Modbus_mster_transaction+0x170>
     61a:	e5 e0       	ldi	r30, 0x05	; 5
     61c:	de 12       	cpse	r13, r30
     61e:	1a c1       	rjmp	.+564    	; 0x854 <Modbus_mster_transaction+0x328>
     620:	0d c0       	rjmp	.+26     	; 0x63c <Modbus_mster_transaction+0x110>
     622:	f7 e1       	ldi	r31, 0x17	; 23
     624:	df 16       	cp	r13, r31
     626:	09 f4       	brne	.+2      	; 0x62a <Modbus_mster_transaction+0xfe>
     628:	9c c0       	rjmp	.+312    	; 0x762 <Modbus_mster_transaction+0x236>
     62a:	2f ef       	ldi	r18, 0xFF	; 255
     62c:	d2 16       	cp	r13, r18
     62e:	09 f4       	brne	.+2      	; 0x632 <Modbus_mster_transaction+0x106>
     630:	98 c0       	rjmp	.+304    	; 0x762 <Modbus_mster_transaction+0x236>
     632:	86 e1       	ldi	r24, 0x16	; 22
     634:	d8 16       	cp	r13, r24
     636:	09 f4       	brne	.+2      	; 0x63a <Modbus_mster_transaction+0x10e>
     638:	df c0       	rjmp	.+446    	; 0x7f8 <Modbus_mster_transaction+0x2cc>
     63a:	0c c1       	rjmp	.+536    	; 0x854 <Modbus_mster_transaction+0x328>
     63c:	90 91 5a 04 	lds	r25, 0x045A	; 0x80045a <g_mod0_write_qty>
     640:	80 91 5b 04 	lds	r24, 0x045B	; 0x80045b <g_mod0_write_qty+0x1>
     644:	e1 e0       	ldi	r30, 0x01	; 1
     646:	f0 e0       	ldi	r31, 0x00	; 0
     648:	ec 0f       	add	r30, r28
     64a:	fd 1f       	adc	r31, r29
     64c:	eb 0d       	add	r30, r11
     64e:	f1 1d       	adc	r31, r1
     650:	80 83       	st	Z, r24
     652:	81 e0       	ldi	r24, 0x01	; 1
     654:	8b 0d       	add	r24, r11
     656:	e1 e0       	ldi	r30, 0x01	; 1
     658:	f0 e0       	ldi	r31, 0x00	; 0
     65a:	ec 0f       	add	r30, r28
     65c:	fd 1f       	adc	r31, r29
     65e:	e8 0f       	add	r30, r24
     660:	f1 1d       	adc	r31, r1
     662:	b3 94       	inc	r11
     664:	b3 94       	inc	r11
     666:	90 83       	st	Z, r25
     668:	f5 c0       	rjmp	.+490    	; 0x854 <Modbus_mster_transaction+0x328>
     66a:	ea ed       	ldi	r30, 0xDA	; 218
     66c:	f3 e0       	ldi	r31, 0x03	; 3
     66e:	80 81       	ld	r24, Z
     670:	91 81       	ldd	r25, Z+1	; 0x01
     672:	a1 e0       	ldi	r26, 0x01	; 1
     674:	b0 e0       	ldi	r27, 0x00	; 0
     676:	ac 0f       	add	r26, r28
     678:	bd 1f       	adc	r27, r29
     67a:	ab 0d       	add	r26, r11
     67c:	b1 1d       	adc	r27, r1
     67e:	9c 93       	st	X, r25
     680:	20 81       	ld	r18, Z
     682:	31 81       	ldd	r19, Z+1	; 0x01
     684:	81 e0       	ldi	r24, 0x01	; 1
     686:	8b 0d       	add	r24, r11
     688:	e1 e0       	ldi	r30, 0x01	; 1
     68a:	f0 e0       	ldi	r31, 0x00	; 0
     68c:	ec 0f       	add	r30, r28
     68e:	fd 1f       	adc	r31, r29
     690:	e8 0f       	add	r30, r24
     692:	f1 1d       	adc	r31, r1
     694:	b3 94       	inc	r11
     696:	b3 94       	inc	r11
     698:	20 83       	st	Z, r18
     69a:	dc c0       	rjmp	.+440    	; 0x854 <Modbus_mster_transaction+0x328>
     69c:	80 91 5a 04 	lds	r24, 0x045A	; 0x80045a <g_mod0_write_qty>
     6a0:	90 91 5b 04 	lds	r25, 0x045B	; 0x80045b <g_mod0_write_qty+0x1>
     6a4:	e1 e0       	ldi	r30, 0x01	; 1
     6a6:	f0 e0       	ldi	r31, 0x00	; 0
     6a8:	ec 0f       	add	r30, r28
     6aa:	fd 1f       	adc	r31, r29
     6ac:	eb 0d       	add	r30, r11
     6ae:	f1 1d       	adc	r31, r1
     6b0:	90 83       	st	Z, r25
     6b2:	32 e0       	ldi	r19, 0x02	; 2
     6b4:	3b 0d       	add	r19, r11
     6b6:	21 e0       	ldi	r18, 0x01	; 1
     6b8:	2b 0d       	add	r18, r11
     6ba:	e1 e0       	ldi	r30, 0x01	; 1
     6bc:	f0 e0       	ldi	r31, 0x00	; 0
     6be:	ec 0f       	add	r30, r28
     6c0:	fd 1f       	adc	r31, r29
     6c2:	e2 0f       	add	r30, r18
     6c4:	f1 1d       	adc	r31, r1
     6c6:	80 83       	st	Z, r24
     6c8:	ac 01       	movw	r20, r24
     6ca:	47 70       	andi	r20, 0x07	; 7
     6cc:	55 27       	eor	r21, r21
     6ce:	45 2b       	or	r20, r21
     6d0:	49 f0       	breq	.+18     	; 0x6e4 <Modbus_mster_transaction+0x1b8>
     6d2:	96 95       	lsr	r25
     6d4:	87 95       	ror	r24
     6d6:	96 95       	lsr	r25
     6d8:	87 95       	ror	r24
     6da:	96 95       	lsr	r25
     6dc:	87 95       	ror	r24
     6de:	21 e0       	ldi	r18, 0x01	; 1
     6e0:	28 0f       	add	r18, r24
     6e2:	07 c0       	rjmp	.+14     	; 0x6f2 <Modbus_mster_transaction+0x1c6>
     6e4:	96 95       	lsr	r25
     6e6:	87 95       	ror	r24
     6e8:	96 95       	lsr	r25
     6ea:	87 95       	ror	r24
     6ec:	96 95       	lsr	r25
     6ee:	87 95       	ror	r24
     6f0:	28 2f       	mov	r18, r24
     6f2:	93 e0       	ldi	r25, 0x03	; 3
     6f4:	b9 0e       	add	r11, r25
     6f6:	fe 01       	movw	r30, r28
     6f8:	e3 0f       	add	r30, r19
     6fa:	f1 1d       	adc	r31, r1
     6fc:	21 83       	std	Z+1, r18	; 0x01
     6fe:	22 23       	and	r18, r18
     700:	09 f4       	brne	.+2      	; 0x704 <Modbus_mster_transaction+0x1d8>
     702:	a8 c0       	rjmp	.+336    	; 0x854 <Modbus_mster_transaction+0x328>
     704:	80 e0       	ldi	r24, 0x00	; 0
     706:	98 2f       	mov	r25, r24
     708:	91 70       	andi	r25, 0x01	; 1
     70a:	80 ff       	sbrs	r24, 0
     70c:	03 c0       	rjmp	.+6      	; 0x714 <Modbus_mster_transaction+0x1e8>
     70e:	91 30       	cpi	r25, 0x01	; 1
     710:	99 f0       	breq	.+38     	; 0x738 <Modbus_mster_transaction+0x20c>
     712:	23 c0       	rjmp	.+70     	; 0x75a <Modbus_mster_transaction+0x22e>
     714:	e8 2f       	mov	r30, r24
     716:	e6 95       	lsr	r30
     718:	f0 e0       	ldi	r31, 0x00	; 0
     71a:	ee 0f       	add	r30, r30
     71c:	ff 1f       	adc	r31, r31
     71e:	e6 52       	subi	r30, 0x26	; 38
     720:	fc 4f       	sbci	r31, 0xFC	; 252
     722:	40 81       	ld	r20, Z
     724:	51 81       	ldd	r21, Z+1	; 0x01
     726:	e1 e0       	ldi	r30, 0x01	; 1
     728:	f0 e0       	ldi	r31, 0x00	; 0
     72a:	ec 0f       	add	r30, r28
     72c:	fd 1f       	adc	r31, r29
     72e:	eb 0d       	add	r30, r11
     730:	f1 1d       	adc	r31, r1
     732:	40 83       	st	Z, r20
     734:	b3 94       	inc	r11
     736:	11 c0       	rjmp	.+34     	; 0x75a <Modbus_mster_transaction+0x22e>
     738:	e8 2f       	mov	r30, r24
     73a:	e6 95       	lsr	r30
     73c:	f0 e0       	ldi	r31, 0x00	; 0
     73e:	ee 0f       	add	r30, r30
     740:	ff 1f       	adc	r31, r31
     742:	e6 52       	subi	r30, 0x26	; 38
     744:	fc 4f       	sbci	r31, 0xFC	; 252
     746:	40 81       	ld	r20, Z
     748:	51 81       	ldd	r21, Z+1	; 0x01
     74a:	e1 e0       	ldi	r30, 0x01	; 1
     74c:	f0 e0       	ldi	r31, 0x00	; 0
     74e:	ec 0f       	add	r30, r28
     750:	fd 1f       	adc	r31, r29
     752:	eb 0d       	add	r30, r11
     754:	f1 1d       	adc	r31, r1
     756:	50 83       	st	Z, r21
     758:	b3 94       	inc	r11
     75a:	8f 5f       	subi	r24, 0xFF	; 255
     75c:	28 13       	cpse	r18, r24
     75e:	d3 cf       	rjmp	.-90     	; 0x706 <Modbus_mster_transaction+0x1da>
     760:	79 c0       	rjmp	.+242    	; 0x854 <Modbus_mster_transaction+0x328>
     762:	60 91 5a 04 	lds	r22, 0x045A	; 0x80045a <g_mod0_write_qty>
     766:	70 91 5b 04 	lds	r23, 0x045B	; 0x80045b <g_mod0_write_qty+0x1>
     76a:	e1 e0       	ldi	r30, 0x01	; 1
     76c:	f0 e0       	ldi	r31, 0x00	; 0
     76e:	ec 0f       	add	r30, r28
     770:	fd 1f       	adc	r31, r29
     772:	eb 0d       	add	r30, r11
     774:	f1 1d       	adc	r31, r1
     776:	70 83       	st	Z, r23
     778:	81 e0       	ldi	r24, 0x01	; 1
     77a:	8b 0d       	add	r24, r11
     77c:	e1 e0       	ldi	r30, 0x01	; 1
     77e:	f0 e0       	ldi	r31, 0x00	; 0
     780:	ec 0f       	add	r30, r28
     782:	fd 1f       	adc	r31, r29
     784:	e8 0f       	add	r30, r24
     786:	f1 1d       	adc	r31, r1
     788:	60 83       	st	Z, r22
     78a:	82 e0       	ldi	r24, 0x02	; 2
     78c:	8b 0d       	add	r24, r11
     78e:	e1 e0       	ldi	r30, 0x01	; 1
     790:	f0 e0       	ldi	r31, 0x00	; 0
     792:	ec 0f       	add	r30, r28
     794:	fd 1f       	adc	r31, r29
     796:	e8 0f       	add	r30, r24
     798:	f1 1d       	adc	r31, r1
     79a:	a3 e0       	ldi	r26, 0x03	; 3
     79c:	ba 0e       	add	r11, r26
     79e:	86 2f       	mov	r24, r22
     7a0:	88 0f       	add	r24, r24
     7a2:	80 83       	st	Z, r24
     7a4:	77 27       	eor	r23, r23
     7a6:	16 16       	cp	r1, r22
     7a8:	17 06       	cpc	r1, r23
     7aa:	0c f0       	brlt	.+2      	; 0x7ae <Modbus_mster_transaction+0x282>
     7ac:	53 c0       	rjmp	.+166    	; 0x854 <Modbus_mster_transaction+0x328>
     7ae:	80 e0       	ldi	r24, 0x00	; 0
     7b0:	90 e0       	ldi	r25, 0x00	; 0
     7b2:	20 e0       	ldi	r18, 0x00	; 0
     7b4:	88 0f       	add	r24, r24
     7b6:	99 1f       	adc	r25, r25
     7b8:	fc 01       	movw	r30, r24
     7ba:	e6 52       	subi	r30, 0x26	; 38
     7bc:	fc 4f       	sbci	r31, 0xFC	; 252
     7be:	80 81       	ld	r24, Z
     7c0:	91 81       	ldd	r25, Z+1	; 0x01
     7c2:	a1 e0       	ldi	r26, 0x01	; 1
     7c4:	b0 e0       	ldi	r27, 0x00	; 0
     7c6:	ac 0f       	add	r26, r28
     7c8:	bd 1f       	adc	r27, r29
     7ca:	ab 0d       	add	r26, r11
     7cc:	b1 1d       	adc	r27, r1
     7ce:	9c 93       	st	X, r25
     7d0:	40 81       	ld	r20, Z
     7d2:	51 81       	ldd	r21, Z+1	; 0x01
     7d4:	81 e0       	ldi	r24, 0x01	; 1
     7d6:	8b 0d       	add	r24, r11
     7d8:	e1 e0       	ldi	r30, 0x01	; 1
     7da:	f0 e0       	ldi	r31, 0x00	; 0
     7dc:	ec 0f       	add	r30, r28
     7de:	fd 1f       	adc	r31, r29
     7e0:	e8 0f       	add	r30, r24
     7e2:	f1 1d       	adc	r31, r1
     7e4:	b3 94       	inc	r11
     7e6:	b3 94       	inc	r11
     7e8:	40 83       	st	Z, r20
     7ea:	2f 5f       	subi	r18, 0xFF	; 255
     7ec:	82 2f       	mov	r24, r18
     7ee:	90 e0       	ldi	r25, 0x00	; 0
     7f0:	86 17       	cp	r24, r22
     7f2:	97 07       	cpc	r25, r23
     7f4:	fc f2       	brlt	.-66     	; 0x7b4 <Modbus_mster_transaction+0x288>
     7f6:	2e c0       	rjmp	.+92     	; 0x854 <Modbus_mster_transaction+0x328>
     7f8:	ea ed       	ldi	r30, 0xDA	; 218
     7fa:	f3 e0       	ldi	r31, 0x03	; 3
     7fc:	80 81       	ld	r24, Z
     7fe:	91 81       	ldd	r25, Z+1	; 0x01
     800:	a1 e0       	ldi	r26, 0x01	; 1
     802:	b0 e0       	ldi	r27, 0x00	; 0
     804:	ac 0f       	add	r26, r28
     806:	bd 1f       	adc	r27, r29
     808:	ab 0d       	add	r26, r11
     80a:	b1 1d       	adc	r27, r1
     80c:	9c 93       	st	X, r25
     80e:	80 81       	ld	r24, Z
     810:	91 81       	ldd	r25, Z+1	; 0x01
     812:	91 e0       	ldi	r25, 0x01	; 1
     814:	9b 0d       	add	r25, r11
     816:	a1 e0       	ldi	r26, 0x01	; 1
     818:	b0 e0       	ldi	r27, 0x00	; 0
     81a:	ac 0f       	add	r26, r28
     81c:	bd 1f       	adc	r27, r29
     81e:	a9 0f       	add	r26, r25
     820:	b1 1d       	adc	r27, r1
     822:	8c 93       	st	X, r24
     824:	82 81       	ldd	r24, Z+2	; 0x02
     826:	93 81       	ldd	r25, Z+3	; 0x03
     828:	82 e0       	ldi	r24, 0x02	; 2
     82a:	8b 0d       	add	r24, r11
     82c:	a1 e0       	ldi	r26, 0x01	; 1
     82e:	b0 e0       	ldi	r27, 0x00	; 0
     830:	ac 0f       	add	r26, r28
     832:	bd 1f       	adc	r27, r29
     834:	a8 0f       	add	r26, r24
     836:	b1 1d       	adc	r27, r1
     838:	9c 93       	st	X, r25
     83a:	22 81       	ldd	r18, Z+2	; 0x02
     83c:	33 81       	ldd	r19, Z+3	; 0x03
     83e:	83 e0       	ldi	r24, 0x03	; 3
     840:	8b 0d       	add	r24, r11
     842:	e1 e0       	ldi	r30, 0x01	; 1
     844:	f0 e0       	ldi	r31, 0x00	; 0
     846:	ec 0f       	add	r30, r28
     848:	fd 1f       	adc	r31, r29
     84a:	e8 0f       	add	r30, r24
     84c:	f1 1d       	adc	r31, r1
     84e:	b4 e0       	ldi	r27, 0x04	; 4
     850:	bb 0e       	add	r11, r27
     852:	20 83       	st	Z, r18
     854:	bb 20       	and	r11, r11
     856:	b9 f0       	breq	.+46     	; 0x886 <Modbus_mster_transaction+0x35a>
     858:	8e 01       	movw	r16, r28
     85a:	0f 5f       	subi	r16, 0xFF	; 255
     85c:	1f 4f       	sbci	r17, 0xFF	; 255
     85e:	ee 24       	eor	r14, r14
     860:	ea 94       	dec	r14
     862:	eb 0c       	add	r14, r11
     864:	f1 2c       	mov	r15, r1
     866:	ef ef       	ldi	r30, 0xFF	; 255
     868:	ee 1a       	sub	r14, r30
     86a:	fe 0a       	sbc	r15, r30
     86c:	e0 0e       	add	r14, r16
     86e:	f1 1e       	adc	r15, r17
     870:	8f ef       	ldi	r24, 0xFF	; 255
     872:	9f ef       	ldi	r25, 0xFF	; 255
     874:	d8 01       	movw	r26, r16
     876:	6d 91       	ld	r22, X+
     878:	8d 01       	movw	r16, r26
     87a:	0e 94 47 1f 	call	0x3e8e	; 0x3e8e <crc16_update>
     87e:	0e 15       	cp	r16, r14
     880:	1f 05       	cpc	r17, r15
     882:	c1 f7       	brne	.-16     	; 0x874 <Modbus_mster_transaction+0x348>
     884:	02 c0       	rjmp	.+4      	; 0x88a <Modbus_mster_transaction+0x35e>
     886:	8f ef       	ldi	r24, 0xFF	; 255
     888:	9f ef       	ldi	r25, 0xFF	; 255
     88a:	ee 24       	eor	r14, r14
     88c:	e3 94       	inc	r14
     88e:	eb 0c       	add	r14, r11
     890:	e1 e0       	ldi	r30, 0x01	; 1
     892:	f0 e0       	ldi	r31, 0x00	; 0
     894:	ec 0f       	add	r30, r28
     896:	fd 1f       	adc	r31, r29
     898:	eb 0d       	add	r30, r11
     89a:	f1 1d       	adc	r31, r1
     89c:	80 83       	st	Z, r24
     89e:	b3 94       	inc	r11
     8a0:	b3 94       	inc	r11
     8a2:	e1 e0       	ldi	r30, 0x01	; 1
     8a4:	f0 e0       	ldi	r31, 0x00	; 0
     8a6:	ec 0f       	add	r30, r28
     8a8:	fd 1f       	adc	r31, r29
     8aa:	ee 0d       	add	r30, r14
     8ac:	f1 1d       	adc	r31, r1
     8ae:	90 83       	st	Z, r25
     8b0:	e1 e0       	ldi	r30, 0x01	; 1
     8b2:	f0 e0       	ldi	r31, 0x00	; 0
     8b4:	ec 0f       	add	r30, r28
     8b6:	fd 1f       	adc	r31, r29
     8b8:	eb 0d       	add	r30, r11
     8ba:	f1 1d       	adc	r31, r1
     8bc:	10 82       	st	Z, r1
     8be:	e0 91 cd 03 	lds	r30, 0x03CD	; 0x8003cd <g_mod0_Serial_getc>
     8c2:	f0 91 ce 03 	lds	r31, 0x03CE	; 0x8003ce <g_mod0_Serial_getc+0x1>
     8c6:	19 95       	eicall
     8c8:	81 15       	cp	r24, r1
     8ca:	91 40       	sbci	r25, 0x01	; 1
     8cc:	c1 f7       	brne	.-16     	; 0x8be <Modbus_mster_transaction+0x392>
     8ce:	e0 91 d3 03 	lds	r30, 0x03D3	; 0x8003d3 <g_mod0_pre_transmission>
     8d2:	f0 91 d4 03 	lds	r31, 0x03D4	; 0x8003d4 <g_mod0_pre_transmission+0x1>
     8d6:	30 97       	sbiw	r30, 0x00	; 0
     8d8:	09 f0       	breq	.+2      	; 0x8dc <Modbus_mster_transaction+0x3b0>
     8da:	19 95       	eicall
     8dc:	bb 20       	and	r11, r11
     8de:	a1 f0       	breq	.+40     	; 0x908 <Modbus_mster_transaction+0x3dc>
     8e0:	8e 01       	movw	r16, r28
     8e2:	0f 5f       	subi	r16, 0xFF	; 255
     8e4:	1f 4f       	sbci	r17, 0xFF	; 255
     8e6:	f1 2c       	mov	r15, r1
     8e8:	ef ef       	ldi	r30, 0xFF	; 255
     8ea:	ee 1a       	sub	r14, r30
     8ec:	fe 0a       	sbc	r15, r30
     8ee:	e0 0e       	add	r14, r16
     8f0:	f1 1e       	adc	r15, r17
     8f2:	e0 91 cf 03 	lds	r30, 0x03CF	; 0x8003cf <g_mod0_Serial_putc>
     8f6:	f0 91 d0 03 	lds	r31, 0x03D0	; 0x8003d0 <g_mod0_Serial_putc+0x1>
     8fa:	d8 01       	movw	r26, r16
     8fc:	8d 91       	ld	r24, X+
     8fe:	8d 01       	movw	r16, r26
     900:	19 95       	eicall
     902:	0e 15       	cp	r16, r14
     904:	1f 05       	cpc	r17, r15
     906:	a9 f7       	brne	.-22     	; 0x8f2 <Modbus_mster_transaction+0x3c6>
     908:	e0 91 cb 03 	lds	r30, 0x03CB	; 0x8003cb <g_mod0_Serial_flush>
     90c:	f0 91 cc 03 	lds	r31, 0x03CC	; 0x8003cc <g_mod0_Serial_flush+0x1>
     910:	19 95       	eicall
     912:	ef e8       	ldi	r30, 0x8F	; 143
     914:	f1 e0       	ldi	r31, 0x01	; 1
     916:	31 97       	sbiw	r30, 0x01	; 1
     918:	f1 f7       	brne	.-4      	; 0x916 <Modbus_mster_transaction+0x3ea>
     91a:	00 c0       	rjmp	.+0      	; 0x91c <Modbus_mster_transaction+0x3f0>
     91c:	00 00       	nop
     91e:	e0 91 d1 03 	lds	r30, 0x03D1	; 0x8003d1 <g_mod0_post_transmission>
     922:	f0 91 d2 03 	lds	r31, 0x03D2	; 0x8003d2 <g_mod0_post_transmission+0x1>
     926:	30 97       	sbiw	r30, 0x00	; 0
     928:	09 f0       	breq	.+2      	; 0x92c <Modbus_mster_transaction+0x400>
     92a:	19 95       	eicall
     92c:	ff ef       	ldi	r31, 0xFF	; 255
     92e:	23 ed       	ldi	r18, 0xD3	; 211
     930:	80 e3       	ldi	r24, 0x30	; 48
     932:	f1 50       	subi	r31, 0x01	; 1
     934:	20 40       	sbci	r18, 0x00	; 0
     936:	80 40       	sbci	r24, 0x00	; 0
     938:	e1 f7       	brne	.-8      	; 0x932 <Modbus_mster_transaction+0x406>
     93a:	00 c0       	rjmp	.+0      	; 0x93c <Modbus_mster_transaction+0x410>
     93c:	00 00       	nop
     93e:	0e 94 68 1f 	call	0x3ed0	; 0x3ed0 <Get_millis>
     942:	4b 01       	movw	r8, r22
     944:	5c 01       	movw	r10, r24
     946:	08 e0       	ldi	r16, 0x08	; 8
     948:	10 e0       	ldi	r17, 0x00	; 0
     94a:	ed 2c       	mov	r14, r13
     94c:	f1 2c       	mov	r15, r1
     94e:	e0 91 c9 03 	lds	r30, 0x03C9	; 0x8003c9 <g_mod0_Serial_available>
     952:	f0 91 ca 03 	lds	r31, 0x03CA	; 0x8003ca <g_mod0_Serial_available+0x1>
     956:	19 95       	eicall
     958:	89 2b       	or	r24, r25
     95a:	91 f0       	breq	.+36     	; 0x980 <Modbus_mster_transaction+0x454>
     95c:	dd 24       	eor	r13, r13
     95e:	d3 94       	inc	r13
     960:	d1 0e       	add	r13, r17
     962:	e0 91 cd 03 	lds	r30, 0x03CD	; 0x8003cd <g_mod0_Serial_getc>
     966:	f0 91 ce 03 	lds	r31, 0x03CE	; 0x8003ce <g_mod0_Serial_getc+0x1>
     96a:	19 95       	eicall
     96c:	e1 e0       	ldi	r30, 0x01	; 1
     96e:	f0 e0       	ldi	r31, 0x00	; 0
     970:	ec 0f       	add	r30, r28
     972:	fd 1f       	adc	r31, r29
     974:	e1 0f       	add	r30, r17
     976:	f1 1d       	adc	r31, r1
     978:	80 83       	st	Z, r24
     97a:	01 50       	subi	r16, 0x01	; 1
     97c:	1d 2d       	mov	r17, r13
     97e:	07 c0       	rjmp	.+14     	; 0x98e <Modbus_mster_transaction+0x462>
     980:	e0 91 d5 03 	lds	r30, 0x03D5	; 0x8003d5 <g_mod0_idle>
     984:	f0 91 d6 03 	lds	r31, 0x03D6	; 0x8003d6 <g_mod0_idle+0x1>
     988:	30 97       	sbiw	r30, 0x00	; 0
     98a:	09 f0       	breq	.+2      	; 0x98e <Modbus_mster_transaction+0x462>
     98c:	19 95       	eicall
     98e:	15 30       	cpi	r17, 0x05	; 5
     990:	59 f5       	brne	.+86     	; 0x9e8 <Modbus_mster_transaction+0x4bc>
     992:	99 81       	ldd	r25, Y+1	; 0x01
     994:	80 91 e2 04 	lds	r24, 0x04E2	; 0x8004e2 <g_mod0_slave>
     998:	98 13       	cpse	r25, r24
     99a:	2b c4       	rjmp	.+2134   	; 0x11f2 <Modbus_mster_transaction+0xcc6>
     99c:	8a 81       	ldd	r24, Y+2	; 0x02
     99e:	28 2f       	mov	r18, r24
     9a0:	2f 77       	andi	r18, 0x7F	; 127
     9a2:	30 e0       	ldi	r19, 0x00	; 0
     9a4:	2e 15       	cp	r18, r14
     9a6:	3f 05       	cpc	r19, r15
     9a8:	09 f0       	breq	.+2      	; 0x9ac <Modbus_mster_transaction+0x480>
     9aa:	25 c4       	rjmp	.+2122   	; 0x11f6 <Modbus_mster_transaction+0xcca>
     9ac:	88 23       	and	r24, r24
     9ae:	2c f4       	brge	.+10     	; 0x9ba <Modbus_mster_transaction+0x48e>
     9b0:	8b 81       	ldd	r24, Y+3	; 0x03
     9b2:	88 23       	and	r24, r24
     9b4:	09 f4       	brne	.+2      	; 0x9b8 <Modbus_mster_transaction+0x48c>
     9b6:	3d c0       	rjmp	.+122    	; 0xa32 <Modbus_mster_transaction+0x506>
     9b8:	ca c0       	rjmp	.+404    	; 0xb4e <Modbus_mster_transaction+0x622>
     9ba:	81 31       	cpi	r24, 0x11	; 17
     9bc:	58 f4       	brcc	.+22     	; 0x9d4 <Modbus_mster_transaction+0x4a8>
     9be:	8f 30       	cpi	r24, 0x0F	; 15
     9c0:	08 f0       	brcs	.+2      	; 0x9c4 <Modbus_mster_transaction+0x498>
     9c2:	b5 c3       	rjmp	.+1898   	; 0x112e <Modbus_mster_transaction+0xc02>
     9c4:	81 30       	cpi	r24, 0x01	; 1
     9c6:	80 f0       	brcs	.+32     	; 0x9e8 <Modbus_mster_transaction+0x4bc>
     9c8:	85 30       	cpi	r24, 0x05	; 5
     9ca:	68 f0       	brcs	.+26     	; 0x9e6 <Modbus_mster_transaction+0x4ba>
     9cc:	87 30       	cpi	r24, 0x07	; 7
     9ce:	08 f4       	brcc	.+2      	; 0x9d2 <Modbus_mster_transaction+0x4a6>
     9d0:	ae c3       	rjmp	.+1884   	; 0x112e <Modbus_mster_transaction+0xc02>
     9d2:	0a c0       	rjmp	.+20     	; 0x9e8 <Modbus_mster_transaction+0x4bc>
     9d4:	87 31       	cpi	r24, 0x17	; 23
     9d6:	39 f0       	breq	.+14     	; 0x9e6 <Modbus_mster_transaction+0x4ba>
     9d8:	8f 3f       	cpi	r24, 0xFF	; 255
     9da:	09 f4       	brne	.+2      	; 0x9de <Modbus_mster_transaction+0x4b2>
     9dc:	a8 c3       	rjmp	.+1872   	; 0x112e <Modbus_mster_transaction+0xc02>
     9de:	86 31       	cpi	r24, 0x16	; 22
     9e0:	19 f4       	brne	.+6      	; 0x9e8 <Modbus_mster_transaction+0x4bc>
     9e2:	05 e0       	ldi	r16, 0x05	; 5
     9e4:	a5 c3       	rjmp	.+1866   	; 0x1130 <Modbus_mster_transaction+0xc04>
     9e6:	0b 81       	ldd	r16, Y+3	; 0x03
     9e8:	0e 94 68 1f 	call	0x3ed0	; 0x3ed0 <Get_millis>
     9ec:	dc 01       	movw	r26, r24
     9ee:	cb 01       	movw	r24, r22
     9f0:	88 19       	sub	r24, r8
     9f2:	99 09       	sbc	r25, r9
     9f4:	aa 09       	sbc	r26, r10
     9f6:	bb 09       	sbc	r27, r11
     9f8:	81 3d       	cpi	r24, 0xD1	; 209
     9fa:	97 40       	sbci	r25, 0x07	; 7
     9fc:	a1 05       	cpc	r26, r1
     9fe:	b1 05       	cpc	r27, r1
     a00:	08 f4       	brcc	.+2      	; 0xa04 <Modbus_mster_transaction+0x4d8>
     a02:	eb c3       	rjmp	.+2006   	; 0x11da <Modbus_mster_transaction+0xcae>
     a04:	80 e0       	ldi	r24, 0x00	; 0
     a06:	92 e0       	ldi	r25, 0x02	; 2
     a08:	aa d7       	rcall	.+3924   	; 0x195e <UART0_puts>
     a0a:	8a e0       	ldi	r24, 0x0A	; 10
     a0c:	73 d7       	rcall	.+3814   	; 0x18f4 <UART0_putc>
     a0e:	01 11       	cpse	r16, r1
     a10:	f4 c3       	rjmp	.+2024   	; 0x11fa <Modbus_mster_transaction+0xcce>
     a12:	82 ee       	ldi	r24, 0xE2	; 226
     a14:	81 11       	cpse	r24, r1
     a16:	9b c0       	rjmp	.+310    	; 0xb4e <Modbus_mster_transaction+0x622>
     a18:	15 30       	cpi	r17, 0x05	; 5
     a1a:	08 f4       	brcc	.+2      	; 0xa1e <Modbus_mster_transaction+0x4f2>
     a1c:	a9 c3       	rjmp	.+1874   	; 0x1170 <Modbus_mster_transaction+0xc44>
     a1e:	a1 2e       	mov	r10, r17
     a20:	b1 2c       	mov	r11, r1
     a22:	75 01       	movw	r14, r10
     a24:	f2 e0       	ldi	r31, 0x02	; 2
     a26:	ef 1a       	sub	r14, r31
     a28:	f1 08       	sbc	r15, r1
     a2a:	1e 14       	cp	r1, r14
     a2c:	1f 04       	cpc	r1, r15
     a2e:	5c f0       	brlt	.+22     	; 0xa46 <Modbus_mster_transaction+0x51a>
     a30:	8e c3       	rjmp	.+1820   	; 0x114e <Modbus_mster_transaction+0xc22>
     a32:	0f 2e       	mov	r0, r31
     a34:	f3 e0       	ldi	r31, 0x03	; 3
     a36:	ef 2e       	mov	r14, r31
     a38:	f1 2c       	mov	r15, r1
     a3a:	f0 2d       	mov	r31, r0
     a3c:	0f 2e       	mov	r0, r31
     a3e:	f5 e0       	ldi	r31, 0x05	; 5
     a40:	af 2e       	mov	r10, r31
     a42:	b1 2c       	mov	r11, r1
     a44:	f0 2d       	mov	r31, r0
     a46:	20 e0       	ldi	r18, 0x00	; 0
     a48:	30 e0       	ldi	r19, 0x00	; 0
     a4a:	8f ef       	ldi	r24, 0xFF	; 255
     a4c:	9f ef       	ldi	r25, 0xFF	; 255
     a4e:	10 e0       	ldi	r17, 0x00	; 0
     a50:	e1 e0       	ldi	r30, 0x01	; 1
     a52:	f0 e0       	ldi	r31, 0x00	; 0
     a54:	ec 0f       	add	r30, r28
     a56:	fd 1f       	adc	r31, r29
     a58:	e2 0f       	add	r30, r18
     a5a:	f3 1f       	adc	r31, r19
     a5c:	60 81       	ld	r22, Z
     a5e:	0e 94 47 1f 	call	0x3e8e	; 0x3e8e <crc16_update>
     a62:	1f 5f       	subi	r17, 0xFF	; 255
     a64:	21 2f       	mov	r18, r17
     a66:	30 e0       	ldi	r19, 0x00	; 0
     a68:	2e 15       	cp	r18, r14
     a6a:	3f 05       	cpc	r19, r15
     a6c:	8c f3       	brlt	.-30     	; 0xa50 <Modbus_mster_transaction+0x524>
     a6e:	71 c3       	rjmp	.+1762   	; 0x1152 <Modbus_mster_transaction+0xc26>
     a70:	89 2f       	mov	r24, r25
     a72:	99 27       	eor	r25, r25
     a74:	fe 01       	movw	r30, r28
     a76:	ea 0d       	add	r30, r10
     a78:	fb 1d       	adc	r31, r11
     a7a:	20 81       	ld	r18, Z
     a7c:	30 e0       	ldi	r19, 0x00	; 0
     a7e:	82 17       	cp	r24, r18
     a80:	93 07       	cpc	r25, r19
     a82:	09 f0       	breq	.+2      	; 0xa86 <Modbus_mster_transaction+0x55a>
     a84:	73 c3       	rjmp	.+1766   	; 0x116c <Modbus_mster_transaction+0xc40>
     a86:	74 c3       	rjmp	.+1768   	; 0x1170 <Modbus_mster_transaction+0xc44>
     a88:	9b 81       	ldd	r25, Y+3	; 0x03
     a8a:	96 95       	lsr	r25
     a8c:	e9 f5       	brne	.+122    	; 0xb08 <Modbus_mster_transaction+0x5dc>
     a8e:	80 e0       	ldi	r24, 0x00	; 0
     a90:	5e c0       	rjmp	.+188    	; 0xb4e <Modbus_mster_transaction+0x622>
     a92:	7b 81       	ldd	r23, Y+3	; 0x03
     a94:	97 2f       	mov	r25, r23
     a96:	96 95       	lsr	r25
     a98:	09 f4       	brne	.+2      	; 0xa9c <Modbus_mster_transaction+0x570>
     a9a:	78 c3       	rjmp	.+1776   	; 0x118c <Modbus_mster_transaction+0xc60>
     a9c:	fe 01       	movw	r30, r28
     a9e:	31 96       	adiw	r30, 0x01	; 1
     aa0:	40 e0       	ldi	r20, 0x00	; 0
     aa2:	50 e0       	ldi	r21, 0x00	; 0
     aa4:	80 e0       	ldi	r24, 0x00	; 0
     aa6:	80 34       	cpi	r24, 0x40	; 64
     aa8:	70 f4       	brcc	.+28     	; 0xac6 <Modbus_mster_transaction+0x59a>
     aaa:	24 81       	ldd	r18, Z+4	; 0x04
     aac:	30 e0       	ldi	r19, 0x00	; 0
     aae:	32 2f       	mov	r19, r18
     ab0:	22 27       	eor	r18, r18
     ab2:	63 81       	ldd	r22, Z+3	; 0x03
     ab4:	26 2b       	or	r18, r22
     ab6:	da 01       	movw	r26, r20
     ab8:	aa 0f       	add	r26, r26
     aba:	bb 1f       	adc	r27, r27
     abc:	a2 5a       	subi	r26, 0xA2	; 162
     abe:	bb 4f       	sbci	r27, 0xFB	; 251
     ac0:	11 96       	adiw	r26, 0x01	; 1
     ac2:	3c 93       	st	X, r19
     ac4:	2e 93       	st	-X, r18
     ac6:	8f 5f       	subi	r24, 0xFF	; 255
     ac8:	4f 5f       	subi	r20, 0xFF	; 255
     aca:	5f 4f       	sbci	r21, 0xFF	; 255
     acc:	32 96       	adiw	r30, 0x02	; 2
     ace:	89 13       	cpse	r24, r25
     ad0:	ea cf       	rjmp	.-44     	; 0xaa6 <Modbus_mster_transaction+0x57a>
     ad2:	8f ef       	ldi	r24, 0xFF	; 255
     ad4:	89 0f       	add	r24, r25
     ad6:	80 93 d7 03 	sts	0x03D7, r24	; 0x8003d7 <g_mod0_response_buffer_length>
     ada:	70 ff       	sbrs	r23, 0
     adc:	35 c0       	rjmp	.+106    	; 0xb48 <Modbus_mster_transaction+0x61c>
     ade:	90 34       	cpi	r25, 0x40	; 64
     ae0:	70 f4       	brcc	.+28     	; 0xafe <Modbus_mster_transaction+0x5d2>
     ae2:	29 2f       	mov	r18, r25
     ae4:	30 e0       	ldi	r19, 0x00	; 0
     ae6:	22 0f       	add	r18, r18
     ae8:	33 1f       	adc	r19, r19
     aea:	fe 01       	movw	r30, r28
     aec:	e2 0f       	add	r30, r18
     aee:	f3 1f       	adc	r31, r19
     af0:	44 81       	ldd	r20, Z+4	; 0x04
     af2:	50 e0       	ldi	r21, 0x00	; 0
     af4:	f9 01       	movw	r30, r18
     af6:	e2 5a       	subi	r30, 0xA2	; 162
     af8:	fb 4f       	sbci	r31, 0xFB	; 251
     afa:	51 83       	std	Z+1, r21	; 0x01
     afc:	40 83       	st	Z, r20
     afe:	9f 5f       	subi	r25, 0xFF	; 255
     b00:	90 93 d7 03 	sts	0x03D7, r25	; 0x8003d7 <g_mod0_response_buffer_length>
     b04:	80 e0       	ldi	r24, 0x00	; 0
     b06:	23 c0       	rjmp	.+70     	; 0xb4e <Modbus_mster_transaction+0x622>
     b08:	fe 01       	movw	r30, r28
     b0a:	31 96       	adiw	r30, 0x01	; 1
     b0c:	40 e0       	ldi	r20, 0x00	; 0
     b0e:	50 e0       	ldi	r21, 0x00	; 0
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	80 34       	cpi	r24, 0x40	; 64
     b14:	70 f4       	brcc	.+28     	; 0xb32 <Modbus_mster_transaction+0x606>
     b16:	23 81       	ldd	r18, Z+3	; 0x03
     b18:	30 e0       	ldi	r19, 0x00	; 0
     b1a:	32 2f       	mov	r19, r18
     b1c:	22 27       	eor	r18, r18
     b1e:	64 81       	ldd	r22, Z+4	; 0x04
     b20:	26 2b       	or	r18, r22
     b22:	da 01       	movw	r26, r20
     b24:	aa 0f       	add	r26, r26
     b26:	bb 1f       	adc	r27, r27
     b28:	a2 5a       	subi	r26, 0xA2	; 162
     b2a:	bb 4f       	sbci	r27, 0xFB	; 251
     b2c:	11 96       	adiw	r26, 0x01	; 1
     b2e:	3c 93       	st	X, r19
     b30:	2e 93       	st	-X, r18
     b32:	8f 5f       	subi	r24, 0xFF	; 255
     b34:	4f 5f       	subi	r20, 0xFF	; 255
     b36:	5f 4f       	sbci	r21, 0xFF	; 255
     b38:	32 96       	adiw	r30, 0x02	; 2
     b3a:	89 13       	cpse	r24, r25
     b3c:	ea cf       	rjmp	.-44     	; 0xb12 <Modbus_mster_transaction+0x5e6>
     b3e:	91 50       	subi	r25, 0x01	; 1
     b40:	90 93 d7 03 	sts	0x03D7, r25	; 0x8003d7 <g_mod0_response_buffer_length>
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	03 c0       	rjmp	.+6      	; 0xb4e <Modbus_mster_transaction+0x622>
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	01 c0       	rjmp	.+2      	; 0xb4e <Modbus_mster_transaction+0x622>
     b4c:	80 e0       	ldi	r24, 0x00	; 0
     b4e:	10 92 d9 03 	sts	0x03D9, r1	; 0x8003d9 <g_mod0_transmit_buffer_index>
     b52:	10 92 d8 03 	sts	0x03D8, r1	; 0x8003d8 <g_mod0_response_buffer_index>
     b56:	59 c3       	rjmp	.+1714   	; 0x120a <Modbus_mster_transaction+0xcde>
     b58:	81 30       	cpi	r24, 0x01	; 1
     b5a:	09 f0       	breq	.+2      	; 0xb5e <Modbus_mster_transaction+0x632>
     b5c:	e6 c2       	rjmp	.+1484   	; 0x112a <Modbus_mster_transaction+0xbfe>
     b5e:	80 91 c8 03 	lds	r24, 0x03C8	; 0x8003c8 <g_mod1_slave>
     b62:	89 83       	std	Y+1, r24	; 0x01
     b64:	2f ef       	ldi	r18, 0xFF	; 255
     b66:	62 13       	cpse	r22, r18
     b68:	06 c0       	rjmp	.+12     	; 0xb76 <Modbus_mster_transaction+0x64a>
     b6a:	8f e0       	ldi	r24, 0x0F	; 15
     b6c:	8a 83       	std	Y+2, r24	; 0x02
     b6e:	68 94       	set
     b70:	bb 24       	eor	r11, r11
     b72:	b1 f8       	bld	r11, 1
     b74:	32 c0       	rjmp	.+100    	; 0xbda <Modbus_mster_transaction+0x6ae>
     b76:	6a 83       	std	Y+2, r22	; 0x02
     b78:	81 e0       	ldi	r24, 0x01	; 1
     b7a:	68 17       	cp	r22, r24
     b7c:	b8 f0       	brcs	.+46     	; 0xbac <Modbus_mster_transaction+0x680>
     b7e:	94 e0       	ldi	r25, 0x04	; 4
     b80:	96 17       	cp	r25, r22
     b82:	18 f4       	brcc	.+6      	; 0xb8a <Modbus_mster_transaction+0x65e>
     b84:	a7 e1       	ldi	r26, 0x17	; 23
     b86:	6a 13       	cpse	r22, r26
     b88:	11 c0       	rjmp	.+34     	; 0xbac <Modbus_mster_transaction+0x680>
     b8a:	80 91 c6 03 	lds	r24, 0x03C6	; 0x8003c6 <g_mod1_read_address>
     b8e:	90 91 c7 03 	lds	r25, 0x03C7	; 0x8003c7 <g_mod1_read_address+0x1>
     b92:	9b 83       	std	Y+3, r25	; 0x03
     b94:	8c 83       	std	Y+4, r24	; 0x04
     b96:	80 91 c4 03 	lds	r24, 0x03C4	; 0x8003c4 <g_mod1_read_qty>
     b9a:	90 91 c5 03 	lds	r25, 0x03C5	; 0x8003c5 <g_mod1_read_qty+0x1>
     b9e:	9d 83       	std	Y+5, r25	; 0x05
     ba0:	8e 83       	std	Y+6, r24	; 0x06
     ba2:	0f 2e       	mov	r0, r31
     ba4:	f6 e0       	ldi	r31, 0x06	; 6
     ba6:	bf 2e       	mov	r11, r31
     ba8:	f0 2d       	mov	r31, r0
     baa:	03 c0       	rjmp	.+6      	; 0xbb2 <Modbus_mster_transaction+0x686>
     bac:	68 94       	set
     bae:	bb 24       	eor	r11, r11
     bb0:	b1 f8       	bld	r11, 1
     bb2:	b0 e1       	ldi	r27, 0x10	; 16
     bb4:	bd 15       	cp	r27, r13
     bb6:	40 f0       	brcs	.+16     	; 0xbc8 <Modbus_mster_transaction+0x69c>
     bb8:	ef e0       	ldi	r30, 0x0F	; 15
     bba:	de 16       	cp	r13, r30
     bbc:	70 f4       	brcc	.+28     	; 0xbda <Modbus_mster_transaction+0x6ae>
     bbe:	8b ef       	ldi	r24, 0xFB	; 251
     bc0:	8d 0d       	add	r24, r13
     bc2:	82 30       	cpi	r24, 0x02	; 2
     bc4:	00 f5       	brcc	.+64     	; 0xc06 <Modbus_mster_transaction+0x6da>
     bc6:	09 c0       	rjmp	.+18     	; 0xbda <Modbus_mster_transaction+0x6ae>
     bc8:	f6 e1       	ldi	r31, 0x16	; 22
     bca:	df 16       	cp	r13, r31
     bcc:	e0 f0       	brcs	.+56     	; 0xc06 <Modbus_mster_transaction+0x6da>
     bce:	27 e1       	ldi	r18, 0x17	; 23
     bd0:	2d 15       	cp	r18, r13
     bd2:	18 f4       	brcc	.+6      	; 0xbda <Modbus_mster_transaction+0x6ae>
     bd4:	8f ef       	ldi	r24, 0xFF	; 255
     bd6:	d8 12       	cpse	r13, r24
     bd8:	16 c0       	rjmp	.+44     	; 0xc06 <Modbus_mster_transaction+0x6da>
     bda:	90 91 42 03 	lds	r25, 0x0342	; 0x800342 <g_mod1_write_address>
     bde:	80 91 43 03 	lds	r24, 0x0343	; 0x800343 <g_mod1_write_address+0x1>
     be2:	e1 e0       	ldi	r30, 0x01	; 1
     be4:	f0 e0       	ldi	r31, 0x00	; 0
     be6:	ec 0f       	add	r30, r28
     be8:	fd 1f       	adc	r31, r29
     bea:	eb 0d       	add	r30, r11
     bec:	f1 1d       	adc	r31, r1
     bee:	80 83       	st	Z, r24
     bf0:	81 e0       	ldi	r24, 0x01	; 1
     bf2:	8b 0d       	add	r24, r11
     bf4:	e1 e0       	ldi	r30, 0x01	; 1
     bf6:	f0 e0       	ldi	r31, 0x00	; 0
     bf8:	ec 0f       	add	r30, r28
     bfa:	fd 1f       	adc	r31, r29
     bfc:	e8 0f       	add	r30, r24
     bfe:	f1 1d       	adc	r31, r1
     c00:	b3 94       	inc	r11
     c02:	b3 94       	inc	r11
     c04:	90 83       	st	Z, r25
     c06:	90 e1       	ldi	r25, 0x10	; 16
     c08:	d9 16       	cp	r13, r25
     c0a:	09 f4       	brne	.+2      	; 0xc0e <Modbus_mster_transaction+0x6e2>
     c0c:	ad c0       	rjmp	.+346    	; 0xd68 <Modbus_mster_transaction+0x83c>
     c0e:	9d 15       	cp	r25, r13
     c10:	58 f0       	brcs	.+22     	; 0xc28 <Modbus_mster_transaction+0x6fc>
     c12:	a6 e0       	ldi	r26, 0x06	; 6
     c14:	da 16       	cp	r13, r26
     c16:	61 f1       	breq	.+88     	; 0xc70 <Modbus_mster_transaction+0x744>
     c18:	bf e0       	ldi	r27, 0x0F	; 15
     c1a:	db 16       	cp	r13, r27
     c1c:	09 f4       	brne	.+2      	; 0xc20 <Modbus_mster_transaction+0x6f4>
     c1e:	41 c0       	rjmp	.+130    	; 0xca2 <Modbus_mster_transaction+0x776>
     c20:	e5 e0       	ldi	r30, 0x05	; 5
     c22:	de 12       	cpse	r13, r30
     c24:	1b c1       	rjmp	.+566    	; 0xe5c <Modbus_mster_transaction+0x930>
     c26:	0d c0       	rjmp	.+26     	; 0xc42 <Modbus_mster_transaction+0x716>
     c28:	f7 e1       	ldi	r31, 0x17	; 23
     c2a:	df 16       	cp	r13, r31
     c2c:	09 f4       	brne	.+2      	; 0xc30 <Modbus_mster_transaction+0x704>
     c2e:	9c c0       	rjmp	.+312    	; 0xd68 <Modbus_mster_transaction+0x83c>
     c30:	2f ef       	ldi	r18, 0xFF	; 255
     c32:	d2 16       	cp	r13, r18
     c34:	09 f4       	brne	.+2      	; 0xc38 <Modbus_mster_transaction+0x70c>
     c36:	98 c0       	rjmp	.+304    	; 0xd68 <Modbus_mster_transaction+0x83c>
     c38:	86 e1       	ldi	r24, 0x16	; 22
     c3a:	d8 16       	cp	r13, r24
     c3c:	09 f4       	brne	.+2      	; 0xc40 <Modbus_mster_transaction+0x714>
     c3e:	e0 c0       	rjmp	.+448    	; 0xe00 <Modbus_mster_transaction+0x8d4>
     c40:	0d c1       	rjmp	.+538    	; 0xe5c <Modbus_mster_transaction+0x930>
     c42:	90 91 40 03 	lds	r25, 0x0340	; 0x800340 <g_mod1_write_qty>
     c46:	80 91 41 03 	lds	r24, 0x0341	; 0x800341 <g_mod1_write_qty+0x1>
     c4a:	e1 e0       	ldi	r30, 0x01	; 1
     c4c:	f0 e0       	ldi	r31, 0x00	; 0
     c4e:	ec 0f       	add	r30, r28
     c50:	fd 1f       	adc	r31, r29
     c52:	eb 0d       	add	r30, r11
     c54:	f1 1d       	adc	r31, r1
     c56:	80 83       	st	Z, r24
     c58:	81 e0       	ldi	r24, 0x01	; 1
     c5a:	8b 0d       	add	r24, r11
     c5c:	e1 e0       	ldi	r30, 0x01	; 1
     c5e:	f0 e0       	ldi	r31, 0x00	; 0
     c60:	ec 0f       	add	r30, r28
     c62:	fd 1f       	adc	r31, r29
     c64:	e8 0f       	add	r30, r24
     c66:	f1 1d       	adc	r31, r1
     c68:	b3 94       	inc	r11
     c6a:	b3 94       	inc	r11
     c6c:	90 83       	st	Z, r25
     c6e:	f6 c0       	rjmp	.+492    	; 0xe5c <Modbus_mster_transaction+0x930>
     c70:	e0 ec       	ldi	r30, 0xC0	; 192
     c72:	f2 e0       	ldi	r31, 0x02	; 2
     c74:	80 81       	ld	r24, Z
     c76:	91 81       	ldd	r25, Z+1	; 0x01
     c78:	a1 e0       	ldi	r26, 0x01	; 1
     c7a:	b0 e0       	ldi	r27, 0x00	; 0
     c7c:	ac 0f       	add	r26, r28
     c7e:	bd 1f       	adc	r27, r29
     c80:	ab 0d       	add	r26, r11
     c82:	b1 1d       	adc	r27, r1
     c84:	9c 93       	st	X, r25
     c86:	20 81       	ld	r18, Z
     c88:	31 81       	ldd	r19, Z+1	; 0x01
     c8a:	81 e0       	ldi	r24, 0x01	; 1
     c8c:	8b 0d       	add	r24, r11
     c8e:	e1 e0       	ldi	r30, 0x01	; 1
     c90:	f0 e0       	ldi	r31, 0x00	; 0
     c92:	ec 0f       	add	r30, r28
     c94:	fd 1f       	adc	r31, r29
     c96:	e8 0f       	add	r30, r24
     c98:	f1 1d       	adc	r31, r1
     c9a:	b3 94       	inc	r11
     c9c:	b3 94       	inc	r11
     c9e:	20 83       	st	Z, r18
     ca0:	dd c0       	rjmp	.+442    	; 0xe5c <Modbus_mster_transaction+0x930>
     ca2:	80 91 40 03 	lds	r24, 0x0340	; 0x800340 <g_mod1_write_qty>
     ca6:	90 91 41 03 	lds	r25, 0x0341	; 0x800341 <g_mod1_write_qty+0x1>
     caa:	e1 e0       	ldi	r30, 0x01	; 1
     cac:	f0 e0       	ldi	r31, 0x00	; 0
     cae:	ec 0f       	add	r30, r28
     cb0:	fd 1f       	adc	r31, r29
     cb2:	eb 0d       	add	r30, r11
     cb4:	f1 1d       	adc	r31, r1
     cb6:	90 83       	st	Z, r25
     cb8:	22 e0       	ldi	r18, 0x02	; 2
     cba:	2b 0d       	add	r18, r11
     cbc:	31 e0       	ldi	r19, 0x01	; 1
     cbe:	3b 0d       	add	r19, r11
     cc0:	e1 e0       	ldi	r30, 0x01	; 1
     cc2:	f0 e0       	ldi	r31, 0x00	; 0
     cc4:	ec 0f       	add	r30, r28
     cc6:	fd 1f       	adc	r31, r29
     cc8:	e3 0f       	add	r30, r19
     cca:	f1 1d       	adc	r31, r1
     ccc:	80 83       	st	Z, r24
     cce:	ac 01       	movw	r20, r24
     cd0:	47 70       	andi	r20, 0x07	; 7
     cd2:	55 27       	eor	r21, r21
     cd4:	45 2b       	or	r20, r21
     cd6:	49 f0       	breq	.+18     	; 0xcea <Modbus_mster_transaction+0x7be>
     cd8:	96 95       	lsr	r25
     cda:	87 95       	ror	r24
     cdc:	96 95       	lsr	r25
     cde:	87 95       	ror	r24
     ce0:	96 95       	lsr	r25
     ce2:	87 95       	ror	r24
     ce4:	91 e0       	ldi	r25, 0x01	; 1
     ce6:	98 0f       	add	r25, r24
     ce8:	07 c0       	rjmp	.+14     	; 0xcf8 <Modbus_mster_transaction+0x7cc>
     cea:	96 95       	lsr	r25
     cec:	87 95       	ror	r24
     cee:	96 95       	lsr	r25
     cf0:	87 95       	ror	r24
     cf2:	96 95       	lsr	r25
     cf4:	87 95       	ror	r24
     cf6:	98 2f       	mov	r25, r24
     cf8:	a3 e0       	ldi	r26, 0x03	; 3
     cfa:	ba 0e       	add	r11, r26
     cfc:	fe 01       	movw	r30, r28
     cfe:	e2 0f       	add	r30, r18
     d00:	f1 1d       	adc	r31, r1
     d02:	91 83       	std	Z+1, r25	; 0x01
     d04:	99 23       	and	r25, r25
     d06:	09 f4       	brne	.+2      	; 0xd0a <Modbus_mster_transaction+0x7de>
     d08:	a9 c0       	rjmp	.+338    	; 0xe5c <Modbus_mster_transaction+0x930>
     d0a:	80 e0       	ldi	r24, 0x00	; 0
     d0c:	28 2f       	mov	r18, r24
     d0e:	21 70       	andi	r18, 0x01	; 1
     d10:	80 ff       	sbrs	r24, 0
     d12:	03 c0       	rjmp	.+6      	; 0xd1a <Modbus_mster_transaction+0x7ee>
     d14:	21 30       	cpi	r18, 0x01	; 1
     d16:	99 f0       	breq	.+38     	; 0xd3e <Modbus_mster_transaction+0x812>
     d18:	23 c0       	rjmp	.+70     	; 0xd60 <Modbus_mster_transaction+0x834>
     d1a:	e8 2f       	mov	r30, r24
     d1c:	e6 95       	lsr	r30
     d1e:	f0 e0       	ldi	r31, 0x00	; 0
     d20:	ee 0f       	add	r30, r30
     d22:	ff 1f       	adc	r31, r31
     d24:	e0 54       	subi	r30, 0x40	; 64
     d26:	fd 4f       	sbci	r31, 0xFD	; 253
     d28:	20 81       	ld	r18, Z
     d2a:	31 81       	ldd	r19, Z+1	; 0x01
     d2c:	e1 e0       	ldi	r30, 0x01	; 1
     d2e:	f0 e0       	ldi	r31, 0x00	; 0
     d30:	ec 0f       	add	r30, r28
     d32:	fd 1f       	adc	r31, r29
     d34:	eb 0d       	add	r30, r11
     d36:	f1 1d       	adc	r31, r1
     d38:	20 83       	st	Z, r18
     d3a:	b3 94       	inc	r11
     d3c:	11 c0       	rjmp	.+34     	; 0xd60 <Modbus_mster_transaction+0x834>
     d3e:	e8 2f       	mov	r30, r24
     d40:	e6 95       	lsr	r30
     d42:	f0 e0       	ldi	r31, 0x00	; 0
     d44:	ee 0f       	add	r30, r30
     d46:	ff 1f       	adc	r31, r31
     d48:	e0 54       	subi	r30, 0x40	; 64
     d4a:	fd 4f       	sbci	r31, 0xFD	; 253
     d4c:	20 81       	ld	r18, Z
     d4e:	31 81       	ldd	r19, Z+1	; 0x01
     d50:	e1 e0       	ldi	r30, 0x01	; 1
     d52:	f0 e0       	ldi	r31, 0x00	; 0
     d54:	ec 0f       	add	r30, r28
     d56:	fd 1f       	adc	r31, r29
     d58:	eb 0d       	add	r30, r11
     d5a:	f1 1d       	adc	r31, r1
     d5c:	30 83       	st	Z, r19
     d5e:	b3 94       	inc	r11
     d60:	8f 5f       	subi	r24, 0xFF	; 255
     d62:	98 13       	cpse	r25, r24
     d64:	d3 cf       	rjmp	.-90     	; 0xd0c <Modbus_mster_transaction+0x7e0>
     d66:	7a c0       	rjmp	.+244    	; 0xe5c <Modbus_mster_transaction+0x930>
     d68:	80 91 40 03 	lds	r24, 0x0340	; 0x800340 <g_mod1_write_qty>
     d6c:	90 91 41 03 	lds	r25, 0x0341	; 0x800341 <g_mod1_write_qty+0x1>
     d70:	e1 e0       	ldi	r30, 0x01	; 1
     d72:	f0 e0       	ldi	r31, 0x00	; 0
     d74:	ec 0f       	add	r30, r28
     d76:	fd 1f       	adc	r31, r29
     d78:	eb 0d       	add	r30, r11
     d7a:	f1 1d       	adc	r31, r1
     d7c:	90 83       	st	Z, r25
     d7e:	21 e0       	ldi	r18, 0x01	; 1
     d80:	2b 0d       	add	r18, r11
     d82:	e1 e0       	ldi	r30, 0x01	; 1
     d84:	f0 e0       	ldi	r31, 0x00	; 0
     d86:	ec 0f       	add	r30, r28
     d88:	fd 1f       	adc	r31, r29
     d8a:	e2 0f       	add	r30, r18
     d8c:	f1 1d       	adc	r31, r1
     d8e:	80 83       	st	Z, r24
     d90:	22 e0       	ldi	r18, 0x02	; 2
     d92:	2b 0d       	add	r18, r11
     d94:	e1 e0       	ldi	r30, 0x01	; 1
     d96:	f0 e0       	ldi	r31, 0x00	; 0
     d98:	ec 0f       	add	r30, r28
     d9a:	fd 1f       	adc	r31, r29
     d9c:	e2 0f       	add	r30, r18
     d9e:	f1 1d       	adc	r31, r1
     da0:	b3 e0       	ldi	r27, 0x03	; 3
     da2:	bb 0e       	add	r11, r27
     da4:	28 2f       	mov	r18, r24
     da6:	22 0f       	add	r18, r18
     da8:	20 83       	st	Z, r18
     daa:	ac 01       	movw	r20, r24
     dac:	55 27       	eor	r21, r21
     dae:	14 16       	cp	r1, r20
     db0:	15 06       	cpc	r1, r21
     db2:	0c f0       	brlt	.+2      	; 0xdb6 <Modbus_mster_transaction+0x88a>
     db4:	53 c0       	rjmp	.+166    	; 0xe5c <Modbus_mster_transaction+0x930>
     db6:	80 e0       	ldi	r24, 0x00	; 0
     db8:	90 e0       	ldi	r25, 0x00	; 0
     dba:	20 e0       	ldi	r18, 0x00	; 0
     dbc:	88 0f       	add	r24, r24
     dbe:	99 1f       	adc	r25, r25
     dc0:	fc 01       	movw	r30, r24
     dc2:	e0 54       	subi	r30, 0x40	; 64
     dc4:	fd 4f       	sbci	r31, 0xFD	; 253
     dc6:	80 81       	ld	r24, Z
     dc8:	91 81       	ldd	r25, Z+1	; 0x01
     dca:	a1 e0       	ldi	r26, 0x01	; 1
     dcc:	b0 e0       	ldi	r27, 0x00	; 0
     dce:	ac 0f       	add	r26, r28
     dd0:	bd 1f       	adc	r27, r29
     dd2:	ab 0d       	add	r26, r11
     dd4:	b1 1d       	adc	r27, r1
     dd6:	9c 93       	st	X, r25
     dd8:	60 81       	ld	r22, Z
     dda:	71 81       	ldd	r23, Z+1	; 0x01
     ddc:	81 e0       	ldi	r24, 0x01	; 1
     dde:	8b 0d       	add	r24, r11
     de0:	e1 e0       	ldi	r30, 0x01	; 1
     de2:	f0 e0       	ldi	r31, 0x00	; 0
     de4:	ec 0f       	add	r30, r28
     de6:	fd 1f       	adc	r31, r29
     de8:	e8 0f       	add	r30, r24
     dea:	f1 1d       	adc	r31, r1
     dec:	b3 94       	inc	r11
     dee:	b3 94       	inc	r11
     df0:	60 83       	st	Z, r22
     df2:	2f 5f       	subi	r18, 0xFF	; 255
     df4:	82 2f       	mov	r24, r18
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	84 17       	cp	r24, r20
     dfa:	95 07       	cpc	r25, r21
     dfc:	fc f2       	brlt	.-66     	; 0xdbc <Modbus_mster_transaction+0x890>
     dfe:	2e c0       	rjmp	.+92     	; 0xe5c <Modbus_mster_transaction+0x930>
     e00:	e0 ec       	ldi	r30, 0xC0	; 192
     e02:	f2 e0       	ldi	r31, 0x02	; 2
     e04:	80 81       	ld	r24, Z
     e06:	91 81       	ldd	r25, Z+1	; 0x01
     e08:	a1 e0       	ldi	r26, 0x01	; 1
     e0a:	b0 e0       	ldi	r27, 0x00	; 0
     e0c:	ac 0f       	add	r26, r28
     e0e:	bd 1f       	adc	r27, r29
     e10:	ab 0d       	add	r26, r11
     e12:	b1 1d       	adc	r27, r1
     e14:	9c 93       	st	X, r25
     e16:	80 81       	ld	r24, Z
     e18:	91 81       	ldd	r25, Z+1	; 0x01
     e1a:	91 e0       	ldi	r25, 0x01	; 1
     e1c:	9b 0d       	add	r25, r11
     e1e:	a1 e0       	ldi	r26, 0x01	; 1
     e20:	b0 e0       	ldi	r27, 0x00	; 0
     e22:	ac 0f       	add	r26, r28
     e24:	bd 1f       	adc	r27, r29
     e26:	a9 0f       	add	r26, r25
     e28:	b1 1d       	adc	r27, r1
     e2a:	8c 93       	st	X, r24
     e2c:	82 81       	ldd	r24, Z+2	; 0x02
     e2e:	93 81       	ldd	r25, Z+3	; 0x03
     e30:	82 e0       	ldi	r24, 0x02	; 2
     e32:	8b 0d       	add	r24, r11
     e34:	a1 e0       	ldi	r26, 0x01	; 1
     e36:	b0 e0       	ldi	r27, 0x00	; 0
     e38:	ac 0f       	add	r26, r28
     e3a:	bd 1f       	adc	r27, r29
     e3c:	a8 0f       	add	r26, r24
     e3e:	b1 1d       	adc	r27, r1
     e40:	9c 93       	st	X, r25
     e42:	22 81       	ldd	r18, Z+2	; 0x02
     e44:	33 81       	ldd	r19, Z+3	; 0x03
     e46:	83 e0       	ldi	r24, 0x03	; 3
     e48:	8b 0d       	add	r24, r11
     e4a:	e1 e0       	ldi	r30, 0x01	; 1
     e4c:	f0 e0       	ldi	r31, 0x00	; 0
     e4e:	ec 0f       	add	r30, r28
     e50:	fd 1f       	adc	r31, r29
     e52:	e8 0f       	add	r30, r24
     e54:	f1 1d       	adc	r31, r1
     e56:	84 e0       	ldi	r24, 0x04	; 4
     e58:	b8 0e       	add	r11, r24
     e5a:	20 83       	st	Z, r18
     e5c:	bb 20       	and	r11, r11
     e5e:	b9 f0       	breq	.+46     	; 0xe8e <Modbus_mster_transaction+0x962>
     e60:	8e 01       	movw	r16, r28
     e62:	0f 5f       	subi	r16, 0xFF	; 255
     e64:	1f 4f       	sbci	r17, 0xFF	; 255
     e66:	ee 24       	eor	r14, r14
     e68:	ea 94       	dec	r14
     e6a:	eb 0c       	add	r14, r11
     e6c:	f1 2c       	mov	r15, r1
     e6e:	9f ef       	ldi	r25, 0xFF	; 255
     e70:	e9 1a       	sub	r14, r25
     e72:	f9 0a       	sbc	r15, r25
     e74:	e0 0e       	add	r14, r16
     e76:	f1 1e       	adc	r15, r17
     e78:	8f ef       	ldi	r24, 0xFF	; 255
     e7a:	9f ef       	ldi	r25, 0xFF	; 255
     e7c:	d8 01       	movw	r26, r16
     e7e:	6d 91       	ld	r22, X+
     e80:	8d 01       	movw	r16, r26
     e82:	0e 94 47 1f 	call	0x3e8e	; 0x3e8e <crc16_update>
     e86:	0e 15       	cp	r16, r14
     e88:	1f 05       	cpc	r17, r15
     e8a:	c1 f7       	brne	.-16     	; 0xe7c <Modbus_mster_transaction+0x950>
     e8c:	02 c0       	rjmp	.+4      	; 0xe92 <Modbus_mster_transaction+0x966>
     e8e:	8f ef       	ldi	r24, 0xFF	; 255
     e90:	9f ef       	ldi	r25, 0xFF	; 255
     e92:	ee 24       	eor	r14, r14
     e94:	e3 94       	inc	r14
     e96:	eb 0c       	add	r14, r11
     e98:	e1 e0       	ldi	r30, 0x01	; 1
     e9a:	f0 e0       	ldi	r31, 0x00	; 0
     e9c:	ec 0f       	add	r30, r28
     e9e:	fd 1f       	adc	r31, r29
     ea0:	eb 0d       	add	r30, r11
     ea2:	f1 1d       	adc	r31, r1
     ea4:	80 83       	st	Z, r24
     ea6:	b3 94       	inc	r11
     ea8:	b3 94       	inc	r11
     eaa:	e1 e0       	ldi	r30, 0x01	; 1
     eac:	f0 e0       	ldi	r31, 0x00	; 0
     eae:	ec 0f       	add	r30, r28
     eb0:	fd 1f       	adc	r31, r29
     eb2:	ee 0d       	add	r30, r14
     eb4:	f1 1d       	adc	r31, r1
     eb6:	90 83       	st	Z, r25
     eb8:	e1 e0       	ldi	r30, 0x01	; 1
     eba:	f0 e0       	ldi	r31, 0x00	; 0
     ebc:	ec 0f       	add	r30, r28
     ebe:	fd 1f       	adc	r31, r29
     ec0:	eb 0d       	add	r30, r11
     ec2:	f1 1d       	adc	r31, r1
     ec4:	10 82       	st	Z, r1
     ec6:	e0 91 b3 02 	lds	r30, 0x02B3	; 0x8002b3 <g_mod1_Serial_getc>
     eca:	f0 91 b4 02 	lds	r31, 0x02B4	; 0x8002b4 <g_mod1_Serial_getc+0x1>
     ece:	19 95       	eicall
     ed0:	81 15       	cp	r24, r1
     ed2:	91 40       	sbci	r25, 0x01	; 1
     ed4:	c1 f7       	brne	.-16     	; 0xec6 <Modbus_mster_transaction+0x99a>
     ed6:	e0 91 b9 02 	lds	r30, 0x02B9	; 0x8002b9 <g_mod1_pre_transmission>
     eda:	f0 91 ba 02 	lds	r31, 0x02BA	; 0x8002ba <g_mod1_pre_transmission+0x1>
     ede:	30 97       	sbiw	r30, 0x00	; 0
     ee0:	09 f0       	breq	.+2      	; 0xee4 <Modbus_mster_transaction+0x9b8>
     ee2:	19 95       	eicall
     ee4:	bb 20       	and	r11, r11
     ee6:	a1 f0       	breq	.+40     	; 0xf10 <Modbus_mster_transaction+0x9e4>
     ee8:	8e 01       	movw	r16, r28
     eea:	0f 5f       	subi	r16, 0xFF	; 255
     eec:	1f 4f       	sbci	r17, 0xFF	; 255
     eee:	f1 2c       	mov	r15, r1
     ef0:	ef ef       	ldi	r30, 0xFF	; 255
     ef2:	ee 1a       	sub	r14, r30
     ef4:	fe 0a       	sbc	r15, r30
     ef6:	e0 0e       	add	r14, r16
     ef8:	f1 1e       	adc	r15, r17
     efa:	e0 91 b5 02 	lds	r30, 0x02B5	; 0x8002b5 <g_mod1_Serial_putc>
     efe:	f0 91 b6 02 	lds	r31, 0x02B6	; 0x8002b6 <g_mod1_Serial_putc+0x1>
     f02:	d8 01       	movw	r26, r16
     f04:	8d 91       	ld	r24, X+
     f06:	8d 01       	movw	r16, r26
     f08:	19 95       	eicall
     f0a:	e0 16       	cp	r14, r16
     f0c:	f1 06       	cpc	r15, r17
     f0e:	a9 f7       	brne	.-22     	; 0xefa <Modbus_mster_transaction+0x9ce>
     f10:	e0 91 af 02 	lds	r30, 0x02AF	; 0x8002af <g_mod1_Serial_flush>
     f14:	f0 91 b0 02 	lds	r31, 0x02B0	; 0x8002b0 <g_mod1_Serial_flush+0x1>
     f18:	19 95       	eicall
     f1a:	e0 91 b7 02 	lds	r30, 0x02B7	; 0x8002b7 <g_mod1_post_transmission>
     f1e:	f0 91 b8 02 	lds	r31, 0x02B8	; 0x8002b8 <g_mod1_post_transmission+0x1>
     f22:	30 97       	sbiw	r30, 0x00	; 0
     f24:	09 f0       	breq	.+2      	; 0xf28 <Modbus_mster_transaction+0x9fc>
     f26:	19 95       	eicall
     f28:	0e 94 68 1f 	call	0x3ed0	; 0x3ed0 <Get_millis>
     f2c:	4b 01       	movw	r8, r22
     f2e:	5c 01       	movw	r10, r24
     f30:	08 e0       	ldi	r16, 0x08	; 8
     f32:	10 e0       	ldi	r17, 0x00	; 0
     f34:	ed 2c       	mov	r14, r13
     f36:	f1 2c       	mov	r15, r1
     f38:	e0 91 b1 02 	lds	r30, 0x02B1	; 0x8002b1 <g_mod1_Serial_available>
     f3c:	f0 91 b2 02 	lds	r31, 0x02B2	; 0x8002b2 <g_mod1_Serial_available+0x1>
     f40:	19 95       	eicall
     f42:	89 2b       	or	r24, r25
     f44:	91 f0       	breq	.+36     	; 0xf6a <Modbus_mster_transaction+0xa3e>
     f46:	dd 24       	eor	r13, r13
     f48:	d3 94       	inc	r13
     f4a:	d1 0e       	add	r13, r17
     f4c:	e0 91 b3 02 	lds	r30, 0x02B3	; 0x8002b3 <g_mod1_Serial_getc>
     f50:	f0 91 b4 02 	lds	r31, 0x02B4	; 0x8002b4 <g_mod1_Serial_getc+0x1>
     f54:	19 95       	eicall
     f56:	e1 e0       	ldi	r30, 0x01	; 1
     f58:	f0 e0       	ldi	r31, 0x00	; 0
     f5a:	ec 0f       	add	r30, r28
     f5c:	fd 1f       	adc	r31, r29
     f5e:	e1 0f       	add	r30, r17
     f60:	f1 1d       	adc	r31, r1
     f62:	80 83       	st	Z, r24
     f64:	01 50       	subi	r16, 0x01	; 1
     f66:	1d 2d       	mov	r17, r13
     f68:	07 c0       	rjmp	.+14     	; 0xf78 <Modbus_mster_transaction+0xa4c>
     f6a:	e0 91 bb 02 	lds	r30, 0x02BB	; 0x8002bb <g_mod1_idle>
     f6e:	f0 91 bc 02 	lds	r31, 0x02BC	; 0x8002bc <g_mod1_idle+0x1>
     f72:	30 97       	sbiw	r30, 0x00	; 0
     f74:	09 f0       	breq	.+2      	; 0xf78 <Modbus_mster_transaction+0xa4c>
     f76:	19 95       	eicall
     f78:	15 30       	cpi	r17, 0x05	; 5
     f7a:	51 f5       	brne	.+84     	; 0xfd0 <Modbus_mster_transaction+0xaa4>
     f7c:	99 81       	ldd	r25, Y+1	; 0x01
     f7e:	80 91 c8 03 	lds	r24, 0x03C8	; 0x8003c8 <g_mod1_slave>
     f82:	98 13       	cpse	r25, r24
     f84:	3c c1       	rjmp	.+632    	; 0x11fe <Modbus_mster_transaction+0xcd2>
     f86:	8a 81       	ldd	r24, Y+2	; 0x02
     f88:	28 2f       	mov	r18, r24
     f8a:	2f 77       	andi	r18, 0x7F	; 127
     f8c:	30 e0       	ldi	r19, 0x00	; 0
     f8e:	2e 15       	cp	r18, r14
     f90:	3f 05       	cpc	r19, r15
     f92:	09 f0       	breq	.+2      	; 0xf96 <Modbus_mster_transaction+0xa6a>
     f94:	36 c1       	rjmp	.+620    	; 0x1202 <Modbus_mster_transaction+0xcd6>
     f96:	88 23       	and	r24, r24
     f98:	24 f4       	brge	.+8      	; 0xfa2 <Modbus_mster_transaction+0xa76>
     f9a:	8b 81       	ldd	r24, Y+3	; 0x03
     f9c:	88 23       	and	r24, r24
     f9e:	b1 f1       	breq	.+108    	; 0x100c <Modbus_mster_transaction+0xae0>
     fa0:	bf c0       	rjmp	.+382    	; 0x1120 <Modbus_mster_transaction+0xbf4>
     fa2:	81 31       	cpi	r24, 0x11	; 17
     fa4:	48 f4       	brcc	.+18     	; 0xfb8 <Modbus_mster_transaction+0xa8c>
     fa6:	8f 30       	cpi	r24, 0x0F	; 15
     fa8:	70 f4       	brcc	.+28     	; 0xfc6 <Modbus_mster_transaction+0xa9a>
     faa:	81 30       	cpi	r24, 0x01	; 1
     fac:	88 f0       	brcs	.+34     	; 0xfd0 <Modbus_mster_transaction+0xaa4>
     fae:	85 30       	cpi	r24, 0x05	; 5
     fb0:	60 f0       	brcs	.+24     	; 0xfca <Modbus_mster_transaction+0xa9e>
     fb2:	87 30       	cpi	r24, 0x07	; 7
     fb4:	40 f0       	brcs	.+16     	; 0xfc6 <Modbus_mster_transaction+0xa9a>
     fb6:	0c c0       	rjmp	.+24     	; 0xfd0 <Modbus_mster_transaction+0xaa4>
     fb8:	87 31       	cpi	r24, 0x17	; 23
     fba:	39 f0       	breq	.+14     	; 0xfca <Modbus_mster_transaction+0xa9e>
     fbc:	8f 3f       	cpi	r24, 0xFF	; 255
     fbe:	19 f0       	breq	.+6      	; 0xfc6 <Modbus_mster_transaction+0xa9a>
     fc0:	86 31       	cpi	r24, 0x16	; 22
     fc2:	29 f0       	breq	.+10     	; 0xfce <Modbus_mster_transaction+0xaa2>
     fc4:	05 c0       	rjmp	.+10     	; 0xfd0 <Modbus_mster_transaction+0xaa4>
     fc6:	03 e0       	ldi	r16, 0x03	; 3
     fc8:	03 c0       	rjmp	.+6      	; 0xfd0 <Modbus_mster_transaction+0xaa4>
     fca:	0b 81       	ldd	r16, Y+3	; 0x03
     fcc:	01 c0       	rjmp	.+2      	; 0xfd0 <Modbus_mster_transaction+0xaa4>
     fce:	05 e0       	ldi	r16, 0x05	; 5
     fd0:	0e 94 68 1f 	call	0x3ed0	; 0x3ed0 <Get_millis>
     fd4:	dc 01       	movw	r26, r24
     fd6:	cb 01       	movw	r24, r22
     fd8:	88 19       	sub	r24, r8
     fda:	99 09       	sbc	r25, r9
     fdc:	aa 09       	sbc	r26, r10
     fde:	bb 09       	sbc	r27, r11
     fe0:	81 3d       	cpi	r24, 0xD1	; 209
     fe2:	97 40       	sbci	r25, 0x07	; 7
     fe4:	a1 05       	cpc	r26, r1
     fe6:	b1 05       	cpc	r27, r1
     fe8:	08 f0       	brcs	.+2      	; 0xfec <Modbus_mster_transaction+0xac0>
     fea:	fb c0       	rjmp	.+502    	; 0x11e2 <Modbus_mster_transaction+0xcb6>
     fec:	fe c0       	rjmp	.+508    	; 0x11ea <Modbus_mster_transaction+0xcbe>
     fee:	81 11       	cpse	r24, r1
     ff0:	97 c0       	rjmp	.+302    	; 0x1120 <Modbus_mster_transaction+0xbf4>
     ff2:	15 30       	cpi	r17, 0x05	; 5
     ff4:	08 f4       	brcc	.+2      	; 0xff8 <Modbus_mster_transaction+0xacc>
     ff6:	df c0       	rjmp	.+446    	; 0x11b6 <Modbus_mster_transaction+0xc8a>
     ff8:	01 2f       	mov	r16, r17
     ffa:	10 e0       	ldi	r17, 0x00	; 0
     ffc:	78 01       	movw	r14, r16
     ffe:	f2 e0       	ldi	r31, 0x02	; 2
    1000:	ef 1a       	sub	r14, r31
    1002:	f1 08       	sbc	r15, r1
    1004:	1e 14       	cp	r1, r14
    1006:	1f 04       	cpc	r1, r15
    1008:	44 f0       	brlt	.+16     	; 0x101a <Modbus_mster_transaction+0xaee>
    100a:	c4 c0       	rjmp	.+392    	; 0x1194 <Modbus_mster_transaction+0xc68>
    100c:	0f 2e       	mov	r0, r31
    100e:	f3 e0       	ldi	r31, 0x03	; 3
    1010:	ef 2e       	mov	r14, r31
    1012:	f1 2c       	mov	r15, r1
    1014:	f0 2d       	mov	r31, r0
    1016:	05 e0       	ldi	r16, 0x05	; 5
    1018:	10 e0       	ldi	r17, 0x00	; 0
    101a:	20 e0       	ldi	r18, 0x00	; 0
    101c:	30 e0       	ldi	r19, 0x00	; 0
    101e:	8f ef       	ldi	r24, 0xFF	; 255
    1020:	9f ef       	ldi	r25, 0xFF	; 255
    1022:	d1 2c       	mov	r13, r1
    1024:	e1 e0       	ldi	r30, 0x01	; 1
    1026:	f0 e0       	ldi	r31, 0x00	; 0
    1028:	ec 0f       	add	r30, r28
    102a:	fd 1f       	adc	r31, r29
    102c:	e2 0f       	add	r30, r18
    102e:	f3 1f       	adc	r31, r19
    1030:	60 81       	ld	r22, Z
    1032:	0e 94 47 1f 	call	0x3e8e	; 0x3e8e <crc16_update>
    1036:	d3 94       	inc	r13
    1038:	2d 2d       	mov	r18, r13
    103a:	30 e0       	ldi	r19, 0x00	; 0
    103c:	2e 15       	cp	r18, r14
    103e:	3f 05       	cpc	r19, r15
    1040:	8c f3       	brlt	.-30     	; 0x1024 <Modbus_mster_transaction+0xaf8>
    1042:	aa c0       	rjmp	.+340    	; 0x1198 <Modbus_mster_transaction+0xc6c>
    1044:	89 2f       	mov	r24, r25
    1046:	99 27       	eor	r25, r25
    1048:	fe 01       	movw	r30, r28
    104a:	e0 0f       	add	r30, r16
    104c:	f1 1f       	adc	r31, r17
    104e:	20 81       	ld	r18, Z
    1050:	30 e0       	ldi	r19, 0x00	; 0
    1052:	82 17       	cp	r24, r18
    1054:	93 07       	cpc	r25, r19
    1056:	09 f0       	breq	.+2      	; 0x105a <Modbus_mster_transaction+0xb2e>
    1058:	ac c0       	rjmp	.+344    	; 0x11b2 <Modbus_mster_transaction+0xc86>
    105a:	ad c0       	rjmp	.+346    	; 0x11b6 <Modbus_mster_transaction+0xc8a>
    105c:	8b 81       	ldd	r24, Y+3	; 0x03
    105e:	86 95       	lsr	r24
    1060:	e1 f5       	brne	.+120    	; 0x10da <Modbus_mster_transaction+0xbae>
    1062:	5e c0       	rjmp	.+188    	; 0x1120 <Modbus_mster_transaction+0xbf4>
    1064:	6b 81       	ldd	r22, Y+3	; 0x03
    1066:	86 2f       	mov	r24, r22
    1068:	86 95       	lsr	r24
    106a:	09 f4       	brne	.+2      	; 0x106e <Modbus_mster_transaction+0xb42>
    106c:	b2 c0       	rjmp	.+356    	; 0x11d2 <Modbus_mster_transaction+0xca6>
    106e:	fe 01       	movw	r30, r28
    1070:	31 96       	adiw	r30, 0x01	; 1
    1072:	40 e0       	ldi	r20, 0x00	; 0
    1074:	50 e0       	ldi	r21, 0x00	; 0
    1076:	90 e0       	ldi	r25, 0x00	; 0
    1078:	90 34       	cpi	r25, 0x40	; 64
    107a:	70 f4       	brcc	.+28     	; 0x1098 <Modbus_mster_transaction+0xb6c>
    107c:	24 81       	ldd	r18, Z+4	; 0x04
    107e:	30 e0       	ldi	r19, 0x00	; 0
    1080:	32 2f       	mov	r19, r18
    1082:	22 27       	eor	r18, r18
    1084:	73 81       	ldd	r23, Z+3	; 0x03
    1086:	27 2b       	or	r18, r23
    1088:	da 01       	movw	r26, r20
    108a:	aa 0f       	add	r26, r26
    108c:	bb 1f       	adc	r27, r27
    108e:	ac 5b       	subi	r26, 0xBC	; 188
    1090:	bc 4f       	sbci	r27, 0xFC	; 252
    1092:	11 96       	adiw	r26, 0x01	; 1
    1094:	3c 93       	st	X, r19
    1096:	2e 93       	st	-X, r18
    1098:	9f 5f       	subi	r25, 0xFF	; 255
    109a:	4f 5f       	subi	r20, 0xFF	; 255
    109c:	5f 4f       	sbci	r21, 0xFF	; 255
    109e:	32 96       	adiw	r30, 0x02	; 2
    10a0:	98 13       	cpse	r25, r24
    10a2:	ea cf       	rjmp	.-44     	; 0x1078 <Modbus_mster_transaction+0xb4c>
    10a4:	9f ef       	ldi	r25, 0xFF	; 255
    10a6:	98 0f       	add	r25, r24
    10a8:	90 93 bd 02 	sts	0x02BD, r25	; 0x8002bd <g_mod1_response_buffer_length>
    10ac:	60 ff       	sbrs	r22, 0
    10ae:	35 c0       	rjmp	.+106    	; 0x111a <Modbus_mster_transaction+0xbee>
    10b0:	80 34       	cpi	r24, 0x40	; 64
    10b2:	70 f4       	brcc	.+28     	; 0x10d0 <Modbus_mster_transaction+0xba4>
    10b4:	28 2f       	mov	r18, r24
    10b6:	30 e0       	ldi	r19, 0x00	; 0
    10b8:	22 0f       	add	r18, r18
    10ba:	33 1f       	adc	r19, r19
    10bc:	fe 01       	movw	r30, r28
    10be:	e2 0f       	add	r30, r18
    10c0:	f3 1f       	adc	r31, r19
    10c2:	44 81       	ldd	r20, Z+4	; 0x04
    10c4:	50 e0       	ldi	r21, 0x00	; 0
    10c6:	f9 01       	movw	r30, r18
    10c8:	ec 5b       	subi	r30, 0xBC	; 188
    10ca:	fc 4f       	sbci	r31, 0xFC	; 252
    10cc:	51 83       	std	Z+1, r21	; 0x01
    10ce:	40 83       	st	Z, r20
    10d0:	8f 5f       	subi	r24, 0xFF	; 255
    10d2:	80 93 bd 02 	sts	0x02BD, r24	; 0x8002bd <g_mod1_response_buffer_length>
    10d6:	80 e0       	ldi	r24, 0x00	; 0
    10d8:	23 c0       	rjmp	.+70     	; 0x1120 <Modbus_mster_transaction+0xbf4>
    10da:	fe 01       	movw	r30, r28
    10dc:	31 96       	adiw	r30, 0x01	; 1
    10de:	40 e0       	ldi	r20, 0x00	; 0
    10e0:	50 e0       	ldi	r21, 0x00	; 0
    10e2:	90 e0       	ldi	r25, 0x00	; 0
    10e4:	90 34       	cpi	r25, 0x40	; 64
    10e6:	70 f4       	brcc	.+28     	; 0x1104 <Modbus_mster_transaction+0xbd8>
    10e8:	23 81       	ldd	r18, Z+3	; 0x03
    10ea:	30 e0       	ldi	r19, 0x00	; 0
    10ec:	32 2f       	mov	r19, r18
    10ee:	22 27       	eor	r18, r18
    10f0:	64 81       	ldd	r22, Z+4	; 0x04
    10f2:	26 2b       	or	r18, r22
    10f4:	da 01       	movw	r26, r20
    10f6:	aa 0f       	add	r26, r26
    10f8:	bb 1f       	adc	r27, r27
    10fa:	ac 5b       	subi	r26, 0xBC	; 188
    10fc:	bc 4f       	sbci	r27, 0xFC	; 252
    10fe:	11 96       	adiw	r26, 0x01	; 1
    1100:	3c 93       	st	X, r19
    1102:	2e 93       	st	-X, r18
    1104:	9f 5f       	subi	r25, 0xFF	; 255
    1106:	4f 5f       	subi	r20, 0xFF	; 255
    1108:	5f 4f       	sbci	r21, 0xFF	; 255
    110a:	32 96       	adiw	r30, 0x02	; 2
    110c:	98 13       	cpse	r25, r24
    110e:	ea cf       	rjmp	.-44     	; 0x10e4 <Modbus_mster_transaction+0xbb8>
    1110:	81 50       	subi	r24, 0x01	; 1
    1112:	80 93 bd 02 	sts	0x02BD, r24	; 0x8002bd <g_mod1_response_buffer_length>
    1116:	80 e0       	ldi	r24, 0x00	; 0
    1118:	03 c0       	rjmp	.+6      	; 0x1120 <Modbus_mster_transaction+0xbf4>
    111a:	80 e0       	ldi	r24, 0x00	; 0
    111c:	01 c0       	rjmp	.+2      	; 0x1120 <Modbus_mster_transaction+0xbf4>
    111e:	80 e0       	ldi	r24, 0x00	; 0
    1120:	10 92 bf 02 	sts	0x02BF, r1	; 0x8002bf <g_mod1_transmit_buffer_index>
    1124:	10 92 be 02 	sts	0x02BE, r1	; 0x8002be <g_mod1_response_buffer_index>
    1128:	70 c0       	rjmp	.+224    	; 0x120a <Modbus_mster_transaction+0xcde>
    112a:	84 ee       	ldi	r24, 0xE4	; 228
    112c:	6e c0       	rjmp	.+220    	; 0x120a <Modbus_mster_transaction+0xcde>
    112e:	03 e0       	ldi	r16, 0x03	; 3
    1130:	0e 94 68 1f 	call	0x3ed0	; 0x3ed0 <Get_millis>
    1134:	dc 01       	movw	r26, r24
    1136:	cb 01       	movw	r24, r22
    1138:	88 19       	sub	r24, r8
    113a:	99 09       	sbc	r25, r9
    113c:	aa 09       	sbc	r26, r10
    113e:	bb 09       	sbc	r27, r11
    1140:	81 3d       	cpi	r24, 0xD1	; 209
    1142:	97 40       	sbci	r25, 0x07	; 7
    1144:	a1 05       	cpc	r26, r1
    1146:	b1 05       	cpc	r27, r1
    1148:	08 f4       	brcc	.+2      	; 0x114c <Modbus_mster_transaction+0xc20>
    114a:	01 cc       	rjmp	.-2046   	; 0x94e <Modbus_mster_transaction+0x422>
    114c:	5b cc       	rjmp	.-1866   	; 0xa04 <Modbus_mster_transaction+0x4d8>
    114e:	8f ef       	ldi	r24, 0xFF	; 255
    1150:	9f ef       	ldi	r25, 0xFF	; 255
    1152:	fe 01       	movw	r30, r28
    1154:	ee 0d       	add	r30, r14
    1156:	ff 1d       	adc	r31, r15
    1158:	21 81       	ldd	r18, Z+1	; 0x01
    115a:	30 e0       	ldi	r19, 0x00	; 0
    115c:	ac 01       	movw	r20, r24
    115e:	55 27       	eor	r21, r21
    1160:	42 17       	cp	r20, r18
    1162:	53 07       	cpc	r21, r19
    1164:	09 f4       	brne	.+2      	; 0x1168 <Modbus_mster_transaction+0xc3c>
    1166:	84 cc       	rjmp	.-1784   	; 0xa70 <Modbus_mster_transaction+0x544>
    1168:	83 ee       	ldi	r24, 0xE3	; 227
    116a:	f1 cc       	rjmp	.-1566   	; 0xb4e <Modbus_mster_transaction+0x622>
    116c:	83 ee       	ldi	r24, 0xE3	; 227
    116e:	ef cc       	rjmp	.-1570   	; 0xb4e <Modbus_mster_transaction+0x622>
    1170:	8a 81       	ldd	r24, Y+2	; 0x02
    1172:	85 30       	cpi	r24, 0x05	; 5
    1174:	38 f4       	brcc	.+14     	; 0x1184 <Modbus_mster_transaction+0xc58>
    1176:	83 30       	cpi	r24, 0x03	; 3
    1178:	08 f0       	brcs	.+2      	; 0x117c <Modbus_mster_transaction+0xc50>
    117a:	86 cc       	rjmp	.-1780   	; 0xa88 <Modbus_mster_transaction+0x55c>
    117c:	81 30       	cpi	r24, 0x01	; 1
    117e:	08 f0       	brcs	.+2      	; 0x1182 <Modbus_mster_transaction+0xc56>
    1180:	88 cc       	rjmp	.-1776   	; 0xa92 <Modbus_mster_transaction+0x566>
    1182:	e4 cc       	rjmp	.-1592   	; 0xb4c <Modbus_mster_transaction+0x620>
    1184:	87 31       	cpi	r24, 0x17	; 23
    1186:	09 f4       	brne	.+2      	; 0x118a <Modbus_mster_transaction+0xc5e>
    1188:	7f cc       	rjmp	.-1794   	; 0xa88 <Modbus_mster_transaction+0x55c>
    118a:	e0 cc       	rjmp	.-1600   	; 0xb4c <Modbus_mster_transaction+0x620>
    118c:	70 fd       	sbrc	r23, 0
    118e:	a9 cc       	rjmp	.-1710   	; 0xae2 <Modbus_mster_transaction+0x5b6>
    1190:	80 e0       	ldi	r24, 0x00	; 0
    1192:	dd cc       	rjmp	.-1606   	; 0xb4e <Modbus_mster_transaction+0x622>
    1194:	8f ef       	ldi	r24, 0xFF	; 255
    1196:	9f ef       	ldi	r25, 0xFF	; 255
    1198:	fe 01       	movw	r30, r28
    119a:	ee 0d       	add	r30, r14
    119c:	ff 1d       	adc	r31, r15
    119e:	21 81       	ldd	r18, Z+1	; 0x01
    11a0:	30 e0       	ldi	r19, 0x00	; 0
    11a2:	ac 01       	movw	r20, r24
    11a4:	55 27       	eor	r21, r21
    11a6:	42 17       	cp	r20, r18
    11a8:	53 07       	cpc	r21, r19
    11aa:	09 f4       	brne	.+2      	; 0x11ae <Modbus_mster_transaction+0xc82>
    11ac:	4b cf       	rjmp	.-362    	; 0x1044 <Modbus_mster_transaction+0xb18>
    11ae:	83 ee       	ldi	r24, 0xE3	; 227
    11b0:	b7 cf       	rjmp	.-146    	; 0x1120 <Modbus_mster_transaction+0xbf4>
    11b2:	83 ee       	ldi	r24, 0xE3	; 227
    11b4:	b5 cf       	rjmp	.-150    	; 0x1120 <Modbus_mster_transaction+0xbf4>
    11b6:	8a 81       	ldd	r24, Y+2	; 0x02
    11b8:	85 30       	cpi	r24, 0x05	; 5
    11ba:	38 f4       	brcc	.+14     	; 0x11ca <Modbus_mster_transaction+0xc9e>
    11bc:	83 30       	cpi	r24, 0x03	; 3
    11be:	08 f0       	brcs	.+2      	; 0x11c2 <Modbus_mster_transaction+0xc96>
    11c0:	4d cf       	rjmp	.-358    	; 0x105c <Modbus_mster_transaction+0xb30>
    11c2:	81 30       	cpi	r24, 0x01	; 1
    11c4:	08 f0       	brcs	.+2      	; 0x11c8 <Modbus_mster_transaction+0xc9c>
    11c6:	4e cf       	rjmp	.-356    	; 0x1064 <Modbus_mster_transaction+0xb38>
    11c8:	aa cf       	rjmp	.-172    	; 0x111e <Modbus_mster_transaction+0xbf2>
    11ca:	87 31       	cpi	r24, 0x17	; 23
    11cc:	09 f4       	brne	.+2      	; 0x11d0 <Modbus_mster_transaction+0xca4>
    11ce:	46 cf       	rjmp	.-372    	; 0x105c <Modbus_mster_transaction+0xb30>
    11d0:	a6 cf       	rjmp	.-180    	; 0x111e <Modbus_mster_transaction+0xbf2>
    11d2:	60 fd       	sbrc	r22, 0
    11d4:	6f cf       	rjmp	.-290    	; 0x10b4 <Modbus_mster_transaction+0xb88>
    11d6:	80 e0       	ldi	r24, 0x00	; 0
    11d8:	a3 cf       	rjmp	.-186    	; 0x1120 <Modbus_mster_transaction+0xbf4>
    11da:	01 11       	cpse	r16, r1
    11dc:	b8 cb       	rjmp	.-2192   	; 0x94e <Modbus_mster_transaction+0x422>
    11de:	80 e0       	ldi	r24, 0x00	; 0
    11e0:	19 cc       	rjmp	.-1998   	; 0xa14 <Modbus_mster_transaction+0x4e8>
    11e2:	01 11       	cpse	r16, r1
    11e4:	10 c0       	rjmp	.+32     	; 0x1206 <Modbus_mster_transaction+0xcda>
    11e6:	82 ee       	ldi	r24, 0xE2	; 226
    11e8:	02 cf       	rjmp	.-508    	; 0xfee <Modbus_mster_transaction+0xac2>
    11ea:	01 11       	cpse	r16, r1
    11ec:	a5 ce       	rjmp	.-694    	; 0xf38 <Modbus_mster_transaction+0xa0c>
    11ee:	80 e0       	ldi	r24, 0x00	; 0
    11f0:	fe ce       	rjmp	.-516    	; 0xfee <Modbus_mster_transaction+0xac2>
    11f2:	80 ee       	ldi	r24, 0xE0	; 224
    11f4:	ac cc       	rjmp	.-1704   	; 0xb4e <Modbus_mster_transaction+0x622>
    11f6:	81 ee       	ldi	r24, 0xE1	; 225
    11f8:	aa cc       	rjmp	.-1708   	; 0xb4e <Modbus_mster_transaction+0x622>
    11fa:	82 ee       	ldi	r24, 0xE2	; 226
    11fc:	a8 cc       	rjmp	.-1712   	; 0xb4e <Modbus_mster_transaction+0x622>
    11fe:	80 ee       	ldi	r24, 0xE0	; 224
    1200:	8f cf       	rjmp	.-226    	; 0x1120 <Modbus_mster_transaction+0xbf4>
    1202:	81 ee       	ldi	r24, 0xE1	; 225
    1204:	8d cf       	rjmp	.-230    	; 0x1120 <Modbus_mster_transaction+0xbf4>
    1206:	82 ee       	ldi	r24, 0xE2	; 226
    1208:	8b cf       	rjmp	.-234    	; 0x1120 <Modbus_mster_transaction+0xbf4>
    120a:	d3 95       	inc	r29
    120c:	0f b6       	in	r0, 0x3f	; 63
    120e:	f8 94       	cli
    1210:	de bf       	out	0x3e, r29	; 62
    1212:	0f be       	out	0x3f, r0	; 63
    1214:	cd bf       	out	0x3d, r28	; 61
    1216:	df 91       	pop	r29
    1218:	cf 91       	pop	r28
    121a:	1f 91       	pop	r17
    121c:	0f 91       	pop	r16
    121e:	ff 90       	pop	r15
    1220:	ef 90       	pop	r14
    1222:	df 90       	pop	r13
    1224:	bf 90       	pop	r11
    1226:	af 90       	pop	r10
    1228:	9f 90       	pop	r9
    122a:	8f 90       	pop	r8
    122c:	08 95       	ret

0000122e <Modbus_init>:
    122e:	fb 01       	movw	r30, r22
    1230:	81 11       	cpse	r24, r1
    1232:	86 c0       	rjmp	.+268    	; 0x1340 <Modbus_init+0x112>
    1234:	80 81       	ld	r24, Z
    1236:	80 93 e2 04 	sts	0x04E2, r24	; 0x8004e2 <g_mod0_slave>
    123a:	41 81       	ldd	r20, Z+1	; 0x01
    123c:	62 81       	ldd	r22, Z+2	; 0x02
    123e:	73 81       	ldd	r23, Z+3	; 0x03
    1240:	84 81       	ldd	r24, Z+4	; 0x04
    1242:	95 81       	ldd	r25, Z+5	; 0x05
    1244:	26 81       	ldd	r18, Z+6	; 0x06
    1246:	37 81       	ldd	r19, Z+7	; 0x07
    1248:	30 93 d4 03 	sts	0x03D4, r19	; 0x8003d4 <g_mod0_pre_transmission+0x1>
    124c:	20 93 d3 03 	sts	0x03D3, r18	; 0x8003d3 <g_mod0_pre_transmission>
    1250:	20 85       	ldd	r18, Z+8	; 0x08
    1252:	31 85       	ldd	r19, Z+9	; 0x09
    1254:	30 93 d2 03 	sts	0x03D2, r19	; 0x8003d2 <g_mod0_post_transmission+0x1>
    1258:	20 93 d1 03 	sts	0x03D1, r18	; 0x8003d1 <g_mod0_post_transmission>
    125c:	10 92 d6 03 	sts	0x03D6, r1	; 0x8003d6 <g_mod0_idle+0x1>
    1260:	10 92 d5 03 	sts	0x03D5, r1	; 0x8003d5 <g_mod0_idle>
    1264:	10 92 d8 03 	sts	0x03D8, r1	; 0x8003d8 <g_mod0_response_buffer_index>
    1268:	10 92 d7 03 	sts	0x03D7, r1	; 0x8003d7 <g_mod0_response_buffer_length>
    126c:	41 30       	cpi	r20, 0x01	; 1
    126e:	09 f5       	brne	.+66     	; 0x12b2 <Modbus_init+0x84>
    1270:	20 91 ae 02 	lds	r18, 0x02AE	; 0x8002ae <UART1_used.1979>
    1274:	21 11       	cpse	r18, r1
    1276:	c8 c0       	rjmp	.+400    	; 0x1408 <Modbus_init+0x1da>
    1278:	21 e0       	ldi	r18, 0x01	; 1
    127a:	20 93 ae 02 	sts	0x02AE, r18	; 0x8002ae <UART1_used.1979>
    127e:	eb d3       	rcall	.+2006   	; 0x1a56 <UART1_init>
    1280:	89 eb       	ldi	r24, 0xB9	; 185
    1282:	9d e0       	ldi	r25, 0x0D	; 13
    1284:	90 93 ca 03 	sts	0x03CA, r25	; 0x8003ca <g_mod0_Serial_available+0x1>
    1288:	80 93 c9 03 	sts	0x03C9, r24	; 0x8003c9 <g_mod0_Serial_available>
    128c:	87 ec       	ldi	r24, 0xC7	; 199
    128e:	9d e0       	ldi	r25, 0x0D	; 13
    1290:	90 93 cc 03 	sts	0x03CC, r25	; 0x8003cc <g_mod0_Serial_flush+0x1>
    1294:	80 93 cb 03 	sts	0x03CB, r24	; 0x8003cb <g_mod0_Serial_flush>
    1298:	80 e8       	ldi	r24, 0x80	; 128
    129a:	9d e0       	ldi	r25, 0x0D	; 13
    129c:	90 93 ce 03 	sts	0x03CE, r25	; 0x8003ce <g_mod0_Serial_getc+0x1>
    12a0:	80 93 cd 03 	sts	0x03CD, r24	; 0x8003cd <g_mod0_Serial_getc>
    12a4:	80 ea       	ldi	r24, 0xA0	; 160
    12a6:	9d e0       	ldi	r25, 0x0D	; 13
    12a8:	90 93 d0 03 	sts	0x03D0, r25	; 0x8003d0 <g_mod0_Serial_putc+0x1>
    12ac:	80 93 cf 03 	sts	0x03CF, r24	; 0x8003cf <g_mod0_Serial_putc>
    12b0:	08 95       	ret
    12b2:	42 30       	cpi	r20, 0x02	; 2
    12b4:	09 f5       	brne	.+66     	; 0x12f8 <Modbus_init+0xca>
    12b6:	20 91 ad 02 	lds	r18, 0x02AD	; 0x8002ad <UART2_used.1980>
    12ba:	21 11       	cpse	r18, r1
    12bc:	a5 c0       	rjmp	.+330    	; 0x1408 <Modbus_init+0x1da>
    12be:	21 e0       	ldi	r18, 0x01	; 1
    12c0:	20 93 ad 02 	sts	0x02AD, r18	; 0x8002ad <UART2_used.1980>
    12c4:	d7 d4       	rcall	.+2478   	; 0x1c74 <UART2_init>
    12c6:	85 ec       	ldi	r24, 0xC5	; 197
    12c8:	9e e0       	ldi	r25, 0x0E	; 14
    12ca:	90 93 ca 03 	sts	0x03CA, r25	; 0x8003ca <g_mod0_Serial_available+0x1>
    12ce:	80 93 c9 03 	sts	0x03C9, r24	; 0x8003c9 <g_mod0_Serial_available>
    12d2:	83 ed       	ldi	r24, 0xD3	; 211
    12d4:	9e e0       	ldi	r25, 0x0E	; 14
    12d6:	90 93 cc 03 	sts	0x03CC, r25	; 0x8003cc <g_mod0_Serial_flush+0x1>
    12da:	80 93 cb 03 	sts	0x03CB, r24	; 0x8003cb <g_mod0_Serial_flush>
    12de:	8f e8       	ldi	r24, 0x8F	; 143
    12e0:	9e e0       	ldi	r25, 0x0E	; 14
    12e2:	90 93 ce 03 	sts	0x03CE, r25	; 0x8003ce <g_mod0_Serial_getc+0x1>
    12e6:	80 93 cd 03 	sts	0x03CD, r24	; 0x8003cd <g_mod0_Serial_getc>
    12ea:	8c ea       	ldi	r24, 0xAC	; 172
    12ec:	9e e0       	ldi	r25, 0x0E	; 14
    12ee:	90 93 d0 03 	sts	0x03D0, r25	; 0x8003d0 <g_mod0_Serial_putc+0x1>
    12f2:	80 93 cf 03 	sts	0x03CF, r24	; 0x8003cf <g_mod0_Serial_putc>
    12f6:	08 95       	ret
    12f8:	43 30       	cpi	r20, 0x03	; 3
    12fa:	09 f0       	breq	.+2      	; 0x12fe <Modbus_init+0xd0>
    12fc:	85 c0       	rjmp	.+266    	; 0x1408 <Modbus_init+0x1da>
    12fe:	20 91 ac 02 	lds	r18, 0x02AC	; 0x8002ac <UART3_used.1981>
    1302:	21 11       	cpse	r18, r1
    1304:	81 c0       	rjmp	.+258    	; 0x1408 <Modbus_init+0x1da>
    1306:	21 e0       	ldi	r18, 0x01	; 1
    1308:	20 93 ac 02 	sts	0x02AC, r18	; 0x8002ac <UART3_used.1981>
    130c:	bf d5       	rcall	.+2942   	; 0x1e8c <UART3_init>
    130e:	81 ed       	ldi	r24, 0xD1	; 209
    1310:	9f e0       	ldi	r25, 0x0F	; 15
    1312:	90 93 ca 03 	sts	0x03CA, r25	; 0x8003ca <g_mod0_Serial_available+0x1>
    1316:	80 93 c9 03 	sts	0x03C9, r24	; 0x8003c9 <g_mod0_Serial_available>
    131a:	8f ed       	ldi	r24, 0xDF	; 223
    131c:	9f e0       	ldi	r25, 0x0F	; 15
    131e:	90 93 cc 03 	sts	0x03CC, r25	; 0x8003cc <g_mod0_Serial_flush+0x1>
    1322:	80 93 cb 03 	sts	0x03CB, r24	; 0x8003cb <g_mod0_Serial_flush>
    1326:	8b e9       	ldi	r24, 0x9B	; 155
    1328:	9f e0       	ldi	r25, 0x0F	; 15
    132a:	90 93 ce 03 	sts	0x03CE, r25	; 0x8003ce <g_mod0_Serial_getc+0x1>
    132e:	80 93 cd 03 	sts	0x03CD, r24	; 0x8003cd <g_mod0_Serial_getc>
    1332:	88 eb       	ldi	r24, 0xB8	; 184
    1334:	9f e0       	ldi	r25, 0x0F	; 15
    1336:	90 93 d0 03 	sts	0x03D0, r25	; 0x8003d0 <g_mod0_Serial_putc+0x1>
    133a:	80 93 cf 03 	sts	0x03CF, r24	; 0x8003cf <g_mod0_Serial_putc>
    133e:	08 95       	ret
    1340:	81 30       	cpi	r24, 0x01	; 1
    1342:	09 f0       	breq	.+2      	; 0x1346 <Modbus_init+0x118>
    1344:	61 c0       	rjmp	.+194    	; 0x1408 <Modbus_init+0x1da>
    1346:	80 81       	ld	r24, Z
    1348:	80 93 c8 03 	sts	0x03C8, r24	; 0x8003c8 <g_mod1_slave>
    134c:	41 81       	ldd	r20, Z+1	; 0x01
    134e:	62 81       	ldd	r22, Z+2	; 0x02
    1350:	73 81       	ldd	r23, Z+3	; 0x03
    1352:	84 81       	ldd	r24, Z+4	; 0x04
    1354:	95 81       	ldd	r25, Z+5	; 0x05
    1356:	26 81       	ldd	r18, Z+6	; 0x06
    1358:	37 81       	ldd	r19, Z+7	; 0x07
    135a:	30 93 ba 02 	sts	0x02BA, r19	; 0x8002ba <g_mod1_pre_transmission+0x1>
    135e:	20 93 b9 02 	sts	0x02B9, r18	; 0x8002b9 <g_mod1_pre_transmission>
    1362:	20 85       	ldd	r18, Z+8	; 0x08
    1364:	31 85       	ldd	r19, Z+9	; 0x09
    1366:	30 93 b8 02 	sts	0x02B8, r19	; 0x8002b8 <g_mod1_post_transmission+0x1>
    136a:	20 93 b7 02 	sts	0x02B7, r18	; 0x8002b7 <g_mod1_post_transmission>
    136e:	10 92 bc 02 	sts	0x02BC, r1	; 0x8002bc <g_mod1_idle+0x1>
    1372:	10 92 bb 02 	sts	0x02BB, r1	; 0x8002bb <g_mod1_idle>
    1376:	10 92 be 02 	sts	0x02BE, r1	; 0x8002be <g_mod1_response_buffer_index>
    137a:	10 92 bd 02 	sts	0x02BD, r1	; 0x8002bd <g_mod1_response_buffer_length>
    137e:	41 30       	cpi	r20, 0x01	; 1
    1380:	09 f5       	brne	.+66     	; 0x13c4 <Modbus_init+0x196>
    1382:	20 91 ae 02 	lds	r18, 0x02AE	; 0x8002ae <UART1_used.1979>
    1386:	21 11       	cpse	r18, r1
    1388:	3f c0       	rjmp	.+126    	; 0x1408 <Modbus_init+0x1da>
    138a:	21 e0       	ldi	r18, 0x01	; 1
    138c:	20 93 ae 02 	sts	0x02AE, r18	; 0x8002ae <UART1_used.1979>
    1390:	62 d3       	rcall	.+1732   	; 0x1a56 <UART1_init>
    1392:	89 eb       	ldi	r24, 0xB9	; 185
    1394:	9d e0       	ldi	r25, 0x0D	; 13
    1396:	90 93 b2 02 	sts	0x02B2, r25	; 0x8002b2 <g_mod1_Serial_available+0x1>
    139a:	80 93 b1 02 	sts	0x02B1, r24	; 0x8002b1 <g_mod1_Serial_available>
    139e:	87 ec       	ldi	r24, 0xC7	; 199
    13a0:	9d e0       	ldi	r25, 0x0D	; 13
    13a2:	90 93 b0 02 	sts	0x02B0, r25	; 0x8002b0 <g_mod1_Serial_flush+0x1>
    13a6:	80 93 af 02 	sts	0x02AF, r24	; 0x8002af <g_mod1_Serial_flush>
    13aa:	80 e8       	ldi	r24, 0x80	; 128
    13ac:	9d e0       	ldi	r25, 0x0D	; 13
    13ae:	90 93 b4 02 	sts	0x02B4, r25	; 0x8002b4 <g_mod1_Serial_getc+0x1>
    13b2:	80 93 b3 02 	sts	0x02B3, r24	; 0x8002b3 <g_mod1_Serial_getc>
    13b6:	80 ea       	ldi	r24, 0xA0	; 160
    13b8:	9d e0       	ldi	r25, 0x0D	; 13
    13ba:	90 93 b6 02 	sts	0x02B6, r25	; 0x8002b6 <g_mod1_Serial_putc+0x1>
    13be:	80 93 b5 02 	sts	0x02B5, r24	; 0x8002b5 <g_mod1_Serial_putc>
    13c2:	08 95       	ret
    13c4:	42 30       	cpi	r20, 0x02	; 2
    13c6:	01 f5       	brne	.+64     	; 0x1408 <Modbus_init+0x1da>
    13c8:	20 91 ad 02 	lds	r18, 0x02AD	; 0x8002ad <UART2_used.1980>
    13cc:	21 11       	cpse	r18, r1
    13ce:	1c c0       	rjmp	.+56     	; 0x1408 <Modbus_init+0x1da>
    13d0:	21 e0       	ldi	r18, 0x01	; 1
    13d2:	20 93 ad 02 	sts	0x02AD, r18	; 0x8002ad <UART2_used.1980>
    13d6:	4e d4       	rcall	.+2204   	; 0x1c74 <UART2_init>
    13d8:	85 ec       	ldi	r24, 0xC5	; 197
    13da:	9e e0       	ldi	r25, 0x0E	; 14
    13dc:	90 93 b2 02 	sts	0x02B2, r25	; 0x8002b2 <g_mod1_Serial_available+0x1>
    13e0:	80 93 b1 02 	sts	0x02B1, r24	; 0x8002b1 <g_mod1_Serial_available>
    13e4:	83 ed       	ldi	r24, 0xD3	; 211
    13e6:	9e e0       	ldi	r25, 0x0E	; 14
    13e8:	90 93 b0 02 	sts	0x02B0, r25	; 0x8002b0 <g_mod1_Serial_flush+0x1>
    13ec:	80 93 af 02 	sts	0x02AF, r24	; 0x8002af <g_mod1_Serial_flush>
    13f0:	8f e8       	ldi	r24, 0x8F	; 143
    13f2:	9e e0       	ldi	r25, 0x0E	; 14
    13f4:	90 93 b4 02 	sts	0x02B4, r25	; 0x8002b4 <g_mod1_Serial_getc+0x1>
    13f8:	80 93 b3 02 	sts	0x02B3, r24	; 0x8002b3 <g_mod1_Serial_getc>
    13fc:	8c ea       	ldi	r24, 0xAC	; 172
    13fe:	9e e0       	ldi	r25, 0x0E	; 14
    1400:	90 93 b6 02 	sts	0x02B6, r25	; 0x8002b6 <g_mod1_Serial_putc+0x1>
    1404:	80 93 b5 02 	sts	0x02B5, r24	; 0x8002b5 <g_mod1_Serial_putc>
    1408:	08 95       	ret

0000140a <Modbus_Get_response_buffer>:
    140a:	81 11       	cpse	r24, r1
    140c:	0b c0       	rjmp	.+22     	; 0x1424 <Modbus_Get_response_buffer+0x1a>
    140e:	60 34       	cpi	r22, 0x40	; 64
    1410:	b0 f4       	brcc	.+44     	; 0x143e <Modbus_Get_response_buffer+0x34>
    1412:	e6 2f       	mov	r30, r22
    1414:	f0 e0       	ldi	r31, 0x00	; 0
    1416:	ee 0f       	add	r30, r30
    1418:	ff 1f       	adc	r31, r31
    141a:	e2 5a       	subi	r30, 0xA2	; 162
    141c:	fb 4f       	sbci	r31, 0xFB	; 251
    141e:	80 81       	ld	r24, Z
    1420:	91 81       	ldd	r25, Z+1	; 0x01
    1422:	08 95       	ret
    1424:	81 30       	cpi	r24, 0x01	; 1
    1426:	71 f4       	brne	.+28     	; 0x1444 <Modbus_Get_response_buffer+0x3a>
    1428:	60 34       	cpi	r22, 0x40	; 64
    142a:	78 f4       	brcc	.+30     	; 0x144a <Modbus_Get_response_buffer+0x40>
    142c:	e6 2f       	mov	r30, r22
    142e:	f0 e0       	ldi	r31, 0x00	; 0
    1430:	ee 0f       	add	r30, r30
    1432:	ff 1f       	adc	r31, r31
    1434:	ec 5b       	subi	r30, 0xBC	; 188
    1436:	fc 4f       	sbci	r31, 0xFC	; 252
    1438:	80 81       	ld	r24, Z
    143a:	91 81       	ldd	r25, Z+1	; 0x01
    143c:	08 95       	ret
    143e:	8f ef       	ldi	r24, 0xFF	; 255
    1440:	9f ef       	ldi	r25, 0xFF	; 255
    1442:	08 95       	ret
    1444:	8f ef       	ldi	r24, 0xFF	; 255
    1446:	9f ef       	ldi	r25, 0xFF	; 255
    1448:	08 95       	ret
    144a:	8f ef       	ldi	r24, 0xFF	; 255
    144c:	9f ef       	ldi	r25, 0xFF	; 255
    144e:	08 95       	ret

00001450 <Modbus_Set_transmit_buffer>:
    1450:	81 11       	cpse	r24, r1
    1452:	0b c0       	rjmp	.+22     	; 0x146a <Modbus_Set_transmit_buffer+0x1a>
    1454:	60 34       	cpi	r22, 0x40	; 64
    1456:	b8 f4       	brcc	.+46     	; 0x1486 <Modbus_Set_transmit_buffer+0x36>
    1458:	e6 2f       	mov	r30, r22
    145a:	f0 e0       	ldi	r31, 0x00	; 0
    145c:	ee 0f       	add	r30, r30
    145e:	ff 1f       	adc	r31, r31
    1460:	e6 52       	subi	r30, 0x26	; 38
    1462:	fc 4f       	sbci	r31, 0xFC	; 252
    1464:	51 83       	std	Z+1, r21	; 0x01
    1466:	40 83       	st	Z, r20
    1468:	08 95       	ret
    146a:	81 30       	cpi	r24, 0x01	; 1
    146c:	71 f4       	brne	.+28     	; 0x148a <Modbus_Set_transmit_buffer+0x3a>
    146e:	60 34       	cpi	r22, 0x40	; 64
    1470:	70 f4       	brcc	.+28     	; 0x148e <Modbus_Set_transmit_buffer+0x3e>
    1472:	e6 2f       	mov	r30, r22
    1474:	f0 e0       	ldi	r31, 0x00	; 0
    1476:	ee 0f       	add	r30, r30
    1478:	ff 1f       	adc	r31, r31
    147a:	e0 54       	subi	r30, 0x40	; 64
    147c:	fd 4f       	sbci	r31, 0xFD	; 253
    147e:	51 83       	std	Z+1, r21	; 0x01
    1480:	40 83       	st	Z, r20
    1482:	80 e0       	ldi	r24, 0x00	; 0
    1484:	08 95       	ret
    1486:	82 e0       	ldi	r24, 0x02	; 2
    1488:	08 95       	ret
    148a:	82 e0       	ldi	r24, 0x02	; 2
    148c:	08 95       	ret
    148e:	82 e0       	ldi	r24, 0x02	; 2
    1490:	08 95       	ret

00001492 <Modbus_Read_holding_registers>:
    1492:	81 11       	cpse	r24, r1
    1494:	0b c0       	rjmp	.+22     	; 0x14ac <Modbus_Read_holding_registers+0x1a>
    1496:	70 93 e1 04 	sts	0x04E1, r23	; 0x8004e1 <g_mod0_read_address+0x1>
    149a:	60 93 e0 04 	sts	0x04E0, r22	; 0x8004e0 <g_mod0_read_address>
    149e:	50 93 df 04 	sts	0x04DF, r21	; 0x8004df <g_mod0_read_qty+0x1>
    14a2:	40 93 de 04 	sts	0x04DE, r20	; 0x8004de <g_mod0_read_qty>
    14a6:	63 e0       	ldi	r22, 0x03	; 3
    14a8:	41 c8       	rjmp	.-3966   	; 0x52c <Modbus_mster_transaction>
    14aa:	08 95       	ret
    14ac:	81 30       	cpi	r24, 0x01	; 1
    14ae:	59 f4       	brne	.+22     	; 0x14c6 <Modbus_Read_holding_registers+0x34>
    14b0:	70 93 c7 03 	sts	0x03C7, r23	; 0x8003c7 <g_mod1_read_address+0x1>
    14b4:	60 93 c6 03 	sts	0x03C6, r22	; 0x8003c6 <g_mod1_read_address>
    14b8:	50 93 c5 03 	sts	0x03C5, r21	; 0x8003c5 <g_mod1_read_qty+0x1>
    14bc:	40 93 c4 03 	sts	0x03C4, r20	; 0x8003c4 <g_mod1_read_qty>
    14c0:	63 e0       	ldi	r22, 0x03	; 3
    14c2:	34 c8       	rjmp	.-3992   	; 0x52c <Modbus_mster_transaction>
    14c4:	08 95       	ret
    14c6:	84 ee       	ldi	r24, 0xE4	; 228
    14c8:	08 95       	ret

000014ca <Modbus_Write_multiple_registers>:
@return 0 on success; exception number on failure
@ingroup register
*/
uint8_t Modbus_Write_multiple_registers(uint8_t device,uint16_t u16WriteAddress, uint16_t u16WriteQty)
{
	if(DEVICE_0 == device){
    14ca:	81 11       	cpse	r24, r1
    14cc:	0b c0       	rjmp	.+22     	; 0x14e4 <Modbus_Write_multiple_registers+0x1a>
	
		g_mod0_write_address = u16WriteAddress;
    14ce:	70 93 5d 04 	sts	0x045D, r23	; 0x80045d <g_mod0_write_address+0x1>
    14d2:	60 93 5c 04 	sts	0x045C, r22	; 0x80045c <g_mod0_write_address>
		g_mod0_write_qty = u16WriteQty;
    14d6:	50 93 5b 04 	sts	0x045B, r21	; 0x80045b <g_mod0_write_qty+0x1>
    14da:	40 93 5a 04 	sts	0x045A, r20	; 0x80045a <g_mod0_write_qty>
		return Modbus_mster_transaction(device, WRITE_MULTIPLE_REGISTERS);
    14de:	60 e1       	ldi	r22, 0x10	; 16
    14e0:	25 c8       	rjmp	.-4022   	; 0x52c <Modbus_mster_transaction>
    14e2:	08 95       	ret
	}
	else if(DEVICE_1 == device){
    14e4:	81 30       	cpi	r24, 0x01	; 1
    14e6:	59 f4       	brne	.+22     	; 0x14fe <Modbus_Write_multiple_registers+0x34>
		g_mod1_write_address = u16WriteAddress;
    14e8:	70 93 43 03 	sts	0x0343, r23	; 0x800343 <g_mod1_write_address+0x1>
    14ec:	60 93 42 03 	sts	0x0342, r22	; 0x800342 <g_mod1_write_address>
		g_mod1_write_qty = u16WriteQty;
    14f0:	50 93 41 03 	sts	0x0341, r21	; 0x800341 <g_mod1_write_qty+0x1>
    14f4:	40 93 40 03 	sts	0x0340, r20	; 0x800340 <g_mod1_write_qty>
		return Modbus_mster_transaction(device, WRITE_MULTIPLE_REGISTERS);
    14f8:	60 e1       	ldi	r22, 0x10	; 16
    14fa:	18 c8       	rjmp	.-4048   	; 0x52c <Modbus_mster_transaction>
    14fc:	08 95       	ret
	}
	return  INVALID_DEVICE;
    14fe:	84 ee       	ldi	r24, 0xE4	; 228
}
    1500:	08 95       	ret

00001502 <vTask2>:
=======
     178:	1f 92       	push	r1
     17a:	0f 92       	push	r0
     17c:	0f b6       	in	r0, 0x3f	; 63
     17e:	0f 92       	push	r0
     180:	11 24       	eor	r1, r1
     182:	0b b6       	in	r0, 0x3b	; 59
     184:	0f 92       	push	r0
     186:	cf 92       	push	r12
     188:	df 92       	push	r13
     18a:	ef 92       	push	r14
     18c:	ff 92       	push	r15
     18e:	0f 93       	push	r16
     190:	1f 93       	push	r17
     192:	2f 93       	push	r18
     194:	3f 93       	push	r19
     196:	4f 93       	push	r20
     198:	5f 93       	push	r21
     19a:	6f 93       	push	r22
     19c:	7f 93       	push	r23
     19e:	8f 93       	push	r24
     1a0:	9f 93       	push	r25
     1a2:	af 93       	push	r26
     1a4:	bf 93       	push	r27
     1a6:	ef 93       	push	r30
     1a8:	ff 93       	push	r31
	// get the time now
	g_Timer1_new_time = Get_millis();
     1aa:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <Get_millis>
     1ae:	8b 01       	movw	r16, r22
     1b0:	9c 01       	movw	r18, r24
     1b2:	60 93 19 09 	sts	0x0919, r22	; 0x800919 <g_Timer1_new_time>
     1b6:	70 93 1a 09 	sts	0x091A, r23	; 0x80091a <g_Timer1_new_time+0x1>
     1ba:	80 93 1b 09 	sts	0x091B, r24	; 0x80091b <g_Timer1_new_time+0x2>
     1be:	90 93 1c 09 	sts	0x091C, r25	; 0x80091c <g_Timer1_new_time+0x3>
	// calculate the diff between now and last interrupt
	g_diff_time = g_Timer1_new_time - g_Timer1_old_time;
     1c2:	40 91 f9 08 	lds	r20, 0x08F9	; 0x8008f9 <g_Timer1_old_time>
     1c6:	50 91 fa 08 	lds	r21, 0x08FA	; 0x8008fa <g_Timer1_old_time+0x1>
     1ca:	60 91 fb 08 	lds	r22, 0x08FB	; 0x8008fb <g_Timer1_old_time+0x2>
     1ce:	70 91 fc 08 	lds	r23, 0x08FC	; 0x8008fc <g_Timer1_old_time+0x3>
     1d2:	68 01       	movw	r12, r16
     1d4:	79 01       	movw	r14, r18
     1d6:	c4 1a       	sub	r12, r20
     1d8:	d5 0a       	sbc	r13, r21
     1da:	e6 0a       	sbc	r14, r22
     1dc:	f7 0a       	sbc	r15, r23
     1de:	c7 01       	movw	r24, r14
     1e0:	b6 01       	movw	r22, r12
     1e2:	c0 92 01 09 	sts	0x0901, r12	; 0x800901 <g_diff_time>
     1e6:	d0 92 02 09 	sts	0x0902, r13	; 0x800902 <g_diff_time+0x1>
     1ea:	e0 92 03 09 	sts	0x0903, r14	; 0x800903 <g_diff_time+0x2>
     1ee:	f0 92 04 09 	sts	0x0904, r15	; 0x800904 <g_diff_time+0x3>
	// save the to the old time to next interrupt
	g_Timer1_old_time = g_Timer1_new_time;
     1f2:	00 93 f9 08 	sts	0x08F9, r16	; 0x8008f9 <g_Timer1_old_time>
     1f6:	10 93 fa 08 	sts	0x08FA, r17	; 0x8008fa <g_Timer1_old_time+0x1>
     1fa:	20 93 fb 08 	sts	0x08FB, r18	; 0x8008fb <g_Timer1_old_time+0x2>
     1fe:	30 93 fc 08 	sts	0x08FC, r19	; 0x8008fc <g_Timer1_old_time+0x3>
	//call back function on upper layer to get time
	g_timer1_config->isr_call_back(g_diff_time);
     202:	e0 91 13 09 	lds	r30, 0x0913	; 0x800913 <g_timer1_config>
     206:	f0 91 14 09 	lds	r31, 0x0914	; 0x800914 <g_timer1_config+0x1>
     20a:	02 80       	ldd	r0, Z+2	; 0x02
     20c:	f3 81       	ldd	r31, Z+3	; 0x03
     20e:	e0 2d       	mov	r30, r0
     210:	19 95       	eicall
}
     212:	ff 91       	pop	r31
     214:	ef 91       	pop	r30
     216:	bf 91       	pop	r27
     218:	af 91       	pop	r26
     21a:	9f 91       	pop	r25
     21c:	8f 91       	pop	r24
     21e:	7f 91       	pop	r23
     220:	6f 91       	pop	r22
     222:	5f 91       	pop	r21
     224:	4f 91       	pop	r20
     226:	3f 91       	pop	r19
     228:	2f 91       	pop	r18
     22a:	1f 91       	pop	r17
     22c:	0f 91       	pop	r16
     22e:	ff 90       	pop	r15
     230:	ef 90       	pop	r14
     232:	df 90       	pop	r13
     234:	cf 90       	pop	r12
     236:	0f 90       	pop	r0
     238:	0b be       	out	0x3b, r0	; 59
     23a:	0f 90       	pop	r0
     23c:	0f be       	out	0x3f, r0	; 63
     23e:	0f 90       	pop	r0
     240:	1f 90       	pop	r1
     242:	18 95       	reti

00000244 <__vector_32>:
// intruptted service routine when we have rech the number of  Ticks On Encoder
ISR(TIMER3_COMPA_vect)
{
     244:	1f 92       	push	r1
     246:	0f 92       	push	r0
     248:	0f b6       	in	r0, 0x3f	; 63
     24a:	0f 92       	push	r0
     24c:	11 24       	eor	r1, r1
     24e:	0b b6       	in	r0, 0x3b	; 59
     250:	0f 92       	push	r0
     252:	cf 92       	push	r12
     254:	df 92       	push	r13
     256:	ef 92       	push	r14
     258:	ff 92       	push	r15
     25a:	0f 93       	push	r16
     25c:	1f 93       	push	r17
     25e:	2f 93       	push	r18
     260:	3f 93       	push	r19
     262:	4f 93       	push	r20
     264:	5f 93       	push	r21
     266:	6f 93       	push	r22
     268:	7f 93       	push	r23
     26a:	8f 93       	push	r24
     26c:	9f 93       	push	r25
     26e:	af 93       	push	r26
     270:	bf 93       	push	r27
     272:	ef 93       	push	r30
     274:	ff 93       	push	r31
	// get the time now
	g_Timer3_new_time = Get_millis();
     276:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <Get_millis>
     27a:	8b 01       	movw	r16, r22
     27c:	9c 01       	movw	r18, r24
     27e:	60 93 0f 09 	sts	0x090F, r22	; 0x80090f <g_Timer3_new_time>
     282:	70 93 10 09 	sts	0x0910, r23	; 0x800910 <g_Timer3_new_time+0x1>
     286:	80 93 11 09 	sts	0x0911, r24	; 0x800911 <g_Timer3_new_time+0x2>
     28a:	90 93 12 09 	sts	0x0912, r25	; 0x800912 <g_Timer3_new_time+0x3>
	// calculate the diff between now and last interrupt
	g_diff_time = g_Timer3_new_time - g_Timer3_old_time;
     28e:	40 91 f3 08 	lds	r20, 0x08F3	; 0x8008f3 <g_Timer3_old_time>
     292:	50 91 f4 08 	lds	r21, 0x08F4	; 0x8008f4 <g_Timer3_old_time+0x1>
     296:	60 91 f5 08 	lds	r22, 0x08F5	; 0x8008f5 <g_Timer3_old_time+0x2>
     29a:	70 91 f6 08 	lds	r23, 0x08F6	; 0x8008f6 <g_Timer3_old_time+0x3>
     29e:	68 01       	movw	r12, r16
     2a0:	79 01       	movw	r14, r18
     2a2:	c4 1a       	sub	r12, r20
     2a4:	d5 0a       	sbc	r13, r21
     2a6:	e6 0a       	sbc	r14, r22
     2a8:	f7 0a       	sbc	r15, r23
     2aa:	c7 01       	movw	r24, r14
     2ac:	b6 01       	movw	r22, r12
     2ae:	c0 92 01 09 	sts	0x0901, r12	; 0x800901 <g_diff_time>
     2b2:	d0 92 02 09 	sts	0x0902, r13	; 0x800902 <g_diff_time+0x1>
     2b6:	e0 92 03 09 	sts	0x0903, r14	; 0x800903 <g_diff_time+0x2>
     2ba:	f0 92 04 09 	sts	0x0904, r15	; 0x800904 <g_diff_time+0x3>
	// save the to the old time to next interrupt
	g_Timer3_old_time = g_Timer3_new_time;
     2be:	00 93 f3 08 	sts	0x08F3, r16	; 0x8008f3 <g_Timer3_old_time>
     2c2:	10 93 f4 08 	sts	0x08F4, r17	; 0x8008f4 <g_Timer3_old_time+0x1>
     2c6:	20 93 f5 08 	sts	0x08F5, r18	; 0x8008f5 <g_Timer3_old_time+0x2>
     2ca:	30 93 f6 08 	sts	0x08F6, r19	; 0x8008f6 <g_Timer3_old_time+0x3>
	//call back function on upper layer to get time
	g_timer3_config->isr_call_back(g_diff_time);
     2ce:	e0 91 f7 08 	lds	r30, 0x08F7	; 0x8008f7 <g_timer3_config>
     2d2:	f0 91 f8 08 	lds	r31, 0x08F8	; 0x8008f8 <g_timer3_config+0x1>
     2d6:	02 80       	ldd	r0, Z+2	; 0x02
     2d8:	f3 81       	ldd	r31, Z+3	; 0x03
     2da:	e0 2d       	mov	r30, r0
     2dc:	19 95       	eicall
}
     2de:	ff 91       	pop	r31
     2e0:	ef 91       	pop	r30
     2e2:	bf 91       	pop	r27
     2e4:	af 91       	pop	r26
     2e6:	9f 91       	pop	r25
     2e8:	8f 91       	pop	r24
     2ea:	7f 91       	pop	r23
     2ec:	6f 91       	pop	r22
     2ee:	5f 91       	pop	r21
     2f0:	4f 91       	pop	r20
     2f2:	3f 91       	pop	r19
     2f4:	2f 91       	pop	r18
     2f6:	1f 91       	pop	r17
     2f8:	0f 91       	pop	r16
     2fa:	ff 90       	pop	r15
     2fc:	ef 90       	pop	r14
     2fe:	df 90       	pop	r13
     300:	cf 90       	pop	r12
     302:	0f 90       	pop	r0
     304:	0b be       	out	0x3b, r0	; 59
     306:	0f 90       	pop	r0
     308:	0f be       	out	0x3f, r0	; 63
     30a:	0f 90       	pop	r0
     30c:	1f 90       	pop	r1
     30e:	18 95       	reti

00000310 <__vector_42>:
// intruptted service routine when we have rech the number of  Ticks On Encoder
ISR(TIMER4_COMPA_vect)
{
     310:	1f 92       	push	r1
     312:	0f 92       	push	r0
     314:	0f b6       	in	r0, 0x3f	; 63
     316:	0f 92       	push	r0
     318:	11 24       	eor	r1, r1
     31a:	0b b6       	in	r0, 0x3b	; 59
     31c:	0f 92       	push	r0
     31e:	cf 92       	push	r12
     320:	df 92       	push	r13
     322:	ef 92       	push	r14
     324:	ff 92       	push	r15
     326:	0f 93       	push	r16
     328:	1f 93       	push	r17
     32a:	2f 93       	push	r18
     32c:	3f 93       	push	r19
     32e:	4f 93       	push	r20
     330:	5f 93       	push	r21
     332:	6f 93       	push	r22
     334:	7f 93       	push	r23
     336:	8f 93       	push	r24
     338:	9f 93       	push	r25
     33a:	af 93       	push	r26
     33c:	bf 93       	push	r27
     33e:	ef 93       	push	r30
     340:	ff 93       	push	r31
	// get the time now
	g_Timer4_new_time = Get_millis();
     342:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <Get_millis>
     346:	8b 01       	movw	r16, r22
     348:	9c 01       	movw	r18, r24
     34a:	60 93 05 09 	sts	0x0905, r22	; 0x800905 <g_Timer4_new_time>
     34e:	70 93 06 09 	sts	0x0906, r23	; 0x800906 <g_Timer4_new_time+0x1>
     352:	80 93 07 09 	sts	0x0907, r24	; 0x800907 <g_Timer4_new_time+0x2>
     356:	90 93 08 09 	sts	0x0908, r25	; 0x800908 <g_Timer4_new_time+0x3>
	// calculate the diff between now and last interrupt
	g_diff_time = g_Timer4_new_time - g_Timer4_old_time;
     35a:	40 91 15 09 	lds	r20, 0x0915	; 0x800915 <g_Timer4_old_time>
     35e:	50 91 16 09 	lds	r21, 0x0916	; 0x800916 <g_Timer4_old_time+0x1>
     362:	60 91 17 09 	lds	r22, 0x0917	; 0x800917 <g_Timer4_old_time+0x2>
     366:	70 91 18 09 	lds	r23, 0x0918	; 0x800918 <g_Timer4_old_time+0x3>
     36a:	68 01       	movw	r12, r16
     36c:	79 01       	movw	r14, r18
     36e:	c4 1a       	sub	r12, r20
     370:	d5 0a       	sbc	r13, r21
     372:	e6 0a       	sbc	r14, r22
     374:	f7 0a       	sbc	r15, r23
     376:	c7 01       	movw	r24, r14
     378:	b6 01       	movw	r22, r12
     37a:	c0 92 01 09 	sts	0x0901, r12	; 0x800901 <g_diff_time>
     37e:	d0 92 02 09 	sts	0x0902, r13	; 0x800902 <g_diff_time+0x1>
     382:	e0 92 03 09 	sts	0x0903, r14	; 0x800903 <g_diff_time+0x2>
     386:	f0 92 04 09 	sts	0x0904, r15	; 0x800904 <g_diff_time+0x3>
	// save the to the old time to next interrupt
	g_Timer4_old_time = g_Timer4_new_time;
     38a:	00 93 15 09 	sts	0x0915, r16	; 0x800915 <g_Timer4_old_time>
     38e:	10 93 16 09 	sts	0x0916, r17	; 0x800916 <g_Timer4_old_time+0x1>
     392:	20 93 17 09 	sts	0x0917, r18	; 0x800917 <g_Timer4_old_time+0x2>
     396:	30 93 18 09 	sts	0x0918, r19	; 0x800918 <g_Timer4_old_time+0x3>
	//call back function on upper layer to get time
	g_timer4_config->isr_call_back(g_diff_time);
     39a:	e0 91 09 09 	lds	r30, 0x0909	; 0x800909 <g_timer4_config>
     39e:	f0 91 0a 09 	lds	r31, 0x090A	; 0x80090a <g_timer4_config+0x1>
     3a2:	02 80       	ldd	r0, Z+2	; 0x02
     3a4:	f3 81       	ldd	r31, Z+3	; 0x03
     3a6:	e0 2d       	mov	r30, r0
     3a8:	19 95       	eicall
}
     3aa:	ff 91       	pop	r31
     3ac:	ef 91       	pop	r30
     3ae:	bf 91       	pop	r27
     3b0:	af 91       	pop	r26
     3b2:	9f 91       	pop	r25
     3b4:	8f 91       	pop	r24
     3b6:	7f 91       	pop	r23
     3b8:	6f 91       	pop	r22
     3ba:	5f 91       	pop	r21
     3bc:	4f 91       	pop	r20
     3be:	3f 91       	pop	r19
     3c0:	2f 91       	pop	r18
     3c2:	1f 91       	pop	r17
     3c4:	0f 91       	pop	r16
     3c6:	ff 90       	pop	r15
     3c8:	ef 90       	pop	r14
     3ca:	df 90       	pop	r13
     3cc:	cf 90       	pop	r12
     3ce:	0f 90       	pop	r0
     3d0:	0b be       	out	0x3b, r0	; 59
     3d2:	0f 90       	pop	r0
     3d4:	0f be       	out	0x3f, r0	; 63
     3d6:	0f 90       	pop	r0
     3d8:	1f 90       	pop	r1
     3da:	18 95       	reti

000003dc <__vector_47>:
// intruptted service routine when we have rech the number of  Ticks On Encoder
ISR(TIMER5_COMPA_vect)
{
     3dc:	1f 92       	push	r1
     3de:	0f 92       	push	r0
     3e0:	0f b6       	in	r0, 0x3f	; 63
     3e2:	0f 92       	push	r0
     3e4:	11 24       	eor	r1, r1
     3e6:	0b b6       	in	r0, 0x3b	; 59
     3e8:	0f 92       	push	r0
     3ea:	2f 93       	push	r18
     3ec:	3f 93       	push	r19
     3ee:	4f 93       	push	r20
     3f0:	5f 93       	push	r21
     3f2:	6f 93       	push	r22
     3f4:	7f 93       	push	r23
     3f6:	8f 93       	push	r24
     3f8:	9f 93       	push	r25
     3fa:	af 93       	push	r26
     3fc:	bf 93       	push	r27
     3fe:	ef 93       	push	r30
     400:	ff 93       	push	r31
	// calculate the diff between now and last interrupt
	g_diff_time = g_Timer5_new_time - g_Timer5_old_time;
	// save the to the old time to next interrupt
	g_Timer5_old_time = g_Timer5_new_time;*/
	// clear the counter
	UART0_putc('a');
     402:	81 e6       	ldi	r24, 0x61	; 97
     404:	1d d3       	rcall	.+1594   	; 0xa40 <UART0_putc>
	TIMER5_COUNT_L = 0;
     406:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <__TEXT_REGION_LENGTH__+0x700124>
	//call back function on upper layer to get time
	g_timer5_config->isr_call_back(g_diff_time);
     40a:	60 91 01 09 	lds	r22, 0x0901	; 0x800901 <g_diff_time>
     40e:	70 91 02 09 	lds	r23, 0x0902	; 0x800902 <g_diff_time+0x1>
     412:	80 91 03 09 	lds	r24, 0x0903	; 0x800903 <g_diff_time+0x2>
     416:	90 91 04 09 	lds	r25, 0x0904	; 0x800904 <g_diff_time+0x3>
     41a:	e0 91 1d 09 	lds	r30, 0x091D	; 0x80091d <g_timer5_config>
     41e:	f0 91 1e 09 	lds	r31, 0x091E	; 0x80091e <g_timer5_config+0x1>
     422:	02 80       	ldd	r0, Z+2	; 0x02
     424:	f3 81       	ldd	r31, Z+3	; 0x03
     426:	e0 2d       	mov	r30, r0
     428:	19 95       	eicall
	
}
     42a:	ff 91       	pop	r31
     42c:	ef 91       	pop	r30
     42e:	bf 91       	pop	r27
     430:	af 91       	pop	r26
     432:	9f 91       	pop	r25
     434:	8f 91       	pop	r24
     436:	7f 91       	pop	r23
     438:	6f 91       	pop	r22
     43a:	5f 91       	pop	r21
     43c:	4f 91       	pop	r20
     43e:	3f 91       	pop	r19
     440:	2f 91       	pop	r18
     442:	0f 90       	pop	r0
     444:	0b be       	out	0x3b, r0	; 59
     446:	0f 90       	pop	r0
     448:	0f be       	out	0x3f, r0	; 63
     44a:	0f 90       	pop	r0
     44c:	1f 90       	pop	r1
     44e:	18 95       	reti

00000450 <LCD_pre_transmission>:


/* _____callback functions_____________________________________________________ */
void LCD_pre_transmission(void) {
	/*Mode_bus_1_change_state*/
	Modbus_change_state(LCD,HIGH);
     450:	61 e0       	ldi	r22, 0x01	; 1
     452:	80 e0       	ldi	r24, 0x00	; 0
     454:	15 c2       	rjmp	.+1066   	; 0x880 <Modbus_change_state>
     456:	08 95       	ret

00000458 <LCD_post_transmission>:
}

void LCD_post_transmission(void) {
	Modbus_change_state(LCD,LOW);
     458:	60 e0       	ldi	r22, 0x00	; 0
     45a:	80 e0       	ldi	r24, 0x00	; 0
     45c:	11 c2       	rjmp	.+1058   	; 0x880 <Modbus_change_state>
     45e:	08 95       	ret

00000460 <Lcd_init>:


/* _____initialization Global_____________________________________________________ */
void Lcd_init(UART_Modules uart_n,uint32_t baudrate,uint8_t slaveID){
//make sure that DIO_init called first	
	g_LCD_modbus_config.slave_address = slaveID;
     460:	ea e7       	ldi	r30, 0x7A	; 122
     462:	f2 e0       	ldi	r31, 0x02	; 2
     464:	20 83       	st	Z, r18
	g_LCD_modbus_config.uart_num = uart_n;
     466:	81 83       	std	Z+1, r24	; 0x01
	g_LCD_modbus_config.baud_rate= baudrate;
     468:	42 83       	std	Z+2, r20	; 0x02
     46a:	53 83       	std	Z+3, r21	; 0x03
     46c:	64 83       	std	Z+4, r22	; 0x04
     46e:	75 83       	std	Z+5, r23	; 0x05
	g_LCD_modbus_config.pre_transmission = LCD_pre_transmission;
     470:	88 e2       	ldi	r24, 0x28	; 40
     472:	92 e0       	ldi	r25, 0x02	; 2
     474:	97 83       	std	Z+7, r25	; 0x07
     476:	86 83       	std	Z+6, r24	; 0x06
	g_LCD_modbus_config.post_transmission = LCD_post_transmission;
     478:	8c e2       	ldi	r24, 0x2C	; 44
     47a:	92 e0       	ldi	r25, 0x02	; 2
     47c:	91 87       	std	Z+9, r25	; 0x09
     47e:	80 87       	std	Z+8, r24	; 0x08
	Modbus_init(LCD , &(g_LCD_modbus_config));
     480:	bf 01       	movw	r22, r30
     482:	80 e0       	ldi	r24, 0x00	; 0
     484:	01 c0       	rjmp	.+2      	; 0x488 <Modbus_init>
     486:	08 95       	ret

00000488 <Modbus_init>:
Call once , typically within setup().

*/


void Modbus_init(uint8_t device_num, modbus_config* mod){
     488:	fb 01       	movw	r30, r22

	//
	static uint8_t UART1_used=0;
	static uint8_t UART2_used=0;
	static uint8_t UART3_used=0;
	if(device_num  == 0){
     48a:	81 11       	cpse	r24, r1
     48c:	86 c0       	rjmp	.+268    	; 0x59a <Modbus_init+0x112>
		g_mod0_slave = mod->slave_address;
     48e:	80 81       	ld	r24, Z
     490:	80 93 a8 02 	sts	0x02A8, r24	; 0x8002a8 <g_mod0_slave>
		g_mod0_uart_no = mod->uart_num;
     494:	41 81       	ldd	r20, Z+1	; 0x01
		g_mod0_baud_rate = mod->baud_rate;
     496:	62 81       	ldd	r22, Z+2	; 0x02
     498:	73 81       	ldd	r23, Z+3	; 0x03
     49a:	84 81       	ldd	r24, Z+4	; 0x04
     49c:	95 81       	ldd	r25, Z+5	; 0x05

		g_mod0_pre_transmission = mod->pre_transmission;
     49e:	26 81       	ldd	r18, Z+6	; 0x06
     4a0:	37 81       	ldd	r19, Z+7	; 0x07
     4a2:	30 93 a3 02 	sts	0x02A3, r19	; 0x8002a3 <g_mod0_pre_transmission+0x1>
     4a6:	20 93 a2 02 	sts	0x02A2, r18	; 0x8002a2 <g_mod0_pre_transmission>
		g_mod0_post_transmission = mod->post_transmission;
     4aa:	20 85       	ldd	r18, Z+8	; 0x08
     4ac:	31 85       	ldd	r19, Z+9	; 0x09
     4ae:	30 93 a1 02 	sts	0x02A1, r19	; 0x8002a1 <g_mod0_post_transmission+0x1>
     4b2:	20 93 a0 02 	sts	0x02A0, r18	; 0x8002a0 <g_mod0_post_transmission>

		g_mod0_idle = 0;
     4b6:	10 92 a5 02 	sts	0x02A5, r1	; 0x8002a5 <g_mod0_idle+0x1>
     4ba:	10 92 a4 02 	sts	0x02A4, r1	; 0x8002a4 <g_mod0_idle>
		g_mod0_response_buffer_index = 0;
     4be:	10 92 a7 02 	sts	0x02A7, r1	; 0x8002a7 <g_mod0_response_buffer_index>
		g_mod0_response_buffer_length = 0;
     4c2:	10 92 a6 02 	sts	0x02A6, r1	; 0x8002a6 <g_mod0_response_buffer_length>
		if(UART1 == g_mod0_uart_no){
     4c6:	41 30       	cpi	r20, 0x01	; 1
     4c8:	09 f5       	brne	.+66     	; 0x50c <Modbus_init+0x84>
			if(0 == UART1_used){//uart1 not used
     4ca:	20 91 86 02 	lds	r18, 0x0286	; 0x800286 <UART1_used.1979>
     4ce:	21 11       	cpse	r18, r1
     4d0:	c8 c0       	rjmp	.+400    	; 0x662 <Modbus_init+0x1da>
				UART1_used = 1;
     4d2:	21 e0       	ldi	r18, 0x01	; 1
     4d4:	20 93 86 02 	sts	0x0286, r18	; 0x800286 <UART1_used.1979>
				UART1_init(g_mod0_baud_rate);
     4d8:	64 d3       	rcall	.+1736   	; 0xba2 <UART1_init>
				g_mod0_Serial_available = UART1_available;
     4da:	8f e5       	ldi	r24, 0x5F	; 95
     4dc:	96 e0       	ldi	r25, 0x06	; 6
     4de:	90 93 99 02 	sts	0x0299, r25	; 0x800299 <g_mod0_Serial_available+0x1>
     4e2:	80 93 98 02 	sts	0x0298, r24	; 0x800298 <g_mod0_Serial_available>
				g_mod0_Serial_peek = UART1_peek;
				g_mod0_Serial_flush = UART1_flush;
     4e6:	8d e6       	ldi	r24, 0x6D	; 109
     4e8:	96 e0       	ldi	r25, 0x06	; 6
     4ea:	90 93 9b 02 	sts	0x029B, r25	; 0x80029b <g_mod0_Serial_flush+0x1>
     4ee:	80 93 9a 02 	sts	0x029A, r24	; 0x80029a <g_mod0_Serial_flush>
				g_mod0_Serial_puts = UART1_puts;
				g_mod0_Serial_getc = UART1_getc;
     4f2:	86 e2       	ldi	r24, 0x26	; 38
     4f4:	96 e0       	ldi	r25, 0x06	; 6
     4f6:	90 93 9d 02 	sts	0x029D, r25	; 0x80029d <g_mod0_Serial_getc+0x1>
     4fa:	80 93 9c 02 	sts	0x029C, r24	; 0x80029c <g_mod0_Serial_getc>
				g_mod0_Serial_putc = UART1_putc;
     4fe:	86 e4       	ldi	r24, 0x46	; 70
     500:	96 e0       	ldi	r25, 0x06	; 6
     502:	90 93 9f 02 	sts	0x029F, r25	; 0x80029f <g_mod0_Serial_putc+0x1>
     506:	80 93 9e 02 	sts	0x029E, r24	; 0x80029e <g_mod0_Serial_putc>
     50a:	08 95       	ret
			}
			else {
				//error uart1 used before
			}
		}
		else if(UART2 == g_mod0_uart_no){
     50c:	42 30       	cpi	r20, 0x02	; 2
     50e:	09 f5       	brne	.+66     	; 0x552 <Modbus_init+0xca>
			if(0 == UART2_used){//uart2 not used
     510:	20 91 85 02 	lds	r18, 0x0285	; 0x800285 <UART2_used.1980>
     514:	21 11       	cpse	r18, r1
     516:	a5 c0       	rjmp	.+330    	; 0x662 <Modbus_init+0x1da>
				UART2_used = 1;
     518:	21 e0       	ldi	r18, 0x01	; 1
     51a:	20 93 85 02 	sts	0x0285, r18	; 0x800285 <UART2_used.1980>
				UART2_init(g_mod0_baud_rate);
     51e:	50 d4       	rcall	.+2208   	; 0xdc0 <UART2_init>
				g_mod0_Serial_available = UART2_available;
     520:	8b e6       	ldi	r24, 0x6B	; 107
     522:	97 e0       	ldi	r25, 0x07	; 7
     524:	90 93 99 02 	sts	0x0299, r25	; 0x800299 <g_mod0_Serial_available+0x1>
     528:	80 93 98 02 	sts	0x0298, r24	; 0x800298 <g_mod0_Serial_available>
				g_mod0_Serial_peek = UART2_peek;
				g_mod0_Serial_flush = UART2_flush;
     52c:	89 e7       	ldi	r24, 0x79	; 121
     52e:	97 e0       	ldi	r25, 0x07	; 7
     530:	90 93 9b 02 	sts	0x029B, r25	; 0x80029b <g_mod0_Serial_flush+0x1>
     534:	80 93 9a 02 	sts	0x029A, r24	; 0x80029a <g_mod0_Serial_flush>
				g_mod0_Serial_puts = UART2_puts;
				g_mod0_Serial_getc = UART2_getc;
     538:	85 e3       	ldi	r24, 0x35	; 53
     53a:	97 e0       	ldi	r25, 0x07	; 7
     53c:	90 93 9d 02 	sts	0x029D, r25	; 0x80029d <g_mod0_Serial_getc+0x1>
     540:	80 93 9c 02 	sts	0x029C, r24	; 0x80029c <g_mod0_Serial_getc>
				g_mod0_Serial_putc = UART2_putc;
     544:	82 e5       	ldi	r24, 0x52	; 82
     546:	97 e0       	ldi	r25, 0x07	; 7
     548:	90 93 9f 02 	sts	0x029F, r25	; 0x80029f <g_mod0_Serial_putc+0x1>
     54c:	80 93 9e 02 	sts	0x029E, r24	; 0x80029e <g_mod0_Serial_putc>
     550:	08 95       	ret
			}
			else{
				//error uart2 used before
			}
		}
		else if(UART3 == g_mod0_uart_no){
     552:	43 30       	cpi	r20, 0x03	; 3
     554:	09 f0       	breq	.+2      	; 0x558 <Modbus_init+0xd0>
     556:	85 c0       	rjmp	.+266    	; 0x662 <Modbus_init+0x1da>
			if(0 == UART3_used){//uart2 not used
     558:	20 91 84 02 	lds	r18, 0x0284	; 0x800284 <UART3_used.1981>
     55c:	21 11       	cpse	r18, r1
     55e:	81 c0       	rjmp	.+258    	; 0x662 <Modbus_init+0x1da>
				UART3_used = 1;
     560:	21 e0       	ldi	r18, 0x01	; 1
     562:	20 93 84 02 	sts	0x0284, r18	; 0x800284 <UART3_used.1981>
				UART3_init(g_mod0_baud_rate);
     566:	38 d5       	rcall	.+2672   	; 0xfd8 <UART3_init>
				g_mod0_Serial_available = UART3_available;
     568:	87 e7       	ldi	r24, 0x77	; 119
     56a:	98 e0       	ldi	r25, 0x08	; 8
     56c:	90 93 99 02 	sts	0x0299, r25	; 0x800299 <g_mod0_Serial_available+0x1>
     570:	80 93 98 02 	sts	0x0298, r24	; 0x800298 <g_mod0_Serial_available>
				g_mod0_Serial_peek = UART3_peek;
				g_mod0_Serial_flush = UART3_flush;
     574:	85 e8       	ldi	r24, 0x85	; 133
     576:	98 e0       	ldi	r25, 0x08	; 8
     578:	90 93 9b 02 	sts	0x029B, r25	; 0x80029b <g_mod0_Serial_flush+0x1>
     57c:	80 93 9a 02 	sts	0x029A, r24	; 0x80029a <g_mod0_Serial_flush>
				g_mod0_Serial_puts = UART3_puts;
				g_mod0_Serial_getc = UART3_getc;
     580:	81 e4       	ldi	r24, 0x41	; 65
     582:	98 e0       	ldi	r25, 0x08	; 8
     584:	90 93 9d 02 	sts	0x029D, r25	; 0x80029d <g_mod0_Serial_getc+0x1>
     588:	80 93 9c 02 	sts	0x029C, r24	; 0x80029c <g_mod0_Serial_getc>
				g_mod0_Serial_putc = UART3_putc;
     58c:	8e e5       	ldi	r24, 0x5E	; 94
     58e:	98 e0       	ldi	r25, 0x08	; 8
     590:	90 93 9f 02 	sts	0x029F, r25	; 0x80029f <g_mod0_Serial_putc+0x1>
     594:	80 93 9e 02 	sts	0x029E, r24	; 0x80029e <g_mod0_Serial_putc>
     598:	08 95       	ret




	}
	else if(device_num == 1){
     59a:	81 30       	cpi	r24, 0x01	; 1
     59c:	09 f0       	breq	.+2      	; 0x5a0 <Modbus_init+0x118>
     59e:	61 c0       	rjmp	.+194    	; 0x662 <Modbus_init+0x1da>
		g_mod1_slave = mod->slave_address;
     5a0:	80 81       	ld	r24, Z
     5a2:	80 93 97 02 	sts	0x0297, r24	; 0x800297 <g_mod1_slave>
		g_mod1_uart_no = mod->uart_num;
     5a6:	41 81       	ldd	r20, Z+1	; 0x01
		g_mod1_baud_rate = mod->baud_rate;
     5a8:	62 81       	ldd	r22, Z+2	; 0x02
     5aa:	73 81       	ldd	r23, Z+3	; 0x03
     5ac:	84 81       	ldd	r24, Z+4	; 0x04
     5ae:	95 81       	ldd	r25, Z+5	; 0x05

		g_mod1_pre_transmission = mod->pre_transmission;
     5b0:	26 81       	ldd	r18, Z+6	; 0x06
     5b2:	37 81       	ldd	r19, Z+7	; 0x07
     5b4:	30 93 92 02 	sts	0x0292, r19	; 0x800292 <g_mod1_pre_transmission+0x1>
     5b8:	20 93 91 02 	sts	0x0291, r18	; 0x800291 <g_mod1_pre_transmission>
		g_mod1_post_transmission = mod->post_transmission;
     5bc:	20 85       	ldd	r18, Z+8	; 0x08
     5be:	31 85       	ldd	r19, Z+9	; 0x09
     5c0:	30 93 90 02 	sts	0x0290, r19	; 0x800290 <g_mod1_post_transmission+0x1>
     5c4:	20 93 8f 02 	sts	0x028F, r18	; 0x80028f <g_mod1_post_transmission>

		g_mod1_idle = 0;
     5c8:	10 92 94 02 	sts	0x0294, r1	; 0x800294 <g_mod1_idle+0x1>
     5cc:	10 92 93 02 	sts	0x0293, r1	; 0x800293 <g_mod1_idle>
		g_mod1_response_buffer_index = 0;
     5d0:	10 92 96 02 	sts	0x0296, r1	; 0x800296 <g_mod1_response_buffer_index>
		g_mod1_response_buffer_length = 0;
     5d4:	10 92 95 02 	sts	0x0295, r1	; 0x800295 <g_mod1_response_buffer_length>
		if(UART1 == g_mod1_uart_no){
     5d8:	41 30       	cpi	r20, 0x01	; 1
     5da:	09 f5       	brne	.+66     	; 0x61e <Modbus_init+0x196>
			if(0 == UART1_used){//uart1 not used
     5dc:	20 91 86 02 	lds	r18, 0x0286	; 0x800286 <UART1_used.1979>
     5e0:	21 11       	cpse	r18, r1
     5e2:	3f c0       	rjmp	.+126    	; 0x662 <Modbus_init+0x1da>
				UART1_used = 1;
     5e4:	21 e0       	ldi	r18, 0x01	; 1
     5e6:	20 93 86 02 	sts	0x0286, r18	; 0x800286 <UART1_used.1979>
				UART1_init(g_mod1_baud_rate);
     5ea:	db d2       	rcall	.+1462   	; 0xba2 <UART1_init>
				g_mod1_Serial_available = UART1_available;
     5ec:	8f e5       	ldi	r24, 0x5F	; 95
     5ee:	96 e0       	ldi	r25, 0x06	; 6
     5f0:	90 93 8a 02 	sts	0x028A, r25	; 0x80028a <g_mod1_Serial_available+0x1>
     5f4:	80 93 89 02 	sts	0x0289, r24	; 0x800289 <g_mod1_Serial_available>
				g_mod1_Serial_peek = UART1_peek;
				g_mod1_Serial_flush = UART1_flush;
     5f8:	8d e6       	ldi	r24, 0x6D	; 109
     5fa:	96 e0       	ldi	r25, 0x06	; 6
     5fc:	90 93 88 02 	sts	0x0288, r25	; 0x800288 <g_mod1_Serial_flush+0x1>
     600:	80 93 87 02 	sts	0x0287, r24	; 0x800287 <g_mod1_Serial_flush>
				g_mod1_Serial_puts = UART1_puts;
				g_mod1_Serial_getc = UART1_getc;
     604:	86 e2       	ldi	r24, 0x26	; 38
     606:	96 e0       	ldi	r25, 0x06	; 6
     608:	90 93 8c 02 	sts	0x028C, r25	; 0x80028c <g_mod1_Serial_getc+0x1>
     60c:	80 93 8b 02 	sts	0x028B, r24	; 0x80028b <g_mod1_Serial_getc>
				g_mod1_Serial_putc = UART1_putc;
     610:	86 e4       	ldi	r24, 0x46	; 70
     612:	96 e0       	ldi	r25, 0x06	; 6
     614:	90 93 8e 02 	sts	0x028E, r25	; 0x80028e <g_mod1_Serial_putc+0x1>
     618:	80 93 8d 02 	sts	0x028D, r24	; 0x80028d <g_mod1_Serial_putc>
     61c:	08 95       	ret
			}
			else {
				//error uart1 used before
			}
		}
		else if(UART2 == g_mod1_uart_no){
     61e:	42 30       	cpi	r20, 0x02	; 2
     620:	01 f5       	brne	.+64     	; 0x662 <Modbus_init+0x1da>
			if(0 == UART2_used){//uart2 not used
     622:	20 91 85 02 	lds	r18, 0x0285	; 0x800285 <UART2_used.1980>
     626:	21 11       	cpse	r18, r1
				UART2_used = 1;
     628:	1c c0       	rjmp	.+56     	; 0x662 <Modbus_init+0x1da>
     62a:	21 e0       	ldi	r18, 0x01	; 1
     62c:	20 93 85 02 	sts	0x0285, r18	; 0x800285 <UART2_used.1980>
				UART2_init(g_mod1_baud_rate);
     630:	c7 d3       	rcall	.+1934   	; 0xdc0 <UART2_init>
				g_mod1_Serial_available = UART2_available;
     632:	8b e6       	ldi	r24, 0x6B	; 107
     634:	97 e0       	ldi	r25, 0x07	; 7
     636:	90 93 8a 02 	sts	0x028A, r25	; 0x80028a <g_mod1_Serial_available+0x1>
     63a:	80 93 89 02 	sts	0x0289, r24	; 0x800289 <g_mod1_Serial_available>
				g_mod1_Serial_peek = UART2_peek;
				g_mod1_Serial_flush = UART2_flush;
     63e:	89 e7       	ldi	r24, 0x79	; 121
     640:	97 e0       	ldi	r25, 0x07	; 7
     642:	90 93 88 02 	sts	0x0288, r25	; 0x800288 <g_mod1_Serial_flush+0x1>
     646:	80 93 87 02 	sts	0x0287, r24	; 0x800287 <g_mod1_Serial_flush>
				g_mod1_Serial_puts = UART2_puts;
				g_mod1_Serial_getc = UART2_getc;
     64a:	85 e3       	ldi	r24, 0x35	; 53
     64c:	97 e0       	ldi	r25, 0x07	; 7
     64e:	90 93 8c 02 	sts	0x028C, r25	; 0x80028c <g_mod1_Serial_getc+0x1>
     652:	80 93 8b 02 	sts	0x028B, r24	; 0x80028b <g_mod1_Serial_getc>
				g_mod1_Serial_putc = UART2_putc;
     656:	82 e5       	ldi	r24, 0x52	; 82
     658:	97 e0       	ldi	r25, 0x07	; 7
     65a:	90 93 8e 02 	sts	0x028E, r25	; 0x80028e <g_mod1_Serial_putc+0x1>
     65e:	80 93 8d 02 	sts	0x028D, r24	; 0x80028d <g_mod1_Serial_putc>
     662:	08 95       	ret

00000664 <vTask2>:
>>>>>>> 131ed066d936db6cb82dc024f16de69a40fef126
										
		
	}
}
static void vTask2(void* pvParameters)
{
<<<<<<< HEAD
    1502:	cf 93       	push	r28
    1504:	df 93       	push	r29
    1506:	00 d0       	rcall	.+0      	; 0x1508 <vTask2+0x6>
    1508:	1f 92       	push	r1
    150a:	cd b7       	in	r28, 0x3d	; 61
    150c:	de b7       	in	r29, 0x3e	; 62
    150e:	7e 01       	movw	r14, r28
    1510:	85 e0       	ldi	r24, 0x05	; 5
    1512:	e8 0e       	add	r14, r24
    1514:	f1 1c       	adc	r15, r1
=======
     664:	cf 93       	push	r28
     666:	df 93       	push	r29
     668:	00 d0       	rcall	.+0      	; 0x66a <vTask2+0x6>
     66a:	1f 92       	push	r1
     66c:	cd b7       	in	r28, 0x3d	; 61
     66e:	de b7       	in	r29, 0x3e	; 62
     670:	7e 01       	movw	r14, r28
     672:	85 e0       	ldi	r24, 0x05	; 5
     674:	e8 0e       	add	r14, r24
     676:	f1 1c       	adc	r15, r1
>>>>>>> 131ed066d936db6cb82dc024f16de69a40fef126
		size_t xReceivedBytes;
		const TickType_t xBlockTime = pdMS_TO_TICKS( 100 );
		/* Receive the next message from the message buffer. Wait in the Blocked
		state (so not using any CPU processing time) for a maximum of 100ms for
		a message to become available. */
		UART0_puts("Vtask2 requires data\n");
<<<<<<< HEAD
    1516:	83 e1       	ldi	r24, 0x13	; 19
    1518:	92 e0       	ldi	r25, 0x02	; 2
    151a:	21 d2       	rcall	.+1090   	; 0x195e <UART0_puts>
		xReceivedBytes = xMessageBufferReceive( xMessageBuffer,
    151c:	26 e0       	ldi	r18, 0x06	; 6
    151e:	30 e0       	ldi	r19, 0x00	; 0
    1520:	44 e0       	ldi	r20, 0x04	; 4
    1522:	50 e0       	ldi	r21, 0x00	; 0
    1524:	be 01       	movw	r22, r28
    1526:	6f 5f       	subi	r22, 0xFF	; 255
    1528:	7f 4f       	sbci	r23, 0xFF	; 255
    152a:	80 91 81 0b 	lds	r24, 0x0B81	; 0x800b81 <xMessageBuffer>
    152e:	90 91 82 0b 	lds	r25, 0x0B82	; 0x800b82 <xMessageBuffer+0x1>
    1532:	0e 94 69 16 	call	0x2cd2	; 0x2cd2 <xStreamBufferReceive>
=======
     678:	80 e0       	ldi	r24, 0x00	; 0
     67a:	92 e0       	ldi	r25, 0x02	; 2
     67c:	16 d2       	rcall	.+1068   	; 0xaaa <UART0_puts>
		xReceivedBytes = xMessageBufferReceive( xMessageBuffer,
     67e:	26 e0       	ldi	r18, 0x06	; 6
     680:	30 e0       	ldi	r19, 0x00	; 0
     682:	44 e0       	ldi	r20, 0x04	; 4
     684:	50 e0       	ldi	r21, 0x00	; 0
     686:	be 01       	movw	r22, r28
     688:	6f 5f       	subi	r22, 0xFF	; 255
     68a:	7f 4f       	sbci	r23, 0xFF	; 255
     68c:	80 91 47 09 	lds	r24, 0x0947	; 0x800947 <xMessageBuffer>
     690:	90 91 48 09 	lds	r25, 0x0948	; 0x800948 <xMessageBuffer+0x1>
     694:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <xStreamBufferReceive>
>>>>>>> 131ed066d936db6cb82dc024f16de69a40fef126
												( void * ) ucRxData,
												sizeof( ucRxData ),
												xBlockTime );
		if(xReceivedBytes==0){
<<<<<<< HEAD
    1536:	89 2b       	or	r24, r25
    1538:	21 f4       	brne	.+8      	; 0x1542 <vTask2+0x40>
			UART0_puts("NO data\n");
    153a:	89 e2       	ldi	r24, 0x29	; 41
    153c:	92 e0       	ldi	r25, 0x02	; 2
    153e:	0f d2       	rcall	.+1054   	; 0x195e <UART0_puts>
    1540:	ea cf       	rjmp	.-44     	; 0x1516 <vTask2+0x14>
		}
		else{
			UART0_puts("Vtask2 receives data\n");
    1542:	82 e3       	ldi	r24, 0x32	; 50
    1544:	92 e0       	ldi	r25, 0x02	; 2
    1546:	0b d2       	rcall	.+1046   	; 0x195e <UART0_puts>
    1548:	8e 01       	movw	r16, r28
    154a:	0f 5f       	subi	r16, 0xFF	; 255
    154c:	1f 4f       	sbci	r17, 0xFF	; 255
			for(uint8_t i =0 ; i<4;i++){
				UART0_OutUDec(ucRxData[i]);
    154e:	f8 01       	movw	r30, r16
    1550:	61 91       	ld	r22, Z+
    1552:	8f 01       	movw	r16, r30
    1554:	70 e0       	ldi	r23, 0x00	; 0
    1556:	80 e0       	ldi	r24, 0x00	; 0
    1558:	90 e0       	ldi	r25, 0x00	; 0
				UART0_putc(',');
    155a:	e5 d1       	rcall	.+970    	; 0x1926 <UART0_OutUDec>
    155c:	8c e2       	ldi	r24, 0x2C	; 44
=======
     698:	89 2b       	or	r24, r25
     69a:	21 f4       	brne	.+8      	; 0x6a4 <vTask2+0x40>
			UART0_puts("NO data\n");
     69c:	86 e1       	ldi	r24, 0x16	; 22
     69e:	92 e0       	ldi	r25, 0x02	; 2
     6a0:	04 d2       	rcall	.+1032   	; 0xaaa <UART0_puts>
     6a2:	ea cf       	rjmp	.-44     	; 0x678 <vTask2+0x14>
		}
		else{
			UART0_puts("Vtask2 receives data\n");
     6a4:	8f e1       	ldi	r24, 0x1F	; 31
     6a6:	92 e0       	ldi	r25, 0x02	; 2
     6a8:	00 d2       	rcall	.+1024   	; 0xaaa <UART0_puts>
     6aa:	8e 01       	movw	r16, r28
     6ac:	0f 5f       	subi	r16, 0xFF	; 255
     6ae:	1f 4f       	sbci	r17, 0xFF	; 255
			for(uint8_t i =0 ; i<4;i++){
				UART0_OutUDec(ucRxData[i]);
     6b0:	f8 01       	movw	r30, r16
     6b2:	61 91       	ld	r22, Z+
     6b4:	8f 01       	movw	r16, r30
     6b6:	70 e0       	ldi	r23, 0x00	; 0
     6b8:	80 e0       	ldi	r24, 0x00	; 0
     6ba:	90 e0       	ldi	r25, 0x00	; 0
				UART0_putc(',');
     6bc:	da d1       	rcall	.+948    	; 0xa72 <UART0_OutUDec>
     6be:	8c e2       	ldi	r24, 0x2C	; 44
>>>>>>> 131ed066d936db6cb82dc024f16de69a40fef126
		if(xReceivedBytes==0){
			UART0_puts("NO data\n");
		}
		else{
			UART0_puts("Vtask2 receives data\n");
			for(uint8_t i =0 ; i<4;i++){
<<<<<<< HEAD
    155e:	ca d1       	rcall	.+916    	; 0x18f4 <UART0_putc>
    1560:	0e 15       	cp	r16, r14
    1562:	1f 05       	cpc	r17, r15
=======
     6c0:	bf d1       	rcall	.+894    	; 0xa40 <UART0_putc>
     6c2:	0e 15       	cp	r16, r14
     6c4:	1f 05       	cpc	r17, r15
>>>>>>> 131ed066d936db6cb82dc024f16de69a40fef126
				UART0_OutUDec(ucRxData[i]);
				UART0_putc(',');
			}
			UART0_putc('\n');
<<<<<<< HEAD
    1564:	a1 f7       	brne	.-24     	; 0x154e <vTask2+0x4c>
    1566:	8a e0       	ldi	r24, 0x0A	; 10
    1568:	c5 d1       	rcall	.+906    	; 0x18f4 <UART0_putc>
=======
     6c6:	a1 f7       	brne	.-24     	; 0x6b0 <vTask2+0x4c>
     6c8:	8a e0       	ldi	r24, 0x0A	; 10
     6ca:	ba d1       	rcall	.+884    	; 0xa40 <UART0_putc>
>>>>>>> 131ed066d936db6cb82dc024f16de69a40fef126
			//vTaskDelay(1000/portTICK_PERIOD_MS);
		
		}
	
	}
<<<<<<< HEAD
    156a:	d5 cf       	rjmp	.-86     	; 0x1516 <vTask2+0x14>

0000156c <vTask1>:
=======
     6cc:	d5 cf       	rjmp	.-86     	; 0x678 <vTask2+0x14>

000006ce <vTask1>:
>>>>>>> 131ed066d936db6cb82dc024f16de69a40fef126
}



static void vTask1(void* pvParameters)
{
<<<<<<< HEAD
    156c:	cf 93       	push	r28
    156e:	df 93       	push	r29
    1570:	00 d0       	rcall	.+0      	; 0x1572 <vTask1+0x6>
    1572:	1f 92       	push	r1
    1574:	cd b7       	in	r28, 0x3d	; 61
    1576:	de b7       	in	r29, 0x3e	; 62
	uint8_t ucArrayToSend[] = { 5, 6, 9, 1 };
    1578:	85 e0       	ldi	r24, 0x05	; 5
    157a:	89 83       	std	Y+1, r24	; 0x01
    157c:	86 e0       	ldi	r24, 0x06	; 6
    157e:	8a 83       	std	Y+2, r24	; 0x02
    1580:	89 e0       	ldi	r24, 0x09	; 9
    1582:	8b 83       	std	Y+3, r24	; 0x03
    1584:	81 e0       	ldi	r24, 0x01	; 1
    1586:	8c 83       	std	Y+4, r24	; 0x04
    1588:	7e 01       	movw	r14, r28
    158a:	85 e0       	ldi	r24, 0x05	; 5
    158c:	e8 0e       	add	r14, r24
    158e:	f1 1c       	adc	r15, r1
    1590:	8e 01       	movw	r16, r28
    1592:	0f 5f       	subi	r16, 0xFF	; 255
    1594:	1f 4f       	sbci	r17, 0xFF	; 255
=======
     6ce:	cf 93       	push	r28
     6d0:	df 93       	push	r29
     6d2:	00 d0       	rcall	.+0      	; 0x6d4 <vTask1+0x6>
     6d4:	1f 92       	push	r1
     6d6:	cd b7       	in	r28, 0x3d	; 61
     6d8:	de b7       	in	r29, 0x3e	; 62
	uint8_t ucArrayToSend[] = { 5, 6, 9, 1 };
     6da:	85 e0       	ldi	r24, 0x05	; 5
     6dc:	89 83       	std	Y+1, r24	; 0x01
     6de:	86 e0       	ldi	r24, 0x06	; 6
     6e0:	8a 83       	std	Y+2, r24	; 0x02
     6e2:	89 e0       	ldi	r24, 0x09	; 9
     6e4:	8b 83       	std	Y+3, r24	; 0x03
     6e6:	81 e0       	ldi	r24, 0x01	; 1
     6e8:	8c 83       	std	Y+4, r24	; 0x04
     6ea:	7e 01       	movw	r14, r28
     6ec:	85 e0       	ldi	r24, 0x05	; 5
     6ee:	e8 0e       	add	r14, r24
     6f0:	f1 1c       	adc	r15, r1
     6f2:	8e 01       	movw	r16, r28
     6f4:	0f 5f       	subi	r16, 0xFF	; 255
     6f6:	1f 4f       	sbci	r17, 0xFF	; 255
>>>>>>> 131ed066d936db6cb82dc024f16de69a40fef126
}



static void vTask1(void* pvParameters)
{
<<<<<<< HEAD
    1596:	f8 01       	movw	r30, r16
=======
     6f8:	f8 01       	movw	r30, r16
>>>>>>> 131ed066d936db6cb82dc024f16de69a40fef126
	while(1)
	{
			size_t xBytesSent;
		
			for(uint8_t i =0 ;i<4;i++){
				++ucArrayToSend[i];
<<<<<<< HEAD
    1598:	80 81       	ld	r24, Z
    159a:	8f 5f       	subi	r24, 0xFF	; 255
    159c:	81 93       	st	Z+, r24
=======
     6fa:	80 81       	ld	r24, Z
     6fc:	8f 5f       	subi	r24, 0xFF	; 255
     6fe:	81 93       	st	Z+, r24
>>>>>>> 131ed066d936db6cb82dc024f16de69a40fef126
	uint8_t ucArrayToSend[] = { 5, 6, 9, 1 };
	while(1)
	{
			size_t xBytesSent;
		
			for(uint8_t i =0 ;i<4;i++){
<<<<<<< HEAD
    159e:	ee 15       	cp	r30, r14
    15a0:	ff 05       	cpc	r31, r15
    15a2:	d1 f7       	brne	.-12     	; 0x1598 <vTask1+0x2c>
=======
     700:	ee 15       	cp	r30, r14
     702:	ff 05       	cpc	r31, r15
     704:	d1 f7       	brne	.-12     	; 0x6fa <vTask1+0x2c>
>>>>>>> 131ed066d936db6cb82dc024f16de69a40fef126
				++ucArrayToSend[i];
			}
		const TickType_t x100ms = pdMS_TO_TICKS( 100 );
		/* Send an array to the message buffer, blocking for a maximum of 100ms to
		wait for enough space to be available in the message buffer. */
		UART0_puts("Vtask1 sends data\n");
<<<<<<< HEAD
    15a4:	88 e4       	ldi	r24, 0x48	; 72
    15a6:	92 e0       	ldi	r25, 0x02	; 2
    15a8:	da d1       	rcall	.+948    	; 0x195e <UART0_puts>
		for(uint8_t i =0 ; i<4;i++){
				UART0_OutUDec(ucArrayToSend[i]);
    15aa:	f8 01       	movw	r30, r16
    15ac:	61 91       	ld	r22, Z+
    15ae:	8f 01       	movw	r16, r30
    15b0:	70 e0       	ldi	r23, 0x00	; 0
    15b2:	80 e0       	ldi	r24, 0x00	; 0
    15b4:	90 e0       	ldi	r25, 0x00	; 0
    15b6:	b7 d1       	rcall	.+878    	; 0x1926 <UART0_OutUDec>
				UART0_putc(',');
    15b8:	8c e2       	ldi	r24, 0x2C	; 44
    15ba:	9c d1       	rcall	.+824    	; 0x18f4 <UART0_putc>
    15bc:	0e 15       	cp	r16, r14
=======
     706:	85 e3       	ldi	r24, 0x35	; 53
     708:	92 e0       	ldi	r25, 0x02	; 2
     70a:	cf d1       	rcall	.+926    	; 0xaaa <UART0_puts>
		for(uint8_t i =0 ; i<4;i++){
				UART0_OutUDec(ucArrayToSend[i]);
     70c:	f8 01       	movw	r30, r16
     70e:	61 91       	ld	r22, Z+
     710:	8f 01       	movw	r16, r30
     712:	70 e0       	ldi	r23, 0x00	; 0
     714:	80 e0       	ldi	r24, 0x00	; 0
     716:	90 e0       	ldi	r25, 0x00	; 0
     718:	ac d1       	rcall	.+856    	; 0xa72 <UART0_OutUDec>
				UART0_putc(',');
     71a:	8c e2       	ldi	r24, 0x2C	; 44
     71c:	91 d1       	rcall	.+802    	; 0xa40 <UART0_putc>
     71e:	0e 15       	cp	r16, r14
>>>>>>> 131ed066d936db6cb82dc024f16de69a40fef126
			}
		const TickType_t x100ms = pdMS_TO_TICKS( 100 );
		/* Send an array to the message buffer, blocking for a maximum of 100ms to
		wait for enough space to be available in the message buffer. */
		UART0_puts("Vtask1 sends data\n");
		for(uint8_t i =0 ; i<4;i++){
<<<<<<< HEAD
    15be:	1f 05       	cpc	r17, r15
    15c0:	a1 f7       	brne	.-24     	; 0x15aa <vTask1+0x3e>
=======
     720:	1f 05       	cpc	r17, r15
     722:	a1 f7       	brne	.-24     	; 0x70c <vTask1+0x3e>
>>>>>>> 131ed066d936db6cb82dc024f16de69a40fef126
				UART0_OutUDec(ucArrayToSend[i]);
				UART0_putc(',');
		}
		UART0_putc('\n');
<<<<<<< HEAD
    15c2:	8a e0       	ldi	r24, 0x0A	; 10
    15c4:	97 d1       	rcall	.+814    	; 0x18f4 <UART0_putc>
    15c6:	20 e0       	ldi	r18, 0x00	; 0
		xBytesSent = xMessageBufferSend( xMessageBuffer,
    15c8:	30 e0       	ldi	r19, 0x00	; 0
    15ca:	44 e0       	ldi	r20, 0x04	; 4
    15cc:	50 e0       	ldi	r21, 0x00	; 0
    15ce:	be 01       	movw	r22, r28
    15d0:	6f 5f       	subi	r22, 0xFF	; 255
    15d2:	7f 4f       	sbci	r23, 0xFF	; 255
    15d4:	80 91 81 0b 	lds	r24, 0x0B81	; 0x800b81 <xMessageBuffer>
    15d8:	90 91 82 0b 	lds	r25, 0x0B82	; 0x800b82 <xMessageBuffer+0x1>
    15dc:	0e 94 d1 15 	call	0x2ba2	; 0x2ba2 <xStreamBufferSend>
=======
     724:	8a e0       	ldi	r24, 0x0A	; 10
     726:	8c d1       	rcall	.+792    	; 0xa40 <UART0_putc>
     728:	20 e0       	ldi	r18, 0x00	; 0
		xBytesSent = xMessageBufferSend( xMessageBuffer,
     72a:	30 e0       	ldi	r19, 0x00	; 0
     72c:	44 e0       	ldi	r20, 0x04	; 4
     72e:	50 e0       	ldi	r21, 0x00	; 0
     730:	be 01       	movw	r22, r28
     732:	6f 5f       	subi	r22, 0xFF	; 255
     734:	7f 4f       	sbci	r23, 0xFF	; 255
     736:	80 91 47 09 	lds	r24, 0x0947	; 0x800947 <xMessageBuffer>
     73a:	90 91 48 09 	lds	r25, 0x0948	; 0x800948 <xMessageBuffer+0x1>
     73e:	0e 94 77 0e 	call	0x1cee	; 0x1cee <xStreamBufferSend>
>>>>>>> 131ed066d936db6cb82dc024f16de69a40fef126
										( void * ) ucArrayToSend,
										sizeof( ucArrayToSend ),
										0 );
		UART0_puts("Vtask1 sent_____R data\n");
<<<<<<< HEAD
    15e0:	8b e5       	ldi	r24, 0x5B	; 91
    15e2:	92 e0       	ldi	r25, 0x02	; 2
    15e4:	bc d1       	rcall	.+888    	; 0x195e <UART0_puts>
    15e6:	8a ef       	ldi	r24, 0xFA	; 250
	    vTaskDelay(4000/portTICK_PERIOD_MS);
    15e8:	90 e0       	ldi	r25, 0x00	; 0
    15ea:	0e 94 02 1a 	call	0x3404	; 0x3404 <vTaskDelay>
    15ee:	d0 cf       	rjmp	.-96     	; 0x1590 <vTask1+0x24>

000015f0 <main>:
										
		
	}
    15f0:	cf 93       	push	r28
static uint8_t ucStorageBuffer[ STORAGE_SIZE_BYTES ];
=======
     742:	88 e4       	ldi	r24, 0x48	; 72
     744:	92 e0       	ldi	r25, 0x02	; 2
     746:	b1 d1       	rcall	.+866    	; 0xaaa <UART0_puts>
     748:	8a ef       	ldi	r24, 0xFA	; 250
	    vTaskDelay(4000/portTICK_PERIOD_MS);
     74a:	90 e0       	ldi	r25, 0x00	; 0
     74c:	0e 94 a7 12 	call	0x254e	; 0x254e <vTaskDelay>
     750:	d0 cf       	rjmp	.-96     	; 0x6f2 <vTask1+0x24>

00000752 <main>:
										
		
	}
     752:	8f ef       	ldi	r24, 0xFF	; 255
>>>>>>> 131ed066d936db6cb82dc024f16de69a40fef126
/* The variable used to hold the message buffer structure. */
StaticMessageBuffer_t xMessageBufferStruct;
MessageBufferHandle_t xMessageBuffer;

int main() {
    15f2:	df 93       	push	r29
    15f4:	1f 92       	push	r1
    15f6:	cd b7       	in	r28, 0x3d	; 61
    15f8:	de b7       	in	r29, 0x3e	; 62
	DDRE = 0xFF;
<<<<<<< HEAD
    15fa:	8f ef       	ldi	r24, 0xFF	; 255
    15fc:	8d b9       	out	0x0d, r24	; 13
	UART0_init(9600);
    15fe:	60 e8       	ldi	r22, 0x80	; 128
    1600:	75 e2       	ldi	r23, 0x25	; 37
    1602:	80 e0       	ldi	r24, 0x00	; 0
    1604:	90 e0       	ldi	r25, 0x00	; 0
    1606:	21 d1       	rcall	.+578    	; 0x184a <UART0_init>
	millis_init();
    1608:	0e 94 59 1f 	call	0x3eb2	; 0x3eb2 <millis_init>
	DIO_init();
    160c:	69 d0       	rcall	.+210    	; 0x16e0 <DIO_init>
	Lcd_init(UART3,115200,1);
    160e:	21 e0       	ldi	r18, 0x01	; 1
    1610:	40 e0       	ldi	r20, 0x00	; 0
    1612:	52 ec       	ldi	r21, 0xC2	; 194
    1614:	61 e0       	ldi	r22, 0x01	; 1
    1616:	70 e0       	ldi	r23, 0x00	; 0
    1618:	83 e0       	ldi	r24, 0x03	; 3
    161a:	0e 94 34 02 	call	0x468	; 0x468 <Lcd_init>
		
	TaskHandle_t xHandle1 = NULL , xHandle2 = NULL;
	/* Create the task without using any dynamic memory allocation. */
	xHandle1 = xTaskCreateStatic(
    161e:	0f 2e       	mov	r0, r31
    1620:	f9 e5       	ldi	r31, 0x59	; 89
    1622:	cf 2e       	mov	r12, r31
    1624:	fb e0       	ldi	r31, 0x0B	; 11
    1626:	df 2e       	mov	r13, r31
    1628:	f0 2d       	mov	r31, r0
    162a:	0f 2e       	mov	r0, r31
    162c:	f6 eb       	ldi	r31, 0xB6	; 182
    162e:	ef 2e       	mov	r14, r31
    1630:	fb e0       	ldi	r31, 0x0B	; 11
    1632:	ff 2e       	mov	r15, r31
    1634:	f0 2d       	mov	r31, r0
    1636:	02 e0       	ldi	r16, 0x02	; 2
    1638:	20 e0       	ldi	r18, 0x00	; 0
    163a:	30 e0       	ldi	r19, 0x00	; 0
    163c:	48 ec       	ldi	r20, 0xC8	; 200
    163e:	50 e0       	ldi	r21, 0x00	; 0
    1640:	63 e7       	ldi	r22, 0x73	; 115
    1642:	72 e0       	ldi	r23, 0x02	; 2
    1644:	86 eb       	ldi	r24, 0xB6	; 182
    1646:	9a e0       	ldi	r25, 0x0A	; 10
    1648:	0e 94 76 17 	call	0x2eec	; 0x2eec <xTaskCreateStatic>
=======
     754:	8d b9       	out	0x0d, r24	; 13
	UART0_init(9600);
     756:	60 e8       	ldi	r22, 0x80	; 128
     758:	75 e2       	ldi	r23, 0x25	; 37
     75a:	80 e0       	ldi	r24, 0x00	; 0
     75c:	90 e0       	ldi	r25, 0x00	; 0
     75e:	1b d1       	rcall	.+566    	; 0x996 <UART0_init>
	millis_init();
     760:	0e 94 9b 17 	call	0x2f36	; 0x2f36 <millis_init>
	DIO_init();
     764:	63 d0       	rcall	.+198    	; 0x82c <DIO_init>
	Lcd_init(UART3,115200,1);
     766:	21 e0       	ldi	r18, 0x01	; 1
     768:	40 e0       	ldi	r20, 0x00	; 0
     76a:	52 ec       	ldi	r21, 0xC2	; 194
     76c:	61 e0       	ldi	r22, 0x01	; 1
     76e:	70 e0       	ldi	r23, 0x00	; 0
     770:	83 e0       	ldi	r24, 0x03	; 3
     772:	76 de       	rcall	.-788    	; 0x460 <Lcd_init>
// 	_delay_ms(1000);
	
	TaskHandle_t xHandle1 = NULL , xHandle2 = NULL ;
	//UART2_init(115200);
	/* Create the task without using any dynamic memory allocation. */
	xHandle1 = xTaskCreateStatic(
     774:	0f 2e       	mov	r0, r31
     776:	ff e1       	ldi	r31, 0x1F	; 31
     778:	cf 2e       	mov	r12, r31
     77a:	f9 e0       	ldi	r31, 0x09	; 9
     77c:	df 2e       	mov	r13, r31
     77e:	f0 2d       	mov	r31, r0
     780:	0f 2e       	mov	r0, r31
     782:	fc e7       	ldi	r31, 0x7C	; 124
     784:	ef 2e       	mov	r14, r31
     786:	f9 e0       	ldi	r31, 0x09	; 9
     788:	ff 2e       	mov	r15, r31
     78a:	f0 2d       	mov	r31, r0
     78c:	02 e0       	ldi	r16, 0x02	; 2
     78e:	20 e0       	ldi	r18, 0x00	; 0
     790:	30 e0       	ldi	r19, 0x00	; 0
     792:	48 ec       	ldi	r20, 0xC8	; 200
     794:	50 e0       	ldi	r21, 0x00	; 0
     796:	60 e6       	ldi	r22, 0x60	; 96
     798:	72 e0       	ldi	r23, 0x02	; 2
     79a:	87 e6       	ldi	r24, 0x67	; 103
     79c:	93 e0       	ldi	r25, 0x03	; 3
     79e:	0e 94 1c 10 	call	0x2038	; 0x2038 <xTaskCreateStatic>
>>>>>>> 131ed066d936db6cb82dc024f16de69a40fef126
					NULL, /* Parameter passed into the task. */
					2,/* Priority at which the task is created. */
					xStack1, /* Array to use as the task's stack. */
					&xTask1Buffer); /* Variable to hold the task's data structure. */
	
	xHandle2 = xTaskCreateStatic(
<<<<<<< HEAD
    164c:	0f 2e       	mov	r0, r31
    164e:	f3 e8       	ldi	r31, 0x83	; 131
    1650:	cf 2e       	mov	r12, r31
    1652:	fb e0       	ldi	r31, 0x0B	; 11
    1654:	df 2e       	mov	r13, r31
    1656:	f0 2d       	mov	r31, r0
    1658:	0f 2e       	mov	r0, r31
    165a:	fd e8       	ldi	r31, 0x8D	; 141
    165c:	ef 2e       	mov	r14, r31
    165e:	fc e0       	ldi	r31, 0x0C	; 12
    1660:	ff 2e       	mov	r15, r31
    1662:	f0 2d       	mov	r31, r0
    1664:	20 e0       	ldi	r18, 0x00	; 0
    1666:	30 e0       	ldi	r19, 0x00	; 0
    1668:	48 ec       	ldi	r20, 0xC8	; 200
    166a:	50 e0       	ldi	r21, 0x00	; 0
    166c:	69 e7       	ldi	r22, 0x79	; 121
    166e:	72 e0       	ldi	r23, 0x02	; 2
    1670:	81 e8       	ldi	r24, 0x81	; 129
    1672:	9a e0       	ldi	r25, 0x0A	; 10
    1674:	0e 94 76 17 	call	0x2eec	; 0x2eec <xTaskCreateStatic>
				NULL, /* Parameter passed into the task. */
				2,/* Priority at which the task is created. */
				xStack2, /* Array to use as the task's stack. */
=======
     7a2:	0f 2e       	mov	r0, r31
     7a4:	f9 e4       	ldi	r31, 0x49	; 73
     7a6:	cf 2e       	mov	r12, r31
     7a8:	f9 e0       	ldi	r31, 0x09	; 9
     7aa:	df 2e       	mov	r13, r31
     7ac:	f0 2d       	mov	r31, r0
     7ae:	0f 2e       	mov	r0, r31
     7b0:	f3 e5       	ldi	r31, 0x53	; 83
     7b2:	ef 2e       	mov	r14, r31
     7b4:	fa e0       	ldi	r31, 0x0A	; 10
     7b6:	ff 2e       	mov	r15, r31
     7b8:	f0 2d       	mov	r31, r0
     7ba:	20 e0       	ldi	r18, 0x00	; 0
     7bc:	30 e0       	ldi	r19, 0x00	; 0
     7be:	48 ec       	ldi	r20, 0xC8	; 200
     7c0:	50 e0       	ldi	r21, 0x00	; 0
     7c2:	66 e6       	ldi	r22, 0x66	; 102
     7c4:	72 e0       	ldi	r23, 0x02	; 2
     7c6:	82 e3       	ldi	r24, 0x32	; 50
     7c8:	93 e0       	ldi	r25, 0x03	; 3
     7ca:	0e 94 1c 10 	call	0x2038	; 0x2038 <xTaskCreateStatic>
>>>>>>> 131ed066d936db6cb82dc024f16de69a40fef126
				&xTask2Buffer ); /* Variable to hold the task's data structure. */

		xMessageBuffer = xMessageBufferCreateStatic( sizeof( ucStorageBuffer ),
<<<<<<< HEAD
    1678:	0e e7       	ldi	r16, 0x7E	; 126
    167a:	1c e0       	ldi	r17, 0x0C	; 12
    167c:	23 ee       	ldi	r18, 0xE3	; 227
    167e:	34 e0       	ldi	r19, 0x04	; 4
    1680:	41 e0       	ldi	r20, 0x01	; 1
    1682:	60 e0       	ldi	r22, 0x00	; 0
    1684:	70 e0       	ldi	r23, 0x00	; 0
    1686:	84 e6       	ldi	r24, 0x64	; 100
    1688:	90 e0       	ldi	r25, 0x00	; 0
    168a:	0e 94 90 15 	call	0x2b20	; 0x2b20 <xStreamBufferGenericCreateStatic>
    168e:	90 93 82 0b 	sts	0x0B82, r25	; 0x800b82 <xMessageBuffer+0x1>
    1692:	80 93 81 0b 	sts	0x0B81, r24	; 0x800b81 <xMessageBuffer>
// 		Lcd_Write(LCD_TEMP_DATA,50);
// 		_delay_ms(1000);
// 		Lcd_Write(LCD_TEMP_DATA,52);
// 		_delay_ms(1000);
// }
	char x=0;
    1696:	19 82       	std	Y+1, r1	; 0x01
	LCD_main(&x);
    1698:	ce 01       	movw	r24, r28
    169a:	01 96       	adiw	r24, 0x01	; 1
    169c:	0e 94 f6 1e 	call	0x3dec	; 0x3dec <LCD_main>

	  // Start scheduler.
	  vTaskStartScheduler();
    16a0:	0e 94 72 18 	call	0x30e4	; 0x30e4 <vTaskStartScheduler>
    16a4:	ff cf       	rjmp	.-2      	; 0x16a4 <main+0xb4>

000016a6 <__vector_29>:
    16a6:	1f 92       	push	r1
    16a8:	0f 92       	push	r0
    16aa:	0f b6       	in	r0, 0x3f	; 63
    16ac:	0f 92       	push	r0
    16ae:	11 24       	eor	r1, r1
    16b0:	2f 93       	push	r18
    16b2:	8f 93       	push	r24
    16b4:	9f 93       	push	r25
    16b6:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
    16ba:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
    16be:	90 e0       	ldi	r25, 0x00	; 0
    16c0:	92 2b       	or	r25, r18
    16c2:	90 93 49 05 	sts	0x0549, r25	; 0x800549 <g_analog_data+0x1>
    16c6:	80 93 48 05 	sts	0x0548, r24	; 0x800548 <g_analog_data>
    16ca:	81 e0       	ldi	r24, 0x01	; 1
    16cc:	80 93 47 05 	sts	0x0547, r24	; 0x800547 <g_converted>
    16d0:	9f 91       	pop	r25
    16d2:	8f 91       	pop	r24
    16d4:	2f 91       	pop	r18
    16d6:	0f 90       	pop	r0
    16d8:	0f be       	out	0x3f, r0	; 63
    16da:	0f 90       	pop	r0
    16dc:	1f 90       	pop	r1
    16de:	18 95       	reti

000016e0 <DIO_init>:
    16e0:	50 98       	cbi	0x0a, 0	; 10
    16e2:	51 98       	cbi	0x0a, 1	; 10
    16e4:	51 98       	cbi	0x0a, 1	; 10
    16e6:	53 98       	cbi	0x0a, 3	; 10
    16e8:	20 98       	cbi	0x04, 0	; 4
    16ea:	55 98       	cbi	0x0a, 5	; 10
    16ec:	54 98       	cbi	0x0a, 4	; 10
    16ee:	3c 9a       	sbi	0x07, 4	; 7
    16f0:	3f 9a       	sbi	0x07, 7	; 7
    16f2:	3d 9a       	sbi	0x07, 5	; 7
    16f4:	39 9a       	sbi	0x07, 1	; 7
    16f6:	39 9a       	sbi	0x07, 1	; 7
    16f8:	57 9a       	sbi	0x0a, 7	; 10
    16fa:	38 9a       	sbi	0x07, 0	; 7
    16fc:	38 98       	cbi	0x07, 0	; 7
    16fe:	56 9a       	sbi	0x0a, 6	; 10
    1700:	3b 9a       	sbi	0x07, 3	; 7
    1702:	e4 e0       	ldi	r30, 0x04	; 4
    1704:	f1 e0       	ldi	r31, 0x01	; 1
    1706:	80 81       	ld	r24, Z
    1708:	84 60       	ori	r24, 0x04	; 4
    170a:	80 83       	st	Z, r24
    170c:	3f 9a       	sbi	0x07, 7	; 7
    170e:	3f 9a       	sbi	0x07, 7	; 7
    1710:	3f 9a       	sbi	0x07, 7	; 7
    1712:	e1 e0       	ldi	r30, 0x01	; 1
    1714:	f1 e0       	ldi	r31, 0x01	; 1
    1716:	80 81       	ld	r24, Z
    1718:	8e 7f       	andi	r24, 0xFE	; 254
    171a:	80 83       	st	Z, r24
    171c:	80 81       	ld	r24, Z
    171e:	82 60       	ori	r24, 0x02	; 2
    1720:	80 83       	st	Z, r24
    1722:	e2 e0       	ldi	r30, 0x02	; 2
    1724:	f1 e0       	ldi	r31, 0x01	; 1
    1726:	80 81       	ld	r24, Z
    1728:	81 60       	ori	r24, 0x01	; 1
    172a:	80 83       	st	Z, r24
    172c:	52 98       	cbi	0x0a, 2	; 10
    172e:	53 9a       	sbi	0x0a, 3	; 10
    1730:	5a 9a       	sbi	0x0b, 2	; 11
    1732:	08 95       	ret

00001734 <Modbus_change_state>:
    1734:	88 23       	and	r24, r24
    1736:	19 f0       	breq	.+6      	; 0x173e <Modbus_change_state+0xa>
    1738:	81 30       	cpi	r24, 0x01	; 1
    173a:	89 f0       	breq	.+34     	; 0x175e <Modbus_change_state+0x2a>
    173c:	08 95       	ret
    173e:	61 30       	cpi	r22, 0x01	; 1
    1740:	31 f4       	brne	.+12     	; 0x174e <Modbus_change_state+0x1a>
    1742:	e5 e0       	ldi	r30, 0x05	; 5
    1744:	f1 e0       	ldi	r31, 0x01	; 1
    1746:	80 81       	ld	r24, Z
    1748:	84 60       	ori	r24, 0x04	; 4
    174a:	80 83       	st	Z, r24
    174c:	08 95       	ret
    174e:	61 11       	cpse	r22, r1
    1750:	0d c0       	rjmp	.+26     	; 0x176c <Modbus_change_state+0x38>
    1752:	e5 e0       	ldi	r30, 0x05	; 5
    1754:	f1 e0       	ldi	r31, 0x01	; 1
    1756:	80 81       	ld	r24, Z
    1758:	8b 7f       	andi	r24, 0xFB	; 251
    175a:	80 83       	st	Z, r24
    175c:	08 95       	ret
    175e:	61 30       	cpi	r22, 0x01	; 1
    1760:	11 f4       	brne	.+4      	; 0x1766 <Modbus_change_state+0x32>
    1762:	47 9a       	sbi	0x08, 7	; 8
    1764:	08 95       	ret
    1766:	61 11       	cpse	r22, r1
    1768:	01 c0       	rjmp	.+2      	; 0x176c <Modbus_change_state+0x38>
    176a:	47 98       	cbi	0x08, 7	; 8
    176c:	08 95       	ret

0000176e <__vector_25>:
    176e:	1f 92       	push	r1
    1770:	0f 92       	push	r0
    1772:	0f b6       	in	r0, 0x3f	; 63
    1774:	0f 92       	push	r0
    1776:	11 24       	eor	r1, r1
    1778:	0b b6       	in	r0, 0x3b	; 59
    177a:	0f 92       	push	r0
    177c:	2f 93       	push	r18
    177e:	3f 93       	push	r19
    1780:	4f 93       	push	r20
    1782:	5f 93       	push	r21
    1784:	8f 93       	push	r24
    1786:	9f 93       	push	r25
    1788:	ef 93       	push	r30
    178a:	ff 93       	push	r31
    178c:	20 91 c0 00 	lds	r18, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
    1790:	30 91 c6 00 	lds	r19, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    1794:	28 71       	andi	r18, 0x18	; 24
    1796:	80 91 5f 08 	lds	r24, 0x085F	; 0x80085f <UART_RxHead>
    179a:	90 e0       	ldi	r25, 0x00	; 0
    179c:	01 96       	adiw	r24, 0x01	; 1
    179e:	8f 77       	andi	r24, 0x7F	; 127
    17a0:	99 27       	eor	r25, r25
    17a2:	40 91 5e 08 	lds	r20, 0x085E	; 0x80085e <UART_RxTail>
    17a6:	50 e0       	ldi	r21, 0x00	; 0
    17a8:	84 17       	cp	r24, r20
    17aa:	95 07       	cpc	r25, r21
    17ac:	39 f0       	breq	.+14     	; 0x17bc <__vector_25+0x4e>
    17ae:	80 93 5f 08 	sts	0x085F, r24	; 0x80085f <UART_RxHead>
    17b2:	fc 01       	movw	r30, r24
    17b4:	ee 59       	subi	r30, 0x9E	; 158
    17b6:	f7 4f       	sbci	r31, 0xF7	; 247
    17b8:	30 83       	st	Z, r19
    17ba:	01 c0       	rjmp	.+2      	; 0x17be <__vector_25+0x50>
    17bc:	22 e0       	ldi	r18, 0x02	; 2
    17be:	20 93 5d 08 	sts	0x085D, r18	; 0x80085d <UART_LastRxError>
    17c2:	ff 91       	pop	r31
    17c4:	ef 91       	pop	r30
    17c6:	9f 91       	pop	r25
    17c8:	8f 91       	pop	r24
    17ca:	5f 91       	pop	r21
    17cc:	4f 91       	pop	r20
    17ce:	3f 91       	pop	r19
    17d0:	2f 91       	pop	r18
    17d2:	0f 90       	pop	r0
    17d4:	0b be       	out	0x3b, r0	; 59
    17d6:	0f 90       	pop	r0
    17d8:	0f be       	out	0x3f, r0	; 63
    17da:	0f 90       	pop	r0
    17dc:	1f 90       	pop	r1
    17de:	18 95       	reti

000017e0 <__vector_26>:
    17e0:	1f 92       	push	r1
    17e2:	0f 92       	push	r0
    17e4:	0f b6       	in	r0, 0x3f	; 63
    17e6:	0f 92       	push	r0
    17e8:	11 24       	eor	r1, r1
    17ea:	0b b6       	in	r0, 0x3b	; 59
    17ec:	0f 92       	push	r0
    17ee:	8f 93       	push	r24
    17f0:	9f 93       	push	r25
    17f2:	ef 93       	push	r30
    17f4:	ff 93       	push	r31
    17f6:	90 91 61 08 	lds	r25, 0x0861	; 0x800861 <UART_TxHead>
    17fa:	80 91 60 08 	lds	r24, 0x0860	; 0x800860 <UART_TxTail>
    17fe:	98 17       	cp	r25, r24
    1800:	89 f0       	breq	.+34     	; 0x1824 <__vector_26+0x44>
    1802:	80 91 60 08 	lds	r24, 0x0860	; 0x800860 <UART_TxTail>
    1806:	90 e0       	ldi	r25, 0x00	; 0
    1808:	01 96       	adiw	r24, 0x01	; 1
    180a:	8f 77       	andi	r24, 0x7F	; 127
    180c:	99 27       	eor	r25, r25
    180e:	80 93 60 08 	sts	0x0860, r24	; 0x800860 <UART_TxTail>
    1812:	fc 01       	movw	r30, r24
    1814:	ee 51       	subi	r30, 0x1E	; 30
    1816:	f7 4f       	sbci	r31, 0xF7	; 247
    1818:	80 81       	ld	r24, Z
    181a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    181e:	10 92 4d 05 	sts	0x054D, r1	; 0x80054d <UART0_Transmission_end>
    1822:	08 c0       	rjmp	.+16     	; 0x1834 <__vector_26+0x54>
    1824:	e1 ec       	ldi	r30, 0xC1	; 193
    1826:	f0 e0       	ldi	r31, 0x00	; 0
    1828:	80 81       	ld	r24, Z
    182a:	8f 7d       	andi	r24, 0xDF	; 223
    182c:	80 83       	st	Z, r24
    182e:	81 e0       	ldi	r24, 0x01	; 1
    1830:	80 93 4d 05 	sts	0x054D, r24	; 0x80054d <UART0_Transmission_end>
    1834:	ff 91       	pop	r31
    1836:	ef 91       	pop	r30
    1838:	9f 91       	pop	r25
    183a:	8f 91       	pop	r24
    183c:	0f 90       	pop	r0
    183e:	0b be       	out	0x3b, r0	; 59
    1840:	0f 90       	pop	r0
    1842:	0f be       	out	0x3f, r0	; 63
    1844:	0f 90       	pop	r0
    1846:	1f 90       	pop	r1
    1848:	18 95       	reti

0000184a <UART0_init>:
    184a:	0f 93       	push	r16
    184c:	1f 93       	push	r17
    184e:	8b 01       	movw	r16, r22
    1850:	9c 01       	movw	r18, r24
    1852:	f8 94       	cli
    1854:	10 92 61 08 	sts	0x0861, r1	; 0x800861 <UART_TxHead>
    1858:	10 92 60 08 	sts	0x0860, r1	; 0x800860 <UART_TxTail>
    185c:	10 92 5f 08 	sts	0x085F, r1	; 0x80085f <UART_RxHead>
    1860:	10 92 5e 08 	sts	0x085E, r1	; 0x80085e <UART_RxTail>
    1864:	78 94       	sei
    1866:	dc 01       	movw	r26, r24
    1868:	cb 01       	movw	r24, r22
    186a:	80 58       	subi	r24, 0x80	; 128
    186c:	9b 47       	sbci	r25, 0x7B	; 123
    186e:	a1 4e       	sbci	r26, 0xE1	; 225
    1870:	bf 4f       	sbci	r27, 0xFF	; 255
    1872:	88 0f       	add	r24, r24
    1874:	99 1f       	adc	r25, r25
    1876:	aa 1f       	adc	r26, r26
    1878:	bb 1f       	adc	r27, r27
    187a:	88 0f       	add	r24, r24
    187c:	99 1f       	adc	r25, r25
    187e:	aa 1f       	adc	r26, r26
    1880:	bb 1f       	adc	r27, r27
    1882:	bc 01       	movw	r22, r24
    1884:	cd 01       	movw	r24, r26
    1886:	66 0f       	add	r22, r22
    1888:	77 1f       	adc	r23, r23
    188a:	88 1f       	adc	r24, r24
    188c:	99 1f       	adc	r25, r25
    188e:	00 0f       	add	r16, r16
    1890:	11 1f       	adc	r17, r17
    1892:	22 1f       	adc	r18, r18
    1894:	33 1f       	adc	r19, r19
    1896:	00 0f       	add	r16, r16
    1898:	11 1f       	adc	r17, r17
    189a:	22 1f       	adc	r18, r18
    189c:	33 1f       	adc	r19, r19
    189e:	a9 01       	movw	r20, r18
    18a0:	98 01       	movw	r18, r16
    18a2:	22 0f       	add	r18, r18
    18a4:	33 1f       	adc	r19, r19
    18a6:	44 1f       	adc	r20, r20
    18a8:	55 1f       	adc	r21, r21
    18aa:	22 0f       	add	r18, r18
    18ac:	33 1f       	adc	r19, r19
    18ae:	44 1f       	adc	r20, r20
    18b0:	55 1f       	adc	r21, r21
    18b2:	0e 94 98 1f 	call	0x3f30	; 0x3f30 <__udivmodsi4>
    18b6:	ba 01       	movw	r22, r20
    18b8:	a9 01       	movw	r20, r18
    18ba:	41 50       	subi	r20, 0x01	; 1
    18bc:	51 09       	sbc	r21, r1
    18be:	61 09       	sbc	r22, r1
    18c0:	71 09       	sbc	r23, r1
    18c2:	57 ff       	sbrs	r21, 7
    18c4:	06 c0       	rjmp	.+12     	; 0x18d2 <UART0_init+0x88>
    18c6:	82 e0       	ldi	r24, 0x02	; 2
    18c8:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
    18cc:	5f 77       	andi	r21, 0x7F	; 127
    18ce:	66 27       	eor	r22, r22
    18d0:	77 27       	eor	r23, r23
    18d2:	bb 27       	eor	r27, r27
    18d4:	a7 2f       	mov	r26, r23
    18d6:	96 2f       	mov	r25, r22
    18d8:	85 2f       	mov	r24, r21
    18da:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
    18de:	40 93 c4 00 	sts	0x00C4, r20	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
    18e2:	88 e9       	ldi	r24, 0x98	; 152
    18e4:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    18e8:	86 e0       	ldi	r24, 0x06	; 6
    18ea:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
    18ee:	1f 91       	pop	r17
    18f0:	0f 91       	pop	r16
    18f2:	08 95       	ret

000018f4 <UART0_putc>:
    18f4:	40 91 61 08 	lds	r20, 0x0861	; 0x800861 <UART_TxHead>
    18f8:	50 e0       	ldi	r21, 0x00	; 0
    18fa:	4f 5f       	subi	r20, 0xFF	; 255
    18fc:	5f 4f       	sbci	r21, 0xFF	; 255
    18fe:	4f 77       	andi	r20, 0x7F	; 127
    1900:	55 27       	eor	r21, r21
    1902:	20 91 60 08 	lds	r18, 0x0860	; 0x800860 <UART_TxTail>
    1906:	30 e0       	ldi	r19, 0x00	; 0
    1908:	42 17       	cp	r20, r18
    190a:	53 07       	cpc	r21, r19
    190c:	d1 f3       	breq	.-12     	; 0x1902 <UART0_putc+0xe>
    190e:	fa 01       	movw	r30, r20
    1910:	ee 51       	subi	r30, 0x1E	; 30
    1912:	f7 4f       	sbci	r31, 0xF7	; 247
    1914:	80 83       	st	Z, r24
    1916:	40 93 61 08 	sts	0x0861, r20	; 0x800861 <UART_TxHead>
    191a:	e1 ec       	ldi	r30, 0xC1	; 193
    191c:	f0 e0       	ldi	r31, 0x00	; 0
    191e:	80 81       	ld	r24, Z
    1920:	80 62       	ori	r24, 0x20	; 32
    1922:	80 83       	st	Z, r24
    1924:	08 95       	ret

00001926 <UART0_OutUDec>:
    1926:	0f 93       	push	r16
    1928:	1f 93       	push	r17
    192a:	cf 93       	push	r28
    192c:	df 93       	push	r29
    192e:	6a 30       	cpi	r22, 0x0A	; 10
    1930:	71 05       	cpc	r23, r1
    1932:	81 05       	cpc	r24, r1
    1934:	91 05       	cpc	r25, r1
    1936:	58 f0       	brcs	.+22     	; 0x194e <UART0_OutUDec+0x28>
    1938:	2a e0       	ldi	r18, 0x0A	; 10
    193a:	30 e0       	ldi	r19, 0x00	; 0
    193c:	40 e0       	ldi	r20, 0x00	; 0
    193e:	50 e0       	ldi	r21, 0x00	; 0
    1940:	0e 94 98 1f 	call	0x3f30	; 0x3f30 <__udivmodsi4>
    1944:	06 2f       	mov	r16, r22
    1946:	ca 01       	movw	r24, r20
    1948:	b9 01       	movw	r22, r18
    194a:	ed df       	rcall	.-38     	; 0x1926 <UART0_OutUDec>
    194c:	60 2f       	mov	r22, r16
    194e:	80 e3       	ldi	r24, 0x30	; 48
    1950:	86 0f       	add	r24, r22
    1952:	d0 df       	rcall	.-96     	; 0x18f4 <UART0_putc>
    1954:	df 91       	pop	r29
    1956:	cf 91       	pop	r28
    1958:	1f 91       	pop	r17
    195a:	0f 91       	pop	r16
    195c:	08 95       	ret

0000195e <UART0_puts>:
    195e:	cf 93       	push	r28
    1960:	df 93       	push	r29
    1962:	ec 01       	movw	r28, r24
    1964:	88 81       	ld	r24, Y
    1966:	88 23       	and	r24, r24
    1968:	29 f0       	breq	.+10     	; 0x1974 <UART0_puts+0x16>
    196a:	21 96       	adiw	r28, 0x01	; 1
    196c:	c3 df       	rcall	.-122    	; 0x18f4 <UART0_putc>
    196e:	89 91       	ld	r24, Y+
    1970:	81 11       	cpse	r24, r1
    1972:	fc cf       	rjmp	.-8      	; 0x196c <UART0_puts+0xe>
    1974:	df 91       	pop	r29
    1976:	cf 91       	pop	r28
    1978:	08 95       	ret

0000197a <__vector_36>:
    197a:	1f 92       	push	r1
    197c:	0f 92       	push	r0
    197e:	0f b6       	in	r0, 0x3f	; 63
    1980:	0f 92       	push	r0
    1982:	11 24       	eor	r1, r1
    1984:	0b b6       	in	r0, 0x3b	; 59
    1986:	0f 92       	push	r0
    1988:	2f 93       	push	r18
    198a:	3f 93       	push	r19
    198c:	4f 93       	push	r20
    198e:	5f 93       	push	r21
    1990:	8f 93       	push	r24
    1992:	9f 93       	push	r25
    1994:	ef 93       	push	r30
    1996:	ff 93       	push	r31
    1998:	20 91 c8 00 	lds	r18, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
    199c:	30 91 ce 00 	lds	r19, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    19a0:	28 71       	andi	r18, 0x18	; 24
    19a2:	80 91 5a 07 	lds	r24, 0x075A	; 0x80075a <UART1_RxHead>
    19a6:	90 e0       	ldi	r25, 0x00	; 0
    19a8:	01 96       	adiw	r24, 0x01	; 1
    19aa:	8f 77       	andi	r24, 0x7F	; 127
    19ac:	99 27       	eor	r25, r25
    19ae:	40 91 59 07 	lds	r20, 0x0759	; 0x800759 <UART1_RxTail>
    19b2:	50 e0       	ldi	r21, 0x00	; 0
    19b4:	84 17       	cp	r24, r20
    19b6:	95 07       	cpc	r25, r21
    19b8:	39 f0       	breq	.+14     	; 0x19c8 <__vector_36+0x4e>
    19ba:	80 93 5a 07 	sts	0x075A, r24	; 0x80075a <UART1_RxHead>
    19be:	fc 01       	movw	r30, r24
    19c0:	e3 5a       	subi	r30, 0xA3	; 163
    19c2:	f8 4f       	sbci	r31, 0xF8	; 248
    19c4:	30 83       	st	Z, r19
    19c6:	01 c0       	rjmp	.+2      	; 0x19ca <__vector_36+0x50>
    19c8:	22 e0       	ldi	r18, 0x02	; 2
    19ca:	20 93 58 07 	sts	0x0758, r18	; 0x800758 <UART1_LastRxError>
    19ce:	ff 91       	pop	r31
    19d0:	ef 91       	pop	r30
    19d2:	9f 91       	pop	r25
    19d4:	8f 91       	pop	r24
    19d6:	5f 91       	pop	r21
    19d8:	4f 91       	pop	r20
    19da:	3f 91       	pop	r19
    19dc:	2f 91       	pop	r18
    19de:	0f 90       	pop	r0
    19e0:	0b be       	out	0x3b, r0	; 59
    19e2:	0f 90       	pop	r0
    19e4:	0f be       	out	0x3f, r0	; 63
    19e6:	0f 90       	pop	r0
    19e8:	1f 90       	pop	r1
    19ea:	18 95       	reti

000019ec <__vector_37>:
    19ec:	1f 92       	push	r1
    19ee:	0f 92       	push	r0
    19f0:	0f b6       	in	r0, 0x3f	; 63
    19f2:	0f 92       	push	r0
    19f4:	11 24       	eor	r1, r1
    19f6:	0b b6       	in	r0, 0x3b	; 59
    19f8:	0f 92       	push	r0
    19fa:	8f 93       	push	r24
    19fc:	9f 93       	push	r25
    19fe:	ef 93       	push	r30
    1a00:	ff 93       	push	r31
    1a02:	90 91 5c 07 	lds	r25, 0x075C	; 0x80075c <UART1_TxHead>
    1a06:	80 91 5b 07 	lds	r24, 0x075B	; 0x80075b <UART1_TxTail>
    1a0a:	98 17       	cp	r25, r24
    1a0c:	89 f0       	breq	.+34     	; 0x1a30 <__vector_37+0x44>
    1a0e:	80 91 5b 07 	lds	r24, 0x075B	; 0x80075b <UART1_TxTail>
    1a12:	90 e0       	ldi	r25, 0x00	; 0
    1a14:	01 96       	adiw	r24, 0x01	; 1
    1a16:	8f 77       	andi	r24, 0x7F	; 127
    1a18:	99 27       	eor	r25, r25
    1a1a:	80 93 5b 07 	sts	0x075B, r24	; 0x80075b <UART1_TxTail>
    1a1e:	fc 01       	movw	r30, r24
    1a20:	e3 52       	subi	r30, 0x23	; 35
    1a22:	f8 4f       	sbci	r31, 0xF8	; 248
    1a24:	80 81       	ld	r24, Z
    1a26:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    1a2a:	10 92 4c 05 	sts	0x054C, r1	; 0x80054c <UART1_Transmission_end>
    1a2e:	08 c0       	rjmp	.+16     	; 0x1a40 <__vector_37+0x54>
    1a30:	e9 ec       	ldi	r30, 0xC9	; 201
    1a32:	f0 e0       	ldi	r31, 0x00	; 0
    1a34:	80 81       	ld	r24, Z
    1a36:	8f 7d       	andi	r24, 0xDF	; 223
    1a38:	80 83       	st	Z, r24
    1a3a:	81 e0       	ldi	r24, 0x01	; 1
    1a3c:	80 93 4c 05 	sts	0x054C, r24	; 0x80054c <UART1_Transmission_end>
    1a40:	ff 91       	pop	r31
    1a42:	ef 91       	pop	r30
    1a44:	9f 91       	pop	r25
    1a46:	8f 91       	pop	r24
    1a48:	0f 90       	pop	r0
    1a4a:	0b be       	out	0x3b, r0	; 59
    1a4c:	0f 90       	pop	r0
    1a4e:	0f be       	out	0x3f, r0	; 63
    1a50:	0f 90       	pop	r0
    1a52:	1f 90       	pop	r1
    1a54:	18 95       	reti

00001a56 <UART1_init>:
    1a56:	0f 93       	push	r16
    1a58:	1f 93       	push	r17
    1a5a:	8b 01       	movw	r16, r22
    1a5c:	9c 01       	movw	r18, r24
    1a5e:	f8 94       	cli
    1a60:	10 92 5c 07 	sts	0x075C, r1	; 0x80075c <UART1_TxHead>
    1a64:	10 92 5b 07 	sts	0x075B, r1	; 0x80075b <UART1_TxTail>
    1a68:	10 92 5a 07 	sts	0x075A, r1	; 0x80075a <UART1_RxHead>
    1a6c:	10 92 59 07 	sts	0x0759, r1	; 0x800759 <UART1_RxTail>
    1a70:	78 94       	sei
    1a72:	dc 01       	movw	r26, r24
    1a74:	cb 01       	movw	r24, r22
    1a76:	80 58       	subi	r24, 0x80	; 128
    1a78:	9b 47       	sbci	r25, 0x7B	; 123
    1a7a:	a1 4e       	sbci	r26, 0xE1	; 225
    1a7c:	bf 4f       	sbci	r27, 0xFF	; 255
    1a7e:	88 0f       	add	r24, r24
    1a80:	99 1f       	adc	r25, r25
    1a82:	aa 1f       	adc	r26, r26
    1a84:	bb 1f       	adc	r27, r27
    1a86:	88 0f       	add	r24, r24
    1a88:	99 1f       	adc	r25, r25
    1a8a:	aa 1f       	adc	r26, r26
    1a8c:	bb 1f       	adc	r27, r27
    1a8e:	bc 01       	movw	r22, r24
    1a90:	cd 01       	movw	r24, r26
    1a92:	66 0f       	add	r22, r22
    1a94:	77 1f       	adc	r23, r23
    1a96:	88 1f       	adc	r24, r24
    1a98:	99 1f       	adc	r25, r25
    1a9a:	00 0f       	add	r16, r16
    1a9c:	11 1f       	adc	r17, r17
    1a9e:	22 1f       	adc	r18, r18
    1aa0:	33 1f       	adc	r19, r19
    1aa2:	00 0f       	add	r16, r16
    1aa4:	11 1f       	adc	r17, r17
    1aa6:	22 1f       	adc	r18, r18
    1aa8:	33 1f       	adc	r19, r19
    1aaa:	a9 01       	movw	r20, r18
    1aac:	98 01       	movw	r18, r16
    1aae:	22 0f       	add	r18, r18
    1ab0:	33 1f       	adc	r19, r19
    1ab2:	44 1f       	adc	r20, r20
    1ab4:	55 1f       	adc	r21, r21
    1ab6:	22 0f       	add	r18, r18
    1ab8:	33 1f       	adc	r19, r19
    1aba:	44 1f       	adc	r20, r20
    1abc:	55 1f       	adc	r21, r21
    1abe:	0e 94 98 1f 	call	0x3f30	; 0x3f30 <__udivmodsi4>
    1ac2:	ba 01       	movw	r22, r20
    1ac4:	a9 01       	movw	r20, r18
    1ac6:	41 50       	subi	r20, 0x01	; 1
    1ac8:	51 09       	sbc	r21, r1
    1aca:	61 09       	sbc	r22, r1
    1acc:	71 09       	sbc	r23, r1
    1ace:	57 ff       	sbrs	r21, 7
    1ad0:	06 c0       	rjmp	.+12     	; 0x1ade <UART1_init+0x88>
    1ad2:	82 e0       	ldi	r24, 0x02	; 2
    1ad4:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
    1ad8:	5f 77       	andi	r21, 0x7F	; 127
    1ada:	66 27       	eor	r22, r22
    1adc:	77 27       	eor	r23, r23
    1ade:	bb 27       	eor	r27, r27
    1ae0:	a7 2f       	mov	r26, r23
    1ae2:	96 2f       	mov	r25, r22
    1ae4:	85 2f       	mov	r24, r21
    1ae6:	80 93 cd 00 	sts	0x00CD, r24	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7000cd>
    1aea:	40 93 cc 00 	sts	0x00CC, r20	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7000cc>
    1aee:	88 e9       	ldi	r24, 0x98	; 152
    1af0:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7000c9>
    1af4:	86 e0       	ldi	r24, 0x06	; 6
    1af6:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7000ca>
    1afa:	1f 91       	pop	r17
    1afc:	0f 91       	pop	r16
    1afe:	08 95       	ret

00001b00 <UART1_getc>:
    1b00:	f8 94       	cli
    1b02:	90 91 5a 07 	lds	r25, 0x075A	; 0x80075a <UART1_RxHead>
    1b06:	80 91 59 07 	lds	r24, 0x0759	; 0x800759 <UART1_RxTail>
    1b0a:	98 13       	cpse	r25, r24
    1b0c:	04 c0       	rjmp	.+8      	; 0x1b16 <UART1_getc+0x16>
    1b0e:	78 94       	sei
    1b10:	80 e0       	ldi	r24, 0x00	; 0
    1b12:	91 e0       	ldi	r25, 0x01	; 1
    1b14:	08 95       	ret
    1b16:	80 91 59 07 	lds	r24, 0x0759	; 0x800759 <UART1_RxTail>
    1b1a:	90 e0       	ldi	r25, 0x00	; 0
    1b1c:	01 96       	adiw	r24, 0x01	; 1
    1b1e:	8f 77       	andi	r24, 0x7F	; 127
    1b20:	99 27       	eor	r25, r25
    1b22:	80 93 59 07 	sts	0x0759, r24	; 0x800759 <UART1_RxTail>
    1b26:	78 94       	sei
    1b28:	fc 01       	movw	r30, r24
    1b2a:	e3 5a       	subi	r30, 0xA3	; 163
    1b2c:	f8 4f       	sbci	r31, 0xF8	; 248
    1b2e:	20 81       	ld	r18, Z
    1b30:	80 91 58 07 	lds	r24, 0x0758	; 0x800758 <UART1_LastRxError>
    1b34:	90 e0       	ldi	r25, 0x00	; 0
    1b36:	98 2f       	mov	r25, r24
    1b38:	88 27       	eor	r24, r24
    1b3a:	82 0f       	add	r24, r18
    1b3c:	91 1d       	adc	r25, r1
    1b3e:	08 95       	ret

00001b40 <UART1_putc>:
    1b40:	40 91 5c 07 	lds	r20, 0x075C	; 0x80075c <UART1_TxHead>
    1b44:	50 e0       	ldi	r21, 0x00	; 0
    1b46:	4f 5f       	subi	r20, 0xFF	; 255
    1b48:	5f 4f       	sbci	r21, 0xFF	; 255
    1b4a:	4f 77       	andi	r20, 0x7F	; 127
    1b4c:	55 27       	eor	r21, r21
    1b4e:	20 91 5b 07 	lds	r18, 0x075B	; 0x80075b <UART1_TxTail>
    1b52:	30 e0       	ldi	r19, 0x00	; 0
    1b54:	42 17       	cp	r20, r18
    1b56:	53 07       	cpc	r21, r19
    1b58:	d1 f3       	breq	.-12     	; 0x1b4e <UART1_putc+0xe>
    1b5a:	fa 01       	movw	r30, r20
    1b5c:	e3 52       	subi	r30, 0x23	; 35
    1b5e:	f8 4f       	sbci	r31, 0xF8	; 248
    1b60:	80 83       	st	Z, r24
    1b62:	40 93 5c 07 	sts	0x075C, r20	; 0x80075c <UART1_TxHead>
    1b66:	e9 ec       	ldi	r30, 0xC9	; 201
    1b68:	f0 e0       	ldi	r31, 0x00	; 0
    1b6a:	80 81       	ld	r24, Z
    1b6c:	80 62       	ori	r24, 0x20	; 32
    1b6e:	80 83       	st	Z, r24
    1b70:	08 95       	ret

00001b72 <UART1_available>:
    1b72:	f8 94       	cli
    1b74:	80 91 5a 07 	lds	r24, 0x075A	; 0x80075a <UART1_RxHead>
    1b78:	20 91 59 07 	lds	r18, 0x0759	; 0x800759 <UART1_RxTail>
    1b7c:	78 94       	sei
    1b7e:	90 e0       	ldi	r25, 0x00	; 0
    1b80:	80 58       	subi	r24, 0x80	; 128
    1b82:	9f 4f       	sbci	r25, 0xFF	; 255
    1b84:	82 1b       	sub	r24, r18
    1b86:	91 09       	sbc	r25, r1
    1b88:	8f 77       	andi	r24, 0x7F	; 127
    1b8a:	99 27       	eor	r25, r25
    1b8c:	08 95       	ret

00001b8e <UART1_flush>:
    1b8e:	80 91 4c 05 	lds	r24, 0x054C	; 0x80054c <UART1_Transmission_end>
    1b92:	88 23       	and	r24, r24
    1b94:	e1 f3       	breq	.-8      	; 0x1b8e <UART1_flush>
    1b96:	08 95       	ret

00001b98 <__vector_51>:
    1b98:	1f 92       	push	r1
    1b9a:	0f 92       	push	r0
    1b9c:	0f b6       	in	r0, 0x3f	; 63
    1b9e:	0f 92       	push	r0
    1ba0:	11 24       	eor	r1, r1
    1ba2:	0b b6       	in	r0, 0x3b	; 59
    1ba4:	0f 92       	push	r0
    1ba6:	2f 93       	push	r18
    1ba8:	3f 93       	push	r19
    1baa:	4f 93       	push	r20
    1bac:	5f 93       	push	r21
    1bae:	8f 93       	push	r24
    1bb0:	9f 93       	push	r25
    1bb2:	ef 93       	push	r30
    1bb4:	ff 93       	push	r31
    1bb6:	20 91 d0 00 	lds	r18, 0x00D0	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7000d0>
    1bba:	30 91 d6 00 	lds	r19, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    1bbe:	28 71       	andi	r18, 0x18	; 24
    1bc0:	80 91 55 06 	lds	r24, 0x0655	; 0x800655 <UART2_RxHead>
    1bc4:	90 e0       	ldi	r25, 0x00	; 0
    1bc6:	01 96       	adiw	r24, 0x01	; 1
    1bc8:	8f 77       	andi	r24, 0x7F	; 127
    1bca:	99 27       	eor	r25, r25
    1bcc:	40 91 54 06 	lds	r20, 0x0654	; 0x800654 <UART2_RxTail>
    1bd0:	50 e0       	ldi	r21, 0x00	; 0
    1bd2:	84 17       	cp	r24, r20
    1bd4:	95 07       	cpc	r25, r21
    1bd6:	39 f0       	breq	.+14     	; 0x1be6 <__vector_51+0x4e>
    1bd8:	80 93 55 06 	sts	0x0655, r24	; 0x800655 <UART2_RxHead>
    1bdc:	fc 01       	movw	r30, r24
    1bde:	e8 5a       	subi	r30, 0xA8	; 168
    1be0:	f9 4f       	sbci	r31, 0xF9	; 249
    1be2:	30 83       	st	Z, r19
    1be4:	01 c0       	rjmp	.+2      	; 0x1be8 <__vector_51+0x50>
    1be6:	22 e0       	ldi	r18, 0x02	; 2
    1be8:	20 93 53 06 	sts	0x0653, r18	; 0x800653 <UART2_LastRxError>
    1bec:	ff 91       	pop	r31
    1bee:	ef 91       	pop	r30
    1bf0:	9f 91       	pop	r25
    1bf2:	8f 91       	pop	r24
    1bf4:	5f 91       	pop	r21
    1bf6:	4f 91       	pop	r20
    1bf8:	3f 91       	pop	r19
    1bfa:	2f 91       	pop	r18
    1bfc:	0f 90       	pop	r0
    1bfe:	0b be       	out	0x3b, r0	; 59
    1c00:	0f 90       	pop	r0
    1c02:	0f be       	out	0x3f, r0	; 63
    1c04:	0f 90       	pop	r0
    1c06:	1f 90       	pop	r1
    1c08:	18 95       	reti

00001c0a <__vector_52>:
    1c0a:	1f 92       	push	r1
    1c0c:	0f 92       	push	r0
    1c0e:	0f b6       	in	r0, 0x3f	; 63
    1c10:	0f 92       	push	r0
    1c12:	11 24       	eor	r1, r1
    1c14:	0b b6       	in	r0, 0x3b	; 59
    1c16:	0f 92       	push	r0
    1c18:	8f 93       	push	r24
    1c1a:	9f 93       	push	r25
    1c1c:	ef 93       	push	r30
    1c1e:	ff 93       	push	r31
    1c20:	90 91 57 06 	lds	r25, 0x0657	; 0x800657 <UART2_TxHead>
    1c24:	80 91 56 06 	lds	r24, 0x0656	; 0x800656 <UART2_TxTail>
    1c28:	98 17       	cp	r25, r24
    1c2a:	89 f0       	breq	.+34     	; 0x1c4e <__vector_52+0x44>
    1c2c:	80 91 56 06 	lds	r24, 0x0656	; 0x800656 <UART2_TxTail>
    1c30:	90 e0       	ldi	r25, 0x00	; 0
    1c32:	01 96       	adiw	r24, 0x01	; 1
    1c34:	8f 77       	andi	r24, 0x7F	; 127
    1c36:	99 27       	eor	r25, r25
    1c38:	80 93 56 06 	sts	0x0656, r24	; 0x800656 <UART2_TxTail>
    1c3c:	fc 01       	movw	r30, r24
    1c3e:	e8 52       	subi	r30, 0x28	; 40
    1c40:	f9 4f       	sbci	r31, 0xF9	; 249
    1c42:	80 81       	ld	r24, Z
    1c44:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    1c48:	10 92 4b 05 	sts	0x054B, r1	; 0x80054b <UART2_Transmission_end>
    1c4c:	08 c0       	rjmp	.+16     	; 0x1c5e <__vector_52+0x54>
    1c4e:	e1 ed       	ldi	r30, 0xD1	; 209
    1c50:	f0 e0       	ldi	r31, 0x00	; 0
    1c52:	80 81       	ld	r24, Z
    1c54:	8f 7d       	andi	r24, 0xDF	; 223
    1c56:	80 83       	st	Z, r24
    1c58:	81 e0       	ldi	r24, 0x01	; 1
    1c5a:	80 93 4b 05 	sts	0x054B, r24	; 0x80054b <UART2_Transmission_end>
    1c5e:	ff 91       	pop	r31
    1c60:	ef 91       	pop	r30
    1c62:	9f 91       	pop	r25
    1c64:	8f 91       	pop	r24
    1c66:	0f 90       	pop	r0
    1c68:	0b be       	out	0x3b, r0	; 59
    1c6a:	0f 90       	pop	r0
    1c6c:	0f be       	out	0x3f, r0	; 63
    1c6e:	0f 90       	pop	r0
    1c70:	1f 90       	pop	r1
    1c72:	18 95       	reti

00001c74 <UART2_init>:
    1c74:	0f 93       	push	r16
    1c76:	1f 93       	push	r17
    1c78:	8b 01       	movw	r16, r22
    1c7a:	9c 01       	movw	r18, r24
    1c7c:	f8 94       	cli
    1c7e:	10 92 57 06 	sts	0x0657, r1	; 0x800657 <UART2_TxHead>
    1c82:	10 92 56 06 	sts	0x0656, r1	; 0x800656 <UART2_TxTail>
    1c86:	10 92 55 06 	sts	0x0655, r1	; 0x800655 <UART2_RxHead>
    1c8a:	10 92 54 06 	sts	0x0654, r1	; 0x800654 <UART2_RxTail>
    1c8e:	78 94       	sei
    1c90:	dc 01       	movw	r26, r24
    1c92:	cb 01       	movw	r24, r22
    1c94:	80 58       	subi	r24, 0x80	; 128
    1c96:	9b 47       	sbci	r25, 0x7B	; 123
    1c98:	a1 4e       	sbci	r26, 0xE1	; 225
    1c9a:	bf 4f       	sbci	r27, 0xFF	; 255
    1c9c:	88 0f       	add	r24, r24
    1c9e:	99 1f       	adc	r25, r25
    1ca0:	aa 1f       	adc	r26, r26
    1ca2:	bb 1f       	adc	r27, r27
    1ca4:	88 0f       	add	r24, r24
    1ca6:	99 1f       	adc	r25, r25
    1ca8:	aa 1f       	adc	r26, r26
    1caa:	bb 1f       	adc	r27, r27
    1cac:	bc 01       	movw	r22, r24
    1cae:	cd 01       	movw	r24, r26
    1cb0:	66 0f       	add	r22, r22
    1cb2:	77 1f       	adc	r23, r23
    1cb4:	88 1f       	adc	r24, r24
    1cb6:	99 1f       	adc	r25, r25
    1cb8:	00 0f       	add	r16, r16
    1cba:	11 1f       	adc	r17, r17
    1cbc:	22 1f       	adc	r18, r18
    1cbe:	33 1f       	adc	r19, r19
    1cc0:	00 0f       	add	r16, r16
    1cc2:	11 1f       	adc	r17, r17
    1cc4:	22 1f       	adc	r18, r18
    1cc6:	33 1f       	adc	r19, r19
    1cc8:	a9 01       	movw	r20, r18
    1cca:	98 01       	movw	r18, r16
    1ccc:	22 0f       	add	r18, r18
    1cce:	33 1f       	adc	r19, r19
    1cd0:	44 1f       	adc	r20, r20
    1cd2:	55 1f       	adc	r21, r21
    1cd4:	22 0f       	add	r18, r18
    1cd6:	33 1f       	adc	r19, r19
    1cd8:	44 1f       	adc	r20, r20
    1cda:	55 1f       	adc	r21, r21
    1cdc:	0e 94 98 1f 	call	0x3f30	; 0x3f30 <__udivmodsi4>
    1ce0:	ba 01       	movw	r22, r20
    1ce2:	a9 01       	movw	r20, r18
    1ce4:	41 50       	subi	r20, 0x01	; 1
    1ce6:	51 09       	sbc	r21, r1
    1ce8:	61 09       	sbc	r22, r1
    1cea:	71 09       	sbc	r23, r1
    1cec:	57 ff       	sbrs	r21, 7
    1cee:	06 c0       	rjmp	.+12     	; 0x1cfc <UART2_init+0x88>
    1cf0:	82 e0       	ldi	r24, 0x02	; 2
    1cf2:	80 93 d0 00 	sts	0x00D0, r24	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7000d0>
    1cf6:	5f 77       	andi	r21, 0x7F	; 127
    1cf8:	66 27       	eor	r22, r22
    1cfa:	77 27       	eor	r23, r23
    1cfc:	bb 27       	eor	r27, r27
    1cfe:	a7 2f       	mov	r26, r23
    1d00:	96 2f       	mov	r25, r22
    1d02:	85 2f       	mov	r24, r21
    1d04:	80 93 d5 00 	sts	0x00D5, r24	; 0x8000d5 <__TEXT_REGION_LENGTH__+0x7000d5>
    1d08:	40 93 d4 00 	sts	0x00D4, r20	; 0x8000d4 <__TEXT_REGION_LENGTH__+0x7000d4>
    1d0c:	88 e9       	ldi	r24, 0x98	; 152
    1d0e:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7000d1>
    1d12:	86 e0       	ldi	r24, 0x06	; 6
    1d14:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7000d2>
    1d18:	1f 91       	pop	r17
    1d1a:	0f 91       	pop	r16
    1d1c:	08 95       	ret

00001d1e <UART2_getc>:
    1d1e:	90 91 55 06 	lds	r25, 0x0655	; 0x800655 <UART2_RxHead>
    1d22:	80 91 54 06 	lds	r24, 0x0654	; 0x800654 <UART2_RxTail>
    1d26:	98 17       	cp	r25, r24
    1d28:	a1 f0       	breq	.+40     	; 0x1d52 <UART2_getc+0x34>
    1d2a:	80 91 54 06 	lds	r24, 0x0654	; 0x800654 <UART2_RxTail>
    1d2e:	90 e0       	ldi	r25, 0x00	; 0
    1d30:	01 96       	adiw	r24, 0x01	; 1
    1d32:	8f 77       	andi	r24, 0x7F	; 127
    1d34:	99 27       	eor	r25, r25
    1d36:	80 93 54 06 	sts	0x0654, r24	; 0x800654 <UART2_RxTail>
    1d3a:	fc 01       	movw	r30, r24
    1d3c:	e8 5a       	subi	r30, 0xA8	; 168
    1d3e:	f9 4f       	sbci	r31, 0xF9	; 249
    1d40:	20 81       	ld	r18, Z
    1d42:	80 91 53 06 	lds	r24, 0x0653	; 0x800653 <UART2_LastRxError>
    1d46:	90 e0       	ldi	r25, 0x00	; 0
    1d48:	98 2f       	mov	r25, r24
    1d4a:	88 27       	eor	r24, r24
    1d4c:	82 0f       	add	r24, r18
    1d4e:	91 1d       	adc	r25, r1
    1d50:	08 95       	ret
    1d52:	80 e0       	ldi	r24, 0x00	; 0
    1d54:	91 e0       	ldi	r25, 0x01	; 1
    1d56:	08 95       	ret

00001d58 <UART2_putc>:
    1d58:	40 91 57 06 	lds	r20, 0x0657	; 0x800657 <UART2_TxHead>
    1d5c:	50 e0       	ldi	r21, 0x00	; 0
    1d5e:	4f 5f       	subi	r20, 0xFF	; 255
    1d60:	5f 4f       	sbci	r21, 0xFF	; 255
    1d62:	4f 77       	andi	r20, 0x7F	; 127
    1d64:	55 27       	eor	r21, r21
    1d66:	20 91 56 06 	lds	r18, 0x0656	; 0x800656 <UART2_TxTail>
    1d6a:	30 e0       	ldi	r19, 0x00	; 0
    1d6c:	42 17       	cp	r20, r18
    1d6e:	53 07       	cpc	r21, r19
    1d70:	d1 f3       	breq	.-12     	; 0x1d66 <UART2_putc+0xe>
    1d72:	fa 01       	movw	r30, r20
    1d74:	e8 52       	subi	r30, 0x28	; 40
    1d76:	f9 4f       	sbci	r31, 0xF9	; 249
    1d78:	80 83       	st	Z, r24
    1d7a:	40 93 57 06 	sts	0x0657, r20	; 0x800657 <UART2_TxHead>
    1d7e:	e1 ed       	ldi	r30, 0xD1	; 209
    1d80:	f0 e0       	ldi	r31, 0x00	; 0
    1d82:	80 81       	ld	r24, Z
    1d84:	80 62       	ori	r24, 0x20	; 32
    1d86:	80 83       	st	Z, r24
    1d88:	08 95       	ret

00001d8a <UART2_available>:
    1d8a:	f8 94       	cli
    1d8c:	80 91 55 06 	lds	r24, 0x0655	; 0x800655 <UART2_RxHead>
    1d90:	20 91 54 06 	lds	r18, 0x0654	; 0x800654 <UART2_RxTail>
    1d94:	78 94       	sei
    1d96:	90 e0       	ldi	r25, 0x00	; 0
    1d98:	80 58       	subi	r24, 0x80	; 128
    1d9a:	9f 4f       	sbci	r25, 0xFF	; 255
    1d9c:	82 1b       	sub	r24, r18
    1d9e:	91 09       	sbc	r25, r1
    1da0:	8f 77       	andi	r24, 0x7F	; 127
    1da2:	99 27       	eor	r25, r25
    1da4:	08 95       	ret

00001da6 <UART2_flush>:
    1da6:	80 91 4b 05 	lds	r24, 0x054B	; 0x80054b <UART2_Transmission_end>
    1daa:	88 23       	and	r24, r24
    1dac:	e1 f3       	breq	.-8      	; 0x1da6 <UART2_flush>
    1dae:	08 95       	ret

00001db0 <__vector_54>:
    1db0:	1f 92       	push	r1
    1db2:	0f 92       	push	r0
    1db4:	0f b6       	in	r0, 0x3f	; 63
    1db6:	0f 92       	push	r0
    1db8:	11 24       	eor	r1, r1
    1dba:	0b b6       	in	r0, 0x3b	; 59
    1dbc:	0f 92       	push	r0
    1dbe:	2f 93       	push	r18
    1dc0:	3f 93       	push	r19
    1dc2:	4f 93       	push	r20
    1dc4:	5f 93       	push	r21
    1dc6:	8f 93       	push	r24
    1dc8:	9f 93       	push	r25
    1dca:	ef 93       	push	r30
    1dcc:	ff 93       	push	r31
    1dce:	20 91 30 01 	lds	r18, 0x0130	; 0x800130 <__TEXT_REGION_LENGTH__+0x700130>
    1dd2:	30 91 36 01 	lds	r19, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    1dd6:	28 71       	andi	r18, 0x18	; 24
    1dd8:	80 91 50 05 	lds	r24, 0x0550	; 0x800550 <UART3_RxHead>
    1ddc:	90 e0       	ldi	r25, 0x00	; 0
    1dde:	01 96       	adiw	r24, 0x01	; 1
    1de0:	8f 77       	andi	r24, 0x7F	; 127
    1de2:	99 27       	eor	r25, r25
    1de4:	40 91 4f 05 	lds	r20, 0x054F	; 0x80054f <UART3_RxTail>
    1de8:	50 e0       	ldi	r21, 0x00	; 0
    1dea:	84 17       	cp	r24, r20
    1dec:	95 07       	cpc	r25, r21
    1dee:	39 f0       	breq	.+14     	; 0x1dfe <__vector_54+0x4e>
    1df0:	80 93 50 05 	sts	0x0550, r24	; 0x800550 <UART3_RxHead>
    1df4:	fc 01       	movw	r30, r24
    1df6:	ed 5a       	subi	r30, 0xAD	; 173
    1df8:	fa 4f       	sbci	r31, 0xFA	; 250
    1dfa:	30 83       	st	Z, r19
    1dfc:	01 c0       	rjmp	.+2      	; 0x1e00 <__vector_54+0x50>
    1dfe:	22 e0       	ldi	r18, 0x02	; 2
    1e00:	20 93 4e 05 	sts	0x054E, r18	; 0x80054e <UART3_LastRxError>
    1e04:	ff 91       	pop	r31
    1e06:	ef 91       	pop	r30
    1e08:	9f 91       	pop	r25
    1e0a:	8f 91       	pop	r24
    1e0c:	5f 91       	pop	r21
    1e0e:	4f 91       	pop	r20
    1e10:	3f 91       	pop	r19
    1e12:	2f 91       	pop	r18
    1e14:	0f 90       	pop	r0
    1e16:	0b be       	out	0x3b, r0	; 59
    1e18:	0f 90       	pop	r0
    1e1a:	0f be       	out	0x3f, r0	; 63
    1e1c:	0f 90       	pop	r0
    1e1e:	1f 90       	pop	r1
    1e20:	18 95       	reti

00001e22 <__vector_55>:
    1e22:	1f 92       	push	r1
    1e24:	0f 92       	push	r0
    1e26:	0f b6       	in	r0, 0x3f	; 63
    1e28:	0f 92       	push	r0
    1e2a:	11 24       	eor	r1, r1
    1e2c:	0b b6       	in	r0, 0x3b	; 59
    1e2e:	0f 92       	push	r0
    1e30:	8f 93       	push	r24
    1e32:	9f 93       	push	r25
    1e34:	ef 93       	push	r30
    1e36:	ff 93       	push	r31
    1e38:	90 91 52 05 	lds	r25, 0x0552	; 0x800552 <UART3_TxHead>
    1e3c:	80 91 51 05 	lds	r24, 0x0551	; 0x800551 <UART3_TxTail>
    1e40:	98 17       	cp	r25, r24
    1e42:	89 f0       	breq	.+34     	; 0x1e66 <__vector_55+0x44>
    1e44:	80 91 51 05 	lds	r24, 0x0551	; 0x800551 <UART3_TxTail>
    1e48:	90 e0       	ldi	r25, 0x00	; 0
    1e4a:	01 96       	adiw	r24, 0x01	; 1
    1e4c:	8f 77       	andi	r24, 0x7F	; 127
    1e4e:	99 27       	eor	r25, r25
    1e50:	80 93 51 05 	sts	0x0551, r24	; 0x800551 <UART3_TxTail>
    1e54:	fc 01       	movw	r30, r24
    1e56:	ed 52       	subi	r30, 0x2D	; 45
    1e58:	fa 4f       	sbci	r31, 0xFA	; 250
    1e5a:	80 81       	ld	r24, Z
    1e5c:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    1e60:	10 92 4a 05 	sts	0x054A, r1	; 0x80054a <UART3_Transmission_end>
    1e64:	08 c0       	rjmp	.+16     	; 0x1e76 <__vector_55+0x54>
    1e66:	e1 e3       	ldi	r30, 0x31	; 49
    1e68:	f1 e0       	ldi	r31, 0x01	; 1
    1e6a:	80 81       	ld	r24, Z
    1e6c:	8f 7d       	andi	r24, 0xDF	; 223
    1e6e:	80 83       	st	Z, r24
    1e70:	81 e0       	ldi	r24, 0x01	; 1
    1e72:	80 93 4a 05 	sts	0x054A, r24	; 0x80054a <UART3_Transmission_end>
    1e76:	ff 91       	pop	r31
    1e78:	ef 91       	pop	r30
    1e7a:	9f 91       	pop	r25
    1e7c:	8f 91       	pop	r24
    1e7e:	0f 90       	pop	r0
    1e80:	0b be       	out	0x3b, r0	; 59
    1e82:	0f 90       	pop	r0
    1e84:	0f be       	out	0x3f, r0	; 63
    1e86:	0f 90       	pop	r0
    1e88:	1f 90       	pop	r1
    1e8a:	18 95       	reti

00001e8c <UART3_init>:
    1e8c:	0f 93       	push	r16
    1e8e:	1f 93       	push	r17
    1e90:	8b 01       	movw	r16, r22
    1e92:	9c 01       	movw	r18, r24
    1e94:	f8 94       	cli
    1e96:	10 92 52 05 	sts	0x0552, r1	; 0x800552 <UART3_TxHead>
    1e9a:	10 92 51 05 	sts	0x0551, r1	; 0x800551 <UART3_TxTail>
    1e9e:	10 92 50 05 	sts	0x0550, r1	; 0x800550 <UART3_RxHead>
    1ea2:	10 92 4f 05 	sts	0x054F, r1	; 0x80054f <UART3_RxTail>
    1ea6:	78 94       	sei
    1ea8:	dc 01       	movw	r26, r24
    1eaa:	cb 01       	movw	r24, r22
    1eac:	80 58       	subi	r24, 0x80	; 128
    1eae:	9b 47       	sbci	r25, 0x7B	; 123
    1eb0:	a1 4e       	sbci	r26, 0xE1	; 225
    1eb2:	bf 4f       	sbci	r27, 0xFF	; 255
    1eb4:	88 0f       	add	r24, r24
    1eb6:	99 1f       	adc	r25, r25
    1eb8:	aa 1f       	adc	r26, r26
    1eba:	bb 1f       	adc	r27, r27
    1ebc:	88 0f       	add	r24, r24
    1ebe:	99 1f       	adc	r25, r25
    1ec0:	aa 1f       	adc	r26, r26
    1ec2:	bb 1f       	adc	r27, r27
    1ec4:	bc 01       	movw	r22, r24
    1ec6:	cd 01       	movw	r24, r26
    1ec8:	66 0f       	add	r22, r22
    1eca:	77 1f       	adc	r23, r23
    1ecc:	88 1f       	adc	r24, r24
    1ece:	99 1f       	adc	r25, r25
    1ed0:	00 0f       	add	r16, r16
    1ed2:	11 1f       	adc	r17, r17
    1ed4:	22 1f       	adc	r18, r18
    1ed6:	33 1f       	adc	r19, r19
    1ed8:	00 0f       	add	r16, r16
    1eda:	11 1f       	adc	r17, r17
    1edc:	22 1f       	adc	r18, r18
    1ede:	33 1f       	adc	r19, r19
    1ee0:	a9 01       	movw	r20, r18
    1ee2:	98 01       	movw	r18, r16
    1ee4:	22 0f       	add	r18, r18
    1ee6:	33 1f       	adc	r19, r19
    1ee8:	44 1f       	adc	r20, r20
    1eea:	55 1f       	adc	r21, r21
    1eec:	22 0f       	add	r18, r18
    1eee:	33 1f       	adc	r19, r19
    1ef0:	44 1f       	adc	r20, r20
    1ef2:	55 1f       	adc	r21, r21
    1ef4:	0e 94 98 1f 	call	0x3f30	; 0x3f30 <__udivmodsi4>
    1ef8:	ba 01       	movw	r22, r20
    1efa:	a9 01       	movw	r20, r18
    1efc:	41 50       	subi	r20, 0x01	; 1
    1efe:	51 09       	sbc	r21, r1
    1f00:	61 09       	sbc	r22, r1
    1f02:	71 09       	sbc	r23, r1
    1f04:	57 ff       	sbrs	r21, 7
    1f06:	06 c0       	rjmp	.+12     	; 0x1f14 <UART3_init+0x88>
    1f08:	82 e0       	ldi	r24, 0x02	; 2
    1f0a:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <__TEXT_REGION_LENGTH__+0x700130>
    1f0e:	5f 77       	andi	r21, 0x7F	; 127
    1f10:	66 27       	eor	r22, r22
    1f12:	77 27       	eor	r23, r23
    1f14:	bb 27       	eor	r27, r27
    1f16:	a7 2f       	mov	r26, r23
    1f18:	96 2f       	mov	r25, r22
    1f1a:	85 2f       	mov	r24, r21
    1f1c:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <__TEXT_REGION_LENGTH__+0x700135>
    1f20:	40 93 34 01 	sts	0x0134, r20	; 0x800134 <__TEXT_REGION_LENGTH__+0x700134>
    1f24:	88 e9       	ldi	r24, 0x98	; 152
    1f26:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <__TEXT_REGION_LENGTH__+0x700131>
    1f2a:	86 e0       	ldi	r24, 0x06	; 6
    1f2c:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <__TEXT_REGION_LENGTH__+0x700132>
    1f30:	1f 91       	pop	r17
    1f32:	0f 91       	pop	r16
    1f34:	08 95       	ret

00001f36 <UART3_getc>:
    1f36:	90 91 50 05 	lds	r25, 0x0550	; 0x800550 <UART3_RxHead>
    1f3a:	80 91 4f 05 	lds	r24, 0x054F	; 0x80054f <UART3_RxTail>
    1f3e:	98 17       	cp	r25, r24
    1f40:	a1 f0       	breq	.+40     	; 0x1f6a <UART3_getc+0x34>
    1f42:	80 91 4f 05 	lds	r24, 0x054F	; 0x80054f <UART3_RxTail>
    1f46:	90 e0       	ldi	r25, 0x00	; 0
    1f48:	01 96       	adiw	r24, 0x01	; 1
    1f4a:	8f 77       	andi	r24, 0x7F	; 127
    1f4c:	99 27       	eor	r25, r25
    1f4e:	80 93 4f 05 	sts	0x054F, r24	; 0x80054f <UART3_RxTail>
    1f52:	fc 01       	movw	r30, r24
    1f54:	ed 5a       	subi	r30, 0xAD	; 173
    1f56:	fa 4f       	sbci	r31, 0xFA	; 250
    1f58:	20 81       	ld	r18, Z
    1f5a:	80 91 4e 05 	lds	r24, 0x054E	; 0x80054e <UART3_LastRxError>
    1f5e:	90 e0       	ldi	r25, 0x00	; 0
    1f60:	98 2f       	mov	r25, r24
    1f62:	88 27       	eor	r24, r24
    1f64:	82 0f       	add	r24, r18
    1f66:	91 1d       	adc	r25, r1
    1f68:	08 95       	ret
    1f6a:	80 e0       	ldi	r24, 0x00	; 0
    1f6c:	91 e0       	ldi	r25, 0x01	; 1
    1f6e:	08 95       	ret

00001f70 <UART3_putc>:
    1f70:	40 91 52 05 	lds	r20, 0x0552	; 0x800552 <UART3_TxHead>
    1f74:	50 e0       	ldi	r21, 0x00	; 0
    1f76:	4f 5f       	subi	r20, 0xFF	; 255
    1f78:	5f 4f       	sbci	r21, 0xFF	; 255
    1f7a:	4f 77       	andi	r20, 0x7F	; 127
    1f7c:	55 27       	eor	r21, r21
    1f7e:	20 91 51 05 	lds	r18, 0x0551	; 0x800551 <UART3_TxTail>
    1f82:	30 e0       	ldi	r19, 0x00	; 0
    1f84:	42 17       	cp	r20, r18
    1f86:	53 07       	cpc	r21, r19
    1f88:	d1 f3       	breq	.-12     	; 0x1f7e <UART3_putc+0xe>
    1f8a:	fa 01       	movw	r30, r20
    1f8c:	ed 52       	subi	r30, 0x2D	; 45
    1f8e:	fa 4f       	sbci	r31, 0xFA	; 250
    1f90:	80 83       	st	Z, r24
    1f92:	40 93 52 05 	sts	0x0552, r20	; 0x800552 <UART3_TxHead>
    1f96:	e1 e3       	ldi	r30, 0x31	; 49
    1f98:	f1 e0       	ldi	r31, 0x01	; 1
    1f9a:	80 81       	ld	r24, Z
    1f9c:	80 62       	ori	r24, 0x20	; 32
    1f9e:	80 83       	st	Z, r24
    1fa0:	08 95       	ret

00001fa2 <UART3_available>:
=======
     7ce:	04 e4       	ldi	r16, 0x44	; 68
     7d0:	1a e0       	ldi	r17, 0x0A	; 10
     7d2:	29 ea       	ldi	r18, 0xA9	; 169
     7d4:	32 e0       	ldi	r19, 0x02	; 2
     7d6:	41 e0       	ldi	r20, 0x01	; 1
     7d8:	60 e0       	ldi	r22, 0x00	; 0
     7da:	70 e0       	ldi	r23, 0x00	; 0
     7dc:	84 e6       	ldi	r24, 0x64	; 100
     7de:	90 e0       	ldi	r25, 0x00	; 0
     7e0:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <xStreamBufferGenericCreateStatic>
     7e4:	90 93 48 09 	sts	0x0948, r25	; 0x800948 <xMessageBuffer+0x1>
     7e8:	80 93 47 09 	sts	0x0947, r24	; 0x800947 <xMessageBuffer>
// 		Lcd_Write(LCD_TEMP_DATA,52);
// 		_delay_ms(1000);
// }

	  // Start scheduler.
	  vTaskStartScheduler();
     7ec:	0e 94 17 11 	call	0x222e	; 0x222e <vTaskStartScheduler>
     7f0:	ff cf       	rjmp	.-2      	; 0x7f0 <main+0x9e>

000007f2 <__vector_29>:
	return returned_data ;
}


ISR(ADC_vect)
{
     7f2:	1f 92       	push	r1
     7f4:	0f 92       	push	r0
     7f6:	0f b6       	in	r0, 0x3f	; 63
     7f8:	0f 92       	push	r0
     7fa:	11 24       	eor	r1, r1
     7fc:	2f 93       	push	r18
     7fe:	8f 93       	push	r24
     800:	9f 93       	push	r25
	   uint8_t The_low_adc_reg = ADC_DATA_REG_LOW ;
     802:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
	  // get 10 bits out of the high and low register .
	  g_analog_data =  The_low_adc_reg | (ADC_DATA_REG_HIGH <<8);
     806:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
     80a:	90 e0       	ldi	r25, 0x00	; 0
     80c:	92 2b       	or	r25, r18
     80e:	90 93 0f 03 	sts	0x030F, r25	; 0x80030f <g_analog_data+0x1>
     812:	80 93 0e 03 	sts	0x030E, r24	; 0x80030e <g_analog_data>
	  g_converted = 1 ;
     816:	81 e0       	ldi	r24, 0x01	; 1
     818:	80 93 0d 03 	sts	0x030D, r24	; 0x80030d <g_converted>
}
     81c:	9f 91       	pop	r25
     81e:	8f 91       	pop	r24
     820:	2f 91       	pop	r18
     822:	0f 90       	pop	r0
     824:	0f be       	out	0x3f, r0	; 63
     826:	0f 90       	pop	r0
     828:	1f 90       	pop	r1
     82a:	18 95       	reti

0000082c <DIO_init>:
void Spark_change_state(uint8_t state)
{
	if (HIGH == state)
		SET_BIT(SPARK_DATA_REG , SPARK_PIN);
	else if(LOW == state)
		CLR_BIT(SPARK_DATA_REG , SPARK_PIN);
     82c:	50 98       	cbi	0x0a, 0	; 10
     82e:	51 98       	cbi	0x0a, 1	; 10
     830:	51 98       	cbi	0x0a, 1	; 10
     832:	53 98       	cbi	0x0a, 3	; 10
     834:	20 98       	cbi	0x04, 0	; 4
     836:	55 98       	cbi	0x0a, 5	; 10
     838:	54 98       	cbi	0x0a, 4	; 10
     83a:	3c 9a       	sbi	0x07, 4	; 7
     83c:	3f 9a       	sbi	0x07, 7	; 7
     83e:	3d 9a       	sbi	0x07, 5	; 7
     840:	39 9a       	sbi	0x07, 1	; 7
     842:	39 9a       	sbi	0x07, 1	; 7
     844:	57 9a       	sbi	0x0a, 7	; 10
     846:	38 9a       	sbi	0x07, 0	; 7
     848:	38 98       	cbi	0x07, 0	; 7
     84a:	56 9a       	sbi	0x0a, 6	; 10
     84c:	3b 9a       	sbi	0x07, 3	; 7
     84e:	e4 e0       	ldi	r30, 0x04	; 4
     850:	f1 e0       	ldi	r31, 0x01	; 1
     852:	80 81       	ld	r24, Z
     854:	84 60       	ori	r24, 0x04	; 4
     856:	80 83       	st	Z, r24
     858:	3f 9a       	sbi	0x07, 7	; 7
     85a:	3f 9a       	sbi	0x07, 7	; 7
     85c:	3f 9a       	sbi	0x07, 7	; 7
     85e:	e1 e0       	ldi	r30, 0x01	; 1
     860:	f1 e0       	ldi	r31, 0x01	; 1
     862:	80 81       	ld	r24, Z
     864:	8e 7f       	andi	r24, 0xFE	; 254
     866:	80 83       	st	Z, r24
     868:	80 81       	ld	r24, Z
     86a:	82 60       	ori	r24, 0x02	; 2
     86c:	80 83       	st	Z, r24
     86e:	e2 e0       	ldi	r30, 0x02	; 2
     870:	f1 e0       	ldi	r31, 0x01	; 1
     872:	80 81       	ld	r24, Z
     874:	81 60       	ori	r24, 0x01	; 1
     876:	80 83       	st	Z, r24
     878:	52 98       	cbi	0x0a, 2	; 10
     87a:	53 9a       	sbi	0x0a, 3	; 10
     87c:	5a 9a       	sbi	0x0b, 2	; 11
     87e:	08 95       	ret

00000880 <Modbus_change_state>:

//_________ MODE BUS initialize and enable______________________//

void Modbus_change_state(uint8_t device ,uint8_t state){
	
	switch (device){
     880:	88 23       	and	r24, r24
     882:	19 f0       	breq	.+6      	; 0x88a <Modbus_change_state+0xa>
     884:	81 30       	cpi	r24, 0x01	; 1
     886:	89 f0       	breq	.+34     	; 0x8aa <Modbus_change_state+0x2a>
     888:	08 95       	ret
		case DEVICE_0:
		 	if (HIGH == state)
     88a:	61 30       	cpi	r22, 0x01	; 1
     88c:	31 f4       	brne	.+12     	; 0x89a <Modbus_change_state+0x1a>
		 		SET_BIT(DEVICE_0_MODBUS_DATA_REG , DEVICE_0_MODBUS_PIN);
     88e:	e5 e0       	ldi	r30, 0x05	; 5
     890:	f1 e0       	ldi	r31, 0x01	; 1
     892:	80 81       	ld	r24, Z
     894:	84 60       	ori	r24, 0x04	; 4
     896:	80 83       	st	Z, r24
     898:	08 95       	ret
		 	else if(LOW == state)
     89a:	61 11       	cpse	r22, r1
     89c:	0d c0       	rjmp	.+26     	; 0x8b8 <Modbus_change_state+0x38>
		 		CLR_BIT(DEVICE_0_MODBUS_DATA_REG , DEVICE_0_MODBUS_PIN);
     89e:	e5 e0       	ldi	r30, 0x05	; 5
     8a0:	f1 e0       	ldi	r31, 0x01	; 1
     8a2:	80 81       	ld	r24, Z
     8a4:	8b 7f       	andi	r24, 0xFB	; 251
     8a6:	80 83       	st	Z, r24
     8a8:	08 95       	ret
			
			break;
		case DEVICE_1:
		     if (HIGH == state)
     8aa:	61 30       	cpi	r22, 0x01	; 1
     8ac:	11 f4       	brne	.+4      	; 0x8b2 <Modbus_change_state+0x32>
		         SET_BIT(DEVICE_1_MODBUS_DATA_REG , DEVICE_1_MODBUS_PIN);
     8ae:	47 9a       	sbi	0x08, 7	; 8
     8b0:	08 95       	ret
		     else if(LOW == state)
     8b2:	61 11       	cpse	r22, r1
     8b4:	01 c0       	rjmp	.+2      	; 0x8b8 <Modbus_change_state+0x38>
		         CLR_BIT(DEVICE_1_MODBUS_DATA_REG , DEVICE_1_MODBUS_PIN);
     8b6:	47 98       	cbi	0x08, 7	; 8
     8b8:	08 95       	ret

000008ba <__vector_25>:

	while ((c = pgm_read_byte(progmem_s++))) {
		UART3_putc(c);
	}

} /* UART3_puts_p */
     8ba:	1f 92       	push	r1
     8bc:	0f 92       	push	r0
     8be:	0f b6       	in	r0, 0x3f	; 63
     8c0:	0f 92       	push	r0
     8c2:	11 24       	eor	r1, r1
     8c4:	0b b6       	in	r0, 0x3b	; 59
     8c6:	0f 92       	push	r0
     8c8:	2f 93       	push	r18
     8ca:	3f 93       	push	r19
     8cc:	4f 93       	push	r20
     8ce:	5f 93       	push	r21
     8d0:	8f 93       	push	r24
     8d2:	9f 93       	push	r25
     8d4:	ef 93       	push	r30
     8d6:	ff 93       	push	r31
     8d8:	20 91 c0 00 	lds	r18, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
     8dc:	30 91 c6 00 	lds	r19, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
     8e0:	28 71       	andi	r18, 0x18	; 24
     8e2:	80 91 25 06 	lds	r24, 0x0625	; 0x800625 <UART_RxHead>
     8e6:	90 e0       	ldi	r25, 0x00	; 0
     8e8:	01 96       	adiw	r24, 0x01	; 1
     8ea:	8f 77       	andi	r24, 0x7F	; 127
     8ec:	99 27       	eor	r25, r25
     8ee:	40 91 24 06 	lds	r20, 0x0624	; 0x800624 <UART_RxTail>
     8f2:	50 e0       	ldi	r21, 0x00	; 0
     8f4:	84 17       	cp	r24, r20
     8f6:	95 07       	cpc	r25, r21
     8f8:	39 f0       	breq	.+14     	; 0x908 <__vector_25+0x4e>
     8fa:	80 93 25 06 	sts	0x0625, r24	; 0x800625 <UART_RxHead>
     8fe:	fc 01       	movw	r30, r24
     900:	e8 5d       	subi	r30, 0xD8	; 216
     902:	f9 4f       	sbci	r31, 0xF9	; 249
     904:	30 83       	st	Z, r19
     906:	01 c0       	rjmp	.+2      	; 0x90a <__vector_25+0x50>
     908:	22 e0       	ldi	r18, 0x02	; 2
     90a:	20 93 23 06 	sts	0x0623, r18	; 0x800623 <UART_LastRxError>
     90e:	ff 91       	pop	r31
     910:	ef 91       	pop	r30
     912:	9f 91       	pop	r25
     914:	8f 91       	pop	r24
     916:	5f 91       	pop	r21
     918:	4f 91       	pop	r20
     91a:	3f 91       	pop	r19
     91c:	2f 91       	pop	r18
     91e:	0f 90       	pop	r0
     920:	0b be       	out	0x3b, r0	; 59
     922:	0f 90       	pop	r0
     924:	0f be       	out	0x3f, r0	; 63
     926:	0f 90       	pop	r0
     928:	1f 90       	pop	r1
     92a:	18 95       	reti

0000092c <__vector_26>:
     92c:	1f 92       	push	r1
     92e:	0f 92       	push	r0
     930:	0f b6       	in	r0, 0x3f	; 63
     932:	0f 92       	push	r0
     934:	11 24       	eor	r1, r1
     936:	0b b6       	in	r0, 0x3b	; 59
     938:	0f 92       	push	r0
     93a:	8f 93       	push	r24
     93c:	9f 93       	push	r25
     93e:	ef 93       	push	r30
     940:	ff 93       	push	r31
     942:	90 91 27 06 	lds	r25, 0x0627	; 0x800627 <UART_TxHead>
     946:	80 91 26 06 	lds	r24, 0x0626	; 0x800626 <UART_TxTail>
     94a:	98 17       	cp	r25, r24
     94c:	89 f0       	breq	.+34     	; 0x970 <__vector_26+0x44>
     94e:	80 91 26 06 	lds	r24, 0x0626	; 0x800626 <UART_TxTail>
     952:	90 e0       	ldi	r25, 0x00	; 0
     954:	01 96       	adiw	r24, 0x01	; 1
     956:	8f 77       	andi	r24, 0x7F	; 127
     958:	99 27       	eor	r25, r25
     95a:	80 93 26 06 	sts	0x0626, r24	; 0x800626 <UART_TxTail>
     95e:	fc 01       	movw	r30, r24
     960:	e8 55       	subi	r30, 0x58	; 88
     962:	f9 4f       	sbci	r31, 0xF9	; 249
     964:	80 81       	ld	r24, Z
     966:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
     96a:	10 92 13 03 	sts	0x0313, r1	; 0x800313 <UART0_Transmission_end>
     96e:	08 c0       	rjmp	.+16     	; 0x980 <__vector_26+0x54>
     970:	e1 ec       	ldi	r30, 0xC1	; 193
     972:	f0 e0       	ldi	r31, 0x00	; 0
     974:	80 81       	ld	r24, Z
     976:	8f 7d       	andi	r24, 0xDF	; 223
     978:	80 83       	st	Z, r24
     97a:	81 e0       	ldi	r24, 0x01	; 1
     97c:	80 93 13 03 	sts	0x0313, r24	; 0x800313 <UART0_Transmission_end>
     980:	ff 91       	pop	r31
     982:	ef 91       	pop	r30
     984:	9f 91       	pop	r25
     986:	8f 91       	pop	r24
     988:	0f 90       	pop	r0
     98a:	0b be       	out	0x3b, r0	; 59
     98c:	0f 90       	pop	r0
     98e:	0f be       	out	0x3f, r0	; 63
     990:	0f 90       	pop	r0
     992:	1f 90       	pop	r1
     994:	18 95       	reti

00000996 <UART0_init>:
     996:	0f 93       	push	r16
     998:	1f 93       	push	r17
     99a:	8b 01       	movw	r16, r22
     99c:	9c 01       	movw	r18, r24
     99e:	f8 94       	cli
     9a0:	10 92 27 06 	sts	0x0627, r1	; 0x800627 <UART_TxHead>
     9a4:	10 92 26 06 	sts	0x0626, r1	; 0x800626 <UART_TxTail>
     9a8:	10 92 25 06 	sts	0x0625, r1	; 0x800625 <UART_RxHead>
     9ac:	10 92 24 06 	sts	0x0624, r1	; 0x800624 <UART_RxTail>
     9b0:	78 94       	sei
     9b2:	dc 01       	movw	r26, r24
     9b4:	cb 01       	movw	r24, r22
     9b6:	80 58       	subi	r24, 0x80	; 128
     9b8:	9b 47       	sbci	r25, 0x7B	; 123
     9ba:	a1 4e       	sbci	r26, 0xE1	; 225
     9bc:	bf 4f       	sbci	r27, 0xFF	; 255
     9be:	88 0f       	add	r24, r24
     9c0:	99 1f       	adc	r25, r25
     9c2:	aa 1f       	adc	r26, r26
     9c4:	bb 1f       	adc	r27, r27
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	bc 01       	movw	r22, r24
     9d0:	cd 01       	movw	r24, r26
     9d2:	66 0f       	add	r22, r22
     9d4:	77 1f       	adc	r23, r23
     9d6:	88 1f       	adc	r24, r24
     9d8:	99 1f       	adc	r25, r25
     9da:	00 0f       	add	r16, r16
     9dc:	11 1f       	adc	r17, r17
     9de:	22 1f       	adc	r18, r18
     9e0:	33 1f       	adc	r19, r19
     9e2:	00 0f       	add	r16, r16
     9e4:	11 1f       	adc	r17, r17
     9e6:	22 1f       	adc	r18, r18
     9e8:	33 1f       	adc	r19, r19
     9ea:	a9 01       	movw	r20, r18
     9ec:	98 01       	movw	r18, r16
     9ee:	22 0f       	add	r18, r18
     9f0:	33 1f       	adc	r19, r19
     9f2:	44 1f       	adc	r20, r20
     9f4:	55 1f       	adc	r21, r21
     9f6:	22 0f       	add	r18, r18
     9f8:	33 1f       	adc	r19, r19
     9fa:	44 1f       	adc	r20, r20
     9fc:	55 1f       	adc	r21, r21
     9fe:	0e 94 da 17 	call	0x2fb4	; 0x2fb4 <__udivmodsi4>
     a02:	ba 01       	movw	r22, r20
     a04:	a9 01       	movw	r20, r18
     a06:	41 50       	subi	r20, 0x01	; 1
     a08:	51 09       	sbc	r21, r1
     a0a:	61 09       	sbc	r22, r1
     a0c:	71 09       	sbc	r23, r1
     a0e:	57 ff       	sbrs	r21, 7
     a10:	06 c0       	rjmp	.+12     	; 0xa1e <UART0_init+0x88>
     a12:	82 e0       	ldi	r24, 0x02	; 2
     a14:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
     a18:	5f 77       	andi	r21, 0x7F	; 127
     a1a:	66 27       	eor	r22, r22
     a1c:	77 27       	eor	r23, r23
     a1e:	bb 27       	eor	r27, r27
     a20:	a7 2f       	mov	r26, r23
     a22:	96 2f       	mov	r25, r22
     a24:	85 2f       	mov	r24, r21
     a26:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
     a2a:	40 93 c4 00 	sts	0x00C4, r20	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
     a2e:	88 e9       	ldi	r24, 0x98	; 152
     a30:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
     a34:	86 e0       	ldi	r24, 0x06	; 6
     a36:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
     a3a:	1f 91       	pop	r17
     a3c:	0f 91       	pop	r16
     a3e:	08 95       	ret

00000a40 <UART0_putc>:
     a40:	40 91 27 06 	lds	r20, 0x0627	; 0x800627 <UART_TxHead>
     a44:	50 e0       	ldi	r21, 0x00	; 0
     a46:	4f 5f       	subi	r20, 0xFF	; 255
     a48:	5f 4f       	sbci	r21, 0xFF	; 255
     a4a:	4f 77       	andi	r20, 0x7F	; 127
     a4c:	55 27       	eor	r21, r21
     a4e:	20 91 26 06 	lds	r18, 0x0626	; 0x800626 <UART_TxTail>
     a52:	30 e0       	ldi	r19, 0x00	; 0
     a54:	42 17       	cp	r20, r18
     a56:	53 07       	cpc	r21, r19
     a58:	d1 f3       	breq	.-12     	; 0xa4e <UART0_putc+0xe>
     a5a:	fa 01       	movw	r30, r20
     a5c:	e8 55       	subi	r30, 0x58	; 88
     a5e:	f9 4f       	sbci	r31, 0xF9	; 249
     a60:	80 83       	st	Z, r24
     a62:	40 93 27 06 	sts	0x0627, r20	; 0x800627 <UART_TxHead>
     a66:	e1 ec       	ldi	r30, 0xC1	; 193
     a68:	f0 e0       	ldi	r31, 0x00	; 0
     a6a:	80 81       	ld	r24, Z
     a6c:	80 62       	ori	r24, 0x20	; 32
     a6e:	80 83       	st	Z, r24
     a70:	08 95       	ret

00000a72 <UART0_OutUDec>:
     a72:	0f 93       	push	r16
     a74:	1f 93       	push	r17
     a76:	cf 93       	push	r28
     a78:	df 93       	push	r29
     a7a:	6a 30       	cpi	r22, 0x0A	; 10
     a7c:	71 05       	cpc	r23, r1
     a7e:	81 05       	cpc	r24, r1
     a80:	91 05       	cpc	r25, r1
     a82:	58 f0       	brcs	.+22     	; 0xa9a <UART0_OutUDec+0x28>
     a84:	2a e0       	ldi	r18, 0x0A	; 10
     a86:	30 e0       	ldi	r19, 0x00	; 0
     a88:	40 e0       	ldi	r20, 0x00	; 0
     a8a:	50 e0       	ldi	r21, 0x00	; 0
     a8c:	0e 94 da 17 	call	0x2fb4	; 0x2fb4 <__udivmodsi4>
     a90:	06 2f       	mov	r16, r22
     a92:	ca 01       	movw	r24, r20
     a94:	b9 01       	movw	r22, r18
     a96:	ed df       	rcall	.-38     	; 0xa72 <UART0_OutUDec>
     a98:	60 2f       	mov	r22, r16
     a9a:	80 e3       	ldi	r24, 0x30	; 48
     a9c:	86 0f       	add	r24, r22
     a9e:	d0 df       	rcall	.-96     	; 0xa40 <UART0_putc>
     aa0:	df 91       	pop	r29
     aa2:	cf 91       	pop	r28
     aa4:	1f 91       	pop	r17
     aa6:	0f 91       	pop	r16
     aa8:	08 95       	ret

00000aaa <UART0_puts>:
     aaa:	cf 93       	push	r28
     aac:	df 93       	push	r29
     aae:	ec 01       	movw	r28, r24
     ab0:	88 81       	ld	r24, Y
     ab2:	88 23       	and	r24, r24
     ab4:	29 f0       	breq	.+10     	; 0xac0 <UART0_puts+0x16>
     ab6:	21 96       	adiw	r28, 0x01	; 1
     ab8:	c3 df       	rcall	.-122    	; 0xa40 <UART0_putc>
     aba:	89 91       	ld	r24, Y+
     abc:	81 11       	cpse	r24, r1
     abe:	fc cf       	rjmp	.-8      	; 0xab8 <UART0_puts+0xe>
     ac0:	df 91       	pop	r29
     ac2:	cf 91       	pop	r28
     ac4:	08 95       	ret

00000ac6 <__vector_36>:
     ac6:	1f 92       	push	r1
     ac8:	0f 92       	push	r0
     aca:	0f b6       	in	r0, 0x3f	; 63
     acc:	0f 92       	push	r0
     ace:	11 24       	eor	r1, r1
     ad0:	0b b6       	in	r0, 0x3b	; 59
     ad2:	0f 92       	push	r0
     ad4:	2f 93       	push	r18
     ad6:	3f 93       	push	r19
     ad8:	4f 93       	push	r20
     ada:	5f 93       	push	r21
     adc:	8f 93       	push	r24
     ade:	9f 93       	push	r25
     ae0:	ef 93       	push	r30
     ae2:	ff 93       	push	r31
     ae4:	20 91 c8 00 	lds	r18, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
     ae8:	30 91 ce 00 	lds	r19, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
     aec:	28 71       	andi	r18, 0x18	; 24
     aee:	80 91 20 05 	lds	r24, 0x0520	; 0x800520 <UART1_RxHead>
     af2:	90 e0       	ldi	r25, 0x00	; 0
     af4:	01 96       	adiw	r24, 0x01	; 1
     af6:	8f 77       	andi	r24, 0x7F	; 127
     af8:	99 27       	eor	r25, r25
     afa:	40 91 1f 05 	lds	r20, 0x051F	; 0x80051f <UART1_RxTail>
     afe:	50 e0       	ldi	r21, 0x00	; 0
     b00:	84 17       	cp	r24, r20
     b02:	95 07       	cpc	r25, r21
     b04:	39 f0       	breq	.+14     	; 0xb14 <__vector_36+0x4e>
     b06:	80 93 20 05 	sts	0x0520, r24	; 0x800520 <UART1_RxHead>
     b0a:	fc 01       	movw	r30, r24
     b0c:	ed 5d       	subi	r30, 0xDD	; 221
     b0e:	fa 4f       	sbci	r31, 0xFA	; 250
     b10:	30 83       	st	Z, r19
     b12:	01 c0       	rjmp	.+2      	; 0xb16 <__vector_36+0x50>
     b14:	22 e0       	ldi	r18, 0x02	; 2
     b16:	20 93 1e 05 	sts	0x051E, r18	; 0x80051e <UART1_LastRxError>
     b1a:	ff 91       	pop	r31
     b1c:	ef 91       	pop	r30
     b1e:	9f 91       	pop	r25
     b20:	8f 91       	pop	r24
     b22:	5f 91       	pop	r21
     b24:	4f 91       	pop	r20
     b26:	3f 91       	pop	r19
     b28:	2f 91       	pop	r18
     b2a:	0f 90       	pop	r0
     b2c:	0b be       	out	0x3b, r0	; 59
     b2e:	0f 90       	pop	r0
     b30:	0f be       	out	0x3f, r0	; 63
     b32:	0f 90       	pop	r0
     b34:	1f 90       	pop	r1
     b36:	18 95       	reti

00000b38 <__vector_37>:
     b38:	1f 92       	push	r1
     b3a:	0f 92       	push	r0
     b3c:	0f b6       	in	r0, 0x3f	; 63
     b3e:	0f 92       	push	r0
     b40:	11 24       	eor	r1, r1
     b42:	0b b6       	in	r0, 0x3b	; 59
     b44:	0f 92       	push	r0
     b46:	8f 93       	push	r24
     b48:	9f 93       	push	r25
     b4a:	ef 93       	push	r30
     b4c:	ff 93       	push	r31
     b4e:	90 91 22 05 	lds	r25, 0x0522	; 0x800522 <UART1_TxHead>
     b52:	80 91 21 05 	lds	r24, 0x0521	; 0x800521 <UART1_TxTail>
     b56:	98 17       	cp	r25, r24
     b58:	89 f0       	breq	.+34     	; 0xb7c <__vector_37+0x44>
     b5a:	80 91 21 05 	lds	r24, 0x0521	; 0x800521 <UART1_TxTail>
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	01 96       	adiw	r24, 0x01	; 1
     b62:	8f 77       	andi	r24, 0x7F	; 127
     b64:	99 27       	eor	r25, r25
     b66:	80 93 21 05 	sts	0x0521, r24	; 0x800521 <UART1_TxTail>
     b6a:	fc 01       	movw	r30, r24
     b6c:	ed 55       	subi	r30, 0x5D	; 93
     b6e:	fa 4f       	sbci	r31, 0xFA	; 250
     b70:	80 81       	ld	r24, Z
     b72:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
     b76:	10 92 12 03 	sts	0x0312, r1	; 0x800312 <UART1_Transmission_end>
     b7a:	08 c0       	rjmp	.+16     	; 0xb8c <__vector_37+0x54>
     b7c:	e9 ec       	ldi	r30, 0xC9	; 201
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	80 81       	ld	r24, Z
     b82:	8f 7d       	andi	r24, 0xDF	; 223
     b84:	80 83       	st	Z, r24
     b86:	81 e0       	ldi	r24, 0x01	; 1
     b88:	80 93 12 03 	sts	0x0312, r24	; 0x800312 <UART1_Transmission_end>
     b8c:	ff 91       	pop	r31
     b8e:	ef 91       	pop	r30
     b90:	9f 91       	pop	r25
     b92:	8f 91       	pop	r24
     b94:	0f 90       	pop	r0
     b96:	0b be       	out	0x3b, r0	; 59
     b98:	0f 90       	pop	r0
     b9a:	0f be       	out	0x3f, r0	; 63
     b9c:	0f 90       	pop	r0
     b9e:	1f 90       	pop	r1
     ba0:	18 95       	reti

00000ba2 <UART1_init>:
     ba2:	0f 93       	push	r16
     ba4:	1f 93       	push	r17
     ba6:	8b 01       	movw	r16, r22
     ba8:	9c 01       	movw	r18, r24
     baa:	f8 94       	cli
     bac:	10 92 22 05 	sts	0x0522, r1	; 0x800522 <UART1_TxHead>
     bb0:	10 92 21 05 	sts	0x0521, r1	; 0x800521 <UART1_TxTail>
     bb4:	10 92 20 05 	sts	0x0520, r1	; 0x800520 <UART1_RxHead>
     bb8:	10 92 1f 05 	sts	0x051F, r1	; 0x80051f <UART1_RxTail>
     bbc:	78 94       	sei
     bbe:	dc 01       	movw	r26, r24
     bc0:	cb 01       	movw	r24, r22
     bc2:	80 58       	subi	r24, 0x80	; 128
     bc4:	9b 47       	sbci	r25, 0x7B	; 123
     bc6:	a1 4e       	sbci	r26, 0xE1	; 225
     bc8:	bf 4f       	sbci	r27, 0xFF	; 255
     bca:	88 0f       	add	r24, r24
     bcc:	99 1f       	adc	r25, r25
     bce:	aa 1f       	adc	r26, r26
     bd0:	bb 1f       	adc	r27, r27
     bd2:	88 0f       	add	r24, r24
     bd4:	99 1f       	adc	r25, r25
     bd6:	aa 1f       	adc	r26, r26
     bd8:	bb 1f       	adc	r27, r27
     bda:	bc 01       	movw	r22, r24
     bdc:	cd 01       	movw	r24, r26
     bde:	66 0f       	add	r22, r22
     be0:	77 1f       	adc	r23, r23
     be2:	88 1f       	adc	r24, r24
     be4:	99 1f       	adc	r25, r25
     be6:	00 0f       	add	r16, r16
     be8:	11 1f       	adc	r17, r17
     bea:	22 1f       	adc	r18, r18
     bec:	33 1f       	adc	r19, r19
     bee:	00 0f       	add	r16, r16
     bf0:	11 1f       	adc	r17, r17
     bf2:	22 1f       	adc	r18, r18
     bf4:	33 1f       	adc	r19, r19
     bf6:	a9 01       	movw	r20, r18
     bf8:	98 01       	movw	r18, r16
     bfa:	22 0f       	add	r18, r18
     bfc:	33 1f       	adc	r19, r19
     bfe:	44 1f       	adc	r20, r20
     c00:	55 1f       	adc	r21, r21
     c02:	22 0f       	add	r18, r18
     c04:	33 1f       	adc	r19, r19
     c06:	44 1f       	adc	r20, r20
     c08:	55 1f       	adc	r21, r21
     c0a:	0e 94 da 17 	call	0x2fb4	; 0x2fb4 <__udivmodsi4>
     c0e:	ba 01       	movw	r22, r20
     c10:	a9 01       	movw	r20, r18
     c12:	41 50       	subi	r20, 0x01	; 1
     c14:	51 09       	sbc	r21, r1
     c16:	61 09       	sbc	r22, r1
     c18:	71 09       	sbc	r23, r1
     c1a:	57 ff       	sbrs	r21, 7
     c1c:	06 c0       	rjmp	.+12     	; 0xc2a <UART1_init+0x88>
     c1e:	82 e0       	ldi	r24, 0x02	; 2
     c20:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
     c24:	5f 77       	andi	r21, 0x7F	; 127
     c26:	66 27       	eor	r22, r22
     c28:	77 27       	eor	r23, r23
     c2a:	bb 27       	eor	r27, r27
     c2c:	a7 2f       	mov	r26, r23
     c2e:	96 2f       	mov	r25, r22
     c30:	85 2f       	mov	r24, r21
     c32:	80 93 cd 00 	sts	0x00CD, r24	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7000cd>
     c36:	40 93 cc 00 	sts	0x00CC, r20	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7000cc>
     c3a:	88 e9       	ldi	r24, 0x98	; 152
     c3c:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7000c9>
     c40:	86 e0       	ldi	r24, 0x06	; 6
     c42:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7000ca>
     c46:	1f 91       	pop	r17
     c48:	0f 91       	pop	r16
     c4a:	08 95       	ret

00000c4c <UART1_getc>:
     c4c:	f8 94       	cli
     c4e:	90 91 20 05 	lds	r25, 0x0520	; 0x800520 <UART1_RxHead>
     c52:	80 91 1f 05 	lds	r24, 0x051F	; 0x80051f <UART1_RxTail>
     c56:	98 13       	cpse	r25, r24
     c58:	04 c0       	rjmp	.+8      	; 0xc62 <UART1_getc+0x16>
     c5a:	78 94       	sei
     c5c:	80 e0       	ldi	r24, 0x00	; 0
     c5e:	91 e0       	ldi	r25, 0x01	; 1
     c60:	08 95       	ret
     c62:	80 91 1f 05 	lds	r24, 0x051F	; 0x80051f <UART1_RxTail>
     c66:	90 e0       	ldi	r25, 0x00	; 0
     c68:	01 96       	adiw	r24, 0x01	; 1
     c6a:	8f 77       	andi	r24, 0x7F	; 127
     c6c:	99 27       	eor	r25, r25
     c6e:	80 93 1f 05 	sts	0x051F, r24	; 0x80051f <UART1_RxTail>
     c72:	78 94       	sei
     c74:	fc 01       	movw	r30, r24
     c76:	ed 5d       	subi	r30, 0xDD	; 221
     c78:	fa 4f       	sbci	r31, 0xFA	; 250
     c7a:	20 81       	ld	r18, Z
     c7c:	80 91 1e 05 	lds	r24, 0x051E	; 0x80051e <UART1_LastRxError>
     c80:	90 e0       	ldi	r25, 0x00	; 0
     c82:	98 2f       	mov	r25, r24
     c84:	88 27       	eor	r24, r24
     c86:	82 0f       	add	r24, r18
     c88:	91 1d       	adc	r25, r1
     c8a:	08 95       	ret

00000c8c <UART1_putc>:
     c8c:	40 91 22 05 	lds	r20, 0x0522	; 0x800522 <UART1_TxHead>
     c90:	50 e0       	ldi	r21, 0x00	; 0
     c92:	4f 5f       	subi	r20, 0xFF	; 255
     c94:	5f 4f       	sbci	r21, 0xFF	; 255
     c96:	4f 77       	andi	r20, 0x7F	; 127
     c98:	55 27       	eor	r21, r21
     c9a:	20 91 21 05 	lds	r18, 0x0521	; 0x800521 <UART1_TxTail>
     c9e:	30 e0       	ldi	r19, 0x00	; 0
     ca0:	42 17       	cp	r20, r18
     ca2:	53 07       	cpc	r21, r19
     ca4:	d1 f3       	breq	.-12     	; 0xc9a <UART1_putc+0xe>
     ca6:	fa 01       	movw	r30, r20
     ca8:	ed 55       	subi	r30, 0x5D	; 93
     caa:	fa 4f       	sbci	r31, 0xFA	; 250
     cac:	80 83       	st	Z, r24
     cae:	40 93 22 05 	sts	0x0522, r20	; 0x800522 <UART1_TxHead>
     cb2:	e9 ec       	ldi	r30, 0xC9	; 201
     cb4:	f0 e0       	ldi	r31, 0x00	; 0
     cb6:	80 81       	ld	r24, Z
     cb8:	80 62       	ori	r24, 0x20	; 32
     cba:	80 83       	st	Z, r24
     cbc:	08 95       	ret

00000cbe <UART1_available>:
     cbe:	f8 94       	cli
     cc0:	80 91 20 05 	lds	r24, 0x0520	; 0x800520 <UART1_RxHead>
     cc4:	20 91 1f 05 	lds	r18, 0x051F	; 0x80051f <UART1_RxTail>
     cc8:	78 94       	sei
     cca:	90 e0       	ldi	r25, 0x00	; 0
     ccc:	80 58       	subi	r24, 0x80	; 128
     cce:	9f 4f       	sbci	r25, 0xFF	; 255
     cd0:	82 1b       	sub	r24, r18
     cd2:	91 09       	sbc	r25, r1
     cd4:	8f 77       	andi	r24, 0x7F	; 127
     cd6:	99 27       	eor	r25, r25
     cd8:	08 95       	ret

00000cda <UART1_flush>:
     cda:	80 91 12 03 	lds	r24, 0x0312	; 0x800312 <UART1_Transmission_end>
     cde:	88 23       	and	r24, r24
     ce0:	e1 f3       	breq	.-8      	; 0xcda <UART1_flush>
     ce2:	08 95       	ret

00000ce4 <__vector_51>:
     ce4:	1f 92       	push	r1
     ce6:	0f 92       	push	r0
     ce8:	0f b6       	in	r0, 0x3f	; 63
     cea:	0f 92       	push	r0
     cec:	11 24       	eor	r1, r1
     cee:	0b b6       	in	r0, 0x3b	; 59
     cf0:	0f 92       	push	r0
     cf2:	2f 93       	push	r18
     cf4:	3f 93       	push	r19
     cf6:	4f 93       	push	r20
     cf8:	5f 93       	push	r21
     cfa:	8f 93       	push	r24
     cfc:	9f 93       	push	r25
     cfe:	ef 93       	push	r30
     d00:	ff 93       	push	r31
     d02:	20 91 d0 00 	lds	r18, 0x00D0	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7000d0>
     d06:	30 91 d6 00 	lds	r19, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
     d0a:	28 71       	andi	r18, 0x18	; 24
     d0c:	80 91 1b 04 	lds	r24, 0x041B	; 0x80041b <UART2_RxHead>
     d10:	90 e0       	ldi	r25, 0x00	; 0
     d12:	01 96       	adiw	r24, 0x01	; 1
     d14:	8f 77       	andi	r24, 0x7F	; 127
     d16:	99 27       	eor	r25, r25
     d18:	40 91 1a 04 	lds	r20, 0x041A	; 0x80041a <UART2_RxTail>
     d1c:	50 e0       	ldi	r21, 0x00	; 0
     d1e:	84 17       	cp	r24, r20
     d20:	95 07       	cpc	r25, r21
     d22:	39 f0       	breq	.+14     	; 0xd32 <__vector_51+0x4e>
     d24:	80 93 1b 04 	sts	0x041B, r24	; 0x80041b <UART2_RxHead>
     d28:	fc 01       	movw	r30, r24
     d2a:	e2 5e       	subi	r30, 0xE2	; 226
     d2c:	fb 4f       	sbci	r31, 0xFB	; 251
     d2e:	30 83       	st	Z, r19
     d30:	01 c0       	rjmp	.+2      	; 0xd34 <__vector_51+0x50>
     d32:	22 e0       	ldi	r18, 0x02	; 2
     d34:	20 93 19 04 	sts	0x0419, r18	; 0x800419 <UART2_LastRxError>
     d38:	ff 91       	pop	r31
     d3a:	ef 91       	pop	r30
     d3c:	9f 91       	pop	r25
     d3e:	8f 91       	pop	r24
     d40:	5f 91       	pop	r21
     d42:	4f 91       	pop	r20
     d44:	3f 91       	pop	r19
     d46:	2f 91       	pop	r18
     d48:	0f 90       	pop	r0
     d4a:	0b be       	out	0x3b, r0	; 59
     d4c:	0f 90       	pop	r0
     d4e:	0f be       	out	0x3f, r0	; 63
     d50:	0f 90       	pop	r0
     d52:	1f 90       	pop	r1
     d54:	18 95       	reti

00000d56 <__vector_52>:
     d56:	1f 92       	push	r1
     d58:	0f 92       	push	r0
     d5a:	0f b6       	in	r0, 0x3f	; 63
     d5c:	0f 92       	push	r0
     d5e:	11 24       	eor	r1, r1
     d60:	0b b6       	in	r0, 0x3b	; 59
     d62:	0f 92       	push	r0
     d64:	8f 93       	push	r24
     d66:	9f 93       	push	r25
     d68:	ef 93       	push	r30
     d6a:	ff 93       	push	r31
     d6c:	90 91 1d 04 	lds	r25, 0x041D	; 0x80041d <UART2_TxHead>
     d70:	80 91 1c 04 	lds	r24, 0x041C	; 0x80041c <UART2_TxTail>
     d74:	98 17       	cp	r25, r24
     d76:	89 f0       	breq	.+34     	; 0xd9a <__vector_52+0x44>
     d78:	80 91 1c 04 	lds	r24, 0x041C	; 0x80041c <UART2_TxTail>
     d7c:	90 e0       	ldi	r25, 0x00	; 0
     d7e:	01 96       	adiw	r24, 0x01	; 1
     d80:	8f 77       	andi	r24, 0x7F	; 127
     d82:	99 27       	eor	r25, r25
     d84:	80 93 1c 04 	sts	0x041C, r24	; 0x80041c <UART2_TxTail>
     d88:	fc 01       	movw	r30, r24
     d8a:	e2 56       	subi	r30, 0x62	; 98
     d8c:	fb 4f       	sbci	r31, 0xFB	; 251
     d8e:	80 81       	ld	r24, Z
     d90:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
     d94:	10 92 11 03 	sts	0x0311, r1	; 0x800311 <UART2_Transmission_end>
     d98:	08 c0       	rjmp	.+16     	; 0xdaa <__vector_52+0x54>
     d9a:	e1 ed       	ldi	r30, 0xD1	; 209
     d9c:	f0 e0       	ldi	r31, 0x00	; 0
     d9e:	80 81       	ld	r24, Z
     da0:	8f 7d       	andi	r24, 0xDF	; 223
     da2:	80 83       	st	Z, r24
     da4:	81 e0       	ldi	r24, 0x01	; 1
     da6:	80 93 11 03 	sts	0x0311, r24	; 0x800311 <UART2_Transmission_end>
     daa:	ff 91       	pop	r31
     dac:	ef 91       	pop	r30
     dae:	9f 91       	pop	r25
     db0:	8f 91       	pop	r24
     db2:	0f 90       	pop	r0
     db4:	0b be       	out	0x3b, r0	; 59
     db6:	0f 90       	pop	r0
     db8:	0f be       	out	0x3f, r0	; 63
     dba:	0f 90       	pop	r0
     dbc:	1f 90       	pop	r1
     dbe:	18 95       	reti

00000dc0 <UART2_init>:
     dc0:	0f 93       	push	r16
     dc2:	1f 93       	push	r17
     dc4:	8b 01       	movw	r16, r22
     dc6:	9c 01       	movw	r18, r24
     dc8:	f8 94       	cli
     dca:	10 92 1d 04 	sts	0x041D, r1	; 0x80041d <UART2_TxHead>
     dce:	10 92 1c 04 	sts	0x041C, r1	; 0x80041c <UART2_TxTail>
     dd2:	10 92 1b 04 	sts	0x041B, r1	; 0x80041b <UART2_RxHead>
     dd6:	10 92 1a 04 	sts	0x041A, r1	; 0x80041a <UART2_RxTail>
     dda:	78 94       	sei
     ddc:	dc 01       	movw	r26, r24
     dde:	cb 01       	movw	r24, r22
     de0:	80 58       	subi	r24, 0x80	; 128
     de2:	9b 47       	sbci	r25, 0x7B	; 123
     de4:	a1 4e       	sbci	r26, 0xE1	; 225
     de6:	bf 4f       	sbci	r27, 0xFF	; 255
     de8:	88 0f       	add	r24, r24
     dea:	99 1f       	adc	r25, r25
     dec:	aa 1f       	adc	r26, r26
     dee:	bb 1f       	adc	r27, r27
     df0:	88 0f       	add	r24, r24
     df2:	99 1f       	adc	r25, r25
     df4:	aa 1f       	adc	r26, r26
     df6:	bb 1f       	adc	r27, r27
     df8:	bc 01       	movw	r22, r24
     dfa:	cd 01       	movw	r24, r26
     dfc:	66 0f       	add	r22, r22
     dfe:	77 1f       	adc	r23, r23
     e00:	88 1f       	adc	r24, r24
     e02:	99 1f       	adc	r25, r25
     e04:	00 0f       	add	r16, r16
     e06:	11 1f       	adc	r17, r17
     e08:	22 1f       	adc	r18, r18
     e0a:	33 1f       	adc	r19, r19
     e0c:	00 0f       	add	r16, r16
     e0e:	11 1f       	adc	r17, r17
     e10:	22 1f       	adc	r18, r18
     e12:	33 1f       	adc	r19, r19
     e14:	a9 01       	movw	r20, r18
     e16:	98 01       	movw	r18, r16
     e18:	22 0f       	add	r18, r18
     e1a:	33 1f       	adc	r19, r19
     e1c:	44 1f       	adc	r20, r20
     e1e:	55 1f       	adc	r21, r21
     e20:	22 0f       	add	r18, r18
     e22:	33 1f       	adc	r19, r19
     e24:	44 1f       	adc	r20, r20
     e26:	55 1f       	adc	r21, r21
     e28:	0e 94 da 17 	call	0x2fb4	; 0x2fb4 <__udivmodsi4>
     e2c:	ba 01       	movw	r22, r20
     e2e:	a9 01       	movw	r20, r18
     e30:	41 50       	subi	r20, 0x01	; 1
     e32:	51 09       	sbc	r21, r1
     e34:	61 09       	sbc	r22, r1
     e36:	71 09       	sbc	r23, r1
     e38:	57 ff       	sbrs	r21, 7
     e3a:	06 c0       	rjmp	.+12     	; 0xe48 <UART2_init+0x88>
     e3c:	82 e0       	ldi	r24, 0x02	; 2
     e3e:	80 93 d0 00 	sts	0x00D0, r24	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7000d0>
     e42:	5f 77       	andi	r21, 0x7F	; 127
     e44:	66 27       	eor	r22, r22
     e46:	77 27       	eor	r23, r23
     e48:	bb 27       	eor	r27, r27
     e4a:	a7 2f       	mov	r26, r23
     e4c:	96 2f       	mov	r25, r22
     e4e:	85 2f       	mov	r24, r21
     e50:	80 93 d5 00 	sts	0x00D5, r24	; 0x8000d5 <__TEXT_REGION_LENGTH__+0x7000d5>
     e54:	40 93 d4 00 	sts	0x00D4, r20	; 0x8000d4 <__TEXT_REGION_LENGTH__+0x7000d4>
     e58:	88 e9       	ldi	r24, 0x98	; 152
     e5a:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7000d1>
     e5e:	86 e0       	ldi	r24, 0x06	; 6
     e60:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7000d2>
     e64:	1f 91       	pop	r17
     e66:	0f 91       	pop	r16
     e68:	08 95       	ret

00000e6a <UART2_getc>:
     e6a:	90 91 1b 04 	lds	r25, 0x041B	; 0x80041b <UART2_RxHead>
     e6e:	80 91 1a 04 	lds	r24, 0x041A	; 0x80041a <UART2_RxTail>
     e72:	98 17       	cp	r25, r24
     e74:	a1 f0       	breq	.+40     	; 0xe9e <UART2_getc+0x34>
     e76:	80 91 1a 04 	lds	r24, 0x041A	; 0x80041a <UART2_RxTail>
     e7a:	90 e0       	ldi	r25, 0x00	; 0
     e7c:	01 96       	adiw	r24, 0x01	; 1
     e7e:	8f 77       	andi	r24, 0x7F	; 127
     e80:	99 27       	eor	r25, r25
     e82:	80 93 1a 04 	sts	0x041A, r24	; 0x80041a <UART2_RxTail>
     e86:	fc 01       	movw	r30, r24
     e88:	e2 5e       	subi	r30, 0xE2	; 226
     e8a:	fb 4f       	sbci	r31, 0xFB	; 251
     e8c:	20 81       	ld	r18, Z
     e8e:	80 91 19 04 	lds	r24, 0x0419	; 0x800419 <UART2_LastRxError>
     e92:	90 e0       	ldi	r25, 0x00	; 0
     e94:	98 2f       	mov	r25, r24
     e96:	88 27       	eor	r24, r24
     e98:	82 0f       	add	r24, r18
     e9a:	91 1d       	adc	r25, r1
     e9c:	08 95       	ret
     e9e:	80 e0       	ldi	r24, 0x00	; 0
     ea0:	91 e0       	ldi	r25, 0x01	; 1
     ea2:	08 95       	ret

00000ea4 <UART2_putc>:
     ea4:	40 91 1d 04 	lds	r20, 0x041D	; 0x80041d <UART2_TxHead>
     ea8:	50 e0       	ldi	r21, 0x00	; 0
     eaa:	4f 5f       	subi	r20, 0xFF	; 255
     eac:	5f 4f       	sbci	r21, 0xFF	; 255
     eae:	4f 77       	andi	r20, 0x7F	; 127
     eb0:	55 27       	eor	r21, r21
     eb2:	20 91 1c 04 	lds	r18, 0x041C	; 0x80041c <UART2_TxTail>
     eb6:	30 e0       	ldi	r19, 0x00	; 0
     eb8:	42 17       	cp	r20, r18
     eba:	53 07       	cpc	r21, r19
     ebc:	d1 f3       	breq	.-12     	; 0xeb2 <UART2_putc+0xe>
     ebe:	fa 01       	movw	r30, r20
     ec0:	e2 56       	subi	r30, 0x62	; 98
     ec2:	fb 4f       	sbci	r31, 0xFB	; 251
     ec4:	80 83       	st	Z, r24
     ec6:	40 93 1d 04 	sts	0x041D, r20	; 0x80041d <UART2_TxHead>
     eca:	e1 ed       	ldi	r30, 0xD1	; 209
     ecc:	f0 e0       	ldi	r31, 0x00	; 0
     ece:	80 81       	ld	r24, Z
     ed0:	80 62       	ori	r24, 0x20	; 32
     ed2:	80 83       	st	Z, r24
     ed4:	08 95       	ret

00000ed6 <UART2_available>:
     ed6:	f8 94       	cli
     ed8:	80 91 1b 04 	lds	r24, 0x041B	; 0x80041b <UART2_RxHead>
     edc:	20 91 1a 04 	lds	r18, 0x041A	; 0x80041a <UART2_RxTail>
     ee0:	78 94       	sei
     ee2:	90 e0       	ldi	r25, 0x00	; 0
     ee4:	80 58       	subi	r24, 0x80	; 128
     ee6:	9f 4f       	sbci	r25, 0xFF	; 255
     ee8:	82 1b       	sub	r24, r18
     eea:	91 09       	sbc	r25, r1
     eec:	8f 77       	andi	r24, 0x7F	; 127
     eee:	99 27       	eor	r25, r25
     ef0:	08 95       	ret

00000ef2 <UART2_flush>:
     ef2:	80 91 11 03 	lds	r24, 0x0311	; 0x800311 <UART2_Transmission_end>
     ef6:	88 23       	and	r24, r24
     ef8:	e1 f3       	breq	.-8      	; 0xef2 <UART2_flush>
     efa:	08 95       	ret

00000efc <__vector_54>:
     efc:	1f 92       	push	r1
     efe:	0f 92       	push	r0
     f00:	0f b6       	in	r0, 0x3f	; 63
     f02:	0f 92       	push	r0
     f04:	11 24       	eor	r1, r1
     f06:	0b b6       	in	r0, 0x3b	; 59
     f08:	0f 92       	push	r0
     f0a:	2f 93       	push	r18
     f0c:	3f 93       	push	r19
     f0e:	4f 93       	push	r20
     f10:	5f 93       	push	r21
     f12:	8f 93       	push	r24
     f14:	9f 93       	push	r25
     f16:	ef 93       	push	r30
     f18:	ff 93       	push	r31
     f1a:	20 91 30 01 	lds	r18, 0x0130	; 0x800130 <__TEXT_REGION_LENGTH__+0x700130>
     f1e:	30 91 36 01 	lds	r19, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
     f22:	28 71       	andi	r18, 0x18	; 24
     f24:	80 91 16 03 	lds	r24, 0x0316	; 0x800316 <UART3_RxHead>
     f28:	90 e0       	ldi	r25, 0x00	; 0
     f2a:	01 96       	adiw	r24, 0x01	; 1
     f2c:	8f 77       	andi	r24, 0x7F	; 127
     f2e:	99 27       	eor	r25, r25
     f30:	40 91 15 03 	lds	r20, 0x0315	; 0x800315 <UART3_RxTail>
     f34:	50 e0       	ldi	r21, 0x00	; 0
     f36:	84 17       	cp	r24, r20
     f38:	95 07       	cpc	r25, r21
     f3a:	39 f0       	breq	.+14     	; 0xf4a <__vector_54+0x4e>
     f3c:	80 93 16 03 	sts	0x0316, r24	; 0x800316 <UART3_RxHead>
     f40:	fc 01       	movw	r30, r24
     f42:	e7 5e       	subi	r30, 0xE7	; 231
     f44:	fc 4f       	sbci	r31, 0xFC	; 252
     f46:	30 83       	st	Z, r19
     f48:	01 c0       	rjmp	.+2      	; 0xf4c <__vector_54+0x50>
     f4a:	22 e0       	ldi	r18, 0x02	; 2
     f4c:	20 93 14 03 	sts	0x0314, r18	; 0x800314 <UART3_LastRxError>
     f50:	ff 91       	pop	r31
     f52:	ef 91       	pop	r30
     f54:	9f 91       	pop	r25
     f56:	8f 91       	pop	r24
     f58:	5f 91       	pop	r21
     f5a:	4f 91       	pop	r20
     f5c:	3f 91       	pop	r19
     f5e:	2f 91       	pop	r18
     f60:	0f 90       	pop	r0
     f62:	0b be       	out	0x3b, r0	; 59
     f64:	0f 90       	pop	r0
     f66:	0f be       	out	0x3f, r0	; 63
     f68:	0f 90       	pop	r0
     f6a:	1f 90       	pop	r1
     f6c:	18 95       	reti

00000f6e <__vector_55>:
     f6e:	1f 92       	push	r1
     f70:	0f 92       	push	r0
     f72:	0f b6       	in	r0, 0x3f	; 63
     f74:	0f 92       	push	r0
     f76:	11 24       	eor	r1, r1
     f78:	0b b6       	in	r0, 0x3b	; 59
     f7a:	0f 92       	push	r0
     f7c:	8f 93       	push	r24
     f7e:	9f 93       	push	r25
     f80:	ef 93       	push	r30
     f82:	ff 93       	push	r31
     f84:	90 91 18 03 	lds	r25, 0x0318	; 0x800318 <UART3_TxHead>
     f88:	80 91 17 03 	lds	r24, 0x0317	; 0x800317 <UART3_TxTail>
     f8c:	98 17       	cp	r25, r24
     f8e:	89 f0       	breq	.+34     	; 0xfb2 <__vector_55+0x44>
     f90:	80 91 17 03 	lds	r24, 0x0317	; 0x800317 <UART3_TxTail>
     f94:	90 e0       	ldi	r25, 0x00	; 0
     f96:	01 96       	adiw	r24, 0x01	; 1
     f98:	8f 77       	andi	r24, 0x7F	; 127
     f9a:	99 27       	eor	r25, r25
     f9c:	80 93 17 03 	sts	0x0317, r24	; 0x800317 <UART3_TxTail>
     fa0:	fc 01       	movw	r30, r24
     fa2:	e7 56       	subi	r30, 0x67	; 103
     fa4:	fc 4f       	sbci	r31, 0xFC	; 252
     fa6:	80 81       	ld	r24, Z
     fa8:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
     fac:	10 92 10 03 	sts	0x0310, r1	; 0x800310 <UART3_Transmission_end>
     fb0:	08 c0       	rjmp	.+16     	; 0xfc2 <__vector_55+0x54>
     fb2:	e1 e3       	ldi	r30, 0x31	; 49
     fb4:	f1 e0       	ldi	r31, 0x01	; 1
     fb6:	80 81       	ld	r24, Z
     fb8:	8f 7d       	andi	r24, 0xDF	; 223
     fba:	80 83       	st	Z, r24
     fbc:	81 e0       	ldi	r24, 0x01	; 1
     fbe:	80 93 10 03 	sts	0x0310, r24	; 0x800310 <UART3_Transmission_end>
     fc2:	ff 91       	pop	r31
     fc4:	ef 91       	pop	r30
     fc6:	9f 91       	pop	r25
     fc8:	8f 91       	pop	r24
     fca:	0f 90       	pop	r0
     fcc:	0b be       	out	0x3b, r0	; 59
     fce:	0f 90       	pop	r0
     fd0:	0f be       	out	0x3f, r0	; 63
     fd2:	0f 90       	pop	r0
     fd4:	1f 90       	pop	r1
     fd6:	18 95       	reti

00000fd8 <UART3_init>:
     fd8:	0f 93       	push	r16
     fda:	1f 93       	push	r17
     fdc:	8b 01       	movw	r16, r22
     fde:	9c 01       	movw	r18, r24
     fe0:	f8 94       	cli
     fe2:	10 92 18 03 	sts	0x0318, r1	; 0x800318 <UART3_TxHead>
     fe6:	10 92 17 03 	sts	0x0317, r1	; 0x800317 <UART3_TxTail>
     fea:	10 92 16 03 	sts	0x0316, r1	; 0x800316 <UART3_RxHead>
     fee:	10 92 15 03 	sts	0x0315, r1	; 0x800315 <UART3_RxTail>
     ff2:	78 94       	sei
     ff4:	dc 01       	movw	r26, r24
     ff6:	cb 01       	movw	r24, r22
     ff8:	80 58       	subi	r24, 0x80	; 128
     ffa:	9b 47       	sbci	r25, 0x7B	; 123
     ffc:	a1 4e       	sbci	r26, 0xE1	; 225
     ffe:	bf 4f       	sbci	r27, 0xFF	; 255
    1000:	88 0f       	add	r24, r24
    1002:	99 1f       	adc	r25, r25
    1004:	aa 1f       	adc	r26, r26
    1006:	bb 1f       	adc	r27, r27
    1008:	88 0f       	add	r24, r24
    100a:	99 1f       	adc	r25, r25
    100c:	aa 1f       	adc	r26, r26
    100e:	bb 1f       	adc	r27, r27
    1010:	bc 01       	movw	r22, r24
    1012:	cd 01       	movw	r24, r26
    1014:	66 0f       	add	r22, r22
    1016:	77 1f       	adc	r23, r23
    1018:	88 1f       	adc	r24, r24
    101a:	99 1f       	adc	r25, r25
    101c:	00 0f       	add	r16, r16
    101e:	11 1f       	adc	r17, r17
    1020:	22 1f       	adc	r18, r18
    1022:	33 1f       	adc	r19, r19
    1024:	00 0f       	add	r16, r16
    1026:	11 1f       	adc	r17, r17
    1028:	22 1f       	adc	r18, r18
    102a:	33 1f       	adc	r19, r19
    102c:	a9 01       	movw	r20, r18
    102e:	98 01       	movw	r18, r16
    1030:	22 0f       	add	r18, r18
    1032:	33 1f       	adc	r19, r19
    1034:	44 1f       	adc	r20, r20
    1036:	55 1f       	adc	r21, r21
    1038:	22 0f       	add	r18, r18
    103a:	33 1f       	adc	r19, r19
    103c:	44 1f       	adc	r20, r20
    103e:	55 1f       	adc	r21, r21
    1040:	0e 94 da 17 	call	0x2fb4	; 0x2fb4 <__udivmodsi4>
    1044:	ba 01       	movw	r22, r20
    1046:	a9 01       	movw	r20, r18
    1048:	41 50       	subi	r20, 0x01	; 1
    104a:	51 09       	sbc	r21, r1
    104c:	61 09       	sbc	r22, r1
    104e:	71 09       	sbc	r23, r1
    1050:	57 ff       	sbrs	r21, 7
    1052:	06 c0       	rjmp	.+12     	; 0x1060 <UART3_init+0x88>
    1054:	82 e0       	ldi	r24, 0x02	; 2
    1056:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <__TEXT_REGION_LENGTH__+0x700130>
    105a:	5f 77       	andi	r21, 0x7F	; 127
    105c:	66 27       	eor	r22, r22
    105e:	77 27       	eor	r23, r23
    1060:	bb 27       	eor	r27, r27
    1062:	a7 2f       	mov	r26, r23
    1064:	96 2f       	mov	r25, r22
    1066:	85 2f       	mov	r24, r21
    1068:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <__TEXT_REGION_LENGTH__+0x700135>
    106c:	40 93 34 01 	sts	0x0134, r20	; 0x800134 <__TEXT_REGION_LENGTH__+0x700134>
    1070:	88 e9       	ldi	r24, 0x98	; 152
    1072:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <__TEXT_REGION_LENGTH__+0x700131>
    1076:	86 e0       	ldi	r24, 0x06	; 6
    1078:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <__TEXT_REGION_LENGTH__+0x700132>
    107c:	1f 91       	pop	r17
    107e:	0f 91       	pop	r16
    1080:	08 95       	ret

00001082 <UART3_getc>:
    1082:	90 91 16 03 	lds	r25, 0x0316	; 0x800316 <UART3_RxHead>
    1086:	80 91 15 03 	lds	r24, 0x0315	; 0x800315 <UART3_RxTail>
    108a:	98 17       	cp	r25, r24
    108c:	a1 f0       	breq	.+40     	; 0x10b6 <UART3_getc+0x34>
    108e:	80 91 15 03 	lds	r24, 0x0315	; 0x800315 <UART3_RxTail>
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	01 96       	adiw	r24, 0x01	; 1
    1096:	8f 77       	andi	r24, 0x7F	; 127
    1098:	99 27       	eor	r25, r25
    109a:	80 93 15 03 	sts	0x0315, r24	; 0x800315 <UART3_RxTail>
    109e:	fc 01       	movw	r30, r24
    10a0:	e7 5e       	subi	r30, 0xE7	; 231
    10a2:	fc 4f       	sbci	r31, 0xFC	; 252
    10a4:	20 81       	ld	r18, Z
    10a6:	80 91 14 03 	lds	r24, 0x0314	; 0x800314 <UART3_LastRxError>
    10aa:	90 e0       	ldi	r25, 0x00	; 0
    10ac:	98 2f       	mov	r25, r24
    10ae:	88 27       	eor	r24, r24
    10b0:	82 0f       	add	r24, r18
    10b2:	91 1d       	adc	r25, r1
    10b4:	08 95       	ret
    10b6:	80 e0       	ldi	r24, 0x00	; 0
    10b8:	91 e0       	ldi	r25, 0x01	; 1
    10ba:	08 95       	ret

000010bc <UART3_putc>:
    10bc:	40 91 18 03 	lds	r20, 0x0318	; 0x800318 <UART3_TxHead>
    10c0:	50 e0       	ldi	r21, 0x00	; 0
    10c2:	4f 5f       	subi	r20, 0xFF	; 255
    10c4:	5f 4f       	sbci	r21, 0xFF	; 255
    10c6:	4f 77       	andi	r20, 0x7F	; 127
    10c8:	55 27       	eor	r21, r21
    10ca:	20 91 17 03 	lds	r18, 0x0317	; 0x800317 <UART3_TxTail>
    10ce:	30 e0       	ldi	r19, 0x00	; 0
    10d0:	42 17       	cp	r20, r18
    10d2:	53 07       	cpc	r21, r19
    10d4:	d1 f3       	breq	.-12     	; 0x10ca <UART3_putc+0xe>
    10d6:	fa 01       	movw	r30, r20
    10d8:	e7 56       	subi	r30, 0x67	; 103
    10da:	fc 4f       	sbci	r31, 0xFC	; 252
    10dc:	80 83       	st	Z, r24
    10de:	40 93 18 03 	sts	0x0318, r20	; 0x800318 <UART3_TxHead>
    10e2:	e1 e3       	ldi	r30, 0x31	; 49
    10e4:	f1 e0       	ldi	r31, 0x01	; 1
    10e6:	80 81       	ld	r24, Z
    10e8:	80 62       	ori	r24, 0x20	; 32
    10ea:	80 83       	st	Z, r24
    10ec:	08 95       	ret

000010ee <UART3_available>:
>>>>>>> 131ed066d936db6cb82dc024f16de69a40fef126
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
<<<<<<< HEAD
    1fa2:	f8 94       	cli
    1fa4:	80 91 50 05 	lds	r24, 0x0550	; 0x800550 <UART3_RxHead>
    1fa8:	20 91 4f 05 	lds	r18, 0x054F	; 0x80054f <UART3_RxTail>
=======
    10ee:	f8 94       	cli
uint16_t UART3_available(void)
{
	uint16_t ret;
	
	ATOMIC_BLOCK(ATOMIC_FORCEON) {
		ret = (UART_RX3_BUFFER_SIZE + UART3_RxHead - UART3_RxTail) & UART_RX3_BUFFER_MASK;
    10f0:	80 91 16 03 	lds	r24, 0x0316	; 0x800316 <UART3_RxHead>
    10f4:	20 91 15 03 	lds	r18, 0x0315	; 0x800315 <UART3_RxTail>
>>>>>>> 131ed066d936db6cb82dc024f16de69a40fef126
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
<<<<<<< HEAD
    1fac:	78 94       	sei
    1fae:	90 e0       	ldi	r25, 0x00	; 0
    1fb0:	80 58       	subi	r24, 0x80	; 128
    1fb2:	9f 4f       	sbci	r25, 0xFF	; 255
    1fb4:	82 1b       	sub	r24, r18
    1fb6:	91 09       	sbc	r25, r1
    1fb8:	8f 77       	andi	r24, 0x7F	; 127
    1fba:	99 27       	eor	r25, r25
    1fbc:	08 95       	ret

00001fbe <UART3_flush>:
    1fbe:	80 91 4a 05 	lds	r24, 0x054A	; 0x80054a <UART3_Transmission_end>
    1fc2:	88 23       	and	r24, r24
    1fc4:	e1 f3       	breq	.-8      	; 0x1fbe <UART3_flush>
    1fc6:	08 95       	ret

00001fc8 <vApplicationStackOverflowHook>:
    1fc8:	27 9a       	sbi	0x04, 7	; 4
    1fca:	2f 9a       	sbi	0x05, 7	; 5
=======
    10f8:	78 94       	sei
	}
	return ret;
    10fa:	90 e0       	ldi	r25, 0x00	; 0
    10fc:	80 58       	subi	r24, 0x80	; 128
    10fe:	9f 4f       	sbci	r25, 0xFF	; 255
    1100:	82 1b       	sub	r24, r18
    1102:	91 09       	sbc	r25, r1
} /* UART3_available */
    1104:	8f 77       	andi	r24, 0x7F	; 127
    1106:	99 27       	eor	r25, r25
    1108:	08 95       	ret

0000110a <UART3_flush>:
void UART3_flush(void)
{
//	ATOMIC_BLOCK(ATOMIC_FORCEON) {
//		UART3_RxHead = UART3_RxTail;
//	} commented by mohab
	while(0 == UART3_Transmission_end);
    110a:	80 91 10 03 	lds	r24, 0x0310	; 0x800310 <UART3_Transmission_end>
    110e:	88 23       	and	r24, r24
    1110:	e1 f3       	breq	.-8      	; 0x110a <UART3_flush>
} /* UART3_flush */
    1112:	08 95       	ret

00001114 <vApplicationStackOverflowHook>:
	   This routine will never return.
	   This routine is referenced in the task.c file of FreeRTOS as an extern.
	\*---------------------------------------------------------------------------*/

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
	DDRB  |= _BV(DDB7);
    1114:	27 9a       	sbi	0x04, 7	; 4
	PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    1116:	2f 9a       	sbi	0x05, 7	; 5
>>>>>>> 131ed066d936db6cb82dc024f16de69a40fef126
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif
<<<<<<< HEAD

	__builtin_avr_delay_cycles(__ticks_dc);
    1fcc:	2f e7       	ldi	r18, 0x7F	; 127
    1fce:	8a e1       	ldi	r24, 0x1A	; 26
    1fd0:	96 e0       	ldi	r25, 0x06	; 6
    1fd2:	21 50       	subi	r18, 0x01	; 1
    1fd4:	80 40       	sbci	r24, 0x00	; 0
    1fd6:	90 40       	sbci	r25, 0x00	; 0
    1fd8:	e1 f7       	brne	.-8      	; 0x1fd2 <vApplicationStackOverflowHook+0xa>
    1fda:	00 c0       	rjmp	.+0      	; 0x1fdc <vApplicationStackOverflowHook+0x14>
    1fdc:	00 00       	nop
    1fde:	1f 9a       	sbi	0x03, 7	; 3
    1fe0:	f5 cf       	rjmp	.-22     	; 0x1fcc <vApplicationStackOverflowHook+0x4>

00001fe2 <vApplicationGetIdleTaskMemory>:
    1fe2:	24 e3       	ldi	r18, 0x34	; 52
    1fe4:	3a e0       	ldi	r19, 0x0A	; 10
    1fe6:	fc 01       	movw	r30, r24
    1fe8:	31 83       	std	Z+1, r19	; 0x01
    1fea:	20 83       	st	Z, r18
    1fec:	8f ed       	ldi	r24, 0xDF	; 223
    1fee:	99 e0       	ldi	r25, 0x09	; 9
    1ff0:	fb 01       	movw	r30, r22
    1ff2:	91 83       	std	Z+1, r25	; 0x01
    1ff4:	80 83       	st	Z, r24
    1ff6:	85 e5       	ldi	r24, 0x55	; 85
    1ff8:	90 e0       	ldi	r25, 0x00	; 0
    1ffa:	fa 01       	movw	r30, r20
    1ffc:	91 83       	std	Z+1, r25	; 0x01
    1ffe:	80 83       	st	Z, r24
    2000:	08 95       	ret

00002002 <vApplicationGetTimerTaskMemory>:
    2002:	27 eb       	ldi	r18, 0xB7	; 183
    2004:	39 e0       	ldi	r19, 0x09	; 9
    2006:	fc 01       	movw	r30, r24
    2008:	31 83       	std	Z+1, r19	; 0x01
    200a:	20 83       	st	Z, r18
    200c:	82 e6       	ldi	r24, 0x62	; 98
    200e:	99 e0       	ldi	r25, 0x09	; 9
    2010:	fb 01       	movw	r30, r22
    2012:	91 83       	std	Z+1, r25	; 0x01
    2014:	80 83       	st	Z, r24
    2016:	85 e5       	ldi	r24, 0x55	; 85
    2018:	90 e0       	ldi	r25, 0x00	; 0
    201a:	fa 01       	movw	r30, r20
    201c:	91 83       	std	Z+1, r25	; 0x01
    201e:	80 83       	st	Z, r24
    2020:	08 95       	ret

00002022 <vListInitialise>:
    2022:	fc 01       	movw	r30, r24
    2024:	03 96       	adiw	r24, 0x03	; 3
    2026:	92 83       	std	Z+2, r25	; 0x02
    2028:	81 83       	std	Z+1, r24	; 0x01
    202a:	2f ef       	ldi	r18, 0xFF	; 255
    202c:	3f ef       	ldi	r19, 0xFF	; 255
    202e:	34 83       	std	Z+4, r19	; 0x04
    2030:	23 83       	std	Z+3, r18	; 0x03
    2032:	96 83       	std	Z+6, r25	; 0x06
    2034:	85 83       	std	Z+5, r24	; 0x05
    2036:	90 87       	std	Z+8, r25	; 0x08
    2038:	87 83       	std	Z+7, r24	; 0x07
    203a:	10 82       	st	Z, r1
    203c:	08 95       	ret

0000203e <vListInitialiseItem>:
    203e:	fc 01       	movw	r30, r24
    2040:	11 86       	std	Z+9, r1	; 0x09
    2042:	10 86       	std	Z+8, r1	; 0x08
    2044:	08 95       	ret

00002046 <vListInsertEnd>:
    2046:	cf 93       	push	r28
    2048:	df 93       	push	r29
    204a:	9c 01       	movw	r18, r24
    204c:	fb 01       	movw	r30, r22
    204e:	dc 01       	movw	r26, r24
    2050:	11 96       	adiw	r26, 0x01	; 1
    2052:	cd 91       	ld	r28, X+
    2054:	dc 91       	ld	r29, X
    2056:	12 97       	sbiw	r26, 0x02	; 2
    2058:	d3 83       	std	Z+3, r29	; 0x03
    205a:	c2 83       	std	Z+2, r28	; 0x02
    205c:	8c 81       	ldd	r24, Y+4	; 0x04
    205e:	9d 81       	ldd	r25, Y+5	; 0x05
    2060:	95 83       	std	Z+5, r25	; 0x05
    2062:	84 83       	std	Z+4, r24	; 0x04
    2064:	8c 81       	ldd	r24, Y+4	; 0x04
    2066:	9d 81       	ldd	r25, Y+5	; 0x05
    2068:	dc 01       	movw	r26, r24
    206a:	13 96       	adiw	r26, 0x03	; 3
    206c:	7c 93       	st	X, r23
    206e:	6e 93       	st	-X, r22
    2070:	12 97       	sbiw	r26, 0x02	; 2
    2072:	7d 83       	std	Y+5, r23	; 0x05
    2074:	6c 83       	std	Y+4, r22	; 0x04
    2076:	31 87       	std	Z+9, r19	; 0x09
    2078:	20 87       	std	Z+8, r18	; 0x08
    207a:	f9 01       	movw	r30, r18
    207c:	80 81       	ld	r24, Z
    207e:	8f 5f       	subi	r24, 0xFF	; 255
    2080:	80 83       	st	Z, r24
    2082:	df 91       	pop	r29
    2084:	cf 91       	pop	r28
    2086:	08 95       	ret

00002088 <vListInsert>:
    2088:	cf 93       	push	r28
    208a:	df 93       	push	r29
    208c:	eb 01       	movw	r28, r22
    208e:	48 81       	ld	r20, Y
    2090:	59 81       	ldd	r21, Y+1	; 0x01
    2092:	4f 3f       	cpi	r20, 0xFF	; 255
    2094:	2f ef       	ldi	r18, 0xFF	; 255
    2096:	52 07       	cpc	r21, r18
    2098:	21 f4       	brne	.+8      	; 0x20a2 <vListInsert+0x1a>
    209a:	fc 01       	movw	r30, r24
    209c:	a7 81       	ldd	r26, Z+7	; 0x07
    209e:	b0 85       	ldd	r27, Z+8	; 0x08
    20a0:	0d c0       	rjmp	.+26     	; 0x20bc <vListInsert+0x34>
    20a2:	dc 01       	movw	r26, r24
    20a4:	13 96       	adiw	r26, 0x03	; 3
    20a6:	01 c0       	rjmp	.+2      	; 0x20aa <vListInsert+0x22>
    20a8:	df 01       	movw	r26, r30
    20aa:	12 96       	adiw	r26, 0x02	; 2
    20ac:	ed 91       	ld	r30, X+
    20ae:	fc 91       	ld	r31, X
    20b0:	13 97       	sbiw	r26, 0x03	; 3
    20b2:	20 81       	ld	r18, Z
    20b4:	31 81       	ldd	r19, Z+1	; 0x01
    20b6:	42 17       	cp	r20, r18
    20b8:	53 07       	cpc	r21, r19
    20ba:	b0 f7       	brcc	.-20     	; 0x20a8 <vListInsert+0x20>
    20bc:	12 96       	adiw	r26, 0x02	; 2
    20be:	ed 91       	ld	r30, X+
    20c0:	fc 91       	ld	r31, X
    20c2:	13 97       	sbiw	r26, 0x03	; 3
    20c4:	fb 83       	std	Y+3, r31	; 0x03
    20c6:	ea 83       	std	Y+2, r30	; 0x02
    20c8:	d5 83       	std	Z+5, r29	; 0x05
    20ca:	c4 83       	std	Z+4, r28	; 0x04
    20cc:	bd 83       	std	Y+5, r27	; 0x05
    20ce:	ac 83       	std	Y+4, r26	; 0x04
    20d0:	13 96       	adiw	r26, 0x03	; 3
    20d2:	dc 93       	st	X, r29
    20d4:	ce 93       	st	-X, r28
    20d6:	12 97       	sbiw	r26, 0x02	; 2
    20d8:	99 87       	std	Y+9, r25	; 0x09
    20da:	88 87       	std	Y+8, r24	; 0x08
    20dc:	fc 01       	movw	r30, r24
    20de:	20 81       	ld	r18, Z
    20e0:	2f 5f       	subi	r18, 0xFF	; 255
    20e2:	20 83       	st	Z, r18
    20e4:	df 91       	pop	r29
    20e6:	cf 91       	pop	r28
    20e8:	08 95       	ret

000020ea <uxListRemove>:
    20ea:	cf 93       	push	r28
    20ec:	df 93       	push	r29
    20ee:	fc 01       	movw	r30, r24
    20f0:	a0 85       	ldd	r26, Z+8	; 0x08
    20f2:	b1 85       	ldd	r27, Z+9	; 0x09
    20f4:	c2 81       	ldd	r28, Z+2	; 0x02
    20f6:	d3 81       	ldd	r29, Z+3	; 0x03
    20f8:	84 81       	ldd	r24, Z+4	; 0x04
    20fa:	95 81       	ldd	r25, Z+5	; 0x05
    20fc:	9d 83       	std	Y+5, r25	; 0x05
    20fe:	8c 83       	std	Y+4, r24	; 0x04
    2100:	c4 81       	ldd	r28, Z+4	; 0x04
    2102:	d5 81       	ldd	r29, Z+5	; 0x05
    2104:	82 81       	ldd	r24, Z+2	; 0x02
    2106:	93 81       	ldd	r25, Z+3	; 0x03
    2108:	9b 83       	std	Y+3, r25	; 0x03
    210a:	8a 83       	std	Y+2, r24	; 0x02
    210c:	11 96       	adiw	r26, 0x01	; 1
    210e:	8d 91       	ld	r24, X+
    2110:	9c 91       	ld	r25, X
    2112:	12 97       	sbiw	r26, 0x02	; 2
    2114:	e8 17       	cp	r30, r24
    2116:	f9 07       	cpc	r31, r25
    2118:	31 f4       	brne	.+12     	; 0x2126 <uxListRemove+0x3c>
    211a:	84 81       	ldd	r24, Z+4	; 0x04
    211c:	95 81       	ldd	r25, Z+5	; 0x05
    211e:	12 96       	adiw	r26, 0x02	; 2
    2120:	9c 93       	st	X, r25
    2122:	8e 93       	st	-X, r24
    2124:	11 97       	sbiw	r26, 0x01	; 1
    2126:	11 86       	std	Z+9, r1	; 0x09
    2128:	10 86       	std	Z+8, r1	; 0x08
    212a:	8c 91       	ld	r24, X
    212c:	81 50       	subi	r24, 0x01	; 1
    212e:	8c 93       	st	X, r24
    2130:	8c 91       	ld	r24, X
    2132:	df 91       	pop	r29
    2134:	cf 91       	pop	r28
    2136:	08 95       	ret

00002138 <pxPortInitialiseStack>:
=======

	__builtin_avr_delay_cycles(__ticks_dc);
    1118:	2f e7       	ldi	r18, 0x7F	; 127
    111a:	8a e1       	ldi	r24, 0x1A	; 26
    111c:	96 e0       	ldi	r25, 0x06	; 6
    111e:	21 50       	subi	r18, 0x01	; 1
    1120:	80 40       	sbci	r24, 0x00	; 0
    1122:	90 40       	sbci	r25, 0x00	; 0
    1124:	e1 f7       	brne	.-8      	; 0x111e <vApplicationStackOverflowHook+0xa>
    1126:	00 c0       	rjmp	.+0      	; 0x1128 <vApplicationStackOverflowHook+0x14>
    1128:	00 00       	nop
	for(;;)
	{
		_delay_ms(2000);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
		PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED slow blink.
    112a:	1f 9a       	sbi	0x03, 7	; 3
    112c:	f5 cf       	rjmp	.-22     	; 0x1118 <vApplicationStackOverflowHook+0x4>

0000112e <vApplicationGetIdleTaskMemory>:
                                    configSTACK_DEPTH_TYPE *pulIdleTaskStackSize )
{
    static StaticTask_t xIdleTaskTCB;
    static StackType_t uxIdleTaskStack[ configMINIMAL_STACK_SIZE ];

    *ppxIdleTaskTCBBuffer = &xIdleTaskTCB;
    112e:	2a ef       	ldi	r18, 0xFA	; 250
    1130:	37 e0       	ldi	r19, 0x07	; 7
    1132:	fc 01       	movw	r30, r24
    1134:	31 83       	std	Z+1, r19	; 0x01
    1136:	20 83       	st	Z, r18
    *ppxIdleTaskStackBuffer = uxIdleTaskStack;
    1138:	85 ea       	ldi	r24, 0xA5	; 165
    113a:	97 e0       	ldi	r25, 0x07	; 7
    113c:	fb 01       	movw	r30, r22
    113e:	91 83       	std	Z+1, r25	; 0x01
    1140:	80 83       	st	Z, r24
    *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
    1142:	85 e5       	ldi	r24, 0x55	; 85
    1144:	90 e0       	ldi	r25, 0x00	; 0
    1146:	fa 01       	movw	r30, r20
    1148:	91 83       	std	Z+1, r25	; 0x01
    114a:	80 83       	st	Z, r24
    114c:	08 95       	ret

0000114e <vApplicationGetTimerTaskMemory>:
                                     configSTACK_DEPTH_TYPE *pulTimerTaskStackSize )
{
    static StaticTask_t xTimerTaskTCB;
    static StackType_t uxTimerTaskStack[ configTIMER_TASK_STACK_DEPTH ];

    *ppxTimerTaskTCBBuffer = &xTimerTaskTCB;
    114e:	2d e7       	ldi	r18, 0x7D	; 125
    1150:	37 e0       	ldi	r19, 0x07	; 7
    1152:	fc 01       	movw	r30, r24
    1154:	31 83       	std	Z+1, r19	; 0x01
    1156:	20 83       	st	Z, r18
    *ppxTimerTaskStackBuffer = uxTimerTaskStack;
    1158:	88 e2       	ldi	r24, 0x28	; 40
    115a:	97 e0       	ldi	r25, 0x07	; 7
    115c:	fb 01       	movw	r30, r22
    115e:	91 83       	std	Z+1, r25	; 0x01
    1160:	80 83       	st	Z, r24
    *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
    1162:	85 e5       	ldi	r24, 0x55	; 85
    1164:	90 e0       	ldi	r25, 0x00	; 0
    1166:	fa 01       	movw	r30, r20
    1168:	91 83       	std	Z+1, r25	; 0x01
    116a:	80 83       	st	Z, r24
    116c:	08 95       	ret

0000116e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    116e:	fc 01       	movw	r30, r24
    /* The list structure contains a list item which is used to mark the
    end of the list.  To initialise the list the list end is inserted
    as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );            /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1170:	03 96       	adiw	r24, 0x03	; 3
    1172:	92 83       	std	Z+2, r25	; 0x02
    1174:	81 83       	std	Z+1, r24	; 0x01

    /* The list end value is the highest possible value in the list to
    ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
    1176:	2f ef       	ldi	r18, 0xFF	; 255
    1178:	3f ef       	ldi	r19, 0xFF	; 255
    117a:	34 83       	std	Z+4, r19	; 0x04
    117c:	23 83       	std	Z+3, r18	; 0x03

    /* The list end next and previous pointers point to itself so we know
    when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );    /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    117e:	96 83       	std	Z+6, r25	; 0x06
    1180:	85 83       	std	Z+5, r24	; 0x05
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1182:	90 87       	std	Z+8, r25	; 0x08
    1184:	87 83       	std	Z+7, r24	; 0x07

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    1186:	10 82       	st	Z, r1
    1188:	08 95       	ret

0000118a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
    118a:	fc 01       	movw	r30, r24
    118c:	11 86       	std	Z+9, r1	; 0x09
    118e:	10 86       	std	Z+8, r1	; 0x08
    1190:	08 95       	ret

00001192 <vListInsertEnd>:
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    1192:	cf 93       	push	r28
    1194:	df 93       	push	r29
    1196:	9c 01       	movw	r18, r24
    1198:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
    119a:	dc 01       	movw	r26, r24
    119c:	11 96       	adiw	r26, 0x01	; 1
    119e:	cd 91       	ld	r28, X+
    11a0:	dc 91       	ld	r29, X
    11a2:	12 97       	sbiw	r26, 0x02	; 2
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
    makes the new list item the last item to be removed by a call to
    listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
    11a4:	d3 83       	std	Z+3, r29	; 0x03
    11a6:	c2 83       	std	Z+2, r28	; 0x02
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    11a8:	8c 81       	ldd	r24, Y+4	; 0x04
    11aa:	9d 81       	ldd	r25, Y+5	; 0x05
    11ac:	95 83       	std	Z+5, r25	; 0x05
    11ae:	84 83       	std	Z+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
    11b0:	8c 81       	ldd	r24, Y+4	; 0x04
    11b2:	9d 81       	ldd	r25, Y+5	; 0x05
    11b4:	dc 01       	movw	r26, r24
    11b6:	13 96       	adiw	r26, 0x03	; 3
    11b8:	7c 93       	st	X, r23
    11ba:	6e 93       	st	-X, r22
    11bc:	12 97       	sbiw	r26, 0x02	; 2
    pxIndex->pxPrevious = pxNewListItem;
    11be:	7d 83       	std	Y+5, r23	; 0x05
    11c0:	6c 83       	std	Y+4, r22	; 0x04

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
    11c2:	31 87       	std	Z+9, r19	; 0x09
    11c4:	20 87       	std	Z+8, r18	; 0x08

    ( pxList->uxNumberOfItems )++;
    11c6:	f9 01       	movw	r30, r18
    11c8:	80 81       	ld	r24, Z
    11ca:	8f 5f       	subi	r24, 0xFF	; 255
    11cc:	80 83       	st	Z, r24
}
    11ce:	df 91       	pop	r29
    11d0:	cf 91       	pop	r28
    11d2:	08 95       	ret

000011d4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    11d4:	cf 93       	push	r28
    11d6:	df 93       	push	r29
    11d8:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    11da:	48 81       	ld	r20, Y
    11dc:	59 81       	ldd	r21, Y+1	; 0x01
    new list item should be placed after it.  This ensures that TCBs which are
    stored in ready lists (all of which have the same xItemValue value) get a
    share of the CPU.  However, if the xItemValue is the same as the back marker
    the iteration loop below will not end.  Therefore the value is checked
    first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
    11de:	4f 3f       	cpi	r20, 0xFF	; 255
    11e0:	2f ef       	ldi	r18, 0xFF	; 255
    11e2:	52 07       	cpc	r21, r18
    11e4:	21 f4       	brne	.+8      	; 0x11ee <vListInsert+0x1a>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
    11e6:	fc 01       	movw	r30, r24
    11e8:	a7 81       	ldd	r26, Z+7	; 0x07
    11ea:	b0 85       	ldd	r27, Z+8	; 0x08
    11ec:	0d c0       	rjmp	.+26     	; 0x1208 <vListInsert+0x34>
            4) Using a queue or semaphore before it has been initialised or
               before the scheduler has been started (are interrupts firing
               before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
    11ee:	dc 01       	movw	r26, r24
    11f0:	13 96       	adiw	r26, 0x03	; 3
    11f2:	01 c0       	rjmp	.+2      	; 0x11f6 <vListInsert+0x22>
    11f4:	df 01       	movw	r26, r30
    11f6:	12 96       	adiw	r26, 0x02	; 2
    11f8:	ed 91       	ld	r30, X+
    11fa:	fc 91       	ld	r31, X
    11fc:	13 97       	sbiw	r26, 0x03	; 3
    11fe:	20 81       	ld	r18, Z
    1200:	31 81       	ldd	r19, Z+1	; 0x01
    1202:	42 17       	cp	r20, r18
    1204:	53 07       	cpc	r21, r19
    1206:	b0 f7       	brcc	.-20     	; 0x11f4 <vListInsert+0x20>
            /* There is nothing to do here, just iterating to the wanted
            insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
    1208:	12 96       	adiw	r26, 0x02	; 2
    120a:	ed 91       	ld	r30, X+
    120c:	fc 91       	ld	r31, X
    120e:	13 97       	sbiw	r26, 0x03	; 3
    1210:	fb 83       	std	Y+3, r31	; 0x03
    1212:	ea 83       	std	Y+2, r30	; 0x02
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    1214:	d5 83       	std	Z+5, r29	; 0x05
    1216:	c4 83       	std	Z+4, r28	; 0x04
    pxNewListItem->pxPrevious = pxIterator;
    1218:	bd 83       	std	Y+5, r27	; 0x05
    121a:	ac 83       	std	Y+4, r26	; 0x04
    pxIterator->pxNext = pxNewListItem;
    121c:	13 96       	adiw	r26, 0x03	; 3
    121e:	dc 93       	st	X, r29
    1220:	ce 93       	st	-X, r28
    1222:	12 97       	sbiw	r26, 0x02	; 2

    /* Remember which list the item is in.  This allows fast removal of the
    item later. */
    pxNewListItem->pxContainer = pxList;
    1224:	99 87       	std	Y+9, r25	; 0x09
    1226:	88 87       	std	Y+8, r24	; 0x08

    ( pxList->uxNumberOfItems )++;
    1228:	fc 01       	movw	r30, r24
    122a:	20 81       	ld	r18, Z
    122c:	2f 5f       	subi	r18, 0xFF	; 255
    122e:	20 83       	st	Z, r18
}
    1230:	df 91       	pop	r29
    1232:	cf 91       	pop	r28
    1234:	08 95       	ret

00001236 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    1236:	cf 93       	push	r28
    1238:	df 93       	push	r29
    123a:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
    123c:	a0 85       	ldd	r26, Z+8	; 0x08
    123e:	b1 85       	ldd	r27, Z+9	; 0x09

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    1240:	c2 81       	ldd	r28, Z+2	; 0x02
    1242:	d3 81       	ldd	r29, Z+3	; 0x03
    1244:	84 81       	ldd	r24, Z+4	; 0x04
    1246:	95 81       	ldd	r25, Z+5	; 0x05
    1248:	9d 83       	std	Y+5, r25	; 0x05
    124a:	8c 83       	std	Y+4, r24	; 0x04
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    124c:	c4 81       	ldd	r28, Z+4	; 0x04
    124e:	d5 81       	ldd	r29, Z+5	; 0x05
    1250:	82 81       	ldd	r24, Z+2	; 0x02
    1252:	93 81       	ldd	r25, Z+3	; 0x03
    1254:	9b 83       	std	Y+3, r25	; 0x03
    1256:	8a 83       	std	Y+2, r24	; 0x02

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
    1258:	11 96       	adiw	r26, 0x01	; 1
    125a:	8d 91       	ld	r24, X+
    125c:	9c 91       	ld	r25, X
    125e:	12 97       	sbiw	r26, 0x02	; 2
    1260:	e8 17       	cp	r30, r24
    1262:	f9 07       	cpc	r31, r25
    1264:	31 f4       	brne	.+12     	; 0x1272 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
    1266:	84 81       	ldd	r24, Z+4	; 0x04
    1268:	95 81       	ldd	r25, Z+5	; 0x05
    126a:	12 96       	adiw	r26, 0x02	; 2
    126c:	9c 93       	st	X, r25
    126e:	8e 93       	st	-X, r24
    1270:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
    1272:	11 86       	std	Z+9, r1	; 0x09
    1274:	10 86       	std	Z+8, r1	; 0x08
    ( pxList->uxNumberOfItems )--;
    1276:	8c 91       	ld	r24, X
    1278:	81 50       	subi	r24, 0x01	; 1
    127a:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
    127c:	8c 91       	ld	r24, X
}
    127e:	df 91       	pop	r29
    1280:	cf 91       	pop	r28
    1282:	08 95       	ret

00001284 <pxPortInitialiseStack>:
>>>>>>> 131ed066d936db6cb82dc024f16de69a40fef126
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
<<<<<<< HEAD
    2138:	31 e1       	ldi	r19, 0x11	; 17
    213a:	fc 01       	movw	r30, r24
    213c:	30 83       	st	Z, r19
    213e:	31 97       	sbiw	r30, 0x01	; 1
    2140:	22 e2       	ldi	r18, 0x22	; 34
    2142:	20 83       	st	Z, r18
    2144:	31 97       	sbiw	r30, 0x01	; 1
    2146:	a3 e3       	ldi	r26, 0x33	; 51
    2148:	a0 83       	st	Z, r26
    214a:	31 97       	sbiw	r30, 0x01	; 1
    214c:	60 83       	st	Z, r22
    214e:	31 97       	sbiw	r30, 0x01	; 1
    2150:	70 83       	st	Z, r23
    2152:	31 97       	sbiw	r30, 0x01	; 1
    2154:	10 82       	st	Z, r1
    2156:	31 97       	sbiw	r30, 0x01	; 1
    2158:	10 82       	st	Z, r1
    215a:	31 97       	sbiw	r30, 0x01	; 1
    215c:	60 e8       	ldi	r22, 0x80	; 128
    215e:	60 83       	st	Z, r22
    2160:	31 97       	sbiw	r30, 0x01	; 1
    2162:	10 82       	st	Z, r1
    2164:	31 97       	sbiw	r30, 0x01	; 1
    2166:	10 82       	st	Z, r1
    2168:	31 97       	sbiw	r30, 0x01	; 1
    216a:	10 82       	st	Z, r1
    216c:	31 97       	sbiw	r30, 0x01	; 1
    216e:	62 e0       	ldi	r22, 0x02	; 2
    2170:	60 83       	st	Z, r22
    2172:	31 97       	sbiw	r30, 0x01	; 1
    2174:	63 e0       	ldi	r22, 0x03	; 3
    2176:	60 83       	st	Z, r22
    2178:	31 97       	sbiw	r30, 0x01	; 1
    217a:	64 e0       	ldi	r22, 0x04	; 4
    217c:	60 83       	st	Z, r22
    217e:	31 97       	sbiw	r30, 0x01	; 1
    2180:	65 e0       	ldi	r22, 0x05	; 5
    2182:	60 83       	st	Z, r22
    2184:	31 97       	sbiw	r30, 0x01	; 1
    2186:	66 e0       	ldi	r22, 0x06	; 6
    2188:	60 83       	st	Z, r22
    218a:	31 97       	sbiw	r30, 0x01	; 1
    218c:	67 e0       	ldi	r22, 0x07	; 7
    218e:	60 83       	st	Z, r22
    2190:	31 97       	sbiw	r30, 0x01	; 1
    2192:	68 e0       	ldi	r22, 0x08	; 8
    2194:	60 83       	st	Z, r22
    2196:	31 97       	sbiw	r30, 0x01	; 1
    2198:	69 e0       	ldi	r22, 0x09	; 9
    219a:	60 83       	st	Z, r22
    219c:	31 97       	sbiw	r30, 0x01	; 1
    219e:	60 e1       	ldi	r22, 0x10	; 16
    21a0:	60 83       	st	Z, r22
    21a2:	31 97       	sbiw	r30, 0x01	; 1
    21a4:	30 83       	st	Z, r19
    21a6:	31 97       	sbiw	r30, 0x01	; 1
    21a8:	32 e1       	ldi	r19, 0x12	; 18
    21aa:	30 83       	st	Z, r19
    21ac:	31 97       	sbiw	r30, 0x01	; 1
    21ae:	33 e1       	ldi	r19, 0x13	; 19
    21b0:	30 83       	st	Z, r19
    21b2:	31 97       	sbiw	r30, 0x01	; 1
    21b4:	34 e1       	ldi	r19, 0x14	; 20
    21b6:	30 83       	st	Z, r19
    21b8:	31 97       	sbiw	r30, 0x01	; 1
    21ba:	35 e1       	ldi	r19, 0x15	; 21
    21bc:	30 83       	st	Z, r19
    21be:	31 97       	sbiw	r30, 0x01	; 1
    21c0:	36 e1       	ldi	r19, 0x16	; 22
    21c2:	30 83       	st	Z, r19
    21c4:	31 97       	sbiw	r30, 0x01	; 1
    21c6:	37 e1       	ldi	r19, 0x17	; 23
    21c8:	30 83       	st	Z, r19
    21ca:	31 97       	sbiw	r30, 0x01	; 1
    21cc:	38 e1       	ldi	r19, 0x18	; 24
    21ce:	30 83       	st	Z, r19
    21d0:	31 97       	sbiw	r30, 0x01	; 1
    21d2:	39 e1       	ldi	r19, 0x19	; 25
    21d4:	30 83       	st	Z, r19
    21d6:	31 97       	sbiw	r30, 0x01	; 1
    21d8:	30 e2       	ldi	r19, 0x20	; 32
    21da:	30 83       	st	Z, r19
    21dc:	31 97       	sbiw	r30, 0x01	; 1
    21de:	31 e2       	ldi	r19, 0x21	; 33
    21e0:	30 83       	st	Z, r19
    21e2:	31 97       	sbiw	r30, 0x01	; 1
    21e4:	20 83       	st	Z, r18
    21e6:	31 97       	sbiw	r30, 0x01	; 1
    21e8:	23 e2       	ldi	r18, 0x23	; 35
    21ea:	20 83       	st	Z, r18
    21ec:	31 97       	sbiw	r30, 0x01	; 1
    21ee:	40 83       	st	Z, r20
    21f0:	31 97       	sbiw	r30, 0x01	; 1
    21f2:	50 83       	st	Z, r21
    21f4:	31 97       	sbiw	r30, 0x01	; 1
    21f6:	26 e2       	ldi	r18, 0x26	; 38
    21f8:	20 83       	st	Z, r18
    21fa:	31 97       	sbiw	r30, 0x01	; 1
    21fc:	27 e2       	ldi	r18, 0x27	; 39
    21fe:	20 83       	st	Z, r18
    2200:	31 97       	sbiw	r30, 0x01	; 1
    2202:	28 e2       	ldi	r18, 0x28	; 40
    2204:	20 83       	st	Z, r18
    2206:	31 97       	sbiw	r30, 0x01	; 1
    2208:	29 e2       	ldi	r18, 0x29	; 41
    220a:	20 83       	st	Z, r18
    220c:	31 97       	sbiw	r30, 0x01	; 1
    220e:	20 e3       	ldi	r18, 0x30	; 48
    2210:	20 83       	st	Z, r18
    2212:	31 97       	sbiw	r30, 0x01	; 1
    2214:	21 e3       	ldi	r18, 0x31	; 49
    2216:	20 83       	st	Z, r18
    2218:	89 97       	sbiw	r24, 0x29	; 41
    221a:	08 95       	ret

0000221c <xPortStartScheduler>:
    221c:	a8 95       	wdr
    221e:	90 ec       	ldi	r25, 0xC0	; 192
    2220:	88 e1       	ldi	r24, 0x18	; 24
    2222:	0f b6       	in	r0, 0x3f	; 63
    2224:	f8 94       	cli
    2226:	a8 95       	wdr
    2228:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
    222c:	0f be       	out	0x3f, r0	; 63
    222e:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
    2232:	a0 91 be 0a 	lds	r26, 0x0ABE	; 0x800abe <pxCurrentTCB>
    2236:	b0 91 bf 0a 	lds	r27, 0x0ABF	; 0x800abf <pxCurrentTCB+0x1>
    223a:	cd 91       	ld	r28, X+
    223c:	cd bf       	out	0x3d, r28	; 61
    223e:	dd 91       	ld	r29, X+
    2240:	de bf       	out	0x3e, r29	; 62
    2242:	ff 91       	pop	r31
    2244:	ef 91       	pop	r30
    2246:	df 91       	pop	r29
    2248:	cf 91       	pop	r28
    224a:	bf 91       	pop	r27
    224c:	af 91       	pop	r26
    224e:	9f 91       	pop	r25
    2250:	8f 91       	pop	r24
    2252:	7f 91       	pop	r23
    2254:	6f 91       	pop	r22
    2256:	5f 91       	pop	r21
    2258:	4f 91       	pop	r20
    225a:	3f 91       	pop	r19
    225c:	2f 91       	pop	r18
    225e:	1f 91       	pop	r17
    2260:	0f 91       	pop	r16
    2262:	ff 90       	pop	r15
    2264:	ef 90       	pop	r14
    2266:	df 90       	pop	r13
    2268:	cf 90       	pop	r12
    226a:	bf 90       	pop	r11
    226c:	af 90       	pop	r10
    226e:	9f 90       	pop	r9
    2270:	8f 90       	pop	r8
    2272:	7f 90       	pop	r7
    2274:	6f 90       	pop	r6
    2276:	5f 90       	pop	r5
    2278:	4f 90       	pop	r4
    227a:	3f 90       	pop	r3
    227c:	2f 90       	pop	r2
    227e:	1f 90       	pop	r1
    2280:	0f 90       	pop	r0
    2282:	0c be       	out	0x3c, r0	; 60
    2284:	0f 90       	pop	r0
    2286:	0b be       	out	0x3b, r0	; 59
    2288:	0f 90       	pop	r0
    228a:	0f be       	out	0x3f, r0	; 63
    228c:	0f 90       	pop	r0
    228e:	08 95       	ret
    2290:	81 e0       	ldi	r24, 0x01	; 1
    2292:	08 95       	ret

00002294 <vPortYield>:
    2294:	0f 92       	push	r0
    2296:	0f b6       	in	r0, 0x3f	; 63
    2298:	f8 94       	cli
    229a:	0f 92       	push	r0
    229c:	0b b6       	in	r0, 0x3b	; 59
    229e:	0f 92       	push	r0
    22a0:	0c b6       	in	r0, 0x3c	; 60
    22a2:	0f 92       	push	r0
    22a4:	1f 92       	push	r1
    22a6:	11 24       	eor	r1, r1
    22a8:	2f 92       	push	r2
    22aa:	3f 92       	push	r3
    22ac:	4f 92       	push	r4
    22ae:	5f 92       	push	r5
    22b0:	6f 92       	push	r6
    22b2:	7f 92       	push	r7
    22b4:	8f 92       	push	r8
    22b6:	9f 92       	push	r9
    22b8:	af 92       	push	r10
    22ba:	bf 92       	push	r11
    22bc:	cf 92       	push	r12
    22be:	df 92       	push	r13
    22c0:	ef 92       	push	r14
    22c2:	ff 92       	push	r15
    22c4:	0f 93       	push	r16
    22c6:	1f 93       	push	r17
    22c8:	2f 93       	push	r18
    22ca:	3f 93       	push	r19
    22cc:	4f 93       	push	r20
    22ce:	5f 93       	push	r21
    22d0:	6f 93       	push	r22
    22d2:	7f 93       	push	r23
    22d4:	8f 93       	push	r24
    22d6:	9f 93       	push	r25
    22d8:	af 93       	push	r26
    22da:	bf 93       	push	r27
    22dc:	cf 93       	push	r28
    22de:	df 93       	push	r29
    22e0:	ef 93       	push	r30
    22e2:	ff 93       	push	r31
    22e4:	a0 91 be 0a 	lds	r26, 0x0ABE	; 0x800abe <pxCurrentTCB>
    22e8:	b0 91 bf 0a 	lds	r27, 0x0ABF	; 0x800abf <pxCurrentTCB+0x1>
    22ec:	0d b6       	in	r0, 0x3d	; 61
    22ee:	0d 92       	st	X+, r0
    22f0:	0e b6       	in	r0, 0x3e	; 62
    22f2:	0d 92       	st	X+, r0
    22f4:	0e 94 13 1a 	call	0x3426	; 0x3426 <vTaskSwitchContext>
    22f8:	a0 91 be 0a 	lds	r26, 0x0ABE	; 0x800abe <pxCurrentTCB>
    22fc:	b0 91 bf 0a 	lds	r27, 0x0ABF	; 0x800abf <pxCurrentTCB+0x1>
    2300:	cd 91       	ld	r28, X+
    2302:	cd bf       	out	0x3d, r28	; 61
    2304:	dd 91       	ld	r29, X+
    2306:	de bf       	out	0x3e, r29	; 62
    2308:	ff 91       	pop	r31
    230a:	ef 91       	pop	r30
    230c:	df 91       	pop	r29
    230e:	cf 91       	pop	r28
    2310:	bf 91       	pop	r27
    2312:	af 91       	pop	r26
    2314:	9f 91       	pop	r25
    2316:	8f 91       	pop	r24
    2318:	7f 91       	pop	r23
    231a:	6f 91       	pop	r22
    231c:	5f 91       	pop	r21
    231e:	4f 91       	pop	r20
    2320:	3f 91       	pop	r19
    2322:	2f 91       	pop	r18
    2324:	1f 91       	pop	r17
    2326:	0f 91       	pop	r16
    2328:	ff 90       	pop	r15
    232a:	ef 90       	pop	r14
    232c:	df 90       	pop	r13
    232e:	cf 90       	pop	r12
    2330:	bf 90       	pop	r11
    2332:	af 90       	pop	r10
    2334:	9f 90       	pop	r9
    2336:	8f 90       	pop	r8
    2338:	7f 90       	pop	r7
    233a:	6f 90       	pop	r6
    233c:	5f 90       	pop	r5
    233e:	4f 90       	pop	r4
    2340:	3f 90       	pop	r3
    2342:	2f 90       	pop	r2
    2344:	1f 90       	pop	r1
    2346:	0f 90       	pop	r0
    2348:	0c be       	out	0x3c, r0	; 60
    234a:	0f 90       	pop	r0
    234c:	0b be       	out	0x3b, r0	; 59
    234e:	0f 90       	pop	r0
    2350:	0f be       	out	0x3f, r0	; 63
    2352:	0f 90       	pop	r0
    2354:	08 95       	ret

00002356 <vPortYieldFromTick>:
    2356:	0f 92       	push	r0
    2358:	0f b6       	in	r0, 0x3f	; 63
    235a:	f8 94       	cli
    235c:	0f 92       	push	r0
    235e:	0b b6       	in	r0, 0x3b	; 59
    2360:	0f 92       	push	r0
    2362:	0c b6       	in	r0, 0x3c	; 60
    2364:	0f 92       	push	r0
    2366:	1f 92       	push	r1
    2368:	11 24       	eor	r1, r1
    236a:	2f 92       	push	r2
    236c:	3f 92       	push	r3
    236e:	4f 92       	push	r4
    2370:	5f 92       	push	r5
    2372:	6f 92       	push	r6
    2374:	7f 92       	push	r7
    2376:	8f 92       	push	r8
    2378:	9f 92       	push	r9
    237a:	af 92       	push	r10
    237c:	bf 92       	push	r11
    237e:	cf 92       	push	r12
    2380:	df 92       	push	r13
    2382:	ef 92       	push	r14
    2384:	ff 92       	push	r15
    2386:	0f 93       	push	r16
    2388:	1f 93       	push	r17
    238a:	2f 93       	push	r18
    238c:	3f 93       	push	r19
    238e:	4f 93       	push	r20
    2390:	5f 93       	push	r21
    2392:	6f 93       	push	r22
    2394:	7f 93       	push	r23
    2396:	8f 93       	push	r24
    2398:	9f 93       	push	r25
    239a:	af 93       	push	r26
    239c:	bf 93       	push	r27
    239e:	cf 93       	push	r28
    23a0:	df 93       	push	r29
    23a2:	ef 93       	push	r30
    23a4:	ff 93       	push	r31
    23a6:	a0 91 be 0a 	lds	r26, 0x0ABE	; 0x800abe <pxCurrentTCB>
    23aa:	b0 91 bf 0a 	lds	r27, 0x0ABF	; 0x800abf <pxCurrentTCB+0x1>
    23ae:	0d b6       	in	r0, 0x3d	; 61
    23b0:	0d 92       	st	X+, r0
    23b2:	0e b6       	in	r0, 0x3e	; 62
    23b4:	0d 92       	st	X+, r0
    23b6:	13 be       	out	0x33, r1	; 51
    23b8:	ee d6       	rcall	.+3548   	; 0x3196 <xTaskIncrementTick>
    23ba:	81 11       	cpse	r24, r1
    23bc:	0e 94 13 1a 	call	0x3426	; 0x3426 <vTaskSwitchContext>
    23c0:	a0 91 be 0a 	lds	r26, 0x0ABE	; 0x800abe <pxCurrentTCB>
    23c4:	b0 91 bf 0a 	lds	r27, 0x0ABF	; 0x800abf <pxCurrentTCB+0x1>
    23c8:	cd 91       	ld	r28, X+
    23ca:	cd bf       	out	0x3d, r28	; 61
    23cc:	dd 91       	ld	r29, X+
    23ce:	de bf       	out	0x3e, r29	; 62
    23d0:	ff 91       	pop	r31
    23d2:	ef 91       	pop	r30
    23d4:	df 91       	pop	r29
    23d6:	cf 91       	pop	r28
    23d8:	bf 91       	pop	r27
    23da:	af 91       	pop	r26
    23dc:	9f 91       	pop	r25
    23de:	8f 91       	pop	r24
    23e0:	7f 91       	pop	r23
    23e2:	6f 91       	pop	r22
    23e4:	5f 91       	pop	r21
    23e6:	4f 91       	pop	r20
    23e8:	3f 91       	pop	r19
    23ea:	2f 91       	pop	r18
    23ec:	1f 91       	pop	r17
    23ee:	0f 91       	pop	r16
    23f0:	ff 90       	pop	r15
    23f2:	ef 90       	pop	r14
    23f4:	df 90       	pop	r13
    23f6:	cf 90       	pop	r12
    23f8:	bf 90       	pop	r11
    23fa:	af 90       	pop	r10
    23fc:	9f 90       	pop	r9
    23fe:	8f 90       	pop	r8
    2400:	7f 90       	pop	r7
    2402:	6f 90       	pop	r6
    2404:	5f 90       	pop	r5
    2406:	4f 90       	pop	r4
    2408:	3f 90       	pop	r3
    240a:	2f 90       	pop	r2
    240c:	1f 90       	pop	r1
    240e:	0f 90       	pop	r0
    2410:	0c be       	out	0x3c, r0	; 60
    2412:	0f 90       	pop	r0
    2414:	0b be       	out	0x3b, r0	; 59
    2416:	0f 90       	pop	r0
    2418:	0f be       	out	0x3f, r0	; 63
    241a:	0f 90       	pop	r0
    241c:	08 95       	ret

0000241e <__vector_12>:
    241e:	9b df       	rcall	.-202    	; 0x2356 <vPortYieldFromTick>
    2420:	18 95       	reti

00002422 <prvIsQueueEmpty>:
    2422:	0f b6       	in	r0, 0x3f	; 63
    2424:	f8 94       	cli
    2426:	0f 92       	push	r0
    2428:	fc 01       	movw	r30, r24
    242a:	92 8d       	ldd	r25, Z+26	; 0x1a
    242c:	0f 90       	pop	r0
    242e:	0f be       	out	0x3f, r0	; 63
    2430:	81 e0       	ldi	r24, 0x01	; 1
    2432:	91 11       	cpse	r25, r1
    2434:	80 e0       	ldi	r24, 0x00	; 0
    2436:	08 95       	ret

00002438 <prvCopyDataToQueue>:
    2438:	0f 93       	push	r16
    243a:	1f 93       	push	r17
    243c:	cf 93       	push	r28
    243e:	df 93       	push	r29
    2440:	ec 01       	movw	r28, r24
    2442:	04 2f       	mov	r16, r20
    2444:	1a 8d       	ldd	r17, Y+26	; 0x1a
    2446:	4c 8d       	ldd	r20, Y+28	; 0x1c
    2448:	41 11       	cpse	r20, r1
    244a:	0c c0       	rjmp	.+24     	; 0x2464 <prvCopyDataToQueue+0x2c>
    244c:	88 81       	ld	r24, Y
    244e:	99 81       	ldd	r25, Y+1	; 0x01
    2450:	89 2b       	or	r24, r25
    2452:	09 f0       	breq	.+2      	; 0x2456 <prvCopyDataToQueue+0x1e>
    2454:	42 c0       	rjmp	.+132    	; 0x24da <prvCopyDataToQueue+0xa2>
    2456:	8c 81       	ldd	r24, Y+4	; 0x04
    2458:	9d 81       	ldd	r25, Y+5	; 0x05
    245a:	0e 94 6c 1b 	call	0x36d8	; 0x36d8 <xTaskPriorityDisinherit>
    245e:	1d 82       	std	Y+5, r1	; 0x05
    2460:	1c 82       	std	Y+4, r1	; 0x04
    2462:	42 c0       	rjmp	.+132    	; 0x24e8 <prvCopyDataToQueue+0xb0>
    2464:	01 11       	cpse	r16, r1
    2466:	17 c0       	rjmp	.+46     	; 0x2496 <prvCopyDataToQueue+0x5e>
    2468:	50 e0       	ldi	r21, 0x00	; 0
    246a:	8a 81       	ldd	r24, Y+2	; 0x02
    246c:	9b 81       	ldd	r25, Y+3	; 0x03
    246e:	0e 94 ba 1f 	call	0x3f74	; 0x3f74 <memcpy>
    2472:	2c 8d       	ldd	r18, Y+28	; 0x1c
    2474:	8a 81       	ldd	r24, Y+2	; 0x02
    2476:	9b 81       	ldd	r25, Y+3	; 0x03
    2478:	82 0f       	add	r24, r18
    247a:	91 1d       	adc	r25, r1
    247c:	9b 83       	std	Y+3, r25	; 0x03
    247e:	8a 83       	std	Y+2, r24	; 0x02
    2480:	2c 81       	ldd	r18, Y+4	; 0x04
    2482:	3d 81       	ldd	r19, Y+5	; 0x05
    2484:	82 17       	cp	r24, r18
    2486:	93 07       	cpc	r25, r19
    2488:	50 f1       	brcs	.+84     	; 0x24de <prvCopyDataToQueue+0xa6>
    248a:	88 81       	ld	r24, Y
    248c:	99 81       	ldd	r25, Y+1	; 0x01
    248e:	9b 83       	std	Y+3, r25	; 0x03
    2490:	8a 83       	std	Y+2, r24	; 0x02
    2492:	80 e0       	ldi	r24, 0x00	; 0
    2494:	29 c0       	rjmp	.+82     	; 0x24e8 <prvCopyDataToQueue+0xb0>
    2496:	50 e0       	ldi	r21, 0x00	; 0
    2498:	8e 81       	ldd	r24, Y+6	; 0x06
    249a:	9f 81       	ldd	r25, Y+7	; 0x07
    249c:	0e 94 ba 1f 	call	0x3f74	; 0x3f74 <memcpy>
    24a0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    24a2:	90 e0       	ldi	r25, 0x00	; 0
    24a4:	91 95       	neg	r25
    24a6:	81 95       	neg	r24
    24a8:	91 09       	sbc	r25, r1
    24aa:	2e 81       	ldd	r18, Y+6	; 0x06
    24ac:	3f 81       	ldd	r19, Y+7	; 0x07
    24ae:	28 0f       	add	r18, r24
    24b0:	39 1f       	adc	r19, r25
    24b2:	3f 83       	std	Y+7, r19	; 0x07
    24b4:	2e 83       	std	Y+6, r18	; 0x06
    24b6:	48 81       	ld	r20, Y
    24b8:	59 81       	ldd	r21, Y+1	; 0x01
    24ba:	24 17       	cp	r18, r20
    24bc:	35 07       	cpc	r19, r21
    24be:	30 f4       	brcc	.+12     	; 0x24cc <prvCopyDataToQueue+0x94>
    24c0:	2c 81       	ldd	r18, Y+4	; 0x04
    24c2:	3d 81       	ldd	r19, Y+5	; 0x05
    24c4:	82 0f       	add	r24, r18
    24c6:	93 1f       	adc	r25, r19
    24c8:	9f 83       	std	Y+7, r25	; 0x07
    24ca:	8e 83       	std	Y+6, r24	; 0x06
    24cc:	02 30       	cpi	r16, 0x02	; 2
    24ce:	49 f4       	brne	.+18     	; 0x24e2 <prvCopyDataToQueue+0xaa>
    24d0:	11 23       	and	r17, r17
    24d2:	49 f0       	breq	.+18     	; 0x24e6 <prvCopyDataToQueue+0xae>
    24d4:	11 50       	subi	r17, 0x01	; 1
    24d6:	80 e0       	ldi	r24, 0x00	; 0
    24d8:	07 c0       	rjmp	.+14     	; 0x24e8 <prvCopyDataToQueue+0xb0>
    24da:	80 e0       	ldi	r24, 0x00	; 0
    24dc:	05 c0       	rjmp	.+10     	; 0x24e8 <prvCopyDataToQueue+0xb0>
    24de:	80 e0       	ldi	r24, 0x00	; 0
    24e0:	03 c0       	rjmp	.+6      	; 0x24e8 <prvCopyDataToQueue+0xb0>
    24e2:	80 e0       	ldi	r24, 0x00	; 0
    24e4:	01 c0       	rjmp	.+2      	; 0x24e8 <prvCopyDataToQueue+0xb0>
    24e6:	80 e0       	ldi	r24, 0x00	; 0
    24e8:	1f 5f       	subi	r17, 0xFF	; 255
    24ea:	1a 8f       	std	Y+26, r17	; 0x1a
    24ec:	df 91       	pop	r29
    24ee:	cf 91       	pop	r28
    24f0:	1f 91       	pop	r17
    24f2:	0f 91       	pop	r16
    24f4:	08 95       	ret

000024f6 <prvCopyDataFromQueue>:
    24f6:	fc 01       	movw	r30, r24
    24f8:	44 8d       	ldd	r20, Z+28	; 0x1c
    24fa:	44 23       	and	r20, r20
    24fc:	a9 f0       	breq	.+42     	; 0x2528 <prvCopyDataFromQueue+0x32>
    24fe:	50 e0       	ldi	r21, 0x00	; 0
    2500:	26 81       	ldd	r18, Z+6	; 0x06
    2502:	37 81       	ldd	r19, Z+7	; 0x07
    2504:	24 0f       	add	r18, r20
    2506:	35 1f       	adc	r19, r21
    2508:	37 83       	std	Z+7, r19	; 0x07
    250a:	26 83       	std	Z+6, r18	; 0x06
    250c:	84 81       	ldd	r24, Z+4	; 0x04
    250e:	95 81       	ldd	r25, Z+5	; 0x05
    2510:	28 17       	cp	r18, r24
    2512:	39 07       	cpc	r19, r25
    2514:	20 f0       	brcs	.+8      	; 0x251e <prvCopyDataFromQueue+0x28>
    2516:	80 81       	ld	r24, Z
    2518:	91 81       	ldd	r25, Z+1	; 0x01
    251a:	97 83       	std	Z+7, r25	; 0x07
    251c:	86 83       	std	Z+6, r24	; 0x06
    251e:	cb 01       	movw	r24, r22
    2520:	66 81       	ldd	r22, Z+6	; 0x06
    2522:	77 81       	ldd	r23, Z+7	; 0x07
    2524:	0c 94 ba 1f 	jmp	0x3f74	; 0x3f74 <memcpy>
    2528:	08 95       	ret

0000252a <prvUnlockQueue>:
    252a:	ef 92       	push	r14
    252c:	ff 92       	push	r15
    252e:	0f 93       	push	r16
    2530:	1f 93       	push	r17
    2532:	cf 93       	push	r28
    2534:	8c 01       	movw	r16, r24
    2536:	0f b6       	in	r0, 0x3f	; 63
    2538:	f8 94       	cli
    253a:	0f 92       	push	r0
    253c:	fc 01       	movw	r30, r24
    253e:	c6 8d       	ldd	r28, Z+30	; 0x1e
    2540:	1c 16       	cp	r1, r28
    2542:	ac f4       	brge	.+42     	; 0x256e <prvUnlockQueue+0x44>
    2544:	81 89       	ldd	r24, Z+17	; 0x11
    2546:	81 11       	cpse	r24, r1
    2548:	06 c0       	rjmp	.+12     	; 0x2556 <prvUnlockQueue+0x2c>
    254a:	11 c0       	rjmp	.+34     	; 0x256e <prvUnlockQueue+0x44>
    254c:	f8 01       	movw	r30, r16
    254e:	81 89       	ldd	r24, Z+17	; 0x11
    2550:	81 11       	cpse	r24, r1
    2552:	05 c0       	rjmp	.+10     	; 0x255e <prvUnlockQueue+0x34>
    2554:	0c c0       	rjmp	.+24     	; 0x256e <prvUnlockQueue+0x44>
    2556:	78 01       	movw	r14, r16
    2558:	f1 e1       	ldi	r31, 0x11	; 17
    255a:	ef 0e       	add	r14, r31
    255c:	f1 1c       	adc	r15, r1
    255e:	c7 01       	movw	r24, r14
    2560:	0e 94 bd 1a 	call	0x357a	; 0x357a <xTaskRemoveFromEventList>
    2564:	81 11       	cpse	r24, r1
    2566:	0e 94 55 1b 	call	0x36aa	; 0x36aa <vTaskMissedYield>
    256a:	c1 50       	subi	r28, 0x01	; 1
    256c:	79 f7       	brne	.-34     	; 0x254c <prvUnlockQueue+0x22>
    256e:	8f ef       	ldi	r24, 0xFF	; 255
    2570:	f8 01       	movw	r30, r16
    2572:	86 8f       	std	Z+30, r24	; 0x1e
    2574:	0f 90       	pop	r0
    2576:	0f be       	out	0x3f, r0	; 63
    2578:	0f b6       	in	r0, 0x3f	; 63
    257a:	f8 94       	cli
    257c:	0f 92       	push	r0
    257e:	c5 8d       	ldd	r28, Z+29	; 0x1d
    2580:	1c 16       	cp	r1, r28
    2582:	a4 f4       	brge	.+40     	; 0x25ac <prvUnlockQueue+0x82>
    2584:	80 85       	ldd	r24, Z+8	; 0x08
    2586:	81 11       	cpse	r24, r1
    2588:	06 c0       	rjmp	.+12     	; 0x2596 <prvUnlockQueue+0x6c>
    258a:	10 c0       	rjmp	.+32     	; 0x25ac <prvUnlockQueue+0x82>
    258c:	f8 01       	movw	r30, r16
    258e:	80 85       	ldd	r24, Z+8	; 0x08
    2590:	81 11       	cpse	r24, r1
    2592:	05 c0       	rjmp	.+10     	; 0x259e <prvUnlockQueue+0x74>
    2594:	0b c0       	rjmp	.+22     	; 0x25ac <prvUnlockQueue+0x82>
    2596:	78 01       	movw	r14, r16
    2598:	f8 e0       	ldi	r31, 0x08	; 8
    259a:	ef 0e       	add	r14, r31
    259c:	f1 1c       	adc	r15, r1
    259e:	c7 01       	movw	r24, r14
    25a0:	ec d7       	rcall	.+4056   	; 0x357a <xTaskRemoveFromEventList>
    25a2:	81 11       	cpse	r24, r1
    25a4:	0e 94 55 1b 	call	0x36aa	; 0x36aa <vTaskMissedYield>
    25a8:	c1 50       	subi	r28, 0x01	; 1
    25aa:	81 f7       	brne	.-32     	; 0x258c <prvUnlockQueue+0x62>
    25ac:	8f ef       	ldi	r24, 0xFF	; 255
    25ae:	f8 01       	movw	r30, r16
    25b0:	85 8f       	std	Z+29, r24	; 0x1d
    25b2:	0f 90       	pop	r0
    25b4:	0f be       	out	0x3f, r0	; 63
    25b6:	cf 91       	pop	r28
    25b8:	1f 91       	pop	r17
    25ba:	0f 91       	pop	r16
    25bc:	ff 90       	pop	r15
    25be:	ef 90       	pop	r14
    25c0:	08 95       	ret

000025c2 <xQueueGenericReset>:
    25c2:	cf 93       	push	r28
    25c4:	df 93       	push	r29
    25c6:	ec 01       	movw	r28, r24
    25c8:	0f b6       	in	r0, 0x3f	; 63
    25ca:	f8 94       	cli
    25cc:	0f 92       	push	r0
    25ce:	e8 81       	ld	r30, Y
    25d0:	f9 81       	ldd	r31, Y+1	; 0x01
    25d2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25d4:	2c 8d       	ldd	r18, Y+28	; 0x1c
    25d6:	90 e0       	ldi	r25, 0x00	; 0
    25d8:	30 e0       	ldi	r19, 0x00	; 0
    25da:	82 9f       	mul	r24, r18
    25dc:	a0 01       	movw	r20, r0
    25de:	83 9f       	mul	r24, r19
    25e0:	50 0d       	add	r21, r0
    25e2:	92 9f       	mul	r25, r18
    25e4:	50 0d       	add	r21, r0
    25e6:	11 24       	eor	r1, r1
    25e8:	4e 0f       	add	r20, r30
    25ea:	5f 1f       	adc	r21, r31
    25ec:	5d 83       	std	Y+5, r21	; 0x05
    25ee:	4c 83       	std	Y+4, r20	; 0x04
    25f0:	1a 8e       	std	Y+26, r1	; 0x1a
    25f2:	fb 83       	std	Y+3, r31	; 0x03
    25f4:	ea 83       	std	Y+2, r30	; 0x02
    25f6:	01 97       	sbiw	r24, 0x01	; 1
    25f8:	82 9f       	mul	r24, r18
    25fa:	a0 01       	movw	r20, r0
    25fc:	83 9f       	mul	r24, r19
    25fe:	50 0d       	add	r21, r0
    2600:	92 9f       	mul	r25, r18
    2602:	50 0d       	add	r21, r0
    2604:	11 24       	eor	r1, r1
    2606:	cf 01       	movw	r24, r30
    2608:	84 0f       	add	r24, r20
    260a:	95 1f       	adc	r25, r21
    260c:	9f 83       	std	Y+7, r25	; 0x07
    260e:	8e 83       	std	Y+6, r24	; 0x06
    2610:	8f ef       	ldi	r24, 0xFF	; 255
    2612:	8d 8f       	std	Y+29, r24	; 0x1d
    2614:	8e 8f       	std	Y+30, r24	; 0x1e
    2616:	61 11       	cpse	r22, r1
    2618:	0a c0       	rjmp	.+20     	; 0x262e <xQueueGenericReset+0x6c>
    261a:	88 85       	ldd	r24, Y+8	; 0x08
    261c:	88 23       	and	r24, r24
    261e:	69 f0       	breq	.+26     	; 0x263a <xQueueGenericReset+0x78>
    2620:	ce 01       	movw	r24, r28
    2622:	08 96       	adiw	r24, 0x08	; 8
    2624:	aa d7       	rcall	.+3924   	; 0x357a <xTaskRemoveFromEventList>
    2626:	88 23       	and	r24, r24
    2628:	41 f0       	breq	.+16     	; 0x263a <xQueueGenericReset+0x78>
    262a:	34 de       	rcall	.-920    	; 0x2294 <vPortYield>
    262c:	06 c0       	rjmp	.+12     	; 0x263a <xQueueGenericReset+0x78>
    262e:	ce 01       	movw	r24, r28
    2630:	08 96       	adiw	r24, 0x08	; 8
    2632:	f7 dc       	rcall	.-1554   	; 0x2022 <vListInitialise>
    2634:	ce 01       	movw	r24, r28
    2636:	41 96       	adiw	r24, 0x11	; 17
    2638:	f4 dc       	rcall	.-1560   	; 0x2022 <vListInitialise>
    263a:	0f 90       	pop	r0
    263c:	0f be       	out	0x3f, r0	; 63
    263e:	81 e0       	ldi	r24, 0x01	; 1
    2640:	df 91       	pop	r29
    2642:	cf 91       	pop	r28
    2644:	08 95       	ret

00002646 <xQueueGenericCreateStatic>:
    2646:	cf 93       	push	r28
    2648:	df 93       	push	r29
    264a:	e9 01       	movw	r28, r18
    264c:	20 97       	sbiw	r28, 0x00	; 0
    264e:	61 f0       	breq	.+24     	; 0x2668 <xQueueGenericCreateStatic+0x22>
    2650:	61 11       	cpse	r22, r1
    2652:	03 c0       	rjmp	.+6      	; 0x265a <xQueueGenericCreateStatic+0x14>
    2654:	39 83       	std	Y+1, r19	; 0x01
    2656:	28 83       	st	Y, r18
    2658:	02 c0       	rjmp	.+4      	; 0x265e <xQueueGenericCreateStatic+0x18>
    265a:	59 83       	std	Y+1, r21	; 0x01
    265c:	48 83       	st	Y, r20
    265e:	8b 8f       	std	Y+27, r24	; 0x1b
    2660:	6c 8f       	std	Y+28, r22	; 0x1c
    2662:	61 e0       	ldi	r22, 0x01	; 1
    2664:	ce 01       	movw	r24, r28
    2666:	ad df       	rcall	.-166    	; 0x25c2 <xQueueGenericReset>
    2668:	ce 01       	movw	r24, r28
    266a:	df 91       	pop	r29
    266c:	cf 91       	pop	r28
    266e:	08 95       	ret

00002670 <xQueueGenericSend>:
    2670:	9f 92       	push	r9
    2672:	af 92       	push	r10
    2674:	bf 92       	push	r11
    2676:	cf 92       	push	r12
    2678:	df 92       	push	r13
    267a:	ef 92       	push	r14
    267c:	ff 92       	push	r15
    267e:	0f 93       	push	r16
    2680:	1f 93       	push	r17
    2682:	cf 93       	push	r28
    2684:	df 93       	push	r29
    2686:	00 d0       	rcall	.+0      	; 0x2688 <xQueueGenericSend+0x18>
    2688:	1f 92       	push	r1
    268a:	1f 92       	push	r1
    268c:	cd b7       	in	r28, 0x3d	; 61
    268e:	de b7       	in	r29, 0x3e	; 62
    2690:	8c 01       	movw	r16, r24
    2692:	6b 01       	movw	r12, r22
    2694:	5d 83       	std	Y+5, r21	; 0x05
    2696:	4c 83       	std	Y+4, r20	; 0x04
    2698:	a2 2e       	mov	r10, r18
    269a:	b1 2c       	mov	r11, r1
    269c:	99 24       	eor	r9, r9
    269e:	93 94       	inc	r9
    26a0:	7c 01       	movw	r14, r24
    26a2:	88 e0       	ldi	r24, 0x08	; 8
    26a4:	e8 0e       	add	r14, r24
    26a6:	f1 1c       	adc	r15, r1
    26a8:	0f b6       	in	r0, 0x3f	; 63
    26aa:	f8 94       	cli
    26ac:	0f 92       	push	r0
    26ae:	f8 01       	movw	r30, r16
    26b0:	92 8d       	ldd	r25, Z+26	; 0x1a
    26b2:	83 8d       	ldd	r24, Z+27	; 0x1b
    26b4:	98 17       	cp	r25, r24
    26b6:	18 f0       	brcs	.+6      	; 0x26be <xQueueGenericSend+0x4e>
    26b8:	f2 e0       	ldi	r31, 0x02	; 2
    26ba:	af 12       	cpse	r10, r31
    26bc:	15 c0       	rjmp	.+42     	; 0x26e8 <xQueueGenericSend+0x78>
    26be:	4a 2d       	mov	r20, r10
    26c0:	b6 01       	movw	r22, r12
    26c2:	c8 01       	movw	r24, r16
    26c4:	b9 de       	rcall	.-654    	; 0x2438 <prvCopyDataToQueue>
    26c6:	f8 01       	movw	r30, r16
    26c8:	91 89       	ldd	r25, Z+17	; 0x11
    26ca:	99 23       	and	r25, r25
    26cc:	39 f0       	breq	.+14     	; 0x26dc <xQueueGenericSend+0x6c>
    26ce:	c8 01       	movw	r24, r16
    26d0:	41 96       	adiw	r24, 0x11	; 17
    26d2:	53 d7       	rcall	.+3750   	; 0x357a <xTaskRemoveFromEventList>
    26d4:	88 23       	and	r24, r24
    26d6:	21 f0       	breq	.+8      	; 0x26e0 <xQueueGenericSend+0x70>
    26d8:	dd dd       	rcall	.-1094   	; 0x2294 <vPortYield>
    26da:	02 c0       	rjmp	.+4      	; 0x26e0 <xQueueGenericSend+0x70>
    26dc:	81 11       	cpse	r24, r1
    26de:	da dd       	rcall	.-1100   	; 0x2294 <vPortYield>
    26e0:	0f 90       	pop	r0
    26e2:	0f be       	out	0x3f, r0	; 63
    26e4:	81 e0       	ldi	r24, 0x01	; 1
    26e6:	45 c0       	rjmp	.+138    	; 0x2772 <xQueueGenericSend+0x102>
    26e8:	8c 81       	ldd	r24, Y+4	; 0x04
    26ea:	9d 81       	ldd	r25, Y+5	; 0x05
    26ec:	89 2b       	or	r24, r25
    26ee:	21 f4       	brne	.+8      	; 0x26f8 <xQueueGenericSend+0x88>
    26f0:	0f 90       	pop	r0
    26f2:	0f be       	out	0x3f, r0	; 63
    26f4:	80 e0       	ldi	r24, 0x00	; 0
    26f6:	3d c0       	rjmp	.+122    	; 0x2772 <xQueueGenericSend+0x102>
    26f8:	b1 10       	cpse	r11, r1
    26fa:	04 c0       	rjmp	.+8      	; 0x2704 <xQueueGenericSend+0x94>
    26fc:	ce 01       	movw	r24, r28
    26fe:	01 96       	adiw	r24, 0x01	; 1
    2700:	94 d7       	rcall	.+3880   	; 0x362a <vTaskInternalSetTimeOutState>
    2702:	b9 2c       	mov	r11, r9
    2704:	0f 90       	pop	r0
    2706:	0f be       	out	0x3f, r0	; 63
    2708:	36 d5       	rcall	.+2668   	; 0x3176 <vTaskSuspendAll>
    270a:	0f b6       	in	r0, 0x3f	; 63
    270c:	f8 94       	cli
    270e:	0f 92       	push	r0
    2710:	f8 01       	movw	r30, r16
    2712:	85 8d       	ldd	r24, Z+29	; 0x1d
    2714:	8f 3f       	cpi	r24, 0xFF	; 255
    2716:	09 f4       	brne	.+2      	; 0x271a <xQueueGenericSend+0xaa>
    2718:	15 8e       	std	Z+29, r1	; 0x1d
    271a:	f8 01       	movw	r30, r16
    271c:	86 8d       	ldd	r24, Z+30	; 0x1e
    271e:	8f 3f       	cpi	r24, 0xFF	; 255
    2720:	09 f4       	brne	.+2      	; 0x2724 <xQueueGenericSend+0xb4>
    2722:	16 8e       	std	Z+30, r1	; 0x1e
    2724:	0f 90       	pop	r0
    2726:	0f be       	out	0x3f, r0	; 63
    2728:	be 01       	movw	r22, r28
    272a:	6c 5f       	subi	r22, 0xFC	; 252
    272c:	7f 4f       	sbci	r23, 0xFF	; 255
    272e:	ce 01       	movw	r24, r28
    2730:	01 96       	adiw	r24, 0x01	; 1
    2732:	86 d7       	rcall	.+3852   	; 0x3640 <xTaskCheckForTimeOut>
    2734:	81 11       	cpse	r24, r1
    2736:	19 c0       	rjmp	.+50     	; 0x276a <xQueueGenericSend+0xfa>
    2738:	0f b6       	in	r0, 0x3f	; 63
    273a:	f8 94       	cli
    273c:	0f 92       	push	r0
    273e:	f8 01       	movw	r30, r16
    2740:	92 8d       	ldd	r25, Z+26	; 0x1a
    2742:	83 8d       	ldd	r24, Z+27	; 0x1b
    2744:	0f 90       	pop	r0
    2746:	0f be       	out	0x3f, r0	; 63
    2748:	98 13       	cpse	r25, r24
    274a:	0b c0       	rjmp	.+22     	; 0x2762 <xQueueGenericSend+0xf2>
    274c:	6c 81       	ldd	r22, Y+4	; 0x04
    274e:	7d 81       	ldd	r23, Y+5	; 0x05
    2750:	c7 01       	movw	r24, r14
    2752:	ea d6       	rcall	.+3540   	; 0x3528 <vTaskPlaceOnEventList>
    2754:	c8 01       	movw	r24, r16
    2756:	e9 de       	rcall	.-558    	; 0x252a <prvUnlockQueue>
    2758:	d8 d5       	rcall	.+2992   	; 0x330a <xTaskResumeAll>
    275a:	81 11       	cpse	r24, r1
    275c:	a5 cf       	rjmp	.-182    	; 0x26a8 <xQueueGenericSend+0x38>
    275e:	9a dd       	rcall	.-1228   	; 0x2294 <vPortYield>
    2760:	a3 cf       	rjmp	.-186    	; 0x26a8 <xQueueGenericSend+0x38>
    2762:	c8 01       	movw	r24, r16
    2764:	e2 de       	rcall	.-572    	; 0x252a <prvUnlockQueue>
    2766:	d1 d5       	rcall	.+2978   	; 0x330a <xTaskResumeAll>
    2768:	9f cf       	rjmp	.-194    	; 0x26a8 <xQueueGenericSend+0x38>
    276a:	c8 01       	movw	r24, r16
    276c:	de de       	rcall	.-580    	; 0x252a <prvUnlockQueue>
    276e:	cd d5       	rcall	.+2970   	; 0x330a <xTaskResumeAll>
    2770:	80 e0       	ldi	r24, 0x00	; 0
    2772:	0f 90       	pop	r0
    2774:	0f 90       	pop	r0
    2776:	0f 90       	pop	r0
    2778:	0f 90       	pop	r0
    277a:	0f 90       	pop	r0
    277c:	df 91       	pop	r29
    277e:	cf 91       	pop	r28
    2780:	1f 91       	pop	r17
    2782:	0f 91       	pop	r16
    2784:	ff 90       	pop	r15
    2786:	ef 90       	pop	r14
    2788:	df 90       	pop	r13
    278a:	cf 90       	pop	r12
    278c:	bf 90       	pop	r11
    278e:	af 90       	pop	r10
    2790:	9f 90       	pop	r9
    2792:	08 95       	ret

00002794 <xQueueGenericSendFromISR>:
    2794:	ef 92       	push	r14
    2796:	ff 92       	push	r15
    2798:	0f 93       	push	r16
    279a:	1f 93       	push	r17
    279c:	cf 93       	push	r28
    279e:	df 93       	push	r29
    27a0:	8a 01       	movw	r16, r20
    27a2:	fc 01       	movw	r30, r24
    27a4:	52 8d       	ldd	r21, Z+26	; 0x1a
    27a6:	33 8d       	ldd	r19, Z+27	; 0x1b
    27a8:	53 17       	cp	r21, r19
    27aa:	10 f0       	brcs	.+4      	; 0x27b0 <xQueueGenericSendFromISR+0x1c>
    27ac:	22 30       	cpi	r18, 0x02	; 2
    27ae:	e1 f4       	brne	.+56     	; 0x27e8 <xQueueGenericSendFromISR+0x54>
    27b0:	42 2f       	mov	r20, r18
    27b2:	78 01       	movw	r14, r16
    27b4:	ec 01       	movw	r28, r24
    27b6:	1e 8d       	ldd	r17, Y+30	; 0x1e
    27b8:	3f de       	rcall	.-898    	; 0x2438 <prvCopyDataToQueue>
    27ba:	1f 3f       	cpi	r17, 0xFF	; 255
    27bc:	79 f4       	brne	.+30     	; 0x27dc <xQueueGenericSendFromISR+0x48>
    27be:	89 89       	ldd	r24, Y+17	; 0x11
    27c0:	88 23       	and	r24, r24
    27c2:	a1 f0       	breq	.+40     	; 0x27ec <xQueueGenericSendFromISR+0x58>
    27c4:	ce 01       	movw	r24, r28
    27c6:	41 96       	adiw	r24, 0x11	; 17
    27c8:	d8 d6       	rcall	.+3504   	; 0x357a <xTaskRemoveFromEventList>
    27ca:	88 23       	and	r24, r24
    27cc:	89 f0       	breq	.+34     	; 0x27f0 <xQueueGenericSendFromISR+0x5c>
    27ce:	e1 14       	cp	r14, r1
    27d0:	f1 04       	cpc	r15, r1
    27d2:	81 f0       	breq	.+32     	; 0x27f4 <xQueueGenericSendFromISR+0x60>
    27d4:	81 e0       	ldi	r24, 0x01	; 1
    27d6:	f7 01       	movw	r30, r14
    27d8:	80 83       	st	Z, r24
    27da:	0d c0       	rjmp	.+26     	; 0x27f6 <xQueueGenericSendFromISR+0x62>
    27dc:	ff 24       	eor	r15, r15
    27de:	f3 94       	inc	r15
    27e0:	f1 0e       	add	r15, r17
    27e2:	fe 8e       	std	Y+30, r15	; 0x1e
    27e4:	81 e0       	ldi	r24, 0x01	; 1
    27e6:	07 c0       	rjmp	.+14     	; 0x27f6 <xQueueGenericSendFromISR+0x62>
    27e8:	80 e0       	ldi	r24, 0x00	; 0
    27ea:	05 c0       	rjmp	.+10     	; 0x27f6 <xQueueGenericSendFromISR+0x62>
    27ec:	81 e0       	ldi	r24, 0x01	; 1
    27ee:	03 c0       	rjmp	.+6      	; 0x27f6 <xQueueGenericSendFromISR+0x62>
    27f0:	81 e0       	ldi	r24, 0x01	; 1
    27f2:	01 c0       	rjmp	.+2      	; 0x27f6 <xQueueGenericSendFromISR+0x62>
    27f4:	81 e0       	ldi	r24, 0x01	; 1
    27f6:	df 91       	pop	r29
    27f8:	cf 91       	pop	r28
    27fa:	1f 91       	pop	r17
    27fc:	0f 91       	pop	r16
    27fe:	ff 90       	pop	r15
    2800:	ef 90       	pop	r14
    2802:	08 95       	ret

00002804 <xQueueReceive>:
    2804:	9f 92       	push	r9
    2806:	af 92       	push	r10
    2808:	bf 92       	push	r11
    280a:	cf 92       	push	r12
    280c:	df 92       	push	r13
    280e:	ef 92       	push	r14
    2810:	ff 92       	push	r15
    2812:	0f 93       	push	r16
    2814:	1f 93       	push	r17
    2816:	cf 93       	push	r28
    2818:	df 93       	push	r29
    281a:	00 d0       	rcall	.+0      	; 0x281c <xQueueReceive+0x18>
    281c:	1f 92       	push	r1
    281e:	1f 92       	push	r1
    2820:	cd b7       	in	r28, 0x3d	; 61
    2822:	de b7       	in	r29, 0x3e	; 62
    2824:	8c 01       	movw	r16, r24
    2826:	5b 01       	movw	r10, r22
    2828:	5d 83       	std	Y+5, r21	; 0x05
    282a:	4c 83       	std	Y+4, r20	; 0x04
    282c:	e1 2c       	mov	r14, r1
    282e:	99 24       	eor	r9, r9
    2830:	93 94       	inc	r9
    2832:	6c 01       	movw	r12, r24
    2834:	81 e1       	ldi	r24, 0x11	; 17
    2836:	c8 0e       	add	r12, r24
    2838:	d1 1c       	adc	r13, r1
    283a:	0f b6       	in	r0, 0x3f	; 63
    283c:	f8 94       	cli
    283e:	0f 92       	push	r0
    2840:	f8 01       	movw	r30, r16
    2842:	f2 8c       	ldd	r15, Z+26	; 0x1a
    2844:	ff 20       	and	r15, r15
    2846:	91 f0       	breq	.+36     	; 0x286c <xQueueReceive+0x68>
    2848:	b5 01       	movw	r22, r10
    284a:	c8 01       	movw	r24, r16
    284c:	54 de       	rcall	.-856    	; 0x24f6 <prvCopyDataFromQueue>
    284e:	fa 94       	dec	r15
    2850:	f8 01       	movw	r30, r16
    2852:	f2 8e       	std	Z+26, r15	; 0x1a
    2854:	80 85       	ldd	r24, Z+8	; 0x08
    2856:	88 23       	and	r24, r24
    2858:	29 f0       	breq	.+10     	; 0x2864 <xQueueReceive+0x60>
    285a:	c8 01       	movw	r24, r16
    285c:	08 96       	adiw	r24, 0x08	; 8
    285e:	8d d6       	rcall	.+3354   	; 0x357a <xTaskRemoveFromEventList>
    2860:	81 11       	cpse	r24, r1
    2862:	18 dd       	rcall	.-1488   	; 0x2294 <vPortYield>
    2864:	0f 90       	pop	r0
    2866:	0f be       	out	0x3f, r0	; 63
    2868:	81 e0       	ldi	r24, 0x01	; 1
    286a:	44 c0       	rjmp	.+136    	; 0x28f4 <xQueueReceive+0xf0>
    286c:	8c 81       	ldd	r24, Y+4	; 0x04
    286e:	9d 81       	ldd	r25, Y+5	; 0x05
    2870:	89 2b       	or	r24, r25
    2872:	21 f4       	brne	.+8      	; 0x287c <xQueueReceive+0x78>
    2874:	0f 90       	pop	r0
    2876:	0f be       	out	0x3f, r0	; 63
    2878:	80 e0       	ldi	r24, 0x00	; 0
    287a:	3c c0       	rjmp	.+120    	; 0x28f4 <xQueueReceive+0xf0>
    287c:	e1 10       	cpse	r14, r1
    287e:	04 c0       	rjmp	.+8      	; 0x2888 <xQueueReceive+0x84>
    2880:	ce 01       	movw	r24, r28
    2882:	01 96       	adiw	r24, 0x01	; 1
    2884:	d2 d6       	rcall	.+3492   	; 0x362a <vTaskInternalSetTimeOutState>
    2886:	e9 2c       	mov	r14, r9
    2888:	0f 90       	pop	r0
    288a:	0f be       	out	0x3f, r0	; 63
    288c:	74 d4       	rcall	.+2280   	; 0x3176 <vTaskSuspendAll>
    288e:	0f b6       	in	r0, 0x3f	; 63
    2890:	f8 94       	cli
    2892:	0f 92       	push	r0
    2894:	f8 01       	movw	r30, r16
    2896:	85 8d       	ldd	r24, Z+29	; 0x1d
    2898:	8f 3f       	cpi	r24, 0xFF	; 255
    289a:	09 f4       	brne	.+2      	; 0x289e <xQueueReceive+0x9a>
    289c:	15 8e       	std	Z+29, r1	; 0x1d
    289e:	f8 01       	movw	r30, r16
    28a0:	86 8d       	ldd	r24, Z+30	; 0x1e
    28a2:	8f 3f       	cpi	r24, 0xFF	; 255
    28a4:	09 f4       	brne	.+2      	; 0x28a8 <xQueueReceive+0xa4>
    28a6:	16 8e       	std	Z+30, r1	; 0x1e
    28a8:	0f 90       	pop	r0
    28aa:	0f be       	out	0x3f, r0	; 63
    28ac:	be 01       	movw	r22, r28
    28ae:	6c 5f       	subi	r22, 0xFC	; 252
    28b0:	7f 4f       	sbci	r23, 0xFF	; 255
    28b2:	ce 01       	movw	r24, r28
    28b4:	01 96       	adiw	r24, 0x01	; 1
    28b6:	c4 d6       	rcall	.+3464   	; 0x3640 <xTaskCheckForTimeOut>
    28b8:	81 11       	cpse	r24, r1
    28ba:	13 c0       	rjmp	.+38     	; 0x28e2 <xQueueReceive+0xde>
    28bc:	c8 01       	movw	r24, r16
    28be:	b1 dd       	rcall	.-1182   	; 0x2422 <prvIsQueueEmpty>
    28c0:	88 23       	and	r24, r24
    28c2:	59 f0       	breq	.+22     	; 0x28da <xQueueReceive+0xd6>
    28c4:	6c 81       	ldd	r22, Y+4	; 0x04
    28c6:	7d 81       	ldd	r23, Y+5	; 0x05
    28c8:	c6 01       	movw	r24, r12
    28ca:	2e d6       	rcall	.+3164   	; 0x3528 <vTaskPlaceOnEventList>
    28cc:	c8 01       	movw	r24, r16
    28ce:	2d de       	rcall	.-934    	; 0x252a <prvUnlockQueue>
    28d0:	1c d5       	rcall	.+2616   	; 0x330a <xTaskResumeAll>
    28d2:	81 11       	cpse	r24, r1
    28d4:	b2 cf       	rjmp	.-156    	; 0x283a <xQueueReceive+0x36>
    28d6:	de dc       	rcall	.-1604   	; 0x2294 <vPortYield>
    28d8:	b0 cf       	rjmp	.-160    	; 0x283a <xQueueReceive+0x36>
    28da:	c8 01       	movw	r24, r16
    28dc:	26 de       	rcall	.-948    	; 0x252a <prvUnlockQueue>
    28de:	15 d5       	rcall	.+2602   	; 0x330a <xTaskResumeAll>
    28e0:	ac cf       	rjmp	.-168    	; 0x283a <xQueueReceive+0x36>
    28e2:	c8 01       	movw	r24, r16
    28e4:	22 de       	rcall	.-956    	; 0x252a <prvUnlockQueue>
    28e6:	11 d5       	rcall	.+2594   	; 0x330a <xTaskResumeAll>
    28e8:	c8 01       	movw	r24, r16
    28ea:	9b dd       	rcall	.-1226   	; 0x2422 <prvIsQueueEmpty>
    28ec:	88 23       	and	r24, r24
    28ee:	09 f4       	brne	.+2      	; 0x28f2 <xQueueReceive+0xee>
    28f0:	a4 cf       	rjmp	.-184    	; 0x283a <xQueueReceive+0x36>
    28f2:	80 e0       	ldi	r24, 0x00	; 0
    28f4:	0f 90       	pop	r0
    28f6:	0f 90       	pop	r0
    28f8:	0f 90       	pop	r0
    28fa:	0f 90       	pop	r0
    28fc:	0f 90       	pop	r0
    28fe:	df 91       	pop	r29
    2900:	cf 91       	pop	r28
    2902:	1f 91       	pop	r17
    2904:	0f 91       	pop	r16
    2906:	ff 90       	pop	r15
    2908:	ef 90       	pop	r14
    290a:	df 90       	pop	r13
    290c:	cf 90       	pop	r12
    290e:	bf 90       	pop	r11
    2910:	af 90       	pop	r10
    2912:	9f 90       	pop	r9
    2914:	08 95       	ret

00002916 <vQueueWaitForMessageRestricted>:
    2916:	cf 93       	push	r28
    2918:	df 93       	push	r29
    291a:	ec 01       	movw	r28, r24
    291c:	0f b6       	in	r0, 0x3f	; 63
    291e:	f8 94       	cli
    2920:	0f 92       	push	r0
    2922:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2924:	8f 3f       	cpi	r24, 0xFF	; 255
    2926:	09 f4       	brne	.+2      	; 0x292a <vQueueWaitForMessageRestricted+0x14>
    2928:	1d 8e       	std	Y+29, r1	; 0x1d
    292a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    292c:	8f 3f       	cpi	r24, 0xFF	; 255
    292e:	09 f4       	brne	.+2      	; 0x2932 <vQueueWaitForMessageRestricted+0x1c>
    2930:	1e 8e       	std	Y+30, r1	; 0x1e
    2932:	0f 90       	pop	r0
    2934:	0f be       	out	0x3f, r0	; 63
    2936:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2938:	81 11       	cpse	r24, r1
    293a:	03 c0       	rjmp	.+6      	; 0x2942 <vQueueWaitForMessageRestricted+0x2c>
    293c:	ce 01       	movw	r24, r28
    293e:	41 96       	adiw	r24, 0x11	; 17
    2940:	04 d6       	rcall	.+3080   	; 0x354a <vTaskPlaceOnEventListRestricted>
    2942:	ce 01       	movw	r24, r28
    2944:	f2 dd       	rcall	.-1052   	; 0x252a <prvUnlockQueue>
    2946:	df 91       	pop	r29
    2948:	cf 91       	pop	r28
    294a:	08 95       	ret

0000294c <prvBytesInBuffer>:
    294c:	fc 01       	movw	r30, r24
    294e:	44 81       	ldd	r20, Z+4	; 0x04
    2950:	55 81       	ldd	r21, Z+5	; 0x05
    2952:	22 81       	ldd	r18, Z+2	; 0x02
    2954:	33 81       	ldd	r19, Z+3	; 0x03
    2956:	24 0f       	add	r18, r20
    2958:	35 1f       	adc	r19, r21
    295a:	80 81       	ld	r24, Z
    295c:	91 81       	ldd	r25, Z+1	; 0x01
    295e:	b9 01       	movw	r22, r18
    2960:	68 1b       	sub	r22, r24
    2962:	79 0b       	sbc	r23, r25
    2964:	cb 01       	movw	r24, r22
    2966:	64 17       	cp	r22, r20
    2968:	75 07       	cpc	r23, r21
    296a:	10 f0       	brcs	.+4      	; 0x2970 <prvBytesInBuffer+0x24>
    296c:	84 1b       	sub	r24, r20
    296e:	95 0b       	sbc	r25, r21
    2970:	08 95       	ret

00002972 <prvWriteBytesToBuffer>:
    2972:	af 92       	push	r10
    2974:	bf 92       	push	r11
    2976:	cf 92       	push	r12
    2978:	df 92       	push	r13
    297a:	ef 92       	push	r14
    297c:	ff 92       	push	r15
    297e:	0f 93       	push	r16
    2980:	1f 93       	push	r17
    2982:	cf 93       	push	r28
    2984:	df 93       	push	r29
    2986:	6c 01       	movw	r12, r24
    2988:	5b 01       	movw	r10, r22
    298a:	7a 01       	movw	r14, r20
    298c:	fc 01       	movw	r30, r24
    298e:	c2 81       	ldd	r28, Z+2	; 0x02
    2990:	d3 81       	ldd	r29, Z+3	; 0x03
    2992:	04 81       	ldd	r16, Z+4	; 0x04
    2994:	15 81       	ldd	r17, Z+5	; 0x05
    2996:	0c 1b       	sub	r16, r28
    2998:	1d 0b       	sbc	r17, r29
    299a:	40 17       	cp	r20, r16
    299c:	51 07       	cpc	r21, r17
    299e:	08 f4       	brcc	.+2      	; 0x29a2 <prvWriteBytesToBuffer+0x30>
    29a0:	8a 01       	movw	r16, r20
    29a2:	f6 01       	movw	r30, r12
    29a4:	84 85       	ldd	r24, Z+12	; 0x0c
    29a6:	95 85       	ldd	r25, Z+13	; 0x0d
    29a8:	a8 01       	movw	r20, r16
    29aa:	b5 01       	movw	r22, r10
    29ac:	8c 0f       	add	r24, r28
    29ae:	9d 1f       	adc	r25, r29
    29b0:	0e 94 ba 1f 	call	0x3f74	; 0x3f74 <memcpy>
    29b4:	0e 15       	cp	r16, r14
    29b6:	1f 05       	cpc	r17, r15
    29b8:	58 f4       	brcc	.+22     	; 0x29d0 <prvWriteBytesToBuffer+0x5e>
    29ba:	a7 01       	movw	r20, r14
    29bc:	40 1b       	sub	r20, r16
    29be:	51 0b       	sbc	r21, r17
    29c0:	b5 01       	movw	r22, r10
    29c2:	60 0f       	add	r22, r16
    29c4:	71 1f       	adc	r23, r17
    29c6:	f6 01       	movw	r30, r12
    29c8:	84 85       	ldd	r24, Z+12	; 0x0c
    29ca:	95 85       	ldd	r25, Z+13	; 0x0d
    29cc:	0e 94 ba 1f 	call	0x3f74	; 0x3f74 <memcpy>
    29d0:	ce 01       	movw	r24, r28
    29d2:	8e 0d       	add	r24, r14
    29d4:	9f 1d       	adc	r25, r15
    29d6:	f6 01       	movw	r30, r12
    29d8:	24 81       	ldd	r18, Z+4	; 0x04
    29da:	35 81       	ldd	r19, Z+5	; 0x05
    29dc:	82 17       	cp	r24, r18
    29de:	93 07       	cpc	r25, r19
    29e0:	10 f0       	brcs	.+4      	; 0x29e6 <prvWriteBytesToBuffer+0x74>
    29e2:	82 1b       	sub	r24, r18
    29e4:	93 0b       	sbc	r25, r19
    29e6:	f6 01       	movw	r30, r12
    29e8:	93 83       	std	Z+3, r25	; 0x03
    29ea:	82 83       	std	Z+2, r24	; 0x02
    29ec:	c7 01       	movw	r24, r14
    29ee:	df 91       	pop	r29
    29f0:	cf 91       	pop	r28
    29f2:	1f 91       	pop	r17
    29f4:	0f 91       	pop	r16
    29f6:	ff 90       	pop	r15
    29f8:	ef 90       	pop	r14
    29fa:	df 90       	pop	r13
    29fc:	cf 90       	pop	r12
    29fe:	bf 90       	pop	r11
    2a00:	af 90       	pop	r10
    2a02:	08 95       	ret

00002a04 <prvWriteMessageToBuffer>:
    2a04:	cf 92       	push	r12
    2a06:	df 92       	push	r13
    2a08:	ef 92       	push	r14
    2a0a:	ff 92       	push	r15
    2a0c:	0f 93       	push	r16
    2a0e:	1f 93       	push	r17
    2a10:	cf 93       	push	r28
    2a12:	df 93       	push	r29
    2a14:	1f 92       	push	r1
    2a16:	1f 92       	push	r1
    2a18:	cd b7       	in	r28, 0x3d	; 61
    2a1a:	de b7       	in	r29, 0x3e	; 62
    2a1c:	5a 83       	std	Y+2, r21	; 0x02
    2a1e:	49 83       	std	Y+1, r20	; 0x01
    2a20:	21 15       	cp	r18, r1
    2a22:	31 05       	cpc	r19, r1
    2a24:	c9 f0       	breq	.+50     	; 0x2a58 <prvWriteMessageToBuffer+0x54>
    2a26:	6b 01       	movw	r12, r22
    2a28:	7c 01       	movw	r14, r24
    2a2a:	fc 01       	movw	r30, r24
    2a2c:	86 85       	ldd	r24, Z+14	; 0x0e
    2a2e:	80 fd       	sbrc	r24, 0
    2a30:	08 c0       	rjmp	.+16     	; 0x2a42 <prvWriteMessageToBuffer+0x3e>
    2a32:	ca 01       	movw	r24, r20
    2a34:	24 17       	cp	r18, r20
    2a36:	35 07       	cpc	r19, r21
    2a38:	08 f4       	brcc	.+2      	; 0x2a3c <prvWriteMessageToBuffer+0x38>
    2a3a:	c9 01       	movw	r24, r18
    2a3c:	9a 83       	std	Y+2, r25	; 0x02
    2a3e:	89 83       	std	Y+1, r24	; 0x01
    2a40:	11 c0       	rjmp	.+34     	; 0x2a64 <prvWriteMessageToBuffer+0x60>
    2a42:	20 17       	cp	r18, r16
    2a44:	31 07       	cpc	r19, r17
    2a46:	58 f0       	brcs	.+22     	; 0x2a5e <prvWriteMessageToBuffer+0x5a>
    2a48:	42 e0       	ldi	r20, 0x02	; 2
    2a4a:	50 e0       	ldi	r21, 0x00	; 0
    2a4c:	be 01       	movw	r22, r28
    2a4e:	6f 5f       	subi	r22, 0xFF	; 255
    2a50:	7f 4f       	sbci	r23, 0xFF	; 255
    2a52:	c7 01       	movw	r24, r14
    2a54:	8e df       	rcall	.-228    	; 0x2972 <prvWriteBytesToBuffer>
    2a56:	06 c0       	rjmp	.+12     	; 0x2a64 <prvWriteMessageToBuffer+0x60>
    2a58:	80 e0       	ldi	r24, 0x00	; 0
    2a5a:	90 e0       	ldi	r25, 0x00	; 0
    2a5c:	08 c0       	rjmp	.+16     	; 0x2a6e <prvWriteMessageToBuffer+0x6a>
    2a5e:	80 e0       	ldi	r24, 0x00	; 0
    2a60:	90 e0       	ldi	r25, 0x00	; 0
    2a62:	05 c0       	rjmp	.+10     	; 0x2a6e <prvWriteMessageToBuffer+0x6a>
    2a64:	49 81       	ldd	r20, Y+1	; 0x01
    2a66:	5a 81       	ldd	r21, Y+2	; 0x02
    2a68:	b6 01       	movw	r22, r12
    2a6a:	c7 01       	movw	r24, r14
    2a6c:	82 df       	rcall	.-252    	; 0x2972 <prvWriteBytesToBuffer>
    2a6e:	0f 90       	pop	r0
    2a70:	0f 90       	pop	r0
    2a72:	df 91       	pop	r29
    2a74:	cf 91       	pop	r28
    2a76:	1f 91       	pop	r17
    2a78:	0f 91       	pop	r16
    2a7a:	ff 90       	pop	r15
    2a7c:	ef 90       	pop	r14
    2a7e:	df 90       	pop	r13
    2a80:	cf 90       	pop	r12
    2a82:	08 95       	ret

00002a84 <prvReadBytesFromBuffer>:
    2a84:	af 92       	push	r10
    2a86:	bf 92       	push	r11
    2a88:	cf 92       	push	r12
    2a8a:	df 92       	push	r13
    2a8c:	ef 92       	push	r14
    2a8e:	ff 92       	push	r15
    2a90:	0f 93       	push	r16
    2a92:	1f 93       	push	r17
    2a94:	cf 93       	push	r28
    2a96:	df 93       	push	r29
    2a98:	7c 01       	movw	r14, r24
    2a9a:	5b 01       	movw	r10, r22
    2a9c:	e9 01       	movw	r28, r18
    2a9e:	42 17       	cp	r20, r18
    2aa0:	53 07       	cpc	r21, r19
    2aa2:	08 f4       	brcc	.+2      	; 0x2aa6 <prvReadBytesFromBuffer+0x22>
    2aa4:	ea 01       	movw	r28, r20
    2aa6:	20 97       	sbiw	r28, 0x00	; 0
    2aa8:	79 f1       	breq	.+94     	; 0x2b08 <prvReadBytesFromBuffer+0x84>
    2aaa:	f7 01       	movw	r30, r14
    2aac:	00 81       	ld	r16, Z
    2aae:	11 81       	ldd	r17, Z+1	; 0x01
    2ab0:	c4 80       	ldd	r12, Z+4	; 0x04
    2ab2:	d5 80       	ldd	r13, Z+5	; 0x05
    2ab4:	c0 1a       	sub	r12, r16
    2ab6:	d1 0a       	sbc	r13, r17
    2ab8:	cc 15       	cp	r28, r12
    2aba:	dd 05       	cpc	r29, r13
    2abc:	08 f4       	brcc	.+2      	; 0x2ac0 <prvReadBytesFromBuffer+0x3c>
    2abe:	6e 01       	movw	r12, r28
    2ac0:	f7 01       	movw	r30, r14
    2ac2:	64 85       	ldd	r22, Z+12	; 0x0c
    2ac4:	75 85       	ldd	r23, Z+13	; 0x0d
    2ac6:	60 0f       	add	r22, r16
    2ac8:	71 1f       	adc	r23, r17
    2aca:	a6 01       	movw	r20, r12
    2acc:	c5 01       	movw	r24, r10
    2ace:	0e 94 ba 1f 	call	0x3f74	; 0x3f74 <memcpy>
    2ad2:	cc 16       	cp	r12, r28
    2ad4:	dd 06       	cpc	r13, r29
    2ad6:	58 f4       	brcc	.+22     	; 0x2aee <prvReadBytesFromBuffer+0x6a>
    2ad8:	ae 01       	movw	r20, r28
    2ada:	4c 19       	sub	r20, r12
    2adc:	5d 09       	sbc	r21, r13
    2ade:	f7 01       	movw	r30, r14
    2ae0:	64 85       	ldd	r22, Z+12	; 0x0c
    2ae2:	75 85       	ldd	r23, Z+13	; 0x0d
    2ae4:	c5 01       	movw	r24, r10
    2ae6:	8c 0d       	add	r24, r12
    2ae8:	9d 1d       	adc	r25, r13
    2aea:	0e 94 ba 1f 	call	0x3f74	; 0x3f74 <memcpy>
    2aee:	0c 0f       	add	r16, r28
    2af0:	1d 1f       	adc	r17, r29
    2af2:	f7 01       	movw	r30, r14
    2af4:	84 81       	ldd	r24, Z+4	; 0x04
    2af6:	95 81       	ldd	r25, Z+5	; 0x05
    2af8:	08 17       	cp	r16, r24
    2afa:	19 07       	cpc	r17, r25
    2afc:	10 f0       	brcs	.+4      	; 0x2b02 <prvReadBytesFromBuffer+0x7e>
    2afe:	08 1b       	sub	r16, r24
    2b00:	19 0b       	sbc	r17, r25
    2b02:	f7 01       	movw	r30, r14
    2b04:	11 83       	std	Z+1, r17	; 0x01
    2b06:	00 83       	st	Z, r16
    2b08:	ce 01       	movw	r24, r28
    2b0a:	df 91       	pop	r29
    2b0c:	cf 91       	pop	r28
    2b0e:	1f 91       	pop	r17
    2b10:	0f 91       	pop	r16
    2b12:	ff 90       	pop	r15
    2b14:	ef 90       	pop	r14
    2b16:	df 90       	pop	r13
    2b18:	cf 90       	pop	r12
    2b1a:	bf 90       	pop	r11
    2b1c:	af 90       	pop	r10
    2b1e:	08 95       	ret

00002b20 <xStreamBufferGenericCreateStatic>:
    2b20:	0f 93       	push	r16
    2b22:	1f 93       	push	r17
    2b24:	cf 93       	push	r28
    2b26:	df 93       	push	r29
    2b28:	dc 01       	movw	r26, r24
    2b2a:	f8 01       	movw	r30, r16
    2b2c:	61 15       	cp	r22, r1
    2b2e:	71 05       	cpc	r23, r1
    2b30:	11 f4       	brne	.+4      	; 0x2b36 <xStreamBufferGenericCreateStatic+0x16>
    2b32:	61 e0       	ldi	r22, 0x01	; 1
    2b34:	70 e0       	ldi	r23, 0x00	; 0
    2b36:	41 11       	cpse	r20, r1
    2b38:	02 c0       	rjmp	.+4      	; 0x2b3e <xStreamBufferGenericCreateStatic+0x1e>
    2b3a:	92 e0       	ldi	r25, 0x02	; 2
    2b3c:	01 c0       	rjmp	.+2      	; 0x2b40 <xStreamBufferGenericCreateStatic+0x20>
    2b3e:	93 e0       	ldi	r25, 0x03	; 3
    2b40:	21 15       	cp	r18, r1
    2b42:	31 05       	cpc	r19, r1
    2b44:	91 f0       	breq	.+36     	; 0x2b6a <xStreamBufferGenericCreateStatic+0x4a>
    2b46:	30 97       	sbiw	r30, 0x00	; 0
    2b48:	99 f0       	breq	.+38     	; 0x2b70 <xStreamBufferGenericCreateStatic+0x50>
    2b4a:	8f e0       	ldi	r24, 0x0F	; 15
    2b4c:	ef 01       	movw	r28, r30
    2b4e:	19 92       	st	Y+, r1
    2b50:	8a 95       	dec	r24
    2b52:	e9 f7       	brne	.-6      	; 0x2b4e <xStreamBufferGenericCreateStatic+0x2e>
    2b54:	35 87       	std	Z+13, r19	; 0x0d
    2b56:	24 87       	std	Z+12, r18	; 0x0c
    2b58:	b5 83       	std	Z+5, r27	; 0x05
    2b5a:	a4 83       	std	Z+4, r26	; 0x04
    2b5c:	77 83       	std	Z+7, r23	; 0x07
    2b5e:	66 83       	std	Z+6, r22	; 0x06
    2b60:	92 60       	ori	r25, 0x02	; 2
    2b62:	96 87       	std	Z+14, r25	; 0x0e
    2b64:	8e 2f       	mov	r24, r30
    2b66:	9f 2f       	mov	r25, r31
    2b68:	05 c0       	rjmp	.+10     	; 0x2b74 <xStreamBufferGenericCreateStatic+0x54>
    2b6a:	80 e0       	ldi	r24, 0x00	; 0
    2b6c:	90 e0       	ldi	r25, 0x00	; 0
    2b6e:	02 c0       	rjmp	.+4      	; 0x2b74 <xStreamBufferGenericCreateStatic+0x54>
    2b70:	8e 2f       	mov	r24, r30
    2b72:	9f 2f       	mov	r25, r31
    2b74:	df 91       	pop	r29
    2b76:	cf 91       	pop	r28
    2b78:	1f 91       	pop	r17
    2b7a:	0f 91       	pop	r16
    2b7c:	08 95       	ret

00002b7e <xStreamBufferSpacesAvailable>:
    2b7e:	fc 01       	movw	r30, r24
    2b80:	24 81       	ldd	r18, Z+4	; 0x04
    2b82:	35 81       	ldd	r19, Z+5	; 0x05
    2b84:	80 81       	ld	r24, Z
    2b86:	91 81       	ldd	r25, Z+1	; 0x01
    2b88:	42 81       	ldd	r20, Z+2	; 0x02
    2b8a:	53 81       	ldd	r21, Z+3	; 0x03
    2b8c:	82 0f       	add	r24, r18
    2b8e:	93 1f       	adc	r25, r19
    2b90:	01 97       	sbiw	r24, 0x01	; 1
    2b92:	84 1b       	sub	r24, r20
    2b94:	95 0b       	sbc	r25, r21
    2b96:	82 17       	cp	r24, r18
    2b98:	93 07       	cpc	r25, r19
    2b9a:	10 f0       	brcs	.+4      	; 0x2ba0 <xStreamBufferSpacesAvailable+0x22>
    2b9c:	82 1b       	sub	r24, r18
    2b9e:	93 0b       	sbc	r25, r19
    2ba0:	08 95       	ret

00002ba2 <xStreamBufferSend>:
    2ba2:	4f 92       	push	r4
    2ba4:	5f 92       	push	r5
    2ba6:	6f 92       	push	r6
    2ba8:	7f 92       	push	r7
    2baa:	8f 92       	push	r8
    2bac:	9f 92       	push	r9
    2bae:	af 92       	push	r10
    2bb0:	bf 92       	push	r11
    2bb2:	cf 92       	push	r12
    2bb4:	df 92       	push	r13
    2bb6:	ef 92       	push	r14
    2bb8:	ff 92       	push	r15
    2bba:	0f 93       	push	r16
    2bbc:	1f 93       	push	r17
    2bbe:	cf 93       	push	r28
    2bc0:	df 93       	push	r29
    2bc2:	00 d0       	rcall	.+0      	; 0x2bc4 <xStreamBufferSend+0x22>
    2bc4:	1f 92       	push	r1
    2bc6:	1f 92       	push	r1
    2bc8:	cd b7       	in	r28, 0x3d	; 61
    2bca:	de b7       	in	r29, 0x3e	; 62
    2bcc:	6c 01       	movw	r12, r24
    2bce:	2b 01       	movw	r4, r22
    2bd0:	3a 01       	movw	r6, r20
    2bd2:	3d 83       	std	Y+5, r19	; 0x05
    2bd4:	2c 83       	std	Y+4, r18	; 0x04
    2bd6:	fc 01       	movw	r30, r24
    2bd8:	86 85       	ldd	r24, Z+14	; 0x0e
    2bda:	80 ff       	sbrs	r24, 0
    2bdc:	05 c0       	rjmp	.+10     	; 0x2be8 <xStreamBufferSend+0x46>
    2bde:	4a 01       	movw	r8, r20
    2be0:	f2 e0       	ldi	r31, 0x02	; 2
    2be2:	8f 0e       	add	r8, r31
    2be4:	91 1c       	adc	r9, r1
    2be6:	01 c0       	rjmp	.+2      	; 0x2bea <xStreamBufferSend+0x48>
    2be8:	4a 01       	movw	r8, r20
    2bea:	8c 81       	ldd	r24, Y+4	; 0x04
    2bec:	9d 81       	ldd	r25, Y+5	; 0x05
    2bee:	89 2b       	or	r24, r25
    2bf0:	09 f4       	brne	.+2      	; 0x2bf4 <xStreamBufferSend+0x52>
    2bf2:	31 c0       	rjmp	.+98     	; 0x2c56 <xStreamBufferSend+0xb4>
    2bf4:	ce 01       	movw	r24, r28
    2bf6:	01 96       	adiw	r24, 0x01	; 1
    2bf8:	08 d5       	rcall	.+2576   	; 0x360a <vTaskSetTimeOutState>
    2bfa:	0f b6       	in	r0, 0x3f	; 63
    2bfc:	f8 94       	cli
    2bfe:	0f 92       	push	r0
    2c00:	c6 01       	movw	r24, r12
    2c02:	bd df       	rcall	.-134    	; 0x2b7e <xStreamBufferSpacesAvailable>
    2c04:	5c 01       	movw	r10, r24
    2c06:	88 15       	cp	r24, r8
    2c08:	99 05       	cpc	r25, r9
    2c0a:	00 f5       	brcc	.+64     	; 0x2c4c <xStreamBufferSend+0xaa>
    2c0c:	80 e0       	ldi	r24, 0x00	; 0
    2c0e:	90 e0       	ldi	r25, 0x00	; 0
    2c10:	a4 d6       	rcall	.+3400   	; 0x395a <xTaskNotifyStateClear>
    2c12:	4f d5       	rcall	.+2718   	; 0x36b2 <xTaskGetCurrentTaskHandle>
    2c14:	f6 01       	movw	r30, r12
    2c16:	93 87       	std	Z+11, r25	; 0x0b
    2c18:	82 87       	std	Z+10, r24	; 0x0a
    2c1a:	0f 90       	pop	r0
    2c1c:	0f be       	out	0x3f, r0	; 63
    2c1e:	ec 80       	ldd	r14, Y+4	; 0x04
    2c20:	fd 80       	ldd	r15, Y+5	; 0x05
    2c22:	00 e0       	ldi	r16, 0x00	; 0
    2c24:	10 e0       	ldi	r17, 0x00	; 0
    2c26:	20 e0       	ldi	r18, 0x00	; 0
    2c28:	30 e0       	ldi	r19, 0x00	; 0
    2c2a:	a9 01       	movw	r20, r18
    2c2c:	60 e0       	ldi	r22, 0x00	; 0
    2c2e:	70 e0       	ldi	r23, 0x00	; 0
    2c30:	cb 01       	movw	r24, r22
    2c32:	92 d5       	rcall	.+2852   	; 0x3758 <xTaskNotifyWait>
    2c34:	f6 01       	movw	r30, r12
    2c36:	13 86       	std	Z+11, r1	; 0x0b
    2c38:	12 86       	std	Z+10, r1	; 0x0a
    2c3a:	be 01       	movw	r22, r28
    2c3c:	6c 5f       	subi	r22, 0xFC	; 252
    2c3e:	7f 4f       	sbci	r23, 0xFF	; 255
    2c40:	ce 01       	movw	r24, r28
    2c42:	01 96       	adiw	r24, 0x01	; 1
    2c44:	fd d4       	rcall	.+2554   	; 0x3640 <xTaskCheckForTimeOut>
    2c46:	88 23       	and	r24, r24
    2c48:	c1 f2       	breq	.-80     	; 0x2bfa <xStreamBufferSend+0x58>
    2c4a:	02 c0       	rjmp	.+4      	; 0x2c50 <xStreamBufferSend+0xae>
    2c4c:	0f 90       	pop	r0
    2c4e:	0f be       	out	0x3f, r0	; 63
    2c50:	a1 14       	cp	r10, r1
    2c52:	b1 04       	cpc	r11, r1
    2c54:	19 f4       	brne	.+6      	; 0x2c5c <xStreamBufferSend+0xba>
    2c56:	c6 01       	movw	r24, r12
    2c58:	92 df       	rcall	.-220    	; 0x2b7e <xStreamBufferSpacesAvailable>
    2c5a:	5c 01       	movw	r10, r24
    2c5c:	84 01       	movw	r16, r8
    2c5e:	95 01       	movw	r18, r10
    2c60:	a3 01       	movw	r20, r6
    2c62:	b2 01       	movw	r22, r4
    2c64:	c6 01       	movw	r24, r12
    2c66:	ce de       	rcall	.-612    	; 0x2a04 <prvWriteMessageToBuffer>
    2c68:	7c 01       	movw	r14, r24
    2c6a:	89 2b       	or	r24, r25
    2c6c:	d9 f0       	breq	.+54     	; 0x2ca4 <xStreamBufferSend+0x102>
    2c6e:	c6 01       	movw	r24, r12
    2c70:	6d de       	rcall	.-806    	; 0x294c <prvBytesInBuffer>
    2c72:	f6 01       	movw	r30, r12
    2c74:	26 81       	ldd	r18, Z+6	; 0x06
    2c76:	37 81       	ldd	r19, Z+7	; 0x07
    2c78:	82 17       	cp	r24, r18
    2c7a:	93 07       	cpc	r25, r19
    2c7c:	98 f0       	brcs	.+38     	; 0x2ca4 <xStreamBufferSend+0x102>
    2c7e:	7b d2       	rcall	.+1270   	; 0x3176 <vTaskSuspendAll>
    2c80:	f6 01       	movw	r30, r12
    2c82:	80 85       	ldd	r24, Z+8	; 0x08
    2c84:	91 85       	ldd	r25, Z+9	; 0x09
    2c86:	89 2b       	or	r24, r25
    2c88:	61 f0       	breq	.+24     	; 0x2ca2 <xStreamBufferSend+0x100>
    2c8a:	80 85       	ldd	r24, Z+8	; 0x08
    2c8c:	91 85       	ldd	r25, Z+9	; 0x09
    2c8e:	00 e0       	ldi	r16, 0x00	; 0
    2c90:	10 e0       	ldi	r17, 0x00	; 0
    2c92:	20 e0       	ldi	r18, 0x00	; 0
    2c94:	40 e0       	ldi	r20, 0x00	; 0
    2c96:	50 e0       	ldi	r21, 0x00	; 0
    2c98:	ba 01       	movw	r22, r20
    2c9a:	e1 d5       	rcall	.+3010   	; 0x385e <xTaskGenericNotify>
    2c9c:	f6 01       	movw	r30, r12
    2c9e:	11 86       	std	Z+9, r1	; 0x09
    2ca0:	10 86       	std	Z+8, r1	; 0x08
    2ca2:	33 d3       	rcall	.+1638   	; 0x330a <xTaskResumeAll>
    2ca4:	c7 01       	movw	r24, r14
    2ca6:	0f 90       	pop	r0
    2ca8:	0f 90       	pop	r0
    2caa:	0f 90       	pop	r0
    2cac:	0f 90       	pop	r0
    2cae:	0f 90       	pop	r0
    2cb0:	df 91       	pop	r29
    2cb2:	cf 91       	pop	r28
    2cb4:	1f 91       	pop	r17
    2cb6:	0f 91       	pop	r16
    2cb8:	ff 90       	pop	r15
    2cba:	ef 90       	pop	r14
    2cbc:	df 90       	pop	r13
    2cbe:	cf 90       	pop	r12
    2cc0:	bf 90       	pop	r11
    2cc2:	af 90       	pop	r10
    2cc4:	9f 90       	pop	r9
    2cc6:	8f 90       	pop	r8
    2cc8:	7f 90       	pop	r7
    2cca:	6f 90       	pop	r6
    2ccc:	5f 90       	pop	r5
    2cce:	4f 90       	pop	r4
    2cd0:	08 95       	ret

00002cd2 <xStreamBufferReceive>:
    2cd2:	6f 92       	push	r6
    2cd4:	7f 92       	push	r7
    2cd6:	8f 92       	push	r8
    2cd8:	9f 92       	push	r9
    2cda:	af 92       	push	r10
    2cdc:	bf 92       	push	r11
    2cde:	cf 92       	push	r12
    2ce0:	df 92       	push	r13
    2ce2:	ef 92       	push	r14
    2ce4:	ff 92       	push	r15
    2ce6:	0f 93       	push	r16
    2ce8:	1f 93       	push	r17
    2cea:	cf 93       	push	r28
    2cec:	df 93       	push	r29
    2cee:	1f 92       	push	r1
    2cf0:	1f 92       	push	r1
    2cf2:	cd b7       	in	r28, 0x3d	; 61
    2cf4:	de b7       	in	r29, 0x3e	; 62
    2cf6:	6c 01       	movw	r12, r24
    2cf8:	3b 01       	movw	r6, r22
    2cfa:	4a 01       	movw	r8, r20
    2cfc:	79 01       	movw	r14, r18
    2cfe:	fc 01       	movw	r30, r24
    2d00:	86 85       	ldd	r24, Z+14	; 0x0e
    2d02:	80 fd       	sbrc	r24, 0
    2d04:	03 c0       	rjmp	.+6      	; 0x2d0c <xStreamBufferReceive+0x3a>
    2d06:	a1 2c       	mov	r10, r1
    2d08:	b1 2c       	mov	r11, r1
    2d0a:	04 c0       	rjmp	.+8      	; 0x2d14 <xStreamBufferReceive+0x42>
    2d0c:	68 94       	set
    2d0e:	aa 24       	eor	r10, r10
    2d10:	a1 f8       	bld	r10, 1
    2d12:	b1 2c       	mov	r11, r1
    2d14:	e1 14       	cp	r14, r1
    2d16:	f1 04       	cpc	r15, r1
    2d18:	29 f1       	breq	.+74     	; 0x2d64 <xStreamBufferReceive+0x92>
    2d1a:	0f b6       	in	r0, 0x3f	; 63
    2d1c:	f8 94       	cli
    2d1e:	0f 92       	push	r0
    2d20:	c6 01       	movw	r24, r12
    2d22:	14 de       	rcall	.-984    	; 0x294c <prvBytesInBuffer>
    2d24:	8c 01       	movw	r16, r24
    2d26:	a8 16       	cp	r10, r24
    2d28:	b9 06       	cpc	r11, r25
    2d2a:	38 f0       	brcs	.+14     	; 0x2d3a <xStreamBufferReceive+0x68>
    2d2c:	80 e0       	ldi	r24, 0x00	; 0
    2d2e:	90 e0       	ldi	r25, 0x00	; 0
    2d30:	14 d6       	rcall	.+3112   	; 0x395a <xTaskNotifyStateClear>
    2d32:	bf d4       	rcall	.+2430   	; 0x36b2 <xTaskGetCurrentTaskHandle>
    2d34:	f6 01       	movw	r30, r12
    2d36:	91 87       	std	Z+9, r25	; 0x09
    2d38:	80 87       	std	Z+8, r24	; 0x08
    2d3a:	0f 90       	pop	r0
    2d3c:	0f be       	out	0x3f, r0	; 63
    2d3e:	a0 16       	cp	r10, r16
    2d40:	b1 06       	cpc	r11, r17
    2d42:	b0 f0       	brcs	.+44     	; 0x2d70 <xStreamBufferReceive+0x9e>
    2d44:	00 e0       	ldi	r16, 0x00	; 0
    2d46:	10 e0       	ldi	r17, 0x00	; 0
    2d48:	20 e0       	ldi	r18, 0x00	; 0
    2d4a:	30 e0       	ldi	r19, 0x00	; 0
    2d4c:	a9 01       	movw	r20, r18
    2d4e:	60 e0       	ldi	r22, 0x00	; 0
    2d50:	70 e0       	ldi	r23, 0x00	; 0
    2d52:	cb 01       	movw	r24, r22
    2d54:	01 d5       	rcall	.+2562   	; 0x3758 <xTaskNotifyWait>
    2d56:	f6 01       	movw	r30, r12
    2d58:	11 86       	std	Z+9, r1	; 0x09
    2d5a:	10 86       	std	Z+8, r1	; 0x08
    2d5c:	c6 01       	movw	r24, r12
    2d5e:	f6 dd       	rcall	.-1044   	; 0x294c <prvBytesInBuffer>
    2d60:	8c 01       	movw	r16, r24
    2d62:	03 c0       	rjmp	.+6      	; 0x2d6a <xStreamBufferReceive+0x98>
    2d64:	c6 01       	movw	r24, r12
    2d66:	f2 dd       	rcall	.-1052   	; 0x294c <prvBytesInBuffer>
    2d68:	8c 01       	movw	r16, r24
    2d6a:	a0 16       	cp	r10, r16
    2d6c:	b1 06       	cpc	r11, r17
    2d6e:	b8 f5       	brcc	.+110    	; 0x2dde <xStreamBufferReceive+0x10c>
    2d70:	a1 14       	cp	r10, r1
    2d72:	b1 04       	cpc	r11, r1
    2d74:	c1 f0       	breq	.+48     	; 0x2da6 <xStreamBufferReceive+0xd4>
    2d76:	f6 01       	movw	r30, r12
    2d78:	e0 80       	ld	r14, Z
    2d7a:	f1 80       	ldd	r15, Z+1	; 0x01
    2d7c:	98 01       	movw	r18, r16
    2d7e:	a5 01       	movw	r20, r10
    2d80:	be 01       	movw	r22, r28
    2d82:	6f 5f       	subi	r22, 0xFF	; 255
    2d84:	7f 4f       	sbci	r23, 0xFF	; 255
    2d86:	c6 01       	movw	r24, r12
    2d88:	7d de       	rcall	.-774    	; 0x2a84 <prvReadBytesFromBuffer>
    2d8a:	89 81       	ldd	r24, Y+1	; 0x01
    2d8c:	9a 81       	ldd	r25, Y+2	; 0x02
    2d8e:	0a 19       	sub	r16, r10
    2d90:	1b 09       	sbc	r17, r11
    2d92:	88 16       	cp	r8, r24
    2d94:	99 06       	cpc	r9, r25
    2d96:	30 f4       	brcc	.+12     	; 0x2da4 <xStreamBufferReceive+0xd2>
    2d98:	f6 01       	movw	r30, r12
    2d9a:	f1 82       	std	Z+1, r15	; 0x01
    2d9c:	e0 82       	st	Z, r14
    2d9e:	81 2c       	mov	r8, r1
    2da0:	91 2c       	mov	r9, r1
    2da2:	01 c0       	rjmp	.+2      	; 0x2da6 <xStreamBufferReceive+0xd4>
    2da4:	4c 01       	movw	r8, r24
    2da6:	98 01       	movw	r18, r16
    2da8:	a4 01       	movw	r20, r8
    2daa:	b3 01       	movw	r22, r6
    2dac:	c6 01       	movw	r24, r12
    2dae:	6a de       	rcall	.-812    	; 0x2a84 <prvReadBytesFromBuffer>
    2db0:	7c 01       	movw	r14, r24
    2db2:	89 2b       	or	r24, r25
    2db4:	b1 f0       	breq	.+44     	; 0x2de2 <xStreamBufferReceive+0x110>
    2db6:	df d1       	rcall	.+958    	; 0x3176 <vTaskSuspendAll>
    2db8:	f6 01       	movw	r30, r12
    2dba:	82 85       	ldd	r24, Z+10	; 0x0a
    2dbc:	93 85       	ldd	r25, Z+11	; 0x0b
    2dbe:	89 2b       	or	r24, r25
    2dc0:	61 f0       	breq	.+24     	; 0x2dda <xStreamBufferReceive+0x108>
    2dc2:	82 85       	ldd	r24, Z+10	; 0x0a
    2dc4:	93 85       	ldd	r25, Z+11	; 0x0b
    2dc6:	00 e0       	ldi	r16, 0x00	; 0
    2dc8:	10 e0       	ldi	r17, 0x00	; 0
    2dca:	20 e0       	ldi	r18, 0x00	; 0
    2dcc:	40 e0       	ldi	r20, 0x00	; 0
    2dce:	50 e0       	ldi	r21, 0x00	; 0
    2dd0:	ba 01       	movw	r22, r20
    2dd2:	45 d5       	rcall	.+2698   	; 0x385e <xTaskGenericNotify>
    2dd4:	f6 01       	movw	r30, r12
    2dd6:	13 86       	std	Z+11, r1	; 0x0b
    2dd8:	12 86       	std	Z+10, r1	; 0x0a
    2dda:	97 d2       	rcall	.+1326   	; 0x330a <xTaskResumeAll>
    2ddc:	02 c0       	rjmp	.+4      	; 0x2de2 <xStreamBufferReceive+0x110>
    2dde:	e1 2c       	mov	r14, r1
    2de0:	f1 2c       	mov	r15, r1
    2de2:	c7 01       	movw	r24, r14
    2de4:	0f 90       	pop	r0
    2de6:	0f 90       	pop	r0
    2de8:	df 91       	pop	r29
    2dea:	cf 91       	pop	r28
    2dec:	1f 91       	pop	r17
    2dee:	0f 91       	pop	r16
    2df0:	ff 90       	pop	r15
    2df2:	ef 90       	pop	r14
    2df4:	df 90       	pop	r13
    2df6:	cf 90       	pop	r12
    2df8:	bf 90       	pop	r11
    2dfa:	af 90       	pop	r10
    2dfc:	9f 90       	pop	r9
    2dfe:	8f 90       	pop	r8
    2e00:	7f 90       	pop	r7
    2e02:	6f 90       	pop	r6
    2e04:	08 95       	ret

00002e06 <prvResetNextTaskUnblockTime>:
    2e06:	e0 91 98 0a 	lds	r30, 0x0A98	; 0x800a98 <pxDelayedTaskList>
    2e0a:	f0 91 99 0a 	lds	r31, 0x0A99	; 0x800a99 <pxDelayedTaskList+0x1>
    2e0e:	80 81       	ld	r24, Z
    2e10:	81 11       	cpse	r24, r1
    2e12:	07 c0       	rjmp	.+14     	; 0x2e22 <prvResetNextTaskUnblockTime+0x1c>
    2e14:	8f ef       	ldi	r24, 0xFF	; 255
    2e16:	9f ef       	ldi	r25, 0xFF	; 255
    2e18:	90 93 70 0a 	sts	0x0A70, r25	; 0x800a70 <xNextTaskUnblockTime+0x1>
    2e1c:	80 93 6f 0a 	sts	0x0A6F, r24	; 0x800a6f <xNextTaskUnblockTime>
    2e20:	08 95       	ret
    2e22:	e0 91 98 0a 	lds	r30, 0x0A98	; 0x800a98 <pxDelayedTaskList>
    2e26:	f0 91 99 0a 	lds	r31, 0x0A99	; 0x800a99 <pxDelayedTaskList+0x1>
    2e2a:	05 80       	ldd	r0, Z+5	; 0x05
    2e2c:	f6 81       	ldd	r31, Z+6	; 0x06
    2e2e:	e0 2d       	mov	r30, r0
    2e30:	06 80       	ldd	r0, Z+6	; 0x06
    2e32:	f7 81       	ldd	r31, Z+7	; 0x07
    2e34:	e0 2d       	mov	r30, r0
    2e36:	82 81       	ldd	r24, Z+2	; 0x02
    2e38:	93 81       	ldd	r25, Z+3	; 0x03
    2e3a:	90 93 70 0a 	sts	0x0A70, r25	; 0x800a70 <xNextTaskUnblockTime+0x1>
    2e3e:	80 93 6f 0a 	sts	0x0A6F, r24	; 0x800a6f <xNextTaskUnblockTime>
    2e42:	08 95       	ret

00002e44 <prvAddCurrentTaskToDelayedList>:
    2e44:	ff 92       	push	r15
    2e46:	0f 93       	push	r16
    2e48:	1f 93       	push	r17
    2e4a:	cf 93       	push	r28
    2e4c:	df 93       	push	r29
    2e4e:	ec 01       	movw	r28, r24
    2e50:	f6 2e       	mov	r15, r22
    2e52:	00 91 77 0a 	lds	r16, 0x0A77	; 0x800a77 <xTickCount>
    2e56:	10 91 78 0a 	lds	r17, 0x0A78	; 0x800a78 <xTickCount+0x1>
    2e5a:	80 91 be 0a 	lds	r24, 0x0ABE	; 0x800abe <pxCurrentTCB>
    2e5e:	90 91 bf 0a 	lds	r25, 0x0ABF	; 0x800abf <pxCurrentTCB+0x1>
    2e62:	02 96       	adiw	r24, 0x02	; 2
    2e64:	42 d9       	rcall	.-3452   	; 0x20ea <uxListRemove>
    2e66:	cf 3f       	cpi	r28, 0xFF	; 255
    2e68:	8f ef       	ldi	r24, 0xFF	; 255
    2e6a:	d8 07       	cpc	r29, r24
    2e6c:	61 f4       	brne	.+24     	; 0x2e86 <prvAddCurrentTaskToDelayedList+0x42>
    2e6e:	ff 20       	and	r15, r15
    2e70:	51 f0       	breq	.+20     	; 0x2e86 <prvAddCurrentTaskToDelayedList+0x42>
    2e72:	60 91 be 0a 	lds	r22, 0x0ABE	; 0x800abe <pxCurrentTCB>
    2e76:	70 91 bf 0a 	lds	r23, 0x0ABF	; 0x800abf <pxCurrentTCB+0x1>
    2e7a:	6e 5f       	subi	r22, 0xFE	; 254
    2e7c:	7f 4f       	sbci	r23, 0xFF	; 255
    2e7e:	8a e7       	ldi	r24, 0x7A	; 122
    2e80:	9a e0       	ldi	r25, 0x0A	; 10
    2e82:	e1 d8       	rcall	.-3646   	; 0x2046 <vListInsertEnd>
    2e84:	2d c0       	rjmp	.+90     	; 0x2ee0 <prvAddCurrentTaskToDelayedList+0x9c>
    2e86:	c0 0f       	add	r28, r16
    2e88:	d1 1f       	adc	r29, r17
    2e8a:	e0 91 be 0a 	lds	r30, 0x0ABE	; 0x800abe <pxCurrentTCB>
    2e8e:	f0 91 bf 0a 	lds	r31, 0x0ABF	; 0x800abf <pxCurrentTCB+0x1>
    2e92:	d3 83       	std	Z+3, r29	; 0x03
    2e94:	c2 83       	std	Z+2, r28	; 0x02
    2e96:	c0 17       	cp	r28, r16
    2e98:	d1 07       	cpc	r29, r17
    2e9a:	60 f4       	brcc	.+24     	; 0x2eb4 <prvAddCurrentTaskToDelayedList+0x70>
    2e9c:	60 91 be 0a 	lds	r22, 0x0ABE	; 0x800abe <pxCurrentTCB>
    2ea0:	70 91 bf 0a 	lds	r23, 0x0ABF	; 0x800abf <pxCurrentTCB+0x1>
    2ea4:	80 91 96 0a 	lds	r24, 0x0A96	; 0x800a96 <pxOverflowDelayedTaskList>
    2ea8:	90 91 97 0a 	lds	r25, 0x0A97	; 0x800a97 <pxOverflowDelayedTaskList+0x1>
    2eac:	6e 5f       	subi	r22, 0xFE	; 254
    2eae:	7f 4f       	sbci	r23, 0xFF	; 255
    2eb0:	eb d8       	rcall	.-3626   	; 0x2088 <vListInsert>
    2eb2:	16 c0       	rjmp	.+44     	; 0x2ee0 <prvAddCurrentTaskToDelayedList+0x9c>
    2eb4:	60 91 be 0a 	lds	r22, 0x0ABE	; 0x800abe <pxCurrentTCB>
    2eb8:	70 91 bf 0a 	lds	r23, 0x0ABF	; 0x800abf <pxCurrentTCB+0x1>
    2ebc:	80 91 98 0a 	lds	r24, 0x0A98	; 0x800a98 <pxDelayedTaskList>
    2ec0:	90 91 99 0a 	lds	r25, 0x0A99	; 0x800a99 <pxDelayedTaskList+0x1>
    2ec4:	6e 5f       	subi	r22, 0xFE	; 254
    2ec6:	7f 4f       	sbci	r23, 0xFF	; 255
    2ec8:	df d8       	rcall	.-3650   	; 0x2088 <vListInsert>
    2eca:	80 91 6f 0a 	lds	r24, 0x0A6F	; 0x800a6f <xNextTaskUnblockTime>
    2ece:	90 91 70 0a 	lds	r25, 0x0A70	; 0x800a70 <xNextTaskUnblockTime+0x1>
    2ed2:	c8 17       	cp	r28, r24
    2ed4:	d9 07       	cpc	r29, r25
    2ed6:	20 f4       	brcc	.+8      	; 0x2ee0 <prvAddCurrentTaskToDelayedList+0x9c>
    2ed8:	d0 93 70 0a 	sts	0x0A70, r29	; 0x800a70 <xNextTaskUnblockTime+0x1>
    2edc:	c0 93 6f 0a 	sts	0x0A6F, r28	; 0x800a6f <xNextTaskUnblockTime>
    2ee0:	df 91       	pop	r29
    2ee2:	cf 91       	pop	r28
    2ee4:	1f 91       	pop	r17
    2ee6:	0f 91       	pop	r16
    2ee8:	ff 90       	pop	r15
    2eea:	08 95       	ret

00002eec <xTaskCreateStatic>:
    2eec:	6f 92       	push	r6
    2eee:	7f 92       	push	r7
    2ef0:	8f 92       	push	r8
    2ef2:	9f 92       	push	r9
    2ef4:	af 92       	push	r10
    2ef6:	bf 92       	push	r11
    2ef8:	cf 92       	push	r12
    2efa:	df 92       	push	r13
    2efc:	ef 92       	push	r14
    2efe:	ff 92       	push	r15
    2f00:	0f 93       	push	r16
    2f02:	cf 93       	push	r28
    2f04:	df 93       	push	r29
    2f06:	c1 14       	cp	r12, r1
    2f08:	d1 04       	cpc	r13, r1
    2f0a:	09 f4       	brne	.+2      	; 0x2f0e <xTaskCreateStatic+0x22>
    2f0c:	d2 c0       	rjmp	.+420    	; 0x30b2 <xTaskCreateStatic+0x1c6>
    2f0e:	e1 14       	cp	r14, r1
    2f10:	f1 04       	cpc	r15, r1
    2f12:	09 f4       	brne	.+2      	; 0x2f16 <xTaskCreateStatic+0x2a>
    2f14:	d1 c0       	rjmp	.+418    	; 0x30b8 <xTaskCreateStatic+0x1cc>
    2f16:	e6 01       	movw	r28, r12
    2f18:	59 01       	movw	r10, r18
    2f1a:	3a 01       	movw	r6, r20
    2f1c:	4b 01       	movw	r8, r22
    2f1e:	6c 01       	movw	r12, r24
    2f20:	f8 8e       	std	Y+24, r15	; 0x18
    2f22:	ef 8a       	std	Y+23, r14	; 0x17
    2f24:	65 ea       	ldi	r22, 0xA5	; 165
    2f26:	70 e0       	ldi	r23, 0x00	; 0
    2f28:	c7 01       	movw	r24, r14
    2f2a:	0e 94 c3 1f 	call	0x3f86	; 0x3f86 <memset>
    2f2e:	81 e0       	ldi	r24, 0x01	; 1
    2f30:	68 1a       	sub	r6, r24
    2f32:	71 08       	sbc	r7, r1
    2f34:	ef 88       	ldd	r14, Y+23	; 0x17
    2f36:	f8 8c       	ldd	r15, Y+24	; 0x18
    2f38:	e6 0c       	add	r14, r6
    2f3a:	f7 1c       	adc	r15, r7
    2f3c:	d4 01       	movw	r26, r8
    2f3e:	8c 91       	ld	r24, X
    2f40:	89 8f       	std	Y+25, r24	; 0x19
    2f42:	8c 91       	ld	r24, X
    2f44:	88 23       	and	r24, r24
    2f46:	a1 f0       	breq	.+40     	; 0x2f70 <xTaskCreateStatic+0x84>
    2f48:	ae 01       	movw	r20, r28
    2f4a:	46 5e       	subi	r20, 0xE6	; 230
    2f4c:	5f 4f       	sbci	r21, 0xFF	; 255
    2f4e:	f4 01       	movw	r30, r8
    2f50:	31 96       	adiw	r30, 0x01	; 1
    2f52:	b8 e0       	ldi	r27, 0x08	; 8
    2f54:	8b 0e       	add	r8, r27
    2f56:	91 1c       	adc	r9, r1
    2f58:	cf 01       	movw	r24, r30
    2f5a:	21 91       	ld	r18, Z+
    2f5c:	da 01       	movw	r26, r20
    2f5e:	2d 93       	st	X+, r18
    2f60:	ad 01       	movw	r20, r26
    2f62:	dc 01       	movw	r26, r24
    2f64:	8c 91       	ld	r24, X
    2f66:	88 23       	and	r24, r24
    2f68:	19 f0       	breq	.+6      	; 0x2f70 <xTaskCreateStatic+0x84>
    2f6a:	e8 15       	cp	r30, r8
    2f6c:	f9 05       	cpc	r31, r9
    2f6e:	a1 f7       	brne	.-24     	; 0x2f58 <xTaskCreateStatic+0x6c>
    2f70:	18 a2       	std	Y+32, r1	; 0x20
    2f72:	04 30       	cpi	r16, 0x04	; 4
    2f74:	08 f0       	brcs	.+2      	; 0x2f78 <xTaskCreateStatic+0x8c>
    2f76:	03 e0       	ldi	r16, 0x03	; 3
    2f78:	0e 8b       	std	Y+22, r16	; 0x16
    2f7a:	09 a3       	std	Y+33, r16	; 0x21
    2f7c:	1a a2       	std	Y+34, r1	; 0x22
    2f7e:	4e 01       	movw	r8, r28
    2f80:	b2 e0       	ldi	r27, 0x02	; 2
    2f82:	8b 0e       	add	r8, r27
    2f84:	91 1c       	adc	r9, r1
    2f86:	c4 01       	movw	r24, r8
    2f88:	5a d8       	rcall	.-3916   	; 0x203e <vListInitialiseItem>
    2f8a:	ce 01       	movw	r24, r28
    2f8c:	0c 96       	adiw	r24, 0x0c	; 12
    2f8e:	57 d8       	rcall	.-3922   	; 0x203e <vListInitialiseItem>
    2f90:	d9 87       	std	Y+9, r29	; 0x09
    2f92:	c8 87       	std	Y+8, r28	; 0x08
    2f94:	84 e0       	ldi	r24, 0x04	; 4
    2f96:	90 e0       	ldi	r25, 0x00	; 0
    2f98:	80 1b       	sub	r24, r16
    2f9a:	91 09       	sbc	r25, r1
    2f9c:	9d 87       	std	Y+13, r25	; 0x0d
    2f9e:	8c 87       	std	Y+12, r24	; 0x0c
    2fa0:	db 8b       	std	Y+19, r29	; 0x13
    2fa2:	ca 8b       	std	Y+18, r28	; 0x12
    2fa4:	1b a2       	std	Y+35, r1	; 0x23
    2fa6:	1c a2       	std	Y+36, r1	; 0x24
    2fa8:	1d a2       	std	Y+37, r1	; 0x25
    2faa:	1e a2       	std	Y+38, r1	; 0x26
    2fac:	1f a2       	std	Y+39, r1	; 0x27
    2fae:	a5 01       	movw	r20, r10
    2fb0:	b6 01       	movw	r22, r12
    2fb2:	c7 01       	movw	r24, r14
    2fb4:	c1 d8       	rcall	.-3710   	; 0x2138 <pxPortInitialiseStack>
    2fb6:	99 83       	std	Y+1, r25	; 0x01
    2fb8:	88 83       	st	Y, r24
    2fba:	0f b6       	in	r0, 0x3f	; 63
    2fbc:	f8 94       	cli
    2fbe:	0f 92       	push	r0
    2fc0:	80 91 79 0a 	lds	r24, 0x0A79	; 0x800a79 <uxCurrentNumberOfTasks>
    2fc4:	8f 5f       	subi	r24, 0xFF	; 255
    2fc6:	80 93 79 0a 	sts	0x0A79, r24	; 0x800a79 <uxCurrentNumberOfTasks>
    2fca:	80 91 be 0a 	lds	r24, 0x0ABE	; 0x800abe <pxCurrentTCB>
    2fce:	90 91 bf 0a 	lds	r25, 0x0ABF	; 0x800abf <pxCurrentTCB+0x1>
    2fd2:	89 2b       	or	r24, r25
    2fd4:	89 f5       	brne	.+98     	; 0x3038 <xTaskCreateStatic+0x14c>
    2fd6:	d0 93 bf 0a 	sts	0x0ABF, r29	; 0x800abf <pxCurrentTCB+0x1>
    2fda:	c0 93 be 0a 	sts	0x0ABE, r28	; 0x800abe <pxCurrentTCB>
    2fde:	80 91 79 0a 	lds	r24, 0x0A79	; 0x800a79 <uxCurrentNumberOfTasks>
    2fe2:	81 30       	cpi	r24, 0x01	; 1
    2fe4:	09 f0       	breq	.+2      	; 0x2fe8 <xTaskCreateStatic+0xfc>
    2fe6:	38 c0       	rjmp	.+112    	; 0x3058 <xTaskCreateStatic+0x16c>
    2fe8:	8a e9       	ldi	r24, 0x9A	; 154
    2fea:	9a e0       	ldi	r25, 0x0A	; 10
    2fec:	1a d8       	rcall	.-4044   	; 0x2022 <vListInitialise>
    2fee:	83 ea       	ldi	r24, 0xA3	; 163
    2ff0:	9a e0       	ldi	r25, 0x0A	; 10
    2ff2:	17 d8       	rcall	.-4050   	; 0x2022 <vListInitialise>
    2ff4:	8c ea       	ldi	r24, 0xAC	; 172
    2ff6:	9a e0       	ldi	r25, 0x0A	; 10
    2ff8:	14 d8       	rcall	.-4056   	; 0x2022 <vListInitialise>
    2ffa:	85 eb       	ldi	r24, 0xB5	; 181
    2ffc:	9a e0       	ldi	r25, 0x0A	; 10
    2ffe:	11 d8       	rcall	.-4062   	; 0x2022 <vListInitialise>
    3000:	85 e6       	ldi	r24, 0x65	; 101
    3002:	9a e0       	ldi	r25, 0x0A	; 10
    3004:	0e d8       	rcall	.-4068   	; 0x2022 <vListInitialise>
    3006:	8c e5       	ldi	r24, 0x5C	; 92
    3008:	9a e0       	ldi	r25, 0x0A	; 10
    300a:	0b d8       	rcall	.-4074   	; 0x2022 <vListInitialise>
    300c:	8d e8       	ldi	r24, 0x8D	; 141
    300e:	9a e0       	ldi	r25, 0x0A	; 10
    3010:	08 d8       	rcall	.-4080   	; 0x2022 <vListInitialise>
    3012:	84 e8       	ldi	r24, 0x84	; 132
    3014:	9a e0       	ldi	r25, 0x0A	; 10
    3016:	05 d8       	rcall	.-4086   	; 0x2022 <vListInitialise>
    3018:	8a e7       	ldi	r24, 0x7A	; 122
    301a:	9a e0       	ldi	r25, 0x0A	; 10
    301c:	02 d8       	rcall	.-4092   	; 0x2022 <vListInitialise>
    301e:	85 e6       	ldi	r24, 0x65	; 101
    3020:	9a e0       	ldi	r25, 0x0A	; 10
    3022:	90 93 99 0a 	sts	0x0A99, r25	; 0x800a99 <pxDelayedTaskList+0x1>
    3026:	80 93 98 0a 	sts	0x0A98, r24	; 0x800a98 <pxDelayedTaskList>
    302a:	8c e5       	ldi	r24, 0x5C	; 92
    302c:	9a e0       	ldi	r25, 0x0A	; 10
    302e:	90 93 97 0a 	sts	0x0A97, r25	; 0x800a97 <pxOverflowDelayedTaskList+0x1>
    3032:	80 93 96 0a 	sts	0x0A96, r24	; 0x800a96 <pxOverflowDelayedTaskList>
    3036:	10 c0       	rjmp	.+32     	; 0x3058 <xTaskCreateStatic+0x16c>
    3038:	80 91 75 0a 	lds	r24, 0x0A75	; 0x800a75 <xSchedulerRunning>
    303c:	81 11       	cpse	r24, r1
    303e:	0c c0       	rjmp	.+24     	; 0x3058 <xTaskCreateStatic+0x16c>
    3040:	e0 91 be 0a 	lds	r30, 0x0ABE	; 0x800abe <pxCurrentTCB>
    3044:	f0 91 bf 0a 	lds	r31, 0x0ABF	; 0x800abf <pxCurrentTCB+0x1>
    3048:	96 89       	ldd	r25, Z+22	; 0x16
    304a:	8e 89       	ldd	r24, Y+22	; 0x16
    304c:	89 17       	cp	r24, r25
    304e:	20 f0       	brcs	.+8      	; 0x3058 <xTaskCreateStatic+0x16c>
    3050:	d0 93 bf 0a 	sts	0x0ABF, r29	; 0x800abf <pxCurrentTCB+0x1>
    3054:	c0 93 be 0a 	sts	0x0ABE, r28	; 0x800abe <pxCurrentTCB>
    3058:	80 91 71 0a 	lds	r24, 0x0A71	; 0x800a71 <uxTaskNumber>
    305c:	8f 5f       	subi	r24, 0xFF	; 255
    305e:	80 93 71 0a 	sts	0x0A71, r24	; 0x800a71 <uxTaskNumber>
    3062:	8e 89       	ldd	r24, Y+22	; 0x16
    3064:	90 91 76 0a 	lds	r25, 0x0A76	; 0x800a76 <uxTopReadyPriority>
    3068:	98 17       	cp	r25, r24
    306a:	10 f4       	brcc	.+4      	; 0x3070 <xTaskCreateStatic+0x184>
    306c:	80 93 76 0a 	sts	0x0A76, r24	; 0x800a76 <uxTopReadyPriority>
    3070:	90 e0       	ldi	r25, 0x00	; 0
    3072:	9c 01       	movw	r18, r24
    3074:	22 0f       	add	r18, r18
    3076:	33 1f       	adc	r19, r19
    3078:	22 0f       	add	r18, r18
    307a:	33 1f       	adc	r19, r19
    307c:	22 0f       	add	r18, r18
    307e:	33 1f       	adc	r19, r19
    3080:	82 0f       	add	r24, r18
    3082:	93 1f       	adc	r25, r19
    3084:	b4 01       	movw	r22, r8
    3086:	86 56       	subi	r24, 0x66	; 102
    3088:	95 4f       	sbci	r25, 0xF5	; 245
    308a:	0e 94 23 10 	call	0x2046	; 0x2046 <vListInsertEnd>
    308e:	0f 90       	pop	r0
    3090:	0f be       	out	0x3f, r0	; 63
    3092:	80 91 75 0a 	lds	r24, 0x0A75	; 0x800a75 <xSchedulerRunning>
    3096:	88 23       	and	r24, r24
    3098:	91 f0       	breq	.+36     	; 0x30be <xTaskCreateStatic+0x1d2>
    309a:	e0 91 be 0a 	lds	r30, 0x0ABE	; 0x800abe <pxCurrentTCB>
    309e:	f0 91 bf 0a 	lds	r31, 0x0ABF	; 0x800abf <pxCurrentTCB+0x1>
    30a2:	96 89       	ldd	r25, Z+22	; 0x16
    30a4:	8e 89       	ldd	r24, Y+22	; 0x16
    30a6:	98 17       	cp	r25, r24
    30a8:	68 f4       	brcc	.+26     	; 0x30c4 <xTaskCreateStatic+0x1d8>
    30aa:	f4 d8       	rcall	.-3608   	; 0x2294 <vPortYield>
    30ac:	8c 2f       	mov	r24, r28
    30ae:	9d 2f       	mov	r25, r29
    30b0:	0b c0       	rjmp	.+22     	; 0x30c8 <xTaskCreateStatic+0x1dc>
    30b2:	80 e0       	ldi	r24, 0x00	; 0
    30b4:	90 e0       	ldi	r25, 0x00	; 0
    30b6:	08 c0       	rjmp	.+16     	; 0x30c8 <xTaskCreateStatic+0x1dc>
    30b8:	80 e0       	ldi	r24, 0x00	; 0
    30ba:	90 e0       	ldi	r25, 0x00	; 0
    30bc:	05 c0       	rjmp	.+10     	; 0x30c8 <xTaskCreateStatic+0x1dc>
    30be:	8c 2f       	mov	r24, r28
    30c0:	9d 2f       	mov	r25, r29
    30c2:	02 c0       	rjmp	.+4      	; 0x30c8 <xTaskCreateStatic+0x1dc>
    30c4:	8c 2f       	mov	r24, r28
    30c6:	9d 2f       	mov	r25, r29
    30c8:	df 91       	pop	r29
    30ca:	cf 91       	pop	r28
    30cc:	0f 91       	pop	r16
    30ce:	ff 90       	pop	r15
    30d0:	ef 90       	pop	r14
    30d2:	df 90       	pop	r13
    30d4:	cf 90       	pop	r12
    30d6:	bf 90       	pop	r11
    30d8:	af 90       	pop	r10
    30da:	9f 90       	pop	r9
    30dc:	8f 90       	pop	r8
    30de:	7f 90       	pop	r7
    30e0:	6f 90       	pop	r6
    30e2:	08 95       	ret

000030e4 <vTaskStartScheduler>:
    30e4:	cf 92       	push	r12
    30e6:	df 92       	push	r13
    30e8:	ef 92       	push	r14
    30ea:	ff 92       	push	r15
    30ec:	0f 93       	push	r16
    30ee:	cf 93       	push	r28
    30f0:	df 93       	push	r29
    30f2:	00 d0       	rcall	.+0      	; 0x30f4 <vTaskStartScheduler+0x10>
    30f4:	00 d0       	rcall	.+0      	; 0x30f6 <vTaskStartScheduler+0x12>
    30f6:	cd b7       	in	r28, 0x3d	; 61
    30f8:	de b7       	in	r29, 0x3e	; 62
    30fa:	1e 82       	std	Y+6, r1	; 0x06
    30fc:	1d 82       	std	Y+5, r1	; 0x05
    30fe:	1c 82       	std	Y+4, r1	; 0x04
    3100:	1b 82       	std	Y+3, r1	; 0x03
    3102:	ae 01       	movw	r20, r28
    3104:	4f 5f       	subi	r20, 0xFF	; 255
    3106:	5f 4f       	sbci	r21, 0xFF	; 255
    3108:	be 01       	movw	r22, r28
    310a:	6d 5f       	subi	r22, 0xFD	; 253
    310c:	7f 4f       	sbci	r23, 0xFF	; 255
    310e:	ce 01       	movw	r24, r28
    3110:	05 96       	adiw	r24, 0x05	; 5
    3112:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <vApplicationGetIdleTaskMemory>
    3116:	cd 80       	ldd	r12, Y+5	; 0x05
    3118:	de 80       	ldd	r13, Y+6	; 0x06
    311a:	eb 80       	ldd	r14, Y+3	; 0x03
    311c:	fc 80       	ldd	r15, Y+4	; 0x04
    311e:	49 81       	ldd	r20, Y+1	; 0x01
    3120:	5a 81       	ldd	r21, Y+2	; 0x02
    3122:	00 e0       	ldi	r16, 0x00	; 0
    3124:	20 e0       	ldi	r18, 0x00	; 0
    3126:	30 e0       	ldi	r19, 0x00	; 0
    3128:	6f e7       	ldi	r22, 0x7F	; 127
    312a:	72 e0       	ldi	r23, 0x02	; 2
    312c:	82 e7       	ldi	r24, 0x72	; 114
    312e:	90 e0       	ldi	r25, 0x00	; 0
    3130:	dd de       	rcall	.-582    	; 0x2eec <xTaskCreateStatic>
    3132:	89 2b       	or	r24, r25
    3134:	91 f0       	breq	.+36     	; 0x315a <vTaskStartScheduler+0x76>
    3136:	83 d4       	rcall	.+2310   	; 0x3a3e <xTimerCreateTimerTask>
    3138:	81 30       	cpi	r24, 0x01	; 1
    313a:	79 f4       	brne	.+30     	; 0x315a <vTaskStartScheduler+0x76>
    313c:	f8 94       	cli
    313e:	8f ef       	ldi	r24, 0xFF	; 255
    3140:	9f ef       	ldi	r25, 0xFF	; 255
    3142:	90 93 70 0a 	sts	0x0A70, r25	; 0x800a70 <xNextTaskUnblockTime+0x1>
    3146:	80 93 6f 0a 	sts	0x0A6F, r24	; 0x800a6f <xNextTaskUnblockTime>
    314a:	81 e0       	ldi	r24, 0x01	; 1
    314c:	80 93 75 0a 	sts	0x0A75, r24	; 0x800a75 <xSchedulerRunning>
    3150:	10 92 78 0a 	sts	0x0A78, r1	; 0x800a78 <xTickCount+0x1>
    3154:	10 92 77 0a 	sts	0x0A77, r1	; 0x800a77 <xTickCount>
    3158:	61 d8       	rcall	.-3902   	; 0x221c <xPortStartScheduler>
    315a:	26 96       	adiw	r28, 0x06	; 6
    315c:	0f b6       	in	r0, 0x3f	; 63
    315e:	f8 94       	cli
    3160:	de bf       	out	0x3e, r29	; 62
    3162:	0f be       	out	0x3f, r0	; 63
    3164:	cd bf       	out	0x3d, r28	; 61
    3166:	df 91       	pop	r29
    3168:	cf 91       	pop	r28
    316a:	0f 91       	pop	r16
    316c:	ff 90       	pop	r15
    316e:	ef 90       	pop	r14
    3170:	df 90       	pop	r13
    3172:	cf 90       	pop	r12
    3174:	08 95       	ret

00003176 <vTaskSuspendAll>:
    3176:	80 91 6e 0a 	lds	r24, 0x0A6E	; 0x800a6e <uxSchedulerSuspended>
    317a:	8f 5f       	subi	r24, 0xFF	; 255
    317c:	80 93 6e 0a 	sts	0x0A6E, r24	; 0x800a6e <uxSchedulerSuspended>
    3180:	08 95       	ret

00003182 <xTaskGetTickCount>:
    3182:	0f b6       	in	r0, 0x3f	; 63
    3184:	f8 94       	cli
    3186:	0f 92       	push	r0
    3188:	80 91 77 0a 	lds	r24, 0x0A77	; 0x800a77 <xTickCount>
    318c:	90 91 78 0a 	lds	r25, 0x0A78	; 0x800a78 <xTickCount+0x1>
    3190:	0f 90       	pop	r0
    3192:	0f be       	out	0x3f, r0	; 63
    3194:	08 95       	ret

00003196 <xTaskIncrementTick>:
    3196:	cf 92       	push	r12
    3198:	df 92       	push	r13
    319a:	ef 92       	push	r14
    319c:	ff 92       	push	r15
    319e:	0f 93       	push	r16
    31a0:	1f 93       	push	r17
    31a2:	cf 93       	push	r28
    31a4:	df 93       	push	r29
    31a6:	80 91 6e 0a 	lds	r24, 0x0A6E	; 0x800a6e <uxSchedulerSuspended>
    31aa:	81 11       	cpse	r24, r1
    31ac:	98 c0       	rjmp	.+304    	; 0x32de <xTaskIncrementTick+0x148>
    31ae:	e0 90 77 0a 	lds	r14, 0x0A77	; 0x800a77 <xTickCount>
    31b2:	f0 90 78 0a 	lds	r15, 0x0A78	; 0x800a78 <xTickCount+0x1>
    31b6:	8f ef       	ldi	r24, 0xFF	; 255
    31b8:	e8 1a       	sub	r14, r24
    31ba:	f8 0a       	sbc	r15, r24
    31bc:	f0 92 78 0a 	sts	0x0A78, r15	; 0x800a78 <xTickCount+0x1>
    31c0:	e0 92 77 0a 	sts	0x0A77, r14	; 0x800a77 <xTickCount>
    31c4:	e1 14       	cp	r14, r1
    31c6:	f1 04       	cpc	r15, r1
    31c8:	b1 f4       	brne	.+44     	; 0x31f6 <xTaskIncrementTick+0x60>
    31ca:	80 91 98 0a 	lds	r24, 0x0A98	; 0x800a98 <pxDelayedTaskList>
    31ce:	90 91 99 0a 	lds	r25, 0x0A99	; 0x800a99 <pxDelayedTaskList+0x1>
    31d2:	20 91 96 0a 	lds	r18, 0x0A96	; 0x800a96 <pxOverflowDelayedTaskList>
    31d6:	30 91 97 0a 	lds	r19, 0x0A97	; 0x800a97 <pxOverflowDelayedTaskList+0x1>
    31da:	30 93 99 0a 	sts	0x0A99, r19	; 0x800a99 <pxDelayedTaskList+0x1>
    31de:	20 93 98 0a 	sts	0x0A98, r18	; 0x800a98 <pxDelayedTaskList>
    31e2:	90 93 97 0a 	sts	0x0A97, r25	; 0x800a97 <pxOverflowDelayedTaskList+0x1>
    31e6:	80 93 96 0a 	sts	0x0A96, r24	; 0x800a96 <pxOverflowDelayedTaskList>
    31ea:	80 91 72 0a 	lds	r24, 0x0A72	; 0x800a72 <xNumOfOverflows>
    31ee:	8f 5f       	subi	r24, 0xFF	; 255
    31f0:	80 93 72 0a 	sts	0x0A72, r24	; 0x800a72 <xNumOfOverflows>
    31f4:	08 de       	rcall	.-1008   	; 0x2e06 <prvResetNextTaskUnblockTime>
    31f6:	80 91 6f 0a 	lds	r24, 0x0A6F	; 0x800a6f <xNextTaskUnblockTime>
    31fa:	90 91 70 0a 	lds	r25, 0x0A70	; 0x800a70 <xNextTaskUnblockTime+0x1>
    31fe:	e8 16       	cp	r14, r24
    3200:	f9 06       	cpc	r15, r25
    3202:	10 f4       	brcc	.+4      	; 0x3208 <xTaskIncrementTick+0x72>
    3204:	d1 2c       	mov	r13, r1
    3206:	53 c0       	rjmp	.+166    	; 0x32ae <xTaskIncrementTick+0x118>
    3208:	d1 2c       	mov	r13, r1
    320a:	cc 24       	eor	r12, r12
    320c:	c3 94       	inc	r12
    320e:	e0 91 98 0a 	lds	r30, 0x0A98	; 0x800a98 <pxDelayedTaskList>
    3212:	f0 91 99 0a 	lds	r31, 0x0A99	; 0x800a99 <pxDelayedTaskList+0x1>
    3216:	80 81       	ld	r24, Z
    3218:	81 11       	cpse	r24, r1
    321a:	07 c0       	rjmp	.+14     	; 0x322a <xTaskIncrementTick+0x94>
    321c:	8f ef       	ldi	r24, 0xFF	; 255
    321e:	9f ef       	ldi	r25, 0xFF	; 255
    3220:	90 93 70 0a 	sts	0x0A70, r25	; 0x800a70 <xNextTaskUnblockTime+0x1>
    3224:	80 93 6f 0a 	sts	0x0A6F, r24	; 0x800a6f <xNextTaskUnblockTime>
    3228:	42 c0       	rjmp	.+132    	; 0x32ae <xTaskIncrementTick+0x118>
    322a:	e0 91 98 0a 	lds	r30, 0x0A98	; 0x800a98 <pxDelayedTaskList>
    322e:	f0 91 99 0a 	lds	r31, 0x0A99	; 0x800a99 <pxDelayedTaskList+0x1>
    3232:	05 80       	ldd	r0, Z+5	; 0x05
    3234:	f6 81       	ldd	r31, Z+6	; 0x06
    3236:	e0 2d       	mov	r30, r0
    3238:	c6 81       	ldd	r28, Z+6	; 0x06
    323a:	d7 81       	ldd	r29, Z+7	; 0x07
    323c:	8a 81       	ldd	r24, Y+2	; 0x02
    323e:	9b 81       	ldd	r25, Y+3	; 0x03
    3240:	e8 16       	cp	r14, r24
    3242:	f9 06       	cpc	r15, r25
    3244:	28 f4       	brcc	.+10     	; 0x3250 <xTaskIncrementTick+0xba>
    3246:	90 93 70 0a 	sts	0x0A70, r25	; 0x800a70 <xNextTaskUnblockTime+0x1>
    324a:	80 93 6f 0a 	sts	0x0A6F, r24	; 0x800a6f <xNextTaskUnblockTime>
    324e:	2f c0       	rjmp	.+94     	; 0x32ae <xTaskIncrementTick+0x118>
    3250:	8e 01       	movw	r16, r28
    3252:	0e 5f       	subi	r16, 0xFE	; 254
    3254:	1f 4f       	sbci	r17, 0xFF	; 255
    3256:	c8 01       	movw	r24, r16
    3258:	0e 94 75 10 	call	0x20ea	; 0x20ea <uxListRemove>
    325c:	8c 89       	ldd	r24, Y+20	; 0x14
    325e:	9d 89       	ldd	r25, Y+21	; 0x15
    3260:	89 2b       	or	r24, r25
    3262:	21 f0       	breq	.+8      	; 0x326c <xTaskIncrementTick+0xd6>
    3264:	ce 01       	movw	r24, r28
    3266:	0c 96       	adiw	r24, 0x0c	; 12
    3268:	0e 94 75 10 	call	0x20ea	; 0x20ea <uxListRemove>
    326c:	8e 89       	ldd	r24, Y+22	; 0x16
    326e:	90 91 76 0a 	lds	r25, 0x0A76	; 0x800a76 <uxTopReadyPriority>
    3272:	98 17       	cp	r25, r24
    3274:	10 f4       	brcc	.+4      	; 0x327a <xTaskIncrementTick+0xe4>
    3276:	80 93 76 0a 	sts	0x0A76, r24	; 0x800a76 <uxTopReadyPriority>
    327a:	90 e0       	ldi	r25, 0x00	; 0
    327c:	9c 01       	movw	r18, r24
    327e:	22 0f       	add	r18, r18
    3280:	33 1f       	adc	r19, r19
    3282:	22 0f       	add	r18, r18
    3284:	33 1f       	adc	r19, r19
    3286:	22 0f       	add	r18, r18
    3288:	33 1f       	adc	r19, r19
    328a:	82 0f       	add	r24, r18
    328c:	93 1f       	adc	r25, r19
    328e:	b8 01       	movw	r22, r16
    3290:	86 56       	subi	r24, 0x66	; 102
    3292:	95 4f       	sbci	r25, 0xF5	; 245
    3294:	0e 94 23 10 	call	0x2046	; 0x2046 <vListInsertEnd>
    3298:	e0 91 be 0a 	lds	r30, 0x0ABE	; 0x800abe <pxCurrentTCB>
    329c:	f0 91 bf 0a 	lds	r31, 0x0ABF	; 0x800abf <pxCurrentTCB+0x1>
    32a0:	9e 89       	ldd	r25, Y+22	; 0x16
    32a2:	86 89       	ldd	r24, Z+22	; 0x16
    32a4:	98 17       	cp	r25, r24
    32a6:	08 f4       	brcc	.+2      	; 0x32aa <xTaskIncrementTick+0x114>
    32a8:	b2 cf       	rjmp	.-156    	; 0x320e <xTaskIncrementTick+0x78>
    32aa:	dc 2c       	mov	r13, r12
    32ac:	b0 cf       	rjmp	.-160    	; 0x320e <xTaskIncrementTick+0x78>
    32ae:	e0 91 be 0a 	lds	r30, 0x0ABE	; 0x800abe <pxCurrentTCB>
    32b2:	f0 91 bf 0a 	lds	r31, 0x0ABF	; 0x800abf <pxCurrentTCB+0x1>
    32b6:	86 89       	ldd	r24, Z+22	; 0x16
    32b8:	90 e0       	ldi	r25, 0x00	; 0
    32ba:	fc 01       	movw	r30, r24
    32bc:	ee 0f       	add	r30, r30
    32be:	ff 1f       	adc	r31, r31
    32c0:	ee 0f       	add	r30, r30
    32c2:	ff 1f       	adc	r31, r31
    32c4:	ee 0f       	add	r30, r30
    32c6:	ff 1f       	adc	r31, r31
    32c8:	8e 0f       	add	r24, r30
    32ca:	9f 1f       	adc	r25, r31
    32cc:	fc 01       	movw	r30, r24
    32ce:	e6 56       	subi	r30, 0x66	; 102
    32d0:	f5 4f       	sbci	r31, 0xF5	; 245
    32d2:	80 81       	ld	r24, Z
    32d4:	82 30       	cpi	r24, 0x02	; 2
    32d6:	48 f0       	brcs	.+18     	; 0x32ea <xTaskIncrementTick+0x154>
    32d8:	dd 24       	eor	r13, r13
    32da:	d3 94       	inc	r13
    32dc:	06 c0       	rjmp	.+12     	; 0x32ea <xTaskIncrementTick+0x154>
    32de:	80 91 74 0a 	lds	r24, 0x0A74	; 0x800a74 <uxPendedTicks>
    32e2:	8f 5f       	subi	r24, 0xFF	; 255
    32e4:	80 93 74 0a 	sts	0x0A74, r24	; 0x800a74 <uxPendedTicks>
    32e8:	d1 2c       	mov	r13, r1
    32ea:	80 91 73 0a 	lds	r24, 0x0A73	; 0x800a73 <xYieldPending>
    32ee:	88 23       	and	r24, r24
    32f0:	11 f0       	breq	.+4      	; 0x32f6 <xTaskIncrementTick+0x160>
    32f2:	dd 24       	eor	r13, r13
    32f4:	d3 94       	inc	r13
    32f6:	8d 2d       	mov	r24, r13
    32f8:	df 91       	pop	r29
    32fa:	cf 91       	pop	r28
    32fc:	1f 91       	pop	r17
    32fe:	0f 91       	pop	r16
    3300:	ff 90       	pop	r15
    3302:	ef 90       	pop	r14
    3304:	df 90       	pop	r13
    3306:	cf 90       	pop	r12
    3308:	08 95       	ret

0000330a <xTaskResumeAll>:
    330a:	df 92       	push	r13
    330c:	ef 92       	push	r14
    330e:	ff 92       	push	r15
    3310:	0f 93       	push	r16
    3312:	1f 93       	push	r17
    3314:	cf 93       	push	r28
    3316:	df 93       	push	r29
    3318:	0f b6       	in	r0, 0x3f	; 63
    331a:	f8 94       	cli
    331c:	0f 92       	push	r0
    331e:	80 91 6e 0a 	lds	r24, 0x0A6E	; 0x800a6e <uxSchedulerSuspended>
    3322:	81 50       	subi	r24, 0x01	; 1
    3324:	80 93 6e 0a 	sts	0x0A6E, r24	; 0x800a6e <uxSchedulerSuspended>
    3328:	80 91 6e 0a 	lds	r24, 0x0A6E	; 0x800a6e <uxSchedulerSuspended>
    332c:	81 11       	cpse	r24, r1
    332e:	5d c0       	rjmp	.+186    	; 0x33ea <xTaskResumeAll+0xe0>
    3330:	80 91 79 0a 	lds	r24, 0x0A79	; 0x800a79 <uxCurrentNumberOfTasks>
    3334:	81 11       	cpse	r24, r1
    3336:	33 c0       	rjmp	.+102    	; 0x339e <xTaskResumeAll+0x94>
    3338:	5b c0       	rjmp	.+182    	; 0x33f0 <xTaskResumeAll+0xe6>
    333a:	d7 01       	movw	r26, r14
    333c:	15 96       	adiw	r26, 0x05	; 5
    333e:	ed 91       	ld	r30, X+
    3340:	fc 91       	ld	r31, X
    3342:	16 97       	sbiw	r26, 0x06	; 6
    3344:	c6 81       	ldd	r28, Z+6	; 0x06
    3346:	d7 81       	ldd	r29, Z+7	; 0x07
    3348:	ce 01       	movw	r24, r28
    334a:	0c 96       	adiw	r24, 0x0c	; 12
    334c:	0e 94 75 10 	call	0x20ea	; 0x20ea <uxListRemove>
    3350:	8e 01       	movw	r16, r28
    3352:	0e 5f       	subi	r16, 0xFE	; 254
    3354:	1f 4f       	sbci	r17, 0xFF	; 255
    3356:	c8 01       	movw	r24, r16
    3358:	0e 94 75 10 	call	0x20ea	; 0x20ea <uxListRemove>
    335c:	8e 89       	ldd	r24, Y+22	; 0x16
    335e:	90 91 76 0a 	lds	r25, 0x0A76	; 0x800a76 <uxTopReadyPriority>
    3362:	98 17       	cp	r25, r24
    3364:	10 f4       	brcc	.+4      	; 0x336a <xTaskResumeAll+0x60>
    3366:	80 93 76 0a 	sts	0x0A76, r24	; 0x800a76 <uxTopReadyPriority>
    336a:	90 e0       	ldi	r25, 0x00	; 0
    336c:	9c 01       	movw	r18, r24
    336e:	22 0f       	add	r18, r18
    3370:	33 1f       	adc	r19, r19
    3372:	22 0f       	add	r18, r18
    3374:	33 1f       	adc	r19, r19
    3376:	22 0f       	add	r18, r18
    3378:	33 1f       	adc	r19, r19
    337a:	82 0f       	add	r24, r18
    337c:	93 1f       	adc	r25, r19
    337e:	b8 01       	movw	r22, r16
    3380:	86 56       	subi	r24, 0x66	; 102
    3382:	95 4f       	sbci	r25, 0xF5	; 245
    3384:	0e 94 23 10 	call	0x2046	; 0x2046 <vListInsertEnd>
    3388:	e0 91 be 0a 	lds	r30, 0x0ABE	; 0x800abe <pxCurrentTCB>
    338c:	f0 91 bf 0a 	lds	r31, 0x0ABF	; 0x800abf <pxCurrentTCB+0x1>
    3390:	9e 89       	ldd	r25, Y+22	; 0x16
    3392:	86 89       	ldd	r24, Z+22	; 0x16
    3394:	98 17       	cp	r25, r24
    3396:	68 f0       	brcs	.+26     	; 0x33b2 <xTaskResumeAll+0xa8>
    3398:	d0 92 73 0a 	sts	0x0A73, r13	; 0x800a73 <xYieldPending>
    339c:	0a c0       	rjmp	.+20     	; 0x33b2 <xTaskResumeAll+0xa8>
    339e:	c0 e0       	ldi	r28, 0x00	; 0
    33a0:	d0 e0       	ldi	r29, 0x00	; 0
    33a2:	0f 2e       	mov	r0, r31
    33a4:	fd e8       	ldi	r31, 0x8D	; 141
    33a6:	ef 2e       	mov	r14, r31
    33a8:	fa e0       	ldi	r31, 0x0A	; 10
    33aa:	ff 2e       	mov	r15, r31
    33ac:	f0 2d       	mov	r31, r0
    33ae:	dd 24       	eor	r13, r13
    33b0:	d3 94       	inc	r13
    33b2:	f7 01       	movw	r30, r14
    33b4:	80 81       	ld	r24, Z
    33b6:	81 11       	cpse	r24, r1
    33b8:	c0 cf       	rjmp	.-128    	; 0x333a <xTaskResumeAll+0x30>
    33ba:	cd 2b       	or	r28, r29
    33bc:	09 f0       	breq	.+2      	; 0x33c0 <xTaskResumeAll+0xb6>
    33be:	23 dd       	rcall	.-1466   	; 0x2e06 <prvResetNextTaskUnblockTime>
    33c0:	c0 91 74 0a 	lds	r28, 0x0A74	; 0x800a74 <uxPendedTicks>
    33c4:	cc 23       	and	r28, r28
    33c6:	49 f0       	breq	.+18     	; 0x33da <xTaskResumeAll+0xd0>
    33c8:	d1 e0       	ldi	r29, 0x01	; 1
    33ca:	e5 de       	rcall	.-566    	; 0x3196 <xTaskIncrementTick>
    33cc:	81 11       	cpse	r24, r1
    33ce:	d0 93 73 0a 	sts	0x0A73, r29	; 0x800a73 <xYieldPending>
    33d2:	c1 50       	subi	r28, 0x01	; 1
    33d4:	d1 f7       	brne	.-12     	; 0x33ca <xTaskResumeAll+0xc0>
    33d6:	10 92 74 0a 	sts	0x0A74, r1	; 0x800a74 <uxPendedTicks>
    33da:	80 91 73 0a 	lds	r24, 0x0A73	; 0x800a73 <xYieldPending>
    33de:	88 23       	and	r24, r24
    33e0:	31 f0       	breq	.+12     	; 0x33ee <xTaskResumeAll+0xe4>
    33e2:	0e 94 4a 11 	call	0x2294	; 0x2294 <vPortYield>
    33e6:	81 e0       	ldi	r24, 0x01	; 1
    33e8:	03 c0       	rjmp	.+6      	; 0x33f0 <xTaskResumeAll+0xe6>
    33ea:	80 e0       	ldi	r24, 0x00	; 0
    33ec:	01 c0       	rjmp	.+2      	; 0x33f0 <xTaskResumeAll+0xe6>
    33ee:	80 e0       	ldi	r24, 0x00	; 0
    33f0:	0f 90       	pop	r0
    33f2:	0f be       	out	0x3f, r0	; 63
    33f4:	df 91       	pop	r29
    33f6:	cf 91       	pop	r28
    33f8:	1f 91       	pop	r17
    33fa:	0f 91       	pop	r16
    33fc:	ff 90       	pop	r15
    33fe:	ef 90       	pop	r14
    3400:	df 90       	pop	r13
    3402:	08 95       	ret

00003404 <vTaskDelay>:
    3404:	cf 93       	push	r28
    3406:	df 93       	push	r29
    3408:	ec 01       	movw	r28, r24
    340a:	89 2b       	or	r24, r25
    340c:	39 f0       	breq	.+14     	; 0x341c <vTaskDelay+0x18>
    340e:	b3 de       	rcall	.-666    	; 0x3176 <vTaskSuspendAll>
    3410:	60 e0       	ldi	r22, 0x00	; 0
    3412:	ce 01       	movw	r24, r28
    3414:	17 dd       	rcall	.-1490   	; 0x2e44 <prvAddCurrentTaskToDelayedList>
    3416:	79 df       	rcall	.-270    	; 0x330a <xTaskResumeAll>
    3418:	81 11       	cpse	r24, r1
    341a:	02 c0       	rjmp	.+4      	; 0x3420 <vTaskDelay+0x1c>
    341c:	0e 94 4a 11 	call	0x2294	; 0x2294 <vPortYield>
    3420:	df 91       	pop	r29
    3422:	cf 91       	pop	r28
    3424:	08 95       	ret

00003426 <vTaskSwitchContext>:
    3426:	80 91 6e 0a 	lds	r24, 0x0A6E	; 0x800a6e <uxSchedulerSuspended>
    342a:	88 23       	and	r24, r24
    342c:	21 f0       	breq	.+8      	; 0x3436 <vTaskSwitchContext+0x10>
    342e:	81 e0       	ldi	r24, 0x01	; 1
    3430:	80 93 73 0a 	sts	0x0A73, r24	; 0x800a73 <xYieldPending>
    3434:	08 95       	ret
    3436:	10 92 73 0a 	sts	0x0A73, r1	; 0x800a73 <xYieldPending>
    343a:	a0 91 be 0a 	lds	r26, 0x0ABE	; 0x800abe <pxCurrentTCB>
    343e:	b0 91 bf 0a 	lds	r27, 0x0ABF	; 0x800abf <pxCurrentTCB+0x1>
    3442:	e0 91 be 0a 	lds	r30, 0x0ABE	; 0x800abe <pxCurrentTCB>
    3446:	f0 91 bf 0a 	lds	r31, 0x0ABF	; 0x800abf <pxCurrentTCB+0x1>
    344a:	2d 91       	ld	r18, X+
    344c:	3c 91       	ld	r19, X
    344e:	87 89       	ldd	r24, Z+23	; 0x17
    3450:	90 8d       	ldd	r25, Z+24	; 0x18
    3452:	82 17       	cp	r24, r18
    3454:	93 07       	cpc	r25, r19
    3456:	60 f0       	brcs	.+24     	; 0x3470 <vTaskSwitchContext+0x4a>
    3458:	60 91 be 0a 	lds	r22, 0x0ABE	; 0x800abe <pxCurrentTCB>
    345c:	70 91 bf 0a 	lds	r23, 0x0ABF	; 0x800abf <pxCurrentTCB+0x1>
    3460:	80 91 be 0a 	lds	r24, 0x0ABE	; 0x800abe <pxCurrentTCB>
    3464:	90 91 bf 0a 	lds	r25, 0x0ABF	; 0x800abf <pxCurrentTCB+0x1>
    3468:	67 5e       	subi	r22, 0xE7	; 231
    346a:	7f 4f       	sbci	r23, 0xFF	; 255
    346c:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <vApplicationStackOverflowHook>
    3470:	20 91 76 0a 	lds	r18, 0x0A76	; 0x800a76 <uxTopReadyPriority>
    3474:	82 2f       	mov	r24, r18
    3476:	90 e0       	ldi	r25, 0x00	; 0
    3478:	fc 01       	movw	r30, r24
    347a:	ee 0f       	add	r30, r30
    347c:	ff 1f       	adc	r31, r31
    347e:	ee 0f       	add	r30, r30
    3480:	ff 1f       	adc	r31, r31
    3482:	ee 0f       	add	r30, r30
    3484:	ff 1f       	adc	r31, r31
    3486:	e8 0f       	add	r30, r24
    3488:	f9 1f       	adc	r31, r25
    348a:	e6 56       	subi	r30, 0x66	; 102
    348c:	f5 4f       	sbci	r31, 0xF5	; 245
    348e:	30 81       	ld	r19, Z
    3490:	31 11       	cpse	r19, r1
    3492:	11 c0       	rjmp	.+34     	; 0x34b6 <vTaskSwitchContext+0x90>
    3494:	21 50       	subi	r18, 0x01	; 1
    3496:	82 2f       	mov	r24, r18
    3498:	90 e0       	ldi	r25, 0x00	; 0
    349a:	fc 01       	movw	r30, r24
    349c:	ee 0f       	add	r30, r30
    349e:	ff 1f       	adc	r31, r31
    34a0:	ee 0f       	add	r30, r30
    34a2:	ff 1f       	adc	r31, r31
    34a4:	ee 0f       	add	r30, r30
    34a6:	ff 1f       	adc	r31, r31
    34a8:	e8 0f       	add	r30, r24
    34aa:	f9 1f       	adc	r31, r25
    34ac:	e6 56       	subi	r30, 0x66	; 102
    34ae:	f5 4f       	sbci	r31, 0xF5	; 245
    34b0:	30 81       	ld	r19, Z
    34b2:	33 23       	and	r19, r19
    34b4:	79 f3       	breq	.-34     	; 0x3494 <vTaskSwitchContext+0x6e>
    34b6:	ac 01       	movw	r20, r24
    34b8:	44 0f       	add	r20, r20
    34ba:	55 1f       	adc	r21, r21
    34bc:	44 0f       	add	r20, r20
    34be:	55 1f       	adc	r21, r21
    34c0:	44 0f       	add	r20, r20
    34c2:	55 1f       	adc	r21, r21
    34c4:	48 0f       	add	r20, r24
    34c6:	59 1f       	adc	r21, r25
    34c8:	da 01       	movw	r26, r20
    34ca:	a6 56       	subi	r26, 0x66	; 102
    34cc:	b5 4f       	sbci	r27, 0xF5	; 245
    34ce:	11 96       	adiw	r26, 0x01	; 1
    34d0:	ed 91       	ld	r30, X+
    34d2:	fc 91       	ld	r31, X
    34d4:	12 97       	sbiw	r26, 0x02	; 2
    34d6:	02 80       	ldd	r0, Z+2	; 0x02
    34d8:	f3 81       	ldd	r31, Z+3	; 0x03
    34da:	e0 2d       	mov	r30, r0
    34dc:	12 96       	adiw	r26, 0x02	; 2
    34de:	fc 93       	st	X, r31
    34e0:	ee 93       	st	-X, r30
    34e2:	11 97       	sbiw	r26, 0x01	; 1
    34e4:	43 56       	subi	r20, 0x63	; 99
    34e6:	55 4f       	sbci	r21, 0xF5	; 245
    34e8:	e4 17       	cp	r30, r20
    34ea:	f5 07       	cpc	r31, r21
    34ec:	29 f4       	brne	.+10     	; 0x34f8 <vTaskSwitchContext+0xd2>
    34ee:	42 81       	ldd	r20, Z+2	; 0x02
    34f0:	53 81       	ldd	r21, Z+3	; 0x03
    34f2:	fd 01       	movw	r30, r26
    34f4:	52 83       	std	Z+2, r21	; 0x02
    34f6:	41 83       	std	Z+1, r20	; 0x01
    34f8:	fc 01       	movw	r30, r24
    34fa:	ee 0f       	add	r30, r30
    34fc:	ff 1f       	adc	r31, r31
    34fe:	ee 0f       	add	r30, r30
    3500:	ff 1f       	adc	r31, r31
    3502:	ee 0f       	add	r30, r30
    3504:	ff 1f       	adc	r31, r31
    3506:	8e 0f       	add	r24, r30
    3508:	9f 1f       	adc	r25, r31
    350a:	fc 01       	movw	r30, r24
    350c:	e6 56       	subi	r30, 0x66	; 102
    350e:	f5 4f       	sbci	r31, 0xF5	; 245
    3510:	01 80       	ldd	r0, Z+1	; 0x01
    3512:	f2 81       	ldd	r31, Z+2	; 0x02
    3514:	e0 2d       	mov	r30, r0
    3516:	86 81       	ldd	r24, Z+6	; 0x06
    3518:	97 81       	ldd	r25, Z+7	; 0x07
    351a:	90 93 bf 0a 	sts	0x0ABF, r25	; 0x800abf <pxCurrentTCB+0x1>
    351e:	80 93 be 0a 	sts	0x0ABE, r24	; 0x800abe <pxCurrentTCB>
    3522:	20 93 76 0a 	sts	0x0A76, r18	; 0x800a76 <uxTopReadyPriority>
    3526:	08 95       	ret

00003528 <vTaskPlaceOnEventList>:
    3528:	cf 93       	push	r28
    352a:	df 93       	push	r29
    352c:	eb 01       	movw	r28, r22
    352e:	60 91 be 0a 	lds	r22, 0x0ABE	; 0x800abe <pxCurrentTCB>
    3532:	70 91 bf 0a 	lds	r23, 0x0ABF	; 0x800abf <pxCurrentTCB+0x1>
    3536:	64 5f       	subi	r22, 0xF4	; 244
    3538:	7f 4f       	sbci	r23, 0xFF	; 255
    353a:	0e 94 44 10 	call	0x2088	; 0x2088 <vListInsert>
    353e:	61 e0       	ldi	r22, 0x01	; 1
    3540:	ce 01       	movw	r24, r28
    3542:	80 dc       	rcall	.-1792   	; 0x2e44 <prvAddCurrentTaskToDelayedList>
    3544:	df 91       	pop	r29
    3546:	cf 91       	pop	r28
    3548:	08 95       	ret

0000354a <vTaskPlaceOnEventListRestricted>:
    354a:	0f 93       	push	r16
    354c:	1f 93       	push	r17
    354e:	cf 93       	push	r28
    3550:	8b 01       	movw	r16, r22
    3552:	c4 2f       	mov	r28, r20
    3554:	60 91 be 0a 	lds	r22, 0x0ABE	; 0x800abe <pxCurrentTCB>
    3558:	70 91 bf 0a 	lds	r23, 0x0ABF	; 0x800abf <pxCurrentTCB+0x1>
    355c:	64 5f       	subi	r22, 0xF4	; 244
    355e:	7f 4f       	sbci	r23, 0xFF	; 255
    3560:	0e 94 23 10 	call	0x2046	; 0x2046 <vListInsertEnd>
    3564:	cc 23       	and	r28, r28
    3566:	11 f0       	breq	.+4      	; 0x356c <vTaskPlaceOnEventListRestricted+0x22>
    3568:	0f ef       	ldi	r16, 0xFF	; 255
    356a:	1f ef       	ldi	r17, 0xFF	; 255
    356c:	6c 2f       	mov	r22, r28
    356e:	c8 01       	movw	r24, r16
    3570:	69 dc       	rcall	.-1838   	; 0x2e44 <prvAddCurrentTaskToDelayedList>
    3572:	cf 91       	pop	r28
    3574:	1f 91       	pop	r17
    3576:	0f 91       	pop	r16
    3578:	08 95       	ret

0000357a <xTaskRemoveFromEventList>:
    357a:	0f 93       	push	r16
    357c:	1f 93       	push	r17
    357e:	cf 93       	push	r28
    3580:	df 93       	push	r29
    3582:	dc 01       	movw	r26, r24
    3584:	15 96       	adiw	r26, 0x05	; 5
    3586:	ed 91       	ld	r30, X+
    3588:	fc 91       	ld	r31, X
    358a:	16 97       	sbiw	r26, 0x06	; 6
    358c:	c6 81       	ldd	r28, Z+6	; 0x06
    358e:	d7 81       	ldd	r29, Z+7	; 0x07
    3590:	8e 01       	movw	r16, r28
    3592:	04 5f       	subi	r16, 0xF4	; 244
    3594:	1f 4f       	sbci	r17, 0xFF	; 255
    3596:	c8 01       	movw	r24, r16
    3598:	0e 94 75 10 	call	0x20ea	; 0x20ea <uxListRemove>
    359c:	80 91 6e 0a 	lds	r24, 0x0A6E	; 0x800a6e <uxSchedulerSuspended>
    35a0:	81 11       	cpse	r24, r1
    35a2:	1c c0       	rjmp	.+56     	; 0x35dc <xTaskRemoveFromEventList+0x62>
    35a4:	0a 50       	subi	r16, 0x0A	; 10
    35a6:	11 09       	sbc	r17, r1
    35a8:	c8 01       	movw	r24, r16
    35aa:	0e 94 75 10 	call	0x20ea	; 0x20ea <uxListRemove>
    35ae:	8e 89       	ldd	r24, Y+22	; 0x16
    35b0:	90 91 76 0a 	lds	r25, 0x0A76	; 0x800a76 <uxTopReadyPriority>
    35b4:	98 17       	cp	r25, r24
    35b6:	10 f4       	brcc	.+4      	; 0x35bc <xTaskRemoveFromEventList+0x42>
    35b8:	80 93 76 0a 	sts	0x0A76, r24	; 0x800a76 <uxTopReadyPriority>
    35bc:	90 e0       	ldi	r25, 0x00	; 0
    35be:	9c 01       	movw	r18, r24
    35c0:	22 0f       	add	r18, r18
    35c2:	33 1f       	adc	r19, r19
    35c4:	22 0f       	add	r18, r18
    35c6:	33 1f       	adc	r19, r19
    35c8:	22 0f       	add	r18, r18
    35ca:	33 1f       	adc	r19, r19
    35cc:	82 0f       	add	r24, r18
    35ce:	93 1f       	adc	r25, r19
    35d0:	b8 01       	movw	r22, r16
    35d2:	86 56       	subi	r24, 0x66	; 102
    35d4:	95 4f       	sbci	r25, 0xF5	; 245
    35d6:	0e 94 23 10 	call	0x2046	; 0x2046 <vListInsertEnd>
    35da:	05 c0       	rjmp	.+10     	; 0x35e6 <xTaskRemoveFromEventList+0x6c>
    35dc:	b8 01       	movw	r22, r16
    35de:	8d e8       	ldi	r24, 0x8D	; 141
    35e0:	9a e0       	ldi	r25, 0x0A	; 10
    35e2:	0e 94 23 10 	call	0x2046	; 0x2046 <vListInsertEnd>
    35e6:	e0 91 be 0a 	lds	r30, 0x0ABE	; 0x800abe <pxCurrentTCB>
    35ea:	f0 91 bf 0a 	lds	r31, 0x0ABF	; 0x800abf <pxCurrentTCB+0x1>
    35ee:	9e 89       	ldd	r25, Y+22	; 0x16
    35f0:	86 89       	ldd	r24, Z+22	; 0x16
    35f2:	89 17       	cp	r24, r25
    35f4:	20 f4       	brcc	.+8      	; 0x35fe <xTaskRemoveFromEventList+0x84>
    35f6:	81 e0       	ldi	r24, 0x01	; 1
    35f8:	80 93 73 0a 	sts	0x0A73, r24	; 0x800a73 <xYieldPending>
    35fc:	01 c0       	rjmp	.+2      	; 0x3600 <xTaskRemoveFromEventList+0x86>
    35fe:	80 e0       	ldi	r24, 0x00	; 0
    3600:	df 91       	pop	r29
    3602:	cf 91       	pop	r28
    3604:	1f 91       	pop	r17
    3606:	0f 91       	pop	r16
    3608:	08 95       	ret

0000360a <vTaskSetTimeOutState>:
    360a:	0f b6       	in	r0, 0x3f	; 63
    360c:	f8 94       	cli
    360e:	0f 92       	push	r0
    3610:	20 91 72 0a 	lds	r18, 0x0A72	; 0x800a72 <xNumOfOverflows>
    3614:	fc 01       	movw	r30, r24
    3616:	20 83       	st	Z, r18
    3618:	20 91 77 0a 	lds	r18, 0x0A77	; 0x800a77 <xTickCount>
    361c:	30 91 78 0a 	lds	r19, 0x0A78	; 0x800a78 <xTickCount+0x1>
    3620:	32 83       	std	Z+2, r19	; 0x02
    3622:	21 83       	std	Z+1, r18	; 0x01
    3624:	0f 90       	pop	r0
    3626:	0f be       	out	0x3f, r0	; 63
    3628:	08 95       	ret

0000362a <vTaskInternalSetTimeOutState>:
    362a:	20 91 72 0a 	lds	r18, 0x0A72	; 0x800a72 <xNumOfOverflows>
    362e:	fc 01       	movw	r30, r24
    3630:	20 83       	st	Z, r18
    3632:	20 91 77 0a 	lds	r18, 0x0A77	; 0x800a77 <xTickCount>
    3636:	30 91 78 0a 	lds	r19, 0x0A78	; 0x800a78 <xTickCount+0x1>
    363a:	32 83       	std	Z+2, r19	; 0x02
    363c:	21 83       	std	Z+1, r18	; 0x01
    363e:	08 95       	ret

00003640 <xTaskCheckForTimeOut>:
    3640:	cf 93       	push	r28
    3642:	df 93       	push	r29
    3644:	0f b6       	in	r0, 0x3f	; 63
    3646:	f8 94       	cli
    3648:	0f 92       	push	r0
    364a:	20 91 77 0a 	lds	r18, 0x0A77	; 0x800a77 <xTickCount>
    364e:	30 91 78 0a 	lds	r19, 0x0A78	; 0x800a78 <xTickCount+0x1>
    3652:	db 01       	movw	r26, r22
    3654:	4d 91       	ld	r20, X+
    3656:	5c 91       	ld	r21, X
    3658:	4f 3f       	cpi	r20, 0xFF	; 255
    365a:	bf ef       	ldi	r27, 0xFF	; 255
    365c:	5b 07       	cpc	r21, r27
    365e:	e9 f0       	breq	.+58     	; 0x369a <xTaskCheckForTimeOut+0x5a>
    3660:	ec 01       	movw	r28, r24
    3662:	e9 81       	ldd	r30, Y+1	; 0x01
    3664:	fa 81       	ldd	r31, Y+2	; 0x02
    3666:	a0 91 72 0a 	lds	r26, 0x0A72	; 0x800a72 <xNumOfOverflows>
    366a:	b8 81       	ld	r27, Y
    366c:	ba 17       	cp	r27, r26
    366e:	19 f0       	breq	.+6      	; 0x3676 <xTaskCheckForTimeOut+0x36>
    3670:	2e 17       	cp	r18, r30
    3672:	3f 07       	cpc	r19, r31
    3674:	a0 f4       	brcc	.+40     	; 0x369e <xTaskCheckForTimeOut+0x5e>
    3676:	2e 1b       	sub	r18, r30
    3678:	3f 0b       	sbc	r19, r31
    367a:	24 17       	cp	r18, r20
    367c:	35 07       	cpc	r19, r21
    367e:	40 f4       	brcc	.+16     	; 0x3690 <xTaskCheckForTimeOut+0x50>
    3680:	fb 01       	movw	r30, r22
    3682:	42 1b       	sub	r20, r18
    3684:	53 0b       	sbc	r21, r19
    3686:	51 83       	std	Z+1, r21	; 0x01
    3688:	40 83       	st	Z, r20
    368a:	cf df       	rcall	.-98     	; 0x362a <vTaskInternalSetTimeOutState>
    368c:	80 e0       	ldi	r24, 0x00	; 0
    368e:	08 c0       	rjmp	.+16     	; 0x36a0 <xTaskCheckForTimeOut+0x60>
    3690:	fb 01       	movw	r30, r22
    3692:	11 82       	std	Z+1, r1	; 0x01
    3694:	10 82       	st	Z, r1
    3696:	81 e0       	ldi	r24, 0x01	; 1
    3698:	03 c0       	rjmp	.+6      	; 0x36a0 <xTaskCheckForTimeOut+0x60>
    369a:	80 e0       	ldi	r24, 0x00	; 0
    369c:	01 c0       	rjmp	.+2      	; 0x36a0 <xTaskCheckForTimeOut+0x60>
    369e:	81 e0       	ldi	r24, 0x01	; 1
    36a0:	0f 90       	pop	r0
    36a2:	0f be       	out	0x3f, r0	; 63
    36a4:	df 91       	pop	r29
    36a6:	cf 91       	pop	r28
    36a8:	08 95       	ret

000036aa <vTaskMissedYield>:
    36aa:	81 e0       	ldi	r24, 0x01	; 1
    36ac:	80 93 73 0a 	sts	0x0A73, r24	; 0x800a73 <xYieldPending>
    36b0:	08 95       	ret

000036b2 <xTaskGetCurrentTaskHandle>:
    36b2:	80 91 be 0a 	lds	r24, 0x0ABE	; 0x800abe <pxCurrentTCB>
    36b6:	90 91 bf 0a 	lds	r25, 0x0ABF	; 0x800abf <pxCurrentTCB+0x1>
    36ba:	08 95       	ret

000036bc <xTaskGetSchedulerState>:
    36bc:	80 91 75 0a 	lds	r24, 0x0A75	; 0x800a75 <xSchedulerRunning>
    36c0:	88 23       	and	r24, r24
    36c2:	31 f0       	breq	.+12     	; 0x36d0 <xTaskGetSchedulerState+0x14>
    36c4:	80 91 6e 0a 	lds	r24, 0x0A6E	; 0x800a6e <uxSchedulerSuspended>
    36c8:	88 23       	and	r24, r24
    36ca:	21 f0       	breq	.+8      	; 0x36d4 <xTaskGetSchedulerState+0x18>
    36cc:	80 e0       	ldi	r24, 0x00	; 0
    36ce:	08 95       	ret
    36d0:	81 e0       	ldi	r24, 0x01	; 1
    36d2:	08 95       	ret
    36d4:	82 e0       	ldi	r24, 0x02	; 2
    36d6:	08 95       	ret

000036d8 <xTaskPriorityDisinherit>:
    36d8:	0f 93       	push	r16
    36da:	1f 93       	push	r17
    36dc:	cf 93       	push	r28
    36de:	df 93       	push	r29
    36e0:	fc 01       	movw	r30, r24
    36e2:	89 2b       	or	r24, r25
    36e4:	79 f1       	breq	.+94     	; 0x3744 <xTaskPriorityDisinherit+0x6c>
    36e6:	82 a1       	ldd	r24, Z+34	; 0x22
    36e8:	81 50       	subi	r24, 0x01	; 1
    36ea:	82 a3       	std	Z+34, r24	; 0x22
    36ec:	26 89       	ldd	r18, Z+22	; 0x16
    36ee:	91 a1       	ldd	r25, Z+33	; 0x21
    36f0:	29 17       	cp	r18, r25
    36f2:	51 f1       	breq	.+84     	; 0x3748 <xTaskPriorityDisinherit+0x70>
    36f4:	81 11       	cpse	r24, r1
    36f6:	2a c0       	rjmp	.+84     	; 0x374c <xTaskPriorityDisinherit+0x74>
    36f8:	ef 01       	movw	r28, r30
    36fa:	8f 01       	movw	r16, r30
    36fc:	0e 5f       	subi	r16, 0xFE	; 254
    36fe:	1f 4f       	sbci	r17, 0xFF	; 255
    3700:	c8 01       	movw	r24, r16
    3702:	0e 94 75 10 	call	0x20ea	; 0x20ea <uxListRemove>
    3706:	89 a1       	ldd	r24, Y+33	; 0x21
    3708:	8e 8b       	std	Y+22, r24	; 0x16
    370a:	24 e0       	ldi	r18, 0x04	; 4
    370c:	30 e0       	ldi	r19, 0x00	; 0
    370e:	28 1b       	sub	r18, r24
    3710:	31 09       	sbc	r19, r1
    3712:	3d 87       	std	Y+13, r19	; 0x0d
    3714:	2c 87       	std	Y+12, r18	; 0x0c
    3716:	90 91 76 0a 	lds	r25, 0x0A76	; 0x800a76 <uxTopReadyPriority>
    371a:	98 17       	cp	r25, r24
    371c:	10 f4       	brcc	.+4      	; 0x3722 <xTaskPriorityDisinherit+0x4a>
    371e:	80 93 76 0a 	sts	0x0A76, r24	; 0x800a76 <uxTopReadyPriority>
    3722:	90 e0       	ldi	r25, 0x00	; 0
    3724:	9c 01       	movw	r18, r24
    3726:	22 0f       	add	r18, r18
    3728:	33 1f       	adc	r19, r19
    372a:	22 0f       	add	r18, r18
    372c:	33 1f       	adc	r19, r19
    372e:	22 0f       	add	r18, r18
    3730:	33 1f       	adc	r19, r19
    3732:	82 0f       	add	r24, r18
    3734:	93 1f       	adc	r25, r19
    3736:	b8 01       	movw	r22, r16
    3738:	86 56       	subi	r24, 0x66	; 102
    373a:	95 4f       	sbci	r25, 0xF5	; 245
    373c:	0e 94 23 10 	call	0x2046	; 0x2046 <vListInsertEnd>
    3740:	81 e0       	ldi	r24, 0x01	; 1
    3742:	05 c0       	rjmp	.+10     	; 0x374e <xTaskPriorityDisinherit+0x76>
    3744:	80 e0       	ldi	r24, 0x00	; 0
    3746:	03 c0       	rjmp	.+6      	; 0x374e <xTaskPriorityDisinherit+0x76>
    3748:	80 e0       	ldi	r24, 0x00	; 0
    374a:	01 c0       	rjmp	.+2      	; 0x374e <xTaskPriorityDisinherit+0x76>
    374c:	80 e0       	ldi	r24, 0x00	; 0
    374e:	df 91       	pop	r29
    3750:	cf 91       	pop	r28
    3752:	1f 91       	pop	r17
    3754:	0f 91       	pop	r16
    3756:	08 95       	ret

00003758 <xTaskNotifyWait>:
    3758:	4f 92       	push	r4
    375a:	5f 92       	push	r5
    375c:	6f 92       	push	r6
    375e:	7f 92       	push	r7
    3760:	8f 92       	push	r8
    3762:	9f 92       	push	r9
    3764:	af 92       	push	r10
    3766:	bf 92       	push	r11
    3768:	ef 92       	push	r14
    376a:	ff 92       	push	r15
    376c:	0f 93       	push	r16
    376e:	1f 93       	push	r17
    3770:	49 01       	movw	r8, r18
    3772:	5a 01       	movw	r10, r20
    3774:	0f b6       	in	r0, 0x3f	; 63
    3776:	f8 94       	cli
    3778:	0f 92       	push	r0
    377a:	e0 91 be 0a 	lds	r30, 0x0ABE	; 0x800abe <pxCurrentTCB>
    377e:	f0 91 bf 0a 	lds	r31, 0x0ABF	; 0x800abf <pxCurrentTCB+0x1>
    3782:	27 a1       	ldd	r18, Z+39	; 0x27
    3784:	22 30       	cpi	r18, 0x02	; 2
    3786:	21 f1       	breq	.+72     	; 0x37d0 <xTaskNotifyWait+0x78>
    3788:	e0 91 be 0a 	lds	r30, 0x0ABE	; 0x800abe <pxCurrentTCB>
    378c:	f0 91 bf 0a 	lds	r31, 0x0ABF	; 0x800abf <pxCurrentTCB+0x1>
    3790:	43 a0       	ldd	r4, Z+35	; 0x23
    3792:	54 a0       	ldd	r5, Z+36	; 0x24
    3794:	65 a0       	ldd	r6, Z+37	; 0x25
    3796:	76 a0       	ldd	r7, Z+38	; 0x26
    3798:	dc 01       	movw	r26, r24
    379a:	cb 01       	movw	r24, r22
    379c:	80 95       	com	r24
    379e:	90 95       	com	r25
    37a0:	a0 95       	com	r26
    37a2:	b0 95       	com	r27
    37a4:	84 21       	and	r24, r4
    37a6:	95 21       	and	r25, r5
    37a8:	a6 21       	and	r26, r6
    37aa:	b7 21       	and	r27, r7
    37ac:	83 a3       	std	Z+35, r24	; 0x23
    37ae:	94 a3       	std	Z+36, r25	; 0x24
    37b0:	a5 a3       	std	Z+37, r26	; 0x25
    37b2:	b6 a3       	std	Z+38, r27	; 0x26
    37b4:	e0 91 be 0a 	lds	r30, 0x0ABE	; 0x800abe <pxCurrentTCB>
    37b8:	f0 91 bf 0a 	lds	r31, 0x0ABF	; 0x800abf <pxCurrentTCB+0x1>
    37bc:	81 e0       	ldi	r24, 0x01	; 1
    37be:	87 a3       	std	Z+39, r24	; 0x27
    37c0:	e1 14       	cp	r14, r1
    37c2:	f1 04       	cpc	r15, r1
    37c4:	29 f0       	breq	.+10     	; 0x37d0 <xTaskNotifyWait+0x78>
    37c6:	61 e0       	ldi	r22, 0x01	; 1
    37c8:	c7 01       	movw	r24, r14
    37ca:	3c db       	rcall	.-2440   	; 0x2e44 <prvAddCurrentTaskToDelayedList>
    37cc:	0e 94 4a 11 	call	0x2294	; 0x2294 <vPortYield>
    37d0:	0f 90       	pop	r0
    37d2:	0f be       	out	0x3f, r0	; 63
    37d4:	0f b6       	in	r0, 0x3f	; 63
    37d6:	f8 94       	cli
    37d8:	0f 92       	push	r0
    37da:	01 15       	cp	r16, r1
    37dc:	11 05       	cpc	r17, r1
    37de:	69 f0       	breq	.+26     	; 0x37fa <xTaskNotifyWait+0xa2>
    37e0:	e0 91 be 0a 	lds	r30, 0x0ABE	; 0x800abe <pxCurrentTCB>
    37e4:	f0 91 bf 0a 	lds	r31, 0x0ABF	; 0x800abf <pxCurrentTCB+0x1>
    37e8:	83 a1       	ldd	r24, Z+35	; 0x23
    37ea:	94 a1       	ldd	r25, Z+36	; 0x24
    37ec:	a5 a1       	ldd	r26, Z+37	; 0x25
    37ee:	b6 a1       	ldd	r27, Z+38	; 0x26
    37f0:	f8 01       	movw	r30, r16
    37f2:	80 83       	st	Z, r24
    37f4:	91 83       	std	Z+1, r25	; 0x01
    37f6:	a2 83       	std	Z+2, r26	; 0x02
    37f8:	b3 83       	std	Z+3, r27	; 0x03
    37fa:	e0 91 be 0a 	lds	r30, 0x0ABE	; 0x800abe <pxCurrentTCB>
    37fe:	f0 91 bf 0a 	lds	r31, 0x0ABF	; 0x800abf <pxCurrentTCB+0x1>
    3802:	87 a1       	ldd	r24, Z+39	; 0x27
    3804:	82 30       	cpi	r24, 0x02	; 2
    3806:	b1 f4       	brne	.+44     	; 0x3834 <xTaskNotifyWait+0xdc>
    3808:	e0 91 be 0a 	lds	r30, 0x0ABE	; 0x800abe <pxCurrentTCB>
    380c:	f0 91 bf 0a 	lds	r31, 0x0ABF	; 0x800abf <pxCurrentTCB+0x1>
    3810:	83 a1       	ldd	r24, Z+35	; 0x23
    3812:	94 a1       	ldd	r25, Z+36	; 0x24
    3814:	a5 a1       	ldd	r26, Z+37	; 0x25
    3816:	b6 a1       	ldd	r27, Z+38	; 0x26
    3818:	80 94       	com	r8
    381a:	90 94       	com	r9
    381c:	a0 94       	com	r10
    381e:	b0 94       	com	r11
    3820:	88 22       	and	r8, r24
    3822:	99 22       	and	r9, r25
    3824:	aa 22       	and	r10, r26
    3826:	bb 22       	and	r11, r27
    3828:	83 a2       	std	Z+35, r8	; 0x23
    382a:	94 a2       	std	Z+36, r9	; 0x24
    382c:	a5 a2       	std	Z+37, r10	; 0x25
    382e:	b6 a2       	std	Z+38, r11	; 0x26
    3830:	81 e0       	ldi	r24, 0x01	; 1
    3832:	01 c0       	rjmp	.+2      	; 0x3836 <xTaskNotifyWait+0xde>
    3834:	80 e0       	ldi	r24, 0x00	; 0
    3836:	e0 91 be 0a 	lds	r30, 0x0ABE	; 0x800abe <pxCurrentTCB>
    383a:	f0 91 bf 0a 	lds	r31, 0x0ABF	; 0x800abf <pxCurrentTCB+0x1>
    383e:	17 a2       	std	Z+39, r1	; 0x27
    3840:	0f 90       	pop	r0
    3842:	0f be       	out	0x3f, r0	; 63
    3844:	1f 91       	pop	r17
    3846:	0f 91       	pop	r16
    3848:	ff 90       	pop	r15
    384a:	ef 90       	pop	r14
    384c:	bf 90       	pop	r11
    384e:	af 90       	pop	r10
    3850:	9f 90       	pop	r9
    3852:	8f 90       	pop	r8
    3854:	7f 90       	pop	r7
    3856:	6f 90       	pop	r6
    3858:	5f 90       	pop	r5
    385a:	4f 90       	pop	r4
    385c:	08 95       	ret

0000385e <xTaskGenericNotify>:
    385e:	0f 93       	push	r16
    3860:	1f 93       	push	r17
    3862:	cf 93       	push	r28
    3864:	df 93       	push	r29
    3866:	fc 01       	movw	r30, r24
    3868:	0f b6       	in	r0, 0x3f	; 63
    386a:	f8 94       	cli
    386c:	0f 92       	push	r0
    386e:	01 15       	cp	r16, r1
    3870:	11 05       	cpc	r17, r1
    3872:	49 f0       	breq	.+18     	; 0x3886 <xTaskGenericNotify+0x28>
    3874:	83 a1       	ldd	r24, Z+35	; 0x23
    3876:	94 a1       	ldd	r25, Z+36	; 0x24
    3878:	a5 a1       	ldd	r26, Z+37	; 0x25
    387a:	b6 a1       	ldd	r27, Z+38	; 0x26
    387c:	e8 01       	movw	r28, r16
    387e:	88 83       	st	Y, r24
    3880:	99 83       	std	Y+1, r25	; 0x01
    3882:	aa 83       	std	Y+2, r26	; 0x02
    3884:	bb 83       	std	Y+3, r27	; 0x03
    3886:	87 a1       	ldd	r24, Z+39	; 0x27
    3888:	92 e0       	ldi	r25, 0x02	; 2
    388a:	97 a3       	std	Z+39, r25	; 0x27
    388c:	22 30       	cpi	r18, 0x02	; 2
    388e:	b1 f0       	breq	.+44     	; 0x38bc <xTaskGenericNotify+0x5e>
    3890:	18 f4       	brcc	.+6      	; 0x3898 <xTaskGenericNotify+0x3a>
    3892:	21 30       	cpi	r18, 0x01	; 1
    3894:	31 f0       	breq	.+12     	; 0x38a2 <xTaskGenericNotify+0x44>
    3896:	2a c0       	rjmp	.+84     	; 0x38ec <xTaskGenericNotify+0x8e>
    3898:	23 30       	cpi	r18, 0x03	; 3
    389a:	e9 f0       	breq	.+58     	; 0x38d6 <xTaskGenericNotify+0x78>
    389c:	24 30       	cpi	r18, 0x04	; 4
    389e:	01 f1       	breq	.+64     	; 0x38e0 <xTaskGenericNotify+0x82>
    38a0:	25 c0       	rjmp	.+74     	; 0x38ec <xTaskGenericNotify+0x8e>
    38a2:	03 a1       	ldd	r16, Z+35	; 0x23
    38a4:	14 a1       	ldd	r17, Z+36	; 0x24
    38a6:	25 a1       	ldd	r18, Z+37	; 0x25
    38a8:	36 a1       	ldd	r19, Z+38	; 0x26
    38aa:	40 2b       	or	r20, r16
    38ac:	51 2b       	or	r21, r17
    38ae:	62 2b       	or	r22, r18
    38b0:	73 2b       	or	r23, r19
    38b2:	43 a3       	std	Z+35, r20	; 0x23
    38b4:	54 a3       	std	Z+36, r21	; 0x24
    38b6:	65 a3       	std	Z+37, r22	; 0x25
    38b8:	76 a3       	std	Z+38, r23	; 0x26
    38ba:	18 c0       	rjmp	.+48     	; 0x38ec <xTaskGenericNotify+0x8e>
    38bc:	43 a1       	ldd	r20, Z+35	; 0x23
    38be:	54 a1       	ldd	r21, Z+36	; 0x24
    38c0:	65 a1       	ldd	r22, Z+37	; 0x25
    38c2:	76 a1       	ldd	r23, Z+38	; 0x26
    38c4:	4f 5f       	subi	r20, 0xFF	; 255
    38c6:	5f 4f       	sbci	r21, 0xFF	; 255
    38c8:	6f 4f       	sbci	r22, 0xFF	; 255
    38ca:	7f 4f       	sbci	r23, 0xFF	; 255
    38cc:	43 a3       	std	Z+35, r20	; 0x23
    38ce:	54 a3       	std	Z+36, r21	; 0x24
    38d0:	65 a3       	std	Z+37, r22	; 0x25
    38d2:	76 a3       	std	Z+38, r23	; 0x26
    38d4:	0b c0       	rjmp	.+22     	; 0x38ec <xTaskGenericNotify+0x8e>
    38d6:	43 a3       	std	Z+35, r20	; 0x23
    38d8:	54 a3       	std	Z+36, r21	; 0x24
    38da:	65 a3       	std	Z+37, r22	; 0x25
    38dc:	76 a3       	std	Z+38, r23	; 0x26
    38de:	06 c0       	rjmp	.+12     	; 0x38ec <xTaskGenericNotify+0x8e>
    38e0:	82 30       	cpi	r24, 0x02	; 2
    38e2:	79 f1       	breq	.+94     	; 0x3942 <xTaskGenericNotify+0xe4>
    38e4:	43 a3       	std	Z+35, r20	; 0x23
    38e6:	54 a3       	std	Z+36, r21	; 0x24
    38e8:	65 a3       	std	Z+37, r22	; 0x25
    38ea:	76 a3       	std	Z+38, r23	; 0x26
    38ec:	81 30       	cpi	r24, 0x01	; 1
    38ee:	59 f5       	brne	.+86     	; 0x3946 <xTaskGenericNotify+0xe8>
    38f0:	ef 01       	movw	r28, r30
    38f2:	8f 01       	movw	r16, r30
    38f4:	0e 5f       	subi	r16, 0xFE	; 254
    38f6:	1f 4f       	sbci	r17, 0xFF	; 255
    38f8:	c8 01       	movw	r24, r16
    38fa:	0e 94 75 10 	call	0x20ea	; 0x20ea <uxListRemove>
    38fe:	8e 89       	ldd	r24, Y+22	; 0x16
    3900:	90 91 76 0a 	lds	r25, 0x0A76	; 0x800a76 <uxTopReadyPriority>
    3904:	98 17       	cp	r25, r24
    3906:	10 f4       	brcc	.+4      	; 0x390c <xTaskGenericNotify+0xae>
    3908:	80 93 76 0a 	sts	0x0A76, r24	; 0x800a76 <uxTopReadyPriority>
    390c:	90 e0       	ldi	r25, 0x00	; 0
    390e:	9c 01       	movw	r18, r24
    3910:	22 0f       	add	r18, r18
    3912:	33 1f       	adc	r19, r19
    3914:	22 0f       	add	r18, r18
    3916:	33 1f       	adc	r19, r19
    3918:	22 0f       	add	r18, r18
    391a:	33 1f       	adc	r19, r19
    391c:	82 0f       	add	r24, r18
    391e:	93 1f       	adc	r25, r19
    3920:	b8 01       	movw	r22, r16
    3922:	86 56       	subi	r24, 0x66	; 102
    3924:	95 4f       	sbci	r25, 0xF5	; 245
    3926:	0e 94 23 10 	call	0x2046	; 0x2046 <vListInsertEnd>
    392a:	e0 91 be 0a 	lds	r30, 0x0ABE	; 0x800abe <pxCurrentTCB>
    392e:	f0 91 bf 0a 	lds	r31, 0x0ABF	; 0x800abf <pxCurrentTCB+0x1>
    3932:	9e 89       	ldd	r25, Y+22	; 0x16
    3934:	86 89       	ldd	r24, Z+22	; 0x16
    3936:	89 17       	cp	r24, r25
    3938:	40 f4       	brcc	.+16     	; 0x394a <xTaskGenericNotify+0xec>
    393a:	0e 94 4a 11 	call	0x2294	; 0x2294 <vPortYield>
    393e:	81 e0       	ldi	r24, 0x01	; 1
    3940:	05 c0       	rjmp	.+10     	; 0x394c <xTaskGenericNotify+0xee>
    3942:	80 e0       	ldi	r24, 0x00	; 0
    3944:	03 c0       	rjmp	.+6      	; 0x394c <xTaskGenericNotify+0xee>
    3946:	81 e0       	ldi	r24, 0x01	; 1
    3948:	01 c0       	rjmp	.+2      	; 0x394c <xTaskGenericNotify+0xee>
    394a:	81 e0       	ldi	r24, 0x01	; 1
    394c:	0f 90       	pop	r0
    394e:	0f be       	out	0x3f, r0	; 63
    3950:	df 91       	pop	r29
    3952:	cf 91       	pop	r28
    3954:	1f 91       	pop	r17
    3956:	0f 91       	pop	r16
    3958:	08 95       	ret

0000395a <xTaskNotifyStateClear>:
    395a:	00 97       	sbiw	r24, 0x00	; 0
    395c:	21 f4       	brne	.+8      	; 0x3966 <xTaskNotifyStateClear+0xc>
    395e:	80 91 be 0a 	lds	r24, 0x0ABE	; 0x800abe <pxCurrentTCB>
    3962:	90 91 bf 0a 	lds	r25, 0x0ABF	; 0x800abf <pxCurrentTCB+0x1>
    3966:	0f b6       	in	r0, 0x3f	; 63
    3968:	f8 94       	cli
    396a:	0f 92       	push	r0
    396c:	fc 01       	movw	r30, r24
    396e:	27 a1       	ldd	r18, Z+39	; 0x27
    3970:	22 30       	cpi	r18, 0x02	; 2
    3972:	19 f4       	brne	.+6      	; 0x397a <xTaskNotifyStateClear+0x20>
    3974:	17 a2       	std	Z+39, r1	; 0x27
    3976:	81 e0       	ldi	r24, 0x01	; 1
    3978:	01 c0       	rjmp	.+2      	; 0x397c <xTaskNotifyStateClear+0x22>
    397a:	80 e0       	ldi	r24, 0x00	; 0
    397c:	0f 90       	pop	r0
    397e:	0f be       	out	0x3f, r0	; 63
    3980:	08 95       	ret

00003982 <prvInsertTimerInActiveList>:
    3982:	fc 01       	movw	r30, r24
    3984:	73 83       	std	Z+3, r23	; 0x03
    3986:	62 83       	std	Z+2, r22	; 0x02
    3988:	91 87       	std	Z+9, r25	; 0x09
    398a:	80 87       	std	Z+8, r24	; 0x08
    398c:	46 17       	cp	r20, r22
    398e:	57 07       	cpc	r21, r23
    3990:	90 f0       	brcs	.+36     	; 0x39b6 <prvInsertTimerInActiveList+0x34>
    3992:	42 1b       	sub	r20, r18
    3994:	53 0b       	sbc	r21, r19
    3996:	84 85       	ldd	r24, Z+12	; 0x0c
    3998:	95 85       	ldd	r25, Z+13	; 0x0d
    399a:	48 17       	cp	r20, r24
    399c:	59 07       	cpc	r21, r25
    399e:	e0 f4       	brcc	.+56     	; 0x39d8 <prvInsertTimerInActiveList+0x56>
    39a0:	bf 01       	movw	r22, r30
    39a2:	6e 5f       	subi	r22, 0xFE	; 254
    39a4:	7f 4f       	sbci	r23, 0xFF	; 255
    39a6:	80 91 29 0b 	lds	r24, 0x0B29	; 0x800b29 <pxOverflowTimerList>
    39aa:	90 91 2a 0b 	lds	r25, 0x0B2A	; 0x800b2a <pxOverflowTimerList+0x1>
    39ae:	0e 94 44 10 	call	0x2088	; 0x2088 <vListInsert>
    39b2:	80 e0       	ldi	r24, 0x00	; 0
    39b4:	08 95       	ret
    39b6:	42 17       	cp	r20, r18
    39b8:	53 07       	cpc	r21, r19
    39ba:	18 f4       	brcc	.+6      	; 0x39c2 <prvInsertTimerInActiveList+0x40>
    39bc:	62 17       	cp	r22, r18
    39be:	73 07       	cpc	r23, r19
    39c0:	68 f4       	brcc	.+26     	; 0x39dc <prvInsertTimerInActiveList+0x5a>
    39c2:	bf 01       	movw	r22, r30
    39c4:	6e 5f       	subi	r22, 0xFE	; 254
    39c6:	7f 4f       	sbci	r23, 0xFF	; 255
    39c8:	80 91 2b 0b 	lds	r24, 0x0B2B	; 0x800b2b <pxCurrentTimerList>
    39cc:	90 91 2c 0b 	lds	r25, 0x0B2C	; 0x800b2c <pxCurrentTimerList+0x1>
    39d0:	0e 94 44 10 	call	0x2088	; 0x2088 <vListInsert>
    39d4:	80 e0       	ldi	r24, 0x00	; 0
    39d6:	08 95       	ret
    39d8:	81 e0       	ldi	r24, 0x01	; 1
    39da:	08 95       	ret
    39dc:	81 e0       	ldi	r24, 0x01	; 1
    39de:	08 95       	ret

000039e0 <prvCheckForValidListAndQueue>:
    39e0:	0f 93       	push	r16
    39e2:	0f b6       	in	r0, 0x3f	; 63
    39e4:	f8 94       	cli
    39e6:	0f 92       	push	r0
    39e8:	80 91 27 0b 	lds	r24, 0x0B27	; 0x800b27 <xTimerQueue>
    39ec:	90 91 28 0b 	lds	r25, 0x0B28	; 0x800b28 <xTimerQueue+0x1>
    39f0:	89 2b       	or	r24, r25
    39f2:	09 f5       	brne	.+66     	; 0x3a36 <prvCheckForValidListAndQueue+0x56>
    39f4:	8a e1       	ldi	r24, 0x1A	; 26
    39f6:	9b e0       	ldi	r25, 0x0B	; 11
    39f8:	0e 94 11 10 	call	0x2022	; 0x2022 <vListInitialise>
    39fc:	81 e1       	ldi	r24, 0x11	; 17
    39fe:	9b e0       	ldi	r25, 0x0B	; 11
    3a00:	0e 94 11 10 	call	0x2022	; 0x2022 <vListInitialise>
    3a04:	8a e1       	ldi	r24, 0x1A	; 26
    3a06:	9b e0       	ldi	r25, 0x0B	; 11
    3a08:	90 93 2c 0b 	sts	0x0B2C, r25	; 0x800b2c <pxCurrentTimerList+0x1>
    3a0c:	80 93 2b 0b 	sts	0x0B2B, r24	; 0x800b2b <pxCurrentTimerList>
    3a10:	81 e1       	ldi	r24, 0x11	; 17
    3a12:	9b e0       	ldi	r25, 0x0B	; 11
    3a14:	90 93 2a 0b 	sts	0x0B2A, r25	; 0x800b2a <pxOverflowTimerList+0x1>
    3a18:	80 93 29 0b 	sts	0x0B29, r24	; 0x800b29 <pxOverflowTimerList>
    3a1c:	00 e0       	ldi	r16, 0x00	; 0
    3a1e:	20 ec       	ldi	r18, 0xC0	; 192
    3a20:	3a e0       	ldi	r19, 0x0A	; 10
    3a22:	4f ed       	ldi	r20, 0xDF	; 223
    3a24:	5a e0       	ldi	r21, 0x0A	; 10
    3a26:	65 e0       	ldi	r22, 0x05	; 5
    3a28:	8a e0       	ldi	r24, 0x0A	; 10
    3a2a:	0e 94 23 13 	call	0x2646	; 0x2646 <xQueueGenericCreateStatic>
    3a2e:	90 93 28 0b 	sts	0x0B28, r25	; 0x800b28 <xTimerQueue+0x1>
    3a32:	80 93 27 0b 	sts	0x0B27, r24	; 0x800b27 <xTimerQueue>
    3a36:	0f 90       	pop	r0
    3a38:	0f be       	out	0x3f, r0	; 63
    3a3a:	0f 91       	pop	r16
    3a3c:	08 95       	ret

00003a3e <xTimerCreateTimerTask>:
    3a3e:	cf 92       	push	r12
    3a40:	df 92       	push	r13
    3a42:	ef 92       	push	r14
    3a44:	ff 92       	push	r15
    3a46:	0f 93       	push	r16
    3a48:	cf 93       	push	r28
    3a4a:	df 93       	push	r29
    3a4c:	00 d0       	rcall	.+0      	; 0x3a4e <xTimerCreateTimerTask+0x10>
    3a4e:	00 d0       	rcall	.+0      	; 0x3a50 <xTimerCreateTimerTask+0x12>
    3a50:	cd b7       	in	r28, 0x3d	; 61
    3a52:	de b7       	in	r29, 0x3e	; 62
    3a54:	c5 df       	rcall	.-118    	; 0x39e0 <prvCheckForValidListAndQueue>
    3a56:	80 91 27 0b 	lds	r24, 0x0B27	; 0x800b27 <xTimerQueue>
    3a5a:	90 91 28 0b 	lds	r25, 0x0B28	; 0x800b28 <xTimerQueue+0x1>
    3a5e:	89 2b       	or	r24, r25
    3a60:	31 f1       	breq	.+76     	; 0x3aae <xTimerCreateTimerTask+0x70>
    3a62:	1e 82       	std	Y+6, r1	; 0x06
    3a64:	1d 82       	std	Y+5, r1	; 0x05
    3a66:	1c 82       	std	Y+4, r1	; 0x04
    3a68:	1b 82       	std	Y+3, r1	; 0x03
    3a6a:	ae 01       	movw	r20, r28
    3a6c:	4f 5f       	subi	r20, 0xFF	; 255
    3a6e:	5f 4f       	sbci	r21, 0xFF	; 255
    3a70:	be 01       	movw	r22, r28
    3a72:	6d 5f       	subi	r22, 0xFD	; 253
    3a74:	7f 4f       	sbci	r23, 0xFF	; 255
    3a76:	ce 01       	movw	r24, r28
    3a78:	05 96       	adiw	r24, 0x05	; 5
    3a7a:	0e 94 01 10 	call	0x2002	; 0x2002 <vApplicationGetTimerTaskMemory>
    3a7e:	cd 80       	ldd	r12, Y+5	; 0x05
    3a80:	de 80       	ldd	r13, Y+6	; 0x06
    3a82:	eb 80       	ldd	r14, Y+3	; 0x03
    3a84:	fc 80       	ldd	r15, Y+4	; 0x04
    3a86:	49 81       	ldd	r20, Y+1	; 0x01
    3a88:	5a 81       	ldd	r21, Y+2	; 0x02
    3a8a:	03 e0       	ldi	r16, 0x03	; 3
    3a8c:	20 e0       	ldi	r18, 0x00	; 0
    3a8e:	30 e0       	ldi	r19, 0x00	; 0
    3a90:	64 e8       	ldi	r22, 0x84	; 132
    3a92:	72 e0       	ldi	r23, 0x02	; 2
    3a94:	8b e1       	ldi	r24, 0x1B	; 27
    3a96:	9e e1       	ldi	r25, 0x1E	; 30
    3a98:	29 da       	rcall	.-2990   	; 0x2eec <xTaskCreateStatic>
    3a9a:	9c 01       	movw	r18, r24
    3a9c:	90 93 26 0b 	sts	0x0B26, r25	; 0x800b26 <xTimerTaskHandle+0x1>
    3aa0:	80 93 25 0b 	sts	0x0B25, r24	; 0x800b25 <xTimerTaskHandle>
    3aa4:	81 e0       	ldi	r24, 0x01	; 1
    3aa6:	23 2b       	or	r18, r19
    3aa8:	19 f4       	brne	.+6      	; 0x3ab0 <xTimerCreateTimerTask+0x72>
    3aaa:	80 e0       	ldi	r24, 0x00	; 0
    3aac:	01 c0       	rjmp	.+2      	; 0x3ab0 <xTimerCreateTimerTask+0x72>
    3aae:	80 e0       	ldi	r24, 0x00	; 0
    3ab0:	26 96       	adiw	r28, 0x06	; 6
    3ab2:	0f b6       	in	r0, 0x3f	; 63
    3ab4:	f8 94       	cli
    3ab6:	de bf       	out	0x3e, r29	; 62
    3ab8:	0f be       	out	0x3f, r0	; 63
    3aba:	cd bf       	out	0x3d, r28	; 61
    3abc:	df 91       	pop	r29
    3abe:	cf 91       	pop	r28
    3ac0:	0f 91       	pop	r16
    3ac2:	ff 90       	pop	r15
    3ac4:	ef 90       	pop	r14
    3ac6:	df 90       	pop	r13
    3ac8:	cf 90       	pop	r12
    3aca:	08 95       	ret

00003acc <xTimerGenericCommand>:
    3acc:	0f 93       	push	r16
    3ace:	1f 93       	push	r17
    3ad0:	cf 93       	push	r28
    3ad2:	df 93       	push	r29
    3ad4:	00 d0       	rcall	.+0      	; 0x3ad6 <xTimerGenericCommand+0xa>
    3ad6:	1f 92       	push	r1
    3ad8:	1f 92       	push	r1
    3ada:	cd b7       	in	r28, 0x3d	; 61
    3adc:	de b7       	in	r29, 0x3e	; 62
    3ade:	e0 91 27 0b 	lds	r30, 0x0B27	; 0x800b27 <xTimerQueue>
    3ae2:	f0 91 28 0b 	lds	r31, 0x0B28	; 0x800b28 <xTimerQueue+0x1>
    3ae6:	30 97       	sbiw	r30, 0x00	; 0
    3ae8:	69 f1       	breq	.+90     	; 0x3b44 <xTimerGenericCommand+0x78>
    3aea:	d9 01       	movw	r26, r18
    3aec:	69 83       	std	Y+1, r22	; 0x01
    3aee:	5b 83       	std	Y+3, r21	; 0x03
    3af0:	4a 83       	std	Y+2, r20	; 0x02
    3af2:	9d 83       	std	Y+5, r25	; 0x05
    3af4:	8c 83       	std	Y+4, r24	; 0x04
    3af6:	66 30       	cpi	r22, 0x06	; 6
    3af8:	e4 f4       	brge	.+56     	; 0x3b32 <xTimerGenericCommand+0x66>
    3afa:	e0 dd       	rcall	.-1088   	; 0x36bc <xTaskGetSchedulerState>
    3afc:	82 30       	cpi	r24, 0x02	; 2
    3afe:	61 f4       	brne	.+24     	; 0x3b18 <xTimerGenericCommand+0x4c>
    3b00:	20 e0       	ldi	r18, 0x00	; 0
    3b02:	a8 01       	movw	r20, r16
    3b04:	be 01       	movw	r22, r28
    3b06:	6f 5f       	subi	r22, 0xFF	; 255
    3b08:	7f 4f       	sbci	r23, 0xFF	; 255
    3b0a:	80 91 27 0b 	lds	r24, 0x0B27	; 0x800b27 <xTimerQueue>
    3b0e:	90 91 28 0b 	lds	r25, 0x0B28	; 0x800b28 <xTimerQueue+0x1>
    3b12:	0e 94 38 13 	call	0x2670	; 0x2670 <xQueueGenericSend>
    3b16:	17 c0       	rjmp	.+46     	; 0x3b46 <xTimerGenericCommand+0x7a>
    3b18:	20 e0       	ldi	r18, 0x00	; 0
    3b1a:	40 e0       	ldi	r20, 0x00	; 0
    3b1c:	50 e0       	ldi	r21, 0x00	; 0
    3b1e:	be 01       	movw	r22, r28
    3b20:	6f 5f       	subi	r22, 0xFF	; 255
    3b22:	7f 4f       	sbci	r23, 0xFF	; 255
    3b24:	80 91 27 0b 	lds	r24, 0x0B27	; 0x800b27 <xTimerQueue>
    3b28:	90 91 28 0b 	lds	r25, 0x0B28	; 0x800b28 <xTimerQueue+0x1>
    3b2c:	0e 94 38 13 	call	0x2670	; 0x2670 <xQueueGenericSend>
    3b30:	0a c0       	rjmp	.+20     	; 0x3b46 <xTimerGenericCommand+0x7a>
    3b32:	20 e0       	ldi	r18, 0x00	; 0
    3b34:	ad 01       	movw	r20, r26
    3b36:	be 01       	movw	r22, r28
    3b38:	6f 5f       	subi	r22, 0xFF	; 255
    3b3a:	7f 4f       	sbci	r23, 0xFF	; 255
    3b3c:	cf 01       	movw	r24, r30
    3b3e:	0e 94 ca 13 	call	0x2794	; 0x2794 <xQueueGenericSendFromISR>
    3b42:	01 c0       	rjmp	.+2      	; 0x3b46 <xTimerGenericCommand+0x7a>
    3b44:	80 e0       	ldi	r24, 0x00	; 0
    3b46:	0f 90       	pop	r0
    3b48:	0f 90       	pop	r0
    3b4a:	0f 90       	pop	r0
    3b4c:	0f 90       	pop	r0
    3b4e:	0f 90       	pop	r0
    3b50:	df 91       	pop	r29
    3b52:	cf 91       	pop	r28
    3b54:	1f 91       	pop	r17
    3b56:	0f 91       	pop	r16
    3b58:	08 95       	ret

00003b5a <prvSampleTimeNow>:
    3b5a:	af 92       	push	r10
    3b5c:	bf 92       	push	r11
    3b5e:	cf 92       	push	r12
    3b60:	df 92       	push	r13
    3b62:	ef 92       	push	r14
    3b64:	ff 92       	push	r15
    3b66:	0f 93       	push	r16
    3b68:	1f 93       	push	r17
    3b6a:	cf 93       	push	r28
    3b6c:	df 93       	push	r29
    3b6e:	6c 01       	movw	r12, r24
    3b70:	08 db       	rcall	.-2544   	; 0x3182 <xTaskGetTickCount>
    3b72:	7c 01       	movw	r14, r24
    3b74:	80 91 23 0b 	lds	r24, 0x0B23	; 0x800b23 <xLastTime.2391>
    3b78:	90 91 24 0b 	lds	r25, 0x0B24	; 0x800b24 <xLastTime.2391+0x1>
    3b7c:	e8 16       	cp	r14, r24
    3b7e:	f9 06       	cpc	r15, r25
    3b80:	08 f0       	brcs	.+2      	; 0x3b84 <prvSampleTimeNow+0x2a>
    3b82:	47 c0       	rjmp	.+142    	; 0x3c12 <prvSampleTimeNow+0xb8>
    3b84:	2f c0       	rjmp	.+94     	; 0x3be4 <prvSampleTimeNow+0x8a>
    3b86:	05 80       	ldd	r0, Z+5	; 0x05
    3b88:	f6 81       	ldd	r31, Z+6	; 0x06
    3b8a:	e0 2d       	mov	r30, r0
    3b8c:	a0 80       	ld	r10, Z
    3b8e:	b1 80       	ldd	r11, Z+1	; 0x01
    3b90:	c6 81       	ldd	r28, Z+6	; 0x06
    3b92:	d7 81       	ldd	r29, Z+7	; 0x07
    3b94:	8e 01       	movw	r16, r28
    3b96:	0e 5f       	subi	r16, 0xFE	; 254
    3b98:	1f 4f       	sbci	r17, 0xFF	; 255
    3b9a:	c8 01       	movw	r24, r16
    3b9c:	0e 94 75 10 	call	0x20ea	; 0x20ea <uxListRemove>
    3ba0:	e9 89       	ldd	r30, Y+17	; 0x11
    3ba2:	fa 89       	ldd	r31, Y+18	; 0x12
    3ba4:	ce 01       	movw	r24, r28
    3ba6:	19 95       	eicall
    3ba8:	8e 85       	ldd	r24, Y+14	; 0x0e
    3baa:	81 30       	cpi	r24, 0x01	; 1
    3bac:	d9 f4       	brne	.+54     	; 0x3be4 <prvSampleTimeNow+0x8a>
    3bae:	8c 85       	ldd	r24, Y+12	; 0x0c
    3bb0:	9d 85       	ldd	r25, Y+13	; 0x0d
    3bb2:	8a 0d       	add	r24, r10
    3bb4:	9b 1d       	adc	r25, r11
    3bb6:	a8 16       	cp	r10, r24
    3bb8:	b9 06       	cpc	r11, r25
    3bba:	60 f4       	brcc	.+24     	; 0x3bd4 <prvSampleTimeNow+0x7a>
    3bbc:	9b 83       	std	Y+3, r25	; 0x03
    3bbe:	8a 83       	std	Y+2, r24	; 0x02
    3bc0:	d9 87       	std	Y+9, r29	; 0x09
    3bc2:	c8 87       	std	Y+8, r28	; 0x08
    3bc4:	b8 01       	movw	r22, r16
    3bc6:	80 91 2b 0b 	lds	r24, 0x0B2B	; 0x800b2b <pxCurrentTimerList>
    3bca:	90 91 2c 0b 	lds	r25, 0x0B2C	; 0x800b2c <pxCurrentTimerList+0x1>
    3bce:	0e 94 44 10 	call	0x2088	; 0x2088 <vListInsert>
    3bd2:	08 c0       	rjmp	.+16     	; 0x3be4 <prvSampleTimeNow+0x8a>
    3bd4:	00 e0       	ldi	r16, 0x00	; 0
    3bd6:	10 e0       	ldi	r17, 0x00	; 0
    3bd8:	20 e0       	ldi	r18, 0x00	; 0
    3bda:	30 e0       	ldi	r19, 0x00	; 0
    3bdc:	a5 01       	movw	r20, r10
    3bde:	60 e0       	ldi	r22, 0x00	; 0
    3be0:	ce 01       	movw	r24, r28
    3be2:	74 df       	rcall	.-280    	; 0x3acc <xTimerGenericCommand>
    3be4:	e0 91 2b 0b 	lds	r30, 0x0B2B	; 0x800b2b <pxCurrentTimerList>
    3be8:	f0 91 2c 0b 	lds	r31, 0x0B2C	; 0x800b2c <pxCurrentTimerList+0x1>
    3bec:	80 81       	ld	r24, Z
    3bee:	81 11       	cpse	r24, r1
    3bf0:	ca cf       	rjmp	.-108    	; 0x3b86 <prvSampleTimeNow+0x2c>
    3bf2:	80 91 29 0b 	lds	r24, 0x0B29	; 0x800b29 <pxOverflowTimerList>
    3bf6:	90 91 2a 0b 	lds	r25, 0x0B2A	; 0x800b2a <pxOverflowTimerList+0x1>
    3bfa:	90 93 2c 0b 	sts	0x0B2C, r25	; 0x800b2c <pxCurrentTimerList+0x1>
    3bfe:	80 93 2b 0b 	sts	0x0B2B, r24	; 0x800b2b <pxCurrentTimerList>
    3c02:	f0 93 2a 0b 	sts	0x0B2A, r31	; 0x800b2a <pxOverflowTimerList+0x1>
    3c06:	e0 93 29 0b 	sts	0x0B29, r30	; 0x800b29 <pxOverflowTimerList>
    3c0a:	81 e0       	ldi	r24, 0x01	; 1
    3c0c:	f6 01       	movw	r30, r12
    3c0e:	80 83       	st	Z, r24
    3c10:	02 c0       	rjmp	.+4      	; 0x3c16 <prvSampleTimeNow+0xbc>
    3c12:	f6 01       	movw	r30, r12
    3c14:	10 82       	st	Z, r1
    3c16:	f0 92 24 0b 	sts	0x0B24, r15	; 0x800b24 <xLastTime.2391+0x1>
    3c1a:	e0 92 23 0b 	sts	0x0B23, r14	; 0x800b23 <xLastTime.2391>
    3c1e:	c7 01       	movw	r24, r14
    3c20:	df 91       	pop	r29
    3c22:	cf 91       	pop	r28
    3c24:	1f 91       	pop	r17
    3c26:	0f 91       	pop	r16
    3c28:	ff 90       	pop	r15
    3c2a:	ef 90       	pop	r14
    3c2c:	df 90       	pop	r13
    3c2e:	cf 90       	pop	r12
    3c30:	bf 90       	pop	r11
    3c32:	af 90       	pop	r10
    3c34:	08 95       	ret

00003c36 <prvTimerTask>:
    3c36:	cf 93       	push	r28
    3c38:	df 93       	push	r29
    3c3a:	00 d0       	rcall	.+0      	; 0x3c3c <prvTimerTask+0x6>
    3c3c:	00 d0       	rcall	.+0      	; 0x3c3e <prvTimerTask+0x8>
    3c3e:	cd b7       	in	r28, 0x3d	; 61
    3c40:	de b7       	in	r29, 0x3e	; 62
    3c42:	ce 01       	movw	r24, r28
    3c44:	01 96       	adiw	r24, 0x01	; 1
    3c46:	4c 01       	movw	r8, r24
    3c48:	44 24       	eor	r4, r4
    3c4a:	43 94       	inc	r4
    3c4c:	e1 2c       	mov	r14, r1
    3c4e:	f1 2c       	mov	r15, r1
    3c50:	51 2c       	mov	r5, r1
    3c52:	c8 2e       	mov	r12, r24
    3c54:	d9 2c       	mov	r13, r9
    3c56:	e0 91 2b 0b 	lds	r30, 0x0B2B	; 0x800b2b <pxCurrentTimerList>
    3c5a:	f0 91 2c 0b 	lds	r31, 0x0B2C	; 0x800b2c <pxCurrentTimerList+0x1>
    3c5e:	80 81       	ld	r24, Z
    3c60:	88 23       	and	r24, r24
    3c62:	09 f4       	brne	.+2      	; 0x3c66 <prvTimerTask+0x30>
    3c64:	b1 c0       	rjmp	.+354    	; 0x3dc8 <prvTimerTask+0x192>
    3c66:	05 80       	ldd	r0, Z+5	; 0x05
    3c68:	f6 81       	ldd	r31, Z+6	; 0x06
    3c6a:	e0 2d       	mov	r30, r0
    3c6c:	a0 80       	ld	r10, Z
    3c6e:	b1 80       	ldd	r11, Z+1	; 0x01
    3c70:	82 da       	rcall	.-2812   	; 0x3176 <vTaskSuspendAll>
    3c72:	c4 01       	movw	r24, r8
    3c74:	72 df       	rcall	.-284    	; 0x3b5a <prvSampleTimeNow>
    3c76:	8c 01       	movw	r16, r24
    3c78:	89 81       	ldd	r24, Y+1	; 0x01
    3c7a:	81 11       	cpse	r24, r1
    3c7c:	43 c0       	rjmp	.+134    	; 0x3d04 <prvTimerTask+0xce>
    3c7e:	0a 15       	cp	r16, r10
    3c80:	1b 05       	cpc	r17, r11
    3c82:	80 f1       	brcs	.+96     	; 0x3ce4 <prvTimerTask+0xae>
    3c84:	42 db       	rcall	.-2428   	; 0x330a <xTaskResumeAll>
    3c86:	e0 91 2b 0b 	lds	r30, 0x0B2B	; 0x800b2b <pxCurrentTimerList>
    3c8a:	f0 91 2c 0b 	lds	r31, 0x0B2C	; 0x800b2c <pxCurrentTimerList+0x1>
    3c8e:	05 80       	ldd	r0, Z+5	; 0x05
    3c90:	f6 81       	ldd	r31, Z+6	; 0x06
    3c92:	e0 2d       	mov	r30, r0
    3c94:	66 80       	ldd	r6, Z+6	; 0x06
    3c96:	77 80       	ldd	r7, Z+7	; 0x07
    3c98:	c3 01       	movw	r24, r6
    3c9a:	02 96       	adiw	r24, 0x02	; 2
    3c9c:	0e 94 75 10 	call	0x20ea	; 0x20ea <uxListRemove>
    3ca0:	d3 01       	movw	r26, r6
    3ca2:	1e 96       	adiw	r26, 0x0e	; 14
    3ca4:	8c 91       	ld	r24, X
    3ca6:	1e 97       	sbiw	r26, 0x0e	; 14
    3ca8:	81 30       	cpi	r24, 0x01	; 1
    3caa:	a1 f4       	brne	.+40     	; 0x3cd4 <prvTimerTask+0x9e>
    3cac:	1c 96       	adiw	r26, 0x0c	; 12
    3cae:	6d 91       	ld	r22, X+
    3cb0:	7c 91       	ld	r23, X
    3cb2:	1d 97       	sbiw	r26, 0x0d	; 13
    3cb4:	6a 0d       	add	r22, r10
    3cb6:	7b 1d       	adc	r23, r11
    3cb8:	95 01       	movw	r18, r10
    3cba:	a8 01       	movw	r20, r16
    3cbc:	c3 01       	movw	r24, r6
    3cbe:	61 de       	rcall	.-830    	; 0x3982 <prvInsertTimerInActiveList>
    3cc0:	88 23       	and	r24, r24
    3cc2:	41 f0       	breq	.+16     	; 0x3cd4 <prvTimerTask+0x9e>
    3cc4:	0e 2d       	mov	r16, r14
    3cc6:	1f 2d       	mov	r17, r15
    3cc8:	2e 2d       	mov	r18, r14
    3cca:	3f 2d       	mov	r19, r15
    3ccc:	a5 01       	movw	r20, r10
    3cce:	65 2d       	mov	r22, r5
    3cd0:	c3 01       	movw	r24, r6
    3cd2:	fc de       	rcall	.-520    	; 0x3acc <xTimerGenericCommand>
    3cd4:	d3 01       	movw	r26, r6
    3cd6:	51 96       	adiw	r26, 0x11	; 17
    3cd8:	ed 91       	ld	r30, X+
    3cda:	fc 91       	ld	r31, X
    3cdc:	52 97       	sbiw	r26, 0x12	; 18
    3cde:	c3 01       	movw	r24, r6
    3ce0:	19 95       	eicall
    3ce2:	65 c0       	rjmp	.+202    	; 0x3dae <prvTimerTask+0x178>
    3ce4:	45 2d       	mov	r20, r5
    3ce6:	b5 01       	movw	r22, r10
    3ce8:	60 1b       	sub	r22, r16
    3cea:	71 0b       	sbc	r23, r17
    3cec:	80 91 27 0b 	lds	r24, 0x0B27	; 0x800b27 <xTimerQueue>
    3cf0:	90 91 28 0b 	lds	r25, 0x0B28	; 0x800b28 <xTimerQueue+0x1>
    3cf4:	0e 94 8b 14 	call	0x2916	; 0x2916 <vQueueWaitForMessageRestricted>
    3cf8:	08 db       	rcall	.-2544   	; 0x330a <xTaskResumeAll>
    3cfa:	81 11       	cpse	r24, r1
    3cfc:	58 c0       	rjmp	.+176    	; 0x3dae <prvTimerTask+0x178>
    3cfe:	0e 94 4a 11 	call	0x2294	; 0x2294 <vPortYield>
    3d02:	55 c0       	rjmp	.+170    	; 0x3dae <prvTimerTask+0x178>
    3d04:	02 db       	rcall	.-2556   	; 0x330a <xTaskResumeAll>
    3d06:	53 c0       	rjmp	.+166    	; 0x3dae <prvTimerTask+0x178>
    3d08:	89 81       	ldd	r24, Y+1	; 0x01
    3d0a:	88 23       	and	r24, r24
    3d0c:	0c f4       	brge	.+2      	; 0x3d10 <prvTimerTask+0xda>
    3d0e:	4f c0       	rjmp	.+158    	; 0x3dae <prvTimerTask+0x178>
    3d10:	ac 80       	ldd	r10, Y+4	; 0x04
    3d12:	bd 80       	ldd	r11, Y+5	; 0x05
    3d14:	f5 01       	movw	r30, r10
    3d16:	82 85       	ldd	r24, Z+10	; 0x0a
    3d18:	93 85       	ldd	r25, Z+11	; 0x0b
    3d1a:	89 2b       	or	r24, r25
    3d1c:	21 f0       	breq	.+8      	; 0x3d26 <prvTimerTask+0xf0>
    3d1e:	c5 01       	movw	r24, r10
    3d20:	02 96       	adiw	r24, 0x02	; 2
    3d22:	0e 94 75 10 	call	0x20ea	; 0x20ea <uxListRemove>
    3d26:	ce 01       	movw	r24, r28
    3d28:	06 96       	adiw	r24, 0x06	; 6
    3d2a:	17 df       	rcall	.-466    	; 0x3b5a <prvSampleTimeNow>
    3d2c:	ac 01       	movw	r20, r24
    3d2e:	99 81       	ldd	r25, Y+1	; 0x01
    3d30:	94 30       	cpi	r25, 0x04	; 4
    3d32:	89 f1       	breq	.+98     	; 0x3d96 <prvTimerTask+0x160>
    3d34:	1c f4       	brge	.+6      	; 0x3d3c <prvTimerTask+0x106>
    3d36:	93 30       	cpi	r25, 0x03	; 3
    3d38:	d0 f5       	brcc	.+116    	; 0x3dae <prvTimerTask+0x178>
    3d3a:	07 c0       	rjmp	.+14     	; 0x3d4a <prvTimerTask+0x114>
    3d3c:	96 30       	cpi	r25, 0x06	; 6
    3d3e:	bc f1       	brlt	.+110    	; 0x3dae <prvTimerTask+0x178>
    3d40:	98 30       	cpi	r25, 0x08	; 8
    3d42:	1c f0       	brlt	.+6      	; 0x3d4a <prvTimerTask+0x114>
    3d44:	99 30       	cpi	r25, 0x09	; 9
    3d46:	39 f1       	breq	.+78     	; 0x3d96 <prvTimerTask+0x160>
    3d48:	32 c0       	rjmp	.+100    	; 0x3dae <prvTimerTask+0x178>
    3d4a:	2a 81       	ldd	r18, Y+2	; 0x02
    3d4c:	3b 81       	ldd	r19, Y+3	; 0x03
    3d4e:	d5 01       	movw	r26, r10
    3d50:	1c 96       	adiw	r26, 0x0c	; 12
    3d52:	6d 91       	ld	r22, X+
    3d54:	7c 91       	ld	r23, X
    3d56:	1d 97       	sbiw	r26, 0x0d	; 13
    3d58:	62 0f       	add	r22, r18
    3d5a:	73 1f       	adc	r23, r19
    3d5c:	c5 01       	movw	r24, r10
    3d5e:	11 de       	rcall	.-990    	; 0x3982 <prvInsertTimerInActiveList>
    3d60:	88 23       	and	r24, r24
    3d62:	29 f1       	breq	.+74     	; 0x3dae <prvTimerTask+0x178>
    3d64:	d5 01       	movw	r26, r10
    3d66:	51 96       	adiw	r26, 0x11	; 17
    3d68:	ed 91       	ld	r30, X+
    3d6a:	fc 91       	ld	r31, X
    3d6c:	52 97       	sbiw	r26, 0x12	; 18
    3d6e:	c5 01       	movw	r24, r10
    3d70:	19 95       	eicall
    3d72:	f5 01       	movw	r30, r10
    3d74:	86 85       	ldd	r24, Z+14	; 0x0e
    3d76:	81 30       	cpi	r24, 0x01	; 1
    3d78:	d1 f4       	brne	.+52     	; 0x3dae <prvTimerTask+0x178>
    3d7a:	4a 81       	ldd	r20, Y+2	; 0x02
    3d7c:	5b 81       	ldd	r21, Y+3	; 0x03
    3d7e:	84 85       	ldd	r24, Z+12	; 0x0c
    3d80:	95 85       	ldd	r25, Z+13	; 0x0d
    3d82:	48 0f       	add	r20, r24
    3d84:	59 1f       	adc	r21, r25
    3d86:	0e 2d       	mov	r16, r14
    3d88:	1f 2d       	mov	r17, r15
    3d8a:	2e 2d       	mov	r18, r14
    3d8c:	3f 2d       	mov	r19, r15
    3d8e:	65 2d       	mov	r22, r5
    3d90:	c5 01       	movw	r24, r10
    3d92:	9c de       	rcall	.-712    	; 0x3acc <xTimerGenericCommand>
    3d94:	0c c0       	rjmp	.+24     	; 0x3dae <prvTimerTask+0x178>
    3d96:	6a 81       	ldd	r22, Y+2	; 0x02
    3d98:	7b 81       	ldd	r23, Y+3	; 0x03
    3d9a:	d5 01       	movw	r26, r10
    3d9c:	1d 96       	adiw	r26, 0x0d	; 13
    3d9e:	7c 93       	st	X, r23
    3da0:	6e 93       	st	-X, r22
    3da2:	1c 97       	sbiw	r26, 0x0c	; 12
    3da4:	64 0f       	add	r22, r20
    3da6:	75 1f       	adc	r23, r21
    3da8:	9a 01       	movw	r18, r20
    3daa:	c5 01       	movw	r24, r10
    3dac:	ea dd       	rcall	.-1068   	; 0x3982 <prvInsertTimerInActiveList>
    3dae:	4e 2d       	mov	r20, r14
    3db0:	5f 2d       	mov	r21, r15
    3db2:	6c 2d       	mov	r22, r12
    3db4:	7d 2d       	mov	r23, r13
    3db6:	80 91 27 0b 	lds	r24, 0x0B27	; 0x800b27 <xTimerQueue>
    3dba:	90 91 28 0b 	lds	r25, 0x0B28	; 0x800b28 <xTimerQueue+0x1>
    3dbe:	0e 94 02 14 	call	0x2804	; 0x2804 <xQueueReceive>
    3dc2:	81 11       	cpse	r24, r1
    3dc4:	a1 cf       	rjmp	.-190    	; 0x3d08 <prvTimerTask+0xd2>
    3dc6:	47 cf       	rjmp	.-370    	; 0x3c56 <prvTimerTask+0x20>
    3dc8:	d6 d9       	rcall	.-3156   	; 0x3176 <vTaskSuspendAll>
    3dca:	c4 01       	movw	r24, r8
    3dcc:	c6 de       	rcall	.-628    	; 0x3b5a <prvSampleTimeNow>
    3dce:	8c 01       	movw	r16, r24
    3dd0:	89 81       	ldd	r24, Y+1	; 0x01
    3dd2:	81 11       	cpse	r24, r1
    3dd4:	97 cf       	rjmp	.-210    	; 0x3d04 <prvTimerTask+0xce>
    3dd6:	e0 91 29 0b 	lds	r30, 0x0B29	; 0x800b29 <pxOverflowTimerList>
    3dda:	f0 91 2a 0b 	lds	r31, 0x0B2A	; 0x800b2a <pxOverflowTimerList+0x1>
    3dde:	80 81       	ld	r24, Z
    3de0:	44 2d       	mov	r20, r4
    3de2:	81 11       	cpse	r24, r1
    3de4:	45 2d       	mov	r20, r5
    3de6:	ae 2c       	mov	r10, r14
    3de8:	bf 2c       	mov	r11, r15
    3dea:	7d cf       	rjmp	.-262    	; 0x3ce6 <prvTimerTask+0xb0>

00003dec <LCD_main>:
	#ifdef __DEBUG
	uint16_t *Debug_read;
	#endif
	while(1){
		#ifdef __DEBUG
			s_Lcd_data_write.data1++;
    3dec:	cc e5       	ldi	r28, 0x5C	; 92
    3dee:	dd e0       	ldi	r29, 0x0D	; 13
    3df0:	88 81       	ld	r24, Y
    3df2:	99 81       	ldd	r25, Y+1	; 0x01
    3df4:	01 96       	adiw	r24, 0x01	; 1
    3df6:	99 83       	std	Y+1, r25	; 0x01
    3df8:	88 83       	st	Y, r24
			s_Lcd_data_write.data2++;
    3dfa:	8a 81       	ldd	r24, Y+2	; 0x02
    3dfc:	9b 81       	ldd	r25, Y+3	; 0x03
    3dfe:	01 96       	adiw	r24, 0x01	; 1
    3e00:	9b 83       	std	Y+3, r25	; 0x03
    3e02:	8a 83       	std	Y+2, r24	; 0x02
			s_Lcd_data_write.data3++;
    3e04:	8c 81       	ldd	r24, Y+4	; 0x04
    3e06:	9d 81       	ldd	r25, Y+5	; 0x05
    3e08:	01 96       	adiw	r24, 0x01	; 1
    3e0a:	9d 83       	std	Y+5, r25	; 0x05
    3e0c:	8c 83       	std	Y+4, r24	; 0x04
s_LCD_DATA_WRITE_t   s_Lcd_data_write;

static void LCD_READ_Parameters(void){
	//call LCD_read_mutliple regs (fill the struct) and check for the errors //s_Lcd_data_read
	//set rte parameters
	Lcd_Read_multiple_data(LCD_START_READ_ADDRESS,(uint16_t*)&s_Lcd_data_read,LCD_READ_REGS_NUMBER);
    3e0e:	44 e0       	ldi	r20, 0x04	; 4
    3e10:	62 e6       	ldi	r22, 0x62	; 98
    3e12:	7d e0       	ldi	r23, 0x0D	; 13
    3e14:	83 e0       	ldi	r24, 0x03	; 3
    3e16:	90 e0       	ldi	r25, 0x00	; 0
    3e18:	0e 94 48 02 	call	0x490	; 0x490 <Lcd_Read_multiple_data>
	
}
=======
    1284:	31 e1       	ldi	r19, 0x11	; 17
    1286:	fc 01       	movw	r30, r24
    1288:	30 83       	st	Z, r19
    128a:	31 97       	sbiw	r30, 0x01	; 1
    128c:	22 e2       	ldi	r18, 0x22	; 34
    128e:	20 83       	st	Z, r18
    1290:	31 97       	sbiw	r30, 0x01	; 1
    1292:	a3 e3       	ldi	r26, 0x33	; 51
    1294:	a0 83       	st	Z, r26
    1296:	31 97       	sbiw	r30, 0x01	; 1
    1298:	60 83       	st	Z, r22
    129a:	31 97       	sbiw	r30, 0x01	; 1
    129c:	70 83       	st	Z, r23
    129e:	31 97       	sbiw	r30, 0x01	; 1
    12a0:	10 82       	st	Z, r1
    12a2:	31 97       	sbiw	r30, 0x01	; 1
    12a4:	10 82       	st	Z, r1
    12a6:	31 97       	sbiw	r30, 0x01	; 1
    12a8:	60 e8       	ldi	r22, 0x80	; 128
    12aa:	60 83       	st	Z, r22
    12ac:	31 97       	sbiw	r30, 0x01	; 1
    12ae:	10 82       	st	Z, r1
    12b0:	31 97       	sbiw	r30, 0x01	; 1
    12b2:	10 82       	st	Z, r1
    12b4:	31 97       	sbiw	r30, 0x01	; 1
    12b6:	10 82       	st	Z, r1
    12b8:	31 97       	sbiw	r30, 0x01	; 1
    12ba:	62 e0       	ldi	r22, 0x02	; 2
    12bc:	60 83       	st	Z, r22
    12be:	31 97       	sbiw	r30, 0x01	; 1
    12c0:	63 e0       	ldi	r22, 0x03	; 3
    12c2:	60 83       	st	Z, r22
    12c4:	31 97       	sbiw	r30, 0x01	; 1
    12c6:	64 e0       	ldi	r22, 0x04	; 4
    12c8:	60 83       	st	Z, r22
    12ca:	31 97       	sbiw	r30, 0x01	; 1
    12cc:	65 e0       	ldi	r22, 0x05	; 5
    12ce:	60 83       	st	Z, r22
    12d0:	31 97       	sbiw	r30, 0x01	; 1
    12d2:	66 e0       	ldi	r22, 0x06	; 6
    12d4:	60 83       	st	Z, r22
    12d6:	31 97       	sbiw	r30, 0x01	; 1
    12d8:	67 e0       	ldi	r22, 0x07	; 7
    12da:	60 83       	st	Z, r22
    12dc:	31 97       	sbiw	r30, 0x01	; 1
    12de:	68 e0       	ldi	r22, 0x08	; 8
    12e0:	60 83       	st	Z, r22
    12e2:	31 97       	sbiw	r30, 0x01	; 1
    12e4:	69 e0       	ldi	r22, 0x09	; 9
    12e6:	60 83       	st	Z, r22
    12e8:	31 97       	sbiw	r30, 0x01	; 1
    12ea:	60 e1       	ldi	r22, 0x10	; 16
    12ec:	60 83       	st	Z, r22
    12ee:	31 97       	sbiw	r30, 0x01	; 1
    12f0:	30 83       	st	Z, r19
    12f2:	31 97       	sbiw	r30, 0x01	; 1
    12f4:	32 e1       	ldi	r19, 0x12	; 18
    12f6:	30 83       	st	Z, r19
    12f8:	31 97       	sbiw	r30, 0x01	; 1
    12fa:	33 e1       	ldi	r19, 0x13	; 19
    12fc:	30 83       	st	Z, r19
    12fe:	31 97       	sbiw	r30, 0x01	; 1
    1300:	34 e1       	ldi	r19, 0x14	; 20
    1302:	30 83       	st	Z, r19
    1304:	31 97       	sbiw	r30, 0x01	; 1
    1306:	35 e1       	ldi	r19, 0x15	; 21
    1308:	30 83       	st	Z, r19
    130a:	31 97       	sbiw	r30, 0x01	; 1
    130c:	36 e1       	ldi	r19, 0x16	; 22
    130e:	30 83       	st	Z, r19
    1310:	31 97       	sbiw	r30, 0x01	; 1
    1312:	37 e1       	ldi	r19, 0x17	; 23
    1314:	30 83       	st	Z, r19
    1316:	31 97       	sbiw	r30, 0x01	; 1
    1318:	38 e1       	ldi	r19, 0x18	; 24
    131a:	30 83       	st	Z, r19
    131c:	31 97       	sbiw	r30, 0x01	; 1
    131e:	39 e1       	ldi	r19, 0x19	; 25
    1320:	30 83       	st	Z, r19
    1322:	31 97       	sbiw	r30, 0x01	; 1
    1324:	30 e2       	ldi	r19, 0x20	; 32
    1326:	30 83       	st	Z, r19
    1328:	31 97       	sbiw	r30, 0x01	; 1
    132a:	31 e2       	ldi	r19, 0x21	; 33
    132c:	30 83       	st	Z, r19
    132e:	31 97       	sbiw	r30, 0x01	; 1
    1330:	20 83       	st	Z, r18
    1332:	31 97       	sbiw	r30, 0x01	; 1
    1334:	23 e2       	ldi	r18, 0x23	; 35
    1336:	20 83       	st	Z, r18
    1338:	31 97       	sbiw	r30, 0x01	; 1
    133a:	40 83       	st	Z, r20
    133c:	31 97       	sbiw	r30, 0x01	; 1
    133e:	50 83       	st	Z, r21
    1340:	31 97       	sbiw	r30, 0x01	; 1
    1342:	26 e2       	ldi	r18, 0x26	; 38
    1344:	20 83       	st	Z, r18
    1346:	31 97       	sbiw	r30, 0x01	; 1
    1348:	27 e2       	ldi	r18, 0x27	; 39
    134a:	20 83       	st	Z, r18
    134c:	31 97       	sbiw	r30, 0x01	; 1
    134e:	28 e2       	ldi	r18, 0x28	; 40
    1350:	20 83       	st	Z, r18
    1352:	31 97       	sbiw	r30, 0x01	; 1
    1354:	29 e2       	ldi	r18, 0x29	; 41
    1356:	20 83       	st	Z, r18
    1358:	31 97       	sbiw	r30, 0x01	; 1
    135a:	20 e3       	ldi	r18, 0x30	; 48
    135c:	20 83       	st	Z, r18
    135e:	31 97       	sbiw	r30, 0x01	; 1
    1360:	21 e3       	ldi	r18, 0x31	; 49
    1362:	20 83       	st	Z, r18
    1364:	89 97       	sbiw	r24, 0x29	; 41
    1366:	08 95       	ret

00001368 <xPortStartScheduler>:
    1368:	a8 95       	wdr
    136a:	90 ec       	ldi	r25, 0xC0	; 192
    136c:	88 e1       	ldi	r24, 0x18	; 24
    136e:	0f b6       	in	r0, 0x3f	; 63
    1370:	f8 94       	cli
    1372:	a8 95       	wdr
    1374:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
    1378:	0f be       	out	0x3f, r0	; 63
    137a:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
    137e:	a0 91 84 08 	lds	r26, 0x0884	; 0x800884 <pxCurrentTCB>
    1382:	b0 91 85 08 	lds	r27, 0x0885	; 0x800885 <pxCurrentTCB+0x1>
    1386:	cd 91       	ld	r28, X+
    1388:	cd bf       	out	0x3d, r28	; 61
    138a:	dd 91       	ld	r29, X+
    138c:	de bf       	out	0x3e, r29	; 62
    138e:	ff 91       	pop	r31
    1390:	ef 91       	pop	r30
    1392:	df 91       	pop	r29
    1394:	cf 91       	pop	r28
    1396:	bf 91       	pop	r27
    1398:	af 91       	pop	r26
    139a:	9f 91       	pop	r25
    139c:	8f 91       	pop	r24
    139e:	7f 91       	pop	r23
    13a0:	6f 91       	pop	r22
    13a2:	5f 91       	pop	r21
    13a4:	4f 91       	pop	r20
    13a6:	3f 91       	pop	r19
    13a8:	2f 91       	pop	r18
    13aa:	1f 91       	pop	r17
    13ac:	0f 91       	pop	r16
    13ae:	ff 90       	pop	r15
    13b0:	ef 90       	pop	r14
    13b2:	df 90       	pop	r13
    13b4:	cf 90       	pop	r12
    13b6:	bf 90       	pop	r11
    13b8:	af 90       	pop	r10
    13ba:	9f 90       	pop	r9
    13bc:	8f 90       	pop	r8
    13be:	7f 90       	pop	r7
    13c0:	6f 90       	pop	r6
    13c2:	5f 90       	pop	r5
    13c4:	4f 90       	pop	r4
    13c6:	3f 90       	pop	r3
    13c8:	2f 90       	pop	r2
    13ca:	1f 90       	pop	r1
    13cc:	0f 90       	pop	r0
    13ce:	0c be       	out	0x3c, r0	; 60
    13d0:	0f 90       	pop	r0
    13d2:	0b be       	out	0x3b, r0	; 59
    13d4:	0f 90       	pop	r0
    13d6:	0f be       	out	0x3f, r0	; 63
    13d8:	0f 90       	pop	r0
    13da:	08 95       	ret
    13dc:	81 e0       	ldi	r24, 0x01	; 1
    13de:	08 95       	ret

000013e0 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    13e0:	0f 92       	push	r0
    13e2:	0f b6       	in	r0, 0x3f	; 63
    13e4:	f8 94       	cli
    13e6:	0f 92       	push	r0
    13e8:	0b b6       	in	r0, 0x3b	; 59
    13ea:	0f 92       	push	r0
    13ec:	0c b6       	in	r0, 0x3c	; 60
    13ee:	0f 92       	push	r0
    13f0:	1f 92       	push	r1
    13f2:	11 24       	eor	r1, r1
    13f4:	2f 92       	push	r2
    13f6:	3f 92       	push	r3
    13f8:	4f 92       	push	r4
    13fa:	5f 92       	push	r5
    13fc:	6f 92       	push	r6
    13fe:	7f 92       	push	r7
    1400:	8f 92       	push	r8
    1402:	9f 92       	push	r9
    1404:	af 92       	push	r10
    1406:	bf 92       	push	r11
    1408:	cf 92       	push	r12
    140a:	df 92       	push	r13
    140c:	ef 92       	push	r14
    140e:	ff 92       	push	r15
    1410:	0f 93       	push	r16
    1412:	1f 93       	push	r17
    1414:	2f 93       	push	r18
    1416:	3f 93       	push	r19
    1418:	4f 93       	push	r20
    141a:	5f 93       	push	r21
    141c:	6f 93       	push	r22
    141e:	7f 93       	push	r23
    1420:	8f 93       	push	r24
    1422:	9f 93       	push	r25
    1424:	af 93       	push	r26
    1426:	bf 93       	push	r27
    1428:	cf 93       	push	r28
    142a:	df 93       	push	r29
    142c:	ef 93       	push	r30
    142e:	ff 93       	push	r31
    1430:	a0 91 84 08 	lds	r26, 0x0884	; 0x800884 <pxCurrentTCB>
    1434:	b0 91 85 08 	lds	r27, 0x0885	; 0x800885 <pxCurrentTCB+0x1>
    1438:	0d b6       	in	r0, 0x3d	; 61
    143a:	0d 92       	st	X+, r0
    143c:	0e b6       	in	r0, 0x3e	; 62
    143e:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    1440:	0e 94 b8 12 	call	0x2570	; 0x2570 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    1444:	a0 91 84 08 	lds	r26, 0x0884	; 0x800884 <pxCurrentTCB>
    1448:	b0 91 85 08 	lds	r27, 0x0885	; 0x800885 <pxCurrentTCB+0x1>
    144c:	cd 91       	ld	r28, X+
    144e:	cd bf       	out	0x3d, r28	; 61
    1450:	dd 91       	ld	r29, X+
    1452:	de bf       	out	0x3e, r29	; 62
    1454:	ff 91       	pop	r31
    1456:	ef 91       	pop	r30
    1458:	df 91       	pop	r29
    145a:	cf 91       	pop	r28
    145c:	bf 91       	pop	r27
    145e:	af 91       	pop	r26
    1460:	9f 91       	pop	r25
    1462:	8f 91       	pop	r24
    1464:	7f 91       	pop	r23
    1466:	6f 91       	pop	r22
    1468:	5f 91       	pop	r21
    146a:	4f 91       	pop	r20
    146c:	3f 91       	pop	r19
    146e:	2f 91       	pop	r18
    1470:	1f 91       	pop	r17
    1472:	0f 91       	pop	r16
    1474:	ff 90       	pop	r15
    1476:	ef 90       	pop	r14
    1478:	df 90       	pop	r13
    147a:	cf 90       	pop	r12
    147c:	bf 90       	pop	r11
    147e:	af 90       	pop	r10
    1480:	9f 90       	pop	r9
    1482:	8f 90       	pop	r8
    1484:	7f 90       	pop	r7
    1486:	6f 90       	pop	r6
    1488:	5f 90       	pop	r5
    148a:	4f 90       	pop	r4
    148c:	3f 90       	pop	r3
    148e:	2f 90       	pop	r2
    1490:	1f 90       	pop	r1
    1492:	0f 90       	pop	r0
    1494:	0c be       	out	0x3c, r0	; 60
    1496:	0f 90       	pop	r0
    1498:	0b be       	out	0x3b, r0	; 59
    149a:	0f 90       	pop	r0
    149c:	0f be       	out	0x3f, r0	; 63
    149e:	0f 90       	pop	r0

	__asm__ __volatile__ ( "ret" );
    14a0:	08 95       	ret

000014a2 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    14a2:	0f 92       	push	r0
    14a4:	0f b6       	in	r0, 0x3f	; 63
    14a6:	f8 94       	cli
    14a8:	0f 92       	push	r0
    14aa:	0b b6       	in	r0, 0x3b	; 59
    14ac:	0f 92       	push	r0
    14ae:	0c b6       	in	r0, 0x3c	; 60
    14b0:	0f 92       	push	r0
    14b2:	1f 92       	push	r1
    14b4:	11 24       	eor	r1, r1
    14b6:	2f 92       	push	r2
    14b8:	3f 92       	push	r3
    14ba:	4f 92       	push	r4
    14bc:	5f 92       	push	r5
    14be:	6f 92       	push	r6
    14c0:	7f 92       	push	r7
    14c2:	8f 92       	push	r8
    14c4:	9f 92       	push	r9
    14c6:	af 92       	push	r10
    14c8:	bf 92       	push	r11
    14ca:	cf 92       	push	r12
    14cc:	df 92       	push	r13
    14ce:	ef 92       	push	r14
    14d0:	ff 92       	push	r15
    14d2:	0f 93       	push	r16
    14d4:	1f 93       	push	r17
    14d6:	2f 93       	push	r18
    14d8:	3f 93       	push	r19
    14da:	4f 93       	push	r20
    14dc:	5f 93       	push	r21
    14de:	6f 93       	push	r22
    14e0:	7f 93       	push	r23
    14e2:	8f 93       	push	r24
    14e4:	9f 93       	push	r25
    14e6:	af 93       	push	r26
    14e8:	bf 93       	push	r27
    14ea:	cf 93       	push	r28
    14ec:	df 93       	push	r29
    14ee:	ef 93       	push	r30
    14f0:	ff 93       	push	r31
    14f2:	a0 91 84 08 	lds	r26, 0x0884	; 0x800884 <pxCurrentTCB>
    14f6:	b0 91 85 08 	lds	r27, 0x0885	; 0x800885 <pxCurrentTCB+0x1>
    14fa:	0d b6       	in	r0, 0x3d	; 61
    14fc:	0d 92       	st	X+, r0
    14fe:	0e b6       	in	r0, 0x3e	; 62
    1500:	0d 92       	st	X+, r0

	sleep_reset();		//	 reset the sleep_mode() faster than sleep_disable();
    1502:	13 be       	out	0x33, r1	; 51

	if( xTaskIncrementTick() != pdFALSE )
    1504:	ed d6       	rcall	.+3546   	; 0x22e0 <xTaskIncrementTick>
    1506:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
    1508:	0e 94 b8 12 	call	0x2570	; 0x2570 <vTaskSwitchContext>
	}

	portRESTORE_CONTEXT();
    150c:	a0 91 84 08 	lds	r26, 0x0884	; 0x800884 <pxCurrentTCB>
    1510:	b0 91 85 08 	lds	r27, 0x0885	; 0x800885 <pxCurrentTCB+0x1>
    1514:	cd 91       	ld	r28, X+
    1516:	cd bf       	out	0x3d, r28	; 61
    1518:	dd 91       	ld	r29, X+
    151a:	de bf       	out	0x3e, r29	; 62
    151c:	ff 91       	pop	r31
    151e:	ef 91       	pop	r30
    1520:	df 91       	pop	r29
    1522:	cf 91       	pop	r28
    1524:	bf 91       	pop	r27
    1526:	af 91       	pop	r26
    1528:	9f 91       	pop	r25
    152a:	8f 91       	pop	r24
    152c:	7f 91       	pop	r23
    152e:	6f 91       	pop	r22
    1530:	5f 91       	pop	r21
    1532:	4f 91       	pop	r20
    1534:	3f 91       	pop	r19
    1536:	2f 91       	pop	r18
    1538:	1f 91       	pop	r17
    153a:	0f 91       	pop	r16
    153c:	ff 90       	pop	r15
    153e:	ef 90       	pop	r14
    1540:	df 90       	pop	r13
    1542:	cf 90       	pop	r12
    1544:	bf 90       	pop	r11
    1546:	af 90       	pop	r10
    1548:	9f 90       	pop	r9
    154a:	8f 90       	pop	r8
    154c:	7f 90       	pop	r7
    154e:	6f 90       	pop	r6
    1550:	5f 90       	pop	r5
    1552:	4f 90       	pop	r4
    1554:	3f 90       	pop	r3
    1556:	2f 90       	pop	r2
    1558:	1f 90       	pop	r1
    155a:	0f 90       	pop	r0
    155c:	0c be       	out	0x3c, r0	; 60
    155e:	0f 90       	pop	r0
    1560:	0b be       	out	0x3b, r0	; 59
    1562:	0f 90       	pop	r0
    1564:	0f be       	out	0x3f, r0	; 63
    1566:	0f 90       	pop	r0

	__asm__ __volatile__ ( "ret" );
    1568:	08 95       	ret

0000156a <__vector_12>:
	 */
//	ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
	ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
	ISR(portSCHEDULER_ISR)
	{
		vPortYieldFromTick();
    156a:	9b df       	rcall	.-202    	; 0x14a2 <vPortYieldFromTick>
		__asm__ __volatile__ ( "reti" );
    156c:	18 95       	reti

0000156e <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    156e:	0f b6       	in	r0, 0x3f	; 63
    1570:	f8 94       	cli
    1572:	0f 92       	push	r0
    1574:	fc 01       	movw	r30, r24
    1576:	92 8d       	ldd	r25, Z+26	; 0x1a
    1578:	0f 90       	pop	r0
    157a:	0f be       	out	0x3f, r0	; 63
    157c:	81 e0       	ldi	r24, 0x01	; 1
    157e:	91 11       	cpse	r25, r1
    1580:	80 e0       	ldi	r24, 0x00	; 0
    1582:	08 95       	ret

00001584 <prvCopyDataToQueue>:
    1584:	0f 93       	push	r16
    1586:	1f 93       	push	r17
    1588:	cf 93       	push	r28
    158a:	df 93       	push	r29
    158c:	ec 01       	movw	r28, r24
    158e:	04 2f       	mov	r16, r20
    1590:	1a 8d       	ldd	r17, Y+26	; 0x1a
    1592:	4c 8d       	ldd	r20, Y+28	; 0x1c
    1594:	41 11       	cpse	r20, r1
    1596:	0c c0       	rjmp	.+24     	; 0x15b0 <prvCopyDataToQueue+0x2c>
    1598:	88 81       	ld	r24, Y
    159a:	99 81       	ldd	r25, Y+1	; 0x01
    159c:	89 2b       	or	r24, r25
    159e:	09 f0       	breq	.+2      	; 0x15a2 <prvCopyDataToQueue+0x1e>
    15a0:	42 c0       	rjmp	.+132    	; 0x1626 <prvCopyDataToQueue+0xa2>
    15a2:	8c 81       	ldd	r24, Y+4	; 0x04
    15a4:	9d 81       	ldd	r25, Y+5	; 0x05
    15a6:	0e 94 11 14 	call	0x2822	; 0x2822 <xTaskPriorityDisinherit>
    15aa:	1d 82       	std	Y+5, r1	; 0x05
    15ac:	1c 82       	std	Y+4, r1	; 0x04
    15ae:	42 c0       	rjmp	.+132    	; 0x1634 <prvCopyDataToQueue+0xb0>
    15b0:	01 11       	cpse	r16, r1
    15b2:	17 c0       	rjmp	.+46     	; 0x15e2 <prvCopyDataToQueue+0x5e>
    15b4:	50 e0       	ldi	r21, 0x00	; 0
    15b6:	8a 81       	ldd	r24, Y+2	; 0x02
    15b8:	9b 81       	ldd	r25, Y+3	; 0x03
    15ba:	0e 94 fc 17 	call	0x2ff8	; 0x2ff8 <memcpy>
    15be:	2c 8d       	ldd	r18, Y+28	; 0x1c
    15c0:	8a 81       	ldd	r24, Y+2	; 0x02
    15c2:	9b 81       	ldd	r25, Y+3	; 0x03
    15c4:	82 0f       	add	r24, r18
    15c6:	91 1d       	adc	r25, r1
    15c8:	9b 83       	std	Y+3, r25	; 0x03
    15ca:	8a 83       	std	Y+2, r24	; 0x02
    15cc:	2c 81       	ldd	r18, Y+4	; 0x04
    15ce:	3d 81       	ldd	r19, Y+5	; 0x05
    15d0:	82 17       	cp	r24, r18
    15d2:	93 07       	cpc	r25, r19
    15d4:	50 f1       	brcs	.+84     	; 0x162a <prvCopyDataToQueue+0xa6>
    15d6:	88 81       	ld	r24, Y
    15d8:	99 81       	ldd	r25, Y+1	; 0x01
    15da:	9b 83       	std	Y+3, r25	; 0x03
    15dc:	8a 83       	std	Y+2, r24	; 0x02
    15de:	80 e0       	ldi	r24, 0x00	; 0
    15e0:	29 c0       	rjmp	.+82     	; 0x1634 <prvCopyDataToQueue+0xb0>
    15e2:	50 e0       	ldi	r21, 0x00	; 0
    15e4:	8e 81       	ldd	r24, Y+6	; 0x06
    15e6:	9f 81       	ldd	r25, Y+7	; 0x07
    15e8:	0e 94 fc 17 	call	0x2ff8	; 0x2ff8 <memcpy>
    15ec:	8c 8d       	ldd	r24, Y+28	; 0x1c
    15ee:	90 e0       	ldi	r25, 0x00	; 0
    15f0:	91 95       	neg	r25
    15f2:	81 95       	neg	r24
    15f4:	91 09       	sbc	r25, r1
    15f6:	2e 81       	ldd	r18, Y+6	; 0x06
    15f8:	3f 81       	ldd	r19, Y+7	; 0x07
    15fa:	28 0f       	add	r18, r24
    15fc:	39 1f       	adc	r19, r25
    15fe:	3f 83       	std	Y+7, r19	; 0x07
    1600:	2e 83       	std	Y+6, r18	; 0x06
    1602:	48 81       	ld	r20, Y
    1604:	59 81       	ldd	r21, Y+1	; 0x01
    1606:	24 17       	cp	r18, r20
    1608:	35 07       	cpc	r19, r21
    160a:	30 f4       	brcc	.+12     	; 0x1618 <prvCopyDataToQueue+0x94>
    160c:	2c 81       	ldd	r18, Y+4	; 0x04
    160e:	3d 81       	ldd	r19, Y+5	; 0x05
    1610:	82 0f       	add	r24, r18
    1612:	93 1f       	adc	r25, r19
    1614:	9f 83       	std	Y+7, r25	; 0x07
    1616:	8e 83       	std	Y+6, r24	; 0x06
    1618:	02 30       	cpi	r16, 0x02	; 2
    161a:	49 f4       	brne	.+18     	; 0x162e <prvCopyDataToQueue+0xaa>
    161c:	11 23       	and	r17, r17
    161e:	49 f0       	breq	.+18     	; 0x1632 <prvCopyDataToQueue+0xae>
    1620:	11 50       	subi	r17, 0x01	; 1
    1622:	80 e0       	ldi	r24, 0x00	; 0
    1624:	07 c0       	rjmp	.+14     	; 0x1634 <prvCopyDataToQueue+0xb0>
    1626:	80 e0       	ldi	r24, 0x00	; 0
    1628:	05 c0       	rjmp	.+10     	; 0x1634 <prvCopyDataToQueue+0xb0>
    162a:	80 e0       	ldi	r24, 0x00	; 0
    162c:	03 c0       	rjmp	.+6      	; 0x1634 <prvCopyDataToQueue+0xb0>
    162e:	80 e0       	ldi	r24, 0x00	; 0
    1630:	01 c0       	rjmp	.+2      	; 0x1634 <prvCopyDataToQueue+0xb0>
    1632:	80 e0       	ldi	r24, 0x00	; 0
    1634:	1f 5f       	subi	r17, 0xFF	; 255
    1636:	1a 8f       	std	Y+26, r17	; 0x1a
    1638:	df 91       	pop	r29
    163a:	cf 91       	pop	r28
    163c:	1f 91       	pop	r17
    163e:	0f 91       	pop	r16
    1640:	08 95       	ret

00001642 <prvCopyDataFromQueue>:
    1642:	fc 01       	movw	r30, r24
    1644:	44 8d       	ldd	r20, Z+28	; 0x1c
    1646:	44 23       	and	r20, r20
    1648:	a9 f0       	breq	.+42     	; 0x1674 <prvCopyDataFromQueue+0x32>
    164a:	50 e0       	ldi	r21, 0x00	; 0
    164c:	26 81       	ldd	r18, Z+6	; 0x06
    164e:	37 81       	ldd	r19, Z+7	; 0x07
    1650:	24 0f       	add	r18, r20
    1652:	35 1f       	adc	r19, r21
    1654:	37 83       	std	Z+7, r19	; 0x07
    1656:	26 83       	std	Z+6, r18	; 0x06
    1658:	84 81       	ldd	r24, Z+4	; 0x04
    165a:	95 81       	ldd	r25, Z+5	; 0x05
    165c:	28 17       	cp	r18, r24
    165e:	39 07       	cpc	r19, r25
    1660:	20 f0       	brcs	.+8      	; 0x166a <prvCopyDataFromQueue+0x28>
    1662:	80 81       	ld	r24, Z
    1664:	91 81       	ldd	r25, Z+1	; 0x01
    1666:	97 83       	std	Z+7, r25	; 0x07
    1668:	86 83       	std	Z+6, r24	; 0x06
    166a:	cb 01       	movw	r24, r22
    166c:	66 81       	ldd	r22, Z+6	; 0x06
    166e:	77 81       	ldd	r23, Z+7	; 0x07
    1670:	0c 94 fc 17 	jmp	0x2ff8	; 0x2ff8 <memcpy>
    1674:	08 95       	ret

00001676 <prvUnlockQueue>:
    1676:	ef 92       	push	r14
    1678:	ff 92       	push	r15
    167a:	0f 93       	push	r16
    167c:	1f 93       	push	r17
    167e:	cf 93       	push	r28
    1680:	8c 01       	movw	r16, r24
    1682:	0f b6       	in	r0, 0x3f	; 63
    1684:	f8 94       	cli
    1686:	0f 92       	push	r0
    1688:	fc 01       	movw	r30, r24
    168a:	c6 8d       	ldd	r28, Z+30	; 0x1e
    168c:	1c 16       	cp	r1, r28
    168e:	ac f4       	brge	.+42     	; 0x16ba <prvUnlockQueue+0x44>
    1690:	81 89       	ldd	r24, Z+17	; 0x11
    1692:	81 11       	cpse	r24, r1
    1694:	06 c0       	rjmp	.+12     	; 0x16a2 <prvUnlockQueue+0x2c>
    1696:	11 c0       	rjmp	.+34     	; 0x16ba <prvUnlockQueue+0x44>
    1698:	f8 01       	movw	r30, r16
    169a:	81 89       	ldd	r24, Z+17	; 0x11
    169c:	81 11       	cpse	r24, r1
    169e:	05 c0       	rjmp	.+10     	; 0x16aa <prvUnlockQueue+0x34>
    16a0:	0c c0       	rjmp	.+24     	; 0x16ba <prvUnlockQueue+0x44>
    16a2:	78 01       	movw	r14, r16
    16a4:	f1 e1       	ldi	r31, 0x11	; 17
    16a6:	ef 0e       	add	r14, r31
    16a8:	f1 1c       	adc	r15, r1
    16aa:	c7 01       	movw	r24, r14
    16ac:	0e 94 62 13 	call	0x26c4	; 0x26c4 <xTaskRemoveFromEventList>
    16b0:	81 11       	cpse	r24, r1
    16b2:	0e 94 fa 13 	call	0x27f4	; 0x27f4 <vTaskMissedYield>
    16b6:	c1 50       	subi	r28, 0x01	; 1
    16b8:	79 f7       	brne	.-34     	; 0x1698 <prvUnlockQueue+0x22>
    16ba:	8f ef       	ldi	r24, 0xFF	; 255
    16bc:	f8 01       	movw	r30, r16
    16be:	86 8f       	std	Z+30, r24	; 0x1e
    16c0:	0f 90       	pop	r0
    16c2:	0f be       	out	0x3f, r0	; 63
    16c4:	0f b6       	in	r0, 0x3f	; 63
    16c6:	f8 94       	cli
    16c8:	0f 92       	push	r0
    16ca:	c5 8d       	ldd	r28, Z+29	; 0x1d
    16cc:	1c 16       	cp	r1, r28
    16ce:	a4 f4       	brge	.+40     	; 0x16f8 <prvUnlockQueue+0x82>
    16d0:	80 85       	ldd	r24, Z+8	; 0x08
    16d2:	81 11       	cpse	r24, r1
    16d4:	06 c0       	rjmp	.+12     	; 0x16e2 <prvUnlockQueue+0x6c>
    16d6:	10 c0       	rjmp	.+32     	; 0x16f8 <prvUnlockQueue+0x82>
    16d8:	f8 01       	movw	r30, r16
    16da:	80 85       	ldd	r24, Z+8	; 0x08
    16dc:	81 11       	cpse	r24, r1
    16de:	05 c0       	rjmp	.+10     	; 0x16ea <prvUnlockQueue+0x74>
    16e0:	0b c0       	rjmp	.+22     	; 0x16f8 <prvUnlockQueue+0x82>
    16e2:	78 01       	movw	r14, r16
    16e4:	f8 e0       	ldi	r31, 0x08	; 8
    16e6:	ef 0e       	add	r14, r31
    16e8:	f1 1c       	adc	r15, r1
    16ea:	c7 01       	movw	r24, r14
    16ec:	eb d7       	rcall	.+4054   	; 0x26c4 <xTaskRemoveFromEventList>
    16ee:	81 11       	cpse	r24, r1
    16f0:	0e 94 fa 13 	call	0x27f4	; 0x27f4 <vTaskMissedYield>
    16f4:	c1 50       	subi	r28, 0x01	; 1
    16f6:	81 f7       	brne	.-32     	; 0x16d8 <prvUnlockQueue+0x62>
    16f8:	8f ef       	ldi	r24, 0xFF	; 255
    16fa:	f8 01       	movw	r30, r16
    16fc:	85 8f       	std	Z+29, r24	; 0x1d
    16fe:	0f 90       	pop	r0
    1700:	0f be       	out	0x3f, r0	; 63
    1702:	cf 91       	pop	r28
    1704:	1f 91       	pop	r17
    1706:	0f 91       	pop	r16
    1708:	ff 90       	pop	r15
    170a:	ef 90       	pop	r14
    170c:	08 95       	ret

0000170e <xQueueGenericReset>:
    170e:	cf 93       	push	r28
    1710:	df 93       	push	r29
    1712:	ec 01       	movw	r28, r24
    1714:	0f b6       	in	r0, 0x3f	; 63
    1716:	f8 94       	cli
    1718:	0f 92       	push	r0
    171a:	e8 81       	ld	r30, Y
    171c:	f9 81       	ldd	r31, Y+1	; 0x01
    171e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1720:	2c 8d       	ldd	r18, Y+28	; 0x1c
    1722:	90 e0       	ldi	r25, 0x00	; 0
    1724:	30 e0       	ldi	r19, 0x00	; 0
    1726:	82 9f       	mul	r24, r18
    1728:	a0 01       	movw	r20, r0
    172a:	83 9f       	mul	r24, r19
    172c:	50 0d       	add	r21, r0
    172e:	92 9f       	mul	r25, r18
    1730:	50 0d       	add	r21, r0
    1732:	11 24       	eor	r1, r1
    1734:	4e 0f       	add	r20, r30
    1736:	5f 1f       	adc	r21, r31
    1738:	5d 83       	std	Y+5, r21	; 0x05
    173a:	4c 83       	std	Y+4, r20	; 0x04
    173c:	1a 8e       	std	Y+26, r1	; 0x1a
    173e:	fb 83       	std	Y+3, r31	; 0x03
    1740:	ea 83       	std	Y+2, r30	; 0x02
    1742:	01 97       	sbiw	r24, 0x01	; 1
    1744:	82 9f       	mul	r24, r18
    1746:	a0 01       	movw	r20, r0
    1748:	83 9f       	mul	r24, r19
    174a:	50 0d       	add	r21, r0
    174c:	92 9f       	mul	r25, r18
    174e:	50 0d       	add	r21, r0
    1750:	11 24       	eor	r1, r1
    1752:	cf 01       	movw	r24, r30
    1754:	84 0f       	add	r24, r20
    1756:	95 1f       	adc	r25, r21
    1758:	9f 83       	std	Y+7, r25	; 0x07
    175a:	8e 83       	std	Y+6, r24	; 0x06
    175c:	8f ef       	ldi	r24, 0xFF	; 255
    175e:	8d 8f       	std	Y+29, r24	; 0x1d
    1760:	8e 8f       	std	Y+30, r24	; 0x1e
    1762:	61 11       	cpse	r22, r1
    1764:	0a c0       	rjmp	.+20     	; 0x177a <xQueueGenericReset+0x6c>
    1766:	88 85       	ldd	r24, Y+8	; 0x08
    1768:	88 23       	and	r24, r24
    176a:	69 f0       	breq	.+26     	; 0x1786 <xQueueGenericReset+0x78>
    176c:	ce 01       	movw	r24, r28
    176e:	08 96       	adiw	r24, 0x08	; 8
    1770:	a9 d7       	rcall	.+3922   	; 0x26c4 <xTaskRemoveFromEventList>
    1772:	88 23       	and	r24, r24
    1774:	41 f0       	breq	.+16     	; 0x1786 <xQueueGenericReset+0x78>
    1776:	34 de       	rcall	.-920    	; 0x13e0 <vPortYield>
    1778:	06 c0       	rjmp	.+12     	; 0x1786 <xQueueGenericReset+0x78>
    177a:	ce 01       	movw	r24, r28
    177c:	08 96       	adiw	r24, 0x08	; 8
    177e:	f7 dc       	rcall	.-1554   	; 0x116e <vListInitialise>
    1780:	ce 01       	movw	r24, r28
    1782:	41 96       	adiw	r24, 0x11	; 17
    1784:	f4 dc       	rcall	.-1560   	; 0x116e <vListInitialise>
    1786:	0f 90       	pop	r0
    1788:	0f be       	out	0x3f, r0	; 63
    178a:	81 e0       	ldi	r24, 0x01	; 1
    178c:	df 91       	pop	r29
    178e:	cf 91       	pop	r28
    1790:	08 95       	ret

00001792 <xQueueGenericCreateStatic>:
    1792:	cf 93       	push	r28
    1794:	df 93       	push	r29
    1796:	e9 01       	movw	r28, r18
    1798:	20 97       	sbiw	r28, 0x00	; 0
    179a:	61 f0       	breq	.+24     	; 0x17b4 <xQueueGenericCreateStatic+0x22>
    179c:	61 11       	cpse	r22, r1
    179e:	03 c0       	rjmp	.+6      	; 0x17a6 <xQueueGenericCreateStatic+0x14>
    17a0:	39 83       	std	Y+1, r19	; 0x01
    17a2:	28 83       	st	Y, r18
    17a4:	02 c0       	rjmp	.+4      	; 0x17aa <xQueueGenericCreateStatic+0x18>
    17a6:	59 83       	std	Y+1, r21	; 0x01
    17a8:	48 83       	st	Y, r20
    17aa:	8b 8f       	std	Y+27, r24	; 0x1b
    17ac:	6c 8f       	std	Y+28, r22	; 0x1c
    17ae:	61 e0       	ldi	r22, 0x01	; 1
    17b0:	ce 01       	movw	r24, r28
    17b2:	ad df       	rcall	.-166    	; 0x170e <xQueueGenericReset>
    17b4:	ce 01       	movw	r24, r28
    17b6:	df 91       	pop	r29
    17b8:	cf 91       	pop	r28
    17ba:	08 95       	ret

000017bc <xQueueGenericSend>:
    17bc:	9f 92       	push	r9
    17be:	af 92       	push	r10
    17c0:	bf 92       	push	r11
    17c2:	cf 92       	push	r12
    17c4:	df 92       	push	r13
    17c6:	ef 92       	push	r14
    17c8:	ff 92       	push	r15
    17ca:	0f 93       	push	r16
    17cc:	1f 93       	push	r17
    17ce:	cf 93       	push	r28
    17d0:	df 93       	push	r29
    17d2:	00 d0       	rcall	.+0      	; 0x17d4 <xQueueGenericSend+0x18>
    17d4:	1f 92       	push	r1
    17d6:	1f 92       	push	r1
    17d8:	cd b7       	in	r28, 0x3d	; 61
    17da:	de b7       	in	r29, 0x3e	; 62
    17dc:	8c 01       	movw	r16, r24
    17de:	6b 01       	movw	r12, r22
    17e0:	5d 83       	std	Y+5, r21	; 0x05
    17e2:	4c 83       	std	Y+4, r20	; 0x04
    17e4:	a2 2e       	mov	r10, r18
    17e6:	b1 2c       	mov	r11, r1
    17e8:	99 24       	eor	r9, r9
    17ea:	93 94       	inc	r9
    17ec:	7c 01       	movw	r14, r24
    17ee:	88 e0       	ldi	r24, 0x08	; 8
    17f0:	e8 0e       	add	r14, r24
    17f2:	f1 1c       	adc	r15, r1
    17f4:	0f b6       	in	r0, 0x3f	; 63
    17f6:	f8 94       	cli
    17f8:	0f 92       	push	r0
    17fa:	f8 01       	movw	r30, r16
    17fc:	92 8d       	ldd	r25, Z+26	; 0x1a
    17fe:	83 8d       	ldd	r24, Z+27	; 0x1b
    1800:	98 17       	cp	r25, r24
    1802:	18 f0       	brcs	.+6      	; 0x180a <xQueueGenericSend+0x4e>
    1804:	f2 e0       	ldi	r31, 0x02	; 2
    1806:	af 12       	cpse	r10, r31
    1808:	15 c0       	rjmp	.+42     	; 0x1834 <xQueueGenericSend+0x78>
    180a:	4a 2d       	mov	r20, r10
    180c:	b6 01       	movw	r22, r12
    180e:	c8 01       	movw	r24, r16
    1810:	b9 de       	rcall	.-654    	; 0x1584 <prvCopyDataToQueue>
    1812:	f8 01       	movw	r30, r16
    1814:	91 89       	ldd	r25, Z+17	; 0x11
    1816:	99 23       	and	r25, r25
    1818:	39 f0       	breq	.+14     	; 0x1828 <xQueueGenericSend+0x6c>
    181a:	c8 01       	movw	r24, r16
    181c:	41 96       	adiw	r24, 0x11	; 17
    181e:	52 d7       	rcall	.+3748   	; 0x26c4 <xTaskRemoveFromEventList>
    1820:	88 23       	and	r24, r24
    1822:	21 f0       	breq	.+8      	; 0x182c <xQueueGenericSend+0x70>
    1824:	dd dd       	rcall	.-1094   	; 0x13e0 <vPortYield>
    1826:	02 c0       	rjmp	.+4      	; 0x182c <xQueueGenericSend+0x70>
    1828:	81 11       	cpse	r24, r1
    182a:	da dd       	rcall	.-1100   	; 0x13e0 <vPortYield>
    182c:	0f 90       	pop	r0
    182e:	0f be       	out	0x3f, r0	; 63
    1830:	81 e0       	ldi	r24, 0x01	; 1
    1832:	45 c0       	rjmp	.+138    	; 0x18be <xQueueGenericSend+0x102>
    1834:	8c 81       	ldd	r24, Y+4	; 0x04
    1836:	9d 81       	ldd	r25, Y+5	; 0x05
    1838:	89 2b       	or	r24, r25
    183a:	21 f4       	brne	.+8      	; 0x1844 <xQueueGenericSend+0x88>
    183c:	0f 90       	pop	r0
    183e:	0f be       	out	0x3f, r0	; 63
    1840:	80 e0       	ldi	r24, 0x00	; 0
    1842:	3d c0       	rjmp	.+122    	; 0x18be <xQueueGenericSend+0x102>
    1844:	b1 10       	cpse	r11, r1
    1846:	04 c0       	rjmp	.+8      	; 0x1850 <xQueueGenericSend+0x94>
    1848:	ce 01       	movw	r24, r28
    184a:	01 96       	adiw	r24, 0x01	; 1
    184c:	93 d7       	rcall	.+3878   	; 0x2774 <vTaskInternalSetTimeOutState>
    184e:	b9 2c       	mov	r11, r9
    1850:	0f 90       	pop	r0
    1852:	0f be       	out	0x3f, r0	; 63
    1854:	35 d5       	rcall	.+2666   	; 0x22c0 <vTaskSuspendAll>
    1856:	0f b6       	in	r0, 0x3f	; 63
    1858:	f8 94       	cli
    185a:	0f 92       	push	r0
    185c:	f8 01       	movw	r30, r16
    185e:	85 8d       	ldd	r24, Z+29	; 0x1d
    1860:	8f 3f       	cpi	r24, 0xFF	; 255
    1862:	09 f4       	brne	.+2      	; 0x1866 <xQueueGenericSend+0xaa>
    1864:	15 8e       	std	Z+29, r1	; 0x1d
    1866:	f8 01       	movw	r30, r16
    1868:	86 8d       	ldd	r24, Z+30	; 0x1e
    186a:	8f 3f       	cpi	r24, 0xFF	; 255
    186c:	09 f4       	brne	.+2      	; 0x1870 <xQueueGenericSend+0xb4>
    186e:	16 8e       	std	Z+30, r1	; 0x1e
    1870:	0f 90       	pop	r0
    1872:	0f be       	out	0x3f, r0	; 63
    1874:	be 01       	movw	r22, r28
    1876:	6c 5f       	subi	r22, 0xFC	; 252
    1878:	7f 4f       	sbci	r23, 0xFF	; 255
    187a:	ce 01       	movw	r24, r28
    187c:	01 96       	adiw	r24, 0x01	; 1
    187e:	85 d7       	rcall	.+3850   	; 0x278a <xTaskCheckForTimeOut>
    1880:	81 11       	cpse	r24, r1
    1882:	19 c0       	rjmp	.+50     	; 0x18b6 <xQueueGenericSend+0xfa>
    1884:	0f b6       	in	r0, 0x3f	; 63
    1886:	f8 94       	cli
    1888:	0f 92       	push	r0
    188a:	f8 01       	movw	r30, r16
    188c:	92 8d       	ldd	r25, Z+26	; 0x1a
    188e:	83 8d       	ldd	r24, Z+27	; 0x1b
    1890:	0f 90       	pop	r0
    1892:	0f be       	out	0x3f, r0	; 63
    1894:	98 13       	cpse	r25, r24
    1896:	0b c0       	rjmp	.+22     	; 0x18ae <xQueueGenericSend+0xf2>
    1898:	6c 81       	ldd	r22, Y+4	; 0x04
    189a:	7d 81       	ldd	r23, Y+5	; 0x05
    189c:	c7 01       	movw	r24, r14
    189e:	e9 d6       	rcall	.+3538   	; 0x2672 <vTaskPlaceOnEventList>
    18a0:	c8 01       	movw	r24, r16
    18a2:	e9 de       	rcall	.-558    	; 0x1676 <prvUnlockQueue>
    18a4:	d7 d5       	rcall	.+2990   	; 0x2454 <xTaskResumeAll>
    18a6:	81 11       	cpse	r24, r1
    18a8:	a5 cf       	rjmp	.-182    	; 0x17f4 <xQueueGenericSend+0x38>
    18aa:	9a dd       	rcall	.-1228   	; 0x13e0 <vPortYield>
    18ac:	a3 cf       	rjmp	.-186    	; 0x17f4 <xQueueGenericSend+0x38>
    18ae:	c8 01       	movw	r24, r16
    18b0:	e2 de       	rcall	.-572    	; 0x1676 <prvUnlockQueue>
    18b2:	d0 d5       	rcall	.+2976   	; 0x2454 <xTaskResumeAll>
    18b4:	9f cf       	rjmp	.-194    	; 0x17f4 <xQueueGenericSend+0x38>
    18b6:	c8 01       	movw	r24, r16
    18b8:	de de       	rcall	.-580    	; 0x1676 <prvUnlockQueue>
    18ba:	cc d5       	rcall	.+2968   	; 0x2454 <xTaskResumeAll>
    18bc:	80 e0       	ldi	r24, 0x00	; 0
    18be:	0f 90       	pop	r0
    18c0:	0f 90       	pop	r0
    18c2:	0f 90       	pop	r0
    18c4:	0f 90       	pop	r0
    18c6:	0f 90       	pop	r0
    18c8:	df 91       	pop	r29
    18ca:	cf 91       	pop	r28
    18cc:	1f 91       	pop	r17
    18ce:	0f 91       	pop	r16
    18d0:	ff 90       	pop	r15
    18d2:	ef 90       	pop	r14
    18d4:	df 90       	pop	r13
    18d6:	cf 90       	pop	r12
    18d8:	bf 90       	pop	r11
    18da:	af 90       	pop	r10
    18dc:	9f 90       	pop	r9
    18de:	08 95       	ret

000018e0 <xQueueGenericSendFromISR>:
    18e0:	ef 92       	push	r14
    18e2:	ff 92       	push	r15
    18e4:	0f 93       	push	r16
    18e6:	1f 93       	push	r17
    18e8:	cf 93       	push	r28
    18ea:	df 93       	push	r29
    18ec:	8a 01       	movw	r16, r20
    18ee:	fc 01       	movw	r30, r24
    18f0:	52 8d       	ldd	r21, Z+26	; 0x1a
    18f2:	33 8d       	ldd	r19, Z+27	; 0x1b
    18f4:	53 17       	cp	r21, r19
    18f6:	10 f0       	brcs	.+4      	; 0x18fc <xQueueGenericSendFromISR+0x1c>
    18f8:	22 30       	cpi	r18, 0x02	; 2
    18fa:	e1 f4       	brne	.+56     	; 0x1934 <xQueueGenericSendFromISR+0x54>
    18fc:	42 2f       	mov	r20, r18
    18fe:	78 01       	movw	r14, r16
    1900:	ec 01       	movw	r28, r24
    1902:	1e 8d       	ldd	r17, Y+30	; 0x1e
    1904:	3f de       	rcall	.-898    	; 0x1584 <prvCopyDataToQueue>
    1906:	1f 3f       	cpi	r17, 0xFF	; 255
    1908:	79 f4       	brne	.+30     	; 0x1928 <xQueueGenericSendFromISR+0x48>
    190a:	89 89       	ldd	r24, Y+17	; 0x11
    190c:	88 23       	and	r24, r24
    190e:	a1 f0       	breq	.+40     	; 0x1938 <xQueueGenericSendFromISR+0x58>
    1910:	ce 01       	movw	r24, r28
    1912:	41 96       	adiw	r24, 0x11	; 17
    1914:	d7 d6       	rcall	.+3502   	; 0x26c4 <xTaskRemoveFromEventList>
    1916:	88 23       	and	r24, r24
    1918:	89 f0       	breq	.+34     	; 0x193c <xQueueGenericSendFromISR+0x5c>
    191a:	e1 14       	cp	r14, r1
    191c:	f1 04       	cpc	r15, r1
    191e:	81 f0       	breq	.+32     	; 0x1940 <xQueueGenericSendFromISR+0x60>
    1920:	81 e0       	ldi	r24, 0x01	; 1
    1922:	f7 01       	movw	r30, r14
    1924:	80 83       	st	Z, r24
    1926:	0d c0       	rjmp	.+26     	; 0x1942 <xQueueGenericSendFromISR+0x62>
    1928:	ff 24       	eor	r15, r15
    192a:	f3 94       	inc	r15
    192c:	f1 0e       	add	r15, r17
    192e:	fe 8e       	std	Y+30, r15	; 0x1e
    1930:	81 e0       	ldi	r24, 0x01	; 1
    1932:	07 c0       	rjmp	.+14     	; 0x1942 <xQueueGenericSendFromISR+0x62>
    1934:	80 e0       	ldi	r24, 0x00	; 0
    1936:	05 c0       	rjmp	.+10     	; 0x1942 <xQueueGenericSendFromISR+0x62>
    1938:	81 e0       	ldi	r24, 0x01	; 1
    193a:	03 c0       	rjmp	.+6      	; 0x1942 <xQueueGenericSendFromISR+0x62>
    193c:	81 e0       	ldi	r24, 0x01	; 1
    193e:	01 c0       	rjmp	.+2      	; 0x1942 <xQueueGenericSendFromISR+0x62>
    1940:	81 e0       	ldi	r24, 0x01	; 1
    1942:	df 91       	pop	r29
    1944:	cf 91       	pop	r28
    1946:	1f 91       	pop	r17
    1948:	0f 91       	pop	r16
    194a:	ff 90       	pop	r15
    194c:	ef 90       	pop	r14
    194e:	08 95       	ret

00001950 <xQueueReceive>:
    1950:	9f 92       	push	r9
    1952:	af 92       	push	r10
    1954:	bf 92       	push	r11
    1956:	cf 92       	push	r12
    1958:	df 92       	push	r13
    195a:	ef 92       	push	r14
    195c:	ff 92       	push	r15
    195e:	0f 93       	push	r16
    1960:	1f 93       	push	r17
    1962:	cf 93       	push	r28
    1964:	df 93       	push	r29
    1966:	00 d0       	rcall	.+0      	; 0x1968 <xQueueReceive+0x18>
    1968:	1f 92       	push	r1
    196a:	1f 92       	push	r1
    196c:	cd b7       	in	r28, 0x3d	; 61
    196e:	de b7       	in	r29, 0x3e	; 62
    1970:	8c 01       	movw	r16, r24
    1972:	5b 01       	movw	r10, r22
    1974:	5d 83       	std	Y+5, r21	; 0x05
    1976:	4c 83       	std	Y+4, r20	; 0x04
    1978:	e1 2c       	mov	r14, r1
    197a:	99 24       	eor	r9, r9
    197c:	93 94       	inc	r9
    197e:	6c 01       	movw	r12, r24
    1980:	81 e1       	ldi	r24, 0x11	; 17
    1982:	c8 0e       	add	r12, r24
    1984:	d1 1c       	adc	r13, r1
    1986:	0f b6       	in	r0, 0x3f	; 63
    1988:	f8 94       	cli
    198a:	0f 92       	push	r0
    198c:	f8 01       	movw	r30, r16
    198e:	f2 8c       	ldd	r15, Z+26	; 0x1a
    1990:	ff 20       	and	r15, r15
    1992:	91 f0       	breq	.+36     	; 0x19b8 <xQueueReceive+0x68>
    1994:	b5 01       	movw	r22, r10
    1996:	c8 01       	movw	r24, r16
    1998:	54 de       	rcall	.-856    	; 0x1642 <prvCopyDataFromQueue>
    199a:	fa 94       	dec	r15
    199c:	f8 01       	movw	r30, r16
    199e:	f2 8e       	std	Z+26, r15	; 0x1a
    19a0:	80 85       	ldd	r24, Z+8	; 0x08
    19a2:	88 23       	and	r24, r24
    19a4:	29 f0       	breq	.+10     	; 0x19b0 <xQueueReceive+0x60>
    19a6:	c8 01       	movw	r24, r16
    19a8:	08 96       	adiw	r24, 0x08	; 8
    19aa:	8c d6       	rcall	.+3352   	; 0x26c4 <xTaskRemoveFromEventList>
    19ac:	81 11       	cpse	r24, r1
    19ae:	18 dd       	rcall	.-1488   	; 0x13e0 <vPortYield>
    19b0:	0f 90       	pop	r0
    19b2:	0f be       	out	0x3f, r0	; 63
    19b4:	81 e0       	ldi	r24, 0x01	; 1
    19b6:	44 c0       	rjmp	.+136    	; 0x1a40 <xQueueReceive+0xf0>
    19b8:	8c 81       	ldd	r24, Y+4	; 0x04
    19ba:	9d 81       	ldd	r25, Y+5	; 0x05
    19bc:	89 2b       	or	r24, r25
    19be:	21 f4       	brne	.+8      	; 0x19c8 <xQueueReceive+0x78>
    19c0:	0f 90       	pop	r0
    19c2:	0f be       	out	0x3f, r0	; 63
    19c4:	80 e0       	ldi	r24, 0x00	; 0
    19c6:	3c c0       	rjmp	.+120    	; 0x1a40 <xQueueReceive+0xf0>
    19c8:	e1 10       	cpse	r14, r1
    19ca:	04 c0       	rjmp	.+8      	; 0x19d4 <xQueueReceive+0x84>
    19cc:	ce 01       	movw	r24, r28
    19ce:	01 96       	adiw	r24, 0x01	; 1
    19d0:	d1 d6       	rcall	.+3490   	; 0x2774 <vTaskInternalSetTimeOutState>
    19d2:	e9 2c       	mov	r14, r9
    19d4:	0f 90       	pop	r0
    19d6:	0f be       	out	0x3f, r0	; 63
    19d8:	73 d4       	rcall	.+2278   	; 0x22c0 <vTaskSuspendAll>
    19da:	0f b6       	in	r0, 0x3f	; 63
    19dc:	f8 94       	cli
    19de:	0f 92       	push	r0
    19e0:	f8 01       	movw	r30, r16
    19e2:	85 8d       	ldd	r24, Z+29	; 0x1d
    19e4:	8f 3f       	cpi	r24, 0xFF	; 255
    19e6:	09 f4       	brne	.+2      	; 0x19ea <xQueueReceive+0x9a>
    19e8:	15 8e       	std	Z+29, r1	; 0x1d
    19ea:	f8 01       	movw	r30, r16
    19ec:	86 8d       	ldd	r24, Z+30	; 0x1e
    19ee:	8f 3f       	cpi	r24, 0xFF	; 255
    19f0:	09 f4       	brne	.+2      	; 0x19f4 <xQueueReceive+0xa4>
    19f2:	16 8e       	std	Z+30, r1	; 0x1e
    19f4:	0f 90       	pop	r0
    19f6:	0f be       	out	0x3f, r0	; 63
    19f8:	be 01       	movw	r22, r28
    19fa:	6c 5f       	subi	r22, 0xFC	; 252
    19fc:	7f 4f       	sbci	r23, 0xFF	; 255
    19fe:	ce 01       	movw	r24, r28
    1a00:	01 96       	adiw	r24, 0x01	; 1
    1a02:	c3 d6       	rcall	.+3462   	; 0x278a <xTaskCheckForTimeOut>
    1a04:	81 11       	cpse	r24, r1
    1a06:	13 c0       	rjmp	.+38     	; 0x1a2e <xQueueReceive+0xde>
    1a08:	c8 01       	movw	r24, r16
    1a0a:	b1 dd       	rcall	.-1182   	; 0x156e <prvIsQueueEmpty>
    1a0c:	88 23       	and	r24, r24
    1a0e:	59 f0       	breq	.+22     	; 0x1a26 <xQueueReceive+0xd6>
    1a10:	6c 81       	ldd	r22, Y+4	; 0x04
    1a12:	7d 81       	ldd	r23, Y+5	; 0x05
    1a14:	c6 01       	movw	r24, r12
    1a16:	2d d6       	rcall	.+3162   	; 0x2672 <vTaskPlaceOnEventList>
    1a18:	c8 01       	movw	r24, r16
    1a1a:	2d de       	rcall	.-934    	; 0x1676 <prvUnlockQueue>
    1a1c:	1b d5       	rcall	.+2614   	; 0x2454 <xTaskResumeAll>
    1a1e:	81 11       	cpse	r24, r1
    1a20:	b2 cf       	rjmp	.-156    	; 0x1986 <xQueueReceive+0x36>
    1a22:	de dc       	rcall	.-1604   	; 0x13e0 <vPortYield>
    1a24:	b0 cf       	rjmp	.-160    	; 0x1986 <xQueueReceive+0x36>
    1a26:	c8 01       	movw	r24, r16
    1a28:	26 de       	rcall	.-948    	; 0x1676 <prvUnlockQueue>
    1a2a:	14 d5       	rcall	.+2600   	; 0x2454 <xTaskResumeAll>
    1a2c:	ac cf       	rjmp	.-168    	; 0x1986 <xQueueReceive+0x36>
    1a2e:	c8 01       	movw	r24, r16
    1a30:	22 de       	rcall	.-956    	; 0x1676 <prvUnlockQueue>
    1a32:	10 d5       	rcall	.+2592   	; 0x2454 <xTaskResumeAll>
    1a34:	c8 01       	movw	r24, r16
    1a36:	9b dd       	rcall	.-1226   	; 0x156e <prvIsQueueEmpty>
    1a38:	88 23       	and	r24, r24
    1a3a:	09 f4       	brne	.+2      	; 0x1a3e <xQueueReceive+0xee>
    1a3c:	a4 cf       	rjmp	.-184    	; 0x1986 <xQueueReceive+0x36>
    1a3e:	80 e0       	ldi	r24, 0x00	; 0
    1a40:	0f 90       	pop	r0
    1a42:	0f 90       	pop	r0
    1a44:	0f 90       	pop	r0
    1a46:	0f 90       	pop	r0
    1a48:	0f 90       	pop	r0
    1a4a:	df 91       	pop	r29
    1a4c:	cf 91       	pop	r28
    1a4e:	1f 91       	pop	r17
    1a50:	0f 91       	pop	r16
    1a52:	ff 90       	pop	r15
    1a54:	ef 90       	pop	r14
    1a56:	df 90       	pop	r13
    1a58:	cf 90       	pop	r12
    1a5a:	bf 90       	pop	r11
    1a5c:	af 90       	pop	r10
    1a5e:	9f 90       	pop	r9
    1a60:	08 95       	ret

00001a62 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
    {
    1a62:	cf 93       	push	r28
    1a64:	df 93       	push	r29
    1a66:	ec 01       	movw	r28, r24
        will not actually cause the task to block, just place it on a blocked
        list.  It will not block until the scheduler is unlocked - at which
        time a yield will be performed.  If an item is added to the queue while
        the queue is locked, and the calling task blocks on the queue, then the
        calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    1a68:	0f b6       	in	r0, 0x3f	; 63
    1a6a:	f8 94       	cli
    1a6c:	0f 92       	push	r0
    1a6e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a70:	8f 3f       	cpi	r24, 0xFF	; 255
    1a72:	09 f4       	brne	.+2      	; 0x1a76 <vQueueWaitForMessageRestricted+0x14>
    1a74:	1d 8e       	std	Y+29, r1	; 0x1d
    1a76:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1a78:	8f 3f       	cpi	r24, 0xFF	; 255
    1a7a:	09 f4       	brne	.+2      	; 0x1a7e <vQueueWaitForMessageRestricted+0x1c>
    1a7c:	1e 8e       	std	Y+30, r1	; 0x1e
    1a7e:	0f 90       	pop	r0
    1a80:	0f be       	out	0x3f, r0	; 63
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    1a82:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1a84:	81 11       	cpse	r24, r1
    1a86:	03 c0       	rjmp	.+6      	; 0x1a8e <vQueueWaitForMessageRestricted+0x2c>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    1a88:	ce 01       	movw	r24, r28
    1a8a:	41 96       	adiw	r24, 0x11	; 17
    1a8c:	03 d6       	rcall	.+3078   	; 0x2694 <vTaskPlaceOnEventListRestricted>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
        prvUnlockQueue( pxQueue );
    1a8e:	ce 01       	movw	r24, r28
    1a90:	f2 dd       	rcall	.-1052   	; 0x1676 <prvUnlockQueue>
    }
    1a92:	df 91       	pop	r29
    1a94:	cf 91       	pop	r28
    1a96:	08 95       	ret

00001a98 <prvBytesInBuffer>:
    }
>>>>>>> 131ed066d936db6cb82dc024f16de69a40fef126


<<<<<<< HEAD
static void LCD_WRITE_Parameters(void){
	Lcd_Write_multiple_data(LCD_START_WRITE_ADDRESS,(uint16_t*)&s_Lcd_data_write,LCD_WRITE_REGS_NUMBER);
    3e1c:	44 e0       	ldi	r20, 0x04	; 4
    3e1e:	be 01       	movw	r22, r28
    3e20:	80 e0       	ldi	r24, 0x00	; 0
    3e22:	9f e0       	ldi	r25, 0x0F	; 15
    3e24:	0e 94 73 02 	call	0x4e6	; 0x4e6 <Lcd_Write_multiple_data>
    3e28:	02 e6       	ldi	r16, 0x62	; 98
    3e2a:	1d e0       	ldi	r17, 0x0D	; 13
    3e2c:	c1 2c       	mov	r12, r1
    3e2e:	d1 2c       	mov	r13, r1
    3e30:	76 01       	movw	r14, r12
    3e32:	c3 94       	inc	r12
		LCD_WRITE_Parameters();
		#ifdef __DEBUG
		Debug_read=(uint16_t*)&s_Lcd_data_read;
			for (uint8_t i=0;i<LCD_DATA_WRITE_ELEMENTS_NUMBER;i++){
				
				UART0_puts("s_Lcd_data_read[");
    3e34:	8c e8       	ldi	r24, 0x8C	; 140
    3e36:	92 e0       	ldi	r25, 0x02	; 2
    3e38:	0e 94 af 0c 	call	0x195e	; 0x195e <UART0_puts>
				UART0_OutUDec(i+1);
    3e3c:	c7 01       	movw	r24, r14
    3e3e:	b6 01       	movw	r22, r12
    3e40:	0e 94 93 0c 	call	0x1926	; 0x1926 <UART0_OutUDec>
				UART0_puts("]= ");
    3e44:	8d e9       	ldi	r24, 0x9D	; 157
    3e46:	92 e0       	ldi	r25, 0x02	; 2
    3e48:	0e 94 af 0c 	call	0x195e	; 0x195e <UART0_puts>
				UART0_OutUDec(Debug_read[i]);
    3e4c:	f8 01       	movw	r30, r16
    3e4e:	61 91       	ld	r22, Z+
    3e50:	71 91       	ld	r23, Z+
    3e52:	8f 01       	movw	r16, r30
    3e54:	80 e0       	ldi	r24, 0x00	; 0
    3e56:	90 e0       	ldi	r25, 0x00	; 0
    3e58:	0e 94 93 0c 	call	0x1926	; 0x1926 <UART0_OutUDec>
				UART0_puts("\n");
    3e5c:	80 e3       	ldi	r24, 0x30	; 48
    3e5e:	92 e0       	ldi	r25, 0x02	; 2
    3e60:	0e 94 af 0c 	call	0x195e	; 0x195e <UART0_puts>
    3e64:	ff ef       	ldi	r31, 0xFF	; 255
    3e66:	cf 1a       	sub	r12, r31
    3e68:	df 0a       	sbc	r13, r31
    3e6a:	ef 0a       	sbc	r14, r31
    3e6c:	ff 0a       	sbc	r15, r31
		#endif
		LCD_READ_Parameters();
		LCD_WRITE_Parameters();
		#ifdef __DEBUG
		Debug_read=(uint16_t*)&s_Lcd_data_read;
			for (uint8_t i=0;i<LCD_DATA_WRITE_ELEMENTS_NUMBER;i++){
    3e6e:	24 e0       	ldi	r18, 0x04	; 4
    3e70:	c2 16       	cp	r12, r18
    3e72:	d1 04       	cpc	r13, r1
    3e74:	e1 04       	cpc	r14, r1
    3e76:	f1 04       	cpc	r15, r1
    3e78:	e9 f6       	brne	.-70     	; 0x3e34 <LCD_main+0x48>
    3e7a:	8f ef       	ldi	r24, 0xFF	; 255
    3e7c:	97 ea       	ldi	r25, 0xA7	; 167
    3e7e:	e1 e6       	ldi	r30, 0x61	; 97
    3e80:	81 50       	subi	r24, 0x01	; 1
    3e82:	90 40       	sbci	r25, 0x00	; 0
    3e84:	e0 40       	sbci	r30, 0x00	; 0
    3e86:	e1 f7       	brne	.-8      	; 0x3e80 <LCD_main+0x94>
    3e88:	00 c0       	rjmp	.+0      	; 0x3e8a <LCD_main+0x9e>
    3e8a:	00 00       	nop
    3e8c:	b1 cf       	rjmp	.-158    	; 0x3df0 <LCD_main+0x4>

00003e8e <crc16_update>:
    3e8e:	86 27       	eor	r24, r22
    3e90:	28 e0       	ldi	r18, 0x08	; 8
    3e92:	30 e0       	ldi	r19, 0x00	; 0
    3e94:	80 ff       	sbrs	r24, 0
    3e96:	07 c0       	rjmp	.+14     	; 0x3ea6 <crc16_update+0x18>
    3e98:	96 95       	lsr	r25
    3e9a:	87 95       	ror	r24
    3e9c:	41 e0       	ldi	r20, 0x01	; 1
    3e9e:	84 27       	eor	r24, r20
    3ea0:	40 ea       	ldi	r20, 0xA0	; 160
    3ea2:	94 27       	eor	r25, r20
    3ea4:	02 c0       	rjmp	.+4      	; 0x3eaa <crc16_update+0x1c>
    3ea6:	96 95       	lsr	r25
    3ea8:	87 95       	ror	r24
    3eaa:	21 50       	subi	r18, 0x01	; 1
    3eac:	31 09       	sbc	r19, r1
    3eae:	91 f7       	brne	.-28     	; 0x3e94 <crc16_update+0x6>
    3eb0:	08 95       	ret

00003eb2 <millis_init>:
    3eb2:	82 e0       	ldi	r24, 0x02	; 2
    3eb4:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    3eb8:	84 e0       	ldi	r24, 0x04	; 4
    3eba:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7000b1>
    3ebe:	8a ef       	ldi	r24, 0xFA	; 250
    3ec0:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7000b3>
    3ec4:	e0 e7       	ldi	r30, 0x70	; 112
    3ec6:	f0 e0       	ldi	r31, 0x00	; 0
    3ec8:	80 81       	ld	r24, Z
    3eca:	82 60       	ori	r24, 0x02	; 2
    3ecc:	80 83       	st	Z, r24
    3ece:	08 95       	ret

00003ed0 <Get_millis>:
=======
    return xReturn;
}
    1a98:	fc 01       	movw	r30, r24
    1a9a:	44 81       	ldd	r20, Z+4	; 0x04
    1a9c:	55 81       	ldd	r21, Z+5	; 0x05
    1a9e:	22 81       	ldd	r18, Z+2	; 0x02
    1aa0:	33 81       	ldd	r19, Z+3	; 0x03
    1aa2:	24 0f       	add	r18, r20
    1aa4:	35 1f       	adc	r19, r21
    1aa6:	80 81       	ld	r24, Z
    1aa8:	91 81       	ldd	r25, Z+1	; 0x01
    1aaa:	b9 01       	movw	r22, r18
    1aac:	68 1b       	sub	r22, r24
    1aae:	79 0b       	sbc	r23, r25
    1ab0:	cb 01       	movw	r24, r22
    1ab2:	64 17       	cp	r22, r20
    1ab4:	75 07       	cpc	r23, r21
    1ab6:	10 f0       	brcs	.+4      	; 0x1abc <prvBytesInBuffer+0x24>
    1ab8:	84 1b       	sub	r24, r20
    1aba:	95 0b       	sbc	r25, r21
    1abc:	08 95       	ret

00001abe <prvWriteBytesToBuffer>:
    1abe:	af 92       	push	r10
    1ac0:	bf 92       	push	r11
    1ac2:	cf 92       	push	r12
    1ac4:	df 92       	push	r13
    1ac6:	ef 92       	push	r14
    1ac8:	ff 92       	push	r15
    1aca:	0f 93       	push	r16
    1acc:	1f 93       	push	r17
    1ace:	cf 93       	push	r28
    1ad0:	df 93       	push	r29
    1ad2:	6c 01       	movw	r12, r24
    1ad4:	5b 01       	movw	r10, r22
    1ad6:	7a 01       	movw	r14, r20
    1ad8:	fc 01       	movw	r30, r24
    1ada:	c2 81       	ldd	r28, Z+2	; 0x02
    1adc:	d3 81       	ldd	r29, Z+3	; 0x03
    1ade:	04 81       	ldd	r16, Z+4	; 0x04
    1ae0:	15 81       	ldd	r17, Z+5	; 0x05
    1ae2:	0c 1b       	sub	r16, r28
    1ae4:	1d 0b       	sbc	r17, r29
    1ae6:	40 17       	cp	r20, r16
    1ae8:	51 07       	cpc	r21, r17
    1aea:	08 f4       	brcc	.+2      	; 0x1aee <prvWriteBytesToBuffer+0x30>
    1aec:	8a 01       	movw	r16, r20
    1aee:	f6 01       	movw	r30, r12
    1af0:	84 85       	ldd	r24, Z+12	; 0x0c
    1af2:	95 85       	ldd	r25, Z+13	; 0x0d
    1af4:	a8 01       	movw	r20, r16
    1af6:	b5 01       	movw	r22, r10
    1af8:	8c 0f       	add	r24, r28
    1afa:	9d 1f       	adc	r25, r29
    1afc:	0e 94 fc 17 	call	0x2ff8	; 0x2ff8 <memcpy>
    1b00:	0e 15       	cp	r16, r14
    1b02:	1f 05       	cpc	r17, r15
    1b04:	58 f4       	brcc	.+22     	; 0x1b1c <prvWriteBytesToBuffer+0x5e>
    1b06:	a7 01       	movw	r20, r14
    1b08:	40 1b       	sub	r20, r16
    1b0a:	51 0b       	sbc	r21, r17
    1b0c:	b5 01       	movw	r22, r10
    1b0e:	60 0f       	add	r22, r16
    1b10:	71 1f       	adc	r23, r17
    1b12:	f6 01       	movw	r30, r12
    1b14:	84 85       	ldd	r24, Z+12	; 0x0c
    1b16:	95 85       	ldd	r25, Z+13	; 0x0d
    1b18:	0e 94 fc 17 	call	0x2ff8	; 0x2ff8 <memcpy>
    1b1c:	ce 01       	movw	r24, r28
    1b1e:	8e 0d       	add	r24, r14
    1b20:	9f 1d       	adc	r25, r15
    1b22:	f6 01       	movw	r30, r12
    1b24:	24 81       	ldd	r18, Z+4	; 0x04
    1b26:	35 81       	ldd	r19, Z+5	; 0x05
    1b28:	82 17       	cp	r24, r18
    1b2a:	93 07       	cpc	r25, r19
    1b2c:	10 f0       	brcs	.+4      	; 0x1b32 <prvWriteBytesToBuffer+0x74>
    1b2e:	82 1b       	sub	r24, r18
    1b30:	93 0b       	sbc	r25, r19
    1b32:	f6 01       	movw	r30, r12
    1b34:	93 83       	std	Z+3, r25	; 0x03
    1b36:	82 83       	std	Z+2, r24	; 0x02
    1b38:	c7 01       	movw	r24, r14
    1b3a:	df 91       	pop	r29
    1b3c:	cf 91       	pop	r28
    1b3e:	1f 91       	pop	r17
    1b40:	0f 91       	pop	r16
    1b42:	ff 90       	pop	r15
    1b44:	ef 90       	pop	r14
    1b46:	df 90       	pop	r13
    1b48:	cf 90       	pop	r12
    1b4a:	bf 90       	pop	r11
    1b4c:	af 90       	pop	r10
    1b4e:	08 95       	ret

00001b50 <prvWriteMessageToBuffer>:
    1b50:	cf 92       	push	r12
    1b52:	df 92       	push	r13
    1b54:	ef 92       	push	r14
    1b56:	ff 92       	push	r15
    1b58:	0f 93       	push	r16
    1b5a:	1f 93       	push	r17
    1b5c:	cf 93       	push	r28
    1b5e:	df 93       	push	r29
    1b60:	1f 92       	push	r1
    1b62:	1f 92       	push	r1
    1b64:	cd b7       	in	r28, 0x3d	; 61
    1b66:	de b7       	in	r29, 0x3e	; 62
    1b68:	5a 83       	std	Y+2, r21	; 0x02
    1b6a:	49 83       	std	Y+1, r20	; 0x01
    1b6c:	21 15       	cp	r18, r1
    1b6e:	31 05       	cpc	r19, r1
    1b70:	c9 f0       	breq	.+50     	; 0x1ba4 <prvWriteMessageToBuffer+0x54>
    1b72:	6b 01       	movw	r12, r22
    1b74:	7c 01       	movw	r14, r24
    1b76:	fc 01       	movw	r30, r24
    1b78:	86 85       	ldd	r24, Z+14	; 0x0e
    1b7a:	80 fd       	sbrc	r24, 0
    1b7c:	08 c0       	rjmp	.+16     	; 0x1b8e <prvWriteMessageToBuffer+0x3e>
    1b7e:	ca 01       	movw	r24, r20
    1b80:	24 17       	cp	r18, r20
    1b82:	35 07       	cpc	r19, r21
    1b84:	08 f4       	brcc	.+2      	; 0x1b88 <prvWriteMessageToBuffer+0x38>
    1b86:	c9 01       	movw	r24, r18
    1b88:	9a 83       	std	Y+2, r25	; 0x02
    1b8a:	89 83       	std	Y+1, r24	; 0x01
    1b8c:	11 c0       	rjmp	.+34     	; 0x1bb0 <prvWriteMessageToBuffer+0x60>
    1b8e:	20 17       	cp	r18, r16
    1b90:	31 07       	cpc	r19, r17
    1b92:	58 f0       	brcs	.+22     	; 0x1baa <prvWriteMessageToBuffer+0x5a>
    1b94:	42 e0       	ldi	r20, 0x02	; 2
    1b96:	50 e0       	ldi	r21, 0x00	; 0
    1b98:	be 01       	movw	r22, r28
    1b9a:	6f 5f       	subi	r22, 0xFF	; 255
    1b9c:	7f 4f       	sbci	r23, 0xFF	; 255
    1b9e:	c7 01       	movw	r24, r14
    1ba0:	8e df       	rcall	.-228    	; 0x1abe <prvWriteBytesToBuffer>
    1ba2:	06 c0       	rjmp	.+12     	; 0x1bb0 <prvWriteMessageToBuffer+0x60>
    1ba4:	80 e0       	ldi	r24, 0x00	; 0
    1ba6:	90 e0       	ldi	r25, 0x00	; 0
    1ba8:	08 c0       	rjmp	.+16     	; 0x1bba <prvWriteMessageToBuffer+0x6a>
    1baa:	80 e0       	ldi	r24, 0x00	; 0
    1bac:	90 e0       	ldi	r25, 0x00	; 0
    1bae:	05 c0       	rjmp	.+10     	; 0x1bba <prvWriteMessageToBuffer+0x6a>
    1bb0:	49 81       	ldd	r20, Y+1	; 0x01
    1bb2:	5a 81       	ldd	r21, Y+2	; 0x02
    1bb4:	b6 01       	movw	r22, r12
    1bb6:	c7 01       	movw	r24, r14
    1bb8:	82 df       	rcall	.-252    	; 0x1abe <prvWriteBytesToBuffer>
    1bba:	0f 90       	pop	r0
    1bbc:	0f 90       	pop	r0
    1bbe:	df 91       	pop	r29
    1bc0:	cf 91       	pop	r28
    1bc2:	1f 91       	pop	r17
    1bc4:	0f 91       	pop	r16
    1bc6:	ff 90       	pop	r15
    1bc8:	ef 90       	pop	r14
    1bca:	df 90       	pop	r13
    1bcc:	cf 90       	pop	r12
    1bce:	08 95       	ret

00001bd0 <prvReadBytesFromBuffer>:
    1bd0:	af 92       	push	r10
    1bd2:	bf 92       	push	r11
    1bd4:	cf 92       	push	r12
    1bd6:	df 92       	push	r13
    1bd8:	ef 92       	push	r14
    1bda:	ff 92       	push	r15
    1bdc:	0f 93       	push	r16
    1bde:	1f 93       	push	r17
    1be0:	cf 93       	push	r28
    1be2:	df 93       	push	r29
    1be4:	7c 01       	movw	r14, r24
    1be6:	5b 01       	movw	r10, r22
    1be8:	e9 01       	movw	r28, r18
    1bea:	42 17       	cp	r20, r18
    1bec:	53 07       	cpc	r21, r19
    1bee:	08 f4       	brcc	.+2      	; 0x1bf2 <prvReadBytesFromBuffer+0x22>
    1bf0:	ea 01       	movw	r28, r20
    1bf2:	20 97       	sbiw	r28, 0x00	; 0
    1bf4:	79 f1       	breq	.+94     	; 0x1c54 <prvReadBytesFromBuffer+0x84>
    1bf6:	f7 01       	movw	r30, r14
    1bf8:	00 81       	ld	r16, Z
    1bfa:	11 81       	ldd	r17, Z+1	; 0x01
    1bfc:	c4 80       	ldd	r12, Z+4	; 0x04
    1bfe:	d5 80       	ldd	r13, Z+5	; 0x05
    1c00:	c0 1a       	sub	r12, r16
    1c02:	d1 0a       	sbc	r13, r17
    1c04:	cc 15       	cp	r28, r12
    1c06:	dd 05       	cpc	r29, r13
    1c08:	08 f4       	brcc	.+2      	; 0x1c0c <prvReadBytesFromBuffer+0x3c>
    1c0a:	6e 01       	movw	r12, r28
    1c0c:	f7 01       	movw	r30, r14
    1c0e:	64 85       	ldd	r22, Z+12	; 0x0c
    1c10:	75 85       	ldd	r23, Z+13	; 0x0d
    1c12:	60 0f       	add	r22, r16
    1c14:	71 1f       	adc	r23, r17
    1c16:	a6 01       	movw	r20, r12
    1c18:	c5 01       	movw	r24, r10
    1c1a:	0e 94 fc 17 	call	0x2ff8	; 0x2ff8 <memcpy>
    1c1e:	cc 16       	cp	r12, r28
    1c20:	dd 06       	cpc	r13, r29
    1c22:	58 f4       	brcc	.+22     	; 0x1c3a <prvReadBytesFromBuffer+0x6a>
    1c24:	ae 01       	movw	r20, r28
    1c26:	4c 19       	sub	r20, r12
    1c28:	5d 09       	sbc	r21, r13
    1c2a:	f7 01       	movw	r30, r14
    1c2c:	64 85       	ldd	r22, Z+12	; 0x0c
    1c2e:	75 85       	ldd	r23, Z+13	; 0x0d
    1c30:	c5 01       	movw	r24, r10
    1c32:	8c 0d       	add	r24, r12
    1c34:	9d 1d       	adc	r25, r13
    1c36:	0e 94 fc 17 	call	0x2ff8	; 0x2ff8 <memcpy>
    1c3a:	0c 0f       	add	r16, r28
    1c3c:	1d 1f       	adc	r17, r29
    1c3e:	f7 01       	movw	r30, r14
    1c40:	84 81       	ldd	r24, Z+4	; 0x04
    1c42:	95 81       	ldd	r25, Z+5	; 0x05
    1c44:	08 17       	cp	r16, r24
    1c46:	19 07       	cpc	r17, r25
    1c48:	10 f0       	brcs	.+4      	; 0x1c4e <prvReadBytesFromBuffer+0x7e>
    1c4a:	08 1b       	sub	r16, r24
    1c4c:	19 0b       	sbc	r17, r25
    1c4e:	f7 01       	movw	r30, r14
    1c50:	11 83       	std	Z+1, r17	; 0x01
    1c52:	00 83       	st	Z, r16
    1c54:	ce 01       	movw	r24, r28
    1c56:	df 91       	pop	r29
    1c58:	cf 91       	pop	r28
    1c5a:	1f 91       	pop	r17
    1c5c:	0f 91       	pop	r16
    1c5e:	ff 90       	pop	r15
    1c60:	ef 90       	pop	r14
    1c62:	df 90       	pop	r13
    1c64:	cf 90       	pop	r12
    1c66:	bf 90       	pop	r11
    1c68:	af 90       	pop	r10
    1c6a:	08 95       	ret

00001c6c <xStreamBufferGenericCreateStatic>:
    1c6c:	0f 93       	push	r16
    1c6e:	1f 93       	push	r17
    1c70:	cf 93       	push	r28
    1c72:	df 93       	push	r29
    1c74:	dc 01       	movw	r26, r24
    1c76:	f8 01       	movw	r30, r16
    1c78:	61 15       	cp	r22, r1
    1c7a:	71 05       	cpc	r23, r1
    1c7c:	11 f4       	brne	.+4      	; 0x1c82 <xStreamBufferGenericCreateStatic+0x16>
    1c7e:	61 e0       	ldi	r22, 0x01	; 1
    1c80:	70 e0       	ldi	r23, 0x00	; 0
    1c82:	41 11       	cpse	r20, r1
    1c84:	02 c0       	rjmp	.+4      	; 0x1c8a <xStreamBufferGenericCreateStatic+0x1e>
    1c86:	92 e0       	ldi	r25, 0x02	; 2
    1c88:	01 c0       	rjmp	.+2      	; 0x1c8c <xStreamBufferGenericCreateStatic+0x20>
    1c8a:	93 e0       	ldi	r25, 0x03	; 3
    1c8c:	21 15       	cp	r18, r1
    1c8e:	31 05       	cpc	r19, r1
    1c90:	91 f0       	breq	.+36     	; 0x1cb6 <xStreamBufferGenericCreateStatic+0x4a>
    1c92:	30 97       	sbiw	r30, 0x00	; 0
    1c94:	99 f0       	breq	.+38     	; 0x1cbc <xStreamBufferGenericCreateStatic+0x50>
    1c96:	8f e0       	ldi	r24, 0x0F	; 15
    1c98:	ef 01       	movw	r28, r30
    1c9a:	19 92       	st	Y+, r1
    1c9c:	8a 95       	dec	r24
    1c9e:	e9 f7       	brne	.-6      	; 0x1c9a <xStreamBufferGenericCreateStatic+0x2e>
    1ca0:	35 87       	std	Z+13, r19	; 0x0d
    1ca2:	24 87       	std	Z+12, r18	; 0x0c
    1ca4:	b5 83       	std	Z+5, r27	; 0x05
    1ca6:	a4 83       	std	Z+4, r26	; 0x04
    1ca8:	77 83       	std	Z+7, r23	; 0x07
    1caa:	66 83       	std	Z+6, r22	; 0x06
    1cac:	92 60       	ori	r25, 0x02	; 2
    1cae:	96 87       	std	Z+14, r25	; 0x0e
    1cb0:	8e 2f       	mov	r24, r30
    1cb2:	9f 2f       	mov	r25, r31
    1cb4:	05 c0       	rjmp	.+10     	; 0x1cc0 <xStreamBufferGenericCreateStatic+0x54>
    1cb6:	80 e0       	ldi	r24, 0x00	; 0
    1cb8:	90 e0       	ldi	r25, 0x00	; 0
    1cba:	02 c0       	rjmp	.+4      	; 0x1cc0 <xStreamBufferGenericCreateStatic+0x54>
    1cbc:	8e 2f       	mov	r24, r30
    1cbe:	9f 2f       	mov	r25, r31
    1cc0:	df 91       	pop	r29
    1cc2:	cf 91       	pop	r28
    1cc4:	1f 91       	pop	r17
    1cc6:	0f 91       	pop	r16
    1cc8:	08 95       	ret

00001cca <xStreamBufferSpacesAvailable>:
    1cca:	fc 01       	movw	r30, r24
    1ccc:	24 81       	ldd	r18, Z+4	; 0x04
    1cce:	35 81       	ldd	r19, Z+5	; 0x05
    1cd0:	80 81       	ld	r24, Z
    1cd2:	91 81       	ldd	r25, Z+1	; 0x01
    1cd4:	42 81       	ldd	r20, Z+2	; 0x02
    1cd6:	53 81       	ldd	r21, Z+3	; 0x03
    1cd8:	82 0f       	add	r24, r18
    1cda:	93 1f       	adc	r25, r19
    1cdc:	01 97       	sbiw	r24, 0x01	; 1
    1cde:	84 1b       	sub	r24, r20
    1ce0:	95 0b       	sbc	r25, r21
    1ce2:	82 17       	cp	r24, r18
    1ce4:	93 07       	cpc	r25, r19
    1ce6:	10 f0       	brcs	.+4      	; 0x1cec <xStreamBufferSpacesAvailable+0x22>
    1ce8:	82 1b       	sub	r24, r18
    1cea:	93 0b       	sbc	r25, r19
    1cec:	08 95       	ret

00001cee <xStreamBufferSend>:
    1cee:	4f 92       	push	r4
    1cf0:	5f 92       	push	r5
    1cf2:	6f 92       	push	r6
    1cf4:	7f 92       	push	r7
    1cf6:	8f 92       	push	r8
    1cf8:	9f 92       	push	r9
    1cfa:	af 92       	push	r10
    1cfc:	bf 92       	push	r11
    1cfe:	cf 92       	push	r12
    1d00:	df 92       	push	r13
    1d02:	ef 92       	push	r14
    1d04:	ff 92       	push	r15
    1d06:	0f 93       	push	r16
    1d08:	1f 93       	push	r17
    1d0a:	cf 93       	push	r28
    1d0c:	df 93       	push	r29
    1d0e:	00 d0       	rcall	.+0      	; 0x1d10 <xStreamBufferSend+0x22>
    1d10:	1f 92       	push	r1
    1d12:	1f 92       	push	r1
    1d14:	cd b7       	in	r28, 0x3d	; 61
    1d16:	de b7       	in	r29, 0x3e	; 62
    1d18:	6c 01       	movw	r12, r24
    1d1a:	2b 01       	movw	r4, r22
    1d1c:	3a 01       	movw	r6, r20
    1d1e:	3d 83       	std	Y+5, r19	; 0x05
    1d20:	2c 83       	std	Y+4, r18	; 0x04
    1d22:	fc 01       	movw	r30, r24
    1d24:	86 85       	ldd	r24, Z+14	; 0x0e
    1d26:	80 ff       	sbrs	r24, 0
    1d28:	05 c0       	rjmp	.+10     	; 0x1d34 <xStreamBufferSend+0x46>
    1d2a:	4a 01       	movw	r8, r20
    1d2c:	f2 e0       	ldi	r31, 0x02	; 2
    1d2e:	8f 0e       	add	r8, r31
    1d30:	91 1c       	adc	r9, r1
    1d32:	01 c0       	rjmp	.+2      	; 0x1d36 <xStreamBufferSend+0x48>
    1d34:	4a 01       	movw	r8, r20
    1d36:	8c 81       	ldd	r24, Y+4	; 0x04
    1d38:	9d 81       	ldd	r25, Y+5	; 0x05
    1d3a:	89 2b       	or	r24, r25
    1d3c:	09 f4       	brne	.+2      	; 0x1d40 <xStreamBufferSend+0x52>
    1d3e:	31 c0       	rjmp	.+98     	; 0x1da2 <xStreamBufferSend+0xb4>
    1d40:	ce 01       	movw	r24, r28
    1d42:	01 96       	adiw	r24, 0x01	; 1
    1d44:	07 d5       	rcall	.+2574   	; 0x2754 <vTaskSetTimeOutState>
    1d46:	0f b6       	in	r0, 0x3f	; 63
    1d48:	f8 94       	cli
    1d4a:	0f 92       	push	r0
    1d4c:	c6 01       	movw	r24, r12
    1d4e:	bd df       	rcall	.-134    	; 0x1cca <xStreamBufferSpacesAvailable>
    1d50:	5c 01       	movw	r10, r24
    1d52:	88 15       	cp	r24, r8
    1d54:	99 05       	cpc	r25, r9
    1d56:	00 f5       	brcc	.+64     	; 0x1d98 <xStreamBufferSend+0xaa>
    1d58:	80 e0       	ldi	r24, 0x00	; 0
    1d5a:	90 e0       	ldi	r25, 0x00	; 0
    1d5c:	a3 d6       	rcall	.+3398   	; 0x2aa4 <xTaskNotifyStateClear>
    1d5e:	4e d5       	rcall	.+2716   	; 0x27fc <xTaskGetCurrentTaskHandle>
    1d60:	f6 01       	movw	r30, r12
    1d62:	93 87       	std	Z+11, r25	; 0x0b
    1d64:	82 87       	std	Z+10, r24	; 0x0a
    1d66:	0f 90       	pop	r0
    1d68:	0f be       	out	0x3f, r0	; 63
    1d6a:	ec 80       	ldd	r14, Y+4	; 0x04
    1d6c:	fd 80       	ldd	r15, Y+5	; 0x05
    1d6e:	00 e0       	ldi	r16, 0x00	; 0
    1d70:	10 e0       	ldi	r17, 0x00	; 0
    1d72:	20 e0       	ldi	r18, 0x00	; 0
    1d74:	30 e0       	ldi	r19, 0x00	; 0
    1d76:	a9 01       	movw	r20, r18
    1d78:	60 e0       	ldi	r22, 0x00	; 0
    1d7a:	70 e0       	ldi	r23, 0x00	; 0
    1d7c:	cb 01       	movw	r24, r22
    1d7e:	91 d5       	rcall	.+2850   	; 0x28a2 <xTaskNotifyWait>
    1d80:	f6 01       	movw	r30, r12
    1d82:	13 86       	std	Z+11, r1	; 0x0b
    1d84:	12 86       	std	Z+10, r1	; 0x0a
    1d86:	be 01       	movw	r22, r28
    1d88:	6c 5f       	subi	r22, 0xFC	; 252
    1d8a:	7f 4f       	sbci	r23, 0xFF	; 255
    1d8c:	ce 01       	movw	r24, r28
    1d8e:	01 96       	adiw	r24, 0x01	; 1
    1d90:	fc d4       	rcall	.+2552   	; 0x278a <xTaskCheckForTimeOut>
    1d92:	88 23       	and	r24, r24
    1d94:	c1 f2       	breq	.-80     	; 0x1d46 <xStreamBufferSend+0x58>
    1d96:	02 c0       	rjmp	.+4      	; 0x1d9c <xStreamBufferSend+0xae>
    1d98:	0f 90       	pop	r0
    1d9a:	0f be       	out	0x3f, r0	; 63
    1d9c:	a1 14       	cp	r10, r1
    1d9e:	b1 04       	cpc	r11, r1
    1da0:	19 f4       	brne	.+6      	; 0x1da8 <xStreamBufferSend+0xba>
    1da2:	c6 01       	movw	r24, r12
    1da4:	92 df       	rcall	.-220    	; 0x1cca <xStreamBufferSpacesAvailable>
    1da6:	5c 01       	movw	r10, r24
    1da8:	84 01       	movw	r16, r8
    1daa:	95 01       	movw	r18, r10
    1dac:	a3 01       	movw	r20, r6
    1dae:	b2 01       	movw	r22, r4
    1db0:	c6 01       	movw	r24, r12
    1db2:	ce de       	rcall	.-612    	; 0x1b50 <prvWriteMessageToBuffer>
    1db4:	7c 01       	movw	r14, r24
    1db6:	89 2b       	or	r24, r25
    1db8:	d9 f0       	breq	.+54     	; 0x1df0 <xStreamBufferSend+0x102>
    1dba:	c6 01       	movw	r24, r12
    1dbc:	6d de       	rcall	.-806    	; 0x1a98 <prvBytesInBuffer>
    1dbe:	f6 01       	movw	r30, r12
    1dc0:	26 81       	ldd	r18, Z+6	; 0x06
    1dc2:	37 81       	ldd	r19, Z+7	; 0x07
    1dc4:	82 17       	cp	r24, r18
    1dc6:	93 07       	cpc	r25, r19
    1dc8:	98 f0       	brcs	.+38     	; 0x1df0 <xStreamBufferSend+0x102>
    1dca:	7a d2       	rcall	.+1268   	; 0x22c0 <vTaskSuspendAll>
    1dcc:	f6 01       	movw	r30, r12
    1dce:	80 85       	ldd	r24, Z+8	; 0x08
    1dd0:	91 85       	ldd	r25, Z+9	; 0x09
    1dd2:	89 2b       	or	r24, r25
    1dd4:	61 f0       	breq	.+24     	; 0x1dee <xStreamBufferSend+0x100>
    1dd6:	80 85       	ldd	r24, Z+8	; 0x08
    1dd8:	91 85       	ldd	r25, Z+9	; 0x09
    1dda:	00 e0       	ldi	r16, 0x00	; 0
    1ddc:	10 e0       	ldi	r17, 0x00	; 0
    1dde:	20 e0       	ldi	r18, 0x00	; 0
    1de0:	40 e0       	ldi	r20, 0x00	; 0
    1de2:	50 e0       	ldi	r21, 0x00	; 0
    1de4:	ba 01       	movw	r22, r20
    1de6:	e0 d5       	rcall	.+3008   	; 0x29a8 <xTaskGenericNotify>
    1de8:	f6 01       	movw	r30, r12
    1dea:	11 86       	std	Z+9, r1	; 0x09
    1dec:	10 86       	std	Z+8, r1	; 0x08
    1dee:	32 d3       	rcall	.+1636   	; 0x2454 <xTaskResumeAll>
    1df0:	c7 01       	movw	r24, r14
    1df2:	0f 90       	pop	r0
    1df4:	0f 90       	pop	r0
    1df6:	0f 90       	pop	r0
    1df8:	0f 90       	pop	r0
    1dfa:	0f 90       	pop	r0
    1dfc:	df 91       	pop	r29
    1dfe:	cf 91       	pop	r28
    1e00:	1f 91       	pop	r17
    1e02:	0f 91       	pop	r16
    1e04:	ff 90       	pop	r15
    1e06:	ef 90       	pop	r14
    1e08:	df 90       	pop	r13
    1e0a:	cf 90       	pop	r12
    1e0c:	bf 90       	pop	r11
    1e0e:	af 90       	pop	r10
    1e10:	9f 90       	pop	r9
    1e12:	8f 90       	pop	r8
    1e14:	7f 90       	pop	r7
    1e16:	6f 90       	pop	r6
    1e18:	5f 90       	pop	r5
    1e1a:	4f 90       	pop	r4
    1e1c:	08 95       	ret

00001e1e <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void *pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    1e1e:	6f 92       	push	r6
    1e20:	7f 92       	push	r7
    1e22:	8f 92       	push	r8
    1e24:	9f 92       	push	r9
    1e26:	af 92       	push	r10
    1e28:	bf 92       	push	r11
    1e2a:	cf 92       	push	r12
    1e2c:	df 92       	push	r13
    1e2e:	ef 92       	push	r14
    1e30:	ff 92       	push	r15
    1e32:	0f 93       	push	r16
    1e34:	1f 93       	push	r17
    1e36:	cf 93       	push	r28
    1e38:	df 93       	push	r29
    1e3a:	1f 92       	push	r1
    1e3c:	1f 92       	push	r1
    1e3e:	cd b7       	in	r28, 0x3d	; 61
    1e40:	de b7       	in	r29, 0x3e	; 62
    1e42:	6c 01       	movw	r12, r24
    1e44:	3b 01       	movw	r6, r22
    1e46:	4a 01       	movw	r8, r20
    1e48:	79 01       	movw	r14, r18
    /* This receive function is used by both message buffers, which store
    discrete messages, and stream buffers, which store a continuous stream of
    bytes.  Discrete messages include an additional
    sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1e4a:	fc 01       	movw	r30, r24
    1e4c:	86 85       	ldd	r24, Z+14	; 0x0e
    1e4e:	80 fd       	sbrc	r24, 0
    1e50:	03 c0       	rjmp	.+6      	; 0x1e58 <xStreamBufferReceive+0x3a>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    1e52:	a1 2c       	mov	r10, r1
    1e54:	b1 2c       	mov	r11, r1
    1e56:	04 c0       	rjmp	.+8      	; 0x1e60 <xStreamBufferReceive+0x42>
    bytes.  Discrete messages include an additional
    sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1e58:	68 94       	set
    1e5a:	aa 24       	eor	r10, r10
    1e5c:	a1 f8       	bld	r10, 1
    1e5e:	b1 2c       	mov	r11, r1
    else
    {
        xBytesToStoreMessageLength = 0;
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    1e60:	e1 14       	cp	r14, r1
    1e62:	f1 04       	cpc	r15, r1
    1e64:	29 f1       	breq	.+74     	; 0x1eb0 <xStreamBufferReceive+0x92>
    {
        /* Checking if there is data and clearing the notification state must be
        performed atomically. */
        taskENTER_CRITICAL();
    1e66:	0f b6       	in	r0, 0x3f	; 63
    1e68:	f8 94       	cli
    1e6a:	0f 92       	push	r0
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1e6c:	c6 01       	movw	r24, r12
    1e6e:	14 de       	rcall	.-984    	; 0x1a98 <prvBytesInBuffer>
    1e70:	8c 01       	movw	r16, r24
            /* If this function was invoked by a message buffer read then
            xBytesToStoreMessageLength holds the number of bytes used to hold
            the length of the next discrete message.  If this function was
            invoked by a stream buffer read then xBytesToStoreMessageLength will
            be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
    1e72:	a8 16       	cp	r10, r24
    1e74:	b9 06       	cpc	r11, r25
    1e76:	38 f0       	brcs	.+14     	; 0x1e86 <xStreamBufferReceive+0x68>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
    1e78:	80 e0       	ldi	r24, 0x00	; 0
    1e7a:	90 e0       	ldi	r25, 0x00	; 0

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    1e7c:	13 d6       	rcall	.+3110   	; 0x2aa4 <xTaskNotifyStateClear>
    1e7e:	be d4       	rcall	.+2428   	; 0x27fc <xTaskGetCurrentTaskHandle>
    1e80:	f6 01       	movw	r30, r12
    1e82:	91 87       	std	Z+9, r25	; 0x09
    1e84:	80 87       	std	Z+8, r24	; 0x08
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    1e86:	0f 90       	pop	r0
    1e88:	0f be       	out	0x3f, r0	; 63

        if( xBytesAvailable <= xBytesToStoreMessageLength )
    1e8a:	a0 16       	cp	r10, r16
    1e8c:	b1 06       	cpc	r11, r17
    1e8e:	b0 f0       	brcs	.+44     	; 0x1ebc <xStreamBufferReceive+0x9e>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    1e90:	00 e0       	ldi	r16, 0x00	; 0
    1e92:	10 e0       	ldi	r17, 0x00	; 0
    1e94:	20 e0       	ldi	r18, 0x00	; 0
    1e96:	30 e0       	ldi	r19, 0x00	; 0
    1e98:	a9 01       	movw	r20, r18
    1e9a:	60 e0       	ldi	r22, 0x00	; 0
    1e9c:	70 e0       	ldi	r23, 0x00	; 0
    1e9e:	cb 01       	movw	r24, r22
    1ea0:	00 d5       	rcall	.+2560   	; 0x28a2 <xTaskNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
    1ea2:	f6 01       	movw	r30, r12
    1ea4:	11 86       	std	Z+9, r1	; 0x09

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1ea6:	10 86       	std	Z+8, r1	; 0x08
    1ea8:	c6 01       	movw	r24, r12
    1eaa:	f6 dd       	rcall	.-1044   	; 0x1a98 <prvBytesInBuffer>
    1eac:	8c 01       	movw	r16, r24
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1eae:	03 c0       	rjmp	.+6      	; 0x1eb6 <xStreamBufferReceive+0x98>
    1eb0:	c6 01       	movw	r24, r12
    1eb2:	f2 dd       	rcall	.-1052   	; 0x1a98 <prvBytesInBuffer>
    1eb4:	8c 01       	movw	r16, r24
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
    holds the number of bytes used to store the message length) or a stream of
    bytes (where xBytesToStoreMessageLength is zero), the number of bytes
    available must be greater than xBytesToStoreMessageLength to be able to
    read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    1eb6:	a0 16       	cp	r10, r16
    1eb8:	b1 06       	cpc	r11, r17
    1eba:	b8 f5       	brcc	.+110    	; 0x1f2a <xStreamBufferReceive+0x10c>
                                        size_t xBytesToStoreMessageLength )
{
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

    if( xBytesToStoreMessageLength != ( size_t ) 0 )
    1ebc:	a1 14       	cp	r10, r1
    1ebe:	b1 04       	cpc	r11, r1
    1ec0:	c1 f0       	breq	.+48     	; 0x1ef2 <xStreamBufferReceive+0xd4>
    {
        /* A discrete message is being received.  First receive the length
        of the message.  A copy of the tail is stored so the buffer can be
        returned to its prior state if the length of the message is too
        large for the provided buffer. */
        xOriginalTail = pxStreamBuffer->xTail;
    1ec2:	f6 01       	movw	r30, r12
    1ec4:	e0 80       	ld	r14, Z
    1ec6:	f1 80       	ldd	r15, Z+1	; 0x01
        ( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
    1ec8:	98 01       	movw	r18, r16
    1eca:	a5 01       	movw	r20, r10
    1ecc:	be 01       	movw	r22, r28
    1ece:	6f 5f       	subi	r22, 0xFF	; 255
    1ed0:	7f 4f       	sbci	r23, 0xFF	; 255
    1ed2:	c6 01       	movw	r24, r12
    1ed4:	7d de       	rcall	.-774    	; 0x1bd0 <prvReadBytesFromBuffer>
        xNextMessageLength = ( size_t ) xTempNextMessageLength;
    1ed6:	89 81       	ldd	r24, Y+1	; 0x01
    1ed8:	9a 81       	ldd	r25, Y+2	; 0x02

        /* Reduce the number of bytes available by the number of bytes just
        read out. */
        xBytesAvailable -= xBytesToStoreMessageLength;
    1eda:	0a 19       	sub	r16, r10
    1edc:	1b 09       	sbc	r17, r11

        /* Check there is enough space in the buffer provided by the
        user. */
        if( xNextMessageLength > xBufferLengthBytes )
    1ede:	88 16       	cp	r8, r24
    1ee0:	99 06       	cpc	r9, r25
    1ee2:	30 f4       	brcc	.+12     	; 0x1ef0 <xStreamBufferReceive+0xd2>
        {
            /* The user has provided insufficient space to read the message
            so return the buffer to its previous state (so the length of
            the message is in the buffer again). */
            pxStreamBuffer->xTail = xOriginalTail;
    1ee4:	f6 01       	movw	r30, r12
    1ee6:	f1 82       	std	Z+1, r15	; 0x01
    1ee8:	e0 82       	st	Z, r14
            xNextMessageLength = 0;
    1eea:	81 2c       	mov	r8, r1
    1eec:	91 2c       	mov	r9, r1
        of the message.  A copy of the tail is stored so the buffer can be
        returned to its prior state if the length of the message is too
        large for the provided buffer. */
        xOriginalTail = pxStreamBuffer->xTail;
        ( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
        xNextMessageLength = ( size_t ) xTempNextMessageLength;
    1eee:	01 c0       	rjmp	.+2      	; 0x1ef2 <xStreamBufferReceive+0xd4>
        message), so read as many bytes as possible. */
        xNextMessageLength = xBufferLengthBytes;
    }

    /* Read the actual data. */
    xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
    1ef0:	4c 01       	movw	r8, r24
    1ef2:	98 01       	movw	r18, r16
    1ef4:	a4 01       	movw	r20, r8
    1ef6:	b3 01       	movw	r22, r6
    1ef8:	c6 01       	movw	r24, r12
    1efa:	6a de       	rcall	.-812    	; 0x1bd0 <prvReadBytesFromBuffer>
    if( xBytesAvailable > xBytesToStoreMessageLength )
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    1efc:	7c 01       	movw	r14, r24
    1efe:	89 2b       	or	r24, r25
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            sbRECEIVE_COMPLETED( pxStreamBuffer );
    1f00:	b1 f0       	breq	.+44     	; 0x1f2e <xStreamBufferReceive+0x110>
    1f02:	de d1       	rcall	.+956    	; 0x22c0 <vTaskSuspendAll>
    1f04:	f6 01       	movw	r30, r12
    1f06:	82 85       	ldd	r24, Z+10	; 0x0a
    1f08:	93 85       	ldd	r25, Z+11	; 0x0b
    1f0a:	89 2b       	or	r24, r25
    1f0c:	61 f0       	breq	.+24     	; 0x1f26 <xStreamBufferReceive+0x108>
    1f0e:	82 85       	ldd	r24, Z+10	; 0x0a
    1f10:	93 85       	ldd	r25, Z+11	; 0x0b
    1f12:	00 e0       	ldi	r16, 0x00	; 0
    1f14:	10 e0       	ldi	r17, 0x00	; 0
    1f16:	20 e0       	ldi	r18, 0x00	; 0
    1f18:	40 e0       	ldi	r20, 0x00	; 0
    1f1a:	50 e0       	ldi	r21, 0x00	; 0
    1f1c:	ba 01       	movw	r22, r20
    1f1e:	44 d5       	rcall	.+2696   	; 0x29a8 <xTaskGenericNotify>
    1f20:	f6 01       	movw	r30, r12
    1f22:	13 86       	std	Z+11, r1	; 0x0b
    1f24:	12 86       	std	Z+10, r1	; 0x0a
    1f26:	96 d2       	rcall	.+1324   	; 0x2454 <xTaskResumeAll>
    1f28:	02 c0       	rjmp	.+4      	; 0x1f2e <xStreamBufferReceive+0x110>
                             void *pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    1f2a:	e1 2c       	mov	r14, r1
    1f2c:	f1 2c       	mov	r15, r1
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
}
    1f2e:	c7 01       	movw	r24, r14
    1f30:	0f 90       	pop	r0
    1f32:	0f 90       	pop	r0
    1f34:	df 91       	pop	r29
    1f36:	cf 91       	pop	r28
    1f38:	1f 91       	pop	r17
    1f3a:	0f 91       	pop	r16
    1f3c:	ff 90       	pop	r15
    1f3e:	ef 90       	pop	r14
    1f40:	df 90       	pop	r13
    1f42:	cf 90       	pop	r12
    1f44:	bf 90       	pop	r11
    1f46:	af 90       	pop	r10
    1f48:	9f 90       	pop	r9
    1f4a:	8f 90       	pop	r8
    1f4c:	7f 90       	pop	r7
    1f4e:	6f 90       	pop	r6
    1f50:	08 95       	ret

00001f52 <prvResetNextTaskUnblockTime>:
    1f52:	e0 91 5e 08 	lds	r30, 0x085E	; 0x80085e <pxDelayedTaskList>
    1f56:	f0 91 5f 08 	lds	r31, 0x085F	; 0x80085f <pxDelayedTaskList+0x1>
    1f5a:	80 81       	ld	r24, Z
    1f5c:	81 11       	cpse	r24, r1
    1f5e:	07 c0       	rjmp	.+14     	; 0x1f6e <prvResetNextTaskUnblockTime+0x1c>
    1f60:	8f ef       	ldi	r24, 0xFF	; 255
    1f62:	9f ef       	ldi	r25, 0xFF	; 255
    1f64:	90 93 36 08 	sts	0x0836, r25	; 0x800836 <xNextTaskUnblockTime+0x1>
    1f68:	80 93 35 08 	sts	0x0835, r24	; 0x800835 <xNextTaskUnblockTime>
    1f6c:	08 95       	ret
    1f6e:	e0 91 5e 08 	lds	r30, 0x085E	; 0x80085e <pxDelayedTaskList>
    1f72:	f0 91 5f 08 	lds	r31, 0x085F	; 0x80085f <pxDelayedTaskList+0x1>
    1f76:	05 80       	ldd	r0, Z+5	; 0x05
    1f78:	f6 81       	ldd	r31, Z+6	; 0x06
    1f7a:	e0 2d       	mov	r30, r0
    1f7c:	06 80       	ldd	r0, Z+6	; 0x06
    1f7e:	f7 81       	ldd	r31, Z+7	; 0x07
    1f80:	e0 2d       	mov	r30, r0
    1f82:	82 81       	ldd	r24, Z+2	; 0x02
    1f84:	93 81       	ldd	r25, Z+3	; 0x03
    1f86:	90 93 36 08 	sts	0x0836, r25	; 0x800836 <xNextTaskUnblockTime+0x1>
    1f8a:	80 93 35 08 	sts	0x0835, r24	; 0x800835 <xNextTaskUnblockTime>
    1f8e:	08 95       	ret

00001f90 <prvAddCurrentTaskToDelayedList>:
    1f90:	ff 92       	push	r15
    1f92:	0f 93       	push	r16
    1f94:	1f 93       	push	r17
    1f96:	cf 93       	push	r28
    1f98:	df 93       	push	r29
    1f9a:	ec 01       	movw	r28, r24
    1f9c:	f6 2e       	mov	r15, r22
    1f9e:	00 91 3d 08 	lds	r16, 0x083D	; 0x80083d <xTickCount>
    1fa2:	10 91 3e 08 	lds	r17, 0x083E	; 0x80083e <xTickCount+0x1>
    1fa6:	80 91 84 08 	lds	r24, 0x0884	; 0x800884 <pxCurrentTCB>
    1faa:	90 91 85 08 	lds	r25, 0x0885	; 0x800885 <pxCurrentTCB+0x1>
    1fae:	02 96       	adiw	r24, 0x02	; 2
    1fb0:	42 d9       	rcall	.-3452   	; 0x1236 <uxListRemove>
    1fb2:	cf 3f       	cpi	r28, 0xFF	; 255
    1fb4:	8f ef       	ldi	r24, 0xFF	; 255
    1fb6:	d8 07       	cpc	r29, r24
    1fb8:	61 f4       	brne	.+24     	; 0x1fd2 <prvAddCurrentTaskToDelayedList+0x42>
    1fba:	ff 20       	and	r15, r15
    1fbc:	51 f0       	breq	.+20     	; 0x1fd2 <prvAddCurrentTaskToDelayedList+0x42>
    1fbe:	60 91 84 08 	lds	r22, 0x0884	; 0x800884 <pxCurrentTCB>
    1fc2:	70 91 85 08 	lds	r23, 0x0885	; 0x800885 <pxCurrentTCB+0x1>
    1fc6:	6e 5f       	subi	r22, 0xFE	; 254
    1fc8:	7f 4f       	sbci	r23, 0xFF	; 255
    1fca:	80 e4       	ldi	r24, 0x40	; 64
    1fcc:	98 e0       	ldi	r25, 0x08	; 8
    1fce:	e1 d8       	rcall	.-3646   	; 0x1192 <vListInsertEnd>
    1fd0:	2d c0       	rjmp	.+90     	; 0x202c <prvAddCurrentTaskToDelayedList+0x9c>
    1fd2:	c0 0f       	add	r28, r16
    1fd4:	d1 1f       	adc	r29, r17
    1fd6:	e0 91 84 08 	lds	r30, 0x0884	; 0x800884 <pxCurrentTCB>
    1fda:	f0 91 85 08 	lds	r31, 0x0885	; 0x800885 <pxCurrentTCB+0x1>
    1fde:	d3 83       	std	Z+3, r29	; 0x03
    1fe0:	c2 83       	std	Z+2, r28	; 0x02
    1fe2:	c0 17       	cp	r28, r16
    1fe4:	d1 07       	cpc	r29, r17
    1fe6:	60 f4       	brcc	.+24     	; 0x2000 <prvAddCurrentTaskToDelayedList+0x70>
    1fe8:	60 91 84 08 	lds	r22, 0x0884	; 0x800884 <pxCurrentTCB>
    1fec:	70 91 85 08 	lds	r23, 0x0885	; 0x800885 <pxCurrentTCB+0x1>
    1ff0:	80 91 5c 08 	lds	r24, 0x085C	; 0x80085c <pxOverflowDelayedTaskList>
    1ff4:	90 91 5d 08 	lds	r25, 0x085D	; 0x80085d <pxOverflowDelayedTaskList+0x1>
    1ff8:	6e 5f       	subi	r22, 0xFE	; 254
    1ffa:	7f 4f       	sbci	r23, 0xFF	; 255
    1ffc:	eb d8       	rcall	.-3626   	; 0x11d4 <vListInsert>
    1ffe:	16 c0       	rjmp	.+44     	; 0x202c <prvAddCurrentTaskToDelayedList+0x9c>
    2000:	60 91 84 08 	lds	r22, 0x0884	; 0x800884 <pxCurrentTCB>
    2004:	70 91 85 08 	lds	r23, 0x0885	; 0x800885 <pxCurrentTCB+0x1>
    2008:	80 91 5e 08 	lds	r24, 0x085E	; 0x80085e <pxDelayedTaskList>
    200c:	90 91 5f 08 	lds	r25, 0x085F	; 0x80085f <pxDelayedTaskList+0x1>
    2010:	6e 5f       	subi	r22, 0xFE	; 254
    2012:	7f 4f       	sbci	r23, 0xFF	; 255
    2014:	df d8       	rcall	.-3650   	; 0x11d4 <vListInsert>
    2016:	80 91 35 08 	lds	r24, 0x0835	; 0x800835 <xNextTaskUnblockTime>
    201a:	90 91 36 08 	lds	r25, 0x0836	; 0x800836 <xNextTaskUnblockTime+0x1>
    201e:	c8 17       	cp	r28, r24
    2020:	d9 07       	cpc	r29, r25
    2022:	20 f4       	brcc	.+8      	; 0x202c <prvAddCurrentTaskToDelayedList+0x9c>
    2024:	d0 93 36 08 	sts	0x0836, r29	; 0x800836 <xNextTaskUnblockTime+0x1>
    2028:	c0 93 35 08 	sts	0x0835, r28	; 0x800835 <xNextTaskUnblockTime>
    202c:	df 91       	pop	r29
    202e:	cf 91       	pop	r28
    2030:	1f 91       	pop	r17
    2032:	0f 91       	pop	r16
    2034:	ff 90       	pop	r15
    2036:	08 95       	ret

00002038 <xTaskCreateStatic>:
    2038:	6f 92       	push	r6
    203a:	7f 92       	push	r7
    203c:	8f 92       	push	r8
    203e:	9f 92       	push	r9
    2040:	af 92       	push	r10
    2042:	bf 92       	push	r11
    2044:	cf 92       	push	r12
    2046:	df 92       	push	r13
    2048:	ef 92       	push	r14
    204a:	ff 92       	push	r15
    204c:	0f 93       	push	r16
    204e:	cf 93       	push	r28
    2050:	df 93       	push	r29
    2052:	c1 14       	cp	r12, r1
    2054:	d1 04       	cpc	r13, r1
    2056:	09 f4       	brne	.+2      	; 0x205a <xTaskCreateStatic+0x22>
    2058:	d1 c0       	rjmp	.+418    	; 0x21fc <xTaskCreateStatic+0x1c4>
    205a:	e1 14       	cp	r14, r1
    205c:	f1 04       	cpc	r15, r1
    205e:	09 f4       	brne	.+2      	; 0x2062 <xTaskCreateStatic+0x2a>
    2060:	d0 c0       	rjmp	.+416    	; 0x2202 <__stack+0x3>
    2062:	e6 01       	movw	r28, r12
    2064:	59 01       	movw	r10, r18
    2066:	3a 01       	movw	r6, r20
    2068:	4b 01       	movw	r8, r22
    206a:	6c 01       	movw	r12, r24
    206c:	f8 8e       	std	Y+24, r15	; 0x18
    206e:	ef 8a       	std	Y+23, r14	; 0x17
    2070:	65 ea       	ldi	r22, 0xA5	; 165
    2072:	70 e0       	ldi	r23, 0x00	; 0
    2074:	c7 01       	movw	r24, r14
    2076:	c9 d7       	rcall	.+3986   	; 0x300a <memset>
    2078:	81 e0       	ldi	r24, 0x01	; 1
    207a:	68 1a       	sub	r6, r24
    207c:	71 08       	sbc	r7, r1
    207e:	ef 88       	ldd	r14, Y+23	; 0x17
    2080:	f8 8c       	ldd	r15, Y+24	; 0x18
    2082:	e6 0c       	add	r14, r6
    2084:	f7 1c       	adc	r15, r7
    2086:	d4 01       	movw	r26, r8
    2088:	8c 91       	ld	r24, X
    208a:	89 8f       	std	Y+25, r24	; 0x19
    208c:	8c 91       	ld	r24, X
    208e:	88 23       	and	r24, r24
    2090:	a1 f0       	breq	.+40     	; 0x20ba <xTaskCreateStatic+0x82>
    2092:	ae 01       	movw	r20, r28
    2094:	46 5e       	subi	r20, 0xE6	; 230
    2096:	5f 4f       	sbci	r21, 0xFF	; 255
    2098:	f4 01       	movw	r30, r8
    209a:	31 96       	adiw	r30, 0x01	; 1
    209c:	b8 e0       	ldi	r27, 0x08	; 8
    209e:	8b 0e       	add	r8, r27
    20a0:	91 1c       	adc	r9, r1
    20a2:	cf 01       	movw	r24, r30
    20a4:	21 91       	ld	r18, Z+
    20a6:	da 01       	movw	r26, r20
    20a8:	2d 93       	st	X+, r18
    20aa:	ad 01       	movw	r20, r26
    20ac:	dc 01       	movw	r26, r24
    20ae:	8c 91       	ld	r24, X
    20b0:	88 23       	and	r24, r24
    20b2:	19 f0       	breq	.+6      	; 0x20ba <xTaskCreateStatic+0x82>
    20b4:	e8 15       	cp	r30, r8
    20b6:	f9 05       	cpc	r31, r9
    20b8:	a1 f7       	brne	.-24     	; 0x20a2 <xTaskCreateStatic+0x6a>
    20ba:	18 a2       	std	Y+32, r1	; 0x20
    20bc:	04 30       	cpi	r16, 0x04	; 4
    20be:	08 f0       	brcs	.+2      	; 0x20c2 <xTaskCreateStatic+0x8a>
    20c0:	03 e0       	ldi	r16, 0x03	; 3
    20c2:	0e 8b       	std	Y+22, r16	; 0x16
    20c4:	09 a3       	std	Y+33, r16	; 0x21
    20c6:	1a a2       	std	Y+34, r1	; 0x22
    20c8:	4e 01       	movw	r8, r28
    20ca:	b2 e0       	ldi	r27, 0x02	; 2
    20cc:	8b 0e       	add	r8, r27
    20ce:	91 1c       	adc	r9, r1
    20d0:	c4 01       	movw	r24, r8
    20d2:	5b d8       	rcall	.-3914   	; 0x118a <vListInitialiseItem>
    20d4:	ce 01       	movw	r24, r28
    20d6:	0c 96       	adiw	r24, 0x0c	; 12
    20d8:	58 d8       	rcall	.-3920   	; 0x118a <vListInitialiseItem>
    20da:	d9 87       	std	Y+9, r29	; 0x09
    20dc:	c8 87       	std	Y+8, r28	; 0x08
    20de:	84 e0       	ldi	r24, 0x04	; 4
    20e0:	90 e0       	ldi	r25, 0x00	; 0
    20e2:	80 1b       	sub	r24, r16
    20e4:	91 09       	sbc	r25, r1
    20e6:	9d 87       	std	Y+13, r25	; 0x0d
    20e8:	8c 87       	std	Y+12, r24	; 0x0c
    20ea:	db 8b       	std	Y+19, r29	; 0x13
    20ec:	ca 8b       	std	Y+18, r28	; 0x12
    20ee:	1b a2       	std	Y+35, r1	; 0x23
    20f0:	1c a2       	std	Y+36, r1	; 0x24
    20f2:	1d a2       	std	Y+37, r1	; 0x25
    20f4:	1e a2       	std	Y+38, r1	; 0x26
    20f6:	1f a2       	std	Y+39, r1	; 0x27
    20f8:	a5 01       	movw	r20, r10
    20fa:	b6 01       	movw	r22, r12
    20fc:	c7 01       	movw	r24, r14
    20fe:	c2 d8       	rcall	.-3708   	; 0x1284 <pxPortInitialiseStack>
    2100:	99 83       	std	Y+1, r25	; 0x01
    2102:	88 83       	st	Y, r24
    2104:	0f b6       	in	r0, 0x3f	; 63
    2106:	f8 94       	cli
    2108:	0f 92       	push	r0
    210a:	80 91 3f 08 	lds	r24, 0x083F	; 0x80083f <uxCurrentNumberOfTasks>
    210e:	8f 5f       	subi	r24, 0xFF	; 255
    2110:	80 93 3f 08 	sts	0x083F, r24	; 0x80083f <uxCurrentNumberOfTasks>
    2114:	80 91 84 08 	lds	r24, 0x0884	; 0x800884 <pxCurrentTCB>
    2118:	90 91 85 08 	lds	r25, 0x0885	; 0x800885 <pxCurrentTCB+0x1>
    211c:	89 2b       	or	r24, r25
    211e:	89 f5       	brne	.+98     	; 0x2182 <xTaskCreateStatic+0x14a>
    2120:	d0 93 85 08 	sts	0x0885, r29	; 0x800885 <pxCurrentTCB+0x1>
    2124:	c0 93 84 08 	sts	0x0884, r28	; 0x800884 <pxCurrentTCB>
    2128:	80 91 3f 08 	lds	r24, 0x083F	; 0x80083f <uxCurrentNumberOfTasks>
    212c:	81 30       	cpi	r24, 0x01	; 1
    212e:	09 f0       	breq	.+2      	; 0x2132 <xTaskCreateStatic+0xfa>
    2130:	38 c0       	rjmp	.+112    	; 0x21a2 <xTaskCreateStatic+0x16a>
    2132:	80 e6       	ldi	r24, 0x60	; 96
    2134:	98 e0       	ldi	r25, 0x08	; 8
    2136:	1b d8       	rcall	.-4042   	; 0x116e <vListInitialise>
    2138:	89 e6       	ldi	r24, 0x69	; 105
    213a:	98 e0       	ldi	r25, 0x08	; 8
    213c:	18 d8       	rcall	.-4048   	; 0x116e <vListInitialise>
    213e:	82 e7       	ldi	r24, 0x72	; 114
    2140:	98 e0       	ldi	r25, 0x08	; 8
    2142:	15 d8       	rcall	.-4054   	; 0x116e <vListInitialise>
    2144:	8b e7       	ldi	r24, 0x7B	; 123
    2146:	98 e0       	ldi	r25, 0x08	; 8
    2148:	12 d8       	rcall	.-4060   	; 0x116e <vListInitialise>
    214a:	8b e2       	ldi	r24, 0x2B	; 43
    214c:	98 e0       	ldi	r25, 0x08	; 8
    214e:	0f d8       	rcall	.-4066   	; 0x116e <vListInitialise>
    2150:	82 e2       	ldi	r24, 0x22	; 34
    2152:	98 e0       	ldi	r25, 0x08	; 8
    2154:	0c d8       	rcall	.-4072   	; 0x116e <vListInitialise>
    2156:	83 e5       	ldi	r24, 0x53	; 83
    2158:	98 e0       	ldi	r25, 0x08	; 8
    215a:	09 d8       	rcall	.-4078   	; 0x116e <vListInitialise>
    215c:	8a e4       	ldi	r24, 0x4A	; 74
    215e:	98 e0       	ldi	r25, 0x08	; 8
    2160:	06 d8       	rcall	.-4084   	; 0x116e <vListInitialise>
    2162:	80 e4       	ldi	r24, 0x40	; 64
    2164:	98 e0       	ldi	r25, 0x08	; 8
    2166:	03 d8       	rcall	.-4090   	; 0x116e <vListInitialise>
    2168:	8b e2       	ldi	r24, 0x2B	; 43
    216a:	98 e0       	ldi	r25, 0x08	; 8
    216c:	90 93 5f 08 	sts	0x085F, r25	; 0x80085f <pxDelayedTaskList+0x1>
    2170:	80 93 5e 08 	sts	0x085E, r24	; 0x80085e <pxDelayedTaskList>
    2174:	82 e2       	ldi	r24, 0x22	; 34
    2176:	98 e0       	ldi	r25, 0x08	; 8
    2178:	90 93 5d 08 	sts	0x085D, r25	; 0x80085d <pxOverflowDelayedTaskList+0x1>
    217c:	80 93 5c 08 	sts	0x085C, r24	; 0x80085c <pxOverflowDelayedTaskList>
    2180:	10 c0       	rjmp	.+32     	; 0x21a2 <xTaskCreateStatic+0x16a>
    2182:	80 91 3b 08 	lds	r24, 0x083B	; 0x80083b <xSchedulerRunning>
    2186:	81 11       	cpse	r24, r1
    2188:	0c c0       	rjmp	.+24     	; 0x21a2 <xTaskCreateStatic+0x16a>
    218a:	e0 91 84 08 	lds	r30, 0x0884	; 0x800884 <pxCurrentTCB>
    218e:	f0 91 85 08 	lds	r31, 0x0885	; 0x800885 <pxCurrentTCB+0x1>
    2192:	96 89       	ldd	r25, Z+22	; 0x16
    2194:	8e 89       	ldd	r24, Y+22	; 0x16
    2196:	89 17       	cp	r24, r25
    2198:	20 f0       	brcs	.+8      	; 0x21a2 <xTaskCreateStatic+0x16a>
    219a:	d0 93 85 08 	sts	0x0885, r29	; 0x800885 <pxCurrentTCB+0x1>
    219e:	c0 93 84 08 	sts	0x0884, r28	; 0x800884 <pxCurrentTCB>
    21a2:	80 91 37 08 	lds	r24, 0x0837	; 0x800837 <uxTaskNumber>
    21a6:	8f 5f       	subi	r24, 0xFF	; 255
    21a8:	80 93 37 08 	sts	0x0837, r24	; 0x800837 <uxTaskNumber>
    21ac:	8e 89       	ldd	r24, Y+22	; 0x16
    21ae:	90 91 3c 08 	lds	r25, 0x083C	; 0x80083c <uxTopReadyPriority>
    21b2:	98 17       	cp	r25, r24
    21b4:	10 f4       	brcc	.+4      	; 0x21ba <xTaskCreateStatic+0x182>
    21b6:	80 93 3c 08 	sts	0x083C, r24	; 0x80083c <uxTopReadyPriority>
    21ba:	90 e0       	ldi	r25, 0x00	; 0
    21bc:	9c 01       	movw	r18, r24
    21be:	22 0f       	add	r18, r18
    21c0:	33 1f       	adc	r19, r19
    21c2:	22 0f       	add	r18, r18
    21c4:	33 1f       	adc	r19, r19
    21c6:	22 0f       	add	r18, r18
    21c8:	33 1f       	adc	r19, r19
    21ca:	82 0f       	add	r24, r18
    21cc:	93 1f       	adc	r25, r19
    21ce:	b4 01       	movw	r22, r8
    21d0:	80 5a       	subi	r24, 0xA0	; 160
    21d2:	97 4f       	sbci	r25, 0xF7	; 247
    21d4:	0e 94 c9 08 	call	0x1192	; 0x1192 <vListInsertEnd>
    21d8:	0f 90       	pop	r0
    21da:	0f be       	out	0x3f, r0	; 63
    21dc:	80 91 3b 08 	lds	r24, 0x083B	; 0x80083b <xSchedulerRunning>
    21e0:	88 23       	and	r24, r24
    21e2:	91 f0       	breq	.+36     	; 0x2208 <__stack+0x9>
    21e4:	e0 91 84 08 	lds	r30, 0x0884	; 0x800884 <pxCurrentTCB>
    21e8:	f0 91 85 08 	lds	r31, 0x0885	; 0x800885 <pxCurrentTCB+0x1>
    21ec:	96 89       	ldd	r25, Z+22	; 0x16
    21ee:	8e 89       	ldd	r24, Y+22	; 0x16
    21f0:	98 17       	cp	r25, r24
    21f2:	68 f4       	brcc	.+26     	; 0x220e <__stack+0xf>
    21f4:	f5 d8       	rcall	.-3606   	; 0x13e0 <vPortYield>
    21f6:	8c 2f       	mov	r24, r28
    21f8:	9d 2f       	mov	r25, r29
    21fa:	0b c0       	rjmp	.+22     	; 0x2212 <__stack+0x13>
    21fc:	80 e0       	ldi	r24, 0x00	; 0
    21fe:	90 e0       	ldi	r25, 0x00	; 0
    2200:	08 c0       	rjmp	.+16     	; 0x2212 <__stack+0x13>
    2202:	80 e0       	ldi	r24, 0x00	; 0
    2204:	90 e0       	ldi	r25, 0x00	; 0
    2206:	05 c0       	rjmp	.+10     	; 0x2212 <__stack+0x13>
    2208:	8c 2f       	mov	r24, r28
    220a:	9d 2f       	mov	r25, r29
    220c:	02 c0       	rjmp	.+4      	; 0x2212 <__stack+0x13>
    220e:	8c 2f       	mov	r24, r28
    2210:	9d 2f       	mov	r25, r29
    2212:	df 91       	pop	r29
    2214:	cf 91       	pop	r28
    2216:	0f 91       	pop	r16
    2218:	ff 90       	pop	r15
    221a:	ef 90       	pop	r14
    221c:	df 90       	pop	r13
    221e:	cf 90       	pop	r12
    2220:	bf 90       	pop	r11
    2222:	af 90       	pop	r10
    2224:	9f 90       	pop	r9
    2226:	8f 90       	pop	r8
    2228:	7f 90       	pop	r7
    222a:	6f 90       	pop	r6
    222c:	08 95       	ret

0000222e <vTaskStartScheduler>:
    222e:	cf 92       	push	r12
    2230:	df 92       	push	r13
    2232:	ef 92       	push	r14
    2234:	ff 92       	push	r15
    2236:	0f 93       	push	r16
    2238:	cf 93       	push	r28
    223a:	df 93       	push	r29
    223c:	00 d0       	rcall	.+0      	; 0x223e <vTaskStartScheduler+0x10>
    223e:	00 d0       	rcall	.+0      	; 0x2240 <vTaskStartScheduler+0x12>
    2240:	cd b7       	in	r28, 0x3d	; 61
    2242:	de b7       	in	r29, 0x3e	; 62
    2244:	1e 82       	std	Y+6, r1	; 0x06
    2246:	1d 82       	std	Y+5, r1	; 0x05
    2248:	1c 82       	std	Y+4, r1	; 0x04
    224a:	1b 82       	std	Y+3, r1	; 0x03
    224c:	ae 01       	movw	r20, r28
    224e:	4f 5f       	subi	r20, 0xFF	; 255
    2250:	5f 4f       	sbci	r21, 0xFF	; 255
    2252:	be 01       	movw	r22, r28
    2254:	6d 5f       	subi	r22, 0xFD	; 253
    2256:	7f 4f       	sbci	r23, 0xFF	; 255
    2258:	ce 01       	movw	r24, r28
    225a:	05 96       	adiw	r24, 0x05	; 5
    225c:	0e 94 97 08 	call	0x112e	; 0x112e <vApplicationGetIdleTaskMemory>
    2260:	cd 80       	ldd	r12, Y+5	; 0x05
    2262:	de 80       	ldd	r13, Y+6	; 0x06
    2264:	eb 80       	ldd	r14, Y+3	; 0x03
    2266:	fc 80       	ldd	r15, Y+4	; 0x04
    2268:	49 81       	ldd	r20, Y+1	; 0x01
    226a:	5a 81       	ldd	r21, Y+2	; 0x02
    226c:	00 e0       	ldi	r16, 0x00	; 0
    226e:	20 e0       	ldi	r18, 0x00	; 0
    2270:	30 e0       	ldi	r19, 0x00	; 0
    2272:	6c e6       	ldi	r22, 0x6C	; 108
    2274:	72 e0       	ldi	r23, 0x02	; 2
    2276:	82 e7       	ldi	r24, 0x72	; 114
    2278:	90 e0       	ldi	r25, 0x00	; 0
    227a:	de de       	rcall	.-580    	; 0x2038 <xTaskCreateStatic>
    227c:	89 2b       	or	r24, r25
    227e:	91 f0       	breq	.+36     	; 0x22a4 <vTaskStartScheduler+0x76>
    2280:	83 d4       	rcall	.+2310   	; 0x2b88 <xTimerCreateTimerTask>
    2282:	81 30       	cpi	r24, 0x01	; 1
    2284:	79 f4       	brne	.+30     	; 0x22a4 <vTaskStartScheduler+0x76>
    2286:	f8 94       	cli
    2288:	8f ef       	ldi	r24, 0xFF	; 255
    228a:	9f ef       	ldi	r25, 0xFF	; 255
    228c:	90 93 36 08 	sts	0x0836, r25	; 0x800836 <xNextTaskUnblockTime+0x1>
    2290:	80 93 35 08 	sts	0x0835, r24	; 0x800835 <xNextTaskUnblockTime>
    2294:	81 e0       	ldi	r24, 0x01	; 1
    2296:	80 93 3b 08 	sts	0x083B, r24	; 0x80083b <xSchedulerRunning>
    229a:	10 92 3e 08 	sts	0x083E, r1	; 0x80083e <xTickCount+0x1>
    229e:	10 92 3d 08 	sts	0x083D, r1	; 0x80083d <xTickCount>
    22a2:	62 d8       	rcall	.-3900   	; 0x1368 <xPortStartScheduler>
    22a4:	26 96       	adiw	r28, 0x06	; 6
    22a6:	0f b6       	in	r0, 0x3f	; 63
    22a8:	f8 94       	cli
    22aa:	de bf       	out	0x3e, r29	; 62
    22ac:	0f be       	out	0x3f, r0	; 63
    22ae:	cd bf       	out	0x3d, r28	; 61
    22b0:	df 91       	pop	r29
    22b2:	cf 91       	pop	r28
    22b4:	0f 91       	pop	r16
    22b6:	ff 90       	pop	r15
    22b8:	ef 90       	pop	r14
    22ba:	df 90       	pop	r13
    22bc:	cf 90       	pop	r12
    22be:	08 95       	ret

000022c0 <vTaskSuspendAll>:
    22c0:	80 91 34 08 	lds	r24, 0x0834	; 0x800834 <uxSchedulerSuspended>
    22c4:	8f 5f       	subi	r24, 0xFF	; 255
    22c6:	80 93 34 08 	sts	0x0834, r24	; 0x800834 <uxSchedulerSuspended>
    22ca:	08 95       	ret

000022cc <xTaskGetTickCount>:
    22cc:	0f b6       	in	r0, 0x3f	; 63
    22ce:	f8 94       	cli
    22d0:	0f 92       	push	r0
    22d2:	80 91 3d 08 	lds	r24, 0x083D	; 0x80083d <xTickCount>
    22d6:	90 91 3e 08 	lds	r25, 0x083E	; 0x80083e <xTickCount+0x1>
    22da:	0f 90       	pop	r0
    22dc:	0f be       	out	0x3f, r0	; 63
    22de:	08 95       	ret

000022e0 <xTaskIncrementTick>:
    22e0:	cf 92       	push	r12
    22e2:	df 92       	push	r13
    22e4:	ef 92       	push	r14
    22e6:	ff 92       	push	r15
    22e8:	0f 93       	push	r16
    22ea:	1f 93       	push	r17
    22ec:	cf 93       	push	r28
    22ee:	df 93       	push	r29
    22f0:	80 91 34 08 	lds	r24, 0x0834	; 0x800834 <uxSchedulerSuspended>
    22f4:	81 11       	cpse	r24, r1
    22f6:	98 c0       	rjmp	.+304    	; 0x2428 <xTaskIncrementTick+0x148>
    22f8:	e0 90 3d 08 	lds	r14, 0x083D	; 0x80083d <xTickCount>
    22fc:	f0 90 3e 08 	lds	r15, 0x083E	; 0x80083e <xTickCount+0x1>
    2300:	8f ef       	ldi	r24, 0xFF	; 255
    2302:	e8 1a       	sub	r14, r24
    2304:	f8 0a       	sbc	r15, r24
    2306:	f0 92 3e 08 	sts	0x083E, r15	; 0x80083e <xTickCount+0x1>
    230a:	e0 92 3d 08 	sts	0x083D, r14	; 0x80083d <xTickCount>
    230e:	e1 14       	cp	r14, r1
    2310:	f1 04       	cpc	r15, r1
    2312:	b1 f4       	brne	.+44     	; 0x2340 <xTaskIncrementTick+0x60>
    2314:	80 91 5e 08 	lds	r24, 0x085E	; 0x80085e <pxDelayedTaskList>
    2318:	90 91 5f 08 	lds	r25, 0x085F	; 0x80085f <pxDelayedTaskList+0x1>
    231c:	20 91 5c 08 	lds	r18, 0x085C	; 0x80085c <pxOverflowDelayedTaskList>
    2320:	30 91 5d 08 	lds	r19, 0x085D	; 0x80085d <pxOverflowDelayedTaskList+0x1>
    2324:	30 93 5f 08 	sts	0x085F, r19	; 0x80085f <pxDelayedTaskList+0x1>
    2328:	20 93 5e 08 	sts	0x085E, r18	; 0x80085e <pxDelayedTaskList>
    232c:	90 93 5d 08 	sts	0x085D, r25	; 0x80085d <pxOverflowDelayedTaskList+0x1>
    2330:	80 93 5c 08 	sts	0x085C, r24	; 0x80085c <pxOverflowDelayedTaskList>
    2334:	80 91 38 08 	lds	r24, 0x0838	; 0x800838 <xNumOfOverflows>
    2338:	8f 5f       	subi	r24, 0xFF	; 255
    233a:	80 93 38 08 	sts	0x0838, r24	; 0x800838 <xNumOfOverflows>
    233e:	09 de       	rcall	.-1006   	; 0x1f52 <prvResetNextTaskUnblockTime>
    2340:	80 91 35 08 	lds	r24, 0x0835	; 0x800835 <xNextTaskUnblockTime>
    2344:	90 91 36 08 	lds	r25, 0x0836	; 0x800836 <xNextTaskUnblockTime+0x1>
    2348:	e8 16       	cp	r14, r24
    234a:	f9 06       	cpc	r15, r25
    234c:	10 f4       	brcc	.+4      	; 0x2352 <xTaskIncrementTick+0x72>
    234e:	d1 2c       	mov	r13, r1
    2350:	53 c0       	rjmp	.+166    	; 0x23f8 <xTaskIncrementTick+0x118>
    2352:	d1 2c       	mov	r13, r1
    2354:	cc 24       	eor	r12, r12
    2356:	c3 94       	inc	r12
    2358:	e0 91 5e 08 	lds	r30, 0x085E	; 0x80085e <pxDelayedTaskList>
    235c:	f0 91 5f 08 	lds	r31, 0x085F	; 0x80085f <pxDelayedTaskList+0x1>
    2360:	80 81       	ld	r24, Z
    2362:	81 11       	cpse	r24, r1
    2364:	07 c0       	rjmp	.+14     	; 0x2374 <xTaskIncrementTick+0x94>
    2366:	8f ef       	ldi	r24, 0xFF	; 255
    2368:	9f ef       	ldi	r25, 0xFF	; 255
    236a:	90 93 36 08 	sts	0x0836, r25	; 0x800836 <xNextTaskUnblockTime+0x1>
    236e:	80 93 35 08 	sts	0x0835, r24	; 0x800835 <xNextTaskUnblockTime>
    2372:	42 c0       	rjmp	.+132    	; 0x23f8 <xTaskIncrementTick+0x118>
    2374:	e0 91 5e 08 	lds	r30, 0x085E	; 0x80085e <pxDelayedTaskList>
    2378:	f0 91 5f 08 	lds	r31, 0x085F	; 0x80085f <pxDelayedTaskList+0x1>
    237c:	05 80       	ldd	r0, Z+5	; 0x05
    237e:	f6 81       	ldd	r31, Z+6	; 0x06
    2380:	e0 2d       	mov	r30, r0
    2382:	c6 81       	ldd	r28, Z+6	; 0x06
    2384:	d7 81       	ldd	r29, Z+7	; 0x07
    2386:	8a 81       	ldd	r24, Y+2	; 0x02
    2388:	9b 81       	ldd	r25, Y+3	; 0x03
    238a:	e8 16       	cp	r14, r24
    238c:	f9 06       	cpc	r15, r25
    238e:	28 f4       	brcc	.+10     	; 0x239a <xTaskIncrementTick+0xba>
    2390:	90 93 36 08 	sts	0x0836, r25	; 0x800836 <xNextTaskUnblockTime+0x1>
    2394:	80 93 35 08 	sts	0x0835, r24	; 0x800835 <xNextTaskUnblockTime>
    2398:	2f c0       	rjmp	.+94     	; 0x23f8 <xTaskIncrementTick+0x118>
    239a:	8e 01       	movw	r16, r28
    239c:	0e 5f       	subi	r16, 0xFE	; 254
    239e:	1f 4f       	sbci	r17, 0xFF	; 255
    23a0:	c8 01       	movw	r24, r16
    23a2:	0e 94 1b 09 	call	0x1236	; 0x1236 <uxListRemove>
    23a6:	8c 89       	ldd	r24, Y+20	; 0x14
    23a8:	9d 89       	ldd	r25, Y+21	; 0x15
    23aa:	89 2b       	or	r24, r25
    23ac:	21 f0       	breq	.+8      	; 0x23b6 <xTaskIncrementTick+0xd6>
    23ae:	ce 01       	movw	r24, r28
    23b0:	0c 96       	adiw	r24, 0x0c	; 12
    23b2:	0e 94 1b 09 	call	0x1236	; 0x1236 <uxListRemove>
    23b6:	8e 89       	ldd	r24, Y+22	; 0x16
    23b8:	90 91 3c 08 	lds	r25, 0x083C	; 0x80083c <uxTopReadyPriority>
    23bc:	98 17       	cp	r25, r24
    23be:	10 f4       	brcc	.+4      	; 0x23c4 <xTaskIncrementTick+0xe4>
    23c0:	80 93 3c 08 	sts	0x083C, r24	; 0x80083c <uxTopReadyPriority>
    23c4:	90 e0       	ldi	r25, 0x00	; 0
    23c6:	9c 01       	movw	r18, r24
    23c8:	22 0f       	add	r18, r18
    23ca:	33 1f       	adc	r19, r19
    23cc:	22 0f       	add	r18, r18
    23ce:	33 1f       	adc	r19, r19
    23d0:	22 0f       	add	r18, r18
    23d2:	33 1f       	adc	r19, r19
    23d4:	82 0f       	add	r24, r18
    23d6:	93 1f       	adc	r25, r19
    23d8:	b8 01       	movw	r22, r16
    23da:	80 5a       	subi	r24, 0xA0	; 160
    23dc:	97 4f       	sbci	r25, 0xF7	; 247
    23de:	0e 94 c9 08 	call	0x1192	; 0x1192 <vListInsertEnd>
    23e2:	e0 91 84 08 	lds	r30, 0x0884	; 0x800884 <pxCurrentTCB>
    23e6:	f0 91 85 08 	lds	r31, 0x0885	; 0x800885 <pxCurrentTCB+0x1>
    23ea:	9e 89       	ldd	r25, Y+22	; 0x16
    23ec:	86 89       	ldd	r24, Z+22	; 0x16
    23ee:	98 17       	cp	r25, r24
    23f0:	08 f4       	brcc	.+2      	; 0x23f4 <xTaskIncrementTick+0x114>
    23f2:	b2 cf       	rjmp	.-156    	; 0x2358 <xTaskIncrementTick+0x78>
    23f4:	dc 2c       	mov	r13, r12
    23f6:	b0 cf       	rjmp	.-160    	; 0x2358 <xTaskIncrementTick+0x78>
    23f8:	e0 91 84 08 	lds	r30, 0x0884	; 0x800884 <pxCurrentTCB>
    23fc:	f0 91 85 08 	lds	r31, 0x0885	; 0x800885 <pxCurrentTCB+0x1>
    2400:	86 89       	ldd	r24, Z+22	; 0x16
    2402:	90 e0       	ldi	r25, 0x00	; 0
    2404:	fc 01       	movw	r30, r24
    2406:	ee 0f       	add	r30, r30
    2408:	ff 1f       	adc	r31, r31
    240a:	ee 0f       	add	r30, r30
    240c:	ff 1f       	adc	r31, r31
    240e:	ee 0f       	add	r30, r30
    2410:	ff 1f       	adc	r31, r31
    2412:	8e 0f       	add	r24, r30
    2414:	9f 1f       	adc	r25, r31
    2416:	fc 01       	movw	r30, r24
    2418:	e0 5a       	subi	r30, 0xA0	; 160
    241a:	f7 4f       	sbci	r31, 0xF7	; 247
    241c:	80 81       	ld	r24, Z
    241e:	82 30       	cpi	r24, 0x02	; 2
    2420:	48 f0       	brcs	.+18     	; 0x2434 <xTaskIncrementTick+0x154>
    2422:	dd 24       	eor	r13, r13
    2424:	d3 94       	inc	r13
    2426:	06 c0       	rjmp	.+12     	; 0x2434 <xTaskIncrementTick+0x154>
    2428:	80 91 3a 08 	lds	r24, 0x083A	; 0x80083a <uxPendedTicks>
    242c:	8f 5f       	subi	r24, 0xFF	; 255
    242e:	80 93 3a 08 	sts	0x083A, r24	; 0x80083a <uxPendedTicks>
    2432:	d1 2c       	mov	r13, r1
    2434:	80 91 39 08 	lds	r24, 0x0839	; 0x800839 <xYieldPending>
    2438:	88 23       	and	r24, r24
    243a:	11 f0       	breq	.+4      	; 0x2440 <xTaskIncrementTick+0x160>
    243c:	dd 24       	eor	r13, r13
    243e:	d3 94       	inc	r13
    2440:	8d 2d       	mov	r24, r13
    2442:	df 91       	pop	r29
    2444:	cf 91       	pop	r28
    2446:	1f 91       	pop	r17
    2448:	0f 91       	pop	r16
    244a:	ff 90       	pop	r15
    244c:	ef 90       	pop	r14
    244e:	df 90       	pop	r13
    2450:	cf 90       	pop	r12
    2452:	08 95       	ret

00002454 <xTaskResumeAll>:
    2454:	df 92       	push	r13
    2456:	ef 92       	push	r14
    2458:	ff 92       	push	r15
    245a:	0f 93       	push	r16
    245c:	1f 93       	push	r17
    245e:	cf 93       	push	r28
    2460:	df 93       	push	r29
    2462:	0f b6       	in	r0, 0x3f	; 63
    2464:	f8 94       	cli
    2466:	0f 92       	push	r0
    2468:	80 91 34 08 	lds	r24, 0x0834	; 0x800834 <uxSchedulerSuspended>
    246c:	81 50       	subi	r24, 0x01	; 1
    246e:	80 93 34 08 	sts	0x0834, r24	; 0x800834 <uxSchedulerSuspended>
    2472:	80 91 34 08 	lds	r24, 0x0834	; 0x800834 <uxSchedulerSuspended>
    2476:	81 11       	cpse	r24, r1
    2478:	5d c0       	rjmp	.+186    	; 0x2534 <xTaskResumeAll+0xe0>
    247a:	80 91 3f 08 	lds	r24, 0x083F	; 0x80083f <uxCurrentNumberOfTasks>
    247e:	81 11       	cpse	r24, r1
    2480:	33 c0       	rjmp	.+102    	; 0x24e8 <xTaskResumeAll+0x94>
    2482:	5b c0       	rjmp	.+182    	; 0x253a <xTaskResumeAll+0xe6>
    2484:	d7 01       	movw	r26, r14
    2486:	15 96       	adiw	r26, 0x05	; 5
    2488:	ed 91       	ld	r30, X+
    248a:	fc 91       	ld	r31, X
    248c:	16 97       	sbiw	r26, 0x06	; 6
    248e:	c6 81       	ldd	r28, Z+6	; 0x06
    2490:	d7 81       	ldd	r29, Z+7	; 0x07
    2492:	ce 01       	movw	r24, r28
    2494:	0c 96       	adiw	r24, 0x0c	; 12
    2496:	0e 94 1b 09 	call	0x1236	; 0x1236 <uxListRemove>
    249a:	8e 01       	movw	r16, r28
    249c:	0e 5f       	subi	r16, 0xFE	; 254
    249e:	1f 4f       	sbci	r17, 0xFF	; 255
    24a0:	c8 01       	movw	r24, r16
    24a2:	0e 94 1b 09 	call	0x1236	; 0x1236 <uxListRemove>
    24a6:	8e 89       	ldd	r24, Y+22	; 0x16
    24a8:	90 91 3c 08 	lds	r25, 0x083C	; 0x80083c <uxTopReadyPriority>
    24ac:	98 17       	cp	r25, r24
    24ae:	10 f4       	brcc	.+4      	; 0x24b4 <xTaskResumeAll+0x60>
    24b0:	80 93 3c 08 	sts	0x083C, r24	; 0x80083c <uxTopReadyPriority>
    24b4:	90 e0       	ldi	r25, 0x00	; 0
    24b6:	9c 01       	movw	r18, r24
    24b8:	22 0f       	add	r18, r18
    24ba:	33 1f       	adc	r19, r19
    24bc:	22 0f       	add	r18, r18
    24be:	33 1f       	adc	r19, r19
    24c0:	22 0f       	add	r18, r18
    24c2:	33 1f       	adc	r19, r19
    24c4:	82 0f       	add	r24, r18
    24c6:	93 1f       	adc	r25, r19
    24c8:	b8 01       	movw	r22, r16
    24ca:	80 5a       	subi	r24, 0xA0	; 160
    24cc:	97 4f       	sbci	r25, 0xF7	; 247
    24ce:	0e 94 c9 08 	call	0x1192	; 0x1192 <vListInsertEnd>
    24d2:	e0 91 84 08 	lds	r30, 0x0884	; 0x800884 <pxCurrentTCB>
    24d6:	f0 91 85 08 	lds	r31, 0x0885	; 0x800885 <pxCurrentTCB+0x1>
    24da:	9e 89       	ldd	r25, Y+22	; 0x16
    24dc:	86 89       	ldd	r24, Z+22	; 0x16
    24de:	98 17       	cp	r25, r24
    24e0:	68 f0       	brcs	.+26     	; 0x24fc <xTaskResumeAll+0xa8>
    24e2:	d0 92 39 08 	sts	0x0839, r13	; 0x800839 <xYieldPending>
    24e6:	0a c0       	rjmp	.+20     	; 0x24fc <xTaskResumeAll+0xa8>
    24e8:	c0 e0       	ldi	r28, 0x00	; 0
    24ea:	d0 e0       	ldi	r29, 0x00	; 0
    24ec:	0f 2e       	mov	r0, r31
    24ee:	f3 e5       	ldi	r31, 0x53	; 83
    24f0:	ef 2e       	mov	r14, r31
    24f2:	f8 e0       	ldi	r31, 0x08	; 8
    24f4:	ff 2e       	mov	r15, r31
    24f6:	f0 2d       	mov	r31, r0
    24f8:	dd 24       	eor	r13, r13
    24fa:	d3 94       	inc	r13
    24fc:	f7 01       	movw	r30, r14
    24fe:	80 81       	ld	r24, Z
    2500:	81 11       	cpse	r24, r1
    2502:	c0 cf       	rjmp	.-128    	; 0x2484 <xTaskResumeAll+0x30>
    2504:	cd 2b       	or	r28, r29
    2506:	09 f0       	breq	.+2      	; 0x250a <xTaskResumeAll+0xb6>
    2508:	24 dd       	rcall	.-1464   	; 0x1f52 <prvResetNextTaskUnblockTime>
    250a:	c0 91 3a 08 	lds	r28, 0x083A	; 0x80083a <uxPendedTicks>
    250e:	cc 23       	and	r28, r28
    2510:	49 f0       	breq	.+18     	; 0x2524 <xTaskResumeAll+0xd0>
    2512:	d1 e0       	ldi	r29, 0x01	; 1
    2514:	e5 de       	rcall	.-566    	; 0x22e0 <xTaskIncrementTick>
    2516:	81 11       	cpse	r24, r1
    2518:	d0 93 39 08 	sts	0x0839, r29	; 0x800839 <xYieldPending>
    251c:	c1 50       	subi	r28, 0x01	; 1
    251e:	d1 f7       	brne	.-12     	; 0x2514 <xTaskResumeAll+0xc0>
    2520:	10 92 3a 08 	sts	0x083A, r1	; 0x80083a <uxPendedTicks>
    2524:	80 91 39 08 	lds	r24, 0x0839	; 0x800839 <xYieldPending>
    2528:	88 23       	and	r24, r24
    252a:	31 f0       	breq	.+12     	; 0x2538 <xTaskResumeAll+0xe4>
    252c:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <vPortYield>
    2530:	81 e0       	ldi	r24, 0x01	; 1
    2532:	03 c0       	rjmp	.+6      	; 0x253a <xTaskResumeAll+0xe6>
    2534:	80 e0       	ldi	r24, 0x00	; 0
    2536:	01 c0       	rjmp	.+2      	; 0x253a <xTaskResumeAll+0xe6>
    2538:	80 e0       	ldi	r24, 0x00	; 0
    253a:	0f 90       	pop	r0
    253c:	0f be       	out	0x3f, r0	; 63
    253e:	df 91       	pop	r29
    2540:	cf 91       	pop	r28
    2542:	1f 91       	pop	r17
    2544:	0f 91       	pop	r16
    2546:	ff 90       	pop	r15
    2548:	ef 90       	pop	r14
    254a:	df 90       	pop	r13
    254c:	08 95       	ret

0000254e <vTaskDelay>:
    254e:	cf 93       	push	r28
    2550:	df 93       	push	r29
    2552:	ec 01       	movw	r28, r24
    2554:	89 2b       	or	r24, r25
    2556:	39 f0       	breq	.+14     	; 0x2566 <vTaskDelay+0x18>
    2558:	b3 de       	rcall	.-666    	; 0x22c0 <vTaskSuspendAll>
    255a:	60 e0       	ldi	r22, 0x00	; 0
    255c:	ce 01       	movw	r24, r28
    255e:	18 dd       	rcall	.-1488   	; 0x1f90 <prvAddCurrentTaskToDelayedList>
    2560:	79 df       	rcall	.-270    	; 0x2454 <xTaskResumeAll>
    2562:	81 11       	cpse	r24, r1
    2564:	02 c0       	rjmp	.+4      	; 0x256a <vTaskDelay+0x1c>
    2566:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <vPortYield>
    256a:	df 91       	pop	r29
    256c:	cf 91       	pop	r28
    256e:	08 95       	ret

00002570 <vTaskSwitchContext>:
    2570:	80 91 34 08 	lds	r24, 0x0834	; 0x800834 <uxSchedulerSuspended>
    2574:	88 23       	and	r24, r24
    2576:	21 f0       	breq	.+8      	; 0x2580 <vTaskSwitchContext+0x10>
    2578:	81 e0       	ldi	r24, 0x01	; 1
    257a:	80 93 39 08 	sts	0x0839, r24	; 0x800839 <xYieldPending>
    257e:	08 95       	ret
    2580:	10 92 39 08 	sts	0x0839, r1	; 0x800839 <xYieldPending>
    2584:	a0 91 84 08 	lds	r26, 0x0884	; 0x800884 <pxCurrentTCB>
    2588:	b0 91 85 08 	lds	r27, 0x0885	; 0x800885 <pxCurrentTCB+0x1>
    258c:	e0 91 84 08 	lds	r30, 0x0884	; 0x800884 <pxCurrentTCB>
    2590:	f0 91 85 08 	lds	r31, 0x0885	; 0x800885 <pxCurrentTCB+0x1>
    2594:	2d 91       	ld	r18, X+
    2596:	3c 91       	ld	r19, X
    2598:	87 89       	ldd	r24, Z+23	; 0x17
    259a:	90 8d       	ldd	r25, Z+24	; 0x18
    259c:	82 17       	cp	r24, r18
    259e:	93 07       	cpc	r25, r19
    25a0:	60 f0       	brcs	.+24     	; 0x25ba <vTaskSwitchContext+0x4a>
    25a2:	60 91 84 08 	lds	r22, 0x0884	; 0x800884 <pxCurrentTCB>
    25a6:	70 91 85 08 	lds	r23, 0x0885	; 0x800885 <pxCurrentTCB+0x1>
    25aa:	80 91 84 08 	lds	r24, 0x0884	; 0x800884 <pxCurrentTCB>
    25ae:	90 91 85 08 	lds	r25, 0x0885	; 0x800885 <pxCurrentTCB+0x1>
    25b2:	67 5e       	subi	r22, 0xE7	; 231
    25b4:	7f 4f       	sbci	r23, 0xFF	; 255
    25b6:	0e 94 8a 08 	call	0x1114	; 0x1114 <vApplicationStackOverflowHook>
    25ba:	20 91 3c 08 	lds	r18, 0x083C	; 0x80083c <uxTopReadyPriority>
    25be:	82 2f       	mov	r24, r18
    25c0:	90 e0       	ldi	r25, 0x00	; 0
    25c2:	fc 01       	movw	r30, r24
    25c4:	ee 0f       	add	r30, r30
    25c6:	ff 1f       	adc	r31, r31
    25c8:	ee 0f       	add	r30, r30
    25ca:	ff 1f       	adc	r31, r31
    25cc:	ee 0f       	add	r30, r30
    25ce:	ff 1f       	adc	r31, r31
    25d0:	e8 0f       	add	r30, r24
    25d2:	f9 1f       	adc	r31, r25
    25d4:	e0 5a       	subi	r30, 0xA0	; 160
    25d6:	f7 4f       	sbci	r31, 0xF7	; 247
    25d8:	30 81       	ld	r19, Z
    25da:	31 11       	cpse	r19, r1
    25dc:	11 c0       	rjmp	.+34     	; 0x2600 <vTaskSwitchContext+0x90>
    25de:	21 50       	subi	r18, 0x01	; 1
    25e0:	82 2f       	mov	r24, r18
    25e2:	90 e0       	ldi	r25, 0x00	; 0
    25e4:	fc 01       	movw	r30, r24
    25e6:	ee 0f       	add	r30, r30
    25e8:	ff 1f       	adc	r31, r31
    25ea:	ee 0f       	add	r30, r30
    25ec:	ff 1f       	adc	r31, r31
    25ee:	ee 0f       	add	r30, r30
    25f0:	ff 1f       	adc	r31, r31
    25f2:	e8 0f       	add	r30, r24
    25f4:	f9 1f       	adc	r31, r25
    25f6:	e0 5a       	subi	r30, 0xA0	; 160
    25f8:	f7 4f       	sbci	r31, 0xF7	; 247
    25fa:	30 81       	ld	r19, Z
    25fc:	33 23       	and	r19, r19
    25fe:	79 f3       	breq	.-34     	; 0x25de <vTaskSwitchContext+0x6e>
    2600:	ac 01       	movw	r20, r24
    2602:	44 0f       	add	r20, r20
    2604:	55 1f       	adc	r21, r21
    2606:	44 0f       	add	r20, r20
    2608:	55 1f       	adc	r21, r21
    260a:	44 0f       	add	r20, r20
    260c:	55 1f       	adc	r21, r21
    260e:	48 0f       	add	r20, r24
    2610:	59 1f       	adc	r21, r25
    2612:	da 01       	movw	r26, r20
    2614:	a0 5a       	subi	r26, 0xA0	; 160
    2616:	b7 4f       	sbci	r27, 0xF7	; 247
    2618:	11 96       	adiw	r26, 0x01	; 1
    261a:	ed 91       	ld	r30, X+
    261c:	fc 91       	ld	r31, X
    261e:	12 97       	sbiw	r26, 0x02	; 2
    2620:	02 80       	ldd	r0, Z+2	; 0x02
    2622:	f3 81       	ldd	r31, Z+3	; 0x03
    2624:	e0 2d       	mov	r30, r0
    2626:	12 96       	adiw	r26, 0x02	; 2
    2628:	fc 93       	st	X, r31
    262a:	ee 93       	st	-X, r30
    262c:	11 97       	sbiw	r26, 0x01	; 1
    262e:	4d 59       	subi	r20, 0x9D	; 157
    2630:	57 4f       	sbci	r21, 0xF7	; 247
    2632:	e4 17       	cp	r30, r20
    2634:	f5 07       	cpc	r31, r21
    2636:	29 f4       	brne	.+10     	; 0x2642 <vTaskSwitchContext+0xd2>
    2638:	42 81       	ldd	r20, Z+2	; 0x02
    263a:	53 81       	ldd	r21, Z+3	; 0x03
    263c:	fd 01       	movw	r30, r26
    263e:	52 83       	std	Z+2, r21	; 0x02
    2640:	41 83       	std	Z+1, r20	; 0x01
    2642:	fc 01       	movw	r30, r24
    2644:	ee 0f       	add	r30, r30
    2646:	ff 1f       	adc	r31, r31
    2648:	ee 0f       	add	r30, r30
    264a:	ff 1f       	adc	r31, r31
    264c:	ee 0f       	add	r30, r30
    264e:	ff 1f       	adc	r31, r31
    2650:	8e 0f       	add	r24, r30
    2652:	9f 1f       	adc	r25, r31
    2654:	fc 01       	movw	r30, r24
    2656:	e0 5a       	subi	r30, 0xA0	; 160
    2658:	f7 4f       	sbci	r31, 0xF7	; 247
    265a:	01 80       	ldd	r0, Z+1	; 0x01
    265c:	f2 81       	ldd	r31, Z+2	; 0x02
    265e:	e0 2d       	mov	r30, r0
    2660:	86 81       	ldd	r24, Z+6	; 0x06
    2662:	97 81       	ldd	r25, Z+7	; 0x07
    2664:	90 93 85 08 	sts	0x0885, r25	; 0x800885 <pxCurrentTCB+0x1>
    2668:	80 93 84 08 	sts	0x0884, r24	; 0x800884 <pxCurrentTCB>
    266c:	20 93 3c 08 	sts	0x083C, r18	; 0x80083c <uxTopReadyPriority>
    2670:	08 95       	ret

00002672 <vTaskPlaceOnEventList>:
    2672:	cf 93       	push	r28
    2674:	df 93       	push	r29
    2676:	eb 01       	movw	r28, r22
    2678:	60 91 84 08 	lds	r22, 0x0884	; 0x800884 <pxCurrentTCB>
    267c:	70 91 85 08 	lds	r23, 0x0885	; 0x800885 <pxCurrentTCB+0x1>
    2680:	64 5f       	subi	r22, 0xF4	; 244
    2682:	7f 4f       	sbci	r23, 0xFF	; 255
    2684:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <vListInsert>
    2688:	61 e0       	ldi	r22, 0x01	; 1
    268a:	ce 01       	movw	r24, r28
    268c:	81 dc       	rcall	.-1790   	; 0x1f90 <prvAddCurrentTaskToDelayedList>
    268e:	df 91       	pop	r29
    2690:	cf 91       	pop	r28
    2692:	08 95       	ret

00002694 <vTaskPlaceOnEventListRestricted>:
    2694:	0f 93       	push	r16
    2696:	1f 93       	push	r17
    2698:	cf 93       	push	r28
    269a:	8b 01       	movw	r16, r22
    269c:	c4 2f       	mov	r28, r20
    269e:	60 91 84 08 	lds	r22, 0x0884	; 0x800884 <pxCurrentTCB>
    26a2:	70 91 85 08 	lds	r23, 0x0885	; 0x800885 <pxCurrentTCB+0x1>
    26a6:	64 5f       	subi	r22, 0xF4	; 244
    26a8:	7f 4f       	sbci	r23, 0xFF	; 255
    26aa:	0e 94 c9 08 	call	0x1192	; 0x1192 <vListInsertEnd>
    26ae:	cc 23       	and	r28, r28
    26b0:	11 f0       	breq	.+4      	; 0x26b6 <vTaskPlaceOnEventListRestricted+0x22>
    26b2:	0f ef       	ldi	r16, 0xFF	; 255
    26b4:	1f ef       	ldi	r17, 0xFF	; 255
    26b6:	6c 2f       	mov	r22, r28
    26b8:	c8 01       	movw	r24, r16
    26ba:	6a dc       	rcall	.-1836   	; 0x1f90 <prvAddCurrentTaskToDelayedList>
    26bc:	cf 91       	pop	r28
    26be:	1f 91       	pop	r17
    26c0:	0f 91       	pop	r16
    26c2:	08 95       	ret

000026c4 <xTaskRemoveFromEventList>:
    26c4:	0f 93       	push	r16
    26c6:	1f 93       	push	r17
    26c8:	cf 93       	push	r28
    26ca:	df 93       	push	r29
    26cc:	dc 01       	movw	r26, r24
    26ce:	15 96       	adiw	r26, 0x05	; 5
    26d0:	ed 91       	ld	r30, X+
    26d2:	fc 91       	ld	r31, X
    26d4:	16 97       	sbiw	r26, 0x06	; 6
    26d6:	c6 81       	ldd	r28, Z+6	; 0x06
    26d8:	d7 81       	ldd	r29, Z+7	; 0x07
    26da:	8e 01       	movw	r16, r28
    26dc:	04 5f       	subi	r16, 0xF4	; 244
    26de:	1f 4f       	sbci	r17, 0xFF	; 255
    26e0:	c8 01       	movw	r24, r16
    26e2:	0e 94 1b 09 	call	0x1236	; 0x1236 <uxListRemove>
    26e6:	80 91 34 08 	lds	r24, 0x0834	; 0x800834 <uxSchedulerSuspended>
    26ea:	81 11       	cpse	r24, r1
    26ec:	1c c0       	rjmp	.+56     	; 0x2726 <xTaskRemoveFromEventList+0x62>
    26ee:	0a 50       	subi	r16, 0x0A	; 10
    26f0:	11 09       	sbc	r17, r1
    26f2:	c8 01       	movw	r24, r16
    26f4:	0e 94 1b 09 	call	0x1236	; 0x1236 <uxListRemove>
    26f8:	8e 89       	ldd	r24, Y+22	; 0x16
    26fa:	90 91 3c 08 	lds	r25, 0x083C	; 0x80083c <uxTopReadyPriority>
    26fe:	98 17       	cp	r25, r24
    2700:	10 f4       	brcc	.+4      	; 0x2706 <xTaskRemoveFromEventList+0x42>
    2702:	80 93 3c 08 	sts	0x083C, r24	; 0x80083c <uxTopReadyPriority>
    2706:	90 e0       	ldi	r25, 0x00	; 0
    2708:	9c 01       	movw	r18, r24
    270a:	22 0f       	add	r18, r18
    270c:	33 1f       	adc	r19, r19
    270e:	22 0f       	add	r18, r18
    2710:	33 1f       	adc	r19, r19
    2712:	22 0f       	add	r18, r18
    2714:	33 1f       	adc	r19, r19
    2716:	82 0f       	add	r24, r18
    2718:	93 1f       	adc	r25, r19
    271a:	b8 01       	movw	r22, r16
    271c:	80 5a       	subi	r24, 0xA0	; 160
    271e:	97 4f       	sbci	r25, 0xF7	; 247
    2720:	0e 94 c9 08 	call	0x1192	; 0x1192 <vListInsertEnd>
    2724:	05 c0       	rjmp	.+10     	; 0x2730 <xTaskRemoveFromEventList+0x6c>
    2726:	b8 01       	movw	r22, r16
    2728:	83 e5       	ldi	r24, 0x53	; 83
    272a:	98 e0       	ldi	r25, 0x08	; 8
    272c:	0e 94 c9 08 	call	0x1192	; 0x1192 <vListInsertEnd>
    2730:	e0 91 84 08 	lds	r30, 0x0884	; 0x800884 <pxCurrentTCB>
    2734:	f0 91 85 08 	lds	r31, 0x0885	; 0x800885 <pxCurrentTCB+0x1>
    2738:	9e 89       	ldd	r25, Y+22	; 0x16
    273a:	86 89       	ldd	r24, Z+22	; 0x16
    273c:	89 17       	cp	r24, r25
    273e:	20 f4       	brcc	.+8      	; 0x2748 <xTaskRemoveFromEventList+0x84>
    2740:	81 e0       	ldi	r24, 0x01	; 1
    2742:	80 93 39 08 	sts	0x0839, r24	; 0x800839 <xYieldPending>
    2746:	01 c0       	rjmp	.+2      	; 0x274a <xTaskRemoveFromEventList+0x86>
    2748:	80 e0       	ldi	r24, 0x00	; 0
    274a:	df 91       	pop	r29
    274c:	cf 91       	pop	r28
    274e:	1f 91       	pop	r17
    2750:	0f 91       	pop	r16
    2752:	08 95       	ret

00002754 <vTaskSetTimeOutState>:
    2754:	0f b6       	in	r0, 0x3f	; 63
    2756:	f8 94       	cli
    2758:	0f 92       	push	r0
    275a:	20 91 38 08 	lds	r18, 0x0838	; 0x800838 <xNumOfOverflows>
    275e:	fc 01       	movw	r30, r24
    2760:	20 83       	st	Z, r18
    2762:	20 91 3d 08 	lds	r18, 0x083D	; 0x80083d <xTickCount>
    2766:	30 91 3e 08 	lds	r19, 0x083E	; 0x80083e <xTickCount+0x1>
    276a:	32 83       	std	Z+2, r19	; 0x02
    276c:	21 83       	std	Z+1, r18	; 0x01
    276e:	0f 90       	pop	r0
    2770:	0f be       	out	0x3f, r0	; 63
    2772:	08 95       	ret

00002774 <vTaskInternalSetTimeOutState>:
    2774:	20 91 38 08 	lds	r18, 0x0838	; 0x800838 <xNumOfOverflows>
    2778:	fc 01       	movw	r30, r24
    277a:	20 83       	st	Z, r18
    277c:	20 91 3d 08 	lds	r18, 0x083D	; 0x80083d <xTickCount>
    2780:	30 91 3e 08 	lds	r19, 0x083E	; 0x80083e <xTickCount+0x1>
    2784:	32 83       	std	Z+2, r19	; 0x02
    2786:	21 83       	std	Z+1, r18	; 0x01
    2788:	08 95       	ret

0000278a <xTaskCheckForTimeOut>:
    278a:	cf 93       	push	r28
    278c:	df 93       	push	r29
    278e:	0f b6       	in	r0, 0x3f	; 63
    2790:	f8 94       	cli
    2792:	0f 92       	push	r0
    2794:	20 91 3d 08 	lds	r18, 0x083D	; 0x80083d <xTickCount>
    2798:	30 91 3e 08 	lds	r19, 0x083E	; 0x80083e <xTickCount+0x1>
    279c:	db 01       	movw	r26, r22
    279e:	4d 91       	ld	r20, X+
    27a0:	5c 91       	ld	r21, X
    27a2:	4f 3f       	cpi	r20, 0xFF	; 255
    27a4:	bf ef       	ldi	r27, 0xFF	; 255
    27a6:	5b 07       	cpc	r21, r27
    27a8:	e9 f0       	breq	.+58     	; 0x27e4 <xTaskCheckForTimeOut+0x5a>
    27aa:	ec 01       	movw	r28, r24
    27ac:	e9 81       	ldd	r30, Y+1	; 0x01
    27ae:	fa 81       	ldd	r31, Y+2	; 0x02
    27b0:	a0 91 38 08 	lds	r26, 0x0838	; 0x800838 <xNumOfOverflows>
    27b4:	b8 81       	ld	r27, Y
    27b6:	ba 17       	cp	r27, r26
    27b8:	19 f0       	breq	.+6      	; 0x27c0 <xTaskCheckForTimeOut+0x36>
    27ba:	2e 17       	cp	r18, r30
    27bc:	3f 07       	cpc	r19, r31
    27be:	a0 f4       	brcc	.+40     	; 0x27e8 <xTaskCheckForTimeOut+0x5e>
    27c0:	2e 1b       	sub	r18, r30
    27c2:	3f 0b       	sbc	r19, r31
    27c4:	24 17       	cp	r18, r20
    27c6:	35 07       	cpc	r19, r21
    27c8:	40 f4       	brcc	.+16     	; 0x27da <xTaskCheckForTimeOut+0x50>
    27ca:	fb 01       	movw	r30, r22
    27cc:	42 1b       	sub	r20, r18
    27ce:	53 0b       	sbc	r21, r19
    27d0:	51 83       	std	Z+1, r21	; 0x01
    27d2:	40 83       	st	Z, r20
    27d4:	cf df       	rcall	.-98     	; 0x2774 <vTaskInternalSetTimeOutState>
    27d6:	80 e0       	ldi	r24, 0x00	; 0
    27d8:	08 c0       	rjmp	.+16     	; 0x27ea <xTaskCheckForTimeOut+0x60>
    27da:	fb 01       	movw	r30, r22
    27dc:	11 82       	std	Z+1, r1	; 0x01
    27de:	10 82       	st	Z, r1
    27e0:	81 e0       	ldi	r24, 0x01	; 1
    27e2:	03 c0       	rjmp	.+6      	; 0x27ea <xTaskCheckForTimeOut+0x60>
    27e4:	80 e0       	ldi	r24, 0x00	; 0
    27e6:	01 c0       	rjmp	.+2      	; 0x27ea <xTaskCheckForTimeOut+0x60>
    27e8:	81 e0       	ldi	r24, 0x01	; 1
    27ea:	0f 90       	pop	r0
    27ec:	0f be       	out	0x3f, r0	; 63
    27ee:	df 91       	pop	r29
    27f0:	cf 91       	pop	r28
    27f2:	08 95       	ret

000027f4 <vTaskMissedYield>:
    27f4:	81 e0       	ldi	r24, 0x01	; 1
    27f6:	80 93 39 08 	sts	0x0839, r24	; 0x800839 <xYieldPending>
    27fa:	08 95       	ret

000027fc <xTaskGetCurrentTaskHandle>:
    27fc:	80 91 84 08 	lds	r24, 0x0884	; 0x800884 <pxCurrentTCB>
    2800:	90 91 85 08 	lds	r25, 0x0885	; 0x800885 <pxCurrentTCB+0x1>
    2804:	08 95       	ret

00002806 <xTaskGetSchedulerState>:
    2806:	80 91 3b 08 	lds	r24, 0x083B	; 0x80083b <xSchedulerRunning>
    280a:	88 23       	and	r24, r24
    280c:	31 f0       	breq	.+12     	; 0x281a <xTaskGetSchedulerState+0x14>
    280e:	80 91 34 08 	lds	r24, 0x0834	; 0x800834 <uxSchedulerSuspended>
    2812:	88 23       	and	r24, r24
    2814:	21 f0       	breq	.+8      	; 0x281e <xTaskGetSchedulerState+0x18>
    2816:	80 e0       	ldi	r24, 0x00	; 0
    2818:	08 95       	ret
    281a:	81 e0       	ldi	r24, 0x01	; 1
    281c:	08 95       	ret
    281e:	82 e0       	ldi	r24, 0x02	; 2
    2820:	08 95       	ret

00002822 <xTaskPriorityDisinherit>:
    2822:	0f 93       	push	r16
    2824:	1f 93       	push	r17
    2826:	cf 93       	push	r28
    2828:	df 93       	push	r29
    282a:	fc 01       	movw	r30, r24
    282c:	89 2b       	or	r24, r25
    282e:	79 f1       	breq	.+94     	; 0x288e <xTaskPriorityDisinherit+0x6c>
    2830:	82 a1       	ldd	r24, Z+34	; 0x22
    2832:	81 50       	subi	r24, 0x01	; 1
    2834:	82 a3       	std	Z+34, r24	; 0x22
    2836:	26 89       	ldd	r18, Z+22	; 0x16
    2838:	91 a1       	ldd	r25, Z+33	; 0x21
    283a:	29 17       	cp	r18, r25
    283c:	51 f1       	breq	.+84     	; 0x2892 <xTaskPriorityDisinherit+0x70>
    283e:	81 11       	cpse	r24, r1
    2840:	2a c0       	rjmp	.+84     	; 0x2896 <xTaskPriorityDisinherit+0x74>
    2842:	ef 01       	movw	r28, r30
    2844:	8f 01       	movw	r16, r30
    2846:	0e 5f       	subi	r16, 0xFE	; 254
    2848:	1f 4f       	sbci	r17, 0xFF	; 255
    284a:	c8 01       	movw	r24, r16
    284c:	0e 94 1b 09 	call	0x1236	; 0x1236 <uxListRemove>
    2850:	89 a1       	ldd	r24, Y+33	; 0x21
    2852:	8e 8b       	std	Y+22, r24	; 0x16
    2854:	24 e0       	ldi	r18, 0x04	; 4
    2856:	30 e0       	ldi	r19, 0x00	; 0
    2858:	28 1b       	sub	r18, r24
    285a:	31 09       	sbc	r19, r1
    285c:	3d 87       	std	Y+13, r19	; 0x0d
    285e:	2c 87       	std	Y+12, r18	; 0x0c
    2860:	90 91 3c 08 	lds	r25, 0x083C	; 0x80083c <uxTopReadyPriority>
    2864:	98 17       	cp	r25, r24
    2866:	10 f4       	brcc	.+4      	; 0x286c <xTaskPriorityDisinherit+0x4a>
    2868:	80 93 3c 08 	sts	0x083C, r24	; 0x80083c <uxTopReadyPriority>
    286c:	90 e0       	ldi	r25, 0x00	; 0
    286e:	9c 01       	movw	r18, r24
    2870:	22 0f       	add	r18, r18
    2872:	33 1f       	adc	r19, r19
    2874:	22 0f       	add	r18, r18
    2876:	33 1f       	adc	r19, r19
    2878:	22 0f       	add	r18, r18
    287a:	33 1f       	adc	r19, r19
    287c:	82 0f       	add	r24, r18
    287e:	93 1f       	adc	r25, r19
    2880:	b8 01       	movw	r22, r16
    2882:	80 5a       	subi	r24, 0xA0	; 160
    2884:	97 4f       	sbci	r25, 0xF7	; 247
    2886:	0e 94 c9 08 	call	0x1192	; 0x1192 <vListInsertEnd>
    288a:	81 e0       	ldi	r24, 0x01	; 1
    288c:	05 c0       	rjmp	.+10     	; 0x2898 <xTaskPriorityDisinherit+0x76>
    288e:	80 e0       	ldi	r24, 0x00	; 0
    2890:	03 c0       	rjmp	.+6      	; 0x2898 <xTaskPriorityDisinherit+0x76>
    2892:	80 e0       	ldi	r24, 0x00	; 0
    2894:	01 c0       	rjmp	.+2      	; 0x2898 <xTaskPriorityDisinherit+0x76>
    2896:	80 e0       	ldi	r24, 0x00	; 0
    2898:	df 91       	pop	r29
    289a:	cf 91       	pop	r28
    289c:	1f 91       	pop	r17
    289e:	0f 91       	pop	r16
    28a0:	08 95       	ret

000028a2 <xTaskNotifyWait>:
    28a2:	4f 92       	push	r4
    28a4:	5f 92       	push	r5
    28a6:	6f 92       	push	r6
    28a8:	7f 92       	push	r7
    28aa:	8f 92       	push	r8
    28ac:	9f 92       	push	r9
    28ae:	af 92       	push	r10
    28b0:	bf 92       	push	r11
    28b2:	ef 92       	push	r14
    28b4:	ff 92       	push	r15
    28b6:	0f 93       	push	r16
    28b8:	1f 93       	push	r17
    28ba:	49 01       	movw	r8, r18
    28bc:	5a 01       	movw	r10, r20
    28be:	0f b6       	in	r0, 0x3f	; 63
    28c0:	f8 94       	cli
    28c2:	0f 92       	push	r0
    28c4:	e0 91 84 08 	lds	r30, 0x0884	; 0x800884 <pxCurrentTCB>
    28c8:	f0 91 85 08 	lds	r31, 0x0885	; 0x800885 <pxCurrentTCB+0x1>
    28cc:	27 a1       	ldd	r18, Z+39	; 0x27
    28ce:	22 30       	cpi	r18, 0x02	; 2
    28d0:	21 f1       	breq	.+72     	; 0x291a <xTaskNotifyWait+0x78>
    28d2:	e0 91 84 08 	lds	r30, 0x0884	; 0x800884 <pxCurrentTCB>
    28d6:	f0 91 85 08 	lds	r31, 0x0885	; 0x800885 <pxCurrentTCB+0x1>
    28da:	43 a0       	ldd	r4, Z+35	; 0x23
    28dc:	54 a0       	ldd	r5, Z+36	; 0x24
    28de:	65 a0       	ldd	r6, Z+37	; 0x25
    28e0:	76 a0       	ldd	r7, Z+38	; 0x26
    28e2:	dc 01       	movw	r26, r24
    28e4:	cb 01       	movw	r24, r22
    28e6:	80 95       	com	r24
    28e8:	90 95       	com	r25
    28ea:	a0 95       	com	r26
    28ec:	b0 95       	com	r27
    28ee:	84 21       	and	r24, r4
    28f0:	95 21       	and	r25, r5
    28f2:	a6 21       	and	r26, r6
    28f4:	b7 21       	and	r27, r7
    28f6:	83 a3       	std	Z+35, r24	; 0x23
    28f8:	94 a3       	std	Z+36, r25	; 0x24
    28fa:	a5 a3       	std	Z+37, r26	; 0x25
    28fc:	b6 a3       	std	Z+38, r27	; 0x26
    28fe:	e0 91 84 08 	lds	r30, 0x0884	; 0x800884 <pxCurrentTCB>
    2902:	f0 91 85 08 	lds	r31, 0x0885	; 0x800885 <pxCurrentTCB+0x1>
    2906:	81 e0       	ldi	r24, 0x01	; 1
    2908:	87 a3       	std	Z+39, r24	; 0x27
    290a:	e1 14       	cp	r14, r1
    290c:	f1 04       	cpc	r15, r1
    290e:	29 f0       	breq	.+10     	; 0x291a <xTaskNotifyWait+0x78>
    2910:	61 e0       	ldi	r22, 0x01	; 1
    2912:	c7 01       	movw	r24, r14
    2914:	3d db       	rcall	.-2438   	; 0x1f90 <prvAddCurrentTaskToDelayedList>
    2916:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <vPortYield>
    291a:	0f 90       	pop	r0
    291c:	0f be       	out	0x3f, r0	; 63
    291e:	0f b6       	in	r0, 0x3f	; 63
    2920:	f8 94       	cli
    2922:	0f 92       	push	r0
    2924:	01 15       	cp	r16, r1
    2926:	11 05       	cpc	r17, r1
    2928:	69 f0       	breq	.+26     	; 0x2944 <xTaskNotifyWait+0xa2>
    292a:	e0 91 84 08 	lds	r30, 0x0884	; 0x800884 <pxCurrentTCB>
    292e:	f0 91 85 08 	lds	r31, 0x0885	; 0x800885 <pxCurrentTCB+0x1>
    2932:	83 a1       	ldd	r24, Z+35	; 0x23
    2934:	94 a1       	ldd	r25, Z+36	; 0x24
    2936:	a5 a1       	ldd	r26, Z+37	; 0x25
    2938:	b6 a1       	ldd	r27, Z+38	; 0x26
    293a:	f8 01       	movw	r30, r16
    293c:	80 83       	st	Z, r24
    293e:	91 83       	std	Z+1, r25	; 0x01
    2940:	a2 83       	std	Z+2, r26	; 0x02
    2942:	b3 83       	std	Z+3, r27	; 0x03
    2944:	e0 91 84 08 	lds	r30, 0x0884	; 0x800884 <pxCurrentTCB>
    2948:	f0 91 85 08 	lds	r31, 0x0885	; 0x800885 <pxCurrentTCB+0x1>
    294c:	87 a1       	ldd	r24, Z+39	; 0x27
    294e:	82 30       	cpi	r24, 0x02	; 2
    2950:	b1 f4       	brne	.+44     	; 0x297e <xTaskNotifyWait+0xdc>
    2952:	e0 91 84 08 	lds	r30, 0x0884	; 0x800884 <pxCurrentTCB>
    2956:	f0 91 85 08 	lds	r31, 0x0885	; 0x800885 <pxCurrentTCB+0x1>
    295a:	83 a1       	ldd	r24, Z+35	; 0x23
    295c:	94 a1       	ldd	r25, Z+36	; 0x24
    295e:	a5 a1       	ldd	r26, Z+37	; 0x25
    2960:	b6 a1       	ldd	r27, Z+38	; 0x26
    2962:	80 94       	com	r8
    2964:	90 94       	com	r9
    2966:	a0 94       	com	r10
    2968:	b0 94       	com	r11
    296a:	88 22       	and	r8, r24
    296c:	99 22       	and	r9, r25
    296e:	aa 22       	and	r10, r26
    2970:	bb 22       	and	r11, r27
    2972:	83 a2       	std	Z+35, r8	; 0x23
    2974:	94 a2       	std	Z+36, r9	; 0x24
    2976:	a5 a2       	std	Z+37, r10	; 0x25
    2978:	b6 a2       	std	Z+38, r11	; 0x26
    297a:	81 e0       	ldi	r24, 0x01	; 1
    297c:	01 c0       	rjmp	.+2      	; 0x2980 <xTaskNotifyWait+0xde>
    297e:	80 e0       	ldi	r24, 0x00	; 0
    2980:	e0 91 84 08 	lds	r30, 0x0884	; 0x800884 <pxCurrentTCB>
    2984:	f0 91 85 08 	lds	r31, 0x0885	; 0x800885 <pxCurrentTCB+0x1>
    2988:	17 a2       	std	Z+39, r1	; 0x27
    298a:	0f 90       	pop	r0
    298c:	0f be       	out	0x3f, r0	; 63
    298e:	1f 91       	pop	r17
    2990:	0f 91       	pop	r16
    2992:	ff 90       	pop	r15
    2994:	ef 90       	pop	r14
    2996:	bf 90       	pop	r11
    2998:	af 90       	pop	r10
    299a:	9f 90       	pop	r9
    299c:	8f 90       	pop	r8
    299e:	7f 90       	pop	r7
    29a0:	6f 90       	pop	r6
    29a2:	5f 90       	pop	r5
    29a4:	4f 90       	pop	r4
    29a6:	08 95       	ret

000029a8 <xTaskGenericNotify>:
    29a8:	0f 93       	push	r16
    29aa:	1f 93       	push	r17
    29ac:	cf 93       	push	r28
    29ae:	df 93       	push	r29
    29b0:	fc 01       	movw	r30, r24
    29b2:	0f b6       	in	r0, 0x3f	; 63
    29b4:	f8 94       	cli
    29b6:	0f 92       	push	r0
    29b8:	01 15       	cp	r16, r1
    29ba:	11 05       	cpc	r17, r1
    29bc:	49 f0       	breq	.+18     	; 0x29d0 <xTaskGenericNotify+0x28>
    29be:	83 a1       	ldd	r24, Z+35	; 0x23
    29c0:	94 a1       	ldd	r25, Z+36	; 0x24
    29c2:	a5 a1       	ldd	r26, Z+37	; 0x25
    29c4:	b6 a1       	ldd	r27, Z+38	; 0x26
    29c6:	e8 01       	movw	r28, r16
    29c8:	88 83       	st	Y, r24
    29ca:	99 83       	std	Y+1, r25	; 0x01
    29cc:	aa 83       	std	Y+2, r26	; 0x02
    29ce:	bb 83       	std	Y+3, r27	; 0x03
    29d0:	87 a1       	ldd	r24, Z+39	; 0x27
    29d2:	92 e0       	ldi	r25, 0x02	; 2
    29d4:	97 a3       	std	Z+39, r25	; 0x27
    29d6:	22 30       	cpi	r18, 0x02	; 2
    29d8:	b1 f0       	breq	.+44     	; 0x2a06 <xTaskGenericNotify+0x5e>
    29da:	18 f4       	brcc	.+6      	; 0x29e2 <xTaskGenericNotify+0x3a>
    29dc:	21 30       	cpi	r18, 0x01	; 1
    29de:	31 f0       	breq	.+12     	; 0x29ec <xTaskGenericNotify+0x44>
    29e0:	2a c0       	rjmp	.+84     	; 0x2a36 <xTaskGenericNotify+0x8e>
    29e2:	23 30       	cpi	r18, 0x03	; 3
    29e4:	e9 f0       	breq	.+58     	; 0x2a20 <xTaskGenericNotify+0x78>
    29e6:	24 30       	cpi	r18, 0x04	; 4
    29e8:	01 f1       	breq	.+64     	; 0x2a2a <xTaskGenericNotify+0x82>
    29ea:	25 c0       	rjmp	.+74     	; 0x2a36 <xTaskGenericNotify+0x8e>
    29ec:	03 a1       	ldd	r16, Z+35	; 0x23
    29ee:	14 a1       	ldd	r17, Z+36	; 0x24
    29f0:	25 a1       	ldd	r18, Z+37	; 0x25
    29f2:	36 a1       	ldd	r19, Z+38	; 0x26
    29f4:	40 2b       	or	r20, r16
    29f6:	51 2b       	or	r21, r17
    29f8:	62 2b       	or	r22, r18
    29fa:	73 2b       	or	r23, r19
    29fc:	43 a3       	std	Z+35, r20	; 0x23
    29fe:	54 a3       	std	Z+36, r21	; 0x24
    2a00:	65 a3       	std	Z+37, r22	; 0x25
    2a02:	76 a3       	std	Z+38, r23	; 0x26
    2a04:	18 c0       	rjmp	.+48     	; 0x2a36 <xTaskGenericNotify+0x8e>
    2a06:	43 a1       	ldd	r20, Z+35	; 0x23
    2a08:	54 a1       	ldd	r21, Z+36	; 0x24
    2a0a:	65 a1       	ldd	r22, Z+37	; 0x25
    2a0c:	76 a1       	ldd	r23, Z+38	; 0x26
    2a0e:	4f 5f       	subi	r20, 0xFF	; 255
    2a10:	5f 4f       	sbci	r21, 0xFF	; 255
    2a12:	6f 4f       	sbci	r22, 0xFF	; 255
    2a14:	7f 4f       	sbci	r23, 0xFF	; 255
    2a16:	43 a3       	std	Z+35, r20	; 0x23
    2a18:	54 a3       	std	Z+36, r21	; 0x24
    2a1a:	65 a3       	std	Z+37, r22	; 0x25
    2a1c:	76 a3       	std	Z+38, r23	; 0x26
    2a1e:	0b c0       	rjmp	.+22     	; 0x2a36 <xTaskGenericNotify+0x8e>
    2a20:	43 a3       	std	Z+35, r20	; 0x23
    2a22:	54 a3       	std	Z+36, r21	; 0x24
    2a24:	65 a3       	std	Z+37, r22	; 0x25
    2a26:	76 a3       	std	Z+38, r23	; 0x26
    2a28:	06 c0       	rjmp	.+12     	; 0x2a36 <xTaskGenericNotify+0x8e>
    2a2a:	82 30       	cpi	r24, 0x02	; 2
    2a2c:	79 f1       	breq	.+94     	; 0x2a8c <xTaskGenericNotify+0xe4>
    2a2e:	43 a3       	std	Z+35, r20	; 0x23
    2a30:	54 a3       	std	Z+36, r21	; 0x24
    2a32:	65 a3       	std	Z+37, r22	; 0x25
    2a34:	76 a3       	std	Z+38, r23	; 0x26
    2a36:	81 30       	cpi	r24, 0x01	; 1
    2a38:	59 f5       	brne	.+86     	; 0x2a90 <xTaskGenericNotify+0xe8>
    2a3a:	ef 01       	movw	r28, r30
    2a3c:	8f 01       	movw	r16, r30
    2a3e:	0e 5f       	subi	r16, 0xFE	; 254
    2a40:	1f 4f       	sbci	r17, 0xFF	; 255
    2a42:	c8 01       	movw	r24, r16
    2a44:	0e 94 1b 09 	call	0x1236	; 0x1236 <uxListRemove>
    2a48:	8e 89       	ldd	r24, Y+22	; 0x16
    2a4a:	90 91 3c 08 	lds	r25, 0x083C	; 0x80083c <uxTopReadyPriority>
    2a4e:	98 17       	cp	r25, r24
    2a50:	10 f4       	brcc	.+4      	; 0x2a56 <xTaskGenericNotify+0xae>
    2a52:	80 93 3c 08 	sts	0x083C, r24	; 0x80083c <uxTopReadyPriority>
    2a56:	90 e0       	ldi	r25, 0x00	; 0
    2a58:	9c 01       	movw	r18, r24
    2a5a:	22 0f       	add	r18, r18
    2a5c:	33 1f       	adc	r19, r19
    2a5e:	22 0f       	add	r18, r18
    2a60:	33 1f       	adc	r19, r19
    2a62:	22 0f       	add	r18, r18
    2a64:	33 1f       	adc	r19, r19
    2a66:	82 0f       	add	r24, r18
    2a68:	93 1f       	adc	r25, r19
    2a6a:	b8 01       	movw	r22, r16
    2a6c:	80 5a       	subi	r24, 0xA0	; 160
    2a6e:	97 4f       	sbci	r25, 0xF7	; 247
    2a70:	0e 94 c9 08 	call	0x1192	; 0x1192 <vListInsertEnd>
    2a74:	e0 91 84 08 	lds	r30, 0x0884	; 0x800884 <pxCurrentTCB>
    2a78:	f0 91 85 08 	lds	r31, 0x0885	; 0x800885 <pxCurrentTCB+0x1>
    2a7c:	9e 89       	ldd	r25, Y+22	; 0x16
    2a7e:	86 89       	ldd	r24, Z+22	; 0x16
    2a80:	89 17       	cp	r24, r25
    2a82:	40 f4       	brcc	.+16     	; 0x2a94 <xTaskGenericNotify+0xec>
    2a84:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <vPortYield>
    2a88:	81 e0       	ldi	r24, 0x01	; 1
    2a8a:	05 c0       	rjmp	.+10     	; 0x2a96 <xTaskGenericNotify+0xee>
    2a8c:	80 e0       	ldi	r24, 0x00	; 0
    2a8e:	03 c0       	rjmp	.+6      	; 0x2a96 <xTaskGenericNotify+0xee>
    2a90:	81 e0       	ldi	r24, 0x01	; 1
    2a92:	01 c0       	rjmp	.+2      	; 0x2a96 <xTaskGenericNotify+0xee>
    2a94:	81 e0       	ldi	r24, 0x01	; 1
    2a96:	0f 90       	pop	r0
    2a98:	0f be       	out	0x3f, r0	; 63
    2a9a:	df 91       	pop	r29
    2a9c:	cf 91       	pop	r28
    2a9e:	1f 91       	pop	r17
    2aa0:	0f 91       	pop	r16
    2aa2:	08 95       	ret

00002aa4 <xTaskNotifyStateClear>:
    TCB_t *pxTCB;
    BaseType_t xReturn;

        /* If null is passed in here then it is the calling task that is having
        its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    2aa4:	00 97       	sbiw	r24, 0x00	; 0
    2aa6:	21 f4       	brne	.+8      	; 0x2ab0 <xTaskNotifyStateClear+0xc>
    2aa8:	80 91 84 08 	lds	r24, 0x0884	; 0x800884 <pxCurrentTCB>
    2aac:	90 91 85 08 	lds	r25, 0x0885	; 0x800885 <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    2ab0:	0f b6       	in	r0, 0x3f	; 63
    2ab2:	f8 94       	cli
    2ab4:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
    2ab6:	fc 01       	movw	r30, r24
    2ab8:	27 a1       	ldd	r18, Z+39	; 0x27
    2aba:	22 30       	cpi	r18, 0x02	; 2
    2abc:	19 f4       	brne	.+6      	; 0x2ac4 <xTaskNotifyStateClear+0x20>
            {
                pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    2abe:	17 a2       	std	Z+39, r1	; 0x27
                xReturn = pdPASS;
    2ac0:	81 e0       	ldi	r24, 0x01	; 1
    2ac2:	01 c0       	rjmp	.+2      	; 0x2ac6 <xTaskNotifyStateClear+0x22>
            }
            else
            {
                xReturn = pdFAIL;
    2ac4:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        taskEXIT_CRITICAL();
    2ac6:	0f 90       	pop	r0
    2ac8:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    }
    2aca:	08 95       	ret

00002acc <prvInsertTimerInActiveList>:
            }
            #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
        }

        return pxNewTimer;
    }
    2acc:	fc 01       	movw	r30, r24
    2ace:	73 83       	std	Z+3, r23	; 0x03
    2ad0:	62 83       	std	Z+2, r22	; 0x02
    2ad2:	91 87       	std	Z+9, r25	; 0x09
    2ad4:	80 87       	std	Z+8, r24	; 0x08
    2ad6:	46 17       	cp	r20, r22
    2ad8:	57 07       	cpc	r21, r23
    2ada:	90 f0       	brcs	.+36     	; 0x2b00 <prvInsertTimerInActiveList+0x34>
    2adc:	42 1b       	sub	r20, r18
    2ade:	53 0b       	sbc	r21, r19
    2ae0:	84 85       	ldd	r24, Z+12	; 0x0c
    2ae2:	95 85       	ldd	r25, Z+13	; 0x0d
    2ae4:	48 17       	cp	r20, r24
    2ae6:	59 07       	cpc	r21, r25
    2ae8:	e0 f4       	brcc	.+56     	; 0x2b22 <prvInsertTimerInActiveList+0x56>
    2aea:	bf 01       	movw	r22, r30
    2aec:	6e 5f       	subi	r22, 0xFE	; 254
    2aee:	7f 4f       	sbci	r23, 0xFF	; 255
    2af0:	80 91 ef 08 	lds	r24, 0x08EF	; 0x8008ef <pxOverflowTimerList>
    2af4:	90 91 f0 08 	lds	r25, 0x08F0	; 0x8008f0 <pxOverflowTimerList+0x1>
    2af8:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <vListInsert>
    2afc:	80 e0       	ldi	r24, 0x00	; 0
    2afe:	08 95       	ret
    2b00:	42 17       	cp	r20, r18
    2b02:	53 07       	cpc	r21, r19
    2b04:	18 f4       	brcc	.+6      	; 0x2b0c <prvInsertTimerInActiveList+0x40>
    2b06:	62 17       	cp	r22, r18
    2b08:	73 07       	cpc	r23, r19
    2b0a:	68 f4       	brcc	.+26     	; 0x2b26 <prvInsertTimerInActiveList+0x5a>
    2b0c:	bf 01       	movw	r22, r30
    2b0e:	6e 5f       	subi	r22, 0xFE	; 254
    2b10:	7f 4f       	sbci	r23, 0xFF	; 255
    2b12:	80 91 f1 08 	lds	r24, 0x08F1	; 0x8008f1 <pxCurrentTimerList>
    2b16:	90 91 f2 08 	lds	r25, 0x08F2	; 0x8008f2 <pxCurrentTimerList+0x1>
    2b1a:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <vListInsert>
    2b1e:	80 e0       	ldi	r24, 0x00	; 0
    2b20:	08 95       	ret
    2b22:	81 e0       	ldi	r24, 0x01	; 1
    2b24:	08 95       	ret
    2b26:	81 e0       	ldi	r24, 0x01	; 1
    2b28:	08 95       	ret

00002b2a <prvCheckForValidListAndQueue>:
    2b2a:	0f 93       	push	r16
    2b2c:	0f b6       	in	r0, 0x3f	; 63
    2b2e:	f8 94       	cli
    2b30:	0f 92       	push	r0
    2b32:	80 91 ed 08 	lds	r24, 0x08ED	; 0x8008ed <xTimerQueue>
    2b36:	90 91 ee 08 	lds	r25, 0x08EE	; 0x8008ee <xTimerQueue+0x1>
    2b3a:	89 2b       	or	r24, r25
    2b3c:	09 f5       	brne	.+66     	; 0x2b80 <prvCheckForValidListAndQueue+0x56>
    2b3e:	80 ee       	ldi	r24, 0xE0	; 224
    2b40:	98 e0       	ldi	r25, 0x08	; 8
    2b42:	0e 94 b7 08 	call	0x116e	; 0x116e <vListInitialise>
    2b46:	87 ed       	ldi	r24, 0xD7	; 215
    2b48:	98 e0       	ldi	r25, 0x08	; 8
    2b4a:	0e 94 b7 08 	call	0x116e	; 0x116e <vListInitialise>
    2b4e:	80 ee       	ldi	r24, 0xE0	; 224
    2b50:	98 e0       	ldi	r25, 0x08	; 8
    2b52:	90 93 f2 08 	sts	0x08F2, r25	; 0x8008f2 <pxCurrentTimerList+0x1>
    2b56:	80 93 f1 08 	sts	0x08F1, r24	; 0x8008f1 <pxCurrentTimerList>
    2b5a:	87 ed       	ldi	r24, 0xD7	; 215
    2b5c:	98 e0       	ldi	r25, 0x08	; 8
    2b5e:	90 93 f0 08 	sts	0x08F0, r25	; 0x8008f0 <pxOverflowTimerList+0x1>
    2b62:	80 93 ef 08 	sts	0x08EF, r24	; 0x8008ef <pxOverflowTimerList>
    2b66:	00 e0       	ldi	r16, 0x00	; 0
    2b68:	26 e8       	ldi	r18, 0x86	; 134
    2b6a:	38 e0       	ldi	r19, 0x08	; 8
    2b6c:	45 ea       	ldi	r20, 0xA5	; 165
    2b6e:	58 e0       	ldi	r21, 0x08	; 8
    2b70:	65 e0       	ldi	r22, 0x05	; 5
    2b72:	8a e0       	ldi	r24, 0x0A	; 10
    2b74:	0e 94 c9 0b 	call	0x1792	; 0x1792 <xQueueGenericCreateStatic>
    2b78:	90 93 ee 08 	sts	0x08EE, r25	; 0x8008ee <xTimerQueue+0x1>
    2b7c:	80 93 ed 08 	sts	0x08ED, r24	; 0x8008ed <xTimerQueue>
    2b80:	0f 90       	pop	r0
    2b82:	0f be       	out	0x3f, r0	; 63
    2b84:	0f 91       	pop	r16
    2b86:	08 95       	ret

00002b88 <xTimerCreateTimerTask>:
    2b88:	cf 92       	push	r12
    2b8a:	df 92       	push	r13
    2b8c:	ef 92       	push	r14
    2b8e:	ff 92       	push	r15
    2b90:	0f 93       	push	r16
    2b92:	cf 93       	push	r28
    2b94:	df 93       	push	r29
    2b96:	00 d0       	rcall	.+0      	; 0x2b98 <xTimerCreateTimerTask+0x10>
    2b98:	00 d0       	rcall	.+0      	; 0x2b9a <xTimerCreateTimerTask+0x12>
    2b9a:	cd b7       	in	r28, 0x3d	; 61
    2b9c:	de b7       	in	r29, 0x3e	; 62
    2b9e:	c5 df       	rcall	.-118    	; 0x2b2a <prvCheckForValidListAndQueue>
    2ba0:	80 91 ed 08 	lds	r24, 0x08ED	; 0x8008ed <xTimerQueue>
    2ba4:	90 91 ee 08 	lds	r25, 0x08EE	; 0x8008ee <xTimerQueue+0x1>
    2ba8:	89 2b       	or	r24, r25
    2baa:	31 f1       	breq	.+76     	; 0x2bf8 <xTimerCreateTimerTask+0x70>
    2bac:	1e 82       	std	Y+6, r1	; 0x06
    2bae:	1d 82       	std	Y+5, r1	; 0x05
    2bb0:	1c 82       	std	Y+4, r1	; 0x04
    2bb2:	1b 82       	std	Y+3, r1	; 0x03
    2bb4:	ae 01       	movw	r20, r28
    2bb6:	4f 5f       	subi	r20, 0xFF	; 255
    2bb8:	5f 4f       	sbci	r21, 0xFF	; 255
    2bba:	be 01       	movw	r22, r28
    2bbc:	6d 5f       	subi	r22, 0xFD	; 253
    2bbe:	7f 4f       	sbci	r23, 0xFF	; 255
    2bc0:	ce 01       	movw	r24, r28
    2bc2:	05 96       	adiw	r24, 0x05	; 5
    2bc4:	0e 94 a7 08 	call	0x114e	; 0x114e <vApplicationGetTimerTaskMemory>
    2bc8:	cd 80       	ldd	r12, Y+5	; 0x05
    2bca:	de 80       	ldd	r13, Y+6	; 0x06
    2bcc:	eb 80       	ldd	r14, Y+3	; 0x03
    2bce:	fc 80       	ldd	r15, Y+4	; 0x04
    2bd0:	49 81       	ldd	r20, Y+1	; 0x01
    2bd2:	5a 81       	ldd	r21, Y+2	; 0x02
    2bd4:	03 e0       	ldi	r16, 0x03	; 3
    2bd6:	20 e0       	ldi	r18, 0x00	; 0
    2bd8:	30 e0       	ldi	r19, 0x00	; 0
    2bda:	61 e7       	ldi	r22, 0x71	; 113
    2bdc:	72 e0       	ldi	r23, 0x02	; 2
    2bde:	80 ec       	ldi	r24, 0xC0	; 192
    2be0:	96 e1       	ldi	r25, 0x16	; 22
    2be2:	2a da       	rcall	.-2988   	; 0x2038 <xTaskCreateStatic>
    2be4:	9c 01       	movw	r18, r24
    2be6:	90 93 ec 08 	sts	0x08EC, r25	; 0x8008ec <xTimerTaskHandle+0x1>
    2bea:	80 93 eb 08 	sts	0x08EB, r24	; 0x8008eb <xTimerTaskHandle>
    2bee:	81 e0       	ldi	r24, 0x01	; 1
    2bf0:	23 2b       	or	r18, r19
    2bf2:	19 f4       	brne	.+6      	; 0x2bfa <xTimerCreateTimerTask+0x72>
    2bf4:	80 e0       	ldi	r24, 0x00	; 0
    2bf6:	01 c0       	rjmp	.+2      	; 0x2bfa <xTimerCreateTimerTask+0x72>
    2bf8:	80 e0       	ldi	r24, 0x00	; 0
    2bfa:	26 96       	adiw	r28, 0x06	; 6
    2bfc:	0f b6       	in	r0, 0x3f	; 63
    2bfe:	f8 94       	cli
    2c00:	de bf       	out	0x3e, r29	; 62
    2c02:	0f be       	out	0x3f, r0	; 63
    2c04:	cd bf       	out	0x3d, r28	; 61
    2c06:	df 91       	pop	r29
    2c08:	cf 91       	pop	r28
    2c0a:	0f 91       	pop	r16
    2c0c:	ff 90       	pop	r15
    2c0e:	ef 90       	pop	r14
    2c10:	df 90       	pop	r13
    2c12:	cf 90       	pop	r12
    2c14:	08 95       	ret

00002c16 <xTimerGenericCommand>:
    }
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
    2c16:	0f 93       	push	r16
    2c18:	1f 93       	push	r17
    2c1a:	cf 93       	push	r28
    2c1c:	df 93       	push	r29
    2c1e:	00 d0       	rcall	.+0      	; 0x2c20 <xTimerGenericCommand+0xa>
    2c20:	1f 92       	push	r1
    2c22:	1f 92       	push	r1
    2c24:	cd b7       	in	r28, 0x3d	; 61
    2c26:	de b7       	in	r29, 0x3e	; 62

    configASSERT( xTimer );

    /* Send a message to the timer service task to perform a particular action
    on a particular timer definition. */
    if( xTimerQueue != NULL )
    2c28:	e0 91 ed 08 	lds	r30, 0x08ED	; 0x8008ed <xTimerQueue>
    2c2c:	f0 91 ee 08 	lds	r31, 0x08EE	; 0x8008ee <xTimerQueue+0x1>
    2c30:	30 97       	sbiw	r30, 0x00	; 0
    2c32:	69 f1       	breq	.+90     	; 0x2c8e <xTimerGenericCommand+0x78>
    2c34:	d9 01       	movw	r26, r18
    {
        /* Send a command to the timer service task to start the xTimer timer. */
        xMessage.xMessageID = xCommandID;
    2c36:	69 83       	std	Y+1, r22	; 0x01
        xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    2c38:	5b 83       	std	Y+3, r21	; 0x03
    2c3a:	4a 83       	std	Y+2, r20	; 0x02
        xMessage.u.xTimerParameters.pxTimer = xTimer;
    2c3c:	9d 83       	std	Y+5, r25	; 0x05
    2c3e:	8c 83       	std	Y+4, r24	; 0x04

        if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    2c40:	66 30       	cpi	r22, 0x06	; 6
    2c42:	e4 f4       	brge	.+56     	; 0x2c7c <xTimerGenericCommand+0x66>
        {
            if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    2c44:	e0 dd       	rcall	.-1088   	; 0x2806 <xTaskGetSchedulerState>
    2c46:	82 30       	cpi	r24, 0x02	; 2
    2c48:	61 f4       	brne	.+24     	; 0x2c62 <xTimerGenericCommand+0x4c>
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    2c4a:	20 e0       	ldi	r18, 0x00	; 0
    2c4c:	a8 01       	movw	r20, r16
    2c4e:	be 01       	movw	r22, r28
    2c50:	6f 5f       	subi	r22, 0xFF	; 255
    2c52:	7f 4f       	sbci	r23, 0xFF	; 255
    2c54:	80 91 ed 08 	lds	r24, 0x08ED	; 0x8008ed <xTimerQueue>
    2c58:	90 91 ee 08 	lds	r25, 0x08EE	; 0x8008ee <xTimerQueue+0x1>
    2c5c:	0e 94 de 0b 	call	0x17bc	; 0x17bc <xQueueGenericSend>
    2c60:	17 c0       	rjmp	.+46     	; 0x2c90 <xTimerGenericCommand+0x7a>
            }
            else
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    2c62:	20 e0       	ldi	r18, 0x00	; 0
    2c64:	40 e0       	ldi	r20, 0x00	; 0
    2c66:	50 e0       	ldi	r21, 0x00	; 0
    2c68:	be 01       	movw	r22, r28
    2c6a:	6f 5f       	subi	r22, 0xFF	; 255
    2c6c:	7f 4f       	sbci	r23, 0xFF	; 255
    2c6e:	80 91 ed 08 	lds	r24, 0x08ED	; 0x8008ed <xTimerQueue>
    2c72:	90 91 ee 08 	lds	r25, 0x08EE	; 0x8008ee <xTimerQueue+0x1>
    2c76:	0e 94 de 0b 	call	0x17bc	; 0x17bc <xQueueGenericSend>
    2c7a:	0a c0       	rjmp	.+20     	; 0x2c90 <xTimerGenericCommand+0x7a>
            }
        }
        else
        {
            xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    2c7c:	20 e0       	ldi	r18, 0x00	; 0
    2c7e:	ad 01       	movw	r20, r26
    2c80:	be 01       	movw	r22, r28
    2c82:	6f 5f       	subi	r22, 0xFF	; 255
    2c84:	7f 4f       	sbci	r23, 0xFF	; 255
    2c86:	cf 01       	movw	r24, r30
    2c88:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <xQueueGenericSendFromISR>
    2c8c:	01 c0       	rjmp	.+2      	; 0x2c90 <xTimerGenericCommand+0x7a>
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
    2c8e:	80 e0       	ldi	r24, 0x00	; 0
    {
        mtCOVERAGE_TEST_MARKER();
    }

    return xReturn;
}
    2c90:	0f 90       	pop	r0
    2c92:	0f 90       	pop	r0
    2c94:	0f 90       	pop	r0
    2c96:	0f 90       	pop	r0
    2c98:	0f 90       	pop	r0
    2c9a:	df 91       	pop	r29
    2c9c:	cf 91       	pop	r28
    2c9e:	1f 91       	pop	r17
    2ca0:	0f 91       	pop	r16
    2ca2:	08 95       	ret

00002ca4 <prvSampleTimeNow>:
    return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
    2ca4:	af 92       	push	r10
    2ca6:	bf 92       	push	r11
    2ca8:	cf 92       	push	r12
    2caa:	df 92       	push	r13
    2cac:	ef 92       	push	r14
    2cae:	ff 92       	push	r15
    2cb0:	0f 93       	push	r16
    2cb2:	1f 93       	push	r17
    2cb4:	cf 93       	push	r28
    2cb6:	df 93       	push	r29
    2cb8:	6c 01       	movw	r12, r24
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

    xTimeNow = xTaskGetTickCount();
    2cba:	08 db       	rcall	.-2544   	; 0x22cc <xTaskGetTickCount>
    2cbc:	7c 01       	movw	r14, r24

    if( xTimeNow < xLastTime )
    2cbe:	80 91 e9 08 	lds	r24, 0x08E9	; 0x8008e9 <xLastTime.2391>
    2cc2:	90 91 ea 08 	lds	r25, 0x08EA	; 0x8008ea <xLastTime.2391+0x1>
    2cc6:	e8 16       	cp	r14, r24
    2cc8:	f9 06       	cpc	r15, r25
    2cca:	08 f0       	brcs	.+2      	; 0x2cce <prvSampleTimeNow+0x2a>
    2ccc:	47 c0       	rjmp	.+142    	; 0x2d5c <prvSampleTimeNow+0xb8>
    2cce:	2f c0       	rjmp	.+94     	; 0x2d2e <prvSampleTimeNow+0x8a>
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    {
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    2cd0:	05 80       	ldd	r0, Z+5	; 0x05
    2cd2:	f6 81       	ldd	r31, Z+6	; 0x06
    2cd4:	e0 2d       	mov	r30, r0
    2cd6:	a0 80       	ld	r10, Z
    2cd8:	b1 80       	ldd	r11, Z+1	; 0x01

        /* Remove the timer from the list. */
        pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    2cda:	c6 81       	ldd	r28, Z+6	; 0x06
    2cdc:	d7 81       	ldd	r29, Z+7	; 0x07
        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2cde:	8e 01       	movw	r16, r28
    2ce0:	0e 5f       	subi	r16, 0xFE	; 254
    2ce2:	1f 4f       	sbci	r17, 0xFF	; 255
    2ce4:	c8 01       	movw	r24, r16
    2ce6:	0e 94 1b 09 	call	0x1236	; 0x1236 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* Execute its callback, then send a command to restart the timer if
        it is an auto-reload timer.  It cannot be restarted here as the lists
        have not yet been switched. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2cea:	e9 89       	ldd	r30, Y+17	; 0x11
    2cec:	fa 89       	ldd	r31, Y+18	; 0x12
    2cee:	ce 01       	movw	r24, r28
    2cf0:	19 95       	eicall

        if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    2cf2:	8e 85       	ldd	r24, Y+14	; 0x0e
    2cf4:	81 30       	cpi	r24, 0x01	; 1
    2cf6:	d9 f4       	brne	.+54     	; 0x2d2e <prvSampleTimeNow+0x8a>
            the timer going into the same timer list then it has already expired
            and the timer should be re-inserted into the current list so it is
            processed again within this loop.  Otherwise a command should be sent
            to restart the timer to ensure it is only inserted into a list after
            the lists have been swapped. */
            xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    2cf8:	8c 85       	ldd	r24, Y+12	; 0x0c
    2cfa:	9d 85       	ldd	r25, Y+13	; 0x0d
    2cfc:	8a 0d       	add	r24, r10
    2cfe:	9b 1d       	adc	r25, r11
            if( xReloadTime > xNextExpireTime )
    2d00:	a8 16       	cp	r10, r24
    2d02:	b9 06       	cpc	r11, r25
    2d04:	60 f4       	brcc	.+24     	; 0x2d1e <prvSampleTimeNow+0x7a>
            {
                listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    2d06:	9b 83       	std	Y+3, r25	; 0x03
    2d08:	8a 83       	std	Y+2, r24	; 0x02
                listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    2d0a:	d9 87       	std	Y+9, r29	; 0x09
    2d0c:	c8 87       	std	Y+8, r28	; 0x08
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    2d0e:	b8 01       	movw	r22, r16
    2d10:	80 91 f1 08 	lds	r24, 0x08F1	; 0x8008f1 <pxCurrentTimerList>
    2d14:	90 91 f2 08 	lds	r25, 0x08F2	; 0x8008f2 <pxCurrentTimerList+0x1>
    2d18:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <vListInsert>
    2d1c:	08 c0       	rjmp	.+16     	; 0x2d2e <prvSampleTimeNow+0x8a>
            }
            else
            {
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    2d1e:	00 e0       	ldi	r16, 0x00	; 0
    2d20:	10 e0       	ldi	r17, 0x00	; 0
    2d22:	20 e0       	ldi	r18, 0x00	; 0
    2d24:	30 e0       	ldi	r19, 0x00	; 0
    2d26:	a5 01       	movw	r20, r10
    2d28:	60 e0       	ldi	r22, 0x00	; 0
    2d2a:	ce 01       	movw	r24, r28
    2d2c:	74 df       	rcall	.-280    	; 0x2c16 <xTimerGenericCommand>

    /* The tick count has overflowed.  The timer lists must be switched.
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    2d2e:	e0 91 f1 08 	lds	r30, 0x08F1	; 0x8008f1 <pxCurrentTimerList>
    2d32:	f0 91 f2 08 	lds	r31, 0x08F2	; 0x8008f2 <pxCurrentTimerList+0x1>
    2d36:	80 81       	ld	r24, Z
    2d38:	81 11       	cpse	r24, r1
    2d3a:	ca cf       	rjmp	.-108    	; 0x2cd0 <prvSampleTimeNow+0x2c>
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxTemp = pxCurrentTimerList;
    pxCurrentTimerList = pxOverflowTimerList;
    2d3c:	80 91 ef 08 	lds	r24, 0x08EF	; 0x8008ef <pxOverflowTimerList>
    2d40:	90 91 f0 08 	lds	r25, 0x08F0	; 0x8008f0 <pxOverflowTimerList+0x1>
    2d44:	90 93 f2 08 	sts	0x08F2, r25	; 0x8008f2 <pxCurrentTimerList+0x1>
    2d48:	80 93 f1 08 	sts	0x08F1, r24	; 0x8008f1 <pxCurrentTimerList>
    pxOverflowTimerList = pxTemp;
    2d4c:	f0 93 f0 08 	sts	0x08F0, r31	; 0x8008f0 <pxOverflowTimerList+0x1>
    2d50:	e0 93 ef 08 	sts	0x08EF, r30	; 0x8008ef <pxOverflowTimerList>
    xTimeNow = xTaskGetTickCount();

    if( xTimeNow < xLastTime )
    {
        prvSwitchTimerLists();
        *pxTimerListsWereSwitched = pdTRUE;
    2d54:	81 e0       	ldi	r24, 0x01	; 1
    2d56:	f6 01       	movw	r30, r12
    2d58:	80 83       	st	Z, r24
    2d5a:	02 c0       	rjmp	.+4      	; 0x2d60 <prvSampleTimeNow+0xbc>
    }
    else
    {
        *pxTimerListsWereSwitched = pdFALSE;
    2d5c:	f6 01       	movw	r30, r12
    2d5e:	10 82       	st	Z, r1
    }

    xLastTime = xTimeNow;
    2d60:	f0 92 ea 08 	sts	0x08EA, r15	; 0x8008ea <xLastTime.2391+0x1>
    2d64:	e0 92 e9 08 	sts	0x08E9, r14	; 0x8008e9 <xLastTime.2391>

    return xTimeNow;
}
    2d68:	c7 01       	movw	r24, r14
    2d6a:	df 91       	pop	r29
    2d6c:	cf 91       	pop	r28
    2d6e:	1f 91       	pop	r17
    2d70:	0f 91       	pop	r16
    2d72:	ff 90       	pop	r15
    2d74:	ef 90       	pop	r14
    2d76:	df 90       	pop	r13
    2d78:	cf 90       	pop	r12
    2d7a:	bf 90       	pop	r11
    2d7c:	af 90       	pop	r10
    2d7e:	08 95       	ret

00002d80 <prvTimerTask>:
    pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
}
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
    2d80:	cf 93       	push	r28
    2d82:	df 93       	push	r29
    2d84:	00 d0       	rcall	.+0      	; 0x2d86 <prvTimerTask+0x6>
    2d86:	00 d0       	rcall	.+0      	; 0x2d88 <prvTimerTask+0x8>
    2d88:	cd b7       	in	r28, 0x3d	; 61
    2d8a:	de b7       	in	r29, 0x3e	; 62
        /* Obtain the time now to make an assessment as to whether the timer
        has expired or not.  If obtaining the time causes the lists to switch
        then don't process this timer as any timers that remained in the list
        when the lists were switched will have been processed within the
        prvSampleTimeNow() function. */
        xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    2d8c:	ce 01       	movw	r24, r28
    2d8e:	01 96       	adiw	r24, 0x01	; 1
    2d90:	4c 01       	movw	r8, r24
                case when the current timer list is empty. */
                if( xListWasEmpty != pdFALSE )
                {
                    /* The current timer list is empty - is the overflow list
                    also empty? */
                    xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    2d92:	44 24       	eor	r4, r4
    2d94:	43 94       	inc	r4
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    }
    else
    {
        /* Ensure the task unblocks when the tick count rolls over. */
        xNextExpireTime = ( TickType_t ) 0U;
    2d96:	e1 2c       	mov	r14, r1
    2d98:	f1 2c       	mov	r15, r1
                case when the current timer list is empty. */
                if( xListWasEmpty != pdFALSE )
                {
                    /* The current timer list is empty - is the overflow list
                    also empty? */
                    xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    2d9a:	51 2c       	mov	r5, r1
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

    while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    2d9c:	c8 2e       	mov	r12, r24
    2d9e:	d9 2c       	mov	r13, r9
    the timer with the nearest expiry time will expire.  If there are no
    active timers then just set the next expire time to 0.  That will cause
    this task to unblock when the tick count overflows, at which point the
    timer lists will be switched and the next expiry time can be
    re-assessed.  */
    *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    2da0:	e0 91 f1 08 	lds	r30, 0x08F1	; 0x8008f1 <pxCurrentTimerList>
    2da4:	f0 91 f2 08 	lds	r31, 0x08F2	; 0x8008f2 <pxCurrentTimerList+0x1>
    2da8:	80 81       	ld	r24, Z
    if( *pxListWasEmpty == pdFALSE )
    2daa:	88 23       	and	r24, r24
    2dac:	09 f4       	brne	.+2      	; 0x2db0 <prvTimerTask+0x30>
    2dae:	b1 c0       	rjmp	.+354    	; 0x2f12 <prvTimerTask+0x192>
    {
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    2db0:	05 80       	ldd	r0, Z+5	; 0x05
    2db2:	f6 81       	ldd	r31, Z+6	; 0x06
    2db4:	e0 2d       	mov	r30, r0
    2db6:	a0 80       	ld	r10, Z
    2db8:	b1 80       	ldd	r11, Z+1	; 0x01
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

    vTaskSuspendAll();
    2dba:	82 da       	rcall	.-2812   	; 0x22c0 <vTaskSuspendAll>
        /* Obtain the time now to make an assessment as to whether the timer
        has expired or not.  If obtaining the time causes the lists to switch
        then don't process this timer as any timers that remained in the list
        when the lists were switched will have been processed within the
        prvSampleTimeNow() function. */
        xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    2dbc:	c4 01       	movw	r24, r8
    2dbe:	72 df       	rcall	.-284    	; 0x2ca4 <prvSampleTimeNow>
    2dc0:	8c 01       	movw	r16, r24
        if( xTimerListsWereSwitched == pdFALSE )
    2dc2:	89 81       	ldd	r24, Y+1	; 0x01
    2dc4:	81 11       	cpse	r24, r1
    2dc6:	43 c0       	rjmp	.+134    	; 0x2e4e <prvTimerTask+0xce>
        {
            /* The tick count has not overflowed, has the timer expired? */
            if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    2dc8:	0a 15       	cp	r16, r10
    2dca:	1b 05       	cpc	r17, r11
            {
                ( void ) xTaskResumeAll();
    2dcc:	80 f1       	brcs	.+96     	; 0x2e2e <prvTimerTask+0xae>
    2dce:	42 db       	rcall	.-2428   	; 0x2454 <xTaskResumeAll>
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    2dd0:	e0 91 f1 08 	lds	r30, 0x08F1	; 0x8008f1 <pxCurrentTimerList>
    2dd4:	f0 91 f2 08 	lds	r31, 0x08F2	; 0x8008f2 <pxCurrentTimerList+0x1>
    2dd8:	05 80       	ldd	r0, Z+5	; 0x05
    2dda:	f6 81       	ldd	r31, Z+6	; 0x06
    2ddc:	e0 2d       	mov	r30, r0
    2dde:	66 80       	ldd	r6, Z+6	; 0x06
    2de0:	77 80       	ldd	r7, Z+7	; 0x07

    /* Remove the timer from the list of active timers.  A check has already
    been performed to ensure the list is not empty. */
    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2de2:	c3 01       	movw	r24, r6
    2de4:	02 96       	adiw	r24, 0x02	; 2
    2de6:	0e 94 1b 09 	call	0x1236	; 0x1236 <uxListRemove>
    traceTIMER_EXPIRED( pxTimer );

    /* If the timer is an auto reload timer then calculate the next
    expiry time and re-insert the timer in the list of active timers. */
    if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    2dea:	d3 01       	movw	r26, r6
    2dec:	1e 96       	adiw	r26, 0x0e	; 14
    2dee:	8c 91       	ld	r24, X
    2df0:	1e 97       	sbiw	r26, 0x0e	; 14
    2df2:	81 30       	cpi	r24, 0x01	; 1
    2df4:	a1 f4       	brne	.+40     	; 0x2e1e <prvTimerTask+0x9e>
    {
        /* The timer is inserted into a list using a time relative to anything
        other than the current time.  It will therefore be inserted into the
        correct list relative to the time this task thinks it is now. */
        if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    2df6:	1c 96       	adiw	r26, 0x0c	; 12
    2df8:	6d 91       	ld	r22, X+
    2dfa:	7c 91       	ld	r23, X
    2dfc:	1d 97       	sbiw	r26, 0x0d	; 13
    2dfe:	6a 0d       	add	r22, r10
    2e00:	7b 1d       	adc	r23, r11
    2e02:	95 01       	movw	r18, r10
    2e04:	a8 01       	movw	r20, r16
    2e06:	c3 01       	movw	r24, r6
    2e08:	61 de       	rcall	.-830    	; 0x2acc <prvInsertTimerInActiveList>
    2e0a:	88 23       	and	r24, r24
    2e0c:	41 f0       	breq	.+16     	; 0x2e1e <prvTimerTask+0x9e>
        {
            /* The timer expired before it was added to the active timer
            list.  Reload it now.  */
            xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    2e0e:	0e 2d       	mov	r16, r14
    2e10:	1f 2d       	mov	r17, r15
    2e12:	2e 2d       	mov	r18, r14
    2e14:	3f 2d       	mov	r19, r15
    2e16:	a5 01       	movw	r20, r10
    2e18:	65 2d       	mov	r22, r5
    2e1a:	c3 01       	movw	r24, r6
    2e1c:	fc de       	rcall	.-520    	; 0x2c16 <xTimerGenericCommand>
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* Call the timer callback. */
    pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2e1e:	d3 01       	movw	r26, r6
    2e20:	51 96       	adiw	r26, 0x11	; 17
    2e22:	ed 91       	ld	r30, X+
    2e24:	fc 91       	ld	r31, X
    2e26:	52 97       	sbiw	r26, 0x12	; 18
    2e28:	c3 01       	movw	r24, r6
    2e2a:	19 95       	eicall
    2e2c:	65 c0       	rjmp	.+202    	; 0x2ef8 <prvTimerTask+0x178>
        prvSampleTimeNow() function. */
        xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
        if( xTimerListsWereSwitched == pdFALSE )
        {
            /* The tick count has not overflowed, has the timer expired? */
            if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    2e2e:	45 2d       	mov	r20, r5
                    /* The current timer list is empty - is the overflow list
                    also empty? */
                    xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
                }

                vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    2e30:	b5 01       	movw	r22, r10
    2e32:	60 1b       	sub	r22, r16
    2e34:	71 0b       	sbc	r23, r17
    2e36:	80 91 ed 08 	lds	r24, 0x08ED	; 0x8008ed <xTimerQueue>
    2e3a:	90 91 ee 08 	lds	r25, 0x08EE	; 0x8008ee <xTimerQueue+0x1>
    2e3e:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <vQueueWaitForMessageRestricted>

                if( xTaskResumeAll() == pdFALSE )
    2e42:	08 db       	rcall	.-2544   	; 0x2454 <xTaskResumeAll>
    2e44:	81 11       	cpse	r24, r1
                {
                    /* Yield to wait for either a command to arrive, or the
                    block time to expire.  If a command arrived between the
                    critical section being exited and this yield then the yield
                    will not cause the task to block. */
                    portYIELD_WITHIN_API();
    2e46:	58 c0       	rjmp	.+176    	; 0x2ef8 <prvTimerTask+0x178>
    2e48:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <vPortYield>
                }
            }
        }
        else
        {
            ( void ) xTaskResumeAll();
    2e4c:	55 c0       	rjmp	.+170    	; 0x2ef8 <prvTimerTask+0x178>
    2e4e:	02 db       	rcall	.-2556   	; 0x2454 <xTaskResumeAll>
    2e50:	53 c0       	rjmp	.+166    	; 0x2ef8 <prvTimerTask+0x178>
        }
        #endif /* INCLUDE_xTimerPendFunctionCall */

        /* Commands that are positive are timer commands rather than pended
        function calls. */
        if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    2e52:	89 81       	ldd	r24, Y+1	; 0x01
    2e54:	88 23       	and	r24, r24
    2e56:	0c f4       	brge	.+2      	; 0x2e5a <prvTimerTask+0xda>
    2e58:	4f c0       	rjmp	.+158    	; 0x2ef8 <prvTimerTask+0x178>
        {
            /* The messages uses the xTimerParameters member to work on a
            software timer. */
            pxTimer = xMessage.u.xTimerParameters.pxTimer;
    2e5a:	ac 80       	ldd	r10, Y+4	; 0x04
    2e5c:	bd 80       	ldd	r11, Y+5	; 0x05

        if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    2e5e:	f5 01       	movw	r30, r10
    2e60:	82 85       	ldd	r24, Z+10	; 0x0a
    2e62:	93 85       	ldd	r25, Z+11	; 0x0b
    2e64:	89 2b       	or	r24, r25
            {
                /* The timer is in a list, remove it. */
                ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2e66:	21 f0       	breq	.+8      	; 0x2e70 <prvTimerTask+0xf0>
    2e68:	c5 01       	movw	r24, r10
    2e6a:	02 96       	adiw	r24, 0x02	; 2
    2e6c:	0e 94 1b 09 	call	0x1236	; 0x1236 <uxListRemove>
            it must be present in the function call.  prvSampleTimeNow() must be
            called after the message is received from xTimerQueue so there is no
            possibility of a higher priority task adding a message to the message
            queue with a time that is ahead of the timer daemon task (because it
            pre-empted the timer daemon task after the xTimeNow value was set). */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    2e70:	ce 01       	movw	r24, r28
    2e72:	06 96       	adiw	r24, 0x06	; 6
    2e74:	17 df       	rcall	.-466    	; 0x2ca4 <prvSampleTimeNow>
    2e76:	ac 01       	movw	r20, r24

            switch( xMessage.xMessageID )
    2e78:	99 81       	ldd	r25, Y+1	; 0x01
    2e7a:	94 30       	cpi	r25, 0x04	; 4
    2e7c:	89 f1       	breq	.+98     	; 0x2ee0 <prvTimerTask+0x160>
    2e7e:	1c f4       	brge	.+6      	; 0x2e86 <prvTimerTask+0x106>
    2e80:	93 30       	cpi	r25, 0x03	; 3
    2e82:	d0 f5       	brcc	.+116    	; 0x2ef8 <prvTimerTask+0x178>
    2e84:	07 c0       	rjmp	.+14     	; 0x2e94 <prvTimerTask+0x114>
    2e86:	96 30       	cpi	r25, 0x06	; 6
    2e88:	bc f1       	brlt	.+110    	; 0x2ef8 <prvTimerTask+0x178>
    2e8a:	98 30       	cpi	r25, 0x08	; 8
    2e8c:	1c f0       	brlt	.+6      	; 0x2e94 <prvTimerTask+0x114>
    2e8e:	99 30       	cpi	r25, 0x09	; 9
    2e90:	39 f1       	breq	.+78     	; 0x2ee0 <prvTimerTask+0x160>
    2e92:	32 c0       	rjmp	.+100    	; 0x2ef8 <prvTimerTask+0x178>
                case tmrCOMMAND_START_FROM_ISR :
                case tmrCOMMAND_RESET :
                case tmrCOMMAND_RESET_FROM_ISR :
                case tmrCOMMAND_START_DONT_TRACE :
                    /* Start or restart a timer. */
                    if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    2e94:	2a 81       	ldd	r18, Y+2	; 0x02
    2e96:	3b 81       	ldd	r19, Y+3	; 0x03
    2e98:	d5 01       	movw	r26, r10
    2e9a:	1c 96       	adiw	r26, 0x0c	; 12
    2e9c:	6d 91       	ld	r22, X+
    2e9e:	7c 91       	ld	r23, X
    2ea0:	1d 97       	sbiw	r26, 0x0d	; 13
    2ea2:	62 0f       	add	r22, r18
    2ea4:	73 1f       	adc	r23, r19
    2ea6:	c5 01       	movw	r24, r10
    2ea8:	11 de       	rcall	.-990    	; 0x2acc <prvInsertTimerInActiveList>
    2eaa:	88 23       	and	r24, r24
    2eac:	29 f1       	breq	.+74     	; 0x2ef8 <prvTimerTask+0x178>
                    {
                        /* The timer expired before it was added to the active
                        timer list.  Process it now. */
                        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2eae:	d5 01       	movw	r26, r10
    2eb0:	51 96       	adiw	r26, 0x11	; 17
    2eb2:	ed 91       	ld	r30, X+
    2eb4:	fc 91       	ld	r31, X
    2eb6:	52 97       	sbiw	r26, 0x12	; 18
    2eb8:	c5 01       	movw	r24, r10
    2eba:	19 95       	eicall
                        traceTIMER_EXPIRED( pxTimer );

                        if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    2ebc:	f5 01       	movw	r30, r10
    2ebe:	86 85       	ldd	r24, Z+14	; 0x0e
    2ec0:	81 30       	cpi	r24, 0x01	; 1
    2ec2:	d1 f4       	brne	.+52     	; 0x2ef8 <prvTimerTask+0x178>
                        {
                            xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    2ec4:	4a 81       	ldd	r20, Y+2	; 0x02
    2ec6:	5b 81       	ldd	r21, Y+3	; 0x03
    2ec8:	84 85       	ldd	r24, Z+12	; 0x0c
    2eca:	95 85       	ldd	r25, Z+13	; 0x0d
    2ecc:	48 0f       	add	r20, r24
    2ece:	59 1f       	adc	r21, r25
    2ed0:	0e 2d       	mov	r16, r14
    2ed2:	1f 2d       	mov	r17, r15
    2ed4:	2e 2d       	mov	r18, r14
    2ed6:	3f 2d       	mov	r19, r15
    2ed8:	65 2d       	mov	r22, r5
    2eda:	c5 01       	movw	r24, r10
    2edc:	9c de       	rcall	.-712    	; 0x2c16 <xTimerGenericCommand>
    2ede:	0c c0       	rjmp	.+24     	; 0x2ef8 <prvTimerTask+0x178>
                    There is nothing to do here. */
                    break;

                case tmrCOMMAND_CHANGE_PERIOD :
                case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
                    pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    2ee0:	6a 81       	ldd	r22, Y+2	; 0x02
    2ee2:	7b 81       	ldd	r23, Y+3	; 0x03
    2ee4:	d5 01       	movw	r26, r10
    2ee6:	1d 96       	adiw	r26, 0x0d	; 13
    2ee8:	7c 93       	st	X, r23
    2eea:	6e 93       	st	-X, r22
                    be longer or shorter than the old one.  The command time is
                    therefore set to the current time, and as the period cannot
                    be zero the next expiry time can only be in the future,
                    meaning (unlike for the xTimerStart() case above) there is
                    no fail case that needs to be handled here. */
                    ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    2eec:	1c 97       	sbiw	r26, 0x0c	; 12
    2eee:	64 0f       	add	r22, r20
    2ef0:	75 1f       	adc	r23, r21
    2ef2:	9a 01       	movw	r18, r20
    2ef4:	c5 01       	movw	r24, r10
    2ef6:	ea dd       	rcall	.-1068   	; 0x2acc <prvInsertTimerInActiveList>
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

    while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    2ef8:	4e 2d       	mov	r20, r14
    2efa:	5f 2d       	mov	r21, r15
    2efc:	6c 2d       	mov	r22, r12
    2efe:	7d 2d       	mov	r23, r13
    2f00:	80 91 ed 08 	lds	r24, 0x08ED	; 0x8008ed <xTimerQueue>
    2f04:	90 91 ee 08 	lds	r25, 0x08EE	; 0x8008ee <xTimerQueue+0x1>
    2f08:	0e 94 a8 0c 	call	0x1950	; 0x1950 <xQueueReceive>
    2f0c:	81 11       	cpse	r24, r1
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

    vTaskSuspendAll();
    2f0e:	a1 cf       	rjmp	.-190    	; 0x2e52 <prvTimerTask+0xd2>
    2f10:	47 cf       	rjmp	.-370    	; 0x2da0 <prvTimerTask+0x20>
        /* Obtain the time now to make an assessment as to whether the timer
        has expired or not.  If obtaining the time causes the lists to switch
        then don't process this timer as any timers that remained in the list
        when the lists were switched will have been processed within the
        prvSampleTimeNow() function. */
        xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    2f12:	d6 d9       	rcall	.-3156   	; 0x22c0 <vTaskSuspendAll>
    2f14:	c4 01       	movw	r24, r8
    2f16:	c6 de       	rcall	.-628    	; 0x2ca4 <prvSampleTimeNow>
    2f18:	8c 01       	movw	r16, r24
        if( xTimerListsWereSwitched == pdFALSE )
    2f1a:	89 81       	ldd	r24, Y+1	; 0x01
    2f1c:	81 11       	cpse	r24, r1
    2f1e:	97 cf       	rjmp	.-210    	; 0x2e4e <prvTimerTask+0xce>
                case when the current timer list is empty. */
                if( xListWasEmpty != pdFALSE )
                {
                    /* The current timer list is empty - is the overflow list
                    also empty? */
                    xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    2f20:	e0 91 ef 08 	lds	r30, 0x08EF	; 0x8008ef <pxOverflowTimerList>
    2f24:	f0 91 f0 08 	lds	r31, 0x08F0	; 0x8008f0 <pxOverflowTimerList+0x1>
    2f28:	80 81       	ld	r24, Z
    2f2a:	44 2d       	mov	r20, r4
    2f2c:	81 11       	cpse	r24, r1
    2f2e:	45 2d       	mov	r20, r5
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    }
    else
    {
        /* Ensure the task unblocks when the tick count rolls over. */
        xNextExpireTime = ( TickType_t ) 0U;
    2f30:	ae 2c       	mov	r10, r14
    2f32:	bf 2c       	mov	r11, r15
    2f34:	7d cf       	rjmp	.-262    	; 0x2e30 <prvTimerTask+0xb0>

00002f36 <millis_init>:
    2f36:	82 e0       	ldi	r24, 0x02	; 2
    2f38:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    2f3c:	84 e0       	ldi	r24, 0x04	; 4
    2f3e:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7000b1>
    2f42:	8a ef       	ldi	r24, 0xFA	; 250
    2f44:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7000b3>
    2f48:	e0 e7       	ldi	r30, 0x70	; 112
    2f4a:	f0 e0       	ldi	r31, 0x00	; 0
    2f4c:	80 81       	ld	r24, Z
    2f4e:	82 60       	ori	r24, 0x02	; 2
    2f50:	80 83       	st	Z, r24
    2f52:	08 95       	ret

00002f54 <Get_millis>:
>>>>>>> 131ed066d936db6cb82dc024f16de69a40fef126
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
<<<<<<< HEAD
    3ed0:	f8 94       	cli
    3ed2:	60 91 80 0d 	lds	r22, 0x0D80	; 0x800d80 <timer1_millis>
    3ed6:	70 91 81 0d 	lds	r23, 0x0D81	; 0x800d81 <timer1_millis+0x1>
    3eda:	80 91 82 0d 	lds	r24, 0x0D82	; 0x800d82 <timer1_millis+0x2>
    3ede:	90 91 83 0d 	lds	r25, 0x0D83	; 0x800d83 <timer1_millis+0x3>
=======
    2f54:	f8 94       	cli
    2f56:	60 91 22 0b 	lds	r22, 0x0B22	; 0x800b22 <timer1_millis>
    2f5a:	70 91 23 0b 	lds	r23, 0x0B23	; 0x800b23 <timer1_millis+0x1>
    2f5e:	80 91 24 0b 	lds	r24, 0x0B24	; 0x800b24 <timer1_millis+0x2>
    2f62:	90 91 25 0b 	lds	r25, 0x0B25	; 0x800b25 <timer1_millis+0x3>
>>>>>>> 131ed066d936db6cb82dc024f16de69a40fef126
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
<<<<<<< HEAD
    3ee2:	78 94       	sei
    3ee4:	08 95       	ret

00003ee6 <__vector_13>:
    3ee6:	1f 92       	push	r1
    3ee8:	0f 92       	push	r0
    3eea:	0f b6       	in	r0, 0x3f	; 63
    3eec:	0f 92       	push	r0
    3eee:	11 24       	eor	r1, r1
    3ef0:	8f 93       	push	r24
    3ef2:	9f 93       	push	r25
    3ef4:	af 93       	push	r26
    3ef6:	bf 93       	push	r27
    3ef8:	80 91 80 0d 	lds	r24, 0x0D80	; 0x800d80 <timer1_millis>
    3efc:	90 91 81 0d 	lds	r25, 0x0D81	; 0x800d81 <timer1_millis+0x1>
    3f00:	a0 91 82 0d 	lds	r26, 0x0D82	; 0x800d82 <timer1_millis+0x2>
    3f04:	b0 91 83 0d 	lds	r27, 0x0D83	; 0x800d83 <timer1_millis+0x3>
    3f08:	01 96       	adiw	r24, 0x01	; 1
    3f0a:	a1 1d       	adc	r26, r1
    3f0c:	b1 1d       	adc	r27, r1
    3f0e:	80 93 80 0d 	sts	0x0D80, r24	; 0x800d80 <timer1_millis>
    3f12:	90 93 81 0d 	sts	0x0D81, r25	; 0x800d81 <timer1_millis+0x1>
    3f16:	a0 93 82 0d 	sts	0x0D82, r26	; 0x800d82 <timer1_millis+0x2>
    3f1a:	b0 93 83 0d 	sts	0x0D83, r27	; 0x800d83 <timer1_millis+0x3>
    3f1e:	bf 91       	pop	r27
    3f20:	af 91       	pop	r26
    3f22:	9f 91       	pop	r25
    3f24:	8f 91       	pop	r24
    3f26:	0f 90       	pop	r0
    3f28:	0f be       	out	0x3f, r0	; 63
    3f2a:	0f 90       	pop	r0
    3f2c:	1f 90       	pop	r1
    3f2e:	18 95       	reti

00003f30 <__udivmodsi4>:
    3f30:	a1 e2       	ldi	r26, 0x21	; 33
    3f32:	1a 2e       	mov	r1, r26
    3f34:	aa 1b       	sub	r26, r26
    3f36:	bb 1b       	sub	r27, r27
    3f38:	fd 01       	movw	r30, r26
    3f3a:	0d c0       	rjmp	.+26     	; 0x3f56 <__udivmodsi4_ep>

00003f3c <__udivmodsi4_loop>:
    3f3c:	aa 1f       	adc	r26, r26
    3f3e:	bb 1f       	adc	r27, r27
    3f40:	ee 1f       	adc	r30, r30
    3f42:	ff 1f       	adc	r31, r31
    3f44:	a2 17       	cp	r26, r18
    3f46:	b3 07       	cpc	r27, r19
    3f48:	e4 07       	cpc	r30, r20
    3f4a:	f5 07       	cpc	r31, r21
    3f4c:	20 f0       	brcs	.+8      	; 0x3f56 <__udivmodsi4_ep>
    3f4e:	a2 1b       	sub	r26, r18
    3f50:	b3 0b       	sbc	r27, r19
    3f52:	e4 0b       	sbc	r30, r20
    3f54:	f5 0b       	sbc	r31, r21

00003f56 <__udivmodsi4_ep>:
    3f56:	66 1f       	adc	r22, r22
    3f58:	77 1f       	adc	r23, r23
    3f5a:	88 1f       	adc	r24, r24
    3f5c:	99 1f       	adc	r25, r25
    3f5e:	1a 94       	dec	r1
    3f60:	69 f7       	brne	.-38     	; 0x3f3c <__udivmodsi4_loop>
    3f62:	60 95       	com	r22
    3f64:	70 95       	com	r23
    3f66:	80 95       	com	r24
    3f68:	90 95       	com	r25
    3f6a:	9b 01       	movw	r18, r22
    3f6c:	ac 01       	movw	r20, r24
    3f6e:	bd 01       	movw	r22, r26
    3f70:	cf 01       	movw	r24, r30
    3f72:	08 95       	ret

00003f74 <memcpy>:
    3f74:	fb 01       	movw	r30, r22
    3f76:	dc 01       	movw	r26, r24
    3f78:	02 c0       	rjmp	.+4      	; 0x3f7e <memcpy+0xa>
    3f7a:	01 90       	ld	r0, Z+
    3f7c:	0d 92       	st	X+, r0
    3f7e:	41 50       	subi	r20, 0x01	; 1
    3f80:	50 40       	sbci	r21, 0x00	; 0
    3f82:	d8 f7       	brcc	.-10     	; 0x3f7a <memcpy+0x6>
    3f84:	08 95       	ret

00003f86 <memset>:
    3f86:	dc 01       	movw	r26, r24
    3f88:	01 c0       	rjmp	.+2      	; 0x3f8c <memset+0x6>
    3f8a:	6d 93       	st	X+, r22
    3f8c:	41 50       	subi	r20, 0x01	; 1
    3f8e:	50 40       	sbci	r21, 0x00	; 0
    3f90:	e0 f7       	brcc	.-8      	; 0x3f8a <memset+0x4>
    3f92:	08 95       	ret

00003f94 <_exit>:
    3f94:	f8 94       	cli

00003f96 <__stop_program>:
    3f96:	ff cf       	rjmp	.-2      	; 0x3f96 <__stop_program>
=======
    2f66:	78 94       	sei
    2f68:	08 95       	ret

00002f6a <__vector_13>:
    2f6a:	1f 92       	push	r1
    2f6c:	0f 92       	push	r0
    2f6e:	0f b6       	in	r0, 0x3f	; 63
    2f70:	0f 92       	push	r0
    2f72:	11 24       	eor	r1, r1
    2f74:	8f 93       	push	r24
    2f76:	9f 93       	push	r25
    2f78:	af 93       	push	r26
    2f7a:	bf 93       	push	r27
    2f7c:	80 91 22 0b 	lds	r24, 0x0B22	; 0x800b22 <timer1_millis>
    2f80:	90 91 23 0b 	lds	r25, 0x0B23	; 0x800b23 <timer1_millis+0x1>
    2f84:	a0 91 24 0b 	lds	r26, 0x0B24	; 0x800b24 <timer1_millis+0x2>
    2f88:	b0 91 25 0b 	lds	r27, 0x0B25	; 0x800b25 <timer1_millis+0x3>
    2f8c:	01 96       	adiw	r24, 0x01	; 1
    2f8e:	a1 1d       	adc	r26, r1
    2f90:	b1 1d       	adc	r27, r1
    2f92:	80 93 22 0b 	sts	0x0B22, r24	; 0x800b22 <timer1_millis>
    2f96:	90 93 23 0b 	sts	0x0B23, r25	; 0x800b23 <timer1_millis+0x1>
    2f9a:	a0 93 24 0b 	sts	0x0B24, r26	; 0x800b24 <timer1_millis+0x2>
    2f9e:	b0 93 25 0b 	sts	0x0B25, r27	; 0x800b25 <timer1_millis+0x3>
    2fa2:	bf 91       	pop	r27
    2fa4:	af 91       	pop	r26
    2fa6:	9f 91       	pop	r25
    2fa8:	8f 91       	pop	r24
    2faa:	0f 90       	pop	r0
    2fac:	0f be       	out	0x3f, r0	; 63
    2fae:	0f 90       	pop	r0
    2fb0:	1f 90       	pop	r1
    2fb2:	18 95       	reti

00002fb4 <__udivmodsi4>:
    2fb4:	a1 e2       	ldi	r26, 0x21	; 33
    2fb6:	1a 2e       	mov	r1, r26
    2fb8:	aa 1b       	sub	r26, r26
    2fba:	bb 1b       	sub	r27, r27
    2fbc:	fd 01       	movw	r30, r26
    2fbe:	0d c0       	rjmp	.+26     	; 0x2fda <__udivmodsi4_ep>

00002fc0 <__udivmodsi4_loop>:
    2fc0:	aa 1f       	adc	r26, r26
    2fc2:	bb 1f       	adc	r27, r27
    2fc4:	ee 1f       	adc	r30, r30
    2fc6:	ff 1f       	adc	r31, r31
    2fc8:	a2 17       	cp	r26, r18
    2fca:	b3 07       	cpc	r27, r19
    2fcc:	e4 07       	cpc	r30, r20
    2fce:	f5 07       	cpc	r31, r21
    2fd0:	20 f0       	brcs	.+8      	; 0x2fda <__udivmodsi4_ep>
    2fd2:	a2 1b       	sub	r26, r18
    2fd4:	b3 0b       	sbc	r27, r19
    2fd6:	e4 0b       	sbc	r30, r20
    2fd8:	f5 0b       	sbc	r31, r21

00002fda <__udivmodsi4_ep>:
    2fda:	66 1f       	adc	r22, r22
    2fdc:	77 1f       	adc	r23, r23
    2fde:	88 1f       	adc	r24, r24
    2fe0:	99 1f       	adc	r25, r25
    2fe2:	1a 94       	dec	r1
    2fe4:	69 f7       	brne	.-38     	; 0x2fc0 <__udivmodsi4_loop>
    2fe6:	60 95       	com	r22
    2fe8:	70 95       	com	r23
    2fea:	80 95       	com	r24
    2fec:	90 95       	com	r25
    2fee:	9b 01       	movw	r18, r22
    2ff0:	ac 01       	movw	r20, r24
    2ff2:	bd 01       	movw	r22, r26
    2ff4:	cf 01       	movw	r24, r30
    2ff6:	08 95       	ret

00002ff8 <memcpy>:
    2ff8:	fb 01       	movw	r30, r22
    2ffa:	dc 01       	movw	r26, r24
    2ffc:	02 c0       	rjmp	.+4      	; 0x3002 <memcpy+0xa>
    2ffe:	01 90       	ld	r0, Z+
    3000:	0d 92       	st	X+, r0
    3002:	41 50       	subi	r20, 0x01	; 1
    3004:	50 40       	sbci	r21, 0x00	; 0
    3006:	d8 f7       	brcc	.-10     	; 0x2ffe <memcpy+0x6>
    3008:	08 95       	ret

0000300a <memset>:
    300a:	dc 01       	movw	r26, r24
    300c:	01 c0       	rjmp	.+2      	; 0x3010 <memset+0x6>
    300e:	6d 93       	st	X+, r22
    3010:	41 50       	subi	r20, 0x01	; 1
    3012:	50 40       	sbci	r21, 0x00	; 0
    3014:	e0 f7       	brcc	.-8      	; 0x300e <memset+0x4>
    3016:	08 95       	ret

00003018 <_exit>:
    3018:	f8 94       	cli

0000301a <__stop_program>:
    301a:	ff cf       	rjmp	.-2      	; 0x301a <__stop_program>
>>>>>>> 131ed066d936db6cb82dc024f16de69a40fef126
