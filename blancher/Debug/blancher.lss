
blancher.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000268  00800200  00003e36  00003eca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003e36  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000014a3  00800468  00800468  00004132  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00004132  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004164  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000c40  00000000  00000000  000041a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000d152  00000000  00000000  00004de4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000379c  00000000  00000000  00011f36  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000c33c  00000000  00000000  000156d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001ee8  00000000  00000000  00021a10  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00019326  00000000  00000000  000238f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000099d3  00000000  00000000  0003cc1e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000c08  00000000  00000000  000465f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000036bc  00000000  00000000  000471f9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	b2 c0       	rjmp	.+356    	; 0x166 <__ctors_end>
       2:	00 00       	nop
       4:	d1 c0       	rjmp	.+418    	; 0x1a8 <__bad_interrupt>
       6:	00 00       	nop
       8:	cf c0       	rjmp	.+414    	; 0x1a8 <__bad_interrupt>
       a:	00 00       	nop
       c:	cd c0       	rjmp	.+410    	; 0x1a8 <__bad_interrupt>
       e:	00 00       	nop
      10:	cb c0       	rjmp	.+406    	; 0x1a8 <__bad_interrupt>
      12:	00 00       	nop
      14:	c9 c0       	rjmp	.+402    	; 0x1a8 <__bad_interrupt>
      16:	00 00       	nop
      18:	c7 c0       	rjmp	.+398    	; 0x1a8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	c5 c0       	rjmp	.+394    	; 0x1a8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	c3 c0       	rjmp	.+390    	; 0x1a8 <__bad_interrupt>
      22:	00 00       	nop
      24:	c1 c0       	rjmp	.+386    	; 0x1a8 <__bad_interrupt>
      26:	00 00       	nop
      28:	bf c0       	rjmp	.+382    	; 0x1a8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	bd c0       	rjmp	.+378    	; 0x1a8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	0c 94 9e 14 	jmp	0x293c	; 0x293c <__vector_12>
      34:	0c 94 38 1b 	jmp	0x3670	; 0x3670 <__vector_13>
      38:	b7 c0       	rjmp	.+366    	; 0x1a8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	b5 c0       	rjmp	.+362    	; 0x1a8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	b3 c0       	rjmp	.+358    	; 0x1a8 <__bad_interrupt>
      42:	00 00       	nop
      44:	0c 94 e6 0b 	jmp	0x17cc	; 0x17cc <__vector_17>
      48:	af c0       	rjmp	.+350    	; 0x1a8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	ad c0       	rjmp	.+346    	; 0x1a8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	ab c0       	rjmp	.+342    	; 0x1a8 <__bad_interrupt>
      52:	00 00       	nop
      54:	a9 c0       	rjmp	.+338    	; 0x1a8 <__bad_interrupt>
      56:	00 00       	nop
      58:	a7 c0       	rjmp	.+334    	; 0x1a8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	a5 c0       	rjmp	.+330    	; 0x1a8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	a3 c0       	rjmp	.+326    	; 0x1a8 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 a8 0d 	jmp	0x1b50	; 0x1b50 <__vector_25>
      68:	0c 94 e1 0d 	jmp	0x1bc2	; 0x1bc2 <__vector_26>
      6c:	9d c0       	rjmp	.+314    	; 0x1a8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	9b c0       	rjmp	.+310    	; 0x1a8 <__bad_interrupt>
      72:	00 00       	nop
      74:	0c 94 e9 0a 	jmp	0x15d2	; 0x15d2 <__vector_29>
      78:	97 c0       	rjmp	.+302    	; 0x1a8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	95 c0       	rjmp	.+298    	; 0x1a8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	0c 94 56 0c 	jmp	0x18ac	; 0x18ac <__vector_32>
      84:	91 c0       	rjmp	.+290    	; 0x1a8 <__bad_interrupt>
      86:	00 00       	nop
      88:	8f c0       	rjmp	.+286    	; 0x1a8 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	8d c0       	rjmp	.+282    	; 0x1a8 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 ae 0e 	jmp	0x1d5c	; 0x1d5c <__vector_36>
      94:	0c 94 e7 0e 	jmp	0x1dce	; 0x1dce <__vector_37>
      98:	87 c0       	rjmp	.+270    	; 0x1a8 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	85 c0       	rjmp	.+266    	; 0x1a8 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	83 c0       	rjmp	.+262    	; 0x1a8 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	81 c0       	rjmp	.+258    	; 0x1a8 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	0c 94 c6 0c 	jmp	0x198c	; 0x198c <__vector_42>
      ac:	7d c0       	rjmp	.+250    	; 0x1a8 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	7b c0       	rjmp	.+246    	; 0x1a8 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	79 c0       	rjmp	.+242    	; 0x1a8 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	77 c0       	rjmp	.+238    	; 0x1a8 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	0c 94 36 0d 	jmp	0x1a6c	; 0x1a6c <__vector_47>
      c0:	73 c0       	rjmp	.+230    	; 0x1a8 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	71 c0       	rjmp	.+226    	; 0x1a8 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	6f c0       	rjmp	.+222    	; 0x1a8 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 bd 0f 	jmp	0x1f7a	; 0x1f7a <__vector_51>
      d0:	0c 94 f6 0f 	jmp	0x1fec	; 0x1fec <__vector_52>
      d4:	69 c0       	rjmp	.+210    	; 0x1a8 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 c9 10 	jmp	0x2192	; 0x2192 <__vector_54>
      dc:	0c 94 02 11 	jmp	0x2204	; 0x2204 <__vector_55>
      e0:	63 c0       	rjmp	.+198    	; 0x1a8 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	07 63       	ori	r16, 0x37	; 55
      e6:	42 36       	cpi	r20, 0x62	; 98
      e8:	b7 9b       	sbis	0x16, 7	; 22
      ea:	d8 a7       	std	Y+40, r29	; 0x28
      ec:	1a 39       	cpi	r17, 0x9A	; 154
      ee:	68 56       	subi	r22, 0x68	; 104
      f0:	18 ae       	std	Y+56, r1	; 0x38
      f2:	ba ab       	std	Y+50, r27	; 0x32
      f4:	55 8c       	ldd	r5, Z+29	; 0x1d
      f6:	1d 3c       	cpi	r17, 0xCD	; 205
      f8:	b7 cc       	rjmp	.-1682   	; 0xfffffa68 <__eeprom_end+0xff7efa68>
      fa:	57 63       	ori	r21, 0x37	; 55
      fc:	bd 6d       	ori	r27, 0xDD	; 221
      fe:	ed fd       	.word	0xfded	; ????
     100:	75 3e       	cpi	r23, 0xE5	; 229
     102:	f6 17       	cp	r31, r22
     104:	72 31       	cpi	r23, 0x12	; 18
     106:	bf 00       	.word	0x00bf	; ????
     108:	00 00       	nop
     10a:	80 3f       	cpi	r24, 0xF0	; 240
     10c:	08 00       	.word	0x0008	; ????
     10e:	00 00       	nop
     110:	be 92       	st	-X, r11
     112:	24 49       	sbci	r18, 0x94	; 148
     114:	12 3e       	cpi	r17, 0xE2	; 226
     116:	ab aa       	std	Y+51, r10	; 0x33
     118:	aa 2a       	or	r10, r26
     11a:	be cd       	rjmp	.-1156   	; 0xfffffc98 <__eeprom_end+0xff7efc98>
     11c:	cc cc       	rjmp	.-1640   	; 0xfffffab6 <__eeprom_end+0xff7efab6>
     11e:	4c 3e       	cpi	r20, 0xEC	; 236
     120:	00 00       	nop
     122:	00 80       	ld	r0, Z
     124:	be ab       	std	Y+54, r27	; 0x36
     126:	aa aa       	std	Y+50, r10	; 0x32
     128:	aa 3e       	cpi	r26, 0xEA	; 234
     12a:	00 00       	nop
     12c:	00 00       	nop
     12e:	bf 00       	.word	0x00bf	; ????
     130:	00 00       	nop
     132:	80 3f       	cpi	r24, 0xF0	; 240
     134:	00 00       	nop
     136:	00 00       	nop
     138:	00 08       	sbc	r0, r0
     13a:	41 78       	andi	r20, 0x81	; 129
     13c:	d3 bb       	out	0x13, r29	; 19
     13e:	43 87       	std	Z+11, r20	; 0x0b
     140:	d1 13       	cpse	r29, r17
     142:	3d 19       	sub	r19, r13
     144:	0e 3c       	cpi	r16, 0xCE	; 206
     146:	c3 bd       	out	0x23, r28	; 35
     148:	42 82       	std	Z+2, r4	; 0x02
     14a:	ad 2b       	or	r26, r29
     14c:	3e 68       	ori	r19, 0x8E	; 142
     14e:	ec 82       	std	Y+4, r14	; 0x04
     150:	76 be       	out	0x36, r7	; 54
     152:	d9 8f       	std	Y+25, r29	; 0x19
     154:	e1 a9       	ldd	r30, Z+49	; 0x31
     156:	3e 4c       	sbci	r19, 0xCE	; 206
     158:	80 ef       	ldi	r24, 0xF0	; 240
     15a:	ff be       	out	0x3f, r15	; 63
     15c:	01 c4       	rjmp	.+2050   	; 0x960 <__LOCK_REGION_LENGTH__+0x560>
     15e:	ff 7f       	andi	r31, 0xFF	; 255
     160:	3f 00       	.word	0x003f	; ????
     162:	00 00       	nop
	...

00000166 <__ctors_end>:
     166:	11 24       	eor	r1, r1
     168:	1f be       	out	0x3f, r1	; 63
     16a:	cf ef       	ldi	r28, 0xFF	; 255
     16c:	d1 e2       	ldi	r29, 0x21	; 33
     16e:	de bf       	out	0x3e, r29	; 62
     170:	cd bf       	out	0x3d, r28	; 61
     172:	00 e0       	ldi	r16, 0x00	; 0
     174:	0c bf       	out	0x3c, r16	; 60

00000176 <__do_copy_data>:
     176:	14 e0       	ldi	r17, 0x04	; 4
     178:	a0 e0       	ldi	r26, 0x00	; 0
     17a:	b2 e0       	ldi	r27, 0x02	; 2
     17c:	e6 e3       	ldi	r30, 0x36	; 54
     17e:	fe e3       	ldi	r31, 0x3E	; 62
     180:	00 e0       	ldi	r16, 0x00	; 0
     182:	0b bf       	out	0x3b, r16	; 59
     184:	02 c0       	rjmp	.+4      	; 0x18a <__do_copy_data+0x14>
     186:	07 90       	elpm	r0, Z+
     188:	0d 92       	st	X+, r0
     18a:	a8 36       	cpi	r26, 0x68	; 104
     18c:	b1 07       	cpc	r27, r17
     18e:	d9 f7       	brne	.-10     	; 0x186 <__do_copy_data+0x10>

00000190 <__do_clear_bss>:
     190:	29 e1       	ldi	r18, 0x19	; 25
     192:	a8 e6       	ldi	r26, 0x68	; 104
     194:	b4 e0       	ldi	r27, 0x04	; 4
     196:	01 c0       	rjmp	.+2      	; 0x19a <.do_clear_bss_start>

00000198 <.do_clear_bss_loop>:
     198:	1d 92       	st	X+, r1

0000019a <.do_clear_bss_start>:
     19a:	ab 30       	cpi	r26, 0x0B	; 11
     19c:	b2 07       	cpc	r27, r18
     19e:	e1 f7       	brne	.-8      	; 0x198 <.do_clear_bss_loop>
     1a0:	0e 94 08 0a 	call	0x1410	; 0x1410 <main>
     1a4:	0c 94 19 1f 	jmp	0x3e32	; 0x3e32 <_exit>

000001a8 <__bad_interrupt>:
     1a8:	2b cf       	rjmp	.-426    	; 0x0 <__vectors>

000001aa <Set_drum_time_callback>:
	Encoder_init(Set_drum_time_callback,DRUM_SPEED_ENCODER_TIMER_NUMBER, 16);
	
}
static void Set_drum_time_callback(uint32_t dif_time)
{
	g_drum_time = dif_time;
     1aa:	60 93 fc 0d 	sts	0x0DFC, r22	; 0x800dfc <g_drum_time>
     1ae:	70 93 fd 0d 	sts	0x0DFD, r23	; 0x800dfd <g_drum_time+0x1>
     1b2:	80 93 fe 0d 	sts	0x0DFE, r24	; 0x800dfe <g_drum_time+0x2>
     1b6:	90 93 ff 0d 	sts	0x0DFF, r25	; 0x800dff <g_drum_time+0x3>
     1ba:	08 95       	ret

000001bc <Drum_speed_init>:
 * call back function
 * parameters@ difference time between every ISR For Drum
 * return@ Nothing
 */
void Drum_speed_init(void){
	Encoder_init(Set_drum_time_callback,DRUM_SPEED_ENCODER_TIMER_NUMBER, 16);
     1bc:	40 e1       	ldi	r20, 0x10	; 16
     1be:	50 e0       	ldi	r21, 0x00	; 0
     1c0:	65 e0       	ldi	r22, 0x05	; 5
     1c2:	85 ed       	ldi	r24, 0xD5	; 213
     1c4:	90 e0       	ldi	r25, 0x00	; 0
     1c6:	01 c0       	rjmp	.+2      	; 0x1ca <Encoder_init>
     1c8:	08 95       	ret

000001ca <Encoder_init>:
 */

void Encoder_init(void (*pISR_callback)(uint32_t),uint8_t timer_number,uint16_t ticks_number )
{
	//encoder of Drum on timer 5
	Encoder_1_confg.timer_number = timer_number;
     1ca:	e0 e0       	ldi	r30, 0x00	; 0
     1cc:	fe e0       	ldi	r31, 0x0E	; 14
     1ce:	64 83       	std	Z+4, r22	; 0x04
	// number of ticks 16 to interrupted
	Encoder_1_confg.ticks = ticks_number;
     1d0:	51 83       	std	Z+1, r21	; 0x01
     1d2:	40 83       	st	Z, r20
	//Call back Function 
	Encoder_1_confg.isr_call_back = pISR_callback ; 
     1d4:	93 83       	std	Z+3, r25	; 0x03
     1d6:	82 83       	std	Z+2, r24	; 0x02
    timers_init(&Encoder_1_confg);
     1d8:	cf 01       	movw	r24, r30
     1da:	0c 94 66 0b 	jmp	0x16cc	; 0x16cc <timers_init>
     1de:	08 95       	ret

000001e0 <flowrate_feeding_callback>:
	/*
	*	this function is called back from the ISR to increment the liters counter .
	*/
  // call the feeding operation callback .
    // UART0_puts("FLOW_FEED FFFFFFFFFFFFFFFFFFFFFFFFF\n");
     feeding_operation_callback();
     1e0:	e0 91 05 0e 	lds	r30, 0x0E05	; 0x800e05 <feeding_operation_callback>
     1e4:	f0 91 06 0e 	lds	r31, 0x0E06	; 0x800e06 <feeding_operation_callback+0x1>
     1e8:	19 95       	eicall
     1ea:	08 95       	ret

000001ec <flowrate_outing_callback>:
	/*
	*	this function is called back from the isr to increment the liters counter .
	*/
  // call the feeding operation callback .
  //UART0_puts("FLOW_OUT OOOOOOOOOOOOOOOOOOOOOOOOOOOO\n");
     out_operation_callback();
     1ec:	e0 91 07 0e 	lds	r30, 0x0E07	; 0x800e07 <out_operation_callback>
     1f0:	f0 91 08 0e 	lds	r31, 0x0E08	; 0x800e08 <out_operation_callback+0x1>
     1f4:	19 95       	eicall
     1f6:	08 95       	ret

000001f8 <Flow_rate_init>:
// struts to hold the timers config .
g_Timer_Config feeding_configeration;
g_Timer_Config outing_configeration;

void Flow_rate_init(void (*callback1)(void) , void (*callback2)(void)) 
{
     1f8:	ef 92       	push	r14
     1fa:	ff 92       	push	r15
     1fc:	0f 93       	push	r16
     1fe:	1f 93       	push	r17
     200:	cf 93       	push	r28
     202:	df 93       	push	r29
     204:	7c 01       	movw	r14, r24
     206:	8b 01       	movw	r16, r22
	
	feeding_configeration.ticks = TICKS_FOR_HALF_LITER ;
     208:	ee e0       	ldi	r30, 0x0E	; 14
     20a:	fe e0       	ldi	r31, 0x0E	; 14
     20c:	c5 e0       	ldi	r28, 0x05	; 5
     20e:	d0 e0       	ldi	r29, 0x00	; 0
     210:	d1 83       	std	Z+1, r29	; 0x01
     212:	c0 83       	st	Z, r28
	feeding_configeration.timer_number = FLOWRATE_SENSOR_1_TIMER_NUMBER ;//flowrate1_timer_number
     214:	84 e0       	ldi	r24, 0x04	; 4
     216:	84 83       	std	Z+4, r24	; 0x04
	feeding_configeration.isr_call_back = flowrate_feeding_callback ;
     218:	80 ef       	ldi	r24, 0xF0	; 240
     21a:	90 e0       	ldi	r25, 0x00	; 0
     21c:	93 83       	std	Z+3, r25	; 0x03
     21e:	82 83       	std	Z+2, r24	; 0x02
	// initialize the needed timer with the previous config .
    timers_init(&feeding_configeration);
     220:	cf 01       	movw	r24, r30
     222:	0e 94 66 0b 	call	0x16cc	; 0x16cc <timers_init>
	// initialize other timer for the second flow rate .
	outing_configeration.ticks = TICKS_FOR_HALF_LITER ;
     226:	e9 e0       	ldi	r30, 0x09	; 9
     228:	fe e0       	ldi	r31, 0x0E	; 14
     22a:	d1 83       	std	Z+1, r29	; 0x01
     22c:	c0 83       	st	Z, r28
	outing_configeration.timer_number = FLOWRATE_SENSOR_2_TIMER_NUMBER ;//flowrate2_timer_number
     22e:	83 e0       	ldi	r24, 0x03	; 3
     230:	84 83       	std	Z+4, r24	; 0x04
	outing_configeration.isr_call_back = flowrate_outing_callback ;
     232:	86 ef       	ldi	r24, 0xF6	; 246
     234:	90 e0       	ldi	r25, 0x00	; 0
     236:	93 83       	std	Z+3, r25	; 0x03
     238:	82 83       	std	Z+2, r24	; 0x02
	
	// initialize the needed timer with the previous config .
	timers_init(&outing_configeration);
     23a:	cf 01       	movw	r24, r30
     23c:	0e 94 66 0b 	call	0x16cc	; 0x16cc <timers_init>
	feeding_operation_callback = callback1;
     240:	f0 92 06 0e 	sts	0x0E06, r15	; 0x800e06 <feeding_operation_callback+0x1>
     244:	e0 92 05 0e 	sts	0x0E05, r14	; 0x800e05 <feeding_operation_callback>
	out_operation_callback = callback2 ;
     248:	10 93 08 0e 	sts	0x0E08, r17	; 0x800e08 <out_operation_callback+0x1>
     24c:	00 93 07 0e 	sts	0x0E07, r16	; 0x800e07 <out_operation_callback>
}
     250:	df 91       	pop	r29
     252:	cf 91       	pop	r28
     254:	1f 91       	pop	r17
     256:	0f 91       	pop	r16
     258:	ff 90       	pop	r15
     25a:	ef 90       	pop	r14
     25c:	08 95       	ret

0000025e <Inverter_pre_transmition>:
 * set the enable pin for modbus to start send
 * parameters  Nothing
 * return Nothing
 */
void Inverter_pre_transmition(void) {
	Modbus_change_state(INVERTER, HIGH);
     25e:	61 e0       	ldi	r22, 0x01	; 1
     260:	81 e0       	ldi	r24, 0x01	; 1
     262:	0c 94 49 0b 	jmp	0x1692	; 0x1692 <Modbus_change_state>
     266:	08 95       	ret

00000268 <Inverter_post_transmition>:
 * Clear the enable pin for modbus to start send
 * parameters  Nothing
 * return Nothing
 */
void Inverter_post_transmition(void) {
	Modbus_change_state(INVERTER, LOW);
     268:	60 e0       	ldi	r22, 0x00	; 0
     26a:	81 e0       	ldi	r24, 0x01	; 1
     26c:	0c 94 49 0b 	jmp	0x1692	; 0x1692 <Modbus_change_state>
     270:	08 95       	ret

00000272 <Inverter_init>:
 */
void Inverter_init( UART_Modules uart_n, uint32_t baudrate, uint8_t slave_id )
{
	
	// Modbus Parameters
	s_inv_mod_confg.uart_num = uart_n;
     272:	e8 e6       	ldi	r30, 0x68	; 104
     274:	f4 e0       	ldi	r31, 0x04	; 4
     276:	81 83       	std	Z+1, r24	; 0x01
	s_inv_mod_confg.baud_rate =  baudrate;
     278:	42 83       	std	Z+2, r20	; 0x02
     27a:	53 83       	std	Z+3, r21	; 0x03
     27c:	64 83       	std	Z+4, r22	; 0x04
     27e:	75 83       	std	Z+5, r23	; 0x05
	s_inv_mod_confg.slave_address = slave_id;
     280:	20 83       	st	Z, r18
	s_inv_mod_confg.post_transmission = Inverter_post_transmition;
     282:	84 e3       	ldi	r24, 0x34	; 52
     284:	91 e0       	ldi	r25, 0x01	; 1
     286:	91 87       	std	Z+9, r25	; 0x09
     288:	80 87       	std	Z+8, r24	; 0x08
	s_inv_mod_confg.pre_transmission = Inverter_pre_transmition;
     28a:	8f e2       	ldi	r24, 0x2F	; 47
     28c:	91 e0       	ldi	r25, 0x01	; 1
     28e:	97 83       	std	Z+7, r25	; 0x07
     290:	86 83       	std	Z+6, r24	; 0x06
// 	UART0_puts("slave id ");
// 	UART0_OutUDec(slave_id);

	// init the mod bus on Mod Bus
	
	Modbus_init(INVERTER, &s_inv_mod_confg);
     292:	bf 01       	movw	r22, r30
     294:	81 e0       	ldi	r24, 0x01	; 1
     296:	c8 c6       	rjmp	.+3472   	; 0x1028 <Modbus_init>
     298:	08 95       	ret

0000029a <Modbus_idle_task>:
static void LCD_post_transmission(void) {
	Modbus_change_state(LCD,LOW);
}

static void Modbus_idle_task(void){
	vTaskDelay(1/portTICK_PERIOD_MS);
     29a:	80 e0       	ldi	r24, 0x00	; 0
     29c:	90 e0       	ldi	r25, 0x00	; 0
     29e:	0c 94 bf 18 	jmp	0x317e	; 0x317e <vTaskDelay>
     2a2:	08 95       	ret

000002a4 <LCD_post_transmission>:
static void LCD_pre_transmission(void) {
	Modbus_change_state(LCD,HIGH);
}

static void LCD_post_transmission(void) {
	Modbus_change_state(LCD,LOW);
     2a4:	60 e0       	ldi	r22, 0x00	; 0
     2a6:	80 e0       	ldi	r24, 0x00	; 0
     2a8:	0c 94 49 0b 	jmp	0x1692	; 0x1692 <Modbus_change_state>
     2ac:	08 95       	ret

000002ae <LCD_pre_transmission>:



/* _____callback functions_____________________________________________________ */
static void LCD_pre_transmission(void) {
	Modbus_change_state(LCD,HIGH);
     2ae:	61 e0       	ldi	r22, 0x01	; 1
     2b0:	80 e0       	ldi	r24, 0x00	; 0
     2b2:	0c 94 49 0b 	jmp	0x1692	; 0x1692 <Modbus_change_state>
     2b6:	08 95       	ret

000002b8 <Lcd_init>:


/* _____initialization Global_____________________________________________________ */
void Lcd_init(UART_Modules uart_n,uint32_t baudrate,uint8_t slaveID){
//make sure that DIO_init called first	
	g_LCD_modbus_config.slave_address = slaveID;
     2b8:	e4 e7       	ldi	r30, 0x74	; 116
     2ba:	f4 e0       	ldi	r31, 0x04	; 4
     2bc:	20 83       	st	Z, r18
	g_LCD_modbus_config.uart_num = uart_n;
     2be:	81 83       	std	Z+1, r24	; 0x01
	g_LCD_modbus_config.baud_rate= baudrate;
     2c0:	42 83       	std	Z+2, r20	; 0x02
     2c2:	53 83       	std	Z+3, r21	; 0x03
     2c4:	64 83       	std	Z+4, r22	; 0x04
     2c6:	75 83       	std	Z+5, r23	; 0x05
	g_LCD_modbus_config.pre_transmission = LCD_pre_transmission;
     2c8:	87 e5       	ldi	r24, 0x57	; 87
     2ca:	91 e0       	ldi	r25, 0x01	; 1
     2cc:	97 83       	std	Z+7, r25	; 0x07
     2ce:	86 83       	std	Z+6, r24	; 0x06
	g_LCD_modbus_config.post_transmission = LCD_post_transmission;
     2d0:	82 e5       	ldi	r24, 0x52	; 82
     2d2:	91 e0       	ldi	r25, 0x01	; 1
     2d4:	91 87       	std	Z+9, r25	; 0x09
     2d6:	80 87       	std	Z+8, r24	; 0x08
	g_LCD_modbus_config.modbus_idle_task = Modbus_idle_task;
     2d8:	8d e4       	ldi	r24, 0x4D	; 77
     2da:	91 e0       	ldi	r25, 0x01	; 1
     2dc:	93 87       	std	Z+11, r25	; 0x0b
     2de:	82 87       	std	Z+10, r24	; 0x0a
	Modbus_init(LCD , &(g_LCD_modbus_config));
     2e0:	bf 01       	movw	r22, r30
     2e2:	80 e0       	ldi	r24, 0x00	; 0
     2e4:	a1 c6       	rjmp	.+3394   	; 0x1028 <Modbus_init>
     2e6:	08 95       	ret

000002e8 <Lcd_Read>:
 *
 *                    LCD General Functions 
 * 
************************************************************************************************************/
//
uint16_t Lcd_Read(uint16_t address,uint16_t *pData){
     2e8:	cf 93       	push	r28
     2ea:	df 93       	push	r29
     2ec:	eb 01       	movw	r28, r22
    int err_4 = Modbus_Read_holding_registers(LCD,address, 1);
     2ee:	41 e0       	ldi	r20, 0x01	; 1
     2f0:	50 e0       	ldi	r21, 0x00	; 0
     2f2:	bc 01       	movw	r22, r24
     2f4:	80 e0       	ldi	r24, 0x00	; 0
     2f6:	ae d7       	rcall	.+3932   	; 0x1254 <Modbus_Read_holding_registers>
    if(!err_4){
     2f8:	81 11       	cpse	r24, r1
     2fa:	04 c0       	rjmp	.+8      	; 0x304 <Lcd_Read+0x1c>
        *pData=Modbus_Get_response_buffer(LCD,0);
     2fc:	60 e0       	ldi	r22, 0x00	; 0
     2fe:	87 d7       	rcall	.+3854   	; 0x120e <Modbus_Get_response_buffer>
     300:	99 83       	std	Y+1, r25	; 0x01
     302:	88 83       	st	Y, r24
		//UART0_puts("RECEEEEEEVIVING \n ");
	}
     return LCD_READ_ERROR;
}
     304:	89 e0       	ldi	r24, 0x09	; 9
     306:	90 e0       	ldi	r25, 0x00	; 0
     308:	df 91       	pop	r29
     30a:	cf 91       	pop	r28
     30c:	08 95       	ret

0000030e <Modbus_mster_transaction>:
		g_mod1_read_address = u16ReadAddress;
		g_mod1_read_qty = u16BitQty;
		return Modbus_mster_transaction(device, READ_DISCRETE_INPUTS);
	}
	return INVALID_DEVICE; //error
}
     30e:	8f 92       	push	r8
     310:	9f 92       	push	r9
     312:	af 92       	push	r10
     314:	bf 92       	push	r11
     316:	df 92       	push	r13
     318:	ef 92       	push	r14
     31a:	ff 92       	push	r15
     31c:	0f 93       	push	r16
     31e:	1f 93       	push	r17
     320:	cf 93       	push	r28
     322:	df 93       	push	r29
     324:	cd b7       	in	r28, 0x3d	; 61
     326:	de b7       	in	r29, 0x3e	; 62
     328:	da 95       	dec	r29
     32a:	0f b6       	in	r0, 0x3f	; 63
     32c:	f8 94       	cli
     32e:	de bf       	out	0x3e, r29	; 62
     330:	0f be       	out	0x3f, r0	; 63
     332:	cd bf       	out	0x3d, r28	; 61
     334:	d6 2e       	mov	r13, r22
     336:	81 11       	cpse	r24, r1
     338:	f5 c2       	rjmp	.+1514   	; 0x924 <__LOCK_REGION_LENGTH__+0x524>
     33a:	80 91 b6 06 	lds	r24, 0x06B6	; 0x8006b6 <g_mod0_slave>
     33e:	89 83       	std	Y+1, r24	; 0x01
     340:	2f ef       	ldi	r18, 0xFF	; 255
     342:	62 13       	cpse	r22, r18
     344:	06 c0       	rjmp	.+12     	; 0x352 <Modbus_mster_transaction+0x44>
     346:	8f e0       	ldi	r24, 0x0F	; 15
     348:	8a 83       	std	Y+2, r24	; 0x02
     34a:	68 94       	set
     34c:	bb 24       	eor	r11, r11
     34e:	b1 f8       	bld	r11, 1
     350:	32 c0       	rjmp	.+100    	; 0x3b6 <Modbus_mster_transaction+0xa8>
     352:	6a 83       	std	Y+2, r22	; 0x02
     354:	81 e0       	ldi	r24, 0x01	; 1
     356:	68 17       	cp	r22, r24
     358:	b8 f0       	brcs	.+46     	; 0x388 <Modbus_mster_transaction+0x7a>
     35a:	94 e0       	ldi	r25, 0x04	; 4
     35c:	96 17       	cp	r25, r22
     35e:	18 f4       	brcc	.+6      	; 0x366 <Modbus_mster_transaction+0x58>
     360:	a7 e1       	ldi	r26, 0x17	; 23
     362:	6a 13       	cpse	r22, r26
     364:	11 c0       	rjmp	.+34     	; 0x388 <Modbus_mster_transaction+0x7a>
     366:	80 91 b4 06 	lds	r24, 0x06B4	; 0x8006b4 <g_mod0_read_address>
     36a:	90 91 b5 06 	lds	r25, 0x06B5	; 0x8006b5 <g_mod0_read_address+0x1>
     36e:	9b 83       	std	Y+3, r25	; 0x03
     370:	8c 83       	std	Y+4, r24	; 0x04
     372:	80 91 b2 06 	lds	r24, 0x06B2	; 0x8006b2 <g_mod0_read_qty>
     376:	90 91 b3 06 	lds	r25, 0x06B3	; 0x8006b3 <g_mod0_read_qty+0x1>
     37a:	9d 83       	std	Y+5, r25	; 0x05
     37c:	8e 83       	std	Y+6, r24	; 0x06
     37e:	0f 2e       	mov	r0, r31
     380:	f6 e0       	ldi	r31, 0x06	; 6
     382:	bf 2e       	mov	r11, r31
     384:	f0 2d       	mov	r31, r0
     386:	03 c0       	rjmp	.+6      	; 0x38e <Modbus_mster_transaction+0x80>
     388:	68 94       	set
     38a:	bb 24       	eor	r11, r11
     38c:	b1 f8       	bld	r11, 1
     38e:	b0 e1       	ldi	r27, 0x10	; 16
     390:	bd 15       	cp	r27, r13
     392:	40 f0       	brcs	.+16     	; 0x3a4 <Modbus_mster_transaction+0x96>
     394:	ef e0       	ldi	r30, 0x0F	; 15
     396:	de 16       	cp	r13, r30
     398:	70 f4       	brcc	.+28     	; 0x3b6 <Modbus_mster_transaction+0xa8>
     39a:	8b ef       	ldi	r24, 0xFB	; 251
     39c:	8d 0d       	add	r24, r13
     39e:	82 30       	cpi	r24, 0x02	; 2
     3a0:	00 f5       	brcc	.+64     	; 0x3e2 <Modbus_mster_transaction+0xd4>
     3a2:	09 c0       	rjmp	.+18     	; 0x3b6 <Modbus_mster_transaction+0xa8>
     3a4:	f6 e1       	ldi	r31, 0x16	; 22
     3a6:	df 16       	cp	r13, r31
     3a8:	e0 f0       	brcs	.+56     	; 0x3e2 <Modbus_mster_transaction+0xd4>
     3aa:	27 e1       	ldi	r18, 0x17	; 23
     3ac:	2d 15       	cp	r18, r13
     3ae:	18 f4       	brcc	.+6      	; 0x3b6 <Modbus_mster_transaction+0xa8>
     3b0:	8f ef       	ldi	r24, 0xFF	; 255
     3b2:	d8 12       	cpse	r13, r24
     3b4:	16 c0       	rjmp	.+44     	; 0x3e2 <Modbus_mster_transaction+0xd4>
     3b6:	90 91 30 06 	lds	r25, 0x0630	; 0x800630 <g_mod0_write_address>
     3ba:	80 91 31 06 	lds	r24, 0x0631	; 0x800631 <g_mod0_write_address+0x1>
     3be:	e1 e0       	ldi	r30, 0x01	; 1
     3c0:	f0 e0       	ldi	r31, 0x00	; 0
     3c2:	ec 0f       	add	r30, r28
     3c4:	fd 1f       	adc	r31, r29
     3c6:	eb 0d       	add	r30, r11
     3c8:	f1 1d       	adc	r31, r1
     3ca:	80 83       	st	Z, r24
     3cc:	81 e0       	ldi	r24, 0x01	; 1
     3ce:	8b 0d       	add	r24, r11
     3d0:	e1 e0       	ldi	r30, 0x01	; 1
     3d2:	f0 e0       	ldi	r31, 0x00	; 0
     3d4:	ec 0f       	add	r30, r28
     3d6:	fd 1f       	adc	r31, r29
     3d8:	e8 0f       	add	r30, r24
     3da:	f1 1d       	adc	r31, r1
     3dc:	b3 94       	inc	r11
     3de:	b3 94       	inc	r11
     3e0:	90 83       	st	Z, r25
     3e2:	90 e1       	ldi	r25, 0x10	; 16
     3e4:	d9 16       	cp	r13, r25
     3e6:	09 f4       	brne	.+2      	; 0x3ea <Modbus_mster_transaction+0xdc>
     3e8:	ad c0       	rjmp	.+346    	; 0x544 <__LOCK_REGION_LENGTH__+0x144>
     3ea:	9d 15       	cp	r25, r13
     3ec:	58 f0       	brcs	.+22     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
     3ee:	a6 e0       	ldi	r26, 0x06	; 6
     3f0:	da 16       	cp	r13, r26
     3f2:	61 f1       	breq	.+88     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
     3f4:	bf e0       	ldi	r27, 0x0F	; 15
     3f6:	db 16       	cp	r13, r27
     3f8:	09 f4       	brne	.+2      	; 0x3fc <Modbus_mster_transaction+0xee>
     3fa:	41 c0       	rjmp	.+130    	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
     3fc:	e5 e0       	ldi	r30, 0x05	; 5
     3fe:	de 12       	cpse	r13, r30
     400:	1a c1       	rjmp	.+564    	; 0x636 <__LOCK_REGION_LENGTH__+0x236>
     402:	0d c0       	rjmp	.+26     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
     404:	f7 e1       	ldi	r31, 0x17	; 23
     406:	df 16       	cp	r13, r31
     408:	09 f4       	brne	.+2      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
     40a:	9c c0       	rjmp	.+312    	; 0x544 <__LOCK_REGION_LENGTH__+0x144>
     40c:	2f ef       	ldi	r18, 0xFF	; 255
     40e:	d2 16       	cp	r13, r18
     410:	09 f4       	brne	.+2      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
     412:	98 c0       	rjmp	.+304    	; 0x544 <__LOCK_REGION_LENGTH__+0x144>
     414:	86 e1       	ldi	r24, 0x16	; 22
     416:	d8 16       	cp	r13, r24
     418:	09 f4       	brne	.+2      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
     41a:	df c0       	rjmp	.+446    	; 0x5da <__LOCK_REGION_LENGTH__+0x1da>
     41c:	0c c1       	rjmp	.+536    	; 0x636 <__LOCK_REGION_LENGTH__+0x236>
     41e:	90 91 2e 06 	lds	r25, 0x062E	; 0x80062e <g_mod0_write_qty>
     422:	80 91 2f 06 	lds	r24, 0x062F	; 0x80062f <g_mod0_write_qty+0x1>
     426:	e1 e0       	ldi	r30, 0x01	; 1
     428:	f0 e0       	ldi	r31, 0x00	; 0
     42a:	ec 0f       	add	r30, r28
     42c:	fd 1f       	adc	r31, r29
     42e:	eb 0d       	add	r30, r11
     430:	f1 1d       	adc	r31, r1
     432:	80 83       	st	Z, r24
     434:	81 e0       	ldi	r24, 0x01	; 1
     436:	8b 0d       	add	r24, r11
     438:	e1 e0       	ldi	r30, 0x01	; 1
     43a:	f0 e0       	ldi	r31, 0x00	; 0
     43c:	ec 0f       	add	r30, r28
     43e:	fd 1f       	adc	r31, r29
     440:	e8 0f       	add	r30, r24
     442:	f1 1d       	adc	r31, r1
     444:	b3 94       	inc	r11
     446:	b3 94       	inc	r11
     448:	90 83       	st	Z, r25
     44a:	f5 c0       	rjmp	.+490    	; 0x636 <__LOCK_REGION_LENGTH__+0x236>
     44c:	ee ea       	ldi	r30, 0xAE	; 174
     44e:	f5 e0       	ldi	r31, 0x05	; 5
     450:	80 81       	ld	r24, Z
     452:	91 81       	ldd	r25, Z+1	; 0x01
     454:	a1 e0       	ldi	r26, 0x01	; 1
     456:	b0 e0       	ldi	r27, 0x00	; 0
     458:	ac 0f       	add	r26, r28
     45a:	bd 1f       	adc	r27, r29
     45c:	ab 0d       	add	r26, r11
     45e:	b1 1d       	adc	r27, r1
     460:	9c 93       	st	X, r25
     462:	20 81       	ld	r18, Z
     464:	31 81       	ldd	r19, Z+1	; 0x01
     466:	81 e0       	ldi	r24, 0x01	; 1
     468:	8b 0d       	add	r24, r11
     46a:	e1 e0       	ldi	r30, 0x01	; 1
     46c:	f0 e0       	ldi	r31, 0x00	; 0
     46e:	ec 0f       	add	r30, r28
     470:	fd 1f       	adc	r31, r29
     472:	e8 0f       	add	r30, r24
     474:	f1 1d       	adc	r31, r1
     476:	b3 94       	inc	r11
     478:	b3 94       	inc	r11
     47a:	20 83       	st	Z, r18
     47c:	dc c0       	rjmp	.+440    	; 0x636 <__LOCK_REGION_LENGTH__+0x236>
     47e:	80 91 2e 06 	lds	r24, 0x062E	; 0x80062e <g_mod0_write_qty>
     482:	90 91 2f 06 	lds	r25, 0x062F	; 0x80062f <g_mod0_write_qty+0x1>
     486:	e1 e0       	ldi	r30, 0x01	; 1
     488:	f0 e0       	ldi	r31, 0x00	; 0
     48a:	ec 0f       	add	r30, r28
     48c:	fd 1f       	adc	r31, r29
     48e:	eb 0d       	add	r30, r11
     490:	f1 1d       	adc	r31, r1
     492:	90 83       	st	Z, r25
     494:	32 e0       	ldi	r19, 0x02	; 2
     496:	3b 0d       	add	r19, r11
     498:	21 e0       	ldi	r18, 0x01	; 1
     49a:	2b 0d       	add	r18, r11
     49c:	e1 e0       	ldi	r30, 0x01	; 1
     49e:	f0 e0       	ldi	r31, 0x00	; 0
     4a0:	ec 0f       	add	r30, r28
     4a2:	fd 1f       	adc	r31, r29
     4a4:	e2 0f       	add	r30, r18
     4a6:	f1 1d       	adc	r31, r1
     4a8:	80 83       	st	Z, r24
     4aa:	ac 01       	movw	r20, r24
     4ac:	47 70       	andi	r20, 0x07	; 7
     4ae:	55 27       	eor	r21, r21
     4b0:	45 2b       	or	r20, r21
     4b2:	49 f0       	breq	.+18     	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
     4b4:	96 95       	lsr	r25
     4b6:	87 95       	ror	r24
     4b8:	96 95       	lsr	r25
     4ba:	87 95       	ror	r24
     4bc:	96 95       	lsr	r25
     4be:	87 95       	ror	r24
     4c0:	21 e0       	ldi	r18, 0x01	; 1
     4c2:	28 0f       	add	r18, r24
     4c4:	07 c0       	rjmp	.+14     	; 0x4d4 <__LOCK_REGION_LENGTH__+0xd4>
     4c6:	96 95       	lsr	r25
     4c8:	87 95       	ror	r24
     4ca:	96 95       	lsr	r25
     4cc:	87 95       	ror	r24
     4ce:	96 95       	lsr	r25
     4d0:	87 95       	ror	r24
     4d2:	28 2f       	mov	r18, r24
     4d4:	93 e0       	ldi	r25, 0x03	; 3
     4d6:	b9 0e       	add	r11, r25
     4d8:	fe 01       	movw	r30, r28
     4da:	e3 0f       	add	r30, r19
     4dc:	f1 1d       	adc	r31, r1
     4de:	21 83       	std	Z+1, r18	; 0x01
     4e0:	22 23       	and	r18, r18
     4e2:	09 f4       	brne	.+2      	; 0x4e6 <__LOCK_REGION_LENGTH__+0xe6>
     4e4:	a8 c0       	rjmp	.+336    	; 0x636 <__LOCK_REGION_LENGTH__+0x236>
     4e6:	80 e0       	ldi	r24, 0x00	; 0
     4e8:	98 2f       	mov	r25, r24
     4ea:	91 70       	andi	r25, 0x01	; 1
     4ec:	80 ff       	sbrs	r24, 0
     4ee:	03 c0       	rjmp	.+6      	; 0x4f6 <__LOCK_REGION_LENGTH__+0xf6>
     4f0:	91 30       	cpi	r25, 0x01	; 1
     4f2:	99 f0       	breq	.+38     	; 0x51a <__LOCK_REGION_LENGTH__+0x11a>
     4f4:	23 c0       	rjmp	.+70     	; 0x53c <__LOCK_REGION_LENGTH__+0x13c>
     4f6:	e8 2f       	mov	r30, r24
     4f8:	e6 95       	lsr	r30
     4fa:	f0 e0       	ldi	r31, 0x00	; 0
     4fc:	ee 0f       	add	r30, r30
     4fe:	ff 1f       	adc	r31, r31
     500:	e2 55       	subi	r30, 0x52	; 82
     502:	fa 4f       	sbci	r31, 0xFA	; 250
     504:	40 81       	ld	r20, Z
     506:	51 81       	ldd	r21, Z+1	; 0x01
     508:	e1 e0       	ldi	r30, 0x01	; 1
     50a:	f0 e0       	ldi	r31, 0x00	; 0
     50c:	ec 0f       	add	r30, r28
     50e:	fd 1f       	adc	r31, r29
     510:	eb 0d       	add	r30, r11
     512:	f1 1d       	adc	r31, r1
     514:	40 83       	st	Z, r20
     516:	b3 94       	inc	r11
     518:	11 c0       	rjmp	.+34     	; 0x53c <__LOCK_REGION_LENGTH__+0x13c>
     51a:	e8 2f       	mov	r30, r24
     51c:	e6 95       	lsr	r30
     51e:	f0 e0       	ldi	r31, 0x00	; 0
     520:	ee 0f       	add	r30, r30
     522:	ff 1f       	adc	r31, r31
     524:	e2 55       	subi	r30, 0x52	; 82
     526:	fa 4f       	sbci	r31, 0xFA	; 250
     528:	40 81       	ld	r20, Z
     52a:	51 81       	ldd	r21, Z+1	; 0x01
     52c:	e1 e0       	ldi	r30, 0x01	; 1
     52e:	f0 e0       	ldi	r31, 0x00	; 0
     530:	ec 0f       	add	r30, r28
     532:	fd 1f       	adc	r31, r29
     534:	eb 0d       	add	r30, r11
     536:	f1 1d       	adc	r31, r1
     538:	50 83       	st	Z, r21
     53a:	b3 94       	inc	r11
     53c:	8f 5f       	subi	r24, 0xFF	; 255
     53e:	28 13       	cpse	r18, r24
     540:	d3 cf       	rjmp	.-90     	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
     542:	79 c0       	rjmp	.+242    	; 0x636 <__LOCK_REGION_LENGTH__+0x236>
     544:	60 91 2e 06 	lds	r22, 0x062E	; 0x80062e <g_mod0_write_qty>
     548:	70 91 2f 06 	lds	r23, 0x062F	; 0x80062f <g_mod0_write_qty+0x1>
     54c:	e1 e0       	ldi	r30, 0x01	; 1
     54e:	f0 e0       	ldi	r31, 0x00	; 0
     550:	ec 0f       	add	r30, r28
     552:	fd 1f       	adc	r31, r29
     554:	eb 0d       	add	r30, r11
     556:	f1 1d       	adc	r31, r1
     558:	70 83       	st	Z, r23
     55a:	81 e0       	ldi	r24, 0x01	; 1
     55c:	8b 0d       	add	r24, r11
     55e:	e1 e0       	ldi	r30, 0x01	; 1
     560:	f0 e0       	ldi	r31, 0x00	; 0
     562:	ec 0f       	add	r30, r28
     564:	fd 1f       	adc	r31, r29
     566:	e8 0f       	add	r30, r24
     568:	f1 1d       	adc	r31, r1
     56a:	60 83       	st	Z, r22
     56c:	82 e0       	ldi	r24, 0x02	; 2
     56e:	8b 0d       	add	r24, r11
     570:	e1 e0       	ldi	r30, 0x01	; 1
     572:	f0 e0       	ldi	r31, 0x00	; 0
     574:	ec 0f       	add	r30, r28
     576:	fd 1f       	adc	r31, r29
     578:	e8 0f       	add	r30, r24
     57a:	f1 1d       	adc	r31, r1
     57c:	a3 e0       	ldi	r26, 0x03	; 3
     57e:	ba 0e       	add	r11, r26
     580:	86 2f       	mov	r24, r22
     582:	88 0f       	add	r24, r24
     584:	80 83       	st	Z, r24
     586:	77 27       	eor	r23, r23
     588:	16 16       	cp	r1, r22
     58a:	17 06       	cpc	r1, r23
     58c:	0c f0       	brlt	.+2      	; 0x590 <__LOCK_REGION_LENGTH__+0x190>
     58e:	53 c0       	rjmp	.+166    	; 0x636 <__LOCK_REGION_LENGTH__+0x236>
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	20 e0       	ldi	r18, 0x00	; 0
     596:	88 0f       	add	r24, r24
     598:	99 1f       	adc	r25, r25
     59a:	fc 01       	movw	r30, r24
     59c:	e2 55       	subi	r30, 0x52	; 82
     59e:	fa 4f       	sbci	r31, 0xFA	; 250
     5a0:	80 81       	ld	r24, Z
     5a2:	91 81       	ldd	r25, Z+1	; 0x01
     5a4:	a1 e0       	ldi	r26, 0x01	; 1
     5a6:	b0 e0       	ldi	r27, 0x00	; 0
     5a8:	ac 0f       	add	r26, r28
     5aa:	bd 1f       	adc	r27, r29
     5ac:	ab 0d       	add	r26, r11
     5ae:	b1 1d       	adc	r27, r1
     5b0:	9c 93       	st	X, r25
     5b2:	40 81       	ld	r20, Z
     5b4:	51 81       	ldd	r21, Z+1	; 0x01
     5b6:	81 e0       	ldi	r24, 0x01	; 1
     5b8:	8b 0d       	add	r24, r11
     5ba:	e1 e0       	ldi	r30, 0x01	; 1
     5bc:	f0 e0       	ldi	r31, 0x00	; 0
     5be:	ec 0f       	add	r30, r28
     5c0:	fd 1f       	adc	r31, r29
     5c2:	e8 0f       	add	r30, r24
     5c4:	f1 1d       	adc	r31, r1
     5c6:	b3 94       	inc	r11
     5c8:	b3 94       	inc	r11
     5ca:	40 83       	st	Z, r20
     5cc:	2f 5f       	subi	r18, 0xFF	; 255
     5ce:	82 2f       	mov	r24, r18
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	86 17       	cp	r24, r22
     5d4:	97 07       	cpc	r25, r23
     5d6:	fc f2       	brlt	.-66     	; 0x596 <__LOCK_REGION_LENGTH__+0x196>
     5d8:	2e c0       	rjmp	.+92     	; 0x636 <__LOCK_REGION_LENGTH__+0x236>
     5da:	ee ea       	ldi	r30, 0xAE	; 174
     5dc:	f5 e0       	ldi	r31, 0x05	; 5
     5de:	80 81       	ld	r24, Z
     5e0:	91 81       	ldd	r25, Z+1	; 0x01
     5e2:	a1 e0       	ldi	r26, 0x01	; 1
     5e4:	b0 e0       	ldi	r27, 0x00	; 0
     5e6:	ac 0f       	add	r26, r28
     5e8:	bd 1f       	adc	r27, r29
     5ea:	ab 0d       	add	r26, r11
     5ec:	b1 1d       	adc	r27, r1
     5ee:	9c 93       	st	X, r25
     5f0:	80 81       	ld	r24, Z
     5f2:	91 81       	ldd	r25, Z+1	; 0x01
     5f4:	91 e0       	ldi	r25, 0x01	; 1
     5f6:	9b 0d       	add	r25, r11
     5f8:	a1 e0       	ldi	r26, 0x01	; 1
     5fa:	b0 e0       	ldi	r27, 0x00	; 0
     5fc:	ac 0f       	add	r26, r28
     5fe:	bd 1f       	adc	r27, r29
     600:	a9 0f       	add	r26, r25
     602:	b1 1d       	adc	r27, r1
     604:	8c 93       	st	X, r24
     606:	82 81       	ldd	r24, Z+2	; 0x02
     608:	93 81       	ldd	r25, Z+3	; 0x03
     60a:	82 e0       	ldi	r24, 0x02	; 2
     60c:	8b 0d       	add	r24, r11
     60e:	a1 e0       	ldi	r26, 0x01	; 1
     610:	b0 e0       	ldi	r27, 0x00	; 0
     612:	ac 0f       	add	r26, r28
     614:	bd 1f       	adc	r27, r29
     616:	a8 0f       	add	r26, r24
     618:	b1 1d       	adc	r27, r1
     61a:	9c 93       	st	X, r25
     61c:	22 81       	ldd	r18, Z+2	; 0x02
     61e:	33 81       	ldd	r19, Z+3	; 0x03
     620:	83 e0       	ldi	r24, 0x03	; 3
     622:	8b 0d       	add	r24, r11
     624:	e1 e0       	ldi	r30, 0x01	; 1
     626:	f0 e0       	ldi	r31, 0x00	; 0
     628:	ec 0f       	add	r30, r28
     62a:	fd 1f       	adc	r31, r29
     62c:	e8 0f       	add	r30, r24
     62e:	f1 1d       	adc	r31, r1
     630:	b4 e0       	ldi	r27, 0x04	; 4
     632:	bb 0e       	add	r11, r27
     634:	20 83       	st	Z, r18
     636:	bb 20       	and	r11, r11
     638:	b9 f0       	breq	.+46     	; 0x668 <__LOCK_REGION_LENGTH__+0x268>
     63a:	8e 01       	movw	r16, r28
     63c:	0f 5f       	subi	r16, 0xFF	; 255
     63e:	1f 4f       	sbci	r17, 0xFF	; 255
     640:	ee 24       	eor	r14, r14
     642:	ea 94       	dec	r14
     644:	eb 0c       	add	r14, r11
     646:	f1 2c       	mov	r15, r1
     648:	ef ef       	ldi	r30, 0xFF	; 255
     64a:	ee 1a       	sub	r14, r30
     64c:	fe 0a       	sbc	r15, r30
     64e:	e0 0e       	add	r14, r16
     650:	f1 1e       	adc	r15, r17
     652:	8f ef       	ldi	r24, 0xFF	; 255
     654:	9f ef       	ldi	r25, 0xFF	; 255
     656:	d8 01       	movw	r26, r16
     658:	6d 91       	ld	r22, X+
     65a:	8d 01       	movw	r16, r26
     65c:	0e 94 0c 1b 	call	0x3618	; 0x3618 <crc16_update>
     660:	0e 15       	cp	r16, r14
     662:	1f 05       	cpc	r17, r15
     664:	c1 f7       	brne	.-16     	; 0x656 <__LOCK_REGION_LENGTH__+0x256>
     666:	02 c0       	rjmp	.+4      	; 0x66c <__LOCK_REGION_LENGTH__+0x26c>
     668:	8f ef       	ldi	r24, 0xFF	; 255
     66a:	9f ef       	ldi	r25, 0xFF	; 255
     66c:	ee 24       	eor	r14, r14
     66e:	e3 94       	inc	r14
     670:	eb 0c       	add	r14, r11
     672:	e1 e0       	ldi	r30, 0x01	; 1
     674:	f0 e0       	ldi	r31, 0x00	; 0
     676:	ec 0f       	add	r30, r28
     678:	fd 1f       	adc	r31, r29
     67a:	eb 0d       	add	r30, r11
     67c:	f1 1d       	adc	r31, r1
     67e:	80 83       	st	Z, r24
     680:	b3 94       	inc	r11
     682:	b3 94       	inc	r11
     684:	e1 e0       	ldi	r30, 0x01	; 1
     686:	f0 e0       	ldi	r31, 0x00	; 0
     688:	ec 0f       	add	r30, r28
     68a:	fd 1f       	adc	r31, r29
     68c:	ee 0d       	add	r30, r14
     68e:	f1 1d       	adc	r31, r1
     690:	90 83       	st	Z, r25
     692:	e1 e0       	ldi	r30, 0x01	; 1
     694:	f0 e0       	ldi	r31, 0x00	; 0
     696:	ec 0f       	add	r30, r28
     698:	fd 1f       	adc	r31, r29
     69a:	eb 0d       	add	r30, r11
     69c:	f1 1d       	adc	r31, r1
     69e:	10 82       	st	Z, r1
     6a0:	e0 91 a1 05 	lds	r30, 0x05A1	; 0x8005a1 <g_mod0_Serial_getc>
     6a4:	f0 91 a2 05 	lds	r31, 0x05A2	; 0x8005a2 <g_mod0_Serial_getc+0x1>
     6a8:	19 95       	eicall
     6aa:	81 15       	cp	r24, r1
     6ac:	91 40       	sbci	r25, 0x01	; 1
     6ae:	c1 f7       	brne	.-16     	; 0x6a0 <__LOCK_REGION_LENGTH__+0x2a0>
     6b0:	e0 91 a7 05 	lds	r30, 0x05A7	; 0x8005a7 <g_mod0_pre_transmission>
     6b4:	f0 91 a8 05 	lds	r31, 0x05A8	; 0x8005a8 <g_mod0_pre_transmission+0x1>
     6b8:	30 97       	sbiw	r30, 0x00	; 0
     6ba:	09 f0       	breq	.+2      	; 0x6be <__LOCK_REGION_LENGTH__+0x2be>
     6bc:	19 95       	eicall
     6be:	bb 20       	and	r11, r11
     6c0:	a1 f0       	breq	.+40     	; 0x6ea <__LOCK_REGION_LENGTH__+0x2ea>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5f       	subi	r16, 0xFF	; 255
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	f1 2c       	mov	r15, r1
     6ca:	ef ef       	ldi	r30, 0xFF	; 255
     6cc:	ee 1a       	sub	r14, r30
     6ce:	fe 0a       	sbc	r15, r30
     6d0:	e0 0e       	add	r14, r16
     6d2:	f1 1e       	adc	r15, r17
     6d4:	e0 91 a3 05 	lds	r30, 0x05A3	; 0x8005a3 <g_mod0_Serial_putc>
     6d8:	f0 91 a4 05 	lds	r31, 0x05A4	; 0x8005a4 <g_mod0_Serial_putc+0x1>
     6dc:	d8 01       	movw	r26, r16
     6de:	8d 91       	ld	r24, X+
     6e0:	8d 01       	movw	r16, r26
     6e2:	19 95       	eicall
     6e4:	0e 15       	cp	r16, r14
     6e6:	1f 05       	cpc	r17, r15
     6e8:	a9 f7       	brne	.-22     	; 0x6d4 <__LOCK_REGION_LENGTH__+0x2d4>
     6ea:	e0 91 9f 05 	lds	r30, 0x059F	; 0x80059f <g_mod0_Serial_flush>
     6ee:	f0 91 a0 05 	lds	r31, 0x05A0	; 0x8005a0 <g_mod0_Serial_flush+0x1>
     6f2:	19 95       	eicall
     6f4:	ef e8       	ldi	r30, 0x8F	; 143
     6f6:	f1 e0       	ldi	r31, 0x01	; 1
     6f8:	31 97       	sbiw	r30, 0x01	; 1
     6fa:	f1 f7       	brne	.-4      	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
     6fc:	00 c0       	rjmp	.+0      	; 0x6fe <__LOCK_REGION_LENGTH__+0x2fe>
     6fe:	00 00       	nop
     700:	e0 91 a5 05 	lds	r30, 0x05A5	; 0x8005a5 <g_mod0_post_transmission>
     704:	f0 91 a6 05 	lds	r31, 0x05A6	; 0x8005a6 <g_mod0_post_transmission+0x1>
     708:	30 97       	sbiw	r30, 0x00	; 0
     70a:	09 f0       	breq	.+2      	; 0x70e <__LOCK_REGION_LENGTH__+0x30e>
     70c:	19 95       	eicall
     70e:	0e 94 2d 1b 	call	0x365a	; 0x365a <Get_millis>
     712:	4b 01       	movw	r8, r22
     714:	5c 01       	movw	r10, r24
     716:	08 e0       	ldi	r16, 0x08	; 8
     718:	10 e0       	ldi	r17, 0x00	; 0
     71a:	ed 2c       	mov	r14, r13
     71c:	f1 2c       	mov	r15, r1
     71e:	e0 91 9d 05 	lds	r30, 0x059D	; 0x80059d <g_mod0_Serial_available>
     722:	f0 91 9e 05 	lds	r31, 0x059E	; 0x80059e <g_mod0_Serial_available+0x1>
     726:	19 95       	eicall
     728:	89 2b       	or	r24, r25
     72a:	91 f0       	breq	.+36     	; 0x750 <__LOCK_REGION_LENGTH__+0x350>
     72c:	dd 24       	eor	r13, r13
     72e:	d3 94       	inc	r13
     730:	d1 0e       	add	r13, r17
     732:	e0 91 a1 05 	lds	r30, 0x05A1	; 0x8005a1 <g_mod0_Serial_getc>
     736:	f0 91 a2 05 	lds	r31, 0x05A2	; 0x8005a2 <g_mod0_Serial_getc+0x1>
     73a:	19 95       	eicall
     73c:	e1 e0       	ldi	r30, 0x01	; 1
     73e:	f0 e0       	ldi	r31, 0x00	; 0
     740:	ec 0f       	add	r30, r28
     742:	fd 1f       	adc	r31, r29
     744:	e1 0f       	add	r30, r17
     746:	f1 1d       	adc	r31, r1
     748:	80 83       	st	Z, r24
     74a:	01 50       	subi	r16, 0x01	; 1
     74c:	1d 2d       	mov	r17, r13
     74e:	07 c0       	rjmp	.+14     	; 0x75e <__LOCK_REGION_LENGTH__+0x35e>
     750:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <g_mod0_idle>
     754:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <g_mod0_idle+0x1>
     758:	30 97       	sbiw	r30, 0x00	; 0
     75a:	09 f0       	breq	.+2      	; 0x75e <__LOCK_REGION_LENGTH__+0x35e>
     75c:	19 95       	eicall
     75e:	15 30       	cpi	r17, 0x05	; 5
     760:	51 f5       	brne	.+84     	; 0x7b6 <__LOCK_REGION_LENGTH__+0x3b6>
     762:	99 81       	ldd	r25, Y+1	; 0x01
     764:	80 91 b6 06 	lds	r24, 0x06B6	; 0x8006b6 <g_mod0_slave>
     768:	98 13       	cpse	r25, r24
     76a:	40 c4       	rjmp	.+2176   	; 0xfec <__LOCK_REGION_LENGTH__+0xbec>
     76c:	8a 81       	ldd	r24, Y+2	; 0x02
     76e:	28 2f       	mov	r18, r24
     770:	2f 77       	andi	r18, 0x7F	; 127
     772:	30 e0       	ldi	r19, 0x00	; 0
     774:	2e 15       	cp	r18, r14
     776:	3f 05       	cpc	r19, r15
     778:	09 f0       	breq	.+2      	; 0x77c <__LOCK_REGION_LENGTH__+0x37c>
     77a:	3a c4       	rjmp	.+2164   	; 0xff0 <__LOCK_REGION_LENGTH__+0xbf0>
     77c:	88 23       	and	r24, r24
     77e:	24 f4       	brge	.+8      	; 0x788 <__LOCK_REGION_LENGTH__+0x388>
     780:	8b 81       	ldd	r24, Y+3	; 0x03
     782:	88 23       	and	r24, r24
     784:	e1 f1       	breq	.+120    	; 0x7fe <__LOCK_REGION_LENGTH__+0x3fe>
     786:	c9 c0       	rjmp	.+402    	; 0x91a <__LOCK_REGION_LENGTH__+0x51a>
     788:	81 31       	cpi	r24, 0x11	; 17
     78a:	58 f4       	brcc	.+22     	; 0x7a2 <__LOCK_REGION_LENGTH__+0x3a2>
     78c:	8f 30       	cpi	r24, 0x0F	; 15
     78e:	08 f0       	brcs	.+2      	; 0x792 <__LOCK_REGION_LENGTH__+0x392>
     790:	bf c3       	rjmp	.+1918   	; 0xf10 <__LOCK_REGION_LENGTH__+0xb10>
     792:	81 30       	cpi	r24, 0x01	; 1
     794:	80 f0       	brcs	.+32     	; 0x7b6 <__LOCK_REGION_LENGTH__+0x3b6>
     796:	85 30       	cpi	r24, 0x05	; 5
     798:	68 f0       	brcs	.+26     	; 0x7b4 <__LOCK_REGION_LENGTH__+0x3b4>
     79a:	87 30       	cpi	r24, 0x07	; 7
     79c:	08 f4       	brcc	.+2      	; 0x7a0 <__LOCK_REGION_LENGTH__+0x3a0>
     79e:	b8 c3       	rjmp	.+1904   	; 0xf10 <__LOCK_REGION_LENGTH__+0xb10>
     7a0:	0a c0       	rjmp	.+20     	; 0x7b6 <__LOCK_REGION_LENGTH__+0x3b6>
     7a2:	87 31       	cpi	r24, 0x17	; 23
     7a4:	39 f0       	breq	.+14     	; 0x7b4 <__LOCK_REGION_LENGTH__+0x3b4>
     7a6:	8f 3f       	cpi	r24, 0xFF	; 255
     7a8:	09 f4       	brne	.+2      	; 0x7ac <__LOCK_REGION_LENGTH__+0x3ac>
     7aa:	b2 c3       	rjmp	.+1892   	; 0xf10 <__LOCK_REGION_LENGTH__+0xb10>
     7ac:	86 31       	cpi	r24, 0x16	; 22
     7ae:	19 f4       	brne	.+6      	; 0x7b6 <__LOCK_REGION_LENGTH__+0x3b6>
     7b0:	05 e0       	ldi	r16, 0x05	; 5
     7b2:	af c3       	rjmp	.+1886   	; 0xf12 <__LOCK_REGION_LENGTH__+0xb12>
     7b4:	0b 81       	ldd	r16, Y+3	; 0x03
     7b6:	0e 94 2d 1b 	call	0x365a	; 0x365a <Get_millis>
     7ba:	dc 01       	movw	r26, r24
     7bc:	cb 01       	movw	r24, r22
     7be:	88 19       	sub	r24, r8
     7c0:	99 09       	sbc	r25, r9
     7c2:	aa 09       	sbc	r26, r10
     7c4:	bb 09       	sbc	r27, r11
     7c6:	89 3c       	cpi	r24, 0xC9	; 201
     7c8:	91 05       	cpc	r25, r1
     7ca:	a1 05       	cpc	r26, r1
     7cc:	b1 05       	cpc	r27, r1
     7ce:	08 f4       	brcc	.+2      	; 0x7d2 <__LOCK_REGION_LENGTH__+0x3d2>
     7d0:	05 c4       	rjmp	.+2058   	; 0xfdc <__LOCK_REGION_LENGTH__+0xbdc>
     7d2:	80 e0       	ldi	r24, 0x00	; 0
     7d4:	92 e0       	ldi	r25, 0x02	; 2
     7d6:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <UART0_puts>
     7da:	01 11       	cpse	r16, r1
     7dc:	0b c4       	rjmp	.+2070   	; 0xff4 <__LOCK_REGION_LENGTH__+0xbf4>
     7de:	82 ee       	ldi	r24, 0xE2	; 226
     7e0:	81 11       	cpse	r24, r1
     7e2:	9b c0       	rjmp	.+310    	; 0x91a <__LOCK_REGION_LENGTH__+0x51a>
     7e4:	15 30       	cpi	r17, 0x05	; 5
     7e6:	08 f4       	brcc	.+2      	; 0x7ea <__LOCK_REGION_LENGTH__+0x3ea>
     7e8:	b4 c3       	rjmp	.+1896   	; 0xf52 <__LOCK_REGION_LENGTH__+0xb52>
     7ea:	a1 2e       	mov	r10, r17
     7ec:	b1 2c       	mov	r11, r1
     7ee:	75 01       	movw	r14, r10
     7f0:	f2 e0       	ldi	r31, 0x02	; 2
     7f2:	ef 1a       	sub	r14, r31
     7f4:	f1 08       	sbc	r15, r1
     7f6:	1e 14       	cp	r1, r14
     7f8:	1f 04       	cpc	r1, r15
     7fa:	5c f0       	brlt	.+22     	; 0x812 <__LOCK_REGION_LENGTH__+0x412>
     7fc:	99 c3       	rjmp	.+1842   	; 0xf30 <__LOCK_REGION_LENGTH__+0xb30>
     7fe:	0f 2e       	mov	r0, r31
     800:	f3 e0       	ldi	r31, 0x03	; 3
     802:	ef 2e       	mov	r14, r31
     804:	f1 2c       	mov	r15, r1
     806:	f0 2d       	mov	r31, r0
     808:	0f 2e       	mov	r0, r31
     80a:	f5 e0       	ldi	r31, 0x05	; 5
     80c:	af 2e       	mov	r10, r31
     80e:	b1 2c       	mov	r11, r1
     810:	f0 2d       	mov	r31, r0
     812:	20 e0       	ldi	r18, 0x00	; 0
     814:	30 e0       	ldi	r19, 0x00	; 0
     816:	8f ef       	ldi	r24, 0xFF	; 255
     818:	9f ef       	ldi	r25, 0xFF	; 255
     81a:	10 e0       	ldi	r17, 0x00	; 0
     81c:	e1 e0       	ldi	r30, 0x01	; 1
     81e:	f0 e0       	ldi	r31, 0x00	; 0
     820:	ec 0f       	add	r30, r28
     822:	fd 1f       	adc	r31, r29
     824:	e2 0f       	add	r30, r18
     826:	f3 1f       	adc	r31, r19
     828:	60 81       	ld	r22, Z
     82a:	0e 94 0c 1b 	call	0x3618	; 0x3618 <crc16_update>
     82e:	1f 5f       	subi	r17, 0xFF	; 255
     830:	21 2f       	mov	r18, r17
     832:	30 e0       	ldi	r19, 0x00	; 0
     834:	2e 15       	cp	r18, r14
     836:	3f 05       	cpc	r19, r15
     838:	8c f3       	brlt	.-30     	; 0x81c <__LOCK_REGION_LENGTH__+0x41c>
     83a:	7c c3       	rjmp	.+1784   	; 0xf34 <__LOCK_REGION_LENGTH__+0xb34>
     83c:	89 2f       	mov	r24, r25
     83e:	99 27       	eor	r25, r25
     840:	fe 01       	movw	r30, r28
     842:	ea 0d       	add	r30, r10
     844:	fb 1d       	adc	r31, r11
     846:	20 81       	ld	r18, Z
     848:	30 e0       	ldi	r19, 0x00	; 0
     84a:	82 17       	cp	r24, r18
     84c:	93 07       	cpc	r25, r19
     84e:	09 f0       	breq	.+2      	; 0x852 <__LOCK_REGION_LENGTH__+0x452>
     850:	7e c3       	rjmp	.+1788   	; 0xf4e <__LOCK_REGION_LENGTH__+0xb4e>
     852:	7f c3       	rjmp	.+1790   	; 0xf52 <__LOCK_REGION_LENGTH__+0xb52>
     854:	9b 81       	ldd	r25, Y+3	; 0x03
     856:	96 95       	lsr	r25
     858:	e9 f5       	brne	.+122    	; 0x8d4 <__LOCK_REGION_LENGTH__+0x4d4>
     85a:	80 e0       	ldi	r24, 0x00	; 0
     85c:	5e c0       	rjmp	.+188    	; 0x91a <__LOCK_REGION_LENGTH__+0x51a>
     85e:	7b 81       	ldd	r23, Y+3	; 0x03
     860:	97 2f       	mov	r25, r23
     862:	96 95       	lsr	r25
     864:	09 f4       	brne	.+2      	; 0x868 <__LOCK_REGION_LENGTH__+0x468>
     866:	83 c3       	rjmp	.+1798   	; 0xf6e <__LOCK_REGION_LENGTH__+0xb6e>
     868:	fe 01       	movw	r30, r28
     86a:	31 96       	adiw	r30, 0x01	; 1
     86c:	40 e0       	ldi	r20, 0x00	; 0
     86e:	50 e0       	ldi	r21, 0x00	; 0
     870:	80 e0       	ldi	r24, 0x00	; 0
     872:	80 34       	cpi	r24, 0x40	; 64
     874:	70 f4       	brcc	.+28     	; 0x892 <__LOCK_REGION_LENGTH__+0x492>
     876:	24 81       	ldd	r18, Z+4	; 0x04
     878:	30 e0       	ldi	r19, 0x00	; 0
     87a:	32 2f       	mov	r19, r18
     87c:	22 27       	eor	r18, r18
     87e:	63 81       	ldd	r22, Z+3	; 0x03
     880:	26 2b       	or	r18, r22
     882:	da 01       	movw	r26, r20
     884:	aa 0f       	add	r26, r26
     886:	bb 1f       	adc	r27, r27
     888:	ae 5c       	subi	r26, 0xCE	; 206
     88a:	b9 4f       	sbci	r27, 0xF9	; 249
     88c:	11 96       	adiw	r26, 0x01	; 1
     88e:	3c 93       	st	X, r19
     890:	2e 93       	st	-X, r18
     892:	8f 5f       	subi	r24, 0xFF	; 255
     894:	4f 5f       	subi	r20, 0xFF	; 255
     896:	5f 4f       	sbci	r21, 0xFF	; 255
     898:	32 96       	adiw	r30, 0x02	; 2
     89a:	89 13       	cpse	r24, r25
     89c:	ea cf       	rjmp	.-44     	; 0x872 <__LOCK_REGION_LENGTH__+0x472>
     89e:	8f ef       	ldi	r24, 0xFF	; 255
     8a0:	89 0f       	add	r24, r25
     8a2:	80 93 ab 05 	sts	0x05AB, r24	; 0x8005ab <g_mod0_response_buffer_length>
     8a6:	70 ff       	sbrs	r23, 0
     8a8:	35 c0       	rjmp	.+106    	; 0x914 <__LOCK_REGION_LENGTH__+0x514>
     8aa:	90 34       	cpi	r25, 0x40	; 64
     8ac:	70 f4       	brcc	.+28     	; 0x8ca <__LOCK_REGION_LENGTH__+0x4ca>
     8ae:	29 2f       	mov	r18, r25
     8b0:	30 e0       	ldi	r19, 0x00	; 0
     8b2:	22 0f       	add	r18, r18
     8b4:	33 1f       	adc	r19, r19
     8b6:	fe 01       	movw	r30, r28
     8b8:	e2 0f       	add	r30, r18
     8ba:	f3 1f       	adc	r31, r19
     8bc:	44 81       	ldd	r20, Z+4	; 0x04
     8be:	50 e0       	ldi	r21, 0x00	; 0
     8c0:	f9 01       	movw	r30, r18
     8c2:	ee 5c       	subi	r30, 0xCE	; 206
     8c4:	f9 4f       	sbci	r31, 0xF9	; 249
     8c6:	51 83       	std	Z+1, r21	; 0x01
     8c8:	40 83       	st	Z, r20
     8ca:	9f 5f       	subi	r25, 0xFF	; 255
     8cc:	90 93 ab 05 	sts	0x05AB, r25	; 0x8005ab <g_mod0_response_buffer_length>
     8d0:	80 e0       	ldi	r24, 0x00	; 0
     8d2:	23 c0       	rjmp	.+70     	; 0x91a <__LOCK_REGION_LENGTH__+0x51a>
     8d4:	fe 01       	movw	r30, r28
     8d6:	31 96       	adiw	r30, 0x01	; 1
     8d8:	40 e0       	ldi	r20, 0x00	; 0
     8da:	50 e0       	ldi	r21, 0x00	; 0
     8dc:	80 e0       	ldi	r24, 0x00	; 0
     8de:	80 34       	cpi	r24, 0x40	; 64
     8e0:	70 f4       	brcc	.+28     	; 0x8fe <__LOCK_REGION_LENGTH__+0x4fe>
     8e2:	23 81       	ldd	r18, Z+3	; 0x03
     8e4:	30 e0       	ldi	r19, 0x00	; 0
     8e6:	32 2f       	mov	r19, r18
     8e8:	22 27       	eor	r18, r18
     8ea:	64 81       	ldd	r22, Z+4	; 0x04
     8ec:	26 2b       	or	r18, r22
     8ee:	da 01       	movw	r26, r20
     8f0:	aa 0f       	add	r26, r26
     8f2:	bb 1f       	adc	r27, r27
     8f4:	ae 5c       	subi	r26, 0xCE	; 206
     8f6:	b9 4f       	sbci	r27, 0xF9	; 249
     8f8:	11 96       	adiw	r26, 0x01	; 1
     8fa:	3c 93       	st	X, r19
     8fc:	2e 93       	st	-X, r18
     8fe:	8f 5f       	subi	r24, 0xFF	; 255
     900:	4f 5f       	subi	r20, 0xFF	; 255
     902:	5f 4f       	sbci	r21, 0xFF	; 255
     904:	32 96       	adiw	r30, 0x02	; 2
     906:	89 13       	cpse	r24, r25
     908:	ea cf       	rjmp	.-44     	; 0x8de <__LOCK_REGION_LENGTH__+0x4de>
     90a:	91 50       	subi	r25, 0x01	; 1
     90c:	90 93 ab 05 	sts	0x05AB, r25	; 0x8005ab <g_mod0_response_buffer_length>
     910:	80 e0       	ldi	r24, 0x00	; 0
     912:	03 c0       	rjmp	.+6      	; 0x91a <__LOCK_REGION_LENGTH__+0x51a>
     914:	80 e0       	ldi	r24, 0x00	; 0
     916:	01 c0       	rjmp	.+2      	; 0x91a <__LOCK_REGION_LENGTH__+0x51a>
     918:	80 e0       	ldi	r24, 0x00	; 0
     91a:	10 92 ad 05 	sts	0x05AD, r1	; 0x8005ad <g_mod0_transmit_buffer_index>
     91e:	10 92 ac 05 	sts	0x05AC, r1	; 0x8005ac <g_mod0_response_buffer_index>
     922:	70 c3       	rjmp	.+1760   	; 0x1004 <__LOCK_REGION_LENGTH__+0xc04>
     924:	81 30       	cpi	r24, 0x01	; 1
     926:	09 f0       	breq	.+2      	; 0x92a <__LOCK_REGION_LENGTH__+0x52a>
     928:	f1 c2       	rjmp	.+1506   	; 0xf0c <__LOCK_REGION_LENGTH__+0xb0c>
     92a:	80 91 9c 05 	lds	r24, 0x059C	; 0x80059c <g_mod1_slave>
     92e:	89 83       	std	Y+1, r24	; 0x01
     930:	2f ef       	ldi	r18, 0xFF	; 255
     932:	62 13       	cpse	r22, r18
     934:	06 c0       	rjmp	.+12     	; 0x942 <__LOCK_REGION_LENGTH__+0x542>
     936:	8f e0       	ldi	r24, 0x0F	; 15
     938:	8a 83       	std	Y+2, r24	; 0x02
     93a:	68 94       	set
     93c:	bb 24       	eor	r11, r11
     93e:	b1 f8       	bld	r11, 1
     940:	32 c0       	rjmp	.+100    	; 0x9a6 <__LOCK_REGION_LENGTH__+0x5a6>
     942:	6a 83       	std	Y+2, r22	; 0x02
     944:	81 e0       	ldi	r24, 0x01	; 1
     946:	68 17       	cp	r22, r24
     948:	b8 f0       	brcs	.+46     	; 0x978 <__LOCK_REGION_LENGTH__+0x578>
     94a:	94 e0       	ldi	r25, 0x04	; 4
     94c:	96 17       	cp	r25, r22
     94e:	18 f4       	brcc	.+6      	; 0x956 <__LOCK_REGION_LENGTH__+0x556>
     950:	a7 e1       	ldi	r26, 0x17	; 23
     952:	6a 13       	cpse	r22, r26
     954:	11 c0       	rjmp	.+34     	; 0x978 <__LOCK_REGION_LENGTH__+0x578>
     956:	80 91 9a 05 	lds	r24, 0x059A	; 0x80059a <g_mod1_read_address>
     95a:	90 91 9b 05 	lds	r25, 0x059B	; 0x80059b <g_mod1_read_address+0x1>
     95e:	9b 83       	std	Y+3, r25	; 0x03
     960:	8c 83       	std	Y+4, r24	; 0x04
     962:	80 91 98 05 	lds	r24, 0x0598	; 0x800598 <g_mod1_read_qty>
     966:	90 91 99 05 	lds	r25, 0x0599	; 0x800599 <g_mod1_read_qty+0x1>
     96a:	9d 83       	std	Y+5, r25	; 0x05
     96c:	8e 83       	std	Y+6, r24	; 0x06
     96e:	0f 2e       	mov	r0, r31
     970:	f6 e0       	ldi	r31, 0x06	; 6
     972:	bf 2e       	mov	r11, r31
     974:	f0 2d       	mov	r31, r0
     976:	03 c0       	rjmp	.+6      	; 0x97e <__LOCK_REGION_LENGTH__+0x57e>
     978:	68 94       	set
     97a:	bb 24       	eor	r11, r11
     97c:	b1 f8       	bld	r11, 1
     97e:	b0 e1       	ldi	r27, 0x10	; 16
     980:	bd 15       	cp	r27, r13
     982:	40 f0       	brcs	.+16     	; 0x994 <__LOCK_REGION_LENGTH__+0x594>
     984:	ef e0       	ldi	r30, 0x0F	; 15
     986:	de 16       	cp	r13, r30
     988:	70 f4       	brcc	.+28     	; 0x9a6 <__LOCK_REGION_LENGTH__+0x5a6>
     98a:	8b ef       	ldi	r24, 0xFB	; 251
     98c:	8d 0d       	add	r24, r13
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	00 f5       	brcc	.+64     	; 0x9d2 <__LOCK_REGION_LENGTH__+0x5d2>
     992:	09 c0       	rjmp	.+18     	; 0x9a6 <__LOCK_REGION_LENGTH__+0x5a6>
     994:	f6 e1       	ldi	r31, 0x16	; 22
     996:	df 16       	cp	r13, r31
     998:	e0 f0       	brcs	.+56     	; 0x9d2 <__LOCK_REGION_LENGTH__+0x5d2>
     99a:	27 e1       	ldi	r18, 0x17	; 23
     99c:	2d 15       	cp	r18, r13
     99e:	18 f4       	brcc	.+6      	; 0x9a6 <__LOCK_REGION_LENGTH__+0x5a6>
     9a0:	8f ef       	ldi	r24, 0xFF	; 255
     9a2:	d8 12       	cpse	r13, r24
     9a4:	16 c0       	rjmp	.+44     	; 0x9d2 <__LOCK_REGION_LENGTH__+0x5d2>
     9a6:	90 91 16 05 	lds	r25, 0x0516	; 0x800516 <g_mod1_write_address>
     9aa:	80 91 17 05 	lds	r24, 0x0517	; 0x800517 <g_mod1_write_address+0x1>
     9ae:	e1 e0       	ldi	r30, 0x01	; 1
     9b0:	f0 e0       	ldi	r31, 0x00	; 0
     9b2:	ec 0f       	add	r30, r28
     9b4:	fd 1f       	adc	r31, r29
     9b6:	eb 0d       	add	r30, r11
     9b8:	f1 1d       	adc	r31, r1
     9ba:	80 83       	st	Z, r24
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	8b 0d       	add	r24, r11
     9c0:	e1 e0       	ldi	r30, 0x01	; 1
     9c2:	f0 e0       	ldi	r31, 0x00	; 0
     9c4:	ec 0f       	add	r30, r28
     9c6:	fd 1f       	adc	r31, r29
     9c8:	e8 0f       	add	r30, r24
     9ca:	f1 1d       	adc	r31, r1
     9cc:	b3 94       	inc	r11
     9ce:	b3 94       	inc	r11
     9d0:	90 83       	st	Z, r25
     9d2:	90 e1       	ldi	r25, 0x10	; 16
     9d4:	d9 16       	cp	r13, r25
     9d6:	09 f4       	brne	.+2      	; 0x9da <__LOCK_REGION_LENGTH__+0x5da>
     9d8:	ad c0       	rjmp	.+346    	; 0xb34 <__LOCK_REGION_LENGTH__+0x734>
     9da:	9d 15       	cp	r25, r13
     9dc:	58 f0       	brcs	.+22     	; 0x9f4 <__LOCK_REGION_LENGTH__+0x5f4>
     9de:	a6 e0       	ldi	r26, 0x06	; 6
     9e0:	da 16       	cp	r13, r26
     9e2:	61 f1       	breq	.+88     	; 0xa3c <__LOCK_REGION_LENGTH__+0x63c>
     9e4:	bf e0       	ldi	r27, 0x0F	; 15
     9e6:	db 16       	cp	r13, r27
     9e8:	09 f4       	brne	.+2      	; 0x9ec <__LOCK_REGION_LENGTH__+0x5ec>
     9ea:	41 c0       	rjmp	.+130    	; 0xa6e <__LOCK_REGION_LENGTH__+0x66e>
     9ec:	e5 e0       	ldi	r30, 0x05	; 5
     9ee:	de 12       	cpse	r13, r30
     9f0:	1b c1       	rjmp	.+566    	; 0xc28 <__LOCK_REGION_LENGTH__+0x828>
     9f2:	0d c0       	rjmp	.+26     	; 0xa0e <__LOCK_REGION_LENGTH__+0x60e>
     9f4:	f7 e1       	ldi	r31, 0x17	; 23
     9f6:	df 16       	cp	r13, r31
     9f8:	09 f4       	brne	.+2      	; 0x9fc <__LOCK_REGION_LENGTH__+0x5fc>
     9fa:	9c c0       	rjmp	.+312    	; 0xb34 <__LOCK_REGION_LENGTH__+0x734>
     9fc:	2f ef       	ldi	r18, 0xFF	; 255
     9fe:	d2 16       	cp	r13, r18
     a00:	09 f4       	brne	.+2      	; 0xa04 <__LOCK_REGION_LENGTH__+0x604>
     a02:	98 c0       	rjmp	.+304    	; 0xb34 <__LOCK_REGION_LENGTH__+0x734>
     a04:	86 e1       	ldi	r24, 0x16	; 22
     a06:	d8 16       	cp	r13, r24
     a08:	09 f4       	brne	.+2      	; 0xa0c <__LOCK_REGION_LENGTH__+0x60c>
     a0a:	e0 c0       	rjmp	.+448    	; 0xbcc <__LOCK_REGION_LENGTH__+0x7cc>
     a0c:	0d c1       	rjmp	.+538    	; 0xc28 <__LOCK_REGION_LENGTH__+0x828>
     a0e:	90 91 14 05 	lds	r25, 0x0514	; 0x800514 <g_mod1_write_qty>
     a12:	80 91 15 05 	lds	r24, 0x0515	; 0x800515 <g_mod1_write_qty+0x1>
     a16:	e1 e0       	ldi	r30, 0x01	; 1
     a18:	f0 e0       	ldi	r31, 0x00	; 0
     a1a:	ec 0f       	add	r30, r28
     a1c:	fd 1f       	adc	r31, r29
     a1e:	eb 0d       	add	r30, r11
     a20:	f1 1d       	adc	r31, r1
     a22:	80 83       	st	Z, r24
     a24:	81 e0       	ldi	r24, 0x01	; 1
     a26:	8b 0d       	add	r24, r11
     a28:	e1 e0       	ldi	r30, 0x01	; 1
     a2a:	f0 e0       	ldi	r31, 0x00	; 0
     a2c:	ec 0f       	add	r30, r28
     a2e:	fd 1f       	adc	r31, r29
     a30:	e8 0f       	add	r30, r24
     a32:	f1 1d       	adc	r31, r1
     a34:	b3 94       	inc	r11
     a36:	b3 94       	inc	r11
     a38:	90 83       	st	Z, r25
     a3a:	f6 c0       	rjmp	.+492    	; 0xc28 <__LOCK_REGION_LENGTH__+0x828>
     a3c:	e4 e9       	ldi	r30, 0x94	; 148
     a3e:	f4 e0       	ldi	r31, 0x04	; 4
     a40:	80 81       	ld	r24, Z
     a42:	91 81       	ldd	r25, Z+1	; 0x01
     a44:	a1 e0       	ldi	r26, 0x01	; 1
     a46:	b0 e0       	ldi	r27, 0x00	; 0
     a48:	ac 0f       	add	r26, r28
     a4a:	bd 1f       	adc	r27, r29
     a4c:	ab 0d       	add	r26, r11
     a4e:	b1 1d       	adc	r27, r1
     a50:	9c 93       	st	X, r25
     a52:	20 81       	ld	r18, Z
     a54:	31 81       	ldd	r19, Z+1	; 0x01
     a56:	81 e0       	ldi	r24, 0x01	; 1
     a58:	8b 0d       	add	r24, r11
     a5a:	e1 e0       	ldi	r30, 0x01	; 1
     a5c:	f0 e0       	ldi	r31, 0x00	; 0
     a5e:	ec 0f       	add	r30, r28
     a60:	fd 1f       	adc	r31, r29
     a62:	e8 0f       	add	r30, r24
     a64:	f1 1d       	adc	r31, r1
     a66:	b3 94       	inc	r11
     a68:	b3 94       	inc	r11
     a6a:	20 83       	st	Z, r18
     a6c:	dd c0       	rjmp	.+442    	; 0xc28 <__LOCK_REGION_LENGTH__+0x828>
     a6e:	80 91 14 05 	lds	r24, 0x0514	; 0x800514 <g_mod1_write_qty>
     a72:	90 91 15 05 	lds	r25, 0x0515	; 0x800515 <g_mod1_write_qty+0x1>
     a76:	e1 e0       	ldi	r30, 0x01	; 1
     a78:	f0 e0       	ldi	r31, 0x00	; 0
     a7a:	ec 0f       	add	r30, r28
     a7c:	fd 1f       	adc	r31, r29
     a7e:	eb 0d       	add	r30, r11
     a80:	f1 1d       	adc	r31, r1
     a82:	90 83       	st	Z, r25
     a84:	22 e0       	ldi	r18, 0x02	; 2
     a86:	2b 0d       	add	r18, r11
     a88:	31 e0       	ldi	r19, 0x01	; 1
     a8a:	3b 0d       	add	r19, r11
     a8c:	e1 e0       	ldi	r30, 0x01	; 1
     a8e:	f0 e0       	ldi	r31, 0x00	; 0
     a90:	ec 0f       	add	r30, r28
     a92:	fd 1f       	adc	r31, r29
     a94:	e3 0f       	add	r30, r19
     a96:	f1 1d       	adc	r31, r1
     a98:	80 83       	st	Z, r24
     a9a:	ac 01       	movw	r20, r24
     a9c:	47 70       	andi	r20, 0x07	; 7
     a9e:	55 27       	eor	r21, r21
     aa0:	45 2b       	or	r20, r21
     aa2:	49 f0       	breq	.+18     	; 0xab6 <__LOCK_REGION_LENGTH__+0x6b6>
     aa4:	96 95       	lsr	r25
     aa6:	87 95       	ror	r24
     aa8:	96 95       	lsr	r25
     aaa:	87 95       	ror	r24
     aac:	96 95       	lsr	r25
     aae:	87 95       	ror	r24
     ab0:	91 e0       	ldi	r25, 0x01	; 1
     ab2:	98 0f       	add	r25, r24
     ab4:	07 c0       	rjmp	.+14     	; 0xac4 <__LOCK_REGION_LENGTH__+0x6c4>
     ab6:	96 95       	lsr	r25
     ab8:	87 95       	ror	r24
     aba:	96 95       	lsr	r25
     abc:	87 95       	ror	r24
     abe:	96 95       	lsr	r25
     ac0:	87 95       	ror	r24
     ac2:	98 2f       	mov	r25, r24
     ac4:	a3 e0       	ldi	r26, 0x03	; 3
     ac6:	ba 0e       	add	r11, r26
     ac8:	fe 01       	movw	r30, r28
     aca:	e2 0f       	add	r30, r18
     acc:	f1 1d       	adc	r31, r1
     ace:	91 83       	std	Z+1, r25	; 0x01
     ad0:	99 23       	and	r25, r25
     ad2:	09 f4       	brne	.+2      	; 0xad6 <__LOCK_REGION_LENGTH__+0x6d6>
     ad4:	a9 c0       	rjmp	.+338    	; 0xc28 <__LOCK_REGION_LENGTH__+0x828>
     ad6:	80 e0       	ldi	r24, 0x00	; 0
     ad8:	28 2f       	mov	r18, r24
     ada:	21 70       	andi	r18, 0x01	; 1
     adc:	80 ff       	sbrs	r24, 0
     ade:	03 c0       	rjmp	.+6      	; 0xae6 <__LOCK_REGION_LENGTH__+0x6e6>
     ae0:	21 30       	cpi	r18, 0x01	; 1
     ae2:	99 f0       	breq	.+38     	; 0xb0a <__LOCK_REGION_LENGTH__+0x70a>
     ae4:	23 c0       	rjmp	.+70     	; 0xb2c <__LOCK_REGION_LENGTH__+0x72c>
     ae6:	e8 2f       	mov	r30, r24
     ae8:	e6 95       	lsr	r30
     aea:	f0 e0       	ldi	r31, 0x00	; 0
     aec:	ee 0f       	add	r30, r30
     aee:	ff 1f       	adc	r31, r31
     af0:	ec 56       	subi	r30, 0x6C	; 108
     af2:	fb 4f       	sbci	r31, 0xFB	; 251
     af4:	20 81       	ld	r18, Z
     af6:	31 81       	ldd	r19, Z+1	; 0x01
     af8:	e1 e0       	ldi	r30, 0x01	; 1
     afa:	f0 e0       	ldi	r31, 0x00	; 0
     afc:	ec 0f       	add	r30, r28
     afe:	fd 1f       	adc	r31, r29
     b00:	eb 0d       	add	r30, r11
     b02:	f1 1d       	adc	r31, r1
     b04:	20 83       	st	Z, r18
     b06:	b3 94       	inc	r11
     b08:	11 c0       	rjmp	.+34     	; 0xb2c <__LOCK_REGION_LENGTH__+0x72c>
     b0a:	e8 2f       	mov	r30, r24
     b0c:	e6 95       	lsr	r30
     b0e:	f0 e0       	ldi	r31, 0x00	; 0
     b10:	ee 0f       	add	r30, r30
     b12:	ff 1f       	adc	r31, r31
     b14:	ec 56       	subi	r30, 0x6C	; 108
     b16:	fb 4f       	sbci	r31, 0xFB	; 251
     b18:	20 81       	ld	r18, Z
     b1a:	31 81       	ldd	r19, Z+1	; 0x01
     b1c:	e1 e0       	ldi	r30, 0x01	; 1
     b1e:	f0 e0       	ldi	r31, 0x00	; 0
     b20:	ec 0f       	add	r30, r28
     b22:	fd 1f       	adc	r31, r29
     b24:	eb 0d       	add	r30, r11
     b26:	f1 1d       	adc	r31, r1
     b28:	30 83       	st	Z, r19
     b2a:	b3 94       	inc	r11
     b2c:	8f 5f       	subi	r24, 0xFF	; 255
     b2e:	98 13       	cpse	r25, r24
     b30:	d3 cf       	rjmp	.-90     	; 0xad8 <__LOCK_REGION_LENGTH__+0x6d8>
     b32:	7a c0       	rjmp	.+244    	; 0xc28 <__LOCK_REGION_LENGTH__+0x828>
     b34:	80 91 14 05 	lds	r24, 0x0514	; 0x800514 <g_mod1_write_qty>
     b38:	90 91 15 05 	lds	r25, 0x0515	; 0x800515 <g_mod1_write_qty+0x1>
     b3c:	e1 e0       	ldi	r30, 0x01	; 1
     b3e:	f0 e0       	ldi	r31, 0x00	; 0
     b40:	ec 0f       	add	r30, r28
     b42:	fd 1f       	adc	r31, r29
     b44:	eb 0d       	add	r30, r11
     b46:	f1 1d       	adc	r31, r1
     b48:	90 83       	st	Z, r25
     b4a:	21 e0       	ldi	r18, 0x01	; 1
     b4c:	2b 0d       	add	r18, r11
     b4e:	e1 e0       	ldi	r30, 0x01	; 1
     b50:	f0 e0       	ldi	r31, 0x00	; 0
     b52:	ec 0f       	add	r30, r28
     b54:	fd 1f       	adc	r31, r29
     b56:	e2 0f       	add	r30, r18
     b58:	f1 1d       	adc	r31, r1
     b5a:	80 83       	st	Z, r24
     b5c:	22 e0       	ldi	r18, 0x02	; 2
     b5e:	2b 0d       	add	r18, r11
     b60:	e1 e0       	ldi	r30, 0x01	; 1
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	ec 0f       	add	r30, r28
     b66:	fd 1f       	adc	r31, r29
     b68:	e2 0f       	add	r30, r18
     b6a:	f1 1d       	adc	r31, r1
     b6c:	b3 e0       	ldi	r27, 0x03	; 3
     b6e:	bb 0e       	add	r11, r27
     b70:	28 2f       	mov	r18, r24
     b72:	22 0f       	add	r18, r18
     b74:	20 83       	st	Z, r18
     b76:	ac 01       	movw	r20, r24
     b78:	55 27       	eor	r21, r21
     b7a:	14 16       	cp	r1, r20
     b7c:	15 06       	cpc	r1, r21
     b7e:	0c f0       	brlt	.+2      	; 0xb82 <__LOCK_REGION_LENGTH__+0x782>
     b80:	53 c0       	rjmp	.+166    	; 0xc28 <__LOCK_REGION_LENGTH__+0x828>
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	90 e0       	ldi	r25, 0x00	; 0
     b86:	20 e0       	ldi	r18, 0x00	; 0
     b88:	88 0f       	add	r24, r24
     b8a:	99 1f       	adc	r25, r25
     b8c:	fc 01       	movw	r30, r24
     b8e:	ec 56       	subi	r30, 0x6C	; 108
     b90:	fb 4f       	sbci	r31, 0xFB	; 251
     b92:	80 81       	ld	r24, Z
     b94:	91 81       	ldd	r25, Z+1	; 0x01
     b96:	a1 e0       	ldi	r26, 0x01	; 1
     b98:	b0 e0       	ldi	r27, 0x00	; 0
     b9a:	ac 0f       	add	r26, r28
     b9c:	bd 1f       	adc	r27, r29
     b9e:	ab 0d       	add	r26, r11
     ba0:	b1 1d       	adc	r27, r1
     ba2:	9c 93       	st	X, r25
     ba4:	60 81       	ld	r22, Z
     ba6:	71 81       	ldd	r23, Z+1	; 0x01
     ba8:	81 e0       	ldi	r24, 0x01	; 1
     baa:	8b 0d       	add	r24, r11
     bac:	e1 e0       	ldi	r30, 0x01	; 1
     bae:	f0 e0       	ldi	r31, 0x00	; 0
     bb0:	ec 0f       	add	r30, r28
     bb2:	fd 1f       	adc	r31, r29
     bb4:	e8 0f       	add	r30, r24
     bb6:	f1 1d       	adc	r31, r1
     bb8:	b3 94       	inc	r11
     bba:	b3 94       	inc	r11
     bbc:	60 83       	st	Z, r22
     bbe:	2f 5f       	subi	r18, 0xFF	; 255
     bc0:	82 2f       	mov	r24, r18
     bc2:	90 e0       	ldi	r25, 0x00	; 0
     bc4:	84 17       	cp	r24, r20
     bc6:	95 07       	cpc	r25, r21
     bc8:	fc f2       	brlt	.-66     	; 0xb88 <__LOCK_REGION_LENGTH__+0x788>
     bca:	2e c0       	rjmp	.+92     	; 0xc28 <__LOCK_REGION_LENGTH__+0x828>
     bcc:	e4 e9       	ldi	r30, 0x94	; 148
     bce:	f4 e0       	ldi	r31, 0x04	; 4
     bd0:	80 81       	ld	r24, Z
     bd2:	91 81       	ldd	r25, Z+1	; 0x01
     bd4:	a1 e0       	ldi	r26, 0x01	; 1
     bd6:	b0 e0       	ldi	r27, 0x00	; 0
     bd8:	ac 0f       	add	r26, r28
     bda:	bd 1f       	adc	r27, r29
     bdc:	ab 0d       	add	r26, r11
     bde:	b1 1d       	adc	r27, r1
     be0:	9c 93       	st	X, r25
     be2:	80 81       	ld	r24, Z
     be4:	91 81       	ldd	r25, Z+1	; 0x01
     be6:	91 e0       	ldi	r25, 0x01	; 1
     be8:	9b 0d       	add	r25, r11
     bea:	a1 e0       	ldi	r26, 0x01	; 1
     bec:	b0 e0       	ldi	r27, 0x00	; 0
     bee:	ac 0f       	add	r26, r28
     bf0:	bd 1f       	adc	r27, r29
     bf2:	a9 0f       	add	r26, r25
     bf4:	b1 1d       	adc	r27, r1
     bf6:	8c 93       	st	X, r24
     bf8:	82 81       	ldd	r24, Z+2	; 0x02
     bfa:	93 81       	ldd	r25, Z+3	; 0x03
     bfc:	82 e0       	ldi	r24, 0x02	; 2
     bfe:	8b 0d       	add	r24, r11
     c00:	a1 e0       	ldi	r26, 0x01	; 1
     c02:	b0 e0       	ldi	r27, 0x00	; 0
     c04:	ac 0f       	add	r26, r28
     c06:	bd 1f       	adc	r27, r29
     c08:	a8 0f       	add	r26, r24
     c0a:	b1 1d       	adc	r27, r1
     c0c:	9c 93       	st	X, r25
     c0e:	22 81       	ldd	r18, Z+2	; 0x02
     c10:	33 81       	ldd	r19, Z+3	; 0x03
     c12:	83 e0       	ldi	r24, 0x03	; 3
     c14:	8b 0d       	add	r24, r11
     c16:	e1 e0       	ldi	r30, 0x01	; 1
     c18:	f0 e0       	ldi	r31, 0x00	; 0
     c1a:	ec 0f       	add	r30, r28
     c1c:	fd 1f       	adc	r31, r29
     c1e:	e8 0f       	add	r30, r24
     c20:	f1 1d       	adc	r31, r1
     c22:	84 e0       	ldi	r24, 0x04	; 4
     c24:	b8 0e       	add	r11, r24
     c26:	20 83       	st	Z, r18
     c28:	bb 20       	and	r11, r11
     c2a:	b9 f0       	breq	.+46     	; 0xc5a <__LOCK_REGION_LENGTH__+0x85a>
     c2c:	8e 01       	movw	r16, r28
     c2e:	0f 5f       	subi	r16, 0xFF	; 255
     c30:	1f 4f       	sbci	r17, 0xFF	; 255
     c32:	ee 24       	eor	r14, r14
     c34:	ea 94       	dec	r14
     c36:	eb 0c       	add	r14, r11
     c38:	f1 2c       	mov	r15, r1
     c3a:	9f ef       	ldi	r25, 0xFF	; 255
     c3c:	e9 1a       	sub	r14, r25
     c3e:	f9 0a       	sbc	r15, r25
     c40:	e0 0e       	add	r14, r16
     c42:	f1 1e       	adc	r15, r17
     c44:	8f ef       	ldi	r24, 0xFF	; 255
     c46:	9f ef       	ldi	r25, 0xFF	; 255
     c48:	d8 01       	movw	r26, r16
     c4a:	6d 91       	ld	r22, X+
     c4c:	8d 01       	movw	r16, r26
     c4e:	0e 94 0c 1b 	call	0x3618	; 0x3618 <crc16_update>
     c52:	0e 15       	cp	r16, r14
     c54:	1f 05       	cpc	r17, r15
     c56:	c1 f7       	brne	.-16     	; 0xc48 <__LOCK_REGION_LENGTH__+0x848>
     c58:	02 c0       	rjmp	.+4      	; 0xc5e <__LOCK_REGION_LENGTH__+0x85e>
     c5a:	8f ef       	ldi	r24, 0xFF	; 255
     c5c:	9f ef       	ldi	r25, 0xFF	; 255
     c5e:	ee 24       	eor	r14, r14
     c60:	e3 94       	inc	r14
     c62:	eb 0c       	add	r14, r11
     c64:	e1 e0       	ldi	r30, 0x01	; 1
     c66:	f0 e0       	ldi	r31, 0x00	; 0
     c68:	ec 0f       	add	r30, r28
     c6a:	fd 1f       	adc	r31, r29
     c6c:	eb 0d       	add	r30, r11
     c6e:	f1 1d       	adc	r31, r1
     c70:	80 83       	st	Z, r24
     c72:	b3 94       	inc	r11
     c74:	b3 94       	inc	r11
     c76:	e1 e0       	ldi	r30, 0x01	; 1
     c78:	f0 e0       	ldi	r31, 0x00	; 0
     c7a:	ec 0f       	add	r30, r28
     c7c:	fd 1f       	adc	r31, r29
     c7e:	ee 0d       	add	r30, r14
     c80:	f1 1d       	adc	r31, r1
     c82:	90 83       	st	Z, r25
     c84:	e1 e0       	ldi	r30, 0x01	; 1
     c86:	f0 e0       	ldi	r31, 0x00	; 0
     c88:	ec 0f       	add	r30, r28
     c8a:	fd 1f       	adc	r31, r29
     c8c:	eb 0d       	add	r30, r11
     c8e:	f1 1d       	adc	r31, r1
     c90:	10 82       	st	Z, r1
     c92:	e0 91 87 04 	lds	r30, 0x0487	; 0x800487 <g_mod1_Serial_getc>
     c96:	f0 91 88 04 	lds	r31, 0x0488	; 0x800488 <g_mod1_Serial_getc+0x1>
     c9a:	19 95       	eicall
     c9c:	81 15       	cp	r24, r1
     c9e:	91 40       	sbci	r25, 0x01	; 1
     ca0:	c1 f7       	brne	.-16     	; 0xc92 <__LOCK_REGION_LENGTH__+0x892>
     ca2:	e0 91 8d 04 	lds	r30, 0x048D	; 0x80048d <g_mod1_pre_transmission>
     ca6:	f0 91 8e 04 	lds	r31, 0x048E	; 0x80048e <g_mod1_pre_transmission+0x1>
     caa:	30 97       	sbiw	r30, 0x00	; 0
     cac:	09 f0       	breq	.+2      	; 0xcb0 <__LOCK_REGION_LENGTH__+0x8b0>
     cae:	19 95       	eicall
     cb0:	bb 20       	and	r11, r11
     cb2:	a1 f0       	breq	.+40     	; 0xcdc <__LOCK_REGION_LENGTH__+0x8dc>
     cb4:	8e 01       	movw	r16, r28
     cb6:	0f 5f       	subi	r16, 0xFF	; 255
     cb8:	1f 4f       	sbci	r17, 0xFF	; 255
     cba:	f1 2c       	mov	r15, r1
     cbc:	ef ef       	ldi	r30, 0xFF	; 255
     cbe:	ee 1a       	sub	r14, r30
     cc0:	fe 0a       	sbc	r15, r30
     cc2:	e0 0e       	add	r14, r16
     cc4:	f1 1e       	adc	r15, r17
     cc6:	e0 91 89 04 	lds	r30, 0x0489	; 0x800489 <g_mod1_Serial_putc>
     cca:	f0 91 8a 04 	lds	r31, 0x048A	; 0x80048a <g_mod1_Serial_putc+0x1>
     cce:	d8 01       	movw	r26, r16
     cd0:	8d 91       	ld	r24, X+
     cd2:	8d 01       	movw	r16, r26
     cd4:	19 95       	eicall
     cd6:	e0 16       	cp	r14, r16
     cd8:	f1 06       	cpc	r15, r17
     cda:	a9 f7       	brne	.-22     	; 0xcc6 <__LOCK_REGION_LENGTH__+0x8c6>
     cdc:	e0 91 83 04 	lds	r30, 0x0483	; 0x800483 <g_mod1_Serial_flush>
     ce0:	f0 91 84 04 	lds	r31, 0x0484	; 0x800484 <g_mod1_Serial_flush+0x1>
     ce4:	19 95       	eicall
     ce6:	e7 e0       	ldi	r30, 0x07	; 7
     ce8:	f7 e0       	ldi	r31, 0x07	; 7
     cea:	31 97       	sbiw	r30, 0x01	; 1
     cec:	f1 f7       	brne	.-4      	; 0xcea <__LOCK_REGION_LENGTH__+0x8ea>
     cee:	00 c0       	rjmp	.+0      	; 0xcf0 <__LOCK_REGION_LENGTH__+0x8f0>
     cf0:	00 00       	nop
     cf2:	e0 91 8b 04 	lds	r30, 0x048B	; 0x80048b <g_mod1_post_transmission>
     cf6:	f0 91 8c 04 	lds	r31, 0x048C	; 0x80048c <g_mod1_post_transmission+0x1>
     cfa:	30 97       	sbiw	r30, 0x00	; 0
     cfc:	09 f0       	breq	.+2      	; 0xd00 <__LOCK_REGION_LENGTH__+0x900>
     cfe:	19 95       	eicall
     d00:	0e 94 2d 1b 	call	0x365a	; 0x365a <Get_millis>
     d04:	4b 01       	movw	r8, r22
     d06:	5c 01       	movw	r10, r24
     d08:	08 e0       	ldi	r16, 0x08	; 8
     d0a:	10 e0       	ldi	r17, 0x00	; 0
     d0c:	ed 2c       	mov	r14, r13
     d0e:	f1 2c       	mov	r15, r1
     d10:	e0 91 85 04 	lds	r30, 0x0485	; 0x800485 <g_mod1_Serial_available>
     d14:	f0 91 86 04 	lds	r31, 0x0486	; 0x800486 <g_mod1_Serial_available+0x1>
     d18:	19 95       	eicall
     d1a:	89 2b       	or	r24, r25
     d1c:	91 f0       	breq	.+36     	; 0xd42 <__LOCK_REGION_LENGTH__+0x942>
     d1e:	dd 24       	eor	r13, r13
     d20:	d3 94       	inc	r13
     d22:	d1 0e       	add	r13, r17
     d24:	e0 91 87 04 	lds	r30, 0x0487	; 0x800487 <g_mod1_Serial_getc>
     d28:	f0 91 88 04 	lds	r31, 0x0488	; 0x800488 <g_mod1_Serial_getc+0x1>
     d2c:	19 95       	eicall
     d2e:	e1 e0       	ldi	r30, 0x01	; 1
     d30:	f0 e0       	ldi	r31, 0x00	; 0
     d32:	ec 0f       	add	r30, r28
     d34:	fd 1f       	adc	r31, r29
     d36:	e1 0f       	add	r30, r17
     d38:	f1 1d       	adc	r31, r1
     d3a:	80 83       	st	Z, r24
     d3c:	01 50       	subi	r16, 0x01	; 1
     d3e:	1d 2d       	mov	r17, r13
     d40:	07 c0       	rjmp	.+14     	; 0xd50 <__LOCK_REGION_LENGTH__+0x950>
     d42:	e0 91 8f 04 	lds	r30, 0x048F	; 0x80048f <g_mod1_idle>
     d46:	f0 91 90 04 	lds	r31, 0x0490	; 0x800490 <g_mod1_idle+0x1>
     d4a:	30 97       	sbiw	r30, 0x00	; 0
     d4c:	09 f0       	breq	.+2      	; 0xd50 <__LOCK_REGION_LENGTH__+0x950>
     d4e:	19 95       	eicall
     d50:	15 30       	cpi	r17, 0x05	; 5
     d52:	51 f5       	brne	.+84     	; 0xda8 <__LOCK_REGION_LENGTH__+0x9a8>
     d54:	99 81       	ldd	r25, Y+1	; 0x01
     d56:	80 91 9c 05 	lds	r24, 0x059C	; 0x80059c <g_mod1_slave>
     d5a:	98 13       	cpse	r25, r24
     d5c:	4d c1       	rjmp	.+666    	; 0xff8 <__LOCK_REGION_LENGTH__+0xbf8>
     d5e:	8a 81       	ldd	r24, Y+2	; 0x02
     d60:	28 2f       	mov	r18, r24
     d62:	2f 77       	andi	r18, 0x7F	; 127
     d64:	30 e0       	ldi	r19, 0x00	; 0
     d66:	2e 15       	cp	r18, r14
     d68:	3f 05       	cpc	r19, r15
     d6a:	09 f0       	breq	.+2      	; 0xd6e <__LOCK_REGION_LENGTH__+0x96e>
     d6c:	47 c1       	rjmp	.+654    	; 0xffc <__LOCK_REGION_LENGTH__+0xbfc>
     d6e:	88 23       	and	r24, r24
     d70:	24 f4       	brge	.+8      	; 0xd7a <__LOCK_REGION_LENGTH__+0x97a>
     d72:	8b 81       	ldd	r24, Y+3	; 0x03
     d74:	88 23       	and	r24, r24
     d76:	d9 f1       	breq	.+118    	; 0xdee <__LOCK_REGION_LENGTH__+0x9ee>
     d78:	c4 c0       	rjmp	.+392    	; 0xf02 <__LOCK_REGION_LENGTH__+0xb02>
     d7a:	81 31       	cpi	r24, 0x11	; 17
     d7c:	58 f4       	brcc	.+22     	; 0xd94 <__LOCK_REGION_LENGTH__+0x994>
     d7e:	8f 30       	cpi	r24, 0x0F	; 15
     d80:	08 f0       	brcs	.+2      	; 0xd84 <__LOCK_REGION_LENGTH__+0x984>
     d82:	f9 c0       	rjmp	.+498    	; 0xf76 <__LOCK_REGION_LENGTH__+0xb76>
     d84:	81 30       	cpi	r24, 0x01	; 1
     d86:	80 f0       	brcs	.+32     	; 0xda8 <__LOCK_REGION_LENGTH__+0x9a8>
     d88:	85 30       	cpi	r24, 0x05	; 5
     d8a:	68 f0       	brcs	.+26     	; 0xda6 <__LOCK_REGION_LENGTH__+0x9a6>
     d8c:	87 30       	cpi	r24, 0x07	; 7
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__LOCK_REGION_LENGTH__+0x992>
     d90:	f2 c0       	rjmp	.+484    	; 0xf76 <__LOCK_REGION_LENGTH__+0xb76>
     d92:	0a c0       	rjmp	.+20     	; 0xda8 <__LOCK_REGION_LENGTH__+0x9a8>
     d94:	87 31       	cpi	r24, 0x17	; 23
     d96:	39 f0       	breq	.+14     	; 0xda6 <__LOCK_REGION_LENGTH__+0x9a6>
     d98:	8f 3f       	cpi	r24, 0xFF	; 255
     d9a:	09 f4       	brne	.+2      	; 0xd9e <__LOCK_REGION_LENGTH__+0x99e>
     d9c:	ec c0       	rjmp	.+472    	; 0xf76 <__LOCK_REGION_LENGTH__+0xb76>
     d9e:	86 31       	cpi	r24, 0x16	; 22
     da0:	19 f4       	brne	.+6      	; 0xda8 <__LOCK_REGION_LENGTH__+0x9a8>
     da2:	05 e0       	ldi	r16, 0x05	; 5
     da4:	e9 c0       	rjmp	.+466    	; 0xf78 <__LOCK_REGION_LENGTH__+0xb78>
     da6:	0b 81       	ldd	r16, Y+3	; 0x03
     da8:	0e 94 2d 1b 	call	0x365a	; 0x365a <Get_millis>
     dac:	dc 01       	movw	r26, r24
     dae:	cb 01       	movw	r24, r22
     db0:	88 19       	sub	r24, r8
     db2:	99 09       	sbc	r25, r9
     db4:	aa 09       	sbc	r26, r10
     db6:	bb 09       	sbc	r27, r11
     db8:	89 3c       	cpi	r24, 0xC9	; 201
     dba:	91 05       	cpc	r25, r1
     dbc:	a1 05       	cpc	r26, r1
     dbe:	b1 05       	cpc	r27, r1
     dc0:	08 f4       	brcc	.+2      	; 0xdc4 <__LOCK_REGION_LENGTH__+0x9c4>
     dc2:	10 c1       	rjmp	.+544    	; 0xfe4 <__LOCK_REGION_LENGTH__+0xbe4>
     dc4:	89 e1       	ldi	r24, 0x19	; 25
     dc6:	92 e0       	ldi	r25, 0x02	; 2
     dc8:	bb d7       	rcall	.+3958   	; 0x1d40 <UART0_puts>
     dca:	01 11       	cpse	r16, r1
     dcc:	19 c1       	rjmp	.+562    	; 0x1000 <__LOCK_REGION_LENGTH__+0xc00>
     dce:	82 ee       	ldi	r24, 0xE2	; 226
     dd0:	81 11       	cpse	r24, r1
     dd2:	97 c0       	rjmp	.+302    	; 0xf02 <__LOCK_REGION_LENGTH__+0xb02>
     dd4:	15 30       	cpi	r17, 0x05	; 5
     dd6:	08 f4       	brcc	.+2      	; 0xdda <__LOCK_REGION_LENGTH__+0x9da>
     dd8:	ef c0       	rjmp	.+478    	; 0xfb8 <__LOCK_REGION_LENGTH__+0xbb8>
     dda:	01 2f       	mov	r16, r17
     ddc:	10 e0       	ldi	r17, 0x00	; 0
     dde:	78 01       	movw	r14, r16
     de0:	f2 e0       	ldi	r31, 0x02	; 2
     de2:	ef 1a       	sub	r14, r31
     de4:	f1 08       	sbc	r15, r1
     de6:	1e 14       	cp	r1, r14
     de8:	1f 04       	cpc	r1, r15
     dea:	44 f0       	brlt	.+16     	; 0xdfc <__LOCK_REGION_LENGTH__+0x9fc>
     dec:	d4 c0       	rjmp	.+424    	; 0xf96 <__LOCK_REGION_LENGTH__+0xb96>
     dee:	0f 2e       	mov	r0, r31
     df0:	f3 e0       	ldi	r31, 0x03	; 3
     df2:	ef 2e       	mov	r14, r31
     df4:	f1 2c       	mov	r15, r1
     df6:	f0 2d       	mov	r31, r0
     df8:	05 e0       	ldi	r16, 0x05	; 5
     dfa:	10 e0       	ldi	r17, 0x00	; 0
     dfc:	20 e0       	ldi	r18, 0x00	; 0
     dfe:	30 e0       	ldi	r19, 0x00	; 0
     e00:	8f ef       	ldi	r24, 0xFF	; 255
     e02:	9f ef       	ldi	r25, 0xFF	; 255
     e04:	d1 2c       	mov	r13, r1
     e06:	e1 e0       	ldi	r30, 0x01	; 1
     e08:	f0 e0       	ldi	r31, 0x00	; 0
     e0a:	ec 0f       	add	r30, r28
     e0c:	fd 1f       	adc	r31, r29
     e0e:	e2 0f       	add	r30, r18
     e10:	f3 1f       	adc	r31, r19
     e12:	60 81       	ld	r22, Z
     e14:	0e 94 0c 1b 	call	0x3618	; 0x3618 <crc16_update>
     e18:	d3 94       	inc	r13
     e1a:	2d 2d       	mov	r18, r13
     e1c:	30 e0       	ldi	r19, 0x00	; 0
     e1e:	2e 15       	cp	r18, r14
     e20:	3f 05       	cpc	r19, r15
     e22:	8c f3       	brlt	.-30     	; 0xe06 <__LOCK_REGION_LENGTH__+0xa06>
     e24:	ba c0       	rjmp	.+372    	; 0xf9a <__LOCK_REGION_LENGTH__+0xb9a>
     e26:	89 2f       	mov	r24, r25
     e28:	99 27       	eor	r25, r25
     e2a:	fe 01       	movw	r30, r28
     e2c:	e0 0f       	add	r30, r16
     e2e:	f1 1f       	adc	r31, r17
     e30:	20 81       	ld	r18, Z
     e32:	30 e0       	ldi	r19, 0x00	; 0
     e34:	82 17       	cp	r24, r18
     e36:	93 07       	cpc	r25, r19
     e38:	09 f0       	breq	.+2      	; 0xe3c <__LOCK_REGION_LENGTH__+0xa3c>
     e3a:	bc c0       	rjmp	.+376    	; 0xfb4 <__LOCK_REGION_LENGTH__+0xbb4>
     e3c:	bd c0       	rjmp	.+378    	; 0xfb8 <__LOCK_REGION_LENGTH__+0xbb8>
     e3e:	8b 81       	ldd	r24, Y+3	; 0x03
     e40:	86 95       	lsr	r24
     e42:	e1 f5       	brne	.+120    	; 0xebc <__LOCK_REGION_LENGTH__+0xabc>
     e44:	5e c0       	rjmp	.+188    	; 0xf02 <__LOCK_REGION_LENGTH__+0xb02>
     e46:	6b 81       	ldd	r22, Y+3	; 0x03
     e48:	86 2f       	mov	r24, r22
     e4a:	86 95       	lsr	r24
     e4c:	09 f4       	brne	.+2      	; 0xe50 <__LOCK_REGION_LENGTH__+0xa50>
     e4e:	c2 c0       	rjmp	.+388    	; 0xfd4 <__LOCK_REGION_LENGTH__+0xbd4>
     e50:	fe 01       	movw	r30, r28
     e52:	31 96       	adiw	r30, 0x01	; 1
     e54:	40 e0       	ldi	r20, 0x00	; 0
     e56:	50 e0       	ldi	r21, 0x00	; 0
     e58:	90 e0       	ldi	r25, 0x00	; 0
     e5a:	90 34       	cpi	r25, 0x40	; 64
     e5c:	70 f4       	brcc	.+28     	; 0xe7a <__LOCK_REGION_LENGTH__+0xa7a>
     e5e:	24 81       	ldd	r18, Z+4	; 0x04
     e60:	30 e0       	ldi	r19, 0x00	; 0
     e62:	32 2f       	mov	r19, r18
     e64:	22 27       	eor	r18, r18
     e66:	73 81       	ldd	r23, Z+3	; 0x03
     e68:	27 2b       	or	r18, r23
     e6a:	da 01       	movw	r26, r20
     e6c:	aa 0f       	add	r26, r26
     e6e:	bb 1f       	adc	r27, r27
     e70:	a8 5e       	subi	r26, 0xE8	; 232
     e72:	ba 4f       	sbci	r27, 0xFA	; 250
     e74:	11 96       	adiw	r26, 0x01	; 1
     e76:	3c 93       	st	X, r19
     e78:	2e 93       	st	-X, r18
     e7a:	9f 5f       	subi	r25, 0xFF	; 255
     e7c:	4f 5f       	subi	r20, 0xFF	; 255
     e7e:	5f 4f       	sbci	r21, 0xFF	; 255
     e80:	32 96       	adiw	r30, 0x02	; 2
     e82:	98 13       	cpse	r25, r24
     e84:	ea cf       	rjmp	.-44     	; 0xe5a <__LOCK_REGION_LENGTH__+0xa5a>
     e86:	9f ef       	ldi	r25, 0xFF	; 255
     e88:	98 0f       	add	r25, r24
     e8a:	90 93 91 04 	sts	0x0491, r25	; 0x800491 <g_mod1_response_buffer_length>
     e8e:	60 ff       	sbrs	r22, 0
     e90:	35 c0       	rjmp	.+106    	; 0xefc <__LOCK_REGION_LENGTH__+0xafc>
     e92:	80 34       	cpi	r24, 0x40	; 64
     e94:	70 f4       	brcc	.+28     	; 0xeb2 <__LOCK_REGION_LENGTH__+0xab2>
     e96:	28 2f       	mov	r18, r24
     e98:	30 e0       	ldi	r19, 0x00	; 0
     e9a:	22 0f       	add	r18, r18
     e9c:	33 1f       	adc	r19, r19
     e9e:	fe 01       	movw	r30, r28
     ea0:	e2 0f       	add	r30, r18
     ea2:	f3 1f       	adc	r31, r19
     ea4:	44 81       	ldd	r20, Z+4	; 0x04
     ea6:	50 e0       	ldi	r21, 0x00	; 0
     ea8:	f9 01       	movw	r30, r18
     eaa:	e8 5e       	subi	r30, 0xE8	; 232
     eac:	fa 4f       	sbci	r31, 0xFA	; 250
     eae:	51 83       	std	Z+1, r21	; 0x01
     eb0:	40 83       	st	Z, r20
     eb2:	8f 5f       	subi	r24, 0xFF	; 255
     eb4:	80 93 91 04 	sts	0x0491, r24	; 0x800491 <g_mod1_response_buffer_length>
     eb8:	80 e0       	ldi	r24, 0x00	; 0
     eba:	23 c0       	rjmp	.+70     	; 0xf02 <__LOCK_REGION_LENGTH__+0xb02>
     ebc:	fe 01       	movw	r30, r28
     ebe:	31 96       	adiw	r30, 0x01	; 1
     ec0:	40 e0       	ldi	r20, 0x00	; 0
     ec2:	50 e0       	ldi	r21, 0x00	; 0
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	90 34       	cpi	r25, 0x40	; 64
     ec8:	70 f4       	brcc	.+28     	; 0xee6 <__LOCK_REGION_LENGTH__+0xae6>
     eca:	23 81       	ldd	r18, Z+3	; 0x03
     ecc:	30 e0       	ldi	r19, 0x00	; 0
     ece:	32 2f       	mov	r19, r18
     ed0:	22 27       	eor	r18, r18
     ed2:	64 81       	ldd	r22, Z+4	; 0x04
     ed4:	26 2b       	or	r18, r22
     ed6:	da 01       	movw	r26, r20
     ed8:	aa 0f       	add	r26, r26
     eda:	bb 1f       	adc	r27, r27
     edc:	a8 5e       	subi	r26, 0xE8	; 232
     ede:	ba 4f       	sbci	r27, 0xFA	; 250
     ee0:	11 96       	adiw	r26, 0x01	; 1
     ee2:	3c 93       	st	X, r19
     ee4:	2e 93       	st	-X, r18
     ee6:	9f 5f       	subi	r25, 0xFF	; 255
     ee8:	4f 5f       	subi	r20, 0xFF	; 255
     eea:	5f 4f       	sbci	r21, 0xFF	; 255
     eec:	32 96       	adiw	r30, 0x02	; 2
     eee:	98 13       	cpse	r25, r24
     ef0:	ea cf       	rjmp	.-44     	; 0xec6 <__LOCK_REGION_LENGTH__+0xac6>
     ef2:	81 50       	subi	r24, 0x01	; 1
     ef4:	80 93 91 04 	sts	0x0491, r24	; 0x800491 <g_mod1_response_buffer_length>
     ef8:	80 e0       	ldi	r24, 0x00	; 0
     efa:	03 c0       	rjmp	.+6      	; 0xf02 <__LOCK_REGION_LENGTH__+0xb02>
     efc:	80 e0       	ldi	r24, 0x00	; 0
     efe:	01 c0       	rjmp	.+2      	; 0xf02 <__LOCK_REGION_LENGTH__+0xb02>
     f00:	80 e0       	ldi	r24, 0x00	; 0
     f02:	10 92 93 04 	sts	0x0493, r1	; 0x800493 <g_mod1_transmit_buffer_index>
     f06:	10 92 92 04 	sts	0x0492, r1	; 0x800492 <g_mod1_response_buffer_index>
     f0a:	7c c0       	rjmp	.+248    	; 0x1004 <__LOCK_REGION_LENGTH__+0xc04>
     f0c:	84 ee       	ldi	r24, 0xE4	; 228
     f0e:	7a c0       	rjmp	.+244    	; 0x1004 <__LOCK_REGION_LENGTH__+0xc04>
     f10:	03 e0       	ldi	r16, 0x03	; 3
     f12:	0e 94 2d 1b 	call	0x365a	; 0x365a <Get_millis>
     f16:	dc 01       	movw	r26, r24
     f18:	cb 01       	movw	r24, r22
     f1a:	88 19       	sub	r24, r8
     f1c:	99 09       	sbc	r25, r9
     f1e:	aa 09       	sbc	r26, r10
     f20:	bb 09       	sbc	r27, r11
     f22:	89 3c       	cpi	r24, 0xC9	; 201
     f24:	91 05       	cpc	r25, r1
     f26:	a1 05       	cpc	r26, r1
     f28:	b1 05       	cpc	r27, r1
     f2a:	08 f4       	brcc	.+2      	; 0xf2e <__LOCK_REGION_LENGTH__+0xb2e>
     f2c:	f8 cb       	rjmp	.-2064   	; 0x71e <__LOCK_REGION_LENGTH__+0x31e>
     f2e:	51 cc       	rjmp	.-1886   	; 0x7d2 <__LOCK_REGION_LENGTH__+0x3d2>
     f30:	8f ef       	ldi	r24, 0xFF	; 255
     f32:	9f ef       	ldi	r25, 0xFF	; 255
     f34:	fe 01       	movw	r30, r28
     f36:	ee 0d       	add	r30, r14
     f38:	ff 1d       	adc	r31, r15
     f3a:	21 81       	ldd	r18, Z+1	; 0x01
     f3c:	30 e0       	ldi	r19, 0x00	; 0
     f3e:	ac 01       	movw	r20, r24
     f40:	55 27       	eor	r21, r21
     f42:	42 17       	cp	r20, r18
     f44:	53 07       	cpc	r21, r19
     f46:	09 f4       	brne	.+2      	; 0xf4a <__LOCK_REGION_LENGTH__+0xb4a>
     f48:	79 cc       	rjmp	.-1806   	; 0x83c <__LOCK_REGION_LENGTH__+0x43c>
     f4a:	83 ee       	ldi	r24, 0xE3	; 227
     f4c:	e6 cc       	rjmp	.-1588   	; 0x91a <__LOCK_REGION_LENGTH__+0x51a>
     f4e:	83 ee       	ldi	r24, 0xE3	; 227
     f50:	e4 cc       	rjmp	.-1592   	; 0x91a <__LOCK_REGION_LENGTH__+0x51a>
     f52:	8a 81       	ldd	r24, Y+2	; 0x02
     f54:	85 30       	cpi	r24, 0x05	; 5
     f56:	38 f4       	brcc	.+14     	; 0xf66 <__LOCK_REGION_LENGTH__+0xb66>
     f58:	83 30       	cpi	r24, 0x03	; 3
     f5a:	08 f0       	brcs	.+2      	; 0xf5e <__LOCK_REGION_LENGTH__+0xb5e>
     f5c:	7b cc       	rjmp	.-1802   	; 0x854 <__LOCK_REGION_LENGTH__+0x454>
     f5e:	81 30       	cpi	r24, 0x01	; 1
     f60:	08 f0       	brcs	.+2      	; 0xf64 <__LOCK_REGION_LENGTH__+0xb64>
     f62:	7d cc       	rjmp	.-1798   	; 0x85e <__LOCK_REGION_LENGTH__+0x45e>
     f64:	d9 cc       	rjmp	.-1614   	; 0x918 <__LOCK_REGION_LENGTH__+0x518>
     f66:	87 31       	cpi	r24, 0x17	; 23
     f68:	09 f4       	brne	.+2      	; 0xf6c <__LOCK_REGION_LENGTH__+0xb6c>
     f6a:	74 cc       	rjmp	.-1816   	; 0x854 <__LOCK_REGION_LENGTH__+0x454>
     f6c:	d5 cc       	rjmp	.-1622   	; 0x918 <__LOCK_REGION_LENGTH__+0x518>
     f6e:	70 fd       	sbrc	r23, 0
     f70:	9e cc       	rjmp	.-1732   	; 0x8ae <__LOCK_REGION_LENGTH__+0x4ae>
     f72:	80 e0       	ldi	r24, 0x00	; 0
     f74:	d2 cc       	rjmp	.-1628   	; 0x91a <__LOCK_REGION_LENGTH__+0x51a>
     f76:	03 e0       	ldi	r16, 0x03	; 3
     f78:	0e 94 2d 1b 	call	0x365a	; 0x365a <Get_millis>
     f7c:	dc 01       	movw	r26, r24
     f7e:	cb 01       	movw	r24, r22
     f80:	88 19       	sub	r24, r8
     f82:	99 09       	sbc	r25, r9
     f84:	aa 09       	sbc	r26, r10
     f86:	bb 09       	sbc	r27, r11
     f88:	89 3c       	cpi	r24, 0xC9	; 201
     f8a:	91 05       	cpc	r25, r1
     f8c:	a1 05       	cpc	r26, r1
     f8e:	b1 05       	cpc	r27, r1
     f90:	08 f4       	brcc	.+2      	; 0xf94 <__LOCK_REGION_LENGTH__+0xb94>
     f92:	be ce       	rjmp	.-644    	; 0xd10 <__LOCK_REGION_LENGTH__+0x910>
     f94:	17 cf       	rjmp	.-466    	; 0xdc4 <__LOCK_REGION_LENGTH__+0x9c4>
     f96:	8f ef       	ldi	r24, 0xFF	; 255
     f98:	9f ef       	ldi	r25, 0xFF	; 255
     f9a:	fe 01       	movw	r30, r28
     f9c:	ee 0d       	add	r30, r14
     f9e:	ff 1d       	adc	r31, r15
     fa0:	21 81       	ldd	r18, Z+1	; 0x01
     fa2:	30 e0       	ldi	r19, 0x00	; 0
     fa4:	ac 01       	movw	r20, r24
     fa6:	55 27       	eor	r21, r21
     fa8:	42 17       	cp	r20, r18
     faa:	53 07       	cpc	r21, r19
     fac:	09 f4       	brne	.+2      	; 0xfb0 <__LOCK_REGION_LENGTH__+0xbb0>
     fae:	3b cf       	rjmp	.-394    	; 0xe26 <__LOCK_REGION_LENGTH__+0xa26>
     fb0:	83 ee       	ldi	r24, 0xE3	; 227
     fb2:	a7 cf       	rjmp	.-178    	; 0xf02 <__LOCK_REGION_LENGTH__+0xb02>
     fb4:	83 ee       	ldi	r24, 0xE3	; 227
     fb6:	a5 cf       	rjmp	.-182    	; 0xf02 <__LOCK_REGION_LENGTH__+0xb02>
     fb8:	8a 81       	ldd	r24, Y+2	; 0x02
     fba:	85 30       	cpi	r24, 0x05	; 5
     fbc:	38 f4       	brcc	.+14     	; 0xfcc <__LOCK_REGION_LENGTH__+0xbcc>
     fbe:	83 30       	cpi	r24, 0x03	; 3
     fc0:	08 f0       	brcs	.+2      	; 0xfc4 <__LOCK_REGION_LENGTH__+0xbc4>
     fc2:	3d cf       	rjmp	.-390    	; 0xe3e <__LOCK_REGION_LENGTH__+0xa3e>
     fc4:	81 30       	cpi	r24, 0x01	; 1
     fc6:	08 f0       	brcs	.+2      	; 0xfca <__LOCK_REGION_LENGTH__+0xbca>
     fc8:	3e cf       	rjmp	.-388    	; 0xe46 <__LOCK_REGION_LENGTH__+0xa46>
     fca:	9a cf       	rjmp	.-204    	; 0xf00 <__LOCK_REGION_LENGTH__+0xb00>
     fcc:	87 31       	cpi	r24, 0x17	; 23
     fce:	09 f4       	brne	.+2      	; 0xfd2 <__LOCK_REGION_LENGTH__+0xbd2>
     fd0:	36 cf       	rjmp	.-404    	; 0xe3e <__LOCK_REGION_LENGTH__+0xa3e>
     fd2:	96 cf       	rjmp	.-212    	; 0xf00 <__LOCK_REGION_LENGTH__+0xb00>
     fd4:	60 fd       	sbrc	r22, 0
     fd6:	5f cf       	rjmp	.-322    	; 0xe96 <__LOCK_REGION_LENGTH__+0xa96>
     fd8:	80 e0       	ldi	r24, 0x00	; 0
     fda:	93 cf       	rjmp	.-218    	; 0xf02 <__LOCK_REGION_LENGTH__+0xb02>
     fdc:	01 11       	cpse	r16, r1
     fde:	9f cb       	rjmp	.-2242   	; 0x71e <__LOCK_REGION_LENGTH__+0x31e>
     fe0:	80 e0       	ldi	r24, 0x00	; 0
     fe2:	fe cb       	rjmp	.-2052   	; 0x7e0 <__LOCK_REGION_LENGTH__+0x3e0>
     fe4:	01 11       	cpse	r16, r1
     fe6:	94 ce       	rjmp	.-728    	; 0xd10 <__LOCK_REGION_LENGTH__+0x910>
     fe8:	80 e0       	ldi	r24, 0x00	; 0
     fea:	f2 ce       	rjmp	.-540    	; 0xdd0 <__LOCK_REGION_LENGTH__+0x9d0>
     fec:	80 ee       	ldi	r24, 0xE0	; 224
     fee:	95 cc       	rjmp	.-1750   	; 0x91a <__LOCK_REGION_LENGTH__+0x51a>
     ff0:	81 ee       	ldi	r24, 0xE1	; 225
     ff2:	93 cc       	rjmp	.-1754   	; 0x91a <__LOCK_REGION_LENGTH__+0x51a>
     ff4:	82 ee       	ldi	r24, 0xE2	; 226
     ff6:	91 cc       	rjmp	.-1758   	; 0x91a <__LOCK_REGION_LENGTH__+0x51a>
     ff8:	80 ee       	ldi	r24, 0xE0	; 224
     ffa:	83 cf       	rjmp	.-250    	; 0xf02 <__LOCK_REGION_LENGTH__+0xb02>
     ffc:	81 ee       	ldi	r24, 0xE1	; 225
     ffe:	81 cf       	rjmp	.-254    	; 0xf02 <__LOCK_REGION_LENGTH__+0xb02>
    1000:	82 ee       	ldi	r24, 0xE2	; 226
    1002:	7f cf       	rjmp	.-258    	; 0xf02 <__LOCK_REGION_LENGTH__+0xb02>
    1004:	d3 95       	inc	r29
    1006:	0f b6       	in	r0, 0x3f	; 63
    1008:	f8 94       	cli
    100a:	de bf       	out	0x3e, r29	; 62
    100c:	0f be       	out	0x3f, r0	; 63
    100e:	cd bf       	out	0x3d, r28	; 61
    1010:	df 91       	pop	r29
    1012:	cf 91       	pop	r28
    1014:	1f 91       	pop	r17
    1016:	0f 91       	pop	r16
    1018:	ff 90       	pop	r15
    101a:	ef 90       	pop	r14
    101c:	df 90       	pop	r13
    101e:	bf 90       	pop	r11
    1020:	af 90       	pop	r10
    1022:	9f 90       	pop	r9
    1024:	8f 90       	pop	r8
    1026:	08 95       	ret

00001028 <Modbus_init>:
    1028:	fb 01       	movw	r30, r22
    102a:	81 11       	cpse	r24, r1
    102c:	89 c0       	rjmp	.+274    	; 0x1140 <Modbus_init+0x118>
    102e:	80 81       	ld	r24, Z
    1030:	80 93 b6 06 	sts	0x06B6, r24	; 0x8006b6 <g_mod0_slave>
    1034:	41 81       	ldd	r20, Z+1	; 0x01
    1036:	62 81       	ldd	r22, Z+2	; 0x02
    1038:	73 81       	ldd	r23, Z+3	; 0x03
    103a:	84 81       	ldd	r24, Z+4	; 0x04
    103c:	95 81       	ldd	r25, Z+5	; 0x05
    103e:	26 81       	ldd	r18, Z+6	; 0x06
    1040:	37 81       	ldd	r19, Z+7	; 0x07
    1042:	30 93 a8 05 	sts	0x05A8, r19	; 0x8005a8 <g_mod0_pre_transmission+0x1>
    1046:	20 93 a7 05 	sts	0x05A7, r18	; 0x8005a7 <g_mod0_pre_transmission>
    104a:	20 85       	ldd	r18, Z+8	; 0x08
    104c:	31 85       	ldd	r19, Z+9	; 0x09
    104e:	30 93 a6 05 	sts	0x05A6, r19	; 0x8005a6 <g_mod0_post_transmission+0x1>
    1052:	20 93 a5 05 	sts	0x05A5, r18	; 0x8005a5 <g_mod0_post_transmission>
    1056:	22 85       	ldd	r18, Z+10	; 0x0a
    1058:	33 85       	ldd	r19, Z+11	; 0x0b
    105a:	30 93 aa 05 	sts	0x05AA, r19	; 0x8005aa <g_mod0_idle+0x1>
    105e:	20 93 a9 05 	sts	0x05A9, r18	; 0x8005a9 <g_mod0_idle>
    1062:	10 92 ac 05 	sts	0x05AC, r1	; 0x8005ac <g_mod0_response_buffer_index>
    1066:	10 92 ab 05 	sts	0x05AB, r1	; 0x8005ab <g_mod0_response_buffer_length>
    106a:	41 30       	cpi	r20, 0x01	; 1
    106c:	09 f5       	brne	.+66     	; 0x10b0 <Modbus_init+0x88>
    106e:	20 91 82 04 	lds	r18, 0x0482	; 0x800482 <UART1_used.1996>
    1072:	21 11       	cpse	r18, r1
    1074:	cb c0       	rjmp	.+406    	; 0x120c <Modbus_init+0x1e4>
    1076:	21 e0       	ldi	r18, 0x01	; 1
    1078:	20 93 82 04 	sts	0x0482, r18	; 0x800482 <UART1_used.1996>
    107c:	dd d6       	rcall	.+3514   	; 0x1e38 <UART1_init>
    107e:	8a ea       	ldi	r24, 0xAA	; 170
    1080:	9f e0       	ldi	r25, 0x0F	; 15
    1082:	90 93 9e 05 	sts	0x059E, r25	; 0x80059e <g_mod0_Serial_available+0x1>
    1086:	80 93 9d 05 	sts	0x059D, r24	; 0x80059d <g_mod0_Serial_available>
    108a:	88 eb       	ldi	r24, 0xB8	; 184
    108c:	9f e0       	ldi	r25, 0x0F	; 15
    108e:	90 93 a0 05 	sts	0x05A0, r25	; 0x8005a0 <g_mod0_Serial_flush+0x1>
    1092:	80 93 9f 05 	sts	0x059F, r24	; 0x80059f <g_mod0_Serial_flush>
    1096:	81 e7       	ldi	r24, 0x71	; 113
    1098:	9f e0       	ldi	r25, 0x0F	; 15
    109a:	90 93 a2 05 	sts	0x05A2, r25	; 0x8005a2 <g_mod0_Serial_getc+0x1>
    109e:	80 93 a1 05 	sts	0x05A1, r24	; 0x8005a1 <g_mod0_Serial_getc>
    10a2:	81 e9       	ldi	r24, 0x91	; 145
    10a4:	9f e0       	ldi	r25, 0x0F	; 15
    10a6:	90 93 a4 05 	sts	0x05A4, r25	; 0x8005a4 <g_mod0_Serial_putc+0x1>
    10aa:	80 93 a3 05 	sts	0x05A3, r24	; 0x8005a3 <g_mod0_Serial_putc>
    10ae:	08 95       	ret
    10b0:	42 30       	cpi	r20, 0x02	; 2
    10b2:	09 f5       	brne	.+66     	; 0x10f6 <Modbus_init+0xce>
    10b4:	20 91 81 04 	lds	r18, 0x0481	; 0x800481 <UART2_used.1997>
    10b8:	21 11       	cpse	r18, r1
    10ba:	a8 c0       	rjmp	.+336    	; 0x120c <Modbus_init+0x1e4>
    10bc:	21 e0       	ldi	r18, 0x01	; 1
    10be:	20 93 81 04 	sts	0x0481, r18	; 0x800481 <UART2_used.1997>
    10c2:	c9 d7       	rcall	.+3986   	; 0x2056 <UART2_init>
    10c4:	86 eb       	ldi	r24, 0xB6	; 182
    10c6:	90 e1       	ldi	r25, 0x10	; 16
    10c8:	90 93 9e 05 	sts	0x059E, r25	; 0x80059e <g_mod0_Serial_available+0x1>
    10cc:	80 93 9d 05 	sts	0x059D, r24	; 0x80059d <g_mod0_Serial_available>
    10d0:	84 ec       	ldi	r24, 0xC4	; 196
    10d2:	90 e1       	ldi	r25, 0x10	; 16
    10d4:	90 93 a0 05 	sts	0x05A0, r25	; 0x8005a0 <g_mod0_Serial_flush+0x1>
    10d8:	80 93 9f 05 	sts	0x059F, r24	; 0x80059f <g_mod0_Serial_flush>
    10dc:	80 e8       	ldi	r24, 0x80	; 128
    10de:	90 e1       	ldi	r25, 0x10	; 16
    10e0:	90 93 a2 05 	sts	0x05A2, r25	; 0x8005a2 <g_mod0_Serial_getc+0x1>
    10e4:	80 93 a1 05 	sts	0x05A1, r24	; 0x8005a1 <g_mod0_Serial_getc>
    10e8:	8d e9       	ldi	r24, 0x9D	; 157
    10ea:	90 e1       	ldi	r25, 0x10	; 16
    10ec:	90 93 a4 05 	sts	0x05A4, r25	; 0x8005a4 <g_mod0_Serial_putc+0x1>
    10f0:	80 93 a3 05 	sts	0x05A3, r24	; 0x8005a3 <g_mod0_Serial_putc>
    10f4:	08 95       	ret
    10f6:	43 30       	cpi	r20, 0x03	; 3
    10f8:	09 f0       	breq	.+2      	; 0x10fc <Modbus_init+0xd4>
    10fa:	88 c0       	rjmp	.+272    	; 0x120c <Modbus_init+0x1e4>
    10fc:	20 91 80 04 	lds	r18, 0x0480	; 0x800480 <UART3_used.1998>
    1100:	21 11       	cpse	r18, r1
    1102:	84 c0       	rjmp	.+264    	; 0x120c <Modbus_init+0x1e4>
    1104:	21 e0       	ldi	r18, 0x01	; 1
    1106:	20 93 80 04 	sts	0x0480, r18	; 0x800480 <UART3_used.1998>
    110a:	0e 94 37 11 	call	0x226e	; 0x226e <UART3_init>
    110e:	82 ec       	ldi	r24, 0xC2	; 194
    1110:	91 e1       	ldi	r25, 0x11	; 17
    1112:	90 93 9e 05 	sts	0x059E, r25	; 0x80059e <g_mod0_Serial_available+0x1>
    1116:	80 93 9d 05 	sts	0x059D, r24	; 0x80059d <g_mod0_Serial_available>
    111a:	80 ed       	ldi	r24, 0xD0	; 208
    111c:	91 e1       	ldi	r25, 0x11	; 17
    111e:	90 93 a0 05 	sts	0x05A0, r25	; 0x8005a0 <g_mod0_Serial_flush+0x1>
    1122:	80 93 9f 05 	sts	0x059F, r24	; 0x80059f <g_mod0_Serial_flush>
    1126:	8c e8       	ldi	r24, 0x8C	; 140
    1128:	91 e1       	ldi	r25, 0x11	; 17
    112a:	90 93 a2 05 	sts	0x05A2, r25	; 0x8005a2 <g_mod0_Serial_getc+0x1>
    112e:	80 93 a1 05 	sts	0x05A1, r24	; 0x8005a1 <g_mod0_Serial_getc>
    1132:	89 ea       	ldi	r24, 0xA9	; 169
    1134:	91 e1       	ldi	r25, 0x11	; 17
    1136:	90 93 a4 05 	sts	0x05A4, r25	; 0x8005a4 <g_mod0_Serial_putc+0x1>
    113a:	80 93 a3 05 	sts	0x05A3, r24	; 0x8005a3 <g_mod0_Serial_putc>
    113e:	08 95       	ret
    1140:	81 30       	cpi	r24, 0x01	; 1
    1142:	09 f0       	breq	.+2      	; 0x1146 <Modbus_init+0x11e>
    1144:	63 c0       	rjmp	.+198    	; 0x120c <Modbus_init+0x1e4>
    1146:	80 81       	ld	r24, Z
    1148:	80 93 9c 05 	sts	0x059C, r24	; 0x80059c <g_mod1_slave>
    114c:	41 81       	ldd	r20, Z+1	; 0x01
    114e:	62 81       	ldd	r22, Z+2	; 0x02
    1150:	73 81       	ldd	r23, Z+3	; 0x03
    1152:	84 81       	ldd	r24, Z+4	; 0x04
    1154:	95 81       	ldd	r25, Z+5	; 0x05
    1156:	26 81       	ldd	r18, Z+6	; 0x06
    1158:	37 81       	ldd	r19, Z+7	; 0x07
    115a:	30 93 8e 04 	sts	0x048E, r19	; 0x80048e <g_mod1_pre_transmission+0x1>
    115e:	20 93 8d 04 	sts	0x048D, r18	; 0x80048d <g_mod1_pre_transmission>
    1162:	20 85       	ldd	r18, Z+8	; 0x08
    1164:	31 85       	ldd	r19, Z+9	; 0x09
    1166:	30 93 8c 04 	sts	0x048C, r19	; 0x80048c <g_mod1_post_transmission+0x1>
    116a:	20 93 8b 04 	sts	0x048B, r18	; 0x80048b <g_mod1_post_transmission>
    116e:	22 85       	ldd	r18, Z+10	; 0x0a
    1170:	33 85       	ldd	r19, Z+11	; 0x0b
    1172:	30 93 90 04 	sts	0x0490, r19	; 0x800490 <g_mod1_idle+0x1>
    1176:	20 93 8f 04 	sts	0x048F, r18	; 0x80048f <g_mod1_idle>
    117a:	10 92 92 04 	sts	0x0492, r1	; 0x800492 <g_mod1_response_buffer_index>
    117e:	10 92 91 04 	sts	0x0491, r1	; 0x800491 <g_mod1_response_buffer_length>
    1182:	41 30       	cpi	r20, 0x01	; 1
    1184:	09 f5       	brne	.+66     	; 0x11c8 <Modbus_init+0x1a0>
    1186:	20 91 82 04 	lds	r18, 0x0482	; 0x800482 <UART1_used.1996>
    118a:	21 11       	cpse	r18, r1
    118c:	3f c0       	rjmp	.+126    	; 0x120c <Modbus_init+0x1e4>
    118e:	21 e0       	ldi	r18, 0x01	; 1
    1190:	20 93 82 04 	sts	0x0482, r18	; 0x800482 <UART1_used.1996>
    1194:	51 d6       	rcall	.+3234   	; 0x1e38 <UART1_init>
    1196:	8a ea       	ldi	r24, 0xAA	; 170
    1198:	9f e0       	ldi	r25, 0x0F	; 15
    119a:	90 93 86 04 	sts	0x0486, r25	; 0x800486 <g_mod1_Serial_available+0x1>
    119e:	80 93 85 04 	sts	0x0485, r24	; 0x800485 <g_mod1_Serial_available>
    11a2:	88 eb       	ldi	r24, 0xB8	; 184
    11a4:	9f e0       	ldi	r25, 0x0F	; 15
    11a6:	90 93 84 04 	sts	0x0484, r25	; 0x800484 <g_mod1_Serial_flush+0x1>
    11aa:	80 93 83 04 	sts	0x0483, r24	; 0x800483 <g_mod1_Serial_flush>
    11ae:	81 e7       	ldi	r24, 0x71	; 113
    11b0:	9f e0       	ldi	r25, 0x0F	; 15
    11b2:	90 93 88 04 	sts	0x0488, r25	; 0x800488 <g_mod1_Serial_getc+0x1>
    11b6:	80 93 87 04 	sts	0x0487, r24	; 0x800487 <g_mod1_Serial_getc>
    11ba:	81 e9       	ldi	r24, 0x91	; 145
    11bc:	9f e0       	ldi	r25, 0x0F	; 15
    11be:	90 93 8a 04 	sts	0x048A, r25	; 0x80048a <g_mod1_Serial_putc+0x1>
    11c2:	80 93 89 04 	sts	0x0489, r24	; 0x800489 <g_mod1_Serial_putc>
    11c6:	08 95       	ret
    11c8:	42 30       	cpi	r20, 0x02	; 2
    11ca:	01 f5       	brne	.+64     	; 0x120c <Modbus_init+0x1e4>
    11cc:	20 91 81 04 	lds	r18, 0x0481	; 0x800481 <UART2_used.1997>
    11d0:	21 11       	cpse	r18, r1
    11d2:	1c c0       	rjmp	.+56     	; 0x120c <Modbus_init+0x1e4>
    11d4:	21 e0       	ldi	r18, 0x01	; 1
    11d6:	20 93 81 04 	sts	0x0481, r18	; 0x800481 <UART2_used.1997>
    11da:	3d d7       	rcall	.+3706   	; 0x2056 <UART2_init>
    11dc:	86 eb       	ldi	r24, 0xB6	; 182
    11de:	90 e1       	ldi	r25, 0x10	; 16
    11e0:	90 93 86 04 	sts	0x0486, r25	; 0x800486 <g_mod1_Serial_available+0x1>
    11e4:	80 93 85 04 	sts	0x0485, r24	; 0x800485 <g_mod1_Serial_available>
    11e8:	84 ec       	ldi	r24, 0xC4	; 196
    11ea:	90 e1       	ldi	r25, 0x10	; 16
    11ec:	90 93 84 04 	sts	0x0484, r25	; 0x800484 <g_mod1_Serial_flush+0x1>
    11f0:	80 93 83 04 	sts	0x0483, r24	; 0x800483 <g_mod1_Serial_flush>
    11f4:	80 e8       	ldi	r24, 0x80	; 128
    11f6:	90 e1       	ldi	r25, 0x10	; 16
    11f8:	90 93 88 04 	sts	0x0488, r25	; 0x800488 <g_mod1_Serial_getc+0x1>
    11fc:	80 93 87 04 	sts	0x0487, r24	; 0x800487 <g_mod1_Serial_getc>
    1200:	8d e9       	ldi	r24, 0x9D	; 157
    1202:	90 e1       	ldi	r25, 0x10	; 16
    1204:	90 93 8a 04 	sts	0x048A, r25	; 0x80048a <g_mod1_Serial_putc+0x1>
    1208:	80 93 89 04 	sts	0x0489, r24	; 0x800489 <g_mod1_Serial_putc>
    120c:	08 95       	ret

0000120e <Modbus_Get_response_buffer>:
    120e:	81 11       	cpse	r24, r1
    1210:	0b c0       	rjmp	.+22     	; 0x1228 <Modbus_Get_response_buffer+0x1a>
    1212:	60 34       	cpi	r22, 0x40	; 64
    1214:	b0 f4       	brcc	.+44     	; 0x1242 <Modbus_Get_response_buffer+0x34>
    1216:	e6 2f       	mov	r30, r22
    1218:	f0 e0       	ldi	r31, 0x00	; 0
    121a:	ee 0f       	add	r30, r30
    121c:	ff 1f       	adc	r31, r31
    121e:	ee 5c       	subi	r30, 0xCE	; 206
    1220:	f9 4f       	sbci	r31, 0xF9	; 249
    1222:	80 81       	ld	r24, Z
    1224:	91 81       	ldd	r25, Z+1	; 0x01
    1226:	08 95       	ret
    1228:	81 30       	cpi	r24, 0x01	; 1
    122a:	71 f4       	brne	.+28     	; 0x1248 <Modbus_Get_response_buffer+0x3a>
    122c:	60 34       	cpi	r22, 0x40	; 64
    122e:	78 f4       	brcc	.+30     	; 0x124e <Modbus_Get_response_buffer+0x40>
    1230:	e6 2f       	mov	r30, r22
    1232:	f0 e0       	ldi	r31, 0x00	; 0
    1234:	ee 0f       	add	r30, r30
    1236:	ff 1f       	adc	r31, r31
    1238:	e8 5e       	subi	r30, 0xE8	; 232
    123a:	fa 4f       	sbci	r31, 0xFA	; 250
    123c:	80 81       	ld	r24, Z
    123e:	91 81       	ldd	r25, Z+1	; 0x01
    1240:	08 95       	ret
    1242:	8f ef       	ldi	r24, 0xFF	; 255
    1244:	9f ef       	ldi	r25, 0xFF	; 255
    1246:	08 95       	ret
    1248:	8f ef       	ldi	r24, 0xFF	; 255
    124a:	9f ef       	ldi	r25, 0xFF	; 255
    124c:	08 95       	ret
    124e:	8f ef       	ldi	r24, 0xFF	; 255
    1250:	9f ef       	ldi	r25, 0xFF	; 255
    1252:	08 95       	ret

00001254 <Modbus_Read_holding_registers>:
@return 0 on success; exception number on failure
@ingroup register
*/
uint8_t Modbus_Read_holding_registers(uint8_t device, uint16_t u16ReadAddress, uint16_t u16ReadQty)
{
	if(DEVICE_0 == device){
    1254:	81 11       	cpse	r24, r1
    1256:	0b c0       	rjmp	.+22     	; 0x126e <Modbus_Read_holding_registers+0x1a>
		g_mod0_read_address = u16ReadAddress;
    1258:	70 93 b5 06 	sts	0x06B5, r23	; 0x8006b5 <g_mod0_read_address+0x1>
    125c:	60 93 b4 06 	sts	0x06B4, r22	; 0x8006b4 <g_mod0_read_address>
		g_mod0_read_qty = u16ReadQty;
    1260:	50 93 b3 06 	sts	0x06B3, r21	; 0x8006b3 <g_mod0_read_qty+0x1>
    1264:	40 93 b2 06 	sts	0x06B2, r20	; 0x8006b2 <g_mod0_read_qty>
		return Modbus_mster_transaction(device, READ_HOLDING_REGISTERS);
    1268:	63 e0       	ldi	r22, 0x03	; 3
    126a:	51 c8       	rjmp	.-3934   	; 0x30e <Modbus_mster_transaction>
    126c:	08 95       	ret

	}
	else if(DEVICE_1 == device){
    126e:	81 30       	cpi	r24, 0x01	; 1
    1270:	59 f4       	brne	.+22     	; 0x1288 <Modbus_Read_holding_registers+0x34>
		g_mod1_read_address = u16ReadAddress;
    1272:	70 93 9b 05 	sts	0x059B, r23	; 0x80059b <g_mod1_read_address+0x1>
    1276:	60 93 9a 05 	sts	0x059A, r22	; 0x80059a <g_mod1_read_address>
		g_mod1_read_qty = u16ReadQty;
    127a:	50 93 99 05 	sts	0x0599, r21	; 0x800599 <g_mod1_read_qty+0x1>
    127e:	40 93 98 05 	sts	0x0598, r20	; 0x800598 <g_mod1_read_qty>
		return Modbus_mster_transaction(device, READ_HOLDING_REGISTERS);
    1282:	63 e0       	ldi	r22, 0x03	; 3
    1284:	44 c8       	rjmp	.-3960   	; 0x30e <Modbus_mster_transaction>
    1286:	08 95       	ret
	}
	return INVALID_DEVICE; //error
    1288:	84 ee       	ldi	r24, 0xE4	; 228
}
    128a:	08 95       	ret

0000128c <temp_init>:

void temp_init(uint8_t channal)
{
	// initialize the ADC module in order to be able
	// to get reading from the sensor.
	ADC_init(channal);
    128c:	74 c1       	rjmp	.+744    	; 0x1576 <ADC_init>
    128e:	08 95       	ret

00001290 <temp_read>:
}

uint16_t temp_read(void)
{
    1290:	cf 92       	push	r12
    1292:	df 92       	push	r13
    1294:	ef 92       	push	r14
    1296:	ff 92       	push	r15
    1298:	cf 93       	push	r28
    129a:	cf e0       	ldi	r28, 0x0F	; 15
	// this function returns the temperature sensor reading
	double Temp ,  vout, rt, a = 0.0039083 , r0 =100, y, b = -0.000000577,x ;
	// sum of samples taken
	double sum = 0.0;
    129c:	c1 2c       	mov	r12, r1
    129e:	d1 2c       	mov	r13, r1
    12a0:	76 01       	movw	r14, r12
	unsigned char sample_count = 0;

    // read 30 values of ADC and take their average.
 	while (sample_count < 15)
	{
	      uint16_t xx  = ADC_read();
    12a2:	8b d1       	rcall	.+790    	; 0x15ba <ADC_read>
	      sum += xx;
    12a4:	bc 01       	movw	r22, r24
    12a6:	80 e0       	ldi	r24, 0x00	; 0
    12a8:	90 e0       	ldi	r25, 0x00	; 0
    12aa:	0e 94 56 1c 	call	0x38ac	; 0x38ac <__floatunsisf>
    12ae:	9b 01       	movw	r18, r22
    12b0:	ac 01       	movw	r20, r24
    12b2:	c7 01       	movw	r24, r14
    12b4:	b6 01       	movw	r22, r12
    12b6:	0e 94 5e 1b 	call	0x36bc	; 0x36bc <__addsf3>
    12ba:	6b 01       	movw	r12, r22
    12bc:	7c 01       	movw	r14, r24
	      sample_count++;
		  vTaskDelay(1/portTICK_PERIOD_MS);
    12be:	80 e0       	ldi	r24, 0x00	; 0
    12c0:	90 e0       	ldi	r25, 0x00	; 0
    12c2:	0e 94 bf 18 	call	0x317e	; 0x317e <vTaskDelay>
    12c6:	c1 50       	subi	r28, 0x01	; 1
	double sum = 0.0;
	// current sample number
	unsigned char sample_count = 0;

    // read 30 values of ADC and take their average.
 	while (sample_count < 15)
    12c8:	61 f7       	brne	.-40     	; 0x12a2 <temp_read+0x12>
	      sample_count++;
		  vTaskDelay(1/portTICK_PERIOD_MS);
	}
     
    // the average of ADC readings
	 vout = (double)sum / (double)15;
    12ca:	20 e0       	ldi	r18, 0x00	; 0
    12cc:	30 e0       	ldi	r19, 0x00	; 0
    12ce:	40 e7       	ldi	r20, 0x70	; 112
    12d0:	51 e4       	ldi	r21, 0x41	; 65
    12d2:	c7 01       	movw	r24, r14
    12d4:	b6 01       	movw	r22, r12
    12d6:	0e 94 c2 1b 	call	0x3784	; 0x3784 <__divsf3>
	 //UART0_puts("volt :");

     
	 vout  = vout * 2.484;
    12da:	2b ed       	ldi	r18, 0xDB	; 219
    12dc:	39 ef       	ldi	r19, 0xF9	; 249
    12de:	4e e1       	ldi	r20, 0x1E	; 30
    12e0:	50 e4       	ldi	r21, 0x40	; 64
    12e2:	0e 94 e4 1c 	call	0x39c8	; 0x39c8 <__mulsf3>

	 // some math equations to Get The temperature value from ADC reading.
	 Temp = (-1 * a) ;
	 x =  pow(a,2);
	 y = 4  * b * (1 - (rt/r0));
	 x = x - y;
    12e6:	20 e0       	ldi	r18, 0x00	; 0
    12e8:	30 e0       	ldi	r19, 0x00	; 0
    12ea:	40 e8       	ldi	r20, 0x80	; 128
    12ec:	5a e3       	ldi	r21, 0x3A	; 58
    12ee:	0e 94 e4 1c 	call	0x39c8	; 0x39c8 <__mulsf3>
    12f2:	20 e0       	ldi	r18, 0x00	; 0
    12f4:	30 e0       	ldi	r19, 0x00	; 0
    12f6:	4a e7       	ldi	r20, 0x7A	; 122
    12f8:	54 e4       	ldi	r21, 0x44	; 68
    12fa:	0e 94 e4 1c 	call	0x39c8	; 0x39c8 <__mulsf3>
    12fe:	23 e0       	ldi	r18, 0x03	; 3
    1300:	39 e0       	ldi	r19, 0x09	; 9
    1302:	42 ef       	ldi	r20, 0xF2	; 242
    1304:	50 e4       	ldi	r21, 0x40	; 64
    1306:	0e 94 c2 1b 	call	0x3784	; 0x3784 <__divsf3>
    130a:	20 e0       	ldi	r18, 0x00	; 0
    130c:	30 e0       	ldi	r19, 0x00	; 0
    130e:	48 ec       	ldi	r20, 0xC8	; 200
    1310:	52 e4       	ldi	r21, 0x42	; 66
    1312:	0e 94 c2 1b 	call	0x3784	; 0x3784 <__divsf3>
    1316:	9b 01       	movw	r18, r22
    1318:	ac 01       	movw	r20, r24
    131a:	60 e0       	ldi	r22, 0x00	; 0
    131c:	70 e0       	ldi	r23, 0x00	; 0
    131e:	80 e8       	ldi	r24, 0x80	; 128
    1320:	9f e3       	ldi	r25, 0x3F	; 63
    1322:	0e 94 5d 1b 	call	0x36ba	; 0x36ba <__subsf3>
    1326:	23 e2       	ldi	r18, 0x23	; 35
    1328:	33 ee       	ldi	r19, 0xE3	; 227
    132a:	4a e1       	ldi	r20, 0x1A	; 26
    132c:	56 eb       	ldi	r21, 0xB6	; 182
    132e:	0e 94 e4 1c 	call	0x39c8	; 0x39c8 <__mulsf3>
    1332:	9b 01       	movw	r18, r22
    1334:	ac 01       	movw	r20, r24
    1336:	66 e6       	ldi	r22, 0x66	; 102
    1338:	72 e2       	ldi	r23, 0x22	; 34
    133a:	80 e8       	ldi	r24, 0x80	; 128
    133c:	97 e3       	ldi	r25, 0x37	; 55
    133e:	0e 94 5d 1b 	call	0x36ba	; 0x36ba <__subsf3>
	 x = pow(x,0.5);
    1342:	20 e0       	ldi	r18, 0x00	; 0
    1344:	30 e0       	ldi	r19, 0x00	; 0
    1346:	40 e0       	ldi	r20, 0x00	; 0
    1348:	5f e3       	ldi	r21, 0x3F	; 63
    134a:	0e 94 47 1d 	call	0x3a8e	; 0x3a8e <pow>
	 Temp = Temp + x ;
    134e:	22 e3       	ldi	r18, 0x32	; 50
    1350:	31 e1       	ldi	r19, 0x11	; 17
    1352:	40 e8       	ldi	r20, 0x80	; 128
    1354:	5b e3       	ldi	r21, 0x3B	; 59
    1356:	0e 94 5d 1b 	call	0x36ba	; 0x36ba <__subsf3>
	 Temp /= (2 * b);

	 return round(Temp);
    135a:	23 e2       	ldi	r18, 0x23	; 35
    135c:	33 ee       	ldi	r19, 0xE3	; 227
    135e:	4a e9       	ldi	r20, 0x9A	; 154
    1360:	55 eb       	ldi	r21, 0xB5	; 181
    1362:	0e 94 c2 1b 	call	0x3784	; 0x3784 <__divsf3>
    1366:	0e 94 93 1d 	call	0x3b26	; 0x3b26 <round>
    136a:	0e 94 2a 1c 	call	0x3854	; 0x3854 <__fixunssfsi>
}
    136e:	cb 01       	movw	r24, r22
    1370:	cf 91       	pop	r28
    1372:	ff 90       	pop	r15
    1374:	ef 90       	pop	r14
    1376:	df 90       	pop	r13
    1378:	cf 90       	pop	r12
    137a:	08 95       	ret

0000137c <Temperature_over_temp>:
	UART0_puts("Level_sensor_error_callback \n");
}

/******* Over Temp functions for error callbacks **********************************************/
static void Temperature_over_temp(void){
	UART0_puts("Temperature_over_temp \n");
    137c:	82 e3       	ldi	r24, 0x32	; 50
    137e:	92 e0       	ldi	r25, 0x02	; 2
    1380:	df c4       	rjmp	.+2494   	; 0x1d40 <UART0_puts>
    1382:	08 95       	ret

00001384 <Level_sensor_error_callback>:
	
}

/******* Level sensors functions for error callbacks **********************************************/
static void Level_sensor_error_callback(void){
	UART0_puts("Level_sensor_error_callback \n");
    1384:	8a e4       	ldi	r24, 0x4A	; 74
    1386:	92 e0       	ldi	r25, 0x02	; 2
    1388:	db c4       	rjmp	.+2486   	; 0x1d40 <UART0_puts>
    138a:	08 95       	ret

0000138c <LCD_writeTimeout>:
static void LCD_readTimeout(void){
	UART0_puts("LCD_READ_TIMEOUT ---------------------------- \n");
}

static void LCD_writeTimeout(void){
	UART0_puts("LCD_WRITE_TIMEOUT ++++++++++++++++++++++++++++ \n");
    138c:	88 e6       	ldi	r24, 0x68	; 104
    138e:	92 e0       	ldi	r25, 0x02	; 2
    1390:	d7 c4       	rjmp	.+2478   	; 0x1d40 <UART0_puts>
    1392:	08 95       	ret

00001394 <LCD_readTimeout>:

//debug
#include "MCAL/UART.h"
/******* LCD callback functions for errors callbacks ***********************************************/
static void LCD_readTimeout(void){
	UART0_puts("LCD_READ_TIMEOUT ---------------------------- \n");
    1394:	89 e9       	ldi	r24, 0x99	; 153
    1396:	92 e0       	ldi	r25, 0x02	; 2
    1398:	d3 c4       	rjmp	.+2470   	; 0x1d40 <UART0_puts>
    139a:	08 95       	ret

0000139c <Service_error_init>:
	
}


void Service_error_init(void){
		LCD_main_err_Init(LCD_readTimeout,LCD_writeTimeout);
    139c:	66 ec       	ldi	r22, 0xC6	; 198
    139e:	79 e0       	ldi	r23, 0x09	; 9
    13a0:	8a ec       	ldi	r24, 0xCA	; 202
    13a2:	99 e0       	ldi	r25, 0x09	; 9
    13a4:	0e 94 33 1a 	call	0x3466	; 0x3466 <LCD_main_err_Init>
		Level_main_err_init(Level_sensor_error_callback);
    13a8:	82 ec       	ldi	r24, 0xC2	; 194
    13aa:	99 e0       	ldi	r25, 0x09	; 9
    13ac:	0e 94 3c 1a 	call	0x3478	; 0x3478 <Level_main_err_init>
		Temp_main_err_init(Temperature_over_temp);
    13b0:	8e eb       	ldi	r24, 0xBE	; 190
    13b2:	99 e0       	ldi	r25, 0x09	; 9
    13b4:	0c 94 c5 1a 	jmp	0x358a	; 0x358a <Temp_main_err_init>
    13b8:	08 95       	ret

000013ba <vTask5>:
	// watch dog pin .
	while(1)
	{
// 		Watch_dog_change_state(HIGH);
// 		Watch_dog_change_state(LOW);
		vTaskDelay(500/portTICK_PERIOD_MS);
    13ba:	8f e1       	ldi	r24, 0x1F	; 31
    13bc:	90 e0       	ldi	r25, 0x00	; 0
    13be:	0e 94 bf 18 	call	0x317e	; 0x317e <vTaskDelay>
    13c2:	fb cf       	rjmp	.-10     	; 0x13ba <vTask5>

000013c4 <vTask4>:
	Temp_main(&x);
}

static void vTask4(void* pvParameters)
{
	UART0_puts("Enter Task4\n");
    13c4:	89 ec       	ldi	r24, 0xC9	; 201
    13c6:	92 e0       	ldi	r25, 0x02	; 2
    13c8:	bb d4       	rcall	.+2422   	; 0x1d40 <UART0_puts>
// 			LCD_main_Report_error(DRUM_MOTOR_ERROR_PIC);
// 			LCD_main_wait_error_response(DRUM_MOTOR_ERROR_RESPONSE,&response);
// 			UART0_puts("RESPONSE = ");
// 			UART0_OutUDec(response);
// 			UART0_putc('\n');
 			vTaskDelay(300/portTICK_PERIOD_MS);
    13ca:	82 e1       	ldi	r24, 0x12	; 18
    13cc:	90 e0       	ldi	r25, 0x00	; 0
    13ce:	0e 94 bf 18 	call	0x317e	; 0x317e <vTaskDelay>
    13d2:	fb cf       	rjmp	.-10     	; 0x13ca <vTask4+0x6>

000013d4 <vTask2>:
	//char x=0;
	//LCD_main(&x);
	while(1){
		//Tank_feed_operation(2);
		
		vTaskDelay(4000/portTICK_PERIOD_MS);
    13d4:	8a ef       	ldi	r24, 0xFA	; 250
    13d6:	90 e0       	ldi	r25, 0x00	; 0
    13d8:	0e 94 bf 18 	call	0x317e	; 0x317e <vTaskDelay>
    13dc:	fb cf       	rjmp	.-10     	; 0x13d4 <vTask2>

000013de <vTask1>:


static void vTask1(void* pvParameters)
{
//	char x=0;
	UART0_puts("Sequence Task1 \n");
    13de:	86 ed       	ldi	r24, 0xD6	; 214
    13e0:	92 e0       	ldi	r25, 0x02	; 2
    13e2:	ae d4       	rcall	.+2396   	; 0x1d40 <UART0_puts>
//	Level_main(&x);
 //   Sequance_task(&x);
  while (1)
  {
	 //  UART0_puts("task1 alive\n");
	 vTaskDelay(200/portTICK_PERIOD_MS);
    13e4:	8c e0       	ldi	r24, 0x0C	; 12
    13e6:	90 e0       	ldi	r25, 0x00	; 0
    13e8:	0e 94 bf 18 	call	0x317e	; 0x317e <vTaskDelay>
    13ec:	fb cf       	rjmp	.-10     	; 0x13e4 <vTask1+0x6>

000013ee <vTask3>:
	}
}


static void vTask3(void* pvParameters)
{
    13ee:	cf 93       	push	r28
    13f0:	df 93       	push	r29
    13f2:	1f 92       	push	r1
    13f4:	cd b7       	in	r28, 0x3d	; 61
    13f6:	de b7       	in	r29, 0x3e	; 62
	char x=0;
    13f8:	19 82       	std	Y+1, r1	; 0x01
	UART0_puts("LEVEL Task3 \n");
    13fa:	87 ee       	ldi	r24, 0xE7	; 231
    13fc:	92 e0       	ldi	r25, 0x02	; 2
    13fe:	a0 d4       	rcall	.+2368   	; 0x1d40 <UART0_puts>
	Temp_main(&x);
    1400:	ce 01       	movw	r24, r28
    1402:	01 96       	adiw	r24, 0x01	; 1
    1404:	0e 94 ca 1a 	call	0x3594	; 0x3594 <Temp_main>
}
    1408:	0f 90       	pop	r0
    140a:	df 91       	pop	r29
    140c:	cf 91       	pop	r28
    140e:	08 95       	ret

00001410 <main>:
TaskHandle_t xHandle1 = NULL , xHandle2 = NULL ,xHandle3 = NULL , xHandle4 = NULL , xHandle5 = NULL ;




int main(void) {
    1410:	cf 93       	push	r28
    1412:	df 93       	push	r29
    1414:	1f 92       	push	r1
    1416:	1f 92       	push	r1
    1418:	cd b7       	in	r28, 0x3d	; 61
    141a:	de b7       	in	r29, 0x3e	; 62
	DDRE = 0xFF;
    141c:	8f ef       	ldi	r24, 0xFF	; 255
    141e:	8d b9       	out	0x0d, r24	; 13
	UART0_init(9600); //for debug
    1420:	60 e8       	ldi	r22, 0x80	; 128
    1422:	75 e2       	ldi	r23, 0x25	; 37
    1424:	80 e0       	ldi	r24, 0x00	; 0
    1426:	90 e0       	ldi	r25, 0x00	; 0
    1428:	01 d4       	rcall	.+2050   	; 0x1c2c <UART0_init>
    System_init();
    142a:	0e 94 ed 1a 	call	0x35da	; 0x35da <System_init>
	
	//Lcd_init(UART3,115200,1);
	UART0_puts("start \n");
    142e:	85 ef       	ldi	r24, 0xF5	; 245
    1430:	92 e0       	ldi	r25, 0x02	; 2
    1432:	86 d4       	rcall	.+2316   	; 0x1d40 <UART0_puts>
// 	_delay_ms(1000);
// 
//  }
	//Temp_main_init();
	/* Create the task without using any dynamic memory allocation. */
	xHandle1 = xTaskCreateStatic( //print LCD data from RTE lowest priority
    1434:	0f 2e       	mov	r0, r31
    1436:	fd e3       	ldi	r31, 0x3D	; 61
    1438:	cf 2e       	mov	r12, r31
    143a:	fe e0       	ldi	r31, 0x0E	; 14
    143c:	df 2e       	mov	r13, r31
    143e:	f0 2d       	mov	r31, r0
    1440:	0f 2e       	mov	r0, r31
    1442:	f0 e9       	ldi	r31, 0x90	; 144
    1444:	ef 2e       	mov	r14, r31
    1446:	f0 e1       	ldi	r31, 0x10	; 16
    1448:	ff 2e       	mov	r15, r31
    144a:	f0 2d       	mov	r31, r0
    144c:	02 e0       	ldi	r16, 0x02	; 2
    144e:	20 e0       	ldi	r18, 0x00	; 0
    1450:	30 e0       	ldi	r19, 0x00	; 0
    1452:	44 ef       	ldi	r20, 0xF4	; 244
    1454:	51 e0       	ldi	r21, 0x01	; 1
    1456:	6d ef       	ldi	r22, 0xFD	; 253
    1458:	72 e0       	ldi	r23, 0x02	; 2
    145a:	8f ee       	ldi	r24, 0xEF	; 239
    145c:	99 e0       	ldi	r25, 0x09	; 9
    145e:	0e 94 90 16 	call	0x2d20	; 0x2d20 <xTaskCreateStatic>
    1462:	90 93 c0 06 	sts	0x06C0, r25	; 0x8006c0 <xHandle1+0x1>
    1466:	80 93 bf 06 	sts	0x06BF, r24	; 0x8006bf <xHandle1>
					NULL, /* Parameter passed into the task. */
					2,/* Priority at which the task is created. */
					xStack1, /* Array to use as the task's stack. */
					&xTask1Buffer); /* Variable to hold the task's data structure. */
	
	xHandle2 = xTaskCreateStatic( //LCD highest priority
    146a:	0f 2e       	mov	r0, r31
    146c:	f7 e6       	ldi	r31, 0x67	; 103
    146e:	cf 2e       	mov	r12, r31
    1470:	fe e0       	ldi	r31, 0x0E	; 14
    1472:	df 2e       	mov	r13, r31
    1474:	f0 2d       	mov	r31, r0
    1476:	0f 2e       	mov	r0, r31
    1478:	f2 ea       	ldi	r31, 0xA2	; 162
    147a:	ef 2e       	mov	r14, r31
    147c:	f4 e1       	ldi	r31, 0x14	; 20
    147e:	ff 2e       	mov	r15, r31
    1480:	f0 2d       	mov	r31, r0
    1482:	20 e0       	ldi	r18, 0x00	; 0
    1484:	30 e0       	ldi	r19, 0x00	; 0
    1486:	44 ef       	ldi	r20, 0xF4	; 244
    1488:	51 e0       	ldi	r21, 0x01	; 1
    148a:	63 e0       	ldi	r22, 0x03	; 3
    148c:	73 e0       	ldi	r23, 0x03	; 3
    148e:	8a ee       	ldi	r24, 0xEA	; 234
    1490:	99 e0       	ldi	r25, 0x09	; 9
    1492:	0e 94 90 16 	call	0x2d20	; 0x2d20 <xTaskCreateStatic>
    1496:	90 93 be 06 	sts	0x06BE, r25	; 0x8006be <xHandle2+0x1>
    149a:	80 93 bd 06 	sts	0x06BD, r24	; 0x8006bd <xHandle2>
				NULL, /* Parameter passed into the task. */
				2,/* Priority at which the task is created. */
				xStack2, /* Array to use as the task's stack. */
				&xTask2Buffer); /* Variable to hold the task's data structure. */
				
	xHandle3 = xTaskCreateStatic( //temp mid priority
    149e:	0f 2e       	mov	r0, r31
    14a0:	f4 e8       	ldi	r31, 0x84	; 132
    14a2:	cf 2e       	mov	r12, r31
    14a4:	f2 e1       	ldi	r31, 0x12	; 18
    14a6:	df 2e       	mov	r13, r31
    14a8:	f0 2d       	mov	r31, r0
    14aa:	0f 2e       	mov	r0, r31
    14ac:	fd e9       	ldi	r31, 0x9D	; 157
    14ae:	ef 2e       	mov	r14, r31
    14b0:	f6 e1       	ldi	r31, 0x16	; 22
    14b2:	ff 2e       	mov	r15, r31
    14b4:	f0 2d       	mov	r31, r0
    14b6:	20 e0       	ldi	r18, 0x00	; 0
    14b8:	30 e0       	ldi	r19, 0x00	; 0
    14ba:	44 ef       	ldi	r20, 0xF4	; 244
    14bc:	51 e0       	ldi	r21, 0x01	; 1
    14be:	69 e0       	ldi	r22, 0x09	; 9
    14c0:	73 e0       	ldi	r23, 0x03	; 3
    14c2:	87 ef       	ldi	r24, 0xF7	; 247
    14c4:	99 e0       	ldi	r25, 0x09	; 9
    14c6:	0e 94 90 16 	call	0x2d20	; 0x2d20 <xTaskCreateStatic>
    14ca:	90 93 bc 06 	sts	0x06BC, r25	; 0x8006bc <xHandle3+0x1>
    14ce:	80 93 bb 06 	sts	0x06BB, r24	; 0x8006bb <xHandle3>
				NULL, /* Parameter passed into the task. */
				2,/* Priority at which the task is created. */
				xStack3, /* Array to use as the task's stack. */
				&xTask3Buffer); /* Variable to hold the task's data structure. */
	
	xHandle4 = xTaskCreateStatic(
    14d2:	0f 2e       	mov	r0, r31
    14d4:	f3 e1       	ldi	r31, 0x13	; 19
    14d6:	cf 2e       	mov	r12, r31
    14d8:	fe e0       	ldi	r31, 0x0E	; 14
    14da:	df 2e       	mov	r13, r31
    14dc:	f0 2d       	mov	r31, r0
    14de:	0f 2e       	mov	r0, r31
    14e0:	fc e9       	ldi	r31, 0x9C	; 156
    14e2:	ef 2e       	mov	r14, r31
    14e4:	fe e0       	ldi	r31, 0x0E	; 14
    14e6:	ff 2e       	mov	r15, r31
    14e8:	f0 2d       	mov	r31, r0
    14ea:	20 e0       	ldi	r18, 0x00	; 0
    14ec:	30 e0       	ldi	r19, 0x00	; 0
    14ee:	44 ef       	ldi	r20, 0xF4	; 244
    14f0:	51 e0       	ldi	r21, 0x01	; 1
    14f2:	6f e0       	ldi	r22, 0x0F	; 15
    14f4:	73 e0       	ldi	r23, 0x03	; 3
    14f6:	82 ee       	ldi	r24, 0xE2	; 226
    14f8:	99 e0       	ldi	r25, 0x09	; 9
    14fa:	0e 94 90 16 	call	0x2d20	; 0x2d20 <xTaskCreateStatic>
    14fe:	90 93 ba 06 	sts	0x06BA, r25	; 0x8006ba <xHandle4+0x1>
    1502:	80 93 b9 06 	sts	0x06B9, r24	; 0x8006b9 <xHandle4>
				2,/* Priority at which the task is created. */
				xStack4, /* Array to use as the task's stack. */
				&xTask4Buffer); /* Variable to hold the task's data structure. */
				
				
	xHandle5 = xTaskCreateStatic(
    1506:	0f 2e       	mov	r0, r31
    1508:	f1 e9       	ldi	r31, 0x91	; 145
    150a:	cf 2e       	mov	r12, r31
    150c:	f8 e1       	ldi	r31, 0x18	; 24
    150e:	df 2e       	mov	r13, r31
    1510:	f0 2d       	mov	r31, r0
    1512:	0f 2e       	mov	r0, r31
    1514:	fe ea       	ldi	r31, 0xAE	; 174
    1516:	ef 2e       	mov	r14, r31
    1518:	f2 e1       	ldi	r31, 0x12	; 18
    151a:	ff 2e       	mov	r15, r31
    151c:	f0 2d       	mov	r31, r0
    151e:	05 e0       	ldi	r16, 0x05	; 5
    1520:	20 e0       	ldi	r18, 0x00	; 0
    1522:	30 e0       	ldi	r19, 0x00	; 0
    1524:	44 ef       	ldi	r20, 0xF4	; 244
    1526:	51 e0       	ldi	r21, 0x01	; 1
    1528:	65 e1       	ldi	r22, 0x15	; 21
    152a:	73 e0       	ldi	r23, 0x03	; 3
    152c:	8d ed       	ldi	r24, 0xDD	; 221
    152e:	99 e0       	ldi	r25, 0x09	; 9
    1530:	0e 94 90 16 	call	0x2d20	; 0x2d20 <xTaskCreateStatic>
    1534:	90 93 b8 06 	sts	0x06B8, r25	; 0x8006b8 <xHandle5+0x1>
    1538:	80 93 b7 06 	sts	0x06B7, r24	; 0x8006b7 <xHandle5>
				NULL, /* Parameter passed into the task. */
				5,/* Priority at which the task is created. */
				xStack5, /* Array to use as the task's stack. */
				&xTask5Buffer); /* Variable to hold the task's data structure. */

uint16_t res=0;
    153c:	1a 82       	std	Y+2, r1	; 0x02
    153e:	19 82       	std	Y+1, r1	; 0x01

	while(1){
		Lcd_Read(LCD_IGNITION_TYPE_ADDRESS,&res);
    1540:	be 01       	movw	r22, r28
    1542:	6f 5f       	subi	r22, 0xFF	; 255
    1544:	7f 4f       	sbci	r23, 0xFF	; 255
    1546:	82 e1       	ldi	r24, 0x12	; 18
    1548:	90 e0       	ldi	r25, 0x00	; 0
    154a:	0e 94 74 01 	call	0x2e8	; 0x2e8 <Lcd_Read>
		UART0_puts("res = ");
    154e:	8b e1       	ldi	r24, 0x1B	; 27
    1550:	93 e0       	ldi	r25, 0x03	; 3
    1552:	f6 d3       	rcall	.+2028   	; 0x1d40 <UART0_puts>
		UART0_OutUDec(res);
    1554:	69 81       	ldd	r22, Y+1	; 0x01
    1556:	7a 81       	ldd	r23, Y+2	; 0x02
    1558:	80 e0       	ldi	r24, 0x00	; 0
    155a:	90 e0       	ldi	r25, 0x00	; 0
		UART0_putc('\n');
    155c:	d5 d3       	rcall	.+1962   	; 0x1d08 <UART0_OutUDec>
    155e:	8a e0       	ldi	r24, 0x0A	; 10
    1560:	ba d3       	rcall	.+1908   	; 0x1cd6 <UART0_putc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1562:	2f ef       	ldi	r18, 0xFF	; 255
    1564:	83 ed       	ldi	r24, 0xD3	; 211
    1566:	90 e3       	ldi	r25, 0x30	; 48
    1568:	21 50       	subi	r18, 0x01	; 1
    156a:	80 40       	sbci	r24, 0x00	; 0
    156c:	90 40       	sbci	r25, 0x00	; 0
    156e:	e1 f7       	brne	.-8      	; 0x1568 <main+0x158>
    1570:	00 c0       	rjmp	.+0      	; 0x1572 <main+0x162>
    1572:	00 00       	nop
    1574:	e5 cf       	rjmp	.-54     	; 0x1540 <main+0x130>

00001576 <ADC_init>:
	 * this function configure ADC module and
	 * you  pass the channel you work with from 0 to 7
	 */

   // make the ADC pin as input.
  CLR_BIT(ADC_DIRECTION_REG ,channel );
    1576:	90 b3       	in	r25, 0x10	; 16
    1578:	21 e0       	ldi	r18, 0x01	; 1
    157a:	30 e0       	ldi	r19, 0x00	; 0
    157c:	08 2e       	mov	r0, r24
    157e:	02 c0       	rjmp	.+4      	; 0x1584 <ADC_init+0xe>
    1580:	22 0f       	add	r18, r18
    1582:	33 1f       	adc	r19, r19
    1584:	0a 94       	dec	r0
    1586:	e2 f7       	brpl	.-8      	; 0x1580 <ADC_init+0xa>
    1588:	20 95       	com	r18
    158a:	29 23       	and	r18, r25
    158c:	20 bb       	out	0x10, r18	; 16
  //   external ref .
  CLR_HIGH_NIBBLE(ADC_MULTIPLEXER_SELECTION_REG);
    158e:	ec e7       	ldi	r30, 0x7C	; 124
    1590:	f0 e0       	ldi	r31, 0x00	; 0
    1592:	90 81       	ld	r25, Z
    1594:	9f 70       	andi	r25, 0x0F	; 15
    1596:	90 83       	st	Z, r25
  //   operated channel ( channel ) .
  PUT_VAL_LOW_NIBBLE(ADC_MULTIPLEXER_SELECTION_REG , channel);
    1598:	90 81       	ld	r25, Z
    159a:	90 7f       	andi	r25, 0xF0	; 240
    159c:	90 83       	st	Z, r25
    159e:	8f 70       	andi	r24, 0x0F	; 15
    15a0:	98 2b       	or	r25, r24
    15a2:	90 83       	st	Z, r25
  //  enable ADC  & enable interrupt && ps / 128.
  PUT_VAL_reg(ADC_CONTROL_STATUS_A_REG , 0x8f);
    15a4:	8f e8       	ldi	r24, 0x8F	; 143
    15a6:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>

  // enable global interrupt.
  sei();
    15aa:	78 94       	sei
    15ac:	08 95       	ret

000015ae <ADC_enable_reading>:
}

void ADC_enable_reading(void)
{
	// restart the conversion .
	SET_BIT(ADC_CONTROL_STATUS_A_REG , ADC_START_CONVERSION_bit);
    15ae:	ea e7       	ldi	r30, 0x7A	; 122
    15b0:	f0 e0       	ldi	r31, 0x00	; 0
    15b2:	80 81       	ld	r24, Z
    15b4:	80 64       	ori	r24, 0x40	; 64
    15b6:	80 83       	st	Z, r24
    15b8:	08 95       	ret

000015ba <ADC_read>:
}

uint16_t ADC_read(void)
{
	// re-start the conversion .
	ADC_enable_reading();
    15ba:	f9 df       	rcall	.-14     	; 0x15ae <ADC_enable_reading>
	static uint16_t returned_data;
	g_converted = 0 ;
    15bc:	10 92 c1 06 	sts	0x06C1, r1	; 0x8006c1 <g_converted>
    15c0:	80 ec       	ldi	r24, 0xC0	; 192
    15c2:	92 e1       	ldi	r25, 0x12	; 18
    15c4:	01 97       	sbiw	r24, 0x01	; 1
	// the conversion takes about 260 us so we will wait 4800 ticks till it ends .
	uint16_t time_out = 4800 ;
	while(!g_converted && 0 != time_out ){time_out --; }
    15c6:	f1 f7       	brne	.-4      	; 0x15c4 <ADC_read+0xa>
	returned_data = g_analog_data ;
    15c8:	80 91 c2 06 	lds	r24, 0x06C2	; 0x8006c2 <g_analog_data>
    15cc:	90 91 c3 06 	lds	r25, 0x06C3	; 0x8006c3 <g_analog_data+0x1>
		return returned_data ;
}
    15d0:	08 95       	ret

000015d2 <__vector_29>:


ISR(ADC_vect)
{
    15d2:	1f 92       	push	r1
    15d4:	0f 92       	push	r0
    15d6:	0f b6       	in	r0, 0x3f	; 63
    15d8:	0f 92       	push	r0
    15da:	11 24       	eor	r1, r1
    15dc:	2f 93       	push	r18
    15de:	8f 93       	push	r24
    15e0:	9f 93       	push	r25
	   uint8_t The_low_adc_reg = ADC_DATA_REG_LOW ;
    15e2:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
	  // get 10 bits out of the high and low register .
	  g_analog_data =  The_low_adc_reg | (ADC_DATA_REG_HIGH <<8);
    15e6:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
    15ea:	90 e0       	ldi	r25, 0x00	; 0
    15ec:	92 2b       	or	r25, r18
    15ee:	90 93 c3 06 	sts	0x06C3, r25	; 0x8006c3 <g_analog_data+0x1>
    15f2:	80 93 c2 06 	sts	0x06C2, r24	; 0x8006c2 <g_analog_data>
	//  UART0_OutUDec(g_analog_data);
	 // UART0_putc('\n');
	  g_converted = 1 ;
    15f6:	81 e0       	ldi	r24, 0x01	; 1
    15f8:	80 93 c1 06 	sts	0x06C1, r24	; 0x8006c1 <g_converted>
}
    15fc:	9f 91       	pop	r25
    15fe:	8f 91       	pop	r24
    1600:	2f 91       	pop	r18
    1602:	0f 90       	pop	r0
    1604:	0f be       	out	0x3f, r0	; 63
    1606:	0f 90       	pop	r0
    1608:	1f 90       	pop	r1
    160a:	18 95       	reti

0000160c <DIO_init>:
void Spark_change_state(uint8_t state)
{
	if (HIGH == state)
		SET_BIT(SPARK_DATA_REG , SPARK_PIN);
	else if(LOW == state)
		CLR_BIT(SPARK_DATA_REG , SPARK_PIN);
    160c:	ea e0       	ldi	r30, 0x0A	; 10
    160e:	f1 e0       	ldi	r31, 0x01	; 1
    1610:	80 81       	ld	r24, Z
    1612:	8f 7e       	andi	r24, 0xEF	; 239
    1614:	80 83       	st	Z, r24
    1616:	80 81       	ld	r24, Z
    1618:	8f 7d       	andi	r24, 0xDF	; 223
    161a:	80 83       	st	Z, r24
    161c:	80 81       	ld	r24, Z
    161e:	8f 7b       	andi	r24, 0xBF	; 191
    1620:	80 83       	st	Z, r24
    1622:	80 81       	ld	r24, Z
    1624:	8f 77       	andi	r24, 0x7F	; 127
    1626:	80 83       	st	Z, r24
    1628:	3c 98       	cbi	0x07, 4	; 7
    162a:	3d 98       	cbi	0x07, 5	; 7
    162c:	3a 98       	cbi	0x07, 2	; 7
    162e:	80 81       	ld	r24, Z
    1630:	87 7f       	andi	r24, 0xF7	; 247
    1632:	80 83       	st	Z, r24
    1634:	09 9a       	sbi	0x01, 1	; 1
    1636:	0a 9a       	sbi	0x01, 2	; 1
    1638:	e7 e0       	ldi	r30, 0x07	; 7
    163a:	f1 e0       	ldi	r31, 0x01	; 1
    163c:	80 81       	ld	r24, Z
    163e:	80 64       	ori	r24, 0x40	; 64
    1640:	80 83       	st	Z, r24
    1642:	0e 9a       	sbi	0x01, 6	; 1
    1644:	0e 9a       	sbi	0x01, 6	; 1
    1646:	80 81       	ld	r24, Z
    1648:	80 62       	ori	r24, 0x20	; 32
    164a:	80 83       	st	Z, r24
    164c:	80 81       	ld	r24, Z
    164e:	80 68       	ori	r24, 0x80	; 128
    1650:	80 83       	st	Z, r24
    1652:	38 98       	cbi	0x07, 0	; 7
    1654:	08 9a       	sbi	0x01, 0	; 1
    1656:	0b 9a       	sbi	0x01, 3	; 1
    1658:	e4 e0       	ldi	r30, 0x04	; 4
    165a:	f1 e0       	ldi	r31, 0x01	; 1
    165c:	80 81       	ld	r24, Z
    165e:	84 60       	ori	r24, 0x04	; 4
    1660:	80 83       	st	Z, r24
    1662:	54 9a       	sbi	0x0a, 4	; 10
    1664:	0e 9a       	sbi	0x01, 6	; 1
    1666:	3f 9a       	sbi	0x07, 7	; 7
    1668:	80 81       	ld	r24, Z
    166a:	80 64       	ori	r24, 0x40	; 64
    166c:	80 83       	st	Z, r24
    166e:	0f 9a       	sbi	0x01, 7	; 1
    1670:	e1 e0       	ldi	r30, 0x01	; 1
    1672:	f1 e0       	ldi	r31, 0x01	; 1
    1674:	80 81       	ld	r24, Z
    1676:	8e 7f       	andi	r24, 0xFE	; 254
    1678:	80 83       	st	Z, r24
    167a:	80 81       	ld	r24, Z
    167c:	82 60       	ori	r24, 0x02	; 2
    167e:	80 83       	st	Z, r24
    1680:	e2 e0       	ldi	r30, 0x02	; 2
    1682:	f1 e0       	ldi	r31, 0x01	; 1
    1684:	80 81       	ld	r24, Z
    1686:	81 60       	ori	r24, 0x01	; 1
    1688:	80 83       	st	Z, r24
    168a:	52 98       	cbi	0x0a, 2	; 10
    168c:	53 9a       	sbi	0x0a, 3	; 10
    168e:	5a 9a       	sbi	0x0b, 2	; 11
    1690:	08 95       	ret

00001692 <Modbus_change_state>:

//_________ MODE BUS initialize and enable______________________//

void Modbus_change_state(uint8_t device ,uint8_t state){
	
	switch (device){
    1692:	88 23       	and	r24, r24
    1694:	19 f0       	breq	.+6      	; 0x169c <Modbus_change_state+0xa>
    1696:	81 30       	cpi	r24, 0x01	; 1
    1698:	89 f0       	breq	.+34     	; 0x16bc <Modbus_change_state+0x2a>
    169a:	08 95       	ret
		case DEVICE_0:
		 	if (HIGH == state)
    169c:	61 30       	cpi	r22, 0x01	; 1
    169e:	31 f4       	brne	.+12     	; 0x16ac <Modbus_change_state+0x1a>
		 		SET_BIT(DEVICE_0_MODBUS_DATA_REG , DEVICE_0_MODBUS_PIN);
    16a0:	e5 e0       	ldi	r30, 0x05	; 5
    16a2:	f1 e0       	ldi	r31, 0x01	; 1
    16a4:	80 81       	ld	r24, Z
    16a6:	84 60       	ori	r24, 0x04	; 4
    16a8:	80 83       	st	Z, r24
    16aa:	08 95       	ret
		 	else if(LOW == state)
    16ac:	61 11       	cpse	r22, r1
    16ae:	0d c0       	rjmp	.+26     	; 0x16ca <Modbus_change_state+0x38>
		 		CLR_BIT(DEVICE_0_MODBUS_DATA_REG , DEVICE_0_MODBUS_PIN);
    16b0:	e5 e0       	ldi	r30, 0x05	; 5
    16b2:	f1 e0       	ldi	r31, 0x01	; 1
    16b4:	80 81       	ld	r24, Z
    16b6:	8b 7f       	andi	r24, 0xFB	; 251
    16b8:	80 83       	st	Z, r24
    16ba:	08 95       	ret
			
			break;
		case DEVICE_1:
		     if (HIGH == state)
    16bc:	61 30       	cpi	r22, 0x01	; 1
    16be:	11 f4       	brne	.+4      	; 0x16c4 <Modbus_change_state+0x32>
		         SET_BIT(DEVICE_1_MODBUS_DATA_REG , DEVICE_1_MODBUS_PIN);
    16c0:	5c 9a       	sbi	0x0b, 4	; 11
    16c2:	08 95       	ret
		     else if(LOW == state)
    16c4:	61 11       	cpse	r22, r1
    16c6:	01 c0       	rjmp	.+2      	; 0x16ca <Modbus_change_state+0x38>
		         CLR_BIT(DEVICE_1_MODBUS_DATA_REG , DEVICE_1_MODBUS_PIN);
    16c8:	5c 98       	cbi	0x0b, 4	; 11
    16ca:	08 95       	ret

000016cc <timers_init>:
 * set_up the timer and interrupt config and
 * parameters timer_ config struct contain all info about Timer
 * return 1 if the function setup OK -1 if not
 */
uint8_t timers_init(g_Timer_Config *config)
{
    16cc:	fc 01       	movw	r30, r24
	// choose the timer number depend on the config timer_number
	if(config->timer_number == 1){
    16ce:	94 81       	ldd	r25, Z+4	; 0x04
    16d0:	91 30       	cpi	r25, 0x01	; 1
    16d2:	c1 f4       	brne	.+48     	; 0x1704 <timers_init+0x38>

		// off all the modes of  first config register on timer
		DDRD &= ~ (1<<6);
    16d4:	56 98       	cbi	0x0a, 6	; 10
		PORTD |=(1<<6);
    16d6:	5e 9a       	sbi	0x0b, 6	; 11
		TIMER1_CONGFIG_A = 0X00;
    16d8:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
		// External counter on T1 and set the Top vale is OCRnA
		TIMER1_CONGFIG_B = 0x0E;
    16dc:	8e e0       	ldi	r24, 0x0E	; 14
    16de:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
		// number of Encoder Tick for Each interrupt
		TIMER1_COMPARE = config->ticks - 1;
    16e2:	80 81       	ld	r24, Z
    16e4:	91 81       	ldd	r25, Z+1	; 0x01
    16e6:	01 97       	sbiw	r24, 0x01	; 1
    16e8:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
    16ec:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
		// Enable interrupt Bit on the timer Mask
		SET_BIT(TIMER1_INTERUPT, TIMER1_COMPARE_INT);
    16f0:	af e6       	ldi	r26, 0x6F	; 111
    16f2:	b0 e0       	ldi	r27, 0x00	; 0
    16f4:	8c 91       	ld	r24, X
    16f6:	82 60       	ori	r24, 0x02	; 2
    16f8:	8c 93       	st	X, r24
		// copy the config parameter to Timer struct
		g_timer1_config = config;
    16fa:	f0 93 c0 18 	sts	0x18C0, r31	; 0x8018c0 <g_timer1_config+0x1>
    16fe:	e0 93 bf 18 	sts	0x18BF, r30	; 0x8018bf <g_timer1_config>
    1702:	5f c0       	rjmp	.+190    	; 0x17c2 <timers_init+0xf6>
		// set the time before get ticks ISR time
		//g_Timer1_old_time = Get_millis();
	}// timer_number = 1

	else if(config->timer_number == 3)
    1704:	93 30       	cpi	r25, 0x03	; 3
    1706:	c1 f4       	brne	.+48     	; 0x1738 <timers_init+0x6c>
	{
		//UART0_puts("calllllllllllllllllllll\n");
		DDRE &=~ (1<<6);
    1708:	6e 98       	cbi	0x0d, 6	; 13
		PORTE |=(1<<6);
    170a:	76 9a       	sbi	0x0e, 6	; 14
		// off all the modes of  first config register on timer
		TIMER3_CONGFIG_A = 0X00;
    170c:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
		//External counter on T1 and set the Top vale is OCRnA
		TIMER3_CONGFIG_B = 0x0E;
    1710:	8e e0       	ldi	r24, 0x0E	; 14
    1712:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>
		// number of Encoder Tick for Each interrupt
		TIMER3_COMPARE = config->ticks - 1;
    1716:	80 81       	ld	r24, Z
    1718:	91 81       	ldd	r25, Z+1	; 0x01
    171a:	01 97       	sbiw	r24, 0x01	; 1
    171c:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
    1720:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>
		// Enable interrupt Bit on the timer Mask
		SET_BIT(TIMER3_INTERUPT, TIMER3_COMPARE_INT);
    1724:	a1 e7       	ldi	r26, 0x71	; 113
    1726:	b0 e0       	ldi	r27, 0x00	; 0
    1728:	8c 91       	ld	r24, X
    172a:	82 60       	ori	r24, 0x02	; 2
    172c:	8c 93       	st	X, r24
		// copy the config parameter to Timer struct
		g_timer3_config = config;
    172e:	f0 93 bc 18 	sts	0x18BC, r31	; 0x8018bc <g_timer3_config+0x1>
    1732:	e0 93 bb 18 	sts	0x18BB, r30	; 0x8018bb <g_timer3_config>
    1736:	45 c0       	rjmp	.+138    	; 0x17c2 <timers_init+0xf6>
		// set the time before get ticks ISR time
		//g_Timer3_old_time = Get_millis();
	}//timer_number = 3
	else if(config->timer_number == 4){
    1738:	94 30       	cpi	r25, 0x04	; 4
    173a:	01 f5       	brne	.+64     	; 0x177c <timers_init+0xb0>
		//UART0_puts("cassssssssssssssssssssssssssss\n");
		DDRH &= ~ (1<<7);
    173c:	a1 e0       	ldi	r26, 0x01	; 1
    173e:	b1 e0       	ldi	r27, 0x01	; 1
    1740:	8c 91       	ld	r24, X
    1742:	8f 77       	andi	r24, 0x7F	; 127
    1744:	8c 93       	st	X, r24
		PORTH |=(1<<7);
    1746:	a2 e0       	ldi	r26, 0x02	; 2
    1748:	b1 e0       	ldi	r27, 0x01	; 1
    174a:	8c 91       	ld	r24, X
    174c:	80 68       	ori	r24, 0x80	; 128
    174e:	8c 93       	st	X, r24
		// off all the modes of  first config register on timer
		TIMER4_CONGFIG_A = 0X00;
    1750:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
		// External counter on T1 and set the Top vale is OCRnA
		TIMER4_CONGFIG_B = 0x0E;
    1754:	8e e0       	ldi	r24, 0x0E	; 14
    1756:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>
		// number of Encoder Tick for Each interrupt
		TIMER4_COMPARE = config->ticks - 1;
    175a:	80 81       	ld	r24, Z
    175c:	91 81       	ldd	r25, Z+1	; 0x01
    175e:	01 97       	sbiw	r24, 0x01	; 1
    1760:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
    1764:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
		// Enable interrupt Bit on the timer Mask
		SET_BIT(TIMER4_INTERUPT, TIMER4_COMPARE_INT);
    1768:	a2 e7       	ldi	r26, 0x72	; 114
    176a:	b0 e0       	ldi	r27, 0x00	; 0
    176c:	8c 91       	ld	r24, X
    176e:	82 60       	ori	r24, 0x02	; 2
    1770:	8c 93       	st	X, r24
		// copy the config parameter to Timer struct
		g_timer4_config = config;
    1772:	f0 93 be 18 	sts	0x18BE, r31	; 0x8018be <g_timer4_config+0x1>
    1776:	e0 93 bd 18 	sts	0x18BD, r30	; 0x8018bd <g_timer4_config>
    177a:	23 c0       	rjmp	.+70     	; 0x17c2 <timers_init+0xf6>
		// set the time before get ticks ISR time
		//g_Timer4_old_time = Get_millis();
	}//timer_number = 4

	else if(config->timer_number == 5){
    177c:	95 30       	cpi	r25, 0x05	; 5
    177e:	21 f5       	brne	.+72     	; 0x17c8 <timers_init+0xfc>
		
		DDRL &=~(1<<2);
    1780:	aa e0       	ldi	r26, 0x0A	; 10
    1782:	b1 e0       	ldi	r27, 0x01	; 1
    1784:	8c 91       	ld	r24, X
    1786:	8b 7f       	andi	r24, 0xFB	; 251
    1788:	8c 93       	st	X, r24
		PORTL |=(1<<2);
    178a:	ab e0       	ldi	r26, 0x0B	; 11
    178c:	b1 e0       	ldi	r27, 0x01	; 1
    178e:	8c 91       	ld	r24, X
    1790:	84 60       	ori	r24, 0x04	; 4
    1792:	8c 93       	st	X, r24
		// off all the modes of  first config register on timer
		TIMER5_CONGFIG_A = 0X00;
    1794:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
		//  External counter on T1 and set the Top vale is OCRnA
		TIMER5_CONGFIG_B = 0x0E;
    1798:	8e e0       	ldi	r24, 0x0E	; 14
    179a:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <__TEXT_REGION_LENGTH__+0x700121>
		//number of Encoder Tick for Each interrupt
		TIMER5_COMPARE = config->ticks - 1;
    179e:	80 81       	ld	r24, Z
    17a0:	91 81       	ldd	r25, Z+1	; 0x01
    17a2:	01 97       	sbiw	r24, 0x01	; 1
    17a4:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
    17a8:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
		// Enable interrupt Bit on the timer Mask
		SET_BIT(TIMER5_INTERUPT, TIMER5_COMPARE_INT);
    17ac:	a3 e7       	ldi	r26, 0x73	; 115
    17ae:	b0 e0       	ldi	r27, 0x00	; 0
    17b0:	8c 91       	ld	r24, X
    17b2:	82 60       	ori	r24, 0x02	; 2
    17b4:	8c 93       	st	X, r24
		// copy the config parameter to Timer struct
		g_timer5_config = config;
    17b6:	f0 93 c2 18 	sts	0x18C2, r31	; 0x8018c2 <g_timer5_config+0x1>
    17ba:	e0 93 c1 18 	sts	0x18C1, r30	; 0x8018c1 <g_timer5_config>
		// set the time before get ticks ISR time
		//g_Timer5_old_time = Get_millis();
		//Clear the counter number
		TIMER5_COUNT_L = 0;
    17be:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <__TEXT_REGION_LENGTH__+0x700124>
	{
		//Error the timer number not valid
		return -1;
	}// Else

    sei();
    17c2:	78 94       	sei
    return 1;// Setup done ok
    17c4:	81 e0       	ldi	r24, 0x01	; 1
    17c6:	08 95       	ret
	}//timer_number = 5

	else
	{
		//Error the timer number not valid
		return -1;
    17c8:	8f ef       	ldi	r24, 0xFF	; 255
	}// Else

    sei();
    return 1;// Setup done ok
}//timer_init
    17ca:	08 95       	ret

000017cc <__vector_17>:

// interrupted service routine when we have reach the number of  Ticks On Encoder
ISR(TIMER1_COMPA_vect)
{
    17cc:	1f 92       	push	r1
    17ce:	0f 92       	push	r0
    17d0:	0f b6       	in	r0, 0x3f	; 63
    17d2:	0f 92       	push	r0
    17d4:	11 24       	eor	r1, r1
    17d6:	0b b6       	in	r0, 0x3b	; 59
    17d8:	0f 92       	push	r0
    17da:	2f 93       	push	r18
    17dc:	3f 93       	push	r19
    17de:	4f 93       	push	r20
    17e0:	5f 93       	push	r21
    17e2:	6f 93       	push	r22
    17e4:	7f 93       	push	r23
    17e6:	8f 93       	push	r24
    17e8:	9f 93       	push	r25
    17ea:	af 93       	push	r26
    17ec:	bf 93       	push	r27
    17ee:	ef 93       	push	r30
    17f0:	ff 93       	push	r31
    17f2:	cf 93       	push	r28
    17f4:	df 93       	push	r29
    17f6:	00 d0       	rcall	.+0      	; 0x17f8 <__vector_17+0x2c>
    17f8:	1f 92       	push	r1
    17fa:	cd b7       	in	r28, 0x3d	; 61
    17fc:	de b7       	in	r29, 0x3e	; 62
	volatile uint32_t diff_time;      // to save the different between new time and old time
	volatile static uint32_t s_Timer1_old_time;
	volatile static uint32_t s_Timer1_new_time;
	// get the time now
	s_Timer1_new_time = Get_millis();
    17fe:	0e 94 2d 1b 	call	0x365a	; 0x365a <Get_millis>
    1802:	60 93 e0 06 	sts	0x06E0, r22	; 0x8006e0 <s_Timer1_new_time.1769>
    1806:	70 93 e1 06 	sts	0x06E1, r23	; 0x8006e1 <s_Timer1_new_time.1769+0x1>
    180a:	80 93 e2 06 	sts	0x06E2, r24	; 0x8006e2 <s_Timer1_new_time.1769+0x2>
    180e:	90 93 e3 06 	sts	0x06E3, r25	; 0x8006e3 <s_Timer1_new_time.1769+0x3>
	//UART0_puts("blaaaaa\n");
	// calculate the diff between now and last interrupt
	diff_time = s_Timer1_new_time - s_Timer1_old_time;
    1812:	80 91 e0 06 	lds	r24, 0x06E0	; 0x8006e0 <s_Timer1_new_time.1769>
    1816:	90 91 e1 06 	lds	r25, 0x06E1	; 0x8006e1 <s_Timer1_new_time.1769+0x1>
    181a:	a0 91 e2 06 	lds	r26, 0x06E2	; 0x8006e2 <s_Timer1_new_time.1769+0x2>
    181e:	b0 91 e3 06 	lds	r27, 0x06E3	; 0x8006e3 <s_Timer1_new_time.1769+0x3>
    1822:	40 91 dc 06 	lds	r20, 0x06DC	; 0x8006dc <s_Timer1_old_time.1768>
    1826:	50 91 dd 06 	lds	r21, 0x06DD	; 0x8006dd <s_Timer1_old_time.1768+0x1>
    182a:	60 91 de 06 	lds	r22, 0x06DE	; 0x8006de <s_Timer1_old_time.1768+0x2>
    182e:	70 91 df 06 	lds	r23, 0x06DF	; 0x8006df <s_Timer1_old_time.1768+0x3>
    1832:	84 1b       	sub	r24, r20
    1834:	95 0b       	sbc	r25, r21
    1836:	a6 0b       	sbc	r26, r22
    1838:	b7 0b       	sbc	r27, r23
    183a:	89 83       	std	Y+1, r24	; 0x01
    183c:	9a 83       	std	Y+2, r25	; 0x02
    183e:	ab 83       	std	Y+3, r26	; 0x03
    1840:	bc 83       	std	Y+4, r27	; 0x04
	// save the to the old time to next interrupt
	s_Timer1_old_time = s_Timer1_new_time;
    1842:	80 91 e0 06 	lds	r24, 0x06E0	; 0x8006e0 <s_Timer1_new_time.1769>
    1846:	90 91 e1 06 	lds	r25, 0x06E1	; 0x8006e1 <s_Timer1_new_time.1769+0x1>
    184a:	a0 91 e2 06 	lds	r26, 0x06E2	; 0x8006e2 <s_Timer1_new_time.1769+0x2>
    184e:	b0 91 e3 06 	lds	r27, 0x06E3	; 0x8006e3 <s_Timer1_new_time.1769+0x3>
    1852:	80 93 dc 06 	sts	0x06DC, r24	; 0x8006dc <s_Timer1_old_time.1768>
    1856:	90 93 dd 06 	sts	0x06DD, r25	; 0x8006dd <s_Timer1_old_time.1768+0x1>
    185a:	a0 93 de 06 	sts	0x06DE, r26	; 0x8006de <s_Timer1_old_time.1768+0x2>
    185e:	b0 93 df 06 	sts	0x06DF, r27	; 0x8006df <s_Timer1_old_time.1768+0x3>
	//call back function on upper layer to get time
	g_timer1_config->isr_call_back(diff_time);
    1862:	69 81       	ldd	r22, Y+1	; 0x01
    1864:	7a 81       	ldd	r23, Y+2	; 0x02
    1866:	8b 81       	ldd	r24, Y+3	; 0x03
    1868:	9c 81       	ldd	r25, Y+4	; 0x04
    186a:	e0 91 bf 18 	lds	r30, 0x18BF	; 0x8018bf <g_timer1_config>
    186e:	f0 91 c0 18 	lds	r31, 0x18C0	; 0x8018c0 <g_timer1_config+0x1>
    1872:	02 80       	ldd	r0, Z+2	; 0x02
    1874:	f3 81       	ldd	r31, Z+3	; 0x03
    1876:	e0 2d       	mov	r30, r0
    1878:	19 95       	eicall
}
    187a:	0f 90       	pop	r0
    187c:	0f 90       	pop	r0
    187e:	0f 90       	pop	r0
    1880:	0f 90       	pop	r0
    1882:	df 91       	pop	r29
    1884:	cf 91       	pop	r28
    1886:	ff 91       	pop	r31
    1888:	ef 91       	pop	r30
    188a:	bf 91       	pop	r27
    188c:	af 91       	pop	r26
    188e:	9f 91       	pop	r25
    1890:	8f 91       	pop	r24
    1892:	7f 91       	pop	r23
    1894:	6f 91       	pop	r22
    1896:	5f 91       	pop	r21
    1898:	4f 91       	pop	r20
    189a:	3f 91       	pop	r19
    189c:	2f 91       	pop	r18
    189e:	0f 90       	pop	r0
    18a0:	0b be       	out	0x3b, r0	; 59
    18a2:	0f 90       	pop	r0
    18a4:	0f be       	out	0x3f, r0	; 63
    18a6:	0f 90       	pop	r0
    18a8:	1f 90       	pop	r1
    18aa:	18 95       	reti

000018ac <__vector_32>:
// interrupted service routine when we have reach the number of  Ticks On Encoder
ISR(TIMER3_COMPA_vect)
{
    18ac:	1f 92       	push	r1
    18ae:	0f 92       	push	r0
    18b0:	0f b6       	in	r0, 0x3f	; 63
    18b2:	0f 92       	push	r0
    18b4:	11 24       	eor	r1, r1
    18b6:	0b b6       	in	r0, 0x3b	; 59
    18b8:	0f 92       	push	r0
    18ba:	2f 93       	push	r18
    18bc:	3f 93       	push	r19
    18be:	4f 93       	push	r20
    18c0:	5f 93       	push	r21
    18c2:	6f 93       	push	r22
    18c4:	7f 93       	push	r23
    18c6:	8f 93       	push	r24
    18c8:	9f 93       	push	r25
    18ca:	af 93       	push	r26
    18cc:	bf 93       	push	r27
    18ce:	ef 93       	push	r30
    18d0:	ff 93       	push	r31
    18d2:	cf 93       	push	r28
    18d4:	df 93       	push	r29
    18d6:	00 d0       	rcall	.+0      	; 0x18d8 <__vector_32+0x2c>
    18d8:	1f 92       	push	r1
    18da:	cd b7       	in	r28, 0x3d	; 61
    18dc:	de b7       	in	r29, 0x3e	; 62
	volatile uint32_t diff_time;      // to save the different between new time and old time
	volatile static uint32_t s_Timer3_old_time;
	volatile static uint32_t s_Timer3_new_time;
	// get the time now
	//UART0_puts("ISR3333333333333333333333333333333333333\n");
	s_Timer3_new_time = Get_millis();
    18de:	0e 94 2d 1b 	call	0x365a	; 0x365a <Get_millis>
    18e2:	60 93 d8 06 	sts	0x06D8, r22	; 0x8006d8 <s_Timer3_new_time.1777>
    18e6:	70 93 d9 06 	sts	0x06D9, r23	; 0x8006d9 <s_Timer3_new_time.1777+0x1>
    18ea:	80 93 da 06 	sts	0x06DA, r24	; 0x8006da <s_Timer3_new_time.1777+0x2>
    18ee:	90 93 db 06 	sts	0x06DB, r25	; 0x8006db <s_Timer3_new_time.1777+0x3>
	// calculate the diff between now and last interrupt
	diff_time = s_Timer3_new_time - s_Timer3_old_time;
    18f2:	80 91 d8 06 	lds	r24, 0x06D8	; 0x8006d8 <s_Timer3_new_time.1777>
    18f6:	90 91 d9 06 	lds	r25, 0x06D9	; 0x8006d9 <s_Timer3_new_time.1777+0x1>
    18fa:	a0 91 da 06 	lds	r26, 0x06DA	; 0x8006da <s_Timer3_new_time.1777+0x2>
    18fe:	b0 91 db 06 	lds	r27, 0x06DB	; 0x8006db <s_Timer3_new_time.1777+0x3>
    1902:	40 91 d4 06 	lds	r20, 0x06D4	; 0x8006d4 <s_Timer3_old_time.1776>
    1906:	50 91 d5 06 	lds	r21, 0x06D5	; 0x8006d5 <s_Timer3_old_time.1776+0x1>
    190a:	60 91 d6 06 	lds	r22, 0x06D6	; 0x8006d6 <s_Timer3_old_time.1776+0x2>
    190e:	70 91 d7 06 	lds	r23, 0x06D7	; 0x8006d7 <s_Timer3_old_time.1776+0x3>
    1912:	84 1b       	sub	r24, r20
    1914:	95 0b       	sbc	r25, r21
    1916:	a6 0b       	sbc	r26, r22
    1918:	b7 0b       	sbc	r27, r23
    191a:	89 83       	std	Y+1, r24	; 0x01
    191c:	9a 83       	std	Y+2, r25	; 0x02
    191e:	ab 83       	std	Y+3, r26	; 0x03
    1920:	bc 83       	std	Y+4, r27	; 0x04
	// save the to the old time to next interrupt
	s_Timer3_old_time = s_Timer3_new_time;
    1922:	80 91 d8 06 	lds	r24, 0x06D8	; 0x8006d8 <s_Timer3_new_time.1777>
    1926:	90 91 d9 06 	lds	r25, 0x06D9	; 0x8006d9 <s_Timer3_new_time.1777+0x1>
    192a:	a0 91 da 06 	lds	r26, 0x06DA	; 0x8006da <s_Timer3_new_time.1777+0x2>
    192e:	b0 91 db 06 	lds	r27, 0x06DB	; 0x8006db <s_Timer3_new_time.1777+0x3>
    1932:	80 93 d4 06 	sts	0x06D4, r24	; 0x8006d4 <s_Timer3_old_time.1776>
    1936:	90 93 d5 06 	sts	0x06D5, r25	; 0x8006d5 <s_Timer3_old_time.1776+0x1>
    193a:	a0 93 d6 06 	sts	0x06D6, r26	; 0x8006d6 <s_Timer3_old_time.1776+0x2>
    193e:	b0 93 d7 06 	sts	0x06D7, r27	; 0x8006d7 <s_Timer3_old_time.1776+0x3>
	//call back function on upper layer to get time
	g_timer3_config->isr_call_back(diff_time);
    1942:	69 81       	ldd	r22, Y+1	; 0x01
    1944:	7a 81       	ldd	r23, Y+2	; 0x02
    1946:	8b 81       	ldd	r24, Y+3	; 0x03
    1948:	9c 81       	ldd	r25, Y+4	; 0x04
    194a:	e0 91 bb 18 	lds	r30, 0x18BB	; 0x8018bb <g_timer3_config>
    194e:	f0 91 bc 18 	lds	r31, 0x18BC	; 0x8018bc <g_timer3_config+0x1>
    1952:	02 80       	ldd	r0, Z+2	; 0x02
    1954:	f3 81       	ldd	r31, Z+3	; 0x03
    1956:	e0 2d       	mov	r30, r0
    1958:	19 95       	eicall
}
    195a:	0f 90       	pop	r0
    195c:	0f 90       	pop	r0
    195e:	0f 90       	pop	r0
    1960:	0f 90       	pop	r0
    1962:	df 91       	pop	r29
    1964:	cf 91       	pop	r28
    1966:	ff 91       	pop	r31
    1968:	ef 91       	pop	r30
    196a:	bf 91       	pop	r27
    196c:	af 91       	pop	r26
    196e:	9f 91       	pop	r25
    1970:	8f 91       	pop	r24
    1972:	7f 91       	pop	r23
    1974:	6f 91       	pop	r22
    1976:	5f 91       	pop	r21
    1978:	4f 91       	pop	r20
    197a:	3f 91       	pop	r19
    197c:	2f 91       	pop	r18
    197e:	0f 90       	pop	r0
    1980:	0b be       	out	0x3b, r0	; 59
    1982:	0f 90       	pop	r0
    1984:	0f be       	out	0x3f, r0	; 63
    1986:	0f 90       	pop	r0
    1988:	1f 90       	pop	r1
    198a:	18 95       	reti

0000198c <__vector_42>:
// interrupted service routine when we have reach the number of  Ticks On Encoder
ISR(TIMER4_COMPA_vect)
{
    198c:	1f 92       	push	r1
    198e:	0f 92       	push	r0
    1990:	0f b6       	in	r0, 0x3f	; 63
    1992:	0f 92       	push	r0
    1994:	11 24       	eor	r1, r1
    1996:	0b b6       	in	r0, 0x3b	; 59
    1998:	0f 92       	push	r0
    199a:	2f 93       	push	r18
    199c:	3f 93       	push	r19
    199e:	4f 93       	push	r20
    19a0:	5f 93       	push	r21
    19a2:	6f 93       	push	r22
    19a4:	7f 93       	push	r23
    19a6:	8f 93       	push	r24
    19a8:	9f 93       	push	r25
    19aa:	af 93       	push	r26
    19ac:	bf 93       	push	r27
    19ae:	ef 93       	push	r30
    19b0:	ff 93       	push	r31
    19b2:	cf 93       	push	r28
    19b4:	df 93       	push	r29
    19b6:	00 d0       	rcall	.+0      	; 0x19b8 <__vector_42+0x2c>
    19b8:	1f 92       	push	r1
    19ba:	cd b7       	in	r28, 0x3d	; 61
    19bc:	de b7       	in	r29, 0x3e	; 62
	volatile uint32_t diff_time;      // to save the different between new time and old time
	volatile static uint32_t s_Timer4_old_time;
	volatile static uint32_t s_Timer4_new_time;
	// get the time now
	//UART0_puts("ISR444444444444444444444444444444444444\n");
	s_Timer4_new_time = Get_millis();
    19be:	0e 94 2d 1b 	call	0x365a	; 0x365a <Get_millis>
    19c2:	60 93 d0 06 	sts	0x06D0, r22	; 0x8006d0 <s_Timer4_new_time.1785>
    19c6:	70 93 d1 06 	sts	0x06D1, r23	; 0x8006d1 <s_Timer4_new_time.1785+0x1>
    19ca:	80 93 d2 06 	sts	0x06D2, r24	; 0x8006d2 <s_Timer4_new_time.1785+0x2>
    19ce:	90 93 d3 06 	sts	0x06D3, r25	; 0x8006d3 <s_Timer4_new_time.1785+0x3>
	// calculate the diff between now and last interrupt
	diff_time = s_Timer4_new_time - s_Timer4_old_time;
    19d2:	80 91 d0 06 	lds	r24, 0x06D0	; 0x8006d0 <s_Timer4_new_time.1785>
    19d6:	90 91 d1 06 	lds	r25, 0x06D1	; 0x8006d1 <s_Timer4_new_time.1785+0x1>
    19da:	a0 91 d2 06 	lds	r26, 0x06D2	; 0x8006d2 <s_Timer4_new_time.1785+0x2>
    19de:	b0 91 d3 06 	lds	r27, 0x06D3	; 0x8006d3 <s_Timer4_new_time.1785+0x3>
    19e2:	40 91 cc 06 	lds	r20, 0x06CC	; 0x8006cc <s_Timer4_old_time.1784>
    19e6:	50 91 cd 06 	lds	r21, 0x06CD	; 0x8006cd <s_Timer4_old_time.1784+0x1>
    19ea:	60 91 ce 06 	lds	r22, 0x06CE	; 0x8006ce <s_Timer4_old_time.1784+0x2>
    19ee:	70 91 cf 06 	lds	r23, 0x06CF	; 0x8006cf <s_Timer4_old_time.1784+0x3>
    19f2:	84 1b       	sub	r24, r20
    19f4:	95 0b       	sbc	r25, r21
    19f6:	a6 0b       	sbc	r26, r22
    19f8:	b7 0b       	sbc	r27, r23
    19fa:	89 83       	std	Y+1, r24	; 0x01
    19fc:	9a 83       	std	Y+2, r25	; 0x02
    19fe:	ab 83       	std	Y+3, r26	; 0x03
    1a00:	bc 83       	std	Y+4, r27	; 0x04
	// save the to the old time to next interrupt
	s_Timer4_old_time = s_Timer4_new_time;
    1a02:	80 91 d0 06 	lds	r24, 0x06D0	; 0x8006d0 <s_Timer4_new_time.1785>
    1a06:	90 91 d1 06 	lds	r25, 0x06D1	; 0x8006d1 <s_Timer4_new_time.1785+0x1>
    1a0a:	a0 91 d2 06 	lds	r26, 0x06D2	; 0x8006d2 <s_Timer4_new_time.1785+0x2>
    1a0e:	b0 91 d3 06 	lds	r27, 0x06D3	; 0x8006d3 <s_Timer4_new_time.1785+0x3>
    1a12:	80 93 cc 06 	sts	0x06CC, r24	; 0x8006cc <s_Timer4_old_time.1784>
    1a16:	90 93 cd 06 	sts	0x06CD, r25	; 0x8006cd <s_Timer4_old_time.1784+0x1>
    1a1a:	a0 93 ce 06 	sts	0x06CE, r26	; 0x8006ce <s_Timer4_old_time.1784+0x2>
    1a1e:	b0 93 cf 06 	sts	0x06CF, r27	; 0x8006cf <s_Timer4_old_time.1784+0x3>
	//call back function on upper layer to get time
	g_timer4_config->isr_call_back(diff_time);
    1a22:	69 81       	ldd	r22, Y+1	; 0x01
    1a24:	7a 81       	ldd	r23, Y+2	; 0x02
    1a26:	8b 81       	ldd	r24, Y+3	; 0x03
    1a28:	9c 81       	ldd	r25, Y+4	; 0x04
    1a2a:	e0 91 bd 18 	lds	r30, 0x18BD	; 0x8018bd <g_timer4_config>
    1a2e:	f0 91 be 18 	lds	r31, 0x18BE	; 0x8018be <g_timer4_config+0x1>
    1a32:	02 80       	ldd	r0, Z+2	; 0x02
    1a34:	f3 81       	ldd	r31, Z+3	; 0x03
    1a36:	e0 2d       	mov	r30, r0
    1a38:	19 95       	eicall
}
    1a3a:	0f 90       	pop	r0
    1a3c:	0f 90       	pop	r0
    1a3e:	0f 90       	pop	r0
    1a40:	0f 90       	pop	r0
    1a42:	df 91       	pop	r29
    1a44:	cf 91       	pop	r28
    1a46:	ff 91       	pop	r31
    1a48:	ef 91       	pop	r30
    1a4a:	bf 91       	pop	r27
    1a4c:	af 91       	pop	r26
    1a4e:	9f 91       	pop	r25
    1a50:	8f 91       	pop	r24
    1a52:	7f 91       	pop	r23
    1a54:	6f 91       	pop	r22
    1a56:	5f 91       	pop	r21
    1a58:	4f 91       	pop	r20
    1a5a:	3f 91       	pop	r19
    1a5c:	2f 91       	pop	r18
    1a5e:	0f 90       	pop	r0
    1a60:	0b be       	out	0x3b, r0	; 59
    1a62:	0f 90       	pop	r0
    1a64:	0f be       	out	0x3f, r0	; 63
    1a66:	0f 90       	pop	r0
    1a68:	1f 90       	pop	r1
    1a6a:	18 95       	reti

00001a6c <__vector_47>:
// interrupted service routine when we have reach the number of  Ticks On Encoder
ISR(TIMER5_COMPA_vect)
{
    1a6c:	1f 92       	push	r1
    1a6e:	0f 92       	push	r0
    1a70:	0f b6       	in	r0, 0x3f	; 63
    1a72:	0f 92       	push	r0
    1a74:	11 24       	eor	r1, r1
    1a76:	0b b6       	in	r0, 0x3b	; 59
    1a78:	0f 92       	push	r0
    1a7a:	2f 93       	push	r18
    1a7c:	3f 93       	push	r19
    1a7e:	4f 93       	push	r20
    1a80:	5f 93       	push	r21
    1a82:	6f 93       	push	r22
    1a84:	7f 93       	push	r23
    1a86:	8f 93       	push	r24
    1a88:	9f 93       	push	r25
    1a8a:	af 93       	push	r26
    1a8c:	bf 93       	push	r27
    1a8e:	ef 93       	push	r30
    1a90:	ff 93       	push	r31
    1a92:	cf 93       	push	r28
    1a94:	df 93       	push	r29
    1a96:	00 d0       	rcall	.+0      	; 0x1a98 <__vector_47+0x2c>
    1a98:	1f 92       	push	r1
    1a9a:	cd b7       	in	r28, 0x3d	; 61
    1a9c:	de b7       	in	r29, 0x3e	; 62
	volatile static uint32_t s_Timer5_old_time;
	volatile static uint32_t s_Timer5_new_time;
	//TOG_BIT(PORTB,0);
	//UART0_puts("TIMER55555555555555555\n");
	// get the time now
	s_Timer5_new_time = Get_millis();
    1a9e:	0e 94 2d 1b 	call	0x365a	; 0x365a <Get_millis>
    1aa2:	60 93 c8 06 	sts	0x06C8, r22	; 0x8006c8 <s_Timer5_new_time.1793>
    1aa6:	70 93 c9 06 	sts	0x06C9, r23	; 0x8006c9 <s_Timer5_new_time.1793+0x1>
    1aaa:	80 93 ca 06 	sts	0x06CA, r24	; 0x8006ca <s_Timer5_new_time.1793+0x2>
    1aae:	90 93 cb 06 	sts	0x06CB, r25	; 0x8006cb <s_Timer5_new_time.1793+0x3>
	// calculate the difference between now and last interrupt
	diff_time = s_Timer5_new_time - s_Timer5_old_time;
    1ab2:	80 91 c8 06 	lds	r24, 0x06C8	; 0x8006c8 <s_Timer5_new_time.1793>
    1ab6:	90 91 c9 06 	lds	r25, 0x06C9	; 0x8006c9 <s_Timer5_new_time.1793+0x1>
    1aba:	a0 91 ca 06 	lds	r26, 0x06CA	; 0x8006ca <s_Timer5_new_time.1793+0x2>
    1abe:	b0 91 cb 06 	lds	r27, 0x06CB	; 0x8006cb <s_Timer5_new_time.1793+0x3>
    1ac2:	40 91 c4 06 	lds	r20, 0x06C4	; 0x8006c4 <s_Timer5_old_time.1792>
    1ac6:	50 91 c5 06 	lds	r21, 0x06C5	; 0x8006c5 <s_Timer5_old_time.1792+0x1>
    1aca:	60 91 c6 06 	lds	r22, 0x06C6	; 0x8006c6 <s_Timer5_old_time.1792+0x2>
    1ace:	70 91 c7 06 	lds	r23, 0x06C7	; 0x8006c7 <s_Timer5_old_time.1792+0x3>
    1ad2:	84 1b       	sub	r24, r20
    1ad4:	95 0b       	sbc	r25, r21
    1ad6:	a6 0b       	sbc	r26, r22
    1ad8:	b7 0b       	sbc	r27, r23
    1ada:	89 83       	std	Y+1, r24	; 0x01
    1adc:	9a 83       	std	Y+2, r25	; 0x02
    1ade:	ab 83       	std	Y+3, r26	; 0x03
    1ae0:	bc 83       	std	Y+4, r27	; 0x04
	// save the to the old time to next interrupt
	s_Timer5_old_time = s_Timer5_new_time;
    1ae2:	80 91 c8 06 	lds	r24, 0x06C8	; 0x8006c8 <s_Timer5_new_time.1793>
    1ae6:	90 91 c9 06 	lds	r25, 0x06C9	; 0x8006c9 <s_Timer5_new_time.1793+0x1>
    1aea:	a0 91 ca 06 	lds	r26, 0x06CA	; 0x8006ca <s_Timer5_new_time.1793+0x2>
    1aee:	b0 91 cb 06 	lds	r27, 0x06CB	; 0x8006cb <s_Timer5_new_time.1793+0x3>
    1af2:	80 93 c4 06 	sts	0x06C4, r24	; 0x8006c4 <s_Timer5_old_time.1792>
    1af6:	90 93 c5 06 	sts	0x06C5, r25	; 0x8006c5 <s_Timer5_old_time.1792+0x1>
    1afa:	a0 93 c6 06 	sts	0x06C6, r26	; 0x8006c6 <s_Timer5_old_time.1792+0x2>
    1afe:	b0 93 c7 06 	sts	0x06C7, r27	; 0x8006c7 <s_Timer5_old_time.1792+0x3>
	// clear the counter
	TIMER5_COUNT_L = 0;
    1b02:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <__TEXT_REGION_LENGTH__+0x700124>
	//call back function on upper layer to get time
	g_timer5_config->isr_call_back(diff_time);
    1b06:	69 81       	ldd	r22, Y+1	; 0x01
    1b08:	7a 81       	ldd	r23, Y+2	; 0x02
    1b0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b0c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b0e:	e0 91 c1 18 	lds	r30, 0x18C1	; 0x8018c1 <g_timer5_config>
    1b12:	f0 91 c2 18 	lds	r31, 0x18C2	; 0x8018c2 <g_timer5_config+0x1>
    1b16:	02 80       	ldd	r0, Z+2	; 0x02
    1b18:	f3 81       	ldd	r31, Z+3	; 0x03
    1b1a:	e0 2d       	mov	r30, r0
    1b1c:	19 95       	eicall
	
}
    1b1e:	0f 90       	pop	r0
    1b20:	0f 90       	pop	r0
    1b22:	0f 90       	pop	r0
    1b24:	0f 90       	pop	r0
    1b26:	df 91       	pop	r29
    1b28:	cf 91       	pop	r28
    1b2a:	ff 91       	pop	r31
    1b2c:	ef 91       	pop	r30
    1b2e:	bf 91       	pop	r27
    1b30:	af 91       	pop	r26
    1b32:	9f 91       	pop	r25
    1b34:	8f 91       	pop	r24
    1b36:	7f 91       	pop	r23
    1b38:	6f 91       	pop	r22
    1b3a:	5f 91       	pop	r21
    1b3c:	4f 91       	pop	r20
    1b3e:	3f 91       	pop	r19
    1b40:	2f 91       	pop	r18
    1b42:	0f 90       	pop	r0
    1b44:	0b be       	out	0x3b, r0	; 59
    1b46:	0f 90       	pop	r0
    1b48:	0f be       	out	0x3f, r0	; 63
    1b4a:	0f 90       	pop	r0
    1b4c:	1f 90       	pop	r1
    1b4e:	18 95       	reti

00001b50 <__vector_25>:

	while ((c = pgm_read_byte(progmem_s++))) {
		UART3_putc(c);
	}

} /* UART3_puts_p */
    1b50:	1f 92       	push	r1
    1b52:	0f 92       	push	r0
    1b54:	0f b6       	in	r0, 0x3f	; 63
    1b56:	0f 92       	push	r0
    1b58:	11 24       	eor	r1, r1
    1b5a:	0b b6       	in	r0, 0x3b	; 59
    1b5c:	0f 92       	push	r0
    1b5e:	2f 93       	push	r18
    1b60:	3f 93       	push	r19
    1b62:	4f 93       	push	r20
    1b64:	5f 93       	push	r21
    1b66:	8f 93       	push	r24
    1b68:	9f 93       	push	r25
    1b6a:	ef 93       	push	r30
    1b6c:	ff 93       	push	r31
    1b6e:	20 91 c0 00 	lds	r18, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
    1b72:	30 91 c6 00 	lds	r19, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    1b76:	28 71       	andi	r18, 0x18	; 24
    1b78:	80 91 f9 09 	lds	r24, 0x09F9	; 0x8009f9 <UART_RxHead>
    1b7c:	90 e0       	ldi	r25, 0x00	; 0
    1b7e:	01 96       	adiw	r24, 0x01	; 1
    1b80:	8f 77       	andi	r24, 0x7F	; 127
    1b82:	99 27       	eor	r25, r25
    1b84:	40 91 f8 09 	lds	r20, 0x09F8	; 0x8009f8 <UART_RxTail>
    1b88:	50 e0       	ldi	r21, 0x00	; 0
    1b8a:	84 17       	cp	r24, r20
    1b8c:	95 07       	cpc	r25, r21
    1b8e:	39 f0       	breq	.+14     	; 0x1b9e <__vector_25+0x4e>
    1b90:	80 93 f9 09 	sts	0x09F9, r24	; 0x8009f9 <UART_RxHead>
    1b94:	fc 01       	movw	r30, r24
    1b96:	e4 50       	subi	r30, 0x04	; 4
    1b98:	f6 4f       	sbci	r31, 0xF6	; 246
    1b9a:	30 83       	st	Z, r19
    1b9c:	01 c0       	rjmp	.+2      	; 0x1ba0 <__vector_25+0x50>
    1b9e:	22 e0       	ldi	r18, 0x02	; 2
    1ba0:	20 93 f7 09 	sts	0x09F7, r18	; 0x8009f7 <UART_LastRxError>
    1ba4:	ff 91       	pop	r31
    1ba6:	ef 91       	pop	r30
    1ba8:	9f 91       	pop	r25
    1baa:	8f 91       	pop	r24
    1bac:	5f 91       	pop	r21
    1bae:	4f 91       	pop	r20
    1bb0:	3f 91       	pop	r19
    1bb2:	2f 91       	pop	r18
    1bb4:	0f 90       	pop	r0
    1bb6:	0b be       	out	0x3b, r0	; 59
    1bb8:	0f 90       	pop	r0
    1bba:	0f be       	out	0x3f, r0	; 63
    1bbc:	0f 90       	pop	r0
    1bbe:	1f 90       	pop	r1
    1bc0:	18 95       	reti

00001bc2 <__vector_26>:
    1bc2:	1f 92       	push	r1
    1bc4:	0f 92       	push	r0
    1bc6:	0f b6       	in	r0, 0x3f	; 63
    1bc8:	0f 92       	push	r0
    1bca:	11 24       	eor	r1, r1
    1bcc:	0b b6       	in	r0, 0x3b	; 59
    1bce:	0f 92       	push	r0
    1bd0:	8f 93       	push	r24
    1bd2:	9f 93       	push	r25
    1bd4:	ef 93       	push	r30
    1bd6:	ff 93       	push	r31
    1bd8:	90 91 fb 09 	lds	r25, 0x09FB	; 0x8009fb <UART_TxHead>
    1bdc:	80 91 fa 09 	lds	r24, 0x09FA	; 0x8009fa <UART_TxTail>
    1be0:	98 17       	cp	r25, r24
    1be2:	89 f0       	breq	.+34     	; 0x1c06 <__vector_26+0x44>
    1be4:	80 91 fa 09 	lds	r24, 0x09FA	; 0x8009fa <UART_TxTail>
    1be8:	90 e0       	ldi	r25, 0x00	; 0
    1bea:	01 96       	adiw	r24, 0x01	; 1
    1bec:	8f 77       	andi	r24, 0x7F	; 127
    1bee:	99 27       	eor	r25, r25
    1bf0:	80 93 fa 09 	sts	0x09FA, r24	; 0x8009fa <UART_TxTail>
    1bf4:	fc 01       	movw	r30, r24
    1bf6:	e4 58       	subi	r30, 0x84	; 132
    1bf8:	f5 4f       	sbci	r31, 0xF5	; 245
    1bfa:	80 81       	ld	r24, Z
    1bfc:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    1c00:	10 92 e7 06 	sts	0x06E7, r1	; 0x8006e7 <UART0_Transmission_end>
    1c04:	08 c0       	rjmp	.+16     	; 0x1c16 <__vector_26+0x54>
    1c06:	e1 ec       	ldi	r30, 0xC1	; 193
    1c08:	f0 e0       	ldi	r31, 0x00	; 0
    1c0a:	80 81       	ld	r24, Z
    1c0c:	8f 7d       	andi	r24, 0xDF	; 223
    1c0e:	80 83       	st	Z, r24
    1c10:	81 e0       	ldi	r24, 0x01	; 1
    1c12:	80 93 e7 06 	sts	0x06E7, r24	; 0x8006e7 <UART0_Transmission_end>
    1c16:	ff 91       	pop	r31
    1c18:	ef 91       	pop	r30
    1c1a:	9f 91       	pop	r25
    1c1c:	8f 91       	pop	r24
    1c1e:	0f 90       	pop	r0
    1c20:	0b be       	out	0x3b, r0	; 59
    1c22:	0f 90       	pop	r0
    1c24:	0f be       	out	0x3f, r0	; 63
    1c26:	0f 90       	pop	r0
    1c28:	1f 90       	pop	r1
    1c2a:	18 95       	reti

00001c2c <UART0_init>:
    1c2c:	0f 93       	push	r16
    1c2e:	1f 93       	push	r17
    1c30:	8b 01       	movw	r16, r22
    1c32:	9c 01       	movw	r18, r24
    1c34:	f8 94       	cli
    1c36:	10 92 fb 09 	sts	0x09FB, r1	; 0x8009fb <UART_TxHead>
    1c3a:	10 92 fa 09 	sts	0x09FA, r1	; 0x8009fa <UART_TxTail>
    1c3e:	10 92 f9 09 	sts	0x09F9, r1	; 0x8009f9 <UART_RxHead>
    1c42:	10 92 f8 09 	sts	0x09F8, r1	; 0x8009f8 <UART_RxTail>
    1c46:	78 94       	sei
    1c48:	dc 01       	movw	r26, r24
    1c4a:	cb 01       	movw	r24, r22
    1c4c:	80 58       	subi	r24, 0x80	; 128
    1c4e:	9b 47       	sbci	r25, 0x7B	; 123
    1c50:	a1 4e       	sbci	r26, 0xE1	; 225
    1c52:	bf 4f       	sbci	r27, 0xFF	; 255
    1c54:	88 0f       	add	r24, r24
    1c56:	99 1f       	adc	r25, r25
    1c58:	aa 1f       	adc	r26, r26
    1c5a:	bb 1f       	adc	r27, r27
    1c5c:	88 0f       	add	r24, r24
    1c5e:	99 1f       	adc	r25, r25
    1c60:	aa 1f       	adc	r26, r26
    1c62:	bb 1f       	adc	r27, r27
    1c64:	bc 01       	movw	r22, r24
    1c66:	cd 01       	movw	r24, r26
    1c68:	66 0f       	add	r22, r22
    1c6a:	77 1f       	adc	r23, r23
    1c6c:	88 1f       	adc	r24, r24
    1c6e:	99 1f       	adc	r25, r25
    1c70:	00 0f       	add	r16, r16
    1c72:	11 1f       	adc	r17, r17
    1c74:	22 1f       	adc	r18, r18
    1c76:	33 1f       	adc	r19, r19
    1c78:	00 0f       	add	r16, r16
    1c7a:	11 1f       	adc	r17, r17
    1c7c:	22 1f       	adc	r18, r18
    1c7e:	33 1f       	adc	r19, r19
    1c80:	a9 01       	movw	r20, r18
    1c82:	98 01       	movw	r18, r16
    1c84:	22 0f       	add	r18, r18
    1c86:	33 1f       	adc	r19, r19
    1c88:	44 1f       	adc	r20, r20
    1c8a:	55 1f       	adc	r21, r21
    1c8c:	22 0f       	add	r18, r18
    1c8e:	33 1f       	adc	r19, r19
    1c90:	44 1f       	adc	r20, r20
    1c92:	55 1f       	adc	r21, r21
    1c94:	0e 94 e7 1e 	call	0x3dce	; 0x3dce <__udivmodsi4>
    1c98:	ba 01       	movw	r22, r20
    1c9a:	a9 01       	movw	r20, r18
    1c9c:	41 50       	subi	r20, 0x01	; 1
    1c9e:	51 09       	sbc	r21, r1
    1ca0:	61 09       	sbc	r22, r1
    1ca2:	71 09       	sbc	r23, r1
    1ca4:	57 ff       	sbrs	r21, 7
    1ca6:	06 c0       	rjmp	.+12     	; 0x1cb4 <UART0_init+0x88>
    1ca8:	82 e0       	ldi	r24, 0x02	; 2
    1caa:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
    1cae:	5f 77       	andi	r21, 0x7F	; 127
    1cb0:	66 27       	eor	r22, r22
    1cb2:	77 27       	eor	r23, r23
    1cb4:	bb 27       	eor	r27, r27
    1cb6:	a7 2f       	mov	r26, r23
    1cb8:	96 2f       	mov	r25, r22
    1cba:	85 2f       	mov	r24, r21
    1cbc:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
    1cc0:	40 93 c4 00 	sts	0x00C4, r20	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
    1cc4:	88 e9       	ldi	r24, 0x98	; 152
    1cc6:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    1cca:	86 e0       	ldi	r24, 0x06	; 6
    1ccc:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
    1cd0:	1f 91       	pop	r17
    1cd2:	0f 91       	pop	r16
    1cd4:	08 95       	ret

00001cd6 <UART0_putc>:
    1cd6:	40 91 fb 09 	lds	r20, 0x09FB	; 0x8009fb <UART_TxHead>
    1cda:	50 e0       	ldi	r21, 0x00	; 0
    1cdc:	4f 5f       	subi	r20, 0xFF	; 255
    1cde:	5f 4f       	sbci	r21, 0xFF	; 255
    1ce0:	4f 77       	andi	r20, 0x7F	; 127
    1ce2:	55 27       	eor	r21, r21
    1ce4:	20 91 fa 09 	lds	r18, 0x09FA	; 0x8009fa <UART_TxTail>
    1ce8:	30 e0       	ldi	r19, 0x00	; 0
    1cea:	42 17       	cp	r20, r18
    1cec:	53 07       	cpc	r21, r19
    1cee:	d1 f3       	breq	.-12     	; 0x1ce4 <UART0_putc+0xe>
    1cf0:	fa 01       	movw	r30, r20
    1cf2:	e4 58       	subi	r30, 0x84	; 132
    1cf4:	f5 4f       	sbci	r31, 0xF5	; 245
    1cf6:	80 83       	st	Z, r24
    1cf8:	40 93 fb 09 	sts	0x09FB, r20	; 0x8009fb <UART_TxHead>
    1cfc:	e1 ec       	ldi	r30, 0xC1	; 193
    1cfe:	f0 e0       	ldi	r31, 0x00	; 0
    1d00:	80 81       	ld	r24, Z
    1d02:	80 62       	ori	r24, 0x20	; 32
    1d04:	80 83       	st	Z, r24
    1d06:	08 95       	ret

00001d08 <UART0_OutUDec>:
    1d08:	0f 93       	push	r16
    1d0a:	1f 93       	push	r17
    1d0c:	cf 93       	push	r28
    1d0e:	df 93       	push	r29
    1d10:	6a 30       	cpi	r22, 0x0A	; 10
    1d12:	71 05       	cpc	r23, r1
    1d14:	81 05       	cpc	r24, r1
    1d16:	91 05       	cpc	r25, r1
    1d18:	58 f0       	brcs	.+22     	; 0x1d30 <UART0_OutUDec+0x28>
    1d1a:	2a e0       	ldi	r18, 0x0A	; 10
    1d1c:	30 e0       	ldi	r19, 0x00	; 0
    1d1e:	40 e0       	ldi	r20, 0x00	; 0
    1d20:	50 e0       	ldi	r21, 0x00	; 0
    1d22:	0e 94 e7 1e 	call	0x3dce	; 0x3dce <__udivmodsi4>
    1d26:	06 2f       	mov	r16, r22
    1d28:	ca 01       	movw	r24, r20
    1d2a:	b9 01       	movw	r22, r18
    1d2c:	ed df       	rcall	.-38     	; 0x1d08 <UART0_OutUDec>
    1d2e:	60 2f       	mov	r22, r16
    1d30:	80 e3       	ldi	r24, 0x30	; 48
    1d32:	86 0f       	add	r24, r22
    1d34:	d0 df       	rcall	.-96     	; 0x1cd6 <UART0_putc>
    1d36:	df 91       	pop	r29
    1d38:	cf 91       	pop	r28
    1d3a:	1f 91       	pop	r17
    1d3c:	0f 91       	pop	r16
    1d3e:	08 95       	ret

00001d40 <UART0_puts>:
    1d40:	cf 93       	push	r28
    1d42:	df 93       	push	r29
    1d44:	ec 01       	movw	r28, r24
    1d46:	88 81       	ld	r24, Y
    1d48:	88 23       	and	r24, r24
    1d4a:	29 f0       	breq	.+10     	; 0x1d56 <UART0_puts+0x16>
    1d4c:	21 96       	adiw	r28, 0x01	; 1
    1d4e:	c3 df       	rcall	.-122    	; 0x1cd6 <UART0_putc>
    1d50:	89 91       	ld	r24, Y+
    1d52:	81 11       	cpse	r24, r1
    1d54:	fc cf       	rjmp	.-8      	; 0x1d4e <UART0_puts+0xe>
    1d56:	df 91       	pop	r29
    1d58:	cf 91       	pop	r28
    1d5a:	08 95       	ret

00001d5c <__vector_36>:
    1d5c:	1f 92       	push	r1
    1d5e:	0f 92       	push	r0
    1d60:	0f b6       	in	r0, 0x3f	; 63
    1d62:	0f 92       	push	r0
    1d64:	11 24       	eor	r1, r1
    1d66:	0b b6       	in	r0, 0x3b	; 59
    1d68:	0f 92       	push	r0
    1d6a:	2f 93       	push	r18
    1d6c:	3f 93       	push	r19
    1d6e:	4f 93       	push	r20
    1d70:	5f 93       	push	r21
    1d72:	8f 93       	push	r24
    1d74:	9f 93       	push	r25
    1d76:	ef 93       	push	r30
    1d78:	ff 93       	push	r31
    1d7a:	20 91 c8 00 	lds	r18, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
    1d7e:	30 91 ce 00 	lds	r19, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    1d82:	28 71       	andi	r18, 0x18	; 24
    1d84:	80 91 f4 08 	lds	r24, 0x08F4	; 0x8008f4 <UART1_RxHead>
    1d88:	90 e0       	ldi	r25, 0x00	; 0
    1d8a:	01 96       	adiw	r24, 0x01	; 1
    1d8c:	8f 77       	andi	r24, 0x7F	; 127
    1d8e:	99 27       	eor	r25, r25
    1d90:	40 91 f3 08 	lds	r20, 0x08F3	; 0x8008f3 <UART1_RxTail>
    1d94:	50 e0       	ldi	r21, 0x00	; 0
    1d96:	84 17       	cp	r24, r20
    1d98:	95 07       	cpc	r25, r21
    1d9a:	39 f0       	breq	.+14     	; 0x1daa <__vector_36+0x4e>
    1d9c:	80 93 f4 08 	sts	0x08F4, r24	; 0x8008f4 <UART1_RxHead>
    1da0:	fc 01       	movw	r30, r24
    1da2:	e9 50       	subi	r30, 0x09	; 9
    1da4:	f7 4f       	sbci	r31, 0xF7	; 247
    1da6:	30 83       	st	Z, r19
    1da8:	01 c0       	rjmp	.+2      	; 0x1dac <__vector_36+0x50>
    1daa:	22 e0       	ldi	r18, 0x02	; 2
    1dac:	20 93 f2 08 	sts	0x08F2, r18	; 0x8008f2 <UART1_LastRxError>
    1db0:	ff 91       	pop	r31
    1db2:	ef 91       	pop	r30
    1db4:	9f 91       	pop	r25
    1db6:	8f 91       	pop	r24
    1db8:	5f 91       	pop	r21
    1dba:	4f 91       	pop	r20
    1dbc:	3f 91       	pop	r19
    1dbe:	2f 91       	pop	r18
    1dc0:	0f 90       	pop	r0
    1dc2:	0b be       	out	0x3b, r0	; 59
    1dc4:	0f 90       	pop	r0
    1dc6:	0f be       	out	0x3f, r0	; 63
    1dc8:	0f 90       	pop	r0
    1dca:	1f 90       	pop	r1
    1dcc:	18 95       	reti

00001dce <__vector_37>:
    1dce:	1f 92       	push	r1
    1dd0:	0f 92       	push	r0
    1dd2:	0f b6       	in	r0, 0x3f	; 63
    1dd4:	0f 92       	push	r0
    1dd6:	11 24       	eor	r1, r1
    1dd8:	0b b6       	in	r0, 0x3b	; 59
    1dda:	0f 92       	push	r0
    1ddc:	8f 93       	push	r24
    1dde:	9f 93       	push	r25
    1de0:	ef 93       	push	r30
    1de2:	ff 93       	push	r31
    1de4:	90 91 f6 08 	lds	r25, 0x08F6	; 0x8008f6 <UART1_TxHead>
    1de8:	80 91 f5 08 	lds	r24, 0x08F5	; 0x8008f5 <UART1_TxTail>
    1dec:	98 17       	cp	r25, r24
    1dee:	89 f0       	breq	.+34     	; 0x1e12 <__vector_37+0x44>
    1df0:	80 91 f5 08 	lds	r24, 0x08F5	; 0x8008f5 <UART1_TxTail>
    1df4:	90 e0       	ldi	r25, 0x00	; 0
    1df6:	01 96       	adiw	r24, 0x01	; 1
    1df8:	8f 77       	andi	r24, 0x7F	; 127
    1dfa:	99 27       	eor	r25, r25
    1dfc:	80 93 f5 08 	sts	0x08F5, r24	; 0x8008f5 <UART1_TxTail>
    1e00:	fc 01       	movw	r30, r24
    1e02:	e9 58       	subi	r30, 0x89	; 137
    1e04:	f6 4f       	sbci	r31, 0xF6	; 246
    1e06:	80 81       	ld	r24, Z
    1e08:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    1e0c:	10 92 e6 06 	sts	0x06E6, r1	; 0x8006e6 <UART1_Transmission_end>
    1e10:	08 c0       	rjmp	.+16     	; 0x1e22 <__vector_37+0x54>
    1e12:	e9 ec       	ldi	r30, 0xC9	; 201
    1e14:	f0 e0       	ldi	r31, 0x00	; 0
    1e16:	80 81       	ld	r24, Z
    1e18:	8f 7d       	andi	r24, 0xDF	; 223
    1e1a:	80 83       	st	Z, r24
    1e1c:	81 e0       	ldi	r24, 0x01	; 1
    1e1e:	80 93 e6 06 	sts	0x06E6, r24	; 0x8006e6 <UART1_Transmission_end>
    1e22:	ff 91       	pop	r31
    1e24:	ef 91       	pop	r30
    1e26:	9f 91       	pop	r25
    1e28:	8f 91       	pop	r24
    1e2a:	0f 90       	pop	r0
    1e2c:	0b be       	out	0x3b, r0	; 59
    1e2e:	0f 90       	pop	r0
    1e30:	0f be       	out	0x3f, r0	; 63
    1e32:	0f 90       	pop	r0
    1e34:	1f 90       	pop	r1
    1e36:	18 95       	reti

00001e38 <UART1_init>:
    1e38:	0f 93       	push	r16
    1e3a:	1f 93       	push	r17
    1e3c:	8b 01       	movw	r16, r22
    1e3e:	9c 01       	movw	r18, r24
    1e40:	f8 94       	cli
    1e42:	10 92 f6 08 	sts	0x08F6, r1	; 0x8008f6 <UART1_TxHead>
    1e46:	10 92 f5 08 	sts	0x08F5, r1	; 0x8008f5 <UART1_TxTail>
    1e4a:	10 92 f4 08 	sts	0x08F4, r1	; 0x8008f4 <UART1_RxHead>
    1e4e:	10 92 f3 08 	sts	0x08F3, r1	; 0x8008f3 <UART1_RxTail>
    1e52:	78 94       	sei
    1e54:	dc 01       	movw	r26, r24
    1e56:	cb 01       	movw	r24, r22
    1e58:	80 58       	subi	r24, 0x80	; 128
    1e5a:	9b 47       	sbci	r25, 0x7B	; 123
    1e5c:	a1 4e       	sbci	r26, 0xE1	; 225
    1e5e:	bf 4f       	sbci	r27, 0xFF	; 255
    1e60:	88 0f       	add	r24, r24
    1e62:	99 1f       	adc	r25, r25
    1e64:	aa 1f       	adc	r26, r26
    1e66:	bb 1f       	adc	r27, r27
    1e68:	88 0f       	add	r24, r24
    1e6a:	99 1f       	adc	r25, r25
    1e6c:	aa 1f       	adc	r26, r26
    1e6e:	bb 1f       	adc	r27, r27
    1e70:	bc 01       	movw	r22, r24
    1e72:	cd 01       	movw	r24, r26
    1e74:	66 0f       	add	r22, r22
    1e76:	77 1f       	adc	r23, r23
    1e78:	88 1f       	adc	r24, r24
    1e7a:	99 1f       	adc	r25, r25
    1e7c:	00 0f       	add	r16, r16
    1e7e:	11 1f       	adc	r17, r17
    1e80:	22 1f       	adc	r18, r18
    1e82:	33 1f       	adc	r19, r19
    1e84:	00 0f       	add	r16, r16
    1e86:	11 1f       	adc	r17, r17
    1e88:	22 1f       	adc	r18, r18
    1e8a:	33 1f       	adc	r19, r19
    1e8c:	a9 01       	movw	r20, r18
    1e8e:	98 01       	movw	r18, r16
    1e90:	22 0f       	add	r18, r18
    1e92:	33 1f       	adc	r19, r19
    1e94:	44 1f       	adc	r20, r20
    1e96:	55 1f       	adc	r21, r21
    1e98:	22 0f       	add	r18, r18
    1e9a:	33 1f       	adc	r19, r19
    1e9c:	44 1f       	adc	r20, r20
    1e9e:	55 1f       	adc	r21, r21
    1ea0:	0e 94 e7 1e 	call	0x3dce	; 0x3dce <__udivmodsi4>
    1ea4:	ba 01       	movw	r22, r20
    1ea6:	a9 01       	movw	r20, r18
    1ea8:	41 50       	subi	r20, 0x01	; 1
    1eaa:	51 09       	sbc	r21, r1
    1eac:	61 09       	sbc	r22, r1
    1eae:	71 09       	sbc	r23, r1
    1eb0:	57 ff       	sbrs	r21, 7
    1eb2:	06 c0       	rjmp	.+12     	; 0x1ec0 <UART1_init+0x88>
    1eb4:	82 e0       	ldi	r24, 0x02	; 2
    1eb6:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
    1eba:	5f 77       	andi	r21, 0x7F	; 127
    1ebc:	66 27       	eor	r22, r22
    1ebe:	77 27       	eor	r23, r23
    1ec0:	bb 27       	eor	r27, r27
    1ec2:	a7 2f       	mov	r26, r23
    1ec4:	96 2f       	mov	r25, r22
    1ec6:	85 2f       	mov	r24, r21
    1ec8:	80 93 cd 00 	sts	0x00CD, r24	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7000cd>
    1ecc:	40 93 cc 00 	sts	0x00CC, r20	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7000cc>
    1ed0:	88 e9       	ldi	r24, 0x98	; 152
    1ed2:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7000c9>
    1ed6:	86 e0       	ldi	r24, 0x06	; 6
    1ed8:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7000ca>
    1edc:	1f 91       	pop	r17
    1ede:	0f 91       	pop	r16
    1ee0:	08 95       	ret

00001ee2 <UART1_getc>:
    1ee2:	f8 94       	cli
    1ee4:	90 91 f4 08 	lds	r25, 0x08F4	; 0x8008f4 <UART1_RxHead>
    1ee8:	80 91 f3 08 	lds	r24, 0x08F3	; 0x8008f3 <UART1_RxTail>
    1eec:	98 13       	cpse	r25, r24
    1eee:	04 c0       	rjmp	.+8      	; 0x1ef8 <UART1_getc+0x16>
    1ef0:	78 94       	sei
    1ef2:	80 e0       	ldi	r24, 0x00	; 0
    1ef4:	91 e0       	ldi	r25, 0x01	; 1
    1ef6:	08 95       	ret
    1ef8:	80 91 f3 08 	lds	r24, 0x08F3	; 0x8008f3 <UART1_RxTail>
    1efc:	90 e0       	ldi	r25, 0x00	; 0
    1efe:	01 96       	adiw	r24, 0x01	; 1
    1f00:	8f 77       	andi	r24, 0x7F	; 127
    1f02:	99 27       	eor	r25, r25
    1f04:	80 93 f3 08 	sts	0x08F3, r24	; 0x8008f3 <UART1_RxTail>
    1f08:	78 94       	sei
    1f0a:	fc 01       	movw	r30, r24
    1f0c:	e9 50       	subi	r30, 0x09	; 9
    1f0e:	f7 4f       	sbci	r31, 0xF7	; 247
    1f10:	20 81       	ld	r18, Z
    1f12:	80 91 f2 08 	lds	r24, 0x08F2	; 0x8008f2 <UART1_LastRxError>
    1f16:	90 e0       	ldi	r25, 0x00	; 0
    1f18:	98 2f       	mov	r25, r24
    1f1a:	88 27       	eor	r24, r24
    1f1c:	82 0f       	add	r24, r18
    1f1e:	91 1d       	adc	r25, r1
    1f20:	08 95       	ret

00001f22 <UART1_putc>:
    1f22:	40 91 f6 08 	lds	r20, 0x08F6	; 0x8008f6 <UART1_TxHead>
    1f26:	50 e0       	ldi	r21, 0x00	; 0
    1f28:	4f 5f       	subi	r20, 0xFF	; 255
    1f2a:	5f 4f       	sbci	r21, 0xFF	; 255
    1f2c:	4f 77       	andi	r20, 0x7F	; 127
    1f2e:	55 27       	eor	r21, r21
    1f30:	20 91 f5 08 	lds	r18, 0x08F5	; 0x8008f5 <UART1_TxTail>
    1f34:	30 e0       	ldi	r19, 0x00	; 0
    1f36:	42 17       	cp	r20, r18
    1f38:	53 07       	cpc	r21, r19
    1f3a:	d1 f3       	breq	.-12     	; 0x1f30 <UART1_putc+0xe>
    1f3c:	fa 01       	movw	r30, r20
    1f3e:	e9 58       	subi	r30, 0x89	; 137
    1f40:	f6 4f       	sbci	r31, 0xF6	; 246
    1f42:	80 83       	st	Z, r24
    1f44:	40 93 f6 08 	sts	0x08F6, r20	; 0x8008f6 <UART1_TxHead>
    1f48:	e9 ec       	ldi	r30, 0xC9	; 201
    1f4a:	f0 e0       	ldi	r31, 0x00	; 0
    1f4c:	80 81       	ld	r24, Z
    1f4e:	80 62       	ori	r24, 0x20	; 32
    1f50:	80 83       	st	Z, r24
    1f52:	08 95       	ret

00001f54 <UART1_available>:
    1f54:	f8 94       	cli
    1f56:	80 91 f4 08 	lds	r24, 0x08F4	; 0x8008f4 <UART1_RxHead>
    1f5a:	20 91 f3 08 	lds	r18, 0x08F3	; 0x8008f3 <UART1_RxTail>
    1f5e:	78 94       	sei
    1f60:	90 e0       	ldi	r25, 0x00	; 0
    1f62:	80 58       	subi	r24, 0x80	; 128
    1f64:	9f 4f       	sbci	r25, 0xFF	; 255
    1f66:	82 1b       	sub	r24, r18
    1f68:	91 09       	sbc	r25, r1
    1f6a:	8f 77       	andi	r24, 0x7F	; 127
    1f6c:	99 27       	eor	r25, r25
    1f6e:	08 95       	ret

00001f70 <UART1_flush>:
    1f70:	80 91 e6 06 	lds	r24, 0x06E6	; 0x8006e6 <UART1_Transmission_end>
    1f74:	88 23       	and	r24, r24
    1f76:	e1 f3       	breq	.-8      	; 0x1f70 <UART1_flush>
    1f78:	08 95       	ret

00001f7a <__vector_51>:
    1f7a:	1f 92       	push	r1
    1f7c:	0f 92       	push	r0
    1f7e:	0f b6       	in	r0, 0x3f	; 63
    1f80:	0f 92       	push	r0
    1f82:	11 24       	eor	r1, r1
    1f84:	0b b6       	in	r0, 0x3b	; 59
    1f86:	0f 92       	push	r0
    1f88:	2f 93       	push	r18
    1f8a:	3f 93       	push	r19
    1f8c:	4f 93       	push	r20
    1f8e:	5f 93       	push	r21
    1f90:	8f 93       	push	r24
    1f92:	9f 93       	push	r25
    1f94:	ef 93       	push	r30
    1f96:	ff 93       	push	r31
    1f98:	20 91 d0 00 	lds	r18, 0x00D0	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7000d0>
    1f9c:	30 91 d6 00 	lds	r19, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    1fa0:	28 71       	andi	r18, 0x18	; 24
    1fa2:	80 91 ef 07 	lds	r24, 0x07EF	; 0x8007ef <UART2_RxHead>
    1fa6:	90 e0       	ldi	r25, 0x00	; 0
    1fa8:	01 96       	adiw	r24, 0x01	; 1
    1faa:	8f 77       	andi	r24, 0x7F	; 127
    1fac:	99 27       	eor	r25, r25
    1fae:	40 91 ee 07 	lds	r20, 0x07EE	; 0x8007ee <UART2_RxTail>
    1fb2:	50 e0       	ldi	r21, 0x00	; 0
    1fb4:	84 17       	cp	r24, r20
    1fb6:	95 07       	cpc	r25, r21
    1fb8:	39 f0       	breq	.+14     	; 0x1fc8 <__vector_51+0x4e>
    1fba:	80 93 ef 07 	sts	0x07EF, r24	; 0x8007ef <UART2_RxHead>
    1fbe:	fc 01       	movw	r30, r24
    1fc0:	ee 50       	subi	r30, 0x0E	; 14
    1fc2:	f8 4f       	sbci	r31, 0xF8	; 248
    1fc4:	30 83       	st	Z, r19
    1fc6:	01 c0       	rjmp	.+2      	; 0x1fca <__vector_51+0x50>
    1fc8:	22 e0       	ldi	r18, 0x02	; 2
    1fca:	20 93 ed 07 	sts	0x07ED, r18	; 0x8007ed <UART2_LastRxError>
    1fce:	ff 91       	pop	r31
    1fd0:	ef 91       	pop	r30
    1fd2:	9f 91       	pop	r25
    1fd4:	8f 91       	pop	r24
    1fd6:	5f 91       	pop	r21
    1fd8:	4f 91       	pop	r20
    1fda:	3f 91       	pop	r19
    1fdc:	2f 91       	pop	r18
    1fde:	0f 90       	pop	r0
    1fe0:	0b be       	out	0x3b, r0	; 59
    1fe2:	0f 90       	pop	r0
    1fe4:	0f be       	out	0x3f, r0	; 63
    1fe6:	0f 90       	pop	r0
    1fe8:	1f 90       	pop	r1
    1fea:	18 95       	reti

00001fec <__vector_52>:
    1fec:	1f 92       	push	r1
    1fee:	0f 92       	push	r0
    1ff0:	0f b6       	in	r0, 0x3f	; 63
    1ff2:	0f 92       	push	r0
    1ff4:	11 24       	eor	r1, r1
    1ff6:	0b b6       	in	r0, 0x3b	; 59
    1ff8:	0f 92       	push	r0
    1ffa:	8f 93       	push	r24
    1ffc:	9f 93       	push	r25
    1ffe:	ef 93       	push	r30
    2000:	ff 93       	push	r31
    2002:	90 91 f1 07 	lds	r25, 0x07F1	; 0x8007f1 <UART2_TxHead>
    2006:	80 91 f0 07 	lds	r24, 0x07F0	; 0x8007f0 <UART2_TxTail>
    200a:	98 17       	cp	r25, r24
    200c:	89 f0       	breq	.+34     	; 0x2030 <__vector_52+0x44>
    200e:	80 91 f0 07 	lds	r24, 0x07F0	; 0x8007f0 <UART2_TxTail>
    2012:	90 e0       	ldi	r25, 0x00	; 0
    2014:	01 96       	adiw	r24, 0x01	; 1
    2016:	8f 77       	andi	r24, 0x7F	; 127
    2018:	99 27       	eor	r25, r25
    201a:	80 93 f0 07 	sts	0x07F0, r24	; 0x8007f0 <UART2_TxTail>
    201e:	fc 01       	movw	r30, r24
    2020:	ee 58       	subi	r30, 0x8E	; 142
    2022:	f7 4f       	sbci	r31, 0xF7	; 247
    2024:	80 81       	ld	r24, Z
    2026:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    202a:	10 92 e5 06 	sts	0x06E5, r1	; 0x8006e5 <UART2_Transmission_end>
    202e:	08 c0       	rjmp	.+16     	; 0x2040 <__vector_52+0x54>
    2030:	e1 ed       	ldi	r30, 0xD1	; 209
    2032:	f0 e0       	ldi	r31, 0x00	; 0
    2034:	80 81       	ld	r24, Z
    2036:	8f 7d       	andi	r24, 0xDF	; 223
    2038:	80 83       	st	Z, r24
    203a:	81 e0       	ldi	r24, 0x01	; 1
    203c:	80 93 e5 06 	sts	0x06E5, r24	; 0x8006e5 <UART2_Transmission_end>
    2040:	ff 91       	pop	r31
    2042:	ef 91       	pop	r30
    2044:	9f 91       	pop	r25
    2046:	8f 91       	pop	r24
    2048:	0f 90       	pop	r0
    204a:	0b be       	out	0x3b, r0	; 59
    204c:	0f 90       	pop	r0
    204e:	0f be       	out	0x3f, r0	; 63
    2050:	0f 90       	pop	r0
    2052:	1f 90       	pop	r1
    2054:	18 95       	reti

00002056 <UART2_init>:
    2056:	0f 93       	push	r16
    2058:	1f 93       	push	r17
    205a:	8b 01       	movw	r16, r22
    205c:	9c 01       	movw	r18, r24
    205e:	f8 94       	cli
    2060:	10 92 f1 07 	sts	0x07F1, r1	; 0x8007f1 <UART2_TxHead>
    2064:	10 92 f0 07 	sts	0x07F0, r1	; 0x8007f0 <UART2_TxTail>
    2068:	10 92 ef 07 	sts	0x07EF, r1	; 0x8007ef <UART2_RxHead>
    206c:	10 92 ee 07 	sts	0x07EE, r1	; 0x8007ee <UART2_RxTail>
    2070:	78 94       	sei
    2072:	dc 01       	movw	r26, r24
    2074:	cb 01       	movw	r24, r22
    2076:	80 58       	subi	r24, 0x80	; 128
    2078:	9b 47       	sbci	r25, 0x7B	; 123
    207a:	a1 4e       	sbci	r26, 0xE1	; 225
    207c:	bf 4f       	sbci	r27, 0xFF	; 255
    207e:	88 0f       	add	r24, r24
    2080:	99 1f       	adc	r25, r25
    2082:	aa 1f       	adc	r26, r26
    2084:	bb 1f       	adc	r27, r27
    2086:	88 0f       	add	r24, r24
    2088:	99 1f       	adc	r25, r25
    208a:	aa 1f       	adc	r26, r26
    208c:	bb 1f       	adc	r27, r27
    208e:	bc 01       	movw	r22, r24
    2090:	cd 01       	movw	r24, r26
    2092:	66 0f       	add	r22, r22
    2094:	77 1f       	adc	r23, r23
    2096:	88 1f       	adc	r24, r24
    2098:	99 1f       	adc	r25, r25
    209a:	00 0f       	add	r16, r16
    209c:	11 1f       	adc	r17, r17
    209e:	22 1f       	adc	r18, r18
    20a0:	33 1f       	adc	r19, r19
    20a2:	00 0f       	add	r16, r16
    20a4:	11 1f       	adc	r17, r17
    20a6:	22 1f       	adc	r18, r18
    20a8:	33 1f       	adc	r19, r19
    20aa:	a9 01       	movw	r20, r18
    20ac:	98 01       	movw	r18, r16
    20ae:	22 0f       	add	r18, r18
    20b0:	33 1f       	adc	r19, r19
    20b2:	44 1f       	adc	r20, r20
    20b4:	55 1f       	adc	r21, r21
    20b6:	22 0f       	add	r18, r18
    20b8:	33 1f       	adc	r19, r19
    20ba:	44 1f       	adc	r20, r20
    20bc:	55 1f       	adc	r21, r21
    20be:	0e 94 e7 1e 	call	0x3dce	; 0x3dce <__udivmodsi4>
    20c2:	ba 01       	movw	r22, r20
    20c4:	a9 01       	movw	r20, r18
    20c6:	41 50       	subi	r20, 0x01	; 1
    20c8:	51 09       	sbc	r21, r1
    20ca:	61 09       	sbc	r22, r1
    20cc:	71 09       	sbc	r23, r1
    20ce:	57 ff       	sbrs	r21, 7
    20d0:	06 c0       	rjmp	.+12     	; 0x20de <UART2_init+0x88>
    20d2:	82 e0       	ldi	r24, 0x02	; 2
    20d4:	80 93 d0 00 	sts	0x00D0, r24	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7000d0>
    20d8:	5f 77       	andi	r21, 0x7F	; 127
    20da:	66 27       	eor	r22, r22
    20dc:	77 27       	eor	r23, r23
    20de:	bb 27       	eor	r27, r27
    20e0:	a7 2f       	mov	r26, r23
    20e2:	96 2f       	mov	r25, r22
    20e4:	85 2f       	mov	r24, r21
    20e6:	80 93 d5 00 	sts	0x00D5, r24	; 0x8000d5 <__TEXT_REGION_LENGTH__+0x7000d5>
    20ea:	40 93 d4 00 	sts	0x00D4, r20	; 0x8000d4 <__TEXT_REGION_LENGTH__+0x7000d4>
    20ee:	88 e9       	ldi	r24, 0x98	; 152
    20f0:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7000d1>
    20f4:	86 e0       	ldi	r24, 0x06	; 6
    20f6:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7000d2>
    20fa:	1f 91       	pop	r17
    20fc:	0f 91       	pop	r16
    20fe:	08 95       	ret

00002100 <UART2_getc>:
    2100:	90 91 ef 07 	lds	r25, 0x07EF	; 0x8007ef <UART2_RxHead>
    2104:	80 91 ee 07 	lds	r24, 0x07EE	; 0x8007ee <UART2_RxTail>
    2108:	98 17       	cp	r25, r24
    210a:	a1 f0       	breq	.+40     	; 0x2134 <UART2_getc+0x34>
    210c:	80 91 ee 07 	lds	r24, 0x07EE	; 0x8007ee <UART2_RxTail>
    2110:	90 e0       	ldi	r25, 0x00	; 0
    2112:	01 96       	adiw	r24, 0x01	; 1
    2114:	8f 77       	andi	r24, 0x7F	; 127
    2116:	99 27       	eor	r25, r25
    2118:	80 93 ee 07 	sts	0x07EE, r24	; 0x8007ee <UART2_RxTail>
    211c:	fc 01       	movw	r30, r24
    211e:	ee 50       	subi	r30, 0x0E	; 14
    2120:	f8 4f       	sbci	r31, 0xF8	; 248
    2122:	20 81       	ld	r18, Z
    2124:	80 91 ed 07 	lds	r24, 0x07ED	; 0x8007ed <UART2_LastRxError>
    2128:	90 e0       	ldi	r25, 0x00	; 0
    212a:	98 2f       	mov	r25, r24
    212c:	88 27       	eor	r24, r24
    212e:	82 0f       	add	r24, r18
    2130:	91 1d       	adc	r25, r1
    2132:	08 95       	ret
    2134:	80 e0       	ldi	r24, 0x00	; 0
    2136:	91 e0       	ldi	r25, 0x01	; 1
    2138:	08 95       	ret

0000213a <UART2_putc>:
    213a:	40 91 f1 07 	lds	r20, 0x07F1	; 0x8007f1 <UART2_TxHead>
    213e:	50 e0       	ldi	r21, 0x00	; 0
    2140:	4f 5f       	subi	r20, 0xFF	; 255
    2142:	5f 4f       	sbci	r21, 0xFF	; 255
    2144:	4f 77       	andi	r20, 0x7F	; 127
    2146:	55 27       	eor	r21, r21
    2148:	20 91 f0 07 	lds	r18, 0x07F0	; 0x8007f0 <UART2_TxTail>
    214c:	30 e0       	ldi	r19, 0x00	; 0
    214e:	42 17       	cp	r20, r18
    2150:	53 07       	cpc	r21, r19
    2152:	d1 f3       	breq	.-12     	; 0x2148 <UART2_putc+0xe>
    2154:	fa 01       	movw	r30, r20
    2156:	ee 58       	subi	r30, 0x8E	; 142
    2158:	f7 4f       	sbci	r31, 0xF7	; 247
    215a:	80 83       	st	Z, r24
    215c:	40 93 f1 07 	sts	0x07F1, r20	; 0x8007f1 <UART2_TxHead>
    2160:	e1 ed       	ldi	r30, 0xD1	; 209
    2162:	f0 e0       	ldi	r31, 0x00	; 0
    2164:	80 81       	ld	r24, Z
    2166:	80 62       	ori	r24, 0x20	; 32
    2168:	80 83       	st	Z, r24
    216a:	08 95       	ret

0000216c <UART2_available>:
    216c:	f8 94       	cli
    216e:	80 91 ef 07 	lds	r24, 0x07EF	; 0x8007ef <UART2_RxHead>
    2172:	20 91 ee 07 	lds	r18, 0x07EE	; 0x8007ee <UART2_RxTail>
    2176:	78 94       	sei
    2178:	90 e0       	ldi	r25, 0x00	; 0
    217a:	80 58       	subi	r24, 0x80	; 128
    217c:	9f 4f       	sbci	r25, 0xFF	; 255
    217e:	82 1b       	sub	r24, r18
    2180:	91 09       	sbc	r25, r1
    2182:	8f 77       	andi	r24, 0x7F	; 127
    2184:	99 27       	eor	r25, r25
    2186:	08 95       	ret

00002188 <UART2_flush>:
    2188:	80 91 e5 06 	lds	r24, 0x06E5	; 0x8006e5 <UART2_Transmission_end>
    218c:	88 23       	and	r24, r24
    218e:	e1 f3       	breq	.-8      	; 0x2188 <UART2_flush>
    2190:	08 95       	ret

00002192 <__vector_54>:
    2192:	1f 92       	push	r1
    2194:	0f 92       	push	r0
    2196:	0f b6       	in	r0, 0x3f	; 63
    2198:	0f 92       	push	r0
    219a:	11 24       	eor	r1, r1
    219c:	0b b6       	in	r0, 0x3b	; 59
    219e:	0f 92       	push	r0
    21a0:	2f 93       	push	r18
    21a2:	3f 93       	push	r19
    21a4:	4f 93       	push	r20
    21a6:	5f 93       	push	r21
    21a8:	8f 93       	push	r24
    21aa:	9f 93       	push	r25
    21ac:	ef 93       	push	r30
    21ae:	ff 93       	push	r31
    21b0:	20 91 30 01 	lds	r18, 0x0130	; 0x800130 <__TEXT_REGION_LENGTH__+0x700130>
    21b4:	30 91 36 01 	lds	r19, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    21b8:	28 71       	andi	r18, 0x18	; 24
    21ba:	80 91 ea 06 	lds	r24, 0x06EA	; 0x8006ea <UART3_RxHead>
    21be:	90 e0       	ldi	r25, 0x00	; 0
    21c0:	01 96       	adiw	r24, 0x01	; 1
    21c2:	8f 77       	andi	r24, 0x7F	; 127
    21c4:	99 27       	eor	r25, r25
    21c6:	40 91 e9 06 	lds	r20, 0x06E9	; 0x8006e9 <UART3_RxTail>
    21ca:	50 e0       	ldi	r21, 0x00	; 0
    21cc:	84 17       	cp	r24, r20
    21ce:	95 07       	cpc	r25, r21
    21d0:	39 f0       	breq	.+14     	; 0x21e0 <__vector_54+0x4e>
    21d2:	80 93 ea 06 	sts	0x06EA, r24	; 0x8006ea <UART3_RxHead>
    21d6:	fc 01       	movw	r30, r24
    21d8:	e3 51       	subi	r30, 0x13	; 19
    21da:	f9 4f       	sbci	r31, 0xF9	; 249
    21dc:	30 83       	st	Z, r19
    21de:	01 c0       	rjmp	.+2      	; 0x21e2 <__vector_54+0x50>
    21e0:	22 e0       	ldi	r18, 0x02	; 2
    21e2:	20 93 e8 06 	sts	0x06E8, r18	; 0x8006e8 <UART3_LastRxError>
    21e6:	ff 91       	pop	r31
    21e8:	ef 91       	pop	r30
    21ea:	9f 91       	pop	r25
    21ec:	8f 91       	pop	r24
    21ee:	5f 91       	pop	r21
    21f0:	4f 91       	pop	r20
    21f2:	3f 91       	pop	r19
    21f4:	2f 91       	pop	r18
    21f6:	0f 90       	pop	r0
    21f8:	0b be       	out	0x3b, r0	; 59
    21fa:	0f 90       	pop	r0
    21fc:	0f be       	out	0x3f, r0	; 63
    21fe:	0f 90       	pop	r0
    2200:	1f 90       	pop	r1
    2202:	18 95       	reti

00002204 <__vector_55>:
    2204:	1f 92       	push	r1
    2206:	0f 92       	push	r0
    2208:	0f b6       	in	r0, 0x3f	; 63
    220a:	0f 92       	push	r0
    220c:	11 24       	eor	r1, r1
    220e:	0b b6       	in	r0, 0x3b	; 59
    2210:	0f 92       	push	r0
    2212:	8f 93       	push	r24
    2214:	9f 93       	push	r25
    2216:	ef 93       	push	r30
    2218:	ff 93       	push	r31
    221a:	90 91 ec 06 	lds	r25, 0x06EC	; 0x8006ec <UART3_TxHead>
    221e:	80 91 eb 06 	lds	r24, 0x06EB	; 0x8006eb <UART3_TxTail>
    2222:	98 17       	cp	r25, r24
    2224:	89 f0       	breq	.+34     	; 0x2248 <__vector_55+0x44>
    2226:	80 91 eb 06 	lds	r24, 0x06EB	; 0x8006eb <UART3_TxTail>
    222a:	90 e0       	ldi	r25, 0x00	; 0
    222c:	01 96       	adiw	r24, 0x01	; 1
    222e:	8f 77       	andi	r24, 0x7F	; 127
    2230:	99 27       	eor	r25, r25
    2232:	80 93 eb 06 	sts	0x06EB, r24	; 0x8006eb <UART3_TxTail>
    2236:	fc 01       	movw	r30, r24
    2238:	e3 59       	subi	r30, 0x93	; 147
    223a:	f8 4f       	sbci	r31, 0xF8	; 248
    223c:	80 81       	ld	r24, Z
    223e:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    2242:	10 92 e4 06 	sts	0x06E4, r1	; 0x8006e4 <UART3_Transmission_end>
    2246:	08 c0       	rjmp	.+16     	; 0x2258 <__vector_55+0x54>
    2248:	e1 e3       	ldi	r30, 0x31	; 49
    224a:	f1 e0       	ldi	r31, 0x01	; 1
    224c:	80 81       	ld	r24, Z
    224e:	8f 7d       	andi	r24, 0xDF	; 223
    2250:	80 83       	st	Z, r24
    2252:	81 e0       	ldi	r24, 0x01	; 1
    2254:	80 93 e4 06 	sts	0x06E4, r24	; 0x8006e4 <UART3_Transmission_end>
    2258:	ff 91       	pop	r31
    225a:	ef 91       	pop	r30
    225c:	9f 91       	pop	r25
    225e:	8f 91       	pop	r24
    2260:	0f 90       	pop	r0
    2262:	0b be       	out	0x3b, r0	; 59
    2264:	0f 90       	pop	r0
    2266:	0f be       	out	0x3f, r0	; 63
    2268:	0f 90       	pop	r0
    226a:	1f 90       	pop	r1
    226c:	18 95       	reti

0000226e <UART3_init>:
    226e:	0f 93       	push	r16
    2270:	1f 93       	push	r17
    2272:	8b 01       	movw	r16, r22
    2274:	9c 01       	movw	r18, r24
    2276:	f8 94       	cli
    2278:	10 92 ec 06 	sts	0x06EC, r1	; 0x8006ec <UART3_TxHead>
    227c:	10 92 eb 06 	sts	0x06EB, r1	; 0x8006eb <UART3_TxTail>
    2280:	10 92 ea 06 	sts	0x06EA, r1	; 0x8006ea <UART3_RxHead>
    2284:	10 92 e9 06 	sts	0x06E9, r1	; 0x8006e9 <UART3_RxTail>
    2288:	78 94       	sei
    228a:	dc 01       	movw	r26, r24
    228c:	cb 01       	movw	r24, r22
    228e:	80 58       	subi	r24, 0x80	; 128
    2290:	9b 47       	sbci	r25, 0x7B	; 123
    2292:	a1 4e       	sbci	r26, 0xE1	; 225
    2294:	bf 4f       	sbci	r27, 0xFF	; 255
    2296:	88 0f       	add	r24, r24
    2298:	99 1f       	adc	r25, r25
    229a:	aa 1f       	adc	r26, r26
    229c:	bb 1f       	adc	r27, r27
    229e:	88 0f       	add	r24, r24
    22a0:	99 1f       	adc	r25, r25
    22a2:	aa 1f       	adc	r26, r26
    22a4:	bb 1f       	adc	r27, r27
    22a6:	bc 01       	movw	r22, r24
    22a8:	cd 01       	movw	r24, r26
    22aa:	66 0f       	add	r22, r22
    22ac:	77 1f       	adc	r23, r23
    22ae:	88 1f       	adc	r24, r24
    22b0:	99 1f       	adc	r25, r25
    22b2:	00 0f       	add	r16, r16
    22b4:	11 1f       	adc	r17, r17
    22b6:	22 1f       	adc	r18, r18
    22b8:	33 1f       	adc	r19, r19
    22ba:	00 0f       	add	r16, r16
    22bc:	11 1f       	adc	r17, r17
    22be:	22 1f       	adc	r18, r18
    22c0:	33 1f       	adc	r19, r19
    22c2:	a9 01       	movw	r20, r18
    22c4:	98 01       	movw	r18, r16
    22c6:	22 0f       	add	r18, r18
    22c8:	33 1f       	adc	r19, r19
    22ca:	44 1f       	adc	r20, r20
    22cc:	55 1f       	adc	r21, r21
    22ce:	22 0f       	add	r18, r18
    22d0:	33 1f       	adc	r19, r19
    22d2:	44 1f       	adc	r20, r20
    22d4:	55 1f       	adc	r21, r21
    22d6:	0e 94 e7 1e 	call	0x3dce	; 0x3dce <__udivmodsi4>
    22da:	ba 01       	movw	r22, r20
    22dc:	a9 01       	movw	r20, r18
    22de:	41 50       	subi	r20, 0x01	; 1
    22e0:	51 09       	sbc	r21, r1
    22e2:	61 09       	sbc	r22, r1
    22e4:	71 09       	sbc	r23, r1
    22e6:	57 ff       	sbrs	r21, 7
    22e8:	06 c0       	rjmp	.+12     	; 0x22f6 <UART3_init+0x88>
    22ea:	82 e0       	ldi	r24, 0x02	; 2
    22ec:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <__TEXT_REGION_LENGTH__+0x700130>
    22f0:	5f 77       	andi	r21, 0x7F	; 127
    22f2:	66 27       	eor	r22, r22
    22f4:	77 27       	eor	r23, r23
    22f6:	bb 27       	eor	r27, r27
    22f8:	a7 2f       	mov	r26, r23
    22fa:	96 2f       	mov	r25, r22
    22fc:	85 2f       	mov	r24, r21
    22fe:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <__TEXT_REGION_LENGTH__+0x700135>
    2302:	40 93 34 01 	sts	0x0134, r20	; 0x800134 <__TEXT_REGION_LENGTH__+0x700134>
    2306:	88 e9       	ldi	r24, 0x98	; 152
    2308:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <__TEXT_REGION_LENGTH__+0x700131>
    230c:	86 e0       	ldi	r24, 0x06	; 6
    230e:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <__TEXT_REGION_LENGTH__+0x700132>
    2312:	1f 91       	pop	r17
    2314:	0f 91       	pop	r16
    2316:	08 95       	ret

00002318 <UART3_getc>:
    2318:	90 91 ea 06 	lds	r25, 0x06EA	; 0x8006ea <UART3_RxHead>
    231c:	80 91 e9 06 	lds	r24, 0x06E9	; 0x8006e9 <UART3_RxTail>
    2320:	98 17       	cp	r25, r24
    2322:	a1 f0       	breq	.+40     	; 0x234c <UART3_getc+0x34>
    2324:	80 91 e9 06 	lds	r24, 0x06E9	; 0x8006e9 <UART3_RxTail>
    2328:	90 e0       	ldi	r25, 0x00	; 0
    232a:	01 96       	adiw	r24, 0x01	; 1
    232c:	8f 77       	andi	r24, 0x7F	; 127
    232e:	99 27       	eor	r25, r25
    2330:	80 93 e9 06 	sts	0x06E9, r24	; 0x8006e9 <UART3_RxTail>
    2334:	fc 01       	movw	r30, r24
    2336:	e3 51       	subi	r30, 0x13	; 19
    2338:	f9 4f       	sbci	r31, 0xF9	; 249
    233a:	20 81       	ld	r18, Z
    233c:	80 91 e8 06 	lds	r24, 0x06E8	; 0x8006e8 <UART3_LastRxError>
    2340:	90 e0       	ldi	r25, 0x00	; 0
    2342:	98 2f       	mov	r25, r24
    2344:	88 27       	eor	r24, r24
    2346:	82 0f       	add	r24, r18
    2348:	91 1d       	adc	r25, r1
    234a:	08 95       	ret
    234c:	80 e0       	ldi	r24, 0x00	; 0
    234e:	91 e0       	ldi	r25, 0x01	; 1
    2350:	08 95       	ret

00002352 <UART3_putc>:
    2352:	40 91 ec 06 	lds	r20, 0x06EC	; 0x8006ec <UART3_TxHead>
    2356:	50 e0       	ldi	r21, 0x00	; 0
    2358:	4f 5f       	subi	r20, 0xFF	; 255
    235a:	5f 4f       	sbci	r21, 0xFF	; 255
    235c:	4f 77       	andi	r20, 0x7F	; 127
    235e:	55 27       	eor	r21, r21
    2360:	20 91 eb 06 	lds	r18, 0x06EB	; 0x8006eb <UART3_TxTail>
    2364:	30 e0       	ldi	r19, 0x00	; 0
    2366:	42 17       	cp	r20, r18
    2368:	53 07       	cpc	r21, r19
    236a:	d1 f3       	breq	.-12     	; 0x2360 <UART3_putc+0xe>
    236c:	fa 01       	movw	r30, r20
    236e:	e3 59       	subi	r30, 0x93	; 147
    2370:	f8 4f       	sbci	r31, 0xF8	; 248
    2372:	80 83       	st	Z, r24
    2374:	40 93 ec 06 	sts	0x06EC, r20	; 0x8006ec <UART3_TxHead>
    2378:	e1 e3       	ldi	r30, 0x31	; 49
    237a:	f1 e0       	ldi	r31, 0x01	; 1
    237c:	80 81       	ld	r24, Z
    237e:	80 62       	ori	r24, 0x20	; 32
    2380:	80 83       	st	Z, r24
    2382:	08 95       	ret

00002384 <UART3_available>:
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2384:	f8 94       	cli
uint16_t UART3_available(void)
{
	uint16_t ret;
	
	ATOMIC_BLOCK(ATOMIC_FORCEON) {
		ret = (UART_RX3_BUFFER_SIZE + UART3_RxHead - UART3_RxTail) & UART_RX3_BUFFER_MASK;
    2386:	80 91 ea 06 	lds	r24, 0x06EA	; 0x8006ea <UART3_RxHead>
    238a:	20 91 e9 06 	lds	r18, 0x06E9	; 0x8006e9 <UART3_RxTail>
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
    238e:	78 94       	sei
	}
	return ret;
    2390:	90 e0       	ldi	r25, 0x00	; 0
    2392:	80 58       	subi	r24, 0x80	; 128
    2394:	9f 4f       	sbci	r25, 0xFF	; 255
    2396:	82 1b       	sub	r24, r18
    2398:	91 09       	sbc	r25, r1
} /* UART3_available */
    239a:	8f 77       	andi	r24, 0x7F	; 127
    239c:	99 27       	eor	r25, r25
    239e:	08 95       	ret

000023a0 <UART3_flush>:
void UART3_flush(void)
{
//	ATOMIC_BLOCK(ATOMIC_FORCEON) {
//		UART3_RxHead = UART3_RxTail;
//	} commented by mohab
	while(0 == UART3_Transmission_end);
    23a0:	80 91 e4 06 	lds	r24, 0x06E4	; 0x8006e4 <UART3_Transmission_end>
    23a4:	88 23       	and	r24, r24
    23a6:	e1 f3       	breq	.-8      	; 0x23a0 <UART3_flush>
} /* UART3_flush */
    23a8:	08 95       	ret

000023aa <RTE_drum_init>:


/*static uint16_t Conveyor_speed;*/
static uint16_t Drum_speed = 0;

void RTE_drum_init(void){
    23aa:	08 95       	ret

000023ac <RTE_invertersetting_init>:

static SemaphoreHandle_t Sema_Time_second_handle;
static StaticSemaphore_t Sema_Time_second_Buffer;
static uint16_t Time_second;

void RTE_invertersetting_init(void){
    23ac:	0f 93       	push	r16
	Sema_Gear_ratio_handle = xSemaphoreCreateBinaryStatic(&Sema_Gear_ratio_Buffer);
    23ae:	03 e0       	ldi	r16, 0x03	; 3
    23b0:	21 ea       	ldi	r18, 0xA1	; 161
    23b2:	3b e0       	ldi	r19, 0x0B	; 11
    23b4:	40 e0       	ldi	r20, 0x00	; 0
    23b6:	50 e0       	ldi	r21, 0x00	; 0
    23b8:	60 e0       	ldi	r22, 0x00	; 0
    23ba:	81 e0       	ldi	r24, 0x01	; 1
    23bc:	aa d3       	rcall	.+1876   	; 0x2b12 <xQueueGenericCreateStatic>
    23be:	90 93 c1 0b 	sts	0x0BC1, r25	; 0x800bc1 <Sema_Gear_ratio_handle+0x1>
    23c2:	80 93 c0 0b 	sts	0x0BC0, r24	; 0x800bc0 <Sema_Gear_ratio_handle>
	Sema_RPM_max_handle = xSemaphoreCreateBinaryStatic(&Sema_RPM_max_Buffer);
    23c6:	20 e8       	ldi	r18, 0x80	; 128
    23c8:	3b e0       	ldi	r19, 0x0B	; 11
    23ca:	40 e0       	ldi	r20, 0x00	; 0
    23cc:	50 e0       	ldi	r21, 0x00	; 0
    23ce:	60 e0       	ldi	r22, 0x00	; 0
    23d0:	81 e0       	ldi	r24, 0x01	; 1
    23d2:	9f d3       	rcall	.+1854   	; 0x2b12 <xQueueGenericCreateStatic>
    23d4:	90 93 a0 0b 	sts	0x0BA0, r25	; 0x800ba0 <Sema_RPM_max_handle+0x1>
    23d8:	80 93 9f 0b 	sts	0x0B9F, r24	; 0x800b9f <Sema_RPM_max_handle>
	Sema_Conveyor_length_handle =  xSemaphoreCreateBinaryStatic(&Sema_Conveyor_length_Buffer);
    23dc:	2f e5       	ldi	r18, 0x5F	; 95
    23de:	3b e0       	ldi	r19, 0x0B	; 11
    23e0:	40 e0       	ldi	r20, 0x00	; 0
    23e2:	50 e0       	ldi	r21, 0x00	; 0
    23e4:	60 e0       	ldi	r22, 0x00	; 0
    23e6:	81 e0       	ldi	r24, 0x01	; 1
    23e8:	94 d3       	rcall	.+1832   	; 0x2b12 <xQueueGenericCreateStatic>
    23ea:	90 93 7f 0b 	sts	0x0B7F, r25	; 0x800b7f <Sema_Conveyor_length_handle+0x1>
    23ee:	80 93 7e 0b 	sts	0x0B7E, r24	; 0x800b7e <Sema_Conveyor_length_handle>
	Sema_Driver_diameter_handle =  xSemaphoreCreateBinaryStatic(&Sema_Driver_diameter_Buffer);
    23f2:	2e e3       	ldi	r18, 0x3E	; 62
    23f4:	3b e0       	ldi	r19, 0x0B	; 11
    23f6:	40 e0       	ldi	r20, 0x00	; 0
    23f8:	50 e0       	ldi	r21, 0x00	; 0
    23fa:	60 e0       	ldi	r22, 0x00	; 0
    23fc:	81 e0       	ldi	r24, 0x01	; 1
    23fe:	89 d3       	rcall	.+1810   	; 0x2b12 <xQueueGenericCreateStatic>
    2400:	90 93 5e 0b 	sts	0x0B5E, r25	; 0x800b5e <Sema_Driver_diameter_handle+0x1>
    2404:	80 93 5d 0b 	sts	0x0B5D, r24	; 0x800b5d <Sema_Driver_diameter_handle>
	Sema_Time_minute_handle =  xSemaphoreCreateBinaryStatic(&Sema_Time_minute_Buffer);
    2408:	2d e1       	ldi	r18, 0x1D	; 29
    240a:	3b e0       	ldi	r19, 0x0B	; 11
    240c:	40 e0       	ldi	r20, 0x00	; 0
    240e:	50 e0       	ldi	r21, 0x00	; 0
    2410:	60 e0       	ldi	r22, 0x00	; 0
    2412:	81 e0       	ldi	r24, 0x01	; 1
    2414:	7e d3       	rcall	.+1788   	; 0x2b12 <xQueueGenericCreateStatic>
    2416:	90 93 3d 0b 	sts	0x0B3D, r25	; 0x800b3d <Sema_Time_minute_handle+0x1>
    241a:	80 93 3c 0b 	sts	0x0B3C, r24	; 0x800b3c <Sema_Time_minute_handle>
	Sema_Time_second_handle =  xSemaphoreCreateBinaryStatic(&Sema_Time_second_Buffer);
    241e:	2c ef       	ldi	r18, 0xFC	; 252
    2420:	3a e0       	ldi	r19, 0x0A	; 10
    2422:	40 e0       	ldi	r20, 0x00	; 0
    2424:	50 e0       	ldi	r21, 0x00	; 0
    2426:	60 e0       	ldi	r22, 0x00	; 0
    2428:	81 e0       	ldi	r24, 0x01	; 1
    242a:	73 d3       	rcall	.+1766   	; 0x2b12 <xQueueGenericCreateStatic>
    242c:	90 93 1c 0b 	sts	0x0B1C, r25	; 0x800b1c <Sema_Time_second_handle+0x1>
    2430:	80 93 1b 0b 	sts	0x0B1B, r24	; 0x800b1b <Sema_Time_second_handle>
}
    2434:	0f 91       	pop	r16
    2436:	08 95       	ret

00002438 <RTE_levels_init>:

static SemaphoreHandle_t Sema_blancher_level_handle;
static StaticSemaphore_t Sema_blancher_level_Buffer;
static uint16_t blancher_level;

void RTE_levels_init(void){
    2438:	0f 93       	push	r16
	Sema_tank_level_handle = xSemaphoreCreateBinaryStatic(&Sema_tank_level_Buffer);
    243a:	03 e0       	ldi	r16, 0x03	; 3
    243c:	23 ee       	ldi	r18, 0xE3	; 227
    243e:	3b e0       	ldi	r19, 0x0B	; 11
    2440:	40 e0       	ldi	r20, 0x00	; 0
    2442:	50 e0       	ldi	r21, 0x00	; 0
    2444:	60 e0       	ldi	r22, 0x00	; 0
    2446:	81 e0       	ldi	r24, 0x01	; 1
    2448:	64 d3       	rcall	.+1736   	; 0x2b12 <xQueueGenericCreateStatic>
    244a:	90 93 03 0c 	sts	0x0C03, r25	; 0x800c03 <Sema_tank_level_handle+0x1>
    244e:	80 93 02 0c 	sts	0x0C02, r24	; 0x800c02 <Sema_tank_level_handle>
	Sema_blancher_level_handle = xSemaphoreCreateBinaryStatic(&Sema_blancher_level_Buffer);
    2452:	22 ec       	ldi	r18, 0xC2	; 194
    2454:	3b e0       	ldi	r19, 0x0B	; 11
    2456:	40 e0       	ldi	r20, 0x00	; 0
    2458:	50 e0       	ldi	r21, 0x00	; 0
    245a:	60 e0       	ldi	r22, 0x00	; 0
    245c:	81 e0       	ldi	r24, 0x01	; 1
    245e:	59 d3       	rcall	.+1714   	; 0x2b12 <xQueueGenericCreateStatic>
    2460:	90 93 e2 0b 	sts	0x0BE2, r25	; 0x800be2 <Sema_blancher_level_handle+0x1>
    2464:	80 93 e1 0b 	sts	0x0BE1, r24	; 0x800be1 <Sema_blancher_level_handle>
}
    2468:	0f 91       	pop	r16
    246a:	08 95       	ret

0000246c <RTE_init>:
#include "RTE_levels.h"
#include "RTE_temperature.h"
#include "RTE_main.h"

void RTE_init(void){
	RTE_drum_init();
    246c:	9e df       	rcall	.-196    	; 0x23aa <RTE_drum_init>
	RTE_invertersetting_init();
    246e:	9e df       	rcall	.-196    	; 0x23ac <RTE_invertersetting_init>
	RTE_operations_init();
    2470:	03 d0       	rcall	.+6      	; 0x2478 <RTE_operations_init>
	RTE_levels_init();
    2472:	e2 df       	rcall	.-60     	; 0x2438 <RTE_levels_init>
    2474:	31 c0       	rjmp	.+98     	; 0x24d8 <RTE_temperature_init>
	RTE_temperature_init();
    2476:	08 95       	ret

00002478 <RTE_operations_init>:
    2478:	0f 93       	push	r16
    247a:	03 e0       	ldi	r16, 0x03	; 3
static SemaphoreHandle_t Sema_Tank_Calibration_Operation_handle;
static StaticSemaphore_t Sema_Tank_Calibration_Operation_Buffer;
static uint16_t Tank_Calibration_Operation;

void RTE_operations_init(void){
	Sema_System_on_handle = xSemaphoreCreateBinaryStatic(&Sema_System_on_Buffer);
    247c:	27 e6       	ldi	r18, 0x67	; 103
    247e:	3c e0       	ldi	r19, 0x0C	; 12
    2480:	40 e0       	ldi	r20, 0x00	; 0
    2482:	50 e0       	ldi	r21, 0x00	; 0
    2484:	60 e0       	ldi	r22, 0x00	; 0
    2486:	81 e0       	ldi	r24, 0x01	; 1
    2488:	44 d3       	rcall	.+1672   	; 0x2b12 <xQueueGenericCreateStatic>
    248a:	90 93 87 0c 	sts	0x0C87, r25	; 0x800c87 <Sema_System_on_handle+0x1>
    248e:	80 93 86 0c 	sts	0x0C86, r24	; 0x800c86 <Sema_System_on_handle>
	Sema_Start_blancher_Operation_handle = xSemaphoreCreateBinaryStatic(&Sema_Start_blancher_Operation_Buffer);
    2492:	26 e4       	ldi	r18, 0x46	; 70
    2494:	3c e0       	ldi	r19, 0x0C	; 12
    2496:	40 e0       	ldi	r20, 0x00	; 0
    2498:	50 e0       	ldi	r21, 0x00	; 0
    249a:	60 e0       	ldi	r22, 0x00	; 0
    249c:	81 e0       	ldi	r24, 0x01	; 1
    249e:	39 d3       	rcall	.+1650   	; 0x2b12 <xQueueGenericCreateStatic>
    24a0:	90 93 66 0c 	sts	0x0C66, r25	; 0x800c66 <Sema_Start_blancher_Operation_handle+0x1>
    24a4:	80 93 65 0c 	sts	0x0C65, r24	; 0x800c65 <Sema_Start_blancher_Operation_handle>
	Sema_Wash_Operation_handle = xSemaphoreCreateBinaryStatic(&Sema_Wash_Operation_Buffer);
    24a8:	25 e2       	ldi	r18, 0x25	; 37
    24aa:	3c e0       	ldi	r19, 0x0C	; 12
    24ac:	40 e0       	ldi	r20, 0x00	; 0
    24ae:	50 e0       	ldi	r21, 0x00	; 0
    24b0:	60 e0       	ldi	r22, 0x00	; 0
    24b2:	81 e0       	ldi	r24, 0x01	; 1
    24b4:	2e d3       	rcall	.+1628   	; 0x2b12 <xQueueGenericCreateStatic>
    24b6:	90 93 45 0c 	sts	0x0C45, r25	; 0x800c45 <Sema_Wash_Operation_handle+0x1>
    24ba:	80 93 44 0c 	sts	0x0C44, r24	; 0x800c44 <Sema_Wash_Operation_handle>
	Sema_Tank_Calibration_Operation_handle = xSemaphoreCreateBinaryStatic(&Sema_Tank_Calibration_Operation_Buffer);
    24be:	24 e0       	ldi	r18, 0x04	; 4
    24c0:	3c e0       	ldi	r19, 0x0C	; 12
    24c2:	40 e0       	ldi	r20, 0x00	; 0
    24c4:	50 e0       	ldi	r21, 0x00	; 0
    24c6:	60 e0       	ldi	r22, 0x00	; 0
    24c8:	81 e0       	ldi	r24, 0x01	; 1
    24ca:	23 d3       	rcall	.+1606   	; 0x2b12 <xQueueGenericCreateStatic>
    24cc:	90 93 24 0c 	sts	0x0C24, r25	; 0x800c24 <Sema_Tank_Calibration_Operation_handle+0x1>
    24d0:	80 93 23 0c 	sts	0x0C23, r24	; 0x800c23 <Sema_Tank_Calibration_Operation_handle>

}
    24d4:	0f 91       	pop	r16
    24d6:	08 95       	ret

000024d8 <RTE_temperature_init>:
	Current_temperature = u16Currenttemp;
}

uint16_t RTE_get_Current_temperature(void){
	return Current_temperature;
}
    24d8:	0f 93       	push	r16
    24da:	03 e0       	ldi	r16, 0x03	; 3
    24dc:	22 e5       	ldi	r18, 0x52	; 82
    24de:	3d e0       	ldi	r19, 0x0D	; 13
    24e0:	40 e0       	ldi	r20, 0x00	; 0
    24e2:	50 e0       	ldi	r21, 0x00	; 0
    24e4:	60 e0       	ldi	r22, 0x00	; 0
    24e6:	81 e0       	ldi	r24, 0x01	; 1
    24e8:	14 d3       	rcall	.+1576   	; 0x2b12 <xQueueGenericCreateStatic>
    24ea:	90 93 72 0d 	sts	0x0D72, r25	; 0x800d72 <Sema_Sleep_temp_handle+0x1>
    24ee:	80 93 71 0d 	sts	0x0D71, r24	; 0x800d71 <Sema_Sleep_temp_handle>
    24f2:	21 e3       	ldi	r18, 0x31	; 49
    24f4:	3d e0       	ldi	r19, 0x0D	; 13
    24f6:	40 e0       	ldi	r20, 0x00	; 0
    24f8:	50 e0       	ldi	r21, 0x00	; 0
    24fa:	60 e0       	ldi	r22, 0x00	; 0
    24fc:	81 e0       	ldi	r24, 0x01	; 1
    24fe:	09 d3       	rcall	.+1554   	; 0x2b12 <xQueueGenericCreateStatic>
    2500:	90 93 51 0d 	sts	0x0D51, r25	; 0x800d51 <Sema_Set_temp_handle+0x1>
    2504:	80 93 50 0d 	sts	0x0D50, r24	; 0x800d50 <Sema_Set_temp_handle>
    2508:	20 e1       	ldi	r18, 0x10	; 16
    250a:	3d e0       	ldi	r19, 0x0D	; 13
    250c:	40 e0       	ldi	r20, 0x00	; 0
    250e:	50 e0       	ldi	r21, 0x00	; 0
    2510:	60 e0       	ldi	r22, 0x00	; 0
    2512:	81 e0       	ldi	r24, 0x01	; 1
    2514:	fe d2       	rcall	.+1532   	; 0x2b12 <xQueueGenericCreateStatic>
    2516:	90 93 30 0d 	sts	0x0D30, r25	; 0x800d30 <Sema_threshold_set_temp_handle+0x1>
    251a:	80 93 2f 0d 	sts	0x0D2F, r24	; 0x800d2f <Sema_threshold_set_temp_handle>
    251e:	2f ee       	ldi	r18, 0xEF	; 239
    2520:	3c e0       	ldi	r19, 0x0C	; 12
    2522:	40 e0       	ldi	r20, 0x00	; 0
    2524:	50 e0       	ldi	r21, 0x00	; 0
    2526:	60 e0       	ldi	r22, 0x00	; 0
    2528:	81 e0       	ldi	r24, 0x01	; 1
    252a:	f3 d2       	rcall	.+1510   	; 0x2b12 <xQueueGenericCreateStatic>
    252c:	90 93 0f 0d 	sts	0x0D0F, r25	; 0x800d0f <Sema_threshold_sleep_temp_handle+0x1>
    2530:	80 93 0e 0d 	sts	0x0D0E, r24	; 0x800d0e <Sema_threshold_sleep_temp_handle>
    2534:	2e ec       	ldi	r18, 0xCE	; 206
    2536:	3c e0       	ldi	r19, 0x0C	; 12
    2538:	40 e0       	ldi	r20, 0x00	; 0
    253a:	50 e0       	ldi	r21, 0x00	; 0
    253c:	60 e0       	ldi	r22, 0x00	; 0
    253e:	81 e0       	ldi	r24, 0x01	; 1
    2540:	e8 d2       	rcall	.+1488   	; 0x2b12 <xQueueGenericCreateStatic>
    2542:	90 93 ee 0c 	sts	0x0CEE, r25	; 0x800cee <Sema_Positive_offset_temp_handle+0x1>
    2546:	80 93 ed 0c 	sts	0x0CED, r24	; 0x800ced <Sema_Positive_offset_temp_handle>
    254a:	2d ea       	ldi	r18, 0xAD	; 173
    254c:	3c e0       	ldi	r19, 0x0C	; 12
    254e:	40 e0       	ldi	r20, 0x00	; 0
    2550:	50 e0       	ldi	r21, 0x00	; 0
    2552:	60 e0       	ldi	r22, 0x00	; 0
    2554:	81 e0       	ldi	r24, 0x01	; 1
    2556:	dd d2       	rcall	.+1466   	; 0x2b12 <xQueueGenericCreateStatic>
    2558:	90 93 cd 0c 	sts	0x0CCD, r25	; 0x800ccd <Sema_Negative_offset_temp_handle+0x1>
    255c:	80 93 cc 0c 	sts	0x0CCC, r24	; 0x800ccc <Sema_Negative_offset_temp_handle>
    2560:	2c e8       	ldi	r18, 0x8C	; 140
    2562:	3c e0       	ldi	r19, 0x0C	; 12
    2564:	40 e0       	ldi	r20, 0x00	; 0
    2566:	50 e0       	ldi	r21, 0x00	; 0
    2568:	60 e0       	ldi	r22, 0x00	; 0
    256a:	81 e0       	ldi	r24, 0x01	; 1
    256c:	d2 d2       	rcall	.+1444   	; 0x2b12 <xQueueGenericCreateStatic>
    256e:	90 93 ac 0c 	sts	0x0CAC, r25	; 0x800cac <Sema_APP_current_temp_handle+0x1>
    2572:	80 93 ab 0c 	sts	0x0CAB, r24	; 0x800cab <Sema_APP_current_temp_handle>
    2576:	0f 91       	pop	r16
    2578:	08 95       	ret

0000257a <RTE_set_Current_temperature>:
    257a:	90 93 89 0c 	sts	0x0C89, r25	; 0x800c89 <Current_temperature+0x1>
    257e:	80 93 88 0c 	sts	0x0C88, r24	; 0x800c88 <Current_temperature>
    2582:	08 95       	ret

00002584 <RTE_set_app_Current_temperature>:

void RTE_set_app_Current_temperature(uint16_t u16Currenttemp){
	APP_current_temp = u16Currenttemp;
    2584:	90 93 8b 0c 	sts	0x0C8B, r25	; 0x800c8b <APP_current_temp+0x1>
    2588:	80 93 8a 0c 	sts	0x0C8A, r24	; 0x800c8a <APP_current_temp>
	xSemaphoreGive(Sema_APP_current_temp_handle);
    258c:	20 e0       	ldi	r18, 0x00	; 0
    258e:	40 e0       	ldi	r20, 0x00	; 0
    2590:	50 e0       	ldi	r21, 0x00	; 0
    2592:	60 e0       	ldi	r22, 0x00	; 0
    2594:	70 e0       	ldi	r23, 0x00	; 0
    2596:	80 91 ab 0c 	lds	r24, 0x0CAB	; 0x800cab <Sema_APP_current_temp_handle>
    259a:	90 91 ac 0c 	lds	r25, 0x0CAC	; 0x800cac <Sema_APP_current_temp_handle+0x1>
    259e:	ce c2       	rjmp	.+1436   	; 0x2b3c <xQueueGenericSend>
    25a0:	08 95       	ret

000025a2 <vApplicationStackOverflowHook>:
	   This routine will never return.
	   This routine is referenced in the task.c file of FreeRTOS as an extern.
	\*---------------------------------------------------------------------------*/

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
	DDRB  |= _BV(DDB7);
    25a2:	27 9a       	sbi	0x04, 7	; 4
	PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    25a4:	2f 9a       	sbi	0x05, 7	; 5
    25a6:	2f ef       	ldi	r18, 0xFF	; 255
    25a8:	87 ea       	ldi	r24, 0xA7	; 167
    25aa:	91 e6       	ldi	r25, 0x61	; 97
    25ac:	21 50       	subi	r18, 0x01	; 1
    25ae:	80 40       	sbci	r24, 0x00	; 0
    25b0:	90 40       	sbci	r25, 0x00	; 0
    25b2:	e1 f7       	brne	.-8      	; 0x25ac <vApplicationStackOverflowHook+0xa>
    25b4:	00 c0       	rjmp	.+0      	; 0x25b6 <vApplicationStackOverflowHook+0x14>
    25b6:	00 00       	nop
	for(;;)
	{
		_delay_ms(2000);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
		PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED slow blink.
    25b8:	1f 9a       	sbi	0x03, 7	; 3
    25ba:	f5 cf       	rjmp	.-22     	; 0x25a6 <vApplicationStackOverflowHook+0x4>

000025bc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    25bc:	fc 01       	movw	r30, r24
    /* The list structure contains a list item which is used to mark the
    end of the list.  To initialise the list the list end is inserted
    as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );            /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    25be:	03 96       	adiw	r24, 0x03	; 3
    25c0:	92 83       	std	Z+2, r25	; 0x02
    25c2:	81 83       	std	Z+1, r24	; 0x01

    /* The list end value is the highest possible value in the list to
    ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
    25c4:	2f ef       	ldi	r18, 0xFF	; 255
    25c6:	3f ef       	ldi	r19, 0xFF	; 255
    25c8:	34 83       	std	Z+4, r19	; 0x04
    25ca:	23 83       	std	Z+3, r18	; 0x03

    /* The list end next and previous pointers point to itself so we know
    when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );    /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    25cc:	96 83       	std	Z+6, r25	; 0x06
    25ce:	85 83       	std	Z+5, r24	; 0x05
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    25d0:	90 87       	std	Z+8, r25	; 0x08
    25d2:	87 83       	std	Z+7, r24	; 0x07

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    25d4:	10 82       	st	Z, r1
    25d6:	08 95       	ret

000025d8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
    25d8:	fc 01       	movw	r30, r24
    25da:	11 86       	std	Z+9, r1	; 0x09
    25dc:	10 86       	std	Z+8, r1	; 0x08
    25de:	08 95       	ret

000025e0 <vListInsertEnd>:
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    25e0:	cf 93       	push	r28
    25e2:	df 93       	push	r29
    25e4:	9c 01       	movw	r18, r24
    25e6:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
    25e8:	dc 01       	movw	r26, r24
    25ea:	11 96       	adiw	r26, 0x01	; 1
    25ec:	cd 91       	ld	r28, X+
    25ee:	dc 91       	ld	r29, X
    25f0:	12 97       	sbiw	r26, 0x02	; 2
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
    makes the new list item the last item to be removed by a call to
    listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
    25f2:	d3 83       	std	Z+3, r29	; 0x03
    25f4:	c2 83       	std	Z+2, r28	; 0x02
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    25f6:	8c 81       	ldd	r24, Y+4	; 0x04
    25f8:	9d 81       	ldd	r25, Y+5	; 0x05
    25fa:	95 83       	std	Z+5, r25	; 0x05
    25fc:	84 83       	std	Z+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
    25fe:	8c 81       	ldd	r24, Y+4	; 0x04
    2600:	9d 81       	ldd	r25, Y+5	; 0x05
    2602:	dc 01       	movw	r26, r24
    2604:	13 96       	adiw	r26, 0x03	; 3
    2606:	7c 93       	st	X, r23
    2608:	6e 93       	st	-X, r22
    260a:	12 97       	sbiw	r26, 0x02	; 2
    pxIndex->pxPrevious = pxNewListItem;
    260c:	7d 83       	std	Y+5, r23	; 0x05
    260e:	6c 83       	std	Y+4, r22	; 0x04

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
    2610:	31 87       	std	Z+9, r19	; 0x09
    2612:	20 87       	std	Z+8, r18	; 0x08

    ( pxList->uxNumberOfItems )++;
    2614:	f9 01       	movw	r30, r18
    2616:	80 81       	ld	r24, Z
    2618:	8f 5f       	subi	r24, 0xFF	; 255
    261a:	80 83       	st	Z, r24
}
    261c:	df 91       	pop	r29
    261e:	cf 91       	pop	r28
    2620:	08 95       	ret

00002622 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    2622:	cf 93       	push	r28
    2624:	df 93       	push	r29
    2626:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    2628:	48 81       	ld	r20, Y
    262a:	59 81       	ldd	r21, Y+1	; 0x01
    new list item should be placed after it.  This ensures that TCBs which are
    stored in ready lists (all of which have the same xItemValue value) get a
    share of the CPU.  However, if the xItemValue is the same as the back marker
    the iteration loop below will not end.  Therefore the value is checked
    first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
    262c:	4f 3f       	cpi	r20, 0xFF	; 255
    262e:	2f ef       	ldi	r18, 0xFF	; 255
    2630:	52 07       	cpc	r21, r18
    2632:	21 f4       	brne	.+8      	; 0x263c <vListInsert+0x1a>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
    2634:	fc 01       	movw	r30, r24
    2636:	a7 81       	ldd	r26, Z+7	; 0x07
    2638:	b0 85       	ldd	r27, Z+8	; 0x08
    263a:	0d c0       	rjmp	.+26     	; 0x2656 <vListInsert+0x34>
            4) Using a queue or semaphore before it has been initialised or
               before the scheduler has been started (are interrupts firing
               before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
    263c:	dc 01       	movw	r26, r24
    263e:	13 96       	adiw	r26, 0x03	; 3
    2640:	01 c0       	rjmp	.+2      	; 0x2644 <vListInsert+0x22>
    2642:	df 01       	movw	r26, r30
    2644:	12 96       	adiw	r26, 0x02	; 2
    2646:	ed 91       	ld	r30, X+
    2648:	fc 91       	ld	r31, X
    264a:	13 97       	sbiw	r26, 0x03	; 3
    264c:	20 81       	ld	r18, Z
    264e:	31 81       	ldd	r19, Z+1	; 0x01
    2650:	42 17       	cp	r20, r18
    2652:	53 07       	cpc	r21, r19
    2654:	b0 f7       	brcc	.-20     	; 0x2642 <vListInsert+0x20>
            /* There is nothing to do here, just iterating to the wanted
            insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
    2656:	12 96       	adiw	r26, 0x02	; 2
    2658:	ed 91       	ld	r30, X+
    265a:	fc 91       	ld	r31, X
    265c:	13 97       	sbiw	r26, 0x03	; 3
    265e:	fb 83       	std	Y+3, r31	; 0x03
    2660:	ea 83       	std	Y+2, r30	; 0x02
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    2662:	d5 83       	std	Z+5, r29	; 0x05
    2664:	c4 83       	std	Z+4, r28	; 0x04
    pxNewListItem->pxPrevious = pxIterator;
    2666:	bd 83       	std	Y+5, r27	; 0x05
    2668:	ac 83       	std	Y+4, r26	; 0x04
    pxIterator->pxNext = pxNewListItem;
    266a:	13 96       	adiw	r26, 0x03	; 3
    266c:	dc 93       	st	X, r29
    266e:	ce 93       	st	-X, r28
    2670:	12 97       	sbiw	r26, 0x02	; 2

    /* Remember which list the item is in.  This allows fast removal of the
    item later. */
    pxNewListItem->pxContainer = pxList;
    2672:	99 87       	std	Y+9, r25	; 0x09
    2674:	88 87       	std	Y+8, r24	; 0x08

    ( pxList->uxNumberOfItems )++;
    2676:	fc 01       	movw	r30, r24
    2678:	20 81       	ld	r18, Z
    267a:	2f 5f       	subi	r18, 0xFF	; 255
    267c:	20 83       	st	Z, r18
}
    267e:	df 91       	pop	r29
    2680:	cf 91       	pop	r28
    2682:	08 95       	ret

00002684 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    2684:	cf 93       	push	r28
    2686:	df 93       	push	r29
    2688:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
    268a:	a0 85       	ldd	r26, Z+8	; 0x08
    268c:	b1 85       	ldd	r27, Z+9	; 0x09

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    268e:	c2 81       	ldd	r28, Z+2	; 0x02
    2690:	d3 81       	ldd	r29, Z+3	; 0x03
    2692:	84 81       	ldd	r24, Z+4	; 0x04
    2694:	95 81       	ldd	r25, Z+5	; 0x05
    2696:	9d 83       	std	Y+5, r25	; 0x05
    2698:	8c 83       	std	Y+4, r24	; 0x04
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    269a:	c4 81       	ldd	r28, Z+4	; 0x04
    269c:	d5 81       	ldd	r29, Z+5	; 0x05
    269e:	82 81       	ldd	r24, Z+2	; 0x02
    26a0:	93 81       	ldd	r25, Z+3	; 0x03
    26a2:	9b 83       	std	Y+3, r25	; 0x03
    26a4:	8a 83       	std	Y+2, r24	; 0x02

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
    26a6:	11 96       	adiw	r26, 0x01	; 1
    26a8:	8d 91       	ld	r24, X+
    26aa:	9c 91       	ld	r25, X
    26ac:	12 97       	sbiw	r26, 0x02	; 2
    26ae:	e8 17       	cp	r30, r24
    26b0:	f9 07       	cpc	r31, r25
    26b2:	31 f4       	brne	.+12     	; 0x26c0 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
    26b4:	84 81       	ldd	r24, Z+4	; 0x04
    26b6:	95 81       	ldd	r25, Z+5	; 0x05
    26b8:	12 96       	adiw	r26, 0x02	; 2
    26ba:	9c 93       	st	X, r25
    26bc:	8e 93       	st	-X, r24
    26be:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
    26c0:	11 86       	std	Z+9, r1	; 0x09
    26c2:	10 86       	std	Z+8, r1	; 0x08
    ( pxList->uxNumberOfItems )--;
    26c4:	8c 91       	ld	r24, X
    26c6:	81 50       	subi	r24, 0x01	; 1
    26c8:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
    26ca:	8c 91       	ld	r24, X
}
    26cc:	df 91       	pop	r29
    26ce:	cf 91       	pop	r28
    26d0:	08 95       	ret

000026d2 <pxPortInitialiseStack>:
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
    26d2:	31 e1       	ldi	r19, 0x11	; 17
    26d4:	fc 01       	movw	r30, r24
    26d6:	30 83       	st	Z, r19
    26d8:	31 97       	sbiw	r30, 0x01	; 1
    26da:	22 e2       	ldi	r18, 0x22	; 34
    26dc:	20 83       	st	Z, r18
    26de:	31 97       	sbiw	r30, 0x01	; 1
    26e0:	a3 e3       	ldi	r26, 0x33	; 51
    26e2:	a0 83       	st	Z, r26
    26e4:	31 97       	sbiw	r30, 0x01	; 1
    26e6:	60 83       	st	Z, r22
    26e8:	31 97       	sbiw	r30, 0x01	; 1
    26ea:	70 83       	st	Z, r23
    26ec:	31 97       	sbiw	r30, 0x01	; 1
    26ee:	10 82       	st	Z, r1
    26f0:	31 97       	sbiw	r30, 0x01	; 1
    26f2:	10 82       	st	Z, r1
    26f4:	31 97       	sbiw	r30, 0x01	; 1
    26f6:	60 e8       	ldi	r22, 0x80	; 128
    26f8:	60 83       	st	Z, r22
    26fa:	31 97       	sbiw	r30, 0x01	; 1
    26fc:	10 82       	st	Z, r1
    26fe:	31 97       	sbiw	r30, 0x01	; 1
    2700:	10 82       	st	Z, r1
    2702:	31 97       	sbiw	r30, 0x01	; 1
    2704:	10 82       	st	Z, r1
    2706:	31 97       	sbiw	r30, 0x01	; 1
    2708:	62 e0       	ldi	r22, 0x02	; 2
    270a:	60 83       	st	Z, r22
    270c:	31 97       	sbiw	r30, 0x01	; 1
    270e:	63 e0       	ldi	r22, 0x03	; 3
    2710:	60 83       	st	Z, r22
    2712:	31 97       	sbiw	r30, 0x01	; 1
    2714:	64 e0       	ldi	r22, 0x04	; 4
    2716:	60 83       	st	Z, r22
    2718:	31 97       	sbiw	r30, 0x01	; 1
    271a:	65 e0       	ldi	r22, 0x05	; 5
    271c:	60 83       	st	Z, r22
    271e:	31 97       	sbiw	r30, 0x01	; 1
    2720:	66 e0       	ldi	r22, 0x06	; 6
    2722:	60 83       	st	Z, r22
    2724:	31 97       	sbiw	r30, 0x01	; 1
    2726:	67 e0       	ldi	r22, 0x07	; 7
    2728:	60 83       	st	Z, r22
    272a:	31 97       	sbiw	r30, 0x01	; 1
    272c:	68 e0       	ldi	r22, 0x08	; 8
    272e:	60 83       	st	Z, r22
    2730:	31 97       	sbiw	r30, 0x01	; 1
    2732:	69 e0       	ldi	r22, 0x09	; 9
    2734:	60 83       	st	Z, r22
    2736:	31 97       	sbiw	r30, 0x01	; 1
    2738:	60 e1       	ldi	r22, 0x10	; 16
    273a:	60 83       	st	Z, r22
    273c:	31 97       	sbiw	r30, 0x01	; 1
    273e:	30 83       	st	Z, r19
    2740:	31 97       	sbiw	r30, 0x01	; 1
    2742:	32 e1       	ldi	r19, 0x12	; 18
    2744:	30 83       	st	Z, r19
    2746:	31 97       	sbiw	r30, 0x01	; 1
    2748:	33 e1       	ldi	r19, 0x13	; 19
    274a:	30 83       	st	Z, r19
    274c:	31 97       	sbiw	r30, 0x01	; 1
    274e:	34 e1       	ldi	r19, 0x14	; 20
    2750:	30 83       	st	Z, r19
    2752:	31 97       	sbiw	r30, 0x01	; 1
    2754:	35 e1       	ldi	r19, 0x15	; 21
    2756:	30 83       	st	Z, r19
    2758:	31 97       	sbiw	r30, 0x01	; 1
    275a:	36 e1       	ldi	r19, 0x16	; 22
    275c:	30 83       	st	Z, r19
    275e:	31 97       	sbiw	r30, 0x01	; 1
    2760:	37 e1       	ldi	r19, 0x17	; 23
    2762:	30 83       	st	Z, r19
    2764:	31 97       	sbiw	r30, 0x01	; 1
    2766:	38 e1       	ldi	r19, 0x18	; 24
    2768:	30 83       	st	Z, r19
    276a:	31 97       	sbiw	r30, 0x01	; 1
    276c:	39 e1       	ldi	r19, 0x19	; 25
    276e:	30 83       	st	Z, r19
    2770:	31 97       	sbiw	r30, 0x01	; 1
    2772:	30 e2       	ldi	r19, 0x20	; 32
    2774:	30 83       	st	Z, r19
    2776:	31 97       	sbiw	r30, 0x01	; 1
    2778:	31 e2       	ldi	r19, 0x21	; 33
    277a:	30 83       	st	Z, r19
    277c:	31 97       	sbiw	r30, 0x01	; 1
    277e:	20 83       	st	Z, r18
    2780:	31 97       	sbiw	r30, 0x01	; 1
    2782:	23 e2       	ldi	r18, 0x23	; 35
    2784:	20 83       	st	Z, r18
    2786:	31 97       	sbiw	r30, 0x01	; 1
    2788:	40 83       	st	Z, r20
    278a:	31 97       	sbiw	r30, 0x01	; 1
    278c:	50 83       	st	Z, r21
    278e:	31 97       	sbiw	r30, 0x01	; 1
    2790:	26 e2       	ldi	r18, 0x26	; 38
    2792:	20 83       	st	Z, r18
    2794:	31 97       	sbiw	r30, 0x01	; 1
    2796:	27 e2       	ldi	r18, 0x27	; 39
    2798:	20 83       	st	Z, r18
    279a:	31 97       	sbiw	r30, 0x01	; 1
    279c:	28 e2       	ldi	r18, 0x28	; 40
    279e:	20 83       	st	Z, r18
    27a0:	31 97       	sbiw	r30, 0x01	; 1
    27a2:	29 e2       	ldi	r18, 0x29	; 41
    27a4:	20 83       	st	Z, r18
    27a6:	31 97       	sbiw	r30, 0x01	; 1
    27a8:	20 e3       	ldi	r18, 0x30	; 48
    27aa:	20 83       	st	Z, r18
    27ac:	31 97       	sbiw	r30, 0x01	; 1
    27ae:	21 e3       	ldi	r18, 0x31	; 49
    27b0:	20 83       	st	Z, r18
    27b2:	89 97       	sbiw	r24, 0x29	; 41
    27b4:	08 95       	ret

000027b6 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    27b6:	0f 92       	push	r0
    27b8:	0f b6       	in	r0, 0x3f	; 63
    27ba:	f8 94       	cli
    27bc:	0f 92       	push	r0
    27be:	0b b6       	in	r0, 0x3b	; 59
    27c0:	0f 92       	push	r0
    27c2:	0c b6       	in	r0, 0x3c	; 60
    27c4:	0f 92       	push	r0
    27c6:	1f 92       	push	r1
    27c8:	11 24       	eor	r1, r1
    27ca:	2f 92       	push	r2
    27cc:	3f 92       	push	r3
    27ce:	4f 92       	push	r4
    27d0:	5f 92       	push	r5
    27d2:	6f 92       	push	r6
    27d4:	7f 92       	push	r7
    27d6:	8f 92       	push	r8
    27d8:	9f 92       	push	r9
    27da:	af 92       	push	r10
    27dc:	bf 92       	push	r11
    27de:	cf 92       	push	r12
    27e0:	df 92       	push	r13
    27e2:	ef 92       	push	r14
    27e4:	ff 92       	push	r15
    27e6:	0f 93       	push	r16
    27e8:	1f 93       	push	r17
    27ea:	2f 93       	push	r18
    27ec:	3f 93       	push	r19
    27ee:	4f 93       	push	r20
    27f0:	5f 93       	push	r21
    27f2:	6f 93       	push	r22
    27f4:	7f 93       	push	r23
    27f6:	8f 93       	push	r24
    27f8:	9f 93       	push	r25
    27fa:	af 93       	push	r26
    27fc:	bf 93       	push	r27
    27fe:	cf 93       	push	r28
    2800:	df 93       	push	r29
    2802:	ef 93       	push	r30
    2804:	ff 93       	push	r31
    2806:	a0 91 cb 0d 	lds	r26, 0x0DCB	; 0x800dcb <pxCurrentTCB>
    280a:	b0 91 cc 0d 	lds	r27, 0x0DCC	; 0x800dcc <pxCurrentTCB+0x1>
    280e:	0d b6       	in	r0, 0x3d	; 61
    2810:	0d 92       	st	X+, r0
    2812:	0e b6       	in	r0, 0x3e	; 62
    2814:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    2816:	c3 d4       	rcall	.+2438   	; 0x319e <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    2818:	a0 91 cb 0d 	lds	r26, 0x0DCB	; 0x800dcb <pxCurrentTCB>
    281c:	b0 91 cc 0d 	lds	r27, 0x0DCC	; 0x800dcc <pxCurrentTCB+0x1>
    2820:	cd 91       	ld	r28, X+
    2822:	cd bf       	out	0x3d, r28	; 61
    2824:	dd 91       	ld	r29, X+
    2826:	de bf       	out	0x3e, r29	; 62
    2828:	ff 91       	pop	r31
    282a:	ef 91       	pop	r30
    282c:	df 91       	pop	r29
    282e:	cf 91       	pop	r28
    2830:	bf 91       	pop	r27
    2832:	af 91       	pop	r26
    2834:	9f 91       	pop	r25
    2836:	8f 91       	pop	r24
    2838:	7f 91       	pop	r23
    283a:	6f 91       	pop	r22
    283c:	5f 91       	pop	r21
    283e:	4f 91       	pop	r20
    2840:	3f 91       	pop	r19
    2842:	2f 91       	pop	r18
    2844:	1f 91       	pop	r17
    2846:	0f 91       	pop	r16
    2848:	ff 90       	pop	r15
    284a:	ef 90       	pop	r14
    284c:	df 90       	pop	r13
    284e:	cf 90       	pop	r12
    2850:	bf 90       	pop	r11
    2852:	af 90       	pop	r10
    2854:	9f 90       	pop	r9
    2856:	8f 90       	pop	r8
    2858:	7f 90       	pop	r7
    285a:	6f 90       	pop	r6
    285c:	5f 90       	pop	r5
    285e:	4f 90       	pop	r4
    2860:	3f 90       	pop	r3
    2862:	2f 90       	pop	r2
    2864:	1f 90       	pop	r1
    2866:	0f 90       	pop	r0
    2868:	0c be       	out	0x3c, r0	; 60
    286a:	0f 90       	pop	r0
    286c:	0b be       	out	0x3b, r0	; 59
    286e:	0f 90       	pop	r0
    2870:	0f be       	out	0x3f, r0	; 63
    2872:	0f 90       	pop	r0

	__asm__ __volatile__ ( "ret" );
    2874:	08 95       	ret

00002876 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    2876:	0f 92       	push	r0
    2878:	0f b6       	in	r0, 0x3f	; 63
    287a:	f8 94       	cli
    287c:	0f 92       	push	r0
    287e:	0b b6       	in	r0, 0x3b	; 59
    2880:	0f 92       	push	r0
    2882:	0c b6       	in	r0, 0x3c	; 60
    2884:	0f 92       	push	r0
    2886:	1f 92       	push	r1
    2888:	11 24       	eor	r1, r1
    288a:	2f 92       	push	r2
    288c:	3f 92       	push	r3
    288e:	4f 92       	push	r4
    2890:	5f 92       	push	r5
    2892:	6f 92       	push	r6
    2894:	7f 92       	push	r7
    2896:	8f 92       	push	r8
    2898:	9f 92       	push	r9
    289a:	af 92       	push	r10
    289c:	bf 92       	push	r11
    289e:	cf 92       	push	r12
    28a0:	df 92       	push	r13
    28a2:	ef 92       	push	r14
    28a4:	ff 92       	push	r15
    28a6:	0f 93       	push	r16
    28a8:	1f 93       	push	r17
    28aa:	2f 93       	push	r18
    28ac:	3f 93       	push	r19
    28ae:	4f 93       	push	r20
    28b0:	5f 93       	push	r21
    28b2:	6f 93       	push	r22
    28b4:	7f 93       	push	r23
    28b6:	8f 93       	push	r24
    28b8:	9f 93       	push	r25
    28ba:	af 93       	push	r26
    28bc:	bf 93       	push	r27
    28be:	cf 93       	push	r28
    28c0:	df 93       	push	r29
    28c2:	ef 93       	push	r30
    28c4:	ff 93       	push	r31
    28c6:	a0 91 cb 0d 	lds	r26, 0x0DCB	; 0x800dcb <pxCurrentTCB>
    28ca:	b0 91 cc 0d 	lds	r27, 0x0DCC	; 0x800dcc <pxCurrentTCB+0x1>
    28ce:	0d b6       	in	r0, 0x3d	; 61
    28d0:	0d 92       	st	X+, r0
    28d2:	0e b6       	in	r0, 0x3e	; 62
    28d4:	0d 92       	st	X+, r0

	sleep_reset();		//	 reset the sleep_mode() faster than sleep_disable();
    28d6:	13 be       	out	0x33, r1	; 51

	if( xTaskIncrementTick() != pdFALSE )
    28d8:	22 d3       	rcall	.+1604   	; 0x2f1e <xTaskIncrementTick>
    28da:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
    28dc:	60 d4       	rcall	.+2240   	; 0x319e <vTaskSwitchContext>
    28de:	a0 91 cb 0d 	lds	r26, 0x0DCB	; 0x800dcb <pxCurrentTCB>
	}

	portRESTORE_CONTEXT();
    28e2:	b0 91 cc 0d 	lds	r27, 0x0DCC	; 0x800dcc <pxCurrentTCB+0x1>
    28e6:	cd 91       	ld	r28, X+
    28e8:	cd bf       	out	0x3d, r28	; 61
    28ea:	dd 91       	ld	r29, X+
    28ec:	de bf       	out	0x3e, r29	; 62
    28ee:	ff 91       	pop	r31
    28f0:	ef 91       	pop	r30
    28f2:	df 91       	pop	r29
    28f4:	cf 91       	pop	r28
    28f6:	bf 91       	pop	r27
    28f8:	af 91       	pop	r26
    28fa:	9f 91       	pop	r25
    28fc:	8f 91       	pop	r24
    28fe:	7f 91       	pop	r23
    2900:	6f 91       	pop	r22
    2902:	5f 91       	pop	r21
    2904:	4f 91       	pop	r20
    2906:	3f 91       	pop	r19
    2908:	2f 91       	pop	r18
    290a:	1f 91       	pop	r17
    290c:	0f 91       	pop	r16
    290e:	ff 90       	pop	r15
    2910:	ef 90       	pop	r14
    2912:	df 90       	pop	r13
    2914:	cf 90       	pop	r12
    2916:	bf 90       	pop	r11
    2918:	af 90       	pop	r10
    291a:	9f 90       	pop	r9
    291c:	8f 90       	pop	r8
    291e:	7f 90       	pop	r7
    2920:	6f 90       	pop	r6
    2922:	5f 90       	pop	r5
    2924:	4f 90       	pop	r4
    2926:	3f 90       	pop	r3
    2928:	2f 90       	pop	r2
    292a:	1f 90       	pop	r1
    292c:	0f 90       	pop	r0
    292e:	0c be       	out	0x3c, r0	; 60
    2930:	0f 90       	pop	r0
    2932:	0b be       	out	0x3b, r0	; 59
    2934:	0f 90       	pop	r0
    2936:	0f be       	out	0x3f, r0	; 63
    2938:	0f 90       	pop	r0
    293a:	08 95       	ret

0000293c <__vector_12>:

	__asm__ __volatile__ ( "ret" );
    293c:	9c df       	rcall	.-200    	; 0x2876 <vPortYieldFromTick>
//	ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
	ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
	ISR(portSCHEDULER_ISR)
	{
		vPortYieldFromTick();
		__asm__ __volatile__ ( "reti" );
    293e:	18 95       	reti

00002940 <prvCopyDataToQueue>:
        {
            traceCREATE_COUNTING_SEMAPHORE_FAILED();
        }

        return xHandle;
    }
    2940:	0f 93       	push	r16
    2942:	1f 93       	push	r17
    2944:	cf 93       	push	r28
    2946:	df 93       	push	r29
    2948:	ec 01       	movw	r28, r24
    294a:	04 2f       	mov	r16, r20
    294c:	1a 8d       	ldd	r17, Y+26	; 0x1a
    294e:	4c 8d       	ldd	r20, Y+28	; 0x1c
    2950:	41 11       	cpse	r20, r1
    2952:	0b c0       	rjmp	.+22     	; 0x296a <prvCopyDataToQueue+0x2a>
    2954:	88 81       	ld	r24, Y
    2956:	99 81       	ldd	r25, Y+1	; 0x01
    2958:	89 2b       	or	r24, r25
    295a:	09 f0       	breq	.+2      	; 0x295e <prvCopyDataToQueue+0x1e>
    295c:	41 c0       	rjmp	.+130    	; 0x29e0 <prvCopyDataToQueue+0xa0>
    295e:	8c 81       	ldd	r24, Y+4	; 0x04
    2960:	9d 81       	ldd	r25, Y+5	; 0x05
    2962:	2b d5       	rcall	.+2646   	; 0x33ba <xTaskPriorityDisinherit>
    2964:	1d 82       	std	Y+5, r1	; 0x05
    2966:	1c 82       	std	Y+4, r1	; 0x04
    2968:	42 c0       	rjmp	.+132    	; 0x29ee <prvCopyDataToQueue+0xae>
    296a:	01 11       	cpse	r16, r1
    296c:	17 c0       	rjmp	.+46     	; 0x299c <prvCopyDataToQueue+0x5c>
    296e:	50 e0       	ldi	r21, 0x00	; 0
    2970:	8a 81       	ldd	r24, Y+2	; 0x02
    2972:	9b 81       	ldd	r25, Y+3	; 0x03
    2974:	0e 94 09 1f 	call	0x3e12	; 0x3e12 <memcpy>
    2978:	2c 8d       	ldd	r18, Y+28	; 0x1c
    297a:	8a 81       	ldd	r24, Y+2	; 0x02
    297c:	9b 81       	ldd	r25, Y+3	; 0x03
    297e:	82 0f       	add	r24, r18
    2980:	91 1d       	adc	r25, r1
    2982:	9b 83       	std	Y+3, r25	; 0x03
    2984:	8a 83       	std	Y+2, r24	; 0x02
    2986:	2c 81       	ldd	r18, Y+4	; 0x04
    2988:	3d 81       	ldd	r19, Y+5	; 0x05
    298a:	82 17       	cp	r24, r18
    298c:	93 07       	cpc	r25, r19
    298e:	50 f1       	brcs	.+84     	; 0x29e4 <prvCopyDataToQueue+0xa4>
    2990:	88 81       	ld	r24, Y
    2992:	99 81       	ldd	r25, Y+1	; 0x01
    2994:	9b 83       	std	Y+3, r25	; 0x03
    2996:	8a 83       	std	Y+2, r24	; 0x02
    2998:	80 e0       	ldi	r24, 0x00	; 0
    299a:	29 c0       	rjmp	.+82     	; 0x29ee <prvCopyDataToQueue+0xae>
    299c:	50 e0       	ldi	r21, 0x00	; 0
    299e:	8e 81       	ldd	r24, Y+6	; 0x06
    29a0:	9f 81       	ldd	r25, Y+7	; 0x07
    29a2:	0e 94 09 1f 	call	0x3e12	; 0x3e12 <memcpy>
    29a6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    29a8:	90 e0       	ldi	r25, 0x00	; 0
    29aa:	91 95       	neg	r25
    29ac:	81 95       	neg	r24
    29ae:	91 09       	sbc	r25, r1
    29b0:	2e 81       	ldd	r18, Y+6	; 0x06
    29b2:	3f 81       	ldd	r19, Y+7	; 0x07
    29b4:	28 0f       	add	r18, r24
    29b6:	39 1f       	adc	r19, r25
    29b8:	3f 83       	std	Y+7, r19	; 0x07
    29ba:	2e 83       	std	Y+6, r18	; 0x06
    29bc:	48 81       	ld	r20, Y
    29be:	59 81       	ldd	r21, Y+1	; 0x01
    29c0:	24 17       	cp	r18, r20
    29c2:	35 07       	cpc	r19, r21
    29c4:	30 f4       	brcc	.+12     	; 0x29d2 <prvCopyDataToQueue+0x92>
    29c6:	2c 81       	ldd	r18, Y+4	; 0x04
    29c8:	3d 81       	ldd	r19, Y+5	; 0x05
    29ca:	82 0f       	add	r24, r18
    29cc:	93 1f       	adc	r25, r19
    29ce:	9f 83       	std	Y+7, r25	; 0x07
    29d0:	8e 83       	std	Y+6, r24	; 0x06
    29d2:	02 30       	cpi	r16, 0x02	; 2
    29d4:	49 f4       	brne	.+18     	; 0x29e8 <prvCopyDataToQueue+0xa8>
    29d6:	11 23       	and	r17, r17
    29d8:	49 f0       	breq	.+18     	; 0x29ec <prvCopyDataToQueue+0xac>
    29da:	11 50       	subi	r17, 0x01	; 1
    29dc:	80 e0       	ldi	r24, 0x00	; 0
    29de:	07 c0       	rjmp	.+14     	; 0x29ee <prvCopyDataToQueue+0xae>
    29e0:	80 e0       	ldi	r24, 0x00	; 0
    29e2:	05 c0       	rjmp	.+10     	; 0x29ee <prvCopyDataToQueue+0xae>
    29e4:	80 e0       	ldi	r24, 0x00	; 0
    29e6:	03 c0       	rjmp	.+6      	; 0x29ee <prvCopyDataToQueue+0xae>
    29e8:	80 e0       	ldi	r24, 0x00	; 0
    29ea:	01 c0       	rjmp	.+2      	; 0x29ee <prvCopyDataToQueue+0xae>
    29ec:	80 e0       	ldi	r24, 0x00	; 0
    29ee:	1f 5f       	subi	r17, 0xFF	; 255
    29f0:	1a 8f       	std	Y+26, r17	; 0x1a
    29f2:	df 91       	pop	r29
    29f4:	cf 91       	pop	r28
    29f6:	1f 91       	pop	r17
    29f8:	0f 91       	pop	r16
    29fa:	08 95       	ret

000029fc <prvUnlockQueue>:
    29fc:	ef 92       	push	r14
    29fe:	ff 92       	push	r15
    2a00:	0f 93       	push	r16
    2a02:	1f 93       	push	r17
    2a04:	cf 93       	push	r28
    2a06:	8c 01       	movw	r16, r24
    2a08:	0f b6       	in	r0, 0x3f	; 63
    2a0a:	f8 94       	cli
    2a0c:	0f 92       	push	r0
    2a0e:	fc 01       	movw	r30, r24
    2a10:	c6 8d       	ldd	r28, Z+30	; 0x1e
    2a12:	1c 16       	cp	r1, r28
    2a14:	9c f4       	brge	.+38     	; 0x2a3c <prvUnlockQueue+0x40>
    2a16:	81 89       	ldd	r24, Z+17	; 0x11
    2a18:	81 11       	cpse	r24, r1
    2a1a:	06 c0       	rjmp	.+12     	; 0x2a28 <prvUnlockQueue+0x2c>
    2a1c:	0f c0       	rjmp	.+30     	; 0x2a3c <prvUnlockQueue+0x40>
    2a1e:	f8 01       	movw	r30, r16
    2a20:	81 89       	ldd	r24, Z+17	; 0x11
    2a22:	81 11       	cpse	r24, r1
    2a24:	05 c0       	rjmp	.+10     	; 0x2a30 <prvUnlockQueue+0x34>
    2a26:	0a c0       	rjmp	.+20     	; 0x2a3c <prvUnlockQueue+0x40>
    2a28:	78 01       	movw	r14, r16
    2a2a:	f1 e1       	ldi	r31, 0x11	; 17
    2a2c:	ef 0e       	add	r14, r31
    2a2e:	f1 1c       	adc	r15, r1
    2a30:	c7 01       	movw	r24, r14
    2a32:	45 d4       	rcall	.+2186   	; 0x32be <xTaskRemoveFromEventList>
    2a34:	81 11       	cpse	r24, r1
    2a36:	bd d4       	rcall	.+2426   	; 0x33b2 <vTaskMissedYield>
    2a38:	c1 50       	subi	r28, 0x01	; 1
    2a3a:	89 f7       	brne	.-30     	; 0x2a1e <prvUnlockQueue+0x22>
    2a3c:	8f ef       	ldi	r24, 0xFF	; 255
    2a3e:	f8 01       	movw	r30, r16
    2a40:	86 8f       	std	Z+30, r24	; 0x1e
    2a42:	0f 90       	pop	r0
    2a44:	0f be       	out	0x3f, r0	; 63
    2a46:	0f b6       	in	r0, 0x3f	; 63
    2a48:	f8 94       	cli
    2a4a:	0f 92       	push	r0
    2a4c:	c5 8d       	ldd	r28, Z+29	; 0x1d
    2a4e:	1c 16       	cp	r1, r28
    2a50:	9c f4       	brge	.+38     	; 0x2a78 <prvUnlockQueue+0x7c>
    2a52:	80 85       	ldd	r24, Z+8	; 0x08
    2a54:	81 11       	cpse	r24, r1
    2a56:	06 c0       	rjmp	.+12     	; 0x2a64 <prvUnlockQueue+0x68>
    2a58:	0f c0       	rjmp	.+30     	; 0x2a78 <prvUnlockQueue+0x7c>
    2a5a:	f8 01       	movw	r30, r16
    2a5c:	80 85       	ldd	r24, Z+8	; 0x08
    2a5e:	81 11       	cpse	r24, r1
    2a60:	05 c0       	rjmp	.+10     	; 0x2a6c <prvUnlockQueue+0x70>
    2a62:	0a c0       	rjmp	.+20     	; 0x2a78 <prvUnlockQueue+0x7c>
    2a64:	78 01       	movw	r14, r16
    2a66:	f8 e0       	ldi	r31, 0x08	; 8
    2a68:	ef 0e       	add	r14, r31
    2a6a:	f1 1c       	adc	r15, r1
    2a6c:	c7 01       	movw	r24, r14
    2a6e:	27 d4       	rcall	.+2126   	; 0x32be <xTaskRemoveFromEventList>
    2a70:	81 11       	cpse	r24, r1
    2a72:	9f d4       	rcall	.+2366   	; 0x33b2 <vTaskMissedYield>
    2a74:	c1 50       	subi	r28, 0x01	; 1
    2a76:	89 f7       	brne	.-30     	; 0x2a5a <prvUnlockQueue+0x5e>
    2a78:	8f ef       	ldi	r24, 0xFF	; 255
    2a7a:	f8 01       	movw	r30, r16
    2a7c:	85 8f       	std	Z+29, r24	; 0x1d
    2a7e:	0f 90       	pop	r0
    2a80:	0f be       	out	0x3f, r0	; 63
    2a82:	cf 91       	pop	r28
    2a84:	1f 91       	pop	r17
    2a86:	0f 91       	pop	r16
    2a88:	ff 90       	pop	r15
    2a8a:	ef 90       	pop	r14
    2a8c:	08 95       	ret

00002a8e <xQueueGenericReset>:
    2a8e:	cf 93       	push	r28
    2a90:	df 93       	push	r29
    2a92:	ec 01       	movw	r28, r24
    2a94:	0f b6       	in	r0, 0x3f	; 63
    2a96:	f8 94       	cli
    2a98:	0f 92       	push	r0
    2a9a:	e8 81       	ld	r30, Y
    2a9c:	f9 81       	ldd	r31, Y+1	; 0x01
    2a9e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2aa0:	2c 8d       	ldd	r18, Y+28	; 0x1c
    2aa2:	90 e0       	ldi	r25, 0x00	; 0
    2aa4:	30 e0       	ldi	r19, 0x00	; 0
    2aa6:	82 9f       	mul	r24, r18
    2aa8:	a0 01       	movw	r20, r0
    2aaa:	83 9f       	mul	r24, r19
    2aac:	50 0d       	add	r21, r0
    2aae:	92 9f       	mul	r25, r18
    2ab0:	50 0d       	add	r21, r0
    2ab2:	11 24       	eor	r1, r1
    2ab4:	4e 0f       	add	r20, r30
    2ab6:	5f 1f       	adc	r21, r31
    2ab8:	5d 83       	std	Y+5, r21	; 0x05
    2aba:	4c 83       	std	Y+4, r20	; 0x04
    2abc:	1a 8e       	std	Y+26, r1	; 0x1a
    2abe:	fb 83       	std	Y+3, r31	; 0x03
    2ac0:	ea 83       	std	Y+2, r30	; 0x02
    2ac2:	01 97       	sbiw	r24, 0x01	; 1
    2ac4:	82 9f       	mul	r24, r18
    2ac6:	a0 01       	movw	r20, r0
    2ac8:	83 9f       	mul	r24, r19
    2aca:	50 0d       	add	r21, r0
    2acc:	92 9f       	mul	r25, r18
    2ace:	50 0d       	add	r21, r0
    2ad0:	11 24       	eor	r1, r1
    2ad2:	cf 01       	movw	r24, r30
    2ad4:	84 0f       	add	r24, r20
    2ad6:	95 1f       	adc	r25, r21
    2ad8:	9f 83       	std	Y+7, r25	; 0x07
    2ada:	8e 83       	std	Y+6, r24	; 0x06
    2adc:	8f ef       	ldi	r24, 0xFF	; 255
    2ade:	8d 8f       	std	Y+29, r24	; 0x1d
    2ae0:	8e 8f       	std	Y+30, r24	; 0x1e
    2ae2:	61 11       	cpse	r22, r1
    2ae4:	0a c0       	rjmp	.+20     	; 0x2afa <xQueueGenericReset+0x6c>
    2ae6:	88 85       	ldd	r24, Y+8	; 0x08
    2ae8:	88 23       	and	r24, r24
    2aea:	69 f0       	breq	.+26     	; 0x2b06 <xQueueGenericReset+0x78>
    2aec:	ce 01       	movw	r24, r28
    2aee:	08 96       	adiw	r24, 0x08	; 8
    2af0:	e6 d3       	rcall	.+1996   	; 0x32be <xTaskRemoveFromEventList>
    2af2:	88 23       	and	r24, r24
    2af4:	41 f0       	breq	.+16     	; 0x2b06 <xQueueGenericReset+0x78>
    2af6:	5f de       	rcall	.-834    	; 0x27b6 <vPortYield>
    2af8:	06 c0       	rjmp	.+12     	; 0x2b06 <xQueueGenericReset+0x78>
    2afa:	ce 01       	movw	r24, r28
    2afc:	08 96       	adiw	r24, 0x08	; 8
    2afe:	5e dd       	rcall	.-1348   	; 0x25bc <vListInitialise>
    2b00:	ce 01       	movw	r24, r28
    2b02:	41 96       	adiw	r24, 0x11	; 17
    2b04:	5b dd       	rcall	.-1354   	; 0x25bc <vListInitialise>
    2b06:	0f 90       	pop	r0
    2b08:	0f be       	out	0x3f, r0	; 63
    2b0a:	81 e0       	ldi	r24, 0x01	; 1
    2b0c:	df 91       	pop	r29
    2b0e:	cf 91       	pop	r28
    2b10:	08 95       	ret

00002b12 <xQueueGenericCreateStatic>:
    2b12:	cf 93       	push	r28
    2b14:	df 93       	push	r29
    2b16:	e9 01       	movw	r28, r18
    2b18:	20 97       	sbiw	r28, 0x00	; 0
    2b1a:	61 f0       	breq	.+24     	; 0x2b34 <xQueueGenericCreateStatic+0x22>
    2b1c:	61 11       	cpse	r22, r1
    2b1e:	03 c0       	rjmp	.+6      	; 0x2b26 <xQueueGenericCreateStatic+0x14>
    2b20:	39 83       	std	Y+1, r19	; 0x01
    2b22:	28 83       	st	Y, r18
    2b24:	02 c0       	rjmp	.+4      	; 0x2b2a <xQueueGenericCreateStatic+0x18>
    2b26:	59 83       	std	Y+1, r21	; 0x01
    2b28:	48 83       	st	Y, r20
    2b2a:	8b 8f       	std	Y+27, r24	; 0x1b
    2b2c:	6c 8f       	std	Y+28, r22	; 0x1c
    2b2e:	61 e0       	ldi	r22, 0x01	; 1
    2b30:	ce 01       	movw	r24, r28
    2b32:	ad df       	rcall	.-166    	; 0x2a8e <xQueueGenericReset>
    2b34:	ce 01       	movw	r24, r28
    2b36:	df 91       	pop	r29
    2b38:	cf 91       	pop	r28
    2b3a:	08 95       	ret

00002b3c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
    2b3c:	9f 92       	push	r9
    2b3e:	af 92       	push	r10
    2b40:	bf 92       	push	r11
    2b42:	cf 92       	push	r12
    2b44:	df 92       	push	r13
    2b46:	ef 92       	push	r14
    2b48:	ff 92       	push	r15
    2b4a:	0f 93       	push	r16
    2b4c:	1f 93       	push	r17
    2b4e:	cf 93       	push	r28
    2b50:	df 93       	push	r29
    2b52:	00 d0       	rcall	.+0      	; 0x2b54 <xQueueGenericSend+0x18>
    2b54:	1f 92       	push	r1
    2b56:	1f 92       	push	r1
    2b58:	cd b7       	in	r28, 0x3d	; 61
    2b5a:	de b7       	in	r29, 0x3e	; 62
    2b5c:	8c 01       	movw	r16, r24
    2b5e:	6b 01       	movw	r12, r22
    2b60:	5d 83       	std	Y+5, r21	; 0x05
    2b62:	4c 83       	std	Y+4, r20	; 0x04
    2b64:	a2 2e       	mov	r10, r18
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
    2b66:	b1 2c       	mov	r11, r1
                else if( xEntryTimeSet == pdFALSE )
                {
                    /* The queue was full and a block time was specified so
                    configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
                    xEntryTimeSet = pdTRUE;
    2b68:	99 24       	eor	r9, r9
    2b6a:	93 94       	inc	r9
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    2b6c:	7c 01       	movw	r14, r24
    2b6e:	88 e0       	ldi	r24, 0x08	; 8
    2b70:	e8 0e       	add	r14, r24
    2b72:	f1 1c       	adc	r15, r1
    /*lint -save -e904 This function relaxes the coding standard somewhat to
    allow return statements within the function itself.  This is done in the
    interest of execution time efficiency. */
    for( ;; )
    {
        taskENTER_CRITICAL();
    2b74:	0f b6       	in	r0, 0x3f	; 63
    2b76:	f8 94       	cli
    2b78:	0f 92       	push	r0
        {
            /* Is there room on the queue now?  The running task must be the
            highest priority task wanting to access the queue.  If the head item
            in the queue is to be overwritten then it does not matter if the
            queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    2b7a:	f8 01       	movw	r30, r16
    2b7c:	92 8d       	ldd	r25, Z+26	; 0x1a
    2b7e:	83 8d       	ldd	r24, Z+27	; 0x1b
    2b80:	98 17       	cp	r25, r24
    2b82:	18 f0       	brcs	.+6      	; 0x2b8a <xQueueGenericSend+0x4e>
    2b84:	f2 e0       	ldi	r31, 0x02	; 2
    2b86:	af 12       	cpse	r10, r31
    2b88:	15 c0       	rjmp	.+42     	; 0x2bb4 <xQueueGenericSend+0x78>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    2b8a:	4a 2d       	mov	r20, r10
    2b8c:	b6 01       	movw	r22, r12
    2b8e:	c8 01       	movw	r24, r16
    2b90:	d7 de       	rcall	.-594    	; 0x2940 <prvCopyDataToQueue>

                    /* If there was a task waiting for data to arrive on the
                    queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    2b92:	f8 01       	movw	r30, r16
    2b94:	91 89       	ldd	r25, Z+17	; 0x11
    2b96:	99 23       	and	r25, r25
    2b98:	39 f0       	breq	.+14     	; 0x2ba8 <xQueueGenericSend+0x6c>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    2b9a:	c8 01       	movw	r24, r16
    2b9c:	41 96       	adiw	r24, 0x11	; 17
    2b9e:	8f d3       	rcall	.+1822   	; 0x32be <xTaskRemoveFromEventList>
    2ba0:	88 23       	and	r24, r24
                        {
                            /* The unblocked task has a priority higher than
                            our own so yield immediately.  Yes it is ok to do
                            this from within the critical section - the kernel
                            takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
    2ba2:	21 f0       	breq	.+8      	; 0x2bac <xQueueGenericSend+0x70>
    2ba4:	08 de       	rcall	.-1008   	; 0x27b6 <vPortYield>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
    2ba6:	02 c0       	rjmp	.+4      	; 0x2bac <xQueueGenericSend+0x70>
                    {
                        /* This path is a special case that will only get
                        executed if the task was holding multiple mutexes and
                        the mutexes were given back in an order that is
                        different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
    2ba8:	81 11       	cpse	r24, r1
    2baa:	05 de       	rcall	.-1014   	; 0x27b6 <vPortYield>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
    2bac:	0f 90       	pop	r0
    2bae:	0f be       	out	0x3f, r0	; 63
                return pdPASS;
    2bb0:	81 e0       	ldi	r24, 0x01	; 1
    2bb2:	45 c0       	rjmp	.+138    	; 0x2c3e <xQueueGenericSend+0x102>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
    2bb4:	8c 81       	ldd	r24, Y+4	; 0x04
    2bb6:	9d 81       	ldd	r25, Y+5	; 0x05
    2bb8:	89 2b       	or	r24, r25
    2bba:	21 f4       	brne	.+8      	; 0x2bc4 <xQueueGenericSend+0x88>
                {
                    /* The queue was full and no block time is specified (or
                    the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
    2bbc:	0f 90       	pop	r0
    2bbe:	0f be       	out	0x3f, r0	; 63

                    /* Return to the original privilege level before exiting
                    the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
    2bc0:	80 e0       	ldi	r24, 0x00	; 0
    2bc2:	3d c0       	rjmp	.+122    	; 0x2c3e <xQueueGenericSend+0x102>
                }
                else if( xEntryTimeSet == pdFALSE )
    2bc4:	b1 10       	cpse	r11, r1
                {
                    /* The queue was full and a block time was specified so
                    configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
    2bc6:	04 c0       	rjmp	.+8      	; 0x2bd0 <xQueueGenericSend+0x94>
    2bc8:	ce 01       	movw	r24, r28
    2bca:	01 96       	adiw	r24, 0x01	; 1
                    xEntryTimeSet = pdTRUE;
    2bcc:	bc d3       	rcall	.+1912   	; 0x3346 <vTaskInternalSetTimeOutState>
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
    2bce:	b9 2c       	mov	r11, r9
    2bd0:	0f 90       	pop	r0

        /* Interrupts and other tasks can send to and receive from the queue
        now the critical section has been exited. */

        vTaskSuspendAll();
    2bd2:	0f be       	out	0x3f, r0	; 63
    2bd4:	9e d1       	rcall	.+828    	; 0x2f12 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
    2bd6:	0f b6       	in	r0, 0x3f	; 63
    2bd8:	f8 94       	cli
    2bda:	0f 92       	push	r0
    2bdc:	f8 01       	movw	r30, r16
    2bde:	85 8d       	ldd	r24, Z+29	; 0x1d
    2be0:	8f 3f       	cpi	r24, 0xFF	; 255
    2be2:	09 f4       	brne	.+2      	; 0x2be6 <xQueueGenericSend+0xaa>
    2be4:	15 8e       	std	Z+29, r1	; 0x1d
    2be6:	f8 01       	movw	r30, r16
    2be8:	86 8d       	ldd	r24, Z+30	; 0x1e
    2bea:	8f 3f       	cpi	r24, 0xFF	; 255
    2bec:	09 f4       	brne	.+2      	; 0x2bf0 <xQueueGenericSend+0xb4>
    2bee:	16 8e       	std	Z+30, r1	; 0x1e
    2bf0:	0f 90       	pop	r0

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    2bf2:	0f be       	out	0x3f, r0	; 63
    2bf4:	be 01       	movw	r22, r28
    2bf6:	6c 5f       	subi	r22, 0xFC	; 252
    2bf8:	7f 4f       	sbci	r23, 0xFF	; 255
    2bfa:	ce 01       	movw	r24, r28
    2bfc:	01 96       	adiw	r24, 0x01	; 1
    2bfe:	ae d3       	rcall	.+1884   	; 0x335c <xTaskCheckForTimeOut>
    2c00:	81 11       	cpse	r24, r1
    2c02:	19 c0       	rjmp	.+50     	; 0x2c36 <xQueueGenericSend+0xfa>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

    taskENTER_CRITICAL();
    2c04:	0f b6       	in	r0, 0x3f	; 63
    2c06:	f8 94       	cli
    2c08:	0f 92       	push	r0
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    2c0a:	f8 01       	movw	r30, r16
    2c0c:	92 8d       	ldd	r25, Z+26	; 0x1a
    2c0e:	83 8d       	ldd	r24, Z+27	; 0x1b
        else
        {
            xReturn = pdFALSE;
        }
    }
    taskEXIT_CRITICAL();
    2c10:	0f 90       	pop	r0
        prvLockQueue( pxQueue );

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
    2c12:	0f be       	out	0x3f, r0	; 63
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    2c14:	98 13       	cpse	r25, r24
    2c16:	0b c0       	rjmp	.+22     	; 0x2c2e <xQueueGenericSend+0xf2>
    2c18:	6c 81       	ldd	r22, Y+4	; 0x04
    2c1a:	7d 81       	ldd	r23, Y+5	; 0x05
                /* Unlocking the queue means queue events can effect the
                event list.  It is possible that interrupts occurring now
                remove this task from the event list again - but as the
                scheduler is suspended the task will go onto the pending
                ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
    2c1c:	c7 01       	movw	r24, r14
                /* Resuming the scheduler will move tasks from the pending
                ready list into the ready list - so it is feasible that this
                task is already in a ready list before it yields - in which
                case the yield will not cause a context switch unless there
                is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
    2c1e:	3f d3       	rcall	.+1662   	; 0x329e <vTaskPlaceOnEventList>
    2c20:	c8 01       	movw	r24, r16
                {
                    portYIELD_WITHIN_API();
    2c22:	ec de       	rcall	.-552    	; 0x29fc <prvUnlockQueue>
    2c24:	33 d2       	rcall	.+1126   	; 0x308c <xTaskResumeAll>
    2c26:	81 11       	cpse	r24, r1
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
    2c28:	a5 cf       	rjmp	.-182    	; 0x2b74 <xQueueGenericSend+0x38>
    2c2a:	c5 dd       	rcall	.-1142   	; 0x27b6 <vPortYield>
    2c2c:	a3 cf       	rjmp	.-186    	; 0x2b74 <xQueueGenericSend+0x38>
                ( void ) xTaskResumeAll();
    2c2e:	c8 01       	movw	r24, r16
    2c30:	e5 de       	rcall	.-566    	; 0x29fc <prvUnlockQueue>
    2c32:	2c d2       	rcall	.+1112   	; 0x308c <xTaskResumeAll>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
    2c34:	9f cf       	rjmp	.-194    	; 0x2b74 <xQueueGenericSend+0x38>
    2c36:	c8 01       	movw	r24, r16
    2c38:	e1 de       	rcall	.-574    	; 0x29fc <prvUnlockQueue>
            ( void ) xTaskResumeAll();
    2c3a:	28 d2       	rcall	.+1104   	; 0x308c <xTaskResumeAll>
    2c3c:	80 e0       	ldi	r24, 0x00	; 0

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
    2c3e:	0f 90       	pop	r0
        }
    } /*lint -restore */
}
    2c40:	0f 90       	pop	r0
    2c42:	0f 90       	pop	r0
    2c44:	0f 90       	pop	r0
    2c46:	0f 90       	pop	r0
    2c48:	df 91       	pop	r29
    2c4a:	cf 91       	pop	r28
    2c4c:	1f 91       	pop	r17
    2c4e:	0f 91       	pop	r16
    2c50:	ff 90       	pop	r15
    2c52:	ef 90       	pop	r14
    2c54:	df 90       	pop	r13
    2c56:	cf 90       	pop	r12
    2c58:	bf 90       	pop	r11
    2c5a:	af 90       	pop	r10
    2c5c:	9f 90       	pop	r9
    2c5e:	08 95       	ret

00002c60 <prvResetNextTaskUnblockTime>:
    2c60:	e0 91 a5 0d 	lds	r30, 0x0DA5	; 0x800da5 <pxDelayedTaskList>
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    2c64:	f0 91 a6 0d 	lds	r31, 0x0DA6	; 0x800da6 <pxDelayedTaskList+0x1>
    2c68:	80 81       	ld	r24, Z
    2c6a:	81 11       	cpse	r24, r1
    2c6c:	07 c0       	rjmp	.+14     	; 0x2c7c <prvResetNextTaskUnblockTime+0x1c>
    2c6e:	8f ef       	ldi	r24, 0xFF	; 255
    2c70:	9f ef       	ldi	r25, 0xFF	; 255
    2c72:	90 93 87 0d 	sts	0x0D87, r25	; 0x800d87 <xNextTaskUnblockTime+0x1>
    2c76:	80 93 86 0d 	sts	0x0D86, r24	; 0x800d86 <xNextTaskUnblockTime>
    2c7a:	08 95       	ret
    2c7c:	e0 91 a5 0d 	lds	r30, 0x0DA5	; 0x800da5 <pxDelayedTaskList>
    2c80:	f0 91 a6 0d 	lds	r31, 0x0DA6	; 0x800da6 <pxDelayedTaskList+0x1>
    2c84:	05 80       	ldd	r0, Z+5	; 0x05
    2c86:	f6 81       	ldd	r31, Z+6	; 0x06
    2c88:	e0 2d       	mov	r30, r0
    2c8a:	06 80       	ldd	r0, Z+6	; 0x06
    2c8c:	f7 81       	ldd	r31, Z+7	; 0x07
    2c8e:	e0 2d       	mov	r30, r0
    2c90:	82 81       	ldd	r24, Z+2	; 0x02
    2c92:	93 81       	ldd	r25, Z+3	; 0x03
    2c94:	90 93 87 0d 	sts	0x0D87, r25	; 0x800d87 <xNextTaskUnblockTime+0x1>
    2c98:	80 93 86 0d 	sts	0x0D86, r24	; 0x800d86 <xNextTaskUnblockTime>
    2c9c:	08 95       	ret

00002c9e <prvAddCurrentTaskToDelayedList>:
    2c9e:	0f 93       	push	r16
    2ca0:	1f 93       	push	r17
    2ca2:	cf 93       	push	r28
    2ca4:	df 93       	push	r29
    2ca6:	ec 01       	movw	r28, r24
    2ca8:	00 91 8e 0d 	lds	r16, 0x0D8E	; 0x800d8e <xTickCount>
    2cac:	10 91 8f 0d 	lds	r17, 0x0D8F	; 0x800d8f <xTickCount+0x1>
    2cb0:	80 91 cb 0d 	lds	r24, 0x0DCB	; 0x800dcb <pxCurrentTCB>
    2cb4:	90 91 cc 0d 	lds	r25, 0x0DCC	; 0x800dcc <pxCurrentTCB+0x1>
    2cb8:	02 96       	adiw	r24, 0x02	; 2
    2cba:	e4 dc       	rcall	.-1592   	; 0x2684 <uxListRemove>
    2cbc:	c0 0f       	add	r28, r16
    2cbe:	d1 1f       	adc	r29, r17
    2cc0:	e0 91 cb 0d 	lds	r30, 0x0DCB	; 0x800dcb <pxCurrentTCB>
    2cc4:	f0 91 cc 0d 	lds	r31, 0x0DCC	; 0x800dcc <pxCurrentTCB+0x1>
    2cc8:	d3 83       	std	Z+3, r29	; 0x03
    2cca:	c2 83       	std	Z+2, r28	; 0x02
    2ccc:	c0 17       	cp	r28, r16
    2cce:	d1 07       	cpc	r29, r17
    2cd0:	60 f4       	brcc	.+24     	; 0x2cea <prvAddCurrentTaskToDelayedList+0x4c>
    2cd2:	60 91 cb 0d 	lds	r22, 0x0DCB	; 0x800dcb <pxCurrentTCB>
    2cd6:	70 91 cc 0d 	lds	r23, 0x0DCC	; 0x800dcc <pxCurrentTCB+0x1>
    2cda:	80 91 a3 0d 	lds	r24, 0x0DA3	; 0x800da3 <pxOverflowDelayedTaskList>
    2cde:	90 91 a4 0d 	lds	r25, 0x0DA4	; 0x800da4 <pxOverflowDelayedTaskList+0x1>
    2ce2:	6e 5f       	subi	r22, 0xFE	; 254
    2ce4:	7f 4f       	sbci	r23, 0xFF	; 255
    2ce6:	9d dc       	rcall	.-1734   	; 0x2622 <vListInsert>
    2ce8:	16 c0       	rjmp	.+44     	; 0x2d16 <prvAddCurrentTaskToDelayedList+0x78>
    2cea:	60 91 cb 0d 	lds	r22, 0x0DCB	; 0x800dcb <pxCurrentTCB>
    2cee:	70 91 cc 0d 	lds	r23, 0x0DCC	; 0x800dcc <pxCurrentTCB+0x1>
    2cf2:	80 91 a5 0d 	lds	r24, 0x0DA5	; 0x800da5 <pxDelayedTaskList>
    2cf6:	90 91 a6 0d 	lds	r25, 0x0DA6	; 0x800da6 <pxDelayedTaskList+0x1>
    2cfa:	6e 5f       	subi	r22, 0xFE	; 254
    2cfc:	7f 4f       	sbci	r23, 0xFF	; 255
    2cfe:	91 dc       	rcall	.-1758   	; 0x2622 <vListInsert>
    2d00:	80 91 86 0d 	lds	r24, 0x0D86	; 0x800d86 <xNextTaskUnblockTime>
    2d04:	90 91 87 0d 	lds	r25, 0x0D87	; 0x800d87 <xNextTaskUnblockTime+0x1>
    2d08:	c8 17       	cp	r28, r24
    2d0a:	d9 07       	cpc	r29, r25
    2d0c:	20 f4       	brcc	.+8      	; 0x2d16 <prvAddCurrentTaskToDelayedList+0x78>
    2d0e:	d0 93 87 0d 	sts	0x0D87, r29	; 0x800d87 <xNextTaskUnblockTime+0x1>
    2d12:	c0 93 86 0d 	sts	0x0D86, r28	; 0x800d86 <xNextTaskUnblockTime>
    2d16:	df 91       	pop	r29
    2d18:	cf 91       	pop	r28
    2d1a:	1f 91       	pop	r17
    2d1c:	0f 91       	pop	r16
    2d1e:	08 95       	ret

00002d20 <xTaskCreateStatic>:
    2d20:	6f 92       	push	r6
    2d22:	7f 92       	push	r7
    2d24:	8f 92       	push	r8
    2d26:	9f 92       	push	r9
    2d28:	af 92       	push	r10
    2d2a:	bf 92       	push	r11
    2d2c:	cf 92       	push	r12
    2d2e:	df 92       	push	r13
    2d30:	ef 92       	push	r14
    2d32:	ff 92       	push	r15
    2d34:	0f 93       	push	r16
    2d36:	cf 93       	push	r28
    2d38:	df 93       	push	r29
    2d3a:	c1 14       	cp	r12, r1
    2d3c:	d1 04       	cpc	r13, r1
    2d3e:	09 f4       	brne	.+2      	; 0x2d42 <xTaskCreateStatic+0x22>
    2d40:	cf c0       	rjmp	.+414    	; 0x2ee0 <xTaskCreateStatic+0x1c0>
    2d42:	e1 14       	cp	r14, r1
    2d44:	f1 04       	cpc	r15, r1
    2d46:	09 f4       	brne	.+2      	; 0x2d4a <xTaskCreateStatic+0x2a>
    2d48:	ce c0       	rjmp	.+412    	; 0x2ee6 <xTaskCreateStatic+0x1c6>
    2d4a:	e6 01       	movw	r28, r12
    2d4c:	59 01       	movw	r10, r18
    2d4e:	3a 01       	movw	r6, r20
    2d50:	4b 01       	movw	r8, r22
    2d52:	6c 01       	movw	r12, r24
    2d54:	f8 8e       	std	Y+24, r15	; 0x18
    2d56:	ef 8a       	std	Y+23, r14	; 0x17
    2d58:	65 ea       	ldi	r22, 0xA5	; 165
    2d5a:	70 e0       	ldi	r23, 0x00	; 0
    2d5c:	c7 01       	movw	r24, r14
    2d5e:	0e 94 12 1f 	call	0x3e24	; 0x3e24 <memset>
    2d62:	81 e0       	ldi	r24, 0x01	; 1
    2d64:	68 1a       	sub	r6, r24
    2d66:	71 08       	sbc	r7, r1
    2d68:	ef 88       	ldd	r14, Y+23	; 0x17
    2d6a:	f8 8c       	ldd	r15, Y+24	; 0x18
    2d6c:	e6 0c       	add	r14, r6
    2d6e:	f7 1c       	adc	r15, r7
    2d70:	d4 01       	movw	r26, r8
    2d72:	8c 91       	ld	r24, X
    2d74:	89 8f       	std	Y+25, r24	; 0x19
    2d76:	8c 91       	ld	r24, X
    2d78:	88 23       	and	r24, r24
    2d7a:	a1 f0       	breq	.+40     	; 0x2da4 <xTaskCreateStatic+0x84>
    2d7c:	ae 01       	movw	r20, r28
    2d7e:	46 5e       	subi	r20, 0xE6	; 230
    2d80:	5f 4f       	sbci	r21, 0xFF	; 255
    2d82:	f4 01       	movw	r30, r8
    2d84:	31 96       	adiw	r30, 0x01	; 1
    2d86:	b8 e0       	ldi	r27, 0x08	; 8
    2d88:	8b 0e       	add	r8, r27
    2d8a:	91 1c       	adc	r9, r1
    2d8c:	cf 01       	movw	r24, r30
    2d8e:	21 91       	ld	r18, Z+
    2d90:	da 01       	movw	r26, r20
    2d92:	2d 93       	st	X+, r18
    2d94:	ad 01       	movw	r20, r26
    2d96:	dc 01       	movw	r26, r24
    2d98:	8c 91       	ld	r24, X
    2d9a:	88 23       	and	r24, r24
    2d9c:	19 f0       	breq	.+6      	; 0x2da4 <xTaskCreateStatic+0x84>
    2d9e:	e8 15       	cp	r30, r8
    2da0:	f9 05       	cpc	r31, r9
    2da2:	a1 f7       	brne	.-24     	; 0x2d8c <xTaskCreateStatic+0x6c>
    2da4:	18 a2       	std	Y+32, r1	; 0x20
    2da6:	04 30       	cpi	r16, 0x04	; 4
    2da8:	08 f0       	brcs	.+2      	; 0x2dac <xTaskCreateStatic+0x8c>
    2daa:	03 e0       	ldi	r16, 0x03	; 3
    2dac:	0e 8b       	std	Y+22, r16	; 0x16
    2dae:	09 a3       	std	Y+33, r16	; 0x21
    2db0:	1a a2       	std	Y+34, r1	; 0x22
    2db2:	4e 01       	movw	r8, r28
    2db4:	b2 e0       	ldi	r27, 0x02	; 2
    2db6:	8b 0e       	add	r8, r27
    2db8:	91 1c       	adc	r9, r1
    2dba:	c4 01       	movw	r24, r8
    2dbc:	0d dc       	rcall	.-2022   	; 0x25d8 <vListInitialiseItem>
    2dbe:	ce 01       	movw	r24, r28
    2dc0:	0c 96       	adiw	r24, 0x0c	; 12
    2dc2:	0a dc       	rcall	.-2028   	; 0x25d8 <vListInitialiseItem>
    2dc4:	d9 87       	std	Y+9, r29	; 0x09
    2dc6:	c8 87       	std	Y+8, r28	; 0x08
    2dc8:	84 e0       	ldi	r24, 0x04	; 4
    2dca:	90 e0       	ldi	r25, 0x00	; 0
    2dcc:	80 1b       	sub	r24, r16
    2dce:	91 09       	sbc	r25, r1
    2dd0:	9d 87       	std	Y+13, r25	; 0x0d
    2dd2:	8c 87       	std	Y+12, r24	; 0x0c
    2dd4:	db 8b       	std	Y+19, r29	; 0x13
    2dd6:	ca 8b       	std	Y+18, r28	; 0x12
    2dd8:	1c a2       	std	Y+36, r1	; 0x24
    2dda:	1b a2       	std	Y+35, r1	; 0x23
    2ddc:	1d a2       	std	Y+37, r1	; 0x25
    2dde:	1e a2       	std	Y+38, r1	; 0x26
    2de0:	1f a2       	std	Y+39, r1	; 0x27
    2de2:	18 a6       	std	Y+40, r1	; 0x28
    2de4:	19 a6       	std	Y+41, r1	; 0x29
    2de6:	a5 01       	movw	r20, r10
    2de8:	b6 01       	movw	r22, r12
    2dea:	c7 01       	movw	r24, r14
    2dec:	72 dc       	rcall	.-1820   	; 0x26d2 <pxPortInitialiseStack>
    2dee:	99 83       	std	Y+1, r25	; 0x01
    2df0:	88 83       	st	Y, r24
    2df2:	0f b6       	in	r0, 0x3f	; 63
    2df4:	f8 94       	cli
    2df6:	0f 92       	push	r0
    2df8:	80 91 90 0d 	lds	r24, 0x0D90	; 0x800d90 <uxCurrentNumberOfTasks>
    2dfc:	8f 5f       	subi	r24, 0xFF	; 255
    2dfe:	80 93 90 0d 	sts	0x0D90, r24	; 0x800d90 <uxCurrentNumberOfTasks>
    2e02:	80 91 cb 0d 	lds	r24, 0x0DCB	; 0x800dcb <pxCurrentTCB>
    2e06:	90 91 cc 0d 	lds	r25, 0x0DCC	; 0x800dcc <pxCurrentTCB+0x1>
    2e0a:	89 2b       	or	r24, r25
    2e0c:	69 f5       	brne	.+90     	; 0x2e68 <xTaskCreateStatic+0x148>
    2e0e:	d0 93 cc 0d 	sts	0x0DCC, r29	; 0x800dcc <pxCurrentTCB+0x1>
    2e12:	c0 93 cb 0d 	sts	0x0DCB, r28	; 0x800dcb <pxCurrentTCB>
    2e16:	80 91 90 0d 	lds	r24, 0x0D90	; 0x800d90 <uxCurrentNumberOfTasks>
    2e1a:	81 30       	cpi	r24, 0x01	; 1
    2e1c:	a9 f5       	brne	.+106    	; 0x2e88 <xTaskCreateStatic+0x168>
    2e1e:	87 ea       	ldi	r24, 0xA7	; 167
    2e20:	9d e0       	ldi	r25, 0x0D	; 13
    2e22:	cc db       	rcall	.-2152   	; 0x25bc <vListInitialise>
    2e24:	80 eb       	ldi	r24, 0xB0	; 176
    2e26:	9d e0       	ldi	r25, 0x0D	; 13
    2e28:	c9 db       	rcall	.-2158   	; 0x25bc <vListInitialise>
    2e2a:	89 eb       	ldi	r24, 0xB9	; 185
    2e2c:	9d e0       	ldi	r25, 0x0D	; 13
    2e2e:	c6 db       	rcall	.-2164   	; 0x25bc <vListInitialise>
    2e30:	82 ec       	ldi	r24, 0xC2	; 194
    2e32:	9d e0       	ldi	r25, 0x0D	; 13
    2e34:	c3 db       	rcall	.-2170   	; 0x25bc <vListInitialise>
    2e36:	8c e7       	ldi	r24, 0x7C	; 124
    2e38:	9d e0       	ldi	r25, 0x0D	; 13
    2e3a:	c0 db       	rcall	.-2176   	; 0x25bc <vListInitialise>
    2e3c:	83 e7       	ldi	r24, 0x73	; 115
    2e3e:	9d e0       	ldi	r25, 0x0D	; 13
    2e40:	bd db       	rcall	.-2182   	; 0x25bc <vListInitialise>
    2e42:	8a e9       	ldi	r24, 0x9A	; 154
    2e44:	9d e0       	ldi	r25, 0x0D	; 13
    2e46:	ba db       	rcall	.-2188   	; 0x25bc <vListInitialise>
    2e48:	81 e9       	ldi	r24, 0x91	; 145
    2e4a:	9d e0       	ldi	r25, 0x0D	; 13
    2e4c:	b7 db       	rcall	.-2194   	; 0x25bc <vListInitialise>
    2e4e:	8c e7       	ldi	r24, 0x7C	; 124
    2e50:	9d e0       	ldi	r25, 0x0D	; 13
    2e52:	90 93 a6 0d 	sts	0x0DA6, r25	; 0x800da6 <pxDelayedTaskList+0x1>
    2e56:	80 93 a5 0d 	sts	0x0DA5, r24	; 0x800da5 <pxDelayedTaskList>
    2e5a:	83 e7       	ldi	r24, 0x73	; 115
    2e5c:	9d e0       	ldi	r25, 0x0D	; 13
    2e5e:	90 93 a4 0d 	sts	0x0DA4, r25	; 0x800da4 <pxOverflowDelayedTaskList+0x1>
    2e62:	80 93 a3 0d 	sts	0x0DA3, r24	; 0x800da3 <pxOverflowDelayedTaskList>
    2e66:	10 c0       	rjmp	.+32     	; 0x2e88 <xTaskCreateStatic+0x168>
    2e68:	80 91 8c 0d 	lds	r24, 0x0D8C	; 0x800d8c <xSchedulerRunning>
    2e6c:	81 11       	cpse	r24, r1
    2e6e:	0c c0       	rjmp	.+24     	; 0x2e88 <xTaskCreateStatic+0x168>
    2e70:	e0 91 cb 0d 	lds	r30, 0x0DCB	; 0x800dcb <pxCurrentTCB>
    2e74:	f0 91 cc 0d 	lds	r31, 0x0DCC	; 0x800dcc <pxCurrentTCB+0x1>
    2e78:	96 89       	ldd	r25, Z+22	; 0x16
    2e7a:	8e 89       	ldd	r24, Y+22	; 0x16
    2e7c:	89 17       	cp	r24, r25
    2e7e:	20 f0       	brcs	.+8      	; 0x2e88 <xTaskCreateStatic+0x168>
    2e80:	d0 93 cc 0d 	sts	0x0DCC, r29	; 0x800dcc <pxCurrentTCB+0x1>
    2e84:	c0 93 cb 0d 	sts	0x0DCB, r28	; 0x800dcb <pxCurrentTCB>
    2e88:	80 91 88 0d 	lds	r24, 0x0D88	; 0x800d88 <uxTaskNumber>
    2e8c:	8f 5f       	subi	r24, 0xFF	; 255
    2e8e:	80 93 88 0d 	sts	0x0D88, r24	; 0x800d88 <uxTaskNumber>
    2e92:	8e 89       	ldd	r24, Y+22	; 0x16
    2e94:	90 91 8d 0d 	lds	r25, 0x0D8D	; 0x800d8d <uxTopReadyPriority>
    2e98:	98 17       	cp	r25, r24
    2e9a:	10 f4       	brcc	.+4      	; 0x2ea0 <xTaskCreateStatic+0x180>
    2e9c:	80 93 8d 0d 	sts	0x0D8D, r24	; 0x800d8d <uxTopReadyPriority>
    2ea0:	90 e0       	ldi	r25, 0x00	; 0
    2ea2:	9c 01       	movw	r18, r24
    2ea4:	22 0f       	add	r18, r18
    2ea6:	33 1f       	adc	r19, r19
    2ea8:	22 0f       	add	r18, r18
    2eaa:	33 1f       	adc	r19, r19
    2eac:	22 0f       	add	r18, r18
    2eae:	33 1f       	adc	r19, r19
    2eb0:	82 0f       	add	r24, r18
    2eb2:	93 1f       	adc	r25, r19
    2eb4:	b4 01       	movw	r22, r8
    2eb6:	89 55       	subi	r24, 0x59	; 89
    2eb8:	92 4f       	sbci	r25, 0xF2	; 242
    2eba:	92 db       	rcall	.-2268   	; 0x25e0 <vListInsertEnd>
    2ebc:	0f 90       	pop	r0
    2ebe:	0f be       	out	0x3f, r0	; 63
    2ec0:	80 91 8c 0d 	lds	r24, 0x0D8C	; 0x800d8c <xSchedulerRunning>
    2ec4:	88 23       	and	r24, r24
    2ec6:	91 f0       	breq	.+36     	; 0x2eec <xTaskCreateStatic+0x1cc>
    2ec8:	e0 91 cb 0d 	lds	r30, 0x0DCB	; 0x800dcb <pxCurrentTCB>
    2ecc:	f0 91 cc 0d 	lds	r31, 0x0DCC	; 0x800dcc <pxCurrentTCB+0x1>
    2ed0:	96 89       	ldd	r25, Z+22	; 0x16
    2ed2:	8e 89       	ldd	r24, Y+22	; 0x16
    2ed4:	98 17       	cp	r25, r24
    2ed6:	68 f4       	brcc	.+26     	; 0x2ef2 <xTaskCreateStatic+0x1d2>
    2ed8:	6e dc       	rcall	.-1828   	; 0x27b6 <vPortYield>
    2eda:	8c 2f       	mov	r24, r28
    2edc:	9d 2f       	mov	r25, r29
    2ede:	0b c0       	rjmp	.+22     	; 0x2ef6 <xTaskCreateStatic+0x1d6>
    2ee0:	80 e0       	ldi	r24, 0x00	; 0
    2ee2:	90 e0       	ldi	r25, 0x00	; 0
    2ee4:	08 c0       	rjmp	.+16     	; 0x2ef6 <xTaskCreateStatic+0x1d6>
    2ee6:	80 e0       	ldi	r24, 0x00	; 0
    2ee8:	90 e0       	ldi	r25, 0x00	; 0
    2eea:	05 c0       	rjmp	.+10     	; 0x2ef6 <xTaskCreateStatic+0x1d6>
    2eec:	8c 2f       	mov	r24, r28
    2eee:	9d 2f       	mov	r25, r29
    2ef0:	02 c0       	rjmp	.+4      	; 0x2ef6 <xTaskCreateStatic+0x1d6>
    2ef2:	8c 2f       	mov	r24, r28
    2ef4:	9d 2f       	mov	r25, r29
    2ef6:	df 91       	pop	r29
    2ef8:	cf 91       	pop	r28
    2efa:	0f 91       	pop	r16
    2efc:	ff 90       	pop	r15
    2efe:	ef 90       	pop	r14
    2f00:	df 90       	pop	r13
    2f02:	cf 90       	pop	r12
    2f04:	bf 90       	pop	r11
    2f06:	af 90       	pop	r10
    2f08:	9f 90       	pop	r9
    2f0a:	8f 90       	pop	r8
    2f0c:	7f 90       	pop	r7
    2f0e:	6f 90       	pop	r6
    2f10:	08 95       	ret

00002f12 <vTaskSuspendAll>:
    2f12:	80 91 85 0d 	lds	r24, 0x0D85	; 0x800d85 <uxSchedulerSuspended>
    2f16:	8f 5f       	subi	r24, 0xFF	; 255
    2f18:	80 93 85 0d 	sts	0x0D85, r24	; 0x800d85 <uxSchedulerSuspended>
    2f1c:	08 95       	ret

00002f1e <xTaskIncrementTick>:
    2f1e:	cf 92       	push	r12
    2f20:	df 92       	push	r13
    2f22:	ef 92       	push	r14
    2f24:	ff 92       	push	r15
    2f26:	0f 93       	push	r16
    2f28:	1f 93       	push	r17
    2f2a:	cf 93       	push	r28
    2f2c:	df 93       	push	r29
    2f2e:	80 91 85 0d 	lds	r24, 0x0D85	; 0x800d85 <uxSchedulerSuspended>
    2f32:	81 11       	cpse	r24, r1
    2f34:	95 c0       	rjmp	.+298    	; 0x3060 <xTaskIncrementTick+0x142>
    2f36:	e0 90 8e 0d 	lds	r14, 0x0D8E	; 0x800d8e <xTickCount>
    2f3a:	f0 90 8f 0d 	lds	r15, 0x0D8F	; 0x800d8f <xTickCount+0x1>
    2f3e:	8f ef       	ldi	r24, 0xFF	; 255
    2f40:	e8 1a       	sub	r14, r24
    2f42:	f8 0a       	sbc	r15, r24
    2f44:	f0 92 8f 0d 	sts	0x0D8F, r15	; 0x800d8f <xTickCount+0x1>
    2f48:	e0 92 8e 0d 	sts	0x0D8E, r14	; 0x800d8e <xTickCount>
    2f4c:	e1 14       	cp	r14, r1
    2f4e:	f1 04       	cpc	r15, r1
    2f50:	b1 f4       	brne	.+44     	; 0x2f7e <xTaskIncrementTick+0x60>
    2f52:	80 91 a5 0d 	lds	r24, 0x0DA5	; 0x800da5 <pxDelayedTaskList>
    2f56:	90 91 a6 0d 	lds	r25, 0x0DA6	; 0x800da6 <pxDelayedTaskList+0x1>
    2f5a:	20 91 a3 0d 	lds	r18, 0x0DA3	; 0x800da3 <pxOverflowDelayedTaskList>
    2f5e:	30 91 a4 0d 	lds	r19, 0x0DA4	; 0x800da4 <pxOverflowDelayedTaskList+0x1>
    2f62:	30 93 a6 0d 	sts	0x0DA6, r19	; 0x800da6 <pxDelayedTaskList+0x1>
    2f66:	20 93 a5 0d 	sts	0x0DA5, r18	; 0x800da5 <pxDelayedTaskList>
    2f6a:	90 93 a4 0d 	sts	0x0DA4, r25	; 0x800da4 <pxOverflowDelayedTaskList+0x1>
    2f6e:	80 93 a3 0d 	sts	0x0DA3, r24	; 0x800da3 <pxOverflowDelayedTaskList>
    2f72:	80 91 89 0d 	lds	r24, 0x0D89	; 0x800d89 <xNumOfOverflows>
    2f76:	8f 5f       	subi	r24, 0xFF	; 255
    2f78:	80 93 89 0d 	sts	0x0D89, r24	; 0x800d89 <xNumOfOverflows>
    2f7c:	71 de       	rcall	.-798    	; 0x2c60 <prvResetNextTaskUnblockTime>
    2f7e:	80 91 86 0d 	lds	r24, 0x0D86	; 0x800d86 <xNextTaskUnblockTime>
    2f82:	90 91 87 0d 	lds	r25, 0x0D87	; 0x800d87 <xNextTaskUnblockTime+0x1>
    2f86:	e8 16       	cp	r14, r24
    2f88:	f9 06       	cpc	r15, r25
    2f8a:	10 f4       	brcc	.+4      	; 0x2f90 <xTaskIncrementTick+0x72>
    2f8c:	d1 2c       	mov	r13, r1
    2f8e:	50 c0       	rjmp	.+160    	; 0x3030 <xTaskIncrementTick+0x112>
    2f90:	d1 2c       	mov	r13, r1
    2f92:	cc 24       	eor	r12, r12
    2f94:	c3 94       	inc	r12
    2f96:	e0 91 a5 0d 	lds	r30, 0x0DA5	; 0x800da5 <pxDelayedTaskList>
    2f9a:	f0 91 a6 0d 	lds	r31, 0x0DA6	; 0x800da6 <pxDelayedTaskList+0x1>
    2f9e:	80 81       	ld	r24, Z
    2fa0:	81 11       	cpse	r24, r1
    2fa2:	07 c0       	rjmp	.+14     	; 0x2fb2 <xTaskIncrementTick+0x94>
    2fa4:	8f ef       	ldi	r24, 0xFF	; 255
    2fa6:	9f ef       	ldi	r25, 0xFF	; 255
    2fa8:	90 93 87 0d 	sts	0x0D87, r25	; 0x800d87 <xNextTaskUnblockTime+0x1>
    2fac:	80 93 86 0d 	sts	0x0D86, r24	; 0x800d86 <xNextTaskUnblockTime>
    2fb0:	3f c0       	rjmp	.+126    	; 0x3030 <xTaskIncrementTick+0x112>
    2fb2:	e0 91 a5 0d 	lds	r30, 0x0DA5	; 0x800da5 <pxDelayedTaskList>
    2fb6:	f0 91 a6 0d 	lds	r31, 0x0DA6	; 0x800da6 <pxDelayedTaskList+0x1>
    2fba:	05 80       	ldd	r0, Z+5	; 0x05
    2fbc:	f6 81       	ldd	r31, Z+6	; 0x06
    2fbe:	e0 2d       	mov	r30, r0
    2fc0:	c6 81       	ldd	r28, Z+6	; 0x06
    2fc2:	d7 81       	ldd	r29, Z+7	; 0x07
    2fc4:	8a 81       	ldd	r24, Y+2	; 0x02
    2fc6:	9b 81       	ldd	r25, Y+3	; 0x03
    2fc8:	e8 16       	cp	r14, r24
    2fca:	f9 06       	cpc	r15, r25
    2fcc:	28 f4       	brcc	.+10     	; 0x2fd8 <xTaskIncrementTick+0xba>
    2fce:	90 93 87 0d 	sts	0x0D87, r25	; 0x800d87 <xNextTaskUnblockTime+0x1>
    2fd2:	80 93 86 0d 	sts	0x0D86, r24	; 0x800d86 <xNextTaskUnblockTime>
    2fd6:	2c c0       	rjmp	.+88     	; 0x3030 <xTaskIncrementTick+0x112>
    2fd8:	8e 01       	movw	r16, r28
    2fda:	0e 5f       	subi	r16, 0xFE	; 254
    2fdc:	1f 4f       	sbci	r17, 0xFF	; 255
    2fde:	c8 01       	movw	r24, r16
    2fe0:	51 db       	rcall	.-2398   	; 0x2684 <uxListRemove>
    2fe2:	8c 89       	ldd	r24, Y+20	; 0x14
    2fe4:	9d 89       	ldd	r25, Y+21	; 0x15
    2fe6:	89 2b       	or	r24, r25
    2fe8:	19 f0       	breq	.+6      	; 0x2ff0 <xTaskIncrementTick+0xd2>
    2fea:	ce 01       	movw	r24, r28
    2fec:	0c 96       	adiw	r24, 0x0c	; 12
    2fee:	4a db       	rcall	.-2412   	; 0x2684 <uxListRemove>
    2ff0:	8e 89       	ldd	r24, Y+22	; 0x16
    2ff2:	90 91 8d 0d 	lds	r25, 0x0D8D	; 0x800d8d <uxTopReadyPriority>
    2ff6:	98 17       	cp	r25, r24
    2ff8:	10 f4       	brcc	.+4      	; 0x2ffe <xTaskIncrementTick+0xe0>
    2ffa:	80 93 8d 0d 	sts	0x0D8D, r24	; 0x800d8d <uxTopReadyPriority>
    2ffe:	90 e0       	ldi	r25, 0x00	; 0
    3000:	9c 01       	movw	r18, r24
    3002:	22 0f       	add	r18, r18
    3004:	33 1f       	adc	r19, r19
    3006:	22 0f       	add	r18, r18
    3008:	33 1f       	adc	r19, r19
    300a:	22 0f       	add	r18, r18
    300c:	33 1f       	adc	r19, r19
    300e:	82 0f       	add	r24, r18
    3010:	93 1f       	adc	r25, r19
    3012:	b8 01       	movw	r22, r16
    3014:	89 55       	subi	r24, 0x59	; 89
    3016:	92 4f       	sbci	r25, 0xF2	; 242
    3018:	e3 da       	rcall	.-2618   	; 0x25e0 <vListInsertEnd>
    301a:	e0 91 cb 0d 	lds	r30, 0x0DCB	; 0x800dcb <pxCurrentTCB>
    301e:	f0 91 cc 0d 	lds	r31, 0x0DCC	; 0x800dcc <pxCurrentTCB+0x1>
    3022:	9e 89       	ldd	r25, Y+22	; 0x16
    3024:	86 89       	ldd	r24, Z+22	; 0x16
    3026:	98 17       	cp	r25, r24
    3028:	08 f4       	brcc	.+2      	; 0x302c <xTaskIncrementTick+0x10e>
    302a:	b5 cf       	rjmp	.-150    	; 0x2f96 <xTaskIncrementTick+0x78>
    302c:	dc 2c       	mov	r13, r12
    302e:	b3 cf       	rjmp	.-154    	; 0x2f96 <xTaskIncrementTick+0x78>
    3030:	e0 91 cb 0d 	lds	r30, 0x0DCB	; 0x800dcb <pxCurrentTCB>
    3034:	f0 91 cc 0d 	lds	r31, 0x0DCC	; 0x800dcc <pxCurrentTCB+0x1>
    3038:	86 89       	ldd	r24, Z+22	; 0x16
    303a:	90 e0       	ldi	r25, 0x00	; 0
    303c:	fc 01       	movw	r30, r24
    303e:	ee 0f       	add	r30, r30
    3040:	ff 1f       	adc	r31, r31
    3042:	ee 0f       	add	r30, r30
    3044:	ff 1f       	adc	r31, r31
    3046:	ee 0f       	add	r30, r30
    3048:	ff 1f       	adc	r31, r31
    304a:	8e 0f       	add	r24, r30
    304c:	9f 1f       	adc	r25, r31
    304e:	fc 01       	movw	r30, r24
    3050:	e9 55       	subi	r30, 0x59	; 89
    3052:	f2 4f       	sbci	r31, 0xF2	; 242
    3054:	80 81       	ld	r24, Z
    3056:	82 30       	cpi	r24, 0x02	; 2
    3058:	48 f0       	brcs	.+18     	; 0x306c <xTaskIncrementTick+0x14e>
    305a:	dd 24       	eor	r13, r13
    305c:	d3 94       	inc	r13
    305e:	06 c0       	rjmp	.+12     	; 0x306c <xTaskIncrementTick+0x14e>
    3060:	80 91 8b 0d 	lds	r24, 0x0D8B	; 0x800d8b <uxPendedTicks>
    3064:	8f 5f       	subi	r24, 0xFF	; 255
    3066:	80 93 8b 0d 	sts	0x0D8B, r24	; 0x800d8b <uxPendedTicks>
    306a:	d1 2c       	mov	r13, r1
    306c:	80 91 8a 0d 	lds	r24, 0x0D8A	; 0x800d8a <xYieldPending>
    3070:	88 23       	and	r24, r24
    3072:	11 f0       	breq	.+4      	; 0x3078 <xTaskIncrementTick+0x15a>
    3074:	dd 24       	eor	r13, r13
    3076:	d3 94       	inc	r13
    3078:	8d 2d       	mov	r24, r13
    307a:	df 91       	pop	r29
    307c:	cf 91       	pop	r28
    307e:	1f 91       	pop	r17
    3080:	0f 91       	pop	r16
    3082:	ff 90       	pop	r15
    3084:	ef 90       	pop	r14
    3086:	df 90       	pop	r13
    3088:	cf 90       	pop	r12
    308a:	08 95       	ret

0000308c <xTaskResumeAll>:
    308c:	df 92       	push	r13
    308e:	ef 92       	push	r14
    3090:	ff 92       	push	r15
    3092:	0f 93       	push	r16
    3094:	1f 93       	push	r17
    3096:	cf 93       	push	r28
    3098:	df 93       	push	r29
    309a:	0f b6       	in	r0, 0x3f	; 63
    309c:	f8 94       	cli
    309e:	0f 92       	push	r0
    30a0:	80 91 85 0d 	lds	r24, 0x0D85	; 0x800d85 <uxSchedulerSuspended>
    30a4:	81 50       	subi	r24, 0x01	; 1
    30a6:	80 93 85 0d 	sts	0x0D85, r24	; 0x800d85 <uxSchedulerSuspended>
    30aa:	80 91 85 0d 	lds	r24, 0x0D85	; 0x800d85 <uxSchedulerSuspended>
    30ae:	81 11       	cpse	r24, r1
    30b0:	59 c0       	rjmp	.+178    	; 0x3164 <xTaskResumeAll+0xd8>
    30b2:	80 91 90 0d 	lds	r24, 0x0D90	; 0x800d90 <uxCurrentNumberOfTasks>
    30b6:	81 11       	cpse	r24, r1
    30b8:	30 c0       	rjmp	.+96     	; 0x311a <xTaskResumeAll+0x8e>
    30ba:	57 c0       	rjmp	.+174    	; 0x316a <xTaskResumeAll+0xde>
    30bc:	d7 01       	movw	r26, r14
    30be:	15 96       	adiw	r26, 0x05	; 5
    30c0:	ed 91       	ld	r30, X+
    30c2:	fc 91       	ld	r31, X
    30c4:	16 97       	sbiw	r26, 0x06	; 6
    30c6:	c6 81       	ldd	r28, Z+6	; 0x06
    30c8:	d7 81       	ldd	r29, Z+7	; 0x07
    30ca:	ce 01       	movw	r24, r28
    30cc:	0c 96       	adiw	r24, 0x0c	; 12
    30ce:	da da       	rcall	.-2636   	; 0x2684 <uxListRemove>
    30d0:	8e 01       	movw	r16, r28
    30d2:	0e 5f       	subi	r16, 0xFE	; 254
    30d4:	1f 4f       	sbci	r17, 0xFF	; 255
    30d6:	c8 01       	movw	r24, r16
    30d8:	d5 da       	rcall	.-2646   	; 0x2684 <uxListRemove>
    30da:	8e 89       	ldd	r24, Y+22	; 0x16
    30dc:	90 91 8d 0d 	lds	r25, 0x0D8D	; 0x800d8d <uxTopReadyPriority>
    30e0:	98 17       	cp	r25, r24
    30e2:	10 f4       	brcc	.+4      	; 0x30e8 <xTaskResumeAll+0x5c>
    30e4:	80 93 8d 0d 	sts	0x0D8D, r24	; 0x800d8d <uxTopReadyPriority>
    30e8:	90 e0       	ldi	r25, 0x00	; 0
    30ea:	9c 01       	movw	r18, r24
    30ec:	22 0f       	add	r18, r18
    30ee:	33 1f       	adc	r19, r19
    30f0:	22 0f       	add	r18, r18
    30f2:	33 1f       	adc	r19, r19
    30f4:	22 0f       	add	r18, r18
    30f6:	33 1f       	adc	r19, r19
    30f8:	82 0f       	add	r24, r18
    30fa:	93 1f       	adc	r25, r19
    30fc:	b8 01       	movw	r22, r16
    30fe:	89 55       	subi	r24, 0x59	; 89
    3100:	92 4f       	sbci	r25, 0xF2	; 242
    3102:	6e da       	rcall	.-2852   	; 0x25e0 <vListInsertEnd>
    3104:	e0 91 cb 0d 	lds	r30, 0x0DCB	; 0x800dcb <pxCurrentTCB>
    3108:	f0 91 cc 0d 	lds	r31, 0x0DCC	; 0x800dcc <pxCurrentTCB+0x1>
    310c:	9e 89       	ldd	r25, Y+22	; 0x16
    310e:	86 89       	ldd	r24, Z+22	; 0x16
    3110:	98 17       	cp	r25, r24
    3112:	68 f0       	brcs	.+26     	; 0x312e <xTaskResumeAll+0xa2>
    3114:	d0 92 8a 0d 	sts	0x0D8A, r13	; 0x800d8a <xYieldPending>
    3118:	0a c0       	rjmp	.+20     	; 0x312e <xTaskResumeAll+0xa2>
    311a:	c0 e0       	ldi	r28, 0x00	; 0
    311c:	d0 e0       	ldi	r29, 0x00	; 0
    311e:	0f 2e       	mov	r0, r31
    3120:	fa e9       	ldi	r31, 0x9A	; 154
    3122:	ef 2e       	mov	r14, r31
    3124:	fd e0       	ldi	r31, 0x0D	; 13
    3126:	ff 2e       	mov	r15, r31
    3128:	f0 2d       	mov	r31, r0
    312a:	dd 24       	eor	r13, r13
    312c:	d3 94       	inc	r13
    312e:	f7 01       	movw	r30, r14
    3130:	80 81       	ld	r24, Z
    3132:	81 11       	cpse	r24, r1
    3134:	c3 cf       	rjmp	.-122    	; 0x30bc <xTaskResumeAll+0x30>
    3136:	cd 2b       	or	r28, r29
    3138:	09 f0       	breq	.+2      	; 0x313c <xTaskResumeAll+0xb0>
    313a:	92 dd       	rcall	.-1244   	; 0x2c60 <prvResetNextTaskUnblockTime>
    313c:	c0 91 8b 0d 	lds	r28, 0x0D8B	; 0x800d8b <uxPendedTicks>
    3140:	cc 23       	and	r28, r28
    3142:	49 f0       	breq	.+18     	; 0x3156 <xTaskResumeAll+0xca>
    3144:	d1 e0       	ldi	r29, 0x01	; 1
    3146:	eb de       	rcall	.-554    	; 0x2f1e <xTaskIncrementTick>
    3148:	81 11       	cpse	r24, r1
    314a:	d0 93 8a 0d 	sts	0x0D8A, r29	; 0x800d8a <xYieldPending>
    314e:	c1 50       	subi	r28, 0x01	; 1
    3150:	d1 f7       	brne	.-12     	; 0x3146 <xTaskResumeAll+0xba>
    3152:	10 92 8b 0d 	sts	0x0D8B, r1	; 0x800d8b <uxPendedTicks>
    3156:	80 91 8a 0d 	lds	r24, 0x0D8A	; 0x800d8a <xYieldPending>
    315a:	88 23       	and	r24, r24
    315c:	29 f0       	breq	.+10     	; 0x3168 <xTaskResumeAll+0xdc>
    315e:	2b db       	rcall	.-2474   	; 0x27b6 <vPortYield>
    3160:	81 e0       	ldi	r24, 0x01	; 1
    3162:	03 c0       	rjmp	.+6      	; 0x316a <xTaskResumeAll+0xde>
    3164:	80 e0       	ldi	r24, 0x00	; 0
    3166:	01 c0       	rjmp	.+2      	; 0x316a <xTaskResumeAll+0xde>
    3168:	80 e0       	ldi	r24, 0x00	; 0
    316a:	0f 90       	pop	r0
    316c:	0f be       	out	0x3f, r0	; 63
    316e:	df 91       	pop	r29
    3170:	cf 91       	pop	r28
    3172:	1f 91       	pop	r17
    3174:	0f 91       	pop	r16
    3176:	ff 90       	pop	r15
    3178:	ef 90       	pop	r14
    317a:	df 90       	pop	r13
    317c:	08 95       	ret

0000317e <vTaskDelay>:
    317e:	cf 93       	push	r28
    3180:	df 93       	push	r29
    3182:	ec 01       	movw	r28, r24
    3184:	89 2b       	or	r24, r25
    3186:	39 f0       	breq	.+14     	; 0x3196 <vTaskDelay+0x18>
    3188:	c4 de       	rcall	.-632    	; 0x2f12 <vTaskSuspendAll>
    318a:	60 e0       	ldi	r22, 0x00	; 0
    318c:	ce 01       	movw	r24, r28
    318e:	87 dd       	rcall	.-1266   	; 0x2c9e <prvAddCurrentTaskToDelayedList>
    3190:	7d df       	rcall	.-262    	; 0x308c <xTaskResumeAll>
    3192:	81 11       	cpse	r24, r1
    3194:	01 c0       	rjmp	.+2      	; 0x3198 <vTaskDelay+0x1a>
    3196:	0f db       	rcall	.-2530   	; 0x27b6 <vPortYield>
    3198:	df 91       	pop	r29
    319a:	cf 91       	pop	r28
    319c:	08 95       	ret

0000319e <vTaskSwitchContext>:
    319e:	80 91 85 0d 	lds	r24, 0x0D85	; 0x800d85 <uxSchedulerSuspended>
    31a2:	88 23       	and	r24, r24
    31a4:	21 f0       	breq	.+8      	; 0x31ae <vTaskSwitchContext+0x10>
    31a6:	81 e0       	ldi	r24, 0x01	; 1
    31a8:	80 93 8a 0d 	sts	0x0D8A, r24	; 0x800d8a <xYieldPending>
    31ac:	08 95       	ret
    31ae:	10 92 8a 0d 	sts	0x0D8A, r1	; 0x800d8a <xYieldPending>
    31b2:	a0 91 cb 0d 	lds	r26, 0x0DCB	; 0x800dcb <pxCurrentTCB>
    31b6:	b0 91 cc 0d 	lds	r27, 0x0DCC	; 0x800dcc <pxCurrentTCB+0x1>
    31ba:	e0 91 cb 0d 	lds	r30, 0x0DCB	; 0x800dcb <pxCurrentTCB>
    31be:	f0 91 cc 0d 	lds	r31, 0x0DCC	; 0x800dcc <pxCurrentTCB+0x1>
    31c2:	2d 91       	ld	r18, X+
    31c4:	3c 91       	ld	r19, X
    31c6:	87 89       	ldd	r24, Z+23	; 0x17
    31c8:	90 8d       	ldd	r25, Z+24	; 0x18
    31ca:	82 17       	cp	r24, r18
    31cc:	93 07       	cpc	r25, r19
    31ce:	58 f0       	brcs	.+22     	; 0x31e6 <vTaskSwitchContext+0x48>
    31d0:	60 91 cb 0d 	lds	r22, 0x0DCB	; 0x800dcb <pxCurrentTCB>
    31d4:	70 91 cc 0d 	lds	r23, 0x0DCC	; 0x800dcc <pxCurrentTCB+0x1>
    31d8:	80 91 cb 0d 	lds	r24, 0x0DCB	; 0x800dcb <pxCurrentTCB>
    31dc:	90 91 cc 0d 	lds	r25, 0x0DCC	; 0x800dcc <pxCurrentTCB+0x1>
    31e0:	67 5e       	subi	r22, 0xE7	; 231
    31e2:	7f 4f       	sbci	r23, 0xFF	; 255
    31e4:	de d9       	rcall	.-3140   	; 0x25a2 <vApplicationStackOverflowHook>
    31e6:	20 91 8d 0d 	lds	r18, 0x0D8D	; 0x800d8d <uxTopReadyPriority>
    31ea:	82 2f       	mov	r24, r18
    31ec:	90 e0       	ldi	r25, 0x00	; 0
    31ee:	fc 01       	movw	r30, r24
    31f0:	ee 0f       	add	r30, r30
    31f2:	ff 1f       	adc	r31, r31
    31f4:	ee 0f       	add	r30, r30
    31f6:	ff 1f       	adc	r31, r31
    31f8:	ee 0f       	add	r30, r30
    31fa:	ff 1f       	adc	r31, r31
    31fc:	e8 0f       	add	r30, r24
    31fe:	f9 1f       	adc	r31, r25
    3200:	e9 55       	subi	r30, 0x59	; 89
    3202:	f2 4f       	sbci	r31, 0xF2	; 242
    3204:	30 81       	ld	r19, Z
    3206:	31 11       	cpse	r19, r1
    3208:	11 c0       	rjmp	.+34     	; 0x322c <vTaskSwitchContext+0x8e>
    320a:	21 50       	subi	r18, 0x01	; 1
    320c:	82 2f       	mov	r24, r18
    320e:	90 e0       	ldi	r25, 0x00	; 0
    3210:	fc 01       	movw	r30, r24
    3212:	ee 0f       	add	r30, r30
    3214:	ff 1f       	adc	r31, r31
    3216:	ee 0f       	add	r30, r30
    3218:	ff 1f       	adc	r31, r31
    321a:	ee 0f       	add	r30, r30
    321c:	ff 1f       	adc	r31, r31
    321e:	e8 0f       	add	r30, r24
    3220:	f9 1f       	adc	r31, r25
    3222:	e9 55       	subi	r30, 0x59	; 89
    3224:	f2 4f       	sbci	r31, 0xF2	; 242
    3226:	30 81       	ld	r19, Z
    3228:	33 23       	and	r19, r19
    322a:	79 f3       	breq	.-34     	; 0x320a <vTaskSwitchContext+0x6c>
    322c:	ac 01       	movw	r20, r24
    322e:	44 0f       	add	r20, r20
    3230:	55 1f       	adc	r21, r21
    3232:	44 0f       	add	r20, r20
    3234:	55 1f       	adc	r21, r21
    3236:	44 0f       	add	r20, r20
    3238:	55 1f       	adc	r21, r21
    323a:	48 0f       	add	r20, r24
    323c:	59 1f       	adc	r21, r25
    323e:	da 01       	movw	r26, r20
    3240:	a9 55       	subi	r26, 0x59	; 89
    3242:	b2 4f       	sbci	r27, 0xF2	; 242
    3244:	11 96       	adiw	r26, 0x01	; 1
    3246:	ed 91       	ld	r30, X+
    3248:	fc 91       	ld	r31, X
    324a:	12 97       	sbiw	r26, 0x02	; 2
    324c:	02 80       	ldd	r0, Z+2	; 0x02
    324e:	f3 81       	ldd	r31, Z+3	; 0x03
    3250:	e0 2d       	mov	r30, r0
    3252:	12 96       	adiw	r26, 0x02	; 2
    3254:	fc 93       	st	X, r31
    3256:	ee 93       	st	-X, r30
    3258:	11 97       	sbiw	r26, 0x01	; 1
    325a:	46 55       	subi	r20, 0x56	; 86
    325c:	52 4f       	sbci	r21, 0xF2	; 242
    325e:	e4 17       	cp	r30, r20
    3260:	f5 07       	cpc	r31, r21
    3262:	29 f4       	brne	.+10     	; 0x326e <vTaskSwitchContext+0xd0>
    3264:	42 81       	ldd	r20, Z+2	; 0x02
    3266:	53 81       	ldd	r21, Z+3	; 0x03
    3268:	fd 01       	movw	r30, r26
    326a:	52 83       	std	Z+2, r21	; 0x02
    326c:	41 83       	std	Z+1, r20	; 0x01
    326e:	fc 01       	movw	r30, r24
    3270:	ee 0f       	add	r30, r30
    3272:	ff 1f       	adc	r31, r31
    3274:	ee 0f       	add	r30, r30
    3276:	ff 1f       	adc	r31, r31
    3278:	ee 0f       	add	r30, r30
    327a:	ff 1f       	adc	r31, r31
    327c:	8e 0f       	add	r24, r30
    327e:	9f 1f       	adc	r25, r31
    3280:	fc 01       	movw	r30, r24
    3282:	e9 55       	subi	r30, 0x59	; 89
    3284:	f2 4f       	sbci	r31, 0xF2	; 242
    3286:	01 80       	ldd	r0, Z+1	; 0x01
    3288:	f2 81       	ldd	r31, Z+2	; 0x02
    328a:	e0 2d       	mov	r30, r0
    328c:	86 81       	ldd	r24, Z+6	; 0x06
    328e:	97 81       	ldd	r25, Z+7	; 0x07
    3290:	90 93 cc 0d 	sts	0x0DCC, r25	; 0x800dcc <pxCurrentTCB+0x1>
    3294:	80 93 cb 0d 	sts	0x0DCB, r24	; 0x800dcb <pxCurrentTCB>
    3298:	20 93 8d 0d 	sts	0x0D8D, r18	; 0x800d8d <uxTopReadyPriority>
    329c:	08 95       	ret

0000329e <vTaskPlaceOnEventList>:
    329e:	cf 93       	push	r28
    32a0:	df 93       	push	r29
    32a2:	eb 01       	movw	r28, r22
    32a4:	60 91 cb 0d 	lds	r22, 0x0DCB	; 0x800dcb <pxCurrentTCB>
    32a8:	70 91 cc 0d 	lds	r23, 0x0DCC	; 0x800dcc <pxCurrentTCB+0x1>
    32ac:	64 5f       	subi	r22, 0xF4	; 244
    32ae:	7f 4f       	sbci	r23, 0xFF	; 255
    32b0:	b8 d9       	rcall	.-3216   	; 0x2622 <vListInsert>
    32b2:	61 e0       	ldi	r22, 0x01	; 1
    32b4:	ce 01       	movw	r24, r28
    32b6:	f3 dc       	rcall	.-1562   	; 0x2c9e <prvAddCurrentTaskToDelayedList>
    32b8:	df 91       	pop	r29
    32ba:	cf 91       	pop	r28
    32bc:	08 95       	ret

000032be <xTaskRemoveFromEventList>:
    32be:	0f 93       	push	r16
    32c0:	1f 93       	push	r17
    32c2:	cf 93       	push	r28
    32c4:	df 93       	push	r29
    32c6:	dc 01       	movw	r26, r24
    32c8:	15 96       	adiw	r26, 0x05	; 5
    32ca:	ed 91       	ld	r30, X+
    32cc:	fc 91       	ld	r31, X
    32ce:	16 97       	sbiw	r26, 0x06	; 6
    32d0:	c6 81       	ldd	r28, Z+6	; 0x06
    32d2:	d7 81       	ldd	r29, Z+7	; 0x07
    32d4:	8e 01       	movw	r16, r28
    32d6:	04 5f       	subi	r16, 0xF4	; 244
    32d8:	1f 4f       	sbci	r17, 0xFF	; 255
    32da:	c8 01       	movw	r24, r16
    32dc:	d3 d9       	rcall	.-3162   	; 0x2684 <uxListRemove>
    32de:	80 91 85 0d 	lds	r24, 0x0D85	; 0x800d85 <uxSchedulerSuspended>
    32e2:	81 11       	cpse	r24, r1
    32e4:	1a c0       	rjmp	.+52     	; 0x331a <xTaskRemoveFromEventList+0x5c>
    32e6:	0a 50       	subi	r16, 0x0A	; 10
    32e8:	11 09       	sbc	r17, r1
    32ea:	c8 01       	movw	r24, r16
    32ec:	cb d9       	rcall	.-3178   	; 0x2684 <uxListRemove>
    32ee:	8e 89       	ldd	r24, Y+22	; 0x16
    32f0:	90 91 8d 0d 	lds	r25, 0x0D8D	; 0x800d8d <uxTopReadyPriority>
    32f4:	98 17       	cp	r25, r24
    32f6:	10 f4       	brcc	.+4      	; 0x32fc <xTaskRemoveFromEventList+0x3e>
    32f8:	80 93 8d 0d 	sts	0x0D8D, r24	; 0x800d8d <uxTopReadyPriority>
    32fc:	90 e0       	ldi	r25, 0x00	; 0
    32fe:	9c 01       	movw	r18, r24
    3300:	22 0f       	add	r18, r18
    3302:	33 1f       	adc	r19, r19
    3304:	22 0f       	add	r18, r18
    3306:	33 1f       	adc	r19, r19
    3308:	22 0f       	add	r18, r18
    330a:	33 1f       	adc	r19, r19
    330c:	82 0f       	add	r24, r18
    330e:	93 1f       	adc	r25, r19
    3310:	b8 01       	movw	r22, r16
    3312:	89 55       	subi	r24, 0x59	; 89
    3314:	92 4f       	sbci	r25, 0xF2	; 242
    3316:	64 d9       	rcall	.-3384   	; 0x25e0 <vListInsertEnd>
    3318:	04 c0       	rjmp	.+8      	; 0x3322 <xTaskRemoveFromEventList+0x64>
    331a:	b8 01       	movw	r22, r16
    331c:	8a e9       	ldi	r24, 0x9A	; 154
    331e:	9d e0       	ldi	r25, 0x0D	; 13
    3320:	5f d9       	rcall	.-3394   	; 0x25e0 <vListInsertEnd>
    3322:	e0 91 cb 0d 	lds	r30, 0x0DCB	; 0x800dcb <pxCurrentTCB>
    3326:	f0 91 cc 0d 	lds	r31, 0x0DCC	; 0x800dcc <pxCurrentTCB+0x1>
    332a:	9e 89       	ldd	r25, Y+22	; 0x16
    332c:	86 89       	ldd	r24, Z+22	; 0x16
    332e:	89 17       	cp	r24, r25
    3330:	20 f4       	brcc	.+8      	; 0x333a <xTaskRemoveFromEventList+0x7c>
    3332:	81 e0       	ldi	r24, 0x01	; 1
    3334:	80 93 8a 0d 	sts	0x0D8A, r24	; 0x800d8a <xYieldPending>
    3338:	01 c0       	rjmp	.+2      	; 0x333c <xTaskRemoveFromEventList+0x7e>
    333a:	80 e0       	ldi	r24, 0x00	; 0
    333c:	df 91       	pop	r29
    333e:	cf 91       	pop	r28
    3340:	1f 91       	pop	r17
    3342:	0f 91       	pop	r16
    3344:	08 95       	ret

00003346 <vTaskInternalSetTimeOutState>:
    3346:	20 91 89 0d 	lds	r18, 0x0D89	; 0x800d89 <xNumOfOverflows>
    334a:	fc 01       	movw	r30, r24
    334c:	20 83       	st	Z, r18
    334e:	20 91 8e 0d 	lds	r18, 0x0D8E	; 0x800d8e <xTickCount>
    3352:	30 91 8f 0d 	lds	r19, 0x0D8F	; 0x800d8f <xTickCount+0x1>
    3356:	32 83       	std	Z+2, r19	; 0x02
    3358:	21 83       	std	Z+1, r18	; 0x01
    335a:	08 95       	ret

0000335c <xTaskCheckForTimeOut>:
    335c:	0f b6       	in	r0, 0x3f	; 63
    335e:	f8 94       	cli
    3360:	0f 92       	push	r0
    3362:	20 91 8e 0d 	lds	r18, 0x0D8E	; 0x800d8e <xTickCount>
    3366:	30 91 8f 0d 	lds	r19, 0x0D8F	; 0x800d8f <xTickCount+0x1>
    336a:	dc 01       	movw	r26, r24
    336c:	11 96       	adiw	r26, 0x01	; 1
    336e:	4d 91       	ld	r20, X+
    3370:	5c 91       	ld	r21, X
    3372:	12 97       	sbiw	r26, 0x02	; 2
    3374:	e0 91 89 0d 	lds	r30, 0x0D89	; 0x800d89 <xNumOfOverflows>
    3378:	fc 91       	ld	r31, X
    337a:	fe 17       	cp	r31, r30
    337c:	19 f0       	breq	.+6      	; 0x3384 <xTaskCheckForTimeOut+0x28>
    337e:	24 17       	cp	r18, r20
    3380:	35 07       	cpc	r19, r21
    3382:	98 f4       	brcc	.+38     	; 0x33aa <xTaskCheckForTimeOut+0x4e>
    3384:	24 1b       	sub	r18, r20
    3386:	35 0b       	sbc	r19, r21
    3388:	fb 01       	movw	r30, r22
    338a:	40 81       	ld	r20, Z
    338c:	51 81       	ldd	r21, Z+1	; 0x01
    338e:	24 17       	cp	r18, r20
    3390:	35 07       	cpc	r19, r21
    3392:	38 f4       	brcc	.+14     	; 0x33a2 <xTaskCheckForTimeOut+0x46>
    3394:	42 1b       	sub	r20, r18
    3396:	53 0b       	sbc	r21, r19
    3398:	51 83       	std	Z+1, r21	; 0x01
    339a:	40 83       	st	Z, r20
    339c:	d4 df       	rcall	.-88     	; 0x3346 <vTaskInternalSetTimeOutState>
    339e:	80 e0       	ldi	r24, 0x00	; 0
    33a0:	05 c0       	rjmp	.+10     	; 0x33ac <xTaskCheckForTimeOut+0x50>
    33a2:	11 82       	std	Z+1, r1	; 0x01
    33a4:	10 82       	st	Z, r1
    33a6:	81 e0       	ldi	r24, 0x01	; 1
    33a8:	01 c0       	rjmp	.+2      	; 0x33ac <xTaskCheckForTimeOut+0x50>
    33aa:	81 e0       	ldi	r24, 0x01	; 1
    33ac:	0f 90       	pop	r0
    33ae:	0f be       	out	0x3f, r0	; 63
    33b0:	08 95       	ret

000033b2 <vTaskMissedYield>:
    33b2:	81 e0       	ldi	r24, 0x01	; 1
    33b4:	80 93 8a 0d 	sts	0x0D8A, r24	; 0x800d8a <xYieldPending>
    33b8:	08 95       	ret

000033ba <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
    33ba:	0f 93       	push	r16
    33bc:	1f 93       	push	r17
    33be:	cf 93       	push	r28
    33c0:	df 93       	push	r29
    33c2:	fc 01       	movw	r30, r24
    TCB_t * const pxTCB = pxMutexHolder;
    BaseType_t xReturn = pdFALSE;

        if( pxMutexHolder != NULL )
    33c4:	89 2b       	or	r24, r25
    33c6:	69 f1       	breq	.+90     	; 0x3422 <xTaskPriorityDisinherit+0x68>
            If the mutex is held by a task then it cannot be given from an
            interrupt, and if a mutex is given by the holding task then it must
            be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
            configASSERT( pxTCB->uxMutexesHeld );
            ( pxTCB->uxMutexesHeld )--;
    33c8:	82 a1       	ldd	r24, Z+34	; 0x22
    33ca:	81 50       	subi	r24, 0x01	; 1
    33cc:	82 a3       	std	Z+34, r24	; 0x22

            /* Has the holder of the mutex inherited the priority of another
            task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    33ce:	26 89       	ldd	r18, Z+22	; 0x16
    33d0:	91 a1       	ldd	r25, Z+33	; 0x21
    33d2:	29 17       	cp	r18, r25
    33d4:	41 f1       	breq	.+80     	; 0x3426 <xTaskPriorityDisinherit+0x6c>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
    33d6:	81 11       	cpse	r24, r1
    33d8:	28 c0       	rjmp	.+80     	; 0x342a <xTaskPriorityDisinherit+0x70>
    33da:	ef 01       	movw	r28, r30
                    /* A task can only have an inherited priority if it holds
                    the mutex.  If the mutex is held by a task then it cannot be
                    given from an interrupt, and if a mutex is given by the
                    holding task then it must be the running state task.  Remove
                    the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    33dc:	8f 01       	movw	r16, r30
    33de:	0e 5f       	subi	r16, 0xFE	; 254
    33e0:	1f 4f       	sbci	r17, 0xFF	; 255
    33e2:	c8 01       	movw	r24, r16
    33e4:	4f d9       	rcall	.-3426   	; 0x2684 <uxListRemove>
                    }

                    /* Disinherit the priority before adding the task into the
                    new    ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
    33e6:	89 a1       	ldd	r24, Y+33	; 0x21
    33e8:	8e 8b       	std	Y+22, r24	; 0x16

                    /* Reset the event list item value.  It cannot be in use for
                    any other purpose if this task is running, and it must be
                    running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    33ea:	24 e0       	ldi	r18, 0x04	; 4
    33ec:	30 e0       	ldi	r19, 0x00	; 0
    33ee:	28 1b       	sub	r18, r24
    33f0:	31 09       	sbc	r19, r1
    33f2:	3d 87       	std	Y+13, r19	; 0x0d
    33f4:	2c 87       	std	Y+12, r18	; 0x0c
                    prvAddTaskToReadyList( pxTCB );
    33f6:	90 91 8d 0d 	lds	r25, 0x0D8D	; 0x800d8d <uxTopReadyPriority>
    33fa:	98 17       	cp	r25, r24
    33fc:	10 f4       	brcc	.+4      	; 0x3402 <xTaskPriorityDisinherit+0x48>
    33fe:	80 93 8d 0d 	sts	0x0D8D, r24	; 0x800d8d <uxTopReadyPriority>
    3402:	90 e0       	ldi	r25, 0x00	; 0
    3404:	9c 01       	movw	r18, r24
    3406:	22 0f       	add	r18, r18
    3408:	33 1f       	adc	r19, r19
    340a:	22 0f       	add	r18, r18
    340c:	33 1f       	adc	r19, r19
    340e:	22 0f       	add	r18, r18
    3410:	33 1f       	adc	r19, r19
    3412:	82 0f       	add	r24, r18
    3414:	93 1f       	adc	r25, r19
    3416:	b8 01       	movw	r22, r16
    3418:	89 55       	subi	r24, 0x59	; 89
    341a:	92 4f       	sbci	r25, 0xF2	; 242
    341c:	e1 d8       	rcall	.-3646   	; 0x25e0 <vListInsertEnd>
                    in an order different to that in which they were taken.
                    If a context switch did not occur when the first mutex was
                    returned, even if a task was waiting on it, then a context
                    switch should occur when the last mutex is returned whether
                    a task is waiting on it or not. */
                    xReturn = pdTRUE;
    341e:	81 e0       	ldi	r24, 0x01	; 1
    3420:	05 c0       	rjmp	.+10     	; 0x342c <xTaskPriorityDisinherit+0x72>
#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
    TCB_t * const pxTCB = pxMutexHolder;
    BaseType_t xReturn = pdFALSE;
    3422:	80 e0       	ldi	r24, 0x00	; 0
    3424:	03 c0       	rjmp	.+6      	; 0x342c <xTaskPriorityDisinherit+0x72>
    3426:	80 e0       	ldi	r24, 0x00	; 0
    3428:	01 c0       	rjmp	.+2      	; 0x342c <xTaskPriorityDisinherit+0x72>
    342a:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    342c:	df 91       	pop	r29
    342e:	cf 91       	pop	r28
    3430:	1f 91       	pop	r17
    3432:	0f 91       	pop	r16
    3434:	08 95       	ret

00003436 <RTOS_sync_init>:
static StaticSemaphore_t LCD_mutex_Buffer;



void RTOS_sync_init(void)
{
    3436:	0f 93       	push	r16
    LCD_mutex_handle = xSemaphoreCreateBinaryStatic( &LCD_mutex_Buffer );
    3438:	03 e0       	ldi	r16, 0x03	; 3
    343a:	2d ec       	ldi	r18, 0xCD	; 205
    343c:	3d e0       	ldi	r19, 0x0D	; 13
    343e:	40 e0       	ldi	r20, 0x00	; 0
    3440:	50 e0       	ldi	r21, 0x00	; 0
    3442:	60 e0       	ldi	r22, 0x00	; 0
    3444:	81 e0       	ldi	r24, 0x01	; 1
    3446:	65 db       	rcall	.-2358   	; 0x2b12 <xQueueGenericCreateStatic>
    3448:	90 93 c4 18 	sts	0x18C4, r25	; 0x8018c4 <LCD_mutex_handle+0x1>
    344c:	80 93 c3 18 	sts	0x18C3, r24	; 0x8018c3 <LCD_mutex_handle>
	xSemaphoreGive(LCD_mutex_handle);
    3450:	20 e0       	ldi	r18, 0x00	; 0
    3452:	40 e0       	ldi	r20, 0x00	; 0
    3454:	50 e0       	ldi	r21, 0x00	; 0
    3456:	60 e0       	ldi	r22, 0x00	; 0
    3458:	70 e0       	ldi	r23, 0x00	; 0
    345a:	70 db       	rcall	.-2336   	; 0x2b3c <xQueueGenericSend>
    345c:	0f 91       	pop	r16
    345e:	08 95       	ret

00003460 <Drum_speed_Tasks_init>:
#include "../RTE/RTE_drum.h"
#include "../RTOS_Includes.h"


void Drum_speed_Tasks_init(void){
	Drum_speed_init();
    3460:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <Drum_speed_init>
    3464:	08 95       	ret

00003466 <LCD_main_err_Init>:

void (*g_callback_read_timeout)(void) = NULL;
void (*g_callback_write_timeout)(void) = NULL;

void LCD_main_err_Init( void(*callback_read_timeout)(void) , void(*callback_write_timeout)(void)){
	g_callback_read_timeout = callback_read_timeout;
    3466:	90 93 ef 0d 	sts	0x0DEF, r25	; 0x800def <g_callback_read_timeout+0x1>
    346a:	80 93 ee 0d 	sts	0x0DEE, r24	; 0x800dee <g_callback_read_timeout>
	g_callback_write_timeout = callback_write_timeout;
    346e:	70 93 ed 0d 	sts	0x0DED, r23	; 0x800ded <g_callback_write_timeout+0x1>
    3472:	60 93 ec 0d 	sts	0x0DEC, r22	; 0x800dec <g_callback_write_timeout>
    3476:	08 95       	ret

00003478 <Level_main_err_init>:

#include "../MCAL/UART.h"
 
void (*g_callback_level_sensor_fail) (void) = NULL;
void Level_main_err_init( void (*callback_level_sensor_fail) (void) ){
	 g_callback_level_sensor_fail = callback_level_sensor_fail;
    3478:	90 93 f1 0d 	sts	0x0DF1, r25	; 0x800df1 <g_callback_level_sensor_fail+0x1>
    347c:	80 93 f0 0d 	sts	0x0DF0, r24	; 0x800df0 <g_callback_level_sensor_fail>
    3480:	08 95       	ret

00003482 <Tank_out_callback>:
}

static void Tank_out_callback(void)
{
	
	g_out_liters_counter ++ ;
    3482:	80 91 f6 0d 	lds	r24, 0x0DF6	; 0x800df6 <g_out_liters_counter>
    3486:	90 91 f7 0d 	lds	r25, 0x0DF7	; 0x800df7 <g_out_liters_counter+0x1>
    348a:	01 96       	adiw	r24, 0x01	; 1
    348c:	90 93 f7 0d 	sts	0x0DF7, r25	; 0x800df7 <g_out_liters_counter+0x1>
    3490:	80 93 f6 0d 	sts	0x0DF6, r24	; 0x800df6 <g_out_liters_counter>
	if (g_out_liters_counter >= g_out_liters )
    3494:	20 91 f6 0d 	lds	r18, 0x0DF6	; 0x800df6 <g_out_liters_counter>
    3498:	30 91 f7 0d 	lds	r19, 0x0DF7	; 0x800df7 <g_out_liters_counter+0x1>
    349c:	80 91 f2 0d 	lds	r24, 0x0DF2	; 0x800df2 <g_out_liters>
    34a0:	90 91 f3 0d 	lds	r25, 0x0DF3	; 0x800df3 <g_out_liters+0x1>
    34a4:	28 17       	cp	r18, r24
    34a6:	39 07       	cpc	r19, r25
    34a8:	e8 f0       	brcs	.+58     	; 0x34e4 <Tank_out_callback+0x62>
	{
		// release the semaphore
		UART0_puts("beforrrreeeeee OWOWOWOWOOWOWOWOWOWOOWOWOWOWOOWOW");
    34aa:	82 e2       	ldi	r24, 0x22	; 34
    34ac:	93 e0       	ldi	r25, 0x03	; 3
    34ae:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <UART0_puts>
		xSemaphoreGive(outing_Semaphore );
    34b2:	20 e0       	ldi	r18, 0x00	; 0
    34b4:	40 e0       	ldi	r20, 0x00	; 0
    34b6:	50 e0       	ldi	r21, 0x00	; 0
    34b8:	60 e0       	ldi	r22, 0x00	; 0
    34ba:	70 e0       	ldi	r23, 0x00	; 0
    34bc:	80 91 c5 18 	lds	r24, 0x18C5	; 0x8018c5 <outing_Semaphore>
    34c0:	90 91 c6 18 	lds	r25, 0x18C6	; 0x8018c6 <outing_Semaphore+0x1>
    34c4:	3b db       	rcall	.-2442   	; 0x2b3c <xQueueGenericSend>
		UART0_puts("g_out_liters_counter OWOWOWOWOOWOWOWOWOWOOWOWOWOWOOWOW");
    34c6:	83 e5       	ldi	r24, 0x53	; 83
    34c8:	93 e0       	ldi	r25, 0x03	; 3
    34ca:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <UART0_puts>
		UART0_OutUDec(g_out_liters_counter);
    34ce:	60 91 f6 0d 	lds	r22, 0x0DF6	; 0x800df6 <g_out_liters_counter>
    34d2:	70 91 f7 0d 	lds	r23, 0x0DF7	; 0x800df7 <g_out_liters_counter+0x1>
    34d6:	80 e0       	ldi	r24, 0x00	; 0
    34d8:	90 e0       	ldi	r25, 0x00	; 0
    34da:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <UART0_OutUDec>
		UART0_putc('\n');
    34de:	8a e0       	ldi	r24, 0x0A	; 10
    34e0:	0c 94 6b 0e 	jmp	0x1cd6	; 0x1cd6 <UART0_putc>
    34e4:	08 95       	ret

000034e6 <Tank_feed_callback>:

static void Tank_feed_callback (void)
{
	//UART0_puts("")

	g_feeding_liters_counter ++ ;
    34e6:	80 91 f8 0d 	lds	r24, 0x0DF8	; 0x800df8 <g_feeding_liters_counter>
    34ea:	90 91 f9 0d 	lds	r25, 0x0DF9	; 0x800df9 <g_feeding_liters_counter+0x1>
    34ee:	01 96       	adiw	r24, 0x01	; 1
    34f0:	90 93 f9 0d 	sts	0x0DF9, r25	; 0x800df9 <g_feeding_liters_counter+0x1>
    34f4:	80 93 f8 0d 	sts	0x0DF8, r24	; 0x800df8 <g_feeding_liters_counter>
	// keep monitoring the amount of water .
	if (g_feeding_liters_counter >= g_feed_liters )
    34f8:	20 91 f8 0d 	lds	r18, 0x0DF8	; 0x800df8 <g_feeding_liters_counter>
    34fc:	30 91 f9 0d 	lds	r19, 0x0DF9	; 0x800df9 <g_feeding_liters_counter+0x1>
    3500:	80 91 f4 0d 	lds	r24, 0x0DF4	; 0x800df4 <g_feed_liters>
    3504:	90 91 f5 0d 	lds	r25, 0x0DF5	; 0x800df5 <g_feed_liters+0x1>
    3508:	28 17       	cp	r18, r24
    350a:	39 07       	cpc	r19, r25
    350c:	e8 f0       	brcs	.+58     	; 0x3548 <Tank_feed_callback+0x62>
	{
		// release the semaphore
		UART0_puts("BEFORRRRRE FWFWFWFWFWFWFWFWFWFWFWFWFWFWF");
    350e:	8a e8       	ldi	r24, 0x8A	; 138
    3510:	93 e0       	ldi	r25, 0x03	; 3
    3512:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <UART0_puts>
		xSemaphoreGive(Feeding_Semaphore);
    3516:	20 e0       	ldi	r18, 0x00	; 0
    3518:	40 e0       	ldi	r20, 0x00	; 0
    351a:	50 e0       	ldi	r21, 0x00	; 0
    351c:	60 e0       	ldi	r22, 0x00	; 0
    351e:	70 e0       	ldi	r23, 0x00	; 0
    3520:	80 91 05 19 	lds	r24, 0x1905	; 0x801905 <Feeding_Semaphore>
    3524:	90 91 06 19 	lds	r25, 0x1906	; 0x801906 <Feeding_Semaphore+0x1>
    3528:	09 db       	rcall	.-2542   	; 0x2b3c <xQueueGenericSend>
		UART0_puts("g_feeding_liters_counter FWFWFWFWFWFWFWFWFWFWFWFWFWFWF");
    352a:	83 eb       	ldi	r24, 0xB3	; 179
    352c:	93 e0       	ldi	r25, 0x03	; 3
    352e:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <UART0_puts>
		UART0_OutUDec(g_feeding_liters_counter);
    3532:	60 91 f8 0d 	lds	r22, 0x0DF8	; 0x800df8 <g_feeding_liters_counter>
    3536:	70 91 f9 0d 	lds	r23, 0x0DF9	; 0x800df9 <g_feeding_liters_counter+0x1>
    353a:	80 e0       	ldi	r24, 0x00	; 0
    353c:	90 e0       	ldi	r25, 0x00	; 0
    353e:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <UART0_OutUDec>
		UART0_putc('\n');
    3542:	8a e0       	ldi	r24, 0x0A	; 10
    3544:	0c 94 6b 0e 	jmp	0x1cd6	; 0x1cd6 <UART0_putc>
    3548:	08 95       	ret

0000354a <Tank_operation_init>:




void Tank_operation_init(void)
{
    354a:	0f 93       	push	r16
	Flow_rate_init(Tank_feed_callback , Tank_out_callback);	
    354c:	61 e4       	ldi	r22, 0x41	; 65
    354e:	7a e1       	ldi	r23, 0x1A	; 26
    3550:	83 e7       	ldi	r24, 0x73	; 115
    3552:	9a e1       	ldi	r25, 0x1A	; 26
    3554:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <Flow_rate_init>
	Feeding_Semaphore = xSemaphoreCreateBinaryStatic( &feeding_SemaphoreBuffer );
    3558:	03 e0       	ldi	r16, 0x03	; 3
    355a:	26 ee       	ldi	r18, 0xE6	; 230
    355c:	38 e1       	ldi	r19, 0x18	; 24
    355e:	40 e0       	ldi	r20, 0x00	; 0
    3560:	50 e0       	ldi	r21, 0x00	; 0
    3562:	60 e0       	ldi	r22, 0x00	; 0
    3564:	81 e0       	ldi	r24, 0x01	; 1
    3566:	d5 da       	rcall	.-2646   	; 0x2b12 <xQueueGenericCreateStatic>
    3568:	90 93 06 19 	sts	0x1906, r25	; 0x801906 <Feeding_Semaphore+0x1>
    356c:	80 93 05 19 	sts	0x1905, r24	; 0x801905 <Feeding_Semaphore>
	outing_Semaphore = xSemaphoreCreateBinaryStatic( &outing_SemaphoreBuffer );
    3570:	27 ec       	ldi	r18, 0xC7	; 199
    3572:	38 e1       	ldi	r19, 0x18	; 24
    3574:	40 e0       	ldi	r20, 0x00	; 0
    3576:	50 e0       	ldi	r21, 0x00	; 0
    3578:	60 e0       	ldi	r22, 0x00	; 0
    357a:	81 e0       	ldi	r24, 0x01	; 1
    357c:	ca da       	rcall	.-2668   	; 0x2b12 <xQueueGenericCreateStatic>
    357e:	90 93 c6 18 	sts	0x18C6, r25	; 0x8018c6 <outing_Semaphore+0x1>
    3582:	80 93 c5 18 	sts	0x18C5, r24	; 0x8018c5 <outing_Semaphore>
}
    3586:	0f 91       	pop	r16
    3588:	08 95       	ret

0000358a <Temp_main_err_init>:
*Parameters @ Nothing
*return Nothing 
*/
void (*over_temp_callback)(void) = NULL;
void Temp_main_err_init( void (*callback_over_temp) (void) ){
	over_temp_callback = callback_over_temp;
    358a:	90 93 fb 0d 	sts	0x0DFB, r25	; 0x800dfb <over_temp_callback+0x1>
    358e:	80 93 fa 0d 	sts	0x0DFA, r24	; 0x800dfa <over_temp_callback>
    3592:	08 95       	ret

00003594 <Temp_main>:
}

void Temp_main(void* pvParameters){
	uint16_t current_temp=0;
	uint8_t count=0;
    3594:	10 e0       	ldi	r17, 0x00	; 0
	//uint16_t x_time = 0;
	while (1)
	{
		UART0_puts("Temp task alive\n");
    3596:	86 e5       	ldi	r24, 0x56	; 86
    3598:	94 e0       	ldi	r25, 0x04	; 4
    359a:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <UART0_puts>
		//x_time = Get_millis();
		current_temp = temp_read();
    359e:	0e 94 48 09 	call	0x1290	; 0x1290 <temp_read>
    35a2:	ec 01       	movw	r28, r24
		//UART0_puts("current temp = ");
 		//UART0_OutUDec(current_temp);
 		//UART0_putc('\n');
		if(current_temp > TEMP_OVER_TEMP){
    35a4:	8d 33       	cpi	r24, 0x3D	; 61
    35a6:	91 05       	cpc	r25, r1
    35a8:	78 f0       	brcs	.+30     	; 0x35c8 <Temp_main+0x34>
			count++;
    35aa:	1f 5f       	subi	r17, 0xFF	; 255
			if(count >= TEMP_OVER_TEMP_STILL_TIME){
    35ac:	16 30       	cpi	r17, 0x06	; 6
    35ae:	38 f0       	brcs	.+14     	; 0x35be <Temp_main+0x2a>
				//callback
				if(over_temp_callback == NULL){
    35b0:	e0 91 fa 0d 	lds	r30, 0x0DFA	; 0x800dfa <over_temp_callback>
    35b4:	f0 91 fb 0d 	lds	r31, 0x0DFB	; 0x800dfb <over_temp_callback+0x1>
    35b8:	30 97       	sbiw	r30, 0x00	; 0
    35ba:	09 f0       	breq	.+2      	; 0x35be <Temp_main+0x2a>
					
				}
				else
				{
					 over_temp_callback();
    35bc:	19 95       	eicall
				}
			}
			RTE_set_app_Current_temperature(INVALID_DATA);
    35be:	8a ef       	ldi	r24, 0xFA	; 250
    35c0:	9f ea       	ldi	r25, 0xAF	; 175
    35c2:	0e 94 c2 12 	call	0x2584	; 0x2584 <RTE_set_app_Current_temperature>
    35c6:	05 c0       	rjmp	.+10     	; 0x35d2 <Temp_main+0x3e>
		}
		else{
		// set temp for LCD 
				// set the temp for the application .

			RTE_set_app_Current_temperature(current_temp);
    35c8:	0e 94 c2 12 	call	0x2584	; 0x2584 <RTE_set_app_Current_temperature>
			RTE_set_Current_temperature(current_temp);
    35cc:	ce 01       	movw	r24, r28
    35ce:	0e 94 bd 12 	call	0x257a	; 0x257a <RTE_set_Current_temperature>
		//
		//x_time =  Get_millis() - x_time ;
		//UART0_puts("temp ex time = ");
		//UART0_OutUDec(x_time);
		//UART0_putc('\n');
		vTaskDelay(50/portTICK_PERIOD_MS) ;
    35d2:	83 e0       	ldi	r24, 0x03	; 3
    35d4:	90 e0       	ldi	r25, 0x00	; 0
    35d6:	d3 dd       	rcall	.-1114   	; 0x317e <vTaskDelay>
	}
    35d8:	de cf       	rjmp	.-68     	; 0x3596 <Temp_main+0x2>

000035da <System_init>:


gSystemError System_init(void){
	
	gSystemError res = E_OK;
	DIO_init();
    35da:	0e 94 06 0b 	call	0x160c	; 0x160c <DIO_init>
	millis_init();	
    35de:	2e d0       	rcall	.+92     	; 0x363c <millis_init>
	Service_error_init();
    35e0:	0e 94 ce 09 	call	0x139c	; 0x139c <Service_error_init>
	RTE_init();
    35e4:	0e 94 36 12 	call	0x246c	; 0x246c <RTE_init>
	RTOS_sync_init();
    35e8:	26 df       	rcall	.-436    	; 0x3436 <RTOS_sync_init>
	temp_init(0);
    35ea:	80 e0       	ldi	r24, 0x00	; 0
    35ec:	0e 94 46 09 	call	0x128c	; 0x128c <temp_init>
	Inverter_init(UART1,38400,3);
    35f0:	23 e0       	ldi	r18, 0x03	; 3
    35f2:	40 e0       	ldi	r20, 0x00	; 0
    35f4:	56 e9       	ldi	r21, 0x96	; 150
    35f6:	60 e0       	ldi	r22, 0x00	; 0
    35f8:	70 e0       	ldi	r23, 0x00	; 0
    35fa:	81 e0       	ldi	r24, 0x01	; 1
    35fc:	0e 94 39 01 	call	0x272	; 0x272 <Inverter_init>
	Lcd_init(UART3,115200,1);
    3600:	21 e0       	ldi	r18, 0x01	; 1
    3602:	40 e0       	ldi	r20, 0x00	; 0
    3604:	52 ec       	ldi	r21, 0xC2	; 194
    3606:	61 e0       	ldi	r22, 0x01	; 1
    3608:	70 e0       	ldi	r23, 0x00	; 0
    360a:	83 e0       	ldi	r24, 0x03	; 3
    360c:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <Lcd_init>
	Drum_speed_Tasks_init();         //fixed here because no main task
    3610:	27 df       	rcall	.-434    	; 0x3460 <Drum_speed_Tasks_init>
	Tank_operation_init();
    3612:	9b df       	rcall	.-202    	; 0x354a <Tank_operation_init>
    3614:	80 e0       	ldi	r24, 0x00	; 0
	
	return res;

    3616:	08 95       	ret

00003618 <crc16_update>:

uint16_t crc16_update(uint16_t crc, uint8_t a)
{
  int i;

  crc ^= a;
    3618:	86 27       	eor	r24, r22
    361a:	28 e0       	ldi	r18, 0x08	; 8
    361c:	30 e0       	ldi	r19, 0x00	; 0
  for (i = 0; i < 8; ++i)
  {
    if (crc & 1)
    361e:	80 ff       	sbrs	r24, 0
    3620:	07 c0       	rjmp	.+14     	; 0x3630 <crc16_update+0x18>
      crc = (crc >> 1) ^ 0xA001;
    3622:	96 95       	lsr	r25
    3624:	87 95       	ror	r24
    3626:	41 e0       	ldi	r20, 0x01	; 1
    3628:	84 27       	eor	r24, r20
    362a:	40 ea       	ldi	r20, 0xA0	; 160
    362c:	94 27       	eor	r25, r20
    362e:	02 c0       	rjmp	.+4      	; 0x3634 <crc16_update+0x1c>
    else
      crc = (crc >> 1);
    3630:	96 95       	lsr	r25
    3632:	87 95       	ror	r24
    3634:	21 50       	subi	r18, 0x01	; 1
    3636:	31 09       	sbc	r19, r1
uint16_t crc16_update(uint16_t crc, uint8_t a)
{
  int i;

  crc ^= a;
  for (i = 0; i < 8; ++i)
    3638:	91 f7       	brne	.-28     	; 0x361e <crc16_update+0x6>
    else
      crc = (crc >> 1);
  }

  return crc;
}
    363a:	08 95       	ret

0000363c <millis_init>:

//init the timer on ctc mode to calvulate millis
void millis_init()
{
	//CTC mode
	TIMER2_CONGFIG_A = 0x02;
    363c:	82 e0       	ldi	r24, 0x02	; 2
    363e:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
	// Clock/64
	TIMER2_CONGFIG_B = 0x04;
    3642:	84 e0       	ldi	r24, 0x04	; 4
    3644:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7000b1>
    // Load into the output compare
    TIMER2_COMPARE = CTC_MATCH_OVERFLOW;
    3648:	8a ef       	ldi	r24, 0xFA	; 250
    364a:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7000b3>
    // Enable the compare match interrupt
    SET_BIT(TIMER2_INTERUPT, TIMER2_COMPARE_INT);
    364e:	e0 e7       	ldi	r30, 0x70	; 112
    3650:	f0 e0       	ldi	r31, 0x00	; 0
    3652:	80 81       	ld	r24, Z
    3654:	82 60       	ori	r24, 0x02	; 2
    3656:	80 83       	st	Z, r24
    3658:	08 95       	ret

0000365a <Get_millis>:
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    365a:	f8 94       	cli
    unsigned long millis_return;

    // Ensure this cannot be disrupted
    ATOMIC_BLOCK(ATOMIC_FORCEON) {
    	// copy the ISR counter
        millis_return = timer1_millis;
    365c:	60 91 07 19 	lds	r22, 0x1907	; 0x801907 <timer1_millis>
    3660:	70 91 08 19 	lds	r23, 0x1908	; 0x801908 <timer1_millis+0x1>
    3664:	80 91 09 19 	lds	r24, 0x1909	; 0x801909 <timer1_millis+0x2>
    3668:	90 91 0a 19 	lds	r25, 0x190A	; 0x80190a <timer1_millis+0x3>
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
    366c:	78 94       	sei
    }

    return millis_return;
}//Get_millis
    366e:	08 95       	ret

00003670 <__vector_13>:



ISR (TIMER2_COMPA_vect)
{
    3670:	1f 92       	push	r1
    3672:	0f 92       	push	r0
    3674:	0f b6       	in	r0, 0x3f	; 63
    3676:	0f 92       	push	r0
    3678:	11 24       	eor	r1, r1
    367a:	8f 93       	push	r24
    367c:	9f 93       	push	r25
    367e:	af 93       	push	r26
    3680:	bf 93       	push	r27
	//MILLI SEC
    timer1_millis++;
    3682:	80 91 07 19 	lds	r24, 0x1907	; 0x801907 <timer1_millis>
    3686:	90 91 08 19 	lds	r25, 0x1908	; 0x801908 <timer1_millis+0x1>
    368a:	a0 91 09 19 	lds	r26, 0x1909	; 0x801909 <timer1_millis+0x2>
    368e:	b0 91 0a 19 	lds	r27, 0x190A	; 0x80190a <timer1_millis+0x3>
    3692:	01 96       	adiw	r24, 0x01	; 1
    3694:	a1 1d       	adc	r26, r1
    3696:	b1 1d       	adc	r27, r1
    3698:	80 93 07 19 	sts	0x1907, r24	; 0x801907 <timer1_millis>
    369c:	90 93 08 19 	sts	0x1908, r25	; 0x801908 <timer1_millis+0x1>
    36a0:	a0 93 09 19 	sts	0x1909, r26	; 0x801909 <timer1_millis+0x2>
    36a4:	b0 93 0a 19 	sts	0x190A, r27	; 0x80190a <timer1_millis+0x3>
}//ISR
    36a8:	bf 91       	pop	r27
    36aa:	af 91       	pop	r26
    36ac:	9f 91       	pop	r25
    36ae:	8f 91       	pop	r24
    36b0:	0f 90       	pop	r0
    36b2:	0f be       	out	0x3f, r0	; 63
    36b4:	0f 90       	pop	r0
    36b6:	1f 90       	pop	r1
    36b8:	18 95       	reti

000036ba <__subsf3>:
    36ba:	50 58       	subi	r21, 0x80	; 128

000036bc <__addsf3>:
    36bc:	bb 27       	eor	r27, r27
    36be:	aa 27       	eor	r26, r26
    36c0:	0e d0       	rcall	.+28     	; 0x36de <__addsf3x>
    36c2:	48 c1       	rjmp	.+656    	; 0x3954 <__fp_round>
    36c4:	39 d1       	rcall	.+626    	; 0x3938 <__fp_pscA>
    36c6:	30 f0       	brcs	.+12     	; 0x36d4 <__addsf3+0x18>
    36c8:	3e d1       	rcall	.+636    	; 0x3946 <__fp_pscB>
    36ca:	20 f0       	brcs	.+8      	; 0x36d4 <__addsf3+0x18>
    36cc:	31 f4       	brne	.+12     	; 0x36da <__addsf3+0x1e>
    36ce:	9f 3f       	cpi	r25, 0xFF	; 255
    36d0:	11 f4       	brne	.+4      	; 0x36d6 <__addsf3+0x1a>
    36d2:	1e f4       	brtc	.+6      	; 0x36da <__addsf3+0x1e>
    36d4:	2e c1       	rjmp	.+604    	; 0x3932 <__fp_nan>
    36d6:	0e f4       	brtc	.+2      	; 0x36da <__addsf3+0x1e>
    36d8:	e0 95       	com	r30
    36da:	e7 fb       	bst	r30, 7
    36dc:	24 c1       	rjmp	.+584    	; 0x3926 <__fp_inf>

000036de <__addsf3x>:
    36de:	e9 2f       	mov	r30, r25
    36e0:	4a d1       	rcall	.+660    	; 0x3976 <__fp_split3>
    36e2:	80 f3       	brcs	.-32     	; 0x36c4 <__addsf3+0x8>
    36e4:	ba 17       	cp	r27, r26
    36e6:	62 07       	cpc	r22, r18
    36e8:	73 07       	cpc	r23, r19
    36ea:	84 07       	cpc	r24, r20
    36ec:	95 07       	cpc	r25, r21
    36ee:	18 f0       	brcs	.+6      	; 0x36f6 <__addsf3x+0x18>
    36f0:	71 f4       	brne	.+28     	; 0x370e <__addsf3x+0x30>
    36f2:	9e f5       	brtc	.+102    	; 0x375a <__addsf3x+0x7c>
    36f4:	62 c1       	rjmp	.+708    	; 0x39ba <__fp_zero>
    36f6:	0e f4       	brtc	.+2      	; 0x36fa <__addsf3x+0x1c>
    36f8:	e0 95       	com	r30
    36fa:	0b 2e       	mov	r0, r27
    36fc:	ba 2f       	mov	r27, r26
    36fe:	a0 2d       	mov	r26, r0
    3700:	0b 01       	movw	r0, r22
    3702:	b9 01       	movw	r22, r18
    3704:	90 01       	movw	r18, r0
    3706:	0c 01       	movw	r0, r24
    3708:	ca 01       	movw	r24, r20
    370a:	a0 01       	movw	r20, r0
    370c:	11 24       	eor	r1, r1
    370e:	ff 27       	eor	r31, r31
    3710:	59 1b       	sub	r21, r25
    3712:	99 f0       	breq	.+38     	; 0x373a <__addsf3x+0x5c>
    3714:	59 3f       	cpi	r21, 0xF9	; 249
    3716:	50 f4       	brcc	.+20     	; 0x372c <__addsf3x+0x4e>
    3718:	50 3e       	cpi	r21, 0xE0	; 224
    371a:	68 f1       	brcs	.+90     	; 0x3776 <__addsf3x+0x98>
    371c:	1a 16       	cp	r1, r26
    371e:	f0 40       	sbci	r31, 0x00	; 0
    3720:	a2 2f       	mov	r26, r18
    3722:	23 2f       	mov	r18, r19
    3724:	34 2f       	mov	r19, r20
    3726:	44 27       	eor	r20, r20
    3728:	58 5f       	subi	r21, 0xF8	; 248
    372a:	f3 cf       	rjmp	.-26     	; 0x3712 <__addsf3x+0x34>
    372c:	46 95       	lsr	r20
    372e:	37 95       	ror	r19
    3730:	27 95       	ror	r18
    3732:	a7 95       	ror	r26
    3734:	f0 40       	sbci	r31, 0x00	; 0
    3736:	53 95       	inc	r21
    3738:	c9 f7       	brne	.-14     	; 0x372c <__addsf3x+0x4e>
    373a:	7e f4       	brtc	.+30     	; 0x375a <__addsf3x+0x7c>
    373c:	1f 16       	cp	r1, r31
    373e:	ba 0b       	sbc	r27, r26
    3740:	62 0b       	sbc	r22, r18
    3742:	73 0b       	sbc	r23, r19
    3744:	84 0b       	sbc	r24, r20
    3746:	ba f0       	brmi	.+46     	; 0x3776 <__addsf3x+0x98>
    3748:	91 50       	subi	r25, 0x01	; 1
    374a:	a1 f0       	breq	.+40     	; 0x3774 <__addsf3x+0x96>
    374c:	ff 0f       	add	r31, r31
    374e:	bb 1f       	adc	r27, r27
    3750:	66 1f       	adc	r22, r22
    3752:	77 1f       	adc	r23, r23
    3754:	88 1f       	adc	r24, r24
    3756:	c2 f7       	brpl	.-16     	; 0x3748 <__addsf3x+0x6a>
    3758:	0e c0       	rjmp	.+28     	; 0x3776 <__addsf3x+0x98>
    375a:	ba 0f       	add	r27, r26
    375c:	62 1f       	adc	r22, r18
    375e:	73 1f       	adc	r23, r19
    3760:	84 1f       	adc	r24, r20
    3762:	48 f4       	brcc	.+18     	; 0x3776 <__addsf3x+0x98>
    3764:	87 95       	ror	r24
    3766:	77 95       	ror	r23
    3768:	67 95       	ror	r22
    376a:	b7 95       	ror	r27
    376c:	f7 95       	ror	r31
    376e:	9e 3f       	cpi	r25, 0xFE	; 254
    3770:	08 f0       	brcs	.+2      	; 0x3774 <__addsf3x+0x96>
    3772:	b3 cf       	rjmp	.-154    	; 0x36da <__addsf3+0x1e>
    3774:	93 95       	inc	r25
    3776:	88 0f       	add	r24, r24
    3778:	08 f0       	brcs	.+2      	; 0x377c <__addsf3x+0x9e>
    377a:	99 27       	eor	r25, r25
    377c:	ee 0f       	add	r30, r30
    377e:	97 95       	ror	r25
    3780:	87 95       	ror	r24
    3782:	08 95       	ret

00003784 <__divsf3>:
    3784:	0c d0       	rcall	.+24     	; 0x379e <__divsf3x>
    3786:	e6 c0       	rjmp	.+460    	; 0x3954 <__fp_round>
    3788:	de d0       	rcall	.+444    	; 0x3946 <__fp_pscB>
    378a:	40 f0       	brcs	.+16     	; 0x379c <__divsf3+0x18>
    378c:	d5 d0       	rcall	.+426    	; 0x3938 <__fp_pscA>
    378e:	30 f0       	brcs	.+12     	; 0x379c <__divsf3+0x18>
    3790:	21 f4       	brne	.+8      	; 0x379a <__divsf3+0x16>
    3792:	5f 3f       	cpi	r21, 0xFF	; 255
    3794:	19 f0       	breq	.+6      	; 0x379c <__divsf3+0x18>
    3796:	c7 c0       	rjmp	.+398    	; 0x3926 <__fp_inf>
    3798:	51 11       	cpse	r21, r1
    379a:	10 c1       	rjmp	.+544    	; 0x39bc <__fp_szero>
    379c:	ca c0       	rjmp	.+404    	; 0x3932 <__fp_nan>

0000379e <__divsf3x>:
    379e:	eb d0       	rcall	.+470    	; 0x3976 <__fp_split3>
    37a0:	98 f3       	brcs	.-26     	; 0x3788 <__divsf3+0x4>

000037a2 <__divsf3_pse>:
    37a2:	99 23       	and	r25, r25
    37a4:	c9 f3       	breq	.-14     	; 0x3798 <__divsf3+0x14>
    37a6:	55 23       	and	r21, r21
    37a8:	b1 f3       	breq	.-20     	; 0x3796 <__divsf3+0x12>
    37aa:	95 1b       	sub	r25, r21
    37ac:	55 0b       	sbc	r21, r21
    37ae:	bb 27       	eor	r27, r27
    37b0:	aa 27       	eor	r26, r26
    37b2:	62 17       	cp	r22, r18
    37b4:	73 07       	cpc	r23, r19
    37b6:	84 07       	cpc	r24, r20
    37b8:	38 f0       	brcs	.+14     	; 0x37c8 <__divsf3_pse+0x26>
    37ba:	9f 5f       	subi	r25, 0xFF	; 255
    37bc:	5f 4f       	sbci	r21, 0xFF	; 255
    37be:	22 0f       	add	r18, r18
    37c0:	33 1f       	adc	r19, r19
    37c2:	44 1f       	adc	r20, r20
    37c4:	aa 1f       	adc	r26, r26
    37c6:	a9 f3       	breq	.-22     	; 0x37b2 <__divsf3_pse+0x10>
    37c8:	33 d0       	rcall	.+102    	; 0x3830 <__divsf3_pse+0x8e>
    37ca:	0e 2e       	mov	r0, r30
    37cc:	3a f0       	brmi	.+14     	; 0x37dc <__divsf3_pse+0x3a>
    37ce:	e0 e8       	ldi	r30, 0x80	; 128
    37d0:	30 d0       	rcall	.+96     	; 0x3832 <__divsf3_pse+0x90>
    37d2:	91 50       	subi	r25, 0x01	; 1
    37d4:	50 40       	sbci	r21, 0x00	; 0
    37d6:	e6 95       	lsr	r30
    37d8:	00 1c       	adc	r0, r0
    37da:	ca f7       	brpl	.-14     	; 0x37ce <__divsf3_pse+0x2c>
    37dc:	29 d0       	rcall	.+82     	; 0x3830 <__divsf3_pse+0x8e>
    37de:	fe 2f       	mov	r31, r30
    37e0:	27 d0       	rcall	.+78     	; 0x3830 <__divsf3_pse+0x8e>
    37e2:	66 0f       	add	r22, r22
    37e4:	77 1f       	adc	r23, r23
    37e6:	88 1f       	adc	r24, r24
    37e8:	bb 1f       	adc	r27, r27
    37ea:	26 17       	cp	r18, r22
    37ec:	37 07       	cpc	r19, r23
    37ee:	48 07       	cpc	r20, r24
    37f0:	ab 07       	cpc	r26, r27
    37f2:	b0 e8       	ldi	r27, 0x80	; 128
    37f4:	09 f0       	breq	.+2      	; 0x37f8 <__divsf3_pse+0x56>
    37f6:	bb 0b       	sbc	r27, r27
    37f8:	80 2d       	mov	r24, r0
    37fa:	bf 01       	movw	r22, r30
    37fc:	ff 27       	eor	r31, r31
    37fe:	93 58       	subi	r25, 0x83	; 131
    3800:	5f 4f       	sbci	r21, 0xFF	; 255
    3802:	2a f0       	brmi	.+10     	; 0x380e <__divsf3_pse+0x6c>
    3804:	9e 3f       	cpi	r25, 0xFE	; 254
    3806:	51 05       	cpc	r21, r1
    3808:	68 f0       	brcs	.+26     	; 0x3824 <__divsf3_pse+0x82>
    380a:	8d c0       	rjmp	.+282    	; 0x3926 <__fp_inf>
    380c:	d7 c0       	rjmp	.+430    	; 0x39bc <__fp_szero>
    380e:	5f 3f       	cpi	r21, 0xFF	; 255
    3810:	ec f3       	brlt	.-6      	; 0x380c <__divsf3_pse+0x6a>
    3812:	98 3e       	cpi	r25, 0xE8	; 232
    3814:	dc f3       	brlt	.-10     	; 0x380c <__divsf3_pse+0x6a>
    3816:	86 95       	lsr	r24
    3818:	77 95       	ror	r23
    381a:	67 95       	ror	r22
    381c:	b7 95       	ror	r27
    381e:	f7 95       	ror	r31
    3820:	9f 5f       	subi	r25, 0xFF	; 255
    3822:	c9 f7       	brne	.-14     	; 0x3816 <__divsf3_pse+0x74>
    3824:	88 0f       	add	r24, r24
    3826:	91 1d       	adc	r25, r1
    3828:	96 95       	lsr	r25
    382a:	87 95       	ror	r24
    382c:	97 f9       	bld	r25, 7
    382e:	08 95       	ret
    3830:	e1 e0       	ldi	r30, 0x01	; 1
    3832:	66 0f       	add	r22, r22
    3834:	77 1f       	adc	r23, r23
    3836:	88 1f       	adc	r24, r24
    3838:	bb 1f       	adc	r27, r27
    383a:	62 17       	cp	r22, r18
    383c:	73 07       	cpc	r23, r19
    383e:	84 07       	cpc	r24, r20
    3840:	ba 07       	cpc	r27, r26
    3842:	20 f0       	brcs	.+8      	; 0x384c <__divsf3_pse+0xaa>
    3844:	62 1b       	sub	r22, r18
    3846:	73 0b       	sbc	r23, r19
    3848:	84 0b       	sbc	r24, r20
    384a:	ba 0b       	sbc	r27, r26
    384c:	ee 1f       	adc	r30, r30
    384e:	88 f7       	brcc	.-30     	; 0x3832 <__divsf3_pse+0x90>
    3850:	e0 95       	com	r30
    3852:	08 95       	ret

00003854 <__fixunssfsi>:
    3854:	98 d0       	rcall	.+304    	; 0x3986 <__fp_splitA>
    3856:	88 f0       	brcs	.+34     	; 0x387a <__fixunssfsi+0x26>
    3858:	9f 57       	subi	r25, 0x7F	; 127
    385a:	90 f0       	brcs	.+36     	; 0x3880 <__fixunssfsi+0x2c>
    385c:	b9 2f       	mov	r27, r25
    385e:	99 27       	eor	r25, r25
    3860:	b7 51       	subi	r27, 0x17	; 23
    3862:	a0 f0       	brcs	.+40     	; 0x388c <__fixunssfsi+0x38>
    3864:	d1 f0       	breq	.+52     	; 0x389a <__fixunssfsi+0x46>
    3866:	66 0f       	add	r22, r22
    3868:	77 1f       	adc	r23, r23
    386a:	88 1f       	adc	r24, r24
    386c:	99 1f       	adc	r25, r25
    386e:	1a f0       	brmi	.+6      	; 0x3876 <__fixunssfsi+0x22>
    3870:	ba 95       	dec	r27
    3872:	c9 f7       	brne	.-14     	; 0x3866 <__fixunssfsi+0x12>
    3874:	12 c0       	rjmp	.+36     	; 0x389a <__fixunssfsi+0x46>
    3876:	b1 30       	cpi	r27, 0x01	; 1
    3878:	81 f0       	breq	.+32     	; 0x389a <__fixunssfsi+0x46>
    387a:	9f d0       	rcall	.+318    	; 0x39ba <__fp_zero>
    387c:	b1 e0       	ldi	r27, 0x01	; 1
    387e:	08 95       	ret
    3880:	9c c0       	rjmp	.+312    	; 0x39ba <__fp_zero>
    3882:	67 2f       	mov	r22, r23
    3884:	78 2f       	mov	r23, r24
    3886:	88 27       	eor	r24, r24
    3888:	b8 5f       	subi	r27, 0xF8	; 248
    388a:	39 f0       	breq	.+14     	; 0x389a <__fixunssfsi+0x46>
    388c:	b9 3f       	cpi	r27, 0xF9	; 249
    388e:	cc f3       	brlt	.-14     	; 0x3882 <__fixunssfsi+0x2e>
    3890:	86 95       	lsr	r24
    3892:	77 95       	ror	r23
    3894:	67 95       	ror	r22
    3896:	b3 95       	inc	r27
    3898:	d9 f7       	brne	.-10     	; 0x3890 <__fixunssfsi+0x3c>
    389a:	3e f4       	brtc	.+14     	; 0x38aa <__fixunssfsi+0x56>
    389c:	90 95       	com	r25
    389e:	80 95       	com	r24
    38a0:	70 95       	com	r23
    38a2:	61 95       	neg	r22
    38a4:	7f 4f       	sbci	r23, 0xFF	; 255
    38a6:	8f 4f       	sbci	r24, 0xFF	; 255
    38a8:	9f 4f       	sbci	r25, 0xFF	; 255
    38aa:	08 95       	ret

000038ac <__floatunsisf>:
    38ac:	e8 94       	clt
    38ae:	09 c0       	rjmp	.+18     	; 0x38c2 <__floatsisf+0x12>

000038b0 <__floatsisf>:
    38b0:	97 fb       	bst	r25, 7
    38b2:	3e f4       	brtc	.+14     	; 0x38c2 <__floatsisf+0x12>
    38b4:	90 95       	com	r25
    38b6:	80 95       	com	r24
    38b8:	70 95       	com	r23
    38ba:	61 95       	neg	r22
    38bc:	7f 4f       	sbci	r23, 0xFF	; 255
    38be:	8f 4f       	sbci	r24, 0xFF	; 255
    38c0:	9f 4f       	sbci	r25, 0xFF	; 255
    38c2:	99 23       	and	r25, r25
    38c4:	a9 f0       	breq	.+42     	; 0x38f0 <__floatsisf+0x40>
    38c6:	f9 2f       	mov	r31, r25
    38c8:	96 e9       	ldi	r25, 0x96	; 150
    38ca:	bb 27       	eor	r27, r27
    38cc:	93 95       	inc	r25
    38ce:	f6 95       	lsr	r31
    38d0:	87 95       	ror	r24
    38d2:	77 95       	ror	r23
    38d4:	67 95       	ror	r22
    38d6:	b7 95       	ror	r27
    38d8:	f1 11       	cpse	r31, r1
    38da:	f8 cf       	rjmp	.-16     	; 0x38cc <__floatsisf+0x1c>
    38dc:	fa f4       	brpl	.+62     	; 0x391c <__floatsisf+0x6c>
    38de:	bb 0f       	add	r27, r27
    38e0:	11 f4       	brne	.+4      	; 0x38e6 <__floatsisf+0x36>
    38e2:	60 ff       	sbrs	r22, 0
    38e4:	1b c0       	rjmp	.+54     	; 0x391c <__floatsisf+0x6c>
    38e6:	6f 5f       	subi	r22, 0xFF	; 255
    38e8:	7f 4f       	sbci	r23, 0xFF	; 255
    38ea:	8f 4f       	sbci	r24, 0xFF	; 255
    38ec:	9f 4f       	sbci	r25, 0xFF	; 255
    38ee:	16 c0       	rjmp	.+44     	; 0x391c <__floatsisf+0x6c>
    38f0:	88 23       	and	r24, r24
    38f2:	11 f0       	breq	.+4      	; 0x38f8 <__floatsisf+0x48>
    38f4:	96 e9       	ldi	r25, 0x96	; 150
    38f6:	11 c0       	rjmp	.+34     	; 0x391a <__floatsisf+0x6a>
    38f8:	77 23       	and	r23, r23
    38fa:	21 f0       	breq	.+8      	; 0x3904 <__floatsisf+0x54>
    38fc:	9e e8       	ldi	r25, 0x8E	; 142
    38fe:	87 2f       	mov	r24, r23
    3900:	76 2f       	mov	r23, r22
    3902:	05 c0       	rjmp	.+10     	; 0x390e <__floatsisf+0x5e>
    3904:	66 23       	and	r22, r22
    3906:	71 f0       	breq	.+28     	; 0x3924 <__floatsisf+0x74>
    3908:	96 e8       	ldi	r25, 0x86	; 134
    390a:	86 2f       	mov	r24, r22
    390c:	70 e0       	ldi	r23, 0x00	; 0
    390e:	60 e0       	ldi	r22, 0x00	; 0
    3910:	2a f0       	brmi	.+10     	; 0x391c <__floatsisf+0x6c>
    3912:	9a 95       	dec	r25
    3914:	66 0f       	add	r22, r22
    3916:	77 1f       	adc	r23, r23
    3918:	88 1f       	adc	r24, r24
    391a:	da f7       	brpl	.-10     	; 0x3912 <__floatsisf+0x62>
    391c:	88 0f       	add	r24, r24
    391e:	96 95       	lsr	r25
    3920:	87 95       	ror	r24
    3922:	97 f9       	bld	r25, 7
    3924:	08 95       	ret

00003926 <__fp_inf>:
    3926:	97 f9       	bld	r25, 7
    3928:	9f 67       	ori	r25, 0x7F	; 127
    392a:	80 e8       	ldi	r24, 0x80	; 128
    392c:	70 e0       	ldi	r23, 0x00	; 0
    392e:	60 e0       	ldi	r22, 0x00	; 0
    3930:	08 95       	ret

00003932 <__fp_nan>:
    3932:	9f ef       	ldi	r25, 0xFF	; 255
    3934:	80 ec       	ldi	r24, 0xC0	; 192
    3936:	08 95       	ret

00003938 <__fp_pscA>:
    3938:	00 24       	eor	r0, r0
    393a:	0a 94       	dec	r0
    393c:	16 16       	cp	r1, r22
    393e:	17 06       	cpc	r1, r23
    3940:	18 06       	cpc	r1, r24
    3942:	09 06       	cpc	r0, r25
    3944:	08 95       	ret

00003946 <__fp_pscB>:
    3946:	00 24       	eor	r0, r0
    3948:	0a 94       	dec	r0
    394a:	12 16       	cp	r1, r18
    394c:	13 06       	cpc	r1, r19
    394e:	14 06       	cpc	r1, r20
    3950:	05 06       	cpc	r0, r21
    3952:	08 95       	ret

00003954 <__fp_round>:
    3954:	09 2e       	mov	r0, r25
    3956:	03 94       	inc	r0
    3958:	00 0c       	add	r0, r0
    395a:	11 f4       	brne	.+4      	; 0x3960 <__fp_round+0xc>
    395c:	88 23       	and	r24, r24
    395e:	52 f0       	brmi	.+20     	; 0x3974 <__fp_round+0x20>
    3960:	bb 0f       	add	r27, r27
    3962:	40 f4       	brcc	.+16     	; 0x3974 <__fp_round+0x20>
    3964:	bf 2b       	or	r27, r31
    3966:	11 f4       	brne	.+4      	; 0x396c <__fp_round+0x18>
    3968:	60 ff       	sbrs	r22, 0
    396a:	04 c0       	rjmp	.+8      	; 0x3974 <__fp_round+0x20>
    396c:	6f 5f       	subi	r22, 0xFF	; 255
    396e:	7f 4f       	sbci	r23, 0xFF	; 255
    3970:	8f 4f       	sbci	r24, 0xFF	; 255
    3972:	9f 4f       	sbci	r25, 0xFF	; 255
    3974:	08 95       	ret

00003976 <__fp_split3>:
    3976:	57 fd       	sbrc	r21, 7
    3978:	90 58       	subi	r25, 0x80	; 128
    397a:	44 0f       	add	r20, r20
    397c:	55 1f       	adc	r21, r21
    397e:	59 f0       	breq	.+22     	; 0x3996 <__fp_splitA+0x10>
    3980:	5f 3f       	cpi	r21, 0xFF	; 255
    3982:	71 f0       	breq	.+28     	; 0x39a0 <__fp_splitA+0x1a>
    3984:	47 95       	ror	r20

00003986 <__fp_splitA>:
    3986:	88 0f       	add	r24, r24
    3988:	97 fb       	bst	r25, 7
    398a:	99 1f       	adc	r25, r25
    398c:	61 f0       	breq	.+24     	; 0x39a6 <__fp_splitA+0x20>
    398e:	9f 3f       	cpi	r25, 0xFF	; 255
    3990:	79 f0       	breq	.+30     	; 0x39b0 <__fp_splitA+0x2a>
    3992:	87 95       	ror	r24
    3994:	08 95       	ret
    3996:	12 16       	cp	r1, r18
    3998:	13 06       	cpc	r1, r19
    399a:	14 06       	cpc	r1, r20
    399c:	55 1f       	adc	r21, r21
    399e:	f2 cf       	rjmp	.-28     	; 0x3984 <__fp_split3+0xe>
    39a0:	46 95       	lsr	r20
    39a2:	f1 df       	rcall	.-30     	; 0x3986 <__fp_splitA>
    39a4:	08 c0       	rjmp	.+16     	; 0x39b6 <__fp_splitA+0x30>
    39a6:	16 16       	cp	r1, r22
    39a8:	17 06       	cpc	r1, r23
    39aa:	18 06       	cpc	r1, r24
    39ac:	99 1f       	adc	r25, r25
    39ae:	f1 cf       	rjmp	.-30     	; 0x3992 <__fp_splitA+0xc>
    39b0:	86 95       	lsr	r24
    39b2:	71 05       	cpc	r23, r1
    39b4:	61 05       	cpc	r22, r1
    39b6:	08 94       	sec
    39b8:	08 95       	ret

000039ba <__fp_zero>:
    39ba:	e8 94       	clt

000039bc <__fp_szero>:
    39bc:	bb 27       	eor	r27, r27
    39be:	66 27       	eor	r22, r22
    39c0:	77 27       	eor	r23, r23
    39c2:	cb 01       	movw	r24, r22
    39c4:	97 f9       	bld	r25, 7
    39c6:	08 95       	ret

000039c8 <__mulsf3>:
    39c8:	0b d0       	rcall	.+22     	; 0x39e0 <__mulsf3x>
    39ca:	c4 cf       	rjmp	.-120    	; 0x3954 <__fp_round>
    39cc:	b5 df       	rcall	.-150    	; 0x3938 <__fp_pscA>
    39ce:	28 f0       	brcs	.+10     	; 0x39da <__mulsf3+0x12>
    39d0:	ba df       	rcall	.-140    	; 0x3946 <__fp_pscB>
    39d2:	18 f0       	brcs	.+6      	; 0x39da <__mulsf3+0x12>
    39d4:	95 23       	and	r25, r21
    39d6:	09 f0       	breq	.+2      	; 0x39da <__mulsf3+0x12>
    39d8:	a6 cf       	rjmp	.-180    	; 0x3926 <__fp_inf>
    39da:	ab cf       	rjmp	.-170    	; 0x3932 <__fp_nan>
    39dc:	11 24       	eor	r1, r1
    39de:	ee cf       	rjmp	.-36     	; 0x39bc <__fp_szero>

000039e0 <__mulsf3x>:
    39e0:	ca df       	rcall	.-108    	; 0x3976 <__fp_split3>
    39e2:	a0 f3       	brcs	.-24     	; 0x39cc <__mulsf3+0x4>

000039e4 <__mulsf3_pse>:
    39e4:	95 9f       	mul	r25, r21
    39e6:	d1 f3       	breq	.-12     	; 0x39dc <__mulsf3+0x14>
    39e8:	95 0f       	add	r25, r21
    39ea:	50 e0       	ldi	r21, 0x00	; 0
    39ec:	55 1f       	adc	r21, r21
    39ee:	62 9f       	mul	r22, r18
    39f0:	f0 01       	movw	r30, r0
    39f2:	72 9f       	mul	r23, r18
    39f4:	bb 27       	eor	r27, r27
    39f6:	f0 0d       	add	r31, r0
    39f8:	b1 1d       	adc	r27, r1
    39fa:	63 9f       	mul	r22, r19
    39fc:	aa 27       	eor	r26, r26
    39fe:	f0 0d       	add	r31, r0
    3a00:	b1 1d       	adc	r27, r1
    3a02:	aa 1f       	adc	r26, r26
    3a04:	64 9f       	mul	r22, r20
    3a06:	66 27       	eor	r22, r22
    3a08:	b0 0d       	add	r27, r0
    3a0a:	a1 1d       	adc	r26, r1
    3a0c:	66 1f       	adc	r22, r22
    3a0e:	82 9f       	mul	r24, r18
    3a10:	22 27       	eor	r18, r18
    3a12:	b0 0d       	add	r27, r0
    3a14:	a1 1d       	adc	r26, r1
    3a16:	62 1f       	adc	r22, r18
    3a18:	73 9f       	mul	r23, r19
    3a1a:	b0 0d       	add	r27, r0
    3a1c:	a1 1d       	adc	r26, r1
    3a1e:	62 1f       	adc	r22, r18
    3a20:	83 9f       	mul	r24, r19
    3a22:	a0 0d       	add	r26, r0
    3a24:	61 1d       	adc	r22, r1
    3a26:	22 1f       	adc	r18, r18
    3a28:	74 9f       	mul	r23, r20
    3a2a:	33 27       	eor	r19, r19
    3a2c:	a0 0d       	add	r26, r0
    3a2e:	61 1d       	adc	r22, r1
    3a30:	23 1f       	adc	r18, r19
    3a32:	84 9f       	mul	r24, r20
    3a34:	60 0d       	add	r22, r0
    3a36:	21 1d       	adc	r18, r1
    3a38:	82 2f       	mov	r24, r18
    3a3a:	76 2f       	mov	r23, r22
    3a3c:	6a 2f       	mov	r22, r26
    3a3e:	11 24       	eor	r1, r1
    3a40:	9f 57       	subi	r25, 0x7F	; 127
    3a42:	50 40       	sbci	r21, 0x00	; 0
    3a44:	8a f0       	brmi	.+34     	; 0x3a68 <__mulsf3_pse+0x84>
    3a46:	e1 f0       	breq	.+56     	; 0x3a80 <__mulsf3_pse+0x9c>
    3a48:	88 23       	and	r24, r24
    3a4a:	4a f0       	brmi	.+18     	; 0x3a5e <__mulsf3_pse+0x7a>
    3a4c:	ee 0f       	add	r30, r30
    3a4e:	ff 1f       	adc	r31, r31
    3a50:	bb 1f       	adc	r27, r27
    3a52:	66 1f       	adc	r22, r22
    3a54:	77 1f       	adc	r23, r23
    3a56:	88 1f       	adc	r24, r24
    3a58:	91 50       	subi	r25, 0x01	; 1
    3a5a:	50 40       	sbci	r21, 0x00	; 0
    3a5c:	a9 f7       	brne	.-22     	; 0x3a48 <__mulsf3_pse+0x64>
    3a5e:	9e 3f       	cpi	r25, 0xFE	; 254
    3a60:	51 05       	cpc	r21, r1
    3a62:	70 f0       	brcs	.+28     	; 0x3a80 <__mulsf3_pse+0x9c>
    3a64:	60 cf       	rjmp	.-320    	; 0x3926 <__fp_inf>
    3a66:	aa cf       	rjmp	.-172    	; 0x39bc <__fp_szero>
    3a68:	5f 3f       	cpi	r21, 0xFF	; 255
    3a6a:	ec f3       	brlt	.-6      	; 0x3a66 <__mulsf3_pse+0x82>
    3a6c:	98 3e       	cpi	r25, 0xE8	; 232
    3a6e:	dc f3       	brlt	.-10     	; 0x3a66 <__mulsf3_pse+0x82>
    3a70:	86 95       	lsr	r24
    3a72:	77 95       	ror	r23
    3a74:	67 95       	ror	r22
    3a76:	b7 95       	ror	r27
    3a78:	f7 95       	ror	r31
    3a7a:	e7 95       	ror	r30
    3a7c:	9f 5f       	subi	r25, 0xFF	; 255
    3a7e:	c1 f7       	brne	.-16     	; 0x3a70 <__mulsf3_pse+0x8c>
    3a80:	fe 2b       	or	r31, r30
    3a82:	88 0f       	add	r24, r24
    3a84:	91 1d       	adc	r25, r1
    3a86:	96 95       	lsr	r25
    3a88:	87 95       	ror	r24
    3a8a:	97 f9       	bld	r25, 7
    3a8c:	08 95       	ret

00003a8e <pow>:
    3a8e:	fa 01       	movw	r30, r20
    3a90:	ee 0f       	add	r30, r30
    3a92:	ff 1f       	adc	r31, r31
    3a94:	30 96       	adiw	r30, 0x00	; 0
    3a96:	21 05       	cpc	r18, r1
    3a98:	31 05       	cpc	r19, r1
    3a9a:	99 f1       	breq	.+102    	; 0x3b02 <pow+0x74>
    3a9c:	61 15       	cp	r22, r1
    3a9e:	71 05       	cpc	r23, r1
    3aa0:	61 f4       	brne	.+24     	; 0x3aba <pow+0x2c>
    3aa2:	80 38       	cpi	r24, 0x80	; 128
    3aa4:	bf e3       	ldi	r27, 0x3F	; 63
    3aa6:	9b 07       	cpc	r25, r27
    3aa8:	49 f1       	breq	.+82     	; 0x3afc <pow+0x6e>
    3aaa:	68 94       	set
    3aac:	90 38       	cpi	r25, 0x80	; 128
    3aae:	81 05       	cpc	r24, r1
    3ab0:	61 f0       	breq	.+24     	; 0x3aca <pow+0x3c>
    3ab2:	80 38       	cpi	r24, 0x80	; 128
    3ab4:	bf ef       	ldi	r27, 0xFF	; 255
    3ab6:	9b 07       	cpc	r25, r27
    3ab8:	41 f0       	breq	.+16     	; 0x3aca <pow+0x3c>
    3aba:	99 23       	and	r25, r25
    3abc:	42 f5       	brpl	.+80     	; 0x3b0e <pow+0x80>
    3abe:	ff 3f       	cpi	r31, 0xFF	; 255
    3ac0:	e1 05       	cpc	r30, r1
    3ac2:	31 05       	cpc	r19, r1
    3ac4:	21 05       	cpc	r18, r1
    3ac6:	11 f1       	breq	.+68     	; 0x3b0c <pow+0x7e>
    3ac8:	e8 94       	clt
    3aca:	08 94       	sec
    3acc:	e7 95       	ror	r30
    3ace:	d9 01       	movw	r26, r18
    3ad0:	aa 23       	and	r26, r26
    3ad2:	29 f4       	brne	.+10     	; 0x3ade <pow+0x50>
    3ad4:	ab 2f       	mov	r26, r27
    3ad6:	be 2f       	mov	r27, r30
    3ad8:	f8 5f       	subi	r31, 0xF8	; 248
    3ada:	d0 f3       	brcs	.-12     	; 0x3ad0 <pow+0x42>
    3adc:	10 c0       	rjmp	.+32     	; 0x3afe <pow+0x70>
    3ade:	ff 5f       	subi	r31, 0xFF	; 255
    3ae0:	70 f4       	brcc	.+28     	; 0x3afe <pow+0x70>
    3ae2:	a6 95       	lsr	r26
    3ae4:	e0 f7       	brcc	.-8      	; 0x3ade <pow+0x50>
    3ae6:	f7 39       	cpi	r31, 0x97	; 151
    3ae8:	50 f0       	brcs	.+20     	; 0x3afe <pow+0x70>
    3aea:	19 f0       	breq	.+6      	; 0x3af2 <pow+0x64>
    3aec:	ff 3a       	cpi	r31, 0xAF	; 175
    3aee:	38 f4       	brcc	.+14     	; 0x3afe <pow+0x70>
    3af0:	9f 77       	andi	r25, 0x7F	; 127
    3af2:	9f 93       	push	r25
    3af4:	0c d0       	rcall	.+24     	; 0x3b0e <pow+0x80>
    3af6:	0f 90       	pop	r0
    3af8:	07 fc       	sbrc	r0, 7
    3afa:	90 58       	subi	r25, 0x80	; 128
    3afc:	08 95       	ret
    3afe:	3e f0       	brts	.+14     	; 0x3b0e <pow+0x80>
    3b00:	18 cf       	rjmp	.-464    	; 0x3932 <__fp_nan>
    3b02:	60 e0       	ldi	r22, 0x00	; 0
    3b04:	70 e0       	ldi	r23, 0x00	; 0
    3b06:	80 e8       	ldi	r24, 0x80	; 128
    3b08:	9f e3       	ldi	r25, 0x3F	; 63
    3b0a:	08 95       	ret
    3b0c:	4f e7       	ldi	r20, 0x7F	; 127
    3b0e:	9f 77       	andi	r25, 0x7F	; 127
    3b10:	5f 93       	push	r21
    3b12:	4f 93       	push	r20
    3b14:	3f 93       	push	r19
    3b16:	2f 93       	push	r18
    3b18:	e7 d0       	rcall	.+462    	; 0x3ce8 <log>
    3b1a:	2f 91       	pop	r18
    3b1c:	3f 91       	pop	r19
    3b1e:	4f 91       	pop	r20
    3b20:	5f 91       	pop	r21
    3b22:	52 df       	rcall	.-348    	; 0x39c8 <__mulsf3>
    3b24:	25 c0       	rjmp	.+74     	; 0x3b70 <exp>

00003b26 <round>:
    3b26:	2f df       	rcall	.-418    	; 0x3986 <__fp_splitA>
    3b28:	e0 f0       	brcs	.+56     	; 0x3b62 <round+0x3c>
    3b2a:	9e 37       	cpi	r25, 0x7E	; 126
    3b2c:	d8 f0       	brcs	.+54     	; 0x3b64 <round+0x3e>
    3b2e:	96 39       	cpi	r25, 0x96	; 150
    3b30:	b8 f4       	brcc	.+46     	; 0x3b60 <round+0x3a>
    3b32:	9e 38       	cpi	r25, 0x8E	; 142
    3b34:	48 f4       	brcc	.+18     	; 0x3b48 <round+0x22>
    3b36:	67 2f       	mov	r22, r23
    3b38:	78 2f       	mov	r23, r24
    3b3a:	88 27       	eor	r24, r24
    3b3c:	98 5f       	subi	r25, 0xF8	; 248
    3b3e:	f9 cf       	rjmp	.-14     	; 0x3b32 <round+0xc>
    3b40:	86 95       	lsr	r24
    3b42:	77 95       	ror	r23
    3b44:	67 95       	ror	r22
    3b46:	93 95       	inc	r25
    3b48:	95 39       	cpi	r25, 0x95	; 149
    3b4a:	d0 f3       	brcs	.-12     	; 0x3b40 <round+0x1a>
    3b4c:	b6 2f       	mov	r27, r22
    3b4e:	b1 70       	andi	r27, 0x01	; 1
    3b50:	6b 0f       	add	r22, r27
    3b52:	71 1d       	adc	r23, r1
    3b54:	81 1d       	adc	r24, r1
    3b56:	20 f4       	brcc	.+8      	; 0x3b60 <round+0x3a>
    3b58:	87 95       	ror	r24
    3b5a:	77 95       	ror	r23
    3b5c:	67 95       	ror	r22
    3b5e:	93 95       	inc	r25
    3b60:	33 c0       	rjmp	.+102    	; 0x3bc8 <__fp_mintl>
    3b62:	4d c0       	rjmp	.+154    	; 0x3bfe <__fp_mpack>
    3b64:	2b cf       	rjmp	.-426    	; 0x39bc <__fp_szero>
    3b66:	19 f4       	brne	.+6      	; 0x3b6e <round+0x48>
    3b68:	0e f0       	brts	.+2      	; 0x3b6c <round+0x46>
    3b6a:	dd ce       	rjmp	.-582    	; 0x3926 <__fp_inf>
    3b6c:	26 cf       	rjmp	.-436    	; 0x39ba <__fp_zero>
    3b6e:	e1 ce       	rjmp	.-574    	; 0x3932 <__fp_nan>

00003b70 <exp>:
    3b70:	0a df       	rcall	.-492    	; 0x3986 <__fp_splitA>
    3b72:	c8 f3       	brcs	.-14     	; 0x3b66 <round+0x40>
    3b74:	96 38       	cpi	r25, 0x86	; 134
    3b76:	c0 f7       	brcc	.-16     	; 0x3b68 <round+0x42>
    3b78:	07 f8       	bld	r0, 7
    3b7a:	0f 92       	push	r0
    3b7c:	e8 94       	clt
    3b7e:	2b e3       	ldi	r18, 0x3B	; 59
    3b80:	3a ea       	ldi	r19, 0xAA	; 170
    3b82:	48 eb       	ldi	r20, 0xB8	; 184
    3b84:	5f e7       	ldi	r21, 0x7F	; 127
    3b86:	2e df       	rcall	.-420    	; 0x39e4 <__mulsf3_pse>
    3b88:	0f 92       	push	r0
    3b8a:	0f 92       	push	r0
    3b8c:	0f 92       	push	r0
    3b8e:	4d b7       	in	r20, 0x3d	; 61
    3b90:	5e b7       	in	r21, 0x3e	; 62
    3b92:	0f 92       	push	r0
    3b94:	e9 d0       	rcall	.+466    	; 0x3d68 <modf>
    3b96:	e4 ee       	ldi	r30, 0xE4	; 228
    3b98:	f0 e0       	ldi	r31, 0x00	; 0
    3b9a:	3f d0       	rcall	.+126    	; 0x3c1a <__fp_powser>
    3b9c:	4f 91       	pop	r20
    3b9e:	5f 91       	pop	r21
    3ba0:	ef 91       	pop	r30
    3ba2:	ff 91       	pop	r31
    3ba4:	e5 95       	asr	r30
    3ba6:	ee 1f       	adc	r30, r30
    3ba8:	ff 1f       	adc	r31, r31
    3baa:	49 f0       	breq	.+18     	; 0x3bbe <exp+0x4e>
    3bac:	fe 57       	subi	r31, 0x7E	; 126
    3bae:	e0 68       	ori	r30, 0x80	; 128
    3bb0:	44 27       	eor	r20, r20
    3bb2:	ee 0f       	add	r30, r30
    3bb4:	44 1f       	adc	r20, r20
    3bb6:	fa 95       	dec	r31
    3bb8:	e1 f7       	brne	.-8      	; 0x3bb2 <exp+0x42>
    3bba:	41 95       	neg	r20
    3bbc:	55 0b       	sbc	r21, r21
    3bbe:	5b d0       	rcall	.+182    	; 0x3c76 <ldexp>
    3bc0:	0f 90       	pop	r0
    3bc2:	07 fe       	sbrs	r0, 7
    3bc4:	4f c0       	rjmp	.+158    	; 0x3c64 <inverse>
    3bc6:	08 95       	ret

00003bc8 <__fp_mintl>:
    3bc8:	88 23       	and	r24, r24
    3bca:	71 f4       	brne	.+28     	; 0x3be8 <__fp_mintl+0x20>
    3bcc:	77 23       	and	r23, r23
    3bce:	21 f0       	breq	.+8      	; 0x3bd8 <__fp_mintl+0x10>
    3bd0:	98 50       	subi	r25, 0x08	; 8
    3bd2:	87 2b       	or	r24, r23
    3bd4:	76 2f       	mov	r23, r22
    3bd6:	07 c0       	rjmp	.+14     	; 0x3be6 <__fp_mintl+0x1e>
    3bd8:	66 23       	and	r22, r22
    3bda:	11 f4       	brne	.+4      	; 0x3be0 <__fp_mintl+0x18>
    3bdc:	99 27       	eor	r25, r25
    3bde:	0d c0       	rjmp	.+26     	; 0x3bfa <__fp_mintl+0x32>
    3be0:	90 51       	subi	r25, 0x10	; 16
    3be2:	86 2b       	or	r24, r22
    3be4:	70 e0       	ldi	r23, 0x00	; 0
    3be6:	60 e0       	ldi	r22, 0x00	; 0
    3be8:	2a f0       	brmi	.+10     	; 0x3bf4 <__fp_mintl+0x2c>
    3bea:	9a 95       	dec	r25
    3bec:	66 0f       	add	r22, r22
    3bee:	77 1f       	adc	r23, r23
    3bf0:	88 1f       	adc	r24, r24
    3bf2:	da f7       	brpl	.-10     	; 0x3bea <__fp_mintl+0x22>
    3bf4:	88 0f       	add	r24, r24
    3bf6:	96 95       	lsr	r25
    3bf8:	87 95       	ror	r24
    3bfa:	97 f9       	bld	r25, 7
    3bfc:	08 95       	ret

00003bfe <__fp_mpack>:
    3bfe:	9f 3f       	cpi	r25, 0xFF	; 255
    3c00:	31 f0       	breq	.+12     	; 0x3c0e <__fp_mpack_finite+0xc>

00003c02 <__fp_mpack_finite>:
    3c02:	91 50       	subi	r25, 0x01	; 1
    3c04:	20 f4       	brcc	.+8      	; 0x3c0e <__fp_mpack_finite+0xc>
    3c06:	87 95       	ror	r24
    3c08:	77 95       	ror	r23
    3c0a:	67 95       	ror	r22
    3c0c:	b7 95       	ror	r27
    3c0e:	88 0f       	add	r24, r24
    3c10:	91 1d       	adc	r25, r1
    3c12:	96 95       	lsr	r25
    3c14:	87 95       	ror	r24
    3c16:	97 f9       	bld	r25, 7
    3c18:	08 95       	ret

00003c1a <__fp_powser>:
    3c1a:	df 93       	push	r29
    3c1c:	cf 93       	push	r28
    3c1e:	1f 93       	push	r17
    3c20:	0f 93       	push	r16
    3c22:	ff 92       	push	r15
    3c24:	ef 92       	push	r14
    3c26:	df 92       	push	r13
    3c28:	7b 01       	movw	r14, r22
    3c2a:	8c 01       	movw	r16, r24
    3c2c:	68 94       	set
    3c2e:	05 c0       	rjmp	.+10     	; 0x3c3a <__fp_powser+0x20>
    3c30:	da 2e       	mov	r13, r26
    3c32:	ef 01       	movw	r28, r30
    3c34:	d5 de       	rcall	.-598    	; 0x39e0 <__mulsf3x>
    3c36:	fe 01       	movw	r30, r28
    3c38:	e8 94       	clt
    3c3a:	a5 91       	lpm	r26, Z+
    3c3c:	25 91       	lpm	r18, Z+
    3c3e:	35 91       	lpm	r19, Z+
    3c40:	45 91       	lpm	r20, Z+
    3c42:	55 91       	lpm	r21, Z+
    3c44:	ae f3       	brts	.-22     	; 0x3c30 <__fp_powser+0x16>
    3c46:	ef 01       	movw	r28, r30
    3c48:	4a dd       	rcall	.-1388   	; 0x36de <__addsf3x>
    3c4a:	fe 01       	movw	r30, r28
    3c4c:	97 01       	movw	r18, r14
    3c4e:	a8 01       	movw	r20, r16
    3c50:	da 94       	dec	r13
    3c52:	79 f7       	brne	.-34     	; 0x3c32 <__fp_powser+0x18>
    3c54:	df 90       	pop	r13
    3c56:	ef 90       	pop	r14
    3c58:	ff 90       	pop	r15
    3c5a:	0f 91       	pop	r16
    3c5c:	1f 91       	pop	r17
    3c5e:	cf 91       	pop	r28
    3c60:	df 91       	pop	r29
    3c62:	08 95       	ret

00003c64 <inverse>:
    3c64:	9b 01       	movw	r18, r22
    3c66:	ac 01       	movw	r20, r24
    3c68:	60 e0       	ldi	r22, 0x00	; 0
    3c6a:	70 e0       	ldi	r23, 0x00	; 0
    3c6c:	80 e8       	ldi	r24, 0x80	; 128
    3c6e:	9f e3       	ldi	r25, 0x3F	; 63
    3c70:	89 cd       	rjmp	.-1262   	; 0x3784 <__divsf3>
    3c72:	59 ce       	rjmp	.-846    	; 0x3926 <__fp_inf>
    3c74:	c4 cf       	rjmp	.-120    	; 0x3bfe <__fp_mpack>

00003c76 <ldexp>:
    3c76:	87 de       	rcall	.-754    	; 0x3986 <__fp_splitA>
    3c78:	e8 f3       	brcs	.-6      	; 0x3c74 <inverse+0x10>
    3c7a:	99 23       	and	r25, r25
    3c7c:	d9 f3       	breq	.-10     	; 0x3c74 <inverse+0x10>
    3c7e:	94 0f       	add	r25, r20
    3c80:	51 1d       	adc	r21, r1
    3c82:	bb f3       	brvs	.-18     	; 0x3c72 <inverse+0xe>
    3c84:	91 50       	subi	r25, 0x01	; 1
    3c86:	50 40       	sbci	r21, 0x00	; 0
    3c88:	94 f0       	brlt	.+36     	; 0x3cae <ldexp+0x38>
    3c8a:	59 f0       	breq	.+22     	; 0x3ca2 <ldexp+0x2c>
    3c8c:	88 23       	and	r24, r24
    3c8e:	32 f0       	brmi	.+12     	; 0x3c9c <ldexp+0x26>
    3c90:	66 0f       	add	r22, r22
    3c92:	77 1f       	adc	r23, r23
    3c94:	88 1f       	adc	r24, r24
    3c96:	91 50       	subi	r25, 0x01	; 1
    3c98:	50 40       	sbci	r21, 0x00	; 0
    3c9a:	c1 f7       	brne	.-16     	; 0x3c8c <ldexp+0x16>
    3c9c:	9e 3f       	cpi	r25, 0xFE	; 254
    3c9e:	51 05       	cpc	r21, r1
    3ca0:	44 f7       	brge	.-48     	; 0x3c72 <inverse+0xe>
    3ca2:	88 0f       	add	r24, r24
    3ca4:	91 1d       	adc	r25, r1
    3ca6:	96 95       	lsr	r25
    3ca8:	87 95       	ror	r24
    3caa:	97 f9       	bld	r25, 7
    3cac:	08 95       	ret
    3cae:	5f 3f       	cpi	r21, 0xFF	; 255
    3cb0:	ac f0       	brlt	.+42     	; 0x3cdc <ldexp+0x66>
    3cb2:	98 3e       	cpi	r25, 0xE8	; 232
    3cb4:	9c f0       	brlt	.+38     	; 0x3cdc <ldexp+0x66>
    3cb6:	bb 27       	eor	r27, r27
    3cb8:	86 95       	lsr	r24
    3cba:	77 95       	ror	r23
    3cbc:	67 95       	ror	r22
    3cbe:	b7 95       	ror	r27
    3cc0:	08 f4       	brcc	.+2      	; 0x3cc4 <ldexp+0x4e>
    3cc2:	b1 60       	ori	r27, 0x01	; 1
    3cc4:	93 95       	inc	r25
    3cc6:	c1 f7       	brne	.-16     	; 0x3cb8 <ldexp+0x42>
    3cc8:	bb 0f       	add	r27, r27
    3cca:	58 f7       	brcc	.-42     	; 0x3ca2 <ldexp+0x2c>
    3ccc:	11 f4       	brne	.+4      	; 0x3cd2 <ldexp+0x5c>
    3cce:	60 ff       	sbrs	r22, 0
    3cd0:	e8 cf       	rjmp	.-48     	; 0x3ca2 <ldexp+0x2c>
    3cd2:	6f 5f       	subi	r22, 0xFF	; 255
    3cd4:	7f 4f       	sbci	r23, 0xFF	; 255
    3cd6:	8f 4f       	sbci	r24, 0xFF	; 255
    3cd8:	9f 4f       	sbci	r25, 0xFF	; 255
    3cda:	e3 cf       	rjmp	.-58     	; 0x3ca2 <ldexp+0x2c>
    3cdc:	6f ce       	rjmp	.-802    	; 0x39bc <__fp_szero>
    3cde:	0e f0       	brts	.+2      	; 0x3ce2 <ldexp+0x6c>
    3ce0:	8e cf       	rjmp	.-228    	; 0x3bfe <__fp_mpack>
    3ce2:	27 ce       	rjmp	.-946    	; 0x3932 <__fp_nan>
    3ce4:	68 94       	set
    3ce6:	1f ce       	rjmp	.-962    	; 0x3926 <__fp_inf>

00003ce8 <log>:
    3ce8:	4e de       	rcall	.-868    	; 0x3986 <__fp_splitA>
    3cea:	c8 f3       	brcs	.-14     	; 0x3cde <ldexp+0x68>
    3cec:	99 23       	and	r25, r25
    3cee:	d1 f3       	breq	.-12     	; 0x3ce4 <ldexp+0x6e>
    3cf0:	c6 f3       	brts	.-16     	; 0x3ce2 <ldexp+0x6c>
    3cf2:	df 93       	push	r29
    3cf4:	cf 93       	push	r28
    3cf6:	1f 93       	push	r17
    3cf8:	0f 93       	push	r16
    3cfa:	ff 92       	push	r15
    3cfc:	c9 2f       	mov	r28, r25
    3cfe:	dd 27       	eor	r29, r29
    3d00:	88 23       	and	r24, r24
    3d02:	2a f0       	brmi	.+10     	; 0x3d0e <log+0x26>
    3d04:	21 97       	sbiw	r28, 0x01	; 1
    3d06:	66 0f       	add	r22, r22
    3d08:	77 1f       	adc	r23, r23
    3d0a:	88 1f       	adc	r24, r24
    3d0c:	da f7       	brpl	.-10     	; 0x3d04 <log+0x1c>
    3d0e:	20 e0       	ldi	r18, 0x00	; 0
    3d10:	30 e0       	ldi	r19, 0x00	; 0
    3d12:	40 e8       	ldi	r20, 0x80	; 128
    3d14:	5f eb       	ldi	r21, 0xBF	; 191
    3d16:	9f e3       	ldi	r25, 0x3F	; 63
    3d18:	88 39       	cpi	r24, 0x98	; 152
    3d1a:	20 f0       	brcs	.+8      	; 0x3d24 <log+0x3c>
    3d1c:	80 3e       	cpi	r24, 0xE0	; 224
    3d1e:	30 f0       	brcs	.+12     	; 0x3d2c <log+0x44>
    3d20:	21 96       	adiw	r28, 0x01	; 1
    3d22:	8f 77       	andi	r24, 0x7F	; 127
    3d24:	cb dc       	rcall	.-1642   	; 0x36bc <__addsf3>
    3d26:	ec e0       	ldi	r30, 0x0C	; 12
    3d28:	f1 e0       	ldi	r31, 0x01	; 1
    3d2a:	03 c0       	rjmp	.+6      	; 0x3d32 <log+0x4a>
    3d2c:	c7 dc       	rcall	.-1650   	; 0x36bc <__addsf3>
    3d2e:	e9 e3       	ldi	r30, 0x39	; 57
    3d30:	f1 e0       	ldi	r31, 0x01	; 1
    3d32:	73 df       	rcall	.-282    	; 0x3c1a <__fp_powser>
    3d34:	8b 01       	movw	r16, r22
    3d36:	be 01       	movw	r22, r28
    3d38:	ec 01       	movw	r28, r24
    3d3a:	fb 2e       	mov	r15, r27
    3d3c:	6f 57       	subi	r22, 0x7F	; 127
    3d3e:	71 09       	sbc	r23, r1
    3d40:	75 95       	asr	r23
    3d42:	77 1f       	adc	r23, r23
    3d44:	88 0b       	sbc	r24, r24
    3d46:	99 0b       	sbc	r25, r25
    3d48:	b3 dd       	rcall	.-1178   	; 0x38b0 <__floatsisf>
    3d4a:	28 e1       	ldi	r18, 0x18	; 24
    3d4c:	32 e7       	ldi	r19, 0x72	; 114
    3d4e:	41 e3       	ldi	r20, 0x31	; 49
    3d50:	5f e3       	ldi	r21, 0x3F	; 63
    3d52:	46 de       	rcall	.-884    	; 0x39e0 <__mulsf3x>
    3d54:	af 2d       	mov	r26, r15
    3d56:	98 01       	movw	r18, r16
    3d58:	ae 01       	movw	r20, r28
    3d5a:	ff 90       	pop	r15
    3d5c:	0f 91       	pop	r16
    3d5e:	1f 91       	pop	r17
    3d60:	cf 91       	pop	r28
    3d62:	df 91       	pop	r29
    3d64:	bc dc       	rcall	.-1672   	; 0x36de <__addsf3x>
    3d66:	f6 cd       	rjmp	.-1044   	; 0x3954 <__fp_round>

00003d68 <modf>:
    3d68:	fa 01       	movw	r30, r20
    3d6a:	dc 01       	movw	r26, r24
    3d6c:	aa 0f       	add	r26, r26
    3d6e:	bb 1f       	adc	r27, r27
    3d70:	9b 01       	movw	r18, r22
    3d72:	ac 01       	movw	r20, r24
    3d74:	bf 57       	subi	r27, 0x7F	; 127
    3d76:	28 f4       	brcc	.+10     	; 0x3d82 <modf+0x1a>
    3d78:	22 27       	eor	r18, r18
    3d7a:	33 27       	eor	r19, r19
    3d7c:	44 27       	eor	r20, r20
    3d7e:	50 78       	andi	r21, 0x80	; 128
    3d80:	1f c0       	rjmp	.+62     	; 0x3dc0 <modf+0x58>
    3d82:	b7 51       	subi	r27, 0x17	; 23
    3d84:	88 f4       	brcc	.+34     	; 0x3da8 <modf+0x40>
    3d86:	ab 2f       	mov	r26, r27
    3d88:	00 24       	eor	r0, r0
    3d8a:	46 95       	lsr	r20
    3d8c:	37 95       	ror	r19
    3d8e:	27 95       	ror	r18
    3d90:	01 1c       	adc	r0, r1
    3d92:	a3 95       	inc	r26
    3d94:	d2 f3       	brmi	.-12     	; 0x3d8a <modf+0x22>
    3d96:	00 20       	and	r0, r0
    3d98:	69 f0       	breq	.+26     	; 0x3db4 <modf+0x4c>
    3d9a:	22 0f       	add	r18, r18
    3d9c:	33 1f       	adc	r19, r19
    3d9e:	44 1f       	adc	r20, r20
    3da0:	b3 95       	inc	r27
    3da2:	da f3       	brmi	.-10     	; 0x3d9a <modf+0x32>
    3da4:	0d d0       	rcall	.+26     	; 0x3dc0 <modf+0x58>
    3da6:	89 cc       	rjmp	.-1774   	; 0x36ba <__subsf3>
    3da8:	61 30       	cpi	r22, 0x01	; 1
    3daa:	71 05       	cpc	r23, r1
    3dac:	a0 e8       	ldi	r26, 0x80	; 128
    3dae:	8a 07       	cpc	r24, r26
    3db0:	b9 46       	sbci	r27, 0x69	; 105
    3db2:	30 f4       	brcc	.+12     	; 0x3dc0 <modf+0x58>
    3db4:	9b 01       	movw	r18, r22
    3db6:	ac 01       	movw	r20, r24
    3db8:	66 27       	eor	r22, r22
    3dba:	77 27       	eor	r23, r23
    3dbc:	88 27       	eor	r24, r24
    3dbe:	90 78       	andi	r25, 0x80	; 128
    3dc0:	30 96       	adiw	r30, 0x00	; 0
    3dc2:	21 f0       	breq	.+8      	; 0x3dcc <modf+0x64>
    3dc4:	20 83       	st	Z, r18
    3dc6:	31 83       	std	Z+1, r19	; 0x01
    3dc8:	42 83       	std	Z+2, r20	; 0x02
    3dca:	53 83       	std	Z+3, r21	; 0x03
    3dcc:	08 95       	ret

00003dce <__udivmodsi4>:
    3dce:	a1 e2       	ldi	r26, 0x21	; 33
    3dd0:	1a 2e       	mov	r1, r26
    3dd2:	aa 1b       	sub	r26, r26
    3dd4:	bb 1b       	sub	r27, r27
    3dd6:	fd 01       	movw	r30, r26
    3dd8:	0d c0       	rjmp	.+26     	; 0x3df4 <__udivmodsi4_ep>

00003dda <__udivmodsi4_loop>:
    3dda:	aa 1f       	adc	r26, r26
    3ddc:	bb 1f       	adc	r27, r27
    3dde:	ee 1f       	adc	r30, r30
    3de0:	ff 1f       	adc	r31, r31
    3de2:	a2 17       	cp	r26, r18
    3de4:	b3 07       	cpc	r27, r19
    3de6:	e4 07       	cpc	r30, r20
    3de8:	f5 07       	cpc	r31, r21
    3dea:	20 f0       	brcs	.+8      	; 0x3df4 <__udivmodsi4_ep>
    3dec:	a2 1b       	sub	r26, r18
    3dee:	b3 0b       	sbc	r27, r19
    3df0:	e4 0b       	sbc	r30, r20
    3df2:	f5 0b       	sbc	r31, r21

00003df4 <__udivmodsi4_ep>:
    3df4:	66 1f       	adc	r22, r22
    3df6:	77 1f       	adc	r23, r23
    3df8:	88 1f       	adc	r24, r24
    3dfa:	99 1f       	adc	r25, r25
    3dfc:	1a 94       	dec	r1
    3dfe:	69 f7       	brne	.-38     	; 0x3dda <__udivmodsi4_loop>
    3e00:	60 95       	com	r22
    3e02:	70 95       	com	r23
    3e04:	80 95       	com	r24
    3e06:	90 95       	com	r25
    3e08:	9b 01       	movw	r18, r22
    3e0a:	ac 01       	movw	r20, r24
    3e0c:	bd 01       	movw	r22, r26
    3e0e:	cf 01       	movw	r24, r30
    3e10:	08 95       	ret

00003e12 <memcpy>:
    3e12:	fb 01       	movw	r30, r22
    3e14:	dc 01       	movw	r26, r24
    3e16:	02 c0       	rjmp	.+4      	; 0x3e1c <memcpy+0xa>
    3e18:	01 90       	ld	r0, Z+
    3e1a:	0d 92       	st	X+, r0
    3e1c:	41 50       	subi	r20, 0x01	; 1
    3e1e:	50 40       	sbci	r21, 0x00	; 0
    3e20:	d8 f7       	brcc	.-10     	; 0x3e18 <memcpy+0x6>
    3e22:	08 95       	ret

00003e24 <memset>:
    3e24:	dc 01       	movw	r26, r24
    3e26:	01 c0       	rjmp	.+2      	; 0x3e2a <memset+0x6>
    3e28:	6d 93       	st	X+, r22
    3e2a:	41 50       	subi	r20, 0x01	; 1
    3e2c:	50 40       	sbci	r21, 0x00	; 0
    3e2e:	e0 f7       	brcc	.-8      	; 0x3e28 <memset+0x4>
    3e30:	08 95       	ret

00003e32 <_exit>:
    3e32:	f8 94       	cli

00003e34 <__stop_program>:
    3e34:	ff cf       	rjmp	.-2      	; 0x3e34 <__stop_program>
