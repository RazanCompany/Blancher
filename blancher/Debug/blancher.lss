
blancher.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000014a  00800200  00004e58  00004eec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004e58  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00001439  0080034a  0080034a  00005036  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00005036  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00005068  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000cc0  00000000  00000000  000050a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000dfa0  00000000  00000000  00005d68  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003b17  00000000  00000000  00013d08  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000c512  00000000  00000000  0001781f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002080  00000000  00000000  00023d34  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00019561  00000000  00000000  00025db4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000a4f8  00000000  00000000  0003f315  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000cc8  00000000  00000000  0004980d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000370a  00000000  00000000  0004a4d5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	db c0       	rjmp	.+438    	; 0x1b8 <__ctors_end>
       2:	00 00       	nop
       4:	fa c0       	rjmp	.+500    	; 0x1fa <__bad_interrupt>
       6:	00 00       	nop
       8:	f8 c0       	rjmp	.+496    	; 0x1fa <__bad_interrupt>
       a:	00 00       	nop
       c:	f6 c0       	rjmp	.+492    	; 0x1fa <__bad_interrupt>
       e:	00 00       	nop
      10:	f4 c0       	rjmp	.+488    	; 0x1fa <__bad_interrupt>
      12:	00 00       	nop
      14:	f2 c0       	rjmp	.+484    	; 0x1fa <__bad_interrupt>
      16:	00 00       	nop
      18:	f0 c0       	rjmp	.+480    	; 0x1fa <__bad_interrupt>
      1a:	00 00       	nop
      1c:	ee c0       	rjmp	.+476    	; 0x1fa <__bad_interrupt>
      1e:	00 00       	nop
      20:	ec c0       	rjmp	.+472    	; 0x1fa <__bad_interrupt>
      22:	00 00       	nop
      24:	ea c0       	rjmp	.+468    	; 0x1fa <__bad_interrupt>
      26:	00 00       	nop
      28:	e8 c0       	rjmp	.+464    	; 0x1fa <__bad_interrupt>
      2a:	00 00       	nop
      2c:	e6 c0       	rjmp	.+460    	; 0x1fa <__bad_interrupt>
      2e:	00 00       	nop
      30:	0c 94 bb 16 	jmp	0x2d76	; 0x2d76 <__vector_12>
      34:	0c 94 49 23 	jmp	0x4692	; 0x4692 <__vector_13>
      38:	e0 c0       	rjmp	.+448    	; 0x1fa <__bad_interrupt>
      3a:	00 00       	nop
      3c:	de c0       	rjmp	.+444    	; 0x1fa <__bad_interrupt>
      3e:	00 00       	nop
      40:	dc c0       	rjmp	.+440    	; 0x1fa <__bad_interrupt>
      42:	00 00       	nop
      44:	0c 94 8f 0c 	jmp	0x191e	; 0x191e <__vector_17>
      48:	d8 c0       	rjmp	.+432    	; 0x1fa <__bad_interrupt>
      4a:	00 00       	nop
      4c:	d6 c0       	rjmp	.+428    	; 0x1fa <__bad_interrupt>
      4e:	00 00       	nop
      50:	d4 c0       	rjmp	.+424    	; 0x1fa <__bad_interrupt>
      52:	00 00       	nop
      54:	d2 c0       	rjmp	.+420    	; 0x1fa <__bad_interrupt>
      56:	00 00       	nop
      58:	d0 c0       	rjmp	.+416    	; 0x1fa <__bad_interrupt>
      5a:	00 00       	nop
      5c:	ce c0       	rjmp	.+412    	; 0x1fa <__bad_interrupt>
      5e:	00 00       	nop
      60:	cc c0       	rjmp	.+408    	; 0x1fa <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 51 0e 	jmp	0x1ca2	; 0x1ca2 <__vector_25>
      68:	0c 94 8a 0e 	jmp	0x1d14	; 0x1d14 <__vector_26>
      6c:	c6 c0       	rjmp	.+396    	; 0x1fa <__bad_interrupt>
      6e:	00 00       	nop
      70:	c4 c0       	rjmp	.+392    	; 0x1fa <__bad_interrupt>
      72:	00 00       	nop
      74:	0c 94 97 0b 	jmp	0x172e	; 0x172e <__vector_29>
      78:	c0 c0       	rjmp	.+384    	; 0x1fa <__bad_interrupt>
      7a:	00 00       	nop
      7c:	be c0       	rjmp	.+380    	; 0x1fa <__bad_interrupt>
      7e:	00 00       	nop
      80:	0c 94 ff 0c 	jmp	0x19fe	; 0x19fe <__vector_32>
      84:	ba c0       	rjmp	.+372    	; 0x1fa <__bad_interrupt>
      86:	00 00       	nop
      88:	b8 c0       	rjmp	.+368    	; 0x1fa <__bad_interrupt>
      8a:	00 00       	nop
      8c:	b6 c0       	rjmp	.+364    	; 0x1fa <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 57 0f 	jmp	0x1eae	; 0x1eae <__vector_36>
      94:	0c 94 90 0f 	jmp	0x1f20	; 0x1f20 <__vector_37>
      98:	b0 c0       	rjmp	.+352    	; 0x1fa <__bad_interrupt>
      9a:	00 00       	nop
      9c:	ae c0       	rjmp	.+348    	; 0x1fa <__bad_interrupt>
      9e:	00 00       	nop
      a0:	ac c0       	rjmp	.+344    	; 0x1fa <__bad_interrupt>
      a2:	00 00       	nop
      a4:	aa c0       	rjmp	.+340    	; 0x1fa <__bad_interrupt>
      a6:	00 00       	nop
      a8:	0c 94 6f 0d 	jmp	0x1ade	; 0x1ade <__vector_42>
      ac:	a6 c0       	rjmp	.+332    	; 0x1fa <__bad_interrupt>
      ae:	00 00       	nop
      b0:	a4 c0       	rjmp	.+328    	; 0x1fa <__bad_interrupt>
      b2:	00 00       	nop
      b4:	a2 c0       	rjmp	.+324    	; 0x1fa <__bad_interrupt>
      b6:	00 00       	nop
      b8:	a0 c0       	rjmp	.+320    	; 0x1fa <__bad_interrupt>
      ba:	00 00       	nop
      bc:	0c 94 df 0d 	jmp	0x1bbe	; 0x1bbe <__vector_47>
      c0:	9c c0       	rjmp	.+312    	; 0x1fa <__bad_interrupt>
      c2:	00 00       	nop
      c4:	9a c0       	rjmp	.+308    	; 0x1fa <__bad_interrupt>
      c6:	00 00       	nop
      c8:	98 c0       	rjmp	.+304    	; 0x1fa <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 66 10 	jmp	0x20cc	; 0x20cc <__vector_51>
      d0:	0c 94 9f 10 	jmp	0x213e	; 0x213e <__vector_52>
      d4:	92 c0       	rjmp	.+292    	; 0x1fa <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 72 11 	jmp	0x22e4	; 0x22e4 <__vector_54>
      dc:	0c 94 ab 11 	jmp	0x2356	; 0x2356 <__vector_55>
      e0:	8c c0       	rjmp	.+280    	; 0x1fa <__bad_interrupt>
      e2:	00 00       	nop
      e4:	07 63       	ori	r16, 0x37	; 55
      e6:	42 36       	cpi	r20, 0x62	; 98
      e8:	b7 9b       	sbis	0x16, 7	; 22
      ea:	d8 a7       	std	Y+40, r29	; 0x28
      ec:	1a 39       	cpi	r17, 0x9A	; 154
      ee:	68 56       	subi	r22, 0x68	; 104
      f0:	18 ae       	std	Y+56, r1	; 0x38
      f2:	ba ab       	std	Y+50, r27	; 0x32
      f4:	55 8c       	ldd	r5, Z+29	; 0x1d
      f6:	1d 3c       	cpi	r17, 0xCD	; 205
      f8:	b7 cc       	rjmp	.-1682   	; 0xfffffa68 <__eeprom_end+0xff7efa68>
      fa:	57 63       	ori	r21, 0x37	; 55
      fc:	bd 6d       	ori	r27, 0xDD	; 221
      fe:	ed fd       	.word	0xfded	; ????
     100:	75 3e       	cpi	r23, 0xE5	; 229
     102:	f6 17       	cp	r31, r22
     104:	72 31       	cpi	r23, 0x12	; 18
     106:	bf 00       	.word	0x00bf	; ????
     108:	00 00       	nop
     10a:	80 3f       	cpi	r24, 0xF0	; 240
     10c:	08 00       	.word	0x0008	; ????
     10e:	00 00       	nop
     110:	be 92       	st	-X, r11
     112:	24 49       	sbci	r18, 0x94	; 148
     114:	12 3e       	cpi	r17, 0xE2	; 226
     116:	ab aa       	std	Y+51, r10	; 0x33
     118:	aa 2a       	or	r10, r26
     11a:	be cd       	rjmp	.-1156   	; 0xfffffc98 <__eeprom_end+0xff7efc98>
     11c:	cc cc       	rjmp	.-1640   	; 0xfffffab6 <__eeprom_end+0xff7efab6>
     11e:	4c 3e       	cpi	r20, 0xEC	; 236
     120:	00 00       	nop
     122:	00 80       	ld	r0, Z
     124:	be ab       	std	Y+54, r27	; 0x36
     126:	aa aa       	std	Y+50, r10	; 0x32
     128:	aa 3e       	cpi	r26, 0xEA	; 234
     12a:	00 00       	nop
     12c:	00 00       	nop
     12e:	bf 00       	.word	0x00bf	; ????
     130:	00 00       	nop
     132:	80 3f       	cpi	r24, 0xF0	; 240
     134:	00 00       	nop
     136:	00 00       	nop
     138:	00 08       	sbc	r0, r0
     13a:	41 78       	andi	r20, 0x81	; 129
     13c:	d3 bb       	out	0x13, r29	; 19
     13e:	43 87       	std	Z+11, r20	; 0x0b
     140:	d1 13       	cpse	r29, r17
     142:	3d 19       	sub	r19, r13
     144:	0e 3c       	cpi	r16, 0xCE	; 206
     146:	c3 bd       	out	0x23, r28	; 35
     148:	42 82       	std	Z+2, r4	; 0x02
     14a:	ad 2b       	or	r26, r29
     14c:	3e 68       	ori	r19, 0x8E	; 142
     14e:	ec 82       	std	Y+4, r14	; 0x04
     150:	76 be       	out	0x36, r7	; 54
     152:	d9 8f       	std	Y+25, r29	; 0x19
     154:	e1 a9       	ldd	r30, Z+49	; 0x31
     156:	3e 4c       	sbci	r19, 0xCE	; 206
     158:	80 ef       	ldi	r24, 0xF0	; 240
     15a:	ff be       	out	0x3f, r15	; 63
     15c:	01 c4       	rjmp	.+2050   	; 0x960 <Modbus_mster_transaction+0x530>
     15e:	ff 7f       	andi	r31, 0xFF	; 255
     160:	3f 00       	.word	0x003f	; ????
     162:	00 00       	nop
	...

00000166 <prvIdleTask>:
    /* Reset the event list item to its normal value - so it can be used with
    queues and semaphores. */
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */

    return uxReturn;
}
     166:	c4 e9       	ldi	r28, 0x94	; 148
     168:	dd e0       	ldi	r29, 0x0D	; 13
     16a:	0a ea       	ldi	r16, 0xAA	; 170
     16c:	1d e0       	ldi	r17, 0x0D	; 13
     16e:	80 91 93 0d 	lds	r24, 0x0D93	; 0x800d93 <uxDeletedTasksWaitingCleanUp>
     172:	88 23       	and	r24, r24
     174:	d1 f0       	breq	.+52     	; 0x1aa <prvIdleTask+0x44>
     176:	0f b6       	in	r0, 0x3f	; 63
     178:	f8 94       	cli
     17a:	0f 92       	push	r0
     17c:	ed 81       	ldd	r30, Y+5	; 0x05
     17e:	fe 81       	ldd	r31, Y+6	; 0x06
     180:	86 81       	ldd	r24, Z+6	; 0x06
     182:	97 81       	ldd	r25, Z+7	; 0x07
     184:	02 96       	adiw	r24, 0x02	; 2
     186:	0e 94 23 15 	call	0x2a46	; 0x2a46 <uxListRemove>
     18a:	80 91 92 0d 	lds	r24, 0x0D92	; 0x800d92 <uxCurrentNumberOfTasks>
     18e:	81 50       	subi	r24, 0x01	; 1
     190:	80 93 92 0d 	sts	0x0D92, r24	; 0x800d92 <uxCurrentNumberOfTasks>
     194:	80 91 93 0d 	lds	r24, 0x0D93	; 0x800d93 <uxDeletedTasksWaitingCleanUp>
     198:	81 50       	subi	r24, 0x01	; 1
     19a:	80 93 93 0d 	sts	0x0D93, r24	; 0x800d93 <uxDeletedTasksWaitingCleanUp>
     19e:	0f 90       	pop	r0
     1a0:	0f be       	out	0x3f, r0	; 63
     1a2:	80 91 93 0d 	lds	r24, 0x0D93	; 0x800d93 <uxDeletedTasksWaitingCleanUp>
     1a6:	81 11       	cpse	r24, r1
     1a8:	e6 cf       	rjmp	.-52     	; 0x176 <prvIdleTask+0x10>
     1aa:	f8 01       	movw	r30, r16
     1ac:	80 81       	ld	r24, Z
     1ae:	82 30       	cpi	r24, 0x02	; 2
     1b0:	f0 f2       	brcs	.-68     	; 0x16e <prvIdleTask+0x8>
     1b2:	0e 94 f8 15 	call	0x2bf0	; 0x2bf0 <vPortYield>
     1b6:	db cf       	rjmp	.-74     	; 0x16e <prvIdleTask+0x8>

000001b8 <__ctors_end>:
     1b8:	11 24       	eor	r1, r1
     1ba:	1f be       	out	0x3f, r1	; 63
     1bc:	cf ef       	ldi	r28, 0xFF	; 255
     1be:	d1 e2       	ldi	r29, 0x21	; 33
     1c0:	de bf       	out	0x3e, r29	; 62
     1c2:	cd bf       	out	0x3d, r28	; 61
     1c4:	00 e0       	ldi	r16, 0x00	; 0
     1c6:	0c bf       	out	0x3c, r16	; 60

000001c8 <__do_copy_data>:
     1c8:	13 e0       	ldi	r17, 0x03	; 3
     1ca:	a0 e0       	ldi	r26, 0x00	; 0
     1cc:	b2 e0       	ldi	r27, 0x02	; 2
     1ce:	e8 e5       	ldi	r30, 0x58	; 88
     1d0:	fe e4       	ldi	r31, 0x4E	; 78
     1d2:	00 e0       	ldi	r16, 0x00	; 0
     1d4:	0b bf       	out	0x3b, r16	; 59
     1d6:	02 c0       	rjmp	.+4      	; 0x1dc <__do_copy_data+0x14>
     1d8:	07 90       	elpm	r0, Z+
     1da:	0d 92       	st	X+, r0
     1dc:	aa 34       	cpi	r26, 0x4A	; 74
     1de:	b1 07       	cpc	r27, r17
     1e0:	d9 f7       	brne	.-10     	; 0x1d8 <__do_copy_data+0x10>

000001e2 <__do_clear_bss>:
     1e2:	27 e1       	ldi	r18, 0x17	; 23
     1e4:	aa e4       	ldi	r26, 0x4A	; 74
     1e6:	b3 e0       	ldi	r27, 0x03	; 3
     1e8:	01 c0       	rjmp	.+2      	; 0x1ec <.do_clear_bss_start>

000001ea <.do_clear_bss_loop>:
     1ea:	1d 92       	st	X+, r1

000001ec <.do_clear_bss_start>:
     1ec:	a3 38       	cpi	r26, 0x83	; 131
     1ee:	b2 07       	cpc	r27, r18
     1f0:	e1 f7       	brne	.-8      	; 0x1ea <.do_clear_bss_loop>
     1f2:	0e 94 ef 0a 	call	0x15de	; 0x15de <main>
     1f6:	0c 94 2a 27 	jmp	0x4e54	; 0x4e54 <_exit>

000001fa <__bad_interrupt>:
     1fa:	02 cf       	rjmp	.-508    	; 0x0 <__vectors>

000001fc <Set_drum_time_callback>:
	Encoder_init(Set_drum_time_callback, 5, 16);
	
}
static void Set_drum_time_callback(uint32_t dif_time)
{
	g_drum_time = dif_time;
     1fc:	60 93 6e 0e 	sts	0x0E6E, r22	; 0x800e6e <g_drum_time>
     200:	70 93 6f 0e 	sts	0x0E6F, r23	; 0x800e6f <g_drum_time+0x1>
     204:	80 93 70 0e 	sts	0x0E70, r24	; 0x800e70 <g_drum_time+0x2>
     208:	90 93 71 0e 	sts	0x0E71, r25	; 0x800e71 <g_drum_time+0x3>
     20c:	08 95       	ret

0000020e <Drum_speed_init>:
 * call back function
 * parameters@ difference time between every ISR For Drum
 * return@ Nothing
 */
void Drum_speed_init(void){
	Encoder_init(Set_drum_time_callback, 5, 16);
     20e:	40 e1       	ldi	r20, 0x10	; 16
     210:	50 e0       	ldi	r21, 0x00	; 0
     212:	65 e0       	ldi	r22, 0x05	; 5
     214:	8e ef       	ldi	r24, 0xFE	; 254
     216:	90 e0       	ldi	r25, 0x00	; 0
     218:	01 c0       	rjmp	.+2      	; 0x21c <Encoder_init>
     21a:	08 95       	ret

0000021c <Encoder_init>:
 */

void Encoder_init(void (*pISR_callback)(uint32_t),uint8_t timer_number,uint16_t ticks_number )
{
	//encoder of Drum on timer 5
	Encoder_1_confg.timer_number = timer_number;
     21c:	e2 e7       	ldi	r30, 0x72	; 114
     21e:	fe e0       	ldi	r31, 0x0E	; 14
     220:	64 83       	std	Z+4, r22	; 0x04
	// number of ticks 16 to interrupted
	Encoder_1_confg.ticks = ticks_number;
     222:	51 83       	std	Z+1, r21	; 0x01
     224:	40 83       	st	Z, r20
	//Call back Function 
	Encoder_1_confg.isr_call_back = pISR_callback ; 
     226:	93 83       	std	Z+3, r25	; 0x03
     228:	82 83       	std	Z+2, r24	; 0x02
    timers_init(&Encoder_1_confg);
     22a:	cf 01       	movw	r24, r30
     22c:	0c 94 27 0c 	jmp	0x184e	; 0x184e <timers_init>
     230:	08 95       	ret

00000232 <flowrate_feeding_callback>:
{
	/*
	*	this function is called back from the isr to increment the liters counter .
	*/
  // call the feeding operation callback .
     feeding_operation_callback();
     232:	e0 91 77 0e 	lds	r30, 0x0E77	; 0x800e77 <feeding_operation_callback>
     236:	f0 91 78 0e 	lds	r31, 0x0E78	; 0x800e78 <feeding_operation_callback+0x1>
     23a:	19 95       	eicall
     23c:	08 95       	ret

0000023e <flowrate_outing_callback>:
{
	/*
	*	this function is called back from the isr to increment the liters counter .
	*/
  // call the feeding operation callback .
     out_operation_callback();
     23e:	e0 91 79 0e 	lds	r30, 0x0E79	; 0x800e79 <out_operation_callback>
     242:	f0 91 7a 0e 	lds	r31, 0x0E7A	; 0x800e7a <out_operation_callback+0x1>
     246:	19 95       	eicall
     248:	08 95       	ret

0000024a <Flow_rate_init>:
// struts to hold the timers config .
g_Timer_Config feeding_configeration;
g_Timer_Config outing_configeration;

void Flow_rate_init(uint8_t flowrate1_timer_number,uint8_t flowrate2_timer_number,void (*callback1)(void) , void (*callback2)(void)) 
{
     24a:	cf 92       	push	r12
     24c:	df 92       	push	r13
     24e:	ef 92       	push	r14
     250:	ff 92       	push	r15
     252:	0f 93       	push	r16
     254:	1f 93       	push	r17
     256:	cf 93       	push	r28
     258:	df 93       	push	r29
     25a:	6a 01       	movw	r12, r20
     25c:	79 01       	movw	r14, r18
	
	feeding_configeration.ticks = TICKS_FOR_HALF_LITER ;
     25e:	c0 e8       	ldi	r28, 0x80	; 128
     260:	de e0       	ldi	r29, 0x0E	; 14
     262:	00 ef       	ldi	r16, 0xF0	; 240
     264:	10 e0       	ldi	r17, 0x00	; 0
     266:	19 83       	std	Y+1, r17	; 0x01
     268:	08 83       	st	Y, r16
	feeding_configeration.timer_number = 1 ;//flowrate1_timer_number
     26a:	81 e0       	ldi	r24, 0x01	; 1
     26c:	8c 83       	std	Y+4, r24	; 0x04
	feeding_configeration.isr_call_back = flowrate_feeding_callback ;
     26e:	89 e1       	ldi	r24, 0x19	; 25
     270:	91 e0       	ldi	r25, 0x01	; 1
     272:	9b 83       	std	Y+3, r25	; 0x03
     274:	8a 83       	std	Y+2, r24	; 0x02
	
	// initialize the needed timer with the previous config .
    timers_init(&feeding_configeration);
     276:	ce 01       	movw	r24, r28
     278:	0e 94 27 0c 	call	0x184e	; 0x184e <timers_init>
	
	// initialize other timer for the second flow rate .
	feeding_configeration.ticks = TICKS_FOR_HALF_LITER ;
     27c:	19 83       	std	Y+1, r17	; 0x01
     27e:	08 83       	st	Y, r16
	feeding_configeration.timer_number = 3 ;//flowrate2_timer_number
     280:	83 e0       	ldi	r24, 0x03	; 3
     282:	8c 83       	std	Y+4, r24	; 0x04
	feeding_configeration.isr_call_back = flowrate_outing_callback ;
     284:	8f e1       	ldi	r24, 0x1F	; 31
     286:	91 e0       	ldi	r25, 0x01	; 1
     288:	9b 83       	std	Y+3, r25	; 0x03
     28a:	8a 83       	std	Y+2, r24	; 0x02
	
	// initialize the needed timer with the previous config .
	timers_init(&outing_configeration);
     28c:	8b e7       	ldi	r24, 0x7B	; 123
     28e:	9e e0       	ldi	r25, 0x0E	; 14
     290:	0e 94 27 0c 	call	0x184e	; 0x184e <timers_init>
	feeding_operation_callback = callback1;
     294:	d0 92 78 0e 	sts	0x0E78, r13	; 0x800e78 <feeding_operation_callback+0x1>
     298:	c0 92 77 0e 	sts	0x0E77, r12	; 0x800e77 <feeding_operation_callback>
	out_operation_callback = callback2 ;
     29c:	f0 92 7a 0e 	sts	0x0E7A, r15	; 0x800e7a <out_operation_callback+0x1>
     2a0:	e0 92 79 0e 	sts	0x0E79, r14	; 0x800e79 <out_operation_callback>
	DIO_init();
     2a4:	0e 94 b4 0b 	call	0x1768	; 0x1768 <DIO_init>
}
     2a8:	df 91       	pop	r29
     2aa:	cf 91       	pop	r28
     2ac:	1f 91       	pop	r17
     2ae:	0f 91       	pop	r16
     2b0:	ff 90       	pop	r15
     2b2:	ef 90       	pop	r14
     2b4:	df 90       	pop	r13
     2b6:	cf 90       	pop	r12
     2b8:	08 95       	ret

000002ba <Inverter_pre_transmition>:
 * set the enable pin for modbus to start send
 * parameters  Nothing
 * return Nothing
 */
void Inverter_pre_transmition(void) {
	Modbus_change_state(INVERTER, HIGH);
     2ba:	61 e0       	ldi	r22, 0x01	; 1
     2bc:	81 e0       	ldi	r24, 0x01	; 1
     2be:	0c 94 0a 0c 	jmp	0x1814	; 0x1814 <Modbus_change_state>
     2c2:	08 95       	ret

000002c4 <Inverter_post_transmition>:
 * Clear the enable pin for modbus to start send
 * parameters  Nothing
 * return Nothing
 */
void Inverter_post_transmition(void) {
	Modbus_change_state(INVERTER, LOW);
     2c4:	60 e0       	ldi	r22, 0x00	; 0
     2c6:	81 e0       	ldi	r24, 0x01	; 1
     2c8:	0c 94 0a 0c 	jmp	0x1814	; 0x1814 <Modbus_change_state>
     2cc:	08 95       	ret

000002ce <Inverter_init>:
 */
void Inverter_init( UART_Modules uart_n, uint32_t baudrate, uint8_t slave_id )
{
	
	// Modbus Parameters
	s_inv_mod_confg.uart_num = uart_n;
     2ce:	ea e4       	ldi	r30, 0x4A	; 74
     2d0:	f3 e0       	ldi	r31, 0x03	; 3
     2d2:	81 83       	std	Z+1, r24	; 0x01
	s_inv_mod_confg.baud_rate =  baudrate;
     2d4:	42 83       	std	Z+2, r20	; 0x02
     2d6:	53 83       	std	Z+3, r21	; 0x03
     2d8:	64 83       	std	Z+4, r22	; 0x04
     2da:	75 83       	std	Z+5, r23	; 0x05
	s_inv_mod_confg.slave_address = slave_id;
     2dc:	20 83       	st	Z, r18
	s_inv_mod_confg.post_transmission = Inverter_post_transmition;
     2de:	82 e6       	ldi	r24, 0x62	; 98
     2e0:	91 e0       	ldi	r25, 0x01	; 1
     2e2:	91 87       	std	Z+9, r25	; 0x09
     2e4:	80 87       	std	Z+8, r24	; 0x08
	s_inv_mod_confg.pre_transmission = Inverter_pre_transmition;
     2e6:	8d e5       	ldi	r24, 0x5D	; 93
     2e8:	91 e0       	ldi	r25, 0x01	; 1
     2ea:	97 83       	std	Z+7, r25	; 0x07
     2ec:	86 83       	std	Z+6, r24	; 0x06
// 	UART0_puts("slave id ");
// 	UART0_OutUDec(slave_id);

	// init the mod bus on Mod Bus
	
	Modbus_init(INVERTER, &s_inv_mod_confg);
     2ee:	bf 01       	movw	r22, r30
     2f0:	81 e0       	ldi	r24, 0x01	; 1
     2f2:	2b c7       	rjmp	.+3670   	; 0x114a <Modbus_init>
     2f4:	08 95       	ret

000002f6 <Modbus_idle_task>:

//
void Lcd_Write(uint16_t address, uint16_t value){
	Modbus_Set_transmit_buffer(LCD,0, value);
    Modbus_Write_multiple_registers(LCD,address, 0x01);
}
     2f6:	80 e0       	ldi	r24, 0x00	; 0
     2f8:	90 e0       	ldi	r25, 0x00	; 0
     2fa:	0c 94 07 1d 	jmp	0x3a0e	; 0x3a0e <vTaskDelay>
     2fe:	08 95       	ret

00000300 <LCD_post_transmission>:
     300:	60 e0       	ldi	r22, 0x00	; 0
     302:	80 e0       	ldi	r24, 0x00	; 0
     304:	0c 94 0a 0c 	jmp	0x1814	; 0x1814 <Modbus_change_state>
     308:	08 95       	ret

0000030a <LCD_pre_transmission>:
     30a:	61 e0       	ldi	r22, 0x01	; 1
     30c:	80 e0       	ldi	r24, 0x00	; 0
     30e:	0c 94 0a 0c 	jmp	0x1814	; 0x1814 <Modbus_change_state>
     312:	08 95       	ret

00000314 <Lcd_init>:
     314:	e6 e5       	ldi	r30, 0x56	; 86
     316:	f3 e0       	ldi	r31, 0x03	; 3
     318:	20 83       	st	Z, r18
     31a:	81 83       	std	Z+1, r24	; 0x01
     31c:	42 83       	std	Z+2, r20	; 0x02
     31e:	53 83       	std	Z+3, r21	; 0x03
     320:	64 83       	std	Z+4, r22	; 0x04
     322:	75 83       	std	Z+5, r23	; 0x05
     324:	85 e8       	ldi	r24, 0x85	; 133
     326:	91 e0       	ldi	r25, 0x01	; 1
     328:	97 83       	std	Z+7, r25	; 0x07
     32a:	86 83       	std	Z+6, r24	; 0x06
     32c:	80 e8       	ldi	r24, 0x80	; 128
     32e:	91 e0       	ldi	r25, 0x01	; 1
     330:	91 87       	std	Z+9, r25	; 0x09
     332:	80 87       	std	Z+8, r24	; 0x08
     334:	8b e7       	ldi	r24, 0x7B	; 123
     336:	91 e0       	ldi	r25, 0x01	; 1
     338:	93 87       	std	Z+11, r25	; 0x0b
     33a:	82 87       	std	Z+10, r24	; 0x0a
     33c:	bf 01       	movw	r22, r30
     33e:	80 e0       	ldi	r24, 0x00	; 0
     340:	04 c7       	rjmp	.+3592   	; 0x114a <Modbus_init>
     342:	08 95       	ret

00000344 <Lcd_Read_multiple_data>:
 *
 *                    LCD Multiple Data functions 
 * 
************************************************************************************************************/

uint8_t Lcd_Read_multiple_data(uint16_t address ,uint16_t *pData,uint8_t QTY){
     344:	ff 92       	push	r15
     346:	0f 93       	push	r16
     348:	1f 93       	push	r17
     34a:	cf 93       	push	r28
     34c:	df 93       	push	r29
     34e:	f6 2e       	mov	r15, r22
     350:	c7 2f       	mov	r28, r23
     352:	d4 2f       	mov	r29, r20
	uint8_t err = Modbus_Read_holding_registers(LCD,address,QTY);
     354:	50 e0       	ldi	r21, 0x00	; 0
     356:	bc 01       	movw	r22, r24
     358:	80 e0       	ldi	r24, 0x00	; 0
     35a:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <Modbus_Read_holding_registers>
	if(err == 0){
     35e:	81 11       	cpse	r24, r1
     360:	12 c0       	rjmp	.+36     	; 0x386 <Lcd_Read_multiple_data+0x42>
		for(uint8_t i=0; i<QTY;i++){
     362:	dd 23       	and	r29, r29
     364:	79 f0       	breq	.+30     	; 0x384 <Lcd_Read_multiple_data+0x40>
     366:	0f 2d       	mov	r16, r15
     368:	1c 2f       	mov	r17, r28
     36a:	c0 e0       	ldi	r28, 0x00	; 0
			(*(pData+i)) = Modbus_Get_response_buffer(LCD,i);
     36c:	6c 2f       	mov	r22, r28
     36e:	80 e0       	ldi	r24, 0x00	; 0
     370:	df d7       	rcall	.+4030   	; 0x1330 <Modbus_Get_response_buffer>
     372:	f8 01       	movw	r30, r16
     374:	81 93       	st	Z+, r24
     376:	91 93       	st	Z+, r25
     378:	8f 01       	movw	r16, r30
************************************************************************************************************/

uint8_t Lcd_Read_multiple_data(uint16_t address ,uint16_t *pData,uint8_t QTY){
	uint8_t err = Modbus_Read_holding_registers(LCD,address,QTY);
	if(err == 0){
		for(uint8_t i=0; i<QTY;i++){
     37a:	cf 5f       	subi	r28, 0xFF	; 255
     37c:	dc 13       	cpse	r29, r28
     37e:	f6 cf       	rjmp	.-20     	; 0x36c <Lcd_Read_multiple_data+0x28>
			(*(pData+i)) = Modbus_Get_response_buffer(LCD,i);
		}
		return LCD_OK;	
     380:	80 e0       	ldi	r24, 0x00	; 0
     382:	01 c0       	rjmp	.+2      	; 0x386 <Lcd_Read_multiple_data+0x42>
     384:	80 e0       	ldi	r24, 0x00	; 0
	}
	else {
		return err;
	}

}
     386:	df 91       	pop	r29
     388:	cf 91       	pop	r28
     38a:	1f 91       	pop	r17
     38c:	0f 91       	pop	r16
     38e:	ff 90       	pop	r15
     390:	08 95       	ret

00000392 <Lcd_Write_multiple_data>:

uint8_t Lcd_Write_multiple_data(uint16_t address ,uint16_t *pData,uint8_t QTY){
     392:	ef 92       	push	r14
     394:	ff 92       	push	r15
     396:	0f 93       	push	r16
     398:	1f 93       	push	r17
     39a:	cf 93       	push	r28
     39c:	df 93       	push	r29
     39e:	7c 01       	movw	r14, r24
     3a0:	d4 2f       	mov	r29, r20
	for(uint8_t i=0;i<QTY;i++){
     3a2:	44 23       	and	r20, r20
     3a4:	69 f0       	breq	.+26     	; 0x3c0 <Lcd_Write_multiple_data+0x2e>
     3a6:	06 2f       	mov	r16, r22
     3a8:	17 2f       	mov	r17, r23
     3aa:	c0 e0       	ldi	r28, 0x00	; 0
		Modbus_Set_transmit_buffer(LCD,i, (*(pData+i)));
     3ac:	f8 01       	movw	r30, r16
     3ae:	41 91       	ld	r20, Z+
     3b0:	51 91       	ld	r21, Z+
     3b2:	8f 01       	movw	r16, r30
     3b4:	6c 2f       	mov	r22, r28
     3b6:	80 e0       	ldi	r24, 0x00	; 0
     3b8:	de d7       	rcall	.+4028   	; 0x1376 <Modbus_Set_transmit_buffer>
	}

}

uint8_t Lcd_Write_multiple_data(uint16_t address ,uint16_t *pData,uint8_t QTY){
	for(uint8_t i=0;i<QTY;i++){
     3ba:	cf 5f       	subi	r28, 0xFF	; 255
     3bc:	dc 13       	cpse	r29, r28
     3be:	f6 cf       	rjmp	.-20     	; 0x3ac <Lcd_Write_multiple_data+0x1a>
		Modbus_Set_transmit_buffer(LCD,i, (*(pData+i)));
	}
	return Modbus_Write_multiple_registers(LCD,address,QTY);
     3c0:	4d 2f       	mov	r20, r29
     3c2:	50 e0       	ldi	r21, 0x00	; 0
     3c4:	b7 01       	movw	r22, r14
     3c6:	80 e0       	ldi	r24, 0x00	; 0
     3c8:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <Modbus_Write_multiple_registers>
	
}
     3cc:	df 91       	pop	r29
     3ce:	cf 91       	pop	r28
     3d0:	1f 91       	pop	r17
     3d2:	0f 91       	pop	r16
     3d4:	ff 90       	pop	r15
     3d6:	ef 90       	pop	r14
     3d8:	08 95       	ret

000003da <Get_tank_level>:
#include "levels.h"
#include "../MCAL/DIO.h"

 
 uint8_t Get_tank_level(void)
 {
     3da:	cf 93       	push	r28
     3dc:	df 93       	push	r29
	uint8_t Tank_sensor = 0 ;
	Tank_sensor = Get_tank_level_state(1) | (Get_tank_level_state(2) << 1) | (Get_tank_level_state(3) << 2) ;
     3de:	81 e0       	ldi	r24, 0x01	; 1
     3e0:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <Get_tank_level_state>
     3e4:	c8 2f       	mov	r28, r24
     3e6:	82 e0       	ldi	r24, 0x02	; 2
     3e8:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <Get_tank_level_state>
     3ec:	d8 2f       	mov	r29, r24
     3ee:	83 e0       	ldi	r24, 0x03	; 3
     3f0:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <Get_tank_level_state>
     3f4:	dd 0f       	add	r29, r29
     3f6:	24 e0       	ldi	r18, 0x04	; 4
     3f8:	82 9f       	mul	r24, r18
     3fa:	c0 01       	movw	r24, r0
     3fc:	11 24       	eor	r1, r1
     3fe:	8d 2b       	or	r24, r29
     400:	8c 2b       	or	r24, r28
	if (Tank_sensor == 2 || Tank_sensor == 4 || Tank_sensor == 5 || Tank_sensor == 6  )
     402:	82 30       	cpi	r24, 0x02	; 2
     404:	51 f0       	breq	.+20     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
     406:	9c ef       	ldi	r25, 0xFC	; 252
     408:	98 0f       	add	r25, r24
     40a:	93 30       	cpi	r25, 0x03	; 3
     40c:	40 f0       	brcs	.+16     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
	{
		return LEVEL_ERROR ;
	}
	if(Tank_sensor == 3) Tank_sensor =2;
     40e:	83 30       	cpi	r24, 0x03	; 3
     410:	41 f0       	breq	.+16     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
	if(Tank_sensor == 7) Tank_sensor =3;
     412:	87 30       	cpi	r24, 0x07	; 7
     414:	39 f4       	brne	.+14     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
     416:	83 e0       	ldi	r24, 0x03	; 3
     418:	05 c0       	rjmp	.+10     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 {
	uint8_t Tank_sensor = 0 ;
	Tank_sensor = Get_tank_level_state(1) | (Get_tank_level_state(2) << 1) | (Get_tank_level_state(3) << 2) ;
	if (Tank_sensor == 2 || Tank_sensor == 4 || Tank_sensor == 5 || Tank_sensor == 6  )
	{
		return LEVEL_ERROR ;
     41a:	85 e5       	ldi	r24, 0x55	; 85
     41c:	03 c0       	rjmp	.+6      	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
     41e:	85 e5       	ldi	r24, 0x55	; 85
     420:	01 c0       	rjmp	.+2      	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
	}
	if(Tank_sensor == 3) Tank_sensor =2;
     422:	82 e0       	ldi	r24, 0x02	; 2
	if(Tank_sensor == 7) Tank_sensor =3;
	return Tank_sensor ;
 }
     424:	df 91       	pop	r29
     426:	cf 91       	pop	r28
     428:	08 95       	ret

0000042a <Get_blancher_level>:
 
uint8_t Get_blancher_level(void)
{
	uint8_t Blancher_level =0;
	Blancher_level = Get_blancher_level_state();
     42a:	0c 94 05 0c 	jmp	0x180a	; 0x180a <Get_blancher_level_state>
	return Blancher_level ;
}
     42e:	08 95       	ret

00000430 <Modbus_mster_transaction>:
		g_mod1_write_address = u16WriteAddress;
		g_mod1_write_qty = u16BitQty;
		return Modbus_mster_transaction(device, OUR_WRITE_MULTIPLE_COILS);
	}
	return INVALID_DEVICE; //error
}
     430:	8f 92       	push	r8
     432:	9f 92       	push	r9
     434:	af 92       	push	r10
     436:	bf 92       	push	r11
     438:	df 92       	push	r13
     43a:	ef 92       	push	r14
     43c:	ff 92       	push	r15
     43e:	0f 93       	push	r16
     440:	1f 93       	push	r17
     442:	cf 93       	push	r28
     444:	df 93       	push	r29
     446:	cd b7       	in	r28, 0x3d	; 61
     448:	de b7       	in	r29, 0x3e	; 62
     44a:	da 95       	dec	r29
     44c:	0f b6       	in	r0, 0x3f	; 63
     44e:	f8 94       	cli
     450:	de bf       	out	0x3e, r29	; 62
     452:	0f be       	out	0x3f, r0	; 63
     454:	cd bf       	out	0x3d, r28	; 61
     456:	d6 2e       	mov	r13, r22
     458:	81 11       	cpse	r24, r1
     45a:	f5 c2       	rjmp	.+1514   	; 0xa46 <Modbus_mster_transaction+0x616>
     45c:	80 91 98 05 	lds	r24, 0x0598	; 0x800598 <g_mod0_slave>
     460:	89 83       	std	Y+1, r24	; 0x01
     462:	2f ef       	ldi	r18, 0xFF	; 255
     464:	62 13       	cpse	r22, r18
     466:	06 c0       	rjmp	.+12     	; 0x474 <Modbus_mster_transaction+0x44>
     468:	8f e0       	ldi	r24, 0x0F	; 15
     46a:	8a 83       	std	Y+2, r24	; 0x02
     46c:	68 94       	set
     46e:	bb 24       	eor	r11, r11
     470:	b1 f8       	bld	r11, 1
     472:	32 c0       	rjmp	.+100    	; 0x4d8 <Modbus_mster_transaction+0xa8>
     474:	6a 83       	std	Y+2, r22	; 0x02
     476:	81 e0       	ldi	r24, 0x01	; 1
     478:	68 17       	cp	r22, r24
     47a:	b8 f0       	brcs	.+46     	; 0x4aa <Modbus_mster_transaction+0x7a>
     47c:	94 e0       	ldi	r25, 0x04	; 4
     47e:	96 17       	cp	r25, r22
     480:	18 f4       	brcc	.+6      	; 0x488 <Modbus_mster_transaction+0x58>
     482:	a7 e1       	ldi	r26, 0x17	; 23
     484:	6a 13       	cpse	r22, r26
     486:	11 c0       	rjmp	.+34     	; 0x4aa <Modbus_mster_transaction+0x7a>
     488:	80 91 96 05 	lds	r24, 0x0596	; 0x800596 <g_mod0_read_address>
     48c:	90 91 97 05 	lds	r25, 0x0597	; 0x800597 <g_mod0_read_address+0x1>
     490:	9b 83       	std	Y+3, r25	; 0x03
     492:	8c 83       	std	Y+4, r24	; 0x04
     494:	80 91 94 05 	lds	r24, 0x0594	; 0x800594 <g_mod0_read_qty>
     498:	90 91 95 05 	lds	r25, 0x0595	; 0x800595 <g_mod0_read_qty+0x1>
     49c:	9d 83       	std	Y+5, r25	; 0x05
     49e:	8e 83       	std	Y+6, r24	; 0x06
     4a0:	0f 2e       	mov	r0, r31
     4a2:	f6 e0       	ldi	r31, 0x06	; 6
     4a4:	bf 2e       	mov	r11, r31
     4a6:	f0 2d       	mov	r31, r0
     4a8:	03 c0       	rjmp	.+6      	; 0x4b0 <Modbus_mster_transaction+0x80>
     4aa:	68 94       	set
     4ac:	bb 24       	eor	r11, r11
     4ae:	b1 f8       	bld	r11, 1
     4b0:	b0 e1       	ldi	r27, 0x10	; 16
     4b2:	bd 15       	cp	r27, r13
     4b4:	40 f0       	brcs	.+16     	; 0x4c6 <Modbus_mster_transaction+0x96>
     4b6:	ef e0       	ldi	r30, 0x0F	; 15
     4b8:	de 16       	cp	r13, r30
     4ba:	70 f4       	brcc	.+28     	; 0x4d8 <Modbus_mster_transaction+0xa8>
     4bc:	8b ef       	ldi	r24, 0xFB	; 251
     4be:	8d 0d       	add	r24, r13
     4c0:	82 30       	cpi	r24, 0x02	; 2
     4c2:	00 f5       	brcc	.+64     	; 0x504 <Modbus_mster_transaction+0xd4>
     4c4:	09 c0       	rjmp	.+18     	; 0x4d8 <Modbus_mster_transaction+0xa8>
     4c6:	f6 e1       	ldi	r31, 0x16	; 22
     4c8:	df 16       	cp	r13, r31
     4ca:	e0 f0       	brcs	.+56     	; 0x504 <Modbus_mster_transaction+0xd4>
     4cc:	27 e1       	ldi	r18, 0x17	; 23
     4ce:	2d 15       	cp	r18, r13
     4d0:	18 f4       	brcc	.+6      	; 0x4d8 <Modbus_mster_transaction+0xa8>
     4d2:	8f ef       	ldi	r24, 0xFF	; 255
     4d4:	d8 12       	cpse	r13, r24
     4d6:	16 c0       	rjmp	.+44     	; 0x504 <Modbus_mster_transaction+0xd4>
     4d8:	90 91 12 05 	lds	r25, 0x0512	; 0x800512 <g_mod0_write_address>
     4dc:	80 91 13 05 	lds	r24, 0x0513	; 0x800513 <g_mod0_write_address+0x1>
     4e0:	e1 e0       	ldi	r30, 0x01	; 1
     4e2:	f0 e0       	ldi	r31, 0x00	; 0
     4e4:	ec 0f       	add	r30, r28
     4e6:	fd 1f       	adc	r31, r29
     4e8:	eb 0d       	add	r30, r11
     4ea:	f1 1d       	adc	r31, r1
     4ec:	80 83       	st	Z, r24
     4ee:	81 e0       	ldi	r24, 0x01	; 1
     4f0:	8b 0d       	add	r24, r11
     4f2:	e1 e0       	ldi	r30, 0x01	; 1
     4f4:	f0 e0       	ldi	r31, 0x00	; 0
     4f6:	ec 0f       	add	r30, r28
     4f8:	fd 1f       	adc	r31, r29
     4fa:	e8 0f       	add	r30, r24
     4fc:	f1 1d       	adc	r31, r1
     4fe:	b3 94       	inc	r11
     500:	b3 94       	inc	r11
     502:	90 83       	st	Z, r25
     504:	90 e1       	ldi	r25, 0x10	; 16
     506:	d9 16       	cp	r13, r25
     508:	09 f4       	brne	.+2      	; 0x50c <Modbus_mster_transaction+0xdc>
     50a:	ad c0       	rjmp	.+346    	; 0x666 <Modbus_mster_transaction+0x236>
     50c:	9d 15       	cp	r25, r13
     50e:	58 f0       	brcs	.+22     	; 0x526 <Modbus_mster_transaction+0xf6>
     510:	a6 e0       	ldi	r26, 0x06	; 6
     512:	da 16       	cp	r13, r26
     514:	61 f1       	breq	.+88     	; 0x56e <Modbus_mster_transaction+0x13e>
     516:	bf e0       	ldi	r27, 0x0F	; 15
     518:	db 16       	cp	r13, r27
     51a:	09 f4       	brne	.+2      	; 0x51e <Modbus_mster_transaction+0xee>
     51c:	41 c0       	rjmp	.+130    	; 0x5a0 <Modbus_mster_transaction+0x170>
     51e:	e5 e0       	ldi	r30, 0x05	; 5
     520:	de 12       	cpse	r13, r30
     522:	1a c1       	rjmp	.+564    	; 0x758 <Modbus_mster_transaction+0x328>
     524:	0d c0       	rjmp	.+26     	; 0x540 <Modbus_mster_transaction+0x110>
     526:	f7 e1       	ldi	r31, 0x17	; 23
     528:	df 16       	cp	r13, r31
     52a:	09 f4       	brne	.+2      	; 0x52e <Modbus_mster_transaction+0xfe>
     52c:	9c c0       	rjmp	.+312    	; 0x666 <Modbus_mster_transaction+0x236>
     52e:	2f ef       	ldi	r18, 0xFF	; 255
     530:	d2 16       	cp	r13, r18
     532:	09 f4       	brne	.+2      	; 0x536 <Modbus_mster_transaction+0x106>
     534:	98 c0       	rjmp	.+304    	; 0x666 <Modbus_mster_transaction+0x236>
     536:	86 e1       	ldi	r24, 0x16	; 22
     538:	d8 16       	cp	r13, r24
     53a:	09 f4       	brne	.+2      	; 0x53e <Modbus_mster_transaction+0x10e>
     53c:	df c0       	rjmp	.+446    	; 0x6fc <Modbus_mster_transaction+0x2cc>
     53e:	0c c1       	rjmp	.+536    	; 0x758 <Modbus_mster_transaction+0x328>
     540:	90 91 10 05 	lds	r25, 0x0510	; 0x800510 <g_mod0_write_qty>
     544:	80 91 11 05 	lds	r24, 0x0511	; 0x800511 <g_mod0_write_qty+0x1>
     548:	e1 e0       	ldi	r30, 0x01	; 1
     54a:	f0 e0       	ldi	r31, 0x00	; 0
     54c:	ec 0f       	add	r30, r28
     54e:	fd 1f       	adc	r31, r29
     550:	eb 0d       	add	r30, r11
     552:	f1 1d       	adc	r31, r1
     554:	80 83       	st	Z, r24
     556:	81 e0       	ldi	r24, 0x01	; 1
     558:	8b 0d       	add	r24, r11
     55a:	e1 e0       	ldi	r30, 0x01	; 1
     55c:	f0 e0       	ldi	r31, 0x00	; 0
     55e:	ec 0f       	add	r30, r28
     560:	fd 1f       	adc	r31, r29
     562:	e8 0f       	add	r30, r24
     564:	f1 1d       	adc	r31, r1
     566:	b3 94       	inc	r11
     568:	b3 94       	inc	r11
     56a:	90 83       	st	Z, r25
     56c:	f5 c0       	rjmp	.+490    	; 0x758 <Modbus_mster_transaction+0x328>
     56e:	e0 e9       	ldi	r30, 0x90	; 144
     570:	f4 e0       	ldi	r31, 0x04	; 4
     572:	80 81       	ld	r24, Z
     574:	91 81       	ldd	r25, Z+1	; 0x01
     576:	a1 e0       	ldi	r26, 0x01	; 1
     578:	b0 e0       	ldi	r27, 0x00	; 0
     57a:	ac 0f       	add	r26, r28
     57c:	bd 1f       	adc	r27, r29
     57e:	ab 0d       	add	r26, r11
     580:	b1 1d       	adc	r27, r1
     582:	9c 93       	st	X, r25
     584:	20 81       	ld	r18, Z
     586:	31 81       	ldd	r19, Z+1	; 0x01
     588:	81 e0       	ldi	r24, 0x01	; 1
     58a:	8b 0d       	add	r24, r11
     58c:	e1 e0       	ldi	r30, 0x01	; 1
     58e:	f0 e0       	ldi	r31, 0x00	; 0
     590:	ec 0f       	add	r30, r28
     592:	fd 1f       	adc	r31, r29
     594:	e8 0f       	add	r30, r24
     596:	f1 1d       	adc	r31, r1
     598:	b3 94       	inc	r11
     59a:	b3 94       	inc	r11
     59c:	20 83       	st	Z, r18
     59e:	dc c0       	rjmp	.+440    	; 0x758 <Modbus_mster_transaction+0x328>
     5a0:	80 91 10 05 	lds	r24, 0x0510	; 0x800510 <g_mod0_write_qty>
     5a4:	90 91 11 05 	lds	r25, 0x0511	; 0x800511 <g_mod0_write_qty+0x1>
     5a8:	e1 e0       	ldi	r30, 0x01	; 1
     5aa:	f0 e0       	ldi	r31, 0x00	; 0
     5ac:	ec 0f       	add	r30, r28
     5ae:	fd 1f       	adc	r31, r29
     5b0:	eb 0d       	add	r30, r11
     5b2:	f1 1d       	adc	r31, r1
     5b4:	90 83       	st	Z, r25
     5b6:	32 e0       	ldi	r19, 0x02	; 2
     5b8:	3b 0d       	add	r19, r11
     5ba:	21 e0       	ldi	r18, 0x01	; 1
     5bc:	2b 0d       	add	r18, r11
     5be:	e1 e0       	ldi	r30, 0x01	; 1
     5c0:	f0 e0       	ldi	r31, 0x00	; 0
     5c2:	ec 0f       	add	r30, r28
     5c4:	fd 1f       	adc	r31, r29
     5c6:	e2 0f       	add	r30, r18
     5c8:	f1 1d       	adc	r31, r1
     5ca:	80 83       	st	Z, r24
     5cc:	ac 01       	movw	r20, r24
     5ce:	47 70       	andi	r20, 0x07	; 7
     5d0:	55 27       	eor	r21, r21
     5d2:	45 2b       	or	r20, r21
     5d4:	49 f0       	breq	.+18     	; 0x5e8 <Modbus_mster_transaction+0x1b8>
     5d6:	96 95       	lsr	r25
     5d8:	87 95       	ror	r24
     5da:	96 95       	lsr	r25
     5dc:	87 95       	ror	r24
     5de:	96 95       	lsr	r25
     5e0:	87 95       	ror	r24
     5e2:	21 e0       	ldi	r18, 0x01	; 1
     5e4:	28 0f       	add	r18, r24
     5e6:	07 c0       	rjmp	.+14     	; 0x5f6 <Modbus_mster_transaction+0x1c6>
     5e8:	96 95       	lsr	r25
     5ea:	87 95       	ror	r24
     5ec:	96 95       	lsr	r25
     5ee:	87 95       	ror	r24
     5f0:	96 95       	lsr	r25
     5f2:	87 95       	ror	r24
     5f4:	28 2f       	mov	r18, r24
     5f6:	93 e0       	ldi	r25, 0x03	; 3
     5f8:	b9 0e       	add	r11, r25
     5fa:	fe 01       	movw	r30, r28
     5fc:	e3 0f       	add	r30, r19
     5fe:	f1 1d       	adc	r31, r1
     600:	21 83       	std	Z+1, r18	; 0x01
     602:	22 23       	and	r18, r18
     604:	09 f4       	brne	.+2      	; 0x608 <Modbus_mster_transaction+0x1d8>
     606:	a8 c0       	rjmp	.+336    	; 0x758 <Modbus_mster_transaction+0x328>
     608:	80 e0       	ldi	r24, 0x00	; 0
     60a:	98 2f       	mov	r25, r24
     60c:	91 70       	andi	r25, 0x01	; 1
     60e:	80 ff       	sbrs	r24, 0
     610:	03 c0       	rjmp	.+6      	; 0x618 <Modbus_mster_transaction+0x1e8>
     612:	91 30       	cpi	r25, 0x01	; 1
     614:	99 f0       	breq	.+38     	; 0x63c <Modbus_mster_transaction+0x20c>
     616:	23 c0       	rjmp	.+70     	; 0x65e <Modbus_mster_transaction+0x22e>
     618:	e8 2f       	mov	r30, r24
     61a:	e6 95       	lsr	r30
     61c:	f0 e0       	ldi	r31, 0x00	; 0
     61e:	ee 0f       	add	r30, r30
     620:	ff 1f       	adc	r31, r31
     622:	e0 57       	subi	r30, 0x70	; 112
     624:	fb 4f       	sbci	r31, 0xFB	; 251
     626:	40 81       	ld	r20, Z
     628:	51 81       	ldd	r21, Z+1	; 0x01
     62a:	e1 e0       	ldi	r30, 0x01	; 1
     62c:	f0 e0       	ldi	r31, 0x00	; 0
     62e:	ec 0f       	add	r30, r28
     630:	fd 1f       	adc	r31, r29
     632:	eb 0d       	add	r30, r11
     634:	f1 1d       	adc	r31, r1
     636:	40 83       	st	Z, r20
     638:	b3 94       	inc	r11
     63a:	11 c0       	rjmp	.+34     	; 0x65e <Modbus_mster_transaction+0x22e>
     63c:	e8 2f       	mov	r30, r24
     63e:	e6 95       	lsr	r30
     640:	f0 e0       	ldi	r31, 0x00	; 0
     642:	ee 0f       	add	r30, r30
     644:	ff 1f       	adc	r31, r31
     646:	e0 57       	subi	r30, 0x70	; 112
     648:	fb 4f       	sbci	r31, 0xFB	; 251
     64a:	40 81       	ld	r20, Z
     64c:	51 81       	ldd	r21, Z+1	; 0x01
     64e:	e1 e0       	ldi	r30, 0x01	; 1
     650:	f0 e0       	ldi	r31, 0x00	; 0
     652:	ec 0f       	add	r30, r28
     654:	fd 1f       	adc	r31, r29
     656:	eb 0d       	add	r30, r11
     658:	f1 1d       	adc	r31, r1
     65a:	50 83       	st	Z, r21
     65c:	b3 94       	inc	r11
     65e:	8f 5f       	subi	r24, 0xFF	; 255
     660:	28 13       	cpse	r18, r24
     662:	d3 cf       	rjmp	.-90     	; 0x60a <Modbus_mster_transaction+0x1da>
     664:	79 c0       	rjmp	.+242    	; 0x758 <Modbus_mster_transaction+0x328>
     666:	60 91 10 05 	lds	r22, 0x0510	; 0x800510 <g_mod0_write_qty>
     66a:	70 91 11 05 	lds	r23, 0x0511	; 0x800511 <g_mod0_write_qty+0x1>
     66e:	e1 e0       	ldi	r30, 0x01	; 1
     670:	f0 e0       	ldi	r31, 0x00	; 0
     672:	ec 0f       	add	r30, r28
     674:	fd 1f       	adc	r31, r29
     676:	eb 0d       	add	r30, r11
     678:	f1 1d       	adc	r31, r1
     67a:	70 83       	st	Z, r23
     67c:	81 e0       	ldi	r24, 0x01	; 1
     67e:	8b 0d       	add	r24, r11
     680:	e1 e0       	ldi	r30, 0x01	; 1
     682:	f0 e0       	ldi	r31, 0x00	; 0
     684:	ec 0f       	add	r30, r28
     686:	fd 1f       	adc	r31, r29
     688:	e8 0f       	add	r30, r24
     68a:	f1 1d       	adc	r31, r1
     68c:	60 83       	st	Z, r22
     68e:	82 e0       	ldi	r24, 0x02	; 2
     690:	8b 0d       	add	r24, r11
     692:	e1 e0       	ldi	r30, 0x01	; 1
     694:	f0 e0       	ldi	r31, 0x00	; 0
     696:	ec 0f       	add	r30, r28
     698:	fd 1f       	adc	r31, r29
     69a:	e8 0f       	add	r30, r24
     69c:	f1 1d       	adc	r31, r1
     69e:	a3 e0       	ldi	r26, 0x03	; 3
     6a0:	ba 0e       	add	r11, r26
     6a2:	86 2f       	mov	r24, r22
     6a4:	88 0f       	add	r24, r24
     6a6:	80 83       	st	Z, r24
     6a8:	77 27       	eor	r23, r23
     6aa:	16 16       	cp	r1, r22
     6ac:	17 06       	cpc	r1, r23
     6ae:	0c f0       	brlt	.+2      	; 0x6b2 <Modbus_mster_transaction+0x282>
     6b0:	53 c0       	rjmp	.+166    	; 0x758 <Modbus_mster_transaction+0x328>
     6b2:	80 e0       	ldi	r24, 0x00	; 0
     6b4:	90 e0       	ldi	r25, 0x00	; 0
     6b6:	20 e0       	ldi	r18, 0x00	; 0
     6b8:	88 0f       	add	r24, r24
     6ba:	99 1f       	adc	r25, r25
     6bc:	fc 01       	movw	r30, r24
     6be:	e0 57       	subi	r30, 0x70	; 112
     6c0:	fb 4f       	sbci	r31, 0xFB	; 251
     6c2:	80 81       	ld	r24, Z
     6c4:	91 81       	ldd	r25, Z+1	; 0x01
     6c6:	a1 e0       	ldi	r26, 0x01	; 1
     6c8:	b0 e0       	ldi	r27, 0x00	; 0
     6ca:	ac 0f       	add	r26, r28
     6cc:	bd 1f       	adc	r27, r29
     6ce:	ab 0d       	add	r26, r11
     6d0:	b1 1d       	adc	r27, r1
     6d2:	9c 93       	st	X, r25
     6d4:	40 81       	ld	r20, Z
     6d6:	51 81       	ldd	r21, Z+1	; 0x01
     6d8:	81 e0       	ldi	r24, 0x01	; 1
     6da:	8b 0d       	add	r24, r11
     6dc:	e1 e0       	ldi	r30, 0x01	; 1
     6de:	f0 e0       	ldi	r31, 0x00	; 0
     6e0:	ec 0f       	add	r30, r28
     6e2:	fd 1f       	adc	r31, r29
     6e4:	e8 0f       	add	r30, r24
     6e6:	f1 1d       	adc	r31, r1
     6e8:	b3 94       	inc	r11
     6ea:	b3 94       	inc	r11
     6ec:	40 83       	st	Z, r20
     6ee:	2f 5f       	subi	r18, 0xFF	; 255
     6f0:	82 2f       	mov	r24, r18
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	86 17       	cp	r24, r22
     6f6:	97 07       	cpc	r25, r23
     6f8:	fc f2       	brlt	.-66     	; 0x6b8 <Modbus_mster_transaction+0x288>
     6fa:	2e c0       	rjmp	.+92     	; 0x758 <Modbus_mster_transaction+0x328>
     6fc:	e0 e9       	ldi	r30, 0x90	; 144
     6fe:	f4 e0       	ldi	r31, 0x04	; 4
     700:	80 81       	ld	r24, Z
     702:	91 81       	ldd	r25, Z+1	; 0x01
     704:	a1 e0       	ldi	r26, 0x01	; 1
     706:	b0 e0       	ldi	r27, 0x00	; 0
     708:	ac 0f       	add	r26, r28
     70a:	bd 1f       	adc	r27, r29
     70c:	ab 0d       	add	r26, r11
     70e:	b1 1d       	adc	r27, r1
     710:	9c 93       	st	X, r25
     712:	80 81       	ld	r24, Z
     714:	91 81       	ldd	r25, Z+1	; 0x01
     716:	91 e0       	ldi	r25, 0x01	; 1
     718:	9b 0d       	add	r25, r11
     71a:	a1 e0       	ldi	r26, 0x01	; 1
     71c:	b0 e0       	ldi	r27, 0x00	; 0
     71e:	ac 0f       	add	r26, r28
     720:	bd 1f       	adc	r27, r29
     722:	a9 0f       	add	r26, r25
     724:	b1 1d       	adc	r27, r1
     726:	8c 93       	st	X, r24
     728:	82 81       	ldd	r24, Z+2	; 0x02
     72a:	93 81       	ldd	r25, Z+3	; 0x03
     72c:	82 e0       	ldi	r24, 0x02	; 2
     72e:	8b 0d       	add	r24, r11
     730:	a1 e0       	ldi	r26, 0x01	; 1
     732:	b0 e0       	ldi	r27, 0x00	; 0
     734:	ac 0f       	add	r26, r28
     736:	bd 1f       	adc	r27, r29
     738:	a8 0f       	add	r26, r24
     73a:	b1 1d       	adc	r27, r1
     73c:	9c 93       	st	X, r25
     73e:	22 81       	ldd	r18, Z+2	; 0x02
     740:	33 81       	ldd	r19, Z+3	; 0x03
     742:	83 e0       	ldi	r24, 0x03	; 3
     744:	8b 0d       	add	r24, r11
     746:	e1 e0       	ldi	r30, 0x01	; 1
     748:	f0 e0       	ldi	r31, 0x00	; 0
     74a:	ec 0f       	add	r30, r28
     74c:	fd 1f       	adc	r31, r29
     74e:	e8 0f       	add	r30, r24
     750:	f1 1d       	adc	r31, r1
     752:	b4 e0       	ldi	r27, 0x04	; 4
     754:	bb 0e       	add	r11, r27
     756:	20 83       	st	Z, r18
     758:	bb 20       	and	r11, r11
     75a:	b9 f0       	breq	.+46     	; 0x78a <Modbus_mster_transaction+0x35a>
     75c:	8e 01       	movw	r16, r28
     75e:	0f 5f       	subi	r16, 0xFF	; 255
     760:	1f 4f       	sbci	r17, 0xFF	; 255
     762:	ee 24       	eor	r14, r14
     764:	ea 94       	dec	r14
     766:	eb 0c       	add	r14, r11
     768:	f1 2c       	mov	r15, r1
     76a:	ef ef       	ldi	r30, 0xFF	; 255
     76c:	ee 1a       	sub	r14, r30
     76e:	fe 0a       	sbc	r15, r30
     770:	e0 0e       	add	r14, r16
     772:	f1 1e       	adc	r15, r17
     774:	8f ef       	ldi	r24, 0xFF	; 255
     776:	9f ef       	ldi	r25, 0xFF	; 255
     778:	d8 01       	movw	r26, r16
     77a:	6d 91       	ld	r22, X+
     77c:	8d 01       	movw	r16, r26
     77e:	0e 94 1d 23 	call	0x463a	; 0x463a <crc16_update>
     782:	0e 15       	cp	r16, r14
     784:	1f 05       	cpc	r17, r15
     786:	c1 f7       	brne	.-16     	; 0x778 <Modbus_mster_transaction+0x348>
     788:	02 c0       	rjmp	.+4      	; 0x78e <Modbus_mster_transaction+0x35e>
     78a:	8f ef       	ldi	r24, 0xFF	; 255
     78c:	9f ef       	ldi	r25, 0xFF	; 255
     78e:	ee 24       	eor	r14, r14
     790:	e3 94       	inc	r14
     792:	eb 0c       	add	r14, r11
     794:	e1 e0       	ldi	r30, 0x01	; 1
     796:	f0 e0       	ldi	r31, 0x00	; 0
     798:	ec 0f       	add	r30, r28
     79a:	fd 1f       	adc	r31, r29
     79c:	eb 0d       	add	r30, r11
     79e:	f1 1d       	adc	r31, r1
     7a0:	80 83       	st	Z, r24
     7a2:	b3 94       	inc	r11
     7a4:	b3 94       	inc	r11
     7a6:	e1 e0       	ldi	r30, 0x01	; 1
     7a8:	f0 e0       	ldi	r31, 0x00	; 0
     7aa:	ec 0f       	add	r30, r28
     7ac:	fd 1f       	adc	r31, r29
     7ae:	ee 0d       	add	r30, r14
     7b0:	f1 1d       	adc	r31, r1
     7b2:	90 83       	st	Z, r25
     7b4:	e1 e0       	ldi	r30, 0x01	; 1
     7b6:	f0 e0       	ldi	r31, 0x00	; 0
     7b8:	ec 0f       	add	r30, r28
     7ba:	fd 1f       	adc	r31, r29
     7bc:	eb 0d       	add	r30, r11
     7be:	f1 1d       	adc	r31, r1
     7c0:	10 82       	st	Z, r1
     7c2:	e0 91 83 04 	lds	r30, 0x0483	; 0x800483 <g_mod0_Serial_getc>
     7c6:	f0 91 84 04 	lds	r31, 0x0484	; 0x800484 <g_mod0_Serial_getc+0x1>
     7ca:	19 95       	eicall
     7cc:	81 15       	cp	r24, r1
     7ce:	91 40       	sbci	r25, 0x01	; 1
     7d0:	c1 f7       	brne	.-16     	; 0x7c2 <Modbus_mster_transaction+0x392>
     7d2:	e0 91 89 04 	lds	r30, 0x0489	; 0x800489 <g_mod0_pre_transmission>
     7d6:	f0 91 8a 04 	lds	r31, 0x048A	; 0x80048a <g_mod0_pre_transmission+0x1>
     7da:	30 97       	sbiw	r30, 0x00	; 0
     7dc:	09 f0       	breq	.+2      	; 0x7e0 <Modbus_mster_transaction+0x3b0>
     7de:	19 95       	eicall
     7e0:	bb 20       	and	r11, r11
     7e2:	a1 f0       	breq	.+40     	; 0x80c <Modbus_mster_transaction+0x3dc>
     7e4:	8e 01       	movw	r16, r28
     7e6:	0f 5f       	subi	r16, 0xFF	; 255
     7e8:	1f 4f       	sbci	r17, 0xFF	; 255
     7ea:	f1 2c       	mov	r15, r1
     7ec:	ef ef       	ldi	r30, 0xFF	; 255
     7ee:	ee 1a       	sub	r14, r30
     7f0:	fe 0a       	sbc	r15, r30
     7f2:	e0 0e       	add	r14, r16
     7f4:	f1 1e       	adc	r15, r17
     7f6:	e0 91 85 04 	lds	r30, 0x0485	; 0x800485 <g_mod0_Serial_putc>
     7fa:	f0 91 86 04 	lds	r31, 0x0486	; 0x800486 <g_mod0_Serial_putc+0x1>
     7fe:	d8 01       	movw	r26, r16
     800:	8d 91       	ld	r24, X+
     802:	8d 01       	movw	r16, r26
     804:	19 95       	eicall
     806:	0e 15       	cp	r16, r14
     808:	1f 05       	cpc	r17, r15
     80a:	a9 f7       	brne	.-22     	; 0x7f6 <Modbus_mster_transaction+0x3c6>
     80c:	e0 91 81 04 	lds	r30, 0x0481	; 0x800481 <g_mod0_Serial_flush>
     810:	f0 91 82 04 	lds	r31, 0x0482	; 0x800482 <g_mod0_Serial_flush+0x1>
     814:	19 95       	eicall
     816:	ef e8       	ldi	r30, 0x8F	; 143
     818:	f1 e0       	ldi	r31, 0x01	; 1
     81a:	31 97       	sbiw	r30, 0x01	; 1
     81c:	f1 f7       	brne	.-4      	; 0x81a <Modbus_mster_transaction+0x3ea>
     81e:	00 c0       	rjmp	.+0      	; 0x820 <Modbus_mster_transaction+0x3f0>
     820:	00 00       	nop
     822:	e0 91 87 04 	lds	r30, 0x0487	; 0x800487 <g_mod0_post_transmission>
     826:	f0 91 88 04 	lds	r31, 0x0488	; 0x800488 <g_mod0_post_transmission+0x1>
     82a:	30 97       	sbiw	r30, 0x00	; 0
     82c:	09 f0       	breq	.+2      	; 0x830 <Modbus_mster_transaction+0x400>
     82e:	19 95       	eicall
     830:	0e 94 3e 23 	call	0x467c	; 0x467c <Get_millis>
     834:	4b 01       	movw	r8, r22
     836:	5c 01       	movw	r10, r24
     838:	08 e0       	ldi	r16, 0x08	; 8
     83a:	10 e0       	ldi	r17, 0x00	; 0
     83c:	ed 2c       	mov	r14, r13
     83e:	f1 2c       	mov	r15, r1
     840:	e0 91 7f 04 	lds	r30, 0x047F	; 0x80047f <g_mod0_Serial_available>
     844:	f0 91 80 04 	lds	r31, 0x0480	; 0x800480 <g_mod0_Serial_available+0x1>
     848:	19 95       	eicall
     84a:	89 2b       	or	r24, r25
     84c:	91 f0       	breq	.+36     	; 0x872 <Modbus_mster_transaction+0x442>
     84e:	dd 24       	eor	r13, r13
     850:	d3 94       	inc	r13
     852:	d1 0e       	add	r13, r17
     854:	e0 91 83 04 	lds	r30, 0x0483	; 0x800483 <g_mod0_Serial_getc>
     858:	f0 91 84 04 	lds	r31, 0x0484	; 0x800484 <g_mod0_Serial_getc+0x1>
     85c:	19 95       	eicall
     85e:	e1 e0       	ldi	r30, 0x01	; 1
     860:	f0 e0       	ldi	r31, 0x00	; 0
     862:	ec 0f       	add	r30, r28
     864:	fd 1f       	adc	r31, r29
     866:	e1 0f       	add	r30, r17
     868:	f1 1d       	adc	r31, r1
     86a:	80 83       	st	Z, r24
     86c:	01 50       	subi	r16, 0x01	; 1
     86e:	1d 2d       	mov	r17, r13
     870:	07 c0       	rjmp	.+14     	; 0x880 <Modbus_mster_transaction+0x450>
     872:	e0 91 8b 04 	lds	r30, 0x048B	; 0x80048b <g_mod0_idle>
     876:	f0 91 8c 04 	lds	r31, 0x048C	; 0x80048c <g_mod0_idle+0x1>
     87a:	30 97       	sbiw	r30, 0x00	; 0
     87c:	09 f0       	breq	.+2      	; 0x880 <Modbus_mster_transaction+0x450>
     87e:	19 95       	eicall
     880:	15 30       	cpi	r17, 0x05	; 5
     882:	51 f5       	brne	.+84     	; 0x8d8 <Modbus_mster_transaction+0x4a8>
     884:	99 81       	ldd	r25, Y+1	; 0x01
     886:	80 91 98 05 	lds	r24, 0x0598	; 0x800598 <g_mod0_slave>
     88a:	98 13       	cpse	r25, r24
     88c:	40 c4       	rjmp	.+2176   	; 0x110e <Modbus_mster_transaction+0xcde>
     88e:	8a 81       	ldd	r24, Y+2	; 0x02
     890:	28 2f       	mov	r18, r24
     892:	2f 77       	andi	r18, 0x7F	; 127
     894:	30 e0       	ldi	r19, 0x00	; 0
     896:	2e 15       	cp	r18, r14
     898:	3f 05       	cpc	r19, r15
     89a:	09 f0       	breq	.+2      	; 0x89e <Modbus_mster_transaction+0x46e>
     89c:	3a c4       	rjmp	.+2164   	; 0x1112 <Modbus_mster_transaction+0xce2>
     89e:	88 23       	and	r24, r24
     8a0:	24 f4       	brge	.+8      	; 0x8aa <Modbus_mster_transaction+0x47a>
     8a2:	8b 81       	ldd	r24, Y+3	; 0x03
     8a4:	88 23       	and	r24, r24
     8a6:	e1 f1       	breq	.+120    	; 0x920 <Modbus_mster_transaction+0x4f0>
     8a8:	c9 c0       	rjmp	.+402    	; 0xa3c <Modbus_mster_transaction+0x60c>
     8aa:	81 31       	cpi	r24, 0x11	; 17
     8ac:	58 f4       	brcc	.+22     	; 0x8c4 <Modbus_mster_transaction+0x494>
     8ae:	8f 30       	cpi	r24, 0x0F	; 15
     8b0:	08 f0       	brcs	.+2      	; 0x8b4 <Modbus_mster_transaction+0x484>
     8b2:	bf c3       	rjmp	.+1918   	; 0x1032 <Modbus_mster_transaction+0xc02>
     8b4:	81 30       	cpi	r24, 0x01	; 1
     8b6:	80 f0       	brcs	.+32     	; 0x8d8 <Modbus_mster_transaction+0x4a8>
     8b8:	85 30       	cpi	r24, 0x05	; 5
     8ba:	68 f0       	brcs	.+26     	; 0x8d6 <Modbus_mster_transaction+0x4a6>
     8bc:	87 30       	cpi	r24, 0x07	; 7
     8be:	08 f4       	brcc	.+2      	; 0x8c2 <Modbus_mster_transaction+0x492>
     8c0:	b8 c3       	rjmp	.+1904   	; 0x1032 <Modbus_mster_transaction+0xc02>
     8c2:	0a c0       	rjmp	.+20     	; 0x8d8 <Modbus_mster_transaction+0x4a8>
     8c4:	87 31       	cpi	r24, 0x17	; 23
     8c6:	39 f0       	breq	.+14     	; 0x8d6 <Modbus_mster_transaction+0x4a6>
     8c8:	8f 3f       	cpi	r24, 0xFF	; 255
     8ca:	09 f4       	brne	.+2      	; 0x8ce <Modbus_mster_transaction+0x49e>
     8cc:	b2 c3       	rjmp	.+1892   	; 0x1032 <Modbus_mster_transaction+0xc02>
     8ce:	86 31       	cpi	r24, 0x16	; 22
     8d0:	19 f4       	brne	.+6      	; 0x8d8 <Modbus_mster_transaction+0x4a8>
     8d2:	05 e0       	ldi	r16, 0x05	; 5
     8d4:	af c3       	rjmp	.+1886   	; 0x1034 <Modbus_mster_transaction+0xc04>
     8d6:	0b 81       	ldd	r16, Y+3	; 0x03
     8d8:	0e 94 3e 23 	call	0x467c	; 0x467c <Get_millis>
     8dc:	dc 01       	movw	r26, r24
     8de:	cb 01       	movw	r24, r22
     8e0:	88 19       	sub	r24, r8
     8e2:	99 09       	sbc	r25, r9
     8e4:	aa 09       	sbc	r26, r10
     8e6:	bb 09       	sbc	r27, r11
     8e8:	89 3c       	cpi	r24, 0xC9	; 201
     8ea:	91 05       	cpc	r25, r1
     8ec:	a1 05       	cpc	r26, r1
     8ee:	b1 05       	cpc	r27, r1
     8f0:	08 f4       	brcc	.+2      	; 0x8f4 <Modbus_mster_transaction+0x4c4>
     8f2:	05 c4       	rjmp	.+2058   	; 0x10fe <Modbus_mster_transaction+0xcce>
     8f4:	80 e0       	ldi	r24, 0x00	; 0
     8f6:	92 e0       	ldi	r25, 0x02	; 2
     8f8:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <UART0_puts>
     8fc:	01 11       	cpse	r16, r1
     8fe:	0b c4       	rjmp	.+2070   	; 0x1116 <Modbus_mster_transaction+0xce6>
     900:	82 ee       	ldi	r24, 0xE2	; 226
     902:	81 11       	cpse	r24, r1
     904:	9b c0       	rjmp	.+310    	; 0xa3c <Modbus_mster_transaction+0x60c>
     906:	15 30       	cpi	r17, 0x05	; 5
     908:	08 f4       	brcc	.+2      	; 0x90c <Modbus_mster_transaction+0x4dc>
     90a:	b4 c3       	rjmp	.+1896   	; 0x1074 <Modbus_mster_transaction+0xc44>
     90c:	a1 2e       	mov	r10, r17
     90e:	b1 2c       	mov	r11, r1
     910:	75 01       	movw	r14, r10
     912:	f2 e0       	ldi	r31, 0x02	; 2
     914:	ef 1a       	sub	r14, r31
     916:	f1 08       	sbc	r15, r1
     918:	1e 14       	cp	r1, r14
     91a:	1f 04       	cpc	r1, r15
     91c:	5c f0       	brlt	.+22     	; 0x934 <Modbus_mster_transaction+0x504>
     91e:	99 c3       	rjmp	.+1842   	; 0x1052 <Modbus_mster_transaction+0xc22>
     920:	0f 2e       	mov	r0, r31
     922:	f3 e0       	ldi	r31, 0x03	; 3
     924:	ef 2e       	mov	r14, r31
     926:	f1 2c       	mov	r15, r1
     928:	f0 2d       	mov	r31, r0
     92a:	0f 2e       	mov	r0, r31
     92c:	f5 e0       	ldi	r31, 0x05	; 5
     92e:	af 2e       	mov	r10, r31
     930:	b1 2c       	mov	r11, r1
     932:	f0 2d       	mov	r31, r0
     934:	20 e0       	ldi	r18, 0x00	; 0
     936:	30 e0       	ldi	r19, 0x00	; 0
     938:	8f ef       	ldi	r24, 0xFF	; 255
     93a:	9f ef       	ldi	r25, 0xFF	; 255
     93c:	10 e0       	ldi	r17, 0x00	; 0
     93e:	e1 e0       	ldi	r30, 0x01	; 1
     940:	f0 e0       	ldi	r31, 0x00	; 0
     942:	ec 0f       	add	r30, r28
     944:	fd 1f       	adc	r31, r29
     946:	e2 0f       	add	r30, r18
     948:	f3 1f       	adc	r31, r19
     94a:	60 81       	ld	r22, Z
     94c:	0e 94 1d 23 	call	0x463a	; 0x463a <crc16_update>
     950:	1f 5f       	subi	r17, 0xFF	; 255
     952:	21 2f       	mov	r18, r17
     954:	30 e0       	ldi	r19, 0x00	; 0
     956:	2e 15       	cp	r18, r14
     958:	3f 05       	cpc	r19, r15
     95a:	8c f3       	brlt	.-30     	; 0x93e <Modbus_mster_transaction+0x50e>
     95c:	7c c3       	rjmp	.+1784   	; 0x1056 <Modbus_mster_transaction+0xc26>
     95e:	89 2f       	mov	r24, r25
     960:	99 27       	eor	r25, r25
     962:	fe 01       	movw	r30, r28
     964:	ea 0d       	add	r30, r10
     966:	fb 1d       	adc	r31, r11
     968:	20 81       	ld	r18, Z
     96a:	30 e0       	ldi	r19, 0x00	; 0
     96c:	82 17       	cp	r24, r18
     96e:	93 07       	cpc	r25, r19
     970:	09 f0       	breq	.+2      	; 0x974 <Modbus_mster_transaction+0x544>
     972:	7e c3       	rjmp	.+1788   	; 0x1070 <Modbus_mster_transaction+0xc40>
     974:	7f c3       	rjmp	.+1790   	; 0x1074 <Modbus_mster_transaction+0xc44>
     976:	9b 81       	ldd	r25, Y+3	; 0x03
     978:	96 95       	lsr	r25
     97a:	e9 f5       	brne	.+122    	; 0x9f6 <Modbus_mster_transaction+0x5c6>
     97c:	80 e0       	ldi	r24, 0x00	; 0
     97e:	5e c0       	rjmp	.+188    	; 0xa3c <Modbus_mster_transaction+0x60c>
     980:	7b 81       	ldd	r23, Y+3	; 0x03
     982:	97 2f       	mov	r25, r23
     984:	96 95       	lsr	r25
     986:	09 f4       	brne	.+2      	; 0x98a <Modbus_mster_transaction+0x55a>
     988:	83 c3       	rjmp	.+1798   	; 0x1090 <Modbus_mster_transaction+0xc60>
     98a:	fe 01       	movw	r30, r28
     98c:	31 96       	adiw	r30, 0x01	; 1
     98e:	40 e0       	ldi	r20, 0x00	; 0
     990:	50 e0       	ldi	r21, 0x00	; 0
     992:	80 e0       	ldi	r24, 0x00	; 0
     994:	80 34       	cpi	r24, 0x40	; 64
     996:	70 f4       	brcc	.+28     	; 0x9b4 <Modbus_mster_transaction+0x584>
     998:	24 81       	ldd	r18, Z+4	; 0x04
     99a:	30 e0       	ldi	r19, 0x00	; 0
     99c:	32 2f       	mov	r19, r18
     99e:	22 27       	eor	r18, r18
     9a0:	63 81       	ldd	r22, Z+3	; 0x03
     9a2:	26 2b       	or	r18, r22
     9a4:	da 01       	movw	r26, r20
     9a6:	aa 0f       	add	r26, r26
     9a8:	bb 1f       	adc	r27, r27
     9aa:	ac 5e       	subi	r26, 0xEC	; 236
     9ac:	ba 4f       	sbci	r27, 0xFA	; 250
     9ae:	11 96       	adiw	r26, 0x01	; 1
     9b0:	3c 93       	st	X, r19
     9b2:	2e 93       	st	-X, r18
     9b4:	8f 5f       	subi	r24, 0xFF	; 255
     9b6:	4f 5f       	subi	r20, 0xFF	; 255
     9b8:	5f 4f       	sbci	r21, 0xFF	; 255
     9ba:	32 96       	adiw	r30, 0x02	; 2
     9bc:	89 13       	cpse	r24, r25
     9be:	ea cf       	rjmp	.-44     	; 0x994 <Modbus_mster_transaction+0x564>
     9c0:	8f ef       	ldi	r24, 0xFF	; 255
     9c2:	89 0f       	add	r24, r25
     9c4:	80 93 8d 04 	sts	0x048D, r24	; 0x80048d <g_mod0_response_buffer_length>
     9c8:	70 ff       	sbrs	r23, 0
     9ca:	35 c0       	rjmp	.+106    	; 0xa36 <Modbus_mster_transaction+0x606>
     9cc:	90 34       	cpi	r25, 0x40	; 64
     9ce:	70 f4       	brcc	.+28     	; 0x9ec <Modbus_mster_transaction+0x5bc>
     9d0:	29 2f       	mov	r18, r25
     9d2:	30 e0       	ldi	r19, 0x00	; 0
     9d4:	22 0f       	add	r18, r18
     9d6:	33 1f       	adc	r19, r19
     9d8:	fe 01       	movw	r30, r28
     9da:	e2 0f       	add	r30, r18
     9dc:	f3 1f       	adc	r31, r19
     9de:	44 81       	ldd	r20, Z+4	; 0x04
     9e0:	50 e0       	ldi	r21, 0x00	; 0
     9e2:	f9 01       	movw	r30, r18
     9e4:	ec 5e       	subi	r30, 0xEC	; 236
     9e6:	fa 4f       	sbci	r31, 0xFA	; 250
     9e8:	51 83       	std	Z+1, r21	; 0x01
     9ea:	40 83       	st	Z, r20
     9ec:	9f 5f       	subi	r25, 0xFF	; 255
     9ee:	90 93 8d 04 	sts	0x048D, r25	; 0x80048d <g_mod0_response_buffer_length>
     9f2:	80 e0       	ldi	r24, 0x00	; 0
     9f4:	23 c0       	rjmp	.+70     	; 0xa3c <Modbus_mster_transaction+0x60c>
     9f6:	fe 01       	movw	r30, r28
     9f8:	31 96       	adiw	r30, 0x01	; 1
     9fa:	40 e0       	ldi	r20, 0x00	; 0
     9fc:	50 e0       	ldi	r21, 0x00	; 0
     9fe:	80 e0       	ldi	r24, 0x00	; 0
     a00:	80 34       	cpi	r24, 0x40	; 64
     a02:	70 f4       	brcc	.+28     	; 0xa20 <Modbus_mster_transaction+0x5f0>
     a04:	23 81       	ldd	r18, Z+3	; 0x03
     a06:	30 e0       	ldi	r19, 0x00	; 0
     a08:	32 2f       	mov	r19, r18
     a0a:	22 27       	eor	r18, r18
     a0c:	64 81       	ldd	r22, Z+4	; 0x04
     a0e:	26 2b       	or	r18, r22
     a10:	da 01       	movw	r26, r20
     a12:	aa 0f       	add	r26, r26
     a14:	bb 1f       	adc	r27, r27
     a16:	ac 5e       	subi	r26, 0xEC	; 236
     a18:	ba 4f       	sbci	r27, 0xFA	; 250
     a1a:	11 96       	adiw	r26, 0x01	; 1
     a1c:	3c 93       	st	X, r19
     a1e:	2e 93       	st	-X, r18
     a20:	8f 5f       	subi	r24, 0xFF	; 255
     a22:	4f 5f       	subi	r20, 0xFF	; 255
     a24:	5f 4f       	sbci	r21, 0xFF	; 255
     a26:	32 96       	adiw	r30, 0x02	; 2
     a28:	89 13       	cpse	r24, r25
     a2a:	ea cf       	rjmp	.-44     	; 0xa00 <Modbus_mster_transaction+0x5d0>
     a2c:	91 50       	subi	r25, 0x01	; 1
     a2e:	90 93 8d 04 	sts	0x048D, r25	; 0x80048d <g_mod0_response_buffer_length>
     a32:	80 e0       	ldi	r24, 0x00	; 0
     a34:	03 c0       	rjmp	.+6      	; 0xa3c <Modbus_mster_transaction+0x60c>
     a36:	80 e0       	ldi	r24, 0x00	; 0
     a38:	01 c0       	rjmp	.+2      	; 0xa3c <Modbus_mster_transaction+0x60c>
     a3a:	80 e0       	ldi	r24, 0x00	; 0
     a3c:	10 92 8f 04 	sts	0x048F, r1	; 0x80048f <g_mod0_transmit_buffer_index>
     a40:	10 92 8e 04 	sts	0x048E, r1	; 0x80048e <g_mod0_response_buffer_index>
     a44:	70 c3       	rjmp	.+1760   	; 0x1126 <Modbus_mster_transaction+0xcf6>
     a46:	81 30       	cpi	r24, 0x01	; 1
     a48:	09 f0       	breq	.+2      	; 0xa4c <Modbus_mster_transaction+0x61c>
     a4a:	f1 c2       	rjmp	.+1506   	; 0x102e <Modbus_mster_transaction+0xbfe>
     a4c:	80 91 7e 04 	lds	r24, 0x047E	; 0x80047e <g_mod1_slave>
     a50:	89 83       	std	Y+1, r24	; 0x01
     a52:	2f ef       	ldi	r18, 0xFF	; 255
     a54:	62 13       	cpse	r22, r18
     a56:	06 c0       	rjmp	.+12     	; 0xa64 <Modbus_mster_transaction+0x634>
     a58:	8f e0       	ldi	r24, 0x0F	; 15
     a5a:	8a 83       	std	Y+2, r24	; 0x02
     a5c:	68 94       	set
     a5e:	bb 24       	eor	r11, r11
     a60:	b1 f8       	bld	r11, 1
     a62:	32 c0       	rjmp	.+100    	; 0xac8 <Modbus_mster_transaction+0x698>
     a64:	6a 83       	std	Y+2, r22	; 0x02
     a66:	81 e0       	ldi	r24, 0x01	; 1
     a68:	68 17       	cp	r22, r24
     a6a:	b8 f0       	brcs	.+46     	; 0xa9a <Modbus_mster_transaction+0x66a>
     a6c:	94 e0       	ldi	r25, 0x04	; 4
     a6e:	96 17       	cp	r25, r22
     a70:	18 f4       	brcc	.+6      	; 0xa78 <Modbus_mster_transaction+0x648>
     a72:	a7 e1       	ldi	r26, 0x17	; 23
     a74:	6a 13       	cpse	r22, r26
     a76:	11 c0       	rjmp	.+34     	; 0xa9a <Modbus_mster_transaction+0x66a>
     a78:	80 91 7c 04 	lds	r24, 0x047C	; 0x80047c <g_mod1_read_address>
     a7c:	90 91 7d 04 	lds	r25, 0x047D	; 0x80047d <g_mod1_read_address+0x1>
     a80:	9b 83       	std	Y+3, r25	; 0x03
     a82:	8c 83       	std	Y+4, r24	; 0x04
     a84:	80 91 7a 04 	lds	r24, 0x047A	; 0x80047a <g_mod1_read_qty>
     a88:	90 91 7b 04 	lds	r25, 0x047B	; 0x80047b <g_mod1_read_qty+0x1>
     a8c:	9d 83       	std	Y+5, r25	; 0x05
     a8e:	8e 83       	std	Y+6, r24	; 0x06
     a90:	0f 2e       	mov	r0, r31
     a92:	f6 e0       	ldi	r31, 0x06	; 6
     a94:	bf 2e       	mov	r11, r31
     a96:	f0 2d       	mov	r31, r0
     a98:	03 c0       	rjmp	.+6      	; 0xaa0 <Modbus_mster_transaction+0x670>
     a9a:	68 94       	set
     a9c:	bb 24       	eor	r11, r11
     a9e:	b1 f8       	bld	r11, 1
     aa0:	b0 e1       	ldi	r27, 0x10	; 16
     aa2:	bd 15       	cp	r27, r13
     aa4:	40 f0       	brcs	.+16     	; 0xab6 <Modbus_mster_transaction+0x686>
     aa6:	ef e0       	ldi	r30, 0x0F	; 15
     aa8:	de 16       	cp	r13, r30
     aaa:	70 f4       	brcc	.+28     	; 0xac8 <Modbus_mster_transaction+0x698>
     aac:	8b ef       	ldi	r24, 0xFB	; 251
     aae:	8d 0d       	add	r24, r13
     ab0:	82 30       	cpi	r24, 0x02	; 2
     ab2:	00 f5       	brcc	.+64     	; 0xaf4 <Modbus_mster_transaction+0x6c4>
     ab4:	09 c0       	rjmp	.+18     	; 0xac8 <Modbus_mster_transaction+0x698>
     ab6:	f6 e1       	ldi	r31, 0x16	; 22
     ab8:	df 16       	cp	r13, r31
     aba:	e0 f0       	brcs	.+56     	; 0xaf4 <Modbus_mster_transaction+0x6c4>
     abc:	27 e1       	ldi	r18, 0x17	; 23
     abe:	2d 15       	cp	r18, r13
     ac0:	18 f4       	brcc	.+6      	; 0xac8 <Modbus_mster_transaction+0x698>
     ac2:	8f ef       	ldi	r24, 0xFF	; 255
     ac4:	d8 12       	cpse	r13, r24
     ac6:	16 c0       	rjmp	.+44     	; 0xaf4 <Modbus_mster_transaction+0x6c4>
     ac8:	90 91 f8 03 	lds	r25, 0x03F8	; 0x8003f8 <g_mod1_write_address>
     acc:	80 91 f9 03 	lds	r24, 0x03F9	; 0x8003f9 <g_mod1_write_address+0x1>
     ad0:	e1 e0       	ldi	r30, 0x01	; 1
     ad2:	f0 e0       	ldi	r31, 0x00	; 0
     ad4:	ec 0f       	add	r30, r28
     ad6:	fd 1f       	adc	r31, r29
     ad8:	eb 0d       	add	r30, r11
     ada:	f1 1d       	adc	r31, r1
     adc:	80 83       	st	Z, r24
     ade:	81 e0       	ldi	r24, 0x01	; 1
     ae0:	8b 0d       	add	r24, r11
     ae2:	e1 e0       	ldi	r30, 0x01	; 1
     ae4:	f0 e0       	ldi	r31, 0x00	; 0
     ae6:	ec 0f       	add	r30, r28
     ae8:	fd 1f       	adc	r31, r29
     aea:	e8 0f       	add	r30, r24
     aec:	f1 1d       	adc	r31, r1
     aee:	b3 94       	inc	r11
     af0:	b3 94       	inc	r11
     af2:	90 83       	st	Z, r25
     af4:	90 e1       	ldi	r25, 0x10	; 16
     af6:	d9 16       	cp	r13, r25
     af8:	09 f4       	brne	.+2      	; 0xafc <Modbus_mster_transaction+0x6cc>
     afa:	ad c0       	rjmp	.+346    	; 0xc56 <Modbus_mster_transaction+0x826>
     afc:	9d 15       	cp	r25, r13
     afe:	58 f0       	brcs	.+22     	; 0xb16 <Modbus_mster_transaction+0x6e6>
     b00:	a6 e0       	ldi	r26, 0x06	; 6
     b02:	da 16       	cp	r13, r26
     b04:	61 f1       	breq	.+88     	; 0xb5e <Modbus_mster_transaction+0x72e>
     b06:	bf e0       	ldi	r27, 0x0F	; 15
     b08:	db 16       	cp	r13, r27
     b0a:	09 f4       	brne	.+2      	; 0xb0e <Modbus_mster_transaction+0x6de>
     b0c:	41 c0       	rjmp	.+130    	; 0xb90 <Modbus_mster_transaction+0x760>
     b0e:	e5 e0       	ldi	r30, 0x05	; 5
     b10:	de 12       	cpse	r13, r30
     b12:	1b c1       	rjmp	.+566    	; 0xd4a <Modbus_mster_transaction+0x91a>
     b14:	0d c0       	rjmp	.+26     	; 0xb30 <Modbus_mster_transaction+0x700>
     b16:	f7 e1       	ldi	r31, 0x17	; 23
     b18:	df 16       	cp	r13, r31
     b1a:	09 f4       	brne	.+2      	; 0xb1e <Modbus_mster_transaction+0x6ee>
     b1c:	9c c0       	rjmp	.+312    	; 0xc56 <Modbus_mster_transaction+0x826>
     b1e:	2f ef       	ldi	r18, 0xFF	; 255
     b20:	d2 16       	cp	r13, r18
     b22:	09 f4       	brne	.+2      	; 0xb26 <Modbus_mster_transaction+0x6f6>
     b24:	98 c0       	rjmp	.+304    	; 0xc56 <Modbus_mster_transaction+0x826>
     b26:	86 e1       	ldi	r24, 0x16	; 22
     b28:	d8 16       	cp	r13, r24
     b2a:	09 f4       	brne	.+2      	; 0xb2e <Modbus_mster_transaction+0x6fe>
     b2c:	e0 c0       	rjmp	.+448    	; 0xcee <Modbus_mster_transaction+0x8be>
     b2e:	0d c1       	rjmp	.+538    	; 0xd4a <Modbus_mster_transaction+0x91a>
     b30:	90 91 f6 03 	lds	r25, 0x03F6	; 0x8003f6 <g_mod1_write_qty>
     b34:	80 91 f7 03 	lds	r24, 0x03F7	; 0x8003f7 <g_mod1_write_qty+0x1>
     b38:	e1 e0       	ldi	r30, 0x01	; 1
     b3a:	f0 e0       	ldi	r31, 0x00	; 0
     b3c:	ec 0f       	add	r30, r28
     b3e:	fd 1f       	adc	r31, r29
     b40:	eb 0d       	add	r30, r11
     b42:	f1 1d       	adc	r31, r1
     b44:	80 83       	st	Z, r24
     b46:	81 e0       	ldi	r24, 0x01	; 1
     b48:	8b 0d       	add	r24, r11
     b4a:	e1 e0       	ldi	r30, 0x01	; 1
     b4c:	f0 e0       	ldi	r31, 0x00	; 0
     b4e:	ec 0f       	add	r30, r28
     b50:	fd 1f       	adc	r31, r29
     b52:	e8 0f       	add	r30, r24
     b54:	f1 1d       	adc	r31, r1
     b56:	b3 94       	inc	r11
     b58:	b3 94       	inc	r11
     b5a:	90 83       	st	Z, r25
     b5c:	f6 c0       	rjmp	.+492    	; 0xd4a <Modbus_mster_transaction+0x91a>
     b5e:	e6 e7       	ldi	r30, 0x76	; 118
     b60:	f3 e0       	ldi	r31, 0x03	; 3
     b62:	80 81       	ld	r24, Z
     b64:	91 81       	ldd	r25, Z+1	; 0x01
     b66:	a1 e0       	ldi	r26, 0x01	; 1
     b68:	b0 e0       	ldi	r27, 0x00	; 0
     b6a:	ac 0f       	add	r26, r28
     b6c:	bd 1f       	adc	r27, r29
     b6e:	ab 0d       	add	r26, r11
     b70:	b1 1d       	adc	r27, r1
     b72:	9c 93       	st	X, r25
     b74:	20 81       	ld	r18, Z
     b76:	31 81       	ldd	r19, Z+1	; 0x01
     b78:	81 e0       	ldi	r24, 0x01	; 1
     b7a:	8b 0d       	add	r24, r11
     b7c:	e1 e0       	ldi	r30, 0x01	; 1
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	ec 0f       	add	r30, r28
     b82:	fd 1f       	adc	r31, r29
     b84:	e8 0f       	add	r30, r24
     b86:	f1 1d       	adc	r31, r1
     b88:	b3 94       	inc	r11
     b8a:	b3 94       	inc	r11
     b8c:	20 83       	st	Z, r18
     b8e:	dd c0       	rjmp	.+442    	; 0xd4a <Modbus_mster_transaction+0x91a>
     b90:	80 91 f6 03 	lds	r24, 0x03F6	; 0x8003f6 <g_mod1_write_qty>
     b94:	90 91 f7 03 	lds	r25, 0x03F7	; 0x8003f7 <g_mod1_write_qty+0x1>
     b98:	e1 e0       	ldi	r30, 0x01	; 1
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	ec 0f       	add	r30, r28
     b9e:	fd 1f       	adc	r31, r29
     ba0:	eb 0d       	add	r30, r11
     ba2:	f1 1d       	adc	r31, r1
     ba4:	90 83       	st	Z, r25
     ba6:	22 e0       	ldi	r18, 0x02	; 2
     ba8:	2b 0d       	add	r18, r11
     baa:	31 e0       	ldi	r19, 0x01	; 1
     bac:	3b 0d       	add	r19, r11
     bae:	e1 e0       	ldi	r30, 0x01	; 1
     bb0:	f0 e0       	ldi	r31, 0x00	; 0
     bb2:	ec 0f       	add	r30, r28
     bb4:	fd 1f       	adc	r31, r29
     bb6:	e3 0f       	add	r30, r19
     bb8:	f1 1d       	adc	r31, r1
     bba:	80 83       	st	Z, r24
     bbc:	ac 01       	movw	r20, r24
     bbe:	47 70       	andi	r20, 0x07	; 7
     bc0:	55 27       	eor	r21, r21
     bc2:	45 2b       	or	r20, r21
     bc4:	49 f0       	breq	.+18     	; 0xbd8 <Modbus_mster_transaction+0x7a8>
     bc6:	96 95       	lsr	r25
     bc8:	87 95       	ror	r24
     bca:	96 95       	lsr	r25
     bcc:	87 95       	ror	r24
     bce:	96 95       	lsr	r25
     bd0:	87 95       	ror	r24
     bd2:	91 e0       	ldi	r25, 0x01	; 1
     bd4:	98 0f       	add	r25, r24
     bd6:	07 c0       	rjmp	.+14     	; 0xbe6 <Modbus_mster_transaction+0x7b6>
     bd8:	96 95       	lsr	r25
     bda:	87 95       	ror	r24
     bdc:	96 95       	lsr	r25
     bde:	87 95       	ror	r24
     be0:	96 95       	lsr	r25
     be2:	87 95       	ror	r24
     be4:	98 2f       	mov	r25, r24
     be6:	a3 e0       	ldi	r26, 0x03	; 3
     be8:	ba 0e       	add	r11, r26
     bea:	fe 01       	movw	r30, r28
     bec:	e2 0f       	add	r30, r18
     bee:	f1 1d       	adc	r31, r1
     bf0:	91 83       	std	Z+1, r25	; 0x01
     bf2:	99 23       	and	r25, r25
     bf4:	09 f4       	brne	.+2      	; 0xbf8 <Modbus_mster_transaction+0x7c8>
     bf6:	a9 c0       	rjmp	.+338    	; 0xd4a <Modbus_mster_transaction+0x91a>
     bf8:	80 e0       	ldi	r24, 0x00	; 0
     bfa:	28 2f       	mov	r18, r24
     bfc:	21 70       	andi	r18, 0x01	; 1
     bfe:	80 ff       	sbrs	r24, 0
     c00:	03 c0       	rjmp	.+6      	; 0xc08 <Modbus_mster_transaction+0x7d8>
     c02:	21 30       	cpi	r18, 0x01	; 1
     c04:	99 f0       	breq	.+38     	; 0xc2c <Modbus_mster_transaction+0x7fc>
     c06:	23 c0       	rjmp	.+70     	; 0xc4e <Modbus_mster_transaction+0x81e>
     c08:	e8 2f       	mov	r30, r24
     c0a:	e6 95       	lsr	r30
     c0c:	f0 e0       	ldi	r31, 0x00	; 0
     c0e:	ee 0f       	add	r30, r30
     c10:	ff 1f       	adc	r31, r31
     c12:	ea 58       	subi	r30, 0x8A	; 138
     c14:	fc 4f       	sbci	r31, 0xFC	; 252
     c16:	20 81       	ld	r18, Z
     c18:	31 81       	ldd	r19, Z+1	; 0x01
     c1a:	e1 e0       	ldi	r30, 0x01	; 1
     c1c:	f0 e0       	ldi	r31, 0x00	; 0
     c1e:	ec 0f       	add	r30, r28
     c20:	fd 1f       	adc	r31, r29
     c22:	eb 0d       	add	r30, r11
     c24:	f1 1d       	adc	r31, r1
     c26:	20 83       	st	Z, r18
     c28:	b3 94       	inc	r11
     c2a:	11 c0       	rjmp	.+34     	; 0xc4e <Modbus_mster_transaction+0x81e>
     c2c:	e8 2f       	mov	r30, r24
     c2e:	e6 95       	lsr	r30
     c30:	f0 e0       	ldi	r31, 0x00	; 0
     c32:	ee 0f       	add	r30, r30
     c34:	ff 1f       	adc	r31, r31
     c36:	ea 58       	subi	r30, 0x8A	; 138
     c38:	fc 4f       	sbci	r31, 0xFC	; 252
     c3a:	20 81       	ld	r18, Z
     c3c:	31 81       	ldd	r19, Z+1	; 0x01
     c3e:	e1 e0       	ldi	r30, 0x01	; 1
     c40:	f0 e0       	ldi	r31, 0x00	; 0
     c42:	ec 0f       	add	r30, r28
     c44:	fd 1f       	adc	r31, r29
     c46:	eb 0d       	add	r30, r11
     c48:	f1 1d       	adc	r31, r1
     c4a:	30 83       	st	Z, r19
     c4c:	b3 94       	inc	r11
     c4e:	8f 5f       	subi	r24, 0xFF	; 255
     c50:	98 13       	cpse	r25, r24
     c52:	d3 cf       	rjmp	.-90     	; 0xbfa <Modbus_mster_transaction+0x7ca>
     c54:	7a c0       	rjmp	.+244    	; 0xd4a <Modbus_mster_transaction+0x91a>
     c56:	80 91 f6 03 	lds	r24, 0x03F6	; 0x8003f6 <g_mod1_write_qty>
     c5a:	90 91 f7 03 	lds	r25, 0x03F7	; 0x8003f7 <g_mod1_write_qty+0x1>
     c5e:	e1 e0       	ldi	r30, 0x01	; 1
     c60:	f0 e0       	ldi	r31, 0x00	; 0
     c62:	ec 0f       	add	r30, r28
     c64:	fd 1f       	adc	r31, r29
     c66:	eb 0d       	add	r30, r11
     c68:	f1 1d       	adc	r31, r1
     c6a:	90 83       	st	Z, r25
     c6c:	21 e0       	ldi	r18, 0x01	; 1
     c6e:	2b 0d       	add	r18, r11
     c70:	e1 e0       	ldi	r30, 0x01	; 1
     c72:	f0 e0       	ldi	r31, 0x00	; 0
     c74:	ec 0f       	add	r30, r28
     c76:	fd 1f       	adc	r31, r29
     c78:	e2 0f       	add	r30, r18
     c7a:	f1 1d       	adc	r31, r1
     c7c:	80 83       	st	Z, r24
     c7e:	22 e0       	ldi	r18, 0x02	; 2
     c80:	2b 0d       	add	r18, r11
     c82:	e1 e0       	ldi	r30, 0x01	; 1
     c84:	f0 e0       	ldi	r31, 0x00	; 0
     c86:	ec 0f       	add	r30, r28
     c88:	fd 1f       	adc	r31, r29
     c8a:	e2 0f       	add	r30, r18
     c8c:	f1 1d       	adc	r31, r1
     c8e:	b3 e0       	ldi	r27, 0x03	; 3
     c90:	bb 0e       	add	r11, r27
     c92:	28 2f       	mov	r18, r24
     c94:	22 0f       	add	r18, r18
     c96:	20 83       	st	Z, r18
     c98:	ac 01       	movw	r20, r24
     c9a:	55 27       	eor	r21, r21
     c9c:	14 16       	cp	r1, r20
     c9e:	15 06       	cpc	r1, r21
     ca0:	0c f0       	brlt	.+2      	; 0xca4 <Modbus_mster_transaction+0x874>
     ca2:	53 c0       	rjmp	.+166    	; 0xd4a <Modbus_mster_transaction+0x91a>
     ca4:	80 e0       	ldi	r24, 0x00	; 0
     ca6:	90 e0       	ldi	r25, 0x00	; 0
     ca8:	20 e0       	ldi	r18, 0x00	; 0
     caa:	88 0f       	add	r24, r24
     cac:	99 1f       	adc	r25, r25
     cae:	fc 01       	movw	r30, r24
     cb0:	ea 58       	subi	r30, 0x8A	; 138
     cb2:	fc 4f       	sbci	r31, 0xFC	; 252
     cb4:	80 81       	ld	r24, Z
     cb6:	91 81       	ldd	r25, Z+1	; 0x01
     cb8:	a1 e0       	ldi	r26, 0x01	; 1
     cba:	b0 e0       	ldi	r27, 0x00	; 0
     cbc:	ac 0f       	add	r26, r28
     cbe:	bd 1f       	adc	r27, r29
     cc0:	ab 0d       	add	r26, r11
     cc2:	b1 1d       	adc	r27, r1
     cc4:	9c 93       	st	X, r25
     cc6:	60 81       	ld	r22, Z
     cc8:	71 81       	ldd	r23, Z+1	; 0x01
     cca:	81 e0       	ldi	r24, 0x01	; 1
     ccc:	8b 0d       	add	r24, r11
     cce:	e1 e0       	ldi	r30, 0x01	; 1
     cd0:	f0 e0       	ldi	r31, 0x00	; 0
     cd2:	ec 0f       	add	r30, r28
     cd4:	fd 1f       	adc	r31, r29
     cd6:	e8 0f       	add	r30, r24
     cd8:	f1 1d       	adc	r31, r1
     cda:	b3 94       	inc	r11
     cdc:	b3 94       	inc	r11
     cde:	60 83       	st	Z, r22
     ce0:	2f 5f       	subi	r18, 0xFF	; 255
     ce2:	82 2f       	mov	r24, r18
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	84 17       	cp	r24, r20
     ce8:	95 07       	cpc	r25, r21
     cea:	fc f2       	brlt	.-66     	; 0xcaa <Modbus_mster_transaction+0x87a>
     cec:	2e c0       	rjmp	.+92     	; 0xd4a <Modbus_mster_transaction+0x91a>
     cee:	e6 e7       	ldi	r30, 0x76	; 118
     cf0:	f3 e0       	ldi	r31, 0x03	; 3
     cf2:	80 81       	ld	r24, Z
     cf4:	91 81       	ldd	r25, Z+1	; 0x01
     cf6:	a1 e0       	ldi	r26, 0x01	; 1
     cf8:	b0 e0       	ldi	r27, 0x00	; 0
     cfa:	ac 0f       	add	r26, r28
     cfc:	bd 1f       	adc	r27, r29
     cfe:	ab 0d       	add	r26, r11
     d00:	b1 1d       	adc	r27, r1
     d02:	9c 93       	st	X, r25
     d04:	80 81       	ld	r24, Z
     d06:	91 81       	ldd	r25, Z+1	; 0x01
     d08:	91 e0       	ldi	r25, 0x01	; 1
     d0a:	9b 0d       	add	r25, r11
     d0c:	a1 e0       	ldi	r26, 0x01	; 1
     d0e:	b0 e0       	ldi	r27, 0x00	; 0
     d10:	ac 0f       	add	r26, r28
     d12:	bd 1f       	adc	r27, r29
     d14:	a9 0f       	add	r26, r25
     d16:	b1 1d       	adc	r27, r1
     d18:	8c 93       	st	X, r24
     d1a:	82 81       	ldd	r24, Z+2	; 0x02
     d1c:	93 81       	ldd	r25, Z+3	; 0x03
     d1e:	82 e0       	ldi	r24, 0x02	; 2
     d20:	8b 0d       	add	r24, r11
     d22:	a1 e0       	ldi	r26, 0x01	; 1
     d24:	b0 e0       	ldi	r27, 0x00	; 0
     d26:	ac 0f       	add	r26, r28
     d28:	bd 1f       	adc	r27, r29
     d2a:	a8 0f       	add	r26, r24
     d2c:	b1 1d       	adc	r27, r1
     d2e:	9c 93       	st	X, r25
     d30:	22 81       	ldd	r18, Z+2	; 0x02
     d32:	33 81       	ldd	r19, Z+3	; 0x03
     d34:	83 e0       	ldi	r24, 0x03	; 3
     d36:	8b 0d       	add	r24, r11
     d38:	e1 e0       	ldi	r30, 0x01	; 1
     d3a:	f0 e0       	ldi	r31, 0x00	; 0
     d3c:	ec 0f       	add	r30, r28
     d3e:	fd 1f       	adc	r31, r29
     d40:	e8 0f       	add	r30, r24
     d42:	f1 1d       	adc	r31, r1
     d44:	84 e0       	ldi	r24, 0x04	; 4
     d46:	b8 0e       	add	r11, r24
     d48:	20 83       	st	Z, r18
     d4a:	bb 20       	and	r11, r11
     d4c:	b9 f0       	breq	.+46     	; 0xd7c <Modbus_mster_transaction+0x94c>
     d4e:	8e 01       	movw	r16, r28
     d50:	0f 5f       	subi	r16, 0xFF	; 255
     d52:	1f 4f       	sbci	r17, 0xFF	; 255
     d54:	ee 24       	eor	r14, r14
     d56:	ea 94       	dec	r14
     d58:	eb 0c       	add	r14, r11
     d5a:	f1 2c       	mov	r15, r1
     d5c:	9f ef       	ldi	r25, 0xFF	; 255
     d5e:	e9 1a       	sub	r14, r25
     d60:	f9 0a       	sbc	r15, r25
     d62:	e0 0e       	add	r14, r16
     d64:	f1 1e       	adc	r15, r17
     d66:	8f ef       	ldi	r24, 0xFF	; 255
     d68:	9f ef       	ldi	r25, 0xFF	; 255
     d6a:	d8 01       	movw	r26, r16
     d6c:	6d 91       	ld	r22, X+
     d6e:	8d 01       	movw	r16, r26
     d70:	0e 94 1d 23 	call	0x463a	; 0x463a <crc16_update>
     d74:	0e 15       	cp	r16, r14
     d76:	1f 05       	cpc	r17, r15
     d78:	c1 f7       	brne	.-16     	; 0xd6a <Modbus_mster_transaction+0x93a>
     d7a:	02 c0       	rjmp	.+4      	; 0xd80 <Modbus_mster_transaction+0x950>
     d7c:	8f ef       	ldi	r24, 0xFF	; 255
     d7e:	9f ef       	ldi	r25, 0xFF	; 255
     d80:	ee 24       	eor	r14, r14
     d82:	e3 94       	inc	r14
     d84:	eb 0c       	add	r14, r11
     d86:	e1 e0       	ldi	r30, 0x01	; 1
     d88:	f0 e0       	ldi	r31, 0x00	; 0
     d8a:	ec 0f       	add	r30, r28
     d8c:	fd 1f       	adc	r31, r29
     d8e:	eb 0d       	add	r30, r11
     d90:	f1 1d       	adc	r31, r1
     d92:	80 83       	st	Z, r24
     d94:	b3 94       	inc	r11
     d96:	b3 94       	inc	r11
     d98:	e1 e0       	ldi	r30, 0x01	; 1
     d9a:	f0 e0       	ldi	r31, 0x00	; 0
     d9c:	ec 0f       	add	r30, r28
     d9e:	fd 1f       	adc	r31, r29
     da0:	ee 0d       	add	r30, r14
     da2:	f1 1d       	adc	r31, r1
     da4:	90 83       	st	Z, r25
     da6:	e1 e0       	ldi	r30, 0x01	; 1
     da8:	f0 e0       	ldi	r31, 0x00	; 0
     daa:	ec 0f       	add	r30, r28
     dac:	fd 1f       	adc	r31, r29
     dae:	eb 0d       	add	r30, r11
     db0:	f1 1d       	adc	r31, r1
     db2:	10 82       	st	Z, r1
     db4:	e0 91 69 03 	lds	r30, 0x0369	; 0x800369 <g_mod1_Serial_getc>
     db8:	f0 91 6a 03 	lds	r31, 0x036A	; 0x80036a <g_mod1_Serial_getc+0x1>
     dbc:	19 95       	eicall
     dbe:	81 15       	cp	r24, r1
     dc0:	91 40       	sbci	r25, 0x01	; 1
     dc2:	c1 f7       	brne	.-16     	; 0xdb4 <Modbus_mster_transaction+0x984>
     dc4:	e0 91 6f 03 	lds	r30, 0x036F	; 0x80036f <g_mod1_pre_transmission>
     dc8:	f0 91 70 03 	lds	r31, 0x0370	; 0x800370 <g_mod1_pre_transmission+0x1>
     dcc:	30 97       	sbiw	r30, 0x00	; 0
     dce:	09 f0       	breq	.+2      	; 0xdd2 <Modbus_mster_transaction+0x9a2>
     dd0:	19 95       	eicall
     dd2:	bb 20       	and	r11, r11
     dd4:	a1 f0       	breq	.+40     	; 0xdfe <Modbus_mster_transaction+0x9ce>
     dd6:	8e 01       	movw	r16, r28
     dd8:	0f 5f       	subi	r16, 0xFF	; 255
     dda:	1f 4f       	sbci	r17, 0xFF	; 255
     ddc:	f1 2c       	mov	r15, r1
     dde:	ef ef       	ldi	r30, 0xFF	; 255
     de0:	ee 1a       	sub	r14, r30
     de2:	fe 0a       	sbc	r15, r30
     de4:	e0 0e       	add	r14, r16
     de6:	f1 1e       	adc	r15, r17
     de8:	e0 91 6b 03 	lds	r30, 0x036B	; 0x80036b <g_mod1_Serial_putc>
     dec:	f0 91 6c 03 	lds	r31, 0x036C	; 0x80036c <g_mod1_Serial_putc+0x1>
     df0:	d8 01       	movw	r26, r16
     df2:	8d 91       	ld	r24, X+
     df4:	8d 01       	movw	r16, r26
     df6:	19 95       	eicall
     df8:	e0 16       	cp	r14, r16
     dfa:	f1 06       	cpc	r15, r17
     dfc:	a9 f7       	brne	.-22     	; 0xde8 <Modbus_mster_transaction+0x9b8>
     dfe:	e0 91 65 03 	lds	r30, 0x0365	; 0x800365 <g_mod1_Serial_flush>
     e02:	f0 91 66 03 	lds	r31, 0x0366	; 0x800366 <g_mod1_Serial_flush+0x1>
     e06:	19 95       	eicall
     e08:	e7 e0       	ldi	r30, 0x07	; 7
     e0a:	f7 e0       	ldi	r31, 0x07	; 7
     e0c:	31 97       	sbiw	r30, 0x01	; 1
     e0e:	f1 f7       	brne	.-4      	; 0xe0c <Modbus_mster_transaction+0x9dc>
     e10:	00 c0       	rjmp	.+0      	; 0xe12 <Modbus_mster_transaction+0x9e2>
     e12:	00 00       	nop
     e14:	e0 91 6d 03 	lds	r30, 0x036D	; 0x80036d <g_mod1_post_transmission>
     e18:	f0 91 6e 03 	lds	r31, 0x036E	; 0x80036e <g_mod1_post_transmission+0x1>
     e1c:	30 97       	sbiw	r30, 0x00	; 0
     e1e:	09 f0       	breq	.+2      	; 0xe22 <Modbus_mster_transaction+0x9f2>
     e20:	19 95       	eicall
     e22:	0e 94 3e 23 	call	0x467c	; 0x467c <Get_millis>
     e26:	4b 01       	movw	r8, r22
     e28:	5c 01       	movw	r10, r24
     e2a:	08 e0       	ldi	r16, 0x08	; 8
     e2c:	10 e0       	ldi	r17, 0x00	; 0
     e2e:	ed 2c       	mov	r14, r13
     e30:	f1 2c       	mov	r15, r1
     e32:	e0 91 67 03 	lds	r30, 0x0367	; 0x800367 <g_mod1_Serial_available>
     e36:	f0 91 68 03 	lds	r31, 0x0368	; 0x800368 <g_mod1_Serial_available+0x1>
     e3a:	19 95       	eicall
     e3c:	89 2b       	or	r24, r25
     e3e:	91 f0       	breq	.+36     	; 0xe64 <Modbus_mster_transaction+0xa34>
     e40:	dd 24       	eor	r13, r13
     e42:	d3 94       	inc	r13
     e44:	d1 0e       	add	r13, r17
     e46:	e0 91 69 03 	lds	r30, 0x0369	; 0x800369 <g_mod1_Serial_getc>
     e4a:	f0 91 6a 03 	lds	r31, 0x036A	; 0x80036a <g_mod1_Serial_getc+0x1>
     e4e:	19 95       	eicall
     e50:	e1 e0       	ldi	r30, 0x01	; 1
     e52:	f0 e0       	ldi	r31, 0x00	; 0
     e54:	ec 0f       	add	r30, r28
     e56:	fd 1f       	adc	r31, r29
     e58:	e1 0f       	add	r30, r17
     e5a:	f1 1d       	adc	r31, r1
     e5c:	80 83       	st	Z, r24
     e5e:	01 50       	subi	r16, 0x01	; 1
     e60:	1d 2d       	mov	r17, r13
     e62:	07 c0       	rjmp	.+14     	; 0xe72 <Modbus_mster_transaction+0xa42>
     e64:	e0 91 71 03 	lds	r30, 0x0371	; 0x800371 <g_mod1_idle>
     e68:	f0 91 72 03 	lds	r31, 0x0372	; 0x800372 <g_mod1_idle+0x1>
     e6c:	30 97       	sbiw	r30, 0x00	; 0
     e6e:	09 f0       	breq	.+2      	; 0xe72 <Modbus_mster_transaction+0xa42>
     e70:	19 95       	eicall
     e72:	15 30       	cpi	r17, 0x05	; 5
     e74:	51 f5       	brne	.+84     	; 0xeca <Modbus_mster_transaction+0xa9a>
     e76:	99 81       	ldd	r25, Y+1	; 0x01
     e78:	80 91 7e 04 	lds	r24, 0x047E	; 0x80047e <g_mod1_slave>
     e7c:	98 13       	cpse	r25, r24
     e7e:	4d c1       	rjmp	.+666    	; 0x111a <Modbus_mster_transaction+0xcea>
     e80:	8a 81       	ldd	r24, Y+2	; 0x02
     e82:	28 2f       	mov	r18, r24
     e84:	2f 77       	andi	r18, 0x7F	; 127
     e86:	30 e0       	ldi	r19, 0x00	; 0
     e88:	2e 15       	cp	r18, r14
     e8a:	3f 05       	cpc	r19, r15
     e8c:	09 f0       	breq	.+2      	; 0xe90 <Modbus_mster_transaction+0xa60>
     e8e:	47 c1       	rjmp	.+654    	; 0x111e <Modbus_mster_transaction+0xcee>
     e90:	88 23       	and	r24, r24
     e92:	24 f4       	brge	.+8      	; 0xe9c <Modbus_mster_transaction+0xa6c>
     e94:	8b 81       	ldd	r24, Y+3	; 0x03
     e96:	88 23       	and	r24, r24
     e98:	d9 f1       	breq	.+118    	; 0xf10 <Modbus_mster_transaction+0xae0>
     e9a:	c4 c0       	rjmp	.+392    	; 0x1024 <Modbus_mster_transaction+0xbf4>
     e9c:	81 31       	cpi	r24, 0x11	; 17
     e9e:	58 f4       	brcc	.+22     	; 0xeb6 <Modbus_mster_transaction+0xa86>
     ea0:	8f 30       	cpi	r24, 0x0F	; 15
     ea2:	08 f0       	brcs	.+2      	; 0xea6 <Modbus_mster_transaction+0xa76>
     ea4:	f9 c0       	rjmp	.+498    	; 0x1098 <Modbus_mster_transaction+0xc68>
     ea6:	81 30       	cpi	r24, 0x01	; 1
     ea8:	80 f0       	brcs	.+32     	; 0xeca <Modbus_mster_transaction+0xa9a>
     eaa:	85 30       	cpi	r24, 0x05	; 5
     eac:	68 f0       	brcs	.+26     	; 0xec8 <Modbus_mster_transaction+0xa98>
     eae:	87 30       	cpi	r24, 0x07	; 7
     eb0:	08 f4       	brcc	.+2      	; 0xeb4 <Modbus_mster_transaction+0xa84>
     eb2:	f2 c0       	rjmp	.+484    	; 0x1098 <Modbus_mster_transaction+0xc68>
     eb4:	0a c0       	rjmp	.+20     	; 0xeca <Modbus_mster_transaction+0xa9a>
     eb6:	87 31       	cpi	r24, 0x17	; 23
     eb8:	39 f0       	breq	.+14     	; 0xec8 <Modbus_mster_transaction+0xa98>
     eba:	8f 3f       	cpi	r24, 0xFF	; 255
     ebc:	09 f4       	brne	.+2      	; 0xec0 <Modbus_mster_transaction+0xa90>
     ebe:	ec c0       	rjmp	.+472    	; 0x1098 <Modbus_mster_transaction+0xc68>
     ec0:	86 31       	cpi	r24, 0x16	; 22
     ec2:	19 f4       	brne	.+6      	; 0xeca <Modbus_mster_transaction+0xa9a>
     ec4:	05 e0       	ldi	r16, 0x05	; 5
     ec6:	e9 c0       	rjmp	.+466    	; 0x109a <Modbus_mster_transaction+0xc6a>
     ec8:	0b 81       	ldd	r16, Y+3	; 0x03
     eca:	0e 94 3e 23 	call	0x467c	; 0x467c <Get_millis>
     ece:	dc 01       	movw	r26, r24
     ed0:	cb 01       	movw	r24, r22
     ed2:	88 19       	sub	r24, r8
     ed4:	99 09       	sbc	r25, r9
     ed6:	aa 09       	sbc	r26, r10
     ed8:	bb 09       	sbc	r27, r11
     eda:	89 3c       	cpi	r24, 0xC9	; 201
     edc:	91 05       	cpc	r25, r1
     ede:	a1 05       	cpc	r26, r1
     ee0:	b1 05       	cpc	r27, r1
     ee2:	08 f4       	brcc	.+2      	; 0xee6 <Modbus_mster_transaction+0xab6>
     ee4:	10 c1       	rjmp	.+544    	; 0x1106 <Modbus_mster_transaction+0xcd6>
     ee6:	80 e0       	ldi	r24, 0x00	; 0
     ee8:	92 e0       	ldi	r25, 0x02	; 2
     eea:	d3 d7       	rcall	.+4006   	; 0x1e92 <UART0_puts>
     eec:	01 11       	cpse	r16, r1
     eee:	19 c1       	rjmp	.+562    	; 0x1122 <Modbus_mster_transaction+0xcf2>
     ef0:	82 ee       	ldi	r24, 0xE2	; 226
     ef2:	81 11       	cpse	r24, r1
     ef4:	97 c0       	rjmp	.+302    	; 0x1024 <Modbus_mster_transaction+0xbf4>
     ef6:	15 30       	cpi	r17, 0x05	; 5
     ef8:	08 f4       	brcc	.+2      	; 0xefc <Modbus_mster_transaction+0xacc>
     efa:	ef c0       	rjmp	.+478    	; 0x10da <Modbus_mster_transaction+0xcaa>
     efc:	01 2f       	mov	r16, r17
     efe:	10 e0       	ldi	r17, 0x00	; 0
     f00:	78 01       	movw	r14, r16
     f02:	f2 e0       	ldi	r31, 0x02	; 2
     f04:	ef 1a       	sub	r14, r31
     f06:	f1 08       	sbc	r15, r1
     f08:	1e 14       	cp	r1, r14
     f0a:	1f 04       	cpc	r1, r15
     f0c:	44 f0       	brlt	.+16     	; 0xf1e <Modbus_mster_transaction+0xaee>
     f0e:	d4 c0       	rjmp	.+424    	; 0x10b8 <Modbus_mster_transaction+0xc88>
     f10:	0f 2e       	mov	r0, r31
     f12:	f3 e0       	ldi	r31, 0x03	; 3
     f14:	ef 2e       	mov	r14, r31
     f16:	f1 2c       	mov	r15, r1
     f18:	f0 2d       	mov	r31, r0
     f1a:	05 e0       	ldi	r16, 0x05	; 5
     f1c:	10 e0       	ldi	r17, 0x00	; 0
     f1e:	20 e0       	ldi	r18, 0x00	; 0
     f20:	30 e0       	ldi	r19, 0x00	; 0
     f22:	8f ef       	ldi	r24, 0xFF	; 255
     f24:	9f ef       	ldi	r25, 0xFF	; 255
     f26:	d1 2c       	mov	r13, r1
     f28:	e1 e0       	ldi	r30, 0x01	; 1
     f2a:	f0 e0       	ldi	r31, 0x00	; 0
     f2c:	ec 0f       	add	r30, r28
     f2e:	fd 1f       	adc	r31, r29
     f30:	e2 0f       	add	r30, r18
     f32:	f3 1f       	adc	r31, r19
     f34:	60 81       	ld	r22, Z
     f36:	0e 94 1d 23 	call	0x463a	; 0x463a <crc16_update>
     f3a:	d3 94       	inc	r13
     f3c:	2d 2d       	mov	r18, r13
     f3e:	30 e0       	ldi	r19, 0x00	; 0
     f40:	2e 15       	cp	r18, r14
     f42:	3f 05       	cpc	r19, r15
     f44:	8c f3       	brlt	.-30     	; 0xf28 <Modbus_mster_transaction+0xaf8>
     f46:	ba c0       	rjmp	.+372    	; 0x10bc <Modbus_mster_transaction+0xc8c>
     f48:	89 2f       	mov	r24, r25
     f4a:	99 27       	eor	r25, r25
     f4c:	fe 01       	movw	r30, r28
     f4e:	e0 0f       	add	r30, r16
     f50:	f1 1f       	adc	r31, r17
     f52:	20 81       	ld	r18, Z
     f54:	30 e0       	ldi	r19, 0x00	; 0
     f56:	82 17       	cp	r24, r18
     f58:	93 07       	cpc	r25, r19
     f5a:	09 f0       	breq	.+2      	; 0xf5e <Modbus_mster_transaction+0xb2e>
     f5c:	bc c0       	rjmp	.+376    	; 0x10d6 <Modbus_mster_transaction+0xca6>
     f5e:	bd c0       	rjmp	.+378    	; 0x10da <Modbus_mster_transaction+0xcaa>
     f60:	8b 81       	ldd	r24, Y+3	; 0x03
     f62:	86 95       	lsr	r24
     f64:	e1 f5       	brne	.+120    	; 0xfde <Modbus_mster_transaction+0xbae>
     f66:	5e c0       	rjmp	.+188    	; 0x1024 <Modbus_mster_transaction+0xbf4>
     f68:	6b 81       	ldd	r22, Y+3	; 0x03
     f6a:	86 2f       	mov	r24, r22
     f6c:	86 95       	lsr	r24
     f6e:	09 f4       	brne	.+2      	; 0xf72 <Modbus_mster_transaction+0xb42>
     f70:	c2 c0       	rjmp	.+388    	; 0x10f6 <Modbus_mster_transaction+0xcc6>
     f72:	fe 01       	movw	r30, r28
     f74:	31 96       	adiw	r30, 0x01	; 1
     f76:	40 e0       	ldi	r20, 0x00	; 0
     f78:	50 e0       	ldi	r21, 0x00	; 0
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	90 34       	cpi	r25, 0x40	; 64
     f7e:	70 f4       	brcc	.+28     	; 0xf9c <Modbus_mster_transaction+0xb6c>
     f80:	24 81       	ldd	r18, Z+4	; 0x04
     f82:	30 e0       	ldi	r19, 0x00	; 0
     f84:	32 2f       	mov	r19, r18
     f86:	22 27       	eor	r18, r18
     f88:	73 81       	ldd	r23, Z+3	; 0x03
     f8a:	27 2b       	or	r18, r23
     f8c:	da 01       	movw	r26, r20
     f8e:	aa 0f       	add	r26, r26
     f90:	bb 1f       	adc	r27, r27
     f92:	a6 50       	subi	r26, 0x06	; 6
     f94:	bc 4f       	sbci	r27, 0xFC	; 252
     f96:	11 96       	adiw	r26, 0x01	; 1
     f98:	3c 93       	st	X, r19
     f9a:	2e 93       	st	-X, r18
     f9c:	9f 5f       	subi	r25, 0xFF	; 255
     f9e:	4f 5f       	subi	r20, 0xFF	; 255
     fa0:	5f 4f       	sbci	r21, 0xFF	; 255
     fa2:	32 96       	adiw	r30, 0x02	; 2
     fa4:	98 13       	cpse	r25, r24
     fa6:	ea cf       	rjmp	.-44     	; 0xf7c <Modbus_mster_transaction+0xb4c>
     fa8:	9f ef       	ldi	r25, 0xFF	; 255
     faa:	98 0f       	add	r25, r24
     fac:	90 93 73 03 	sts	0x0373, r25	; 0x800373 <g_mod1_response_buffer_length>
     fb0:	60 ff       	sbrs	r22, 0
     fb2:	35 c0       	rjmp	.+106    	; 0x101e <Modbus_mster_transaction+0xbee>
     fb4:	80 34       	cpi	r24, 0x40	; 64
     fb6:	70 f4       	brcc	.+28     	; 0xfd4 <Modbus_mster_transaction+0xba4>
     fb8:	28 2f       	mov	r18, r24
     fba:	30 e0       	ldi	r19, 0x00	; 0
     fbc:	22 0f       	add	r18, r18
     fbe:	33 1f       	adc	r19, r19
     fc0:	fe 01       	movw	r30, r28
     fc2:	e2 0f       	add	r30, r18
     fc4:	f3 1f       	adc	r31, r19
     fc6:	44 81       	ldd	r20, Z+4	; 0x04
     fc8:	50 e0       	ldi	r21, 0x00	; 0
     fca:	f9 01       	movw	r30, r18
     fcc:	e6 50       	subi	r30, 0x06	; 6
     fce:	fc 4f       	sbci	r31, 0xFC	; 252
     fd0:	51 83       	std	Z+1, r21	; 0x01
     fd2:	40 83       	st	Z, r20
     fd4:	8f 5f       	subi	r24, 0xFF	; 255
     fd6:	80 93 73 03 	sts	0x0373, r24	; 0x800373 <g_mod1_response_buffer_length>
     fda:	80 e0       	ldi	r24, 0x00	; 0
     fdc:	23 c0       	rjmp	.+70     	; 0x1024 <Modbus_mster_transaction+0xbf4>
     fde:	fe 01       	movw	r30, r28
     fe0:	31 96       	adiw	r30, 0x01	; 1
     fe2:	40 e0       	ldi	r20, 0x00	; 0
     fe4:	50 e0       	ldi	r21, 0x00	; 0
     fe6:	90 e0       	ldi	r25, 0x00	; 0
     fe8:	90 34       	cpi	r25, 0x40	; 64
     fea:	70 f4       	brcc	.+28     	; 0x1008 <Modbus_mster_transaction+0xbd8>
     fec:	23 81       	ldd	r18, Z+3	; 0x03
     fee:	30 e0       	ldi	r19, 0x00	; 0
     ff0:	32 2f       	mov	r19, r18
     ff2:	22 27       	eor	r18, r18
     ff4:	64 81       	ldd	r22, Z+4	; 0x04
     ff6:	26 2b       	or	r18, r22
     ff8:	da 01       	movw	r26, r20
     ffa:	aa 0f       	add	r26, r26
     ffc:	bb 1f       	adc	r27, r27
     ffe:	a6 50       	subi	r26, 0x06	; 6
    1000:	bc 4f       	sbci	r27, 0xFC	; 252
    1002:	11 96       	adiw	r26, 0x01	; 1
    1004:	3c 93       	st	X, r19
    1006:	2e 93       	st	-X, r18
    1008:	9f 5f       	subi	r25, 0xFF	; 255
    100a:	4f 5f       	subi	r20, 0xFF	; 255
    100c:	5f 4f       	sbci	r21, 0xFF	; 255
    100e:	32 96       	adiw	r30, 0x02	; 2
    1010:	98 13       	cpse	r25, r24
    1012:	ea cf       	rjmp	.-44     	; 0xfe8 <Modbus_mster_transaction+0xbb8>
    1014:	81 50       	subi	r24, 0x01	; 1
    1016:	80 93 73 03 	sts	0x0373, r24	; 0x800373 <g_mod1_response_buffer_length>
    101a:	80 e0       	ldi	r24, 0x00	; 0
    101c:	03 c0       	rjmp	.+6      	; 0x1024 <Modbus_mster_transaction+0xbf4>
    101e:	80 e0       	ldi	r24, 0x00	; 0
    1020:	01 c0       	rjmp	.+2      	; 0x1024 <Modbus_mster_transaction+0xbf4>
    1022:	80 e0       	ldi	r24, 0x00	; 0
    1024:	10 92 75 03 	sts	0x0375, r1	; 0x800375 <g_mod1_transmit_buffer_index>
    1028:	10 92 74 03 	sts	0x0374, r1	; 0x800374 <g_mod1_response_buffer_index>
    102c:	7c c0       	rjmp	.+248    	; 0x1126 <Modbus_mster_transaction+0xcf6>
    102e:	84 ee       	ldi	r24, 0xE4	; 228
    1030:	7a c0       	rjmp	.+244    	; 0x1126 <Modbus_mster_transaction+0xcf6>
    1032:	03 e0       	ldi	r16, 0x03	; 3
    1034:	0e 94 3e 23 	call	0x467c	; 0x467c <Get_millis>
    1038:	dc 01       	movw	r26, r24
    103a:	cb 01       	movw	r24, r22
    103c:	88 19       	sub	r24, r8
    103e:	99 09       	sbc	r25, r9
    1040:	aa 09       	sbc	r26, r10
    1042:	bb 09       	sbc	r27, r11
    1044:	89 3c       	cpi	r24, 0xC9	; 201
    1046:	91 05       	cpc	r25, r1
    1048:	a1 05       	cpc	r26, r1
    104a:	b1 05       	cpc	r27, r1
    104c:	08 f4       	brcc	.+2      	; 0x1050 <Modbus_mster_transaction+0xc20>
    104e:	f8 cb       	rjmp	.-2064   	; 0x840 <Modbus_mster_transaction+0x410>
    1050:	51 cc       	rjmp	.-1886   	; 0x8f4 <Modbus_mster_transaction+0x4c4>
    1052:	8f ef       	ldi	r24, 0xFF	; 255
    1054:	9f ef       	ldi	r25, 0xFF	; 255
    1056:	fe 01       	movw	r30, r28
    1058:	ee 0d       	add	r30, r14
    105a:	ff 1d       	adc	r31, r15
    105c:	21 81       	ldd	r18, Z+1	; 0x01
    105e:	30 e0       	ldi	r19, 0x00	; 0
    1060:	ac 01       	movw	r20, r24
    1062:	55 27       	eor	r21, r21
    1064:	42 17       	cp	r20, r18
    1066:	53 07       	cpc	r21, r19
    1068:	09 f4       	brne	.+2      	; 0x106c <Modbus_mster_transaction+0xc3c>
    106a:	79 cc       	rjmp	.-1806   	; 0x95e <Modbus_mster_transaction+0x52e>
    106c:	83 ee       	ldi	r24, 0xE3	; 227
    106e:	e6 cc       	rjmp	.-1588   	; 0xa3c <Modbus_mster_transaction+0x60c>
    1070:	83 ee       	ldi	r24, 0xE3	; 227
    1072:	e4 cc       	rjmp	.-1592   	; 0xa3c <Modbus_mster_transaction+0x60c>
    1074:	8a 81       	ldd	r24, Y+2	; 0x02
    1076:	85 30       	cpi	r24, 0x05	; 5
    1078:	38 f4       	brcc	.+14     	; 0x1088 <Modbus_mster_transaction+0xc58>
    107a:	83 30       	cpi	r24, 0x03	; 3
    107c:	08 f0       	brcs	.+2      	; 0x1080 <Modbus_mster_transaction+0xc50>
    107e:	7b cc       	rjmp	.-1802   	; 0x976 <Modbus_mster_transaction+0x546>
    1080:	81 30       	cpi	r24, 0x01	; 1
    1082:	08 f0       	brcs	.+2      	; 0x1086 <Modbus_mster_transaction+0xc56>
    1084:	7d cc       	rjmp	.-1798   	; 0x980 <Modbus_mster_transaction+0x550>
    1086:	d9 cc       	rjmp	.-1614   	; 0xa3a <Modbus_mster_transaction+0x60a>
    1088:	87 31       	cpi	r24, 0x17	; 23
    108a:	09 f4       	brne	.+2      	; 0x108e <Modbus_mster_transaction+0xc5e>
    108c:	74 cc       	rjmp	.-1816   	; 0x976 <Modbus_mster_transaction+0x546>
    108e:	d5 cc       	rjmp	.-1622   	; 0xa3a <Modbus_mster_transaction+0x60a>
    1090:	70 fd       	sbrc	r23, 0
    1092:	9e cc       	rjmp	.-1732   	; 0x9d0 <Modbus_mster_transaction+0x5a0>
    1094:	80 e0       	ldi	r24, 0x00	; 0
    1096:	d2 cc       	rjmp	.-1628   	; 0xa3c <Modbus_mster_transaction+0x60c>
    1098:	03 e0       	ldi	r16, 0x03	; 3
    109a:	0e 94 3e 23 	call	0x467c	; 0x467c <Get_millis>
    109e:	dc 01       	movw	r26, r24
    10a0:	cb 01       	movw	r24, r22
    10a2:	88 19       	sub	r24, r8
    10a4:	99 09       	sbc	r25, r9
    10a6:	aa 09       	sbc	r26, r10
    10a8:	bb 09       	sbc	r27, r11
    10aa:	89 3c       	cpi	r24, 0xC9	; 201
    10ac:	91 05       	cpc	r25, r1
    10ae:	a1 05       	cpc	r26, r1
    10b0:	b1 05       	cpc	r27, r1
    10b2:	08 f4       	brcc	.+2      	; 0x10b6 <Modbus_mster_transaction+0xc86>
    10b4:	be ce       	rjmp	.-644    	; 0xe32 <Modbus_mster_transaction+0xa02>
    10b6:	17 cf       	rjmp	.-466    	; 0xee6 <Modbus_mster_transaction+0xab6>
    10b8:	8f ef       	ldi	r24, 0xFF	; 255
    10ba:	9f ef       	ldi	r25, 0xFF	; 255
    10bc:	fe 01       	movw	r30, r28
    10be:	ee 0d       	add	r30, r14
    10c0:	ff 1d       	adc	r31, r15
    10c2:	21 81       	ldd	r18, Z+1	; 0x01
    10c4:	30 e0       	ldi	r19, 0x00	; 0
    10c6:	ac 01       	movw	r20, r24
    10c8:	55 27       	eor	r21, r21
    10ca:	42 17       	cp	r20, r18
    10cc:	53 07       	cpc	r21, r19
    10ce:	09 f4       	brne	.+2      	; 0x10d2 <Modbus_mster_transaction+0xca2>
    10d0:	3b cf       	rjmp	.-394    	; 0xf48 <Modbus_mster_transaction+0xb18>
    10d2:	83 ee       	ldi	r24, 0xE3	; 227
    10d4:	a7 cf       	rjmp	.-178    	; 0x1024 <Modbus_mster_transaction+0xbf4>
    10d6:	83 ee       	ldi	r24, 0xE3	; 227
    10d8:	a5 cf       	rjmp	.-182    	; 0x1024 <Modbus_mster_transaction+0xbf4>
    10da:	8a 81       	ldd	r24, Y+2	; 0x02
    10dc:	85 30       	cpi	r24, 0x05	; 5
    10de:	38 f4       	brcc	.+14     	; 0x10ee <Modbus_mster_transaction+0xcbe>
    10e0:	83 30       	cpi	r24, 0x03	; 3
    10e2:	08 f0       	brcs	.+2      	; 0x10e6 <Modbus_mster_transaction+0xcb6>
    10e4:	3d cf       	rjmp	.-390    	; 0xf60 <Modbus_mster_transaction+0xb30>
    10e6:	81 30       	cpi	r24, 0x01	; 1
    10e8:	08 f0       	brcs	.+2      	; 0x10ec <Modbus_mster_transaction+0xcbc>
    10ea:	3e cf       	rjmp	.-388    	; 0xf68 <Modbus_mster_transaction+0xb38>
    10ec:	9a cf       	rjmp	.-204    	; 0x1022 <Modbus_mster_transaction+0xbf2>
    10ee:	87 31       	cpi	r24, 0x17	; 23
    10f0:	09 f4       	brne	.+2      	; 0x10f4 <Modbus_mster_transaction+0xcc4>
    10f2:	36 cf       	rjmp	.-404    	; 0xf60 <Modbus_mster_transaction+0xb30>
    10f4:	96 cf       	rjmp	.-212    	; 0x1022 <Modbus_mster_transaction+0xbf2>
    10f6:	60 fd       	sbrc	r22, 0
    10f8:	5f cf       	rjmp	.-322    	; 0xfb8 <Modbus_mster_transaction+0xb88>
    10fa:	80 e0       	ldi	r24, 0x00	; 0
    10fc:	93 cf       	rjmp	.-218    	; 0x1024 <Modbus_mster_transaction+0xbf4>
    10fe:	01 11       	cpse	r16, r1
    1100:	9f cb       	rjmp	.-2242   	; 0x840 <Modbus_mster_transaction+0x410>
    1102:	80 e0       	ldi	r24, 0x00	; 0
    1104:	fe cb       	rjmp	.-2052   	; 0x902 <Modbus_mster_transaction+0x4d2>
    1106:	01 11       	cpse	r16, r1
    1108:	94 ce       	rjmp	.-728    	; 0xe32 <Modbus_mster_transaction+0xa02>
    110a:	80 e0       	ldi	r24, 0x00	; 0
    110c:	f2 ce       	rjmp	.-540    	; 0xef2 <Modbus_mster_transaction+0xac2>
    110e:	80 ee       	ldi	r24, 0xE0	; 224
    1110:	95 cc       	rjmp	.-1750   	; 0xa3c <Modbus_mster_transaction+0x60c>
    1112:	81 ee       	ldi	r24, 0xE1	; 225
    1114:	93 cc       	rjmp	.-1754   	; 0xa3c <Modbus_mster_transaction+0x60c>
    1116:	82 ee       	ldi	r24, 0xE2	; 226
    1118:	91 cc       	rjmp	.-1758   	; 0xa3c <Modbus_mster_transaction+0x60c>
    111a:	80 ee       	ldi	r24, 0xE0	; 224
    111c:	83 cf       	rjmp	.-250    	; 0x1024 <Modbus_mster_transaction+0xbf4>
    111e:	81 ee       	ldi	r24, 0xE1	; 225
    1120:	81 cf       	rjmp	.-254    	; 0x1024 <Modbus_mster_transaction+0xbf4>
    1122:	82 ee       	ldi	r24, 0xE2	; 226
    1124:	7f cf       	rjmp	.-258    	; 0x1024 <Modbus_mster_transaction+0xbf4>
    1126:	d3 95       	inc	r29
    1128:	0f b6       	in	r0, 0x3f	; 63
    112a:	f8 94       	cli
    112c:	de bf       	out	0x3e, r29	; 62
    112e:	0f be       	out	0x3f, r0	; 63
    1130:	cd bf       	out	0x3d, r28	; 61
    1132:	df 91       	pop	r29
    1134:	cf 91       	pop	r28
    1136:	1f 91       	pop	r17
    1138:	0f 91       	pop	r16
    113a:	ff 90       	pop	r15
    113c:	ef 90       	pop	r14
    113e:	df 90       	pop	r13
    1140:	bf 90       	pop	r11
    1142:	af 90       	pop	r10
    1144:	9f 90       	pop	r9
    1146:	8f 90       	pop	r8
    1148:	08 95       	ret

0000114a <Modbus_init>:
    114a:	fb 01       	movw	r30, r22
    114c:	81 11       	cpse	r24, r1
    114e:	89 c0       	rjmp	.+274    	; 0x1262 <Modbus_init+0x118>
    1150:	80 81       	ld	r24, Z
    1152:	80 93 98 05 	sts	0x0598, r24	; 0x800598 <g_mod0_slave>
    1156:	41 81       	ldd	r20, Z+1	; 0x01
    1158:	62 81       	ldd	r22, Z+2	; 0x02
    115a:	73 81       	ldd	r23, Z+3	; 0x03
    115c:	84 81       	ldd	r24, Z+4	; 0x04
    115e:	95 81       	ldd	r25, Z+5	; 0x05
    1160:	26 81       	ldd	r18, Z+6	; 0x06
    1162:	37 81       	ldd	r19, Z+7	; 0x07
    1164:	30 93 8a 04 	sts	0x048A, r19	; 0x80048a <g_mod0_pre_transmission+0x1>
    1168:	20 93 89 04 	sts	0x0489, r18	; 0x800489 <g_mod0_pre_transmission>
    116c:	20 85       	ldd	r18, Z+8	; 0x08
    116e:	31 85       	ldd	r19, Z+9	; 0x09
    1170:	30 93 88 04 	sts	0x0488, r19	; 0x800488 <g_mod0_post_transmission+0x1>
    1174:	20 93 87 04 	sts	0x0487, r18	; 0x800487 <g_mod0_post_transmission>
    1178:	22 85       	ldd	r18, Z+10	; 0x0a
    117a:	33 85       	ldd	r19, Z+11	; 0x0b
    117c:	30 93 8c 04 	sts	0x048C, r19	; 0x80048c <g_mod0_idle+0x1>
    1180:	20 93 8b 04 	sts	0x048B, r18	; 0x80048b <g_mod0_idle>
    1184:	10 92 8e 04 	sts	0x048E, r1	; 0x80048e <g_mod0_response_buffer_index>
    1188:	10 92 8d 04 	sts	0x048D, r1	; 0x80048d <g_mod0_response_buffer_length>
    118c:	41 30       	cpi	r20, 0x01	; 1
    118e:	09 f5       	brne	.+66     	; 0x11d2 <Modbus_init+0x88>
    1190:	20 91 64 03 	lds	r18, 0x0364	; 0x800364 <UART1_used.1996>
    1194:	21 11       	cpse	r18, r1
    1196:	cb c0       	rjmp	.+406    	; 0x132e <Modbus_init+0x1e4>
    1198:	21 e0       	ldi	r18, 0x01	; 1
    119a:	20 93 64 03 	sts	0x0364, r18	; 0x800364 <UART1_used.1996>
    119e:	f5 d6       	rcall	.+3562   	; 0x1f8a <UART1_init>
    11a0:	83 e5       	ldi	r24, 0x53	; 83
    11a2:	90 e1       	ldi	r25, 0x10	; 16
    11a4:	90 93 80 04 	sts	0x0480, r25	; 0x800480 <g_mod0_Serial_available+0x1>
    11a8:	80 93 7f 04 	sts	0x047F, r24	; 0x80047f <g_mod0_Serial_available>
    11ac:	81 e6       	ldi	r24, 0x61	; 97
    11ae:	90 e1       	ldi	r25, 0x10	; 16
    11b0:	90 93 82 04 	sts	0x0482, r25	; 0x800482 <g_mod0_Serial_flush+0x1>
    11b4:	80 93 81 04 	sts	0x0481, r24	; 0x800481 <g_mod0_Serial_flush>
    11b8:	8a e1       	ldi	r24, 0x1A	; 26
    11ba:	90 e1       	ldi	r25, 0x10	; 16
    11bc:	90 93 84 04 	sts	0x0484, r25	; 0x800484 <g_mod0_Serial_getc+0x1>
    11c0:	80 93 83 04 	sts	0x0483, r24	; 0x800483 <g_mod0_Serial_getc>
    11c4:	8a e3       	ldi	r24, 0x3A	; 58
    11c6:	90 e1       	ldi	r25, 0x10	; 16
    11c8:	90 93 86 04 	sts	0x0486, r25	; 0x800486 <g_mod0_Serial_putc+0x1>
    11cc:	80 93 85 04 	sts	0x0485, r24	; 0x800485 <g_mod0_Serial_putc>
    11d0:	08 95       	ret
    11d2:	42 30       	cpi	r20, 0x02	; 2
    11d4:	09 f5       	brne	.+66     	; 0x1218 <Modbus_init+0xce>
    11d6:	20 91 63 03 	lds	r18, 0x0363	; 0x800363 <UART2_used.1997>
    11da:	21 11       	cpse	r18, r1
    11dc:	a8 c0       	rjmp	.+336    	; 0x132e <Modbus_init+0x1e4>
    11de:	21 e0       	ldi	r18, 0x01	; 1
    11e0:	20 93 63 03 	sts	0x0363, r18	; 0x800363 <UART2_used.1997>
    11e4:	e1 d7       	rcall	.+4034   	; 0x21a8 <UART2_init>
    11e6:	8f e5       	ldi	r24, 0x5F	; 95
    11e8:	91 e1       	ldi	r25, 0x11	; 17
    11ea:	90 93 80 04 	sts	0x0480, r25	; 0x800480 <g_mod0_Serial_available+0x1>
    11ee:	80 93 7f 04 	sts	0x047F, r24	; 0x80047f <g_mod0_Serial_available>
    11f2:	8d e6       	ldi	r24, 0x6D	; 109
    11f4:	91 e1       	ldi	r25, 0x11	; 17
    11f6:	90 93 82 04 	sts	0x0482, r25	; 0x800482 <g_mod0_Serial_flush+0x1>
    11fa:	80 93 81 04 	sts	0x0481, r24	; 0x800481 <g_mod0_Serial_flush>
    11fe:	89 e2       	ldi	r24, 0x29	; 41
    1200:	91 e1       	ldi	r25, 0x11	; 17
    1202:	90 93 84 04 	sts	0x0484, r25	; 0x800484 <g_mod0_Serial_getc+0x1>
    1206:	80 93 83 04 	sts	0x0483, r24	; 0x800483 <g_mod0_Serial_getc>
    120a:	86 e4       	ldi	r24, 0x46	; 70
    120c:	91 e1       	ldi	r25, 0x11	; 17
    120e:	90 93 86 04 	sts	0x0486, r25	; 0x800486 <g_mod0_Serial_putc+0x1>
    1212:	80 93 85 04 	sts	0x0485, r24	; 0x800485 <g_mod0_Serial_putc>
    1216:	08 95       	ret
    1218:	43 30       	cpi	r20, 0x03	; 3
    121a:	09 f0       	breq	.+2      	; 0x121e <Modbus_init+0xd4>
    121c:	88 c0       	rjmp	.+272    	; 0x132e <Modbus_init+0x1e4>
    121e:	20 91 62 03 	lds	r18, 0x0362	; 0x800362 <UART3_used.1998>
    1222:	21 11       	cpse	r18, r1
    1224:	84 c0       	rjmp	.+264    	; 0x132e <Modbus_init+0x1e4>
    1226:	21 e0       	ldi	r18, 0x01	; 1
    1228:	20 93 62 03 	sts	0x0362, r18	; 0x800362 <UART3_used.1998>
    122c:	0e 94 e0 11 	call	0x23c0	; 0x23c0 <UART3_init>
    1230:	8b e6       	ldi	r24, 0x6B	; 107
    1232:	92 e1       	ldi	r25, 0x12	; 18
    1234:	90 93 80 04 	sts	0x0480, r25	; 0x800480 <g_mod0_Serial_available+0x1>
    1238:	80 93 7f 04 	sts	0x047F, r24	; 0x80047f <g_mod0_Serial_available>
    123c:	89 e7       	ldi	r24, 0x79	; 121
    123e:	92 e1       	ldi	r25, 0x12	; 18
    1240:	90 93 82 04 	sts	0x0482, r25	; 0x800482 <g_mod0_Serial_flush+0x1>
    1244:	80 93 81 04 	sts	0x0481, r24	; 0x800481 <g_mod0_Serial_flush>
    1248:	85 e3       	ldi	r24, 0x35	; 53
    124a:	92 e1       	ldi	r25, 0x12	; 18
    124c:	90 93 84 04 	sts	0x0484, r25	; 0x800484 <g_mod0_Serial_getc+0x1>
    1250:	80 93 83 04 	sts	0x0483, r24	; 0x800483 <g_mod0_Serial_getc>
    1254:	82 e5       	ldi	r24, 0x52	; 82
    1256:	92 e1       	ldi	r25, 0x12	; 18
    1258:	90 93 86 04 	sts	0x0486, r25	; 0x800486 <g_mod0_Serial_putc+0x1>
    125c:	80 93 85 04 	sts	0x0485, r24	; 0x800485 <g_mod0_Serial_putc>
    1260:	08 95       	ret
    1262:	81 30       	cpi	r24, 0x01	; 1
    1264:	09 f0       	breq	.+2      	; 0x1268 <Modbus_init+0x11e>
    1266:	63 c0       	rjmp	.+198    	; 0x132e <Modbus_init+0x1e4>
    1268:	80 81       	ld	r24, Z
    126a:	80 93 7e 04 	sts	0x047E, r24	; 0x80047e <g_mod1_slave>
    126e:	41 81       	ldd	r20, Z+1	; 0x01
    1270:	62 81       	ldd	r22, Z+2	; 0x02
    1272:	73 81       	ldd	r23, Z+3	; 0x03
    1274:	84 81       	ldd	r24, Z+4	; 0x04
    1276:	95 81       	ldd	r25, Z+5	; 0x05
    1278:	26 81       	ldd	r18, Z+6	; 0x06
    127a:	37 81       	ldd	r19, Z+7	; 0x07
    127c:	30 93 70 03 	sts	0x0370, r19	; 0x800370 <g_mod1_pre_transmission+0x1>
    1280:	20 93 6f 03 	sts	0x036F, r18	; 0x80036f <g_mod1_pre_transmission>
    1284:	20 85       	ldd	r18, Z+8	; 0x08
    1286:	31 85       	ldd	r19, Z+9	; 0x09
    1288:	30 93 6e 03 	sts	0x036E, r19	; 0x80036e <g_mod1_post_transmission+0x1>
    128c:	20 93 6d 03 	sts	0x036D, r18	; 0x80036d <g_mod1_post_transmission>
    1290:	22 85       	ldd	r18, Z+10	; 0x0a
    1292:	33 85       	ldd	r19, Z+11	; 0x0b
    1294:	30 93 72 03 	sts	0x0372, r19	; 0x800372 <g_mod1_idle+0x1>
    1298:	20 93 71 03 	sts	0x0371, r18	; 0x800371 <g_mod1_idle>
    129c:	10 92 74 03 	sts	0x0374, r1	; 0x800374 <g_mod1_response_buffer_index>
    12a0:	10 92 73 03 	sts	0x0373, r1	; 0x800373 <g_mod1_response_buffer_length>
    12a4:	41 30       	cpi	r20, 0x01	; 1
    12a6:	09 f5       	brne	.+66     	; 0x12ea <Modbus_init+0x1a0>
    12a8:	20 91 64 03 	lds	r18, 0x0364	; 0x800364 <UART1_used.1996>
    12ac:	21 11       	cpse	r18, r1
    12ae:	3f c0       	rjmp	.+126    	; 0x132e <Modbus_init+0x1e4>
    12b0:	21 e0       	ldi	r18, 0x01	; 1
    12b2:	20 93 64 03 	sts	0x0364, r18	; 0x800364 <UART1_used.1996>
    12b6:	69 d6       	rcall	.+3282   	; 0x1f8a <UART1_init>
    12b8:	83 e5       	ldi	r24, 0x53	; 83
    12ba:	90 e1       	ldi	r25, 0x10	; 16
    12bc:	90 93 68 03 	sts	0x0368, r25	; 0x800368 <g_mod1_Serial_available+0x1>
    12c0:	80 93 67 03 	sts	0x0367, r24	; 0x800367 <g_mod1_Serial_available>
    12c4:	81 e6       	ldi	r24, 0x61	; 97
    12c6:	90 e1       	ldi	r25, 0x10	; 16
    12c8:	90 93 66 03 	sts	0x0366, r25	; 0x800366 <g_mod1_Serial_flush+0x1>
    12cc:	80 93 65 03 	sts	0x0365, r24	; 0x800365 <g_mod1_Serial_flush>
    12d0:	8a e1       	ldi	r24, 0x1A	; 26
    12d2:	90 e1       	ldi	r25, 0x10	; 16
    12d4:	90 93 6a 03 	sts	0x036A, r25	; 0x80036a <g_mod1_Serial_getc+0x1>
    12d8:	80 93 69 03 	sts	0x0369, r24	; 0x800369 <g_mod1_Serial_getc>
    12dc:	8a e3       	ldi	r24, 0x3A	; 58
    12de:	90 e1       	ldi	r25, 0x10	; 16
    12e0:	90 93 6c 03 	sts	0x036C, r25	; 0x80036c <g_mod1_Serial_putc+0x1>
    12e4:	80 93 6b 03 	sts	0x036B, r24	; 0x80036b <g_mod1_Serial_putc>
    12e8:	08 95       	ret
    12ea:	42 30       	cpi	r20, 0x02	; 2
    12ec:	01 f5       	brne	.+64     	; 0x132e <Modbus_init+0x1e4>
    12ee:	20 91 63 03 	lds	r18, 0x0363	; 0x800363 <UART2_used.1997>
    12f2:	21 11       	cpse	r18, r1
    12f4:	1c c0       	rjmp	.+56     	; 0x132e <Modbus_init+0x1e4>
    12f6:	21 e0       	ldi	r18, 0x01	; 1
    12f8:	20 93 63 03 	sts	0x0363, r18	; 0x800363 <UART2_used.1997>
    12fc:	55 d7       	rcall	.+3754   	; 0x21a8 <UART2_init>
    12fe:	8f e5       	ldi	r24, 0x5F	; 95
    1300:	91 e1       	ldi	r25, 0x11	; 17
    1302:	90 93 68 03 	sts	0x0368, r25	; 0x800368 <g_mod1_Serial_available+0x1>
    1306:	80 93 67 03 	sts	0x0367, r24	; 0x800367 <g_mod1_Serial_available>
    130a:	8d e6       	ldi	r24, 0x6D	; 109
    130c:	91 e1       	ldi	r25, 0x11	; 17
    130e:	90 93 66 03 	sts	0x0366, r25	; 0x800366 <g_mod1_Serial_flush+0x1>
    1312:	80 93 65 03 	sts	0x0365, r24	; 0x800365 <g_mod1_Serial_flush>
    1316:	89 e2       	ldi	r24, 0x29	; 41
    1318:	91 e1       	ldi	r25, 0x11	; 17
    131a:	90 93 6a 03 	sts	0x036A, r25	; 0x80036a <g_mod1_Serial_getc+0x1>
    131e:	80 93 69 03 	sts	0x0369, r24	; 0x800369 <g_mod1_Serial_getc>
    1322:	86 e4       	ldi	r24, 0x46	; 70
    1324:	91 e1       	ldi	r25, 0x11	; 17
    1326:	90 93 6c 03 	sts	0x036C, r25	; 0x80036c <g_mod1_Serial_putc+0x1>
    132a:	80 93 6b 03 	sts	0x036B, r24	; 0x80036b <g_mod1_Serial_putc>
    132e:	08 95       	ret

00001330 <Modbus_Get_response_buffer>:
    1330:	81 11       	cpse	r24, r1
    1332:	0b c0       	rjmp	.+22     	; 0x134a <Modbus_Get_response_buffer+0x1a>
    1334:	60 34       	cpi	r22, 0x40	; 64
    1336:	b0 f4       	brcc	.+44     	; 0x1364 <Modbus_Get_response_buffer+0x34>
    1338:	e6 2f       	mov	r30, r22
    133a:	f0 e0       	ldi	r31, 0x00	; 0
    133c:	ee 0f       	add	r30, r30
    133e:	ff 1f       	adc	r31, r31
    1340:	ec 5e       	subi	r30, 0xEC	; 236
    1342:	fa 4f       	sbci	r31, 0xFA	; 250
    1344:	80 81       	ld	r24, Z
    1346:	91 81       	ldd	r25, Z+1	; 0x01
    1348:	08 95       	ret
    134a:	81 30       	cpi	r24, 0x01	; 1
    134c:	71 f4       	brne	.+28     	; 0x136a <Modbus_Get_response_buffer+0x3a>
    134e:	60 34       	cpi	r22, 0x40	; 64
    1350:	78 f4       	brcc	.+30     	; 0x1370 <Modbus_Get_response_buffer+0x40>
    1352:	e6 2f       	mov	r30, r22
    1354:	f0 e0       	ldi	r31, 0x00	; 0
    1356:	ee 0f       	add	r30, r30
    1358:	ff 1f       	adc	r31, r31
    135a:	e6 50       	subi	r30, 0x06	; 6
    135c:	fc 4f       	sbci	r31, 0xFC	; 252
    135e:	80 81       	ld	r24, Z
    1360:	91 81       	ldd	r25, Z+1	; 0x01
    1362:	08 95       	ret
    1364:	8f ef       	ldi	r24, 0xFF	; 255
    1366:	9f ef       	ldi	r25, 0xFF	; 255
    1368:	08 95       	ret
    136a:	8f ef       	ldi	r24, 0xFF	; 255
    136c:	9f ef       	ldi	r25, 0xFF	; 255
    136e:	08 95       	ret
    1370:	8f ef       	ldi	r24, 0xFF	; 255
    1372:	9f ef       	ldi	r25, 0xFF	; 255
    1374:	08 95       	ret

00001376 <Modbus_Set_transmit_buffer>:
    1376:	81 11       	cpse	r24, r1
    1378:	0b c0       	rjmp	.+22     	; 0x1390 <Modbus_Set_transmit_buffer+0x1a>
    137a:	60 34       	cpi	r22, 0x40	; 64
    137c:	b8 f4       	brcc	.+46     	; 0x13ac <Modbus_Set_transmit_buffer+0x36>
    137e:	e6 2f       	mov	r30, r22
    1380:	f0 e0       	ldi	r31, 0x00	; 0
    1382:	ee 0f       	add	r30, r30
    1384:	ff 1f       	adc	r31, r31
    1386:	e0 57       	subi	r30, 0x70	; 112
    1388:	fb 4f       	sbci	r31, 0xFB	; 251
    138a:	51 83       	std	Z+1, r21	; 0x01
    138c:	40 83       	st	Z, r20
    138e:	08 95       	ret
    1390:	81 30       	cpi	r24, 0x01	; 1
    1392:	71 f4       	brne	.+28     	; 0x13b0 <Modbus_Set_transmit_buffer+0x3a>
    1394:	60 34       	cpi	r22, 0x40	; 64
    1396:	70 f4       	brcc	.+28     	; 0x13b4 <Modbus_Set_transmit_buffer+0x3e>
    1398:	e6 2f       	mov	r30, r22
    139a:	f0 e0       	ldi	r31, 0x00	; 0
    139c:	ee 0f       	add	r30, r30
    139e:	ff 1f       	adc	r31, r31
    13a0:	ea 58       	subi	r30, 0x8A	; 138
    13a2:	fc 4f       	sbci	r31, 0xFC	; 252
    13a4:	51 83       	std	Z+1, r21	; 0x01
    13a6:	40 83       	st	Z, r20
    13a8:	80 e0       	ldi	r24, 0x00	; 0
    13aa:	08 95       	ret
    13ac:	82 e0       	ldi	r24, 0x02	; 2
    13ae:	08 95       	ret
    13b0:	82 e0       	ldi	r24, 0x02	; 2
    13b2:	08 95       	ret
    13b4:	82 e0       	ldi	r24, 0x02	; 2
    13b6:	08 95       	ret

000013b8 <Modbus_Read_holding_registers>:
    13b8:	81 11       	cpse	r24, r1
    13ba:	0b c0       	rjmp	.+22     	; 0x13d2 <Modbus_Read_holding_registers+0x1a>
    13bc:	70 93 97 05 	sts	0x0597, r23	; 0x800597 <g_mod0_read_address+0x1>
    13c0:	60 93 96 05 	sts	0x0596, r22	; 0x800596 <g_mod0_read_address>
    13c4:	50 93 95 05 	sts	0x0595, r21	; 0x800595 <g_mod0_read_qty+0x1>
    13c8:	40 93 94 05 	sts	0x0594, r20	; 0x800594 <g_mod0_read_qty>
    13cc:	63 e0       	ldi	r22, 0x03	; 3
    13ce:	30 c8       	rjmp	.-4000   	; 0x430 <Modbus_mster_transaction>
    13d0:	08 95       	ret
    13d2:	81 30       	cpi	r24, 0x01	; 1
    13d4:	59 f4       	brne	.+22     	; 0x13ec <Modbus_Read_holding_registers+0x34>
    13d6:	70 93 7d 04 	sts	0x047D, r23	; 0x80047d <g_mod1_read_address+0x1>
    13da:	60 93 7c 04 	sts	0x047C, r22	; 0x80047c <g_mod1_read_address>
    13de:	50 93 7b 04 	sts	0x047B, r21	; 0x80047b <g_mod1_read_qty+0x1>
    13e2:	40 93 7a 04 	sts	0x047A, r20	; 0x80047a <g_mod1_read_qty>
    13e6:	63 e0       	ldi	r22, 0x03	; 3
    13e8:	23 c8       	rjmp	.-4026   	; 0x430 <Modbus_mster_transaction>
    13ea:	08 95       	ret
    13ec:	84 ee       	ldi	r24, 0xE4	; 228
    13ee:	08 95       	ret

000013f0 <Modbus_Write_multiple_registers>:
@return 0 on success; exception number on failure
@ingroup register
*/
uint8_t Modbus_Write_multiple_registers(uint8_t device,uint16_t u16WriteAddress, uint16_t u16WriteQty)
{
	if(DEVICE_0 == device){
    13f0:	81 11       	cpse	r24, r1
    13f2:	0b c0       	rjmp	.+22     	; 0x140a <Modbus_Write_multiple_registers+0x1a>
	
		g_mod0_write_address = u16WriteAddress;
    13f4:	70 93 13 05 	sts	0x0513, r23	; 0x800513 <g_mod0_write_address+0x1>
    13f8:	60 93 12 05 	sts	0x0512, r22	; 0x800512 <g_mod0_write_address>
		g_mod0_write_qty = u16WriteQty;
    13fc:	50 93 11 05 	sts	0x0511, r21	; 0x800511 <g_mod0_write_qty+0x1>
    1400:	40 93 10 05 	sts	0x0510, r20	; 0x800510 <g_mod0_write_qty>
		return Modbus_mster_transaction(device, WRITE_MULTIPLE_REGISTERS);
    1404:	60 e1       	ldi	r22, 0x10	; 16
    1406:	14 c8       	rjmp	.-4056   	; 0x430 <Modbus_mster_transaction>
    1408:	08 95       	ret
	}
	else if(DEVICE_1 == device){
    140a:	81 30       	cpi	r24, 0x01	; 1
    140c:	59 f4       	brne	.+22     	; 0x1424 <Modbus_Write_multiple_registers+0x34>
		g_mod1_write_address = u16WriteAddress;
    140e:	70 93 f9 03 	sts	0x03F9, r23	; 0x8003f9 <g_mod1_write_address+0x1>
    1412:	60 93 f8 03 	sts	0x03F8, r22	; 0x8003f8 <g_mod1_write_address>
		g_mod1_write_qty = u16WriteQty;
    1416:	50 93 f7 03 	sts	0x03F7, r21	; 0x8003f7 <g_mod1_write_qty+0x1>
    141a:	40 93 f6 03 	sts	0x03F6, r20	; 0x8003f6 <g_mod1_write_qty>
		return Modbus_mster_transaction(device, WRITE_MULTIPLE_REGISTERS);
    141e:	60 e1       	ldi	r22, 0x10	; 16
    1420:	07 c8       	rjmp	.-4082   	; 0x430 <Modbus_mster_transaction>
    1422:	08 95       	ret
	}
	return  INVALID_DEVICE;
    1424:	84 ee       	ldi	r24, 0xE4	; 228
}
    1426:	08 95       	ret

00001428 <temp_init>:

void temp_init(uint8_t channal)
{
	// initialize the ADC module in order to be able
	// to get reading from the sensor.
	ADC_init(channal);
    1428:	54 c1       	rjmp	.+680    	; 0x16d2 <ADC_init>
    142a:	08 95       	ret

0000142c <temp_read>:
}

uint16_t temp_read(void)
{
    142c:	cf 92       	push	r12
    142e:	df 92       	push	r13
    1430:	ef 92       	push	r14
    1432:	ff 92       	push	r15
    1434:	cf 93       	push	r28
    1436:	cf e0       	ldi	r28, 0x0F	; 15
	// this function returns the temperature sensor reading
	double Temp ,  vout, rt, a = 0.0039083 , r0 =100, y, b = -0.000000577,x ;
	// sum of samples taken
	double sum = 0.0;
    1438:	c1 2c       	mov	r12, r1
    143a:	d1 2c       	mov	r13, r1
    143c:	76 01       	movw	r14, r12
	unsigned char sample_count = 0;

    // read 30 values of ADC and take their average.
 	while (sample_count < 15)
	{
	      uint16_t xx  = ADC_read();
    143e:	6b d1       	rcall	.+726    	; 0x1716 <ADC_read>
	      sum += xx;
    1440:	bc 01       	movw	r22, r24
    1442:	80 e0       	ldi	r24, 0x00	; 0
    1444:	90 e0       	ldi	r25, 0x00	; 0
    1446:	0e 94 67 24 	call	0x48ce	; 0x48ce <__floatunsisf>
    144a:	9b 01       	movw	r18, r22
    144c:	ac 01       	movw	r20, r24
    144e:	c7 01       	movw	r24, r14
    1450:	b6 01       	movw	r22, r12
    1452:	0e 94 6f 23 	call	0x46de	; 0x46de <__addsf3>
    1456:	6b 01       	movw	r12, r22
    1458:	7c 01       	movw	r14, r24
	      sample_count++;
		  vTaskDelay(1/portTICK_PERIOD_MS);
    145a:	80 e0       	ldi	r24, 0x00	; 0
    145c:	90 e0       	ldi	r25, 0x00	; 0
    145e:	0e 94 07 1d 	call	0x3a0e	; 0x3a0e <vTaskDelay>
    1462:	c1 50       	subi	r28, 0x01	; 1
	double sum = 0.0;
	// current sample number
	unsigned char sample_count = 0;

    // read 30 values of ADC and take their average.
 	while (sample_count < 15)
    1464:	61 f7       	brne	.-40     	; 0x143e <temp_read+0x12>
	      sample_count++;
		  vTaskDelay(1/portTICK_PERIOD_MS);
	}
     
    // the average of ADC readings
	 vout = (double)sum / (double)15;
    1466:	20 e0       	ldi	r18, 0x00	; 0
    1468:	30 e0       	ldi	r19, 0x00	; 0
    146a:	40 e7       	ldi	r20, 0x70	; 112
    146c:	51 e4       	ldi	r21, 0x41	; 65
    146e:	c7 01       	movw	r24, r14
    1470:	b6 01       	movw	r22, r12
    1472:	0e 94 d3 23 	call	0x47a6	; 0x47a6 <__divsf3>
	 //UART0_puts("volt :");

     
	 vout  = vout * 2.484;
    1476:	2b ed       	ldi	r18, 0xDB	; 219
    1478:	39 ef       	ldi	r19, 0xF9	; 249
    147a:	4e e1       	ldi	r20, 0x1E	; 30
    147c:	50 e4       	ldi	r21, 0x40	; 64
    147e:	0e 94 f5 24 	call	0x49ea	; 0x49ea <__mulsf3>

	 // some math equations to Get The temperature value from ADC reading.
	 Temp = (-1 * a) ;
	 x =  pow(a,2);
	 y = 4  * b * (1 - (rt/r0));
	 x = x - y;
    1482:	20 e0       	ldi	r18, 0x00	; 0
    1484:	30 e0       	ldi	r19, 0x00	; 0
    1486:	40 e8       	ldi	r20, 0x80	; 128
    1488:	5a e3       	ldi	r21, 0x3A	; 58
    148a:	0e 94 f5 24 	call	0x49ea	; 0x49ea <__mulsf3>
    148e:	20 e0       	ldi	r18, 0x00	; 0
    1490:	30 e0       	ldi	r19, 0x00	; 0
    1492:	4a e7       	ldi	r20, 0x7A	; 122
    1494:	54 e4       	ldi	r21, 0x44	; 68
    1496:	0e 94 f5 24 	call	0x49ea	; 0x49ea <__mulsf3>
    149a:	23 e0       	ldi	r18, 0x03	; 3
    149c:	39 e0       	ldi	r19, 0x09	; 9
    149e:	42 ef       	ldi	r20, 0xF2	; 242
    14a0:	50 e4       	ldi	r21, 0x40	; 64
    14a2:	0e 94 d3 23 	call	0x47a6	; 0x47a6 <__divsf3>
    14a6:	20 e0       	ldi	r18, 0x00	; 0
    14a8:	30 e0       	ldi	r19, 0x00	; 0
    14aa:	48 ec       	ldi	r20, 0xC8	; 200
    14ac:	52 e4       	ldi	r21, 0x42	; 66
    14ae:	0e 94 d3 23 	call	0x47a6	; 0x47a6 <__divsf3>
    14b2:	9b 01       	movw	r18, r22
    14b4:	ac 01       	movw	r20, r24
    14b6:	60 e0       	ldi	r22, 0x00	; 0
    14b8:	70 e0       	ldi	r23, 0x00	; 0
    14ba:	80 e8       	ldi	r24, 0x80	; 128
    14bc:	9f e3       	ldi	r25, 0x3F	; 63
    14be:	0e 94 6e 23 	call	0x46dc	; 0x46dc <__subsf3>
    14c2:	23 e2       	ldi	r18, 0x23	; 35
    14c4:	33 ee       	ldi	r19, 0xE3	; 227
    14c6:	4a e1       	ldi	r20, 0x1A	; 26
    14c8:	56 eb       	ldi	r21, 0xB6	; 182
    14ca:	0e 94 f5 24 	call	0x49ea	; 0x49ea <__mulsf3>
    14ce:	9b 01       	movw	r18, r22
    14d0:	ac 01       	movw	r20, r24
    14d2:	66 e6       	ldi	r22, 0x66	; 102
    14d4:	72 e2       	ldi	r23, 0x22	; 34
    14d6:	80 e8       	ldi	r24, 0x80	; 128
    14d8:	97 e3       	ldi	r25, 0x37	; 55
    14da:	0e 94 6e 23 	call	0x46dc	; 0x46dc <__subsf3>
	 x = pow(x,0.5);
    14de:	20 e0       	ldi	r18, 0x00	; 0
    14e0:	30 e0       	ldi	r19, 0x00	; 0
    14e2:	40 e0       	ldi	r20, 0x00	; 0
    14e4:	5f e3       	ldi	r21, 0x3F	; 63
    14e6:	0e 94 58 25 	call	0x4ab0	; 0x4ab0 <pow>
	 Temp = Temp + x ;
    14ea:	22 e3       	ldi	r18, 0x32	; 50
    14ec:	31 e1       	ldi	r19, 0x11	; 17
    14ee:	40 e8       	ldi	r20, 0x80	; 128
    14f0:	5b e3       	ldi	r21, 0x3B	; 59
    14f2:	0e 94 6e 23 	call	0x46dc	; 0x46dc <__subsf3>
	 Temp /= (2 * b);

	 return round(Temp);
    14f6:	23 e2       	ldi	r18, 0x23	; 35
    14f8:	33 ee       	ldi	r19, 0xE3	; 227
    14fa:	4a e9       	ldi	r20, 0x9A	; 154
    14fc:	55 eb       	ldi	r21, 0xB5	; 181
    14fe:	0e 94 d3 23 	call	0x47a6	; 0x47a6 <__divsf3>
    1502:	0e 94 a4 25 	call	0x4b48	; 0x4b48 <round>
    1506:	0e 94 3b 24 	call	0x4876	; 0x4876 <__fixunssfsi>
}
    150a:	cb 01       	movw	r24, r22
    150c:	cf 91       	pop	r28
    150e:	ff 90       	pop	r15
    1510:	ef 90       	pop	r14
    1512:	df 90       	pop	r13
    1514:	cf 90       	pop	r12
    1516:	08 95       	ret

00001518 <Temperature_over_temp>:
	UART0_puts("Level_sensor_error_callback \n");
}

/******* Over Temp functions for error callbacks **********************************************/
static void Temperature_over_temp(void){
	UART0_puts("Temperature_over_temp \n");
    1518:	84 e1       	ldi	r24, 0x14	; 20
    151a:	92 e0       	ldi	r25, 0x02	; 2
    151c:	ba c4       	rjmp	.+2420   	; 0x1e92 <UART0_puts>
    151e:	08 95       	ret

00001520 <Level_sensor_error_callback>:
	
}

/******* Level sensors functions for error callbacks **********************************************/
static void Level_sensor_error_callback(void){
	UART0_puts("Level_sensor_error_callback \n");
    1520:	8c e2       	ldi	r24, 0x2C	; 44
    1522:	92 e0       	ldi	r25, 0x02	; 2
    1524:	b6 c4       	rjmp	.+2412   	; 0x1e92 <UART0_puts>
    1526:	08 95       	ret

00001528 <LCD_writeTimeout>:
static void LCD_readTimeout(void){
	UART0_puts("LCD_READ_TIMEOUT ---------------------------- \n");
}

static void LCD_writeTimeout(void){
	UART0_puts("LCD_WRITE_TIMEOUT ++++++++++++++++++++++++++++ \n");
    1528:	8a e4       	ldi	r24, 0x4A	; 74
    152a:	92 e0       	ldi	r25, 0x02	; 2
    152c:	b2 c4       	rjmp	.+2404   	; 0x1e92 <UART0_puts>
    152e:	08 95       	ret

00001530 <LCD_readTimeout>:

//debug
#include "MCAL/UART.h"
/******* LCD callback functions for errors callbacks ***********************************************/
static void LCD_readTimeout(void){
	UART0_puts("LCD_READ_TIMEOUT ---------------------------- \n");
    1530:	8b e7       	ldi	r24, 0x7B	; 123
    1532:	92 e0       	ldi	r25, 0x02	; 2
    1534:	ae c4       	rjmp	.+2396   	; 0x1e92 <UART0_puts>
    1536:	08 95       	ret

00001538 <Service_error_init>:
	
}


void Service_error_init(void){
		LCD_main_err_Init(LCD_readTimeout,LCD_writeTimeout);
    1538:	64 e9       	ldi	r22, 0x94	; 148
    153a:	7a e0       	ldi	r23, 0x0A	; 10
    153c:	88 e9       	ldi	r24, 0x98	; 152
    153e:	9a e0       	ldi	r25, 0x0A	; 10
    1540:	0e 94 a4 21 	call	0x4348	; 0x4348 <LCD_main_err_Init>
		Level_main_err_init(Level_sensor_error_callback);
    1544:	80 e9       	ldi	r24, 0x90	; 144
    1546:	9a e0       	ldi	r25, 0x0A	; 10
    1548:	0e 94 5c 22 	call	0x44b8	; 0x44b8 <Level_main_err_init>
		Temp_main_err_init(Temperature_over_temp);
    154c:	8c e8       	ldi	r24, 0x8C	; 140
    154e:	9a e0       	ldi	r25, 0x0A	; 10
    1550:	0c 94 db 22 	jmp	0x45b6	; 0x45b6 <Temp_main_err_init>
    1554:	08 95       	ret

00001556 <vTask4>:
	Temp_main(&x);
}

static void vTask4(void* pvParameters)
{
	UART0_puts("Enter Task4\n");
    1556:	8b ea       	ldi	r24, 0xAB	; 171
    1558:	92 e0       	ldi	r25, 0x02	; 2
    155a:	9b d4       	rcall	.+2358   	; 0x1e92 <UART0_puts>
		while (1)
		{
			UART0_puts("vTask4 Exist\n");
    155c:	88 eb       	ldi	r24, 0xB8	; 184
    155e:	92 e0       	ldi	r25, 0x02	; 2
    1560:	98 d4       	rcall	.+2352   	; 0x1e92 <UART0_puts>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1562:	2f ef       	ldi	r18, 0xFF	; 255
    1564:	83 ed       	ldi	r24, 0xD3	; 211
    1566:	90 e3       	ldi	r25, 0x30	; 48
    1568:	21 50       	subi	r18, 0x01	; 1
    156a:	80 40       	sbci	r24, 0x00	; 0
    156c:	90 40       	sbci	r25, 0x00	; 0
    156e:	e1 f7       	brne	.-8      	; 0x1568 <vTask4+0x12>
    1570:	00 c0       	rjmp	.+0      	; 0x1572 <vTask4+0x1c>
    1572:	00 00       	nop
			_delay_ms(1000);
			vTaskDelay(500/portTICK_PERIOD_MS);
    1574:	8f e1       	ldi	r24, 0x1F	; 31
    1576:	90 e0       	ldi	r25, 0x00	; 0
    1578:	0e 94 07 1d 	call	0x3a0e	; 0x3a0e <vTaskDelay>
    157c:	ef cf       	rjmp	.-34     	; 0x155c <vTask4+0x6>

0000157e <vTask3>:
	LCD_main(&x);
}


static void vTask3(void* pvParameters)
{
    157e:	cf 93       	push	r28
    1580:	df 93       	push	r29
    1582:	1f 92       	push	r1
    1584:	cd b7       	in	r28, 0x3d	; 61
    1586:	de b7       	in	r29, 0x3e	; 62
	char x=0;
    1588:	19 82       	std	Y+1, r1	; 0x01
	UART0_puts("LEVEL Task3 \n");
    158a:	86 ec       	ldi	r24, 0xC6	; 198
    158c:	92 e0       	ldi	r25, 0x02	; 2
    158e:	81 d4       	rcall	.+2306   	; 0x1e92 <UART0_puts>
	Temp_main(&x);
    1590:	ce 01       	movw	r24, r28
    1592:	01 96       	adiw	r24, 0x01	; 1
    1594:	0e 94 e0 22 	call	0x45c0	; 0x45c0 <Temp_main>
}
    1598:	0f 90       	pop	r0
    159a:	df 91       	pop	r29
    159c:	cf 91       	pop	r28
    159e:	08 95       	ret

000015a0 <vTask2>:
	UART0_puts("Level Task1 \n");
	Level_main(&x);

}
static void vTask2(void* pvParameters)
{
    15a0:	cf 93       	push	r28
    15a2:	df 93       	push	r29
    15a4:	1f 92       	push	r1
    15a6:	cd b7       	in	r28, 0x3d	; 61
    15a8:	de b7       	in	r29, 0x3e	; 62
	char x=0;
    15aa:	19 82       	std	Y+1, r1	; 0x01
	LCD_main(&x);
    15ac:	ce 01       	movw	r24, r28
    15ae:	01 96       	adiw	r24, 0x01	; 1
    15b0:	0e 94 ad 21 	call	0x435a	; 0x435a <LCD_main>
}
    15b4:	0f 90       	pop	r0
    15b6:	df 91       	pop	r29
    15b8:	cf 91       	pop	r28
    15ba:	08 95       	ret

000015bc <vTask1>:




static void vTask1(void* pvParameters)
{
    15bc:	cf 93       	push	r28
    15be:	df 93       	push	r29
    15c0:	1f 92       	push	r1
    15c2:	cd b7       	in	r28, 0x3d	; 61
    15c4:	de b7       	in	r29, 0x3e	; 62
	char x=0;
    15c6:	19 82       	std	Y+1, r1	; 0x01
	UART0_puts("Level Task1 \n");
    15c8:	84 ed       	ldi	r24, 0xD4	; 212
    15ca:	92 e0       	ldi	r25, 0x02	; 2
    15cc:	62 d4       	rcall	.+2244   	; 0x1e92 <UART0_puts>
	Level_main(&x);
    15ce:	ce 01       	movw	r24, r28
    15d0:	01 96       	adiw	r24, 0x01	; 1
    15d2:	0e 94 61 22 	call	0x44c2	; 0x44c2 <Level_main>

}
    15d6:	0f 90       	pop	r0
    15d8:	df 91       	pop	r29
    15da:	cf 91       	pop	r28
    15dc:	08 95       	ret

000015de <main>:




int main(void) {
	DDRE = 0xFF;
    15de:	8f ef       	ldi	r24, 0xFF	; 255
    15e0:	8d b9       	out	0x0d, r24	; 13
	UART0_init(9600); //for debug
    15e2:	60 e8       	ldi	r22, 0x80	; 128
    15e4:	75 e2       	ldi	r23, 0x25	; 37
    15e6:	80 e0       	ldi	r24, 0x00	; 0
    15e8:	90 e0       	ldi	r25, 0x00	; 0
    15ea:	c9 d3       	rcall	.+1938   	; 0x1d7e <UART0_init>
    System_init();
    15ec:	0e 94 01 23 	call	0x4602	; 0x4602 <System_init>
	Tank_operation_init();
    15f0:	0e 94 d2 22 	call	0x45a4	; 0x45a4 <Tank_operation_init>
	//Lcd_init(UART3,115200,1);
	UART0_puts("HELLO \n");
    15f4:	82 ee       	ldi	r24, 0xE2	; 226
    15f6:	92 e0       	ldi	r25, 0x02	; 2
    15f8:	4c d4       	rcall	.+2200   	; 0x1e92 <UART0_puts>
// // Inverter_change_state(0);
//    _delay_ms(3000);
// }
	//Temp_main_init();
	/* Create the task without using any dynamic memory allocation. */
	xHandle1 = xTaskCreateStatic( //print LCD data from RTE lowest priority
    15fa:	0f 2e       	mov	r0, r31
    15fc:	ff ea       	ldi	r31, 0xAF	; 175
    15fe:	cf 2e       	mov	r12, r31
    1600:	fe e0       	ldi	r31, 0x0E	; 14
    1602:	df 2e       	mov	r13, r31
    1604:	f0 2d       	mov	r31, r0
    1606:	0f 2e       	mov	r0, r31
    1608:	f2 e0       	ldi	r31, 0x02	; 2
    160a:	ef 2e       	mov	r14, r31
    160c:	f1 e1       	ldi	r31, 0x11	; 17
    160e:	ff 2e       	mov	r15, r31
    1610:	f0 2d       	mov	r31, r0
    1612:	02 e0       	ldi	r16, 0x02	; 2
    1614:	20 e0       	ldi	r18, 0x00	; 0
    1616:	30 e0       	ldi	r19, 0x00	; 0
    1618:	44 ef       	ldi	r20, 0xF4	; 244
    161a:	51 e0       	ldi	r21, 0x01	; 1
    161c:	6a ee       	ldi	r22, 0xEA	; 234
    161e:	72 e0       	ldi	r23, 0x02	; 2
    1620:	8e ed       	ldi	r24, 0xDE	; 222
    1622:	9a e0       	ldi	r25, 0x0A	; 10
    1624:	0e 94 86 1a 	call	0x350c	; 0x350c <xTaskCreateStatic>
    1628:	90 93 a0 05 	sts	0x05A0, r25	; 0x8005a0 <xHandle1+0x1>
    162c:	80 93 9f 05 	sts	0x059F, r24	; 0x80059f <xHandle1>
					NULL, /* Parameter passed into the task. */
					2,/* Priority at which the task is created. */
					xStack1, /* Array to use as the task's stack. */
					&xTask1Buffer); /* Variable to hold the task's data structure. */
	
	xHandle2 = xTaskCreateStatic( //LCD highest priority
    1630:	0f 2e       	mov	r0, r31
    1632:	f9 ed       	ldi	r31, 0xD9	; 217
    1634:	cf 2e       	mov	r12, r31
    1636:	fe e0       	ldi	r31, 0x0E	; 14
    1638:	df 2e       	mov	r13, r31
    163a:	f0 2d       	mov	r31, r0
    163c:	0f 2e       	mov	r0, r31
    163e:	f0 e2       	ldi	r31, 0x20	; 32
    1640:	ef 2e       	mov	r14, r31
    1642:	f3 e1       	ldi	r31, 0x13	; 19
    1644:	ff 2e       	mov	r15, r31
    1646:	f0 2d       	mov	r31, r0
    1648:	20 e0       	ldi	r18, 0x00	; 0
    164a:	30 e0       	ldi	r19, 0x00	; 0
    164c:	44 ef       	ldi	r20, 0xF4	; 244
    164e:	51 e0       	ldi	r21, 0x01	; 1
    1650:	60 ef       	ldi	r22, 0xF0	; 240
    1652:	72 e0       	ldi	r23, 0x02	; 2
    1654:	80 ed       	ldi	r24, 0xD0	; 208
    1656:	9a e0       	ldi	r25, 0x0A	; 10
    1658:	0e 94 86 1a 	call	0x350c	; 0x350c <xTaskCreateStatic>
    165c:	90 93 9e 05 	sts	0x059E, r25	; 0x80059e <xHandle2+0x1>
    1660:	80 93 9d 05 	sts	0x059D, r24	; 0x80059d <xHandle2>
				NULL, /* Parameter passed into the task. */
				2,/* Priority at which the task is created. */
				xStack2, /* Array to use as the task's stack. */
				&xTask2Buffer); /* Variable to hold the task's data structure. */
				
	xHandle3 = xTaskCreateStatic( //temp mid priority
    1664:	0f 2e       	mov	r0, r31
    1666:	f6 ef       	ldi	r31, 0xF6	; 246
    1668:	cf 2e       	mov	r12, r31
    166a:	f2 e1       	ldi	r31, 0x12	; 18
    166c:	df 2e       	mov	r13, r31
    166e:	f0 2d       	mov	r31, r0
    1670:	0f 2e       	mov	r0, r31
    1672:	fb e1       	ldi	r31, 0x1B	; 27
    1674:	ef 2e       	mov	r14, r31
    1676:	f5 e1       	ldi	r31, 0x15	; 21
    1678:	ff 2e       	mov	r15, r31
    167a:	f0 2d       	mov	r31, r0
    167c:	20 e0       	ldi	r18, 0x00	; 0
    167e:	30 e0       	ldi	r19, 0x00	; 0
    1680:	44 ef       	ldi	r20, 0xF4	; 244
    1682:	51 e0       	ldi	r21, 0x01	; 1
    1684:	66 ef       	ldi	r22, 0xF6	; 246
    1686:	72 e0       	ldi	r23, 0x02	; 2
    1688:	8f eb       	ldi	r24, 0xBF	; 191
    168a:	9a e0       	ldi	r25, 0x0A	; 10
    168c:	0e 94 86 1a 	call	0x350c	; 0x350c <xTaskCreateStatic>
    1690:	90 93 9c 05 	sts	0x059C, r25	; 0x80059c <xHandle3+0x1>
    1694:	80 93 9b 05 	sts	0x059B, r24	; 0x80059b <xHandle3>
				NULL, /* Parameter passed into the task. */
				2,/* Priority at which the task is created. */
				xStack3, /* Array to use as the task's stack. */
				&xTask3Buffer); /* Variable to hold the task's data structure. */
	
	xHandle4 = xTaskCreateStatic(
    1698:	0f 2e       	mov	r0, r31
    169a:	f5 e8       	ldi	r31, 0x85	; 133
    169c:	cf 2e       	mov	r12, r31
    169e:	fe e0       	ldi	r31, 0x0E	; 14
    16a0:	df 2e       	mov	r13, r31
    16a2:	f0 2d       	mov	r31, r0
    16a4:	0f 2e       	mov	r0, r31
    16a6:	fe e0       	ldi	r31, 0x0E	; 14
    16a8:	ef 2e       	mov	r14, r31
    16aa:	ff e0       	ldi	r31, 0x0F	; 15
    16ac:	ff 2e       	mov	r15, r31
    16ae:	f0 2d       	mov	r31, r0
    16b0:	20 e0       	ldi	r18, 0x00	; 0
    16b2:	30 e0       	ldi	r19, 0x00	; 0
    16b4:	44 ef       	ldi	r20, 0xF4	; 244
    16b6:	51 e0       	ldi	r21, 0x01	; 1
    16b8:	6c ef       	ldi	r22, 0xFC	; 252
    16ba:	72 e0       	ldi	r23, 0x02	; 2
    16bc:	8b ea       	ldi	r24, 0xAB	; 171
    16be:	9a e0       	ldi	r25, 0x0A	; 10
    16c0:	0e 94 86 1a 	call	0x350c	; 0x350c <xTaskCreateStatic>
    16c4:	90 93 9a 05 	sts	0x059A, r25	; 0x80059a <xHandle4+0x1>
    16c8:	80 93 99 05 	sts	0x0599, r24	; 0x800599 <xHandle4>
// 		
// 	}
	

	  // Start scheduler.
	  vTaskStartScheduler();
    16cc:	0e 94 7f 1b 	call	0x36fe	; 0x36fe <vTaskStartScheduler>
    16d0:	ff cf       	rjmp	.-2      	; 0x16d0 <main+0xf2>

000016d2 <ADC_init>:
	 * this function configure ADC module and
	 * you  pass the channel you work with from 0 to 7
	 */

   // make the ADC pin as input.
  CLR_BIT(ADC_DIRECTION_REG ,channel );
    16d2:	90 b3       	in	r25, 0x10	; 16
    16d4:	21 e0       	ldi	r18, 0x01	; 1
    16d6:	30 e0       	ldi	r19, 0x00	; 0
    16d8:	08 2e       	mov	r0, r24
    16da:	02 c0       	rjmp	.+4      	; 0x16e0 <ADC_init+0xe>
    16dc:	22 0f       	add	r18, r18
    16de:	33 1f       	adc	r19, r19
    16e0:	0a 94       	dec	r0
    16e2:	e2 f7       	brpl	.-8      	; 0x16dc <ADC_init+0xa>
    16e4:	20 95       	com	r18
    16e6:	29 23       	and	r18, r25
    16e8:	20 bb       	out	0x10, r18	; 16
  //   external ref .
  CLR_HIGH_NIBBLE(ADC_MULTIPLEXER_SELECTION_REG);
    16ea:	ec e7       	ldi	r30, 0x7C	; 124
    16ec:	f0 e0       	ldi	r31, 0x00	; 0
    16ee:	90 81       	ld	r25, Z
    16f0:	9f 70       	andi	r25, 0x0F	; 15
    16f2:	90 83       	st	Z, r25
  //   operated channel ( channel ) .
  PUT_VAL_LOW_NIBBLE(ADC_MULTIPLEXER_SELECTION_REG , channel);
    16f4:	90 81       	ld	r25, Z
    16f6:	90 7f       	andi	r25, 0xF0	; 240
    16f8:	90 83       	st	Z, r25
    16fa:	8f 70       	andi	r24, 0x0F	; 15
    16fc:	98 2b       	or	r25, r24
    16fe:	90 83       	st	Z, r25
  //  enable ADC  & enable interrupt && ps / 128.
  PUT_VAL_reg(ADC_CONTROL_STATUS_A_REG , 0x8f);
    1700:	8f e8       	ldi	r24, 0x8F	; 143
    1702:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>

  // enable global interrupt.
  sei();
    1706:	78 94       	sei
    1708:	08 95       	ret

0000170a <ADC_enable_reading>:
}

void ADC_enable_reading(void)
{
	// restart the conversion .
	SET_BIT(ADC_CONTROL_STATUS_A_REG , ADC_START_CONVERSION_bit);
    170a:	ea e7       	ldi	r30, 0x7A	; 122
    170c:	f0 e0       	ldi	r31, 0x00	; 0
    170e:	80 81       	ld	r24, Z
    1710:	80 64       	ori	r24, 0x40	; 64
    1712:	80 83       	st	Z, r24
    1714:	08 95       	ret

00001716 <ADC_read>:
}

uint16_t ADC_read(void)
{
	// re-start the conversion .
	ADC_enable_reading();
    1716:	f9 df       	rcall	.-14     	; 0x170a <ADC_enable_reading>
	static uint16_t returned_data;
	g_converted = 0 ;
    1718:	10 92 a1 05 	sts	0x05A1, r1	; 0x8005a1 <g_converted>
    171c:	80 ec       	ldi	r24, 0xC0	; 192
    171e:	92 e1       	ldi	r25, 0x12	; 18
    1720:	01 97       	sbiw	r24, 0x01	; 1
	// the conversion takes about 260 us so we will wait 4800 ticks till it ends .
	uint16_t time_out = 4800 ;
	while(!g_converted && 0 != time_out ){time_out --; }
    1722:	f1 f7       	brne	.-4      	; 0x1720 <ADC_read+0xa>
	returned_data = g_analog_data ;
    1724:	80 91 a2 05 	lds	r24, 0x05A2	; 0x8005a2 <g_analog_data>
    1728:	90 91 a3 05 	lds	r25, 0x05A3	; 0x8005a3 <g_analog_data+0x1>
		return returned_data ;
}
    172c:	08 95       	ret

0000172e <__vector_29>:


ISR(ADC_vect)
{
    172e:	1f 92       	push	r1
    1730:	0f 92       	push	r0
    1732:	0f b6       	in	r0, 0x3f	; 63
    1734:	0f 92       	push	r0
    1736:	11 24       	eor	r1, r1
    1738:	2f 93       	push	r18
    173a:	8f 93       	push	r24
    173c:	9f 93       	push	r25
	   uint8_t The_low_adc_reg = ADC_DATA_REG_LOW ;
    173e:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
	  // get 10 bits out of the high and low register .
	  g_analog_data =  The_low_adc_reg | (ADC_DATA_REG_HIGH <<8);
    1742:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
    1746:	90 e0       	ldi	r25, 0x00	; 0
    1748:	92 2b       	or	r25, r18
    174a:	90 93 a3 05 	sts	0x05A3, r25	; 0x8005a3 <g_analog_data+0x1>
    174e:	80 93 a2 05 	sts	0x05A2, r24	; 0x8005a2 <g_analog_data>
	//  UART0_OutUDec(g_analog_data);
	 // UART0_putc('\n');
	  g_converted = 1 ;
    1752:	81 e0       	ldi	r24, 0x01	; 1
    1754:	80 93 a1 05 	sts	0x05A1, r24	; 0x8005a1 <g_converted>
}
    1758:	9f 91       	pop	r25
    175a:	8f 91       	pop	r24
    175c:	2f 91       	pop	r18
    175e:	0f 90       	pop	r0
    1760:	0f be       	out	0x3f, r0	; 63
    1762:	0f 90       	pop	r0
    1764:	1f 90       	pop	r1
    1766:	18 95       	reti

00001768 <DIO_init>:
void Spark_change_state(uint8_t state)
{
	if (HIGH == state)
		SET_BIT(SPARK_DATA_REG , SPARK_PIN);
	else if(LOW == state)
		CLR_BIT(SPARK_DATA_REG , SPARK_PIN);
    1768:	ea e0       	ldi	r30, 0x0A	; 10
    176a:	f1 e0       	ldi	r31, 0x01	; 1
    176c:	80 81       	ld	r24, Z
    176e:	8f 7e       	andi	r24, 0xEF	; 239
    1770:	80 83       	st	Z, r24
    1772:	80 81       	ld	r24, Z
    1774:	8f 7d       	andi	r24, 0xDF	; 223
    1776:	80 83       	st	Z, r24
    1778:	80 81       	ld	r24, Z
    177a:	8f 7b       	andi	r24, 0xBF	; 191
    177c:	80 83       	st	Z, r24
    177e:	53 98       	cbi	0x0a, 3	; 10
    1780:	20 98       	cbi	0x04, 0	; 4
    1782:	3a 98       	cbi	0x07, 2	; 7
    1784:	54 98       	cbi	0x0a, 4	; 10
    1786:	3c 9a       	sbi	0x07, 4	; 7
    1788:	3f 9a       	sbi	0x07, 7	; 7
    178a:	3d 9a       	sbi	0x07, 5	; 7
    178c:	39 9a       	sbi	0x07, 1	; 7
    178e:	39 9a       	sbi	0x07, 1	; 7
    1790:	57 9a       	sbi	0x0a, 7	; 10
    1792:	38 9a       	sbi	0x07, 0	; 7
    1794:	38 98       	cbi	0x07, 0	; 7
    1796:	56 9a       	sbi	0x0a, 6	; 10
    1798:	3b 9a       	sbi	0x07, 3	; 7
    179a:	e4 e0       	ldi	r30, 0x04	; 4
    179c:	f1 e0       	ldi	r31, 0x01	; 1
    179e:	80 81       	ld	r24, Z
    17a0:	84 60       	ori	r24, 0x04	; 4
    17a2:	80 83       	st	Z, r24
    17a4:	54 9a       	sbi	0x0a, 4	; 10
    17a6:	3f 9a       	sbi	0x07, 7	; 7
    17a8:	3f 9a       	sbi	0x07, 7	; 7
    17aa:	e1 e0       	ldi	r30, 0x01	; 1
    17ac:	f1 e0       	ldi	r31, 0x01	; 1
    17ae:	80 81       	ld	r24, Z
    17b0:	8e 7f       	andi	r24, 0xFE	; 254
    17b2:	80 83       	st	Z, r24
    17b4:	80 81       	ld	r24, Z
    17b6:	82 60       	ori	r24, 0x02	; 2
    17b8:	80 83       	st	Z, r24
    17ba:	e2 e0       	ldi	r30, 0x02	; 2
    17bc:	f1 e0       	ldi	r31, 0x01	; 1
    17be:	80 81       	ld	r24, Z
    17c0:	81 60       	ori	r24, 0x01	; 1
    17c2:	80 83       	st	Z, r24
    17c4:	52 98       	cbi	0x0a, 2	; 10
    17c6:	53 9a       	sbi	0x0a, 3	; 10
    17c8:	5a 9a       	sbi	0x0b, 2	; 11
    17ca:	08 95       	ret

000017cc <Get_tank_level_state>:
    17cc:	81 30       	cpi	r24, 0x01	; 1
    17ce:	39 f4       	brne	.+14     	; 0x17de <Get_tank_level_state+0x12>
    17d0:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x700109>
    17d4:	82 95       	swap	r24
    17d6:	81 70       	andi	r24, 0x01	; 1
    17d8:	91 e0       	ldi	r25, 0x01	; 1
    17da:	89 27       	eor	r24, r25
    17dc:	08 95       	ret
    17de:	82 30       	cpi	r24, 0x02	; 2
    17e0:	41 f4       	brne	.+16     	; 0x17f2 <Get_tank_level_state+0x26>
    17e2:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x700109>
    17e6:	85 fb       	bst	r24, 5
    17e8:	99 27       	eor	r25, r25
    17ea:	90 f9       	bld	r25, 0
    17ec:	81 e0       	ldi	r24, 0x01	; 1
    17ee:	89 27       	eor	r24, r25
    17f0:	08 95       	ret
    17f2:	83 30       	cpi	r24, 0x03	; 3
    17f4:	41 f4       	brne	.+16     	; 0x1806 <Get_tank_level_state+0x3a>
    17f6:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x700109>
    17fa:	86 fb       	bst	r24, 6
    17fc:	99 27       	eor	r25, r25
    17fe:	90 f9       	bld	r25, 0
    1800:	81 e0       	ldi	r24, 0x01	; 1
    1802:	89 27       	eor	r24, r25
    1804:	08 95       	ret
    1806:	8f ef       	ldi	r24, 0xFF	; 255
    1808:	08 95       	ret

0000180a <Get_blancher_level_state>:
    180a:	89 b1       	in	r24, 0x09	; 9
    180c:	83 fb       	bst	r24, 3
    180e:	88 27       	eor	r24, r24
    1810:	80 f9       	bld	r24, 0
    1812:	08 95       	ret

00001814 <Modbus_change_state>:

//_________ MODE BUS initialize and enable______________________//

void Modbus_change_state(uint8_t device ,uint8_t state){
	
	switch (device){
    1814:	88 23       	and	r24, r24
    1816:	19 f0       	breq	.+6      	; 0x181e <Modbus_change_state+0xa>
    1818:	81 30       	cpi	r24, 0x01	; 1
    181a:	89 f0       	breq	.+34     	; 0x183e <Modbus_change_state+0x2a>
    181c:	08 95       	ret
		case DEVICE_0:
		 	if (HIGH == state)
    181e:	61 30       	cpi	r22, 0x01	; 1
    1820:	31 f4       	brne	.+12     	; 0x182e <Modbus_change_state+0x1a>
		 		SET_BIT(DEVICE_0_MODBUS_DATA_REG , DEVICE_0_MODBUS_PIN);
    1822:	e5 e0       	ldi	r30, 0x05	; 5
    1824:	f1 e0       	ldi	r31, 0x01	; 1
    1826:	80 81       	ld	r24, Z
    1828:	84 60       	ori	r24, 0x04	; 4
    182a:	80 83       	st	Z, r24
    182c:	08 95       	ret
		 	else if(LOW == state)
    182e:	61 11       	cpse	r22, r1
    1830:	0d c0       	rjmp	.+26     	; 0x184c <Modbus_change_state+0x38>
		 		CLR_BIT(DEVICE_0_MODBUS_DATA_REG , DEVICE_0_MODBUS_PIN);
    1832:	e5 e0       	ldi	r30, 0x05	; 5
    1834:	f1 e0       	ldi	r31, 0x01	; 1
    1836:	80 81       	ld	r24, Z
    1838:	8b 7f       	andi	r24, 0xFB	; 251
    183a:	80 83       	st	Z, r24
    183c:	08 95       	ret
			
			break;
		case DEVICE_1:
		     if (HIGH == state)
    183e:	61 30       	cpi	r22, 0x01	; 1
    1840:	11 f4       	brne	.+4      	; 0x1846 <Modbus_change_state+0x32>
		         SET_BIT(DEVICE_1_MODBUS_DATA_REG , DEVICE_1_MODBUS_PIN);
    1842:	5c 9a       	sbi	0x0b, 4	; 11
    1844:	08 95       	ret
		     else if(LOW == state)
    1846:	61 11       	cpse	r22, r1
    1848:	01 c0       	rjmp	.+2      	; 0x184c <Modbus_change_state+0x38>
		         CLR_BIT(DEVICE_1_MODBUS_DATA_REG , DEVICE_1_MODBUS_PIN);
    184a:	5c 98       	cbi	0x0b, 4	; 11
    184c:	08 95       	ret

0000184e <timers_init>:
 * set_up the timer and interrupt config and
 * parameters timer_ config struct contain all info about Timer
 * return 1 if the function setup OK -1 if not
 */
uint8_t timers_init(g_Timer_Config *config)
{
    184e:	fc 01       	movw	r30, r24
	//millis_init(); //start this timer to get the time between ticks

	// choose the timer number depend on the config timer_number
	if(config->timer_number == 1){
    1850:	94 81       	ldd	r25, Z+4	; 0x04
    1852:	91 30       	cpi	r25, 0x01	; 1
    1854:	b1 f4       	brne	.+44     	; 0x1882 <timers_init+0x34>

		// off all the modes of  first config register on timer
		TIMER1_CONGFIG_A = 0X00;
    1856:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
		// External counter on T1 and set the Top vale is OCRnA
		TIMER1_CONGFIG_B = 0x0E;
    185a:	8e e0       	ldi	r24, 0x0E	; 14
    185c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
		// number of Encoder Tick for Each interrupt
		TIMER1_COMPARE = config->ticks - 1;
    1860:	80 81       	ld	r24, Z
    1862:	91 81       	ldd	r25, Z+1	; 0x01
    1864:	01 97       	sbiw	r24, 0x01	; 1
    1866:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
    186a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
		// Enable interrupt Bit on the timer Mask
		SET_BIT(TIMER1_INTERUPT, TIMER1_COMPARE_INT);
    186e:	af e6       	ldi	r26, 0x6F	; 111
    1870:	b0 e0       	ldi	r27, 0x00	; 0
    1872:	8c 91       	ld	r24, X
    1874:	82 60       	ori	r24, 0x02	; 2
    1876:	8c 93       	st	X, r24
		// copy the config parameter to Timer stuct
		g_timer1_config = config;
    1878:	f0 93 14 17 	sts	0x1714, r31	; 0x801714 <g_timer1_config+0x1>
    187c:	e0 93 13 17 	sts	0x1713, r30	; 0x801713 <g_timer1_config>
    1880:	49 c0       	rjmp	.+146    	; 0x1914 <timers_init+0xc6>
		// set the time before get ticks ISR time
		//g_Timer1_old_time = Get_millis();
	}// timer_number = 1

	else if(config->timer_number == 3)
    1882:	93 30       	cpi	r25, 0x03	; 3
    1884:	b1 f4       	brne	.+44     	; 0x18b2 <timers_init+0x64>
	{
		// off all the modes of  first config register on timer
		TIMER3_CONGFIG_A = 0X00;
    1886:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
		//External counter on T1 and set the Top vale is OCRnA
		TIMER3_CONGFIG_B = 0x0E;
    188a:	8e e0       	ldi	r24, 0x0E	; 14
    188c:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>
		// number of Encoder Tick for Each interrupt
		TIMER3_COMPARE = config->ticks - 1;
    1890:	80 81       	ld	r24, Z
    1892:	91 81       	ldd	r25, Z+1	; 0x01
    1894:	01 97       	sbiw	r24, 0x01	; 1
    1896:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
    189a:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>
		// Enable interrupt Bit on the timer Mask
		SET_BIT(TIMER3_INTERUPT, TIMER3_COMPARE_INT);
    189e:	a1 e7       	ldi	r26, 0x71	; 113
    18a0:	b0 e0       	ldi	r27, 0x00	; 0
    18a2:	8c 91       	ld	r24, X
    18a4:	82 60       	ori	r24, 0x02	; 2
    18a6:	8c 93       	st	X, r24
		// copy the config parameter to Timer stuct
		g_timer3_config = config;
    18a8:	f0 93 10 17 	sts	0x1710, r31	; 0x801710 <g_timer3_config+0x1>
    18ac:	e0 93 0f 17 	sts	0x170F, r30	; 0x80170f <g_timer3_config>
    18b0:	31 c0       	rjmp	.+98     	; 0x1914 <timers_init+0xc6>
		// set the time before get ticks ISR time
		//g_Timer3_old_time = Get_millis();
	}//timer_number = 3
	else if(config->timer_number == 4){
    18b2:	94 30       	cpi	r25, 0x04	; 4
    18b4:	b1 f4       	brne	.+44     	; 0x18e2 <timers_init+0x94>
		// off all the modes of  first config register on timer
		TIMER4_CONGFIG_A = 0X00;
    18b6:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
		// External counter on T1 and set the Top vale is OCRnA
		TIMER4_CONGFIG_B = 0x0E;
    18ba:	8e e0       	ldi	r24, 0x0E	; 14
    18bc:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>
		// number of Encoder Tick for Each interrupt
		TIMER4_COMPARE = config->ticks - 1;
    18c0:	80 81       	ld	r24, Z
    18c2:	91 81       	ldd	r25, Z+1	; 0x01
    18c4:	01 97       	sbiw	r24, 0x01	; 1
    18c6:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
    18ca:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
		// Enable interrupt Bit on the timer Mask
		SET_BIT(TIMER5_INTERUPT, TIMER5_COMPARE_INT);
    18ce:	a3 e7       	ldi	r26, 0x73	; 115
    18d0:	b0 e0       	ldi	r27, 0x00	; 0
    18d2:	8c 91       	ld	r24, X
    18d4:	82 60       	ori	r24, 0x02	; 2
    18d6:	8c 93       	st	X, r24
		// copy the config parameter to Timer stuct
		g_timer4_config = config;
    18d8:	f0 93 12 17 	sts	0x1712, r31	; 0x801712 <g_timer4_config+0x1>
    18dc:	e0 93 11 17 	sts	0x1711, r30	; 0x801711 <g_timer4_config>
    18e0:	19 c0       	rjmp	.+50     	; 0x1914 <timers_init+0xc6>
		// set the time before get ticks ISR time
		//g_Timer4_old_time = Get_millis();
	}//timer_number = 4

	else if(config->timer_number == 5){
    18e2:	95 30       	cpi	r25, 0x05	; 5
    18e4:	d1 f4       	brne	.+52     	; 0x191a <timers_init+0xcc>
		// off all the modes of  first config register on timer
		TIMER5_CONGFIG_A = 0X00;
    18e6:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
		//  External counter on T1 and set the Top vale is OCRnA
		TIMER5_CONGFIG_B = 0x0E;
    18ea:	8e e0       	ldi	r24, 0x0E	; 14
    18ec:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <__TEXT_REGION_LENGTH__+0x700121>
		//number of Encoder Tick for Each interrupt
		TIMER5_COMPARE = config->ticks - 1;
    18f0:	80 81       	ld	r24, Z
    18f2:	91 81       	ldd	r25, Z+1	; 0x01
    18f4:	01 97       	sbiw	r24, 0x01	; 1
    18f6:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
    18fa:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
		// Enable interrupt Bit on the timer Mask
		SET_BIT(TIMER5_INTERUPT, TIMER5_COMPARE_INT);
    18fe:	a3 e7       	ldi	r26, 0x73	; 115
    1900:	b0 e0       	ldi	r27, 0x00	; 0
    1902:	8c 91       	ld	r24, X
    1904:	82 60       	ori	r24, 0x02	; 2
    1906:	8c 93       	st	X, r24
		// copy the config parameter to Timer struct
		g_timer5_config = config;
    1908:	f0 93 16 17 	sts	0x1716, r31	; 0x801716 <g_timer5_config+0x1>
    190c:	e0 93 15 17 	sts	0x1715, r30	; 0x801715 <g_timer5_config>
		// set the time before get ticks ISR time
		//g_Timer5_old_time = Get_millis();
		//Clear the counter number
		TIMER5_COUNT_L = 0;
    1910:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <__TEXT_REGION_LENGTH__+0x700124>
	{
		//Error the timer number not valid
		return -1;
	}// Else

    sei();
    1914:	78 94       	sei
    return 1;// Setup done ok
    1916:	81 e0       	ldi	r24, 0x01	; 1
    1918:	08 95       	ret
	}//timer_number = 5

	else
	{
		//Error the timer number not valid
		return -1;
    191a:	8f ef       	ldi	r24, 0xFF	; 255
	}// Else

    sei();
    return 1;// Setup done ok
}//timer_init
    191c:	08 95       	ret

0000191e <__vector_17>:

// interrupted service routine when we have reach the number of  Ticks On Encoder
ISR(TIMER1_COMPA_vect)
{
    191e:	1f 92       	push	r1
    1920:	0f 92       	push	r0
    1922:	0f b6       	in	r0, 0x3f	; 63
    1924:	0f 92       	push	r0
    1926:	11 24       	eor	r1, r1
    1928:	0b b6       	in	r0, 0x3b	; 59
    192a:	0f 92       	push	r0
    192c:	2f 93       	push	r18
    192e:	3f 93       	push	r19
    1930:	4f 93       	push	r20
    1932:	5f 93       	push	r21
    1934:	6f 93       	push	r22
    1936:	7f 93       	push	r23
    1938:	8f 93       	push	r24
    193a:	9f 93       	push	r25
    193c:	af 93       	push	r26
    193e:	bf 93       	push	r27
    1940:	ef 93       	push	r30
    1942:	ff 93       	push	r31
    1944:	cf 93       	push	r28
    1946:	df 93       	push	r29
    1948:	00 d0       	rcall	.+0      	; 0x194a <__vector_17+0x2c>
    194a:	1f 92       	push	r1
    194c:	cd b7       	in	r28, 0x3d	; 61
    194e:	de b7       	in	r29, 0x3e	; 62
	volatile uint32_t diff_time;      // to save the different between new time and old time
	volatile static uint32_t s_Timer1_old_time;
	volatile static uint32_t s_Timer1_new_time;
	// get the time now
	s_Timer1_new_time = Get_millis();
    1950:	0e 94 3e 23 	call	0x467c	; 0x467c <Get_millis>
    1954:	60 93 c0 05 	sts	0x05C0, r22	; 0x8005c0 <s_Timer1_new_time.1769>
    1958:	70 93 c1 05 	sts	0x05C1, r23	; 0x8005c1 <s_Timer1_new_time.1769+0x1>
    195c:	80 93 c2 05 	sts	0x05C2, r24	; 0x8005c2 <s_Timer1_new_time.1769+0x2>
    1960:	90 93 c3 05 	sts	0x05C3, r25	; 0x8005c3 <s_Timer1_new_time.1769+0x3>
	// calculate the diff between now and last interrupt
	diff_time = s_Timer1_new_time - s_Timer1_old_time;
    1964:	80 91 c0 05 	lds	r24, 0x05C0	; 0x8005c0 <s_Timer1_new_time.1769>
    1968:	90 91 c1 05 	lds	r25, 0x05C1	; 0x8005c1 <s_Timer1_new_time.1769+0x1>
    196c:	a0 91 c2 05 	lds	r26, 0x05C2	; 0x8005c2 <s_Timer1_new_time.1769+0x2>
    1970:	b0 91 c3 05 	lds	r27, 0x05C3	; 0x8005c3 <s_Timer1_new_time.1769+0x3>
    1974:	40 91 bc 05 	lds	r20, 0x05BC	; 0x8005bc <s_Timer1_old_time.1768>
    1978:	50 91 bd 05 	lds	r21, 0x05BD	; 0x8005bd <s_Timer1_old_time.1768+0x1>
    197c:	60 91 be 05 	lds	r22, 0x05BE	; 0x8005be <s_Timer1_old_time.1768+0x2>
    1980:	70 91 bf 05 	lds	r23, 0x05BF	; 0x8005bf <s_Timer1_old_time.1768+0x3>
    1984:	84 1b       	sub	r24, r20
    1986:	95 0b       	sbc	r25, r21
    1988:	a6 0b       	sbc	r26, r22
    198a:	b7 0b       	sbc	r27, r23
    198c:	89 83       	std	Y+1, r24	; 0x01
    198e:	9a 83       	std	Y+2, r25	; 0x02
    1990:	ab 83       	std	Y+3, r26	; 0x03
    1992:	bc 83       	std	Y+4, r27	; 0x04
	// save the to the old time to next interrupt
	s_Timer1_old_time = s_Timer1_new_time;
    1994:	80 91 c0 05 	lds	r24, 0x05C0	; 0x8005c0 <s_Timer1_new_time.1769>
    1998:	90 91 c1 05 	lds	r25, 0x05C1	; 0x8005c1 <s_Timer1_new_time.1769+0x1>
    199c:	a0 91 c2 05 	lds	r26, 0x05C2	; 0x8005c2 <s_Timer1_new_time.1769+0x2>
    19a0:	b0 91 c3 05 	lds	r27, 0x05C3	; 0x8005c3 <s_Timer1_new_time.1769+0x3>
    19a4:	80 93 bc 05 	sts	0x05BC, r24	; 0x8005bc <s_Timer1_old_time.1768>
    19a8:	90 93 bd 05 	sts	0x05BD, r25	; 0x8005bd <s_Timer1_old_time.1768+0x1>
    19ac:	a0 93 be 05 	sts	0x05BE, r26	; 0x8005be <s_Timer1_old_time.1768+0x2>
    19b0:	b0 93 bf 05 	sts	0x05BF, r27	; 0x8005bf <s_Timer1_old_time.1768+0x3>
	//call back function on upper layer to get time
	g_timer1_config->isr_call_back(diff_time);
    19b4:	69 81       	ldd	r22, Y+1	; 0x01
    19b6:	7a 81       	ldd	r23, Y+2	; 0x02
    19b8:	8b 81       	ldd	r24, Y+3	; 0x03
    19ba:	9c 81       	ldd	r25, Y+4	; 0x04
    19bc:	e0 91 13 17 	lds	r30, 0x1713	; 0x801713 <g_timer1_config>
    19c0:	f0 91 14 17 	lds	r31, 0x1714	; 0x801714 <g_timer1_config+0x1>
    19c4:	02 80       	ldd	r0, Z+2	; 0x02
    19c6:	f3 81       	ldd	r31, Z+3	; 0x03
    19c8:	e0 2d       	mov	r30, r0
    19ca:	19 95       	eicall
}
    19cc:	0f 90       	pop	r0
    19ce:	0f 90       	pop	r0
    19d0:	0f 90       	pop	r0
    19d2:	0f 90       	pop	r0
    19d4:	df 91       	pop	r29
    19d6:	cf 91       	pop	r28
    19d8:	ff 91       	pop	r31
    19da:	ef 91       	pop	r30
    19dc:	bf 91       	pop	r27
    19de:	af 91       	pop	r26
    19e0:	9f 91       	pop	r25
    19e2:	8f 91       	pop	r24
    19e4:	7f 91       	pop	r23
    19e6:	6f 91       	pop	r22
    19e8:	5f 91       	pop	r21
    19ea:	4f 91       	pop	r20
    19ec:	3f 91       	pop	r19
    19ee:	2f 91       	pop	r18
    19f0:	0f 90       	pop	r0
    19f2:	0b be       	out	0x3b, r0	; 59
    19f4:	0f 90       	pop	r0
    19f6:	0f be       	out	0x3f, r0	; 63
    19f8:	0f 90       	pop	r0
    19fa:	1f 90       	pop	r1
    19fc:	18 95       	reti

000019fe <__vector_32>:
// interrupted service routine when we have reach the number of  Ticks On Encoder
ISR(TIMER3_COMPA_vect)
{
    19fe:	1f 92       	push	r1
    1a00:	0f 92       	push	r0
    1a02:	0f b6       	in	r0, 0x3f	; 63
    1a04:	0f 92       	push	r0
    1a06:	11 24       	eor	r1, r1
    1a08:	0b b6       	in	r0, 0x3b	; 59
    1a0a:	0f 92       	push	r0
    1a0c:	2f 93       	push	r18
    1a0e:	3f 93       	push	r19
    1a10:	4f 93       	push	r20
    1a12:	5f 93       	push	r21
    1a14:	6f 93       	push	r22
    1a16:	7f 93       	push	r23
    1a18:	8f 93       	push	r24
    1a1a:	9f 93       	push	r25
    1a1c:	af 93       	push	r26
    1a1e:	bf 93       	push	r27
    1a20:	ef 93       	push	r30
    1a22:	ff 93       	push	r31
    1a24:	cf 93       	push	r28
    1a26:	df 93       	push	r29
    1a28:	00 d0       	rcall	.+0      	; 0x1a2a <__vector_32+0x2c>
    1a2a:	1f 92       	push	r1
    1a2c:	cd b7       	in	r28, 0x3d	; 61
    1a2e:	de b7       	in	r29, 0x3e	; 62
	volatile uint32_t diff_time;      // to save the different between new time and old time
	volatile static uint32_t s_Timer3_old_time;
	volatile static uint32_t s_Timer3_new_time;
	// get the time now
	s_Timer3_new_time = Get_millis();
    1a30:	0e 94 3e 23 	call	0x467c	; 0x467c <Get_millis>
    1a34:	60 93 b8 05 	sts	0x05B8, r22	; 0x8005b8 <s_Timer3_new_time.1777>
    1a38:	70 93 b9 05 	sts	0x05B9, r23	; 0x8005b9 <s_Timer3_new_time.1777+0x1>
    1a3c:	80 93 ba 05 	sts	0x05BA, r24	; 0x8005ba <s_Timer3_new_time.1777+0x2>
    1a40:	90 93 bb 05 	sts	0x05BB, r25	; 0x8005bb <s_Timer3_new_time.1777+0x3>
	// calculate the diff between now and last interrupt
	diff_time = s_Timer3_new_time - s_Timer3_old_time;
    1a44:	80 91 b8 05 	lds	r24, 0x05B8	; 0x8005b8 <s_Timer3_new_time.1777>
    1a48:	90 91 b9 05 	lds	r25, 0x05B9	; 0x8005b9 <s_Timer3_new_time.1777+0x1>
    1a4c:	a0 91 ba 05 	lds	r26, 0x05BA	; 0x8005ba <s_Timer3_new_time.1777+0x2>
    1a50:	b0 91 bb 05 	lds	r27, 0x05BB	; 0x8005bb <s_Timer3_new_time.1777+0x3>
    1a54:	40 91 b4 05 	lds	r20, 0x05B4	; 0x8005b4 <s_Timer3_old_time.1776>
    1a58:	50 91 b5 05 	lds	r21, 0x05B5	; 0x8005b5 <s_Timer3_old_time.1776+0x1>
    1a5c:	60 91 b6 05 	lds	r22, 0x05B6	; 0x8005b6 <s_Timer3_old_time.1776+0x2>
    1a60:	70 91 b7 05 	lds	r23, 0x05B7	; 0x8005b7 <s_Timer3_old_time.1776+0x3>
    1a64:	84 1b       	sub	r24, r20
    1a66:	95 0b       	sbc	r25, r21
    1a68:	a6 0b       	sbc	r26, r22
    1a6a:	b7 0b       	sbc	r27, r23
    1a6c:	89 83       	std	Y+1, r24	; 0x01
    1a6e:	9a 83       	std	Y+2, r25	; 0x02
    1a70:	ab 83       	std	Y+3, r26	; 0x03
    1a72:	bc 83       	std	Y+4, r27	; 0x04
	// save the to the old time to next interrupt
	s_Timer3_old_time = s_Timer3_new_time;
    1a74:	80 91 b8 05 	lds	r24, 0x05B8	; 0x8005b8 <s_Timer3_new_time.1777>
    1a78:	90 91 b9 05 	lds	r25, 0x05B9	; 0x8005b9 <s_Timer3_new_time.1777+0x1>
    1a7c:	a0 91 ba 05 	lds	r26, 0x05BA	; 0x8005ba <s_Timer3_new_time.1777+0x2>
    1a80:	b0 91 bb 05 	lds	r27, 0x05BB	; 0x8005bb <s_Timer3_new_time.1777+0x3>
    1a84:	80 93 b4 05 	sts	0x05B4, r24	; 0x8005b4 <s_Timer3_old_time.1776>
    1a88:	90 93 b5 05 	sts	0x05B5, r25	; 0x8005b5 <s_Timer3_old_time.1776+0x1>
    1a8c:	a0 93 b6 05 	sts	0x05B6, r26	; 0x8005b6 <s_Timer3_old_time.1776+0x2>
    1a90:	b0 93 b7 05 	sts	0x05B7, r27	; 0x8005b7 <s_Timer3_old_time.1776+0x3>
	//call back function on upper layer to get time
	g_timer3_config->isr_call_back(diff_time);
    1a94:	69 81       	ldd	r22, Y+1	; 0x01
    1a96:	7a 81       	ldd	r23, Y+2	; 0x02
    1a98:	8b 81       	ldd	r24, Y+3	; 0x03
    1a9a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a9c:	e0 91 0f 17 	lds	r30, 0x170F	; 0x80170f <g_timer3_config>
    1aa0:	f0 91 10 17 	lds	r31, 0x1710	; 0x801710 <g_timer3_config+0x1>
    1aa4:	02 80       	ldd	r0, Z+2	; 0x02
    1aa6:	f3 81       	ldd	r31, Z+3	; 0x03
    1aa8:	e0 2d       	mov	r30, r0
    1aaa:	19 95       	eicall
}
    1aac:	0f 90       	pop	r0
    1aae:	0f 90       	pop	r0
    1ab0:	0f 90       	pop	r0
    1ab2:	0f 90       	pop	r0
    1ab4:	df 91       	pop	r29
    1ab6:	cf 91       	pop	r28
    1ab8:	ff 91       	pop	r31
    1aba:	ef 91       	pop	r30
    1abc:	bf 91       	pop	r27
    1abe:	af 91       	pop	r26
    1ac0:	9f 91       	pop	r25
    1ac2:	8f 91       	pop	r24
    1ac4:	7f 91       	pop	r23
    1ac6:	6f 91       	pop	r22
    1ac8:	5f 91       	pop	r21
    1aca:	4f 91       	pop	r20
    1acc:	3f 91       	pop	r19
    1ace:	2f 91       	pop	r18
    1ad0:	0f 90       	pop	r0
    1ad2:	0b be       	out	0x3b, r0	; 59
    1ad4:	0f 90       	pop	r0
    1ad6:	0f be       	out	0x3f, r0	; 63
    1ad8:	0f 90       	pop	r0
    1ada:	1f 90       	pop	r1
    1adc:	18 95       	reti

00001ade <__vector_42>:
// interrupted service routine when we have reach the number of  Ticks On Encoder
ISR(TIMER4_COMPA_vect)
{
    1ade:	1f 92       	push	r1
    1ae0:	0f 92       	push	r0
    1ae2:	0f b6       	in	r0, 0x3f	; 63
    1ae4:	0f 92       	push	r0
    1ae6:	11 24       	eor	r1, r1
    1ae8:	0b b6       	in	r0, 0x3b	; 59
    1aea:	0f 92       	push	r0
    1aec:	2f 93       	push	r18
    1aee:	3f 93       	push	r19
    1af0:	4f 93       	push	r20
    1af2:	5f 93       	push	r21
    1af4:	6f 93       	push	r22
    1af6:	7f 93       	push	r23
    1af8:	8f 93       	push	r24
    1afa:	9f 93       	push	r25
    1afc:	af 93       	push	r26
    1afe:	bf 93       	push	r27
    1b00:	ef 93       	push	r30
    1b02:	ff 93       	push	r31
    1b04:	cf 93       	push	r28
    1b06:	df 93       	push	r29
    1b08:	00 d0       	rcall	.+0      	; 0x1b0a <__vector_42+0x2c>
    1b0a:	1f 92       	push	r1
    1b0c:	cd b7       	in	r28, 0x3d	; 61
    1b0e:	de b7       	in	r29, 0x3e	; 62
	volatile uint32_t diff_time;      // to save the different between new time and old time
	volatile static uint32_t s_Timer4_old_time;
	volatile static uint32_t s_Timer4_new_time;
	// get the time now
	s_Timer4_new_time = Get_millis();
    1b10:	0e 94 3e 23 	call	0x467c	; 0x467c <Get_millis>
    1b14:	60 93 b0 05 	sts	0x05B0, r22	; 0x8005b0 <s_Timer4_new_time.1785>
    1b18:	70 93 b1 05 	sts	0x05B1, r23	; 0x8005b1 <s_Timer4_new_time.1785+0x1>
    1b1c:	80 93 b2 05 	sts	0x05B2, r24	; 0x8005b2 <s_Timer4_new_time.1785+0x2>
    1b20:	90 93 b3 05 	sts	0x05B3, r25	; 0x8005b3 <s_Timer4_new_time.1785+0x3>
	// calculate the diff between now and last interrupt
	diff_time = s_Timer4_new_time - s_Timer4_old_time;
    1b24:	80 91 b0 05 	lds	r24, 0x05B0	; 0x8005b0 <s_Timer4_new_time.1785>
    1b28:	90 91 b1 05 	lds	r25, 0x05B1	; 0x8005b1 <s_Timer4_new_time.1785+0x1>
    1b2c:	a0 91 b2 05 	lds	r26, 0x05B2	; 0x8005b2 <s_Timer4_new_time.1785+0x2>
    1b30:	b0 91 b3 05 	lds	r27, 0x05B3	; 0x8005b3 <s_Timer4_new_time.1785+0x3>
    1b34:	40 91 ac 05 	lds	r20, 0x05AC	; 0x8005ac <s_Timer4_old_time.1784>
    1b38:	50 91 ad 05 	lds	r21, 0x05AD	; 0x8005ad <s_Timer4_old_time.1784+0x1>
    1b3c:	60 91 ae 05 	lds	r22, 0x05AE	; 0x8005ae <s_Timer4_old_time.1784+0x2>
    1b40:	70 91 af 05 	lds	r23, 0x05AF	; 0x8005af <s_Timer4_old_time.1784+0x3>
    1b44:	84 1b       	sub	r24, r20
    1b46:	95 0b       	sbc	r25, r21
    1b48:	a6 0b       	sbc	r26, r22
    1b4a:	b7 0b       	sbc	r27, r23
    1b4c:	89 83       	std	Y+1, r24	; 0x01
    1b4e:	9a 83       	std	Y+2, r25	; 0x02
    1b50:	ab 83       	std	Y+3, r26	; 0x03
    1b52:	bc 83       	std	Y+4, r27	; 0x04
	// save the to the old time to next interrupt
	s_Timer4_old_time = s_Timer4_new_time;
    1b54:	80 91 b0 05 	lds	r24, 0x05B0	; 0x8005b0 <s_Timer4_new_time.1785>
    1b58:	90 91 b1 05 	lds	r25, 0x05B1	; 0x8005b1 <s_Timer4_new_time.1785+0x1>
    1b5c:	a0 91 b2 05 	lds	r26, 0x05B2	; 0x8005b2 <s_Timer4_new_time.1785+0x2>
    1b60:	b0 91 b3 05 	lds	r27, 0x05B3	; 0x8005b3 <s_Timer4_new_time.1785+0x3>
    1b64:	80 93 ac 05 	sts	0x05AC, r24	; 0x8005ac <s_Timer4_old_time.1784>
    1b68:	90 93 ad 05 	sts	0x05AD, r25	; 0x8005ad <s_Timer4_old_time.1784+0x1>
    1b6c:	a0 93 ae 05 	sts	0x05AE, r26	; 0x8005ae <s_Timer4_old_time.1784+0x2>
    1b70:	b0 93 af 05 	sts	0x05AF, r27	; 0x8005af <s_Timer4_old_time.1784+0x3>
	//call back function on upper layer to get time
	g_timer4_config->isr_call_back(diff_time);
    1b74:	69 81       	ldd	r22, Y+1	; 0x01
    1b76:	7a 81       	ldd	r23, Y+2	; 0x02
    1b78:	8b 81       	ldd	r24, Y+3	; 0x03
    1b7a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b7c:	e0 91 11 17 	lds	r30, 0x1711	; 0x801711 <g_timer4_config>
    1b80:	f0 91 12 17 	lds	r31, 0x1712	; 0x801712 <g_timer4_config+0x1>
    1b84:	02 80       	ldd	r0, Z+2	; 0x02
    1b86:	f3 81       	ldd	r31, Z+3	; 0x03
    1b88:	e0 2d       	mov	r30, r0
    1b8a:	19 95       	eicall
}
    1b8c:	0f 90       	pop	r0
    1b8e:	0f 90       	pop	r0
    1b90:	0f 90       	pop	r0
    1b92:	0f 90       	pop	r0
    1b94:	df 91       	pop	r29
    1b96:	cf 91       	pop	r28
    1b98:	ff 91       	pop	r31
    1b9a:	ef 91       	pop	r30
    1b9c:	bf 91       	pop	r27
    1b9e:	af 91       	pop	r26
    1ba0:	9f 91       	pop	r25
    1ba2:	8f 91       	pop	r24
    1ba4:	7f 91       	pop	r23
    1ba6:	6f 91       	pop	r22
    1ba8:	5f 91       	pop	r21
    1baa:	4f 91       	pop	r20
    1bac:	3f 91       	pop	r19
    1bae:	2f 91       	pop	r18
    1bb0:	0f 90       	pop	r0
    1bb2:	0b be       	out	0x3b, r0	; 59
    1bb4:	0f 90       	pop	r0
    1bb6:	0f be       	out	0x3f, r0	; 63
    1bb8:	0f 90       	pop	r0
    1bba:	1f 90       	pop	r1
    1bbc:	18 95       	reti

00001bbe <__vector_47>:
// interrupted service routine when we have reach the number of  Ticks On Encoder
ISR(TIMER5_COMPA_vect)
{
    1bbe:	1f 92       	push	r1
    1bc0:	0f 92       	push	r0
    1bc2:	0f b6       	in	r0, 0x3f	; 63
    1bc4:	0f 92       	push	r0
    1bc6:	11 24       	eor	r1, r1
    1bc8:	0b b6       	in	r0, 0x3b	; 59
    1bca:	0f 92       	push	r0
    1bcc:	2f 93       	push	r18
    1bce:	3f 93       	push	r19
    1bd0:	4f 93       	push	r20
    1bd2:	5f 93       	push	r21
    1bd4:	6f 93       	push	r22
    1bd6:	7f 93       	push	r23
    1bd8:	8f 93       	push	r24
    1bda:	9f 93       	push	r25
    1bdc:	af 93       	push	r26
    1bde:	bf 93       	push	r27
    1be0:	ef 93       	push	r30
    1be2:	ff 93       	push	r31
    1be4:	cf 93       	push	r28
    1be6:	df 93       	push	r29
    1be8:	00 d0       	rcall	.+0      	; 0x1bea <__vector_47+0x2c>
    1bea:	1f 92       	push	r1
    1bec:	cd b7       	in	r28, 0x3d	; 61
    1bee:	de b7       	in	r29, 0x3e	; 62
	volatile uint32_t diff_time;      // to save the different between new time and old time
	volatile static uint32_t s_Timer5_old_time;
	volatile static uint32_t s_Timer5_new_time;
	//TOG_BIT(PORTB,0);
	// get the time now
	s_Timer5_new_time = Get_millis();
    1bf0:	0e 94 3e 23 	call	0x467c	; 0x467c <Get_millis>
    1bf4:	60 93 a8 05 	sts	0x05A8, r22	; 0x8005a8 <s_Timer5_new_time.1793>
    1bf8:	70 93 a9 05 	sts	0x05A9, r23	; 0x8005a9 <s_Timer5_new_time.1793+0x1>
    1bfc:	80 93 aa 05 	sts	0x05AA, r24	; 0x8005aa <s_Timer5_new_time.1793+0x2>
    1c00:	90 93 ab 05 	sts	0x05AB, r25	; 0x8005ab <s_Timer5_new_time.1793+0x3>
	// calculate the difference between now and last interrupt
	diff_time = s_Timer5_new_time - s_Timer5_old_time;
    1c04:	80 91 a8 05 	lds	r24, 0x05A8	; 0x8005a8 <s_Timer5_new_time.1793>
    1c08:	90 91 a9 05 	lds	r25, 0x05A9	; 0x8005a9 <s_Timer5_new_time.1793+0x1>
    1c0c:	a0 91 aa 05 	lds	r26, 0x05AA	; 0x8005aa <s_Timer5_new_time.1793+0x2>
    1c10:	b0 91 ab 05 	lds	r27, 0x05AB	; 0x8005ab <s_Timer5_new_time.1793+0x3>
    1c14:	40 91 a4 05 	lds	r20, 0x05A4	; 0x8005a4 <s_Timer5_old_time.1792>
    1c18:	50 91 a5 05 	lds	r21, 0x05A5	; 0x8005a5 <s_Timer5_old_time.1792+0x1>
    1c1c:	60 91 a6 05 	lds	r22, 0x05A6	; 0x8005a6 <s_Timer5_old_time.1792+0x2>
    1c20:	70 91 a7 05 	lds	r23, 0x05A7	; 0x8005a7 <s_Timer5_old_time.1792+0x3>
    1c24:	84 1b       	sub	r24, r20
    1c26:	95 0b       	sbc	r25, r21
    1c28:	a6 0b       	sbc	r26, r22
    1c2a:	b7 0b       	sbc	r27, r23
    1c2c:	89 83       	std	Y+1, r24	; 0x01
    1c2e:	9a 83       	std	Y+2, r25	; 0x02
    1c30:	ab 83       	std	Y+3, r26	; 0x03
    1c32:	bc 83       	std	Y+4, r27	; 0x04
	// save the to the old time to next interrupt
	s_Timer5_old_time = s_Timer5_new_time;
    1c34:	80 91 a8 05 	lds	r24, 0x05A8	; 0x8005a8 <s_Timer5_new_time.1793>
    1c38:	90 91 a9 05 	lds	r25, 0x05A9	; 0x8005a9 <s_Timer5_new_time.1793+0x1>
    1c3c:	a0 91 aa 05 	lds	r26, 0x05AA	; 0x8005aa <s_Timer5_new_time.1793+0x2>
    1c40:	b0 91 ab 05 	lds	r27, 0x05AB	; 0x8005ab <s_Timer5_new_time.1793+0x3>
    1c44:	80 93 a4 05 	sts	0x05A4, r24	; 0x8005a4 <s_Timer5_old_time.1792>
    1c48:	90 93 a5 05 	sts	0x05A5, r25	; 0x8005a5 <s_Timer5_old_time.1792+0x1>
    1c4c:	a0 93 a6 05 	sts	0x05A6, r26	; 0x8005a6 <s_Timer5_old_time.1792+0x2>
    1c50:	b0 93 a7 05 	sts	0x05A7, r27	; 0x8005a7 <s_Timer5_old_time.1792+0x3>
	// clear the counter
	TIMER5_COUNT_L = 0;
    1c54:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <__TEXT_REGION_LENGTH__+0x700124>
	//call back function on upper layer to get time
	g_timer5_config->isr_call_back(diff_time);
    1c58:	69 81       	ldd	r22, Y+1	; 0x01
    1c5a:	7a 81       	ldd	r23, Y+2	; 0x02
    1c5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c5e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c60:	e0 91 15 17 	lds	r30, 0x1715	; 0x801715 <g_timer5_config>
    1c64:	f0 91 16 17 	lds	r31, 0x1716	; 0x801716 <g_timer5_config+0x1>
    1c68:	02 80       	ldd	r0, Z+2	; 0x02
    1c6a:	f3 81       	ldd	r31, Z+3	; 0x03
    1c6c:	e0 2d       	mov	r30, r0
    1c6e:	19 95       	eicall
	
}
    1c70:	0f 90       	pop	r0
    1c72:	0f 90       	pop	r0
    1c74:	0f 90       	pop	r0
    1c76:	0f 90       	pop	r0
    1c78:	df 91       	pop	r29
    1c7a:	cf 91       	pop	r28
    1c7c:	ff 91       	pop	r31
    1c7e:	ef 91       	pop	r30
    1c80:	bf 91       	pop	r27
    1c82:	af 91       	pop	r26
    1c84:	9f 91       	pop	r25
    1c86:	8f 91       	pop	r24
    1c88:	7f 91       	pop	r23
    1c8a:	6f 91       	pop	r22
    1c8c:	5f 91       	pop	r21
    1c8e:	4f 91       	pop	r20
    1c90:	3f 91       	pop	r19
    1c92:	2f 91       	pop	r18
    1c94:	0f 90       	pop	r0
    1c96:	0b be       	out	0x3b, r0	; 59
    1c98:	0f 90       	pop	r0
    1c9a:	0f be       	out	0x3f, r0	; 63
    1c9c:	0f 90       	pop	r0
    1c9e:	1f 90       	pop	r1
    1ca0:	18 95       	reti

00001ca2 <__vector_25>:

	while ((c = pgm_read_byte(progmem_s++))) {
		UART3_putc(c);
	}

} /* UART3_puts_p */
    1ca2:	1f 92       	push	r1
    1ca4:	0f 92       	push	r0
    1ca6:	0f b6       	in	r0, 0x3f	; 63
    1ca8:	0f 92       	push	r0
    1caa:	11 24       	eor	r1, r1
    1cac:	0b b6       	in	r0, 0x3b	; 59
    1cae:	0f 92       	push	r0
    1cb0:	2f 93       	push	r18
    1cb2:	3f 93       	push	r19
    1cb4:	4f 93       	push	r20
    1cb6:	5f 93       	push	r21
    1cb8:	8f 93       	push	r24
    1cba:	9f 93       	push	r25
    1cbc:	ef 93       	push	r30
    1cbe:	ff 93       	push	r31
    1cc0:	20 91 c0 00 	lds	r18, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
    1cc4:	30 91 c6 00 	lds	r19, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    1cc8:	28 71       	andi	r18, 0x18	; 24
    1cca:	80 91 d9 08 	lds	r24, 0x08D9	; 0x8008d9 <UART_RxHead>
    1cce:	90 e0       	ldi	r25, 0x00	; 0
    1cd0:	01 96       	adiw	r24, 0x01	; 1
    1cd2:	8f 77       	andi	r24, 0x7F	; 127
    1cd4:	99 27       	eor	r25, r25
    1cd6:	40 91 d8 08 	lds	r20, 0x08D8	; 0x8008d8 <UART_RxTail>
    1cda:	50 e0       	ldi	r21, 0x00	; 0
    1cdc:	84 17       	cp	r24, r20
    1cde:	95 07       	cpc	r25, r21
    1ce0:	39 f0       	breq	.+14     	; 0x1cf0 <__vector_25+0x4e>
    1ce2:	80 93 d9 08 	sts	0x08D9, r24	; 0x8008d9 <UART_RxHead>
    1ce6:	fc 01       	movw	r30, r24
    1ce8:	e4 52       	subi	r30, 0x24	; 36
    1cea:	f7 4f       	sbci	r31, 0xF7	; 247
    1cec:	30 83       	st	Z, r19
    1cee:	01 c0       	rjmp	.+2      	; 0x1cf2 <__vector_25+0x50>
    1cf0:	22 e0       	ldi	r18, 0x02	; 2
    1cf2:	20 93 d7 08 	sts	0x08D7, r18	; 0x8008d7 <UART_LastRxError>
    1cf6:	ff 91       	pop	r31
    1cf8:	ef 91       	pop	r30
    1cfa:	9f 91       	pop	r25
    1cfc:	8f 91       	pop	r24
    1cfe:	5f 91       	pop	r21
    1d00:	4f 91       	pop	r20
    1d02:	3f 91       	pop	r19
    1d04:	2f 91       	pop	r18
    1d06:	0f 90       	pop	r0
    1d08:	0b be       	out	0x3b, r0	; 59
    1d0a:	0f 90       	pop	r0
    1d0c:	0f be       	out	0x3f, r0	; 63
    1d0e:	0f 90       	pop	r0
    1d10:	1f 90       	pop	r1
    1d12:	18 95       	reti

00001d14 <__vector_26>:
    1d14:	1f 92       	push	r1
    1d16:	0f 92       	push	r0
    1d18:	0f b6       	in	r0, 0x3f	; 63
    1d1a:	0f 92       	push	r0
    1d1c:	11 24       	eor	r1, r1
    1d1e:	0b b6       	in	r0, 0x3b	; 59
    1d20:	0f 92       	push	r0
    1d22:	8f 93       	push	r24
    1d24:	9f 93       	push	r25
    1d26:	ef 93       	push	r30
    1d28:	ff 93       	push	r31
    1d2a:	90 91 db 08 	lds	r25, 0x08DB	; 0x8008db <UART_TxHead>
    1d2e:	80 91 da 08 	lds	r24, 0x08DA	; 0x8008da <UART_TxTail>
    1d32:	98 17       	cp	r25, r24
    1d34:	89 f0       	breq	.+34     	; 0x1d58 <__vector_26+0x44>
    1d36:	80 91 da 08 	lds	r24, 0x08DA	; 0x8008da <UART_TxTail>
    1d3a:	90 e0       	ldi	r25, 0x00	; 0
    1d3c:	01 96       	adiw	r24, 0x01	; 1
    1d3e:	8f 77       	andi	r24, 0x7F	; 127
    1d40:	99 27       	eor	r25, r25
    1d42:	80 93 da 08 	sts	0x08DA, r24	; 0x8008da <UART_TxTail>
    1d46:	fc 01       	movw	r30, r24
    1d48:	e4 5a       	subi	r30, 0xA4	; 164
    1d4a:	f6 4f       	sbci	r31, 0xF6	; 246
    1d4c:	80 81       	ld	r24, Z
    1d4e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    1d52:	10 92 c7 05 	sts	0x05C7, r1	; 0x8005c7 <UART0_Transmission_end>
    1d56:	08 c0       	rjmp	.+16     	; 0x1d68 <__vector_26+0x54>
    1d58:	e1 ec       	ldi	r30, 0xC1	; 193
    1d5a:	f0 e0       	ldi	r31, 0x00	; 0
    1d5c:	80 81       	ld	r24, Z
    1d5e:	8f 7d       	andi	r24, 0xDF	; 223
    1d60:	80 83       	st	Z, r24
    1d62:	81 e0       	ldi	r24, 0x01	; 1
    1d64:	80 93 c7 05 	sts	0x05C7, r24	; 0x8005c7 <UART0_Transmission_end>
    1d68:	ff 91       	pop	r31
    1d6a:	ef 91       	pop	r30
    1d6c:	9f 91       	pop	r25
    1d6e:	8f 91       	pop	r24
    1d70:	0f 90       	pop	r0
    1d72:	0b be       	out	0x3b, r0	; 59
    1d74:	0f 90       	pop	r0
    1d76:	0f be       	out	0x3f, r0	; 63
    1d78:	0f 90       	pop	r0
    1d7a:	1f 90       	pop	r1
    1d7c:	18 95       	reti

00001d7e <UART0_init>:
    1d7e:	0f 93       	push	r16
    1d80:	1f 93       	push	r17
    1d82:	8b 01       	movw	r16, r22
    1d84:	9c 01       	movw	r18, r24
    1d86:	f8 94       	cli
    1d88:	10 92 db 08 	sts	0x08DB, r1	; 0x8008db <UART_TxHead>
    1d8c:	10 92 da 08 	sts	0x08DA, r1	; 0x8008da <UART_TxTail>
    1d90:	10 92 d9 08 	sts	0x08D9, r1	; 0x8008d9 <UART_RxHead>
    1d94:	10 92 d8 08 	sts	0x08D8, r1	; 0x8008d8 <UART_RxTail>
    1d98:	78 94       	sei
    1d9a:	dc 01       	movw	r26, r24
    1d9c:	cb 01       	movw	r24, r22
    1d9e:	80 58       	subi	r24, 0x80	; 128
    1da0:	9b 47       	sbci	r25, 0x7B	; 123
    1da2:	a1 4e       	sbci	r26, 0xE1	; 225
    1da4:	bf 4f       	sbci	r27, 0xFF	; 255
    1da6:	88 0f       	add	r24, r24
    1da8:	99 1f       	adc	r25, r25
    1daa:	aa 1f       	adc	r26, r26
    1dac:	bb 1f       	adc	r27, r27
    1dae:	88 0f       	add	r24, r24
    1db0:	99 1f       	adc	r25, r25
    1db2:	aa 1f       	adc	r26, r26
    1db4:	bb 1f       	adc	r27, r27
    1db6:	bc 01       	movw	r22, r24
    1db8:	cd 01       	movw	r24, r26
    1dba:	66 0f       	add	r22, r22
    1dbc:	77 1f       	adc	r23, r23
    1dbe:	88 1f       	adc	r24, r24
    1dc0:	99 1f       	adc	r25, r25
    1dc2:	00 0f       	add	r16, r16
    1dc4:	11 1f       	adc	r17, r17
    1dc6:	22 1f       	adc	r18, r18
    1dc8:	33 1f       	adc	r19, r19
    1dca:	00 0f       	add	r16, r16
    1dcc:	11 1f       	adc	r17, r17
    1dce:	22 1f       	adc	r18, r18
    1dd0:	33 1f       	adc	r19, r19
    1dd2:	a9 01       	movw	r20, r18
    1dd4:	98 01       	movw	r18, r16
    1dd6:	22 0f       	add	r18, r18
    1dd8:	33 1f       	adc	r19, r19
    1dda:	44 1f       	adc	r20, r20
    1ddc:	55 1f       	adc	r21, r21
    1dde:	22 0f       	add	r18, r18
    1de0:	33 1f       	adc	r19, r19
    1de2:	44 1f       	adc	r20, r20
    1de4:	55 1f       	adc	r21, r21
    1de6:	0e 94 f8 26 	call	0x4df0	; 0x4df0 <__udivmodsi4>
    1dea:	ba 01       	movw	r22, r20
    1dec:	a9 01       	movw	r20, r18
    1dee:	41 50       	subi	r20, 0x01	; 1
    1df0:	51 09       	sbc	r21, r1
    1df2:	61 09       	sbc	r22, r1
    1df4:	71 09       	sbc	r23, r1
    1df6:	57 ff       	sbrs	r21, 7
    1df8:	06 c0       	rjmp	.+12     	; 0x1e06 <UART0_init+0x88>
    1dfa:	82 e0       	ldi	r24, 0x02	; 2
    1dfc:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
    1e00:	5f 77       	andi	r21, 0x7F	; 127
    1e02:	66 27       	eor	r22, r22
    1e04:	77 27       	eor	r23, r23
    1e06:	bb 27       	eor	r27, r27
    1e08:	a7 2f       	mov	r26, r23
    1e0a:	96 2f       	mov	r25, r22
    1e0c:	85 2f       	mov	r24, r21
    1e0e:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
    1e12:	40 93 c4 00 	sts	0x00C4, r20	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
    1e16:	88 e9       	ldi	r24, 0x98	; 152
    1e18:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    1e1c:	86 e0       	ldi	r24, 0x06	; 6
    1e1e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
    1e22:	1f 91       	pop	r17
    1e24:	0f 91       	pop	r16
    1e26:	08 95       	ret

00001e28 <UART0_putc>:
    1e28:	40 91 db 08 	lds	r20, 0x08DB	; 0x8008db <UART_TxHead>
    1e2c:	50 e0       	ldi	r21, 0x00	; 0
    1e2e:	4f 5f       	subi	r20, 0xFF	; 255
    1e30:	5f 4f       	sbci	r21, 0xFF	; 255
    1e32:	4f 77       	andi	r20, 0x7F	; 127
    1e34:	55 27       	eor	r21, r21
    1e36:	20 91 da 08 	lds	r18, 0x08DA	; 0x8008da <UART_TxTail>
    1e3a:	30 e0       	ldi	r19, 0x00	; 0
    1e3c:	42 17       	cp	r20, r18
    1e3e:	53 07       	cpc	r21, r19
    1e40:	d1 f3       	breq	.-12     	; 0x1e36 <UART0_putc+0xe>
    1e42:	fa 01       	movw	r30, r20
    1e44:	e4 5a       	subi	r30, 0xA4	; 164
    1e46:	f6 4f       	sbci	r31, 0xF6	; 246
    1e48:	80 83       	st	Z, r24
    1e4a:	40 93 db 08 	sts	0x08DB, r20	; 0x8008db <UART_TxHead>
    1e4e:	e1 ec       	ldi	r30, 0xC1	; 193
    1e50:	f0 e0       	ldi	r31, 0x00	; 0
    1e52:	80 81       	ld	r24, Z
    1e54:	80 62       	ori	r24, 0x20	; 32
    1e56:	80 83       	st	Z, r24
    1e58:	08 95       	ret

00001e5a <UART0_OutUDec>:
    1e5a:	0f 93       	push	r16
    1e5c:	1f 93       	push	r17
    1e5e:	cf 93       	push	r28
    1e60:	df 93       	push	r29
    1e62:	6a 30       	cpi	r22, 0x0A	; 10
    1e64:	71 05       	cpc	r23, r1
    1e66:	81 05       	cpc	r24, r1
    1e68:	91 05       	cpc	r25, r1
    1e6a:	58 f0       	brcs	.+22     	; 0x1e82 <UART0_OutUDec+0x28>
    1e6c:	2a e0       	ldi	r18, 0x0A	; 10
    1e6e:	30 e0       	ldi	r19, 0x00	; 0
    1e70:	40 e0       	ldi	r20, 0x00	; 0
    1e72:	50 e0       	ldi	r21, 0x00	; 0
    1e74:	0e 94 f8 26 	call	0x4df0	; 0x4df0 <__udivmodsi4>
    1e78:	06 2f       	mov	r16, r22
    1e7a:	ca 01       	movw	r24, r20
    1e7c:	b9 01       	movw	r22, r18
    1e7e:	ed df       	rcall	.-38     	; 0x1e5a <UART0_OutUDec>
    1e80:	60 2f       	mov	r22, r16
    1e82:	80 e3       	ldi	r24, 0x30	; 48
    1e84:	86 0f       	add	r24, r22
    1e86:	d0 df       	rcall	.-96     	; 0x1e28 <UART0_putc>
    1e88:	df 91       	pop	r29
    1e8a:	cf 91       	pop	r28
    1e8c:	1f 91       	pop	r17
    1e8e:	0f 91       	pop	r16
    1e90:	08 95       	ret

00001e92 <UART0_puts>:
    1e92:	cf 93       	push	r28
    1e94:	df 93       	push	r29
    1e96:	ec 01       	movw	r28, r24
    1e98:	88 81       	ld	r24, Y
    1e9a:	88 23       	and	r24, r24
    1e9c:	29 f0       	breq	.+10     	; 0x1ea8 <UART0_puts+0x16>
    1e9e:	21 96       	adiw	r28, 0x01	; 1
    1ea0:	c3 df       	rcall	.-122    	; 0x1e28 <UART0_putc>
    1ea2:	89 91       	ld	r24, Y+
    1ea4:	81 11       	cpse	r24, r1
    1ea6:	fc cf       	rjmp	.-8      	; 0x1ea0 <UART0_puts+0xe>
    1ea8:	df 91       	pop	r29
    1eaa:	cf 91       	pop	r28
    1eac:	08 95       	ret

00001eae <__vector_36>:
    1eae:	1f 92       	push	r1
    1eb0:	0f 92       	push	r0
    1eb2:	0f b6       	in	r0, 0x3f	; 63
    1eb4:	0f 92       	push	r0
    1eb6:	11 24       	eor	r1, r1
    1eb8:	0b b6       	in	r0, 0x3b	; 59
    1eba:	0f 92       	push	r0
    1ebc:	2f 93       	push	r18
    1ebe:	3f 93       	push	r19
    1ec0:	4f 93       	push	r20
    1ec2:	5f 93       	push	r21
    1ec4:	8f 93       	push	r24
    1ec6:	9f 93       	push	r25
    1ec8:	ef 93       	push	r30
    1eca:	ff 93       	push	r31
    1ecc:	20 91 c8 00 	lds	r18, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
    1ed0:	30 91 ce 00 	lds	r19, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    1ed4:	28 71       	andi	r18, 0x18	; 24
    1ed6:	80 91 d4 07 	lds	r24, 0x07D4	; 0x8007d4 <UART1_RxHead>
    1eda:	90 e0       	ldi	r25, 0x00	; 0
    1edc:	01 96       	adiw	r24, 0x01	; 1
    1ede:	8f 77       	andi	r24, 0x7F	; 127
    1ee0:	99 27       	eor	r25, r25
    1ee2:	40 91 d3 07 	lds	r20, 0x07D3	; 0x8007d3 <UART1_RxTail>
    1ee6:	50 e0       	ldi	r21, 0x00	; 0
    1ee8:	84 17       	cp	r24, r20
    1eea:	95 07       	cpc	r25, r21
    1eec:	39 f0       	breq	.+14     	; 0x1efc <__vector_36+0x4e>
    1eee:	80 93 d4 07 	sts	0x07D4, r24	; 0x8007d4 <UART1_RxHead>
    1ef2:	fc 01       	movw	r30, r24
    1ef4:	e9 52       	subi	r30, 0x29	; 41
    1ef6:	f8 4f       	sbci	r31, 0xF8	; 248
    1ef8:	30 83       	st	Z, r19
    1efa:	01 c0       	rjmp	.+2      	; 0x1efe <__vector_36+0x50>
    1efc:	22 e0       	ldi	r18, 0x02	; 2
    1efe:	20 93 d2 07 	sts	0x07D2, r18	; 0x8007d2 <UART1_LastRxError>
    1f02:	ff 91       	pop	r31
    1f04:	ef 91       	pop	r30
    1f06:	9f 91       	pop	r25
    1f08:	8f 91       	pop	r24
    1f0a:	5f 91       	pop	r21
    1f0c:	4f 91       	pop	r20
    1f0e:	3f 91       	pop	r19
    1f10:	2f 91       	pop	r18
    1f12:	0f 90       	pop	r0
    1f14:	0b be       	out	0x3b, r0	; 59
    1f16:	0f 90       	pop	r0
    1f18:	0f be       	out	0x3f, r0	; 63
    1f1a:	0f 90       	pop	r0
    1f1c:	1f 90       	pop	r1
    1f1e:	18 95       	reti

00001f20 <__vector_37>:
    1f20:	1f 92       	push	r1
    1f22:	0f 92       	push	r0
    1f24:	0f b6       	in	r0, 0x3f	; 63
    1f26:	0f 92       	push	r0
    1f28:	11 24       	eor	r1, r1
    1f2a:	0b b6       	in	r0, 0x3b	; 59
    1f2c:	0f 92       	push	r0
    1f2e:	8f 93       	push	r24
    1f30:	9f 93       	push	r25
    1f32:	ef 93       	push	r30
    1f34:	ff 93       	push	r31
    1f36:	90 91 d6 07 	lds	r25, 0x07D6	; 0x8007d6 <UART1_TxHead>
    1f3a:	80 91 d5 07 	lds	r24, 0x07D5	; 0x8007d5 <UART1_TxTail>
    1f3e:	98 17       	cp	r25, r24
    1f40:	89 f0       	breq	.+34     	; 0x1f64 <__vector_37+0x44>
    1f42:	80 91 d5 07 	lds	r24, 0x07D5	; 0x8007d5 <UART1_TxTail>
    1f46:	90 e0       	ldi	r25, 0x00	; 0
    1f48:	01 96       	adiw	r24, 0x01	; 1
    1f4a:	8f 77       	andi	r24, 0x7F	; 127
    1f4c:	99 27       	eor	r25, r25
    1f4e:	80 93 d5 07 	sts	0x07D5, r24	; 0x8007d5 <UART1_TxTail>
    1f52:	fc 01       	movw	r30, r24
    1f54:	e9 5a       	subi	r30, 0xA9	; 169
    1f56:	f7 4f       	sbci	r31, 0xF7	; 247
    1f58:	80 81       	ld	r24, Z
    1f5a:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    1f5e:	10 92 c6 05 	sts	0x05C6, r1	; 0x8005c6 <UART1_Transmission_end>
    1f62:	08 c0       	rjmp	.+16     	; 0x1f74 <__vector_37+0x54>
    1f64:	e9 ec       	ldi	r30, 0xC9	; 201
    1f66:	f0 e0       	ldi	r31, 0x00	; 0
    1f68:	80 81       	ld	r24, Z
    1f6a:	8f 7d       	andi	r24, 0xDF	; 223
    1f6c:	80 83       	st	Z, r24
    1f6e:	81 e0       	ldi	r24, 0x01	; 1
    1f70:	80 93 c6 05 	sts	0x05C6, r24	; 0x8005c6 <UART1_Transmission_end>
    1f74:	ff 91       	pop	r31
    1f76:	ef 91       	pop	r30
    1f78:	9f 91       	pop	r25
    1f7a:	8f 91       	pop	r24
    1f7c:	0f 90       	pop	r0
    1f7e:	0b be       	out	0x3b, r0	; 59
    1f80:	0f 90       	pop	r0
    1f82:	0f be       	out	0x3f, r0	; 63
    1f84:	0f 90       	pop	r0
    1f86:	1f 90       	pop	r1
    1f88:	18 95       	reti

00001f8a <UART1_init>:
    1f8a:	0f 93       	push	r16
    1f8c:	1f 93       	push	r17
    1f8e:	8b 01       	movw	r16, r22
    1f90:	9c 01       	movw	r18, r24
    1f92:	f8 94       	cli
    1f94:	10 92 d6 07 	sts	0x07D6, r1	; 0x8007d6 <UART1_TxHead>
    1f98:	10 92 d5 07 	sts	0x07D5, r1	; 0x8007d5 <UART1_TxTail>
    1f9c:	10 92 d4 07 	sts	0x07D4, r1	; 0x8007d4 <UART1_RxHead>
    1fa0:	10 92 d3 07 	sts	0x07D3, r1	; 0x8007d3 <UART1_RxTail>
    1fa4:	78 94       	sei
    1fa6:	dc 01       	movw	r26, r24
    1fa8:	cb 01       	movw	r24, r22
    1faa:	80 58       	subi	r24, 0x80	; 128
    1fac:	9b 47       	sbci	r25, 0x7B	; 123
    1fae:	a1 4e       	sbci	r26, 0xE1	; 225
    1fb0:	bf 4f       	sbci	r27, 0xFF	; 255
    1fb2:	88 0f       	add	r24, r24
    1fb4:	99 1f       	adc	r25, r25
    1fb6:	aa 1f       	adc	r26, r26
    1fb8:	bb 1f       	adc	r27, r27
    1fba:	88 0f       	add	r24, r24
    1fbc:	99 1f       	adc	r25, r25
    1fbe:	aa 1f       	adc	r26, r26
    1fc0:	bb 1f       	adc	r27, r27
    1fc2:	bc 01       	movw	r22, r24
    1fc4:	cd 01       	movw	r24, r26
    1fc6:	66 0f       	add	r22, r22
    1fc8:	77 1f       	adc	r23, r23
    1fca:	88 1f       	adc	r24, r24
    1fcc:	99 1f       	adc	r25, r25
    1fce:	00 0f       	add	r16, r16
    1fd0:	11 1f       	adc	r17, r17
    1fd2:	22 1f       	adc	r18, r18
    1fd4:	33 1f       	adc	r19, r19
    1fd6:	00 0f       	add	r16, r16
    1fd8:	11 1f       	adc	r17, r17
    1fda:	22 1f       	adc	r18, r18
    1fdc:	33 1f       	adc	r19, r19
    1fde:	a9 01       	movw	r20, r18
    1fe0:	98 01       	movw	r18, r16
    1fe2:	22 0f       	add	r18, r18
    1fe4:	33 1f       	adc	r19, r19
    1fe6:	44 1f       	adc	r20, r20
    1fe8:	55 1f       	adc	r21, r21
    1fea:	22 0f       	add	r18, r18
    1fec:	33 1f       	adc	r19, r19
    1fee:	44 1f       	adc	r20, r20
    1ff0:	55 1f       	adc	r21, r21
    1ff2:	0e 94 f8 26 	call	0x4df0	; 0x4df0 <__udivmodsi4>
    1ff6:	ba 01       	movw	r22, r20
    1ff8:	a9 01       	movw	r20, r18
    1ffa:	41 50       	subi	r20, 0x01	; 1
    1ffc:	51 09       	sbc	r21, r1
    1ffe:	61 09       	sbc	r22, r1
    2000:	71 09       	sbc	r23, r1
    2002:	57 ff       	sbrs	r21, 7
    2004:	06 c0       	rjmp	.+12     	; 0x2012 <UART1_init+0x88>
    2006:	82 e0       	ldi	r24, 0x02	; 2
    2008:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
    200c:	5f 77       	andi	r21, 0x7F	; 127
    200e:	66 27       	eor	r22, r22
    2010:	77 27       	eor	r23, r23
    2012:	bb 27       	eor	r27, r27
    2014:	a7 2f       	mov	r26, r23
    2016:	96 2f       	mov	r25, r22
    2018:	85 2f       	mov	r24, r21
    201a:	80 93 cd 00 	sts	0x00CD, r24	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7000cd>
    201e:	40 93 cc 00 	sts	0x00CC, r20	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7000cc>
    2022:	88 e9       	ldi	r24, 0x98	; 152
    2024:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7000c9>
    2028:	86 e0       	ldi	r24, 0x06	; 6
    202a:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7000ca>
    202e:	1f 91       	pop	r17
    2030:	0f 91       	pop	r16
    2032:	08 95       	ret

00002034 <UART1_getc>:
    2034:	f8 94       	cli
    2036:	90 91 d4 07 	lds	r25, 0x07D4	; 0x8007d4 <UART1_RxHead>
    203a:	80 91 d3 07 	lds	r24, 0x07D3	; 0x8007d3 <UART1_RxTail>
    203e:	98 13       	cpse	r25, r24
    2040:	04 c0       	rjmp	.+8      	; 0x204a <UART1_getc+0x16>
    2042:	78 94       	sei
    2044:	80 e0       	ldi	r24, 0x00	; 0
    2046:	91 e0       	ldi	r25, 0x01	; 1
    2048:	08 95       	ret
    204a:	80 91 d3 07 	lds	r24, 0x07D3	; 0x8007d3 <UART1_RxTail>
    204e:	90 e0       	ldi	r25, 0x00	; 0
    2050:	01 96       	adiw	r24, 0x01	; 1
    2052:	8f 77       	andi	r24, 0x7F	; 127
    2054:	99 27       	eor	r25, r25
    2056:	80 93 d3 07 	sts	0x07D3, r24	; 0x8007d3 <UART1_RxTail>
    205a:	78 94       	sei
    205c:	fc 01       	movw	r30, r24
    205e:	e9 52       	subi	r30, 0x29	; 41
    2060:	f8 4f       	sbci	r31, 0xF8	; 248
    2062:	20 81       	ld	r18, Z
    2064:	80 91 d2 07 	lds	r24, 0x07D2	; 0x8007d2 <UART1_LastRxError>
    2068:	90 e0       	ldi	r25, 0x00	; 0
    206a:	98 2f       	mov	r25, r24
    206c:	88 27       	eor	r24, r24
    206e:	82 0f       	add	r24, r18
    2070:	91 1d       	adc	r25, r1
    2072:	08 95       	ret

00002074 <UART1_putc>:
    2074:	40 91 d6 07 	lds	r20, 0x07D6	; 0x8007d6 <UART1_TxHead>
    2078:	50 e0       	ldi	r21, 0x00	; 0
    207a:	4f 5f       	subi	r20, 0xFF	; 255
    207c:	5f 4f       	sbci	r21, 0xFF	; 255
    207e:	4f 77       	andi	r20, 0x7F	; 127
    2080:	55 27       	eor	r21, r21
    2082:	20 91 d5 07 	lds	r18, 0x07D5	; 0x8007d5 <UART1_TxTail>
    2086:	30 e0       	ldi	r19, 0x00	; 0
    2088:	42 17       	cp	r20, r18
    208a:	53 07       	cpc	r21, r19
    208c:	d1 f3       	breq	.-12     	; 0x2082 <UART1_putc+0xe>
    208e:	fa 01       	movw	r30, r20
    2090:	e9 5a       	subi	r30, 0xA9	; 169
    2092:	f7 4f       	sbci	r31, 0xF7	; 247
    2094:	80 83       	st	Z, r24
    2096:	40 93 d6 07 	sts	0x07D6, r20	; 0x8007d6 <UART1_TxHead>
    209a:	e9 ec       	ldi	r30, 0xC9	; 201
    209c:	f0 e0       	ldi	r31, 0x00	; 0
    209e:	80 81       	ld	r24, Z
    20a0:	80 62       	ori	r24, 0x20	; 32
    20a2:	80 83       	st	Z, r24
    20a4:	08 95       	ret

000020a6 <UART1_available>:
    20a6:	f8 94       	cli
    20a8:	80 91 d4 07 	lds	r24, 0x07D4	; 0x8007d4 <UART1_RxHead>
    20ac:	20 91 d3 07 	lds	r18, 0x07D3	; 0x8007d3 <UART1_RxTail>
    20b0:	78 94       	sei
    20b2:	90 e0       	ldi	r25, 0x00	; 0
    20b4:	80 58       	subi	r24, 0x80	; 128
    20b6:	9f 4f       	sbci	r25, 0xFF	; 255
    20b8:	82 1b       	sub	r24, r18
    20ba:	91 09       	sbc	r25, r1
    20bc:	8f 77       	andi	r24, 0x7F	; 127
    20be:	99 27       	eor	r25, r25
    20c0:	08 95       	ret

000020c2 <UART1_flush>:
    20c2:	80 91 c6 05 	lds	r24, 0x05C6	; 0x8005c6 <UART1_Transmission_end>
    20c6:	88 23       	and	r24, r24
    20c8:	e1 f3       	breq	.-8      	; 0x20c2 <UART1_flush>
    20ca:	08 95       	ret

000020cc <__vector_51>:
    20cc:	1f 92       	push	r1
    20ce:	0f 92       	push	r0
    20d0:	0f b6       	in	r0, 0x3f	; 63
    20d2:	0f 92       	push	r0
    20d4:	11 24       	eor	r1, r1
    20d6:	0b b6       	in	r0, 0x3b	; 59
    20d8:	0f 92       	push	r0
    20da:	2f 93       	push	r18
    20dc:	3f 93       	push	r19
    20de:	4f 93       	push	r20
    20e0:	5f 93       	push	r21
    20e2:	8f 93       	push	r24
    20e4:	9f 93       	push	r25
    20e6:	ef 93       	push	r30
    20e8:	ff 93       	push	r31
    20ea:	20 91 d0 00 	lds	r18, 0x00D0	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7000d0>
    20ee:	30 91 d6 00 	lds	r19, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    20f2:	28 71       	andi	r18, 0x18	; 24
    20f4:	80 91 cf 06 	lds	r24, 0x06CF	; 0x8006cf <UART2_RxHead>
    20f8:	90 e0       	ldi	r25, 0x00	; 0
    20fa:	01 96       	adiw	r24, 0x01	; 1
    20fc:	8f 77       	andi	r24, 0x7F	; 127
    20fe:	99 27       	eor	r25, r25
    2100:	40 91 ce 06 	lds	r20, 0x06CE	; 0x8006ce <UART2_RxTail>
    2104:	50 e0       	ldi	r21, 0x00	; 0
    2106:	84 17       	cp	r24, r20
    2108:	95 07       	cpc	r25, r21
    210a:	39 f0       	breq	.+14     	; 0x211a <__vector_51+0x4e>
    210c:	80 93 cf 06 	sts	0x06CF, r24	; 0x8006cf <UART2_RxHead>
    2110:	fc 01       	movw	r30, r24
    2112:	ee 52       	subi	r30, 0x2E	; 46
    2114:	f9 4f       	sbci	r31, 0xF9	; 249
    2116:	30 83       	st	Z, r19
    2118:	01 c0       	rjmp	.+2      	; 0x211c <__vector_51+0x50>
    211a:	22 e0       	ldi	r18, 0x02	; 2
    211c:	20 93 cd 06 	sts	0x06CD, r18	; 0x8006cd <UART2_LastRxError>
    2120:	ff 91       	pop	r31
    2122:	ef 91       	pop	r30
    2124:	9f 91       	pop	r25
    2126:	8f 91       	pop	r24
    2128:	5f 91       	pop	r21
    212a:	4f 91       	pop	r20
    212c:	3f 91       	pop	r19
    212e:	2f 91       	pop	r18
    2130:	0f 90       	pop	r0
    2132:	0b be       	out	0x3b, r0	; 59
    2134:	0f 90       	pop	r0
    2136:	0f be       	out	0x3f, r0	; 63
    2138:	0f 90       	pop	r0
    213a:	1f 90       	pop	r1
    213c:	18 95       	reti

0000213e <__vector_52>:
    213e:	1f 92       	push	r1
    2140:	0f 92       	push	r0
    2142:	0f b6       	in	r0, 0x3f	; 63
    2144:	0f 92       	push	r0
    2146:	11 24       	eor	r1, r1
    2148:	0b b6       	in	r0, 0x3b	; 59
    214a:	0f 92       	push	r0
    214c:	8f 93       	push	r24
    214e:	9f 93       	push	r25
    2150:	ef 93       	push	r30
    2152:	ff 93       	push	r31
    2154:	90 91 d1 06 	lds	r25, 0x06D1	; 0x8006d1 <UART2_TxHead>
    2158:	80 91 d0 06 	lds	r24, 0x06D0	; 0x8006d0 <UART2_TxTail>
    215c:	98 17       	cp	r25, r24
    215e:	89 f0       	breq	.+34     	; 0x2182 <__vector_52+0x44>
    2160:	80 91 d0 06 	lds	r24, 0x06D0	; 0x8006d0 <UART2_TxTail>
    2164:	90 e0       	ldi	r25, 0x00	; 0
    2166:	01 96       	adiw	r24, 0x01	; 1
    2168:	8f 77       	andi	r24, 0x7F	; 127
    216a:	99 27       	eor	r25, r25
    216c:	80 93 d0 06 	sts	0x06D0, r24	; 0x8006d0 <UART2_TxTail>
    2170:	fc 01       	movw	r30, r24
    2172:	ee 5a       	subi	r30, 0xAE	; 174
    2174:	f8 4f       	sbci	r31, 0xF8	; 248
    2176:	80 81       	ld	r24, Z
    2178:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    217c:	10 92 c5 05 	sts	0x05C5, r1	; 0x8005c5 <UART2_Transmission_end>
    2180:	08 c0       	rjmp	.+16     	; 0x2192 <__vector_52+0x54>
    2182:	e1 ed       	ldi	r30, 0xD1	; 209
    2184:	f0 e0       	ldi	r31, 0x00	; 0
    2186:	80 81       	ld	r24, Z
    2188:	8f 7d       	andi	r24, 0xDF	; 223
    218a:	80 83       	st	Z, r24
    218c:	81 e0       	ldi	r24, 0x01	; 1
    218e:	80 93 c5 05 	sts	0x05C5, r24	; 0x8005c5 <UART2_Transmission_end>
    2192:	ff 91       	pop	r31
    2194:	ef 91       	pop	r30
    2196:	9f 91       	pop	r25
    2198:	8f 91       	pop	r24
    219a:	0f 90       	pop	r0
    219c:	0b be       	out	0x3b, r0	; 59
    219e:	0f 90       	pop	r0
    21a0:	0f be       	out	0x3f, r0	; 63
    21a2:	0f 90       	pop	r0
    21a4:	1f 90       	pop	r1
    21a6:	18 95       	reti

000021a8 <UART2_init>:
    21a8:	0f 93       	push	r16
    21aa:	1f 93       	push	r17
    21ac:	8b 01       	movw	r16, r22
    21ae:	9c 01       	movw	r18, r24
    21b0:	f8 94       	cli
    21b2:	10 92 d1 06 	sts	0x06D1, r1	; 0x8006d1 <UART2_TxHead>
    21b6:	10 92 d0 06 	sts	0x06D0, r1	; 0x8006d0 <UART2_TxTail>
    21ba:	10 92 cf 06 	sts	0x06CF, r1	; 0x8006cf <UART2_RxHead>
    21be:	10 92 ce 06 	sts	0x06CE, r1	; 0x8006ce <UART2_RxTail>
    21c2:	78 94       	sei
    21c4:	dc 01       	movw	r26, r24
    21c6:	cb 01       	movw	r24, r22
    21c8:	80 58       	subi	r24, 0x80	; 128
    21ca:	9b 47       	sbci	r25, 0x7B	; 123
    21cc:	a1 4e       	sbci	r26, 0xE1	; 225
    21ce:	bf 4f       	sbci	r27, 0xFF	; 255
    21d0:	88 0f       	add	r24, r24
    21d2:	99 1f       	adc	r25, r25
    21d4:	aa 1f       	adc	r26, r26
    21d6:	bb 1f       	adc	r27, r27
    21d8:	88 0f       	add	r24, r24
    21da:	99 1f       	adc	r25, r25
    21dc:	aa 1f       	adc	r26, r26
    21de:	bb 1f       	adc	r27, r27
    21e0:	bc 01       	movw	r22, r24
    21e2:	cd 01       	movw	r24, r26
    21e4:	66 0f       	add	r22, r22
    21e6:	77 1f       	adc	r23, r23
    21e8:	88 1f       	adc	r24, r24
    21ea:	99 1f       	adc	r25, r25
    21ec:	00 0f       	add	r16, r16
    21ee:	11 1f       	adc	r17, r17
    21f0:	22 1f       	adc	r18, r18
    21f2:	33 1f       	adc	r19, r19
    21f4:	00 0f       	add	r16, r16
    21f6:	11 1f       	adc	r17, r17
    21f8:	22 1f       	adc	r18, r18
    21fa:	33 1f       	adc	r19, r19
    21fc:	a9 01       	movw	r20, r18
    21fe:	98 01       	movw	r18, r16
    2200:	22 0f       	add	r18, r18
    2202:	33 1f       	adc	r19, r19
    2204:	44 1f       	adc	r20, r20
    2206:	55 1f       	adc	r21, r21
    2208:	22 0f       	add	r18, r18
    220a:	33 1f       	adc	r19, r19
    220c:	44 1f       	adc	r20, r20
    220e:	55 1f       	adc	r21, r21
    2210:	0e 94 f8 26 	call	0x4df0	; 0x4df0 <__udivmodsi4>
    2214:	ba 01       	movw	r22, r20
    2216:	a9 01       	movw	r20, r18
    2218:	41 50       	subi	r20, 0x01	; 1
    221a:	51 09       	sbc	r21, r1
    221c:	61 09       	sbc	r22, r1
    221e:	71 09       	sbc	r23, r1
    2220:	57 ff       	sbrs	r21, 7
    2222:	06 c0       	rjmp	.+12     	; 0x2230 <__stack+0x31>
    2224:	82 e0       	ldi	r24, 0x02	; 2
    2226:	80 93 d0 00 	sts	0x00D0, r24	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7000d0>
    222a:	5f 77       	andi	r21, 0x7F	; 127
    222c:	66 27       	eor	r22, r22
    222e:	77 27       	eor	r23, r23
    2230:	bb 27       	eor	r27, r27
    2232:	a7 2f       	mov	r26, r23
    2234:	96 2f       	mov	r25, r22
    2236:	85 2f       	mov	r24, r21
    2238:	80 93 d5 00 	sts	0x00D5, r24	; 0x8000d5 <__TEXT_REGION_LENGTH__+0x7000d5>
    223c:	40 93 d4 00 	sts	0x00D4, r20	; 0x8000d4 <__TEXT_REGION_LENGTH__+0x7000d4>
    2240:	88 e9       	ldi	r24, 0x98	; 152
    2242:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7000d1>
    2246:	86 e0       	ldi	r24, 0x06	; 6
    2248:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7000d2>
    224c:	1f 91       	pop	r17
    224e:	0f 91       	pop	r16
    2250:	08 95       	ret

00002252 <UART2_getc>:
    2252:	90 91 cf 06 	lds	r25, 0x06CF	; 0x8006cf <UART2_RxHead>
    2256:	80 91 ce 06 	lds	r24, 0x06CE	; 0x8006ce <UART2_RxTail>
    225a:	98 17       	cp	r25, r24
    225c:	a1 f0       	breq	.+40     	; 0x2286 <UART2_getc+0x34>
    225e:	80 91 ce 06 	lds	r24, 0x06CE	; 0x8006ce <UART2_RxTail>
    2262:	90 e0       	ldi	r25, 0x00	; 0
    2264:	01 96       	adiw	r24, 0x01	; 1
    2266:	8f 77       	andi	r24, 0x7F	; 127
    2268:	99 27       	eor	r25, r25
    226a:	80 93 ce 06 	sts	0x06CE, r24	; 0x8006ce <UART2_RxTail>
    226e:	fc 01       	movw	r30, r24
    2270:	ee 52       	subi	r30, 0x2E	; 46
    2272:	f9 4f       	sbci	r31, 0xF9	; 249
    2274:	20 81       	ld	r18, Z
    2276:	80 91 cd 06 	lds	r24, 0x06CD	; 0x8006cd <UART2_LastRxError>
    227a:	90 e0       	ldi	r25, 0x00	; 0
    227c:	98 2f       	mov	r25, r24
    227e:	88 27       	eor	r24, r24
    2280:	82 0f       	add	r24, r18
    2282:	91 1d       	adc	r25, r1
    2284:	08 95       	ret
    2286:	80 e0       	ldi	r24, 0x00	; 0
    2288:	91 e0       	ldi	r25, 0x01	; 1
    228a:	08 95       	ret

0000228c <UART2_putc>:
    228c:	40 91 d1 06 	lds	r20, 0x06D1	; 0x8006d1 <UART2_TxHead>
    2290:	50 e0       	ldi	r21, 0x00	; 0
    2292:	4f 5f       	subi	r20, 0xFF	; 255
    2294:	5f 4f       	sbci	r21, 0xFF	; 255
    2296:	4f 77       	andi	r20, 0x7F	; 127
    2298:	55 27       	eor	r21, r21
    229a:	20 91 d0 06 	lds	r18, 0x06D0	; 0x8006d0 <UART2_TxTail>
    229e:	30 e0       	ldi	r19, 0x00	; 0
    22a0:	42 17       	cp	r20, r18
    22a2:	53 07       	cpc	r21, r19
    22a4:	d1 f3       	breq	.-12     	; 0x229a <UART2_putc+0xe>
    22a6:	fa 01       	movw	r30, r20
    22a8:	ee 5a       	subi	r30, 0xAE	; 174
    22aa:	f8 4f       	sbci	r31, 0xF8	; 248
    22ac:	80 83       	st	Z, r24
    22ae:	40 93 d1 06 	sts	0x06D1, r20	; 0x8006d1 <UART2_TxHead>
    22b2:	e1 ed       	ldi	r30, 0xD1	; 209
    22b4:	f0 e0       	ldi	r31, 0x00	; 0
    22b6:	80 81       	ld	r24, Z
    22b8:	80 62       	ori	r24, 0x20	; 32
    22ba:	80 83       	st	Z, r24
    22bc:	08 95       	ret

000022be <UART2_available>:
    22be:	f8 94       	cli
    22c0:	80 91 cf 06 	lds	r24, 0x06CF	; 0x8006cf <UART2_RxHead>
    22c4:	20 91 ce 06 	lds	r18, 0x06CE	; 0x8006ce <UART2_RxTail>
    22c8:	78 94       	sei
    22ca:	90 e0       	ldi	r25, 0x00	; 0
    22cc:	80 58       	subi	r24, 0x80	; 128
    22ce:	9f 4f       	sbci	r25, 0xFF	; 255
    22d0:	82 1b       	sub	r24, r18
    22d2:	91 09       	sbc	r25, r1
    22d4:	8f 77       	andi	r24, 0x7F	; 127
    22d6:	99 27       	eor	r25, r25
    22d8:	08 95       	ret

000022da <UART2_flush>:
    22da:	80 91 c5 05 	lds	r24, 0x05C5	; 0x8005c5 <UART2_Transmission_end>
    22de:	88 23       	and	r24, r24
    22e0:	e1 f3       	breq	.-8      	; 0x22da <UART2_flush>
    22e2:	08 95       	ret

000022e4 <__vector_54>:
    22e4:	1f 92       	push	r1
    22e6:	0f 92       	push	r0
    22e8:	0f b6       	in	r0, 0x3f	; 63
    22ea:	0f 92       	push	r0
    22ec:	11 24       	eor	r1, r1
    22ee:	0b b6       	in	r0, 0x3b	; 59
    22f0:	0f 92       	push	r0
    22f2:	2f 93       	push	r18
    22f4:	3f 93       	push	r19
    22f6:	4f 93       	push	r20
    22f8:	5f 93       	push	r21
    22fa:	8f 93       	push	r24
    22fc:	9f 93       	push	r25
    22fe:	ef 93       	push	r30
    2300:	ff 93       	push	r31
    2302:	20 91 30 01 	lds	r18, 0x0130	; 0x800130 <__TEXT_REGION_LENGTH__+0x700130>
    2306:	30 91 36 01 	lds	r19, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    230a:	28 71       	andi	r18, 0x18	; 24
    230c:	80 91 ca 05 	lds	r24, 0x05CA	; 0x8005ca <UART3_RxHead>
    2310:	90 e0       	ldi	r25, 0x00	; 0
    2312:	01 96       	adiw	r24, 0x01	; 1
    2314:	8f 77       	andi	r24, 0x7F	; 127
    2316:	99 27       	eor	r25, r25
    2318:	40 91 c9 05 	lds	r20, 0x05C9	; 0x8005c9 <UART3_RxTail>
    231c:	50 e0       	ldi	r21, 0x00	; 0
    231e:	84 17       	cp	r24, r20
    2320:	95 07       	cpc	r25, r21
    2322:	39 f0       	breq	.+14     	; 0x2332 <__vector_54+0x4e>
    2324:	80 93 ca 05 	sts	0x05CA, r24	; 0x8005ca <UART3_RxHead>
    2328:	fc 01       	movw	r30, r24
    232a:	e3 53       	subi	r30, 0x33	; 51
    232c:	fa 4f       	sbci	r31, 0xFA	; 250
    232e:	30 83       	st	Z, r19
    2330:	01 c0       	rjmp	.+2      	; 0x2334 <__vector_54+0x50>
    2332:	22 e0       	ldi	r18, 0x02	; 2
    2334:	20 93 c8 05 	sts	0x05C8, r18	; 0x8005c8 <UART3_LastRxError>
    2338:	ff 91       	pop	r31
    233a:	ef 91       	pop	r30
    233c:	9f 91       	pop	r25
    233e:	8f 91       	pop	r24
    2340:	5f 91       	pop	r21
    2342:	4f 91       	pop	r20
    2344:	3f 91       	pop	r19
    2346:	2f 91       	pop	r18
    2348:	0f 90       	pop	r0
    234a:	0b be       	out	0x3b, r0	; 59
    234c:	0f 90       	pop	r0
    234e:	0f be       	out	0x3f, r0	; 63
    2350:	0f 90       	pop	r0
    2352:	1f 90       	pop	r1
    2354:	18 95       	reti

00002356 <__vector_55>:
    2356:	1f 92       	push	r1
    2358:	0f 92       	push	r0
    235a:	0f b6       	in	r0, 0x3f	; 63
    235c:	0f 92       	push	r0
    235e:	11 24       	eor	r1, r1
    2360:	0b b6       	in	r0, 0x3b	; 59
    2362:	0f 92       	push	r0
    2364:	8f 93       	push	r24
    2366:	9f 93       	push	r25
    2368:	ef 93       	push	r30
    236a:	ff 93       	push	r31
    236c:	90 91 cc 05 	lds	r25, 0x05CC	; 0x8005cc <UART3_TxHead>
    2370:	80 91 cb 05 	lds	r24, 0x05CB	; 0x8005cb <UART3_TxTail>
    2374:	98 17       	cp	r25, r24
    2376:	89 f0       	breq	.+34     	; 0x239a <__vector_55+0x44>
    2378:	80 91 cb 05 	lds	r24, 0x05CB	; 0x8005cb <UART3_TxTail>
    237c:	90 e0       	ldi	r25, 0x00	; 0
    237e:	01 96       	adiw	r24, 0x01	; 1
    2380:	8f 77       	andi	r24, 0x7F	; 127
    2382:	99 27       	eor	r25, r25
    2384:	80 93 cb 05 	sts	0x05CB, r24	; 0x8005cb <UART3_TxTail>
    2388:	fc 01       	movw	r30, r24
    238a:	e3 5b       	subi	r30, 0xB3	; 179
    238c:	f9 4f       	sbci	r31, 0xF9	; 249
    238e:	80 81       	ld	r24, Z
    2390:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    2394:	10 92 c4 05 	sts	0x05C4, r1	; 0x8005c4 <UART3_Transmission_end>
    2398:	08 c0       	rjmp	.+16     	; 0x23aa <__vector_55+0x54>
    239a:	e1 e3       	ldi	r30, 0x31	; 49
    239c:	f1 e0       	ldi	r31, 0x01	; 1
    239e:	80 81       	ld	r24, Z
    23a0:	8f 7d       	andi	r24, 0xDF	; 223
    23a2:	80 83       	st	Z, r24
    23a4:	81 e0       	ldi	r24, 0x01	; 1
    23a6:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <UART3_Transmission_end>
    23aa:	ff 91       	pop	r31
    23ac:	ef 91       	pop	r30
    23ae:	9f 91       	pop	r25
    23b0:	8f 91       	pop	r24
    23b2:	0f 90       	pop	r0
    23b4:	0b be       	out	0x3b, r0	; 59
    23b6:	0f 90       	pop	r0
    23b8:	0f be       	out	0x3f, r0	; 63
    23ba:	0f 90       	pop	r0
    23bc:	1f 90       	pop	r1
    23be:	18 95       	reti

000023c0 <UART3_init>:
    23c0:	0f 93       	push	r16
    23c2:	1f 93       	push	r17
    23c4:	8b 01       	movw	r16, r22
    23c6:	9c 01       	movw	r18, r24
    23c8:	f8 94       	cli
    23ca:	10 92 cc 05 	sts	0x05CC, r1	; 0x8005cc <UART3_TxHead>
    23ce:	10 92 cb 05 	sts	0x05CB, r1	; 0x8005cb <UART3_TxTail>
    23d2:	10 92 ca 05 	sts	0x05CA, r1	; 0x8005ca <UART3_RxHead>
    23d6:	10 92 c9 05 	sts	0x05C9, r1	; 0x8005c9 <UART3_RxTail>
    23da:	78 94       	sei
    23dc:	dc 01       	movw	r26, r24
    23de:	cb 01       	movw	r24, r22
    23e0:	80 58       	subi	r24, 0x80	; 128
    23e2:	9b 47       	sbci	r25, 0x7B	; 123
    23e4:	a1 4e       	sbci	r26, 0xE1	; 225
    23e6:	bf 4f       	sbci	r27, 0xFF	; 255
    23e8:	88 0f       	add	r24, r24
    23ea:	99 1f       	adc	r25, r25
    23ec:	aa 1f       	adc	r26, r26
    23ee:	bb 1f       	adc	r27, r27
    23f0:	88 0f       	add	r24, r24
    23f2:	99 1f       	adc	r25, r25
    23f4:	aa 1f       	adc	r26, r26
    23f6:	bb 1f       	adc	r27, r27
    23f8:	bc 01       	movw	r22, r24
    23fa:	cd 01       	movw	r24, r26
    23fc:	66 0f       	add	r22, r22
    23fe:	77 1f       	adc	r23, r23
    2400:	88 1f       	adc	r24, r24
    2402:	99 1f       	adc	r25, r25
    2404:	00 0f       	add	r16, r16
    2406:	11 1f       	adc	r17, r17
    2408:	22 1f       	adc	r18, r18
    240a:	33 1f       	adc	r19, r19
    240c:	00 0f       	add	r16, r16
    240e:	11 1f       	adc	r17, r17
    2410:	22 1f       	adc	r18, r18
    2412:	33 1f       	adc	r19, r19
    2414:	a9 01       	movw	r20, r18
    2416:	98 01       	movw	r18, r16
    2418:	22 0f       	add	r18, r18
    241a:	33 1f       	adc	r19, r19
    241c:	44 1f       	adc	r20, r20
    241e:	55 1f       	adc	r21, r21
    2420:	22 0f       	add	r18, r18
    2422:	33 1f       	adc	r19, r19
    2424:	44 1f       	adc	r20, r20
    2426:	55 1f       	adc	r21, r21
    2428:	0e 94 f8 26 	call	0x4df0	; 0x4df0 <__udivmodsi4>
    242c:	ba 01       	movw	r22, r20
    242e:	a9 01       	movw	r20, r18
    2430:	41 50       	subi	r20, 0x01	; 1
    2432:	51 09       	sbc	r21, r1
    2434:	61 09       	sbc	r22, r1
    2436:	71 09       	sbc	r23, r1
    2438:	57 ff       	sbrs	r21, 7
    243a:	06 c0       	rjmp	.+12     	; 0x2448 <UART3_init+0x88>
    243c:	82 e0       	ldi	r24, 0x02	; 2
    243e:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <__TEXT_REGION_LENGTH__+0x700130>
    2442:	5f 77       	andi	r21, 0x7F	; 127
    2444:	66 27       	eor	r22, r22
    2446:	77 27       	eor	r23, r23
    2448:	bb 27       	eor	r27, r27
    244a:	a7 2f       	mov	r26, r23
    244c:	96 2f       	mov	r25, r22
    244e:	85 2f       	mov	r24, r21
    2450:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <__TEXT_REGION_LENGTH__+0x700135>
    2454:	40 93 34 01 	sts	0x0134, r20	; 0x800134 <__TEXT_REGION_LENGTH__+0x700134>
    2458:	88 e9       	ldi	r24, 0x98	; 152
    245a:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <__TEXT_REGION_LENGTH__+0x700131>
    245e:	86 e0       	ldi	r24, 0x06	; 6
    2460:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <__TEXT_REGION_LENGTH__+0x700132>
    2464:	1f 91       	pop	r17
    2466:	0f 91       	pop	r16
    2468:	08 95       	ret

0000246a <UART3_getc>:
    246a:	90 91 ca 05 	lds	r25, 0x05CA	; 0x8005ca <UART3_RxHead>
    246e:	80 91 c9 05 	lds	r24, 0x05C9	; 0x8005c9 <UART3_RxTail>
    2472:	98 17       	cp	r25, r24
    2474:	a1 f0       	breq	.+40     	; 0x249e <UART3_getc+0x34>
    2476:	80 91 c9 05 	lds	r24, 0x05C9	; 0x8005c9 <UART3_RxTail>
    247a:	90 e0       	ldi	r25, 0x00	; 0
    247c:	01 96       	adiw	r24, 0x01	; 1
    247e:	8f 77       	andi	r24, 0x7F	; 127
    2480:	99 27       	eor	r25, r25
    2482:	80 93 c9 05 	sts	0x05C9, r24	; 0x8005c9 <UART3_RxTail>
    2486:	fc 01       	movw	r30, r24
    2488:	e3 53       	subi	r30, 0x33	; 51
    248a:	fa 4f       	sbci	r31, 0xFA	; 250
    248c:	20 81       	ld	r18, Z
    248e:	80 91 c8 05 	lds	r24, 0x05C8	; 0x8005c8 <UART3_LastRxError>
    2492:	90 e0       	ldi	r25, 0x00	; 0
    2494:	98 2f       	mov	r25, r24
    2496:	88 27       	eor	r24, r24
    2498:	82 0f       	add	r24, r18
    249a:	91 1d       	adc	r25, r1
    249c:	08 95       	ret
    249e:	80 e0       	ldi	r24, 0x00	; 0
    24a0:	91 e0       	ldi	r25, 0x01	; 1
    24a2:	08 95       	ret

000024a4 <UART3_putc>:
    24a4:	40 91 cc 05 	lds	r20, 0x05CC	; 0x8005cc <UART3_TxHead>
    24a8:	50 e0       	ldi	r21, 0x00	; 0
    24aa:	4f 5f       	subi	r20, 0xFF	; 255
    24ac:	5f 4f       	sbci	r21, 0xFF	; 255
    24ae:	4f 77       	andi	r20, 0x7F	; 127
    24b0:	55 27       	eor	r21, r21
    24b2:	20 91 cb 05 	lds	r18, 0x05CB	; 0x8005cb <UART3_TxTail>
    24b6:	30 e0       	ldi	r19, 0x00	; 0
    24b8:	42 17       	cp	r20, r18
    24ba:	53 07       	cpc	r21, r19
    24bc:	d1 f3       	breq	.-12     	; 0x24b2 <UART3_putc+0xe>
    24be:	fa 01       	movw	r30, r20
    24c0:	e3 5b       	subi	r30, 0xB3	; 179
    24c2:	f9 4f       	sbci	r31, 0xF9	; 249
    24c4:	80 83       	st	Z, r24
    24c6:	40 93 cc 05 	sts	0x05CC, r20	; 0x8005cc <UART3_TxHead>
    24ca:	e1 e3       	ldi	r30, 0x31	; 49
    24cc:	f1 e0       	ldi	r31, 0x01	; 1
    24ce:	80 81       	ld	r24, Z
    24d0:	80 62       	ori	r24, 0x20	; 32
    24d2:	80 83       	st	Z, r24
    24d4:	08 95       	ret

000024d6 <UART3_available>:
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    24d6:	f8 94       	cli
uint16_t UART3_available(void)
{
	uint16_t ret;
	
	ATOMIC_BLOCK(ATOMIC_FORCEON) {
		ret = (UART_RX3_BUFFER_SIZE + UART3_RxHead - UART3_RxTail) & UART_RX3_BUFFER_MASK;
    24d8:	80 91 ca 05 	lds	r24, 0x05CA	; 0x8005ca <UART3_RxHead>
    24dc:	20 91 c9 05 	lds	r18, 0x05C9	; 0x8005c9 <UART3_RxTail>
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
    24e0:	78 94       	sei
	}
	return ret;
    24e2:	90 e0       	ldi	r25, 0x00	; 0
    24e4:	80 58       	subi	r24, 0x80	; 128
    24e6:	9f 4f       	sbci	r25, 0xFF	; 255
    24e8:	82 1b       	sub	r24, r18
    24ea:	91 09       	sbc	r25, r1
} /* UART3_available */
    24ec:	8f 77       	andi	r24, 0x7F	; 127
    24ee:	99 27       	eor	r25, r25
    24f0:	08 95       	ret

000024f2 <UART3_flush>:
void UART3_flush(void)
{
//	ATOMIC_BLOCK(ATOMIC_FORCEON) {
//		UART3_RxHead = UART3_RxTail;
//	} commented by mohab
	while(0 == UART3_Transmission_end);
    24f2:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <UART3_Transmission_end>
    24f6:	88 23       	and	r24, r24
    24f8:	e1 f3       	breq	.-8      	; 0x24f2 <UART3_flush>
} /* UART3_flush */
    24fa:	08 95       	ret

000024fc <RTE_drum_init>:


/*static uint16_t Conveyor_speed;*/
static uint16_t Drum_speed = 0;

void RTE_drum_init(void){
    24fc:	08 95       	ret

000024fe <RTE_get_Drum_speed>:
}


uint16_t RTE_get_Drum_speed(void){
	return Drum_speed;
}
    24fe:	80 91 dc 09 	lds	r24, 0x09DC	; 0x8009dc <Drum_speed>
    2502:	90 91 dd 09 	lds	r25, 0x09DD	; 0x8009dd <Drum_speed+0x1>
    2506:	08 95       	ret

00002508 <RTE_invertersetting_init>:
}

uint16_t RTE_get_Time_minute(void){
	xSemaphoreTake(Sema_Time_minute_handle,portMAX_DELAY);
	return Time_minute;
}
    2508:	0f 93       	push	r16
    250a:	03 e0       	ldi	r16, 0x03	; 3
    250c:	2f e8       	ldi	r18, 0x8F	; 143
    250e:	3a e0       	ldi	r19, 0x0A	; 10
    2510:	40 e0       	ldi	r20, 0x00	; 0
    2512:	50 e0       	ldi	r21, 0x00	; 0
    2514:	60 e0       	ldi	r22, 0x00	; 0
    2516:	81 e0       	ldi	r24, 0x01	; 1
    2518:	3e d5       	rcall	.+2684   	; 0x2f96 <xQueueGenericCreateStatic>
    251a:	90 93 af 0a 	sts	0x0AAF, r25	; 0x800aaf <Sema_Gear_ratio_handle+0x1>
    251e:	80 93 ae 0a 	sts	0x0AAE, r24	; 0x800aae <Sema_Gear_ratio_handle>
    2522:	2c e6       	ldi	r18, 0x6C	; 108
    2524:	3a e0       	ldi	r19, 0x0A	; 10
    2526:	40 e0       	ldi	r20, 0x00	; 0
    2528:	50 e0       	ldi	r21, 0x00	; 0
    252a:	60 e0       	ldi	r22, 0x00	; 0
    252c:	81 e0       	ldi	r24, 0x01	; 1
    252e:	33 d5       	rcall	.+2662   	; 0x2f96 <xQueueGenericCreateStatic>
    2530:	90 93 8c 0a 	sts	0x0A8C, r25	; 0x800a8c <Sema_RPM_max_handle+0x1>
    2534:	80 93 8b 0a 	sts	0x0A8B, r24	; 0x800a8b <Sema_RPM_max_handle>
    2538:	29 e4       	ldi	r18, 0x49	; 73
    253a:	3a e0       	ldi	r19, 0x0A	; 10
    253c:	40 e0       	ldi	r20, 0x00	; 0
    253e:	50 e0       	ldi	r21, 0x00	; 0
    2540:	60 e0       	ldi	r22, 0x00	; 0
    2542:	81 e0       	ldi	r24, 0x01	; 1
    2544:	28 d5       	rcall	.+2640   	; 0x2f96 <xQueueGenericCreateStatic>
    2546:	90 93 69 0a 	sts	0x0A69, r25	; 0x800a69 <Sema_Conveyor_length_handle+0x1>
    254a:	80 93 68 0a 	sts	0x0A68, r24	; 0x800a68 <Sema_Conveyor_length_handle>
    254e:	26 e2       	ldi	r18, 0x26	; 38
    2550:	3a e0       	ldi	r19, 0x0A	; 10
    2552:	40 e0       	ldi	r20, 0x00	; 0
    2554:	50 e0       	ldi	r21, 0x00	; 0
    2556:	60 e0       	ldi	r22, 0x00	; 0
    2558:	81 e0       	ldi	r24, 0x01	; 1
    255a:	1d d5       	rcall	.+2618   	; 0x2f96 <xQueueGenericCreateStatic>
    255c:	90 93 46 0a 	sts	0x0A46, r25	; 0x800a46 <Sema_Driver_diameter_handle+0x1>
    2560:	80 93 45 0a 	sts	0x0A45, r24	; 0x800a45 <Sema_Driver_diameter_handle>
    2564:	23 e0       	ldi	r18, 0x03	; 3
    2566:	3a e0       	ldi	r19, 0x0A	; 10
    2568:	40 e0       	ldi	r20, 0x00	; 0
    256a:	50 e0       	ldi	r21, 0x00	; 0
    256c:	60 e0       	ldi	r22, 0x00	; 0
    256e:	81 e0       	ldi	r24, 0x01	; 1
    2570:	12 d5       	rcall	.+2596   	; 0x2f96 <xQueueGenericCreateStatic>
    2572:	90 93 23 0a 	sts	0x0A23, r25	; 0x800a23 <Sema_Time_minute_handle+0x1>
    2576:	80 93 22 0a 	sts	0x0A22, r24	; 0x800a22 <Sema_Time_minute_handle>
    257a:	20 ee       	ldi	r18, 0xE0	; 224
    257c:	39 e0       	ldi	r19, 0x09	; 9
    257e:	40 e0       	ldi	r20, 0x00	; 0
    2580:	50 e0       	ldi	r21, 0x00	; 0
    2582:	60 e0       	ldi	r22, 0x00	; 0
    2584:	81 e0       	ldi	r24, 0x01	; 1
    2586:	07 d5       	rcall	.+2574   	; 0x2f96 <xQueueGenericCreateStatic>
    2588:	90 93 00 0a 	sts	0x0A00, r25	; 0x800a00 <Sema_Time_second_handle+0x1>
    258c:	80 93 ff 09 	sts	0x09FF, r24	; 0x8009ff <Sema_Time_second_handle>
    2590:	0f 91       	pop	r16
    2592:	08 95       	ret

00002594 <RTE_set_Gear_ratio>:
    2594:	90 93 8e 0a 	sts	0x0A8E, r25	; 0x800a8e <Gear_ratio+0x1>
    2598:	80 93 8d 0a 	sts	0x0A8D, r24	; 0x800a8d <Gear_ratio>
    259c:	20 e0       	ldi	r18, 0x00	; 0
    259e:	40 e0       	ldi	r20, 0x00	; 0
    25a0:	50 e0       	ldi	r21, 0x00	; 0
    25a2:	60 e0       	ldi	r22, 0x00	; 0
    25a4:	70 e0       	ldi	r23, 0x00	; 0
    25a6:	80 91 ae 0a 	lds	r24, 0x0AAE	; 0x800aae <Sema_Gear_ratio_handle>
    25aa:	90 91 af 0a 	lds	r25, 0x0AAF	; 0x800aaf <Sema_Gear_ratio_handle+0x1>
    25ae:	08 c5       	rjmp	.+2576   	; 0x2fc0 <xQueueGenericSend>
    25b0:	08 95       	ret

000025b2 <RTE_set_RPM_max>:
    25b2:	90 93 6b 0a 	sts	0x0A6B, r25	; 0x800a6b <RPM_max+0x1>
    25b6:	80 93 6a 0a 	sts	0x0A6A, r24	; 0x800a6a <RPM_max>
    25ba:	20 e0       	ldi	r18, 0x00	; 0
    25bc:	40 e0       	ldi	r20, 0x00	; 0
    25be:	50 e0       	ldi	r21, 0x00	; 0
    25c0:	60 e0       	ldi	r22, 0x00	; 0
    25c2:	70 e0       	ldi	r23, 0x00	; 0
    25c4:	80 91 8b 0a 	lds	r24, 0x0A8B	; 0x800a8b <Sema_RPM_max_handle>
    25c8:	90 91 8c 0a 	lds	r25, 0x0A8C	; 0x800a8c <Sema_RPM_max_handle+0x1>
    25cc:	f9 c4       	rjmp	.+2546   	; 0x2fc0 <xQueueGenericSend>
    25ce:	08 95       	ret

000025d0 <RTE_set_Conveyor_length>:
    25d0:	90 93 48 0a 	sts	0x0A48, r25	; 0x800a48 <Conveyor_length+0x1>
    25d4:	80 93 47 0a 	sts	0x0A47, r24	; 0x800a47 <Conveyor_length>
    25d8:	20 e0       	ldi	r18, 0x00	; 0
    25da:	40 e0       	ldi	r20, 0x00	; 0
    25dc:	50 e0       	ldi	r21, 0x00	; 0
    25de:	60 e0       	ldi	r22, 0x00	; 0
    25e0:	70 e0       	ldi	r23, 0x00	; 0
    25e2:	80 91 68 0a 	lds	r24, 0x0A68	; 0x800a68 <Sema_Conveyor_length_handle>
    25e6:	90 91 69 0a 	lds	r25, 0x0A69	; 0x800a69 <Sema_Conveyor_length_handle+0x1>
    25ea:	ea c4       	rjmp	.+2516   	; 0x2fc0 <xQueueGenericSend>
    25ec:	08 95       	ret

000025ee <RTE_set_Driver_diameter>:
    25ee:	90 93 25 0a 	sts	0x0A25, r25	; 0x800a25 <Driver_diameter+0x1>
    25f2:	80 93 24 0a 	sts	0x0A24, r24	; 0x800a24 <Driver_diameter>
    25f6:	20 e0       	ldi	r18, 0x00	; 0
    25f8:	40 e0       	ldi	r20, 0x00	; 0
    25fa:	50 e0       	ldi	r21, 0x00	; 0
    25fc:	60 e0       	ldi	r22, 0x00	; 0
    25fe:	70 e0       	ldi	r23, 0x00	; 0
    2600:	80 91 45 0a 	lds	r24, 0x0A45	; 0x800a45 <Sema_Driver_diameter_handle>
    2604:	90 91 46 0a 	lds	r25, 0x0A46	; 0x800a46 <Sema_Driver_diameter_handle+0x1>
    2608:	db c4       	rjmp	.+2486   	; 0x2fc0 <xQueueGenericSend>
    260a:	08 95       	ret

0000260c <RTE_set_Time_minute>:
    260c:	90 93 02 0a 	sts	0x0A02, r25	; 0x800a02 <Time_minute+0x1>
    2610:	80 93 01 0a 	sts	0x0A01, r24	; 0x800a01 <Time_minute>
    2614:	20 e0       	ldi	r18, 0x00	; 0
    2616:	40 e0       	ldi	r20, 0x00	; 0
    2618:	50 e0       	ldi	r21, 0x00	; 0
    261a:	60 e0       	ldi	r22, 0x00	; 0
    261c:	70 e0       	ldi	r23, 0x00	; 0
    261e:	80 91 22 0a 	lds	r24, 0x0A22	; 0x800a22 <Sema_Time_minute_handle>
    2622:	90 91 23 0a 	lds	r25, 0x0A23	; 0x800a23 <Sema_Time_minute_handle+0x1>
    2626:	cc c4       	rjmp	.+2456   	; 0x2fc0 <xQueueGenericSend>
    2628:	08 95       	ret

0000262a <RTE_set_Time_second>:

void RTE_set_Time_second(uint16_t u16Timesecond){
	Time_second = u16Timesecond;
    262a:	90 93 df 09 	sts	0x09DF, r25	; 0x8009df <Time_second+0x1>
    262e:	80 93 de 09 	sts	0x09DE, r24	; 0x8009de <Time_second>
	xSemaphoreGive(Sema_Time_second_handle);
    2632:	20 e0       	ldi	r18, 0x00	; 0
    2634:	40 e0       	ldi	r20, 0x00	; 0
    2636:	50 e0       	ldi	r21, 0x00	; 0
    2638:	60 e0       	ldi	r22, 0x00	; 0
    263a:	70 e0       	ldi	r23, 0x00	; 0
    263c:	80 91 ff 09 	lds	r24, 0x09FF	; 0x8009ff <Sema_Time_second_handle>
    2640:	90 91 00 0a 	lds	r25, 0x0A00	; 0x800a00 <Sema_Time_second_handle+0x1>
    2644:	bd c4       	rjmp	.+2426   	; 0x2fc0 <xQueueGenericSend>
    2646:	08 95       	ret

00002648 <RTE_levels_init>:

uint16_t RTE_get_tank_level(void)
{
	xSemaphoreTake(Sema_tank_level_handle,portMAX_DELAY);
	return tank_level ;
}
    2648:	0f 93       	push	r16
    264a:	03 e0       	ldi	r16, 0x03	; 3
    264c:	23 ed       	ldi	r18, 0xD3	; 211
    264e:	3a e0       	ldi	r19, 0x0A	; 10
    2650:	40 e0       	ldi	r20, 0x00	; 0
    2652:	50 e0       	ldi	r21, 0x00	; 0
    2654:	60 e0       	ldi	r22, 0x00	; 0
    2656:	81 e0       	ldi	r24, 0x01	; 1
    2658:	9e d4       	rcall	.+2364   	; 0x2f96 <xQueueGenericCreateStatic>
    265a:	90 93 f3 0a 	sts	0x0AF3, r25	; 0x800af3 <Sema_tank_level_handle+0x1>
    265e:	80 93 f2 0a 	sts	0x0AF2, r24	; 0x800af2 <Sema_tank_level_handle>
    2662:	20 eb       	ldi	r18, 0xB0	; 176
    2664:	3a e0       	ldi	r19, 0x0A	; 10
    2666:	40 e0       	ldi	r20, 0x00	; 0
    2668:	50 e0       	ldi	r21, 0x00	; 0
    266a:	60 e0       	ldi	r22, 0x00	; 0
    266c:	81 e0       	ldi	r24, 0x01	; 1
    266e:	93 d4       	rcall	.+2342   	; 0x2f96 <xQueueGenericCreateStatic>
    2670:	90 93 d0 0a 	sts	0x0AD0, r25	; 0x800ad0 <Sema_blancher_level_handle+0x1>
    2674:	80 93 cf 0a 	sts	0x0ACF, r24	; 0x800acf <Sema_blancher_level_handle>
    2678:	0f 91       	pop	r16
    267a:	08 95       	ret

0000267c <RTE_set_tank_level>:
    267c:	90 93 d2 0a 	sts	0x0AD2, r25	; 0x800ad2 <tank_level+0x1>
    2680:	80 93 d1 0a 	sts	0x0AD1, r24	; 0x800ad1 <tank_level>
    2684:	20 e0       	ldi	r18, 0x00	; 0
    2686:	40 e0       	ldi	r20, 0x00	; 0
    2688:	50 e0       	ldi	r21, 0x00	; 0
    268a:	60 e0       	ldi	r22, 0x00	; 0
    268c:	70 e0       	ldi	r23, 0x00	; 0
    268e:	80 91 f2 0a 	lds	r24, 0x0AF2	; 0x800af2 <Sema_tank_level_handle>
    2692:	90 91 f3 0a 	lds	r25, 0x0AF3	; 0x800af3 <Sema_tank_level_handle+0x1>
    2696:	94 c4       	rjmp	.+2344   	; 0x2fc0 <xQueueGenericSend>
    2698:	08 95       	ret

0000269a <RTE_set_blancher_level>:

void RTE_set_blancher_level(uint16_t u16blancher_level)
{
	tank_level = u16blancher_level ;
    269a:	90 93 d2 0a 	sts	0x0AD2, r25	; 0x800ad2 <tank_level+0x1>
    269e:	80 93 d1 0a 	sts	0x0AD1, r24	; 0x800ad1 <tank_level>
	xSemaphoreGive(Sema_blancher_level_handle);
    26a2:	20 e0       	ldi	r18, 0x00	; 0
    26a4:	40 e0       	ldi	r20, 0x00	; 0
    26a6:	50 e0       	ldi	r21, 0x00	; 0
    26a8:	60 e0       	ldi	r22, 0x00	; 0
    26aa:	70 e0       	ldi	r23, 0x00	; 0
    26ac:	80 91 cf 0a 	lds	r24, 0x0ACF	; 0x800acf <Sema_blancher_level_handle>
    26b0:	90 91 d0 0a 	lds	r25, 0x0AD0	; 0x800ad0 <Sema_blancher_level_handle+0x1>
    26b4:	85 c4       	rjmp	.+2314   	; 0x2fc0 <xQueueGenericSend>
    26b6:	08 95       	ret

000026b8 <RTE_init>:
#include "RTE_levels.h"
#include "RTE_temperature.h"
#include "RTE_main.h"

void RTE_init(void){
	RTE_drum_init();
    26b8:	21 df       	rcall	.-446    	; 0x24fc <RTE_drum_init>
	RTE_invertersetting_init();
    26ba:	26 df       	rcall	.-436    	; 0x2508 <RTE_invertersetting_init>
	RTE_operations_init();
    26bc:	03 d0       	rcall	.+6      	; 0x26c4 <RTE_operations_init>
	RTE_levels_init();
    26be:	c4 df       	rcall	.-120    	; 0x2648 <RTE_levels_init>
    26c0:	6d c0       	rjmp	.+218    	; 0x279c <RTE_temperature_init>
	RTE_temperature_init();
    26c2:	08 95       	ret

000026c4 <RTE_operations_init>:
    26c4:	0f 93       	push	r16
    26c6:	03 e0       	ldi	r16, 0x03	; 3
}

uint16_t RTE_get_Wash_Operation(void){
	xSemaphoreTake(Sema_Wash_Operation_handle,portMAX_DELAY);
	return Wash_Operation;
}
    26c8:	2f e5       	ldi	r18, 0x5F	; 95
    26ca:	3b e0       	ldi	r19, 0x0B	; 11
    26cc:	40 e0       	ldi	r20, 0x00	; 0
    26ce:	50 e0       	ldi	r21, 0x00	; 0
    26d0:	60 e0       	ldi	r22, 0x00	; 0
    26d2:	81 e0       	ldi	r24, 0x01	; 1
    26d4:	60 d4       	rcall	.+2240   	; 0x2f96 <xQueueGenericCreateStatic>
    26d6:	90 93 7f 0b 	sts	0x0B7F, r25	; 0x800b7f <Sema_System_on_handle+0x1>
    26da:	80 93 7e 0b 	sts	0x0B7E, r24	; 0x800b7e <Sema_System_on_handle>
    26de:	2c e3       	ldi	r18, 0x3C	; 60
    26e0:	3b e0       	ldi	r19, 0x0B	; 11
    26e2:	40 e0       	ldi	r20, 0x00	; 0
    26e4:	50 e0       	ldi	r21, 0x00	; 0
    26e6:	60 e0       	ldi	r22, 0x00	; 0
    26e8:	81 e0       	ldi	r24, 0x01	; 1
    26ea:	55 d4       	rcall	.+2218   	; 0x2f96 <xQueueGenericCreateStatic>
    26ec:	90 93 5c 0b 	sts	0x0B5C, r25	; 0x800b5c <Sema_Start_blancher_Operation_handle+0x1>
    26f0:	80 93 5b 0b 	sts	0x0B5B, r24	; 0x800b5b <Sema_Start_blancher_Operation_handle>
    26f4:	29 e1       	ldi	r18, 0x19	; 25
    26f6:	3b e0       	ldi	r19, 0x0B	; 11
    26f8:	40 e0       	ldi	r20, 0x00	; 0
    26fa:	50 e0       	ldi	r21, 0x00	; 0
    26fc:	60 e0       	ldi	r22, 0x00	; 0
    26fe:	81 e0       	ldi	r24, 0x01	; 1
    2700:	4a d4       	rcall	.+2196   	; 0x2f96 <xQueueGenericCreateStatic>
    2702:	90 93 39 0b 	sts	0x0B39, r25	; 0x800b39 <Sema_Wash_Operation_handle+0x1>
    2706:	80 93 38 0b 	sts	0x0B38, r24	; 0x800b38 <Sema_Wash_Operation_handle>
    270a:	26 ef       	ldi	r18, 0xF6	; 246
    270c:	3a e0       	ldi	r19, 0x0A	; 10
    270e:	40 e0       	ldi	r20, 0x00	; 0
    2710:	50 e0       	ldi	r21, 0x00	; 0
    2712:	60 e0       	ldi	r22, 0x00	; 0
    2714:	81 e0       	ldi	r24, 0x01	; 1
    2716:	3f d4       	rcall	.+2174   	; 0x2f96 <xQueueGenericCreateStatic>
    2718:	90 93 16 0b 	sts	0x0B16, r25	; 0x800b16 <Sema_Tank_Calibration_Operation_handle+0x1>
    271c:	80 93 15 0b 	sts	0x0B15, r24	; 0x800b15 <Sema_Tank_Calibration_Operation_handle>
    2720:	0f 91       	pop	r16
    2722:	08 95       	ret

00002724 <RTE_set_System_on>:
    2724:	90 93 5e 0b 	sts	0x0B5E, r25	; 0x800b5e <System_on+0x1>
    2728:	80 93 5d 0b 	sts	0x0B5D, r24	; 0x800b5d <System_on>
    272c:	20 e0       	ldi	r18, 0x00	; 0
    272e:	40 e0       	ldi	r20, 0x00	; 0
    2730:	50 e0       	ldi	r21, 0x00	; 0
    2732:	60 e0       	ldi	r22, 0x00	; 0
    2734:	70 e0       	ldi	r23, 0x00	; 0
    2736:	80 91 7e 0b 	lds	r24, 0x0B7E	; 0x800b7e <Sema_System_on_handle>
    273a:	90 91 7f 0b 	lds	r25, 0x0B7F	; 0x800b7f <Sema_System_on_handle+0x1>
    273e:	40 c4       	rjmp	.+2176   	; 0x2fc0 <xQueueGenericSend>
    2740:	08 95       	ret

00002742 <RTE_set_Start_blancher_Operation>:
    2742:	90 93 3b 0b 	sts	0x0B3B, r25	; 0x800b3b <Start_blancher_Operation+0x1>
    2746:	80 93 3a 0b 	sts	0x0B3A, r24	; 0x800b3a <Start_blancher_Operation>
    274a:	20 e0       	ldi	r18, 0x00	; 0
    274c:	40 e0       	ldi	r20, 0x00	; 0
    274e:	50 e0       	ldi	r21, 0x00	; 0
    2750:	60 e0       	ldi	r22, 0x00	; 0
    2752:	70 e0       	ldi	r23, 0x00	; 0
    2754:	80 91 5b 0b 	lds	r24, 0x0B5B	; 0x800b5b <Sema_Start_blancher_Operation_handle>
    2758:	90 91 5c 0b 	lds	r25, 0x0B5C	; 0x800b5c <Sema_Start_blancher_Operation_handle+0x1>
    275c:	31 c4       	rjmp	.+2146   	; 0x2fc0 <xQueueGenericSend>
    275e:	08 95       	ret

00002760 <RTE_set_Wash_Operation>:
    2760:	90 93 18 0b 	sts	0x0B18, r25	; 0x800b18 <Wash_Operation+0x1>
    2764:	80 93 17 0b 	sts	0x0B17, r24	; 0x800b17 <Wash_Operation>
    2768:	20 e0       	ldi	r18, 0x00	; 0
    276a:	40 e0       	ldi	r20, 0x00	; 0
    276c:	50 e0       	ldi	r21, 0x00	; 0
    276e:	60 e0       	ldi	r22, 0x00	; 0
    2770:	70 e0       	ldi	r23, 0x00	; 0
    2772:	80 91 38 0b 	lds	r24, 0x0B38	; 0x800b38 <Sema_Wash_Operation_handle>
    2776:	90 91 39 0b 	lds	r25, 0x0B39	; 0x800b39 <Sema_Wash_Operation_handle+0x1>
    277a:	22 c4       	rjmp	.+2116   	; 0x2fc0 <xQueueGenericSend>
    277c:	08 95       	ret

0000277e <RTE_set_Tank_Calibration_Operation>:




void RTE_set_Tank_Calibration_Operation(uint16_t u16Tank_Calibration_Operation){
	Tank_Calibration_Operation = u16Tank_Calibration_Operation;
    277e:	90 93 f5 0a 	sts	0x0AF5, r25	; 0x800af5 <Tank_Calibration_Operation+0x1>
    2782:	80 93 f4 0a 	sts	0x0AF4, r24	; 0x800af4 <Tank_Calibration_Operation>
	xSemaphoreGive(Sema_Tank_Calibration_Operation_handle);
    2786:	20 e0       	ldi	r18, 0x00	; 0
    2788:	40 e0       	ldi	r20, 0x00	; 0
    278a:	50 e0       	ldi	r21, 0x00	; 0
    278c:	60 e0       	ldi	r22, 0x00	; 0
    278e:	70 e0       	ldi	r23, 0x00	; 0
    2790:	80 91 15 0b 	lds	r24, 0x0B15	; 0x800b15 <Sema_Tank_Calibration_Operation_handle>
    2794:	90 91 16 0b 	lds	r25, 0x0B16	; 0x800b16 <Sema_Tank_Calibration_Operation_handle+0x1>
    2798:	13 c4       	rjmp	.+2086   	; 0x2fc0 <xQueueGenericSend>
    279a:	08 95       	ret

0000279c <RTE_temperature_init>:
}

uint16_t RTE_get_Negative_offset_temperature(void){
	xSemaphoreTake(Sema_Negative_offset_temp_handle,portMAX_DELAY);
	return Negative_offset_temp;
}
    279c:	0f 93       	push	r16
    279e:	03 e0       	ldi	r16, 0x03	; 3
    27a0:	26 e5       	ldi	r18, 0x56	; 86
    27a2:	3c e0       	ldi	r19, 0x0C	; 12
    27a4:	40 e0       	ldi	r20, 0x00	; 0
    27a6:	50 e0       	ldi	r21, 0x00	; 0
    27a8:	60 e0       	ldi	r22, 0x00	; 0
    27aa:	81 e0       	ldi	r24, 0x01	; 1
    27ac:	f4 d3       	rcall	.+2024   	; 0x2f96 <xQueueGenericCreateStatic>
    27ae:	90 93 76 0c 	sts	0x0C76, r25	; 0x800c76 <Sema_Sleep_temp_handle+0x1>
    27b2:	80 93 75 0c 	sts	0x0C75, r24	; 0x800c75 <Sema_Sleep_temp_handle>
    27b6:	23 e3       	ldi	r18, 0x33	; 51
    27b8:	3c e0       	ldi	r19, 0x0C	; 12
    27ba:	40 e0       	ldi	r20, 0x00	; 0
    27bc:	50 e0       	ldi	r21, 0x00	; 0
    27be:	60 e0       	ldi	r22, 0x00	; 0
    27c0:	81 e0       	ldi	r24, 0x01	; 1
    27c2:	e9 d3       	rcall	.+2002   	; 0x2f96 <xQueueGenericCreateStatic>
    27c4:	90 93 53 0c 	sts	0x0C53, r25	; 0x800c53 <Sema_Set_temp_handle+0x1>
    27c8:	80 93 52 0c 	sts	0x0C52, r24	; 0x800c52 <Sema_Set_temp_handle>
    27cc:	20 e1       	ldi	r18, 0x10	; 16
    27ce:	3c e0       	ldi	r19, 0x0C	; 12
    27d0:	40 e0       	ldi	r20, 0x00	; 0
    27d2:	50 e0       	ldi	r21, 0x00	; 0
    27d4:	60 e0       	ldi	r22, 0x00	; 0
    27d6:	81 e0       	ldi	r24, 0x01	; 1
    27d8:	de d3       	rcall	.+1980   	; 0x2f96 <xQueueGenericCreateStatic>
    27da:	90 93 30 0c 	sts	0x0C30, r25	; 0x800c30 <Sema_threshold_set_temp_handle+0x1>
    27de:	80 93 2f 0c 	sts	0x0C2F, r24	; 0x800c2f <Sema_threshold_set_temp_handle>
    27e2:	2d ee       	ldi	r18, 0xED	; 237
    27e4:	3b e0       	ldi	r19, 0x0B	; 11
    27e6:	40 e0       	ldi	r20, 0x00	; 0
    27e8:	50 e0       	ldi	r21, 0x00	; 0
    27ea:	60 e0       	ldi	r22, 0x00	; 0
    27ec:	81 e0       	ldi	r24, 0x01	; 1
    27ee:	d3 d3       	rcall	.+1958   	; 0x2f96 <xQueueGenericCreateStatic>
    27f0:	90 93 0d 0c 	sts	0x0C0D, r25	; 0x800c0d <Sema_threshold_sleep_temp_handle+0x1>
    27f4:	80 93 0c 0c 	sts	0x0C0C, r24	; 0x800c0c <Sema_threshold_sleep_temp_handle>
    27f8:	2a ec       	ldi	r18, 0xCA	; 202
    27fa:	3b e0       	ldi	r19, 0x0B	; 11
    27fc:	40 e0       	ldi	r20, 0x00	; 0
    27fe:	50 e0       	ldi	r21, 0x00	; 0
    2800:	60 e0       	ldi	r22, 0x00	; 0
    2802:	81 e0       	ldi	r24, 0x01	; 1
    2804:	c8 d3       	rcall	.+1936   	; 0x2f96 <xQueueGenericCreateStatic>
    2806:	90 93 ea 0b 	sts	0x0BEA, r25	; 0x800bea <Sema_Positive_offset_temp_handle+0x1>
    280a:	80 93 e9 0b 	sts	0x0BE9, r24	; 0x800be9 <Sema_Positive_offset_temp_handle>
    280e:	27 ea       	ldi	r18, 0xA7	; 167
    2810:	3b e0       	ldi	r19, 0x0B	; 11
    2812:	40 e0       	ldi	r20, 0x00	; 0
    2814:	50 e0       	ldi	r21, 0x00	; 0
    2816:	60 e0       	ldi	r22, 0x00	; 0
    2818:	81 e0       	ldi	r24, 0x01	; 1
    281a:	bd d3       	rcall	.+1914   	; 0x2f96 <xQueueGenericCreateStatic>
    281c:	90 93 c7 0b 	sts	0x0BC7, r25	; 0x800bc7 <Sema_Negative_offset_temp_handle+0x1>
    2820:	80 93 c6 0b 	sts	0x0BC6, r24	; 0x800bc6 <Sema_Negative_offset_temp_handle>
    2824:	24 e8       	ldi	r18, 0x84	; 132
    2826:	3b e0       	ldi	r19, 0x0B	; 11
    2828:	40 e0       	ldi	r20, 0x00	; 0
    282a:	50 e0       	ldi	r21, 0x00	; 0
    282c:	60 e0       	ldi	r22, 0x00	; 0
    282e:	81 e0       	ldi	r24, 0x01	; 1
    2830:	b2 d3       	rcall	.+1892   	; 0x2f96 <xQueueGenericCreateStatic>
    2832:	90 93 a4 0b 	sts	0x0BA4, r25	; 0x800ba4 <Sema_APP_current_temp_handle+0x1>
    2836:	80 93 a3 0b 	sts	0x0BA3, r24	; 0x800ba3 <Sema_APP_current_temp_handle>
    283a:	0f 91       	pop	r16
    283c:	08 95       	ret

0000283e <RTE_set_Sleep_temperature>:
    283e:	90 93 55 0c 	sts	0x0C55, r25	; 0x800c55 <Sleep_temp+0x1>
    2842:	80 93 54 0c 	sts	0x0C54, r24	; 0x800c54 <Sleep_temp>
    2846:	20 e0       	ldi	r18, 0x00	; 0
    2848:	40 e0       	ldi	r20, 0x00	; 0
    284a:	50 e0       	ldi	r21, 0x00	; 0
    284c:	60 e0       	ldi	r22, 0x00	; 0
    284e:	70 e0       	ldi	r23, 0x00	; 0
    2850:	80 91 75 0c 	lds	r24, 0x0C75	; 0x800c75 <Sema_Sleep_temp_handle>
    2854:	90 91 76 0c 	lds	r25, 0x0C76	; 0x800c76 <Sema_Sleep_temp_handle+0x1>
    2858:	b3 c3       	rjmp	.+1894   	; 0x2fc0 <xQueueGenericSend>
    285a:	08 95       	ret

0000285c <RTE_set_Set_temperature>:
    285c:	90 93 32 0c 	sts	0x0C32, r25	; 0x800c32 <Set_temp+0x1>
    2860:	80 93 31 0c 	sts	0x0C31, r24	; 0x800c31 <Set_temp>
    2864:	20 e0       	ldi	r18, 0x00	; 0
    2866:	40 e0       	ldi	r20, 0x00	; 0
    2868:	50 e0       	ldi	r21, 0x00	; 0
    286a:	60 e0       	ldi	r22, 0x00	; 0
    286c:	70 e0       	ldi	r23, 0x00	; 0
    286e:	80 91 52 0c 	lds	r24, 0x0C52	; 0x800c52 <Sema_Set_temp_handle>
    2872:	90 91 53 0c 	lds	r25, 0x0C53	; 0x800c53 <Sema_Set_temp_handle+0x1>
    2876:	a4 c3       	rjmp	.+1864   	; 0x2fc0 <xQueueGenericSend>
    2878:	08 95       	ret

0000287a <RTE_set_Threshold_set_temperature>:
    287a:	90 93 0f 0c 	sts	0x0C0F, r25	; 0x800c0f <Threshold_set_temp+0x1>
    287e:	80 93 0e 0c 	sts	0x0C0E, r24	; 0x800c0e <Threshold_set_temp>
    2882:	20 e0       	ldi	r18, 0x00	; 0
    2884:	40 e0       	ldi	r20, 0x00	; 0
    2886:	50 e0       	ldi	r21, 0x00	; 0
    2888:	60 e0       	ldi	r22, 0x00	; 0
    288a:	70 e0       	ldi	r23, 0x00	; 0
    288c:	80 91 2f 0c 	lds	r24, 0x0C2F	; 0x800c2f <Sema_threshold_set_temp_handle>
    2890:	90 91 30 0c 	lds	r25, 0x0C30	; 0x800c30 <Sema_threshold_set_temp_handle+0x1>
    2894:	95 c3       	rjmp	.+1834   	; 0x2fc0 <xQueueGenericSend>
    2896:	08 95       	ret

00002898 <RTE_set_Threshold_sleep_temperature>:
    2898:	90 93 ec 0b 	sts	0x0BEC, r25	; 0x800bec <Threshold_sleep_temp+0x1>
    289c:	80 93 eb 0b 	sts	0x0BEB, r24	; 0x800beb <Threshold_sleep_temp>
    28a0:	20 e0       	ldi	r18, 0x00	; 0
    28a2:	40 e0       	ldi	r20, 0x00	; 0
    28a4:	50 e0       	ldi	r21, 0x00	; 0
    28a6:	60 e0       	ldi	r22, 0x00	; 0
    28a8:	70 e0       	ldi	r23, 0x00	; 0
    28aa:	80 91 0c 0c 	lds	r24, 0x0C0C	; 0x800c0c <Sema_threshold_sleep_temp_handle>
    28ae:	90 91 0d 0c 	lds	r25, 0x0C0D	; 0x800c0d <Sema_threshold_sleep_temp_handle+0x1>
    28b2:	86 c3       	rjmp	.+1804   	; 0x2fc0 <xQueueGenericSend>
    28b4:	08 95       	ret

000028b6 <RTE_set_Positive_offset_temperature>:
    28b6:	90 93 c9 0b 	sts	0x0BC9, r25	; 0x800bc9 <Positive_offset_temp+0x1>
    28ba:	80 93 c8 0b 	sts	0x0BC8, r24	; 0x800bc8 <Positive_offset_temp>
    28be:	20 e0       	ldi	r18, 0x00	; 0
    28c0:	40 e0       	ldi	r20, 0x00	; 0
    28c2:	50 e0       	ldi	r21, 0x00	; 0
    28c4:	60 e0       	ldi	r22, 0x00	; 0
    28c6:	70 e0       	ldi	r23, 0x00	; 0
    28c8:	80 91 e9 0b 	lds	r24, 0x0BE9	; 0x800be9 <Sema_Positive_offset_temp_handle>
    28cc:	90 91 ea 0b 	lds	r25, 0x0BEA	; 0x800bea <Sema_Positive_offset_temp_handle+0x1>
    28d0:	77 c3       	rjmp	.+1774   	; 0x2fc0 <xQueueGenericSend>
    28d2:	08 95       	ret

000028d4 <RTE_set_Negative_offset_temperature>:
    28d4:	90 93 a6 0b 	sts	0x0BA6, r25	; 0x800ba6 <Negative_offset_temp+0x1>
    28d8:	80 93 a5 0b 	sts	0x0BA5, r24	; 0x800ba5 <Negative_offset_temp>
    28dc:	20 e0       	ldi	r18, 0x00	; 0
    28de:	40 e0       	ldi	r20, 0x00	; 0
    28e0:	50 e0       	ldi	r21, 0x00	; 0
    28e2:	60 e0       	ldi	r22, 0x00	; 0
    28e4:	70 e0       	ldi	r23, 0x00	; 0
    28e6:	80 91 c6 0b 	lds	r24, 0x0BC6	; 0x800bc6 <Sema_Negative_offset_temp_handle>
    28ea:	90 91 c7 0b 	lds	r25, 0x0BC7	; 0x800bc7 <Sema_Negative_offset_temp_handle+0x1>
    28ee:	68 c3       	rjmp	.+1744   	; 0x2fc0 <xQueueGenericSend>
    28f0:	08 95       	ret

000028f2 <RTE_set_Current_temperature>:




void RTE_set_Current_temperature(uint16_t u16Currenttemp){
	Current_temperature = u16Currenttemp;
    28f2:	90 93 81 0b 	sts	0x0B81, r25	; 0x800b81 <Current_temperature+0x1>
    28f6:	80 93 80 0b 	sts	0x0B80, r24	; 0x800b80 <Current_temperature>
    28fa:	08 95       	ret

000028fc <RTE_get_Current_temperature>:
}

uint16_t RTE_get_Current_temperature(void){
	return Current_temperature;
}
    28fc:	80 91 80 0b 	lds	r24, 0x0B80	; 0x800b80 <Current_temperature>
    2900:	90 91 81 0b 	lds	r25, 0x0B81	; 0x800b81 <Current_temperature+0x1>
    2904:	08 95       	ret

00002906 <RTE_set_app_Current_temperature>:

void RTE_set_app_Current_temperature(uint16_t u16Currenttemp){
	APP_current_temp = u16Currenttemp;
    2906:	90 93 83 0b 	sts	0x0B83, r25	; 0x800b83 <APP_current_temp+0x1>
    290a:	80 93 82 0b 	sts	0x0B82, r24	; 0x800b82 <APP_current_temp>
	xSemaphoreGive(Sema_APP_current_temp_handle);
    290e:	20 e0       	ldi	r18, 0x00	; 0
    2910:	40 e0       	ldi	r20, 0x00	; 0
    2912:	50 e0       	ldi	r21, 0x00	; 0
    2914:	60 e0       	ldi	r22, 0x00	; 0
    2916:	70 e0       	ldi	r23, 0x00	; 0
    2918:	80 91 a3 0b 	lds	r24, 0x0BA3	; 0x800ba3 <Sema_APP_current_temp_handle>
    291c:	90 91 a4 0b 	lds	r25, 0x0BA4	; 0x800ba4 <Sema_APP_current_temp_handle+0x1>
    2920:	4f c3       	rjmp	.+1694   	; 0x2fc0 <xQueueGenericSend>
    2922:	08 95       	ret

00002924 <vApplicationStackOverflowHook>:
	   This routine will never return.
	   This routine is referenced in the task.c file of FreeRTOS as an extern.
	\*---------------------------------------------------------------------------*/

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
	DDRB  |= _BV(DDB7);
    2924:	27 9a       	sbi	0x04, 7	; 4
	PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    2926:	2f 9a       	sbi	0x05, 7	; 5
    2928:	2f ef       	ldi	r18, 0xFF	; 255
    292a:	87 ea       	ldi	r24, 0xA7	; 167
    292c:	91 e6       	ldi	r25, 0x61	; 97
    292e:	21 50       	subi	r18, 0x01	; 1
    2930:	80 40       	sbci	r24, 0x00	; 0
    2932:	90 40       	sbci	r25, 0x00	; 0
    2934:	e1 f7       	brne	.-8      	; 0x292e <vApplicationStackOverflowHook+0xa>
    2936:	00 c0       	rjmp	.+0      	; 0x2938 <vApplicationStackOverflowHook+0x14>
    2938:	00 00       	nop
	for(;;)
	{
		_delay_ms(2000);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
		PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED slow blink.
    293a:	1f 9a       	sbi	0x03, 7	; 3
    293c:	f5 cf       	rjmp	.-22     	; 0x2928 <vApplicationStackOverflowHook+0x4>

0000293e <vApplicationGetIdleTaskMemory>:
                                    configSTACK_DEPTH_TYPE *pulIdleTaskStackSize )
{
    static StaticTask_t xIdleTaskTCB;
    static StackType_t uxIdleTaskStack[ configMINIMAL_STACK_SIZE ];

    *ppxIdleTaskTCBBuffer = &xIdleTaskTCB;
    293e:	2b e4       	ldi	r18, 0x4B	; 75
    2940:	3d e0       	ldi	r19, 0x0D	; 13
    2942:	fc 01       	movw	r30, r24
    2944:	31 83       	std	Z+1, r19	; 0x01
    2946:	20 83       	st	Z, r18
    *ppxIdleTaskStackBuffer = uxIdleTaskStack;
    2948:	86 ef       	ldi	r24, 0xF6	; 246
    294a:	9c e0       	ldi	r25, 0x0C	; 12
    294c:	fb 01       	movw	r30, r22
    294e:	91 83       	std	Z+1, r25	; 0x01
    2950:	80 83       	st	Z, r24
    *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
    2952:	85 e5       	ldi	r24, 0x55	; 85
    2954:	90 e0       	ldi	r25, 0x00	; 0
    2956:	fa 01       	movw	r30, r20
    2958:	91 83       	std	Z+1, r25	; 0x01
    295a:	80 83       	st	Z, r24
    295c:	08 95       	ret

0000295e <vApplicationGetTimerTaskMemory>:
                                     configSTACK_DEPTH_TYPE *pulTimerTaskStackSize )
{
    static StaticTask_t xTimerTaskTCB;
    static StackType_t uxTimerTaskStack[ configTIMER_TASK_STACK_DEPTH ];

    *ppxTimerTaskTCBBuffer = &xTimerTaskTCB;
    295e:	2c ec       	ldi	r18, 0xCC	; 204
    2960:	3c e0       	ldi	r19, 0x0C	; 12
    2962:	fc 01       	movw	r30, r24
    2964:	31 83       	std	Z+1, r19	; 0x01
    2966:	20 83       	st	Z, r18
    *ppxTimerTaskStackBuffer = uxTimerTaskStack;
    2968:	87 e7       	ldi	r24, 0x77	; 119
    296a:	9c e0       	ldi	r25, 0x0C	; 12
    296c:	fb 01       	movw	r30, r22
    296e:	91 83       	std	Z+1, r25	; 0x01
    2970:	80 83       	st	Z, r24
    *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
    2972:	85 e5       	ldi	r24, 0x55	; 85
    2974:	90 e0       	ldi	r25, 0x00	; 0
    2976:	fa 01       	movw	r30, r20
    2978:	91 83       	std	Z+1, r25	; 0x01
    297a:	80 83       	st	Z, r24
    297c:	08 95       	ret

0000297e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    297e:	fc 01       	movw	r30, r24
    /* The list structure contains a list item which is used to mark the
    end of the list.  To initialise the list the list end is inserted
    as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );            /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    2980:	03 96       	adiw	r24, 0x03	; 3
    2982:	92 83       	std	Z+2, r25	; 0x02
    2984:	81 83       	std	Z+1, r24	; 0x01

    /* The list end value is the highest possible value in the list to
    ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
    2986:	2f ef       	ldi	r18, 0xFF	; 255
    2988:	3f ef       	ldi	r19, 0xFF	; 255
    298a:	34 83       	std	Z+4, r19	; 0x04
    298c:	23 83       	std	Z+3, r18	; 0x03

    /* The list end next and previous pointers point to itself so we know
    when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );    /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    298e:	96 83       	std	Z+6, r25	; 0x06
    2990:	85 83       	std	Z+5, r24	; 0x05
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    2992:	90 87       	std	Z+8, r25	; 0x08
    2994:	87 83       	std	Z+7, r24	; 0x07

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    2996:	10 82       	st	Z, r1
    2998:	08 95       	ret

0000299a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
    299a:	fc 01       	movw	r30, r24
    299c:	11 86       	std	Z+9, r1	; 0x09
    299e:	10 86       	std	Z+8, r1	; 0x08
    29a0:	08 95       	ret

000029a2 <vListInsertEnd>:
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    29a2:	cf 93       	push	r28
    29a4:	df 93       	push	r29
    29a6:	9c 01       	movw	r18, r24
    29a8:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
    29aa:	dc 01       	movw	r26, r24
    29ac:	11 96       	adiw	r26, 0x01	; 1
    29ae:	cd 91       	ld	r28, X+
    29b0:	dc 91       	ld	r29, X
    29b2:	12 97       	sbiw	r26, 0x02	; 2
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
    makes the new list item the last item to be removed by a call to
    listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
    29b4:	d3 83       	std	Z+3, r29	; 0x03
    29b6:	c2 83       	std	Z+2, r28	; 0x02
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    29b8:	8c 81       	ldd	r24, Y+4	; 0x04
    29ba:	9d 81       	ldd	r25, Y+5	; 0x05
    29bc:	95 83       	std	Z+5, r25	; 0x05
    29be:	84 83       	std	Z+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
    29c0:	8c 81       	ldd	r24, Y+4	; 0x04
    29c2:	9d 81       	ldd	r25, Y+5	; 0x05
    29c4:	dc 01       	movw	r26, r24
    29c6:	13 96       	adiw	r26, 0x03	; 3
    29c8:	7c 93       	st	X, r23
    29ca:	6e 93       	st	-X, r22
    29cc:	12 97       	sbiw	r26, 0x02	; 2
    pxIndex->pxPrevious = pxNewListItem;
    29ce:	7d 83       	std	Y+5, r23	; 0x05
    29d0:	6c 83       	std	Y+4, r22	; 0x04

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
    29d2:	31 87       	std	Z+9, r19	; 0x09
    29d4:	20 87       	std	Z+8, r18	; 0x08

    ( pxList->uxNumberOfItems )++;
    29d6:	f9 01       	movw	r30, r18
    29d8:	80 81       	ld	r24, Z
    29da:	8f 5f       	subi	r24, 0xFF	; 255
    29dc:	80 83       	st	Z, r24
}
    29de:	df 91       	pop	r29
    29e0:	cf 91       	pop	r28
    29e2:	08 95       	ret

000029e4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    29e4:	cf 93       	push	r28
    29e6:	df 93       	push	r29
    29e8:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    29ea:	48 81       	ld	r20, Y
    29ec:	59 81       	ldd	r21, Y+1	; 0x01
    new list item should be placed after it.  This ensures that TCBs which are
    stored in ready lists (all of which have the same xItemValue value) get a
    share of the CPU.  However, if the xItemValue is the same as the back marker
    the iteration loop below will not end.  Therefore the value is checked
    first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
    29ee:	4f 3f       	cpi	r20, 0xFF	; 255
    29f0:	2f ef       	ldi	r18, 0xFF	; 255
    29f2:	52 07       	cpc	r21, r18
    29f4:	21 f4       	brne	.+8      	; 0x29fe <vListInsert+0x1a>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
    29f6:	fc 01       	movw	r30, r24
    29f8:	a7 81       	ldd	r26, Z+7	; 0x07
    29fa:	b0 85       	ldd	r27, Z+8	; 0x08
    29fc:	0d c0       	rjmp	.+26     	; 0x2a18 <vListInsert+0x34>
            4) Using a queue or semaphore before it has been initialised or
               before the scheduler has been started (are interrupts firing
               before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
    29fe:	dc 01       	movw	r26, r24
    2a00:	13 96       	adiw	r26, 0x03	; 3
    2a02:	01 c0       	rjmp	.+2      	; 0x2a06 <vListInsert+0x22>
    2a04:	df 01       	movw	r26, r30
    2a06:	12 96       	adiw	r26, 0x02	; 2
    2a08:	ed 91       	ld	r30, X+
    2a0a:	fc 91       	ld	r31, X
    2a0c:	13 97       	sbiw	r26, 0x03	; 3
    2a0e:	20 81       	ld	r18, Z
    2a10:	31 81       	ldd	r19, Z+1	; 0x01
    2a12:	42 17       	cp	r20, r18
    2a14:	53 07       	cpc	r21, r19
    2a16:	b0 f7       	brcc	.-20     	; 0x2a04 <vListInsert+0x20>
            /* There is nothing to do here, just iterating to the wanted
            insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
    2a18:	12 96       	adiw	r26, 0x02	; 2
    2a1a:	ed 91       	ld	r30, X+
    2a1c:	fc 91       	ld	r31, X
    2a1e:	13 97       	sbiw	r26, 0x03	; 3
    2a20:	fb 83       	std	Y+3, r31	; 0x03
    2a22:	ea 83       	std	Y+2, r30	; 0x02
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    2a24:	d5 83       	std	Z+5, r29	; 0x05
    2a26:	c4 83       	std	Z+4, r28	; 0x04
    pxNewListItem->pxPrevious = pxIterator;
    2a28:	bd 83       	std	Y+5, r27	; 0x05
    2a2a:	ac 83       	std	Y+4, r26	; 0x04
    pxIterator->pxNext = pxNewListItem;
    2a2c:	13 96       	adiw	r26, 0x03	; 3
    2a2e:	dc 93       	st	X, r29
    2a30:	ce 93       	st	-X, r28
    2a32:	12 97       	sbiw	r26, 0x02	; 2

    /* Remember which list the item is in.  This allows fast removal of the
    item later. */
    pxNewListItem->pxContainer = pxList;
    2a34:	99 87       	std	Y+9, r25	; 0x09
    2a36:	88 87       	std	Y+8, r24	; 0x08

    ( pxList->uxNumberOfItems )++;
    2a38:	fc 01       	movw	r30, r24
    2a3a:	20 81       	ld	r18, Z
    2a3c:	2f 5f       	subi	r18, 0xFF	; 255
    2a3e:	20 83       	st	Z, r18
}
    2a40:	df 91       	pop	r29
    2a42:	cf 91       	pop	r28
    2a44:	08 95       	ret

00002a46 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    2a46:	cf 93       	push	r28
    2a48:	df 93       	push	r29
    2a4a:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
    2a4c:	a0 85       	ldd	r26, Z+8	; 0x08
    2a4e:	b1 85       	ldd	r27, Z+9	; 0x09

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    2a50:	c2 81       	ldd	r28, Z+2	; 0x02
    2a52:	d3 81       	ldd	r29, Z+3	; 0x03
    2a54:	84 81       	ldd	r24, Z+4	; 0x04
    2a56:	95 81       	ldd	r25, Z+5	; 0x05
    2a58:	9d 83       	std	Y+5, r25	; 0x05
    2a5a:	8c 83       	std	Y+4, r24	; 0x04
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    2a5c:	c4 81       	ldd	r28, Z+4	; 0x04
    2a5e:	d5 81       	ldd	r29, Z+5	; 0x05
    2a60:	82 81       	ldd	r24, Z+2	; 0x02
    2a62:	93 81       	ldd	r25, Z+3	; 0x03
    2a64:	9b 83       	std	Y+3, r25	; 0x03
    2a66:	8a 83       	std	Y+2, r24	; 0x02

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
    2a68:	11 96       	adiw	r26, 0x01	; 1
    2a6a:	8d 91       	ld	r24, X+
    2a6c:	9c 91       	ld	r25, X
    2a6e:	12 97       	sbiw	r26, 0x02	; 2
    2a70:	e8 17       	cp	r30, r24
    2a72:	f9 07       	cpc	r31, r25
    2a74:	31 f4       	brne	.+12     	; 0x2a82 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
    2a76:	84 81       	ldd	r24, Z+4	; 0x04
    2a78:	95 81       	ldd	r25, Z+5	; 0x05
    2a7a:	12 96       	adiw	r26, 0x02	; 2
    2a7c:	9c 93       	st	X, r25
    2a7e:	8e 93       	st	-X, r24
    2a80:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
    2a82:	11 86       	std	Z+9, r1	; 0x09
    2a84:	10 86       	std	Z+8, r1	; 0x08
    ( pxList->uxNumberOfItems )--;
    2a86:	8c 91       	ld	r24, X
    2a88:	81 50       	subi	r24, 0x01	; 1
    2a8a:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
    2a8c:	8c 91       	ld	r24, X
}
    2a8e:	df 91       	pop	r29
    2a90:	cf 91       	pop	r28
    2a92:	08 95       	ret

00002a94 <pxPortInitialiseStack>:
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
    2a94:	31 e1       	ldi	r19, 0x11	; 17
    2a96:	fc 01       	movw	r30, r24
    2a98:	30 83       	st	Z, r19
    2a9a:	31 97       	sbiw	r30, 0x01	; 1
    2a9c:	22 e2       	ldi	r18, 0x22	; 34
    2a9e:	20 83       	st	Z, r18
    2aa0:	31 97       	sbiw	r30, 0x01	; 1
    2aa2:	a3 e3       	ldi	r26, 0x33	; 51
    2aa4:	a0 83       	st	Z, r26
    2aa6:	31 97       	sbiw	r30, 0x01	; 1
    2aa8:	60 83       	st	Z, r22
    2aaa:	31 97       	sbiw	r30, 0x01	; 1
    2aac:	70 83       	st	Z, r23
    2aae:	31 97       	sbiw	r30, 0x01	; 1
    2ab0:	10 82       	st	Z, r1
    2ab2:	31 97       	sbiw	r30, 0x01	; 1
    2ab4:	10 82       	st	Z, r1
    2ab6:	31 97       	sbiw	r30, 0x01	; 1
    2ab8:	60 e8       	ldi	r22, 0x80	; 128
    2aba:	60 83       	st	Z, r22
    2abc:	31 97       	sbiw	r30, 0x01	; 1
    2abe:	10 82       	st	Z, r1
    2ac0:	31 97       	sbiw	r30, 0x01	; 1
    2ac2:	10 82       	st	Z, r1
    2ac4:	31 97       	sbiw	r30, 0x01	; 1
    2ac6:	10 82       	st	Z, r1
    2ac8:	31 97       	sbiw	r30, 0x01	; 1
    2aca:	62 e0       	ldi	r22, 0x02	; 2
    2acc:	60 83       	st	Z, r22
    2ace:	31 97       	sbiw	r30, 0x01	; 1
    2ad0:	63 e0       	ldi	r22, 0x03	; 3
    2ad2:	60 83       	st	Z, r22
    2ad4:	31 97       	sbiw	r30, 0x01	; 1
    2ad6:	64 e0       	ldi	r22, 0x04	; 4
    2ad8:	60 83       	st	Z, r22
    2ada:	31 97       	sbiw	r30, 0x01	; 1
    2adc:	65 e0       	ldi	r22, 0x05	; 5
    2ade:	60 83       	st	Z, r22
    2ae0:	31 97       	sbiw	r30, 0x01	; 1
    2ae2:	66 e0       	ldi	r22, 0x06	; 6
    2ae4:	60 83       	st	Z, r22
    2ae6:	31 97       	sbiw	r30, 0x01	; 1
    2ae8:	67 e0       	ldi	r22, 0x07	; 7
    2aea:	60 83       	st	Z, r22
    2aec:	31 97       	sbiw	r30, 0x01	; 1
    2aee:	68 e0       	ldi	r22, 0x08	; 8
    2af0:	60 83       	st	Z, r22
    2af2:	31 97       	sbiw	r30, 0x01	; 1
    2af4:	69 e0       	ldi	r22, 0x09	; 9
    2af6:	60 83       	st	Z, r22
    2af8:	31 97       	sbiw	r30, 0x01	; 1
    2afa:	60 e1       	ldi	r22, 0x10	; 16
    2afc:	60 83       	st	Z, r22
    2afe:	31 97       	sbiw	r30, 0x01	; 1
    2b00:	30 83       	st	Z, r19
    2b02:	31 97       	sbiw	r30, 0x01	; 1
    2b04:	32 e1       	ldi	r19, 0x12	; 18
    2b06:	30 83       	st	Z, r19
    2b08:	31 97       	sbiw	r30, 0x01	; 1
    2b0a:	33 e1       	ldi	r19, 0x13	; 19
    2b0c:	30 83       	st	Z, r19
    2b0e:	31 97       	sbiw	r30, 0x01	; 1
    2b10:	34 e1       	ldi	r19, 0x14	; 20
    2b12:	30 83       	st	Z, r19
    2b14:	31 97       	sbiw	r30, 0x01	; 1
    2b16:	35 e1       	ldi	r19, 0x15	; 21
    2b18:	30 83       	st	Z, r19
    2b1a:	31 97       	sbiw	r30, 0x01	; 1
    2b1c:	36 e1       	ldi	r19, 0x16	; 22
    2b1e:	30 83       	st	Z, r19
    2b20:	31 97       	sbiw	r30, 0x01	; 1
    2b22:	37 e1       	ldi	r19, 0x17	; 23
    2b24:	30 83       	st	Z, r19
    2b26:	31 97       	sbiw	r30, 0x01	; 1
    2b28:	38 e1       	ldi	r19, 0x18	; 24
    2b2a:	30 83       	st	Z, r19
    2b2c:	31 97       	sbiw	r30, 0x01	; 1
    2b2e:	39 e1       	ldi	r19, 0x19	; 25
    2b30:	30 83       	st	Z, r19
    2b32:	31 97       	sbiw	r30, 0x01	; 1
    2b34:	30 e2       	ldi	r19, 0x20	; 32
    2b36:	30 83       	st	Z, r19
    2b38:	31 97       	sbiw	r30, 0x01	; 1
    2b3a:	31 e2       	ldi	r19, 0x21	; 33
    2b3c:	30 83       	st	Z, r19
    2b3e:	31 97       	sbiw	r30, 0x01	; 1
    2b40:	20 83       	st	Z, r18
    2b42:	31 97       	sbiw	r30, 0x01	; 1
    2b44:	23 e2       	ldi	r18, 0x23	; 35
    2b46:	20 83       	st	Z, r18
    2b48:	31 97       	sbiw	r30, 0x01	; 1
    2b4a:	40 83       	st	Z, r20
    2b4c:	31 97       	sbiw	r30, 0x01	; 1
    2b4e:	50 83       	st	Z, r21
    2b50:	31 97       	sbiw	r30, 0x01	; 1
    2b52:	26 e2       	ldi	r18, 0x26	; 38
    2b54:	20 83       	st	Z, r18
    2b56:	31 97       	sbiw	r30, 0x01	; 1
    2b58:	27 e2       	ldi	r18, 0x27	; 39
    2b5a:	20 83       	st	Z, r18
    2b5c:	31 97       	sbiw	r30, 0x01	; 1
    2b5e:	28 e2       	ldi	r18, 0x28	; 40
    2b60:	20 83       	st	Z, r18
    2b62:	31 97       	sbiw	r30, 0x01	; 1
    2b64:	29 e2       	ldi	r18, 0x29	; 41
    2b66:	20 83       	st	Z, r18
    2b68:	31 97       	sbiw	r30, 0x01	; 1
    2b6a:	20 e3       	ldi	r18, 0x30	; 48
    2b6c:	20 83       	st	Z, r18
    2b6e:	31 97       	sbiw	r30, 0x01	; 1
    2b70:	21 e3       	ldi	r18, 0x31	; 49
    2b72:	20 83       	st	Z, r18
    2b74:	89 97       	sbiw	r24, 0x29	; 41
    2b76:	08 95       	ret

00002b78 <xPortStartScheduler>:
    2b78:	a8 95       	wdr
    2b7a:	90 ec       	ldi	r25, 0xC0	; 192
    2b7c:	88 e1       	ldi	r24, 0x18	; 24
    2b7e:	0f b6       	in	r0, 0x3f	; 63
    2b80:	f8 94       	cli
    2b82:	a8 95       	wdr
    2b84:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
    2b88:	0f be       	out	0x3f, r0	; 63
    2b8a:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
    2b8e:	a0 91 ce 0d 	lds	r26, 0x0DCE	; 0x800dce <pxCurrentTCB>
    2b92:	b0 91 cf 0d 	lds	r27, 0x0DCF	; 0x800dcf <pxCurrentTCB+0x1>
    2b96:	cd 91       	ld	r28, X+
    2b98:	cd bf       	out	0x3d, r28	; 61
    2b9a:	dd 91       	ld	r29, X+
    2b9c:	de bf       	out	0x3e, r29	; 62
    2b9e:	ff 91       	pop	r31
    2ba0:	ef 91       	pop	r30
    2ba2:	df 91       	pop	r29
    2ba4:	cf 91       	pop	r28
    2ba6:	bf 91       	pop	r27
    2ba8:	af 91       	pop	r26
    2baa:	9f 91       	pop	r25
    2bac:	8f 91       	pop	r24
    2bae:	7f 91       	pop	r23
    2bb0:	6f 91       	pop	r22
    2bb2:	5f 91       	pop	r21
    2bb4:	4f 91       	pop	r20
    2bb6:	3f 91       	pop	r19
    2bb8:	2f 91       	pop	r18
    2bba:	1f 91       	pop	r17
    2bbc:	0f 91       	pop	r16
    2bbe:	ff 90       	pop	r15
    2bc0:	ef 90       	pop	r14
    2bc2:	df 90       	pop	r13
    2bc4:	cf 90       	pop	r12
    2bc6:	bf 90       	pop	r11
    2bc8:	af 90       	pop	r10
    2bca:	9f 90       	pop	r9
    2bcc:	8f 90       	pop	r8
    2bce:	7f 90       	pop	r7
    2bd0:	6f 90       	pop	r6
    2bd2:	5f 90       	pop	r5
    2bd4:	4f 90       	pop	r4
    2bd6:	3f 90       	pop	r3
    2bd8:	2f 90       	pop	r2
    2bda:	1f 90       	pop	r1
    2bdc:	0f 90       	pop	r0
    2bde:	0c be       	out	0x3c, r0	; 60
    2be0:	0f 90       	pop	r0
    2be2:	0b be       	out	0x3b, r0	; 59
    2be4:	0f 90       	pop	r0
    2be6:	0f be       	out	0x3f, r0	; 63
    2be8:	0f 90       	pop	r0
    2bea:	08 95       	ret
    2bec:	81 e0       	ldi	r24, 0x01	; 1
    2bee:	08 95       	ret

00002bf0 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    2bf0:	0f 92       	push	r0
    2bf2:	0f b6       	in	r0, 0x3f	; 63
    2bf4:	f8 94       	cli
    2bf6:	0f 92       	push	r0
    2bf8:	0b b6       	in	r0, 0x3b	; 59
    2bfa:	0f 92       	push	r0
    2bfc:	0c b6       	in	r0, 0x3c	; 60
    2bfe:	0f 92       	push	r0
    2c00:	1f 92       	push	r1
    2c02:	11 24       	eor	r1, r1
    2c04:	2f 92       	push	r2
    2c06:	3f 92       	push	r3
    2c08:	4f 92       	push	r4
    2c0a:	5f 92       	push	r5
    2c0c:	6f 92       	push	r6
    2c0e:	7f 92       	push	r7
    2c10:	8f 92       	push	r8
    2c12:	9f 92       	push	r9
    2c14:	af 92       	push	r10
    2c16:	bf 92       	push	r11
    2c18:	cf 92       	push	r12
    2c1a:	df 92       	push	r13
    2c1c:	ef 92       	push	r14
    2c1e:	ff 92       	push	r15
    2c20:	0f 93       	push	r16
    2c22:	1f 93       	push	r17
    2c24:	2f 93       	push	r18
    2c26:	3f 93       	push	r19
    2c28:	4f 93       	push	r20
    2c2a:	5f 93       	push	r21
    2c2c:	6f 93       	push	r22
    2c2e:	7f 93       	push	r23
    2c30:	8f 93       	push	r24
    2c32:	9f 93       	push	r25
    2c34:	af 93       	push	r26
    2c36:	bf 93       	push	r27
    2c38:	cf 93       	push	r28
    2c3a:	df 93       	push	r29
    2c3c:	ef 93       	push	r30
    2c3e:	ff 93       	push	r31
    2c40:	a0 91 ce 0d 	lds	r26, 0x0DCE	; 0x800dce <pxCurrentTCB>
    2c44:	b0 91 cf 0d 	lds	r27, 0x0DCF	; 0x800dcf <pxCurrentTCB+0x1>
    2c48:	0d b6       	in	r0, 0x3d	; 61
    2c4a:	0d 92       	st	X+, r0
    2c4c:	0e b6       	in	r0, 0x3e	; 62
    2c4e:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    2c50:	ee d6       	rcall	.+3548   	; 0x3a2e <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    2c52:	a0 91 ce 0d 	lds	r26, 0x0DCE	; 0x800dce <pxCurrentTCB>
    2c56:	b0 91 cf 0d 	lds	r27, 0x0DCF	; 0x800dcf <pxCurrentTCB+0x1>
    2c5a:	cd 91       	ld	r28, X+
    2c5c:	cd bf       	out	0x3d, r28	; 61
    2c5e:	dd 91       	ld	r29, X+
    2c60:	de bf       	out	0x3e, r29	; 62
    2c62:	ff 91       	pop	r31
    2c64:	ef 91       	pop	r30
    2c66:	df 91       	pop	r29
    2c68:	cf 91       	pop	r28
    2c6a:	bf 91       	pop	r27
    2c6c:	af 91       	pop	r26
    2c6e:	9f 91       	pop	r25
    2c70:	8f 91       	pop	r24
    2c72:	7f 91       	pop	r23
    2c74:	6f 91       	pop	r22
    2c76:	5f 91       	pop	r21
    2c78:	4f 91       	pop	r20
    2c7a:	3f 91       	pop	r19
    2c7c:	2f 91       	pop	r18
    2c7e:	1f 91       	pop	r17
    2c80:	0f 91       	pop	r16
    2c82:	ff 90       	pop	r15
    2c84:	ef 90       	pop	r14
    2c86:	df 90       	pop	r13
    2c88:	cf 90       	pop	r12
    2c8a:	bf 90       	pop	r11
    2c8c:	af 90       	pop	r10
    2c8e:	9f 90       	pop	r9
    2c90:	8f 90       	pop	r8
    2c92:	7f 90       	pop	r7
    2c94:	6f 90       	pop	r6
    2c96:	5f 90       	pop	r5
    2c98:	4f 90       	pop	r4
    2c9a:	3f 90       	pop	r3
    2c9c:	2f 90       	pop	r2
    2c9e:	1f 90       	pop	r1
    2ca0:	0f 90       	pop	r0
    2ca2:	0c be       	out	0x3c, r0	; 60
    2ca4:	0f 90       	pop	r0
    2ca6:	0b be       	out	0x3b, r0	; 59
    2ca8:	0f 90       	pop	r0
    2caa:	0f be       	out	0x3f, r0	; 63
    2cac:	0f 90       	pop	r0

	__asm__ __volatile__ ( "ret" );
    2cae:	08 95       	ret

00002cb0 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    2cb0:	0f 92       	push	r0
    2cb2:	0f b6       	in	r0, 0x3f	; 63
    2cb4:	f8 94       	cli
    2cb6:	0f 92       	push	r0
    2cb8:	0b b6       	in	r0, 0x3b	; 59
    2cba:	0f 92       	push	r0
    2cbc:	0c b6       	in	r0, 0x3c	; 60
    2cbe:	0f 92       	push	r0
    2cc0:	1f 92       	push	r1
    2cc2:	11 24       	eor	r1, r1
    2cc4:	2f 92       	push	r2
    2cc6:	3f 92       	push	r3
    2cc8:	4f 92       	push	r4
    2cca:	5f 92       	push	r5
    2ccc:	6f 92       	push	r6
    2cce:	7f 92       	push	r7
    2cd0:	8f 92       	push	r8
    2cd2:	9f 92       	push	r9
    2cd4:	af 92       	push	r10
    2cd6:	bf 92       	push	r11
    2cd8:	cf 92       	push	r12
    2cda:	df 92       	push	r13
    2cdc:	ef 92       	push	r14
    2cde:	ff 92       	push	r15
    2ce0:	0f 93       	push	r16
    2ce2:	1f 93       	push	r17
    2ce4:	2f 93       	push	r18
    2ce6:	3f 93       	push	r19
    2ce8:	4f 93       	push	r20
    2cea:	5f 93       	push	r21
    2cec:	6f 93       	push	r22
    2cee:	7f 93       	push	r23
    2cf0:	8f 93       	push	r24
    2cf2:	9f 93       	push	r25
    2cf4:	af 93       	push	r26
    2cf6:	bf 93       	push	r27
    2cf8:	cf 93       	push	r28
    2cfa:	df 93       	push	r29
    2cfc:	ef 93       	push	r30
    2cfe:	ff 93       	push	r31
    2d00:	a0 91 ce 0d 	lds	r26, 0x0DCE	; 0x800dce <pxCurrentTCB>
    2d04:	b0 91 cf 0d 	lds	r27, 0x0DCF	; 0x800dcf <pxCurrentTCB+0x1>
    2d08:	0d b6       	in	r0, 0x3d	; 61
    2d0a:	0d 92       	st	X+, r0
    2d0c:	0e b6       	in	r0, 0x3e	; 62
    2d0e:	0d 92       	st	X+, r0

	sleep_reset();		//	 reset the sleep_mode() faster than sleep_disable();
    2d10:	13 be       	out	0x33, r1	; 51

	if( xTaskIncrementTick() != pdFALSE )
    2d12:	4d d5       	rcall	.+2714   	; 0x37ae <xTaskIncrementTick>
    2d14:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
    2d16:	8b d6       	rcall	.+3350   	; 0x3a2e <vTaskSwitchContext>
    2d18:	a0 91 ce 0d 	lds	r26, 0x0DCE	; 0x800dce <pxCurrentTCB>
	}

	portRESTORE_CONTEXT();
    2d1c:	b0 91 cf 0d 	lds	r27, 0x0DCF	; 0x800dcf <pxCurrentTCB+0x1>
    2d20:	cd 91       	ld	r28, X+
    2d22:	cd bf       	out	0x3d, r28	; 61
    2d24:	dd 91       	ld	r29, X+
    2d26:	de bf       	out	0x3e, r29	; 62
    2d28:	ff 91       	pop	r31
    2d2a:	ef 91       	pop	r30
    2d2c:	df 91       	pop	r29
    2d2e:	cf 91       	pop	r28
    2d30:	bf 91       	pop	r27
    2d32:	af 91       	pop	r26
    2d34:	9f 91       	pop	r25
    2d36:	8f 91       	pop	r24
    2d38:	7f 91       	pop	r23
    2d3a:	6f 91       	pop	r22
    2d3c:	5f 91       	pop	r21
    2d3e:	4f 91       	pop	r20
    2d40:	3f 91       	pop	r19
    2d42:	2f 91       	pop	r18
    2d44:	1f 91       	pop	r17
    2d46:	0f 91       	pop	r16
    2d48:	ff 90       	pop	r15
    2d4a:	ef 90       	pop	r14
    2d4c:	df 90       	pop	r13
    2d4e:	cf 90       	pop	r12
    2d50:	bf 90       	pop	r11
    2d52:	af 90       	pop	r10
    2d54:	9f 90       	pop	r9
    2d56:	8f 90       	pop	r8
    2d58:	7f 90       	pop	r7
    2d5a:	6f 90       	pop	r6
    2d5c:	5f 90       	pop	r5
    2d5e:	4f 90       	pop	r4
    2d60:	3f 90       	pop	r3
    2d62:	2f 90       	pop	r2
    2d64:	1f 90       	pop	r1
    2d66:	0f 90       	pop	r0
    2d68:	0c be       	out	0x3c, r0	; 60
    2d6a:	0f 90       	pop	r0
    2d6c:	0b be       	out	0x3b, r0	; 59
    2d6e:	0f 90       	pop	r0
    2d70:	0f be       	out	0x3f, r0	; 63
    2d72:	0f 90       	pop	r0
    2d74:	08 95       	ret

00002d76 <__vector_12>:

	__asm__ __volatile__ ( "ret" );
    2d76:	9c df       	rcall	.-200    	; 0x2cb0 <vPortYieldFromTick>
//	ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
	ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
	ISR(portSCHEDULER_ISR)
	{
		vPortYieldFromTick();
		__asm__ __volatile__ ( "reti" );
    2d78:	18 95       	reti

00002d7a <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    2d7a:	0f b6       	in	r0, 0x3f	; 63
    2d7c:	f8 94       	cli
    2d7e:	0f 92       	push	r0
    2d80:	fc 01       	movw	r30, r24
    2d82:	92 8d       	ldd	r25, Z+26	; 0x1a
    2d84:	0f 90       	pop	r0
    2d86:	0f be       	out	0x3f, r0	; 63
    2d88:	81 e0       	ldi	r24, 0x01	; 1
    2d8a:	91 11       	cpse	r25, r1
    2d8c:	80 e0       	ldi	r24, 0x00	; 0
    2d8e:	08 95       	ret

00002d90 <prvCopyDataToQueue>:
    2d90:	0f 93       	push	r16
    2d92:	1f 93       	push	r17
    2d94:	cf 93       	push	r28
    2d96:	df 93       	push	r29
    2d98:	ec 01       	movw	r28, r24
    2d9a:	04 2f       	mov	r16, r20
    2d9c:	1a 8d       	ldd	r17, Y+26	; 0x1a
    2d9e:	4c 8d       	ldd	r20, Y+28	; 0x1c
    2da0:	41 11       	cpse	r20, r1
    2da2:	0b c0       	rjmp	.+22     	; 0x2dba <prvCopyDataToQueue+0x2a>
    2da4:	88 81       	ld	r24, Y
    2da6:	99 81       	ldd	r25, Y+1	; 0x01
    2da8:	89 2b       	or	r24, r25
    2daa:	09 f0       	breq	.+2      	; 0x2dae <prvCopyDataToQueue+0x1e>
    2dac:	41 c0       	rjmp	.+130    	; 0x2e30 <prvCopyDataToQueue+0xa0>
    2dae:	8c 81       	ldd	r24, Y+4	; 0x04
    2db0:	9d 81       	ldd	r25, Y+5	; 0x05
    2db2:	e9 d7       	rcall	.+4050   	; 0x3d86 <xTaskPriorityDisinherit>
    2db4:	1d 82       	std	Y+5, r1	; 0x05
    2db6:	1c 82       	std	Y+4, r1	; 0x04
    2db8:	42 c0       	rjmp	.+132    	; 0x2e3e <prvCopyDataToQueue+0xae>
    2dba:	01 11       	cpse	r16, r1
    2dbc:	17 c0       	rjmp	.+46     	; 0x2dec <prvCopyDataToQueue+0x5c>
    2dbe:	50 e0       	ldi	r21, 0x00	; 0
    2dc0:	8a 81       	ldd	r24, Y+2	; 0x02
    2dc2:	9b 81       	ldd	r25, Y+3	; 0x03
    2dc4:	0e 94 1a 27 	call	0x4e34	; 0x4e34 <memcpy>
    2dc8:	2c 8d       	ldd	r18, Y+28	; 0x1c
    2dca:	8a 81       	ldd	r24, Y+2	; 0x02
    2dcc:	9b 81       	ldd	r25, Y+3	; 0x03
    2dce:	82 0f       	add	r24, r18
    2dd0:	91 1d       	adc	r25, r1
    2dd2:	9b 83       	std	Y+3, r25	; 0x03
    2dd4:	8a 83       	std	Y+2, r24	; 0x02
    2dd6:	2c 81       	ldd	r18, Y+4	; 0x04
    2dd8:	3d 81       	ldd	r19, Y+5	; 0x05
    2dda:	82 17       	cp	r24, r18
    2ddc:	93 07       	cpc	r25, r19
    2dde:	50 f1       	brcs	.+84     	; 0x2e34 <prvCopyDataToQueue+0xa4>
    2de0:	88 81       	ld	r24, Y
    2de2:	99 81       	ldd	r25, Y+1	; 0x01
    2de4:	9b 83       	std	Y+3, r25	; 0x03
    2de6:	8a 83       	std	Y+2, r24	; 0x02
    2de8:	80 e0       	ldi	r24, 0x00	; 0
    2dea:	29 c0       	rjmp	.+82     	; 0x2e3e <prvCopyDataToQueue+0xae>
    2dec:	50 e0       	ldi	r21, 0x00	; 0
    2dee:	8e 81       	ldd	r24, Y+6	; 0x06
    2df0:	9f 81       	ldd	r25, Y+7	; 0x07
    2df2:	0e 94 1a 27 	call	0x4e34	; 0x4e34 <memcpy>
    2df6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2df8:	90 e0       	ldi	r25, 0x00	; 0
    2dfa:	91 95       	neg	r25
    2dfc:	81 95       	neg	r24
    2dfe:	91 09       	sbc	r25, r1
    2e00:	2e 81       	ldd	r18, Y+6	; 0x06
    2e02:	3f 81       	ldd	r19, Y+7	; 0x07
    2e04:	28 0f       	add	r18, r24
    2e06:	39 1f       	adc	r19, r25
    2e08:	3f 83       	std	Y+7, r19	; 0x07
    2e0a:	2e 83       	std	Y+6, r18	; 0x06
    2e0c:	48 81       	ld	r20, Y
    2e0e:	59 81       	ldd	r21, Y+1	; 0x01
    2e10:	24 17       	cp	r18, r20
    2e12:	35 07       	cpc	r19, r21
    2e14:	30 f4       	brcc	.+12     	; 0x2e22 <prvCopyDataToQueue+0x92>
    2e16:	2c 81       	ldd	r18, Y+4	; 0x04
    2e18:	3d 81       	ldd	r19, Y+5	; 0x05
    2e1a:	82 0f       	add	r24, r18
    2e1c:	93 1f       	adc	r25, r19
    2e1e:	9f 83       	std	Y+7, r25	; 0x07
    2e20:	8e 83       	std	Y+6, r24	; 0x06
    2e22:	02 30       	cpi	r16, 0x02	; 2
    2e24:	49 f4       	brne	.+18     	; 0x2e38 <prvCopyDataToQueue+0xa8>
    2e26:	11 23       	and	r17, r17
    2e28:	49 f0       	breq	.+18     	; 0x2e3c <prvCopyDataToQueue+0xac>
    2e2a:	11 50       	subi	r17, 0x01	; 1
    2e2c:	80 e0       	ldi	r24, 0x00	; 0
    2e2e:	07 c0       	rjmp	.+14     	; 0x2e3e <prvCopyDataToQueue+0xae>
    2e30:	80 e0       	ldi	r24, 0x00	; 0
    2e32:	05 c0       	rjmp	.+10     	; 0x2e3e <prvCopyDataToQueue+0xae>
    2e34:	80 e0       	ldi	r24, 0x00	; 0
    2e36:	03 c0       	rjmp	.+6      	; 0x2e3e <prvCopyDataToQueue+0xae>
    2e38:	80 e0       	ldi	r24, 0x00	; 0
    2e3a:	01 c0       	rjmp	.+2      	; 0x2e3e <prvCopyDataToQueue+0xae>
    2e3c:	80 e0       	ldi	r24, 0x00	; 0
    2e3e:	1f 5f       	subi	r17, 0xFF	; 255
    2e40:	1a 8f       	std	Y+26, r17	; 0x1a
    2e42:	df 91       	pop	r29
    2e44:	cf 91       	pop	r28
    2e46:	1f 91       	pop	r17
    2e48:	0f 91       	pop	r16
    2e4a:	08 95       	ret

00002e4c <prvCopyDataFromQueue>:
    2e4c:	fc 01       	movw	r30, r24
    2e4e:	44 8d       	ldd	r20, Z+28	; 0x1c
    2e50:	44 23       	and	r20, r20
    2e52:	a9 f0       	breq	.+42     	; 0x2e7e <prvCopyDataFromQueue+0x32>
    2e54:	50 e0       	ldi	r21, 0x00	; 0
    2e56:	26 81       	ldd	r18, Z+6	; 0x06
    2e58:	37 81       	ldd	r19, Z+7	; 0x07
    2e5a:	24 0f       	add	r18, r20
    2e5c:	35 1f       	adc	r19, r21
    2e5e:	37 83       	std	Z+7, r19	; 0x07
    2e60:	26 83       	std	Z+6, r18	; 0x06
    2e62:	84 81       	ldd	r24, Z+4	; 0x04
    2e64:	95 81       	ldd	r25, Z+5	; 0x05
    2e66:	28 17       	cp	r18, r24
    2e68:	39 07       	cpc	r19, r25
    2e6a:	20 f0       	brcs	.+8      	; 0x2e74 <prvCopyDataFromQueue+0x28>
    2e6c:	80 81       	ld	r24, Z
    2e6e:	91 81       	ldd	r25, Z+1	; 0x01
    2e70:	97 83       	std	Z+7, r25	; 0x07
    2e72:	86 83       	std	Z+6, r24	; 0x06
    2e74:	cb 01       	movw	r24, r22
    2e76:	66 81       	ldd	r22, Z+6	; 0x06
    2e78:	77 81       	ldd	r23, Z+7	; 0x07
    2e7a:	0c 94 1a 27 	jmp	0x4e34	; 0x4e34 <memcpy>
    2e7e:	08 95       	ret

00002e80 <prvUnlockQueue>:
    2e80:	ef 92       	push	r14
    2e82:	ff 92       	push	r15
    2e84:	0f 93       	push	r16
    2e86:	1f 93       	push	r17
    2e88:	cf 93       	push	r28
    2e8a:	8c 01       	movw	r16, r24
    2e8c:	0f b6       	in	r0, 0x3f	; 63
    2e8e:	f8 94       	cli
    2e90:	0f 92       	push	r0
    2e92:	fc 01       	movw	r30, r24
    2e94:	c6 8d       	ldd	r28, Z+30	; 0x1e
    2e96:	1c 16       	cp	r1, r28
    2e98:	9c f4       	brge	.+38     	; 0x2ec0 <prvUnlockQueue+0x40>
    2e9a:	81 89       	ldd	r24, Z+17	; 0x11
    2e9c:	81 11       	cpse	r24, r1
    2e9e:	06 c0       	rjmp	.+12     	; 0x2eac <prvUnlockQueue+0x2c>
    2ea0:	0f c0       	rjmp	.+30     	; 0x2ec0 <prvUnlockQueue+0x40>
    2ea2:	f8 01       	movw	r30, r16
    2ea4:	81 89       	ldd	r24, Z+17	; 0x11
    2ea6:	81 11       	cpse	r24, r1
    2ea8:	05 c0       	rjmp	.+10     	; 0x2eb4 <prvUnlockQueue+0x34>
    2eaa:	0a c0       	rjmp	.+20     	; 0x2ec0 <prvUnlockQueue+0x40>
    2eac:	78 01       	movw	r14, r16
    2eae:	f1 e1       	ldi	r31, 0x11	; 17
    2eb0:	ef 0e       	add	r14, r31
    2eb2:	f1 1c       	adc	r15, r1
    2eb4:	c7 01       	movw	r24, r14
    2eb6:	65 d6       	rcall	.+3274   	; 0x3b82 <xTaskRemoveFromEventList>
    2eb8:	81 11       	cpse	r24, r1
    2eba:	e1 d6       	rcall	.+3522   	; 0x3c7e <vTaskMissedYield>
    2ebc:	c1 50       	subi	r28, 0x01	; 1
    2ebe:	89 f7       	brne	.-30     	; 0x2ea2 <prvUnlockQueue+0x22>
    2ec0:	8f ef       	ldi	r24, 0xFF	; 255
    2ec2:	f8 01       	movw	r30, r16
    2ec4:	86 8f       	std	Z+30, r24	; 0x1e
    2ec6:	0f 90       	pop	r0
    2ec8:	0f be       	out	0x3f, r0	; 63
    2eca:	0f b6       	in	r0, 0x3f	; 63
    2ecc:	f8 94       	cli
    2ece:	0f 92       	push	r0
    2ed0:	c5 8d       	ldd	r28, Z+29	; 0x1d
    2ed2:	1c 16       	cp	r1, r28
    2ed4:	9c f4       	brge	.+38     	; 0x2efc <prvUnlockQueue+0x7c>
    2ed6:	80 85       	ldd	r24, Z+8	; 0x08
    2ed8:	81 11       	cpse	r24, r1
    2eda:	06 c0       	rjmp	.+12     	; 0x2ee8 <prvUnlockQueue+0x68>
    2edc:	0f c0       	rjmp	.+30     	; 0x2efc <prvUnlockQueue+0x7c>
    2ede:	f8 01       	movw	r30, r16
    2ee0:	80 85       	ldd	r24, Z+8	; 0x08
    2ee2:	81 11       	cpse	r24, r1
    2ee4:	05 c0       	rjmp	.+10     	; 0x2ef0 <prvUnlockQueue+0x70>
    2ee6:	0a c0       	rjmp	.+20     	; 0x2efc <prvUnlockQueue+0x7c>
    2ee8:	78 01       	movw	r14, r16
    2eea:	f8 e0       	ldi	r31, 0x08	; 8
    2eec:	ef 0e       	add	r14, r31
    2eee:	f1 1c       	adc	r15, r1
    2ef0:	c7 01       	movw	r24, r14
    2ef2:	47 d6       	rcall	.+3214   	; 0x3b82 <xTaskRemoveFromEventList>
    2ef4:	81 11       	cpse	r24, r1
    2ef6:	c3 d6       	rcall	.+3462   	; 0x3c7e <vTaskMissedYield>
    2ef8:	c1 50       	subi	r28, 0x01	; 1
    2efa:	89 f7       	brne	.-30     	; 0x2ede <prvUnlockQueue+0x5e>
    2efc:	8f ef       	ldi	r24, 0xFF	; 255
    2efe:	f8 01       	movw	r30, r16
    2f00:	85 8f       	std	Z+29, r24	; 0x1d
    2f02:	0f 90       	pop	r0
    2f04:	0f be       	out	0x3f, r0	; 63
    2f06:	cf 91       	pop	r28
    2f08:	1f 91       	pop	r17
    2f0a:	0f 91       	pop	r16
    2f0c:	ff 90       	pop	r15
    2f0e:	ef 90       	pop	r14
    2f10:	08 95       	ret

00002f12 <xQueueGenericReset>:
    2f12:	cf 93       	push	r28
    2f14:	df 93       	push	r29
    2f16:	ec 01       	movw	r28, r24
    2f18:	0f b6       	in	r0, 0x3f	; 63
    2f1a:	f8 94       	cli
    2f1c:	0f 92       	push	r0
    2f1e:	e8 81       	ld	r30, Y
    2f20:	f9 81       	ldd	r31, Y+1	; 0x01
    2f22:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2f24:	2c 8d       	ldd	r18, Y+28	; 0x1c
    2f26:	90 e0       	ldi	r25, 0x00	; 0
    2f28:	30 e0       	ldi	r19, 0x00	; 0
    2f2a:	82 9f       	mul	r24, r18
    2f2c:	a0 01       	movw	r20, r0
    2f2e:	83 9f       	mul	r24, r19
    2f30:	50 0d       	add	r21, r0
    2f32:	92 9f       	mul	r25, r18
    2f34:	50 0d       	add	r21, r0
    2f36:	11 24       	eor	r1, r1
    2f38:	4e 0f       	add	r20, r30
    2f3a:	5f 1f       	adc	r21, r31
    2f3c:	5d 83       	std	Y+5, r21	; 0x05
    2f3e:	4c 83       	std	Y+4, r20	; 0x04
    2f40:	1a 8e       	std	Y+26, r1	; 0x1a
    2f42:	fb 83       	std	Y+3, r31	; 0x03
    2f44:	ea 83       	std	Y+2, r30	; 0x02
    2f46:	01 97       	sbiw	r24, 0x01	; 1
    2f48:	82 9f       	mul	r24, r18
    2f4a:	a0 01       	movw	r20, r0
    2f4c:	83 9f       	mul	r24, r19
    2f4e:	50 0d       	add	r21, r0
    2f50:	92 9f       	mul	r25, r18
    2f52:	50 0d       	add	r21, r0
    2f54:	11 24       	eor	r1, r1
    2f56:	cf 01       	movw	r24, r30
    2f58:	84 0f       	add	r24, r20
    2f5a:	95 1f       	adc	r25, r21
    2f5c:	9f 83       	std	Y+7, r25	; 0x07
    2f5e:	8e 83       	std	Y+6, r24	; 0x06
    2f60:	8f ef       	ldi	r24, 0xFF	; 255
    2f62:	8d 8f       	std	Y+29, r24	; 0x1d
    2f64:	8e 8f       	std	Y+30, r24	; 0x1e
    2f66:	61 11       	cpse	r22, r1
    2f68:	0a c0       	rjmp	.+20     	; 0x2f7e <xQueueGenericReset+0x6c>
    2f6a:	88 85       	ldd	r24, Y+8	; 0x08
    2f6c:	88 23       	and	r24, r24
    2f6e:	69 f0       	breq	.+26     	; 0x2f8a <xQueueGenericReset+0x78>
    2f70:	ce 01       	movw	r24, r28
    2f72:	08 96       	adiw	r24, 0x08	; 8
    2f74:	06 d6       	rcall	.+3084   	; 0x3b82 <xTaskRemoveFromEventList>
    2f76:	88 23       	and	r24, r24
    2f78:	41 f0       	breq	.+16     	; 0x2f8a <xQueueGenericReset+0x78>
    2f7a:	3a de       	rcall	.-908    	; 0x2bf0 <vPortYield>
    2f7c:	06 c0       	rjmp	.+12     	; 0x2f8a <xQueueGenericReset+0x78>
    2f7e:	ce 01       	movw	r24, r28
    2f80:	08 96       	adiw	r24, 0x08	; 8
    2f82:	fd dc       	rcall	.-1542   	; 0x297e <vListInitialise>
    2f84:	ce 01       	movw	r24, r28
    2f86:	41 96       	adiw	r24, 0x11	; 17
    2f88:	fa dc       	rcall	.-1548   	; 0x297e <vListInitialise>
    2f8a:	0f 90       	pop	r0
    2f8c:	0f be       	out	0x3f, r0	; 63
    2f8e:	81 e0       	ldi	r24, 0x01	; 1
    2f90:	df 91       	pop	r29
    2f92:	cf 91       	pop	r28
    2f94:	08 95       	ret

00002f96 <xQueueGenericCreateStatic>:
    2f96:	cf 93       	push	r28
    2f98:	df 93       	push	r29
    2f9a:	e9 01       	movw	r28, r18
    2f9c:	20 97       	sbiw	r28, 0x00	; 0
    2f9e:	61 f0       	breq	.+24     	; 0x2fb8 <xQueueGenericCreateStatic+0x22>
    2fa0:	61 11       	cpse	r22, r1
    2fa2:	03 c0       	rjmp	.+6      	; 0x2faa <xQueueGenericCreateStatic+0x14>
    2fa4:	39 83       	std	Y+1, r19	; 0x01
    2fa6:	28 83       	st	Y, r18
    2fa8:	02 c0       	rjmp	.+4      	; 0x2fae <xQueueGenericCreateStatic+0x18>
    2faa:	59 83       	std	Y+1, r21	; 0x01
    2fac:	48 83       	st	Y, r20
    2fae:	8b 8f       	std	Y+27, r24	; 0x1b
    2fb0:	6c 8f       	std	Y+28, r22	; 0x1c
    2fb2:	61 e0       	ldi	r22, 0x01	; 1
    2fb4:	ce 01       	movw	r24, r28
    2fb6:	ad df       	rcall	.-166    	; 0x2f12 <xQueueGenericReset>
    2fb8:	ce 01       	movw	r24, r28
    2fba:	df 91       	pop	r29
    2fbc:	cf 91       	pop	r28
    2fbe:	08 95       	ret

00002fc0 <xQueueGenericSend>:
    2fc0:	9f 92       	push	r9
    2fc2:	af 92       	push	r10
    2fc4:	bf 92       	push	r11
    2fc6:	cf 92       	push	r12
    2fc8:	df 92       	push	r13
    2fca:	ef 92       	push	r14
    2fcc:	ff 92       	push	r15
    2fce:	0f 93       	push	r16
    2fd0:	1f 93       	push	r17
    2fd2:	cf 93       	push	r28
    2fd4:	df 93       	push	r29
    2fd6:	00 d0       	rcall	.+0      	; 0x2fd8 <xQueueGenericSend+0x18>
    2fd8:	1f 92       	push	r1
    2fda:	1f 92       	push	r1
    2fdc:	cd b7       	in	r28, 0x3d	; 61
    2fde:	de b7       	in	r29, 0x3e	; 62
    2fe0:	8c 01       	movw	r16, r24
    2fe2:	6b 01       	movw	r12, r22
    2fe4:	5d 83       	std	Y+5, r21	; 0x05
    2fe6:	4c 83       	std	Y+4, r20	; 0x04
    2fe8:	a2 2e       	mov	r10, r18
    2fea:	b1 2c       	mov	r11, r1
    2fec:	99 24       	eor	r9, r9
    2fee:	93 94       	inc	r9
    2ff0:	7c 01       	movw	r14, r24
    2ff2:	88 e0       	ldi	r24, 0x08	; 8
    2ff4:	e8 0e       	add	r14, r24
    2ff6:	f1 1c       	adc	r15, r1
    2ff8:	0f b6       	in	r0, 0x3f	; 63
    2ffa:	f8 94       	cli
    2ffc:	0f 92       	push	r0
    2ffe:	f8 01       	movw	r30, r16
    3000:	92 8d       	ldd	r25, Z+26	; 0x1a
    3002:	83 8d       	ldd	r24, Z+27	; 0x1b
    3004:	98 17       	cp	r25, r24
    3006:	18 f0       	brcs	.+6      	; 0x300e <xQueueGenericSend+0x4e>
    3008:	f2 e0       	ldi	r31, 0x02	; 2
    300a:	af 12       	cpse	r10, r31
    300c:	15 c0       	rjmp	.+42     	; 0x3038 <xQueueGenericSend+0x78>
    300e:	4a 2d       	mov	r20, r10
    3010:	b6 01       	movw	r22, r12
    3012:	c8 01       	movw	r24, r16
    3014:	bd de       	rcall	.-646    	; 0x2d90 <prvCopyDataToQueue>
    3016:	f8 01       	movw	r30, r16
    3018:	91 89       	ldd	r25, Z+17	; 0x11
    301a:	99 23       	and	r25, r25
    301c:	39 f0       	breq	.+14     	; 0x302c <xQueueGenericSend+0x6c>
    301e:	c8 01       	movw	r24, r16
    3020:	41 96       	adiw	r24, 0x11	; 17
    3022:	af d5       	rcall	.+2910   	; 0x3b82 <xTaskRemoveFromEventList>
    3024:	88 23       	and	r24, r24
    3026:	21 f0       	breq	.+8      	; 0x3030 <xQueueGenericSend+0x70>
    3028:	e3 dd       	rcall	.-1082   	; 0x2bf0 <vPortYield>
    302a:	02 c0       	rjmp	.+4      	; 0x3030 <xQueueGenericSend+0x70>
    302c:	81 11       	cpse	r24, r1
    302e:	e0 dd       	rcall	.-1088   	; 0x2bf0 <vPortYield>
    3030:	0f 90       	pop	r0
    3032:	0f be       	out	0x3f, r0	; 63
    3034:	81 e0       	ldi	r24, 0x01	; 1
    3036:	45 c0       	rjmp	.+138    	; 0x30c2 <xQueueGenericSend+0x102>
    3038:	8c 81       	ldd	r24, Y+4	; 0x04
    303a:	9d 81       	ldd	r25, Y+5	; 0x05
    303c:	89 2b       	or	r24, r25
    303e:	21 f4       	brne	.+8      	; 0x3048 <xQueueGenericSend+0x88>
    3040:	0f 90       	pop	r0
    3042:	0f be       	out	0x3f, r0	; 63
    3044:	80 e0       	ldi	r24, 0x00	; 0
    3046:	3d c0       	rjmp	.+122    	; 0x30c2 <xQueueGenericSend+0x102>
    3048:	b1 10       	cpse	r11, r1
    304a:	04 c0       	rjmp	.+8      	; 0x3054 <xQueueGenericSend+0x94>
    304c:	ce 01       	movw	r24, r28
    304e:	01 96       	adiw	r24, 0x01	; 1
    3050:	e0 d5       	rcall	.+3008   	; 0x3c12 <vTaskInternalSetTimeOutState>
    3052:	b9 2c       	mov	r11, r9
    3054:	0f 90       	pop	r0
    3056:	0f be       	out	0x3f, r0	; 63
    3058:	9a d3       	rcall	.+1844   	; 0x378e <vTaskSuspendAll>
    305a:	0f b6       	in	r0, 0x3f	; 63
    305c:	f8 94       	cli
    305e:	0f 92       	push	r0
    3060:	f8 01       	movw	r30, r16
    3062:	85 8d       	ldd	r24, Z+29	; 0x1d
    3064:	8f 3f       	cpi	r24, 0xFF	; 255
    3066:	09 f4       	brne	.+2      	; 0x306a <xQueueGenericSend+0xaa>
    3068:	15 8e       	std	Z+29, r1	; 0x1d
    306a:	f8 01       	movw	r30, r16
    306c:	86 8d       	ldd	r24, Z+30	; 0x1e
    306e:	8f 3f       	cpi	r24, 0xFF	; 255
    3070:	09 f4       	brne	.+2      	; 0x3074 <xQueueGenericSend+0xb4>
    3072:	16 8e       	std	Z+30, r1	; 0x1e
    3074:	0f 90       	pop	r0
    3076:	0f be       	out	0x3f, r0	; 63
    3078:	be 01       	movw	r22, r28
    307a:	6c 5f       	subi	r22, 0xFC	; 252
    307c:	7f 4f       	sbci	r23, 0xFF	; 255
    307e:	ce 01       	movw	r24, r28
    3080:	01 96       	adiw	r24, 0x01	; 1
    3082:	d2 d5       	rcall	.+2980   	; 0x3c28 <xTaskCheckForTimeOut>
    3084:	81 11       	cpse	r24, r1
    3086:	19 c0       	rjmp	.+50     	; 0x30ba <xQueueGenericSend+0xfa>
    3088:	0f b6       	in	r0, 0x3f	; 63
    308a:	f8 94       	cli
    308c:	0f 92       	push	r0
    308e:	f8 01       	movw	r30, r16
    3090:	92 8d       	ldd	r25, Z+26	; 0x1a
    3092:	83 8d       	ldd	r24, Z+27	; 0x1b
    3094:	0f 90       	pop	r0
    3096:	0f be       	out	0x3f, r0	; 63
    3098:	98 13       	cpse	r25, r24
    309a:	0b c0       	rjmp	.+22     	; 0x30b2 <xQueueGenericSend+0xf2>
    309c:	6c 81       	ldd	r22, Y+4	; 0x04
    309e:	7d 81       	ldd	r23, Y+5	; 0x05
    30a0:	c7 01       	movw	r24, r14
    30a2:	46 d5       	rcall	.+2700   	; 0x3b30 <vTaskPlaceOnEventList>
    30a4:	c8 01       	movw	r24, r16
    30a6:	ec de       	rcall	.-552    	; 0x2e80 <prvUnlockQueue>
    30a8:	39 d4       	rcall	.+2162   	; 0x391c <xTaskResumeAll>
    30aa:	81 11       	cpse	r24, r1
    30ac:	a5 cf       	rjmp	.-182    	; 0x2ff8 <xQueueGenericSend+0x38>
    30ae:	a0 dd       	rcall	.-1216   	; 0x2bf0 <vPortYield>
    30b0:	a3 cf       	rjmp	.-186    	; 0x2ff8 <xQueueGenericSend+0x38>
    30b2:	c8 01       	movw	r24, r16
    30b4:	e5 de       	rcall	.-566    	; 0x2e80 <prvUnlockQueue>
    30b6:	32 d4       	rcall	.+2148   	; 0x391c <xTaskResumeAll>
    30b8:	9f cf       	rjmp	.-194    	; 0x2ff8 <xQueueGenericSend+0x38>
    30ba:	c8 01       	movw	r24, r16
    30bc:	e1 de       	rcall	.-574    	; 0x2e80 <prvUnlockQueue>
    30be:	2e d4       	rcall	.+2140   	; 0x391c <xTaskResumeAll>
    30c0:	80 e0       	ldi	r24, 0x00	; 0
    30c2:	0f 90       	pop	r0
    30c4:	0f 90       	pop	r0
    30c6:	0f 90       	pop	r0
    30c8:	0f 90       	pop	r0
    30ca:	0f 90       	pop	r0
    30cc:	df 91       	pop	r29
    30ce:	cf 91       	pop	r28
    30d0:	1f 91       	pop	r17
    30d2:	0f 91       	pop	r16
    30d4:	ff 90       	pop	r15
    30d6:	ef 90       	pop	r14
    30d8:	df 90       	pop	r13
    30da:	cf 90       	pop	r12
    30dc:	bf 90       	pop	r11
    30de:	af 90       	pop	r10
    30e0:	9f 90       	pop	r9
    30e2:	08 95       	ret

000030e4 <xQueueCreateMutexStatic>:
    30e4:	cf 93       	push	r28
    30e6:	df 93       	push	r29
    30e8:	eb 01       	movw	r28, r22
    30ea:	20 97       	sbiw	r28, 0x00	; 0
    30ec:	a1 f0       	breq	.+40     	; 0x3116 <xQueueCreateMutexStatic+0x32>
    30ee:	79 83       	std	Y+1, r23	; 0x01
    30f0:	68 83       	st	Y, r22
    30f2:	81 e0       	ldi	r24, 0x01	; 1
    30f4:	8b 8f       	std	Y+27, r24	; 0x1b
    30f6:	1c 8e       	std	Y+28, r1	; 0x1c
    30f8:	61 e0       	ldi	r22, 0x01	; 1
    30fa:	ce 01       	movw	r24, r28
    30fc:	0a df       	rcall	.-492    	; 0x2f12 <xQueueGenericReset>
    30fe:	1d 82       	std	Y+5, r1	; 0x05
    3100:	1c 82       	std	Y+4, r1	; 0x04
    3102:	19 82       	std	Y+1, r1	; 0x01
    3104:	18 82       	st	Y, r1
    3106:	1e 82       	std	Y+6, r1	; 0x06
    3108:	20 e0       	ldi	r18, 0x00	; 0
    310a:	40 e0       	ldi	r20, 0x00	; 0
    310c:	50 e0       	ldi	r21, 0x00	; 0
    310e:	60 e0       	ldi	r22, 0x00	; 0
    3110:	70 e0       	ldi	r23, 0x00	; 0
    3112:	ce 01       	movw	r24, r28
    3114:	55 df       	rcall	.-342    	; 0x2fc0 <xQueueGenericSend>
    3116:	ce 01       	movw	r24, r28
    3118:	df 91       	pop	r29
    311a:	cf 91       	pop	r28
    311c:	08 95       	ret

0000311e <xQueueGenericSendFromISR>:
    311e:	ef 92       	push	r14
    3120:	ff 92       	push	r15
    3122:	0f 93       	push	r16
    3124:	1f 93       	push	r17
    3126:	cf 93       	push	r28
    3128:	df 93       	push	r29
    312a:	8a 01       	movw	r16, r20
    312c:	fc 01       	movw	r30, r24
    312e:	52 8d       	ldd	r21, Z+26	; 0x1a
    3130:	33 8d       	ldd	r19, Z+27	; 0x1b
    3132:	53 17       	cp	r21, r19
    3134:	10 f0       	brcs	.+4      	; 0x313a <xQueueGenericSendFromISR+0x1c>
    3136:	22 30       	cpi	r18, 0x02	; 2
    3138:	e1 f4       	brne	.+56     	; 0x3172 <xQueueGenericSendFromISR+0x54>
    313a:	42 2f       	mov	r20, r18
    313c:	78 01       	movw	r14, r16
    313e:	ec 01       	movw	r28, r24
    3140:	1e 8d       	ldd	r17, Y+30	; 0x1e
    3142:	26 de       	rcall	.-948    	; 0x2d90 <prvCopyDataToQueue>
    3144:	1f 3f       	cpi	r17, 0xFF	; 255
    3146:	79 f4       	brne	.+30     	; 0x3166 <xQueueGenericSendFromISR+0x48>
    3148:	89 89       	ldd	r24, Y+17	; 0x11
    314a:	88 23       	and	r24, r24
    314c:	a1 f0       	breq	.+40     	; 0x3176 <xQueueGenericSendFromISR+0x58>
    314e:	ce 01       	movw	r24, r28
    3150:	41 96       	adiw	r24, 0x11	; 17
    3152:	17 d5       	rcall	.+2606   	; 0x3b82 <xTaskRemoveFromEventList>
    3154:	88 23       	and	r24, r24
    3156:	89 f0       	breq	.+34     	; 0x317a <xQueueGenericSendFromISR+0x5c>
    3158:	e1 14       	cp	r14, r1
    315a:	f1 04       	cpc	r15, r1
    315c:	81 f0       	breq	.+32     	; 0x317e <xQueueGenericSendFromISR+0x60>
    315e:	81 e0       	ldi	r24, 0x01	; 1
    3160:	f7 01       	movw	r30, r14
    3162:	80 83       	st	Z, r24
    3164:	0d c0       	rjmp	.+26     	; 0x3180 <xQueueGenericSendFromISR+0x62>
    3166:	ff 24       	eor	r15, r15
    3168:	f3 94       	inc	r15
    316a:	f1 0e       	add	r15, r17
    316c:	fe 8e       	std	Y+30, r15	; 0x1e
    316e:	81 e0       	ldi	r24, 0x01	; 1
    3170:	07 c0       	rjmp	.+14     	; 0x3180 <xQueueGenericSendFromISR+0x62>
    3172:	80 e0       	ldi	r24, 0x00	; 0
    3174:	05 c0       	rjmp	.+10     	; 0x3180 <xQueueGenericSendFromISR+0x62>
    3176:	81 e0       	ldi	r24, 0x01	; 1
    3178:	03 c0       	rjmp	.+6      	; 0x3180 <xQueueGenericSendFromISR+0x62>
    317a:	81 e0       	ldi	r24, 0x01	; 1
    317c:	01 c0       	rjmp	.+2      	; 0x3180 <xQueueGenericSendFromISR+0x62>
    317e:	81 e0       	ldi	r24, 0x01	; 1
    3180:	df 91       	pop	r29
    3182:	cf 91       	pop	r28
    3184:	1f 91       	pop	r17
    3186:	0f 91       	pop	r16
    3188:	ff 90       	pop	r15
    318a:	ef 90       	pop	r14
    318c:	08 95       	ret

0000318e <xQueueReceive>:
    318e:	9f 92       	push	r9
    3190:	af 92       	push	r10
    3192:	bf 92       	push	r11
    3194:	cf 92       	push	r12
    3196:	df 92       	push	r13
    3198:	ef 92       	push	r14
    319a:	ff 92       	push	r15
    319c:	0f 93       	push	r16
    319e:	1f 93       	push	r17
    31a0:	cf 93       	push	r28
    31a2:	df 93       	push	r29
    31a4:	00 d0       	rcall	.+0      	; 0x31a6 <xQueueReceive+0x18>
    31a6:	1f 92       	push	r1
    31a8:	1f 92       	push	r1
    31aa:	cd b7       	in	r28, 0x3d	; 61
    31ac:	de b7       	in	r29, 0x3e	; 62
    31ae:	8c 01       	movw	r16, r24
    31b0:	5b 01       	movw	r10, r22
    31b2:	5d 83       	std	Y+5, r21	; 0x05
    31b4:	4c 83       	std	Y+4, r20	; 0x04
    31b6:	e1 2c       	mov	r14, r1
    31b8:	99 24       	eor	r9, r9
    31ba:	93 94       	inc	r9
    31bc:	6c 01       	movw	r12, r24
    31be:	81 e1       	ldi	r24, 0x11	; 17
    31c0:	c8 0e       	add	r12, r24
    31c2:	d1 1c       	adc	r13, r1
    31c4:	0f b6       	in	r0, 0x3f	; 63
    31c6:	f8 94       	cli
    31c8:	0f 92       	push	r0
    31ca:	f8 01       	movw	r30, r16
    31cc:	f2 8c       	ldd	r15, Z+26	; 0x1a
    31ce:	ff 20       	and	r15, r15
    31d0:	91 f0       	breq	.+36     	; 0x31f6 <xQueueReceive+0x68>
    31d2:	b5 01       	movw	r22, r10
    31d4:	c8 01       	movw	r24, r16
    31d6:	3a de       	rcall	.-908    	; 0x2e4c <prvCopyDataFromQueue>
    31d8:	fa 94       	dec	r15
    31da:	f8 01       	movw	r30, r16
    31dc:	f2 8e       	std	Z+26, r15	; 0x1a
    31de:	80 85       	ldd	r24, Z+8	; 0x08
    31e0:	88 23       	and	r24, r24
    31e2:	29 f0       	breq	.+10     	; 0x31ee <xQueueReceive+0x60>
    31e4:	c8 01       	movw	r24, r16
    31e6:	08 96       	adiw	r24, 0x08	; 8
    31e8:	cc d4       	rcall	.+2456   	; 0x3b82 <xTaskRemoveFromEventList>
    31ea:	81 11       	cpse	r24, r1
    31ec:	01 dd       	rcall	.-1534   	; 0x2bf0 <vPortYield>
    31ee:	0f 90       	pop	r0
    31f0:	0f be       	out	0x3f, r0	; 63
    31f2:	81 e0       	ldi	r24, 0x01	; 1
    31f4:	44 c0       	rjmp	.+136    	; 0x327e <xQueueReceive+0xf0>
    31f6:	8c 81       	ldd	r24, Y+4	; 0x04
    31f8:	9d 81       	ldd	r25, Y+5	; 0x05
    31fa:	89 2b       	or	r24, r25
    31fc:	21 f4       	brne	.+8      	; 0x3206 <xQueueReceive+0x78>
    31fe:	0f 90       	pop	r0
    3200:	0f be       	out	0x3f, r0	; 63
    3202:	80 e0       	ldi	r24, 0x00	; 0
    3204:	3c c0       	rjmp	.+120    	; 0x327e <xQueueReceive+0xf0>
    3206:	e1 10       	cpse	r14, r1
    3208:	04 c0       	rjmp	.+8      	; 0x3212 <xQueueReceive+0x84>
    320a:	ce 01       	movw	r24, r28
    320c:	01 96       	adiw	r24, 0x01	; 1
    320e:	01 d5       	rcall	.+2562   	; 0x3c12 <vTaskInternalSetTimeOutState>
    3210:	e9 2c       	mov	r14, r9
    3212:	0f 90       	pop	r0
    3214:	0f be       	out	0x3f, r0	; 63
    3216:	bb d2       	rcall	.+1398   	; 0x378e <vTaskSuspendAll>
    3218:	0f b6       	in	r0, 0x3f	; 63
    321a:	f8 94       	cli
    321c:	0f 92       	push	r0
    321e:	f8 01       	movw	r30, r16
    3220:	85 8d       	ldd	r24, Z+29	; 0x1d
    3222:	8f 3f       	cpi	r24, 0xFF	; 255
    3224:	09 f4       	brne	.+2      	; 0x3228 <xQueueReceive+0x9a>
    3226:	15 8e       	std	Z+29, r1	; 0x1d
    3228:	f8 01       	movw	r30, r16
    322a:	86 8d       	ldd	r24, Z+30	; 0x1e
    322c:	8f 3f       	cpi	r24, 0xFF	; 255
    322e:	09 f4       	brne	.+2      	; 0x3232 <xQueueReceive+0xa4>
    3230:	16 8e       	std	Z+30, r1	; 0x1e
    3232:	0f 90       	pop	r0
    3234:	0f be       	out	0x3f, r0	; 63
    3236:	be 01       	movw	r22, r28
    3238:	6c 5f       	subi	r22, 0xFC	; 252
    323a:	7f 4f       	sbci	r23, 0xFF	; 255
    323c:	ce 01       	movw	r24, r28
    323e:	01 96       	adiw	r24, 0x01	; 1
    3240:	f3 d4       	rcall	.+2534   	; 0x3c28 <xTaskCheckForTimeOut>
    3242:	81 11       	cpse	r24, r1
    3244:	13 c0       	rjmp	.+38     	; 0x326c <xQueueReceive+0xde>
    3246:	c8 01       	movw	r24, r16
    3248:	98 dd       	rcall	.-1232   	; 0x2d7a <prvIsQueueEmpty>
    324a:	88 23       	and	r24, r24
    324c:	59 f0       	breq	.+22     	; 0x3264 <xQueueReceive+0xd6>
    324e:	6c 81       	ldd	r22, Y+4	; 0x04
    3250:	7d 81       	ldd	r23, Y+5	; 0x05
    3252:	c6 01       	movw	r24, r12
    3254:	6d d4       	rcall	.+2266   	; 0x3b30 <vTaskPlaceOnEventList>
    3256:	c8 01       	movw	r24, r16
    3258:	13 de       	rcall	.-986    	; 0x2e80 <prvUnlockQueue>
    325a:	60 d3       	rcall	.+1728   	; 0x391c <xTaskResumeAll>
    325c:	81 11       	cpse	r24, r1
    325e:	b2 cf       	rjmp	.-156    	; 0x31c4 <xQueueReceive+0x36>
    3260:	c7 dc       	rcall	.-1650   	; 0x2bf0 <vPortYield>
    3262:	b0 cf       	rjmp	.-160    	; 0x31c4 <xQueueReceive+0x36>
    3264:	c8 01       	movw	r24, r16
    3266:	0c de       	rcall	.-1000   	; 0x2e80 <prvUnlockQueue>
    3268:	59 d3       	rcall	.+1714   	; 0x391c <xTaskResumeAll>
    326a:	ac cf       	rjmp	.-168    	; 0x31c4 <xQueueReceive+0x36>
    326c:	c8 01       	movw	r24, r16
    326e:	08 de       	rcall	.-1008   	; 0x2e80 <prvUnlockQueue>
    3270:	55 d3       	rcall	.+1706   	; 0x391c <xTaskResumeAll>
    3272:	c8 01       	movw	r24, r16
    3274:	82 dd       	rcall	.-1276   	; 0x2d7a <prvIsQueueEmpty>
    3276:	88 23       	and	r24, r24
    3278:	09 f4       	brne	.+2      	; 0x327c <xQueueReceive+0xee>
    327a:	a4 cf       	rjmp	.-184    	; 0x31c4 <xQueueReceive+0x36>
    327c:	80 e0       	ldi	r24, 0x00	; 0
    327e:	0f 90       	pop	r0
    3280:	0f 90       	pop	r0
    3282:	0f 90       	pop	r0
    3284:	0f 90       	pop	r0
    3286:	0f 90       	pop	r0
    3288:	df 91       	pop	r29
    328a:	cf 91       	pop	r28
    328c:	1f 91       	pop	r17
    328e:	0f 91       	pop	r16
    3290:	ff 90       	pop	r15
    3292:	ef 90       	pop	r14
    3294:	df 90       	pop	r13
    3296:	cf 90       	pop	r12
    3298:	bf 90       	pop	r11
    329a:	af 90       	pop	r10
    329c:	9f 90       	pop	r9
    329e:	08 95       	ret

000032a0 <xQueueSemaphoreTake>:
    32a0:	bf 92       	push	r11
    32a2:	cf 92       	push	r12
    32a4:	df 92       	push	r13
    32a6:	ef 92       	push	r14
    32a8:	ff 92       	push	r15
    32aa:	0f 93       	push	r16
    32ac:	1f 93       	push	r17
    32ae:	cf 93       	push	r28
    32b0:	df 93       	push	r29
    32b2:	00 d0       	rcall	.+0      	; 0x32b4 <xQueueSemaphoreTake+0x14>
    32b4:	1f 92       	push	r1
    32b6:	1f 92       	push	r1
    32b8:	cd b7       	in	r28, 0x3d	; 61
    32ba:	de b7       	in	r29, 0x3e	; 62
    32bc:	8c 01       	movw	r16, r24
    32be:	7d 83       	std	Y+5, r23	; 0x05
    32c0:	6c 83       	std	Y+4, r22	; 0x04
    32c2:	b1 2c       	mov	r11, r1
    32c4:	d1 2c       	mov	r13, r1
    32c6:	cc 24       	eor	r12, r12
    32c8:	c3 94       	inc	r12
    32ca:	7c 01       	movw	r14, r24
    32cc:	81 e1       	ldi	r24, 0x11	; 17
    32ce:	e8 0e       	add	r14, r24
    32d0:	f1 1c       	adc	r15, r1
    32d2:	0f b6       	in	r0, 0x3f	; 63
    32d4:	f8 94       	cli
    32d6:	0f 92       	push	r0
    32d8:	d8 01       	movw	r26, r16
    32da:	5a 96       	adiw	r26, 0x1a	; 26
    32dc:	8c 91       	ld	r24, X
    32de:	5a 97       	sbiw	r26, 0x1a	; 26
    32e0:	88 23       	and	r24, r24
    32e2:	d1 f0       	breq	.+52     	; 0x3318 <xQueueSemaphoreTake+0x78>
    32e4:	81 50       	subi	r24, 0x01	; 1
    32e6:	5a 96       	adiw	r26, 0x1a	; 26
    32e8:	8c 93       	st	X, r24
    32ea:	5a 97       	sbiw	r26, 0x1a	; 26
    32ec:	8d 91       	ld	r24, X+
    32ee:	9c 91       	ld	r25, X
    32f0:	89 2b       	or	r24, r25
    32f2:	21 f4       	brne	.+8      	; 0x32fc <xQueueSemaphoreTake+0x5c>
    32f4:	d8 d5       	rcall	.+2992   	; 0x3ea6 <pvTaskIncrementMutexHeldCount>
    32f6:	f8 01       	movw	r30, r16
    32f8:	95 83       	std	Z+5, r25	; 0x05
    32fa:	84 83       	std	Z+4, r24	; 0x04
    32fc:	d8 01       	movw	r26, r16
    32fe:	18 96       	adiw	r26, 0x08	; 8
    3300:	8c 91       	ld	r24, X
    3302:	88 23       	and	r24, r24
    3304:	29 f0       	breq	.+10     	; 0x3310 <xQueueSemaphoreTake+0x70>
    3306:	c8 01       	movw	r24, r16
    3308:	08 96       	adiw	r24, 0x08	; 8
    330a:	3b d4       	rcall	.+2166   	; 0x3b82 <xTaskRemoveFromEventList>
    330c:	81 11       	cpse	r24, r1
    330e:	70 dc       	rcall	.-1824   	; 0x2bf0 <vPortYield>
    3310:	0f 90       	pop	r0
    3312:	0f be       	out	0x3f, r0	; 63
    3314:	81 e0       	ldi	r24, 0x01	; 1
    3316:	70 c0       	rjmp	.+224    	; 0x33f8 <xQueueSemaphoreTake+0x158>
    3318:	8c 81       	ldd	r24, Y+4	; 0x04
    331a:	9d 81       	ldd	r25, Y+5	; 0x05
    331c:	89 2b       	or	r24, r25
    331e:	21 f4       	brne	.+8      	; 0x3328 <xQueueSemaphoreTake+0x88>
    3320:	0f 90       	pop	r0
    3322:	0f be       	out	0x3f, r0	; 63
    3324:	80 e0       	ldi	r24, 0x00	; 0
    3326:	68 c0       	rjmp	.+208    	; 0x33f8 <xQueueSemaphoreTake+0x158>
    3328:	d1 10       	cpse	r13, r1
    332a:	04 c0       	rjmp	.+8      	; 0x3334 <xQueueSemaphoreTake+0x94>
    332c:	ce 01       	movw	r24, r28
    332e:	01 96       	adiw	r24, 0x01	; 1
    3330:	70 d4       	rcall	.+2272   	; 0x3c12 <vTaskInternalSetTimeOutState>
    3332:	dc 2c       	mov	r13, r12
    3334:	0f 90       	pop	r0
    3336:	0f be       	out	0x3f, r0	; 63
    3338:	2a d2       	rcall	.+1108   	; 0x378e <vTaskSuspendAll>
    333a:	0f b6       	in	r0, 0x3f	; 63
    333c:	f8 94       	cli
    333e:	0f 92       	push	r0
    3340:	f8 01       	movw	r30, r16
    3342:	85 8d       	ldd	r24, Z+29	; 0x1d
    3344:	8f 3f       	cpi	r24, 0xFF	; 255
    3346:	09 f4       	brne	.+2      	; 0x334a <xQueueSemaphoreTake+0xaa>
    3348:	15 8e       	std	Z+29, r1	; 0x1d
    334a:	d8 01       	movw	r26, r16
    334c:	5e 96       	adiw	r26, 0x1e	; 30
    334e:	8c 91       	ld	r24, X
    3350:	5e 97       	sbiw	r26, 0x1e	; 30
    3352:	8f 3f       	cpi	r24, 0xFF	; 255
    3354:	11 f4       	brne	.+4      	; 0x335a <xQueueSemaphoreTake+0xba>
    3356:	5e 96       	adiw	r26, 0x1e	; 30
    3358:	1c 92       	st	X, r1
    335a:	0f 90       	pop	r0
    335c:	0f be       	out	0x3f, r0	; 63
    335e:	be 01       	movw	r22, r28
    3360:	6c 5f       	subi	r22, 0xFC	; 252
    3362:	7f 4f       	sbci	r23, 0xFF	; 255
    3364:	ce 01       	movw	r24, r28
    3366:	01 96       	adiw	r24, 0x01	; 1
    3368:	5f d4       	rcall	.+2238   	; 0x3c28 <xTaskCheckForTimeOut>
    336a:	81 11       	cpse	r24, r1
    336c:	21 c0       	rjmp	.+66     	; 0x33b0 <xQueueSemaphoreTake+0x110>
    336e:	c8 01       	movw	r24, r16
    3370:	04 dd       	rcall	.-1528   	; 0x2d7a <prvIsQueueEmpty>
    3372:	88 23       	and	r24, r24
    3374:	c9 f0       	breq	.+50     	; 0x33a8 <xQueueSemaphoreTake+0x108>
    3376:	f8 01       	movw	r30, r16
    3378:	80 81       	ld	r24, Z
    337a:	91 81       	ldd	r25, Z+1	; 0x01
    337c:	89 2b       	or	r24, r25
    337e:	49 f4       	brne	.+18     	; 0x3392 <xQueueSemaphoreTake+0xf2>
    3380:	0f b6       	in	r0, 0x3f	; 63
    3382:	f8 94       	cli
    3384:	0f 92       	push	r0
    3386:	84 81       	ldd	r24, Z+4	; 0x04
    3388:	95 81       	ldd	r25, Z+5	; 0x05
    338a:	8b d4       	rcall	.+2326   	; 0x3ca2 <xTaskPriorityInherit>
    338c:	b8 2e       	mov	r11, r24
    338e:	0f 90       	pop	r0
    3390:	0f be       	out	0x3f, r0	; 63
    3392:	6c 81       	ldd	r22, Y+4	; 0x04
    3394:	7d 81       	ldd	r23, Y+5	; 0x05
    3396:	c7 01       	movw	r24, r14
    3398:	cb d3       	rcall	.+1942   	; 0x3b30 <vTaskPlaceOnEventList>
    339a:	c8 01       	movw	r24, r16
    339c:	71 dd       	rcall	.-1310   	; 0x2e80 <prvUnlockQueue>
    339e:	be d2       	rcall	.+1404   	; 0x391c <xTaskResumeAll>
    33a0:	81 11       	cpse	r24, r1
    33a2:	97 cf       	rjmp	.-210    	; 0x32d2 <xQueueSemaphoreTake+0x32>
    33a4:	25 dc       	rcall	.-1974   	; 0x2bf0 <vPortYield>
    33a6:	95 cf       	rjmp	.-214    	; 0x32d2 <xQueueSemaphoreTake+0x32>
    33a8:	c8 01       	movw	r24, r16
    33aa:	6a dd       	rcall	.-1324   	; 0x2e80 <prvUnlockQueue>
    33ac:	b7 d2       	rcall	.+1390   	; 0x391c <xTaskResumeAll>
    33ae:	91 cf       	rjmp	.-222    	; 0x32d2 <xQueueSemaphoreTake+0x32>
    33b0:	c8 01       	movw	r24, r16
    33b2:	66 dd       	rcall	.-1332   	; 0x2e80 <prvUnlockQueue>
    33b4:	b3 d2       	rcall	.+1382   	; 0x391c <xTaskResumeAll>
    33b6:	c8 01       	movw	r24, r16
    33b8:	e0 dc       	rcall	.-1600   	; 0x2d7a <prvIsQueueEmpty>
    33ba:	88 23       	and	r24, r24
    33bc:	09 f4       	brne	.+2      	; 0x33c0 <xQueueSemaphoreTake+0x120>
    33be:	89 cf       	rjmp	.-238    	; 0x32d2 <xQueueSemaphoreTake+0x32>
    33c0:	bb 20       	and	r11, r11
    33c2:	c9 f0       	breq	.+50     	; 0x33f6 <xQueueSemaphoreTake+0x156>
    33c4:	0f b6       	in	r0, 0x3f	; 63
    33c6:	f8 94       	cli
    33c8:	0f 92       	push	r0
    33ca:	f8 01       	movw	r30, r16
    33cc:	81 89       	ldd	r24, Z+17	; 0x11
    33ce:	88 23       	and	r24, r24
    33d0:	39 f0       	breq	.+14     	; 0x33e0 <xQueueSemaphoreTake+0x140>
    33d2:	06 88       	ldd	r0, Z+22	; 0x16
    33d4:	f7 89       	ldd	r31, Z+23	; 0x17
    33d6:	e0 2d       	mov	r30, r0
    33d8:	80 81       	ld	r24, Z
    33da:	64 e0       	ldi	r22, 0x04	; 4
    33dc:	68 1b       	sub	r22, r24
    33de:	01 c0       	rjmp	.+2      	; 0x33e2 <xQueueSemaphoreTake+0x142>
    33e0:	60 e0       	ldi	r22, 0x00	; 0
    33e2:	d8 01       	movw	r26, r16
    33e4:	14 96       	adiw	r26, 0x04	; 4
    33e6:	8d 91       	ld	r24, X+
    33e8:	9c 91       	ld	r25, X
    33ea:	15 97       	sbiw	r26, 0x05	; 5
    33ec:	0c d5       	rcall	.+2584   	; 0x3e06 <vTaskPriorityDisinheritAfterTimeout>
    33ee:	0f 90       	pop	r0
    33f0:	0f be       	out	0x3f, r0	; 63
    33f2:	80 e0       	ldi	r24, 0x00	; 0
    33f4:	01 c0       	rjmp	.+2      	; 0x33f8 <xQueueSemaphoreTake+0x158>
    33f6:	80 e0       	ldi	r24, 0x00	; 0
    33f8:	0f 90       	pop	r0
    33fa:	0f 90       	pop	r0
    33fc:	0f 90       	pop	r0
    33fe:	0f 90       	pop	r0
    3400:	0f 90       	pop	r0
    3402:	df 91       	pop	r29
    3404:	cf 91       	pop	r28
    3406:	1f 91       	pop	r17
    3408:	0f 91       	pop	r16
    340a:	ff 90       	pop	r15
    340c:	ef 90       	pop	r14
    340e:	df 90       	pop	r13
    3410:	cf 90       	pop	r12
    3412:	bf 90       	pop	r11
    3414:	08 95       	ret

00003416 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
    {
    3416:	cf 93       	push	r28
    3418:	df 93       	push	r29
    341a:	ec 01       	movw	r28, r24
        will not actually cause the task to block, just place it on a blocked
        list.  It will not block until the scheduler is unlocked - at which
        time a yield will be performed.  If an item is added to the queue while
        the queue is locked, and the calling task blocks on the queue, then the
        calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    341c:	0f b6       	in	r0, 0x3f	; 63
    341e:	f8 94       	cli
    3420:	0f 92       	push	r0
    3422:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3424:	8f 3f       	cpi	r24, 0xFF	; 255
    3426:	09 f4       	brne	.+2      	; 0x342a <vQueueWaitForMessageRestricted+0x14>
    3428:	1d 8e       	std	Y+29, r1	; 0x1d
    342a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    342c:	8f 3f       	cpi	r24, 0xFF	; 255
    342e:	09 f4       	brne	.+2      	; 0x3432 <vQueueWaitForMessageRestricted+0x1c>
    3430:	1e 8e       	std	Y+30, r1	; 0x1e
    3432:	0f 90       	pop	r0
    3434:	0f be       	out	0x3f, r0	; 63
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    3436:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3438:	81 11       	cpse	r24, r1
    343a:	03 c0       	rjmp	.+6      	; 0x3442 <vQueueWaitForMessageRestricted+0x2c>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    343c:	ce 01       	movw	r24, r28
    343e:	41 96       	adiw	r24, 0x11	; 17
    3440:	88 d3       	rcall	.+1808   	; 0x3b52 <vTaskPlaceOnEventListRestricted>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
        prvUnlockQueue( pxQueue );
    3442:	ce 01       	movw	r24, r28
    3444:	1d dd       	rcall	.-1478   	; 0x2e80 <prvUnlockQueue>
    }
    3446:	df 91       	pop	r29
    3448:	cf 91       	pop	r28
    344a:	08 95       	ret

0000344c <prvResetNextTaskUnblockTime>:
    344c:	e0 91 a8 0d 	lds	r30, 0x0DA8	; 0x800da8 <pxDelayedTaskList>
    3450:	f0 91 a9 0d 	lds	r31, 0x0DA9	; 0x800da9 <pxDelayedTaskList+0x1>
    3454:	80 81       	ld	r24, Z
    3456:	81 11       	cpse	r24, r1
    3458:	07 c0       	rjmp	.+14     	; 0x3468 <prvResetNextTaskUnblockTime+0x1c>
    345a:	8f ef       	ldi	r24, 0xFF	; 255
    345c:	9f ef       	ldi	r25, 0xFF	; 255
    345e:	90 93 89 0d 	sts	0x0D89, r25	; 0x800d89 <xNextTaskUnblockTime+0x1>
    3462:	80 93 88 0d 	sts	0x0D88, r24	; 0x800d88 <xNextTaskUnblockTime>
    3466:	08 95       	ret
    3468:	e0 91 a8 0d 	lds	r30, 0x0DA8	; 0x800da8 <pxDelayedTaskList>
    346c:	f0 91 a9 0d 	lds	r31, 0x0DA9	; 0x800da9 <pxDelayedTaskList+0x1>
    3470:	05 80       	ldd	r0, Z+5	; 0x05
    3472:	f6 81       	ldd	r31, Z+6	; 0x06
    3474:	e0 2d       	mov	r30, r0
    3476:	06 80       	ldd	r0, Z+6	; 0x06
    3478:	f7 81       	ldd	r31, Z+7	; 0x07
    347a:	e0 2d       	mov	r30, r0
    347c:	82 81       	ldd	r24, Z+2	; 0x02
    347e:	93 81       	ldd	r25, Z+3	; 0x03
    3480:	90 93 89 0d 	sts	0x0D89, r25	; 0x800d89 <xNextTaskUnblockTime+0x1>
    3484:	80 93 88 0d 	sts	0x0D88, r24	; 0x800d88 <xNextTaskUnblockTime>
    3488:	08 95       	ret

0000348a <prvAddCurrentTaskToDelayedList>:
    348a:	0f 93       	push	r16
    348c:	1f 93       	push	r17
    348e:	cf 93       	push	r28
    3490:	df 93       	push	r29
    3492:	ec 01       	movw	r28, r24
    3494:	00 91 90 0d 	lds	r16, 0x0D90	; 0x800d90 <xTickCount>
    3498:	10 91 91 0d 	lds	r17, 0x0D91	; 0x800d91 <xTickCount+0x1>
    349c:	80 91 ce 0d 	lds	r24, 0x0DCE	; 0x800dce <pxCurrentTCB>
    34a0:	90 91 cf 0d 	lds	r25, 0x0DCF	; 0x800dcf <pxCurrentTCB+0x1>
    34a4:	02 96       	adiw	r24, 0x02	; 2
    34a6:	cf da       	rcall	.-2658   	; 0x2a46 <uxListRemove>
    34a8:	c0 0f       	add	r28, r16
    34aa:	d1 1f       	adc	r29, r17
    34ac:	e0 91 ce 0d 	lds	r30, 0x0DCE	; 0x800dce <pxCurrentTCB>
    34b0:	f0 91 cf 0d 	lds	r31, 0x0DCF	; 0x800dcf <pxCurrentTCB+0x1>
    34b4:	d3 83       	std	Z+3, r29	; 0x03
    34b6:	c2 83       	std	Z+2, r28	; 0x02
    34b8:	c0 17       	cp	r28, r16
    34ba:	d1 07       	cpc	r29, r17
    34bc:	60 f4       	brcc	.+24     	; 0x34d6 <prvAddCurrentTaskToDelayedList+0x4c>
    34be:	60 91 ce 0d 	lds	r22, 0x0DCE	; 0x800dce <pxCurrentTCB>
    34c2:	70 91 cf 0d 	lds	r23, 0x0DCF	; 0x800dcf <pxCurrentTCB+0x1>
    34c6:	80 91 a6 0d 	lds	r24, 0x0DA6	; 0x800da6 <pxOverflowDelayedTaskList>
    34ca:	90 91 a7 0d 	lds	r25, 0x0DA7	; 0x800da7 <pxOverflowDelayedTaskList+0x1>
    34ce:	6e 5f       	subi	r22, 0xFE	; 254
    34d0:	7f 4f       	sbci	r23, 0xFF	; 255
    34d2:	88 da       	rcall	.-2800   	; 0x29e4 <vListInsert>
    34d4:	16 c0       	rjmp	.+44     	; 0x3502 <prvAddCurrentTaskToDelayedList+0x78>
    34d6:	60 91 ce 0d 	lds	r22, 0x0DCE	; 0x800dce <pxCurrentTCB>
    34da:	70 91 cf 0d 	lds	r23, 0x0DCF	; 0x800dcf <pxCurrentTCB+0x1>
    34de:	80 91 a8 0d 	lds	r24, 0x0DA8	; 0x800da8 <pxDelayedTaskList>
    34e2:	90 91 a9 0d 	lds	r25, 0x0DA9	; 0x800da9 <pxDelayedTaskList+0x1>
    34e6:	6e 5f       	subi	r22, 0xFE	; 254
    34e8:	7f 4f       	sbci	r23, 0xFF	; 255
    34ea:	7c da       	rcall	.-2824   	; 0x29e4 <vListInsert>
    34ec:	80 91 88 0d 	lds	r24, 0x0D88	; 0x800d88 <xNextTaskUnblockTime>
    34f0:	90 91 89 0d 	lds	r25, 0x0D89	; 0x800d89 <xNextTaskUnblockTime+0x1>
    34f4:	c8 17       	cp	r28, r24
    34f6:	d9 07       	cpc	r29, r25
    34f8:	20 f4       	brcc	.+8      	; 0x3502 <prvAddCurrentTaskToDelayedList+0x78>
    34fa:	d0 93 89 0d 	sts	0x0D89, r29	; 0x800d89 <xNextTaskUnblockTime+0x1>
    34fe:	c0 93 88 0d 	sts	0x0D88, r28	; 0x800d88 <xNextTaskUnblockTime>
    3502:	df 91       	pop	r29
    3504:	cf 91       	pop	r28
    3506:	1f 91       	pop	r17
    3508:	0f 91       	pop	r16
    350a:	08 95       	ret

0000350c <xTaskCreateStatic>:
    350c:	6f 92       	push	r6
    350e:	7f 92       	push	r7
    3510:	8f 92       	push	r8
    3512:	9f 92       	push	r9
    3514:	af 92       	push	r10
    3516:	bf 92       	push	r11
    3518:	cf 92       	push	r12
    351a:	df 92       	push	r13
    351c:	ef 92       	push	r14
    351e:	ff 92       	push	r15
    3520:	0f 93       	push	r16
    3522:	cf 93       	push	r28
    3524:	df 93       	push	r29
    3526:	c1 14       	cp	r12, r1
    3528:	d1 04       	cpc	r13, r1
    352a:	09 f4       	brne	.+2      	; 0x352e <xTaskCreateStatic+0x22>
    352c:	cf c0       	rjmp	.+414    	; 0x36cc <xTaskCreateStatic+0x1c0>
    352e:	e1 14       	cp	r14, r1
    3530:	f1 04       	cpc	r15, r1
    3532:	09 f4       	brne	.+2      	; 0x3536 <xTaskCreateStatic+0x2a>
    3534:	ce c0       	rjmp	.+412    	; 0x36d2 <xTaskCreateStatic+0x1c6>
    3536:	e6 01       	movw	r28, r12
    3538:	59 01       	movw	r10, r18
    353a:	3a 01       	movw	r6, r20
    353c:	4b 01       	movw	r8, r22
    353e:	6c 01       	movw	r12, r24
    3540:	f8 8e       	std	Y+24, r15	; 0x18
    3542:	ef 8a       	std	Y+23, r14	; 0x17
    3544:	65 ea       	ldi	r22, 0xA5	; 165
    3546:	70 e0       	ldi	r23, 0x00	; 0
    3548:	c7 01       	movw	r24, r14
    354a:	0e 94 23 27 	call	0x4e46	; 0x4e46 <memset>
    354e:	81 e0       	ldi	r24, 0x01	; 1
    3550:	68 1a       	sub	r6, r24
    3552:	71 08       	sbc	r7, r1
    3554:	ef 88       	ldd	r14, Y+23	; 0x17
    3556:	f8 8c       	ldd	r15, Y+24	; 0x18
    3558:	e6 0c       	add	r14, r6
    355a:	f7 1c       	adc	r15, r7
    355c:	d4 01       	movw	r26, r8
    355e:	8c 91       	ld	r24, X
    3560:	89 8f       	std	Y+25, r24	; 0x19
    3562:	8c 91       	ld	r24, X
    3564:	88 23       	and	r24, r24
    3566:	a1 f0       	breq	.+40     	; 0x3590 <xTaskCreateStatic+0x84>
    3568:	ae 01       	movw	r20, r28
    356a:	46 5e       	subi	r20, 0xE6	; 230
    356c:	5f 4f       	sbci	r21, 0xFF	; 255
    356e:	f4 01       	movw	r30, r8
    3570:	31 96       	adiw	r30, 0x01	; 1
    3572:	b8 e0       	ldi	r27, 0x08	; 8
    3574:	8b 0e       	add	r8, r27
    3576:	91 1c       	adc	r9, r1
    3578:	cf 01       	movw	r24, r30
    357a:	21 91       	ld	r18, Z+
    357c:	da 01       	movw	r26, r20
    357e:	2d 93       	st	X+, r18
    3580:	ad 01       	movw	r20, r26
    3582:	dc 01       	movw	r26, r24
    3584:	8c 91       	ld	r24, X
    3586:	88 23       	and	r24, r24
    3588:	19 f0       	breq	.+6      	; 0x3590 <xTaskCreateStatic+0x84>
    358a:	e8 15       	cp	r30, r8
    358c:	f9 05       	cpc	r31, r9
    358e:	a1 f7       	brne	.-24     	; 0x3578 <xTaskCreateStatic+0x6c>
    3590:	18 a2       	std	Y+32, r1	; 0x20
    3592:	04 30       	cpi	r16, 0x04	; 4
    3594:	08 f0       	brcs	.+2      	; 0x3598 <xTaskCreateStatic+0x8c>
    3596:	03 e0       	ldi	r16, 0x03	; 3
    3598:	0e 8b       	std	Y+22, r16	; 0x16
    359a:	09 a3       	std	Y+33, r16	; 0x21
    359c:	1a a2       	std	Y+34, r1	; 0x22
    359e:	4e 01       	movw	r8, r28
    35a0:	b2 e0       	ldi	r27, 0x02	; 2
    35a2:	8b 0e       	add	r8, r27
    35a4:	91 1c       	adc	r9, r1
    35a6:	c4 01       	movw	r24, r8
    35a8:	f8 d9       	rcall	.-3088   	; 0x299a <vListInitialiseItem>
    35aa:	ce 01       	movw	r24, r28
    35ac:	0c 96       	adiw	r24, 0x0c	; 12
    35ae:	f5 d9       	rcall	.-3094   	; 0x299a <vListInitialiseItem>
    35b0:	d9 87       	std	Y+9, r29	; 0x09
    35b2:	c8 87       	std	Y+8, r28	; 0x08
    35b4:	84 e0       	ldi	r24, 0x04	; 4
    35b6:	90 e0       	ldi	r25, 0x00	; 0
    35b8:	80 1b       	sub	r24, r16
    35ba:	91 09       	sbc	r25, r1
    35bc:	9d 87       	std	Y+13, r25	; 0x0d
    35be:	8c 87       	std	Y+12, r24	; 0x0c
    35c0:	db 8b       	std	Y+19, r29	; 0x13
    35c2:	ca 8b       	std	Y+18, r28	; 0x12
    35c4:	1c a2       	std	Y+36, r1	; 0x24
    35c6:	1b a2       	std	Y+35, r1	; 0x23
    35c8:	1d a2       	std	Y+37, r1	; 0x25
    35ca:	1e a2       	std	Y+38, r1	; 0x26
    35cc:	1f a2       	std	Y+39, r1	; 0x27
    35ce:	18 a6       	std	Y+40, r1	; 0x28
    35d0:	19 a6       	std	Y+41, r1	; 0x29
    35d2:	a5 01       	movw	r20, r10
    35d4:	b6 01       	movw	r22, r12
    35d6:	c7 01       	movw	r24, r14
    35d8:	5d da       	rcall	.-2886   	; 0x2a94 <pxPortInitialiseStack>
    35da:	99 83       	std	Y+1, r25	; 0x01
    35dc:	88 83       	st	Y, r24
    35de:	0f b6       	in	r0, 0x3f	; 63
    35e0:	f8 94       	cli
    35e2:	0f 92       	push	r0
    35e4:	80 91 92 0d 	lds	r24, 0x0D92	; 0x800d92 <uxCurrentNumberOfTasks>
    35e8:	8f 5f       	subi	r24, 0xFF	; 255
    35ea:	80 93 92 0d 	sts	0x0D92, r24	; 0x800d92 <uxCurrentNumberOfTasks>
    35ee:	80 91 ce 0d 	lds	r24, 0x0DCE	; 0x800dce <pxCurrentTCB>
    35f2:	90 91 cf 0d 	lds	r25, 0x0DCF	; 0x800dcf <pxCurrentTCB+0x1>
    35f6:	89 2b       	or	r24, r25
    35f8:	69 f5       	brne	.+90     	; 0x3654 <xTaskCreateStatic+0x148>
    35fa:	d0 93 cf 0d 	sts	0x0DCF, r29	; 0x800dcf <pxCurrentTCB+0x1>
    35fe:	c0 93 ce 0d 	sts	0x0DCE, r28	; 0x800dce <pxCurrentTCB>
    3602:	80 91 92 0d 	lds	r24, 0x0D92	; 0x800d92 <uxCurrentNumberOfTasks>
    3606:	81 30       	cpi	r24, 0x01	; 1
    3608:	a9 f5       	brne	.+106    	; 0x3674 <xTaskCreateStatic+0x168>
    360a:	8a ea       	ldi	r24, 0xAA	; 170
    360c:	9d e0       	ldi	r25, 0x0D	; 13
    360e:	b7 d9       	rcall	.-3218   	; 0x297e <vListInitialise>
    3610:	83 eb       	ldi	r24, 0xB3	; 179
    3612:	9d e0       	ldi	r25, 0x0D	; 13
    3614:	b4 d9       	rcall	.-3224   	; 0x297e <vListInitialise>
    3616:	8c eb       	ldi	r24, 0xBC	; 188
    3618:	9d e0       	ldi	r25, 0x0D	; 13
    361a:	b1 d9       	rcall	.-3230   	; 0x297e <vListInitialise>
    361c:	85 ec       	ldi	r24, 0xC5	; 197
    361e:	9d e0       	ldi	r25, 0x0D	; 13
    3620:	ae d9       	rcall	.-3236   	; 0x297e <vListInitialise>
    3622:	8e e7       	ldi	r24, 0x7E	; 126
    3624:	9d e0       	ldi	r25, 0x0D	; 13
    3626:	ab d9       	rcall	.-3242   	; 0x297e <vListInitialise>
    3628:	85 e7       	ldi	r24, 0x75	; 117
    362a:	9d e0       	ldi	r25, 0x0D	; 13
    362c:	a8 d9       	rcall	.-3248   	; 0x297e <vListInitialise>
    362e:	8d e9       	ldi	r24, 0x9D	; 157
    3630:	9d e0       	ldi	r25, 0x0D	; 13
    3632:	a5 d9       	rcall	.-3254   	; 0x297e <vListInitialise>
    3634:	84 e9       	ldi	r24, 0x94	; 148
    3636:	9d e0       	ldi	r25, 0x0D	; 13
    3638:	a2 d9       	rcall	.-3260   	; 0x297e <vListInitialise>
    363a:	8e e7       	ldi	r24, 0x7E	; 126
    363c:	9d e0       	ldi	r25, 0x0D	; 13
    363e:	90 93 a9 0d 	sts	0x0DA9, r25	; 0x800da9 <pxDelayedTaskList+0x1>
    3642:	80 93 a8 0d 	sts	0x0DA8, r24	; 0x800da8 <pxDelayedTaskList>
    3646:	85 e7       	ldi	r24, 0x75	; 117
    3648:	9d e0       	ldi	r25, 0x0D	; 13
    364a:	90 93 a7 0d 	sts	0x0DA7, r25	; 0x800da7 <pxOverflowDelayedTaskList+0x1>
    364e:	80 93 a6 0d 	sts	0x0DA6, r24	; 0x800da6 <pxOverflowDelayedTaskList>
    3652:	10 c0       	rjmp	.+32     	; 0x3674 <xTaskCreateStatic+0x168>
    3654:	80 91 8e 0d 	lds	r24, 0x0D8E	; 0x800d8e <xSchedulerRunning>
    3658:	81 11       	cpse	r24, r1
    365a:	0c c0       	rjmp	.+24     	; 0x3674 <xTaskCreateStatic+0x168>
    365c:	e0 91 ce 0d 	lds	r30, 0x0DCE	; 0x800dce <pxCurrentTCB>
    3660:	f0 91 cf 0d 	lds	r31, 0x0DCF	; 0x800dcf <pxCurrentTCB+0x1>
    3664:	96 89       	ldd	r25, Z+22	; 0x16
    3666:	8e 89       	ldd	r24, Y+22	; 0x16
    3668:	89 17       	cp	r24, r25
    366a:	20 f0       	brcs	.+8      	; 0x3674 <xTaskCreateStatic+0x168>
    366c:	d0 93 cf 0d 	sts	0x0DCF, r29	; 0x800dcf <pxCurrentTCB+0x1>
    3670:	c0 93 ce 0d 	sts	0x0DCE, r28	; 0x800dce <pxCurrentTCB>
    3674:	80 91 8a 0d 	lds	r24, 0x0D8A	; 0x800d8a <uxTaskNumber>
    3678:	8f 5f       	subi	r24, 0xFF	; 255
    367a:	80 93 8a 0d 	sts	0x0D8A, r24	; 0x800d8a <uxTaskNumber>
    367e:	8e 89       	ldd	r24, Y+22	; 0x16
    3680:	90 91 8f 0d 	lds	r25, 0x0D8F	; 0x800d8f <uxTopReadyPriority>
    3684:	98 17       	cp	r25, r24
    3686:	10 f4       	brcc	.+4      	; 0x368c <xTaskCreateStatic+0x180>
    3688:	80 93 8f 0d 	sts	0x0D8F, r24	; 0x800d8f <uxTopReadyPriority>
    368c:	90 e0       	ldi	r25, 0x00	; 0
    368e:	9c 01       	movw	r18, r24
    3690:	22 0f       	add	r18, r18
    3692:	33 1f       	adc	r19, r19
    3694:	22 0f       	add	r18, r18
    3696:	33 1f       	adc	r19, r19
    3698:	22 0f       	add	r18, r18
    369a:	33 1f       	adc	r19, r19
    369c:	82 0f       	add	r24, r18
    369e:	93 1f       	adc	r25, r19
    36a0:	b4 01       	movw	r22, r8
    36a2:	86 55       	subi	r24, 0x56	; 86
    36a4:	92 4f       	sbci	r25, 0xF2	; 242
    36a6:	7d d9       	rcall	.-3334   	; 0x29a2 <vListInsertEnd>
    36a8:	0f 90       	pop	r0
    36aa:	0f be       	out	0x3f, r0	; 63
    36ac:	80 91 8e 0d 	lds	r24, 0x0D8E	; 0x800d8e <xSchedulerRunning>
    36b0:	88 23       	and	r24, r24
    36b2:	91 f0       	breq	.+36     	; 0x36d8 <xTaskCreateStatic+0x1cc>
    36b4:	e0 91 ce 0d 	lds	r30, 0x0DCE	; 0x800dce <pxCurrentTCB>
    36b8:	f0 91 cf 0d 	lds	r31, 0x0DCF	; 0x800dcf <pxCurrentTCB+0x1>
    36bc:	96 89       	ldd	r25, Z+22	; 0x16
    36be:	8e 89       	ldd	r24, Y+22	; 0x16
    36c0:	98 17       	cp	r25, r24
    36c2:	68 f4       	brcc	.+26     	; 0x36de <xTaskCreateStatic+0x1d2>
    36c4:	95 da       	rcall	.-2774   	; 0x2bf0 <vPortYield>
    36c6:	8c 2f       	mov	r24, r28
    36c8:	9d 2f       	mov	r25, r29
    36ca:	0b c0       	rjmp	.+22     	; 0x36e2 <xTaskCreateStatic+0x1d6>
    36cc:	80 e0       	ldi	r24, 0x00	; 0
    36ce:	90 e0       	ldi	r25, 0x00	; 0
    36d0:	08 c0       	rjmp	.+16     	; 0x36e2 <xTaskCreateStatic+0x1d6>
    36d2:	80 e0       	ldi	r24, 0x00	; 0
    36d4:	90 e0       	ldi	r25, 0x00	; 0
    36d6:	05 c0       	rjmp	.+10     	; 0x36e2 <xTaskCreateStatic+0x1d6>
    36d8:	8c 2f       	mov	r24, r28
    36da:	9d 2f       	mov	r25, r29
    36dc:	02 c0       	rjmp	.+4      	; 0x36e2 <xTaskCreateStatic+0x1d6>
    36de:	8c 2f       	mov	r24, r28
    36e0:	9d 2f       	mov	r25, r29
    36e2:	df 91       	pop	r29
    36e4:	cf 91       	pop	r28
    36e6:	0f 91       	pop	r16
    36e8:	ff 90       	pop	r15
    36ea:	ef 90       	pop	r14
    36ec:	df 90       	pop	r13
    36ee:	cf 90       	pop	r12
    36f0:	bf 90       	pop	r11
    36f2:	af 90       	pop	r10
    36f4:	9f 90       	pop	r9
    36f6:	8f 90       	pop	r8
    36f8:	7f 90       	pop	r7
    36fa:	6f 90       	pop	r6
    36fc:	08 95       	ret

000036fe <vTaskStartScheduler>:
    36fe:	cf 92       	push	r12
    3700:	df 92       	push	r13
    3702:	ef 92       	push	r14
    3704:	ff 92       	push	r15
    3706:	0f 93       	push	r16
    3708:	cf 93       	push	r28
    370a:	df 93       	push	r29
    370c:	00 d0       	rcall	.+0      	; 0x370e <vTaskStartScheduler+0x10>
    370e:	00 d0       	rcall	.+0      	; 0x3710 <vTaskStartScheduler+0x12>
    3710:	cd b7       	in	r28, 0x3d	; 61
    3712:	de b7       	in	r29, 0x3e	; 62
    3714:	1e 82       	std	Y+6, r1	; 0x06
    3716:	1d 82       	std	Y+5, r1	; 0x05
    3718:	1c 82       	std	Y+4, r1	; 0x04
    371a:	1b 82       	std	Y+3, r1	; 0x03
    371c:	ae 01       	movw	r20, r28
    371e:	4f 5f       	subi	r20, 0xFF	; 255
    3720:	5f 4f       	sbci	r21, 0xFF	; 255
    3722:	be 01       	movw	r22, r28
    3724:	6d 5f       	subi	r22, 0xFD	; 253
    3726:	7f 4f       	sbci	r23, 0xFF	; 255
    3728:	ce 01       	movw	r24, r28
    372a:	05 96       	adiw	r24, 0x05	; 5
    372c:	08 d9       	rcall	.-3568   	; 0x293e <vApplicationGetIdleTaskMemory>
    372e:	cd 80       	ldd	r12, Y+5	; 0x05
    3730:	de 80       	ldd	r13, Y+6	; 0x06
    3732:	eb 80       	ldd	r14, Y+3	; 0x03
    3734:	fc 80       	ldd	r15, Y+4	; 0x04
    3736:	49 81       	ldd	r20, Y+1	; 0x01
    3738:	5a 81       	ldd	r21, Y+2	; 0x02
    373a:	00 e0       	ldi	r16, 0x00	; 0
    373c:	20 e0       	ldi	r18, 0x00	; 0
    373e:	30 e0       	ldi	r19, 0x00	; 0
    3740:	62 e0       	ldi	r22, 0x02	; 2
    3742:	73 e0       	ldi	r23, 0x03	; 3
    3744:	83 eb       	ldi	r24, 0xB3	; 179
    3746:	90 e0       	ldi	r25, 0x00	; 0
    3748:	e1 de       	rcall	.-574    	; 0x350c <xTaskCreateStatic>
    374a:	89 2b       	or	r24, r25
    374c:	91 f0       	breq	.+36     	; 0x3772 <vTaskStartScheduler+0x74>
    374e:	1a d4       	rcall	.+2100   	; 0x3f84 <xTimerCreateTimerTask>
    3750:	81 30       	cpi	r24, 0x01	; 1
    3752:	79 f4       	brne	.+30     	; 0x3772 <vTaskStartScheduler+0x74>
    3754:	f8 94       	cli
    3756:	8f ef       	ldi	r24, 0xFF	; 255
    3758:	9f ef       	ldi	r25, 0xFF	; 255
    375a:	90 93 89 0d 	sts	0x0D89, r25	; 0x800d89 <xNextTaskUnblockTime+0x1>
    375e:	80 93 88 0d 	sts	0x0D88, r24	; 0x800d88 <xNextTaskUnblockTime>
    3762:	81 e0       	ldi	r24, 0x01	; 1
    3764:	80 93 8e 0d 	sts	0x0D8E, r24	; 0x800d8e <xSchedulerRunning>
    3768:	10 92 91 0d 	sts	0x0D91, r1	; 0x800d91 <xTickCount+0x1>
    376c:	10 92 90 0d 	sts	0x0D90, r1	; 0x800d90 <xTickCount>
    3770:	03 da       	rcall	.-3066   	; 0x2b78 <xPortStartScheduler>
    3772:	26 96       	adiw	r28, 0x06	; 6
    3774:	0f b6       	in	r0, 0x3f	; 63
    3776:	f8 94       	cli
    3778:	de bf       	out	0x3e, r29	; 62
    377a:	0f be       	out	0x3f, r0	; 63
    377c:	cd bf       	out	0x3d, r28	; 61
    377e:	df 91       	pop	r29
    3780:	cf 91       	pop	r28
    3782:	0f 91       	pop	r16
    3784:	ff 90       	pop	r15
    3786:	ef 90       	pop	r14
    3788:	df 90       	pop	r13
    378a:	cf 90       	pop	r12
    378c:	08 95       	ret

0000378e <vTaskSuspendAll>:
    378e:	80 91 87 0d 	lds	r24, 0x0D87	; 0x800d87 <uxSchedulerSuspended>
    3792:	8f 5f       	subi	r24, 0xFF	; 255
    3794:	80 93 87 0d 	sts	0x0D87, r24	; 0x800d87 <uxSchedulerSuspended>
    3798:	08 95       	ret

0000379a <xTaskGetTickCount>:
    379a:	0f b6       	in	r0, 0x3f	; 63
    379c:	f8 94       	cli
    379e:	0f 92       	push	r0
    37a0:	80 91 90 0d 	lds	r24, 0x0D90	; 0x800d90 <xTickCount>
    37a4:	90 91 91 0d 	lds	r25, 0x0D91	; 0x800d91 <xTickCount+0x1>
    37a8:	0f 90       	pop	r0
    37aa:	0f be       	out	0x3f, r0	; 63
    37ac:	08 95       	ret

000037ae <xTaskIncrementTick>:
    37ae:	cf 92       	push	r12
    37b0:	df 92       	push	r13
    37b2:	ef 92       	push	r14
    37b4:	ff 92       	push	r15
    37b6:	0f 93       	push	r16
    37b8:	1f 93       	push	r17
    37ba:	cf 93       	push	r28
    37bc:	df 93       	push	r29
    37be:	80 91 87 0d 	lds	r24, 0x0D87	; 0x800d87 <uxSchedulerSuspended>
    37c2:	81 11       	cpse	r24, r1
    37c4:	95 c0       	rjmp	.+298    	; 0x38f0 <xTaskIncrementTick+0x142>
    37c6:	e0 90 90 0d 	lds	r14, 0x0D90	; 0x800d90 <xTickCount>
    37ca:	f0 90 91 0d 	lds	r15, 0x0D91	; 0x800d91 <xTickCount+0x1>
    37ce:	8f ef       	ldi	r24, 0xFF	; 255
    37d0:	e8 1a       	sub	r14, r24
    37d2:	f8 0a       	sbc	r15, r24
    37d4:	f0 92 91 0d 	sts	0x0D91, r15	; 0x800d91 <xTickCount+0x1>
    37d8:	e0 92 90 0d 	sts	0x0D90, r14	; 0x800d90 <xTickCount>
    37dc:	e1 14       	cp	r14, r1
    37de:	f1 04       	cpc	r15, r1
    37e0:	b1 f4       	brne	.+44     	; 0x380e <xTaskIncrementTick+0x60>
    37e2:	80 91 a8 0d 	lds	r24, 0x0DA8	; 0x800da8 <pxDelayedTaskList>
    37e6:	90 91 a9 0d 	lds	r25, 0x0DA9	; 0x800da9 <pxDelayedTaskList+0x1>
    37ea:	20 91 a6 0d 	lds	r18, 0x0DA6	; 0x800da6 <pxOverflowDelayedTaskList>
    37ee:	30 91 a7 0d 	lds	r19, 0x0DA7	; 0x800da7 <pxOverflowDelayedTaskList+0x1>
    37f2:	30 93 a9 0d 	sts	0x0DA9, r19	; 0x800da9 <pxDelayedTaskList+0x1>
    37f6:	20 93 a8 0d 	sts	0x0DA8, r18	; 0x800da8 <pxDelayedTaskList>
    37fa:	90 93 a7 0d 	sts	0x0DA7, r25	; 0x800da7 <pxOverflowDelayedTaskList+0x1>
    37fe:	80 93 a6 0d 	sts	0x0DA6, r24	; 0x800da6 <pxOverflowDelayedTaskList>
    3802:	80 91 8b 0d 	lds	r24, 0x0D8B	; 0x800d8b <xNumOfOverflows>
    3806:	8f 5f       	subi	r24, 0xFF	; 255
    3808:	80 93 8b 0d 	sts	0x0D8B, r24	; 0x800d8b <xNumOfOverflows>
    380c:	1f de       	rcall	.-962    	; 0x344c <prvResetNextTaskUnblockTime>
    380e:	80 91 88 0d 	lds	r24, 0x0D88	; 0x800d88 <xNextTaskUnblockTime>
    3812:	90 91 89 0d 	lds	r25, 0x0D89	; 0x800d89 <xNextTaskUnblockTime+0x1>
    3816:	e8 16       	cp	r14, r24
    3818:	f9 06       	cpc	r15, r25
    381a:	10 f4       	brcc	.+4      	; 0x3820 <xTaskIncrementTick+0x72>
    381c:	d1 2c       	mov	r13, r1
    381e:	50 c0       	rjmp	.+160    	; 0x38c0 <xTaskIncrementTick+0x112>
    3820:	d1 2c       	mov	r13, r1
    3822:	cc 24       	eor	r12, r12
    3824:	c3 94       	inc	r12
    3826:	e0 91 a8 0d 	lds	r30, 0x0DA8	; 0x800da8 <pxDelayedTaskList>
    382a:	f0 91 a9 0d 	lds	r31, 0x0DA9	; 0x800da9 <pxDelayedTaskList+0x1>
    382e:	80 81       	ld	r24, Z
    3830:	81 11       	cpse	r24, r1
    3832:	07 c0       	rjmp	.+14     	; 0x3842 <xTaskIncrementTick+0x94>
    3834:	8f ef       	ldi	r24, 0xFF	; 255
    3836:	9f ef       	ldi	r25, 0xFF	; 255
    3838:	90 93 89 0d 	sts	0x0D89, r25	; 0x800d89 <xNextTaskUnblockTime+0x1>
    383c:	80 93 88 0d 	sts	0x0D88, r24	; 0x800d88 <xNextTaskUnblockTime>
    3840:	3f c0       	rjmp	.+126    	; 0x38c0 <xTaskIncrementTick+0x112>
    3842:	e0 91 a8 0d 	lds	r30, 0x0DA8	; 0x800da8 <pxDelayedTaskList>
    3846:	f0 91 a9 0d 	lds	r31, 0x0DA9	; 0x800da9 <pxDelayedTaskList+0x1>
    384a:	05 80       	ldd	r0, Z+5	; 0x05
    384c:	f6 81       	ldd	r31, Z+6	; 0x06
    384e:	e0 2d       	mov	r30, r0
    3850:	c6 81       	ldd	r28, Z+6	; 0x06
    3852:	d7 81       	ldd	r29, Z+7	; 0x07
    3854:	8a 81       	ldd	r24, Y+2	; 0x02
    3856:	9b 81       	ldd	r25, Y+3	; 0x03
    3858:	e8 16       	cp	r14, r24
    385a:	f9 06       	cpc	r15, r25
    385c:	28 f4       	brcc	.+10     	; 0x3868 <xTaskIncrementTick+0xba>
    385e:	90 93 89 0d 	sts	0x0D89, r25	; 0x800d89 <xNextTaskUnblockTime+0x1>
    3862:	80 93 88 0d 	sts	0x0D88, r24	; 0x800d88 <xNextTaskUnblockTime>
    3866:	2c c0       	rjmp	.+88     	; 0x38c0 <xTaskIncrementTick+0x112>
    3868:	8e 01       	movw	r16, r28
    386a:	0e 5f       	subi	r16, 0xFE	; 254
    386c:	1f 4f       	sbci	r17, 0xFF	; 255
    386e:	c8 01       	movw	r24, r16
    3870:	ea d8       	rcall	.-3628   	; 0x2a46 <uxListRemove>
    3872:	8c 89       	ldd	r24, Y+20	; 0x14
    3874:	9d 89       	ldd	r25, Y+21	; 0x15
    3876:	89 2b       	or	r24, r25
    3878:	19 f0       	breq	.+6      	; 0x3880 <xTaskIncrementTick+0xd2>
    387a:	ce 01       	movw	r24, r28
    387c:	0c 96       	adiw	r24, 0x0c	; 12
    387e:	e3 d8       	rcall	.-3642   	; 0x2a46 <uxListRemove>
    3880:	8e 89       	ldd	r24, Y+22	; 0x16
    3882:	90 91 8f 0d 	lds	r25, 0x0D8F	; 0x800d8f <uxTopReadyPriority>
    3886:	98 17       	cp	r25, r24
    3888:	10 f4       	brcc	.+4      	; 0x388e <xTaskIncrementTick+0xe0>
    388a:	80 93 8f 0d 	sts	0x0D8F, r24	; 0x800d8f <uxTopReadyPriority>
    388e:	90 e0       	ldi	r25, 0x00	; 0
    3890:	9c 01       	movw	r18, r24
    3892:	22 0f       	add	r18, r18
    3894:	33 1f       	adc	r19, r19
    3896:	22 0f       	add	r18, r18
    3898:	33 1f       	adc	r19, r19
    389a:	22 0f       	add	r18, r18
    389c:	33 1f       	adc	r19, r19
    389e:	82 0f       	add	r24, r18
    38a0:	93 1f       	adc	r25, r19
    38a2:	b8 01       	movw	r22, r16
    38a4:	86 55       	subi	r24, 0x56	; 86
    38a6:	92 4f       	sbci	r25, 0xF2	; 242
    38a8:	7c d8       	rcall	.-3848   	; 0x29a2 <vListInsertEnd>
    38aa:	e0 91 ce 0d 	lds	r30, 0x0DCE	; 0x800dce <pxCurrentTCB>
    38ae:	f0 91 cf 0d 	lds	r31, 0x0DCF	; 0x800dcf <pxCurrentTCB+0x1>
    38b2:	9e 89       	ldd	r25, Y+22	; 0x16
    38b4:	86 89       	ldd	r24, Z+22	; 0x16
    38b6:	98 17       	cp	r25, r24
    38b8:	08 f4       	brcc	.+2      	; 0x38bc <xTaskIncrementTick+0x10e>
    38ba:	b5 cf       	rjmp	.-150    	; 0x3826 <xTaskIncrementTick+0x78>
    38bc:	dc 2c       	mov	r13, r12
    38be:	b3 cf       	rjmp	.-154    	; 0x3826 <xTaskIncrementTick+0x78>
    38c0:	e0 91 ce 0d 	lds	r30, 0x0DCE	; 0x800dce <pxCurrentTCB>
    38c4:	f0 91 cf 0d 	lds	r31, 0x0DCF	; 0x800dcf <pxCurrentTCB+0x1>
    38c8:	86 89       	ldd	r24, Z+22	; 0x16
    38ca:	90 e0       	ldi	r25, 0x00	; 0
    38cc:	fc 01       	movw	r30, r24
    38ce:	ee 0f       	add	r30, r30
    38d0:	ff 1f       	adc	r31, r31
    38d2:	ee 0f       	add	r30, r30
    38d4:	ff 1f       	adc	r31, r31
    38d6:	ee 0f       	add	r30, r30
    38d8:	ff 1f       	adc	r31, r31
    38da:	8e 0f       	add	r24, r30
    38dc:	9f 1f       	adc	r25, r31
    38de:	fc 01       	movw	r30, r24
    38e0:	e6 55       	subi	r30, 0x56	; 86
    38e2:	f2 4f       	sbci	r31, 0xF2	; 242
    38e4:	80 81       	ld	r24, Z
    38e6:	82 30       	cpi	r24, 0x02	; 2
    38e8:	48 f0       	brcs	.+18     	; 0x38fc <xTaskIncrementTick+0x14e>
    38ea:	dd 24       	eor	r13, r13
    38ec:	d3 94       	inc	r13
    38ee:	06 c0       	rjmp	.+12     	; 0x38fc <xTaskIncrementTick+0x14e>
    38f0:	80 91 8d 0d 	lds	r24, 0x0D8D	; 0x800d8d <uxPendedTicks>
    38f4:	8f 5f       	subi	r24, 0xFF	; 255
    38f6:	80 93 8d 0d 	sts	0x0D8D, r24	; 0x800d8d <uxPendedTicks>
    38fa:	d1 2c       	mov	r13, r1
    38fc:	80 91 8c 0d 	lds	r24, 0x0D8C	; 0x800d8c <xYieldPending>
    3900:	88 23       	and	r24, r24
    3902:	11 f0       	breq	.+4      	; 0x3908 <xTaskIncrementTick+0x15a>
    3904:	dd 24       	eor	r13, r13
    3906:	d3 94       	inc	r13
    3908:	8d 2d       	mov	r24, r13
    390a:	df 91       	pop	r29
    390c:	cf 91       	pop	r28
    390e:	1f 91       	pop	r17
    3910:	0f 91       	pop	r16
    3912:	ff 90       	pop	r15
    3914:	ef 90       	pop	r14
    3916:	df 90       	pop	r13
    3918:	cf 90       	pop	r12
    391a:	08 95       	ret

0000391c <xTaskResumeAll>:
    391c:	df 92       	push	r13
    391e:	ef 92       	push	r14
    3920:	ff 92       	push	r15
    3922:	0f 93       	push	r16
    3924:	1f 93       	push	r17
    3926:	cf 93       	push	r28
    3928:	df 93       	push	r29
    392a:	0f b6       	in	r0, 0x3f	; 63
    392c:	f8 94       	cli
    392e:	0f 92       	push	r0
    3930:	80 91 87 0d 	lds	r24, 0x0D87	; 0x800d87 <uxSchedulerSuspended>
    3934:	81 50       	subi	r24, 0x01	; 1
    3936:	80 93 87 0d 	sts	0x0D87, r24	; 0x800d87 <uxSchedulerSuspended>
    393a:	80 91 87 0d 	lds	r24, 0x0D87	; 0x800d87 <uxSchedulerSuspended>
    393e:	81 11       	cpse	r24, r1
    3940:	59 c0       	rjmp	.+178    	; 0x39f4 <xTaskResumeAll+0xd8>
    3942:	80 91 92 0d 	lds	r24, 0x0D92	; 0x800d92 <uxCurrentNumberOfTasks>
    3946:	81 11       	cpse	r24, r1
    3948:	30 c0       	rjmp	.+96     	; 0x39aa <xTaskResumeAll+0x8e>
    394a:	57 c0       	rjmp	.+174    	; 0x39fa <xTaskResumeAll+0xde>
    394c:	d7 01       	movw	r26, r14
    394e:	15 96       	adiw	r26, 0x05	; 5
    3950:	ed 91       	ld	r30, X+
    3952:	fc 91       	ld	r31, X
    3954:	16 97       	sbiw	r26, 0x06	; 6
    3956:	c6 81       	ldd	r28, Z+6	; 0x06
    3958:	d7 81       	ldd	r29, Z+7	; 0x07
    395a:	ce 01       	movw	r24, r28
    395c:	0c 96       	adiw	r24, 0x0c	; 12
    395e:	73 d8       	rcall	.-3866   	; 0x2a46 <uxListRemove>
    3960:	8e 01       	movw	r16, r28
    3962:	0e 5f       	subi	r16, 0xFE	; 254
    3964:	1f 4f       	sbci	r17, 0xFF	; 255
    3966:	c8 01       	movw	r24, r16
    3968:	6e d8       	rcall	.-3876   	; 0x2a46 <uxListRemove>
    396a:	8e 89       	ldd	r24, Y+22	; 0x16
    396c:	90 91 8f 0d 	lds	r25, 0x0D8F	; 0x800d8f <uxTopReadyPriority>
    3970:	98 17       	cp	r25, r24
    3972:	10 f4       	brcc	.+4      	; 0x3978 <xTaskResumeAll+0x5c>
    3974:	80 93 8f 0d 	sts	0x0D8F, r24	; 0x800d8f <uxTopReadyPriority>
    3978:	90 e0       	ldi	r25, 0x00	; 0
    397a:	9c 01       	movw	r18, r24
    397c:	22 0f       	add	r18, r18
    397e:	33 1f       	adc	r19, r19
    3980:	22 0f       	add	r18, r18
    3982:	33 1f       	adc	r19, r19
    3984:	22 0f       	add	r18, r18
    3986:	33 1f       	adc	r19, r19
    3988:	82 0f       	add	r24, r18
    398a:	93 1f       	adc	r25, r19
    398c:	b8 01       	movw	r22, r16
    398e:	86 55       	subi	r24, 0x56	; 86
    3990:	92 4f       	sbci	r25, 0xF2	; 242
    3992:	07 d8       	rcall	.-4082   	; 0x29a2 <vListInsertEnd>
    3994:	e0 91 ce 0d 	lds	r30, 0x0DCE	; 0x800dce <pxCurrentTCB>
    3998:	f0 91 cf 0d 	lds	r31, 0x0DCF	; 0x800dcf <pxCurrentTCB+0x1>
    399c:	9e 89       	ldd	r25, Y+22	; 0x16
    399e:	86 89       	ldd	r24, Z+22	; 0x16
    39a0:	98 17       	cp	r25, r24
    39a2:	68 f0       	brcs	.+26     	; 0x39be <xTaskResumeAll+0xa2>
    39a4:	d0 92 8c 0d 	sts	0x0D8C, r13	; 0x800d8c <xYieldPending>
    39a8:	0a c0       	rjmp	.+20     	; 0x39be <xTaskResumeAll+0xa2>
    39aa:	c0 e0       	ldi	r28, 0x00	; 0
    39ac:	d0 e0       	ldi	r29, 0x00	; 0
    39ae:	0f 2e       	mov	r0, r31
    39b0:	fd e9       	ldi	r31, 0x9D	; 157
    39b2:	ef 2e       	mov	r14, r31
    39b4:	fd e0       	ldi	r31, 0x0D	; 13
    39b6:	ff 2e       	mov	r15, r31
    39b8:	f0 2d       	mov	r31, r0
    39ba:	dd 24       	eor	r13, r13
    39bc:	d3 94       	inc	r13
    39be:	f7 01       	movw	r30, r14
    39c0:	80 81       	ld	r24, Z
    39c2:	81 11       	cpse	r24, r1
    39c4:	c3 cf       	rjmp	.-122    	; 0x394c <xTaskResumeAll+0x30>
    39c6:	cd 2b       	or	r28, r29
    39c8:	09 f0       	breq	.+2      	; 0x39cc <xTaskResumeAll+0xb0>
    39ca:	40 dd       	rcall	.-1408   	; 0x344c <prvResetNextTaskUnblockTime>
    39cc:	c0 91 8d 0d 	lds	r28, 0x0D8D	; 0x800d8d <uxPendedTicks>
    39d0:	cc 23       	and	r28, r28
    39d2:	49 f0       	breq	.+18     	; 0x39e6 <xTaskResumeAll+0xca>
    39d4:	d1 e0       	ldi	r29, 0x01	; 1
    39d6:	eb de       	rcall	.-554    	; 0x37ae <xTaskIncrementTick>
    39d8:	81 11       	cpse	r24, r1
    39da:	d0 93 8c 0d 	sts	0x0D8C, r29	; 0x800d8c <xYieldPending>
    39de:	c1 50       	subi	r28, 0x01	; 1
    39e0:	d1 f7       	brne	.-12     	; 0x39d6 <xTaskResumeAll+0xba>
    39e2:	10 92 8d 0d 	sts	0x0D8D, r1	; 0x800d8d <uxPendedTicks>
    39e6:	80 91 8c 0d 	lds	r24, 0x0D8C	; 0x800d8c <xYieldPending>
    39ea:	88 23       	and	r24, r24
    39ec:	29 f0       	breq	.+10     	; 0x39f8 <xTaskResumeAll+0xdc>
    39ee:	00 d9       	rcall	.-3584   	; 0x2bf0 <vPortYield>
    39f0:	81 e0       	ldi	r24, 0x01	; 1
    39f2:	03 c0       	rjmp	.+6      	; 0x39fa <xTaskResumeAll+0xde>
    39f4:	80 e0       	ldi	r24, 0x00	; 0
    39f6:	01 c0       	rjmp	.+2      	; 0x39fa <xTaskResumeAll+0xde>
    39f8:	80 e0       	ldi	r24, 0x00	; 0
    39fa:	0f 90       	pop	r0
    39fc:	0f be       	out	0x3f, r0	; 63
    39fe:	df 91       	pop	r29
    3a00:	cf 91       	pop	r28
    3a02:	1f 91       	pop	r17
    3a04:	0f 91       	pop	r16
    3a06:	ff 90       	pop	r15
    3a08:	ef 90       	pop	r14
    3a0a:	df 90       	pop	r13
    3a0c:	08 95       	ret

00003a0e <vTaskDelay>:
    3a0e:	cf 93       	push	r28
    3a10:	df 93       	push	r29
    3a12:	ec 01       	movw	r28, r24
    3a14:	89 2b       	or	r24, r25
    3a16:	39 f0       	breq	.+14     	; 0x3a26 <vTaskDelay+0x18>
    3a18:	ba de       	rcall	.-652    	; 0x378e <vTaskSuspendAll>
    3a1a:	60 e0       	ldi	r22, 0x00	; 0
    3a1c:	ce 01       	movw	r24, r28
    3a1e:	35 dd       	rcall	.-1430   	; 0x348a <prvAddCurrentTaskToDelayedList>
    3a20:	7d df       	rcall	.-262    	; 0x391c <xTaskResumeAll>
    3a22:	81 11       	cpse	r24, r1
    3a24:	01 c0       	rjmp	.+2      	; 0x3a28 <vTaskDelay+0x1a>
    3a26:	e4 d8       	rcall	.-3640   	; 0x2bf0 <vPortYield>
    3a28:	df 91       	pop	r29
    3a2a:	cf 91       	pop	r28
    3a2c:	08 95       	ret

00003a2e <vTaskSwitchContext>:
    3a2e:	80 91 87 0d 	lds	r24, 0x0D87	; 0x800d87 <uxSchedulerSuspended>
    3a32:	88 23       	and	r24, r24
    3a34:	21 f0       	breq	.+8      	; 0x3a3e <vTaskSwitchContext+0x10>
    3a36:	81 e0       	ldi	r24, 0x01	; 1
    3a38:	80 93 8c 0d 	sts	0x0D8C, r24	; 0x800d8c <xYieldPending>
    3a3c:	08 95       	ret
    3a3e:	10 92 8c 0d 	sts	0x0D8C, r1	; 0x800d8c <xYieldPending>
    3a42:	a0 91 ce 0d 	lds	r26, 0x0DCE	; 0x800dce <pxCurrentTCB>
    3a46:	b0 91 cf 0d 	lds	r27, 0x0DCF	; 0x800dcf <pxCurrentTCB+0x1>
    3a4a:	e0 91 ce 0d 	lds	r30, 0x0DCE	; 0x800dce <pxCurrentTCB>
    3a4e:	f0 91 cf 0d 	lds	r31, 0x0DCF	; 0x800dcf <pxCurrentTCB+0x1>
    3a52:	2d 91       	ld	r18, X+
    3a54:	3c 91       	ld	r19, X
    3a56:	87 89       	ldd	r24, Z+23	; 0x17
    3a58:	90 8d       	ldd	r25, Z+24	; 0x18
    3a5a:	82 17       	cp	r24, r18
    3a5c:	93 07       	cpc	r25, r19
    3a5e:	60 f0       	brcs	.+24     	; 0x3a78 <vTaskSwitchContext+0x4a>
    3a60:	60 91 ce 0d 	lds	r22, 0x0DCE	; 0x800dce <pxCurrentTCB>
    3a64:	70 91 cf 0d 	lds	r23, 0x0DCF	; 0x800dcf <pxCurrentTCB+0x1>
    3a68:	80 91 ce 0d 	lds	r24, 0x0DCE	; 0x800dce <pxCurrentTCB>
    3a6c:	90 91 cf 0d 	lds	r25, 0x0DCF	; 0x800dcf <pxCurrentTCB+0x1>
    3a70:	67 5e       	subi	r22, 0xE7	; 231
    3a72:	7f 4f       	sbci	r23, 0xFF	; 255
    3a74:	0e 94 92 14 	call	0x2924	; 0x2924 <vApplicationStackOverflowHook>
    3a78:	20 91 8f 0d 	lds	r18, 0x0D8F	; 0x800d8f <uxTopReadyPriority>
    3a7c:	82 2f       	mov	r24, r18
    3a7e:	90 e0       	ldi	r25, 0x00	; 0
    3a80:	fc 01       	movw	r30, r24
    3a82:	ee 0f       	add	r30, r30
    3a84:	ff 1f       	adc	r31, r31
    3a86:	ee 0f       	add	r30, r30
    3a88:	ff 1f       	adc	r31, r31
    3a8a:	ee 0f       	add	r30, r30
    3a8c:	ff 1f       	adc	r31, r31
    3a8e:	e8 0f       	add	r30, r24
    3a90:	f9 1f       	adc	r31, r25
    3a92:	e6 55       	subi	r30, 0x56	; 86
    3a94:	f2 4f       	sbci	r31, 0xF2	; 242
    3a96:	30 81       	ld	r19, Z
    3a98:	31 11       	cpse	r19, r1
    3a9a:	11 c0       	rjmp	.+34     	; 0x3abe <vTaskSwitchContext+0x90>
    3a9c:	21 50       	subi	r18, 0x01	; 1
    3a9e:	82 2f       	mov	r24, r18
    3aa0:	90 e0       	ldi	r25, 0x00	; 0
    3aa2:	fc 01       	movw	r30, r24
    3aa4:	ee 0f       	add	r30, r30
    3aa6:	ff 1f       	adc	r31, r31
    3aa8:	ee 0f       	add	r30, r30
    3aaa:	ff 1f       	adc	r31, r31
    3aac:	ee 0f       	add	r30, r30
    3aae:	ff 1f       	adc	r31, r31
    3ab0:	e8 0f       	add	r30, r24
    3ab2:	f9 1f       	adc	r31, r25
    3ab4:	e6 55       	subi	r30, 0x56	; 86
    3ab6:	f2 4f       	sbci	r31, 0xF2	; 242
    3ab8:	30 81       	ld	r19, Z
    3aba:	33 23       	and	r19, r19
    3abc:	79 f3       	breq	.-34     	; 0x3a9c <vTaskSwitchContext+0x6e>
    3abe:	ac 01       	movw	r20, r24
    3ac0:	44 0f       	add	r20, r20
    3ac2:	55 1f       	adc	r21, r21
    3ac4:	44 0f       	add	r20, r20
    3ac6:	55 1f       	adc	r21, r21
    3ac8:	44 0f       	add	r20, r20
    3aca:	55 1f       	adc	r21, r21
    3acc:	48 0f       	add	r20, r24
    3ace:	59 1f       	adc	r21, r25
    3ad0:	da 01       	movw	r26, r20
    3ad2:	a6 55       	subi	r26, 0x56	; 86
    3ad4:	b2 4f       	sbci	r27, 0xF2	; 242
    3ad6:	11 96       	adiw	r26, 0x01	; 1
    3ad8:	ed 91       	ld	r30, X+
    3ada:	fc 91       	ld	r31, X
    3adc:	12 97       	sbiw	r26, 0x02	; 2
    3ade:	02 80       	ldd	r0, Z+2	; 0x02
    3ae0:	f3 81       	ldd	r31, Z+3	; 0x03
    3ae2:	e0 2d       	mov	r30, r0
    3ae4:	12 96       	adiw	r26, 0x02	; 2
    3ae6:	fc 93       	st	X, r31
    3ae8:	ee 93       	st	-X, r30
    3aea:	11 97       	sbiw	r26, 0x01	; 1
    3aec:	43 55       	subi	r20, 0x53	; 83
    3aee:	52 4f       	sbci	r21, 0xF2	; 242
    3af0:	e4 17       	cp	r30, r20
    3af2:	f5 07       	cpc	r31, r21
    3af4:	29 f4       	brne	.+10     	; 0x3b00 <vTaskSwitchContext+0xd2>
    3af6:	42 81       	ldd	r20, Z+2	; 0x02
    3af8:	53 81       	ldd	r21, Z+3	; 0x03
    3afa:	fd 01       	movw	r30, r26
    3afc:	52 83       	std	Z+2, r21	; 0x02
    3afe:	41 83       	std	Z+1, r20	; 0x01
    3b00:	fc 01       	movw	r30, r24
    3b02:	ee 0f       	add	r30, r30
    3b04:	ff 1f       	adc	r31, r31
    3b06:	ee 0f       	add	r30, r30
    3b08:	ff 1f       	adc	r31, r31
    3b0a:	ee 0f       	add	r30, r30
    3b0c:	ff 1f       	adc	r31, r31
    3b0e:	8e 0f       	add	r24, r30
    3b10:	9f 1f       	adc	r25, r31
    3b12:	fc 01       	movw	r30, r24
    3b14:	e6 55       	subi	r30, 0x56	; 86
    3b16:	f2 4f       	sbci	r31, 0xF2	; 242
    3b18:	01 80       	ldd	r0, Z+1	; 0x01
    3b1a:	f2 81       	ldd	r31, Z+2	; 0x02
    3b1c:	e0 2d       	mov	r30, r0
    3b1e:	86 81       	ldd	r24, Z+6	; 0x06
    3b20:	97 81       	ldd	r25, Z+7	; 0x07
    3b22:	90 93 cf 0d 	sts	0x0DCF, r25	; 0x800dcf <pxCurrentTCB+0x1>
    3b26:	80 93 ce 0d 	sts	0x0DCE, r24	; 0x800dce <pxCurrentTCB>
    3b2a:	20 93 8f 0d 	sts	0x0D8F, r18	; 0x800d8f <uxTopReadyPriority>
    3b2e:	08 95       	ret

00003b30 <vTaskPlaceOnEventList>:
    3b30:	cf 93       	push	r28
    3b32:	df 93       	push	r29
    3b34:	eb 01       	movw	r28, r22
    3b36:	60 91 ce 0d 	lds	r22, 0x0DCE	; 0x800dce <pxCurrentTCB>
    3b3a:	70 91 cf 0d 	lds	r23, 0x0DCF	; 0x800dcf <pxCurrentTCB+0x1>
    3b3e:	64 5f       	subi	r22, 0xF4	; 244
    3b40:	7f 4f       	sbci	r23, 0xFF	; 255
    3b42:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <vListInsert>
    3b46:	61 e0       	ldi	r22, 0x01	; 1
    3b48:	ce 01       	movw	r24, r28
    3b4a:	9f dc       	rcall	.-1730   	; 0x348a <prvAddCurrentTaskToDelayedList>
    3b4c:	df 91       	pop	r29
    3b4e:	cf 91       	pop	r28
    3b50:	08 95       	ret

00003b52 <vTaskPlaceOnEventListRestricted>:
    3b52:	0f 93       	push	r16
    3b54:	1f 93       	push	r17
    3b56:	cf 93       	push	r28
    3b58:	8b 01       	movw	r16, r22
    3b5a:	c4 2f       	mov	r28, r20
    3b5c:	60 91 ce 0d 	lds	r22, 0x0DCE	; 0x800dce <pxCurrentTCB>
    3b60:	70 91 cf 0d 	lds	r23, 0x0DCF	; 0x800dcf <pxCurrentTCB+0x1>
    3b64:	64 5f       	subi	r22, 0xF4	; 244
    3b66:	7f 4f       	sbci	r23, 0xFF	; 255
    3b68:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <vListInsertEnd>
    3b6c:	cc 23       	and	r28, r28
    3b6e:	11 f0       	breq	.+4      	; 0x3b74 <vTaskPlaceOnEventListRestricted+0x22>
    3b70:	0f ef       	ldi	r16, 0xFF	; 255
    3b72:	1f ef       	ldi	r17, 0xFF	; 255
    3b74:	6c 2f       	mov	r22, r28
    3b76:	c8 01       	movw	r24, r16
    3b78:	88 dc       	rcall	.-1776   	; 0x348a <prvAddCurrentTaskToDelayedList>
    3b7a:	cf 91       	pop	r28
    3b7c:	1f 91       	pop	r17
    3b7e:	0f 91       	pop	r16
    3b80:	08 95       	ret

00003b82 <xTaskRemoveFromEventList>:
    3b82:	0f 93       	push	r16
    3b84:	1f 93       	push	r17
    3b86:	cf 93       	push	r28
    3b88:	df 93       	push	r29
    3b8a:	dc 01       	movw	r26, r24
    3b8c:	15 96       	adiw	r26, 0x05	; 5
    3b8e:	ed 91       	ld	r30, X+
    3b90:	fc 91       	ld	r31, X
    3b92:	16 97       	sbiw	r26, 0x06	; 6
    3b94:	c6 81       	ldd	r28, Z+6	; 0x06
    3b96:	d7 81       	ldd	r29, Z+7	; 0x07
    3b98:	8e 01       	movw	r16, r28
    3b9a:	04 5f       	subi	r16, 0xF4	; 244
    3b9c:	1f 4f       	sbci	r17, 0xFF	; 255
    3b9e:	c8 01       	movw	r24, r16
    3ba0:	0e 94 23 15 	call	0x2a46	; 0x2a46 <uxListRemove>
    3ba4:	80 91 87 0d 	lds	r24, 0x0D87	; 0x800d87 <uxSchedulerSuspended>
    3ba8:	81 11       	cpse	r24, r1
    3baa:	1c c0       	rjmp	.+56     	; 0x3be4 <xTaskRemoveFromEventList+0x62>
    3bac:	0a 50       	subi	r16, 0x0A	; 10
    3bae:	11 09       	sbc	r17, r1
    3bb0:	c8 01       	movw	r24, r16
    3bb2:	0e 94 23 15 	call	0x2a46	; 0x2a46 <uxListRemove>
    3bb6:	8e 89       	ldd	r24, Y+22	; 0x16
    3bb8:	90 91 8f 0d 	lds	r25, 0x0D8F	; 0x800d8f <uxTopReadyPriority>
    3bbc:	98 17       	cp	r25, r24
    3bbe:	10 f4       	brcc	.+4      	; 0x3bc4 <xTaskRemoveFromEventList+0x42>
    3bc0:	80 93 8f 0d 	sts	0x0D8F, r24	; 0x800d8f <uxTopReadyPriority>
    3bc4:	90 e0       	ldi	r25, 0x00	; 0
    3bc6:	9c 01       	movw	r18, r24
    3bc8:	22 0f       	add	r18, r18
    3bca:	33 1f       	adc	r19, r19
    3bcc:	22 0f       	add	r18, r18
    3bce:	33 1f       	adc	r19, r19
    3bd0:	22 0f       	add	r18, r18
    3bd2:	33 1f       	adc	r19, r19
    3bd4:	82 0f       	add	r24, r18
    3bd6:	93 1f       	adc	r25, r19
    3bd8:	b8 01       	movw	r22, r16
    3bda:	86 55       	subi	r24, 0x56	; 86
    3bdc:	92 4f       	sbci	r25, 0xF2	; 242
    3bde:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <vListInsertEnd>
    3be2:	05 c0       	rjmp	.+10     	; 0x3bee <xTaskRemoveFromEventList+0x6c>
    3be4:	b8 01       	movw	r22, r16
    3be6:	8d e9       	ldi	r24, 0x9D	; 157
    3be8:	9d e0       	ldi	r25, 0x0D	; 13
    3bea:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <vListInsertEnd>
    3bee:	e0 91 ce 0d 	lds	r30, 0x0DCE	; 0x800dce <pxCurrentTCB>
    3bf2:	f0 91 cf 0d 	lds	r31, 0x0DCF	; 0x800dcf <pxCurrentTCB+0x1>
    3bf6:	9e 89       	ldd	r25, Y+22	; 0x16
    3bf8:	86 89       	ldd	r24, Z+22	; 0x16
    3bfa:	89 17       	cp	r24, r25
    3bfc:	20 f4       	brcc	.+8      	; 0x3c06 <xTaskRemoveFromEventList+0x84>
    3bfe:	81 e0       	ldi	r24, 0x01	; 1
    3c00:	80 93 8c 0d 	sts	0x0D8C, r24	; 0x800d8c <xYieldPending>
    3c04:	01 c0       	rjmp	.+2      	; 0x3c08 <xTaskRemoveFromEventList+0x86>
    3c06:	80 e0       	ldi	r24, 0x00	; 0
    3c08:	df 91       	pop	r29
    3c0a:	cf 91       	pop	r28
    3c0c:	1f 91       	pop	r17
    3c0e:	0f 91       	pop	r16
    3c10:	08 95       	ret

00003c12 <vTaskInternalSetTimeOutState>:
    3c12:	20 91 8b 0d 	lds	r18, 0x0D8B	; 0x800d8b <xNumOfOverflows>
    3c16:	fc 01       	movw	r30, r24
    3c18:	20 83       	st	Z, r18
    3c1a:	20 91 90 0d 	lds	r18, 0x0D90	; 0x800d90 <xTickCount>
    3c1e:	30 91 91 0d 	lds	r19, 0x0D91	; 0x800d91 <xTickCount+0x1>
    3c22:	32 83       	std	Z+2, r19	; 0x02
    3c24:	21 83       	std	Z+1, r18	; 0x01
    3c26:	08 95       	ret

00003c28 <xTaskCheckForTimeOut>:
    3c28:	0f b6       	in	r0, 0x3f	; 63
    3c2a:	f8 94       	cli
    3c2c:	0f 92       	push	r0
    3c2e:	20 91 90 0d 	lds	r18, 0x0D90	; 0x800d90 <xTickCount>
    3c32:	30 91 91 0d 	lds	r19, 0x0D91	; 0x800d91 <xTickCount+0x1>
    3c36:	dc 01       	movw	r26, r24
    3c38:	11 96       	adiw	r26, 0x01	; 1
    3c3a:	4d 91       	ld	r20, X+
    3c3c:	5c 91       	ld	r21, X
    3c3e:	12 97       	sbiw	r26, 0x02	; 2
    3c40:	e0 91 8b 0d 	lds	r30, 0x0D8B	; 0x800d8b <xNumOfOverflows>
    3c44:	fc 91       	ld	r31, X
    3c46:	fe 17       	cp	r31, r30
    3c48:	19 f0       	breq	.+6      	; 0x3c50 <xTaskCheckForTimeOut+0x28>
    3c4a:	24 17       	cp	r18, r20
    3c4c:	35 07       	cpc	r19, r21
    3c4e:	98 f4       	brcc	.+38     	; 0x3c76 <xTaskCheckForTimeOut+0x4e>
    3c50:	24 1b       	sub	r18, r20
    3c52:	35 0b       	sbc	r19, r21
    3c54:	fb 01       	movw	r30, r22
    3c56:	40 81       	ld	r20, Z
    3c58:	51 81       	ldd	r21, Z+1	; 0x01
    3c5a:	24 17       	cp	r18, r20
    3c5c:	35 07       	cpc	r19, r21
    3c5e:	38 f4       	brcc	.+14     	; 0x3c6e <xTaskCheckForTimeOut+0x46>
    3c60:	42 1b       	sub	r20, r18
    3c62:	53 0b       	sbc	r21, r19
    3c64:	51 83       	std	Z+1, r21	; 0x01
    3c66:	40 83       	st	Z, r20
    3c68:	d4 df       	rcall	.-88     	; 0x3c12 <vTaskInternalSetTimeOutState>
    3c6a:	80 e0       	ldi	r24, 0x00	; 0
    3c6c:	05 c0       	rjmp	.+10     	; 0x3c78 <xTaskCheckForTimeOut+0x50>
    3c6e:	11 82       	std	Z+1, r1	; 0x01
    3c70:	10 82       	st	Z, r1
    3c72:	81 e0       	ldi	r24, 0x01	; 1
    3c74:	01 c0       	rjmp	.+2      	; 0x3c78 <xTaskCheckForTimeOut+0x50>
    3c76:	81 e0       	ldi	r24, 0x01	; 1
    3c78:	0f 90       	pop	r0
    3c7a:	0f be       	out	0x3f, r0	; 63
    3c7c:	08 95       	ret

00003c7e <vTaskMissedYield>:
    3c7e:	81 e0       	ldi	r24, 0x01	; 1
    3c80:	80 93 8c 0d 	sts	0x0D8C, r24	; 0x800d8c <xYieldPending>
    3c84:	08 95       	ret

00003c86 <xTaskGetSchedulerState>:
    3c86:	80 91 8e 0d 	lds	r24, 0x0D8E	; 0x800d8e <xSchedulerRunning>
    3c8a:	88 23       	and	r24, r24
    3c8c:	31 f0       	breq	.+12     	; 0x3c9a <xTaskGetSchedulerState+0x14>
    3c8e:	80 91 87 0d 	lds	r24, 0x0D87	; 0x800d87 <uxSchedulerSuspended>
    3c92:	88 23       	and	r24, r24
    3c94:	21 f0       	breq	.+8      	; 0x3c9e <xTaskGetSchedulerState+0x18>
    3c96:	80 e0       	ldi	r24, 0x00	; 0
    3c98:	08 95       	ret
    3c9a:	81 e0       	ldi	r24, 0x01	; 1
    3c9c:	08 95       	ret
    3c9e:	82 e0       	ldi	r24, 0x02	; 2
    3ca0:	08 95       	ret

00003ca2 <xTaskPriorityInherit>:
    3ca2:	0f 93       	push	r16
    3ca4:	1f 93       	push	r17
    3ca6:	cf 93       	push	r28
    3ca8:	df 93       	push	r29
    3caa:	fc 01       	movw	r30, r24
    3cac:	89 2b       	or	r24, r25
    3cae:	09 f4       	brne	.+2      	; 0x3cb2 <xTaskPriorityInherit+0x10>
    3cb0:	64 c0       	rjmp	.+200    	; 0x3d7a <xTaskPriorityInherit+0xd8>
    3cb2:	26 89       	ldd	r18, Z+22	; 0x16
    3cb4:	a0 91 ce 0d 	lds	r26, 0x0DCE	; 0x800dce <pxCurrentTCB>
    3cb8:	b0 91 cf 0d 	lds	r27, 0x0DCF	; 0x800dcf <pxCurrentTCB+0x1>
    3cbc:	56 96       	adiw	r26, 0x16	; 22
    3cbe:	8c 91       	ld	r24, X
    3cc0:	28 17       	cp	r18, r24
    3cc2:	08 f0       	brcs	.+2      	; 0x3cc6 <xTaskPriorityInherit+0x24>
    3cc4:	4e c0       	rjmp	.+156    	; 0x3d62 <xTaskPriorityInherit+0xc0>
    3cc6:	84 85       	ldd	r24, Z+12	; 0x0c
    3cc8:	95 85       	ldd	r25, Z+13	; 0x0d
    3cca:	99 23       	and	r25, r25
    3ccc:	64 f0       	brlt	.+24     	; 0x3ce6 <xTaskPriorityInherit+0x44>
    3cce:	a0 91 ce 0d 	lds	r26, 0x0DCE	; 0x800dce <pxCurrentTCB>
    3cd2:	b0 91 cf 0d 	lds	r27, 0x0DCF	; 0x800dcf <pxCurrentTCB+0x1>
    3cd6:	56 96       	adiw	r26, 0x16	; 22
    3cd8:	3c 91       	ld	r19, X
    3cda:	84 e0       	ldi	r24, 0x04	; 4
    3cdc:	90 e0       	ldi	r25, 0x00	; 0
    3cde:	83 1b       	sub	r24, r19
    3ce0:	91 09       	sbc	r25, r1
    3ce2:	95 87       	std	Z+13, r25	; 0x0d
    3ce4:	84 87       	std	Z+12, r24	; 0x0c
    3ce6:	30 e0       	ldi	r19, 0x00	; 0
    3ce8:	c9 01       	movw	r24, r18
    3cea:	88 0f       	add	r24, r24
    3cec:	99 1f       	adc	r25, r25
    3cee:	88 0f       	add	r24, r24
    3cf0:	99 1f       	adc	r25, r25
    3cf2:	88 0f       	add	r24, r24
    3cf4:	99 1f       	adc	r25, r25
    3cf6:	28 0f       	add	r18, r24
    3cf8:	39 1f       	adc	r19, r25
    3cfa:	26 55       	subi	r18, 0x56	; 86
    3cfc:	32 4f       	sbci	r19, 0xF2	; 242
    3cfe:	82 85       	ldd	r24, Z+10	; 0x0a
    3d00:	93 85       	ldd	r25, Z+11	; 0x0b
    3d02:	82 17       	cp	r24, r18
    3d04:	93 07       	cpc	r25, r19
    3d06:	21 f5       	brne	.+72     	; 0x3d50 <xTaskPriorityInherit+0xae>
    3d08:	8f 01       	movw	r16, r30
    3d0a:	ef 01       	movw	r28, r30
    3d0c:	22 96       	adiw	r28, 0x02	; 2
    3d0e:	ce 01       	movw	r24, r28
    3d10:	0e 94 23 15 	call	0x2a46	; 0x2a46 <uxListRemove>
    3d14:	e0 91 ce 0d 	lds	r30, 0x0DCE	; 0x800dce <pxCurrentTCB>
    3d18:	f0 91 cf 0d 	lds	r31, 0x0DCF	; 0x800dcf <pxCurrentTCB+0x1>
    3d1c:	86 89       	ldd	r24, Z+22	; 0x16
    3d1e:	f8 01       	movw	r30, r16
    3d20:	86 8b       	std	Z+22, r24	; 0x16
    3d22:	90 91 8f 0d 	lds	r25, 0x0D8F	; 0x800d8f <uxTopReadyPriority>
    3d26:	98 17       	cp	r25, r24
    3d28:	10 f4       	brcc	.+4      	; 0x3d2e <xTaskPriorityInherit+0x8c>
    3d2a:	80 93 8f 0d 	sts	0x0D8F, r24	; 0x800d8f <uxTopReadyPriority>
    3d2e:	90 e0       	ldi	r25, 0x00	; 0
    3d30:	9c 01       	movw	r18, r24
    3d32:	22 0f       	add	r18, r18
    3d34:	33 1f       	adc	r19, r19
    3d36:	22 0f       	add	r18, r18
    3d38:	33 1f       	adc	r19, r19
    3d3a:	22 0f       	add	r18, r18
    3d3c:	33 1f       	adc	r19, r19
    3d3e:	82 0f       	add	r24, r18
    3d40:	93 1f       	adc	r25, r19
    3d42:	be 01       	movw	r22, r28
    3d44:	86 55       	subi	r24, 0x56	; 86
    3d46:	92 4f       	sbci	r25, 0xF2	; 242
    3d48:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <vListInsertEnd>
    3d4c:	81 e0       	ldi	r24, 0x01	; 1
    3d4e:	16 c0       	rjmp	.+44     	; 0x3d7c <xTaskPriorityInherit+0xda>
    3d50:	a0 91 ce 0d 	lds	r26, 0x0DCE	; 0x800dce <pxCurrentTCB>
    3d54:	b0 91 cf 0d 	lds	r27, 0x0DCF	; 0x800dcf <pxCurrentTCB+0x1>
    3d58:	56 96       	adiw	r26, 0x16	; 22
    3d5a:	8c 91       	ld	r24, X
    3d5c:	86 8b       	std	Z+22, r24	; 0x16
    3d5e:	81 e0       	ldi	r24, 0x01	; 1
    3d60:	0d c0       	rjmp	.+26     	; 0x3d7c <xTaskPriorityInherit+0xda>
    3d62:	a0 91 ce 0d 	lds	r26, 0x0DCE	; 0x800dce <pxCurrentTCB>
    3d66:	b0 91 cf 0d 	lds	r27, 0x0DCF	; 0x800dcf <pxCurrentTCB+0x1>
    3d6a:	81 e0       	ldi	r24, 0x01	; 1
    3d6c:	21 a1       	ldd	r18, Z+33	; 0x21
    3d6e:	56 96       	adiw	r26, 0x16	; 22
    3d70:	9c 91       	ld	r25, X
    3d72:	29 17       	cp	r18, r25
    3d74:	18 f0       	brcs	.+6      	; 0x3d7c <xTaskPriorityInherit+0xda>
    3d76:	80 e0       	ldi	r24, 0x00	; 0
    3d78:	01 c0       	rjmp	.+2      	; 0x3d7c <xTaskPriorityInherit+0xda>
    3d7a:	80 e0       	ldi	r24, 0x00	; 0
    3d7c:	df 91       	pop	r29
    3d7e:	cf 91       	pop	r28
    3d80:	1f 91       	pop	r17
    3d82:	0f 91       	pop	r16
    3d84:	08 95       	ret

00003d86 <xTaskPriorityDisinherit>:
    3d86:	0f 93       	push	r16
    3d88:	1f 93       	push	r17
    3d8a:	cf 93       	push	r28
    3d8c:	df 93       	push	r29
    3d8e:	fc 01       	movw	r30, r24
    3d90:	89 2b       	or	r24, r25
    3d92:	79 f1       	breq	.+94     	; 0x3df2 <xTaskPriorityDisinherit+0x6c>
    3d94:	82 a1       	ldd	r24, Z+34	; 0x22
    3d96:	81 50       	subi	r24, 0x01	; 1
    3d98:	82 a3       	std	Z+34, r24	; 0x22
    3d9a:	26 89       	ldd	r18, Z+22	; 0x16
    3d9c:	91 a1       	ldd	r25, Z+33	; 0x21
    3d9e:	29 17       	cp	r18, r25
    3da0:	51 f1       	breq	.+84     	; 0x3df6 <xTaskPriorityDisinherit+0x70>
    3da2:	81 11       	cpse	r24, r1
    3da4:	2a c0       	rjmp	.+84     	; 0x3dfa <xTaskPriorityDisinherit+0x74>
    3da6:	ef 01       	movw	r28, r30
    3da8:	8f 01       	movw	r16, r30
    3daa:	0e 5f       	subi	r16, 0xFE	; 254
    3dac:	1f 4f       	sbci	r17, 0xFF	; 255
    3dae:	c8 01       	movw	r24, r16
    3db0:	0e 94 23 15 	call	0x2a46	; 0x2a46 <uxListRemove>
    3db4:	89 a1       	ldd	r24, Y+33	; 0x21
    3db6:	8e 8b       	std	Y+22, r24	; 0x16
    3db8:	24 e0       	ldi	r18, 0x04	; 4
    3dba:	30 e0       	ldi	r19, 0x00	; 0
    3dbc:	28 1b       	sub	r18, r24
    3dbe:	31 09       	sbc	r19, r1
    3dc0:	3d 87       	std	Y+13, r19	; 0x0d
    3dc2:	2c 87       	std	Y+12, r18	; 0x0c
    3dc4:	90 91 8f 0d 	lds	r25, 0x0D8F	; 0x800d8f <uxTopReadyPriority>
    3dc8:	98 17       	cp	r25, r24
    3dca:	10 f4       	brcc	.+4      	; 0x3dd0 <xTaskPriorityDisinherit+0x4a>
    3dcc:	80 93 8f 0d 	sts	0x0D8F, r24	; 0x800d8f <uxTopReadyPriority>
    3dd0:	90 e0       	ldi	r25, 0x00	; 0
    3dd2:	9c 01       	movw	r18, r24
    3dd4:	22 0f       	add	r18, r18
    3dd6:	33 1f       	adc	r19, r19
    3dd8:	22 0f       	add	r18, r18
    3dda:	33 1f       	adc	r19, r19
    3ddc:	22 0f       	add	r18, r18
    3dde:	33 1f       	adc	r19, r19
    3de0:	82 0f       	add	r24, r18
    3de2:	93 1f       	adc	r25, r19
    3de4:	b8 01       	movw	r22, r16
    3de6:	86 55       	subi	r24, 0x56	; 86
    3de8:	92 4f       	sbci	r25, 0xF2	; 242
    3dea:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <vListInsertEnd>
    3dee:	81 e0       	ldi	r24, 0x01	; 1
    3df0:	05 c0       	rjmp	.+10     	; 0x3dfc <xTaskPriorityDisinherit+0x76>
    3df2:	80 e0       	ldi	r24, 0x00	; 0
    3df4:	03 c0       	rjmp	.+6      	; 0x3dfc <xTaskPriorityDisinherit+0x76>
    3df6:	80 e0       	ldi	r24, 0x00	; 0
    3df8:	01 c0       	rjmp	.+2      	; 0x3dfc <xTaskPriorityDisinherit+0x76>
    3dfa:	80 e0       	ldi	r24, 0x00	; 0
    3dfc:	df 91       	pop	r29
    3dfe:	cf 91       	pop	r28
    3e00:	1f 91       	pop	r17
    3e02:	0f 91       	pop	r16
    3e04:	08 95       	ret

00003e06 <vTaskPriorityDisinheritAfterTimeout>:
    3e06:	0f 93       	push	r16
    3e08:	1f 93       	push	r17
    3e0a:	cf 93       	push	r28
    3e0c:	df 93       	push	r29
    3e0e:	fc 01       	movw	r30, r24
    3e10:	89 2b       	or	r24, r25
    3e12:	09 f4       	brne	.+2      	; 0x3e16 <vTaskPriorityDisinheritAfterTimeout+0x10>
    3e14:	43 c0       	rjmp	.+134    	; 0x3e9c <vTaskPriorityDisinheritAfterTimeout+0x96>
    3e16:	91 a1       	ldd	r25, Z+33	; 0x21
    3e18:	96 17       	cp	r25, r22
    3e1a:	08 f4       	brcc	.+2      	; 0x3e1e <vTaskPriorityDisinheritAfterTimeout+0x18>
    3e1c:	96 2f       	mov	r25, r22
    3e1e:	86 89       	ldd	r24, Z+22	; 0x16
    3e20:	89 17       	cp	r24, r25
    3e22:	e1 f1       	breq	.+120    	; 0x3e9c <vTaskPriorityDisinheritAfterTimeout+0x96>
    3e24:	22 a1       	ldd	r18, Z+34	; 0x22
    3e26:	21 30       	cpi	r18, 0x01	; 1
    3e28:	c9 f5       	brne	.+114    	; 0x3e9c <vTaskPriorityDisinheritAfterTimeout+0x96>
    3e2a:	96 8b       	std	Z+22, r25	; 0x16
    3e2c:	24 85       	ldd	r18, Z+12	; 0x0c
    3e2e:	35 85       	ldd	r19, Z+13	; 0x0d
    3e30:	33 23       	and	r19, r19
    3e32:	34 f0       	brlt	.+12     	; 0x3e40 <vTaskPriorityDisinheritAfterTimeout+0x3a>
    3e34:	24 e0       	ldi	r18, 0x04	; 4
    3e36:	30 e0       	ldi	r19, 0x00	; 0
    3e38:	29 1b       	sub	r18, r25
    3e3a:	31 09       	sbc	r19, r1
    3e3c:	35 87       	std	Z+13, r19	; 0x0d
    3e3e:	24 87       	std	Z+12, r18	; 0x0c
    3e40:	90 e0       	ldi	r25, 0x00	; 0
    3e42:	9c 01       	movw	r18, r24
    3e44:	22 0f       	add	r18, r18
    3e46:	33 1f       	adc	r19, r19
    3e48:	22 0f       	add	r18, r18
    3e4a:	33 1f       	adc	r19, r19
    3e4c:	22 0f       	add	r18, r18
    3e4e:	33 1f       	adc	r19, r19
    3e50:	82 0f       	add	r24, r18
    3e52:	93 1f       	adc	r25, r19
    3e54:	86 55       	subi	r24, 0x56	; 86
    3e56:	92 4f       	sbci	r25, 0xF2	; 242
    3e58:	22 85       	ldd	r18, Z+10	; 0x0a
    3e5a:	33 85       	ldd	r19, Z+11	; 0x0b
    3e5c:	28 17       	cp	r18, r24
    3e5e:	39 07       	cpc	r19, r25
    3e60:	e9 f4       	brne	.+58     	; 0x3e9c <vTaskPriorityDisinheritAfterTimeout+0x96>
    3e62:	ef 01       	movw	r28, r30
    3e64:	8f 01       	movw	r16, r30
    3e66:	0e 5f       	subi	r16, 0xFE	; 254
    3e68:	1f 4f       	sbci	r17, 0xFF	; 255
    3e6a:	c8 01       	movw	r24, r16
    3e6c:	0e 94 23 15 	call	0x2a46	; 0x2a46 <uxListRemove>
    3e70:	8e 89       	ldd	r24, Y+22	; 0x16
    3e72:	90 91 8f 0d 	lds	r25, 0x0D8F	; 0x800d8f <uxTopReadyPriority>
    3e76:	98 17       	cp	r25, r24
    3e78:	10 f4       	brcc	.+4      	; 0x3e7e <vTaskPriorityDisinheritAfterTimeout+0x78>
    3e7a:	80 93 8f 0d 	sts	0x0D8F, r24	; 0x800d8f <uxTopReadyPriority>
    3e7e:	90 e0       	ldi	r25, 0x00	; 0
    3e80:	9c 01       	movw	r18, r24
    3e82:	22 0f       	add	r18, r18
    3e84:	33 1f       	adc	r19, r19
    3e86:	22 0f       	add	r18, r18
    3e88:	33 1f       	adc	r19, r19
    3e8a:	22 0f       	add	r18, r18
    3e8c:	33 1f       	adc	r19, r19
    3e8e:	82 0f       	add	r24, r18
    3e90:	93 1f       	adc	r25, r19
    3e92:	b8 01       	movw	r22, r16
    3e94:	86 55       	subi	r24, 0x56	; 86
    3e96:	92 4f       	sbci	r25, 0xF2	; 242
    3e98:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <vListInsertEnd>
    3e9c:	df 91       	pop	r29
    3e9e:	cf 91       	pop	r28
    3ea0:	1f 91       	pop	r17
    3ea2:	0f 91       	pop	r16
    3ea4:	08 95       	ret

00003ea6 <pvTaskIncrementMutexHeldCount>:

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
        then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
    3ea6:	80 91 ce 0d 	lds	r24, 0x0DCE	; 0x800dce <pxCurrentTCB>
    3eaa:	90 91 cf 0d 	lds	r25, 0x0DCF	; 0x800dcf <pxCurrentTCB+0x1>
    3eae:	89 2b       	or	r24, r25
    3eb0:	39 f0       	breq	.+14     	; 0x3ec0 <pvTaskIncrementMutexHeldCount+0x1a>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
    3eb2:	e0 91 ce 0d 	lds	r30, 0x0DCE	; 0x800dce <pxCurrentTCB>
    3eb6:	f0 91 cf 0d 	lds	r31, 0x0DCF	; 0x800dcf <pxCurrentTCB+0x1>
    3eba:	82 a1       	ldd	r24, Z+34	; 0x22
    3ebc:	8f 5f       	subi	r24, 0xFF	; 255
    3ebe:	82 a3       	std	Z+34, r24	; 0x22
        }

        return pxCurrentTCB;
    3ec0:	80 91 ce 0d 	lds	r24, 0x0DCE	; 0x800dce <pxCurrentTCB>
    3ec4:	90 91 cf 0d 	lds	r25, 0x0DCF	; 0x800dcf <pxCurrentTCB+0x1>
    }
    3ec8:	08 95       	ret

00003eca <prvInsertTimerInActiveList>:
            }
            #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
        }

        return pxNewTimer;
    }
    3eca:	fc 01       	movw	r30, r24
    3ecc:	73 83       	std	Z+3, r23	; 0x03
    3ece:	62 83       	std	Z+2, r22	; 0x02
    3ed0:	91 87       	std	Z+9, r25	; 0x09
    3ed2:	80 87       	std	Z+8, r24	; 0x08
    3ed4:	46 17       	cp	r20, r22
    3ed6:	57 07       	cpc	r21, r23
    3ed8:	90 f0       	brcs	.+36     	; 0x3efe <prvInsertTimerInActiveList+0x34>
    3eda:	42 1b       	sub	r20, r18
    3edc:	53 0b       	sbc	r21, r19
    3ede:	84 85       	ldd	r24, Z+12	; 0x0c
    3ee0:	95 85       	ldd	r25, Z+13	; 0x0d
    3ee2:	48 17       	cp	r20, r24
    3ee4:	59 07       	cpc	r21, r25
    3ee6:	e0 f4       	brcc	.+56     	; 0x3f20 <prvInsertTimerInActiveList+0x56>
    3ee8:	bf 01       	movw	r22, r30
    3eea:	6e 5f       	subi	r22, 0xFE	; 254
    3eec:	7f 4f       	sbci	r23, 0xFF	; 255
    3eee:	80 91 39 0e 	lds	r24, 0x0E39	; 0x800e39 <pxOverflowTimerList>
    3ef2:	90 91 3a 0e 	lds	r25, 0x0E3A	; 0x800e3a <pxOverflowTimerList+0x1>
    3ef6:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <vListInsert>
    3efa:	80 e0       	ldi	r24, 0x00	; 0
    3efc:	08 95       	ret
    3efe:	42 17       	cp	r20, r18
    3f00:	53 07       	cpc	r21, r19
    3f02:	18 f4       	brcc	.+6      	; 0x3f0a <prvInsertTimerInActiveList+0x40>
    3f04:	62 17       	cp	r22, r18
    3f06:	73 07       	cpc	r23, r19
    3f08:	68 f4       	brcc	.+26     	; 0x3f24 <prvInsertTimerInActiveList+0x5a>
    3f0a:	bf 01       	movw	r22, r30
    3f0c:	6e 5f       	subi	r22, 0xFE	; 254
    3f0e:	7f 4f       	sbci	r23, 0xFF	; 255
    3f10:	80 91 3b 0e 	lds	r24, 0x0E3B	; 0x800e3b <pxCurrentTimerList>
    3f14:	90 91 3c 0e 	lds	r25, 0x0E3C	; 0x800e3c <pxCurrentTimerList+0x1>
    3f18:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <vListInsert>
    3f1c:	80 e0       	ldi	r24, 0x00	; 0
    3f1e:	08 95       	ret
    3f20:	81 e0       	ldi	r24, 0x01	; 1
    3f22:	08 95       	ret
    3f24:	81 e0       	ldi	r24, 0x01	; 1
    3f26:	08 95       	ret

00003f28 <prvCheckForValidListAndQueue>:
    3f28:	0f 93       	push	r16
    3f2a:	0f b6       	in	r0, 0x3f	; 63
    3f2c:	f8 94       	cli
    3f2e:	0f 92       	push	r0
    3f30:	80 91 37 0e 	lds	r24, 0x0E37	; 0x800e37 <xTimerQueue>
    3f34:	90 91 38 0e 	lds	r25, 0x0E38	; 0x800e38 <xTimerQueue+0x1>
    3f38:	89 2b       	or	r24, r25
    3f3a:	01 f5       	brne	.+64     	; 0x3f7c <prvCheckForValidListAndQueue+0x54>
    3f3c:	8a e2       	ldi	r24, 0x2A	; 42
    3f3e:	9e e0       	ldi	r25, 0x0E	; 14
    3f40:	0e 94 bf 14 	call	0x297e	; 0x297e <vListInitialise>
    3f44:	81 e2       	ldi	r24, 0x21	; 33
    3f46:	9e e0       	ldi	r25, 0x0E	; 14
    3f48:	0e 94 bf 14 	call	0x297e	; 0x297e <vListInitialise>
    3f4c:	8a e2       	ldi	r24, 0x2A	; 42
    3f4e:	9e e0       	ldi	r25, 0x0E	; 14
    3f50:	90 93 3c 0e 	sts	0x0E3C, r25	; 0x800e3c <pxCurrentTimerList+0x1>
    3f54:	80 93 3b 0e 	sts	0x0E3B, r24	; 0x800e3b <pxCurrentTimerList>
    3f58:	81 e2       	ldi	r24, 0x21	; 33
    3f5a:	9e e0       	ldi	r25, 0x0E	; 14
    3f5c:	90 93 3a 0e 	sts	0x0E3A, r25	; 0x800e3a <pxOverflowTimerList+0x1>
    3f60:	80 93 39 0e 	sts	0x0E39, r24	; 0x800e39 <pxOverflowTimerList>
    3f64:	00 e0       	ldi	r16, 0x00	; 0
    3f66:	20 ed       	ldi	r18, 0xD0	; 208
    3f68:	3d e0       	ldi	r19, 0x0D	; 13
    3f6a:	4f ee       	ldi	r20, 0xEF	; 239
    3f6c:	5d e0       	ldi	r21, 0x0D	; 13
    3f6e:	65 e0       	ldi	r22, 0x05	; 5
    3f70:	8a e0       	ldi	r24, 0x0A	; 10
    3f72:	11 d8       	rcall	.-4062   	; 0x2f96 <xQueueGenericCreateStatic>
    3f74:	90 93 38 0e 	sts	0x0E38, r25	; 0x800e38 <xTimerQueue+0x1>
    3f78:	80 93 37 0e 	sts	0x0E37, r24	; 0x800e37 <xTimerQueue>
    3f7c:	0f 90       	pop	r0
    3f7e:	0f be       	out	0x3f, r0	; 63
    3f80:	0f 91       	pop	r16
    3f82:	08 95       	ret

00003f84 <xTimerCreateTimerTask>:
    3f84:	cf 92       	push	r12
    3f86:	df 92       	push	r13
    3f88:	ef 92       	push	r14
    3f8a:	ff 92       	push	r15
    3f8c:	0f 93       	push	r16
    3f8e:	cf 93       	push	r28
    3f90:	df 93       	push	r29
    3f92:	00 d0       	rcall	.+0      	; 0x3f94 <xTimerCreateTimerTask+0x10>
    3f94:	00 d0       	rcall	.+0      	; 0x3f96 <xTimerCreateTimerTask+0x12>
    3f96:	cd b7       	in	r28, 0x3d	; 61
    3f98:	de b7       	in	r29, 0x3e	; 62
    3f9a:	c6 df       	rcall	.-116    	; 0x3f28 <prvCheckForValidListAndQueue>
    3f9c:	80 91 37 0e 	lds	r24, 0x0E37	; 0x800e37 <xTimerQueue>
    3fa0:	90 91 38 0e 	lds	r25, 0x0E38	; 0x800e38 <xTimerQueue+0x1>
    3fa4:	89 2b       	or	r24, r25
    3fa6:	31 f1       	breq	.+76     	; 0x3ff4 <xTimerCreateTimerTask+0x70>
    3fa8:	1e 82       	std	Y+6, r1	; 0x06
    3faa:	1d 82       	std	Y+5, r1	; 0x05
    3fac:	1c 82       	std	Y+4, r1	; 0x04
    3fae:	1b 82       	std	Y+3, r1	; 0x03
    3fb0:	ae 01       	movw	r20, r28
    3fb2:	4f 5f       	subi	r20, 0xFF	; 255
    3fb4:	5f 4f       	sbci	r21, 0xFF	; 255
    3fb6:	be 01       	movw	r22, r28
    3fb8:	6d 5f       	subi	r22, 0xFD	; 253
    3fba:	7f 4f       	sbci	r23, 0xFF	; 255
    3fbc:	ce 01       	movw	r24, r28
    3fbe:	05 96       	adiw	r24, 0x05	; 5
    3fc0:	0e 94 af 14 	call	0x295e	; 0x295e <vApplicationGetTimerTaskMemory>
    3fc4:	cd 80       	ldd	r12, Y+5	; 0x05
    3fc6:	de 80       	ldd	r13, Y+6	; 0x06
    3fc8:	eb 80       	ldd	r14, Y+3	; 0x03
    3fca:	fc 80       	ldd	r15, Y+4	; 0x04
    3fcc:	49 81       	ldd	r20, Y+1	; 0x01
    3fce:	5a 81       	ldd	r21, Y+2	; 0x02
    3fd0:	03 e0       	ldi	r16, 0x03	; 3
    3fd2:	20 e0       	ldi	r18, 0x00	; 0
    3fd4:	30 e0       	ldi	r19, 0x00	; 0
    3fd6:	67 e0       	ldi	r22, 0x07	; 7
    3fd8:	73 e0       	ldi	r23, 0x03	; 3
    3fda:	8d eb       	ldi	r24, 0xBD	; 189
    3fdc:	90 e2       	ldi	r25, 0x20	; 32
    3fde:	96 da       	rcall	.-2772   	; 0x350c <xTaskCreateStatic>
    3fe0:	9c 01       	movw	r18, r24
    3fe2:	90 93 36 0e 	sts	0x0E36, r25	; 0x800e36 <xTimerTaskHandle+0x1>
    3fe6:	80 93 35 0e 	sts	0x0E35, r24	; 0x800e35 <xTimerTaskHandle>
    3fea:	81 e0       	ldi	r24, 0x01	; 1
    3fec:	23 2b       	or	r18, r19
    3fee:	19 f4       	brne	.+6      	; 0x3ff6 <xTimerCreateTimerTask+0x72>
    3ff0:	80 e0       	ldi	r24, 0x00	; 0
    3ff2:	01 c0       	rjmp	.+2      	; 0x3ff6 <xTimerCreateTimerTask+0x72>
    3ff4:	80 e0       	ldi	r24, 0x00	; 0
    3ff6:	26 96       	adiw	r28, 0x06	; 6
    3ff8:	0f b6       	in	r0, 0x3f	; 63
    3ffa:	f8 94       	cli
    3ffc:	de bf       	out	0x3e, r29	; 62
    3ffe:	0f be       	out	0x3f, r0	; 63
    4000:	cd bf       	out	0x3d, r28	; 61
    4002:	df 91       	pop	r29
    4004:	cf 91       	pop	r28
    4006:	0f 91       	pop	r16
    4008:	ff 90       	pop	r15
    400a:	ef 90       	pop	r14
    400c:	df 90       	pop	r13
    400e:	cf 90       	pop	r12
    4010:	08 95       	ret

00004012 <xTimerGenericCommand>:
    }
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
    4012:	0f 93       	push	r16
    4014:	1f 93       	push	r17
    4016:	cf 93       	push	r28
    4018:	df 93       	push	r29
    401a:	00 d0       	rcall	.+0      	; 0x401c <xTimerGenericCommand+0xa>
    401c:	1f 92       	push	r1
    401e:	1f 92       	push	r1
    4020:	cd b7       	in	r28, 0x3d	; 61
    4022:	de b7       	in	r29, 0x3e	; 62

    configASSERT( xTimer );

    /* Send a message to the timer service task to perform a particular action
    on a particular timer definition. */
    if( xTimerQueue != NULL )
    4024:	e0 91 37 0e 	lds	r30, 0x0E37	; 0x800e37 <xTimerQueue>
    4028:	f0 91 38 0e 	lds	r31, 0x0E38	; 0x800e38 <xTimerQueue+0x1>
    402c:	30 97       	sbiw	r30, 0x00	; 0
    402e:	61 f1       	breq	.+88     	; 0x4088 <xTimerGenericCommand+0x76>
    4030:	d9 01       	movw	r26, r18
    {
        /* Send a command to the timer service task to start the xTimer timer. */
        xMessage.xMessageID = xCommandID;
    4032:	69 83       	std	Y+1, r22	; 0x01
        xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    4034:	5b 83       	std	Y+3, r21	; 0x03
    4036:	4a 83       	std	Y+2, r20	; 0x02
        xMessage.u.xTimerParameters.pxTimer = xTimer;
    4038:	9d 83       	std	Y+5, r25	; 0x05
    403a:	8c 83       	std	Y+4, r24	; 0x04

        if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    403c:	66 30       	cpi	r22, 0x06	; 6
    403e:	e4 f4       	brge	.+56     	; 0x4078 <xTimerGenericCommand+0x66>
        {
            if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    4040:	22 de       	rcall	.-956    	; 0x3c86 <xTaskGetSchedulerState>
    4042:	82 30       	cpi	r24, 0x02	; 2
    4044:	61 f4       	brne	.+24     	; 0x405e <xTimerGenericCommand+0x4c>
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    4046:	20 e0       	ldi	r18, 0x00	; 0
    4048:	a8 01       	movw	r20, r16
    404a:	be 01       	movw	r22, r28
    404c:	6f 5f       	subi	r22, 0xFF	; 255
    404e:	7f 4f       	sbci	r23, 0xFF	; 255
    4050:	80 91 37 0e 	lds	r24, 0x0E37	; 0x800e37 <xTimerQueue>
    4054:	90 91 38 0e 	lds	r25, 0x0E38	; 0x800e38 <xTimerQueue+0x1>
    4058:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <xQueueGenericSend>
    405c:	16 c0       	rjmp	.+44     	; 0x408a <xTimerGenericCommand+0x78>
            }
            else
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    405e:	20 e0       	ldi	r18, 0x00	; 0
    4060:	40 e0       	ldi	r20, 0x00	; 0
    4062:	50 e0       	ldi	r21, 0x00	; 0
    4064:	be 01       	movw	r22, r28
    4066:	6f 5f       	subi	r22, 0xFF	; 255
    4068:	7f 4f       	sbci	r23, 0xFF	; 255
    406a:	80 91 37 0e 	lds	r24, 0x0E37	; 0x800e37 <xTimerQueue>
    406e:	90 91 38 0e 	lds	r25, 0x0E38	; 0x800e38 <xTimerQueue+0x1>
    4072:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <xQueueGenericSend>
    4076:	09 c0       	rjmp	.+18     	; 0x408a <xTimerGenericCommand+0x78>
            }
        }
        else
        {
            xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    4078:	20 e0       	ldi	r18, 0x00	; 0
    407a:	ad 01       	movw	r20, r26
    407c:	be 01       	movw	r22, r28
    407e:	6f 5f       	subi	r22, 0xFF	; 255
    4080:	7f 4f       	sbci	r23, 0xFF	; 255
    4082:	cf 01       	movw	r24, r30
    4084:	4c d8       	rcall	.-3944   	; 0x311e <xQueueGenericSendFromISR>
    4086:	01 c0       	rjmp	.+2      	; 0x408a <xTimerGenericCommand+0x78>
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
    4088:	80 e0       	ldi	r24, 0x00	; 0
    {
        mtCOVERAGE_TEST_MARKER();
    }

    return xReturn;
}
    408a:	0f 90       	pop	r0
    408c:	0f 90       	pop	r0
    408e:	0f 90       	pop	r0
    4090:	0f 90       	pop	r0
    4092:	0f 90       	pop	r0
    4094:	df 91       	pop	r29
    4096:	cf 91       	pop	r28
    4098:	1f 91       	pop	r17
    409a:	0f 91       	pop	r16
    409c:	08 95       	ret

0000409e <prvSampleTimeNow>:
    return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
    409e:	af 92       	push	r10
    40a0:	bf 92       	push	r11
    40a2:	cf 92       	push	r12
    40a4:	df 92       	push	r13
    40a6:	ef 92       	push	r14
    40a8:	ff 92       	push	r15
    40aa:	0f 93       	push	r16
    40ac:	1f 93       	push	r17
    40ae:	cf 93       	push	r28
    40b0:	df 93       	push	r29
    40b2:	6c 01       	movw	r12, r24
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

    xTimeNow = xTaskGetTickCount();
    40b4:	72 db       	rcall	.-2332   	; 0x379a <xTaskGetTickCount>
    40b6:	7c 01       	movw	r14, r24

    if( xTimeNow < xLastTime )
    40b8:	80 91 33 0e 	lds	r24, 0x0E33	; 0x800e33 <xLastTime.2397>
    40bc:	90 91 34 0e 	lds	r25, 0x0E34	; 0x800e34 <xLastTime.2397+0x1>
    40c0:	e8 16       	cp	r14, r24
    40c2:	f9 06       	cpc	r15, r25
    40c4:	08 f0       	brcs	.+2      	; 0x40c8 <prvSampleTimeNow+0x2a>
    40c6:	47 c0       	rjmp	.+142    	; 0x4156 <prvSampleTimeNow+0xb8>
    40c8:	2f c0       	rjmp	.+94     	; 0x4128 <prvSampleTimeNow+0x8a>
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    {
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    40ca:	05 80       	ldd	r0, Z+5	; 0x05
    40cc:	f6 81       	ldd	r31, Z+6	; 0x06
    40ce:	e0 2d       	mov	r30, r0
    40d0:	a0 80       	ld	r10, Z
    40d2:	b1 80       	ldd	r11, Z+1	; 0x01

        /* Remove the timer from the list. */
        pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    40d4:	c6 81       	ldd	r28, Z+6	; 0x06
    40d6:	d7 81       	ldd	r29, Z+7	; 0x07
        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    40d8:	8e 01       	movw	r16, r28
    40da:	0e 5f       	subi	r16, 0xFE	; 254
    40dc:	1f 4f       	sbci	r17, 0xFF	; 255
    40de:	c8 01       	movw	r24, r16
    40e0:	0e 94 23 15 	call	0x2a46	; 0x2a46 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* Execute its callback, then send a command to restart the timer if
        it is an auto-reload timer.  It cannot be restarted here as the lists
        have not yet been switched. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    40e4:	e9 89       	ldd	r30, Y+17	; 0x11
    40e6:	fa 89       	ldd	r31, Y+18	; 0x12
    40e8:	ce 01       	movw	r24, r28
    40ea:	19 95       	eicall

        if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    40ec:	8e 85       	ldd	r24, Y+14	; 0x0e
    40ee:	81 30       	cpi	r24, 0x01	; 1
    40f0:	d9 f4       	brne	.+54     	; 0x4128 <prvSampleTimeNow+0x8a>
            the timer going into the same timer list then it has already expired
            and the timer should be re-inserted into the current list so it is
            processed again within this loop.  Otherwise a command should be sent
            to restart the timer to ensure it is only inserted into a list after
            the lists have been swapped. */
            xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    40f2:	8c 85       	ldd	r24, Y+12	; 0x0c
    40f4:	9d 85       	ldd	r25, Y+13	; 0x0d
    40f6:	8a 0d       	add	r24, r10
    40f8:	9b 1d       	adc	r25, r11
            if( xReloadTime > xNextExpireTime )
    40fa:	a8 16       	cp	r10, r24
    40fc:	b9 06       	cpc	r11, r25
    40fe:	60 f4       	brcc	.+24     	; 0x4118 <prvSampleTimeNow+0x7a>
            {
                listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    4100:	9b 83       	std	Y+3, r25	; 0x03
    4102:	8a 83       	std	Y+2, r24	; 0x02
                listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    4104:	d9 87       	std	Y+9, r29	; 0x09
    4106:	c8 87       	std	Y+8, r28	; 0x08
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    4108:	b8 01       	movw	r22, r16
    410a:	80 91 3b 0e 	lds	r24, 0x0E3B	; 0x800e3b <pxCurrentTimerList>
    410e:	90 91 3c 0e 	lds	r25, 0x0E3C	; 0x800e3c <pxCurrentTimerList+0x1>
    4112:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <vListInsert>
    4116:	08 c0       	rjmp	.+16     	; 0x4128 <prvSampleTimeNow+0x8a>
            }
            else
            {
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    4118:	00 e0       	ldi	r16, 0x00	; 0
    411a:	10 e0       	ldi	r17, 0x00	; 0
    411c:	20 e0       	ldi	r18, 0x00	; 0
    411e:	30 e0       	ldi	r19, 0x00	; 0
    4120:	a5 01       	movw	r20, r10
    4122:	60 e0       	ldi	r22, 0x00	; 0
    4124:	ce 01       	movw	r24, r28
    4126:	75 df       	rcall	.-278    	; 0x4012 <xTimerGenericCommand>

    /* The tick count has overflowed.  The timer lists must be switched.
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    4128:	e0 91 3b 0e 	lds	r30, 0x0E3B	; 0x800e3b <pxCurrentTimerList>
    412c:	f0 91 3c 0e 	lds	r31, 0x0E3C	; 0x800e3c <pxCurrentTimerList+0x1>
    4130:	80 81       	ld	r24, Z
    4132:	81 11       	cpse	r24, r1
    4134:	ca cf       	rjmp	.-108    	; 0x40ca <prvSampleTimeNow+0x2c>
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxTemp = pxCurrentTimerList;
    pxCurrentTimerList = pxOverflowTimerList;
    4136:	80 91 39 0e 	lds	r24, 0x0E39	; 0x800e39 <pxOverflowTimerList>
    413a:	90 91 3a 0e 	lds	r25, 0x0E3A	; 0x800e3a <pxOverflowTimerList+0x1>
    413e:	90 93 3c 0e 	sts	0x0E3C, r25	; 0x800e3c <pxCurrentTimerList+0x1>
    4142:	80 93 3b 0e 	sts	0x0E3B, r24	; 0x800e3b <pxCurrentTimerList>
    pxOverflowTimerList = pxTemp;
    4146:	f0 93 3a 0e 	sts	0x0E3A, r31	; 0x800e3a <pxOverflowTimerList+0x1>
    414a:	e0 93 39 0e 	sts	0x0E39, r30	; 0x800e39 <pxOverflowTimerList>
    xTimeNow = xTaskGetTickCount();

    if( xTimeNow < xLastTime )
    {
        prvSwitchTimerLists();
        *pxTimerListsWereSwitched = pdTRUE;
    414e:	81 e0       	ldi	r24, 0x01	; 1
    4150:	f6 01       	movw	r30, r12
    4152:	80 83       	st	Z, r24
    4154:	02 c0       	rjmp	.+4      	; 0x415a <prvSampleTimeNow+0xbc>
    }
    else
    {
        *pxTimerListsWereSwitched = pdFALSE;
    4156:	f6 01       	movw	r30, r12
    4158:	10 82       	st	Z, r1
    }

    xLastTime = xTimeNow;
    415a:	f0 92 34 0e 	sts	0x0E34, r15	; 0x800e34 <xLastTime.2397+0x1>
    415e:	e0 92 33 0e 	sts	0x0E33, r14	; 0x800e33 <xLastTime.2397>

    return xTimeNow;
}
    4162:	c7 01       	movw	r24, r14
    4164:	df 91       	pop	r29
    4166:	cf 91       	pop	r28
    4168:	1f 91       	pop	r17
    416a:	0f 91       	pop	r16
    416c:	ff 90       	pop	r15
    416e:	ef 90       	pop	r14
    4170:	df 90       	pop	r13
    4172:	cf 90       	pop	r12
    4174:	bf 90       	pop	r11
    4176:	af 90       	pop	r10
    4178:	08 95       	ret

0000417a <prvTimerTask>:
    pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
}
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
    417a:	cf 93       	push	r28
    417c:	df 93       	push	r29
    417e:	00 d0       	rcall	.+0      	; 0x4180 <prvTimerTask+0x6>
    4180:	00 d0       	rcall	.+0      	; 0x4182 <prvTimerTask+0x8>
    4182:	cd b7       	in	r28, 0x3d	; 61
    4184:	de b7       	in	r29, 0x3e	; 62
        /* Obtain the time now to make an assessment as to whether the timer
        has expired or not.  If obtaining the time causes the lists to switch
        then don't process this timer as any timers that remained in the list
        when the lists were switched will have been processed within the
        prvSampleTimeNow() function. */
        xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    4186:	ce 01       	movw	r24, r28
    4188:	01 96       	adiw	r24, 0x01	; 1
    418a:	4c 01       	movw	r8, r24
                case when the current timer list is empty. */
                if( xListWasEmpty != pdFALSE )
                {
                    /* The current timer list is empty - is the overflow list
                    also empty? */
                    xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    418c:	44 24       	eor	r4, r4
    418e:	43 94       	inc	r4
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    }
    else
    {
        /* Ensure the task unblocks when the tick count rolls over. */
        xNextExpireTime = ( TickType_t ) 0U;
    4190:	e1 2c       	mov	r14, r1
    4192:	f1 2c       	mov	r15, r1
                case when the current timer list is empty. */
                if( xListWasEmpty != pdFALSE )
                {
                    /* The current timer list is empty - is the overflow list
                    also empty? */
                    xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    4194:	51 2c       	mov	r5, r1
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

    while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    4196:	c8 2e       	mov	r12, r24
    4198:	d9 2c       	mov	r13, r9
    the timer with the nearest expiry time will expire.  If there are no
    active timers then just set the next expire time to 0.  That will cause
    this task to unblock when the tick count overflows, at which point the
    timer lists will be switched and the next expiry time can be
    re-assessed.  */
    *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    419a:	e0 91 3b 0e 	lds	r30, 0x0E3B	; 0x800e3b <pxCurrentTimerList>
    419e:	f0 91 3c 0e 	lds	r31, 0x0E3C	; 0x800e3c <pxCurrentTimerList+0x1>
    41a2:	80 81       	ld	r24, Z
    if( *pxListWasEmpty == pdFALSE )
    41a4:	88 23       	and	r24, r24
    41a6:	09 f4       	brne	.+2      	; 0x41aa <prvTimerTask+0x30>
    41a8:	b0 c0       	rjmp	.+352    	; 0x430a <prvTimerTask+0x190>
    {
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    41aa:	05 80       	ldd	r0, Z+5	; 0x05
    41ac:	f6 81       	ldd	r31, Z+6	; 0x06
    41ae:	e0 2d       	mov	r30, r0
    41b0:	a0 80       	ld	r10, Z
    41b2:	b1 80       	ldd	r11, Z+1	; 0x01
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

    vTaskSuspendAll();
    41b4:	ec da       	rcall	.-2600   	; 0x378e <vTaskSuspendAll>
        /* Obtain the time now to make an assessment as to whether the timer
        has expired or not.  If obtaining the time causes the lists to switch
        then don't process this timer as any timers that remained in the list
        when the lists were switched will have been processed within the
        prvSampleTimeNow() function. */
        xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    41b6:	c4 01       	movw	r24, r8
    41b8:	72 df       	rcall	.-284    	; 0x409e <prvSampleTimeNow>
    41ba:	8c 01       	movw	r16, r24
        if( xTimerListsWereSwitched == pdFALSE )
    41bc:	89 81       	ldd	r24, Y+1	; 0x01
    41be:	81 11       	cpse	r24, r1
    41c0:	42 c0       	rjmp	.+132    	; 0x4246 <prvTimerTask+0xcc>
        {
            /* The tick count has not overflowed, has the timer expired? */
            if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    41c2:	0a 15       	cp	r16, r10
    41c4:	1b 05       	cpc	r17, r11
            {
                ( void ) xTaskResumeAll();
    41c6:	80 f1       	brcs	.+96     	; 0x4228 <prvTimerTask+0xae>
    41c8:	a9 db       	rcall	.-2222   	; 0x391c <xTaskResumeAll>
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    41ca:	e0 91 3b 0e 	lds	r30, 0x0E3B	; 0x800e3b <pxCurrentTimerList>
    41ce:	f0 91 3c 0e 	lds	r31, 0x0E3C	; 0x800e3c <pxCurrentTimerList+0x1>
    41d2:	05 80       	ldd	r0, Z+5	; 0x05
    41d4:	f6 81       	ldd	r31, Z+6	; 0x06
    41d6:	e0 2d       	mov	r30, r0
    41d8:	66 80       	ldd	r6, Z+6	; 0x06
    41da:	77 80       	ldd	r7, Z+7	; 0x07

    /* Remove the timer from the list of active timers.  A check has already
    been performed to ensure the list is not empty. */
    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    41dc:	c3 01       	movw	r24, r6
    41de:	02 96       	adiw	r24, 0x02	; 2
    41e0:	0e 94 23 15 	call	0x2a46	; 0x2a46 <uxListRemove>
    traceTIMER_EXPIRED( pxTimer );

    /* If the timer is an auto reload timer then calculate the next
    expiry time and re-insert the timer in the list of active timers. */
    if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    41e4:	d3 01       	movw	r26, r6
    41e6:	1e 96       	adiw	r26, 0x0e	; 14
    41e8:	8c 91       	ld	r24, X
    41ea:	1e 97       	sbiw	r26, 0x0e	; 14
    41ec:	81 30       	cpi	r24, 0x01	; 1
    41ee:	a1 f4       	brne	.+40     	; 0x4218 <prvTimerTask+0x9e>
    {
        /* The timer is inserted into a list using a time relative to anything
        other than the current time.  It will therefore be inserted into the
        correct list relative to the time this task thinks it is now. */
        if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    41f0:	1c 96       	adiw	r26, 0x0c	; 12
    41f2:	6d 91       	ld	r22, X+
    41f4:	7c 91       	ld	r23, X
    41f6:	1d 97       	sbiw	r26, 0x0d	; 13
    41f8:	6a 0d       	add	r22, r10
    41fa:	7b 1d       	adc	r23, r11
    41fc:	95 01       	movw	r18, r10
    41fe:	a8 01       	movw	r20, r16
    4200:	c3 01       	movw	r24, r6
    4202:	63 de       	rcall	.-826    	; 0x3eca <prvInsertTimerInActiveList>
    4204:	88 23       	and	r24, r24
    4206:	41 f0       	breq	.+16     	; 0x4218 <prvTimerTask+0x9e>
        {
            /* The timer expired before it was added to the active timer
            list.  Reload it now.  */
            xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    4208:	0e 2d       	mov	r16, r14
    420a:	1f 2d       	mov	r17, r15
    420c:	2e 2d       	mov	r18, r14
    420e:	3f 2d       	mov	r19, r15
    4210:	a5 01       	movw	r20, r10
    4212:	65 2d       	mov	r22, r5
    4214:	c3 01       	movw	r24, r6
    4216:	fd de       	rcall	.-518    	; 0x4012 <xTimerGenericCommand>
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* Call the timer callback. */
    pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    4218:	d3 01       	movw	r26, r6
    421a:	51 96       	adiw	r26, 0x11	; 17
    421c:	ed 91       	ld	r30, X+
    421e:	fc 91       	ld	r31, X
    4220:	52 97       	sbiw	r26, 0x12	; 18
    4222:	c3 01       	movw	r24, r6
    4224:	19 95       	eicall
    4226:	64 c0       	rjmp	.+200    	; 0x42f0 <prvTimerTask+0x176>
        prvSampleTimeNow() function. */
        xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
        if( xTimerListsWereSwitched == pdFALSE )
        {
            /* The tick count has not overflowed, has the timer expired? */
            if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    4228:	45 2d       	mov	r20, r5
                    /* The current timer list is empty - is the overflow list
                    also empty? */
                    xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
                }

                vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    422a:	b5 01       	movw	r22, r10
    422c:	60 1b       	sub	r22, r16
    422e:	71 0b       	sbc	r23, r17
    4230:	80 91 37 0e 	lds	r24, 0x0E37	; 0x800e37 <xTimerQueue>
    4234:	90 91 38 0e 	lds	r25, 0x0E38	; 0x800e38 <xTimerQueue+0x1>

                if( xTaskResumeAll() == pdFALSE )
    4238:	ee d8       	rcall	.-3620   	; 0x3416 <vQueueWaitForMessageRestricted>
    423a:	70 db       	rcall	.-2336   	; 0x391c <xTaskResumeAll>
    423c:	81 11       	cpse	r24, r1
                {
                    /* Yield to wait for either a command to arrive, or the
                    block time to expire.  If a command arrived between the
                    critical section being exited and this yield then the yield
                    will not cause the task to block. */
                    portYIELD_WITHIN_API();
    423e:	58 c0       	rjmp	.+176    	; 0x42f0 <prvTimerTask+0x176>
    4240:	0e 94 f8 15 	call	0x2bf0	; 0x2bf0 <vPortYield>
                }
            }
        }
        else
        {
            ( void ) xTaskResumeAll();
    4244:	55 c0       	rjmp	.+170    	; 0x42f0 <prvTimerTask+0x176>
    4246:	6a db       	rcall	.-2348   	; 0x391c <xTaskResumeAll>
    4248:	53 c0       	rjmp	.+166    	; 0x42f0 <prvTimerTask+0x176>
        }
        #endif /* INCLUDE_xTimerPendFunctionCall */

        /* Commands that are positive are timer commands rather than pended
        function calls. */
        if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    424a:	89 81       	ldd	r24, Y+1	; 0x01
    424c:	88 23       	and	r24, r24
    424e:	0c f4       	brge	.+2      	; 0x4252 <prvTimerTask+0xd8>
    4250:	4f c0       	rjmp	.+158    	; 0x42f0 <prvTimerTask+0x176>
        {
            /* The messages uses the xTimerParameters member to work on a
            software timer. */
            pxTimer = xMessage.u.xTimerParameters.pxTimer;
    4252:	ac 80       	ldd	r10, Y+4	; 0x04
    4254:	bd 80       	ldd	r11, Y+5	; 0x05

        if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    4256:	f5 01       	movw	r30, r10
    4258:	82 85       	ldd	r24, Z+10	; 0x0a
    425a:	93 85       	ldd	r25, Z+11	; 0x0b
    425c:	89 2b       	or	r24, r25
            {
                /* The timer is in a list, remove it. */
                ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    425e:	21 f0       	breq	.+8      	; 0x4268 <prvTimerTask+0xee>
    4260:	c5 01       	movw	r24, r10
    4262:	02 96       	adiw	r24, 0x02	; 2
    4264:	0e 94 23 15 	call	0x2a46	; 0x2a46 <uxListRemove>
            it must be present in the function call.  prvSampleTimeNow() must be
            called after the message is received from xTimerQueue so there is no
            possibility of a higher priority task adding a message to the message
            queue with a time that is ahead of the timer daemon task (because it
            pre-empted the timer daemon task after the xTimeNow value was set). */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    4268:	ce 01       	movw	r24, r28
    426a:	06 96       	adiw	r24, 0x06	; 6
    426c:	18 df       	rcall	.-464    	; 0x409e <prvSampleTimeNow>
    426e:	ac 01       	movw	r20, r24

            switch( xMessage.xMessageID )
    4270:	99 81       	ldd	r25, Y+1	; 0x01
    4272:	94 30       	cpi	r25, 0x04	; 4
    4274:	89 f1       	breq	.+98     	; 0x42d8 <prvTimerTask+0x15e>
    4276:	1c f4       	brge	.+6      	; 0x427e <prvTimerTask+0x104>
    4278:	93 30       	cpi	r25, 0x03	; 3
    427a:	d0 f5       	brcc	.+116    	; 0x42f0 <prvTimerTask+0x176>
    427c:	07 c0       	rjmp	.+14     	; 0x428c <prvTimerTask+0x112>
    427e:	96 30       	cpi	r25, 0x06	; 6
    4280:	bc f1       	brlt	.+110    	; 0x42f0 <prvTimerTask+0x176>
    4282:	98 30       	cpi	r25, 0x08	; 8
    4284:	1c f0       	brlt	.+6      	; 0x428c <prvTimerTask+0x112>
    4286:	99 30       	cpi	r25, 0x09	; 9
    4288:	39 f1       	breq	.+78     	; 0x42d8 <prvTimerTask+0x15e>
    428a:	32 c0       	rjmp	.+100    	; 0x42f0 <prvTimerTask+0x176>
                case tmrCOMMAND_START_FROM_ISR :
                case tmrCOMMAND_RESET :
                case tmrCOMMAND_RESET_FROM_ISR :
                case tmrCOMMAND_START_DONT_TRACE :
                    /* Start or restart a timer. */
                    if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    428c:	2a 81       	ldd	r18, Y+2	; 0x02
    428e:	3b 81       	ldd	r19, Y+3	; 0x03
    4290:	d5 01       	movw	r26, r10
    4292:	1c 96       	adiw	r26, 0x0c	; 12
    4294:	6d 91       	ld	r22, X+
    4296:	7c 91       	ld	r23, X
    4298:	1d 97       	sbiw	r26, 0x0d	; 13
    429a:	62 0f       	add	r22, r18
    429c:	73 1f       	adc	r23, r19
    429e:	c5 01       	movw	r24, r10
    42a0:	14 de       	rcall	.-984    	; 0x3eca <prvInsertTimerInActiveList>
    42a2:	88 23       	and	r24, r24
    42a4:	29 f1       	breq	.+74     	; 0x42f0 <prvTimerTask+0x176>
                    {
                        /* The timer expired before it was added to the active
                        timer list.  Process it now. */
                        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    42a6:	d5 01       	movw	r26, r10
    42a8:	51 96       	adiw	r26, 0x11	; 17
    42aa:	ed 91       	ld	r30, X+
    42ac:	fc 91       	ld	r31, X
    42ae:	52 97       	sbiw	r26, 0x12	; 18
    42b0:	c5 01       	movw	r24, r10
    42b2:	19 95       	eicall
                        traceTIMER_EXPIRED( pxTimer );

                        if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    42b4:	f5 01       	movw	r30, r10
    42b6:	86 85       	ldd	r24, Z+14	; 0x0e
    42b8:	81 30       	cpi	r24, 0x01	; 1
    42ba:	d1 f4       	brne	.+52     	; 0x42f0 <prvTimerTask+0x176>
                        {
                            xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    42bc:	4a 81       	ldd	r20, Y+2	; 0x02
    42be:	5b 81       	ldd	r21, Y+3	; 0x03
    42c0:	84 85       	ldd	r24, Z+12	; 0x0c
    42c2:	95 85       	ldd	r25, Z+13	; 0x0d
    42c4:	48 0f       	add	r20, r24
    42c6:	59 1f       	adc	r21, r25
    42c8:	0e 2d       	mov	r16, r14
    42ca:	1f 2d       	mov	r17, r15
    42cc:	2e 2d       	mov	r18, r14
    42ce:	3f 2d       	mov	r19, r15
    42d0:	65 2d       	mov	r22, r5
    42d2:	c5 01       	movw	r24, r10
    42d4:	9e de       	rcall	.-708    	; 0x4012 <xTimerGenericCommand>
    42d6:	0c c0       	rjmp	.+24     	; 0x42f0 <prvTimerTask+0x176>
                    There is nothing to do here. */
                    break;

                case tmrCOMMAND_CHANGE_PERIOD :
                case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
                    pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    42d8:	6a 81       	ldd	r22, Y+2	; 0x02
    42da:	7b 81       	ldd	r23, Y+3	; 0x03
    42dc:	d5 01       	movw	r26, r10
    42de:	1d 96       	adiw	r26, 0x0d	; 13
    42e0:	7c 93       	st	X, r23
    42e2:	6e 93       	st	-X, r22
                    be longer or shorter than the old one.  The command time is
                    therefore set to the current time, and as the period cannot
                    be zero the next expiry time can only be in the future,
                    meaning (unlike for the xTimerStart() case above) there is
                    no fail case that needs to be handled here. */
                    ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    42e4:	1c 97       	sbiw	r26, 0x0c	; 12
    42e6:	64 0f       	add	r22, r20
    42e8:	75 1f       	adc	r23, r21
    42ea:	9a 01       	movw	r18, r20
    42ec:	c5 01       	movw	r24, r10
    42ee:	ed dd       	rcall	.-1062   	; 0x3eca <prvInsertTimerInActiveList>
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

    while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    42f0:	4e 2d       	mov	r20, r14
    42f2:	5f 2d       	mov	r21, r15
    42f4:	6c 2d       	mov	r22, r12
    42f6:	7d 2d       	mov	r23, r13
    42f8:	80 91 37 0e 	lds	r24, 0x0E37	; 0x800e37 <xTimerQueue>
    42fc:	90 91 38 0e 	lds	r25, 0x0E38	; 0x800e38 <xTimerQueue+0x1>
    4300:	0e 94 c7 18 	call	0x318e	; 0x318e <xQueueReceive>
    4304:	81 11       	cpse	r24, r1
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

    vTaskSuspendAll();
    4306:	a1 cf       	rjmp	.-190    	; 0x424a <prvTimerTask+0xd0>
    4308:	48 cf       	rjmp	.-368    	; 0x419a <prvTimerTask+0x20>
        /* Obtain the time now to make an assessment as to whether the timer
        has expired or not.  If obtaining the time causes the lists to switch
        then don't process this timer as any timers that remained in the list
        when the lists were switched will have been processed within the
        prvSampleTimeNow() function. */
        xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    430a:	41 da       	rcall	.-2942   	; 0x378e <vTaskSuspendAll>
    430c:	c4 01       	movw	r24, r8
    430e:	c7 de       	rcall	.-626    	; 0x409e <prvSampleTimeNow>
    4310:	8c 01       	movw	r16, r24
        if( xTimerListsWereSwitched == pdFALSE )
    4312:	89 81       	ldd	r24, Y+1	; 0x01
    4314:	81 11       	cpse	r24, r1
    4316:	97 cf       	rjmp	.-210    	; 0x4246 <prvTimerTask+0xcc>
                case when the current timer list is empty. */
                if( xListWasEmpty != pdFALSE )
                {
                    /* The current timer list is empty - is the overflow list
                    also empty? */
                    xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    4318:	e0 91 39 0e 	lds	r30, 0x0E39	; 0x800e39 <pxOverflowTimerList>
    431c:	f0 91 3a 0e 	lds	r31, 0x0E3A	; 0x800e3a <pxOverflowTimerList+0x1>
    4320:	80 81       	ld	r24, Z
    4322:	44 2d       	mov	r20, r4
    4324:	81 11       	cpse	r24, r1
    4326:	45 2d       	mov	r20, r5
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    }
    else
    {
        /* Ensure the task unblocks when the tick count rolls over. */
        xNextExpireTime = ( TickType_t ) 0U;
    4328:	ae 2c       	mov	r10, r14
    432a:	bf 2c       	mov	r11, r15
    432c:	7e cf       	rjmp	.-260    	; 0x422a <prvTimerTask+0xb0>

0000432e <RTOS_sync_init>:



void RTOS_sync_init(void)
{
    LCD_mutex_handle = xSemaphoreCreateMutexStatic( &LCD_mutex_Buffer );
    432e:	6d e3       	ldi	r22, 0x3D	; 61
    4330:	7e e0       	ldi	r23, 0x0E	; 14
    4332:	81 e0       	ldi	r24, 0x01	; 1
    4334:	0e 94 72 18 	call	0x30e4	; 0x30e4 <xQueueCreateMutexStatic>
    4338:	90 93 18 17 	sts	0x1718, r25	; 0x801718 <LCD_mutex_handle+0x1>
    433c:	80 93 17 17 	sts	0x1717, r24	; 0x801717 <LCD_mutex_handle>
    4340:	08 95       	ret

00004342 <Drum_speed_Tasks_init>:
#include "../RTE/RTE_drum.h"



void Drum_speed_Tasks_init(void){
	Drum_speed_init();
    4342:	0c 94 07 01 	jmp	0x20e	; 0x20e <Drum_speed_init>
    4346:	08 95       	ret

00004348 <LCD_main_err_Init>:

void (*g_callback_read_timeout)(void) = NULL;
void (*g_callback_write_timeout)(void) = NULL;

void LCD_main_err_Init( void(*callback_read_timeout)(void) , void(*callback_write_timeout)(void)){
	g_callback_read_timeout = callback_read_timeout;
    4348:	90 93 61 0e 	sts	0x0E61, r25	; 0x800e61 <g_callback_read_timeout+0x1>
    434c:	80 93 60 0e 	sts	0x0E60, r24	; 0x800e60 <g_callback_read_timeout>
	g_callback_write_timeout = callback_write_timeout;
    4350:	70 93 5f 0e 	sts	0x0E5F, r23	; 0x800e5f <g_callback_write_timeout+0x1>
    4354:	60 93 5e 0e 	sts	0x0E5E, r22	; 0x800e5e <g_callback_write_timeout>
    4358:	08 95       	ret

0000435a <LCD_main>:
	RTE_set_Start_blancher_Operation(s_Lcd_data_read.Start_blancher_operation);
}


static void LCD_RTE_COLLECT(void){
		s_Lcd_data_write.Drum_speed = RTE_get_Drum_speed();
    435a:	09 e1       	ldi	r16, 0x19	; 25
    435c:	17 e1       	ldi	r17, 0x17	; 23
	//unsigned int x_time = 0;
	while(1){
		
		//x_time = Get_millis();
		//UART0_puts("LCD alive task \n");
		xSemaphoreTake(LCD_mutex_handle , portMAX_DELAY);
    435e:	6f ef       	ldi	r22, 0xFF	; 255
    4360:	7f ef       	ldi	r23, 0xFF	; 255
    4362:	80 91 17 17 	lds	r24, 0x1717	; 0x801717 <LCD_mutex_handle>
    4366:	90 91 18 17 	lds	r25, 0x1718	; 0x801718 <LCD_mutex_handle+0x1>
    436a:	0e 94 50 19 	call	0x32a0	; 0x32a0 <xQueueSemaphoreTake>


static uint8_t LCD_READ_Parameters(void){
	//call LCD_read_mutliple regs (fill the struct) and check for the errors //s_Lcd_data_read
	//set rte parameters
	return Lcd_Read_multiple_data(LCD_START_READ_ADDRESS,(uint16_t*)&s_Lcd_data_read,LCD_READ_REGS_NUMBER);
    436e:	41 e1       	ldi	r20, 0x11	; 17
    4370:	6d e1       	ldi	r22, 0x1D	; 29
    4372:	77 e1       	ldi	r23, 0x17	; 23
    4374:	81 e0       	ldi	r24, 0x01	; 1
    4376:	90 e0       	ldi	r25, 0x00	; 0
    4378:	0e 94 a2 01 	call	0x344	; 0x344 <Lcd_Read_multiple_data>
    437c:	c8 2f       	mov	r28, r24
		
		//x_time = Get_millis();
		//UART0_puts("LCD alive task \n");
		xSemaphoreTake(LCD_mutex_handle , portMAX_DELAY);
		r_err =  LCD_READ_Parameters();
		xSemaphoreGive(LCD_mutex_handle ) ;
    437e:	20 e0       	ldi	r18, 0x00	; 0
    4380:	40 e0       	ldi	r20, 0x00	; 0
    4382:	50 e0       	ldi	r21, 0x00	; 0
    4384:	60 e0       	ldi	r22, 0x00	; 0
    4386:	70 e0       	ldi	r23, 0x00	; 0
    4388:	80 91 17 17 	lds	r24, 0x1717	; 0x801717 <LCD_mutex_handle>
    438c:	90 91 18 17 	lds	r25, 0x1718	; 0x801718 <LCD_mutex_handle+0x1>
    4390:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <xQueueGenericSend>
		
 		if(LCD_RESPONCE_TIMED_OUT == r_err)
    4394:	c2 3e       	cpi	r28, 0xE2	; 226
    4396:	89 f4       	brne	.+34     	; 0x43ba <LCD_main+0x60>
 		{
			 read_err_counter++;
    4398:	80 91 5d 0e 	lds	r24, 0x0E5D	; 0x800e5d <read_err_counter.2600>
    439c:	8f 5f       	subi	r24, 0xFF	; 255
    439e:	80 93 5d 0e 	sts	0x0E5D, r24	; 0x800e5d <read_err_counter.2600>
			 if(LCD_READING_TIMEOUT_MATURE == read_err_counter){
    43a2:	85 30       	cpi	r24, 0x05	; 5
    43a4:	09 f0       	breq	.+2      	; 0x43a8 <LCD_main+0x4e>
    43a6:	4d c0       	rjmp	.+154    	; 0x4442 <LCD_main+0xe8>
				//  callback error notification for reading timeout
				if(g_callback_read_timeout == NULL){
    43a8:	e0 91 60 0e 	lds	r30, 0x0E60	; 0x800e60 <g_callback_read_timeout>
    43ac:	f0 91 61 0e 	lds	r31, 0x0E61	; 0x800e61 <g_callback_read_timeout+0x1>
    43b0:	30 97       	sbiw	r30, 0x00	; 0
    43b2:	09 f4       	brne	.+2      	; 0x43b6 <LCD_main+0x5c>
    43b4:	46 c0       	rjmp	.+140    	; 0x4442 <LCD_main+0xe8>
					//no entry
				}
				else
				{
					g_callback_read_timeout();
    43b6:	19 95       	eicall
    43b8:	44 c0       	rjmp	.+136    	; 0x4442 <LCD_main+0xe8>
}

//drum speed & current temp
//s_Lcd_data_read
static void LCD_RTE_FEED(void){
	RTE_set_Set_temperature(s_Lcd_data_read.Set_temp);
    43ba:	cd e1       	ldi	r28, 0x1D	; 29
    43bc:	d7 e1       	ldi	r29, 0x17	; 23
    43be:	8a 85       	ldd	r24, Y+10	; 0x0a
    43c0:	9b 85       	ldd	r25, Y+11	; 0x0b
    43c2:	0e 94 2e 14 	call	0x285c	; 0x285c <RTE_set_Set_temperature>
	RTE_set_Sleep_temperature(s_Lcd_data_read.Sleep_temp);
    43c6:	88 85       	ldd	r24, Y+8	; 0x08
    43c8:	99 85       	ldd	r25, Y+9	; 0x09
    43ca:	0e 94 1f 14 	call	0x283e	; 0x283e <RTE_set_Sleep_temperature>
	RTE_set_Threshold_set_temperature(s_Lcd_data_read.Threshold_set_temp);
    43ce:	8c 85       	ldd	r24, Y+12	; 0x0c
    43d0:	9d 85       	ldd	r25, Y+13	; 0x0d
    43d2:	0e 94 3d 14 	call	0x287a	; 0x287a <RTE_set_Threshold_set_temperature>
	RTE_set_Threshold_sleep_temperature(s_Lcd_data_read.Threshold_sleep_temp);
    43d6:	8e 85       	ldd	r24, Y+14	; 0x0e
    43d8:	9f 85       	ldd	r25, Y+15	; 0x0f
    43da:	0e 94 4c 14 	call	0x2898	; 0x2898 <RTE_set_Threshold_sleep_temperature>
	RTE_set_Negative_offset_temperature(s_Lcd_data_read.Negative_offset_temp);
    43de:	8a 89       	ldd	r24, Y+18	; 0x12
    43e0:	9b 89       	ldd	r25, Y+19	; 0x13
    43e2:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <RTE_set_Negative_offset_temperature>
	RTE_set_Positive_offset_temperature(s_Lcd_data_read.Positive_offset_temp);
    43e6:	88 89       	ldd	r24, Y+16	; 0x10
    43e8:	99 89       	ldd	r25, Y+17	; 0x11
    43ea:	0e 94 5b 14 	call	0x28b6	; 0x28b6 <RTE_set_Positive_offset_temperature>
	RTE_set_System_on(s_Lcd_data_read.System_on);
    43ee:	88 81       	ld	r24, Y
    43f0:	99 81       	ldd	r25, Y+1	; 0x01
    43f2:	0e 94 92 13 	call	0x2724	; 0x2724 <RTE_set_System_on>
	RTE_set_Wash_Operation(s_Lcd_data_read.Wash_operation);
    43f6:	8c 81       	ldd	r24, Y+4	; 0x04
    43f8:	9d 81       	ldd	r25, Y+5	; 0x05
    43fa:	0e 94 b0 13 	call	0x2760	; 0x2760 <RTE_set_Wash_Operation>
	RTE_set_Tank_Calibration_Operation(s_Lcd_data_read.Tank_calibration_operation);
    43fe:	8e 81       	ldd	r24, Y+6	; 0x06
    4400:	9f 81       	ldd	r25, Y+7	; 0x07
    4402:	0e 94 bf 13 	call	0x277e	; 0x277e <RTE_set_Tank_Calibration_Operation>
	RTE_set_Gear_ratio(s_Lcd_data_read.Gear_ratio);
    4406:	8c 89       	ldd	r24, Y+20	; 0x14
    4408:	9d 89       	ldd	r25, Y+21	; 0x15
    440a:	0e 94 ca 12 	call	0x2594	; 0x2594 <RTE_set_Gear_ratio>
	RTE_set_Conveyor_length(s_Lcd_data_read.Conveyor_length);
    440e:	8e 89       	ldd	r24, Y+22	; 0x16
    4410:	9f 89       	ldd	r25, Y+23	; 0x17
    4412:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <RTE_set_Conveyor_length>
	RTE_set_Driver_diameter(s_Lcd_data_read.Driver_diameter);
    4416:	88 8d       	ldd	r24, Y+24	; 0x18
    4418:	99 8d       	ldd	r25, Y+25	; 0x19
    441a:	0e 94 f7 12 	call	0x25ee	; 0x25ee <RTE_set_Driver_diameter>
	RTE_set_Time_minute(s_Lcd_data_read.Time_minute);
    441e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    4420:	9d 8d       	ldd	r25, Y+29	; 0x1d
    4422:	0e 94 06 13 	call	0x260c	; 0x260c <RTE_set_Time_minute>
	RTE_set_Time_second(s_Lcd_data_read.Time_second);
    4426:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4428:	9f 8d       	ldd	r25, Y+31	; 0x1f
    442a:	0e 94 15 13 	call	0x262a	; 0x262a <RTE_set_Time_second>
	RTE_set_RPM_max(s_Lcd_data_read.RPM_max);
    442e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    4430:	9b 8d       	ldd	r25, Y+27	; 0x1b
    4432:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <RTE_set_RPM_max>
	RTE_set_Start_blancher_Operation(s_Lcd_data_read.Start_blancher_operation);
    4436:	8a 81       	ldd	r24, Y+2	; 0x02
    4438:	9b 81       	ldd	r25, Y+3	; 0x03
    443a:	0e 94 a1 13 	call	0x2742	; 0x2742 <RTE_set_Start_blancher_Operation>
			 }
			 
 		}
	    else{
 			LCD_RTE_FEED();	
			read_err_counter = 0;
    443e:	10 92 5d 0e 	sts	0x0E5D, r1	; 0x800e5d <read_err_counter.2600>
	RTE_set_Start_blancher_Operation(s_Lcd_data_read.Start_blancher_operation);
}


static void LCD_RTE_COLLECT(void){
		s_Lcd_data_write.Drum_speed = RTE_get_Drum_speed();
    4442:	0e 94 7f 12 	call	0x24fe	; 0x24fe <RTE_get_Drum_speed>
    4446:	f8 01       	movw	r30, r16
    4448:	93 83       	std	Z+3, r25	; 0x03
    444a:	82 83       	std	Z+2, r24	; 0x02
		s_Lcd_data_write.Current_temperature = RTE_get_Current_temperature();
    444c:	0e 94 7e 14 	call	0x28fc	; 0x28fc <RTE_get_Current_temperature>
    4450:	f8 01       	movw	r30, r16
    4452:	91 83       	std	Z+1, r25	; 0x01
    4454:	80 83       	st	Z, r24
 			LCD_RTE_FEED();	
			read_err_counter = 0;
 		}
 		
  		LCD_RTE_COLLECT();
		xSemaphoreTake(LCD_mutex_handle , portMAX_DELAY);
    4456:	6f ef       	ldi	r22, 0xFF	; 255
    4458:	7f ef       	ldi	r23, 0xFF	; 255
    445a:	80 91 17 17 	lds	r24, 0x1717	; 0x801717 <LCD_mutex_handle>
    445e:	90 91 18 17 	lds	r25, 0x1718	; 0x801718 <LCD_mutex_handle+0x1>
    4462:	0e 94 50 19 	call	0x32a0	; 0x32a0 <xQueueSemaphoreTake>

}


static uint8_t LCD_WRITE_Parameters(void){
	return Lcd_Write_multiple_data(LCD_START_WRITE_ADDRESS,(uint16_t*)&s_Lcd_data_write,LCD_WRITE_REGS_NUMBER);
    4466:	42 e0       	ldi	r20, 0x02	; 2
    4468:	b8 01       	movw	r22, r16
    446a:	80 e0       	ldi	r24, 0x00	; 0
    446c:	9f e0       	ldi	r25, 0x0F	; 15
    446e:	0e 94 c9 01 	call	0x392	; 0x392 <Lcd_Write_multiple_data>
    4472:	c8 2f       	mov	r28, r24
 		}
 		
  		LCD_RTE_COLLECT();
		xSemaphoreTake(LCD_mutex_handle , portMAX_DELAY);
 		w_err = LCD_WRITE_Parameters();
		xSemaphoreGive(LCD_mutex_handle ) ; 
    4474:	20 e0       	ldi	r18, 0x00	; 0
    4476:	40 e0       	ldi	r20, 0x00	; 0
    4478:	50 e0       	ldi	r21, 0x00	; 0
    447a:	60 e0       	ldi	r22, 0x00	; 0
    447c:	70 e0       	ldi	r23, 0x00	; 0
    447e:	80 91 17 17 	lds	r24, 0x1717	; 0x801717 <LCD_mutex_handle>
    4482:	90 91 18 17 	lds	r25, 0x1718	; 0x801718 <LCD_mutex_handle+0x1>
    4486:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <xQueueGenericSend>
		
		if(LCD_RESPONCE_TIMED_OUT == w_err)
    448a:	c2 3e       	cpi	r28, 0xE2	; 226
    448c:	79 f4       	brne	.+30     	; 0x44ac <LCD_main+0x152>
		{
			write_err_counter++;
    448e:	80 91 5c 0e 	lds	r24, 0x0E5C	; 0x800e5c <write_err_counter.2601>
    4492:	8f 5f       	subi	r24, 0xFF	; 255
    4494:	80 93 5c 0e 	sts	0x0E5C, r24	; 0x800e5c <write_err_counter.2601>
			if( LCD_WRITING_TIMEOUT_MATURE == write_err_counter){
    4498:	85 30       	cpi	r24, 0x05	; 5
    449a:	51 f4       	brne	.+20     	; 0x44b0 <LCD_main+0x156>
				//callback error notification for writing timeout
				if(g_callback_write_timeout == NULL){
    449c:	e0 91 5e 0e 	lds	r30, 0x0E5E	; 0x800e5e <g_callback_write_timeout>
    44a0:	f0 91 5f 0e 	lds	r31, 0x0E5F	; 0x800e5f <g_callback_write_timeout+0x1>
    44a4:	30 97       	sbiw	r30, 0x00	; 0
    44a6:	21 f0       	breq	.+8      	; 0x44b0 <LCD_main+0x156>
					//no entry
				}
				else{
					g_callback_write_timeout();
    44a8:	19 95       	eicall
    44aa:	02 c0       	rjmp	.+4      	; 0x44b0 <LCD_main+0x156>
				}	
			}
		}
		else{
			write_err_counter = 0;
    44ac:	10 92 5c 0e 	sts	0x0E5C, r1	; 0x800e5c <write_err_counter.2601>
		//x_time =  Get_millis() - x_time;
		//UART0_puts("LCD Exe time = ");
		//UART0_OutUDec(x_time);
		//UART0_putc('\n');
		//_delay_ms(1000);
		vTaskDelay(200/portTICK_PERIOD_MS);
    44b0:	8c e0       	ldi	r24, 0x0C	; 12
    44b2:	90 e0       	ldi	r25, 0x00	; 0
    44b4:	ac da       	rcall	.-2728   	; 0x3a0e <vTaskDelay>
		//_delay_ms(2000);
	}
    44b6:	53 cf       	rjmp	.-346    	; 0x435e <LCD_main+0x4>

000044b8 <Level_main_err_init>:

#include "../MCAL/UART.h"
 
void (*g_callback_level_sensor_fail) (void) = NULL;
void Level_main_err_init( void (*callback_level_sensor_fail) (void) ){
	 g_callback_level_sensor_fail = callback_level_sensor_fail;
    44b8:	90 93 63 0e 	sts	0x0E63, r25	; 0x800e63 <g_callback_level_sensor_fail+0x1>
    44bc:	80 93 62 0e 	sts	0x0E62, r24	; 0x800e62 <g_callback_level_sensor_fail>
    44c0:	08 95       	ret

000044c2 <Level_main>:
	uint8_t Tank_level = 0;
	uint8_t Blancher_level = 0;
	
	while (1)
	{
		UART0_puts("Level task alive \n");
    44c2:	8f e0       	ldi	r24, 0x0F	; 15
    44c4:	93 e0       	ldi	r25, 0x03	; 3
    44c6:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <UART0_puts>
		Tank_level = Get_tank_level();
    44ca:	0e 94 ed 01 	call	0x3da	; 0x3da <Get_tank_level>
    44ce:	c8 2f       	mov	r28, r24
		Blancher_level = Get_blancher_level();
    44d0:	0e 94 15 02 	call	0x42a	; 0x42a <Get_blancher_level>
    44d4:	d8 2f       	mov	r29, r24
		if (LEVEL_ERROR == Tank_level)
    44d6:	c5 35       	cpi	r28, 0x55	; 85
    44d8:	61 f4       	brne	.+24     	; 0x44f2 <Level_main+0x30>
		{
		
			if(g_callback_level_sensor_fail == NULL){
    44da:	e0 91 62 0e 	lds	r30, 0x0E62	; 0x800e62 <g_callback_level_sensor_fail>
    44de:	f0 91 63 0e 	lds	r31, 0x0E63	; 0x800e63 <g_callback_level_sensor_fail+0x1>
    44e2:	30 97       	sbiw	r30, 0x00	; 0
    44e4:	09 f0       	breq	.+2      	; 0x44e8 <Level_main+0x26>
				
			}
			else{
				// callback error function .
				g_callback_level_sensor_fail();
    44e6:	19 95       	eicall
			}
			RTE_set_tank_level(INVALID_DATA);
    44e8:	8a ef       	ldi	r24, 0xFA	; 250
    44ea:	9f ea       	ldi	r25, 0xAF	; 175
    44ec:	0e 94 3e 13 	call	0x267c	; 0x267c <RTE_set_tank_level>
    44f0:	15 c0       	rjmp	.+42     	; 0x451c <Level_main+0x5a>
			
			//UART0_puts("level error !!!");
		}
		else 
		{
			RTE_set_tank_level(Tank_level);
    44f2:	8c 2f       	mov	r24, r28
    44f4:	90 e0       	ldi	r25, 0x00	; 0
    44f6:	0e 94 3e 13 	call	0x267c	; 0x267c <RTE_set_tank_level>
			UART0_puts("TANK level =         ");
    44fa:	82 e2       	ldi	r24, 0x22	; 34
    44fc:	93 e0       	ldi	r25, 0x03	; 3
    44fe:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <UART0_puts>
			UART0_OutUDec(Tank_level);
    4502:	6c 2f       	mov	r22, r28
    4504:	70 e0       	ldi	r23, 0x00	; 0
    4506:	80 e0       	ldi	r24, 0x00	; 0
    4508:	90 e0       	ldi	r25, 0x00	; 0
    450a:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <UART0_OutUDec>
			UART0_putc('\n');
    450e:	8a e0       	ldi	r24, 0x0A	; 10
    4510:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <UART0_putc>
			RTE_set_blancher_level(Blancher_level);
    4514:	8d 2f       	mov	r24, r29
    4516:	90 e0       	ldi	r25, 0x00	; 0
    4518:	0e 94 4d 13 	call	0x269a	; 0x269a <RTE_set_blancher_level>
		}
		vTaskDelay(50/portTICK_PERIOD_MS) ;
    451c:	83 e0       	ldi	r24, 0x03	; 3
    451e:	90 e0       	ldi	r25, 0x00	; 0
    4520:	76 da       	rcall	.-2836   	; 0x3a0e <vTaskDelay>
	}
    4522:	cf cf       	rjmp	.-98     	; 0x44c2 <Level_main>

00004524 <Tank_out_callback>:
}

static void Tank_out_callback(void)
{
	
	g_out_liters_counter ++ ;
    4524:	80 91 68 0e 	lds	r24, 0x0E68	; 0x800e68 <g_out_liters_counter>
    4528:	90 91 69 0e 	lds	r25, 0x0E69	; 0x800e69 <g_out_liters_counter+0x1>
    452c:	01 96       	adiw	r24, 0x01	; 1
    452e:	90 93 69 0e 	sts	0x0E69, r25	; 0x800e69 <g_out_liters_counter+0x1>
    4532:	80 93 68 0e 	sts	0x0E68, r24	; 0x800e68 <g_out_liters_counter>
	if (g_out_liters_counter >= g_out_liters )
    4536:	20 91 68 0e 	lds	r18, 0x0E68	; 0x800e68 <g_out_liters_counter>
    453a:	30 91 69 0e 	lds	r19, 0x0E69	; 0x800e69 <g_out_liters_counter+0x1>
    453e:	80 91 64 0e 	lds	r24, 0x0E64	; 0x800e64 <g_out_liters>
    4542:	90 91 65 0e 	lds	r25, 0x0E65	; 0x800e65 <g_out_liters+0x1>
    4546:	28 17       	cp	r18, r24
    4548:	39 07       	cpc	r19, r25
    454a:	58 f0       	brcs	.+22     	; 0x4562 <Tank_out_callback+0x3e>
	{
		// release the semaphore
		xSemaphoreGive(outing_Semaphore );
    454c:	20 e0       	ldi	r18, 0x00	; 0
    454e:	40 e0       	ldi	r20, 0x00	; 0
    4550:	50 e0       	ldi	r21, 0x00	; 0
    4552:	60 e0       	ldi	r22, 0x00	; 0
    4554:	70 e0       	ldi	r23, 0x00	; 0
    4556:	80 91 3d 17 	lds	r24, 0x173D	; 0x80173d <outing_Semaphore>
    455a:	90 91 3e 17 	lds	r25, 0x173E	; 0x80173e <outing_Semaphore+0x1>
    455e:	0c 94 e0 17 	jmp	0x2fc0	; 0x2fc0 <xQueueGenericSend>
    4562:	08 95       	ret

00004564 <Tank_feed_callback>:


static void Tank_feed_callback (void)
{
	
	g_feeding_liters_counter ++ ;
    4564:	80 91 6a 0e 	lds	r24, 0x0E6A	; 0x800e6a <g_feeding_liters_counter>
    4568:	90 91 6b 0e 	lds	r25, 0x0E6B	; 0x800e6b <g_feeding_liters_counter+0x1>
    456c:	01 96       	adiw	r24, 0x01	; 1
    456e:	90 93 6b 0e 	sts	0x0E6B, r25	; 0x800e6b <g_feeding_liters_counter+0x1>
    4572:	80 93 6a 0e 	sts	0x0E6A, r24	; 0x800e6a <g_feeding_liters_counter>
	// keep monitoring the amount of water .
	if (g_feeding_liters_counter >= g_feed_liters )
    4576:	20 91 6a 0e 	lds	r18, 0x0E6A	; 0x800e6a <g_feeding_liters_counter>
    457a:	30 91 6b 0e 	lds	r19, 0x0E6B	; 0x800e6b <g_feeding_liters_counter+0x1>
    457e:	80 91 66 0e 	lds	r24, 0x0E66	; 0x800e66 <g_feed_liters>
    4582:	90 91 67 0e 	lds	r25, 0x0E67	; 0x800e67 <g_feed_liters+0x1>
    4586:	28 17       	cp	r18, r24
    4588:	39 07       	cpc	r19, r25
    458a:	58 f0       	brcs	.+22     	; 0x45a2 <Tank_feed_callback+0x3e>
	{
		// release the semaphore
		xSemaphoreGive(Feeding_Semaphore);
    458c:	20 e0       	ldi	r18, 0x00	; 0
    458e:	40 e0       	ldi	r20, 0x00	; 0
    4590:	50 e0       	ldi	r21, 0x00	; 0
    4592:	60 e0       	ldi	r22, 0x00	; 0
    4594:	70 e0       	ldi	r23, 0x00	; 0
    4596:	80 91 7d 17 	lds	r24, 0x177D	; 0x80177d <Feeding_Semaphore>
    459a:	90 91 7e 17 	lds	r25, 0x177E	; 0x80177e <Feeding_Semaphore+0x1>
    459e:	0c 94 e0 17 	jmp	0x2fc0	; 0x2fc0 <xQueueGenericSend>
    45a2:	08 95       	ret

000045a4 <Tank_operation_init>:



void Tank_operation_init(void)
{
	Flow_rate_init(FLOWRATE_SENSOR_1_TIMER_NUMBER ,FLOWRATE_SENSOR_2_TIMER_NUMBER, Tank_feed_callback , Tank_out_callback);	
    45a4:	22 e9       	ldi	r18, 0x92	; 146
    45a6:	32 e2       	ldi	r19, 0x22	; 34
    45a8:	42 eb       	ldi	r20, 0xB2	; 178
    45aa:	52 e2       	ldi	r21, 0x22	; 34
    45ac:	63 e0       	ldi	r22, 0x03	; 3
    45ae:	81 e0       	ldi	r24, 0x01	; 1
    45b0:	0c 94 25 01 	jmp	0x24a	; 0x24a <Flow_rate_init>
    45b4:	08 95       	ret

000045b6 <Temp_main_err_init>:
*Parameters @ Nothing
*return Nothing 
*/
void (*over_temp_callback)(void) = NULL;
void Temp_main_err_init( void (*callback_over_temp) (void) ){
	over_temp_callback = callback_over_temp;
    45b6:	90 93 6d 0e 	sts	0x0E6D, r25	; 0x800e6d <over_temp_callback+0x1>
    45ba:	80 93 6c 0e 	sts	0x0E6C, r24	; 0x800e6c <over_temp_callback>
    45be:	08 95       	ret

000045c0 <Temp_main>:

void Temp_main(void* pvParameters){
	uint16_t current_temp=0;
	uint8_t count=0;
	//uint16_t x_time = 0;
	temp_init(0);
    45c0:	80 e0       	ldi	r24, 0x00	; 0
    45c2:	0e 94 14 0a 	call	0x1428	; 0x1428 <temp_init>
	over_temp_callback = callback_over_temp;
}

void Temp_main(void* pvParameters){
	uint16_t current_temp=0;
	uint8_t count=0;
    45c6:	10 e0       	ldi	r17, 0x00	; 0
	//uint16_t x_time = 0;
	temp_init(0);
	while (1)
	{
		UART0_puts("Temp task alive\n");
    45c8:	88 e3       	ldi	r24, 0x38	; 56
    45ca:	93 e0       	ldi	r25, 0x03	; 3
    45cc:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <UART0_puts>
		//x_time = Get_millis();
		current_temp = temp_read();
    45d0:	0e 94 16 0a 	call	0x142c	; 0x142c <temp_read>
    45d4:	ec 01       	movw	r28, r24
		//UART0_puts("current temp = ");
 		//UART0_OutUDec(current_temp);
 		//UART0_putc('\n');
		if(current_temp > TEMP_OVER_TEMP){
    45d6:	cd 97       	sbiw	r24, 0x3d	; 61
    45d8:	50 f0       	brcs	.+20     	; 0x45ee <Temp_main+0x2e>
			count++;
    45da:	1f 5f       	subi	r17, 0xFF	; 255
			if(count >= TEMP_OVER_TEMP_STILL_TIME){
    45dc:	16 30       	cpi	r17, 0x06	; 6
    45de:	38 f0       	brcs	.+14     	; 0x45ee <Temp_main+0x2e>
				//callback
				if(over_temp_callback == NULL){
    45e0:	e0 91 6c 0e 	lds	r30, 0x0E6C	; 0x800e6c <over_temp_callback>
    45e4:	f0 91 6d 0e 	lds	r31, 0x0E6D	; 0x800e6d <over_temp_callback+0x1>
    45e8:	30 97       	sbiw	r30, 0x00	; 0
    45ea:	09 f0       	breq	.+2      	; 0x45ee <Temp_main+0x2e>
					
				}
				else
				{
					 over_temp_callback();
    45ec:	19 95       	eicall
				}
			}
		}
		// set temp for LCD 
		RTE_set_Current_temperature(current_temp);
    45ee:	ce 01       	movw	r24, r28
    45f0:	0e 94 79 14 	call	0x28f2	; 0x28f2 <RTE_set_Current_temperature>
		// set the temp for the application .
		RTE_set_app_Current_temperature(current_temp);
    45f4:	ce 01       	movw	r24, r28
    45f6:	0e 94 83 14 	call	0x2906	; 0x2906 <RTE_set_app_Current_temperature>
		//x_time =  Get_millis() - x_time ;
		//UART0_puts("temp ex time = ");
		//UART0_OutUDec(x_time);
		//UART0_putc('\n');
		vTaskDelay(50/portTICK_PERIOD_MS) ;
    45fa:	83 e0       	ldi	r24, 0x03	; 3
    45fc:	90 e0       	ldi	r25, 0x00	; 0
    45fe:	07 da       	rcall	.-3058   	; 0x3a0e <vTaskDelay>
	}
    4600:	e3 cf       	rjmp	.-58     	; 0x45c8 <Temp_main+0x8>

00004602 <System_init>:


gSystemError System_init(void){
	
	gSystemError res = E_OK;
	DIO_init();
    4602:	0e 94 b4 0b 	call	0x1768	; 0x1768 <DIO_init>
	millis_init();	
    4606:	2b d0       	rcall	.+86     	; 0x465e <millis_init>
	Service_error_init();
    4608:	0e 94 9c 0a 	call	0x1538	; 0x1538 <Service_error_init>
	RTE_init();
    460c:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <RTE_init>
	RTOS_sync_init();
    4610:	8e de       	rcall	.-740    	; 0x432e <RTOS_sync_init>
	Inverter_init(UART1,38400,3);
    4612:	23 e0       	ldi	r18, 0x03	; 3
    4614:	40 e0       	ldi	r20, 0x00	; 0
    4616:	56 e9       	ldi	r21, 0x96	; 150
    4618:	60 e0       	ldi	r22, 0x00	; 0
    461a:	70 e0       	ldi	r23, 0x00	; 0
    461c:	81 e0       	ldi	r24, 0x01	; 1
    461e:	0e 94 67 01 	call	0x2ce	; 0x2ce <Inverter_init>
	Lcd_init(UART3,115200,1);
    4622:	21 e0       	ldi	r18, 0x01	; 1
    4624:	40 e0       	ldi	r20, 0x00	; 0
    4626:	52 ec       	ldi	r21, 0xC2	; 194
    4628:	61 e0       	ldi	r22, 0x01	; 1
    462a:	70 e0       	ldi	r23, 0x00	; 0
    462c:	83 e0       	ldi	r24, 0x03	; 3
    462e:	0e 94 8a 01 	call	0x314	; 0x314 <Lcd_init>
	Drum_speed_Tasks_init();         //fixed here because no main task
    4632:	87 de       	rcall	.-754    	; 0x4342 <Drum_speed_Tasks_init>
	Tank_operation_init();
    4634:	b7 df       	rcall	.-146    	; 0x45a4 <Tank_operation_init>
    4636:	80 e0       	ldi	r24, 0x00	; 0
	return res;

    4638:	08 95       	ret

0000463a <crc16_update>:

uint16_t crc16_update(uint16_t crc, uint8_t a)
{
  int i;

  crc ^= a;
    463a:	86 27       	eor	r24, r22
    463c:	28 e0       	ldi	r18, 0x08	; 8
    463e:	30 e0       	ldi	r19, 0x00	; 0
  for (i = 0; i < 8; ++i)
  {
    if (crc & 1)
    4640:	80 ff       	sbrs	r24, 0
    4642:	07 c0       	rjmp	.+14     	; 0x4652 <crc16_update+0x18>
      crc = (crc >> 1) ^ 0xA001;
    4644:	96 95       	lsr	r25
    4646:	87 95       	ror	r24
    4648:	41 e0       	ldi	r20, 0x01	; 1
    464a:	84 27       	eor	r24, r20
    464c:	40 ea       	ldi	r20, 0xA0	; 160
    464e:	94 27       	eor	r25, r20
    4650:	02 c0       	rjmp	.+4      	; 0x4656 <crc16_update+0x1c>
    else
      crc = (crc >> 1);
    4652:	96 95       	lsr	r25
    4654:	87 95       	ror	r24
    4656:	21 50       	subi	r18, 0x01	; 1
    4658:	31 09       	sbc	r19, r1
uint16_t crc16_update(uint16_t crc, uint8_t a)
{
  int i;

  crc ^= a;
  for (i = 0; i < 8; ++i)
    465a:	91 f7       	brne	.-28     	; 0x4640 <crc16_update+0x6>
    else
      crc = (crc >> 1);
  }

  return crc;
}
    465c:	08 95       	ret

0000465e <millis_init>:

//init the timer on ctc mode to calvulate millis
void millis_init()
{
	//CTC mode
	TIMER2_CONGFIG_A = 0x02;
    465e:	82 e0       	ldi	r24, 0x02	; 2
    4660:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
	// Clock/64
	TIMER2_CONGFIG_B = 0x04;
    4664:	84 e0       	ldi	r24, 0x04	; 4
    4666:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7000b1>
    // Load into the output compare
    TIMER2_COMPARE = CTC_MATCH_OVERFLOW;
    466a:	8a ef       	ldi	r24, 0xFA	; 250
    466c:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7000b3>
    // Enable the compare match interrupt
    SET_BIT(TIMER2_INTERUPT, TIMER2_COMPARE_INT);
    4670:	e0 e7       	ldi	r30, 0x70	; 112
    4672:	f0 e0       	ldi	r31, 0x00	; 0
    4674:	80 81       	ld	r24, Z
    4676:	82 60       	ori	r24, 0x02	; 2
    4678:	80 83       	st	Z, r24
    467a:	08 95       	ret

0000467c <Get_millis>:
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    467c:	f8 94       	cli
    unsigned long millis_return;

    // Ensure this cannot be disrupted
    ATOMIC_BLOCK(ATOMIC_FORCEON) {
    	// copy the ISR counter
        millis_return = timer1_millis;
    467e:	60 91 7f 17 	lds	r22, 0x177F	; 0x80177f <timer1_millis>
    4682:	70 91 80 17 	lds	r23, 0x1780	; 0x801780 <timer1_millis+0x1>
    4686:	80 91 81 17 	lds	r24, 0x1781	; 0x801781 <timer1_millis+0x2>
    468a:	90 91 82 17 	lds	r25, 0x1782	; 0x801782 <timer1_millis+0x3>
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
    468e:	78 94       	sei
    }

    return millis_return;
}//Get_millis
    4690:	08 95       	ret

00004692 <__vector_13>:



ISR (TIMER2_COMPA_vect)
{
    4692:	1f 92       	push	r1
    4694:	0f 92       	push	r0
    4696:	0f b6       	in	r0, 0x3f	; 63
    4698:	0f 92       	push	r0
    469a:	11 24       	eor	r1, r1
    469c:	8f 93       	push	r24
    469e:	9f 93       	push	r25
    46a0:	af 93       	push	r26
    46a2:	bf 93       	push	r27
	//MILLI SEC
    timer1_millis++;
    46a4:	80 91 7f 17 	lds	r24, 0x177F	; 0x80177f <timer1_millis>
    46a8:	90 91 80 17 	lds	r25, 0x1780	; 0x801780 <timer1_millis+0x1>
    46ac:	a0 91 81 17 	lds	r26, 0x1781	; 0x801781 <timer1_millis+0x2>
    46b0:	b0 91 82 17 	lds	r27, 0x1782	; 0x801782 <timer1_millis+0x3>
    46b4:	01 96       	adiw	r24, 0x01	; 1
    46b6:	a1 1d       	adc	r26, r1
    46b8:	b1 1d       	adc	r27, r1
    46ba:	80 93 7f 17 	sts	0x177F, r24	; 0x80177f <timer1_millis>
    46be:	90 93 80 17 	sts	0x1780, r25	; 0x801780 <timer1_millis+0x1>
    46c2:	a0 93 81 17 	sts	0x1781, r26	; 0x801781 <timer1_millis+0x2>
    46c6:	b0 93 82 17 	sts	0x1782, r27	; 0x801782 <timer1_millis+0x3>
}//ISR
    46ca:	bf 91       	pop	r27
    46cc:	af 91       	pop	r26
    46ce:	9f 91       	pop	r25
    46d0:	8f 91       	pop	r24
    46d2:	0f 90       	pop	r0
    46d4:	0f be       	out	0x3f, r0	; 63
    46d6:	0f 90       	pop	r0
    46d8:	1f 90       	pop	r1
    46da:	18 95       	reti

000046dc <__subsf3>:
    46dc:	50 58       	subi	r21, 0x80	; 128

000046de <__addsf3>:
    46de:	bb 27       	eor	r27, r27
    46e0:	aa 27       	eor	r26, r26
    46e2:	0e d0       	rcall	.+28     	; 0x4700 <__addsf3x>
    46e4:	48 c1       	rjmp	.+656    	; 0x4976 <__fp_round>
    46e6:	39 d1       	rcall	.+626    	; 0x495a <__fp_pscA>
    46e8:	30 f0       	brcs	.+12     	; 0x46f6 <__addsf3+0x18>
    46ea:	3e d1       	rcall	.+636    	; 0x4968 <__fp_pscB>
    46ec:	20 f0       	brcs	.+8      	; 0x46f6 <__addsf3+0x18>
    46ee:	31 f4       	brne	.+12     	; 0x46fc <__addsf3+0x1e>
    46f0:	9f 3f       	cpi	r25, 0xFF	; 255
    46f2:	11 f4       	brne	.+4      	; 0x46f8 <__addsf3+0x1a>
    46f4:	1e f4       	brtc	.+6      	; 0x46fc <__addsf3+0x1e>
    46f6:	2e c1       	rjmp	.+604    	; 0x4954 <__fp_nan>
    46f8:	0e f4       	brtc	.+2      	; 0x46fc <__addsf3+0x1e>
    46fa:	e0 95       	com	r30
    46fc:	e7 fb       	bst	r30, 7
    46fe:	24 c1       	rjmp	.+584    	; 0x4948 <__fp_inf>

00004700 <__addsf3x>:
    4700:	e9 2f       	mov	r30, r25
    4702:	4a d1       	rcall	.+660    	; 0x4998 <__fp_split3>
    4704:	80 f3       	brcs	.-32     	; 0x46e6 <__addsf3+0x8>
    4706:	ba 17       	cp	r27, r26
    4708:	62 07       	cpc	r22, r18
    470a:	73 07       	cpc	r23, r19
    470c:	84 07       	cpc	r24, r20
    470e:	95 07       	cpc	r25, r21
    4710:	18 f0       	brcs	.+6      	; 0x4718 <__addsf3x+0x18>
    4712:	71 f4       	brne	.+28     	; 0x4730 <__addsf3x+0x30>
    4714:	9e f5       	brtc	.+102    	; 0x477c <__addsf3x+0x7c>
    4716:	62 c1       	rjmp	.+708    	; 0x49dc <__fp_zero>
    4718:	0e f4       	brtc	.+2      	; 0x471c <__addsf3x+0x1c>
    471a:	e0 95       	com	r30
    471c:	0b 2e       	mov	r0, r27
    471e:	ba 2f       	mov	r27, r26
    4720:	a0 2d       	mov	r26, r0
    4722:	0b 01       	movw	r0, r22
    4724:	b9 01       	movw	r22, r18
    4726:	90 01       	movw	r18, r0
    4728:	0c 01       	movw	r0, r24
    472a:	ca 01       	movw	r24, r20
    472c:	a0 01       	movw	r20, r0
    472e:	11 24       	eor	r1, r1
    4730:	ff 27       	eor	r31, r31
    4732:	59 1b       	sub	r21, r25
    4734:	99 f0       	breq	.+38     	; 0x475c <__addsf3x+0x5c>
    4736:	59 3f       	cpi	r21, 0xF9	; 249
    4738:	50 f4       	brcc	.+20     	; 0x474e <__addsf3x+0x4e>
    473a:	50 3e       	cpi	r21, 0xE0	; 224
    473c:	68 f1       	brcs	.+90     	; 0x4798 <__addsf3x+0x98>
    473e:	1a 16       	cp	r1, r26
    4740:	f0 40       	sbci	r31, 0x00	; 0
    4742:	a2 2f       	mov	r26, r18
    4744:	23 2f       	mov	r18, r19
    4746:	34 2f       	mov	r19, r20
    4748:	44 27       	eor	r20, r20
    474a:	58 5f       	subi	r21, 0xF8	; 248
    474c:	f3 cf       	rjmp	.-26     	; 0x4734 <__addsf3x+0x34>
    474e:	46 95       	lsr	r20
    4750:	37 95       	ror	r19
    4752:	27 95       	ror	r18
    4754:	a7 95       	ror	r26
    4756:	f0 40       	sbci	r31, 0x00	; 0
    4758:	53 95       	inc	r21
    475a:	c9 f7       	brne	.-14     	; 0x474e <__addsf3x+0x4e>
    475c:	7e f4       	brtc	.+30     	; 0x477c <__addsf3x+0x7c>
    475e:	1f 16       	cp	r1, r31
    4760:	ba 0b       	sbc	r27, r26
    4762:	62 0b       	sbc	r22, r18
    4764:	73 0b       	sbc	r23, r19
    4766:	84 0b       	sbc	r24, r20
    4768:	ba f0       	brmi	.+46     	; 0x4798 <__addsf3x+0x98>
    476a:	91 50       	subi	r25, 0x01	; 1
    476c:	a1 f0       	breq	.+40     	; 0x4796 <__addsf3x+0x96>
    476e:	ff 0f       	add	r31, r31
    4770:	bb 1f       	adc	r27, r27
    4772:	66 1f       	adc	r22, r22
    4774:	77 1f       	adc	r23, r23
    4776:	88 1f       	adc	r24, r24
    4778:	c2 f7       	brpl	.-16     	; 0x476a <__addsf3x+0x6a>
    477a:	0e c0       	rjmp	.+28     	; 0x4798 <__addsf3x+0x98>
    477c:	ba 0f       	add	r27, r26
    477e:	62 1f       	adc	r22, r18
    4780:	73 1f       	adc	r23, r19
    4782:	84 1f       	adc	r24, r20
    4784:	48 f4       	brcc	.+18     	; 0x4798 <__addsf3x+0x98>
    4786:	87 95       	ror	r24
    4788:	77 95       	ror	r23
    478a:	67 95       	ror	r22
    478c:	b7 95       	ror	r27
    478e:	f7 95       	ror	r31
    4790:	9e 3f       	cpi	r25, 0xFE	; 254
    4792:	08 f0       	brcs	.+2      	; 0x4796 <__addsf3x+0x96>
    4794:	b3 cf       	rjmp	.-154    	; 0x46fc <__addsf3+0x1e>
    4796:	93 95       	inc	r25
    4798:	88 0f       	add	r24, r24
    479a:	08 f0       	brcs	.+2      	; 0x479e <__addsf3x+0x9e>
    479c:	99 27       	eor	r25, r25
    479e:	ee 0f       	add	r30, r30
    47a0:	97 95       	ror	r25
    47a2:	87 95       	ror	r24
    47a4:	08 95       	ret

000047a6 <__divsf3>:
    47a6:	0c d0       	rcall	.+24     	; 0x47c0 <__divsf3x>
    47a8:	e6 c0       	rjmp	.+460    	; 0x4976 <__fp_round>
    47aa:	de d0       	rcall	.+444    	; 0x4968 <__fp_pscB>
    47ac:	40 f0       	brcs	.+16     	; 0x47be <__divsf3+0x18>
    47ae:	d5 d0       	rcall	.+426    	; 0x495a <__fp_pscA>
    47b0:	30 f0       	brcs	.+12     	; 0x47be <__divsf3+0x18>
    47b2:	21 f4       	brne	.+8      	; 0x47bc <__divsf3+0x16>
    47b4:	5f 3f       	cpi	r21, 0xFF	; 255
    47b6:	19 f0       	breq	.+6      	; 0x47be <__divsf3+0x18>
    47b8:	c7 c0       	rjmp	.+398    	; 0x4948 <__fp_inf>
    47ba:	51 11       	cpse	r21, r1
    47bc:	10 c1       	rjmp	.+544    	; 0x49de <__fp_szero>
    47be:	ca c0       	rjmp	.+404    	; 0x4954 <__fp_nan>

000047c0 <__divsf3x>:
    47c0:	eb d0       	rcall	.+470    	; 0x4998 <__fp_split3>
    47c2:	98 f3       	brcs	.-26     	; 0x47aa <__divsf3+0x4>

000047c4 <__divsf3_pse>:
    47c4:	99 23       	and	r25, r25
    47c6:	c9 f3       	breq	.-14     	; 0x47ba <__divsf3+0x14>
    47c8:	55 23       	and	r21, r21
    47ca:	b1 f3       	breq	.-20     	; 0x47b8 <__divsf3+0x12>
    47cc:	95 1b       	sub	r25, r21
    47ce:	55 0b       	sbc	r21, r21
    47d0:	bb 27       	eor	r27, r27
    47d2:	aa 27       	eor	r26, r26
    47d4:	62 17       	cp	r22, r18
    47d6:	73 07       	cpc	r23, r19
    47d8:	84 07       	cpc	r24, r20
    47da:	38 f0       	brcs	.+14     	; 0x47ea <__divsf3_pse+0x26>
    47dc:	9f 5f       	subi	r25, 0xFF	; 255
    47de:	5f 4f       	sbci	r21, 0xFF	; 255
    47e0:	22 0f       	add	r18, r18
    47e2:	33 1f       	adc	r19, r19
    47e4:	44 1f       	adc	r20, r20
    47e6:	aa 1f       	adc	r26, r26
    47e8:	a9 f3       	breq	.-22     	; 0x47d4 <__divsf3_pse+0x10>
    47ea:	33 d0       	rcall	.+102    	; 0x4852 <__divsf3_pse+0x8e>
    47ec:	0e 2e       	mov	r0, r30
    47ee:	3a f0       	brmi	.+14     	; 0x47fe <__divsf3_pse+0x3a>
    47f0:	e0 e8       	ldi	r30, 0x80	; 128
    47f2:	30 d0       	rcall	.+96     	; 0x4854 <__divsf3_pse+0x90>
    47f4:	91 50       	subi	r25, 0x01	; 1
    47f6:	50 40       	sbci	r21, 0x00	; 0
    47f8:	e6 95       	lsr	r30
    47fa:	00 1c       	adc	r0, r0
    47fc:	ca f7       	brpl	.-14     	; 0x47f0 <__divsf3_pse+0x2c>
    47fe:	29 d0       	rcall	.+82     	; 0x4852 <__divsf3_pse+0x8e>
    4800:	fe 2f       	mov	r31, r30
    4802:	27 d0       	rcall	.+78     	; 0x4852 <__divsf3_pse+0x8e>
    4804:	66 0f       	add	r22, r22
    4806:	77 1f       	adc	r23, r23
    4808:	88 1f       	adc	r24, r24
    480a:	bb 1f       	adc	r27, r27
    480c:	26 17       	cp	r18, r22
    480e:	37 07       	cpc	r19, r23
    4810:	48 07       	cpc	r20, r24
    4812:	ab 07       	cpc	r26, r27
    4814:	b0 e8       	ldi	r27, 0x80	; 128
    4816:	09 f0       	breq	.+2      	; 0x481a <__divsf3_pse+0x56>
    4818:	bb 0b       	sbc	r27, r27
    481a:	80 2d       	mov	r24, r0
    481c:	bf 01       	movw	r22, r30
    481e:	ff 27       	eor	r31, r31
    4820:	93 58       	subi	r25, 0x83	; 131
    4822:	5f 4f       	sbci	r21, 0xFF	; 255
    4824:	2a f0       	brmi	.+10     	; 0x4830 <__divsf3_pse+0x6c>
    4826:	9e 3f       	cpi	r25, 0xFE	; 254
    4828:	51 05       	cpc	r21, r1
    482a:	68 f0       	brcs	.+26     	; 0x4846 <__divsf3_pse+0x82>
    482c:	8d c0       	rjmp	.+282    	; 0x4948 <__fp_inf>
    482e:	d7 c0       	rjmp	.+430    	; 0x49de <__fp_szero>
    4830:	5f 3f       	cpi	r21, 0xFF	; 255
    4832:	ec f3       	brlt	.-6      	; 0x482e <__divsf3_pse+0x6a>
    4834:	98 3e       	cpi	r25, 0xE8	; 232
    4836:	dc f3       	brlt	.-10     	; 0x482e <__divsf3_pse+0x6a>
    4838:	86 95       	lsr	r24
    483a:	77 95       	ror	r23
    483c:	67 95       	ror	r22
    483e:	b7 95       	ror	r27
    4840:	f7 95       	ror	r31
    4842:	9f 5f       	subi	r25, 0xFF	; 255
    4844:	c9 f7       	brne	.-14     	; 0x4838 <__divsf3_pse+0x74>
    4846:	88 0f       	add	r24, r24
    4848:	91 1d       	adc	r25, r1
    484a:	96 95       	lsr	r25
    484c:	87 95       	ror	r24
    484e:	97 f9       	bld	r25, 7
    4850:	08 95       	ret
    4852:	e1 e0       	ldi	r30, 0x01	; 1
    4854:	66 0f       	add	r22, r22
    4856:	77 1f       	adc	r23, r23
    4858:	88 1f       	adc	r24, r24
    485a:	bb 1f       	adc	r27, r27
    485c:	62 17       	cp	r22, r18
    485e:	73 07       	cpc	r23, r19
    4860:	84 07       	cpc	r24, r20
    4862:	ba 07       	cpc	r27, r26
    4864:	20 f0       	brcs	.+8      	; 0x486e <__divsf3_pse+0xaa>
    4866:	62 1b       	sub	r22, r18
    4868:	73 0b       	sbc	r23, r19
    486a:	84 0b       	sbc	r24, r20
    486c:	ba 0b       	sbc	r27, r26
    486e:	ee 1f       	adc	r30, r30
    4870:	88 f7       	brcc	.-30     	; 0x4854 <__divsf3_pse+0x90>
    4872:	e0 95       	com	r30
    4874:	08 95       	ret

00004876 <__fixunssfsi>:
    4876:	98 d0       	rcall	.+304    	; 0x49a8 <__fp_splitA>
    4878:	88 f0       	brcs	.+34     	; 0x489c <__fixunssfsi+0x26>
    487a:	9f 57       	subi	r25, 0x7F	; 127
    487c:	90 f0       	brcs	.+36     	; 0x48a2 <__fixunssfsi+0x2c>
    487e:	b9 2f       	mov	r27, r25
    4880:	99 27       	eor	r25, r25
    4882:	b7 51       	subi	r27, 0x17	; 23
    4884:	a0 f0       	brcs	.+40     	; 0x48ae <__fixunssfsi+0x38>
    4886:	d1 f0       	breq	.+52     	; 0x48bc <__fixunssfsi+0x46>
    4888:	66 0f       	add	r22, r22
    488a:	77 1f       	adc	r23, r23
    488c:	88 1f       	adc	r24, r24
    488e:	99 1f       	adc	r25, r25
    4890:	1a f0       	brmi	.+6      	; 0x4898 <__fixunssfsi+0x22>
    4892:	ba 95       	dec	r27
    4894:	c9 f7       	brne	.-14     	; 0x4888 <__fixunssfsi+0x12>
    4896:	12 c0       	rjmp	.+36     	; 0x48bc <__fixunssfsi+0x46>
    4898:	b1 30       	cpi	r27, 0x01	; 1
    489a:	81 f0       	breq	.+32     	; 0x48bc <__fixunssfsi+0x46>
    489c:	9f d0       	rcall	.+318    	; 0x49dc <__fp_zero>
    489e:	b1 e0       	ldi	r27, 0x01	; 1
    48a0:	08 95       	ret
    48a2:	9c c0       	rjmp	.+312    	; 0x49dc <__fp_zero>
    48a4:	67 2f       	mov	r22, r23
    48a6:	78 2f       	mov	r23, r24
    48a8:	88 27       	eor	r24, r24
    48aa:	b8 5f       	subi	r27, 0xF8	; 248
    48ac:	39 f0       	breq	.+14     	; 0x48bc <__fixunssfsi+0x46>
    48ae:	b9 3f       	cpi	r27, 0xF9	; 249
    48b0:	cc f3       	brlt	.-14     	; 0x48a4 <__fixunssfsi+0x2e>
    48b2:	86 95       	lsr	r24
    48b4:	77 95       	ror	r23
    48b6:	67 95       	ror	r22
    48b8:	b3 95       	inc	r27
    48ba:	d9 f7       	brne	.-10     	; 0x48b2 <__fixunssfsi+0x3c>
    48bc:	3e f4       	brtc	.+14     	; 0x48cc <__fixunssfsi+0x56>
    48be:	90 95       	com	r25
    48c0:	80 95       	com	r24
    48c2:	70 95       	com	r23
    48c4:	61 95       	neg	r22
    48c6:	7f 4f       	sbci	r23, 0xFF	; 255
    48c8:	8f 4f       	sbci	r24, 0xFF	; 255
    48ca:	9f 4f       	sbci	r25, 0xFF	; 255
    48cc:	08 95       	ret

000048ce <__floatunsisf>:
    48ce:	e8 94       	clt
    48d0:	09 c0       	rjmp	.+18     	; 0x48e4 <__floatsisf+0x12>

000048d2 <__floatsisf>:
    48d2:	97 fb       	bst	r25, 7
    48d4:	3e f4       	brtc	.+14     	; 0x48e4 <__floatsisf+0x12>
    48d6:	90 95       	com	r25
    48d8:	80 95       	com	r24
    48da:	70 95       	com	r23
    48dc:	61 95       	neg	r22
    48de:	7f 4f       	sbci	r23, 0xFF	; 255
    48e0:	8f 4f       	sbci	r24, 0xFF	; 255
    48e2:	9f 4f       	sbci	r25, 0xFF	; 255
    48e4:	99 23       	and	r25, r25
    48e6:	a9 f0       	breq	.+42     	; 0x4912 <__floatsisf+0x40>
    48e8:	f9 2f       	mov	r31, r25
    48ea:	96 e9       	ldi	r25, 0x96	; 150
    48ec:	bb 27       	eor	r27, r27
    48ee:	93 95       	inc	r25
    48f0:	f6 95       	lsr	r31
    48f2:	87 95       	ror	r24
    48f4:	77 95       	ror	r23
    48f6:	67 95       	ror	r22
    48f8:	b7 95       	ror	r27
    48fa:	f1 11       	cpse	r31, r1
    48fc:	f8 cf       	rjmp	.-16     	; 0x48ee <__floatsisf+0x1c>
    48fe:	fa f4       	brpl	.+62     	; 0x493e <__floatsisf+0x6c>
    4900:	bb 0f       	add	r27, r27
    4902:	11 f4       	brne	.+4      	; 0x4908 <__floatsisf+0x36>
    4904:	60 ff       	sbrs	r22, 0
    4906:	1b c0       	rjmp	.+54     	; 0x493e <__floatsisf+0x6c>
    4908:	6f 5f       	subi	r22, 0xFF	; 255
    490a:	7f 4f       	sbci	r23, 0xFF	; 255
    490c:	8f 4f       	sbci	r24, 0xFF	; 255
    490e:	9f 4f       	sbci	r25, 0xFF	; 255
    4910:	16 c0       	rjmp	.+44     	; 0x493e <__floatsisf+0x6c>
    4912:	88 23       	and	r24, r24
    4914:	11 f0       	breq	.+4      	; 0x491a <__floatsisf+0x48>
    4916:	96 e9       	ldi	r25, 0x96	; 150
    4918:	11 c0       	rjmp	.+34     	; 0x493c <__floatsisf+0x6a>
    491a:	77 23       	and	r23, r23
    491c:	21 f0       	breq	.+8      	; 0x4926 <__floatsisf+0x54>
    491e:	9e e8       	ldi	r25, 0x8E	; 142
    4920:	87 2f       	mov	r24, r23
    4922:	76 2f       	mov	r23, r22
    4924:	05 c0       	rjmp	.+10     	; 0x4930 <__floatsisf+0x5e>
    4926:	66 23       	and	r22, r22
    4928:	71 f0       	breq	.+28     	; 0x4946 <__floatsisf+0x74>
    492a:	96 e8       	ldi	r25, 0x86	; 134
    492c:	86 2f       	mov	r24, r22
    492e:	70 e0       	ldi	r23, 0x00	; 0
    4930:	60 e0       	ldi	r22, 0x00	; 0
    4932:	2a f0       	brmi	.+10     	; 0x493e <__floatsisf+0x6c>
    4934:	9a 95       	dec	r25
    4936:	66 0f       	add	r22, r22
    4938:	77 1f       	adc	r23, r23
    493a:	88 1f       	adc	r24, r24
    493c:	da f7       	brpl	.-10     	; 0x4934 <__floatsisf+0x62>
    493e:	88 0f       	add	r24, r24
    4940:	96 95       	lsr	r25
    4942:	87 95       	ror	r24
    4944:	97 f9       	bld	r25, 7
    4946:	08 95       	ret

00004948 <__fp_inf>:
    4948:	97 f9       	bld	r25, 7
    494a:	9f 67       	ori	r25, 0x7F	; 127
    494c:	80 e8       	ldi	r24, 0x80	; 128
    494e:	70 e0       	ldi	r23, 0x00	; 0
    4950:	60 e0       	ldi	r22, 0x00	; 0
    4952:	08 95       	ret

00004954 <__fp_nan>:
    4954:	9f ef       	ldi	r25, 0xFF	; 255
    4956:	80 ec       	ldi	r24, 0xC0	; 192
    4958:	08 95       	ret

0000495a <__fp_pscA>:
    495a:	00 24       	eor	r0, r0
    495c:	0a 94       	dec	r0
    495e:	16 16       	cp	r1, r22
    4960:	17 06       	cpc	r1, r23
    4962:	18 06       	cpc	r1, r24
    4964:	09 06       	cpc	r0, r25
    4966:	08 95       	ret

00004968 <__fp_pscB>:
    4968:	00 24       	eor	r0, r0
    496a:	0a 94       	dec	r0
    496c:	12 16       	cp	r1, r18
    496e:	13 06       	cpc	r1, r19
    4970:	14 06       	cpc	r1, r20
    4972:	05 06       	cpc	r0, r21
    4974:	08 95       	ret

00004976 <__fp_round>:
    4976:	09 2e       	mov	r0, r25
    4978:	03 94       	inc	r0
    497a:	00 0c       	add	r0, r0
    497c:	11 f4       	brne	.+4      	; 0x4982 <__fp_round+0xc>
    497e:	88 23       	and	r24, r24
    4980:	52 f0       	brmi	.+20     	; 0x4996 <__fp_round+0x20>
    4982:	bb 0f       	add	r27, r27
    4984:	40 f4       	brcc	.+16     	; 0x4996 <__fp_round+0x20>
    4986:	bf 2b       	or	r27, r31
    4988:	11 f4       	brne	.+4      	; 0x498e <__fp_round+0x18>
    498a:	60 ff       	sbrs	r22, 0
    498c:	04 c0       	rjmp	.+8      	; 0x4996 <__fp_round+0x20>
    498e:	6f 5f       	subi	r22, 0xFF	; 255
    4990:	7f 4f       	sbci	r23, 0xFF	; 255
    4992:	8f 4f       	sbci	r24, 0xFF	; 255
    4994:	9f 4f       	sbci	r25, 0xFF	; 255
    4996:	08 95       	ret

00004998 <__fp_split3>:
    4998:	57 fd       	sbrc	r21, 7
    499a:	90 58       	subi	r25, 0x80	; 128
    499c:	44 0f       	add	r20, r20
    499e:	55 1f       	adc	r21, r21
    49a0:	59 f0       	breq	.+22     	; 0x49b8 <__fp_splitA+0x10>
    49a2:	5f 3f       	cpi	r21, 0xFF	; 255
    49a4:	71 f0       	breq	.+28     	; 0x49c2 <__fp_splitA+0x1a>
    49a6:	47 95       	ror	r20

000049a8 <__fp_splitA>:
    49a8:	88 0f       	add	r24, r24
    49aa:	97 fb       	bst	r25, 7
    49ac:	99 1f       	adc	r25, r25
    49ae:	61 f0       	breq	.+24     	; 0x49c8 <__fp_splitA+0x20>
    49b0:	9f 3f       	cpi	r25, 0xFF	; 255
    49b2:	79 f0       	breq	.+30     	; 0x49d2 <__fp_splitA+0x2a>
    49b4:	87 95       	ror	r24
    49b6:	08 95       	ret
    49b8:	12 16       	cp	r1, r18
    49ba:	13 06       	cpc	r1, r19
    49bc:	14 06       	cpc	r1, r20
    49be:	55 1f       	adc	r21, r21
    49c0:	f2 cf       	rjmp	.-28     	; 0x49a6 <__fp_split3+0xe>
    49c2:	46 95       	lsr	r20
    49c4:	f1 df       	rcall	.-30     	; 0x49a8 <__fp_splitA>
    49c6:	08 c0       	rjmp	.+16     	; 0x49d8 <__fp_splitA+0x30>
    49c8:	16 16       	cp	r1, r22
    49ca:	17 06       	cpc	r1, r23
    49cc:	18 06       	cpc	r1, r24
    49ce:	99 1f       	adc	r25, r25
    49d0:	f1 cf       	rjmp	.-30     	; 0x49b4 <__fp_splitA+0xc>
    49d2:	86 95       	lsr	r24
    49d4:	71 05       	cpc	r23, r1
    49d6:	61 05       	cpc	r22, r1
    49d8:	08 94       	sec
    49da:	08 95       	ret

000049dc <__fp_zero>:
    49dc:	e8 94       	clt

000049de <__fp_szero>:
    49de:	bb 27       	eor	r27, r27
    49e0:	66 27       	eor	r22, r22
    49e2:	77 27       	eor	r23, r23
    49e4:	cb 01       	movw	r24, r22
    49e6:	97 f9       	bld	r25, 7
    49e8:	08 95       	ret

000049ea <__mulsf3>:
    49ea:	0b d0       	rcall	.+22     	; 0x4a02 <__mulsf3x>
    49ec:	c4 cf       	rjmp	.-120    	; 0x4976 <__fp_round>
    49ee:	b5 df       	rcall	.-150    	; 0x495a <__fp_pscA>
    49f0:	28 f0       	brcs	.+10     	; 0x49fc <__mulsf3+0x12>
    49f2:	ba df       	rcall	.-140    	; 0x4968 <__fp_pscB>
    49f4:	18 f0       	brcs	.+6      	; 0x49fc <__mulsf3+0x12>
    49f6:	95 23       	and	r25, r21
    49f8:	09 f0       	breq	.+2      	; 0x49fc <__mulsf3+0x12>
    49fa:	a6 cf       	rjmp	.-180    	; 0x4948 <__fp_inf>
    49fc:	ab cf       	rjmp	.-170    	; 0x4954 <__fp_nan>
    49fe:	11 24       	eor	r1, r1
    4a00:	ee cf       	rjmp	.-36     	; 0x49de <__fp_szero>

00004a02 <__mulsf3x>:
    4a02:	ca df       	rcall	.-108    	; 0x4998 <__fp_split3>
    4a04:	a0 f3       	brcs	.-24     	; 0x49ee <__mulsf3+0x4>

00004a06 <__mulsf3_pse>:
    4a06:	95 9f       	mul	r25, r21
    4a08:	d1 f3       	breq	.-12     	; 0x49fe <__mulsf3+0x14>
    4a0a:	95 0f       	add	r25, r21
    4a0c:	50 e0       	ldi	r21, 0x00	; 0
    4a0e:	55 1f       	adc	r21, r21
    4a10:	62 9f       	mul	r22, r18
    4a12:	f0 01       	movw	r30, r0
    4a14:	72 9f       	mul	r23, r18
    4a16:	bb 27       	eor	r27, r27
    4a18:	f0 0d       	add	r31, r0
    4a1a:	b1 1d       	adc	r27, r1
    4a1c:	63 9f       	mul	r22, r19
    4a1e:	aa 27       	eor	r26, r26
    4a20:	f0 0d       	add	r31, r0
    4a22:	b1 1d       	adc	r27, r1
    4a24:	aa 1f       	adc	r26, r26
    4a26:	64 9f       	mul	r22, r20
    4a28:	66 27       	eor	r22, r22
    4a2a:	b0 0d       	add	r27, r0
    4a2c:	a1 1d       	adc	r26, r1
    4a2e:	66 1f       	adc	r22, r22
    4a30:	82 9f       	mul	r24, r18
    4a32:	22 27       	eor	r18, r18
    4a34:	b0 0d       	add	r27, r0
    4a36:	a1 1d       	adc	r26, r1
    4a38:	62 1f       	adc	r22, r18
    4a3a:	73 9f       	mul	r23, r19
    4a3c:	b0 0d       	add	r27, r0
    4a3e:	a1 1d       	adc	r26, r1
    4a40:	62 1f       	adc	r22, r18
    4a42:	83 9f       	mul	r24, r19
    4a44:	a0 0d       	add	r26, r0
    4a46:	61 1d       	adc	r22, r1
    4a48:	22 1f       	adc	r18, r18
    4a4a:	74 9f       	mul	r23, r20
    4a4c:	33 27       	eor	r19, r19
    4a4e:	a0 0d       	add	r26, r0
    4a50:	61 1d       	adc	r22, r1
    4a52:	23 1f       	adc	r18, r19
    4a54:	84 9f       	mul	r24, r20
    4a56:	60 0d       	add	r22, r0
    4a58:	21 1d       	adc	r18, r1
    4a5a:	82 2f       	mov	r24, r18
    4a5c:	76 2f       	mov	r23, r22
    4a5e:	6a 2f       	mov	r22, r26
    4a60:	11 24       	eor	r1, r1
    4a62:	9f 57       	subi	r25, 0x7F	; 127
    4a64:	50 40       	sbci	r21, 0x00	; 0
    4a66:	8a f0       	brmi	.+34     	; 0x4a8a <__mulsf3_pse+0x84>
    4a68:	e1 f0       	breq	.+56     	; 0x4aa2 <__mulsf3_pse+0x9c>
    4a6a:	88 23       	and	r24, r24
    4a6c:	4a f0       	brmi	.+18     	; 0x4a80 <__mulsf3_pse+0x7a>
    4a6e:	ee 0f       	add	r30, r30
    4a70:	ff 1f       	adc	r31, r31
    4a72:	bb 1f       	adc	r27, r27
    4a74:	66 1f       	adc	r22, r22
    4a76:	77 1f       	adc	r23, r23
    4a78:	88 1f       	adc	r24, r24
    4a7a:	91 50       	subi	r25, 0x01	; 1
    4a7c:	50 40       	sbci	r21, 0x00	; 0
    4a7e:	a9 f7       	brne	.-22     	; 0x4a6a <__mulsf3_pse+0x64>
    4a80:	9e 3f       	cpi	r25, 0xFE	; 254
    4a82:	51 05       	cpc	r21, r1
    4a84:	70 f0       	brcs	.+28     	; 0x4aa2 <__mulsf3_pse+0x9c>
    4a86:	60 cf       	rjmp	.-320    	; 0x4948 <__fp_inf>
    4a88:	aa cf       	rjmp	.-172    	; 0x49de <__fp_szero>
    4a8a:	5f 3f       	cpi	r21, 0xFF	; 255
    4a8c:	ec f3       	brlt	.-6      	; 0x4a88 <__mulsf3_pse+0x82>
    4a8e:	98 3e       	cpi	r25, 0xE8	; 232
    4a90:	dc f3       	brlt	.-10     	; 0x4a88 <__mulsf3_pse+0x82>
    4a92:	86 95       	lsr	r24
    4a94:	77 95       	ror	r23
    4a96:	67 95       	ror	r22
    4a98:	b7 95       	ror	r27
    4a9a:	f7 95       	ror	r31
    4a9c:	e7 95       	ror	r30
    4a9e:	9f 5f       	subi	r25, 0xFF	; 255
    4aa0:	c1 f7       	brne	.-16     	; 0x4a92 <__mulsf3_pse+0x8c>
    4aa2:	fe 2b       	or	r31, r30
    4aa4:	88 0f       	add	r24, r24
    4aa6:	91 1d       	adc	r25, r1
    4aa8:	96 95       	lsr	r25
    4aaa:	87 95       	ror	r24
    4aac:	97 f9       	bld	r25, 7
    4aae:	08 95       	ret

00004ab0 <pow>:
    4ab0:	fa 01       	movw	r30, r20
    4ab2:	ee 0f       	add	r30, r30
    4ab4:	ff 1f       	adc	r31, r31
    4ab6:	30 96       	adiw	r30, 0x00	; 0
    4ab8:	21 05       	cpc	r18, r1
    4aba:	31 05       	cpc	r19, r1
    4abc:	99 f1       	breq	.+102    	; 0x4b24 <pow+0x74>
    4abe:	61 15       	cp	r22, r1
    4ac0:	71 05       	cpc	r23, r1
    4ac2:	61 f4       	brne	.+24     	; 0x4adc <pow+0x2c>
    4ac4:	80 38       	cpi	r24, 0x80	; 128
    4ac6:	bf e3       	ldi	r27, 0x3F	; 63
    4ac8:	9b 07       	cpc	r25, r27
    4aca:	49 f1       	breq	.+82     	; 0x4b1e <pow+0x6e>
    4acc:	68 94       	set
    4ace:	90 38       	cpi	r25, 0x80	; 128
    4ad0:	81 05       	cpc	r24, r1
    4ad2:	61 f0       	breq	.+24     	; 0x4aec <pow+0x3c>
    4ad4:	80 38       	cpi	r24, 0x80	; 128
    4ad6:	bf ef       	ldi	r27, 0xFF	; 255
    4ad8:	9b 07       	cpc	r25, r27
    4ada:	41 f0       	breq	.+16     	; 0x4aec <pow+0x3c>
    4adc:	99 23       	and	r25, r25
    4ade:	42 f5       	brpl	.+80     	; 0x4b30 <pow+0x80>
    4ae0:	ff 3f       	cpi	r31, 0xFF	; 255
    4ae2:	e1 05       	cpc	r30, r1
    4ae4:	31 05       	cpc	r19, r1
    4ae6:	21 05       	cpc	r18, r1
    4ae8:	11 f1       	breq	.+68     	; 0x4b2e <pow+0x7e>
    4aea:	e8 94       	clt
    4aec:	08 94       	sec
    4aee:	e7 95       	ror	r30
    4af0:	d9 01       	movw	r26, r18
    4af2:	aa 23       	and	r26, r26
    4af4:	29 f4       	brne	.+10     	; 0x4b00 <pow+0x50>
    4af6:	ab 2f       	mov	r26, r27
    4af8:	be 2f       	mov	r27, r30
    4afa:	f8 5f       	subi	r31, 0xF8	; 248
    4afc:	d0 f3       	brcs	.-12     	; 0x4af2 <pow+0x42>
    4afe:	10 c0       	rjmp	.+32     	; 0x4b20 <pow+0x70>
    4b00:	ff 5f       	subi	r31, 0xFF	; 255
    4b02:	70 f4       	brcc	.+28     	; 0x4b20 <pow+0x70>
    4b04:	a6 95       	lsr	r26
    4b06:	e0 f7       	brcc	.-8      	; 0x4b00 <pow+0x50>
    4b08:	f7 39       	cpi	r31, 0x97	; 151
    4b0a:	50 f0       	brcs	.+20     	; 0x4b20 <pow+0x70>
    4b0c:	19 f0       	breq	.+6      	; 0x4b14 <pow+0x64>
    4b0e:	ff 3a       	cpi	r31, 0xAF	; 175
    4b10:	38 f4       	brcc	.+14     	; 0x4b20 <pow+0x70>
    4b12:	9f 77       	andi	r25, 0x7F	; 127
    4b14:	9f 93       	push	r25
    4b16:	0c d0       	rcall	.+24     	; 0x4b30 <pow+0x80>
    4b18:	0f 90       	pop	r0
    4b1a:	07 fc       	sbrc	r0, 7
    4b1c:	90 58       	subi	r25, 0x80	; 128
    4b1e:	08 95       	ret
    4b20:	3e f0       	brts	.+14     	; 0x4b30 <pow+0x80>
    4b22:	18 cf       	rjmp	.-464    	; 0x4954 <__fp_nan>
    4b24:	60 e0       	ldi	r22, 0x00	; 0
    4b26:	70 e0       	ldi	r23, 0x00	; 0
    4b28:	80 e8       	ldi	r24, 0x80	; 128
    4b2a:	9f e3       	ldi	r25, 0x3F	; 63
    4b2c:	08 95       	ret
    4b2e:	4f e7       	ldi	r20, 0x7F	; 127
    4b30:	9f 77       	andi	r25, 0x7F	; 127
    4b32:	5f 93       	push	r21
    4b34:	4f 93       	push	r20
    4b36:	3f 93       	push	r19
    4b38:	2f 93       	push	r18
    4b3a:	e7 d0       	rcall	.+462    	; 0x4d0a <log>
    4b3c:	2f 91       	pop	r18
    4b3e:	3f 91       	pop	r19
    4b40:	4f 91       	pop	r20
    4b42:	5f 91       	pop	r21
    4b44:	52 df       	rcall	.-348    	; 0x49ea <__mulsf3>
    4b46:	25 c0       	rjmp	.+74     	; 0x4b92 <exp>

00004b48 <round>:
    4b48:	2f df       	rcall	.-418    	; 0x49a8 <__fp_splitA>
    4b4a:	e0 f0       	brcs	.+56     	; 0x4b84 <round+0x3c>
    4b4c:	9e 37       	cpi	r25, 0x7E	; 126
    4b4e:	d8 f0       	brcs	.+54     	; 0x4b86 <round+0x3e>
    4b50:	96 39       	cpi	r25, 0x96	; 150
    4b52:	b8 f4       	brcc	.+46     	; 0x4b82 <round+0x3a>
    4b54:	9e 38       	cpi	r25, 0x8E	; 142
    4b56:	48 f4       	brcc	.+18     	; 0x4b6a <round+0x22>
    4b58:	67 2f       	mov	r22, r23
    4b5a:	78 2f       	mov	r23, r24
    4b5c:	88 27       	eor	r24, r24
    4b5e:	98 5f       	subi	r25, 0xF8	; 248
    4b60:	f9 cf       	rjmp	.-14     	; 0x4b54 <round+0xc>
    4b62:	86 95       	lsr	r24
    4b64:	77 95       	ror	r23
    4b66:	67 95       	ror	r22
    4b68:	93 95       	inc	r25
    4b6a:	95 39       	cpi	r25, 0x95	; 149
    4b6c:	d0 f3       	brcs	.-12     	; 0x4b62 <round+0x1a>
    4b6e:	b6 2f       	mov	r27, r22
    4b70:	b1 70       	andi	r27, 0x01	; 1
    4b72:	6b 0f       	add	r22, r27
    4b74:	71 1d       	adc	r23, r1
    4b76:	81 1d       	adc	r24, r1
    4b78:	20 f4       	brcc	.+8      	; 0x4b82 <round+0x3a>
    4b7a:	87 95       	ror	r24
    4b7c:	77 95       	ror	r23
    4b7e:	67 95       	ror	r22
    4b80:	93 95       	inc	r25
    4b82:	33 c0       	rjmp	.+102    	; 0x4bea <__fp_mintl>
    4b84:	4d c0       	rjmp	.+154    	; 0x4c20 <__fp_mpack>
    4b86:	2b cf       	rjmp	.-426    	; 0x49de <__fp_szero>
    4b88:	19 f4       	brne	.+6      	; 0x4b90 <round+0x48>
    4b8a:	0e f0       	brts	.+2      	; 0x4b8e <round+0x46>
    4b8c:	dd ce       	rjmp	.-582    	; 0x4948 <__fp_inf>
    4b8e:	26 cf       	rjmp	.-436    	; 0x49dc <__fp_zero>
    4b90:	e1 ce       	rjmp	.-574    	; 0x4954 <__fp_nan>

00004b92 <exp>:
    4b92:	0a df       	rcall	.-492    	; 0x49a8 <__fp_splitA>
    4b94:	c8 f3       	brcs	.-14     	; 0x4b88 <round+0x40>
    4b96:	96 38       	cpi	r25, 0x86	; 134
    4b98:	c0 f7       	brcc	.-16     	; 0x4b8a <round+0x42>
    4b9a:	07 f8       	bld	r0, 7
    4b9c:	0f 92       	push	r0
    4b9e:	e8 94       	clt
    4ba0:	2b e3       	ldi	r18, 0x3B	; 59
    4ba2:	3a ea       	ldi	r19, 0xAA	; 170
    4ba4:	48 eb       	ldi	r20, 0xB8	; 184
    4ba6:	5f e7       	ldi	r21, 0x7F	; 127
    4ba8:	2e df       	rcall	.-420    	; 0x4a06 <__mulsf3_pse>
    4baa:	0f 92       	push	r0
    4bac:	0f 92       	push	r0
    4bae:	0f 92       	push	r0
    4bb0:	4d b7       	in	r20, 0x3d	; 61
    4bb2:	5e b7       	in	r21, 0x3e	; 62
    4bb4:	0f 92       	push	r0
    4bb6:	e9 d0       	rcall	.+466    	; 0x4d8a <modf>
    4bb8:	e4 ee       	ldi	r30, 0xE4	; 228
    4bba:	f0 e0       	ldi	r31, 0x00	; 0
    4bbc:	3f d0       	rcall	.+126    	; 0x4c3c <__fp_powser>
    4bbe:	4f 91       	pop	r20
    4bc0:	5f 91       	pop	r21
    4bc2:	ef 91       	pop	r30
    4bc4:	ff 91       	pop	r31
    4bc6:	e5 95       	asr	r30
    4bc8:	ee 1f       	adc	r30, r30
    4bca:	ff 1f       	adc	r31, r31
    4bcc:	49 f0       	breq	.+18     	; 0x4be0 <exp+0x4e>
    4bce:	fe 57       	subi	r31, 0x7E	; 126
    4bd0:	e0 68       	ori	r30, 0x80	; 128
    4bd2:	44 27       	eor	r20, r20
    4bd4:	ee 0f       	add	r30, r30
    4bd6:	44 1f       	adc	r20, r20
    4bd8:	fa 95       	dec	r31
    4bda:	e1 f7       	brne	.-8      	; 0x4bd4 <exp+0x42>
    4bdc:	41 95       	neg	r20
    4bde:	55 0b       	sbc	r21, r21
    4be0:	5b d0       	rcall	.+182    	; 0x4c98 <ldexp>
    4be2:	0f 90       	pop	r0
    4be4:	07 fe       	sbrs	r0, 7
    4be6:	4f c0       	rjmp	.+158    	; 0x4c86 <inverse>
    4be8:	08 95       	ret

00004bea <__fp_mintl>:
    4bea:	88 23       	and	r24, r24
    4bec:	71 f4       	brne	.+28     	; 0x4c0a <__fp_mintl+0x20>
    4bee:	77 23       	and	r23, r23
    4bf0:	21 f0       	breq	.+8      	; 0x4bfa <__fp_mintl+0x10>
    4bf2:	98 50       	subi	r25, 0x08	; 8
    4bf4:	87 2b       	or	r24, r23
    4bf6:	76 2f       	mov	r23, r22
    4bf8:	07 c0       	rjmp	.+14     	; 0x4c08 <__fp_mintl+0x1e>
    4bfa:	66 23       	and	r22, r22
    4bfc:	11 f4       	brne	.+4      	; 0x4c02 <__fp_mintl+0x18>
    4bfe:	99 27       	eor	r25, r25
    4c00:	0d c0       	rjmp	.+26     	; 0x4c1c <__fp_mintl+0x32>
    4c02:	90 51       	subi	r25, 0x10	; 16
    4c04:	86 2b       	or	r24, r22
    4c06:	70 e0       	ldi	r23, 0x00	; 0
    4c08:	60 e0       	ldi	r22, 0x00	; 0
    4c0a:	2a f0       	brmi	.+10     	; 0x4c16 <__fp_mintl+0x2c>
    4c0c:	9a 95       	dec	r25
    4c0e:	66 0f       	add	r22, r22
    4c10:	77 1f       	adc	r23, r23
    4c12:	88 1f       	adc	r24, r24
    4c14:	da f7       	brpl	.-10     	; 0x4c0c <__fp_mintl+0x22>
    4c16:	88 0f       	add	r24, r24
    4c18:	96 95       	lsr	r25
    4c1a:	87 95       	ror	r24
    4c1c:	97 f9       	bld	r25, 7
    4c1e:	08 95       	ret

00004c20 <__fp_mpack>:
    4c20:	9f 3f       	cpi	r25, 0xFF	; 255
    4c22:	31 f0       	breq	.+12     	; 0x4c30 <__fp_mpack_finite+0xc>

00004c24 <__fp_mpack_finite>:
    4c24:	91 50       	subi	r25, 0x01	; 1
    4c26:	20 f4       	brcc	.+8      	; 0x4c30 <__fp_mpack_finite+0xc>
    4c28:	87 95       	ror	r24
    4c2a:	77 95       	ror	r23
    4c2c:	67 95       	ror	r22
    4c2e:	b7 95       	ror	r27
    4c30:	88 0f       	add	r24, r24
    4c32:	91 1d       	adc	r25, r1
    4c34:	96 95       	lsr	r25
    4c36:	87 95       	ror	r24
    4c38:	97 f9       	bld	r25, 7
    4c3a:	08 95       	ret

00004c3c <__fp_powser>:
    4c3c:	df 93       	push	r29
    4c3e:	cf 93       	push	r28
    4c40:	1f 93       	push	r17
    4c42:	0f 93       	push	r16
    4c44:	ff 92       	push	r15
    4c46:	ef 92       	push	r14
    4c48:	df 92       	push	r13
    4c4a:	7b 01       	movw	r14, r22
    4c4c:	8c 01       	movw	r16, r24
    4c4e:	68 94       	set
    4c50:	05 c0       	rjmp	.+10     	; 0x4c5c <__fp_powser+0x20>
    4c52:	da 2e       	mov	r13, r26
    4c54:	ef 01       	movw	r28, r30
    4c56:	d5 de       	rcall	.-598    	; 0x4a02 <__mulsf3x>
    4c58:	fe 01       	movw	r30, r28
    4c5a:	e8 94       	clt
    4c5c:	a5 91       	lpm	r26, Z+
    4c5e:	25 91       	lpm	r18, Z+
    4c60:	35 91       	lpm	r19, Z+
    4c62:	45 91       	lpm	r20, Z+
    4c64:	55 91       	lpm	r21, Z+
    4c66:	ae f3       	brts	.-22     	; 0x4c52 <__fp_powser+0x16>
    4c68:	ef 01       	movw	r28, r30
    4c6a:	4a dd       	rcall	.-1388   	; 0x4700 <__addsf3x>
    4c6c:	fe 01       	movw	r30, r28
    4c6e:	97 01       	movw	r18, r14
    4c70:	a8 01       	movw	r20, r16
    4c72:	da 94       	dec	r13
    4c74:	79 f7       	brne	.-34     	; 0x4c54 <__fp_powser+0x18>
    4c76:	df 90       	pop	r13
    4c78:	ef 90       	pop	r14
    4c7a:	ff 90       	pop	r15
    4c7c:	0f 91       	pop	r16
    4c7e:	1f 91       	pop	r17
    4c80:	cf 91       	pop	r28
    4c82:	df 91       	pop	r29
    4c84:	08 95       	ret

00004c86 <inverse>:
    4c86:	9b 01       	movw	r18, r22
    4c88:	ac 01       	movw	r20, r24
    4c8a:	60 e0       	ldi	r22, 0x00	; 0
    4c8c:	70 e0       	ldi	r23, 0x00	; 0
    4c8e:	80 e8       	ldi	r24, 0x80	; 128
    4c90:	9f e3       	ldi	r25, 0x3F	; 63
    4c92:	89 cd       	rjmp	.-1262   	; 0x47a6 <__divsf3>
    4c94:	59 ce       	rjmp	.-846    	; 0x4948 <__fp_inf>
    4c96:	c4 cf       	rjmp	.-120    	; 0x4c20 <__fp_mpack>

00004c98 <ldexp>:
    4c98:	87 de       	rcall	.-754    	; 0x49a8 <__fp_splitA>
    4c9a:	e8 f3       	brcs	.-6      	; 0x4c96 <inverse+0x10>
    4c9c:	99 23       	and	r25, r25
    4c9e:	d9 f3       	breq	.-10     	; 0x4c96 <inverse+0x10>
    4ca0:	94 0f       	add	r25, r20
    4ca2:	51 1d       	adc	r21, r1
    4ca4:	bb f3       	brvs	.-18     	; 0x4c94 <inverse+0xe>
    4ca6:	91 50       	subi	r25, 0x01	; 1
    4ca8:	50 40       	sbci	r21, 0x00	; 0
    4caa:	94 f0       	brlt	.+36     	; 0x4cd0 <ldexp+0x38>
    4cac:	59 f0       	breq	.+22     	; 0x4cc4 <ldexp+0x2c>
    4cae:	88 23       	and	r24, r24
    4cb0:	32 f0       	brmi	.+12     	; 0x4cbe <ldexp+0x26>
    4cb2:	66 0f       	add	r22, r22
    4cb4:	77 1f       	adc	r23, r23
    4cb6:	88 1f       	adc	r24, r24
    4cb8:	91 50       	subi	r25, 0x01	; 1
    4cba:	50 40       	sbci	r21, 0x00	; 0
    4cbc:	c1 f7       	brne	.-16     	; 0x4cae <ldexp+0x16>
    4cbe:	9e 3f       	cpi	r25, 0xFE	; 254
    4cc0:	51 05       	cpc	r21, r1
    4cc2:	44 f7       	brge	.-48     	; 0x4c94 <inverse+0xe>
    4cc4:	88 0f       	add	r24, r24
    4cc6:	91 1d       	adc	r25, r1
    4cc8:	96 95       	lsr	r25
    4cca:	87 95       	ror	r24
    4ccc:	97 f9       	bld	r25, 7
    4cce:	08 95       	ret
    4cd0:	5f 3f       	cpi	r21, 0xFF	; 255
    4cd2:	ac f0       	brlt	.+42     	; 0x4cfe <ldexp+0x66>
    4cd4:	98 3e       	cpi	r25, 0xE8	; 232
    4cd6:	9c f0       	brlt	.+38     	; 0x4cfe <ldexp+0x66>
    4cd8:	bb 27       	eor	r27, r27
    4cda:	86 95       	lsr	r24
    4cdc:	77 95       	ror	r23
    4cde:	67 95       	ror	r22
    4ce0:	b7 95       	ror	r27
    4ce2:	08 f4       	brcc	.+2      	; 0x4ce6 <ldexp+0x4e>
    4ce4:	b1 60       	ori	r27, 0x01	; 1
    4ce6:	93 95       	inc	r25
    4ce8:	c1 f7       	brne	.-16     	; 0x4cda <ldexp+0x42>
    4cea:	bb 0f       	add	r27, r27
    4cec:	58 f7       	brcc	.-42     	; 0x4cc4 <ldexp+0x2c>
    4cee:	11 f4       	brne	.+4      	; 0x4cf4 <ldexp+0x5c>
    4cf0:	60 ff       	sbrs	r22, 0
    4cf2:	e8 cf       	rjmp	.-48     	; 0x4cc4 <ldexp+0x2c>
    4cf4:	6f 5f       	subi	r22, 0xFF	; 255
    4cf6:	7f 4f       	sbci	r23, 0xFF	; 255
    4cf8:	8f 4f       	sbci	r24, 0xFF	; 255
    4cfa:	9f 4f       	sbci	r25, 0xFF	; 255
    4cfc:	e3 cf       	rjmp	.-58     	; 0x4cc4 <ldexp+0x2c>
    4cfe:	6f ce       	rjmp	.-802    	; 0x49de <__fp_szero>
    4d00:	0e f0       	brts	.+2      	; 0x4d04 <ldexp+0x6c>
    4d02:	8e cf       	rjmp	.-228    	; 0x4c20 <__fp_mpack>
    4d04:	27 ce       	rjmp	.-946    	; 0x4954 <__fp_nan>
    4d06:	68 94       	set
    4d08:	1f ce       	rjmp	.-962    	; 0x4948 <__fp_inf>

00004d0a <log>:
    4d0a:	4e de       	rcall	.-868    	; 0x49a8 <__fp_splitA>
    4d0c:	c8 f3       	brcs	.-14     	; 0x4d00 <ldexp+0x68>
    4d0e:	99 23       	and	r25, r25
    4d10:	d1 f3       	breq	.-12     	; 0x4d06 <ldexp+0x6e>
    4d12:	c6 f3       	brts	.-16     	; 0x4d04 <ldexp+0x6c>
    4d14:	df 93       	push	r29
    4d16:	cf 93       	push	r28
    4d18:	1f 93       	push	r17
    4d1a:	0f 93       	push	r16
    4d1c:	ff 92       	push	r15
    4d1e:	c9 2f       	mov	r28, r25
    4d20:	dd 27       	eor	r29, r29
    4d22:	88 23       	and	r24, r24
    4d24:	2a f0       	brmi	.+10     	; 0x4d30 <log+0x26>
    4d26:	21 97       	sbiw	r28, 0x01	; 1
    4d28:	66 0f       	add	r22, r22
    4d2a:	77 1f       	adc	r23, r23
    4d2c:	88 1f       	adc	r24, r24
    4d2e:	da f7       	brpl	.-10     	; 0x4d26 <log+0x1c>
    4d30:	20 e0       	ldi	r18, 0x00	; 0
    4d32:	30 e0       	ldi	r19, 0x00	; 0
    4d34:	40 e8       	ldi	r20, 0x80	; 128
    4d36:	5f eb       	ldi	r21, 0xBF	; 191
    4d38:	9f e3       	ldi	r25, 0x3F	; 63
    4d3a:	88 39       	cpi	r24, 0x98	; 152
    4d3c:	20 f0       	brcs	.+8      	; 0x4d46 <log+0x3c>
    4d3e:	80 3e       	cpi	r24, 0xE0	; 224
    4d40:	30 f0       	brcs	.+12     	; 0x4d4e <log+0x44>
    4d42:	21 96       	adiw	r28, 0x01	; 1
    4d44:	8f 77       	andi	r24, 0x7F	; 127
    4d46:	cb dc       	rcall	.-1642   	; 0x46de <__addsf3>
    4d48:	ec e0       	ldi	r30, 0x0C	; 12
    4d4a:	f1 e0       	ldi	r31, 0x01	; 1
    4d4c:	03 c0       	rjmp	.+6      	; 0x4d54 <log+0x4a>
    4d4e:	c7 dc       	rcall	.-1650   	; 0x46de <__addsf3>
    4d50:	e9 e3       	ldi	r30, 0x39	; 57
    4d52:	f1 e0       	ldi	r31, 0x01	; 1
    4d54:	73 df       	rcall	.-282    	; 0x4c3c <__fp_powser>
    4d56:	8b 01       	movw	r16, r22
    4d58:	be 01       	movw	r22, r28
    4d5a:	ec 01       	movw	r28, r24
    4d5c:	fb 2e       	mov	r15, r27
    4d5e:	6f 57       	subi	r22, 0x7F	; 127
    4d60:	71 09       	sbc	r23, r1
    4d62:	75 95       	asr	r23
    4d64:	77 1f       	adc	r23, r23
    4d66:	88 0b       	sbc	r24, r24
    4d68:	99 0b       	sbc	r25, r25
    4d6a:	b3 dd       	rcall	.-1178   	; 0x48d2 <__floatsisf>
    4d6c:	28 e1       	ldi	r18, 0x18	; 24
    4d6e:	32 e7       	ldi	r19, 0x72	; 114
    4d70:	41 e3       	ldi	r20, 0x31	; 49
    4d72:	5f e3       	ldi	r21, 0x3F	; 63
    4d74:	46 de       	rcall	.-884    	; 0x4a02 <__mulsf3x>
    4d76:	af 2d       	mov	r26, r15
    4d78:	98 01       	movw	r18, r16
    4d7a:	ae 01       	movw	r20, r28
    4d7c:	ff 90       	pop	r15
    4d7e:	0f 91       	pop	r16
    4d80:	1f 91       	pop	r17
    4d82:	cf 91       	pop	r28
    4d84:	df 91       	pop	r29
    4d86:	bc dc       	rcall	.-1672   	; 0x4700 <__addsf3x>
    4d88:	f6 cd       	rjmp	.-1044   	; 0x4976 <__fp_round>

00004d8a <modf>:
    4d8a:	fa 01       	movw	r30, r20
    4d8c:	dc 01       	movw	r26, r24
    4d8e:	aa 0f       	add	r26, r26
    4d90:	bb 1f       	adc	r27, r27
    4d92:	9b 01       	movw	r18, r22
    4d94:	ac 01       	movw	r20, r24
    4d96:	bf 57       	subi	r27, 0x7F	; 127
    4d98:	28 f4       	brcc	.+10     	; 0x4da4 <modf+0x1a>
    4d9a:	22 27       	eor	r18, r18
    4d9c:	33 27       	eor	r19, r19
    4d9e:	44 27       	eor	r20, r20
    4da0:	50 78       	andi	r21, 0x80	; 128
    4da2:	1f c0       	rjmp	.+62     	; 0x4de2 <modf+0x58>
    4da4:	b7 51       	subi	r27, 0x17	; 23
    4da6:	88 f4       	brcc	.+34     	; 0x4dca <modf+0x40>
    4da8:	ab 2f       	mov	r26, r27
    4daa:	00 24       	eor	r0, r0
    4dac:	46 95       	lsr	r20
    4dae:	37 95       	ror	r19
    4db0:	27 95       	ror	r18
    4db2:	01 1c       	adc	r0, r1
    4db4:	a3 95       	inc	r26
    4db6:	d2 f3       	brmi	.-12     	; 0x4dac <modf+0x22>
    4db8:	00 20       	and	r0, r0
    4dba:	69 f0       	breq	.+26     	; 0x4dd6 <modf+0x4c>
    4dbc:	22 0f       	add	r18, r18
    4dbe:	33 1f       	adc	r19, r19
    4dc0:	44 1f       	adc	r20, r20
    4dc2:	b3 95       	inc	r27
    4dc4:	da f3       	brmi	.-10     	; 0x4dbc <modf+0x32>
    4dc6:	0d d0       	rcall	.+26     	; 0x4de2 <modf+0x58>
    4dc8:	89 cc       	rjmp	.-1774   	; 0x46dc <__subsf3>
    4dca:	61 30       	cpi	r22, 0x01	; 1
    4dcc:	71 05       	cpc	r23, r1
    4dce:	a0 e8       	ldi	r26, 0x80	; 128
    4dd0:	8a 07       	cpc	r24, r26
    4dd2:	b9 46       	sbci	r27, 0x69	; 105
    4dd4:	30 f4       	brcc	.+12     	; 0x4de2 <modf+0x58>
    4dd6:	9b 01       	movw	r18, r22
    4dd8:	ac 01       	movw	r20, r24
    4dda:	66 27       	eor	r22, r22
    4ddc:	77 27       	eor	r23, r23
    4dde:	88 27       	eor	r24, r24
    4de0:	90 78       	andi	r25, 0x80	; 128
    4de2:	30 96       	adiw	r30, 0x00	; 0
    4de4:	21 f0       	breq	.+8      	; 0x4dee <modf+0x64>
    4de6:	20 83       	st	Z, r18
    4de8:	31 83       	std	Z+1, r19	; 0x01
    4dea:	42 83       	std	Z+2, r20	; 0x02
    4dec:	53 83       	std	Z+3, r21	; 0x03
    4dee:	08 95       	ret

00004df0 <__udivmodsi4>:
    4df0:	a1 e2       	ldi	r26, 0x21	; 33
    4df2:	1a 2e       	mov	r1, r26
    4df4:	aa 1b       	sub	r26, r26
    4df6:	bb 1b       	sub	r27, r27
    4df8:	fd 01       	movw	r30, r26
    4dfa:	0d c0       	rjmp	.+26     	; 0x4e16 <__udivmodsi4_ep>

00004dfc <__udivmodsi4_loop>:
    4dfc:	aa 1f       	adc	r26, r26
    4dfe:	bb 1f       	adc	r27, r27
    4e00:	ee 1f       	adc	r30, r30
    4e02:	ff 1f       	adc	r31, r31
    4e04:	a2 17       	cp	r26, r18
    4e06:	b3 07       	cpc	r27, r19
    4e08:	e4 07       	cpc	r30, r20
    4e0a:	f5 07       	cpc	r31, r21
    4e0c:	20 f0       	brcs	.+8      	; 0x4e16 <__udivmodsi4_ep>
    4e0e:	a2 1b       	sub	r26, r18
    4e10:	b3 0b       	sbc	r27, r19
    4e12:	e4 0b       	sbc	r30, r20
    4e14:	f5 0b       	sbc	r31, r21

00004e16 <__udivmodsi4_ep>:
    4e16:	66 1f       	adc	r22, r22
    4e18:	77 1f       	adc	r23, r23
    4e1a:	88 1f       	adc	r24, r24
    4e1c:	99 1f       	adc	r25, r25
    4e1e:	1a 94       	dec	r1
    4e20:	69 f7       	brne	.-38     	; 0x4dfc <__udivmodsi4_loop>
    4e22:	60 95       	com	r22
    4e24:	70 95       	com	r23
    4e26:	80 95       	com	r24
    4e28:	90 95       	com	r25
    4e2a:	9b 01       	movw	r18, r22
    4e2c:	ac 01       	movw	r20, r24
    4e2e:	bd 01       	movw	r22, r26
    4e30:	cf 01       	movw	r24, r30
    4e32:	08 95       	ret

00004e34 <memcpy>:
    4e34:	fb 01       	movw	r30, r22
    4e36:	dc 01       	movw	r26, r24
    4e38:	02 c0       	rjmp	.+4      	; 0x4e3e <memcpy+0xa>
    4e3a:	01 90       	ld	r0, Z+
    4e3c:	0d 92       	st	X+, r0
    4e3e:	41 50       	subi	r20, 0x01	; 1
    4e40:	50 40       	sbci	r21, 0x00	; 0
    4e42:	d8 f7       	brcc	.-10     	; 0x4e3a <memcpy+0x6>
    4e44:	08 95       	ret

00004e46 <memset>:
    4e46:	dc 01       	movw	r26, r24
    4e48:	01 c0       	rjmp	.+2      	; 0x4e4c <memset+0x6>
    4e4a:	6d 93       	st	X+, r22
    4e4c:	41 50       	subi	r20, 0x01	; 1
    4e4e:	50 40       	sbci	r21, 0x00	; 0
    4e50:	e0 f7       	brcc	.-8      	; 0x4e4a <memset+0x4>
    4e52:	08 95       	ret

00004e54 <_exit>:
    4e54:	f8 94       	cli

00004e56 <__stop_program>:
    4e56:	ff cf       	rjmp	.-2      	; 0x4e56 <__stop_program>
