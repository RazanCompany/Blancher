
blancher.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000012e  00800200  00003616  000036aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003616  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000009ad  0080032e  0080032e  000037d8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000037d8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003808  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000b58  00000000  00000000  00003848  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000bedb  00000000  00000000  000043a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000032ff  00000000  00000000  0001027b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000ae73  00000000  00000000  0001357a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001cc8  00000000  00000000  0001e3f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00018d72  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00008fe6  00000000  00000000  00038e2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000b28  00000000  00000000  00041e10  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00005c2d  00000000  00000000  00042938  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
       2:	00 00       	nop
       4:	90 c0       	rjmp	.+288    	; 0x126 <__bad_interrupt>
       6:	00 00       	nop
       8:	8e c0       	rjmp	.+284    	; 0x126 <__bad_interrupt>
       a:	00 00       	nop
       c:	8c c0       	rjmp	.+280    	; 0x126 <__bad_interrupt>
       e:	00 00       	nop
      10:	8a c0       	rjmp	.+276    	; 0x126 <__bad_interrupt>
      12:	00 00       	nop
      14:	88 c0       	rjmp	.+272    	; 0x126 <__bad_interrupt>
      16:	00 00       	nop
      18:	86 c0       	rjmp	.+268    	; 0x126 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	84 c0       	rjmp	.+264    	; 0x126 <__bad_interrupt>
      1e:	00 00       	nop
      20:	82 c0       	rjmp	.+260    	; 0x126 <__bad_interrupt>
      22:	00 00       	nop
      24:	80 c0       	rjmp	.+256    	; 0x126 <__bad_interrupt>
      26:	00 00       	nop
      28:	7e c0       	rjmp	.+252    	; 0x126 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7c c0       	rjmp	.+248    	; 0x126 <__bad_interrupt>
      2e:	00 00       	nop
      30:	0c 94 76 13 	jmp	0x26ec	; 0x26ec <__vector_12>
      34:	0c 94 94 18 	jmp	0x3128	; 0x3128 <__vector_13>
      38:	76 c0       	rjmp	.+236    	; 0x126 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	74 c0       	rjmp	.+232    	; 0x126 <__bad_interrupt>
      3e:	00 00       	nop
      40:	72 c0       	rjmp	.+228    	; 0x126 <__bad_interrupt>
      42:	00 00       	nop
      44:	0c 94 48 0b 	jmp	0x1690	; 0x1690 <__vector_17>
      48:	6e c0       	rjmp	.+220    	; 0x126 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6c c0       	rjmp	.+216    	; 0x126 <__bad_interrupt>
      4e:	00 00       	nop
      50:	6a c0       	rjmp	.+212    	; 0x126 <__bad_interrupt>
      52:	00 00       	nop
      54:	68 c0       	rjmp	.+208    	; 0x126 <__bad_interrupt>
      56:	00 00       	nop
      58:	66 c0       	rjmp	.+204    	; 0x126 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	64 c0       	rjmp	.+200    	; 0x126 <__bad_interrupt>
      5e:	00 00       	nop
      60:	62 c0       	rjmp	.+196    	; 0x126 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 0a 0d 	jmp	0x1a14	; 0x1a14 <__vector_25>
      68:	0c 94 43 0d 	jmp	0x1a86	; 0x1a86 <__vector_26>
      6c:	5c c0       	rjmp	.+184    	; 0x126 <__bad_interrupt>
      6e:	00 00       	nop
      70:	5a c0       	rjmp	.+180    	; 0x126 <__bad_interrupt>
      72:	00 00       	nop
      74:	0c 94 74 0a 	jmp	0x14e8	; 0x14e8 <__vector_29>
      78:	56 c0       	rjmp	.+172    	; 0x126 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	54 c0       	rjmp	.+168    	; 0x126 <__bad_interrupt>
      7e:	00 00       	nop
      80:	0c 94 b8 0b 	jmp	0x1770	; 0x1770 <__vector_32>
      84:	50 c0       	rjmp	.+160    	; 0x126 <__bad_interrupt>
      86:	00 00       	nop
      88:	4e c0       	rjmp	.+156    	; 0x126 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	4c c0       	rjmp	.+152    	; 0x126 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 10 0e 	jmp	0x1c20	; 0x1c20 <__vector_36>
      94:	0c 94 49 0e 	jmp	0x1c92	; 0x1c92 <__vector_37>
      98:	46 c0       	rjmp	.+140    	; 0x126 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	44 c0       	rjmp	.+136    	; 0x126 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	42 c0       	rjmp	.+132    	; 0x126 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	40 c0       	rjmp	.+128    	; 0x126 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	0c 94 28 0c 	jmp	0x1850	; 0x1850 <__vector_42>
      ac:	3c c0       	rjmp	.+120    	; 0x126 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	3a c0       	rjmp	.+116    	; 0x126 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	38 c0       	rjmp	.+112    	; 0x126 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	36 c0       	rjmp	.+108    	; 0x126 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	0c 94 98 0c 	jmp	0x1930	; 0x1930 <__vector_47>
      c0:	32 c0       	rjmp	.+100    	; 0x126 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	30 c0       	rjmp	.+96     	; 0x126 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	2e c0       	rjmp	.+92     	; 0x126 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 1f 0f 	jmp	0x1e3e	; 0x1e3e <__vector_51>
      d0:	0c 94 58 0f 	jmp	0x1eb0	; 0x1eb0 <__vector_52>
      d4:	28 c0       	rjmp	.+80     	; 0x126 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 2b 10 	jmp	0x2056	; 0x2056 <__vector_54>
      dc:	0c 94 64 10 	jmp	0x20c8	; 0x20c8 <__vector_55>
      e0:	22 c0       	rjmp	.+68     	; 0x126 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	13 e0       	ldi	r17, 0x03	; 3
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e6 e1       	ldi	r30, 0x16	; 22
      fc:	f6 e3       	ldi	r31, 0x36	; 54
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	ae 32       	cpi	r26, 0x2E	; 46
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	2c e0       	ldi	r18, 0x0C	; 12
     110:	ae e2       	ldi	r26, 0x2E	; 46
     112:	b3 e0       	ldi	r27, 0x03	; 3
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	ab 3d       	cpi	r26, 0xDB	; 219
     11a:	b2 07       	cpc	r27, r18
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	0e 94 2a 0a 	call	0x1454	; 0x1454 <main>
     122:	0c 94 09 1b 	jmp	0x3612	; 0x3612 <_exit>

00000126 <__bad_interrupt>:
     126:	6c cf       	rjmp	.-296    	; 0x0 <__vectors>

00000128 <Set_drum_time_callback>:
	Encoder_init(Set_drum_time_callback, 5, 16);
	
}
static void Set_drum_time_callback(uint32_t dif_time)
{
	g_drum_time = dif_time;
     128:	60 93 70 0c 	sts	0x0C70, r22	; 0x800c70 <g_drum_time>
     12c:	70 93 71 0c 	sts	0x0C71, r23	; 0x800c71 <g_drum_time+0x1>
     130:	80 93 72 0c 	sts	0x0C72, r24	; 0x800c72 <g_drum_time+0x2>
     134:	90 93 73 0c 	sts	0x0C73, r25	; 0x800c73 <g_drum_time+0x3>
     138:	08 95       	ret

0000013a <Drum_speed_init>:
 * call back function
 * parameters@ difference time between every ISR For Drum
 * return@ Nothing
 */
void Drum_speed_init(void){
	Encoder_init(Set_drum_time_callback, 5, 16);
     13a:	40 e1       	ldi	r20, 0x10	; 16
     13c:	50 e0       	ldi	r21, 0x00	; 0
     13e:	65 e0       	ldi	r22, 0x05	; 5
     140:	84 e9       	ldi	r24, 0x94	; 148
     142:	90 e0       	ldi	r25, 0x00	; 0
     144:	01 c0       	rjmp	.+2      	; 0x148 <Encoder_init>
     146:	08 95       	ret

00000148 <Encoder_init>:
 */

void Encoder_init(void (*pISR_callback)(uint32_t),uint8_t timer_number,uint16_t ticks_number )
{
	//encoder of Drum on timer 5
	Encoder_1_confg.timer_number = timer_number;
     148:	e4 e7       	ldi	r30, 0x74	; 116
     14a:	fc e0       	ldi	r31, 0x0C	; 12
     14c:	64 83       	std	Z+4, r22	; 0x04
	// number of ticks 16 to interrupted
	Encoder_1_confg.ticks = ticks_number;
     14e:	51 83       	std	Z+1, r21	; 0x01
     150:	40 83       	st	Z, r20
	//Call back Function 
	Encoder_1_confg.isr_call_back = pISR_callback ; 
     152:	93 83       	std	Z+3, r25	; 0x03
     154:	82 83       	std	Z+2, r24	; 0x02
    timers_init(&Encoder_1_confg);
     156:	cf 01       	movw	r24, r30
     158:	0c 94 e0 0a 	jmp	0x15c0	; 0x15c0 <timers_init>
     15c:	08 95       	ret

0000015e <flowrate_feeding_callback>:
{
	/*
	*	this function is called back from the isr to increment the liters counter .
	*/
  // call the feeding operation callback .
     feeding_operation_callback();
     15e:	e0 91 79 0c 	lds	r30, 0x0C79	; 0x800c79 <feeding_operation_callback>
     162:	f0 91 7a 0c 	lds	r31, 0x0C7A	; 0x800c7a <feeding_operation_callback+0x1>
     166:	19 95       	eicall
     168:	08 95       	ret

0000016a <flowrate_outing_callback>:
{
	/*
	*	this function is called back from the isr to increment the liters counter .
	*/
  // call the feeding operation callback .
     out_operation_callback();
     16a:	e0 91 7b 0c 	lds	r30, 0x0C7B	; 0x800c7b <out_operation_callback>
     16e:	f0 91 7c 0c 	lds	r31, 0x0C7C	; 0x800c7c <out_operation_callback+0x1>
     172:	19 95       	eicall
     174:	08 95       	ret

00000176 <Flow_rate_init>:
// structs to hold the timers config .
g_Timer_Config feeding_configeration;
g_Timer_Config outing_configeration;

void Flow_rate_init(void (*callback1)(void) , void (*callback2)(void)) 
{
     176:	cf 92       	push	r12
     178:	df 92       	push	r13
     17a:	ef 92       	push	r14
     17c:	ff 92       	push	r15
     17e:	0f 93       	push	r16
     180:	1f 93       	push	r17
     182:	cf 93       	push	r28
     184:	df 93       	push	r29
     186:	6c 01       	movw	r12, r24
     188:	7b 01       	movw	r14, r22
	
	feeding_configeration.ticks = TICKS_FOR_HALF_LITER ;
     18a:	c2 e8       	ldi	r28, 0x82	; 130
     18c:	dc e0       	ldi	r29, 0x0C	; 12
     18e:	00 ef       	ldi	r16, 0xF0	; 240
     190:	10 e0       	ldi	r17, 0x00	; 0
     192:	19 83       	std	Y+1, r17	; 0x01
     194:	08 83       	st	Y, r16
	feeding_configeration.timer_number = 1 ;
     196:	81 e0       	ldi	r24, 0x01	; 1
     198:	8c 83       	std	Y+4, r24	; 0x04
	feeding_configeration.isr_call_back = flowrate_feeding_callback ;
     19a:	8f ea       	ldi	r24, 0xAF	; 175
     19c:	90 e0       	ldi	r25, 0x00	; 0
     19e:	9b 83       	std	Y+3, r25	; 0x03
     1a0:	8a 83       	std	Y+2, r24	; 0x02
	
	// initialize the needed timer with the previous config .
    timers_init(&feeding_configeration);
     1a2:	ce 01       	movw	r24, r28
     1a4:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <timers_init>
	
	// initialize other timer for the second flow rate .
	feeding_configeration.ticks = TICKS_FOR_HALF_LITER ;
     1a8:	19 83       	std	Y+1, r17	; 0x01
     1aa:	08 83       	st	Y, r16
	feeding_configeration.timer_number = 3 ;
     1ac:	83 e0       	ldi	r24, 0x03	; 3
     1ae:	8c 83       	std	Y+4, r24	; 0x04
	feeding_configeration.isr_call_back = flowrate_outing_callback ;
     1b0:	85 eb       	ldi	r24, 0xB5	; 181
     1b2:	90 e0       	ldi	r25, 0x00	; 0
     1b4:	9b 83       	std	Y+3, r25	; 0x03
     1b6:	8a 83       	std	Y+2, r24	; 0x02
	
	// initialize the needed timer with the previous config .
	timers_init(&outing_configeration);
     1b8:	8d e7       	ldi	r24, 0x7D	; 125
     1ba:	9c e0       	ldi	r25, 0x0C	; 12
     1bc:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <timers_init>
	feeding_operation_callback = callback1;
     1c0:	d0 92 7a 0c 	sts	0x0C7A, r13	; 0x800c7a <feeding_operation_callback+0x1>
     1c4:	c0 92 79 0c 	sts	0x0C79, r12	; 0x800c79 <feeding_operation_callback>
	out_operation_callback = callback2 ;
     1c8:	f0 92 7c 0c 	sts	0x0C7C, r15	; 0x800c7c <out_operation_callback+0x1>
     1cc:	e0 92 7b 0c 	sts	0x0C7B, r14	; 0x800c7b <out_operation_callback>
	DIO_init();
     1d0:	0e 94 91 0a 	call	0x1522	; 0x1522 <DIO_init>
}
     1d4:	df 91       	pop	r29
     1d6:	cf 91       	pop	r28
     1d8:	1f 91       	pop	r17
     1da:	0f 91       	pop	r16
     1dc:	ff 90       	pop	r15
     1de:	ef 90       	pop	r14
     1e0:	df 90       	pop	r13
     1e2:	cf 90       	pop	r12
     1e4:	08 95       	ret

000001e6 <Inverter_pre_transmition>:
 * set the enable pin for modbus to start send
 * parameters  Nothing
 * return Nothing
 */
void Inverter_pre_transmition(void) {
	Modbus_change_state(INVERTER, HIGH);
     1e6:	61 e0       	ldi	r22, 0x01	; 1
     1e8:	81 e0       	ldi	r24, 0x01	; 1
     1ea:	0c 94 c3 0a 	jmp	0x1586	; 0x1586 <Modbus_change_state>
     1ee:	08 95       	ret

000001f0 <Inverter_post_transmition>:
 * Clear the enable pin for modbus to start send
 * parameters  Nothing
 * return Nothing
 */
void Inverter_post_transmition(void) {
	Modbus_change_state(INVERTER, LOW);
     1f0:	60 e0       	ldi	r22, 0x00	; 0
     1f2:	81 e0       	ldi	r24, 0x01	; 1
     1f4:	0c 94 c3 0a 	jmp	0x1586	; 0x1586 <Modbus_change_state>
     1f8:	08 95       	ret

000001fa <Inverter_init>:
 */
void Inverter_init( UART_Modules uart_n, uint32_t baudrate, uint8_t slave_id )
{
	
	// Modbus Parameters
	s_inv_mod_confg.uart_num = uart_n;
     1fa:	ee e2       	ldi	r30, 0x2E	; 46
     1fc:	f3 e0       	ldi	r31, 0x03	; 3
     1fe:	81 83       	std	Z+1, r24	; 0x01
	s_inv_mod_confg.baud_rate =  baudrate;
     200:	42 83       	std	Z+2, r20	; 0x02
     202:	53 83       	std	Z+3, r21	; 0x03
     204:	64 83       	std	Z+4, r22	; 0x04
     206:	75 83       	std	Z+5, r23	; 0x05
	s_inv_mod_confg.slave_address = slave_id;
     208:	20 83       	st	Z, r18
	s_inv_mod_confg.post_transmission = Inverter_post_transmition;
     20a:	88 ef       	ldi	r24, 0xF8	; 248
     20c:	90 e0       	ldi	r25, 0x00	; 0
     20e:	91 87       	std	Z+9, r25	; 0x09
     210:	80 87       	std	Z+8, r24	; 0x08
	s_inv_mod_confg.pre_transmission = Inverter_pre_transmition;
     212:	83 ef       	ldi	r24, 0xF3	; 243
     214:	90 e0       	ldi	r25, 0x00	; 0
     216:	97 83       	std	Z+7, r25	; 0x07
     218:	86 83       	std	Z+6, r24	; 0x06
// 	UART0_puts("slave id ");
// 	UART0_OutUDec(slave_id);

	// init the mod bus on Mod Bus
	
	Modbus_init(INVERTER, &s_inv_mod_confg);
     21a:	bf 01       	movw	r22, r30
     21c:	81 e0       	ldi	r24, 0x01	; 1
     21e:	99 c7       	rjmp	.+3890   	; 0x1152 <Modbus_init>
     220:	08 95       	ret

00000222 <Inverter_set_Freq>:
 * parameters  struct of Motor configration of RPm and distance, diameter gear ratio 
 * return Nothing
 */

void Inverter_set_Freq(g_Inveter_Config *In_cofig )
{
     222:	6f 92       	push	r6
     224:	7f 92       	push	r7
     226:	8f 92       	push	r8
     228:	9f 92       	push	r9
     22a:	af 92       	push	r10
     22c:	bf 92       	push	r11
     22e:	cf 92       	push	r12
     230:	df 92       	push	r13
     232:	ef 92       	push	r14
     234:	ff 92       	push	r15
     236:	0f 93       	push	r16
     238:	1f 93       	push	r17
     23a:	cf 93       	push	r28
     23c:	df 93       	push	r29
     23e:	8c 01       	movw	r16, r24
	
	
	//Modbus_Write_single_register(INVERTER,0x2001,5000);// Motor speed on address 0x2001 
	Motor_config = In_cofig; // transform our data to global struct
     240:	90 93 88 0c 	sts	0x0C88, r25	; 0x800c88 <Motor_config+0x1>
     244:	80 93 87 0c 	sts	0x0C87, r24	; 0x800c87 <Motor_config>
	// calculated the whole timer
	float time_user =(float)(Motor_config->time_user_S/60) + (Motor_config->time_user_M);
	 // calculated the Rpm required For motor
	float rpm_required = (float)(Motor_config->distance *  Motor_config->gear_ratio) / (float)(time_user * (Motor_config->gear_diameter) * 22 / 7) ;
     248:	fc 01       	movw	r30, r24
     24a:	c0 81       	ld	r28, Z
     24c:	d1 81       	ldd	r29, Z+1	; 0x01
     24e:	82 81       	ldd	r24, Z+2	; 0x02
     250:	93 81       	ldd	r25, Z+3	; 0x03
     252:	c8 9f       	mul	r28, r24
     254:	b0 01       	movw	r22, r0
     256:	c9 9f       	mul	r28, r25
     258:	70 0d       	add	r23, r0
     25a:	d8 9f       	mul	r29, r24
     25c:	70 0d       	add	r23, r0
     25e:	11 24       	eor	r1, r1
     260:	80 e0       	ldi	r24, 0x00	; 0
     262:	90 e0       	ldi	r25, 0x00	; 0
     264:	0e 94 b6 19 	call	0x336c	; 0x336c <__floatunsisf>
     268:	6b 01       	movw	r12, r22
     26a:	7c 01       	movw	r14, r24
     26c:	f8 01       	movw	r30, r16
     26e:	22 85       	ldd	r18, Z+10	; 0x0a
     270:	33 85       	ldd	r19, Z+11	; 0x0b
     272:	a9 e8       	ldi	r26, 0x89	; 137
     274:	b8 e8       	ldi	r27, 0x88	; 136
     276:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <__umulhisi3>
     27a:	96 95       	lsr	r25
     27c:	87 95       	ror	r24
     27e:	92 95       	swap	r25
     280:	82 95       	swap	r24
     282:	8f 70       	andi	r24, 0x0F	; 15
     284:	89 27       	eor	r24, r25
     286:	9f 70       	andi	r25, 0x0F	; 15
     288:	89 27       	eor	r24, r25
     28a:	bc 01       	movw	r22, r24
     28c:	80 e0       	ldi	r24, 0x00	; 0
     28e:	90 e0       	ldi	r25, 0x00	; 0
     290:	0e 94 b6 19 	call	0x336c	; 0x336c <__floatunsisf>
     294:	4b 01       	movw	r8, r22
     296:	5c 01       	movw	r10, r24
     298:	f8 01       	movw	r30, r16
     29a:	60 85       	ldd	r22, Z+8	; 0x08
     29c:	71 85       	ldd	r23, Z+9	; 0x09
     29e:	80 e0       	ldi	r24, 0x00	; 0
     2a0:	90 e0       	ldi	r25, 0x00	; 0
     2a2:	0e 94 b6 19 	call	0x336c	; 0x336c <__floatunsisf>
     2a6:	9b 01       	movw	r18, r22
     2a8:	ac 01       	movw	r20, r24
     2aa:	c5 01       	movw	r24, r10
     2ac:	b4 01       	movw	r22, r8
     2ae:	0e 94 ba 18 	call	0x3174	; 0x3174 <__addsf3>
     2b2:	4b 01       	movw	r8, r22
     2b4:	5c 01       	movw	r10, r24
     2b6:	f8 01       	movw	r30, r16
     2b8:	64 81       	ldd	r22, Z+4	; 0x04
     2ba:	75 81       	ldd	r23, Z+5	; 0x05
     2bc:	80 e0       	ldi	r24, 0x00	; 0
     2be:	90 e0       	ldi	r25, 0x00	; 0
     2c0:	0e 94 b6 19 	call	0x336c	; 0x336c <__floatunsisf>
     2c4:	9b 01       	movw	r18, r22
     2c6:	ac 01       	movw	r20, r24
     2c8:	c5 01       	movw	r24, r10
     2ca:	b4 01       	movw	r22, r8
     2cc:	0e 94 6c 1a 	call	0x34d8	; 0x34d8 <__mulsf3>
     2d0:	20 e0       	ldi	r18, 0x00	; 0
     2d2:	30 e0       	ldi	r19, 0x00	; 0
     2d4:	40 eb       	ldi	r20, 0xB0	; 176
     2d6:	51 e4       	ldi	r21, 0x41	; 65
     2d8:	0e 94 6c 1a 	call	0x34d8	; 0x34d8 <__mulsf3>
     2dc:	20 e0       	ldi	r18, 0x00	; 0
     2de:	30 e0       	ldi	r19, 0x00	; 0
     2e0:	40 ee       	ldi	r20, 0xE0	; 224
     2e2:	50 e4       	ldi	r21, 0x40	; 64
     2e4:	0e 94 22 19 	call	0x3244	; 0x3244 <__divsf3>
     2e8:	9b 01       	movw	r18, r22
     2ea:	ac 01       	movw	r20, r24
     2ec:	c7 01       	movw	r24, r14
     2ee:	b6 01       	movw	r22, r12
     2f0:	0e 94 22 19 	call	0x3244	; 0x3244 <__divsf3>
     2f4:	f6 2e       	mov	r15, r22
     2f6:	e7 2e       	mov	r14, r23
     2f8:	d8 2e       	mov	r13, r24
     2fa:	c9 2e       	mov	r12, r25
	  
	// made the range of the Rpm between 0 and RPM_MAX    
	uint16_t maxRPM =Motor_config->motor_rpm_max;
     2fc:	f8 01       	movw	r30, r16
     2fe:	06 81       	ldd	r16, Z+6	; 0x06
     300:	17 81       	ldd	r17, Z+7	; 0x07
	uint16_t minRPM = maxRPM / 2;    
	if(rpm_required > maxRPM){
     302:	b8 01       	movw	r22, r16
     304:	80 e0       	ldi	r24, 0x00	; 0
     306:	90 e0       	ldi	r25, 0x00	; 0
     308:	0e 94 b6 19 	call	0x336c	; 0x336c <__floatunsisf>
     30c:	b6 2e       	mov	r11, r22
     30e:	a7 2e       	mov	r10, r23
     310:	98 2e       	mov	r9, r24
     312:	89 2e       	mov	r8, r25
     314:	26 2f       	mov	r18, r22
     316:	37 2f       	mov	r19, r23
     318:	48 2f       	mov	r20, r24
     31a:	59 2f       	mov	r21, r25
     31c:	6f 2d       	mov	r22, r15
     31e:	7e 2d       	mov	r23, r14
     320:	8d 2d       	mov	r24, r13
     322:	9c 2d       	mov	r25, r12
     324:	0e 94 68 1a 	call	0x34d0	; 0x34d0 <__gesf2>
     328:	18 16       	cp	r1, r24
     32a:	e4 f0       	brlt	.+56     	; 0x364 <Inverter_set_Freq+0x142>
		    rpm_required = maxRPM;
	   }//End IF
	else if(rpm_required < minRPM){
     32c:	b8 01       	movw	r22, r16
     32e:	76 95       	lsr	r23
     330:	67 95       	ror	r22
     332:	80 e0       	ldi	r24, 0x00	; 0
     334:	90 e0       	ldi	r25, 0x00	; 0
     336:	0e 94 b6 19 	call	0x336c	; 0x336c <__floatunsisf>
     33a:	16 2f       	mov	r17, r22
     33c:	07 2f       	mov	r16, r23
     33e:	78 2e       	mov	r7, r24
     340:	69 2e       	mov	r6, r25
     342:	26 2f       	mov	r18, r22
     344:	37 2f       	mov	r19, r23
     346:	48 2f       	mov	r20, r24
     348:	59 2f       	mov	r21, r25
     34a:	6f 2d       	mov	r22, r15
     34c:	7e 2d       	mov	r23, r14
     34e:	8d 2d       	mov	r24, r13
     350:	9c 2d       	mov	r25, r12
     352:	0e 94 1e 19 	call	0x323c	; 0x323c <__cmpsf2>
     356:	88 23       	and	r24, r24
     358:	4c f4       	brge	.+18     	; 0x36c <Inverter_set_Freq+0x14a>
		    rpm_required = minRPM;
     35a:	f1 2e       	mov	r15, r17
     35c:	e0 2e       	mov	r14, r16
     35e:	d7 2c       	mov	r13, r7
     360:	c6 2c       	mov	r12, r6
     362:	04 c0       	rjmp	.+8      	; 0x36c <Inverter_set_Freq+0x14a>
	  
	// made the range of the Rpm between 0 and RPM_MAX    
	uint16_t maxRPM =Motor_config->motor_rpm_max;
	uint16_t minRPM = maxRPM / 2;    
	if(rpm_required > maxRPM){
		    rpm_required = maxRPM;
     364:	fb 2c       	mov	r15, r11
     366:	ea 2c       	mov	r14, r10
     368:	d9 2c       	mov	r13, r9
     36a:	c8 2c       	mov	r12, r8
	   }//End IF
	else if(rpm_required < minRPM){
		    rpm_required = minRPM;
	    }// END IF
	// Put the value of RPM To Global Value
    g_rpm_Motor = (float)(rpm_required)/(Motor_config->gear_ratio);
     36c:	be 01       	movw	r22, r28
     36e:	80 e0       	ldi	r24, 0x00	; 0
     370:	90 e0       	ldi	r25, 0x00	; 0
     372:	0e 94 b6 19 	call	0x336c	; 0x336c <__floatunsisf>
     376:	9b 01       	movw	r18, r22
     378:	ac 01       	movw	r20, r24
     37a:	6f 2d       	mov	r22, r15
     37c:	7e 2d       	mov	r23, r14
     37e:	8d 2d       	mov	r24, r13
     380:	9c 2d       	mov	r25, r12
     382:	0e 94 22 19 	call	0x3244	; 0x3244 <__divsf3>
     386:	60 93 89 0c 	sts	0x0C89, r22	; 0x800c89 <g_rpm_Motor>
     38a:	70 93 8a 0c 	sts	0x0C8A, r23	; 0x800c8a <g_rpm_Motor+0x1>
     38e:	80 93 8b 0c 	sts	0x0C8B, r24	; 0x800c8b <g_rpm_Motor+0x2>
     392:	90 93 8c 0c 	sts	0x0C8C, r25	; 0x800c8c <g_rpm_Motor+0x3>
	// calculate the settings Frequency
    uint16_t sitting_freq = rpm_required * 5000  / (Motor_config->motor_rpm_max);
     396:	20 e0       	ldi	r18, 0x00	; 0
     398:	30 e4       	ldi	r19, 0x40	; 64
     39a:	4c e9       	ldi	r20, 0x9C	; 156
     39c:	55 e4       	ldi	r21, 0x45	; 69
     39e:	6f 2d       	mov	r22, r15
     3a0:	7e 2d       	mov	r23, r14
     3a2:	8d 2d       	mov	r24, r13
     3a4:	9c 2d       	mov	r25, r12
     3a6:	0e 94 6c 1a 	call	0x34d8	; 0x34d8 <__mulsf3>
     3aa:	2b 2d       	mov	r18, r11
     3ac:	3a 2d       	mov	r19, r10
     3ae:	49 2d       	mov	r20, r9
     3b0:	58 2d       	mov	r21, r8
     3b2:	0e 94 22 19 	call	0x3244	; 0x3244 <__divsf3>
     3b6:	0e 94 8a 19 	call	0x3314	; 0x3314 <__fixunssfsi>
     3ba:	ab 01       	movw	r20, r22
	    // Manual limitation for motor speed
	if(sitting_freq > 5000){
     3bc:	69 38       	cpi	r22, 0x89	; 137
     3be:	73 41       	sbci	r23, 0x13	; 19
     3c0:	38 f4       	brcc	.+14     	; 0x3d0 <Inverter_set_Freq+0x1ae>
		    sitting_freq = 5000;
	}// End IF
	else if(sitting_freq < 2500){
     3c2:	44 3c       	cpi	r20, 0xC4	; 196
     3c4:	89 e0       	ldi	r24, 0x09	; 9
     3c6:	58 07       	cpc	r21, r24
     3c8:	28 f4       	brcc	.+10     	; 0x3d4 <Inverter_set_Freq+0x1b2>
		    sitting_freq = 2500;
     3ca:	44 ec       	ldi	r20, 0xC4	; 196
     3cc:	59 e0       	ldi	r21, 0x09	; 9
     3ce:	02 c0       	rjmp	.+4      	; 0x3d4 <Inverter_set_Freq+0x1b2>
    g_rpm_Motor = (float)(rpm_required)/(Motor_config->gear_ratio);
	// calculate the settings Frequency
    uint16_t sitting_freq = rpm_required * 5000  / (Motor_config->motor_rpm_max);
	    // Manual limitation for motor speed
	if(sitting_freq > 5000){
		    sitting_freq = 5000;
     3d0:	48 e8       	ldi	r20, 0x88	; 136
     3d2:	53 e1       	ldi	r21, 0x13	; 19
		    sitting_freq = 2500;
	}// End IF
    //set new value 
	
	//sitting_freq-=10;
    Modbus_Write_single_register(INVERTER,INVERTER_FRE_ADD,sitting_freq);// Motor speed on address 0x2001 
     3d4:	61 e0       	ldi	r22, 0x01	; 1
     3d6:	70 e2       	ldi	r23, 0x20	; 32
     3d8:	81 e0       	ldi	r24, 0x01	; 1
     3da:	d1 d7       	rcall	.+4002   	; 0x137e <Modbus_Write_single_register>
		  	
}// End Function
     3dc:	df 91       	pop	r29
     3de:	cf 91       	pop	r28
     3e0:	1f 91       	pop	r17
     3e2:	0f 91       	pop	r16
     3e4:	ff 90       	pop	r15
     3e6:	ef 90       	pop	r14
     3e8:	df 90       	pop	r13
     3ea:	cf 90       	pop	r12
     3ec:	bf 90       	pop	r11
     3ee:	af 90       	pop	r10
     3f0:	9f 90       	pop	r9
     3f2:	8f 90       	pop	r8
     3f4:	7f 90       	pop	r7
     3f6:	6f 90       	pop	r6
     3f8:	08 95       	ret

000003fa <Inverter_change_state>:
void Inverter_change_state(uint8_t stat)
{
	if(stat == 0){
     3fa:	81 11       	cpse	r24, r1
     3fc:	07 c0       	rjmp	.+14     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
		 Modbus_Write_single_register(INVERTER,INVERTER_StART_ADD,5);  // Motor off
     3fe:	45 e0       	ldi	r20, 0x05	; 5
     400:	50 e0       	ldi	r21, 0x00	; 0
     402:	60 e0       	ldi	r22, 0x00	; 0
     404:	70 e2       	ldi	r23, 0x20	; 32
     406:	81 e0       	ldi	r24, 0x01	; 1
     408:	ba c7       	rjmp	.+3956   	; 0x137e <Modbus_Write_single_register>
     40a:	08 95       	ret
	}
	else if(stat == 1){
     40c:	81 30       	cpi	r24, 0x01	; 1
     40e:	29 f4       	brne	.+10     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
		 Modbus_Write_single_register(INVERTER,INVERTER_StART_ADD,1);    // Motor On
     410:	41 e0       	ldi	r20, 0x01	; 1
     412:	50 e0       	ldi	r21, 0x00	; 0
     414:	60 e0       	ldi	r22, 0x00	; 0
     416:	70 e2       	ldi	r23, 0x20	; 32
     418:	b2 c7       	rjmp	.+3940   	; 0x137e <Modbus_Write_single_register>
     41a:	08 95       	ret

0000041c <Modbus_mster_transaction>:
		g_mod1_write_address = u16WriteAddress;
		g_mod1_write_qty = (u8State ? 0xFF00 : 0x0000);
		return Modbus_mster_transaction(device, WRITE_SINGLE_COIL);
	}
	return INVALID_DEVICE; //error
}
     41c:	8f 92       	push	r8
     41e:	9f 92       	push	r9
     420:	af 92       	push	r10
     422:	bf 92       	push	r11
     424:	df 92       	push	r13
     426:	ef 92       	push	r14
     428:	ff 92       	push	r15
     42a:	0f 93       	push	r16
     42c:	1f 93       	push	r17
     42e:	cf 93       	push	r28
     430:	df 93       	push	r29
     432:	cd b7       	in	r28, 0x3d	; 61
     434:	de b7       	in	r29, 0x3e	; 62
     436:	da 95       	dec	r29
     438:	0f b6       	in	r0, 0x3f	; 63
     43a:	f8 94       	cli
     43c:	de bf       	out	0x3e, r29	; 62
     43e:	0f be       	out	0x3f, r0	; 63
     440:	cd bf       	out	0x3d, r28	; 61
     442:	d6 2e       	mov	r13, r22
     444:	81 11       	cpse	r24, r1
     446:	f9 c2       	rjmp	.+1522   	; 0xa3a <Modbus_mster_transaction+0x61e>
     448:	80 91 74 05 	lds	r24, 0x0574	; 0x800574 <g_mod0_slave>
     44c:	89 83       	std	Y+1, r24	; 0x01
     44e:	2f ef       	ldi	r18, 0xFF	; 255
     450:	62 13       	cpse	r22, r18
     452:	06 c0       	rjmp	.+12     	; 0x460 <Modbus_mster_transaction+0x44>
     454:	8f e0       	ldi	r24, 0x0F	; 15
     456:	8a 83       	std	Y+2, r24	; 0x02
     458:	68 94       	set
     45a:	bb 24       	eor	r11, r11
     45c:	b1 f8       	bld	r11, 1
     45e:	32 c0       	rjmp	.+100    	; 0x4c4 <Modbus_mster_transaction+0xa8>
     460:	6a 83       	std	Y+2, r22	; 0x02
     462:	81 e0       	ldi	r24, 0x01	; 1
     464:	68 17       	cp	r22, r24
     466:	b8 f0       	brcs	.+46     	; 0x496 <Modbus_mster_transaction+0x7a>
     468:	94 e0       	ldi	r25, 0x04	; 4
     46a:	96 17       	cp	r25, r22
     46c:	18 f4       	brcc	.+6      	; 0x474 <Modbus_mster_transaction+0x58>
     46e:	a7 e1       	ldi	r26, 0x17	; 23
     470:	6a 13       	cpse	r22, r26
     472:	11 c0       	rjmp	.+34     	; 0x496 <Modbus_mster_transaction+0x7a>
     474:	80 91 72 05 	lds	r24, 0x0572	; 0x800572 <g_mod0_read_address>
     478:	90 91 73 05 	lds	r25, 0x0573	; 0x800573 <g_mod0_read_address+0x1>
     47c:	9b 83       	std	Y+3, r25	; 0x03
     47e:	8c 83       	std	Y+4, r24	; 0x04
     480:	80 91 70 05 	lds	r24, 0x0570	; 0x800570 <g_mod0_read_qty>
     484:	90 91 71 05 	lds	r25, 0x0571	; 0x800571 <g_mod0_read_qty+0x1>
     488:	9d 83       	std	Y+5, r25	; 0x05
     48a:	8e 83       	std	Y+6, r24	; 0x06
     48c:	0f 2e       	mov	r0, r31
     48e:	f6 e0       	ldi	r31, 0x06	; 6
     490:	bf 2e       	mov	r11, r31
     492:	f0 2d       	mov	r31, r0
     494:	03 c0       	rjmp	.+6      	; 0x49c <Modbus_mster_transaction+0x80>
     496:	68 94       	set
     498:	bb 24       	eor	r11, r11
     49a:	b1 f8       	bld	r11, 1
     49c:	b0 e1       	ldi	r27, 0x10	; 16
     49e:	bd 15       	cp	r27, r13
     4a0:	40 f0       	brcs	.+16     	; 0x4b2 <Modbus_mster_transaction+0x96>
     4a2:	ef e0       	ldi	r30, 0x0F	; 15
     4a4:	de 16       	cp	r13, r30
     4a6:	70 f4       	brcc	.+28     	; 0x4c4 <Modbus_mster_transaction+0xa8>
     4a8:	8b ef       	ldi	r24, 0xFB	; 251
     4aa:	8d 0d       	add	r24, r13
     4ac:	82 30       	cpi	r24, 0x02	; 2
     4ae:	00 f5       	brcc	.+64     	; 0x4f0 <Modbus_mster_transaction+0xd4>
     4b0:	09 c0       	rjmp	.+18     	; 0x4c4 <Modbus_mster_transaction+0xa8>
     4b2:	f6 e1       	ldi	r31, 0x16	; 22
     4b4:	df 16       	cp	r13, r31
     4b6:	e0 f0       	brcs	.+56     	; 0x4f0 <Modbus_mster_transaction+0xd4>
     4b8:	27 e1       	ldi	r18, 0x17	; 23
     4ba:	2d 15       	cp	r18, r13
     4bc:	18 f4       	brcc	.+6      	; 0x4c4 <Modbus_mster_transaction+0xa8>
     4be:	8f ef       	ldi	r24, 0xFF	; 255
     4c0:	d8 12       	cpse	r13, r24
     4c2:	16 c0       	rjmp	.+44     	; 0x4f0 <Modbus_mster_transaction+0xd4>
     4c4:	90 91 ee 04 	lds	r25, 0x04EE	; 0x8004ee <g_mod0_write_address>
     4c8:	80 91 ef 04 	lds	r24, 0x04EF	; 0x8004ef <g_mod0_write_address+0x1>
     4cc:	e1 e0       	ldi	r30, 0x01	; 1
     4ce:	f0 e0       	ldi	r31, 0x00	; 0
     4d0:	ec 0f       	add	r30, r28
     4d2:	fd 1f       	adc	r31, r29
     4d4:	eb 0d       	add	r30, r11
     4d6:	f1 1d       	adc	r31, r1
     4d8:	80 83       	st	Z, r24
     4da:	81 e0       	ldi	r24, 0x01	; 1
     4dc:	8b 0d       	add	r24, r11
     4de:	e1 e0       	ldi	r30, 0x01	; 1
     4e0:	f0 e0       	ldi	r31, 0x00	; 0
     4e2:	ec 0f       	add	r30, r28
     4e4:	fd 1f       	adc	r31, r29
     4e6:	e8 0f       	add	r30, r24
     4e8:	f1 1d       	adc	r31, r1
     4ea:	b3 94       	inc	r11
     4ec:	b3 94       	inc	r11
     4ee:	90 83       	st	Z, r25
     4f0:	90 e1       	ldi	r25, 0x10	; 16
     4f2:	d9 16       	cp	r13, r25
     4f4:	09 f4       	brne	.+2      	; 0x4f8 <Modbus_mster_transaction+0xdc>
     4f6:	ad c0       	rjmp	.+346    	; 0x652 <Modbus_mster_transaction+0x236>
     4f8:	9d 15       	cp	r25, r13
     4fa:	58 f0       	brcs	.+22     	; 0x512 <Modbus_mster_transaction+0xf6>
     4fc:	a6 e0       	ldi	r26, 0x06	; 6
     4fe:	da 16       	cp	r13, r26
     500:	61 f1       	breq	.+88     	; 0x55a <Modbus_mster_transaction+0x13e>
     502:	bf e0       	ldi	r27, 0x0F	; 15
     504:	db 16       	cp	r13, r27
     506:	09 f4       	brne	.+2      	; 0x50a <Modbus_mster_transaction+0xee>
     508:	41 c0       	rjmp	.+130    	; 0x58c <Modbus_mster_transaction+0x170>
     50a:	e5 e0       	ldi	r30, 0x05	; 5
     50c:	de 12       	cpse	r13, r30
     50e:	1a c1       	rjmp	.+564    	; 0x744 <Modbus_mster_transaction+0x328>
     510:	0d c0       	rjmp	.+26     	; 0x52c <Modbus_mster_transaction+0x110>
     512:	f7 e1       	ldi	r31, 0x17	; 23
     514:	df 16       	cp	r13, r31
     516:	09 f4       	brne	.+2      	; 0x51a <Modbus_mster_transaction+0xfe>
     518:	9c c0       	rjmp	.+312    	; 0x652 <Modbus_mster_transaction+0x236>
     51a:	2f ef       	ldi	r18, 0xFF	; 255
     51c:	d2 16       	cp	r13, r18
     51e:	09 f4       	brne	.+2      	; 0x522 <Modbus_mster_transaction+0x106>
     520:	98 c0       	rjmp	.+304    	; 0x652 <Modbus_mster_transaction+0x236>
     522:	86 e1       	ldi	r24, 0x16	; 22
     524:	d8 16       	cp	r13, r24
     526:	09 f4       	brne	.+2      	; 0x52a <Modbus_mster_transaction+0x10e>
     528:	df c0       	rjmp	.+446    	; 0x6e8 <Modbus_mster_transaction+0x2cc>
     52a:	0c c1       	rjmp	.+536    	; 0x744 <Modbus_mster_transaction+0x328>
     52c:	90 91 ec 04 	lds	r25, 0x04EC	; 0x8004ec <g_mod0_write_qty>
     530:	80 91 ed 04 	lds	r24, 0x04ED	; 0x8004ed <g_mod0_write_qty+0x1>
     534:	e1 e0       	ldi	r30, 0x01	; 1
     536:	f0 e0       	ldi	r31, 0x00	; 0
     538:	ec 0f       	add	r30, r28
     53a:	fd 1f       	adc	r31, r29
     53c:	eb 0d       	add	r30, r11
     53e:	f1 1d       	adc	r31, r1
     540:	80 83       	st	Z, r24
     542:	81 e0       	ldi	r24, 0x01	; 1
     544:	8b 0d       	add	r24, r11
     546:	e1 e0       	ldi	r30, 0x01	; 1
     548:	f0 e0       	ldi	r31, 0x00	; 0
     54a:	ec 0f       	add	r30, r28
     54c:	fd 1f       	adc	r31, r29
     54e:	e8 0f       	add	r30, r24
     550:	f1 1d       	adc	r31, r1
     552:	b3 94       	inc	r11
     554:	b3 94       	inc	r11
     556:	90 83       	st	Z, r25
     558:	f5 c0       	rjmp	.+490    	; 0x744 <Modbus_mster_transaction+0x328>
     55a:	ec e6       	ldi	r30, 0x6C	; 108
     55c:	f4 e0       	ldi	r31, 0x04	; 4
     55e:	80 81       	ld	r24, Z
     560:	91 81       	ldd	r25, Z+1	; 0x01
     562:	a1 e0       	ldi	r26, 0x01	; 1
     564:	b0 e0       	ldi	r27, 0x00	; 0
     566:	ac 0f       	add	r26, r28
     568:	bd 1f       	adc	r27, r29
     56a:	ab 0d       	add	r26, r11
     56c:	b1 1d       	adc	r27, r1
     56e:	9c 93       	st	X, r25
     570:	20 81       	ld	r18, Z
     572:	31 81       	ldd	r19, Z+1	; 0x01
     574:	81 e0       	ldi	r24, 0x01	; 1
     576:	8b 0d       	add	r24, r11
     578:	e1 e0       	ldi	r30, 0x01	; 1
     57a:	f0 e0       	ldi	r31, 0x00	; 0
     57c:	ec 0f       	add	r30, r28
     57e:	fd 1f       	adc	r31, r29
     580:	e8 0f       	add	r30, r24
     582:	f1 1d       	adc	r31, r1
     584:	b3 94       	inc	r11
     586:	b3 94       	inc	r11
     588:	20 83       	st	Z, r18
     58a:	dc c0       	rjmp	.+440    	; 0x744 <Modbus_mster_transaction+0x328>
     58c:	80 91 ec 04 	lds	r24, 0x04EC	; 0x8004ec <g_mod0_write_qty>
     590:	90 91 ed 04 	lds	r25, 0x04ED	; 0x8004ed <g_mod0_write_qty+0x1>
     594:	e1 e0       	ldi	r30, 0x01	; 1
     596:	f0 e0       	ldi	r31, 0x00	; 0
     598:	ec 0f       	add	r30, r28
     59a:	fd 1f       	adc	r31, r29
     59c:	eb 0d       	add	r30, r11
     59e:	f1 1d       	adc	r31, r1
     5a0:	90 83       	st	Z, r25
     5a2:	32 e0       	ldi	r19, 0x02	; 2
     5a4:	3b 0d       	add	r19, r11
     5a6:	21 e0       	ldi	r18, 0x01	; 1
     5a8:	2b 0d       	add	r18, r11
     5aa:	e1 e0       	ldi	r30, 0x01	; 1
     5ac:	f0 e0       	ldi	r31, 0x00	; 0
     5ae:	ec 0f       	add	r30, r28
     5b0:	fd 1f       	adc	r31, r29
     5b2:	e2 0f       	add	r30, r18
     5b4:	f1 1d       	adc	r31, r1
     5b6:	80 83       	st	Z, r24
     5b8:	ac 01       	movw	r20, r24
     5ba:	47 70       	andi	r20, 0x07	; 7
     5bc:	55 27       	eor	r21, r21
     5be:	45 2b       	or	r20, r21
     5c0:	49 f0       	breq	.+18     	; 0x5d4 <Modbus_mster_transaction+0x1b8>
     5c2:	96 95       	lsr	r25
     5c4:	87 95       	ror	r24
     5c6:	96 95       	lsr	r25
     5c8:	87 95       	ror	r24
     5ca:	96 95       	lsr	r25
     5cc:	87 95       	ror	r24
     5ce:	21 e0       	ldi	r18, 0x01	; 1
     5d0:	28 0f       	add	r18, r24
     5d2:	07 c0       	rjmp	.+14     	; 0x5e2 <Modbus_mster_transaction+0x1c6>
     5d4:	96 95       	lsr	r25
     5d6:	87 95       	ror	r24
     5d8:	96 95       	lsr	r25
     5da:	87 95       	ror	r24
     5dc:	96 95       	lsr	r25
     5de:	87 95       	ror	r24
     5e0:	28 2f       	mov	r18, r24
     5e2:	93 e0       	ldi	r25, 0x03	; 3
     5e4:	b9 0e       	add	r11, r25
     5e6:	fe 01       	movw	r30, r28
     5e8:	e3 0f       	add	r30, r19
     5ea:	f1 1d       	adc	r31, r1
     5ec:	21 83       	std	Z+1, r18	; 0x01
     5ee:	22 23       	and	r18, r18
     5f0:	09 f4       	brne	.+2      	; 0x5f4 <Modbus_mster_transaction+0x1d8>
     5f2:	a8 c0       	rjmp	.+336    	; 0x744 <Modbus_mster_transaction+0x328>
     5f4:	80 e0       	ldi	r24, 0x00	; 0
     5f6:	98 2f       	mov	r25, r24
     5f8:	91 70       	andi	r25, 0x01	; 1
     5fa:	80 ff       	sbrs	r24, 0
     5fc:	03 c0       	rjmp	.+6      	; 0x604 <Modbus_mster_transaction+0x1e8>
     5fe:	91 30       	cpi	r25, 0x01	; 1
     600:	99 f0       	breq	.+38     	; 0x628 <Modbus_mster_transaction+0x20c>
     602:	23 c0       	rjmp	.+70     	; 0x64a <Modbus_mster_transaction+0x22e>
     604:	e8 2f       	mov	r30, r24
     606:	e6 95       	lsr	r30
     608:	f0 e0       	ldi	r31, 0x00	; 0
     60a:	ee 0f       	add	r30, r30
     60c:	ff 1f       	adc	r31, r31
     60e:	e4 59       	subi	r30, 0x94	; 148
     610:	fb 4f       	sbci	r31, 0xFB	; 251
     612:	40 81       	ld	r20, Z
     614:	51 81       	ldd	r21, Z+1	; 0x01
     616:	e1 e0       	ldi	r30, 0x01	; 1
     618:	f0 e0       	ldi	r31, 0x00	; 0
     61a:	ec 0f       	add	r30, r28
     61c:	fd 1f       	adc	r31, r29
     61e:	eb 0d       	add	r30, r11
     620:	f1 1d       	adc	r31, r1
     622:	40 83       	st	Z, r20
     624:	b3 94       	inc	r11
     626:	11 c0       	rjmp	.+34     	; 0x64a <Modbus_mster_transaction+0x22e>
     628:	e8 2f       	mov	r30, r24
     62a:	e6 95       	lsr	r30
     62c:	f0 e0       	ldi	r31, 0x00	; 0
     62e:	ee 0f       	add	r30, r30
     630:	ff 1f       	adc	r31, r31
     632:	e4 59       	subi	r30, 0x94	; 148
     634:	fb 4f       	sbci	r31, 0xFB	; 251
     636:	40 81       	ld	r20, Z
     638:	51 81       	ldd	r21, Z+1	; 0x01
     63a:	e1 e0       	ldi	r30, 0x01	; 1
     63c:	f0 e0       	ldi	r31, 0x00	; 0
     63e:	ec 0f       	add	r30, r28
     640:	fd 1f       	adc	r31, r29
     642:	eb 0d       	add	r30, r11
     644:	f1 1d       	adc	r31, r1
     646:	50 83       	st	Z, r21
     648:	b3 94       	inc	r11
     64a:	8f 5f       	subi	r24, 0xFF	; 255
     64c:	28 13       	cpse	r18, r24
     64e:	d3 cf       	rjmp	.-90     	; 0x5f6 <Modbus_mster_transaction+0x1da>
     650:	79 c0       	rjmp	.+242    	; 0x744 <Modbus_mster_transaction+0x328>
     652:	60 91 ec 04 	lds	r22, 0x04EC	; 0x8004ec <g_mod0_write_qty>
     656:	70 91 ed 04 	lds	r23, 0x04ED	; 0x8004ed <g_mod0_write_qty+0x1>
     65a:	e1 e0       	ldi	r30, 0x01	; 1
     65c:	f0 e0       	ldi	r31, 0x00	; 0
     65e:	ec 0f       	add	r30, r28
     660:	fd 1f       	adc	r31, r29
     662:	eb 0d       	add	r30, r11
     664:	f1 1d       	adc	r31, r1
     666:	70 83       	st	Z, r23
     668:	81 e0       	ldi	r24, 0x01	; 1
     66a:	8b 0d       	add	r24, r11
     66c:	e1 e0       	ldi	r30, 0x01	; 1
     66e:	f0 e0       	ldi	r31, 0x00	; 0
     670:	ec 0f       	add	r30, r28
     672:	fd 1f       	adc	r31, r29
     674:	e8 0f       	add	r30, r24
     676:	f1 1d       	adc	r31, r1
     678:	60 83       	st	Z, r22
     67a:	82 e0       	ldi	r24, 0x02	; 2
     67c:	8b 0d       	add	r24, r11
     67e:	e1 e0       	ldi	r30, 0x01	; 1
     680:	f0 e0       	ldi	r31, 0x00	; 0
     682:	ec 0f       	add	r30, r28
     684:	fd 1f       	adc	r31, r29
     686:	e8 0f       	add	r30, r24
     688:	f1 1d       	adc	r31, r1
     68a:	a3 e0       	ldi	r26, 0x03	; 3
     68c:	ba 0e       	add	r11, r26
     68e:	86 2f       	mov	r24, r22
     690:	88 0f       	add	r24, r24
     692:	80 83       	st	Z, r24
     694:	77 27       	eor	r23, r23
     696:	16 16       	cp	r1, r22
     698:	17 06       	cpc	r1, r23
     69a:	0c f0       	brlt	.+2      	; 0x69e <Modbus_mster_transaction+0x282>
     69c:	53 c0       	rjmp	.+166    	; 0x744 <Modbus_mster_transaction+0x328>
     69e:	80 e0       	ldi	r24, 0x00	; 0
     6a0:	90 e0       	ldi	r25, 0x00	; 0
     6a2:	20 e0       	ldi	r18, 0x00	; 0
     6a4:	88 0f       	add	r24, r24
     6a6:	99 1f       	adc	r25, r25
     6a8:	fc 01       	movw	r30, r24
     6aa:	e4 59       	subi	r30, 0x94	; 148
     6ac:	fb 4f       	sbci	r31, 0xFB	; 251
     6ae:	80 81       	ld	r24, Z
     6b0:	91 81       	ldd	r25, Z+1	; 0x01
     6b2:	a1 e0       	ldi	r26, 0x01	; 1
     6b4:	b0 e0       	ldi	r27, 0x00	; 0
     6b6:	ac 0f       	add	r26, r28
     6b8:	bd 1f       	adc	r27, r29
     6ba:	ab 0d       	add	r26, r11
     6bc:	b1 1d       	adc	r27, r1
     6be:	9c 93       	st	X, r25
     6c0:	40 81       	ld	r20, Z
     6c2:	51 81       	ldd	r21, Z+1	; 0x01
     6c4:	81 e0       	ldi	r24, 0x01	; 1
     6c6:	8b 0d       	add	r24, r11
     6c8:	e1 e0       	ldi	r30, 0x01	; 1
     6ca:	f0 e0       	ldi	r31, 0x00	; 0
     6cc:	ec 0f       	add	r30, r28
     6ce:	fd 1f       	adc	r31, r29
     6d0:	e8 0f       	add	r30, r24
     6d2:	f1 1d       	adc	r31, r1
     6d4:	b3 94       	inc	r11
     6d6:	b3 94       	inc	r11
     6d8:	40 83       	st	Z, r20
     6da:	2f 5f       	subi	r18, 0xFF	; 255
     6dc:	82 2f       	mov	r24, r18
     6de:	90 e0       	ldi	r25, 0x00	; 0
     6e0:	86 17       	cp	r24, r22
     6e2:	97 07       	cpc	r25, r23
     6e4:	fc f2       	brlt	.-66     	; 0x6a4 <Modbus_mster_transaction+0x288>
     6e6:	2e c0       	rjmp	.+92     	; 0x744 <Modbus_mster_transaction+0x328>
     6e8:	ec e6       	ldi	r30, 0x6C	; 108
     6ea:	f4 e0       	ldi	r31, 0x04	; 4
     6ec:	80 81       	ld	r24, Z
     6ee:	91 81       	ldd	r25, Z+1	; 0x01
     6f0:	a1 e0       	ldi	r26, 0x01	; 1
     6f2:	b0 e0       	ldi	r27, 0x00	; 0
     6f4:	ac 0f       	add	r26, r28
     6f6:	bd 1f       	adc	r27, r29
     6f8:	ab 0d       	add	r26, r11
     6fa:	b1 1d       	adc	r27, r1
     6fc:	9c 93       	st	X, r25
     6fe:	80 81       	ld	r24, Z
     700:	91 81       	ldd	r25, Z+1	; 0x01
     702:	91 e0       	ldi	r25, 0x01	; 1
     704:	9b 0d       	add	r25, r11
     706:	a1 e0       	ldi	r26, 0x01	; 1
     708:	b0 e0       	ldi	r27, 0x00	; 0
     70a:	ac 0f       	add	r26, r28
     70c:	bd 1f       	adc	r27, r29
     70e:	a9 0f       	add	r26, r25
     710:	b1 1d       	adc	r27, r1
     712:	8c 93       	st	X, r24
     714:	82 81       	ldd	r24, Z+2	; 0x02
     716:	93 81       	ldd	r25, Z+3	; 0x03
     718:	82 e0       	ldi	r24, 0x02	; 2
     71a:	8b 0d       	add	r24, r11
     71c:	a1 e0       	ldi	r26, 0x01	; 1
     71e:	b0 e0       	ldi	r27, 0x00	; 0
     720:	ac 0f       	add	r26, r28
     722:	bd 1f       	adc	r27, r29
     724:	a8 0f       	add	r26, r24
     726:	b1 1d       	adc	r27, r1
     728:	9c 93       	st	X, r25
     72a:	22 81       	ldd	r18, Z+2	; 0x02
     72c:	33 81       	ldd	r19, Z+3	; 0x03
     72e:	83 e0       	ldi	r24, 0x03	; 3
     730:	8b 0d       	add	r24, r11
     732:	e1 e0       	ldi	r30, 0x01	; 1
     734:	f0 e0       	ldi	r31, 0x00	; 0
     736:	ec 0f       	add	r30, r28
     738:	fd 1f       	adc	r31, r29
     73a:	e8 0f       	add	r30, r24
     73c:	f1 1d       	adc	r31, r1
     73e:	b4 e0       	ldi	r27, 0x04	; 4
     740:	bb 0e       	add	r11, r27
     742:	20 83       	st	Z, r18
     744:	bb 20       	and	r11, r11
     746:	b9 f0       	breq	.+46     	; 0x776 <Modbus_mster_transaction+0x35a>
     748:	8e 01       	movw	r16, r28
     74a:	0f 5f       	subi	r16, 0xFF	; 255
     74c:	1f 4f       	sbci	r17, 0xFF	; 255
     74e:	ee 24       	eor	r14, r14
     750:	ea 94       	dec	r14
     752:	eb 0c       	add	r14, r11
     754:	f1 2c       	mov	r15, r1
     756:	ef ef       	ldi	r30, 0xFF	; 255
     758:	ee 1a       	sub	r14, r30
     75a:	fe 0a       	sbc	r15, r30
     75c:	e0 0e       	add	r14, r16
     75e:	f1 1e       	adc	r15, r17
     760:	8f ef       	ldi	r24, 0xFF	; 255
     762:	9f ef       	ldi	r25, 0xFF	; 255
     764:	d8 01       	movw	r26, r16
     766:	6d 91       	ld	r22, X+
     768:	8d 01       	movw	r16, r26
     76a:	0e 94 68 18 	call	0x30d0	; 0x30d0 <crc16_update>
     76e:	0e 15       	cp	r16, r14
     770:	1f 05       	cpc	r17, r15
     772:	c1 f7       	brne	.-16     	; 0x764 <Modbus_mster_transaction+0x348>
     774:	02 c0       	rjmp	.+4      	; 0x77a <Modbus_mster_transaction+0x35e>
     776:	8f ef       	ldi	r24, 0xFF	; 255
     778:	9f ef       	ldi	r25, 0xFF	; 255
     77a:	ee 24       	eor	r14, r14
     77c:	e3 94       	inc	r14
     77e:	eb 0c       	add	r14, r11
     780:	e1 e0       	ldi	r30, 0x01	; 1
     782:	f0 e0       	ldi	r31, 0x00	; 0
     784:	ec 0f       	add	r30, r28
     786:	fd 1f       	adc	r31, r29
     788:	eb 0d       	add	r30, r11
     78a:	f1 1d       	adc	r31, r1
     78c:	80 83       	st	Z, r24
     78e:	b3 94       	inc	r11
     790:	b3 94       	inc	r11
     792:	e1 e0       	ldi	r30, 0x01	; 1
     794:	f0 e0       	ldi	r31, 0x00	; 0
     796:	ec 0f       	add	r30, r28
     798:	fd 1f       	adc	r31, r29
     79a:	ee 0d       	add	r30, r14
     79c:	f1 1d       	adc	r31, r1
     79e:	90 83       	st	Z, r25
     7a0:	e1 e0       	ldi	r30, 0x01	; 1
     7a2:	f0 e0       	ldi	r31, 0x00	; 0
     7a4:	ec 0f       	add	r30, r28
     7a6:	fd 1f       	adc	r31, r29
     7a8:	eb 0d       	add	r30, r11
     7aa:	f1 1d       	adc	r31, r1
     7ac:	10 82       	st	Z, r1
     7ae:	e0 91 5f 04 	lds	r30, 0x045F	; 0x80045f <g_mod0_Serial_getc>
     7b2:	f0 91 60 04 	lds	r31, 0x0460	; 0x800460 <g_mod0_Serial_getc+0x1>
     7b6:	19 95       	eicall
     7b8:	81 15       	cp	r24, r1
     7ba:	91 40       	sbci	r25, 0x01	; 1
     7bc:	c1 f7       	brne	.-16     	; 0x7ae <Modbus_mster_transaction+0x392>
     7be:	e0 91 65 04 	lds	r30, 0x0465	; 0x800465 <g_mod0_pre_transmission>
     7c2:	f0 91 66 04 	lds	r31, 0x0466	; 0x800466 <g_mod0_pre_transmission+0x1>
     7c6:	30 97       	sbiw	r30, 0x00	; 0
     7c8:	09 f0       	breq	.+2      	; 0x7cc <Modbus_mster_transaction+0x3b0>
     7ca:	19 95       	eicall
     7cc:	bb 20       	and	r11, r11
     7ce:	a1 f0       	breq	.+40     	; 0x7f8 <Modbus_mster_transaction+0x3dc>
     7d0:	8e 01       	movw	r16, r28
     7d2:	0f 5f       	subi	r16, 0xFF	; 255
     7d4:	1f 4f       	sbci	r17, 0xFF	; 255
     7d6:	f1 2c       	mov	r15, r1
     7d8:	ef ef       	ldi	r30, 0xFF	; 255
     7da:	ee 1a       	sub	r14, r30
     7dc:	fe 0a       	sbc	r15, r30
     7de:	e0 0e       	add	r14, r16
     7e0:	f1 1e       	adc	r15, r17
     7e2:	e0 91 61 04 	lds	r30, 0x0461	; 0x800461 <g_mod0_Serial_putc>
     7e6:	f0 91 62 04 	lds	r31, 0x0462	; 0x800462 <g_mod0_Serial_putc+0x1>
     7ea:	d8 01       	movw	r26, r16
     7ec:	8d 91       	ld	r24, X+
     7ee:	8d 01       	movw	r16, r26
     7f0:	19 95       	eicall
     7f2:	0e 15       	cp	r16, r14
     7f4:	1f 05       	cpc	r17, r15
     7f6:	a9 f7       	brne	.-22     	; 0x7e2 <Modbus_mster_transaction+0x3c6>
     7f8:	e0 91 5d 04 	lds	r30, 0x045D	; 0x80045d <g_mod0_Serial_flush>
     7fc:	f0 91 5e 04 	lds	r31, 0x045E	; 0x80045e <g_mod0_Serial_flush+0x1>
     800:	19 95       	eicall
     802:	ef e8       	ldi	r30, 0x8F	; 143
     804:	f1 e0       	ldi	r31, 0x01	; 1
     806:	31 97       	sbiw	r30, 0x01	; 1
     808:	f1 f7       	brne	.-4      	; 0x806 <Modbus_mster_transaction+0x3ea>
     80a:	00 c0       	rjmp	.+0      	; 0x80c <Modbus_mster_transaction+0x3f0>
     80c:	00 00       	nop
     80e:	e0 91 63 04 	lds	r30, 0x0463	; 0x800463 <g_mod0_post_transmission>
     812:	f0 91 64 04 	lds	r31, 0x0464	; 0x800464 <g_mod0_post_transmission+0x1>
     816:	30 97       	sbiw	r30, 0x00	; 0
     818:	09 f0       	breq	.+2      	; 0x81c <Modbus_mster_transaction+0x400>
     81a:	19 95       	eicall
     81c:	0e 94 89 18 	call	0x3112	; 0x3112 <Get_millis>
     820:	4b 01       	movw	r8, r22
     822:	5c 01       	movw	r10, r24
     824:	08 e0       	ldi	r16, 0x08	; 8
     826:	10 e0       	ldi	r17, 0x00	; 0
     828:	ed 2c       	mov	r14, r13
     82a:	f1 2c       	mov	r15, r1
     82c:	e0 91 5b 04 	lds	r30, 0x045B	; 0x80045b <g_mod0_Serial_available>
     830:	f0 91 5c 04 	lds	r31, 0x045C	; 0x80045c <g_mod0_Serial_available+0x1>
     834:	19 95       	eicall
     836:	89 2b       	or	r24, r25
     838:	91 f0       	breq	.+36     	; 0x85e <Modbus_mster_transaction+0x442>
     83a:	dd 24       	eor	r13, r13
     83c:	d3 94       	inc	r13
     83e:	d1 0e       	add	r13, r17
     840:	e0 91 5f 04 	lds	r30, 0x045F	; 0x80045f <g_mod0_Serial_getc>
     844:	f0 91 60 04 	lds	r31, 0x0460	; 0x800460 <g_mod0_Serial_getc+0x1>
     848:	19 95       	eicall
     84a:	e1 e0       	ldi	r30, 0x01	; 1
     84c:	f0 e0       	ldi	r31, 0x00	; 0
     84e:	ec 0f       	add	r30, r28
     850:	fd 1f       	adc	r31, r29
     852:	e1 0f       	add	r30, r17
     854:	f1 1d       	adc	r31, r1
     856:	80 83       	st	Z, r24
     858:	01 50       	subi	r16, 0x01	; 1
     85a:	1d 2d       	mov	r17, r13
     85c:	07 c0       	rjmp	.+14     	; 0x86c <Modbus_mster_transaction+0x450>
     85e:	e0 91 67 04 	lds	r30, 0x0467	; 0x800467 <g_mod0_idle>
     862:	f0 91 68 04 	lds	r31, 0x0468	; 0x800468 <g_mod0_idle+0x1>
     866:	30 97       	sbiw	r30, 0x00	; 0
     868:	09 f0       	breq	.+2      	; 0x86c <Modbus_mster_transaction+0x450>
     86a:	19 95       	eicall
     86c:	15 30       	cpi	r17, 0x05	; 5
     86e:	59 f5       	brne	.+86     	; 0x8c6 <Modbus_mster_transaction+0x4aa>
     870:	99 81       	ldd	r25, Y+1	; 0x01
     872:	80 91 74 05 	lds	r24, 0x0574	; 0x800574 <g_mod0_slave>
     876:	98 13       	cpse	r25, r24
     878:	4e c4       	rjmp	.+2204   	; 0x1116 <Modbus_mster_transaction+0xcfa>
     87a:	8a 81       	ldd	r24, Y+2	; 0x02
     87c:	28 2f       	mov	r18, r24
     87e:	2f 77       	andi	r18, 0x7F	; 127
     880:	30 e0       	ldi	r19, 0x00	; 0
     882:	2e 15       	cp	r18, r14
     884:	3f 05       	cpc	r19, r15
     886:	09 f0       	breq	.+2      	; 0x88a <Modbus_mster_transaction+0x46e>
     888:	48 c4       	rjmp	.+2192   	; 0x111a <Modbus_mster_transaction+0xcfe>
     88a:	88 23       	and	r24, r24
     88c:	2c f4       	brge	.+10     	; 0x898 <Modbus_mster_transaction+0x47c>
     88e:	8b 81       	ldd	r24, Y+3	; 0x03
     890:	88 23       	and	r24, r24
     892:	09 f4       	brne	.+2      	; 0x896 <Modbus_mster_transaction+0x47a>
     894:	3f c0       	rjmp	.+126    	; 0x914 <Modbus_mster_transaction+0x4f8>
     896:	cc c0       	rjmp	.+408    	; 0xa30 <Modbus_mster_transaction+0x614>
     898:	81 31       	cpi	r24, 0x11	; 17
     89a:	58 f4       	brcc	.+22     	; 0x8b2 <Modbus_mster_transaction+0x496>
     89c:	8f 30       	cpi	r24, 0x0F	; 15
     89e:	08 f0       	brcs	.+2      	; 0x8a2 <Modbus_mster_transaction+0x486>
     8a0:	cd c3       	rjmp	.+1946   	; 0x103c <Modbus_mster_transaction+0xc20>
     8a2:	81 30       	cpi	r24, 0x01	; 1
     8a4:	80 f0       	brcs	.+32     	; 0x8c6 <Modbus_mster_transaction+0x4aa>
     8a6:	85 30       	cpi	r24, 0x05	; 5
     8a8:	68 f0       	brcs	.+26     	; 0x8c4 <Modbus_mster_transaction+0x4a8>
     8aa:	87 30       	cpi	r24, 0x07	; 7
     8ac:	08 f4       	brcc	.+2      	; 0x8b0 <Modbus_mster_transaction+0x494>
     8ae:	c6 c3       	rjmp	.+1932   	; 0x103c <Modbus_mster_transaction+0xc20>
     8b0:	0a c0       	rjmp	.+20     	; 0x8c6 <Modbus_mster_transaction+0x4aa>
     8b2:	87 31       	cpi	r24, 0x17	; 23
     8b4:	39 f0       	breq	.+14     	; 0x8c4 <Modbus_mster_transaction+0x4a8>
     8b6:	8f 3f       	cpi	r24, 0xFF	; 255
     8b8:	09 f4       	brne	.+2      	; 0x8bc <Modbus_mster_transaction+0x4a0>
     8ba:	c0 c3       	rjmp	.+1920   	; 0x103c <Modbus_mster_transaction+0xc20>
     8bc:	86 31       	cpi	r24, 0x16	; 22
     8be:	19 f4       	brne	.+6      	; 0x8c6 <Modbus_mster_transaction+0x4aa>
     8c0:	05 e0       	ldi	r16, 0x05	; 5
     8c2:	bd c3       	rjmp	.+1914   	; 0x103e <Modbus_mster_transaction+0xc22>
     8c4:	0b 81       	ldd	r16, Y+3	; 0x03
     8c6:	0e 94 89 18 	call	0x3112	; 0x3112 <Get_millis>
     8ca:	dc 01       	movw	r26, r24
     8cc:	cb 01       	movw	r24, r22
     8ce:	88 19       	sub	r24, r8
     8d0:	99 09       	sbc	r25, r9
     8d2:	aa 09       	sbc	r26, r10
     8d4:	bb 09       	sbc	r27, r11
     8d6:	89 3c       	cpi	r24, 0xC9	; 201
     8d8:	91 05       	cpc	r25, r1
     8da:	a1 05       	cpc	r26, r1
     8dc:	b1 05       	cpc	r27, r1
     8de:	08 f4       	brcc	.+2      	; 0x8e2 <Modbus_mster_transaction+0x4c6>
     8e0:	13 c4       	rjmp	.+2086   	; 0x1108 <Modbus_mster_transaction+0xcec>
     8e2:	80 e0       	ldi	r24, 0x00	; 0
     8e4:	92 e0       	ldi	r25, 0x02	; 2
     8e6:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <UART0_puts>
     8ea:	8a e0       	ldi	r24, 0x0A	; 10
     8ec:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <UART0_putc>
     8f0:	01 11       	cpse	r16, r1
     8f2:	15 c4       	rjmp	.+2090   	; 0x111e <Modbus_mster_transaction+0xd02>
     8f4:	82 ee       	ldi	r24, 0xE2	; 226
     8f6:	81 11       	cpse	r24, r1
     8f8:	9b c0       	rjmp	.+310    	; 0xa30 <Modbus_mster_transaction+0x614>
     8fa:	15 30       	cpi	r17, 0x05	; 5
     8fc:	08 f4       	brcc	.+2      	; 0x900 <Modbus_mster_transaction+0x4e4>
     8fe:	bf c3       	rjmp	.+1918   	; 0x107e <Modbus_mster_transaction+0xc62>
     900:	a1 2e       	mov	r10, r17
     902:	b1 2c       	mov	r11, r1
     904:	75 01       	movw	r14, r10
     906:	f2 e0       	ldi	r31, 0x02	; 2
     908:	ef 1a       	sub	r14, r31
     90a:	f1 08       	sbc	r15, r1
     90c:	1e 14       	cp	r1, r14
     90e:	1f 04       	cpc	r1, r15
     910:	5c f0       	brlt	.+22     	; 0x928 <Modbus_mster_transaction+0x50c>
     912:	a4 c3       	rjmp	.+1864   	; 0x105c <Modbus_mster_transaction+0xc40>
     914:	0f 2e       	mov	r0, r31
     916:	f3 e0       	ldi	r31, 0x03	; 3
     918:	ef 2e       	mov	r14, r31
     91a:	f1 2c       	mov	r15, r1
     91c:	f0 2d       	mov	r31, r0
     91e:	0f 2e       	mov	r0, r31
     920:	f5 e0       	ldi	r31, 0x05	; 5
     922:	af 2e       	mov	r10, r31
     924:	b1 2c       	mov	r11, r1
     926:	f0 2d       	mov	r31, r0
     928:	20 e0       	ldi	r18, 0x00	; 0
     92a:	30 e0       	ldi	r19, 0x00	; 0
     92c:	8f ef       	ldi	r24, 0xFF	; 255
     92e:	9f ef       	ldi	r25, 0xFF	; 255
     930:	10 e0       	ldi	r17, 0x00	; 0
     932:	e1 e0       	ldi	r30, 0x01	; 1
     934:	f0 e0       	ldi	r31, 0x00	; 0
     936:	ec 0f       	add	r30, r28
     938:	fd 1f       	adc	r31, r29
     93a:	e2 0f       	add	r30, r18
     93c:	f3 1f       	adc	r31, r19
     93e:	60 81       	ld	r22, Z
     940:	0e 94 68 18 	call	0x30d0	; 0x30d0 <crc16_update>
     944:	1f 5f       	subi	r17, 0xFF	; 255
     946:	21 2f       	mov	r18, r17
     948:	30 e0       	ldi	r19, 0x00	; 0
     94a:	2e 15       	cp	r18, r14
     94c:	3f 05       	cpc	r19, r15
     94e:	8c f3       	brlt	.-30     	; 0x932 <Modbus_mster_transaction+0x516>
     950:	87 c3       	rjmp	.+1806   	; 0x1060 <Modbus_mster_transaction+0xc44>
     952:	89 2f       	mov	r24, r25
     954:	99 27       	eor	r25, r25
     956:	fe 01       	movw	r30, r28
     958:	ea 0d       	add	r30, r10
     95a:	fb 1d       	adc	r31, r11
     95c:	20 81       	ld	r18, Z
     95e:	30 e0       	ldi	r19, 0x00	; 0
     960:	82 17       	cp	r24, r18
     962:	93 07       	cpc	r25, r19
     964:	09 f0       	breq	.+2      	; 0x968 <Modbus_mster_transaction+0x54c>
     966:	89 c3       	rjmp	.+1810   	; 0x107a <Modbus_mster_transaction+0xc5e>
     968:	8a c3       	rjmp	.+1812   	; 0x107e <Modbus_mster_transaction+0xc62>
     96a:	9b 81       	ldd	r25, Y+3	; 0x03
     96c:	96 95       	lsr	r25
     96e:	e9 f5       	brne	.+122    	; 0x9ea <Modbus_mster_transaction+0x5ce>
     970:	80 e0       	ldi	r24, 0x00	; 0
     972:	5e c0       	rjmp	.+188    	; 0xa30 <Modbus_mster_transaction+0x614>
     974:	7b 81       	ldd	r23, Y+3	; 0x03
     976:	97 2f       	mov	r25, r23
     978:	96 95       	lsr	r25
     97a:	09 f4       	brne	.+2      	; 0x97e <Modbus_mster_transaction+0x562>
     97c:	8e c3       	rjmp	.+1820   	; 0x109a <Modbus_mster_transaction+0xc7e>
     97e:	fe 01       	movw	r30, r28
     980:	31 96       	adiw	r30, 0x01	; 1
     982:	40 e0       	ldi	r20, 0x00	; 0
     984:	50 e0       	ldi	r21, 0x00	; 0
     986:	80 e0       	ldi	r24, 0x00	; 0
     988:	80 34       	cpi	r24, 0x40	; 64
     98a:	70 f4       	brcc	.+28     	; 0x9a8 <Modbus_mster_transaction+0x58c>
     98c:	24 81       	ldd	r18, Z+4	; 0x04
     98e:	30 e0       	ldi	r19, 0x00	; 0
     990:	32 2f       	mov	r19, r18
     992:	22 27       	eor	r18, r18
     994:	63 81       	ldd	r22, Z+3	; 0x03
     996:	26 2b       	or	r18, r22
     998:	da 01       	movw	r26, r20
     99a:	aa 0f       	add	r26, r26
     99c:	bb 1f       	adc	r27, r27
     99e:	a0 51       	subi	r26, 0x10	; 16
     9a0:	bb 4f       	sbci	r27, 0xFB	; 251
     9a2:	11 96       	adiw	r26, 0x01	; 1
     9a4:	3c 93       	st	X, r19
     9a6:	2e 93       	st	-X, r18
     9a8:	8f 5f       	subi	r24, 0xFF	; 255
     9aa:	4f 5f       	subi	r20, 0xFF	; 255
     9ac:	5f 4f       	sbci	r21, 0xFF	; 255
     9ae:	32 96       	adiw	r30, 0x02	; 2
     9b0:	89 13       	cpse	r24, r25
     9b2:	ea cf       	rjmp	.-44     	; 0x988 <Modbus_mster_transaction+0x56c>
     9b4:	8f ef       	ldi	r24, 0xFF	; 255
     9b6:	89 0f       	add	r24, r25
     9b8:	80 93 69 04 	sts	0x0469, r24	; 0x800469 <g_mod0_response_buffer_length>
     9bc:	70 ff       	sbrs	r23, 0
     9be:	35 c0       	rjmp	.+106    	; 0xa2a <Modbus_mster_transaction+0x60e>
     9c0:	90 34       	cpi	r25, 0x40	; 64
     9c2:	70 f4       	brcc	.+28     	; 0x9e0 <Modbus_mster_transaction+0x5c4>
     9c4:	29 2f       	mov	r18, r25
     9c6:	30 e0       	ldi	r19, 0x00	; 0
     9c8:	22 0f       	add	r18, r18
     9ca:	33 1f       	adc	r19, r19
     9cc:	fe 01       	movw	r30, r28
     9ce:	e2 0f       	add	r30, r18
     9d0:	f3 1f       	adc	r31, r19
     9d2:	44 81       	ldd	r20, Z+4	; 0x04
     9d4:	50 e0       	ldi	r21, 0x00	; 0
     9d6:	f9 01       	movw	r30, r18
     9d8:	e0 51       	subi	r30, 0x10	; 16
     9da:	fb 4f       	sbci	r31, 0xFB	; 251
     9dc:	51 83       	std	Z+1, r21	; 0x01
     9de:	40 83       	st	Z, r20
     9e0:	9f 5f       	subi	r25, 0xFF	; 255
     9e2:	90 93 69 04 	sts	0x0469, r25	; 0x800469 <g_mod0_response_buffer_length>
     9e6:	80 e0       	ldi	r24, 0x00	; 0
     9e8:	23 c0       	rjmp	.+70     	; 0xa30 <Modbus_mster_transaction+0x614>
     9ea:	fe 01       	movw	r30, r28
     9ec:	31 96       	adiw	r30, 0x01	; 1
     9ee:	40 e0       	ldi	r20, 0x00	; 0
     9f0:	50 e0       	ldi	r21, 0x00	; 0
     9f2:	80 e0       	ldi	r24, 0x00	; 0
     9f4:	80 34       	cpi	r24, 0x40	; 64
     9f6:	70 f4       	brcc	.+28     	; 0xa14 <Modbus_mster_transaction+0x5f8>
     9f8:	23 81       	ldd	r18, Z+3	; 0x03
     9fa:	30 e0       	ldi	r19, 0x00	; 0
     9fc:	32 2f       	mov	r19, r18
     9fe:	22 27       	eor	r18, r18
     a00:	64 81       	ldd	r22, Z+4	; 0x04
     a02:	26 2b       	or	r18, r22
     a04:	da 01       	movw	r26, r20
     a06:	aa 0f       	add	r26, r26
     a08:	bb 1f       	adc	r27, r27
     a0a:	a0 51       	subi	r26, 0x10	; 16
     a0c:	bb 4f       	sbci	r27, 0xFB	; 251
     a0e:	11 96       	adiw	r26, 0x01	; 1
     a10:	3c 93       	st	X, r19
     a12:	2e 93       	st	-X, r18
     a14:	8f 5f       	subi	r24, 0xFF	; 255
     a16:	4f 5f       	subi	r20, 0xFF	; 255
     a18:	5f 4f       	sbci	r21, 0xFF	; 255
     a1a:	32 96       	adiw	r30, 0x02	; 2
     a1c:	89 13       	cpse	r24, r25
     a1e:	ea cf       	rjmp	.-44     	; 0x9f4 <Modbus_mster_transaction+0x5d8>
     a20:	91 50       	subi	r25, 0x01	; 1
     a22:	90 93 69 04 	sts	0x0469, r25	; 0x800469 <g_mod0_response_buffer_length>
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	03 c0       	rjmp	.+6      	; 0xa30 <Modbus_mster_transaction+0x614>
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	01 c0       	rjmp	.+2      	; 0xa30 <Modbus_mster_transaction+0x614>
     a2e:	80 e0       	ldi	r24, 0x00	; 0
     a30:	10 92 6b 04 	sts	0x046B, r1	; 0x80046b <g_mod0_transmit_buffer_index>
     a34:	10 92 6a 04 	sts	0x046A, r1	; 0x80046a <g_mod0_response_buffer_index>
     a38:	7a c3       	rjmp	.+1780   	; 0x112e <Modbus_mster_transaction+0xd12>
     a3a:	81 30       	cpi	r24, 0x01	; 1
     a3c:	09 f0       	breq	.+2      	; 0xa40 <Modbus_mster_transaction+0x624>
     a3e:	fc c2       	rjmp	.+1528   	; 0x1038 <Modbus_mster_transaction+0xc1c>
     a40:	80 91 5a 04 	lds	r24, 0x045A	; 0x80045a <g_mod1_slave>
     a44:	89 83       	std	Y+1, r24	; 0x01
     a46:	2f ef       	ldi	r18, 0xFF	; 255
     a48:	62 13       	cpse	r22, r18
     a4a:	06 c0       	rjmp	.+12     	; 0xa58 <Modbus_mster_transaction+0x63c>
     a4c:	8f e0       	ldi	r24, 0x0F	; 15
     a4e:	8a 83       	std	Y+2, r24	; 0x02
     a50:	68 94       	set
     a52:	bb 24       	eor	r11, r11
     a54:	b1 f8       	bld	r11, 1
     a56:	32 c0       	rjmp	.+100    	; 0xabc <Modbus_mster_transaction+0x6a0>
     a58:	6a 83       	std	Y+2, r22	; 0x02
     a5a:	81 e0       	ldi	r24, 0x01	; 1
     a5c:	68 17       	cp	r22, r24
     a5e:	b8 f0       	brcs	.+46     	; 0xa8e <Modbus_mster_transaction+0x672>
     a60:	94 e0       	ldi	r25, 0x04	; 4
     a62:	96 17       	cp	r25, r22
     a64:	18 f4       	brcc	.+6      	; 0xa6c <Modbus_mster_transaction+0x650>
     a66:	a7 e1       	ldi	r26, 0x17	; 23
     a68:	6a 13       	cpse	r22, r26
     a6a:	11 c0       	rjmp	.+34     	; 0xa8e <Modbus_mster_transaction+0x672>
     a6c:	80 91 54 04 	lds	r24, 0x0454	; 0x800454 <g_mod1_read_address>
     a70:	90 91 55 04 	lds	r25, 0x0455	; 0x800455 <g_mod1_read_address+0x1>
     a74:	9b 83       	std	Y+3, r25	; 0x03
     a76:	8c 83       	std	Y+4, r24	; 0x04
     a78:	80 91 52 04 	lds	r24, 0x0452	; 0x800452 <g_mod1_read_qty>
     a7c:	90 91 53 04 	lds	r25, 0x0453	; 0x800453 <g_mod1_read_qty+0x1>
     a80:	9d 83       	std	Y+5, r25	; 0x05
     a82:	8e 83       	std	Y+6, r24	; 0x06
     a84:	0f 2e       	mov	r0, r31
     a86:	f6 e0       	ldi	r31, 0x06	; 6
     a88:	bf 2e       	mov	r11, r31
     a8a:	f0 2d       	mov	r31, r0
     a8c:	03 c0       	rjmp	.+6      	; 0xa94 <Modbus_mster_transaction+0x678>
     a8e:	68 94       	set
     a90:	bb 24       	eor	r11, r11
     a92:	b1 f8       	bld	r11, 1
     a94:	b0 e1       	ldi	r27, 0x10	; 16
     a96:	bd 15       	cp	r27, r13
     a98:	40 f0       	brcs	.+16     	; 0xaaa <Modbus_mster_transaction+0x68e>
     a9a:	ef e0       	ldi	r30, 0x0F	; 15
     a9c:	de 16       	cp	r13, r30
     a9e:	70 f4       	brcc	.+28     	; 0xabc <Modbus_mster_transaction+0x6a0>
     aa0:	8b ef       	ldi	r24, 0xFB	; 251
     aa2:	8d 0d       	add	r24, r13
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	00 f5       	brcc	.+64     	; 0xae8 <Modbus_mster_transaction+0x6cc>
     aa8:	09 c0       	rjmp	.+18     	; 0xabc <Modbus_mster_transaction+0x6a0>
     aaa:	f6 e1       	ldi	r31, 0x16	; 22
     aac:	df 16       	cp	r13, r31
     aae:	e0 f0       	brcs	.+56     	; 0xae8 <Modbus_mster_transaction+0x6cc>
     ab0:	27 e1       	ldi	r18, 0x17	; 23
     ab2:	2d 15       	cp	r18, r13
     ab4:	18 f4       	brcc	.+6      	; 0xabc <Modbus_mster_transaction+0x6a0>
     ab6:	8f ef       	ldi	r24, 0xFF	; 255
     ab8:	d8 12       	cpse	r13, r24
     aba:	16 c0       	rjmp	.+44     	; 0xae8 <Modbus_mster_transaction+0x6cc>
     abc:	90 91 d0 03 	lds	r25, 0x03D0	; 0x8003d0 <g_mod1_write_address>
     ac0:	80 91 d1 03 	lds	r24, 0x03D1	; 0x8003d1 <g_mod1_write_address+0x1>
     ac4:	e1 e0       	ldi	r30, 0x01	; 1
     ac6:	f0 e0       	ldi	r31, 0x00	; 0
     ac8:	ec 0f       	add	r30, r28
     aca:	fd 1f       	adc	r31, r29
     acc:	eb 0d       	add	r30, r11
     ace:	f1 1d       	adc	r31, r1
     ad0:	80 83       	st	Z, r24
     ad2:	81 e0       	ldi	r24, 0x01	; 1
     ad4:	8b 0d       	add	r24, r11
     ad6:	e1 e0       	ldi	r30, 0x01	; 1
     ad8:	f0 e0       	ldi	r31, 0x00	; 0
     ada:	ec 0f       	add	r30, r28
     adc:	fd 1f       	adc	r31, r29
     ade:	e8 0f       	add	r30, r24
     ae0:	f1 1d       	adc	r31, r1
     ae2:	b3 94       	inc	r11
     ae4:	b3 94       	inc	r11
     ae6:	90 83       	st	Z, r25
     ae8:	90 e1       	ldi	r25, 0x10	; 16
     aea:	d9 16       	cp	r13, r25
     aec:	09 f4       	brne	.+2      	; 0xaf0 <Modbus_mster_transaction+0x6d4>
     aee:	ad c0       	rjmp	.+346    	; 0xc4a <Modbus_mster_transaction+0x82e>
     af0:	9d 15       	cp	r25, r13
     af2:	58 f0       	brcs	.+22     	; 0xb0a <Modbus_mster_transaction+0x6ee>
     af4:	a6 e0       	ldi	r26, 0x06	; 6
     af6:	da 16       	cp	r13, r26
     af8:	61 f1       	breq	.+88     	; 0xb52 <Modbus_mster_transaction+0x736>
     afa:	bf e0       	ldi	r27, 0x0F	; 15
     afc:	db 16       	cp	r13, r27
     afe:	09 f4       	brne	.+2      	; 0xb02 <Modbus_mster_transaction+0x6e6>
     b00:	41 c0       	rjmp	.+130    	; 0xb84 <Modbus_mster_transaction+0x768>
     b02:	e5 e0       	ldi	r30, 0x05	; 5
     b04:	de 12       	cpse	r13, r30
     b06:	1b c1       	rjmp	.+566    	; 0xd3e <Modbus_mster_transaction+0x922>
     b08:	0d c0       	rjmp	.+26     	; 0xb24 <Modbus_mster_transaction+0x708>
     b0a:	f7 e1       	ldi	r31, 0x17	; 23
     b0c:	df 16       	cp	r13, r31
     b0e:	09 f4       	brne	.+2      	; 0xb12 <Modbus_mster_transaction+0x6f6>
     b10:	9c c0       	rjmp	.+312    	; 0xc4a <Modbus_mster_transaction+0x82e>
     b12:	2f ef       	ldi	r18, 0xFF	; 255
     b14:	d2 16       	cp	r13, r18
     b16:	09 f4       	brne	.+2      	; 0xb1a <Modbus_mster_transaction+0x6fe>
     b18:	98 c0       	rjmp	.+304    	; 0xc4a <Modbus_mster_transaction+0x82e>
     b1a:	86 e1       	ldi	r24, 0x16	; 22
     b1c:	d8 16       	cp	r13, r24
     b1e:	09 f4       	brne	.+2      	; 0xb22 <Modbus_mster_transaction+0x706>
     b20:	e0 c0       	rjmp	.+448    	; 0xce2 <Modbus_mster_transaction+0x8c6>
     b22:	0d c1       	rjmp	.+538    	; 0xd3e <Modbus_mster_transaction+0x922>
     b24:	90 91 ce 03 	lds	r25, 0x03CE	; 0x8003ce <g_mod1_write_qty>
     b28:	80 91 cf 03 	lds	r24, 0x03CF	; 0x8003cf <g_mod1_write_qty+0x1>
     b2c:	e1 e0       	ldi	r30, 0x01	; 1
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	ec 0f       	add	r30, r28
     b32:	fd 1f       	adc	r31, r29
     b34:	eb 0d       	add	r30, r11
     b36:	f1 1d       	adc	r31, r1
     b38:	80 83       	st	Z, r24
     b3a:	81 e0       	ldi	r24, 0x01	; 1
     b3c:	8b 0d       	add	r24, r11
     b3e:	e1 e0       	ldi	r30, 0x01	; 1
     b40:	f0 e0       	ldi	r31, 0x00	; 0
     b42:	ec 0f       	add	r30, r28
     b44:	fd 1f       	adc	r31, r29
     b46:	e8 0f       	add	r30, r24
     b48:	f1 1d       	adc	r31, r1
     b4a:	b3 94       	inc	r11
     b4c:	b3 94       	inc	r11
     b4e:	90 83       	st	Z, r25
     b50:	f6 c0       	rjmp	.+492    	; 0xd3e <Modbus_mster_transaction+0x922>
     b52:	ee e4       	ldi	r30, 0x4E	; 78
     b54:	f3 e0       	ldi	r31, 0x03	; 3
     b56:	80 81       	ld	r24, Z
     b58:	91 81       	ldd	r25, Z+1	; 0x01
     b5a:	a1 e0       	ldi	r26, 0x01	; 1
     b5c:	b0 e0       	ldi	r27, 0x00	; 0
     b5e:	ac 0f       	add	r26, r28
     b60:	bd 1f       	adc	r27, r29
     b62:	ab 0d       	add	r26, r11
     b64:	b1 1d       	adc	r27, r1
     b66:	9c 93       	st	X, r25
     b68:	20 81       	ld	r18, Z
     b6a:	31 81       	ldd	r19, Z+1	; 0x01
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	8b 0d       	add	r24, r11
     b70:	e1 e0       	ldi	r30, 0x01	; 1
     b72:	f0 e0       	ldi	r31, 0x00	; 0
     b74:	ec 0f       	add	r30, r28
     b76:	fd 1f       	adc	r31, r29
     b78:	e8 0f       	add	r30, r24
     b7a:	f1 1d       	adc	r31, r1
     b7c:	b3 94       	inc	r11
     b7e:	b3 94       	inc	r11
     b80:	20 83       	st	Z, r18
     b82:	dd c0       	rjmp	.+442    	; 0xd3e <Modbus_mster_transaction+0x922>
     b84:	80 91 ce 03 	lds	r24, 0x03CE	; 0x8003ce <g_mod1_write_qty>
     b88:	90 91 cf 03 	lds	r25, 0x03CF	; 0x8003cf <g_mod1_write_qty+0x1>
     b8c:	e1 e0       	ldi	r30, 0x01	; 1
     b8e:	f0 e0       	ldi	r31, 0x00	; 0
     b90:	ec 0f       	add	r30, r28
     b92:	fd 1f       	adc	r31, r29
     b94:	eb 0d       	add	r30, r11
     b96:	f1 1d       	adc	r31, r1
     b98:	90 83       	st	Z, r25
     b9a:	22 e0       	ldi	r18, 0x02	; 2
     b9c:	2b 0d       	add	r18, r11
     b9e:	31 e0       	ldi	r19, 0x01	; 1
     ba0:	3b 0d       	add	r19, r11
     ba2:	e1 e0       	ldi	r30, 0x01	; 1
     ba4:	f0 e0       	ldi	r31, 0x00	; 0
     ba6:	ec 0f       	add	r30, r28
     ba8:	fd 1f       	adc	r31, r29
     baa:	e3 0f       	add	r30, r19
     bac:	f1 1d       	adc	r31, r1
     bae:	80 83       	st	Z, r24
     bb0:	ac 01       	movw	r20, r24
     bb2:	47 70       	andi	r20, 0x07	; 7
     bb4:	55 27       	eor	r21, r21
     bb6:	45 2b       	or	r20, r21
     bb8:	49 f0       	breq	.+18     	; 0xbcc <Modbus_mster_transaction+0x7b0>
     bba:	96 95       	lsr	r25
     bbc:	87 95       	ror	r24
     bbe:	96 95       	lsr	r25
     bc0:	87 95       	ror	r24
     bc2:	96 95       	lsr	r25
     bc4:	87 95       	ror	r24
     bc6:	91 e0       	ldi	r25, 0x01	; 1
     bc8:	98 0f       	add	r25, r24
     bca:	07 c0       	rjmp	.+14     	; 0xbda <Modbus_mster_transaction+0x7be>
     bcc:	96 95       	lsr	r25
     bce:	87 95       	ror	r24
     bd0:	96 95       	lsr	r25
     bd2:	87 95       	ror	r24
     bd4:	96 95       	lsr	r25
     bd6:	87 95       	ror	r24
     bd8:	98 2f       	mov	r25, r24
     bda:	a3 e0       	ldi	r26, 0x03	; 3
     bdc:	ba 0e       	add	r11, r26
     bde:	fe 01       	movw	r30, r28
     be0:	e2 0f       	add	r30, r18
     be2:	f1 1d       	adc	r31, r1
     be4:	91 83       	std	Z+1, r25	; 0x01
     be6:	99 23       	and	r25, r25
     be8:	09 f4       	brne	.+2      	; 0xbec <Modbus_mster_transaction+0x7d0>
     bea:	a9 c0       	rjmp	.+338    	; 0xd3e <Modbus_mster_transaction+0x922>
     bec:	80 e0       	ldi	r24, 0x00	; 0
     bee:	28 2f       	mov	r18, r24
     bf0:	21 70       	andi	r18, 0x01	; 1
     bf2:	80 ff       	sbrs	r24, 0
     bf4:	03 c0       	rjmp	.+6      	; 0xbfc <Modbus_mster_transaction+0x7e0>
     bf6:	21 30       	cpi	r18, 0x01	; 1
     bf8:	99 f0       	breq	.+38     	; 0xc20 <Modbus_mster_transaction+0x804>
     bfa:	23 c0       	rjmp	.+70     	; 0xc42 <Modbus_mster_transaction+0x826>
     bfc:	e8 2f       	mov	r30, r24
     bfe:	e6 95       	lsr	r30
     c00:	f0 e0       	ldi	r31, 0x00	; 0
     c02:	ee 0f       	add	r30, r30
     c04:	ff 1f       	adc	r31, r31
     c06:	e2 5b       	subi	r30, 0xB2	; 178
     c08:	fc 4f       	sbci	r31, 0xFC	; 252
     c0a:	20 81       	ld	r18, Z
     c0c:	31 81       	ldd	r19, Z+1	; 0x01
     c0e:	e1 e0       	ldi	r30, 0x01	; 1
     c10:	f0 e0       	ldi	r31, 0x00	; 0
     c12:	ec 0f       	add	r30, r28
     c14:	fd 1f       	adc	r31, r29
     c16:	eb 0d       	add	r30, r11
     c18:	f1 1d       	adc	r31, r1
     c1a:	20 83       	st	Z, r18
     c1c:	b3 94       	inc	r11
     c1e:	11 c0       	rjmp	.+34     	; 0xc42 <Modbus_mster_transaction+0x826>
     c20:	e8 2f       	mov	r30, r24
     c22:	e6 95       	lsr	r30
     c24:	f0 e0       	ldi	r31, 0x00	; 0
     c26:	ee 0f       	add	r30, r30
     c28:	ff 1f       	adc	r31, r31
     c2a:	e2 5b       	subi	r30, 0xB2	; 178
     c2c:	fc 4f       	sbci	r31, 0xFC	; 252
     c2e:	20 81       	ld	r18, Z
     c30:	31 81       	ldd	r19, Z+1	; 0x01
     c32:	e1 e0       	ldi	r30, 0x01	; 1
     c34:	f0 e0       	ldi	r31, 0x00	; 0
     c36:	ec 0f       	add	r30, r28
     c38:	fd 1f       	adc	r31, r29
     c3a:	eb 0d       	add	r30, r11
     c3c:	f1 1d       	adc	r31, r1
     c3e:	30 83       	st	Z, r19
     c40:	b3 94       	inc	r11
     c42:	8f 5f       	subi	r24, 0xFF	; 255
     c44:	98 13       	cpse	r25, r24
     c46:	d3 cf       	rjmp	.-90     	; 0xbee <Modbus_mster_transaction+0x7d2>
     c48:	7a c0       	rjmp	.+244    	; 0xd3e <Modbus_mster_transaction+0x922>
     c4a:	80 91 ce 03 	lds	r24, 0x03CE	; 0x8003ce <g_mod1_write_qty>
     c4e:	90 91 cf 03 	lds	r25, 0x03CF	; 0x8003cf <g_mod1_write_qty+0x1>
     c52:	e1 e0       	ldi	r30, 0x01	; 1
     c54:	f0 e0       	ldi	r31, 0x00	; 0
     c56:	ec 0f       	add	r30, r28
     c58:	fd 1f       	adc	r31, r29
     c5a:	eb 0d       	add	r30, r11
     c5c:	f1 1d       	adc	r31, r1
     c5e:	90 83       	st	Z, r25
     c60:	21 e0       	ldi	r18, 0x01	; 1
     c62:	2b 0d       	add	r18, r11
     c64:	e1 e0       	ldi	r30, 0x01	; 1
     c66:	f0 e0       	ldi	r31, 0x00	; 0
     c68:	ec 0f       	add	r30, r28
     c6a:	fd 1f       	adc	r31, r29
     c6c:	e2 0f       	add	r30, r18
     c6e:	f1 1d       	adc	r31, r1
     c70:	80 83       	st	Z, r24
     c72:	22 e0       	ldi	r18, 0x02	; 2
     c74:	2b 0d       	add	r18, r11
     c76:	e1 e0       	ldi	r30, 0x01	; 1
     c78:	f0 e0       	ldi	r31, 0x00	; 0
     c7a:	ec 0f       	add	r30, r28
     c7c:	fd 1f       	adc	r31, r29
     c7e:	e2 0f       	add	r30, r18
     c80:	f1 1d       	adc	r31, r1
     c82:	b3 e0       	ldi	r27, 0x03	; 3
     c84:	bb 0e       	add	r11, r27
     c86:	28 2f       	mov	r18, r24
     c88:	22 0f       	add	r18, r18
     c8a:	20 83       	st	Z, r18
     c8c:	ac 01       	movw	r20, r24
     c8e:	55 27       	eor	r21, r21
     c90:	14 16       	cp	r1, r20
     c92:	15 06       	cpc	r1, r21
     c94:	0c f0       	brlt	.+2      	; 0xc98 <Modbus_mster_transaction+0x87c>
     c96:	53 c0       	rjmp	.+166    	; 0xd3e <Modbus_mster_transaction+0x922>
     c98:	80 e0       	ldi	r24, 0x00	; 0
     c9a:	90 e0       	ldi	r25, 0x00	; 0
     c9c:	20 e0       	ldi	r18, 0x00	; 0
     c9e:	88 0f       	add	r24, r24
     ca0:	99 1f       	adc	r25, r25
     ca2:	fc 01       	movw	r30, r24
     ca4:	e2 5b       	subi	r30, 0xB2	; 178
     ca6:	fc 4f       	sbci	r31, 0xFC	; 252
     ca8:	80 81       	ld	r24, Z
     caa:	91 81       	ldd	r25, Z+1	; 0x01
     cac:	a1 e0       	ldi	r26, 0x01	; 1
     cae:	b0 e0       	ldi	r27, 0x00	; 0
     cb0:	ac 0f       	add	r26, r28
     cb2:	bd 1f       	adc	r27, r29
     cb4:	ab 0d       	add	r26, r11
     cb6:	b1 1d       	adc	r27, r1
     cb8:	9c 93       	st	X, r25
     cba:	60 81       	ld	r22, Z
     cbc:	71 81       	ldd	r23, Z+1	; 0x01
     cbe:	81 e0       	ldi	r24, 0x01	; 1
     cc0:	8b 0d       	add	r24, r11
     cc2:	e1 e0       	ldi	r30, 0x01	; 1
     cc4:	f0 e0       	ldi	r31, 0x00	; 0
     cc6:	ec 0f       	add	r30, r28
     cc8:	fd 1f       	adc	r31, r29
     cca:	e8 0f       	add	r30, r24
     ccc:	f1 1d       	adc	r31, r1
     cce:	b3 94       	inc	r11
     cd0:	b3 94       	inc	r11
     cd2:	60 83       	st	Z, r22
     cd4:	2f 5f       	subi	r18, 0xFF	; 255
     cd6:	82 2f       	mov	r24, r18
     cd8:	90 e0       	ldi	r25, 0x00	; 0
     cda:	84 17       	cp	r24, r20
     cdc:	95 07       	cpc	r25, r21
     cde:	fc f2       	brlt	.-66     	; 0xc9e <Modbus_mster_transaction+0x882>
     ce0:	2e c0       	rjmp	.+92     	; 0xd3e <Modbus_mster_transaction+0x922>
     ce2:	ee e4       	ldi	r30, 0x4E	; 78
     ce4:	f3 e0       	ldi	r31, 0x03	; 3
     ce6:	80 81       	ld	r24, Z
     ce8:	91 81       	ldd	r25, Z+1	; 0x01
     cea:	a1 e0       	ldi	r26, 0x01	; 1
     cec:	b0 e0       	ldi	r27, 0x00	; 0
     cee:	ac 0f       	add	r26, r28
     cf0:	bd 1f       	adc	r27, r29
     cf2:	ab 0d       	add	r26, r11
     cf4:	b1 1d       	adc	r27, r1
     cf6:	9c 93       	st	X, r25
     cf8:	80 81       	ld	r24, Z
     cfa:	91 81       	ldd	r25, Z+1	; 0x01
     cfc:	91 e0       	ldi	r25, 0x01	; 1
     cfe:	9b 0d       	add	r25, r11
     d00:	a1 e0       	ldi	r26, 0x01	; 1
     d02:	b0 e0       	ldi	r27, 0x00	; 0
     d04:	ac 0f       	add	r26, r28
     d06:	bd 1f       	adc	r27, r29
     d08:	a9 0f       	add	r26, r25
     d0a:	b1 1d       	adc	r27, r1
     d0c:	8c 93       	st	X, r24
     d0e:	82 81       	ldd	r24, Z+2	; 0x02
     d10:	93 81       	ldd	r25, Z+3	; 0x03
     d12:	82 e0       	ldi	r24, 0x02	; 2
     d14:	8b 0d       	add	r24, r11
     d16:	a1 e0       	ldi	r26, 0x01	; 1
     d18:	b0 e0       	ldi	r27, 0x00	; 0
     d1a:	ac 0f       	add	r26, r28
     d1c:	bd 1f       	adc	r27, r29
     d1e:	a8 0f       	add	r26, r24
     d20:	b1 1d       	adc	r27, r1
     d22:	9c 93       	st	X, r25
     d24:	22 81       	ldd	r18, Z+2	; 0x02
     d26:	33 81       	ldd	r19, Z+3	; 0x03
     d28:	83 e0       	ldi	r24, 0x03	; 3
     d2a:	8b 0d       	add	r24, r11
     d2c:	e1 e0       	ldi	r30, 0x01	; 1
     d2e:	f0 e0       	ldi	r31, 0x00	; 0
     d30:	ec 0f       	add	r30, r28
     d32:	fd 1f       	adc	r31, r29
     d34:	e8 0f       	add	r30, r24
     d36:	f1 1d       	adc	r31, r1
     d38:	84 e0       	ldi	r24, 0x04	; 4
     d3a:	b8 0e       	add	r11, r24
     d3c:	20 83       	st	Z, r18
     d3e:	bb 20       	and	r11, r11
     d40:	b9 f0       	breq	.+46     	; 0xd70 <Modbus_mster_transaction+0x954>
     d42:	8e 01       	movw	r16, r28
     d44:	0f 5f       	subi	r16, 0xFF	; 255
     d46:	1f 4f       	sbci	r17, 0xFF	; 255
     d48:	ee 24       	eor	r14, r14
     d4a:	ea 94       	dec	r14
     d4c:	eb 0c       	add	r14, r11
     d4e:	f1 2c       	mov	r15, r1
     d50:	9f ef       	ldi	r25, 0xFF	; 255
     d52:	e9 1a       	sub	r14, r25
     d54:	f9 0a       	sbc	r15, r25
     d56:	e0 0e       	add	r14, r16
     d58:	f1 1e       	adc	r15, r17
     d5a:	8f ef       	ldi	r24, 0xFF	; 255
     d5c:	9f ef       	ldi	r25, 0xFF	; 255
     d5e:	d8 01       	movw	r26, r16
     d60:	6d 91       	ld	r22, X+
     d62:	8d 01       	movw	r16, r26
     d64:	0e 94 68 18 	call	0x30d0	; 0x30d0 <crc16_update>
     d68:	0e 15       	cp	r16, r14
     d6a:	1f 05       	cpc	r17, r15
     d6c:	c1 f7       	brne	.-16     	; 0xd5e <Modbus_mster_transaction+0x942>
     d6e:	02 c0       	rjmp	.+4      	; 0xd74 <Modbus_mster_transaction+0x958>
     d70:	8f ef       	ldi	r24, 0xFF	; 255
     d72:	9f ef       	ldi	r25, 0xFF	; 255
     d74:	ee 24       	eor	r14, r14
     d76:	e3 94       	inc	r14
     d78:	eb 0c       	add	r14, r11
     d7a:	e1 e0       	ldi	r30, 0x01	; 1
     d7c:	f0 e0       	ldi	r31, 0x00	; 0
     d7e:	ec 0f       	add	r30, r28
     d80:	fd 1f       	adc	r31, r29
     d82:	eb 0d       	add	r30, r11
     d84:	f1 1d       	adc	r31, r1
     d86:	80 83       	st	Z, r24
     d88:	b3 94       	inc	r11
     d8a:	b3 94       	inc	r11
     d8c:	e1 e0       	ldi	r30, 0x01	; 1
     d8e:	f0 e0       	ldi	r31, 0x00	; 0
     d90:	ec 0f       	add	r30, r28
     d92:	fd 1f       	adc	r31, r29
     d94:	ee 0d       	add	r30, r14
     d96:	f1 1d       	adc	r31, r1
     d98:	90 83       	st	Z, r25
     d9a:	e1 e0       	ldi	r30, 0x01	; 1
     d9c:	f0 e0       	ldi	r31, 0x00	; 0
     d9e:	ec 0f       	add	r30, r28
     da0:	fd 1f       	adc	r31, r29
     da2:	eb 0d       	add	r30, r11
     da4:	f1 1d       	adc	r31, r1
     da6:	10 82       	st	Z, r1
     da8:	e0 91 41 03 	lds	r30, 0x0341	; 0x800341 <g_mod1_Serial_getc>
     dac:	f0 91 42 03 	lds	r31, 0x0342	; 0x800342 <g_mod1_Serial_getc+0x1>
     db0:	19 95       	eicall
     db2:	81 15       	cp	r24, r1
     db4:	91 40       	sbci	r25, 0x01	; 1
     db6:	c1 f7       	brne	.-16     	; 0xda8 <Modbus_mster_transaction+0x98c>
     db8:	e0 91 47 03 	lds	r30, 0x0347	; 0x800347 <g_mod1_pre_transmission>
     dbc:	f0 91 48 03 	lds	r31, 0x0348	; 0x800348 <g_mod1_pre_transmission+0x1>
     dc0:	30 97       	sbiw	r30, 0x00	; 0
     dc2:	09 f0       	breq	.+2      	; 0xdc6 <Modbus_mster_transaction+0x9aa>
     dc4:	19 95       	eicall
     dc6:	bb 20       	and	r11, r11
     dc8:	a1 f0       	breq	.+40     	; 0xdf2 <Modbus_mster_transaction+0x9d6>
     dca:	8e 01       	movw	r16, r28
     dcc:	0f 5f       	subi	r16, 0xFF	; 255
     dce:	1f 4f       	sbci	r17, 0xFF	; 255
     dd0:	f1 2c       	mov	r15, r1
     dd2:	ef ef       	ldi	r30, 0xFF	; 255
     dd4:	ee 1a       	sub	r14, r30
     dd6:	fe 0a       	sbc	r15, r30
     dd8:	e0 0e       	add	r14, r16
     dda:	f1 1e       	adc	r15, r17
     ddc:	e0 91 43 03 	lds	r30, 0x0343	; 0x800343 <g_mod1_Serial_putc>
     de0:	f0 91 44 03 	lds	r31, 0x0344	; 0x800344 <g_mod1_Serial_putc+0x1>
     de4:	d8 01       	movw	r26, r16
     de6:	8d 91       	ld	r24, X+
     de8:	8d 01       	movw	r16, r26
     dea:	19 95       	eicall
     dec:	e0 16       	cp	r14, r16
     dee:	f1 06       	cpc	r15, r17
     df0:	a9 f7       	brne	.-22     	; 0xddc <Modbus_mster_transaction+0x9c0>
     df2:	e0 91 3d 03 	lds	r30, 0x033D	; 0x80033d <g_mod1_Serial_flush>
     df6:	f0 91 3e 03 	lds	r31, 0x033E	; 0x80033e <g_mod1_Serial_flush+0x1>
     dfa:	19 95       	eicall
     dfc:	e7 e0       	ldi	r30, 0x07	; 7
     dfe:	f7 e0       	ldi	r31, 0x07	; 7
     e00:	31 97       	sbiw	r30, 0x01	; 1
     e02:	f1 f7       	brne	.-4      	; 0xe00 <Modbus_mster_transaction+0x9e4>
     e04:	00 c0       	rjmp	.+0      	; 0xe06 <Modbus_mster_transaction+0x9ea>
     e06:	00 00       	nop
     e08:	e0 91 45 03 	lds	r30, 0x0345	; 0x800345 <g_mod1_post_transmission>
     e0c:	f0 91 46 03 	lds	r31, 0x0346	; 0x800346 <g_mod1_post_transmission+0x1>
     e10:	30 97       	sbiw	r30, 0x00	; 0
     e12:	09 f0       	breq	.+2      	; 0xe16 <Modbus_mster_transaction+0x9fa>
     e14:	19 95       	eicall
     e16:	0e 94 89 18 	call	0x3112	; 0x3112 <Get_millis>
     e1a:	4b 01       	movw	r8, r22
     e1c:	5c 01       	movw	r10, r24
     e1e:	18 e0       	ldi	r17, 0x08	; 8
     e20:	00 e0       	ldi	r16, 0x00	; 0
     e22:	ed 2c       	mov	r14, r13
     e24:	f1 2c       	mov	r15, r1
     e26:	e0 91 3f 03 	lds	r30, 0x033F	; 0x80033f <g_mod1_Serial_available>
     e2a:	f0 91 40 03 	lds	r31, 0x0340	; 0x800340 <g_mod1_Serial_available+0x1>
     e2e:	19 95       	eicall
     e30:	89 2b       	or	r24, r25
     e32:	91 f0       	breq	.+36     	; 0xe58 <Modbus_mster_transaction+0xa3c>
     e34:	dd 24       	eor	r13, r13
     e36:	d3 94       	inc	r13
     e38:	d0 0e       	add	r13, r16
     e3a:	e0 91 41 03 	lds	r30, 0x0341	; 0x800341 <g_mod1_Serial_getc>
     e3e:	f0 91 42 03 	lds	r31, 0x0342	; 0x800342 <g_mod1_Serial_getc+0x1>
     e42:	19 95       	eicall
     e44:	e1 e0       	ldi	r30, 0x01	; 1
     e46:	f0 e0       	ldi	r31, 0x00	; 0
     e48:	ec 0f       	add	r30, r28
     e4a:	fd 1f       	adc	r31, r29
     e4c:	e0 0f       	add	r30, r16
     e4e:	f1 1d       	adc	r31, r1
     e50:	80 83       	st	Z, r24
     e52:	11 50       	subi	r17, 0x01	; 1
     e54:	0d 2d       	mov	r16, r13
     e56:	07 c0       	rjmp	.+14     	; 0xe66 <Modbus_mster_transaction+0xa4a>
     e58:	e0 91 49 03 	lds	r30, 0x0349	; 0x800349 <g_mod1_idle>
     e5c:	f0 91 4a 03 	lds	r31, 0x034A	; 0x80034a <g_mod1_idle+0x1>
     e60:	30 97       	sbiw	r30, 0x00	; 0
     e62:	09 f0       	breq	.+2      	; 0xe66 <Modbus_mster_transaction+0xa4a>
     e64:	19 95       	eicall
     e66:	05 30       	cpi	r16, 0x05	; 5
     e68:	a1 f5       	brne	.+104    	; 0xed2 <Modbus_mster_transaction+0xab6>
     e6a:	99 81       	ldd	r25, Y+1	; 0x01
     e6c:	80 91 5a 04 	lds	r24, 0x045A	; 0x80045a <g_mod1_slave>
     e70:	98 13       	cpse	r25, r24
     e72:	57 c1       	rjmp	.+686    	; 0x1122 <Modbus_mster_transaction+0xd06>
     e74:	8a 81       	ldd	r24, Y+2	; 0x02
     e76:	28 2f       	mov	r18, r24
     e78:	2f 77       	andi	r18, 0x7F	; 127
     e7a:	30 e0       	ldi	r19, 0x00	; 0
     e7c:	2e 15       	cp	r18, r14
     e7e:	3f 05       	cpc	r19, r15
     e80:	09 f0       	breq	.+2      	; 0xe84 <Modbus_mster_transaction+0xa68>
     e82:	51 c1       	rjmp	.+674    	; 0x1126 <Modbus_mster_transaction+0xd0a>
     e84:	88 23       	and	r24, r24
     e86:	74 f4       	brge	.+28     	; 0xea4 <Modbus_mster_transaction+0xa88>
     e88:	83 e1       	ldi	r24, 0x13	; 19
     e8a:	92 e0       	ldi	r25, 0x02	; 2
     e8c:	bb d6       	rcall	.+3446   	; 0x1c04 <UART0_puts>
     e8e:	1b 81       	ldd	r17, Y+3	; 0x03
     e90:	61 2f       	mov	r22, r17
     e92:	70 e0       	ldi	r23, 0x00	; 0
     e94:	80 e0       	ldi	r24, 0x00	; 0
     e96:	90 e0       	ldi	r25, 0x00	; 0
     e98:	99 d6       	rcall	.+3378   	; 0x1bcc <UART0_OutUDec>
     e9a:	8a e0       	ldi	r24, 0x0A	; 10
     e9c:	7e d6       	rcall	.+3324   	; 0x1b9a <UART0_putc>
     e9e:	11 23       	and	r17, r17
     ea0:	d1 f1       	breq	.+116    	; 0xf16 <Modbus_mster_transaction+0xafa>
     ea2:	c4 c0       	rjmp	.+392    	; 0x102c <Modbus_mster_transaction+0xc10>
     ea4:	81 31       	cpi	r24, 0x11	; 17
     ea6:	58 f4       	brcc	.+22     	; 0xebe <Modbus_mster_transaction+0xaa2>
     ea8:	8f 30       	cpi	r24, 0x0F	; 15
     eaa:	08 f0       	brcs	.+2      	; 0xeae <Modbus_mster_transaction+0xa92>
     eac:	fa c0       	rjmp	.+500    	; 0x10a2 <Modbus_mster_transaction+0xc86>
     eae:	81 30       	cpi	r24, 0x01	; 1
     eb0:	80 f0       	brcs	.+32     	; 0xed2 <Modbus_mster_transaction+0xab6>
     eb2:	85 30       	cpi	r24, 0x05	; 5
     eb4:	68 f0       	brcs	.+26     	; 0xed0 <Modbus_mster_transaction+0xab4>
     eb6:	87 30       	cpi	r24, 0x07	; 7
     eb8:	08 f4       	brcc	.+2      	; 0xebc <Modbus_mster_transaction+0xaa0>
     eba:	f3 c0       	rjmp	.+486    	; 0x10a2 <Modbus_mster_transaction+0xc86>
     ebc:	0a c0       	rjmp	.+20     	; 0xed2 <Modbus_mster_transaction+0xab6>
     ebe:	87 31       	cpi	r24, 0x17	; 23
     ec0:	39 f0       	breq	.+14     	; 0xed0 <Modbus_mster_transaction+0xab4>
     ec2:	8f 3f       	cpi	r24, 0xFF	; 255
     ec4:	09 f4       	brne	.+2      	; 0xec8 <Modbus_mster_transaction+0xaac>
     ec6:	ed c0       	rjmp	.+474    	; 0x10a2 <Modbus_mster_transaction+0xc86>
     ec8:	86 31       	cpi	r24, 0x16	; 22
     eca:	19 f4       	brne	.+6      	; 0xed2 <Modbus_mster_transaction+0xab6>
     ecc:	15 e0       	ldi	r17, 0x05	; 5
     ece:	ea c0       	rjmp	.+468    	; 0x10a4 <Modbus_mster_transaction+0xc88>
     ed0:	1b 81       	ldd	r17, Y+3	; 0x03
     ed2:	0e 94 89 18 	call	0x3112	; 0x3112 <Get_millis>
     ed6:	dc 01       	movw	r26, r24
     ed8:	cb 01       	movw	r24, r22
     eda:	88 19       	sub	r24, r8
     edc:	99 09       	sbc	r25, r9
     ede:	aa 09       	sbc	r26, r10
     ee0:	bb 09       	sbc	r27, r11
     ee2:	89 3c       	cpi	r24, 0xC9	; 201
     ee4:	91 05       	cpc	r25, r1
     ee6:	a1 05       	cpc	r26, r1
     ee8:	b1 05       	cpc	r27, r1
     eea:	08 f4       	brcc	.+2      	; 0xeee <Modbus_mster_transaction+0xad2>
     eec:	11 c1       	rjmp	.+546    	; 0x1110 <Modbus_mster_transaction+0xcf4>
     eee:	8c e1       	ldi	r24, 0x1C	; 28
     ef0:	92 e0       	ldi	r25, 0x02	; 2
     ef2:	88 d6       	rcall	.+3344   	; 0x1c04 <UART0_puts>
     ef4:	11 11       	cpse	r17, r1
     ef6:	19 c1       	rjmp	.+562    	; 0x112a <Modbus_mster_transaction+0xd0e>
     ef8:	12 ee       	ldi	r17, 0xE2	; 226
     efa:	11 11       	cpse	r17, r1
     efc:	97 c0       	rjmp	.+302    	; 0x102c <Modbus_mster_transaction+0xc10>
     efe:	05 30       	cpi	r16, 0x05	; 5
     f00:	08 f4       	brcc	.+2      	; 0xf04 <Modbus_mster_transaction+0xae8>
     f02:	f0 c0       	rjmp	.+480    	; 0x10e4 <Modbus_mster_transaction+0xcc8>
     f04:	10 e0       	ldi	r17, 0x00	; 0
     f06:	78 01       	movw	r14, r16
     f08:	f2 e0       	ldi	r31, 0x02	; 2
     f0a:	ef 1a       	sub	r14, r31
     f0c:	f1 08       	sbc	r15, r1
     f0e:	1e 14       	cp	r1, r14
     f10:	1f 04       	cpc	r1, r15
     f12:	44 f0       	brlt	.+16     	; 0xf24 <Modbus_mster_transaction+0xb08>
     f14:	d6 c0       	rjmp	.+428    	; 0x10c2 <Modbus_mster_transaction+0xca6>
     f16:	0f 2e       	mov	r0, r31
     f18:	f3 e0       	ldi	r31, 0x03	; 3
     f1a:	ef 2e       	mov	r14, r31
     f1c:	f1 2c       	mov	r15, r1
     f1e:	f0 2d       	mov	r31, r0
     f20:	05 e0       	ldi	r16, 0x05	; 5
     f22:	10 e0       	ldi	r17, 0x00	; 0
     f24:	20 e0       	ldi	r18, 0x00	; 0
     f26:	30 e0       	ldi	r19, 0x00	; 0
     f28:	8f ef       	ldi	r24, 0xFF	; 255
     f2a:	9f ef       	ldi	r25, 0xFF	; 255
     f2c:	d1 2c       	mov	r13, r1
     f2e:	e1 e0       	ldi	r30, 0x01	; 1
     f30:	f0 e0       	ldi	r31, 0x00	; 0
     f32:	ec 0f       	add	r30, r28
     f34:	fd 1f       	adc	r31, r29
     f36:	e2 0f       	add	r30, r18
     f38:	f3 1f       	adc	r31, r19
     f3a:	60 81       	ld	r22, Z
     f3c:	0e 94 68 18 	call	0x30d0	; 0x30d0 <crc16_update>
     f40:	d3 94       	inc	r13
     f42:	2d 2d       	mov	r18, r13
     f44:	30 e0       	ldi	r19, 0x00	; 0
     f46:	2e 15       	cp	r18, r14
     f48:	3f 05       	cpc	r19, r15
     f4a:	8c f3       	brlt	.-30     	; 0xf2e <Modbus_mster_transaction+0xb12>
     f4c:	bc c0       	rjmp	.+376    	; 0x10c6 <Modbus_mster_transaction+0xcaa>
     f4e:	89 2f       	mov	r24, r25
     f50:	99 27       	eor	r25, r25
     f52:	fe 01       	movw	r30, r28
     f54:	e0 0f       	add	r30, r16
     f56:	f1 1f       	adc	r31, r17
     f58:	20 81       	ld	r18, Z
     f5a:	30 e0       	ldi	r19, 0x00	; 0
     f5c:	82 17       	cp	r24, r18
     f5e:	93 07       	cpc	r25, r19
     f60:	09 f0       	breq	.+2      	; 0xf64 <Modbus_mster_transaction+0xb48>
     f62:	be c0       	rjmp	.+380    	; 0x10e0 <Modbus_mster_transaction+0xcc4>
     f64:	bf c0       	rjmp	.+382    	; 0x10e4 <Modbus_mster_transaction+0xcc8>
     f66:	8b 81       	ldd	r24, Y+3	; 0x03
     f68:	86 95       	lsr	r24
     f6a:	e9 f5       	brne	.+122    	; 0xfe6 <Modbus_mster_transaction+0xbca>
     f6c:	10 e0       	ldi	r17, 0x00	; 0
     f6e:	5e c0       	rjmp	.+188    	; 0x102c <Modbus_mster_transaction+0xc10>
     f70:	6b 81       	ldd	r22, Y+3	; 0x03
     f72:	86 2f       	mov	r24, r22
     f74:	86 95       	lsr	r24
     f76:	09 f4       	brne	.+2      	; 0xf7a <Modbus_mster_transaction+0xb5e>
     f78:	c3 c0       	rjmp	.+390    	; 0x1100 <Modbus_mster_transaction+0xce4>
     f7a:	fe 01       	movw	r30, r28
     f7c:	31 96       	adiw	r30, 0x01	; 1
     f7e:	40 e0       	ldi	r20, 0x00	; 0
     f80:	50 e0       	ldi	r21, 0x00	; 0
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	90 34       	cpi	r25, 0x40	; 64
     f86:	70 f4       	brcc	.+28     	; 0xfa4 <Modbus_mster_transaction+0xb88>
     f88:	24 81       	ldd	r18, Z+4	; 0x04
     f8a:	30 e0       	ldi	r19, 0x00	; 0
     f8c:	32 2f       	mov	r19, r18
     f8e:	22 27       	eor	r18, r18
     f90:	73 81       	ldd	r23, Z+3	; 0x03
     f92:	27 2b       	or	r18, r23
     f94:	da 01       	movw	r26, r20
     f96:	aa 0f       	add	r26, r26
     f98:	bb 1f       	adc	r27, r27
     f9a:	ae 52       	subi	r26, 0x2E	; 46
     f9c:	bc 4f       	sbci	r27, 0xFC	; 252
     f9e:	11 96       	adiw	r26, 0x01	; 1
     fa0:	3c 93       	st	X, r19
     fa2:	2e 93       	st	-X, r18
     fa4:	9f 5f       	subi	r25, 0xFF	; 255
     fa6:	4f 5f       	subi	r20, 0xFF	; 255
     fa8:	5f 4f       	sbci	r21, 0xFF	; 255
     faa:	32 96       	adiw	r30, 0x02	; 2
     fac:	98 13       	cpse	r25, r24
     fae:	ea cf       	rjmp	.-44     	; 0xf84 <Modbus_mster_transaction+0xb68>
     fb0:	9f ef       	ldi	r25, 0xFF	; 255
     fb2:	98 0f       	add	r25, r24
     fb4:	90 93 4b 03 	sts	0x034B, r25	; 0x80034b <g_mod1_response_buffer_length>
     fb8:	60 ff       	sbrs	r22, 0
     fba:	35 c0       	rjmp	.+106    	; 0x1026 <Modbus_mster_transaction+0xc0a>
     fbc:	80 34       	cpi	r24, 0x40	; 64
     fbe:	70 f4       	brcc	.+28     	; 0xfdc <Modbus_mster_transaction+0xbc0>
     fc0:	28 2f       	mov	r18, r24
     fc2:	30 e0       	ldi	r19, 0x00	; 0
     fc4:	22 0f       	add	r18, r18
     fc6:	33 1f       	adc	r19, r19
     fc8:	fe 01       	movw	r30, r28
     fca:	e2 0f       	add	r30, r18
     fcc:	f3 1f       	adc	r31, r19
     fce:	44 81       	ldd	r20, Z+4	; 0x04
     fd0:	50 e0       	ldi	r21, 0x00	; 0
     fd2:	f9 01       	movw	r30, r18
     fd4:	ee 52       	subi	r30, 0x2E	; 46
     fd6:	fc 4f       	sbci	r31, 0xFC	; 252
     fd8:	51 83       	std	Z+1, r21	; 0x01
     fda:	40 83       	st	Z, r20
     fdc:	8f 5f       	subi	r24, 0xFF	; 255
     fde:	80 93 4b 03 	sts	0x034B, r24	; 0x80034b <g_mod1_response_buffer_length>
     fe2:	10 e0       	ldi	r17, 0x00	; 0
     fe4:	23 c0       	rjmp	.+70     	; 0x102c <Modbus_mster_transaction+0xc10>
     fe6:	fe 01       	movw	r30, r28
     fe8:	31 96       	adiw	r30, 0x01	; 1
     fea:	40 e0       	ldi	r20, 0x00	; 0
     fec:	50 e0       	ldi	r21, 0x00	; 0
     fee:	90 e0       	ldi	r25, 0x00	; 0
     ff0:	90 34       	cpi	r25, 0x40	; 64
     ff2:	70 f4       	brcc	.+28     	; 0x1010 <Modbus_mster_transaction+0xbf4>
     ff4:	23 81       	ldd	r18, Z+3	; 0x03
     ff6:	30 e0       	ldi	r19, 0x00	; 0
     ff8:	32 2f       	mov	r19, r18
     ffa:	22 27       	eor	r18, r18
     ffc:	64 81       	ldd	r22, Z+4	; 0x04
     ffe:	26 2b       	or	r18, r22
    1000:	da 01       	movw	r26, r20
    1002:	aa 0f       	add	r26, r26
    1004:	bb 1f       	adc	r27, r27
    1006:	ae 52       	subi	r26, 0x2E	; 46
    1008:	bc 4f       	sbci	r27, 0xFC	; 252
    100a:	11 96       	adiw	r26, 0x01	; 1
    100c:	3c 93       	st	X, r19
    100e:	2e 93       	st	-X, r18
    1010:	9f 5f       	subi	r25, 0xFF	; 255
    1012:	4f 5f       	subi	r20, 0xFF	; 255
    1014:	5f 4f       	sbci	r21, 0xFF	; 255
    1016:	32 96       	adiw	r30, 0x02	; 2
    1018:	98 13       	cpse	r25, r24
    101a:	ea cf       	rjmp	.-44     	; 0xff0 <Modbus_mster_transaction+0xbd4>
    101c:	81 50       	subi	r24, 0x01	; 1
    101e:	80 93 4b 03 	sts	0x034B, r24	; 0x80034b <g_mod1_response_buffer_length>
    1022:	10 e0       	ldi	r17, 0x00	; 0
    1024:	03 c0       	rjmp	.+6      	; 0x102c <Modbus_mster_transaction+0xc10>
    1026:	10 e0       	ldi	r17, 0x00	; 0
    1028:	01 c0       	rjmp	.+2      	; 0x102c <Modbus_mster_transaction+0xc10>
    102a:	10 e0       	ldi	r17, 0x00	; 0
    102c:	10 92 4d 03 	sts	0x034D, r1	; 0x80034d <g_mod1_transmit_buffer_index>
    1030:	10 92 4c 03 	sts	0x034C, r1	; 0x80034c <g_mod1_response_buffer_index>
    1034:	81 2f       	mov	r24, r17
    1036:	7b c0       	rjmp	.+246    	; 0x112e <Modbus_mster_transaction+0xd12>
    1038:	84 ee       	ldi	r24, 0xE4	; 228
    103a:	79 c0       	rjmp	.+242    	; 0x112e <Modbus_mster_transaction+0xd12>
    103c:	03 e0       	ldi	r16, 0x03	; 3
    103e:	0e 94 89 18 	call	0x3112	; 0x3112 <Get_millis>
    1042:	dc 01       	movw	r26, r24
    1044:	cb 01       	movw	r24, r22
    1046:	88 19       	sub	r24, r8
    1048:	99 09       	sbc	r25, r9
    104a:	aa 09       	sbc	r26, r10
    104c:	bb 09       	sbc	r27, r11
    104e:	89 3c       	cpi	r24, 0xC9	; 201
    1050:	91 05       	cpc	r25, r1
    1052:	a1 05       	cpc	r26, r1
    1054:	b1 05       	cpc	r27, r1
    1056:	08 f4       	brcc	.+2      	; 0x105a <Modbus_mster_transaction+0xc3e>
    1058:	e9 cb       	rjmp	.-2094   	; 0x82c <Modbus_mster_transaction+0x410>
    105a:	43 cc       	rjmp	.-1914   	; 0x8e2 <Modbus_mster_transaction+0x4c6>
    105c:	8f ef       	ldi	r24, 0xFF	; 255
    105e:	9f ef       	ldi	r25, 0xFF	; 255
    1060:	fe 01       	movw	r30, r28
    1062:	ee 0d       	add	r30, r14
    1064:	ff 1d       	adc	r31, r15
    1066:	21 81       	ldd	r18, Z+1	; 0x01
    1068:	30 e0       	ldi	r19, 0x00	; 0
    106a:	ac 01       	movw	r20, r24
    106c:	55 27       	eor	r21, r21
    106e:	42 17       	cp	r20, r18
    1070:	53 07       	cpc	r21, r19
    1072:	09 f4       	brne	.+2      	; 0x1076 <Modbus_mster_transaction+0xc5a>
    1074:	6e cc       	rjmp	.-1828   	; 0x952 <Modbus_mster_transaction+0x536>
    1076:	83 ee       	ldi	r24, 0xE3	; 227
    1078:	db cc       	rjmp	.-1610   	; 0xa30 <Modbus_mster_transaction+0x614>
    107a:	83 ee       	ldi	r24, 0xE3	; 227
    107c:	d9 cc       	rjmp	.-1614   	; 0xa30 <Modbus_mster_transaction+0x614>
    107e:	8a 81       	ldd	r24, Y+2	; 0x02
    1080:	85 30       	cpi	r24, 0x05	; 5
    1082:	38 f4       	brcc	.+14     	; 0x1092 <Modbus_mster_transaction+0xc76>
    1084:	83 30       	cpi	r24, 0x03	; 3
    1086:	08 f0       	brcs	.+2      	; 0x108a <Modbus_mster_transaction+0xc6e>
    1088:	70 cc       	rjmp	.-1824   	; 0x96a <Modbus_mster_transaction+0x54e>
    108a:	81 30       	cpi	r24, 0x01	; 1
    108c:	08 f0       	brcs	.+2      	; 0x1090 <Modbus_mster_transaction+0xc74>
    108e:	72 cc       	rjmp	.-1820   	; 0x974 <Modbus_mster_transaction+0x558>
    1090:	ce cc       	rjmp	.-1636   	; 0xa2e <Modbus_mster_transaction+0x612>
    1092:	87 31       	cpi	r24, 0x17	; 23
    1094:	09 f4       	brne	.+2      	; 0x1098 <Modbus_mster_transaction+0xc7c>
    1096:	69 cc       	rjmp	.-1838   	; 0x96a <Modbus_mster_transaction+0x54e>
    1098:	ca cc       	rjmp	.-1644   	; 0xa2e <Modbus_mster_transaction+0x612>
    109a:	70 fd       	sbrc	r23, 0
    109c:	93 cc       	rjmp	.-1754   	; 0x9c4 <Modbus_mster_transaction+0x5a8>
    109e:	80 e0       	ldi	r24, 0x00	; 0
    10a0:	c7 cc       	rjmp	.-1650   	; 0xa30 <Modbus_mster_transaction+0x614>
    10a2:	13 e0       	ldi	r17, 0x03	; 3
    10a4:	0e 94 89 18 	call	0x3112	; 0x3112 <Get_millis>
    10a8:	dc 01       	movw	r26, r24
    10aa:	cb 01       	movw	r24, r22
    10ac:	88 19       	sub	r24, r8
    10ae:	99 09       	sbc	r25, r9
    10b0:	aa 09       	sbc	r26, r10
    10b2:	bb 09       	sbc	r27, r11
    10b4:	89 3c       	cpi	r24, 0xC9	; 201
    10b6:	91 05       	cpc	r25, r1
    10b8:	a1 05       	cpc	r26, r1
    10ba:	b1 05       	cpc	r27, r1
    10bc:	08 f4       	brcc	.+2      	; 0x10c0 <Modbus_mster_transaction+0xca4>
    10be:	b3 ce       	rjmp	.-666    	; 0xe26 <Modbus_mster_transaction+0xa0a>
    10c0:	16 cf       	rjmp	.-468    	; 0xeee <Modbus_mster_transaction+0xad2>
    10c2:	8f ef       	ldi	r24, 0xFF	; 255
    10c4:	9f ef       	ldi	r25, 0xFF	; 255
    10c6:	fe 01       	movw	r30, r28
    10c8:	ee 0d       	add	r30, r14
    10ca:	ff 1d       	adc	r31, r15
    10cc:	21 81       	ldd	r18, Z+1	; 0x01
    10ce:	30 e0       	ldi	r19, 0x00	; 0
    10d0:	ac 01       	movw	r20, r24
    10d2:	55 27       	eor	r21, r21
    10d4:	42 17       	cp	r20, r18
    10d6:	53 07       	cpc	r21, r19
    10d8:	09 f4       	brne	.+2      	; 0x10dc <Modbus_mster_transaction+0xcc0>
    10da:	39 cf       	rjmp	.-398    	; 0xf4e <Modbus_mster_transaction+0xb32>
    10dc:	13 ee       	ldi	r17, 0xE3	; 227
    10de:	a6 cf       	rjmp	.-180    	; 0x102c <Modbus_mster_transaction+0xc10>
    10e0:	13 ee       	ldi	r17, 0xE3	; 227
    10e2:	a4 cf       	rjmp	.-184    	; 0x102c <Modbus_mster_transaction+0xc10>
    10e4:	8a 81       	ldd	r24, Y+2	; 0x02
    10e6:	85 30       	cpi	r24, 0x05	; 5
    10e8:	38 f4       	brcc	.+14     	; 0x10f8 <Modbus_mster_transaction+0xcdc>
    10ea:	83 30       	cpi	r24, 0x03	; 3
    10ec:	08 f0       	brcs	.+2      	; 0x10f0 <Modbus_mster_transaction+0xcd4>
    10ee:	3b cf       	rjmp	.-394    	; 0xf66 <Modbus_mster_transaction+0xb4a>
    10f0:	81 30       	cpi	r24, 0x01	; 1
    10f2:	08 f0       	brcs	.+2      	; 0x10f6 <Modbus_mster_transaction+0xcda>
    10f4:	3d cf       	rjmp	.-390    	; 0xf70 <Modbus_mster_transaction+0xb54>
    10f6:	99 cf       	rjmp	.-206    	; 0x102a <Modbus_mster_transaction+0xc0e>
    10f8:	87 31       	cpi	r24, 0x17	; 23
    10fa:	09 f4       	brne	.+2      	; 0x10fe <Modbus_mster_transaction+0xce2>
    10fc:	34 cf       	rjmp	.-408    	; 0xf66 <Modbus_mster_transaction+0xb4a>
    10fe:	95 cf       	rjmp	.-214    	; 0x102a <Modbus_mster_transaction+0xc0e>
    1100:	60 fd       	sbrc	r22, 0
    1102:	5e cf       	rjmp	.-324    	; 0xfc0 <Modbus_mster_transaction+0xba4>
    1104:	10 e0       	ldi	r17, 0x00	; 0
    1106:	92 cf       	rjmp	.-220    	; 0x102c <Modbus_mster_transaction+0xc10>
    1108:	01 11       	cpse	r16, r1
    110a:	90 cb       	rjmp	.-2272   	; 0x82c <Modbus_mster_transaction+0x410>
    110c:	80 e0       	ldi	r24, 0x00	; 0
    110e:	f3 cb       	rjmp	.-2074   	; 0x8f6 <Modbus_mster_transaction+0x4da>
    1110:	11 11       	cpse	r17, r1
    1112:	89 ce       	rjmp	.-750    	; 0xe26 <Modbus_mster_transaction+0xa0a>
    1114:	f2 ce       	rjmp	.-540    	; 0xefa <Modbus_mster_transaction+0xade>
    1116:	80 ee       	ldi	r24, 0xE0	; 224
    1118:	8b cc       	rjmp	.-1770   	; 0xa30 <Modbus_mster_transaction+0x614>
    111a:	81 ee       	ldi	r24, 0xE1	; 225
    111c:	89 cc       	rjmp	.-1774   	; 0xa30 <Modbus_mster_transaction+0x614>
    111e:	82 ee       	ldi	r24, 0xE2	; 226
    1120:	87 cc       	rjmp	.-1778   	; 0xa30 <Modbus_mster_transaction+0x614>
    1122:	10 ee       	ldi	r17, 0xE0	; 224
    1124:	83 cf       	rjmp	.-250    	; 0x102c <Modbus_mster_transaction+0xc10>
    1126:	11 ee       	ldi	r17, 0xE1	; 225
    1128:	81 cf       	rjmp	.-254    	; 0x102c <Modbus_mster_transaction+0xc10>
    112a:	12 ee       	ldi	r17, 0xE2	; 226
    112c:	7f cf       	rjmp	.-258    	; 0x102c <Modbus_mster_transaction+0xc10>
    112e:	d3 95       	inc	r29
    1130:	0f b6       	in	r0, 0x3f	; 63
    1132:	f8 94       	cli
    1134:	de bf       	out	0x3e, r29	; 62
    1136:	0f be       	out	0x3f, r0	; 63
    1138:	cd bf       	out	0x3d, r28	; 61
    113a:	df 91       	pop	r29
    113c:	cf 91       	pop	r28
    113e:	1f 91       	pop	r17
    1140:	0f 91       	pop	r16
    1142:	ff 90       	pop	r15
    1144:	ef 90       	pop	r14
    1146:	df 90       	pop	r13
    1148:	bf 90       	pop	r11
    114a:	af 90       	pop	r10
    114c:	9f 90       	pop	r9
    114e:	8f 90       	pop	r8
    1150:	08 95       	ret

00001152 <Modbus_init>:
    1152:	fb 01       	movw	r30, r22
    1154:	81 11       	cpse	r24, r1
    1156:	88 c0       	rjmp	.+272    	; 0x1268 <Modbus_init+0x116>
    1158:	80 81       	ld	r24, Z
    115a:	80 93 74 05 	sts	0x0574, r24	; 0x800574 <g_mod0_slave>
    115e:	41 81       	ldd	r20, Z+1	; 0x01
    1160:	62 81       	ldd	r22, Z+2	; 0x02
    1162:	73 81       	ldd	r23, Z+3	; 0x03
    1164:	84 81       	ldd	r24, Z+4	; 0x04
    1166:	95 81       	ldd	r25, Z+5	; 0x05
    1168:	26 81       	ldd	r18, Z+6	; 0x06
    116a:	37 81       	ldd	r19, Z+7	; 0x07
    116c:	30 93 66 04 	sts	0x0466, r19	; 0x800466 <g_mod0_pre_transmission+0x1>
    1170:	20 93 65 04 	sts	0x0465, r18	; 0x800465 <g_mod0_pre_transmission>
    1174:	20 85       	ldd	r18, Z+8	; 0x08
    1176:	31 85       	ldd	r19, Z+9	; 0x09
    1178:	30 93 64 04 	sts	0x0464, r19	; 0x800464 <g_mod0_post_transmission+0x1>
    117c:	20 93 63 04 	sts	0x0463, r18	; 0x800463 <g_mod0_post_transmission>
    1180:	22 85       	ldd	r18, Z+10	; 0x0a
    1182:	33 85       	ldd	r19, Z+11	; 0x0b
    1184:	30 93 68 04 	sts	0x0468, r19	; 0x800468 <g_mod0_idle+0x1>
    1188:	20 93 67 04 	sts	0x0467, r18	; 0x800467 <g_mod0_idle>
    118c:	10 92 6a 04 	sts	0x046A, r1	; 0x80046a <g_mod0_response_buffer_index>
    1190:	10 92 69 04 	sts	0x0469, r1	; 0x800469 <g_mod0_response_buffer_length>
    1194:	41 30       	cpi	r20, 0x01	; 1
    1196:	09 f5       	brne	.+66     	; 0x11da <Modbus_init+0x88>
    1198:	20 91 3c 03 	lds	r18, 0x033C	; 0x80033c <UART1_used.1996>
    119c:	21 11       	cpse	r18, r1
    119e:	ee c0       	rjmp	.+476    	; 0x137c <Modbus_init+0x22a>
    11a0:	21 e0       	ldi	r18, 0x01	; 1
    11a2:	20 93 3c 03 	sts	0x033C, r18	; 0x80033c <UART1_used.1996>
    11a6:	aa d5       	rcall	.+2900   	; 0x1cfc <UART1_init>
    11a8:	8c e0       	ldi	r24, 0x0C	; 12
    11aa:	9f e0       	ldi	r25, 0x0F	; 15
    11ac:	90 93 5c 04 	sts	0x045C, r25	; 0x80045c <g_mod0_Serial_available+0x1>
    11b0:	80 93 5b 04 	sts	0x045B, r24	; 0x80045b <g_mod0_Serial_available>
    11b4:	8a e1       	ldi	r24, 0x1A	; 26
    11b6:	9f e0       	ldi	r25, 0x0F	; 15
    11b8:	90 93 5e 04 	sts	0x045E, r25	; 0x80045e <g_mod0_Serial_flush+0x1>
    11bc:	80 93 5d 04 	sts	0x045D, r24	; 0x80045d <g_mod0_Serial_flush>
    11c0:	83 ed       	ldi	r24, 0xD3	; 211
    11c2:	9e e0       	ldi	r25, 0x0E	; 14
    11c4:	90 93 60 04 	sts	0x0460, r25	; 0x800460 <g_mod0_Serial_getc+0x1>
    11c8:	80 93 5f 04 	sts	0x045F, r24	; 0x80045f <g_mod0_Serial_getc>
    11cc:	83 ef       	ldi	r24, 0xF3	; 243
    11ce:	9e e0       	ldi	r25, 0x0E	; 14
    11d0:	90 93 62 04 	sts	0x0462, r25	; 0x800462 <g_mod0_Serial_putc+0x1>
    11d4:	80 93 61 04 	sts	0x0461, r24	; 0x800461 <g_mod0_Serial_putc>
    11d8:	08 95       	ret
    11da:	42 30       	cpi	r20, 0x02	; 2
    11dc:	09 f5       	brne	.+66     	; 0x1220 <Modbus_init+0xce>
    11de:	20 91 3b 03 	lds	r18, 0x033B	; 0x80033b <UART2_used.1997>
    11e2:	21 11       	cpse	r18, r1
    11e4:	cb c0       	rjmp	.+406    	; 0x137c <Modbus_init+0x22a>
    11e6:	21 e0       	ldi	r18, 0x01	; 1
    11e8:	20 93 3b 03 	sts	0x033B, r18	; 0x80033b <UART2_used.1997>
    11ec:	96 d6       	rcall	.+3372   	; 0x1f1a <UART2_init>
    11ee:	88 e1       	ldi	r24, 0x18	; 24
    11f0:	90 e1       	ldi	r25, 0x10	; 16
    11f2:	90 93 5c 04 	sts	0x045C, r25	; 0x80045c <g_mod0_Serial_available+0x1>
    11f6:	80 93 5b 04 	sts	0x045B, r24	; 0x80045b <g_mod0_Serial_available>
    11fa:	86 e2       	ldi	r24, 0x26	; 38
    11fc:	90 e1       	ldi	r25, 0x10	; 16
    11fe:	90 93 5e 04 	sts	0x045E, r25	; 0x80045e <g_mod0_Serial_flush+0x1>
    1202:	80 93 5d 04 	sts	0x045D, r24	; 0x80045d <g_mod0_Serial_flush>
    1206:	82 ee       	ldi	r24, 0xE2	; 226
    1208:	9f e0       	ldi	r25, 0x0F	; 15
    120a:	90 93 60 04 	sts	0x0460, r25	; 0x800460 <g_mod0_Serial_getc+0x1>
    120e:	80 93 5f 04 	sts	0x045F, r24	; 0x80045f <g_mod0_Serial_getc>
    1212:	8f ef       	ldi	r24, 0xFF	; 255
    1214:	9f e0       	ldi	r25, 0x0F	; 15
    1216:	90 93 62 04 	sts	0x0462, r25	; 0x800462 <g_mod0_Serial_putc+0x1>
    121a:	80 93 61 04 	sts	0x0461, r24	; 0x800461 <g_mod0_Serial_putc>
    121e:	08 95       	ret
    1220:	43 30       	cpi	r20, 0x03	; 3
    1222:	09 f0       	breq	.+2      	; 0x1226 <Modbus_init+0xd4>
    1224:	ab c0       	rjmp	.+342    	; 0x137c <Modbus_init+0x22a>
    1226:	20 91 3a 03 	lds	r18, 0x033A	; 0x80033a <UART3_used.1998>
    122a:	21 11       	cpse	r18, r1
    122c:	a7 c0       	rjmp	.+334    	; 0x137c <Modbus_init+0x22a>
    122e:	21 e0       	ldi	r18, 0x01	; 1
    1230:	20 93 3a 03 	sts	0x033A, r18	; 0x80033a <UART3_used.1998>
    1234:	7e d7       	rcall	.+3836   	; 0x2132 <UART3_init>
    1236:	84 e2       	ldi	r24, 0x24	; 36
    1238:	91 e1       	ldi	r25, 0x11	; 17
    123a:	90 93 5c 04 	sts	0x045C, r25	; 0x80045c <g_mod0_Serial_available+0x1>
    123e:	80 93 5b 04 	sts	0x045B, r24	; 0x80045b <g_mod0_Serial_available>
    1242:	82 e3       	ldi	r24, 0x32	; 50
    1244:	91 e1       	ldi	r25, 0x11	; 17
    1246:	90 93 5e 04 	sts	0x045E, r25	; 0x80045e <g_mod0_Serial_flush+0x1>
    124a:	80 93 5d 04 	sts	0x045D, r24	; 0x80045d <g_mod0_Serial_flush>
    124e:	8e ee       	ldi	r24, 0xEE	; 238
    1250:	90 e1       	ldi	r25, 0x10	; 16
    1252:	90 93 60 04 	sts	0x0460, r25	; 0x800460 <g_mod0_Serial_getc+0x1>
    1256:	80 93 5f 04 	sts	0x045F, r24	; 0x80045f <g_mod0_Serial_getc>
    125a:	8b e0       	ldi	r24, 0x0B	; 11
    125c:	91 e1       	ldi	r25, 0x11	; 17
    125e:	90 93 62 04 	sts	0x0462, r25	; 0x800462 <g_mod0_Serial_putc+0x1>
    1262:	80 93 61 04 	sts	0x0461, r24	; 0x800461 <g_mod0_Serial_putc>
    1266:	08 95       	ret
    1268:	81 30       	cpi	r24, 0x01	; 1
    126a:	09 f0       	breq	.+2      	; 0x126e <Modbus_init+0x11c>
    126c:	87 c0       	rjmp	.+270    	; 0x137c <Modbus_init+0x22a>
    126e:	80 81       	ld	r24, Z
    1270:	80 93 5a 04 	sts	0x045A, r24	; 0x80045a <g_mod1_slave>
    1274:	81 81       	ldd	r24, Z+1	; 0x01
    1276:	42 81       	ldd	r20, Z+2	; 0x02
    1278:	53 81       	ldd	r21, Z+3	; 0x03
    127a:	64 81       	ldd	r22, Z+4	; 0x04
    127c:	75 81       	ldd	r23, Z+5	; 0x05
    127e:	40 93 56 04 	sts	0x0456, r20	; 0x800456 <g_mod1_baud_rate>
    1282:	50 93 57 04 	sts	0x0457, r21	; 0x800457 <g_mod1_baud_rate+0x1>
    1286:	60 93 58 04 	sts	0x0458, r22	; 0x800458 <g_mod1_baud_rate+0x2>
    128a:	70 93 59 04 	sts	0x0459, r23	; 0x800459 <g_mod1_baud_rate+0x3>
    128e:	26 81       	ldd	r18, Z+6	; 0x06
    1290:	37 81       	ldd	r19, Z+7	; 0x07
    1292:	30 93 48 03 	sts	0x0348, r19	; 0x800348 <g_mod1_pre_transmission+0x1>
    1296:	20 93 47 03 	sts	0x0347, r18	; 0x800347 <g_mod1_pre_transmission>
    129a:	20 85       	ldd	r18, Z+8	; 0x08
    129c:	31 85       	ldd	r19, Z+9	; 0x09
    129e:	30 93 46 03 	sts	0x0346, r19	; 0x800346 <g_mod1_post_transmission+0x1>
    12a2:	20 93 45 03 	sts	0x0345, r18	; 0x800345 <g_mod1_post_transmission>
    12a6:	22 85       	ldd	r18, Z+10	; 0x0a
    12a8:	33 85       	ldd	r19, Z+11	; 0x0b
    12aa:	30 93 4a 03 	sts	0x034A, r19	; 0x80034a <g_mod1_idle+0x1>
    12ae:	20 93 49 03 	sts	0x0349, r18	; 0x800349 <g_mod1_idle>
    12b2:	10 92 4c 03 	sts	0x034C, r1	; 0x80034c <g_mod1_response_buffer_index>
    12b6:	10 92 4b 03 	sts	0x034B, r1	; 0x80034b <g_mod1_response_buffer_length>
    12ba:	81 30       	cpi	r24, 0x01	; 1
    12bc:	09 f0       	breq	.+2      	; 0x12c0 <Modbus_init+0x16e>
    12be:	3a c0       	rjmp	.+116    	; 0x1334 <Modbus_init+0x1e2>
    12c0:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <UART1_used.1996>
    12c4:	81 11       	cpse	r24, r1
    12c6:	5a c0       	rjmp	.+180    	; 0x137c <Modbus_init+0x22a>
    12c8:	81 e0       	ldi	r24, 0x01	; 1
    12ca:	80 93 3c 03 	sts	0x033C, r24	; 0x80033c <UART1_used.1996>
    12ce:	80 e3       	ldi	r24, 0x30	; 48
    12d0:	92 e0       	ldi	r25, 0x02	; 2
    12d2:	98 d4       	rcall	.+2352   	; 0x1c04 <UART0_puts>
    12d4:	8d e3       	ldi	r24, 0x3D	; 61
    12d6:	92 e0       	ldi	r25, 0x02	; 2
    12d8:	95 d4       	rcall	.+2346   	; 0x1c04 <UART0_puts>
    12da:	60 91 56 04 	lds	r22, 0x0456	; 0x800456 <g_mod1_baud_rate>
    12de:	70 91 57 04 	lds	r23, 0x0457	; 0x800457 <g_mod1_baud_rate+0x1>
    12e2:	80 91 58 04 	lds	r24, 0x0458	; 0x800458 <g_mod1_baud_rate+0x2>
    12e6:	90 91 59 04 	lds	r25, 0x0459	; 0x800459 <g_mod1_baud_rate+0x3>
    12ea:	70 d4       	rcall	.+2272   	; 0x1bcc <UART0_OutUDec>
    12ec:	8a e0       	ldi	r24, 0x0A	; 10
    12ee:	55 d4       	rcall	.+2218   	; 0x1b9a <UART0_putc>
    12f0:	60 91 56 04 	lds	r22, 0x0456	; 0x800456 <g_mod1_baud_rate>
    12f4:	70 91 57 04 	lds	r23, 0x0457	; 0x800457 <g_mod1_baud_rate+0x1>
    12f8:	80 91 58 04 	lds	r24, 0x0458	; 0x800458 <g_mod1_baud_rate+0x2>
    12fc:	90 91 59 04 	lds	r25, 0x0459	; 0x800459 <g_mod1_baud_rate+0x3>
    1300:	fd d4       	rcall	.+2554   	; 0x1cfc <UART1_init>
    1302:	8c e0       	ldi	r24, 0x0C	; 12
    1304:	9f e0       	ldi	r25, 0x0F	; 15
    1306:	90 93 40 03 	sts	0x0340, r25	; 0x800340 <g_mod1_Serial_available+0x1>
    130a:	80 93 3f 03 	sts	0x033F, r24	; 0x80033f <g_mod1_Serial_available>
    130e:	8a e1       	ldi	r24, 0x1A	; 26
    1310:	9f e0       	ldi	r25, 0x0F	; 15
    1312:	90 93 3e 03 	sts	0x033E, r25	; 0x80033e <g_mod1_Serial_flush+0x1>
    1316:	80 93 3d 03 	sts	0x033D, r24	; 0x80033d <g_mod1_Serial_flush>
    131a:	83 ed       	ldi	r24, 0xD3	; 211
    131c:	9e e0       	ldi	r25, 0x0E	; 14
    131e:	90 93 42 03 	sts	0x0342, r25	; 0x800342 <g_mod1_Serial_getc+0x1>
    1322:	80 93 41 03 	sts	0x0341, r24	; 0x800341 <g_mod1_Serial_getc>
    1326:	83 ef       	ldi	r24, 0xF3	; 243
    1328:	9e e0       	ldi	r25, 0x0E	; 14
    132a:	90 93 44 03 	sts	0x0344, r25	; 0x800344 <g_mod1_Serial_putc+0x1>
    132e:	80 93 43 03 	sts	0x0343, r24	; 0x800343 <g_mod1_Serial_putc>
    1332:	08 95       	ret
    1334:	82 30       	cpi	r24, 0x02	; 2
    1336:	11 f5       	brne	.+68     	; 0x137c <Modbus_init+0x22a>
    1338:	80 91 3b 03 	lds	r24, 0x033B	; 0x80033b <UART2_used.1997>
    133c:	81 11       	cpse	r24, r1
    133e:	1e c0       	rjmp	.+60     	; 0x137c <Modbus_init+0x22a>
    1340:	81 e0       	ldi	r24, 0x01	; 1
    1342:	80 93 3b 03 	sts	0x033B, r24	; 0x80033b <UART2_used.1997>
    1346:	cb 01       	movw	r24, r22
    1348:	ba 01       	movw	r22, r20
    134a:	e7 d5       	rcall	.+3022   	; 0x1f1a <UART2_init>
    134c:	88 e1       	ldi	r24, 0x18	; 24
    134e:	90 e1       	ldi	r25, 0x10	; 16
    1350:	90 93 40 03 	sts	0x0340, r25	; 0x800340 <g_mod1_Serial_available+0x1>
    1354:	80 93 3f 03 	sts	0x033F, r24	; 0x80033f <g_mod1_Serial_available>
    1358:	86 e2       	ldi	r24, 0x26	; 38
    135a:	90 e1       	ldi	r25, 0x10	; 16
    135c:	90 93 3e 03 	sts	0x033E, r25	; 0x80033e <g_mod1_Serial_flush+0x1>
    1360:	80 93 3d 03 	sts	0x033D, r24	; 0x80033d <g_mod1_Serial_flush>
    1364:	82 ee       	ldi	r24, 0xE2	; 226
    1366:	9f e0       	ldi	r25, 0x0F	; 15
    1368:	90 93 42 03 	sts	0x0342, r25	; 0x800342 <g_mod1_Serial_getc+0x1>
    136c:	80 93 41 03 	sts	0x0341, r24	; 0x800341 <g_mod1_Serial_getc>
    1370:	8f ef       	ldi	r24, 0xFF	; 255
    1372:	9f e0       	ldi	r25, 0x0F	; 15
    1374:	90 93 44 03 	sts	0x0344, r25	; 0x800344 <g_mod1_Serial_putc+0x1>
    1378:	80 93 43 03 	sts	0x0343, r24	; 0x800343 <g_mod1_Serial_putc>
    137c:	08 95       	ret

0000137e <Modbus_Write_single_register>:
@param u16WriteValue value to be written to holding register (0x0000..0xFFFF)
@return 0 on success; exception number on failure
@ingroup register
*/
uint8_t Modbus_Write_single_register(uint8_t device, uint16_t u16WriteAddress, uint16_t u16WriteValue)
{
    137e:	0f 93       	push	r16
    1380:	1f 93       	push	r17
    1382:	cf 93       	push	r28
    1384:	df 93       	push	r29
    1386:	8b 01       	movw	r16, r22
    1388:	ea 01       	movw	r28, r20
	if(DEVICE_0 == device){
    138a:	81 11       	cpse	r24, r1
    138c:	10 c0       	rjmp	.+32     	; 0x13ae <Modbus_Write_single_register+0x30>
		g_mod0_write_address = u16WriteAddress;
    138e:	70 93 ef 04 	sts	0x04EF, r23	; 0x8004ef <g_mod0_write_address+0x1>
    1392:	60 93 ee 04 	sts	0x04EE, r22	; 0x8004ee <g_mod0_write_address>
		g_mod0_write_qty = 0;
    1396:	10 92 ed 04 	sts	0x04ED, r1	; 0x8004ed <g_mod0_write_qty+0x1>
    139a:	10 92 ec 04 	sts	0x04EC, r1	; 0x8004ec <g_mod0_write_qty>
		g_mod0_transmit_buffer[0] = u16WriteValue;
    139e:	50 93 6d 04 	sts	0x046D, r21	; 0x80046d <g_mod0_transmit_buffer+0x1>
    13a2:	40 93 6c 04 	sts	0x046C, r20	; 0x80046c <g_mod0_transmit_buffer>
		return Modbus_mster_transaction(device, WRITE_SINGLE_REGISTER);
    13a6:	66 e0       	ldi	r22, 0x06	; 6
    13a8:	39 d8       	rcall	.-3982   	; 0x41c <Modbus_mster_transaction>
    13aa:	c8 2f       	mov	r28, r24
    13ac:	2e c0       	rjmp	.+92     	; 0x140a <Modbus_Write_single_register+0x8c>

	}
	else if(DEVICE_1 == device){
    13ae:	81 30       	cpi	r24, 0x01	; 1
    13b0:	59 f5       	brne	.+86     	; 0x1408 <Modbus_Write_single_register+0x8a>
		g_mod1_write_address = u16WriteAddress;
    13b2:	70 93 d1 03 	sts	0x03D1, r23	; 0x8003d1 <g_mod1_write_address+0x1>
    13b6:	60 93 d0 03 	sts	0x03D0, r22	; 0x8003d0 <g_mod1_write_address>
		g_mod1_write_qty = 0;
    13ba:	10 92 cf 03 	sts	0x03CF, r1	; 0x8003cf <g_mod1_write_qty+0x1>
    13be:	10 92 ce 03 	sts	0x03CE, r1	; 0x8003ce <g_mod1_write_qty>
		g_mod1_transmit_buffer[0] = u16WriteValue;
    13c2:	50 93 4f 03 	sts	0x034F, r21	; 0x80034f <g_mod1_transmit_buffer+0x1>
    13c6:	40 93 4e 03 	sts	0x034E, r20	; 0x80034e <g_mod1_transmit_buffer>
		UART0_puts("g_mod1_write_address = ");
    13ca:	8c e4       	ldi	r24, 0x4C	; 76
    13cc:	92 e0       	ldi	r25, 0x02	; 2
    13ce:	1a d4       	rcall	.+2100   	; 0x1c04 <UART0_puts>
		UART0_OutUDec(u16WriteAddress);
    13d0:	b8 01       	movw	r22, r16
    13d2:	80 e0       	ldi	r24, 0x00	; 0
    13d4:	90 e0       	ldi	r25, 0x00	; 0
    13d6:	fa d3       	rcall	.+2036   	; 0x1bcc <UART0_OutUDec>
		UART0_puts("g_mod1_transmit_buffer[0] = ");
    13d8:	84 e6       	ldi	r24, 0x64	; 100
    13da:	92 e0       	ldi	r25, 0x02	; 2
    13dc:	13 d4       	rcall	.+2086   	; 0x1c04 <UART0_puts>
		UART0_OutUDec(u16WriteValue);
    13de:	be 01       	movw	r22, r28
    13e0:	80 e0       	ldi	r24, 0x00	; 0
    13e2:	90 e0       	ldi	r25, 0x00	; 0
		UART0_putc('\n');
    13e4:	f3 d3       	rcall	.+2022   	; 0x1bcc <UART0_OutUDec>
    13e6:	8a e0       	ldi	r24, 0x0A	; 10
    13e8:	d8 d3       	rcall	.+1968   	; 0x1b9a <UART0_putc>
		uint32_t x  = Modbus_mster_transaction(device, WRITE_SINGLE_REGISTER);
    13ea:	66 e0       	ldi	r22, 0x06	; 6
    13ec:	81 e0       	ldi	r24, 0x01	; 1
    13ee:	16 d8       	rcall	.-4052   	; 0x41c <Modbus_mster_transaction>
    13f0:	c8 2f       	mov	r28, r24
		UART0_puts("x = ");
    13f2:	81 e8       	ldi	r24, 0x81	; 129
    13f4:	92 e0       	ldi	r25, 0x02	; 2
    13f6:	06 d4       	rcall	.+2060   	; 0x1c04 <UART0_puts>
		UART0_OutUDec(x);
    13f8:	6c 2f       	mov	r22, r28
    13fa:	70 e0       	ldi	r23, 0x00	; 0
    13fc:	80 e0       	ldi	r24, 0x00	; 0
    13fe:	90 e0       	ldi	r25, 0x00	; 0
    1400:	e5 d3       	rcall	.+1994   	; 0x1bcc <UART0_OutUDec>
		UART0_putc('\n');
    1402:	8a e0       	ldi	r24, 0x0A	; 10
    1404:	ca d3       	rcall	.+1940   	; 0x1b9a <UART0_putc>
    1406:	01 c0       	rjmp	.+2      	; 0x140a <Modbus_Write_single_register+0x8c>
		return x;
    1408:	c4 ee       	ldi	r28, 0xE4	; 228
		//return Modbus_mster_transaction(device, WRITE_SINGLE_REGISTER);
	}
	return INVALID_DEVICE; //error
    140a:	8c 2f       	mov	r24, r28
}
    140c:	df 91       	pop	r29
    140e:	cf 91       	pop	r28
    1410:	1f 91       	pop	r17
    1412:	0f 91       	pop	r16
    1414:	08 95       	ret

00001416 <Temperature_over_temp>:
	UART0_puts("Level_sensor_error_callback \n");
}

/******* Over Temp functions for error callbacks **********************************************/
static void Temperature_over_temp(void){
	UART0_puts("Temperature_over_temp \n");
    1416:	86 e8       	ldi	r24, 0x86	; 134
    1418:	92 e0       	ldi	r25, 0x02	; 2
    141a:	f4 c3       	rjmp	.+2024   	; 0x1c04 <UART0_puts>
    141c:	08 95       	ret

0000141e <Level_sensor_error_callback>:
	
}

/******* Level sensors functions for error callbacks **********************************************/
static void Level_sensor_error_callback(void){
	UART0_puts("Level_sensor_error_callback \n");
    141e:	8e e9       	ldi	r24, 0x9E	; 158
    1420:	92 e0       	ldi	r25, 0x02	; 2
    1422:	f0 c3       	rjmp	.+2016   	; 0x1c04 <UART0_puts>
    1424:	08 95       	ret

00001426 <LCD_writeTimeout>:
static void LCD_readTimeout(void){
	UART0_puts("LCD_READ_TIMEOUT ---------------------------- \n");
}

static void LCD_writeTimeout(void){
	UART0_puts("LCD_WRITE_TIMEOUT ++++++++++++++++++++++++++++ \n");
    1426:	8c eb       	ldi	r24, 0xBC	; 188
    1428:	92 e0       	ldi	r25, 0x02	; 2
    142a:	ec c3       	rjmp	.+2008   	; 0x1c04 <UART0_puts>
    142c:	08 95       	ret

0000142e <LCD_readTimeout>:

//debug
#include "MCAL/UART.h"
/******* LCD callback functions for errors callbacks ***********************************************/
static void LCD_readTimeout(void){
	UART0_puts("LCD_READ_TIMEOUT ---------------------------- \n");
    142e:	8d ee       	ldi	r24, 0xED	; 237
    1430:	92 e0       	ldi	r25, 0x02	; 2
    1432:	e8 c3       	rjmp	.+2000   	; 0x1c04 <UART0_puts>
    1434:	08 95       	ret

00001436 <Service_error_init>:
	
}


void Service_error_init(void){
		LCD_main_err_Init(LCD_readTimeout,LCD_writeTimeout);
    1436:	63 e1       	ldi	r22, 0x13	; 19
    1438:	7a e0       	ldi	r23, 0x0A	; 10
    143a:	87 e1       	ldi	r24, 0x17	; 23
    143c:	9a e0       	ldi	r25, 0x0A	; 10
    143e:	0e 94 eb 17 	call	0x2fd6	; 0x2fd6 <LCD_main_err_Init>
		Level_main_err_init(Level_sensor_error_callback);
    1442:	8f e0       	ldi	r24, 0x0F	; 15
    1444:	9a e0       	ldi	r25, 0x0A	; 10
    1446:	0e 94 f4 17 	call	0x2fe8	; 0x2fe8 <Level_main_err_init>
		Temp_main_err_init(Temperature_over_temp);
    144a:	8b e0       	ldi	r24, 0x0B	; 11
    144c:	9a e0       	ldi	r25, 0x0A	; 10
    144e:	0c 94 5a 18 	jmp	0x30b4	; 0x30b4 <Temp_main_err_init>
    1452:	08 95       	ret

00001454 <main>:
TaskHandle_t xHandle1 = NULL , xHandle2 = NULL ,xHandle3 = NULL , xHandle4 = NULL ;




int main(void) {
    1454:	cf 93       	push	r28
    1456:	df 93       	push	r29
    1458:	cd b7       	in	r28, 0x3d	; 61
    145a:	de b7       	in	r29, 0x3e	; 62
    145c:	2c 97       	sbiw	r28, 0x0c	; 12
    145e:	0f b6       	in	r0, 0x3f	; 63
    1460:	f8 94       	cli
    1462:	de bf       	out	0x3e, r29	; 62
    1464:	0f be       	out	0x3f, r0	; 63
    1466:	cd bf       	out	0x3d, r28	; 61
	DDRE = 0xFF;
    1468:	8f ef       	ldi	r24, 0xFF	; 255
    146a:	8d b9       	out	0x0d, r24	; 13
	UART0_init(9600); //for debug
    146c:	60 e8       	ldi	r22, 0x80	; 128
    146e:	75 e2       	ldi	r23, 0x25	; 37
    1470:	80 e0       	ldi	r24, 0x00	; 0
    1472:	90 e0       	ldi	r25, 0x00	; 0
    1474:	3d d3       	rcall	.+1658   	; 0x1af0 <UART0_init>
    System_init();
    1476:	0e 94 5f 18 	call	0x30be	; 0x30be <System_init>
	 //Lcd_init(UART3,115200,1);
	UART0_puts("HELLO \n");
    147a:	8d e1       	ldi	r24, 0x1D	; 29
    147c:	93 e0       	ldi	r25, 0x03	; 3
    147e:	c2 d3       	rcall	.+1924   	; 0x1c04 <UART0_puts>
	Inverter_init(UART1,38400,3);
    1480:	23 e0       	ldi	r18, 0x03	; 3
    1482:	40 e0       	ldi	r20, 0x00	; 0
    1484:	56 e9       	ldi	r21, 0x96	; 150
    1486:	60 e0       	ldi	r22, 0x00	; 0
    1488:	70 e0       	ldi	r23, 0x00	; 0
    148a:	81 e0       	ldi	r24, 0x01	; 1
    148c:	0e 94 fd 00 	call	0x1fa	; 0x1fa <Inverter_init>

	uint16_t x=0;
	g_Inveter_Config confg ;
	confg.gear_diameter =6;
    1490:	86 e0       	ldi	r24, 0x06	; 6
    1492:	90 e0       	ldi	r25, 0x00	; 0
    1494:	9e 83       	std	Y+6, r25	; 0x06
    1496:	8d 83       	std	Y+5, r24	; 0x05
	confg.gear_ratio = 80;
    1498:	80 e5       	ldi	r24, 0x50	; 80
    149a:	90 e0       	ldi	r25, 0x00	; 0
    149c:	9a 83       	std	Y+2, r25	; 0x02
    149e:	89 83       	std	Y+1, r24	; 0x01
	confg.distance=210;
    14a0:	82 ed       	ldi	r24, 0xD2	; 210
    14a2:	90 e0       	ldi	r25, 0x00	; 0
    14a4:	9c 83       	std	Y+4, r25	; 0x04
    14a6:	8b 83       	std	Y+3, r24	; 0x03
	confg.motor_rpm_max=900;
    14a8:	84 e8       	ldi	r24, 0x84	; 132
    14aa:	93 e0       	ldi	r25, 0x03	; 3
    14ac:	98 87       	std	Y+8, r25	; 0x08
    14ae:	8f 83       	std	Y+7, r24	; 0x07
	confg.time_user_M=1;
    14b0:	81 e0       	ldi	r24, 0x01	; 1
    14b2:	90 e0       	ldi	r25, 0x00	; 0
    14b4:	9a 87       	std	Y+10, r25	; 0x0a
    14b6:	89 87       	std	Y+9, r24	; 0x09
	confg.time_user_S=3;
    14b8:	83 e0       	ldi	r24, 0x03	; 3
    14ba:	90 e0       	ldi	r25, 0x00	; 0
    14bc:	9c 87       	std	Y+12, r25	; 0x0c
    14be:	8b 87       	std	Y+11, r24	; 0x0b
 while (1)
 {
 	UART0_puts("Hello \n");
    14c0:	85 e2       	ldi	r24, 0x25	; 37
    14c2:	93 e0       	ldi	r25, 0x03	; 3
    14c4:	9f d3       	rcall	.+1854   	; 0x1c04 <UART0_puts>
    Inverter_set_Freq(&confg);
    14c6:	ce 01       	movw	r24, r28
    14c8:	01 96       	adiw	r24, 0x01	; 1
    14ca:	0e 94 11 01 	call	0x222	; 0x222 <Inverter_set_Freq>
 
   Inverter_change_state(1);
    14ce:	81 e0       	ldi	r24, 0x01	; 1
    14d0:	0e 94 fd 01 	call	0x3fa	; 0x3fa <Inverter_change_state>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    14d4:	2f ef       	ldi	r18, 0xFF	; 255
    14d6:	8b e7       	ldi	r24, 0x7B	; 123
    14d8:	92 e9       	ldi	r25, 0x92	; 146
    14da:	21 50       	subi	r18, 0x01	; 1
    14dc:	80 40       	sbci	r24, 0x00	; 0
    14de:	90 40       	sbci	r25, 0x00	; 0
    14e0:	e1 f7       	brne	.-8      	; 0x14da <main+0x86>
    14e2:	00 c0       	rjmp	.+0      	; 0x14e4 <main+0x90>
    14e4:	00 00       	nop
    14e6:	ec cf       	rjmp	.-40     	; 0x14c0 <main+0x6c>

000014e8 <__vector_29>:
		return returned_data ;
}


ISR(ADC_vect)
{
    14e8:	1f 92       	push	r1
    14ea:	0f 92       	push	r0
    14ec:	0f b6       	in	r0, 0x3f	; 63
    14ee:	0f 92       	push	r0
    14f0:	11 24       	eor	r1, r1
    14f2:	2f 93       	push	r18
    14f4:	8f 93       	push	r24
    14f6:	9f 93       	push	r25
	   uint8_t The_low_adc_reg = ADC_DATA_REG_LOW ;
    14f8:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
	  // get 10 bits out of the high and low register .
	  g_analog_data =  The_low_adc_reg | (ADC_DATA_REG_HIGH <<8);
    14fc:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
    1500:	90 e0       	ldi	r25, 0x00	; 0
    1502:	92 2b       	or	r25, r18
    1504:	90 93 77 05 	sts	0x0577, r25	; 0x800577 <g_analog_data+0x1>
    1508:	80 93 76 05 	sts	0x0576, r24	; 0x800576 <g_analog_data>
	//  UART0_OutUDec(g_analog_data);
	 // UART0_putc('\n');
	  g_converted = 1 ;
    150c:	81 e0       	ldi	r24, 0x01	; 1
    150e:	80 93 75 05 	sts	0x0575, r24	; 0x800575 <g_converted>
}
    1512:	9f 91       	pop	r25
    1514:	8f 91       	pop	r24
    1516:	2f 91       	pop	r18
    1518:	0f 90       	pop	r0
    151a:	0f be       	out	0x3f, r0	; 63
    151c:	0f 90       	pop	r0
    151e:	1f 90       	pop	r1
    1520:	18 95       	reti

00001522 <DIO_init>:
void Spark_change_state(uint8_t state)
{
	if (HIGH == state)
		SET_BIT(SPARK_DATA_REG , SPARK_PIN);
	else if(LOW == state)
		CLR_BIT(SPARK_DATA_REG , SPARK_PIN);
    1522:	ea e0       	ldi	r30, 0x0A	; 10
    1524:	f1 e0       	ldi	r31, 0x01	; 1
    1526:	80 81       	ld	r24, Z
    1528:	8f 7e       	andi	r24, 0xEF	; 239
    152a:	80 83       	st	Z, r24
    152c:	80 81       	ld	r24, Z
    152e:	8f 7d       	andi	r24, 0xDF	; 223
    1530:	80 83       	st	Z, r24
    1532:	80 81       	ld	r24, Z
    1534:	8f 7b       	andi	r24, 0xBF	; 191
    1536:	80 83       	st	Z, r24
    1538:	53 98       	cbi	0x0a, 3	; 10
    153a:	20 98       	cbi	0x04, 0	; 4
    153c:	3a 98       	cbi	0x07, 2	; 7
    153e:	54 98       	cbi	0x0a, 4	; 10
    1540:	3c 9a       	sbi	0x07, 4	; 7
    1542:	3f 9a       	sbi	0x07, 7	; 7
    1544:	3d 9a       	sbi	0x07, 5	; 7
    1546:	39 9a       	sbi	0x07, 1	; 7
    1548:	39 9a       	sbi	0x07, 1	; 7
    154a:	57 9a       	sbi	0x0a, 7	; 10
    154c:	38 9a       	sbi	0x07, 0	; 7
    154e:	38 98       	cbi	0x07, 0	; 7
    1550:	56 9a       	sbi	0x0a, 6	; 10
    1552:	3b 9a       	sbi	0x07, 3	; 7
    1554:	e4 e0       	ldi	r30, 0x04	; 4
    1556:	f1 e0       	ldi	r31, 0x01	; 1
    1558:	80 81       	ld	r24, Z
    155a:	84 60       	ori	r24, 0x04	; 4
    155c:	80 83       	st	Z, r24
    155e:	54 9a       	sbi	0x0a, 4	; 10
    1560:	3f 9a       	sbi	0x07, 7	; 7
    1562:	3f 9a       	sbi	0x07, 7	; 7
    1564:	e1 e0       	ldi	r30, 0x01	; 1
    1566:	f1 e0       	ldi	r31, 0x01	; 1
    1568:	80 81       	ld	r24, Z
    156a:	8e 7f       	andi	r24, 0xFE	; 254
    156c:	80 83       	st	Z, r24
    156e:	80 81       	ld	r24, Z
    1570:	82 60       	ori	r24, 0x02	; 2
    1572:	80 83       	st	Z, r24
    1574:	e2 e0       	ldi	r30, 0x02	; 2
    1576:	f1 e0       	ldi	r31, 0x01	; 1
    1578:	80 81       	ld	r24, Z
    157a:	81 60       	ori	r24, 0x01	; 1
    157c:	80 83       	st	Z, r24
    157e:	52 98       	cbi	0x0a, 2	; 10
    1580:	53 9a       	sbi	0x0a, 3	; 10
    1582:	5a 9a       	sbi	0x0b, 2	; 11
    1584:	08 95       	ret

00001586 <Modbus_change_state>:

//_________ MODE BUS initialize and enable______________________//

void Modbus_change_state(uint8_t device ,uint8_t state){
	
	switch (device){
    1586:	88 23       	and	r24, r24
    1588:	19 f0       	breq	.+6      	; 0x1590 <Modbus_change_state+0xa>
    158a:	81 30       	cpi	r24, 0x01	; 1
    158c:	89 f0       	breq	.+34     	; 0x15b0 <Modbus_change_state+0x2a>
    158e:	08 95       	ret
		case DEVICE_0:
		 	if (HIGH == state)
    1590:	61 30       	cpi	r22, 0x01	; 1
    1592:	31 f4       	brne	.+12     	; 0x15a0 <Modbus_change_state+0x1a>
		 		SET_BIT(DEVICE_0_MODBUS_DATA_REG , DEVICE_0_MODBUS_PIN);
    1594:	e5 e0       	ldi	r30, 0x05	; 5
    1596:	f1 e0       	ldi	r31, 0x01	; 1
    1598:	80 81       	ld	r24, Z
    159a:	84 60       	ori	r24, 0x04	; 4
    159c:	80 83       	st	Z, r24
    159e:	08 95       	ret
		 	else if(LOW == state)
    15a0:	61 11       	cpse	r22, r1
    15a2:	0d c0       	rjmp	.+26     	; 0x15be <Modbus_change_state+0x38>
		 		CLR_BIT(DEVICE_0_MODBUS_DATA_REG , DEVICE_0_MODBUS_PIN);
    15a4:	e5 e0       	ldi	r30, 0x05	; 5
    15a6:	f1 e0       	ldi	r31, 0x01	; 1
    15a8:	80 81       	ld	r24, Z
    15aa:	8b 7f       	andi	r24, 0xFB	; 251
    15ac:	80 83       	st	Z, r24
    15ae:	08 95       	ret
			
			break;
		case DEVICE_1:
		     if (HIGH == state)
    15b0:	61 30       	cpi	r22, 0x01	; 1
    15b2:	11 f4       	brne	.+4      	; 0x15b8 <Modbus_change_state+0x32>
		         SET_BIT(DEVICE_1_MODBUS_DATA_REG , DEVICE_1_MODBUS_PIN);
    15b4:	5c 9a       	sbi	0x0b, 4	; 11
    15b6:	08 95       	ret
		     else if(LOW == state)
    15b8:	61 11       	cpse	r22, r1
    15ba:	01 c0       	rjmp	.+2      	; 0x15be <Modbus_change_state+0x38>
		         CLR_BIT(DEVICE_1_MODBUS_DATA_REG , DEVICE_1_MODBUS_PIN);
    15bc:	5c 98       	cbi	0x0b, 4	; 11
    15be:	08 95       	ret

000015c0 <timers_init>:
 * set_up the timer and interrupt config and
 * parameters timer_ config struct contain all info about Timer
 * return 1 if the function setup OK -1 if not
 */
uint8_t timers_init(g_Timer_Config *config)
{
    15c0:	fc 01       	movw	r30, r24
	//millis_init(); //start this timer to get the time between ticks

	// choose the timer number depend on the config timer_number
	if(config->timer_number == 1){
    15c2:	94 81       	ldd	r25, Z+4	; 0x04
    15c4:	91 30       	cpi	r25, 0x01	; 1
    15c6:	b1 f4       	brne	.+44     	; 0x15f4 <timers_init+0x34>

		// off all the modes of  first config register on timer
		TIMER1_CONGFIG_A = 0X00;
    15c8:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
		// External counter on T1 and set the Top vale is OCRnA
		TIMER1_CONGFIG_B = 0x0E;
    15cc:	8e e0       	ldi	r24, 0x0E	; 14
    15ce:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
		// number of Encoder Tick for Each interrupt
		TIMER1_COMPARE = config->ticks - 1;
    15d2:	80 81       	ld	r24, Z
    15d4:	91 81       	ldd	r25, Z+1	; 0x01
    15d6:	01 97       	sbiw	r24, 0x01	; 1
    15d8:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
    15dc:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
		// Enable interrupt Bit on the timer Mask
		SET_BIT(TIMER1_INTERUPT, TIMER1_COMPARE_INT);
    15e0:	af e6       	ldi	r26, 0x6F	; 111
    15e2:	b0 e0       	ldi	r27, 0x00	; 0
    15e4:	8c 91       	ld	r24, X
    15e6:	82 60       	ori	r24, 0x02	; 2
    15e8:	8c 93       	st	X, r24
		// copy the config parameter to Timer stuct
		g_timer1_config = config;
    15ea:	f0 93 92 0c 	sts	0x0C92, r31	; 0x800c92 <g_timer1_config+0x1>
    15ee:	e0 93 91 0c 	sts	0x0C91, r30	; 0x800c91 <g_timer1_config>
    15f2:	49 c0       	rjmp	.+146    	; 0x1686 <timers_init+0xc6>
		// set the time before get ticks ISR time
		//g_Timer1_old_time = Get_millis();
	}// timer_number = 1

	else if(config->timer_number == 3)
    15f4:	93 30       	cpi	r25, 0x03	; 3
    15f6:	b1 f4       	brne	.+44     	; 0x1624 <timers_init+0x64>
	{
		// off all the modes of  first config register on timer
		TIMER3_CONGFIG_A = 0X00;
    15f8:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
		//External counter on T1 and set the Top vale is OCRnA
		TIMER3_CONGFIG_B = 0x0E;
    15fc:	8e e0       	ldi	r24, 0x0E	; 14
    15fe:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>
		// number of Encoder Tick for Each interrupt
		TIMER3_COMPARE = config->ticks - 1;
    1602:	80 81       	ld	r24, Z
    1604:	91 81       	ldd	r25, Z+1	; 0x01
    1606:	01 97       	sbiw	r24, 0x01	; 1
    1608:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
    160c:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>
		// Enable interrupt Bit on the timer Mask
		SET_BIT(TIMER3_INTERUPT, TIMER3_COMPARE_INT);
    1610:	a1 e7       	ldi	r26, 0x71	; 113
    1612:	b0 e0       	ldi	r27, 0x00	; 0
    1614:	8c 91       	ld	r24, X
    1616:	82 60       	ori	r24, 0x02	; 2
    1618:	8c 93       	st	X, r24
		// copy the config parameter to Timer stuct
		g_timer3_config = config;
    161a:	f0 93 8e 0c 	sts	0x0C8E, r31	; 0x800c8e <g_timer3_config+0x1>
    161e:	e0 93 8d 0c 	sts	0x0C8D, r30	; 0x800c8d <g_timer3_config>
    1622:	31 c0       	rjmp	.+98     	; 0x1686 <timers_init+0xc6>
		// set the time before get ticks ISR time
		//g_Timer3_old_time = Get_millis();
	}//timer_number = 3
	else if(config->timer_number == 4){
    1624:	94 30       	cpi	r25, 0x04	; 4
    1626:	b1 f4       	brne	.+44     	; 0x1654 <timers_init+0x94>
		// off all the modes of  first config register on timer
		TIMER4_CONGFIG_A = 0X00;
    1628:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
		// External counter on T1 and set the Top vale is OCRnA
		TIMER4_CONGFIG_B = 0x0E;
    162c:	8e e0       	ldi	r24, 0x0E	; 14
    162e:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>
		// number of Encoder Tick for Each interrupt
		TIMER4_COMPARE = config->ticks - 1;
    1632:	80 81       	ld	r24, Z
    1634:	91 81       	ldd	r25, Z+1	; 0x01
    1636:	01 97       	sbiw	r24, 0x01	; 1
    1638:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
    163c:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
		// Enable interrupt Bit on the timer Mask
		SET_BIT(TIMER5_INTERUPT, TIMER5_COMPARE_INT);
    1640:	a3 e7       	ldi	r26, 0x73	; 115
    1642:	b0 e0       	ldi	r27, 0x00	; 0
    1644:	8c 91       	ld	r24, X
    1646:	82 60       	ori	r24, 0x02	; 2
    1648:	8c 93       	st	X, r24
		// copy the config parameter to Timer stuct
		g_timer4_config = config;
    164a:	f0 93 90 0c 	sts	0x0C90, r31	; 0x800c90 <g_timer4_config+0x1>
    164e:	e0 93 8f 0c 	sts	0x0C8F, r30	; 0x800c8f <g_timer4_config>
    1652:	19 c0       	rjmp	.+50     	; 0x1686 <timers_init+0xc6>
		// set the time before get ticks ISR time
		//g_Timer4_old_time = Get_millis();
	}//timer_number = 4

	else if(config->timer_number == 5){
    1654:	95 30       	cpi	r25, 0x05	; 5
    1656:	d1 f4       	brne	.+52     	; 0x168c <timers_init+0xcc>
		// off all the modes of  first config register on timer
		TIMER5_CONGFIG_A = 0X00;
    1658:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
		//  External counter on T1 and set the Top vale is OCRnA
		TIMER5_CONGFIG_B = 0x0E;
    165c:	8e e0       	ldi	r24, 0x0E	; 14
    165e:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <__TEXT_REGION_LENGTH__+0x700121>
		//number of Encoder Tick for Each interrupt
		TIMER5_COMPARE = config->ticks - 1;
    1662:	80 81       	ld	r24, Z
    1664:	91 81       	ldd	r25, Z+1	; 0x01
    1666:	01 97       	sbiw	r24, 0x01	; 1
    1668:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
    166c:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
		// Enable interrupt Bit on the timer Mask
		SET_BIT(TIMER5_INTERUPT, TIMER5_COMPARE_INT);
    1670:	a3 e7       	ldi	r26, 0x73	; 115
    1672:	b0 e0       	ldi	r27, 0x00	; 0
    1674:	8c 91       	ld	r24, X
    1676:	82 60       	ori	r24, 0x02	; 2
    1678:	8c 93       	st	X, r24
		// copy the config parameter to Timer struct
		g_timer5_config = config;
    167a:	f0 93 94 0c 	sts	0x0C94, r31	; 0x800c94 <g_timer5_config+0x1>
    167e:	e0 93 93 0c 	sts	0x0C93, r30	; 0x800c93 <g_timer5_config>
		// set the time before get ticks ISR time
		//g_Timer5_old_time = Get_millis();
		//Clear the counter number
		TIMER5_COUNT_L = 0;
    1682:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <__TEXT_REGION_LENGTH__+0x700124>
	{
		//Error the timer number not valid
		return -1;
	}// Else

    sei();
    1686:	78 94       	sei
    return 1;// Setup done ok
    1688:	81 e0       	ldi	r24, 0x01	; 1
    168a:	08 95       	ret
	}//timer_number = 5

	else
	{
		//Error the timer number not valid
		return -1;
    168c:	8f ef       	ldi	r24, 0xFF	; 255
	}// Else

    sei();
    return 1;// Setup done ok
}//timer_init
    168e:	08 95       	ret

00001690 <__vector_17>:

// interrupted service routine when we have reach the number of  Ticks On Encoder
ISR(TIMER1_COMPA_vect)
{
    1690:	1f 92       	push	r1
    1692:	0f 92       	push	r0
    1694:	0f b6       	in	r0, 0x3f	; 63
    1696:	0f 92       	push	r0
    1698:	11 24       	eor	r1, r1
    169a:	0b b6       	in	r0, 0x3b	; 59
    169c:	0f 92       	push	r0
    169e:	2f 93       	push	r18
    16a0:	3f 93       	push	r19
    16a2:	4f 93       	push	r20
    16a4:	5f 93       	push	r21
    16a6:	6f 93       	push	r22
    16a8:	7f 93       	push	r23
    16aa:	8f 93       	push	r24
    16ac:	9f 93       	push	r25
    16ae:	af 93       	push	r26
    16b0:	bf 93       	push	r27
    16b2:	ef 93       	push	r30
    16b4:	ff 93       	push	r31
    16b6:	cf 93       	push	r28
    16b8:	df 93       	push	r29
    16ba:	00 d0       	rcall	.+0      	; 0x16bc <__vector_17+0x2c>
    16bc:	1f 92       	push	r1
    16be:	cd b7       	in	r28, 0x3d	; 61
    16c0:	de b7       	in	r29, 0x3e	; 62
	volatile uint32_t diff_time;      // to save the different between new time and old time
	volatile static uint32_t s_Timer1_old_time;
	volatile static uint32_t s_Timer1_new_time;
	// get the time now
	s_Timer1_new_time = Get_millis();
    16c2:	0e 94 89 18 	call	0x3112	; 0x3112 <Get_millis>
    16c6:	60 93 94 05 	sts	0x0594, r22	; 0x800594 <s_Timer1_new_time.1769>
    16ca:	70 93 95 05 	sts	0x0595, r23	; 0x800595 <s_Timer1_new_time.1769+0x1>
    16ce:	80 93 96 05 	sts	0x0596, r24	; 0x800596 <s_Timer1_new_time.1769+0x2>
    16d2:	90 93 97 05 	sts	0x0597, r25	; 0x800597 <s_Timer1_new_time.1769+0x3>
	// calculate the diff between now and last interrupt
	diff_time = s_Timer1_new_time - s_Timer1_old_time;
    16d6:	80 91 94 05 	lds	r24, 0x0594	; 0x800594 <s_Timer1_new_time.1769>
    16da:	90 91 95 05 	lds	r25, 0x0595	; 0x800595 <s_Timer1_new_time.1769+0x1>
    16de:	a0 91 96 05 	lds	r26, 0x0596	; 0x800596 <s_Timer1_new_time.1769+0x2>
    16e2:	b0 91 97 05 	lds	r27, 0x0597	; 0x800597 <s_Timer1_new_time.1769+0x3>
    16e6:	40 91 90 05 	lds	r20, 0x0590	; 0x800590 <s_Timer1_old_time.1768>
    16ea:	50 91 91 05 	lds	r21, 0x0591	; 0x800591 <s_Timer1_old_time.1768+0x1>
    16ee:	60 91 92 05 	lds	r22, 0x0592	; 0x800592 <s_Timer1_old_time.1768+0x2>
    16f2:	70 91 93 05 	lds	r23, 0x0593	; 0x800593 <s_Timer1_old_time.1768+0x3>
    16f6:	84 1b       	sub	r24, r20
    16f8:	95 0b       	sbc	r25, r21
    16fa:	a6 0b       	sbc	r26, r22
    16fc:	b7 0b       	sbc	r27, r23
    16fe:	89 83       	std	Y+1, r24	; 0x01
    1700:	9a 83       	std	Y+2, r25	; 0x02
    1702:	ab 83       	std	Y+3, r26	; 0x03
    1704:	bc 83       	std	Y+4, r27	; 0x04
	// save the to the old time to next interrupt
	s_Timer1_old_time = s_Timer1_new_time;
    1706:	80 91 94 05 	lds	r24, 0x0594	; 0x800594 <s_Timer1_new_time.1769>
    170a:	90 91 95 05 	lds	r25, 0x0595	; 0x800595 <s_Timer1_new_time.1769+0x1>
    170e:	a0 91 96 05 	lds	r26, 0x0596	; 0x800596 <s_Timer1_new_time.1769+0x2>
    1712:	b0 91 97 05 	lds	r27, 0x0597	; 0x800597 <s_Timer1_new_time.1769+0x3>
    1716:	80 93 90 05 	sts	0x0590, r24	; 0x800590 <s_Timer1_old_time.1768>
    171a:	90 93 91 05 	sts	0x0591, r25	; 0x800591 <s_Timer1_old_time.1768+0x1>
    171e:	a0 93 92 05 	sts	0x0592, r26	; 0x800592 <s_Timer1_old_time.1768+0x2>
    1722:	b0 93 93 05 	sts	0x0593, r27	; 0x800593 <s_Timer1_old_time.1768+0x3>
	//call back function on upper layer to get time
	g_timer1_config->isr_call_back(diff_time);
    1726:	69 81       	ldd	r22, Y+1	; 0x01
    1728:	7a 81       	ldd	r23, Y+2	; 0x02
    172a:	8b 81       	ldd	r24, Y+3	; 0x03
    172c:	9c 81       	ldd	r25, Y+4	; 0x04
    172e:	e0 91 91 0c 	lds	r30, 0x0C91	; 0x800c91 <g_timer1_config>
    1732:	f0 91 92 0c 	lds	r31, 0x0C92	; 0x800c92 <g_timer1_config+0x1>
    1736:	02 80       	ldd	r0, Z+2	; 0x02
    1738:	f3 81       	ldd	r31, Z+3	; 0x03
    173a:	e0 2d       	mov	r30, r0
    173c:	19 95       	eicall
}
    173e:	0f 90       	pop	r0
    1740:	0f 90       	pop	r0
    1742:	0f 90       	pop	r0
    1744:	0f 90       	pop	r0
    1746:	df 91       	pop	r29
    1748:	cf 91       	pop	r28
    174a:	ff 91       	pop	r31
    174c:	ef 91       	pop	r30
    174e:	bf 91       	pop	r27
    1750:	af 91       	pop	r26
    1752:	9f 91       	pop	r25
    1754:	8f 91       	pop	r24
    1756:	7f 91       	pop	r23
    1758:	6f 91       	pop	r22
    175a:	5f 91       	pop	r21
    175c:	4f 91       	pop	r20
    175e:	3f 91       	pop	r19
    1760:	2f 91       	pop	r18
    1762:	0f 90       	pop	r0
    1764:	0b be       	out	0x3b, r0	; 59
    1766:	0f 90       	pop	r0
    1768:	0f be       	out	0x3f, r0	; 63
    176a:	0f 90       	pop	r0
    176c:	1f 90       	pop	r1
    176e:	18 95       	reti

00001770 <__vector_32>:
// interrupted service routine when we have reach the number of  Ticks On Encoder
ISR(TIMER3_COMPA_vect)
{
    1770:	1f 92       	push	r1
    1772:	0f 92       	push	r0
    1774:	0f b6       	in	r0, 0x3f	; 63
    1776:	0f 92       	push	r0
    1778:	11 24       	eor	r1, r1
    177a:	0b b6       	in	r0, 0x3b	; 59
    177c:	0f 92       	push	r0
    177e:	2f 93       	push	r18
    1780:	3f 93       	push	r19
    1782:	4f 93       	push	r20
    1784:	5f 93       	push	r21
    1786:	6f 93       	push	r22
    1788:	7f 93       	push	r23
    178a:	8f 93       	push	r24
    178c:	9f 93       	push	r25
    178e:	af 93       	push	r26
    1790:	bf 93       	push	r27
    1792:	ef 93       	push	r30
    1794:	ff 93       	push	r31
    1796:	cf 93       	push	r28
    1798:	df 93       	push	r29
    179a:	00 d0       	rcall	.+0      	; 0x179c <__vector_32+0x2c>
    179c:	1f 92       	push	r1
    179e:	cd b7       	in	r28, 0x3d	; 61
    17a0:	de b7       	in	r29, 0x3e	; 62
	volatile uint32_t diff_time;      // to save the different between new time and old time
	volatile static uint32_t s_Timer3_old_time;
	volatile static uint32_t s_Timer3_new_time;
	// get the time now
	s_Timer3_new_time = Get_millis();
    17a2:	0e 94 89 18 	call	0x3112	; 0x3112 <Get_millis>
    17a6:	60 93 8c 05 	sts	0x058C, r22	; 0x80058c <s_Timer3_new_time.1777>
    17aa:	70 93 8d 05 	sts	0x058D, r23	; 0x80058d <s_Timer3_new_time.1777+0x1>
    17ae:	80 93 8e 05 	sts	0x058E, r24	; 0x80058e <s_Timer3_new_time.1777+0x2>
    17b2:	90 93 8f 05 	sts	0x058F, r25	; 0x80058f <s_Timer3_new_time.1777+0x3>
	// calculate the diff between now and last interrupt
	diff_time = s_Timer3_new_time - s_Timer3_old_time;
    17b6:	80 91 8c 05 	lds	r24, 0x058C	; 0x80058c <s_Timer3_new_time.1777>
    17ba:	90 91 8d 05 	lds	r25, 0x058D	; 0x80058d <s_Timer3_new_time.1777+0x1>
    17be:	a0 91 8e 05 	lds	r26, 0x058E	; 0x80058e <s_Timer3_new_time.1777+0x2>
    17c2:	b0 91 8f 05 	lds	r27, 0x058F	; 0x80058f <s_Timer3_new_time.1777+0x3>
    17c6:	40 91 88 05 	lds	r20, 0x0588	; 0x800588 <s_Timer3_old_time.1776>
    17ca:	50 91 89 05 	lds	r21, 0x0589	; 0x800589 <s_Timer3_old_time.1776+0x1>
    17ce:	60 91 8a 05 	lds	r22, 0x058A	; 0x80058a <s_Timer3_old_time.1776+0x2>
    17d2:	70 91 8b 05 	lds	r23, 0x058B	; 0x80058b <s_Timer3_old_time.1776+0x3>
    17d6:	84 1b       	sub	r24, r20
    17d8:	95 0b       	sbc	r25, r21
    17da:	a6 0b       	sbc	r26, r22
    17dc:	b7 0b       	sbc	r27, r23
    17de:	89 83       	std	Y+1, r24	; 0x01
    17e0:	9a 83       	std	Y+2, r25	; 0x02
    17e2:	ab 83       	std	Y+3, r26	; 0x03
    17e4:	bc 83       	std	Y+4, r27	; 0x04
	// save the to the old time to next interrupt
	s_Timer3_old_time = s_Timer3_new_time;
    17e6:	80 91 8c 05 	lds	r24, 0x058C	; 0x80058c <s_Timer3_new_time.1777>
    17ea:	90 91 8d 05 	lds	r25, 0x058D	; 0x80058d <s_Timer3_new_time.1777+0x1>
    17ee:	a0 91 8e 05 	lds	r26, 0x058E	; 0x80058e <s_Timer3_new_time.1777+0x2>
    17f2:	b0 91 8f 05 	lds	r27, 0x058F	; 0x80058f <s_Timer3_new_time.1777+0x3>
    17f6:	80 93 88 05 	sts	0x0588, r24	; 0x800588 <s_Timer3_old_time.1776>
    17fa:	90 93 89 05 	sts	0x0589, r25	; 0x800589 <s_Timer3_old_time.1776+0x1>
    17fe:	a0 93 8a 05 	sts	0x058A, r26	; 0x80058a <s_Timer3_old_time.1776+0x2>
    1802:	b0 93 8b 05 	sts	0x058B, r27	; 0x80058b <s_Timer3_old_time.1776+0x3>
	//call back function on upper layer to get time
	g_timer3_config->isr_call_back(diff_time);
    1806:	69 81       	ldd	r22, Y+1	; 0x01
    1808:	7a 81       	ldd	r23, Y+2	; 0x02
    180a:	8b 81       	ldd	r24, Y+3	; 0x03
    180c:	9c 81       	ldd	r25, Y+4	; 0x04
    180e:	e0 91 8d 0c 	lds	r30, 0x0C8D	; 0x800c8d <g_timer3_config>
    1812:	f0 91 8e 0c 	lds	r31, 0x0C8E	; 0x800c8e <g_timer3_config+0x1>
    1816:	02 80       	ldd	r0, Z+2	; 0x02
    1818:	f3 81       	ldd	r31, Z+3	; 0x03
    181a:	e0 2d       	mov	r30, r0
    181c:	19 95       	eicall
}
    181e:	0f 90       	pop	r0
    1820:	0f 90       	pop	r0
    1822:	0f 90       	pop	r0
    1824:	0f 90       	pop	r0
    1826:	df 91       	pop	r29
    1828:	cf 91       	pop	r28
    182a:	ff 91       	pop	r31
    182c:	ef 91       	pop	r30
    182e:	bf 91       	pop	r27
    1830:	af 91       	pop	r26
    1832:	9f 91       	pop	r25
    1834:	8f 91       	pop	r24
    1836:	7f 91       	pop	r23
    1838:	6f 91       	pop	r22
    183a:	5f 91       	pop	r21
    183c:	4f 91       	pop	r20
    183e:	3f 91       	pop	r19
    1840:	2f 91       	pop	r18
    1842:	0f 90       	pop	r0
    1844:	0b be       	out	0x3b, r0	; 59
    1846:	0f 90       	pop	r0
    1848:	0f be       	out	0x3f, r0	; 63
    184a:	0f 90       	pop	r0
    184c:	1f 90       	pop	r1
    184e:	18 95       	reti

00001850 <__vector_42>:
// interrupted service routine when we have reach the number of  Ticks On Encoder
ISR(TIMER4_COMPA_vect)
{
    1850:	1f 92       	push	r1
    1852:	0f 92       	push	r0
    1854:	0f b6       	in	r0, 0x3f	; 63
    1856:	0f 92       	push	r0
    1858:	11 24       	eor	r1, r1
    185a:	0b b6       	in	r0, 0x3b	; 59
    185c:	0f 92       	push	r0
    185e:	2f 93       	push	r18
    1860:	3f 93       	push	r19
    1862:	4f 93       	push	r20
    1864:	5f 93       	push	r21
    1866:	6f 93       	push	r22
    1868:	7f 93       	push	r23
    186a:	8f 93       	push	r24
    186c:	9f 93       	push	r25
    186e:	af 93       	push	r26
    1870:	bf 93       	push	r27
    1872:	ef 93       	push	r30
    1874:	ff 93       	push	r31
    1876:	cf 93       	push	r28
    1878:	df 93       	push	r29
    187a:	00 d0       	rcall	.+0      	; 0x187c <__vector_42+0x2c>
    187c:	1f 92       	push	r1
    187e:	cd b7       	in	r28, 0x3d	; 61
    1880:	de b7       	in	r29, 0x3e	; 62
	volatile uint32_t diff_time;      // to save the different between new time and old time
	volatile static uint32_t s_Timer4_old_time;
	volatile static uint32_t s_Timer4_new_time;
	// get the time now
	s_Timer4_new_time = Get_millis();
    1882:	0e 94 89 18 	call	0x3112	; 0x3112 <Get_millis>
    1886:	60 93 84 05 	sts	0x0584, r22	; 0x800584 <s_Timer4_new_time.1785>
    188a:	70 93 85 05 	sts	0x0585, r23	; 0x800585 <s_Timer4_new_time.1785+0x1>
    188e:	80 93 86 05 	sts	0x0586, r24	; 0x800586 <s_Timer4_new_time.1785+0x2>
    1892:	90 93 87 05 	sts	0x0587, r25	; 0x800587 <s_Timer4_new_time.1785+0x3>
	// calculate the diff between now and last interrupt
	diff_time = s_Timer4_new_time - s_Timer4_old_time;
    1896:	80 91 84 05 	lds	r24, 0x0584	; 0x800584 <s_Timer4_new_time.1785>
    189a:	90 91 85 05 	lds	r25, 0x0585	; 0x800585 <s_Timer4_new_time.1785+0x1>
    189e:	a0 91 86 05 	lds	r26, 0x0586	; 0x800586 <s_Timer4_new_time.1785+0x2>
    18a2:	b0 91 87 05 	lds	r27, 0x0587	; 0x800587 <s_Timer4_new_time.1785+0x3>
    18a6:	40 91 80 05 	lds	r20, 0x0580	; 0x800580 <s_Timer4_old_time.1784>
    18aa:	50 91 81 05 	lds	r21, 0x0581	; 0x800581 <s_Timer4_old_time.1784+0x1>
    18ae:	60 91 82 05 	lds	r22, 0x0582	; 0x800582 <s_Timer4_old_time.1784+0x2>
    18b2:	70 91 83 05 	lds	r23, 0x0583	; 0x800583 <s_Timer4_old_time.1784+0x3>
    18b6:	84 1b       	sub	r24, r20
    18b8:	95 0b       	sbc	r25, r21
    18ba:	a6 0b       	sbc	r26, r22
    18bc:	b7 0b       	sbc	r27, r23
    18be:	89 83       	std	Y+1, r24	; 0x01
    18c0:	9a 83       	std	Y+2, r25	; 0x02
    18c2:	ab 83       	std	Y+3, r26	; 0x03
    18c4:	bc 83       	std	Y+4, r27	; 0x04
	// save the to the old time to next interrupt
	s_Timer4_old_time = s_Timer4_new_time;
    18c6:	80 91 84 05 	lds	r24, 0x0584	; 0x800584 <s_Timer4_new_time.1785>
    18ca:	90 91 85 05 	lds	r25, 0x0585	; 0x800585 <s_Timer4_new_time.1785+0x1>
    18ce:	a0 91 86 05 	lds	r26, 0x0586	; 0x800586 <s_Timer4_new_time.1785+0x2>
    18d2:	b0 91 87 05 	lds	r27, 0x0587	; 0x800587 <s_Timer4_new_time.1785+0x3>
    18d6:	80 93 80 05 	sts	0x0580, r24	; 0x800580 <s_Timer4_old_time.1784>
    18da:	90 93 81 05 	sts	0x0581, r25	; 0x800581 <s_Timer4_old_time.1784+0x1>
    18de:	a0 93 82 05 	sts	0x0582, r26	; 0x800582 <s_Timer4_old_time.1784+0x2>
    18e2:	b0 93 83 05 	sts	0x0583, r27	; 0x800583 <s_Timer4_old_time.1784+0x3>
	//call back function on upper layer to get time
	g_timer4_config->isr_call_back(diff_time);
    18e6:	69 81       	ldd	r22, Y+1	; 0x01
    18e8:	7a 81       	ldd	r23, Y+2	; 0x02
    18ea:	8b 81       	ldd	r24, Y+3	; 0x03
    18ec:	9c 81       	ldd	r25, Y+4	; 0x04
    18ee:	e0 91 8f 0c 	lds	r30, 0x0C8F	; 0x800c8f <g_timer4_config>
    18f2:	f0 91 90 0c 	lds	r31, 0x0C90	; 0x800c90 <g_timer4_config+0x1>
    18f6:	02 80       	ldd	r0, Z+2	; 0x02
    18f8:	f3 81       	ldd	r31, Z+3	; 0x03
    18fa:	e0 2d       	mov	r30, r0
    18fc:	19 95       	eicall
}
    18fe:	0f 90       	pop	r0
    1900:	0f 90       	pop	r0
    1902:	0f 90       	pop	r0
    1904:	0f 90       	pop	r0
    1906:	df 91       	pop	r29
    1908:	cf 91       	pop	r28
    190a:	ff 91       	pop	r31
    190c:	ef 91       	pop	r30
    190e:	bf 91       	pop	r27
    1910:	af 91       	pop	r26
    1912:	9f 91       	pop	r25
    1914:	8f 91       	pop	r24
    1916:	7f 91       	pop	r23
    1918:	6f 91       	pop	r22
    191a:	5f 91       	pop	r21
    191c:	4f 91       	pop	r20
    191e:	3f 91       	pop	r19
    1920:	2f 91       	pop	r18
    1922:	0f 90       	pop	r0
    1924:	0b be       	out	0x3b, r0	; 59
    1926:	0f 90       	pop	r0
    1928:	0f be       	out	0x3f, r0	; 63
    192a:	0f 90       	pop	r0
    192c:	1f 90       	pop	r1
    192e:	18 95       	reti

00001930 <__vector_47>:
// interrupted service routine when we have reach the number of  Ticks On Encoder
ISR(TIMER5_COMPA_vect)
{
    1930:	1f 92       	push	r1
    1932:	0f 92       	push	r0
    1934:	0f b6       	in	r0, 0x3f	; 63
    1936:	0f 92       	push	r0
    1938:	11 24       	eor	r1, r1
    193a:	0b b6       	in	r0, 0x3b	; 59
    193c:	0f 92       	push	r0
    193e:	2f 93       	push	r18
    1940:	3f 93       	push	r19
    1942:	4f 93       	push	r20
    1944:	5f 93       	push	r21
    1946:	6f 93       	push	r22
    1948:	7f 93       	push	r23
    194a:	8f 93       	push	r24
    194c:	9f 93       	push	r25
    194e:	af 93       	push	r26
    1950:	bf 93       	push	r27
    1952:	ef 93       	push	r30
    1954:	ff 93       	push	r31
    1956:	cf 93       	push	r28
    1958:	df 93       	push	r29
    195a:	00 d0       	rcall	.+0      	; 0x195c <__vector_47+0x2c>
    195c:	1f 92       	push	r1
    195e:	cd b7       	in	r28, 0x3d	; 61
    1960:	de b7       	in	r29, 0x3e	; 62
	volatile uint32_t diff_time;      // to save the different between new time and old time
	volatile static uint32_t s_Timer5_old_time;
	volatile static uint32_t s_Timer5_new_time;
	//TOG_BIT(PORTB,0);
	// get the time now
	s_Timer5_new_time = Get_millis();
    1962:	0e 94 89 18 	call	0x3112	; 0x3112 <Get_millis>
    1966:	60 93 7c 05 	sts	0x057C, r22	; 0x80057c <s_Timer5_new_time.1793>
    196a:	70 93 7d 05 	sts	0x057D, r23	; 0x80057d <s_Timer5_new_time.1793+0x1>
    196e:	80 93 7e 05 	sts	0x057E, r24	; 0x80057e <s_Timer5_new_time.1793+0x2>
    1972:	90 93 7f 05 	sts	0x057F, r25	; 0x80057f <s_Timer5_new_time.1793+0x3>
	// calculate the difference between now and last interrupt
	diff_time = s_Timer5_new_time - s_Timer5_old_time;
    1976:	80 91 7c 05 	lds	r24, 0x057C	; 0x80057c <s_Timer5_new_time.1793>
    197a:	90 91 7d 05 	lds	r25, 0x057D	; 0x80057d <s_Timer5_new_time.1793+0x1>
    197e:	a0 91 7e 05 	lds	r26, 0x057E	; 0x80057e <s_Timer5_new_time.1793+0x2>
    1982:	b0 91 7f 05 	lds	r27, 0x057F	; 0x80057f <s_Timer5_new_time.1793+0x3>
    1986:	40 91 78 05 	lds	r20, 0x0578	; 0x800578 <s_Timer5_old_time.1792>
    198a:	50 91 79 05 	lds	r21, 0x0579	; 0x800579 <s_Timer5_old_time.1792+0x1>
    198e:	60 91 7a 05 	lds	r22, 0x057A	; 0x80057a <s_Timer5_old_time.1792+0x2>
    1992:	70 91 7b 05 	lds	r23, 0x057B	; 0x80057b <s_Timer5_old_time.1792+0x3>
    1996:	84 1b       	sub	r24, r20
    1998:	95 0b       	sbc	r25, r21
    199a:	a6 0b       	sbc	r26, r22
    199c:	b7 0b       	sbc	r27, r23
    199e:	89 83       	std	Y+1, r24	; 0x01
    19a0:	9a 83       	std	Y+2, r25	; 0x02
    19a2:	ab 83       	std	Y+3, r26	; 0x03
    19a4:	bc 83       	std	Y+4, r27	; 0x04
	// save the to the old time to next interrupt
	s_Timer5_old_time = s_Timer5_new_time;
    19a6:	80 91 7c 05 	lds	r24, 0x057C	; 0x80057c <s_Timer5_new_time.1793>
    19aa:	90 91 7d 05 	lds	r25, 0x057D	; 0x80057d <s_Timer5_new_time.1793+0x1>
    19ae:	a0 91 7e 05 	lds	r26, 0x057E	; 0x80057e <s_Timer5_new_time.1793+0x2>
    19b2:	b0 91 7f 05 	lds	r27, 0x057F	; 0x80057f <s_Timer5_new_time.1793+0x3>
    19b6:	80 93 78 05 	sts	0x0578, r24	; 0x800578 <s_Timer5_old_time.1792>
    19ba:	90 93 79 05 	sts	0x0579, r25	; 0x800579 <s_Timer5_old_time.1792+0x1>
    19be:	a0 93 7a 05 	sts	0x057A, r26	; 0x80057a <s_Timer5_old_time.1792+0x2>
    19c2:	b0 93 7b 05 	sts	0x057B, r27	; 0x80057b <s_Timer5_old_time.1792+0x3>
	// clear the counter
	TIMER5_COUNT_L = 0;
    19c6:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <__TEXT_REGION_LENGTH__+0x700124>
	//call back function on upper layer to get time
	g_timer5_config->isr_call_back(diff_time);
    19ca:	69 81       	ldd	r22, Y+1	; 0x01
    19cc:	7a 81       	ldd	r23, Y+2	; 0x02
    19ce:	8b 81       	ldd	r24, Y+3	; 0x03
    19d0:	9c 81       	ldd	r25, Y+4	; 0x04
    19d2:	e0 91 93 0c 	lds	r30, 0x0C93	; 0x800c93 <g_timer5_config>
    19d6:	f0 91 94 0c 	lds	r31, 0x0C94	; 0x800c94 <g_timer5_config+0x1>
    19da:	02 80       	ldd	r0, Z+2	; 0x02
    19dc:	f3 81       	ldd	r31, Z+3	; 0x03
    19de:	e0 2d       	mov	r30, r0
    19e0:	19 95       	eicall
	
}
    19e2:	0f 90       	pop	r0
    19e4:	0f 90       	pop	r0
    19e6:	0f 90       	pop	r0
    19e8:	0f 90       	pop	r0
    19ea:	df 91       	pop	r29
    19ec:	cf 91       	pop	r28
    19ee:	ff 91       	pop	r31
    19f0:	ef 91       	pop	r30
    19f2:	bf 91       	pop	r27
    19f4:	af 91       	pop	r26
    19f6:	9f 91       	pop	r25
    19f8:	8f 91       	pop	r24
    19fa:	7f 91       	pop	r23
    19fc:	6f 91       	pop	r22
    19fe:	5f 91       	pop	r21
    1a00:	4f 91       	pop	r20
    1a02:	3f 91       	pop	r19
    1a04:	2f 91       	pop	r18
    1a06:	0f 90       	pop	r0
    1a08:	0b be       	out	0x3b, r0	; 59
    1a0a:	0f 90       	pop	r0
    1a0c:	0f be       	out	0x3f, r0	; 63
    1a0e:	0f 90       	pop	r0
    1a10:	1f 90       	pop	r1
    1a12:	18 95       	reti

00001a14 <__vector_25>:

	while ((c = pgm_read_byte(progmem_s++))) {
		UART3_putc(c);
	}

} /* UART3_puts_p */
    1a14:	1f 92       	push	r1
    1a16:	0f 92       	push	r0
    1a18:	0f b6       	in	r0, 0x3f	; 63
    1a1a:	0f 92       	push	r0
    1a1c:	11 24       	eor	r1, r1
    1a1e:	0b b6       	in	r0, 0x3b	; 59
    1a20:	0f 92       	push	r0
    1a22:	2f 93       	push	r18
    1a24:	3f 93       	push	r19
    1a26:	4f 93       	push	r20
    1a28:	5f 93       	push	r21
    1a2a:	8f 93       	push	r24
    1a2c:	9f 93       	push	r25
    1a2e:	ef 93       	push	r30
    1a30:	ff 93       	push	r31
    1a32:	20 91 c0 00 	lds	r18, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
    1a36:	30 91 c6 00 	lds	r19, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    1a3a:	28 71       	andi	r18, 0x18	; 24
    1a3c:	80 91 ad 08 	lds	r24, 0x08AD	; 0x8008ad <UART_RxHead>
    1a40:	90 e0       	ldi	r25, 0x00	; 0
    1a42:	01 96       	adiw	r24, 0x01	; 1
    1a44:	8f 77       	andi	r24, 0x7F	; 127
    1a46:	99 27       	eor	r25, r25
    1a48:	40 91 ac 08 	lds	r20, 0x08AC	; 0x8008ac <UART_RxTail>
    1a4c:	50 e0       	ldi	r21, 0x00	; 0
    1a4e:	84 17       	cp	r24, r20
    1a50:	95 07       	cpc	r25, r21
    1a52:	39 f0       	breq	.+14     	; 0x1a62 <__vector_25+0x4e>
    1a54:	80 93 ad 08 	sts	0x08AD, r24	; 0x8008ad <UART_RxHead>
    1a58:	fc 01       	movw	r30, r24
    1a5a:	e0 55       	subi	r30, 0x50	; 80
    1a5c:	f7 4f       	sbci	r31, 0xF7	; 247
    1a5e:	30 83       	st	Z, r19
    1a60:	01 c0       	rjmp	.+2      	; 0x1a64 <__vector_25+0x50>
    1a62:	22 e0       	ldi	r18, 0x02	; 2
    1a64:	20 93 ab 08 	sts	0x08AB, r18	; 0x8008ab <UART_LastRxError>
    1a68:	ff 91       	pop	r31
    1a6a:	ef 91       	pop	r30
    1a6c:	9f 91       	pop	r25
    1a6e:	8f 91       	pop	r24
    1a70:	5f 91       	pop	r21
    1a72:	4f 91       	pop	r20
    1a74:	3f 91       	pop	r19
    1a76:	2f 91       	pop	r18
    1a78:	0f 90       	pop	r0
    1a7a:	0b be       	out	0x3b, r0	; 59
    1a7c:	0f 90       	pop	r0
    1a7e:	0f be       	out	0x3f, r0	; 63
    1a80:	0f 90       	pop	r0
    1a82:	1f 90       	pop	r1
    1a84:	18 95       	reti

00001a86 <__vector_26>:
    1a86:	1f 92       	push	r1
    1a88:	0f 92       	push	r0
    1a8a:	0f b6       	in	r0, 0x3f	; 63
    1a8c:	0f 92       	push	r0
    1a8e:	11 24       	eor	r1, r1
    1a90:	0b b6       	in	r0, 0x3b	; 59
    1a92:	0f 92       	push	r0
    1a94:	8f 93       	push	r24
    1a96:	9f 93       	push	r25
    1a98:	ef 93       	push	r30
    1a9a:	ff 93       	push	r31
    1a9c:	90 91 af 08 	lds	r25, 0x08AF	; 0x8008af <UART_TxHead>
    1aa0:	80 91 ae 08 	lds	r24, 0x08AE	; 0x8008ae <UART_TxTail>
    1aa4:	98 17       	cp	r25, r24
    1aa6:	89 f0       	breq	.+34     	; 0x1aca <__vector_26+0x44>
    1aa8:	80 91 ae 08 	lds	r24, 0x08AE	; 0x8008ae <UART_TxTail>
    1aac:	90 e0       	ldi	r25, 0x00	; 0
    1aae:	01 96       	adiw	r24, 0x01	; 1
    1ab0:	8f 77       	andi	r24, 0x7F	; 127
    1ab2:	99 27       	eor	r25, r25
    1ab4:	80 93 ae 08 	sts	0x08AE, r24	; 0x8008ae <UART_TxTail>
    1ab8:	fc 01       	movw	r30, r24
    1aba:	e0 5d       	subi	r30, 0xD0	; 208
    1abc:	f6 4f       	sbci	r31, 0xF6	; 246
    1abe:	80 81       	ld	r24, Z
    1ac0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    1ac4:	10 92 9b 05 	sts	0x059B, r1	; 0x80059b <UART0_Transmission_end>
    1ac8:	08 c0       	rjmp	.+16     	; 0x1ada <__vector_26+0x54>
    1aca:	e1 ec       	ldi	r30, 0xC1	; 193
    1acc:	f0 e0       	ldi	r31, 0x00	; 0
    1ace:	80 81       	ld	r24, Z
    1ad0:	8f 7d       	andi	r24, 0xDF	; 223
    1ad2:	80 83       	st	Z, r24
    1ad4:	81 e0       	ldi	r24, 0x01	; 1
    1ad6:	80 93 9b 05 	sts	0x059B, r24	; 0x80059b <UART0_Transmission_end>
    1ada:	ff 91       	pop	r31
    1adc:	ef 91       	pop	r30
    1ade:	9f 91       	pop	r25
    1ae0:	8f 91       	pop	r24
    1ae2:	0f 90       	pop	r0
    1ae4:	0b be       	out	0x3b, r0	; 59
    1ae6:	0f 90       	pop	r0
    1ae8:	0f be       	out	0x3f, r0	; 63
    1aea:	0f 90       	pop	r0
    1aec:	1f 90       	pop	r1
    1aee:	18 95       	reti

00001af0 <UART0_init>:
    1af0:	0f 93       	push	r16
    1af2:	1f 93       	push	r17
    1af4:	8b 01       	movw	r16, r22
    1af6:	9c 01       	movw	r18, r24
    1af8:	f8 94       	cli
    1afa:	10 92 af 08 	sts	0x08AF, r1	; 0x8008af <UART_TxHead>
    1afe:	10 92 ae 08 	sts	0x08AE, r1	; 0x8008ae <UART_TxTail>
    1b02:	10 92 ad 08 	sts	0x08AD, r1	; 0x8008ad <UART_RxHead>
    1b06:	10 92 ac 08 	sts	0x08AC, r1	; 0x8008ac <UART_RxTail>
    1b0a:	78 94       	sei
    1b0c:	dc 01       	movw	r26, r24
    1b0e:	cb 01       	movw	r24, r22
    1b10:	80 58       	subi	r24, 0x80	; 128
    1b12:	9b 47       	sbci	r25, 0x7B	; 123
    1b14:	a1 4e       	sbci	r26, 0xE1	; 225
    1b16:	bf 4f       	sbci	r27, 0xFF	; 255
    1b18:	88 0f       	add	r24, r24
    1b1a:	99 1f       	adc	r25, r25
    1b1c:	aa 1f       	adc	r26, r26
    1b1e:	bb 1f       	adc	r27, r27
    1b20:	88 0f       	add	r24, r24
    1b22:	99 1f       	adc	r25, r25
    1b24:	aa 1f       	adc	r26, r26
    1b26:	bb 1f       	adc	r27, r27
    1b28:	bc 01       	movw	r22, r24
    1b2a:	cd 01       	movw	r24, r26
    1b2c:	66 0f       	add	r22, r22
    1b2e:	77 1f       	adc	r23, r23
    1b30:	88 1f       	adc	r24, r24
    1b32:	99 1f       	adc	r25, r25
    1b34:	00 0f       	add	r16, r16
    1b36:	11 1f       	adc	r17, r17
    1b38:	22 1f       	adc	r18, r18
    1b3a:	33 1f       	adc	r19, r19
    1b3c:	00 0f       	add	r16, r16
    1b3e:	11 1f       	adc	r17, r17
    1b40:	22 1f       	adc	r18, r18
    1b42:	33 1f       	adc	r19, r19
    1b44:	a9 01       	movw	r20, r18
    1b46:	98 01       	movw	r18, r16
    1b48:	22 0f       	add	r18, r18
    1b4a:	33 1f       	adc	r19, r19
    1b4c:	44 1f       	adc	r20, r20
    1b4e:	55 1f       	adc	r21, r21
    1b50:	22 0f       	add	r18, r18
    1b52:	33 1f       	adc	r19, r19
    1b54:	44 1f       	adc	r20, r20
    1b56:	55 1f       	adc	r21, r21
    1b58:	0e 94 cf 1a 	call	0x359e	; 0x359e <__udivmodsi4>
    1b5c:	ba 01       	movw	r22, r20
    1b5e:	a9 01       	movw	r20, r18
    1b60:	41 50       	subi	r20, 0x01	; 1
    1b62:	51 09       	sbc	r21, r1
    1b64:	61 09       	sbc	r22, r1
    1b66:	71 09       	sbc	r23, r1
    1b68:	57 ff       	sbrs	r21, 7
    1b6a:	06 c0       	rjmp	.+12     	; 0x1b78 <UART0_init+0x88>
    1b6c:	82 e0       	ldi	r24, 0x02	; 2
    1b6e:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
    1b72:	5f 77       	andi	r21, 0x7F	; 127
    1b74:	66 27       	eor	r22, r22
    1b76:	77 27       	eor	r23, r23
    1b78:	bb 27       	eor	r27, r27
    1b7a:	a7 2f       	mov	r26, r23
    1b7c:	96 2f       	mov	r25, r22
    1b7e:	85 2f       	mov	r24, r21
    1b80:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
    1b84:	40 93 c4 00 	sts	0x00C4, r20	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
    1b88:	88 e9       	ldi	r24, 0x98	; 152
    1b8a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    1b8e:	86 e0       	ldi	r24, 0x06	; 6
    1b90:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
    1b94:	1f 91       	pop	r17
    1b96:	0f 91       	pop	r16
    1b98:	08 95       	ret

00001b9a <UART0_putc>:
    1b9a:	40 91 af 08 	lds	r20, 0x08AF	; 0x8008af <UART_TxHead>
    1b9e:	50 e0       	ldi	r21, 0x00	; 0
    1ba0:	4f 5f       	subi	r20, 0xFF	; 255
    1ba2:	5f 4f       	sbci	r21, 0xFF	; 255
    1ba4:	4f 77       	andi	r20, 0x7F	; 127
    1ba6:	55 27       	eor	r21, r21
    1ba8:	20 91 ae 08 	lds	r18, 0x08AE	; 0x8008ae <UART_TxTail>
    1bac:	30 e0       	ldi	r19, 0x00	; 0
    1bae:	42 17       	cp	r20, r18
    1bb0:	53 07       	cpc	r21, r19
    1bb2:	d1 f3       	breq	.-12     	; 0x1ba8 <UART0_putc+0xe>
    1bb4:	fa 01       	movw	r30, r20
    1bb6:	e0 5d       	subi	r30, 0xD0	; 208
    1bb8:	f6 4f       	sbci	r31, 0xF6	; 246
    1bba:	80 83       	st	Z, r24
    1bbc:	40 93 af 08 	sts	0x08AF, r20	; 0x8008af <UART_TxHead>
    1bc0:	e1 ec       	ldi	r30, 0xC1	; 193
    1bc2:	f0 e0       	ldi	r31, 0x00	; 0
    1bc4:	80 81       	ld	r24, Z
    1bc6:	80 62       	ori	r24, 0x20	; 32
    1bc8:	80 83       	st	Z, r24
    1bca:	08 95       	ret

00001bcc <UART0_OutUDec>:
    1bcc:	0f 93       	push	r16
    1bce:	1f 93       	push	r17
    1bd0:	cf 93       	push	r28
    1bd2:	df 93       	push	r29
    1bd4:	6a 30       	cpi	r22, 0x0A	; 10
    1bd6:	71 05       	cpc	r23, r1
    1bd8:	81 05       	cpc	r24, r1
    1bda:	91 05       	cpc	r25, r1
    1bdc:	58 f0       	brcs	.+22     	; 0x1bf4 <UART0_OutUDec+0x28>
    1bde:	2a e0       	ldi	r18, 0x0A	; 10
    1be0:	30 e0       	ldi	r19, 0x00	; 0
    1be2:	40 e0       	ldi	r20, 0x00	; 0
    1be4:	50 e0       	ldi	r21, 0x00	; 0
    1be6:	0e 94 cf 1a 	call	0x359e	; 0x359e <__udivmodsi4>
    1bea:	06 2f       	mov	r16, r22
    1bec:	ca 01       	movw	r24, r20
    1bee:	b9 01       	movw	r22, r18
    1bf0:	ed df       	rcall	.-38     	; 0x1bcc <UART0_OutUDec>
    1bf2:	60 2f       	mov	r22, r16
    1bf4:	80 e3       	ldi	r24, 0x30	; 48
    1bf6:	86 0f       	add	r24, r22
    1bf8:	d0 df       	rcall	.-96     	; 0x1b9a <UART0_putc>
    1bfa:	df 91       	pop	r29
    1bfc:	cf 91       	pop	r28
    1bfe:	1f 91       	pop	r17
    1c00:	0f 91       	pop	r16
    1c02:	08 95       	ret

00001c04 <UART0_puts>:
    1c04:	cf 93       	push	r28
    1c06:	df 93       	push	r29
    1c08:	ec 01       	movw	r28, r24
    1c0a:	88 81       	ld	r24, Y
    1c0c:	88 23       	and	r24, r24
    1c0e:	29 f0       	breq	.+10     	; 0x1c1a <UART0_puts+0x16>
    1c10:	21 96       	adiw	r28, 0x01	; 1
    1c12:	c3 df       	rcall	.-122    	; 0x1b9a <UART0_putc>
    1c14:	89 91       	ld	r24, Y+
    1c16:	81 11       	cpse	r24, r1
    1c18:	fc cf       	rjmp	.-8      	; 0x1c12 <UART0_puts+0xe>
    1c1a:	df 91       	pop	r29
    1c1c:	cf 91       	pop	r28
    1c1e:	08 95       	ret

00001c20 <__vector_36>:
    1c20:	1f 92       	push	r1
    1c22:	0f 92       	push	r0
    1c24:	0f b6       	in	r0, 0x3f	; 63
    1c26:	0f 92       	push	r0
    1c28:	11 24       	eor	r1, r1
    1c2a:	0b b6       	in	r0, 0x3b	; 59
    1c2c:	0f 92       	push	r0
    1c2e:	2f 93       	push	r18
    1c30:	3f 93       	push	r19
    1c32:	4f 93       	push	r20
    1c34:	5f 93       	push	r21
    1c36:	8f 93       	push	r24
    1c38:	9f 93       	push	r25
    1c3a:	ef 93       	push	r30
    1c3c:	ff 93       	push	r31
    1c3e:	20 91 c8 00 	lds	r18, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
    1c42:	30 91 ce 00 	lds	r19, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    1c46:	28 71       	andi	r18, 0x18	; 24
    1c48:	80 91 a8 07 	lds	r24, 0x07A8	; 0x8007a8 <UART1_RxHead>
    1c4c:	90 e0       	ldi	r25, 0x00	; 0
    1c4e:	01 96       	adiw	r24, 0x01	; 1
    1c50:	8f 77       	andi	r24, 0x7F	; 127
    1c52:	99 27       	eor	r25, r25
    1c54:	40 91 a7 07 	lds	r20, 0x07A7	; 0x8007a7 <UART1_RxTail>
    1c58:	50 e0       	ldi	r21, 0x00	; 0
    1c5a:	84 17       	cp	r24, r20
    1c5c:	95 07       	cpc	r25, r21
    1c5e:	39 f0       	breq	.+14     	; 0x1c6e <__vector_36+0x4e>
    1c60:	80 93 a8 07 	sts	0x07A8, r24	; 0x8007a8 <UART1_RxHead>
    1c64:	fc 01       	movw	r30, r24
    1c66:	e5 55       	subi	r30, 0x55	; 85
    1c68:	f8 4f       	sbci	r31, 0xF8	; 248
    1c6a:	30 83       	st	Z, r19
    1c6c:	01 c0       	rjmp	.+2      	; 0x1c70 <__vector_36+0x50>
    1c6e:	22 e0       	ldi	r18, 0x02	; 2
    1c70:	20 93 a6 07 	sts	0x07A6, r18	; 0x8007a6 <UART1_LastRxError>
    1c74:	ff 91       	pop	r31
    1c76:	ef 91       	pop	r30
    1c78:	9f 91       	pop	r25
    1c7a:	8f 91       	pop	r24
    1c7c:	5f 91       	pop	r21
    1c7e:	4f 91       	pop	r20
    1c80:	3f 91       	pop	r19
    1c82:	2f 91       	pop	r18
    1c84:	0f 90       	pop	r0
    1c86:	0b be       	out	0x3b, r0	; 59
    1c88:	0f 90       	pop	r0
    1c8a:	0f be       	out	0x3f, r0	; 63
    1c8c:	0f 90       	pop	r0
    1c8e:	1f 90       	pop	r1
    1c90:	18 95       	reti

00001c92 <__vector_37>:
    1c92:	1f 92       	push	r1
    1c94:	0f 92       	push	r0
    1c96:	0f b6       	in	r0, 0x3f	; 63
    1c98:	0f 92       	push	r0
    1c9a:	11 24       	eor	r1, r1
    1c9c:	0b b6       	in	r0, 0x3b	; 59
    1c9e:	0f 92       	push	r0
    1ca0:	8f 93       	push	r24
    1ca2:	9f 93       	push	r25
    1ca4:	ef 93       	push	r30
    1ca6:	ff 93       	push	r31
    1ca8:	90 91 aa 07 	lds	r25, 0x07AA	; 0x8007aa <UART1_TxHead>
    1cac:	80 91 a9 07 	lds	r24, 0x07A9	; 0x8007a9 <UART1_TxTail>
    1cb0:	98 17       	cp	r25, r24
    1cb2:	89 f0       	breq	.+34     	; 0x1cd6 <__vector_37+0x44>
    1cb4:	80 91 a9 07 	lds	r24, 0x07A9	; 0x8007a9 <UART1_TxTail>
    1cb8:	90 e0       	ldi	r25, 0x00	; 0
    1cba:	01 96       	adiw	r24, 0x01	; 1
    1cbc:	8f 77       	andi	r24, 0x7F	; 127
    1cbe:	99 27       	eor	r25, r25
    1cc0:	80 93 a9 07 	sts	0x07A9, r24	; 0x8007a9 <UART1_TxTail>
    1cc4:	fc 01       	movw	r30, r24
    1cc6:	e5 5d       	subi	r30, 0xD5	; 213
    1cc8:	f7 4f       	sbci	r31, 0xF7	; 247
    1cca:	80 81       	ld	r24, Z
    1ccc:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    1cd0:	10 92 9a 05 	sts	0x059A, r1	; 0x80059a <UART1_Transmission_end>
    1cd4:	08 c0       	rjmp	.+16     	; 0x1ce6 <__vector_37+0x54>
    1cd6:	e9 ec       	ldi	r30, 0xC9	; 201
    1cd8:	f0 e0       	ldi	r31, 0x00	; 0
    1cda:	80 81       	ld	r24, Z
    1cdc:	8f 7d       	andi	r24, 0xDF	; 223
    1cde:	80 83       	st	Z, r24
    1ce0:	81 e0       	ldi	r24, 0x01	; 1
    1ce2:	80 93 9a 05 	sts	0x059A, r24	; 0x80059a <UART1_Transmission_end>
    1ce6:	ff 91       	pop	r31
    1ce8:	ef 91       	pop	r30
    1cea:	9f 91       	pop	r25
    1cec:	8f 91       	pop	r24
    1cee:	0f 90       	pop	r0
    1cf0:	0b be       	out	0x3b, r0	; 59
    1cf2:	0f 90       	pop	r0
    1cf4:	0f be       	out	0x3f, r0	; 63
    1cf6:	0f 90       	pop	r0
    1cf8:	1f 90       	pop	r1
    1cfa:	18 95       	reti

00001cfc <UART1_init>:
    1cfc:	0f 93       	push	r16
    1cfe:	1f 93       	push	r17
    1d00:	8b 01       	movw	r16, r22
    1d02:	9c 01       	movw	r18, r24
    1d04:	f8 94       	cli
    1d06:	10 92 aa 07 	sts	0x07AA, r1	; 0x8007aa <UART1_TxHead>
    1d0a:	10 92 a9 07 	sts	0x07A9, r1	; 0x8007a9 <UART1_TxTail>
    1d0e:	10 92 a8 07 	sts	0x07A8, r1	; 0x8007a8 <UART1_RxHead>
    1d12:	10 92 a7 07 	sts	0x07A7, r1	; 0x8007a7 <UART1_RxTail>
    1d16:	78 94       	sei
    1d18:	dc 01       	movw	r26, r24
    1d1a:	cb 01       	movw	r24, r22
    1d1c:	80 58       	subi	r24, 0x80	; 128
    1d1e:	9b 47       	sbci	r25, 0x7B	; 123
    1d20:	a1 4e       	sbci	r26, 0xE1	; 225
    1d22:	bf 4f       	sbci	r27, 0xFF	; 255
    1d24:	88 0f       	add	r24, r24
    1d26:	99 1f       	adc	r25, r25
    1d28:	aa 1f       	adc	r26, r26
    1d2a:	bb 1f       	adc	r27, r27
    1d2c:	88 0f       	add	r24, r24
    1d2e:	99 1f       	adc	r25, r25
    1d30:	aa 1f       	adc	r26, r26
    1d32:	bb 1f       	adc	r27, r27
    1d34:	bc 01       	movw	r22, r24
    1d36:	cd 01       	movw	r24, r26
    1d38:	66 0f       	add	r22, r22
    1d3a:	77 1f       	adc	r23, r23
    1d3c:	88 1f       	adc	r24, r24
    1d3e:	99 1f       	adc	r25, r25
    1d40:	00 0f       	add	r16, r16
    1d42:	11 1f       	adc	r17, r17
    1d44:	22 1f       	adc	r18, r18
    1d46:	33 1f       	adc	r19, r19
    1d48:	00 0f       	add	r16, r16
    1d4a:	11 1f       	adc	r17, r17
    1d4c:	22 1f       	adc	r18, r18
    1d4e:	33 1f       	adc	r19, r19
    1d50:	a9 01       	movw	r20, r18
    1d52:	98 01       	movw	r18, r16
    1d54:	22 0f       	add	r18, r18
    1d56:	33 1f       	adc	r19, r19
    1d58:	44 1f       	adc	r20, r20
    1d5a:	55 1f       	adc	r21, r21
    1d5c:	22 0f       	add	r18, r18
    1d5e:	33 1f       	adc	r19, r19
    1d60:	44 1f       	adc	r20, r20
    1d62:	55 1f       	adc	r21, r21
    1d64:	0e 94 cf 1a 	call	0x359e	; 0x359e <__udivmodsi4>
    1d68:	ba 01       	movw	r22, r20
    1d6a:	a9 01       	movw	r20, r18
    1d6c:	41 50       	subi	r20, 0x01	; 1
    1d6e:	51 09       	sbc	r21, r1
    1d70:	61 09       	sbc	r22, r1
    1d72:	71 09       	sbc	r23, r1
    1d74:	57 ff       	sbrs	r21, 7
    1d76:	06 c0       	rjmp	.+12     	; 0x1d84 <UART1_init+0x88>
    1d78:	82 e0       	ldi	r24, 0x02	; 2
    1d7a:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
    1d7e:	5f 77       	andi	r21, 0x7F	; 127
    1d80:	66 27       	eor	r22, r22
    1d82:	77 27       	eor	r23, r23
    1d84:	bb 27       	eor	r27, r27
    1d86:	a7 2f       	mov	r26, r23
    1d88:	96 2f       	mov	r25, r22
    1d8a:	85 2f       	mov	r24, r21
    1d8c:	80 93 cd 00 	sts	0x00CD, r24	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7000cd>
    1d90:	40 93 cc 00 	sts	0x00CC, r20	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7000cc>
    1d94:	88 e9       	ldi	r24, 0x98	; 152
    1d96:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7000c9>
    1d9a:	86 e0       	ldi	r24, 0x06	; 6
    1d9c:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7000ca>
    1da0:	1f 91       	pop	r17
    1da2:	0f 91       	pop	r16
    1da4:	08 95       	ret

00001da6 <UART1_getc>:
    1da6:	f8 94       	cli
    1da8:	90 91 a8 07 	lds	r25, 0x07A8	; 0x8007a8 <UART1_RxHead>
    1dac:	80 91 a7 07 	lds	r24, 0x07A7	; 0x8007a7 <UART1_RxTail>
    1db0:	98 13       	cpse	r25, r24
    1db2:	04 c0       	rjmp	.+8      	; 0x1dbc <UART1_getc+0x16>
    1db4:	78 94       	sei
    1db6:	80 e0       	ldi	r24, 0x00	; 0
    1db8:	91 e0       	ldi	r25, 0x01	; 1
    1dba:	08 95       	ret
    1dbc:	80 91 a7 07 	lds	r24, 0x07A7	; 0x8007a7 <UART1_RxTail>
    1dc0:	90 e0       	ldi	r25, 0x00	; 0
    1dc2:	01 96       	adiw	r24, 0x01	; 1
    1dc4:	8f 77       	andi	r24, 0x7F	; 127
    1dc6:	99 27       	eor	r25, r25
    1dc8:	80 93 a7 07 	sts	0x07A7, r24	; 0x8007a7 <UART1_RxTail>
    1dcc:	78 94       	sei
    1dce:	fc 01       	movw	r30, r24
    1dd0:	e5 55       	subi	r30, 0x55	; 85
    1dd2:	f8 4f       	sbci	r31, 0xF8	; 248
    1dd4:	20 81       	ld	r18, Z
    1dd6:	80 91 a6 07 	lds	r24, 0x07A6	; 0x8007a6 <UART1_LastRxError>
    1dda:	90 e0       	ldi	r25, 0x00	; 0
    1ddc:	98 2f       	mov	r25, r24
    1dde:	88 27       	eor	r24, r24
    1de0:	82 0f       	add	r24, r18
    1de2:	91 1d       	adc	r25, r1
    1de4:	08 95       	ret

00001de6 <UART1_putc>:
    1de6:	40 91 aa 07 	lds	r20, 0x07AA	; 0x8007aa <UART1_TxHead>
    1dea:	50 e0       	ldi	r21, 0x00	; 0
    1dec:	4f 5f       	subi	r20, 0xFF	; 255
    1dee:	5f 4f       	sbci	r21, 0xFF	; 255
    1df0:	4f 77       	andi	r20, 0x7F	; 127
    1df2:	55 27       	eor	r21, r21
    1df4:	20 91 a9 07 	lds	r18, 0x07A9	; 0x8007a9 <UART1_TxTail>
    1df8:	30 e0       	ldi	r19, 0x00	; 0
    1dfa:	42 17       	cp	r20, r18
    1dfc:	53 07       	cpc	r21, r19
    1dfe:	d1 f3       	breq	.-12     	; 0x1df4 <UART1_putc+0xe>
    1e00:	fa 01       	movw	r30, r20
    1e02:	e5 5d       	subi	r30, 0xD5	; 213
    1e04:	f7 4f       	sbci	r31, 0xF7	; 247
    1e06:	80 83       	st	Z, r24
    1e08:	40 93 aa 07 	sts	0x07AA, r20	; 0x8007aa <UART1_TxHead>
    1e0c:	e9 ec       	ldi	r30, 0xC9	; 201
    1e0e:	f0 e0       	ldi	r31, 0x00	; 0
    1e10:	80 81       	ld	r24, Z
    1e12:	80 62       	ori	r24, 0x20	; 32
    1e14:	80 83       	st	Z, r24
    1e16:	08 95       	ret

00001e18 <UART1_available>:
    1e18:	f8 94       	cli
    1e1a:	80 91 a8 07 	lds	r24, 0x07A8	; 0x8007a8 <UART1_RxHead>
    1e1e:	20 91 a7 07 	lds	r18, 0x07A7	; 0x8007a7 <UART1_RxTail>
    1e22:	78 94       	sei
    1e24:	90 e0       	ldi	r25, 0x00	; 0
    1e26:	80 58       	subi	r24, 0x80	; 128
    1e28:	9f 4f       	sbci	r25, 0xFF	; 255
    1e2a:	82 1b       	sub	r24, r18
    1e2c:	91 09       	sbc	r25, r1
    1e2e:	8f 77       	andi	r24, 0x7F	; 127
    1e30:	99 27       	eor	r25, r25
    1e32:	08 95       	ret

00001e34 <UART1_flush>:
    1e34:	80 91 9a 05 	lds	r24, 0x059A	; 0x80059a <UART1_Transmission_end>
    1e38:	88 23       	and	r24, r24
    1e3a:	e1 f3       	breq	.-8      	; 0x1e34 <UART1_flush>
    1e3c:	08 95       	ret

00001e3e <__vector_51>:
    1e3e:	1f 92       	push	r1
    1e40:	0f 92       	push	r0
    1e42:	0f b6       	in	r0, 0x3f	; 63
    1e44:	0f 92       	push	r0
    1e46:	11 24       	eor	r1, r1
    1e48:	0b b6       	in	r0, 0x3b	; 59
    1e4a:	0f 92       	push	r0
    1e4c:	2f 93       	push	r18
    1e4e:	3f 93       	push	r19
    1e50:	4f 93       	push	r20
    1e52:	5f 93       	push	r21
    1e54:	8f 93       	push	r24
    1e56:	9f 93       	push	r25
    1e58:	ef 93       	push	r30
    1e5a:	ff 93       	push	r31
    1e5c:	20 91 d0 00 	lds	r18, 0x00D0	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7000d0>
    1e60:	30 91 d6 00 	lds	r19, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    1e64:	28 71       	andi	r18, 0x18	; 24
    1e66:	80 91 a3 06 	lds	r24, 0x06A3	; 0x8006a3 <UART2_RxHead>
    1e6a:	90 e0       	ldi	r25, 0x00	; 0
    1e6c:	01 96       	adiw	r24, 0x01	; 1
    1e6e:	8f 77       	andi	r24, 0x7F	; 127
    1e70:	99 27       	eor	r25, r25
    1e72:	40 91 a2 06 	lds	r20, 0x06A2	; 0x8006a2 <UART2_RxTail>
    1e76:	50 e0       	ldi	r21, 0x00	; 0
    1e78:	84 17       	cp	r24, r20
    1e7a:	95 07       	cpc	r25, r21
    1e7c:	39 f0       	breq	.+14     	; 0x1e8c <__vector_51+0x4e>
    1e7e:	80 93 a3 06 	sts	0x06A3, r24	; 0x8006a3 <UART2_RxHead>
    1e82:	fc 01       	movw	r30, r24
    1e84:	ea 55       	subi	r30, 0x5A	; 90
    1e86:	f9 4f       	sbci	r31, 0xF9	; 249
    1e88:	30 83       	st	Z, r19
    1e8a:	01 c0       	rjmp	.+2      	; 0x1e8e <__vector_51+0x50>
    1e8c:	22 e0       	ldi	r18, 0x02	; 2
    1e8e:	20 93 a1 06 	sts	0x06A1, r18	; 0x8006a1 <UART2_LastRxError>
    1e92:	ff 91       	pop	r31
    1e94:	ef 91       	pop	r30
    1e96:	9f 91       	pop	r25
    1e98:	8f 91       	pop	r24
    1e9a:	5f 91       	pop	r21
    1e9c:	4f 91       	pop	r20
    1e9e:	3f 91       	pop	r19
    1ea0:	2f 91       	pop	r18
    1ea2:	0f 90       	pop	r0
    1ea4:	0b be       	out	0x3b, r0	; 59
    1ea6:	0f 90       	pop	r0
    1ea8:	0f be       	out	0x3f, r0	; 63
    1eaa:	0f 90       	pop	r0
    1eac:	1f 90       	pop	r1
    1eae:	18 95       	reti

00001eb0 <__vector_52>:
    1eb0:	1f 92       	push	r1
    1eb2:	0f 92       	push	r0
    1eb4:	0f b6       	in	r0, 0x3f	; 63
    1eb6:	0f 92       	push	r0
    1eb8:	11 24       	eor	r1, r1
    1eba:	0b b6       	in	r0, 0x3b	; 59
    1ebc:	0f 92       	push	r0
    1ebe:	8f 93       	push	r24
    1ec0:	9f 93       	push	r25
    1ec2:	ef 93       	push	r30
    1ec4:	ff 93       	push	r31
    1ec6:	90 91 a5 06 	lds	r25, 0x06A5	; 0x8006a5 <UART2_TxHead>
    1eca:	80 91 a4 06 	lds	r24, 0x06A4	; 0x8006a4 <UART2_TxTail>
    1ece:	98 17       	cp	r25, r24
    1ed0:	89 f0       	breq	.+34     	; 0x1ef4 <__vector_52+0x44>
    1ed2:	80 91 a4 06 	lds	r24, 0x06A4	; 0x8006a4 <UART2_TxTail>
    1ed6:	90 e0       	ldi	r25, 0x00	; 0
    1ed8:	01 96       	adiw	r24, 0x01	; 1
    1eda:	8f 77       	andi	r24, 0x7F	; 127
    1edc:	99 27       	eor	r25, r25
    1ede:	80 93 a4 06 	sts	0x06A4, r24	; 0x8006a4 <UART2_TxTail>
    1ee2:	fc 01       	movw	r30, r24
    1ee4:	ea 5d       	subi	r30, 0xDA	; 218
    1ee6:	f8 4f       	sbci	r31, 0xF8	; 248
    1ee8:	80 81       	ld	r24, Z
    1eea:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    1eee:	10 92 99 05 	sts	0x0599, r1	; 0x800599 <UART2_Transmission_end>
    1ef2:	08 c0       	rjmp	.+16     	; 0x1f04 <__vector_52+0x54>
    1ef4:	e1 ed       	ldi	r30, 0xD1	; 209
    1ef6:	f0 e0       	ldi	r31, 0x00	; 0
    1ef8:	80 81       	ld	r24, Z
    1efa:	8f 7d       	andi	r24, 0xDF	; 223
    1efc:	80 83       	st	Z, r24
    1efe:	81 e0       	ldi	r24, 0x01	; 1
    1f00:	80 93 99 05 	sts	0x0599, r24	; 0x800599 <UART2_Transmission_end>
    1f04:	ff 91       	pop	r31
    1f06:	ef 91       	pop	r30
    1f08:	9f 91       	pop	r25
    1f0a:	8f 91       	pop	r24
    1f0c:	0f 90       	pop	r0
    1f0e:	0b be       	out	0x3b, r0	; 59
    1f10:	0f 90       	pop	r0
    1f12:	0f be       	out	0x3f, r0	; 63
    1f14:	0f 90       	pop	r0
    1f16:	1f 90       	pop	r1
    1f18:	18 95       	reti

00001f1a <UART2_init>:
    1f1a:	0f 93       	push	r16
    1f1c:	1f 93       	push	r17
    1f1e:	8b 01       	movw	r16, r22
    1f20:	9c 01       	movw	r18, r24
    1f22:	f8 94       	cli
    1f24:	10 92 a5 06 	sts	0x06A5, r1	; 0x8006a5 <UART2_TxHead>
    1f28:	10 92 a4 06 	sts	0x06A4, r1	; 0x8006a4 <UART2_TxTail>
    1f2c:	10 92 a3 06 	sts	0x06A3, r1	; 0x8006a3 <UART2_RxHead>
    1f30:	10 92 a2 06 	sts	0x06A2, r1	; 0x8006a2 <UART2_RxTail>
    1f34:	78 94       	sei
    1f36:	dc 01       	movw	r26, r24
    1f38:	cb 01       	movw	r24, r22
    1f3a:	80 58       	subi	r24, 0x80	; 128
    1f3c:	9b 47       	sbci	r25, 0x7B	; 123
    1f3e:	a1 4e       	sbci	r26, 0xE1	; 225
    1f40:	bf 4f       	sbci	r27, 0xFF	; 255
    1f42:	88 0f       	add	r24, r24
    1f44:	99 1f       	adc	r25, r25
    1f46:	aa 1f       	adc	r26, r26
    1f48:	bb 1f       	adc	r27, r27
    1f4a:	88 0f       	add	r24, r24
    1f4c:	99 1f       	adc	r25, r25
    1f4e:	aa 1f       	adc	r26, r26
    1f50:	bb 1f       	adc	r27, r27
    1f52:	bc 01       	movw	r22, r24
    1f54:	cd 01       	movw	r24, r26
    1f56:	66 0f       	add	r22, r22
    1f58:	77 1f       	adc	r23, r23
    1f5a:	88 1f       	adc	r24, r24
    1f5c:	99 1f       	adc	r25, r25
    1f5e:	00 0f       	add	r16, r16
    1f60:	11 1f       	adc	r17, r17
    1f62:	22 1f       	adc	r18, r18
    1f64:	33 1f       	adc	r19, r19
    1f66:	00 0f       	add	r16, r16
    1f68:	11 1f       	adc	r17, r17
    1f6a:	22 1f       	adc	r18, r18
    1f6c:	33 1f       	adc	r19, r19
    1f6e:	a9 01       	movw	r20, r18
    1f70:	98 01       	movw	r18, r16
    1f72:	22 0f       	add	r18, r18
    1f74:	33 1f       	adc	r19, r19
    1f76:	44 1f       	adc	r20, r20
    1f78:	55 1f       	adc	r21, r21
    1f7a:	22 0f       	add	r18, r18
    1f7c:	33 1f       	adc	r19, r19
    1f7e:	44 1f       	adc	r20, r20
    1f80:	55 1f       	adc	r21, r21
    1f82:	0e 94 cf 1a 	call	0x359e	; 0x359e <__udivmodsi4>
    1f86:	ba 01       	movw	r22, r20
    1f88:	a9 01       	movw	r20, r18
    1f8a:	41 50       	subi	r20, 0x01	; 1
    1f8c:	51 09       	sbc	r21, r1
    1f8e:	61 09       	sbc	r22, r1
    1f90:	71 09       	sbc	r23, r1
    1f92:	57 ff       	sbrs	r21, 7
    1f94:	06 c0       	rjmp	.+12     	; 0x1fa2 <UART2_init+0x88>
    1f96:	82 e0       	ldi	r24, 0x02	; 2
    1f98:	80 93 d0 00 	sts	0x00D0, r24	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7000d0>
    1f9c:	5f 77       	andi	r21, 0x7F	; 127
    1f9e:	66 27       	eor	r22, r22
    1fa0:	77 27       	eor	r23, r23
    1fa2:	bb 27       	eor	r27, r27
    1fa4:	a7 2f       	mov	r26, r23
    1fa6:	96 2f       	mov	r25, r22
    1fa8:	85 2f       	mov	r24, r21
    1faa:	80 93 d5 00 	sts	0x00D5, r24	; 0x8000d5 <__TEXT_REGION_LENGTH__+0x7000d5>
    1fae:	40 93 d4 00 	sts	0x00D4, r20	; 0x8000d4 <__TEXT_REGION_LENGTH__+0x7000d4>
    1fb2:	88 e9       	ldi	r24, 0x98	; 152
    1fb4:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7000d1>
    1fb8:	86 e0       	ldi	r24, 0x06	; 6
    1fba:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7000d2>
    1fbe:	1f 91       	pop	r17
    1fc0:	0f 91       	pop	r16
    1fc2:	08 95       	ret

00001fc4 <UART2_getc>:
    1fc4:	90 91 a3 06 	lds	r25, 0x06A3	; 0x8006a3 <UART2_RxHead>
    1fc8:	80 91 a2 06 	lds	r24, 0x06A2	; 0x8006a2 <UART2_RxTail>
    1fcc:	98 17       	cp	r25, r24
    1fce:	a1 f0       	breq	.+40     	; 0x1ff8 <UART2_getc+0x34>
    1fd0:	80 91 a2 06 	lds	r24, 0x06A2	; 0x8006a2 <UART2_RxTail>
    1fd4:	90 e0       	ldi	r25, 0x00	; 0
    1fd6:	01 96       	adiw	r24, 0x01	; 1
    1fd8:	8f 77       	andi	r24, 0x7F	; 127
    1fda:	99 27       	eor	r25, r25
    1fdc:	80 93 a2 06 	sts	0x06A2, r24	; 0x8006a2 <UART2_RxTail>
    1fe0:	fc 01       	movw	r30, r24
    1fe2:	ea 55       	subi	r30, 0x5A	; 90
    1fe4:	f9 4f       	sbci	r31, 0xF9	; 249
    1fe6:	20 81       	ld	r18, Z
    1fe8:	80 91 a1 06 	lds	r24, 0x06A1	; 0x8006a1 <UART2_LastRxError>
    1fec:	90 e0       	ldi	r25, 0x00	; 0
    1fee:	98 2f       	mov	r25, r24
    1ff0:	88 27       	eor	r24, r24
    1ff2:	82 0f       	add	r24, r18
    1ff4:	91 1d       	adc	r25, r1
    1ff6:	08 95       	ret
    1ff8:	80 e0       	ldi	r24, 0x00	; 0
    1ffa:	91 e0       	ldi	r25, 0x01	; 1
    1ffc:	08 95       	ret

00001ffe <UART2_putc>:
    1ffe:	40 91 a5 06 	lds	r20, 0x06A5	; 0x8006a5 <UART2_TxHead>
    2002:	50 e0       	ldi	r21, 0x00	; 0
    2004:	4f 5f       	subi	r20, 0xFF	; 255
    2006:	5f 4f       	sbci	r21, 0xFF	; 255
    2008:	4f 77       	andi	r20, 0x7F	; 127
    200a:	55 27       	eor	r21, r21
    200c:	20 91 a4 06 	lds	r18, 0x06A4	; 0x8006a4 <UART2_TxTail>
    2010:	30 e0       	ldi	r19, 0x00	; 0
    2012:	42 17       	cp	r20, r18
    2014:	53 07       	cpc	r21, r19
    2016:	d1 f3       	breq	.-12     	; 0x200c <UART2_putc+0xe>
    2018:	fa 01       	movw	r30, r20
    201a:	ea 5d       	subi	r30, 0xDA	; 218
    201c:	f8 4f       	sbci	r31, 0xF8	; 248
    201e:	80 83       	st	Z, r24
    2020:	40 93 a5 06 	sts	0x06A5, r20	; 0x8006a5 <UART2_TxHead>
    2024:	e1 ed       	ldi	r30, 0xD1	; 209
    2026:	f0 e0       	ldi	r31, 0x00	; 0
    2028:	80 81       	ld	r24, Z
    202a:	80 62       	ori	r24, 0x20	; 32
    202c:	80 83       	st	Z, r24
    202e:	08 95       	ret

00002030 <UART2_available>:
    2030:	f8 94       	cli
    2032:	80 91 a3 06 	lds	r24, 0x06A3	; 0x8006a3 <UART2_RxHead>
    2036:	20 91 a2 06 	lds	r18, 0x06A2	; 0x8006a2 <UART2_RxTail>
    203a:	78 94       	sei
    203c:	90 e0       	ldi	r25, 0x00	; 0
    203e:	80 58       	subi	r24, 0x80	; 128
    2040:	9f 4f       	sbci	r25, 0xFF	; 255
    2042:	82 1b       	sub	r24, r18
    2044:	91 09       	sbc	r25, r1
    2046:	8f 77       	andi	r24, 0x7F	; 127
    2048:	99 27       	eor	r25, r25
    204a:	08 95       	ret

0000204c <UART2_flush>:
    204c:	80 91 99 05 	lds	r24, 0x0599	; 0x800599 <UART2_Transmission_end>
    2050:	88 23       	and	r24, r24
    2052:	e1 f3       	breq	.-8      	; 0x204c <UART2_flush>
    2054:	08 95       	ret

00002056 <__vector_54>:
    2056:	1f 92       	push	r1
    2058:	0f 92       	push	r0
    205a:	0f b6       	in	r0, 0x3f	; 63
    205c:	0f 92       	push	r0
    205e:	11 24       	eor	r1, r1
    2060:	0b b6       	in	r0, 0x3b	; 59
    2062:	0f 92       	push	r0
    2064:	2f 93       	push	r18
    2066:	3f 93       	push	r19
    2068:	4f 93       	push	r20
    206a:	5f 93       	push	r21
    206c:	8f 93       	push	r24
    206e:	9f 93       	push	r25
    2070:	ef 93       	push	r30
    2072:	ff 93       	push	r31
    2074:	20 91 30 01 	lds	r18, 0x0130	; 0x800130 <__TEXT_REGION_LENGTH__+0x700130>
    2078:	30 91 36 01 	lds	r19, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    207c:	28 71       	andi	r18, 0x18	; 24
    207e:	80 91 9e 05 	lds	r24, 0x059E	; 0x80059e <UART3_RxHead>
    2082:	90 e0       	ldi	r25, 0x00	; 0
    2084:	01 96       	adiw	r24, 0x01	; 1
    2086:	8f 77       	andi	r24, 0x7F	; 127
    2088:	99 27       	eor	r25, r25
    208a:	40 91 9d 05 	lds	r20, 0x059D	; 0x80059d <UART3_RxTail>
    208e:	50 e0       	ldi	r21, 0x00	; 0
    2090:	84 17       	cp	r24, r20
    2092:	95 07       	cpc	r25, r21
    2094:	39 f0       	breq	.+14     	; 0x20a4 <__vector_54+0x4e>
    2096:	80 93 9e 05 	sts	0x059E, r24	; 0x80059e <UART3_RxHead>
    209a:	fc 01       	movw	r30, r24
    209c:	ef 55       	subi	r30, 0x5F	; 95
    209e:	fa 4f       	sbci	r31, 0xFA	; 250
    20a0:	30 83       	st	Z, r19
    20a2:	01 c0       	rjmp	.+2      	; 0x20a6 <__vector_54+0x50>
    20a4:	22 e0       	ldi	r18, 0x02	; 2
    20a6:	20 93 9c 05 	sts	0x059C, r18	; 0x80059c <UART3_LastRxError>
    20aa:	ff 91       	pop	r31
    20ac:	ef 91       	pop	r30
    20ae:	9f 91       	pop	r25
    20b0:	8f 91       	pop	r24
    20b2:	5f 91       	pop	r21
    20b4:	4f 91       	pop	r20
    20b6:	3f 91       	pop	r19
    20b8:	2f 91       	pop	r18
    20ba:	0f 90       	pop	r0
    20bc:	0b be       	out	0x3b, r0	; 59
    20be:	0f 90       	pop	r0
    20c0:	0f be       	out	0x3f, r0	; 63
    20c2:	0f 90       	pop	r0
    20c4:	1f 90       	pop	r1
    20c6:	18 95       	reti

000020c8 <__vector_55>:
    20c8:	1f 92       	push	r1
    20ca:	0f 92       	push	r0
    20cc:	0f b6       	in	r0, 0x3f	; 63
    20ce:	0f 92       	push	r0
    20d0:	11 24       	eor	r1, r1
    20d2:	0b b6       	in	r0, 0x3b	; 59
    20d4:	0f 92       	push	r0
    20d6:	8f 93       	push	r24
    20d8:	9f 93       	push	r25
    20da:	ef 93       	push	r30
    20dc:	ff 93       	push	r31
    20de:	90 91 a0 05 	lds	r25, 0x05A0	; 0x8005a0 <UART3_TxHead>
    20e2:	80 91 9f 05 	lds	r24, 0x059F	; 0x80059f <UART3_TxTail>
    20e6:	98 17       	cp	r25, r24
    20e8:	89 f0       	breq	.+34     	; 0x210c <__vector_55+0x44>
    20ea:	80 91 9f 05 	lds	r24, 0x059F	; 0x80059f <UART3_TxTail>
    20ee:	90 e0       	ldi	r25, 0x00	; 0
    20f0:	01 96       	adiw	r24, 0x01	; 1
    20f2:	8f 77       	andi	r24, 0x7F	; 127
    20f4:	99 27       	eor	r25, r25
    20f6:	80 93 9f 05 	sts	0x059F, r24	; 0x80059f <UART3_TxTail>
    20fa:	fc 01       	movw	r30, r24
    20fc:	ef 5d       	subi	r30, 0xDF	; 223
    20fe:	f9 4f       	sbci	r31, 0xF9	; 249
    2100:	80 81       	ld	r24, Z
    2102:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    2106:	10 92 98 05 	sts	0x0598, r1	; 0x800598 <UART3_Transmission_end>
    210a:	08 c0       	rjmp	.+16     	; 0x211c <__vector_55+0x54>
    210c:	e1 e3       	ldi	r30, 0x31	; 49
    210e:	f1 e0       	ldi	r31, 0x01	; 1
    2110:	80 81       	ld	r24, Z
    2112:	8f 7d       	andi	r24, 0xDF	; 223
    2114:	80 83       	st	Z, r24
    2116:	81 e0       	ldi	r24, 0x01	; 1
    2118:	80 93 98 05 	sts	0x0598, r24	; 0x800598 <UART3_Transmission_end>
    211c:	ff 91       	pop	r31
    211e:	ef 91       	pop	r30
    2120:	9f 91       	pop	r25
    2122:	8f 91       	pop	r24
    2124:	0f 90       	pop	r0
    2126:	0b be       	out	0x3b, r0	; 59
    2128:	0f 90       	pop	r0
    212a:	0f be       	out	0x3f, r0	; 63
    212c:	0f 90       	pop	r0
    212e:	1f 90       	pop	r1
    2130:	18 95       	reti

00002132 <UART3_init>:
    2132:	0f 93       	push	r16
    2134:	1f 93       	push	r17
    2136:	8b 01       	movw	r16, r22
    2138:	9c 01       	movw	r18, r24
    213a:	f8 94       	cli
    213c:	10 92 a0 05 	sts	0x05A0, r1	; 0x8005a0 <UART3_TxHead>
    2140:	10 92 9f 05 	sts	0x059F, r1	; 0x80059f <UART3_TxTail>
    2144:	10 92 9e 05 	sts	0x059E, r1	; 0x80059e <UART3_RxHead>
    2148:	10 92 9d 05 	sts	0x059D, r1	; 0x80059d <UART3_RxTail>
    214c:	78 94       	sei
    214e:	dc 01       	movw	r26, r24
    2150:	cb 01       	movw	r24, r22
    2152:	80 58       	subi	r24, 0x80	; 128
    2154:	9b 47       	sbci	r25, 0x7B	; 123
    2156:	a1 4e       	sbci	r26, 0xE1	; 225
    2158:	bf 4f       	sbci	r27, 0xFF	; 255
    215a:	88 0f       	add	r24, r24
    215c:	99 1f       	adc	r25, r25
    215e:	aa 1f       	adc	r26, r26
    2160:	bb 1f       	adc	r27, r27
    2162:	88 0f       	add	r24, r24
    2164:	99 1f       	adc	r25, r25
    2166:	aa 1f       	adc	r26, r26
    2168:	bb 1f       	adc	r27, r27
    216a:	bc 01       	movw	r22, r24
    216c:	cd 01       	movw	r24, r26
    216e:	66 0f       	add	r22, r22
    2170:	77 1f       	adc	r23, r23
    2172:	88 1f       	adc	r24, r24
    2174:	99 1f       	adc	r25, r25
    2176:	00 0f       	add	r16, r16
    2178:	11 1f       	adc	r17, r17
    217a:	22 1f       	adc	r18, r18
    217c:	33 1f       	adc	r19, r19
    217e:	00 0f       	add	r16, r16
    2180:	11 1f       	adc	r17, r17
    2182:	22 1f       	adc	r18, r18
    2184:	33 1f       	adc	r19, r19
    2186:	a9 01       	movw	r20, r18
    2188:	98 01       	movw	r18, r16
    218a:	22 0f       	add	r18, r18
    218c:	33 1f       	adc	r19, r19
    218e:	44 1f       	adc	r20, r20
    2190:	55 1f       	adc	r21, r21
    2192:	22 0f       	add	r18, r18
    2194:	33 1f       	adc	r19, r19
    2196:	44 1f       	adc	r20, r20
    2198:	55 1f       	adc	r21, r21
    219a:	0e 94 cf 1a 	call	0x359e	; 0x359e <__udivmodsi4>
    219e:	ba 01       	movw	r22, r20
    21a0:	a9 01       	movw	r20, r18
    21a2:	41 50       	subi	r20, 0x01	; 1
    21a4:	51 09       	sbc	r21, r1
    21a6:	61 09       	sbc	r22, r1
    21a8:	71 09       	sbc	r23, r1
    21aa:	57 ff       	sbrs	r21, 7
    21ac:	06 c0       	rjmp	.+12     	; 0x21ba <UART3_init+0x88>
    21ae:	82 e0       	ldi	r24, 0x02	; 2
    21b0:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <__TEXT_REGION_LENGTH__+0x700130>
    21b4:	5f 77       	andi	r21, 0x7F	; 127
    21b6:	66 27       	eor	r22, r22
    21b8:	77 27       	eor	r23, r23
    21ba:	bb 27       	eor	r27, r27
    21bc:	a7 2f       	mov	r26, r23
    21be:	96 2f       	mov	r25, r22
    21c0:	85 2f       	mov	r24, r21
    21c2:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <__TEXT_REGION_LENGTH__+0x700135>
    21c6:	40 93 34 01 	sts	0x0134, r20	; 0x800134 <__TEXT_REGION_LENGTH__+0x700134>
    21ca:	88 e9       	ldi	r24, 0x98	; 152
    21cc:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <__TEXT_REGION_LENGTH__+0x700131>
    21d0:	86 e0       	ldi	r24, 0x06	; 6
    21d2:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <__TEXT_REGION_LENGTH__+0x700132>
    21d6:	1f 91       	pop	r17
    21d8:	0f 91       	pop	r16
    21da:	08 95       	ret

000021dc <UART3_getc>:
    21dc:	90 91 9e 05 	lds	r25, 0x059E	; 0x80059e <UART3_RxHead>
    21e0:	80 91 9d 05 	lds	r24, 0x059D	; 0x80059d <UART3_RxTail>
    21e4:	98 17       	cp	r25, r24
    21e6:	a1 f0       	breq	.+40     	; 0x2210 <__stack+0x11>
    21e8:	80 91 9d 05 	lds	r24, 0x059D	; 0x80059d <UART3_RxTail>
    21ec:	90 e0       	ldi	r25, 0x00	; 0
    21ee:	01 96       	adiw	r24, 0x01	; 1
    21f0:	8f 77       	andi	r24, 0x7F	; 127
    21f2:	99 27       	eor	r25, r25
    21f4:	80 93 9d 05 	sts	0x059D, r24	; 0x80059d <UART3_RxTail>
    21f8:	fc 01       	movw	r30, r24
    21fa:	ef 55       	subi	r30, 0x5F	; 95
    21fc:	fa 4f       	sbci	r31, 0xFA	; 250
    21fe:	20 81       	ld	r18, Z
    2200:	80 91 9c 05 	lds	r24, 0x059C	; 0x80059c <UART3_LastRxError>
    2204:	90 e0       	ldi	r25, 0x00	; 0
    2206:	98 2f       	mov	r25, r24
    2208:	88 27       	eor	r24, r24
    220a:	82 0f       	add	r24, r18
    220c:	91 1d       	adc	r25, r1
    220e:	08 95       	ret
    2210:	80 e0       	ldi	r24, 0x00	; 0
    2212:	91 e0       	ldi	r25, 0x01	; 1
    2214:	08 95       	ret

00002216 <UART3_putc>:
    2216:	40 91 a0 05 	lds	r20, 0x05A0	; 0x8005a0 <UART3_TxHead>
    221a:	50 e0       	ldi	r21, 0x00	; 0
    221c:	4f 5f       	subi	r20, 0xFF	; 255
    221e:	5f 4f       	sbci	r21, 0xFF	; 255
    2220:	4f 77       	andi	r20, 0x7F	; 127
    2222:	55 27       	eor	r21, r21
    2224:	20 91 9f 05 	lds	r18, 0x059F	; 0x80059f <UART3_TxTail>
    2228:	30 e0       	ldi	r19, 0x00	; 0
    222a:	42 17       	cp	r20, r18
    222c:	53 07       	cpc	r21, r19
    222e:	d1 f3       	breq	.-12     	; 0x2224 <UART3_putc+0xe>
    2230:	fa 01       	movw	r30, r20
    2232:	ef 5d       	subi	r30, 0xDF	; 223
    2234:	f9 4f       	sbci	r31, 0xF9	; 249
    2236:	80 83       	st	Z, r24
    2238:	40 93 a0 05 	sts	0x05A0, r20	; 0x8005a0 <UART3_TxHead>
    223c:	e1 e3       	ldi	r30, 0x31	; 49
    223e:	f1 e0       	ldi	r31, 0x01	; 1
    2240:	80 81       	ld	r24, Z
    2242:	80 62       	ori	r24, 0x20	; 32
    2244:	80 83       	st	Z, r24
    2246:	08 95       	ret

00002248 <UART3_available>:
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2248:	f8 94       	cli
uint16_t UART3_available(void)
{
	uint16_t ret;
	
	ATOMIC_BLOCK(ATOMIC_FORCEON) {
		ret = (UART_RX3_BUFFER_SIZE + UART3_RxHead - UART3_RxTail) & UART_RX3_BUFFER_MASK;
    224a:	80 91 9e 05 	lds	r24, 0x059E	; 0x80059e <UART3_RxHead>
    224e:	20 91 9d 05 	lds	r18, 0x059D	; 0x80059d <UART3_RxTail>
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
    2252:	78 94       	sei
	}
	return ret;
    2254:	90 e0       	ldi	r25, 0x00	; 0
    2256:	80 58       	subi	r24, 0x80	; 128
    2258:	9f 4f       	sbci	r25, 0xFF	; 255
    225a:	82 1b       	sub	r24, r18
    225c:	91 09       	sbc	r25, r1
} /* UART3_available */
    225e:	8f 77       	andi	r24, 0x7F	; 127
    2260:	99 27       	eor	r25, r25
    2262:	08 95       	ret

00002264 <UART3_flush>:
void UART3_flush(void)
{
//	ATOMIC_BLOCK(ATOMIC_FORCEON) {
//		UART3_RxHead = UART3_RxTail;
//	} commented by mohab
	while(0 == UART3_Transmission_end);
    2264:	80 91 98 05 	lds	r24, 0x0598	; 0x800598 <UART3_Transmission_end>
    2268:	88 23       	and	r24, r24
    226a:	e1 f3       	breq	.-8      	; 0x2264 <UART3_flush>
} /* UART3_flush */
    226c:	08 95       	ret

0000226e <RTE_drum_init>:


/*static uint16_t Conveyor_speed;*/
static uint16_t Drum_speed = 0;

void RTE_drum_init(void){
    226e:	08 95       	ret

00002270 <RTE_invertersetting_init>:

static SemaphoreHandle_t Sema_Time_second_handle;
static StaticSemaphore_t Sema_Time_second_Buffer;
static uint16_t Time_second;

void RTE_invertersetting_init(void){
    2270:	0f 93       	push	r16
	Sema_Gear_ratio_handle = xSemaphoreCreateBinaryStatic(&Sema_Gear_ratio_Buffer);
    2272:	03 e0       	ldi	r16, 0x03	; 3
    2274:	25 e5       	ldi	r18, 0x55	; 85
    2276:	3a e0       	ldi	r19, 0x0A	; 10
    2278:	40 e0       	ldi	r20, 0x00	; 0
    227a:	50 e0       	ldi	r21, 0x00	; 0
    227c:	60 e0       	ldi	r22, 0x00	; 0
    227e:	81 e0       	ldi	r24, 0x01	; 1
    2280:	1e d3       	rcall	.+1596   	; 0x28be <xQueueGenericCreateStatic>
    2282:	90 93 75 0a 	sts	0x0A75, r25	; 0x800a75 <Sema_Gear_ratio_handle+0x1>
    2286:	80 93 74 0a 	sts	0x0A74, r24	; 0x800a74 <Sema_Gear_ratio_handle>
	Sema_RPM_max_handle = xSemaphoreCreateBinaryStatic(&Sema_RPM_max_Buffer);
    228a:	24 e3       	ldi	r18, 0x34	; 52
    228c:	3a e0       	ldi	r19, 0x0A	; 10
    228e:	40 e0       	ldi	r20, 0x00	; 0
    2290:	50 e0       	ldi	r21, 0x00	; 0
    2292:	60 e0       	ldi	r22, 0x00	; 0
    2294:	81 e0       	ldi	r24, 0x01	; 1
    2296:	13 d3       	rcall	.+1574   	; 0x28be <xQueueGenericCreateStatic>
    2298:	90 93 54 0a 	sts	0x0A54, r25	; 0x800a54 <Sema_RPM_max_handle+0x1>
    229c:	80 93 53 0a 	sts	0x0A53, r24	; 0x800a53 <Sema_RPM_max_handle>
	Sema_Conveyor_length_handle =  xSemaphoreCreateBinaryStatic(&Sema_Conveyor_length_Buffer);
    22a0:	23 e1       	ldi	r18, 0x13	; 19
    22a2:	3a e0       	ldi	r19, 0x0A	; 10
    22a4:	40 e0       	ldi	r20, 0x00	; 0
    22a6:	50 e0       	ldi	r21, 0x00	; 0
    22a8:	60 e0       	ldi	r22, 0x00	; 0
    22aa:	81 e0       	ldi	r24, 0x01	; 1
    22ac:	08 d3       	rcall	.+1552   	; 0x28be <xQueueGenericCreateStatic>
    22ae:	90 93 33 0a 	sts	0x0A33, r25	; 0x800a33 <Sema_Conveyor_length_handle+0x1>
    22b2:	80 93 32 0a 	sts	0x0A32, r24	; 0x800a32 <Sema_Conveyor_length_handle>
	Sema_Driver_diameter_handle =  xSemaphoreCreateBinaryStatic(&Sema_Driver_diameter_Buffer);
    22b6:	22 ef       	ldi	r18, 0xF2	; 242
    22b8:	39 e0       	ldi	r19, 0x09	; 9
    22ba:	40 e0       	ldi	r20, 0x00	; 0
    22bc:	50 e0       	ldi	r21, 0x00	; 0
    22be:	60 e0       	ldi	r22, 0x00	; 0
    22c0:	81 e0       	ldi	r24, 0x01	; 1
    22c2:	fd d2       	rcall	.+1530   	; 0x28be <xQueueGenericCreateStatic>
    22c4:	90 93 12 0a 	sts	0x0A12, r25	; 0x800a12 <Sema_Driver_diameter_handle+0x1>
    22c8:	80 93 11 0a 	sts	0x0A11, r24	; 0x800a11 <Sema_Driver_diameter_handle>
	Sema_Time_minute_handle =  xSemaphoreCreateBinaryStatic(&Sema_Time_minute_Buffer);
    22cc:	21 ed       	ldi	r18, 0xD1	; 209
    22ce:	39 e0       	ldi	r19, 0x09	; 9
    22d0:	40 e0       	ldi	r20, 0x00	; 0
    22d2:	50 e0       	ldi	r21, 0x00	; 0
    22d4:	60 e0       	ldi	r22, 0x00	; 0
    22d6:	81 e0       	ldi	r24, 0x01	; 1
    22d8:	f2 d2       	rcall	.+1508   	; 0x28be <xQueueGenericCreateStatic>
    22da:	90 93 f1 09 	sts	0x09F1, r25	; 0x8009f1 <Sema_Time_minute_handle+0x1>
    22de:	80 93 f0 09 	sts	0x09F0, r24	; 0x8009f0 <Sema_Time_minute_handle>
	Sema_Time_second_handle =  xSemaphoreCreateBinaryStatic(&Sema_Time_second_Buffer);
    22e2:	20 eb       	ldi	r18, 0xB0	; 176
    22e4:	39 e0       	ldi	r19, 0x09	; 9
    22e6:	40 e0       	ldi	r20, 0x00	; 0
    22e8:	50 e0       	ldi	r21, 0x00	; 0
    22ea:	60 e0       	ldi	r22, 0x00	; 0
    22ec:	81 e0       	ldi	r24, 0x01	; 1
    22ee:	e7 d2       	rcall	.+1486   	; 0x28be <xQueueGenericCreateStatic>
    22f0:	90 93 d0 09 	sts	0x09D0, r25	; 0x8009d0 <Sema_Time_second_handle+0x1>
    22f4:	80 93 cf 09 	sts	0x09CF, r24	; 0x8009cf <Sema_Time_second_handle>
}
    22f8:	0f 91       	pop	r16
    22fa:	08 95       	ret

000022fc <RTE_levels_init>:

static SemaphoreHandle_t Sema_blancher_level_handle;
static StaticSemaphore_t Sema_blancher_level_Buffer;
static uint16_t blancher_level;

void RTE_levels_init(void){
    22fc:	0f 93       	push	r16
	Sema_tank_level_handle = xSemaphoreCreateBinaryStatic(&Sema_tank_level_Buffer);
    22fe:	03 e0       	ldi	r16, 0x03	; 3
    2300:	27 e9       	ldi	r18, 0x97	; 151
    2302:	3a e0       	ldi	r19, 0x0A	; 10
    2304:	40 e0       	ldi	r20, 0x00	; 0
    2306:	50 e0       	ldi	r21, 0x00	; 0
    2308:	60 e0       	ldi	r22, 0x00	; 0
    230a:	81 e0       	ldi	r24, 0x01	; 1
    230c:	d8 d2       	rcall	.+1456   	; 0x28be <xQueueGenericCreateStatic>
    230e:	90 93 b7 0a 	sts	0x0AB7, r25	; 0x800ab7 <Sema_tank_level_handle+0x1>
    2312:	80 93 b6 0a 	sts	0x0AB6, r24	; 0x800ab6 <Sema_tank_level_handle>
	Sema_blancher_level_handle = xSemaphoreCreateBinaryStatic(&Sema_blancher_level_Buffer);
    2316:	26 e7       	ldi	r18, 0x76	; 118
    2318:	3a e0       	ldi	r19, 0x0A	; 10
    231a:	40 e0       	ldi	r20, 0x00	; 0
    231c:	50 e0       	ldi	r21, 0x00	; 0
    231e:	60 e0       	ldi	r22, 0x00	; 0
    2320:	81 e0       	ldi	r24, 0x01	; 1
    2322:	cd d2       	rcall	.+1434   	; 0x28be <xQueueGenericCreateStatic>
    2324:	90 93 96 0a 	sts	0x0A96, r25	; 0x800a96 <Sema_blancher_level_handle+0x1>
    2328:	80 93 95 0a 	sts	0x0A95, r24	; 0x800a95 <Sema_blancher_level_handle>
}
    232c:	0f 91       	pop	r16
    232e:	08 95       	ret

00002330 <RTE_init>:
#include "RTE_levels.h"
#include "RTE_temperature.h"
#include "RTE_main.h"

void RTE_init(void){
	RTE_drum_init();
    2330:	9e df       	rcall	.-196    	; 0x226e <RTE_drum_init>
	RTE_invertersetting_init();
    2332:	9e df       	rcall	.-196    	; 0x2270 <RTE_invertersetting_init>
	RTE_operations_init();
    2334:	03 d0       	rcall	.+6      	; 0x233c <RTE_operations_init>
	RTE_levels_init();
    2336:	e2 df       	rcall	.-60     	; 0x22fc <RTE_levels_init>
    2338:	31 c0       	rjmp	.+98     	; 0x239c <RTE_temperature_init>
	RTE_temperature_init();
    233a:	08 95       	ret

0000233c <RTE_operations_init>:
    233c:	0f 93       	push	r16
    233e:	03 e0       	ldi	r16, 0x03	; 3
static SemaphoreHandle_t Sema_Tank_Calibration_Operation_handle;
static StaticSemaphore_t Sema_Tank_Calibration_Operation_Buffer;
static uint16_t Tank_Calibration_Operation;

void RTE_operations_init(void){
	Sema_System_on_handle = xSemaphoreCreateBinaryStatic(&Sema_System_on_Buffer);
    2340:	2b e1       	ldi	r18, 0x1B	; 27
    2342:	3b e0       	ldi	r19, 0x0B	; 11
    2344:	40 e0       	ldi	r20, 0x00	; 0
    2346:	50 e0       	ldi	r21, 0x00	; 0
    2348:	60 e0       	ldi	r22, 0x00	; 0
    234a:	81 e0       	ldi	r24, 0x01	; 1
    234c:	b8 d2       	rcall	.+1392   	; 0x28be <xQueueGenericCreateStatic>
    234e:	90 93 3b 0b 	sts	0x0B3B, r25	; 0x800b3b <Sema_System_on_handle+0x1>
    2352:	80 93 3a 0b 	sts	0x0B3A, r24	; 0x800b3a <Sema_System_on_handle>
	Sema_Start_blancher_Operation_handle = xSemaphoreCreateBinaryStatic(&Sema_Start_blancher_Operation_Buffer);
    2356:	2a ef       	ldi	r18, 0xFA	; 250
    2358:	3a e0       	ldi	r19, 0x0A	; 10
    235a:	40 e0       	ldi	r20, 0x00	; 0
    235c:	50 e0       	ldi	r21, 0x00	; 0
    235e:	60 e0       	ldi	r22, 0x00	; 0
    2360:	81 e0       	ldi	r24, 0x01	; 1
    2362:	ad d2       	rcall	.+1370   	; 0x28be <xQueueGenericCreateStatic>
    2364:	90 93 1a 0b 	sts	0x0B1A, r25	; 0x800b1a <Sema_Start_blancher_Operation_handle+0x1>
    2368:	80 93 19 0b 	sts	0x0B19, r24	; 0x800b19 <Sema_Start_blancher_Operation_handle>
	Sema_Wash_Operation_handle = xSemaphoreCreateBinaryStatic(&Sema_Wash_Operation_Buffer);
    236c:	29 ed       	ldi	r18, 0xD9	; 217
    236e:	3a e0       	ldi	r19, 0x0A	; 10
    2370:	40 e0       	ldi	r20, 0x00	; 0
    2372:	50 e0       	ldi	r21, 0x00	; 0
    2374:	60 e0       	ldi	r22, 0x00	; 0
    2376:	81 e0       	ldi	r24, 0x01	; 1
    2378:	a2 d2       	rcall	.+1348   	; 0x28be <xQueueGenericCreateStatic>
    237a:	90 93 f9 0a 	sts	0x0AF9, r25	; 0x800af9 <Sema_Wash_Operation_handle+0x1>
    237e:	80 93 f8 0a 	sts	0x0AF8, r24	; 0x800af8 <Sema_Wash_Operation_handle>
	Sema_Tank_Calibration_Operation_handle = xSemaphoreCreateBinaryStatic(&Sema_Tank_Calibration_Operation_Buffer);
    2382:	28 eb       	ldi	r18, 0xB8	; 184
    2384:	3a e0       	ldi	r19, 0x0A	; 10
    2386:	40 e0       	ldi	r20, 0x00	; 0
    2388:	50 e0       	ldi	r21, 0x00	; 0
    238a:	60 e0       	ldi	r22, 0x00	; 0
    238c:	81 e0       	ldi	r24, 0x01	; 1
    238e:	97 d2       	rcall	.+1326   	; 0x28be <xQueueGenericCreateStatic>
    2390:	90 93 d8 0a 	sts	0x0AD8, r25	; 0x800ad8 <Sema_Tank_Calibration_Operation_handle+0x1>
    2394:	80 93 d7 0a 	sts	0x0AD7, r24	; 0x800ad7 <Sema_Tank_Calibration_Operation_handle>

}
    2398:	0f 91       	pop	r16
    239a:	08 95       	ret

0000239c <RTE_temperature_init>:

static uint16_t Current_temperature;



void RTE_temperature_init(void){
    239c:	0f 93       	push	r16
	Sema_Sleep_temp_handle = xSemaphoreCreateBinaryStatic(&Sema_Sleep_temp_Buffer);
    239e:	03 e0       	ldi	r16, 0x03	; 3
    23a0:	22 e0       	ldi	r18, 0x02	; 2
    23a2:	3c e0       	ldi	r19, 0x0C	; 12
    23a4:	40 e0       	ldi	r20, 0x00	; 0
    23a6:	50 e0       	ldi	r21, 0x00	; 0
    23a8:	60 e0       	ldi	r22, 0x00	; 0
    23aa:	81 e0       	ldi	r24, 0x01	; 1
    23ac:	88 d2       	rcall	.+1296   	; 0x28be <xQueueGenericCreateStatic>
    23ae:	90 93 22 0c 	sts	0x0C22, r25	; 0x800c22 <Sema_Sleep_temp_handle+0x1>
    23b2:	80 93 21 0c 	sts	0x0C21, r24	; 0x800c21 <Sema_Sleep_temp_handle>
	Sema_Set_temp_handle = xSemaphoreCreateBinaryStatic(&Sema_Set_temp_Buffer);
    23b6:	21 ee       	ldi	r18, 0xE1	; 225
    23b8:	3b e0       	ldi	r19, 0x0B	; 11
    23ba:	40 e0       	ldi	r20, 0x00	; 0
    23bc:	50 e0       	ldi	r21, 0x00	; 0
    23be:	60 e0       	ldi	r22, 0x00	; 0
    23c0:	81 e0       	ldi	r24, 0x01	; 1
    23c2:	7d d2       	rcall	.+1274   	; 0x28be <xQueueGenericCreateStatic>
    23c4:	90 93 01 0c 	sts	0x0C01, r25	; 0x800c01 <Sema_Set_temp_handle+0x1>
    23c8:	80 93 00 0c 	sts	0x0C00, r24	; 0x800c00 <Sema_Set_temp_handle>
	Sema_threshold_set_temp_handle = xSemaphoreCreateBinaryStatic(&Sema_threshold_set_temp_Buffer);
    23cc:	20 ec       	ldi	r18, 0xC0	; 192
    23ce:	3b e0       	ldi	r19, 0x0B	; 11
    23d0:	40 e0       	ldi	r20, 0x00	; 0
    23d2:	50 e0       	ldi	r21, 0x00	; 0
    23d4:	60 e0       	ldi	r22, 0x00	; 0
    23d6:	81 e0       	ldi	r24, 0x01	; 1
    23d8:	72 d2       	rcall	.+1252   	; 0x28be <xQueueGenericCreateStatic>
    23da:	90 93 e0 0b 	sts	0x0BE0, r25	; 0x800be0 <Sema_threshold_set_temp_handle+0x1>
    23de:	80 93 df 0b 	sts	0x0BDF, r24	; 0x800bdf <Sema_threshold_set_temp_handle>
	Sema_threshold_sleep_temp_handle = xSemaphoreCreateBinaryStatic(&Sema_threshold_sleep_temp_Buffer);
    23e2:	2f e9       	ldi	r18, 0x9F	; 159
    23e4:	3b e0       	ldi	r19, 0x0B	; 11
    23e6:	40 e0       	ldi	r20, 0x00	; 0
    23e8:	50 e0       	ldi	r21, 0x00	; 0
    23ea:	60 e0       	ldi	r22, 0x00	; 0
    23ec:	81 e0       	ldi	r24, 0x01	; 1
    23ee:	67 d2       	rcall	.+1230   	; 0x28be <xQueueGenericCreateStatic>
    23f0:	90 93 bf 0b 	sts	0x0BBF, r25	; 0x800bbf <Sema_threshold_sleep_temp_handle+0x1>
    23f4:	80 93 be 0b 	sts	0x0BBE, r24	; 0x800bbe <Sema_threshold_sleep_temp_handle>
	Sema_Positive_offset_temp_handle = xSemaphoreCreateBinaryStatic(&Sema_Positive_offset_temp_Buffer);
    23f8:	2e e7       	ldi	r18, 0x7E	; 126
    23fa:	3b e0       	ldi	r19, 0x0B	; 11
    23fc:	40 e0       	ldi	r20, 0x00	; 0
    23fe:	50 e0       	ldi	r21, 0x00	; 0
    2400:	60 e0       	ldi	r22, 0x00	; 0
    2402:	81 e0       	ldi	r24, 0x01	; 1
    2404:	5c d2       	rcall	.+1208   	; 0x28be <xQueueGenericCreateStatic>
    2406:	90 93 9e 0b 	sts	0x0B9E, r25	; 0x800b9e <Sema_Positive_offset_temp_handle+0x1>
    240a:	80 93 9d 0b 	sts	0x0B9D, r24	; 0x800b9d <Sema_Positive_offset_temp_handle>
	Sema_Negative_offset_temp_handle = xSemaphoreCreateBinaryStatic(&Sema_Negative_offset_temp_Buffer);
    240e:	2d e5       	ldi	r18, 0x5D	; 93
    2410:	3b e0       	ldi	r19, 0x0B	; 11
    2412:	40 e0       	ldi	r20, 0x00	; 0
    2414:	50 e0       	ldi	r21, 0x00	; 0
    2416:	60 e0       	ldi	r22, 0x00	; 0
    2418:	81 e0       	ldi	r24, 0x01	; 1
    241a:	51 d2       	rcall	.+1186   	; 0x28be <xQueueGenericCreateStatic>
    241c:	90 93 7d 0b 	sts	0x0B7D, r25	; 0x800b7d <Sema_Negative_offset_temp_handle+0x1>
    2420:	80 93 7c 0b 	sts	0x0B7C, r24	; 0x800b7c <Sema_Negative_offset_temp_handle>
	Sema_APP_current_temp_handle = xSemaphoreCreateBinaryStatic(&Sema_APP_current_temp_Buffer);
    2424:	2c e3       	ldi	r18, 0x3C	; 60
    2426:	3b e0       	ldi	r19, 0x0B	; 11
    2428:	40 e0       	ldi	r20, 0x00	; 0
    242a:	50 e0       	ldi	r21, 0x00	; 0
    242c:	60 e0       	ldi	r22, 0x00	; 0
    242e:	81 e0       	ldi	r24, 0x01	; 1
    2430:	46 d2       	rcall	.+1164   	; 0x28be <xQueueGenericCreateStatic>
    2432:	90 93 5c 0b 	sts	0x0B5C, r25	; 0x800b5c <Sema_APP_current_temp_handle+0x1>
    2436:	80 93 5b 0b 	sts	0x0B5B, r24	; 0x800b5b <Sema_APP_current_temp_handle>

}
    243a:	0f 91       	pop	r16
    243c:	08 95       	ret

0000243e <vApplicationStackOverflowHook>:
	   This routine will never return.
	   This routine is referenced in the task.c file of FreeRTOS as an extern.
	\*---------------------------------------------------------------------------*/

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
	DDRB  |= _BV(DDB7);
    243e:	27 9a       	sbi	0x04, 7	; 4
	PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    2440:	2f 9a       	sbi	0x05, 7	; 5
    2442:	2f ef       	ldi	r18, 0xFF	; 255
    2444:	87 ea       	ldi	r24, 0xA7	; 167
    2446:	91 e6       	ldi	r25, 0x61	; 97
    2448:	21 50       	subi	r18, 0x01	; 1
    244a:	80 40       	sbci	r24, 0x00	; 0
    244c:	90 40       	sbci	r25, 0x00	; 0
    244e:	e1 f7       	brne	.-8      	; 0x2448 <vApplicationStackOverflowHook+0xa>
    2450:	00 c0       	rjmp	.+0      	; 0x2452 <vApplicationStackOverflowHook+0x14>
    2452:	00 00       	nop
	for(;;)
	{
		_delay_ms(2000);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
		PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED slow blink.
    2454:	1f 9a       	sbi	0x03, 7	; 3
    2456:	f5 cf       	rjmp	.-22     	; 0x2442 <vApplicationStackOverflowHook+0x4>

00002458 <vListInitialise>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
    2458:	fc 01       	movw	r30, r24
    245a:	03 96       	adiw	r24, 0x03	; 3
    245c:	92 83       	std	Z+2, r25	; 0x02
    245e:	81 83       	std	Z+1, r24	; 0x01
    2460:	2f ef       	ldi	r18, 0xFF	; 255
    2462:	3f ef       	ldi	r19, 0xFF	; 255
    2464:	34 83       	std	Z+4, r19	; 0x04
    2466:	23 83       	std	Z+3, r18	; 0x03
    2468:	96 83       	std	Z+6, r25	; 0x06
    246a:	85 83       	std	Z+5, r24	; 0x05
    246c:	90 87       	std	Z+8, r25	; 0x08
    246e:	87 83       	std	Z+7, r24	; 0x07
    2470:	10 82       	st	Z, r1
    2472:	08 95       	ret

00002474 <vListInsertEnd>:
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    2474:	cf 93       	push	r28
    2476:	df 93       	push	r29
    2478:	9c 01       	movw	r18, r24
    247a:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
    247c:	dc 01       	movw	r26, r24
    247e:	11 96       	adiw	r26, 0x01	; 1
    2480:	cd 91       	ld	r28, X+
    2482:	dc 91       	ld	r29, X
    2484:	12 97       	sbiw	r26, 0x02	; 2
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
    makes the new list item the last item to be removed by a call to
    listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
    2486:	d3 83       	std	Z+3, r29	; 0x03
    2488:	c2 83       	std	Z+2, r28	; 0x02
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    248a:	8c 81       	ldd	r24, Y+4	; 0x04
    248c:	9d 81       	ldd	r25, Y+5	; 0x05
    248e:	95 83       	std	Z+5, r25	; 0x05
    2490:	84 83       	std	Z+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
    2492:	8c 81       	ldd	r24, Y+4	; 0x04
    2494:	9d 81       	ldd	r25, Y+5	; 0x05
    2496:	dc 01       	movw	r26, r24
    2498:	13 96       	adiw	r26, 0x03	; 3
    249a:	7c 93       	st	X, r23
    249c:	6e 93       	st	-X, r22
    249e:	12 97       	sbiw	r26, 0x02	; 2
    pxIndex->pxPrevious = pxNewListItem;
    24a0:	7d 83       	std	Y+5, r23	; 0x05
    24a2:	6c 83       	std	Y+4, r22	; 0x04

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
    24a4:	31 87       	std	Z+9, r19	; 0x09
    24a6:	20 87       	std	Z+8, r18	; 0x08

    ( pxList->uxNumberOfItems )++;
    24a8:	f9 01       	movw	r30, r18
    24aa:	80 81       	ld	r24, Z
    24ac:	8f 5f       	subi	r24, 0xFF	; 255
    24ae:	80 83       	st	Z, r24
}
    24b0:	df 91       	pop	r29
    24b2:	cf 91       	pop	r28
    24b4:	08 95       	ret

000024b6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    24b6:	cf 93       	push	r28
    24b8:	df 93       	push	r29
    24ba:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    24bc:	48 81       	ld	r20, Y
    24be:	59 81       	ldd	r21, Y+1	; 0x01
    new list item should be placed after it.  This ensures that TCBs which are
    stored in ready lists (all of which have the same xItemValue value) get a
    share of the CPU.  However, if the xItemValue is the same as the back marker
    the iteration loop below will not end.  Therefore the value is checked
    first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
    24c0:	4f 3f       	cpi	r20, 0xFF	; 255
    24c2:	2f ef       	ldi	r18, 0xFF	; 255
    24c4:	52 07       	cpc	r21, r18
    24c6:	21 f4       	brne	.+8      	; 0x24d0 <vListInsert+0x1a>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
    24c8:	fc 01       	movw	r30, r24
    24ca:	a7 81       	ldd	r26, Z+7	; 0x07
    24cc:	b0 85       	ldd	r27, Z+8	; 0x08
    24ce:	0d c0       	rjmp	.+26     	; 0x24ea <vListInsert+0x34>
            4) Using a queue or semaphore before it has been initialised or
               before the scheduler has been started (are interrupts firing
               before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
    24d0:	dc 01       	movw	r26, r24
    24d2:	13 96       	adiw	r26, 0x03	; 3
    24d4:	01 c0       	rjmp	.+2      	; 0x24d8 <vListInsert+0x22>
    24d6:	df 01       	movw	r26, r30
    24d8:	12 96       	adiw	r26, 0x02	; 2
    24da:	ed 91       	ld	r30, X+
    24dc:	fc 91       	ld	r31, X
    24de:	13 97       	sbiw	r26, 0x03	; 3
    24e0:	20 81       	ld	r18, Z
    24e2:	31 81       	ldd	r19, Z+1	; 0x01
    24e4:	42 17       	cp	r20, r18
    24e6:	53 07       	cpc	r21, r19
    24e8:	b0 f7       	brcc	.-20     	; 0x24d6 <vListInsert+0x20>
            /* There is nothing to do here, just iterating to the wanted
            insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
    24ea:	12 96       	adiw	r26, 0x02	; 2
    24ec:	ed 91       	ld	r30, X+
    24ee:	fc 91       	ld	r31, X
    24f0:	13 97       	sbiw	r26, 0x03	; 3
    24f2:	fb 83       	std	Y+3, r31	; 0x03
    24f4:	ea 83       	std	Y+2, r30	; 0x02
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    24f6:	d5 83       	std	Z+5, r29	; 0x05
    24f8:	c4 83       	std	Z+4, r28	; 0x04
    pxNewListItem->pxPrevious = pxIterator;
    24fa:	bd 83       	std	Y+5, r27	; 0x05
    24fc:	ac 83       	std	Y+4, r26	; 0x04
    pxIterator->pxNext = pxNewListItem;
    24fe:	13 96       	adiw	r26, 0x03	; 3
    2500:	dc 93       	st	X, r29
    2502:	ce 93       	st	-X, r28
    2504:	12 97       	sbiw	r26, 0x02	; 2

    /* Remember which list the item is in.  This allows fast removal of the
    item later. */
    pxNewListItem->pxContainer = pxList;
    2506:	99 87       	std	Y+9, r25	; 0x09
    2508:	88 87       	std	Y+8, r24	; 0x08

    ( pxList->uxNumberOfItems )++;
    250a:	fc 01       	movw	r30, r24
    250c:	20 81       	ld	r18, Z
    250e:	2f 5f       	subi	r18, 0xFF	; 255
    2510:	20 83       	st	Z, r18
}
    2512:	df 91       	pop	r29
    2514:	cf 91       	pop	r28
    2516:	08 95       	ret

00002518 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    2518:	cf 93       	push	r28
    251a:	df 93       	push	r29
    251c:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
    251e:	a0 85       	ldd	r26, Z+8	; 0x08
    2520:	b1 85       	ldd	r27, Z+9	; 0x09

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    2522:	c2 81       	ldd	r28, Z+2	; 0x02
    2524:	d3 81       	ldd	r29, Z+3	; 0x03
    2526:	84 81       	ldd	r24, Z+4	; 0x04
    2528:	95 81       	ldd	r25, Z+5	; 0x05
    252a:	9d 83       	std	Y+5, r25	; 0x05
    252c:	8c 83       	std	Y+4, r24	; 0x04
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    252e:	c4 81       	ldd	r28, Z+4	; 0x04
    2530:	d5 81       	ldd	r29, Z+5	; 0x05
    2532:	82 81       	ldd	r24, Z+2	; 0x02
    2534:	93 81       	ldd	r25, Z+3	; 0x03
    2536:	9b 83       	std	Y+3, r25	; 0x03
    2538:	8a 83       	std	Y+2, r24	; 0x02

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
    253a:	11 96       	adiw	r26, 0x01	; 1
    253c:	8d 91       	ld	r24, X+
    253e:	9c 91       	ld	r25, X
    2540:	12 97       	sbiw	r26, 0x02	; 2
    2542:	e8 17       	cp	r30, r24
    2544:	f9 07       	cpc	r31, r25
    2546:	31 f4       	brne	.+12     	; 0x2554 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
    2548:	84 81       	ldd	r24, Z+4	; 0x04
    254a:	95 81       	ldd	r25, Z+5	; 0x05
    254c:	12 96       	adiw	r26, 0x02	; 2
    254e:	9c 93       	st	X, r25
    2550:	8e 93       	st	-X, r24
    2552:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
    2554:	11 86       	std	Z+9, r1	; 0x09
    2556:	10 86       	std	Z+8, r1	; 0x08
    ( pxList->uxNumberOfItems )--;
    2558:	8c 91       	ld	r24, X
    255a:	81 50       	subi	r24, 0x01	; 1
    255c:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
    255e:	8c 91       	ld	r24, X
}
    2560:	df 91       	pop	r29
    2562:	cf 91       	pop	r28
    2564:	08 95       	ret

00002566 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    2566:	0f 92       	push	r0
    2568:	0f b6       	in	r0, 0x3f	; 63
    256a:	f8 94       	cli
    256c:	0f 92       	push	r0
    256e:	0b b6       	in	r0, 0x3b	; 59
    2570:	0f 92       	push	r0
    2572:	0c b6       	in	r0, 0x3c	; 60
    2574:	0f 92       	push	r0
    2576:	1f 92       	push	r1
    2578:	11 24       	eor	r1, r1
    257a:	2f 92       	push	r2
    257c:	3f 92       	push	r3
    257e:	4f 92       	push	r4
    2580:	5f 92       	push	r5
    2582:	6f 92       	push	r6
    2584:	7f 92       	push	r7
    2586:	8f 92       	push	r8
    2588:	9f 92       	push	r9
    258a:	af 92       	push	r10
    258c:	bf 92       	push	r11
    258e:	cf 92       	push	r12
    2590:	df 92       	push	r13
    2592:	ef 92       	push	r14
    2594:	ff 92       	push	r15
    2596:	0f 93       	push	r16
    2598:	1f 93       	push	r17
    259a:	2f 93       	push	r18
    259c:	3f 93       	push	r19
    259e:	4f 93       	push	r20
    25a0:	5f 93       	push	r21
    25a2:	6f 93       	push	r22
    25a4:	7f 93       	push	r23
    25a6:	8f 93       	push	r24
    25a8:	9f 93       	push	r25
    25aa:	af 93       	push	r26
    25ac:	bf 93       	push	r27
    25ae:	cf 93       	push	r28
    25b0:	df 93       	push	r29
    25b2:	ef 93       	push	r30
    25b4:	ff 93       	push	r31
    25b6:	a0 91 5e 0c 	lds	r26, 0x0C5E	; 0x800c5e <pxCurrentTCB>
    25ba:	b0 91 5f 0c 	lds	r27, 0x0C5F	; 0x800c5f <pxCurrentTCB+0x1>
    25be:	0d b6       	in	r0, 0x3d	; 61
    25c0:	0d 92       	st	X+, r0
    25c2:	0e b6       	in	r0, 0x3e	; 62
    25c4:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    25c6:	b8 d3       	rcall	.+1904   	; 0x2d38 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    25c8:	a0 91 5e 0c 	lds	r26, 0x0C5E	; 0x800c5e <pxCurrentTCB>
    25cc:	b0 91 5f 0c 	lds	r27, 0x0C5F	; 0x800c5f <pxCurrentTCB+0x1>
    25d0:	cd 91       	ld	r28, X+
    25d2:	cd bf       	out	0x3d, r28	; 61
    25d4:	dd 91       	ld	r29, X+
    25d6:	de bf       	out	0x3e, r29	; 62
    25d8:	ff 91       	pop	r31
    25da:	ef 91       	pop	r30
    25dc:	df 91       	pop	r29
    25de:	cf 91       	pop	r28
    25e0:	bf 91       	pop	r27
    25e2:	af 91       	pop	r26
    25e4:	9f 91       	pop	r25
    25e6:	8f 91       	pop	r24
    25e8:	7f 91       	pop	r23
    25ea:	6f 91       	pop	r22
    25ec:	5f 91       	pop	r21
    25ee:	4f 91       	pop	r20
    25f0:	3f 91       	pop	r19
    25f2:	2f 91       	pop	r18
    25f4:	1f 91       	pop	r17
    25f6:	0f 91       	pop	r16
    25f8:	ff 90       	pop	r15
    25fa:	ef 90       	pop	r14
    25fc:	df 90       	pop	r13
    25fe:	cf 90       	pop	r12
    2600:	bf 90       	pop	r11
    2602:	af 90       	pop	r10
    2604:	9f 90       	pop	r9
    2606:	8f 90       	pop	r8
    2608:	7f 90       	pop	r7
    260a:	6f 90       	pop	r6
    260c:	5f 90       	pop	r5
    260e:	4f 90       	pop	r4
    2610:	3f 90       	pop	r3
    2612:	2f 90       	pop	r2
    2614:	1f 90       	pop	r1
    2616:	0f 90       	pop	r0
    2618:	0c be       	out	0x3c, r0	; 60
    261a:	0f 90       	pop	r0
    261c:	0b be       	out	0x3b, r0	; 59
    261e:	0f 90       	pop	r0
    2620:	0f be       	out	0x3f, r0	; 63
    2622:	0f 90       	pop	r0

	__asm__ __volatile__ ( "ret" );
    2624:	08 95       	ret

00002626 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    2626:	0f 92       	push	r0
    2628:	0f b6       	in	r0, 0x3f	; 63
    262a:	f8 94       	cli
    262c:	0f 92       	push	r0
    262e:	0b b6       	in	r0, 0x3b	; 59
    2630:	0f 92       	push	r0
    2632:	0c b6       	in	r0, 0x3c	; 60
    2634:	0f 92       	push	r0
    2636:	1f 92       	push	r1
    2638:	11 24       	eor	r1, r1
    263a:	2f 92       	push	r2
    263c:	3f 92       	push	r3
    263e:	4f 92       	push	r4
    2640:	5f 92       	push	r5
    2642:	6f 92       	push	r6
    2644:	7f 92       	push	r7
    2646:	8f 92       	push	r8
    2648:	9f 92       	push	r9
    264a:	af 92       	push	r10
    264c:	bf 92       	push	r11
    264e:	cf 92       	push	r12
    2650:	df 92       	push	r13
    2652:	ef 92       	push	r14
    2654:	ff 92       	push	r15
    2656:	0f 93       	push	r16
    2658:	1f 93       	push	r17
    265a:	2f 93       	push	r18
    265c:	3f 93       	push	r19
    265e:	4f 93       	push	r20
    2660:	5f 93       	push	r21
    2662:	6f 93       	push	r22
    2664:	7f 93       	push	r23
    2666:	8f 93       	push	r24
    2668:	9f 93       	push	r25
    266a:	af 93       	push	r26
    266c:	bf 93       	push	r27
    266e:	cf 93       	push	r28
    2670:	df 93       	push	r29
    2672:	ef 93       	push	r30
    2674:	ff 93       	push	r31
    2676:	a0 91 5e 0c 	lds	r26, 0x0C5E	; 0x800c5e <pxCurrentTCB>
    267a:	b0 91 5f 0c 	lds	r27, 0x0C5F	; 0x800c5f <pxCurrentTCB+0x1>
    267e:	0d b6       	in	r0, 0x3d	; 61
    2680:	0d 92       	st	X+, r0
    2682:	0e b6       	in	r0, 0x3e	; 62
    2684:	0d 92       	st	X+, r0

	sleep_reset();		//	 reset the sleep_mode() faster than sleep_disable();
    2686:	13 be       	out	0x33, r1	; 51

	if( xTaskIncrementTick() != pdFALSE )
    2688:	27 d2       	rcall	.+1102   	; 0x2ad8 <xTaskIncrementTick>
    268a:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
    268c:	55 d3       	rcall	.+1706   	; 0x2d38 <vTaskSwitchContext>
    268e:	a0 91 5e 0c 	lds	r26, 0x0C5E	; 0x800c5e <pxCurrentTCB>
	}

	portRESTORE_CONTEXT();
    2692:	b0 91 5f 0c 	lds	r27, 0x0C5F	; 0x800c5f <pxCurrentTCB+0x1>
    2696:	cd 91       	ld	r28, X+
    2698:	cd bf       	out	0x3d, r28	; 61
    269a:	dd 91       	ld	r29, X+
    269c:	de bf       	out	0x3e, r29	; 62
    269e:	ff 91       	pop	r31
    26a0:	ef 91       	pop	r30
    26a2:	df 91       	pop	r29
    26a4:	cf 91       	pop	r28
    26a6:	bf 91       	pop	r27
    26a8:	af 91       	pop	r26
    26aa:	9f 91       	pop	r25
    26ac:	8f 91       	pop	r24
    26ae:	7f 91       	pop	r23
    26b0:	6f 91       	pop	r22
    26b2:	5f 91       	pop	r21
    26b4:	4f 91       	pop	r20
    26b6:	3f 91       	pop	r19
    26b8:	2f 91       	pop	r18
    26ba:	1f 91       	pop	r17
    26bc:	0f 91       	pop	r16
    26be:	ff 90       	pop	r15
    26c0:	ef 90       	pop	r14
    26c2:	df 90       	pop	r13
    26c4:	cf 90       	pop	r12
    26c6:	bf 90       	pop	r11
    26c8:	af 90       	pop	r10
    26ca:	9f 90       	pop	r9
    26cc:	8f 90       	pop	r8
    26ce:	7f 90       	pop	r7
    26d0:	6f 90       	pop	r6
    26d2:	5f 90       	pop	r5
    26d4:	4f 90       	pop	r4
    26d6:	3f 90       	pop	r3
    26d8:	2f 90       	pop	r2
    26da:	1f 90       	pop	r1
    26dc:	0f 90       	pop	r0
    26de:	0c be       	out	0x3c, r0	; 60
    26e0:	0f 90       	pop	r0
    26e2:	0b be       	out	0x3b, r0	; 59
    26e4:	0f 90       	pop	r0
    26e6:	0f be       	out	0x3f, r0	; 63
    26e8:	0f 90       	pop	r0
    26ea:	08 95       	ret

000026ec <__vector_12>:

	__asm__ __volatile__ ( "ret" );
    26ec:	9c df       	rcall	.-200    	; 0x2626 <vPortYieldFromTick>
//	ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
	ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
	ISR(portSCHEDULER_ISR)
	{
		vPortYieldFromTick();
		__asm__ __volatile__ ( "reti" );
    26ee:	18 95       	reti

000026f0 <prvCopyDataToQueue>:
        {
            traceCREATE_COUNTING_SEMAPHORE_FAILED();
        }

        return xHandle;
    }
    26f0:	0f 93       	push	r16
    26f2:	1f 93       	push	r17
    26f4:	cf 93       	push	r28
    26f6:	df 93       	push	r29
    26f8:	ec 01       	movw	r28, r24
    26fa:	04 2f       	mov	r16, r20
    26fc:	1a 8d       	ldd	r17, Y+26	; 0x1a
    26fe:	4c 8d       	ldd	r20, Y+28	; 0x1c
    2700:	41 11       	cpse	r20, r1
    2702:	0b c0       	rjmp	.+22     	; 0x271a <prvCopyDataToQueue+0x2a>
    2704:	88 81       	ld	r24, Y
    2706:	99 81       	ldd	r25, Y+1	; 0x01
    2708:	89 2b       	or	r24, r25
    270a:	09 f0       	breq	.+2      	; 0x270e <prvCopyDataToQueue+0x1e>
    270c:	3f c0       	rjmp	.+126    	; 0x278c <prvCopyDataToQueue+0x9c>
    270e:	8c 81       	ldd	r24, Y+4	; 0x04
    2710:	9d 81       	ldd	r25, Y+5	; 0x05
    2712:	20 d4       	rcall	.+2112   	; 0x2f54 <xTaskPriorityDisinherit>
    2714:	1d 82       	std	Y+5, r1	; 0x05
    2716:	1c 82       	std	Y+4, r1	; 0x04
    2718:	40 c0       	rjmp	.+128    	; 0x279a <prvCopyDataToQueue+0xaa>
    271a:	01 11       	cpse	r16, r1
    271c:	16 c0       	rjmp	.+44     	; 0x274a <prvCopyDataToQueue+0x5a>
    271e:	50 e0       	ldi	r21, 0x00	; 0
    2720:	8a 81       	ldd	r24, Y+2	; 0x02
    2722:	9b 81       	ldd	r25, Y+3	; 0x03
    2724:	6d d7       	rcall	.+3802   	; 0x3600 <memcpy>
    2726:	2c 8d       	ldd	r18, Y+28	; 0x1c
    2728:	8a 81       	ldd	r24, Y+2	; 0x02
    272a:	9b 81       	ldd	r25, Y+3	; 0x03
    272c:	82 0f       	add	r24, r18
    272e:	91 1d       	adc	r25, r1
    2730:	9b 83       	std	Y+3, r25	; 0x03
    2732:	8a 83       	std	Y+2, r24	; 0x02
    2734:	2c 81       	ldd	r18, Y+4	; 0x04
    2736:	3d 81       	ldd	r19, Y+5	; 0x05
    2738:	82 17       	cp	r24, r18
    273a:	93 07       	cpc	r25, r19
    273c:	48 f1       	brcs	.+82     	; 0x2790 <prvCopyDataToQueue+0xa0>
    273e:	88 81       	ld	r24, Y
    2740:	99 81       	ldd	r25, Y+1	; 0x01
    2742:	9b 83       	std	Y+3, r25	; 0x03
    2744:	8a 83       	std	Y+2, r24	; 0x02
    2746:	80 e0       	ldi	r24, 0x00	; 0
    2748:	28 c0       	rjmp	.+80     	; 0x279a <prvCopyDataToQueue+0xaa>
    274a:	50 e0       	ldi	r21, 0x00	; 0
    274c:	8e 81       	ldd	r24, Y+6	; 0x06
    274e:	9f 81       	ldd	r25, Y+7	; 0x07
    2750:	57 d7       	rcall	.+3758   	; 0x3600 <memcpy>
    2752:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2754:	90 e0       	ldi	r25, 0x00	; 0
    2756:	91 95       	neg	r25
    2758:	81 95       	neg	r24
    275a:	91 09       	sbc	r25, r1
    275c:	2e 81       	ldd	r18, Y+6	; 0x06
    275e:	3f 81       	ldd	r19, Y+7	; 0x07
    2760:	28 0f       	add	r18, r24
    2762:	39 1f       	adc	r19, r25
    2764:	3f 83       	std	Y+7, r19	; 0x07
    2766:	2e 83       	std	Y+6, r18	; 0x06
    2768:	48 81       	ld	r20, Y
    276a:	59 81       	ldd	r21, Y+1	; 0x01
    276c:	24 17       	cp	r18, r20
    276e:	35 07       	cpc	r19, r21
    2770:	30 f4       	brcc	.+12     	; 0x277e <prvCopyDataToQueue+0x8e>
    2772:	2c 81       	ldd	r18, Y+4	; 0x04
    2774:	3d 81       	ldd	r19, Y+5	; 0x05
    2776:	82 0f       	add	r24, r18
    2778:	93 1f       	adc	r25, r19
    277a:	9f 83       	std	Y+7, r25	; 0x07
    277c:	8e 83       	std	Y+6, r24	; 0x06
    277e:	02 30       	cpi	r16, 0x02	; 2
    2780:	49 f4       	brne	.+18     	; 0x2794 <prvCopyDataToQueue+0xa4>
    2782:	11 23       	and	r17, r17
    2784:	49 f0       	breq	.+18     	; 0x2798 <prvCopyDataToQueue+0xa8>
    2786:	11 50       	subi	r17, 0x01	; 1
    2788:	80 e0       	ldi	r24, 0x00	; 0
    278a:	07 c0       	rjmp	.+14     	; 0x279a <prvCopyDataToQueue+0xaa>
    278c:	80 e0       	ldi	r24, 0x00	; 0
    278e:	05 c0       	rjmp	.+10     	; 0x279a <prvCopyDataToQueue+0xaa>
    2790:	80 e0       	ldi	r24, 0x00	; 0
    2792:	03 c0       	rjmp	.+6      	; 0x279a <prvCopyDataToQueue+0xaa>
    2794:	80 e0       	ldi	r24, 0x00	; 0
    2796:	01 c0       	rjmp	.+2      	; 0x279a <prvCopyDataToQueue+0xaa>
    2798:	80 e0       	ldi	r24, 0x00	; 0
    279a:	1f 5f       	subi	r17, 0xFF	; 255
    279c:	1a 8f       	std	Y+26, r17	; 0x1a
    279e:	df 91       	pop	r29
    27a0:	cf 91       	pop	r28
    27a2:	1f 91       	pop	r17
    27a4:	0f 91       	pop	r16
    27a6:	08 95       	ret

000027a8 <prvUnlockQueue>:
    27a8:	ef 92       	push	r14
    27aa:	ff 92       	push	r15
    27ac:	0f 93       	push	r16
    27ae:	1f 93       	push	r17
    27b0:	cf 93       	push	r28
    27b2:	8c 01       	movw	r16, r24
    27b4:	0f b6       	in	r0, 0x3f	; 63
    27b6:	f8 94       	cli
    27b8:	0f 92       	push	r0
    27ba:	fc 01       	movw	r30, r24
    27bc:	c6 8d       	ldd	r28, Z+30	; 0x1e
    27be:	1c 16       	cp	r1, r28
    27c0:	9c f4       	brge	.+38     	; 0x27e8 <prvUnlockQueue+0x40>
    27c2:	81 89       	ldd	r24, Z+17	; 0x11
    27c4:	81 11       	cpse	r24, r1
    27c6:	06 c0       	rjmp	.+12     	; 0x27d4 <prvUnlockQueue+0x2c>
    27c8:	0f c0       	rjmp	.+30     	; 0x27e8 <prvUnlockQueue+0x40>
    27ca:	f8 01       	movw	r30, r16
    27cc:	81 89       	ldd	r24, Z+17	; 0x11
    27ce:	81 11       	cpse	r24, r1
    27d0:	05 c0       	rjmp	.+10     	; 0x27dc <prvUnlockQueue+0x34>
    27d2:	0a c0       	rjmp	.+20     	; 0x27e8 <prvUnlockQueue+0x40>
    27d4:	78 01       	movw	r14, r16
    27d6:	f1 e1       	ldi	r31, 0x11	; 17
    27d8:	ef 0e       	add	r14, r31
    27da:	f1 1c       	adc	r15, r1
    27dc:	c7 01       	movw	r24, r14
    27de:	3c d3       	rcall	.+1656   	; 0x2e58 <xTaskRemoveFromEventList>
    27e0:	81 11       	cpse	r24, r1
    27e2:	b4 d3       	rcall	.+1896   	; 0x2f4c <vTaskMissedYield>
    27e4:	c1 50       	subi	r28, 0x01	; 1
    27e6:	89 f7       	brne	.-30     	; 0x27ca <prvUnlockQueue+0x22>
    27e8:	8f ef       	ldi	r24, 0xFF	; 255
    27ea:	f8 01       	movw	r30, r16
    27ec:	86 8f       	std	Z+30, r24	; 0x1e
    27ee:	0f 90       	pop	r0
    27f0:	0f be       	out	0x3f, r0	; 63
    27f2:	0f b6       	in	r0, 0x3f	; 63
    27f4:	f8 94       	cli
    27f6:	0f 92       	push	r0
    27f8:	c5 8d       	ldd	r28, Z+29	; 0x1d
    27fa:	1c 16       	cp	r1, r28
    27fc:	9c f4       	brge	.+38     	; 0x2824 <prvUnlockQueue+0x7c>
    27fe:	80 85       	ldd	r24, Z+8	; 0x08
    2800:	81 11       	cpse	r24, r1
    2802:	06 c0       	rjmp	.+12     	; 0x2810 <prvUnlockQueue+0x68>
    2804:	0f c0       	rjmp	.+30     	; 0x2824 <prvUnlockQueue+0x7c>
    2806:	f8 01       	movw	r30, r16
    2808:	80 85       	ldd	r24, Z+8	; 0x08
    280a:	81 11       	cpse	r24, r1
    280c:	05 c0       	rjmp	.+10     	; 0x2818 <prvUnlockQueue+0x70>
    280e:	0a c0       	rjmp	.+20     	; 0x2824 <prvUnlockQueue+0x7c>
    2810:	78 01       	movw	r14, r16
    2812:	f8 e0       	ldi	r31, 0x08	; 8
    2814:	ef 0e       	add	r14, r31
    2816:	f1 1c       	adc	r15, r1
    2818:	c7 01       	movw	r24, r14
    281a:	1e d3       	rcall	.+1596   	; 0x2e58 <xTaskRemoveFromEventList>
    281c:	81 11       	cpse	r24, r1
    281e:	96 d3       	rcall	.+1836   	; 0x2f4c <vTaskMissedYield>
    2820:	c1 50       	subi	r28, 0x01	; 1
    2822:	89 f7       	brne	.-30     	; 0x2806 <prvUnlockQueue+0x5e>
    2824:	8f ef       	ldi	r24, 0xFF	; 255
    2826:	f8 01       	movw	r30, r16
    2828:	85 8f       	std	Z+29, r24	; 0x1d
    282a:	0f 90       	pop	r0
    282c:	0f be       	out	0x3f, r0	; 63
    282e:	cf 91       	pop	r28
    2830:	1f 91       	pop	r17
    2832:	0f 91       	pop	r16
    2834:	ff 90       	pop	r15
    2836:	ef 90       	pop	r14
    2838:	08 95       	ret

0000283a <xQueueGenericReset>:
    283a:	cf 93       	push	r28
    283c:	df 93       	push	r29
    283e:	ec 01       	movw	r28, r24
    2840:	0f b6       	in	r0, 0x3f	; 63
    2842:	f8 94       	cli
    2844:	0f 92       	push	r0
    2846:	e8 81       	ld	r30, Y
    2848:	f9 81       	ldd	r31, Y+1	; 0x01
    284a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    284c:	2c 8d       	ldd	r18, Y+28	; 0x1c
    284e:	90 e0       	ldi	r25, 0x00	; 0
    2850:	30 e0       	ldi	r19, 0x00	; 0
    2852:	82 9f       	mul	r24, r18
    2854:	a0 01       	movw	r20, r0
    2856:	83 9f       	mul	r24, r19
    2858:	50 0d       	add	r21, r0
    285a:	92 9f       	mul	r25, r18
    285c:	50 0d       	add	r21, r0
    285e:	11 24       	eor	r1, r1
    2860:	4e 0f       	add	r20, r30
    2862:	5f 1f       	adc	r21, r31
    2864:	5d 83       	std	Y+5, r21	; 0x05
    2866:	4c 83       	std	Y+4, r20	; 0x04
    2868:	1a 8e       	std	Y+26, r1	; 0x1a
    286a:	fb 83       	std	Y+3, r31	; 0x03
    286c:	ea 83       	std	Y+2, r30	; 0x02
    286e:	01 97       	sbiw	r24, 0x01	; 1
    2870:	82 9f       	mul	r24, r18
    2872:	a0 01       	movw	r20, r0
    2874:	83 9f       	mul	r24, r19
    2876:	50 0d       	add	r21, r0
    2878:	92 9f       	mul	r25, r18
    287a:	50 0d       	add	r21, r0
    287c:	11 24       	eor	r1, r1
    287e:	cf 01       	movw	r24, r30
    2880:	84 0f       	add	r24, r20
    2882:	95 1f       	adc	r25, r21
    2884:	9f 83       	std	Y+7, r25	; 0x07
    2886:	8e 83       	std	Y+6, r24	; 0x06
    2888:	8f ef       	ldi	r24, 0xFF	; 255
    288a:	8d 8f       	std	Y+29, r24	; 0x1d
    288c:	8e 8f       	std	Y+30, r24	; 0x1e
    288e:	61 11       	cpse	r22, r1
    2890:	0a c0       	rjmp	.+20     	; 0x28a6 <xQueueGenericReset+0x6c>
    2892:	88 85       	ldd	r24, Y+8	; 0x08
    2894:	88 23       	and	r24, r24
    2896:	69 f0       	breq	.+26     	; 0x28b2 <xQueueGenericReset+0x78>
    2898:	ce 01       	movw	r24, r28
    289a:	08 96       	adiw	r24, 0x08	; 8
    289c:	dd d2       	rcall	.+1466   	; 0x2e58 <xTaskRemoveFromEventList>
    289e:	88 23       	and	r24, r24
    28a0:	41 f0       	breq	.+16     	; 0x28b2 <xQueueGenericReset+0x78>
    28a2:	61 de       	rcall	.-830    	; 0x2566 <vPortYield>
    28a4:	06 c0       	rjmp	.+12     	; 0x28b2 <xQueueGenericReset+0x78>
    28a6:	ce 01       	movw	r24, r28
    28a8:	08 96       	adiw	r24, 0x08	; 8
    28aa:	d6 dd       	rcall	.-1108   	; 0x2458 <vListInitialise>
    28ac:	ce 01       	movw	r24, r28
    28ae:	41 96       	adiw	r24, 0x11	; 17
    28b0:	d3 dd       	rcall	.-1114   	; 0x2458 <vListInitialise>
    28b2:	0f 90       	pop	r0
    28b4:	0f be       	out	0x3f, r0	; 63
    28b6:	81 e0       	ldi	r24, 0x01	; 1
    28b8:	df 91       	pop	r29
    28ba:	cf 91       	pop	r28
    28bc:	08 95       	ret

000028be <xQueueGenericCreateStatic>:
    28be:	cf 93       	push	r28
    28c0:	df 93       	push	r29
    28c2:	e9 01       	movw	r28, r18
    28c4:	20 97       	sbiw	r28, 0x00	; 0
    28c6:	61 f0       	breq	.+24     	; 0x28e0 <xQueueGenericCreateStatic+0x22>
    28c8:	61 11       	cpse	r22, r1
    28ca:	03 c0       	rjmp	.+6      	; 0x28d2 <xQueueGenericCreateStatic+0x14>
    28cc:	39 83       	std	Y+1, r19	; 0x01
    28ce:	28 83       	st	Y, r18
    28d0:	02 c0       	rjmp	.+4      	; 0x28d6 <xQueueGenericCreateStatic+0x18>
    28d2:	59 83       	std	Y+1, r21	; 0x01
    28d4:	48 83       	st	Y, r20
    28d6:	8b 8f       	std	Y+27, r24	; 0x1b
    28d8:	6c 8f       	std	Y+28, r22	; 0x1c
    28da:	61 e0       	ldi	r22, 0x01	; 1
    28dc:	ce 01       	movw	r24, r28
    28de:	ad df       	rcall	.-166    	; 0x283a <xQueueGenericReset>
    28e0:	ce 01       	movw	r24, r28
    28e2:	df 91       	pop	r29
    28e4:	cf 91       	pop	r28
    28e6:	08 95       	ret

000028e8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
    28e8:	9f 92       	push	r9
    28ea:	af 92       	push	r10
    28ec:	bf 92       	push	r11
    28ee:	cf 92       	push	r12
    28f0:	df 92       	push	r13
    28f2:	ef 92       	push	r14
    28f4:	ff 92       	push	r15
    28f6:	0f 93       	push	r16
    28f8:	1f 93       	push	r17
    28fa:	cf 93       	push	r28
    28fc:	df 93       	push	r29
    28fe:	00 d0       	rcall	.+0      	; 0x2900 <xQueueGenericSend+0x18>
    2900:	1f 92       	push	r1
    2902:	1f 92       	push	r1
    2904:	cd b7       	in	r28, 0x3d	; 61
    2906:	de b7       	in	r29, 0x3e	; 62
    2908:	8c 01       	movw	r16, r24
    290a:	6b 01       	movw	r12, r22
    290c:	5d 83       	std	Y+5, r21	; 0x05
    290e:	4c 83       	std	Y+4, r20	; 0x04
    2910:	a2 2e       	mov	r10, r18
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
    2912:	b1 2c       	mov	r11, r1
                else if( xEntryTimeSet == pdFALSE )
                {
                    /* The queue was full and a block time was specified so
                    configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
                    xEntryTimeSet = pdTRUE;
    2914:	99 24       	eor	r9, r9
    2916:	93 94       	inc	r9
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    2918:	7c 01       	movw	r14, r24
    291a:	88 e0       	ldi	r24, 0x08	; 8
    291c:	e8 0e       	add	r14, r24
    291e:	f1 1c       	adc	r15, r1
    /*lint -save -e904 This function relaxes the coding standard somewhat to
    allow return statements within the function itself.  This is done in the
    interest of execution time efficiency. */
    for( ;; )
    {
        taskENTER_CRITICAL();
    2920:	0f b6       	in	r0, 0x3f	; 63
    2922:	f8 94       	cli
    2924:	0f 92       	push	r0
        {
            /* Is there room on the queue now?  The running task must be the
            highest priority task wanting to access the queue.  If the head item
            in the queue is to be overwritten then it does not matter if the
            queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    2926:	f8 01       	movw	r30, r16
    2928:	92 8d       	ldd	r25, Z+26	; 0x1a
    292a:	83 8d       	ldd	r24, Z+27	; 0x1b
    292c:	98 17       	cp	r25, r24
    292e:	18 f0       	brcs	.+6      	; 0x2936 <xQueueGenericSend+0x4e>
    2930:	f2 e0       	ldi	r31, 0x02	; 2
    2932:	af 12       	cpse	r10, r31
    2934:	15 c0       	rjmp	.+42     	; 0x2960 <xQueueGenericSend+0x78>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    2936:	4a 2d       	mov	r20, r10
    2938:	b6 01       	movw	r22, r12
    293a:	c8 01       	movw	r24, r16
    293c:	d9 de       	rcall	.-590    	; 0x26f0 <prvCopyDataToQueue>

                    /* If there was a task waiting for data to arrive on the
                    queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    293e:	f8 01       	movw	r30, r16
    2940:	91 89       	ldd	r25, Z+17	; 0x11
    2942:	99 23       	and	r25, r25
    2944:	39 f0       	breq	.+14     	; 0x2954 <xQueueGenericSend+0x6c>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    2946:	c8 01       	movw	r24, r16
    2948:	41 96       	adiw	r24, 0x11	; 17
    294a:	86 d2       	rcall	.+1292   	; 0x2e58 <xTaskRemoveFromEventList>
    294c:	88 23       	and	r24, r24
                        {
                            /* The unblocked task has a priority higher than
                            our own so yield immediately.  Yes it is ok to do
                            this from within the critical section - the kernel
                            takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
    294e:	21 f0       	breq	.+8      	; 0x2958 <xQueueGenericSend+0x70>
    2950:	0a de       	rcall	.-1004   	; 0x2566 <vPortYield>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
    2952:	02 c0       	rjmp	.+4      	; 0x2958 <xQueueGenericSend+0x70>
                    {
                        /* This path is a special case that will only get
                        executed if the task was holding multiple mutexes and
                        the mutexes were given back in an order that is
                        different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
    2954:	81 11       	cpse	r24, r1
    2956:	07 de       	rcall	.-1010   	; 0x2566 <vPortYield>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
    2958:	0f 90       	pop	r0
    295a:	0f be       	out	0x3f, r0	; 63
                return pdPASS;
    295c:	81 e0       	ldi	r24, 0x01	; 1
    295e:	45 c0       	rjmp	.+138    	; 0x29ea <xQueueGenericSend+0x102>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
    2960:	8c 81       	ldd	r24, Y+4	; 0x04
    2962:	9d 81       	ldd	r25, Y+5	; 0x05
    2964:	89 2b       	or	r24, r25
    2966:	21 f4       	brne	.+8      	; 0x2970 <xQueueGenericSend+0x88>
                {
                    /* The queue was full and no block time is specified (or
                    the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
    2968:	0f 90       	pop	r0
    296a:	0f be       	out	0x3f, r0	; 63

                    /* Return to the original privilege level before exiting
                    the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
    296c:	80 e0       	ldi	r24, 0x00	; 0
    296e:	3d c0       	rjmp	.+122    	; 0x29ea <xQueueGenericSend+0x102>
                }
                else if( xEntryTimeSet == pdFALSE )
    2970:	b1 10       	cpse	r11, r1
                {
                    /* The queue was full and a block time was specified so
                    configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
    2972:	04 c0       	rjmp	.+8      	; 0x297c <xQueueGenericSend+0x94>
    2974:	ce 01       	movw	r24, r28
    2976:	01 96       	adiw	r24, 0x01	; 1
                    xEntryTimeSet = pdTRUE;
    2978:	b3 d2       	rcall	.+1382   	; 0x2ee0 <vTaskInternalSetTimeOutState>
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
    297a:	b9 2c       	mov	r11, r9
    297c:	0f 90       	pop	r0

        /* Interrupts and other tasks can send to and receive from the queue
        now the critical section has been exited. */

        vTaskSuspendAll();
    297e:	0f be       	out	0x3f, r0	; 63
    2980:	a5 d0       	rcall	.+330    	; 0x2acc <vTaskSuspendAll>
        prvLockQueue( pxQueue );
    2982:	0f b6       	in	r0, 0x3f	; 63
    2984:	f8 94       	cli
    2986:	0f 92       	push	r0
    2988:	f8 01       	movw	r30, r16
    298a:	85 8d       	ldd	r24, Z+29	; 0x1d
    298c:	8f 3f       	cpi	r24, 0xFF	; 255
    298e:	09 f4       	brne	.+2      	; 0x2992 <xQueueGenericSend+0xaa>
    2990:	15 8e       	std	Z+29, r1	; 0x1d
    2992:	f8 01       	movw	r30, r16
    2994:	86 8d       	ldd	r24, Z+30	; 0x1e
    2996:	8f 3f       	cpi	r24, 0xFF	; 255
    2998:	09 f4       	brne	.+2      	; 0x299c <xQueueGenericSend+0xb4>
    299a:	16 8e       	std	Z+30, r1	; 0x1e
    299c:	0f 90       	pop	r0

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    299e:	0f be       	out	0x3f, r0	; 63
    29a0:	be 01       	movw	r22, r28
    29a2:	6c 5f       	subi	r22, 0xFC	; 252
    29a4:	7f 4f       	sbci	r23, 0xFF	; 255
    29a6:	ce 01       	movw	r24, r28
    29a8:	01 96       	adiw	r24, 0x01	; 1
    29aa:	a5 d2       	rcall	.+1354   	; 0x2ef6 <xTaskCheckForTimeOut>
    29ac:	81 11       	cpse	r24, r1
    29ae:	19 c0       	rjmp	.+50     	; 0x29e2 <xQueueGenericSend+0xfa>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

    taskENTER_CRITICAL();
    29b0:	0f b6       	in	r0, 0x3f	; 63
    29b2:	f8 94       	cli
    29b4:	0f 92       	push	r0
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    29b6:	f8 01       	movw	r30, r16
    29b8:	92 8d       	ldd	r25, Z+26	; 0x1a
    29ba:	83 8d       	ldd	r24, Z+27	; 0x1b
        else
        {
            xReturn = pdFALSE;
        }
    }
    taskEXIT_CRITICAL();
    29bc:	0f 90       	pop	r0
        prvLockQueue( pxQueue );

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
    29be:	0f be       	out	0x3f, r0	; 63
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    29c0:	98 13       	cpse	r25, r24
    29c2:	0b c0       	rjmp	.+22     	; 0x29da <xQueueGenericSend+0xf2>
    29c4:	6c 81       	ldd	r22, Y+4	; 0x04
    29c6:	7d 81       	ldd	r23, Y+5	; 0x05
                /* Unlocking the queue means queue events can effect the
                event list.  It is possible that interrupts occurring now
                remove this task from the event list again - but as the
                scheduler is suspended the task will go onto the pending
                ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
    29c8:	c7 01       	movw	r24, r14
                /* Resuming the scheduler will move tasks from the pending
                ready list into the ready list - so it is feasible that this
                task is already in a ready list before it yields - in which
                case the yield will not cause a context switch unless there
                is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
    29ca:	36 d2       	rcall	.+1132   	; 0x2e38 <vTaskPlaceOnEventList>
    29cc:	c8 01       	movw	r24, r16
                {
                    portYIELD_WITHIN_API();
    29ce:	ec de       	rcall	.-552    	; 0x27a8 <prvUnlockQueue>
    29d0:	3a d1       	rcall	.+628    	; 0x2c46 <xTaskResumeAll>
    29d2:	81 11       	cpse	r24, r1
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
    29d4:	a5 cf       	rjmp	.-182    	; 0x2920 <xQueueGenericSend+0x38>
    29d6:	c7 dd       	rcall	.-1138   	; 0x2566 <vPortYield>
    29d8:	a3 cf       	rjmp	.-186    	; 0x2920 <xQueueGenericSend+0x38>
                ( void ) xTaskResumeAll();
    29da:	c8 01       	movw	r24, r16
    29dc:	e5 de       	rcall	.-566    	; 0x27a8 <prvUnlockQueue>
    29de:	33 d1       	rcall	.+614    	; 0x2c46 <xTaskResumeAll>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
    29e0:	9f cf       	rjmp	.-194    	; 0x2920 <xQueueGenericSend+0x38>
    29e2:	c8 01       	movw	r24, r16
    29e4:	e1 de       	rcall	.-574    	; 0x27a8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
    29e6:	2f d1       	rcall	.+606    	; 0x2c46 <xTaskResumeAll>
    29e8:	80 e0       	ldi	r24, 0x00	; 0

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
    29ea:	0f 90       	pop	r0
        }
    } /*lint -restore */
}
    29ec:	0f 90       	pop	r0
    29ee:	0f 90       	pop	r0
    29f0:	0f 90       	pop	r0
    29f2:	0f 90       	pop	r0
    29f4:	df 91       	pop	r29
    29f6:	cf 91       	pop	r28
    29f8:	1f 91       	pop	r17
    29fa:	0f 91       	pop	r16
    29fc:	ff 90       	pop	r15
    29fe:	ef 90       	pop	r14
    2a00:	df 90       	pop	r13
    2a02:	cf 90       	pop	r12
    2a04:	bf 90       	pop	r11
    2a06:	af 90       	pop	r10
    2a08:	9f 90       	pop	r9
    2a0a:	08 95       	ret

00002a0c <prvResetNextTaskUnblockTime>:
    2a0c:	e0 91 38 0c 	lds	r30, 0x0C38	; 0x800c38 <pxDelayedTaskList>
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    2a10:	f0 91 39 0c 	lds	r31, 0x0C39	; 0x800c39 <pxDelayedTaskList+0x1>
    2a14:	80 81       	ld	r24, Z
    2a16:	81 11       	cpse	r24, r1
    2a18:	07 c0       	rjmp	.+14     	; 0x2a28 <prvResetNextTaskUnblockTime+0x1c>
    2a1a:	8f ef       	ldi	r24, 0xFF	; 255
    2a1c:	9f ef       	ldi	r25, 0xFF	; 255
    2a1e:	90 93 25 0c 	sts	0x0C25, r25	; 0x800c25 <xNextTaskUnblockTime+0x1>
    2a22:	80 93 24 0c 	sts	0x0C24, r24	; 0x800c24 <xNextTaskUnblockTime>
    2a26:	08 95       	ret
    2a28:	e0 91 38 0c 	lds	r30, 0x0C38	; 0x800c38 <pxDelayedTaskList>
    2a2c:	f0 91 39 0c 	lds	r31, 0x0C39	; 0x800c39 <pxDelayedTaskList+0x1>
    2a30:	05 80       	ldd	r0, Z+5	; 0x05
    2a32:	f6 81       	ldd	r31, Z+6	; 0x06
    2a34:	e0 2d       	mov	r30, r0
    2a36:	06 80       	ldd	r0, Z+6	; 0x06
    2a38:	f7 81       	ldd	r31, Z+7	; 0x07
    2a3a:	e0 2d       	mov	r30, r0
    2a3c:	82 81       	ldd	r24, Z+2	; 0x02
    2a3e:	93 81       	ldd	r25, Z+3	; 0x03
    2a40:	90 93 25 0c 	sts	0x0C25, r25	; 0x800c25 <xNextTaskUnblockTime+0x1>
    2a44:	80 93 24 0c 	sts	0x0C24, r24	; 0x800c24 <xNextTaskUnblockTime>
    2a48:	08 95       	ret

00002a4a <prvAddCurrentTaskToDelayedList>:
    2a4a:	0f 93       	push	r16
    2a4c:	1f 93       	push	r17
    2a4e:	cf 93       	push	r28
    2a50:	df 93       	push	r29
    2a52:	ec 01       	movw	r28, r24
    2a54:	00 91 2a 0c 	lds	r16, 0x0C2A	; 0x800c2a <xTickCount>
    2a58:	10 91 2b 0c 	lds	r17, 0x0C2B	; 0x800c2b <xTickCount+0x1>
    2a5c:	80 91 5e 0c 	lds	r24, 0x0C5E	; 0x800c5e <pxCurrentTCB>
    2a60:	90 91 5f 0c 	lds	r25, 0x0C5F	; 0x800c5f <pxCurrentTCB+0x1>
    2a64:	02 96       	adiw	r24, 0x02	; 2
    2a66:	58 dd       	rcall	.-1360   	; 0x2518 <uxListRemove>
    2a68:	c0 0f       	add	r28, r16
    2a6a:	d1 1f       	adc	r29, r17
    2a6c:	e0 91 5e 0c 	lds	r30, 0x0C5E	; 0x800c5e <pxCurrentTCB>
    2a70:	f0 91 5f 0c 	lds	r31, 0x0C5F	; 0x800c5f <pxCurrentTCB+0x1>
    2a74:	d3 83       	std	Z+3, r29	; 0x03
    2a76:	c2 83       	std	Z+2, r28	; 0x02
    2a78:	c0 17       	cp	r28, r16
    2a7a:	d1 07       	cpc	r29, r17
    2a7c:	60 f4       	brcc	.+24     	; 0x2a96 <prvAddCurrentTaskToDelayedList+0x4c>
    2a7e:	60 91 5e 0c 	lds	r22, 0x0C5E	; 0x800c5e <pxCurrentTCB>
    2a82:	70 91 5f 0c 	lds	r23, 0x0C5F	; 0x800c5f <pxCurrentTCB+0x1>
    2a86:	80 91 36 0c 	lds	r24, 0x0C36	; 0x800c36 <pxOverflowDelayedTaskList>
    2a8a:	90 91 37 0c 	lds	r25, 0x0C37	; 0x800c37 <pxOverflowDelayedTaskList+0x1>
    2a8e:	6e 5f       	subi	r22, 0xFE	; 254
    2a90:	7f 4f       	sbci	r23, 0xFF	; 255
    2a92:	11 dd       	rcall	.-1502   	; 0x24b6 <vListInsert>
    2a94:	16 c0       	rjmp	.+44     	; 0x2ac2 <prvAddCurrentTaskToDelayedList+0x78>
    2a96:	60 91 5e 0c 	lds	r22, 0x0C5E	; 0x800c5e <pxCurrentTCB>
    2a9a:	70 91 5f 0c 	lds	r23, 0x0C5F	; 0x800c5f <pxCurrentTCB+0x1>
    2a9e:	80 91 38 0c 	lds	r24, 0x0C38	; 0x800c38 <pxDelayedTaskList>
    2aa2:	90 91 39 0c 	lds	r25, 0x0C39	; 0x800c39 <pxDelayedTaskList+0x1>
    2aa6:	6e 5f       	subi	r22, 0xFE	; 254
    2aa8:	7f 4f       	sbci	r23, 0xFF	; 255
    2aaa:	05 dd       	rcall	.-1526   	; 0x24b6 <vListInsert>
    2aac:	80 91 24 0c 	lds	r24, 0x0C24	; 0x800c24 <xNextTaskUnblockTime>
    2ab0:	90 91 25 0c 	lds	r25, 0x0C25	; 0x800c25 <xNextTaskUnblockTime+0x1>
    2ab4:	c8 17       	cp	r28, r24
    2ab6:	d9 07       	cpc	r29, r25
    2ab8:	20 f4       	brcc	.+8      	; 0x2ac2 <prvAddCurrentTaskToDelayedList+0x78>
    2aba:	d0 93 25 0c 	sts	0x0C25, r29	; 0x800c25 <xNextTaskUnblockTime+0x1>
    2abe:	c0 93 24 0c 	sts	0x0C24, r28	; 0x800c24 <xNextTaskUnblockTime>
    2ac2:	df 91       	pop	r29
    2ac4:	cf 91       	pop	r28
    2ac6:	1f 91       	pop	r17
    2ac8:	0f 91       	pop	r16
    2aca:	08 95       	ret

00002acc <vTaskSuspendAll>:
    2acc:	80 91 23 0c 	lds	r24, 0x0C23	; 0x800c23 <uxSchedulerSuspended>
    2ad0:	8f 5f       	subi	r24, 0xFF	; 255
    2ad2:	80 93 23 0c 	sts	0x0C23, r24	; 0x800c23 <uxSchedulerSuspended>
    2ad6:	08 95       	ret

00002ad8 <xTaskIncrementTick>:
    2ad8:	cf 92       	push	r12
    2ada:	df 92       	push	r13
    2adc:	ef 92       	push	r14
    2ade:	ff 92       	push	r15
    2ae0:	0f 93       	push	r16
    2ae2:	1f 93       	push	r17
    2ae4:	cf 93       	push	r28
    2ae6:	df 93       	push	r29
    2ae8:	80 91 23 0c 	lds	r24, 0x0C23	; 0x800c23 <uxSchedulerSuspended>
    2aec:	81 11       	cpse	r24, r1
    2aee:	95 c0       	rjmp	.+298    	; 0x2c1a <xTaskIncrementTick+0x142>
    2af0:	e0 90 2a 0c 	lds	r14, 0x0C2A	; 0x800c2a <xTickCount>
    2af4:	f0 90 2b 0c 	lds	r15, 0x0C2B	; 0x800c2b <xTickCount+0x1>
    2af8:	8f ef       	ldi	r24, 0xFF	; 255
    2afa:	e8 1a       	sub	r14, r24
    2afc:	f8 0a       	sbc	r15, r24
    2afe:	f0 92 2b 0c 	sts	0x0C2B, r15	; 0x800c2b <xTickCount+0x1>
    2b02:	e0 92 2a 0c 	sts	0x0C2A, r14	; 0x800c2a <xTickCount>
    2b06:	e1 14       	cp	r14, r1
    2b08:	f1 04       	cpc	r15, r1
    2b0a:	b1 f4       	brne	.+44     	; 0x2b38 <xTaskIncrementTick+0x60>
    2b0c:	80 91 38 0c 	lds	r24, 0x0C38	; 0x800c38 <pxDelayedTaskList>
    2b10:	90 91 39 0c 	lds	r25, 0x0C39	; 0x800c39 <pxDelayedTaskList+0x1>
    2b14:	20 91 36 0c 	lds	r18, 0x0C36	; 0x800c36 <pxOverflowDelayedTaskList>
    2b18:	30 91 37 0c 	lds	r19, 0x0C37	; 0x800c37 <pxOverflowDelayedTaskList+0x1>
    2b1c:	30 93 39 0c 	sts	0x0C39, r19	; 0x800c39 <pxDelayedTaskList+0x1>
    2b20:	20 93 38 0c 	sts	0x0C38, r18	; 0x800c38 <pxDelayedTaskList>
    2b24:	90 93 37 0c 	sts	0x0C37, r25	; 0x800c37 <pxOverflowDelayedTaskList+0x1>
    2b28:	80 93 36 0c 	sts	0x0C36, r24	; 0x800c36 <pxOverflowDelayedTaskList>
    2b2c:	80 91 26 0c 	lds	r24, 0x0C26	; 0x800c26 <xNumOfOverflows>
    2b30:	8f 5f       	subi	r24, 0xFF	; 255
    2b32:	80 93 26 0c 	sts	0x0C26, r24	; 0x800c26 <xNumOfOverflows>
    2b36:	6a df       	rcall	.-300    	; 0x2a0c <prvResetNextTaskUnblockTime>
    2b38:	80 91 24 0c 	lds	r24, 0x0C24	; 0x800c24 <xNextTaskUnblockTime>
    2b3c:	90 91 25 0c 	lds	r25, 0x0C25	; 0x800c25 <xNextTaskUnblockTime+0x1>
    2b40:	e8 16       	cp	r14, r24
    2b42:	f9 06       	cpc	r15, r25
    2b44:	10 f4       	brcc	.+4      	; 0x2b4a <xTaskIncrementTick+0x72>
    2b46:	d1 2c       	mov	r13, r1
    2b48:	50 c0       	rjmp	.+160    	; 0x2bea <xTaskIncrementTick+0x112>
    2b4a:	d1 2c       	mov	r13, r1
    2b4c:	cc 24       	eor	r12, r12
    2b4e:	c3 94       	inc	r12
    2b50:	e0 91 38 0c 	lds	r30, 0x0C38	; 0x800c38 <pxDelayedTaskList>
    2b54:	f0 91 39 0c 	lds	r31, 0x0C39	; 0x800c39 <pxDelayedTaskList+0x1>
    2b58:	80 81       	ld	r24, Z
    2b5a:	81 11       	cpse	r24, r1
    2b5c:	07 c0       	rjmp	.+14     	; 0x2b6c <xTaskIncrementTick+0x94>
    2b5e:	8f ef       	ldi	r24, 0xFF	; 255
    2b60:	9f ef       	ldi	r25, 0xFF	; 255
    2b62:	90 93 25 0c 	sts	0x0C25, r25	; 0x800c25 <xNextTaskUnblockTime+0x1>
    2b66:	80 93 24 0c 	sts	0x0C24, r24	; 0x800c24 <xNextTaskUnblockTime>
    2b6a:	3f c0       	rjmp	.+126    	; 0x2bea <xTaskIncrementTick+0x112>
    2b6c:	e0 91 38 0c 	lds	r30, 0x0C38	; 0x800c38 <pxDelayedTaskList>
    2b70:	f0 91 39 0c 	lds	r31, 0x0C39	; 0x800c39 <pxDelayedTaskList+0x1>
    2b74:	05 80       	ldd	r0, Z+5	; 0x05
    2b76:	f6 81       	ldd	r31, Z+6	; 0x06
    2b78:	e0 2d       	mov	r30, r0
    2b7a:	c6 81       	ldd	r28, Z+6	; 0x06
    2b7c:	d7 81       	ldd	r29, Z+7	; 0x07
    2b7e:	8a 81       	ldd	r24, Y+2	; 0x02
    2b80:	9b 81       	ldd	r25, Y+3	; 0x03
    2b82:	e8 16       	cp	r14, r24
    2b84:	f9 06       	cpc	r15, r25
    2b86:	28 f4       	brcc	.+10     	; 0x2b92 <xTaskIncrementTick+0xba>
    2b88:	90 93 25 0c 	sts	0x0C25, r25	; 0x800c25 <xNextTaskUnblockTime+0x1>
    2b8c:	80 93 24 0c 	sts	0x0C24, r24	; 0x800c24 <xNextTaskUnblockTime>
    2b90:	2c c0       	rjmp	.+88     	; 0x2bea <xTaskIncrementTick+0x112>
    2b92:	8e 01       	movw	r16, r28
    2b94:	0e 5f       	subi	r16, 0xFE	; 254
    2b96:	1f 4f       	sbci	r17, 0xFF	; 255
    2b98:	c8 01       	movw	r24, r16
    2b9a:	be dc       	rcall	.-1668   	; 0x2518 <uxListRemove>
    2b9c:	8c 89       	ldd	r24, Y+20	; 0x14
    2b9e:	9d 89       	ldd	r25, Y+21	; 0x15
    2ba0:	89 2b       	or	r24, r25
    2ba2:	19 f0       	breq	.+6      	; 0x2baa <xTaskIncrementTick+0xd2>
    2ba4:	ce 01       	movw	r24, r28
    2ba6:	0c 96       	adiw	r24, 0x0c	; 12
    2ba8:	b7 dc       	rcall	.-1682   	; 0x2518 <uxListRemove>
    2baa:	8e 89       	ldd	r24, Y+22	; 0x16
    2bac:	90 91 29 0c 	lds	r25, 0x0C29	; 0x800c29 <uxTopReadyPriority>
    2bb0:	98 17       	cp	r25, r24
    2bb2:	10 f4       	brcc	.+4      	; 0x2bb8 <xTaskIncrementTick+0xe0>
    2bb4:	80 93 29 0c 	sts	0x0C29, r24	; 0x800c29 <uxTopReadyPriority>
    2bb8:	90 e0       	ldi	r25, 0x00	; 0
    2bba:	9c 01       	movw	r18, r24
    2bbc:	22 0f       	add	r18, r18
    2bbe:	33 1f       	adc	r19, r19
    2bc0:	22 0f       	add	r18, r18
    2bc2:	33 1f       	adc	r19, r19
    2bc4:	22 0f       	add	r18, r18
    2bc6:	33 1f       	adc	r19, r19
    2bc8:	82 0f       	add	r24, r18
    2bca:	93 1f       	adc	r25, r19
    2bcc:	b8 01       	movw	r22, r16
    2bce:	86 5c       	subi	r24, 0xC6	; 198
    2bd0:	93 4f       	sbci	r25, 0xF3	; 243
    2bd2:	50 dc       	rcall	.-1888   	; 0x2474 <vListInsertEnd>
    2bd4:	e0 91 5e 0c 	lds	r30, 0x0C5E	; 0x800c5e <pxCurrentTCB>
    2bd8:	f0 91 5f 0c 	lds	r31, 0x0C5F	; 0x800c5f <pxCurrentTCB+0x1>
    2bdc:	9e 89       	ldd	r25, Y+22	; 0x16
    2bde:	86 89       	ldd	r24, Z+22	; 0x16
    2be0:	98 17       	cp	r25, r24
    2be2:	08 f4       	brcc	.+2      	; 0x2be6 <xTaskIncrementTick+0x10e>
    2be4:	b5 cf       	rjmp	.-150    	; 0x2b50 <xTaskIncrementTick+0x78>
    2be6:	dc 2c       	mov	r13, r12
    2be8:	b3 cf       	rjmp	.-154    	; 0x2b50 <xTaskIncrementTick+0x78>
    2bea:	e0 91 5e 0c 	lds	r30, 0x0C5E	; 0x800c5e <pxCurrentTCB>
    2bee:	f0 91 5f 0c 	lds	r31, 0x0C5F	; 0x800c5f <pxCurrentTCB+0x1>
    2bf2:	86 89       	ldd	r24, Z+22	; 0x16
    2bf4:	90 e0       	ldi	r25, 0x00	; 0
    2bf6:	fc 01       	movw	r30, r24
    2bf8:	ee 0f       	add	r30, r30
    2bfa:	ff 1f       	adc	r31, r31
    2bfc:	ee 0f       	add	r30, r30
    2bfe:	ff 1f       	adc	r31, r31
    2c00:	ee 0f       	add	r30, r30
    2c02:	ff 1f       	adc	r31, r31
    2c04:	8e 0f       	add	r24, r30
    2c06:	9f 1f       	adc	r25, r31
    2c08:	fc 01       	movw	r30, r24
    2c0a:	e6 5c       	subi	r30, 0xC6	; 198
    2c0c:	f3 4f       	sbci	r31, 0xF3	; 243
    2c0e:	80 81       	ld	r24, Z
    2c10:	82 30       	cpi	r24, 0x02	; 2
    2c12:	48 f0       	brcs	.+18     	; 0x2c26 <xTaskIncrementTick+0x14e>
    2c14:	dd 24       	eor	r13, r13
    2c16:	d3 94       	inc	r13
    2c18:	06 c0       	rjmp	.+12     	; 0x2c26 <xTaskIncrementTick+0x14e>
    2c1a:	80 91 28 0c 	lds	r24, 0x0C28	; 0x800c28 <uxPendedTicks>
    2c1e:	8f 5f       	subi	r24, 0xFF	; 255
    2c20:	80 93 28 0c 	sts	0x0C28, r24	; 0x800c28 <uxPendedTicks>
    2c24:	d1 2c       	mov	r13, r1
    2c26:	80 91 27 0c 	lds	r24, 0x0C27	; 0x800c27 <xYieldPending>
    2c2a:	88 23       	and	r24, r24
    2c2c:	11 f0       	breq	.+4      	; 0x2c32 <xTaskIncrementTick+0x15a>
    2c2e:	dd 24       	eor	r13, r13
    2c30:	d3 94       	inc	r13
    2c32:	8d 2d       	mov	r24, r13
    2c34:	df 91       	pop	r29
    2c36:	cf 91       	pop	r28
    2c38:	1f 91       	pop	r17
    2c3a:	0f 91       	pop	r16
    2c3c:	ff 90       	pop	r15
    2c3e:	ef 90       	pop	r14
    2c40:	df 90       	pop	r13
    2c42:	cf 90       	pop	r12
    2c44:	08 95       	ret

00002c46 <xTaskResumeAll>:
    2c46:	df 92       	push	r13
    2c48:	ef 92       	push	r14
    2c4a:	ff 92       	push	r15
    2c4c:	0f 93       	push	r16
    2c4e:	1f 93       	push	r17
    2c50:	cf 93       	push	r28
    2c52:	df 93       	push	r29
    2c54:	0f b6       	in	r0, 0x3f	; 63
    2c56:	f8 94       	cli
    2c58:	0f 92       	push	r0
    2c5a:	80 91 23 0c 	lds	r24, 0x0C23	; 0x800c23 <uxSchedulerSuspended>
    2c5e:	81 50       	subi	r24, 0x01	; 1
    2c60:	80 93 23 0c 	sts	0x0C23, r24	; 0x800c23 <uxSchedulerSuspended>
    2c64:	80 91 23 0c 	lds	r24, 0x0C23	; 0x800c23 <uxSchedulerSuspended>
    2c68:	81 11       	cpse	r24, r1
    2c6a:	59 c0       	rjmp	.+178    	; 0x2d1e <xTaskResumeAll+0xd8>
    2c6c:	80 91 2c 0c 	lds	r24, 0x0C2C	; 0x800c2c <uxCurrentNumberOfTasks>
    2c70:	81 11       	cpse	r24, r1
    2c72:	30 c0       	rjmp	.+96     	; 0x2cd4 <xTaskResumeAll+0x8e>
    2c74:	57 c0       	rjmp	.+174    	; 0x2d24 <xTaskResumeAll+0xde>
    2c76:	d7 01       	movw	r26, r14
    2c78:	15 96       	adiw	r26, 0x05	; 5
    2c7a:	ed 91       	ld	r30, X+
    2c7c:	fc 91       	ld	r31, X
    2c7e:	16 97       	sbiw	r26, 0x06	; 6
    2c80:	c6 81       	ldd	r28, Z+6	; 0x06
    2c82:	d7 81       	ldd	r29, Z+7	; 0x07
    2c84:	ce 01       	movw	r24, r28
    2c86:	0c 96       	adiw	r24, 0x0c	; 12
    2c88:	47 dc       	rcall	.-1906   	; 0x2518 <uxListRemove>
    2c8a:	8e 01       	movw	r16, r28
    2c8c:	0e 5f       	subi	r16, 0xFE	; 254
    2c8e:	1f 4f       	sbci	r17, 0xFF	; 255
    2c90:	c8 01       	movw	r24, r16
    2c92:	42 dc       	rcall	.-1916   	; 0x2518 <uxListRemove>
    2c94:	8e 89       	ldd	r24, Y+22	; 0x16
    2c96:	90 91 29 0c 	lds	r25, 0x0C29	; 0x800c29 <uxTopReadyPriority>
    2c9a:	98 17       	cp	r25, r24
    2c9c:	10 f4       	brcc	.+4      	; 0x2ca2 <xTaskResumeAll+0x5c>
    2c9e:	80 93 29 0c 	sts	0x0C29, r24	; 0x800c29 <uxTopReadyPriority>
    2ca2:	90 e0       	ldi	r25, 0x00	; 0
    2ca4:	9c 01       	movw	r18, r24
    2ca6:	22 0f       	add	r18, r18
    2ca8:	33 1f       	adc	r19, r19
    2caa:	22 0f       	add	r18, r18
    2cac:	33 1f       	adc	r19, r19
    2cae:	22 0f       	add	r18, r18
    2cb0:	33 1f       	adc	r19, r19
    2cb2:	82 0f       	add	r24, r18
    2cb4:	93 1f       	adc	r25, r19
    2cb6:	b8 01       	movw	r22, r16
    2cb8:	86 5c       	subi	r24, 0xC6	; 198
    2cba:	93 4f       	sbci	r25, 0xF3	; 243
    2cbc:	db db       	rcall	.-2122   	; 0x2474 <vListInsertEnd>
    2cbe:	e0 91 5e 0c 	lds	r30, 0x0C5E	; 0x800c5e <pxCurrentTCB>
    2cc2:	f0 91 5f 0c 	lds	r31, 0x0C5F	; 0x800c5f <pxCurrentTCB+0x1>
    2cc6:	9e 89       	ldd	r25, Y+22	; 0x16
    2cc8:	86 89       	ldd	r24, Z+22	; 0x16
    2cca:	98 17       	cp	r25, r24
    2ccc:	68 f0       	brcs	.+26     	; 0x2ce8 <xTaskResumeAll+0xa2>
    2cce:	d0 92 27 0c 	sts	0x0C27, r13	; 0x800c27 <xYieldPending>
    2cd2:	0a c0       	rjmp	.+20     	; 0x2ce8 <xTaskResumeAll+0xa2>
    2cd4:	c0 e0       	ldi	r28, 0x00	; 0
    2cd6:	d0 e0       	ldi	r29, 0x00	; 0
    2cd8:	0f 2e       	mov	r0, r31
    2cda:	fd e2       	ldi	r31, 0x2D	; 45
    2cdc:	ef 2e       	mov	r14, r31
    2cde:	fc e0       	ldi	r31, 0x0C	; 12
    2ce0:	ff 2e       	mov	r15, r31
    2ce2:	f0 2d       	mov	r31, r0
    2ce4:	dd 24       	eor	r13, r13
    2ce6:	d3 94       	inc	r13
    2ce8:	f7 01       	movw	r30, r14
    2cea:	80 81       	ld	r24, Z
    2cec:	81 11       	cpse	r24, r1
    2cee:	c3 cf       	rjmp	.-122    	; 0x2c76 <xTaskResumeAll+0x30>
    2cf0:	cd 2b       	or	r28, r29
    2cf2:	09 f0       	breq	.+2      	; 0x2cf6 <xTaskResumeAll+0xb0>
    2cf4:	8b de       	rcall	.-746    	; 0x2a0c <prvResetNextTaskUnblockTime>
    2cf6:	c0 91 28 0c 	lds	r28, 0x0C28	; 0x800c28 <uxPendedTicks>
    2cfa:	cc 23       	and	r28, r28
    2cfc:	49 f0       	breq	.+18     	; 0x2d10 <xTaskResumeAll+0xca>
    2cfe:	d1 e0       	ldi	r29, 0x01	; 1
    2d00:	eb de       	rcall	.-554    	; 0x2ad8 <xTaskIncrementTick>
    2d02:	81 11       	cpse	r24, r1
    2d04:	d0 93 27 0c 	sts	0x0C27, r29	; 0x800c27 <xYieldPending>
    2d08:	c1 50       	subi	r28, 0x01	; 1
    2d0a:	d1 f7       	brne	.-12     	; 0x2d00 <xTaskResumeAll+0xba>
    2d0c:	10 92 28 0c 	sts	0x0C28, r1	; 0x800c28 <uxPendedTicks>
    2d10:	80 91 27 0c 	lds	r24, 0x0C27	; 0x800c27 <xYieldPending>
    2d14:	88 23       	and	r24, r24
    2d16:	29 f0       	breq	.+10     	; 0x2d22 <xTaskResumeAll+0xdc>
    2d18:	26 dc       	rcall	.-1972   	; 0x2566 <vPortYield>
    2d1a:	81 e0       	ldi	r24, 0x01	; 1
    2d1c:	03 c0       	rjmp	.+6      	; 0x2d24 <xTaskResumeAll+0xde>
    2d1e:	80 e0       	ldi	r24, 0x00	; 0
    2d20:	01 c0       	rjmp	.+2      	; 0x2d24 <xTaskResumeAll+0xde>
    2d22:	80 e0       	ldi	r24, 0x00	; 0
    2d24:	0f 90       	pop	r0
    2d26:	0f be       	out	0x3f, r0	; 63
    2d28:	df 91       	pop	r29
    2d2a:	cf 91       	pop	r28
    2d2c:	1f 91       	pop	r17
    2d2e:	0f 91       	pop	r16
    2d30:	ff 90       	pop	r15
    2d32:	ef 90       	pop	r14
    2d34:	df 90       	pop	r13
    2d36:	08 95       	ret

00002d38 <vTaskSwitchContext>:
    2d38:	80 91 23 0c 	lds	r24, 0x0C23	; 0x800c23 <uxSchedulerSuspended>
    2d3c:	88 23       	and	r24, r24
    2d3e:	21 f0       	breq	.+8      	; 0x2d48 <vTaskSwitchContext+0x10>
    2d40:	81 e0       	ldi	r24, 0x01	; 1
    2d42:	80 93 27 0c 	sts	0x0C27, r24	; 0x800c27 <xYieldPending>
    2d46:	08 95       	ret
    2d48:	10 92 27 0c 	sts	0x0C27, r1	; 0x800c27 <xYieldPending>
    2d4c:	a0 91 5e 0c 	lds	r26, 0x0C5E	; 0x800c5e <pxCurrentTCB>
    2d50:	b0 91 5f 0c 	lds	r27, 0x0C5F	; 0x800c5f <pxCurrentTCB+0x1>
    2d54:	e0 91 5e 0c 	lds	r30, 0x0C5E	; 0x800c5e <pxCurrentTCB>
    2d58:	f0 91 5f 0c 	lds	r31, 0x0C5F	; 0x800c5f <pxCurrentTCB+0x1>
    2d5c:	2d 91       	ld	r18, X+
    2d5e:	3c 91       	ld	r19, X
    2d60:	87 89       	ldd	r24, Z+23	; 0x17
    2d62:	90 8d       	ldd	r25, Z+24	; 0x18
    2d64:	82 17       	cp	r24, r18
    2d66:	93 07       	cpc	r25, r19
    2d68:	58 f0       	brcs	.+22     	; 0x2d80 <vTaskSwitchContext+0x48>
    2d6a:	60 91 5e 0c 	lds	r22, 0x0C5E	; 0x800c5e <pxCurrentTCB>
    2d6e:	70 91 5f 0c 	lds	r23, 0x0C5F	; 0x800c5f <pxCurrentTCB+0x1>
    2d72:	80 91 5e 0c 	lds	r24, 0x0C5E	; 0x800c5e <pxCurrentTCB>
    2d76:	90 91 5f 0c 	lds	r25, 0x0C5F	; 0x800c5f <pxCurrentTCB+0x1>
    2d7a:	67 5e       	subi	r22, 0xE7	; 231
    2d7c:	7f 4f       	sbci	r23, 0xFF	; 255
    2d7e:	5f db       	rcall	.-2370   	; 0x243e <vApplicationStackOverflowHook>
    2d80:	20 91 29 0c 	lds	r18, 0x0C29	; 0x800c29 <uxTopReadyPriority>
    2d84:	82 2f       	mov	r24, r18
    2d86:	90 e0       	ldi	r25, 0x00	; 0
    2d88:	fc 01       	movw	r30, r24
    2d8a:	ee 0f       	add	r30, r30
    2d8c:	ff 1f       	adc	r31, r31
    2d8e:	ee 0f       	add	r30, r30
    2d90:	ff 1f       	adc	r31, r31
    2d92:	ee 0f       	add	r30, r30
    2d94:	ff 1f       	adc	r31, r31
    2d96:	e8 0f       	add	r30, r24
    2d98:	f9 1f       	adc	r31, r25
    2d9a:	e6 5c       	subi	r30, 0xC6	; 198
    2d9c:	f3 4f       	sbci	r31, 0xF3	; 243
    2d9e:	30 81       	ld	r19, Z
    2da0:	31 11       	cpse	r19, r1
    2da2:	11 c0       	rjmp	.+34     	; 0x2dc6 <vTaskSwitchContext+0x8e>
    2da4:	21 50       	subi	r18, 0x01	; 1
    2da6:	82 2f       	mov	r24, r18
    2da8:	90 e0       	ldi	r25, 0x00	; 0
    2daa:	fc 01       	movw	r30, r24
    2dac:	ee 0f       	add	r30, r30
    2dae:	ff 1f       	adc	r31, r31
    2db0:	ee 0f       	add	r30, r30
    2db2:	ff 1f       	adc	r31, r31
    2db4:	ee 0f       	add	r30, r30
    2db6:	ff 1f       	adc	r31, r31
    2db8:	e8 0f       	add	r30, r24
    2dba:	f9 1f       	adc	r31, r25
    2dbc:	e6 5c       	subi	r30, 0xC6	; 198
    2dbe:	f3 4f       	sbci	r31, 0xF3	; 243
    2dc0:	30 81       	ld	r19, Z
    2dc2:	33 23       	and	r19, r19
    2dc4:	79 f3       	breq	.-34     	; 0x2da4 <vTaskSwitchContext+0x6c>
    2dc6:	ac 01       	movw	r20, r24
    2dc8:	44 0f       	add	r20, r20
    2dca:	55 1f       	adc	r21, r21
    2dcc:	44 0f       	add	r20, r20
    2dce:	55 1f       	adc	r21, r21
    2dd0:	44 0f       	add	r20, r20
    2dd2:	55 1f       	adc	r21, r21
    2dd4:	48 0f       	add	r20, r24
    2dd6:	59 1f       	adc	r21, r25
    2dd8:	da 01       	movw	r26, r20
    2dda:	a6 5c       	subi	r26, 0xC6	; 198
    2ddc:	b3 4f       	sbci	r27, 0xF3	; 243
    2dde:	11 96       	adiw	r26, 0x01	; 1
    2de0:	ed 91       	ld	r30, X+
    2de2:	fc 91       	ld	r31, X
    2de4:	12 97       	sbiw	r26, 0x02	; 2
    2de6:	02 80       	ldd	r0, Z+2	; 0x02
    2de8:	f3 81       	ldd	r31, Z+3	; 0x03
    2dea:	e0 2d       	mov	r30, r0
    2dec:	12 96       	adiw	r26, 0x02	; 2
    2dee:	fc 93       	st	X, r31
    2df0:	ee 93       	st	-X, r30
    2df2:	11 97       	sbiw	r26, 0x01	; 1
    2df4:	43 5c       	subi	r20, 0xC3	; 195
    2df6:	53 4f       	sbci	r21, 0xF3	; 243
    2df8:	e4 17       	cp	r30, r20
    2dfa:	f5 07       	cpc	r31, r21
    2dfc:	29 f4       	brne	.+10     	; 0x2e08 <vTaskSwitchContext+0xd0>
    2dfe:	42 81       	ldd	r20, Z+2	; 0x02
    2e00:	53 81       	ldd	r21, Z+3	; 0x03
    2e02:	fd 01       	movw	r30, r26
    2e04:	52 83       	std	Z+2, r21	; 0x02
    2e06:	41 83       	std	Z+1, r20	; 0x01
    2e08:	fc 01       	movw	r30, r24
    2e0a:	ee 0f       	add	r30, r30
    2e0c:	ff 1f       	adc	r31, r31
    2e0e:	ee 0f       	add	r30, r30
    2e10:	ff 1f       	adc	r31, r31
    2e12:	ee 0f       	add	r30, r30
    2e14:	ff 1f       	adc	r31, r31
    2e16:	8e 0f       	add	r24, r30
    2e18:	9f 1f       	adc	r25, r31
    2e1a:	fc 01       	movw	r30, r24
    2e1c:	e6 5c       	subi	r30, 0xC6	; 198
    2e1e:	f3 4f       	sbci	r31, 0xF3	; 243
    2e20:	01 80       	ldd	r0, Z+1	; 0x01
    2e22:	f2 81       	ldd	r31, Z+2	; 0x02
    2e24:	e0 2d       	mov	r30, r0
    2e26:	86 81       	ldd	r24, Z+6	; 0x06
    2e28:	97 81       	ldd	r25, Z+7	; 0x07
    2e2a:	90 93 5f 0c 	sts	0x0C5F, r25	; 0x800c5f <pxCurrentTCB+0x1>
    2e2e:	80 93 5e 0c 	sts	0x0C5E, r24	; 0x800c5e <pxCurrentTCB>
    2e32:	20 93 29 0c 	sts	0x0C29, r18	; 0x800c29 <uxTopReadyPriority>
    2e36:	08 95       	ret

00002e38 <vTaskPlaceOnEventList>:
    2e38:	cf 93       	push	r28
    2e3a:	df 93       	push	r29
    2e3c:	eb 01       	movw	r28, r22
    2e3e:	60 91 5e 0c 	lds	r22, 0x0C5E	; 0x800c5e <pxCurrentTCB>
    2e42:	70 91 5f 0c 	lds	r23, 0x0C5F	; 0x800c5f <pxCurrentTCB+0x1>
    2e46:	64 5f       	subi	r22, 0xF4	; 244
    2e48:	7f 4f       	sbci	r23, 0xFF	; 255
    2e4a:	35 db       	rcall	.-2454   	; 0x24b6 <vListInsert>
    2e4c:	61 e0       	ldi	r22, 0x01	; 1
    2e4e:	ce 01       	movw	r24, r28
    2e50:	fc dd       	rcall	.-1032   	; 0x2a4a <prvAddCurrentTaskToDelayedList>
    2e52:	df 91       	pop	r29
    2e54:	cf 91       	pop	r28
    2e56:	08 95       	ret

00002e58 <xTaskRemoveFromEventList>:
    2e58:	0f 93       	push	r16
    2e5a:	1f 93       	push	r17
    2e5c:	cf 93       	push	r28
    2e5e:	df 93       	push	r29
    2e60:	dc 01       	movw	r26, r24
    2e62:	15 96       	adiw	r26, 0x05	; 5
    2e64:	ed 91       	ld	r30, X+
    2e66:	fc 91       	ld	r31, X
    2e68:	16 97       	sbiw	r26, 0x06	; 6
    2e6a:	c6 81       	ldd	r28, Z+6	; 0x06
    2e6c:	d7 81       	ldd	r29, Z+7	; 0x07
    2e6e:	8e 01       	movw	r16, r28
    2e70:	04 5f       	subi	r16, 0xF4	; 244
    2e72:	1f 4f       	sbci	r17, 0xFF	; 255
    2e74:	c8 01       	movw	r24, r16
    2e76:	50 db       	rcall	.-2400   	; 0x2518 <uxListRemove>
    2e78:	80 91 23 0c 	lds	r24, 0x0C23	; 0x800c23 <uxSchedulerSuspended>
    2e7c:	81 11       	cpse	r24, r1
    2e7e:	1a c0       	rjmp	.+52     	; 0x2eb4 <xTaskRemoveFromEventList+0x5c>
    2e80:	0a 50       	subi	r16, 0x0A	; 10
    2e82:	11 09       	sbc	r17, r1
    2e84:	c8 01       	movw	r24, r16
    2e86:	48 db       	rcall	.-2416   	; 0x2518 <uxListRemove>
    2e88:	8e 89       	ldd	r24, Y+22	; 0x16
    2e8a:	90 91 29 0c 	lds	r25, 0x0C29	; 0x800c29 <uxTopReadyPriority>
    2e8e:	98 17       	cp	r25, r24
    2e90:	10 f4       	brcc	.+4      	; 0x2e96 <xTaskRemoveFromEventList+0x3e>
    2e92:	80 93 29 0c 	sts	0x0C29, r24	; 0x800c29 <uxTopReadyPriority>
    2e96:	90 e0       	ldi	r25, 0x00	; 0
    2e98:	9c 01       	movw	r18, r24
    2e9a:	22 0f       	add	r18, r18
    2e9c:	33 1f       	adc	r19, r19
    2e9e:	22 0f       	add	r18, r18
    2ea0:	33 1f       	adc	r19, r19
    2ea2:	22 0f       	add	r18, r18
    2ea4:	33 1f       	adc	r19, r19
    2ea6:	82 0f       	add	r24, r18
    2ea8:	93 1f       	adc	r25, r19
    2eaa:	b8 01       	movw	r22, r16
    2eac:	86 5c       	subi	r24, 0xC6	; 198
    2eae:	93 4f       	sbci	r25, 0xF3	; 243
    2eb0:	e1 da       	rcall	.-2622   	; 0x2474 <vListInsertEnd>
    2eb2:	04 c0       	rjmp	.+8      	; 0x2ebc <xTaskRemoveFromEventList+0x64>
    2eb4:	b8 01       	movw	r22, r16
    2eb6:	8d e2       	ldi	r24, 0x2D	; 45
    2eb8:	9c e0       	ldi	r25, 0x0C	; 12
    2eba:	dc da       	rcall	.-2632   	; 0x2474 <vListInsertEnd>
    2ebc:	e0 91 5e 0c 	lds	r30, 0x0C5E	; 0x800c5e <pxCurrentTCB>
    2ec0:	f0 91 5f 0c 	lds	r31, 0x0C5F	; 0x800c5f <pxCurrentTCB+0x1>
    2ec4:	9e 89       	ldd	r25, Y+22	; 0x16
    2ec6:	86 89       	ldd	r24, Z+22	; 0x16
    2ec8:	89 17       	cp	r24, r25
    2eca:	20 f4       	brcc	.+8      	; 0x2ed4 <xTaskRemoveFromEventList+0x7c>
    2ecc:	81 e0       	ldi	r24, 0x01	; 1
    2ece:	80 93 27 0c 	sts	0x0C27, r24	; 0x800c27 <xYieldPending>
    2ed2:	01 c0       	rjmp	.+2      	; 0x2ed6 <xTaskRemoveFromEventList+0x7e>
    2ed4:	80 e0       	ldi	r24, 0x00	; 0
    2ed6:	df 91       	pop	r29
    2ed8:	cf 91       	pop	r28
    2eda:	1f 91       	pop	r17
    2edc:	0f 91       	pop	r16
    2ede:	08 95       	ret

00002ee0 <vTaskInternalSetTimeOutState>:
    2ee0:	20 91 26 0c 	lds	r18, 0x0C26	; 0x800c26 <xNumOfOverflows>
    2ee4:	fc 01       	movw	r30, r24
    2ee6:	20 83       	st	Z, r18
    2ee8:	20 91 2a 0c 	lds	r18, 0x0C2A	; 0x800c2a <xTickCount>
    2eec:	30 91 2b 0c 	lds	r19, 0x0C2B	; 0x800c2b <xTickCount+0x1>
    2ef0:	32 83       	std	Z+2, r19	; 0x02
    2ef2:	21 83       	std	Z+1, r18	; 0x01
    2ef4:	08 95       	ret

00002ef6 <xTaskCheckForTimeOut>:
    2ef6:	0f b6       	in	r0, 0x3f	; 63
    2ef8:	f8 94       	cli
    2efa:	0f 92       	push	r0
    2efc:	20 91 2a 0c 	lds	r18, 0x0C2A	; 0x800c2a <xTickCount>
    2f00:	30 91 2b 0c 	lds	r19, 0x0C2B	; 0x800c2b <xTickCount+0x1>
    2f04:	dc 01       	movw	r26, r24
    2f06:	11 96       	adiw	r26, 0x01	; 1
    2f08:	4d 91       	ld	r20, X+
    2f0a:	5c 91       	ld	r21, X
    2f0c:	12 97       	sbiw	r26, 0x02	; 2
    2f0e:	e0 91 26 0c 	lds	r30, 0x0C26	; 0x800c26 <xNumOfOverflows>
    2f12:	fc 91       	ld	r31, X
    2f14:	fe 17       	cp	r31, r30
    2f16:	19 f0       	breq	.+6      	; 0x2f1e <xTaskCheckForTimeOut+0x28>
    2f18:	24 17       	cp	r18, r20
    2f1a:	35 07       	cpc	r19, r21
    2f1c:	98 f4       	brcc	.+38     	; 0x2f44 <xTaskCheckForTimeOut+0x4e>
    2f1e:	24 1b       	sub	r18, r20
    2f20:	35 0b       	sbc	r19, r21
    2f22:	fb 01       	movw	r30, r22
    2f24:	40 81       	ld	r20, Z
    2f26:	51 81       	ldd	r21, Z+1	; 0x01
    2f28:	24 17       	cp	r18, r20
    2f2a:	35 07       	cpc	r19, r21
    2f2c:	38 f4       	brcc	.+14     	; 0x2f3c <xTaskCheckForTimeOut+0x46>
    2f2e:	42 1b       	sub	r20, r18
    2f30:	53 0b       	sbc	r21, r19
    2f32:	51 83       	std	Z+1, r21	; 0x01
    2f34:	40 83       	st	Z, r20
    2f36:	d4 df       	rcall	.-88     	; 0x2ee0 <vTaskInternalSetTimeOutState>
    2f38:	80 e0       	ldi	r24, 0x00	; 0
    2f3a:	05 c0       	rjmp	.+10     	; 0x2f46 <xTaskCheckForTimeOut+0x50>
    2f3c:	11 82       	std	Z+1, r1	; 0x01
    2f3e:	10 82       	st	Z, r1
    2f40:	81 e0       	ldi	r24, 0x01	; 1
    2f42:	01 c0       	rjmp	.+2      	; 0x2f46 <xTaskCheckForTimeOut+0x50>
    2f44:	81 e0       	ldi	r24, 0x01	; 1
    2f46:	0f 90       	pop	r0
    2f48:	0f be       	out	0x3f, r0	; 63
    2f4a:	08 95       	ret

00002f4c <vTaskMissedYield>:
    2f4c:	81 e0       	ldi	r24, 0x01	; 1
    2f4e:	80 93 27 0c 	sts	0x0C27, r24	; 0x800c27 <xYieldPending>
    2f52:	08 95       	ret

00002f54 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
    2f54:	0f 93       	push	r16
    2f56:	1f 93       	push	r17
    2f58:	cf 93       	push	r28
    2f5a:	df 93       	push	r29
    2f5c:	fc 01       	movw	r30, r24
    TCB_t * const pxTCB = pxMutexHolder;
    BaseType_t xReturn = pdFALSE;

        if( pxMutexHolder != NULL )
    2f5e:	89 2b       	or	r24, r25
    2f60:	69 f1       	breq	.+90     	; 0x2fbc <xTaskPriorityDisinherit+0x68>
            If the mutex is held by a task then it cannot be given from an
            interrupt, and if a mutex is given by the holding task then it must
            be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
            configASSERT( pxTCB->uxMutexesHeld );
            ( pxTCB->uxMutexesHeld )--;
    2f62:	82 a1       	ldd	r24, Z+34	; 0x22
    2f64:	81 50       	subi	r24, 0x01	; 1
    2f66:	82 a3       	std	Z+34, r24	; 0x22

            /* Has the holder of the mutex inherited the priority of another
            task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    2f68:	26 89       	ldd	r18, Z+22	; 0x16
    2f6a:	91 a1       	ldd	r25, Z+33	; 0x21
    2f6c:	29 17       	cp	r18, r25
    2f6e:	41 f1       	breq	.+80     	; 0x2fc0 <xTaskPriorityDisinherit+0x6c>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
    2f70:	81 11       	cpse	r24, r1
    2f72:	28 c0       	rjmp	.+80     	; 0x2fc4 <xTaskPriorityDisinherit+0x70>
    2f74:	ef 01       	movw	r28, r30
                    /* A task can only have an inherited priority if it holds
                    the mutex.  If the mutex is held by a task then it cannot be
                    given from an interrupt, and if a mutex is given by the
                    holding task then it must be the running state task.  Remove
                    the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    2f76:	8f 01       	movw	r16, r30
    2f78:	0e 5f       	subi	r16, 0xFE	; 254
    2f7a:	1f 4f       	sbci	r17, 0xFF	; 255
    2f7c:	c8 01       	movw	r24, r16
    2f7e:	cc da       	rcall	.-2664   	; 0x2518 <uxListRemove>
                    }

                    /* Disinherit the priority before adding the task into the
                    new    ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
    2f80:	89 a1       	ldd	r24, Y+33	; 0x21
    2f82:	8e 8b       	std	Y+22, r24	; 0x16

                    /* Reset the event list item value.  It cannot be in use for
                    any other purpose if this task is running, and it must be
                    running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    2f84:	24 e0       	ldi	r18, 0x04	; 4
    2f86:	30 e0       	ldi	r19, 0x00	; 0
    2f88:	28 1b       	sub	r18, r24
    2f8a:	31 09       	sbc	r19, r1
    2f8c:	3d 87       	std	Y+13, r19	; 0x0d
    2f8e:	2c 87       	std	Y+12, r18	; 0x0c
                    prvAddTaskToReadyList( pxTCB );
    2f90:	90 91 29 0c 	lds	r25, 0x0C29	; 0x800c29 <uxTopReadyPriority>
    2f94:	98 17       	cp	r25, r24
    2f96:	10 f4       	brcc	.+4      	; 0x2f9c <xTaskPriorityDisinherit+0x48>
    2f98:	80 93 29 0c 	sts	0x0C29, r24	; 0x800c29 <uxTopReadyPriority>
    2f9c:	90 e0       	ldi	r25, 0x00	; 0
    2f9e:	9c 01       	movw	r18, r24
    2fa0:	22 0f       	add	r18, r18
    2fa2:	33 1f       	adc	r19, r19
    2fa4:	22 0f       	add	r18, r18
    2fa6:	33 1f       	adc	r19, r19
    2fa8:	22 0f       	add	r18, r18
    2faa:	33 1f       	adc	r19, r19
    2fac:	82 0f       	add	r24, r18
    2fae:	93 1f       	adc	r25, r19
    2fb0:	b8 01       	movw	r22, r16
    2fb2:	86 5c       	subi	r24, 0xC6	; 198
    2fb4:	93 4f       	sbci	r25, 0xF3	; 243
    2fb6:	5e da       	rcall	.-2884   	; 0x2474 <vListInsertEnd>
                    in an order different to that in which they were taken.
                    If a context switch did not occur when the first mutex was
                    returned, even if a task was waiting on it, then a context
                    switch should occur when the last mutex is returned whether
                    a task is waiting on it or not. */
                    xReturn = pdTRUE;
    2fb8:	81 e0       	ldi	r24, 0x01	; 1
    2fba:	05 c0       	rjmp	.+10     	; 0x2fc6 <xTaskPriorityDisinherit+0x72>
#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
    TCB_t * const pxTCB = pxMutexHolder;
    BaseType_t xReturn = pdFALSE;
    2fbc:	80 e0       	ldi	r24, 0x00	; 0
    2fbe:	03 c0       	rjmp	.+6      	; 0x2fc6 <xTaskPriorityDisinherit+0x72>
    2fc0:	80 e0       	ldi	r24, 0x00	; 0
    2fc2:	01 c0       	rjmp	.+2      	; 0x2fc6 <xTaskPriorityDisinherit+0x72>
    2fc4:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    2fc6:	df 91       	pop	r29
    2fc8:	cf 91       	pop	r28
    2fca:	1f 91       	pop	r17
    2fcc:	0f 91       	pop	r16
    2fce:	08 95       	ret

00002fd0 <Drum_speed_Tasks_init>:
#include "../RTE/RTE_drum.h"



void Drum_speed_Tasks_init(void){
	Drum_speed_init();
    2fd0:	0c 94 9d 00 	jmp	0x13a	; 0x13a <Drum_speed_init>
    2fd4:	08 95       	ret

00002fd6 <LCD_main_err_Init>:

void (*g_callback_read_timeout)(void) = NULL;
void (*g_callback_write_timeout)(void) = NULL;

void LCD_main_err_Init( void(*callback_read_timeout)(void) , void(*callback_write_timeout)(void)){
	g_callback_read_timeout = callback_read_timeout;
    2fd6:	90 93 63 0c 	sts	0x0C63, r25	; 0x800c63 <g_callback_read_timeout+0x1>
    2fda:	80 93 62 0c 	sts	0x0C62, r24	; 0x800c62 <g_callback_read_timeout>
	g_callback_write_timeout = callback_write_timeout;
    2fde:	70 93 61 0c 	sts	0x0C61, r23	; 0x800c61 <g_callback_write_timeout+0x1>
    2fe2:	60 93 60 0c 	sts	0x0C60, r22	; 0x800c60 <g_callback_write_timeout>
    2fe6:	08 95       	ret

00002fe8 <Level_main_err_init>:

#include "../MCAL/UART.h"
 
void (*g_callback_level_sensor_fail) (void) = NULL;
void Level_main_err_init( void (*callback_level_sensor_fail) (void) ){
	 g_callback_level_sensor_fail = callback_level_sensor_fail;
    2fe8:	90 93 65 0c 	sts	0x0C65, r25	; 0x800c65 <g_callback_level_sensor_fail+0x1>
    2fec:	80 93 64 0c 	sts	0x0C64, r24	; 0x800c64 <g_callback_level_sensor_fail>
    2ff0:	08 95       	ret

00002ff2 <Service_init>:
#include "tank_operation.h"
#include "Drum_speed_Tasks.h"

void Service_init(void){
	
	Drum_speed_Tasks_init(); //fixed here because no main task
    2ff2:	ee df       	rcall	.-36     	; 0x2fd0 <Drum_speed_Tasks_init>
	Tank_operation_init();
    2ff4:	3f c0       	rjmp	.+126    	; 0x3074 <Tank_operation_init>
    2ff6:	08 95       	ret

00002ff8 <Tank_out_callback>:
    2ff8:	80 91 6a 0c 	lds	r24, 0x0C6A	; 0x800c6a <g_out_liters_counter>
}

static void Tank_out_callback(void)
{
	
	g_out_liters_counter ++ ;
    2ffc:	90 91 6b 0c 	lds	r25, 0x0C6B	; 0x800c6b <g_out_liters_counter+0x1>
    3000:	01 96       	adiw	r24, 0x01	; 1
    3002:	90 93 6b 0c 	sts	0x0C6B, r25	; 0x800c6b <g_out_liters_counter+0x1>
    3006:	80 93 6a 0c 	sts	0x0C6A, r24	; 0x800c6a <g_out_liters_counter>
	if (g_out_liters_counter >= g_out_liters )
    300a:	20 91 6a 0c 	lds	r18, 0x0C6A	; 0x800c6a <g_out_liters_counter>
    300e:	30 91 6b 0c 	lds	r19, 0x0C6B	; 0x800c6b <g_out_liters_counter+0x1>
    3012:	80 91 66 0c 	lds	r24, 0x0C66	; 0x800c66 <g_out_liters>
    3016:	90 91 67 0c 	lds	r25, 0x0C67	; 0x800c67 <g_out_liters+0x1>
    301a:	28 17       	cp	r18, r24
    301c:	39 07       	cpc	r19, r25
    301e:	50 f0       	brcs	.+20     	; 0x3034 <Tank_out_callback+0x3c>
	{
		// release the semaphore
		xSemaphoreGive(outing_Semaphore );
    3020:	20 e0       	ldi	r18, 0x00	; 0
    3022:	40 e0       	ldi	r20, 0x00	; 0
    3024:	50 e0       	ldi	r21, 0x00	; 0
    3026:	60 e0       	ldi	r22, 0x00	; 0
    3028:	70 e0       	ldi	r23, 0x00	; 0
    302a:	80 91 95 0c 	lds	r24, 0x0C95	; 0x800c95 <outing_Semaphore>
    302e:	90 91 96 0c 	lds	r25, 0x0C96	; 0x800c96 <outing_Semaphore+0x1>
    3032:	5a cc       	rjmp	.-1868   	; 0x28e8 <xQueueGenericSend>
    3034:	08 95       	ret

00003036 <Tank_feed_callback>:


static void Tank_feed_callback (void)
{
	
	g_feeding_liters_counter ++ ;
    3036:	80 91 6c 0c 	lds	r24, 0x0C6C	; 0x800c6c <g_feeding_liters_counter>
    303a:	90 91 6d 0c 	lds	r25, 0x0C6D	; 0x800c6d <g_feeding_liters_counter+0x1>
    303e:	01 96       	adiw	r24, 0x01	; 1
    3040:	90 93 6d 0c 	sts	0x0C6D, r25	; 0x800c6d <g_feeding_liters_counter+0x1>
    3044:	80 93 6c 0c 	sts	0x0C6C, r24	; 0x800c6c <g_feeding_liters_counter>
	// keep monitoring the amount of water .
	if (g_feeding_liters_counter >= g_feed_liters )
    3048:	20 91 6c 0c 	lds	r18, 0x0C6C	; 0x800c6c <g_feeding_liters_counter>
    304c:	30 91 6d 0c 	lds	r19, 0x0C6D	; 0x800c6d <g_feeding_liters_counter+0x1>
    3050:	80 91 68 0c 	lds	r24, 0x0C68	; 0x800c68 <g_feed_liters>
    3054:	90 91 69 0c 	lds	r25, 0x0C69	; 0x800c69 <g_feed_liters+0x1>
    3058:	28 17       	cp	r18, r24
    305a:	39 07       	cpc	r19, r25
    305c:	50 f0       	brcs	.+20     	; 0x3072 <Tank_feed_callback+0x3c>
	{
		// release the semaphore
		xSemaphoreGive(Feeding_Semaphore);
    305e:	20 e0       	ldi	r18, 0x00	; 0
    3060:	40 e0       	ldi	r20, 0x00	; 0
    3062:	50 e0       	ldi	r21, 0x00	; 0
    3064:	60 e0       	ldi	r22, 0x00	; 0
    3066:	70 e0       	ldi	r23, 0x00	; 0
    3068:	80 91 d5 0c 	lds	r24, 0x0CD5	; 0x800cd5 <Feeding_Semaphore>
    306c:	90 91 d6 0c 	lds	r25, 0x0CD6	; 0x800cd6 <Feeding_Semaphore+0x1>
    3070:	3b cc       	rjmp	.-1930   	; 0x28e8 <xQueueGenericSend>
    3072:	08 95       	ret

00003074 <Tank_operation_init>:




void Tank_operation_init(void)
{
    3074:	0f 93       	push	r16
	Flow_rate_init( Tank_feed_callback , Tank_out_callback);	
    3076:	6c ef       	ldi	r22, 0xFC	; 252
    3078:	77 e1       	ldi	r23, 0x17	; 23
    307a:	8b e1       	ldi	r24, 0x1B	; 27
    307c:	98 e1       	ldi	r25, 0x18	; 24
    307e:	0e 94 bb 00 	call	0x176	; 0x176 <Flow_rate_init>
	Feeding_Semaphore = xSemaphoreCreateBinaryStatic( &feeding_SemaphoreBuffer );
    3082:	03 e0       	ldi	r16, 0x03	; 3
    3084:	26 eb       	ldi	r18, 0xB6	; 182
    3086:	3c e0       	ldi	r19, 0x0C	; 12
    3088:	40 e0       	ldi	r20, 0x00	; 0
    308a:	50 e0       	ldi	r21, 0x00	; 0
    308c:	60 e0       	ldi	r22, 0x00	; 0
    308e:	81 e0       	ldi	r24, 0x01	; 1
    3090:	16 dc       	rcall	.-2004   	; 0x28be <xQueueGenericCreateStatic>
    3092:	90 93 d6 0c 	sts	0x0CD6, r25	; 0x800cd6 <Feeding_Semaphore+0x1>
    3096:	80 93 d5 0c 	sts	0x0CD5, r24	; 0x800cd5 <Feeding_Semaphore>
	outing_Semaphore = xSemaphoreCreateBinaryStatic( &outing_SemaphoreBuffer );
    309a:	27 e9       	ldi	r18, 0x97	; 151
    309c:	3c e0       	ldi	r19, 0x0C	; 12
    309e:	40 e0       	ldi	r20, 0x00	; 0
    30a0:	50 e0       	ldi	r21, 0x00	; 0
    30a2:	60 e0       	ldi	r22, 0x00	; 0
    30a4:	81 e0       	ldi	r24, 0x01	; 1
    30a6:	0b dc       	rcall	.-2026   	; 0x28be <xQueueGenericCreateStatic>
    30a8:	90 93 96 0c 	sts	0x0C96, r25	; 0x800c96 <outing_Semaphore+0x1>
    30ac:	80 93 95 0c 	sts	0x0C95, r24	; 0x800c95 <outing_Semaphore>
}
    30b0:	0f 91       	pop	r16
    30b2:	08 95       	ret

000030b4 <Temp_main_err_init>:
*Parameters @ Nothing
*return Nothing 
*/
void (*over_temp_callback)(void) = NULL;
void Temp_main_err_init( void (*callback_over_temp) (void) ){
	over_temp_callback = callback_over_temp;
    30b4:	90 93 6f 0c 	sts	0x0C6F, r25	; 0x800c6f <over_temp_callback+0x1>
    30b8:	80 93 6e 0c 	sts	0x0C6E, r24	; 0x800c6e <over_temp_callback>
    30bc:	08 95       	ret

000030be <System_init>:


gSystemError System_init(void){
	
	gSystemError res = E_OK;
	DIO_init();
    30be:	0e 94 91 0a 	call	0x1522	; 0x1522 <DIO_init>
	millis_init();	
    30c2:	18 d0       	rcall	.+48     	; 0x30f4 <millis_init>
	Service_error_init();
    30c4:	0e 94 1b 0a 	call	0x1436	; 0x1436 <Service_error_init>
	Service_init();
	RTE_init();
    30c8:	94 df       	rcall	.-216    	; 0x2ff2 <Service_init>
    30ca:	32 d9       	rcall	.-3484   	; 0x2330 <RTE_init>
	//App_init();
	return res;

    30cc:	80 e0       	ldi	r24, 0x00	; 0
    30ce:	08 95       	ret

000030d0 <crc16_update>:

uint16_t crc16_update(uint16_t crc, uint8_t a)
{
  int i;

  crc ^= a;
    30d0:	86 27       	eor	r24, r22
    30d2:	28 e0       	ldi	r18, 0x08	; 8
    30d4:	30 e0       	ldi	r19, 0x00	; 0
  for (i = 0; i < 8; ++i)
  {
    if (crc & 1)
    30d6:	80 ff       	sbrs	r24, 0
    30d8:	07 c0       	rjmp	.+14     	; 0x30e8 <crc16_update+0x18>
      crc = (crc >> 1) ^ 0xA001;
    30da:	96 95       	lsr	r25
    30dc:	87 95       	ror	r24
    30de:	41 e0       	ldi	r20, 0x01	; 1
    30e0:	84 27       	eor	r24, r20
    30e2:	40 ea       	ldi	r20, 0xA0	; 160
    30e4:	94 27       	eor	r25, r20
    30e6:	02 c0       	rjmp	.+4      	; 0x30ec <crc16_update+0x1c>
    else
      crc = (crc >> 1);
    30e8:	96 95       	lsr	r25
    30ea:	87 95       	ror	r24
    30ec:	21 50       	subi	r18, 0x01	; 1
    30ee:	31 09       	sbc	r19, r1
uint16_t crc16_update(uint16_t crc, uint8_t a)
{
  int i;

  crc ^= a;
  for (i = 0; i < 8; ++i)
    30f0:	91 f7       	brne	.-28     	; 0x30d6 <crc16_update+0x6>
    else
      crc = (crc >> 1);
  }

  return crc;
}
    30f2:	08 95       	ret

000030f4 <millis_init>:

//init the timer on ctc mode to calvulate millis
void millis_init()
{
	//CTC mode
	TIMER2_CONGFIG_A = 0x02;
    30f4:	82 e0       	ldi	r24, 0x02	; 2
    30f6:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
	// Clock/64
	TIMER2_CONGFIG_B = 0x04;
    30fa:	84 e0       	ldi	r24, 0x04	; 4
    30fc:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7000b1>
    // Load into the output compare
    TIMER2_COMPARE = CTC_MATCH_OVERFLOW;
    3100:	8a ef       	ldi	r24, 0xFA	; 250
    3102:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7000b3>
    // Enable the compare match interrupt
    SET_BIT(TIMER2_INTERUPT, TIMER2_COMPARE_INT);
    3106:	e0 e7       	ldi	r30, 0x70	; 112
    3108:	f0 e0       	ldi	r31, 0x00	; 0
    310a:	80 81       	ld	r24, Z
    310c:	82 60       	ori	r24, 0x02	; 2
    310e:	80 83       	st	Z, r24
    3110:	08 95       	ret

00003112 <Get_millis>:
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    3112:	f8 94       	cli
    unsigned long millis_return;

    // Ensure this cannot be disrupted
    ATOMIC_BLOCK(ATOMIC_FORCEON) {
    	// copy the ISR counter
        millis_return = timer1_millis;
    3114:	60 91 d7 0c 	lds	r22, 0x0CD7	; 0x800cd7 <timer1_millis>
    3118:	70 91 d8 0c 	lds	r23, 0x0CD8	; 0x800cd8 <timer1_millis+0x1>
    311c:	80 91 d9 0c 	lds	r24, 0x0CD9	; 0x800cd9 <timer1_millis+0x2>
    3120:	90 91 da 0c 	lds	r25, 0x0CDA	; 0x800cda <timer1_millis+0x3>
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
    3124:	78 94       	sei
    }

    return millis_return;
}//Get_millis
    3126:	08 95       	ret

00003128 <__vector_13>:



ISR (TIMER2_COMPA_vect)
{
    3128:	1f 92       	push	r1
    312a:	0f 92       	push	r0
    312c:	0f b6       	in	r0, 0x3f	; 63
    312e:	0f 92       	push	r0
    3130:	11 24       	eor	r1, r1
    3132:	8f 93       	push	r24
    3134:	9f 93       	push	r25
    3136:	af 93       	push	r26
    3138:	bf 93       	push	r27
	//MILLI SEC
    timer1_millis++;
    313a:	80 91 d7 0c 	lds	r24, 0x0CD7	; 0x800cd7 <timer1_millis>
    313e:	90 91 d8 0c 	lds	r25, 0x0CD8	; 0x800cd8 <timer1_millis+0x1>
    3142:	a0 91 d9 0c 	lds	r26, 0x0CD9	; 0x800cd9 <timer1_millis+0x2>
    3146:	b0 91 da 0c 	lds	r27, 0x0CDA	; 0x800cda <timer1_millis+0x3>
    314a:	01 96       	adiw	r24, 0x01	; 1
    314c:	a1 1d       	adc	r26, r1
    314e:	b1 1d       	adc	r27, r1
    3150:	80 93 d7 0c 	sts	0x0CD7, r24	; 0x800cd7 <timer1_millis>
    3154:	90 93 d8 0c 	sts	0x0CD8, r25	; 0x800cd8 <timer1_millis+0x1>
    3158:	a0 93 d9 0c 	sts	0x0CD9, r26	; 0x800cd9 <timer1_millis+0x2>
    315c:	b0 93 da 0c 	sts	0x0CDA, r27	; 0x800cda <timer1_millis+0x3>
}//ISR
    3160:	bf 91       	pop	r27
    3162:	af 91       	pop	r26
    3164:	9f 91       	pop	r25
    3166:	8f 91       	pop	r24
    3168:	0f 90       	pop	r0
    316a:	0f be       	out	0x3f, r0	; 63
    316c:	0f 90       	pop	r0
    316e:	1f 90       	pop	r1
    3170:	18 95       	reti

00003172 <__subsf3>:
    3172:	50 58       	subi	r21, 0x80	; 128

00003174 <__addsf3>:
    3174:	bb 27       	eor	r27, r27
    3176:	aa 27       	eor	r26, r26
    3178:	0e d0       	rcall	.+28     	; 0x3196 <__addsf3x>
    317a:	70 c1       	rjmp	.+736    	; 0x345c <__fp_round>
    317c:	61 d1       	rcall	.+706    	; 0x3440 <__fp_pscA>
    317e:	30 f0       	brcs	.+12     	; 0x318c <__addsf3+0x18>
    3180:	66 d1       	rcall	.+716    	; 0x344e <__fp_pscB>
    3182:	20 f0       	brcs	.+8      	; 0x318c <__addsf3+0x18>
    3184:	31 f4       	brne	.+12     	; 0x3192 <__addsf3+0x1e>
    3186:	9f 3f       	cpi	r25, 0xFF	; 255
    3188:	11 f4       	brne	.+4      	; 0x318e <__addsf3+0x1a>
    318a:	1e f4       	brtc	.+6      	; 0x3192 <__addsf3+0x1e>
    318c:	56 c1       	rjmp	.+684    	; 0x343a <__fp_nan>
    318e:	0e f4       	brtc	.+2      	; 0x3192 <__addsf3+0x1e>
    3190:	e0 95       	com	r30
    3192:	e7 fb       	bst	r30, 7
    3194:	4c c1       	rjmp	.+664    	; 0x342e <__fp_inf>

00003196 <__addsf3x>:
    3196:	e9 2f       	mov	r30, r25
    3198:	72 d1       	rcall	.+740    	; 0x347e <__fp_split3>
    319a:	80 f3       	brcs	.-32     	; 0x317c <__addsf3+0x8>
    319c:	ba 17       	cp	r27, r26
    319e:	62 07       	cpc	r22, r18
    31a0:	73 07       	cpc	r23, r19
    31a2:	84 07       	cpc	r24, r20
    31a4:	95 07       	cpc	r25, r21
    31a6:	18 f0       	brcs	.+6      	; 0x31ae <__addsf3x+0x18>
    31a8:	71 f4       	brne	.+28     	; 0x31c6 <__addsf3x+0x30>
    31aa:	9e f5       	brtc	.+102    	; 0x3212 <__addsf3x+0x7c>
    31ac:	8a c1       	rjmp	.+788    	; 0x34c2 <__fp_zero>
    31ae:	0e f4       	brtc	.+2      	; 0x31b2 <__addsf3x+0x1c>
    31b0:	e0 95       	com	r30
    31b2:	0b 2e       	mov	r0, r27
    31b4:	ba 2f       	mov	r27, r26
    31b6:	a0 2d       	mov	r26, r0
    31b8:	0b 01       	movw	r0, r22
    31ba:	b9 01       	movw	r22, r18
    31bc:	90 01       	movw	r18, r0
    31be:	0c 01       	movw	r0, r24
    31c0:	ca 01       	movw	r24, r20
    31c2:	a0 01       	movw	r20, r0
    31c4:	11 24       	eor	r1, r1
    31c6:	ff 27       	eor	r31, r31
    31c8:	59 1b       	sub	r21, r25
    31ca:	99 f0       	breq	.+38     	; 0x31f2 <__addsf3x+0x5c>
    31cc:	59 3f       	cpi	r21, 0xF9	; 249
    31ce:	50 f4       	brcc	.+20     	; 0x31e4 <__addsf3x+0x4e>
    31d0:	50 3e       	cpi	r21, 0xE0	; 224
    31d2:	68 f1       	brcs	.+90     	; 0x322e <__addsf3x+0x98>
    31d4:	1a 16       	cp	r1, r26
    31d6:	f0 40       	sbci	r31, 0x00	; 0
    31d8:	a2 2f       	mov	r26, r18
    31da:	23 2f       	mov	r18, r19
    31dc:	34 2f       	mov	r19, r20
    31de:	44 27       	eor	r20, r20
    31e0:	58 5f       	subi	r21, 0xF8	; 248
    31e2:	f3 cf       	rjmp	.-26     	; 0x31ca <__addsf3x+0x34>
    31e4:	46 95       	lsr	r20
    31e6:	37 95       	ror	r19
    31e8:	27 95       	ror	r18
    31ea:	a7 95       	ror	r26
    31ec:	f0 40       	sbci	r31, 0x00	; 0
    31ee:	53 95       	inc	r21
    31f0:	c9 f7       	brne	.-14     	; 0x31e4 <__addsf3x+0x4e>
    31f2:	7e f4       	brtc	.+30     	; 0x3212 <__addsf3x+0x7c>
    31f4:	1f 16       	cp	r1, r31
    31f6:	ba 0b       	sbc	r27, r26
    31f8:	62 0b       	sbc	r22, r18
    31fa:	73 0b       	sbc	r23, r19
    31fc:	84 0b       	sbc	r24, r20
    31fe:	ba f0       	brmi	.+46     	; 0x322e <__addsf3x+0x98>
    3200:	91 50       	subi	r25, 0x01	; 1
    3202:	a1 f0       	breq	.+40     	; 0x322c <__addsf3x+0x96>
    3204:	ff 0f       	add	r31, r31
    3206:	bb 1f       	adc	r27, r27
    3208:	66 1f       	adc	r22, r22
    320a:	77 1f       	adc	r23, r23
    320c:	88 1f       	adc	r24, r24
    320e:	c2 f7       	brpl	.-16     	; 0x3200 <__addsf3x+0x6a>
    3210:	0e c0       	rjmp	.+28     	; 0x322e <__addsf3x+0x98>
    3212:	ba 0f       	add	r27, r26
    3214:	62 1f       	adc	r22, r18
    3216:	73 1f       	adc	r23, r19
    3218:	84 1f       	adc	r24, r20
    321a:	48 f4       	brcc	.+18     	; 0x322e <__addsf3x+0x98>
    321c:	87 95       	ror	r24
    321e:	77 95       	ror	r23
    3220:	67 95       	ror	r22
    3222:	b7 95       	ror	r27
    3224:	f7 95       	ror	r31
    3226:	9e 3f       	cpi	r25, 0xFE	; 254
    3228:	08 f0       	brcs	.+2      	; 0x322c <__addsf3x+0x96>
    322a:	b3 cf       	rjmp	.-154    	; 0x3192 <__addsf3+0x1e>
    322c:	93 95       	inc	r25
    322e:	88 0f       	add	r24, r24
    3230:	08 f0       	brcs	.+2      	; 0x3234 <__addsf3x+0x9e>
    3232:	99 27       	eor	r25, r25
    3234:	ee 0f       	add	r30, r30
    3236:	97 95       	ror	r25
    3238:	87 95       	ror	r24
    323a:	08 95       	ret

0000323c <__cmpsf2>:
    323c:	d4 d0       	rcall	.+424    	; 0x33e6 <__fp_cmp>
    323e:	08 f4       	brcc	.+2      	; 0x3242 <__cmpsf2+0x6>
    3240:	81 e0       	ldi	r24, 0x01	; 1
    3242:	08 95       	ret

00003244 <__divsf3>:
    3244:	0c d0       	rcall	.+24     	; 0x325e <__divsf3x>
    3246:	0a c1       	rjmp	.+532    	; 0x345c <__fp_round>
    3248:	02 d1       	rcall	.+516    	; 0x344e <__fp_pscB>
    324a:	40 f0       	brcs	.+16     	; 0x325c <__divsf3+0x18>
    324c:	f9 d0       	rcall	.+498    	; 0x3440 <__fp_pscA>
    324e:	30 f0       	brcs	.+12     	; 0x325c <__divsf3+0x18>
    3250:	21 f4       	brne	.+8      	; 0x325a <__divsf3+0x16>
    3252:	5f 3f       	cpi	r21, 0xFF	; 255
    3254:	19 f0       	breq	.+6      	; 0x325c <__divsf3+0x18>
    3256:	eb c0       	rjmp	.+470    	; 0x342e <__fp_inf>
    3258:	51 11       	cpse	r21, r1
    325a:	34 c1       	rjmp	.+616    	; 0x34c4 <__fp_szero>
    325c:	ee c0       	rjmp	.+476    	; 0x343a <__fp_nan>

0000325e <__divsf3x>:
    325e:	0f d1       	rcall	.+542    	; 0x347e <__fp_split3>
    3260:	98 f3       	brcs	.-26     	; 0x3248 <__divsf3+0x4>

00003262 <__divsf3_pse>:
    3262:	99 23       	and	r25, r25
    3264:	c9 f3       	breq	.-14     	; 0x3258 <__divsf3+0x14>
    3266:	55 23       	and	r21, r21
    3268:	b1 f3       	breq	.-20     	; 0x3256 <__divsf3+0x12>
    326a:	95 1b       	sub	r25, r21
    326c:	55 0b       	sbc	r21, r21
    326e:	bb 27       	eor	r27, r27
    3270:	aa 27       	eor	r26, r26
    3272:	62 17       	cp	r22, r18
    3274:	73 07       	cpc	r23, r19
    3276:	84 07       	cpc	r24, r20
    3278:	38 f0       	brcs	.+14     	; 0x3288 <__divsf3_pse+0x26>
    327a:	9f 5f       	subi	r25, 0xFF	; 255
    327c:	5f 4f       	sbci	r21, 0xFF	; 255
    327e:	22 0f       	add	r18, r18
    3280:	33 1f       	adc	r19, r19
    3282:	44 1f       	adc	r20, r20
    3284:	aa 1f       	adc	r26, r26
    3286:	a9 f3       	breq	.-22     	; 0x3272 <__divsf3_pse+0x10>
    3288:	33 d0       	rcall	.+102    	; 0x32f0 <__divsf3_pse+0x8e>
    328a:	0e 2e       	mov	r0, r30
    328c:	3a f0       	brmi	.+14     	; 0x329c <__divsf3_pse+0x3a>
    328e:	e0 e8       	ldi	r30, 0x80	; 128
    3290:	30 d0       	rcall	.+96     	; 0x32f2 <__divsf3_pse+0x90>
    3292:	91 50       	subi	r25, 0x01	; 1
    3294:	50 40       	sbci	r21, 0x00	; 0
    3296:	e6 95       	lsr	r30
    3298:	00 1c       	adc	r0, r0
    329a:	ca f7       	brpl	.-14     	; 0x328e <__divsf3_pse+0x2c>
    329c:	29 d0       	rcall	.+82     	; 0x32f0 <__divsf3_pse+0x8e>
    329e:	fe 2f       	mov	r31, r30
    32a0:	27 d0       	rcall	.+78     	; 0x32f0 <__divsf3_pse+0x8e>
    32a2:	66 0f       	add	r22, r22
    32a4:	77 1f       	adc	r23, r23
    32a6:	88 1f       	adc	r24, r24
    32a8:	bb 1f       	adc	r27, r27
    32aa:	26 17       	cp	r18, r22
    32ac:	37 07       	cpc	r19, r23
    32ae:	48 07       	cpc	r20, r24
    32b0:	ab 07       	cpc	r26, r27
    32b2:	b0 e8       	ldi	r27, 0x80	; 128
    32b4:	09 f0       	breq	.+2      	; 0x32b8 <__divsf3_pse+0x56>
    32b6:	bb 0b       	sbc	r27, r27
    32b8:	80 2d       	mov	r24, r0
    32ba:	bf 01       	movw	r22, r30
    32bc:	ff 27       	eor	r31, r31
    32be:	93 58       	subi	r25, 0x83	; 131
    32c0:	5f 4f       	sbci	r21, 0xFF	; 255
    32c2:	2a f0       	brmi	.+10     	; 0x32ce <__divsf3_pse+0x6c>
    32c4:	9e 3f       	cpi	r25, 0xFE	; 254
    32c6:	51 05       	cpc	r21, r1
    32c8:	68 f0       	brcs	.+26     	; 0x32e4 <__divsf3_pse+0x82>
    32ca:	b1 c0       	rjmp	.+354    	; 0x342e <__fp_inf>
    32cc:	fb c0       	rjmp	.+502    	; 0x34c4 <__fp_szero>
    32ce:	5f 3f       	cpi	r21, 0xFF	; 255
    32d0:	ec f3       	brlt	.-6      	; 0x32cc <__divsf3_pse+0x6a>
    32d2:	98 3e       	cpi	r25, 0xE8	; 232
    32d4:	dc f3       	brlt	.-10     	; 0x32cc <__divsf3_pse+0x6a>
    32d6:	86 95       	lsr	r24
    32d8:	77 95       	ror	r23
    32da:	67 95       	ror	r22
    32dc:	b7 95       	ror	r27
    32de:	f7 95       	ror	r31
    32e0:	9f 5f       	subi	r25, 0xFF	; 255
    32e2:	c9 f7       	brne	.-14     	; 0x32d6 <__divsf3_pse+0x74>
    32e4:	88 0f       	add	r24, r24
    32e6:	91 1d       	adc	r25, r1
    32e8:	96 95       	lsr	r25
    32ea:	87 95       	ror	r24
    32ec:	97 f9       	bld	r25, 7
    32ee:	08 95       	ret
    32f0:	e1 e0       	ldi	r30, 0x01	; 1
    32f2:	66 0f       	add	r22, r22
    32f4:	77 1f       	adc	r23, r23
    32f6:	88 1f       	adc	r24, r24
    32f8:	bb 1f       	adc	r27, r27
    32fa:	62 17       	cp	r22, r18
    32fc:	73 07       	cpc	r23, r19
    32fe:	84 07       	cpc	r24, r20
    3300:	ba 07       	cpc	r27, r26
    3302:	20 f0       	brcs	.+8      	; 0x330c <__divsf3_pse+0xaa>
    3304:	62 1b       	sub	r22, r18
    3306:	73 0b       	sbc	r23, r19
    3308:	84 0b       	sbc	r24, r20
    330a:	ba 0b       	sbc	r27, r26
    330c:	ee 1f       	adc	r30, r30
    330e:	88 f7       	brcc	.-30     	; 0x32f2 <__divsf3_pse+0x90>
    3310:	e0 95       	com	r30
    3312:	08 95       	ret

00003314 <__fixunssfsi>:
    3314:	bc d0       	rcall	.+376    	; 0x348e <__fp_splitA>
    3316:	88 f0       	brcs	.+34     	; 0x333a <__fixunssfsi+0x26>
    3318:	9f 57       	subi	r25, 0x7F	; 127
    331a:	90 f0       	brcs	.+36     	; 0x3340 <__fixunssfsi+0x2c>
    331c:	b9 2f       	mov	r27, r25
    331e:	99 27       	eor	r25, r25
    3320:	b7 51       	subi	r27, 0x17	; 23
    3322:	a0 f0       	brcs	.+40     	; 0x334c <__fixunssfsi+0x38>
    3324:	d1 f0       	breq	.+52     	; 0x335a <__fixunssfsi+0x46>
    3326:	66 0f       	add	r22, r22
    3328:	77 1f       	adc	r23, r23
    332a:	88 1f       	adc	r24, r24
    332c:	99 1f       	adc	r25, r25
    332e:	1a f0       	brmi	.+6      	; 0x3336 <__fixunssfsi+0x22>
    3330:	ba 95       	dec	r27
    3332:	c9 f7       	brne	.-14     	; 0x3326 <__fixunssfsi+0x12>
    3334:	12 c0       	rjmp	.+36     	; 0x335a <__fixunssfsi+0x46>
    3336:	b1 30       	cpi	r27, 0x01	; 1
    3338:	81 f0       	breq	.+32     	; 0x335a <__fixunssfsi+0x46>
    333a:	c3 d0       	rcall	.+390    	; 0x34c2 <__fp_zero>
    333c:	b1 e0       	ldi	r27, 0x01	; 1
    333e:	08 95       	ret
    3340:	c0 c0       	rjmp	.+384    	; 0x34c2 <__fp_zero>
    3342:	67 2f       	mov	r22, r23
    3344:	78 2f       	mov	r23, r24
    3346:	88 27       	eor	r24, r24
    3348:	b8 5f       	subi	r27, 0xF8	; 248
    334a:	39 f0       	breq	.+14     	; 0x335a <__fixunssfsi+0x46>
    334c:	b9 3f       	cpi	r27, 0xF9	; 249
    334e:	cc f3       	brlt	.-14     	; 0x3342 <__fixunssfsi+0x2e>
    3350:	86 95       	lsr	r24
    3352:	77 95       	ror	r23
    3354:	67 95       	ror	r22
    3356:	b3 95       	inc	r27
    3358:	d9 f7       	brne	.-10     	; 0x3350 <__fixunssfsi+0x3c>
    335a:	3e f4       	brtc	.+14     	; 0x336a <__fixunssfsi+0x56>
    335c:	90 95       	com	r25
    335e:	80 95       	com	r24
    3360:	70 95       	com	r23
    3362:	61 95       	neg	r22
    3364:	7f 4f       	sbci	r23, 0xFF	; 255
    3366:	8f 4f       	sbci	r24, 0xFF	; 255
    3368:	9f 4f       	sbci	r25, 0xFF	; 255
    336a:	08 95       	ret

0000336c <__floatunsisf>:
    336c:	e8 94       	clt
    336e:	09 c0       	rjmp	.+18     	; 0x3382 <__floatsisf+0x12>

00003370 <__floatsisf>:
    3370:	97 fb       	bst	r25, 7
    3372:	3e f4       	brtc	.+14     	; 0x3382 <__floatsisf+0x12>
    3374:	90 95       	com	r25
    3376:	80 95       	com	r24
    3378:	70 95       	com	r23
    337a:	61 95       	neg	r22
    337c:	7f 4f       	sbci	r23, 0xFF	; 255
    337e:	8f 4f       	sbci	r24, 0xFF	; 255
    3380:	9f 4f       	sbci	r25, 0xFF	; 255
    3382:	99 23       	and	r25, r25
    3384:	a9 f0       	breq	.+42     	; 0x33b0 <__floatsisf+0x40>
    3386:	f9 2f       	mov	r31, r25
    3388:	96 e9       	ldi	r25, 0x96	; 150
    338a:	bb 27       	eor	r27, r27
    338c:	93 95       	inc	r25
    338e:	f6 95       	lsr	r31
    3390:	87 95       	ror	r24
    3392:	77 95       	ror	r23
    3394:	67 95       	ror	r22
    3396:	b7 95       	ror	r27
    3398:	f1 11       	cpse	r31, r1
    339a:	f8 cf       	rjmp	.-16     	; 0x338c <__floatsisf+0x1c>
    339c:	fa f4       	brpl	.+62     	; 0x33dc <__floatsisf+0x6c>
    339e:	bb 0f       	add	r27, r27
    33a0:	11 f4       	brne	.+4      	; 0x33a6 <__floatsisf+0x36>
    33a2:	60 ff       	sbrs	r22, 0
    33a4:	1b c0       	rjmp	.+54     	; 0x33dc <__floatsisf+0x6c>
    33a6:	6f 5f       	subi	r22, 0xFF	; 255
    33a8:	7f 4f       	sbci	r23, 0xFF	; 255
    33aa:	8f 4f       	sbci	r24, 0xFF	; 255
    33ac:	9f 4f       	sbci	r25, 0xFF	; 255
    33ae:	16 c0       	rjmp	.+44     	; 0x33dc <__floatsisf+0x6c>
    33b0:	88 23       	and	r24, r24
    33b2:	11 f0       	breq	.+4      	; 0x33b8 <__floatsisf+0x48>
    33b4:	96 e9       	ldi	r25, 0x96	; 150
    33b6:	11 c0       	rjmp	.+34     	; 0x33da <__floatsisf+0x6a>
    33b8:	77 23       	and	r23, r23
    33ba:	21 f0       	breq	.+8      	; 0x33c4 <__floatsisf+0x54>
    33bc:	9e e8       	ldi	r25, 0x8E	; 142
    33be:	87 2f       	mov	r24, r23
    33c0:	76 2f       	mov	r23, r22
    33c2:	05 c0       	rjmp	.+10     	; 0x33ce <__floatsisf+0x5e>
    33c4:	66 23       	and	r22, r22
    33c6:	71 f0       	breq	.+28     	; 0x33e4 <__floatsisf+0x74>
    33c8:	96 e8       	ldi	r25, 0x86	; 134
    33ca:	86 2f       	mov	r24, r22
    33cc:	70 e0       	ldi	r23, 0x00	; 0
    33ce:	60 e0       	ldi	r22, 0x00	; 0
    33d0:	2a f0       	brmi	.+10     	; 0x33dc <__floatsisf+0x6c>
    33d2:	9a 95       	dec	r25
    33d4:	66 0f       	add	r22, r22
    33d6:	77 1f       	adc	r23, r23
    33d8:	88 1f       	adc	r24, r24
    33da:	da f7       	brpl	.-10     	; 0x33d2 <__floatsisf+0x62>
    33dc:	88 0f       	add	r24, r24
    33de:	96 95       	lsr	r25
    33e0:	87 95       	ror	r24
    33e2:	97 f9       	bld	r25, 7
    33e4:	08 95       	ret

000033e6 <__fp_cmp>:
    33e6:	99 0f       	add	r25, r25
    33e8:	00 08       	sbc	r0, r0
    33ea:	55 0f       	add	r21, r21
    33ec:	aa 0b       	sbc	r26, r26
    33ee:	e0 e8       	ldi	r30, 0x80	; 128
    33f0:	fe ef       	ldi	r31, 0xFE	; 254
    33f2:	16 16       	cp	r1, r22
    33f4:	17 06       	cpc	r1, r23
    33f6:	e8 07       	cpc	r30, r24
    33f8:	f9 07       	cpc	r31, r25
    33fa:	c0 f0       	brcs	.+48     	; 0x342c <__fp_cmp+0x46>
    33fc:	12 16       	cp	r1, r18
    33fe:	13 06       	cpc	r1, r19
    3400:	e4 07       	cpc	r30, r20
    3402:	f5 07       	cpc	r31, r21
    3404:	98 f0       	brcs	.+38     	; 0x342c <__fp_cmp+0x46>
    3406:	62 1b       	sub	r22, r18
    3408:	73 0b       	sbc	r23, r19
    340a:	84 0b       	sbc	r24, r20
    340c:	95 0b       	sbc	r25, r21
    340e:	39 f4       	brne	.+14     	; 0x341e <__fp_cmp+0x38>
    3410:	0a 26       	eor	r0, r26
    3412:	61 f0       	breq	.+24     	; 0x342c <__fp_cmp+0x46>
    3414:	23 2b       	or	r18, r19
    3416:	24 2b       	or	r18, r20
    3418:	25 2b       	or	r18, r21
    341a:	21 f4       	brne	.+8      	; 0x3424 <__fp_cmp+0x3e>
    341c:	08 95       	ret
    341e:	0a 26       	eor	r0, r26
    3420:	09 f4       	brne	.+2      	; 0x3424 <__fp_cmp+0x3e>
    3422:	a1 40       	sbci	r26, 0x01	; 1
    3424:	a6 95       	lsr	r26
    3426:	8f ef       	ldi	r24, 0xFF	; 255
    3428:	81 1d       	adc	r24, r1
    342a:	81 1d       	adc	r24, r1
    342c:	08 95       	ret

0000342e <__fp_inf>:
    342e:	97 f9       	bld	r25, 7
    3430:	9f 67       	ori	r25, 0x7F	; 127
    3432:	80 e8       	ldi	r24, 0x80	; 128
    3434:	70 e0       	ldi	r23, 0x00	; 0
    3436:	60 e0       	ldi	r22, 0x00	; 0
    3438:	08 95       	ret

0000343a <__fp_nan>:
    343a:	9f ef       	ldi	r25, 0xFF	; 255
    343c:	80 ec       	ldi	r24, 0xC0	; 192
    343e:	08 95       	ret

00003440 <__fp_pscA>:
    3440:	00 24       	eor	r0, r0
    3442:	0a 94       	dec	r0
    3444:	16 16       	cp	r1, r22
    3446:	17 06       	cpc	r1, r23
    3448:	18 06       	cpc	r1, r24
    344a:	09 06       	cpc	r0, r25
    344c:	08 95       	ret

0000344e <__fp_pscB>:
    344e:	00 24       	eor	r0, r0
    3450:	0a 94       	dec	r0
    3452:	12 16       	cp	r1, r18
    3454:	13 06       	cpc	r1, r19
    3456:	14 06       	cpc	r1, r20
    3458:	05 06       	cpc	r0, r21
    345a:	08 95       	ret

0000345c <__fp_round>:
    345c:	09 2e       	mov	r0, r25
    345e:	03 94       	inc	r0
    3460:	00 0c       	add	r0, r0
    3462:	11 f4       	brne	.+4      	; 0x3468 <__fp_round+0xc>
    3464:	88 23       	and	r24, r24
    3466:	52 f0       	brmi	.+20     	; 0x347c <__fp_round+0x20>
    3468:	bb 0f       	add	r27, r27
    346a:	40 f4       	brcc	.+16     	; 0x347c <__fp_round+0x20>
    346c:	bf 2b       	or	r27, r31
    346e:	11 f4       	brne	.+4      	; 0x3474 <__fp_round+0x18>
    3470:	60 ff       	sbrs	r22, 0
    3472:	04 c0       	rjmp	.+8      	; 0x347c <__fp_round+0x20>
    3474:	6f 5f       	subi	r22, 0xFF	; 255
    3476:	7f 4f       	sbci	r23, 0xFF	; 255
    3478:	8f 4f       	sbci	r24, 0xFF	; 255
    347a:	9f 4f       	sbci	r25, 0xFF	; 255
    347c:	08 95       	ret

0000347e <__fp_split3>:
    347e:	57 fd       	sbrc	r21, 7
    3480:	90 58       	subi	r25, 0x80	; 128
    3482:	44 0f       	add	r20, r20
    3484:	55 1f       	adc	r21, r21
    3486:	59 f0       	breq	.+22     	; 0x349e <__fp_splitA+0x10>
    3488:	5f 3f       	cpi	r21, 0xFF	; 255
    348a:	71 f0       	breq	.+28     	; 0x34a8 <__fp_splitA+0x1a>
    348c:	47 95       	ror	r20

0000348e <__fp_splitA>:
    348e:	88 0f       	add	r24, r24
    3490:	97 fb       	bst	r25, 7
    3492:	99 1f       	adc	r25, r25
    3494:	61 f0       	breq	.+24     	; 0x34ae <__fp_splitA+0x20>
    3496:	9f 3f       	cpi	r25, 0xFF	; 255
    3498:	79 f0       	breq	.+30     	; 0x34b8 <__fp_splitA+0x2a>
    349a:	87 95       	ror	r24
    349c:	08 95       	ret
    349e:	12 16       	cp	r1, r18
    34a0:	13 06       	cpc	r1, r19
    34a2:	14 06       	cpc	r1, r20
    34a4:	55 1f       	adc	r21, r21
    34a6:	f2 cf       	rjmp	.-28     	; 0x348c <__fp_split3+0xe>
    34a8:	46 95       	lsr	r20
    34aa:	f1 df       	rcall	.-30     	; 0x348e <__fp_splitA>
    34ac:	08 c0       	rjmp	.+16     	; 0x34be <__fp_splitA+0x30>
    34ae:	16 16       	cp	r1, r22
    34b0:	17 06       	cpc	r1, r23
    34b2:	18 06       	cpc	r1, r24
    34b4:	99 1f       	adc	r25, r25
    34b6:	f1 cf       	rjmp	.-30     	; 0x349a <__fp_splitA+0xc>
    34b8:	86 95       	lsr	r24
    34ba:	71 05       	cpc	r23, r1
    34bc:	61 05       	cpc	r22, r1
    34be:	08 94       	sec
    34c0:	08 95       	ret

000034c2 <__fp_zero>:
    34c2:	e8 94       	clt

000034c4 <__fp_szero>:
    34c4:	bb 27       	eor	r27, r27
    34c6:	66 27       	eor	r22, r22
    34c8:	77 27       	eor	r23, r23
    34ca:	cb 01       	movw	r24, r22
    34cc:	97 f9       	bld	r25, 7
    34ce:	08 95       	ret

000034d0 <__gesf2>:
    34d0:	8a df       	rcall	.-236    	; 0x33e6 <__fp_cmp>
    34d2:	08 f4       	brcc	.+2      	; 0x34d6 <__gesf2+0x6>
    34d4:	8f ef       	ldi	r24, 0xFF	; 255
    34d6:	08 95       	ret

000034d8 <__mulsf3>:
    34d8:	0b d0       	rcall	.+22     	; 0x34f0 <__mulsf3x>
    34da:	c0 cf       	rjmp	.-128    	; 0x345c <__fp_round>
    34dc:	b1 df       	rcall	.-158    	; 0x3440 <__fp_pscA>
    34de:	28 f0       	brcs	.+10     	; 0x34ea <__mulsf3+0x12>
    34e0:	b6 df       	rcall	.-148    	; 0x344e <__fp_pscB>
    34e2:	18 f0       	brcs	.+6      	; 0x34ea <__mulsf3+0x12>
    34e4:	95 23       	and	r25, r21
    34e6:	09 f0       	breq	.+2      	; 0x34ea <__mulsf3+0x12>
    34e8:	a2 cf       	rjmp	.-188    	; 0x342e <__fp_inf>
    34ea:	a7 cf       	rjmp	.-178    	; 0x343a <__fp_nan>
    34ec:	11 24       	eor	r1, r1
    34ee:	ea cf       	rjmp	.-44     	; 0x34c4 <__fp_szero>

000034f0 <__mulsf3x>:
    34f0:	c6 df       	rcall	.-116    	; 0x347e <__fp_split3>
    34f2:	a0 f3       	brcs	.-24     	; 0x34dc <__mulsf3+0x4>

000034f4 <__mulsf3_pse>:
    34f4:	95 9f       	mul	r25, r21
    34f6:	d1 f3       	breq	.-12     	; 0x34ec <__mulsf3+0x14>
    34f8:	95 0f       	add	r25, r21
    34fa:	50 e0       	ldi	r21, 0x00	; 0
    34fc:	55 1f       	adc	r21, r21
    34fe:	62 9f       	mul	r22, r18
    3500:	f0 01       	movw	r30, r0
    3502:	72 9f       	mul	r23, r18
    3504:	bb 27       	eor	r27, r27
    3506:	f0 0d       	add	r31, r0
    3508:	b1 1d       	adc	r27, r1
    350a:	63 9f       	mul	r22, r19
    350c:	aa 27       	eor	r26, r26
    350e:	f0 0d       	add	r31, r0
    3510:	b1 1d       	adc	r27, r1
    3512:	aa 1f       	adc	r26, r26
    3514:	64 9f       	mul	r22, r20
    3516:	66 27       	eor	r22, r22
    3518:	b0 0d       	add	r27, r0
    351a:	a1 1d       	adc	r26, r1
    351c:	66 1f       	adc	r22, r22
    351e:	82 9f       	mul	r24, r18
    3520:	22 27       	eor	r18, r18
    3522:	b0 0d       	add	r27, r0
    3524:	a1 1d       	adc	r26, r1
    3526:	62 1f       	adc	r22, r18
    3528:	73 9f       	mul	r23, r19
    352a:	b0 0d       	add	r27, r0
    352c:	a1 1d       	adc	r26, r1
    352e:	62 1f       	adc	r22, r18
    3530:	83 9f       	mul	r24, r19
    3532:	a0 0d       	add	r26, r0
    3534:	61 1d       	adc	r22, r1
    3536:	22 1f       	adc	r18, r18
    3538:	74 9f       	mul	r23, r20
    353a:	33 27       	eor	r19, r19
    353c:	a0 0d       	add	r26, r0
    353e:	61 1d       	adc	r22, r1
    3540:	23 1f       	adc	r18, r19
    3542:	84 9f       	mul	r24, r20
    3544:	60 0d       	add	r22, r0
    3546:	21 1d       	adc	r18, r1
    3548:	82 2f       	mov	r24, r18
    354a:	76 2f       	mov	r23, r22
    354c:	6a 2f       	mov	r22, r26
    354e:	11 24       	eor	r1, r1
    3550:	9f 57       	subi	r25, 0x7F	; 127
    3552:	50 40       	sbci	r21, 0x00	; 0
    3554:	8a f0       	brmi	.+34     	; 0x3578 <__mulsf3_pse+0x84>
    3556:	e1 f0       	breq	.+56     	; 0x3590 <__mulsf3_pse+0x9c>
    3558:	88 23       	and	r24, r24
    355a:	4a f0       	brmi	.+18     	; 0x356e <__mulsf3_pse+0x7a>
    355c:	ee 0f       	add	r30, r30
    355e:	ff 1f       	adc	r31, r31
    3560:	bb 1f       	adc	r27, r27
    3562:	66 1f       	adc	r22, r22
    3564:	77 1f       	adc	r23, r23
    3566:	88 1f       	adc	r24, r24
    3568:	91 50       	subi	r25, 0x01	; 1
    356a:	50 40       	sbci	r21, 0x00	; 0
    356c:	a9 f7       	brne	.-22     	; 0x3558 <__mulsf3_pse+0x64>
    356e:	9e 3f       	cpi	r25, 0xFE	; 254
    3570:	51 05       	cpc	r21, r1
    3572:	70 f0       	brcs	.+28     	; 0x3590 <__mulsf3_pse+0x9c>
    3574:	5c cf       	rjmp	.-328    	; 0x342e <__fp_inf>
    3576:	a6 cf       	rjmp	.-180    	; 0x34c4 <__fp_szero>
    3578:	5f 3f       	cpi	r21, 0xFF	; 255
    357a:	ec f3       	brlt	.-6      	; 0x3576 <__mulsf3_pse+0x82>
    357c:	98 3e       	cpi	r25, 0xE8	; 232
    357e:	dc f3       	brlt	.-10     	; 0x3576 <__mulsf3_pse+0x82>
    3580:	86 95       	lsr	r24
    3582:	77 95       	ror	r23
    3584:	67 95       	ror	r22
    3586:	b7 95       	ror	r27
    3588:	f7 95       	ror	r31
    358a:	e7 95       	ror	r30
    358c:	9f 5f       	subi	r25, 0xFF	; 255
    358e:	c1 f7       	brne	.-16     	; 0x3580 <__mulsf3_pse+0x8c>
    3590:	fe 2b       	or	r31, r30
    3592:	88 0f       	add	r24, r24
    3594:	91 1d       	adc	r25, r1
    3596:	96 95       	lsr	r25
    3598:	87 95       	ror	r24
    359a:	97 f9       	bld	r25, 7
    359c:	08 95       	ret

0000359e <__udivmodsi4>:
    359e:	a1 e2       	ldi	r26, 0x21	; 33
    35a0:	1a 2e       	mov	r1, r26
    35a2:	aa 1b       	sub	r26, r26
    35a4:	bb 1b       	sub	r27, r27
    35a6:	fd 01       	movw	r30, r26
    35a8:	0d c0       	rjmp	.+26     	; 0x35c4 <__udivmodsi4_ep>

000035aa <__udivmodsi4_loop>:
    35aa:	aa 1f       	adc	r26, r26
    35ac:	bb 1f       	adc	r27, r27
    35ae:	ee 1f       	adc	r30, r30
    35b0:	ff 1f       	adc	r31, r31
    35b2:	a2 17       	cp	r26, r18
    35b4:	b3 07       	cpc	r27, r19
    35b6:	e4 07       	cpc	r30, r20
    35b8:	f5 07       	cpc	r31, r21
    35ba:	20 f0       	brcs	.+8      	; 0x35c4 <__udivmodsi4_ep>
    35bc:	a2 1b       	sub	r26, r18
    35be:	b3 0b       	sbc	r27, r19
    35c0:	e4 0b       	sbc	r30, r20
    35c2:	f5 0b       	sbc	r31, r21

000035c4 <__udivmodsi4_ep>:
    35c4:	66 1f       	adc	r22, r22
    35c6:	77 1f       	adc	r23, r23
    35c8:	88 1f       	adc	r24, r24
    35ca:	99 1f       	adc	r25, r25
    35cc:	1a 94       	dec	r1
    35ce:	69 f7       	brne	.-38     	; 0x35aa <__udivmodsi4_loop>
    35d0:	60 95       	com	r22
    35d2:	70 95       	com	r23
    35d4:	80 95       	com	r24
    35d6:	90 95       	com	r25
    35d8:	9b 01       	movw	r18, r22
    35da:	ac 01       	movw	r20, r24
    35dc:	bd 01       	movw	r22, r26
    35de:	cf 01       	movw	r24, r30
    35e0:	08 95       	ret

000035e2 <__umulhisi3>:
    35e2:	a2 9f       	mul	r26, r18
    35e4:	b0 01       	movw	r22, r0
    35e6:	b3 9f       	mul	r27, r19
    35e8:	c0 01       	movw	r24, r0
    35ea:	a3 9f       	mul	r26, r19
    35ec:	70 0d       	add	r23, r0
    35ee:	81 1d       	adc	r24, r1
    35f0:	11 24       	eor	r1, r1
    35f2:	91 1d       	adc	r25, r1
    35f4:	b2 9f       	mul	r27, r18
    35f6:	70 0d       	add	r23, r0
    35f8:	81 1d       	adc	r24, r1
    35fa:	11 24       	eor	r1, r1
    35fc:	91 1d       	adc	r25, r1
    35fe:	08 95       	ret

00003600 <memcpy>:
    3600:	fb 01       	movw	r30, r22
    3602:	dc 01       	movw	r26, r24
    3604:	02 c0       	rjmp	.+4      	; 0x360a <memcpy+0xa>
    3606:	01 90       	ld	r0, Z+
    3608:	0d 92       	st	X+, r0
    360a:	41 50       	subi	r20, 0x01	; 1
    360c:	50 40       	sbci	r21, 0x00	; 0
    360e:	d8 f7       	brcc	.-10     	; 0x3606 <memcpy+0x6>
    3610:	08 95       	ret

00003612 <_exit>:
    3612:	f8 94       	cli

00003614 <__stop_program>:
    3614:	ff cf       	rjmp	.-2      	; 0x3614 <__stop_program>
