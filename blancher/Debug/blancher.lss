
blancher.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000072  00800200  00003e84  00003f18  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003e84  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000cde  00800272  00800272  00003f8a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00003f8a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003fbc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000a48  00000000  00000000  00003ffc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000bdc0  00000000  00000000  00004a44  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002e64  00000000  00000000  00010804  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00009665  00000000  00000000  00013668  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001c1c  00000000  00000000  0001ccd0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00018988  00000000  00000000  0001e8ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000098bf  00000000  00000000  00037274  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000b10  00000000  00000000  00040b33  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00005eca  00000000  00000000  00041643  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	9a c0       	rjmp	.+308    	; 0x136 <__ctors_end>
       2:	00 00       	nop
       4:	b9 c0       	rjmp	.+370    	; 0x178 <__bad_interrupt>
       6:	00 00       	nop
       8:	b7 c0       	rjmp	.+366    	; 0x178 <__bad_interrupt>
       a:	00 00       	nop
       c:	b5 c0       	rjmp	.+362    	; 0x178 <__bad_interrupt>
       e:	00 00       	nop
      10:	b3 c0       	rjmp	.+358    	; 0x178 <__bad_interrupt>
      12:	00 00       	nop
      14:	b1 c0       	rjmp	.+354    	; 0x178 <__bad_interrupt>
      16:	00 00       	nop
      18:	af c0       	rjmp	.+350    	; 0x178 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	ad c0       	rjmp	.+346    	; 0x178 <__bad_interrupt>
      1e:	00 00       	nop
      20:	ab c0       	rjmp	.+342    	; 0x178 <__bad_interrupt>
      22:	00 00       	nop
      24:	a9 c0       	rjmp	.+338    	; 0x178 <__bad_interrupt>
      26:	00 00       	nop
      28:	a7 c0       	rjmp	.+334    	; 0x178 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	a5 c0       	rjmp	.+330    	; 0x178 <__bad_interrupt>
      2e:	00 00       	nop
      30:	0c 94 93 13 	jmp	0x2726	; 0x2726 <__vector_12>
      34:	0c 94 e9 1e 	jmp	0x3dd2	; 0x3dd2 <__vector_13>
      38:	9f c0       	rjmp	.+318    	; 0x178 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	9d c0       	rjmp	.+314    	; 0x178 <__bad_interrupt>
      3e:	00 00       	nop
      40:	9b c0       	rjmp	.+310    	; 0x178 <__bad_interrupt>
      42:	00 00       	nop
      44:	9a c0       	rjmp	.+308    	; 0x17a <__vector_17>
      46:	00 00       	nop
      48:	97 c0       	rjmp	.+302    	; 0x178 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	95 c0       	rjmp	.+298    	; 0x178 <__bad_interrupt>
      4e:	00 00       	nop
      50:	93 c0       	rjmp	.+294    	; 0x178 <__bad_interrupt>
      52:	00 00       	nop
      54:	91 c0       	rjmp	.+290    	; 0x178 <__bad_interrupt>
      56:	00 00       	nop
      58:	8f c0       	rjmp	.+286    	; 0x178 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	8d c0       	rjmp	.+282    	; 0x178 <__bad_interrupt>
      5e:	00 00       	nop
      60:	8b c0       	rjmp	.+278    	; 0x178 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 55 0b 	jmp	0x16aa	; 0x16aa <__vector_25>
      68:	0c 94 8e 0b 	jmp	0x171c	; 0x171c <__vector_26>
      6c:	85 c0       	rjmp	.+266    	; 0x178 <__bad_interrupt>
      6e:	00 00       	nop
      70:	83 c0       	rjmp	.+262    	; 0x178 <__bad_interrupt>
      72:	00 00       	nop
      74:	0c 94 f1 0a 	jmp	0x15e2	; 0x15e2 <__vector_29>
      78:	7f c0       	rjmp	.+254    	; 0x178 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	7d c0       	rjmp	.+250    	; 0x178 <__bad_interrupt>
      7e:	00 00       	nop
      80:	e2 c0       	rjmp	.+452    	; 0x246 <__vector_32>
      82:	00 00       	nop
      84:	79 c0       	rjmp	.+242    	; 0x178 <__bad_interrupt>
      86:	00 00       	nop
      88:	77 c0       	rjmp	.+238    	; 0x178 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	75 c0       	rjmp	.+234    	; 0x178 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 5b 0c 	jmp	0x18b6	; 0x18b6 <__vector_36>
      94:	0c 94 94 0c 	jmp	0x1928	; 0x1928 <__vector_37>
      98:	6f c0       	rjmp	.+222    	; 0x178 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	6d c0       	rjmp	.+218    	; 0x178 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	6b c0       	rjmp	.+214    	; 0x178 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	69 c0       	rjmp	.+210    	; 0x178 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	34 c1       	rjmp	.+616    	; 0x312 <__vector_42>
      aa:	00 00       	nop
      ac:	65 c0       	rjmp	.+202    	; 0x178 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	63 c0       	rjmp	.+198    	; 0x178 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	61 c0       	rjmp	.+194    	; 0x178 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	5f c0       	rjmp	.+190    	; 0x178 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	90 c1       	rjmp	.+800    	; 0x3de <__vector_47>
      be:	00 00       	nop
      c0:	5b c0       	rjmp	.+182    	; 0x178 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	59 c0       	rjmp	.+178    	; 0x178 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	57 c0       	rjmp	.+174    	; 0x178 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 6a 0d 	jmp	0x1ad4	; 0x1ad4 <__vector_51>
      d0:	0c 94 a3 0d 	jmp	0x1b46	; 0x1b46 <__vector_52>
      d4:	51 c0       	rjmp	.+162    	; 0x178 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 76 0e 	jmp	0x1cec	; 0x1cec <__vector_54>
      dc:	0c 94 af 0e 	jmp	0x1d5e	; 0x1d5e <__vector_55>
      e0:	4b c0       	rjmp	.+150    	; 0x178 <__bad_interrupt>
	...

000000e4 <prvIdleTask>:
    /* Reset the event list item to its normal value - so it can be used with
    queues and semaphores. */
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */

    return uxReturn;
}
      e4:	c1 e6       	ldi	r28, 0x61	; 97
      e6:	dc e0       	ldi	r29, 0x0C	; 12
      e8:	07 e7       	ldi	r16, 0x77	; 119
      ea:	1c e0       	ldi	r17, 0x0C	; 12
      ec:	80 91 60 0c 	lds	r24, 0x0C60	; 0x800c60 <uxDeletedTasksWaitingCleanUp>
      f0:	88 23       	and	r24, r24
      f2:	d1 f0       	breq	.+52     	; 0x128 <prvIdleTask+0x44>
      f4:	0f b6       	in	r0, 0x3f	; 63
      f6:	f8 94       	cli
      f8:	0f 92       	push	r0
      fa:	ed 81       	ldd	r30, Y+5	; 0x05
      fc:	fe 81       	ldd	r31, Y+6	; 0x06
      fe:	86 81       	ldd	r24, Z+6	; 0x06
     100:	97 81       	ldd	r25, Z+7	; 0x07
     102:	02 96       	adiw	r24, 0x02	; 2
     104:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <uxListRemove>
     108:	80 91 5f 0c 	lds	r24, 0x0C5F	; 0x800c5f <uxCurrentNumberOfTasks>
     10c:	81 50       	subi	r24, 0x01	; 1
     10e:	80 93 5f 0c 	sts	0x0C5F, r24	; 0x800c5f <uxCurrentNumberOfTasks>
     112:	80 91 60 0c 	lds	r24, 0x0C60	; 0x800c60 <uxDeletedTasksWaitingCleanUp>
     116:	81 50       	subi	r24, 0x01	; 1
     118:	80 93 60 0c 	sts	0x0C60, r24	; 0x800c60 <uxDeletedTasksWaitingCleanUp>
     11c:	0f 90       	pop	r0
     11e:	0f be       	out	0x3f, r0	; 63
     120:	80 91 60 0c 	lds	r24, 0x0C60	; 0x800c60 <uxDeletedTasksWaitingCleanUp>
     124:	81 11       	cpse	r24, r1
     126:	e6 cf       	rjmp	.-52     	; 0xf4 <prvIdleTask+0x10>
     128:	f8 01       	movw	r30, r16
     12a:	80 81       	ld	r24, Z
     12c:	82 30       	cpi	r24, 0x02	; 2
     12e:	f0 f2       	brcs	.-68     	; 0xec <prvIdleTask+0x8>
     130:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <vPortYield>
     134:	db cf       	rjmp	.-74     	; 0xec <prvIdleTask+0x8>

00000136 <__ctors_end>:
     136:	11 24       	eor	r1, r1
     138:	1f be       	out	0x3f, r1	; 63
     13a:	cf ef       	ldi	r28, 0xFF	; 255
     13c:	d1 e2       	ldi	r29, 0x21	; 33
     13e:	de bf       	out	0x3e, r29	; 62
     140:	cd bf       	out	0x3d, r28	; 61
     142:	00 e0       	ldi	r16, 0x00	; 0
     144:	0c bf       	out	0x3c, r16	; 60

00000146 <__do_copy_data>:
     146:	12 e0       	ldi	r17, 0x02	; 2
     148:	a0 e0       	ldi	r26, 0x00	; 0
     14a:	b2 e0       	ldi	r27, 0x02	; 2
     14c:	e4 e8       	ldi	r30, 0x84	; 132
     14e:	fe e3       	ldi	r31, 0x3E	; 62
     150:	00 e0       	ldi	r16, 0x00	; 0
     152:	0b bf       	out	0x3b, r16	; 59
     154:	02 c0       	rjmp	.+4      	; 0x15a <__do_copy_data+0x14>
     156:	07 90       	elpm	r0, Z+
     158:	0d 92       	st	X+, r0
     15a:	a2 37       	cpi	r26, 0x72	; 114
     15c:	b1 07       	cpc	r27, r17
     15e:	d9 f7       	brne	.-10     	; 0x156 <__do_copy_data+0x10>

00000160 <__do_clear_bss>:
     160:	2f e0       	ldi	r18, 0x0F	; 15
     162:	a2 e7       	ldi	r26, 0x72	; 114
     164:	b2 e0       	ldi	r27, 0x02	; 2
     166:	01 c0       	rjmp	.+2      	; 0x16a <.do_clear_bss_start>

00000168 <.do_clear_bss_loop>:
     168:	1d 92       	st	X+, r1

0000016a <.do_clear_bss_start>:
     16a:	a0 35       	cpi	r26, 0x50	; 80
     16c:	b2 07       	cpc	r27, r18
     16e:	e1 f7       	brne	.-8      	; 0x168 <.do_clear_bss_loop>
     170:	0e 94 b0 0a 	call	0x1560	; 0x1560 <main>
     174:	0c 94 40 1f 	jmp	0x3e80	; 0x3e80 <_exit>

00000178 <__bad_interrupt>:
     178:	43 cf       	rjmp	.-378    	; 0x0 <__vectors>

0000017a <__vector_17>:
    return 1;// Setup done ok
}//timer_init

// intruptted service routine when we have rech the number of  Ticks On Encoder
ISR(TIMER1_COMPA_vect)
{
     17a:	1f 92       	push	r1
     17c:	0f 92       	push	r0
     17e:	0f b6       	in	r0, 0x3f	; 63
     180:	0f 92       	push	r0
     182:	11 24       	eor	r1, r1
     184:	0b b6       	in	r0, 0x3b	; 59
     186:	0f 92       	push	r0
     188:	cf 92       	push	r12
     18a:	df 92       	push	r13
     18c:	ef 92       	push	r14
     18e:	ff 92       	push	r15
     190:	0f 93       	push	r16
     192:	1f 93       	push	r17
     194:	2f 93       	push	r18
     196:	3f 93       	push	r19
     198:	4f 93       	push	r20
     19a:	5f 93       	push	r21
     19c:	6f 93       	push	r22
     19e:	7f 93       	push	r23
     1a0:	8f 93       	push	r24
     1a2:	9f 93       	push	r25
     1a4:	af 93       	push	r26
     1a6:	bf 93       	push	r27
     1a8:	ef 93       	push	r30
     1aa:	ff 93       	push	r31
	// get the time now
	g_Timer1_new_time = Get_millis();
     1ac:	0e 94 de 1e 	call	0x3dbc	; 0x3dbc <Get_millis>
     1b0:	8b 01       	movw	r16, r22
     1b2:	9c 01       	movw	r18, r24
     1b4:	60 93 30 0d 	sts	0x0D30, r22	; 0x800d30 <g_Timer1_new_time>
     1b8:	70 93 31 0d 	sts	0x0D31, r23	; 0x800d31 <g_Timer1_new_time+0x1>
     1bc:	80 93 32 0d 	sts	0x0D32, r24	; 0x800d32 <g_Timer1_new_time+0x2>
     1c0:	90 93 33 0d 	sts	0x0D33, r25	; 0x800d33 <g_Timer1_new_time+0x3>
	// calculate the diff between now and last interrupt
	g_diff_time = g_Timer1_new_time - g_Timer1_old_time;
     1c4:	40 91 10 0d 	lds	r20, 0x0D10	; 0x800d10 <g_Timer1_old_time>
     1c8:	50 91 11 0d 	lds	r21, 0x0D11	; 0x800d11 <g_Timer1_old_time+0x1>
     1cc:	60 91 12 0d 	lds	r22, 0x0D12	; 0x800d12 <g_Timer1_old_time+0x2>
     1d0:	70 91 13 0d 	lds	r23, 0x0D13	; 0x800d13 <g_Timer1_old_time+0x3>
     1d4:	68 01       	movw	r12, r16
     1d6:	79 01       	movw	r14, r18
     1d8:	c4 1a       	sub	r12, r20
     1da:	d5 0a       	sbc	r13, r21
     1dc:	e6 0a       	sbc	r14, r22
     1de:	f7 0a       	sbc	r15, r23
     1e0:	c7 01       	movw	r24, r14
     1e2:	b6 01       	movw	r22, r12
     1e4:	c0 92 18 0d 	sts	0x0D18, r12	; 0x800d18 <g_diff_time>
     1e8:	d0 92 19 0d 	sts	0x0D19, r13	; 0x800d19 <g_diff_time+0x1>
     1ec:	e0 92 1a 0d 	sts	0x0D1A, r14	; 0x800d1a <g_diff_time+0x2>
     1f0:	f0 92 1b 0d 	sts	0x0D1B, r15	; 0x800d1b <g_diff_time+0x3>
	// save the to the old time to next interrupt
	g_Timer1_old_time = g_Timer1_new_time;
     1f4:	00 93 10 0d 	sts	0x0D10, r16	; 0x800d10 <g_Timer1_old_time>
     1f8:	10 93 11 0d 	sts	0x0D11, r17	; 0x800d11 <g_Timer1_old_time+0x1>
     1fc:	20 93 12 0d 	sts	0x0D12, r18	; 0x800d12 <g_Timer1_old_time+0x2>
     200:	30 93 13 0d 	sts	0x0D13, r19	; 0x800d13 <g_Timer1_old_time+0x3>
	//call back function on upper layer to get time
	g_timer1_config->isr_call_back(g_diff_time);
     204:	e0 91 2a 0d 	lds	r30, 0x0D2A	; 0x800d2a <g_timer1_config>
     208:	f0 91 2b 0d 	lds	r31, 0x0D2B	; 0x800d2b <g_timer1_config+0x1>
     20c:	02 80       	ldd	r0, Z+2	; 0x02
     20e:	f3 81       	ldd	r31, Z+3	; 0x03
     210:	e0 2d       	mov	r30, r0
     212:	19 95       	eicall
}
     214:	ff 91       	pop	r31
     216:	ef 91       	pop	r30
     218:	bf 91       	pop	r27
     21a:	af 91       	pop	r26
     21c:	9f 91       	pop	r25
     21e:	8f 91       	pop	r24
     220:	7f 91       	pop	r23
     222:	6f 91       	pop	r22
     224:	5f 91       	pop	r21
     226:	4f 91       	pop	r20
     228:	3f 91       	pop	r19
     22a:	2f 91       	pop	r18
     22c:	1f 91       	pop	r17
     22e:	0f 91       	pop	r16
     230:	ff 90       	pop	r15
     232:	ef 90       	pop	r14
     234:	df 90       	pop	r13
     236:	cf 90       	pop	r12
     238:	0f 90       	pop	r0
     23a:	0b be       	out	0x3b, r0	; 59
     23c:	0f 90       	pop	r0
     23e:	0f be       	out	0x3f, r0	; 63
     240:	0f 90       	pop	r0
     242:	1f 90       	pop	r1
     244:	18 95       	reti

00000246 <__vector_32>:
// intruptted service routine when we have rech the number of  Ticks On Encoder
ISR(TIMER3_COMPA_vect)
{
     246:	1f 92       	push	r1
     248:	0f 92       	push	r0
     24a:	0f b6       	in	r0, 0x3f	; 63
     24c:	0f 92       	push	r0
     24e:	11 24       	eor	r1, r1
     250:	0b b6       	in	r0, 0x3b	; 59
     252:	0f 92       	push	r0
     254:	cf 92       	push	r12
     256:	df 92       	push	r13
     258:	ef 92       	push	r14
     25a:	ff 92       	push	r15
     25c:	0f 93       	push	r16
     25e:	1f 93       	push	r17
     260:	2f 93       	push	r18
     262:	3f 93       	push	r19
     264:	4f 93       	push	r20
     266:	5f 93       	push	r21
     268:	6f 93       	push	r22
     26a:	7f 93       	push	r23
     26c:	8f 93       	push	r24
     26e:	9f 93       	push	r25
     270:	af 93       	push	r26
     272:	bf 93       	push	r27
     274:	ef 93       	push	r30
     276:	ff 93       	push	r31
	// get the time now
	g_Timer3_new_time = Get_millis();
     278:	0e 94 de 1e 	call	0x3dbc	; 0x3dbc <Get_millis>
     27c:	8b 01       	movw	r16, r22
     27e:	9c 01       	movw	r18, r24
     280:	60 93 26 0d 	sts	0x0D26, r22	; 0x800d26 <g_Timer3_new_time>
     284:	70 93 27 0d 	sts	0x0D27, r23	; 0x800d27 <g_Timer3_new_time+0x1>
     288:	80 93 28 0d 	sts	0x0D28, r24	; 0x800d28 <g_Timer3_new_time+0x2>
     28c:	90 93 29 0d 	sts	0x0D29, r25	; 0x800d29 <g_Timer3_new_time+0x3>
	// calculate the diff between now and last interrupt
	g_diff_time = g_Timer3_new_time - g_Timer3_old_time;
     290:	40 91 0a 0d 	lds	r20, 0x0D0A	; 0x800d0a <g_Timer3_old_time>
     294:	50 91 0b 0d 	lds	r21, 0x0D0B	; 0x800d0b <g_Timer3_old_time+0x1>
     298:	60 91 0c 0d 	lds	r22, 0x0D0C	; 0x800d0c <g_Timer3_old_time+0x2>
     29c:	70 91 0d 0d 	lds	r23, 0x0D0D	; 0x800d0d <g_Timer3_old_time+0x3>
     2a0:	68 01       	movw	r12, r16
     2a2:	79 01       	movw	r14, r18
     2a4:	c4 1a       	sub	r12, r20
     2a6:	d5 0a       	sbc	r13, r21
     2a8:	e6 0a       	sbc	r14, r22
     2aa:	f7 0a       	sbc	r15, r23
     2ac:	c7 01       	movw	r24, r14
     2ae:	b6 01       	movw	r22, r12
     2b0:	c0 92 18 0d 	sts	0x0D18, r12	; 0x800d18 <g_diff_time>
     2b4:	d0 92 19 0d 	sts	0x0D19, r13	; 0x800d19 <g_diff_time+0x1>
     2b8:	e0 92 1a 0d 	sts	0x0D1A, r14	; 0x800d1a <g_diff_time+0x2>
     2bc:	f0 92 1b 0d 	sts	0x0D1B, r15	; 0x800d1b <g_diff_time+0x3>
	// save the to the old time to next interrupt
	g_Timer3_old_time = g_Timer3_new_time;
     2c0:	00 93 0a 0d 	sts	0x0D0A, r16	; 0x800d0a <g_Timer3_old_time>
     2c4:	10 93 0b 0d 	sts	0x0D0B, r17	; 0x800d0b <g_Timer3_old_time+0x1>
     2c8:	20 93 0c 0d 	sts	0x0D0C, r18	; 0x800d0c <g_Timer3_old_time+0x2>
     2cc:	30 93 0d 0d 	sts	0x0D0D, r19	; 0x800d0d <g_Timer3_old_time+0x3>
	//call back function on upper layer to get time
	g_timer3_config->isr_call_back(g_diff_time);
     2d0:	e0 91 0e 0d 	lds	r30, 0x0D0E	; 0x800d0e <g_timer3_config>
     2d4:	f0 91 0f 0d 	lds	r31, 0x0D0F	; 0x800d0f <g_timer3_config+0x1>
     2d8:	02 80       	ldd	r0, Z+2	; 0x02
     2da:	f3 81       	ldd	r31, Z+3	; 0x03
     2dc:	e0 2d       	mov	r30, r0
     2de:	19 95       	eicall
}
     2e0:	ff 91       	pop	r31
     2e2:	ef 91       	pop	r30
     2e4:	bf 91       	pop	r27
     2e6:	af 91       	pop	r26
     2e8:	9f 91       	pop	r25
     2ea:	8f 91       	pop	r24
     2ec:	7f 91       	pop	r23
     2ee:	6f 91       	pop	r22
     2f0:	5f 91       	pop	r21
     2f2:	4f 91       	pop	r20
     2f4:	3f 91       	pop	r19
     2f6:	2f 91       	pop	r18
     2f8:	1f 91       	pop	r17
     2fa:	0f 91       	pop	r16
     2fc:	ff 90       	pop	r15
     2fe:	ef 90       	pop	r14
     300:	df 90       	pop	r13
     302:	cf 90       	pop	r12
     304:	0f 90       	pop	r0
     306:	0b be       	out	0x3b, r0	; 59
     308:	0f 90       	pop	r0
     30a:	0f be       	out	0x3f, r0	; 63
     30c:	0f 90       	pop	r0
     30e:	1f 90       	pop	r1
     310:	18 95       	reti

00000312 <__vector_42>:
// intruptted service routine when we have rech the number of  Ticks On Encoder
ISR(TIMER4_COMPA_vect)
{
     312:	1f 92       	push	r1
     314:	0f 92       	push	r0
     316:	0f b6       	in	r0, 0x3f	; 63
     318:	0f 92       	push	r0
     31a:	11 24       	eor	r1, r1
     31c:	0b b6       	in	r0, 0x3b	; 59
     31e:	0f 92       	push	r0
     320:	cf 92       	push	r12
     322:	df 92       	push	r13
     324:	ef 92       	push	r14
     326:	ff 92       	push	r15
     328:	0f 93       	push	r16
     32a:	1f 93       	push	r17
     32c:	2f 93       	push	r18
     32e:	3f 93       	push	r19
     330:	4f 93       	push	r20
     332:	5f 93       	push	r21
     334:	6f 93       	push	r22
     336:	7f 93       	push	r23
     338:	8f 93       	push	r24
     33a:	9f 93       	push	r25
     33c:	af 93       	push	r26
     33e:	bf 93       	push	r27
     340:	ef 93       	push	r30
     342:	ff 93       	push	r31
	// get the time now
	g_Timer4_new_time = Get_millis();
     344:	0e 94 de 1e 	call	0x3dbc	; 0x3dbc <Get_millis>
     348:	8b 01       	movw	r16, r22
     34a:	9c 01       	movw	r18, r24
     34c:	60 93 1c 0d 	sts	0x0D1C, r22	; 0x800d1c <g_Timer4_new_time>
     350:	70 93 1d 0d 	sts	0x0D1D, r23	; 0x800d1d <g_Timer4_new_time+0x1>
     354:	80 93 1e 0d 	sts	0x0D1E, r24	; 0x800d1e <g_Timer4_new_time+0x2>
     358:	90 93 1f 0d 	sts	0x0D1F, r25	; 0x800d1f <g_Timer4_new_time+0x3>
	// calculate the diff between now and last interrupt
	g_diff_time = g_Timer4_new_time - g_Timer4_old_time;
     35c:	40 91 2c 0d 	lds	r20, 0x0D2C	; 0x800d2c <g_Timer4_old_time>
     360:	50 91 2d 0d 	lds	r21, 0x0D2D	; 0x800d2d <g_Timer4_old_time+0x1>
     364:	60 91 2e 0d 	lds	r22, 0x0D2E	; 0x800d2e <g_Timer4_old_time+0x2>
     368:	70 91 2f 0d 	lds	r23, 0x0D2F	; 0x800d2f <g_Timer4_old_time+0x3>
     36c:	68 01       	movw	r12, r16
     36e:	79 01       	movw	r14, r18
     370:	c4 1a       	sub	r12, r20
     372:	d5 0a       	sbc	r13, r21
     374:	e6 0a       	sbc	r14, r22
     376:	f7 0a       	sbc	r15, r23
     378:	c7 01       	movw	r24, r14
     37a:	b6 01       	movw	r22, r12
     37c:	c0 92 18 0d 	sts	0x0D18, r12	; 0x800d18 <g_diff_time>
     380:	d0 92 19 0d 	sts	0x0D19, r13	; 0x800d19 <g_diff_time+0x1>
     384:	e0 92 1a 0d 	sts	0x0D1A, r14	; 0x800d1a <g_diff_time+0x2>
     388:	f0 92 1b 0d 	sts	0x0D1B, r15	; 0x800d1b <g_diff_time+0x3>
	// save the to the old time to next interrupt
	g_Timer4_old_time = g_Timer4_new_time;
     38c:	00 93 2c 0d 	sts	0x0D2C, r16	; 0x800d2c <g_Timer4_old_time>
     390:	10 93 2d 0d 	sts	0x0D2D, r17	; 0x800d2d <g_Timer4_old_time+0x1>
     394:	20 93 2e 0d 	sts	0x0D2E, r18	; 0x800d2e <g_Timer4_old_time+0x2>
     398:	30 93 2f 0d 	sts	0x0D2F, r19	; 0x800d2f <g_Timer4_old_time+0x3>
	//call back function on upper layer to get time
	g_timer4_config->isr_call_back(g_diff_time);
     39c:	e0 91 20 0d 	lds	r30, 0x0D20	; 0x800d20 <g_timer4_config>
     3a0:	f0 91 21 0d 	lds	r31, 0x0D21	; 0x800d21 <g_timer4_config+0x1>
     3a4:	02 80       	ldd	r0, Z+2	; 0x02
     3a6:	f3 81       	ldd	r31, Z+3	; 0x03
     3a8:	e0 2d       	mov	r30, r0
     3aa:	19 95       	eicall
}
     3ac:	ff 91       	pop	r31
     3ae:	ef 91       	pop	r30
     3b0:	bf 91       	pop	r27
     3b2:	af 91       	pop	r26
     3b4:	9f 91       	pop	r25
     3b6:	8f 91       	pop	r24
     3b8:	7f 91       	pop	r23
     3ba:	6f 91       	pop	r22
     3bc:	5f 91       	pop	r21
     3be:	4f 91       	pop	r20
     3c0:	3f 91       	pop	r19
     3c2:	2f 91       	pop	r18
     3c4:	1f 91       	pop	r17
     3c6:	0f 91       	pop	r16
     3c8:	ff 90       	pop	r15
     3ca:	ef 90       	pop	r14
     3cc:	df 90       	pop	r13
     3ce:	cf 90       	pop	r12
     3d0:	0f 90       	pop	r0
     3d2:	0b be       	out	0x3b, r0	; 59
     3d4:	0f 90       	pop	r0
     3d6:	0f be       	out	0x3f, r0	; 63
     3d8:	0f 90       	pop	r0
     3da:	1f 90       	pop	r1
     3dc:	18 95       	reti

000003de <__vector_47>:
// intruptted service routine when we have rech the number of  Ticks On Encoder
ISR(TIMER5_COMPA_vect)
{
     3de:	1f 92       	push	r1
     3e0:	0f 92       	push	r0
     3e2:	0f b6       	in	r0, 0x3f	; 63
     3e4:	0f 92       	push	r0
     3e6:	11 24       	eor	r1, r1
     3e8:	0b b6       	in	r0, 0x3b	; 59
     3ea:	0f 92       	push	r0
     3ec:	2f 93       	push	r18
     3ee:	3f 93       	push	r19
     3f0:	4f 93       	push	r20
     3f2:	5f 93       	push	r21
     3f4:	6f 93       	push	r22
     3f6:	7f 93       	push	r23
     3f8:	8f 93       	push	r24
     3fa:	9f 93       	push	r25
     3fc:	af 93       	push	r26
     3fe:	bf 93       	push	r27
     400:	ef 93       	push	r30
     402:	ff 93       	push	r31
	// calculate the diff between now and last interrupt
	g_diff_time = g_Timer5_new_time - g_Timer5_old_time;
	// save the to the old time to next interrupt
	g_Timer5_old_time = g_Timer5_new_time;*/
	// clear the counter
	UART0_putc('a');
     404:	81 e6       	ldi	r24, 0x61	; 97
     406:	0e 94 18 0c 	call	0x1830	; 0x1830 <UART0_putc>
	TIMER5_COUNT_L = 0;
     40a:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <__TEXT_REGION_LENGTH__+0x700124>
	//call back function on upper layer to get time
	g_timer5_config->isr_call_back(g_diff_time);
     40e:	60 91 18 0d 	lds	r22, 0x0D18	; 0x800d18 <g_diff_time>
     412:	70 91 19 0d 	lds	r23, 0x0D19	; 0x800d19 <g_diff_time+0x1>
     416:	80 91 1a 0d 	lds	r24, 0x0D1A	; 0x800d1a <g_diff_time+0x2>
     41a:	90 91 1b 0d 	lds	r25, 0x0D1B	; 0x800d1b <g_diff_time+0x3>
     41e:	e0 91 34 0d 	lds	r30, 0x0D34	; 0x800d34 <g_timer5_config>
     422:	f0 91 35 0d 	lds	r31, 0x0D35	; 0x800d35 <g_timer5_config+0x1>
     426:	02 80       	ldd	r0, Z+2	; 0x02
     428:	f3 81       	ldd	r31, Z+3	; 0x03
     42a:	e0 2d       	mov	r30, r0
     42c:	19 95       	eicall
	
}
     42e:	ff 91       	pop	r31
     430:	ef 91       	pop	r30
     432:	bf 91       	pop	r27
     434:	af 91       	pop	r26
     436:	9f 91       	pop	r25
     438:	8f 91       	pop	r24
     43a:	7f 91       	pop	r23
     43c:	6f 91       	pop	r22
     43e:	5f 91       	pop	r21
     440:	4f 91       	pop	r20
     442:	3f 91       	pop	r19
     444:	2f 91       	pop	r18
     446:	0f 90       	pop	r0
     448:	0b be       	out	0x3b, r0	; 59
     44a:	0f 90       	pop	r0
     44c:	0f be       	out	0x3f, r0	; 63
     44e:	0f 90       	pop	r0
     450:	1f 90       	pop	r1
     452:	18 95       	reti

00000454 <LCD_post_transmission>:

//
void Lcd_Write(uint16_t address, uint16_t value){
	Modbus_Set_transmit_buffer(LCD,0, value);
    Modbus_Write_multiple_registers(LCD,address, 0x01);
}
     454:	60 e0       	ldi	r22, 0x00	; 0
     456:	80 e0       	ldi	r24, 0x00	; 0
     458:	0c 94 38 0b 	jmp	0x1670	; 0x1670 <Modbus_change_state>
     45c:	08 95       	ret

0000045e <LCD_pre_transmission>:
     45e:	61 e0       	ldi	r22, 0x01	; 1
     460:	80 e0       	ldi	r24, 0x00	; 0
     462:	0c 94 38 0b 	jmp	0x1670	; 0x1670 <Modbus_change_state>
     466:	08 95       	ret

00000468 <Lcd_init>:
     468:	e2 e7       	ldi	r30, 0x72	; 114
     46a:	f2 e0       	ldi	r31, 0x02	; 2
     46c:	20 83       	st	Z, r18
     46e:	81 83       	std	Z+1, r24	; 0x01
     470:	42 83       	std	Z+2, r20	; 0x02
     472:	53 83       	std	Z+3, r21	; 0x03
     474:	64 83       	std	Z+4, r22	; 0x04
     476:	75 83       	std	Z+5, r23	; 0x05
     478:	8f e2       	ldi	r24, 0x2F	; 47
     47a:	92 e0       	ldi	r25, 0x02	; 2
     47c:	97 83       	std	Z+7, r25	; 0x07
     47e:	86 83       	std	Z+6, r24	; 0x06
     480:	8a e2       	ldi	r24, 0x2A	; 42
     482:	92 e0       	ldi	r25, 0x02	; 2
     484:	91 87       	std	Z+9, r25	; 0x09
     486:	80 87       	std	Z+8, r24	; 0x08
     488:	bf 01       	movw	r22, r30
     48a:	80 e0       	ldi	r24, 0x00	; 0
     48c:	d0 c6       	rjmp	.+3488   	; 0x122e <Modbus_init>
     48e:	08 95       	ret

00000490 <Lcd_Read_multiple_data>:
 *
 *                    LCD Multiple Data functions 
 * 
************************************************************************************************************/

uint16_t Lcd_Read_multiple_data(uint16_t address ,uint16_t *pData,uint8_t QTY){
     490:	ff 92       	push	r15
     492:	0f 93       	push	r16
     494:	1f 93       	push	r17
     496:	cf 93       	push	r28
     498:	df 93       	push	r29
     49a:	f6 2e       	mov	r15, r22
     49c:	c7 2f       	mov	r28, r23
     49e:	d4 2f       	mov	r29, r20
	int err = Modbus_Read_holding_registers(LCD,address,QTY);
     4a0:	50 e0       	ldi	r21, 0x00	; 0
     4a2:	bc 01       	movw	r22, r24
     4a4:	80 e0       	ldi	r24, 0x00	; 0
     4a6:	f5 d7       	rcall	.+4074   	; 0x1492 <Modbus_Read_holding_registers>
	if(err == 0){
     4a8:	81 11       	cpse	r24, r1
     4aa:	12 c0       	rjmp	.+36     	; 0x4d0 <Lcd_Read_multiple_data+0x40>
		for(uint8_t i=0; i<QTY;i++){
     4ac:	dd 23       	and	r29, r29
     4ae:	99 f0       	breq	.+38     	; 0x4d6 <Lcd_Read_multiple_data+0x46>
     4b0:	0f 2d       	mov	r16, r15
     4b2:	1c 2f       	mov	r17, r28
     4b4:	c0 e0       	ldi	r28, 0x00	; 0
			(*(pData+i)) = Modbus_Get_response_buffer(LCD,i);
     4b6:	6c 2f       	mov	r22, r28
     4b8:	80 e0       	ldi	r24, 0x00	; 0
     4ba:	a7 d7       	rcall	.+3918   	; 0x140a <Modbus_Get_response_buffer>
     4bc:	f8 01       	movw	r30, r16
     4be:	81 93       	st	Z+, r24
     4c0:	91 93       	st	Z+, r25
     4c2:	8f 01       	movw	r16, r30
************************************************************************************************************/

uint16_t Lcd_Read_multiple_data(uint16_t address ,uint16_t *pData,uint8_t QTY){
	int err = Modbus_Read_holding_registers(LCD,address,QTY);
	if(err == 0){
		for(uint8_t i=0; i<QTY;i++){
     4c4:	cf 5f       	subi	r28, 0xFF	; 255
     4c6:	dc 13       	cpse	r29, r28
     4c8:	f6 cf       	rjmp	.-20     	; 0x4b6 <Lcd_Read_multiple_data+0x26>
			(*(pData+i)) = Modbus_Get_response_buffer(LCD,i);
		}
		return LCD_OK;	
     4ca:	80 e0       	ldi	r24, 0x00	; 0
     4cc:	90 e0       	ldi	r25, 0x00	; 0
     4ce:	05 c0       	rjmp	.+10     	; 0x4da <Lcd_Read_multiple_data+0x4a>
	}
	else {
		return LCD_READ_ERROR;
     4d0:	89 e0       	ldi	r24, 0x09	; 9
     4d2:	90 e0       	ldi	r25, 0x00	; 0
     4d4:	02 c0       	rjmp	.+4      	; 0x4da <Lcd_Read_multiple_data+0x4a>
	int err = Modbus_Read_holding_registers(LCD,address,QTY);
	if(err == 0){
		for(uint8_t i=0; i<QTY;i++){
			(*(pData+i)) = Modbus_Get_response_buffer(LCD,i);
		}
		return LCD_OK;	
     4d6:	80 e0       	ldi	r24, 0x00	; 0
     4d8:	90 e0       	ldi	r25, 0x00	; 0
	}
	else {
		return LCD_READ_ERROR;
	}

}
     4da:	df 91       	pop	r29
     4dc:	cf 91       	pop	r28
     4de:	1f 91       	pop	r17
     4e0:	0f 91       	pop	r16
     4e2:	ff 90       	pop	r15
     4e4:	08 95       	ret

000004e6 <Lcd_Write_multiple_data>:

void Lcd_Write_multiple_data(uint16_t address ,uint16_t *pData,uint8_t QTY){
     4e6:	ef 92       	push	r14
     4e8:	ff 92       	push	r15
     4ea:	0f 93       	push	r16
     4ec:	1f 93       	push	r17
     4ee:	cf 93       	push	r28
     4f0:	df 93       	push	r29
     4f2:	7c 01       	movw	r14, r24
     4f4:	d4 2f       	mov	r29, r20
	for(uint8_t i=0;i<QTY;i++){
     4f6:	44 23       	and	r20, r20
     4f8:	69 f0       	breq	.+26     	; 0x514 <Lcd_Write_multiple_data+0x2e>
     4fa:	06 2f       	mov	r16, r22
     4fc:	17 2f       	mov	r17, r23
     4fe:	c0 e0       	ldi	r28, 0x00	; 0
		Modbus_Set_transmit_buffer(LCD,i, (*(pData+i)));
     500:	f8 01       	movw	r30, r16
     502:	41 91       	ld	r20, Z+
     504:	51 91       	ld	r21, Z+
     506:	8f 01       	movw	r16, r30
     508:	6c 2f       	mov	r22, r28
     50a:	80 e0       	ldi	r24, 0x00	; 0
     50c:	a1 d7       	rcall	.+3906   	; 0x1450 <Modbus_Set_transmit_buffer>
	}

}

void Lcd_Write_multiple_data(uint16_t address ,uint16_t *pData,uint8_t QTY){
	for(uint8_t i=0;i<QTY;i++){
     50e:	cf 5f       	subi	r28, 0xFF	; 255
     510:	dc 13       	cpse	r29, r28
     512:	f6 cf       	rjmp	.-20     	; 0x500 <Lcd_Write_multiple_data+0x1a>
		Modbus_Set_transmit_buffer(LCD,i, (*(pData+i)));
	}
	Modbus_Write_multiple_registers(LCD,address,QTY);
     514:	4d 2f       	mov	r20, r29
     516:	50 e0       	ldi	r21, 0x00	; 0
     518:	b7 01       	movw	r22, r14
     51a:	80 e0       	ldi	r24, 0x00	; 0
     51c:	d6 d7       	rcall	.+4012   	; 0x14ca <Modbus_Write_multiple_registers>
	
}
     51e:	df 91       	pop	r29
     520:	cf 91       	pop	r28
     522:	1f 91       	pop	r17
     524:	0f 91       	pop	r16
     526:	ff 90       	pop	r15
     528:	ef 90       	pop	r14
     52a:	08 95       	ret

0000052c <Modbus_mster_transaction>:
		g_mod1_write_address = u16WriteAddress;
		g_mod1_write_qty = u16BitQty;
		return Modbus_mster_transaction(device, OUR_WRITE_MULTIPLE_COILS);
	}
	return INVALID_DEVICE; //error
}
     52c:	8f 92       	push	r8
     52e:	9f 92       	push	r9
     530:	af 92       	push	r10
     532:	bf 92       	push	r11
     534:	df 92       	push	r13
     536:	ef 92       	push	r14
     538:	ff 92       	push	r15
     53a:	0f 93       	push	r16
     53c:	1f 93       	push	r17
     53e:	cf 93       	push	r28
     540:	df 93       	push	r29
     542:	cd b7       	in	r28, 0x3d	; 61
     544:	de b7       	in	r29, 0x3e	; 62
     546:	da 95       	dec	r29
     548:	0f b6       	in	r0, 0x3f	; 63
     54a:	f8 94       	cli
     54c:	de bf       	out	0x3e, r29	; 62
     54e:	0f be       	out	0x3f, r0	; 63
     550:	cd bf       	out	0x3d, r28	; 61
     552:	d6 2e       	mov	r13, r22
     554:	81 11       	cpse	r24, r1
     556:	00 c3       	rjmp	.+1536   	; 0xb58 <Modbus_mster_transaction+0x62c>
     558:	80 91 b2 04 	lds	r24, 0x04B2	; 0x8004b2 <g_mod0_slave>
     55c:	89 83       	std	Y+1, r24	; 0x01
     55e:	2f ef       	ldi	r18, 0xFF	; 255
     560:	62 13       	cpse	r22, r18
     562:	06 c0       	rjmp	.+12     	; 0x570 <Modbus_mster_transaction+0x44>
     564:	8f e0       	ldi	r24, 0x0F	; 15
     566:	8a 83       	std	Y+2, r24	; 0x02
     568:	68 94       	set
     56a:	bb 24       	eor	r11, r11
     56c:	b1 f8       	bld	r11, 1
     56e:	32 c0       	rjmp	.+100    	; 0x5d4 <Modbus_mster_transaction+0xa8>
     570:	6a 83       	std	Y+2, r22	; 0x02
     572:	81 e0       	ldi	r24, 0x01	; 1
     574:	68 17       	cp	r22, r24
     576:	b8 f0       	brcs	.+46     	; 0x5a6 <Modbus_mster_transaction+0x7a>
     578:	94 e0       	ldi	r25, 0x04	; 4
     57a:	96 17       	cp	r25, r22
     57c:	18 f4       	brcc	.+6      	; 0x584 <Modbus_mster_transaction+0x58>
     57e:	a7 e1       	ldi	r26, 0x17	; 23
     580:	6a 13       	cpse	r22, r26
     582:	11 c0       	rjmp	.+34     	; 0x5a6 <Modbus_mster_transaction+0x7a>
     584:	80 91 b0 04 	lds	r24, 0x04B0	; 0x8004b0 <g_mod0_read_address>
     588:	90 91 b1 04 	lds	r25, 0x04B1	; 0x8004b1 <g_mod0_read_address+0x1>
     58c:	9b 83       	std	Y+3, r25	; 0x03
     58e:	8c 83       	std	Y+4, r24	; 0x04
     590:	80 91 ae 04 	lds	r24, 0x04AE	; 0x8004ae <g_mod0_read_qty>
     594:	90 91 af 04 	lds	r25, 0x04AF	; 0x8004af <g_mod0_read_qty+0x1>
     598:	9d 83       	std	Y+5, r25	; 0x05
     59a:	8e 83       	std	Y+6, r24	; 0x06
     59c:	0f 2e       	mov	r0, r31
     59e:	f6 e0       	ldi	r31, 0x06	; 6
     5a0:	bf 2e       	mov	r11, r31
     5a2:	f0 2d       	mov	r31, r0
     5a4:	03 c0       	rjmp	.+6      	; 0x5ac <Modbus_mster_transaction+0x80>
     5a6:	68 94       	set
     5a8:	bb 24       	eor	r11, r11
     5aa:	b1 f8       	bld	r11, 1
     5ac:	b0 e1       	ldi	r27, 0x10	; 16
     5ae:	bd 15       	cp	r27, r13
     5b0:	40 f0       	brcs	.+16     	; 0x5c2 <Modbus_mster_transaction+0x96>
     5b2:	ef e0       	ldi	r30, 0x0F	; 15
     5b4:	de 16       	cp	r13, r30
     5b6:	70 f4       	brcc	.+28     	; 0x5d4 <Modbus_mster_transaction+0xa8>
     5b8:	8b ef       	ldi	r24, 0xFB	; 251
     5ba:	8d 0d       	add	r24, r13
     5bc:	82 30       	cpi	r24, 0x02	; 2
     5be:	00 f5       	brcc	.+64     	; 0x600 <Modbus_mster_transaction+0xd4>
     5c0:	09 c0       	rjmp	.+18     	; 0x5d4 <Modbus_mster_transaction+0xa8>
     5c2:	f6 e1       	ldi	r31, 0x16	; 22
     5c4:	df 16       	cp	r13, r31
     5c6:	e0 f0       	brcs	.+56     	; 0x600 <Modbus_mster_transaction+0xd4>
     5c8:	27 e1       	ldi	r18, 0x17	; 23
     5ca:	2d 15       	cp	r18, r13
     5cc:	18 f4       	brcc	.+6      	; 0x5d4 <Modbus_mster_transaction+0xa8>
     5ce:	8f ef       	ldi	r24, 0xFF	; 255
     5d0:	d8 12       	cpse	r13, r24
     5d2:	16 c0       	rjmp	.+44     	; 0x600 <Modbus_mster_transaction+0xd4>
     5d4:	90 91 2c 04 	lds	r25, 0x042C	; 0x80042c <g_mod0_write_address>
     5d8:	80 91 2d 04 	lds	r24, 0x042D	; 0x80042d <g_mod0_write_address+0x1>
     5dc:	e1 e0       	ldi	r30, 0x01	; 1
     5de:	f0 e0       	ldi	r31, 0x00	; 0
     5e0:	ec 0f       	add	r30, r28
     5e2:	fd 1f       	adc	r31, r29
     5e4:	eb 0d       	add	r30, r11
     5e6:	f1 1d       	adc	r31, r1
     5e8:	80 83       	st	Z, r24
     5ea:	81 e0       	ldi	r24, 0x01	; 1
     5ec:	8b 0d       	add	r24, r11
     5ee:	e1 e0       	ldi	r30, 0x01	; 1
     5f0:	f0 e0       	ldi	r31, 0x00	; 0
     5f2:	ec 0f       	add	r30, r28
     5f4:	fd 1f       	adc	r31, r29
     5f6:	e8 0f       	add	r30, r24
     5f8:	f1 1d       	adc	r31, r1
     5fa:	b3 94       	inc	r11
     5fc:	b3 94       	inc	r11
     5fe:	90 83       	st	Z, r25
     600:	90 e1       	ldi	r25, 0x10	; 16
     602:	d9 16       	cp	r13, r25
     604:	09 f4       	brne	.+2      	; 0x608 <Modbus_mster_transaction+0xdc>
     606:	ad c0       	rjmp	.+346    	; 0x762 <Modbus_mster_transaction+0x236>
     608:	9d 15       	cp	r25, r13
     60a:	58 f0       	brcs	.+22     	; 0x622 <Modbus_mster_transaction+0xf6>
     60c:	a6 e0       	ldi	r26, 0x06	; 6
     60e:	da 16       	cp	r13, r26
     610:	61 f1       	breq	.+88     	; 0x66a <Modbus_mster_transaction+0x13e>
     612:	bf e0       	ldi	r27, 0x0F	; 15
     614:	db 16       	cp	r13, r27
     616:	09 f4       	brne	.+2      	; 0x61a <Modbus_mster_transaction+0xee>
     618:	41 c0       	rjmp	.+130    	; 0x69c <Modbus_mster_transaction+0x170>
     61a:	e5 e0       	ldi	r30, 0x05	; 5
     61c:	de 12       	cpse	r13, r30
     61e:	1a c1       	rjmp	.+564    	; 0x854 <Modbus_mster_transaction+0x328>
     620:	0d c0       	rjmp	.+26     	; 0x63c <Modbus_mster_transaction+0x110>
     622:	f7 e1       	ldi	r31, 0x17	; 23
     624:	df 16       	cp	r13, r31
     626:	09 f4       	brne	.+2      	; 0x62a <Modbus_mster_transaction+0xfe>
     628:	9c c0       	rjmp	.+312    	; 0x762 <Modbus_mster_transaction+0x236>
     62a:	2f ef       	ldi	r18, 0xFF	; 255
     62c:	d2 16       	cp	r13, r18
     62e:	09 f4       	brne	.+2      	; 0x632 <Modbus_mster_transaction+0x106>
     630:	98 c0       	rjmp	.+304    	; 0x762 <Modbus_mster_transaction+0x236>
     632:	86 e1       	ldi	r24, 0x16	; 22
     634:	d8 16       	cp	r13, r24
     636:	09 f4       	brne	.+2      	; 0x63a <Modbus_mster_transaction+0x10e>
     638:	df c0       	rjmp	.+446    	; 0x7f8 <Modbus_mster_transaction+0x2cc>
     63a:	0c c1       	rjmp	.+536    	; 0x854 <Modbus_mster_transaction+0x328>
     63c:	90 91 2a 04 	lds	r25, 0x042A	; 0x80042a <g_mod0_write_qty>
     640:	80 91 2b 04 	lds	r24, 0x042B	; 0x80042b <g_mod0_write_qty+0x1>
     644:	e1 e0       	ldi	r30, 0x01	; 1
     646:	f0 e0       	ldi	r31, 0x00	; 0
     648:	ec 0f       	add	r30, r28
     64a:	fd 1f       	adc	r31, r29
     64c:	eb 0d       	add	r30, r11
     64e:	f1 1d       	adc	r31, r1
     650:	80 83       	st	Z, r24
     652:	81 e0       	ldi	r24, 0x01	; 1
     654:	8b 0d       	add	r24, r11
     656:	e1 e0       	ldi	r30, 0x01	; 1
     658:	f0 e0       	ldi	r31, 0x00	; 0
     65a:	ec 0f       	add	r30, r28
     65c:	fd 1f       	adc	r31, r29
     65e:	e8 0f       	add	r30, r24
     660:	f1 1d       	adc	r31, r1
     662:	b3 94       	inc	r11
     664:	b3 94       	inc	r11
     666:	90 83       	st	Z, r25
     668:	f5 c0       	rjmp	.+490    	; 0x854 <Modbus_mster_transaction+0x328>
     66a:	ea ea       	ldi	r30, 0xAA	; 170
     66c:	f3 e0       	ldi	r31, 0x03	; 3
     66e:	80 81       	ld	r24, Z
     670:	91 81       	ldd	r25, Z+1	; 0x01
     672:	a1 e0       	ldi	r26, 0x01	; 1
     674:	b0 e0       	ldi	r27, 0x00	; 0
     676:	ac 0f       	add	r26, r28
     678:	bd 1f       	adc	r27, r29
     67a:	ab 0d       	add	r26, r11
     67c:	b1 1d       	adc	r27, r1
     67e:	9c 93       	st	X, r25
     680:	20 81       	ld	r18, Z
     682:	31 81       	ldd	r19, Z+1	; 0x01
     684:	81 e0       	ldi	r24, 0x01	; 1
     686:	8b 0d       	add	r24, r11
     688:	e1 e0       	ldi	r30, 0x01	; 1
     68a:	f0 e0       	ldi	r31, 0x00	; 0
     68c:	ec 0f       	add	r30, r28
     68e:	fd 1f       	adc	r31, r29
     690:	e8 0f       	add	r30, r24
     692:	f1 1d       	adc	r31, r1
     694:	b3 94       	inc	r11
     696:	b3 94       	inc	r11
     698:	20 83       	st	Z, r18
     69a:	dc c0       	rjmp	.+440    	; 0x854 <Modbus_mster_transaction+0x328>
     69c:	80 91 2a 04 	lds	r24, 0x042A	; 0x80042a <g_mod0_write_qty>
     6a0:	90 91 2b 04 	lds	r25, 0x042B	; 0x80042b <g_mod0_write_qty+0x1>
     6a4:	e1 e0       	ldi	r30, 0x01	; 1
     6a6:	f0 e0       	ldi	r31, 0x00	; 0
     6a8:	ec 0f       	add	r30, r28
     6aa:	fd 1f       	adc	r31, r29
     6ac:	eb 0d       	add	r30, r11
     6ae:	f1 1d       	adc	r31, r1
     6b0:	90 83       	st	Z, r25
     6b2:	32 e0       	ldi	r19, 0x02	; 2
     6b4:	3b 0d       	add	r19, r11
     6b6:	21 e0       	ldi	r18, 0x01	; 1
     6b8:	2b 0d       	add	r18, r11
     6ba:	e1 e0       	ldi	r30, 0x01	; 1
     6bc:	f0 e0       	ldi	r31, 0x00	; 0
     6be:	ec 0f       	add	r30, r28
     6c0:	fd 1f       	adc	r31, r29
     6c2:	e2 0f       	add	r30, r18
     6c4:	f1 1d       	adc	r31, r1
     6c6:	80 83       	st	Z, r24
     6c8:	ac 01       	movw	r20, r24
     6ca:	47 70       	andi	r20, 0x07	; 7
     6cc:	55 27       	eor	r21, r21
     6ce:	45 2b       	or	r20, r21
     6d0:	49 f0       	breq	.+18     	; 0x6e4 <Modbus_mster_transaction+0x1b8>
     6d2:	96 95       	lsr	r25
     6d4:	87 95       	ror	r24
     6d6:	96 95       	lsr	r25
     6d8:	87 95       	ror	r24
     6da:	96 95       	lsr	r25
     6dc:	87 95       	ror	r24
     6de:	21 e0       	ldi	r18, 0x01	; 1
     6e0:	28 0f       	add	r18, r24
     6e2:	07 c0       	rjmp	.+14     	; 0x6f2 <Modbus_mster_transaction+0x1c6>
     6e4:	96 95       	lsr	r25
     6e6:	87 95       	ror	r24
     6e8:	96 95       	lsr	r25
     6ea:	87 95       	ror	r24
     6ec:	96 95       	lsr	r25
     6ee:	87 95       	ror	r24
     6f0:	28 2f       	mov	r18, r24
     6f2:	93 e0       	ldi	r25, 0x03	; 3
     6f4:	b9 0e       	add	r11, r25
     6f6:	fe 01       	movw	r30, r28
     6f8:	e3 0f       	add	r30, r19
     6fa:	f1 1d       	adc	r31, r1
     6fc:	21 83       	std	Z+1, r18	; 0x01
     6fe:	22 23       	and	r18, r18
     700:	09 f4       	brne	.+2      	; 0x704 <Modbus_mster_transaction+0x1d8>
     702:	a8 c0       	rjmp	.+336    	; 0x854 <Modbus_mster_transaction+0x328>
     704:	80 e0       	ldi	r24, 0x00	; 0
     706:	98 2f       	mov	r25, r24
     708:	91 70       	andi	r25, 0x01	; 1
     70a:	80 ff       	sbrs	r24, 0
     70c:	03 c0       	rjmp	.+6      	; 0x714 <Modbus_mster_transaction+0x1e8>
     70e:	91 30       	cpi	r25, 0x01	; 1
     710:	99 f0       	breq	.+38     	; 0x738 <Modbus_mster_transaction+0x20c>
     712:	23 c0       	rjmp	.+70     	; 0x75a <Modbus_mster_transaction+0x22e>
     714:	e8 2f       	mov	r30, r24
     716:	e6 95       	lsr	r30
     718:	f0 e0       	ldi	r31, 0x00	; 0
     71a:	ee 0f       	add	r30, r30
     71c:	ff 1f       	adc	r31, r31
     71e:	e6 55       	subi	r30, 0x56	; 86
     720:	fc 4f       	sbci	r31, 0xFC	; 252
     722:	40 81       	ld	r20, Z
     724:	51 81       	ldd	r21, Z+1	; 0x01
     726:	e1 e0       	ldi	r30, 0x01	; 1
     728:	f0 e0       	ldi	r31, 0x00	; 0
     72a:	ec 0f       	add	r30, r28
     72c:	fd 1f       	adc	r31, r29
     72e:	eb 0d       	add	r30, r11
     730:	f1 1d       	adc	r31, r1
     732:	40 83       	st	Z, r20
     734:	b3 94       	inc	r11
     736:	11 c0       	rjmp	.+34     	; 0x75a <Modbus_mster_transaction+0x22e>
     738:	e8 2f       	mov	r30, r24
     73a:	e6 95       	lsr	r30
     73c:	f0 e0       	ldi	r31, 0x00	; 0
     73e:	ee 0f       	add	r30, r30
     740:	ff 1f       	adc	r31, r31
     742:	e6 55       	subi	r30, 0x56	; 86
     744:	fc 4f       	sbci	r31, 0xFC	; 252
     746:	40 81       	ld	r20, Z
     748:	51 81       	ldd	r21, Z+1	; 0x01
     74a:	e1 e0       	ldi	r30, 0x01	; 1
     74c:	f0 e0       	ldi	r31, 0x00	; 0
     74e:	ec 0f       	add	r30, r28
     750:	fd 1f       	adc	r31, r29
     752:	eb 0d       	add	r30, r11
     754:	f1 1d       	adc	r31, r1
     756:	50 83       	st	Z, r21
     758:	b3 94       	inc	r11
     75a:	8f 5f       	subi	r24, 0xFF	; 255
     75c:	28 13       	cpse	r18, r24
     75e:	d3 cf       	rjmp	.-90     	; 0x706 <Modbus_mster_transaction+0x1da>
     760:	79 c0       	rjmp	.+242    	; 0x854 <Modbus_mster_transaction+0x328>
     762:	60 91 2a 04 	lds	r22, 0x042A	; 0x80042a <g_mod0_write_qty>
     766:	70 91 2b 04 	lds	r23, 0x042B	; 0x80042b <g_mod0_write_qty+0x1>
     76a:	e1 e0       	ldi	r30, 0x01	; 1
     76c:	f0 e0       	ldi	r31, 0x00	; 0
     76e:	ec 0f       	add	r30, r28
     770:	fd 1f       	adc	r31, r29
     772:	eb 0d       	add	r30, r11
     774:	f1 1d       	adc	r31, r1
     776:	70 83       	st	Z, r23
     778:	81 e0       	ldi	r24, 0x01	; 1
     77a:	8b 0d       	add	r24, r11
     77c:	e1 e0       	ldi	r30, 0x01	; 1
     77e:	f0 e0       	ldi	r31, 0x00	; 0
     780:	ec 0f       	add	r30, r28
     782:	fd 1f       	adc	r31, r29
     784:	e8 0f       	add	r30, r24
     786:	f1 1d       	adc	r31, r1
     788:	60 83       	st	Z, r22
     78a:	82 e0       	ldi	r24, 0x02	; 2
     78c:	8b 0d       	add	r24, r11
     78e:	e1 e0       	ldi	r30, 0x01	; 1
     790:	f0 e0       	ldi	r31, 0x00	; 0
     792:	ec 0f       	add	r30, r28
     794:	fd 1f       	adc	r31, r29
     796:	e8 0f       	add	r30, r24
     798:	f1 1d       	adc	r31, r1
     79a:	a3 e0       	ldi	r26, 0x03	; 3
     79c:	ba 0e       	add	r11, r26
     79e:	86 2f       	mov	r24, r22
     7a0:	88 0f       	add	r24, r24
     7a2:	80 83       	st	Z, r24
     7a4:	77 27       	eor	r23, r23
     7a6:	16 16       	cp	r1, r22
     7a8:	17 06       	cpc	r1, r23
     7aa:	0c f0       	brlt	.+2      	; 0x7ae <Modbus_mster_transaction+0x282>
     7ac:	53 c0       	rjmp	.+166    	; 0x854 <Modbus_mster_transaction+0x328>
     7ae:	80 e0       	ldi	r24, 0x00	; 0
     7b0:	90 e0       	ldi	r25, 0x00	; 0
     7b2:	20 e0       	ldi	r18, 0x00	; 0
     7b4:	88 0f       	add	r24, r24
     7b6:	99 1f       	adc	r25, r25
     7b8:	fc 01       	movw	r30, r24
     7ba:	e6 55       	subi	r30, 0x56	; 86
     7bc:	fc 4f       	sbci	r31, 0xFC	; 252
     7be:	80 81       	ld	r24, Z
     7c0:	91 81       	ldd	r25, Z+1	; 0x01
     7c2:	a1 e0       	ldi	r26, 0x01	; 1
     7c4:	b0 e0       	ldi	r27, 0x00	; 0
     7c6:	ac 0f       	add	r26, r28
     7c8:	bd 1f       	adc	r27, r29
     7ca:	ab 0d       	add	r26, r11
     7cc:	b1 1d       	adc	r27, r1
     7ce:	9c 93       	st	X, r25
     7d0:	40 81       	ld	r20, Z
     7d2:	51 81       	ldd	r21, Z+1	; 0x01
     7d4:	81 e0       	ldi	r24, 0x01	; 1
     7d6:	8b 0d       	add	r24, r11
     7d8:	e1 e0       	ldi	r30, 0x01	; 1
     7da:	f0 e0       	ldi	r31, 0x00	; 0
     7dc:	ec 0f       	add	r30, r28
     7de:	fd 1f       	adc	r31, r29
     7e0:	e8 0f       	add	r30, r24
     7e2:	f1 1d       	adc	r31, r1
     7e4:	b3 94       	inc	r11
     7e6:	b3 94       	inc	r11
     7e8:	40 83       	st	Z, r20
     7ea:	2f 5f       	subi	r18, 0xFF	; 255
     7ec:	82 2f       	mov	r24, r18
     7ee:	90 e0       	ldi	r25, 0x00	; 0
     7f0:	86 17       	cp	r24, r22
     7f2:	97 07       	cpc	r25, r23
     7f4:	fc f2       	brlt	.-66     	; 0x7b4 <Modbus_mster_transaction+0x288>
     7f6:	2e c0       	rjmp	.+92     	; 0x854 <Modbus_mster_transaction+0x328>
     7f8:	ea ea       	ldi	r30, 0xAA	; 170
     7fa:	f3 e0       	ldi	r31, 0x03	; 3
     7fc:	80 81       	ld	r24, Z
     7fe:	91 81       	ldd	r25, Z+1	; 0x01
     800:	a1 e0       	ldi	r26, 0x01	; 1
     802:	b0 e0       	ldi	r27, 0x00	; 0
     804:	ac 0f       	add	r26, r28
     806:	bd 1f       	adc	r27, r29
     808:	ab 0d       	add	r26, r11
     80a:	b1 1d       	adc	r27, r1
     80c:	9c 93       	st	X, r25
     80e:	80 81       	ld	r24, Z
     810:	91 81       	ldd	r25, Z+1	; 0x01
     812:	91 e0       	ldi	r25, 0x01	; 1
     814:	9b 0d       	add	r25, r11
     816:	a1 e0       	ldi	r26, 0x01	; 1
     818:	b0 e0       	ldi	r27, 0x00	; 0
     81a:	ac 0f       	add	r26, r28
     81c:	bd 1f       	adc	r27, r29
     81e:	a9 0f       	add	r26, r25
     820:	b1 1d       	adc	r27, r1
     822:	8c 93       	st	X, r24
     824:	82 81       	ldd	r24, Z+2	; 0x02
     826:	93 81       	ldd	r25, Z+3	; 0x03
     828:	82 e0       	ldi	r24, 0x02	; 2
     82a:	8b 0d       	add	r24, r11
     82c:	a1 e0       	ldi	r26, 0x01	; 1
     82e:	b0 e0       	ldi	r27, 0x00	; 0
     830:	ac 0f       	add	r26, r28
     832:	bd 1f       	adc	r27, r29
     834:	a8 0f       	add	r26, r24
     836:	b1 1d       	adc	r27, r1
     838:	9c 93       	st	X, r25
     83a:	22 81       	ldd	r18, Z+2	; 0x02
     83c:	33 81       	ldd	r19, Z+3	; 0x03
     83e:	83 e0       	ldi	r24, 0x03	; 3
     840:	8b 0d       	add	r24, r11
     842:	e1 e0       	ldi	r30, 0x01	; 1
     844:	f0 e0       	ldi	r31, 0x00	; 0
     846:	ec 0f       	add	r30, r28
     848:	fd 1f       	adc	r31, r29
     84a:	e8 0f       	add	r30, r24
     84c:	f1 1d       	adc	r31, r1
     84e:	b4 e0       	ldi	r27, 0x04	; 4
     850:	bb 0e       	add	r11, r27
     852:	20 83       	st	Z, r18
     854:	bb 20       	and	r11, r11
     856:	b9 f0       	breq	.+46     	; 0x886 <Modbus_mster_transaction+0x35a>
     858:	8e 01       	movw	r16, r28
     85a:	0f 5f       	subi	r16, 0xFF	; 255
     85c:	1f 4f       	sbci	r17, 0xFF	; 255
     85e:	ee 24       	eor	r14, r14
     860:	ea 94       	dec	r14
     862:	eb 0c       	add	r14, r11
     864:	f1 2c       	mov	r15, r1
     866:	ef ef       	ldi	r30, 0xFF	; 255
     868:	ee 1a       	sub	r14, r30
     86a:	fe 0a       	sbc	r15, r30
     86c:	e0 0e       	add	r14, r16
     86e:	f1 1e       	adc	r15, r17
     870:	8f ef       	ldi	r24, 0xFF	; 255
     872:	9f ef       	ldi	r25, 0xFF	; 255
     874:	d8 01       	movw	r26, r16
     876:	6d 91       	ld	r22, X+
     878:	8d 01       	movw	r16, r26
     87a:	0e 94 bd 1e 	call	0x3d7a	; 0x3d7a <crc16_update>
     87e:	0e 15       	cp	r16, r14
     880:	1f 05       	cpc	r17, r15
     882:	c1 f7       	brne	.-16     	; 0x874 <Modbus_mster_transaction+0x348>
     884:	02 c0       	rjmp	.+4      	; 0x88a <Modbus_mster_transaction+0x35e>
     886:	8f ef       	ldi	r24, 0xFF	; 255
     888:	9f ef       	ldi	r25, 0xFF	; 255
     88a:	ee 24       	eor	r14, r14
     88c:	e3 94       	inc	r14
     88e:	eb 0c       	add	r14, r11
     890:	e1 e0       	ldi	r30, 0x01	; 1
     892:	f0 e0       	ldi	r31, 0x00	; 0
     894:	ec 0f       	add	r30, r28
     896:	fd 1f       	adc	r31, r29
     898:	eb 0d       	add	r30, r11
     89a:	f1 1d       	adc	r31, r1
     89c:	80 83       	st	Z, r24
     89e:	b3 94       	inc	r11
     8a0:	b3 94       	inc	r11
     8a2:	e1 e0       	ldi	r30, 0x01	; 1
     8a4:	f0 e0       	ldi	r31, 0x00	; 0
     8a6:	ec 0f       	add	r30, r28
     8a8:	fd 1f       	adc	r31, r29
     8aa:	ee 0d       	add	r30, r14
     8ac:	f1 1d       	adc	r31, r1
     8ae:	90 83       	st	Z, r25
     8b0:	e1 e0       	ldi	r30, 0x01	; 1
     8b2:	f0 e0       	ldi	r31, 0x00	; 0
     8b4:	ec 0f       	add	r30, r28
     8b6:	fd 1f       	adc	r31, r29
     8b8:	eb 0d       	add	r30, r11
     8ba:	f1 1d       	adc	r31, r1
     8bc:	10 82       	st	Z, r1
     8be:	e0 91 9d 03 	lds	r30, 0x039D	; 0x80039d <g_mod0_Serial_getc>
     8c2:	f0 91 9e 03 	lds	r31, 0x039E	; 0x80039e <g_mod0_Serial_getc+0x1>
     8c6:	19 95       	eicall
     8c8:	81 15       	cp	r24, r1
     8ca:	91 40       	sbci	r25, 0x01	; 1
     8cc:	c1 f7       	brne	.-16     	; 0x8be <Modbus_mster_transaction+0x392>
     8ce:	e0 91 a3 03 	lds	r30, 0x03A3	; 0x8003a3 <g_mod0_pre_transmission>
     8d2:	f0 91 a4 03 	lds	r31, 0x03A4	; 0x8003a4 <g_mod0_pre_transmission+0x1>
     8d6:	30 97       	sbiw	r30, 0x00	; 0
     8d8:	09 f0       	breq	.+2      	; 0x8dc <Modbus_mster_transaction+0x3b0>
     8da:	19 95       	eicall
     8dc:	bb 20       	and	r11, r11
     8de:	a1 f0       	breq	.+40     	; 0x908 <Modbus_mster_transaction+0x3dc>
     8e0:	8e 01       	movw	r16, r28
     8e2:	0f 5f       	subi	r16, 0xFF	; 255
     8e4:	1f 4f       	sbci	r17, 0xFF	; 255
     8e6:	f1 2c       	mov	r15, r1
     8e8:	ef ef       	ldi	r30, 0xFF	; 255
     8ea:	ee 1a       	sub	r14, r30
     8ec:	fe 0a       	sbc	r15, r30
     8ee:	e0 0e       	add	r14, r16
     8f0:	f1 1e       	adc	r15, r17
     8f2:	e0 91 9f 03 	lds	r30, 0x039F	; 0x80039f <g_mod0_Serial_putc>
     8f6:	f0 91 a0 03 	lds	r31, 0x03A0	; 0x8003a0 <g_mod0_Serial_putc+0x1>
     8fa:	d8 01       	movw	r26, r16
     8fc:	8d 91       	ld	r24, X+
     8fe:	8d 01       	movw	r16, r26
     900:	19 95       	eicall
     902:	0e 15       	cp	r16, r14
     904:	1f 05       	cpc	r17, r15
     906:	a9 f7       	brne	.-22     	; 0x8f2 <Modbus_mster_transaction+0x3c6>
     908:	e0 91 9b 03 	lds	r30, 0x039B	; 0x80039b <g_mod0_Serial_flush>
     90c:	f0 91 9c 03 	lds	r31, 0x039C	; 0x80039c <g_mod0_Serial_flush+0x1>
     910:	19 95       	eicall
     912:	ef e8       	ldi	r30, 0x8F	; 143
     914:	f1 e0       	ldi	r31, 0x01	; 1
     916:	31 97       	sbiw	r30, 0x01	; 1
     918:	f1 f7       	brne	.-4      	; 0x916 <Modbus_mster_transaction+0x3ea>
     91a:	00 c0       	rjmp	.+0      	; 0x91c <Modbus_mster_transaction+0x3f0>
     91c:	00 00       	nop
     91e:	e0 91 a1 03 	lds	r30, 0x03A1	; 0x8003a1 <g_mod0_post_transmission>
     922:	f0 91 a2 03 	lds	r31, 0x03A2	; 0x8003a2 <g_mod0_post_transmission+0x1>
     926:	30 97       	sbiw	r30, 0x00	; 0
     928:	09 f0       	breq	.+2      	; 0x92c <Modbus_mster_transaction+0x400>
     92a:	19 95       	eicall
     92c:	ff ef       	ldi	r31, 0xFF	; 255
     92e:	23 ed       	ldi	r18, 0xD3	; 211
     930:	80 e3       	ldi	r24, 0x30	; 48
     932:	f1 50       	subi	r31, 0x01	; 1
     934:	20 40       	sbci	r18, 0x00	; 0
     936:	80 40       	sbci	r24, 0x00	; 0
     938:	e1 f7       	brne	.-8      	; 0x932 <Modbus_mster_transaction+0x406>
     93a:	00 c0       	rjmp	.+0      	; 0x93c <Modbus_mster_transaction+0x410>
     93c:	00 00       	nop
     93e:	0e 94 de 1e 	call	0x3dbc	; 0x3dbc <Get_millis>
     942:	4b 01       	movw	r8, r22
     944:	5c 01       	movw	r10, r24
     946:	08 e0       	ldi	r16, 0x08	; 8
     948:	10 e0       	ldi	r17, 0x00	; 0
     94a:	ed 2c       	mov	r14, r13
     94c:	f1 2c       	mov	r15, r1
     94e:	e0 91 99 03 	lds	r30, 0x0399	; 0x800399 <g_mod0_Serial_available>
     952:	f0 91 9a 03 	lds	r31, 0x039A	; 0x80039a <g_mod0_Serial_available+0x1>
     956:	19 95       	eicall
     958:	89 2b       	or	r24, r25
     95a:	91 f0       	breq	.+36     	; 0x980 <Modbus_mster_transaction+0x454>
     95c:	dd 24       	eor	r13, r13
     95e:	d3 94       	inc	r13
     960:	d1 0e       	add	r13, r17
     962:	e0 91 9d 03 	lds	r30, 0x039D	; 0x80039d <g_mod0_Serial_getc>
     966:	f0 91 9e 03 	lds	r31, 0x039E	; 0x80039e <g_mod0_Serial_getc+0x1>
     96a:	19 95       	eicall
     96c:	e1 e0       	ldi	r30, 0x01	; 1
     96e:	f0 e0       	ldi	r31, 0x00	; 0
     970:	ec 0f       	add	r30, r28
     972:	fd 1f       	adc	r31, r29
     974:	e1 0f       	add	r30, r17
     976:	f1 1d       	adc	r31, r1
     978:	80 83       	st	Z, r24
     97a:	01 50       	subi	r16, 0x01	; 1
     97c:	1d 2d       	mov	r17, r13
     97e:	07 c0       	rjmp	.+14     	; 0x98e <Modbus_mster_transaction+0x462>
     980:	e0 91 a5 03 	lds	r30, 0x03A5	; 0x8003a5 <g_mod0_idle>
     984:	f0 91 a6 03 	lds	r31, 0x03A6	; 0x8003a6 <g_mod0_idle+0x1>
     988:	30 97       	sbiw	r30, 0x00	; 0
     98a:	09 f0       	breq	.+2      	; 0x98e <Modbus_mster_transaction+0x462>
     98c:	19 95       	eicall
     98e:	15 30       	cpi	r17, 0x05	; 5
     990:	59 f5       	brne	.+86     	; 0x9e8 <Modbus_mster_transaction+0x4bc>
     992:	99 81       	ldd	r25, Y+1	; 0x01
     994:	80 91 b2 04 	lds	r24, 0x04B2	; 0x8004b2 <g_mod0_slave>
     998:	98 13       	cpse	r25, r24
     99a:	2b c4       	rjmp	.+2134   	; 0x11f2 <Modbus_mster_transaction+0xcc6>
     99c:	8a 81       	ldd	r24, Y+2	; 0x02
     99e:	28 2f       	mov	r18, r24
     9a0:	2f 77       	andi	r18, 0x7F	; 127
     9a2:	30 e0       	ldi	r19, 0x00	; 0
     9a4:	2e 15       	cp	r18, r14
     9a6:	3f 05       	cpc	r19, r15
     9a8:	09 f0       	breq	.+2      	; 0x9ac <Modbus_mster_transaction+0x480>
     9aa:	25 c4       	rjmp	.+2122   	; 0x11f6 <Modbus_mster_transaction+0xcca>
     9ac:	88 23       	and	r24, r24
     9ae:	2c f4       	brge	.+10     	; 0x9ba <Modbus_mster_transaction+0x48e>
     9b0:	8b 81       	ldd	r24, Y+3	; 0x03
     9b2:	88 23       	and	r24, r24
     9b4:	09 f4       	brne	.+2      	; 0x9b8 <Modbus_mster_transaction+0x48c>
     9b6:	3d c0       	rjmp	.+122    	; 0xa32 <Modbus_mster_transaction+0x506>
     9b8:	ca c0       	rjmp	.+404    	; 0xb4e <Modbus_mster_transaction+0x622>
     9ba:	81 31       	cpi	r24, 0x11	; 17
     9bc:	58 f4       	brcc	.+22     	; 0x9d4 <Modbus_mster_transaction+0x4a8>
     9be:	8f 30       	cpi	r24, 0x0F	; 15
     9c0:	08 f0       	brcs	.+2      	; 0x9c4 <Modbus_mster_transaction+0x498>
     9c2:	b5 c3       	rjmp	.+1898   	; 0x112e <Modbus_mster_transaction+0xc02>
     9c4:	81 30       	cpi	r24, 0x01	; 1
     9c6:	80 f0       	brcs	.+32     	; 0x9e8 <Modbus_mster_transaction+0x4bc>
     9c8:	85 30       	cpi	r24, 0x05	; 5
     9ca:	68 f0       	brcs	.+26     	; 0x9e6 <Modbus_mster_transaction+0x4ba>
     9cc:	87 30       	cpi	r24, 0x07	; 7
     9ce:	08 f4       	brcc	.+2      	; 0x9d2 <Modbus_mster_transaction+0x4a6>
     9d0:	ae c3       	rjmp	.+1884   	; 0x112e <Modbus_mster_transaction+0xc02>
     9d2:	0a c0       	rjmp	.+20     	; 0x9e8 <Modbus_mster_transaction+0x4bc>
     9d4:	87 31       	cpi	r24, 0x17	; 23
     9d6:	39 f0       	breq	.+14     	; 0x9e6 <Modbus_mster_transaction+0x4ba>
     9d8:	8f 3f       	cpi	r24, 0xFF	; 255
     9da:	09 f4       	brne	.+2      	; 0x9de <Modbus_mster_transaction+0x4b2>
     9dc:	a8 c3       	rjmp	.+1872   	; 0x112e <Modbus_mster_transaction+0xc02>
     9de:	86 31       	cpi	r24, 0x16	; 22
     9e0:	19 f4       	brne	.+6      	; 0x9e8 <Modbus_mster_transaction+0x4bc>
     9e2:	05 e0       	ldi	r16, 0x05	; 5
     9e4:	a5 c3       	rjmp	.+1866   	; 0x1130 <Modbus_mster_transaction+0xc04>
     9e6:	0b 81       	ldd	r16, Y+3	; 0x03
     9e8:	0e 94 de 1e 	call	0x3dbc	; 0x3dbc <Get_millis>
     9ec:	dc 01       	movw	r26, r24
     9ee:	cb 01       	movw	r24, r22
     9f0:	88 19       	sub	r24, r8
     9f2:	99 09       	sbc	r25, r9
     9f4:	aa 09       	sbc	r26, r10
     9f6:	bb 09       	sbc	r27, r11
     9f8:	81 3d       	cpi	r24, 0xD1	; 209
     9fa:	97 40       	sbci	r25, 0x07	; 7
     9fc:	a1 05       	cpc	r26, r1
     9fe:	b1 05       	cpc	r27, r1
     a00:	08 f4       	brcc	.+2      	; 0xa04 <Modbus_mster_transaction+0x4d8>
     a02:	eb c3       	rjmp	.+2006   	; 0x11da <Modbus_mster_transaction+0xcae>
     a04:	80 e0       	ldi	r24, 0x00	; 0
     a06:	92 e0       	ldi	r25, 0x02	; 2
     a08:	48 d7       	rcall	.+3728   	; 0x189a <UART0_puts>
     a0a:	8a e0       	ldi	r24, 0x0A	; 10
     a0c:	11 d7       	rcall	.+3618   	; 0x1830 <UART0_putc>
     a0e:	01 11       	cpse	r16, r1
     a10:	f4 c3       	rjmp	.+2024   	; 0x11fa <Modbus_mster_transaction+0xcce>
     a12:	82 ee       	ldi	r24, 0xE2	; 226
     a14:	81 11       	cpse	r24, r1
     a16:	9b c0       	rjmp	.+310    	; 0xb4e <Modbus_mster_transaction+0x622>
     a18:	15 30       	cpi	r17, 0x05	; 5
     a1a:	08 f4       	brcc	.+2      	; 0xa1e <Modbus_mster_transaction+0x4f2>
     a1c:	a9 c3       	rjmp	.+1874   	; 0x1170 <Modbus_mster_transaction+0xc44>
     a1e:	a1 2e       	mov	r10, r17
     a20:	b1 2c       	mov	r11, r1
     a22:	75 01       	movw	r14, r10
     a24:	f2 e0       	ldi	r31, 0x02	; 2
     a26:	ef 1a       	sub	r14, r31
     a28:	f1 08       	sbc	r15, r1
     a2a:	1e 14       	cp	r1, r14
     a2c:	1f 04       	cpc	r1, r15
     a2e:	5c f0       	brlt	.+22     	; 0xa46 <Modbus_mster_transaction+0x51a>
     a30:	8e c3       	rjmp	.+1820   	; 0x114e <Modbus_mster_transaction+0xc22>
     a32:	0f 2e       	mov	r0, r31
     a34:	f3 e0       	ldi	r31, 0x03	; 3
     a36:	ef 2e       	mov	r14, r31
     a38:	f1 2c       	mov	r15, r1
     a3a:	f0 2d       	mov	r31, r0
     a3c:	0f 2e       	mov	r0, r31
     a3e:	f5 e0       	ldi	r31, 0x05	; 5
     a40:	af 2e       	mov	r10, r31
     a42:	b1 2c       	mov	r11, r1
     a44:	f0 2d       	mov	r31, r0
     a46:	20 e0       	ldi	r18, 0x00	; 0
     a48:	30 e0       	ldi	r19, 0x00	; 0
     a4a:	8f ef       	ldi	r24, 0xFF	; 255
     a4c:	9f ef       	ldi	r25, 0xFF	; 255
     a4e:	10 e0       	ldi	r17, 0x00	; 0
     a50:	e1 e0       	ldi	r30, 0x01	; 1
     a52:	f0 e0       	ldi	r31, 0x00	; 0
     a54:	ec 0f       	add	r30, r28
     a56:	fd 1f       	adc	r31, r29
     a58:	e2 0f       	add	r30, r18
     a5a:	f3 1f       	adc	r31, r19
     a5c:	60 81       	ld	r22, Z
     a5e:	0e 94 bd 1e 	call	0x3d7a	; 0x3d7a <crc16_update>
     a62:	1f 5f       	subi	r17, 0xFF	; 255
     a64:	21 2f       	mov	r18, r17
     a66:	30 e0       	ldi	r19, 0x00	; 0
     a68:	2e 15       	cp	r18, r14
     a6a:	3f 05       	cpc	r19, r15
     a6c:	8c f3       	brlt	.-30     	; 0xa50 <Modbus_mster_transaction+0x524>
     a6e:	71 c3       	rjmp	.+1762   	; 0x1152 <Modbus_mster_transaction+0xc26>
     a70:	89 2f       	mov	r24, r25
     a72:	99 27       	eor	r25, r25
     a74:	fe 01       	movw	r30, r28
     a76:	ea 0d       	add	r30, r10
     a78:	fb 1d       	adc	r31, r11
     a7a:	20 81       	ld	r18, Z
     a7c:	30 e0       	ldi	r19, 0x00	; 0
     a7e:	82 17       	cp	r24, r18
     a80:	93 07       	cpc	r25, r19
     a82:	09 f0       	breq	.+2      	; 0xa86 <Modbus_mster_transaction+0x55a>
     a84:	73 c3       	rjmp	.+1766   	; 0x116c <Modbus_mster_transaction+0xc40>
     a86:	74 c3       	rjmp	.+1768   	; 0x1170 <Modbus_mster_transaction+0xc44>
     a88:	9b 81       	ldd	r25, Y+3	; 0x03
     a8a:	96 95       	lsr	r25
     a8c:	e9 f5       	brne	.+122    	; 0xb08 <Modbus_mster_transaction+0x5dc>
     a8e:	80 e0       	ldi	r24, 0x00	; 0
     a90:	5e c0       	rjmp	.+188    	; 0xb4e <Modbus_mster_transaction+0x622>
     a92:	7b 81       	ldd	r23, Y+3	; 0x03
     a94:	97 2f       	mov	r25, r23
     a96:	96 95       	lsr	r25
     a98:	09 f4       	brne	.+2      	; 0xa9c <Modbus_mster_transaction+0x570>
     a9a:	78 c3       	rjmp	.+1776   	; 0x118c <Modbus_mster_transaction+0xc60>
     a9c:	fe 01       	movw	r30, r28
     a9e:	31 96       	adiw	r30, 0x01	; 1
     aa0:	40 e0       	ldi	r20, 0x00	; 0
     aa2:	50 e0       	ldi	r21, 0x00	; 0
     aa4:	80 e0       	ldi	r24, 0x00	; 0
     aa6:	80 34       	cpi	r24, 0x40	; 64
     aa8:	70 f4       	brcc	.+28     	; 0xac6 <Modbus_mster_transaction+0x59a>
     aaa:	24 81       	ldd	r18, Z+4	; 0x04
     aac:	30 e0       	ldi	r19, 0x00	; 0
     aae:	32 2f       	mov	r19, r18
     ab0:	22 27       	eor	r18, r18
     ab2:	63 81       	ldd	r22, Z+3	; 0x03
     ab4:	26 2b       	or	r18, r22
     ab6:	da 01       	movw	r26, r20
     ab8:	aa 0f       	add	r26, r26
     aba:	bb 1f       	adc	r27, r27
     abc:	a2 5d       	subi	r26, 0xD2	; 210
     abe:	bb 4f       	sbci	r27, 0xFB	; 251
     ac0:	11 96       	adiw	r26, 0x01	; 1
     ac2:	3c 93       	st	X, r19
     ac4:	2e 93       	st	-X, r18
     ac6:	8f 5f       	subi	r24, 0xFF	; 255
     ac8:	4f 5f       	subi	r20, 0xFF	; 255
     aca:	5f 4f       	sbci	r21, 0xFF	; 255
     acc:	32 96       	adiw	r30, 0x02	; 2
     ace:	89 13       	cpse	r24, r25
     ad0:	ea cf       	rjmp	.-44     	; 0xaa6 <Modbus_mster_transaction+0x57a>
     ad2:	8f ef       	ldi	r24, 0xFF	; 255
     ad4:	89 0f       	add	r24, r25
     ad6:	80 93 a7 03 	sts	0x03A7, r24	; 0x8003a7 <g_mod0_response_buffer_length>
     ada:	70 ff       	sbrs	r23, 0
     adc:	35 c0       	rjmp	.+106    	; 0xb48 <Modbus_mster_transaction+0x61c>
     ade:	90 34       	cpi	r25, 0x40	; 64
     ae0:	70 f4       	brcc	.+28     	; 0xafe <Modbus_mster_transaction+0x5d2>
     ae2:	29 2f       	mov	r18, r25
     ae4:	30 e0       	ldi	r19, 0x00	; 0
     ae6:	22 0f       	add	r18, r18
     ae8:	33 1f       	adc	r19, r19
     aea:	fe 01       	movw	r30, r28
     aec:	e2 0f       	add	r30, r18
     aee:	f3 1f       	adc	r31, r19
     af0:	44 81       	ldd	r20, Z+4	; 0x04
     af2:	50 e0       	ldi	r21, 0x00	; 0
     af4:	f9 01       	movw	r30, r18
     af6:	e2 5d       	subi	r30, 0xD2	; 210
     af8:	fb 4f       	sbci	r31, 0xFB	; 251
     afa:	51 83       	std	Z+1, r21	; 0x01
     afc:	40 83       	st	Z, r20
     afe:	9f 5f       	subi	r25, 0xFF	; 255
     b00:	90 93 a7 03 	sts	0x03A7, r25	; 0x8003a7 <g_mod0_response_buffer_length>
     b04:	80 e0       	ldi	r24, 0x00	; 0
     b06:	23 c0       	rjmp	.+70     	; 0xb4e <Modbus_mster_transaction+0x622>
     b08:	fe 01       	movw	r30, r28
     b0a:	31 96       	adiw	r30, 0x01	; 1
     b0c:	40 e0       	ldi	r20, 0x00	; 0
     b0e:	50 e0       	ldi	r21, 0x00	; 0
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	80 34       	cpi	r24, 0x40	; 64
     b14:	70 f4       	brcc	.+28     	; 0xb32 <Modbus_mster_transaction+0x606>
     b16:	23 81       	ldd	r18, Z+3	; 0x03
     b18:	30 e0       	ldi	r19, 0x00	; 0
     b1a:	32 2f       	mov	r19, r18
     b1c:	22 27       	eor	r18, r18
     b1e:	64 81       	ldd	r22, Z+4	; 0x04
     b20:	26 2b       	or	r18, r22
     b22:	da 01       	movw	r26, r20
     b24:	aa 0f       	add	r26, r26
     b26:	bb 1f       	adc	r27, r27
     b28:	a2 5d       	subi	r26, 0xD2	; 210
     b2a:	bb 4f       	sbci	r27, 0xFB	; 251
     b2c:	11 96       	adiw	r26, 0x01	; 1
     b2e:	3c 93       	st	X, r19
     b30:	2e 93       	st	-X, r18
     b32:	8f 5f       	subi	r24, 0xFF	; 255
     b34:	4f 5f       	subi	r20, 0xFF	; 255
     b36:	5f 4f       	sbci	r21, 0xFF	; 255
     b38:	32 96       	adiw	r30, 0x02	; 2
     b3a:	89 13       	cpse	r24, r25
     b3c:	ea cf       	rjmp	.-44     	; 0xb12 <Modbus_mster_transaction+0x5e6>
     b3e:	91 50       	subi	r25, 0x01	; 1
     b40:	90 93 a7 03 	sts	0x03A7, r25	; 0x8003a7 <g_mod0_response_buffer_length>
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	03 c0       	rjmp	.+6      	; 0xb4e <Modbus_mster_transaction+0x622>
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	01 c0       	rjmp	.+2      	; 0xb4e <Modbus_mster_transaction+0x622>
     b4c:	80 e0       	ldi	r24, 0x00	; 0
     b4e:	10 92 a9 03 	sts	0x03A9, r1	; 0x8003a9 <g_mod0_transmit_buffer_index>
     b52:	10 92 a8 03 	sts	0x03A8, r1	; 0x8003a8 <g_mod0_response_buffer_index>
     b56:	59 c3       	rjmp	.+1714   	; 0x120a <Modbus_mster_transaction+0xcde>
     b58:	81 30       	cpi	r24, 0x01	; 1
     b5a:	09 f0       	breq	.+2      	; 0xb5e <Modbus_mster_transaction+0x632>
     b5c:	e6 c2       	rjmp	.+1484   	; 0x112a <Modbus_mster_transaction+0xbfe>
     b5e:	80 91 98 03 	lds	r24, 0x0398	; 0x800398 <g_mod1_slave>
     b62:	89 83       	std	Y+1, r24	; 0x01
     b64:	2f ef       	ldi	r18, 0xFF	; 255
     b66:	62 13       	cpse	r22, r18
     b68:	06 c0       	rjmp	.+12     	; 0xb76 <Modbus_mster_transaction+0x64a>
     b6a:	8f e0       	ldi	r24, 0x0F	; 15
     b6c:	8a 83       	std	Y+2, r24	; 0x02
     b6e:	68 94       	set
     b70:	bb 24       	eor	r11, r11
     b72:	b1 f8       	bld	r11, 1
     b74:	32 c0       	rjmp	.+100    	; 0xbda <Modbus_mster_transaction+0x6ae>
     b76:	6a 83       	std	Y+2, r22	; 0x02
     b78:	81 e0       	ldi	r24, 0x01	; 1
     b7a:	68 17       	cp	r22, r24
     b7c:	b8 f0       	brcs	.+46     	; 0xbac <Modbus_mster_transaction+0x680>
     b7e:	94 e0       	ldi	r25, 0x04	; 4
     b80:	96 17       	cp	r25, r22
     b82:	18 f4       	brcc	.+6      	; 0xb8a <Modbus_mster_transaction+0x65e>
     b84:	a7 e1       	ldi	r26, 0x17	; 23
     b86:	6a 13       	cpse	r22, r26
     b88:	11 c0       	rjmp	.+34     	; 0xbac <Modbus_mster_transaction+0x680>
     b8a:	80 91 96 03 	lds	r24, 0x0396	; 0x800396 <g_mod1_read_address>
     b8e:	90 91 97 03 	lds	r25, 0x0397	; 0x800397 <g_mod1_read_address+0x1>
     b92:	9b 83       	std	Y+3, r25	; 0x03
     b94:	8c 83       	std	Y+4, r24	; 0x04
     b96:	80 91 94 03 	lds	r24, 0x0394	; 0x800394 <g_mod1_read_qty>
     b9a:	90 91 95 03 	lds	r25, 0x0395	; 0x800395 <g_mod1_read_qty+0x1>
     b9e:	9d 83       	std	Y+5, r25	; 0x05
     ba0:	8e 83       	std	Y+6, r24	; 0x06
     ba2:	0f 2e       	mov	r0, r31
     ba4:	f6 e0       	ldi	r31, 0x06	; 6
     ba6:	bf 2e       	mov	r11, r31
     ba8:	f0 2d       	mov	r31, r0
     baa:	03 c0       	rjmp	.+6      	; 0xbb2 <Modbus_mster_transaction+0x686>
     bac:	68 94       	set
     bae:	bb 24       	eor	r11, r11
     bb0:	b1 f8       	bld	r11, 1
     bb2:	b0 e1       	ldi	r27, 0x10	; 16
     bb4:	bd 15       	cp	r27, r13
     bb6:	40 f0       	brcs	.+16     	; 0xbc8 <Modbus_mster_transaction+0x69c>
     bb8:	ef e0       	ldi	r30, 0x0F	; 15
     bba:	de 16       	cp	r13, r30
     bbc:	70 f4       	brcc	.+28     	; 0xbda <Modbus_mster_transaction+0x6ae>
     bbe:	8b ef       	ldi	r24, 0xFB	; 251
     bc0:	8d 0d       	add	r24, r13
     bc2:	82 30       	cpi	r24, 0x02	; 2
     bc4:	00 f5       	brcc	.+64     	; 0xc06 <Modbus_mster_transaction+0x6da>
     bc6:	09 c0       	rjmp	.+18     	; 0xbda <Modbus_mster_transaction+0x6ae>
     bc8:	f6 e1       	ldi	r31, 0x16	; 22
     bca:	df 16       	cp	r13, r31
     bcc:	e0 f0       	brcs	.+56     	; 0xc06 <Modbus_mster_transaction+0x6da>
     bce:	27 e1       	ldi	r18, 0x17	; 23
     bd0:	2d 15       	cp	r18, r13
     bd2:	18 f4       	brcc	.+6      	; 0xbda <Modbus_mster_transaction+0x6ae>
     bd4:	8f ef       	ldi	r24, 0xFF	; 255
     bd6:	d8 12       	cpse	r13, r24
     bd8:	16 c0       	rjmp	.+44     	; 0xc06 <Modbus_mster_transaction+0x6da>
     bda:	90 91 12 03 	lds	r25, 0x0312	; 0x800312 <g_mod1_write_address>
     bde:	80 91 13 03 	lds	r24, 0x0313	; 0x800313 <g_mod1_write_address+0x1>
     be2:	e1 e0       	ldi	r30, 0x01	; 1
     be4:	f0 e0       	ldi	r31, 0x00	; 0
     be6:	ec 0f       	add	r30, r28
     be8:	fd 1f       	adc	r31, r29
     bea:	eb 0d       	add	r30, r11
     bec:	f1 1d       	adc	r31, r1
     bee:	80 83       	st	Z, r24
     bf0:	81 e0       	ldi	r24, 0x01	; 1
     bf2:	8b 0d       	add	r24, r11
     bf4:	e1 e0       	ldi	r30, 0x01	; 1
     bf6:	f0 e0       	ldi	r31, 0x00	; 0
     bf8:	ec 0f       	add	r30, r28
     bfa:	fd 1f       	adc	r31, r29
     bfc:	e8 0f       	add	r30, r24
     bfe:	f1 1d       	adc	r31, r1
     c00:	b3 94       	inc	r11
     c02:	b3 94       	inc	r11
     c04:	90 83       	st	Z, r25
     c06:	90 e1       	ldi	r25, 0x10	; 16
     c08:	d9 16       	cp	r13, r25
     c0a:	09 f4       	brne	.+2      	; 0xc0e <Modbus_mster_transaction+0x6e2>
     c0c:	ad c0       	rjmp	.+346    	; 0xd68 <Modbus_mster_transaction+0x83c>
     c0e:	9d 15       	cp	r25, r13
     c10:	58 f0       	brcs	.+22     	; 0xc28 <Modbus_mster_transaction+0x6fc>
     c12:	a6 e0       	ldi	r26, 0x06	; 6
     c14:	da 16       	cp	r13, r26
     c16:	61 f1       	breq	.+88     	; 0xc70 <Modbus_mster_transaction+0x744>
     c18:	bf e0       	ldi	r27, 0x0F	; 15
     c1a:	db 16       	cp	r13, r27
     c1c:	09 f4       	brne	.+2      	; 0xc20 <Modbus_mster_transaction+0x6f4>
     c1e:	41 c0       	rjmp	.+130    	; 0xca2 <Modbus_mster_transaction+0x776>
     c20:	e5 e0       	ldi	r30, 0x05	; 5
     c22:	de 12       	cpse	r13, r30
     c24:	1b c1       	rjmp	.+566    	; 0xe5c <Modbus_mster_transaction+0x930>
     c26:	0d c0       	rjmp	.+26     	; 0xc42 <Modbus_mster_transaction+0x716>
     c28:	f7 e1       	ldi	r31, 0x17	; 23
     c2a:	df 16       	cp	r13, r31
     c2c:	09 f4       	brne	.+2      	; 0xc30 <Modbus_mster_transaction+0x704>
     c2e:	9c c0       	rjmp	.+312    	; 0xd68 <Modbus_mster_transaction+0x83c>
     c30:	2f ef       	ldi	r18, 0xFF	; 255
     c32:	d2 16       	cp	r13, r18
     c34:	09 f4       	brne	.+2      	; 0xc38 <Modbus_mster_transaction+0x70c>
     c36:	98 c0       	rjmp	.+304    	; 0xd68 <Modbus_mster_transaction+0x83c>
     c38:	86 e1       	ldi	r24, 0x16	; 22
     c3a:	d8 16       	cp	r13, r24
     c3c:	09 f4       	brne	.+2      	; 0xc40 <Modbus_mster_transaction+0x714>
     c3e:	e0 c0       	rjmp	.+448    	; 0xe00 <Modbus_mster_transaction+0x8d4>
     c40:	0d c1       	rjmp	.+538    	; 0xe5c <Modbus_mster_transaction+0x930>
     c42:	90 91 10 03 	lds	r25, 0x0310	; 0x800310 <g_mod1_write_qty>
     c46:	80 91 11 03 	lds	r24, 0x0311	; 0x800311 <g_mod1_write_qty+0x1>
     c4a:	e1 e0       	ldi	r30, 0x01	; 1
     c4c:	f0 e0       	ldi	r31, 0x00	; 0
     c4e:	ec 0f       	add	r30, r28
     c50:	fd 1f       	adc	r31, r29
     c52:	eb 0d       	add	r30, r11
     c54:	f1 1d       	adc	r31, r1
     c56:	80 83       	st	Z, r24
     c58:	81 e0       	ldi	r24, 0x01	; 1
     c5a:	8b 0d       	add	r24, r11
     c5c:	e1 e0       	ldi	r30, 0x01	; 1
     c5e:	f0 e0       	ldi	r31, 0x00	; 0
     c60:	ec 0f       	add	r30, r28
     c62:	fd 1f       	adc	r31, r29
     c64:	e8 0f       	add	r30, r24
     c66:	f1 1d       	adc	r31, r1
     c68:	b3 94       	inc	r11
     c6a:	b3 94       	inc	r11
     c6c:	90 83       	st	Z, r25
     c6e:	f6 c0       	rjmp	.+492    	; 0xe5c <Modbus_mster_transaction+0x930>
     c70:	e0 e9       	ldi	r30, 0x90	; 144
     c72:	f2 e0       	ldi	r31, 0x02	; 2
     c74:	80 81       	ld	r24, Z
     c76:	91 81       	ldd	r25, Z+1	; 0x01
     c78:	a1 e0       	ldi	r26, 0x01	; 1
     c7a:	b0 e0       	ldi	r27, 0x00	; 0
     c7c:	ac 0f       	add	r26, r28
     c7e:	bd 1f       	adc	r27, r29
     c80:	ab 0d       	add	r26, r11
     c82:	b1 1d       	adc	r27, r1
     c84:	9c 93       	st	X, r25
     c86:	20 81       	ld	r18, Z
     c88:	31 81       	ldd	r19, Z+1	; 0x01
     c8a:	81 e0       	ldi	r24, 0x01	; 1
     c8c:	8b 0d       	add	r24, r11
     c8e:	e1 e0       	ldi	r30, 0x01	; 1
     c90:	f0 e0       	ldi	r31, 0x00	; 0
     c92:	ec 0f       	add	r30, r28
     c94:	fd 1f       	adc	r31, r29
     c96:	e8 0f       	add	r30, r24
     c98:	f1 1d       	adc	r31, r1
     c9a:	b3 94       	inc	r11
     c9c:	b3 94       	inc	r11
     c9e:	20 83       	st	Z, r18
     ca0:	dd c0       	rjmp	.+442    	; 0xe5c <Modbus_mster_transaction+0x930>
     ca2:	80 91 10 03 	lds	r24, 0x0310	; 0x800310 <g_mod1_write_qty>
     ca6:	90 91 11 03 	lds	r25, 0x0311	; 0x800311 <g_mod1_write_qty+0x1>
     caa:	e1 e0       	ldi	r30, 0x01	; 1
     cac:	f0 e0       	ldi	r31, 0x00	; 0
     cae:	ec 0f       	add	r30, r28
     cb0:	fd 1f       	adc	r31, r29
     cb2:	eb 0d       	add	r30, r11
     cb4:	f1 1d       	adc	r31, r1
     cb6:	90 83       	st	Z, r25
     cb8:	22 e0       	ldi	r18, 0x02	; 2
     cba:	2b 0d       	add	r18, r11
     cbc:	31 e0       	ldi	r19, 0x01	; 1
     cbe:	3b 0d       	add	r19, r11
     cc0:	e1 e0       	ldi	r30, 0x01	; 1
     cc2:	f0 e0       	ldi	r31, 0x00	; 0
     cc4:	ec 0f       	add	r30, r28
     cc6:	fd 1f       	adc	r31, r29
     cc8:	e3 0f       	add	r30, r19
     cca:	f1 1d       	adc	r31, r1
     ccc:	80 83       	st	Z, r24
     cce:	ac 01       	movw	r20, r24
     cd0:	47 70       	andi	r20, 0x07	; 7
     cd2:	55 27       	eor	r21, r21
     cd4:	45 2b       	or	r20, r21
     cd6:	49 f0       	breq	.+18     	; 0xcea <Modbus_mster_transaction+0x7be>
     cd8:	96 95       	lsr	r25
     cda:	87 95       	ror	r24
     cdc:	96 95       	lsr	r25
     cde:	87 95       	ror	r24
     ce0:	96 95       	lsr	r25
     ce2:	87 95       	ror	r24
     ce4:	91 e0       	ldi	r25, 0x01	; 1
     ce6:	98 0f       	add	r25, r24
     ce8:	07 c0       	rjmp	.+14     	; 0xcf8 <Modbus_mster_transaction+0x7cc>
     cea:	96 95       	lsr	r25
     cec:	87 95       	ror	r24
     cee:	96 95       	lsr	r25
     cf0:	87 95       	ror	r24
     cf2:	96 95       	lsr	r25
     cf4:	87 95       	ror	r24
     cf6:	98 2f       	mov	r25, r24
     cf8:	a3 e0       	ldi	r26, 0x03	; 3
     cfa:	ba 0e       	add	r11, r26
     cfc:	fe 01       	movw	r30, r28
     cfe:	e2 0f       	add	r30, r18
     d00:	f1 1d       	adc	r31, r1
     d02:	91 83       	std	Z+1, r25	; 0x01
     d04:	99 23       	and	r25, r25
     d06:	09 f4       	brne	.+2      	; 0xd0a <Modbus_mster_transaction+0x7de>
     d08:	a9 c0       	rjmp	.+338    	; 0xe5c <Modbus_mster_transaction+0x930>
     d0a:	80 e0       	ldi	r24, 0x00	; 0
     d0c:	28 2f       	mov	r18, r24
     d0e:	21 70       	andi	r18, 0x01	; 1
     d10:	80 ff       	sbrs	r24, 0
     d12:	03 c0       	rjmp	.+6      	; 0xd1a <Modbus_mster_transaction+0x7ee>
     d14:	21 30       	cpi	r18, 0x01	; 1
     d16:	99 f0       	breq	.+38     	; 0xd3e <Modbus_mster_transaction+0x812>
     d18:	23 c0       	rjmp	.+70     	; 0xd60 <Modbus_mster_transaction+0x834>
     d1a:	e8 2f       	mov	r30, r24
     d1c:	e6 95       	lsr	r30
     d1e:	f0 e0       	ldi	r31, 0x00	; 0
     d20:	ee 0f       	add	r30, r30
     d22:	ff 1f       	adc	r31, r31
     d24:	e0 57       	subi	r30, 0x70	; 112
     d26:	fd 4f       	sbci	r31, 0xFD	; 253
     d28:	20 81       	ld	r18, Z
     d2a:	31 81       	ldd	r19, Z+1	; 0x01
     d2c:	e1 e0       	ldi	r30, 0x01	; 1
     d2e:	f0 e0       	ldi	r31, 0x00	; 0
     d30:	ec 0f       	add	r30, r28
     d32:	fd 1f       	adc	r31, r29
     d34:	eb 0d       	add	r30, r11
     d36:	f1 1d       	adc	r31, r1
     d38:	20 83       	st	Z, r18
     d3a:	b3 94       	inc	r11
     d3c:	11 c0       	rjmp	.+34     	; 0xd60 <Modbus_mster_transaction+0x834>
     d3e:	e8 2f       	mov	r30, r24
     d40:	e6 95       	lsr	r30
     d42:	f0 e0       	ldi	r31, 0x00	; 0
     d44:	ee 0f       	add	r30, r30
     d46:	ff 1f       	adc	r31, r31
     d48:	e0 57       	subi	r30, 0x70	; 112
     d4a:	fd 4f       	sbci	r31, 0xFD	; 253
     d4c:	20 81       	ld	r18, Z
     d4e:	31 81       	ldd	r19, Z+1	; 0x01
     d50:	e1 e0       	ldi	r30, 0x01	; 1
     d52:	f0 e0       	ldi	r31, 0x00	; 0
     d54:	ec 0f       	add	r30, r28
     d56:	fd 1f       	adc	r31, r29
     d58:	eb 0d       	add	r30, r11
     d5a:	f1 1d       	adc	r31, r1
     d5c:	30 83       	st	Z, r19
     d5e:	b3 94       	inc	r11
     d60:	8f 5f       	subi	r24, 0xFF	; 255
     d62:	98 13       	cpse	r25, r24
     d64:	d3 cf       	rjmp	.-90     	; 0xd0c <Modbus_mster_transaction+0x7e0>
     d66:	7a c0       	rjmp	.+244    	; 0xe5c <Modbus_mster_transaction+0x930>
     d68:	80 91 10 03 	lds	r24, 0x0310	; 0x800310 <g_mod1_write_qty>
     d6c:	90 91 11 03 	lds	r25, 0x0311	; 0x800311 <g_mod1_write_qty+0x1>
     d70:	e1 e0       	ldi	r30, 0x01	; 1
     d72:	f0 e0       	ldi	r31, 0x00	; 0
     d74:	ec 0f       	add	r30, r28
     d76:	fd 1f       	adc	r31, r29
     d78:	eb 0d       	add	r30, r11
     d7a:	f1 1d       	adc	r31, r1
     d7c:	90 83       	st	Z, r25
     d7e:	21 e0       	ldi	r18, 0x01	; 1
     d80:	2b 0d       	add	r18, r11
     d82:	e1 e0       	ldi	r30, 0x01	; 1
     d84:	f0 e0       	ldi	r31, 0x00	; 0
     d86:	ec 0f       	add	r30, r28
     d88:	fd 1f       	adc	r31, r29
     d8a:	e2 0f       	add	r30, r18
     d8c:	f1 1d       	adc	r31, r1
     d8e:	80 83       	st	Z, r24
     d90:	22 e0       	ldi	r18, 0x02	; 2
     d92:	2b 0d       	add	r18, r11
     d94:	e1 e0       	ldi	r30, 0x01	; 1
     d96:	f0 e0       	ldi	r31, 0x00	; 0
     d98:	ec 0f       	add	r30, r28
     d9a:	fd 1f       	adc	r31, r29
     d9c:	e2 0f       	add	r30, r18
     d9e:	f1 1d       	adc	r31, r1
     da0:	b3 e0       	ldi	r27, 0x03	; 3
     da2:	bb 0e       	add	r11, r27
     da4:	28 2f       	mov	r18, r24
     da6:	22 0f       	add	r18, r18
     da8:	20 83       	st	Z, r18
     daa:	ac 01       	movw	r20, r24
     dac:	55 27       	eor	r21, r21
     dae:	14 16       	cp	r1, r20
     db0:	15 06       	cpc	r1, r21
     db2:	0c f0       	brlt	.+2      	; 0xdb6 <Modbus_mster_transaction+0x88a>
     db4:	53 c0       	rjmp	.+166    	; 0xe5c <Modbus_mster_transaction+0x930>
     db6:	80 e0       	ldi	r24, 0x00	; 0
     db8:	90 e0       	ldi	r25, 0x00	; 0
     dba:	20 e0       	ldi	r18, 0x00	; 0
     dbc:	88 0f       	add	r24, r24
     dbe:	99 1f       	adc	r25, r25
     dc0:	fc 01       	movw	r30, r24
     dc2:	e0 57       	subi	r30, 0x70	; 112
     dc4:	fd 4f       	sbci	r31, 0xFD	; 253
     dc6:	80 81       	ld	r24, Z
     dc8:	91 81       	ldd	r25, Z+1	; 0x01
     dca:	a1 e0       	ldi	r26, 0x01	; 1
     dcc:	b0 e0       	ldi	r27, 0x00	; 0
     dce:	ac 0f       	add	r26, r28
     dd0:	bd 1f       	adc	r27, r29
     dd2:	ab 0d       	add	r26, r11
     dd4:	b1 1d       	adc	r27, r1
     dd6:	9c 93       	st	X, r25
     dd8:	60 81       	ld	r22, Z
     dda:	71 81       	ldd	r23, Z+1	; 0x01
     ddc:	81 e0       	ldi	r24, 0x01	; 1
     dde:	8b 0d       	add	r24, r11
     de0:	e1 e0       	ldi	r30, 0x01	; 1
     de2:	f0 e0       	ldi	r31, 0x00	; 0
     de4:	ec 0f       	add	r30, r28
     de6:	fd 1f       	adc	r31, r29
     de8:	e8 0f       	add	r30, r24
     dea:	f1 1d       	adc	r31, r1
     dec:	b3 94       	inc	r11
     dee:	b3 94       	inc	r11
     df0:	60 83       	st	Z, r22
     df2:	2f 5f       	subi	r18, 0xFF	; 255
     df4:	82 2f       	mov	r24, r18
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	84 17       	cp	r24, r20
     dfa:	95 07       	cpc	r25, r21
     dfc:	fc f2       	brlt	.-66     	; 0xdbc <Modbus_mster_transaction+0x890>
     dfe:	2e c0       	rjmp	.+92     	; 0xe5c <Modbus_mster_transaction+0x930>
     e00:	e0 e9       	ldi	r30, 0x90	; 144
     e02:	f2 e0       	ldi	r31, 0x02	; 2
     e04:	80 81       	ld	r24, Z
     e06:	91 81       	ldd	r25, Z+1	; 0x01
     e08:	a1 e0       	ldi	r26, 0x01	; 1
     e0a:	b0 e0       	ldi	r27, 0x00	; 0
     e0c:	ac 0f       	add	r26, r28
     e0e:	bd 1f       	adc	r27, r29
     e10:	ab 0d       	add	r26, r11
     e12:	b1 1d       	adc	r27, r1
     e14:	9c 93       	st	X, r25
     e16:	80 81       	ld	r24, Z
     e18:	91 81       	ldd	r25, Z+1	; 0x01
     e1a:	91 e0       	ldi	r25, 0x01	; 1
     e1c:	9b 0d       	add	r25, r11
     e1e:	a1 e0       	ldi	r26, 0x01	; 1
     e20:	b0 e0       	ldi	r27, 0x00	; 0
     e22:	ac 0f       	add	r26, r28
     e24:	bd 1f       	adc	r27, r29
     e26:	a9 0f       	add	r26, r25
     e28:	b1 1d       	adc	r27, r1
     e2a:	8c 93       	st	X, r24
     e2c:	82 81       	ldd	r24, Z+2	; 0x02
     e2e:	93 81       	ldd	r25, Z+3	; 0x03
     e30:	82 e0       	ldi	r24, 0x02	; 2
     e32:	8b 0d       	add	r24, r11
     e34:	a1 e0       	ldi	r26, 0x01	; 1
     e36:	b0 e0       	ldi	r27, 0x00	; 0
     e38:	ac 0f       	add	r26, r28
     e3a:	bd 1f       	adc	r27, r29
     e3c:	a8 0f       	add	r26, r24
     e3e:	b1 1d       	adc	r27, r1
     e40:	9c 93       	st	X, r25
     e42:	22 81       	ldd	r18, Z+2	; 0x02
     e44:	33 81       	ldd	r19, Z+3	; 0x03
     e46:	83 e0       	ldi	r24, 0x03	; 3
     e48:	8b 0d       	add	r24, r11
     e4a:	e1 e0       	ldi	r30, 0x01	; 1
     e4c:	f0 e0       	ldi	r31, 0x00	; 0
     e4e:	ec 0f       	add	r30, r28
     e50:	fd 1f       	adc	r31, r29
     e52:	e8 0f       	add	r30, r24
     e54:	f1 1d       	adc	r31, r1
     e56:	84 e0       	ldi	r24, 0x04	; 4
     e58:	b8 0e       	add	r11, r24
     e5a:	20 83       	st	Z, r18
     e5c:	bb 20       	and	r11, r11
     e5e:	b9 f0       	breq	.+46     	; 0xe8e <Modbus_mster_transaction+0x962>
     e60:	8e 01       	movw	r16, r28
     e62:	0f 5f       	subi	r16, 0xFF	; 255
     e64:	1f 4f       	sbci	r17, 0xFF	; 255
     e66:	ee 24       	eor	r14, r14
     e68:	ea 94       	dec	r14
     e6a:	eb 0c       	add	r14, r11
     e6c:	f1 2c       	mov	r15, r1
     e6e:	9f ef       	ldi	r25, 0xFF	; 255
     e70:	e9 1a       	sub	r14, r25
     e72:	f9 0a       	sbc	r15, r25
     e74:	e0 0e       	add	r14, r16
     e76:	f1 1e       	adc	r15, r17
     e78:	8f ef       	ldi	r24, 0xFF	; 255
     e7a:	9f ef       	ldi	r25, 0xFF	; 255
     e7c:	d8 01       	movw	r26, r16
     e7e:	6d 91       	ld	r22, X+
     e80:	8d 01       	movw	r16, r26
     e82:	0e 94 bd 1e 	call	0x3d7a	; 0x3d7a <crc16_update>
     e86:	0e 15       	cp	r16, r14
     e88:	1f 05       	cpc	r17, r15
     e8a:	c1 f7       	brne	.-16     	; 0xe7c <Modbus_mster_transaction+0x950>
     e8c:	02 c0       	rjmp	.+4      	; 0xe92 <Modbus_mster_transaction+0x966>
     e8e:	8f ef       	ldi	r24, 0xFF	; 255
     e90:	9f ef       	ldi	r25, 0xFF	; 255
     e92:	ee 24       	eor	r14, r14
     e94:	e3 94       	inc	r14
     e96:	eb 0c       	add	r14, r11
     e98:	e1 e0       	ldi	r30, 0x01	; 1
     e9a:	f0 e0       	ldi	r31, 0x00	; 0
     e9c:	ec 0f       	add	r30, r28
     e9e:	fd 1f       	adc	r31, r29
     ea0:	eb 0d       	add	r30, r11
     ea2:	f1 1d       	adc	r31, r1
     ea4:	80 83       	st	Z, r24
     ea6:	b3 94       	inc	r11
     ea8:	b3 94       	inc	r11
     eaa:	e1 e0       	ldi	r30, 0x01	; 1
     eac:	f0 e0       	ldi	r31, 0x00	; 0
     eae:	ec 0f       	add	r30, r28
     eb0:	fd 1f       	adc	r31, r29
     eb2:	ee 0d       	add	r30, r14
     eb4:	f1 1d       	adc	r31, r1
     eb6:	90 83       	st	Z, r25
     eb8:	e1 e0       	ldi	r30, 0x01	; 1
     eba:	f0 e0       	ldi	r31, 0x00	; 0
     ebc:	ec 0f       	add	r30, r28
     ebe:	fd 1f       	adc	r31, r29
     ec0:	eb 0d       	add	r30, r11
     ec2:	f1 1d       	adc	r31, r1
     ec4:	10 82       	st	Z, r1
     ec6:	e0 91 83 02 	lds	r30, 0x0283	; 0x800283 <g_mod1_Serial_getc>
     eca:	f0 91 84 02 	lds	r31, 0x0284	; 0x800284 <g_mod1_Serial_getc+0x1>
     ece:	19 95       	eicall
     ed0:	81 15       	cp	r24, r1
     ed2:	91 40       	sbci	r25, 0x01	; 1
     ed4:	c1 f7       	brne	.-16     	; 0xec6 <Modbus_mster_transaction+0x99a>
     ed6:	e0 91 89 02 	lds	r30, 0x0289	; 0x800289 <g_mod1_pre_transmission>
     eda:	f0 91 8a 02 	lds	r31, 0x028A	; 0x80028a <g_mod1_pre_transmission+0x1>
     ede:	30 97       	sbiw	r30, 0x00	; 0
     ee0:	09 f0       	breq	.+2      	; 0xee4 <Modbus_mster_transaction+0x9b8>
     ee2:	19 95       	eicall
     ee4:	bb 20       	and	r11, r11
     ee6:	a1 f0       	breq	.+40     	; 0xf10 <Modbus_mster_transaction+0x9e4>
     ee8:	8e 01       	movw	r16, r28
     eea:	0f 5f       	subi	r16, 0xFF	; 255
     eec:	1f 4f       	sbci	r17, 0xFF	; 255
     eee:	f1 2c       	mov	r15, r1
     ef0:	ef ef       	ldi	r30, 0xFF	; 255
     ef2:	ee 1a       	sub	r14, r30
     ef4:	fe 0a       	sbc	r15, r30
     ef6:	e0 0e       	add	r14, r16
     ef8:	f1 1e       	adc	r15, r17
     efa:	e0 91 85 02 	lds	r30, 0x0285	; 0x800285 <g_mod1_Serial_putc>
     efe:	f0 91 86 02 	lds	r31, 0x0286	; 0x800286 <g_mod1_Serial_putc+0x1>
     f02:	d8 01       	movw	r26, r16
     f04:	8d 91       	ld	r24, X+
     f06:	8d 01       	movw	r16, r26
     f08:	19 95       	eicall
     f0a:	e0 16       	cp	r14, r16
     f0c:	f1 06       	cpc	r15, r17
     f0e:	a9 f7       	brne	.-22     	; 0xefa <Modbus_mster_transaction+0x9ce>
     f10:	e0 91 7f 02 	lds	r30, 0x027F	; 0x80027f <g_mod1_Serial_flush>
     f14:	f0 91 80 02 	lds	r31, 0x0280	; 0x800280 <g_mod1_Serial_flush+0x1>
     f18:	19 95       	eicall
     f1a:	e0 91 87 02 	lds	r30, 0x0287	; 0x800287 <g_mod1_post_transmission>
     f1e:	f0 91 88 02 	lds	r31, 0x0288	; 0x800288 <g_mod1_post_transmission+0x1>
     f22:	30 97       	sbiw	r30, 0x00	; 0
     f24:	09 f0       	breq	.+2      	; 0xf28 <Modbus_mster_transaction+0x9fc>
     f26:	19 95       	eicall
     f28:	0e 94 de 1e 	call	0x3dbc	; 0x3dbc <Get_millis>
     f2c:	4b 01       	movw	r8, r22
     f2e:	5c 01       	movw	r10, r24
     f30:	08 e0       	ldi	r16, 0x08	; 8
     f32:	10 e0       	ldi	r17, 0x00	; 0
     f34:	ed 2c       	mov	r14, r13
     f36:	f1 2c       	mov	r15, r1
     f38:	e0 91 81 02 	lds	r30, 0x0281	; 0x800281 <g_mod1_Serial_available>
     f3c:	f0 91 82 02 	lds	r31, 0x0282	; 0x800282 <g_mod1_Serial_available+0x1>
     f40:	19 95       	eicall
     f42:	89 2b       	or	r24, r25
     f44:	91 f0       	breq	.+36     	; 0xf6a <Modbus_mster_transaction+0xa3e>
     f46:	dd 24       	eor	r13, r13
     f48:	d3 94       	inc	r13
     f4a:	d1 0e       	add	r13, r17
     f4c:	e0 91 83 02 	lds	r30, 0x0283	; 0x800283 <g_mod1_Serial_getc>
     f50:	f0 91 84 02 	lds	r31, 0x0284	; 0x800284 <g_mod1_Serial_getc+0x1>
     f54:	19 95       	eicall
     f56:	e1 e0       	ldi	r30, 0x01	; 1
     f58:	f0 e0       	ldi	r31, 0x00	; 0
     f5a:	ec 0f       	add	r30, r28
     f5c:	fd 1f       	adc	r31, r29
     f5e:	e1 0f       	add	r30, r17
     f60:	f1 1d       	adc	r31, r1
     f62:	80 83       	st	Z, r24
     f64:	01 50       	subi	r16, 0x01	; 1
     f66:	1d 2d       	mov	r17, r13
     f68:	07 c0       	rjmp	.+14     	; 0xf78 <Modbus_mster_transaction+0xa4c>
     f6a:	e0 91 8b 02 	lds	r30, 0x028B	; 0x80028b <g_mod1_idle>
     f6e:	f0 91 8c 02 	lds	r31, 0x028C	; 0x80028c <g_mod1_idle+0x1>
     f72:	30 97       	sbiw	r30, 0x00	; 0
     f74:	09 f0       	breq	.+2      	; 0xf78 <Modbus_mster_transaction+0xa4c>
     f76:	19 95       	eicall
     f78:	15 30       	cpi	r17, 0x05	; 5
     f7a:	51 f5       	brne	.+84     	; 0xfd0 <Modbus_mster_transaction+0xaa4>
     f7c:	99 81       	ldd	r25, Y+1	; 0x01
     f7e:	80 91 98 03 	lds	r24, 0x0398	; 0x800398 <g_mod1_slave>
     f82:	98 13       	cpse	r25, r24
     f84:	3c c1       	rjmp	.+632    	; 0x11fe <Modbus_mster_transaction+0xcd2>
     f86:	8a 81       	ldd	r24, Y+2	; 0x02
     f88:	28 2f       	mov	r18, r24
     f8a:	2f 77       	andi	r18, 0x7F	; 127
     f8c:	30 e0       	ldi	r19, 0x00	; 0
     f8e:	2e 15       	cp	r18, r14
     f90:	3f 05       	cpc	r19, r15
     f92:	09 f0       	breq	.+2      	; 0xf96 <Modbus_mster_transaction+0xa6a>
     f94:	36 c1       	rjmp	.+620    	; 0x1202 <Modbus_mster_transaction+0xcd6>
     f96:	88 23       	and	r24, r24
     f98:	24 f4       	brge	.+8      	; 0xfa2 <Modbus_mster_transaction+0xa76>
     f9a:	8b 81       	ldd	r24, Y+3	; 0x03
     f9c:	88 23       	and	r24, r24
     f9e:	b1 f1       	breq	.+108    	; 0x100c <Modbus_mster_transaction+0xae0>
     fa0:	bf c0       	rjmp	.+382    	; 0x1120 <Modbus_mster_transaction+0xbf4>
     fa2:	81 31       	cpi	r24, 0x11	; 17
     fa4:	48 f4       	brcc	.+18     	; 0xfb8 <Modbus_mster_transaction+0xa8c>
     fa6:	8f 30       	cpi	r24, 0x0F	; 15
     fa8:	70 f4       	brcc	.+28     	; 0xfc6 <Modbus_mster_transaction+0xa9a>
     faa:	81 30       	cpi	r24, 0x01	; 1
     fac:	88 f0       	brcs	.+34     	; 0xfd0 <Modbus_mster_transaction+0xaa4>
     fae:	85 30       	cpi	r24, 0x05	; 5
     fb0:	60 f0       	brcs	.+24     	; 0xfca <Modbus_mster_transaction+0xa9e>
     fb2:	87 30       	cpi	r24, 0x07	; 7
     fb4:	40 f0       	brcs	.+16     	; 0xfc6 <Modbus_mster_transaction+0xa9a>
     fb6:	0c c0       	rjmp	.+24     	; 0xfd0 <Modbus_mster_transaction+0xaa4>
     fb8:	87 31       	cpi	r24, 0x17	; 23
     fba:	39 f0       	breq	.+14     	; 0xfca <Modbus_mster_transaction+0xa9e>
     fbc:	8f 3f       	cpi	r24, 0xFF	; 255
     fbe:	19 f0       	breq	.+6      	; 0xfc6 <Modbus_mster_transaction+0xa9a>
     fc0:	86 31       	cpi	r24, 0x16	; 22
     fc2:	29 f0       	breq	.+10     	; 0xfce <Modbus_mster_transaction+0xaa2>
     fc4:	05 c0       	rjmp	.+10     	; 0xfd0 <Modbus_mster_transaction+0xaa4>
     fc6:	03 e0       	ldi	r16, 0x03	; 3
     fc8:	03 c0       	rjmp	.+6      	; 0xfd0 <Modbus_mster_transaction+0xaa4>
     fca:	0b 81       	ldd	r16, Y+3	; 0x03
     fcc:	01 c0       	rjmp	.+2      	; 0xfd0 <Modbus_mster_transaction+0xaa4>
     fce:	05 e0       	ldi	r16, 0x05	; 5
     fd0:	0e 94 de 1e 	call	0x3dbc	; 0x3dbc <Get_millis>
     fd4:	dc 01       	movw	r26, r24
     fd6:	cb 01       	movw	r24, r22
     fd8:	88 19       	sub	r24, r8
     fda:	99 09       	sbc	r25, r9
     fdc:	aa 09       	sbc	r26, r10
     fde:	bb 09       	sbc	r27, r11
     fe0:	81 3d       	cpi	r24, 0xD1	; 209
     fe2:	97 40       	sbci	r25, 0x07	; 7
     fe4:	a1 05       	cpc	r26, r1
     fe6:	b1 05       	cpc	r27, r1
     fe8:	08 f0       	brcs	.+2      	; 0xfec <Modbus_mster_transaction+0xac0>
     fea:	fb c0       	rjmp	.+502    	; 0x11e2 <Modbus_mster_transaction+0xcb6>
     fec:	fe c0       	rjmp	.+508    	; 0x11ea <Modbus_mster_transaction+0xcbe>
     fee:	81 11       	cpse	r24, r1
     ff0:	97 c0       	rjmp	.+302    	; 0x1120 <Modbus_mster_transaction+0xbf4>
     ff2:	15 30       	cpi	r17, 0x05	; 5
     ff4:	08 f4       	brcc	.+2      	; 0xff8 <Modbus_mster_transaction+0xacc>
     ff6:	df c0       	rjmp	.+446    	; 0x11b6 <Modbus_mster_transaction+0xc8a>
     ff8:	01 2f       	mov	r16, r17
     ffa:	10 e0       	ldi	r17, 0x00	; 0
     ffc:	78 01       	movw	r14, r16
     ffe:	f2 e0       	ldi	r31, 0x02	; 2
    1000:	ef 1a       	sub	r14, r31
    1002:	f1 08       	sbc	r15, r1
    1004:	1e 14       	cp	r1, r14
    1006:	1f 04       	cpc	r1, r15
    1008:	44 f0       	brlt	.+16     	; 0x101a <Modbus_mster_transaction+0xaee>
    100a:	c4 c0       	rjmp	.+392    	; 0x1194 <Modbus_mster_transaction+0xc68>
    100c:	0f 2e       	mov	r0, r31
    100e:	f3 e0       	ldi	r31, 0x03	; 3
    1010:	ef 2e       	mov	r14, r31
    1012:	f1 2c       	mov	r15, r1
    1014:	f0 2d       	mov	r31, r0
    1016:	05 e0       	ldi	r16, 0x05	; 5
    1018:	10 e0       	ldi	r17, 0x00	; 0
    101a:	20 e0       	ldi	r18, 0x00	; 0
    101c:	30 e0       	ldi	r19, 0x00	; 0
    101e:	8f ef       	ldi	r24, 0xFF	; 255
    1020:	9f ef       	ldi	r25, 0xFF	; 255
    1022:	d1 2c       	mov	r13, r1
    1024:	e1 e0       	ldi	r30, 0x01	; 1
    1026:	f0 e0       	ldi	r31, 0x00	; 0
    1028:	ec 0f       	add	r30, r28
    102a:	fd 1f       	adc	r31, r29
    102c:	e2 0f       	add	r30, r18
    102e:	f3 1f       	adc	r31, r19
    1030:	60 81       	ld	r22, Z
    1032:	0e 94 bd 1e 	call	0x3d7a	; 0x3d7a <crc16_update>
    1036:	d3 94       	inc	r13
    1038:	2d 2d       	mov	r18, r13
    103a:	30 e0       	ldi	r19, 0x00	; 0
    103c:	2e 15       	cp	r18, r14
    103e:	3f 05       	cpc	r19, r15
    1040:	8c f3       	brlt	.-30     	; 0x1024 <Modbus_mster_transaction+0xaf8>
    1042:	aa c0       	rjmp	.+340    	; 0x1198 <Modbus_mster_transaction+0xc6c>
    1044:	89 2f       	mov	r24, r25
    1046:	99 27       	eor	r25, r25
    1048:	fe 01       	movw	r30, r28
    104a:	e0 0f       	add	r30, r16
    104c:	f1 1f       	adc	r31, r17
    104e:	20 81       	ld	r18, Z
    1050:	30 e0       	ldi	r19, 0x00	; 0
    1052:	82 17       	cp	r24, r18
    1054:	93 07       	cpc	r25, r19
    1056:	09 f0       	breq	.+2      	; 0x105a <Modbus_mster_transaction+0xb2e>
    1058:	ac c0       	rjmp	.+344    	; 0x11b2 <Modbus_mster_transaction+0xc86>
    105a:	ad c0       	rjmp	.+346    	; 0x11b6 <Modbus_mster_transaction+0xc8a>
    105c:	8b 81       	ldd	r24, Y+3	; 0x03
    105e:	86 95       	lsr	r24
    1060:	e1 f5       	brne	.+120    	; 0x10da <Modbus_mster_transaction+0xbae>
    1062:	5e c0       	rjmp	.+188    	; 0x1120 <Modbus_mster_transaction+0xbf4>
    1064:	6b 81       	ldd	r22, Y+3	; 0x03
    1066:	86 2f       	mov	r24, r22
    1068:	86 95       	lsr	r24
    106a:	09 f4       	brne	.+2      	; 0x106e <Modbus_mster_transaction+0xb42>
    106c:	b2 c0       	rjmp	.+356    	; 0x11d2 <Modbus_mster_transaction+0xca6>
    106e:	fe 01       	movw	r30, r28
    1070:	31 96       	adiw	r30, 0x01	; 1
    1072:	40 e0       	ldi	r20, 0x00	; 0
    1074:	50 e0       	ldi	r21, 0x00	; 0
    1076:	90 e0       	ldi	r25, 0x00	; 0
    1078:	90 34       	cpi	r25, 0x40	; 64
    107a:	70 f4       	brcc	.+28     	; 0x1098 <Modbus_mster_transaction+0xb6c>
    107c:	24 81       	ldd	r18, Z+4	; 0x04
    107e:	30 e0       	ldi	r19, 0x00	; 0
    1080:	32 2f       	mov	r19, r18
    1082:	22 27       	eor	r18, r18
    1084:	73 81       	ldd	r23, Z+3	; 0x03
    1086:	27 2b       	or	r18, r23
    1088:	da 01       	movw	r26, r20
    108a:	aa 0f       	add	r26, r26
    108c:	bb 1f       	adc	r27, r27
    108e:	ac 5e       	subi	r26, 0xEC	; 236
    1090:	bc 4f       	sbci	r27, 0xFC	; 252
    1092:	11 96       	adiw	r26, 0x01	; 1
    1094:	3c 93       	st	X, r19
    1096:	2e 93       	st	-X, r18
    1098:	9f 5f       	subi	r25, 0xFF	; 255
    109a:	4f 5f       	subi	r20, 0xFF	; 255
    109c:	5f 4f       	sbci	r21, 0xFF	; 255
    109e:	32 96       	adiw	r30, 0x02	; 2
    10a0:	98 13       	cpse	r25, r24
    10a2:	ea cf       	rjmp	.-44     	; 0x1078 <Modbus_mster_transaction+0xb4c>
    10a4:	9f ef       	ldi	r25, 0xFF	; 255
    10a6:	98 0f       	add	r25, r24
    10a8:	90 93 8d 02 	sts	0x028D, r25	; 0x80028d <g_mod1_response_buffer_length>
    10ac:	60 ff       	sbrs	r22, 0
    10ae:	35 c0       	rjmp	.+106    	; 0x111a <Modbus_mster_transaction+0xbee>
    10b0:	80 34       	cpi	r24, 0x40	; 64
    10b2:	70 f4       	brcc	.+28     	; 0x10d0 <Modbus_mster_transaction+0xba4>
    10b4:	28 2f       	mov	r18, r24
    10b6:	30 e0       	ldi	r19, 0x00	; 0
    10b8:	22 0f       	add	r18, r18
    10ba:	33 1f       	adc	r19, r19
    10bc:	fe 01       	movw	r30, r28
    10be:	e2 0f       	add	r30, r18
    10c0:	f3 1f       	adc	r31, r19
    10c2:	44 81       	ldd	r20, Z+4	; 0x04
    10c4:	50 e0       	ldi	r21, 0x00	; 0
    10c6:	f9 01       	movw	r30, r18
    10c8:	ec 5e       	subi	r30, 0xEC	; 236
    10ca:	fc 4f       	sbci	r31, 0xFC	; 252
    10cc:	51 83       	std	Z+1, r21	; 0x01
    10ce:	40 83       	st	Z, r20
    10d0:	8f 5f       	subi	r24, 0xFF	; 255
    10d2:	80 93 8d 02 	sts	0x028D, r24	; 0x80028d <g_mod1_response_buffer_length>
    10d6:	80 e0       	ldi	r24, 0x00	; 0
    10d8:	23 c0       	rjmp	.+70     	; 0x1120 <Modbus_mster_transaction+0xbf4>
    10da:	fe 01       	movw	r30, r28
    10dc:	31 96       	adiw	r30, 0x01	; 1
    10de:	40 e0       	ldi	r20, 0x00	; 0
    10e0:	50 e0       	ldi	r21, 0x00	; 0
    10e2:	90 e0       	ldi	r25, 0x00	; 0
    10e4:	90 34       	cpi	r25, 0x40	; 64
    10e6:	70 f4       	brcc	.+28     	; 0x1104 <Modbus_mster_transaction+0xbd8>
    10e8:	23 81       	ldd	r18, Z+3	; 0x03
    10ea:	30 e0       	ldi	r19, 0x00	; 0
    10ec:	32 2f       	mov	r19, r18
    10ee:	22 27       	eor	r18, r18
    10f0:	64 81       	ldd	r22, Z+4	; 0x04
    10f2:	26 2b       	or	r18, r22
    10f4:	da 01       	movw	r26, r20
    10f6:	aa 0f       	add	r26, r26
    10f8:	bb 1f       	adc	r27, r27
    10fa:	ac 5e       	subi	r26, 0xEC	; 236
    10fc:	bc 4f       	sbci	r27, 0xFC	; 252
    10fe:	11 96       	adiw	r26, 0x01	; 1
    1100:	3c 93       	st	X, r19
    1102:	2e 93       	st	-X, r18
    1104:	9f 5f       	subi	r25, 0xFF	; 255
    1106:	4f 5f       	subi	r20, 0xFF	; 255
    1108:	5f 4f       	sbci	r21, 0xFF	; 255
    110a:	32 96       	adiw	r30, 0x02	; 2
    110c:	98 13       	cpse	r25, r24
    110e:	ea cf       	rjmp	.-44     	; 0x10e4 <Modbus_mster_transaction+0xbb8>
    1110:	81 50       	subi	r24, 0x01	; 1
    1112:	80 93 8d 02 	sts	0x028D, r24	; 0x80028d <g_mod1_response_buffer_length>
    1116:	80 e0       	ldi	r24, 0x00	; 0
    1118:	03 c0       	rjmp	.+6      	; 0x1120 <Modbus_mster_transaction+0xbf4>
    111a:	80 e0       	ldi	r24, 0x00	; 0
    111c:	01 c0       	rjmp	.+2      	; 0x1120 <Modbus_mster_transaction+0xbf4>
    111e:	80 e0       	ldi	r24, 0x00	; 0
    1120:	10 92 8f 02 	sts	0x028F, r1	; 0x80028f <g_mod1_transmit_buffer_index>
    1124:	10 92 8e 02 	sts	0x028E, r1	; 0x80028e <g_mod1_response_buffer_index>
    1128:	70 c0       	rjmp	.+224    	; 0x120a <Modbus_mster_transaction+0xcde>
    112a:	84 ee       	ldi	r24, 0xE4	; 228
    112c:	6e c0       	rjmp	.+220    	; 0x120a <Modbus_mster_transaction+0xcde>
    112e:	03 e0       	ldi	r16, 0x03	; 3
    1130:	0e 94 de 1e 	call	0x3dbc	; 0x3dbc <Get_millis>
    1134:	dc 01       	movw	r26, r24
    1136:	cb 01       	movw	r24, r22
    1138:	88 19       	sub	r24, r8
    113a:	99 09       	sbc	r25, r9
    113c:	aa 09       	sbc	r26, r10
    113e:	bb 09       	sbc	r27, r11
    1140:	81 3d       	cpi	r24, 0xD1	; 209
    1142:	97 40       	sbci	r25, 0x07	; 7
    1144:	a1 05       	cpc	r26, r1
    1146:	b1 05       	cpc	r27, r1
    1148:	08 f4       	brcc	.+2      	; 0x114c <Modbus_mster_transaction+0xc20>
    114a:	01 cc       	rjmp	.-2046   	; 0x94e <Modbus_mster_transaction+0x422>
    114c:	5b cc       	rjmp	.-1866   	; 0xa04 <Modbus_mster_transaction+0x4d8>
    114e:	8f ef       	ldi	r24, 0xFF	; 255
    1150:	9f ef       	ldi	r25, 0xFF	; 255
    1152:	fe 01       	movw	r30, r28
    1154:	ee 0d       	add	r30, r14
    1156:	ff 1d       	adc	r31, r15
    1158:	21 81       	ldd	r18, Z+1	; 0x01
    115a:	30 e0       	ldi	r19, 0x00	; 0
    115c:	ac 01       	movw	r20, r24
    115e:	55 27       	eor	r21, r21
    1160:	42 17       	cp	r20, r18
    1162:	53 07       	cpc	r21, r19
    1164:	09 f4       	brne	.+2      	; 0x1168 <Modbus_mster_transaction+0xc3c>
    1166:	84 cc       	rjmp	.-1784   	; 0xa70 <Modbus_mster_transaction+0x544>
    1168:	83 ee       	ldi	r24, 0xE3	; 227
    116a:	f1 cc       	rjmp	.-1566   	; 0xb4e <Modbus_mster_transaction+0x622>
    116c:	83 ee       	ldi	r24, 0xE3	; 227
    116e:	ef cc       	rjmp	.-1570   	; 0xb4e <Modbus_mster_transaction+0x622>
    1170:	8a 81       	ldd	r24, Y+2	; 0x02
    1172:	85 30       	cpi	r24, 0x05	; 5
    1174:	38 f4       	brcc	.+14     	; 0x1184 <Modbus_mster_transaction+0xc58>
    1176:	83 30       	cpi	r24, 0x03	; 3
    1178:	08 f0       	brcs	.+2      	; 0x117c <Modbus_mster_transaction+0xc50>
    117a:	86 cc       	rjmp	.-1780   	; 0xa88 <Modbus_mster_transaction+0x55c>
    117c:	81 30       	cpi	r24, 0x01	; 1
    117e:	08 f0       	brcs	.+2      	; 0x1182 <Modbus_mster_transaction+0xc56>
    1180:	88 cc       	rjmp	.-1776   	; 0xa92 <Modbus_mster_transaction+0x566>
    1182:	e4 cc       	rjmp	.-1592   	; 0xb4c <Modbus_mster_transaction+0x620>
    1184:	87 31       	cpi	r24, 0x17	; 23
    1186:	09 f4       	brne	.+2      	; 0x118a <Modbus_mster_transaction+0xc5e>
    1188:	7f cc       	rjmp	.-1794   	; 0xa88 <Modbus_mster_transaction+0x55c>
    118a:	e0 cc       	rjmp	.-1600   	; 0xb4c <Modbus_mster_transaction+0x620>
    118c:	70 fd       	sbrc	r23, 0
    118e:	a9 cc       	rjmp	.-1710   	; 0xae2 <Modbus_mster_transaction+0x5b6>
    1190:	80 e0       	ldi	r24, 0x00	; 0
    1192:	dd cc       	rjmp	.-1606   	; 0xb4e <Modbus_mster_transaction+0x622>
    1194:	8f ef       	ldi	r24, 0xFF	; 255
    1196:	9f ef       	ldi	r25, 0xFF	; 255
    1198:	fe 01       	movw	r30, r28
    119a:	ee 0d       	add	r30, r14
    119c:	ff 1d       	adc	r31, r15
    119e:	21 81       	ldd	r18, Z+1	; 0x01
    11a0:	30 e0       	ldi	r19, 0x00	; 0
    11a2:	ac 01       	movw	r20, r24
    11a4:	55 27       	eor	r21, r21
    11a6:	42 17       	cp	r20, r18
    11a8:	53 07       	cpc	r21, r19
    11aa:	09 f4       	brne	.+2      	; 0x11ae <Modbus_mster_transaction+0xc82>
    11ac:	4b cf       	rjmp	.-362    	; 0x1044 <Modbus_mster_transaction+0xb18>
    11ae:	83 ee       	ldi	r24, 0xE3	; 227
    11b0:	b7 cf       	rjmp	.-146    	; 0x1120 <Modbus_mster_transaction+0xbf4>
    11b2:	83 ee       	ldi	r24, 0xE3	; 227
    11b4:	b5 cf       	rjmp	.-150    	; 0x1120 <Modbus_mster_transaction+0xbf4>
    11b6:	8a 81       	ldd	r24, Y+2	; 0x02
    11b8:	85 30       	cpi	r24, 0x05	; 5
    11ba:	38 f4       	brcc	.+14     	; 0x11ca <Modbus_mster_transaction+0xc9e>
    11bc:	83 30       	cpi	r24, 0x03	; 3
    11be:	08 f0       	brcs	.+2      	; 0x11c2 <Modbus_mster_transaction+0xc96>
    11c0:	4d cf       	rjmp	.-358    	; 0x105c <Modbus_mster_transaction+0xb30>
    11c2:	81 30       	cpi	r24, 0x01	; 1
    11c4:	08 f0       	brcs	.+2      	; 0x11c8 <Modbus_mster_transaction+0xc9c>
    11c6:	4e cf       	rjmp	.-356    	; 0x1064 <Modbus_mster_transaction+0xb38>
    11c8:	aa cf       	rjmp	.-172    	; 0x111e <Modbus_mster_transaction+0xbf2>
    11ca:	87 31       	cpi	r24, 0x17	; 23
    11cc:	09 f4       	brne	.+2      	; 0x11d0 <Modbus_mster_transaction+0xca4>
    11ce:	46 cf       	rjmp	.-372    	; 0x105c <Modbus_mster_transaction+0xb30>
    11d0:	a6 cf       	rjmp	.-180    	; 0x111e <Modbus_mster_transaction+0xbf2>
    11d2:	60 fd       	sbrc	r22, 0
    11d4:	6f cf       	rjmp	.-290    	; 0x10b4 <Modbus_mster_transaction+0xb88>
    11d6:	80 e0       	ldi	r24, 0x00	; 0
    11d8:	a3 cf       	rjmp	.-186    	; 0x1120 <Modbus_mster_transaction+0xbf4>
    11da:	01 11       	cpse	r16, r1
    11dc:	b8 cb       	rjmp	.-2192   	; 0x94e <Modbus_mster_transaction+0x422>
    11de:	80 e0       	ldi	r24, 0x00	; 0
    11e0:	19 cc       	rjmp	.-1998   	; 0xa14 <Modbus_mster_transaction+0x4e8>
    11e2:	01 11       	cpse	r16, r1
    11e4:	10 c0       	rjmp	.+32     	; 0x1206 <Modbus_mster_transaction+0xcda>
    11e6:	82 ee       	ldi	r24, 0xE2	; 226
    11e8:	02 cf       	rjmp	.-508    	; 0xfee <Modbus_mster_transaction+0xac2>
    11ea:	01 11       	cpse	r16, r1
    11ec:	a5 ce       	rjmp	.-694    	; 0xf38 <Modbus_mster_transaction+0xa0c>
    11ee:	80 e0       	ldi	r24, 0x00	; 0
    11f0:	fe ce       	rjmp	.-516    	; 0xfee <Modbus_mster_transaction+0xac2>
    11f2:	80 ee       	ldi	r24, 0xE0	; 224
    11f4:	ac cc       	rjmp	.-1704   	; 0xb4e <Modbus_mster_transaction+0x622>
    11f6:	81 ee       	ldi	r24, 0xE1	; 225
    11f8:	aa cc       	rjmp	.-1708   	; 0xb4e <Modbus_mster_transaction+0x622>
    11fa:	82 ee       	ldi	r24, 0xE2	; 226
    11fc:	a8 cc       	rjmp	.-1712   	; 0xb4e <Modbus_mster_transaction+0x622>
    11fe:	80 ee       	ldi	r24, 0xE0	; 224
    1200:	8f cf       	rjmp	.-226    	; 0x1120 <Modbus_mster_transaction+0xbf4>
    1202:	81 ee       	ldi	r24, 0xE1	; 225
    1204:	8d cf       	rjmp	.-230    	; 0x1120 <Modbus_mster_transaction+0xbf4>
    1206:	82 ee       	ldi	r24, 0xE2	; 226
    1208:	8b cf       	rjmp	.-234    	; 0x1120 <Modbus_mster_transaction+0xbf4>
    120a:	d3 95       	inc	r29
    120c:	0f b6       	in	r0, 0x3f	; 63
    120e:	f8 94       	cli
    1210:	de bf       	out	0x3e, r29	; 62
    1212:	0f be       	out	0x3f, r0	; 63
    1214:	cd bf       	out	0x3d, r28	; 61
    1216:	df 91       	pop	r29
    1218:	cf 91       	pop	r28
    121a:	1f 91       	pop	r17
    121c:	0f 91       	pop	r16
    121e:	ff 90       	pop	r15
    1220:	ef 90       	pop	r14
    1222:	df 90       	pop	r13
    1224:	bf 90       	pop	r11
    1226:	af 90       	pop	r10
    1228:	9f 90       	pop	r9
    122a:	8f 90       	pop	r8
    122c:	08 95       	ret

0000122e <Modbus_init>:
    122e:	fb 01       	movw	r30, r22
    1230:	81 11       	cpse	r24, r1
    1232:	86 c0       	rjmp	.+268    	; 0x1340 <Modbus_init+0x112>
    1234:	80 81       	ld	r24, Z
    1236:	80 93 b2 04 	sts	0x04B2, r24	; 0x8004b2 <g_mod0_slave>
    123a:	41 81       	ldd	r20, Z+1	; 0x01
    123c:	62 81       	ldd	r22, Z+2	; 0x02
    123e:	73 81       	ldd	r23, Z+3	; 0x03
    1240:	84 81       	ldd	r24, Z+4	; 0x04
    1242:	95 81       	ldd	r25, Z+5	; 0x05
    1244:	26 81       	ldd	r18, Z+6	; 0x06
    1246:	37 81       	ldd	r19, Z+7	; 0x07
    1248:	30 93 a4 03 	sts	0x03A4, r19	; 0x8003a4 <g_mod0_pre_transmission+0x1>
    124c:	20 93 a3 03 	sts	0x03A3, r18	; 0x8003a3 <g_mod0_pre_transmission>
    1250:	20 85       	ldd	r18, Z+8	; 0x08
    1252:	31 85       	ldd	r19, Z+9	; 0x09
    1254:	30 93 a2 03 	sts	0x03A2, r19	; 0x8003a2 <g_mod0_post_transmission+0x1>
    1258:	20 93 a1 03 	sts	0x03A1, r18	; 0x8003a1 <g_mod0_post_transmission>
    125c:	10 92 a6 03 	sts	0x03A6, r1	; 0x8003a6 <g_mod0_idle+0x1>
    1260:	10 92 a5 03 	sts	0x03A5, r1	; 0x8003a5 <g_mod0_idle>
    1264:	10 92 a8 03 	sts	0x03A8, r1	; 0x8003a8 <g_mod0_response_buffer_index>
    1268:	10 92 a7 03 	sts	0x03A7, r1	; 0x8003a7 <g_mod0_response_buffer_length>
    126c:	41 30       	cpi	r20, 0x01	; 1
    126e:	09 f5       	brne	.+66     	; 0x12b2 <Modbus_init+0x84>
    1270:	20 91 7e 02 	lds	r18, 0x027E	; 0x80027e <UART1_used.1994>
    1274:	21 11       	cpse	r18, r1
    1276:	c8 c0       	rjmp	.+400    	; 0x1408 <Modbus_init+0x1da>
    1278:	21 e0       	ldi	r18, 0x01	; 1
    127a:	20 93 7e 02 	sts	0x027E, r18	; 0x80027e <UART1_used.1994>
    127e:	89 d3       	rcall	.+1810   	; 0x1992 <UART1_init>
    1280:	87 e5       	ldi	r24, 0x57	; 87
    1282:	9d e0       	ldi	r25, 0x0D	; 13
    1284:	90 93 9a 03 	sts	0x039A, r25	; 0x80039a <g_mod0_Serial_available+0x1>
    1288:	80 93 99 03 	sts	0x0399, r24	; 0x800399 <g_mod0_Serial_available>
    128c:	85 e6       	ldi	r24, 0x65	; 101
    128e:	9d e0       	ldi	r25, 0x0D	; 13
    1290:	90 93 9c 03 	sts	0x039C, r25	; 0x80039c <g_mod0_Serial_flush+0x1>
    1294:	80 93 9b 03 	sts	0x039B, r24	; 0x80039b <g_mod0_Serial_flush>
    1298:	8e e1       	ldi	r24, 0x1E	; 30
    129a:	9d e0       	ldi	r25, 0x0D	; 13
    129c:	90 93 9e 03 	sts	0x039E, r25	; 0x80039e <g_mod0_Serial_getc+0x1>
    12a0:	80 93 9d 03 	sts	0x039D, r24	; 0x80039d <g_mod0_Serial_getc>
    12a4:	8e e3       	ldi	r24, 0x3E	; 62
    12a6:	9d e0       	ldi	r25, 0x0D	; 13
    12a8:	90 93 a0 03 	sts	0x03A0, r25	; 0x8003a0 <g_mod0_Serial_putc+0x1>
    12ac:	80 93 9f 03 	sts	0x039F, r24	; 0x80039f <g_mod0_Serial_putc>
    12b0:	08 95       	ret
    12b2:	42 30       	cpi	r20, 0x02	; 2
    12b4:	09 f5       	brne	.+66     	; 0x12f8 <Modbus_init+0xca>
    12b6:	20 91 7d 02 	lds	r18, 0x027D	; 0x80027d <UART2_used.1995>
    12ba:	21 11       	cpse	r18, r1
    12bc:	a5 c0       	rjmp	.+330    	; 0x1408 <Modbus_init+0x1da>
    12be:	21 e0       	ldi	r18, 0x01	; 1
    12c0:	20 93 7d 02 	sts	0x027D, r18	; 0x80027d <UART2_used.1995>
    12c4:	75 d4       	rcall	.+2282   	; 0x1bb0 <UART2_init>
    12c6:	83 e6       	ldi	r24, 0x63	; 99
    12c8:	9e e0       	ldi	r25, 0x0E	; 14
    12ca:	90 93 9a 03 	sts	0x039A, r25	; 0x80039a <g_mod0_Serial_available+0x1>
    12ce:	80 93 99 03 	sts	0x0399, r24	; 0x800399 <g_mod0_Serial_available>
    12d2:	81 e7       	ldi	r24, 0x71	; 113
    12d4:	9e e0       	ldi	r25, 0x0E	; 14
    12d6:	90 93 9c 03 	sts	0x039C, r25	; 0x80039c <g_mod0_Serial_flush+0x1>
    12da:	80 93 9b 03 	sts	0x039B, r24	; 0x80039b <g_mod0_Serial_flush>
    12de:	8d e2       	ldi	r24, 0x2D	; 45
    12e0:	9e e0       	ldi	r25, 0x0E	; 14
    12e2:	90 93 9e 03 	sts	0x039E, r25	; 0x80039e <g_mod0_Serial_getc+0x1>
    12e6:	80 93 9d 03 	sts	0x039D, r24	; 0x80039d <g_mod0_Serial_getc>
    12ea:	8a e4       	ldi	r24, 0x4A	; 74
    12ec:	9e e0       	ldi	r25, 0x0E	; 14
    12ee:	90 93 a0 03 	sts	0x03A0, r25	; 0x8003a0 <g_mod0_Serial_putc+0x1>
    12f2:	80 93 9f 03 	sts	0x039F, r24	; 0x80039f <g_mod0_Serial_putc>
    12f6:	08 95       	ret
    12f8:	43 30       	cpi	r20, 0x03	; 3
    12fa:	09 f0       	breq	.+2      	; 0x12fe <Modbus_init+0xd0>
    12fc:	85 c0       	rjmp	.+266    	; 0x1408 <Modbus_init+0x1da>
    12fe:	20 91 7c 02 	lds	r18, 0x027C	; 0x80027c <UART3_used.1996>
    1302:	21 11       	cpse	r18, r1
    1304:	81 c0       	rjmp	.+258    	; 0x1408 <Modbus_init+0x1da>
    1306:	21 e0       	ldi	r18, 0x01	; 1
    1308:	20 93 7c 02 	sts	0x027C, r18	; 0x80027c <UART3_used.1996>
    130c:	5d d5       	rcall	.+2746   	; 0x1dc8 <UART3_init>
    130e:	8f e6       	ldi	r24, 0x6F	; 111
    1310:	9f e0       	ldi	r25, 0x0F	; 15
    1312:	90 93 9a 03 	sts	0x039A, r25	; 0x80039a <g_mod0_Serial_available+0x1>
    1316:	80 93 99 03 	sts	0x0399, r24	; 0x800399 <g_mod0_Serial_available>
    131a:	8d e7       	ldi	r24, 0x7D	; 125
    131c:	9f e0       	ldi	r25, 0x0F	; 15
    131e:	90 93 9c 03 	sts	0x039C, r25	; 0x80039c <g_mod0_Serial_flush+0x1>
    1322:	80 93 9b 03 	sts	0x039B, r24	; 0x80039b <g_mod0_Serial_flush>
    1326:	89 e3       	ldi	r24, 0x39	; 57
    1328:	9f e0       	ldi	r25, 0x0F	; 15
    132a:	90 93 9e 03 	sts	0x039E, r25	; 0x80039e <g_mod0_Serial_getc+0x1>
    132e:	80 93 9d 03 	sts	0x039D, r24	; 0x80039d <g_mod0_Serial_getc>
    1332:	86 e5       	ldi	r24, 0x56	; 86
    1334:	9f e0       	ldi	r25, 0x0F	; 15
    1336:	90 93 a0 03 	sts	0x03A0, r25	; 0x8003a0 <g_mod0_Serial_putc+0x1>
    133a:	80 93 9f 03 	sts	0x039F, r24	; 0x80039f <g_mod0_Serial_putc>
    133e:	08 95       	ret
    1340:	81 30       	cpi	r24, 0x01	; 1
    1342:	09 f0       	breq	.+2      	; 0x1346 <Modbus_init+0x118>
    1344:	61 c0       	rjmp	.+194    	; 0x1408 <Modbus_init+0x1da>
    1346:	80 81       	ld	r24, Z
    1348:	80 93 98 03 	sts	0x0398, r24	; 0x800398 <g_mod1_slave>
    134c:	41 81       	ldd	r20, Z+1	; 0x01
    134e:	62 81       	ldd	r22, Z+2	; 0x02
    1350:	73 81       	ldd	r23, Z+3	; 0x03
    1352:	84 81       	ldd	r24, Z+4	; 0x04
    1354:	95 81       	ldd	r25, Z+5	; 0x05
    1356:	26 81       	ldd	r18, Z+6	; 0x06
    1358:	37 81       	ldd	r19, Z+7	; 0x07
    135a:	30 93 8a 02 	sts	0x028A, r19	; 0x80028a <g_mod1_pre_transmission+0x1>
    135e:	20 93 89 02 	sts	0x0289, r18	; 0x800289 <g_mod1_pre_transmission>
    1362:	20 85       	ldd	r18, Z+8	; 0x08
    1364:	31 85       	ldd	r19, Z+9	; 0x09
    1366:	30 93 88 02 	sts	0x0288, r19	; 0x800288 <g_mod1_post_transmission+0x1>
    136a:	20 93 87 02 	sts	0x0287, r18	; 0x800287 <g_mod1_post_transmission>
    136e:	10 92 8c 02 	sts	0x028C, r1	; 0x80028c <g_mod1_idle+0x1>
    1372:	10 92 8b 02 	sts	0x028B, r1	; 0x80028b <g_mod1_idle>
    1376:	10 92 8e 02 	sts	0x028E, r1	; 0x80028e <g_mod1_response_buffer_index>
    137a:	10 92 8d 02 	sts	0x028D, r1	; 0x80028d <g_mod1_response_buffer_length>
    137e:	41 30       	cpi	r20, 0x01	; 1
    1380:	09 f5       	brne	.+66     	; 0x13c4 <Modbus_init+0x196>
    1382:	20 91 7e 02 	lds	r18, 0x027E	; 0x80027e <UART1_used.1994>
    1386:	21 11       	cpse	r18, r1
    1388:	3f c0       	rjmp	.+126    	; 0x1408 <Modbus_init+0x1da>
    138a:	21 e0       	ldi	r18, 0x01	; 1
    138c:	20 93 7e 02 	sts	0x027E, r18	; 0x80027e <UART1_used.1994>
    1390:	00 d3       	rcall	.+1536   	; 0x1992 <UART1_init>
    1392:	87 e5       	ldi	r24, 0x57	; 87
    1394:	9d e0       	ldi	r25, 0x0D	; 13
    1396:	90 93 82 02 	sts	0x0282, r25	; 0x800282 <g_mod1_Serial_available+0x1>
    139a:	80 93 81 02 	sts	0x0281, r24	; 0x800281 <g_mod1_Serial_available>
    139e:	85 e6       	ldi	r24, 0x65	; 101
    13a0:	9d e0       	ldi	r25, 0x0D	; 13
    13a2:	90 93 80 02 	sts	0x0280, r25	; 0x800280 <g_mod1_Serial_flush+0x1>
    13a6:	80 93 7f 02 	sts	0x027F, r24	; 0x80027f <g_mod1_Serial_flush>
    13aa:	8e e1       	ldi	r24, 0x1E	; 30
    13ac:	9d e0       	ldi	r25, 0x0D	; 13
    13ae:	90 93 84 02 	sts	0x0284, r25	; 0x800284 <g_mod1_Serial_getc+0x1>
    13b2:	80 93 83 02 	sts	0x0283, r24	; 0x800283 <g_mod1_Serial_getc>
    13b6:	8e e3       	ldi	r24, 0x3E	; 62
    13b8:	9d e0       	ldi	r25, 0x0D	; 13
    13ba:	90 93 86 02 	sts	0x0286, r25	; 0x800286 <g_mod1_Serial_putc+0x1>
    13be:	80 93 85 02 	sts	0x0285, r24	; 0x800285 <g_mod1_Serial_putc>
    13c2:	08 95       	ret
    13c4:	42 30       	cpi	r20, 0x02	; 2
    13c6:	01 f5       	brne	.+64     	; 0x1408 <Modbus_init+0x1da>
    13c8:	20 91 7d 02 	lds	r18, 0x027D	; 0x80027d <UART2_used.1995>
    13cc:	21 11       	cpse	r18, r1
    13ce:	1c c0       	rjmp	.+56     	; 0x1408 <Modbus_init+0x1da>
    13d0:	21 e0       	ldi	r18, 0x01	; 1
    13d2:	20 93 7d 02 	sts	0x027D, r18	; 0x80027d <UART2_used.1995>
    13d6:	ec d3       	rcall	.+2008   	; 0x1bb0 <UART2_init>
    13d8:	83 e6       	ldi	r24, 0x63	; 99
    13da:	9e e0       	ldi	r25, 0x0E	; 14
    13dc:	90 93 82 02 	sts	0x0282, r25	; 0x800282 <g_mod1_Serial_available+0x1>
    13e0:	80 93 81 02 	sts	0x0281, r24	; 0x800281 <g_mod1_Serial_available>
    13e4:	81 e7       	ldi	r24, 0x71	; 113
    13e6:	9e e0       	ldi	r25, 0x0E	; 14
    13e8:	90 93 80 02 	sts	0x0280, r25	; 0x800280 <g_mod1_Serial_flush+0x1>
    13ec:	80 93 7f 02 	sts	0x027F, r24	; 0x80027f <g_mod1_Serial_flush>
    13f0:	8d e2       	ldi	r24, 0x2D	; 45
    13f2:	9e e0       	ldi	r25, 0x0E	; 14
    13f4:	90 93 84 02 	sts	0x0284, r25	; 0x800284 <g_mod1_Serial_getc+0x1>
    13f8:	80 93 83 02 	sts	0x0283, r24	; 0x800283 <g_mod1_Serial_getc>
    13fc:	8a e4       	ldi	r24, 0x4A	; 74
    13fe:	9e e0       	ldi	r25, 0x0E	; 14
    1400:	90 93 86 02 	sts	0x0286, r25	; 0x800286 <g_mod1_Serial_putc+0x1>
    1404:	80 93 85 02 	sts	0x0285, r24	; 0x800285 <g_mod1_Serial_putc>
    1408:	08 95       	ret

0000140a <Modbus_Get_response_buffer>:
    140a:	81 11       	cpse	r24, r1
    140c:	0b c0       	rjmp	.+22     	; 0x1424 <Modbus_Get_response_buffer+0x1a>
    140e:	60 34       	cpi	r22, 0x40	; 64
    1410:	b0 f4       	brcc	.+44     	; 0x143e <Modbus_Get_response_buffer+0x34>
    1412:	e6 2f       	mov	r30, r22
    1414:	f0 e0       	ldi	r31, 0x00	; 0
    1416:	ee 0f       	add	r30, r30
    1418:	ff 1f       	adc	r31, r31
    141a:	e2 5d       	subi	r30, 0xD2	; 210
    141c:	fb 4f       	sbci	r31, 0xFB	; 251
    141e:	80 81       	ld	r24, Z
    1420:	91 81       	ldd	r25, Z+1	; 0x01
    1422:	08 95       	ret
    1424:	81 30       	cpi	r24, 0x01	; 1
    1426:	71 f4       	brne	.+28     	; 0x1444 <Modbus_Get_response_buffer+0x3a>
    1428:	60 34       	cpi	r22, 0x40	; 64
    142a:	78 f4       	brcc	.+30     	; 0x144a <Modbus_Get_response_buffer+0x40>
    142c:	e6 2f       	mov	r30, r22
    142e:	f0 e0       	ldi	r31, 0x00	; 0
    1430:	ee 0f       	add	r30, r30
    1432:	ff 1f       	adc	r31, r31
    1434:	ec 5e       	subi	r30, 0xEC	; 236
    1436:	fc 4f       	sbci	r31, 0xFC	; 252
    1438:	80 81       	ld	r24, Z
    143a:	91 81       	ldd	r25, Z+1	; 0x01
    143c:	08 95       	ret
    143e:	8f ef       	ldi	r24, 0xFF	; 255
    1440:	9f ef       	ldi	r25, 0xFF	; 255
    1442:	08 95       	ret
    1444:	8f ef       	ldi	r24, 0xFF	; 255
    1446:	9f ef       	ldi	r25, 0xFF	; 255
    1448:	08 95       	ret
    144a:	8f ef       	ldi	r24, 0xFF	; 255
    144c:	9f ef       	ldi	r25, 0xFF	; 255
    144e:	08 95       	ret

00001450 <Modbus_Set_transmit_buffer>:
    1450:	81 11       	cpse	r24, r1
    1452:	0b c0       	rjmp	.+22     	; 0x146a <Modbus_Set_transmit_buffer+0x1a>
    1454:	60 34       	cpi	r22, 0x40	; 64
    1456:	b8 f4       	brcc	.+46     	; 0x1486 <Modbus_Set_transmit_buffer+0x36>
    1458:	e6 2f       	mov	r30, r22
    145a:	f0 e0       	ldi	r31, 0x00	; 0
    145c:	ee 0f       	add	r30, r30
    145e:	ff 1f       	adc	r31, r31
    1460:	e6 55       	subi	r30, 0x56	; 86
    1462:	fc 4f       	sbci	r31, 0xFC	; 252
    1464:	51 83       	std	Z+1, r21	; 0x01
    1466:	40 83       	st	Z, r20
    1468:	08 95       	ret
    146a:	81 30       	cpi	r24, 0x01	; 1
    146c:	71 f4       	brne	.+28     	; 0x148a <Modbus_Set_transmit_buffer+0x3a>
    146e:	60 34       	cpi	r22, 0x40	; 64
    1470:	70 f4       	brcc	.+28     	; 0x148e <Modbus_Set_transmit_buffer+0x3e>
    1472:	e6 2f       	mov	r30, r22
    1474:	f0 e0       	ldi	r31, 0x00	; 0
    1476:	ee 0f       	add	r30, r30
    1478:	ff 1f       	adc	r31, r31
    147a:	e0 57       	subi	r30, 0x70	; 112
    147c:	fd 4f       	sbci	r31, 0xFD	; 253
    147e:	51 83       	std	Z+1, r21	; 0x01
    1480:	40 83       	st	Z, r20
    1482:	80 e0       	ldi	r24, 0x00	; 0
    1484:	08 95       	ret
    1486:	82 e0       	ldi	r24, 0x02	; 2
    1488:	08 95       	ret
    148a:	82 e0       	ldi	r24, 0x02	; 2
    148c:	08 95       	ret
    148e:	82 e0       	ldi	r24, 0x02	; 2
    1490:	08 95       	ret

00001492 <Modbus_Read_holding_registers>:
    1492:	81 11       	cpse	r24, r1
    1494:	0b c0       	rjmp	.+22     	; 0x14ac <Modbus_Read_holding_registers+0x1a>
    1496:	70 93 b1 04 	sts	0x04B1, r23	; 0x8004b1 <g_mod0_read_address+0x1>
    149a:	60 93 b0 04 	sts	0x04B0, r22	; 0x8004b0 <g_mod0_read_address>
    149e:	50 93 af 04 	sts	0x04AF, r21	; 0x8004af <g_mod0_read_qty+0x1>
    14a2:	40 93 ae 04 	sts	0x04AE, r20	; 0x8004ae <g_mod0_read_qty>
    14a6:	63 e0       	ldi	r22, 0x03	; 3
    14a8:	41 c8       	rjmp	.-3966   	; 0x52c <Modbus_mster_transaction>
    14aa:	08 95       	ret
    14ac:	81 30       	cpi	r24, 0x01	; 1
    14ae:	59 f4       	brne	.+22     	; 0x14c6 <Modbus_Read_holding_registers+0x34>
    14b0:	70 93 97 03 	sts	0x0397, r23	; 0x800397 <g_mod1_read_address+0x1>
    14b4:	60 93 96 03 	sts	0x0396, r22	; 0x800396 <g_mod1_read_address>
    14b8:	50 93 95 03 	sts	0x0395, r21	; 0x800395 <g_mod1_read_qty+0x1>
    14bc:	40 93 94 03 	sts	0x0394, r20	; 0x800394 <g_mod1_read_qty>
    14c0:	63 e0       	ldi	r22, 0x03	; 3
    14c2:	34 c8       	rjmp	.-3992   	; 0x52c <Modbus_mster_transaction>
    14c4:	08 95       	ret
    14c6:	84 ee       	ldi	r24, 0xE4	; 228
    14c8:	08 95       	ret

000014ca <Modbus_Write_multiple_registers>:
@return 0 on success; exception number on failure
@ingroup register
*/
uint8_t Modbus_Write_multiple_registers(uint8_t device,uint16_t u16WriteAddress, uint16_t u16WriteQty)
{
	if(DEVICE_0 == device){
    14ca:	81 11       	cpse	r24, r1
    14cc:	0b c0       	rjmp	.+22     	; 0x14e4 <Modbus_Write_multiple_registers+0x1a>
	
		g_mod0_write_address = u16WriteAddress;
    14ce:	70 93 2d 04 	sts	0x042D, r23	; 0x80042d <g_mod0_write_address+0x1>
    14d2:	60 93 2c 04 	sts	0x042C, r22	; 0x80042c <g_mod0_write_address>
		g_mod0_write_qty = u16WriteQty;
    14d6:	50 93 2b 04 	sts	0x042B, r21	; 0x80042b <g_mod0_write_qty+0x1>
    14da:	40 93 2a 04 	sts	0x042A, r20	; 0x80042a <g_mod0_write_qty>
		return Modbus_mster_transaction(device, WRITE_MULTIPLE_REGISTERS);
    14de:	60 e1       	ldi	r22, 0x10	; 16
    14e0:	25 c8       	rjmp	.-4022   	; 0x52c <Modbus_mster_transaction>
    14e2:	08 95       	ret
	}
	else if(DEVICE_1 == device){
    14e4:	81 30       	cpi	r24, 0x01	; 1
    14e6:	59 f4       	brne	.+22     	; 0x14fe <Modbus_Write_multiple_registers+0x34>
		g_mod1_write_address = u16WriteAddress;
    14e8:	70 93 13 03 	sts	0x0313, r23	; 0x800313 <g_mod1_write_address+0x1>
    14ec:	60 93 12 03 	sts	0x0312, r22	; 0x800312 <g_mod1_write_address>
		g_mod1_write_qty = u16WriteQty;
    14f0:	50 93 11 03 	sts	0x0311, r21	; 0x800311 <g_mod1_write_qty+0x1>
    14f4:	40 93 10 03 	sts	0x0310, r20	; 0x800310 <g_mod1_write_qty>
		return Modbus_mster_transaction(device, WRITE_MULTIPLE_REGISTERS);
    14f8:	60 e1       	ldi	r22, 0x10	; 16
    14fa:	18 c8       	rjmp	.-4048   	; 0x52c <Modbus_mster_transaction>
    14fc:	08 95       	ret
	}
	return  INVALID_DEVICE;
    14fe:	84 ee       	ldi	r24, 0xE4	; 228
}
    1500:	08 95       	ret

00001502 <vTask2>:
}
static void vTask2(void* pvParameters)
{
	uint8_t x=0;
	uint16_t RTE_data=0;
	UART0_puts("Enter Task2");
    1502:	83 e1       	ldi	r24, 0x13	; 19
    1504:	92 e0       	ldi	r25, 0x02	; 2
    1506:	c9 d1       	rcall	.+914    	; 0x189a <UART0_puts>
// 		UART0_putc('\n');
// 	}
}
static void vTask2(void* pvParameters)
{
	uint8_t x=0;
    1508:	c0 e0       	ldi	r28, 0x00	; 0
	uint16_t RTE_data=0;
	UART0_puts("Enter Task2");
	while(1){
		UART0_puts("Task2 set current temp with =");
    150a:	8f e1       	ldi	r24, 0x1F	; 31
    150c:	92 e0       	ldi	r25, 0x02	; 2
    150e:	c5 d1       	rcall	.+906    	; 0x189a <UART0_puts>
		UART0_OutUDec(x);
    1510:	6c 2f       	mov	r22, r28
    1512:	70 e0       	ldi	r23, 0x00	; 0
    1514:	80 e0       	ldi	r24, 0x00	; 0
    1516:	90 e0       	ldi	r25, 0x00	; 0
		UART0_putc('\n');
    1518:	a4 d1       	rcall	.+840    	; 0x1862 <UART0_OutUDec>
    151a:	8a e0       	ldi	r24, 0x0A	; 10
		RTE_set_Current_temperature(++x);
    151c:	89 d1       	rcall	.+786    	; 0x1830 <UART0_putc>
    151e:	cf 5f       	subi	r28, 0xFF	; 255
    1520:	8c 2f       	mov	r24, r28
		UART0_puts("Task2 Requires ");
    1522:	90 e0       	ldi	r25, 0x00	; 0
    1524:	cd d6       	rcall	.+3482   	; 0x22c0 <RTE_set_Current_temperature>
    1526:	8d e3       	ldi	r24, 0x3D	; 61
		RTE_data = RTE_get_RPM_max();
    1528:	92 e0       	ldi	r25, 0x02	; 2
    152a:	b7 d1       	rcall	.+878    	; 0x189a <UART0_puts>
		UART0_puts("Task2 RTE_data = ");
    152c:	55 d5       	rcall	.+2730   	; 0x1fd8 <RTE_get_RPM_max>
    152e:	8c 01       	movw	r16, r24
    1530:	8d e4       	ldi	r24, 0x4D	; 77
		UART0_OutUDec(RTE_data);
    1532:	92 e0       	ldi	r25, 0x02	; 2
    1534:	b2 d1       	rcall	.+868    	; 0x189a <UART0_puts>
    1536:	b8 01       	movw	r22, r16
    1538:	80 e0       	ldi	r24, 0x00	; 0
    153a:	90 e0       	ldi	r25, 0x00	; 0
		UART0_putc('\n');
    153c:	92 d1       	rcall	.+804    	; 0x1862 <UART0_OutUDec>
    153e:	8a e0       	ldi	r24, 0x0A	; 10
    1540:	77 d1       	rcall	.+750    	; 0x1830 <UART0_putc>
    1542:	e3 cf       	rjmp	.-58     	; 0x150a <vTask2+0x8>

00001544 <vTask1>:
}



static void vTask1(void* pvParameters)
{
    1544:	cf 93       	push	r28
    1546:	df 93       	push	r29
    1548:	1f 92       	push	r1
    154a:	cd b7       	in	r28, 0x3d	; 61
    154c:	de b7       	in	r29, 0x3e	; 62
	char x=0;
    154e:	19 82       	std	Y+1, r1	; 0x01
	LCD_main(&x);
    1550:	ce 01       	movw	r24, r28
    1552:	01 96       	adiw	r24, 0x01	; 1
    1554:	0e 94 4f 1e 	call	0x3c9e	; 0x3c9e <LCD_main>
// 		xSemaphoreTake(Sema_Test_handle,portMAX_DELAY);
// 		UART0_puts("Vtask1 Released data= ");
// 		UART0_OutUDec(Test);
// 		UART0_putc('\n');
// 	}
}
    1558:	0f 90       	pop	r0
    155a:	df 91       	pop	r29
    155c:	cf 91       	pop	r28
    155e:	08 95       	ret

00001560 <main>:

TaskHandle_t xHandle1 = NULL , xHandle2 = NULL;


int main(void) {
	DDRE = 0xFF;
    1560:	8f ef       	ldi	r24, 0xFF	; 255
    1562:	8d b9       	out	0x0d, r24	; 13
	UART0_init(9600); //for debug
    1564:	60 e8       	ldi	r22, 0x80	; 128
    1566:	75 e2       	ldi	r23, 0x25	; 37
    1568:	80 e0       	ldi	r24, 0x00	; 0
    156a:	90 e0       	ldi	r25, 0x00	; 0
    156c:	0c d1       	rcall	.+536    	; 0x1786 <UART0_init>
    System_init();
    156e:	0e 94 ae 1e 	call	0x3d5c	; 0x3d5c <System_init>
		
	
	/* Create the task without using any dynamic memory allocation. */
	xHandle1 = xTaskCreateStatic(
    1572:	0f 2e       	mov	r0, r31
    1574:	f6 e3       	ldi	r31, 0x36	; 54
    1576:	cf 2e       	mov	r12, r31
    1578:	fd e0       	ldi	r31, 0x0D	; 13
    157a:	df 2e       	mov	r13, r31
    157c:	f0 2d       	mov	r31, r0
    157e:	0f 2e       	mov	r0, r31
    1580:	f1 e9       	ldi	r31, 0x91	; 145
    1582:	ef 2e       	mov	r14, r31
    1584:	fd e0       	ldi	r31, 0x0D	; 13
    1586:	ff 2e       	mov	r15, r31
    1588:	f0 2d       	mov	r31, r0
    158a:	02 e0       	ldi	r16, 0x02	; 2
    158c:	20 e0       	ldi	r18, 0x00	; 0
    158e:	30 e0       	ldi	r19, 0x00	; 0
    1590:	48 ec       	ldi	r20, 0xC8	; 200
    1592:	50 e0       	ldi	r21, 0x00	; 0
    1594:	6f e5       	ldi	r22, 0x5F	; 95
    1596:	72 e0       	ldi	r23, 0x02	; 2
    1598:	82 ea       	ldi	r24, 0xA2	; 162
    159a:	9a e0       	ldi	r25, 0x0A	; 10
    159c:	0e 94 41 17 	call	0x2e82	; 0x2e82 <xTaskCreateStatic>
    15a0:	90 93 b6 04 	sts	0x04B6, r25	; 0x8004b6 <xHandle1+0x1>
    15a4:	80 93 b5 04 	sts	0x04B5, r24	; 0x8004b5 <xHandle1>
					NULL, /* Parameter passed into the task. */
					2,/* Priority at which the task is created. */
					xStack1, /* Array to use as the task's stack. */
					&xTask1Buffer); /* Variable to hold the task's data structure. */
	
	xHandle2 = xTaskCreateStatic(
    15a8:	0f 2e       	mov	r0, r31
    15aa:	fe e5       	ldi	r31, 0x5E	; 94
    15ac:	cf 2e       	mov	r12, r31
    15ae:	fd e0       	ldi	r31, 0x0D	; 13
    15b0:	df 2e       	mov	r13, r31
    15b2:	f0 2d       	mov	r31, r0
    15b4:	0f 2e       	mov	r0, r31
    15b6:	f9 e5       	ldi	r31, 0x59	; 89
    15b8:	ef 2e       	mov	r14, r31
    15ba:	fe e0       	ldi	r31, 0x0E	; 14
    15bc:	ff 2e       	mov	r15, r31
    15be:	f0 2d       	mov	r31, r0
    15c0:	20 e0       	ldi	r18, 0x00	; 0
    15c2:	30 e0       	ldi	r19, 0x00	; 0
    15c4:	48 ec       	ldi	r20, 0xC8	; 200
    15c6:	50 e0       	ldi	r21, 0x00	; 0
    15c8:	69 e1       	ldi	r22, 0x19	; 25
    15ca:	72 e0       	ldi	r23, 0x02	; 2
    15cc:	81 e8       	ldi	r24, 0x81	; 129
    15ce:	9a e0       	ldi	r25, 0x0A	; 10
    15d0:	0e 94 41 17 	call	0x2e82	; 0x2e82 <xTaskCreateStatic>
    15d4:	90 93 b4 04 	sts	0x04B4, r25	; 0x8004b4 <xHandle2+0x1>
    15d8:	80 93 b3 04 	sts	0x04B3, r24	; 0x8004b3 <xHandle2>
// 		
// 	}
// 	

	  // Start scheduler.
	  vTaskStartScheduler();
    15dc:	0e 94 37 18 	call	0x306e	; 0x306e <vTaskStartScheduler>
    15e0:	ff cf       	rjmp	.-2      	; 0x15e0 <main+0x80>

000015e2 <__vector_29>:
	return returned_data ;
}


ISR(ADC_vect)
{
    15e2:	1f 92       	push	r1
    15e4:	0f 92       	push	r0
    15e6:	0f b6       	in	r0, 0x3f	; 63
    15e8:	0f 92       	push	r0
    15ea:	11 24       	eor	r1, r1
    15ec:	2f 93       	push	r18
    15ee:	8f 93       	push	r24
    15f0:	9f 93       	push	r25
	   uint8_t The_low_adc_reg = ADC_DATA_REG_LOW ;
    15f2:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
	  // get 10 bits out of the high and low register .
	  g_analog_data =  The_low_adc_reg | (ADC_DATA_REG_HIGH <<8);
    15f6:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
    15fa:	90 e0       	ldi	r25, 0x00	; 0
    15fc:	92 2b       	or	r25, r18
    15fe:	90 93 b9 04 	sts	0x04B9, r25	; 0x8004b9 <g_analog_data+0x1>
    1602:	80 93 b8 04 	sts	0x04B8, r24	; 0x8004b8 <g_analog_data>
	  g_converted = 1 ;
    1606:	81 e0       	ldi	r24, 0x01	; 1
    1608:	80 93 b7 04 	sts	0x04B7, r24	; 0x8004b7 <g_converted>
}
    160c:	9f 91       	pop	r25
    160e:	8f 91       	pop	r24
    1610:	2f 91       	pop	r18
    1612:	0f 90       	pop	r0
    1614:	0f be       	out	0x3f, r0	; 63
    1616:	0f 90       	pop	r0
    1618:	1f 90       	pop	r1
    161a:	18 95       	reti

0000161c <DIO_init>:
void Spark_change_state(uint8_t state)
{
	if (HIGH == state)
		SET_BIT(SPARK_DATA_REG , SPARK_PIN);
	else if(LOW == state)
		CLR_BIT(SPARK_DATA_REG , SPARK_PIN);
    161c:	50 98       	cbi	0x0a, 0	; 10
    161e:	51 98       	cbi	0x0a, 1	; 10
    1620:	51 98       	cbi	0x0a, 1	; 10
    1622:	53 98       	cbi	0x0a, 3	; 10
    1624:	20 98       	cbi	0x04, 0	; 4
    1626:	55 98       	cbi	0x0a, 5	; 10
    1628:	54 98       	cbi	0x0a, 4	; 10
    162a:	3c 9a       	sbi	0x07, 4	; 7
    162c:	3f 9a       	sbi	0x07, 7	; 7
    162e:	3d 9a       	sbi	0x07, 5	; 7
    1630:	39 9a       	sbi	0x07, 1	; 7
    1632:	39 9a       	sbi	0x07, 1	; 7
    1634:	57 9a       	sbi	0x0a, 7	; 10
    1636:	38 9a       	sbi	0x07, 0	; 7
    1638:	38 98       	cbi	0x07, 0	; 7
    163a:	56 9a       	sbi	0x0a, 6	; 10
    163c:	3b 9a       	sbi	0x07, 3	; 7
    163e:	e4 e0       	ldi	r30, 0x04	; 4
    1640:	f1 e0       	ldi	r31, 0x01	; 1
    1642:	80 81       	ld	r24, Z
    1644:	84 60       	ori	r24, 0x04	; 4
    1646:	80 83       	st	Z, r24
    1648:	3f 9a       	sbi	0x07, 7	; 7
    164a:	3f 9a       	sbi	0x07, 7	; 7
    164c:	3f 9a       	sbi	0x07, 7	; 7
    164e:	e1 e0       	ldi	r30, 0x01	; 1
    1650:	f1 e0       	ldi	r31, 0x01	; 1
    1652:	80 81       	ld	r24, Z
    1654:	8e 7f       	andi	r24, 0xFE	; 254
    1656:	80 83       	st	Z, r24
    1658:	80 81       	ld	r24, Z
    165a:	82 60       	ori	r24, 0x02	; 2
    165c:	80 83       	st	Z, r24
    165e:	e2 e0       	ldi	r30, 0x02	; 2
    1660:	f1 e0       	ldi	r31, 0x01	; 1
    1662:	80 81       	ld	r24, Z
    1664:	81 60       	ori	r24, 0x01	; 1
    1666:	80 83       	st	Z, r24
    1668:	52 98       	cbi	0x0a, 2	; 10
    166a:	53 9a       	sbi	0x0a, 3	; 10
    166c:	5a 9a       	sbi	0x0b, 2	; 11
    166e:	08 95       	ret

00001670 <Modbus_change_state>:

//_________ MODE BUS initialize and enable______________________//

void Modbus_change_state(uint8_t device ,uint8_t state){
	
	switch (device){
    1670:	88 23       	and	r24, r24
    1672:	19 f0       	breq	.+6      	; 0x167a <Modbus_change_state+0xa>
    1674:	81 30       	cpi	r24, 0x01	; 1
    1676:	89 f0       	breq	.+34     	; 0x169a <Modbus_change_state+0x2a>
    1678:	08 95       	ret
		case DEVICE_0:
		 	if (HIGH == state)
    167a:	61 30       	cpi	r22, 0x01	; 1
    167c:	31 f4       	brne	.+12     	; 0x168a <Modbus_change_state+0x1a>
		 		SET_BIT(DEVICE_0_MODBUS_DATA_REG , DEVICE_0_MODBUS_PIN);
    167e:	e5 e0       	ldi	r30, 0x05	; 5
    1680:	f1 e0       	ldi	r31, 0x01	; 1
    1682:	80 81       	ld	r24, Z
    1684:	84 60       	ori	r24, 0x04	; 4
    1686:	80 83       	st	Z, r24
    1688:	08 95       	ret
		 	else if(LOW == state)
    168a:	61 11       	cpse	r22, r1
    168c:	0d c0       	rjmp	.+26     	; 0x16a8 <Modbus_change_state+0x38>
		 		CLR_BIT(DEVICE_0_MODBUS_DATA_REG , DEVICE_0_MODBUS_PIN);
    168e:	e5 e0       	ldi	r30, 0x05	; 5
    1690:	f1 e0       	ldi	r31, 0x01	; 1
    1692:	80 81       	ld	r24, Z
    1694:	8b 7f       	andi	r24, 0xFB	; 251
    1696:	80 83       	st	Z, r24
    1698:	08 95       	ret
			
			break;
		case DEVICE_1:
		     if (HIGH == state)
    169a:	61 30       	cpi	r22, 0x01	; 1
    169c:	11 f4       	brne	.+4      	; 0x16a2 <Modbus_change_state+0x32>
		         SET_BIT(DEVICE_1_MODBUS_DATA_REG , DEVICE_1_MODBUS_PIN);
    169e:	47 9a       	sbi	0x08, 7	; 8
    16a0:	08 95       	ret
		     else if(LOW == state)
    16a2:	61 11       	cpse	r22, r1
    16a4:	01 c0       	rjmp	.+2      	; 0x16a8 <Modbus_change_state+0x38>
		         CLR_BIT(DEVICE_1_MODBUS_DATA_REG , DEVICE_1_MODBUS_PIN);
    16a6:	47 98       	cbi	0x08, 7	; 8
    16a8:	08 95       	ret

000016aa <__vector_25>:

	while ((c = pgm_read_byte(progmem_s++))) {
		UART3_putc(c);
	}

} /* UART3_puts_p */
    16aa:	1f 92       	push	r1
    16ac:	0f 92       	push	r0
    16ae:	0f b6       	in	r0, 0x3f	; 63
    16b0:	0f 92       	push	r0
    16b2:	11 24       	eor	r1, r1
    16b4:	0b b6       	in	r0, 0x3b	; 59
    16b6:	0f 92       	push	r0
    16b8:	2f 93       	push	r18
    16ba:	3f 93       	push	r19
    16bc:	4f 93       	push	r20
    16be:	5f 93       	push	r21
    16c0:	8f 93       	push	r24
    16c2:	9f 93       	push	r25
    16c4:	ef 93       	push	r30
    16c6:	ff 93       	push	r31
    16c8:	20 91 c0 00 	lds	r18, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
    16cc:	30 91 c6 00 	lds	r19, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    16d0:	28 71       	andi	r18, 0x18	; 24
    16d2:	80 91 cf 07 	lds	r24, 0x07CF	; 0x8007cf <UART_RxHead>
    16d6:	90 e0       	ldi	r25, 0x00	; 0
    16d8:	01 96       	adiw	r24, 0x01	; 1
    16da:	8f 77       	andi	r24, 0x7F	; 127
    16dc:	99 27       	eor	r25, r25
    16de:	40 91 ce 07 	lds	r20, 0x07CE	; 0x8007ce <UART_RxTail>
    16e2:	50 e0       	ldi	r21, 0x00	; 0
    16e4:	84 17       	cp	r24, r20
    16e6:	95 07       	cpc	r25, r21
    16e8:	39 f0       	breq	.+14     	; 0x16f8 <__vector_25+0x4e>
    16ea:	80 93 cf 07 	sts	0x07CF, r24	; 0x8007cf <UART_RxHead>
    16ee:	fc 01       	movw	r30, r24
    16f0:	ee 52       	subi	r30, 0x2E	; 46
    16f2:	f8 4f       	sbci	r31, 0xF8	; 248
    16f4:	30 83       	st	Z, r19
    16f6:	01 c0       	rjmp	.+2      	; 0x16fa <__vector_25+0x50>
    16f8:	22 e0       	ldi	r18, 0x02	; 2
    16fa:	20 93 cd 07 	sts	0x07CD, r18	; 0x8007cd <UART_LastRxError>
    16fe:	ff 91       	pop	r31
    1700:	ef 91       	pop	r30
    1702:	9f 91       	pop	r25
    1704:	8f 91       	pop	r24
    1706:	5f 91       	pop	r21
    1708:	4f 91       	pop	r20
    170a:	3f 91       	pop	r19
    170c:	2f 91       	pop	r18
    170e:	0f 90       	pop	r0
    1710:	0b be       	out	0x3b, r0	; 59
    1712:	0f 90       	pop	r0
    1714:	0f be       	out	0x3f, r0	; 63
    1716:	0f 90       	pop	r0
    1718:	1f 90       	pop	r1
    171a:	18 95       	reti

0000171c <__vector_26>:
    171c:	1f 92       	push	r1
    171e:	0f 92       	push	r0
    1720:	0f b6       	in	r0, 0x3f	; 63
    1722:	0f 92       	push	r0
    1724:	11 24       	eor	r1, r1
    1726:	0b b6       	in	r0, 0x3b	; 59
    1728:	0f 92       	push	r0
    172a:	8f 93       	push	r24
    172c:	9f 93       	push	r25
    172e:	ef 93       	push	r30
    1730:	ff 93       	push	r31
    1732:	90 91 d1 07 	lds	r25, 0x07D1	; 0x8007d1 <UART_TxHead>
    1736:	80 91 d0 07 	lds	r24, 0x07D0	; 0x8007d0 <UART_TxTail>
    173a:	98 17       	cp	r25, r24
    173c:	89 f0       	breq	.+34     	; 0x1760 <__vector_26+0x44>
    173e:	80 91 d0 07 	lds	r24, 0x07D0	; 0x8007d0 <UART_TxTail>
    1742:	90 e0       	ldi	r25, 0x00	; 0
    1744:	01 96       	adiw	r24, 0x01	; 1
    1746:	8f 77       	andi	r24, 0x7F	; 127
    1748:	99 27       	eor	r25, r25
    174a:	80 93 d0 07 	sts	0x07D0, r24	; 0x8007d0 <UART_TxTail>
    174e:	fc 01       	movw	r30, r24
    1750:	ee 5a       	subi	r30, 0xAE	; 174
    1752:	f7 4f       	sbci	r31, 0xF7	; 247
    1754:	80 81       	ld	r24, Z
    1756:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    175a:	10 92 bd 04 	sts	0x04BD, r1	; 0x8004bd <UART0_Transmission_end>
    175e:	08 c0       	rjmp	.+16     	; 0x1770 <__vector_26+0x54>
    1760:	e1 ec       	ldi	r30, 0xC1	; 193
    1762:	f0 e0       	ldi	r31, 0x00	; 0
    1764:	80 81       	ld	r24, Z
    1766:	8f 7d       	andi	r24, 0xDF	; 223
    1768:	80 83       	st	Z, r24
    176a:	81 e0       	ldi	r24, 0x01	; 1
    176c:	80 93 bd 04 	sts	0x04BD, r24	; 0x8004bd <UART0_Transmission_end>
    1770:	ff 91       	pop	r31
    1772:	ef 91       	pop	r30
    1774:	9f 91       	pop	r25
    1776:	8f 91       	pop	r24
    1778:	0f 90       	pop	r0
    177a:	0b be       	out	0x3b, r0	; 59
    177c:	0f 90       	pop	r0
    177e:	0f be       	out	0x3f, r0	; 63
    1780:	0f 90       	pop	r0
    1782:	1f 90       	pop	r1
    1784:	18 95       	reti

00001786 <UART0_init>:
    1786:	0f 93       	push	r16
    1788:	1f 93       	push	r17
    178a:	8b 01       	movw	r16, r22
    178c:	9c 01       	movw	r18, r24
    178e:	f8 94       	cli
    1790:	10 92 d1 07 	sts	0x07D1, r1	; 0x8007d1 <UART_TxHead>
    1794:	10 92 d0 07 	sts	0x07D0, r1	; 0x8007d0 <UART_TxTail>
    1798:	10 92 cf 07 	sts	0x07CF, r1	; 0x8007cf <UART_RxHead>
    179c:	10 92 ce 07 	sts	0x07CE, r1	; 0x8007ce <UART_RxTail>
    17a0:	78 94       	sei
    17a2:	dc 01       	movw	r26, r24
    17a4:	cb 01       	movw	r24, r22
    17a6:	80 58       	subi	r24, 0x80	; 128
    17a8:	9b 47       	sbci	r25, 0x7B	; 123
    17aa:	a1 4e       	sbci	r26, 0xE1	; 225
    17ac:	bf 4f       	sbci	r27, 0xFF	; 255
    17ae:	88 0f       	add	r24, r24
    17b0:	99 1f       	adc	r25, r25
    17b2:	aa 1f       	adc	r26, r26
    17b4:	bb 1f       	adc	r27, r27
    17b6:	88 0f       	add	r24, r24
    17b8:	99 1f       	adc	r25, r25
    17ba:	aa 1f       	adc	r26, r26
    17bc:	bb 1f       	adc	r27, r27
    17be:	bc 01       	movw	r22, r24
    17c0:	cd 01       	movw	r24, r26
    17c2:	66 0f       	add	r22, r22
    17c4:	77 1f       	adc	r23, r23
    17c6:	88 1f       	adc	r24, r24
    17c8:	99 1f       	adc	r25, r25
    17ca:	00 0f       	add	r16, r16
    17cc:	11 1f       	adc	r17, r17
    17ce:	22 1f       	adc	r18, r18
    17d0:	33 1f       	adc	r19, r19
    17d2:	00 0f       	add	r16, r16
    17d4:	11 1f       	adc	r17, r17
    17d6:	22 1f       	adc	r18, r18
    17d8:	33 1f       	adc	r19, r19
    17da:	a9 01       	movw	r20, r18
    17dc:	98 01       	movw	r18, r16
    17de:	22 0f       	add	r18, r18
    17e0:	33 1f       	adc	r19, r19
    17e2:	44 1f       	adc	r20, r20
    17e4:	55 1f       	adc	r21, r21
    17e6:	22 0f       	add	r18, r18
    17e8:	33 1f       	adc	r19, r19
    17ea:	44 1f       	adc	r20, r20
    17ec:	55 1f       	adc	r21, r21
    17ee:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <__udivmodsi4>
    17f2:	ba 01       	movw	r22, r20
    17f4:	a9 01       	movw	r20, r18
    17f6:	41 50       	subi	r20, 0x01	; 1
    17f8:	51 09       	sbc	r21, r1
    17fa:	61 09       	sbc	r22, r1
    17fc:	71 09       	sbc	r23, r1
    17fe:	57 ff       	sbrs	r21, 7
    1800:	06 c0       	rjmp	.+12     	; 0x180e <UART0_init+0x88>
    1802:	82 e0       	ldi	r24, 0x02	; 2
    1804:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
    1808:	5f 77       	andi	r21, 0x7F	; 127
    180a:	66 27       	eor	r22, r22
    180c:	77 27       	eor	r23, r23
    180e:	bb 27       	eor	r27, r27
    1810:	a7 2f       	mov	r26, r23
    1812:	96 2f       	mov	r25, r22
    1814:	85 2f       	mov	r24, r21
    1816:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
    181a:	40 93 c4 00 	sts	0x00C4, r20	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
    181e:	88 e9       	ldi	r24, 0x98	; 152
    1820:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    1824:	86 e0       	ldi	r24, 0x06	; 6
    1826:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
    182a:	1f 91       	pop	r17
    182c:	0f 91       	pop	r16
    182e:	08 95       	ret

00001830 <UART0_putc>:
    1830:	40 91 d1 07 	lds	r20, 0x07D1	; 0x8007d1 <UART_TxHead>
    1834:	50 e0       	ldi	r21, 0x00	; 0
    1836:	4f 5f       	subi	r20, 0xFF	; 255
    1838:	5f 4f       	sbci	r21, 0xFF	; 255
    183a:	4f 77       	andi	r20, 0x7F	; 127
    183c:	55 27       	eor	r21, r21
    183e:	20 91 d0 07 	lds	r18, 0x07D0	; 0x8007d0 <UART_TxTail>
    1842:	30 e0       	ldi	r19, 0x00	; 0
    1844:	42 17       	cp	r20, r18
    1846:	53 07       	cpc	r21, r19
    1848:	d1 f3       	breq	.-12     	; 0x183e <UART0_putc+0xe>
    184a:	fa 01       	movw	r30, r20
    184c:	ee 5a       	subi	r30, 0xAE	; 174
    184e:	f7 4f       	sbci	r31, 0xF7	; 247
    1850:	80 83       	st	Z, r24
    1852:	40 93 d1 07 	sts	0x07D1, r20	; 0x8007d1 <UART_TxHead>
    1856:	e1 ec       	ldi	r30, 0xC1	; 193
    1858:	f0 e0       	ldi	r31, 0x00	; 0
    185a:	80 81       	ld	r24, Z
    185c:	80 62       	ori	r24, 0x20	; 32
    185e:	80 83       	st	Z, r24
    1860:	08 95       	ret

00001862 <UART0_OutUDec>:
    1862:	0f 93       	push	r16
    1864:	1f 93       	push	r17
    1866:	cf 93       	push	r28
    1868:	df 93       	push	r29
    186a:	6a 30       	cpi	r22, 0x0A	; 10
    186c:	71 05       	cpc	r23, r1
    186e:	81 05       	cpc	r24, r1
    1870:	91 05       	cpc	r25, r1
    1872:	58 f0       	brcs	.+22     	; 0x188a <UART0_OutUDec+0x28>
    1874:	2a e0       	ldi	r18, 0x0A	; 10
    1876:	30 e0       	ldi	r19, 0x00	; 0
    1878:	40 e0       	ldi	r20, 0x00	; 0
    187a:	50 e0       	ldi	r21, 0x00	; 0
    187c:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <__udivmodsi4>
    1880:	06 2f       	mov	r16, r22
    1882:	ca 01       	movw	r24, r20
    1884:	b9 01       	movw	r22, r18
    1886:	ed df       	rcall	.-38     	; 0x1862 <UART0_OutUDec>
    1888:	60 2f       	mov	r22, r16
    188a:	80 e3       	ldi	r24, 0x30	; 48
    188c:	86 0f       	add	r24, r22
    188e:	d0 df       	rcall	.-96     	; 0x1830 <UART0_putc>
    1890:	df 91       	pop	r29
    1892:	cf 91       	pop	r28
    1894:	1f 91       	pop	r17
    1896:	0f 91       	pop	r16
    1898:	08 95       	ret

0000189a <UART0_puts>:
    189a:	cf 93       	push	r28
    189c:	df 93       	push	r29
    189e:	ec 01       	movw	r28, r24
    18a0:	88 81       	ld	r24, Y
    18a2:	88 23       	and	r24, r24
    18a4:	29 f0       	breq	.+10     	; 0x18b0 <UART0_puts+0x16>
    18a6:	21 96       	adiw	r28, 0x01	; 1
    18a8:	c3 df       	rcall	.-122    	; 0x1830 <UART0_putc>
    18aa:	89 91       	ld	r24, Y+
    18ac:	81 11       	cpse	r24, r1
    18ae:	fc cf       	rjmp	.-8      	; 0x18a8 <UART0_puts+0xe>
    18b0:	df 91       	pop	r29
    18b2:	cf 91       	pop	r28
    18b4:	08 95       	ret

000018b6 <__vector_36>:
    18b6:	1f 92       	push	r1
    18b8:	0f 92       	push	r0
    18ba:	0f b6       	in	r0, 0x3f	; 63
    18bc:	0f 92       	push	r0
    18be:	11 24       	eor	r1, r1
    18c0:	0b b6       	in	r0, 0x3b	; 59
    18c2:	0f 92       	push	r0
    18c4:	2f 93       	push	r18
    18c6:	3f 93       	push	r19
    18c8:	4f 93       	push	r20
    18ca:	5f 93       	push	r21
    18cc:	8f 93       	push	r24
    18ce:	9f 93       	push	r25
    18d0:	ef 93       	push	r30
    18d2:	ff 93       	push	r31
    18d4:	20 91 c8 00 	lds	r18, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
    18d8:	30 91 ce 00 	lds	r19, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    18dc:	28 71       	andi	r18, 0x18	; 24
    18de:	80 91 ca 06 	lds	r24, 0x06CA	; 0x8006ca <UART1_RxHead>
    18e2:	90 e0       	ldi	r25, 0x00	; 0
    18e4:	01 96       	adiw	r24, 0x01	; 1
    18e6:	8f 77       	andi	r24, 0x7F	; 127
    18e8:	99 27       	eor	r25, r25
    18ea:	40 91 c9 06 	lds	r20, 0x06C9	; 0x8006c9 <UART1_RxTail>
    18ee:	50 e0       	ldi	r21, 0x00	; 0
    18f0:	84 17       	cp	r24, r20
    18f2:	95 07       	cpc	r25, r21
    18f4:	39 f0       	breq	.+14     	; 0x1904 <__vector_36+0x4e>
    18f6:	80 93 ca 06 	sts	0x06CA, r24	; 0x8006ca <UART1_RxHead>
    18fa:	fc 01       	movw	r30, r24
    18fc:	e3 53       	subi	r30, 0x33	; 51
    18fe:	f9 4f       	sbci	r31, 0xF9	; 249
    1900:	30 83       	st	Z, r19
    1902:	01 c0       	rjmp	.+2      	; 0x1906 <__vector_36+0x50>
    1904:	22 e0       	ldi	r18, 0x02	; 2
    1906:	20 93 c8 06 	sts	0x06C8, r18	; 0x8006c8 <UART1_LastRxError>
    190a:	ff 91       	pop	r31
    190c:	ef 91       	pop	r30
    190e:	9f 91       	pop	r25
    1910:	8f 91       	pop	r24
    1912:	5f 91       	pop	r21
    1914:	4f 91       	pop	r20
    1916:	3f 91       	pop	r19
    1918:	2f 91       	pop	r18
    191a:	0f 90       	pop	r0
    191c:	0b be       	out	0x3b, r0	; 59
    191e:	0f 90       	pop	r0
    1920:	0f be       	out	0x3f, r0	; 63
    1922:	0f 90       	pop	r0
    1924:	1f 90       	pop	r1
    1926:	18 95       	reti

00001928 <__vector_37>:
    1928:	1f 92       	push	r1
    192a:	0f 92       	push	r0
    192c:	0f b6       	in	r0, 0x3f	; 63
    192e:	0f 92       	push	r0
    1930:	11 24       	eor	r1, r1
    1932:	0b b6       	in	r0, 0x3b	; 59
    1934:	0f 92       	push	r0
    1936:	8f 93       	push	r24
    1938:	9f 93       	push	r25
    193a:	ef 93       	push	r30
    193c:	ff 93       	push	r31
    193e:	90 91 cc 06 	lds	r25, 0x06CC	; 0x8006cc <UART1_TxHead>
    1942:	80 91 cb 06 	lds	r24, 0x06CB	; 0x8006cb <UART1_TxTail>
    1946:	98 17       	cp	r25, r24
    1948:	89 f0       	breq	.+34     	; 0x196c <__vector_37+0x44>
    194a:	80 91 cb 06 	lds	r24, 0x06CB	; 0x8006cb <UART1_TxTail>
    194e:	90 e0       	ldi	r25, 0x00	; 0
    1950:	01 96       	adiw	r24, 0x01	; 1
    1952:	8f 77       	andi	r24, 0x7F	; 127
    1954:	99 27       	eor	r25, r25
    1956:	80 93 cb 06 	sts	0x06CB, r24	; 0x8006cb <UART1_TxTail>
    195a:	fc 01       	movw	r30, r24
    195c:	e3 5b       	subi	r30, 0xB3	; 179
    195e:	f8 4f       	sbci	r31, 0xF8	; 248
    1960:	80 81       	ld	r24, Z
    1962:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    1966:	10 92 bc 04 	sts	0x04BC, r1	; 0x8004bc <UART1_Transmission_end>
    196a:	08 c0       	rjmp	.+16     	; 0x197c <__vector_37+0x54>
    196c:	e9 ec       	ldi	r30, 0xC9	; 201
    196e:	f0 e0       	ldi	r31, 0x00	; 0
    1970:	80 81       	ld	r24, Z
    1972:	8f 7d       	andi	r24, 0xDF	; 223
    1974:	80 83       	st	Z, r24
    1976:	81 e0       	ldi	r24, 0x01	; 1
    1978:	80 93 bc 04 	sts	0x04BC, r24	; 0x8004bc <UART1_Transmission_end>
    197c:	ff 91       	pop	r31
    197e:	ef 91       	pop	r30
    1980:	9f 91       	pop	r25
    1982:	8f 91       	pop	r24
    1984:	0f 90       	pop	r0
    1986:	0b be       	out	0x3b, r0	; 59
    1988:	0f 90       	pop	r0
    198a:	0f be       	out	0x3f, r0	; 63
    198c:	0f 90       	pop	r0
    198e:	1f 90       	pop	r1
    1990:	18 95       	reti

00001992 <UART1_init>:
    1992:	0f 93       	push	r16
    1994:	1f 93       	push	r17
    1996:	8b 01       	movw	r16, r22
    1998:	9c 01       	movw	r18, r24
    199a:	f8 94       	cli
    199c:	10 92 cc 06 	sts	0x06CC, r1	; 0x8006cc <UART1_TxHead>
    19a0:	10 92 cb 06 	sts	0x06CB, r1	; 0x8006cb <UART1_TxTail>
    19a4:	10 92 ca 06 	sts	0x06CA, r1	; 0x8006ca <UART1_RxHead>
    19a8:	10 92 c9 06 	sts	0x06C9, r1	; 0x8006c9 <UART1_RxTail>
    19ac:	78 94       	sei
    19ae:	dc 01       	movw	r26, r24
    19b0:	cb 01       	movw	r24, r22
    19b2:	80 58       	subi	r24, 0x80	; 128
    19b4:	9b 47       	sbci	r25, 0x7B	; 123
    19b6:	a1 4e       	sbci	r26, 0xE1	; 225
    19b8:	bf 4f       	sbci	r27, 0xFF	; 255
    19ba:	88 0f       	add	r24, r24
    19bc:	99 1f       	adc	r25, r25
    19be:	aa 1f       	adc	r26, r26
    19c0:	bb 1f       	adc	r27, r27
    19c2:	88 0f       	add	r24, r24
    19c4:	99 1f       	adc	r25, r25
    19c6:	aa 1f       	adc	r26, r26
    19c8:	bb 1f       	adc	r27, r27
    19ca:	bc 01       	movw	r22, r24
    19cc:	cd 01       	movw	r24, r26
    19ce:	66 0f       	add	r22, r22
    19d0:	77 1f       	adc	r23, r23
    19d2:	88 1f       	adc	r24, r24
    19d4:	99 1f       	adc	r25, r25
    19d6:	00 0f       	add	r16, r16
    19d8:	11 1f       	adc	r17, r17
    19da:	22 1f       	adc	r18, r18
    19dc:	33 1f       	adc	r19, r19
    19de:	00 0f       	add	r16, r16
    19e0:	11 1f       	adc	r17, r17
    19e2:	22 1f       	adc	r18, r18
    19e4:	33 1f       	adc	r19, r19
    19e6:	a9 01       	movw	r20, r18
    19e8:	98 01       	movw	r18, r16
    19ea:	22 0f       	add	r18, r18
    19ec:	33 1f       	adc	r19, r19
    19ee:	44 1f       	adc	r20, r20
    19f0:	55 1f       	adc	r21, r21
    19f2:	22 0f       	add	r18, r18
    19f4:	33 1f       	adc	r19, r19
    19f6:	44 1f       	adc	r20, r20
    19f8:	55 1f       	adc	r21, r21
    19fa:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <__udivmodsi4>
    19fe:	ba 01       	movw	r22, r20
    1a00:	a9 01       	movw	r20, r18
    1a02:	41 50       	subi	r20, 0x01	; 1
    1a04:	51 09       	sbc	r21, r1
    1a06:	61 09       	sbc	r22, r1
    1a08:	71 09       	sbc	r23, r1
    1a0a:	57 ff       	sbrs	r21, 7
    1a0c:	06 c0       	rjmp	.+12     	; 0x1a1a <UART1_init+0x88>
    1a0e:	82 e0       	ldi	r24, 0x02	; 2
    1a10:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
    1a14:	5f 77       	andi	r21, 0x7F	; 127
    1a16:	66 27       	eor	r22, r22
    1a18:	77 27       	eor	r23, r23
    1a1a:	bb 27       	eor	r27, r27
    1a1c:	a7 2f       	mov	r26, r23
    1a1e:	96 2f       	mov	r25, r22
    1a20:	85 2f       	mov	r24, r21
    1a22:	80 93 cd 00 	sts	0x00CD, r24	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7000cd>
    1a26:	40 93 cc 00 	sts	0x00CC, r20	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7000cc>
    1a2a:	88 e9       	ldi	r24, 0x98	; 152
    1a2c:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7000c9>
    1a30:	86 e0       	ldi	r24, 0x06	; 6
    1a32:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7000ca>
    1a36:	1f 91       	pop	r17
    1a38:	0f 91       	pop	r16
    1a3a:	08 95       	ret

00001a3c <UART1_getc>:
    1a3c:	f8 94       	cli
    1a3e:	90 91 ca 06 	lds	r25, 0x06CA	; 0x8006ca <UART1_RxHead>
    1a42:	80 91 c9 06 	lds	r24, 0x06C9	; 0x8006c9 <UART1_RxTail>
    1a46:	98 13       	cpse	r25, r24
    1a48:	04 c0       	rjmp	.+8      	; 0x1a52 <UART1_getc+0x16>
    1a4a:	78 94       	sei
    1a4c:	80 e0       	ldi	r24, 0x00	; 0
    1a4e:	91 e0       	ldi	r25, 0x01	; 1
    1a50:	08 95       	ret
    1a52:	80 91 c9 06 	lds	r24, 0x06C9	; 0x8006c9 <UART1_RxTail>
    1a56:	90 e0       	ldi	r25, 0x00	; 0
    1a58:	01 96       	adiw	r24, 0x01	; 1
    1a5a:	8f 77       	andi	r24, 0x7F	; 127
    1a5c:	99 27       	eor	r25, r25
    1a5e:	80 93 c9 06 	sts	0x06C9, r24	; 0x8006c9 <UART1_RxTail>
    1a62:	78 94       	sei
    1a64:	fc 01       	movw	r30, r24
    1a66:	e3 53       	subi	r30, 0x33	; 51
    1a68:	f9 4f       	sbci	r31, 0xF9	; 249
    1a6a:	20 81       	ld	r18, Z
    1a6c:	80 91 c8 06 	lds	r24, 0x06C8	; 0x8006c8 <UART1_LastRxError>
    1a70:	90 e0       	ldi	r25, 0x00	; 0
    1a72:	98 2f       	mov	r25, r24
    1a74:	88 27       	eor	r24, r24
    1a76:	82 0f       	add	r24, r18
    1a78:	91 1d       	adc	r25, r1
    1a7a:	08 95       	ret

00001a7c <UART1_putc>:
    1a7c:	40 91 cc 06 	lds	r20, 0x06CC	; 0x8006cc <UART1_TxHead>
    1a80:	50 e0       	ldi	r21, 0x00	; 0
    1a82:	4f 5f       	subi	r20, 0xFF	; 255
    1a84:	5f 4f       	sbci	r21, 0xFF	; 255
    1a86:	4f 77       	andi	r20, 0x7F	; 127
    1a88:	55 27       	eor	r21, r21
    1a8a:	20 91 cb 06 	lds	r18, 0x06CB	; 0x8006cb <UART1_TxTail>
    1a8e:	30 e0       	ldi	r19, 0x00	; 0
    1a90:	42 17       	cp	r20, r18
    1a92:	53 07       	cpc	r21, r19
    1a94:	d1 f3       	breq	.-12     	; 0x1a8a <UART1_putc+0xe>
    1a96:	fa 01       	movw	r30, r20
    1a98:	e3 5b       	subi	r30, 0xB3	; 179
    1a9a:	f8 4f       	sbci	r31, 0xF8	; 248
    1a9c:	80 83       	st	Z, r24
    1a9e:	40 93 cc 06 	sts	0x06CC, r20	; 0x8006cc <UART1_TxHead>
    1aa2:	e9 ec       	ldi	r30, 0xC9	; 201
    1aa4:	f0 e0       	ldi	r31, 0x00	; 0
    1aa6:	80 81       	ld	r24, Z
    1aa8:	80 62       	ori	r24, 0x20	; 32
    1aaa:	80 83       	st	Z, r24
    1aac:	08 95       	ret

00001aae <UART1_available>:
    1aae:	f8 94       	cli
    1ab0:	80 91 ca 06 	lds	r24, 0x06CA	; 0x8006ca <UART1_RxHead>
    1ab4:	20 91 c9 06 	lds	r18, 0x06C9	; 0x8006c9 <UART1_RxTail>
    1ab8:	78 94       	sei
    1aba:	90 e0       	ldi	r25, 0x00	; 0
    1abc:	80 58       	subi	r24, 0x80	; 128
    1abe:	9f 4f       	sbci	r25, 0xFF	; 255
    1ac0:	82 1b       	sub	r24, r18
    1ac2:	91 09       	sbc	r25, r1
    1ac4:	8f 77       	andi	r24, 0x7F	; 127
    1ac6:	99 27       	eor	r25, r25
    1ac8:	08 95       	ret

00001aca <UART1_flush>:
    1aca:	80 91 bc 04 	lds	r24, 0x04BC	; 0x8004bc <UART1_Transmission_end>
    1ace:	88 23       	and	r24, r24
    1ad0:	e1 f3       	breq	.-8      	; 0x1aca <UART1_flush>
    1ad2:	08 95       	ret

00001ad4 <__vector_51>:
    1ad4:	1f 92       	push	r1
    1ad6:	0f 92       	push	r0
    1ad8:	0f b6       	in	r0, 0x3f	; 63
    1ada:	0f 92       	push	r0
    1adc:	11 24       	eor	r1, r1
    1ade:	0b b6       	in	r0, 0x3b	; 59
    1ae0:	0f 92       	push	r0
    1ae2:	2f 93       	push	r18
    1ae4:	3f 93       	push	r19
    1ae6:	4f 93       	push	r20
    1ae8:	5f 93       	push	r21
    1aea:	8f 93       	push	r24
    1aec:	9f 93       	push	r25
    1aee:	ef 93       	push	r30
    1af0:	ff 93       	push	r31
    1af2:	20 91 d0 00 	lds	r18, 0x00D0	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7000d0>
    1af6:	30 91 d6 00 	lds	r19, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    1afa:	28 71       	andi	r18, 0x18	; 24
    1afc:	80 91 c5 05 	lds	r24, 0x05C5	; 0x8005c5 <UART2_RxHead>
    1b00:	90 e0       	ldi	r25, 0x00	; 0
    1b02:	01 96       	adiw	r24, 0x01	; 1
    1b04:	8f 77       	andi	r24, 0x7F	; 127
    1b06:	99 27       	eor	r25, r25
    1b08:	40 91 c4 05 	lds	r20, 0x05C4	; 0x8005c4 <UART2_RxTail>
    1b0c:	50 e0       	ldi	r21, 0x00	; 0
    1b0e:	84 17       	cp	r24, r20
    1b10:	95 07       	cpc	r25, r21
    1b12:	39 f0       	breq	.+14     	; 0x1b22 <__vector_51+0x4e>
    1b14:	80 93 c5 05 	sts	0x05C5, r24	; 0x8005c5 <UART2_RxHead>
    1b18:	fc 01       	movw	r30, r24
    1b1a:	e8 53       	subi	r30, 0x38	; 56
    1b1c:	fa 4f       	sbci	r31, 0xFA	; 250
    1b1e:	30 83       	st	Z, r19
    1b20:	01 c0       	rjmp	.+2      	; 0x1b24 <__vector_51+0x50>
    1b22:	22 e0       	ldi	r18, 0x02	; 2
    1b24:	20 93 c3 05 	sts	0x05C3, r18	; 0x8005c3 <UART2_LastRxError>
    1b28:	ff 91       	pop	r31
    1b2a:	ef 91       	pop	r30
    1b2c:	9f 91       	pop	r25
    1b2e:	8f 91       	pop	r24
    1b30:	5f 91       	pop	r21
    1b32:	4f 91       	pop	r20
    1b34:	3f 91       	pop	r19
    1b36:	2f 91       	pop	r18
    1b38:	0f 90       	pop	r0
    1b3a:	0b be       	out	0x3b, r0	; 59
    1b3c:	0f 90       	pop	r0
    1b3e:	0f be       	out	0x3f, r0	; 63
    1b40:	0f 90       	pop	r0
    1b42:	1f 90       	pop	r1
    1b44:	18 95       	reti

00001b46 <__vector_52>:
    1b46:	1f 92       	push	r1
    1b48:	0f 92       	push	r0
    1b4a:	0f b6       	in	r0, 0x3f	; 63
    1b4c:	0f 92       	push	r0
    1b4e:	11 24       	eor	r1, r1
    1b50:	0b b6       	in	r0, 0x3b	; 59
    1b52:	0f 92       	push	r0
    1b54:	8f 93       	push	r24
    1b56:	9f 93       	push	r25
    1b58:	ef 93       	push	r30
    1b5a:	ff 93       	push	r31
    1b5c:	90 91 c7 05 	lds	r25, 0x05C7	; 0x8005c7 <UART2_TxHead>
    1b60:	80 91 c6 05 	lds	r24, 0x05C6	; 0x8005c6 <UART2_TxTail>
    1b64:	98 17       	cp	r25, r24
    1b66:	89 f0       	breq	.+34     	; 0x1b8a <__vector_52+0x44>
    1b68:	80 91 c6 05 	lds	r24, 0x05C6	; 0x8005c6 <UART2_TxTail>
    1b6c:	90 e0       	ldi	r25, 0x00	; 0
    1b6e:	01 96       	adiw	r24, 0x01	; 1
    1b70:	8f 77       	andi	r24, 0x7F	; 127
    1b72:	99 27       	eor	r25, r25
    1b74:	80 93 c6 05 	sts	0x05C6, r24	; 0x8005c6 <UART2_TxTail>
    1b78:	fc 01       	movw	r30, r24
    1b7a:	e8 5b       	subi	r30, 0xB8	; 184
    1b7c:	f9 4f       	sbci	r31, 0xF9	; 249
    1b7e:	80 81       	ld	r24, Z
    1b80:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    1b84:	10 92 bb 04 	sts	0x04BB, r1	; 0x8004bb <UART2_Transmission_end>
    1b88:	08 c0       	rjmp	.+16     	; 0x1b9a <__vector_52+0x54>
    1b8a:	e1 ed       	ldi	r30, 0xD1	; 209
    1b8c:	f0 e0       	ldi	r31, 0x00	; 0
    1b8e:	80 81       	ld	r24, Z
    1b90:	8f 7d       	andi	r24, 0xDF	; 223
    1b92:	80 83       	st	Z, r24
    1b94:	81 e0       	ldi	r24, 0x01	; 1
    1b96:	80 93 bb 04 	sts	0x04BB, r24	; 0x8004bb <UART2_Transmission_end>
    1b9a:	ff 91       	pop	r31
    1b9c:	ef 91       	pop	r30
    1b9e:	9f 91       	pop	r25
    1ba0:	8f 91       	pop	r24
    1ba2:	0f 90       	pop	r0
    1ba4:	0b be       	out	0x3b, r0	; 59
    1ba6:	0f 90       	pop	r0
    1ba8:	0f be       	out	0x3f, r0	; 63
    1baa:	0f 90       	pop	r0
    1bac:	1f 90       	pop	r1
    1bae:	18 95       	reti

00001bb0 <UART2_init>:
    1bb0:	0f 93       	push	r16
    1bb2:	1f 93       	push	r17
    1bb4:	8b 01       	movw	r16, r22
    1bb6:	9c 01       	movw	r18, r24
    1bb8:	f8 94       	cli
    1bba:	10 92 c7 05 	sts	0x05C7, r1	; 0x8005c7 <UART2_TxHead>
    1bbe:	10 92 c6 05 	sts	0x05C6, r1	; 0x8005c6 <UART2_TxTail>
    1bc2:	10 92 c5 05 	sts	0x05C5, r1	; 0x8005c5 <UART2_RxHead>
    1bc6:	10 92 c4 05 	sts	0x05C4, r1	; 0x8005c4 <UART2_RxTail>
    1bca:	78 94       	sei
    1bcc:	dc 01       	movw	r26, r24
    1bce:	cb 01       	movw	r24, r22
    1bd0:	80 58       	subi	r24, 0x80	; 128
    1bd2:	9b 47       	sbci	r25, 0x7B	; 123
    1bd4:	a1 4e       	sbci	r26, 0xE1	; 225
    1bd6:	bf 4f       	sbci	r27, 0xFF	; 255
    1bd8:	88 0f       	add	r24, r24
    1bda:	99 1f       	adc	r25, r25
    1bdc:	aa 1f       	adc	r26, r26
    1bde:	bb 1f       	adc	r27, r27
    1be0:	88 0f       	add	r24, r24
    1be2:	99 1f       	adc	r25, r25
    1be4:	aa 1f       	adc	r26, r26
    1be6:	bb 1f       	adc	r27, r27
    1be8:	bc 01       	movw	r22, r24
    1bea:	cd 01       	movw	r24, r26
    1bec:	66 0f       	add	r22, r22
    1bee:	77 1f       	adc	r23, r23
    1bf0:	88 1f       	adc	r24, r24
    1bf2:	99 1f       	adc	r25, r25
    1bf4:	00 0f       	add	r16, r16
    1bf6:	11 1f       	adc	r17, r17
    1bf8:	22 1f       	adc	r18, r18
    1bfa:	33 1f       	adc	r19, r19
    1bfc:	00 0f       	add	r16, r16
    1bfe:	11 1f       	adc	r17, r17
    1c00:	22 1f       	adc	r18, r18
    1c02:	33 1f       	adc	r19, r19
    1c04:	a9 01       	movw	r20, r18
    1c06:	98 01       	movw	r18, r16
    1c08:	22 0f       	add	r18, r18
    1c0a:	33 1f       	adc	r19, r19
    1c0c:	44 1f       	adc	r20, r20
    1c0e:	55 1f       	adc	r21, r21
    1c10:	22 0f       	add	r18, r18
    1c12:	33 1f       	adc	r19, r19
    1c14:	44 1f       	adc	r20, r20
    1c16:	55 1f       	adc	r21, r21
    1c18:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <__udivmodsi4>
    1c1c:	ba 01       	movw	r22, r20
    1c1e:	a9 01       	movw	r20, r18
    1c20:	41 50       	subi	r20, 0x01	; 1
    1c22:	51 09       	sbc	r21, r1
    1c24:	61 09       	sbc	r22, r1
    1c26:	71 09       	sbc	r23, r1
    1c28:	57 ff       	sbrs	r21, 7
    1c2a:	06 c0       	rjmp	.+12     	; 0x1c38 <UART2_init+0x88>
    1c2c:	82 e0       	ldi	r24, 0x02	; 2
    1c2e:	80 93 d0 00 	sts	0x00D0, r24	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7000d0>
    1c32:	5f 77       	andi	r21, 0x7F	; 127
    1c34:	66 27       	eor	r22, r22
    1c36:	77 27       	eor	r23, r23
    1c38:	bb 27       	eor	r27, r27
    1c3a:	a7 2f       	mov	r26, r23
    1c3c:	96 2f       	mov	r25, r22
    1c3e:	85 2f       	mov	r24, r21
    1c40:	80 93 d5 00 	sts	0x00D5, r24	; 0x8000d5 <__TEXT_REGION_LENGTH__+0x7000d5>
    1c44:	40 93 d4 00 	sts	0x00D4, r20	; 0x8000d4 <__TEXT_REGION_LENGTH__+0x7000d4>
    1c48:	88 e9       	ldi	r24, 0x98	; 152
    1c4a:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7000d1>
    1c4e:	86 e0       	ldi	r24, 0x06	; 6
    1c50:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7000d2>
    1c54:	1f 91       	pop	r17
    1c56:	0f 91       	pop	r16
    1c58:	08 95       	ret

00001c5a <UART2_getc>:
    1c5a:	90 91 c5 05 	lds	r25, 0x05C5	; 0x8005c5 <UART2_RxHead>
    1c5e:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <UART2_RxTail>
    1c62:	98 17       	cp	r25, r24
    1c64:	a1 f0       	breq	.+40     	; 0x1c8e <UART2_getc+0x34>
    1c66:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <UART2_RxTail>
    1c6a:	90 e0       	ldi	r25, 0x00	; 0
    1c6c:	01 96       	adiw	r24, 0x01	; 1
    1c6e:	8f 77       	andi	r24, 0x7F	; 127
    1c70:	99 27       	eor	r25, r25
    1c72:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <UART2_RxTail>
    1c76:	fc 01       	movw	r30, r24
    1c78:	e8 53       	subi	r30, 0x38	; 56
    1c7a:	fa 4f       	sbci	r31, 0xFA	; 250
    1c7c:	20 81       	ld	r18, Z
    1c7e:	80 91 c3 05 	lds	r24, 0x05C3	; 0x8005c3 <UART2_LastRxError>
    1c82:	90 e0       	ldi	r25, 0x00	; 0
    1c84:	98 2f       	mov	r25, r24
    1c86:	88 27       	eor	r24, r24
    1c88:	82 0f       	add	r24, r18
    1c8a:	91 1d       	adc	r25, r1
    1c8c:	08 95       	ret
    1c8e:	80 e0       	ldi	r24, 0x00	; 0
    1c90:	91 e0       	ldi	r25, 0x01	; 1
    1c92:	08 95       	ret

00001c94 <UART2_putc>:
    1c94:	40 91 c7 05 	lds	r20, 0x05C7	; 0x8005c7 <UART2_TxHead>
    1c98:	50 e0       	ldi	r21, 0x00	; 0
    1c9a:	4f 5f       	subi	r20, 0xFF	; 255
    1c9c:	5f 4f       	sbci	r21, 0xFF	; 255
    1c9e:	4f 77       	andi	r20, 0x7F	; 127
    1ca0:	55 27       	eor	r21, r21
    1ca2:	20 91 c6 05 	lds	r18, 0x05C6	; 0x8005c6 <UART2_TxTail>
    1ca6:	30 e0       	ldi	r19, 0x00	; 0
    1ca8:	42 17       	cp	r20, r18
    1caa:	53 07       	cpc	r21, r19
    1cac:	d1 f3       	breq	.-12     	; 0x1ca2 <UART2_putc+0xe>
    1cae:	fa 01       	movw	r30, r20
    1cb0:	e8 5b       	subi	r30, 0xB8	; 184
    1cb2:	f9 4f       	sbci	r31, 0xF9	; 249
    1cb4:	80 83       	st	Z, r24
    1cb6:	40 93 c7 05 	sts	0x05C7, r20	; 0x8005c7 <UART2_TxHead>
    1cba:	e1 ed       	ldi	r30, 0xD1	; 209
    1cbc:	f0 e0       	ldi	r31, 0x00	; 0
    1cbe:	80 81       	ld	r24, Z
    1cc0:	80 62       	ori	r24, 0x20	; 32
    1cc2:	80 83       	st	Z, r24
    1cc4:	08 95       	ret

00001cc6 <UART2_available>:
    1cc6:	f8 94       	cli
    1cc8:	80 91 c5 05 	lds	r24, 0x05C5	; 0x8005c5 <UART2_RxHead>
    1ccc:	20 91 c4 05 	lds	r18, 0x05C4	; 0x8005c4 <UART2_RxTail>
    1cd0:	78 94       	sei
    1cd2:	90 e0       	ldi	r25, 0x00	; 0
    1cd4:	80 58       	subi	r24, 0x80	; 128
    1cd6:	9f 4f       	sbci	r25, 0xFF	; 255
    1cd8:	82 1b       	sub	r24, r18
    1cda:	91 09       	sbc	r25, r1
    1cdc:	8f 77       	andi	r24, 0x7F	; 127
    1cde:	99 27       	eor	r25, r25
    1ce0:	08 95       	ret

00001ce2 <UART2_flush>:
    1ce2:	80 91 bb 04 	lds	r24, 0x04BB	; 0x8004bb <UART2_Transmission_end>
    1ce6:	88 23       	and	r24, r24
    1ce8:	e1 f3       	breq	.-8      	; 0x1ce2 <UART2_flush>
    1cea:	08 95       	ret

00001cec <__vector_54>:
    1cec:	1f 92       	push	r1
    1cee:	0f 92       	push	r0
    1cf0:	0f b6       	in	r0, 0x3f	; 63
    1cf2:	0f 92       	push	r0
    1cf4:	11 24       	eor	r1, r1
    1cf6:	0b b6       	in	r0, 0x3b	; 59
    1cf8:	0f 92       	push	r0
    1cfa:	2f 93       	push	r18
    1cfc:	3f 93       	push	r19
    1cfe:	4f 93       	push	r20
    1d00:	5f 93       	push	r21
    1d02:	8f 93       	push	r24
    1d04:	9f 93       	push	r25
    1d06:	ef 93       	push	r30
    1d08:	ff 93       	push	r31
    1d0a:	20 91 30 01 	lds	r18, 0x0130	; 0x800130 <__TEXT_REGION_LENGTH__+0x700130>
    1d0e:	30 91 36 01 	lds	r19, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    1d12:	28 71       	andi	r18, 0x18	; 24
    1d14:	80 91 c0 04 	lds	r24, 0x04C0	; 0x8004c0 <UART3_RxHead>
    1d18:	90 e0       	ldi	r25, 0x00	; 0
    1d1a:	01 96       	adiw	r24, 0x01	; 1
    1d1c:	8f 77       	andi	r24, 0x7F	; 127
    1d1e:	99 27       	eor	r25, r25
    1d20:	40 91 bf 04 	lds	r20, 0x04BF	; 0x8004bf <UART3_RxTail>
    1d24:	50 e0       	ldi	r21, 0x00	; 0
    1d26:	84 17       	cp	r24, r20
    1d28:	95 07       	cpc	r25, r21
    1d2a:	39 f0       	breq	.+14     	; 0x1d3a <__vector_54+0x4e>
    1d2c:	80 93 c0 04 	sts	0x04C0, r24	; 0x8004c0 <UART3_RxHead>
    1d30:	fc 01       	movw	r30, r24
    1d32:	ed 53       	subi	r30, 0x3D	; 61
    1d34:	fb 4f       	sbci	r31, 0xFB	; 251
    1d36:	30 83       	st	Z, r19
    1d38:	01 c0       	rjmp	.+2      	; 0x1d3c <__vector_54+0x50>
    1d3a:	22 e0       	ldi	r18, 0x02	; 2
    1d3c:	20 93 be 04 	sts	0x04BE, r18	; 0x8004be <UART3_LastRxError>
    1d40:	ff 91       	pop	r31
    1d42:	ef 91       	pop	r30
    1d44:	9f 91       	pop	r25
    1d46:	8f 91       	pop	r24
    1d48:	5f 91       	pop	r21
    1d4a:	4f 91       	pop	r20
    1d4c:	3f 91       	pop	r19
    1d4e:	2f 91       	pop	r18
    1d50:	0f 90       	pop	r0
    1d52:	0b be       	out	0x3b, r0	; 59
    1d54:	0f 90       	pop	r0
    1d56:	0f be       	out	0x3f, r0	; 63
    1d58:	0f 90       	pop	r0
    1d5a:	1f 90       	pop	r1
    1d5c:	18 95       	reti

00001d5e <__vector_55>:
    1d5e:	1f 92       	push	r1
    1d60:	0f 92       	push	r0
    1d62:	0f b6       	in	r0, 0x3f	; 63
    1d64:	0f 92       	push	r0
    1d66:	11 24       	eor	r1, r1
    1d68:	0b b6       	in	r0, 0x3b	; 59
    1d6a:	0f 92       	push	r0
    1d6c:	8f 93       	push	r24
    1d6e:	9f 93       	push	r25
    1d70:	ef 93       	push	r30
    1d72:	ff 93       	push	r31
    1d74:	90 91 c2 04 	lds	r25, 0x04C2	; 0x8004c2 <UART3_TxHead>
    1d78:	80 91 c1 04 	lds	r24, 0x04C1	; 0x8004c1 <UART3_TxTail>
    1d7c:	98 17       	cp	r25, r24
    1d7e:	89 f0       	breq	.+34     	; 0x1da2 <__vector_55+0x44>
    1d80:	80 91 c1 04 	lds	r24, 0x04C1	; 0x8004c1 <UART3_TxTail>
    1d84:	90 e0       	ldi	r25, 0x00	; 0
    1d86:	01 96       	adiw	r24, 0x01	; 1
    1d88:	8f 77       	andi	r24, 0x7F	; 127
    1d8a:	99 27       	eor	r25, r25
    1d8c:	80 93 c1 04 	sts	0x04C1, r24	; 0x8004c1 <UART3_TxTail>
    1d90:	fc 01       	movw	r30, r24
    1d92:	ed 5b       	subi	r30, 0xBD	; 189
    1d94:	fa 4f       	sbci	r31, 0xFA	; 250
    1d96:	80 81       	ld	r24, Z
    1d98:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    1d9c:	10 92 ba 04 	sts	0x04BA, r1	; 0x8004ba <UART3_Transmission_end>
    1da0:	08 c0       	rjmp	.+16     	; 0x1db2 <__vector_55+0x54>
    1da2:	e1 e3       	ldi	r30, 0x31	; 49
    1da4:	f1 e0       	ldi	r31, 0x01	; 1
    1da6:	80 81       	ld	r24, Z
    1da8:	8f 7d       	andi	r24, 0xDF	; 223
    1daa:	80 83       	st	Z, r24
    1dac:	81 e0       	ldi	r24, 0x01	; 1
    1dae:	80 93 ba 04 	sts	0x04BA, r24	; 0x8004ba <UART3_Transmission_end>
    1db2:	ff 91       	pop	r31
    1db4:	ef 91       	pop	r30
    1db6:	9f 91       	pop	r25
    1db8:	8f 91       	pop	r24
    1dba:	0f 90       	pop	r0
    1dbc:	0b be       	out	0x3b, r0	; 59
    1dbe:	0f 90       	pop	r0
    1dc0:	0f be       	out	0x3f, r0	; 63
    1dc2:	0f 90       	pop	r0
    1dc4:	1f 90       	pop	r1
    1dc6:	18 95       	reti

00001dc8 <UART3_init>:
    1dc8:	0f 93       	push	r16
    1dca:	1f 93       	push	r17
    1dcc:	8b 01       	movw	r16, r22
    1dce:	9c 01       	movw	r18, r24
    1dd0:	f8 94       	cli
    1dd2:	10 92 c2 04 	sts	0x04C2, r1	; 0x8004c2 <UART3_TxHead>
    1dd6:	10 92 c1 04 	sts	0x04C1, r1	; 0x8004c1 <UART3_TxTail>
    1dda:	10 92 c0 04 	sts	0x04C0, r1	; 0x8004c0 <UART3_RxHead>
    1dde:	10 92 bf 04 	sts	0x04BF, r1	; 0x8004bf <UART3_RxTail>
    1de2:	78 94       	sei
    1de4:	dc 01       	movw	r26, r24
    1de6:	cb 01       	movw	r24, r22
    1de8:	80 58       	subi	r24, 0x80	; 128
    1dea:	9b 47       	sbci	r25, 0x7B	; 123
    1dec:	a1 4e       	sbci	r26, 0xE1	; 225
    1dee:	bf 4f       	sbci	r27, 0xFF	; 255
    1df0:	88 0f       	add	r24, r24
    1df2:	99 1f       	adc	r25, r25
    1df4:	aa 1f       	adc	r26, r26
    1df6:	bb 1f       	adc	r27, r27
    1df8:	88 0f       	add	r24, r24
    1dfa:	99 1f       	adc	r25, r25
    1dfc:	aa 1f       	adc	r26, r26
    1dfe:	bb 1f       	adc	r27, r27
    1e00:	bc 01       	movw	r22, r24
    1e02:	cd 01       	movw	r24, r26
    1e04:	66 0f       	add	r22, r22
    1e06:	77 1f       	adc	r23, r23
    1e08:	88 1f       	adc	r24, r24
    1e0a:	99 1f       	adc	r25, r25
    1e0c:	00 0f       	add	r16, r16
    1e0e:	11 1f       	adc	r17, r17
    1e10:	22 1f       	adc	r18, r18
    1e12:	33 1f       	adc	r19, r19
    1e14:	00 0f       	add	r16, r16
    1e16:	11 1f       	adc	r17, r17
    1e18:	22 1f       	adc	r18, r18
    1e1a:	33 1f       	adc	r19, r19
    1e1c:	a9 01       	movw	r20, r18
    1e1e:	98 01       	movw	r18, r16
    1e20:	22 0f       	add	r18, r18
    1e22:	33 1f       	adc	r19, r19
    1e24:	44 1f       	adc	r20, r20
    1e26:	55 1f       	adc	r21, r21
    1e28:	22 0f       	add	r18, r18
    1e2a:	33 1f       	adc	r19, r19
    1e2c:	44 1f       	adc	r20, r20
    1e2e:	55 1f       	adc	r21, r21
    1e30:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <__udivmodsi4>
    1e34:	ba 01       	movw	r22, r20
    1e36:	a9 01       	movw	r20, r18
    1e38:	41 50       	subi	r20, 0x01	; 1
    1e3a:	51 09       	sbc	r21, r1
    1e3c:	61 09       	sbc	r22, r1
    1e3e:	71 09       	sbc	r23, r1
    1e40:	57 ff       	sbrs	r21, 7
    1e42:	06 c0       	rjmp	.+12     	; 0x1e50 <UART3_init+0x88>
    1e44:	82 e0       	ldi	r24, 0x02	; 2
    1e46:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <__TEXT_REGION_LENGTH__+0x700130>
    1e4a:	5f 77       	andi	r21, 0x7F	; 127
    1e4c:	66 27       	eor	r22, r22
    1e4e:	77 27       	eor	r23, r23
    1e50:	bb 27       	eor	r27, r27
    1e52:	a7 2f       	mov	r26, r23
    1e54:	96 2f       	mov	r25, r22
    1e56:	85 2f       	mov	r24, r21
    1e58:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <__TEXT_REGION_LENGTH__+0x700135>
    1e5c:	40 93 34 01 	sts	0x0134, r20	; 0x800134 <__TEXT_REGION_LENGTH__+0x700134>
    1e60:	88 e9       	ldi	r24, 0x98	; 152
    1e62:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <__TEXT_REGION_LENGTH__+0x700131>
    1e66:	86 e0       	ldi	r24, 0x06	; 6
    1e68:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <__TEXT_REGION_LENGTH__+0x700132>
    1e6c:	1f 91       	pop	r17
    1e6e:	0f 91       	pop	r16
    1e70:	08 95       	ret

00001e72 <UART3_getc>:
    1e72:	90 91 c0 04 	lds	r25, 0x04C0	; 0x8004c0 <UART3_RxHead>
    1e76:	80 91 bf 04 	lds	r24, 0x04BF	; 0x8004bf <UART3_RxTail>
    1e7a:	98 17       	cp	r25, r24
    1e7c:	a1 f0       	breq	.+40     	; 0x1ea6 <UART3_getc+0x34>
    1e7e:	80 91 bf 04 	lds	r24, 0x04BF	; 0x8004bf <UART3_RxTail>
    1e82:	90 e0       	ldi	r25, 0x00	; 0
    1e84:	01 96       	adiw	r24, 0x01	; 1
    1e86:	8f 77       	andi	r24, 0x7F	; 127
    1e88:	99 27       	eor	r25, r25
    1e8a:	80 93 bf 04 	sts	0x04BF, r24	; 0x8004bf <UART3_RxTail>
    1e8e:	fc 01       	movw	r30, r24
    1e90:	ed 53       	subi	r30, 0x3D	; 61
    1e92:	fb 4f       	sbci	r31, 0xFB	; 251
    1e94:	20 81       	ld	r18, Z
    1e96:	80 91 be 04 	lds	r24, 0x04BE	; 0x8004be <UART3_LastRxError>
    1e9a:	90 e0       	ldi	r25, 0x00	; 0
    1e9c:	98 2f       	mov	r25, r24
    1e9e:	88 27       	eor	r24, r24
    1ea0:	82 0f       	add	r24, r18
    1ea2:	91 1d       	adc	r25, r1
    1ea4:	08 95       	ret
    1ea6:	80 e0       	ldi	r24, 0x00	; 0
    1ea8:	91 e0       	ldi	r25, 0x01	; 1
    1eaa:	08 95       	ret

00001eac <UART3_putc>:
    1eac:	40 91 c2 04 	lds	r20, 0x04C2	; 0x8004c2 <UART3_TxHead>
    1eb0:	50 e0       	ldi	r21, 0x00	; 0
    1eb2:	4f 5f       	subi	r20, 0xFF	; 255
    1eb4:	5f 4f       	sbci	r21, 0xFF	; 255
    1eb6:	4f 77       	andi	r20, 0x7F	; 127
    1eb8:	55 27       	eor	r21, r21
    1eba:	20 91 c1 04 	lds	r18, 0x04C1	; 0x8004c1 <UART3_TxTail>
    1ebe:	30 e0       	ldi	r19, 0x00	; 0
    1ec0:	42 17       	cp	r20, r18
    1ec2:	53 07       	cpc	r21, r19
    1ec4:	d1 f3       	breq	.-12     	; 0x1eba <UART3_putc+0xe>
    1ec6:	fa 01       	movw	r30, r20
    1ec8:	ed 5b       	subi	r30, 0xBD	; 189
    1eca:	fa 4f       	sbci	r31, 0xFA	; 250
    1ecc:	80 83       	st	Z, r24
    1ece:	40 93 c2 04 	sts	0x04C2, r20	; 0x8004c2 <UART3_TxHead>
    1ed2:	e1 e3       	ldi	r30, 0x31	; 49
    1ed4:	f1 e0       	ldi	r31, 0x01	; 1
    1ed6:	80 81       	ld	r24, Z
    1ed8:	80 62       	ori	r24, 0x20	; 32
    1eda:	80 83       	st	Z, r24
    1edc:	08 95       	ret

00001ede <UART3_available>:
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1ede:	f8 94       	cli
uint16_t UART3_available(void)
{
	uint16_t ret;
	
	ATOMIC_BLOCK(ATOMIC_FORCEON) {
		ret = (UART_RX3_BUFFER_SIZE + UART3_RxHead - UART3_RxTail) & UART_RX3_BUFFER_MASK;
    1ee0:	80 91 c0 04 	lds	r24, 0x04C0	; 0x8004c0 <UART3_RxHead>
    1ee4:	20 91 bf 04 	lds	r18, 0x04BF	; 0x8004bf <UART3_RxTail>
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
    1ee8:	78 94       	sei
	}
	return ret;
    1eea:	90 e0       	ldi	r25, 0x00	; 0
    1eec:	80 58       	subi	r24, 0x80	; 128
    1eee:	9f 4f       	sbci	r25, 0xFF	; 255
    1ef0:	82 1b       	sub	r24, r18
    1ef2:	91 09       	sbc	r25, r1
} /* UART3_available */
    1ef4:	8f 77       	andi	r24, 0x7F	; 127
    1ef6:	99 27       	eor	r25, r25
    1ef8:	08 95       	ret

00001efa <UART3_flush>:
void UART3_flush(void)
{
//	ATOMIC_BLOCK(ATOMIC_FORCEON) {
//		UART3_RxHead = UART3_RxTail;
//	} commented by mohab
	while(0 == UART3_Transmission_end);
    1efa:	80 91 ba 04 	lds	r24, 0x04BA	; 0x8004ba <UART3_Transmission_end>
    1efe:	88 23       	and	r24, r24
    1f00:	e1 f3       	breq	.-8      	; 0x1efa <UART3_flush>
} /* UART3_flush */
    1f02:	08 95       	ret

00001f04 <RTE_encoder_init>:


/*static uint16_t Conveyor_speed;*/
static uint16_t Drum_speed;

void RTE_encoder_init(void){
    1f04:	08 95       	ret

00001f06 <RTE_get_Drum_speed>:



uint16_t RTE_get_Drum_speed(void){
	return Drum_speed;
}
    1f06:	80 91 d2 08 	lds	r24, 0x08D2	; 0x8008d2 <Drum_speed>
    1f0a:	90 91 d3 08 	lds	r25, 0x08D3	; 0x8008d3 <Drum_speed+0x1>
    1f0e:	08 95       	ret

00001f10 <RTE_invertersetting_init>:
}

uint16_t RTE_get_Time_minute(void){
	xSemaphoreTake(Sema_Time_minute_handle,portMAX_DELAY);
	return Time_minute;
}
    1f10:	0f 93       	push	r16
    1f12:	03 e0       	ldi	r16, 0x03	; 3
    1f14:	25 e8       	ldi	r18, 0x85	; 133
    1f16:	39 e0       	ldi	r19, 0x09	; 9
    1f18:	40 e0       	ldi	r20, 0x00	; 0
    1f1a:	50 e0       	ldi	r21, 0x00	; 0
    1f1c:	60 e0       	ldi	r22, 0x00	; 0
    1f1e:	81 e0       	ldi	r24, 0x01	; 1
    1f20:	12 d5       	rcall	.+2596   	; 0x2946 <xQueueGenericCreateStatic>
    1f22:	90 93 a5 09 	sts	0x09A5, r25	; 0x8009a5 <Sema_Gear_ratio_handle+0x1>
    1f26:	80 93 a4 09 	sts	0x09A4, r24	; 0x8009a4 <Sema_Gear_ratio_handle>
    1f2a:	22 e6       	ldi	r18, 0x62	; 98
    1f2c:	39 e0       	ldi	r19, 0x09	; 9
    1f2e:	40 e0       	ldi	r20, 0x00	; 0
    1f30:	50 e0       	ldi	r21, 0x00	; 0
    1f32:	60 e0       	ldi	r22, 0x00	; 0
    1f34:	81 e0       	ldi	r24, 0x01	; 1
    1f36:	07 d5       	rcall	.+2574   	; 0x2946 <xQueueGenericCreateStatic>
    1f38:	90 93 82 09 	sts	0x0982, r25	; 0x800982 <Sema_RPM_max_handle+0x1>
    1f3c:	80 93 81 09 	sts	0x0981, r24	; 0x800981 <Sema_RPM_max_handle>
    1f40:	2f e3       	ldi	r18, 0x3F	; 63
    1f42:	39 e0       	ldi	r19, 0x09	; 9
    1f44:	40 e0       	ldi	r20, 0x00	; 0
    1f46:	50 e0       	ldi	r21, 0x00	; 0
    1f48:	60 e0       	ldi	r22, 0x00	; 0
    1f4a:	81 e0       	ldi	r24, 0x01	; 1
    1f4c:	fc d4       	rcall	.+2552   	; 0x2946 <xQueueGenericCreateStatic>
    1f4e:	90 93 5f 09 	sts	0x095F, r25	; 0x80095f <Sema_Conveyor_length_handle+0x1>
    1f52:	80 93 5e 09 	sts	0x095E, r24	; 0x80095e <Sema_Conveyor_length_handle>
    1f56:	2c e1       	ldi	r18, 0x1C	; 28
    1f58:	39 e0       	ldi	r19, 0x09	; 9
    1f5a:	40 e0       	ldi	r20, 0x00	; 0
    1f5c:	50 e0       	ldi	r21, 0x00	; 0
    1f5e:	60 e0       	ldi	r22, 0x00	; 0
    1f60:	81 e0       	ldi	r24, 0x01	; 1
    1f62:	f1 d4       	rcall	.+2530   	; 0x2946 <xQueueGenericCreateStatic>
    1f64:	90 93 3c 09 	sts	0x093C, r25	; 0x80093c <Sema_Driver_diameter_handle+0x1>
    1f68:	80 93 3b 09 	sts	0x093B, r24	; 0x80093b <Sema_Driver_diameter_handle>
    1f6c:	29 ef       	ldi	r18, 0xF9	; 249
    1f6e:	38 e0       	ldi	r19, 0x08	; 8
    1f70:	40 e0       	ldi	r20, 0x00	; 0
    1f72:	50 e0       	ldi	r21, 0x00	; 0
    1f74:	60 e0       	ldi	r22, 0x00	; 0
    1f76:	81 e0       	ldi	r24, 0x01	; 1
    1f78:	e6 d4       	rcall	.+2508   	; 0x2946 <xQueueGenericCreateStatic>
    1f7a:	90 93 19 09 	sts	0x0919, r25	; 0x800919 <Sema_Time_minute_handle+0x1>
    1f7e:	80 93 18 09 	sts	0x0918, r24	; 0x800918 <Sema_Time_minute_handle>
    1f82:	26 ed       	ldi	r18, 0xD6	; 214
    1f84:	38 e0       	ldi	r19, 0x08	; 8
    1f86:	40 e0       	ldi	r20, 0x00	; 0
    1f88:	50 e0       	ldi	r21, 0x00	; 0
    1f8a:	60 e0       	ldi	r22, 0x00	; 0
    1f8c:	81 e0       	ldi	r24, 0x01	; 1
    1f8e:	db d4       	rcall	.+2486   	; 0x2946 <xQueueGenericCreateStatic>
    1f90:	90 93 f6 08 	sts	0x08F6, r25	; 0x8008f6 <Sema_Time_second_handle+0x1>
    1f94:	80 93 f5 08 	sts	0x08F5, r24	; 0x8008f5 <Sema_Time_second_handle>
    1f98:	0f 91       	pop	r16
    1f9a:	08 95       	ret

00001f9c <RTE_set_Gear_ratio>:
    1f9c:	90 93 84 09 	sts	0x0984, r25	; 0x800984 <Gear_ratio+0x1>
    1fa0:	80 93 83 09 	sts	0x0983, r24	; 0x800983 <Gear_ratio>
    1fa4:	20 e0       	ldi	r18, 0x00	; 0
    1fa6:	40 e0       	ldi	r20, 0x00	; 0
    1fa8:	50 e0       	ldi	r21, 0x00	; 0
    1faa:	60 e0       	ldi	r22, 0x00	; 0
    1fac:	70 e0       	ldi	r23, 0x00	; 0
    1fae:	80 91 a4 09 	lds	r24, 0x09A4	; 0x8009a4 <Sema_Gear_ratio_handle>
    1fb2:	90 91 a5 09 	lds	r25, 0x09A5	; 0x8009a5 <Sema_Gear_ratio_handle+0x1>
    1fb6:	dc c4       	rjmp	.+2488   	; 0x2970 <xQueueGenericSend>
    1fb8:	08 95       	ret

00001fba <RTE_set_RPM_max>:
    1fba:	90 93 61 09 	sts	0x0961, r25	; 0x800961 <RPM_max+0x1>
    1fbe:	80 93 60 09 	sts	0x0960, r24	; 0x800960 <RPM_max>
    1fc2:	20 e0       	ldi	r18, 0x00	; 0
    1fc4:	40 e0       	ldi	r20, 0x00	; 0
    1fc6:	50 e0       	ldi	r21, 0x00	; 0
    1fc8:	60 e0       	ldi	r22, 0x00	; 0
    1fca:	70 e0       	ldi	r23, 0x00	; 0
    1fcc:	80 91 81 09 	lds	r24, 0x0981	; 0x800981 <Sema_RPM_max_handle>
    1fd0:	90 91 82 09 	lds	r25, 0x0982	; 0x800982 <Sema_RPM_max_handle+0x1>
    1fd4:	cd c4       	rjmp	.+2458   	; 0x2970 <xQueueGenericSend>
    1fd6:	08 95       	ret

00001fd8 <RTE_get_RPM_max>:
    1fd8:	6f ef       	ldi	r22, 0xFF	; 255
    1fda:	7f ef       	ldi	r23, 0xFF	; 255
    1fdc:	80 91 81 09 	lds	r24, 0x0981	; 0x800981 <Sema_RPM_max_handle>
    1fe0:	90 91 82 09 	lds	r25, 0x0982	; 0x800982 <Sema_RPM_max_handle+0x1>
    1fe4:	18 d6       	rcall	.+3120   	; 0x2c16 <xQueueSemaphoreTake>
    1fe6:	80 91 60 09 	lds	r24, 0x0960	; 0x800960 <RPM_max>
    1fea:	90 91 61 09 	lds	r25, 0x0961	; 0x800961 <RPM_max+0x1>
    1fee:	08 95       	ret

00001ff0 <RTE_set_Conveyor_length>:
    1ff0:	90 93 3e 09 	sts	0x093E, r25	; 0x80093e <Conveyor_length+0x1>
    1ff4:	80 93 3d 09 	sts	0x093D, r24	; 0x80093d <Conveyor_length>
    1ff8:	20 e0       	ldi	r18, 0x00	; 0
    1ffa:	40 e0       	ldi	r20, 0x00	; 0
    1ffc:	50 e0       	ldi	r21, 0x00	; 0
    1ffe:	60 e0       	ldi	r22, 0x00	; 0
    2000:	70 e0       	ldi	r23, 0x00	; 0
    2002:	80 91 5e 09 	lds	r24, 0x095E	; 0x80095e <Sema_Conveyor_length_handle>
    2006:	90 91 5f 09 	lds	r25, 0x095F	; 0x80095f <Sema_Conveyor_length_handle+0x1>
    200a:	b2 c4       	rjmp	.+2404   	; 0x2970 <xQueueGenericSend>
    200c:	08 95       	ret

0000200e <RTE_set_Driver_diameter>:
    200e:	90 93 1b 09 	sts	0x091B, r25	; 0x80091b <Driver_diameter+0x1>
    2012:	80 93 1a 09 	sts	0x091A, r24	; 0x80091a <Driver_diameter>
    2016:	20 e0       	ldi	r18, 0x00	; 0
    2018:	40 e0       	ldi	r20, 0x00	; 0
    201a:	50 e0       	ldi	r21, 0x00	; 0
    201c:	60 e0       	ldi	r22, 0x00	; 0
    201e:	70 e0       	ldi	r23, 0x00	; 0
    2020:	80 91 3b 09 	lds	r24, 0x093B	; 0x80093b <Sema_Driver_diameter_handle>
    2024:	90 91 3c 09 	lds	r25, 0x093C	; 0x80093c <Sema_Driver_diameter_handle+0x1>
    2028:	a3 c4       	rjmp	.+2374   	; 0x2970 <xQueueGenericSend>
    202a:	08 95       	ret

0000202c <RTE_set_Time_minute>:
    202c:	90 93 f8 08 	sts	0x08F8, r25	; 0x8008f8 <Time_minute+0x1>
    2030:	80 93 f7 08 	sts	0x08F7, r24	; 0x8008f7 <Time_minute>
    2034:	20 e0       	ldi	r18, 0x00	; 0
    2036:	40 e0       	ldi	r20, 0x00	; 0
    2038:	50 e0       	ldi	r21, 0x00	; 0
    203a:	60 e0       	ldi	r22, 0x00	; 0
    203c:	70 e0       	ldi	r23, 0x00	; 0
    203e:	80 91 18 09 	lds	r24, 0x0918	; 0x800918 <Sema_Time_minute_handle>
    2042:	90 91 19 09 	lds	r25, 0x0919	; 0x800919 <Sema_Time_minute_handle+0x1>
    2046:	94 c4       	rjmp	.+2344   	; 0x2970 <xQueueGenericSend>
    2048:	08 95       	ret

0000204a <RTE_set_Time_second>:

void RTE_set_Time_second(uint16_t u16Timesecond){
	Time_second = u16Timesecond;
    204a:	90 93 d5 08 	sts	0x08D5, r25	; 0x8008d5 <Time_second+0x1>
    204e:	80 93 d4 08 	sts	0x08D4, r24	; 0x8008d4 <Time_second>
	xSemaphoreGive(Sema_Time_second_handle);
    2052:	20 e0       	ldi	r18, 0x00	; 0
    2054:	40 e0       	ldi	r20, 0x00	; 0
    2056:	50 e0       	ldi	r21, 0x00	; 0
    2058:	60 e0       	ldi	r22, 0x00	; 0
    205a:	70 e0       	ldi	r23, 0x00	; 0
    205c:	80 91 f5 08 	lds	r24, 0x08F5	; 0x8008f5 <Sema_Time_second_handle>
    2060:	90 91 f6 08 	lds	r25, 0x08F6	; 0x8008f6 <Sema_Time_second_handle+0x1>
    2064:	85 c4       	rjmp	.+2314   	; 0x2970 <xQueueGenericSend>
    2066:	08 95       	ret

00002068 <RTE_levels_init>:

static SemaphoreHandle_t Sema_blancher_level_handle;
static StaticSemaphore_t Sema_blancher_level_Buffer;
static uint16_t blancher_level;

void RTE_levels_init(void){
    2068:	0f 93       	push	r16
	Sema_tank_level_handle = xSemaphoreCreateBinaryStatic(&Sema_tank_level_Buffer);
    206a:	03 e0       	ldi	r16, 0x03	; 3
    206c:	27 ec       	ldi	r18, 0xC7	; 199
    206e:	39 e0       	ldi	r19, 0x09	; 9
    2070:	40 e0       	ldi	r20, 0x00	; 0
    2072:	50 e0       	ldi	r21, 0x00	; 0
    2074:	60 e0       	ldi	r22, 0x00	; 0
    2076:	81 e0       	ldi	r24, 0x01	; 1
    2078:	66 d4       	rcall	.+2252   	; 0x2946 <xQueueGenericCreateStatic>
    207a:	90 93 e7 09 	sts	0x09E7, r25	; 0x8009e7 <Sema_tank_level_handle+0x1>
    207e:	80 93 e6 09 	sts	0x09E6, r24	; 0x8009e6 <Sema_tank_level_handle>
	Sema_blancher_level_handle = xSemaphoreCreateBinaryStatic(&Sema_blancher_level_Buffer);
    2082:	26 ea       	ldi	r18, 0xA6	; 166
    2084:	39 e0       	ldi	r19, 0x09	; 9
    2086:	40 e0       	ldi	r20, 0x00	; 0
    2088:	50 e0       	ldi	r21, 0x00	; 0
    208a:	60 e0       	ldi	r22, 0x00	; 0
    208c:	81 e0       	ldi	r24, 0x01	; 1
    208e:	5b d4       	rcall	.+2230   	; 0x2946 <xQueueGenericCreateStatic>
    2090:	90 93 c6 09 	sts	0x09C6, r25	; 0x8009c6 <Sema_blancher_level_handle+0x1>
    2094:	80 93 c5 09 	sts	0x09C5, r24	; 0x8009c5 <Sema_blancher_level_handle>
}
    2098:	0f 91       	pop	r16
    209a:	08 95       	ret

0000209c <RTE_init>:
#include "RTE_levels.h"
#include "RTE_temperature.h"
#include "RTE_main.h"

void RTE_init(void){
	RTE_encoder_init();
    209c:	33 df       	rcall	.-410    	; 0x1f04 <RTE_encoder_init>
	RTE_invertersetting_init();
    209e:	38 df       	rcall	.-400    	; 0x1f10 <RTE_invertersetting_init>
	RTE_operations_init();
    20a0:	03 d0       	rcall	.+6      	; 0x20a8 <RTE_operations_init>
	RTE_levels_init();
    20a2:	e2 df       	rcall	.-60     	; 0x2068 <RTE_levels_init>
    20a4:	6d c0       	rjmp	.+218    	; 0x2180 <RTE_temperature_init>
	RTE_temperature_init();
    20a6:	08 95       	ret

000020a8 <RTE_operations_init>:
    20a8:	0f 93       	push	r16
    20aa:	03 e0       	ldi	r16, 0x03	; 3
}

uint16_t RTE_get_Wash_Operation(void){
	xSemaphoreTake(Sema_Wash_Operation_handle,portMAX_DELAY);
	return Wash_Operation;
}
    20ac:	23 e5       	ldi	r18, 0x53	; 83
    20ae:	3a e0       	ldi	r19, 0x0A	; 10
    20b0:	40 e0       	ldi	r20, 0x00	; 0
    20b2:	50 e0       	ldi	r21, 0x00	; 0
    20b4:	60 e0       	ldi	r22, 0x00	; 0
    20b6:	81 e0       	ldi	r24, 0x01	; 1
    20b8:	46 d4       	rcall	.+2188   	; 0x2946 <xQueueGenericCreateStatic>
    20ba:	90 93 73 0a 	sts	0x0A73, r25	; 0x800a73 <Sema_System_on_handle+0x1>
    20be:	80 93 72 0a 	sts	0x0A72, r24	; 0x800a72 <Sema_System_on_handle>
    20c2:	20 e3       	ldi	r18, 0x30	; 48
    20c4:	3a e0       	ldi	r19, 0x0A	; 10
    20c6:	40 e0       	ldi	r20, 0x00	; 0
    20c8:	50 e0       	ldi	r21, 0x00	; 0
    20ca:	60 e0       	ldi	r22, 0x00	; 0
    20cc:	81 e0       	ldi	r24, 0x01	; 1
    20ce:	3b d4       	rcall	.+2166   	; 0x2946 <xQueueGenericCreateStatic>
    20d0:	90 93 50 0a 	sts	0x0A50, r25	; 0x800a50 <Sema_Start_blancher_Operation_handle+0x1>
    20d4:	80 93 4f 0a 	sts	0x0A4F, r24	; 0x800a4f <Sema_Start_blancher_Operation_handle>
    20d8:	2d e0       	ldi	r18, 0x0D	; 13
    20da:	3a e0       	ldi	r19, 0x0A	; 10
    20dc:	40 e0       	ldi	r20, 0x00	; 0
    20de:	50 e0       	ldi	r21, 0x00	; 0
    20e0:	60 e0       	ldi	r22, 0x00	; 0
    20e2:	81 e0       	ldi	r24, 0x01	; 1
    20e4:	30 d4       	rcall	.+2144   	; 0x2946 <xQueueGenericCreateStatic>
    20e6:	90 93 2d 0a 	sts	0x0A2D, r25	; 0x800a2d <Sema_Wash_Operation_handle+0x1>
    20ea:	80 93 2c 0a 	sts	0x0A2C, r24	; 0x800a2c <Sema_Wash_Operation_handle>
    20ee:	2a ee       	ldi	r18, 0xEA	; 234
    20f0:	39 e0       	ldi	r19, 0x09	; 9
    20f2:	40 e0       	ldi	r20, 0x00	; 0
    20f4:	50 e0       	ldi	r21, 0x00	; 0
    20f6:	60 e0       	ldi	r22, 0x00	; 0
    20f8:	81 e0       	ldi	r24, 0x01	; 1
    20fa:	25 d4       	rcall	.+2122   	; 0x2946 <xQueueGenericCreateStatic>
    20fc:	90 93 0a 0a 	sts	0x0A0A, r25	; 0x800a0a <Sema_Tank_Calibration_Operation_handle+0x1>
    2100:	80 93 09 0a 	sts	0x0A09, r24	; 0x800a09 <Sema_Tank_Calibration_Operation_handle>
    2104:	0f 91       	pop	r16
    2106:	08 95       	ret

00002108 <RTE_set_System_on>:
    2108:	90 93 52 0a 	sts	0x0A52, r25	; 0x800a52 <System_on+0x1>
    210c:	80 93 51 0a 	sts	0x0A51, r24	; 0x800a51 <System_on>
    2110:	20 e0       	ldi	r18, 0x00	; 0
    2112:	40 e0       	ldi	r20, 0x00	; 0
    2114:	50 e0       	ldi	r21, 0x00	; 0
    2116:	60 e0       	ldi	r22, 0x00	; 0
    2118:	70 e0       	ldi	r23, 0x00	; 0
    211a:	80 91 72 0a 	lds	r24, 0x0A72	; 0x800a72 <Sema_System_on_handle>
    211e:	90 91 73 0a 	lds	r25, 0x0A73	; 0x800a73 <Sema_System_on_handle+0x1>
    2122:	26 c4       	rjmp	.+2124   	; 0x2970 <xQueueGenericSend>
    2124:	08 95       	ret

00002126 <RTE_set_Start_blancher_Operation>:
    2126:	90 93 2f 0a 	sts	0x0A2F, r25	; 0x800a2f <Start_blancher_Operation+0x1>
    212a:	80 93 2e 0a 	sts	0x0A2E, r24	; 0x800a2e <Start_blancher_Operation>
    212e:	20 e0       	ldi	r18, 0x00	; 0
    2130:	40 e0       	ldi	r20, 0x00	; 0
    2132:	50 e0       	ldi	r21, 0x00	; 0
    2134:	60 e0       	ldi	r22, 0x00	; 0
    2136:	70 e0       	ldi	r23, 0x00	; 0
    2138:	80 91 4f 0a 	lds	r24, 0x0A4F	; 0x800a4f <Sema_Start_blancher_Operation_handle>
    213c:	90 91 50 0a 	lds	r25, 0x0A50	; 0x800a50 <Sema_Start_blancher_Operation_handle+0x1>
    2140:	17 c4       	rjmp	.+2094   	; 0x2970 <xQueueGenericSend>
    2142:	08 95       	ret

00002144 <RTE_set_Wash_Operation>:
    2144:	90 93 0c 0a 	sts	0x0A0C, r25	; 0x800a0c <Wash_Operation+0x1>
    2148:	80 93 0b 0a 	sts	0x0A0B, r24	; 0x800a0b <Wash_Operation>
    214c:	20 e0       	ldi	r18, 0x00	; 0
    214e:	40 e0       	ldi	r20, 0x00	; 0
    2150:	50 e0       	ldi	r21, 0x00	; 0
    2152:	60 e0       	ldi	r22, 0x00	; 0
    2154:	70 e0       	ldi	r23, 0x00	; 0
    2156:	80 91 2c 0a 	lds	r24, 0x0A2C	; 0x800a2c <Sema_Wash_Operation_handle>
    215a:	90 91 2d 0a 	lds	r25, 0x0A2D	; 0x800a2d <Sema_Wash_Operation_handle+0x1>
    215e:	08 c4       	rjmp	.+2064   	; 0x2970 <xQueueGenericSend>
    2160:	08 95       	ret

00002162 <RTE_set_Tank_Calibration_Operation>:




void RTE_set_Tank_Calibration_Operation(uint16_t u16Tank_Calibration_Operation){
	Tank_Calibration_Operation = u16Tank_Calibration_Operation;
    2162:	90 93 e9 09 	sts	0x09E9, r25	; 0x8009e9 <Tank_Calibration_Operation+0x1>
    2166:	80 93 e8 09 	sts	0x09E8, r24	; 0x8009e8 <Tank_Calibration_Operation>
	xSemaphoreGive(Sema_Tank_Calibration_Operation_handle);
    216a:	20 e0       	ldi	r18, 0x00	; 0
    216c:	40 e0       	ldi	r20, 0x00	; 0
    216e:	50 e0       	ldi	r21, 0x00	; 0
    2170:	60 e0       	ldi	r22, 0x00	; 0
    2172:	70 e0       	ldi	r23, 0x00	; 0
    2174:	80 91 09 0a 	lds	r24, 0x0A09	; 0x800a09 <Sema_Tank_Calibration_Operation_handle>
    2178:	90 91 0a 0a 	lds	r25, 0x0A0A	; 0x800a0a <Sema_Tank_Calibration_Operation_handle+0x1>
    217c:	f9 c3       	rjmp	.+2034   	; 0x2970 <xQueueGenericSend>
    217e:	08 95       	ret

00002180 <RTE_temperature_init>:
}

uint16_t RTE_get_Negative_offset_temperature(void){
	xSemaphoreTake(Sema_Negative_offset_temp_handle,portMAX_DELAY);
	return Negative_offset_temp;
}
    2180:	0f 93       	push	r16
    2182:	03 e0       	ldi	r16, 0x03	; 3
    2184:	27 e2       	ldi	r18, 0x27	; 39
    2186:	3b e0       	ldi	r19, 0x0B	; 11
    2188:	40 e0       	ldi	r20, 0x00	; 0
    218a:	50 e0       	ldi	r21, 0x00	; 0
    218c:	60 e0       	ldi	r22, 0x00	; 0
    218e:	81 e0       	ldi	r24, 0x01	; 1
    2190:	da d3       	rcall	.+1972   	; 0x2946 <xQueueGenericCreateStatic>
    2192:	90 93 47 0b 	sts	0x0B47, r25	; 0x800b47 <Sema_Sleep_temp_handle+0x1>
    2196:	80 93 46 0b 	sts	0x0B46, r24	; 0x800b46 <Sema_Sleep_temp_handle>
    219a:	24 e0       	ldi	r18, 0x04	; 4
    219c:	3b e0       	ldi	r19, 0x0B	; 11
    219e:	40 e0       	ldi	r20, 0x00	; 0
    21a0:	50 e0       	ldi	r21, 0x00	; 0
    21a2:	60 e0       	ldi	r22, 0x00	; 0
    21a4:	81 e0       	ldi	r24, 0x01	; 1
    21a6:	cf d3       	rcall	.+1950   	; 0x2946 <xQueueGenericCreateStatic>
    21a8:	90 93 24 0b 	sts	0x0B24, r25	; 0x800b24 <Sema_Set_temp_handle+0x1>
    21ac:	80 93 23 0b 	sts	0x0B23, r24	; 0x800b23 <Sema_Set_temp_handle>
    21b0:	21 ee       	ldi	r18, 0xE1	; 225
    21b2:	3a e0       	ldi	r19, 0x0A	; 10
    21b4:	40 e0       	ldi	r20, 0x00	; 0
    21b6:	50 e0       	ldi	r21, 0x00	; 0
    21b8:	60 e0       	ldi	r22, 0x00	; 0
    21ba:	81 e0       	ldi	r24, 0x01	; 1
    21bc:	c4 d3       	rcall	.+1928   	; 0x2946 <xQueueGenericCreateStatic>
    21be:	90 93 01 0b 	sts	0x0B01, r25	; 0x800b01 <Sema_threshold_set_temp_handle+0x1>
    21c2:	80 93 00 0b 	sts	0x0B00, r24	; 0x800b00 <Sema_threshold_set_temp_handle>
    21c6:	2e eb       	ldi	r18, 0xBE	; 190
    21c8:	3a e0       	ldi	r19, 0x0A	; 10
    21ca:	40 e0       	ldi	r20, 0x00	; 0
    21cc:	50 e0       	ldi	r21, 0x00	; 0
    21ce:	60 e0       	ldi	r22, 0x00	; 0
    21d0:	81 e0       	ldi	r24, 0x01	; 1
    21d2:	b9 d3       	rcall	.+1906   	; 0x2946 <xQueueGenericCreateStatic>
    21d4:	90 93 de 0a 	sts	0x0ADE, r25	; 0x800ade <Sema_threshold_sleep_temp_handle+0x1>
    21d8:	80 93 dd 0a 	sts	0x0ADD, r24	; 0x800add <Sema_threshold_sleep_temp_handle>
    21dc:	2b e9       	ldi	r18, 0x9B	; 155
    21de:	3a e0       	ldi	r19, 0x0A	; 10
    21e0:	40 e0       	ldi	r20, 0x00	; 0
    21e2:	50 e0       	ldi	r21, 0x00	; 0
    21e4:	60 e0       	ldi	r22, 0x00	; 0
    21e6:	81 e0       	ldi	r24, 0x01	; 1
    21e8:	ae d3       	rcall	.+1884   	; 0x2946 <xQueueGenericCreateStatic>
    21ea:	90 93 bb 0a 	sts	0x0ABB, r25	; 0x800abb <Sema_Positive_offset_temp_handle+0x1>
    21ee:	80 93 ba 0a 	sts	0x0ABA, r24	; 0x800aba <Sema_Positive_offset_temp_handle>
    21f2:	28 e7       	ldi	r18, 0x78	; 120
    21f4:	3a e0       	ldi	r19, 0x0A	; 10
    21f6:	40 e0       	ldi	r20, 0x00	; 0
    21f8:	50 e0       	ldi	r21, 0x00	; 0
    21fa:	60 e0       	ldi	r22, 0x00	; 0
    21fc:	81 e0       	ldi	r24, 0x01	; 1
    21fe:	a3 d3       	rcall	.+1862   	; 0x2946 <xQueueGenericCreateStatic>
    2200:	90 93 98 0a 	sts	0x0A98, r25	; 0x800a98 <Sema_Negative_offset_temp_handle+0x1>
    2204:	80 93 97 0a 	sts	0x0A97, r24	; 0x800a97 <Sema_Negative_offset_temp_handle>
    2208:	0f 91       	pop	r16
    220a:	08 95       	ret

0000220c <RTE_set_Sleep_temperature>:
    220c:	90 93 26 0b 	sts	0x0B26, r25	; 0x800b26 <Sleep_temp+0x1>
    2210:	80 93 25 0b 	sts	0x0B25, r24	; 0x800b25 <Sleep_temp>
    2214:	20 e0       	ldi	r18, 0x00	; 0
    2216:	40 e0       	ldi	r20, 0x00	; 0
    2218:	50 e0       	ldi	r21, 0x00	; 0
    221a:	60 e0       	ldi	r22, 0x00	; 0
    221c:	70 e0       	ldi	r23, 0x00	; 0
    221e:	80 91 46 0b 	lds	r24, 0x0B46	; 0x800b46 <Sema_Sleep_temp_handle>
    2222:	90 91 47 0b 	lds	r25, 0x0B47	; 0x800b47 <Sema_Sleep_temp_handle+0x1>
    2226:	a4 c3       	rjmp	.+1864   	; 0x2970 <xQueueGenericSend>
    2228:	08 95       	ret

0000222a <RTE_set_Set_temperature>:
    222a:	90 93 03 0b 	sts	0x0B03, r25	; 0x800b03 <Set_temp+0x1>
    222e:	80 93 02 0b 	sts	0x0B02, r24	; 0x800b02 <Set_temp>
    2232:	20 e0       	ldi	r18, 0x00	; 0
    2234:	40 e0       	ldi	r20, 0x00	; 0
    2236:	50 e0       	ldi	r21, 0x00	; 0
    2238:	60 e0       	ldi	r22, 0x00	; 0
    223a:	70 e0       	ldi	r23, 0x00	; 0
    223c:	80 91 23 0b 	lds	r24, 0x0B23	; 0x800b23 <Sema_Set_temp_handle>
    2240:	90 91 24 0b 	lds	r25, 0x0B24	; 0x800b24 <Sema_Set_temp_handle+0x1>
    2244:	95 c3       	rjmp	.+1834   	; 0x2970 <xQueueGenericSend>
    2246:	08 95       	ret

00002248 <RTE_set_Threshold_set_temperature>:
    2248:	90 93 e0 0a 	sts	0x0AE0, r25	; 0x800ae0 <Threshold_set_temp+0x1>
    224c:	80 93 df 0a 	sts	0x0ADF, r24	; 0x800adf <Threshold_set_temp>
    2250:	20 e0       	ldi	r18, 0x00	; 0
    2252:	40 e0       	ldi	r20, 0x00	; 0
    2254:	50 e0       	ldi	r21, 0x00	; 0
    2256:	60 e0       	ldi	r22, 0x00	; 0
    2258:	70 e0       	ldi	r23, 0x00	; 0
    225a:	80 91 00 0b 	lds	r24, 0x0B00	; 0x800b00 <Sema_threshold_set_temp_handle>
    225e:	90 91 01 0b 	lds	r25, 0x0B01	; 0x800b01 <Sema_threshold_set_temp_handle+0x1>
    2262:	86 c3       	rjmp	.+1804   	; 0x2970 <xQueueGenericSend>
    2264:	08 95       	ret

00002266 <RTE_set_Threshold_sleep_temperature>:
    2266:	90 93 bd 0a 	sts	0x0ABD, r25	; 0x800abd <Threshold_sleep_temp+0x1>
    226a:	80 93 bc 0a 	sts	0x0ABC, r24	; 0x800abc <Threshold_sleep_temp>
    226e:	20 e0       	ldi	r18, 0x00	; 0
    2270:	40 e0       	ldi	r20, 0x00	; 0
    2272:	50 e0       	ldi	r21, 0x00	; 0
    2274:	60 e0       	ldi	r22, 0x00	; 0
    2276:	70 e0       	ldi	r23, 0x00	; 0
    2278:	80 91 dd 0a 	lds	r24, 0x0ADD	; 0x800add <Sema_threshold_sleep_temp_handle>
    227c:	90 91 de 0a 	lds	r25, 0x0ADE	; 0x800ade <Sema_threshold_sleep_temp_handle+0x1>
    2280:	77 c3       	rjmp	.+1774   	; 0x2970 <xQueueGenericSend>
    2282:	08 95       	ret

00002284 <RTE_set_Positive_offset_temperature>:
    2284:	90 93 9a 0a 	sts	0x0A9A, r25	; 0x800a9a <Positive_offset_temp+0x1>
    2288:	80 93 99 0a 	sts	0x0A99, r24	; 0x800a99 <Positive_offset_temp>
    228c:	20 e0       	ldi	r18, 0x00	; 0
    228e:	40 e0       	ldi	r20, 0x00	; 0
    2290:	50 e0       	ldi	r21, 0x00	; 0
    2292:	60 e0       	ldi	r22, 0x00	; 0
    2294:	70 e0       	ldi	r23, 0x00	; 0
    2296:	80 91 ba 0a 	lds	r24, 0x0ABA	; 0x800aba <Sema_Positive_offset_temp_handle>
    229a:	90 91 bb 0a 	lds	r25, 0x0ABB	; 0x800abb <Sema_Positive_offset_temp_handle+0x1>
    229e:	68 c3       	rjmp	.+1744   	; 0x2970 <xQueueGenericSend>
    22a0:	08 95       	ret

000022a2 <RTE_set_Negative_offset_temperature>:
    22a2:	90 93 77 0a 	sts	0x0A77, r25	; 0x800a77 <Negative_offset_temp+0x1>
    22a6:	80 93 76 0a 	sts	0x0A76, r24	; 0x800a76 <Negative_offset_temp>
    22aa:	20 e0       	ldi	r18, 0x00	; 0
    22ac:	40 e0       	ldi	r20, 0x00	; 0
    22ae:	50 e0       	ldi	r21, 0x00	; 0
    22b0:	60 e0       	ldi	r22, 0x00	; 0
    22b2:	70 e0       	ldi	r23, 0x00	; 0
    22b4:	80 91 97 0a 	lds	r24, 0x0A97	; 0x800a97 <Sema_Negative_offset_temp_handle>
    22b8:	90 91 98 0a 	lds	r25, 0x0A98	; 0x800a98 <Sema_Negative_offset_temp_handle+0x1>
    22bc:	59 c3       	rjmp	.+1714   	; 0x2970 <xQueueGenericSend>
    22be:	08 95       	ret

000022c0 <RTE_set_Current_temperature>:




void RTE_set_Current_temperature(uint16_t u16Currenttemp){
	Current_temperature = u16Currenttemp;
    22c0:	90 93 75 0a 	sts	0x0A75, r25	; 0x800a75 <Current_temperature+0x1>
    22c4:	80 93 74 0a 	sts	0x0A74, r24	; 0x800a74 <Current_temperature>
    22c8:	08 95       	ret

000022ca <RTE_get_Current_temperature>:
}

uint16_t RTE_get_Current_temperature(void){
	return Current_temperature;
}
    22ca:	80 91 74 0a 	lds	r24, 0x0A74	; 0x800a74 <Current_temperature>
    22ce:	90 91 75 0a 	lds	r25, 0x0A75	; 0x800a75 <Current_temperature+0x1>
    22d2:	08 95       	ret

000022d4 <vApplicationStackOverflowHook>:
	   This routine will never return.
	   This routine is referenced in the task.c file of FreeRTOS as an extern.
	\*---------------------------------------------------------------------------*/

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
	DDRB  |= _BV(DDB7);
    22d4:	27 9a       	sbi	0x04, 7	; 4
	PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    22d6:	2f 9a       	sbi	0x05, 7	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    22d8:	2f ef       	ldi	r18, 0xFF	; 255
    22da:	87 ea       	ldi	r24, 0xA7	; 167
    22dc:	91 e6       	ldi	r25, 0x61	; 97
    22de:	21 50       	subi	r18, 0x01	; 1
    22e0:	80 40       	sbci	r24, 0x00	; 0
    22e2:	90 40       	sbci	r25, 0x00	; 0
    22e4:	e1 f7       	brne	.-8      	; 0x22de <vApplicationStackOverflowHook+0xa>
    22e6:	00 c0       	rjmp	.+0      	; 0x22e8 <vApplicationStackOverflowHook+0x14>
    22e8:	00 00       	nop
	for(;;)
	{
		_delay_ms(2000);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
		PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED slow blink.
    22ea:	1f 9a       	sbi	0x03, 7	; 3
    22ec:	f5 cf       	rjmp	.-22     	; 0x22d8 <vApplicationStackOverflowHook+0x4>

000022ee <vApplicationGetIdleTaskMemory>:
                                    configSTACK_DEPTH_TYPE *pulIdleTaskStackSize )
{
    static StaticTask_t xIdleTaskTCB;
    static StackType_t uxIdleTaskStack[ configMINIMAL_STACK_SIZE ];

    *ppxIdleTaskTCBBuffer = &xIdleTaskTCB;
    22ee:	2a e1       	ldi	r18, 0x1A	; 26
    22f0:	3c e0       	ldi	r19, 0x0C	; 12
    22f2:	fc 01       	movw	r30, r24
    22f4:	31 83       	std	Z+1, r19	; 0x01
    22f6:	20 83       	st	Z, r18
    *ppxIdleTaskStackBuffer = uxIdleTaskStack;
    22f8:	85 ec       	ldi	r24, 0xC5	; 197
    22fa:	9b e0       	ldi	r25, 0x0B	; 11
    22fc:	fb 01       	movw	r30, r22
    22fe:	91 83       	std	Z+1, r25	; 0x01
    2300:	80 83       	st	Z, r24
    *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
    2302:	85 e5       	ldi	r24, 0x55	; 85
    2304:	90 e0       	ldi	r25, 0x00	; 0
    2306:	fa 01       	movw	r30, r20
    2308:	91 83       	std	Z+1, r25	; 0x01
    230a:	80 83       	st	Z, r24
    230c:	08 95       	ret

0000230e <vApplicationGetTimerTaskMemory>:
                                     configSTACK_DEPTH_TYPE *pulTimerTaskStackSize )
{
    static StaticTask_t xTimerTaskTCB;
    static StackType_t uxTimerTaskStack[ configTIMER_TASK_STACK_DEPTH ];

    *ppxTimerTaskTCBBuffer = &xTimerTaskTCB;
    230e:	2d e9       	ldi	r18, 0x9D	; 157
    2310:	3b e0       	ldi	r19, 0x0B	; 11
    2312:	fc 01       	movw	r30, r24
    2314:	31 83       	std	Z+1, r19	; 0x01
    2316:	20 83       	st	Z, r18
    *ppxTimerTaskStackBuffer = uxTimerTaskStack;
    2318:	88 e4       	ldi	r24, 0x48	; 72
    231a:	9b e0       	ldi	r25, 0x0B	; 11
    231c:	fb 01       	movw	r30, r22
    231e:	91 83       	std	Z+1, r25	; 0x01
    2320:	80 83       	st	Z, r24
    *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
    2322:	85 e5       	ldi	r24, 0x55	; 85
    2324:	90 e0       	ldi	r25, 0x00	; 0
    2326:	fa 01       	movw	r30, r20
    2328:	91 83       	std	Z+1, r25	; 0x01
    232a:	80 83       	st	Z, r24
    232c:	08 95       	ret

0000232e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    232e:	fc 01       	movw	r30, r24
    /* The list structure contains a list item which is used to mark the
    end of the list.  To initialise the list the list end is inserted
    as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );            /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    2330:	03 96       	adiw	r24, 0x03	; 3
    2332:	92 83       	std	Z+2, r25	; 0x02
    2334:	81 83       	std	Z+1, r24	; 0x01

    /* The list end value is the highest possible value in the list to
    ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
    2336:	2f ef       	ldi	r18, 0xFF	; 255
    2338:	3f ef       	ldi	r19, 0xFF	; 255
    233a:	34 83       	std	Z+4, r19	; 0x04
    233c:	23 83       	std	Z+3, r18	; 0x03

    /* The list end next and previous pointers point to itself so we know
    when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );    /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    233e:	96 83       	std	Z+6, r25	; 0x06
    2340:	85 83       	std	Z+5, r24	; 0x05
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    2342:	90 87       	std	Z+8, r25	; 0x08
    2344:	87 83       	std	Z+7, r24	; 0x07

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    2346:	10 82       	st	Z, r1
    2348:	08 95       	ret

0000234a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
    234a:	fc 01       	movw	r30, r24
    234c:	11 86       	std	Z+9, r1	; 0x09
    234e:	10 86       	std	Z+8, r1	; 0x08
    2350:	08 95       	ret

00002352 <vListInsertEnd>:
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    2352:	cf 93       	push	r28
    2354:	df 93       	push	r29
    2356:	9c 01       	movw	r18, r24
    2358:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
    235a:	dc 01       	movw	r26, r24
    235c:	11 96       	adiw	r26, 0x01	; 1
    235e:	cd 91       	ld	r28, X+
    2360:	dc 91       	ld	r29, X
    2362:	12 97       	sbiw	r26, 0x02	; 2
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
    makes the new list item the last item to be removed by a call to
    listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
    2364:	d3 83       	std	Z+3, r29	; 0x03
    2366:	c2 83       	std	Z+2, r28	; 0x02
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    2368:	8c 81       	ldd	r24, Y+4	; 0x04
    236a:	9d 81       	ldd	r25, Y+5	; 0x05
    236c:	95 83       	std	Z+5, r25	; 0x05
    236e:	84 83       	std	Z+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
    2370:	8c 81       	ldd	r24, Y+4	; 0x04
    2372:	9d 81       	ldd	r25, Y+5	; 0x05
    2374:	dc 01       	movw	r26, r24
    2376:	13 96       	adiw	r26, 0x03	; 3
    2378:	7c 93       	st	X, r23
    237a:	6e 93       	st	-X, r22
    237c:	12 97       	sbiw	r26, 0x02	; 2
    pxIndex->pxPrevious = pxNewListItem;
    237e:	7d 83       	std	Y+5, r23	; 0x05
    2380:	6c 83       	std	Y+4, r22	; 0x04

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
    2382:	31 87       	std	Z+9, r19	; 0x09
    2384:	20 87       	std	Z+8, r18	; 0x08

    ( pxList->uxNumberOfItems )++;
    2386:	f9 01       	movw	r30, r18
    2388:	80 81       	ld	r24, Z
    238a:	8f 5f       	subi	r24, 0xFF	; 255
    238c:	80 83       	st	Z, r24
}
    238e:	df 91       	pop	r29
    2390:	cf 91       	pop	r28
    2392:	08 95       	ret

00002394 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    2394:	cf 93       	push	r28
    2396:	df 93       	push	r29
    2398:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    239a:	48 81       	ld	r20, Y
    239c:	59 81       	ldd	r21, Y+1	; 0x01
    new list item should be placed after it.  This ensures that TCBs which are
    stored in ready lists (all of which have the same xItemValue value) get a
    share of the CPU.  However, if the xItemValue is the same as the back marker
    the iteration loop below will not end.  Therefore the value is checked
    first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
    239e:	4f 3f       	cpi	r20, 0xFF	; 255
    23a0:	2f ef       	ldi	r18, 0xFF	; 255
    23a2:	52 07       	cpc	r21, r18
    23a4:	21 f4       	brne	.+8      	; 0x23ae <vListInsert+0x1a>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
    23a6:	fc 01       	movw	r30, r24
    23a8:	a7 81       	ldd	r26, Z+7	; 0x07
    23aa:	b0 85       	ldd	r27, Z+8	; 0x08
    23ac:	0d c0       	rjmp	.+26     	; 0x23c8 <vListInsert+0x34>
            4) Using a queue or semaphore before it has been initialised or
               before the scheduler has been started (are interrupts firing
               before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
    23ae:	dc 01       	movw	r26, r24
    23b0:	13 96       	adiw	r26, 0x03	; 3
    23b2:	01 c0       	rjmp	.+2      	; 0x23b6 <vListInsert+0x22>
    23b4:	df 01       	movw	r26, r30
    23b6:	12 96       	adiw	r26, 0x02	; 2
    23b8:	ed 91       	ld	r30, X+
    23ba:	fc 91       	ld	r31, X
    23bc:	13 97       	sbiw	r26, 0x03	; 3
    23be:	20 81       	ld	r18, Z
    23c0:	31 81       	ldd	r19, Z+1	; 0x01
    23c2:	42 17       	cp	r20, r18
    23c4:	53 07       	cpc	r21, r19
    23c6:	b0 f7       	brcc	.-20     	; 0x23b4 <vListInsert+0x20>
            /* There is nothing to do here, just iterating to the wanted
            insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
    23c8:	12 96       	adiw	r26, 0x02	; 2
    23ca:	ed 91       	ld	r30, X+
    23cc:	fc 91       	ld	r31, X
    23ce:	13 97       	sbiw	r26, 0x03	; 3
    23d0:	fb 83       	std	Y+3, r31	; 0x03
    23d2:	ea 83       	std	Y+2, r30	; 0x02
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    23d4:	d5 83       	std	Z+5, r29	; 0x05
    23d6:	c4 83       	std	Z+4, r28	; 0x04
    pxNewListItem->pxPrevious = pxIterator;
    23d8:	bd 83       	std	Y+5, r27	; 0x05
    23da:	ac 83       	std	Y+4, r26	; 0x04
    pxIterator->pxNext = pxNewListItem;
    23dc:	13 96       	adiw	r26, 0x03	; 3
    23de:	dc 93       	st	X, r29
    23e0:	ce 93       	st	-X, r28
    23e2:	12 97       	sbiw	r26, 0x02	; 2

    /* Remember which list the item is in.  This allows fast removal of the
    item later. */
    pxNewListItem->pxContainer = pxList;
    23e4:	99 87       	std	Y+9, r25	; 0x09
    23e6:	88 87       	std	Y+8, r24	; 0x08

    ( pxList->uxNumberOfItems )++;
    23e8:	fc 01       	movw	r30, r24
    23ea:	20 81       	ld	r18, Z
    23ec:	2f 5f       	subi	r18, 0xFF	; 255
    23ee:	20 83       	st	Z, r18
}
    23f0:	df 91       	pop	r29
    23f2:	cf 91       	pop	r28
    23f4:	08 95       	ret

000023f6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    23f6:	cf 93       	push	r28
    23f8:	df 93       	push	r29
    23fa:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
    23fc:	a0 85       	ldd	r26, Z+8	; 0x08
    23fe:	b1 85       	ldd	r27, Z+9	; 0x09

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    2400:	c2 81       	ldd	r28, Z+2	; 0x02
    2402:	d3 81       	ldd	r29, Z+3	; 0x03
    2404:	84 81       	ldd	r24, Z+4	; 0x04
    2406:	95 81       	ldd	r25, Z+5	; 0x05
    2408:	9d 83       	std	Y+5, r25	; 0x05
    240a:	8c 83       	std	Y+4, r24	; 0x04
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    240c:	c4 81       	ldd	r28, Z+4	; 0x04
    240e:	d5 81       	ldd	r29, Z+5	; 0x05
    2410:	82 81       	ldd	r24, Z+2	; 0x02
    2412:	93 81       	ldd	r25, Z+3	; 0x03
    2414:	9b 83       	std	Y+3, r25	; 0x03
    2416:	8a 83       	std	Y+2, r24	; 0x02

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
    2418:	11 96       	adiw	r26, 0x01	; 1
    241a:	8d 91       	ld	r24, X+
    241c:	9c 91       	ld	r25, X
    241e:	12 97       	sbiw	r26, 0x02	; 2
    2420:	e8 17       	cp	r30, r24
    2422:	f9 07       	cpc	r31, r25
    2424:	31 f4       	brne	.+12     	; 0x2432 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
    2426:	84 81       	ldd	r24, Z+4	; 0x04
    2428:	95 81       	ldd	r25, Z+5	; 0x05
    242a:	12 96       	adiw	r26, 0x02	; 2
    242c:	9c 93       	st	X, r25
    242e:	8e 93       	st	-X, r24
    2430:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
    2432:	11 86       	std	Z+9, r1	; 0x09
    2434:	10 86       	std	Z+8, r1	; 0x08
    ( pxList->uxNumberOfItems )--;
    2436:	8c 91       	ld	r24, X
    2438:	81 50       	subi	r24, 0x01	; 1
    243a:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
    243c:	8c 91       	ld	r24, X
}
    243e:	df 91       	pop	r29
    2440:	cf 91       	pop	r28
    2442:	08 95       	ret

00002444 <pxPortInitialiseStack>:
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
    2444:	31 e1       	ldi	r19, 0x11	; 17
    2446:	fc 01       	movw	r30, r24
    2448:	30 83       	st	Z, r19
    244a:	31 97       	sbiw	r30, 0x01	; 1
    244c:	22 e2       	ldi	r18, 0x22	; 34
    244e:	20 83       	st	Z, r18
    2450:	31 97       	sbiw	r30, 0x01	; 1
    2452:	a3 e3       	ldi	r26, 0x33	; 51
    2454:	a0 83       	st	Z, r26
    2456:	31 97       	sbiw	r30, 0x01	; 1
    2458:	60 83       	st	Z, r22
    245a:	31 97       	sbiw	r30, 0x01	; 1
    245c:	70 83       	st	Z, r23
    245e:	31 97       	sbiw	r30, 0x01	; 1
    2460:	10 82       	st	Z, r1
    2462:	31 97       	sbiw	r30, 0x01	; 1
    2464:	10 82       	st	Z, r1
    2466:	31 97       	sbiw	r30, 0x01	; 1
    2468:	60 e8       	ldi	r22, 0x80	; 128
    246a:	60 83       	st	Z, r22
    246c:	31 97       	sbiw	r30, 0x01	; 1
    246e:	10 82       	st	Z, r1
    2470:	31 97       	sbiw	r30, 0x01	; 1
    2472:	10 82       	st	Z, r1
    2474:	31 97       	sbiw	r30, 0x01	; 1
    2476:	10 82       	st	Z, r1
    2478:	31 97       	sbiw	r30, 0x01	; 1
    247a:	62 e0       	ldi	r22, 0x02	; 2
    247c:	60 83       	st	Z, r22
    247e:	31 97       	sbiw	r30, 0x01	; 1
    2480:	63 e0       	ldi	r22, 0x03	; 3
    2482:	60 83       	st	Z, r22
    2484:	31 97       	sbiw	r30, 0x01	; 1
    2486:	64 e0       	ldi	r22, 0x04	; 4
    2488:	60 83       	st	Z, r22
    248a:	31 97       	sbiw	r30, 0x01	; 1
    248c:	65 e0       	ldi	r22, 0x05	; 5
    248e:	60 83       	st	Z, r22
    2490:	31 97       	sbiw	r30, 0x01	; 1
    2492:	66 e0       	ldi	r22, 0x06	; 6
    2494:	60 83       	st	Z, r22
    2496:	31 97       	sbiw	r30, 0x01	; 1
    2498:	67 e0       	ldi	r22, 0x07	; 7
    249a:	60 83       	st	Z, r22
    249c:	31 97       	sbiw	r30, 0x01	; 1
    249e:	68 e0       	ldi	r22, 0x08	; 8
    24a0:	60 83       	st	Z, r22
    24a2:	31 97       	sbiw	r30, 0x01	; 1
    24a4:	69 e0       	ldi	r22, 0x09	; 9
    24a6:	60 83       	st	Z, r22
    24a8:	31 97       	sbiw	r30, 0x01	; 1
    24aa:	60 e1       	ldi	r22, 0x10	; 16
    24ac:	60 83       	st	Z, r22
    24ae:	31 97       	sbiw	r30, 0x01	; 1
    24b0:	30 83       	st	Z, r19
    24b2:	31 97       	sbiw	r30, 0x01	; 1
    24b4:	32 e1       	ldi	r19, 0x12	; 18
    24b6:	30 83       	st	Z, r19
    24b8:	31 97       	sbiw	r30, 0x01	; 1
    24ba:	33 e1       	ldi	r19, 0x13	; 19
    24bc:	30 83       	st	Z, r19
    24be:	31 97       	sbiw	r30, 0x01	; 1
    24c0:	34 e1       	ldi	r19, 0x14	; 20
    24c2:	30 83       	st	Z, r19
    24c4:	31 97       	sbiw	r30, 0x01	; 1
    24c6:	35 e1       	ldi	r19, 0x15	; 21
    24c8:	30 83       	st	Z, r19
    24ca:	31 97       	sbiw	r30, 0x01	; 1
    24cc:	36 e1       	ldi	r19, 0x16	; 22
    24ce:	30 83       	st	Z, r19
    24d0:	31 97       	sbiw	r30, 0x01	; 1
    24d2:	37 e1       	ldi	r19, 0x17	; 23
    24d4:	30 83       	st	Z, r19
    24d6:	31 97       	sbiw	r30, 0x01	; 1
    24d8:	38 e1       	ldi	r19, 0x18	; 24
    24da:	30 83       	st	Z, r19
    24dc:	31 97       	sbiw	r30, 0x01	; 1
    24de:	39 e1       	ldi	r19, 0x19	; 25
    24e0:	30 83       	st	Z, r19
    24e2:	31 97       	sbiw	r30, 0x01	; 1
    24e4:	30 e2       	ldi	r19, 0x20	; 32
    24e6:	30 83       	st	Z, r19
    24e8:	31 97       	sbiw	r30, 0x01	; 1
    24ea:	31 e2       	ldi	r19, 0x21	; 33
    24ec:	30 83       	st	Z, r19
    24ee:	31 97       	sbiw	r30, 0x01	; 1
    24f0:	20 83       	st	Z, r18
    24f2:	31 97       	sbiw	r30, 0x01	; 1
    24f4:	23 e2       	ldi	r18, 0x23	; 35
    24f6:	20 83       	st	Z, r18
    24f8:	31 97       	sbiw	r30, 0x01	; 1
    24fa:	40 83       	st	Z, r20
    24fc:	31 97       	sbiw	r30, 0x01	; 1
    24fe:	50 83       	st	Z, r21
    2500:	31 97       	sbiw	r30, 0x01	; 1
    2502:	26 e2       	ldi	r18, 0x26	; 38
    2504:	20 83       	st	Z, r18
    2506:	31 97       	sbiw	r30, 0x01	; 1
    2508:	27 e2       	ldi	r18, 0x27	; 39
    250a:	20 83       	st	Z, r18
    250c:	31 97       	sbiw	r30, 0x01	; 1
    250e:	28 e2       	ldi	r18, 0x28	; 40
    2510:	20 83       	st	Z, r18
    2512:	31 97       	sbiw	r30, 0x01	; 1
    2514:	29 e2       	ldi	r18, 0x29	; 41
    2516:	20 83       	st	Z, r18
    2518:	31 97       	sbiw	r30, 0x01	; 1
    251a:	20 e3       	ldi	r18, 0x30	; 48
    251c:	20 83       	st	Z, r18
    251e:	31 97       	sbiw	r30, 0x01	; 1
    2520:	21 e3       	ldi	r18, 0x31	; 49
    2522:	20 83       	st	Z, r18
    2524:	89 97       	sbiw	r24, 0x29	; 41
    2526:	08 95       	ret

00002528 <xPortStartScheduler>:
    2528:	a8 95       	wdr
    252a:	90 ec       	ldi	r25, 0xC0	; 192
    252c:	88 e1       	ldi	r24, 0x18	; 24
    252e:	0f b6       	in	r0, 0x3f	; 63
    2530:	f8 94       	cli
    2532:	a8 95       	wdr
    2534:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
    2538:	0f be       	out	0x3f, r0	; 63
    253a:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
    253e:	a0 91 9b 0c 	lds	r26, 0x0C9B	; 0x800c9b <pxCurrentTCB>
    2542:	b0 91 9c 0c 	lds	r27, 0x0C9C	; 0x800c9c <pxCurrentTCB+0x1>
    2546:	cd 91       	ld	r28, X+
    2548:	cd bf       	out	0x3d, r28	; 61
    254a:	dd 91       	ld	r29, X+
    254c:	de bf       	out	0x3e, r29	; 62
    254e:	ff 91       	pop	r31
    2550:	ef 91       	pop	r30
    2552:	df 91       	pop	r29
    2554:	cf 91       	pop	r28
    2556:	bf 91       	pop	r27
    2558:	af 91       	pop	r26
    255a:	9f 91       	pop	r25
    255c:	8f 91       	pop	r24
    255e:	7f 91       	pop	r23
    2560:	6f 91       	pop	r22
    2562:	5f 91       	pop	r21
    2564:	4f 91       	pop	r20
    2566:	3f 91       	pop	r19
    2568:	2f 91       	pop	r18
    256a:	1f 91       	pop	r17
    256c:	0f 91       	pop	r16
    256e:	ff 90       	pop	r15
    2570:	ef 90       	pop	r14
    2572:	df 90       	pop	r13
    2574:	cf 90       	pop	r12
    2576:	bf 90       	pop	r11
    2578:	af 90       	pop	r10
    257a:	9f 90       	pop	r9
    257c:	8f 90       	pop	r8
    257e:	7f 90       	pop	r7
    2580:	6f 90       	pop	r6
    2582:	5f 90       	pop	r5
    2584:	4f 90       	pop	r4
    2586:	3f 90       	pop	r3
    2588:	2f 90       	pop	r2
    258a:	1f 90       	pop	r1
    258c:	0f 90       	pop	r0
    258e:	0c be       	out	0x3c, r0	; 60
    2590:	0f 90       	pop	r0
    2592:	0b be       	out	0x3b, r0	; 59
    2594:	0f 90       	pop	r0
    2596:	0f be       	out	0x3f, r0	; 63
    2598:	0f 90       	pop	r0
    259a:	08 95       	ret
    259c:	81 e0       	ldi	r24, 0x01	; 1
    259e:	08 95       	ret

000025a0 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    25a0:	0f 92       	push	r0
    25a2:	0f b6       	in	r0, 0x3f	; 63
    25a4:	f8 94       	cli
    25a6:	0f 92       	push	r0
    25a8:	0b b6       	in	r0, 0x3b	; 59
    25aa:	0f 92       	push	r0
    25ac:	0c b6       	in	r0, 0x3c	; 60
    25ae:	0f 92       	push	r0
    25b0:	1f 92       	push	r1
    25b2:	11 24       	eor	r1, r1
    25b4:	2f 92       	push	r2
    25b6:	3f 92       	push	r3
    25b8:	4f 92       	push	r4
    25ba:	5f 92       	push	r5
    25bc:	6f 92       	push	r6
    25be:	7f 92       	push	r7
    25c0:	8f 92       	push	r8
    25c2:	9f 92       	push	r9
    25c4:	af 92       	push	r10
    25c6:	bf 92       	push	r11
    25c8:	cf 92       	push	r12
    25ca:	df 92       	push	r13
    25cc:	ef 92       	push	r14
    25ce:	ff 92       	push	r15
    25d0:	0f 93       	push	r16
    25d2:	1f 93       	push	r17
    25d4:	2f 93       	push	r18
    25d6:	3f 93       	push	r19
    25d8:	4f 93       	push	r20
    25da:	5f 93       	push	r21
    25dc:	6f 93       	push	r22
    25de:	7f 93       	push	r23
    25e0:	8f 93       	push	r24
    25e2:	9f 93       	push	r25
    25e4:	af 93       	push	r26
    25e6:	bf 93       	push	r27
    25e8:	cf 93       	push	r28
    25ea:	df 93       	push	r29
    25ec:	ef 93       	push	r30
    25ee:	ff 93       	push	r31
    25f0:	a0 91 9b 0c 	lds	r26, 0x0C9B	; 0x800c9b <pxCurrentTCB>
    25f4:	b0 91 9c 0c 	lds	r27, 0x0C9C	; 0x800c9c <pxCurrentTCB+0x1>
    25f8:	0d b6       	in	r0, 0x3d	; 61
    25fa:	0d 92       	st	X+, r0
    25fc:	0e b6       	in	r0, 0x3e	; 62
    25fe:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    2600:	ce d6       	rcall	.+3484   	; 0x339e <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    2602:	a0 91 9b 0c 	lds	r26, 0x0C9B	; 0x800c9b <pxCurrentTCB>
    2606:	b0 91 9c 0c 	lds	r27, 0x0C9C	; 0x800c9c <pxCurrentTCB+0x1>
    260a:	cd 91       	ld	r28, X+
    260c:	cd bf       	out	0x3d, r28	; 61
    260e:	dd 91       	ld	r29, X+
    2610:	de bf       	out	0x3e, r29	; 62
    2612:	ff 91       	pop	r31
    2614:	ef 91       	pop	r30
    2616:	df 91       	pop	r29
    2618:	cf 91       	pop	r28
    261a:	bf 91       	pop	r27
    261c:	af 91       	pop	r26
    261e:	9f 91       	pop	r25
    2620:	8f 91       	pop	r24
    2622:	7f 91       	pop	r23
    2624:	6f 91       	pop	r22
    2626:	5f 91       	pop	r21
    2628:	4f 91       	pop	r20
    262a:	3f 91       	pop	r19
    262c:	2f 91       	pop	r18
    262e:	1f 91       	pop	r17
    2630:	0f 91       	pop	r16
    2632:	ff 90       	pop	r15
    2634:	ef 90       	pop	r14
    2636:	df 90       	pop	r13
    2638:	cf 90       	pop	r12
    263a:	bf 90       	pop	r11
    263c:	af 90       	pop	r10
    263e:	9f 90       	pop	r9
    2640:	8f 90       	pop	r8
    2642:	7f 90       	pop	r7
    2644:	6f 90       	pop	r6
    2646:	5f 90       	pop	r5
    2648:	4f 90       	pop	r4
    264a:	3f 90       	pop	r3
    264c:	2f 90       	pop	r2
    264e:	1f 90       	pop	r1
    2650:	0f 90       	pop	r0
    2652:	0c be       	out	0x3c, r0	; 60
    2654:	0f 90       	pop	r0
    2656:	0b be       	out	0x3b, r0	; 59
    2658:	0f 90       	pop	r0
    265a:	0f be       	out	0x3f, r0	; 63
    265c:	0f 90       	pop	r0

	__asm__ __volatile__ ( "ret" );
    265e:	08 95       	ret

00002660 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    2660:	0f 92       	push	r0
    2662:	0f b6       	in	r0, 0x3f	; 63
    2664:	f8 94       	cli
    2666:	0f 92       	push	r0
    2668:	0b b6       	in	r0, 0x3b	; 59
    266a:	0f 92       	push	r0
    266c:	0c b6       	in	r0, 0x3c	; 60
    266e:	0f 92       	push	r0
    2670:	1f 92       	push	r1
    2672:	11 24       	eor	r1, r1
    2674:	2f 92       	push	r2
    2676:	3f 92       	push	r3
    2678:	4f 92       	push	r4
    267a:	5f 92       	push	r5
    267c:	6f 92       	push	r6
    267e:	7f 92       	push	r7
    2680:	8f 92       	push	r8
    2682:	9f 92       	push	r9
    2684:	af 92       	push	r10
    2686:	bf 92       	push	r11
    2688:	cf 92       	push	r12
    268a:	df 92       	push	r13
    268c:	ef 92       	push	r14
    268e:	ff 92       	push	r15
    2690:	0f 93       	push	r16
    2692:	1f 93       	push	r17
    2694:	2f 93       	push	r18
    2696:	3f 93       	push	r19
    2698:	4f 93       	push	r20
    269a:	5f 93       	push	r21
    269c:	6f 93       	push	r22
    269e:	7f 93       	push	r23
    26a0:	8f 93       	push	r24
    26a2:	9f 93       	push	r25
    26a4:	af 93       	push	r26
    26a6:	bf 93       	push	r27
    26a8:	cf 93       	push	r28
    26aa:	df 93       	push	r29
    26ac:	ef 93       	push	r30
    26ae:	ff 93       	push	r31
    26b0:	a0 91 9b 0c 	lds	r26, 0x0C9B	; 0x800c9b <pxCurrentTCB>
    26b4:	b0 91 9c 0c 	lds	r27, 0x0C9C	; 0x800c9c <pxCurrentTCB+0x1>
    26b8:	0d b6       	in	r0, 0x3d	; 61
    26ba:	0d 92       	st	X+, r0
    26bc:	0e b6       	in	r0, 0x3e	; 62
    26be:	0d 92       	st	X+, r0

	sleep_reset();		//	 reset the sleep_mode() faster than sleep_disable();
    26c0:	13 be       	out	0x33, r1	; 51

	if( xTaskIncrementTick() != pdFALSE )
    26c2:	2d d5       	rcall	.+2650   	; 0x311e <xTaskIncrementTick>
    26c4:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
    26c6:	6b d6       	rcall	.+3286   	; 0x339e <vTaskSwitchContext>
    26c8:	a0 91 9b 0c 	lds	r26, 0x0C9B	; 0x800c9b <pxCurrentTCB>
	}

	portRESTORE_CONTEXT();
    26cc:	b0 91 9c 0c 	lds	r27, 0x0C9C	; 0x800c9c <pxCurrentTCB+0x1>
    26d0:	cd 91       	ld	r28, X+
    26d2:	cd bf       	out	0x3d, r28	; 61
    26d4:	dd 91       	ld	r29, X+
    26d6:	de bf       	out	0x3e, r29	; 62
    26d8:	ff 91       	pop	r31
    26da:	ef 91       	pop	r30
    26dc:	df 91       	pop	r29
    26de:	cf 91       	pop	r28
    26e0:	bf 91       	pop	r27
    26e2:	af 91       	pop	r26
    26e4:	9f 91       	pop	r25
    26e6:	8f 91       	pop	r24
    26e8:	7f 91       	pop	r23
    26ea:	6f 91       	pop	r22
    26ec:	5f 91       	pop	r21
    26ee:	4f 91       	pop	r20
    26f0:	3f 91       	pop	r19
    26f2:	2f 91       	pop	r18
    26f4:	1f 91       	pop	r17
    26f6:	0f 91       	pop	r16
    26f8:	ff 90       	pop	r15
    26fa:	ef 90       	pop	r14
    26fc:	df 90       	pop	r13
    26fe:	cf 90       	pop	r12
    2700:	bf 90       	pop	r11
    2702:	af 90       	pop	r10
    2704:	9f 90       	pop	r9
    2706:	8f 90       	pop	r8
    2708:	7f 90       	pop	r7
    270a:	6f 90       	pop	r6
    270c:	5f 90       	pop	r5
    270e:	4f 90       	pop	r4
    2710:	3f 90       	pop	r3
    2712:	2f 90       	pop	r2
    2714:	1f 90       	pop	r1
    2716:	0f 90       	pop	r0
    2718:	0c be       	out	0x3c, r0	; 60
    271a:	0f 90       	pop	r0
    271c:	0b be       	out	0x3b, r0	; 59
    271e:	0f 90       	pop	r0
    2720:	0f be       	out	0x3f, r0	; 63
    2722:	0f 90       	pop	r0
    2724:	08 95       	ret

00002726 <__vector_12>:

	__asm__ __volatile__ ( "ret" );
    2726:	9c df       	rcall	.-200    	; 0x2660 <vPortYieldFromTick>
//	ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
	ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
	ISR(portSCHEDULER_ISR)
	{
		vPortYieldFromTick();
		__asm__ __volatile__ ( "reti" );
    2728:	18 95       	reti

0000272a <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    272a:	0f b6       	in	r0, 0x3f	; 63
    272c:	f8 94       	cli
    272e:	0f 92       	push	r0
    2730:	fc 01       	movw	r30, r24
    2732:	92 8d       	ldd	r25, Z+26	; 0x1a
    2734:	0f 90       	pop	r0
    2736:	0f be       	out	0x3f, r0	; 63
    2738:	81 e0       	ldi	r24, 0x01	; 1
    273a:	91 11       	cpse	r25, r1
    273c:	80 e0       	ldi	r24, 0x00	; 0
    273e:	08 95       	ret

00002740 <prvCopyDataToQueue>:
    2740:	0f 93       	push	r16
    2742:	1f 93       	push	r17
    2744:	cf 93       	push	r28
    2746:	df 93       	push	r29
    2748:	ec 01       	movw	r28, r24
    274a:	04 2f       	mov	r16, r20
    274c:	1a 8d       	ldd	r17, Y+26	; 0x1a
    274e:	4c 8d       	ldd	r20, Y+28	; 0x1c
    2750:	41 11       	cpse	r20, r1
    2752:	0b c0       	rjmp	.+22     	; 0x276a <prvCopyDataToQueue+0x2a>
    2754:	88 81       	ld	r24, Y
    2756:	99 81       	ldd	r25, Y+1	; 0x01
    2758:	89 2b       	or	r24, r25
    275a:	09 f0       	breq	.+2      	; 0x275e <prvCopyDataToQueue+0x1e>
    275c:	41 c0       	rjmp	.+130    	; 0x27e0 <prvCopyDataToQueue+0xa0>
    275e:	8c 81       	ldd	r24, Y+4	; 0x04
    2760:	9d 81       	ldd	r25, Y+5	; 0x05
    2762:	c9 d7       	rcall	.+3986   	; 0x36f6 <xTaskPriorityDisinherit>
    2764:	1d 82       	std	Y+5, r1	; 0x05
    2766:	1c 82       	std	Y+4, r1	; 0x04
    2768:	42 c0       	rjmp	.+132    	; 0x27ee <prvCopyDataToQueue+0xae>
    276a:	01 11       	cpse	r16, r1
    276c:	17 c0       	rjmp	.+46     	; 0x279c <prvCopyDataToQueue+0x5c>
    276e:	50 e0       	ldi	r21, 0x00	; 0
    2770:	8a 81       	ldd	r24, Y+2	; 0x02
    2772:	9b 81       	ldd	r25, Y+3	; 0x03
    2774:	0e 94 30 1f 	call	0x3e60	; 0x3e60 <memcpy>
    2778:	2c 8d       	ldd	r18, Y+28	; 0x1c
    277a:	8a 81       	ldd	r24, Y+2	; 0x02
    277c:	9b 81       	ldd	r25, Y+3	; 0x03
    277e:	82 0f       	add	r24, r18
    2780:	91 1d       	adc	r25, r1
    2782:	9b 83       	std	Y+3, r25	; 0x03
    2784:	8a 83       	std	Y+2, r24	; 0x02
    2786:	2c 81       	ldd	r18, Y+4	; 0x04
    2788:	3d 81       	ldd	r19, Y+5	; 0x05
    278a:	82 17       	cp	r24, r18
    278c:	93 07       	cpc	r25, r19
    278e:	50 f1       	brcs	.+84     	; 0x27e4 <prvCopyDataToQueue+0xa4>
    2790:	88 81       	ld	r24, Y
    2792:	99 81       	ldd	r25, Y+1	; 0x01
    2794:	9b 83       	std	Y+3, r25	; 0x03
    2796:	8a 83       	std	Y+2, r24	; 0x02
    2798:	80 e0       	ldi	r24, 0x00	; 0
    279a:	29 c0       	rjmp	.+82     	; 0x27ee <prvCopyDataToQueue+0xae>
    279c:	50 e0       	ldi	r21, 0x00	; 0
    279e:	8e 81       	ldd	r24, Y+6	; 0x06
    27a0:	9f 81       	ldd	r25, Y+7	; 0x07
    27a2:	0e 94 30 1f 	call	0x3e60	; 0x3e60 <memcpy>
    27a6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    27a8:	90 e0       	ldi	r25, 0x00	; 0
    27aa:	91 95       	neg	r25
    27ac:	81 95       	neg	r24
    27ae:	91 09       	sbc	r25, r1
    27b0:	2e 81       	ldd	r18, Y+6	; 0x06
    27b2:	3f 81       	ldd	r19, Y+7	; 0x07
    27b4:	28 0f       	add	r18, r24
    27b6:	39 1f       	adc	r19, r25
    27b8:	3f 83       	std	Y+7, r19	; 0x07
    27ba:	2e 83       	std	Y+6, r18	; 0x06
    27bc:	48 81       	ld	r20, Y
    27be:	59 81       	ldd	r21, Y+1	; 0x01
    27c0:	24 17       	cp	r18, r20
    27c2:	35 07       	cpc	r19, r21
    27c4:	30 f4       	brcc	.+12     	; 0x27d2 <prvCopyDataToQueue+0x92>
    27c6:	2c 81       	ldd	r18, Y+4	; 0x04
    27c8:	3d 81       	ldd	r19, Y+5	; 0x05
    27ca:	82 0f       	add	r24, r18
    27cc:	93 1f       	adc	r25, r19
    27ce:	9f 83       	std	Y+7, r25	; 0x07
    27d0:	8e 83       	std	Y+6, r24	; 0x06
    27d2:	02 30       	cpi	r16, 0x02	; 2
    27d4:	49 f4       	brne	.+18     	; 0x27e8 <prvCopyDataToQueue+0xa8>
    27d6:	11 23       	and	r17, r17
    27d8:	49 f0       	breq	.+18     	; 0x27ec <prvCopyDataToQueue+0xac>
    27da:	11 50       	subi	r17, 0x01	; 1
    27dc:	80 e0       	ldi	r24, 0x00	; 0
    27de:	07 c0       	rjmp	.+14     	; 0x27ee <prvCopyDataToQueue+0xae>
    27e0:	80 e0       	ldi	r24, 0x00	; 0
    27e2:	05 c0       	rjmp	.+10     	; 0x27ee <prvCopyDataToQueue+0xae>
    27e4:	80 e0       	ldi	r24, 0x00	; 0
    27e6:	03 c0       	rjmp	.+6      	; 0x27ee <prvCopyDataToQueue+0xae>
    27e8:	80 e0       	ldi	r24, 0x00	; 0
    27ea:	01 c0       	rjmp	.+2      	; 0x27ee <prvCopyDataToQueue+0xae>
    27ec:	80 e0       	ldi	r24, 0x00	; 0
    27ee:	1f 5f       	subi	r17, 0xFF	; 255
    27f0:	1a 8f       	std	Y+26, r17	; 0x1a
    27f2:	df 91       	pop	r29
    27f4:	cf 91       	pop	r28
    27f6:	1f 91       	pop	r17
    27f8:	0f 91       	pop	r16
    27fa:	08 95       	ret

000027fc <prvCopyDataFromQueue>:
    27fc:	fc 01       	movw	r30, r24
    27fe:	44 8d       	ldd	r20, Z+28	; 0x1c
    2800:	44 23       	and	r20, r20
    2802:	a9 f0       	breq	.+42     	; 0x282e <prvCopyDataFromQueue+0x32>
    2804:	50 e0       	ldi	r21, 0x00	; 0
    2806:	26 81       	ldd	r18, Z+6	; 0x06
    2808:	37 81       	ldd	r19, Z+7	; 0x07
    280a:	24 0f       	add	r18, r20
    280c:	35 1f       	adc	r19, r21
    280e:	37 83       	std	Z+7, r19	; 0x07
    2810:	26 83       	std	Z+6, r18	; 0x06
    2812:	84 81       	ldd	r24, Z+4	; 0x04
    2814:	95 81       	ldd	r25, Z+5	; 0x05
    2816:	28 17       	cp	r18, r24
    2818:	39 07       	cpc	r19, r25
    281a:	20 f0       	brcs	.+8      	; 0x2824 <prvCopyDataFromQueue+0x28>
    281c:	80 81       	ld	r24, Z
    281e:	91 81       	ldd	r25, Z+1	; 0x01
    2820:	97 83       	std	Z+7, r25	; 0x07
    2822:	86 83       	std	Z+6, r24	; 0x06
    2824:	cb 01       	movw	r24, r22
    2826:	66 81       	ldd	r22, Z+6	; 0x06
    2828:	77 81       	ldd	r23, Z+7	; 0x07
    282a:	0c 94 30 1f 	jmp	0x3e60	; 0x3e60 <memcpy>
    282e:	08 95       	ret

00002830 <prvUnlockQueue>:
    2830:	ef 92       	push	r14
    2832:	ff 92       	push	r15
    2834:	0f 93       	push	r16
    2836:	1f 93       	push	r17
    2838:	cf 93       	push	r28
    283a:	8c 01       	movw	r16, r24
    283c:	0f b6       	in	r0, 0x3f	; 63
    283e:	f8 94       	cli
    2840:	0f 92       	push	r0
    2842:	fc 01       	movw	r30, r24
    2844:	c6 8d       	ldd	r28, Z+30	; 0x1e
    2846:	1c 16       	cp	r1, r28
    2848:	9c f4       	brge	.+38     	; 0x2870 <prvUnlockQueue+0x40>
    284a:	81 89       	ldd	r24, Z+17	; 0x11
    284c:	81 11       	cpse	r24, r1
    284e:	06 c0       	rjmp	.+12     	; 0x285c <prvUnlockQueue+0x2c>
    2850:	0f c0       	rjmp	.+30     	; 0x2870 <prvUnlockQueue+0x40>
    2852:	f8 01       	movw	r30, r16
    2854:	81 89       	ldd	r24, Z+17	; 0x11
    2856:	81 11       	cpse	r24, r1
    2858:	05 c0       	rjmp	.+10     	; 0x2864 <prvUnlockQueue+0x34>
    285a:	0a c0       	rjmp	.+20     	; 0x2870 <prvUnlockQueue+0x40>
    285c:	78 01       	movw	r14, r16
    285e:	f1 e1       	ldi	r31, 0x11	; 17
    2860:	ef 0e       	add	r14, r31
    2862:	f1 1c       	adc	r15, r1
    2864:	c7 01       	movw	r24, r14
    2866:	45 d6       	rcall	.+3210   	; 0x34f2 <xTaskRemoveFromEventList>
    2868:	81 11       	cpse	r24, r1
    286a:	c1 d6       	rcall	.+3458   	; 0x35ee <vTaskMissedYield>
    286c:	c1 50       	subi	r28, 0x01	; 1
    286e:	89 f7       	brne	.-30     	; 0x2852 <prvUnlockQueue+0x22>
    2870:	8f ef       	ldi	r24, 0xFF	; 255
    2872:	f8 01       	movw	r30, r16
    2874:	86 8f       	std	Z+30, r24	; 0x1e
    2876:	0f 90       	pop	r0
    2878:	0f be       	out	0x3f, r0	; 63
    287a:	0f b6       	in	r0, 0x3f	; 63
    287c:	f8 94       	cli
    287e:	0f 92       	push	r0
    2880:	c5 8d       	ldd	r28, Z+29	; 0x1d
    2882:	1c 16       	cp	r1, r28
    2884:	9c f4       	brge	.+38     	; 0x28ac <prvUnlockQueue+0x7c>
    2886:	80 85       	ldd	r24, Z+8	; 0x08
    2888:	81 11       	cpse	r24, r1
    288a:	06 c0       	rjmp	.+12     	; 0x2898 <prvUnlockQueue+0x68>
    288c:	0f c0       	rjmp	.+30     	; 0x28ac <prvUnlockQueue+0x7c>
    288e:	f8 01       	movw	r30, r16
    2890:	80 85       	ldd	r24, Z+8	; 0x08
    2892:	81 11       	cpse	r24, r1
    2894:	05 c0       	rjmp	.+10     	; 0x28a0 <prvUnlockQueue+0x70>
    2896:	0a c0       	rjmp	.+20     	; 0x28ac <prvUnlockQueue+0x7c>
    2898:	78 01       	movw	r14, r16
    289a:	f8 e0       	ldi	r31, 0x08	; 8
    289c:	ef 0e       	add	r14, r31
    289e:	f1 1c       	adc	r15, r1
    28a0:	c7 01       	movw	r24, r14
    28a2:	27 d6       	rcall	.+3150   	; 0x34f2 <xTaskRemoveFromEventList>
    28a4:	81 11       	cpse	r24, r1
    28a6:	a3 d6       	rcall	.+3398   	; 0x35ee <vTaskMissedYield>
    28a8:	c1 50       	subi	r28, 0x01	; 1
    28aa:	89 f7       	brne	.-30     	; 0x288e <prvUnlockQueue+0x5e>
    28ac:	8f ef       	ldi	r24, 0xFF	; 255
    28ae:	f8 01       	movw	r30, r16
    28b0:	85 8f       	std	Z+29, r24	; 0x1d
    28b2:	0f 90       	pop	r0
    28b4:	0f be       	out	0x3f, r0	; 63
    28b6:	cf 91       	pop	r28
    28b8:	1f 91       	pop	r17
    28ba:	0f 91       	pop	r16
    28bc:	ff 90       	pop	r15
    28be:	ef 90       	pop	r14
    28c0:	08 95       	ret

000028c2 <xQueueGenericReset>:
    28c2:	cf 93       	push	r28
    28c4:	df 93       	push	r29
    28c6:	ec 01       	movw	r28, r24
    28c8:	0f b6       	in	r0, 0x3f	; 63
    28ca:	f8 94       	cli
    28cc:	0f 92       	push	r0
    28ce:	e8 81       	ld	r30, Y
    28d0:	f9 81       	ldd	r31, Y+1	; 0x01
    28d2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    28d4:	2c 8d       	ldd	r18, Y+28	; 0x1c
    28d6:	90 e0       	ldi	r25, 0x00	; 0
    28d8:	30 e0       	ldi	r19, 0x00	; 0
    28da:	82 9f       	mul	r24, r18
    28dc:	a0 01       	movw	r20, r0
    28de:	83 9f       	mul	r24, r19
    28e0:	50 0d       	add	r21, r0
    28e2:	92 9f       	mul	r25, r18
    28e4:	50 0d       	add	r21, r0
    28e6:	11 24       	eor	r1, r1
    28e8:	4e 0f       	add	r20, r30
    28ea:	5f 1f       	adc	r21, r31
    28ec:	5d 83       	std	Y+5, r21	; 0x05
    28ee:	4c 83       	std	Y+4, r20	; 0x04
    28f0:	1a 8e       	std	Y+26, r1	; 0x1a
    28f2:	fb 83       	std	Y+3, r31	; 0x03
    28f4:	ea 83       	std	Y+2, r30	; 0x02
    28f6:	01 97       	sbiw	r24, 0x01	; 1
    28f8:	82 9f       	mul	r24, r18
    28fa:	a0 01       	movw	r20, r0
    28fc:	83 9f       	mul	r24, r19
    28fe:	50 0d       	add	r21, r0
    2900:	92 9f       	mul	r25, r18
    2902:	50 0d       	add	r21, r0
    2904:	11 24       	eor	r1, r1
    2906:	cf 01       	movw	r24, r30
    2908:	84 0f       	add	r24, r20
    290a:	95 1f       	adc	r25, r21
    290c:	9f 83       	std	Y+7, r25	; 0x07
    290e:	8e 83       	std	Y+6, r24	; 0x06
    2910:	8f ef       	ldi	r24, 0xFF	; 255
    2912:	8d 8f       	std	Y+29, r24	; 0x1d
    2914:	8e 8f       	std	Y+30, r24	; 0x1e
    2916:	61 11       	cpse	r22, r1
    2918:	0a c0       	rjmp	.+20     	; 0x292e <xQueueGenericReset+0x6c>
    291a:	88 85       	ldd	r24, Y+8	; 0x08
    291c:	88 23       	and	r24, r24
    291e:	69 f0       	breq	.+26     	; 0x293a <xQueueGenericReset+0x78>
    2920:	ce 01       	movw	r24, r28
    2922:	08 96       	adiw	r24, 0x08	; 8
    2924:	e6 d5       	rcall	.+3020   	; 0x34f2 <xTaskRemoveFromEventList>
    2926:	88 23       	and	r24, r24
    2928:	41 f0       	breq	.+16     	; 0x293a <xQueueGenericReset+0x78>
    292a:	3a de       	rcall	.-908    	; 0x25a0 <vPortYield>
    292c:	06 c0       	rjmp	.+12     	; 0x293a <xQueueGenericReset+0x78>
    292e:	ce 01       	movw	r24, r28
    2930:	08 96       	adiw	r24, 0x08	; 8
    2932:	fd dc       	rcall	.-1542   	; 0x232e <vListInitialise>
    2934:	ce 01       	movw	r24, r28
    2936:	41 96       	adiw	r24, 0x11	; 17
    2938:	fa dc       	rcall	.-1548   	; 0x232e <vListInitialise>
    293a:	0f 90       	pop	r0
    293c:	0f be       	out	0x3f, r0	; 63
    293e:	81 e0       	ldi	r24, 0x01	; 1
    2940:	df 91       	pop	r29
    2942:	cf 91       	pop	r28
    2944:	08 95       	ret

00002946 <xQueueGenericCreateStatic>:
    2946:	cf 93       	push	r28
    2948:	df 93       	push	r29
    294a:	e9 01       	movw	r28, r18
    294c:	20 97       	sbiw	r28, 0x00	; 0
    294e:	61 f0       	breq	.+24     	; 0x2968 <xQueueGenericCreateStatic+0x22>
    2950:	61 11       	cpse	r22, r1
    2952:	03 c0       	rjmp	.+6      	; 0x295a <xQueueGenericCreateStatic+0x14>
    2954:	39 83       	std	Y+1, r19	; 0x01
    2956:	28 83       	st	Y, r18
    2958:	02 c0       	rjmp	.+4      	; 0x295e <xQueueGenericCreateStatic+0x18>
    295a:	59 83       	std	Y+1, r21	; 0x01
    295c:	48 83       	st	Y, r20
    295e:	8b 8f       	std	Y+27, r24	; 0x1b
    2960:	6c 8f       	std	Y+28, r22	; 0x1c
    2962:	61 e0       	ldi	r22, 0x01	; 1
    2964:	ce 01       	movw	r24, r28
    2966:	ad df       	rcall	.-166    	; 0x28c2 <xQueueGenericReset>
    2968:	ce 01       	movw	r24, r28
    296a:	df 91       	pop	r29
    296c:	cf 91       	pop	r28
    296e:	08 95       	ret

00002970 <xQueueGenericSend>:
    2970:	9f 92       	push	r9
    2972:	af 92       	push	r10
    2974:	bf 92       	push	r11
    2976:	cf 92       	push	r12
    2978:	df 92       	push	r13
    297a:	ef 92       	push	r14
    297c:	ff 92       	push	r15
    297e:	0f 93       	push	r16
    2980:	1f 93       	push	r17
    2982:	cf 93       	push	r28
    2984:	df 93       	push	r29
    2986:	00 d0       	rcall	.+0      	; 0x2988 <xQueueGenericSend+0x18>
    2988:	1f 92       	push	r1
    298a:	1f 92       	push	r1
    298c:	cd b7       	in	r28, 0x3d	; 61
    298e:	de b7       	in	r29, 0x3e	; 62
    2990:	8c 01       	movw	r16, r24
    2992:	6b 01       	movw	r12, r22
    2994:	5d 83       	std	Y+5, r21	; 0x05
    2996:	4c 83       	std	Y+4, r20	; 0x04
    2998:	a2 2e       	mov	r10, r18
    299a:	b1 2c       	mov	r11, r1
    299c:	99 24       	eor	r9, r9
    299e:	93 94       	inc	r9
    29a0:	7c 01       	movw	r14, r24
    29a2:	88 e0       	ldi	r24, 0x08	; 8
    29a4:	e8 0e       	add	r14, r24
    29a6:	f1 1c       	adc	r15, r1
    29a8:	0f b6       	in	r0, 0x3f	; 63
    29aa:	f8 94       	cli
    29ac:	0f 92       	push	r0
    29ae:	f8 01       	movw	r30, r16
    29b0:	92 8d       	ldd	r25, Z+26	; 0x1a
    29b2:	83 8d       	ldd	r24, Z+27	; 0x1b
    29b4:	98 17       	cp	r25, r24
    29b6:	18 f0       	brcs	.+6      	; 0x29be <xQueueGenericSend+0x4e>
    29b8:	f2 e0       	ldi	r31, 0x02	; 2
    29ba:	af 12       	cpse	r10, r31
    29bc:	15 c0       	rjmp	.+42     	; 0x29e8 <xQueueGenericSend+0x78>
    29be:	4a 2d       	mov	r20, r10
    29c0:	b6 01       	movw	r22, r12
    29c2:	c8 01       	movw	r24, r16
    29c4:	bd de       	rcall	.-646    	; 0x2740 <prvCopyDataToQueue>
    29c6:	f8 01       	movw	r30, r16
    29c8:	91 89       	ldd	r25, Z+17	; 0x11
    29ca:	99 23       	and	r25, r25
    29cc:	39 f0       	breq	.+14     	; 0x29dc <xQueueGenericSend+0x6c>
    29ce:	c8 01       	movw	r24, r16
    29d0:	41 96       	adiw	r24, 0x11	; 17
    29d2:	8f d5       	rcall	.+2846   	; 0x34f2 <xTaskRemoveFromEventList>
    29d4:	88 23       	and	r24, r24
    29d6:	21 f0       	breq	.+8      	; 0x29e0 <xQueueGenericSend+0x70>
    29d8:	e3 dd       	rcall	.-1082   	; 0x25a0 <vPortYield>
    29da:	02 c0       	rjmp	.+4      	; 0x29e0 <xQueueGenericSend+0x70>
    29dc:	81 11       	cpse	r24, r1
    29de:	e0 dd       	rcall	.-1088   	; 0x25a0 <vPortYield>
    29e0:	0f 90       	pop	r0
    29e2:	0f be       	out	0x3f, r0	; 63
    29e4:	81 e0       	ldi	r24, 0x01	; 1
    29e6:	45 c0       	rjmp	.+138    	; 0x2a72 <xQueueGenericSend+0x102>
    29e8:	8c 81       	ldd	r24, Y+4	; 0x04
    29ea:	9d 81       	ldd	r25, Y+5	; 0x05
    29ec:	89 2b       	or	r24, r25
    29ee:	21 f4       	brne	.+8      	; 0x29f8 <xQueueGenericSend+0x88>
    29f0:	0f 90       	pop	r0
    29f2:	0f be       	out	0x3f, r0	; 63
    29f4:	80 e0       	ldi	r24, 0x00	; 0
    29f6:	3d c0       	rjmp	.+122    	; 0x2a72 <xQueueGenericSend+0x102>
    29f8:	b1 10       	cpse	r11, r1
    29fa:	04 c0       	rjmp	.+8      	; 0x2a04 <xQueueGenericSend+0x94>
    29fc:	ce 01       	movw	r24, r28
    29fe:	01 96       	adiw	r24, 0x01	; 1
    2a00:	c0 d5       	rcall	.+2944   	; 0x3582 <vTaskInternalSetTimeOutState>
    2a02:	b9 2c       	mov	r11, r9
    2a04:	0f 90       	pop	r0
    2a06:	0f be       	out	0x3f, r0	; 63
    2a08:	7a d3       	rcall	.+1780   	; 0x30fe <vTaskSuspendAll>
    2a0a:	0f b6       	in	r0, 0x3f	; 63
    2a0c:	f8 94       	cli
    2a0e:	0f 92       	push	r0
    2a10:	f8 01       	movw	r30, r16
    2a12:	85 8d       	ldd	r24, Z+29	; 0x1d
    2a14:	8f 3f       	cpi	r24, 0xFF	; 255
    2a16:	09 f4       	brne	.+2      	; 0x2a1a <xQueueGenericSend+0xaa>
    2a18:	15 8e       	std	Z+29, r1	; 0x1d
    2a1a:	f8 01       	movw	r30, r16
    2a1c:	86 8d       	ldd	r24, Z+30	; 0x1e
    2a1e:	8f 3f       	cpi	r24, 0xFF	; 255
    2a20:	09 f4       	brne	.+2      	; 0x2a24 <xQueueGenericSend+0xb4>
    2a22:	16 8e       	std	Z+30, r1	; 0x1e
    2a24:	0f 90       	pop	r0
    2a26:	0f be       	out	0x3f, r0	; 63
    2a28:	be 01       	movw	r22, r28
    2a2a:	6c 5f       	subi	r22, 0xFC	; 252
    2a2c:	7f 4f       	sbci	r23, 0xFF	; 255
    2a2e:	ce 01       	movw	r24, r28
    2a30:	01 96       	adiw	r24, 0x01	; 1
    2a32:	b2 d5       	rcall	.+2916   	; 0x3598 <xTaskCheckForTimeOut>
    2a34:	81 11       	cpse	r24, r1
    2a36:	19 c0       	rjmp	.+50     	; 0x2a6a <xQueueGenericSend+0xfa>
    2a38:	0f b6       	in	r0, 0x3f	; 63
    2a3a:	f8 94       	cli
    2a3c:	0f 92       	push	r0
    2a3e:	f8 01       	movw	r30, r16
    2a40:	92 8d       	ldd	r25, Z+26	; 0x1a
    2a42:	83 8d       	ldd	r24, Z+27	; 0x1b
    2a44:	0f 90       	pop	r0
    2a46:	0f be       	out	0x3f, r0	; 63
    2a48:	98 13       	cpse	r25, r24
    2a4a:	0b c0       	rjmp	.+22     	; 0x2a62 <xQueueGenericSend+0xf2>
    2a4c:	6c 81       	ldd	r22, Y+4	; 0x04
    2a4e:	7d 81       	ldd	r23, Y+5	; 0x05
    2a50:	c7 01       	movw	r24, r14
    2a52:	26 d5       	rcall	.+2636   	; 0x34a0 <vTaskPlaceOnEventList>
    2a54:	c8 01       	movw	r24, r16
    2a56:	ec de       	rcall	.-552    	; 0x2830 <prvUnlockQueue>
    2a58:	19 d4       	rcall	.+2098   	; 0x328c <xTaskResumeAll>
    2a5a:	81 11       	cpse	r24, r1
    2a5c:	a5 cf       	rjmp	.-182    	; 0x29a8 <xQueueGenericSend+0x38>
    2a5e:	a0 dd       	rcall	.-1216   	; 0x25a0 <vPortYield>
    2a60:	a3 cf       	rjmp	.-186    	; 0x29a8 <xQueueGenericSend+0x38>
    2a62:	c8 01       	movw	r24, r16
    2a64:	e5 de       	rcall	.-566    	; 0x2830 <prvUnlockQueue>
    2a66:	12 d4       	rcall	.+2084   	; 0x328c <xTaskResumeAll>
    2a68:	9f cf       	rjmp	.-194    	; 0x29a8 <xQueueGenericSend+0x38>
    2a6a:	c8 01       	movw	r24, r16
    2a6c:	e1 de       	rcall	.-574    	; 0x2830 <prvUnlockQueue>
    2a6e:	0e d4       	rcall	.+2076   	; 0x328c <xTaskResumeAll>
    2a70:	80 e0       	ldi	r24, 0x00	; 0
    2a72:	0f 90       	pop	r0
    2a74:	0f 90       	pop	r0
    2a76:	0f 90       	pop	r0
    2a78:	0f 90       	pop	r0
    2a7a:	0f 90       	pop	r0
    2a7c:	df 91       	pop	r29
    2a7e:	cf 91       	pop	r28
    2a80:	1f 91       	pop	r17
    2a82:	0f 91       	pop	r16
    2a84:	ff 90       	pop	r15
    2a86:	ef 90       	pop	r14
    2a88:	df 90       	pop	r13
    2a8a:	cf 90       	pop	r12
    2a8c:	bf 90       	pop	r11
    2a8e:	af 90       	pop	r10
    2a90:	9f 90       	pop	r9
    2a92:	08 95       	ret

00002a94 <xQueueGenericSendFromISR>:
    2a94:	ef 92       	push	r14
    2a96:	ff 92       	push	r15
    2a98:	0f 93       	push	r16
    2a9a:	1f 93       	push	r17
    2a9c:	cf 93       	push	r28
    2a9e:	df 93       	push	r29
    2aa0:	8a 01       	movw	r16, r20
    2aa2:	fc 01       	movw	r30, r24
    2aa4:	52 8d       	ldd	r21, Z+26	; 0x1a
    2aa6:	33 8d       	ldd	r19, Z+27	; 0x1b
    2aa8:	53 17       	cp	r21, r19
    2aaa:	10 f0       	brcs	.+4      	; 0x2ab0 <xQueueGenericSendFromISR+0x1c>
    2aac:	22 30       	cpi	r18, 0x02	; 2
    2aae:	e1 f4       	brne	.+56     	; 0x2ae8 <xQueueGenericSendFromISR+0x54>
    2ab0:	42 2f       	mov	r20, r18
    2ab2:	78 01       	movw	r14, r16
    2ab4:	ec 01       	movw	r28, r24
    2ab6:	1e 8d       	ldd	r17, Y+30	; 0x1e
    2ab8:	43 de       	rcall	.-890    	; 0x2740 <prvCopyDataToQueue>
    2aba:	1f 3f       	cpi	r17, 0xFF	; 255
    2abc:	79 f4       	brne	.+30     	; 0x2adc <xQueueGenericSendFromISR+0x48>
    2abe:	89 89       	ldd	r24, Y+17	; 0x11
    2ac0:	88 23       	and	r24, r24
    2ac2:	a1 f0       	breq	.+40     	; 0x2aec <xQueueGenericSendFromISR+0x58>
    2ac4:	ce 01       	movw	r24, r28
    2ac6:	41 96       	adiw	r24, 0x11	; 17
    2ac8:	14 d5       	rcall	.+2600   	; 0x34f2 <xTaskRemoveFromEventList>
    2aca:	88 23       	and	r24, r24
    2acc:	89 f0       	breq	.+34     	; 0x2af0 <xQueueGenericSendFromISR+0x5c>
    2ace:	e1 14       	cp	r14, r1
    2ad0:	f1 04       	cpc	r15, r1
    2ad2:	81 f0       	breq	.+32     	; 0x2af4 <xQueueGenericSendFromISR+0x60>
    2ad4:	81 e0       	ldi	r24, 0x01	; 1
    2ad6:	f7 01       	movw	r30, r14
    2ad8:	80 83       	st	Z, r24
    2ada:	0d c0       	rjmp	.+26     	; 0x2af6 <xQueueGenericSendFromISR+0x62>
    2adc:	ff 24       	eor	r15, r15
    2ade:	f3 94       	inc	r15
    2ae0:	f1 0e       	add	r15, r17
    2ae2:	fe 8e       	std	Y+30, r15	; 0x1e
    2ae4:	81 e0       	ldi	r24, 0x01	; 1
    2ae6:	07 c0       	rjmp	.+14     	; 0x2af6 <xQueueGenericSendFromISR+0x62>
    2ae8:	80 e0       	ldi	r24, 0x00	; 0
    2aea:	05 c0       	rjmp	.+10     	; 0x2af6 <xQueueGenericSendFromISR+0x62>
    2aec:	81 e0       	ldi	r24, 0x01	; 1
    2aee:	03 c0       	rjmp	.+6      	; 0x2af6 <xQueueGenericSendFromISR+0x62>
    2af0:	81 e0       	ldi	r24, 0x01	; 1
    2af2:	01 c0       	rjmp	.+2      	; 0x2af6 <xQueueGenericSendFromISR+0x62>
    2af4:	81 e0       	ldi	r24, 0x01	; 1
    2af6:	df 91       	pop	r29
    2af8:	cf 91       	pop	r28
    2afa:	1f 91       	pop	r17
    2afc:	0f 91       	pop	r16
    2afe:	ff 90       	pop	r15
    2b00:	ef 90       	pop	r14
    2b02:	08 95       	ret

00002b04 <xQueueReceive>:
    2b04:	9f 92       	push	r9
    2b06:	af 92       	push	r10
    2b08:	bf 92       	push	r11
    2b0a:	cf 92       	push	r12
    2b0c:	df 92       	push	r13
    2b0e:	ef 92       	push	r14
    2b10:	ff 92       	push	r15
    2b12:	0f 93       	push	r16
    2b14:	1f 93       	push	r17
    2b16:	cf 93       	push	r28
    2b18:	df 93       	push	r29
    2b1a:	00 d0       	rcall	.+0      	; 0x2b1c <xQueueReceive+0x18>
    2b1c:	1f 92       	push	r1
    2b1e:	1f 92       	push	r1
    2b20:	cd b7       	in	r28, 0x3d	; 61
    2b22:	de b7       	in	r29, 0x3e	; 62
    2b24:	8c 01       	movw	r16, r24
    2b26:	5b 01       	movw	r10, r22
    2b28:	5d 83       	std	Y+5, r21	; 0x05
    2b2a:	4c 83       	std	Y+4, r20	; 0x04
    2b2c:	e1 2c       	mov	r14, r1
    2b2e:	99 24       	eor	r9, r9
    2b30:	93 94       	inc	r9
    2b32:	6c 01       	movw	r12, r24
    2b34:	81 e1       	ldi	r24, 0x11	; 17
    2b36:	c8 0e       	add	r12, r24
    2b38:	d1 1c       	adc	r13, r1
    2b3a:	0f b6       	in	r0, 0x3f	; 63
    2b3c:	f8 94       	cli
    2b3e:	0f 92       	push	r0
    2b40:	f8 01       	movw	r30, r16
    2b42:	f2 8c       	ldd	r15, Z+26	; 0x1a
    2b44:	ff 20       	and	r15, r15
    2b46:	91 f0       	breq	.+36     	; 0x2b6c <xQueueReceive+0x68>
    2b48:	b5 01       	movw	r22, r10
    2b4a:	c8 01       	movw	r24, r16
    2b4c:	57 de       	rcall	.-850    	; 0x27fc <prvCopyDataFromQueue>
    2b4e:	fa 94       	dec	r15
    2b50:	f8 01       	movw	r30, r16
    2b52:	f2 8e       	std	Z+26, r15	; 0x1a
    2b54:	80 85       	ldd	r24, Z+8	; 0x08
    2b56:	88 23       	and	r24, r24
    2b58:	29 f0       	breq	.+10     	; 0x2b64 <xQueueReceive+0x60>
    2b5a:	c8 01       	movw	r24, r16
    2b5c:	08 96       	adiw	r24, 0x08	; 8
    2b5e:	c9 d4       	rcall	.+2450   	; 0x34f2 <xTaskRemoveFromEventList>
    2b60:	81 11       	cpse	r24, r1
    2b62:	1e dd       	rcall	.-1476   	; 0x25a0 <vPortYield>
    2b64:	0f 90       	pop	r0
    2b66:	0f be       	out	0x3f, r0	; 63
    2b68:	81 e0       	ldi	r24, 0x01	; 1
    2b6a:	44 c0       	rjmp	.+136    	; 0x2bf4 <xQueueReceive+0xf0>
    2b6c:	8c 81       	ldd	r24, Y+4	; 0x04
    2b6e:	9d 81       	ldd	r25, Y+5	; 0x05
    2b70:	89 2b       	or	r24, r25
    2b72:	21 f4       	brne	.+8      	; 0x2b7c <xQueueReceive+0x78>
    2b74:	0f 90       	pop	r0
    2b76:	0f be       	out	0x3f, r0	; 63
    2b78:	80 e0       	ldi	r24, 0x00	; 0
    2b7a:	3c c0       	rjmp	.+120    	; 0x2bf4 <xQueueReceive+0xf0>
    2b7c:	e1 10       	cpse	r14, r1
    2b7e:	04 c0       	rjmp	.+8      	; 0x2b88 <xQueueReceive+0x84>
    2b80:	ce 01       	movw	r24, r28
    2b82:	01 96       	adiw	r24, 0x01	; 1
    2b84:	fe d4       	rcall	.+2556   	; 0x3582 <vTaskInternalSetTimeOutState>
    2b86:	e9 2c       	mov	r14, r9
    2b88:	0f 90       	pop	r0
    2b8a:	0f be       	out	0x3f, r0	; 63
    2b8c:	b8 d2       	rcall	.+1392   	; 0x30fe <vTaskSuspendAll>
    2b8e:	0f b6       	in	r0, 0x3f	; 63
    2b90:	f8 94       	cli
    2b92:	0f 92       	push	r0
    2b94:	f8 01       	movw	r30, r16
    2b96:	85 8d       	ldd	r24, Z+29	; 0x1d
    2b98:	8f 3f       	cpi	r24, 0xFF	; 255
    2b9a:	09 f4       	brne	.+2      	; 0x2b9e <xQueueReceive+0x9a>
    2b9c:	15 8e       	std	Z+29, r1	; 0x1d
    2b9e:	f8 01       	movw	r30, r16
    2ba0:	86 8d       	ldd	r24, Z+30	; 0x1e
    2ba2:	8f 3f       	cpi	r24, 0xFF	; 255
    2ba4:	09 f4       	brne	.+2      	; 0x2ba8 <xQueueReceive+0xa4>
    2ba6:	16 8e       	std	Z+30, r1	; 0x1e
    2ba8:	0f 90       	pop	r0
    2baa:	0f be       	out	0x3f, r0	; 63
    2bac:	be 01       	movw	r22, r28
    2bae:	6c 5f       	subi	r22, 0xFC	; 252
    2bb0:	7f 4f       	sbci	r23, 0xFF	; 255
    2bb2:	ce 01       	movw	r24, r28
    2bb4:	01 96       	adiw	r24, 0x01	; 1
    2bb6:	f0 d4       	rcall	.+2528   	; 0x3598 <xTaskCheckForTimeOut>
    2bb8:	81 11       	cpse	r24, r1
    2bba:	13 c0       	rjmp	.+38     	; 0x2be2 <xQueueReceive+0xde>
    2bbc:	c8 01       	movw	r24, r16
    2bbe:	b5 dd       	rcall	.-1174   	; 0x272a <prvIsQueueEmpty>
    2bc0:	88 23       	and	r24, r24
    2bc2:	59 f0       	breq	.+22     	; 0x2bda <xQueueReceive+0xd6>
    2bc4:	6c 81       	ldd	r22, Y+4	; 0x04
    2bc6:	7d 81       	ldd	r23, Y+5	; 0x05
    2bc8:	c6 01       	movw	r24, r12
    2bca:	6a d4       	rcall	.+2260   	; 0x34a0 <vTaskPlaceOnEventList>
    2bcc:	c8 01       	movw	r24, r16
    2bce:	30 de       	rcall	.-928    	; 0x2830 <prvUnlockQueue>
    2bd0:	5d d3       	rcall	.+1722   	; 0x328c <xTaskResumeAll>
    2bd2:	81 11       	cpse	r24, r1
    2bd4:	b2 cf       	rjmp	.-156    	; 0x2b3a <xQueueReceive+0x36>
    2bd6:	e4 dc       	rcall	.-1592   	; 0x25a0 <vPortYield>
    2bd8:	b0 cf       	rjmp	.-160    	; 0x2b3a <xQueueReceive+0x36>
    2bda:	c8 01       	movw	r24, r16
    2bdc:	29 de       	rcall	.-942    	; 0x2830 <prvUnlockQueue>
    2bde:	56 d3       	rcall	.+1708   	; 0x328c <xTaskResumeAll>
    2be0:	ac cf       	rjmp	.-168    	; 0x2b3a <xQueueReceive+0x36>
    2be2:	c8 01       	movw	r24, r16
    2be4:	25 de       	rcall	.-950    	; 0x2830 <prvUnlockQueue>
    2be6:	52 d3       	rcall	.+1700   	; 0x328c <xTaskResumeAll>
    2be8:	c8 01       	movw	r24, r16
    2bea:	9f dd       	rcall	.-1218   	; 0x272a <prvIsQueueEmpty>
    2bec:	88 23       	and	r24, r24
    2bee:	09 f4       	brne	.+2      	; 0x2bf2 <xQueueReceive+0xee>
    2bf0:	a4 cf       	rjmp	.-184    	; 0x2b3a <xQueueReceive+0x36>
    2bf2:	80 e0       	ldi	r24, 0x00	; 0
    2bf4:	0f 90       	pop	r0
    2bf6:	0f 90       	pop	r0
    2bf8:	0f 90       	pop	r0
    2bfa:	0f 90       	pop	r0
    2bfc:	0f 90       	pop	r0
    2bfe:	df 91       	pop	r29
    2c00:	cf 91       	pop	r28
    2c02:	1f 91       	pop	r17
    2c04:	0f 91       	pop	r16
    2c06:	ff 90       	pop	r15
    2c08:	ef 90       	pop	r14
    2c0a:	df 90       	pop	r13
    2c0c:	cf 90       	pop	r12
    2c0e:	bf 90       	pop	r11
    2c10:	af 90       	pop	r10
    2c12:	9f 90       	pop	r9
    2c14:	08 95       	ret

00002c16 <xQueueSemaphoreTake>:
    2c16:	bf 92       	push	r11
    2c18:	cf 92       	push	r12
    2c1a:	df 92       	push	r13
    2c1c:	ef 92       	push	r14
    2c1e:	ff 92       	push	r15
    2c20:	0f 93       	push	r16
    2c22:	1f 93       	push	r17
    2c24:	cf 93       	push	r28
    2c26:	df 93       	push	r29
    2c28:	00 d0       	rcall	.+0      	; 0x2c2a <xQueueSemaphoreTake+0x14>
    2c2a:	1f 92       	push	r1
    2c2c:	1f 92       	push	r1
    2c2e:	cd b7       	in	r28, 0x3d	; 61
    2c30:	de b7       	in	r29, 0x3e	; 62
    2c32:	8c 01       	movw	r16, r24
    2c34:	7d 83       	std	Y+5, r23	; 0x05
    2c36:	6c 83       	std	Y+4, r22	; 0x04
    2c38:	b1 2c       	mov	r11, r1
    2c3a:	d1 2c       	mov	r13, r1
    2c3c:	cc 24       	eor	r12, r12
    2c3e:	c3 94       	inc	r12
    2c40:	7c 01       	movw	r14, r24
    2c42:	81 e1       	ldi	r24, 0x11	; 17
    2c44:	e8 0e       	add	r14, r24
    2c46:	f1 1c       	adc	r15, r1
    2c48:	0f b6       	in	r0, 0x3f	; 63
    2c4a:	f8 94       	cli
    2c4c:	0f 92       	push	r0
    2c4e:	d8 01       	movw	r26, r16
    2c50:	5a 96       	adiw	r26, 0x1a	; 26
    2c52:	8c 91       	ld	r24, X
    2c54:	5a 97       	sbiw	r26, 0x1a	; 26
    2c56:	88 23       	and	r24, r24
    2c58:	d1 f0       	breq	.+52     	; 0x2c8e <xQueueSemaphoreTake+0x78>
    2c5a:	81 50       	subi	r24, 0x01	; 1
    2c5c:	5a 96       	adiw	r26, 0x1a	; 26
    2c5e:	8c 93       	st	X, r24
    2c60:	5a 97       	sbiw	r26, 0x1a	; 26
    2c62:	8d 91       	ld	r24, X+
    2c64:	9c 91       	ld	r25, X
    2c66:	89 2b       	or	r24, r25
    2c68:	21 f4       	brne	.+8      	; 0x2c72 <xQueueSemaphoreTake+0x5c>
    2c6a:	d5 d5       	rcall	.+2986   	; 0x3816 <pvTaskIncrementMutexHeldCount>
    2c6c:	f8 01       	movw	r30, r16
    2c6e:	95 83       	std	Z+5, r25	; 0x05
    2c70:	84 83       	std	Z+4, r24	; 0x04
    2c72:	d8 01       	movw	r26, r16
    2c74:	18 96       	adiw	r26, 0x08	; 8
    2c76:	8c 91       	ld	r24, X
    2c78:	88 23       	and	r24, r24
    2c7a:	29 f0       	breq	.+10     	; 0x2c86 <xQueueSemaphoreTake+0x70>
    2c7c:	c8 01       	movw	r24, r16
    2c7e:	08 96       	adiw	r24, 0x08	; 8
    2c80:	38 d4       	rcall	.+2160   	; 0x34f2 <xTaskRemoveFromEventList>
    2c82:	81 11       	cpse	r24, r1
    2c84:	8d dc       	rcall	.-1766   	; 0x25a0 <vPortYield>
    2c86:	0f 90       	pop	r0
    2c88:	0f be       	out	0x3f, r0	; 63
    2c8a:	81 e0       	ldi	r24, 0x01	; 1
    2c8c:	70 c0       	rjmp	.+224    	; 0x2d6e <xQueueSemaphoreTake+0x158>
    2c8e:	8c 81       	ldd	r24, Y+4	; 0x04
    2c90:	9d 81       	ldd	r25, Y+5	; 0x05
    2c92:	89 2b       	or	r24, r25
    2c94:	21 f4       	brne	.+8      	; 0x2c9e <xQueueSemaphoreTake+0x88>
    2c96:	0f 90       	pop	r0
    2c98:	0f be       	out	0x3f, r0	; 63
    2c9a:	80 e0       	ldi	r24, 0x00	; 0
    2c9c:	68 c0       	rjmp	.+208    	; 0x2d6e <xQueueSemaphoreTake+0x158>
    2c9e:	d1 10       	cpse	r13, r1
    2ca0:	04 c0       	rjmp	.+8      	; 0x2caa <xQueueSemaphoreTake+0x94>
    2ca2:	ce 01       	movw	r24, r28
    2ca4:	01 96       	adiw	r24, 0x01	; 1
    2ca6:	6d d4       	rcall	.+2266   	; 0x3582 <vTaskInternalSetTimeOutState>
    2ca8:	dc 2c       	mov	r13, r12
    2caa:	0f 90       	pop	r0
    2cac:	0f be       	out	0x3f, r0	; 63
    2cae:	27 d2       	rcall	.+1102   	; 0x30fe <vTaskSuspendAll>
    2cb0:	0f b6       	in	r0, 0x3f	; 63
    2cb2:	f8 94       	cli
    2cb4:	0f 92       	push	r0
    2cb6:	f8 01       	movw	r30, r16
    2cb8:	85 8d       	ldd	r24, Z+29	; 0x1d
    2cba:	8f 3f       	cpi	r24, 0xFF	; 255
    2cbc:	09 f4       	brne	.+2      	; 0x2cc0 <xQueueSemaphoreTake+0xaa>
    2cbe:	15 8e       	std	Z+29, r1	; 0x1d
    2cc0:	d8 01       	movw	r26, r16
    2cc2:	5e 96       	adiw	r26, 0x1e	; 30
    2cc4:	8c 91       	ld	r24, X
    2cc6:	5e 97       	sbiw	r26, 0x1e	; 30
    2cc8:	8f 3f       	cpi	r24, 0xFF	; 255
    2cca:	11 f4       	brne	.+4      	; 0x2cd0 <xQueueSemaphoreTake+0xba>
    2ccc:	5e 96       	adiw	r26, 0x1e	; 30
    2cce:	1c 92       	st	X, r1
    2cd0:	0f 90       	pop	r0
    2cd2:	0f be       	out	0x3f, r0	; 63
    2cd4:	be 01       	movw	r22, r28
    2cd6:	6c 5f       	subi	r22, 0xFC	; 252
    2cd8:	7f 4f       	sbci	r23, 0xFF	; 255
    2cda:	ce 01       	movw	r24, r28
    2cdc:	01 96       	adiw	r24, 0x01	; 1
    2cde:	5c d4       	rcall	.+2232   	; 0x3598 <xTaskCheckForTimeOut>
    2ce0:	81 11       	cpse	r24, r1
    2ce2:	21 c0       	rjmp	.+66     	; 0x2d26 <xQueueSemaphoreTake+0x110>
    2ce4:	c8 01       	movw	r24, r16
    2ce6:	21 dd       	rcall	.-1470   	; 0x272a <prvIsQueueEmpty>
    2ce8:	88 23       	and	r24, r24
    2cea:	c9 f0       	breq	.+50     	; 0x2d1e <xQueueSemaphoreTake+0x108>
    2cec:	f8 01       	movw	r30, r16
    2cee:	80 81       	ld	r24, Z
    2cf0:	91 81       	ldd	r25, Z+1	; 0x01
    2cf2:	89 2b       	or	r24, r25
    2cf4:	49 f4       	brne	.+18     	; 0x2d08 <xQueueSemaphoreTake+0xf2>
    2cf6:	0f b6       	in	r0, 0x3f	; 63
    2cf8:	f8 94       	cli
    2cfa:	0f 92       	push	r0
    2cfc:	84 81       	ldd	r24, Z+4	; 0x04
    2cfe:	95 81       	ldd	r25, Z+5	; 0x05
    2d00:	88 d4       	rcall	.+2320   	; 0x3612 <xTaskPriorityInherit>
    2d02:	b8 2e       	mov	r11, r24
    2d04:	0f 90       	pop	r0
    2d06:	0f be       	out	0x3f, r0	; 63
    2d08:	6c 81       	ldd	r22, Y+4	; 0x04
    2d0a:	7d 81       	ldd	r23, Y+5	; 0x05
    2d0c:	c7 01       	movw	r24, r14
    2d0e:	c8 d3       	rcall	.+1936   	; 0x34a0 <vTaskPlaceOnEventList>
    2d10:	c8 01       	movw	r24, r16
    2d12:	8e dd       	rcall	.-1252   	; 0x2830 <prvUnlockQueue>
    2d14:	bb d2       	rcall	.+1398   	; 0x328c <xTaskResumeAll>
    2d16:	81 11       	cpse	r24, r1
    2d18:	97 cf       	rjmp	.-210    	; 0x2c48 <xQueueSemaphoreTake+0x32>
    2d1a:	42 dc       	rcall	.-1916   	; 0x25a0 <vPortYield>
    2d1c:	95 cf       	rjmp	.-214    	; 0x2c48 <xQueueSemaphoreTake+0x32>
    2d1e:	c8 01       	movw	r24, r16
    2d20:	87 dd       	rcall	.-1266   	; 0x2830 <prvUnlockQueue>
    2d22:	b4 d2       	rcall	.+1384   	; 0x328c <xTaskResumeAll>
    2d24:	91 cf       	rjmp	.-222    	; 0x2c48 <xQueueSemaphoreTake+0x32>
    2d26:	c8 01       	movw	r24, r16
    2d28:	83 dd       	rcall	.-1274   	; 0x2830 <prvUnlockQueue>
    2d2a:	b0 d2       	rcall	.+1376   	; 0x328c <xTaskResumeAll>
    2d2c:	c8 01       	movw	r24, r16
    2d2e:	fd dc       	rcall	.-1542   	; 0x272a <prvIsQueueEmpty>
    2d30:	88 23       	and	r24, r24
    2d32:	09 f4       	brne	.+2      	; 0x2d36 <xQueueSemaphoreTake+0x120>
    2d34:	89 cf       	rjmp	.-238    	; 0x2c48 <xQueueSemaphoreTake+0x32>
    2d36:	bb 20       	and	r11, r11
    2d38:	c9 f0       	breq	.+50     	; 0x2d6c <xQueueSemaphoreTake+0x156>
    2d3a:	0f b6       	in	r0, 0x3f	; 63
    2d3c:	f8 94       	cli
    2d3e:	0f 92       	push	r0
    2d40:	f8 01       	movw	r30, r16
    2d42:	81 89       	ldd	r24, Z+17	; 0x11
    2d44:	88 23       	and	r24, r24
    2d46:	39 f0       	breq	.+14     	; 0x2d56 <xQueueSemaphoreTake+0x140>
    2d48:	06 88       	ldd	r0, Z+22	; 0x16
    2d4a:	f7 89       	ldd	r31, Z+23	; 0x17
    2d4c:	e0 2d       	mov	r30, r0
    2d4e:	80 81       	ld	r24, Z
    2d50:	64 e0       	ldi	r22, 0x04	; 4
    2d52:	68 1b       	sub	r22, r24
    2d54:	01 c0       	rjmp	.+2      	; 0x2d58 <xQueueSemaphoreTake+0x142>
    2d56:	60 e0       	ldi	r22, 0x00	; 0
    2d58:	d8 01       	movw	r26, r16
    2d5a:	14 96       	adiw	r26, 0x04	; 4
    2d5c:	8d 91       	ld	r24, X+
    2d5e:	9c 91       	ld	r25, X
    2d60:	15 97       	sbiw	r26, 0x05	; 5
    2d62:	09 d5       	rcall	.+2578   	; 0x3776 <vTaskPriorityDisinheritAfterTimeout>
    2d64:	0f 90       	pop	r0
    2d66:	0f be       	out	0x3f, r0	; 63
    2d68:	80 e0       	ldi	r24, 0x00	; 0
    2d6a:	01 c0       	rjmp	.+2      	; 0x2d6e <xQueueSemaphoreTake+0x158>
    2d6c:	80 e0       	ldi	r24, 0x00	; 0
    2d6e:	0f 90       	pop	r0
    2d70:	0f 90       	pop	r0
    2d72:	0f 90       	pop	r0
    2d74:	0f 90       	pop	r0
    2d76:	0f 90       	pop	r0
    2d78:	df 91       	pop	r29
    2d7a:	cf 91       	pop	r28
    2d7c:	1f 91       	pop	r17
    2d7e:	0f 91       	pop	r16
    2d80:	ff 90       	pop	r15
    2d82:	ef 90       	pop	r14
    2d84:	df 90       	pop	r13
    2d86:	cf 90       	pop	r12
    2d88:	bf 90       	pop	r11
    2d8a:	08 95       	ret

00002d8c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
    {
    2d8c:	cf 93       	push	r28
    2d8e:	df 93       	push	r29
    2d90:	ec 01       	movw	r28, r24
        will not actually cause the task to block, just place it on a blocked
        list.  It will not block until the scheduler is unlocked - at which
        time a yield will be performed.  If an item is added to the queue while
        the queue is locked, and the calling task blocks on the queue, then the
        calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    2d92:	0f b6       	in	r0, 0x3f	; 63
    2d94:	f8 94       	cli
    2d96:	0f 92       	push	r0
    2d98:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2d9a:	8f 3f       	cpi	r24, 0xFF	; 255
    2d9c:	09 f4       	brne	.+2      	; 0x2da0 <vQueueWaitForMessageRestricted+0x14>
    2d9e:	1d 8e       	std	Y+29, r1	; 0x1d
    2da0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2da2:	8f 3f       	cpi	r24, 0xFF	; 255
    2da4:	09 f4       	brne	.+2      	; 0x2da8 <vQueueWaitForMessageRestricted+0x1c>
    2da6:	1e 8e       	std	Y+30, r1	; 0x1e
    2da8:	0f 90       	pop	r0
    2daa:	0f be       	out	0x3f, r0	; 63
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    2dac:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2dae:	81 11       	cpse	r24, r1
    2db0:	03 c0       	rjmp	.+6      	; 0x2db8 <vQueueWaitForMessageRestricted+0x2c>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    2db2:	ce 01       	movw	r24, r28
    2db4:	41 96       	adiw	r24, 0x11	; 17
    2db6:	85 d3       	rcall	.+1802   	; 0x34c2 <vTaskPlaceOnEventListRestricted>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
        prvUnlockQueue( pxQueue );
    2db8:	ce 01       	movw	r24, r28
    2dba:	3a dd       	rcall	.-1420   	; 0x2830 <prvUnlockQueue>
    }
    2dbc:	df 91       	pop	r29
    2dbe:	cf 91       	pop	r28
    2dc0:	08 95       	ret

00002dc2 <prvResetNextTaskUnblockTime>:
    2dc2:	e0 91 75 0c 	lds	r30, 0x0C75	; 0x800c75 <pxDelayedTaskList>
    2dc6:	f0 91 76 0c 	lds	r31, 0x0C76	; 0x800c76 <pxDelayedTaskList+0x1>
    2dca:	80 81       	ld	r24, Z
    2dcc:	81 11       	cpse	r24, r1
    2dce:	07 c0       	rjmp	.+14     	; 0x2dde <prvResetNextTaskUnblockTime+0x1c>
    2dd0:	8f ef       	ldi	r24, 0xFF	; 255
    2dd2:	9f ef       	ldi	r25, 0xFF	; 255
    2dd4:	90 93 56 0c 	sts	0x0C56, r25	; 0x800c56 <xNextTaskUnblockTime+0x1>
    2dd8:	80 93 55 0c 	sts	0x0C55, r24	; 0x800c55 <xNextTaskUnblockTime>
    2ddc:	08 95       	ret
    2dde:	e0 91 75 0c 	lds	r30, 0x0C75	; 0x800c75 <pxDelayedTaskList>
    2de2:	f0 91 76 0c 	lds	r31, 0x0C76	; 0x800c76 <pxDelayedTaskList+0x1>
    2de6:	05 80       	ldd	r0, Z+5	; 0x05
    2de8:	f6 81       	ldd	r31, Z+6	; 0x06
    2dea:	e0 2d       	mov	r30, r0
    2dec:	06 80       	ldd	r0, Z+6	; 0x06
    2dee:	f7 81       	ldd	r31, Z+7	; 0x07
    2df0:	e0 2d       	mov	r30, r0
    2df2:	82 81       	ldd	r24, Z+2	; 0x02
    2df4:	93 81       	ldd	r25, Z+3	; 0x03
    2df6:	90 93 56 0c 	sts	0x0C56, r25	; 0x800c56 <xNextTaskUnblockTime+0x1>
    2dfa:	80 93 55 0c 	sts	0x0C55, r24	; 0x800c55 <xNextTaskUnblockTime>
    2dfe:	08 95       	ret

00002e00 <prvAddCurrentTaskToDelayedList>:
    2e00:	0f 93       	push	r16
    2e02:	1f 93       	push	r17
    2e04:	cf 93       	push	r28
    2e06:	df 93       	push	r29
    2e08:	ec 01       	movw	r28, r24
    2e0a:	00 91 5d 0c 	lds	r16, 0x0C5D	; 0x800c5d <xTickCount>
    2e0e:	10 91 5e 0c 	lds	r17, 0x0C5E	; 0x800c5e <xTickCount+0x1>
    2e12:	80 91 9b 0c 	lds	r24, 0x0C9B	; 0x800c9b <pxCurrentTCB>
    2e16:	90 91 9c 0c 	lds	r25, 0x0C9C	; 0x800c9c <pxCurrentTCB+0x1>
    2e1a:	02 96       	adiw	r24, 0x02	; 2
    2e1c:	ec da       	rcall	.-2600   	; 0x23f6 <uxListRemove>
    2e1e:	c0 0f       	add	r28, r16
    2e20:	d1 1f       	adc	r29, r17
    2e22:	e0 91 9b 0c 	lds	r30, 0x0C9B	; 0x800c9b <pxCurrentTCB>
    2e26:	f0 91 9c 0c 	lds	r31, 0x0C9C	; 0x800c9c <pxCurrentTCB+0x1>
    2e2a:	d3 83       	std	Z+3, r29	; 0x03
    2e2c:	c2 83       	std	Z+2, r28	; 0x02
    2e2e:	c0 17       	cp	r28, r16
    2e30:	d1 07       	cpc	r29, r17
    2e32:	60 f4       	brcc	.+24     	; 0x2e4c <prvAddCurrentTaskToDelayedList+0x4c>
    2e34:	60 91 9b 0c 	lds	r22, 0x0C9B	; 0x800c9b <pxCurrentTCB>
    2e38:	70 91 9c 0c 	lds	r23, 0x0C9C	; 0x800c9c <pxCurrentTCB+0x1>
    2e3c:	80 91 73 0c 	lds	r24, 0x0C73	; 0x800c73 <pxOverflowDelayedTaskList>
    2e40:	90 91 74 0c 	lds	r25, 0x0C74	; 0x800c74 <pxOverflowDelayedTaskList+0x1>
    2e44:	6e 5f       	subi	r22, 0xFE	; 254
    2e46:	7f 4f       	sbci	r23, 0xFF	; 255
    2e48:	a5 da       	rcall	.-2742   	; 0x2394 <vListInsert>
    2e4a:	16 c0       	rjmp	.+44     	; 0x2e78 <prvAddCurrentTaskToDelayedList+0x78>
    2e4c:	60 91 9b 0c 	lds	r22, 0x0C9B	; 0x800c9b <pxCurrentTCB>
    2e50:	70 91 9c 0c 	lds	r23, 0x0C9C	; 0x800c9c <pxCurrentTCB+0x1>
    2e54:	80 91 75 0c 	lds	r24, 0x0C75	; 0x800c75 <pxDelayedTaskList>
    2e58:	90 91 76 0c 	lds	r25, 0x0C76	; 0x800c76 <pxDelayedTaskList+0x1>
    2e5c:	6e 5f       	subi	r22, 0xFE	; 254
    2e5e:	7f 4f       	sbci	r23, 0xFF	; 255
    2e60:	99 da       	rcall	.-2766   	; 0x2394 <vListInsert>
    2e62:	80 91 55 0c 	lds	r24, 0x0C55	; 0x800c55 <xNextTaskUnblockTime>
    2e66:	90 91 56 0c 	lds	r25, 0x0C56	; 0x800c56 <xNextTaskUnblockTime+0x1>
    2e6a:	c8 17       	cp	r28, r24
    2e6c:	d9 07       	cpc	r29, r25
    2e6e:	20 f4       	brcc	.+8      	; 0x2e78 <prvAddCurrentTaskToDelayedList+0x78>
    2e70:	d0 93 56 0c 	sts	0x0C56, r29	; 0x800c56 <xNextTaskUnblockTime+0x1>
    2e74:	c0 93 55 0c 	sts	0x0C55, r28	; 0x800c55 <xNextTaskUnblockTime>
    2e78:	df 91       	pop	r29
    2e7a:	cf 91       	pop	r28
    2e7c:	1f 91       	pop	r17
    2e7e:	0f 91       	pop	r16
    2e80:	08 95       	ret

00002e82 <xTaskCreateStatic>:
    2e82:	6f 92       	push	r6
    2e84:	7f 92       	push	r7
    2e86:	8f 92       	push	r8
    2e88:	9f 92       	push	r9
    2e8a:	af 92       	push	r10
    2e8c:	bf 92       	push	r11
    2e8e:	cf 92       	push	r12
    2e90:	df 92       	push	r13
    2e92:	ef 92       	push	r14
    2e94:	ff 92       	push	r15
    2e96:	0f 93       	push	r16
    2e98:	cf 93       	push	r28
    2e9a:	df 93       	push	r29
    2e9c:	c1 14       	cp	r12, r1
    2e9e:	d1 04       	cpc	r13, r1
    2ea0:	09 f4       	brne	.+2      	; 0x2ea4 <xTaskCreateStatic+0x22>
    2ea2:	cc c0       	rjmp	.+408    	; 0x303c <xTaskCreateStatic+0x1ba>
    2ea4:	e1 14       	cp	r14, r1
    2ea6:	f1 04       	cpc	r15, r1
    2ea8:	09 f4       	brne	.+2      	; 0x2eac <xTaskCreateStatic+0x2a>
    2eaa:	cb c0       	rjmp	.+406    	; 0x3042 <xTaskCreateStatic+0x1c0>
    2eac:	e6 01       	movw	r28, r12
    2eae:	59 01       	movw	r10, r18
    2eb0:	3a 01       	movw	r6, r20
    2eb2:	4b 01       	movw	r8, r22
    2eb4:	6c 01       	movw	r12, r24
    2eb6:	f8 8e       	std	Y+24, r15	; 0x18
    2eb8:	ef 8a       	std	Y+23, r14	; 0x17
    2eba:	65 ea       	ldi	r22, 0xA5	; 165
    2ebc:	70 e0       	ldi	r23, 0x00	; 0
    2ebe:	c7 01       	movw	r24, r14
    2ec0:	d8 d7       	rcall	.+4016   	; 0x3e72 <memset>
    2ec2:	81 e0       	ldi	r24, 0x01	; 1
    2ec4:	68 1a       	sub	r6, r24
    2ec6:	71 08       	sbc	r7, r1
    2ec8:	ef 88       	ldd	r14, Y+23	; 0x17
    2eca:	f8 8c       	ldd	r15, Y+24	; 0x18
    2ecc:	e6 0c       	add	r14, r6
    2ece:	f7 1c       	adc	r15, r7
    2ed0:	d4 01       	movw	r26, r8
    2ed2:	8c 91       	ld	r24, X
    2ed4:	89 8f       	std	Y+25, r24	; 0x19
    2ed6:	8c 91       	ld	r24, X
    2ed8:	88 23       	and	r24, r24
    2eda:	a1 f0       	breq	.+40     	; 0x2f04 <xTaskCreateStatic+0x82>
    2edc:	ae 01       	movw	r20, r28
    2ede:	46 5e       	subi	r20, 0xE6	; 230
    2ee0:	5f 4f       	sbci	r21, 0xFF	; 255
    2ee2:	f4 01       	movw	r30, r8
    2ee4:	31 96       	adiw	r30, 0x01	; 1
    2ee6:	b8 e0       	ldi	r27, 0x08	; 8
    2ee8:	8b 0e       	add	r8, r27
    2eea:	91 1c       	adc	r9, r1
    2eec:	cf 01       	movw	r24, r30
    2eee:	21 91       	ld	r18, Z+
    2ef0:	da 01       	movw	r26, r20
    2ef2:	2d 93       	st	X+, r18
    2ef4:	ad 01       	movw	r20, r26
    2ef6:	dc 01       	movw	r26, r24
    2ef8:	8c 91       	ld	r24, X
    2efa:	88 23       	and	r24, r24
    2efc:	19 f0       	breq	.+6      	; 0x2f04 <xTaskCreateStatic+0x82>
    2efe:	e8 15       	cp	r30, r8
    2f00:	f9 05       	cpc	r31, r9
    2f02:	a1 f7       	brne	.-24     	; 0x2eec <xTaskCreateStatic+0x6a>
    2f04:	18 a2       	std	Y+32, r1	; 0x20
    2f06:	04 30       	cpi	r16, 0x04	; 4
    2f08:	08 f0       	brcs	.+2      	; 0x2f0c <xTaskCreateStatic+0x8a>
    2f0a:	03 e0       	ldi	r16, 0x03	; 3
    2f0c:	0e 8b       	std	Y+22, r16	; 0x16
    2f0e:	09 a3       	std	Y+33, r16	; 0x21
    2f10:	1a a2       	std	Y+34, r1	; 0x22
    2f12:	4e 01       	movw	r8, r28
    2f14:	b2 e0       	ldi	r27, 0x02	; 2
    2f16:	8b 0e       	add	r8, r27
    2f18:	91 1c       	adc	r9, r1
    2f1a:	c4 01       	movw	r24, r8
    2f1c:	16 da       	rcall	.-3028   	; 0x234a <vListInitialiseItem>
    2f1e:	ce 01       	movw	r24, r28
    2f20:	0c 96       	adiw	r24, 0x0c	; 12
    2f22:	13 da       	rcall	.-3034   	; 0x234a <vListInitialiseItem>
    2f24:	d9 87       	std	Y+9, r29	; 0x09
    2f26:	c8 87       	std	Y+8, r28	; 0x08
    2f28:	84 e0       	ldi	r24, 0x04	; 4
    2f2a:	90 e0       	ldi	r25, 0x00	; 0
    2f2c:	80 1b       	sub	r24, r16
    2f2e:	91 09       	sbc	r25, r1
    2f30:	9d 87       	std	Y+13, r25	; 0x0d
    2f32:	8c 87       	std	Y+12, r24	; 0x0c
    2f34:	db 8b       	std	Y+19, r29	; 0x13
    2f36:	ca 8b       	std	Y+18, r28	; 0x12
    2f38:	1b a2       	std	Y+35, r1	; 0x23
    2f3a:	1c a2       	std	Y+36, r1	; 0x24
    2f3c:	1d a2       	std	Y+37, r1	; 0x25
    2f3e:	1e a2       	std	Y+38, r1	; 0x26
    2f40:	1f a2       	std	Y+39, r1	; 0x27
    2f42:	a5 01       	movw	r20, r10
    2f44:	b6 01       	movw	r22, r12
    2f46:	c7 01       	movw	r24, r14
    2f48:	7d da       	rcall	.-2822   	; 0x2444 <pxPortInitialiseStack>
    2f4a:	99 83       	std	Y+1, r25	; 0x01
    2f4c:	88 83       	st	Y, r24
    2f4e:	0f b6       	in	r0, 0x3f	; 63
    2f50:	f8 94       	cli
    2f52:	0f 92       	push	r0
    2f54:	80 91 5f 0c 	lds	r24, 0x0C5F	; 0x800c5f <uxCurrentNumberOfTasks>
    2f58:	8f 5f       	subi	r24, 0xFF	; 255
    2f5a:	80 93 5f 0c 	sts	0x0C5F, r24	; 0x800c5f <uxCurrentNumberOfTasks>
    2f5e:	80 91 9b 0c 	lds	r24, 0x0C9B	; 0x800c9b <pxCurrentTCB>
    2f62:	90 91 9c 0c 	lds	r25, 0x0C9C	; 0x800c9c <pxCurrentTCB+0x1>
    2f66:	89 2b       	or	r24, r25
    2f68:	69 f5       	brne	.+90     	; 0x2fc4 <xTaskCreateStatic+0x142>
    2f6a:	d0 93 9c 0c 	sts	0x0C9C, r29	; 0x800c9c <pxCurrentTCB+0x1>
    2f6e:	c0 93 9b 0c 	sts	0x0C9B, r28	; 0x800c9b <pxCurrentTCB>
    2f72:	80 91 5f 0c 	lds	r24, 0x0C5F	; 0x800c5f <uxCurrentNumberOfTasks>
    2f76:	81 30       	cpi	r24, 0x01	; 1
    2f78:	a9 f5       	brne	.+106    	; 0x2fe4 <xTaskCreateStatic+0x162>
    2f7a:	87 e7       	ldi	r24, 0x77	; 119
    2f7c:	9c e0       	ldi	r25, 0x0C	; 12
    2f7e:	d7 d9       	rcall	.-3154   	; 0x232e <vListInitialise>
    2f80:	80 e8       	ldi	r24, 0x80	; 128
    2f82:	9c e0       	ldi	r25, 0x0C	; 12
    2f84:	d4 d9       	rcall	.-3160   	; 0x232e <vListInitialise>
    2f86:	89 e8       	ldi	r24, 0x89	; 137
    2f88:	9c e0       	ldi	r25, 0x0C	; 12
    2f8a:	d1 d9       	rcall	.-3166   	; 0x232e <vListInitialise>
    2f8c:	82 e9       	ldi	r24, 0x92	; 146
    2f8e:	9c e0       	ldi	r25, 0x0C	; 12
    2f90:	ce d9       	rcall	.-3172   	; 0x232e <vListInitialise>
    2f92:	8b e4       	ldi	r24, 0x4B	; 75
    2f94:	9c e0       	ldi	r25, 0x0C	; 12
    2f96:	cb d9       	rcall	.-3178   	; 0x232e <vListInitialise>
    2f98:	82 e4       	ldi	r24, 0x42	; 66
    2f9a:	9c e0       	ldi	r25, 0x0C	; 12
    2f9c:	c8 d9       	rcall	.-3184   	; 0x232e <vListInitialise>
    2f9e:	8a e6       	ldi	r24, 0x6A	; 106
    2fa0:	9c e0       	ldi	r25, 0x0C	; 12
    2fa2:	c5 d9       	rcall	.-3190   	; 0x232e <vListInitialise>
    2fa4:	81 e6       	ldi	r24, 0x61	; 97
    2fa6:	9c e0       	ldi	r25, 0x0C	; 12
    2fa8:	c2 d9       	rcall	.-3196   	; 0x232e <vListInitialise>
    2faa:	8b e4       	ldi	r24, 0x4B	; 75
    2fac:	9c e0       	ldi	r25, 0x0C	; 12
    2fae:	90 93 76 0c 	sts	0x0C76, r25	; 0x800c76 <pxDelayedTaskList+0x1>
    2fb2:	80 93 75 0c 	sts	0x0C75, r24	; 0x800c75 <pxDelayedTaskList>
    2fb6:	82 e4       	ldi	r24, 0x42	; 66
    2fb8:	9c e0       	ldi	r25, 0x0C	; 12
    2fba:	90 93 74 0c 	sts	0x0C74, r25	; 0x800c74 <pxOverflowDelayedTaskList+0x1>
    2fbe:	80 93 73 0c 	sts	0x0C73, r24	; 0x800c73 <pxOverflowDelayedTaskList>
    2fc2:	10 c0       	rjmp	.+32     	; 0x2fe4 <xTaskCreateStatic+0x162>
    2fc4:	80 91 5b 0c 	lds	r24, 0x0C5B	; 0x800c5b <xSchedulerRunning>
    2fc8:	81 11       	cpse	r24, r1
    2fca:	0c c0       	rjmp	.+24     	; 0x2fe4 <xTaskCreateStatic+0x162>
    2fcc:	e0 91 9b 0c 	lds	r30, 0x0C9B	; 0x800c9b <pxCurrentTCB>
    2fd0:	f0 91 9c 0c 	lds	r31, 0x0C9C	; 0x800c9c <pxCurrentTCB+0x1>
    2fd4:	96 89       	ldd	r25, Z+22	; 0x16
    2fd6:	8e 89       	ldd	r24, Y+22	; 0x16
    2fd8:	89 17       	cp	r24, r25
    2fda:	20 f0       	brcs	.+8      	; 0x2fe4 <xTaskCreateStatic+0x162>
    2fdc:	d0 93 9c 0c 	sts	0x0C9C, r29	; 0x800c9c <pxCurrentTCB+0x1>
    2fe0:	c0 93 9b 0c 	sts	0x0C9B, r28	; 0x800c9b <pxCurrentTCB>
    2fe4:	80 91 57 0c 	lds	r24, 0x0C57	; 0x800c57 <uxTaskNumber>
    2fe8:	8f 5f       	subi	r24, 0xFF	; 255
    2fea:	80 93 57 0c 	sts	0x0C57, r24	; 0x800c57 <uxTaskNumber>
    2fee:	8e 89       	ldd	r24, Y+22	; 0x16
    2ff0:	90 91 5c 0c 	lds	r25, 0x0C5C	; 0x800c5c <uxTopReadyPriority>
    2ff4:	98 17       	cp	r25, r24
    2ff6:	10 f4       	brcc	.+4      	; 0x2ffc <xTaskCreateStatic+0x17a>
    2ff8:	80 93 5c 0c 	sts	0x0C5C, r24	; 0x800c5c <uxTopReadyPriority>
    2ffc:	90 e0       	ldi	r25, 0x00	; 0
    2ffe:	9c 01       	movw	r18, r24
    3000:	22 0f       	add	r18, r18
    3002:	33 1f       	adc	r19, r19
    3004:	22 0f       	add	r18, r18
    3006:	33 1f       	adc	r19, r19
    3008:	22 0f       	add	r18, r18
    300a:	33 1f       	adc	r19, r19
    300c:	82 0f       	add	r24, r18
    300e:	93 1f       	adc	r25, r19
    3010:	b4 01       	movw	r22, r8
    3012:	89 58       	subi	r24, 0x89	; 137
    3014:	93 4f       	sbci	r25, 0xF3	; 243
    3016:	9d d9       	rcall	.-3270   	; 0x2352 <vListInsertEnd>
    3018:	0f 90       	pop	r0
    301a:	0f be       	out	0x3f, r0	; 63
    301c:	80 91 5b 0c 	lds	r24, 0x0C5B	; 0x800c5b <xSchedulerRunning>
    3020:	88 23       	and	r24, r24
    3022:	91 f0       	breq	.+36     	; 0x3048 <xTaskCreateStatic+0x1c6>
    3024:	e0 91 9b 0c 	lds	r30, 0x0C9B	; 0x800c9b <pxCurrentTCB>
    3028:	f0 91 9c 0c 	lds	r31, 0x0C9C	; 0x800c9c <pxCurrentTCB+0x1>
    302c:	96 89       	ldd	r25, Z+22	; 0x16
    302e:	8e 89       	ldd	r24, Y+22	; 0x16
    3030:	98 17       	cp	r25, r24
    3032:	68 f4       	brcc	.+26     	; 0x304e <xTaskCreateStatic+0x1cc>
    3034:	b5 da       	rcall	.-2710   	; 0x25a0 <vPortYield>
    3036:	8c 2f       	mov	r24, r28
    3038:	9d 2f       	mov	r25, r29
    303a:	0b c0       	rjmp	.+22     	; 0x3052 <xTaskCreateStatic+0x1d0>
    303c:	80 e0       	ldi	r24, 0x00	; 0
    303e:	90 e0       	ldi	r25, 0x00	; 0
    3040:	08 c0       	rjmp	.+16     	; 0x3052 <xTaskCreateStatic+0x1d0>
    3042:	80 e0       	ldi	r24, 0x00	; 0
    3044:	90 e0       	ldi	r25, 0x00	; 0
    3046:	05 c0       	rjmp	.+10     	; 0x3052 <xTaskCreateStatic+0x1d0>
    3048:	8c 2f       	mov	r24, r28
    304a:	9d 2f       	mov	r25, r29
    304c:	02 c0       	rjmp	.+4      	; 0x3052 <xTaskCreateStatic+0x1d0>
    304e:	8c 2f       	mov	r24, r28
    3050:	9d 2f       	mov	r25, r29
    3052:	df 91       	pop	r29
    3054:	cf 91       	pop	r28
    3056:	0f 91       	pop	r16
    3058:	ff 90       	pop	r15
    305a:	ef 90       	pop	r14
    305c:	df 90       	pop	r13
    305e:	cf 90       	pop	r12
    3060:	bf 90       	pop	r11
    3062:	af 90       	pop	r10
    3064:	9f 90       	pop	r9
    3066:	8f 90       	pop	r8
    3068:	7f 90       	pop	r7
    306a:	6f 90       	pop	r6
    306c:	08 95       	ret

0000306e <vTaskStartScheduler>:
    306e:	cf 92       	push	r12
    3070:	df 92       	push	r13
    3072:	ef 92       	push	r14
    3074:	ff 92       	push	r15
    3076:	0f 93       	push	r16
    3078:	cf 93       	push	r28
    307a:	df 93       	push	r29
    307c:	00 d0       	rcall	.+0      	; 0x307e <vTaskStartScheduler+0x10>
    307e:	00 d0       	rcall	.+0      	; 0x3080 <vTaskStartScheduler+0x12>
    3080:	cd b7       	in	r28, 0x3d	; 61
    3082:	de b7       	in	r29, 0x3e	; 62
    3084:	1e 82       	std	Y+6, r1	; 0x06
    3086:	1d 82       	std	Y+5, r1	; 0x05
    3088:	1c 82       	std	Y+4, r1	; 0x04
    308a:	1b 82       	std	Y+3, r1	; 0x03
    308c:	ae 01       	movw	r20, r28
    308e:	4f 5f       	subi	r20, 0xFF	; 255
    3090:	5f 4f       	sbci	r21, 0xFF	; 255
    3092:	be 01       	movw	r22, r28
    3094:	6d 5f       	subi	r22, 0xFD	; 253
    3096:	7f 4f       	sbci	r23, 0xFF	; 255
    3098:	ce 01       	movw	r24, r28
    309a:	05 96       	adiw	r24, 0x05	; 5
    309c:	28 d9       	rcall	.-3504   	; 0x22ee <vApplicationGetIdleTaskMemory>
    309e:	cd 80       	ldd	r12, Y+5	; 0x05
    30a0:	de 80       	ldd	r13, Y+6	; 0x06
    30a2:	eb 80       	ldd	r14, Y+3	; 0x03
    30a4:	fc 80       	ldd	r15, Y+4	; 0x04
    30a6:	49 81       	ldd	r20, Y+1	; 0x01
    30a8:	5a 81       	ldd	r21, Y+2	; 0x02
    30aa:	00 e0       	ldi	r16, 0x00	; 0
    30ac:	20 e0       	ldi	r18, 0x00	; 0
    30ae:	30 e0       	ldi	r19, 0x00	; 0
    30b0:	65 e6       	ldi	r22, 0x65	; 101
    30b2:	72 e0       	ldi	r23, 0x02	; 2
    30b4:	82 e7       	ldi	r24, 0x72	; 114
    30b6:	90 e0       	ldi	r25, 0x00	; 0
    30b8:	e4 de       	rcall	.-568    	; 0x2e82 <xTaskCreateStatic>
    30ba:	89 2b       	or	r24, r25
    30bc:	91 f0       	breq	.+36     	; 0x30e2 <vTaskStartScheduler+0x74>
    30be:	1a d4       	rcall	.+2100   	; 0x38f4 <xTimerCreateTimerTask>
    30c0:	81 30       	cpi	r24, 0x01	; 1
    30c2:	79 f4       	brne	.+30     	; 0x30e2 <vTaskStartScheduler+0x74>
    30c4:	f8 94       	cli
    30c6:	8f ef       	ldi	r24, 0xFF	; 255
    30c8:	9f ef       	ldi	r25, 0xFF	; 255
    30ca:	90 93 56 0c 	sts	0x0C56, r25	; 0x800c56 <xNextTaskUnblockTime+0x1>
    30ce:	80 93 55 0c 	sts	0x0C55, r24	; 0x800c55 <xNextTaskUnblockTime>
    30d2:	81 e0       	ldi	r24, 0x01	; 1
    30d4:	80 93 5b 0c 	sts	0x0C5B, r24	; 0x800c5b <xSchedulerRunning>
    30d8:	10 92 5e 0c 	sts	0x0C5E, r1	; 0x800c5e <xTickCount+0x1>
    30dc:	10 92 5d 0c 	sts	0x0C5D, r1	; 0x800c5d <xTickCount>
    30e0:	23 da       	rcall	.-3002   	; 0x2528 <xPortStartScheduler>
    30e2:	26 96       	adiw	r28, 0x06	; 6
    30e4:	0f b6       	in	r0, 0x3f	; 63
    30e6:	f8 94       	cli
    30e8:	de bf       	out	0x3e, r29	; 62
    30ea:	0f be       	out	0x3f, r0	; 63
    30ec:	cd bf       	out	0x3d, r28	; 61
    30ee:	df 91       	pop	r29
    30f0:	cf 91       	pop	r28
    30f2:	0f 91       	pop	r16
    30f4:	ff 90       	pop	r15
    30f6:	ef 90       	pop	r14
    30f8:	df 90       	pop	r13
    30fa:	cf 90       	pop	r12
    30fc:	08 95       	ret

000030fe <vTaskSuspendAll>:
    30fe:	80 91 54 0c 	lds	r24, 0x0C54	; 0x800c54 <uxSchedulerSuspended>
    3102:	8f 5f       	subi	r24, 0xFF	; 255
    3104:	80 93 54 0c 	sts	0x0C54, r24	; 0x800c54 <uxSchedulerSuspended>
    3108:	08 95       	ret

0000310a <xTaskGetTickCount>:
    310a:	0f b6       	in	r0, 0x3f	; 63
    310c:	f8 94       	cli
    310e:	0f 92       	push	r0
    3110:	80 91 5d 0c 	lds	r24, 0x0C5D	; 0x800c5d <xTickCount>
    3114:	90 91 5e 0c 	lds	r25, 0x0C5E	; 0x800c5e <xTickCount+0x1>
    3118:	0f 90       	pop	r0
    311a:	0f be       	out	0x3f, r0	; 63
    311c:	08 95       	ret

0000311e <xTaskIncrementTick>:
    311e:	cf 92       	push	r12
    3120:	df 92       	push	r13
    3122:	ef 92       	push	r14
    3124:	ff 92       	push	r15
    3126:	0f 93       	push	r16
    3128:	1f 93       	push	r17
    312a:	cf 93       	push	r28
    312c:	df 93       	push	r29
    312e:	80 91 54 0c 	lds	r24, 0x0C54	; 0x800c54 <uxSchedulerSuspended>
    3132:	81 11       	cpse	r24, r1
    3134:	95 c0       	rjmp	.+298    	; 0x3260 <xTaskIncrementTick+0x142>
    3136:	e0 90 5d 0c 	lds	r14, 0x0C5D	; 0x800c5d <xTickCount>
    313a:	f0 90 5e 0c 	lds	r15, 0x0C5E	; 0x800c5e <xTickCount+0x1>
    313e:	8f ef       	ldi	r24, 0xFF	; 255
    3140:	e8 1a       	sub	r14, r24
    3142:	f8 0a       	sbc	r15, r24
    3144:	f0 92 5e 0c 	sts	0x0C5E, r15	; 0x800c5e <xTickCount+0x1>
    3148:	e0 92 5d 0c 	sts	0x0C5D, r14	; 0x800c5d <xTickCount>
    314c:	e1 14       	cp	r14, r1
    314e:	f1 04       	cpc	r15, r1
    3150:	b1 f4       	brne	.+44     	; 0x317e <xTaskIncrementTick+0x60>
    3152:	80 91 75 0c 	lds	r24, 0x0C75	; 0x800c75 <pxDelayedTaskList>
    3156:	90 91 76 0c 	lds	r25, 0x0C76	; 0x800c76 <pxDelayedTaskList+0x1>
    315a:	20 91 73 0c 	lds	r18, 0x0C73	; 0x800c73 <pxOverflowDelayedTaskList>
    315e:	30 91 74 0c 	lds	r19, 0x0C74	; 0x800c74 <pxOverflowDelayedTaskList+0x1>
    3162:	30 93 76 0c 	sts	0x0C76, r19	; 0x800c76 <pxDelayedTaskList+0x1>
    3166:	20 93 75 0c 	sts	0x0C75, r18	; 0x800c75 <pxDelayedTaskList>
    316a:	90 93 74 0c 	sts	0x0C74, r25	; 0x800c74 <pxOverflowDelayedTaskList+0x1>
    316e:	80 93 73 0c 	sts	0x0C73, r24	; 0x800c73 <pxOverflowDelayedTaskList>
    3172:	80 91 58 0c 	lds	r24, 0x0C58	; 0x800c58 <xNumOfOverflows>
    3176:	8f 5f       	subi	r24, 0xFF	; 255
    3178:	80 93 58 0c 	sts	0x0C58, r24	; 0x800c58 <xNumOfOverflows>
    317c:	22 de       	rcall	.-956    	; 0x2dc2 <prvResetNextTaskUnblockTime>
    317e:	80 91 55 0c 	lds	r24, 0x0C55	; 0x800c55 <xNextTaskUnblockTime>
    3182:	90 91 56 0c 	lds	r25, 0x0C56	; 0x800c56 <xNextTaskUnblockTime+0x1>
    3186:	e8 16       	cp	r14, r24
    3188:	f9 06       	cpc	r15, r25
    318a:	10 f4       	brcc	.+4      	; 0x3190 <xTaskIncrementTick+0x72>
    318c:	d1 2c       	mov	r13, r1
    318e:	50 c0       	rjmp	.+160    	; 0x3230 <xTaskIncrementTick+0x112>
    3190:	d1 2c       	mov	r13, r1
    3192:	cc 24       	eor	r12, r12
    3194:	c3 94       	inc	r12
    3196:	e0 91 75 0c 	lds	r30, 0x0C75	; 0x800c75 <pxDelayedTaskList>
    319a:	f0 91 76 0c 	lds	r31, 0x0C76	; 0x800c76 <pxDelayedTaskList+0x1>
    319e:	80 81       	ld	r24, Z
    31a0:	81 11       	cpse	r24, r1
    31a2:	07 c0       	rjmp	.+14     	; 0x31b2 <xTaskIncrementTick+0x94>
    31a4:	8f ef       	ldi	r24, 0xFF	; 255
    31a6:	9f ef       	ldi	r25, 0xFF	; 255
    31a8:	90 93 56 0c 	sts	0x0C56, r25	; 0x800c56 <xNextTaskUnblockTime+0x1>
    31ac:	80 93 55 0c 	sts	0x0C55, r24	; 0x800c55 <xNextTaskUnblockTime>
    31b0:	3f c0       	rjmp	.+126    	; 0x3230 <xTaskIncrementTick+0x112>
    31b2:	e0 91 75 0c 	lds	r30, 0x0C75	; 0x800c75 <pxDelayedTaskList>
    31b6:	f0 91 76 0c 	lds	r31, 0x0C76	; 0x800c76 <pxDelayedTaskList+0x1>
    31ba:	05 80       	ldd	r0, Z+5	; 0x05
    31bc:	f6 81       	ldd	r31, Z+6	; 0x06
    31be:	e0 2d       	mov	r30, r0
    31c0:	c6 81       	ldd	r28, Z+6	; 0x06
    31c2:	d7 81       	ldd	r29, Z+7	; 0x07
    31c4:	8a 81       	ldd	r24, Y+2	; 0x02
    31c6:	9b 81       	ldd	r25, Y+3	; 0x03
    31c8:	e8 16       	cp	r14, r24
    31ca:	f9 06       	cpc	r15, r25
    31cc:	28 f4       	brcc	.+10     	; 0x31d8 <xTaskIncrementTick+0xba>
    31ce:	90 93 56 0c 	sts	0x0C56, r25	; 0x800c56 <xNextTaskUnblockTime+0x1>
    31d2:	80 93 55 0c 	sts	0x0C55, r24	; 0x800c55 <xNextTaskUnblockTime>
    31d6:	2c c0       	rjmp	.+88     	; 0x3230 <xTaskIncrementTick+0x112>
    31d8:	8e 01       	movw	r16, r28
    31da:	0e 5f       	subi	r16, 0xFE	; 254
    31dc:	1f 4f       	sbci	r17, 0xFF	; 255
    31de:	c8 01       	movw	r24, r16
    31e0:	0a d9       	rcall	.-3564   	; 0x23f6 <uxListRemove>
    31e2:	8c 89       	ldd	r24, Y+20	; 0x14
    31e4:	9d 89       	ldd	r25, Y+21	; 0x15
    31e6:	89 2b       	or	r24, r25
    31e8:	19 f0       	breq	.+6      	; 0x31f0 <xTaskIncrementTick+0xd2>
    31ea:	ce 01       	movw	r24, r28
    31ec:	0c 96       	adiw	r24, 0x0c	; 12
    31ee:	03 d9       	rcall	.-3578   	; 0x23f6 <uxListRemove>
    31f0:	8e 89       	ldd	r24, Y+22	; 0x16
    31f2:	90 91 5c 0c 	lds	r25, 0x0C5C	; 0x800c5c <uxTopReadyPriority>
    31f6:	98 17       	cp	r25, r24
    31f8:	10 f4       	brcc	.+4      	; 0x31fe <xTaskIncrementTick+0xe0>
    31fa:	80 93 5c 0c 	sts	0x0C5C, r24	; 0x800c5c <uxTopReadyPriority>
    31fe:	90 e0       	ldi	r25, 0x00	; 0
    3200:	9c 01       	movw	r18, r24
    3202:	22 0f       	add	r18, r18
    3204:	33 1f       	adc	r19, r19
    3206:	22 0f       	add	r18, r18
    3208:	33 1f       	adc	r19, r19
    320a:	22 0f       	add	r18, r18
    320c:	33 1f       	adc	r19, r19
    320e:	82 0f       	add	r24, r18
    3210:	93 1f       	adc	r25, r19
    3212:	b8 01       	movw	r22, r16
    3214:	89 58       	subi	r24, 0x89	; 137
    3216:	93 4f       	sbci	r25, 0xF3	; 243
    3218:	9c d8       	rcall	.-3784   	; 0x2352 <vListInsertEnd>
    321a:	e0 91 9b 0c 	lds	r30, 0x0C9B	; 0x800c9b <pxCurrentTCB>
    321e:	f0 91 9c 0c 	lds	r31, 0x0C9C	; 0x800c9c <pxCurrentTCB+0x1>
    3222:	9e 89       	ldd	r25, Y+22	; 0x16
    3224:	86 89       	ldd	r24, Z+22	; 0x16
    3226:	98 17       	cp	r25, r24
    3228:	08 f4       	brcc	.+2      	; 0x322c <xTaskIncrementTick+0x10e>
    322a:	b5 cf       	rjmp	.-150    	; 0x3196 <xTaskIncrementTick+0x78>
    322c:	dc 2c       	mov	r13, r12
    322e:	b3 cf       	rjmp	.-154    	; 0x3196 <xTaskIncrementTick+0x78>
    3230:	e0 91 9b 0c 	lds	r30, 0x0C9B	; 0x800c9b <pxCurrentTCB>
    3234:	f0 91 9c 0c 	lds	r31, 0x0C9C	; 0x800c9c <pxCurrentTCB+0x1>
    3238:	86 89       	ldd	r24, Z+22	; 0x16
    323a:	90 e0       	ldi	r25, 0x00	; 0
    323c:	fc 01       	movw	r30, r24
    323e:	ee 0f       	add	r30, r30
    3240:	ff 1f       	adc	r31, r31
    3242:	ee 0f       	add	r30, r30
    3244:	ff 1f       	adc	r31, r31
    3246:	ee 0f       	add	r30, r30
    3248:	ff 1f       	adc	r31, r31
    324a:	8e 0f       	add	r24, r30
    324c:	9f 1f       	adc	r25, r31
    324e:	fc 01       	movw	r30, r24
    3250:	e9 58       	subi	r30, 0x89	; 137
    3252:	f3 4f       	sbci	r31, 0xF3	; 243
    3254:	80 81       	ld	r24, Z
    3256:	82 30       	cpi	r24, 0x02	; 2
    3258:	48 f0       	brcs	.+18     	; 0x326c <xTaskIncrementTick+0x14e>
    325a:	dd 24       	eor	r13, r13
    325c:	d3 94       	inc	r13
    325e:	06 c0       	rjmp	.+12     	; 0x326c <xTaskIncrementTick+0x14e>
    3260:	80 91 5a 0c 	lds	r24, 0x0C5A	; 0x800c5a <uxPendedTicks>
    3264:	8f 5f       	subi	r24, 0xFF	; 255
    3266:	80 93 5a 0c 	sts	0x0C5A, r24	; 0x800c5a <uxPendedTicks>
    326a:	d1 2c       	mov	r13, r1
    326c:	80 91 59 0c 	lds	r24, 0x0C59	; 0x800c59 <xYieldPending>
    3270:	88 23       	and	r24, r24
    3272:	11 f0       	breq	.+4      	; 0x3278 <xTaskIncrementTick+0x15a>
    3274:	dd 24       	eor	r13, r13
    3276:	d3 94       	inc	r13
    3278:	8d 2d       	mov	r24, r13
    327a:	df 91       	pop	r29
    327c:	cf 91       	pop	r28
    327e:	1f 91       	pop	r17
    3280:	0f 91       	pop	r16
    3282:	ff 90       	pop	r15
    3284:	ef 90       	pop	r14
    3286:	df 90       	pop	r13
    3288:	cf 90       	pop	r12
    328a:	08 95       	ret

0000328c <xTaskResumeAll>:
    328c:	df 92       	push	r13
    328e:	ef 92       	push	r14
    3290:	ff 92       	push	r15
    3292:	0f 93       	push	r16
    3294:	1f 93       	push	r17
    3296:	cf 93       	push	r28
    3298:	df 93       	push	r29
    329a:	0f b6       	in	r0, 0x3f	; 63
    329c:	f8 94       	cli
    329e:	0f 92       	push	r0
    32a0:	80 91 54 0c 	lds	r24, 0x0C54	; 0x800c54 <uxSchedulerSuspended>
    32a4:	81 50       	subi	r24, 0x01	; 1
    32a6:	80 93 54 0c 	sts	0x0C54, r24	; 0x800c54 <uxSchedulerSuspended>
    32aa:	80 91 54 0c 	lds	r24, 0x0C54	; 0x800c54 <uxSchedulerSuspended>
    32ae:	81 11       	cpse	r24, r1
    32b0:	59 c0       	rjmp	.+178    	; 0x3364 <xTaskResumeAll+0xd8>
    32b2:	80 91 5f 0c 	lds	r24, 0x0C5F	; 0x800c5f <uxCurrentNumberOfTasks>
    32b6:	81 11       	cpse	r24, r1
    32b8:	30 c0       	rjmp	.+96     	; 0x331a <xTaskResumeAll+0x8e>
    32ba:	57 c0       	rjmp	.+174    	; 0x336a <xTaskResumeAll+0xde>
    32bc:	d7 01       	movw	r26, r14
    32be:	15 96       	adiw	r26, 0x05	; 5
    32c0:	ed 91       	ld	r30, X+
    32c2:	fc 91       	ld	r31, X
    32c4:	16 97       	sbiw	r26, 0x06	; 6
    32c6:	c6 81       	ldd	r28, Z+6	; 0x06
    32c8:	d7 81       	ldd	r29, Z+7	; 0x07
    32ca:	ce 01       	movw	r24, r28
    32cc:	0c 96       	adiw	r24, 0x0c	; 12
    32ce:	93 d8       	rcall	.-3802   	; 0x23f6 <uxListRemove>
    32d0:	8e 01       	movw	r16, r28
    32d2:	0e 5f       	subi	r16, 0xFE	; 254
    32d4:	1f 4f       	sbci	r17, 0xFF	; 255
    32d6:	c8 01       	movw	r24, r16
    32d8:	8e d8       	rcall	.-3812   	; 0x23f6 <uxListRemove>
    32da:	8e 89       	ldd	r24, Y+22	; 0x16
    32dc:	90 91 5c 0c 	lds	r25, 0x0C5C	; 0x800c5c <uxTopReadyPriority>
    32e0:	98 17       	cp	r25, r24
    32e2:	10 f4       	brcc	.+4      	; 0x32e8 <xTaskResumeAll+0x5c>
    32e4:	80 93 5c 0c 	sts	0x0C5C, r24	; 0x800c5c <uxTopReadyPriority>
    32e8:	90 e0       	ldi	r25, 0x00	; 0
    32ea:	9c 01       	movw	r18, r24
    32ec:	22 0f       	add	r18, r18
    32ee:	33 1f       	adc	r19, r19
    32f0:	22 0f       	add	r18, r18
    32f2:	33 1f       	adc	r19, r19
    32f4:	22 0f       	add	r18, r18
    32f6:	33 1f       	adc	r19, r19
    32f8:	82 0f       	add	r24, r18
    32fa:	93 1f       	adc	r25, r19
    32fc:	b8 01       	movw	r22, r16
    32fe:	89 58       	subi	r24, 0x89	; 137
    3300:	93 4f       	sbci	r25, 0xF3	; 243
    3302:	27 d8       	rcall	.-4018   	; 0x2352 <vListInsertEnd>
    3304:	e0 91 9b 0c 	lds	r30, 0x0C9B	; 0x800c9b <pxCurrentTCB>
    3308:	f0 91 9c 0c 	lds	r31, 0x0C9C	; 0x800c9c <pxCurrentTCB+0x1>
    330c:	9e 89       	ldd	r25, Y+22	; 0x16
    330e:	86 89       	ldd	r24, Z+22	; 0x16
    3310:	98 17       	cp	r25, r24
    3312:	68 f0       	brcs	.+26     	; 0x332e <xTaskResumeAll+0xa2>
    3314:	d0 92 59 0c 	sts	0x0C59, r13	; 0x800c59 <xYieldPending>
    3318:	0a c0       	rjmp	.+20     	; 0x332e <xTaskResumeAll+0xa2>
    331a:	c0 e0       	ldi	r28, 0x00	; 0
    331c:	d0 e0       	ldi	r29, 0x00	; 0
    331e:	0f 2e       	mov	r0, r31
    3320:	fa e6       	ldi	r31, 0x6A	; 106
    3322:	ef 2e       	mov	r14, r31
    3324:	fc e0       	ldi	r31, 0x0C	; 12
    3326:	ff 2e       	mov	r15, r31
    3328:	f0 2d       	mov	r31, r0
    332a:	dd 24       	eor	r13, r13
    332c:	d3 94       	inc	r13
    332e:	f7 01       	movw	r30, r14
    3330:	80 81       	ld	r24, Z
    3332:	81 11       	cpse	r24, r1
    3334:	c3 cf       	rjmp	.-122    	; 0x32bc <xTaskResumeAll+0x30>
    3336:	cd 2b       	or	r28, r29
    3338:	09 f0       	breq	.+2      	; 0x333c <xTaskResumeAll+0xb0>
    333a:	43 dd       	rcall	.-1402   	; 0x2dc2 <prvResetNextTaskUnblockTime>
    333c:	c0 91 5a 0c 	lds	r28, 0x0C5A	; 0x800c5a <uxPendedTicks>
    3340:	cc 23       	and	r28, r28
    3342:	49 f0       	breq	.+18     	; 0x3356 <xTaskResumeAll+0xca>
    3344:	d1 e0       	ldi	r29, 0x01	; 1
    3346:	eb de       	rcall	.-554    	; 0x311e <xTaskIncrementTick>
    3348:	81 11       	cpse	r24, r1
    334a:	d0 93 59 0c 	sts	0x0C59, r29	; 0x800c59 <xYieldPending>
    334e:	c1 50       	subi	r28, 0x01	; 1
    3350:	d1 f7       	brne	.-12     	; 0x3346 <xTaskResumeAll+0xba>
    3352:	10 92 5a 0c 	sts	0x0C5A, r1	; 0x800c5a <uxPendedTicks>
    3356:	80 91 59 0c 	lds	r24, 0x0C59	; 0x800c59 <xYieldPending>
    335a:	88 23       	and	r24, r24
    335c:	29 f0       	breq	.+10     	; 0x3368 <xTaskResumeAll+0xdc>
    335e:	20 d9       	rcall	.-3520   	; 0x25a0 <vPortYield>
    3360:	81 e0       	ldi	r24, 0x01	; 1
    3362:	03 c0       	rjmp	.+6      	; 0x336a <xTaskResumeAll+0xde>
    3364:	80 e0       	ldi	r24, 0x00	; 0
    3366:	01 c0       	rjmp	.+2      	; 0x336a <xTaskResumeAll+0xde>
    3368:	80 e0       	ldi	r24, 0x00	; 0
    336a:	0f 90       	pop	r0
    336c:	0f be       	out	0x3f, r0	; 63
    336e:	df 91       	pop	r29
    3370:	cf 91       	pop	r28
    3372:	1f 91       	pop	r17
    3374:	0f 91       	pop	r16
    3376:	ff 90       	pop	r15
    3378:	ef 90       	pop	r14
    337a:	df 90       	pop	r13
    337c:	08 95       	ret

0000337e <vTaskDelay>:
    337e:	cf 93       	push	r28
    3380:	df 93       	push	r29
    3382:	ec 01       	movw	r28, r24
    3384:	89 2b       	or	r24, r25
    3386:	39 f0       	breq	.+14     	; 0x3396 <vTaskDelay+0x18>
    3388:	ba de       	rcall	.-652    	; 0x30fe <vTaskSuspendAll>
    338a:	60 e0       	ldi	r22, 0x00	; 0
    338c:	ce 01       	movw	r24, r28
    338e:	38 dd       	rcall	.-1424   	; 0x2e00 <prvAddCurrentTaskToDelayedList>
    3390:	7d df       	rcall	.-262    	; 0x328c <xTaskResumeAll>
    3392:	81 11       	cpse	r24, r1
    3394:	01 c0       	rjmp	.+2      	; 0x3398 <vTaskDelay+0x1a>
    3396:	04 d9       	rcall	.-3576   	; 0x25a0 <vPortYield>
    3398:	df 91       	pop	r29
    339a:	cf 91       	pop	r28
    339c:	08 95       	ret

0000339e <vTaskSwitchContext>:
    339e:	80 91 54 0c 	lds	r24, 0x0C54	; 0x800c54 <uxSchedulerSuspended>
    33a2:	88 23       	and	r24, r24
    33a4:	21 f0       	breq	.+8      	; 0x33ae <vTaskSwitchContext+0x10>
    33a6:	81 e0       	ldi	r24, 0x01	; 1
    33a8:	80 93 59 0c 	sts	0x0C59, r24	; 0x800c59 <xYieldPending>
    33ac:	08 95       	ret
    33ae:	10 92 59 0c 	sts	0x0C59, r1	; 0x800c59 <xYieldPending>
    33b2:	a0 91 9b 0c 	lds	r26, 0x0C9B	; 0x800c9b <pxCurrentTCB>
    33b6:	b0 91 9c 0c 	lds	r27, 0x0C9C	; 0x800c9c <pxCurrentTCB+0x1>
    33ba:	e0 91 9b 0c 	lds	r30, 0x0C9B	; 0x800c9b <pxCurrentTCB>
    33be:	f0 91 9c 0c 	lds	r31, 0x0C9C	; 0x800c9c <pxCurrentTCB+0x1>
    33c2:	2d 91       	ld	r18, X+
    33c4:	3c 91       	ld	r19, X
    33c6:	87 89       	ldd	r24, Z+23	; 0x17
    33c8:	90 8d       	ldd	r25, Z+24	; 0x18
    33ca:	82 17       	cp	r24, r18
    33cc:	93 07       	cpc	r25, r19
    33ce:	60 f0       	brcs	.+24     	; 0x33e8 <vTaskSwitchContext+0x4a>
    33d0:	60 91 9b 0c 	lds	r22, 0x0C9B	; 0x800c9b <pxCurrentTCB>
    33d4:	70 91 9c 0c 	lds	r23, 0x0C9C	; 0x800c9c <pxCurrentTCB+0x1>
    33d8:	80 91 9b 0c 	lds	r24, 0x0C9B	; 0x800c9b <pxCurrentTCB>
    33dc:	90 91 9c 0c 	lds	r25, 0x0C9C	; 0x800c9c <pxCurrentTCB+0x1>
    33e0:	67 5e       	subi	r22, 0xE7	; 231
    33e2:	7f 4f       	sbci	r23, 0xFF	; 255
    33e4:	0e 94 6a 11 	call	0x22d4	; 0x22d4 <vApplicationStackOverflowHook>
    33e8:	20 91 5c 0c 	lds	r18, 0x0C5C	; 0x800c5c <uxTopReadyPriority>
    33ec:	82 2f       	mov	r24, r18
    33ee:	90 e0       	ldi	r25, 0x00	; 0
    33f0:	fc 01       	movw	r30, r24
    33f2:	ee 0f       	add	r30, r30
    33f4:	ff 1f       	adc	r31, r31
    33f6:	ee 0f       	add	r30, r30
    33f8:	ff 1f       	adc	r31, r31
    33fa:	ee 0f       	add	r30, r30
    33fc:	ff 1f       	adc	r31, r31
    33fe:	e8 0f       	add	r30, r24
    3400:	f9 1f       	adc	r31, r25
    3402:	e9 58       	subi	r30, 0x89	; 137
    3404:	f3 4f       	sbci	r31, 0xF3	; 243
    3406:	30 81       	ld	r19, Z
    3408:	31 11       	cpse	r19, r1
    340a:	11 c0       	rjmp	.+34     	; 0x342e <vTaskSwitchContext+0x90>
    340c:	21 50       	subi	r18, 0x01	; 1
    340e:	82 2f       	mov	r24, r18
    3410:	90 e0       	ldi	r25, 0x00	; 0
    3412:	fc 01       	movw	r30, r24
    3414:	ee 0f       	add	r30, r30
    3416:	ff 1f       	adc	r31, r31
    3418:	ee 0f       	add	r30, r30
    341a:	ff 1f       	adc	r31, r31
    341c:	ee 0f       	add	r30, r30
    341e:	ff 1f       	adc	r31, r31
    3420:	e8 0f       	add	r30, r24
    3422:	f9 1f       	adc	r31, r25
    3424:	e9 58       	subi	r30, 0x89	; 137
    3426:	f3 4f       	sbci	r31, 0xF3	; 243
    3428:	30 81       	ld	r19, Z
    342a:	33 23       	and	r19, r19
    342c:	79 f3       	breq	.-34     	; 0x340c <vTaskSwitchContext+0x6e>
    342e:	ac 01       	movw	r20, r24
    3430:	44 0f       	add	r20, r20
    3432:	55 1f       	adc	r21, r21
    3434:	44 0f       	add	r20, r20
    3436:	55 1f       	adc	r21, r21
    3438:	44 0f       	add	r20, r20
    343a:	55 1f       	adc	r21, r21
    343c:	48 0f       	add	r20, r24
    343e:	59 1f       	adc	r21, r25
    3440:	da 01       	movw	r26, r20
    3442:	a9 58       	subi	r26, 0x89	; 137
    3444:	b3 4f       	sbci	r27, 0xF3	; 243
    3446:	11 96       	adiw	r26, 0x01	; 1
    3448:	ed 91       	ld	r30, X+
    344a:	fc 91       	ld	r31, X
    344c:	12 97       	sbiw	r26, 0x02	; 2
    344e:	02 80       	ldd	r0, Z+2	; 0x02
    3450:	f3 81       	ldd	r31, Z+3	; 0x03
    3452:	e0 2d       	mov	r30, r0
    3454:	12 96       	adiw	r26, 0x02	; 2
    3456:	fc 93       	st	X, r31
    3458:	ee 93       	st	-X, r30
    345a:	11 97       	sbiw	r26, 0x01	; 1
    345c:	46 58       	subi	r20, 0x86	; 134
    345e:	53 4f       	sbci	r21, 0xF3	; 243
    3460:	e4 17       	cp	r30, r20
    3462:	f5 07       	cpc	r31, r21
    3464:	29 f4       	brne	.+10     	; 0x3470 <vTaskSwitchContext+0xd2>
    3466:	42 81       	ldd	r20, Z+2	; 0x02
    3468:	53 81       	ldd	r21, Z+3	; 0x03
    346a:	fd 01       	movw	r30, r26
    346c:	52 83       	std	Z+2, r21	; 0x02
    346e:	41 83       	std	Z+1, r20	; 0x01
    3470:	fc 01       	movw	r30, r24
    3472:	ee 0f       	add	r30, r30
    3474:	ff 1f       	adc	r31, r31
    3476:	ee 0f       	add	r30, r30
    3478:	ff 1f       	adc	r31, r31
    347a:	ee 0f       	add	r30, r30
    347c:	ff 1f       	adc	r31, r31
    347e:	8e 0f       	add	r24, r30
    3480:	9f 1f       	adc	r25, r31
    3482:	fc 01       	movw	r30, r24
    3484:	e9 58       	subi	r30, 0x89	; 137
    3486:	f3 4f       	sbci	r31, 0xF3	; 243
    3488:	01 80       	ldd	r0, Z+1	; 0x01
    348a:	f2 81       	ldd	r31, Z+2	; 0x02
    348c:	e0 2d       	mov	r30, r0
    348e:	86 81       	ldd	r24, Z+6	; 0x06
    3490:	97 81       	ldd	r25, Z+7	; 0x07
    3492:	90 93 9c 0c 	sts	0x0C9C, r25	; 0x800c9c <pxCurrentTCB+0x1>
    3496:	80 93 9b 0c 	sts	0x0C9B, r24	; 0x800c9b <pxCurrentTCB>
    349a:	20 93 5c 0c 	sts	0x0C5C, r18	; 0x800c5c <uxTopReadyPriority>
    349e:	08 95       	ret

000034a0 <vTaskPlaceOnEventList>:
    34a0:	cf 93       	push	r28
    34a2:	df 93       	push	r29
    34a4:	eb 01       	movw	r28, r22
    34a6:	60 91 9b 0c 	lds	r22, 0x0C9B	; 0x800c9b <pxCurrentTCB>
    34aa:	70 91 9c 0c 	lds	r23, 0x0C9C	; 0x800c9c <pxCurrentTCB+0x1>
    34ae:	64 5f       	subi	r22, 0xF4	; 244
    34b0:	7f 4f       	sbci	r23, 0xFF	; 255
    34b2:	0e 94 ca 11 	call	0x2394	; 0x2394 <vListInsert>
    34b6:	61 e0       	ldi	r22, 0x01	; 1
    34b8:	ce 01       	movw	r24, r28
    34ba:	a2 dc       	rcall	.-1724   	; 0x2e00 <prvAddCurrentTaskToDelayedList>
    34bc:	df 91       	pop	r29
    34be:	cf 91       	pop	r28
    34c0:	08 95       	ret

000034c2 <vTaskPlaceOnEventListRestricted>:
    34c2:	0f 93       	push	r16
    34c4:	1f 93       	push	r17
    34c6:	cf 93       	push	r28
    34c8:	8b 01       	movw	r16, r22
    34ca:	c4 2f       	mov	r28, r20
    34cc:	60 91 9b 0c 	lds	r22, 0x0C9B	; 0x800c9b <pxCurrentTCB>
    34d0:	70 91 9c 0c 	lds	r23, 0x0C9C	; 0x800c9c <pxCurrentTCB+0x1>
    34d4:	64 5f       	subi	r22, 0xF4	; 244
    34d6:	7f 4f       	sbci	r23, 0xFF	; 255
    34d8:	0e 94 a9 11 	call	0x2352	; 0x2352 <vListInsertEnd>
    34dc:	cc 23       	and	r28, r28
    34de:	11 f0       	breq	.+4      	; 0x34e4 <vTaskPlaceOnEventListRestricted+0x22>
    34e0:	0f ef       	ldi	r16, 0xFF	; 255
    34e2:	1f ef       	ldi	r17, 0xFF	; 255
    34e4:	6c 2f       	mov	r22, r28
    34e6:	c8 01       	movw	r24, r16
    34e8:	8b dc       	rcall	.-1770   	; 0x2e00 <prvAddCurrentTaskToDelayedList>
    34ea:	cf 91       	pop	r28
    34ec:	1f 91       	pop	r17
    34ee:	0f 91       	pop	r16
    34f0:	08 95       	ret

000034f2 <xTaskRemoveFromEventList>:
    34f2:	0f 93       	push	r16
    34f4:	1f 93       	push	r17
    34f6:	cf 93       	push	r28
    34f8:	df 93       	push	r29
    34fa:	dc 01       	movw	r26, r24
    34fc:	15 96       	adiw	r26, 0x05	; 5
    34fe:	ed 91       	ld	r30, X+
    3500:	fc 91       	ld	r31, X
    3502:	16 97       	sbiw	r26, 0x06	; 6
    3504:	c6 81       	ldd	r28, Z+6	; 0x06
    3506:	d7 81       	ldd	r29, Z+7	; 0x07
    3508:	8e 01       	movw	r16, r28
    350a:	04 5f       	subi	r16, 0xF4	; 244
    350c:	1f 4f       	sbci	r17, 0xFF	; 255
    350e:	c8 01       	movw	r24, r16
    3510:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <uxListRemove>
    3514:	80 91 54 0c 	lds	r24, 0x0C54	; 0x800c54 <uxSchedulerSuspended>
    3518:	81 11       	cpse	r24, r1
    351a:	1c c0       	rjmp	.+56     	; 0x3554 <xTaskRemoveFromEventList+0x62>
    351c:	0a 50       	subi	r16, 0x0A	; 10
    351e:	11 09       	sbc	r17, r1
    3520:	c8 01       	movw	r24, r16
    3522:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <uxListRemove>
    3526:	8e 89       	ldd	r24, Y+22	; 0x16
    3528:	90 91 5c 0c 	lds	r25, 0x0C5C	; 0x800c5c <uxTopReadyPriority>
    352c:	98 17       	cp	r25, r24
    352e:	10 f4       	brcc	.+4      	; 0x3534 <xTaskRemoveFromEventList+0x42>
    3530:	80 93 5c 0c 	sts	0x0C5C, r24	; 0x800c5c <uxTopReadyPriority>
    3534:	90 e0       	ldi	r25, 0x00	; 0
    3536:	9c 01       	movw	r18, r24
    3538:	22 0f       	add	r18, r18
    353a:	33 1f       	adc	r19, r19
    353c:	22 0f       	add	r18, r18
    353e:	33 1f       	adc	r19, r19
    3540:	22 0f       	add	r18, r18
    3542:	33 1f       	adc	r19, r19
    3544:	82 0f       	add	r24, r18
    3546:	93 1f       	adc	r25, r19
    3548:	b8 01       	movw	r22, r16
    354a:	89 58       	subi	r24, 0x89	; 137
    354c:	93 4f       	sbci	r25, 0xF3	; 243
    354e:	0e 94 a9 11 	call	0x2352	; 0x2352 <vListInsertEnd>
    3552:	05 c0       	rjmp	.+10     	; 0x355e <xTaskRemoveFromEventList+0x6c>
    3554:	b8 01       	movw	r22, r16
    3556:	8a e6       	ldi	r24, 0x6A	; 106
    3558:	9c e0       	ldi	r25, 0x0C	; 12
    355a:	0e 94 a9 11 	call	0x2352	; 0x2352 <vListInsertEnd>
    355e:	e0 91 9b 0c 	lds	r30, 0x0C9B	; 0x800c9b <pxCurrentTCB>
    3562:	f0 91 9c 0c 	lds	r31, 0x0C9C	; 0x800c9c <pxCurrentTCB+0x1>
    3566:	9e 89       	ldd	r25, Y+22	; 0x16
    3568:	86 89       	ldd	r24, Z+22	; 0x16
    356a:	89 17       	cp	r24, r25
    356c:	20 f4       	brcc	.+8      	; 0x3576 <xTaskRemoveFromEventList+0x84>
    356e:	81 e0       	ldi	r24, 0x01	; 1
    3570:	80 93 59 0c 	sts	0x0C59, r24	; 0x800c59 <xYieldPending>
    3574:	01 c0       	rjmp	.+2      	; 0x3578 <xTaskRemoveFromEventList+0x86>
    3576:	80 e0       	ldi	r24, 0x00	; 0
    3578:	df 91       	pop	r29
    357a:	cf 91       	pop	r28
    357c:	1f 91       	pop	r17
    357e:	0f 91       	pop	r16
    3580:	08 95       	ret

00003582 <vTaskInternalSetTimeOutState>:
    3582:	20 91 58 0c 	lds	r18, 0x0C58	; 0x800c58 <xNumOfOverflows>
    3586:	fc 01       	movw	r30, r24
    3588:	20 83       	st	Z, r18
    358a:	20 91 5d 0c 	lds	r18, 0x0C5D	; 0x800c5d <xTickCount>
    358e:	30 91 5e 0c 	lds	r19, 0x0C5E	; 0x800c5e <xTickCount+0x1>
    3592:	32 83       	std	Z+2, r19	; 0x02
    3594:	21 83       	std	Z+1, r18	; 0x01
    3596:	08 95       	ret

00003598 <xTaskCheckForTimeOut>:
    3598:	0f b6       	in	r0, 0x3f	; 63
    359a:	f8 94       	cli
    359c:	0f 92       	push	r0
    359e:	20 91 5d 0c 	lds	r18, 0x0C5D	; 0x800c5d <xTickCount>
    35a2:	30 91 5e 0c 	lds	r19, 0x0C5E	; 0x800c5e <xTickCount+0x1>
    35a6:	dc 01       	movw	r26, r24
    35a8:	11 96       	adiw	r26, 0x01	; 1
    35aa:	4d 91       	ld	r20, X+
    35ac:	5c 91       	ld	r21, X
    35ae:	12 97       	sbiw	r26, 0x02	; 2
    35b0:	e0 91 58 0c 	lds	r30, 0x0C58	; 0x800c58 <xNumOfOverflows>
    35b4:	fc 91       	ld	r31, X
    35b6:	fe 17       	cp	r31, r30
    35b8:	19 f0       	breq	.+6      	; 0x35c0 <xTaskCheckForTimeOut+0x28>
    35ba:	24 17       	cp	r18, r20
    35bc:	35 07       	cpc	r19, r21
    35be:	98 f4       	brcc	.+38     	; 0x35e6 <xTaskCheckForTimeOut+0x4e>
    35c0:	24 1b       	sub	r18, r20
    35c2:	35 0b       	sbc	r19, r21
    35c4:	fb 01       	movw	r30, r22
    35c6:	40 81       	ld	r20, Z
    35c8:	51 81       	ldd	r21, Z+1	; 0x01
    35ca:	24 17       	cp	r18, r20
    35cc:	35 07       	cpc	r19, r21
    35ce:	38 f4       	brcc	.+14     	; 0x35de <xTaskCheckForTimeOut+0x46>
    35d0:	42 1b       	sub	r20, r18
    35d2:	53 0b       	sbc	r21, r19
    35d4:	51 83       	std	Z+1, r21	; 0x01
    35d6:	40 83       	st	Z, r20
    35d8:	d4 df       	rcall	.-88     	; 0x3582 <vTaskInternalSetTimeOutState>
    35da:	80 e0       	ldi	r24, 0x00	; 0
    35dc:	05 c0       	rjmp	.+10     	; 0x35e8 <xTaskCheckForTimeOut+0x50>
    35de:	11 82       	std	Z+1, r1	; 0x01
    35e0:	10 82       	st	Z, r1
    35e2:	81 e0       	ldi	r24, 0x01	; 1
    35e4:	01 c0       	rjmp	.+2      	; 0x35e8 <xTaskCheckForTimeOut+0x50>
    35e6:	81 e0       	ldi	r24, 0x01	; 1
    35e8:	0f 90       	pop	r0
    35ea:	0f be       	out	0x3f, r0	; 63
    35ec:	08 95       	ret

000035ee <vTaskMissedYield>:
    35ee:	81 e0       	ldi	r24, 0x01	; 1
    35f0:	80 93 59 0c 	sts	0x0C59, r24	; 0x800c59 <xYieldPending>
    35f4:	08 95       	ret

000035f6 <xTaskGetSchedulerState>:
    35f6:	80 91 5b 0c 	lds	r24, 0x0C5B	; 0x800c5b <xSchedulerRunning>
    35fa:	88 23       	and	r24, r24
    35fc:	31 f0       	breq	.+12     	; 0x360a <xTaskGetSchedulerState+0x14>
    35fe:	80 91 54 0c 	lds	r24, 0x0C54	; 0x800c54 <uxSchedulerSuspended>
    3602:	88 23       	and	r24, r24
    3604:	21 f0       	breq	.+8      	; 0x360e <xTaskGetSchedulerState+0x18>
    3606:	80 e0       	ldi	r24, 0x00	; 0
    3608:	08 95       	ret
    360a:	81 e0       	ldi	r24, 0x01	; 1
    360c:	08 95       	ret
    360e:	82 e0       	ldi	r24, 0x02	; 2
    3610:	08 95       	ret

00003612 <xTaskPriorityInherit>:
    3612:	0f 93       	push	r16
    3614:	1f 93       	push	r17
    3616:	cf 93       	push	r28
    3618:	df 93       	push	r29
    361a:	fc 01       	movw	r30, r24
    361c:	89 2b       	or	r24, r25
    361e:	09 f4       	brne	.+2      	; 0x3622 <xTaskPriorityInherit+0x10>
    3620:	64 c0       	rjmp	.+200    	; 0x36ea <xTaskPriorityInherit+0xd8>
    3622:	26 89       	ldd	r18, Z+22	; 0x16
    3624:	a0 91 9b 0c 	lds	r26, 0x0C9B	; 0x800c9b <pxCurrentTCB>
    3628:	b0 91 9c 0c 	lds	r27, 0x0C9C	; 0x800c9c <pxCurrentTCB+0x1>
    362c:	56 96       	adiw	r26, 0x16	; 22
    362e:	8c 91       	ld	r24, X
    3630:	28 17       	cp	r18, r24
    3632:	08 f0       	brcs	.+2      	; 0x3636 <xTaskPriorityInherit+0x24>
    3634:	4e c0       	rjmp	.+156    	; 0x36d2 <xTaskPriorityInherit+0xc0>
    3636:	84 85       	ldd	r24, Z+12	; 0x0c
    3638:	95 85       	ldd	r25, Z+13	; 0x0d
    363a:	99 23       	and	r25, r25
    363c:	64 f0       	brlt	.+24     	; 0x3656 <xTaskPriorityInherit+0x44>
    363e:	a0 91 9b 0c 	lds	r26, 0x0C9B	; 0x800c9b <pxCurrentTCB>
    3642:	b0 91 9c 0c 	lds	r27, 0x0C9C	; 0x800c9c <pxCurrentTCB+0x1>
    3646:	56 96       	adiw	r26, 0x16	; 22
    3648:	3c 91       	ld	r19, X
    364a:	84 e0       	ldi	r24, 0x04	; 4
    364c:	90 e0       	ldi	r25, 0x00	; 0
    364e:	83 1b       	sub	r24, r19
    3650:	91 09       	sbc	r25, r1
    3652:	95 87       	std	Z+13, r25	; 0x0d
    3654:	84 87       	std	Z+12, r24	; 0x0c
    3656:	30 e0       	ldi	r19, 0x00	; 0
    3658:	c9 01       	movw	r24, r18
    365a:	88 0f       	add	r24, r24
    365c:	99 1f       	adc	r25, r25
    365e:	88 0f       	add	r24, r24
    3660:	99 1f       	adc	r25, r25
    3662:	88 0f       	add	r24, r24
    3664:	99 1f       	adc	r25, r25
    3666:	28 0f       	add	r18, r24
    3668:	39 1f       	adc	r19, r25
    366a:	29 58       	subi	r18, 0x89	; 137
    366c:	33 4f       	sbci	r19, 0xF3	; 243
    366e:	82 85       	ldd	r24, Z+10	; 0x0a
    3670:	93 85       	ldd	r25, Z+11	; 0x0b
    3672:	82 17       	cp	r24, r18
    3674:	93 07       	cpc	r25, r19
    3676:	21 f5       	brne	.+72     	; 0x36c0 <xTaskPriorityInherit+0xae>
    3678:	8f 01       	movw	r16, r30
    367a:	ef 01       	movw	r28, r30
    367c:	22 96       	adiw	r28, 0x02	; 2
    367e:	ce 01       	movw	r24, r28
    3680:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <uxListRemove>
    3684:	e0 91 9b 0c 	lds	r30, 0x0C9B	; 0x800c9b <pxCurrentTCB>
    3688:	f0 91 9c 0c 	lds	r31, 0x0C9C	; 0x800c9c <pxCurrentTCB+0x1>
    368c:	86 89       	ldd	r24, Z+22	; 0x16
    368e:	f8 01       	movw	r30, r16
    3690:	86 8b       	std	Z+22, r24	; 0x16
    3692:	90 91 5c 0c 	lds	r25, 0x0C5C	; 0x800c5c <uxTopReadyPriority>
    3696:	98 17       	cp	r25, r24
    3698:	10 f4       	brcc	.+4      	; 0x369e <xTaskPriorityInherit+0x8c>
    369a:	80 93 5c 0c 	sts	0x0C5C, r24	; 0x800c5c <uxTopReadyPriority>
    369e:	90 e0       	ldi	r25, 0x00	; 0
    36a0:	9c 01       	movw	r18, r24
    36a2:	22 0f       	add	r18, r18
    36a4:	33 1f       	adc	r19, r19
    36a6:	22 0f       	add	r18, r18
    36a8:	33 1f       	adc	r19, r19
    36aa:	22 0f       	add	r18, r18
    36ac:	33 1f       	adc	r19, r19
    36ae:	82 0f       	add	r24, r18
    36b0:	93 1f       	adc	r25, r19
    36b2:	be 01       	movw	r22, r28
    36b4:	89 58       	subi	r24, 0x89	; 137
    36b6:	93 4f       	sbci	r25, 0xF3	; 243
    36b8:	0e 94 a9 11 	call	0x2352	; 0x2352 <vListInsertEnd>
    36bc:	81 e0       	ldi	r24, 0x01	; 1
    36be:	16 c0       	rjmp	.+44     	; 0x36ec <xTaskPriorityInherit+0xda>
    36c0:	a0 91 9b 0c 	lds	r26, 0x0C9B	; 0x800c9b <pxCurrentTCB>
    36c4:	b0 91 9c 0c 	lds	r27, 0x0C9C	; 0x800c9c <pxCurrentTCB+0x1>
    36c8:	56 96       	adiw	r26, 0x16	; 22
    36ca:	8c 91       	ld	r24, X
    36cc:	86 8b       	std	Z+22, r24	; 0x16
    36ce:	81 e0       	ldi	r24, 0x01	; 1
    36d0:	0d c0       	rjmp	.+26     	; 0x36ec <xTaskPriorityInherit+0xda>
    36d2:	a0 91 9b 0c 	lds	r26, 0x0C9B	; 0x800c9b <pxCurrentTCB>
    36d6:	b0 91 9c 0c 	lds	r27, 0x0C9C	; 0x800c9c <pxCurrentTCB+0x1>
    36da:	81 e0       	ldi	r24, 0x01	; 1
    36dc:	21 a1       	ldd	r18, Z+33	; 0x21
    36de:	56 96       	adiw	r26, 0x16	; 22
    36e0:	9c 91       	ld	r25, X
    36e2:	29 17       	cp	r18, r25
    36e4:	18 f0       	brcs	.+6      	; 0x36ec <xTaskPriorityInherit+0xda>
    36e6:	80 e0       	ldi	r24, 0x00	; 0
    36e8:	01 c0       	rjmp	.+2      	; 0x36ec <xTaskPriorityInherit+0xda>
    36ea:	80 e0       	ldi	r24, 0x00	; 0
    36ec:	df 91       	pop	r29
    36ee:	cf 91       	pop	r28
    36f0:	1f 91       	pop	r17
    36f2:	0f 91       	pop	r16
    36f4:	08 95       	ret

000036f6 <xTaskPriorityDisinherit>:
    36f6:	0f 93       	push	r16
    36f8:	1f 93       	push	r17
    36fa:	cf 93       	push	r28
    36fc:	df 93       	push	r29
    36fe:	fc 01       	movw	r30, r24
    3700:	89 2b       	or	r24, r25
    3702:	79 f1       	breq	.+94     	; 0x3762 <xTaskPriorityDisinherit+0x6c>
    3704:	82 a1       	ldd	r24, Z+34	; 0x22
    3706:	81 50       	subi	r24, 0x01	; 1
    3708:	82 a3       	std	Z+34, r24	; 0x22
    370a:	26 89       	ldd	r18, Z+22	; 0x16
    370c:	91 a1       	ldd	r25, Z+33	; 0x21
    370e:	29 17       	cp	r18, r25
    3710:	51 f1       	breq	.+84     	; 0x3766 <xTaskPriorityDisinherit+0x70>
    3712:	81 11       	cpse	r24, r1
    3714:	2a c0       	rjmp	.+84     	; 0x376a <xTaskPriorityDisinherit+0x74>
    3716:	ef 01       	movw	r28, r30
    3718:	8f 01       	movw	r16, r30
    371a:	0e 5f       	subi	r16, 0xFE	; 254
    371c:	1f 4f       	sbci	r17, 0xFF	; 255
    371e:	c8 01       	movw	r24, r16
    3720:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <uxListRemove>
    3724:	89 a1       	ldd	r24, Y+33	; 0x21
    3726:	8e 8b       	std	Y+22, r24	; 0x16
    3728:	24 e0       	ldi	r18, 0x04	; 4
    372a:	30 e0       	ldi	r19, 0x00	; 0
    372c:	28 1b       	sub	r18, r24
    372e:	31 09       	sbc	r19, r1
    3730:	3d 87       	std	Y+13, r19	; 0x0d
    3732:	2c 87       	std	Y+12, r18	; 0x0c
    3734:	90 91 5c 0c 	lds	r25, 0x0C5C	; 0x800c5c <uxTopReadyPriority>
    3738:	98 17       	cp	r25, r24
    373a:	10 f4       	brcc	.+4      	; 0x3740 <xTaskPriorityDisinherit+0x4a>
    373c:	80 93 5c 0c 	sts	0x0C5C, r24	; 0x800c5c <uxTopReadyPriority>
    3740:	90 e0       	ldi	r25, 0x00	; 0
    3742:	9c 01       	movw	r18, r24
    3744:	22 0f       	add	r18, r18
    3746:	33 1f       	adc	r19, r19
    3748:	22 0f       	add	r18, r18
    374a:	33 1f       	adc	r19, r19
    374c:	22 0f       	add	r18, r18
    374e:	33 1f       	adc	r19, r19
    3750:	82 0f       	add	r24, r18
    3752:	93 1f       	adc	r25, r19
    3754:	b8 01       	movw	r22, r16
    3756:	89 58       	subi	r24, 0x89	; 137
    3758:	93 4f       	sbci	r25, 0xF3	; 243
    375a:	0e 94 a9 11 	call	0x2352	; 0x2352 <vListInsertEnd>
    375e:	81 e0       	ldi	r24, 0x01	; 1
    3760:	05 c0       	rjmp	.+10     	; 0x376c <xTaskPriorityDisinherit+0x76>
    3762:	80 e0       	ldi	r24, 0x00	; 0
    3764:	03 c0       	rjmp	.+6      	; 0x376c <xTaskPriorityDisinherit+0x76>
    3766:	80 e0       	ldi	r24, 0x00	; 0
    3768:	01 c0       	rjmp	.+2      	; 0x376c <xTaskPriorityDisinherit+0x76>
    376a:	80 e0       	ldi	r24, 0x00	; 0
    376c:	df 91       	pop	r29
    376e:	cf 91       	pop	r28
    3770:	1f 91       	pop	r17
    3772:	0f 91       	pop	r16
    3774:	08 95       	ret

00003776 <vTaskPriorityDisinheritAfterTimeout>:
    3776:	0f 93       	push	r16
    3778:	1f 93       	push	r17
    377a:	cf 93       	push	r28
    377c:	df 93       	push	r29
    377e:	fc 01       	movw	r30, r24
    3780:	89 2b       	or	r24, r25
    3782:	09 f4       	brne	.+2      	; 0x3786 <vTaskPriorityDisinheritAfterTimeout+0x10>
    3784:	43 c0       	rjmp	.+134    	; 0x380c <vTaskPriorityDisinheritAfterTimeout+0x96>
    3786:	91 a1       	ldd	r25, Z+33	; 0x21
    3788:	96 17       	cp	r25, r22
    378a:	08 f4       	brcc	.+2      	; 0x378e <vTaskPriorityDisinheritAfterTimeout+0x18>
    378c:	96 2f       	mov	r25, r22
    378e:	86 89       	ldd	r24, Z+22	; 0x16
    3790:	89 17       	cp	r24, r25
    3792:	e1 f1       	breq	.+120    	; 0x380c <vTaskPriorityDisinheritAfterTimeout+0x96>
    3794:	22 a1       	ldd	r18, Z+34	; 0x22
    3796:	21 30       	cpi	r18, 0x01	; 1
    3798:	c9 f5       	brne	.+114    	; 0x380c <vTaskPriorityDisinheritAfterTimeout+0x96>
    379a:	96 8b       	std	Z+22, r25	; 0x16
    379c:	24 85       	ldd	r18, Z+12	; 0x0c
    379e:	35 85       	ldd	r19, Z+13	; 0x0d
    37a0:	33 23       	and	r19, r19
    37a2:	34 f0       	brlt	.+12     	; 0x37b0 <vTaskPriorityDisinheritAfterTimeout+0x3a>
    37a4:	24 e0       	ldi	r18, 0x04	; 4
    37a6:	30 e0       	ldi	r19, 0x00	; 0
    37a8:	29 1b       	sub	r18, r25
    37aa:	31 09       	sbc	r19, r1
    37ac:	35 87       	std	Z+13, r19	; 0x0d
    37ae:	24 87       	std	Z+12, r18	; 0x0c
    37b0:	90 e0       	ldi	r25, 0x00	; 0
    37b2:	9c 01       	movw	r18, r24
    37b4:	22 0f       	add	r18, r18
    37b6:	33 1f       	adc	r19, r19
    37b8:	22 0f       	add	r18, r18
    37ba:	33 1f       	adc	r19, r19
    37bc:	22 0f       	add	r18, r18
    37be:	33 1f       	adc	r19, r19
    37c0:	82 0f       	add	r24, r18
    37c2:	93 1f       	adc	r25, r19
    37c4:	89 58       	subi	r24, 0x89	; 137
    37c6:	93 4f       	sbci	r25, 0xF3	; 243
    37c8:	22 85       	ldd	r18, Z+10	; 0x0a
    37ca:	33 85       	ldd	r19, Z+11	; 0x0b
    37cc:	28 17       	cp	r18, r24
    37ce:	39 07       	cpc	r19, r25
    37d0:	e9 f4       	brne	.+58     	; 0x380c <vTaskPriorityDisinheritAfterTimeout+0x96>
    37d2:	ef 01       	movw	r28, r30
    37d4:	8f 01       	movw	r16, r30
    37d6:	0e 5f       	subi	r16, 0xFE	; 254
    37d8:	1f 4f       	sbci	r17, 0xFF	; 255
    37da:	c8 01       	movw	r24, r16
    37dc:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <uxListRemove>
    37e0:	8e 89       	ldd	r24, Y+22	; 0x16
    37e2:	90 91 5c 0c 	lds	r25, 0x0C5C	; 0x800c5c <uxTopReadyPriority>
    37e6:	98 17       	cp	r25, r24
    37e8:	10 f4       	brcc	.+4      	; 0x37ee <vTaskPriorityDisinheritAfterTimeout+0x78>
    37ea:	80 93 5c 0c 	sts	0x0C5C, r24	; 0x800c5c <uxTopReadyPriority>
    37ee:	90 e0       	ldi	r25, 0x00	; 0
    37f0:	9c 01       	movw	r18, r24
    37f2:	22 0f       	add	r18, r18
    37f4:	33 1f       	adc	r19, r19
    37f6:	22 0f       	add	r18, r18
    37f8:	33 1f       	adc	r19, r19
    37fa:	22 0f       	add	r18, r18
    37fc:	33 1f       	adc	r19, r19
    37fe:	82 0f       	add	r24, r18
    3800:	93 1f       	adc	r25, r19
    3802:	b8 01       	movw	r22, r16
    3804:	89 58       	subi	r24, 0x89	; 137
    3806:	93 4f       	sbci	r25, 0xF3	; 243
    3808:	0e 94 a9 11 	call	0x2352	; 0x2352 <vListInsertEnd>
    380c:	df 91       	pop	r29
    380e:	cf 91       	pop	r28
    3810:	1f 91       	pop	r17
    3812:	0f 91       	pop	r16
    3814:	08 95       	ret

00003816 <pvTaskIncrementMutexHeldCount>:

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
        then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
    3816:	80 91 9b 0c 	lds	r24, 0x0C9B	; 0x800c9b <pxCurrentTCB>
    381a:	90 91 9c 0c 	lds	r25, 0x0C9C	; 0x800c9c <pxCurrentTCB+0x1>
    381e:	89 2b       	or	r24, r25
    3820:	39 f0       	breq	.+14     	; 0x3830 <pvTaskIncrementMutexHeldCount+0x1a>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
    3822:	e0 91 9b 0c 	lds	r30, 0x0C9B	; 0x800c9b <pxCurrentTCB>
    3826:	f0 91 9c 0c 	lds	r31, 0x0C9C	; 0x800c9c <pxCurrentTCB+0x1>
    382a:	82 a1       	ldd	r24, Z+34	; 0x22
    382c:	8f 5f       	subi	r24, 0xFF	; 255
    382e:	82 a3       	std	Z+34, r24	; 0x22
        }

        return pxCurrentTCB;
    3830:	80 91 9b 0c 	lds	r24, 0x0C9B	; 0x800c9b <pxCurrentTCB>
    3834:	90 91 9c 0c 	lds	r25, 0x0C9C	; 0x800c9c <pxCurrentTCB+0x1>
    }
    3838:	08 95       	ret

0000383a <prvInsertTimerInActiveList>:
            }
            #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
        }

        return pxNewTimer;
    }
    383a:	fc 01       	movw	r30, r24
    383c:	73 83       	std	Z+3, r23	; 0x03
    383e:	62 83       	std	Z+2, r22	; 0x02
    3840:	91 87       	std	Z+9, r25	; 0x09
    3842:	80 87       	std	Z+8, r24	; 0x08
    3844:	46 17       	cp	r20, r22
    3846:	57 07       	cpc	r21, r23
    3848:	90 f0       	brcs	.+36     	; 0x386e <prvInsertTimerInActiveList+0x34>
    384a:	42 1b       	sub	r20, r18
    384c:	53 0b       	sbc	r21, r19
    384e:	84 85       	ldd	r24, Z+12	; 0x0c
    3850:	95 85       	ldd	r25, Z+13	; 0x0d
    3852:	48 17       	cp	r20, r24
    3854:	59 07       	cpc	r21, r25
    3856:	e0 f4       	brcc	.+56     	; 0x3890 <prvInsertTimerInActiveList+0x56>
    3858:	bf 01       	movw	r22, r30
    385a:	6e 5f       	subi	r22, 0xFE	; 254
    385c:	7f 4f       	sbci	r23, 0xFF	; 255
    385e:	80 91 06 0d 	lds	r24, 0x0D06	; 0x800d06 <pxOverflowTimerList>
    3862:	90 91 07 0d 	lds	r25, 0x0D07	; 0x800d07 <pxOverflowTimerList+0x1>
    3866:	0e 94 ca 11 	call	0x2394	; 0x2394 <vListInsert>
    386a:	80 e0       	ldi	r24, 0x00	; 0
    386c:	08 95       	ret
    386e:	42 17       	cp	r20, r18
    3870:	53 07       	cpc	r21, r19
    3872:	18 f4       	brcc	.+6      	; 0x387a <prvInsertTimerInActiveList+0x40>
    3874:	62 17       	cp	r22, r18
    3876:	73 07       	cpc	r23, r19
    3878:	68 f4       	brcc	.+26     	; 0x3894 <prvInsertTimerInActiveList+0x5a>
    387a:	bf 01       	movw	r22, r30
    387c:	6e 5f       	subi	r22, 0xFE	; 254
    387e:	7f 4f       	sbci	r23, 0xFF	; 255
    3880:	80 91 08 0d 	lds	r24, 0x0D08	; 0x800d08 <pxCurrentTimerList>
    3884:	90 91 09 0d 	lds	r25, 0x0D09	; 0x800d09 <pxCurrentTimerList+0x1>
    3888:	0e 94 ca 11 	call	0x2394	; 0x2394 <vListInsert>
    388c:	80 e0       	ldi	r24, 0x00	; 0
    388e:	08 95       	ret
    3890:	81 e0       	ldi	r24, 0x01	; 1
    3892:	08 95       	ret
    3894:	81 e0       	ldi	r24, 0x01	; 1
    3896:	08 95       	ret

00003898 <prvCheckForValidListAndQueue>:
    3898:	0f 93       	push	r16
    389a:	0f b6       	in	r0, 0x3f	; 63
    389c:	f8 94       	cli
    389e:	0f 92       	push	r0
    38a0:	80 91 04 0d 	lds	r24, 0x0D04	; 0x800d04 <xTimerQueue>
    38a4:	90 91 05 0d 	lds	r25, 0x0D05	; 0x800d05 <xTimerQueue+0x1>
    38a8:	89 2b       	or	r24, r25
    38aa:	01 f5       	brne	.+64     	; 0x38ec <prvCheckForValidListAndQueue+0x54>
    38ac:	87 ef       	ldi	r24, 0xF7	; 247
    38ae:	9c e0       	ldi	r25, 0x0C	; 12
    38b0:	0e 94 97 11 	call	0x232e	; 0x232e <vListInitialise>
    38b4:	8e ee       	ldi	r24, 0xEE	; 238
    38b6:	9c e0       	ldi	r25, 0x0C	; 12
    38b8:	0e 94 97 11 	call	0x232e	; 0x232e <vListInitialise>
    38bc:	87 ef       	ldi	r24, 0xF7	; 247
    38be:	9c e0       	ldi	r25, 0x0C	; 12
    38c0:	90 93 09 0d 	sts	0x0D09, r25	; 0x800d09 <pxCurrentTimerList+0x1>
    38c4:	80 93 08 0d 	sts	0x0D08, r24	; 0x800d08 <pxCurrentTimerList>
    38c8:	8e ee       	ldi	r24, 0xEE	; 238
    38ca:	9c e0       	ldi	r25, 0x0C	; 12
    38cc:	90 93 07 0d 	sts	0x0D07, r25	; 0x800d07 <pxOverflowTimerList+0x1>
    38d0:	80 93 06 0d 	sts	0x0D06, r24	; 0x800d06 <pxOverflowTimerList>
    38d4:	00 e0       	ldi	r16, 0x00	; 0
    38d6:	2d e9       	ldi	r18, 0x9D	; 157
    38d8:	3c e0       	ldi	r19, 0x0C	; 12
    38da:	4c eb       	ldi	r20, 0xBC	; 188
    38dc:	5c e0       	ldi	r21, 0x0C	; 12
    38de:	65 e0       	ldi	r22, 0x05	; 5
    38e0:	8a e0       	ldi	r24, 0x0A	; 10
    38e2:	31 d8       	rcall	.-3998   	; 0x2946 <xQueueGenericCreateStatic>
    38e4:	90 93 05 0d 	sts	0x0D05, r25	; 0x800d05 <xTimerQueue+0x1>
    38e8:	80 93 04 0d 	sts	0x0D04, r24	; 0x800d04 <xTimerQueue>
    38ec:	0f 90       	pop	r0
    38ee:	0f be       	out	0x3f, r0	; 63
    38f0:	0f 91       	pop	r16
    38f2:	08 95       	ret

000038f4 <xTimerCreateTimerTask>:
    38f4:	cf 92       	push	r12
    38f6:	df 92       	push	r13
    38f8:	ef 92       	push	r14
    38fa:	ff 92       	push	r15
    38fc:	0f 93       	push	r16
    38fe:	cf 93       	push	r28
    3900:	df 93       	push	r29
    3902:	00 d0       	rcall	.+0      	; 0x3904 <xTimerCreateTimerTask+0x10>
    3904:	00 d0       	rcall	.+0      	; 0x3906 <xTimerCreateTimerTask+0x12>
    3906:	cd b7       	in	r28, 0x3d	; 61
    3908:	de b7       	in	r29, 0x3e	; 62
    390a:	c6 df       	rcall	.-116    	; 0x3898 <prvCheckForValidListAndQueue>
    390c:	80 91 04 0d 	lds	r24, 0x0D04	; 0x800d04 <xTimerQueue>
    3910:	90 91 05 0d 	lds	r25, 0x0D05	; 0x800d05 <xTimerQueue+0x1>
    3914:	89 2b       	or	r24, r25
    3916:	31 f1       	breq	.+76     	; 0x3964 <xTimerCreateTimerTask+0x70>
    3918:	1e 82       	std	Y+6, r1	; 0x06
    391a:	1d 82       	std	Y+5, r1	; 0x05
    391c:	1c 82       	std	Y+4, r1	; 0x04
    391e:	1b 82       	std	Y+3, r1	; 0x03
    3920:	ae 01       	movw	r20, r28
    3922:	4f 5f       	subi	r20, 0xFF	; 255
    3924:	5f 4f       	sbci	r21, 0xFF	; 255
    3926:	be 01       	movw	r22, r28
    3928:	6d 5f       	subi	r22, 0xFD	; 253
    392a:	7f 4f       	sbci	r23, 0xFF	; 255
    392c:	ce 01       	movw	r24, r28
    392e:	05 96       	adiw	r24, 0x05	; 5
    3930:	0e 94 87 11 	call	0x230e	; 0x230e <vApplicationGetTimerTaskMemory>
    3934:	cd 80       	ldd	r12, Y+5	; 0x05
    3936:	de 80       	ldd	r13, Y+6	; 0x06
    3938:	eb 80       	ldd	r14, Y+3	; 0x03
    393a:	fc 80       	ldd	r15, Y+4	; 0x04
    393c:	49 81       	ldd	r20, Y+1	; 0x01
    393e:	5a 81       	ldd	r21, Y+2	; 0x02
    3940:	03 e0       	ldi	r16, 0x03	; 3
    3942:	20 e0       	ldi	r18, 0x00	; 0
    3944:	30 e0       	ldi	r19, 0x00	; 0
    3946:	6a e6       	ldi	r22, 0x6A	; 106
    3948:	72 e0       	ldi	r23, 0x02	; 2
    394a:	85 e7       	ldi	r24, 0x75	; 117
    394c:	9d e1       	ldi	r25, 0x1D	; 29
    394e:	99 da       	rcall	.-2766   	; 0x2e82 <xTaskCreateStatic>
    3950:	9c 01       	movw	r18, r24
    3952:	90 93 03 0d 	sts	0x0D03, r25	; 0x800d03 <xTimerTaskHandle+0x1>
    3956:	80 93 02 0d 	sts	0x0D02, r24	; 0x800d02 <xTimerTaskHandle>
    395a:	81 e0       	ldi	r24, 0x01	; 1
    395c:	23 2b       	or	r18, r19
    395e:	19 f4       	brne	.+6      	; 0x3966 <xTimerCreateTimerTask+0x72>
    3960:	80 e0       	ldi	r24, 0x00	; 0
    3962:	01 c0       	rjmp	.+2      	; 0x3966 <xTimerCreateTimerTask+0x72>
    3964:	80 e0       	ldi	r24, 0x00	; 0
    3966:	26 96       	adiw	r28, 0x06	; 6
    3968:	0f b6       	in	r0, 0x3f	; 63
    396a:	f8 94       	cli
    396c:	de bf       	out	0x3e, r29	; 62
    396e:	0f be       	out	0x3f, r0	; 63
    3970:	cd bf       	out	0x3d, r28	; 61
    3972:	df 91       	pop	r29
    3974:	cf 91       	pop	r28
    3976:	0f 91       	pop	r16
    3978:	ff 90       	pop	r15
    397a:	ef 90       	pop	r14
    397c:	df 90       	pop	r13
    397e:	cf 90       	pop	r12
    3980:	08 95       	ret

00003982 <xTimerGenericCommand>:
    }
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
    3982:	0f 93       	push	r16
    3984:	1f 93       	push	r17
    3986:	cf 93       	push	r28
    3988:	df 93       	push	r29
    398a:	00 d0       	rcall	.+0      	; 0x398c <xTimerGenericCommand+0xa>
    398c:	1f 92       	push	r1
    398e:	1f 92       	push	r1
    3990:	cd b7       	in	r28, 0x3d	; 61
    3992:	de b7       	in	r29, 0x3e	; 62

    configASSERT( xTimer );

    /* Send a message to the timer service task to perform a particular action
    on a particular timer definition. */
    if( xTimerQueue != NULL )
    3994:	e0 91 04 0d 	lds	r30, 0x0D04	; 0x800d04 <xTimerQueue>
    3998:	f0 91 05 0d 	lds	r31, 0x0D05	; 0x800d05 <xTimerQueue+0x1>
    399c:	30 97       	sbiw	r30, 0x00	; 0
    399e:	61 f1       	breq	.+88     	; 0x39f8 <xTimerGenericCommand+0x76>
    39a0:	d9 01       	movw	r26, r18
    {
        /* Send a command to the timer service task to start the xTimer timer. */
        xMessage.xMessageID = xCommandID;
    39a2:	69 83       	std	Y+1, r22	; 0x01
        xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    39a4:	5b 83       	std	Y+3, r21	; 0x03
    39a6:	4a 83       	std	Y+2, r20	; 0x02
        xMessage.u.xTimerParameters.pxTimer = xTimer;
    39a8:	9d 83       	std	Y+5, r25	; 0x05
    39aa:	8c 83       	std	Y+4, r24	; 0x04

        if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    39ac:	66 30       	cpi	r22, 0x06	; 6
    39ae:	e4 f4       	brge	.+56     	; 0x39e8 <xTimerGenericCommand+0x66>
        {
            if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    39b0:	22 de       	rcall	.-956    	; 0x35f6 <xTaskGetSchedulerState>
    39b2:	82 30       	cpi	r24, 0x02	; 2
    39b4:	61 f4       	brne	.+24     	; 0x39ce <xTimerGenericCommand+0x4c>
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    39b6:	20 e0       	ldi	r18, 0x00	; 0
    39b8:	a8 01       	movw	r20, r16
    39ba:	be 01       	movw	r22, r28
    39bc:	6f 5f       	subi	r22, 0xFF	; 255
    39be:	7f 4f       	sbci	r23, 0xFF	; 255
    39c0:	80 91 04 0d 	lds	r24, 0x0D04	; 0x800d04 <xTimerQueue>
    39c4:	90 91 05 0d 	lds	r25, 0x0D05	; 0x800d05 <xTimerQueue+0x1>
    39c8:	0e 94 b8 14 	call	0x2970	; 0x2970 <xQueueGenericSend>
    39cc:	16 c0       	rjmp	.+44     	; 0x39fa <xTimerGenericCommand+0x78>
            }
            else
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    39ce:	20 e0       	ldi	r18, 0x00	; 0
    39d0:	40 e0       	ldi	r20, 0x00	; 0
    39d2:	50 e0       	ldi	r21, 0x00	; 0
    39d4:	be 01       	movw	r22, r28
    39d6:	6f 5f       	subi	r22, 0xFF	; 255
    39d8:	7f 4f       	sbci	r23, 0xFF	; 255
    39da:	80 91 04 0d 	lds	r24, 0x0D04	; 0x800d04 <xTimerQueue>
    39de:	90 91 05 0d 	lds	r25, 0x0D05	; 0x800d05 <xTimerQueue+0x1>
    39e2:	0e 94 b8 14 	call	0x2970	; 0x2970 <xQueueGenericSend>
    39e6:	09 c0       	rjmp	.+18     	; 0x39fa <xTimerGenericCommand+0x78>
            }
        }
        else
        {
            xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    39e8:	20 e0       	ldi	r18, 0x00	; 0
    39ea:	ad 01       	movw	r20, r26
    39ec:	be 01       	movw	r22, r28
    39ee:	6f 5f       	subi	r22, 0xFF	; 255
    39f0:	7f 4f       	sbci	r23, 0xFF	; 255
    39f2:	cf 01       	movw	r24, r30
    39f4:	4f d8       	rcall	.-3938   	; 0x2a94 <xQueueGenericSendFromISR>
    39f6:	01 c0       	rjmp	.+2      	; 0x39fa <xTimerGenericCommand+0x78>
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
    39f8:	80 e0       	ldi	r24, 0x00	; 0
    {
        mtCOVERAGE_TEST_MARKER();
    }

    return xReturn;
}
    39fa:	0f 90       	pop	r0
    39fc:	0f 90       	pop	r0
    39fe:	0f 90       	pop	r0
    3a00:	0f 90       	pop	r0
    3a02:	0f 90       	pop	r0
    3a04:	df 91       	pop	r29
    3a06:	cf 91       	pop	r28
    3a08:	1f 91       	pop	r17
    3a0a:	0f 91       	pop	r16
    3a0c:	08 95       	ret

00003a0e <prvSampleTimeNow>:
    return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
    3a0e:	af 92       	push	r10
    3a10:	bf 92       	push	r11
    3a12:	cf 92       	push	r12
    3a14:	df 92       	push	r13
    3a16:	ef 92       	push	r14
    3a18:	ff 92       	push	r15
    3a1a:	0f 93       	push	r16
    3a1c:	1f 93       	push	r17
    3a1e:	cf 93       	push	r28
    3a20:	df 93       	push	r29
    3a22:	6c 01       	movw	r12, r24
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

    xTimeNow = xTaskGetTickCount();
    3a24:	72 db       	rcall	.-2332   	; 0x310a <xTaskGetTickCount>
    3a26:	7c 01       	movw	r14, r24

    if( xTimeNow < xLastTime )
    3a28:	80 91 00 0d 	lds	r24, 0x0D00	; 0x800d00 <xLastTime.2391>
    3a2c:	90 91 01 0d 	lds	r25, 0x0D01	; 0x800d01 <xLastTime.2391+0x1>
    3a30:	e8 16       	cp	r14, r24
    3a32:	f9 06       	cpc	r15, r25
    3a34:	08 f0       	brcs	.+2      	; 0x3a38 <prvSampleTimeNow+0x2a>
    3a36:	47 c0       	rjmp	.+142    	; 0x3ac6 <prvSampleTimeNow+0xb8>
    3a38:	2f c0       	rjmp	.+94     	; 0x3a98 <prvSampleTimeNow+0x8a>
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    {
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    3a3a:	05 80       	ldd	r0, Z+5	; 0x05
    3a3c:	f6 81       	ldd	r31, Z+6	; 0x06
    3a3e:	e0 2d       	mov	r30, r0
    3a40:	a0 80       	ld	r10, Z
    3a42:	b1 80       	ldd	r11, Z+1	; 0x01

        /* Remove the timer from the list. */
        pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    3a44:	c6 81       	ldd	r28, Z+6	; 0x06
    3a46:	d7 81       	ldd	r29, Z+7	; 0x07
        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    3a48:	8e 01       	movw	r16, r28
    3a4a:	0e 5f       	subi	r16, 0xFE	; 254
    3a4c:	1f 4f       	sbci	r17, 0xFF	; 255
    3a4e:	c8 01       	movw	r24, r16
    3a50:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* Execute its callback, then send a command to restart the timer if
        it is an auto-reload timer.  It cannot be restarted here as the lists
        have not yet been switched. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    3a54:	e9 89       	ldd	r30, Y+17	; 0x11
    3a56:	fa 89       	ldd	r31, Y+18	; 0x12
    3a58:	ce 01       	movw	r24, r28
    3a5a:	19 95       	eicall

        if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    3a5c:	8e 85       	ldd	r24, Y+14	; 0x0e
    3a5e:	81 30       	cpi	r24, 0x01	; 1
    3a60:	d9 f4       	brne	.+54     	; 0x3a98 <prvSampleTimeNow+0x8a>
            the timer going into the same timer list then it has already expired
            and the timer should be re-inserted into the current list so it is
            processed again within this loop.  Otherwise a command should be sent
            to restart the timer to ensure it is only inserted into a list after
            the lists have been swapped. */
            xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    3a62:	8c 85       	ldd	r24, Y+12	; 0x0c
    3a64:	9d 85       	ldd	r25, Y+13	; 0x0d
    3a66:	8a 0d       	add	r24, r10
    3a68:	9b 1d       	adc	r25, r11
            if( xReloadTime > xNextExpireTime )
    3a6a:	a8 16       	cp	r10, r24
    3a6c:	b9 06       	cpc	r11, r25
    3a6e:	60 f4       	brcc	.+24     	; 0x3a88 <prvSampleTimeNow+0x7a>
            {
                listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    3a70:	9b 83       	std	Y+3, r25	; 0x03
    3a72:	8a 83       	std	Y+2, r24	; 0x02
                listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    3a74:	d9 87       	std	Y+9, r29	; 0x09
    3a76:	c8 87       	std	Y+8, r28	; 0x08
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    3a78:	b8 01       	movw	r22, r16
    3a7a:	80 91 08 0d 	lds	r24, 0x0D08	; 0x800d08 <pxCurrentTimerList>
    3a7e:	90 91 09 0d 	lds	r25, 0x0D09	; 0x800d09 <pxCurrentTimerList+0x1>
    3a82:	0e 94 ca 11 	call	0x2394	; 0x2394 <vListInsert>
    3a86:	08 c0       	rjmp	.+16     	; 0x3a98 <prvSampleTimeNow+0x8a>
            }
            else
            {
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    3a88:	00 e0       	ldi	r16, 0x00	; 0
    3a8a:	10 e0       	ldi	r17, 0x00	; 0
    3a8c:	20 e0       	ldi	r18, 0x00	; 0
    3a8e:	30 e0       	ldi	r19, 0x00	; 0
    3a90:	a5 01       	movw	r20, r10
    3a92:	60 e0       	ldi	r22, 0x00	; 0
    3a94:	ce 01       	movw	r24, r28
    3a96:	75 df       	rcall	.-278    	; 0x3982 <xTimerGenericCommand>

    /* The tick count has overflowed.  The timer lists must be switched.
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    3a98:	e0 91 08 0d 	lds	r30, 0x0D08	; 0x800d08 <pxCurrentTimerList>
    3a9c:	f0 91 09 0d 	lds	r31, 0x0D09	; 0x800d09 <pxCurrentTimerList+0x1>
    3aa0:	80 81       	ld	r24, Z
    3aa2:	81 11       	cpse	r24, r1
    3aa4:	ca cf       	rjmp	.-108    	; 0x3a3a <prvSampleTimeNow+0x2c>
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxTemp = pxCurrentTimerList;
    pxCurrentTimerList = pxOverflowTimerList;
    3aa6:	80 91 06 0d 	lds	r24, 0x0D06	; 0x800d06 <pxOverflowTimerList>
    3aaa:	90 91 07 0d 	lds	r25, 0x0D07	; 0x800d07 <pxOverflowTimerList+0x1>
    3aae:	90 93 09 0d 	sts	0x0D09, r25	; 0x800d09 <pxCurrentTimerList+0x1>
    3ab2:	80 93 08 0d 	sts	0x0D08, r24	; 0x800d08 <pxCurrentTimerList>
    pxOverflowTimerList = pxTemp;
    3ab6:	f0 93 07 0d 	sts	0x0D07, r31	; 0x800d07 <pxOverflowTimerList+0x1>
    3aba:	e0 93 06 0d 	sts	0x0D06, r30	; 0x800d06 <pxOverflowTimerList>
    xTimeNow = xTaskGetTickCount();

    if( xTimeNow < xLastTime )
    {
        prvSwitchTimerLists();
        *pxTimerListsWereSwitched = pdTRUE;
    3abe:	81 e0       	ldi	r24, 0x01	; 1
    3ac0:	f6 01       	movw	r30, r12
    3ac2:	80 83       	st	Z, r24
    3ac4:	02 c0       	rjmp	.+4      	; 0x3aca <prvSampleTimeNow+0xbc>
    }
    else
    {
        *pxTimerListsWereSwitched = pdFALSE;
    3ac6:	f6 01       	movw	r30, r12
    3ac8:	10 82       	st	Z, r1
    }

    xLastTime = xTimeNow;
    3aca:	f0 92 01 0d 	sts	0x0D01, r15	; 0x800d01 <xLastTime.2391+0x1>
    3ace:	e0 92 00 0d 	sts	0x0D00, r14	; 0x800d00 <xLastTime.2391>

    return xTimeNow;
}
    3ad2:	c7 01       	movw	r24, r14
    3ad4:	df 91       	pop	r29
    3ad6:	cf 91       	pop	r28
    3ad8:	1f 91       	pop	r17
    3ada:	0f 91       	pop	r16
    3adc:	ff 90       	pop	r15
    3ade:	ef 90       	pop	r14
    3ae0:	df 90       	pop	r13
    3ae2:	cf 90       	pop	r12
    3ae4:	bf 90       	pop	r11
    3ae6:	af 90       	pop	r10
    3ae8:	08 95       	ret

00003aea <prvTimerTask>:
    pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
}
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
    3aea:	cf 93       	push	r28
    3aec:	df 93       	push	r29
    3aee:	00 d0       	rcall	.+0      	; 0x3af0 <prvTimerTask+0x6>
    3af0:	00 d0       	rcall	.+0      	; 0x3af2 <prvTimerTask+0x8>
    3af2:	cd b7       	in	r28, 0x3d	; 61
    3af4:	de b7       	in	r29, 0x3e	; 62
        /* Obtain the time now to make an assessment as to whether the timer
        has expired or not.  If obtaining the time causes the lists to switch
        then don't process this timer as any timers that remained in the list
        when the lists were switched will have been processed within the
        prvSampleTimeNow() function. */
        xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    3af6:	ce 01       	movw	r24, r28
    3af8:	01 96       	adiw	r24, 0x01	; 1
    3afa:	4c 01       	movw	r8, r24
                case when the current timer list is empty. */
                if( xListWasEmpty != pdFALSE )
                {
                    /* The current timer list is empty - is the overflow list
                    also empty? */
                    xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    3afc:	44 24       	eor	r4, r4
    3afe:	43 94       	inc	r4
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    }
    else
    {
        /* Ensure the task unblocks when the tick count rolls over. */
        xNextExpireTime = ( TickType_t ) 0U;
    3b00:	e1 2c       	mov	r14, r1
    3b02:	f1 2c       	mov	r15, r1
                case when the current timer list is empty. */
                if( xListWasEmpty != pdFALSE )
                {
                    /* The current timer list is empty - is the overflow list
                    also empty? */
                    xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    3b04:	51 2c       	mov	r5, r1
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

    while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    3b06:	c8 2e       	mov	r12, r24
    3b08:	d9 2c       	mov	r13, r9
    the timer with the nearest expiry time will expire.  If there are no
    active timers then just set the next expire time to 0.  That will cause
    this task to unblock when the tick count overflows, at which point the
    timer lists will be switched and the next expiry time can be
    re-assessed.  */
    *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    3b0a:	e0 91 08 0d 	lds	r30, 0x0D08	; 0x800d08 <pxCurrentTimerList>
    3b0e:	f0 91 09 0d 	lds	r31, 0x0D09	; 0x800d09 <pxCurrentTimerList+0x1>
    3b12:	80 81       	ld	r24, Z
    if( *pxListWasEmpty == pdFALSE )
    3b14:	88 23       	and	r24, r24
    3b16:	09 f4       	brne	.+2      	; 0x3b1a <prvTimerTask+0x30>
    3b18:	b0 c0       	rjmp	.+352    	; 0x3c7a <prvTimerTask+0x190>
    {
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    3b1a:	05 80       	ldd	r0, Z+5	; 0x05
    3b1c:	f6 81       	ldd	r31, Z+6	; 0x06
    3b1e:	e0 2d       	mov	r30, r0
    3b20:	a0 80       	ld	r10, Z
    3b22:	b1 80       	ldd	r11, Z+1	; 0x01
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

    vTaskSuspendAll();
    3b24:	ec da       	rcall	.-2600   	; 0x30fe <vTaskSuspendAll>
        /* Obtain the time now to make an assessment as to whether the timer
        has expired or not.  If obtaining the time causes the lists to switch
        then don't process this timer as any timers that remained in the list
        when the lists were switched will have been processed within the
        prvSampleTimeNow() function. */
        xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    3b26:	c4 01       	movw	r24, r8
    3b28:	72 df       	rcall	.-284    	; 0x3a0e <prvSampleTimeNow>
    3b2a:	8c 01       	movw	r16, r24
        if( xTimerListsWereSwitched == pdFALSE )
    3b2c:	89 81       	ldd	r24, Y+1	; 0x01
    3b2e:	81 11       	cpse	r24, r1
    3b30:	42 c0       	rjmp	.+132    	; 0x3bb6 <prvTimerTask+0xcc>
        {
            /* The tick count has not overflowed, has the timer expired? */
            if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    3b32:	0a 15       	cp	r16, r10
    3b34:	1b 05       	cpc	r17, r11
            {
                ( void ) xTaskResumeAll();
    3b36:	80 f1       	brcs	.+96     	; 0x3b98 <prvTimerTask+0xae>
    3b38:	a9 db       	rcall	.-2222   	; 0x328c <xTaskResumeAll>
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    3b3a:	e0 91 08 0d 	lds	r30, 0x0D08	; 0x800d08 <pxCurrentTimerList>
    3b3e:	f0 91 09 0d 	lds	r31, 0x0D09	; 0x800d09 <pxCurrentTimerList+0x1>
    3b42:	05 80       	ldd	r0, Z+5	; 0x05
    3b44:	f6 81       	ldd	r31, Z+6	; 0x06
    3b46:	e0 2d       	mov	r30, r0
    3b48:	66 80       	ldd	r6, Z+6	; 0x06
    3b4a:	77 80       	ldd	r7, Z+7	; 0x07

    /* Remove the timer from the list of active timers.  A check has already
    been performed to ensure the list is not empty. */
    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    3b4c:	c3 01       	movw	r24, r6
    3b4e:	02 96       	adiw	r24, 0x02	; 2
    3b50:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <uxListRemove>
    traceTIMER_EXPIRED( pxTimer );

    /* If the timer is an auto reload timer then calculate the next
    expiry time and re-insert the timer in the list of active timers. */
    if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    3b54:	d3 01       	movw	r26, r6
    3b56:	1e 96       	adiw	r26, 0x0e	; 14
    3b58:	8c 91       	ld	r24, X
    3b5a:	1e 97       	sbiw	r26, 0x0e	; 14
    3b5c:	81 30       	cpi	r24, 0x01	; 1
    3b5e:	a1 f4       	brne	.+40     	; 0x3b88 <prvTimerTask+0x9e>
    {
        /* The timer is inserted into a list using a time relative to anything
        other than the current time.  It will therefore be inserted into the
        correct list relative to the time this task thinks it is now. */
        if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    3b60:	1c 96       	adiw	r26, 0x0c	; 12
    3b62:	6d 91       	ld	r22, X+
    3b64:	7c 91       	ld	r23, X
    3b66:	1d 97       	sbiw	r26, 0x0d	; 13
    3b68:	6a 0d       	add	r22, r10
    3b6a:	7b 1d       	adc	r23, r11
    3b6c:	95 01       	movw	r18, r10
    3b6e:	a8 01       	movw	r20, r16
    3b70:	c3 01       	movw	r24, r6
    3b72:	63 de       	rcall	.-826    	; 0x383a <prvInsertTimerInActiveList>
    3b74:	88 23       	and	r24, r24
    3b76:	41 f0       	breq	.+16     	; 0x3b88 <prvTimerTask+0x9e>
        {
            /* The timer expired before it was added to the active timer
            list.  Reload it now.  */
            xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    3b78:	0e 2d       	mov	r16, r14
    3b7a:	1f 2d       	mov	r17, r15
    3b7c:	2e 2d       	mov	r18, r14
    3b7e:	3f 2d       	mov	r19, r15
    3b80:	a5 01       	movw	r20, r10
    3b82:	65 2d       	mov	r22, r5
    3b84:	c3 01       	movw	r24, r6
    3b86:	fd de       	rcall	.-518    	; 0x3982 <xTimerGenericCommand>
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* Call the timer callback. */
    pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    3b88:	d3 01       	movw	r26, r6
    3b8a:	51 96       	adiw	r26, 0x11	; 17
    3b8c:	ed 91       	ld	r30, X+
    3b8e:	fc 91       	ld	r31, X
    3b90:	52 97       	sbiw	r26, 0x12	; 18
    3b92:	c3 01       	movw	r24, r6
    3b94:	19 95       	eicall
    3b96:	64 c0       	rjmp	.+200    	; 0x3c60 <prvTimerTask+0x176>
        prvSampleTimeNow() function. */
        xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
        if( xTimerListsWereSwitched == pdFALSE )
        {
            /* The tick count has not overflowed, has the timer expired? */
            if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    3b98:	45 2d       	mov	r20, r5
                    /* The current timer list is empty - is the overflow list
                    also empty? */
                    xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
                }

                vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    3b9a:	b5 01       	movw	r22, r10
    3b9c:	60 1b       	sub	r22, r16
    3b9e:	71 0b       	sbc	r23, r17
    3ba0:	80 91 04 0d 	lds	r24, 0x0D04	; 0x800d04 <xTimerQueue>
    3ba4:	90 91 05 0d 	lds	r25, 0x0D05	; 0x800d05 <xTimerQueue+0x1>

                if( xTaskResumeAll() == pdFALSE )
    3ba8:	f1 d8       	rcall	.-3614   	; 0x2d8c <vQueueWaitForMessageRestricted>
    3baa:	70 db       	rcall	.-2336   	; 0x328c <xTaskResumeAll>
    3bac:	81 11       	cpse	r24, r1
                {
                    /* Yield to wait for either a command to arrive, or the
                    block time to expire.  If a command arrived between the
                    critical section being exited and this yield then the yield
                    will not cause the task to block. */
                    portYIELD_WITHIN_API();
    3bae:	58 c0       	rjmp	.+176    	; 0x3c60 <prvTimerTask+0x176>
    3bb0:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <vPortYield>
                }
            }
        }
        else
        {
            ( void ) xTaskResumeAll();
    3bb4:	55 c0       	rjmp	.+170    	; 0x3c60 <prvTimerTask+0x176>
    3bb6:	6a db       	rcall	.-2348   	; 0x328c <xTaskResumeAll>
    3bb8:	53 c0       	rjmp	.+166    	; 0x3c60 <prvTimerTask+0x176>
        }
        #endif /* INCLUDE_xTimerPendFunctionCall */

        /* Commands that are positive are timer commands rather than pended
        function calls. */
        if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    3bba:	89 81       	ldd	r24, Y+1	; 0x01
    3bbc:	88 23       	and	r24, r24
    3bbe:	0c f4       	brge	.+2      	; 0x3bc2 <prvTimerTask+0xd8>
    3bc0:	4f c0       	rjmp	.+158    	; 0x3c60 <prvTimerTask+0x176>
        {
            /* The messages uses the xTimerParameters member to work on a
            software timer. */
            pxTimer = xMessage.u.xTimerParameters.pxTimer;
    3bc2:	ac 80       	ldd	r10, Y+4	; 0x04
    3bc4:	bd 80       	ldd	r11, Y+5	; 0x05

        if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    3bc6:	f5 01       	movw	r30, r10
    3bc8:	82 85       	ldd	r24, Z+10	; 0x0a
    3bca:	93 85       	ldd	r25, Z+11	; 0x0b
    3bcc:	89 2b       	or	r24, r25
            {
                /* The timer is in a list, remove it. */
                ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    3bce:	21 f0       	breq	.+8      	; 0x3bd8 <prvTimerTask+0xee>
    3bd0:	c5 01       	movw	r24, r10
    3bd2:	02 96       	adiw	r24, 0x02	; 2
    3bd4:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <uxListRemove>
            it must be present in the function call.  prvSampleTimeNow() must be
            called after the message is received from xTimerQueue so there is no
            possibility of a higher priority task adding a message to the message
            queue with a time that is ahead of the timer daemon task (because it
            pre-empted the timer daemon task after the xTimeNow value was set). */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    3bd8:	ce 01       	movw	r24, r28
    3bda:	06 96       	adiw	r24, 0x06	; 6
    3bdc:	18 df       	rcall	.-464    	; 0x3a0e <prvSampleTimeNow>
    3bde:	ac 01       	movw	r20, r24

            switch( xMessage.xMessageID )
    3be0:	99 81       	ldd	r25, Y+1	; 0x01
    3be2:	94 30       	cpi	r25, 0x04	; 4
    3be4:	89 f1       	breq	.+98     	; 0x3c48 <prvTimerTask+0x15e>
    3be6:	1c f4       	brge	.+6      	; 0x3bee <prvTimerTask+0x104>
    3be8:	93 30       	cpi	r25, 0x03	; 3
    3bea:	d0 f5       	brcc	.+116    	; 0x3c60 <prvTimerTask+0x176>
    3bec:	07 c0       	rjmp	.+14     	; 0x3bfc <prvTimerTask+0x112>
    3bee:	96 30       	cpi	r25, 0x06	; 6
    3bf0:	bc f1       	brlt	.+110    	; 0x3c60 <prvTimerTask+0x176>
    3bf2:	98 30       	cpi	r25, 0x08	; 8
    3bf4:	1c f0       	brlt	.+6      	; 0x3bfc <prvTimerTask+0x112>
    3bf6:	99 30       	cpi	r25, 0x09	; 9
    3bf8:	39 f1       	breq	.+78     	; 0x3c48 <prvTimerTask+0x15e>
    3bfa:	32 c0       	rjmp	.+100    	; 0x3c60 <prvTimerTask+0x176>
                case tmrCOMMAND_START_FROM_ISR :
                case tmrCOMMAND_RESET :
                case tmrCOMMAND_RESET_FROM_ISR :
                case tmrCOMMAND_START_DONT_TRACE :
                    /* Start or restart a timer. */
                    if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    3bfc:	2a 81       	ldd	r18, Y+2	; 0x02
    3bfe:	3b 81       	ldd	r19, Y+3	; 0x03
    3c00:	d5 01       	movw	r26, r10
    3c02:	1c 96       	adiw	r26, 0x0c	; 12
    3c04:	6d 91       	ld	r22, X+
    3c06:	7c 91       	ld	r23, X
    3c08:	1d 97       	sbiw	r26, 0x0d	; 13
    3c0a:	62 0f       	add	r22, r18
    3c0c:	73 1f       	adc	r23, r19
    3c0e:	c5 01       	movw	r24, r10
    3c10:	14 de       	rcall	.-984    	; 0x383a <prvInsertTimerInActiveList>
    3c12:	88 23       	and	r24, r24
    3c14:	29 f1       	breq	.+74     	; 0x3c60 <prvTimerTask+0x176>
                    {
                        /* The timer expired before it was added to the active
                        timer list.  Process it now. */
                        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    3c16:	d5 01       	movw	r26, r10
    3c18:	51 96       	adiw	r26, 0x11	; 17
    3c1a:	ed 91       	ld	r30, X+
    3c1c:	fc 91       	ld	r31, X
    3c1e:	52 97       	sbiw	r26, 0x12	; 18
    3c20:	c5 01       	movw	r24, r10
    3c22:	19 95       	eicall
                        traceTIMER_EXPIRED( pxTimer );

                        if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    3c24:	f5 01       	movw	r30, r10
    3c26:	86 85       	ldd	r24, Z+14	; 0x0e
    3c28:	81 30       	cpi	r24, 0x01	; 1
    3c2a:	d1 f4       	brne	.+52     	; 0x3c60 <prvTimerTask+0x176>
                        {
                            xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    3c2c:	4a 81       	ldd	r20, Y+2	; 0x02
    3c2e:	5b 81       	ldd	r21, Y+3	; 0x03
    3c30:	84 85       	ldd	r24, Z+12	; 0x0c
    3c32:	95 85       	ldd	r25, Z+13	; 0x0d
    3c34:	48 0f       	add	r20, r24
    3c36:	59 1f       	adc	r21, r25
    3c38:	0e 2d       	mov	r16, r14
    3c3a:	1f 2d       	mov	r17, r15
    3c3c:	2e 2d       	mov	r18, r14
    3c3e:	3f 2d       	mov	r19, r15
    3c40:	65 2d       	mov	r22, r5
    3c42:	c5 01       	movw	r24, r10
    3c44:	9e de       	rcall	.-708    	; 0x3982 <xTimerGenericCommand>
    3c46:	0c c0       	rjmp	.+24     	; 0x3c60 <prvTimerTask+0x176>
                    There is nothing to do here. */
                    break;

                case tmrCOMMAND_CHANGE_PERIOD :
                case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
                    pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    3c48:	6a 81       	ldd	r22, Y+2	; 0x02
    3c4a:	7b 81       	ldd	r23, Y+3	; 0x03
    3c4c:	d5 01       	movw	r26, r10
    3c4e:	1d 96       	adiw	r26, 0x0d	; 13
    3c50:	7c 93       	st	X, r23
    3c52:	6e 93       	st	-X, r22
                    be longer or shorter than the old one.  The command time is
                    therefore set to the current time, and as the period cannot
                    be zero the next expiry time can only be in the future,
                    meaning (unlike for the xTimerStart() case above) there is
                    no fail case that needs to be handled here. */
                    ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    3c54:	1c 97       	sbiw	r26, 0x0c	; 12
    3c56:	64 0f       	add	r22, r20
    3c58:	75 1f       	adc	r23, r21
    3c5a:	9a 01       	movw	r18, r20
    3c5c:	c5 01       	movw	r24, r10
    3c5e:	ed dd       	rcall	.-1062   	; 0x383a <prvInsertTimerInActiveList>
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

    while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    3c60:	4e 2d       	mov	r20, r14
    3c62:	5f 2d       	mov	r21, r15
    3c64:	6c 2d       	mov	r22, r12
    3c66:	7d 2d       	mov	r23, r13
    3c68:	80 91 04 0d 	lds	r24, 0x0D04	; 0x800d04 <xTimerQueue>
    3c6c:	90 91 05 0d 	lds	r25, 0x0D05	; 0x800d05 <xTimerQueue+0x1>
    3c70:	0e 94 82 15 	call	0x2b04	; 0x2b04 <xQueueReceive>
    3c74:	81 11       	cpse	r24, r1
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

    vTaskSuspendAll();
    3c76:	a1 cf       	rjmp	.-190    	; 0x3bba <prvTimerTask+0xd0>
    3c78:	48 cf       	rjmp	.-368    	; 0x3b0a <prvTimerTask+0x20>
        /* Obtain the time now to make an assessment as to whether the timer
        has expired or not.  If obtaining the time causes the lists to switch
        then don't process this timer as any timers that remained in the list
        when the lists were switched will have been processed within the
        prvSampleTimeNow() function. */
        xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    3c7a:	41 da       	rcall	.-2942   	; 0x30fe <vTaskSuspendAll>
    3c7c:	c4 01       	movw	r24, r8
    3c7e:	c7 de       	rcall	.-626    	; 0x3a0e <prvSampleTimeNow>
    3c80:	8c 01       	movw	r16, r24
        if( xTimerListsWereSwitched == pdFALSE )
    3c82:	89 81       	ldd	r24, Y+1	; 0x01
    3c84:	81 11       	cpse	r24, r1
    3c86:	97 cf       	rjmp	.-210    	; 0x3bb6 <prvTimerTask+0xcc>
                case when the current timer list is empty. */
                if( xListWasEmpty != pdFALSE )
                {
                    /* The current timer list is empty - is the overflow list
                    also empty? */
                    xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    3c88:	e0 91 06 0d 	lds	r30, 0x0D06	; 0x800d06 <pxOverflowTimerList>
    3c8c:	f0 91 07 0d 	lds	r31, 0x0D07	; 0x800d07 <pxOverflowTimerList+0x1>
    3c90:	80 81       	ld	r24, Z
    3c92:	44 2d       	mov	r20, r4
    3c94:	81 11       	cpse	r24, r1
    3c96:	45 2d       	mov	r20, r5
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    }
    else
    {
        /* Ensure the task unblocks when the tick count rolls over. */
        xNextExpireTime = ( TickType_t ) 0U;
    3c98:	ae 2c       	mov	r10, r14
    3c9a:	bf 2c       	mov	r11, r15
    3c9c:	7e cf       	rjmp	.-260    	; 0x3b9a <prvTimerTask+0xb0>

00003c9e <LCD_main>:
	RTE_set_Start_blancher_Operation(s_Lcd_data_read.Start_blancher_operation);
}


static void LCD_RTE_COLLECT(void){
		s_Lcd_data_write.Drum_speed = RTE_get_Drum_speed();
    3c9e:	08 e2       	ldi	r16, 0x28	; 40
    3ca0:	1f e0       	ldi	r17, 0x0F	; 15
s_LCD_DATA_WRITE_t   s_Lcd_data_write;

static void LCD_READ_Parameters(void){
	//call LCD_read_mutliple regs (fill the struct) and check for the errors //s_Lcd_data_read
	//set rte parameters
	Lcd_Read_multiple_data(LCD_START_READ_ADDRESS,(uint16_t*)&s_Lcd_data_read,LCD_READ_REGS_NUMBER);
    3ca2:	41 e1       	ldi	r20, 0x11	; 17
    3ca4:	6c e2       	ldi	r22, 0x2C	; 44
    3ca6:	7f e0       	ldi	r23, 0x0F	; 15
    3ca8:	81 e0       	ldi	r24, 0x01	; 1
    3caa:	90 e0       	ldi	r25, 0x00	; 0
    3cac:	0e 94 48 02 	call	0x490	; 0x490 <Lcd_Read_multiple_data>
}

//drum speed & current temp
//s_Lcd_data_read
static void LCD_RTE_FEED(void){
	RTE_set_Set_temperature(s_Lcd_data_read.Set_temp);
    3cb0:	cc e2       	ldi	r28, 0x2C	; 44
    3cb2:	df e0       	ldi	r29, 0x0F	; 15
    3cb4:	8a 85       	ldd	r24, Y+10	; 0x0a
    3cb6:	9b 85       	ldd	r25, Y+11	; 0x0b
    3cb8:	0e 94 15 11 	call	0x222a	; 0x222a <RTE_set_Set_temperature>
	RTE_set_Sleep_temperature(s_Lcd_data_read.Sleep_temp);
    3cbc:	88 85       	ldd	r24, Y+8	; 0x08
    3cbe:	99 85       	ldd	r25, Y+9	; 0x09
    3cc0:	0e 94 06 11 	call	0x220c	; 0x220c <RTE_set_Sleep_temperature>
	RTE_set_Threshold_set_temperature(s_Lcd_data_read.Threshold_set_temp);
    3cc4:	8c 85       	ldd	r24, Y+12	; 0x0c
    3cc6:	9d 85       	ldd	r25, Y+13	; 0x0d
    3cc8:	0e 94 24 11 	call	0x2248	; 0x2248 <RTE_set_Threshold_set_temperature>
	RTE_set_Threshold_sleep_temperature(s_Lcd_data_read.Threshold_sleep_temp);
    3ccc:	8e 85       	ldd	r24, Y+14	; 0x0e
    3cce:	9f 85       	ldd	r25, Y+15	; 0x0f
    3cd0:	0e 94 33 11 	call	0x2266	; 0x2266 <RTE_set_Threshold_sleep_temperature>
	RTE_set_Negative_offset_temperature(s_Lcd_data_read.Negative_offset_temp);
    3cd4:	8a 89       	ldd	r24, Y+18	; 0x12
    3cd6:	9b 89       	ldd	r25, Y+19	; 0x13
    3cd8:	0e 94 51 11 	call	0x22a2	; 0x22a2 <RTE_set_Negative_offset_temperature>
	RTE_set_Positive_offset_temperature(s_Lcd_data_read.Positive_offset_temp);
    3cdc:	88 89       	ldd	r24, Y+16	; 0x10
    3cde:	99 89       	ldd	r25, Y+17	; 0x11
    3ce0:	0e 94 42 11 	call	0x2284	; 0x2284 <RTE_set_Positive_offset_temperature>
	RTE_set_System_on(s_Lcd_data_read.System_on);
    3ce4:	88 81       	ld	r24, Y
    3ce6:	99 81       	ldd	r25, Y+1	; 0x01
    3ce8:	0e 94 84 10 	call	0x2108	; 0x2108 <RTE_set_System_on>
	RTE_set_Wash_Operation(s_Lcd_data_read.Wash_operation);
    3cec:	8c 81       	ldd	r24, Y+4	; 0x04
    3cee:	9d 81       	ldd	r25, Y+5	; 0x05
    3cf0:	0e 94 a2 10 	call	0x2144	; 0x2144 <RTE_set_Wash_Operation>
	RTE_set_Tank_Calibration_Operation(s_Lcd_data_read.Tank_calibration_operation);
    3cf4:	8e 81       	ldd	r24, Y+6	; 0x06
    3cf6:	9f 81       	ldd	r25, Y+7	; 0x07
    3cf8:	0e 94 b1 10 	call	0x2162	; 0x2162 <RTE_set_Tank_Calibration_Operation>
	RTE_set_Gear_ratio(s_Lcd_data_read.Gear_ratio);
    3cfc:	8c 89       	ldd	r24, Y+20	; 0x14
    3cfe:	9d 89       	ldd	r25, Y+21	; 0x15
    3d00:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <RTE_set_Gear_ratio>
	RTE_set_Conveyor_length(s_Lcd_data_read.Conveyor_length);
    3d04:	8e 89       	ldd	r24, Y+22	; 0x16
    3d06:	9f 89       	ldd	r25, Y+23	; 0x17
    3d08:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <RTE_set_Conveyor_length>
	RTE_set_Driver_diameter(s_Lcd_data_read.Driver_diameter);
    3d0c:	88 8d       	ldd	r24, Y+24	; 0x18
    3d0e:	99 8d       	ldd	r25, Y+25	; 0x19
    3d10:	0e 94 07 10 	call	0x200e	; 0x200e <RTE_set_Driver_diameter>
	RTE_set_Time_minute(s_Lcd_data_read.Time_minute);
    3d14:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3d16:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3d18:	0e 94 16 10 	call	0x202c	; 0x202c <RTE_set_Time_minute>
	RTE_set_Time_second(s_Lcd_data_read.Time_second);
    3d1c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3d1e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3d20:	0e 94 25 10 	call	0x204a	; 0x204a <RTE_set_Time_second>
	RTE_set_RPM_max(s_Lcd_data_read.RPM_max);
    3d24:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3d26:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3d28:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <RTE_set_RPM_max>
	RTE_set_Start_blancher_Operation(s_Lcd_data_read.Start_blancher_operation);
    3d2c:	8a 81       	ldd	r24, Y+2	; 0x02
    3d2e:	9b 81       	ldd	r25, Y+3	; 0x03
    3d30:	0e 94 93 10 	call	0x2126	; 0x2126 <RTE_set_Start_blancher_Operation>
}


static void LCD_RTE_COLLECT(void){
		s_Lcd_data_write.Drum_speed = RTE_get_Drum_speed();
    3d34:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <RTE_get_Drum_speed>
    3d38:	f8 01       	movw	r30, r16
    3d3a:	91 83       	std	Z+1, r25	; 0x01
    3d3c:	80 83       	st	Z, r24
		s_Lcd_data_write.Current_temperature = RTE_get_Current_temperature();
    3d3e:	0e 94 65 11 	call	0x22ca	; 0x22ca <RTE_get_Current_temperature>
    3d42:	f8 01       	movw	r30, r16
    3d44:	93 83       	std	Z+3, r25	; 0x03
    3d46:	82 83       	std	Z+2, r24	; 0x02
	
}


static void LCD_WRITE_Parameters(void){
	Lcd_Write_multiple_data(LCD_START_WRITE_ADDRESS,(uint16_t*)&s_Lcd_data_write,LCD_WRITE_REGS_NUMBER);
    3d48:	42 e0       	ldi	r20, 0x02	; 2
    3d4a:	b8 01       	movw	r22, r16
    3d4c:	80 e0       	ldi	r24, 0x00	; 0
    3d4e:	9f e0       	ldi	r25, 0x0F	; 15
    3d50:	0e 94 73 02 	call	0x4e6	; 0x4e6 <Lcd_Write_multiple_data>
				UART0_OutUDec(Debug_read[i]);
				UART0_puts("\n");
				
			}
		#endif
		vTaskDelay(4000/portTICK_PERIOD_MS);
    3d54:	8a ef       	ldi	r24, 0xFA	; 250
    3d56:	90 e0       	ldi	r25, 0x00	; 0
    3d58:	12 db       	rcall	.-2524   	; 0x337e <vTaskDelay>
    3d5a:	a3 cf       	rjmp	.-186    	; 0x3ca2 <LCD_main+0x4>

00003d5c <System_init>:


gSystemError System_init(void){
	
	gSystemError res = E_OK;
	DIO_init();
    3d5c:	0e 94 0e 0b 	call	0x161c	; 0x161c <DIO_init>
	millis_init();	
    3d60:	1e d0       	rcall	.+60     	; 0x3d9e <millis_init>
	Lcd_init(UART3,115200,1);
    3d62:	21 e0       	ldi	r18, 0x01	; 1
    3d64:	40 e0       	ldi	r20, 0x00	; 0
    3d66:	52 ec       	ldi	r21, 0xC2	; 194
    3d68:	61 e0       	ldi	r22, 0x01	; 1
    3d6a:	70 e0       	ldi	r23, 0x00	; 0
    3d6c:	83 e0       	ldi	r24, 0x03	; 3
    3d6e:	0e 94 34 02 	call	0x468	; 0x468 <Lcd_init>
	RTE_init();
    3d72:	0e 94 4e 10 	call	0x209c	; 0x209c <RTE_init>
	return res;

    3d76:	80 e0       	ldi	r24, 0x00	; 0
    3d78:	08 95       	ret

00003d7a <crc16_update>:

uint16_t crc16_update(uint16_t crc, uint8_t a)
{
  int i;

  crc ^= a;
    3d7a:	86 27       	eor	r24, r22
    3d7c:	28 e0       	ldi	r18, 0x08	; 8
    3d7e:	30 e0       	ldi	r19, 0x00	; 0
  for (i = 0; i < 8; ++i)
  {
    if (crc & 1)
    3d80:	80 ff       	sbrs	r24, 0
    3d82:	07 c0       	rjmp	.+14     	; 0x3d92 <crc16_update+0x18>
      crc = (crc >> 1) ^ 0xA001;
    3d84:	96 95       	lsr	r25
    3d86:	87 95       	ror	r24
    3d88:	41 e0       	ldi	r20, 0x01	; 1
    3d8a:	84 27       	eor	r24, r20
    3d8c:	40 ea       	ldi	r20, 0xA0	; 160
    3d8e:	94 27       	eor	r25, r20
    3d90:	02 c0       	rjmp	.+4      	; 0x3d96 <crc16_update+0x1c>
    else
      crc = (crc >> 1);
    3d92:	96 95       	lsr	r25
    3d94:	87 95       	ror	r24
    3d96:	21 50       	subi	r18, 0x01	; 1
    3d98:	31 09       	sbc	r19, r1
uint16_t crc16_update(uint16_t crc, uint8_t a)
{
  int i;

  crc ^= a;
  for (i = 0; i < 8; ++i)
    3d9a:	91 f7       	brne	.-28     	; 0x3d80 <crc16_update+0x6>
    else
      crc = (crc >> 1);
  }

  return crc;
}
    3d9c:	08 95       	ret

00003d9e <millis_init>:

//init the timer on ctc mode to calvulate millis
void millis_init()
{
	//CTC mode
	TIMER2_CONGFIG_A = 0x02;
    3d9e:	82 e0       	ldi	r24, 0x02	; 2
    3da0:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
	// Clock/64
	TIMER2_CONGFIG_B = 0x04;
    3da4:	84 e0       	ldi	r24, 0x04	; 4
    3da6:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7000b1>
    // Load into the output compare
    TIMER2_COMPARE = CTC_MATCH_OVERFLOW;
    3daa:	8a ef       	ldi	r24, 0xFA	; 250
    3dac:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7000b3>
    // Enable the compare match interrupt
    SET_BIT(TIMER2_INTERUPT, TIMER2_COMPARE_INT);
    3db0:	e0 e7       	ldi	r30, 0x70	; 112
    3db2:	f0 e0       	ldi	r31, 0x00	; 0
    3db4:	80 81       	ld	r24, Z
    3db6:	82 60       	ori	r24, 0x02	; 2
    3db8:	80 83       	st	Z, r24
    3dba:	08 95       	ret

00003dbc <Get_millis>:
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    3dbc:	f8 94       	cli
    unsigned long millis_return;

    // Ensure this cannot be disrupted
    ATOMIC_BLOCK(ATOMIC_FORCEON) {
    	// copy the ISR counter
        millis_return = timer1_millis;
    3dbe:	60 91 4c 0f 	lds	r22, 0x0F4C	; 0x800f4c <timer1_millis>
    3dc2:	70 91 4d 0f 	lds	r23, 0x0F4D	; 0x800f4d <timer1_millis+0x1>
    3dc6:	80 91 4e 0f 	lds	r24, 0x0F4E	; 0x800f4e <timer1_millis+0x2>
    3dca:	90 91 4f 0f 	lds	r25, 0x0F4F	; 0x800f4f <timer1_millis+0x3>
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
    3dce:	78 94       	sei
    }

    return millis_return;
}//Get_millis
    3dd0:	08 95       	ret

00003dd2 <__vector_13>:



ISR (TIMER2_COMPA_vect)
{
    3dd2:	1f 92       	push	r1
    3dd4:	0f 92       	push	r0
    3dd6:	0f b6       	in	r0, 0x3f	; 63
    3dd8:	0f 92       	push	r0
    3dda:	11 24       	eor	r1, r1
    3ddc:	8f 93       	push	r24
    3dde:	9f 93       	push	r25
    3de0:	af 93       	push	r26
    3de2:	bf 93       	push	r27
	//MILLI SEC
    timer1_millis++;
    3de4:	80 91 4c 0f 	lds	r24, 0x0F4C	; 0x800f4c <timer1_millis>
    3de8:	90 91 4d 0f 	lds	r25, 0x0F4D	; 0x800f4d <timer1_millis+0x1>
    3dec:	a0 91 4e 0f 	lds	r26, 0x0F4E	; 0x800f4e <timer1_millis+0x2>
    3df0:	b0 91 4f 0f 	lds	r27, 0x0F4F	; 0x800f4f <timer1_millis+0x3>
    3df4:	01 96       	adiw	r24, 0x01	; 1
    3df6:	a1 1d       	adc	r26, r1
    3df8:	b1 1d       	adc	r27, r1
    3dfa:	80 93 4c 0f 	sts	0x0F4C, r24	; 0x800f4c <timer1_millis>
    3dfe:	90 93 4d 0f 	sts	0x0F4D, r25	; 0x800f4d <timer1_millis+0x1>
    3e02:	a0 93 4e 0f 	sts	0x0F4E, r26	; 0x800f4e <timer1_millis+0x2>
    3e06:	b0 93 4f 0f 	sts	0x0F4F, r27	; 0x800f4f <timer1_millis+0x3>
}//ISR
    3e0a:	bf 91       	pop	r27
    3e0c:	af 91       	pop	r26
    3e0e:	9f 91       	pop	r25
    3e10:	8f 91       	pop	r24
    3e12:	0f 90       	pop	r0
    3e14:	0f be       	out	0x3f, r0	; 63
    3e16:	0f 90       	pop	r0
    3e18:	1f 90       	pop	r1
    3e1a:	18 95       	reti

00003e1c <__udivmodsi4>:
    3e1c:	a1 e2       	ldi	r26, 0x21	; 33
    3e1e:	1a 2e       	mov	r1, r26
    3e20:	aa 1b       	sub	r26, r26
    3e22:	bb 1b       	sub	r27, r27
    3e24:	fd 01       	movw	r30, r26
    3e26:	0d c0       	rjmp	.+26     	; 0x3e42 <__udivmodsi4_ep>

00003e28 <__udivmodsi4_loop>:
    3e28:	aa 1f       	adc	r26, r26
    3e2a:	bb 1f       	adc	r27, r27
    3e2c:	ee 1f       	adc	r30, r30
    3e2e:	ff 1f       	adc	r31, r31
    3e30:	a2 17       	cp	r26, r18
    3e32:	b3 07       	cpc	r27, r19
    3e34:	e4 07       	cpc	r30, r20
    3e36:	f5 07       	cpc	r31, r21
    3e38:	20 f0       	brcs	.+8      	; 0x3e42 <__udivmodsi4_ep>
    3e3a:	a2 1b       	sub	r26, r18
    3e3c:	b3 0b       	sbc	r27, r19
    3e3e:	e4 0b       	sbc	r30, r20
    3e40:	f5 0b       	sbc	r31, r21

00003e42 <__udivmodsi4_ep>:
    3e42:	66 1f       	adc	r22, r22
    3e44:	77 1f       	adc	r23, r23
    3e46:	88 1f       	adc	r24, r24
    3e48:	99 1f       	adc	r25, r25
    3e4a:	1a 94       	dec	r1
    3e4c:	69 f7       	brne	.-38     	; 0x3e28 <__udivmodsi4_loop>
    3e4e:	60 95       	com	r22
    3e50:	70 95       	com	r23
    3e52:	80 95       	com	r24
    3e54:	90 95       	com	r25
    3e56:	9b 01       	movw	r18, r22
    3e58:	ac 01       	movw	r20, r24
    3e5a:	bd 01       	movw	r22, r26
    3e5c:	cf 01       	movw	r24, r30
    3e5e:	08 95       	ret

00003e60 <memcpy>:
    3e60:	fb 01       	movw	r30, r22
    3e62:	dc 01       	movw	r26, r24
    3e64:	02 c0       	rjmp	.+4      	; 0x3e6a <memcpy+0xa>
    3e66:	01 90       	ld	r0, Z+
    3e68:	0d 92       	st	X+, r0
    3e6a:	41 50       	subi	r20, 0x01	; 1
    3e6c:	50 40       	sbci	r21, 0x00	; 0
    3e6e:	d8 f7       	brcc	.-10     	; 0x3e66 <memcpy+0x6>
    3e70:	08 95       	ret

00003e72 <memset>:
    3e72:	dc 01       	movw	r26, r24
    3e74:	01 c0       	rjmp	.+2      	; 0x3e78 <memset+0x6>
    3e76:	6d 93       	st	X+, r22
    3e78:	41 50       	subi	r20, 0x01	; 1
    3e7a:	50 40       	sbci	r21, 0x00	; 0
    3e7c:	e0 f7       	brcc	.-8      	; 0x3e76 <memset+0x4>
    3e7e:	08 95       	ret

00003e80 <_exit>:
    3e80:	f8 94       	cli

00003e82 <__stop_program>:
    3e82:	ff cf       	rjmp	.-2      	; 0x3e82 <__stop_program>
