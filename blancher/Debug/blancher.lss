
blancher.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000078  00800200  00002c9a  00002d2e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002c9a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000a83  00800278  00800278  00002da6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002da6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002dd8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000a08  00000000  00000000  00002e18  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000b572  00000000  00000000  00003820  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002ccc  00000000  00000000  0000ed92  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00008e75  00000000  00000000  00011a5e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001bc4  00000000  00000000  0001a8d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00018851  00000000  00000000  0001c498  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000938f  00000000  00000000  00034ce9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000ad8  00000000  00000000  0003e078  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00005d5d  00000000  00000000  0003eb50  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	9a c0       	rjmp	.+308    	; 0x136 <__ctors_end>
       2:	00 00       	nop
       4:	b8 c0       	rjmp	.+368    	; 0x176 <__bad_interrupt>
       6:	00 00       	nop
       8:	b6 c0       	rjmp	.+364    	; 0x176 <__bad_interrupt>
       a:	00 00       	nop
       c:	b4 c0       	rjmp	.+360    	; 0x176 <__bad_interrupt>
       e:	00 00       	nop
      10:	b2 c0       	rjmp	.+356    	; 0x176 <__bad_interrupt>
      12:	00 00       	nop
      14:	b0 c0       	rjmp	.+352    	; 0x176 <__bad_interrupt>
      16:	00 00       	nop
      18:	ae c0       	rjmp	.+348    	; 0x176 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	ac c0       	rjmp	.+344    	; 0x176 <__bad_interrupt>
      1e:	00 00       	nop
      20:	aa c0       	rjmp	.+340    	; 0x176 <__bad_interrupt>
      22:	00 00       	nop
      24:	a8 c0       	rjmp	.+336    	; 0x176 <__bad_interrupt>
      26:	00 00       	nop
      28:	a6 c0       	rjmp	.+332    	; 0x176 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	a4 c0       	rjmp	.+328    	; 0x176 <__bad_interrupt>
      2e:	00 00       	nop
      30:	0c 94 0f 0b 	jmp	0x161e	; 0x161e <__vector_12>
      34:	0c 94 f4 15 	jmp	0x2be8	; 0x2be8 <__vector_13>
      38:	9e c0       	rjmp	.+316    	; 0x176 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	9c c0       	rjmp	.+312    	; 0x176 <__bad_interrupt>
      3e:	00 00       	nop
      40:	9a c0       	rjmp	.+308    	; 0x176 <__bad_interrupt>
      42:	00 00       	nop
      44:	99 c0       	rjmp	.+306    	; 0x178 <__vector_17>
      46:	00 00       	nop
      48:	96 c0       	rjmp	.+300    	; 0x176 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	94 c0       	rjmp	.+296    	; 0x176 <__bad_interrupt>
      4e:	00 00       	nop
      50:	92 c0       	rjmp	.+292    	; 0x176 <__bad_interrupt>
      52:	00 00       	nop
      54:	90 c0       	rjmp	.+288    	; 0x176 <__bad_interrupt>
      56:	00 00       	nop
      58:	8e c0       	rjmp	.+284    	; 0x176 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	8c c0       	rjmp	.+280    	; 0x176 <__bad_interrupt>
      5e:	00 00       	nop
      60:	8a c0       	rjmp	.+276    	; 0x176 <__bad_interrupt>
      62:	00 00       	nop
      64:	f1 c3       	rjmp	.+2018   	; 0x848 <__vector_25>
      66:	00 00       	nop
      68:	28 c4       	rjmp	.+2128   	; 0x8ba <__vector_26>
      6a:	00 00       	nop
      6c:	84 c0       	rjmp	.+264    	; 0x176 <__bad_interrupt>
      6e:	00 00       	nop
      70:	82 c0       	rjmp	.+260    	; 0x176 <__bad_interrupt>
      72:	00 00       	nop
      74:	85 c3       	rjmp	.+1802   	; 0x780 <__vector_29>
      76:	00 00       	nop
      78:	7e c0       	rjmp	.+252    	; 0x176 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	7c c0       	rjmp	.+248    	; 0x176 <__bad_interrupt>
      7e:	00 00       	nop
      80:	e1 c0       	rjmp	.+450    	; 0x244 <__vector_32>
      82:	00 00       	nop
      84:	78 c0       	rjmp	.+240    	; 0x176 <__bad_interrupt>
      86:	00 00       	nop
      88:	76 c0       	rjmp	.+236    	; 0x176 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	74 c0       	rjmp	.+232    	; 0x176 <__bad_interrupt>
      8e:	00 00       	nop
      90:	e1 c4       	rjmp	.+2498   	; 0xa54 <__vector_36>
      92:	00 00       	nop
      94:	18 c5       	rjmp	.+2608   	; 0xac6 <__vector_37>
      96:	00 00       	nop
      98:	6e c0       	rjmp	.+220    	; 0x176 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	6c c0       	rjmp	.+216    	; 0x176 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	6a c0       	rjmp	.+212    	; 0x176 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	68 c0       	rjmp	.+208    	; 0x176 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	33 c1       	rjmp	.+614    	; 0x310 <__vector_42>
      aa:	00 00       	nop
      ac:	64 c0       	rjmp	.+200    	; 0x176 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	62 c0       	rjmp	.+196    	; 0x176 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	60 c0       	rjmp	.+192    	; 0x176 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	5e c0       	rjmp	.+188    	; 0x176 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	8f c1       	rjmp	.+798    	; 0x3dc <__vector_47>
      be:	00 00       	nop
      c0:	5a c0       	rjmp	.+180    	; 0x176 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	58 c0       	rjmp	.+176    	; 0x176 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	56 c0       	rjmp	.+172    	; 0x176 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	d2 c5       	rjmp	.+2980   	; 0xc72 <__vector_51>
      ce:	00 00       	nop
      d0:	09 c6       	rjmp	.+3090   	; 0xce4 <__vector_52>
      d2:	00 00       	nop
      d4:	50 c0       	rjmp	.+160    	; 0x176 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	d8 c6       	rjmp	.+3504   	; 0xe8a <__vector_54>
      da:	00 00       	nop
      dc:	0f c7       	rjmp	.+3614   	; 0xefc <__vector_55>
      de:	00 00       	nop
      e0:	4a c0       	rjmp	.+148    	; 0x176 <__bad_interrupt>
	...

000000e4 <prvIdleTask>:
    /* Reset the event list item to its normal value - so it can be used with
    queues and semaphores. */
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */

    return uxReturn;
}
      e4:	c0 e3       	ldi	r28, 0x30	; 48
      e6:	da e0       	ldi	r29, 0x0A	; 10
      e8:	06 e4       	ldi	r16, 0x46	; 70
      ea:	1a e0       	ldi	r17, 0x0A	; 10
      ec:	80 91 2f 0a 	lds	r24, 0x0A2F	; 0x800a2f <uxDeletedTasksWaitingCleanUp>
      f0:	88 23       	and	r24, r24
      f2:	d1 f0       	breq	.+52     	; 0x128 <prvIdleTask+0x44>
      f4:	0f b6       	in	r0, 0x3f	; 63
      f6:	f8 94       	cli
      f8:	0f 92       	push	r0
      fa:	ed 81       	ldd	r30, Y+5	; 0x05
      fc:	fe 81       	ldd	r31, Y+6	; 0x06
      fe:	86 81       	ldd	r24, Z+6	; 0x06
     100:	97 81       	ldd	r25, Z+7	; 0x07
     102:	02 96       	adiw	r24, 0x02	; 2
     104:	0e 94 77 09 	call	0x12ee	; 0x12ee <uxListRemove>
     108:	80 91 2e 0a 	lds	r24, 0x0A2E	; 0x800a2e <uxCurrentNumberOfTasks>
     10c:	81 50       	subi	r24, 0x01	; 1
     10e:	80 93 2e 0a 	sts	0x0A2E, r24	; 0x800a2e <uxCurrentNumberOfTasks>
     112:	80 91 2f 0a 	lds	r24, 0x0A2F	; 0x800a2f <uxDeletedTasksWaitingCleanUp>
     116:	81 50       	subi	r24, 0x01	; 1
     118:	80 93 2f 0a 	sts	0x0A2F, r24	; 0x800a2f <uxDeletedTasksWaitingCleanUp>
     11c:	0f 90       	pop	r0
     11e:	0f be       	out	0x3f, r0	; 63
     120:	80 91 2f 0a 	lds	r24, 0x0A2F	; 0x800a2f <uxDeletedTasksWaitingCleanUp>
     124:	81 11       	cpse	r24, r1
     126:	e6 cf       	rjmp	.-52     	; 0xf4 <prvIdleTask+0x10>
     128:	f8 01       	movw	r30, r16
     12a:	80 81       	ld	r24, Z
     12c:	82 30       	cpi	r24, 0x02	; 2
     12e:	f0 f2       	brcs	.-68     	; 0xec <prvIdleTask+0x8>
     130:	0e 94 4c 0a 	call	0x1498	; 0x1498 <vPortYield>
     134:	db cf       	rjmp	.-74     	; 0xec <prvIdleTask+0x8>

00000136 <__ctors_end>:
     136:	11 24       	eor	r1, r1
     138:	1f be       	out	0x3f, r1	; 63
     13a:	cf ef       	ldi	r28, 0xFF	; 255
     13c:	d1 e2       	ldi	r29, 0x21	; 33
     13e:	de bf       	out	0x3e, r29	; 62
     140:	cd bf       	out	0x3d, r28	; 61
     142:	00 e0       	ldi	r16, 0x00	; 0
     144:	0c bf       	out	0x3c, r16	; 60

00000146 <__do_copy_data>:
     146:	12 e0       	ldi	r17, 0x02	; 2
     148:	a0 e0       	ldi	r26, 0x00	; 0
     14a:	b2 e0       	ldi	r27, 0x02	; 2
     14c:	ea e9       	ldi	r30, 0x9A	; 154
     14e:	fc e2       	ldi	r31, 0x2C	; 44
     150:	00 e0       	ldi	r16, 0x00	; 0
     152:	0b bf       	out	0x3b, r16	; 59
     154:	02 c0       	rjmp	.+4      	; 0x15a <__do_copy_data+0x14>
     156:	07 90       	elpm	r0, Z+
     158:	0d 92       	st	X+, r0
     15a:	a8 37       	cpi	r26, 0x78	; 120
     15c:	b1 07       	cpc	r27, r17
     15e:	d9 f7       	brne	.-10     	; 0x156 <__do_copy_data+0x10>

00000160 <__do_clear_bss>:
     160:	2c e0       	ldi	r18, 0x0C	; 12
     162:	a8 e7       	ldi	r26, 0x78	; 120
     164:	b2 e0       	ldi	r27, 0x02	; 2
     166:	01 c0       	rjmp	.+2      	; 0x16a <.do_clear_bss_start>

00000168 <.do_clear_bss_loop>:
     168:	1d 92       	st	X+, r1

0000016a <.do_clear_bss_start>:
     16a:	ab 3f       	cpi	r26, 0xFB	; 251
     16c:	b2 07       	cpc	r27, r18
     16e:	e1 f7       	brne	.-8      	; 0x168 <.do_clear_bss_loop>
     170:	b9 d2       	rcall	.+1394   	; 0x6e4 <main>
     172:	0c 94 4b 16 	jmp	0x2c96	; 0x2c96 <_exit>

00000176 <__bad_interrupt>:
     176:	44 cf       	rjmp	.-376    	; 0x0 <__vectors>

00000178 <__vector_17>:
    return 1;// Setup done ok
}//timer_init

// intruptted service routine when we have rech the number of  Ticks On Encoder
ISR(TIMER1_COMPA_vect)
{
     178:	1f 92       	push	r1
     17a:	0f 92       	push	r0
     17c:	0f b6       	in	r0, 0x3f	; 63
     17e:	0f 92       	push	r0
     180:	11 24       	eor	r1, r1
     182:	0b b6       	in	r0, 0x3b	; 59
     184:	0f 92       	push	r0
     186:	cf 92       	push	r12
     188:	df 92       	push	r13
     18a:	ef 92       	push	r14
     18c:	ff 92       	push	r15
     18e:	0f 93       	push	r16
     190:	1f 93       	push	r17
     192:	2f 93       	push	r18
     194:	3f 93       	push	r19
     196:	4f 93       	push	r20
     198:	5f 93       	push	r21
     19a:	6f 93       	push	r22
     19c:	7f 93       	push	r23
     19e:	8f 93       	push	r24
     1a0:	9f 93       	push	r25
     1a2:	af 93       	push	r26
     1a4:	bf 93       	push	r27
     1a6:	ef 93       	push	r30
     1a8:	ff 93       	push	r31
	// get the time now
	g_Timer1_new_time = Get_millis();
     1aa:	0e 94 e9 15 	call	0x2bd2	; 0x2bd2 <Get_millis>
     1ae:	8b 01       	movw	r16, r22
     1b0:	9c 01       	movw	r18, r24
     1b2:	60 93 ff 0a 	sts	0x0AFF, r22	; 0x800aff <g_Timer1_new_time>
     1b6:	70 93 00 0b 	sts	0x0B00, r23	; 0x800b00 <g_Timer1_new_time+0x1>
     1ba:	80 93 01 0b 	sts	0x0B01, r24	; 0x800b01 <g_Timer1_new_time+0x2>
     1be:	90 93 02 0b 	sts	0x0B02, r25	; 0x800b02 <g_Timer1_new_time+0x3>
	// calculate the diff between now and last interrupt
	g_diff_time = g_Timer1_new_time - g_Timer1_old_time;
     1c2:	40 91 df 0a 	lds	r20, 0x0ADF	; 0x800adf <g_Timer1_old_time>
     1c6:	50 91 e0 0a 	lds	r21, 0x0AE0	; 0x800ae0 <g_Timer1_old_time+0x1>
     1ca:	60 91 e1 0a 	lds	r22, 0x0AE1	; 0x800ae1 <g_Timer1_old_time+0x2>
     1ce:	70 91 e2 0a 	lds	r23, 0x0AE2	; 0x800ae2 <g_Timer1_old_time+0x3>
     1d2:	68 01       	movw	r12, r16
     1d4:	79 01       	movw	r14, r18
     1d6:	c4 1a       	sub	r12, r20
     1d8:	d5 0a       	sbc	r13, r21
     1da:	e6 0a       	sbc	r14, r22
     1dc:	f7 0a       	sbc	r15, r23
     1de:	c7 01       	movw	r24, r14
     1e0:	b6 01       	movw	r22, r12
     1e2:	c0 92 e7 0a 	sts	0x0AE7, r12	; 0x800ae7 <g_diff_time>
     1e6:	d0 92 e8 0a 	sts	0x0AE8, r13	; 0x800ae8 <g_diff_time+0x1>
     1ea:	e0 92 e9 0a 	sts	0x0AE9, r14	; 0x800ae9 <g_diff_time+0x2>
     1ee:	f0 92 ea 0a 	sts	0x0AEA, r15	; 0x800aea <g_diff_time+0x3>
	// save the to the old time to next interrupt
	g_Timer1_old_time = g_Timer1_new_time;
     1f2:	00 93 df 0a 	sts	0x0ADF, r16	; 0x800adf <g_Timer1_old_time>
     1f6:	10 93 e0 0a 	sts	0x0AE0, r17	; 0x800ae0 <g_Timer1_old_time+0x1>
     1fa:	20 93 e1 0a 	sts	0x0AE1, r18	; 0x800ae1 <g_Timer1_old_time+0x2>
     1fe:	30 93 e2 0a 	sts	0x0AE2, r19	; 0x800ae2 <g_Timer1_old_time+0x3>
	//call back function on upper layer to get time
	g_timer1_config->isr_call_back(g_diff_time);
     202:	e0 91 f9 0a 	lds	r30, 0x0AF9	; 0x800af9 <g_timer1_config>
     206:	f0 91 fa 0a 	lds	r31, 0x0AFA	; 0x800afa <g_timer1_config+0x1>
     20a:	02 80       	ldd	r0, Z+2	; 0x02
     20c:	f3 81       	ldd	r31, Z+3	; 0x03
     20e:	e0 2d       	mov	r30, r0
     210:	19 95       	eicall
}
     212:	ff 91       	pop	r31
     214:	ef 91       	pop	r30
     216:	bf 91       	pop	r27
     218:	af 91       	pop	r26
     21a:	9f 91       	pop	r25
     21c:	8f 91       	pop	r24
     21e:	7f 91       	pop	r23
     220:	6f 91       	pop	r22
     222:	5f 91       	pop	r21
     224:	4f 91       	pop	r20
     226:	3f 91       	pop	r19
     228:	2f 91       	pop	r18
     22a:	1f 91       	pop	r17
     22c:	0f 91       	pop	r16
     22e:	ff 90       	pop	r15
     230:	ef 90       	pop	r14
     232:	df 90       	pop	r13
     234:	cf 90       	pop	r12
     236:	0f 90       	pop	r0
     238:	0b be       	out	0x3b, r0	; 59
     23a:	0f 90       	pop	r0
     23c:	0f be       	out	0x3f, r0	; 63
     23e:	0f 90       	pop	r0
     240:	1f 90       	pop	r1
     242:	18 95       	reti

00000244 <__vector_32>:
// intruptted service routine when we have rech the number of  Ticks On Encoder
ISR(TIMER3_COMPA_vect)
{
     244:	1f 92       	push	r1
     246:	0f 92       	push	r0
     248:	0f b6       	in	r0, 0x3f	; 63
     24a:	0f 92       	push	r0
     24c:	11 24       	eor	r1, r1
     24e:	0b b6       	in	r0, 0x3b	; 59
     250:	0f 92       	push	r0
     252:	cf 92       	push	r12
     254:	df 92       	push	r13
     256:	ef 92       	push	r14
     258:	ff 92       	push	r15
     25a:	0f 93       	push	r16
     25c:	1f 93       	push	r17
     25e:	2f 93       	push	r18
     260:	3f 93       	push	r19
     262:	4f 93       	push	r20
     264:	5f 93       	push	r21
     266:	6f 93       	push	r22
     268:	7f 93       	push	r23
     26a:	8f 93       	push	r24
     26c:	9f 93       	push	r25
     26e:	af 93       	push	r26
     270:	bf 93       	push	r27
     272:	ef 93       	push	r30
     274:	ff 93       	push	r31
	// get the time now
	g_Timer3_new_time = Get_millis();
     276:	0e 94 e9 15 	call	0x2bd2	; 0x2bd2 <Get_millis>
     27a:	8b 01       	movw	r16, r22
     27c:	9c 01       	movw	r18, r24
     27e:	60 93 f5 0a 	sts	0x0AF5, r22	; 0x800af5 <g_Timer3_new_time>
     282:	70 93 f6 0a 	sts	0x0AF6, r23	; 0x800af6 <g_Timer3_new_time+0x1>
     286:	80 93 f7 0a 	sts	0x0AF7, r24	; 0x800af7 <g_Timer3_new_time+0x2>
     28a:	90 93 f8 0a 	sts	0x0AF8, r25	; 0x800af8 <g_Timer3_new_time+0x3>
	// calculate the diff between now and last interrupt
	g_diff_time = g_Timer3_new_time - g_Timer3_old_time;
     28e:	40 91 d9 0a 	lds	r20, 0x0AD9	; 0x800ad9 <g_Timer3_old_time>
     292:	50 91 da 0a 	lds	r21, 0x0ADA	; 0x800ada <g_Timer3_old_time+0x1>
     296:	60 91 db 0a 	lds	r22, 0x0ADB	; 0x800adb <g_Timer3_old_time+0x2>
     29a:	70 91 dc 0a 	lds	r23, 0x0ADC	; 0x800adc <g_Timer3_old_time+0x3>
     29e:	68 01       	movw	r12, r16
     2a0:	79 01       	movw	r14, r18
     2a2:	c4 1a       	sub	r12, r20
     2a4:	d5 0a       	sbc	r13, r21
     2a6:	e6 0a       	sbc	r14, r22
     2a8:	f7 0a       	sbc	r15, r23
     2aa:	c7 01       	movw	r24, r14
     2ac:	b6 01       	movw	r22, r12
     2ae:	c0 92 e7 0a 	sts	0x0AE7, r12	; 0x800ae7 <g_diff_time>
     2b2:	d0 92 e8 0a 	sts	0x0AE8, r13	; 0x800ae8 <g_diff_time+0x1>
     2b6:	e0 92 e9 0a 	sts	0x0AE9, r14	; 0x800ae9 <g_diff_time+0x2>
     2ba:	f0 92 ea 0a 	sts	0x0AEA, r15	; 0x800aea <g_diff_time+0x3>
	// save the to the old time to next interrupt
	g_Timer3_old_time = g_Timer3_new_time;
     2be:	00 93 d9 0a 	sts	0x0AD9, r16	; 0x800ad9 <g_Timer3_old_time>
     2c2:	10 93 da 0a 	sts	0x0ADA, r17	; 0x800ada <g_Timer3_old_time+0x1>
     2c6:	20 93 db 0a 	sts	0x0ADB, r18	; 0x800adb <g_Timer3_old_time+0x2>
     2ca:	30 93 dc 0a 	sts	0x0ADC, r19	; 0x800adc <g_Timer3_old_time+0x3>
	//call back function on upper layer to get time
	g_timer3_config->isr_call_back(g_diff_time);
     2ce:	e0 91 dd 0a 	lds	r30, 0x0ADD	; 0x800add <g_timer3_config>
     2d2:	f0 91 de 0a 	lds	r31, 0x0ADE	; 0x800ade <g_timer3_config+0x1>
     2d6:	02 80       	ldd	r0, Z+2	; 0x02
     2d8:	f3 81       	ldd	r31, Z+3	; 0x03
     2da:	e0 2d       	mov	r30, r0
     2dc:	19 95       	eicall
}
     2de:	ff 91       	pop	r31
     2e0:	ef 91       	pop	r30
     2e2:	bf 91       	pop	r27
     2e4:	af 91       	pop	r26
     2e6:	9f 91       	pop	r25
     2e8:	8f 91       	pop	r24
     2ea:	7f 91       	pop	r23
     2ec:	6f 91       	pop	r22
     2ee:	5f 91       	pop	r21
     2f0:	4f 91       	pop	r20
     2f2:	3f 91       	pop	r19
     2f4:	2f 91       	pop	r18
     2f6:	1f 91       	pop	r17
     2f8:	0f 91       	pop	r16
     2fa:	ff 90       	pop	r15
     2fc:	ef 90       	pop	r14
     2fe:	df 90       	pop	r13
     300:	cf 90       	pop	r12
     302:	0f 90       	pop	r0
     304:	0b be       	out	0x3b, r0	; 59
     306:	0f 90       	pop	r0
     308:	0f be       	out	0x3f, r0	; 63
     30a:	0f 90       	pop	r0
     30c:	1f 90       	pop	r1
     30e:	18 95       	reti

00000310 <__vector_42>:
// intruptted service routine when we have rech the number of  Ticks On Encoder
ISR(TIMER4_COMPA_vect)
{
     310:	1f 92       	push	r1
     312:	0f 92       	push	r0
     314:	0f b6       	in	r0, 0x3f	; 63
     316:	0f 92       	push	r0
     318:	11 24       	eor	r1, r1
     31a:	0b b6       	in	r0, 0x3b	; 59
     31c:	0f 92       	push	r0
     31e:	cf 92       	push	r12
     320:	df 92       	push	r13
     322:	ef 92       	push	r14
     324:	ff 92       	push	r15
     326:	0f 93       	push	r16
     328:	1f 93       	push	r17
     32a:	2f 93       	push	r18
     32c:	3f 93       	push	r19
     32e:	4f 93       	push	r20
     330:	5f 93       	push	r21
     332:	6f 93       	push	r22
     334:	7f 93       	push	r23
     336:	8f 93       	push	r24
     338:	9f 93       	push	r25
     33a:	af 93       	push	r26
     33c:	bf 93       	push	r27
     33e:	ef 93       	push	r30
     340:	ff 93       	push	r31
	// get the time now
	g_Timer4_new_time = Get_millis();
     342:	0e 94 e9 15 	call	0x2bd2	; 0x2bd2 <Get_millis>
     346:	8b 01       	movw	r16, r22
     348:	9c 01       	movw	r18, r24
     34a:	60 93 eb 0a 	sts	0x0AEB, r22	; 0x800aeb <g_Timer4_new_time>
     34e:	70 93 ec 0a 	sts	0x0AEC, r23	; 0x800aec <g_Timer4_new_time+0x1>
     352:	80 93 ed 0a 	sts	0x0AED, r24	; 0x800aed <g_Timer4_new_time+0x2>
     356:	90 93 ee 0a 	sts	0x0AEE, r25	; 0x800aee <g_Timer4_new_time+0x3>
	// calculate the diff between now and last interrupt
	g_diff_time = g_Timer4_new_time - g_Timer4_old_time;
     35a:	40 91 fb 0a 	lds	r20, 0x0AFB	; 0x800afb <g_Timer4_old_time>
     35e:	50 91 fc 0a 	lds	r21, 0x0AFC	; 0x800afc <g_Timer4_old_time+0x1>
     362:	60 91 fd 0a 	lds	r22, 0x0AFD	; 0x800afd <g_Timer4_old_time+0x2>
     366:	70 91 fe 0a 	lds	r23, 0x0AFE	; 0x800afe <g_Timer4_old_time+0x3>
     36a:	68 01       	movw	r12, r16
     36c:	79 01       	movw	r14, r18
     36e:	c4 1a       	sub	r12, r20
     370:	d5 0a       	sbc	r13, r21
     372:	e6 0a       	sbc	r14, r22
     374:	f7 0a       	sbc	r15, r23
     376:	c7 01       	movw	r24, r14
     378:	b6 01       	movw	r22, r12
     37a:	c0 92 e7 0a 	sts	0x0AE7, r12	; 0x800ae7 <g_diff_time>
     37e:	d0 92 e8 0a 	sts	0x0AE8, r13	; 0x800ae8 <g_diff_time+0x1>
     382:	e0 92 e9 0a 	sts	0x0AE9, r14	; 0x800ae9 <g_diff_time+0x2>
     386:	f0 92 ea 0a 	sts	0x0AEA, r15	; 0x800aea <g_diff_time+0x3>
	// save the to the old time to next interrupt
	g_Timer4_old_time = g_Timer4_new_time;
     38a:	00 93 fb 0a 	sts	0x0AFB, r16	; 0x800afb <g_Timer4_old_time>
     38e:	10 93 fc 0a 	sts	0x0AFC, r17	; 0x800afc <g_Timer4_old_time+0x1>
     392:	20 93 fd 0a 	sts	0x0AFD, r18	; 0x800afd <g_Timer4_old_time+0x2>
     396:	30 93 fe 0a 	sts	0x0AFE, r19	; 0x800afe <g_Timer4_old_time+0x3>
	//call back function on upper layer to get time
	g_timer4_config->isr_call_back(g_diff_time);
     39a:	e0 91 ef 0a 	lds	r30, 0x0AEF	; 0x800aef <g_timer4_config>
     39e:	f0 91 f0 0a 	lds	r31, 0x0AF0	; 0x800af0 <g_timer4_config+0x1>
     3a2:	02 80       	ldd	r0, Z+2	; 0x02
     3a4:	f3 81       	ldd	r31, Z+3	; 0x03
     3a6:	e0 2d       	mov	r30, r0
     3a8:	19 95       	eicall
}
     3aa:	ff 91       	pop	r31
     3ac:	ef 91       	pop	r30
     3ae:	bf 91       	pop	r27
     3b0:	af 91       	pop	r26
     3b2:	9f 91       	pop	r25
     3b4:	8f 91       	pop	r24
     3b6:	7f 91       	pop	r23
     3b8:	6f 91       	pop	r22
     3ba:	5f 91       	pop	r21
     3bc:	4f 91       	pop	r20
     3be:	3f 91       	pop	r19
     3c0:	2f 91       	pop	r18
     3c2:	1f 91       	pop	r17
     3c4:	0f 91       	pop	r16
     3c6:	ff 90       	pop	r15
     3c8:	ef 90       	pop	r14
     3ca:	df 90       	pop	r13
     3cc:	cf 90       	pop	r12
     3ce:	0f 90       	pop	r0
     3d0:	0b be       	out	0x3b, r0	; 59
     3d2:	0f 90       	pop	r0
     3d4:	0f be       	out	0x3f, r0	; 63
     3d6:	0f 90       	pop	r0
     3d8:	1f 90       	pop	r1
     3da:	18 95       	reti

000003dc <__vector_47>:
// intruptted service routine when we have rech the number of  Ticks On Encoder
ISR(TIMER5_COMPA_vect)
{
     3dc:	1f 92       	push	r1
     3de:	0f 92       	push	r0
     3e0:	0f b6       	in	r0, 0x3f	; 63
     3e2:	0f 92       	push	r0
     3e4:	11 24       	eor	r1, r1
     3e6:	0b b6       	in	r0, 0x3b	; 59
     3e8:	0f 92       	push	r0
     3ea:	2f 93       	push	r18
     3ec:	3f 93       	push	r19
     3ee:	4f 93       	push	r20
     3f0:	5f 93       	push	r21
     3f2:	6f 93       	push	r22
     3f4:	7f 93       	push	r23
     3f6:	8f 93       	push	r24
     3f8:	9f 93       	push	r25
     3fa:	af 93       	push	r26
     3fc:	bf 93       	push	r27
     3fe:	ef 93       	push	r30
     400:	ff 93       	push	r31
	// calculate the diff between now and last interrupt
	g_diff_time = g_Timer5_new_time - g_Timer5_old_time;
	// save the to the old time to next interrupt
	g_Timer5_old_time = g_Timer5_new_time;*/
	// clear the counter
	UART0_putc('a');
     402:	81 e6       	ldi	r24, 0x61	; 97
     404:	e4 d2       	rcall	.+1480   	; 0x9ce <UART0_putc>
	TIMER5_COUNT_L = 0;
     406:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <__TEXT_REGION_LENGTH__+0x700124>
	//call back function on upper layer to get time
	g_timer5_config->isr_call_back(g_diff_time);
     40a:	60 91 e7 0a 	lds	r22, 0x0AE7	; 0x800ae7 <g_diff_time>
     40e:	70 91 e8 0a 	lds	r23, 0x0AE8	; 0x800ae8 <g_diff_time+0x1>
     412:	80 91 e9 0a 	lds	r24, 0x0AE9	; 0x800ae9 <g_diff_time+0x2>
     416:	90 91 ea 0a 	lds	r25, 0x0AEA	; 0x800aea <g_diff_time+0x3>
     41a:	e0 91 03 0b 	lds	r30, 0x0B03	; 0x800b03 <g_timer5_config>
     41e:	f0 91 04 0b 	lds	r31, 0x0B04	; 0x800b04 <g_timer5_config+0x1>
     422:	02 80       	ldd	r0, Z+2	; 0x02
     424:	f3 81       	ldd	r31, Z+3	; 0x03
     426:	e0 2d       	mov	r30, r0
     428:	19 95       	eicall
	
}
     42a:	ff 91       	pop	r31
     42c:	ef 91       	pop	r30
     42e:	bf 91       	pop	r27
     430:	af 91       	pop	r26
     432:	9f 91       	pop	r25
     434:	8f 91       	pop	r24
     436:	7f 91       	pop	r23
     438:	6f 91       	pop	r22
     43a:	5f 91       	pop	r21
     43c:	4f 91       	pop	r20
     43e:	3f 91       	pop	r19
     440:	2f 91       	pop	r18
     442:	0f 90       	pop	r0
     444:	0b be       	out	0x3b, r0	; 59
     446:	0f 90       	pop	r0
     448:	0f be       	out	0x3f, r0	; 63
     44a:	0f 90       	pop	r0
     44c:	1f 90       	pop	r1
     44e:	18 95       	reti

00000450 <LCD_post_transmission>:
static void LCD_pre_transmission(void) {
	Modbus_change_state(LCD,HIGH);
}

static void LCD_post_transmission(void) {
	Modbus_change_state(LCD,LOW);
     450:	60 e0       	ldi	r22, 0x00	; 0
     452:	80 e0       	ldi	r24, 0x00	; 0
     454:	dc c1       	rjmp	.+952    	; 0x80e <Modbus_change_state>
     456:	08 95       	ret

00000458 <LCD_pre_transmission>:



/* _____callback functions_____________________________________________________ */
static void LCD_pre_transmission(void) {
	Modbus_change_state(LCD,HIGH);
     458:	61 e0       	ldi	r22, 0x01	; 1
     45a:	80 e0       	ldi	r24, 0x00	; 0
     45c:	d8 c1       	rjmp	.+944    	; 0x80e <Modbus_change_state>
     45e:	08 95       	ret

00000460 <Lcd_init>:


/* _____initialization Global_____________________________________________________ */
void Lcd_init(UART_Modules uart_n,uint32_t baudrate,uint8_t slaveID){
//make sure that DIO_init called first	
	g_LCD_modbus_config.slave_address = slaveID;
     460:	e8 e7       	ldi	r30, 0x78	; 120
     462:	f2 e0       	ldi	r31, 0x02	; 2
     464:	20 83       	st	Z, r18
	g_LCD_modbus_config.uart_num = uart_n;
     466:	81 83       	std	Z+1, r24	; 0x01
	g_LCD_modbus_config.baud_rate= baudrate;
     468:	42 83       	std	Z+2, r20	; 0x02
     46a:	53 83       	std	Z+3, r21	; 0x03
     46c:	64 83       	std	Z+4, r22	; 0x04
     46e:	75 83       	std	Z+5, r23	; 0x05
	g_LCD_modbus_config.pre_transmission = LCD_pre_transmission;
     470:	8c e2       	ldi	r24, 0x2C	; 44
     472:	92 e0       	ldi	r25, 0x02	; 2
     474:	97 83       	std	Z+7, r25	; 0x07
     476:	86 83       	std	Z+6, r24	; 0x06
	g_LCD_modbus_config.post_transmission = LCD_post_transmission;
     478:	88 e2       	ldi	r24, 0x28	; 40
     47a:	92 e0       	ldi	r25, 0x02	; 2
     47c:	91 87       	std	Z+9, r25	; 0x09
     47e:	80 87       	std	Z+8, r24	; 0x08
	Modbus_init(LCD , &(g_LCD_modbus_config));
     480:	bf 01       	movw	r22, r30
     482:	80 e0       	ldi	r24, 0x00	; 0
     484:	01 c0       	rjmp	.+2      	; 0x488 <Modbus_init>
     486:	08 95       	ret

00000488 <Modbus_init>:
Call once , typically within setup().

*/


void Modbus_init(uint8_t device_num, modbus_config* mod){
     488:	fb 01       	movw	r30, r22

	//
	static uint8_t UART1_used=0;
	static uint8_t UART2_used=0;
	static uint8_t UART3_used=0;
	if(device_num  == 0){
     48a:	81 11       	cpse	r24, r1
     48c:	86 c0       	rjmp	.+268    	; 0x59a <Modbus_init+0x112>
		g_mod0_slave = mod->slave_address;
     48e:	80 81       	ld	r24, Z
     490:	80 93 a6 02 	sts	0x02A6, r24	; 0x8002a6 <g_mod0_slave>
		g_mod0_uart_no = mod->uart_num;
     494:	41 81       	ldd	r20, Z+1	; 0x01
		g_mod0_baud_rate = mod->baud_rate;
     496:	62 81       	ldd	r22, Z+2	; 0x02
     498:	73 81       	ldd	r23, Z+3	; 0x03
     49a:	84 81       	ldd	r24, Z+4	; 0x04
     49c:	95 81       	ldd	r25, Z+5	; 0x05

		g_mod0_pre_transmission = mod->pre_transmission;
     49e:	26 81       	ldd	r18, Z+6	; 0x06
     4a0:	37 81       	ldd	r19, Z+7	; 0x07
     4a2:	30 93 a1 02 	sts	0x02A1, r19	; 0x8002a1 <g_mod0_pre_transmission+0x1>
     4a6:	20 93 a0 02 	sts	0x02A0, r18	; 0x8002a0 <g_mod0_pre_transmission>
		g_mod0_post_transmission = mod->post_transmission;
     4aa:	20 85       	ldd	r18, Z+8	; 0x08
     4ac:	31 85       	ldd	r19, Z+9	; 0x09
     4ae:	30 93 9f 02 	sts	0x029F, r19	; 0x80029f <g_mod0_post_transmission+0x1>
     4b2:	20 93 9e 02 	sts	0x029E, r18	; 0x80029e <g_mod0_post_transmission>

		g_mod0_idle = 0;
     4b6:	10 92 a3 02 	sts	0x02A3, r1	; 0x8002a3 <g_mod0_idle+0x1>
     4ba:	10 92 a2 02 	sts	0x02A2, r1	; 0x8002a2 <g_mod0_idle>
		g_mod0_response_buffer_index = 0;
     4be:	10 92 a5 02 	sts	0x02A5, r1	; 0x8002a5 <g_mod0_response_buffer_index>
		g_mod0_response_buffer_length = 0;
     4c2:	10 92 a4 02 	sts	0x02A4, r1	; 0x8002a4 <g_mod0_response_buffer_length>
		if(UART1 == g_mod0_uart_no){
     4c6:	41 30       	cpi	r20, 0x01	; 1
     4c8:	09 f5       	brne	.+66     	; 0x50c <Modbus_init+0x84>
			if(0 == UART1_used){//uart1 not used
     4ca:	20 91 84 02 	lds	r18, 0x0284	; 0x800284 <UART1_used.1994>
     4ce:	21 11       	cpse	r18, r1
     4d0:	c8 c0       	rjmp	.+400    	; 0x662 <Modbus_init+0x1da>
				UART1_used = 1;
     4d2:	21 e0       	ldi	r18, 0x01	; 1
     4d4:	20 93 84 02 	sts	0x0284, r18	; 0x800284 <UART1_used.1994>
				UART1_init(g_mod0_baud_rate);
     4d8:	2b d3       	rcall	.+1622   	; 0xb30 <UART1_init>
				g_mod0_Serial_available = UART1_available;
     4da:	86 e2       	ldi	r24, 0x26	; 38
     4dc:	96 e0       	ldi	r25, 0x06	; 6
     4de:	90 93 97 02 	sts	0x0297, r25	; 0x800297 <g_mod0_Serial_available+0x1>
     4e2:	80 93 96 02 	sts	0x0296, r24	; 0x800296 <g_mod0_Serial_available>
				g_mod0_Serial_peek = UART1_peek;
				g_mod0_Serial_flush = UART1_flush;
     4e6:	84 e3       	ldi	r24, 0x34	; 52
     4e8:	96 e0       	ldi	r25, 0x06	; 6
     4ea:	90 93 99 02 	sts	0x0299, r25	; 0x800299 <g_mod0_Serial_flush+0x1>
     4ee:	80 93 98 02 	sts	0x0298, r24	; 0x800298 <g_mod0_Serial_flush>
				g_mod0_Serial_puts = UART1_puts;
				g_mod0_Serial_getc = UART1_getc;
     4f2:	8d ee       	ldi	r24, 0xED	; 237
     4f4:	95 e0       	ldi	r25, 0x05	; 5
     4f6:	90 93 9b 02 	sts	0x029B, r25	; 0x80029b <g_mod0_Serial_getc+0x1>
     4fa:	80 93 9a 02 	sts	0x029A, r24	; 0x80029a <g_mod0_Serial_getc>
				g_mod0_Serial_putc = UART1_putc;
     4fe:	8d e0       	ldi	r24, 0x0D	; 13
     500:	96 e0       	ldi	r25, 0x06	; 6
     502:	90 93 9d 02 	sts	0x029D, r25	; 0x80029d <g_mod0_Serial_putc+0x1>
     506:	80 93 9c 02 	sts	0x029C, r24	; 0x80029c <g_mod0_Serial_putc>
     50a:	08 95       	ret
			}
			else {
				//error uart1 used before
			}
		}
		else if(UART2 == g_mod0_uart_no){
     50c:	42 30       	cpi	r20, 0x02	; 2
     50e:	09 f5       	brne	.+66     	; 0x552 <Modbus_init+0xca>
			if(0 == UART2_used){//uart2 not used
     510:	20 91 83 02 	lds	r18, 0x0283	; 0x800283 <UART2_used.1995>
     514:	21 11       	cpse	r18, r1
     516:	a5 c0       	rjmp	.+330    	; 0x662 <Modbus_init+0x1da>
				UART2_used = 1;
     518:	21 e0       	ldi	r18, 0x01	; 1
     51a:	20 93 83 02 	sts	0x0283, r18	; 0x800283 <UART2_used.1995>
				UART2_init(g_mod0_baud_rate);
     51e:	17 d4       	rcall	.+2094   	; 0xd4e <UART2_init>
				g_mod0_Serial_available = UART2_available;
     520:	82 e3       	ldi	r24, 0x32	; 50
     522:	97 e0       	ldi	r25, 0x07	; 7
     524:	90 93 97 02 	sts	0x0297, r25	; 0x800297 <g_mod0_Serial_available+0x1>
     528:	80 93 96 02 	sts	0x0296, r24	; 0x800296 <g_mod0_Serial_available>
				g_mod0_Serial_peek = UART2_peek;
				g_mod0_Serial_flush = UART2_flush;
     52c:	80 e4       	ldi	r24, 0x40	; 64
     52e:	97 e0       	ldi	r25, 0x07	; 7
     530:	90 93 99 02 	sts	0x0299, r25	; 0x800299 <g_mod0_Serial_flush+0x1>
     534:	80 93 98 02 	sts	0x0298, r24	; 0x800298 <g_mod0_Serial_flush>
				g_mod0_Serial_puts = UART2_puts;
				g_mod0_Serial_getc = UART2_getc;
     538:	8c ef       	ldi	r24, 0xFC	; 252
     53a:	96 e0       	ldi	r25, 0x06	; 6
     53c:	90 93 9b 02 	sts	0x029B, r25	; 0x80029b <g_mod0_Serial_getc+0x1>
     540:	80 93 9a 02 	sts	0x029A, r24	; 0x80029a <g_mod0_Serial_getc>
				g_mod0_Serial_putc = UART2_putc;
     544:	89 e1       	ldi	r24, 0x19	; 25
     546:	97 e0       	ldi	r25, 0x07	; 7
     548:	90 93 9d 02 	sts	0x029D, r25	; 0x80029d <g_mod0_Serial_putc+0x1>
     54c:	80 93 9c 02 	sts	0x029C, r24	; 0x80029c <g_mod0_Serial_putc>
     550:	08 95       	ret
			}
			else{
				//error uart2 used before
			}
		}
		else if(UART3 == g_mod0_uart_no){
     552:	43 30       	cpi	r20, 0x03	; 3
     554:	09 f0       	breq	.+2      	; 0x558 <Modbus_init+0xd0>
     556:	85 c0       	rjmp	.+266    	; 0x662 <Modbus_init+0x1da>
			if(0 == UART3_used){//uart2 not used
     558:	20 91 82 02 	lds	r18, 0x0282	; 0x800282 <UART3_used.1996>
     55c:	21 11       	cpse	r18, r1
     55e:	81 c0       	rjmp	.+258    	; 0x662 <Modbus_init+0x1da>
				UART3_used = 1;
     560:	21 e0       	ldi	r18, 0x01	; 1
     562:	20 93 82 02 	sts	0x0282, r18	; 0x800282 <UART3_used.1996>
				UART3_init(g_mod0_baud_rate);
     566:	ff d4       	rcall	.+2558   	; 0xf66 <UART3_init>
				g_mod0_Serial_available = UART3_available;
     568:	8e e3       	ldi	r24, 0x3E	; 62
     56a:	98 e0       	ldi	r25, 0x08	; 8
     56c:	90 93 97 02 	sts	0x0297, r25	; 0x800297 <g_mod0_Serial_available+0x1>
     570:	80 93 96 02 	sts	0x0296, r24	; 0x800296 <g_mod0_Serial_available>
				g_mod0_Serial_peek = UART3_peek;
				g_mod0_Serial_flush = UART3_flush;
     574:	8c e4       	ldi	r24, 0x4C	; 76
     576:	98 e0       	ldi	r25, 0x08	; 8
     578:	90 93 99 02 	sts	0x0299, r25	; 0x800299 <g_mod0_Serial_flush+0x1>
     57c:	80 93 98 02 	sts	0x0298, r24	; 0x800298 <g_mod0_Serial_flush>
				g_mod0_Serial_puts = UART3_puts;
				g_mod0_Serial_getc = UART3_getc;
     580:	88 e0       	ldi	r24, 0x08	; 8
     582:	98 e0       	ldi	r25, 0x08	; 8
     584:	90 93 9b 02 	sts	0x029B, r25	; 0x80029b <g_mod0_Serial_getc+0x1>
     588:	80 93 9a 02 	sts	0x029A, r24	; 0x80029a <g_mod0_Serial_getc>
				g_mod0_Serial_putc = UART3_putc;
     58c:	85 e2       	ldi	r24, 0x25	; 37
     58e:	98 e0       	ldi	r25, 0x08	; 8
     590:	90 93 9d 02 	sts	0x029D, r25	; 0x80029d <g_mod0_Serial_putc+0x1>
     594:	80 93 9c 02 	sts	0x029C, r24	; 0x80029c <g_mod0_Serial_putc>
     598:	08 95       	ret




	}
	else if(device_num == 1){
     59a:	81 30       	cpi	r24, 0x01	; 1
     59c:	09 f0       	breq	.+2      	; 0x5a0 <Modbus_init+0x118>
     59e:	61 c0       	rjmp	.+194    	; 0x662 <Modbus_init+0x1da>
		g_mod1_slave = mod->slave_address;
     5a0:	80 81       	ld	r24, Z
     5a2:	80 93 95 02 	sts	0x0295, r24	; 0x800295 <g_mod1_slave>
		g_mod1_uart_no = mod->uart_num;
     5a6:	41 81       	ldd	r20, Z+1	; 0x01
		g_mod1_baud_rate = mod->baud_rate;
     5a8:	62 81       	ldd	r22, Z+2	; 0x02
     5aa:	73 81       	ldd	r23, Z+3	; 0x03
     5ac:	84 81       	ldd	r24, Z+4	; 0x04
     5ae:	95 81       	ldd	r25, Z+5	; 0x05

		g_mod1_pre_transmission = mod->pre_transmission;
     5b0:	26 81       	ldd	r18, Z+6	; 0x06
     5b2:	37 81       	ldd	r19, Z+7	; 0x07
     5b4:	30 93 90 02 	sts	0x0290, r19	; 0x800290 <g_mod1_pre_transmission+0x1>
     5b8:	20 93 8f 02 	sts	0x028F, r18	; 0x80028f <g_mod1_pre_transmission>
		g_mod1_post_transmission = mod->post_transmission;
     5bc:	20 85       	ldd	r18, Z+8	; 0x08
     5be:	31 85       	ldd	r19, Z+9	; 0x09
     5c0:	30 93 8e 02 	sts	0x028E, r19	; 0x80028e <g_mod1_post_transmission+0x1>
     5c4:	20 93 8d 02 	sts	0x028D, r18	; 0x80028d <g_mod1_post_transmission>

		g_mod1_idle = 0;
     5c8:	10 92 92 02 	sts	0x0292, r1	; 0x800292 <g_mod1_idle+0x1>
     5cc:	10 92 91 02 	sts	0x0291, r1	; 0x800291 <g_mod1_idle>
		g_mod1_response_buffer_index = 0;
     5d0:	10 92 94 02 	sts	0x0294, r1	; 0x800294 <g_mod1_response_buffer_index>
		g_mod1_response_buffer_length = 0;
     5d4:	10 92 93 02 	sts	0x0293, r1	; 0x800293 <g_mod1_response_buffer_length>
		if(UART1 == g_mod1_uart_no){
     5d8:	41 30       	cpi	r20, 0x01	; 1
     5da:	09 f5       	brne	.+66     	; 0x61e <Modbus_init+0x196>
			if(0 == UART1_used){//uart1 not used
     5dc:	20 91 84 02 	lds	r18, 0x0284	; 0x800284 <UART1_used.1994>
     5e0:	21 11       	cpse	r18, r1
     5e2:	3f c0       	rjmp	.+126    	; 0x662 <Modbus_init+0x1da>
				UART1_used = 1;
     5e4:	21 e0       	ldi	r18, 0x01	; 1
     5e6:	20 93 84 02 	sts	0x0284, r18	; 0x800284 <UART1_used.1994>
				UART1_init(g_mod1_baud_rate);
     5ea:	a2 d2       	rcall	.+1348   	; 0xb30 <UART1_init>
				g_mod1_Serial_available = UART1_available;
     5ec:	86 e2       	ldi	r24, 0x26	; 38
     5ee:	96 e0       	ldi	r25, 0x06	; 6
     5f0:	90 93 88 02 	sts	0x0288, r25	; 0x800288 <g_mod1_Serial_available+0x1>
     5f4:	80 93 87 02 	sts	0x0287, r24	; 0x800287 <g_mod1_Serial_available>
				g_mod1_Serial_peek = UART1_peek;
				g_mod1_Serial_flush = UART1_flush;
     5f8:	84 e3       	ldi	r24, 0x34	; 52
     5fa:	96 e0       	ldi	r25, 0x06	; 6
     5fc:	90 93 86 02 	sts	0x0286, r25	; 0x800286 <g_mod1_Serial_flush+0x1>
     600:	80 93 85 02 	sts	0x0285, r24	; 0x800285 <g_mod1_Serial_flush>
				g_mod1_Serial_puts = UART1_puts;
				g_mod1_Serial_getc = UART1_getc;
     604:	8d ee       	ldi	r24, 0xED	; 237
     606:	95 e0       	ldi	r25, 0x05	; 5
     608:	90 93 8a 02 	sts	0x028A, r25	; 0x80028a <g_mod1_Serial_getc+0x1>
     60c:	80 93 89 02 	sts	0x0289, r24	; 0x800289 <g_mod1_Serial_getc>
				g_mod1_Serial_putc = UART1_putc;
     610:	8d e0       	ldi	r24, 0x0D	; 13
     612:	96 e0       	ldi	r25, 0x06	; 6
     614:	90 93 8c 02 	sts	0x028C, r25	; 0x80028c <g_mod1_Serial_putc+0x1>
     618:	80 93 8b 02 	sts	0x028B, r24	; 0x80028b <g_mod1_Serial_putc>
     61c:	08 95       	ret
			}
			else {
				//error uart1 used before
			}
		}
		else if(UART2 == g_mod1_uart_no){
     61e:	42 30       	cpi	r20, 0x02	; 2
     620:	01 f5       	brne	.+64     	; 0x662 <Modbus_init+0x1da>
			if(0 == UART2_used){//uart2 not used
     622:	20 91 83 02 	lds	r18, 0x0283	; 0x800283 <UART2_used.1995>
     626:	21 11       	cpse	r18, r1
				UART2_used = 1;
     628:	1c c0       	rjmp	.+56     	; 0x662 <Modbus_init+0x1da>
     62a:	21 e0       	ldi	r18, 0x01	; 1
     62c:	20 93 83 02 	sts	0x0283, r18	; 0x800283 <UART2_used.1995>
				UART2_init(g_mod1_baud_rate);
     630:	8e d3       	rcall	.+1820   	; 0xd4e <UART2_init>
				g_mod1_Serial_available = UART2_available;
     632:	82 e3       	ldi	r24, 0x32	; 50
     634:	97 e0       	ldi	r25, 0x07	; 7
     636:	90 93 88 02 	sts	0x0288, r25	; 0x800288 <g_mod1_Serial_available+0x1>
     63a:	80 93 87 02 	sts	0x0287, r24	; 0x800287 <g_mod1_Serial_available>
				g_mod1_Serial_peek = UART2_peek;
				g_mod1_Serial_flush = UART2_flush;
     63e:	80 e4       	ldi	r24, 0x40	; 64
     640:	97 e0       	ldi	r25, 0x07	; 7
     642:	90 93 86 02 	sts	0x0286, r25	; 0x800286 <g_mod1_Serial_flush+0x1>
     646:	80 93 85 02 	sts	0x0285, r24	; 0x800285 <g_mod1_Serial_flush>
				g_mod1_Serial_puts = UART2_puts;
				g_mod1_Serial_getc = UART2_getc;
     64a:	8c ef       	ldi	r24, 0xFC	; 252
     64c:	96 e0       	ldi	r25, 0x06	; 6
     64e:	90 93 8a 02 	sts	0x028A, r25	; 0x80028a <g_mod1_Serial_getc+0x1>
     652:	80 93 89 02 	sts	0x0289, r24	; 0x800289 <g_mod1_Serial_getc>
				g_mod1_Serial_putc = UART2_putc;
     656:	89 e1       	ldi	r24, 0x19	; 25
     658:	97 e0       	ldi	r25, 0x07	; 7
     65a:	90 93 8c 02 	sts	0x028C, r25	; 0x80028c <g_mod1_Serial_putc+0x1>
     65e:	80 93 8b 02 	sts	0x028B, r24	; 0x80028b <g_mod1_Serial_putc>
     662:	08 95       	ret

00000664 <vTask2>:
	}
}
static void vTask2(void* pvParameters)
{
	while(1){
		Test++;
     664:	80 91 a7 02 	lds	r24, 0x02A7	; 0x8002a7 <Test>
     668:	90 91 a8 02 	lds	r25, 0x02A8	; 0x8002a8 <Test+0x1>
     66c:	01 96       	adiw	r24, 0x01	; 1
     66e:	90 93 a8 02 	sts	0x02A8, r25	; 0x8002a8 <Test+0x1>
     672:	80 93 a7 02 	sts	0x02A7, r24	; 0x8002a7 <Test>
		UART0_puts("Vtask2 sends data = ");
     676:	80 e0       	ldi	r24, 0x00	; 0
     678:	92 e0       	ldi	r25, 0x02	; 2
     67a:	de d1       	rcall	.+956    	; 0xa38 <UART0_puts>
		UART0_OutUDec(Test);
     67c:	60 91 a7 02 	lds	r22, 0x02A7	; 0x8002a7 <Test>
     680:	70 91 a8 02 	lds	r23, 0x02A8	; 0x8002a8 <Test+0x1>
     684:	80 e0       	ldi	r24, 0x00	; 0
     686:	90 e0       	ldi	r25, 0x00	; 0
     688:	bb d1       	rcall	.+886    	; 0xa00 <UART0_OutUDec>
		UART0_putc('\n');
     68a:	8a e0       	ldi	r24, 0x0A	; 10
     68c:	a0 d1       	rcall	.+832    	; 0x9ce <UART0_putc>
     68e:	20 e0       	ldi	r18, 0x00	; 0
		xSemaphoreGive(Sema_Test_handle);
     690:	40 e0       	ldi	r20, 0x00	; 0
     692:	50 e0       	ldi	r21, 0x00	; 0
     694:	60 e0       	ldi	r22, 0x00	; 0
     696:	70 e0       	ldi	r23, 0x00	; 0
     698:	80 91 c8 02 	lds	r24, 0x02C8	; 0x8002c8 <Sema_Test_handle>
     69c:	90 91 c9 02 	lds	r25, 0x02C9	; 0x8002c9 <Sema_Test_handle+0x1>
     6a0:	0e 94 34 0c 	call	0x1868	; 0x1868 <xQueueGenericSend>
		UART0_puts("Vtask2 Gives the semaphore\n");
     6a4:	85 e1       	ldi	r24, 0x15	; 21
     6a6:	92 e0       	ldi	r25, 0x02	; 2
     6a8:	c7 d1       	rcall	.+910    	; 0xa38 <UART0_puts>
     6aa:	8a ef       	ldi	r24, 0xFA	; 250
		vTaskDelay(4000/portTICK_PERIOD_MS);
     6ac:	90 e0       	ldi	r25, 0x00	; 0
     6ae:	0e 94 3b 11 	call	0x2276	; 0x2276 <vTaskDelay>
     6b2:	d8 cf       	rjmp	.-80     	; 0x664 <vTask2>

000006b4 <vTask1>:
     6b4:	81 e3       	ldi	r24, 0x31	; 49
{

	
	while(1)
	{
		UART0_puts("Vtask1 receives data \n");
     6b6:	92 e0       	ldi	r25, 0x02	; 2
     6b8:	bf d1       	rcall	.+894    	; 0xa38 <UART0_puts>
		xSemaphoreTake(Sema_Test_handle,portMAX_DELAY);
     6ba:	6f ef       	ldi	r22, 0xFF	; 255
     6bc:	7f ef       	ldi	r23, 0xFF	; 255
     6be:	80 91 c8 02 	lds	r24, 0x02C8	; 0x8002c8 <Sema_Test_handle>
     6c2:	90 91 c9 02 	lds	r25, 0x02C9	; 0x8002c9 <Sema_Test_handle+0x1>
     6c6:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <xQueueSemaphoreTake>
		UART0_puts("Vtask1 Released data= ");
     6ca:	88 e4       	ldi	r24, 0x48	; 72
     6cc:	92 e0       	ldi	r25, 0x02	; 2
     6ce:	b4 d1       	rcall	.+872    	; 0xa38 <UART0_puts>
		UART0_OutUDec(Test);
     6d0:	60 91 a7 02 	lds	r22, 0x02A7	; 0x8002a7 <Test>
     6d4:	70 91 a8 02 	lds	r23, 0x02A8	; 0x8002a8 <Test+0x1>
     6d8:	80 e0       	ldi	r24, 0x00	; 0
     6da:	90 e0       	ldi	r25, 0x00	; 0
		UART0_putc('\n');
     6dc:	91 d1       	rcall	.+802    	; 0xa00 <UART0_OutUDec>
     6de:	8a e0       	ldi	r24, 0x0A	; 10
     6e0:	76 d1       	rcall	.+748    	; 0x9ce <UART0_putc>
     6e2:	e8 cf       	rjmp	.-48     	; 0x6b4 <vTask1>

000006e4 <main>:
static SemaphoreHandle_t Sema_Test_handle;
static StaticSemaphore_t Sema_Test_Buffer;
static uint16_t Test;

int main(void) {
	DDRE = 0xFF;
     6e4:	8f ef       	ldi	r24, 0xFF	; 255
     6e6:	8d b9       	out	0x0d, r24	; 13
	UART0_init(9600);
     6e8:	60 e8       	ldi	r22, 0x80	; 128
     6ea:	75 e2       	ldi	r23, 0x25	; 37
     6ec:	80 e0       	ldi	r24, 0x00	; 0
     6ee:	90 e0       	ldi	r25, 0x00	; 0
     6f0:	19 d1       	rcall	.+562    	; 0x924 <UART0_init>
    System_init();
     6f2:	0e 94 cb 15 	call	0x2b96	; 0x2b96 <System_init>
		
	
	/* Create the task without using any dynamic memory allocation. */
	xHandle1 = xTaskCreateStatic(
     6f6:	0f 2e       	mov	r0, r31
     6f8:	f5 e0       	ldi	r31, 0x05	; 5
     6fa:	cf 2e       	mov	r12, r31
     6fc:	fb e0       	ldi	r31, 0x0B	; 11
     6fe:	df 2e       	mov	r13, r31
     700:	f0 2d       	mov	r31, r0
     702:	0f 2e       	mov	r0, r31
     704:	f0 e6       	ldi	r31, 0x60	; 96
     706:	ef 2e       	mov	r14, r31
     708:	fb e0       	ldi	r31, 0x0B	; 11
     70a:	ff 2e       	mov	r15, r31
     70c:	f0 2d       	mov	r31, r0
     70e:	02 e0       	ldi	r16, 0x02	; 2
     710:	20 e0       	ldi	r18, 0x00	; 0
     712:	30 e0       	ldi	r19, 0x00	; 0
     714:	48 ec       	ldi	r20, 0xC8	; 200
     716:	50 e0       	ldi	r21, 0x00	; 0
     718:	6f e5       	ldi	r22, 0x5F	; 95
     71a:	72 e0       	ldi	r23, 0x02	; 2
     71c:	8a e5       	ldi	r24, 0x5A	; 90
     71e:	93 e0       	ldi	r25, 0x03	; 3
     720:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <xTaskCreateStatic>
     724:	90 93 cd 02 	sts	0x02CD, r25	; 0x8002cd <xHandle1+0x1>
     728:	80 93 cc 02 	sts	0x02CC, r24	; 0x8002cc <xHandle1>
					NULL, /* Parameter passed into the task. */
					2,/* Priority at which the task is created. */
					xStack1, /* Array to use as the task's stack. */
					&xTask1Buffer); /* Variable to hold the task's data structure. */
	
	xHandle2 = xTaskCreateStatic(
     72c:	0f 2e       	mov	r0, r31
     72e:	fd e2       	ldi	r31, 0x2D	; 45
     730:	cf 2e       	mov	r12, r31
     732:	fb e0       	ldi	r31, 0x0B	; 11
     734:	df 2e       	mov	r13, r31
     736:	f0 2d       	mov	r31, r0
     738:	0f 2e       	mov	r0, r31
     73a:	f8 e2       	ldi	r31, 0x28	; 40
     73c:	ef 2e       	mov	r14, r31
     73e:	fc e0       	ldi	r31, 0x0C	; 12
     740:	ff 2e       	mov	r15, r31
     742:	f0 2d       	mov	r31, r0
     744:	20 e0       	ldi	r18, 0x00	; 0
     746:	30 e0       	ldi	r19, 0x00	; 0
     748:	48 ec       	ldi	r20, 0xC8	; 200
     74a:	50 e0       	ldi	r21, 0x00	; 0
     74c:	65 e6       	ldi	r22, 0x65	; 101
     74e:	72 e0       	ldi	r23, 0x02	; 2
     750:	82 e3       	ldi	r24, 0x32	; 50
     752:	93 e0       	ldi	r25, 0x03	; 3
     754:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <xTaskCreateStatic>
     758:	90 93 cb 02 	sts	0x02CB, r25	; 0x8002cb <xHandle2+0x1>
     75c:	80 93 ca 02 	sts	0x02CA, r24	; 0x8002ca <xHandle2>
				NULL, /* Parameter passed into the task. */
				2,/* Priority at which the task is created. */
				xStack2, /* Array to use as the task's stack. */
				&xTask2Buffer ); /* Variable to hold the task's data structure. */

	Sema_Test_handle = xSemaphoreCreateBinaryStatic(&Sema_Test_Buffer);
     760:	03 e0       	ldi	r16, 0x03	; 3
     762:	29 ea       	ldi	r18, 0xA9	; 169
     764:	32 e0       	ldi	r19, 0x02	; 2
     766:	40 e0       	ldi	r20, 0x00	; 0
     768:	50 e0       	ldi	r21, 0x00	; 0
     76a:	60 e0       	ldi	r22, 0x00	; 0
     76c:	81 e0       	ldi	r24, 0x01	; 1
     76e:	0e 94 1f 0c 	call	0x183e	; 0x183e <xQueueGenericCreateStatic>
     772:	90 93 c9 02 	sts	0x02C9, r25	; 0x8002c9 <Sema_Test_handle+0x1>
     776:	80 93 c8 02 	sts	0x02C8, r24	; 0x8002c8 <Sema_Test_handle>
// 		
// 	}
// 	

	  // Start scheduler.
	  vTaskStartScheduler();
     77a:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <vTaskStartScheduler>
     77e:	ff cf       	rjmp	.-2      	; 0x77e <main+0x9a>

00000780 <__vector_29>:
	return returned_data ;
}


ISR(ADC_vect)
{
     780:	1f 92       	push	r1
     782:	0f 92       	push	r0
     784:	0f b6       	in	r0, 0x3f	; 63
     786:	0f 92       	push	r0
     788:	11 24       	eor	r1, r1
     78a:	2f 93       	push	r18
     78c:	8f 93       	push	r24
     78e:	9f 93       	push	r25
	   uint8_t The_low_adc_reg = ADC_DATA_REG_LOW ;
     790:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
	  // get 10 bits out of the high and low register .
	  g_analog_data =  The_low_adc_reg | (ADC_DATA_REG_HIGH <<8);
     794:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
     798:	90 e0       	ldi	r25, 0x00	; 0
     79a:	92 2b       	or	r25, r18
     79c:	90 93 d0 02 	sts	0x02D0, r25	; 0x8002d0 <g_analog_data+0x1>
     7a0:	80 93 cf 02 	sts	0x02CF, r24	; 0x8002cf <g_analog_data>
	  g_converted = 1 ;
     7a4:	81 e0       	ldi	r24, 0x01	; 1
     7a6:	80 93 ce 02 	sts	0x02CE, r24	; 0x8002ce <g_converted>
}
     7aa:	9f 91       	pop	r25
     7ac:	8f 91       	pop	r24
     7ae:	2f 91       	pop	r18
     7b0:	0f 90       	pop	r0
     7b2:	0f be       	out	0x3f, r0	; 63
     7b4:	0f 90       	pop	r0
     7b6:	1f 90       	pop	r1
     7b8:	18 95       	reti

000007ba <DIO_init>:
void Spark_change_state(uint8_t state)
{
	if (HIGH == state)
		SET_BIT(SPARK_DATA_REG , SPARK_PIN);
	else if(LOW == state)
		CLR_BIT(SPARK_DATA_REG , SPARK_PIN);
     7ba:	50 98       	cbi	0x0a, 0	; 10
     7bc:	51 98       	cbi	0x0a, 1	; 10
     7be:	51 98       	cbi	0x0a, 1	; 10
     7c0:	53 98       	cbi	0x0a, 3	; 10
     7c2:	20 98       	cbi	0x04, 0	; 4
     7c4:	55 98       	cbi	0x0a, 5	; 10
     7c6:	54 98       	cbi	0x0a, 4	; 10
     7c8:	3c 9a       	sbi	0x07, 4	; 7
     7ca:	3f 9a       	sbi	0x07, 7	; 7
     7cc:	3d 9a       	sbi	0x07, 5	; 7
     7ce:	39 9a       	sbi	0x07, 1	; 7
     7d0:	39 9a       	sbi	0x07, 1	; 7
     7d2:	57 9a       	sbi	0x0a, 7	; 10
     7d4:	38 9a       	sbi	0x07, 0	; 7
     7d6:	38 98       	cbi	0x07, 0	; 7
     7d8:	56 9a       	sbi	0x0a, 6	; 10
     7da:	3b 9a       	sbi	0x07, 3	; 7
     7dc:	e4 e0       	ldi	r30, 0x04	; 4
     7de:	f1 e0       	ldi	r31, 0x01	; 1
     7e0:	80 81       	ld	r24, Z
     7e2:	84 60       	ori	r24, 0x04	; 4
     7e4:	80 83       	st	Z, r24
     7e6:	3f 9a       	sbi	0x07, 7	; 7
     7e8:	3f 9a       	sbi	0x07, 7	; 7
     7ea:	3f 9a       	sbi	0x07, 7	; 7
     7ec:	e1 e0       	ldi	r30, 0x01	; 1
     7ee:	f1 e0       	ldi	r31, 0x01	; 1
     7f0:	80 81       	ld	r24, Z
     7f2:	8e 7f       	andi	r24, 0xFE	; 254
     7f4:	80 83       	st	Z, r24
     7f6:	80 81       	ld	r24, Z
     7f8:	82 60       	ori	r24, 0x02	; 2
     7fa:	80 83       	st	Z, r24
     7fc:	e2 e0       	ldi	r30, 0x02	; 2
     7fe:	f1 e0       	ldi	r31, 0x01	; 1
     800:	80 81       	ld	r24, Z
     802:	81 60       	ori	r24, 0x01	; 1
     804:	80 83       	st	Z, r24
     806:	52 98       	cbi	0x0a, 2	; 10
     808:	53 9a       	sbi	0x0a, 3	; 10
     80a:	5a 9a       	sbi	0x0b, 2	; 11
     80c:	08 95       	ret

0000080e <Modbus_change_state>:

//_________ MODE BUS initialize and enable______________________//

void Modbus_change_state(uint8_t device ,uint8_t state){
	
	switch (device){
     80e:	88 23       	and	r24, r24
     810:	19 f0       	breq	.+6      	; 0x818 <Modbus_change_state+0xa>
     812:	81 30       	cpi	r24, 0x01	; 1
     814:	89 f0       	breq	.+34     	; 0x838 <Modbus_change_state+0x2a>
     816:	08 95       	ret
		case DEVICE_0:
		 	if (HIGH == state)
     818:	61 30       	cpi	r22, 0x01	; 1
     81a:	31 f4       	brne	.+12     	; 0x828 <Modbus_change_state+0x1a>
		 		SET_BIT(DEVICE_0_MODBUS_DATA_REG , DEVICE_0_MODBUS_PIN);
     81c:	e5 e0       	ldi	r30, 0x05	; 5
     81e:	f1 e0       	ldi	r31, 0x01	; 1
     820:	80 81       	ld	r24, Z
     822:	84 60       	ori	r24, 0x04	; 4
     824:	80 83       	st	Z, r24
     826:	08 95       	ret
		 	else if(LOW == state)
     828:	61 11       	cpse	r22, r1
     82a:	0d c0       	rjmp	.+26     	; 0x846 <Modbus_change_state+0x38>
		 		CLR_BIT(DEVICE_0_MODBUS_DATA_REG , DEVICE_0_MODBUS_PIN);
     82c:	e5 e0       	ldi	r30, 0x05	; 5
     82e:	f1 e0       	ldi	r31, 0x01	; 1
     830:	80 81       	ld	r24, Z
     832:	8b 7f       	andi	r24, 0xFB	; 251
     834:	80 83       	st	Z, r24
     836:	08 95       	ret
			
			break;
		case DEVICE_1:
		     if (HIGH == state)
     838:	61 30       	cpi	r22, 0x01	; 1
     83a:	11 f4       	brne	.+4      	; 0x840 <Modbus_change_state+0x32>
		         SET_BIT(DEVICE_1_MODBUS_DATA_REG , DEVICE_1_MODBUS_PIN);
     83c:	47 9a       	sbi	0x08, 7	; 8
     83e:	08 95       	ret
		     else if(LOW == state)
     840:	61 11       	cpse	r22, r1
     842:	01 c0       	rjmp	.+2      	; 0x846 <Modbus_change_state+0x38>
		         CLR_BIT(DEVICE_1_MODBUS_DATA_REG , DEVICE_1_MODBUS_PIN);
     844:	47 98       	cbi	0x08, 7	; 8
     846:	08 95       	ret

00000848 <__vector_25>:

	while ((c = pgm_read_byte(progmem_s++))) {
		UART3_putc(c);
	}

} /* UART3_puts_p */
     848:	1f 92       	push	r1
     84a:	0f 92       	push	r0
     84c:	0f b6       	in	r0, 0x3f	; 63
     84e:	0f 92       	push	r0
     850:	11 24       	eor	r1, r1
     852:	0b b6       	in	r0, 0x3b	; 59
     854:	0f 92       	push	r0
     856:	2f 93       	push	r18
     858:	3f 93       	push	r19
     85a:	4f 93       	push	r20
     85c:	5f 93       	push	r21
     85e:	8f 93       	push	r24
     860:	9f 93       	push	r25
     862:	ef 93       	push	r30
     864:	ff 93       	push	r31
     866:	20 91 c0 00 	lds	r18, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
     86a:	30 91 c6 00 	lds	r19, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
     86e:	28 71       	andi	r18, 0x18	; 24
     870:	80 91 e6 05 	lds	r24, 0x05E6	; 0x8005e6 <UART_RxHead>
     874:	90 e0       	ldi	r25, 0x00	; 0
     876:	01 96       	adiw	r24, 0x01	; 1
     878:	8f 77       	andi	r24, 0x7F	; 127
     87a:	99 27       	eor	r25, r25
     87c:	40 91 e5 05 	lds	r20, 0x05E5	; 0x8005e5 <UART_RxTail>
     880:	50 e0       	ldi	r21, 0x00	; 0
     882:	84 17       	cp	r24, r20
     884:	95 07       	cpc	r25, r21
     886:	39 f0       	breq	.+14     	; 0x896 <__vector_25+0x4e>
     888:	80 93 e6 05 	sts	0x05E6, r24	; 0x8005e6 <UART_RxHead>
     88c:	fc 01       	movw	r30, r24
     88e:	e7 51       	subi	r30, 0x17	; 23
     890:	fa 4f       	sbci	r31, 0xFA	; 250
     892:	30 83       	st	Z, r19
     894:	01 c0       	rjmp	.+2      	; 0x898 <__vector_25+0x50>
     896:	22 e0       	ldi	r18, 0x02	; 2
     898:	20 93 e4 05 	sts	0x05E4, r18	; 0x8005e4 <UART_LastRxError>
     89c:	ff 91       	pop	r31
     89e:	ef 91       	pop	r30
     8a0:	9f 91       	pop	r25
     8a2:	8f 91       	pop	r24
     8a4:	5f 91       	pop	r21
     8a6:	4f 91       	pop	r20
     8a8:	3f 91       	pop	r19
     8aa:	2f 91       	pop	r18
     8ac:	0f 90       	pop	r0
     8ae:	0b be       	out	0x3b, r0	; 59
     8b0:	0f 90       	pop	r0
     8b2:	0f be       	out	0x3f, r0	; 63
     8b4:	0f 90       	pop	r0
     8b6:	1f 90       	pop	r1
     8b8:	18 95       	reti

000008ba <__vector_26>:
     8ba:	1f 92       	push	r1
     8bc:	0f 92       	push	r0
     8be:	0f b6       	in	r0, 0x3f	; 63
     8c0:	0f 92       	push	r0
     8c2:	11 24       	eor	r1, r1
     8c4:	0b b6       	in	r0, 0x3b	; 59
     8c6:	0f 92       	push	r0
     8c8:	8f 93       	push	r24
     8ca:	9f 93       	push	r25
     8cc:	ef 93       	push	r30
     8ce:	ff 93       	push	r31
     8d0:	90 91 e8 05 	lds	r25, 0x05E8	; 0x8005e8 <UART_TxHead>
     8d4:	80 91 e7 05 	lds	r24, 0x05E7	; 0x8005e7 <UART_TxTail>
     8d8:	98 17       	cp	r25, r24
     8da:	89 f0       	breq	.+34     	; 0x8fe <__vector_26+0x44>
     8dc:	80 91 e7 05 	lds	r24, 0x05E7	; 0x8005e7 <UART_TxTail>
     8e0:	90 e0       	ldi	r25, 0x00	; 0
     8e2:	01 96       	adiw	r24, 0x01	; 1
     8e4:	8f 77       	andi	r24, 0x7F	; 127
     8e6:	99 27       	eor	r25, r25
     8e8:	80 93 e7 05 	sts	0x05E7, r24	; 0x8005e7 <UART_TxTail>
     8ec:	fc 01       	movw	r30, r24
     8ee:	e7 59       	subi	r30, 0x97	; 151
     8f0:	f9 4f       	sbci	r31, 0xF9	; 249
     8f2:	80 81       	ld	r24, Z
     8f4:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
     8f8:	10 92 d4 02 	sts	0x02D4, r1	; 0x8002d4 <UART0_Transmission_end>
     8fc:	08 c0       	rjmp	.+16     	; 0x90e <__vector_26+0x54>
     8fe:	e1 ec       	ldi	r30, 0xC1	; 193
     900:	f0 e0       	ldi	r31, 0x00	; 0
     902:	80 81       	ld	r24, Z
     904:	8f 7d       	andi	r24, 0xDF	; 223
     906:	80 83       	st	Z, r24
     908:	81 e0       	ldi	r24, 0x01	; 1
     90a:	80 93 d4 02 	sts	0x02D4, r24	; 0x8002d4 <UART0_Transmission_end>
     90e:	ff 91       	pop	r31
     910:	ef 91       	pop	r30
     912:	9f 91       	pop	r25
     914:	8f 91       	pop	r24
     916:	0f 90       	pop	r0
     918:	0b be       	out	0x3b, r0	; 59
     91a:	0f 90       	pop	r0
     91c:	0f be       	out	0x3f, r0	; 63
     91e:	0f 90       	pop	r0
     920:	1f 90       	pop	r1
     922:	18 95       	reti

00000924 <UART0_init>:
     924:	0f 93       	push	r16
     926:	1f 93       	push	r17
     928:	8b 01       	movw	r16, r22
     92a:	9c 01       	movw	r18, r24
     92c:	f8 94       	cli
     92e:	10 92 e8 05 	sts	0x05E8, r1	; 0x8005e8 <UART_TxHead>
     932:	10 92 e7 05 	sts	0x05E7, r1	; 0x8005e7 <UART_TxTail>
     936:	10 92 e6 05 	sts	0x05E6, r1	; 0x8005e6 <UART_RxHead>
     93a:	10 92 e5 05 	sts	0x05E5, r1	; 0x8005e5 <UART_RxTail>
     93e:	78 94       	sei
     940:	dc 01       	movw	r26, r24
     942:	cb 01       	movw	r24, r22
     944:	80 58       	subi	r24, 0x80	; 128
     946:	9b 47       	sbci	r25, 0x7B	; 123
     948:	a1 4e       	sbci	r26, 0xE1	; 225
     94a:	bf 4f       	sbci	r27, 0xFF	; 255
     94c:	88 0f       	add	r24, r24
     94e:	99 1f       	adc	r25, r25
     950:	aa 1f       	adc	r26, r26
     952:	bb 1f       	adc	r27, r27
     954:	88 0f       	add	r24, r24
     956:	99 1f       	adc	r25, r25
     958:	aa 1f       	adc	r26, r26
     95a:	bb 1f       	adc	r27, r27
     95c:	bc 01       	movw	r22, r24
     95e:	cd 01       	movw	r24, r26
     960:	66 0f       	add	r22, r22
     962:	77 1f       	adc	r23, r23
     964:	88 1f       	adc	r24, r24
     966:	99 1f       	adc	r25, r25
     968:	00 0f       	add	r16, r16
     96a:	11 1f       	adc	r17, r17
     96c:	22 1f       	adc	r18, r18
     96e:	33 1f       	adc	r19, r19
     970:	00 0f       	add	r16, r16
     972:	11 1f       	adc	r17, r17
     974:	22 1f       	adc	r18, r18
     976:	33 1f       	adc	r19, r19
     978:	a9 01       	movw	r20, r18
     97a:	98 01       	movw	r18, r16
     97c:	22 0f       	add	r18, r18
     97e:	33 1f       	adc	r19, r19
     980:	44 1f       	adc	r20, r20
     982:	55 1f       	adc	r21, r21
     984:	22 0f       	add	r18, r18
     986:	33 1f       	adc	r19, r19
     988:	44 1f       	adc	r20, r20
     98a:	55 1f       	adc	r21, r21
     98c:	0e 94 19 16 	call	0x2c32	; 0x2c32 <__udivmodsi4>
     990:	ba 01       	movw	r22, r20
     992:	a9 01       	movw	r20, r18
     994:	41 50       	subi	r20, 0x01	; 1
     996:	51 09       	sbc	r21, r1
     998:	61 09       	sbc	r22, r1
     99a:	71 09       	sbc	r23, r1
     99c:	57 ff       	sbrs	r21, 7
     99e:	06 c0       	rjmp	.+12     	; 0x9ac <UART0_init+0x88>
     9a0:	82 e0       	ldi	r24, 0x02	; 2
     9a2:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
     9a6:	5f 77       	andi	r21, 0x7F	; 127
     9a8:	66 27       	eor	r22, r22
     9aa:	77 27       	eor	r23, r23
     9ac:	bb 27       	eor	r27, r27
     9ae:	a7 2f       	mov	r26, r23
     9b0:	96 2f       	mov	r25, r22
     9b2:	85 2f       	mov	r24, r21
     9b4:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
     9b8:	40 93 c4 00 	sts	0x00C4, r20	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
     9bc:	88 e9       	ldi	r24, 0x98	; 152
     9be:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
     9c2:	86 e0       	ldi	r24, 0x06	; 6
     9c4:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
     9c8:	1f 91       	pop	r17
     9ca:	0f 91       	pop	r16
     9cc:	08 95       	ret

000009ce <UART0_putc>:
     9ce:	40 91 e8 05 	lds	r20, 0x05E8	; 0x8005e8 <UART_TxHead>
     9d2:	50 e0       	ldi	r21, 0x00	; 0
     9d4:	4f 5f       	subi	r20, 0xFF	; 255
     9d6:	5f 4f       	sbci	r21, 0xFF	; 255
     9d8:	4f 77       	andi	r20, 0x7F	; 127
     9da:	55 27       	eor	r21, r21
     9dc:	20 91 e7 05 	lds	r18, 0x05E7	; 0x8005e7 <UART_TxTail>
     9e0:	30 e0       	ldi	r19, 0x00	; 0
     9e2:	42 17       	cp	r20, r18
     9e4:	53 07       	cpc	r21, r19
     9e6:	d1 f3       	breq	.-12     	; 0x9dc <UART0_putc+0xe>
     9e8:	fa 01       	movw	r30, r20
     9ea:	e7 59       	subi	r30, 0x97	; 151
     9ec:	f9 4f       	sbci	r31, 0xF9	; 249
     9ee:	80 83       	st	Z, r24
     9f0:	40 93 e8 05 	sts	0x05E8, r20	; 0x8005e8 <UART_TxHead>
     9f4:	e1 ec       	ldi	r30, 0xC1	; 193
     9f6:	f0 e0       	ldi	r31, 0x00	; 0
     9f8:	80 81       	ld	r24, Z
     9fa:	80 62       	ori	r24, 0x20	; 32
     9fc:	80 83       	st	Z, r24
     9fe:	08 95       	ret

00000a00 <UART0_OutUDec>:
     a00:	0f 93       	push	r16
     a02:	1f 93       	push	r17
     a04:	cf 93       	push	r28
     a06:	df 93       	push	r29
     a08:	6a 30       	cpi	r22, 0x0A	; 10
     a0a:	71 05       	cpc	r23, r1
     a0c:	81 05       	cpc	r24, r1
     a0e:	91 05       	cpc	r25, r1
     a10:	58 f0       	brcs	.+22     	; 0xa28 <UART0_OutUDec+0x28>
     a12:	2a e0       	ldi	r18, 0x0A	; 10
     a14:	30 e0       	ldi	r19, 0x00	; 0
     a16:	40 e0       	ldi	r20, 0x00	; 0
     a18:	50 e0       	ldi	r21, 0x00	; 0
     a1a:	0e 94 19 16 	call	0x2c32	; 0x2c32 <__udivmodsi4>
     a1e:	06 2f       	mov	r16, r22
     a20:	ca 01       	movw	r24, r20
     a22:	b9 01       	movw	r22, r18
     a24:	ed df       	rcall	.-38     	; 0xa00 <UART0_OutUDec>
     a26:	60 2f       	mov	r22, r16
     a28:	80 e3       	ldi	r24, 0x30	; 48
     a2a:	86 0f       	add	r24, r22
     a2c:	d0 df       	rcall	.-96     	; 0x9ce <UART0_putc>
     a2e:	df 91       	pop	r29
     a30:	cf 91       	pop	r28
     a32:	1f 91       	pop	r17
     a34:	0f 91       	pop	r16
     a36:	08 95       	ret

00000a38 <UART0_puts>:
     a38:	cf 93       	push	r28
     a3a:	df 93       	push	r29
     a3c:	ec 01       	movw	r28, r24
     a3e:	88 81       	ld	r24, Y
     a40:	88 23       	and	r24, r24
     a42:	29 f0       	breq	.+10     	; 0xa4e <UART0_puts+0x16>
     a44:	21 96       	adiw	r28, 0x01	; 1
     a46:	c3 df       	rcall	.-122    	; 0x9ce <UART0_putc>
     a48:	89 91       	ld	r24, Y+
     a4a:	81 11       	cpse	r24, r1
     a4c:	fc cf       	rjmp	.-8      	; 0xa46 <UART0_puts+0xe>
     a4e:	df 91       	pop	r29
     a50:	cf 91       	pop	r28
     a52:	08 95       	ret

00000a54 <__vector_36>:
     a54:	1f 92       	push	r1
     a56:	0f 92       	push	r0
     a58:	0f b6       	in	r0, 0x3f	; 63
     a5a:	0f 92       	push	r0
     a5c:	11 24       	eor	r1, r1
     a5e:	0b b6       	in	r0, 0x3b	; 59
     a60:	0f 92       	push	r0
     a62:	2f 93       	push	r18
     a64:	3f 93       	push	r19
     a66:	4f 93       	push	r20
     a68:	5f 93       	push	r21
     a6a:	8f 93       	push	r24
     a6c:	9f 93       	push	r25
     a6e:	ef 93       	push	r30
     a70:	ff 93       	push	r31
     a72:	20 91 c8 00 	lds	r18, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
     a76:	30 91 ce 00 	lds	r19, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
     a7a:	28 71       	andi	r18, 0x18	; 24
     a7c:	80 91 e1 04 	lds	r24, 0x04E1	; 0x8004e1 <UART1_RxHead>
     a80:	90 e0       	ldi	r25, 0x00	; 0
     a82:	01 96       	adiw	r24, 0x01	; 1
     a84:	8f 77       	andi	r24, 0x7F	; 127
     a86:	99 27       	eor	r25, r25
     a88:	40 91 e0 04 	lds	r20, 0x04E0	; 0x8004e0 <UART1_RxTail>
     a8c:	50 e0       	ldi	r21, 0x00	; 0
     a8e:	84 17       	cp	r24, r20
     a90:	95 07       	cpc	r25, r21
     a92:	39 f0       	breq	.+14     	; 0xaa2 <__vector_36+0x4e>
     a94:	80 93 e1 04 	sts	0x04E1, r24	; 0x8004e1 <UART1_RxHead>
     a98:	fc 01       	movw	r30, r24
     a9a:	ec 51       	subi	r30, 0x1C	; 28
     a9c:	fb 4f       	sbci	r31, 0xFB	; 251
     a9e:	30 83       	st	Z, r19
     aa0:	01 c0       	rjmp	.+2      	; 0xaa4 <__vector_36+0x50>
     aa2:	22 e0       	ldi	r18, 0x02	; 2
     aa4:	20 93 df 04 	sts	0x04DF, r18	; 0x8004df <UART1_LastRxError>
     aa8:	ff 91       	pop	r31
     aaa:	ef 91       	pop	r30
     aac:	9f 91       	pop	r25
     aae:	8f 91       	pop	r24
     ab0:	5f 91       	pop	r21
     ab2:	4f 91       	pop	r20
     ab4:	3f 91       	pop	r19
     ab6:	2f 91       	pop	r18
     ab8:	0f 90       	pop	r0
     aba:	0b be       	out	0x3b, r0	; 59
     abc:	0f 90       	pop	r0
     abe:	0f be       	out	0x3f, r0	; 63
     ac0:	0f 90       	pop	r0
     ac2:	1f 90       	pop	r1
     ac4:	18 95       	reti

00000ac6 <__vector_37>:
     ac6:	1f 92       	push	r1
     ac8:	0f 92       	push	r0
     aca:	0f b6       	in	r0, 0x3f	; 63
     acc:	0f 92       	push	r0
     ace:	11 24       	eor	r1, r1
     ad0:	0b b6       	in	r0, 0x3b	; 59
     ad2:	0f 92       	push	r0
     ad4:	8f 93       	push	r24
     ad6:	9f 93       	push	r25
     ad8:	ef 93       	push	r30
     ada:	ff 93       	push	r31
     adc:	90 91 e3 04 	lds	r25, 0x04E3	; 0x8004e3 <UART1_TxHead>
     ae0:	80 91 e2 04 	lds	r24, 0x04E2	; 0x8004e2 <UART1_TxTail>
     ae4:	98 17       	cp	r25, r24
     ae6:	89 f0       	breq	.+34     	; 0xb0a <__vector_37+0x44>
     ae8:	80 91 e2 04 	lds	r24, 0x04E2	; 0x8004e2 <UART1_TxTail>
     aec:	90 e0       	ldi	r25, 0x00	; 0
     aee:	01 96       	adiw	r24, 0x01	; 1
     af0:	8f 77       	andi	r24, 0x7F	; 127
     af2:	99 27       	eor	r25, r25
     af4:	80 93 e2 04 	sts	0x04E2, r24	; 0x8004e2 <UART1_TxTail>
     af8:	fc 01       	movw	r30, r24
     afa:	ec 59       	subi	r30, 0x9C	; 156
     afc:	fa 4f       	sbci	r31, 0xFA	; 250
     afe:	80 81       	ld	r24, Z
     b00:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
     b04:	10 92 d3 02 	sts	0x02D3, r1	; 0x8002d3 <UART1_Transmission_end>
     b08:	08 c0       	rjmp	.+16     	; 0xb1a <__vector_37+0x54>
     b0a:	e9 ec       	ldi	r30, 0xC9	; 201
     b0c:	f0 e0       	ldi	r31, 0x00	; 0
     b0e:	80 81       	ld	r24, Z
     b10:	8f 7d       	andi	r24, 0xDF	; 223
     b12:	80 83       	st	Z, r24
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	80 93 d3 02 	sts	0x02D3, r24	; 0x8002d3 <UART1_Transmission_end>
     b1a:	ff 91       	pop	r31
     b1c:	ef 91       	pop	r30
     b1e:	9f 91       	pop	r25
     b20:	8f 91       	pop	r24
     b22:	0f 90       	pop	r0
     b24:	0b be       	out	0x3b, r0	; 59
     b26:	0f 90       	pop	r0
     b28:	0f be       	out	0x3f, r0	; 63
     b2a:	0f 90       	pop	r0
     b2c:	1f 90       	pop	r1
     b2e:	18 95       	reti

00000b30 <UART1_init>:
     b30:	0f 93       	push	r16
     b32:	1f 93       	push	r17
     b34:	8b 01       	movw	r16, r22
     b36:	9c 01       	movw	r18, r24
     b38:	f8 94       	cli
     b3a:	10 92 e3 04 	sts	0x04E3, r1	; 0x8004e3 <UART1_TxHead>
     b3e:	10 92 e2 04 	sts	0x04E2, r1	; 0x8004e2 <UART1_TxTail>
     b42:	10 92 e1 04 	sts	0x04E1, r1	; 0x8004e1 <UART1_RxHead>
     b46:	10 92 e0 04 	sts	0x04E0, r1	; 0x8004e0 <UART1_RxTail>
     b4a:	78 94       	sei
     b4c:	dc 01       	movw	r26, r24
     b4e:	cb 01       	movw	r24, r22
     b50:	80 58       	subi	r24, 0x80	; 128
     b52:	9b 47       	sbci	r25, 0x7B	; 123
     b54:	a1 4e       	sbci	r26, 0xE1	; 225
     b56:	bf 4f       	sbci	r27, 0xFF	; 255
     b58:	88 0f       	add	r24, r24
     b5a:	99 1f       	adc	r25, r25
     b5c:	aa 1f       	adc	r26, r26
     b5e:	bb 1f       	adc	r27, r27
     b60:	88 0f       	add	r24, r24
     b62:	99 1f       	adc	r25, r25
     b64:	aa 1f       	adc	r26, r26
     b66:	bb 1f       	adc	r27, r27
     b68:	bc 01       	movw	r22, r24
     b6a:	cd 01       	movw	r24, r26
     b6c:	66 0f       	add	r22, r22
     b6e:	77 1f       	adc	r23, r23
     b70:	88 1f       	adc	r24, r24
     b72:	99 1f       	adc	r25, r25
     b74:	00 0f       	add	r16, r16
     b76:	11 1f       	adc	r17, r17
     b78:	22 1f       	adc	r18, r18
     b7a:	33 1f       	adc	r19, r19
     b7c:	00 0f       	add	r16, r16
     b7e:	11 1f       	adc	r17, r17
     b80:	22 1f       	adc	r18, r18
     b82:	33 1f       	adc	r19, r19
     b84:	a9 01       	movw	r20, r18
     b86:	98 01       	movw	r18, r16
     b88:	22 0f       	add	r18, r18
     b8a:	33 1f       	adc	r19, r19
     b8c:	44 1f       	adc	r20, r20
     b8e:	55 1f       	adc	r21, r21
     b90:	22 0f       	add	r18, r18
     b92:	33 1f       	adc	r19, r19
     b94:	44 1f       	adc	r20, r20
     b96:	55 1f       	adc	r21, r21
     b98:	0e 94 19 16 	call	0x2c32	; 0x2c32 <__udivmodsi4>
     b9c:	ba 01       	movw	r22, r20
     b9e:	a9 01       	movw	r20, r18
     ba0:	41 50       	subi	r20, 0x01	; 1
     ba2:	51 09       	sbc	r21, r1
     ba4:	61 09       	sbc	r22, r1
     ba6:	71 09       	sbc	r23, r1
     ba8:	57 ff       	sbrs	r21, 7
     baa:	06 c0       	rjmp	.+12     	; 0xbb8 <UART1_init+0x88>
     bac:	82 e0       	ldi	r24, 0x02	; 2
     bae:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
     bb2:	5f 77       	andi	r21, 0x7F	; 127
     bb4:	66 27       	eor	r22, r22
     bb6:	77 27       	eor	r23, r23
     bb8:	bb 27       	eor	r27, r27
     bba:	a7 2f       	mov	r26, r23
     bbc:	96 2f       	mov	r25, r22
     bbe:	85 2f       	mov	r24, r21
     bc0:	80 93 cd 00 	sts	0x00CD, r24	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7000cd>
     bc4:	40 93 cc 00 	sts	0x00CC, r20	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7000cc>
     bc8:	88 e9       	ldi	r24, 0x98	; 152
     bca:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7000c9>
     bce:	86 e0       	ldi	r24, 0x06	; 6
     bd0:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7000ca>
     bd4:	1f 91       	pop	r17
     bd6:	0f 91       	pop	r16
     bd8:	08 95       	ret

00000bda <UART1_getc>:
     bda:	f8 94       	cli
     bdc:	90 91 e1 04 	lds	r25, 0x04E1	; 0x8004e1 <UART1_RxHead>
     be0:	80 91 e0 04 	lds	r24, 0x04E0	; 0x8004e0 <UART1_RxTail>
     be4:	98 13       	cpse	r25, r24
     be6:	04 c0       	rjmp	.+8      	; 0xbf0 <UART1_getc+0x16>
     be8:	78 94       	sei
     bea:	80 e0       	ldi	r24, 0x00	; 0
     bec:	91 e0       	ldi	r25, 0x01	; 1
     bee:	08 95       	ret
     bf0:	80 91 e0 04 	lds	r24, 0x04E0	; 0x8004e0 <UART1_RxTail>
     bf4:	90 e0       	ldi	r25, 0x00	; 0
     bf6:	01 96       	adiw	r24, 0x01	; 1
     bf8:	8f 77       	andi	r24, 0x7F	; 127
     bfa:	99 27       	eor	r25, r25
     bfc:	80 93 e0 04 	sts	0x04E0, r24	; 0x8004e0 <UART1_RxTail>
     c00:	78 94       	sei
     c02:	fc 01       	movw	r30, r24
     c04:	ec 51       	subi	r30, 0x1C	; 28
     c06:	fb 4f       	sbci	r31, 0xFB	; 251
     c08:	20 81       	ld	r18, Z
     c0a:	80 91 df 04 	lds	r24, 0x04DF	; 0x8004df <UART1_LastRxError>
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	98 2f       	mov	r25, r24
     c12:	88 27       	eor	r24, r24
     c14:	82 0f       	add	r24, r18
     c16:	91 1d       	adc	r25, r1
     c18:	08 95       	ret

00000c1a <UART1_putc>:
     c1a:	40 91 e3 04 	lds	r20, 0x04E3	; 0x8004e3 <UART1_TxHead>
     c1e:	50 e0       	ldi	r21, 0x00	; 0
     c20:	4f 5f       	subi	r20, 0xFF	; 255
     c22:	5f 4f       	sbci	r21, 0xFF	; 255
     c24:	4f 77       	andi	r20, 0x7F	; 127
     c26:	55 27       	eor	r21, r21
     c28:	20 91 e2 04 	lds	r18, 0x04E2	; 0x8004e2 <UART1_TxTail>
     c2c:	30 e0       	ldi	r19, 0x00	; 0
     c2e:	42 17       	cp	r20, r18
     c30:	53 07       	cpc	r21, r19
     c32:	d1 f3       	breq	.-12     	; 0xc28 <UART1_putc+0xe>
     c34:	fa 01       	movw	r30, r20
     c36:	ec 59       	subi	r30, 0x9C	; 156
     c38:	fa 4f       	sbci	r31, 0xFA	; 250
     c3a:	80 83       	st	Z, r24
     c3c:	40 93 e3 04 	sts	0x04E3, r20	; 0x8004e3 <UART1_TxHead>
     c40:	e9 ec       	ldi	r30, 0xC9	; 201
     c42:	f0 e0       	ldi	r31, 0x00	; 0
     c44:	80 81       	ld	r24, Z
     c46:	80 62       	ori	r24, 0x20	; 32
     c48:	80 83       	st	Z, r24
     c4a:	08 95       	ret

00000c4c <UART1_available>:
     c4c:	f8 94       	cli
     c4e:	80 91 e1 04 	lds	r24, 0x04E1	; 0x8004e1 <UART1_RxHead>
     c52:	20 91 e0 04 	lds	r18, 0x04E0	; 0x8004e0 <UART1_RxTail>
     c56:	78 94       	sei
     c58:	90 e0       	ldi	r25, 0x00	; 0
     c5a:	80 58       	subi	r24, 0x80	; 128
     c5c:	9f 4f       	sbci	r25, 0xFF	; 255
     c5e:	82 1b       	sub	r24, r18
     c60:	91 09       	sbc	r25, r1
     c62:	8f 77       	andi	r24, 0x7F	; 127
     c64:	99 27       	eor	r25, r25
     c66:	08 95       	ret

00000c68 <UART1_flush>:
     c68:	80 91 d3 02 	lds	r24, 0x02D3	; 0x8002d3 <UART1_Transmission_end>
     c6c:	88 23       	and	r24, r24
     c6e:	e1 f3       	breq	.-8      	; 0xc68 <UART1_flush>
     c70:	08 95       	ret

00000c72 <__vector_51>:
     c72:	1f 92       	push	r1
     c74:	0f 92       	push	r0
     c76:	0f b6       	in	r0, 0x3f	; 63
     c78:	0f 92       	push	r0
     c7a:	11 24       	eor	r1, r1
     c7c:	0b b6       	in	r0, 0x3b	; 59
     c7e:	0f 92       	push	r0
     c80:	2f 93       	push	r18
     c82:	3f 93       	push	r19
     c84:	4f 93       	push	r20
     c86:	5f 93       	push	r21
     c88:	8f 93       	push	r24
     c8a:	9f 93       	push	r25
     c8c:	ef 93       	push	r30
     c8e:	ff 93       	push	r31
     c90:	20 91 d0 00 	lds	r18, 0x00D0	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7000d0>
     c94:	30 91 d6 00 	lds	r19, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
     c98:	28 71       	andi	r18, 0x18	; 24
     c9a:	80 91 dc 03 	lds	r24, 0x03DC	; 0x8003dc <UART2_RxHead>
     c9e:	90 e0       	ldi	r25, 0x00	; 0
     ca0:	01 96       	adiw	r24, 0x01	; 1
     ca2:	8f 77       	andi	r24, 0x7F	; 127
     ca4:	99 27       	eor	r25, r25
     ca6:	40 91 db 03 	lds	r20, 0x03DB	; 0x8003db <UART2_RxTail>
     caa:	50 e0       	ldi	r21, 0x00	; 0
     cac:	84 17       	cp	r24, r20
     cae:	95 07       	cpc	r25, r21
     cb0:	39 f0       	breq	.+14     	; 0xcc0 <__vector_51+0x4e>
     cb2:	80 93 dc 03 	sts	0x03DC, r24	; 0x8003dc <UART2_RxHead>
     cb6:	fc 01       	movw	r30, r24
     cb8:	e1 52       	subi	r30, 0x21	; 33
     cba:	fc 4f       	sbci	r31, 0xFC	; 252
     cbc:	30 83       	st	Z, r19
     cbe:	01 c0       	rjmp	.+2      	; 0xcc2 <__vector_51+0x50>
     cc0:	22 e0       	ldi	r18, 0x02	; 2
     cc2:	20 93 da 03 	sts	0x03DA, r18	; 0x8003da <UART2_LastRxError>
     cc6:	ff 91       	pop	r31
     cc8:	ef 91       	pop	r30
     cca:	9f 91       	pop	r25
     ccc:	8f 91       	pop	r24
     cce:	5f 91       	pop	r21
     cd0:	4f 91       	pop	r20
     cd2:	3f 91       	pop	r19
     cd4:	2f 91       	pop	r18
     cd6:	0f 90       	pop	r0
     cd8:	0b be       	out	0x3b, r0	; 59
     cda:	0f 90       	pop	r0
     cdc:	0f be       	out	0x3f, r0	; 63
     cde:	0f 90       	pop	r0
     ce0:	1f 90       	pop	r1
     ce2:	18 95       	reti

00000ce4 <__vector_52>:
     ce4:	1f 92       	push	r1
     ce6:	0f 92       	push	r0
     ce8:	0f b6       	in	r0, 0x3f	; 63
     cea:	0f 92       	push	r0
     cec:	11 24       	eor	r1, r1
     cee:	0b b6       	in	r0, 0x3b	; 59
     cf0:	0f 92       	push	r0
     cf2:	8f 93       	push	r24
     cf4:	9f 93       	push	r25
     cf6:	ef 93       	push	r30
     cf8:	ff 93       	push	r31
     cfa:	90 91 de 03 	lds	r25, 0x03DE	; 0x8003de <UART2_TxHead>
     cfe:	80 91 dd 03 	lds	r24, 0x03DD	; 0x8003dd <UART2_TxTail>
     d02:	98 17       	cp	r25, r24
     d04:	89 f0       	breq	.+34     	; 0xd28 <__vector_52+0x44>
     d06:	80 91 dd 03 	lds	r24, 0x03DD	; 0x8003dd <UART2_TxTail>
     d0a:	90 e0       	ldi	r25, 0x00	; 0
     d0c:	01 96       	adiw	r24, 0x01	; 1
     d0e:	8f 77       	andi	r24, 0x7F	; 127
     d10:	99 27       	eor	r25, r25
     d12:	80 93 dd 03 	sts	0x03DD, r24	; 0x8003dd <UART2_TxTail>
     d16:	fc 01       	movw	r30, r24
     d18:	e1 5a       	subi	r30, 0xA1	; 161
     d1a:	fb 4f       	sbci	r31, 0xFB	; 251
     d1c:	80 81       	ld	r24, Z
     d1e:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
     d22:	10 92 d2 02 	sts	0x02D2, r1	; 0x8002d2 <UART2_Transmission_end>
     d26:	08 c0       	rjmp	.+16     	; 0xd38 <__vector_52+0x54>
     d28:	e1 ed       	ldi	r30, 0xD1	; 209
     d2a:	f0 e0       	ldi	r31, 0x00	; 0
     d2c:	80 81       	ld	r24, Z
     d2e:	8f 7d       	andi	r24, 0xDF	; 223
     d30:	80 83       	st	Z, r24
     d32:	81 e0       	ldi	r24, 0x01	; 1
     d34:	80 93 d2 02 	sts	0x02D2, r24	; 0x8002d2 <UART2_Transmission_end>
     d38:	ff 91       	pop	r31
     d3a:	ef 91       	pop	r30
     d3c:	9f 91       	pop	r25
     d3e:	8f 91       	pop	r24
     d40:	0f 90       	pop	r0
     d42:	0b be       	out	0x3b, r0	; 59
     d44:	0f 90       	pop	r0
     d46:	0f be       	out	0x3f, r0	; 63
     d48:	0f 90       	pop	r0
     d4a:	1f 90       	pop	r1
     d4c:	18 95       	reti

00000d4e <UART2_init>:
     d4e:	0f 93       	push	r16
     d50:	1f 93       	push	r17
     d52:	8b 01       	movw	r16, r22
     d54:	9c 01       	movw	r18, r24
     d56:	f8 94       	cli
     d58:	10 92 de 03 	sts	0x03DE, r1	; 0x8003de <UART2_TxHead>
     d5c:	10 92 dd 03 	sts	0x03DD, r1	; 0x8003dd <UART2_TxTail>
     d60:	10 92 dc 03 	sts	0x03DC, r1	; 0x8003dc <UART2_RxHead>
     d64:	10 92 db 03 	sts	0x03DB, r1	; 0x8003db <UART2_RxTail>
     d68:	78 94       	sei
     d6a:	dc 01       	movw	r26, r24
     d6c:	cb 01       	movw	r24, r22
     d6e:	80 58       	subi	r24, 0x80	; 128
     d70:	9b 47       	sbci	r25, 0x7B	; 123
     d72:	a1 4e       	sbci	r26, 0xE1	; 225
     d74:	bf 4f       	sbci	r27, 0xFF	; 255
     d76:	88 0f       	add	r24, r24
     d78:	99 1f       	adc	r25, r25
     d7a:	aa 1f       	adc	r26, r26
     d7c:	bb 1f       	adc	r27, r27
     d7e:	88 0f       	add	r24, r24
     d80:	99 1f       	adc	r25, r25
     d82:	aa 1f       	adc	r26, r26
     d84:	bb 1f       	adc	r27, r27
     d86:	bc 01       	movw	r22, r24
     d88:	cd 01       	movw	r24, r26
     d8a:	66 0f       	add	r22, r22
     d8c:	77 1f       	adc	r23, r23
     d8e:	88 1f       	adc	r24, r24
     d90:	99 1f       	adc	r25, r25
     d92:	00 0f       	add	r16, r16
     d94:	11 1f       	adc	r17, r17
     d96:	22 1f       	adc	r18, r18
     d98:	33 1f       	adc	r19, r19
     d9a:	00 0f       	add	r16, r16
     d9c:	11 1f       	adc	r17, r17
     d9e:	22 1f       	adc	r18, r18
     da0:	33 1f       	adc	r19, r19
     da2:	a9 01       	movw	r20, r18
     da4:	98 01       	movw	r18, r16
     da6:	22 0f       	add	r18, r18
     da8:	33 1f       	adc	r19, r19
     daa:	44 1f       	adc	r20, r20
     dac:	55 1f       	adc	r21, r21
     dae:	22 0f       	add	r18, r18
     db0:	33 1f       	adc	r19, r19
     db2:	44 1f       	adc	r20, r20
     db4:	55 1f       	adc	r21, r21
     db6:	0e 94 19 16 	call	0x2c32	; 0x2c32 <__udivmodsi4>
     dba:	ba 01       	movw	r22, r20
     dbc:	a9 01       	movw	r20, r18
     dbe:	41 50       	subi	r20, 0x01	; 1
     dc0:	51 09       	sbc	r21, r1
     dc2:	61 09       	sbc	r22, r1
     dc4:	71 09       	sbc	r23, r1
     dc6:	57 ff       	sbrs	r21, 7
     dc8:	06 c0       	rjmp	.+12     	; 0xdd6 <UART2_init+0x88>
     dca:	82 e0       	ldi	r24, 0x02	; 2
     dcc:	80 93 d0 00 	sts	0x00D0, r24	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7000d0>
     dd0:	5f 77       	andi	r21, 0x7F	; 127
     dd2:	66 27       	eor	r22, r22
     dd4:	77 27       	eor	r23, r23
     dd6:	bb 27       	eor	r27, r27
     dd8:	a7 2f       	mov	r26, r23
     dda:	96 2f       	mov	r25, r22
     ddc:	85 2f       	mov	r24, r21
     dde:	80 93 d5 00 	sts	0x00D5, r24	; 0x8000d5 <__TEXT_REGION_LENGTH__+0x7000d5>
     de2:	40 93 d4 00 	sts	0x00D4, r20	; 0x8000d4 <__TEXT_REGION_LENGTH__+0x7000d4>
     de6:	88 e9       	ldi	r24, 0x98	; 152
     de8:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7000d1>
     dec:	86 e0       	ldi	r24, 0x06	; 6
     dee:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7000d2>
     df2:	1f 91       	pop	r17
     df4:	0f 91       	pop	r16
     df6:	08 95       	ret

00000df8 <UART2_getc>:
     df8:	90 91 dc 03 	lds	r25, 0x03DC	; 0x8003dc <UART2_RxHead>
     dfc:	80 91 db 03 	lds	r24, 0x03DB	; 0x8003db <UART2_RxTail>
     e00:	98 17       	cp	r25, r24
     e02:	a1 f0       	breq	.+40     	; 0xe2c <UART2_getc+0x34>
     e04:	80 91 db 03 	lds	r24, 0x03DB	; 0x8003db <UART2_RxTail>
     e08:	90 e0       	ldi	r25, 0x00	; 0
     e0a:	01 96       	adiw	r24, 0x01	; 1
     e0c:	8f 77       	andi	r24, 0x7F	; 127
     e0e:	99 27       	eor	r25, r25
     e10:	80 93 db 03 	sts	0x03DB, r24	; 0x8003db <UART2_RxTail>
     e14:	fc 01       	movw	r30, r24
     e16:	e1 52       	subi	r30, 0x21	; 33
     e18:	fc 4f       	sbci	r31, 0xFC	; 252
     e1a:	20 81       	ld	r18, Z
     e1c:	80 91 da 03 	lds	r24, 0x03DA	; 0x8003da <UART2_LastRxError>
     e20:	90 e0       	ldi	r25, 0x00	; 0
     e22:	98 2f       	mov	r25, r24
     e24:	88 27       	eor	r24, r24
     e26:	82 0f       	add	r24, r18
     e28:	91 1d       	adc	r25, r1
     e2a:	08 95       	ret
     e2c:	80 e0       	ldi	r24, 0x00	; 0
     e2e:	91 e0       	ldi	r25, 0x01	; 1
     e30:	08 95       	ret

00000e32 <UART2_putc>:
     e32:	40 91 de 03 	lds	r20, 0x03DE	; 0x8003de <UART2_TxHead>
     e36:	50 e0       	ldi	r21, 0x00	; 0
     e38:	4f 5f       	subi	r20, 0xFF	; 255
     e3a:	5f 4f       	sbci	r21, 0xFF	; 255
     e3c:	4f 77       	andi	r20, 0x7F	; 127
     e3e:	55 27       	eor	r21, r21
     e40:	20 91 dd 03 	lds	r18, 0x03DD	; 0x8003dd <UART2_TxTail>
     e44:	30 e0       	ldi	r19, 0x00	; 0
     e46:	42 17       	cp	r20, r18
     e48:	53 07       	cpc	r21, r19
     e4a:	d1 f3       	breq	.-12     	; 0xe40 <UART2_putc+0xe>
     e4c:	fa 01       	movw	r30, r20
     e4e:	e1 5a       	subi	r30, 0xA1	; 161
     e50:	fb 4f       	sbci	r31, 0xFB	; 251
     e52:	80 83       	st	Z, r24
     e54:	40 93 de 03 	sts	0x03DE, r20	; 0x8003de <UART2_TxHead>
     e58:	e1 ed       	ldi	r30, 0xD1	; 209
     e5a:	f0 e0       	ldi	r31, 0x00	; 0
     e5c:	80 81       	ld	r24, Z
     e5e:	80 62       	ori	r24, 0x20	; 32
     e60:	80 83       	st	Z, r24
     e62:	08 95       	ret

00000e64 <UART2_available>:
     e64:	f8 94       	cli
     e66:	80 91 dc 03 	lds	r24, 0x03DC	; 0x8003dc <UART2_RxHead>
     e6a:	20 91 db 03 	lds	r18, 0x03DB	; 0x8003db <UART2_RxTail>
     e6e:	78 94       	sei
     e70:	90 e0       	ldi	r25, 0x00	; 0
     e72:	80 58       	subi	r24, 0x80	; 128
     e74:	9f 4f       	sbci	r25, 0xFF	; 255
     e76:	82 1b       	sub	r24, r18
     e78:	91 09       	sbc	r25, r1
     e7a:	8f 77       	andi	r24, 0x7F	; 127
     e7c:	99 27       	eor	r25, r25
     e7e:	08 95       	ret

00000e80 <UART2_flush>:
     e80:	80 91 d2 02 	lds	r24, 0x02D2	; 0x8002d2 <UART2_Transmission_end>
     e84:	88 23       	and	r24, r24
     e86:	e1 f3       	breq	.-8      	; 0xe80 <UART2_flush>
     e88:	08 95       	ret

00000e8a <__vector_54>:
     e8a:	1f 92       	push	r1
     e8c:	0f 92       	push	r0
     e8e:	0f b6       	in	r0, 0x3f	; 63
     e90:	0f 92       	push	r0
     e92:	11 24       	eor	r1, r1
     e94:	0b b6       	in	r0, 0x3b	; 59
     e96:	0f 92       	push	r0
     e98:	2f 93       	push	r18
     e9a:	3f 93       	push	r19
     e9c:	4f 93       	push	r20
     e9e:	5f 93       	push	r21
     ea0:	8f 93       	push	r24
     ea2:	9f 93       	push	r25
     ea4:	ef 93       	push	r30
     ea6:	ff 93       	push	r31
     ea8:	20 91 30 01 	lds	r18, 0x0130	; 0x800130 <__TEXT_REGION_LENGTH__+0x700130>
     eac:	30 91 36 01 	lds	r19, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
     eb0:	28 71       	andi	r18, 0x18	; 24
     eb2:	80 91 d7 02 	lds	r24, 0x02D7	; 0x8002d7 <UART3_RxHead>
     eb6:	90 e0       	ldi	r25, 0x00	; 0
     eb8:	01 96       	adiw	r24, 0x01	; 1
     eba:	8f 77       	andi	r24, 0x7F	; 127
     ebc:	99 27       	eor	r25, r25
     ebe:	40 91 d6 02 	lds	r20, 0x02D6	; 0x8002d6 <UART3_RxTail>
     ec2:	50 e0       	ldi	r21, 0x00	; 0
     ec4:	84 17       	cp	r24, r20
     ec6:	95 07       	cpc	r25, r21
     ec8:	39 f0       	breq	.+14     	; 0xed8 <__vector_54+0x4e>
     eca:	80 93 d7 02 	sts	0x02D7, r24	; 0x8002d7 <UART3_RxHead>
     ece:	fc 01       	movw	r30, r24
     ed0:	e6 52       	subi	r30, 0x26	; 38
     ed2:	fd 4f       	sbci	r31, 0xFD	; 253
     ed4:	30 83       	st	Z, r19
     ed6:	01 c0       	rjmp	.+2      	; 0xeda <__vector_54+0x50>
     ed8:	22 e0       	ldi	r18, 0x02	; 2
     eda:	20 93 d5 02 	sts	0x02D5, r18	; 0x8002d5 <UART3_LastRxError>
     ede:	ff 91       	pop	r31
     ee0:	ef 91       	pop	r30
     ee2:	9f 91       	pop	r25
     ee4:	8f 91       	pop	r24
     ee6:	5f 91       	pop	r21
     ee8:	4f 91       	pop	r20
     eea:	3f 91       	pop	r19
     eec:	2f 91       	pop	r18
     eee:	0f 90       	pop	r0
     ef0:	0b be       	out	0x3b, r0	; 59
     ef2:	0f 90       	pop	r0
     ef4:	0f be       	out	0x3f, r0	; 63
     ef6:	0f 90       	pop	r0
     ef8:	1f 90       	pop	r1
     efa:	18 95       	reti

00000efc <__vector_55>:
     efc:	1f 92       	push	r1
     efe:	0f 92       	push	r0
     f00:	0f b6       	in	r0, 0x3f	; 63
     f02:	0f 92       	push	r0
     f04:	11 24       	eor	r1, r1
     f06:	0b b6       	in	r0, 0x3b	; 59
     f08:	0f 92       	push	r0
     f0a:	8f 93       	push	r24
     f0c:	9f 93       	push	r25
     f0e:	ef 93       	push	r30
     f10:	ff 93       	push	r31
     f12:	90 91 d9 02 	lds	r25, 0x02D9	; 0x8002d9 <UART3_TxHead>
     f16:	80 91 d8 02 	lds	r24, 0x02D8	; 0x8002d8 <UART3_TxTail>
     f1a:	98 17       	cp	r25, r24
     f1c:	89 f0       	breq	.+34     	; 0xf40 <__vector_55+0x44>
     f1e:	80 91 d8 02 	lds	r24, 0x02D8	; 0x8002d8 <UART3_TxTail>
     f22:	90 e0       	ldi	r25, 0x00	; 0
     f24:	01 96       	adiw	r24, 0x01	; 1
     f26:	8f 77       	andi	r24, 0x7F	; 127
     f28:	99 27       	eor	r25, r25
     f2a:	80 93 d8 02 	sts	0x02D8, r24	; 0x8002d8 <UART3_TxTail>
     f2e:	fc 01       	movw	r30, r24
     f30:	e6 5a       	subi	r30, 0xA6	; 166
     f32:	fc 4f       	sbci	r31, 0xFC	; 252
     f34:	80 81       	ld	r24, Z
     f36:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
     f3a:	10 92 d1 02 	sts	0x02D1, r1	; 0x8002d1 <UART3_Transmission_end>
     f3e:	08 c0       	rjmp	.+16     	; 0xf50 <__vector_55+0x54>
     f40:	e1 e3       	ldi	r30, 0x31	; 49
     f42:	f1 e0       	ldi	r31, 0x01	; 1
     f44:	80 81       	ld	r24, Z
     f46:	8f 7d       	andi	r24, 0xDF	; 223
     f48:	80 83       	st	Z, r24
     f4a:	81 e0       	ldi	r24, 0x01	; 1
     f4c:	80 93 d1 02 	sts	0x02D1, r24	; 0x8002d1 <UART3_Transmission_end>
     f50:	ff 91       	pop	r31
     f52:	ef 91       	pop	r30
     f54:	9f 91       	pop	r25
     f56:	8f 91       	pop	r24
     f58:	0f 90       	pop	r0
     f5a:	0b be       	out	0x3b, r0	; 59
     f5c:	0f 90       	pop	r0
     f5e:	0f be       	out	0x3f, r0	; 63
     f60:	0f 90       	pop	r0
     f62:	1f 90       	pop	r1
     f64:	18 95       	reti

00000f66 <UART3_init>:
     f66:	0f 93       	push	r16
     f68:	1f 93       	push	r17
     f6a:	8b 01       	movw	r16, r22
     f6c:	9c 01       	movw	r18, r24
     f6e:	f8 94       	cli
     f70:	10 92 d9 02 	sts	0x02D9, r1	; 0x8002d9 <UART3_TxHead>
     f74:	10 92 d8 02 	sts	0x02D8, r1	; 0x8002d8 <UART3_TxTail>
     f78:	10 92 d7 02 	sts	0x02D7, r1	; 0x8002d7 <UART3_RxHead>
     f7c:	10 92 d6 02 	sts	0x02D6, r1	; 0x8002d6 <UART3_RxTail>
     f80:	78 94       	sei
     f82:	dc 01       	movw	r26, r24
     f84:	cb 01       	movw	r24, r22
     f86:	80 58       	subi	r24, 0x80	; 128
     f88:	9b 47       	sbci	r25, 0x7B	; 123
     f8a:	a1 4e       	sbci	r26, 0xE1	; 225
     f8c:	bf 4f       	sbci	r27, 0xFF	; 255
     f8e:	88 0f       	add	r24, r24
     f90:	99 1f       	adc	r25, r25
     f92:	aa 1f       	adc	r26, r26
     f94:	bb 1f       	adc	r27, r27
     f96:	88 0f       	add	r24, r24
     f98:	99 1f       	adc	r25, r25
     f9a:	aa 1f       	adc	r26, r26
     f9c:	bb 1f       	adc	r27, r27
     f9e:	bc 01       	movw	r22, r24
     fa0:	cd 01       	movw	r24, r26
     fa2:	66 0f       	add	r22, r22
     fa4:	77 1f       	adc	r23, r23
     fa6:	88 1f       	adc	r24, r24
     fa8:	99 1f       	adc	r25, r25
     faa:	00 0f       	add	r16, r16
     fac:	11 1f       	adc	r17, r17
     fae:	22 1f       	adc	r18, r18
     fb0:	33 1f       	adc	r19, r19
     fb2:	00 0f       	add	r16, r16
     fb4:	11 1f       	adc	r17, r17
     fb6:	22 1f       	adc	r18, r18
     fb8:	33 1f       	adc	r19, r19
     fba:	a9 01       	movw	r20, r18
     fbc:	98 01       	movw	r18, r16
     fbe:	22 0f       	add	r18, r18
     fc0:	33 1f       	adc	r19, r19
     fc2:	44 1f       	adc	r20, r20
     fc4:	55 1f       	adc	r21, r21
     fc6:	22 0f       	add	r18, r18
     fc8:	33 1f       	adc	r19, r19
     fca:	44 1f       	adc	r20, r20
     fcc:	55 1f       	adc	r21, r21
     fce:	0e 94 19 16 	call	0x2c32	; 0x2c32 <__udivmodsi4>
     fd2:	ba 01       	movw	r22, r20
     fd4:	a9 01       	movw	r20, r18
     fd6:	41 50       	subi	r20, 0x01	; 1
     fd8:	51 09       	sbc	r21, r1
     fda:	61 09       	sbc	r22, r1
     fdc:	71 09       	sbc	r23, r1
     fde:	57 ff       	sbrs	r21, 7
     fe0:	06 c0       	rjmp	.+12     	; 0xfee <UART3_init+0x88>
     fe2:	82 e0       	ldi	r24, 0x02	; 2
     fe4:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <__TEXT_REGION_LENGTH__+0x700130>
     fe8:	5f 77       	andi	r21, 0x7F	; 127
     fea:	66 27       	eor	r22, r22
     fec:	77 27       	eor	r23, r23
     fee:	bb 27       	eor	r27, r27
     ff0:	a7 2f       	mov	r26, r23
     ff2:	96 2f       	mov	r25, r22
     ff4:	85 2f       	mov	r24, r21
     ff6:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <__TEXT_REGION_LENGTH__+0x700135>
     ffa:	40 93 34 01 	sts	0x0134, r20	; 0x800134 <__TEXT_REGION_LENGTH__+0x700134>
     ffe:	88 e9       	ldi	r24, 0x98	; 152
    1000:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <__TEXT_REGION_LENGTH__+0x700131>
    1004:	86 e0       	ldi	r24, 0x06	; 6
    1006:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <__TEXT_REGION_LENGTH__+0x700132>
    100a:	1f 91       	pop	r17
    100c:	0f 91       	pop	r16
    100e:	08 95       	ret

00001010 <UART3_getc>:
    1010:	90 91 d7 02 	lds	r25, 0x02D7	; 0x8002d7 <UART3_RxHead>
    1014:	80 91 d6 02 	lds	r24, 0x02D6	; 0x8002d6 <UART3_RxTail>
    1018:	98 17       	cp	r25, r24
    101a:	a1 f0       	breq	.+40     	; 0x1044 <UART3_getc+0x34>
    101c:	80 91 d6 02 	lds	r24, 0x02D6	; 0x8002d6 <UART3_RxTail>
    1020:	90 e0       	ldi	r25, 0x00	; 0
    1022:	01 96       	adiw	r24, 0x01	; 1
    1024:	8f 77       	andi	r24, 0x7F	; 127
    1026:	99 27       	eor	r25, r25
    1028:	80 93 d6 02 	sts	0x02D6, r24	; 0x8002d6 <UART3_RxTail>
    102c:	fc 01       	movw	r30, r24
    102e:	e6 52       	subi	r30, 0x26	; 38
    1030:	fd 4f       	sbci	r31, 0xFD	; 253
    1032:	20 81       	ld	r18, Z
    1034:	80 91 d5 02 	lds	r24, 0x02D5	; 0x8002d5 <UART3_LastRxError>
    1038:	90 e0       	ldi	r25, 0x00	; 0
    103a:	98 2f       	mov	r25, r24
    103c:	88 27       	eor	r24, r24
    103e:	82 0f       	add	r24, r18
    1040:	91 1d       	adc	r25, r1
    1042:	08 95       	ret
    1044:	80 e0       	ldi	r24, 0x00	; 0
    1046:	91 e0       	ldi	r25, 0x01	; 1
    1048:	08 95       	ret

0000104a <UART3_putc>:
    104a:	40 91 d9 02 	lds	r20, 0x02D9	; 0x8002d9 <UART3_TxHead>
    104e:	50 e0       	ldi	r21, 0x00	; 0
    1050:	4f 5f       	subi	r20, 0xFF	; 255
    1052:	5f 4f       	sbci	r21, 0xFF	; 255
    1054:	4f 77       	andi	r20, 0x7F	; 127
    1056:	55 27       	eor	r21, r21
    1058:	20 91 d8 02 	lds	r18, 0x02D8	; 0x8002d8 <UART3_TxTail>
    105c:	30 e0       	ldi	r19, 0x00	; 0
    105e:	42 17       	cp	r20, r18
    1060:	53 07       	cpc	r21, r19
    1062:	d1 f3       	breq	.-12     	; 0x1058 <UART3_putc+0xe>
    1064:	fa 01       	movw	r30, r20
    1066:	e6 5a       	subi	r30, 0xA6	; 166
    1068:	fc 4f       	sbci	r31, 0xFC	; 252
    106a:	80 83       	st	Z, r24
    106c:	40 93 d9 02 	sts	0x02D9, r20	; 0x8002d9 <UART3_TxHead>
    1070:	e1 e3       	ldi	r30, 0x31	; 49
    1072:	f1 e0       	ldi	r31, 0x01	; 1
    1074:	80 81       	ld	r24, Z
    1076:	80 62       	ori	r24, 0x20	; 32
    1078:	80 83       	st	Z, r24
    107a:	08 95       	ret

0000107c <UART3_available>:
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    107c:	f8 94       	cli
uint16_t UART3_available(void)
{
	uint16_t ret;
	
	ATOMIC_BLOCK(ATOMIC_FORCEON) {
		ret = (UART_RX3_BUFFER_SIZE + UART3_RxHead - UART3_RxTail) & UART_RX3_BUFFER_MASK;
    107e:	80 91 d7 02 	lds	r24, 0x02D7	; 0x8002d7 <UART3_RxHead>
    1082:	20 91 d6 02 	lds	r18, 0x02D6	; 0x8002d6 <UART3_RxTail>
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
    1086:	78 94       	sei
	}
	return ret;
    1088:	90 e0       	ldi	r25, 0x00	; 0
    108a:	80 58       	subi	r24, 0x80	; 128
    108c:	9f 4f       	sbci	r25, 0xFF	; 255
    108e:	82 1b       	sub	r24, r18
    1090:	91 09       	sbc	r25, r1
} /* UART3_available */
    1092:	8f 77       	andi	r24, 0x7F	; 127
    1094:	99 27       	eor	r25, r25
    1096:	08 95       	ret

00001098 <UART3_flush>:
void UART3_flush(void)
{
//	ATOMIC_BLOCK(ATOMIC_FORCEON) {
//		UART3_RxHead = UART3_RxTail;
//	} commented by mohab
	while(0 == UART3_Transmission_end);
    1098:	80 91 d1 02 	lds	r24, 0x02D1	; 0x8002d1 <UART3_Transmission_end>
    109c:	88 23       	and	r24, r24
    109e:	e1 f3       	breq	.-8      	; 0x1098 <UART3_flush>
} /* UART3_flush */
    10a0:	08 95       	ret

000010a2 <RTE_encoder_init>:


/*static uint16_t Conveyor_speed;*/
static uint16_t Drum_speed;

void RTE_encoder_init(void){
    10a2:	08 95       	ret

000010a4 <RTE_invertersetting_init>:

static SemaphoreHandle_t Sema_Time_second_handle;
static StaticSemaphore_t Sema_Time_second_Buffer;
static uint16_t Time_second;

void RTE_invertersetting_init(void){
    10a4:	0f 93       	push	r16
	Sema_Gear_ratio_handle = xSemaphoreCreateBinaryStatic(&Sema_Gear_ratio_Buffer);
    10a6:	03 e0       	ldi	r16, 0x03	; 3
    10a8:	24 e8       	ldi	r18, 0x84	; 132
    10aa:	37 e0       	ldi	r19, 0x07	; 7
    10ac:	40 e0       	ldi	r20, 0x00	; 0
    10ae:	50 e0       	ldi	r21, 0x00	; 0
    10b0:	60 e0       	ldi	r22, 0x00	; 0
    10b2:	81 e0       	ldi	r24, 0x01	; 1
    10b4:	c4 d3       	rcall	.+1928   	; 0x183e <xQueueGenericCreateStatic>
	Sema_RPM_max_handle = xSemaphoreCreateBinaryStatic(&Sema_RPM_max_Buffer);
    10b6:	25 e6       	ldi	r18, 0x65	; 101
    10b8:	37 e0       	ldi	r19, 0x07	; 7
    10ba:	40 e0       	ldi	r20, 0x00	; 0
    10bc:	50 e0       	ldi	r21, 0x00	; 0
    10be:	60 e0       	ldi	r22, 0x00	; 0
    10c0:	81 e0       	ldi	r24, 0x01	; 1
    10c2:	bd d3       	rcall	.+1914   	; 0x183e <xQueueGenericCreateStatic>
	Sema_Conveyor_length_handle =  xSemaphoreCreateBinaryStatic(&Sema_Conveyor_length_Buffer);
    10c4:	26 e4       	ldi	r18, 0x46	; 70
    10c6:	37 e0       	ldi	r19, 0x07	; 7
    10c8:	40 e0       	ldi	r20, 0x00	; 0
    10ca:	50 e0       	ldi	r21, 0x00	; 0
    10cc:	60 e0       	ldi	r22, 0x00	; 0
    10ce:	81 e0       	ldi	r24, 0x01	; 1
    10d0:	b6 d3       	rcall	.+1900   	; 0x183e <xQueueGenericCreateStatic>
	Sema_Driver_diameter_handle =  xSemaphoreCreateBinaryStatic(&Sema_Driver_diameter_Buffer);
    10d2:	27 e2       	ldi	r18, 0x27	; 39
    10d4:	37 e0       	ldi	r19, 0x07	; 7
    10d6:	40 e0       	ldi	r20, 0x00	; 0
    10d8:	50 e0       	ldi	r21, 0x00	; 0
    10da:	60 e0       	ldi	r22, 0x00	; 0
    10dc:	81 e0       	ldi	r24, 0x01	; 1
    10de:	af d3       	rcall	.+1886   	; 0x183e <xQueueGenericCreateStatic>
	Sema_Time_minute_handle =  xSemaphoreCreateBinaryStatic(&Sema_Time_minute_Buffer);
    10e0:	28 e0       	ldi	r18, 0x08	; 8
    10e2:	37 e0       	ldi	r19, 0x07	; 7
    10e4:	40 e0       	ldi	r20, 0x00	; 0
    10e6:	50 e0       	ldi	r21, 0x00	; 0
    10e8:	60 e0       	ldi	r22, 0x00	; 0
    10ea:	81 e0       	ldi	r24, 0x01	; 1
    10ec:	a8 d3       	rcall	.+1872   	; 0x183e <xQueueGenericCreateStatic>
	Sema_Time_second_handle =  xSemaphoreCreateBinaryStatic(&Sema_Time_second_Buffer);
    10ee:	29 ee       	ldi	r18, 0xE9	; 233
    10f0:	36 e0       	ldi	r19, 0x06	; 6
    10f2:	40 e0       	ldi	r20, 0x00	; 0
    10f4:	50 e0       	ldi	r21, 0x00	; 0
    10f6:	60 e0       	ldi	r22, 0x00	; 0
    10f8:	81 e0       	ldi	r24, 0x01	; 1
    10fa:	a1 d3       	rcall	.+1858   	; 0x183e <xQueueGenericCreateStatic>
}
    10fc:	0f 91       	pop	r16
    10fe:	08 95       	ret

00001100 <RTE_levels_init>:

static SemaphoreHandle_t Sema_blancher_level_handle;
static StaticSemaphore_t Sema_blancher_level_Buffer;
static uint16_t blancher_level;

void RTE_levels_init(void){
    1100:	0f 93       	push	r16
	Sema_tank_level_handle = xSemaphoreCreateBinaryStatic(&Sema_tank_level_Buffer);
    1102:	03 e0       	ldi	r16, 0x03	; 3
    1104:	22 ec       	ldi	r18, 0xC2	; 194
    1106:	37 e0       	ldi	r19, 0x07	; 7
    1108:	40 e0       	ldi	r20, 0x00	; 0
    110a:	50 e0       	ldi	r21, 0x00	; 0
    110c:	60 e0       	ldi	r22, 0x00	; 0
    110e:	81 e0       	ldi	r24, 0x01	; 1
    1110:	96 d3       	rcall	.+1836   	; 0x183e <xQueueGenericCreateStatic>
	Sema_blancher_level_handle = xSemaphoreCreateBinaryStatic(&Sema_blancher_level_Buffer);
    1112:	23 ea       	ldi	r18, 0xA3	; 163
    1114:	37 e0       	ldi	r19, 0x07	; 7
    1116:	40 e0       	ldi	r20, 0x00	; 0
    1118:	50 e0       	ldi	r21, 0x00	; 0
    111a:	60 e0       	ldi	r22, 0x00	; 0
    111c:	81 e0       	ldi	r24, 0x01	; 1
    111e:	8f d3       	rcall	.+1822   	; 0x183e <xQueueGenericCreateStatic>
}
    1120:	0f 91       	pop	r16
    1122:	08 95       	ret

00001124 <RTE_init>:
#include "RTE_levels.h"
#include "RTE_temperature.h"
#include "RTE_main.h"

void RTE_init(void){
	RTE_encoder_init();
    1124:	be df       	rcall	.-132    	; 0x10a2 <RTE_encoder_init>
	RTE_invertersetting_init();
    1126:	be df       	rcall	.-132    	; 0x10a4 <RTE_invertersetting_init>
	RTE_operations_init();
    1128:	03 d0       	rcall	.+6      	; 0x1130 <RTE_operations_init>
	RTE_levels_init();
    112a:	ea df       	rcall	.-44     	; 0x1100 <RTE_levels_init>
    112c:	21 c0       	rjmp	.+66     	; 0x1170 <RTE_temperature_init>
	RTE_temperature_init();
    112e:	08 95       	ret

00001130 <RTE_operations_init>:
    1130:	0f 93       	push	r16
    1132:	03 e0       	ldi	r16, 0x03	; 3
static SemaphoreHandle_t Sema_Tank_Calibration_Operation_handle;
static StaticSemaphore_t Sema_Tank_Calibration_Operation_Buffer;
static uint16_t Tank_Calibration_Operation;

void RTE_operations_init(void){
	Sema_System_on_handle = xSemaphoreCreateBinaryStatic(&Sema_System_on_Buffer);
    1134:	2e e3       	ldi	r18, 0x3E	; 62
    1136:	38 e0       	ldi	r19, 0x08	; 8
    1138:	40 e0       	ldi	r20, 0x00	; 0
    113a:	50 e0       	ldi	r21, 0x00	; 0
    113c:	60 e0       	ldi	r22, 0x00	; 0
    113e:	81 e0       	ldi	r24, 0x01	; 1
    1140:	7e d3       	rcall	.+1788   	; 0x183e <xQueueGenericCreateStatic>
	Sema_Start_blancher_Operation_handle = xSemaphoreCreateBinaryStatic(&Sema_Start_blancher_Operation_Buffer);
    1142:	2f e1       	ldi	r18, 0x1F	; 31
    1144:	38 e0       	ldi	r19, 0x08	; 8
    1146:	40 e0       	ldi	r20, 0x00	; 0
    1148:	50 e0       	ldi	r21, 0x00	; 0
    114a:	60 e0       	ldi	r22, 0x00	; 0
    114c:	81 e0       	ldi	r24, 0x01	; 1
    114e:	77 d3       	rcall	.+1774   	; 0x183e <xQueueGenericCreateStatic>
	Sema_Wash_Operation_handle = xSemaphoreCreateBinaryStatic(&Sema_Wash_Operation_Buffer);
    1150:	20 e0       	ldi	r18, 0x00	; 0
    1152:	38 e0       	ldi	r19, 0x08	; 8
    1154:	40 e0       	ldi	r20, 0x00	; 0
    1156:	50 e0       	ldi	r21, 0x00	; 0
    1158:	60 e0       	ldi	r22, 0x00	; 0
    115a:	81 e0       	ldi	r24, 0x01	; 1
    115c:	70 d3       	rcall	.+1760   	; 0x183e <xQueueGenericCreateStatic>
	Sema_Tank_Calibration_Operation_handle = xSemaphoreCreateBinaryStatic(&Sema_Tank_Calibration_Operation_Buffer);
    115e:	21 ee       	ldi	r18, 0xE1	; 225
    1160:	37 e0       	ldi	r19, 0x07	; 7
    1162:	40 e0       	ldi	r20, 0x00	; 0
    1164:	50 e0       	ldi	r21, 0x00	; 0
    1166:	60 e0       	ldi	r22, 0x00	; 0
    1168:	81 e0       	ldi	r24, 0x01	; 1
    116a:	69 d3       	rcall	.+1746   	; 0x183e <xQueueGenericCreateStatic>

}
    116c:	0f 91       	pop	r16
    116e:	08 95       	ret

00001170 <RTE_temperature_init>:


static uint16_t Current_temperature;


void RTE_temperature_init(void){
    1170:	0f 93       	push	r16
	Sema_Sleep_temp_handle = xSemaphoreCreateBinaryStatic(&Sema_Sleep_temp_Buffer);
    1172:	03 e0       	ldi	r16, 0x03	; 3
    1174:	28 ef       	ldi	r18, 0xF8	; 248
    1176:	38 e0       	ldi	r19, 0x08	; 8
    1178:	40 e0       	ldi	r20, 0x00	; 0
    117a:	50 e0       	ldi	r21, 0x00	; 0
    117c:	60 e0       	ldi	r22, 0x00	; 0
    117e:	81 e0       	ldi	r24, 0x01	; 1
    1180:	5e d3       	rcall	.+1724   	; 0x183e <xQueueGenericCreateStatic>
	Sema_Set_temp_handle = xSemaphoreCreateBinaryStatic(&Sema_Set_temp_Buffer);
    1182:	29 ed       	ldi	r18, 0xD9	; 217
    1184:	38 e0       	ldi	r19, 0x08	; 8
    1186:	40 e0       	ldi	r20, 0x00	; 0
    1188:	50 e0       	ldi	r21, 0x00	; 0
    118a:	60 e0       	ldi	r22, 0x00	; 0
    118c:	81 e0       	ldi	r24, 0x01	; 1
    118e:	57 d3       	rcall	.+1710   	; 0x183e <xQueueGenericCreateStatic>
	Sema_threshold_set_temp_handle = xSemaphoreCreateBinaryStatic(&Sema_threshold_set_temp_Buffer);
    1190:	2a eb       	ldi	r18, 0xBA	; 186
    1192:	38 e0       	ldi	r19, 0x08	; 8
    1194:	40 e0       	ldi	r20, 0x00	; 0
    1196:	50 e0       	ldi	r21, 0x00	; 0
    1198:	60 e0       	ldi	r22, 0x00	; 0
    119a:	81 e0       	ldi	r24, 0x01	; 1
    119c:	50 d3       	rcall	.+1696   	; 0x183e <xQueueGenericCreateStatic>
	Sema_threshold_sleep_temp_handle = xSemaphoreCreateBinaryStatic(&Sema_threshold_sleep_temp_Buffer);
    119e:	2b e9       	ldi	r18, 0x9B	; 155
    11a0:	38 e0       	ldi	r19, 0x08	; 8
    11a2:	40 e0       	ldi	r20, 0x00	; 0
    11a4:	50 e0       	ldi	r21, 0x00	; 0
    11a6:	60 e0       	ldi	r22, 0x00	; 0
    11a8:	81 e0       	ldi	r24, 0x01	; 1
    11aa:	49 d3       	rcall	.+1682   	; 0x183e <xQueueGenericCreateStatic>
	Sema_Positive_offset_temp_handle = xSemaphoreCreateBinaryStatic(&Sema_Positive_offset_temp_Buffer);
    11ac:	2c e7       	ldi	r18, 0x7C	; 124
    11ae:	38 e0       	ldi	r19, 0x08	; 8
    11b0:	40 e0       	ldi	r20, 0x00	; 0
    11b2:	50 e0       	ldi	r21, 0x00	; 0
    11b4:	60 e0       	ldi	r22, 0x00	; 0
    11b6:	81 e0       	ldi	r24, 0x01	; 1
    11b8:	42 d3       	rcall	.+1668   	; 0x183e <xQueueGenericCreateStatic>
	Sema_Negative_offset_temp_handle = xSemaphoreCreateBinaryStatic(&Sema_Negative_offset_temp_Buffer);
    11ba:	2d e5       	ldi	r18, 0x5D	; 93
    11bc:	38 e0       	ldi	r19, 0x08	; 8
    11be:	40 e0       	ldi	r20, 0x00	; 0
    11c0:	50 e0       	ldi	r21, 0x00	; 0
    11c2:	60 e0       	ldi	r22, 0x00	; 0
    11c4:	81 e0       	ldi	r24, 0x01	; 1
    11c6:	3b d3       	rcall	.+1654   	; 0x183e <xQueueGenericCreateStatic>
}
    11c8:	0f 91       	pop	r16
    11ca:	08 95       	ret

000011cc <vApplicationStackOverflowHook>:
	   This routine will never return.
	   This routine is referenced in the task.c file of FreeRTOS as an extern.
	\*---------------------------------------------------------------------------*/

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
	DDRB  |= _BV(DDB7);
    11cc:	27 9a       	sbi	0x04, 7	; 4
	PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    11ce:	2f 9a       	sbi	0x05, 7	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    11d0:	2f ef       	ldi	r18, 0xFF	; 255
    11d2:	87 ea       	ldi	r24, 0xA7	; 167
    11d4:	91 e6       	ldi	r25, 0x61	; 97
    11d6:	21 50       	subi	r18, 0x01	; 1
    11d8:	80 40       	sbci	r24, 0x00	; 0
    11da:	90 40       	sbci	r25, 0x00	; 0
    11dc:	e1 f7       	brne	.-8      	; 0x11d6 <vApplicationStackOverflowHook+0xa>
    11de:	00 c0       	rjmp	.+0      	; 0x11e0 <vApplicationStackOverflowHook+0x14>
    11e0:	00 00       	nop
	for(;;)
	{
		_delay_ms(2000);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
		PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED slow blink.
    11e2:	1f 9a       	sbi	0x03, 7	; 3
    11e4:	f5 cf       	rjmp	.-22     	; 0x11d0 <vApplicationStackOverflowHook+0x4>

000011e6 <vApplicationGetIdleTaskMemory>:
                                    configSTACK_DEPTH_TYPE *pulIdleTaskStackSize )
{
    static StaticTask_t xIdleTaskTCB;
    static StackType_t uxIdleTaskStack[ configMINIMAL_STACK_SIZE ];

    *ppxIdleTaskTCBBuffer = &xIdleTaskTCB;
    11e6:	29 ee       	ldi	r18, 0xE9	; 233
    11e8:	39 e0       	ldi	r19, 0x09	; 9
    11ea:	fc 01       	movw	r30, r24
    11ec:	31 83       	std	Z+1, r19	; 0x01
    11ee:	20 83       	st	Z, r18
    *ppxIdleTaskStackBuffer = uxIdleTaskStack;
    11f0:	84 e9       	ldi	r24, 0x94	; 148
    11f2:	99 e0       	ldi	r25, 0x09	; 9
    11f4:	fb 01       	movw	r30, r22
    11f6:	91 83       	std	Z+1, r25	; 0x01
    11f8:	80 83       	st	Z, r24
    *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
    11fa:	85 e5       	ldi	r24, 0x55	; 85
    11fc:	90 e0       	ldi	r25, 0x00	; 0
    11fe:	fa 01       	movw	r30, r20
    1200:	91 83       	std	Z+1, r25	; 0x01
    1202:	80 83       	st	Z, r24
    1204:	08 95       	ret

00001206 <vApplicationGetTimerTaskMemory>:
                                     configSTACK_DEPTH_TYPE *pulTimerTaskStackSize )
{
    static StaticTask_t xTimerTaskTCB;
    static StackType_t uxTimerTaskStack[ configTIMER_TASK_STACK_DEPTH ];

    *ppxTimerTaskTCBBuffer = &xTimerTaskTCB;
    1206:	2c e6       	ldi	r18, 0x6C	; 108
    1208:	39 e0       	ldi	r19, 0x09	; 9
    120a:	fc 01       	movw	r30, r24
    120c:	31 83       	std	Z+1, r19	; 0x01
    120e:	20 83       	st	Z, r18
    *ppxTimerTaskStackBuffer = uxTimerTaskStack;
    1210:	87 e1       	ldi	r24, 0x17	; 23
    1212:	99 e0       	ldi	r25, 0x09	; 9
    1214:	fb 01       	movw	r30, r22
    1216:	91 83       	std	Z+1, r25	; 0x01
    1218:	80 83       	st	Z, r24
    *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
    121a:	85 e5       	ldi	r24, 0x55	; 85
    121c:	90 e0       	ldi	r25, 0x00	; 0
    121e:	fa 01       	movw	r30, r20
    1220:	91 83       	std	Z+1, r25	; 0x01
    1222:	80 83       	st	Z, r24
    1224:	08 95       	ret

00001226 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    1226:	fc 01       	movw	r30, r24
    /* The list structure contains a list item which is used to mark the
    end of the list.  To initialise the list the list end is inserted
    as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );            /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1228:	03 96       	adiw	r24, 0x03	; 3
    122a:	92 83       	std	Z+2, r25	; 0x02
    122c:	81 83       	std	Z+1, r24	; 0x01

    /* The list end value is the highest possible value in the list to
    ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
    122e:	2f ef       	ldi	r18, 0xFF	; 255
    1230:	3f ef       	ldi	r19, 0xFF	; 255
    1232:	34 83       	std	Z+4, r19	; 0x04
    1234:	23 83       	std	Z+3, r18	; 0x03

    /* The list end next and previous pointers point to itself so we know
    when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );    /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1236:	96 83       	std	Z+6, r25	; 0x06
    1238:	85 83       	std	Z+5, r24	; 0x05
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    123a:	90 87       	std	Z+8, r25	; 0x08
    123c:	87 83       	std	Z+7, r24	; 0x07

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    123e:	10 82       	st	Z, r1
    1240:	08 95       	ret

00001242 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
    1242:	fc 01       	movw	r30, r24
    1244:	11 86       	std	Z+9, r1	; 0x09
    1246:	10 86       	std	Z+8, r1	; 0x08
    1248:	08 95       	ret

0000124a <vListInsertEnd>:
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    124a:	cf 93       	push	r28
    124c:	df 93       	push	r29
    124e:	9c 01       	movw	r18, r24
    1250:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
    1252:	dc 01       	movw	r26, r24
    1254:	11 96       	adiw	r26, 0x01	; 1
    1256:	cd 91       	ld	r28, X+
    1258:	dc 91       	ld	r29, X
    125a:	12 97       	sbiw	r26, 0x02	; 2
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
    makes the new list item the last item to be removed by a call to
    listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
    125c:	d3 83       	std	Z+3, r29	; 0x03
    125e:	c2 83       	std	Z+2, r28	; 0x02
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    1260:	8c 81       	ldd	r24, Y+4	; 0x04
    1262:	9d 81       	ldd	r25, Y+5	; 0x05
    1264:	95 83       	std	Z+5, r25	; 0x05
    1266:	84 83       	std	Z+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
    1268:	8c 81       	ldd	r24, Y+4	; 0x04
    126a:	9d 81       	ldd	r25, Y+5	; 0x05
    126c:	dc 01       	movw	r26, r24
    126e:	13 96       	adiw	r26, 0x03	; 3
    1270:	7c 93       	st	X, r23
    1272:	6e 93       	st	-X, r22
    1274:	12 97       	sbiw	r26, 0x02	; 2
    pxIndex->pxPrevious = pxNewListItem;
    1276:	7d 83       	std	Y+5, r23	; 0x05
    1278:	6c 83       	std	Y+4, r22	; 0x04

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
    127a:	31 87       	std	Z+9, r19	; 0x09
    127c:	20 87       	std	Z+8, r18	; 0x08

    ( pxList->uxNumberOfItems )++;
    127e:	f9 01       	movw	r30, r18
    1280:	80 81       	ld	r24, Z
    1282:	8f 5f       	subi	r24, 0xFF	; 255
    1284:	80 83       	st	Z, r24
}
    1286:	df 91       	pop	r29
    1288:	cf 91       	pop	r28
    128a:	08 95       	ret

0000128c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    128c:	cf 93       	push	r28
    128e:	df 93       	push	r29
    1290:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    1292:	48 81       	ld	r20, Y
    1294:	59 81       	ldd	r21, Y+1	; 0x01
    new list item should be placed after it.  This ensures that TCBs which are
    stored in ready lists (all of which have the same xItemValue value) get a
    share of the CPU.  However, if the xItemValue is the same as the back marker
    the iteration loop below will not end.  Therefore the value is checked
    first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
    1296:	4f 3f       	cpi	r20, 0xFF	; 255
    1298:	2f ef       	ldi	r18, 0xFF	; 255
    129a:	52 07       	cpc	r21, r18
    129c:	21 f4       	brne	.+8      	; 0x12a6 <vListInsert+0x1a>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
    129e:	fc 01       	movw	r30, r24
    12a0:	a7 81       	ldd	r26, Z+7	; 0x07
    12a2:	b0 85       	ldd	r27, Z+8	; 0x08
    12a4:	0d c0       	rjmp	.+26     	; 0x12c0 <vListInsert+0x34>
            4) Using a queue or semaphore before it has been initialised or
               before the scheduler has been started (are interrupts firing
               before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
    12a6:	dc 01       	movw	r26, r24
    12a8:	13 96       	adiw	r26, 0x03	; 3
    12aa:	01 c0       	rjmp	.+2      	; 0x12ae <vListInsert+0x22>
    12ac:	df 01       	movw	r26, r30
    12ae:	12 96       	adiw	r26, 0x02	; 2
    12b0:	ed 91       	ld	r30, X+
    12b2:	fc 91       	ld	r31, X
    12b4:	13 97       	sbiw	r26, 0x03	; 3
    12b6:	20 81       	ld	r18, Z
    12b8:	31 81       	ldd	r19, Z+1	; 0x01
    12ba:	42 17       	cp	r20, r18
    12bc:	53 07       	cpc	r21, r19
    12be:	b0 f7       	brcc	.-20     	; 0x12ac <vListInsert+0x20>
            /* There is nothing to do here, just iterating to the wanted
            insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
    12c0:	12 96       	adiw	r26, 0x02	; 2
    12c2:	ed 91       	ld	r30, X+
    12c4:	fc 91       	ld	r31, X
    12c6:	13 97       	sbiw	r26, 0x03	; 3
    12c8:	fb 83       	std	Y+3, r31	; 0x03
    12ca:	ea 83       	std	Y+2, r30	; 0x02
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    12cc:	d5 83       	std	Z+5, r29	; 0x05
    12ce:	c4 83       	std	Z+4, r28	; 0x04
    pxNewListItem->pxPrevious = pxIterator;
    12d0:	bd 83       	std	Y+5, r27	; 0x05
    12d2:	ac 83       	std	Y+4, r26	; 0x04
    pxIterator->pxNext = pxNewListItem;
    12d4:	13 96       	adiw	r26, 0x03	; 3
    12d6:	dc 93       	st	X, r29
    12d8:	ce 93       	st	-X, r28
    12da:	12 97       	sbiw	r26, 0x02	; 2

    /* Remember which list the item is in.  This allows fast removal of the
    item later. */
    pxNewListItem->pxContainer = pxList;
    12dc:	99 87       	std	Y+9, r25	; 0x09
    12de:	88 87       	std	Y+8, r24	; 0x08

    ( pxList->uxNumberOfItems )++;
    12e0:	fc 01       	movw	r30, r24
    12e2:	20 81       	ld	r18, Z
    12e4:	2f 5f       	subi	r18, 0xFF	; 255
    12e6:	20 83       	st	Z, r18
}
    12e8:	df 91       	pop	r29
    12ea:	cf 91       	pop	r28
    12ec:	08 95       	ret

000012ee <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    12ee:	cf 93       	push	r28
    12f0:	df 93       	push	r29
    12f2:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
    12f4:	a0 85       	ldd	r26, Z+8	; 0x08
    12f6:	b1 85       	ldd	r27, Z+9	; 0x09

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    12f8:	c2 81       	ldd	r28, Z+2	; 0x02
    12fa:	d3 81       	ldd	r29, Z+3	; 0x03
    12fc:	84 81       	ldd	r24, Z+4	; 0x04
    12fe:	95 81       	ldd	r25, Z+5	; 0x05
    1300:	9d 83       	std	Y+5, r25	; 0x05
    1302:	8c 83       	std	Y+4, r24	; 0x04
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    1304:	c4 81       	ldd	r28, Z+4	; 0x04
    1306:	d5 81       	ldd	r29, Z+5	; 0x05
    1308:	82 81       	ldd	r24, Z+2	; 0x02
    130a:	93 81       	ldd	r25, Z+3	; 0x03
    130c:	9b 83       	std	Y+3, r25	; 0x03
    130e:	8a 83       	std	Y+2, r24	; 0x02

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
    1310:	11 96       	adiw	r26, 0x01	; 1
    1312:	8d 91       	ld	r24, X+
    1314:	9c 91       	ld	r25, X
    1316:	12 97       	sbiw	r26, 0x02	; 2
    1318:	e8 17       	cp	r30, r24
    131a:	f9 07       	cpc	r31, r25
    131c:	31 f4       	brne	.+12     	; 0x132a <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
    131e:	84 81       	ldd	r24, Z+4	; 0x04
    1320:	95 81       	ldd	r25, Z+5	; 0x05
    1322:	12 96       	adiw	r26, 0x02	; 2
    1324:	9c 93       	st	X, r25
    1326:	8e 93       	st	-X, r24
    1328:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
    132a:	11 86       	std	Z+9, r1	; 0x09
    132c:	10 86       	std	Z+8, r1	; 0x08
    ( pxList->uxNumberOfItems )--;
    132e:	8c 91       	ld	r24, X
    1330:	81 50       	subi	r24, 0x01	; 1
    1332:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
    1334:	8c 91       	ld	r24, X
}
    1336:	df 91       	pop	r29
    1338:	cf 91       	pop	r28
    133a:	08 95       	ret

0000133c <pxPortInitialiseStack>:
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
    133c:	31 e1       	ldi	r19, 0x11	; 17
    133e:	fc 01       	movw	r30, r24
    1340:	30 83       	st	Z, r19
    1342:	31 97       	sbiw	r30, 0x01	; 1
    1344:	22 e2       	ldi	r18, 0x22	; 34
    1346:	20 83       	st	Z, r18
    1348:	31 97       	sbiw	r30, 0x01	; 1
    134a:	a3 e3       	ldi	r26, 0x33	; 51
    134c:	a0 83       	st	Z, r26
    134e:	31 97       	sbiw	r30, 0x01	; 1
    1350:	60 83       	st	Z, r22
    1352:	31 97       	sbiw	r30, 0x01	; 1
    1354:	70 83       	st	Z, r23
    1356:	31 97       	sbiw	r30, 0x01	; 1
    1358:	10 82       	st	Z, r1
    135a:	31 97       	sbiw	r30, 0x01	; 1
    135c:	10 82       	st	Z, r1
    135e:	31 97       	sbiw	r30, 0x01	; 1
    1360:	60 e8       	ldi	r22, 0x80	; 128
    1362:	60 83       	st	Z, r22
    1364:	31 97       	sbiw	r30, 0x01	; 1
    1366:	10 82       	st	Z, r1
    1368:	31 97       	sbiw	r30, 0x01	; 1
    136a:	10 82       	st	Z, r1
    136c:	31 97       	sbiw	r30, 0x01	; 1
    136e:	10 82       	st	Z, r1
    1370:	31 97       	sbiw	r30, 0x01	; 1
    1372:	62 e0       	ldi	r22, 0x02	; 2
    1374:	60 83       	st	Z, r22
    1376:	31 97       	sbiw	r30, 0x01	; 1
    1378:	63 e0       	ldi	r22, 0x03	; 3
    137a:	60 83       	st	Z, r22
    137c:	31 97       	sbiw	r30, 0x01	; 1
    137e:	64 e0       	ldi	r22, 0x04	; 4
    1380:	60 83       	st	Z, r22
    1382:	31 97       	sbiw	r30, 0x01	; 1
    1384:	65 e0       	ldi	r22, 0x05	; 5
    1386:	60 83       	st	Z, r22
    1388:	31 97       	sbiw	r30, 0x01	; 1
    138a:	66 e0       	ldi	r22, 0x06	; 6
    138c:	60 83       	st	Z, r22
    138e:	31 97       	sbiw	r30, 0x01	; 1
    1390:	67 e0       	ldi	r22, 0x07	; 7
    1392:	60 83       	st	Z, r22
    1394:	31 97       	sbiw	r30, 0x01	; 1
    1396:	68 e0       	ldi	r22, 0x08	; 8
    1398:	60 83       	st	Z, r22
    139a:	31 97       	sbiw	r30, 0x01	; 1
    139c:	69 e0       	ldi	r22, 0x09	; 9
    139e:	60 83       	st	Z, r22
    13a0:	31 97       	sbiw	r30, 0x01	; 1
    13a2:	60 e1       	ldi	r22, 0x10	; 16
    13a4:	60 83       	st	Z, r22
    13a6:	31 97       	sbiw	r30, 0x01	; 1
    13a8:	30 83       	st	Z, r19
    13aa:	31 97       	sbiw	r30, 0x01	; 1
    13ac:	32 e1       	ldi	r19, 0x12	; 18
    13ae:	30 83       	st	Z, r19
    13b0:	31 97       	sbiw	r30, 0x01	; 1
    13b2:	33 e1       	ldi	r19, 0x13	; 19
    13b4:	30 83       	st	Z, r19
    13b6:	31 97       	sbiw	r30, 0x01	; 1
    13b8:	34 e1       	ldi	r19, 0x14	; 20
    13ba:	30 83       	st	Z, r19
    13bc:	31 97       	sbiw	r30, 0x01	; 1
    13be:	35 e1       	ldi	r19, 0x15	; 21
    13c0:	30 83       	st	Z, r19
    13c2:	31 97       	sbiw	r30, 0x01	; 1
    13c4:	36 e1       	ldi	r19, 0x16	; 22
    13c6:	30 83       	st	Z, r19
    13c8:	31 97       	sbiw	r30, 0x01	; 1
    13ca:	37 e1       	ldi	r19, 0x17	; 23
    13cc:	30 83       	st	Z, r19
    13ce:	31 97       	sbiw	r30, 0x01	; 1
    13d0:	38 e1       	ldi	r19, 0x18	; 24
    13d2:	30 83       	st	Z, r19
    13d4:	31 97       	sbiw	r30, 0x01	; 1
    13d6:	39 e1       	ldi	r19, 0x19	; 25
    13d8:	30 83       	st	Z, r19
    13da:	31 97       	sbiw	r30, 0x01	; 1
    13dc:	30 e2       	ldi	r19, 0x20	; 32
    13de:	30 83       	st	Z, r19
    13e0:	31 97       	sbiw	r30, 0x01	; 1
    13e2:	31 e2       	ldi	r19, 0x21	; 33
    13e4:	30 83       	st	Z, r19
    13e6:	31 97       	sbiw	r30, 0x01	; 1
    13e8:	20 83       	st	Z, r18
    13ea:	31 97       	sbiw	r30, 0x01	; 1
    13ec:	23 e2       	ldi	r18, 0x23	; 35
    13ee:	20 83       	st	Z, r18
    13f0:	31 97       	sbiw	r30, 0x01	; 1
    13f2:	40 83       	st	Z, r20
    13f4:	31 97       	sbiw	r30, 0x01	; 1
    13f6:	50 83       	st	Z, r21
    13f8:	31 97       	sbiw	r30, 0x01	; 1
    13fa:	26 e2       	ldi	r18, 0x26	; 38
    13fc:	20 83       	st	Z, r18
    13fe:	31 97       	sbiw	r30, 0x01	; 1
    1400:	27 e2       	ldi	r18, 0x27	; 39
    1402:	20 83       	st	Z, r18
    1404:	31 97       	sbiw	r30, 0x01	; 1
    1406:	28 e2       	ldi	r18, 0x28	; 40
    1408:	20 83       	st	Z, r18
    140a:	31 97       	sbiw	r30, 0x01	; 1
    140c:	29 e2       	ldi	r18, 0x29	; 41
    140e:	20 83       	st	Z, r18
    1410:	31 97       	sbiw	r30, 0x01	; 1
    1412:	20 e3       	ldi	r18, 0x30	; 48
    1414:	20 83       	st	Z, r18
    1416:	31 97       	sbiw	r30, 0x01	; 1
    1418:	21 e3       	ldi	r18, 0x31	; 49
    141a:	20 83       	st	Z, r18
    141c:	89 97       	sbiw	r24, 0x29	; 41
    141e:	08 95       	ret

00001420 <xPortStartScheduler>:
    1420:	a8 95       	wdr
    1422:	90 ec       	ldi	r25, 0xC0	; 192
    1424:	88 e1       	ldi	r24, 0x18	; 24
    1426:	0f b6       	in	r0, 0x3f	; 63
    1428:	f8 94       	cli
    142a:	a8 95       	wdr
    142c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
    1430:	0f be       	out	0x3f, r0	; 63
    1432:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
    1436:	a0 91 6a 0a 	lds	r26, 0x0A6A	; 0x800a6a <pxCurrentTCB>
    143a:	b0 91 6b 0a 	lds	r27, 0x0A6B	; 0x800a6b <pxCurrentTCB+0x1>
    143e:	cd 91       	ld	r28, X+
    1440:	cd bf       	out	0x3d, r28	; 61
    1442:	dd 91       	ld	r29, X+
    1444:	de bf       	out	0x3e, r29	; 62
    1446:	ff 91       	pop	r31
    1448:	ef 91       	pop	r30
    144a:	df 91       	pop	r29
    144c:	cf 91       	pop	r28
    144e:	bf 91       	pop	r27
    1450:	af 91       	pop	r26
    1452:	9f 91       	pop	r25
    1454:	8f 91       	pop	r24
    1456:	7f 91       	pop	r23
    1458:	6f 91       	pop	r22
    145a:	5f 91       	pop	r21
    145c:	4f 91       	pop	r20
    145e:	3f 91       	pop	r19
    1460:	2f 91       	pop	r18
    1462:	1f 91       	pop	r17
    1464:	0f 91       	pop	r16
    1466:	ff 90       	pop	r15
    1468:	ef 90       	pop	r14
    146a:	df 90       	pop	r13
    146c:	cf 90       	pop	r12
    146e:	bf 90       	pop	r11
    1470:	af 90       	pop	r10
    1472:	9f 90       	pop	r9
    1474:	8f 90       	pop	r8
    1476:	7f 90       	pop	r7
    1478:	6f 90       	pop	r6
    147a:	5f 90       	pop	r5
    147c:	4f 90       	pop	r4
    147e:	3f 90       	pop	r3
    1480:	2f 90       	pop	r2
    1482:	1f 90       	pop	r1
    1484:	0f 90       	pop	r0
    1486:	0c be       	out	0x3c, r0	; 60
    1488:	0f 90       	pop	r0
    148a:	0b be       	out	0x3b, r0	; 59
    148c:	0f 90       	pop	r0
    148e:	0f be       	out	0x3f, r0	; 63
    1490:	0f 90       	pop	r0
    1492:	08 95       	ret
    1494:	81 e0       	ldi	r24, 0x01	; 1
    1496:	08 95       	ret

00001498 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    1498:	0f 92       	push	r0
    149a:	0f b6       	in	r0, 0x3f	; 63
    149c:	f8 94       	cli
    149e:	0f 92       	push	r0
    14a0:	0b b6       	in	r0, 0x3b	; 59
    14a2:	0f 92       	push	r0
    14a4:	0c b6       	in	r0, 0x3c	; 60
    14a6:	0f 92       	push	r0
    14a8:	1f 92       	push	r1
    14aa:	11 24       	eor	r1, r1
    14ac:	2f 92       	push	r2
    14ae:	3f 92       	push	r3
    14b0:	4f 92       	push	r4
    14b2:	5f 92       	push	r5
    14b4:	6f 92       	push	r6
    14b6:	7f 92       	push	r7
    14b8:	8f 92       	push	r8
    14ba:	9f 92       	push	r9
    14bc:	af 92       	push	r10
    14be:	bf 92       	push	r11
    14c0:	cf 92       	push	r12
    14c2:	df 92       	push	r13
    14c4:	ef 92       	push	r14
    14c6:	ff 92       	push	r15
    14c8:	0f 93       	push	r16
    14ca:	1f 93       	push	r17
    14cc:	2f 93       	push	r18
    14ce:	3f 93       	push	r19
    14d0:	4f 93       	push	r20
    14d2:	5f 93       	push	r21
    14d4:	6f 93       	push	r22
    14d6:	7f 93       	push	r23
    14d8:	8f 93       	push	r24
    14da:	9f 93       	push	r25
    14dc:	af 93       	push	r26
    14de:	bf 93       	push	r27
    14e0:	cf 93       	push	r28
    14e2:	df 93       	push	r29
    14e4:	ef 93       	push	r30
    14e6:	ff 93       	push	r31
    14e8:	a0 91 6a 0a 	lds	r26, 0x0A6A	; 0x800a6a <pxCurrentTCB>
    14ec:	b0 91 6b 0a 	lds	r27, 0x0A6B	; 0x800a6b <pxCurrentTCB+0x1>
    14f0:	0d b6       	in	r0, 0x3d	; 61
    14f2:	0d 92       	st	X+, r0
    14f4:	0e b6       	in	r0, 0x3e	; 62
    14f6:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    14f8:	ce d6       	rcall	.+3484   	; 0x2296 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    14fa:	a0 91 6a 0a 	lds	r26, 0x0A6A	; 0x800a6a <pxCurrentTCB>
    14fe:	b0 91 6b 0a 	lds	r27, 0x0A6B	; 0x800a6b <pxCurrentTCB+0x1>
    1502:	cd 91       	ld	r28, X+
    1504:	cd bf       	out	0x3d, r28	; 61
    1506:	dd 91       	ld	r29, X+
    1508:	de bf       	out	0x3e, r29	; 62
    150a:	ff 91       	pop	r31
    150c:	ef 91       	pop	r30
    150e:	df 91       	pop	r29
    1510:	cf 91       	pop	r28
    1512:	bf 91       	pop	r27
    1514:	af 91       	pop	r26
    1516:	9f 91       	pop	r25
    1518:	8f 91       	pop	r24
    151a:	7f 91       	pop	r23
    151c:	6f 91       	pop	r22
    151e:	5f 91       	pop	r21
    1520:	4f 91       	pop	r20
    1522:	3f 91       	pop	r19
    1524:	2f 91       	pop	r18
    1526:	1f 91       	pop	r17
    1528:	0f 91       	pop	r16
    152a:	ff 90       	pop	r15
    152c:	ef 90       	pop	r14
    152e:	df 90       	pop	r13
    1530:	cf 90       	pop	r12
    1532:	bf 90       	pop	r11
    1534:	af 90       	pop	r10
    1536:	9f 90       	pop	r9
    1538:	8f 90       	pop	r8
    153a:	7f 90       	pop	r7
    153c:	6f 90       	pop	r6
    153e:	5f 90       	pop	r5
    1540:	4f 90       	pop	r4
    1542:	3f 90       	pop	r3
    1544:	2f 90       	pop	r2
    1546:	1f 90       	pop	r1
    1548:	0f 90       	pop	r0
    154a:	0c be       	out	0x3c, r0	; 60
    154c:	0f 90       	pop	r0
    154e:	0b be       	out	0x3b, r0	; 59
    1550:	0f 90       	pop	r0
    1552:	0f be       	out	0x3f, r0	; 63
    1554:	0f 90       	pop	r0

	__asm__ __volatile__ ( "ret" );
    1556:	08 95       	ret

00001558 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    1558:	0f 92       	push	r0
    155a:	0f b6       	in	r0, 0x3f	; 63
    155c:	f8 94       	cli
    155e:	0f 92       	push	r0
    1560:	0b b6       	in	r0, 0x3b	; 59
    1562:	0f 92       	push	r0
    1564:	0c b6       	in	r0, 0x3c	; 60
    1566:	0f 92       	push	r0
    1568:	1f 92       	push	r1
    156a:	11 24       	eor	r1, r1
    156c:	2f 92       	push	r2
    156e:	3f 92       	push	r3
    1570:	4f 92       	push	r4
    1572:	5f 92       	push	r5
    1574:	6f 92       	push	r6
    1576:	7f 92       	push	r7
    1578:	8f 92       	push	r8
    157a:	9f 92       	push	r9
    157c:	af 92       	push	r10
    157e:	bf 92       	push	r11
    1580:	cf 92       	push	r12
    1582:	df 92       	push	r13
    1584:	ef 92       	push	r14
    1586:	ff 92       	push	r15
    1588:	0f 93       	push	r16
    158a:	1f 93       	push	r17
    158c:	2f 93       	push	r18
    158e:	3f 93       	push	r19
    1590:	4f 93       	push	r20
    1592:	5f 93       	push	r21
    1594:	6f 93       	push	r22
    1596:	7f 93       	push	r23
    1598:	8f 93       	push	r24
    159a:	9f 93       	push	r25
    159c:	af 93       	push	r26
    159e:	bf 93       	push	r27
    15a0:	cf 93       	push	r28
    15a2:	df 93       	push	r29
    15a4:	ef 93       	push	r30
    15a6:	ff 93       	push	r31
    15a8:	a0 91 6a 0a 	lds	r26, 0x0A6A	; 0x800a6a <pxCurrentTCB>
    15ac:	b0 91 6b 0a 	lds	r27, 0x0A6B	; 0x800a6b <pxCurrentTCB+0x1>
    15b0:	0d b6       	in	r0, 0x3d	; 61
    15b2:	0d 92       	st	X+, r0
    15b4:	0e b6       	in	r0, 0x3e	; 62
    15b6:	0d 92       	st	X+, r0

	sleep_reset();		//	 reset the sleep_mode() faster than sleep_disable();
    15b8:	13 be       	out	0x33, r1	; 51

	if( xTaskIncrementTick() != pdFALSE )
    15ba:	2d d5       	rcall	.+2650   	; 0x2016 <xTaskIncrementTick>
    15bc:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
    15be:	6b d6       	rcall	.+3286   	; 0x2296 <vTaskSwitchContext>
    15c0:	a0 91 6a 0a 	lds	r26, 0x0A6A	; 0x800a6a <pxCurrentTCB>
	}

	portRESTORE_CONTEXT();
    15c4:	b0 91 6b 0a 	lds	r27, 0x0A6B	; 0x800a6b <pxCurrentTCB+0x1>
    15c8:	cd 91       	ld	r28, X+
    15ca:	cd bf       	out	0x3d, r28	; 61
    15cc:	dd 91       	ld	r29, X+
    15ce:	de bf       	out	0x3e, r29	; 62
    15d0:	ff 91       	pop	r31
    15d2:	ef 91       	pop	r30
    15d4:	df 91       	pop	r29
    15d6:	cf 91       	pop	r28
    15d8:	bf 91       	pop	r27
    15da:	af 91       	pop	r26
    15dc:	9f 91       	pop	r25
    15de:	8f 91       	pop	r24
    15e0:	7f 91       	pop	r23
    15e2:	6f 91       	pop	r22
    15e4:	5f 91       	pop	r21
    15e6:	4f 91       	pop	r20
    15e8:	3f 91       	pop	r19
    15ea:	2f 91       	pop	r18
    15ec:	1f 91       	pop	r17
    15ee:	0f 91       	pop	r16
    15f0:	ff 90       	pop	r15
    15f2:	ef 90       	pop	r14
    15f4:	df 90       	pop	r13
    15f6:	cf 90       	pop	r12
    15f8:	bf 90       	pop	r11
    15fa:	af 90       	pop	r10
    15fc:	9f 90       	pop	r9
    15fe:	8f 90       	pop	r8
    1600:	7f 90       	pop	r7
    1602:	6f 90       	pop	r6
    1604:	5f 90       	pop	r5
    1606:	4f 90       	pop	r4
    1608:	3f 90       	pop	r3
    160a:	2f 90       	pop	r2
    160c:	1f 90       	pop	r1
    160e:	0f 90       	pop	r0
    1610:	0c be       	out	0x3c, r0	; 60
    1612:	0f 90       	pop	r0
    1614:	0b be       	out	0x3b, r0	; 59
    1616:	0f 90       	pop	r0
    1618:	0f be       	out	0x3f, r0	; 63
    161a:	0f 90       	pop	r0
    161c:	08 95       	ret

0000161e <__vector_12>:

	__asm__ __volatile__ ( "ret" );
    161e:	9c df       	rcall	.-200    	; 0x1558 <vPortYieldFromTick>
//	ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
	ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
	ISR(portSCHEDULER_ISR)
	{
		vPortYieldFromTick();
		__asm__ __volatile__ ( "reti" );
    1620:	18 95       	reti

00001622 <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    1622:	0f b6       	in	r0, 0x3f	; 63
    1624:	f8 94       	cli
    1626:	0f 92       	push	r0
    1628:	fc 01       	movw	r30, r24
    162a:	92 8d       	ldd	r25, Z+26	; 0x1a
    162c:	0f 90       	pop	r0
    162e:	0f be       	out	0x3f, r0	; 63
    1630:	81 e0       	ldi	r24, 0x01	; 1
    1632:	91 11       	cpse	r25, r1
    1634:	80 e0       	ldi	r24, 0x00	; 0
    1636:	08 95       	ret

00001638 <prvCopyDataToQueue>:
    1638:	0f 93       	push	r16
    163a:	1f 93       	push	r17
    163c:	cf 93       	push	r28
    163e:	df 93       	push	r29
    1640:	ec 01       	movw	r28, r24
    1642:	04 2f       	mov	r16, r20
    1644:	1a 8d       	ldd	r17, Y+26	; 0x1a
    1646:	4c 8d       	ldd	r20, Y+28	; 0x1c
    1648:	41 11       	cpse	r20, r1
    164a:	0b c0       	rjmp	.+22     	; 0x1662 <prvCopyDataToQueue+0x2a>
    164c:	88 81       	ld	r24, Y
    164e:	99 81       	ldd	r25, Y+1	; 0x01
    1650:	89 2b       	or	r24, r25
    1652:	09 f0       	breq	.+2      	; 0x1656 <prvCopyDataToQueue+0x1e>
    1654:	41 c0       	rjmp	.+130    	; 0x16d8 <prvCopyDataToQueue+0xa0>
    1656:	8c 81       	ldd	r24, Y+4	; 0x04
    1658:	9d 81       	ldd	r25, Y+5	; 0x05
    165a:	c9 d7       	rcall	.+3986   	; 0x25ee <xTaskPriorityDisinherit>
    165c:	1d 82       	std	Y+5, r1	; 0x05
    165e:	1c 82       	std	Y+4, r1	; 0x04
    1660:	42 c0       	rjmp	.+132    	; 0x16e6 <prvCopyDataToQueue+0xae>
    1662:	01 11       	cpse	r16, r1
    1664:	17 c0       	rjmp	.+46     	; 0x1694 <prvCopyDataToQueue+0x5c>
    1666:	50 e0       	ldi	r21, 0x00	; 0
    1668:	8a 81       	ldd	r24, Y+2	; 0x02
    166a:	9b 81       	ldd	r25, Y+3	; 0x03
    166c:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <memcpy>
    1670:	2c 8d       	ldd	r18, Y+28	; 0x1c
    1672:	8a 81       	ldd	r24, Y+2	; 0x02
    1674:	9b 81       	ldd	r25, Y+3	; 0x03
    1676:	82 0f       	add	r24, r18
    1678:	91 1d       	adc	r25, r1
    167a:	9b 83       	std	Y+3, r25	; 0x03
    167c:	8a 83       	std	Y+2, r24	; 0x02
    167e:	2c 81       	ldd	r18, Y+4	; 0x04
    1680:	3d 81       	ldd	r19, Y+5	; 0x05
    1682:	82 17       	cp	r24, r18
    1684:	93 07       	cpc	r25, r19
    1686:	50 f1       	brcs	.+84     	; 0x16dc <prvCopyDataToQueue+0xa4>
    1688:	88 81       	ld	r24, Y
    168a:	99 81       	ldd	r25, Y+1	; 0x01
    168c:	9b 83       	std	Y+3, r25	; 0x03
    168e:	8a 83       	std	Y+2, r24	; 0x02
    1690:	80 e0       	ldi	r24, 0x00	; 0
    1692:	29 c0       	rjmp	.+82     	; 0x16e6 <prvCopyDataToQueue+0xae>
    1694:	50 e0       	ldi	r21, 0x00	; 0
    1696:	8e 81       	ldd	r24, Y+6	; 0x06
    1698:	9f 81       	ldd	r25, Y+7	; 0x07
    169a:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <memcpy>
    169e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    16a0:	90 e0       	ldi	r25, 0x00	; 0
    16a2:	91 95       	neg	r25
    16a4:	81 95       	neg	r24
    16a6:	91 09       	sbc	r25, r1
    16a8:	2e 81       	ldd	r18, Y+6	; 0x06
    16aa:	3f 81       	ldd	r19, Y+7	; 0x07
    16ac:	28 0f       	add	r18, r24
    16ae:	39 1f       	adc	r19, r25
    16b0:	3f 83       	std	Y+7, r19	; 0x07
    16b2:	2e 83       	std	Y+6, r18	; 0x06
    16b4:	48 81       	ld	r20, Y
    16b6:	59 81       	ldd	r21, Y+1	; 0x01
    16b8:	24 17       	cp	r18, r20
    16ba:	35 07       	cpc	r19, r21
    16bc:	30 f4       	brcc	.+12     	; 0x16ca <prvCopyDataToQueue+0x92>
    16be:	2c 81       	ldd	r18, Y+4	; 0x04
    16c0:	3d 81       	ldd	r19, Y+5	; 0x05
    16c2:	82 0f       	add	r24, r18
    16c4:	93 1f       	adc	r25, r19
    16c6:	9f 83       	std	Y+7, r25	; 0x07
    16c8:	8e 83       	std	Y+6, r24	; 0x06
    16ca:	02 30       	cpi	r16, 0x02	; 2
    16cc:	49 f4       	brne	.+18     	; 0x16e0 <prvCopyDataToQueue+0xa8>
    16ce:	11 23       	and	r17, r17
    16d0:	49 f0       	breq	.+18     	; 0x16e4 <prvCopyDataToQueue+0xac>
    16d2:	11 50       	subi	r17, 0x01	; 1
    16d4:	80 e0       	ldi	r24, 0x00	; 0
    16d6:	07 c0       	rjmp	.+14     	; 0x16e6 <prvCopyDataToQueue+0xae>
    16d8:	80 e0       	ldi	r24, 0x00	; 0
    16da:	05 c0       	rjmp	.+10     	; 0x16e6 <prvCopyDataToQueue+0xae>
    16dc:	80 e0       	ldi	r24, 0x00	; 0
    16de:	03 c0       	rjmp	.+6      	; 0x16e6 <prvCopyDataToQueue+0xae>
    16e0:	80 e0       	ldi	r24, 0x00	; 0
    16e2:	01 c0       	rjmp	.+2      	; 0x16e6 <prvCopyDataToQueue+0xae>
    16e4:	80 e0       	ldi	r24, 0x00	; 0
    16e6:	1f 5f       	subi	r17, 0xFF	; 255
    16e8:	1a 8f       	std	Y+26, r17	; 0x1a
    16ea:	df 91       	pop	r29
    16ec:	cf 91       	pop	r28
    16ee:	1f 91       	pop	r17
    16f0:	0f 91       	pop	r16
    16f2:	08 95       	ret

000016f4 <prvCopyDataFromQueue>:
    16f4:	fc 01       	movw	r30, r24
    16f6:	44 8d       	ldd	r20, Z+28	; 0x1c
    16f8:	44 23       	and	r20, r20
    16fa:	a9 f0       	breq	.+42     	; 0x1726 <prvCopyDataFromQueue+0x32>
    16fc:	50 e0       	ldi	r21, 0x00	; 0
    16fe:	26 81       	ldd	r18, Z+6	; 0x06
    1700:	37 81       	ldd	r19, Z+7	; 0x07
    1702:	24 0f       	add	r18, r20
    1704:	35 1f       	adc	r19, r21
    1706:	37 83       	std	Z+7, r19	; 0x07
    1708:	26 83       	std	Z+6, r18	; 0x06
    170a:	84 81       	ldd	r24, Z+4	; 0x04
    170c:	95 81       	ldd	r25, Z+5	; 0x05
    170e:	28 17       	cp	r18, r24
    1710:	39 07       	cpc	r19, r25
    1712:	20 f0       	brcs	.+8      	; 0x171c <prvCopyDataFromQueue+0x28>
    1714:	80 81       	ld	r24, Z
    1716:	91 81       	ldd	r25, Z+1	; 0x01
    1718:	97 83       	std	Z+7, r25	; 0x07
    171a:	86 83       	std	Z+6, r24	; 0x06
    171c:	cb 01       	movw	r24, r22
    171e:	66 81       	ldd	r22, Z+6	; 0x06
    1720:	77 81       	ldd	r23, Z+7	; 0x07
    1722:	0c 94 3b 16 	jmp	0x2c76	; 0x2c76 <memcpy>
    1726:	08 95       	ret

00001728 <prvUnlockQueue>:
    1728:	ef 92       	push	r14
    172a:	ff 92       	push	r15
    172c:	0f 93       	push	r16
    172e:	1f 93       	push	r17
    1730:	cf 93       	push	r28
    1732:	8c 01       	movw	r16, r24
    1734:	0f b6       	in	r0, 0x3f	; 63
    1736:	f8 94       	cli
    1738:	0f 92       	push	r0
    173a:	fc 01       	movw	r30, r24
    173c:	c6 8d       	ldd	r28, Z+30	; 0x1e
    173e:	1c 16       	cp	r1, r28
    1740:	9c f4       	brge	.+38     	; 0x1768 <prvUnlockQueue+0x40>
    1742:	81 89       	ldd	r24, Z+17	; 0x11
    1744:	81 11       	cpse	r24, r1
    1746:	06 c0       	rjmp	.+12     	; 0x1754 <prvUnlockQueue+0x2c>
    1748:	0f c0       	rjmp	.+30     	; 0x1768 <prvUnlockQueue+0x40>
    174a:	f8 01       	movw	r30, r16
    174c:	81 89       	ldd	r24, Z+17	; 0x11
    174e:	81 11       	cpse	r24, r1
    1750:	05 c0       	rjmp	.+10     	; 0x175c <prvUnlockQueue+0x34>
    1752:	0a c0       	rjmp	.+20     	; 0x1768 <prvUnlockQueue+0x40>
    1754:	78 01       	movw	r14, r16
    1756:	f1 e1       	ldi	r31, 0x11	; 17
    1758:	ef 0e       	add	r14, r31
    175a:	f1 1c       	adc	r15, r1
    175c:	c7 01       	movw	r24, r14
    175e:	45 d6       	rcall	.+3210   	; 0x23ea <xTaskRemoveFromEventList>
    1760:	81 11       	cpse	r24, r1
    1762:	c1 d6       	rcall	.+3458   	; 0x24e6 <vTaskMissedYield>
    1764:	c1 50       	subi	r28, 0x01	; 1
    1766:	89 f7       	brne	.-30     	; 0x174a <prvUnlockQueue+0x22>
    1768:	8f ef       	ldi	r24, 0xFF	; 255
    176a:	f8 01       	movw	r30, r16
    176c:	86 8f       	std	Z+30, r24	; 0x1e
    176e:	0f 90       	pop	r0
    1770:	0f be       	out	0x3f, r0	; 63
    1772:	0f b6       	in	r0, 0x3f	; 63
    1774:	f8 94       	cli
    1776:	0f 92       	push	r0
    1778:	c5 8d       	ldd	r28, Z+29	; 0x1d
    177a:	1c 16       	cp	r1, r28
    177c:	9c f4       	brge	.+38     	; 0x17a4 <prvUnlockQueue+0x7c>
    177e:	80 85       	ldd	r24, Z+8	; 0x08
    1780:	81 11       	cpse	r24, r1
    1782:	06 c0       	rjmp	.+12     	; 0x1790 <prvUnlockQueue+0x68>
    1784:	0f c0       	rjmp	.+30     	; 0x17a4 <prvUnlockQueue+0x7c>
    1786:	f8 01       	movw	r30, r16
    1788:	80 85       	ldd	r24, Z+8	; 0x08
    178a:	81 11       	cpse	r24, r1
    178c:	05 c0       	rjmp	.+10     	; 0x1798 <prvUnlockQueue+0x70>
    178e:	0a c0       	rjmp	.+20     	; 0x17a4 <prvUnlockQueue+0x7c>
    1790:	78 01       	movw	r14, r16
    1792:	f8 e0       	ldi	r31, 0x08	; 8
    1794:	ef 0e       	add	r14, r31
    1796:	f1 1c       	adc	r15, r1
    1798:	c7 01       	movw	r24, r14
    179a:	27 d6       	rcall	.+3150   	; 0x23ea <xTaskRemoveFromEventList>
    179c:	81 11       	cpse	r24, r1
    179e:	a3 d6       	rcall	.+3398   	; 0x24e6 <vTaskMissedYield>
    17a0:	c1 50       	subi	r28, 0x01	; 1
    17a2:	89 f7       	brne	.-30     	; 0x1786 <prvUnlockQueue+0x5e>
    17a4:	8f ef       	ldi	r24, 0xFF	; 255
    17a6:	f8 01       	movw	r30, r16
    17a8:	85 8f       	std	Z+29, r24	; 0x1d
    17aa:	0f 90       	pop	r0
    17ac:	0f be       	out	0x3f, r0	; 63
    17ae:	cf 91       	pop	r28
    17b0:	1f 91       	pop	r17
    17b2:	0f 91       	pop	r16
    17b4:	ff 90       	pop	r15
    17b6:	ef 90       	pop	r14
    17b8:	08 95       	ret

000017ba <xQueueGenericReset>:
    17ba:	cf 93       	push	r28
    17bc:	df 93       	push	r29
    17be:	ec 01       	movw	r28, r24
    17c0:	0f b6       	in	r0, 0x3f	; 63
    17c2:	f8 94       	cli
    17c4:	0f 92       	push	r0
    17c6:	e8 81       	ld	r30, Y
    17c8:	f9 81       	ldd	r31, Y+1	; 0x01
    17ca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    17cc:	2c 8d       	ldd	r18, Y+28	; 0x1c
    17ce:	90 e0       	ldi	r25, 0x00	; 0
    17d0:	30 e0       	ldi	r19, 0x00	; 0
    17d2:	82 9f       	mul	r24, r18
    17d4:	a0 01       	movw	r20, r0
    17d6:	83 9f       	mul	r24, r19
    17d8:	50 0d       	add	r21, r0
    17da:	92 9f       	mul	r25, r18
    17dc:	50 0d       	add	r21, r0
    17de:	11 24       	eor	r1, r1
    17e0:	4e 0f       	add	r20, r30
    17e2:	5f 1f       	adc	r21, r31
    17e4:	5d 83       	std	Y+5, r21	; 0x05
    17e6:	4c 83       	std	Y+4, r20	; 0x04
    17e8:	1a 8e       	std	Y+26, r1	; 0x1a
    17ea:	fb 83       	std	Y+3, r31	; 0x03
    17ec:	ea 83       	std	Y+2, r30	; 0x02
    17ee:	01 97       	sbiw	r24, 0x01	; 1
    17f0:	82 9f       	mul	r24, r18
    17f2:	a0 01       	movw	r20, r0
    17f4:	83 9f       	mul	r24, r19
    17f6:	50 0d       	add	r21, r0
    17f8:	92 9f       	mul	r25, r18
    17fa:	50 0d       	add	r21, r0
    17fc:	11 24       	eor	r1, r1
    17fe:	cf 01       	movw	r24, r30
    1800:	84 0f       	add	r24, r20
    1802:	95 1f       	adc	r25, r21
    1804:	9f 83       	std	Y+7, r25	; 0x07
    1806:	8e 83       	std	Y+6, r24	; 0x06
    1808:	8f ef       	ldi	r24, 0xFF	; 255
    180a:	8d 8f       	std	Y+29, r24	; 0x1d
    180c:	8e 8f       	std	Y+30, r24	; 0x1e
    180e:	61 11       	cpse	r22, r1
    1810:	0a c0       	rjmp	.+20     	; 0x1826 <xQueueGenericReset+0x6c>
    1812:	88 85       	ldd	r24, Y+8	; 0x08
    1814:	88 23       	and	r24, r24
    1816:	69 f0       	breq	.+26     	; 0x1832 <xQueueGenericReset+0x78>
    1818:	ce 01       	movw	r24, r28
    181a:	08 96       	adiw	r24, 0x08	; 8
    181c:	e6 d5       	rcall	.+3020   	; 0x23ea <xTaskRemoveFromEventList>
    181e:	88 23       	and	r24, r24
    1820:	41 f0       	breq	.+16     	; 0x1832 <xQueueGenericReset+0x78>
    1822:	3a de       	rcall	.-908    	; 0x1498 <vPortYield>
    1824:	06 c0       	rjmp	.+12     	; 0x1832 <xQueueGenericReset+0x78>
    1826:	ce 01       	movw	r24, r28
    1828:	08 96       	adiw	r24, 0x08	; 8
    182a:	fd dc       	rcall	.-1542   	; 0x1226 <vListInitialise>
    182c:	ce 01       	movw	r24, r28
    182e:	41 96       	adiw	r24, 0x11	; 17
    1830:	fa dc       	rcall	.-1548   	; 0x1226 <vListInitialise>
    1832:	0f 90       	pop	r0
    1834:	0f be       	out	0x3f, r0	; 63
    1836:	81 e0       	ldi	r24, 0x01	; 1
    1838:	df 91       	pop	r29
    183a:	cf 91       	pop	r28
    183c:	08 95       	ret

0000183e <xQueueGenericCreateStatic>:
    183e:	cf 93       	push	r28
    1840:	df 93       	push	r29
    1842:	e9 01       	movw	r28, r18
    1844:	20 97       	sbiw	r28, 0x00	; 0
    1846:	61 f0       	breq	.+24     	; 0x1860 <xQueueGenericCreateStatic+0x22>
    1848:	61 11       	cpse	r22, r1
    184a:	03 c0       	rjmp	.+6      	; 0x1852 <xQueueGenericCreateStatic+0x14>
    184c:	39 83       	std	Y+1, r19	; 0x01
    184e:	28 83       	st	Y, r18
    1850:	02 c0       	rjmp	.+4      	; 0x1856 <xQueueGenericCreateStatic+0x18>
    1852:	59 83       	std	Y+1, r21	; 0x01
    1854:	48 83       	st	Y, r20
    1856:	8b 8f       	std	Y+27, r24	; 0x1b
    1858:	6c 8f       	std	Y+28, r22	; 0x1c
    185a:	61 e0       	ldi	r22, 0x01	; 1
    185c:	ce 01       	movw	r24, r28
    185e:	ad df       	rcall	.-166    	; 0x17ba <xQueueGenericReset>
    1860:	ce 01       	movw	r24, r28
    1862:	df 91       	pop	r29
    1864:	cf 91       	pop	r28
    1866:	08 95       	ret

00001868 <xQueueGenericSend>:
    1868:	9f 92       	push	r9
    186a:	af 92       	push	r10
    186c:	bf 92       	push	r11
    186e:	cf 92       	push	r12
    1870:	df 92       	push	r13
    1872:	ef 92       	push	r14
    1874:	ff 92       	push	r15
    1876:	0f 93       	push	r16
    1878:	1f 93       	push	r17
    187a:	cf 93       	push	r28
    187c:	df 93       	push	r29
    187e:	00 d0       	rcall	.+0      	; 0x1880 <xQueueGenericSend+0x18>
    1880:	1f 92       	push	r1
    1882:	1f 92       	push	r1
    1884:	cd b7       	in	r28, 0x3d	; 61
    1886:	de b7       	in	r29, 0x3e	; 62
    1888:	8c 01       	movw	r16, r24
    188a:	6b 01       	movw	r12, r22
    188c:	5d 83       	std	Y+5, r21	; 0x05
    188e:	4c 83       	std	Y+4, r20	; 0x04
    1890:	a2 2e       	mov	r10, r18
    1892:	b1 2c       	mov	r11, r1
    1894:	99 24       	eor	r9, r9
    1896:	93 94       	inc	r9
    1898:	7c 01       	movw	r14, r24
    189a:	88 e0       	ldi	r24, 0x08	; 8
    189c:	e8 0e       	add	r14, r24
    189e:	f1 1c       	adc	r15, r1
    18a0:	0f b6       	in	r0, 0x3f	; 63
    18a2:	f8 94       	cli
    18a4:	0f 92       	push	r0
    18a6:	f8 01       	movw	r30, r16
    18a8:	92 8d       	ldd	r25, Z+26	; 0x1a
    18aa:	83 8d       	ldd	r24, Z+27	; 0x1b
    18ac:	98 17       	cp	r25, r24
    18ae:	18 f0       	brcs	.+6      	; 0x18b6 <xQueueGenericSend+0x4e>
    18b0:	f2 e0       	ldi	r31, 0x02	; 2
    18b2:	af 12       	cpse	r10, r31
    18b4:	15 c0       	rjmp	.+42     	; 0x18e0 <xQueueGenericSend+0x78>
    18b6:	4a 2d       	mov	r20, r10
    18b8:	b6 01       	movw	r22, r12
    18ba:	c8 01       	movw	r24, r16
    18bc:	bd de       	rcall	.-646    	; 0x1638 <prvCopyDataToQueue>
    18be:	f8 01       	movw	r30, r16
    18c0:	91 89       	ldd	r25, Z+17	; 0x11
    18c2:	99 23       	and	r25, r25
    18c4:	39 f0       	breq	.+14     	; 0x18d4 <xQueueGenericSend+0x6c>
    18c6:	c8 01       	movw	r24, r16
    18c8:	41 96       	adiw	r24, 0x11	; 17
    18ca:	8f d5       	rcall	.+2846   	; 0x23ea <xTaskRemoveFromEventList>
    18cc:	88 23       	and	r24, r24
    18ce:	21 f0       	breq	.+8      	; 0x18d8 <xQueueGenericSend+0x70>
    18d0:	e3 dd       	rcall	.-1082   	; 0x1498 <vPortYield>
    18d2:	02 c0       	rjmp	.+4      	; 0x18d8 <xQueueGenericSend+0x70>
    18d4:	81 11       	cpse	r24, r1
    18d6:	e0 dd       	rcall	.-1088   	; 0x1498 <vPortYield>
    18d8:	0f 90       	pop	r0
    18da:	0f be       	out	0x3f, r0	; 63
    18dc:	81 e0       	ldi	r24, 0x01	; 1
    18de:	45 c0       	rjmp	.+138    	; 0x196a <xQueueGenericSend+0x102>
    18e0:	8c 81       	ldd	r24, Y+4	; 0x04
    18e2:	9d 81       	ldd	r25, Y+5	; 0x05
    18e4:	89 2b       	or	r24, r25
    18e6:	21 f4       	brne	.+8      	; 0x18f0 <xQueueGenericSend+0x88>
    18e8:	0f 90       	pop	r0
    18ea:	0f be       	out	0x3f, r0	; 63
    18ec:	80 e0       	ldi	r24, 0x00	; 0
    18ee:	3d c0       	rjmp	.+122    	; 0x196a <xQueueGenericSend+0x102>
    18f0:	b1 10       	cpse	r11, r1
    18f2:	04 c0       	rjmp	.+8      	; 0x18fc <xQueueGenericSend+0x94>
    18f4:	ce 01       	movw	r24, r28
    18f6:	01 96       	adiw	r24, 0x01	; 1
    18f8:	c0 d5       	rcall	.+2944   	; 0x247a <vTaskInternalSetTimeOutState>
    18fa:	b9 2c       	mov	r11, r9
    18fc:	0f 90       	pop	r0
    18fe:	0f be       	out	0x3f, r0	; 63
    1900:	7a d3       	rcall	.+1780   	; 0x1ff6 <vTaskSuspendAll>
    1902:	0f b6       	in	r0, 0x3f	; 63
    1904:	f8 94       	cli
    1906:	0f 92       	push	r0
    1908:	f8 01       	movw	r30, r16
    190a:	85 8d       	ldd	r24, Z+29	; 0x1d
    190c:	8f 3f       	cpi	r24, 0xFF	; 255
    190e:	09 f4       	brne	.+2      	; 0x1912 <xQueueGenericSend+0xaa>
    1910:	15 8e       	std	Z+29, r1	; 0x1d
    1912:	f8 01       	movw	r30, r16
    1914:	86 8d       	ldd	r24, Z+30	; 0x1e
    1916:	8f 3f       	cpi	r24, 0xFF	; 255
    1918:	09 f4       	brne	.+2      	; 0x191c <xQueueGenericSend+0xb4>
    191a:	16 8e       	std	Z+30, r1	; 0x1e
    191c:	0f 90       	pop	r0
    191e:	0f be       	out	0x3f, r0	; 63
    1920:	be 01       	movw	r22, r28
    1922:	6c 5f       	subi	r22, 0xFC	; 252
    1924:	7f 4f       	sbci	r23, 0xFF	; 255
    1926:	ce 01       	movw	r24, r28
    1928:	01 96       	adiw	r24, 0x01	; 1
    192a:	b2 d5       	rcall	.+2916   	; 0x2490 <xTaskCheckForTimeOut>
    192c:	81 11       	cpse	r24, r1
    192e:	19 c0       	rjmp	.+50     	; 0x1962 <xQueueGenericSend+0xfa>
    1930:	0f b6       	in	r0, 0x3f	; 63
    1932:	f8 94       	cli
    1934:	0f 92       	push	r0
    1936:	f8 01       	movw	r30, r16
    1938:	92 8d       	ldd	r25, Z+26	; 0x1a
    193a:	83 8d       	ldd	r24, Z+27	; 0x1b
    193c:	0f 90       	pop	r0
    193e:	0f be       	out	0x3f, r0	; 63
    1940:	98 13       	cpse	r25, r24
    1942:	0b c0       	rjmp	.+22     	; 0x195a <xQueueGenericSend+0xf2>
    1944:	6c 81       	ldd	r22, Y+4	; 0x04
    1946:	7d 81       	ldd	r23, Y+5	; 0x05
    1948:	c7 01       	movw	r24, r14
    194a:	26 d5       	rcall	.+2636   	; 0x2398 <vTaskPlaceOnEventList>
    194c:	c8 01       	movw	r24, r16
    194e:	ec de       	rcall	.-552    	; 0x1728 <prvUnlockQueue>
    1950:	19 d4       	rcall	.+2098   	; 0x2184 <xTaskResumeAll>
    1952:	81 11       	cpse	r24, r1
    1954:	a5 cf       	rjmp	.-182    	; 0x18a0 <xQueueGenericSend+0x38>
    1956:	a0 dd       	rcall	.-1216   	; 0x1498 <vPortYield>
    1958:	a3 cf       	rjmp	.-186    	; 0x18a0 <xQueueGenericSend+0x38>
    195a:	c8 01       	movw	r24, r16
    195c:	e5 de       	rcall	.-566    	; 0x1728 <prvUnlockQueue>
    195e:	12 d4       	rcall	.+2084   	; 0x2184 <xTaskResumeAll>
    1960:	9f cf       	rjmp	.-194    	; 0x18a0 <xQueueGenericSend+0x38>
    1962:	c8 01       	movw	r24, r16
    1964:	e1 de       	rcall	.-574    	; 0x1728 <prvUnlockQueue>
    1966:	0e d4       	rcall	.+2076   	; 0x2184 <xTaskResumeAll>
    1968:	80 e0       	ldi	r24, 0x00	; 0
    196a:	0f 90       	pop	r0
    196c:	0f 90       	pop	r0
    196e:	0f 90       	pop	r0
    1970:	0f 90       	pop	r0
    1972:	0f 90       	pop	r0
    1974:	df 91       	pop	r29
    1976:	cf 91       	pop	r28
    1978:	1f 91       	pop	r17
    197a:	0f 91       	pop	r16
    197c:	ff 90       	pop	r15
    197e:	ef 90       	pop	r14
    1980:	df 90       	pop	r13
    1982:	cf 90       	pop	r12
    1984:	bf 90       	pop	r11
    1986:	af 90       	pop	r10
    1988:	9f 90       	pop	r9
    198a:	08 95       	ret

0000198c <xQueueGenericSendFromISR>:
    198c:	ef 92       	push	r14
    198e:	ff 92       	push	r15
    1990:	0f 93       	push	r16
    1992:	1f 93       	push	r17
    1994:	cf 93       	push	r28
    1996:	df 93       	push	r29
    1998:	8a 01       	movw	r16, r20
    199a:	fc 01       	movw	r30, r24
    199c:	52 8d       	ldd	r21, Z+26	; 0x1a
    199e:	33 8d       	ldd	r19, Z+27	; 0x1b
    19a0:	53 17       	cp	r21, r19
    19a2:	10 f0       	brcs	.+4      	; 0x19a8 <xQueueGenericSendFromISR+0x1c>
    19a4:	22 30       	cpi	r18, 0x02	; 2
    19a6:	e1 f4       	brne	.+56     	; 0x19e0 <xQueueGenericSendFromISR+0x54>
    19a8:	42 2f       	mov	r20, r18
    19aa:	78 01       	movw	r14, r16
    19ac:	ec 01       	movw	r28, r24
    19ae:	1e 8d       	ldd	r17, Y+30	; 0x1e
    19b0:	43 de       	rcall	.-890    	; 0x1638 <prvCopyDataToQueue>
    19b2:	1f 3f       	cpi	r17, 0xFF	; 255
    19b4:	79 f4       	brne	.+30     	; 0x19d4 <xQueueGenericSendFromISR+0x48>
    19b6:	89 89       	ldd	r24, Y+17	; 0x11
    19b8:	88 23       	and	r24, r24
    19ba:	a1 f0       	breq	.+40     	; 0x19e4 <xQueueGenericSendFromISR+0x58>
    19bc:	ce 01       	movw	r24, r28
    19be:	41 96       	adiw	r24, 0x11	; 17
    19c0:	14 d5       	rcall	.+2600   	; 0x23ea <xTaskRemoveFromEventList>
    19c2:	88 23       	and	r24, r24
    19c4:	89 f0       	breq	.+34     	; 0x19e8 <xQueueGenericSendFromISR+0x5c>
    19c6:	e1 14       	cp	r14, r1
    19c8:	f1 04       	cpc	r15, r1
    19ca:	81 f0       	breq	.+32     	; 0x19ec <xQueueGenericSendFromISR+0x60>
    19cc:	81 e0       	ldi	r24, 0x01	; 1
    19ce:	f7 01       	movw	r30, r14
    19d0:	80 83       	st	Z, r24
    19d2:	0d c0       	rjmp	.+26     	; 0x19ee <xQueueGenericSendFromISR+0x62>
    19d4:	ff 24       	eor	r15, r15
    19d6:	f3 94       	inc	r15
    19d8:	f1 0e       	add	r15, r17
    19da:	fe 8e       	std	Y+30, r15	; 0x1e
    19dc:	81 e0       	ldi	r24, 0x01	; 1
    19de:	07 c0       	rjmp	.+14     	; 0x19ee <xQueueGenericSendFromISR+0x62>
    19e0:	80 e0       	ldi	r24, 0x00	; 0
    19e2:	05 c0       	rjmp	.+10     	; 0x19ee <xQueueGenericSendFromISR+0x62>
    19e4:	81 e0       	ldi	r24, 0x01	; 1
    19e6:	03 c0       	rjmp	.+6      	; 0x19ee <xQueueGenericSendFromISR+0x62>
    19e8:	81 e0       	ldi	r24, 0x01	; 1
    19ea:	01 c0       	rjmp	.+2      	; 0x19ee <xQueueGenericSendFromISR+0x62>
    19ec:	81 e0       	ldi	r24, 0x01	; 1
    19ee:	df 91       	pop	r29
    19f0:	cf 91       	pop	r28
    19f2:	1f 91       	pop	r17
    19f4:	0f 91       	pop	r16
    19f6:	ff 90       	pop	r15
    19f8:	ef 90       	pop	r14
    19fa:	08 95       	ret

000019fc <xQueueReceive>:
    19fc:	9f 92       	push	r9
    19fe:	af 92       	push	r10
    1a00:	bf 92       	push	r11
    1a02:	cf 92       	push	r12
    1a04:	df 92       	push	r13
    1a06:	ef 92       	push	r14
    1a08:	ff 92       	push	r15
    1a0a:	0f 93       	push	r16
    1a0c:	1f 93       	push	r17
    1a0e:	cf 93       	push	r28
    1a10:	df 93       	push	r29
    1a12:	00 d0       	rcall	.+0      	; 0x1a14 <xQueueReceive+0x18>
    1a14:	1f 92       	push	r1
    1a16:	1f 92       	push	r1
    1a18:	cd b7       	in	r28, 0x3d	; 61
    1a1a:	de b7       	in	r29, 0x3e	; 62
    1a1c:	8c 01       	movw	r16, r24
    1a1e:	5b 01       	movw	r10, r22
    1a20:	5d 83       	std	Y+5, r21	; 0x05
    1a22:	4c 83       	std	Y+4, r20	; 0x04
    1a24:	e1 2c       	mov	r14, r1
    1a26:	99 24       	eor	r9, r9
    1a28:	93 94       	inc	r9
    1a2a:	6c 01       	movw	r12, r24
    1a2c:	81 e1       	ldi	r24, 0x11	; 17
    1a2e:	c8 0e       	add	r12, r24
    1a30:	d1 1c       	adc	r13, r1
    1a32:	0f b6       	in	r0, 0x3f	; 63
    1a34:	f8 94       	cli
    1a36:	0f 92       	push	r0
    1a38:	f8 01       	movw	r30, r16
    1a3a:	f2 8c       	ldd	r15, Z+26	; 0x1a
    1a3c:	ff 20       	and	r15, r15
    1a3e:	91 f0       	breq	.+36     	; 0x1a64 <xQueueReceive+0x68>
    1a40:	b5 01       	movw	r22, r10
    1a42:	c8 01       	movw	r24, r16
    1a44:	57 de       	rcall	.-850    	; 0x16f4 <prvCopyDataFromQueue>
    1a46:	fa 94       	dec	r15
    1a48:	f8 01       	movw	r30, r16
    1a4a:	f2 8e       	std	Z+26, r15	; 0x1a
    1a4c:	80 85       	ldd	r24, Z+8	; 0x08
    1a4e:	88 23       	and	r24, r24
    1a50:	29 f0       	breq	.+10     	; 0x1a5c <xQueueReceive+0x60>
    1a52:	c8 01       	movw	r24, r16
    1a54:	08 96       	adiw	r24, 0x08	; 8
    1a56:	c9 d4       	rcall	.+2450   	; 0x23ea <xTaskRemoveFromEventList>
    1a58:	81 11       	cpse	r24, r1
    1a5a:	1e dd       	rcall	.-1476   	; 0x1498 <vPortYield>
    1a5c:	0f 90       	pop	r0
    1a5e:	0f be       	out	0x3f, r0	; 63
    1a60:	81 e0       	ldi	r24, 0x01	; 1
    1a62:	44 c0       	rjmp	.+136    	; 0x1aec <xQueueReceive+0xf0>
    1a64:	8c 81       	ldd	r24, Y+4	; 0x04
    1a66:	9d 81       	ldd	r25, Y+5	; 0x05
    1a68:	89 2b       	or	r24, r25
    1a6a:	21 f4       	brne	.+8      	; 0x1a74 <xQueueReceive+0x78>
    1a6c:	0f 90       	pop	r0
    1a6e:	0f be       	out	0x3f, r0	; 63
    1a70:	80 e0       	ldi	r24, 0x00	; 0
    1a72:	3c c0       	rjmp	.+120    	; 0x1aec <xQueueReceive+0xf0>
    1a74:	e1 10       	cpse	r14, r1
    1a76:	04 c0       	rjmp	.+8      	; 0x1a80 <xQueueReceive+0x84>
    1a78:	ce 01       	movw	r24, r28
    1a7a:	01 96       	adiw	r24, 0x01	; 1
    1a7c:	fe d4       	rcall	.+2556   	; 0x247a <vTaskInternalSetTimeOutState>
    1a7e:	e9 2c       	mov	r14, r9
    1a80:	0f 90       	pop	r0
    1a82:	0f be       	out	0x3f, r0	; 63
    1a84:	b8 d2       	rcall	.+1392   	; 0x1ff6 <vTaskSuspendAll>
    1a86:	0f b6       	in	r0, 0x3f	; 63
    1a88:	f8 94       	cli
    1a8a:	0f 92       	push	r0
    1a8c:	f8 01       	movw	r30, r16
    1a8e:	85 8d       	ldd	r24, Z+29	; 0x1d
    1a90:	8f 3f       	cpi	r24, 0xFF	; 255
    1a92:	09 f4       	brne	.+2      	; 0x1a96 <xQueueReceive+0x9a>
    1a94:	15 8e       	std	Z+29, r1	; 0x1d
    1a96:	f8 01       	movw	r30, r16
    1a98:	86 8d       	ldd	r24, Z+30	; 0x1e
    1a9a:	8f 3f       	cpi	r24, 0xFF	; 255
    1a9c:	09 f4       	brne	.+2      	; 0x1aa0 <xQueueReceive+0xa4>
    1a9e:	16 8e       	std	Z+30, r1	; 0x1e
    1aa0:	0f 90       	pop	r0
    1aa2:	0f be       	out	0x3f, r0	; 63
    1aa4:	be 01       	movw	r22, r28
    1aa6:	6c 5f       	subi	r22, 0xFC	; 252
    1aa8:	7f 4f       	sbci	r23, 0xFF	; 255
    1aaa:	ce 01       	movw	r24, r28
    1aac:	01 96       	adiw	r24, 0x01	; 1
    1aae:	f0 d4       	rcall	.+2528   	; 0x2490 <xTaskCheckForTimeOut>
    1ab0:	81 11       	cpse	r24, r1
    1ab2:	13 c0       	rjmp	.+38     	; 0x1ada <xQueueReceive+0xde>
    1ab4:	c8 01       	movw	r24, r16
    1ab6:	b5 dd       	rcall	.-1174   	; 0x1622 <prvIsQueueEmpty>
    1ab8:	88 23       	and	r24, r24
    1aba:	59 f0       	breq	.+22     	; 0x1ad2 <xQueueReceive+0xd6>
    1abc:	6c 81       	ldd	r22, Y+4	; 0x04
    1abe:	7d 81       	ldd	r23, Y+5	; 0x05
    1ac0:	c6 01       	movw	r24, r12
    1ac2:	6a d4       	rcall	.+2260   	; 0x2398 <vTaskPlaceOnEventList>
    1ac4:	c8 01       	movw	r24, r16
    1ac6:	30 de       	rcall	.-928    	; 0x1728 <prvUnlockQueue>
    1ac8:	5d d3       	rcall	.+1722   	; 0x2184 <xTaskResumeAll>
    1aca:	81 11       	cpse	r24, r1
    1acc:	b2 cf       	rjmp	.-156    	; 0x1a32 <xQueueReceive+0x36>
    1ace:	e4 dc       	rcall	.-1592   	; 0x1498 <vPortYield>
    1ad0:	b0 cf       	rjmp	.-160    	; 0x1a32 <xQueueReceive+0x36>
    1ad2:	c8 01       	movw	r24, r16
    1ad4:	29 de       	rcall	.-942    	; 0x1728 <prvUnlockQueue>
    1ad6:	56 d3       	rcall	.+1708   	; 0x2184 <xTaskResumeAll>
    1ad8:	ac cf       	rjmp	.-168    	; 0x1a32 <xQueueReceive+0x36>
    1ada:	c8 01       	movw	r24, r16
    1adc:	25 de       	rcall	.-950    	; 0x1728 <prvUnlockQueue>
    1ade:	52 d3       	rcall	.+1700   	; 0x2184 <xTaskResumeAll>
    1ae0:	c8 01       	movw	r24, r16
    1ae2:	9f dd       	rcall	.-1218   	; 0x1622 <prvIsQueueEmpty>
    1ae4:	88 23       	and	r24, r24
    1ae6:	09 f4       	brne	.+2      	; 0x1aea <xQueueReceive+0xee>
    1ae8:	a4 cf       	rjmp	.-184    	; 0x1a32 <xQueueReceive+0x36>
    1aea:	80 e0       	ldi	r24, 0x00	; 0
    1aec:	0f 90       	pop	r0
    1aee:	0f 90       	pop	r0
    1af0:	0f 90       	pop	r0
    1af2:	0f 90       	pop	r0
    1af4:	0f 90       	pop	r0
    1af6:	df 91       	pop	r29
    1af8:	cf 91       	pop	r28
    1afa:	1f 91       	pop	r17
    1afc:	0f 91       	pop	r16
    1afe:	ff 90       	pop	r15
    1b00:	ef 90       	pop	r14
    1b02:	df 90       	pop	r13
    1b04:	cf 90       	pop	r12
    1b06:	bf 90       	pop	r11
    1b08:	af 90       	pop	r10
    1b0a:	9f 90       	pop	r9
    1b0c:	08 95       	ret

00001b0e <xQueueSemaphoreTake>:
    1b0e:	bf 92       	push	r11
    1b10:	cf 92       	push	r12
    1b12:	df 92       	push	r13
    1b14:	ef 92       	push	r14
    1b16:	ff 92       	push	r15
    1b18:	0f 93       	push	r16
    1b1a:	1f 93       	push	r17
    1b1c:	cf 93       	push	r28
    1b1e:	df 93       	push	r29
    1b20:	00 d0       	rcall	.+0      	; 0x1b22 <xQueueSemaphoreTake+0x14>
    1b22:	1f 92       	push	r1
    1b24:	1f 92       	push	r1
    1b26:	cd b7       	in	r28, 0x3d	; 61
    1b28:	de b7       	in	r29, 0x3e	; 62
    1b2a:	8c 01       	movw	r16, r24
    1b2c:	7d 83       	std	Y+5, r23	; 0x05
    1b2e:	6c 83       	std	Y+4, r22	; 0x04
    1b30:	b1 2c       	mov	r11, r1
    1b32:	d1 2c       	mov	r13, r1
    1b34:	cc 24       	eor	r12, r12
    1b36:	c3 94       	inc	r12
    1b38:	7c 01       	movw	r14, r24
    1b3a:	81 e1       	ldi	r24, 0x11	; 17
    1b3c:	e8 0e       	add	r14, r24
    1b3e:	f1 1c       	adc	r15, r1
    1b40:	0f b6       	in	r0, 0x3f	; 63
    1b42:	f8 94       	cli
    1b44:	0f 92       	push	r0
    1b46:	d8 01       	movw	r26, r16
    1b48:	5a 96       	adiw	r26, 0x1a	; 26
    1b4a:	8c 91       	ld	r24, X
    1b4c:	5a 97       	sbiw	r26, 0x1a	; 26
    1b4e:	88 23       	and	r24, r24
    1b50:	d1 f0       	breq	.+52     	; 0x1b86 <xQueueSemaphoreTake+0x78>
    1b52:	81 50       	subi	r24, 0x01	; 1
    1b54:	5a 96       	adiw	r26, 0x1a	; 26
    1b56:	8c 93       	st	X, r24
    1b58:	5a 97       	sbiw	r26, 0x1a	; 26
    1b5a:	8d 91       	ld	r24, X+
    1b5c:	9c 91       	ld	r25, X
    1b5e:	89 2b       	or	r24, r25
    1b60:	21 f4       	brne	.+8      	; 0x1b6a <xQueueSemaphoreTake+0x5c>
    1b62:	d5 d5       	rcall	.+2986   	; 0x270e <pvTaskIncrementMutexHeldCount>
    1b64:	f8 01       	movw	r30, r16
    1b66:	95 83       	std	Z+5, r25	; 0x05
    1b68:	84 83       	std	Z+4, r24	; 0x04
    1b6a:	d8 01       	movw	r26, r16
    1b6c:	18 96       	adiw	r26, 0x08	; 8
    1b6e:	8c 91       	ld	r24, X
    1b70:	88 23       	and	r24, r24
    1b72:	29 f0       	breq	.+10     	; 0x1b7e <xQueueSemaphoreTake+0x70>
    1b74:	c8 01       	movw	r24, r16
    1b76:	08 96       	adiw	r24, 0x08	; 8
    1b78:	38 d4       	rcall	.+2160   	; 0x23ea <xTaskRemoveFromEventList>
    1b7a:	81 11       	cpse	r24, r1
    1b7c:	8d dc       	rcall	.-1766   	; 0x1498 <vPortYield>
    1b7e:	0f 90       	pop	r0
    1b80:	0f be       	out	0x3f, r0	; 63
    1b82:	81 e0       	ldi	r24, 0x01	; 1
    1b84:	70 c0       	rjmp	.+224    	; 0x1c66 <xQueueSemaphoreTake+0x158>
    1b86:	8c 81       	ldd	r24, Y+4	; 0x04
    1b88:	9d 81       	ldd	r25, Y+5	; 0x05
    1b8a:	89 2b       	or	r24, r25
    1b8c:	21 f4       	brne	.+8      	; 0x1b96 <xQueueSemaphoreTake+0x88>
    1b8e:	0f 90       	pop	r0
    1b90:	0f be       	out	0x3f, r0	; 63
    1b92:	80 e0       	ldi	r24, 0x00	; 0
    1b94:	68 c0       	rjmp	.+208    	; 0x1c66 <xQueueSemaphoreTake+0x158>
    1b96:	d1 10       	cpse	r13, r1
    1b98:	04 c0       	rjmp	.+8      	; 0x1ba2 <xQueueSemaphoreTake+0x94>
    1b9a:	ce 01       	movw	r24, r28
    1b9c:	01 96       	adiw	r24, 0x01	; 1
    1b9e:	6d d4       	rcall	.+2266   	; 0x247a <vTaskInternalSetTimeOutState>
    1ba0:	dc 2c       	mov	r13, r12
    1ba2:	0f 90       	pop	r0
    1ba4:	0f be       	out	0x3f, r0	; 63
    1ba6:	27 d2       	rcall	.+1102   	; 0x1ff6 <vTaskSuspendAll>
    1ba8:	0f b6       	in	r0, 0x3f	; 63
    1baa:	f8 94       	cli
    1bac:	0f 92       	push	r0
    1bae:	f8 01       	movw	r30, r16
    1bb0:	85 8d       	ldd	r24, Z+29	; 0x1d
    1bb2:	8f 3f       	cpi	r24, 0xFF	; 255
    1bb4:	09 f4       	brne	.+2      	; 0x1bb8 <xQueueSemaphoreTake+0xaa>
    1bb6:	15 8e       	std	Z+29, r1	; 0x1d
    1bb8:	d8 01       	movw	r26, r16
    1bba:	5e 96       	adiw	r26, 0x1e	; 30
    1bbc:	8c 91       	ld	r24, X
    1bbe:	5e 97       	sbiw	r26, 0x1e	; 30
    1bc0:	8f 3f       	cpi	r24, 0xFF	; 255
    1bc2:	11 f4       	brne	.+4      	; 0x1bc8 <xQueueSemaphoreTake+0xba>
    1bc4:	5e 96       	adiw	r26, 0x1e	; 30
    1bc6:	1c 92       	st	X, r1
    1bc8:	0f 90       	pop	r0
    1bca:	0f be       	out	0x3f, r0	; 63
    1bcc:	be 01       	movw	r22, r28
    1bce:	6c 5f       	subi	r22, 0xFC	; 252
    1bd0:	7f 4f       	sbci	r23, 0xFF	; 255
    1bd2:	ce 01       	movw	r24, r28
    1bd4:	01 96       	adiw	r24, 0x01	; 1
    1bd6:	5c d4       	rcall	.+2232   	; 0x2490 <xTaskCheckForTimeOut>
    1bd8:	81 11       	cpse	r24, r1
    1bda:	21 c0       	rjmp	.+66     	; 0x1c1e <xQueueSemaphoreTake+0x110>
    1bdc:	c8 01       	movw	r24, r16
    1bde:	21 dd       	rcall	.-1470   	; 0x1622 <prvIsQueueEmpty>
    1be0:	88 23       	and	r24, r24
    1be2:	c9 f0       	breq	.+50     	; 0x1c16 <xQueueSemaphoreTake+0x108>
    1be4:	f8 01       	movw	r30, r16
    1be6:	80 81       	ld	r24, Z
    1be8:	91 81       	ldd	r25, Z+1	; 0x01
    1bea:	89 2b       	or	r24, r25
    1bec:	49 f4       	brne	.+18     	; 0x1c00 <xQueueSemaphoreTake+0xf2>
    1bee:	0f b6       	in	r0, 0x3f	; 63
    1bf0:	f8 94       	cli
    1bf2:	0f 92       	push	r0
    1bf4:	84 81       	ldd	r24, Z+4	; 0x04
    1bf6:	95 81       	ldd	r25, Z+5	; 0x05
    1bf8:	88 d4       	rcall	.+2320   	; 0x250a <xTaskPriorityInherit>
    1bfa:	b8 2e       	mov	r11, r24
    1bfc:	0f 90       	pop	r0
    1bfe:	0f be       	out	0x3f, r0	; 63
    1c00:	6c 81       	ldd	r22, Y+4	; 0x04
    1c02:	7d 81       	ldd	r23, Y+5	; 0x05
    1c04:	c7 01       	movw	r24, r14
    1c06:	c8 d3       	rcall	.+1936   	; 0x2398 <vTaskPlaceOnEventList>
    1c08:	c8 01       	movw	r24, r16
    1c0a:	8e dd       	rcall	.-1252   	; 0x1728 <prvUnlockQueue>
    1c0c:	bb d2       	rcall	.+1398   	; 0x2184 <xTaskResumeAll>
    1c0e:	81 11       	cpse	r24, r1
    1c10:	97 cf       	rjmp	.-210    	; 0x1b40 <xQueueSemaphoreTake+0x32>
    1c12:	42 dc       	rcall	.-1916   	; 0x1498 <vPortYield>
    1c14:	95 cf       	rjmp	.-214    	; 0x1b40 <xQueueSemaphoreTake+0x32>
    1c16:	c8 01       	movw	r24, r16
    1c18:	87 dd       	rcall	.-1266   	; 0x1728 <prvUnlockQueue>
    1c1a:	b4 d2       	rcall	.+1384   	; 0x2184 <xTaskResumeAll>
    1c1c:	91 cf       	rjmp	.-222    	; 0x1b40 <xQueueSemaphoreTake+0x32>
    1c1e:	c8 01       	movw	r24, r16
    1c20:	83 dd       	rcall	.-1274   	; 0x1728 <prvUnlockQueue>
    1c22:	b0 d2       	rcall	.+1376   	; 0x2184 <xTaskResumeAll>
    1c24:	c8 01       	movw	r24, r16
    1c26:	fd dc       	rcall	.-1542   	; 0x1622 <prvIsQueueEmpty>
    1c28:	88 23       	and	r24, r24
    1c2a:	09 f4       	brne	.+2      	; 0x1c2e <xQueueSemaphoreTake+0x120>
    1c2c:	89 cf       	rjmp	.-238    	; 0x1b40 <xQueueSemaphoreTake+0x32>
    1c2e:	bb 20       	and	r11, r11
    1c30:	c9 f0       	breq	.+50     	; 0x1c64 <xQueueSemaphoreTake+0x156>
    1c32:	0f b6       	in	r0, 0x3f	; 63
    1c34:	f8 94       	cli
    1c36:	0f 92       	push	r0
    1c38:	f8 01       	movw	r30, r16
    1c3a:	81 89       	ldd	r24, Z+17	; 0x11
    1c3c:	88 23       	and	r24, r24
    1c3e:	39 f0       	breq	.+14     	; 0x1c4e <xQueueSemaphoreTake+0x140>
    1c40:	06 88       	ldd	r0, Z+22	; 0x16
    1c42:	f7 89       	ldd	r31, Z+23	; 0x17
    1c44:	e0 2d       	mov	r30, r0
    1c46:	80 81       	ld	r24, Z
    1c48:	64 e0       	ldi	r22, 0x04	; 4
    1c4a:	68 1b       	sub	r22, r24
    1c4c:	01 c0       	rjmp	.+2      	; 0x1c50 <xQueueSemaphoreTake+0x142>
    1c4e:	60 e0       	ldi	r22, 0x00	; 0
    1c50:	d8 01       	movw	r26, r16
    1c52:	14 96       	adiw	r26, 0x04	; 4
    1c54:	8d 91       	ld	r24, X+
    1c56:	9c 91       	ld	r25, X
    1c58:	15 97       	sbiw	r26, 0x05	; 5
    1c5a:	09 d5       	rcall	.+2578   	; 0x266e <vTaskPriorityDisinheritAfterTimeout>
    1c5c:	0f 90       	pop	r0
    1c5e:	0f be       	out	0x3f, r0	; 63
    1c60:	80 e0       	ldi	r24, 0x00	; 0
    1c62:	01 c0       	rjmp	.+2      	; 0x1c66 <xQueueSemaphoreTake+0x158>
    1c64:	80 e0       	ldi	r24, 0x00	; 0
    1c66:	0f 90       	pop	r0
    1c68:	0f 90       	pop	r0
    1c6a:	0f 90       	pop	r0
    1c6c:	0f 90       	pop	r0
    1c6e:	0f 90       	pop	r0
    1c70:	df 91       	pop	r29
    1c72:	cf 91       	pop	r28
    1c74:	1f 91       	pop	r17
    1c76:	0f 91       	pop	r16
    1c78:	ff 90       	pop	r15
    1c7a:	ef 90       	pop	r14
    1c7c:	df 90       	pop	r13
    1c7e:	cf 90       	pop	r12
    1c80:	bf 90       	pop	r11
    1c82:	08 95       	ret

00001c84 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
    {
    1c84:	cf 93       	push	r28
    1c86:	df 93       	push	r29
    1c88:	ec 01       	movw	r28, r24
        will not actually cause the task to block, just place it on a blocked
        list.  It will not block until the scheduler is unlocked - at which
        time a yield will be performed.  If an item is added to the queue while
        the queue is locked, and the calling task blocks on the queue, then the
        calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    1c8a:	0f b6       	in	r0, 0x3f	; 63
    1c8c:	f8 94       	cli
    1c8e:	0f 92       	push	r0
    1c90:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c92:	8f 3f       	cpi	r24, 0xFF	; 255
    1c94:	09 f4       	brne	.+2      	; 0x1c98 <vQueueWaitForMessageRestricted+0x14>
    1c96:	1d 8e       	std	Y+29, r1	; 0x1d
    1c98:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1c9a:	8f 3f       	cpi	r24, 0xFF	; 255
    1c9c:	09 f4       	brne	.+2      	; 0x1ca0 <vQueueWaitForMessageRestricted+0x1c>
    1c9e:	1e 8e       	std	Y+30, r1	; 0x1e
    1ca0:	0f 90       	pop	r0
    1ca2:	0f be       	out	0x3f, r0	; 63
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    1ca4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1ca6:	81 11       	cpse	r24, r1
    1ca8:	03 c0       	rjmp	.+6      	; 0x1cb0 <vQueueWaitForMessageRestricted+0x2c>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    1caa:	ce 01       	movw	r24, r28
    1cac:	41 96       	adiw	r24, 0x11	; 17
    1cae:	85 d3       	rcall	.+1802   	; 0x23ba <vTaskPlaceOnEventListRestricted>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
        prvUnlockQueue( pxQueue );
    1cb0:	ce 01       	movw	r24, r28
    1cb2:	3a dd       	rcall	.-1420   	; 0x1728 <prvUnlockQueue>
    }
    1cb4:	df 91       	pop	r29
    1cb6:	cf 91       	pop	r28
    1cb8:	08 95       	ret

00001cba <prvResetNextTaskUnblockTime>:
    1cba:	e0 91 44 0a 	lds	r30, 0x0A44	; 0x800a44 <pxDelayedTaskList>
    1cbe:	f0 91 45 0a 	lds	r31, 0x0A45	; 0x800a45 <pxDelayedTaskList+0x1>
    1cc2:	80 81       	ld	r24, Z
    1cc4:	81 11       	cpse	r24, r1
    1cc6:	07 c0       	rjmp	.+14     	; 0x1cd6 <prvResetNextTaskUnblockTime+0x1c>
    1cc8:	8f ef       	ldi	r24, 0xFF	; 255
    1cca:	9f ef       	ldi	r25, 0xFF	; 255
    1ccc:	90 93 25 0a 	sts	0x0A25, r25	; 0x800a25 <xNextTaskUnblockTime+0x1>
    1cd0:	80 93 24 0a 	sts	0x0A24, r24	; 0x800a24 <xNextTaskUnblockTime>
    1cd4:	08 95       	ret
    1cd6:	e0 91 44 0a 	lds	r30, 0x0A44	; 0x800a44 <pxDelayedTaskList>
    1cda:	f0 91 45 0a 	lds	r31, 0x0A45	; 0x800a45 <pxDelayedTaskList+0x1>
    1cde:	05 80       	ldd	r0, Z+5	; 0x05
    1ce0:	f6 81       	ldd	r31, Z+6	; 0x06
    1ce2:	e0 2d       	mov	r30, r0
    1ce4:	06 80       	ldd	r0, Z+6	; 0x06
    1ce6:	f7 81       	ldd	r31, Z+7	; 0x07
    1ce8:	e0 2d       	mov	r30, r0
    1cea:	82 81       	ldd	r24, Z+2	; 0x02
    1cec:	93 81       	ldd	r25, Z+3	; 0x03
    1cee:	90 93 25 0a 	sts	0x0A25, r25	; 0x800a25 <xNextTaskUnblockTime+0x1>
    1cf2:	80 93 24 0a 	sts	0x0A24, r24	; 0x800a24 <xNextTaskUnblockTime>
    1cf6:	08 95       	ret

00001cf8 <prvAddCurrentTaskToDelayedList>:
    1cf8:	0f 93       	push	r16
    1cfa:	1f 93       	push	r17
    1cfc:	cf 93       	push	r28
    1cfe:	df 93       	push	r29
    1d00:	ec 01       	movw	r28, r24
    1d02:	00 91 2c 0a 	lds	r16, 0x0A2C	; 0x800a2c <xTickCount>
    1d06:	10 91 2d 0a 	lds	r17, 0x0A2D	; 0x800a2d <xTickCount+0x1>
    1d0a:	80 91 6a 0a 	lds	r24, 0x0A6A	; 0x800a6a <pxCurrentTCB>
    1d0e:	90 91 6b 0a 	lds	r25, 0x0A6B	; 0x800a6b <pxCurrentTCB+0x1>
    1d12:	02 96       	adiw	r24, 0x02	; 2
    1d14:	ec da       	rcall	.-2600   	; 0x12ee <uxListRemove>
    1d16:	c0 0f       	add	r28, r16
    1d18:	d1 1f       	adc	r29, r17
    1d1a:	e0 91 6a 0a 	lds	r30, 0x0A6A	; 0x800a6a <pxCurrentTCB>
    1d1e:	f0 91 6b 0a 	lds	r31, 0x0A6B	; 0x800a6b <pxCurrentTCB+0x1>
    1d22:	d3 83       	std	Z+3, r29	; 0x03
    1d24:	c2 83       	std	Z+2, r28	; 0x02
    1d26:	c0 17       	cp	r28, r16
    1d28:	d1 07       	cpc	r29, r17
    1d2a:	60 f4       	brcc	.+24     	; 0x1d44 <prvAddCurrentTaskToDelayedList+0x4c>
    1d2c:	60 91 6a 0a 	lds	r22, 0x0A6A	; 0x800a6a <pxCurrentTCB>
    1d30:	70 91 6b 0a 	lds	r23, 0x0A6B	; 0x800a6b <pxCurrentTCB+0x1>
    1d34:	80 91 42 0a 	lds	r24, 0x0A42	; 0x800a42 <pxOverflowDelayedTaskList>
    1d38:	90 91 43 0a 	lds	r25, 0x0A43	; 0x800a43 <pxOverflowDelayedTaskList+0x1>
    1d3c:	6e 5f       	subi	r22, 0xFE	; 254
    1d3e:	7f 4f       	sbci	r23, 0xFF	; 255
    1d40:	a5 da       	rcall	.-2742   	; 0x128c <vListInsert>
    1d42:	16 c0       	rjmp	.+44     	; 0x1d70 <prvAddCurrentTaskToDelayedList+0x78>
    1d44:	60 91 6a 0a 	lds	r22, 0x0A6A	; 0x800a6a <pxCurrentTCB>
    1d48:	70 91 6b 0a 	lds	r23, 0x0A6B	; 0x800a6b <pxCurrentTCB+0x1>
    1d4c:	80 91 44 0a 	lds	r24, 0x0A44	; 0x800a44 <pxDelayedTaskList>
    1d50:	90 91 45 0a 	lds	r25, 0x0A45	; 0x800a45 <pxDelayedTaskList+0x1>
    1d54:	6e 5f       	subi	r22, 0xFE	; 254
    1d56:	7f 4f       	sbci	r23, 0xFF	; 255
    1d58:	99 da       	rcall	.-2766   	; 0x128c <vListInsert>
    1d5a:	80 91 24 0a 	lds	r24, 0x0A24	; 0x800a24 <xNextTaskUnblockTime>
    1d5e:	90 91 25 0a 	lds	r25, 0x0A25	; 0x800a25 <xNextTaskUnblockTime+0x1>
    1d62:	c8 17       	cp	r28, r24
    1d64:	d9 07       	cpc	r29, r25
    1d66:	20 f4       	brcc	.+8      	; 0x1d70 <prvAddCurrentTaskToDelayedList+0x78>
    1d68:	d0 93 25 0a 	sts	0x0A25, r29	; 0x800a25 <xNextTaskUnblockTime+0x1>
    1d6c:	c0 93 24 0a 	sts	0x0A24, r28	; 0x800a24 <xNextTaskUnblockTime>
    1d70:	df 91       	pop	r29
    1d72:	cf 91       	pop	r28
    1d74:	1f 91       	pop	r17
    1d76:	0f 91       	pop	r16
    1d78:	08 95       	ret

00001d7a <xTaskCreateStatic>:
    1d7a:	6f 92       	push	r6
    1d7c:	7f 92       	push	r7
    1d7e:	8f 92       	push	r8
    1d80:	9f 92       	push	r9
    1d82:	af 92       	push	r10
    1d84:	bf 92       	push	r11
    1d86:	cf 92       	push	r12
    1d88:	df 92       	push	r13
    1d8a:	ef 92       	push	r14
    1d8c:	ff 92       	push	r15
    1d8e:	0f 93       	push	r16
    1d90:	cf 93       	push	r28
    1d92:	df 93       	push	r29
    1d94:	c1 14       	cp	r12, r1
    1d96:	d1 04       	cpc	r13, r1
    1d98:	09 f4       	brne	.+2      	; 0x1d9c <xTaskCreateStatic+0x22>
    1d9a:	cc c0       	rjmp	.+408    	; 0x1f34 <xTaskCreateStatic+0x1ba>
    1d9c:	e1 14       	cp	r14, r1
    1d9e:	f1 04       	cpc	r15, r1
    1da0:	09 f4       	brne	.+2      	; 0x1da4 <xTaskCreateStatic+0x2a>
    1da2:	cb c0       	rjmp	.+406    	; 0x1f3a <xTaskCreateStatic+0x1c0>
    1da4:	e6 01       	movw	r28, r12
    1da6:	59 01       	movw	r10, r18
    1da8:	3a 01       	movw	r6, r20
    1daa:	4b 01       	movw	r8, r22
    1dac:	6c 01       	movw	r12, r24
    1dae:	f8 8e       	std	Y+24, r15	; 0x18
    1db0:	ef 8a       	std	Y+23, r14	; 0x17
    1db2:	65 ea       	ldi	r22, 0xA5	; 165
    1db4:	70 e0       	ldi	r23, 0x00	; 0
    1db6:	c7 01       	movw	r24, r14
    1db8:	67 d7       	rcall	.+3790   	; 0x2c88 <memset>
    1dba:	81 e0       	ldi	r24, 0x01	; 1
    1dbc:	68 1a       	sub	r6, r24
    1dbe:	71 08       	sbc	r7, r1
    1dc0:	ef 88       	ldd	r14, Y+23	; 0x17
    1dc2:	f8 8c       	ldd	r15, Y+24	; 0x18
    1dc4:	e6 0c       	add	r14, r6
    1dc6:	f7 1c       	adc	r15, r7
    1dc8:	d4 01       	movw	r26, r8
    1dca:	8c 91       	ld	r24, X
    1dcc:	89 8f       	std	Y+25, r24	; 0x19
    1dce:	8c 91       	ld	r24, X
    1dd0:	88 23       	and	r24, r24
    1dd2:	a1 f0       	breq	.+40     	; 0x1dfc <xTaskCreateStatic+0x82>
    1dd4:	ae 01       	movw	r20, r28
    1dd6:	46 5e       	subi	r20, 0xE6	; 230
    1dd8:	5f 4f       	sbci	r21, 0xFF	; 255
    1dda:	f4 01       	movw	r30, r8
    1ddc:	31 96       	adiw	r30, 0x01	; 1
    1dde:	b8 e0       	ldi	r27, 0x08	; 8
    1de0:	8b 0e       	add	r8, r27
    1de2:	91 1c       	adc	r9, r1
    1de4:	cf 01       	movw	r24, r30
    1de6:	21 91       	ld	r18, Z+
    1de8:	da 01       	movw	r26, r20
    1dea:	2d 93       	st	X+, r18
    1dec:	ad 01       	movw	r20, r26
    1dee:	dc 01       	movw	r26, r24
    1df0:	8c 91       	ld	r24, X
    1df2:	88 23       	and	r24, r24
    1df4:	19 f0       	breq	.+6      	; 0x1dfc <xTaskCreateStatic+0x82>
    1df6:	e8 15       	cp	r30, r8
    1df8:	f9 05       	cpc	r31, r9
    1dfa:	a1 f7       	brne	.-24     	; 0x1de4 <xTaskCreateStatic+0x6a>
    1dfc:	18 a2       	std	Y+32, r1	; 0x20
    1dfe:	04 30       	cpi	r16, 0x04	; 4
    1e00:	08 f0       	brcs	.+2      	; 0x1e04 <xTaskCreateStatic+0x8a>
    1e02:	03 e0       	ldi	r16, 0x03	; 3
    1e04:	0e 8b       	std	Y+22, r16	; 0x16
    1e06:	09 a3       	std	Y+33, r16	; 0x21
    1e08:	1a a2       	std	Y+34, r1	; 0x22
    1e0a:	4e 01       	movw	r8, r28
    1e0c:	b2 e0       	ldi	r27, 0x02	; 2
    1e0e:	8b 0e       	add	r8, r27
    1e10:	91 1c       	adc	r9, r1
    1e12:	c4 01       	movw	r24, r8
    1e14:	16 da       	rcall	.-3028   	; 0x1242 <vListInitialiseItem>
    1e16:	ce 01       	movw	r24, r28
    1e18:	0c 96       	adiw	r24, 0x0c	; 12
    1e1a:	13 da       	rcall	.-3034   	; 0x1242 <vListInitialiseItem>
    1e1c:	d9 87       	std	Y+9, r29	; 0x09
    1e1e:	c8 87       	std	Y+8, r28	; 0x08
    1e20:	84 e0       	ldi	r24, 0x04	; 4
    1e22:	90 e0       	ldi	r25, 0x00	; 0
    1e24:	80 1b       	sub	r24, r16
    1e26:	91 09       	sbc	r25, r1
    1e28:	9d 87       	std	Y+13, r25	; 0x0d
    1e2a:	8c 87       	std	Y+12, r24	; 0x0c
    1e2c:	db 8b       	std	Y+19, r29	; 0x13
    1e2e:	ca 8b       	std	Y+18, r28	; 0x12
    1e30:	1b a2       	std	Y+35, r1	; 0x23
    1e32:	1c a2       	std	Y+36, r1	; 0x24
    1e34:	1d a2       	std	Y+37, r1	; 0x25
    1e36:	1e a2       	std	Y+38, r1	; 0x26
    1e38:	1f a2       	std	Y+39, r1	; 0x27
    1e3a:	a5 01       	movw	r20, r10
    1e3c:	b6 01       	movw	r22, r12
    1e3e:	c7 01       	movw	r24, r14
    1e40:	7d da       	rcall	.-2822   	; 0x133c <pxPortInitialiseStack>
    1e42:	99 83       	std	Y+1, r25	; 0x01
    1e44:	88 83       	st	Y, r24
    1e46:	0f b6       	in	r0, 0x3f	; 63
    1e48:	f8 94       	cli
    1e4a:	0f 92       	push	r0
    1e4c:	80 91 2e 0a 	lds	r24, 0x0A2E	; 0x800a2e <uxCurrentNumberOfTasks>
    1e50:	8f 5f       	subi	r24, 0xFF	; 255
    1e52:	80 93 2e 0a 	sts	0x0A2E, r24	; 0x800a2e <uxCurrentNumberOfTasks>
    1e56:	80 91 6a 0a 	lds	r24, 0x0A6A	; 0x800a6a <pxCurrentTCB>
    1e5a:	90 91 6b 0a 	lds	r25, 0x0A6B	; 0x800a6b <pxCurrentTCB+0x1>
    1e5e:	89 2b       	or	r24, r25
    1e60:	69 f5       	brne	.+90     	; 0x1ebc <xTaskCreateStatic+0x142>
    1e62:	d0 93 6b 0a 	sts	0x0A6B, r29	; 0x800a6b <pxCurrentTCB+0x1>
    1e66:	c0 93 6a 0a 	sts	0x0A6A, r28	; 0x800a6a <pxCurrentTCB>
    1e6a:	80 91 2e 0a 	lds	r24, 0x0A2E	; 0x800a2e <uxCurrentNumberOfTasks>
    1e6e:	81 30       	cpi	r24, 0x01	; 1
    1e70:	a9 f5       	brne	.+106    	; 0x1edc <xTaskCreateStatic+0x162>
    1e72:	86 e4       	ldi	r24, 0x46	; 70
    1e74:	9a e0       	ldi	r25, 0x0A	; 10
    1e76:	d7 d9       	rcall	.-3154   	; 0x1226 <vListInitialise>
    1e78:	8f e4       	ldi	r24, 0x4F	; 79
    1e7a:	9a e0       	ldi	r25, 0x0A	; 10
    1e7c:	d4 d9       	rcall	.-3160   	; 0x1226 <vListInitialise>
    1e7e:	88 e5       	ldi	r24, 0x58	; 88
    1e80:	9a e0       	ldi	r25, 0x0A	; 10
    1e82:	d1 d9       	rcall	.-3166   	; 0x1226 <vListInitialise>
    1e84:	81 e6       	ldi	r24, 0x61	; 97
    1e86:	9a e0       	ldi	r25, 0x0A	; 10
    1e88:	ce d9       	rcall	.-3172   	; 0x1226 <vListInitialise>
    1e8a:	8a e1       	ldi	r24, 0x1A	; 26
    1e8c:	9a e0       	ldi	r25, 0x0A	; 10
    1e8e:	cb d9       	rcall	.-3178   	; 0x1226 <vListInitialise>
    1e90:	81 e1       	ldi	r24, 0x11	; 17
    1e92:	9a e0       	ldi	r25, 0x0A	; 10
    1e94:	c8 d9       	rcall	.-3184   	; 0x1226 <vListInitialise>
    1e96:	89 e3       	ldi	r24, 0x39	; 57
    1e98:	9a e0       	ldi	r25, 0x0A	; 10
    1e9a:	c5 d9       	rcall	.-3190   	; 0x1226 <vListInitialise>
    1e9c:	80 e3       	ldi	r24, 0x30	; 48
    1e9e:	9a e0       	ldi	r25, 0x0A	; 10
    1ea0:	c2 d9       	rcall	.-3196   	; 0x1226 <vListInitialise>
    1ea2:	8a e1       	ldi	r24, 0x1A	; 26
    1ea4:	9a e0       	ldi	r25, 0x0A	; 10
    1ea6:	90 93 45 0a 	sts	0x0A45, r25	; 0x800a45 <pxDelayedTaskList+0x1>
    1eaa:	80 93 44 0a 	sts	0x0A44, r24	; 0x800a44 <pxDelayedTaskList>
    1eae:	81 e1       	ldi	r24, 0x11	; 17
    1eb0:	9a e0       	ldi	r25, 0x0A	; 10
    1eb2:	90 93 43 0a 	sts	0x0A43, r25	; 0x800a43 <pxOverflowDelayedTaskList+0x1>
    1eb6:	80 93 42 0a 	sts	0x0A42, r24	; 0x800a42 <pxOverflowDelayedTaskList>
    1eba:	10 c0       	rjmp	.+32     	; 0x1edc <xTaskCreateStatic+0x162>
    1ebc:	80 91 2a 0a 	lds	r24, 0x0A2A	; 0x800a2a <xSchedulerRunning>
    1ec0:	81 11       	cpse	r24, r1
    1ec2:	0c c0       	rjmp	.+24     	; 0x1edc <xTaskCreateStatic+0x162>
    1ec4:	e0 91 6a 0a 	lds	r30, 0x0A6A	; 0x800a6a <pxCurrentTCB>
    1ec8:	f0 91 6b 0a 	lds	r31, 0x0A6B	; 0x800a6b <pxCurrentTCB+0x1>
    1ecc:	96 89       	ldd	r25, Z+22	; 0x16
    1ece:	8e 89       	ldd	r24, Y+22	; 0x16
    1ed0:	89 17       	cp	r24, r25
    1ed2:	20 f0       	brcs	.+8      	; 0x1edc <xTaskCreateStatic+0x162>
    1ed4:	d0 93 6b 0a 	sts	0x0A6B, r29	; 0x800a6b <pxCurrentTCB+0x1>
    1ed8:	c0 93 6a 0a 	sts	0x0A6A, r28	; 0x800a6a <pxCurrentTCB>
    1edc:	80 91 26 0a 	lds	r24, 0x0A26	; 0x800a26 <uxTaskNumber>
    1ee0:	8f 5f       	subi	r24, 0xFF	; 255
    1ee2:	80 93 26 0a 	sts	0x0A26, r24	; 0x800a26 <uxTaskNumber>
    1ee6:	8e 89       	ldd	r24, Y+22	; 0x16
    1ee8:	90 91 2b 0a 	lds	r25, 0x0A2B	; 0x800a2b <uxTopReadyPriority>
    1eec:	98 17       	cp	r25, r24
    1eee:	10 f4       	brcc	.+4      	; 0x1ef4 <xTaskCreateStatic+0x17a>
    1ef0:	80 93 2b 0a 	sts	0x0A2B, r24	; 0x800a2b <uxTopReadyPriority>
    1ef4:	90 e0       	ldi	r25, 0x00	; 0
    1ef6:	9c 01       	movw	r18, r24
    1ef8:	22 0f       	add	r18, r18
    1efa:	33 1f       	adc	r19, r19
    1efc:	22 0f       	add	r18, r18
    1efe:	33 1f       	adc	r19, r19
    1f00:	22 0f       	add	r18, r18
    1f02:	33 1f       	adc	r19, r19
    1f04:	82 0f       	add	r24, r18
    1f06:	93 1f       	adc	r25, r19
    1f08:	b4 01       	movw	r22, r8
    1f0a:	8a 5b       	subi	r24, 0xBA	; 186
    1f0c:	95 4f       	sbci	r25, 0xF5	; 245
    1f0e:	9d d9       	rcall	.-3270   	; 0x124a <vListInsertEnd>
    1f10:	0f 90       	pop	r0
    1f12:	0f be       	out	0x3f, r0	; 63
    1f14:	80 91 2a 0a 	lds	r24, 0x0A2A	; 0x800a2a <xSchedulerRunning>
    1f18:	88 23       	and	r24, r24
    1f1a:	91 f0       	breq	.+36     	; 0x1f40 <xTaskCreateStatic+0x1c6>
    1f1c:	e0 91 6a 0a 	lds	r30, 0x0A6A	; 0x800a6a <pxCurrentTCB>
    1f20:	f0 91 6b 0a 	lds	r31, 0x0A6B	; 0x800a6b <pxCurrentTCB+0x1>
    1f24:	96 89       	ldd	r25, Z+22	; 0x16
    1f26:	8e 89       	ldd	r24, Y+22	; 0x16
    1f28:	98 17       	cp	r25, r24
    1f2a:	68 f4       	brcc	.+26     	; 0x1f46 <xTaskCreateStatic+0x1cc>
    1f2c:	b5 da       	rcall	.-2710   	; 0x1498 <vPortYield>
    1f2e:	8c 2f       	mov	r24, r28
    1f30:	9d 2f       	mov	r25, r29
    1f32:	0b c0       	rjmp	.+22     	; 0x1f4a <xTaskCreateStatic+0x1d0>
    1f34:	80 e0       	ldi	r24, 0x00	; 0
    1f36:	90 e0       	ldi	r25, 0x00	; 0
    1f38:	08 c0       	rjmp	.+16     	; 0x1f4a <xTaskCreateStatic+0x1d0>
    1f3a:	80 e0       	ldi	r24, 0x00	; 0
    1f3c:	90 e0       	ldi	r25, 0x00	; 0
    1f3e:	05 c0       	rjmp	.+10     	; 0x1f4a <xTaskCreateStatic+0x1d0>
    1f40:	8c 2f       	mov	r24, r28
    1f42:	9d 2f       	mov	r25, r29
    1f44:	02 c0       	rjmp	.+4      	; 0x1f4a <xTaskCreateStatic+0x1d0>
    1f46:	8c 2f       	mov	r24, r28
    1f48:	9d 2f       	mov	r25, r29
    1f4a:	df 91       	pop	r29
    1f4c:	cf 91       	pop	r28
    1f4e:	0f 91       	pop	r16
    1f50:	ff 90       	pop	r15
    1f52:	ef 90       	pop	r14
    1f54:	df 90       	pop	r13
    1f56:	cf 90       	pop	r12
    1f58:	bf 90       	pop	r11
    1f5a:	af 90       	pop	r10
    1f5c:	9f 90       	pop	r9
    1f5e:	8f 90       	pop	r8
    1f60:	7f 90       	pop	r7
    1f62:	6f 90       	pop	r6
    1f64:	08 95       	ret

00001f66 <vTaskStartScheduler>:
    1f66:	cf 92       	push	r12
    1f68:	df 92       	push	r13
    1f6a:	ef 92       	push	r14
    1f6c:	ff 92       	push	r15
    1f6e:	0f 93       	push	r16
    1f70:	cf 93       	push	r28
    1f72:	df 93       	push	r29
    1f74:	00 d0       	rcall	.+0      	; 0x1f76 <vTaskStartScheduler+0x10>
    1f76:	00 d0       	rcall	.+0      	; 0x1f78 <vTaskStartScheduler+0x12>
    1f78:	cd b7       	in	r28, 0x3d	; 61
    1f7a:	de b7       	in	r29, 0x3e	; 62
    1f7c:	1e 82       	std	Y+6, r1	; 0x06
    1f7e:	1d 82       	std	Y+5, r1	; 0x05
    1f80:	1c 82       	std	Y+4, r1	; 0x04
    1f82:	1b 82       	std	Y+3, r1	; 0x03
    1f84:	ae 01       	movw	r20, r28
    1f86:	4f 5f       	subi	r20, 0xFF	; 255
    1f88:	5f 4f       	sbci	r21, 0xFF	; 255
    1f8a:	be 01       	movw	r22, r28
    1f8c:	6d 5f       	subi	r22, 0xFD	; 253
    1f8e:	7f 4f       	sbci	r23, 0xFF	; 255
    1f90:	ce 01       	movw	r24, r28
    1f92:	05 96       	adiw	r24, 0x05	; 5
    1f94:	28 d9       	rcall	.-3504   	; 0x11e6 <vApplicationGetIdleTaskMemory>
    1f96:	cd 80       	ldd	r12, Y+5	; 0x05
    1f98:	de 80       	ldd	r13, Y+6	; 0x06
    1f9a:	eb 80       	ldd	r14, Y+3	; 0x03
    1f9c:	fc 80       	ldd	r15, Y+4	; 0x04
    1f9e:	49 81       	ldd	r20, Y+1	; 0x01
    1fa0:	5a 81       	ldd	r21, Y+2	; 0x02
    1fa2:	00 e0       	ldi	r16, 0x00	; 0
    1fa4:	20 e0       	ldi	r18, 0x00	; 0
    1fa6:	30 e0       	ldi	r19, 0x00	; 0
    1fa8:	6b e6       	ldi	r22, 0x6B	; 107
    1faa:	72 e0       	ldi	r23, 0x02	; 2
    1fac:	82 e7       	ldi	r24, 0x72	; 114
    1fae:	90 e0       	ldi	r25, 0x00	; 0
    1fb0:	e4 de       	rcall	.-568    	; 0x1d7a <xTaskCreateStatic>
    1fb2:	89 2b       	or	r24, r25
    1fb4:	91 f0       	breq	.+36     	; 0x1fda <vTaskStartScheduler+0x74>
    1fb6:	1a d4       	rcall	.+2100   	; 0x27ec <xTimerCreateTimerTask>
    1fb8:	81 30       	cpi	r24, 0x01	; 1
    1fba:	79 f4       	brne	.+30     	; 0x1fda <vTaskStartScheduler+0x74>
    1fbc:	f8 94       	cli
    1fbe:	8f ef       	ldi	r24, 0xFF	; 255
    1fc0:	9f ef       	ldi	r25, 0xFF	; 255
    1fc2:	90 93 25 0a 	sts	0x0A25, r25	; 0x800a25 <xNextTaskUnblockTime+0x1>
    1fc6:	80 93 24 0a 	sts	0x0A24, r24	; 0x800a24 <xNextTaskUnblockTime>
    1fca:	81 e0       	ldi	r24, 0x01	; 1
    1fcc:	80 93 2a 0a 	sts	0x0A2A, r24	; 0x800a2a <xSchedulerRunning>
    1fd0:	10 92 2d 0a 	sts	0x0A2D, r1	; 0x800a2d <xTickCount+0x1>
    1fd4:	10 92 2c 0a 	sts	0x0A2C, r1	; 0x800a2c <xTickCount>
    1fd8:	23 da       	rcall	.-3002   	; 0x1420 <xPortStartScheduler>
    1fda:	26 96       	adiw	r28, 0x06	; 6
    1fdc:	0f b6       	in	r0, 0x3f	; 63
    1fde:	f8 94       	cli
    1fe0:	de bf       	out	0x3e, r29	; 62
    1fe2:	0f be       	out	0x3f, r0	; 63
    1fe4:	cd bf       	out	0x3d, r28	; 61
    1fe6:	df 91       	pop	r29
    1fe8:	cf 91       	pop	r28
    1fea:	0f 91       	pop	r16
    1fec:	ff 90       	pop	r15
    1fee:	ef 90       	pop	r14
    1ff0:	df 90       	pop	r13
    1ff2:	cf 90       	pop	r12
    1ff4:	08 95       	ret

00001ff6 <vTaskSuspendAll>:
    1ff6:	80 91 23 0a 	lds	r24, 0x0A23	; 0x800a23 <uxSchedulerSuspended>
    1ffa:	8f 5f       	subi	r24, 0xFF	; 255
    1ffc:	80 93 23 0a 	sts	0x0A23, r24	; 0x800a23 <uxSchedulerSuspended>
    2000:	08 95       	ret

00002002 <xTaskGetTickCount>:
    2002:	0f b6       	in	r0, 0x3f	; 63
    2004:	f8 94       	cli
    2006:	0f 92       	push	r0
    2008:	80 91 2c 0a 	lds	r24, 0x0A2C	; 0x800a2c <xTickCount>
    200c:	90 91 2d 0a 	lds	r25, 0x0A2D	; 0x800a2d <xTickCount+0x1>
    2010:	0f 90       	pop	r0
    2012:	0f be       	out	0x3f, r0	; 63
    2014:	08 95       	ret

00002016 <xTaskIncrementTick>:
    2016:	cf 92       	push	r12
    2018:	df 92       	push	r13
    201a:	ef 92       	push	r14
    201c:	ff 92       	push	r15
    201e:	0f 93       	push	r16
    2020:	1f 93       	push	r17
    2022:	cf 93       	push	r28
    2024:	df 93       	push	r29
    2026:	80 91 23 0a 	lds	r24, 0x0A23	; 0x800a23 <uxSchedulerSuspended>
    202a:	81 11       	cpse	r24, r1
    202c:	95 c0       	rjmp	.+298    	; 0x2158 <xTaskIncrementTick+0x142>
    202e:	e0 90 2c 0a 	lds	r14, 0x0A2C	; 0x800a2c <xTickCount>
    2032:	f0 90 2d 0a 	lds	r15, 0x0A2D	; 0x800a2d <xTickCount+0x1>
    2036:	8f ef       	ldi	r24, 0xFF	; 255
    2038:	e8 1a       	sub	r14, r24
    203a:	f8 0a       	sbc	r15, r24
    203c:	f0 92 2d 0a 	sts	0x0A2D, r15	; 0x800a2d <xTickCount+0x1>
    2040:	e0 92 2c 0a 	sts	0x0A2C, r14	; 0x800a2c <xTickCount>
    2044:	e1 14       	cp	r14, r1
    2046:	f1 04       	cpc	r15, r1
    2048:	b1 f4       	brne	.+44     	; 0x2076 <xTaskIncrementTick+0x60>
    204a:	80 91 44 0a 	lds	r24, 0x0A44	; 0x800a44 <pxDelayedTaskList>
    204e:	90 91 45 0a 	lds	r25, 0x0A45	; 0x800a45 <pxDelayedTaskList+0x1>
    2052:	20 91 42 0a 	lds	r18, 0x0A42	; 0x800a42 <pxOverflowDelayedTaskList>
    2056:	30 91 43 0a 	lds	r19, 0x0A43	; 0x800a43 <pxOverflowDelayedTaskList+0x1>
    205a:	30 93 45 0a 	sts	0x0A45, r19	; 0x800a45 <pxDelayedTaskList+0x1>
    205e:	20 93 44 0a 	sts	0x0A44, r18	; 0x800a44 <pxDelayedTaskList>
    2062:	90 93 43 0a 	sts	0x0A43, r25	; 0x800a43 <pxOverflowDelayedTaskList+0x1>
    2066:	80 93 42 0a 	sts	0x0A42, r24	; 0x800a42 <pxOverflowDelayedTaskList>
    206a:	80 91 27 0a 	lds	r24, 0x0A27	; 0x800a27 <xNumOfOverflows>
    206e:	8f 5f       	subi	r24, 0xFF	; 255
    2070:	80 93 27 0a 	sts	0x0A27, r24	; 0x800a27 <xNumOfOverflows>
    2074:	22 de       	rcall	.-956    	; 0x1cba <prvResetNextTaskUnblockTime>
    2076:	80 91 24 0a 	lds	r24, 0x0A24	; 0x800a24 <xNextTaskUnblockTime>
    207a:	90 91 25 0a 	lds	r25, 0x0A25	; 0x800a25 <xNextTaskUnblockTime+0x1>
    207e:	e8 16       	cp	r14, r24
    2080:	f9 06       	cpc	r15, r25
    2082:	10 f4       	brcc	.+4      	; 0x2088 <xTaskIncrementTick+0x72>
    2084:	d1 2c       	mov	r13, r1
    2086:	50 c0       	rjmp	.+160    	; 0x2128 <xTaskIncrementTick+0x112>
    2088:	d1 2c       	mov	r13, r1
    208a:	cc 24       	eor	r12, r12
    208c:	c3 94       	inc	r12
    208e:	e0 91 44 0a 	lds	r30, 0x0A44	; 0x800a44 <pxDelayedTaskList>
    2092:	f0 91 45 0a 	lds	r31, 0x0A45	; 0x800a45 <pxDelayedTaskList+0x1>
    2096:	80 81       	ld	r24, Z
    2098:	81 11       	cpse	r24, r1
    209a:	07 c0       	rjmp	.+14     	; 0x20aa <xTaskIncrementTick+0x94>
    209c:	8f ef       	ldi	r24, 0xFF	; 255
    209e:	9f ef       	ldi	r25, 0xFF	; 255
    20a0:	90 93 25 0a 	sts	0x0A25, r25	; 0x800a25 <xNextTaskUnblockTime+0x1>
    20a4:	80 93 24 0a 	sts	0x0A24, r24	; 0x800a24 <xNextTaskUnblockTime>
    20a8:	3f c0       	rjmp	.+126    	; 0x2128 <xTaskIncrementTick+0x112>
    20aa:	e0 91 44 0a 	lds	r30, 0x0A44	; 0x800a44 <pxDelayedTaskList>
    20ae:	f0 91 45 0a 	lds	r31, 0x0A45	; 0x800a45 <pxDelayedTaskList+0x1>
    20b2:	05 80       	ldd	r0, Z+5	; 0x05
    20b4:	f6 81       	ldd	r31, Z+6	; 0x06
    20b6:	e0 2d       	mov	r30, r0
    20b8:	c6 81       	ldd	r28, Z+6	; 0x06
    20ba:	d7 81       	ldd	r29, Z+7	; 0x07
    20bc:	8a 81       	ldd	r24, Y+2	; 0x02
    20be:	9b 81       	ldd	r25, Y+3	; 0x03
    20c0:	e8 16       	cp	r14, r24
    20c2:	f9 06       	cpc	r15, r25
    20c4:	28 f4       	brcc	.+10     	; 0x20d0 <xTaskIncrementTick+0xba>
    20c6:	90 93 25 0a 	sts	0x0A25, r25	; 0x800a25 <xNextTaskUnblockTime+0x1>
    20ca:	80 93 24 0a 	sts	0x0A24, r24	; 0x800a24 <xNextTaskUnblockTime>
    20ce:	2c c0       	rjmp	.+88     	; 0x2128 <xTaskIncrementTick+0x112>
    20d0:	8e 01       	movw	r16, r28
    20d2:	0e 5f       	subi	r16, 0xFE	; 254
    20d4:	1f 4f       	sbci	r17, 0xFF	; 255
    20d6:	c8 01       	movw	r24, r16
    20d8:	0a d9       	rcall	.-3564   	; 0x12ee <uxListRemove>
    20da:	8c 89       	ldd	r24, Y+20	; 0x14
    20dc:	9d 89       	ldd	r25, Y+21	; 0x15
    20de:	89 2b       	or	r24, r25
    20e0:	19 f0       	breq	.+6      	; 0x20e8 <xTaskIncrementTick+0xd2>
    20e2:	ce 01       	movw	r24, r28
    20e4:	0c 96       	adiw	r24, 0x0c	; 12
    20e6:	03 d9       	rcall	.-3578   	; 0x12ee <uxListRemove>
    20e8:	8e 89       	ldd	r24, Y+22	; 0x16
    20ea:	90 91 2b 0a 	lds	r25, 0x0A2B	; 0x800a2b <uxTopReadyPriority>
    20ee:	98 17       	cp	r25, r24
    20f0:	10 f4       	brcc	.+4      	; 0x20f6 <xTaskIncrementTick+0xe0>
    20f2:	80 93 2b 0a 	sts	0x0A2B, r24	; 0x800a2b <uxTopReadyPriority>
    20f6:	90 e0       	ldi	r25, 0x00	; 0
    20f8:	9c 01       	movw	r18, r24
    20fa:	22 0f       	add	r18, r18
    20fc:	33 1f       	adc	r19, r19
    20fe:	22 0f       	add	r18, r18
    2100:	33 1f       	adc	r19, r19
    2102:	22 0f       	add	r18, r18
    2104:	33 1f       	adc	r19, r19
    2106:	82 0f       	add	r24, r18
    2108:	93 1f       	adc	r25, r19
    210a:	b8 01       	movw	r22, r16
    210c:	8a 5b       	subi	r24, 0xBA	; 186
    210e:	95 4f       	sbci	r25, 0xF5	; 245
    2110:	9c d8       	rcall	.-3784   	; 0x124a <vListInsertEnd>
    2112:	e0 91 6a 0a 	lds	r30, 0x0A6A	; 0x800a6a <pxCurrentTCB>
    2116:	f0 91 6b 0a 	lds	r31, 0x0A6B	; 0x800a6b <pxCurrentTCB+0x1>
    211a:	9e 89       	ldd	r25, Y+22	; 0x16
    211c:	86 89       	ldd	r24, Z+22	; 0x16
    211e:	98 17       	cp	r25, r24
    2120:	08 f4       	brcc	.+2      	; 0x2124 <xTaskIncrementTick+0x10e>
    2122:	b5 cf       	rjmp	.-150    	; 0x208e <xTaskIncrementTick+0x78>
    2124:	dc 2c       	mov	r13, r12
    2126:	b3 cf       	rjmp	.-154    	; 0x208e <xTaskIncrementTick+0x78>
    2128:	e0 91 6a 0a 	lds	r30, 0x0A6A	; 0x800a6a <pxCurrentTCB>
    212c:	f0 91 6b 0a 	lds	r31, 0x0A6B	; 0x800a6b <pxCurrentTCB+0x1>
    2130:	86 89       	ldd	r24, Z+22	; 0x16
    2132:	90 e0       	ldi	r25, 0x00	; 0
    2134:	fc 01       	movw	r30, r24
    2136:	ee 0f       	add	r30, r30
    2138:	ff 1f       	adc	r31, r31
    213a:	ee 0f       	add	r30, r30
    213c:	ff 1f       	adc	r31, r31
    213e:	ee 0f       	add	r30, r30
    2140:	ff 1f       	adc	r31, r31
    2142:	8e 0f       	add	r24, r30
    2144:	9f 1f       	adc	r25, r31
    2146:	fc 01       	movw	r30, r24
    2148:	ea 5b       	subi	r30, 0xBA	; 186
    214a:	f5 4f       	sbci	r31, 0xF5	; 245
    214c:	80 81       	ld	r24, Z
    214e:	82 30       	cpi	r24, 0x02	; 2
    2150:	48 f0       	brcs	.+18     	; 0x2164 <xTaskIncrementTick+0x14e>
    2152:	dd 24       	eor	r13, r13
    2154:	d3 94       	inc	r13
    2156:	06 c0       	rjmp	.+12     	; 0x2164 <xTaskIncrementTick+0x14e>
    2158:	80 91 29 0a 	lds	r24, 0x0A29	; 0x800a29 <uxPendedTicks>
    215c:	8f 5f       	subi	r24, 0xFF	; 255
    215e:	80 93 29 0a 	sts	0x0A29, r24	; 0x800a29 <uxPendedTicks>
    2162:	d1 2c       	mov	r13, r1
    2164:	80 91 28 0a 	lds	r24, 0x0A28	; 0x800a28 <xYieldPending>
    2168:	88 23       	and	r24, r24
    216a:	11 f0       	breq	.+4      	; 0x2170 <xTaskIncrementTick+0x15a>
    216c:	dd 24       	eor	r13, r13
    216e:	d3 94       	inc	r13
    2170:	8d 2d       	mov	r24, r13
    2172:	df 91       	pop	r29
    2174:	cf 91       	pop	r28
    2176:	1f 91       	pop	r17
    2178:	0f 91       	pop	r16
    217a:	ff 90       	pop	r15
    217c:	ef 90       	pop	r14
    217e:	df 90       	pop	r13
    2180:	cf 90       	pop	r12
    2182:	08 95       	ret

00002184 <xTaskResumeAll>:
    2184:	df 92       	push	r13
    2186:	ef 92       	push	r14
    2188:	ff 92       	push	r15
    218a:	0f 93       	push	r16
    218c:	1f 93       	push	r17
    218e:	cf 93       	push	r28
    2190:	df 93       	push	r29
    2192:	0f b6       	in	r0, 0x3f	; 63
    2194:	f8 94       	cli
    2196:	0f 92       	push	r0
    2198:	80 91 23 0a 	lds	r24, 0x0A23	; 0x800a23 <uxSchedulerSuspended>
    219c:	81 50       	subi	r24, 0x01	; 1
    219e:	80 93 23 0a 	sts	0x0A23, r24	; 0x800a23 <uxSchedulerSuspended>
    21a2:	80 91 23 0a 	lds	r24, 0x0A23	; 0x800a23 <uxSchedulerSuspended>
    21a6:	81 11       	cpse	r24, r1
    21a8:	59 c0       	rjmp	.+178    	; 0x225c <__stack+0x5d>
    21aa:	80 91 2e 0a 	lds	r24, 0x0A2E	; 0x800a2e <uxCurrentNumberOfTasks>
    21ae:	81 11       	cpse	r24, r1
    21b0:	30 c0       	rjmp	.+96     	; 0x2212 <__stack+0x13>
    21b2:	57 c0       	rjmp	.+174    	; 0x2262 <__stack+0x63>
    21b4:	d7 01       	movw	r26, r14
    21b6:	15 96       	adiw	r26, 0x05	; 5
    21b8:	ed 91       	ld	r30, X+
    21ba:	fc 91       	ld	r31, X
    21bc:	16 97       	sbiw	r26, 0x06	; 6
    21be:	c6 81       	ldd	r28, Z+6	; 0x06
    21c0:	d7 81       	ldd	r29, Z+7	; 0x07
    21c2:	ce 01       	movw	r24, r28
    21c4:	0c 96       	adiw	r24, 0x0c	; 12
    21c6:	93 d8       	rcall	.-3802   	; 0x12ee <uxListRemove>
    21c8:	8e 01       	movw	r16, r28
    21ca:	0e 5f       	subi	r16, 0xFE	; 254
    21cc:	1f 4f       	sbci	r17, 0xFF	; 255
    21ce:	c8 01       	movw	r24, r16
    21d0:	8e d8       	rcall	.-3812   	; 0x12ee <uxListRemove>
    21d2:	8e 89       	ldd	r24, Y+22	; 0x16
    21d4:	90 91 2b 0a 	lds	r25, 0x0A2B	; 0x800a2b <uxTopReadyPriority>
    21d8:	98 17       	cp	r25, r24
    21da:	10 f4       	brcc	.+4      	; 0x21e0 <xTaskResumeAll+0x5c>
    21dc:	80 93 2b 0a 	sts	0x0A2B, r24	; 0x800a2b <uxTopReadyPriority>
    21e0:	90 e0       	ldi	r25, 0x00	; 0
    21e2:	9c 01       	movw	r18, r24
    21e4:	22 0f       	add	r18, r18
    21e6:	33 1f       	adc	r19, r19
    21e8:	22 0f       	add	r18, r18
    21ea:	33 1f       	adc	r19, r19
    21ec:	22 0f       	add	r18, r18
    21ee:	33 1f       	adc	r19, r19
    21f0:	82 0f       	add	r24, r18
    21f2:	93 1f       	adc	r25, r19
    21f4:	b8 01       	movw	r22, r16
    21f6:	8a 5b       	subi	r24, 0xBA	; 186
    21f8:	95 4f       	sbci	r25, 0xF5	; 245
    21fa:	27 d8       	rcall	.-4018   	; 0x124a <vListInsertEnd>
    21fc:	e0 91 6a 0a 	lds	r30, 0x0A6A	; 0x800a6a <pxCurrentTCB>
    2200:	f0 91 6b 0a 	lds	r31, 0x0A6B	; 0x800a6b <pxCurrentTCB+0x1>
    2204:	9e 89       	ldd	r25, Y+22	; 0x16
    2206:	86 89       	ldd	r24, Z+22	; 0x16
    2208:	98 17       	cp	r25, r24
    220a:	68 f0       	brcs	.+26     	; 0x2226 <__stack+0x27>
    220c:	d0 92 28 0a 	sts	0x0A28, r13	; 0x800a28 <xYieldPending>
    2210:	0a c0       	rjmp	.+20     	; 0x2226 <__stack+0x27>
    2212:	c0 e0       	ldi	r28, 0x00	; 0
    2214:	d0 e0       	ldi	r29, 0x00	; 0
    2216:	0f 2e       	mov	r0, r31
    2218:	f9 e3       	ldi	r31, 0x39	; 57
    221a:	ef 2e       	mov	r14, r31
    221c:	fa e0       	ldi	r31, 0x0A	; 10
    221e:	ff 2e       	mov	r15, r31
    2220:	f0 2d       	mov	r31, r0
    2222:	dd 24       	eor	r13, r13
    2224:	d3 94       	inc	r13
    2226:	f7 01       	movw	r30, r14
    2228:	80 81       	ld	r24, Z
    222a:	81 11       	cpse	r24, r1
    222c:	c3 cf       	rjmp	.-122    	; 0x21b4 <xTaskResumeAll+0x30>
    222e:	cd 2b       	or	r28, r29
    2230:	09 f0       	breq	.+2      	; 0x2234 <__stack+0x35>
    2232:	43 dd       	rcall	.-1402   	; 0x1cba <prvResetNextTaskUnblockTime>
    2234:	c0 91 29 0a 	lds	r28, 0x0A29	; 0x800a29 <uxPendedTicks>
    2238:	cc 23       	and	r28, r28
    223a:	49 f0       	breq	.+18     	; 0x224e <__stack+0x4f>
    223c:	d1 e0       	ldi	r29, 0x01	; 1
    223e:	eb de       	rcall	.-554    	; 0x2016 <xTaskIncrementTick>
    2240:	81 11       	cpse	r24, r1
    2242:	d0 93 28 0a 	sts	0x0A28, r29	; 0x800a28 <xYieldPending>
    2246:	c1 50       	subi	r28, 0x01	; 1
    2248:	d1 f7       	brne	.-12     	; 0x223e <__stack+0x3f>
    224a:	10 92 29 0a 	sts	0x0A29, r1	; 0x800a29 <uxPendedTicks>
    224e:	80 91 28 0a 	lds	r24, 0x0A28	; 0x800a28 <xYieldPending>
    2252:	88 23       	and	r24, r24
    2254:	29 f0       	breq	.+10     	; 0x2260 <__stack+0x61>
    2256:	20 d9       	rcall	.-3520   	; 0x1498 <vPortYield>
    2258:	81 e0       	ldi	r24, 0x01	; 1
    225a:	03 c0       	rjmp	.+6      	; 0x2262 <__stack+0x63>
    225c:	80 e0       	ldi	r24, 0x00	; 0
    225e:	01 c0       	rjmp	.+2      	; 0x2262 <__stack+0x63>
    2260:	80 e0       	ldi	r24, 0x00	; 0
    2262:	0f 90       	pop	r0
    2264:	0f be       	out	0x3f, r0	; 63
    2266:	df 91       	pop	r29
    2268:	cf 91       	pop	r28
    226a:	1f 91       	pop	r17
    226c:	0f 91       	pop	r16
    226e:	ff 90       	pop	r15
    2270:	ef 90       	pop	r14
    2272:	df 90       	pop	r13
    2274:	08 95       	ret

00002276 <vTaskDelay>:
    2276:	cf 93       	push	r28
    2278:	df 93       	push	r29
    227a:	ec 01       	movw	r28, r24
    227c:	89 2b       	or	r24, r25
    227e:	39 f0       	breq	.+14     	; 0x228e <vTaskDelay+0x18>
    2280:	ba de       	rcall	.-652    	; 0x1ff6 <vTaskSuspendAll>
    2282:	60 e0       	ldi	r22, 0x00	; 0
    2284:	ce 01       	movw	r24, r28
    2286:	38 dd       	rcall	.-1424   	; 0x1cf8 <prvAddCurrentTaskToDelayedList>
    2288:	7d df       	rcall	.-262    	; 0x2184 <xTaskResumeAll>
    228a:	81 11       	cpse	r24, r1
    228c:	01 c0       	rjmp	.+2      	; 0x2290 <vTaskDelay+0x1a>
    228e:	04 d9       	rcall	.-3576   	; 0x1498 <vPortYield>
    2290:	df 91       	pop	r29
    2292:	cf 91       	pop	r28
    2294:	08 95       	ret

00002296 <vTaskSwitchContext>:
    2296:	80 91 23 0a 	lds	r24, 0x0A23	; 0x800a23 <uxSchedulerSuspended>
    229a:	88 23       	and	r24, r24
    229c:	21 f0       	breq	.+8      	; 0x22a6 <vTaskSwitchContext+0x10>
    229e:	81 e0       	ldi	r24, 0x01	; 1
    22a0:	80 93 28 0a 	sts	0x0A28, r24	; 0x800a28 <xYieldPending>
    22a4:	08 95       	ret
    22a6:	10 92 28 0a 	sts	0x0A28, r1	; 0x800a28 <xYieldPending>
    22aa:	a0 91 6a 0a 	lds	r26, 0x0A6A	; 0x800a6a <pxCurrentTCB>
    22ae:	b0 91 6b 0a 	lds	r27, 0x0A6B	; 0x800a6b <pxCurrentTCB+0x1>
    22b2:	e0 91 6a 0a 	lds	r30, 0x0A6A	; 0x800a6a <pxCurrentTCB>
    22b6:	f0 91 6b 0a 	lds	r31, 0x0A6B	; 0x800a6b <pxCurrentTCB+0x1>
    22ba:	2d 91       	ld	r18, X+
    22bc:	3c 91       	ld	r19, X
    22be:	87 89       	ldd	r24, Z+23	; 0x17
    22c0:	90 8d       	ldd	r25, Z+24	; 0x18
    22c2:	82 17       	cp	r24, r18
    22c4:	93 07       	cpc	r25, r19
    22c6:	60 f0       	brcs	.+24     	; 0x22e0 <vTaskSwitchContext+0x4a>
    22c8:	60 91 6a 0a 	lds	r22, 0x0A6A	; 0x800a6a <pxCurrentTCB>
    22cc:	70 91 6b 0a 	lds	r23, 0x0A6B	; 0x800a6b <pxCurrentTCB+0x1>
    22d0:	80 91 6a 0a 	lds	r24, 0x0A6A	; 0x800a6a <pxCurrentTCB>
    22d4:	90 91 6b 0a 	lds	r25, 0x0A6B	; 0x800a6b <pxCurrentTCB+0x1>
    22d8:	67 5e       	subi	r22, 0xE7	; 231
    22da:	7f 4f       	sbci	r23, 0xFF	; 255
    22dc:	0e 94 e6 08 	call	0x11cc	; 0x11cc <vApplicationStackOverflowHook>
    22e0:	20 91 2b 0a 	lds	r18, 0x0A2B	; 0x800a2b <uxTopReadyPriority>
    22e4:	82 2f       	mov	r24, r18
    22e6:	90 e0       	ldi	r25, 0x00	; 0
    22e8:	fc 01       	movw	r30, r24
    22ea:	ee 0f       	add	r30, r30
    22ec:	ff 1f       	adc	r31, r31
    22ee:	ee 0f       	add	r30, r30
    22f0:	ff 1f       	adc	r31, r31
    22f2:	ee 0f       	add	r30, r30
    22f4:	ff 1f       	adc	r31, r31
    22f6:	e8 0f       	add	r30, r24
    22f8:	f9 1f       	adc	r31, r25
    22fa:	ea 5b       	subi	r30, 0xBA	; 186
    22fc:	f5 4f       	sbci	r31, 0xF5	; 245
    22fe:	30 81       	ld	r19, Z
    2300:	31 11       	cpse	r19, r1
    2302:	11 c0       	rjmp	.+34     	; 0x2326 <vTaskSwitchContext+0x90>
    2304:	21 50       	subi	r18, 0x01	; 1
    2306:	82 2f       	mov	r24, r18
    2308:	90 e0       	ldi	r25, 0x00	; 0
    230a:	fc 01       	movw	r30, r24
    230c:	ee 0f       	add	r30, r30
    230e:	ff 1f       	adc	r31, r31
    2310:	ee 0f       	add	r30, r30
    2312:	ff 1f       	adc	r31, r31
    2314:	ee 0f       	add	r30, r30
    2316:	ff 1f       	adc	r31, r31
    2318:	e8 0f       	add	r30, r24
    231a:	f9 1f       	adc	r31, r25
    231c:	ea 5b       	subi	r30, 0xBA	; 186
    231e:	f5 4f       	sbci	r31, 0xF5	; 245
    2320:	30 81       	ld	r19, Z
    2322:	33 23       	and	r19, r19
    2324:	79 f3       	breq	.-34     	; 0x2304 <vTaskSwitchContext+0x6e>
    2326:	ac 01       	movw	r20, r24
    2328:	44 0f       	add	r20, r20
    232a:	55 1f       	adc	r21, r21
    232c:	44 0f       	add	r20, r20
    232e:	55 1f       	adc	r21, r21
    2330:	44 0f       	add	r20, r20
    2332:	55 1f       	adc	r21, r21
    2334:	48 0f       	add	r20, r24
    2336:	59 1f       	adc	r21, r25
    2338:	da 01       	movw	r26, r20
    233a:	aa 5b       	subi	r26, 0xBA	; 186
    233c:	b5 4f       	sbci	r27, 0xF5	; 245
    233e:	11 96       	adiw	r26, 0x01	; 1
    2340:	ed 91       	ld	r30, X+
    2342:	fc 91       	ld	r31, X
    2344:	12 97       	sbiw	r26, 0x02	; 2
    2346:	02 80       	ldd	r0, Z+2	; 0x02
    2348:	f3 81       	ldd	r31, Z+3	; 0x03
    234a:	e0 2d       	mov	r30, r0
    234c:	12 96       	adiw	r26, 0x02	; 2
    234e:	fc 93       	st	X, r31
    2350:	ee 93       	st	-X, r30
    2352:	11 97       	sbiw	r26, 0x01	; 1
    2354:	47 5b       	subi	r20, 0xB7	; 183
    2356:	55 4f       	sbci	r21, 0xF5	; 245
    2358:	e4 17       	cp	r30, r20
    235a:	f5 07       	cpc	r31, r21
    235c:	29 f4       	brne	.+10     	; 0x2368 <vTaskSwitchContext+0xd2>
    235e:	42 81       	ldd	r20, Z+2	; 0x02
    2360:	53 81       	ldd	r21, Z+3	; 0x03
    2362:	fd 01       	movw	r30, r26
    2364:	52 83       	std	Z+2, r21	; 0x02
    2366:	41 83       	std	Z+1, r20	; 0x01
    2368:	fc 01       	movw	r30, r24
    236a:	ee 0f       	add	r30, r30
    236c:	ff 1f       	adc	r31, r31
    236e:	ee 0f       	add	r30, r30
    2370:	ff 1f       	adc	r31, r31
    2372:	ee 0f       	add	r30, r30
    2374:	ff 1f       	adc	r31, r31
    2376:	8e 0f       	add	r24, r30
    2378:	9f 1f       	adc	r25, r31
    237a:	fc 01       	movw	r30, r24
    237c:	ea 5b       	subi	r30, 0xBA	; 186
    237e:	f5 4f       	sbci	r31, 0xF5	; 245
    2380:	01 80       	ldd	r0, Z+1	; 0x01
    2382:	f2 81       	ldd	r31, Z+2	; 0x02
    2384:	e0 2d       	mov	r30, r0
    2386:	86 81       	ldd	r24, Z+6	; 0x06
    2388:	97 81       	ldd	r25, Z+7	; 0x07
    238a:	90 93 6b 0a 	sts	0x0A6B, r25	; 0x800a6b <pxCurrentTCB+0x1>
    238e:	80 93 6a 0a 	sts	0x0A6A, r24	; 0x800a6a <pxCurrentTCB>
    2392:	20 93 2b 0a 	sts	0x0A2B, r18	; 0x800a2b <uxTopReadyPriority>
    2396:	08 95       	ret

00002398 <vTaskPlaceOnEventList>:
    2398:	cf 93       	push	r28
    239a:	df 93       	push	r29
    239c:	eb 01       	movw	r28, r22
    239e:	60 91 6a 0a 	lds	r22, 0x0A6A	; 0x800a6a <pxCurrentTCB>
    23a2:	70 91 6b 0a 	lds	r23, 0x0A6B	; 0x800a6b <pxCurrentTCB+0x1>
    23a6:	64 5f       	subi	r22, 0xF4	; 244
    23a8:	7f 4f       	sbci	r23, 0xFF	; 255
    23aa:	0e 94 46 09 	call	0x128c	; 0x128c <vListInsert>
    23ae:	61 e0       	ldi	r22, 0x01	; 1
    23b0:	ce 01       	movw	r24, r28
    23b2:	a2 dc       	rcall	.-1724   	; 0x1cf8 <prvAddCurrentTaskToDelayedList>
    23b4:	df 91       	pop	r29
    23b6:	cf 91       	pop	r28
    23b8:	08 95       	ret

000023ba <vTaskPlaceOnEventListRestricted>:
    23ba:	0f 93       	push	r16
    23bc:	1f 93       	push	r17
    23be:	cf 93       	push	r28
    23c0:	8b 01       	movw	r16, r22
    23c2:	c4 2f       	mov	r28, r20
    23c4:	60 91 6a 0a 	lds	r22, 0x0A6A	; 0x800a6a <pxCurrentTCB>
    23c8:	70 91 6b 0a 	lds	r23, 0x0A6B	; 0x800a6b <pxCurrentTCB+0x1>
    23cc:	64 5f       	subi	r22, 0xF4	; 244
    23ce:	7f 4f       	sbci	r23, 0xFF	; 255
    23d0:	0e 94 25 09 	call	0x124a	; 0x124a <vListInsertEnd>
    23d4:	cc 23       	and	r28, r28
    23d6:	11 f0       	breq	.+4      	; 0x23dc <vTaskPlaceOnEventListRestricted+0x22>
    23d8:	0f ef       	ldi	r16, 0xFF	; 255
    23da:	1f ef       	ldi	r17, 0xFF	; 255
    23dc:	6c 2f       	mov	r22, r28
    23de:	c8 01       	movw	r24, r16
    23e0:	8b dc       	rcall	.-1770   	; 0x1cf8 <prvAddCurrentTaskToDelayedList>
    23e2:	cf 91       	pop	r28
    23e4:	1f 91       	pop	r17
    23e6:	0f 91       	pop	r16
    23e8:	08 95       	ret

000023ea <xTaskRemoveFromEventList>:
    23ea:	0f 93       	push	r16
    23ec:	1f 93       	push	r17
    23ee:	cf 93       	push	r28
    23f0:	df 93       	push	r29
    23f2:	dc 01       	movw	r26, r24
    23f4:	15 96       	adiw	r26, 0x05	; 5
    23f6:	ed 91       	ld	r30, X+
    23f8:	fc 91       	ld	r31, X
    23fa:	16 97       	sbiw	r26, 0x06	; 6
    23fc:	c6 81       	ldd	r28, Z+6	; 0x06
    23fe:	d7 81       	ldd	r29, Z+7	; 0x07
    2400:	8e 01       	movw	r16, r28
    2402:	04 5f       	subi	r16, 0xF4	; 244
    2404:	1f 4f       	sbci	r17, 0xFF	; 255
    2406:	c8 01       	movw	r24, r16
    2408:	0e 94 77 09 	call	0x12ee	; 0x12ee <uxListRemove>
    240c:	80 91 23 0a 	lds	r24, 0x0A23	; 0x800a23 <uxSchedulerSuspended>
    2410:	81 11       	cpse	r24, r1
    2412:	1c c0       	rjmp	.+56     	; 0x244c <xTaskRemoveFromEventList+0x62>
    2414:	0a 50       	subi	r16, 0x0A	; 10
    2416:	11 09       	sbc	r17, r1
    2418:	c8 01       	movw	r24, r16
    241a:	0e 94 77 09 	call	0x12ee	; 0x12ee <uxListRemove>
    241e:	8e 89       	ldd	r24, Y+22	; 0x16
    2420:	90 91 2b 0a 	lds	r25, 0x0A2B	; 0x800a2b <uxTopReadyPriority>
    2424:	98 17       	cp	r25, r24
    2426:	10 f4       	brcc	.+4      	; 0x242c <xTaskRemoveFromEventList+0x42>
    2428:	80 93 2b 0a 	sts	0x0A2B, r24	; 0x800a2b <uxTopReadyPriority>
    242c:	90 e0       	ldi	r25, 0x00	; 0
    242e:	9c 01       	movw	r18, r24
    2430:	22 0f       	add	r18, r18
    2432:	33 1f       	adc	r19, r19
    2434:	22 0f       	add	r18, r18
    2436:	33 1f       	adc	r19, r19
    2438:	22 0f       	add	r18, r18
    243a:	33 1f       	adc	r19, r19
    243c:	82 0f       	add	r24, r18
    243e:	93 1f       	adc	r25, r19
    2440:	b8 01       	movw	r22, r16
    2442:	8a 5b       	subi	r24, 0xBA	; 186
    2444:	95 4f       	sbci	r25, 0xF5	; 245
    2446:	0e 94 25 09 	call	0x124a	; 0x124a <vListInsertEnd>
    244a:	05 c0       	rjmp	.+10     	; 0x2456 <xTaskRemoveFromEventList+0x6c>
    244c:	b8 01       	movw	r22, r16
    244e:	89 e3       	ldi	r24, 0x39	; 57
    2450:	9a e0       	ldi	r25, 0x0A	; 10
    2452:	0e 94 25 09 	call	0x124a	; 0x124a <vListInsertEnd>
    2456:	e0 91 6a 0a 	lds	r30, 0x0A6A	; 0x800a6a <pxCurrentTCB>
    245a:	f0 91 6b 0a 	lds	r31, 0x0A6B	; 0x800a6b <pxCurrentTCB+0x1>
    245e:	9e 89       	ldd	r25, Y+22	; 0x16
    2460:	86 89       	ldd	r24, Z+22	; 0x16
    2462:	89 17       	cp	r24, r25
    2464:	20 f4       	brcc	.+8      	; 0x246e <xTaskRemoveFromEventList+0x84>
    2466:	81 e0       	ldi	r24, 0x01	; 1
    2468:	80 93 28 0a 	sts	0x0A28, r24	; 0x800a28 <xYieldPending>
    246c:	01 c0       	rjmp	.+2      	; 0x2470 <xTaskRemoveFromEventList+0x86>
    246e:	80 e0       	ldi	r24, 0x00	; 0
    2470:	df 91       	pop	r29
    2472:	cf 91       	pop	r28
    2474:	1f 91       	pop	r17
    2476:	0f 91       	pop	r16
    2478:	08 95       	ret

0000247a <vTaskInternalSetTimeOutState>:
    247a:	20 91 27 0a 	lds	r18, 0x0A27	; 0x800a27 <xNumOfOverflows>
    247e:	fc 01       	movw	r30, r24
    2480:	20 83       	st	Z, r18
    2482:	20 91 2c 0a 	lds	r18, 0x0A2C	; 0x800a2c <xTickCount>
    2486:	30 91 2d 0a 	lds	r19, 0x0A2D	; 0x800a2d <xTickCount+0x1>
    248a:	32 83       	std	Z+2, r19	; 0x02
    248c:	21 83       	std	Z+1, r18	; 0x01
    248e:	08 95       	ret

00002490 <xTaskCheckForTimeOut>:
    2490:	0f b6       	in	r0, 0x3f	; 63
    2492:	f8 94       	cli
    2494:	0f 92       	push	r0
    2496:	20 91 2c 0a 	lds	r18, 0x0A2C	; 0x800a2c <xTickCount>
    249a:	30 91 2d 0a 	lds	r19, 0x0A2D	; 0x800a2d <xTickCount+0x1>
    249e:	dc 01       	movw	r26, r24
    24a0:	11 96       	adiw	r26, 0x01	; 1
    24a2:	4d 91       	ld	r20, X+
    24a4:	5c 91       	ld	r21, X
    24a6:	12 97       	sbiw	r26, 0x02	; 2
    24a8:	e0 91 27 0a 	lds	r30, 0x0A27	; 0x800a27 <xNumOfOverflows>
    24ac:	fc 91       	ld	r31, X
    24ae:	fe 17       	cp	r31, r30
    24b0:	19 f0       	breq	.+6      	; 0x24b8 <xTaskCheckForTimeOut+0x28>
    24b2:	24 17       	cp	r18, r20
    24b4:	35 07       	cpc	r19, r21
    24b6:	98 f4       	brcc	.+38     	; 0x24de <xTaskCheckForTimeOut+0x4e>
    24b8:	24 1b       	sub	r18, r20
    24ba:	35 0b       	sbc	r19, r21
    24bc:	fb 01       	movw	r30, r22
    24be:	40 81       	ld	r20, Z
    24c0:	51 81       	ldd	r21, Z+1	; 0x01
    24c2:	24 17       	cp	r18, r20
    24c4:	35 07       	cpc	r19, r21
    24c6:	38 f4       	brcc	.+14     	; 0x24d6 <xTaskCheckForTimeOut+0x46>
    24c8:	42 1b       	sub	r20, r18
    24ca:	53 0b       	sbc	r21, r19
    24cc:	51 83       	std	Z+1, r21	; 0x01
    24ce:	40 83       	st	Z, r20
    24d0:	d4 df       	rcall	.-88     	; 0x247a <vTaskInternalSetTimeOutState>
    24d2:	80 e0       	ldi	r24, 0x00	; 0
    24d4:	05 c0       	rjmp	.+10     	; 0x24e0 <xTaskCheckForTimeOut+0x50>
    24d6:	11 82       	std	Z+1, r1	; 0x01
    24d8:	10 82       	st	Z, r1
    24da:	81 e0       	ldi	r24, 0x01	; 1
    24dc:	01 c0       	rjmp	.+2      	; 0x24e0 <xTaskCheckForTimeOut+0x50>
    24de:	81 e0       	ldi	r24, 0x01	; 1
    24e0:	0f 90       	pop	r0
    24e2:	0f be       	out	0x3f, r0	; 63
    24e4:	08 95       	ret

000024e6 <vTaskMissedYield>:
    24e6:	81 e0       	ldi	r24, 0x01	; 1
    24e8:	80 93 28 0a 	sts	0x0A28, r24	; 0x800a28 <xYieldPending>
    24ec:	08 95       	ret

000024ee <xTaskGetSchedulerState>:
    24ee:	80 91 2a 0a 	lds	r24, 0x0A2A	; 0x800a2a <xSchedulerRunning>
    24f2:	88 23       	and	r24, r24
    24f4:	31 f0       	breq	.+12     	; 0x2502 <xTaskGetSchedulerState+0x14>
    24f6:	80 91 23 0a 	lds	r24, 0x0A23	; 0x800a23 <uxSchedulerSuspended>
    24fa:	88 23       	and	r24, r24
    24fc:	21 f0       	breq	.+8      	; 0x2506 <xTaskGetSchedulerState+0x18>
    24fe:	80 e0       	ldi	r24, 0x00	; 0
    2500:	08 95       	ret
    2502:	81 e0       	ldi	r24, 0x01	; 1
    2504:	08 95       	ret
    2506:	82 e0       	ldi	r24, 0x02	; 2
    2508:	08 95       	ret

0000250a <xTaskPriorityInherit>:
    250a:	0f 93       	push	r16
    250c:	1f 93       	push	r17
    250e:	cf 93       	push	r28
    2510:	df 93       	push	r29
    2512:	fc 01       	movw	r30, r24
    2514:	89 2b       	or	r24, r25
    2516:	09 f4       	brne	.+2      	; 0x251a <xTaskPriorityInherit+0x10>
    2518:	64 c0       	rjmp	.+200    	; 0x25e2 <xTaskPriorityInherit+0xd8>
    251a:	26 89       	ldd	r18, Z+22	; 0x16
    251c:	a0 91 6a 0a 	lds	r26, 0x0A6A	; 0x800a6a <pxCurrentTCB>
    2520:	b0 91 6b 0a 	lds	r27, 0x0A6B	; 0x800a6b <pxCurrentTCB+0x1>
    2524:	56 96       	adiw	r26, 0x16	; 22
    2526:	8c 91       	ld	r24, X
    2528:	28 17       	cp	r18, r24
    252a:	08 f0       	brcs	.+2      	; 0x252e <xTaskPriorityInherit+0x24>
    252c:	4e c0       	rjmp	.+156    	; 0x25ca <xTaskPriorityInherit+0xc0>
    252e:	84 85       	ldd	r24, Z+12	; 0x0c
    2530:	95 85       	ldd	r25, Z+13	; 0x0d
    2532:	99 23       	and	r25, r25
    2534:	64 f0       	brlt	.+24     	; 0x254e <xTaskPriorityInherit+0x44>
    2536:	a0 91 6a 0a 	lds	r26, 0x0A6A	; 0x800a6a <pxCurrentTCB>
    253a:	b0 91 6b 0a 	lds	r27, 0x0A6B	; 0x800a6b <pxCurrentTCB+0x1>
    253e:	56 96       	adiw	r26, 0x16	; 22
    2540:	3c 91       	ld	r19, X
    2542:	84 e0       	ldi	r24, 0x04	; 4
    2544:	90 e0       	ldi	r25, 0x00	; 0
    2546:	83 1b       	sub	r24, r19
    2548:	91 09       	sbc	r25, r1
    254a:	95 87       	std	Z+13, r25	; 0x0d
    254c:	84 87       	std	Z+12, r24	; 0x0c
    254e:	30 e0       	ldi	r19, 0x00	; 0
    2550:	c9 01       	movw	r24, r18
    2552:	88 0f       	add	r24, r24
    2554:	99 1f       	adc	r25, r25
    2556:	88 0f       	add	r24, r24
    2558:	99 1f       	adc	r25, r25
    255a:	88 0f       	add	r24, r24
    255c:	99 1f       	adc	r25, r25
    255e:	28 0f       	add	r18, r24
    2560:	39 1f       	adc	r19, r25
    2562:	2a 5b       	subi	r18, 0xBA	; 186
    2564:	35 4f       	sbci	r19, 0xF5	; 245
    2566:	82 85       	ldd	r24, Z+10	; 0x0a
    2568:	93 85       	ldd	r25, Z+11	; 0x0b
    256a:	82 17       	cp	r24, r18
    256c:	93 07       	cpc	r25, r19
    256e:	21 f5       	brne	.+72     	; 0x25b8 <xTaskPriorityInherit+0xae>
    2570:	8f 01       	movw	r16, r30
    2572:	ef 01       	movw	r28, r30
    2574:	22 96       	adiw	r28, 0x02	; 2
    2576:	ce 01       	movw	r24, r28
    2578:	0e 94 77 09 	call	0x12ee	; 0x12ee <uxListRemove>
    257c:	e0 91 6a 0a 	lds	r30, 0x0A6A	; 0x800a6a <pxCurrentTCB>
    2580:	f0 91 6b 0a 	lds	r31, 0x0A6B	; 0x800a6b <pxCurrentTCB+0x1>
    2584:	86 89       	ldd	r24, Z+22	; 0x16
    2586:	f8 01       	movw	r30, r16
    2588:	86 8b       	std	Z+22, r24	; 0x16
    258a:	90 91 2b 0a 	lds	r25, 0x0A2B	; 0x800a2b <uxTopReadyPriority>
    258e:	98 17       	cp	r25, r24
    2590:	10 f4       	brcc	.+4      	; 0x2596 <xTaskPriorityInherit+0x8c>
    2592:	80 93 2b 0a 	sts	0x0A2B, r24	; 0x800a2b <uxTopReadyPriority>
    2596:	90 e0       	ldi	r25, 0x00	; 0
    2598:	9c 01       	movw	r18, r24
    259a:	22 0f       	add	r18, r18
    259c:	33 1f       	adc	r19, r19
    259e:	22 0f       	add	r18, r18
    25a0:	33 1f       	adc	r19, r19
    25a2:	22 0f       	add	r18, r18
    25a4:	33 1f       	adc	r19, r19
    25a6:	82 0f       	add	r24, r18
    25a8:	93 1f       	adc	r25, r19
    25aa:	be 01       	movw	r22, r28
    25ac:	8a 5b       	subi	r24, 0xBA	; 186
    25ae:	95 4f       	sbci	r25, 0xF5	; 245
    25b0:	0e 94 25 09 	call	0x124a	; 0x124a <vListInsertEnd>
    25b4:	81 e0       	ldi	r24, 0x01	; 1
    25b6:	16 c0       	rjmp	.+44     	; 0x25e4 <xTaskPriorityInherit+0xda>
    25b8:	a0 91 6a 0a 	lds	r26, 0x0A6A	; 0x800a6a <pxCurrentTCB>
    25bc:	b0 91 6b 0a 	lds	r27, 0x0A6B	; 0x800a6b <pxCurrentTCB+0x1>
    25c0:	56 96       	adiw	r26, 0x16	; 22
    25c2:	8c 91       	ld	r24, X
    25c4:	86 8b       	std	Z+22, r24	; 0x16
    25c6:	81 e0       	ldi	r24, 0x01	; 1
    25c8:	0d c0       	rjmp	.+26     	; 0x25e4 <xTaskPriorityInherit+0xda>
    25ca:	a0 91 6a 0a 	lds	r26, 0x0A6A	; 0x800a6a <pxCurrentTCB>
    25ce:	b0 91 6b 0a 	lds	r27, 0x0A6B	; 0x800a6b <pxCurrentTCB+0x1>
    25d2:	81 e0       	ldi	r24, 0x01	; 1
    25d4:	21 a1       	ldd	r18, Z+33	; 0x21
    25d6:	56 96       	adiw	r26, 0x16	; 22
    25d8:	9c 91       	ld	r25, X
    25da:	29 17       	cp	r18, r25
    25dc:	18 f0       	brcs	.+6      	; 0x25e4 <xTaskPriorityInherit+0xda>
    25de:	80 e0       	ldi	r24, 0x00	; 0
    25e0:	01 c0       	rjmp	.+2      	; 0x25e4 <xTaskPriorityInherit+0xda>
    25e2:	80 e0       	ldi	r24, 0x00	; 0
    25e4:	df 91       	pop	r29
    25e6:	cf 91       	pop	r28
    25e8:	1f 91       	pop	r17
    25ea:	0f 91       	pop	r16
    25ec:	08 95       	ret

000025ee <xTaskPriorityDisinherit>:
    25ee:	0f 93       	push	r16
    25f0:	1f 93       	push	r17
    25f2:	cf 93       	push	r28
    25f4:	df 93       	push	r29
    25f6:	fc 01       	movw	r30, r24
    25f8:	89 2b       	or	r24, r25
    25fa:	79 f1       	breq	.+94     	; 0x265a <xTaskPriorityDisinherit+0x6c>
    25fc:	82 a1       	ldd	r24, Z+34	; 0x22
    25fe:	81 50       	subi	r24, 0x01	; 1
    2600:	82 a3       	std	Z+34, r24	; 0x22
    2602:	26 89       	ldd	r18, Z+22	; 0x16
    2604:	91 a1       	ldd	r25, Z+33	; 0x21
    2606:	29 17       	cp	r18, r25
    2608:	51 f1       	breq	.+84     	; 0x265e <xTaskPriorityDisinherit+0x70>
    260a:	81 11       	cpse	r24, r1
    260c:	2a c0       	rjmp	.+84     	; 0x2662 <xTaskPriorityDisinherit+0x74>
    260e:	ef 01       	movw	r28, r30
    2610:	8f 01       	movw	r16, r30
    2612:	0e 5f       	subi	r16, 0xFE	; 254
    2614:	1f 4f       	sbci	r17, 0xFF	; 255
    2616:	c8 01       	movw	r24, r16
    2618:	0e 94 77 09 	call	0x12ee	; 0x12ee <uxListRemove>
    261c:	89 a1       	ldd	r24, Y+33	; 0x21
    261e:	8e 8b       	std	Y+22, r24	; 0x16
    2620:	24 e0       	ldi	r18, 0x04	; 4
    2622:	30 e0       	ldi	r19, 0x00	; 0
    2624:	28 1b       	sub	r18, r24
    2626:	31 09       	sbc	r19, r1
    2628:	3d 87       	std	Y+13, r19	; 0x0d
    262a:	2c 87       	std	Y+12, r18	; 0x0c
    262c:	90 91 2b 0a 	lds	r25, 0x0A2B	; 0x800a2b <uxTopReadyPriority>
    2630:	98 17       	cp	r25, r24
    2632:	10 f4       	brcc	.+4      	; 0x2638 <xTaskPriorityDisinherit+0x4a>
    2634:	80 93 2b 0a 	sts	0x0A2B, r24	; 0x800a2b <uxTopReadyPriority>
    2638:	90 e0       	ldi	r25, 0x00	; 0
    263a:	9c 01       	movw	r18, r24
    263c:	22 0f       	add	r18, r18
    263e:	33 1f       	adc	r19, r19
    2640:	22 0f       	add	r18, r18
    2642:	33 1f       	adc	r19, r19
    2644:	22 0f       	add	r18, r18
    2646:	33 1f       	adc	r19, r19
    2648:	82 0f       	add	r24, r18
    264a:	93 1f       	adc	r25, r19
    264c:	b8 01       	movw	r22, r16
    264e:	8a 5b       	subi	r24, 0xBA	; 186
    2650:	95 4f       	sbci	r25, 0xF5	; 245
    2652:	0e 94 25 09 	call	0x124a	; 0x124a <vListInsertEnd>
    2656:	81 e0       	ldi	r24, 0x01	; 1
    2658:	05 c0       	rjmp	.+10     	; 0x2664 <xTaskPriorityDisinherit+0x76>
    265a:	80 e0       	ldi	r24, 0x00	; 0
    265c:	03 c0       	rjmp	.+6      	; 0x2664 <xTaskPriorityDisinherit+0x76>
    265e:	80 e0       	ldi	r24, 0x00	; 0
    2660:	01 c0       	rjmp	.+2      	; 0x2664 <xTaskPriorityDisinherit+0x76>
    2662:	80 e0       	ldi	r24, 0x00	; 0
    2664:	df 91       	pop	r29
    2666:	cf 91       	pop	r28
    2668:	1f 91       	pop	r17
    266a:	0f 91       	pop	r16
    266c:	08 95       	ret

0000266e <vTaskPriorityDisinheritAfterTimeout>:
    266e:	0f 93       	push	r16
    2670:	1f 93       	push	r17
    2672:	cf 93       	push	r28
    2674:	df 93       	push	r29
    2676:	fc 01       	movw	r30, r24
    2678:	89 2b       	or	r24, r25
    267a:	09 f4       	brne	.+2      	; 0x267e <vTaskPriorityDisinheritAfterTimeout+0x10>
    267c:	43 c0       	rjmp	.+134    	; 0x2704 <vTaskPriorityDisinheritAfterTimeout+0x96>
    267e:	91 a1       	ldd	r25, Z+33	; 0x21
    2680:	96 17       	cp	r25, r22
    2682:	08 f4       	brcc	.+2      	; 0x2686 <vTaskPriorityDisinheritAfterTimeout+0x18>
    2684:	96 2f       	mov	r25, r22
    2686:	86 89       	ldd	r24, Z+22	; 0x16
    2688:	89 17       	cp	r24, r25
    268a:	e1 f1       	breq	.+120    	; 0x2704 <vTaskPriorityDisinheritAfterTimeout+0x96>
    268c:	22 a1       	ldd	r18, Z+34	; 0x22
    268e:	21 30       	cpi	r18, 0x01	; 1
    2690:	c9 f5       	brne	.+114    	; 0x2704 <vTaskPriorityDisinheritAfterTimeout+0x96>
    2692:	96 8b       	std	Z+22, r25	; 0x16
    2694:	24 85       	ldd	r18, Z+12	; 0x0c
    2696:	35 85       	ldd	r19, Z+13	; 0x0d
    2698:	33 23       	and	r19, r19
    269a:	34 f0       	brlt	.+12     	; 0x26a8 <vTaskPriorityDisinheritAfterTimeout+0x3a>
    269c:	24 e0       	ldi	r18, 0x04	; 4
    269e:	30 e0       	ldi	r19, 0x00	; 0
    26a0:	29 1b       	sub	r18, r25
    26a2:	31 09       	sbc	r19, r1
    26a4:	35 87       	std	Z+13, r19	; 0x0d
    26a6:	24 87       	std	Z+12, r18	; 0x0c
    26a8:	90 e0       	ldi	r25, 0x00	; 0
    26aa:	9c 01       	movw	r18, r24
    26ac:	22 0f       	add	r18, r18
    26ae:	33 1f       	adc	r19, r19
    26b0:	22 0f       	add	r18, r18
    26b2:	33 1f       	adc	r19, r19
    26b4:	22 0f       	add	r18, r18
    26b6:	33 1f       	adc	r19, r19
    26b8:	82 0f       	add	r24, r18
    26ba:	93 1f       	adc	r25, r19
    26bc:	8a 5b       	subi	r24, 0xBA	; 186
    26be:	95 4f       	sbci	r25, 0xF5	; 245
    26c0:	22 85       	ldd	r18, Z+10	; 0x0a
    26c2:	33 85       	ldd	r19, Z+11	; 0x0b
    26c4:	28 17       	cp	r18, r24
    26c6:	39 07       	cpc	r19, r25
    26c8:	e9 f4       	brne	.+58     	; 0x2704 <vTaskPriorityDisinheritAfterTimeout+0x96>
    26ca:	ef 01       	movw	r28, r30
    26cc:	8f 01       	movw	r16, r30
    26ce:	0e 5f       	subi	r16, 0xFE	; 254
    26d0:	1f 4f       	sbci	r17, 0xFF	; 255
    26d2:	c8 01       	movw	r24, r16
    26d4:	0e 94 77 09 	call	0x12ee	; 0x12ee <uxListRemove>
    26d8:	8e 89       	ldd	r24, Y+22	; 0x16
    26da:	90 91 2b 0a 	lds	r25, 0x0A2B	; 0x800a2b <uxTopReadyPriority>
    26de:	98 17       	cp	r25, r24
    26e0:	10 f4       	brcc	.+4      	; 0x26e6 <vTaskPriorityDisinheritAfterTimeout+0x78>
    26e2:	80 93 2b 0a 	sts	0x0A2B, r24	; 0x800a2b <uxTopReadyPriority>
    26e6:	90 e0       	ldi	r25, 0x00	; 0
    26e8:	9c 01       	movw	r18, r24
    26ea:	22 0f       	add	r18, r18
    26ec:	33 1f       	adc	r19, r19
    26ee:	22 0f       	add	r18, r18
    26f0:	33 1f       	adc	r19, r19
    26f2:	22 0f       	add	r18, r18
    26f4:	33 1f       	adc	r19, r19
    26f6:	82 0f       	add	r24, r18
    26f8:	93 1f       	adc	r25, r19
    26fa:	b8 01       	movw	r22, r16
    26fc:	8a 5b       	subi	r24, 0xBA	; 186
    26fe:	95 4f       	sbci	r25, 0xF5	; 245
    2700:	0e 94 25 09 	call	0x124a	; 0x124a <vListInsertEnd>
    2704:	df 91       	pop	r29
    2706:	cf 91       	pop	r28
    2708:	1f 91       	pop	r17
    270a:	0f 91       	pop	r16
    270c:	08 95       	ret

0000270e <pvTaskIncrementMutexHeldCount>:

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
        then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
    270e:	80 91 6a 0a 	lds	r24, 0x0A6A	; 0x800a6a <pxCurrentTCB>
    2712:	90 91 6b 0a 	lds	r25, 0x0A6B	; 0x800a6b <pxCurrentTCB+0x1>
    2716:	89 2b       	or	r24, r25
    2718:	39 f0       	breq	.+14     	; 0x2728 <pvTaskIncrementMutexHeldCount+0x1a>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
    271a:	e0 91 6a 0a 	lds	r30, 0x0A6A	; 0x800a6a <pxCurrentTCB>
    271e:	f0 91 6b 0a 	lds	r31, 0x0A6B	; 0x800a6b <pxCurrentTCB+0x1>
    2722:	82 a1       	ldd	r24, Z+34	; 0x22
    2724:	8f 5f       	subi	r24, 0xFF	; 255
    2726:	82 a3       	std	Z+34, r24	; 0x22
        }

        return pxCurrentTCB;
    2728:	80 91 6a 0a 	lds	r24, 0x0A6A	; 0x800a6a <pxCurrentTCB>
    272c:	90 91 6b 0a 	lds	r25, 0x0A6B	; 0x800a6b <pxCurrentTCB+0x1>
    }
    2730:	08 95       	ret

00002732 <prvInsertTimerInActiveList>:
            }
            #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
        }

        return pxNewTimer;
    }
    2732:	fc 01       	movw	r30, r24
    2734:	73 83       	std	Z+3, r23	; 0x03
    2736:	62 83       	std	Z+2, r22	; 0x02
    2738:	91 87       	std	Z+9, r25	; 0x09
    273a:	80 87       	std	Z+8, r24	; 0x08
    273c:	46 17       	cp	r20, r22
    273e:	57 07       	cpc	r21, r23
    2740:	90 f0       	brcs	.+36     	; 0x2766 <prvInsertTimerInActiveList+0x34>
    2742:	42 1b       	sub	r20, r18
    2744:	53 0b       	sbc	r21, r19
    2746:	84 85       	ldd	r24, Z+12	; 0x0c
    2748:	95 85       	ldd	r25, Z+13	; 0x0d
    274a:	48 17       	cp	r20, r24
    274c:	59 07       	cpc	r21, r25
    274e:	e0 f4       	brcc	.+56     	; 0x2788 <prvInsertTimerInActiveList+0x56>
    2750:	bf 01       	movw	r22, r30
    2752:	6e 5f       	subi	r22, 0xFE	; 254
    2754:	7f 4f       	sbci	r23, 0xFF	; 255
    2756:	80 91 d5 0a 	lds	r24, 0x0AD5	; 0x800ad5 <pxOverflowTimerList>
    275a:	90 91 d6 0a 	lds	r25, 0x0AD6	; 0x800ad6 <pxOverflowTimerList+0x1>
    275e:	0e 94 46 09 	call	0x128c	; 0x128c <vListInsert>
    2762:	80 e0       	ldi	r24, 0x00	; 0
    2764:	08 95       	ret
    2766:	42 17       	cp	r20, r18
    2768:	53 07       	cpc	r21, r19
    276a:	18 f4       	brcc	.+6      	; 0x2772 <prvInsertTimerInActiveList+0x40>
    276c:	62 17       	cp	r22, r18
    276e:	73 07       	cpc	r23, r19
    2770:	68 f4       	brcc	.+26     	; 0x278c <prvInsertTimerInActiveList+0x5a>
    2772:	bf 01       	movw	r22, r30
    2774:	6e 5f       	subi	r22, 0xFE	; 254
    2776:	7f 4f       	sbci	r23, 0xFF	; 255
    2778:	80 91 d7 0a 	lds	r24, 0x0AD7	; 0x800ad7 <pxCurrentTimerList>
    277c:	90 91 d8 0a 	lds	r25, 0x0AD8	; 0x800ad8 <pxCurrentTimerList+0x1>
    2780:	0e 94 46 09 	call	0x128c	; 0x128c <vListInsert>
    2784:	80 e0       	ldi	r24, 0x00	; 0
    2786:	08 95       	ret
    2788:	81 e0       	ldi	r24, 0x01	; 1
    278a:	08 95       	ret
    278c:	81 e0       	ldi	r24, 0x01	; 1
    278e:	08 95       	ret

00002790 <prvCheckForValidListAndQueue>:
    2790:	0f 93       	push	r16
    2792:	0f b6       	in	r0, 0x3f	; 63
    2794:	f8 94       	cli
    2796:	0f 92       	push	r0
    2798:	80 91 d3 0a 	lds	r24, 0x0AD3	; 0x800ad3 <xTimerQueue>
    279c:	90 91 d4 0a 	lds	r25, 0x0AD4	; 0x800ad4 <xTimerQueue+0x1>
    27a0:	89 2b       	or	r24, r25
    27a2:	01 f5       	brne	.+64     	; 0x27e4 <prvCheckForValidListAndQueue+0x54>
    27a4:	86 ec       	ldi	r24, 0xC6	; 198
    27a6:	9a e0       	ldi	r25, 0x0A	; 10
    27a8:	0e 94 13 09 	call	0x1226	; 0x1226 <vListInitialise>
    27ac:	8d eb       	ldi	r24, 0xBD	; 189
    27ae:	9a e0       	ldi	r25, 0x0A	; 10
    27b0:	0e 94 13 09 	call	0x1226	; 0x1226 <vListInitialise>
    27b4:	86 ec       	ldi	r24, 0xC6	; 198
    27b6:	9a e0       	ldi	r25, 0x0A	; 10
    27b8:	90 93 d8 0a 	sts	0x0AD8, r25	; 0x800ad8 <pxCurrentTimerList+0x1>
    27bc:	80 93 d7 0a 	sts	0x0AD7, r24	; 0x800ad7 <pxCurrentTimerList>
    27c0:	8d eb       	ldi	r24, 0xBD	; 189
    27c2:	9a e0       	ldi	r25, 0x0A	; 10
    27c4:	90 93 d6 0a 	sts	0x0AD6, r25	; 0x800ad6 <pxOverflowTimerList+0x1>
    27c8:	80 93 d5 0a 	sts	0x0AD5, r24	; 0x800ad5 <pxOverflowTimerList>
    27cc:	00 e0       	ldi	r16, 0x00	; 0
    27ce:	2c e6       	ldi	r18, 0x6C	; 108
    27d0:	3a e0       	ldi	r19, 0x0A	; 10
    27d2:	4b e8       	ldi	r20, 0x8B	; 139
    27d4:	5a e0       	ldi	r21, 0x0A	; 10
    27d6:	65 e0       	ldi	r22, 0x05	; 5
    27d8:	8a e0       	ldi	r24, 0x0A	; 10
    27da:	31 d8       	rcall	.-3998   	; 0x183e <xQueueGenericCreateStatic>
    27dc:	90 93 d4 0a 	sts	0x0AD4, r25	; 0x800ad4 <xTimerQueue+0x1>
    27e0:	80 93 d3 0a 	sts	0x0AD3, r24	; 0x800ad3 <xTimerQueue>
    27e4:	0f 90       	pop	r0
    27e6:	0f be       	out	0x3f, r0	; 63
    27e8:	0f 91       	pop	r16
    27ea:	08 95       	ret

000027ec <xTimerCreateTimerTask>:
    27ec:	cf 92       	push	r12
    27ee:	df 92       	push	r13
    27f0:	ef 92       	push	r14
    27f2:	ff 92       	push	r15
    27f4:	0f 93       	push	r16
    27f6:	cf 93       	push	r28
    27f8:	df 93       	push	r29
    27fa:	00 d0       	rcall	.+0      	; 0x27fc <xTimerCreateTimerTask+0x10>
    27fc:	00 d0       	rcall	.+0      	; 0x27fe <xTimerCreateTimerTask+0x12>
    27fe:	cd b7       	in	r28, 0x3d	; 61
    2800:	de b7       	in	r29, 0x3e	; 62
    2802:	c6 df       	rcall	.-116    	; 0x2790 <prvCheckForValidListAndQueue>
    2804:	80 91 d3 0a 	lds	r24, 0x0AD3	; 0x800ad3 <xTimerQueue>
    2808:	90 91 d4 0a 	lds	r25, 0x0AD4	; 0x800ad4 <xTimerQueue+0x1>
    280c:	89 2b       	or	r24, r25
    280e:	31 f1       	breq	.+76     	; 0x285c <xTimerCreateTimerTask+0x70>
    2810:	1e 82       	std	Y+6, r1	; 0x06
    2812:	1d 82       	std	Y+5, r1	; 0x05
    2814:	1c 82       	std	Y+4, r1	; 0x04
    2816:	1b 82       	std	Y+3, r1	; 0x03
    2818:	ae 01       	movw	r20, r28
    281a:	4f 5f       	subi	r20, 0xFF	; 255
    281c:	5f 4f       	sbci	r21, 0xFF	; 255
    281e:	be 01       	movw	r22, r28
    2820:	6d 5f       	subi	r22, 0xFD	; 253
    2822:	7f 4f       	sbci	r23, 0xFF	; 255
    2824:	ce 01       	movw	r24, r28
    2826:	05 96       	adiw	r24, 0x05	; 5
    2828:	0e 94 03 09 	call	0x1206	; 0x1206 <vApplicationGetTimerTaskMemory>
    282c:	cd 80       	ldd	r12, Y+5	; 0x05
    282e:	de 80       	ldd	r13, Y+6	; 0x06
    2830:	eb 80       	ldd	r14, Y+3	; 0x03
    2832:	fc 80       	ldd	r15, Y+4	; 0x04
    2834:	49 81       	ldd	r20, Y+1	; 0x01
    2836:	5a 81       	ldd	r21, Y+2	; 0x02
    2838:	03 e0       	ldi	r16, 0x03	; 3
    283a:	20 e0       	ldi	r18, 0x00	; 0
    283c:	30 e0       	ldi	r19, 0x00	; 0
    283e:	60 e7       	ldi	r22, 0x70	; 112
    2840:	72 e0       	ldi	r23, 0x02	; 2
    2842:	81 ef       	ldi	r24, 0xF1	; 241
    2844:	94 e1       	ldi	r25, 0x14	; 20
    2846:	99 da       	rcall	.-2766   	; 0x1d7a <xTaskCreateStatic>
    2848:	9c 01       	movw	r18, r24
    284a:	90 93 d2 0a 	sts	0x0AD2, r25	; 0x800ad2 <xTimerTaskHandle+0x1>
    284e:	80 93 d1 0a 	sts	0x0AD1, r24	; 0x800ad1 <xTimerTaskHandle>
    2852:	81 e0       	ldi	r24, 0x01	; 1
    2854:	23 2b       	or	r18, r19
    2856:	19 f4       	brne	.+6      	; 0x285e <xTimerCreateTimerTask+0x72>
    2858:	80 e0       	ldi	r24, 0x00	; 0
    285a:	01 c0       	rjmp	.+2      	; 0x285e <xTimerCreateTimerTask+0x72>
    285c:	80 e0       	ldi	r24, 0x00	; 0
    285e:	26 96       	adiw	r28, 0x06	; 6
    2860:	0f b6       	in	r0, 0x3f	; 63
    2862:	f8 94       	cli
    2864:	de bf       	out	0x3e, r29	; 62
    2866:	0f be       	out	0x3f, r0	; 63
    2868:	cd bf       	out	0x3d, r28	; 61
    286a:	df 91       	pop	r29
    286c:	cf 91       	pop	r28
    286e:	0f 91       	pop	r16
    2870:	ff 90       	pop	r15
    2872:	ef 90       	pop	r14
    2874:	df 90       	pop	r13
    2876:	cf 90       	pop	r12
    2878:	08 95       	ret

0000287a <xTimerGenericCommand>:
    }
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
    287a:	0f 93       	push	r16
    287c:	1f 93       	push	r17
    287e:	cf 93       	push	r28
    2880:	df 93       	push	r29
    2882:	00 d0       	rcall	.+0      	; 0x2884 <xTimerGenericCommand+0xa>
    2884:	1f 92       	push	r1
    2886:	1f 92       	push	r1
    2888:	cd b7       	in	r28, 0x3d	; 61
    288a:	de b7       	in	r29, 0x3e	; 62

    configASSERT( xTimer );

    /* Send a message to the timer service task to perform a particular action
    on a particular timer definition. */
    if( xTimerQueue != NULL )
    288c:	e0 91 d3 0a 	lds	r30, 0x0AD3	; 0x800ad3 <xTimerQueue>
    2890:	f0 91 d4 0a 	lds	r31, 0x0AD4	; 0x800ad4 <xTimerQueue+0x1>
    2894:	30 97       	sbiw	r30, 0x00	; 0
    2896:	61 f1       	breq	.+88     	; 0x28f0 <xTimerGenericCommand+0x76>
    2898:	d9 01       	movw	r26, r18
    {
        /* Send a command to the timer service task to start the xTimer timer. */
        xMessage.xMessageID = xCommandID;
    289a:	69 83       	std	Y+1, r22	; 0x01
        xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    289c:	5b 83       	std	Y+3, r21	; 0x03
    289e:	4a 83       	std	Y+2, r20	; 0x02
        xMessage.u.xTimerParameters.pxTimer = xTimer;
    28a0:	9d 83       	std	Y+5, r25	; 0x05
    28a2:	8c 83       	std	Y+4, r24	; 0x04

        if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    28a4:	66 30       	cpi	r22, 0x06	; 6
    28a6:	e4 f4       	brge	.+56     	; 0x28e0 <xTimerGenericCommand+0x66>
        {
            if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    28a8:	22 de       	rcall	.-956    	; 0x24ee <xTaskGetSchedulerState>
    28aa:	82 30       	cpi	r24, 0x02	; 2
    28ac:	61 f4       	brne	.+24     	; 0x28c6 <xTimerGenericCommand+0x4c>
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    28ae:	20 e0       	ldi	r18, 0x00	; 0
    28b0:	a8 01       	movw	r20, r16
    28b2:	be 01       	movw	r22, r28
    28b4:	6f 5f       	subi	r22, 0xFF	; 255
    28b6:	7f 4f       	sbci	r23, 0xFF	; 255
    28b8:	80 91 d3 0a 	lds	r24, 0x0AD3	; 0x800ad3 <xTimerQueue>
    28bc:	90 91 d4 0a 	lds	r25, 0x0AD4	; 0x800ad4 <xTimerQueue+0x1>
    28c0:	0e 94 34 0c 	call	0x1868	; 0x1868 <xQueueGenericSend>
    28c4:	16 c0       	rjmp	.+44     	; 0x28f2 <xTimerGenericCommand+0x78>
            }
            else
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    28c6:	20 e0       	ldi	r18, 0x00	; 0
    28c8:	40 e0       	ldi	r20, 0x00	; 0
    28ca:	50 e0       	ldi	r21, 0x00	; 0
    28cc:	be 01       	movw	r22, r28
    28ce:	6f 5f       	subi	r22, 0xFF	; 255
    28d0:	7f 4f       	sbci	r23, 0xFF	; 255
    28d2:	80 91 d3 0a 	lds	r24, 0x0AD3	; 0x800ad3 <xTimerQueue>
    28d6:	90 91 d4 0a 	lds	r25, 0x0AD4	; 0x800ad4 <xTimerQueue+0x1>
    28da:	0e 94 34 0c 	call	0x1868	; 0x1868 <xQueueGenericSend>
    28de:	09 c0       	rjmp	.+18     	; 0x28f2 <xTimerGenericCommand+0x78>
            }
        }
        else
        {
            xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    28e0:	20 e0       	ldi	r18, 0x00	; 0
    28e2:	ad 01       	movw	r20, r26
    28e4:	be 01       	movw	r22, r28
    28e6:	6f 5f       	subi	r22, 0xFF	; 255
    28e8:	7f 4f       	sbci	r23, 0xFF	; 255
    28ea:	cf 01       	movw	r24, r30
    28ec:	4f d8       	rcall	.-3938   	; 0x198c <xQueueGenericSendFromISR>
    28ee:	01 c0       	rjmp	.+2      	; 0x28f2 <xTimerGenericCommand+0x78>
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
    28f0:	80 e0       	ldi	r24, 0x00	; 0
    {
        mtCOVERAGE_TEST_MARKER();
    }

    return xReturn;
}
    28f2:	0f 90       	pop	r0
    28f4:	0f 90       	pop	r0
    28f6:	0f 90       	pop	r0
    28f8:	0f 90       	pop	r0
    28fa:	0f 90       	pop	r0
    28fc:	df 91       	pop	r29
    28fe:	cf 91       	pop	r28
    2900:	1f 91       	pop	r17
    2902:	0f 91       	pop	r16
    2904:	08 95       	ret

00002906 <prvSampleTimeNow>:
    return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
    2906:	af 92       	push	r10
    2908:	bf 92       	push	r11
    290a:	cf 92       	push	r12
    290c:	df 92       	push	r13
    290e:	ef 92       	push	r14
    2910:	ff 92       	push	r15
    2912:	0f 93       	push	r16
    2914:	1f 93       	push	r17
    2916:	cf 93       	push	r28
    2918:	df 93       	push	r29
    291a:	6c 01       	movw	r12, r24
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

    xTimeNow = xTaskGetTickCount();
    291c:	72 db       	rcall	.-2332   	; 0x2002 <xTaskGetTickCount>
    291e:	7c 01       	movw	r14, r24

    if( xTimeNow < xLastTime )
    2920:	80 91 cf 0a 	lds	r24, 0x0ACF	; 0x800acf <xLastTime.2391>
    2924:	90 91 d0 0a 	lds	r25, 0x0AD0	; 0x800ad0 <xLastTime.2391+0x1>
    2928:	e8 16       	cp	r14, r24
    292a:	f9 06       	cpc	r15, r25
    292c:	08 f0       	brcs	.+2      	; 0x2930 <prvSampleTimeNow+0x2a>
    292e:	47 c0       	rjmp	.+142    	; 0x29be <prvSampleTimeNow+0xb8>
    2930:	2f c0       	rjmp	.+94     	; 0x2990 <prvSampleTimeNow+0x8a>
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    {
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    2932:	05 80       	ldd	r0, Z+5	; 0x05
    2934:	f6 81       	ldd	r31, Z+6	; 0x06
    2936:	e0 2d       	mov	r30, r0
    2938:	a0 80       	ld	r10, Z
    293a:	b1 80       	ldd	r11, Z+1	; 0x01

        /* Remove the timer from the list. */
        pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    293c:	c6 81       	ldd	r28, Z+6	; 0x06
    293e:	d7 81       	ldd	r29, Z+7	; 0x07
        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2940:	8e 01       	movw	r16, r28
    2942:	0e 5f       	subi	r16, 0xFE	; 254
    2944:	1f 4f       	sbci	r17, 0xFF	; 255
    2946:	c8 01       	movw	r24, r16
    2948:	0e 94 77 09 	call	0x12ee	; 0x12ee <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* Execute its callback, then send a command to restart the timer if
        it is an auto-reload timer.  It cannot be restarted here as the lists
        have not yet been switched. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    294c:	e9 89       	ldd	r30, Y+17	; 0x11
    294e:	fa 89       	ldd	r31, Y+18	; 0x12
    2950:	ce 01       	movw	r24, r28
    2952:	19 95       	eicall

        if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    2954:	8e 85       	ldd	r24, Y+14	; 0x0e
    2956:	81 30       	cpi	r24, 0x01	; 1
    2958:	d9 f4       	brne	.+54     	; 0x2990 <prvSampleTimeNow+0x8a>
            the timer going into the same timer list then it has already expired
            and the timer should be re-inserted into the current list so it is
            processed again within this loop.  Otherwise a command should be sent
            to restart the timer to ensure it is only inserted into a list after
            the lists have been swapped. */
            xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    295a:	8c 85       	ldd	r24, Y+12	; 0x0c
    295c:	9d 85       	ldd	r25, Y+13	; 0x0d
    295e:	8a 0d       	add	r24, r10
    2960:	9b 1d       	adc	r25, r11
            if( xReloadTime > xNextExpireTime )
    2962:	a8 16       	cp	r10, r24
    2964:	b9 06       	cpc	r11, r25
    2966:	60 f4       	brcc	.+24     	; 0x2980 <prvSampleTimeNow+0x7a>
            {
                listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    2968:	9b 83       	std	Y+3, r25	; 0x03
    296a:	8a 83       	std	Y+2, r24	; 0x02
                listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    296c:	d9 87       	std	Y+9, r29	; 0x09
    296e:	c8 87       	std	Y+8, r28	; 0x08
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    2970:	b8 01       	movw	r22, r16
    2972:	80 91 d7 0a 	lds	r24, 0x0AD7	; 0x800ad7 <pxCurrentTimerList>
    2976:	90 91 d8 0a 	lds	r25, 0x0AD8	; 0x800ad8 <pxCurrentTimerList+0x1>
    297a:	0e 94 46 09 	call	0x128c	; 0x128c <vListInsert>
    297e:	08 c0       	rjmp	.+16     	; 0x2990 <prvSampleTimeNow+0x8a>
            }
            else
            {
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    2980:	00 e0       	ldi	r16, 0x00	; 0
    2982:	10 e0       	ldi	r17, 0x00	; 0
    2984:	20 e0       	ldi	r18, 0x00	; 0
    2986:	30 e0       	ldi	r19, 0x00	; 0
    2988:	a5 01       	movw	r20, r10
    298a:	60 e0       	ldi	r22, 0x00	; 0
    298c:	ce 01       	movw	r24, r28
    298e:	75 df       	rcall	.-278    	; 0x287a <xTimerGenericCommand>

    /* The tick count has overflowed.  The timer lists must be switched.
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    2990:	e0 91 d7 0a 	lds	r30, 0x0AD7	; 0x800ad7 <pxCurrentTimerList>
    2994:	f0 91 d8 0a 	lds	r31, 0x0AD8	; 0x800ad8 <pxCurrentTimerList+0x1>
    2998:	80 81       	ld	r24, Z
    299a:	81 11       	cpse	r24, r1
    299c:	ca cf       	rjmp	.-108    	; 0x2932 <prvSampleTimeNow+0x2c>
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxTemp = pxCurrentTimerList;
    pxCurrentTimerList = pxOverflowTimerList;
    299e:	80 91 d5 0a 	lds	r24, 0x0AD5	; 0x800ad5 <pxOverflowTimerList>
    29a2:	90 91 d6 0a 	lds	r25, 0x0AD6	; 0x800ad6 <pxOverflowTimerList+0x1>
    29a6:	90 93 d8 0a 	sts	0x0AD8, r25	; 0x800ad8 <pxCurrentTimerList+0x1>
    29aa:	80 93 d7 0a 	sts	0x0AD7, r24	; 0x800ad7 <pxCurrentTimerList>
    pxOverflowTimerList = pxTemp;
    29ae:	f0 93 d6 0a 	sts	0x0AD6, r31	; 0x800ad6 <pxOverflowTimerList+0x1>
    29b2:	e0 93 d5 0a 	sts	0x0AD5, r30	; 0x800ad5 <pxOverflowTimerList>
    xTimeNow = xTaskGetTickCount();

    if( xTimeNow < xLastTime )
    {
        prvSwitchTimerLists();
        *pxTimerListsWereSwitched = pdTRUE;
    29b6:	81 e0       	ldi	r24, 0x01	; 1
    29b8:	f6 01       	movw	r30, r12
    29ba:	80 83       	st	Z, r24
    29bc:	02 c0       	rjmp	.+4      	; 0x29c2 <prvSampleTimeNow+0xbc>
    }
    else
    {
        *pxTimerListsWereSwitched = pdFALSE;
    29be:	f6 01       	movw	r30, r12
    29c0:	10 82       	st	Z, r1
    }

    xLastTime = xTimeNow;
    29c2:	f0 92 d0 0a 	sts	0x0AD0, r15	; 0x800ad0 <xLastTime.2391+0x1>
    29c6:	e0 92 cf 0a 	sts	0x0ACF, r14	; 0x800acf <xLastTime.2391>

    return xTimeNow;
}
    29ca:	c7 01       	movw	r24, r14
    29cc:	df 91       	pop	r29
    29ce:	cf 91       	pop	r28
    29d0:	1f 91       	pop	r17
    29d2:	0f 91       	pop	r16
    29d4:	ff 90       	pop	r15
    29d6:	ef 90       	pop	r14
    29d8:	df 90       	pop	r13
    29da:	cf 90       	pop	r12
    29dc:	bf 90       	pop	r11
    29de:	af 90       	pop	r10
    29e0:	08 95       	ret

000029e2 <prvTimerTask>:
    pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
}
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
    29e2:	cf 93       	push	r28
    29e4:	df 93       	push	r29
    29e6:	00 d0       	rcall	.+0      	; 0x29e8 <prvTimerTask+0x6>
    29e8:	00 d0       	rcall	.+0      	; 0x29ea <prvTimerTask+0x8>
    29ea:	cd b7       	in	r28, 0x3d	; 61
    29ec:	de b7       	in	r29, 0x3e	; 62
        /* Obtain the time now to make an assessment as to whether the timer
        has expired or not.  If obtaining the time causes the lists to switch
        then don't process this timer as any timers that remained in the list
        when the lists were switched will have been processed within the
        prvSampleTimeNow() function. */
        xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    29ee:	ce 01       	movw	r24, r28
    29f0:	01 96       	adiw	r24, 0x01	; 1
    29f2:	4c 01       	movw	r8, r24
                case when the current timer list is empty. */
                if( xListWasEmpty != pdFALSE )
                {
                    /* The current timer list is empty - is the overflow list
                    also empty? */
                    xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    29f4:	44 24       	eor	r4, r4
    29f6:	43 94       	inc	r4
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    }
    else
    {
        /* Ensure the task unblocks when the tick count rolls over. */
        xNextExpireTime = ( TickType_t ) 0U;
    29f8:	e1 2c       	mov	r14, r1
    29fa:	f1 2c       	mov	r15, r1
                case when the current timer list is empty. */
                if( xListWasEmpty != pdFALSE )
                {
                    /* The current timer list is empty - is the overflow list
                    also empty? */
                    xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    29fc:	51 2c       	mov	r5, r1
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

    while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    29fe:	c8 2e       	mov	r12, r24
    2a00:	d9 2c       	mov	r13, r9
    the timer with the nearest expiry time will expire.  If there are no
    active timers then just set the next expire time to 0.  That will cause
    this task to unblock when the tick count overflows, at which point the
    timer lists will be switched and the next expiry time can be
    re-assessed.  */
    *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    2a02:	e0 91 d7 0a 	lds	r30, 0x0AD7	; 0x800ad7 <pxCurrentTimerList>
    2a06:	f0 91 d8 0a 	lds	r31, 0x0AD8	; 0x800ad8 <pxCurrentTimerList+0x1>
    2a0a:	80 81       	ld	r24, Z
    if( *pxListWasEmpty == pdFALSE )
    2a0c:	88 23       	and	r24, r24
    2a0e:	09 f4       	brne	.+2      	; 0x2a12 <prvTimerTask+0x30>
    2a10:	b0 c0       	rjmp	.+352    	; 0x2b72 <prvTimerTask+0x190>
    {
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    2a12:	05 80       	ldd	r0, Z+5	; 0x05
    2a14:	f6 81       	ldd	r31, Z+6	; 0x06
    2a16:	e0 2d       	mov	r30, r0
    2a18:	a0 80       	ld	r10, Z
    2a1a:	b1 80       	ldd	r11, Z+1	; 0x01
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

    vTaskSuspendAll();
    2a1c:	ec da       	rcall	.-2600   	; 0x1ff6 <vTaskSuspendAll>
        /* Obtain the time now to make an assessment as to whether the timer
        has expired or not.  If obtaining the time causes the lists to switch
        then don't process this timer as any timers that remained in the list
        when the lists were switched will have been processed within the
        prvSampleTimeNow() function. */
        xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    2a1e:	c4 01       	movw	r24, r8
    2a20:	72 df       	rcall	.-284    	; 0x2906 <prvSampleTimeNow>
    2a22:	8c 01       	movw	r16, r24
        if( xTimerListsWereSwitched == pdFALSE )
    2a24:	89 81       	ldd	r24, Y+1	; 0x01
    2a26:	81 11       	cpse	r24, r1
    2a28:	42 c0       	rjmp	.+132    	; 0x2aae <prvTimerTask+0xcc>
        {
            /* The tick count has not overflowed, has the timer expired? */
            if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    2a2a:	0a 15       	cp	r16, r10
    2a2c:	1b 05       	cpc	r17, r11
            {
                ( void ) xTaskResumeAll();
    2a2e:	80 f1       	brcs	.+96     	; 0x2a90 <prvTimerTask+0xae>
    2a30:	a9 db       	rcall	.-2222   	; 0x2184 <xTaskResumeAll>
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    2a32:	e0 91 d7 0a 	lds	r30, 0x0AD7	; 0x800ad7 <pxCurrentTimerList>
    2a36:	f0 91 d8 0a 	lds	r31, 0x0AD8	; 0x800ad8 <pxCurrentTimerList+0x1>
    2a3a:	05 80       	ldd	r0, Z+5	; 0x05
    2a3c:	f6 81       	ldd	r31, Z+6	; 0x06
    2a3e:	e0 2d       	mov	r30, r0
    2a40:	66 80       	ldd	r6, Z+6	; 0x06
    2a42:	77 80       	ldd	r7, Z+7	; 0x07

    /* Remove the timer from the list of active timers.  A check has already
    been performed to ensure the list is not empty. */
    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2a44:	c3 01       	movw	r24, r6
    2a46:	02 96       	adiw	r24, 0x02	; 2
    2a48:	0e 94 77 09 	call	0x12ee	; 0x12ee <uxListRemove>
    traceTIMER_EXPIRED( pxTimer );

    /* If the timer is an auto reload timer then calculate the next
    expiry time and re-insert the timer in the list of active timers. */
    if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    2a4c:	d3 01       	movw	r26, r6
    2a4e:	1e 96       	adiw	r26, 0x0e	; 14
    2a50:	8c 91       	ld	r24, X
    2a52:	1e 97       	sbiw	r26, 0x0e	; 14
    2a54:	81 30       	cpi	r24, 0x01	; 1
    2a56:	a1 f4       	brne	.+40     	; 0x2a80 <prvTimerTask+0x9e>
    {
        /* The timer is inserted into a list using a time relative to anything
        other than the current time.  It will therefore be inserted into the
        correct list relative to the time this task thinks it is now. */
        if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    2a58:	1c 96       	adiw	r26, 0x0c	; 12
    2a5a:	6d 91       	ld	r22, X+
    2a5c:	7c 91       	ld	r23, X
    2a5e:	1d 97       	sbiw	r26, 0x0d	; 13
    2a60:	6a 0d       	add	r22, r10
    2a62:	7b 1d       	adc	r23, r11
    2a64:	95 01       	movw	r18, r10
    2a66:	a8 01       	movw	r20, r16
    2a68:	c3 01       	movw	r24, r6
    2a6a:	63 de       	rcall	.-826    	; 0x2732 <prvInsertTimerInActiveList>
    2a6c:	88 23       	and	r24, r24
    2a6e:	41 f0       	breq	.+16     	; 0x2a80 <prvTimerTask+0x9e>
        {
            /* The timer expired before it was added to the active timer
            list.  Reload it now.  */
            xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    2a70:	0e 2d       	mov	r16, r14
    2a72:	1f 2d       	mov	r17, r15
    2a74:	2e 2d       	mov	r18, r14
    2a76:	3f 2d       	mov	r19, r15
    2a78:	a5 01       	movw	r20, r10
    2a7a:	65 2d       	mov	r22, r5
    2a7c:	c3 01       	movw	r24, r6
    2a7e:	fd de       	rcall	.-518    	; 0x287a <xTimerGenericCommand>
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* Call the timer callback. */
    pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2a80:	d3 01       	movw	r26, r6
    2a82:	51 96       	adiw	r26, 0x11	; 17
    2a84:	ed 91       	ld	r30, X+
    2a86:	fc 91       	ld	r31, X
    2a88:	52 97       	sbiw	r26, 0x12	; 18
    2a8a:	c3 01       	movw	r24, r6
    2a8c:	19 95       	eicall
    2a8e:	64 c0       	rjmp	.+200    	; 0x2b58 <prvTimerTask+0x176>
        prvSampleTimeNow() function. */
        xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
        if( xTimerListsWereSwitched == pdFALSE )
        {
            /* The tick count has not overflowed, has the timer expired? */
            if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    2a90:	45 2d       	mov	r20, r5
                    /* The current timer list is empty - is the overflow list
                    also empty? */
                    xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
                }

                vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    2a92:	b5 01       	movw	r22, r10
    2a94:	60 1b       	sub	r22, r16
    2a96:	71 0b       	sbc	r23, r17
    2a98:	80 91 d3 0a 	lds	r24, 0x0AD3	; 0x800ad3 <xTimerQueue>
    2a9c:	90 91 d4 0a 	lds	r25, 0x0AD4	; 0x800ad4 <xTimerQueue+0x1>

                if( xTaskResumeAll() == pdFALSE )
    2aa0:	f1 d8       	rcall	.-3614   	; 0x1c84 <vQueueWaitForMessageRestricted>
    2aa2:	70 db       	rcall	.-2336   	; 0x2184 <xTaskResumeAll>
    2aa4:	81 11       	cpse	r24, r1
                {
                    /* Yield to wait for either a command to arrive, or the
                    block time to expire.  If a command arrived between the
                    critical section being exited and this yield then the yield
                    will not cause the task to block. */
                    portYIELD_WITHIN_API();
    2aa6:	58 c0       	rjmp	.+176    	; 0x2b58 <prvTimerTask+0x176>
    2aa8:	0e 94 4c 0a 	call	0x1498	; 0x1498 <vPortYield>
                }
            }
        }
        else
        {
            ( void ) xTaskResumeAll();
    2aac:	55 c0       	rjmp	.+170    	; 0x2b58 <prvTimerTask+0x176>
    2aae:	6a db       	rcall	.-2348   	; 0x2184 <xTaskResumeAll>
    2ab0:	53 c0       	rjmp	.+166    	; 0x2b58 <prvTimerTask+0x176>
        }
        #endif /* INCLUDE_xTimerPendFunctionCall */

        /* Commands that are positive are timer commands rather than pended
        function calls. */
        if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    2ab2:	89 81       	ldd	r24, Y+1	; 0x01
    2ab4:	88 23       	and	r24, r24
    2ab6:	0c f4       	brge	.+2      	; 0x2aba <prvTimerTask+0xd8>
    2ab8:	4f c0       	rjmp	.+158    	; 0x2b58 <prvTimerTask+0x176>
        {
            /* The messages uses the xTimerParameters member to work on a
            software timer. */
            pxTimer = xMessage.u.xTimerParameters.pxTimer;
    2aba:	ac 80       	ldd	r10, Y+4	; 0x04
    2abc:	bd 80       	ldd	r11, Y+5	; 0x05

        if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    2abe:	f5 01       	movw	r30, r10
    2ac0:	82 85       	ldd	r24, Z+10	; 0x0a
    2ac2:	93 85       	ldd	r25, Z+11	; 0x0b
    2ac4:	89 2b       	or	r24, r25
            {
                /* The timer is in a list, remove it. */
                ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2ac6:	21 f0       	breq	.+8      	; 0x2ad0 <prvTimerTask+0xee>
    2ac8:	c5 01       	movw	r24, r10
    2aca:	02 96       	adiw	r24, 0x02	; 2
    2acc:	0e 94 77 09 	call	0x12ee	; 0x12ee <uxListRemove>
            it must be present in the function call.  prvSampleTimeNow() must be
            called after the message is received from xTimerQueue so there is no
            possibility of a higher priority task adding a message to the message
            queue with a time that is ahead of the timer daemon task (because it
            pre-empted the timer daemon task after the xTimeNow value was set). */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    2ad0:	ce 01       	movw	r24, r28
    2ad2:	06 96       	adiw	r24, 0x06	; 6
    2ad4:	18 df       	rcall	.-464    	; 0x2906 <prvSampleTimeNow>
    2ad6:	ac 01       	movw	r20, r24

            switch( xMessage.xMessageID )
    2ad8:	99 81       	ldd	r25, Y+1	; 0x01
    2ada:	94 30       	cpi	r25, 0x04	; 4
    2adc:	89 f1       	breq	.+98     	; 0x2b40 <prvTimerTask+0x15e>
    2ade:	1c f4       	brge	.+6      	; 0x2ae6 <prvTimerTask+0x104>
    2ae0:	93 30       	cpi	r25, 0x03	; 3
    2ae2:	d0 f5       	brcc	.+116    	; 0x2b58 <prvTimerTask+0x176>
    2ae4:	07 c0       	rjmp	.+14     	; 0x2af4 <prvTimerTask+0x112>
    2ae6:	96 30       	cpi	r25, 0x06	; 6
    2ae8:	bc f1       	brlt	.+110    	; 0x2b58 <prvTimerTask+0x176>
    2aea:	98 30       	cpi	r25, 0x08	; 8
    2aec:	1c f0       	brlt	.+6      	; 0x2af4 <prvTimerTask+0x112>
    2aee:	99 30       	cpi	r25, 0x09	; 9
    2af0:	39 f1       	breq	.+78     	; 0x2b40 <prvTimerTask+0x15e>
    2af2:	32 c0       	rjmp	.+100    	; 0x2b58 <prvTimerTask+0x176>
                case tmrCOMMAND_START_FROM_ISR :
                case tmrCOMMAND_RESET :
                case tmrCOMMAND_RESET_FROM_ISR :
                case tmrCOMMAND_START_DONT_TRACE :
                    /* Start or restart a timer. */
                    if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    2af4:	2a 81       	ldd	r18, Y+2	; 0x02
    2af6:	3b 81       	ldd	r19, Y+3	; 0x03
    2af8:	d5 01       	movw	r26, r10
    2afa:	1c 96       	adiw	r26, 0x0c	; 12
    2afc:	6d 91       	ld	r22, X+
    2afe:	7c 91       	ld	r23, X
    2b00:	1d 97       	sbiw	r26, 0x0d	; 13
    2b02:	62 0f       	add	r22, r18
    2b04:	73 1f       	adc	r23, r19
    2b06:	c5 01       	movw	r24, r10
    2b08:	14 de       	rcall	.-984    	; 0x2732 <prvInsertTimerInActiveList>
    2b0a:	88 23       	and	r24, r24
    2b0c:	29 f1       	breq	.+74     	; 0x2b58 <prvTimerTask+0x176>
                    {
                        /* The timer expired before it was added to the active
                        timer list.  Process it now. */
                        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2b0e:	d5 01       	movw	r26, r10
    2b10:	51 96       	adiw	r26, 0x11	; 17
    2b12:	ed 91       	ld	r30, X+
    2b14:	fc 91       	ld	r31, X
    2b16:	52 97       	sbiw	r26, 0x12	; 18
    2b18:	c5 01       	movw	r24, r10
    2b1a:	19 95       	eicall
                        traceTIMER_EXPIRED( pxTimer );

                        if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    2b1c:	f5 01       	movw	r30, r10
    2b1e:	86 85       	ldd	r24, Z+14	; 0x0e
    2b20:	81 30       	cpi	r24, 0x01	; 1
    2b22:	d1 f4       	brne	.+52     	; 0x2b58 <prvTimerTask+0x176>
                        {
                            xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    2b24:	4a 81       	ldd	r20, Y+2	; 0x02
    2b26:	5b 81       	ldd	r21, Y+3	; 0x03
    2b28:	84 85       	ldd	r24, Z+12	; 0x0c
    2b2a:	95 85       	ldd	r25, Z+13	; 0x0d
    2b2c:	48 0f       	add	r20, r24
    2b2e:	59 1f       	adc	r21, r25
    2b30:	0e 2d       	mov	r16, r14
    2b32:	1f 2d       	mov	r17, r15
    2b34:	2e 2d       	mov	r18, r14
    2b36:	3f 2d       	mov	r19, r15
    2b38:	65 2d       	mov	r22, r5
    2b3a:	c5 01       	movw	r24, r10
    2b3c:	9e de       	rcall	.-708    	; 0x287a <xTimerGenericCommand>
    2b3e:	0c c0       	rjmp	.+24     	; 0x2b58 <prvTimerTask+0x176>
                    There is nothing to do here. */
                    break;

                case tmrCOMMAND_CHANGE_PERIOD :
                case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
                    pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    2b40:	6a 81       	ldd	r22, Y+2	; 0x02
    2b42:	7b 81       	ldd	r23, Y+3	; 0x03
    2b44:	d5 01       	movw	r26, r10
    2b46:	1d 96       	adiw	r26, 0x0d	; 13
    2b48:	7c 93       	st	X, r23
    2b4a:	6e 93       	st	-X, r22
                    be longer or shorter than the old one.  The command time is
                    therefore set to the current time, and as the period cannot
                    be zero the next expiry time can only be in the future,
                    meaning (unlike for the xTimerStart() case above) there is
                    no fail case that needs to be handled here. */
                    ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    2b4c:	1c 97       	sbiw	r26, 0x0c	; 12
    2b4e:	64 0f       	add	r22, r20
    2b50:	75 1f       	adc	r23, r21
    2b52:	9a 01       	movw	r18, r20
    2b54:	c5 01       	movw	r24, r10
    2b56:	ed dd       	rcall	.-1062   	; 0x2732 <prvInsertTimerInActiveList>
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

    while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    2b58:	4e 2d       	mov	r20, r14
    2b5a:	5f 2d       	mov	r21, r15
    2b5c:	6c 2d       	mov	r22, r12
    2b5e:	7d 2d       	mov	r23, r13
    2b60:	80 91 d3 0a 	lds	r24, 0x0AD3	; 0x800ad3 <xTimerQueue>
    2b64:	90 91 d4 0a 	lds	r25, 0x0AD4	; 0x800ad4 <xTimerQueue+0x1>
    2b68:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <xQueueReceive>
    2b6c:	81 11       	cpse	r24, r1
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

    vTaskSuspendAll();
    2b6e:	a1 cf       	rjmp	.-190    	; 0x2ab2 <prvTimerTask+0xd0>
    2b70:	48 cf       	rjmp	.-368    	; 0x2a02 <prvTimerTask+0x20>
        /* Obtain the time now to make an assessment as to whether the timer
        has expired or not.  If obtaining the time causes the lists to switch
        then don't process this timer as any timers that remained in the list
        when the lists were switched will have been processed within the
        prvSampleTimeNow() function. */
        xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    2b72:	41 da       	rcall	.-2942   	; 0x1ff6 <vTaskSuspendAll>
    2b74:	c4 01       	movw	r24, r8
    2b76:	c7 de       	rcall	.-626    	; 0x2906 <prvSampleTimeNow>
    2b78:	8c 01       	movw	r16, r24
        if( xTimerListsWereSwitched == pdFALSE )
    2b7a:	89 81       	ldd	r24, Y+1	; 0x01
    2b7c:	81 11       	cpse	r24, r1
    2b7e:	97 cf       	rjmp	.-210    	; 0x2aae <prvTimerTask+0xcc>
                case when the current timer list is empty. */
                if( xListWasEmpty != pdFALSE )
                {
                    /* The current timer list is empty - is the overflow list
                    also empty? */
                    xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    2b80:	e0 91 d5 0a 	lds	r30, 0x0AD5	; 0x800ad5 <pxOverflowTimerList>
    2b84:	f0 91 d6 0a 	lds	r31, 0x0AD6	; 0x800ad6 <pxOverflowTimerList+0x1>
    2b88:	80 81       	ld	r24, Z
    2b8a:	44 2d       	mov	r20, r4
    2b8c:	81 11       	cpse	r24, r1
    2b8e:	45 2d       	mov	r20, r5
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    }
    else
    {
        /* Ensure the task unblocks when the tick count rolls over. */
        xNextExpireTime = ( TickType_t ) 0U;
    2b90:	ae 2c       	mov	r10, r14
    2b92:	bf 2c       	mov	r11, r15
    2b94:	7e cf       	rjmp	.-260    	; 0x2a92 <prvTimerTask+0xb0>

00002b96 <System_init>:


gSystemError System_init(void){
	
	gSystemError res=E_OK;
	DIO_init();
    2b96:	0e 94 dd 03 	call	0x7ba	; 0x7ba <DIO_init>
	millis_init();	
    2b9a:	0c d0       	rcall	.+24     	; 0x2bb4 <millis_init>
	Lcd_init(UART3,115200,1);
    2b9c:	21 e0       	ldi	r18, 0x01	; 1
    2b9e:	40 e0       	ldi	r20, 0x00	; 0
    2ba0:	52 ec       	ldi	r21, 0xC2	; 194
    2ba2:	61 e0       	ldi	r22, 0x01	; 1
    2ba4:	70 e0       	ldi	r23, 0x00	; 0
    2ba6:	83 e0       	ldi	r24, 0x03	; 3
    2ba8:	0e 94 30 02 	call	0x460	; 0x460 <Lcd_init>
	RTE_init();
    2bac:	0e 94 92 08 	call	0x1124	; 0x1124 <RTE_init>
	return res;

    2bb0:	80 e0       	ldi	r24, 0x00	; 0
    2bb2:	08 95       	ret

00002bb4 <millis_init>:

//init the timer on ctc mode to calvulate millis
void millis_init()
{
	//CTC mode
	TIMER2_CONGFIG_A = 0x02;
    2bb4:	82 e0       	ldi	r24, 0x02	; 2
    2bb6:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
	// Clock/64
	TIMER2_CONGFIG_B = 0x04;
    2bba:	84 e0       	ldi	r24, 0x04	; 4
    2bbc:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7000b1>
    // Load into the output compare
    TIMER2_COMPARE = CTC_MATCH_OVERFLOW;
    2bc0:	8a ef       	ldi	r24, 0xFA	; 250
    2bc2:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7000b3>
    // Enable the compare match interrupt
    SET_BIT(TIMER2_INTERUPT, TIMER2_COMPARE_INT);
    2bc6:	e0 e7       	ldi	r30, 0x70	; 112
    2bc8:	f0 e0       	ldi	r31, 0x00	; 0
    2bca:	80 81       	ld	r24, Z
    2bcc:	82 60       	ori	r24, 0x02	; 2
    2bce:	80 83       	st	Z, r24
    2bd0:	08 95       	ret

00002bd2 <Get_millis>:
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2bd2:	f8 94       	cli
    unsigned long millis_return;

    // Ensure this cannot be disrupted
    ATOMIC_BLOCK(ATOMIC_FORCEON) {
    	// copy the ISR counter
        millis_return = timer1_millis;
    2bd4:	60 91 f7 0c 	lds	r22, 0x0CF7	; 0x800cf7 <timer1_millis>
    2bd8:	70 91 f8 0c 	lds	r23, 0x0CF8	; 0x800cf8 <timer1_millis+0x1>
    2bdc:	80 91 f9 0c 	lds	r24, 0x0CF9	; 0x800cf9 <timer1_millis+0x2>
    2be0:	90 91 fa 0c 	lds	r25, 0x0CFA	; 0x800cfa <timer1_millis+0x3>
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
    2be4:	78 94       	sei
    }

    return millis_return;
}//Get_millis
    2be6:	08 95       	ret

00002be8 <__vector_13>:



ISR (TIMER2_COMPA_vect)
{
    2be8:	1f 92       	push	r1
    2bea:	0f 92       	push	r0
    2bec:	0f b6       	in	r0, 0x3f	; 63
    2bee:	0f 92       	push	r0
    2bf0:	11 24       	eor	r1, r1
    2bf2:	8f 93       	push	r24
    2bf4:	9f 93       	push	r25
    2bf6:	af 93       	push	r26
    2bf8:	bf 93       	push	r27
	//MILLI SEC
    timer1_millis++;
    2bfa:	80 91 f7 0c 	lds	r24, 0x0CF7	; 0x800cf7 <timer1_millis>
    2bfe:	90 91 f8 0c 	lds	r25, 0x0CF8	; 0x800cf8 <timer1_millis+0x1>
    2c02:	a0 91 f9 0c 	lds	r26, 0x0CF9	; 0x800cf9 <timer1_millis+0x2>
    2c06:	b0 91 fa 0c 	lds	r27, 0x0CFA	; 0x800cfa <timer1_millis+0x3>
    2c0a:	01 96       	adiw	r24, 0x01	; 1
    2c0c:	a1 1d       	adc	r26, r1
    2c0e:	b1 1d       	adc	r27, r1
    2c10:	80 93 f7 0c 	sts	0x0CF7, r24	; 0x800cf7 <timer1_millis>
    2c14:	90 93 f8 0c 	sts	0x0CF8, r25	; 0x800cf8 <timer1_millis+0x1>
    2c18:	a0 93 f9 0c 	sts	0x0CF9, r26	; 0x800cf9 <timer1_millis+0x2>
    2c1c:	b0 93 fa 0c 	sts	0x0CFA, r27	; 0x800cfa <timer1_millis+0x3>
}//ISR
    2c20:	bf 91       	pop	r27
    2c22:	af 91       	pop	r26
    2c24:	9f 91       	pop	r25
    2c26:	8f 91       	pop	r24
    2c28:	0f 90       	pop	r0
    2c2a:	0f be       	out	0x3f, r0	; 63
    2c2c:	0f 90       	pop	r0
    2c2e:	1f 90       	pop	r1
    2c30:	18 95       	reti

00002c32 <__udivmodsi4>:
    2c32:	a1 e2       	ldi	r26, 0x21	; 33
    2c34:	1a 2e       	mov	r1, r26
    2c36:	aa 1b       	sub	r26, r26
    2c38:	bb 1b       	sub	r27, r27
    2c3a:	fd 01       	movw	r30, r26
    2c3c:	0d c0       	rjmp	.+26     	; 0x2c58 <__udivmodsi4_ep>

00002c3e <__udivmodsi4_loop>:
    2c3e:	aa 1f       	adc	r26, r26
    2c40:	bb 1f       	adc	r27, r27
    2c42:	ee 1f       	adc	r30, r30
    2c44:	ff 1f       	adc	r31, r31
    2c46:	a2 17       	cp	r26, r18
    2c48:	b3 07       	cpc	r27, r19
    2c4a:	e4 07       	cpc	r30, r20
    2c4c:	f5 07       	cpc	r31, r21
    2c4e:	20 f0       	brcs	.+8      	; 0x2c58 <__udivmodsi4_ep>
    2c50:	a2 1b       	sub	r26, r18
    2c52:	b3 0b       	sbc	r27, r19
    2c54:	e4 0b       	sbc	r30, r20
    2c56:	f5 0b       	sbc	r31, r21

00002c58 <__udivmodsi4_ep>:
    2c58:	66 1f       	adc	r22, r22
    2c5a:	77 1f       	adc	r23, r23
    2c5c:	88 1f       	adc	r24, r24
    2c5e:	99 1f       	adc	r25, r25
    2c60:	1a 94       	dec	r1
    2c62:	69 f7       	brne	.-38     	; 0x2c3e <__udivmodsi4_loop>
    2c64:	60 95       	com	r22
    2c66:	70 95       	com	r23
    2c68:	80 95       	com	r24
    2c6a:	90 95       	com	r25
    2c6c:	9b 01       	movw	r18, r22
    2c6e:	ac 01       	movw	r20, r24
    2c70:	bd 01       	movw	r22, r26
    2c72:	cf 01       	movw	r24, r30
    2c74:	08 95       	ret

00002c76 <memcpy>:
    2c76:	fb 01       	movw	r30, r22
    2c78:	dc 01       	movw	r26, r24
    2c7a:	02 c0       	rjmp	.+4      	; 0x2c80 <memcpy+0xa>
    2c7c:	01 90       	ld	r0, Z+
    2c7e:	0d 92       	st	X+, r0
    2c80:	41 50       	subi	r20, 0x01	; 1
    2c82:	50 40       	sbci	r21, 0x00	; 0
    2c84:	d8 f7       	brcc	.-10     	; 0x2c7c <memcpy+0x6>
    2c86:	08 95       	ret

00002c88 <memset>:
    2c88:	dc 01       	movw	r26, r24
    2c8a:	01 c0       	rjmp	.+2      	; 0x2c8e <memset+0x6>
    2c8c:	6d 93       	st	X+, r22
    2c8e:	41 50       	subi	r20, 0x01	; 1
    2c90:	50 40       	sbci	r21, 0x00	; 0
    2c92:	e0 f7       	brcc	.-8      	; 0x2c8c <memset+0x4>
    2c94:	08 95       	ret

00002c96 <_exit>:
    2c96:	f8 94       	cli

00002c98 <__stop_program>:
    2c98:	ff cf       	rjmp	.-2      	; 0x2c98 <__stop_program>
