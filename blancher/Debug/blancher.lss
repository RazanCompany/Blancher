
blancher.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000b2  00800200  00003496  0000352a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003496  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000009a9  008002b2  008002b2  000035dc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000035dc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000360c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000b58  00000000  00000000  0000364c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000bc75  00000000  00000000  000041a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000032d2  00000000  00000000  0000fe19  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000adcc  00000000  00000000  000130eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001ca4  00000000  00000000  0001deb8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00018d72  00000000  00000000  0001fb5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00008ef6  00000000  00000000  000388ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000b28  00000000  00000000  000417c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00005c2d  00000000  00000000  000422ec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
       2:	00 00       	nop
       4:	90 c0       	rjmp	.+288    	; 0x126 <__bad_interrupt>
       6:	00 00       	nop
       8:	8e c0       	rjmp	.+284    	; 0x126 <__bad_interrupt>
       a:	00 00       	nop
       c:	8c c0       	rjmp	.+280    	; 0x126 <__bad_interrupt>
       e:	00 00       	nop
      10:	8a c0       	rjmp	.+276    	; 0x126 <__bad_interrupt>
      12:	00 00       	nop
      14:	88 c0       	rjmp	.+272    	; 0x126 <__bad_interrupt>
      16:	00 00       	nop
      18:	86 c0       	rjmp	.+268    	; 0x126 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	84 c0       	rjmp	.+264    	; 0x126 <__bad_interrupt>
      1e:	00 00       	nop
      20:	82 c0       	rjmp	.+260    	; 0x126 <__bad_interrupt>
      22:	00 00       	nop
      24:	80 c0       	rjmp	.+256    	; 0x126 <__bad_interrupt>
      26:	00 00       	nop
      28:	7e c0       	rjmp	.+252    	; 0x126 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7c c0       	rjmp	.+248    	; 0x126 <__bad_interrupt>
      2e:	00 00       	nop
      30:	0c 94 b6 12 	jmp	0x256c	; 0x256c <__vector_12>
      34:	0c 94 d4 17 	jmp	0x2fa8	; 0x2fa8 <__vector_13>
      38:	76 c0       	rjmp	.+236    	; 0x126 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	74 c0       	rjmp	.+232    	; 0x126 <__bad_interrupt>
      3e:	00 00       	nop
      40:	72 c0       	rjmp	.+228    	; 0x126 <__bad_interrupt>
      42:	00 00       	nop
      44:	0c 94 a4 0a 	jmp	0x1548	; 0x1548 <__vector_17>
      48:	6e c0       	rjmp	.+220    	; 0x126 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6c c0       	rjmp	.+216    	; 0x126 <__bad_interrupt>
      4e:	00 00       	nop
      50:	6a c0       	rjmp	.+212    	; 0x126 <__bad_interrupt>
      52:	00 00       	nop
      54:	68 c0       	rjmp	.+208    	; 0x126 <__bad_interrupt>
      56:	00 00       	nop
      58:	66 c0       	rjmp	.+204    	; 0x126 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	64 c0       	rjmp	.+200    	; 0x126 <__bad_interrupt>
      5e:	00 00       	nop
      60:	62 c0       	rjmp	.+196    	; 0x126 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 66 0c 	jmp	0x18cc	; 0x18cc <__vector_25>
      68:	0c 94 9f 0c 	jmp	0x193e	; 0x193e <__vector_26>
      6c:	5c c0       	rjmp	.+184    	; 0x126 <__bad_interrupt>
      6e:	00 00       	nop
      70:	5a c0       	rjmp	.+180    	; 0x126 <__bad_interrupt>
      72:	00 00       	nop
      74:	0c 94 d0 09 	jmp	0x13a0	; 0x13a0 <__vector_29>
      78:	56 c0       	rjmp	.+172    	; 0x126 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	54 c0       	rjmp	.+168    	; 0x126 <__bad_interrupt>
      7e:	00 00       	nop
      80:	0c 94 14 0b 	jmp	0x1628	; 0x1628 <__vector_32>
      84:	50 c0       	rjmp	.+160    	; 0x126 <__bad_interrupt>
      86:	00 00       	nop
      88:	4e c0       	rjmp	.+156    	; 0x126 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	4c c0       	rjmp	.+152    	; 0x126 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 50 0d 	jmp	0x1aa0	; 0x1aa0 <__vector_36>
      94:	0c 94 89 0d 	jmp	0x1b12	; 0x1b12 <__vector_37>
      98:	46 c0       	rjmp	.+140    	; 0x126 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	44 c0       	rjmp	.+136    	; 0x126 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	42 c0       	rjmp	.+132    	; 0x126 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	40 c0       	rjmp	.+128    	; 0x126 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	0c 94 84 0b 	jmp	0x1708	; 0x1708 <__vector_42>
      ac:	3c c0       	rjmp	.+120    	; 0x126 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	3a c0       	rjmp	.+116    	; 0x126 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	38 c0       	rjmp	.+112    	; 0x126 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	36 c0       	rjmp	.+108    	; 0x126 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	0c 94 f4 0b 	jmp	0x17e8	; 0x17e8 <__vector_47>
      c0:	32 c0       	rjmp	.+100    	; 0x126 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	30 c0       	rjmp	.+96     	; 0x126 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	2e c0       	rjmp	.+92     	; 0x126 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 5f 0e 	jmp	0x1cbe	; 0x1cbe <__vector_51>
      d0:	0c 94 98 0e 	jmp	0x1d30	; 0x1d30 <__vector_52>
      d4:	28 c0       	rjmp	.+80     	; 0x126 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 6b 0f 	jmp	0x1ed6	; 0x1ed6 <__vector_54>
      dc:	0c 94 a4 0f 	jmp	0x1f48	; 0x1f48 <__vector_55>
      e0:	22 c0       	rjmp	.+68     	; 0x126 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e6 e9       	ldi	r30, 0x96	; 150
      fc:	f4 e3       	ldi	r31, 0x34	; 52
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a2 3b       	cpi	r26, 0xB2	; 178
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	2c e0       	ldi	r18, 0x0C	; 12
     110:	a2 eb       	ldi	r26, 0xB2	; 178
     112:	b2 e0       	ldi	r27, 0x02	; 2
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	ab 35       	cpi	r26, 0x5B	; 91
     11a:	b2 07       	cpc	r27, r18
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	0e 94 ac 09 	call	0x1358	; 0x1358 <main>
     122:	0c 94 49 1a 	jmp	0x3492	; 0x3492 <_exit>

00000126 <__bad_interrupt>:
     126:	6c cf       	rjmp	.-296    	; 0x0 <__vectors>

00000128 <Set_drum_time_callback>:
	Encoder_init(Set_drum_time_callback, 5, 16);
	
}
static void Set_drum_time_callback(uint32_t dif_time)
{
	g_drum_time = dif_time;
     128:	60 93 f0 0b 	sts	0x0BF0, r22	; 0x800bf0 <g_drum_time>
     12c:	70 93 f1 0b 	sts	0x0BF1, r23	; 0x800bf1 <g_drum_time+0x1>
     130:	80 93 f2 0b 	sts	0x0BF2, r24	; 0x800bf2 <g_drum_time+0x2>
     134:	90 93 f3 0b 	sts	0x0BF3, r25	; 0x800bf3 <g_drum_time+0x3>
     138:	08 95       	ret

0000013a <Drum_speed_init>:
 * call back function
 * parameters@ difference time between every ISR For Drum
 * return@ Nothing
 */
void Drum_speed_init(void){
	Encoder_init(Set_drum_time_callback, 5, 16);
     13a:	40 e1       	ldi	r20, 0x10	; 16
     13c:	50 e0       	ldi	r21, 0x00	; 0
     13e:	65 e0       	ldi	r22, 0x05	; 5
     140:	84 e9       	ldi	r24, 0x94	; 148
     142:	90 e0       	ldi	r25, 0x00	; 0
     144:	01 c0       	rjmp	.+2      	; 0x148 <Encoder_init>
     146:	08 95       	ret

00000148 <Encoder_init>:
 */

void Encoder_init(void (*pISR_callback)(uint32_t),uint8_t timer_number,uint16_t ticks_number )
{
	//encoder of Drum on timer 5
	Encoder_1_confg.timer_number = timer_number;
     148:	e4 ef       	ldi	r30, 0xF4	; 244
     14a:	fb e0       	ldi	r31, 0x0B	; 11
     14c:	64 83       	std	Z+4, r22	; 0x04
	// number of ticks 16 to interrupted
	Encoder_1_confg.ticks = ticks_number;
     14e:	51 83       	std	Z+1, r21	; 0x01
     150:	40 83       	st	Z, r20
	//Call back Function 
	Encoder_1_confg.isr_call_back = pISR_callback ; 
     152:	93 83       	std	Z+3, r25	; 0x03
     154:	82 83       	std	Z+2, r24	; 0x02
    timers_init(&Encoder_1_confg);
     156:	cf 01       	movw	r24, r30
     158:	0c 94 3c 0a 	jmp	0x1478	; 0x1478 <timers_init>
     15c:	08 95       	ret

0000015e <flowrate_feeding_callback>:
{
	/*
	*	this function is called back from the isr to increment the liters counter .
	*/
  // call the feeding operation callback .
     feeding_operation_callback();
     15e:	e0 91 f9 0b 	lds	r30, 0x0BF9	; 0x800bf9 <feeding_operation_callback>
     162:	f0 91 fa 0b 	lds	r31, 0x0BFA	; 0x800bfa <feeding_operation_callback+0x1>
     166:	19 95       	eicall
     168:	08 95       	ret

0000016a <flowrate_outing_callback>:
{
	/*
	*	this function is called back from the isr to increment the liters counter .
	*/
  // call the feeding operation callback .
     out_operation_callback();
     16a:	e0 91 fb 0b 	lds	r30, 0x0BFB	; 0x800bfb <out_operation_callback>
     16e:	f0 91 fc 0b 	lds	r31, 0x0BFC	; 0x800bfc <out_operation_callback+0x1>
     172:	19 95       	eicall
     174:	08 95       	ret

00000176 <Flow_rate_init>:
// structs to hold the timers config .
g_Timer_Config feeding_configeration;
g_Timer_Config outing_configeration;

void Flow_rate_init(void (*callback1)(void) , void (*callback2)(void)) 
{
     176:	cf 92       	push	r12
     178:	df 92       	push	r13
     17a:	ef 92       	push	r14
     17c:	ff 92       	push	r15
     17e:	0f 93       	push	r16
     180:	1f 93       	push	r17
     182:	cf 93       	push	r28
     184:	df 93       	push	r29
     186:	6c 01       	movw	r12, r24
     188:	7b 01       	movw	r14, r22
	
	feeding_configeration.ticks = TICKS_FOR_HALF_LITER ;
     18a:	c2 e0       	ldi	r28, 0x02	; 2
     18c:	dc e0       	ldi	r29, 0x0C	; 12
     18e:	00 ef       	ldi	r16, 0xF0	; 240
     190:	10 e0       	ldi	r17, 0x00	; 0
     192:	19 83       	std	Y+1, r17	; 0x01
     194:	08 83       	st	Y, r16
	feeding_configeration.timer_number = 1 ;
     196:	81 e0       	ldi	r24, 0x01	; 1
     198:	8c 83       	std	Y+4, r24	; 0x04
	feeding_configeration.isr_call_back = flowrate_feeding_callback ;
     19a:	8f ea       	ldi	r24, 0xAF	; 175
     19c:	90 e0       	ldi	r25, 0x00	; 0
     19e:	9b 83       	std	Y+3, r25	; 0x03
     1a0:	8a 83       	std	Y+2, r24	; 0x02
	
	// initialize the needed timer with the previous config .
    timers_init(&feeding_configeration);
     1a2:	ce 01       	movw	r24, r28
     1a4:	0e 94 3c 0a 	call	0x1478	; 0x1478 <timers_init>
	
	// initialize other timer for the second flow rate .
	feeding_configeration.ticks = TICKS_FOR_HALF_LITER ;
     1a8:	19 83       	std	Y+1, r17	; 0x01
     1aa:	08 83       	st	Y, r16
	feeding_configeration.timer_number = 3 ;
     1ac:	83 e0       	ldi	r24, 0x03	; 3
     1ae:	8c 83       	std	Y+4, r24	; 0x04
	feeding_configeration.isr_call_back = flowrate_outing_callback ;
     1b0:	85 eb       	ldi	r24, 0xB5	; 181
     1b2:	90 e0       	ldi	r25, 0x00	; 0
     1b4:	9b 83       	std	Y+3, r25	; 0x03
     1b6:	8a 83       	std	Y+2, r24	; 0x02
	
	// initialize the needed timer with the previous config .
	timers_init(&outing_configeration);
     1b8:	8d ef       	ldi	r24, 0xFD	; 253
     1ba:	9b e0       	ldi	r25, 0x0B	; 11
     1bc:	0e 94 3c 0a 	call	0x1478	; 0x1478 <timers_init>
	feeding_operation_callback = callback1;
     1c0:	d0 92 fa 0b 	sts	0x0BFA, r13	; 0x800bfa <feeding_operation_callback+0x1>
     1c4:	c0 92 f9 0b 	sts	0x0BF9, r12	; 0x800bf9 <feeding_operation_callback>
	out_operation_callback = callback2 ;
     1c8:	f0 92 fc 0b 	sts	0x0BFC, r15	; 0x800bfc <out_operation_callback+0x1>
     1cc:	e0 92 fb 0b 	sts	0x0BFB, r14	; 0x800bfb <out_operation_callback>
	DIO_init();
     1d0:	0e 94 ed 09 	call	0x13da	; 0x13da <DIO_init>
}
     1d4:	df 91       	pop	r29
     1d6:	cf 91       	pop	r28
     1d8:	1f 91       	pop	r17
     1da:	0f 91       	pop	r16
     1dc:	ff 90       	pop	r15
     1de:	ef 90       	pop	r14
     1e0:	df 90       	pop	r13
     1e2:	cf 90       	pop	r12
     1e4:	08 95       	ret

000001e6 <Inverter_pre_transmition>:
 * set the enable pin for modbus to start send
 * parameters  Nothing
 * return Nothing
 */
void Inverter_pre_transmition(void) {
	Modbus_change_state(INVERTER, HIGH);
     1e6:	61 e0       	ldi	r22, 0x01	; 1
     1e8:	81 e0       	ldi	r24, 0x01	; 1
     1ea:	0c 94 1f 0a 	jmp	0x143e	; 0x143e <Modbus_change_state>
     1ee:	08 95       	ret

000001f0 <Inverter_post_transmition>:
 * Clear the enable pin for modbus to start send
 * parameters  Nothing
 * return Nothing
 */
void Inverter_post_transmition(void) {
	Modbus_change_state(INVERTER, LOW);
     1f0:	60 e0       	ldi	r22, 0x00	; 0
     1f2:	81 e0       	ldi	r24, 0x01	; 1
     1f4:	0c 94 1f 0a 	jmp	0x143e	; 0x143e <Modbus_change_state>
     1f8:	08 95       	ret

000001fa <Inverter_init>:
 */
void Inverter_init( UART_Modules uart_n, uint32_t baudrate, uint8_t slave_id )
{
	
	// Modbus Parameters
	s_inv_mod_confg.uart_num = uart_n;
     1fa:	e2 eb       	ldi	r30, 0xB2	; 178
     1fc:	f2 e0       	ldi	r31, 0x02	; 2
     1fe:	81 83       	std	Z+1, r24	; 0x01
	s_inv_mod_confg.baud_rate =  baudrate;
     200:	42 83       	std	Z+2, r20	; 0x02
     202:	53 83       	std	Z+3, r21	; 0x03
     204:	64 83       	std	Z+4, r22	; 0x04
     206:	75 83       	std	Z+5, r23	; 0x05
	s_inv_mod_confg.slave_address = slave_id;
     208:	20 83       	st	Z, r18
	s_inv_mod_confg.post_transmission = Inverter_post_transmition;
     20a:	88 ef       	ldi	r24, 0xF8	; 248
     20c:	90 e0       	ldi	r25, 0x00	; 0
     20e:	91 87       	std	Z+9, r25	; 0x09
     210:	80 87       	std	Z+8, r24	; 0x08
	s_inv_mod_confg.pre_transmission = Inverter_pre_transmition;
     212:	83 ef       	ldi	r24, 0xF3	; 243
     214:	90 e0       	ldi	r25, 0x00	; 0
     216:	97 83       	std	Z+7, r25	; 0x07
     218:	86 83       	std	Z+6, r24	; 0x06

	// init the mod bus on Mod Bus
	Modbus_init(INVERTER, &s_inv_mod_confg);
     21a:	bf 01       	movw	r22, r30
     21c:	81 e0       	ldi	r24, 0x01	; 1
     21e:	67 c7       	rjmp	.+3790   	; 0x10ee <Modbus_init>
     220:	08 95       	ret

00000222 <Inverter_set_Freq>:
 * return Nothing
 */


void Inverter_set_Freq(g_Inveter_Config *In_cofig )
{
     222:	6f 92       	push	r6
     224:	7f 92       	push	r7
     226:	8f 92       	push	r8
     228:	9f 92       	push	r9
     22a:	af 92       	push	r10
     22c:	bf 92       	push	r11
     22e:	cf 92       	push	r12
     230:	df 92       	push	r13
     232:	ef 92       	push	r14
     234:	ff 92       	push	r15
     236:	0f 93       	push	r16
     238:	1f 93       	push	r17
     23a:	cf 93       	push	r28
     23c:	df 93       	push	r29
     23e:	8c 01       	movw	r16, r24
	Motor_config = In_cofig; // tranform our data to global struct
     240:	90 93 08 0c 	sts	0x0C08, r25	; 0x800c08 <Motor_config+0x1>
     244:	80 93 07 0c 	sts	0x0C07, r24	; 0x800c07 <Motor_config>
	// calculated the whole timer
	float time_user =(float)(Motor_config->time_user_S/60) + (Motor_config->time_user_M);
	 // calculated the Rpm required For motor
	float rpm_required = (float)(Motor_config->distance *  Motor_config->gear_ratio) / (float)(time_user * (Motor_config->gear_diameter) * 22 / 7) ;
     248:	fc 01       	movw	r30, r24
     24a:	c0 81       	ld	r28, Z
     24c:	d1 81       	ldd	r29, Z+1	; 0x01
     24e:	82 81       	ldd	r24, Z+2	; 0x02
     250:	93 81       	ldd	r25, Z+3	; 0x03
     252:	c8 9f       	mul	r28, r24
     254:	b0 01       	movw	r22, r0
     256:	c9 9f       	mul	r28, r25
     258:	70 0d       	add	r23, r0
     25a:	d8 9f       	mul	r29, r24
     25c:	70 0d       	add	r23, r0
     25e:	11 24       	eor	r1, r1
     260:	80 e0       	ldi	r24, 0x00	; 0
     262:	90 e0       	ldi	r25, 0x00	; 0
     264:	0e 94 f6 18 	call	0x31ec	; 0x31ec <__floatunsisf>
     268:	6b 01       	movw	r12, r22
     26a:	7c 01       	movw	r14, r24
     26c:	f8 01       	movw	r30, r16
     26e:	22 85       	ldd	r18, Z+10	; 0x0a
     270:	33 85       	ldd	r19, Z+11	; 0x0b
     272:	a9 e8       	ldi	r26, 0x89	; 137
     274:	b8 e8       	ldi	r27, 0x88	; 136
     276:	0e 94 31 1a 	call	0x3462	; 0x3462 <__umulhisi3>
     27a:	96 95       	lsr	r25
     27c:	87 95       	ror	r24
     27e:	92 95       	swap	r25
     280:	82 95       	swap	r24
     282:	8f 70       	andi	r24, 0x0F	; 15
     284:	89 27       	eor	r24, r25
     286:	9f 70       	andi	r25, 0x0F	; 15
     288:	89 27       	eor	r24, r25
     28a:	bc 01       	movw	r22, r24
     28c:	80 e0       	ldi	r24, 0x00	; 0
     28e:	90 e0       	ldi	r25, 0x00	; 0
     290:	0e 94 f6 18 	call	0x31ec	; 0x31ec <__floatunsisf>
     294:	4b 01       	movw	r8, r22
     296:	5c 01       	movw	r10, r24
     298:	f8 01       	movw	r30, r16
     29a:	60 85       	ldd	r22, Z+8	; 0x08
     29c:	71 85       	ldd	r23, Z+9	; 0x09
     29e:	80 e0       	ldi	r24, 0x00	; 0
     2a0:	90 e0       	ldi	r25, 0x00	; 0
     2a2:	0e 94 f6 18 	call	0x31ec	; 0x31ec <__floatunsisf>
     2a6:	9b 01       	movw	r18, r22
     2a8:	ac 01       	movw	r20, r24
     2aa:	c5 01       	movw	r24, r10
     2ac:	b4 01       	movw	r22, r8
     2ae:	0e 94 fa 17 	call	0x2ff4	; 0x2ff4 <__addsf3>
     2b2:	4b 01       	movw	r8, r22
     2b4:	5c 01       	movw	r10, r24
     2b6:	f8 01       	movw	r30, r16
     2b8:	64 81       	ldd	r22, Z+4	; 0x04
     2ba:	75 81       	ldd	r23, Z+5	; 0x05
     2bc:	80 e0       	ldi	r24, 0x00	; 0
     2be:	90 e0       	ldi	r25, 0x00	; 0
     2c0:	0e 94 f6 18 	call	0x31ec	; 0x31ec <__floatunsisf>
     2c4:	9b 01       	movw	r18, r22
     2c6:	ac 01       	movw	r20, r24
     2c8:	c5 01       	movw	r24, r10
     2ca:	b4 01       	movw	r22, r8
     2cc:	0e 94 ac 19 	call	0x3358	; 0x3358 <__mulsf3>
     2d0:	20 e0       	ldi	r18, 0x00	; 0
     2d2:	30 e0       	ldi	r19, 0x00	; 0
     2d4:	40 eb       	ldi	r20, 0xB0	; 176
     2d6:	51 e4       	ldi	r21, 0x41	; 65
     2d8:	0e 94 ac 19 	call	0x3358	; 0x3358 <__mulsf3>
     2dc:	20 e0       	ldi	r18, 0x00	; 0
     2de:	30 e0       	ldi	r19, 0x00	; 0
     2e0:	40 ee       	ldi	r20, 0xE0	; 224
     2e2:	50 e4       	ldi	r21, 0x40	; 64
     2e4:	0e 94 62 18 	call	0x30c4	; 0x30c4 <__divsf3>
     2e8:	9b 01       	movw	r18, r22
     2ea:	ac 01       	movw	r20, r24
     2ec:	c7 01       	movw	r24, r14
     2ee:	b6 01       	movw	r22, r12
     2f0:	0e 94 62 18 	call	0x30c4	; 0x30c4 <__divsf3>
     2f4:	f6 2e       	mov	r15, r22
     2f6:	e7 2e       	mov	r14, r23
     2f8:	d8 2e       	mov	r13, r24
     2fa:	c9 2e       	mov	r12, r25
	  
	// made the range of the Rpm between 0 and RPM_MAX    
	uint16_t maxRPM =Motor_config->motor_rpm_max;
     2fc:	f8 01       	movw	r30, r16
     2fe:	06 81       	ldd	r16, Z+6	; 0x06
     300:	17 81       	ldd	r17, Z+7	; 0x07
	uint16_t minRPM = maxRPM / 2;    
	if(rpm_required > maxRPM){
     302:	b8 01       	movw	r22, r16
     304:	80 e0       	ldi	r24, 0x00	; 0
     306:	90 e0       	ldi	r25, 0x00	; 0
     308:	0e 94 f6 18 	call	0x31ec	; 0x31ec <__floatunsisf>
     30c:	b6 2e       	mov	r11, r22
     30e:	a7 2e       	mov	r10, r23
     310:	98 2e       	mov	r9, r24
     312:	89 2e       	mov	r8, r25
     314:	26 2f       	mov	r18, r22
     316:	37 2f       	mov	r19, r23
     318:	48 2f       	mov	r20, r24
     31a:	59 2f       	mov	r21, r25
     31c:	6f 2d       	mov	r22, r15
     31e:	7e 2d       	mov	r23, r14
     320:	8d 2d       	mov	r24, r13
     322:	9c 2d       	mov	r25, r12
     324:	0e 94 a8 19 	call	0x3350	; 0x3350 <__gesf2>
     328:	18 16       	cp	r1, r24
     32a:	e4 f0       	brlt	.+56     	; 0x364 <Inverter_set_Freq+0x142>
		    rpm_required = maxRPM;
	   }//End IF
	else if(rpm_required < minRPM){
     32c:	b8 01       	movw	r22, r16
     32e:	76 95       	lsr	r23
     330:	67 95       	ror	r22
     332:	80 e0       	ldi	r24, 0x00	; 0
     334:	90 e0       	ldi	r25, 0x00	; 0
     336:	0e 94 f6 18 	call	0x31ec	; 0x31ec <__floatunsisf>
     33a:	16 2f       	mov	r17, r22
     33c:	07 2f       	mov	r16, r23
     33e:	78 2e       	mov	r7, r24
     340:	69 2e       	mov	r6, r25
     342:	26 2f       	mov	r18, r22
     344:	37 2f       	mov	r19, r23
     346:	48 2f       	mov	r20, r24
     348:	59 2f       	mov	r21, r25
     34a:	6f 2d       	mov	r22, r15
     34c:	7e 2d       	mov	r23, r14
     34e:	8d 2d       	mov	r24, r13
     350:	9c 2d       	mov	r25, r12
     352:	0e 94 5e 18 	call	0x30bc	; 0x30bc <__cmpsf2>
     356:	88 23       	and	r24, r24
     358:	4c f4       	brge	.+18     	; 0x36c <Inverter_set_Freq+0x14a>
		    rpm_required = minRPM;
     35a:	f1 2e       	mov	r15, r17
     35c:	e0 2e       	mov	r14, r16
     35e:	d7 2c       	mov	r13, r7
     360:	c6 2c       	mov	r12, r6
     362:	04 c0       	rjmp	.+8      	; 0x36c <Inverter_set_Freq+0x14a>
	  
	// made the range of the Rpm between 0 and RPM_MAX    
	uint16_t maxRPM =Motor_config->motor_rpm_max;
	uint16_t minRPM = maxRPM / 2;    
	if(rpm_required > maxRPM){
		    rpm_required = maxRPM;
     364:	fb 2c       	mov	r15, r11
     366:	ea 2c       	mov	r14, r10
     368:	d9 2c       	mov	r13, r9
     36a:	c8 2c       	mov	r12, r8
	   }//End IF
	else if(rpm_required < minRPM){
		    rpm_required = minRPM;
	    }// END IF
	// Put the value of RPM To Global Value
    g_rpm_Motor = (float)(rpm_required)/(Motor_config->gear_ratio);
     36c:	be 01       	movw	r22, r28
     36e:	80 e0       	ldi	r24, 0x00	; 0
     370:	90 e0       	ldi	r25, 0x00	; 0
     372:	0e 94 f6 18 	call	0x31ec	; 0x31ec <__floatunsisf>
     376:	9b 01       	movw	r18, r22
     378:	ac 01       	movw	r20, r24
     37a:	6f 2d       	mov	r22, r15
     37c:	7e 2d       	mov	r23, r14
     37e:	8d 2d       	mov	r24, r13
     380:	9c 2d       	mov	r25, r12
     382:	0e 94 62 18 	call	0x30c4	; 0x30c4 <__divsf3>
     386:	60 93 09 0c 	sts	0x0C09, r22	; 0x800c09 <g_rpm_Motor>
     38a:	70 93 0a 0c 	sts	0x0C0A, r23	; 0x800c0a <g_rpm_Motor+0x1>
     38e:	80 93 0b 0c 	sts	0x0C0B, r24	; 0x800c0b <g_rpm_Motor+0x2>
     392:	90 93 0c 0c 	sts	0x0C0C, r25	; 0x800c0c <g_rpm_Motor+0x3>
	// calculate tthe settings Frequancy
    uint16_t sitting_freq = rpm_required * 5000  / (Motor_config->motor_rpm_max);
     396:	20 e0       	ldi	r18, 0x00	; 0
     398:	30 e4       	ldi	r19, 0x40	; 64
     39a:	4c e9       	ldi	r20, 0x9C	; 156
     39c:	55 e4       	ldi	r21, 0x45	; 69
     39e:	6f 2d       	mov	r22, r15
     3a0:	7e 2d       	mov	r23, r14
     3a2:	8d 2d       	mov	r24, r13
     3a4:	9c 2d       	mov	r25, r12
     3a6:	0e 94 ac 19 	call	0x3358	; 0x3358 <__mulsf3>
     3aa:	2b 2d       	mov	r18, r11
     3ac:	3a 2d       	mov	r19, r10
     3ae:	49 2d       	mov	r20, r9
     3b0:	58 2d       	mov	r21, r8
     3b2:	0e 94 62 18 	call	0x30c4	; 0x30c4 <__divsf3>
     3b6:	0e 94 ca 18 	call	0x3194	; 0x3194 <__fixunssfsi>
     3ba:	ab 01       	movw	r20, r22
	    // Manual limitation for motor speed
	if(sitting_freq > 5000){
     3bc:	69 38       	cpi	r22, 0x89	; 137
     3be:	73 41       	sbci	r23, 0x13	; 19
     3c0:	38 f4       	brcc	.+14     	; 0x3d0 <Inverter_set_Freq+0x1ae>
		    sitting_freq = 5000;
	}// End IF
	else if(sitting_freq < 2500){
     3c2:	44 3c       	cpi	r20, 0xC4	; 196
     3c4:	89 e0       	ldi	r24, 0x09	; 9
     3c6:	58 07       	cpc	r21, r24
     3c8:	28 f4       	brcc	.+10     	; 0x3d4 <Inverter_set_Freq+0x1b2>
		    sitting_freq = 2500;
     3ca:	44 ec       	ldi	r20, 0xC4	; 196
     3cc:	59 e0       	ldi	r21, 0x09	; 9
     3ce:	02 c0       	rjmp	.+4      	; 0x3d4 <Inverter_set_Freq+0x1b2>
    g_rpm_Motor = (float)(rpm_required)/(Motor_config->gear_ratio);
	// calculate tthe settings Frequancy
    uint16_t sitting_freq = rpm_required * 5000  / (Motor_config->motor_rpm_max);
	    // Manual limitation for motor speed
	if(sitting_freq > 5000){
		    sitting_freq = 5000;
     3d0:	48 e8       	ldi	r20, 0x88	; 136
     3d2:	53 e1       	ldi	r21, 0x13	; 19
	}// End IF
	else if(sitting_freq < 2500){
		    sitting_freq = 2500;
	}// End IF
    //set new value 
    Modbus_Write_single_register(INVERTER,INVERTER_FRE_ADD,sitting_freq);// Motor speed on address 0x2001 
     3d4:	61 e0       	ldi	r22, 0x01	; 1
     3d6:	70 e2       	ldi	r23, 0x20	; 32
     3d8:	81 e0       	ldi	r24, 0x01	; 1
     3da:	7b d7       	rcall	.+3830   	; 0x12d2 <Modbus_Write_single_register>
		  	
}// End Function
     3dc:	df 91       	pop	r29
     3de:	cf 91       	pop	r28
     3e0:	1f 91       	pop	r17
     3e2:	0f 91       	pop	r16
     3e4:	ff 90       	pop	r15
     3e6:	ef 90       	pop	r14
     3e8:	df 90       	pop	r13
     3ea:	cf 90       	pop	r12
     3ec:	bf 90       	pop	r11
     3ee:	af 90       	pop	r10
     3f0:	9f 90       	pop	r9
     3f2:	8f 90       	pop	r8
     3f4:	7f 90       	pop	r7
     3f6:	6f 90       	pop	r6
     3f8:	08 95       	ret

000003fa <Modbus_mster_transaction>:
		g_mod1_write_address = u16WriteAddress;
		g_mod1_write_qty = (u8State ? 0xFF00 : 0x0000);
		return Modbus_mster_transaction(device, WRITE_SINGLE_REGISTER);
	}
	return INVALID_DEVICE; //error
}
     3fa:	8f 92       	push	r8
     3fc:	9f 92       	push	r9
     3fe:	af 92       	push	r10
     400:	bf 92       	push	r11
     402:	df 92       	push	r13
     404:	ef 92       	push	r14
     406:	ff 92       	push	r15
     408:	0f 93       	push	r16
     40a:	1f 93       	push	r17
     40c:	cf 93       	push	r28
     40e:	df 93       	push	r29
     410:	cd b7       	in	r28, 0x3d	; 61
     412:	de b7       	in	r29, 0x3e	; 62
     414:	da 95       	dec	r29
     416:	0f b6       	in	r0, 0x3f	; 63
     418:	f8 94       	cli
     41a:	de bf       	out	0x3e, r29	; 62
     41c:	0f be       	out	0x3f, r0	; 63
     41e:	cd bf       	out	0x3d, r28	; 61
     420:	d6 2e       	mov	r13, r22
     422:	81 11       	cpse	r24, r1
     424:	f9 c2       	rjmp	.+1522   	; 0xa18 <__LOCK_REGION_LENGTH__+0x618>
     426:	80 91 f4 04 	lds	r24, 0x04F4	; 0x8004f4 <g_mod0_slave>
     42a:	89 83       	std	Y+1, r24	; 0x01
     42c:	2f ef       	ldi	r18, 0xFF	; 255
     42e:	62 13       	cpse	r22, r18
     430:	06 c0       	rjmp	.+12     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
     432:	8f e0       	ldi	r24, 0x0F	; 15
     434:	8a 83       	std	Y+2, r24	; 0x02
     436:	68 94       	set
     438:	bb 24       	eor	r11, r11
     43a:	b1 f8       	bld	r11, 1
     43c:	32 c0       	rjmp	.+100    	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
     43e:	6a 83       	std	Y+2, r22	; 0x02
     440:	81 e0       	ldi	r24, 0x01	; 1
     442:	68 17       	cp	r22, r24
     444:	b8 f0       	brcs	.+46     	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
     446:	94 e0       	ldi	r25, 0x04	; 4
     448:	96 17       	cp	r25, r22
     44a:	18 f4       	brcc	.+6      	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
     44c:	a7 e1       	ldi	r26, 0x17	; 23
     44e:	6a 13       	cpse	r22, r26
     450:	11 c0       	rjmp	.+34     	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
     452:	80 91 f2 04 	lds	r24, 0x04F2	; 0x8004f2 <g_mod0_read_address>
     456:	90 91 f3 04 	lds	r25, 0x04F3	; 0x8004f3 <g_mod0_read_address+0x1>
     45a:	9b 83       	std	Y+3, r25	; 0x03
     45c:	8c 83       	std	Y+4, r24	; 0x04
     45e:	80 91 f0 04 	lds	r24, 0x04F0	; 0x8004f0 <g_mod0_read_qty>
     462:	90 91 f1 04 	lds	r25, 0x04F1	; 0x8004f1 <g_mod0_read_qty+0x1>
     466:	9d 83       	std	Y+5, r25	; 0x05
     468:	8e 83       	std	Y+6, r24	; 0x06
     46a:	0f 2e       	mov	r0, r31
     46c:	f6 e0       	ldi	r31, 0x06	; 6
     46e:	bf 2e       	mov	r11, r31
     470:	f0 2d       	mov	r31, r0
     472:	03 c0       	rjmp	.+6      	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
     474:	68 94       	set
     476:	bb 24       	eor	r11, r11
     478:	b1 f8       	bld	r11, 1
     47a:	b0 e1       	ldi	r27, 0x10	; 16
     47c:	bd 15       	cp	r27, r13
     47e:	40 f0       	brcs	.+16     	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
     480:	ef e0       	ldi	r30, 0x0F	; 15
     482:	de 16       	cp	r13, r30
     484:	70 f4       	brcc	.+28     	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
     486:	8b ef       	ldi	r24, 0xFB	; 251
     488:	8d 0d       	add	r24, r13
     48a:	82 30       	cpi	r24, 0x02	; 2
     48c:	00 f5       	brcc	.+64     	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
     48e:	09 c0       	rjmp	.+18     	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
     490:	f6 e1       	ldi	r31, 0x16	; 22
     492:	df 16       	cp	r13, r31
     494:	e0 f0       	brcs	.+56     	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
     496:	27 e1       	ldi	r18, 0x17	; 23
     498:	2d 15       	cp	r18, r13
     49a:	18 f4       	brcc	.+6      	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
     49c:	8f ef       	ldi	r24, 0xFF	; 255
     49e:	d8 12       	cpse	r13, r24
     4a0:	16 c0       	rjmp	.+44     	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
     4a2:	90 91 6e 04 	lds	r25, 0x046E	; 0x80046e <g_mod0_write_address>
     4a6:	80 91 6f 04 	lds	r24, 0x046F	; 0x80046f <g_mod0_write_address+0x1>
     4aa:	e1 e0       	ldi	r30, 0x01	; 1
     4ac:	f0 e0       	ldi	r31, 0x00	; 0
     4ae:	ec 0f       	add	r30, r28
     4b0:	fd 1f       	adc	r31, r29
     4b2:	eb 0d       	add	r30, r11
     4b4:	f1 1d       	adc	r31, r1
     4b6:	80 83       	st	Z, r24
     4b8:	81 e0       	ldi	r24, 0x01	; 1
     4ba:	8b 0d       	add	r24, r11
     4bc:	e1 e0       	ldi	r30, 0x01	; 1
     4be:	f0 e0       	ldi	r31, 0x00	; 0
     4c0:	ec 0f       	add	r30, r28
     4c2:	fd 1f       	adc	r31, r29
     4c4:	e8 0f       	add	r30, r24
     4c6:	f1 1d       	adc	r31, r1
     4c8:	b3 94       	inc	r11
     4ca:	b3 94       	inc	r11
     4cc:	90 83       	st	Z, r25
     4ce:	90 e1       	ldi	r25, 0x10	; 16
     4d0:	d9 16       	cp	r13, r25
     4d2:	09 f4       	brne	.+2      	; 0x4d6 <__LOCK_REGION_LENGTH__+0xd6>
     4d4:	ad c0       	rjmp	.+346    	; 0x630 <__LOCK_REGION_LENGTH__+0x230>
     4d6:	9d 15       	cp	r25, r13
     4d8:	58 f0       	brcs	.+22     	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
     4da:	a6 e0       	ldi	r26, 0x06	; 6
     4dc:	da 16       	cp	r13, r26
     4de:	61 f1       	breq	.+88     	; 0x538 <__LOCK_REGION_LENGTH__+0x138>
     4e0:	bf e0       	ldi	r27, 0x0F	; 15
     4e2:	db 16       	cp	r13, r27
     4e4:	09 f4       	brne	.+2      	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
     4e6:	41 c0       	rjmp	.+130    	; 0x56a <__LOCK_REGION_LENGTH__+0x16a>
     4e8:	e5 e0       	ldi	r30, 0x05	; 5
     4ea:	de 12       	cpse	r13, r30
     4ec:	1a c1       	rjmp	.+564    	; 0x722 <__LOCK_REGION_LENGTH__+0x322>
     4ee:	0d c0       	rjmp	.+26     	; 0x50a <__LOCK_REGION_LENGTH__+0x10a>
     4f0:	f7 e1       	ldi	r31, 0x17	; 23
     4f2:	df 16       	cp	r13, r31
     4f4:	09 f4       	brne	.+2      	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
     4f6:	9c c0       	rjmp	.+312    	; 0x630 <__LOCK_REGION_LENGTH__+0x230>
     4f8:	2f ef       	ldi	r18, 0xFF	; 255
     4fa:	d2 16       	cp	r13, r18
     4fc:	09 f4       	brne	.+2      	; 0x500 <__LOCK_REGION_LENGTH__+0x100>
     4fe:	98 c0       	rjmp	.+304    	; 0x630 <__LOCK_REGION_LENGTH__+0x230>
     500:	86 e1       	ldi	r24, 0x16	; 22
     502:	d8 16       	cp	r13, r24
     504:	09 f4       	brne	.+2      	; 0x508 <__LOCK_REGION_LENGTH__+0x108>
     506:	df c0       	rjmp	.+446    	; 0x6c6 <__LOCK_REGION_LENGTH__+0x2c6>
     508:	0c c1       	rjmp	.+536    	; 0x722 <__LOCK_REGION_LENGTH__+0x322>
     50a:	90 91 6c 04 	lds	r25, 0x046C	; 0x80046c <g_mod0_write_qty>
     50e:	80 91 6d 04 	lds	r24, 0x046D	; 0x80046d <g_mod0_write_qty+0x1>
     512:	e1 e0       	ldi	r30, 0x01	; 1
     514:	f0 e0       	ldi	r31, 0x00	; 0
     516:	ec 0f       	add	r30, r28
     518:	fd 1f       	adc	r31, r29
     51a:	eb 0d       	add	r30, r11
     51c:	f1 1d       	adc	r31, r1
     51e:	80 83       	st	Z, r24
     520:	81 e0       	ldi	r24, 0x01	; 1
     522:	8b 0d       	add	r24, r11
     524:	e1 e0       	ldi	r30, 0x01	; 1
     526:	f0 e0       	ldi	r31, 0x00	; 0
     528:	ec 0f       	add	r30, r28
     52a:	fd 1f       	adc	r31, r29
     52c:	e8 0f       	add	r30, r24
     52e:	f1 1d       	adc	r31, r1
     530:	b3 94       	inc	r11
     532:	b3 94       	inc	r11
     534:	90 83       	st	Z, r25
     536:	f5 c0       	rjmp	.+490    	; 0x722 <__LOCK_REGION_LENGTH__+0x322>
     538:	ec ee       	ldi	r30, 0xEC	; 236
     53a:	f3 e0       	ldi	r31, 0x03	; 3
     53c:	80 81       	ld	r24, Z
     53e:	91 81       	ldd	r25, Z+1	; 0x01
     540:	a1 e0       	ldi	r26, 0x01	; 1
     542:	b0 e0       	ldi	r27, 0x00	; 0
     544:	ac 0f       	add	r26, r28
     546:	bd 1f       	adc	r27, r29
     548:	ab 0d       	add	r26, r11
     54a:	b1 1d       	adc	r27, r1
     54c:	9c 93       	st	X, r25
     54e:	20 81       	ld	r18, Z
     550:	31 81       	ldd	r19, Z+1	; 0x01
     552:	81 e0       	ldi	r24, 0x01	; 1
     554:	8b 0d       	add	r24, r11
     556:	e1 e0       	ldi	r30, 0x01	; 1
     558:	f0 e0       	ldi	r31, 0x00	; 0
     55a:	ec 0f       	add	r30, r28
     55c:	fd 1f       	adc	r31, r29
     55e:	e8 0f       	add	r30, r24
     560:	f1 1d       	adc	r31, r1
     562:	b3 94       	inc	r11
     564:	b3 94       	inc	r11
     566:	20 83       	st	Z, r18
     568:	dc c0       	rjmp	.+440    	; 0x722 <__LOCK_REGION_LENGTH__+0x322>
     56a:	80 91 6c 04 	lds	r24, 0x046C	; 0x80046c <g_mod0_write_qty>
     56e:	90 91 6d 04 	lds	r25, 0x046D	; 0x80046d <g_mod0_write_qty+0x1>
     572:	e1 e0       	ldi	r30, 0x01	; 1
     574:	f0 e0       	ldi	r31, 0x00	; 0
     576:	ec 0f       	add	r30, r28
     578:	fd 1f       	adc	r31, r29
     57a:	eb 0d       	add	r30, r11
     57c:	f1 1d       	adc	r31, r1
     57e:	90 83       	st	Z, r25
     580:	32 e0       	ldi	r19, 0x02	; 2
     582:	3b 0d       	add	r19, r11
     584:	21 e0       	ldi	r18, 0x01	; 1
     586:	2b 0d       	add	r18, r11
     588:	e1 e0       	ldi	r30, 0x01	; 1
     58a:	f0 e0       	ldi	r31, 0x00	; 0
     58c:	ec 0f       	add	r30, r28
     58e:	fd 1f       	adc	r31, r29
     590:	e2 0f       	add	r30, r18
     592:	f1 1d       	adc	r31, r1
     594:	80 83       	st	Z, r24
     596:	ac 01       	movw	r20, r24
     598:	47 70       	andi	r20, 0x07	; 7
     59a:	55 27       	eor	r21, r21
     59c:	45 2b       	or	r20, r21
     59e:	49 f0       	breq	.+18     	; 0x5b2 <__LOCK_REGION_LENGTH__+0x1b2>
     5a0:	96 95       	lsr	r25
     5a2:	87 95       	ror	r24
     5a4:	96 95       	lsr	r25
     5a6:	87 95       	ror	r24
     5a8:	96 95       	lsr	r25
     5aa:	87 95       	ror	r24
     5ac:	21 e0       	ldi	r18, 0x01	; 1
     5ae:	28 0f       	add	r18, r24
     5b0:	07 c0       	rjmp	.+14     	; 0x5c0 <__LOCK_REGION_LENGTH__+0x1c0>
     5b2:	96 95       	lsr	r25
     5b4:	87 95       	ror	r24
     5b6:	96 95       	lsr	r25
     5b8:	87 95       	ror	r24
     5ba:	96 95       	lsr	r25
     5bc:	87 95       	ror	r24
     5be:	28 2f       	mov	r18, r24
     5c0:	93 e0       	ldi	r25, 0x03	; 3
     5c2:	b9 0e       	add	r11, r25
     5c4:	fe 01       	movw	r30, r28
     5c6:	e3 0f       	add	r30, r19
     5c8:	f1 1d       	adc	r31, r1
     5ca:	21 83       	std	Z+1, r18	; 0x01
     5cc:	22 23       	and	r18, r18
     5ce:	09 f4       	brne	.+2      	; 0x5d2 <__LOCK_REGION_LENGTH__+0x1d2>
     5d0:	a8 c0       	rjmp	.+336    	; 0x722 <__LOCK_REGION_LENGTH__+0x322>
     5d2:	80 e0       	ldi	r24, 0x00	; 0
     5d4:	98 2f       	mov	r25, r24
     5d6:	91 70       	andi	r25, 0x01	; 1
     5d8:	80 ff       	sbrs	r24, 0
     5da:	03 c0       	rjmp	.+6      	; 0x5e2 <__LOCK_REGION_LENGTH__+0x1e2>
     5dc:	91 30       	cpi	r25, 0x01	; 1
     5de:	99 f0       	breq	.+38     	; 0x606 <__LOCK_REGION_LENGTH__+0x206>
     5e0:	23 c0       	rjmp	.+70     	; 0x628 <__LOCK_REGION_LENGTH__+0x228>
     5e2:	e8 2f       	mov	r30, r24
     5e4:	e6 95       	lsr	r30
     5e6:	f0 e0       	ldi	r31, 0x00	; 0
     5e8:	ee 0f       	add	r30, r30
     5ea:	ff 1f       	adc	r31, r31
     5ec:	e4 51       	subi	r30, 0x14	; 20
     5ee:	fc 4f       	sbci	r31, 0xFC	; 252
     5f0:	40 81       	ld	r20, Z
     5f2:	51 81       	ldd	r21, Z+1	; 0x01
     5f4:	e1 e0       	ldi	r30, 0x01	; 1
     5f6:	f0 e0       	ldi	r31, 0x00	; 0
     5f8:	ec 0f       	add	r30, r28
     5fa:	fd 1f       	adc	r31, r29
     5fc:	eb 0d       	add	r30, r11
     5fe:	f1 1d       	adc	r31, r1
     600:	40 83       	st	Z, r20
     602:	b3 94       	inc	r11
     604:	11 c0       	rjmp	.+34     	; 0x628 <__LOCK_REGION_LENGTH__+0x228>
     606:	e8 2f       	mov	r30, r24
     608:	e6 95       	lsr	r30
     60a:	f0 e0       	ldi	r31, 0x00	; 0
     60c:	ee 0f       	add	r30, r30
     60e:	ff 1f       	adc	r31, r31
     610:	e4 51       	subi	r30, 0x14	; 20
     612:	fc 4f       	sbci	r31, 0xFC	; 252
     614:	40 81       	ld	r20, Z
     616:	51 81       	ldd	r21, Z+1	; 0x01
     618:	e1 e0       	ldi	r30, 0x01	; 1
     61a:	f0 e0       	ldi	r31, 0x00	; 0
     61c:	ec 0f       	add	r30, r28
     61e:	fd 1f       	adc	r31, r29
     620:	eb 0d       	add	r30, r11
     622:	f1 1d       	adc	r31, r1
     624:	50 83       	st	Z, r21
     626:	b3 94       	inc	r11
     628:	8f 5f       	subi	r24, 0xFF	; 255
     62a:	28 13       	cpse	r18, r24
     62c:	d3 cf       	rjmp	.-90     	; 0x5d4 <__LOCK_REGION_LENGTH__+0x1d4>
     62e:	79 c0       	rjmp	.+242    	; 0x722 <__LOCK_REGION_LENGTH__+0x322>
     630:	60 91 6c 04 	lds	r22, 0x046C	; 0x80046c <g_mod0_write_qty>
     634:	70 91 6d 04 	lds	r23, 0x046D	; 0x80046d <g_mod0_write_qty+0x1>
     638:	e1 e0       	ldi	r30, 0x01	; 1
     63a:	f0 e0       	ldi	r31, 0x00	; 0
     63c:	ec 0f       	add	r30, r28
     63e:	fd 1f       	adc	r31, r29
     640:	eb 0d       	add	r30, r11
     642:	f1 1d       	adc	r31, r1
     644:	70 83       	st	Z, r23
     646:	81 e0       	ldi	r24, 0x01	; 1
     648:	8b 0d       	add	r24, r11
     64a:	e1 e0       	ldi	r30, 0x01	; 1
     64c:	f0 e0       	ldi	r31, 0x00	; 0
     64e:	ec 0f       	add	r30, r28
     650:	fd 1f       	adc	r31, r29
     652:	e8 0f       	add	r30, r24
     654:	f1 1d       	adc	r31, r1
     656:	60 83       	st	Z, r22
     658:	82 e0       	ldi	r24, 0x02	; 2
     65a:	8b 0d       	add	r24, r11
     65c:	e1 e0       	ldi	r30, 0x01	; 1
     65e:	f0 e0       	ldi	r31, 0x00	; 0
     660:	ec 0f       	add	r30, r28
     662:	fd 1f       	adc	r31, r29
     664:	e8 0f       	add	r30, r24
     666:	f1 1d       	adc	r31, r1
     668:	a3 e0       	ldi	r26, 0x03	; 3
     66a:	ba 0e       	add	r11, r26
     66c:	86 2f       	mov	r24, r22
     66e:	88 0f       	add	r24, r24
     670:	80 83       	st	Z, r24
     672:	77 27       	eor	r23, r23
     674:	16 16       	cp	r1, r22
     676:	17 06       	cpc	r1, r23
     678:	0c f0       	brlt	.+2      	; 0x67c <__LOCK_REGION_LENGTH__+0x27c>
     67a:	53 c0       	rjmp	.+166    	; 0x722 <__LOCK_REGION_LENGTH__+0x322>
     67c:	80 e0       	ldi	r24, 0x00	; 0
     67e:	90 e0       	ldi	r25, 0x00	; 0
     680:	20 e0       	ldi	r18, 0x00	; 0
     682:	88 0f       	add	r24, r24
     684:	99 1f       	adc	r25, r25
     686:	fc 01       	movw	r30, r24
     688:	e4 51       	subi	r30, 0x14	; 20
     68a:	fc 4f       	sbci	r31, 0xFC	; 252
     68c:	80 81       	ld	r24, Z
     68e:	91 81       	ldd	r25, Z+1	; 0x01
     690:	a1 e0       	ldi	r26, 0x01	; 1
     692:	b0 e0       	ldi	r27, 0x00	; 0
     694:	ac 0f       	add	r26, r28
     696:	bd 1f       	adc	r27, r29
     698:	ab 0d       	add	r26, r11
     69a:	b1 1d       	adc	r27, r1
     69c:	9c 93       	st	X, r25
     69e:	40 81       	ld	r20, Z
     6a0:	51 81       	ldd	r21, Z+1	; 0x01
     6a2:	81 e0       	ldi	r24, 0x01	; 1
     6a4:	8b 0d       	add	r24, r11
     6a6:	e1 e0       	ldi	r30, 0x01	; 1
     6a8:	f0 e0       	ldi	r31, 0x00	; 0
     6aa:	ec 0f       	add	r30, r28
     6ac:	fd 1f       	adc	r31, r29
     6ae:	e8 0f       	add	r30, r24
     6b0:	f1 1d       	adc	r31, r1
     6b2:	b3 94       	inc	r11
     6b4:	b3 94       	inc	r11
     6b6:	40 83       	st	Z, r20
     6b8:	2f 5f       	subi	r18, 0xFF	; 255
     6ba:	82 2f       	mov	r24, r18
     6bc:	90 e0       	ldi	r25, 0x00	; 0
     6be:	86 17       	cp	r24, r22
     6c0:	97 07       	cpc	r25, r23
     6c2:	fc f2       	brlt	.-66     	; 0x682 <__LOCK_REGION_LENGTH__+0x282>
     6c4:	2e c0       	rjmp	.+92     	; 0x722 <__LOCK_REGION_LENGTH__+0x322>
     6c6:	ec ee       	ldi	r30, 0xEC	; 236
     6c8:	f3 e0       	ldi	r31, 0x03	; 3
     6ca:	80 81       	ld	r24, Z
     6cc:	91 81       	ldd	r25, Z+1	; 0x01
     6ce:	a1 e0       	ldi	r26, 0x01	; 1
     6d0:	b0 e0       	ldi	r27, 0x00	; 0
     6d2:	ac 0f       	add	r26, r28
     6d4:	bd 1f       	adc	r27, r29
     6d6:	ab 0d       	add	r26, r11
     6d8:	b1 1d       	adc	r27, r1
     6da:	9c 93       	st	X, r25
     6dc:	80 81       	ld	r24, Z
     6de:	91 81       	ldd	r25, Z+1	; 0x01
     6e0:	91 e0       	ldi	r25, 0x01	; 1
     6e2:	9b 0d       	add	r25, r11
     6e4:	a1 e0       	ldi	r26, 0x01	; 1
     6e6:	b0 e0       	ldi	r27, 0x00	; 0
     6e8:	ac 0f       	add	r26, r28
     6ea:	bd 1f       	adc	r27, r29
     6ec:	a9 0f       	add	r26, r25
     6ee:	b1 1d       	adc	r27, r1
     6f0:	8c 93       	st	X, r24
     6f2:	82 81       	ldd	r24, Z+2	; 0x02
     6f4:	93 81       	ldd	r25, Z+3	; 0x03
     6f6:	82 e0       	ldi	r24, 0x02	; 2
     6f8:	8b 0d       	add	r24, r11
     6fa:	a1 e0       	ldi	r26, 0x01	; 1
     6fc:	b0 e0       	ldi	r27, 0x00	; 0
     6fe:	ac 0f       	add	r26, r28
     700:	bd 1f       	adc	r27, r29
     702:	a8 0f       	add	r26, r24
     704:	b1 1d       	adc	r27, r1
     706:	9c 93       	st	X, r25
     708:	22 81       	ldd	r18, Z+2	; 0x02
     70a:	33 81       	ldd	r19, Z+3	; 0x03
     70c:	83 e0       	ldi	r24, 0x03	; 3
     70e:	8b 0d       	add	r24, r11
     710:	e1 e0       	ldi	r30, 0x01	; 1
     712:	f0 e0       	ldi	r31, 0x00	; 0
     714:	ec 0f       	add	r30, r28
     716:	fd 1f       	adc	r31, r29
     718:	e8 0f       	add	r30, r24
     71a:	f1 1d       	adc	r31, r1
     71c:	b4 e0       	ldi	r27, 0x04	; 4
     71e:	bb 0e       	add	r11, r27
     720:	20 83       	st	Z, r18
     722:	bb 20       	and	r11, r11
     724:	b9 f0       	breq	.+46     	; 0x754 <__LOCK_REGION_LENGTH__+0x354>
     726:	8e 01       	movw	r16, r28
     728:	0f 5f       	subi	r16, 0xFF	; 255
     72a:	1f 4f       	sbci	r17, 0xFF	; 255
     72c:	ee 24       	eor	r14, r14
     72e:	ea 94       	dec	r14
     730:	eb 0c       	add	r14, r11
     732:	f1 2c       	mov	r15, r1
     734:	ef ef       	ldi	r30, 0xFF	; 255
     736:	ee 1a       	sub	r14, r30
     738:	fe 0a       	sbc	r15, r30
     73a:	e0 0e       	add	r14, r16
     73c:	f1 1e       	adc	r15, r17
     73e:	8f ef       	ldi	r24, 0xFF	; 255
     740:	9f ef       	ldi	r25, 0xFF	; 255
     742:	d8 01       	movw	r26, r16
     744:	6d 91       	ld	r22, X+
     746:	8d 01       	movw	r16, r26
     748:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <crc16_update>
     74c:	0e 15       	cp	r16, r14
     74e:	1f 05       	cpc	r17, r15
     750:	c1 f7       	brne	.-16     	; 0x742 <__LOCK_REGION_LENGTH__+0x342>
     752:	02 c0       	rjmp	.+4      	; 0x758 <__LOCK_REGION_LENGTH__+0x358>
     754:	8f ef       	ldi	r24, 0xFF	; 255
     756:	9f ef       	ldi	r25, 0xFF	; 255
     758:	ee 24       	eor	r14, r14
     75a:	e3 94       	inc	r14
     75c:	eb 0c       	add	r14, r11
     75e:	e1 e0       	ldi	r30, 0x01	; 1
     760:	f0 e0       	ldi	r31, 0x00	; 0
     762:	ec 0f       	add	r30, r28
     764:	fd 1f       	adc	r31, r29
     766:	eb 0d       	add	r30, r11
     768:	f1 1d       	adc	r31, r1
     76a:	80 83       	st	Z, r24
     76c:	b3 94       	inc	r11
     76e:	b3 94       	inc	r11
     770:	e1 e0       	ldi	r30, 0x01	; 1
     772:	f0 e0       	ldi	r31, 0x00	; 0
     774:	ec 0f       	add	r30, r28
     776:	fd 1f       	adc	r31, r29
     778:	ee 0d       	add	r30, r14
     77a:	f1 1d       	adc	r31, r1
     77c:	90 83       	st	Z, r25
     77e:	e1 e0       	ldi	r30, 0x01	; 1
     780:	f0 e0       	ldi	r31, 0x00	; 0
     782:	ec 0f       	add	r30, r28
     784:	fd 1f       	adc	r31, r29
     786:	eb 0d       	add	r30, r11
     788:	f1 1d       	adc	r31, r1
     78a:	10 82       	st	Z, r1
     78c:	e0 91 df 03 	lds	r30, 0x03DF	; 0x8003df <g_mod0_Serial_getc>
     790:	f0 91 e0 03 	lds	r31, 0x03E0	; 0x8003e0 <g_mod0_Serial_getc+0x1>
     794:	19 95       	eicall
     796:	81 15       	cp	r24, r1
     798:	91 40       	sbci	r25, 0x01	; 1
     79a:	c1 f7       	brne	.-16     	; 0x78c <__LOCK_REGION_LENGTH__+0x38c>
     79c:	e0 91 e5 03 	lds	r30, 0x03E5	; 0x8003e5 <g_mod0_pre_transmission>
     7a0:	f0 91 e6 03 	lds	r31, 0x03E6	; 0x8003e6 <g_mod0_pre_transmission+0x1>
     7a4:	30 97       	sbiw	r30, 0x00	; 0
     7a6:	09 f0       	breq	.+2      	; 0x7aa <__LOCK_REGION_LENGTH__+0x3aa>
     7a8:	19 95       	eicall
     7aa:	bb 20       	and	r11, r11
     7ac:	a1 f0       	breq	.+40     	; 0x7d6 <__LOCK_REGION_LENGTH__+0x3d6>
     7ae:	8e 01       	movw	r16, r28
     7b0:	0f 5f       	subi	r16, 0xFF	; 255
     7b2:	1f 4f       	sbci	r17, 0xFF	; 255
     7b4:	f1 2c       	mov	r15, r1
     7b6:	ef ef       	ldi	r30, 0xFF	; 255
     7b8:	ee 1a       	sub	r14, r30
     7ba:	fe 0a       	sbc	r15, r30
     7bc:	e0 0e       	add	r14, r16
     7be:	f1 1e       	adc	r15, r17
     7c0:	e0 91 e1 03 	lds	r30, 0x03E1	; 0x8003e1 <g_mod0_Serial_putc>
     7c4:	f0 91 e2 03 	lds	r31, 0x03E2	; 0x8003e2 <g_mod0_Serial_putc+0x1>
     7c8:	d8 01       	movw	r26, r16
     7ca:	8d 91       	ld	r24, X+
     7cc:	8d 01       	movw	r16, r26
     7ce:	19 95       	eicall
     7d0:	0e 15       	cp	r16, r14
     7d2:	1f 05       	cpc	r17, r15
     7d4:	a9 f7       	brne	.-22     	; 0x7c0 <__LOCK_REGION_LENGTH__+0x3c0>
     7d6:	e0 91 dd 03 	lds	r30, 0x03DD	; 0x8003dd <g_mod0_Serial_flush>
     7da:	f0 91 de 03 	lds	r31, 0x03DE	; 0x8003de <g_mod0_Serial_flush+0x1>
     7de:	19 95       	eicall
     7e0:	ef e8       	ldi	r30, 0x8F	; 143
     7e2:	f1 e0       	ldi	r31, 0x01	; 1
     7e4:	31 97       	sbiw	r30, 0x01	; 1
     7e6:	f1 f7       	brne	.-4      	; 0x7e4 <__LOCK_REGION_LENGTH__+0x3e4>
     7e8:	00 c0       	rjmp	.+0      	; 0x7ea <__LOCK_REGION_LENGTH__+0x3ea>
     7ea:	00 00       	nop
     7ec:	e0 91 e3 03 	lds	r30, 0x03E3	; 0x8003e3 <g_mod0_post_transmission>
     7f0:	f0 91 e4 03 	lds	r31, 0x03E4	; 0x8003e4 <g_mod0_post_transmission+0x1>
     7f4:	30 97       	sbiw	r30, 0x00	; 0
     7f6:	09 f0       	breq	.+2      	; 0x7fa <__LOCK_REGION_LENGTH__+0x3fa>
     7f8:	19 95       	eicall
     7fa:	0e 94 c9 17 	call	0x2f92	; 0x2f92 <Get_millis>
     7fe:	4b 01       	movw	r8, r22
     800:	5c 01       	movw	r10, r24
     802:	08 e0       	ldi	r16, 0x08	; 8
     804:	10 e0       	ldi	r17, 0x00	; 0
     806:	ed 2c       	mov	r14, r13
     808:	f1 2c       	mov	r15, r1
     80a:	e0 91 db 03 	lds	r30, 0x03DB	; 0x8003db <g_mod0_Serial_available>
     80e:	f0 91 dc 03 	lds	r31, 0x03DC	; 0x8003dc <g_mod0_Serial_available+0x1>
     812:	19 95       	eicall
     814:	89 2b       	or	r24, r25
     816:	91 f0       	breq	.+36     	; 0x83c <__LOCK_REGION_LENGTH__+0x43c>
     818:	dd 24       	eor	r13, r13
     81a:	d3 94       	inc	r13
     81c:	d1 0e       	add	r13, r17
     81e:	e0 91 df 03 	lds	r30, 0x03DF	; 0x8003df <g_mod0_Serial_getc>
     822:	f0 91 e0 03 	lds	r31, 0x03E0	; 0x8003e0 <g_mod0_Serial_getc+0x1>
     826:	19 95       	eicall
     828:	e1 e0       	ldi	r30, 0x01	; 1
     82a:	f0 e0       	ldi	r31, 0x00	; 0
     82c:	ec 0f       	add	r30, r28
     82e:	fd 1f       	adc	r31, r29
     830:	e1 0f       	add	r30, r17
     832:	f1 1d       	adc	r31, r1
     834:	80 83       	st	Z, r24
     836:	01 50       	subi	r16, 0x01	; 1
     838:	1d 2d       	mov	r17, r13
     83a:	07 c0       	rjmp	.+14     	; 0x84a <__LOCK_REGION_LENGTH__+0x44a>
     83c:	e0 91 e7 03 	lds	r30, 0x03E7	; 0x8003e7 <g_mod0_idle>
     840:	f0 91 e8 03 	lds	r31, 0x03E8	; 0x8003e8 <g_mod0_idle+0x1>
     844:	30 97       	sbiw	r30, 0x00	; 0
     846:	09 f0       	breq	.+2      	; 0x84a <__LOCK_REGION_LENGTH__+0x44a>
     848:	19 95       	eicall
     84a:	15 30       	cpi	r17, 0x05	; 5
     84c:	59 f5       	brne	.+86     	; 0x8a4 <__LOCK_REGION_LENGTH__+0x4a4>
     84e:	99 81       	ldd	r25, Y+1	; 0x01
     850:	80 91 f4 04 	lds	r24, 0x04F4	; 0x8004f4 <g_mod0_slave>
     854:	98 13       	cpse	r25, r24
     856:	2d c4       	rjmp	.+2138   	; 0x10b2 <__LOCK_REGION_LENGTH__+0xcb2>
     858:	8a 81       	ldd	r24, Y+2	; 0x02
     85a:	28 2f       	mov	r18, r24
     85c:	2f 77       	andi	r18, 0x7F	; 127
     85e:	30 e0       	ldi	r19, 0x00	; 0
     860:	2e 15       	cp	r18, r14
     862:	3f 05       	cpc	r19, r15
     864:	09 f0       	breq	.+2      	; 0x868 <__LOCK_REGION_LENGTH__+0x468>
     866:	27 c4       	rjmp	.+2126   	; 0x10b6 <__LOCK_REGION_LENGTH__+0xcb6>
     868:	88 23       	and	r24, r24
     86a:	2c f4       	brge	.+10     	; 0x876 <__LOCK_REGION_LENGTH__+0x476>
     86c:	8b 81       	ldd	r24, Y+3	; 0x03
     86e:	88 23       	and	r24, r24
     870:	09 f4       	brne	.+2      	; 0x874 <__LOCK_REGION_LENGTH__+0x474>
     872:	3f c0       	rjmp	.+126    	; 0x8f2 <__LOCK_REGION_LENGTH__+0x4f2>
     874:	cc c0       	rjmp	.+408    	; 0xa0e <__LOCK_REGION_LENGTH__+0x60e>
     876:	81 31       	cpi	r24, 0x11	; 17
     878:	58 f4       	brcc	.+22     	; 0x890 <__LOCK_REGION_LENGTH__+0x490>
     87a:	8f 30       	cpi	r24, 0x0F	; 15
     87c:	08 f0       	brcs	.+2      	; 0x880 <__LOCK_REGION_LENGTH__+0x480>
     87e:	b7 c3       	rjmp	.+1902   	; 0xfee <__LOCK_REGION_LENGTH__+0xbee>
     880:	81 30       	cpi	r24, 0x01	; 1
     882:	80 f0       	brcs	.+32     	; 0x8a4 <__LOCK_REGION_LENGTH__+0x4a4>
     884:	85 30       	cpi	r24, 0x05	; 5
     886:	68 f0       	brcs	.+26     	; 0x8a2 <__LOCK_REGION_LENGTH__+0x4a2>
     888:	87 30       	cpi	r24, 0x07	; 7
     88a:	08 f4       	brcc	.+2      	; 0x88e <__LOCK_REGION_LENGTH__+0x48e>
     88c:	b0 c3       	rjmp	.+1888   	; 0xfee <__LOCK_REGION_LENGTH__+0xbee>
     88e:	0a c0       	rjmp	.+20     	; 0x8a4 <__LOCK_REGION_LENGTH__+0x4a4>
     890:	87 31       	cpi	r24, 0x17	; 23
     892:	39 f0       	breq	.+14     	; 0x8a2 <__LOCK_REGION_LENGTH__+0x4a2>
     894:	8f 3f       	cpi	r24, 0xFF	; 255
     896:	09 f4       	brne	.+2      	; 0x89a <__LOCK_REGION_LENGTH__+0x49a>
     898:	aa c3       	rjmp	.+1876   	; 0xfee <__LOCK_REGION_LENGTH__+0xbee>
     89a:	86 31       	cpi	r24, 0x16	; 22
     89c:	19 f4       	brne	.+6      	; 0x8a4 <__LOCK_REGION_LENGTH__+0x4a4>
     89e:	05 e0       	ldi	r16, 0x05	; 5
     8a0:	a7 c3       	rjmp	.+1870   	; 0xff0 <__LOCK_REGION_LENGTH__+0xbf0>
     8a2:	0b 81       	ldd	r16, Y+3	; 0x03
     8a4:	0e 94 c9 17 	call	0x2f92	; 0x2f92 <Get_millis>
     8a8:	dc 01       	movw	r26, r24
     8aa:	cb 01       	movw	r24, r22
     8ac:	88 19       	sub	r24, r8
     8ae:	99 09       	sbc	r25, r9
     8b0:	aa 09       	sbc	r26, r10
     8b2:	bb 09       	sbc	r27, r11
     8b4:	89 3c       	cpi	r24, 0xC9	; 201
     8b6:	91 05       	cpc	r25, r1
     8b8:	a1 05       	cpc	r26, r1
     8ba:	b1 05       	cpc	r27, r1
     8bc:	08 f4       	brcc	.+2      	; 0x8c0 <__LOCK_REGION_LENGTH__+0x4c0>
     8be:	ed c3       	rjmp	.+2010   	; 0x109a <__LOCK_REGION_LENGTH__+0xc9a>
     8c0:	80 e0       	ldi	r24, 0x00	; 0
     8c2:	92 e0       	ldi	r25, 0x02	; 2
     8c4:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <UART0_puts>
     8c8:	8a e0       	ldi	r24, 0x0A	; 10
     8ca:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <UART0_putc>
     8ce:	01 11       	cpse	r16, r1
     8d0:	f4 c3       	rjmp	.+2024   	; 0x10ba <__LOCK_REGION_LENGTH__+0xcba>
     8d2:	82 ee       	ldi	r24, 0xE2	; 226
     8d4:	81 11       	cpse	r24, r1
     8d6:	9b c0       	rjmp	.+310    	; 0xa0e <__LOCK_REGION_LENGTH__+0x60e>
     8d8:	15 30       	cpi	r17, 0x05	; 5
     8da:	08 f4       	brcc	.+2      	; 0x8de <__LOCK_REGION_LENGTH__+0x4de>
     8dc:	a9 c3       	rjmp	.+1874   	; 0x1030 <__LOCK_REGION_LENGTH__+0xc30>
     8de:	a1 2e       	mov	r10, r17
     8e0:	b1 2c       	mov	r11, r1
     8e2:	75 01       	movw	r14, r10
     8e4:	f2 e0       	ldi	r31, 0x02	; 2
     8e6:	ef 1a       	sub	r14, r31
     8e8:	f1 08       	sbc	r15, r1
     8ea:	1e 14       	cp	r1, r14
     8ec:	1f 04       	cpc	r1, r15
     8ee:	5c f0       	brlt	.+22     	; 0x906 <__LOCK_REGION_LENGTH__+0x506>
     8f0:	8e c3       	rjmp	.+1820   	; 0x100e <__LOCK_REGION_LENGTH__+0xc0e>
     8f2:	0f 2e       	mov	r0, r31
     8f4:	f3 e0       	ldi	r31, 0x03	; 3
     8f6:	ef 2e       	mov	r14, r31
     8f8:	f1 2c       	mov	r15, r1
     8fa:	f0 2d       	mov	r31, r0
     8fc:	0f 2e       	mov	r0, r31
     8fe:	f5 e0       	ldi	r31, 0x05	; 5
     900:	af 2e       	mov	r10, r31
     902:	b1 2c       	mov	r11, r1
     904:	f0 2d       	mov	r31, r0
     906:	20 e0       	ldi	r18, 0x00	; 0
     908:	30 e0       	ldi	r19, 0x00	; 0
     90a:	8f ef       	ldi	r24, 0xFF	; 255
     90c:	9f ef       	ldi	r25, 0xFF	; 255
     90e:	10 e0       	ldi	r17, 0x00	; 0
     910:	e1 e0       	ldi	r30, 0x01	; 1
     912:	f0 e0       	ldi	r31, 0x00	; 0
     914:	ec 0f       	add	r30, r28
     916:	fd 1f       	adc	r31, r29
     918:	e2 0f       	add	r30, r18
     91a:	f3 1f       	adc	r31, r19
     91c:	60 81       	ld	r22, Z
     91e:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <crc16_update>
     922:	1f 5f       	subi	r17, 0xFF	; 255
     924:	21 2f       	mov	r18, r17
     926:	30 e0       	ldi	r19, 0x00	; 0
     928:	2e 15       	cp	r18, r14
     92a:	3f 05       	cpc	r19, r15
     92c:	8c f3       	brlt	.-30     	; 0x910 <__LOCK_REGION_LENGTH__+0x510>
     92e:	71 c3       	rjmp	.+1762   	; 0x1012 <__LOCK_REGION_LENGTH__+0xc12>
     930:	89 2f       	mov	r24, r25
     932:	99 27       	eor	r25, r25
     934:	fe 01       	movw	r30, r28
     936:	ea 0d       	add	r30, r10
     938:	fb 1d       	adc	r31, r11
     93a:	20 81       	ld	r18, Z
     93c:	30 e0       	ldi	r19, 0x00	; 0
     93e:	82 17       	cp	r24, r18
     940:	93 07       	cpc	r25, r19
     942:	09 f0       	breq	.+2      	; 0x946 <__LOCK_REGION_LENGTH__+0x546>
     944:	73 c3       	rjmp	.+1766   	; 0x102c <__LOCK_REGION_LENGTH__+0xc2c>
     946:	74 c3       	rjmp	.+1768   	; 0x1030 <__LOCK_REGION_LENGTH__+0xc30>
     948:	9b 81       	ldd	r25, Y+3	; 0x03
     94a:	96 95       	lsr	r25
     94c:	e9 f5       	brne	.+122    	; 0x9c8 <__LOCK_REGION_LENGTH__+0x5c8>
     94e:	80 e0       	ldi	r24, 0x00	; 0
     950:	5e c0       	rjmp	.+188    	; 0xa0e <__LOCK_REGION_LENGTH__+0x60e>
     952:	7b 81       	ldd	r23, Y+3	; 0x03
     954:	97 2f       	mov	r25, r23
     956:	96 95       	lsr	r25
     958:	09 f4       	brne	.+2      	; 0x95c <__LOCK_REGION_LENGTH__+0x55c>
     95a:	78 c3       	rjmp	.+1776   	; 0x104c <__LOCK_REGION_LENGTH__+0xc4c>
     95c:	fe 01       	movw	r30, r28
     95e:	31 96       	adiw	r30, 0x01	; 1
     960:	40 e0       	ldi	r20, 0x00	; 0
     962:	50 e0       	ldi	r21, 0x00	; 0
     964:	80 e0       	ldi	r24, 0x00	; 0
     966:	80 34       	cpi	r24, 0x40	; 64
     968:	70 f4       	brcc	.+28     	; 0x986 <__LOCK_REGION_LENGTH__+0x586>
     96a:	24 81       	ldd	r18, Z+4	; 0x04
     96c:	30 e0       	ldi	r19, 0x00	; 0
     96e:	32 2f       	mov	r19, r18
     970:	22 27       	eor	r18, r18
     972:	63 81       	ldd	r22, Z+3	; 0x03
     974:	26 2b       	or	r18, r22
     976:	da 01       	movw	r26, r20
     978:	aa 0f       	add	r26, r26
     97a:	bb 1f       	adc	r27, r27
     97c:	a0 59       	subi	r26, 0x90	; 144
     97e:	bb 4f       	sbci	r27, 0xFB	; 251
     980:	11 96       	adiw	r26, 0x01	; 1
     982:	3c 93       	st	X, r19
     984:	2e 93       	st	-X, r18
     986:	8f 5f       	subi	r24, 0xFF	; 255
     988:	4f 5f       	subi	r20, 0xFF	; 255
     98a:	5f 4f       	sbci	r21, 0xFF	; 255
     98c:	32 96       	adiw	r30, 0x02	; 2
     98e:	89 13       	cpse	r24, r25
     990:	ea cf       	rjmp	.-44     	; 0x966 <__LOCK_REGION_LENGTH__+0x566>
     992:	8f ef       	ldi	r24, 0xFF	; 255
     994:	89 0f       	add	r24, r25
     996:	80 93 e9 03 	sts	0x03E9, r24	; 0x8003e9 <g_mod0_response_buffer_length>
     99a:	70 ff       	sbrs	r23, 0
     99c:	35 c0       	rjmp	.+106    	; 0xa08 <__LOCK_REGION_LENGTH__+0x608>
     99e:	90 34       	cpi	r25, 0x40	; 64
     9a0:	70 f4       	brcc	.+28     	; 0x9be <__LOCK_REGION_LENGTH__+0x5be>
     9a2:	29 2f       	mov	r18, r25
     9a4:	30 e0       	ldi	r19, 0x00	; 0
     9a6:	22 0f       	add	r18, r18
     9a8:	33 1f       	adc	r19, r19
     9aa:	fe 01       	movw	r30, r28
     9ac:	e2 0f       	add	r30, r18
     9ae:	f3 1f       	adc	r31, r19
     9b0:	44 81       	ldd	r20, Z+4	; 0x04
     9b2:	50 e0       	ldi	r21, 0x00	; 0
     9b4:	f9 01       	movw	r30, r18
     9b6:	e0 59       	subi	r30, 0x90	; 144
     9b8:	fb 4f       	sbci	r31, 0xFB	; 251
     9ba:	51 83       	std	Z+1, r21	; 0x01
     9bc:	40 83       	st	Z, r20
     9be:	9f 5f       	subi	r25, 0xFF	; 255
     9c0:	90 93 e9 03 	sts	0x03E9, r25	; 0x8003e9 <g_mod0_response_buffer_length>
     9c4:	80 e0       	ldi	r24, 0x00	; 0
     9c6:	23 c0       	rjmp	.+70     	; 0xa0e <__LOCK_REGION_LENGTH__+0x60e>
     9c8:	fe 01       	movw	r30, r28
     9ca:	31 96       	adiw	r30, 0x01	; 1
     9cc:	40 e0       	ldi	r20, 0x00	; 0
     9ce:	50 e0       	ldi	r21, 0x00	; 0
     9d0:	80 e0       	ldi	r24, 0x00	; 0
     9d2:	80 34       	cpi	r24, 0x40	; 64
     9d4:	70 f4       	brcc	.+28     	; 0x9f2 <__LOCK_REGION_LENGTH__+0x5f2>
     9d6:	23 81       	ldd	r18, Z+3	; 0x03
     9d8:	30 e0       	ldi	r19, 0x00	; 0
     9da:	32 2f       	mov	r19, r18
     9dc:	22 27       	eor	r18, r18
     9de:	64 81       	ldd	r22, Z+4	; 0x04
     9e0:	26 2b       	or	r18, r22
     9e2:	da 01       	movw	r26, r20
     9e4:	aa 0f       	add	r26, r26
     9e6:	bb 1f       	adc	r27, r27
     9e8:	a0 59       	subi	r26, 0x90	; 144
     9ea:	bb 4f       	sbci	r27, 0xFB	; 251
     9ec:	11 96       	adiw	r26, 0x01	; 1
     9ee:	3c 93       	st	X, r19
     9f0:	2e 93       	st	-X, r18
     9f2:	8f 5f       	subi	r24, 0xFF	; 255
     9f4:	4f 5f       	subi	r20, 0xFF	; 255
     9f6:	5f 4f       	sbci	r21, 0xFF	; 255
     9f8:	32 96       	adiw	r30, 0x02	; 2
     9fa:	89 13       	cpse	r24, r25
     9fc:	ea cf       	rjmp	.-44     	; 0x9d2 <__LOCK_REGION_LENGTH__+0x5d2>
     9fe:	91 50       	subi	r25, 0x01	; 1
     a00:	90 93 e9 03 	sts	0x03E9, r25	; 0x8003e9 <g_mod0_response_buffer_length>
     a04:	80 e0       	ldi	r24, 0x00	; 0
     a06:	03 c0       	rjmp	.+6      	; 0xa0e <__LOCK_REGION_LENGTH__+0x60e>
     a08:	80 e0       	ldi	r24, 0x00	; 0
     a0a:	01 c0       	rjmp	.+2      	; 0xa0e <__LOCK_REGION_LENGTH__+0x60e>
     a0c:	80 e0       	ldi	r24, 0x00	; 0
     a0e:	10 92 eb 03 	sts	0x03EB, r1	; 0x8003eb <g_mod0_transmit_buffer_index>
     a12:	10 92 ea 03 	sts	0x03EA, r1	; 0x8003ea <g_mod0_response_buffer_index>
     a16:	59 c3       	rjmp	.+1714   	; 0x10ca <__LOCK_REGION_LENGTH__+0xcca>
     a18:	81 30       	cpi	r24, 0x01	; 1
     a1a:	09 f0       	breq	.+2      	; 0xa1e <__LOCK_REGION_LENGTH__+0x61e>
     a1c:	e6 c2       	rjmp	.+1484   	; 0xfea <__LOCK_REGION_LENGTH__+0xbea>
     a1e:	80 91 da 03 	lds	r24, 0x03DA	; 0x8003da <g_mod1_slave>
     a22:	89 83       	std	Y+1, r24	; 0x01
     a24:	2f ef       	ldi	r18, 0xFF	; 255
     a26:	62 13       	cpse	r22, r18
     a28:	06 c0       	rjmp	.+12     	; 0xa36 <__LOCK_REGION_LENGTH__+0x636>
     a2a:	8f e0       	ldi	r24, 0x0F	; 15
     a2c:	8a 83       	std	Y+2, r24	; 0x02
     a2e:	68 94       	set
     a30:	bb 24       	eor	r11, r11
     a32:	b1 f8       	bld	r11, 1
     a34:	32 c0       	rjmp	.+100    	; 0xa9a <__LOCK_REGION_LENGTH__+0x69a>
     a36:	6a 83       	std	Y+2, r22	; 0x02
     a38:	81 e0       	ldi	r24, 0x01	; 1
     a3a:	68 17       	cp	r22, r24
     a3c:	b8 f0       	brcs	.+46     	; 0xa6c <__LOCK_REGION_LENGTH__+0x66c>
     a3e:	94 e0       	ldi	r25, 0x04	; 4
     a40:	96 17       	cp	r25, r22
     a42:	18 f4       	brcc	.+6      	; 0xa4a <__LOCK_REGION_LENGTH__+0x64a>
     a44:	a7 e1       	ldi	r26, 0x17	; 23
     a46:	6a 13       	cpse	r22, r26
     a48:	11 c0       	rjmp	.+34     	; 0xa6c <__LOCK_REGION_LENGTH__+0x66c>
     a4a:	80 91 d8 03 	lds	r24, 0x03D8	; 0x8003d8 <g_mod1_read_address>
     a4e:	90 91 d9 03 	lds	r25, 0x03D9	; 0x8003d9 <g_mod1_read_address+0x1>
     a52:	9b 83       	std	Y+3, r25	; 0x03
     a54:	8c 83       	std	Y+4, r24	; 0x04
     a56:	80 91 d6 03 	lds	r24, 0x03D6	; 0x8003d6 <g_mod1_read_qty>
     a5a:	90 91 d7 03 	lds	r25, 0x03D7	; 0x8003d7 <g_mod1_read_qty+0x1>
     a5e:	9d 83       	std	Y+5, r25	; 0x05
     a60:	8e 83       	std	Y+6, r24	; 0x06
     a62:	0f 2e       	mov	r0, r31
     a64:	f6 e0       	ldi	r31, 0x06	; 6
     a66:	bf 2e       	mov	r11, r31
     a68:	f0 2d       	mov	r31, r0
     a6a:	03 c0       	rjmp	.+6      	; 0xa72 <__LOCK_REGION_LENGTH__+0x672>
     a6c:	68 94       	set
     a6e:	bb 24       	eor	r11, r11
     a70:	b1 f8       	bld	r11, 1
     a72:	b0 e1       	ldi	r27, 0x10	; 16
     a74:	bd 15       	cp	r27, r13
     a76:	40 f0       	brcs	.+16     	; 0xa88 <__LOCK_REGION_LENGTH__+0x688>
     a78:	ef e0       	ldi	r30, 0x0F	; 15
     a7a:	de 16       	cp	r13, r30
     a7c:	70 f4       	brcc	.+28     	; 0xa9a <__LOCK_REGION_LENGTH__+0x69a>
     a7e:	8b ef       	ldi	r24, 0xFB	; 251
     a80:	8d 0d       	add	r24, r13
     a82:	82 30       	cpi	r24, 0x02	; 2
     a84:	00 f5       	brcc	.+64     	; 0xac6 <__LOCK_REGION_LENGTH__+0x6c6>
     a86:	09 c0       	rjmp	.+18     	; 0xa9a <__LOCK_REGION_LENGTH__+0x69a>
     a88:	f6 e1       	ldi	r31, 0x16	; 22
     a8a:	df 16       	cp	r13, r31
     a8c:	e0 f0       	brcs	.+56     	; 0xac6 <__LOCK_REGION_LENGTH__+0x6c6>
     a8e:	27 e1       	ldi	r18, 0x17	; 23
     a90:	2d 15       	cp	r18, r13
     a92:	18 f4       	brcc	.+6      	; 0xa9a <__LOCK_REGION_LENGTH__+0x69a>
     a94:	8f ef       	ldi	r24, 0xFF	; 255
     a96:	d8 12       	cpse	r13, r24
     a98:	16 c0       	rjmp	.+44     	; 0xac6 <__LOCK_REGION_LENGTH__+0x6c6>
     a9a:	90 91 54 03 	lds	r25, 0x0354	; 0x800354 <g_mod1_write_address>
     a9e:	80 91 55 03 	lds	r24, 0x0355	; 0x800355 <g_mod1_write_address+0x1>
     aa2:	e1 e0       	ldi	r30, 0x01	; 1
     aa4:	f0 e0       	ldi	r31, 0x00	; 0
     aa6:	ec 0f       	add	r30, r28
     aa8:	fd 1f       	adc	r31, r29
     aaa:	eb 0d       	add	r30, r11
     aac:	f1 1d       	adc	r31, r1
     aae:	80 83       	st	Z, r24
     ab0:	81 e0       	ldi	r24, 0x01	; 1
     ab2:	8b 0d       	add	r24, r11
     ab4:	e1 e0       	ldi	r30, 0x01	; 1
     ab6:	f0 e0       	ldi	r31, 0x00	; 0
     ab8:	ec 0f       	add	r30, r28
     aba:	fd 1f       	adc	r31, r29
     abc:	e8 0f       	add	r30, r24
     abe:	f1 1d       	adc	r31, r1
     ac0:	b3 94       	inc	r11
     ac2:	b3 94       	inc	r11
     ac4:	90 83       	st	Z, r25
     ac6:	90 e1       	ldi	r25, 0x10	; 16
     ac8:	d9 16       	cp	r13, r25
     aca:	09 f4       	brne	.+2      	; 0xace <__LOCK_REGION_LENGTH__+0x6ce>
     acc:	ad c0       	rjmp	.+346    	; 0xc28 <__LOCK_REGION_LENGTH__+0x828>
     ace:	9d 15       	cp	r25, r13
     ad0:	58 f0       	brcs	.+22     	; 0xae8 <__LOCK_REGION_LENGTH__+0x6e8>
     ad2:	a6 e0       	ldi	r26, 0x06	; 6
     ad4:	da 16       	cp	r13, r26
     ad6:	61 f1       	breq	.+88     	; 0xb30 <__LOCK_REGION_LENGTH__+0x730>
     ad8:	bf e0       	ldi	r27, 0x0F	; 15
     ada:	db 16       	cp	r13, r27
     adc:	09 f4       	brne	.+2      	; 0xae0 <__LOCK_REGION_LENGTH__+0x6e0>
     ade:	41 c0       	rjmp	.+130    	; 0xb62 <__LOCK_REGION_LENGTH__+0x762>
     ae0:	e5 e0       	ldi	r30, 0x05	; 5
     ae2:	de 12       	cpse	r13, r30
     ae4:	1b c1       	rjmp	.+566    	; 0xd1c <__LOCK_REGION_LENGTH__+0x91c>
     ae6:	0d c0       	rjmp	.+26     	; 0xb02 <__LOCK_REGION_LENGTH__+0x702>
     ae8:	f7 e1       	ldi	r31, 0x17	; 23
     aea:	df 16       	cp	r13, r31
     aec:	09 f4       	brne	.+2      	; 0xaf0 <__LOCK_REGION_LENGTH__+0x6f0>
     aee:	9c c0       	rjmp	.+312    	; 0xc28 <__LOCK_REGION_LENGTH__+0x828>
     af0:	2f ef       	ldi	r18, 0xFF	; 255
     af2:	d2 16       	cp	r13, r18
     af4:	09 f4       	brne	.+2      	; 0xaf8 <__LOCK_REGION_LENGTH__+0x6f8>
     af6:	98 c0       	rjmp	.+304    	; 0xc28 <__LOCK_REGION_LENGTH__+0x828>
     af8:	86 e1       	ldi	r24, 0x16	; 22
     afa:	d8 16       	cp	r13, r24
     afc:	09 f4       	brne	.+2      	; 0xb00 <__LOCK_REGION_LENGTH__+0x700>
     afe:	e0 c0       	rjmp	.+448    	; 0xcc0 <__LOCK_REGION_LENGTH__+0x8c0>
     b00:	0d c1       	rjmp	.+538    	; 0xd1c <__LOCK_REGION_LENGTH__+0x91c>
     b02:	90 91 52 03 	lds	r25, 0x0352	; 0x800352 <g_mod1_write_qty>
     b06:	80 91 53 03 	lds	r24, 0x0353	; 0x800353 <g_mod1_write_qty+0x1>
     b0a:	e1 e0       	ldi	r30, 0x01	; 1
     b0c:	f0 e0       	ldi	r31, 0x00	; 0
     b0e:	ec 0f       	add	r30, r28
     b10:	fd 1f       	adc	r31, r29
     b12:	eb 0d       	add	r30, r11
     b14:	f1 1d       	adc	r31, r1
     b16:	80 83       	st	Z, r24
     b18:	81 e0       	ldi	r24, 0x01	; 1
     b1a:	8b 0d       	add	r24, r11
     b1c:	e1 e0       	ldi	r30, 0x01	; 1
     b1e:	f0 e0       	ldi	r31, 0x00	; 0
     b20:	ec 0f       	add	r30, r28
     b22:	fd 1f       	adc	r31, r29
     b24:	e8 0f       	add	r30, r24
     b26:	f1 1d       	adc	r31, r1
     b28:	b3 94       	inc	r11
     b2a:	b3 94       	inc	r11
     b2c:	90 83       	st	Z, r25
     b2e:	f6 c0       	rjmp	.+492    	; 0xd1c <__LOCK_REGION_LENGTH__+0x91c>
     b30:	e2 ed       	ldi	r30, 0xD2	; 210
     b32:	f2 e0       	ldi	r31, 0x02	; 2
     b34:	80 81       	ld	r24, Z
     b36:	91 81       	ldd	r25, Z+1	; 0x01
     b38:	a1 e0       	ldi	r26, 0x01	; 1
     b3a:	b0 e0       	ldi	r27, 0x00	; 0
     b3c:	ac 0f       	add	r26, r28
     b3e:	bd 1f       	adc	r27, r29
     b40:	ab 0d       	add	r26, r11
     b42:	b1 1d       	adc	r27, r1
     b44:	9c 93       	st	X, r25
     b46:	20 81       	ld	r18, Z
     b48:	31 81       	ldd	r19, Z+1	; 0x01
     b4a:	81 e0       	ldi	r24, 0x01	; 1
     b4c:	8b 0d       	add	r24, r11
     b4e:	e1 e0       	ldi	r30, 0x01	; 1
     b50:	f0 e0       	ldi	r31, 0x00	; 0
     b52:	ec 0f       	add	r30, r28
     b54:	fd 1f       	adc	r31, r29
     b56:	e8 0f       	add	r30, r24
     b58:	f1 1d       	adc	r31, r1
     b5a:	b3 94       	inc	r11
     b5c:	b3 94       	inc	r11
     b5e:	20 83       	st	Z, r18
     b60:	dd c0       	rjmp	.+442    	; 0xd1c <__LOCK_REGION_LENGTH__+0x91c>
     b62:	80 91 52 03 	lds	r24, 0x0352	; 0x800352 <g_mod1_write_qty>
     b66:	90 91 53 03 	lds	r25, 0x0353	; 0x800353 <g_mod1_write_qty+0x1>
     b6a:	e1 e0       	ldi	r30, 0x01	; 1
     b6c:	f0 e0       	ldi	r31, 0x00	; 0
     b6e:	ec 0f       	add	r30, r28
     b70:	fd 1f       	adc	r31, r29
     b72:	eb 0d       	add	r30, r11
     b74:	f1 1d       	adc	r31, r1
     b76:	90 83       	st	Z, r25
     b78:	22 e0       	ldi	r18, 0x02	; 2
     b7a:	2b 0d       	add	r18, r11
     b7c:	31 e0       	ldi	r19, 0x01	; 1
     b7e:	3b 0d       	add	r19, r11
     b80:	e1 e0       	ldi	r30, 0x01	; 1
     b82:	f0 e0       	ldi	r31, 0x00	; 0
     b84:	ec 0f       	add	r30, r28
     b86:	fd 1f       	adc	r31, r29
     b88:	e3 0f       	add	r30, r19
     b8a:	f1 1d       	adc	r31, r1
     b8c:	80 83       	st	Z, r24
     b8e:	ac 01       	movw	r20, r24
     b90:	47 70       	andi	r20, 0x07	; 7
     b92:	55 27       	eor	r21, r21
     b94:	45 2b       	or	r20, r21
     b96:	49 f0       	breq	.+18     	; 0xbaa <__LOCK_REGION_LENGTH__+0x7aa>
     b98:	96 95       	lsr	r25
     b9a:	87 95       	ror	r24
     b9c:	96 95       	lsr	r25
     b9e:	87 95       	ror	r24
     ba0:	96 95       	lsr	r25
     ba2:	87 95       	ror	r24
     ba4:	91 e0       	ldi	r25, 0x01	; 1
     ba6:	98 0f       	add	r25, r24
     ba8:	07 c0       	rjmp	.+14     	; 0xbb8 <__LOCK_REGION_LENGTH__+0x7b8>
     baa:	96 95       	lsr	r25
     bac:	87 95       	ror	r24
     bae:	96 95       	lsr	r25
     bb0:	87 95       	ror	r24
     bb2:	96 95       	lsr	r25
     bb4:	87 95       	ror	r24
     bb6:	98 2f       	mov	r25, r24
     bb8:	a3 e0       	ldi	r26, 0x03	; 3
     bba:	ba 0e       	add	r11, r26
     bbc:	fe 01       	movw	r30, r28
     bbe:	e2 0f       	add	r30, r18
     bc0:	f1 1d       	adc	r31, r1
     bc2:	91 83       	std	Z+1, r25	; 0x01
     bc4:	99 23       	and	r25, r25
     bc6:	09 f4       	brne	.+2      	; 0xbca <__LOCK_REGION_LENGTH__+0x7ca>
     bc8:	a9 c0       	rjmp	.+338    	; 0xd1c <__LOCK_REGION_LENGTH__+0x91c>
     bca:	80 e0       	ldi	r24, 0x00	; 0
     bcc:	28 2f       	mov	r18, r24
     bce:	21 70       	andi	r18, 0x01	; 1
     bd0:	80 ff       	sbrs	r24, 0
     bd2:	03 c0       	rjmp	.+6      	; 0xbda <__LOCK_REGION_LENGTH__+0x7da>
     bd4:	21 30       	cpi	r18, 0x01	; 1
     bd6:	99 f0       	breq	.+38     	; 0xbfe <__LOCK_REGION_LENGTH__+0x7fe>
     bd8:	23 c0       	rjmp	.+70     	; 0xc20 <__LOCK_REGION_LENGTH__+0x820>
     bda:	e8 2f       	mov	r30, r24
     bdc:	e6 95       	lsr	r30
     bde:	f0 e0       	ldi	r31, 0x00	; 0
     be0:	ee 0f       	add	r30, r30
     be2:	ff 1f       	adc	r31, r31
     be4:	ee 52       	subi	r30, 0x2E	; 46
     be6:	fd 4f       	sbci	r31, 0xFD	; 253
     be8:	20 81       	ld	r18, Z
     bea:	31 81       	ldd	r19, Z+1	; 0x01
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	ec 0f       	add	r30, r28
     bf2:	fd 1f       	adc	r31, r29
     bf4:	eb 0d       	add	r30, r11
     bf6:	f1 1d       	adc	r31, r1
     bf8:	20 83       	st	Z, r18
     bfa:	b3 94       	inc	r11
     bfc:	11 c0       	rjmp	.+34     	; 0xc20 <__LOCK_REGION_LENGTH__+0x820>
     bfe:	e8 2f       	mov	r30, r24
     c00:	e6 95       	lsr	r30
     c02:	f0 e0       	ldi	r31, 0x00	; 0
     c04:	ee 0f       	add	r30, r30
     c06:	ff 1f       	adc	r31, r31
     c08:	ee 52       	subi	r30, 0x2E	; 46
     c0a:	fd 4f       	sbci	r31, 0xFD	; 253
     c0c:	20 81       	ld	r18, Z
     c0e:	31 81       	ldd	r19, Z+1	; 0x01
     c10:	e1 e0       	ldi	r30, 0x01	; 1
     c12:	f0 e0       	ldi	r31, 0x00	; 0
     c14:	ec 0f       	add	r30, r28
     c16:	fd 1f       	adc	r31, r29
     c18:	eb 0d       	add	r30, r11
     c1a:	f1 1d       	adc	r31, r1
     c1c:	30 83       	st	Z, r19
     c1e:	b3 94       	inc	r11
     c20:	8f 5f       	subi	r24, 0xFF	; 255
     c22:	98 13       	cpse	r25, r24
     c24:	d3 cf       	rjmp	.-90     	; 0xbcc <__LOCK_REGION_LENGTH__+0x7cc>
     c26:	7a c0       	rjmp	.+244    	; 0xd1c <__LOCK_REGION_LENGTH__+0x91c>
     c28:	80 91 52 03 	lds	r24, 0x0352	; 0x800352 <g_mod1_write_qty>
     c2c:	90 91 53 03 	lds	r25, 0x0353	; 0x800353 <g_mod1_write_qty+0x1>
     c30:	e1 e0       	ldi	r30, 0x01	; 1
     c32:	f0 e0       	ldi	r31, 0x00	; 0
     c34:	ec 0f       	add	r30, r28
     c36:	fd 1f       	adc	r31, r29
     c38:	eb 0d       	add	r30, r11
     c3a:	f1 1d       	adc	r31, r1
     c3c:	90 83       	st	Z, r25
     c3e:	21 e0       	ldi	r18, 0x01	; 1
     c40:	2b 0d       	add	r18, r11
     c42:	e1 e0       	ldi	r30, 0x01	; 1
     c44:	f0 e0       	ldi	r31, 0x00	; 0
     c46:	ec 0f       	add	r30, r28
     c48:	fd 1f       	adc	r31, r29
     c4a:	e2 0f       	add	r30, r18
     c4c:	f1 1d       	adc	r31, r1
     c4e:	80 83       	st	Z, r24
     c50:	22 e0       	ldi	r18, 0x02	; 2
     c52:	2b 0d       	add	r18, r11
     c54:	e1 e0       	ldi	r30, 0x01	; 1
     c56:	f0 e0       	ldi	r31, 0x00	; 0
     c58:	ec 0f       	add	r30, r28
     c5a:	fd 1f       	adc	r31, r29
     c5c:	e2 0f       	add	r30, r18
     c5e:	f1 1d       	adc	r31, r1
     c60:	b3 e0       	ldi	r27, 0x03	; 3
     c62:	bb 0e       	add	r11, r27
     c64:	28 2f       	mov	r18, r24
     c66:	22 0f       	add	r18, r18
     c68:	20 83       	st	Z, r18
     c6a:	ac 01       	movw	r20, r24
     c6c:	55 27       	eor	r21, r21
     c6e:	14 16       	cp	r1, r20
     c70:	15 06       	cpc	r1, r21
     c72:	0c f0       	brlt	.+2      	; 0xc76 <__LOCK_REGION_LENGTH__+0x876>
     c74:	53 c0       	rjmp	.+166    	; 0xd1c <__LOCK_REGION_LENGTH__+0x91c>
     c76:	80 e0       	ldi	r24, 0x00	; 0
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	20 e0       	ldi	r18, 0x00	; 0
     c7c:	88 0f       	add	r24, r24
     c7e:	99 1f       	adc	r25, r25
     c80:	fc 01       	movw	r30, r24
     c82:	ee 52       	subi	r30, 0x2E	; 46
     c84:	fd 4f       	sbci	r31, 0xFD	; 253
     c86:	80 81       	ld	r24, Z
     c88:	91 81       	ldd	r25, Z+1	; 0x01
     c8a:	a1 e0       	ldi	r26, 0x01	; 1
     c8c:	b0 e0       	ldi	r27, 0x00	; 0
     c8e:	ac 0f       	add	r26, r28
     c90:	bd 1f       	adc	r27, r29
     c92:	ab 0d       	add	r26, r11
     c94:	b1 1d       	adc	r27, r1
     c96:	9c 93       	st	X, r25
     c98:	60 81       	ld	r22, Z
     c9a:	71 81       	ldd	r23, Z+1	; 0x01
     c9c:	81 e0       	ldi	r24, 0x01	; 1
     c9e:	8b 0d       	add	r24, r11
     ca0:	e1 e0       	ldi	r30, 0x01	; 1
     ca2:	f0 e0       	ldi	r31, 0x00	; 0
     ca4:	ec 0f       	add	r30, r28
     ca6:	fd 1f       	adc	r31, r29
     ca8:	e8 0f       	add	r30, r24
     caa:	f1 1d       	adc	r31, r1
     cac:	b3 94       	inc	r11
     cae:	b3 94       	inc	r11
     cb0:	60 83       	st	Z, r22
     cb2:	2f 5f       	subi	r18, 0xFF	; 255
     cb4:	82 2f       	mov	r24, r18
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	84 17       	cp	r24, r20
     cba:	95 07       	cpc	r25, r21
     cbc:	fc f2       	brlt	.-66     	; 0xc7c <__LOCK_REGION_LENGTH__+0x87c>
     cbe:	2e c0       	rjmp	.+92     	; 0xd1c <__LOCK_REGION_LENGTH__+0x91c>
     cc0:	e2 ed       	ldi	r30, 0xD2	; 210
     cc2:	f2 e0       	ldi	r31, 0x02	; 2
     cc4:	80 81       	ld	r24, Z
     cc6:	91 81       	ldd	r25, Z+1	; 0x01
     cc8:	a1 e0       	ldi	r26, 0x01	; 1
     cca:	b0 e0       	ldi	r27, 0x00	; 0
     ccc:	ac 0f       	add	r26, r28
     cce:	bd 1f       	adc	r27, r29
     cd0:	ab 0d       	add	r26, r11
     cd2:	b1 1d       	adc	r27, r1
     cd4:	9c 93       	st	X, r25
     cd6:	80 81       	ld	r24, Z
     cd8:	91 81       	ldd	r25, Z+1	; 0x01
     cda:	91 e0       	ldi	r25, 0x01	; 1
     cdc:	9b 0d       	add	r25, r11
     cde:	a1 e0       	ldi	r26, 0x01	; 1
     ce0:	b0 e0       	ldi	r27, 0x00	; 0
     ce2:	ac 0f       	add	r26, r28
     ce4:	bd 1f       	adc	r27, r29
     ce6:	a9 0f       	add	r26, r25
     ce8:	b1 1d       	adc	r27, r1
     cea:	8c 93       	st	X, r24
     cec:	82 81       	ldd	r24, Z+2	; 0x02
     cee:	93 81       	ldd	r25, Z+3	; 0x03
     cf0:	82 e0       	ldi	r24, 0x02	; 2
     cf2:	8b 0d       	add	r24, r11
     cf4:	a1 e0       	ldi	r26, 0x01	; 1
     cf6:	b0 e0       	ldi	r27, 0x00	; 0
     cf8:	ac 0f       	add	r26, r28
     cfa:	bd 1f       	adc	r27, r29
     cfc:	a8 0f       	add	r26, r24
     cfe:	b1 1d       	adc	r27, r1
     d00:	9c 93       	st	X, r25
     d02:	22 81       	ldd	r18, Z+2	; 0x02
     d04:	33 81       	ldd	r19, Z+3	; 0x03
     d06:	83 e0       	ldi	r24, 0x03	; 3
     d08:	8b 0d       	add	r24, r11
     d0a:	e1 e0       	ldi	r30, 0x01	; 1
     d0c:	f0 e0       	ldi	r31, 0x00	; 0
     d0e:	ec 0f       	add	r30, r28
     d10:	fd 1f       	adc	r31, r29
     d12:	e8 0f       	add	r30, r24
     d14:	f1 1d       	adc	r31, r1
     d16:	84 e0       	ldi	r24, 0x04	; 4
     d18:	b8 0e       	add	r11, r24
     d1a:	20 83       	st	Z, r18
     d1c:	bb 20       	and	r11, r11
     d1e:	b9 f0       	breq	.+46     	; 0xd4e <__LOCK_REGION_LENGTH__+0x94e>
     d20:	8e 01       	movw	r16, r28
     d22:	0f 5f       	subi	r16, 0xFF	; 255
     d24:	1f 4f       	sbci	r17, 0xFF	; 255
     d26:	ee 24       	eor	r14, r14
     d28:	ea 94       	dec	r14
     d2a:	eb 0c       	add	r14, r11
     d2c:	f1 2c       	mov	r15, r1
     d2e:	9f ef       	ldi	r25, 0xFF	; 255
     d30:	e9 1a       	sub	r14, r25
     d32:	f9 0a       	sbc	r15, r25
     d34:	e0 0e       	add	r14, r16
     d36:	f1 1e       	adc	r15, r17
     d38:	8f ef       	ldi	r24, 0xFF	; 255
     d3a:	9f ef       	ldi	r25, 0xFF	; 255
     d3c:	d8 01       	movw	r26, r16
     d3e:	6d 91       	ld	r22, X+
     d40:	8d 01       	movw	r16, r26
     d42:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <crc16_update>
     d46:	0e 15       	cp	r16, r14
     d48:	1f 05       	cpc	r17, r15
     d4a:	c1 f7       	brne	.-16     	; 0xd3c <__LOCK_REGION_LENGTH__+0x93c>
     d4c:	02 c0       	rjmp	.+4      	; 0xd52 <__LOCK_REGION_LENGTH__+0x952>
     d4e:	8f ef       	ldi	r24, 0xFF	; 255
     d50:	9f ef       	ldi	r25, 0xFF	; 255
     d52:	ee 24       	eor	r14, r14
     d54:	e3 94       	inc	r14
     d56:	eb 0c       	add	r14, r11
     d58:	e1 e0       	ldi	r30, 0x01	; 1
     d5a:	f0 e0       	ldi	r31, 0x00	; 0
     d5c:	ec 0f       	add	r30, r28
     d5e:	fd 1f       	adc	r31, r29
     d60:	eb 0d       	add	r30, r11
     d62:	f1 1d       	adc	r31, r1
     d64:	80 83       	st	Z, r24
     d66:	b3 94       	inc	r11
     d68:	b3 94       	inc	r11
     d6a:	e1 e0       	ldi	r30, 0x01	; 1
     d6c:	f0 e0       	ldi	r31, 0x00	; 0
     d6e:	ec 0f       	add	r30, r28
     d70:	fd 1f       	adc	r31, r29
     d72:	ee 0d       	add	r30, r14
     d74:	f1 1d       	adc	r31, r1
     d76:	90 83       	st	Z, r25
     d78:	e1 e0       	ldi	r30, 0x01	; 1
     d7a:	f0 e0       	ldi	r31, 0x00	; 0
     d7c:	ec 0f       	add	r30, r28
     d7e:	fd 1f       	adc	r31, r29
     d80:	eb 0d       	add	r30, r11
     d82:	f1 1d       	adc	r31, r1
     d84:	10 82       	st	Z, r1
     d86:	e0 91 c5 02 	lds	r30, 0x02C5	; 0x8002c5 <g_mod1_Serial_getc>
     d8a:	f0 91 c6 02 	lds	r31, 0x02C6	; 0x8002c6 <g_mod1_Serial_getc+0x1>
     d8e:	19 95       	eicall
     d90:	81 15       	cp	r24, r1
     d92:	91 40       	sbci	r25, 0x01	; 1
     d94:	c1 f7       	brne	.-16     	; 0xd86 <__LOCK_REGION_LENGTH__+0x986>
     d96:	e0 91 cb 02 	lds	r30, 0x02CB	; 0x8002cb <g_mod1_pre_transmission>
     d9a:	f0 91 cc 02 	lds	r31, 0x02CC	; 0x8002cc <g_mod1_pre_transmission+0x1>
     d9e:	30 97       	sbiw	r30, 0x00	; 0
     da0:	09 f0       	breq	.+2      	; 0xda4 <__LOCK_REGION_LENGTH__+0x9a4>
     da2:	19 95       	eicall
     da4:	bb 20       	and	r11, r11
     da6:	a1 f0       	breq	.+40     	; 0xdd0 <__LOCK_REGION_LENGTH__+0x9d0>
     da8:	8e 01       	movw	r16, r28
     daa:	0f 5f       	subi	r16, 0xFF	; 255
     dac:	1f 4f       	sbci	r17, 0xFF	; 255
     dae:	f1 2c       	mov	r15, r1
     db0:	ef ef       	ldi	r30, 0xFF	; 255
     db2:	ee 1a       	sub	r14, r30
     db4:	fe 0a       	sbc	r15, r30
     db6:	e0 0e       	add	r14, r16
     db8:	f1 1e       	adc	r15, r17
     dba:	e0 91 c7 02 	lds	r30, 0x02C7	; 0x8002c7 <g_mod1_Serial_putc>
     dbe:	f0 91 c8 02 	lds	r31, 0x02C8	; 0x8002c8 <g_mod1_Serial_putc+0x1>
     dc2:	d8 01       	movw	r26, r16
     dc4:	8d 91       	ld	r24, X+
     dc6:	8d 01       	movw	r16, r26
     dc8:	19 95       	eicall
     dca:	e0 16       	cp	r14, r16
     dcc:	f1 06       	cpc	r15, r17
     dce:	a9 f7       	brne	.-22     	; 0xdba <__LOCK_REGION_LENGTH__+0x9ba>
     dd0:	e0 91 c1 02 	lds	r30, 0x02C1	; 0x8002c1 <g_mod1_Serial_flush>
     dd4:	f0 91 c2 02 	lds	r31, 0x02C2	; 0x8002c2 <g_mod1_Serial_flush+0x1>
     dd8:	19 95       	eicall
     dda:	e0 91 c9 02 	lds	r30, 0x02C9	; 0x8002c9 <g_mod1_post_transmission>
     dde:	f0 91 ca 02 	lds	r31, 0x02CA	; 0x8002ca <g_mod1_post_transmission+0x1>
     de2:	30 97       	sbiw	r30, 0x00	; 0
     de4:	09 f0       	breq	.+2      	; 0xde8 <__LOCK_REGION_LENGTH__+0x9e8>
     de6:	19 95       	eicall
     de8:	0e 94 c9 17 	call	0x2f92	; 0x2f92 <Get_millis>
     dec:	4b 01       	movw	r8, r22
     dee:	5c 01       	movw	r10, r24
     df0:	08 e0       	ldi	r16, 0x08	; 8
     df2:	10 e0       	ldi	r17, 0x00	; 0
     df4:	ed 2c       	mov	r14, r13
     df6:	f1 2c       	mov	r15, r1
     df8:	e0 91 c3 02 	lds	r30, 0x02C3	; 0x8002c3 <g_mod1_Serial_available>
     dfc:	f0 91 c4 02 	lds	r31, 0x02C4	; 0x8002c4 <g_mod1_Serial_available+0x1>
     e00:	19 95       	eicall
     e02:	89 2b       	or	r24, r25
     e04:	91 f0       	breq	.+36     	; 0xe2a <__LOCK_REGION_LENGTH__+0xa2a>
     e06:	dd 24       	eor	r13, r13
     e08:	d3 94       	inc	r13
     e0a:	d1 0e       	add	r13, r17
     e0c:	e0 91 c5 02 	lds	r30, 0x02C5	; 0x8002c5 <g_mod1_Serial_getc>
     e10:	f0 91 c6 02 	lds	r31, 0x02C6	; 0x8002c6 <g_mod1_Serial_getc+0x1>
     e14:	19 95       	eicall
     e16:	e1 e0       	ldi	r30, 0x01	; 1
     e18:	f0 e0       	ldi	r31, 0x00	; 0
     e1a:	ec 0f       	add	r30, r28
     e1c:	fd 1f       	adc	r31, r29
     e1e:	e1 0f       	add	r30, r17
     e20:	f1 1d       	adc	r31, r1
     e22:	80 83       	st	Z, r24
     e24:	01 50       	subi	r16, 0x01	; 1
     e26:	1d 2d       	mov	r17, r13
     e28:	07 c0       	rjmp	.+14     	; 0xe38 <__LOCK_REGION_LENGTH__+0xa38>
     e2a:	e0 91 cd 02 	lds	r30, 0x02CD	; 0x8002cd <g_mod1_idle>
     e2e:	f0 91 ce 02 	lds	r31, 0x02CE	; 0x8002ce <g_mod1_idle+0x1>
     e32:	30 97       	sbiw	r30, 0x00	; 0
     e34:	09 f0       	breq	.+2      	; 0xe38 <__LOCK_REGION_LENGTH__+0xa38>
     e36:	19 95       	eicall
     e38:	15 30       	cpi	r17, 0x05	; 5
     e3a:	51 f5       	brne	.+84     	; 0xe90 <__LOCK_REGION_LENGTH__+0xa90>
     e3c:	99 81       	ldd	r25, Y+1	; 0x01
     e3e:	80 91 da 03 	lds	r24, 0x03DA	; 0x8003da <g_mod1_slave>
     e42:	98 13       	cpse	r25, r24
     e44:	3c c1       	rjmp	.+632    	; 0x10be <__LOCK_REGION_LENGTH__+0xcbe>
     e46:	8a 81       	ldd	r24, Y+2	; 0x02
     e48:	28 2f       	mov	r18, r24
     e4a:	2f 77       	andi	r18, 0x7F	; 127
     e4c:	30 e0       	ldi	r19, 0x00	; 0
     e4e:	2e 15       	cp	r18, r14
     e50:	3f 05       	cpc	r19, r15
     e52:	09 f0       	breq	.+2      	; 0xe56 <__LOCK_REGION_LENGTH__+0xa56>
     e54:	36 c1       	rjmp	.+620    	; 0x10c2 <__LOCK_REGION_LENGTH__+0xcc2>
     e56:	88 23       	and	r24, r24
     e58:	24 f4       	brge	.+8      	; 0xe62 <__LOCK_REGION_LENGTH__+0xa62>
     e5a:	8b 81       	ldd	r24, Y+3	; 0x03
     e5c:	88 23       	and	r24, r24
     e5e:	b1 f1       	breq	.+108    	; 0xecc <__LOCK_REGION_LENGTH__+0xacc>
     e60:	bf c0       	rjmp	.+382    	; 0xfe0 <__LOCK_REGION_LENGTH__+0xbe0>
     e62:	81 31       	cpi	r24, 0x11	; 17
     e64:	48 f4       	brcc	.+18     	; 0xe78 <__LOCK_REGION_LENGTH__+0xa78>
     e66:	8f 30       	cpi	r24, 0x0F	; 15
     e68:	70 f4       	brcc	.+28     	; 0xe86 <__LOCK_REGION_LENGTH__+0xa86>
     e6a:	81 30       	cpi	r24, 0x01	; 1
     e6c:	88 f0       	brcs	.+34     	; 0xe90 <__LOCK_REGION_LENGTH__+0xa90>
     e6e:	85 30       	cpi	r24, 0x05	; 5
     e70:	60 f0       	brcs	.+24     	; 0xe8a <__LOCK_REGION_LENGTH__+0xa8a>
     e72:	87 30       	cpi	r24, 0x07	; 7
     e74:	40 f0       	brcs	.+16     	; 0xe86 <__LOCK_REGION_LENGTH__+0xa86>
     e76:	0c c0       	rjmp	.+24     	; 0xe90 <__LOCK_REGION_LENGTH__+0xa90>
     e78:	87 31       	cpi	r24, 0x17	; 23
     e7a:	39 f0       	breq	.+14     	; 0xe8a <__LOCK_REGION_LENGTH__+0xa8a>
     e7c:	8f 3f       	cpi	r24, 0xFF	; 255
     e7e:	19 f0       	breq	.+6      	; 0xe86 <__LOCK_REGION_LENGTH__+0xa86>
     e80:	86 31       	cpi	r24, 0x16	; 22
     e82:	29 f0       	breq	.+10     	; 0xe8e <__LOCK_REGION_LENGTH__+0xa8e>
     e84:	05 c0       	rjmp	.+10     	; 0xe90 <__LOCK_REGION_LENGTH__+0xa90>
     e86:	03 e0       	ldi	r16, 0x03	; 3
     e88:	03 c0       	rjmp	.+6      	; 0xe90 <__LOCK_REGION_LENGTH__+0xa90>
     e8a:	0b 81       	ldd	r16, Y+3	; 0x03
     e8c:	01 c0       	rjmp	.+2      	; 0xe90 <__LOCK_REGION_LENGTH__+0xa90>
     e8e:	05 e0       	ldi	r16, 0x05	; 5
     e90:	0e 94 c9 17 	call	0x2f92	; 0x2f92 <Get_millis>
     e94:	dc 01       	movw	r26, r24
     e96:	cb 01       	movw	r24, r22
     e98:	88 19       	sub	r24, r8
     e9a:	99 09       	sbc	r25, r9
     e9c:	aa 09       	sbc	r26, r10
     e9e:	bb 09       	sbc	r27, r11
     ea0:	89 3c       	cpi	r24, 0xC9	; 201
     ea2:	91 05       	cpc	r25, r1
     ea4:	a1 05       	cpc	r26, r1
     ea6:	b1 05       	cpc	r27, r1
     ea8:	08 f0       	brcs	.+2      	; 0xeac <__LOCK_REGION_LENGTH__+0xaac>
     eaa:	fb c0       	rjmp	.+502    	; 0x10a2 <__LOCK_REGION_LENGTH__+0xca2>
     eac:	fe c0       	rjmp	.+508    	; 0x10aa <__LOCK_REGION_LENGTH__+0xcaa>
     eae:	81 11       	cpse	r24, r1
     eb0:	97 c0       	rjmp	.+302    	; 0xfe0 <__LOCK_REGION_LENGTH__+0xbe0>
     eb2:	15 30       	cpi	r17, 0x05	; 5
     eb4:	08 f4       	brcc	.+2      	; 0xeb8 <__LOCK_REGION_LENGTH__+0xab8>
     eb6:	df c0       	rjmp	.+446    	; 0x1076 <__LOCK_REGION_LENGTH__+0xc76>
     eb8:	01 2f       	mov	r16, r17
     eba:	10 e0       	ldi	r17, 0x00	; 0
     ebc:	78 01       	movw	r14, r16
     ebe:	b2 e0       	ldi	r27, 0x02	; 2
     ec0:	eb 1a       	sub	r14, r27
     ec2:	f1 08       	sbc	r15, r1
     ec4:	1e 14       	cp	r1, r14
     ec6:	1f 04       	cpc	r1, r15
     ec8:	44 f0       	brlt	.+16     	; 0xeda <__LOCK_REGION_LENGTH__+0xada>
     eca:	c4 c0       	rjmp	.+392    	; 0x1054 <__LOCK_REGION_LENGTH__+0xc54>
     ecc:	0f 2e       	mov	r0, r31
     ece:	f3 e0       	ldi	r31, 0x03	; 3
     ed0:	ef 2e       	mov	r14, r31
     ed2:	f1 2c       	mov	r15, r1
     ed4:	f0 2d       	mov	r31, r0
     ed6:	05 e0       	ldi	r16, 0x05	; 5
     ed8:	10 e0       	ldi	r17, 0x00	; 0
     eda:	20 e0       	ldi	r18, 0x00	; 0
     edc:	30 e0       	ldi	r19, 0x00	; 0
     ede:	8f ef       	ldi	r24, 0xFF	; 255
     ee0:	9f ef       	ldi	r25, 0xFF	; 255
     ee2:	d1 2c       	mov	r13, r1
     ee4:	e1 e0       	ldi	r30, 0x01	; 1
     ee6:	f0 e0       	ldi	r31, 0x00	; 0
     ee8:	ec 0f       	add	r30, r28
     eea:	fd 1f       	adc	r31, r29
     eec:	e2 0f       	add	r30, r18
     eee:	f3 1f       	adc	r31, r19
     ef0:	60 81       	ld	r22, Z
     ef2:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <crc16_update>
     ef6:	d3 94       	inc	r13
     ef8:	2d 2d       	mov	r18, r13
     efa:	30 e0       	ldi	r19, 0x00	; 0
     efc:	2e 15       	cp	r18, r14
     efe:	3f 05       	cpc	r19, r15
     f00:	8c f3       	brlt	.-30     	; 0xee4 <__LOCK_REGION_LENGTH__+0xae4>
     f02:	aa c0       	rjmp	.+340    	; 0x1058 <__LOCK_REGION_LENGTH__+0xc58>
     f04:	89 2f       	mov	r24, r25
     f06:	99 27       	eor	r25, r25
     f08:	fe 01       	movw	r30, r28
     f0a:	e0 0f       	add	r30, r16
     f0c:	f1 1f       	adc	r31, r17
     f0e:	20 81       	ld	r18, Z
     f10:	30 e0       	ldi	r19, 0x00	; 0
     f12:	82 17       	cp	r24, r18
     f14:	93 07       	cpc	r25, r19
     f16:	09 f0       	breq	.+2      	; 0xf1a <__LOCK_REGION_LENGTH__+0xb1a>
     f18:	ac c0       	rjmp	.+344    	; 0x1072 <__LOCK_REGION_LENGTH__+0xc72>
     f1a:	ad c0       	rjmp	.+346    	; 0x1076 <__LOCK_REGION_LENGTH__+0xc76>
     f1c:	8b 81       	ldd	r24, Y+3	; 0x03
     f1e:	86 95       	lsr	r24
     f20:	e1 f5       	brne	.+120    	; 0xf9a <__LOCK_REGION_LENGTH__+0xb9a>
     f22:	5e c0       	rjmp	.+188    	; 0xfe0 <__LOCK_REGION_LENGTH__+0xbe0>
     f24:	6b 81       	ldd	r22, Y+3	; 0x03
     f26:	86 2f       	mov	r24, r22
     f28:	86 95       	lsr	r24
     f2a:	09 f4       	brne	.+2      	; 0xf2e <__LOCK_REGION_LENGTH__+0xb2e>
     f2c:	b2 c0       	rjmp	.+356    	; 0x1092 <__LOCK_REGION_LENGTH__+0xc92>
     f2e:	fe 01       	movw	r30, r28
     f30:	31 96       	adiw	r30, 0x01	; 1
     f32:	40 e0       	ldi	r20, 0x00	; 0
     f34:	50 e0       	ldi	r21, 0x00	; 0
     f36:	90 e0       	ldi	r25, 0x00	; 0
     f38:	90 34       	cpi	r25, 0x40	; 64
     f3a:	70 f4       	brcc	.+28     	; 0xf58 <__LOCK_REGION_LENGTH__+0xb58>
     f3c:	24 81       	ldd	r18, Z+4	; 0x04
     f3e:	30 e0       	ldi	r19, 0x00	; 0
     f40:	32 2f       	mov	r19, r18
     f42:	22 27       	eor	r18, r18
     f44:	73 81       	ldd	r23, Z+3	; 0x03
     f46:	27 2b       	or	r18, r23
     f48:	da 01       	movw	r26, r20
     f4a:	aa 0f       	add	r26, r26
     f4c:	bb 1f       	adc	r27, r27
     f4e:	aa 5a       	subi	r26, 0xAA	; 170
     f50:	bc 4f       	sbci	r27, 0xFC	; 252
     f52:	11 96       	adiw	r26, 0x01	; 1
     f54:	3c 93       	st	X, r19
     f56:	2e 93       	st	-X, r18
     f58:	9f 5f       	subi	r25, 0xFF	; 255
     f5a:	4f 5f       	subi	r20, 0xFF	; 255
     f5c:	5f 4f       	sbci	r21, 0xFF	; 255
     f5e:	32 96       	adiw	r30, 0x02	; 2
     f60:	98 13       	cpse	r25, r24
     f62:	ea cf       	rjmp	.-44     	; 0xf38 <__LOCK_REGION_LENGTH__+0xb38>
     f64:	9f ef       	ldi	r25, 0xFF	; 255
     f66:	98 0f       	add	r25, r24
     f68:	90 93 cf 02 	sts	0x02CF, r25	; 0x8002cf <g_mod1_response_buffer_length>
     f6c:	60 ff       	sbrs	r22, 0
     f6e:	35 c0       	rjmp	.+106    	; 0xfda <__LOCK_REGION_LENGTH__+0xbda>
     f70:	80 34       	cpi	r24, 0x40	; 64
     f72:	70 f4       	brcc	.+28     	; 0xf90 <__LOCK_REGION_LENGTH__+0xb90>
     f74:	28 2f       	mov	r18, r24
     f76:	30 e0       	ldi	r19, 0x00	; 0
     f78:	22 0f       	add	r18, r18
     f7a:	33 1f       	adc	r19, r19
     f7c:	fe 01       	movw	r30, r28
     f7e:	e2 0f       	add	r30, r18
     f80:	f3 1f       	adc	r31, r19
     f82:	44 81       	ldd	r20, Z+4	; 0x04
     f84:	50 e0       	ldi	r21, 0x00	; 0
     f86:	f9 01       	movw	r30, r18
     f88:	ea 5a       	subi	r30, 0xAA	; 170
     f8a:	fc 4f       	sbci	r31, 0xFC	; 252
     f8c:	51 83       	std	Z+1, r21	; 0x01
     f8e:	40 83       	st	Z, r20
     f90:	8f 5f       	subi	r24, 0xFF	; 255
     f92:	80 93 cf 02 	sts	0x02CF, r24	; 0x8002cf <g_mod1_response_buffer_length>
     f96:	80 e0       	ldi	r24, 0x00	; 0
     f98:	23 c0       	rjmp	.+70     	; 0xfe0 <__LOCK_REGION_LENGTH__+0xbe0>
     f9a:	fe 01       	movw	r30, r28
     f9c:	31 96       	adiw	r30, 0x01	; 1
     f9e:	40 e0       	ldi	r20, 0x00	; 0
     fa0:	50 e0       	ldi	r21, 0x00	; 0
     fa2:	90 e0       	ldi	r25, 0x00	; 0
     fa4:	90 34       	cpi	r25, 0x40	; 64
     fa6:	70 f4       	brcc	.+28     	; 0xfc4 <__LOCK_REGION_LENGTH__+0xbc4>
     fa8:	23 81       	ldd	r18, Z+3	; 0x03
     faa:	30 e0       	ldi	r19, 0x00	; 0
     fac:	32 2f       	mov	r19, r18
     fae:	22 27       	eor	r18, r18
     fb0:	64 81       	ldd	r22, Z+4	; 0x04
     fb2:	26 2b       	or	r18, r22
     fb4:	da 01       	movw	r26, r20
     fb6:	aa 0f       	add	r26, r26
     fb8:	bb 1f       	adc	r27, r27
     fba:	aa 5a       	subi	r26, 0xAA	; 170
     fbc:	bc 4f       	sbci	r27, 0xFC	; 252
     fbe:	11 96       	adiw	r26, 0x01	; 1
     fc0:	3c 93       	st	X, r19
     fc2:	2e 93       	st	-X, r18
     fc4:	9f 5f       	subi	r25, 0xFF	; 255
     fc6:	4f 5f       	subi	r20, 0xFF	; 255
     fc8:	5f 4f       	sbci	r21, 0xFF	; 255
     fca:	32 96       	adiw	r30, 0x02	; 2
     fcc:	98 13       	cpse	r25, r24
     fce:	ea cf       	rjmp	.-44     	; 0xfa4 <__LOCK_REGION_LENGTH__+0xba4>
     fd0:	81 50       	subi	r24, 0x01	; 1
     fd2:	80 93 cf 02 	sts	0x02CF, r24	; 0x8002cf <g_mod1_response_buffer_length>
     fd6:	80 e0       	ldi	r24, 0x00	; 0
     fd8:	03 c0       	rjmp	.+6      	; 0xfe0 <__LOCK_REGION_LENGTH__+0xbe0>
     fda:	80 e0       	ldi	r24, 0x00	; 0
     fdc:	01 c0       	rjmp	.+2      	; 0xfe0 <__LOCK_REGION_LENGTH__+0xbe0>
     fde:	80 e0       	ldi	r24, 0x00	; 0
     fe0:	10 92 d1 02 	sts	0x02D1, r1	; 0x8002d1 <g_mod1_transmit_buffer_index>
     fe4:	10 92 d0 02 	sts	0x02D0, r1	; 0x8002d0 <g_mod1_response_buffer_index>
     fe8:	70 c0       	rjmp	.+224    	; 0x10ca <__LOCK_REGION_LENGTH__+0xcca>
     fea:	84 ee       	ldi	r24, 0xE4	; 228
     fec:	6e c0       	rjmp	.+220    	; 0x10ca <__LOCK_REGION_LENGTH__+0xcca>
     fee:	03 e0       	ldi	r16, 0x03	; 3
     ff0:	0e 94 c9 17 	call	0x2f92	; 0x2f92 <Get_millis>
     ff4:	dc 01       	movw	r26, r24
     ff6:	cb 01       	movw	r24, r22
     ff8:	88 19       	sub	r24, r8
     ffa:	99 09       	sbc	r25, r9
     ffc:	aa 09       	sbc	r26, r10
     ffe:	bb 09       	sbc	r27, r11
    1000:	89 3c       	cpi	r24, 0xC9	; 201
    1002:	91 05       	cpc	r25, r1
    1004:	a1 05       	cpc	r26, r1
    1006:	b1 05       	cpc	r27, r1
    1008:	08 f4       	brcc	.+2      	; 0x100c <__LOCK_REGION_LENGTH__+0xc0c>
    100a:	ff cb       	rjmp	.-2050   	; 0x80a <__LOCK_REGION_LENGTH__+0x40a>
    100c:	59 cc       	rjmp	.-1870   	; 0x8c0 <__LOCK_REGION_LENGTH__+0x4c0>
    100e:	8f ef       	ldi	r24, 0xFF	; 255
    1010:	9f ef       	ldi	r25, 0xFF	; 255
    1012:	fe 01       	movw	r30, r28
    1014:	ee 0d       	add	r30, r14
    1016:	ff 1d       	adc	r31, r15
    1018:	21 81       	ldd	r18, Z+1	; 0x01
    101a:	30 e0       	ldi	r19, 0x00	; 0
    101c:	ac 01       	movw	r20, r24
    101e:	55 27       	eor	r21, r21
    1020:	42 17       	cp	r20, r18
    1022:	53 07       	cpc	r21, r19
    1024:	09 f4       	brne	.+2      	; 0x1028 <__LOCK_REGION_LENGTH__+0xc28>
    1026:	84 cc       	rjmp	.-1784   	; 0x930 <__LOCK_REGION_LENGTH__+0x530>
    1028:	83 ee       	ldi	r24, 0xE3	; 227
    102a:	f1 cc       	rjmp	.-1566   	; 0xa0e <__LOCK_REGION_LENGTH__+0x60e>
    102c:	83 ee       	ldi	r24, 0xE3	; 227
    102e:	ef cc       	rjmp	.-1570   	; 0xa0e <__LOCK_REGION_LENGTH__+0x60e>
    1030:	8a 81       	ldd	r24, Y+2	; 0x02
    1032:	85 30       	cpi	r24, 0x05	; 5
    1034:	38 f4       	brcc	.+14     	; 0x1044 <__LOCK_REGION_LENGTH__+0xc44>
    1036:	83 30       	cpi	r24, 0x03	; 3
    1038:	08 f0       	brcs	.+2      	; 0x103c <__LOCK_REGION_LENGTH__+0xc3c>
    103a:	86 cc       	rjmp	.-1780   	; 0x948 <__LOCK_REGION_LENGTH__+0x548>
    103c:	81 30       	cpi	r24, 0x01	; 1
    103e:	08 f0       	brcs	.+2      	; 0x1042 <__LOCK_REGION_LENGTH__+0xc42>
    1040:	88 cc       	rjmp	.-1776   	; 0x952 <__LOCK_REGION_LENGTH__+0x552>
    1042:	e4 cc       	rjmp	.-1592   	; 0xa0c <__LOCK_REGION_LENGTH__+0x60c>
    1044:	87 31       	cpi	r24, 0x17	; 23
    1046:	09 f4       	brne	.+2      	; 0x104a <__LOCK_REGION_LENGTH__+0xc4a>
    1048:	7f cc       	rjmp	.-1794   	; 0x948 <__LOCK_REGION_LENGTH__+0x548>
    104a:	e0 cc       	rjmp	.-1600   	; 0xa0c <__LOCK_REGION_LENGTH__+0x60c>
    104c:	70 fd       	sbrc	r23, 0
    104e:	a9 cc       	rjmp	.-1710   	; 0x9a2 <__LOCK_REGION_LENGTH__+0x5a2>
    1050:	80 e0       	ldi	r24, 0x00	; 0
    1052:	dd cc       	rjmp	.-1606   	; 0xa0e <__LOCK_REGION_LENGTH__+0x60e>
    1054:	8f ef       	ldi	r24, 0xFF	; 255
    1056:	9f ef       	ldi	r25, 0xFF	; 255
    1058:	fe 01       	movw	r30, r28
    105a:	ee 0d       	add	r30, r14
    105c:	ff 1d       	adc	r31, r15
    105e:	21 81       	ldd	r18, Z+1	; 0x01
    1060:	30 e0       	ldi	r19, 0x00	; 0
    1062:	ac 01       	movw	r20, r24
    1064:	55 27       	eor	r21, r21
    1066:	42 17       	cp	r20, r18
    1068:	53 07       	cpc	r21, r19
    106a:	09 f4       	brne	.+2      	; 0x106e <__LOCK_REGION_LENGTH__+0xc6e>
    106c:	4b cf       	rjmp	.-362    	; 0xf04 <__LOCK_REGION_LENGTH__+0xb04>
    106e:	83 ee       	ldi	r24, 0xE3	; 227
    1070:	b7 cf       	rjmp	.-146    	; 0xfe0 <__LOCK_REGION_LENGTH__+0xbe0>
    1072:	83 ee       	ldi	r24, 0xE3	; 227
    1074:	b5 cf       	rjmp	.-150    	; 0xfe0 <__LOCK_REGION_LENGTH__+0xbe0>
    1076:	8a 81       	ldd	r24, Y+2	; 0x02
    1078:	85 30       	cpi	r24, 0x05	; 5
    107a:	38 f4       	brcc	.+14     	; 0x108a <__LOCK_REGION_LENGTH__+0xc8a>
    107c:	83 30       	cpi	r24, 0x03	; 3
    107e:	08 f0       	brcs	.+2      	; 0x1082 <__LOCK_REGION_LENGTH__+0xc82>
    1080:	4d cf       	rjmp	.-358    	; 0xf1c <__LOCK_REGION_LENGTH__+0xb1c>
    1082:	81 30       	cpi	r24, 0x01	; 1
    1084:	08 f0       	brcs	.+2      	; 0x1088 <__LOCK_REGION_LENGTH__+0xc88>
    1086:	4e cf       	rjmp	.-356    	; 0xf24 <__LOCK_REGION_LENGTH__+0xb24>
    1088:	aa cf       	rjmp	.-172    	; 0xfde <__LOCK_REGION_LENGTH__+0xbde>
    108a:	87 31       	cpi	r24, 0x17	; 23
    108c:	09 f4       	brne	.+2      	; 0x1090 <__LOCK_REGION_LENGTH__+0xc90>
    108e:	46 cf       	rjmp	.-372    	; 0xf1c <__LOCK_REGION_LENGTH__+0xb1c>
    1090:	a6 cf       	rjmp	.-180    	; 0xfde <__LOCK_REGION_LENGTH__+0xbde>
    1092:	60 fd       	sbrc	r22, 0
    1094:	6f cf       	rjmp	.-290    	; 0xf74 <__LOCK_REGION_LENGTH__+0xb74>
    1096:	80 e0       	ldi	r24, 0x00	; 0
    1098:	a3 cf       	rjmp	.-186    	; 0xfe0 <__LOCK_REGION_LENGTH__+0xbe0>
    109a:	01 11       	cpse	r16, r1
    109c:	b6 cb       	rjmp	.-2196   	; 0x80a <__LOCK_REGION_LENGTH__+0x40a>
    109e:	80 e0       	ldi	r24, 0x00	; 0
    10a0:	19 cc       	rjmp	.-1998   	; 0x8d4 <__LOCK_REGION_LENGTH__+0x4d4>
    10a2:	01 11       	cpse	r16, r1
    10a4:	10 c0       	rjmp	.+32     	; 0x10c6 <__LOCK_REGION_LENGTH__+0xcc6>
    10a6:	82 ee       	ldi	r24, 0xE2	; 226
    10a8:	02 cf       	rjmp	.-508    	; 0xeae <__LOCK_REGION_LENGTH__+0xaae>
    10aa:	01 11       	cpse	r16, r1
    10ac:	a5 ce       	rjmp	.-694    	; 0xdf8 <__LOCK_REGION_LENGTH__+0x9f8>
    10ae:	80 e0       	ldi	r24, 0x00	; 0
    10b0:	fe ce       	rjmp	.-516    	; 0xeae <__LOCK_REGION_LENGTH__+0xaae>
    10b2:	80 ee       	ldi	r24, 0xE0	; 224
    10b4:	ac cc       	rjmp	.-1704   	; 0xa0e <__LOCK_REGION_LENGTH__+0x60e>
    10b6:	81 ee       	ldi	r24, 0xE1	; 225
    10b8:	aa cc       	rjmp	.-1708   	; 0xa0e <__LOCK_REGION_LENGTH__+0x60e>
    10ba:	82 ee       	ldi	r24, 0xE2	; 226
    10bc:	a8 cc       	rjmp	.-1712   	; 0xa0e <__LOCK_REGION_LENGTH__+0x60e>
    10be:	80 ee       	ldi	r24, 0xE0	; 224
    10c0:	8f cf       	rjmp	.-226    	; 0xfe0 <__LOCK_REGION_LENGTH__+0xbe0>
    10c2:	81 ee       	ldi	r24, 0xE1	; 225
    10c4:	8d cf       	rjmp	.-230    	; 0xfe0 <__LOCK_REGION_LENGTH__+0xbe0>
    10c6:	82 ee       	ldi	r24, 0xE2	; 226
    10c8:	8b cf       	rjmp	.-234    	; 0xfe0 <__LOCK_REGION_LENGTH__+0xbe0>
    10ca:	d3 95       	inc	r29
    10cc:	0f b6       	in	r0, 0x3f	; 63
    10ce:	f8 94       	cli
    10d0:	de bf       	out	0x3e, r29	; 62
    10d2:	0f be       	out	0x3f, r0	; 63
    10d4:	cd bf       	out	0x3d, r28	; 61
    10d6:	df 91       	pop	r29
    10d8:	cf 91       	pop	r28
    10da:	1f 91       	pop	r17
    10dc:	0f 91       	pop	r16
    10de:	ff 90       	pop	r15
    10e0:	ef 90       	pop	r14
    10e2:	df 90       	pop	r13
    10e4:	bf 90       	pop	r11
    10e6:	af 90       	pop	r10
    10e8:	9f 90       	pop	r9
    10ea:	8f 90       	pop	r8
    10ec:	08 95       	ret

000010ee <Modbus_init>:
    10ee:	fb 01       	movw	r30, r22
    10f0:	81 11       	cpse	r24, r1
    10f2:	88 c0       	rjmp	.+272    	; 0x1204 <Modbus_init+0x116>
    10f4:	80 81       	ld	r24, Z
    10f6:	80 93 f4 04 	sts	0x04F4, r24	; 0x8004f4 <g_mod0_slave>
    10fa:	41 81       	ldd	r20, Z+1	; 0x01
    10fc:	62 81       	ldd	r22, Z+2	; 0x02
    10fe:	73 81       	ldd	r23, Z+3	; 0x03
    1100:	84 81       	ldd	r24, Z+4	; 0x04
    1102:	95 81       	ldd	r25, Z+5	; 0x05
    1104:	26 81       	ldd	r18, Z+6	; 0x06
    1106:	37 81       	ldd	r19, Z+7	; 0x07
    1108:	30 93 e6 03 	sts	0x03E6, r19	; 0x8003e6 <g_mod0_pre_transmission+0x1>
    110c:	20 93 e5 03 	sts	0x03E5, r18	; 0x8003e5 <g_mod0_pre_transmission>
    1110:	20 85       	ldd	r18, Z+8	; 0x08
    1112:	31 85       	ldd	r19, Z+9	; 0x09
    1114:	30 93 e4 03 	sts	0x03E4, r19	; 0x8003e4 <g_mod0_post_transmission+0x1>
    1118:	20 93 e3 03 	sts	0x03E3, r18	; 0x8003e3 <g_mod0_post_transmission>
    111c:	22 85       	ldd	r18, Z+10	; 0x0a
    111e:	33 85       	ldd	r19, Z+11	; 0x0b
    1120:	30 93 e8 03 	sts	0x03E8, r19	; 0x8003e8 <g_mod0_idle+0x1>
    1124:	20 93 e7 03 	sts	0x03E7, r18	; 0x8003e7 <g_mod0_idle>
    1128:	10 92 ea 03 	sts	0x03EA, r1	; 0x8003ea <g_mod0_response_buffer_index>
    112c:	10 92 e9 03 	sts	0x03E9, r1	; 0x8003e9 <g_mod0_response_buffer_length>
    1130:	41 30       	cpi	r20, 0x01	; 1
    1132:	09 f5       	brne	.+66     	; 0x1176 <Modbus_init+0x88>
    1134:	20 91 c0 02 	lds	r18, 0x02C0	; 0x8002c0 <UART1_used.1996>
    1138:	21 11       	cpse	r18, r1
    113a:	ca c0       	rjmp	.+404    	; 0x12d0 <Modbus_init+0x1e2>
    113c:	21 e0       	ldi	r18, 0x01	; 1
    113e:	20 93 c0 02 	sts	0x02C0, r18	; 0x8002c0 <UART1_used.1996>
    1142:	1c d5       	rcall	.+2616   	; 0x1b7c <UART1_init>
    1144:	8c e4       	ldi	r24, 0x4C	; 76
    1146:	9e e0       	ldi	r25, 0x0E	; 14
    1148:	90 93 dc 03 	sts	0x03DC, r25	; 0x8003dc <g_mod0_Serial_available+0x1>
    114c:	80 93 db 03 	sts	0x03DB, r24	; 0x8003db <g_mod0_Serial_available>
    1150:	8a e5       	ldi	r24, 0x5A	; 90
    1152:	9e e0       	ldi	r25, 0x0E	; 14
    1154:	90 93 de 03 	sts	0x03DE, r25	; 0x8003de <g_mod0_Serial_flush+0x1>
    1158:	80 93 dd 03 	sts	0x03DD, r24	; 0x8003dd <g_mod0_Serial_flush>
    115c:	83 e1       	ldi	r24, 0x13	; 19
    115e:	9e e0       	ldi	r25, 0x0E	; 14
    1160:	90 93 e0 03 	sts	0x03E0, r25	; 0x8003e0 <g_mod0_Serial_getc+0x1>
    1164:	80 93 df 03 	sts	0x03DF, r24	; 0x8003df <g_mod0_Serial_getc>
    1168:	83 e3       	ldi	r24, 0x33	; 51
    116a:	9e e0       	ldi	r25, 0x0E	; 14
    116c:	90 93 e2 03 	sts	0x03E2, r25	; 0x8003e2 <g_mod0_Serial_putc+0x1>
    1170:	80 93 e1 03 	sts	0x03E1, r24	; 0x8003e1 <g_mod0_Serial_putc>
    1174:	08 95       	ret
    1176:	42 30       	cpi	r20, 0x02	; 2
    1178:	09 f5       	brne	.+66     	; 0x11bc <Modbus_init+0xce>
    117a:	20 91 bf 02 	lds	r18, 0x02BF	; 0x8002bf <UART2_used.1997>
    117e:	21 11       	cpse	r18, r1
    1180:	a7 c0       	rjmp	.+334    	; 0x12d0 <Modbus_init+0x1e2>
    1182:	21 e0       	ldi	r18, 0x01	; 1
    1184:	20 93 bf 02 	sts	0x02BF, r18	; 0x8002bf <UART2_used.1997>
    1188:	08 d6       	rcall	.+3088   	; 0x1d9a <UART2_init>
    118a:	88 e5       	ldi	r24, 0x58	; 88
    118c:	9f e0       	ldi	r25, 0x0F	; 15
    118e:	90 93 dc 03 	sts	0x03DC, r25	; 0x8003dc <g_mod0_Serial_available+0x1>
    1192:	80 93 db 03 	sts	0x03DB, r24	; 0x8003db <g_mod0_Serial_available>
    1196:	86 e6       	ldi	r24, 0x66	; 102
    1198:	9f e0       	ldi	r25, 0x0F	; 15
    119a:	90 93 de 03 	sts	0x03DE, r25	; 0x8003de <g_mod0_Serial_flush+0x1>
    119e:	80 93 dd 03 	sts	0x03DD, r24	; 0x8003dd <g_mod0_Serial_flush>
    11a2:	82 e2       	ldi	r24, 0x22	; 34
    11a4:	9f e0       	ldi	r25, 0x0F	; 15
    11a6:	90 93 e0 03 	sts	0x03E0, r25	; 0x8003e0 <g_mod0_Serial_getc+0x1>
    11aa:	80 93 df 03 	sts	0x03DF, r24	; 0x8003df <g_mod0_Serial_getc>
    11ae:	8f e3       	ldi	r24, 0x3F	; 63
    11b0:	9f e0       	ldi	r25, 0x0F	; 15
    11b2:	90 93 e2 03 	sts	0x03E2, r25	; 0x8003e2 <g_mod0_Serial_putc+0x1>
    11b6:	80 93 e1 03 	sts	0x03E1, r24	; 0x8003e1 <g_mod0_Serial_putc>
    11ba:	08 95       	ret
    11bc:	43 30       	cpi	r20, 0x03	; 3
    11be:	09 f0       	breq	.+2      	; 0x11c2 <Modbus_init+0xd4>
    11c0:	87 c0       	rjmp	.+270    	; 0x12d0 <Modbus_init+0x1e2>
    11c2:	20 91 be 02 	lds	r18, 0x02BE	; 0x8002be <UART3_used.1998>
    11c6:	21 11       	cpse	r18, r1
    11c8:	83 c0       	rjmp	.+262    	; 0x12d0 <Modbus_init+0x1e2>
    11ca:	21 e0       	ldi	r18, 0x01	; 1
    11cc:	20 93 be 02 	sts	0x02BE, r18	; 0x8002be <UART3_used.1998>
    11d0:	f0 d6       	rcall	.+3552   	; 0x1fb2 <UART3_init>
    11d2:	84 e6       	ldi	r24, 0x64	; 100
    11d4:	90 e1       	ldi	r25, 0x10	; 16
    11d6:	90 93 dc 03 	sts	0x03DC, r25	; 0x8003dc <g_mod0_Serial_available+0x1>
    11da:	80 93 db 03 	sts	0x03DB, r24	; 0x8003db <g_mod0_Serial_available>
    11de:	82 e7       	ldi	r24, 0x72	; 114
    11e0:	90 e1       	ldi	r25, 0x10	; 16
    11e2:	90 93 de 03 	sts	0x03DE, r25	; 0x8003de <g_mod0_Serial_flush+0x1>
    11e6:	80 93 dd 03 	sts	0x03DD, r24	; 0x8003dd <g_mod0_Serial_flush>
    11ea:	8e e2       	ldi	r24, 0x2E	; 46
    11ec:	90 e1       	ldi	r25, 0x10	; 16
    11ee:	90 93 e0 03 	sts	0x03E0, r25	; 0x8003e0 <g_mod0_Serial_getc+0x1>
    11f2:	80 93 df 03 	sts	0x03DF, r24	; 0x8003df <g_mod0_Serial_getc>
    11f6:	8b e4       	ldi	r24, 0x4B	; 75
    11f8:	90 e1       	ldi	r25, 0x10	; 16
    11fa:	90 93 e2 03 	sts	0x03E2, r25	; 0x8003e2 <g_mod0_Serial_putc+0x1>
    11fe:	80 93 e1 03 	sts	0x03E1, r24	; 0x8003e1 <g_mod0_Serial_putc>
    1202:	08 95       	ret
    1204:	81 30       	cpi	r24, 0x01	; 1
    1206:	09 f0       	breq	.+2      	; 0x120a <Modbus_init+0x11c>
    1208:	63 c0       	rjmp	.+198    	; 0x12d0 <Modbus_init+0x1e2>
    120a:	80 81       	ld	r24, Z
    120c:	80 93 da 03 	sts	0x03DA, r24	; 0x8003da <g_mod1_slave>
    1210:	41 81       	ldd	r20, Z+1	; 0x01
    1212:	62 81       	ldd	r22, Z+2	; 0x02
    1214:	73 81       	ldd	r23, Z+3	; 0x03
    1216:	84 81       	ldd	r24, Z+4	; 0x04
    1218:	95 81       	ldd	r25, Z+5	; 0x05
    121a:	26 81       	ldd	r18, Z+6	; 0x06
    121c:	37 81       	ldd	r19, Z+7	; 0x07
    121e:	30 93 cc 02 	sts	0x02CC, r19	; 0x8002cc <g_mod1_pre_transmission+0x1>
    1222:	20 93 cb 02 	sts	0x02CB, r18	; 0x8002cb <g_mod1_pre_transmission>
    1226:	20 85       	ldd	r18, Z+8	; 0x08
    1228:	31 85       	ldd	r19, Z+9	; 0x09
    122a:	30 93 ca 02 	sts	0x02CA, r19	; 0x8002ca <g_mod1_post_transmission+0x1>
    122e:	20 93 c9 02 	sts	0x02C9, r18	; 0x8002c9 <g_mod1_post_transmission>
    1232:	22 85       	ldd	r18, Z+10	; 0x0a
    1234:	33 85       	ldd	r19, Z+11	; 0x0b
    1236:	30 93 ce 02 	sts	0x02CE, r19	; 0x8002ce <g_mod1_idle+0x1>
    123a:	20 93 cd 02 	sts	0x02CD, r18	; 0x8002cd <g_mod1_idle>
    123e:	10 92 d0 02 	sts	0x02D0, r1	; 0x8002d0 <g_mod1_response_buffer_index>
    1242:	10 92 cf 02 	sts	0x02CF, r1	; 0x8002cf <g_mod1_response_buffer_length>
    1246:	41 30       	cpi	r20, 0x01	; 1
    1248:	09 f5       	brne	.+66     	; 0x128c <Modbus_init+0x19e>
    124a:	20 91 c0 02 	lds	r18, 0x02C0	; 0x8002c0 <UART1_used.1996>
    124e:	21 11       	cpse	r18, r1
    1250:	3f c0       	rjmp	.+126    	; 0x12d0 <Modbus_init+0x1e2>
    1252:	21 e0       	ldi	r18, 0x01	; 1
    1254:	20 93 c0 02 	sts	0x02C0, r18	; 0x8002c0 <UART1_used.1996>
    1258:	91 d4       	rcall	.+2338   	; 0x1b7c <UART1_init>
    125a:	8c e4       	ldi	r24, 0x4C	; 76
    125c:	9e e0       	ldi	r25, 0x0E	; 14
    125e:	90 93 c4 02 	sts	0x02C4, r25	; 0x8002c4 <g_mod1_Serial_available+0x1>
    1262:	80 93 c3 02 	sts	0x02C3, r24	; 0x8002c3 <g_mod1_Serial_available>
    1266:	8a e5       	ldi	r24, 0x5A	; 90
    1268:	9e e0       	ldi	r25, 0x0E	; 14
    126a:	90 93 c2 02 	sts	0x02C2, r25	; 0x8002c2 <g_mod1_Serial_flush+0x1>
    126e:	80 93 c1 02 	sts	0x02C1, r24	; 0x8002c1 <g_mod1_Serial_flush>
    1272:	83 e1       	ldi	r24, 0x13	; 19
    1274:	9e e0       	ldi	r25, 0x0E	; 14
    1276:	90 93 c6 02 	sts	0x02C6, r25	; 0x8002c6 <g_mod1_Serial_getc+0x1>
    127a:	80 93 c5 02 	sts	0x02C5, r24	; 0x8002c5 <g_mod1_Serial_getc>
    127e:	83 e3       	ldi	r24, 0x33	; 51
    1280:	9e e0       	ldi	r25, 0x0E	; 14
    1282:	90 93 c8 02 	sts	0x02C8, r25	; 0x8002c8 <g_mod1_Serial_putc+0x1>
    1286:	80 93 c7 02 	sts	0x02C7, r24	; 0x8002c7 <g_mod1_Serial_putc>
    128a:	08 95       	ret
    128c:	42 30       	cpi	r20, 0x02	; 2
    128e:	01 f5       	brne	.+64     	; 0x12d0 <Modbus_init+0x1e2>
    1290:	20 91 bf 02 	lds	r18, 0x02BF	; 0x8002bf <UART2_used.1997>
    1294:	21 11       	cpse	r18, r1
    1296:	1c c0       	rjmp	.+56     	; 0x12d0 <Modbus_init+0x1e2>
    1298:	21 e0       	ldi	r18, 0x01	; 1
    129a:	20 93 bf 02 	sts	0x02BF, r18	; 0x8002bf <UART2_used.1997>
    129e:	7d d5       	rcall	.+2810   	; 0x1d9a <UART2_init>
    12a0:	88 e5       	ldi	r24, 0x58	; 88
    12a2:	9f e0       	ldi	r25, 0x0F	; 15
    12a4:	90 93 c4 02 	sts	0x02C4, r25	; 0x8002c4 <g_mod1_Serial_available+0x1>
    12a8:	80 93 c3 02 	sts	0x02C3, r24	; 0x8002c3 <g_mod1_Serial_available>
    12ac:	86 e6       	ldi	r24, 0x66	; 102
    12ae:	9f e0       	ldi	r25, 0x0F	; 15
    12b0:	90 93 c2 02 	sts	0x02C2, r25	; 0x8002c2 <g_mod1_Serial_flush+0x1>
    12b4:	80 93 c1 02 	sts	0x02C1, r24	; 0x8002c1 <g_mod1_Serial_flush>
    12b8:	82 e2       	ldi	r24, 0x22	; 34
    12ba:	9f e0       	ldi	r25, 0x0F	; 15
    12bc:	90 93 c6 02 	sts	0x02C6, r25	; 0x8002c6 <g_mod1_Serial_getc+0x1>
    12c0:	80 93 c5 02 	sts	0x02C5, r24	; 0x8002c5 <g_mod1_Serial_getc>
    12c4:	8f e3       	ldi	r24, 0x3F	; 63
    12c6:	9f e0       	ldi	r25, 0x0F	; 15
    12c8:	90 93 c8 02 	sts	0x02C8, r25	; 0x8002c8 <g_mod1_Serial_putc+0x1>
    12cc:	80 93 c7 02 	sts	0x02C7, r24	; 0x8002c7 <g_mod1_Serial_putc>
    12d0:	08 95       	ret

000012d2 <Modbus_Write_single_register>:
@return 0 on success; exception number on failure
@ingroup register
*/
uint8_t Modbus_Write_single_register(uint8_t device, uint16_t u16WriteAddress, uint16_t u16WriteValue)
{
	if(DEVICE_0 == device){
    12d2:	81 11       	cpse	r24, r1
    12d4:	0f c0       	rjmp	.+30     	; 0x12f4 <Modbus_Write_single_register+0x22>
		g_mod0_write_address = u16WriteAddress;
    12d6:	70 93 6f 04 	sts	0x046F, r23	; 0x80046f <g_mod0_write_address+0x1>
    12da:	60 93 6e 04 	sts	0x046E, r22	; 0x80046e <g_mod0_write_address>
		g_mod0_write_qty = 0;
    12de:	10 92 6d 04 	sts	0x046D, r1	; 0x80046d <g_mod0_write_qty+0x1>
    12e2:	10 92 6c 04 	sts	0x046C, r1	; 0x80046c <g_mod0_write_qty>
		g_mod0_transmit_buffer[0] = u16WriteValue;
    12e6:	50 93 ed 03 	sts	0x03ED, r21	; 0x8003ed <g_mod0_transmit_buffer+0x1>
    12ea:	40 93 ec 03 	sts	0x03EC, r20	; 0x8003ec <g_mod0_transmit_buffer>
		return Modbus_mster_transaction(device, WRITE_SINGLE_REGISTER);
    12ee:	66 e0       	ldi	r22, 0x06	; 6
    12f0:	84 c8       	rjmp	.-3832   	; 0x3fa <Modbus_mster_transaction>
    12f2:	08 95       	ret

	}
	else if(DEVICE_1 == device){
    12f4:	81 30       	cpi	r24, 0x01	; 1
    12f6:	79 f4       	brne	.+30     	; 0x1316 <Modbus_Write_single_register+0x44>
		g_mod1_write_address = u16WriteAddress;
    12f8:	70 93 55 03 	sts	0x0355, r23	; 0x800355 <g_mod1_write_address+0x1>
    12fc:	60 93 54 03 	sts	0x0354, r22	; 0x800354 <g_mod1_write_address>
		g_mod1_write_qty = 0;
    1300:	10 92 53 03 	sts	0x0353, r1	; 0x800353 <g_mod1_write_qty+0x1>
    1304:	10 92 52 03 	sts	0x0352, r1	; 0x800352 <g_mod1_write_qty>
		g_mod1_transmit_buffer[0] = u16WriteValue;
    1308:	50 93 d3 02 	sts	0x02D3, r21	; 0x8002d3 <g_mod1_transmit_buffer+0x1>
    130c:	40 93 d2 02 	sts	0x02D2, r20	; 0x8002d2 <g_mod1_transmit_buffer>
		return Modbus_mster_transaction(device, WRITE_SINGLE_REGISTER);
    1310:	66 e0       	ldi	r22, 0x06	; 6
    1312:	73 c8       	rjmp	.-3866   	; 0x3fa <Modbus_mster_transaction>
    1314:	08 95       	ret
	}
	return INVALID_DEVICE; //error
    1316:	84 ee       	ldi	r24, 0xE4	; 228
}
    1318:	08 95       	ret

0000131a <Temperature_over_temp>:
	UART0_puts("Level_sensor_error_callback \n");
}

/******* Over Temp functions for error callbacks **********************************************/
static void Temperature_over_temp(void){
	UART0_puts("Temperature_over_temp \n");
    131a:	83 e1       	ldi	r24, 0x13	; 19
    131c:	92 e0       	ldi	r25, 0x02	; 2
    131e:	b2 c3       	rjmp	.+1892   	; 0x1a84 <UART0_puts>
    1320:	08 95       	ret

00001322 <Level_sensor_error_callback>:
	
}

/******* Level sensors functions for error callbacks **********************************************/
static void Level_sensor_error_callback(void){
	UART0_puts("Level_sensor_error_callback \n");
    1322:	8b e2       	ldi	r24, 0x2B	; 43
    1324:	92 e0       	ldi	r25, 0x02	; 2
    1326:	ae c3       	rjmp	.+1884   	; 0x1a84 <UART0_puts>
    1328:	08 95       	ret

0000132a <LCD_writeTimeout>:
static void LCD_readTimeout(void){
	UART0_puts("LCD_READ_TIMEOUT ---------------------------- \n");
}

static void LCD_writeTimeout(void){
	UART0_puts("LCD_WRITE_TIMEOUT ++++++++++++++++++++++++++++ \n");
    132a:	89 e4       	ldi	r24, 0x49	; 73
    132c:	92 e0       	ldi	r25, 0x02	; 2
    132e:	aa c3       	rjmp	.+1876   	; 0x1a84 <UART0_puts>
    1330:	08 95       	ret

00001332 <LCD_readTimeout>:

//debug
#include "MCAL/UART.h"
/******* LCD callback functions for errors callbacks ***********************************************/
static void LCD_readTimeout(void){
	UART0_puts("LCD_READ_TIMEOUT ---------------------------- \n");
    1332:	8a e7       	ldi	r24, 0x7A	; 122
    1334:	92 e0       	ldi	r25, 0x02	; 2
    1336:	a6 c3       	rjmp	.+1868   	; 0x1a84 <UART0_puts>
    1338:	08 95       	ret

0000133a <Service_error_init>:
	
}


void Service_error_init(void){
		LCD_main_err_Init(LCD_readTimeout,LCD_writeTimeout);
    133a:	65 e9       	ldi	r22, 0x95	; 149
    133c:	79 e0       	ldi	r23, 0x09	; 9
    133e:	89 e9       	ldi	r24, 0x99	; 153
    1340:	99 e0       	ldi	r25, 0x09	; 9
    1342:	0e 94 2b 17 	call	0x2e56	; 0x2e56 <LCD_main_err_Init>
		Level_main_err_init(Level_sensor_error_callback);
    1346:	81 e9       	ldi	r24, 0x91	; 145
    1348:	99 e0       	ldi	r25, 0x09	; 9
    134a:	0e 94 34 17 	call	0x2e68	; 0x2e68 <Level_main_err_init>
		Temp_main_err_init(Temperature_over_temp);
    134e:	8d e8       	ldi	r24, 0x8D	; 141
    1350:	99 e0       	ldi	r25, 0x09	; 9
    1352:	0c 94 9a 17 	jmp	0x2f34	; 0x2f34 <Temp_main_err_init>
    1356:	08 95       	ret

00001358 <main>:




int main(void) {
	DDRE = 0xFF;
    1358:	8f ef       	ldi	r24, 0xFF	; 255
    135a:	8d b9       	out	0x0d, r24	; 13
	UART0_init(9600); //for debug
    135c:	60 e8       	ldi	r22, 0x80	; 128
    135e:	75 e2       	ldi	r23, 0x25	; 37
    1360:	80 e0       	ldi	r24, 0x00	; 0
    1362:	90 e0       	ldi	r25, 0x00	; 0
    1364:	21 d3       	rcall	.+1602   	; 0x19a8 <UART0_init>
    System_init();
    1366:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <System_init>
	 //Lcd_init(UART3,115200,1);
	UART0_puts("HELLO \n");
    136a:	8a ea       	ldi	r24, 0xAA	; 170
    136c:	92 e0       	ldi	r25, 0x02	; 2
    136e:	8a d3       	rcall	.+1812   	; 0x1a84 <UART0_puts>
	Inverter_init(UART1,38400,3);
    1370:	23 e0       	ldi	r18, 0x03	; 3
    1372:	40 e0       	ldi	r20, 0x00	; 0
    1374:	56 e9       	ldi	r21, 0x96	; 150
    1376:	60 e0       	ldi	r22, 0x00	; 0
    1378:	70 e0       	ldi	r23, 0x00	; 0
    137a:	81 e0       	ldi	r24, 0x01	; 1
    137c:	0e 94 fd 00 	call	0x1fa	; 0x1fa <Inverter_init>

	uint16_t x=0;
    1380:	c0 e0       	ldi	r28, 0x00	; 0
    1382:	d0 e0       	ldi	r29, 0x00	; 0
while (1)
{
	//UART0_puts("Hello \n");
	Inverter_set_Freq(x+=3);
    1384:	23 96       	adiw	r28, 0x03	; 3
    1386:	ce 01       	movw	r24, r28
    1388:	0e 94 11 01 	call	0x222	; 0x222 <Inverter_set_Freq>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    138c:	2f ef       	ldi	r18, 0xFF	; 255
    138e:	83 ed       	ldi	r24, 0xD3	; 211
    1390:	90 e3       	ldi	r25, 0x30	; 48
    1392:	21 50       	subi	r18, 0x01	; 1
    1394:	80 40       	sbci	r24, 0x00	; 0
    1396:	90 40       	sbci	r25, 0x00	; 0
    1398:	e1 f7       	brne	.-8      	; 0x1392 <main+0x3a>
    139a:	00 c0       	rjmp	.+0      	; 0x139c <main+0x44>
    139c:	00 00       	nop
    139e:	f2 cf       	rjmp	.-28     	; 0x1384 <main+0x2c>

000013a0 <__vector_29>:
		return returned_data ;
}


ISR(ADC_vect)
{
    13a0:	1f 92       	push	r1
    13a2:	0f 92       	push	r0
    13a4:	0f b6       	in	r0, 0x3f	; 63
    13a6:	0f 92       	push	r0
    13a8:	11 24       	eor	r1, r1
    13aa:	2f 93       	push	r18
    13ac:	8f 93       	push	r24
    13ae:	9f 93       	push	r25
	   uint8_t The_low_adc_reg = ADC_DATA_REG_LOW ;
    13b0:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
	  // get 10 bits out of the high and low register .
	  g_analog_data =  The_low_adc_reg | (ADC_DATA_REG_HIGH <<8);
    13b4:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
    13b8:	90 e0       	ldi	r25, 0x00	; 0
    13ba:	92 2b       	or	r25, r18
    13bc:	90 93 f7 04 	sts	0x04F7, r25	; 0x8004f7 <g_analog_data+0x1>
    13c0:	80 93 f6 04 	sts	0x04F6, r24	; 0x8004f6 <g_analog_data>
	//  UART0_OutUDec(g_analog_data);
	 // UART0_putc('\n');
	  g_converted = 1 ;
    13c4:	81 e0       	ldi	r24, 0x01	; 1
    13c6:	80 93 f5 04 	sts	0x04F5, r24	; 0x8004f5 <g_converted>
}
    13ca:	9f 91       	pop	r25
    13cc:	8f 91       	pop	r24
    13ce:	2f 91       	pop	r18
    13d0:	0f 90       	pop	r0
    13d2:	0f be       	out	0x3f, r0	; 63
    13d4:	0f 90       	pop	r0
    13d6:	1f 90       	pop	r1
    13d8:	18 95       	reti

000013da <DIO_init>:
void Spark_change_state(uint8_t state)
{
	if (HIGH == state)
		SET_BIT(SPARK_DATA_REG , SPARK_PIN);
	else if(LOW == state)
		CLR_BIT(SPARK_DATA_REG , SPARK_PIN);
    13da:	ea e0       	ldi	r30, 0x0A	; 10
    13dc:	f1 e0       	ldi	r31, 0x01	; 1
    13de:	80 81       	ld	r24, Z
    13e0:	8f 7e       	andi	r24, 0xEF	; 239
    13e2:	80 83       	st	Z, r24
    13e4:	80 81       	ld	r24, Z
    13e6:	8f 7d       	andi	r24, 0xDF	; 223
    13e8:	80 83       	st	Z, r24
    13ea:	80 81       	ld	r24, Z
    13ec:	8f 7b       	andi	r24, 0xBF	; 191
    13ee:	80 83       	st	Z, r24
    13f0:	53 98       	cbi	0x0a, 3	; 10
    13f2:	20 98       	cbi	0x04, 0	; 4
    13f4:	3a 98       	cbi	0x07, 2	; 7
    13f6:	54 98       	cbi	0x0a, 4	; 10
    13f8:	3c 9a       	sbi	0x07, 4	; 7
    13fa:	3f 9a       	sbi	0x07, 7	; 7
    13fc:	3d 9a       	sbi	0x07, 5	; 7
    13fe:	39 9a       	sbi	0x07, 1	; 7
    1400:	39 9a       	sbi	0x07, 1	; 7
    1402:	57 9a       	sbi	0x0a, 7	; 10
    1404:	38 9a       	sbi	0x07, 0	; 7
    1406:	38 98       	cbi	0x07, 0	; 7
    1408:	56 9a       	sbi	0x0a, 6	; 10
    140a:	3b 9a       	sbi	0x07, 3	; 7
    140c:	e4 e0       	ldi	r30, 0x04	; 4
    140e:	f1 e0       	ldi	r31, 0x01	; 1
    1410:	80 81       	ld	r24, Z
    1412:	84 60       	ori	r24, 0x04	; 4
    1414:	80 83       	st	Z, r24
    1416:	3f 9a       	sbi	0x07, 7	; 7
    1418:	3f 9a       	sbi	0x07, 7	; 7
    141a:	3f 9a       	sbi	0x07, 7	; 7
    141c:	e1 e0       	ldi	r30, 0x01	; 1
    141e:	f1 e0       	ldi	r31, 0x01	; 1
    1420:	80 81       	ld	r24, Z
    1422:	8e 7f       	andi	r24, 0xFE	; 254
    1424:	80 83       	st	Z, r24
    1426:	80 81       	ld	r24, Z
    1428:	82 60       	ori	r24, 0x02	; 2
    142a:	80 83       	st	Z, r24
    142c:	e2 e0       	ldi	r30, 0x02	; 2
    142e:	f1 e0       	ldi	r31, 0x01	; 1
    1430:	80 81       	ld	r24, Z
    1432:	81 60       	ori	r24, 0x01	; 1
    1434:	80 83       	st	Z, r24
    1436:	52 98       	cbi	0x0a, 2	; 10
    1438:	53 9a       	sbi	0x0a, 3	; 10
    143a:	5a 9a       	sbi	0x0b, 2	; 11
    143c:	08 95       	ret

0000143e <Modbus_change_state>:

//_________ MODE BUS initialize and enable______________________//

void Modbus_change_state(uint8_t device ,uint8_t state){
	
	switch (device){
    143e:	88 23       	and	r24, r24
    1440:	19 f0       	breq	.+6      	; 0x1448 <Modbus_change_state+0xa>
    1442:	81 30       	cpi	r24, 0x01	; 1
    1444:	89 f0       	breq	.+34     	; 0x1468 <Modbus_change_state+0x2a>
    1446:	08 95       	ret
		case DEVICE_0:
		 	if (HIGH == state)
    1448:	61 30       	cpi	r22, 0x01	; 1
    144a:	31 f4       	brne	.+12     	; 0x1458 <Modbus_change_state+0x1a>
		 		SET_BIT(DEVICE_0_MODBUS_DATA_REG , DEVICE_0_MODBUS_PIN);
    144c:	e5 e0       	ldi	r30, 0x05	; 5
    144e:	f1 e0       	ldi	r31, 0x01	; 1
    1450:	80 81       	ld	r24, Z
    1452:	84 60       	ori	r24, 0x04	; 4
    1454:	80 83       	st	Z, r24
    1456:	08 95       	ret
		 	else if(LOW == state)
    1458:	61 11       	cpse	r22, r1
    145a:	0d c0       	rjmp	.+26     	; 0x1476 <Modbus_change_state+0x38>
		 		CLR_BIT(DEVICE_0_MODBUS_DATA_REG , DEVICE_0_MODBUS_PIN);
    145c:	e5 e0       	ldi	r30, 0x05	; 5
    145e:	f1 e0       	ldi	r31, 0x01	; 1
    1460:	80 81       	ld	r24, Z
    1462:	8b 7f       	andi	r24, 0xFB	; 251
    1464:	80 83       	st	Z, r24
    1466:	08 95       	ret
			
			break;
		case DEVICE_1:
		     if (HIGH == state)
    1468:	61 30       	cpi	r22, 0x01	; 1
    146a:	11 f4       	brne	.+4      	; 0x1470 <Modbus_change_state+0x32>
		         SET_BIT(DEVICE_1_MODBUS_DATA_REG , DEVICE_1_MODBUS_PIN);
    146c:	47 9a       	sbi	0x08, 7	; 8
    146e:	08 95       	ret
		     else if(LOW == state)
    1470:	61 11       	cpse	r22, r1
    1472:	01 c0       	rjmp	.+2      	; 0x1476 <Modbus_change_state+0x38>
		         CLR_BIT(DEVICE_1_MODBUS_DATA_REG , DEVICE_1_MODBUS_PIN);
    1474:	47 98       	cbi	0x08, 7	; 8
    1476:	08 95       	ret

00001478 <timers_init>:
 * set_up the timer and interrupt config and
 * parameters timer_ config struct contain all info about Timer
 * return 1 if the function setup OK -1 if not
 */
uint8_t timers_init(g_Timer_Config *config)
{
    1478:	fc 01       	movw	r30, r24
	//millis_init(); //start this timer to get the time between ticks

	// choose the timer number depend on the config timer_number
	if(config->timer_number == 1){
    147a:	94 81       	ldd	r25, Z+4	; 0x04
    147c:	91 30       	cpi	r25, 0x01	; 1
    147e:	b1 f4       	brne	.+44     	; 0x14ac <timers_init+0x34>

		// off all the modes of  first config register on timer
		TIMER1_CONGFIG_A = 0X00;
    1480:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
		// External counter on T1 and set the Top vale is OCRnA
		TIMER1_CONGFIG_B = 0x0E;
    1484:	8e e0       	ldi	r24, 0x0E	; 14
    1486:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
		// number of Encoder Tick for Each interrupt
		TIMER1_COMPARE = config->ticks - 1;
    148a:	80 81       	ld	r24, Z
    148c:	91 81       	ldd	r25, Z+1	; 0x01
    148e:	01 97       	sbiw	r24, 0x01	; 1
    1490:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
    1494:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
		// Enable interrupt Bit on the timer Mask
		SET_BIT(TIMER1_INTERUPT, TIMER1_COMPARE_INT);
    1498:	af e6       	ldi	r26, 0x6F	; 111
    149a:	b0 e0       	ldi	r27, 0x00	; 0
    149c:	8c 91       	ld	r24, X
    149e:	82 60       	ori	r24, 0x02	; 2
    14a0:	8c 93       	st	X, r24
		// copy the config parameter to Timer stuct
		g_timer1_config = config;
    14a2:	f0 93 12 0c 	sts	0x0C12, r31	; 0x800c12 <g_timer1_config+0x1>
    14a6:	e0 93 11 0c 	sts	0x0C11, r30	; 0x800c11 <g_timer1_config>
    14aa:	49 c0       	rjmp	.+146    	; 0x153e <timers_init+0xc6>
		// set the time before get ticks ISR time
		//g_Timer1_old_time = Get_millis();
	}// timer_number = 1

	else if(config->timer_number == 3)
    14ac:	93 30       	cpi	r25, 0x03	; 3
    14ae:	b1 f4       	brne	.+44     	; 0x14dc <timers_init+0x64>
	{
		// off all the modes of  first config register on timer
		TIMER3_CONGFIG_A = 0X00;
    14b0:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
		//External counter on T1 and set the Top vale is OCRnA
		TIMER3_CONGFIG_B = 0x0E;
    14b4:	8e e0       	ldi	r24, 0x0E	; 14
    14b6:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>
		// number of Encoder Tick for Each interrupt
		TIMER3_COMPARE = config->ticks - 1;
    14ba:	80 81       	ld	r24, Z
    14bc:	91 81       	ldd	r25, Z+1	; 0x01
    14be:	01 97       	sbiw	r24, 0x01	; 1
    14c0:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
    14c4:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>
		// Enable interrupt Bit on the timer Mask
		SET_BIT(TIMER3_INTERUPT, TIMER3_COMPARE_INT);
    14c8:	a1 e7       	ldi	r26, 0x71	; 113
    14ca:	b0 e0       	ldi	r27, 0x00	; 0
    14cc:	8c 91       	ld	r24, X
    14ce:	82 60       	ori	r24, 0x02	; 2
    14d0:	8c 93       	st	X, r24
		// copy the config parameter to Timer stuct
		g_timer3_config = config;
    14d2:	f0 93 0e 0c 	sts	0x0C0E, r31	; 0x800c0e <g_timer3_config+0x1>
    14d6:	e0 93 0d 0c 	sts	0x0C0D, r30	; 0x800c0d <g_timer3_config>
    14da:	31 c0       	rjmp	.+98     	; 0x153e <timers_init+0xc6>
		// set the time before get ticks ISR time
		//g_Timer3_old_time = Get_millis();
	}//timer_number = 3
	else if(config->timer_number == 4){
    14dc:	94 30       	cpi	r25, 0x04	; 4
    14de:	b1 f4       	brne	.+44     	; 0x150c <timers_init+0x94>
		// off all the modes of  first config register on timer
		TIMER4_CONGFIG_A = 0X00;
    14e0:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
		// External counter on T1 and set the Top vale is OCRnA
		TIMER4_CONGFIG_B = 0x0E;
    14e4:	8e e0       	ldi	r24, 0x0E	; 14
    14e6:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>
		// number of Encoder Tick for Each interrupt
		TIMER4_COMPARE = config->ticks - 1;
    14ea:	80 81       	ld	r24, Z
    14ec:	91 81       	ldd	r25, Z+1	; 0x01
    14ee:	01 97       	sbiw	r24, 0x01	; 1
    14f0:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
    14f4:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
		// Enable interrupt Bit on the timer Mask
		SET_BIT(TIMER5_INTERUPT, TIMER5_COMPARE_INT);
    14f8:	a3 e7       	ldi	r26, 0x73	; 115
    14fa:	b0 e0       	ldi	r27, 0x00	; 0
    14fc:	8c 91       	ld	r24, X
    14fe:	82 60       	ori	r24, 0x02	; 2
    1500:	8c 93       	st	X, r24
		// copy the config parameter to Timer stuct
		g_timer4_config = config;
    1502:	f0 93 10 0c 	sts	0x0C10, r31	; 0x800c10 <g_timer4_config+0x1>
    1506:	e0 93 0f 0c 	sts	0x0C0F, r30	; 0x800c0f <g_timer4_config>
    150a:	19 c0       	rjmp	.+50     	; 0x153e <timers_init+0xc6>
		// set the time before get ticks ISR time
		//g_Timer4_old_time = Get_millis();
	}//timer_number = 4

	else if(config->timer_number == 5){
    150c:	95 30       	cpi	r25, 0x05	; 5
    150e:	d1 f4       	brne	.+52     	; 0x1544 <timers_init+0xcc>
		// off all the modes of  first config register on timer
		TIMER5_CONGFIG_A = 0X00;
    1510:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
		//  External counter on T1 and set the Top vale is OCRnA
		TIMER5_CONGFIG_B = 0x0E;
    1514:	8e e0       	ldi	r24, 0x0E	; 14
    1516:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <__TEXT_REGION_LENGTH__+0x700121>
		//number of Encoder Tick for Each interrupt
		TIMER5_COMPARE = config->ticks - 1;
    151a:	80 81       	ld	r24, Z
    151c:	91 81       	ldd	r25, Z+1	; 0x01
    151e:	01 97       	sbiw	r24, 0x01	; 1
    1520:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
    1524:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
		// Enable interrupt Bit on the timer Mask
		SET_BIT(TIMER5_INTERUPT, TIMER5_COMPARE_INT);
    1528:	a3 e7       	ldi	r26, 0x73	; 115
    152a:	b0 e0       	ldi	r27, 0x00	; 0
    152c:	8c 91       	ld	r24, X
    152e:	82 60       	ori	r24, 0x02	; 2
    1530:	8c 93       	st	X, r24
		// copy the config parameter to Timer struct
		g_timer5_config = config;
    1532:	f0 93 14 0c 	sts	0x0C14, r31	; 0x800c14 <g_timer5_config+0x1>
    1536:	e0 93 13 0c 	sts	0x0C13, r30	; 0x800c13 <g_timer5_config>
		// set the time before get ticks ISR time
		//g_Timer5_old_time = Get_millis();
		//Clear the counter number
		TIMER5_COUNT_L = 0;
    153a:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <__TEXT_REGION_LENGTH__+0x700124>
	{
		//Error the timer number not valid
		return -1;
	}// Else

    sei();
    153e:	78 94       	sei
    return 1;// Setup done ok
    1540:	81 e0       	ldi	r24, 0x01	; 1
    1542:	08 95       	ret
	}//timer_number = 5

	else
	{
		//Error the timer number not valid
		return -1;
    1544:	8f ef       	ldi	r24, 0xFF	; 255
	}// Else

    sei();
    return 1;// Setup done ok
}//timer_init
    1546:	08 95       	ret

00001548 <__vector_17>:

// interrupted service routine when we have reach the number of  Ticks On Encoder
ISR(TIMER1_COMPA_vect)
{
    1548:	1f 92       	push	r1
    154a:	0f 92       	push	r0
    154c:	0f b6       	in	r0, 0x3f	; 63
    154e:	0f 92       	push	r0
    1550:	11 24       	eor	r1, r1
    1552:	0b b6       	in	r0, 0x3b	; 59
    1554:	0f 92       	push	r0
    1556:	2f 93       	push	r18
    1558:	3f 93       	push	r19
    155a:	4f 93       	push	r20
    155c:	5f 93       	push	r21
    155e:	6f 93       	push	r22
    1560:	7f 93       	push	r23
    1562:	8f 93       	push	r24
    1564:	9f 93       	push	r25
    1566:	af 93       	push	r26
    1568:	bf 93       	push	r27
    156a:	ef 93       	push	r30
    156c:	ff 93       	push	r31
    156e:	cf 93       	push	r28
    1570:	df 93       	push	r29
    1572:	00 d0       	rcall	.+0      	; 0x1574 <__vector_17+0x2c>
    1574:	1f 92       	push	r1
    1576:	cd b7       	in	r28, 0x3d	; 61
    1578:	de b7       	in	r29, 0x3e	; 62
	volatile uint32_t diff_time;      // to save the different between new time and old time
	volatile static uint32_t s_Timer1_old_time;
	volatile static uint32_t s_Timer1_new_time;
	// get the time now
	s_Timer1_new_time = Get_millis();
    157a:	0e 94 c9 17 	call	0x2f92	; 0x2f92 <Get_millis>
    157e:	60 93 14 05 	sts	0x0514, r22	; 0x800514 <s_Timer1_new_time.1769>
    1582:	70 93 15 05 	sts	0x0515, r23	; 0x800515 <s_Timer1_new_time.1769+0x1>
    1586:	80 93 16 05 	sts	0x0516, r24	; 0x800516 <s_Timer1_new_time.1769+0x2>
    158a:	90 93 17 05 	sts	0x0517, r25	; 0x800517 <s_Timer1_new_time.1769+0x3>
	// calculate the diff between now and last interrupt
	diff_time = s_Timer1_new_time - s_Timer1_old_time;
    158e:	80 91 14 05 	lds	r24, 0x0514	; 0x800514 <s_Timer1_new_time.1769>
    1592:	90 91 15 05 	lds	r25, 0x0515	; 0x800515 <s_Timer1_new_time.1769+0x1>
    1596:	a0 91 16 05 	lds	r26, 0x0516	; 0x800516 <s_Timer1_new_time.1769+0x2>
    159a:	b0 91 17 05 	lds	r27, 0x0517	; 0x800517 <s_Timer1_new_time.1769+0x3>
    159e:	40 91 10 05 	lds	r20, 0x0510	; 0x800510 <s_Timer1_old_time.1768>
    15a2:	50 91 11 05 	lds	r21, 0x0511	; 0x800511 <s_Timer1_old_time.1768+0x1>
    15a6:	60 91 12 05 	lds	r22, 0x0512	; 0x800512 <s_Timer1_old_time.1768+0x2>
    15aa:	70 91 13 05 	lds	r23, 0x0513	; 0x800513 <s_Timer1_old_time.1768+0x3>
    15ae:	84 1b       	sub	r24, r20
    15b0:	95 0b       	sbc	r25, r21
    15b2:	a6 0b       	sbc	r26, r22
    15b4:	b7 0b       	sbc	r27, r23
    15b6:	89 83       	std	Y+1, r24	; 0x01
    15b8:	9a 83       	std	Y+2, r25	; 0x02
    15ba:	ab 83       	std	Y+3, r26	; 0x03
    15bc:	bc 83       	std	Y+4, r27	; 0x04
	// save the to the old time to next interrupt
	s_Timer1_old_time = s_Timer1_new_time;
    15be:	80 91 14 05 	lds	r24, 0x0514	; 0x800514 <s_Timer1_new_time.1769>
    15c2:	90 91 15 05 	lds	r25, 0x0515	; 0x800515 <s_Timer1_new_time.1769+0x1>
    15c6:	a0 91 16 05 	lds	r26, 0x0516	; 0x800516 <s_Timer1_new_time.1769+0x2>
    15ca:	b0 91 17 05 	lds	r27, 0x0517	; 0x800517 <s_Timer1_new_time.1769+0x3>
    15ce:	80 93 10 05 	sts	0x0510, r24	; 0x800510 <s_Timer1_old_time.1768>
    15d2:	90 93 11 05 	sts	0x0511, r25	; 0x800511 <s_Timer1_old_time.1768+0x1>
    15d6:	a0 93 12 05 	sts	0x0512, r26	; 0x800512 <s_Timer1_old_time.1768+0x2>
    15da:	b0 93 13 05 	sts	0x0513, r27	; 0x800513 <s_Timer1_old_time.1768+0x3>
	//call back function on upper layer to get time
	g_timer1_config->isr_call_back(diff_time);
    15de:	69 81       	ldd	r22, Y+1	; 0x01
    15e0:	7a 81       	ldd	r23, Y+2	; 0x02
    15e2:	8b 81       	ldd	r24, Y+3	; 0x03
    15e4:	9c 81       	ldd	r25, Y+4	; 0x04
    15e6:	e0 91 11 0c 	lds	r30, 0x0C11	; 0x800c11 <g_timer1_config>
    15ea:	f0 91 12 0c 	lds	r31, 0x0C12	; 0x800c12 <g_timer1_config+0x1>
    15ee:	02 80       	ldd	r0, Z+2	; 0x02
    15f0:	f3 81       	ldd	r31, Z+3	; 0x03
    15f2:	e0 2d       	mov	r30, r0
    15f4:	19 95       	eicall
}
    15f6:	0f 90       	pop	r0
    15f8:	0f 90       	pop	r0
    15fa:	0f 90       	pop	r0
    15fc:	0f 90       	pop	r0
    15fe:	df 91       	pop	r29
    1600:	cf 91       	pop	r28
    1602:	ff 91       	pop	r31
    1604:	ef 91       	pop	r30
    1606:	bf 91       	pop	r27
    1608:	af 91       	pop	r26
    160a:	9f 91       	pop	r25
    160c:	8f 91       	pop	r24
    160e:	7f 91       	pop	r23
    1610:	6f 91       	pop	r22
    1612:	5f 91       	pop	r21
    1614:	4f 91       	pop	r20
    1616:	3f 91       	pop	r19
    1618:	2f 91       	pop	r18
    161a:	0f 90       	pop	r0
    161c:	0b be       	out	0x3b, r0	; 59
    161e:	0f 90       	pop	r0
    1620:	0f be       	out	0x3f, r0	; 63
    1622:	0f 90       	pop	r0
    1624:	1f 90       	pop	r1
    1626:	18 95       	reti

00001628 <__vector_32>:
// interrupted service routine when we have reach the number of  Ticks On Encoder
ISR(TIMER3_COMPA_vect)
{
    1628:	1f 92       	push	r1
    162a:	0f 92       	push	r0
    162c:	0f b6       	in	r0, 0x3f	; 63
    162e:	0f 92       	push	r0
    1630:	11 24       	eor	r1, r1
    1632:	0b b6       	in	r0, 0x3b	; 59
    1634:	0f 92       	push	r0
    1636:	2f 93       	push	r18
    1638:	3f 93       	push	r19
    163a:	4f 93       	push	r20
    163c:	5f 93       	push	r21
    163e:	6f 93       	push	r22
    1640:	7f 93       	push	r23
    1642:	8f 93       	push	r24
    1644:	9f 93       	push	r25
    1646:	af 93       	push	r26
    1648:	bf 93       	push	r27
    164a:	ef 93       	push	r30
    164c:	ff 93       	push	r31
    164e:	cf 93       	push	r28
    1650:	df 93       	push	r29
    1652:	00 d0       	rcall	.+0      	; 0x1654 <__vector_32+0x2c>
    1654:	1f 92       	push	r1
    1656:	cd b7       	in	r28, 0x3d	; 61
    1658:	de b7       	in	r29, 0x3e	; 62
	volatile uint32_t diff_time;      // to save the different between new time and old time
	volatile static uint32_t s_Timer3_old_time;
	volatile static uint32_t s_Timer3_new_time;
	// get the time now
	s_Timer3_new_time = Get_millis();
    165a:	0e 94 c9 17 	call	0x2f92	; 0x2f92 <Get_millis>
    165e:	60 93 0c 05 	sts	0x050C, r22	; 0x80050c <s_Timer3_new_time.1777>
    1662:	70 93 0d 05 	sts	0x050D, r23	; 0x80050d <s_Timer3_new_time.1777+0x1>
    1666:	80 93 0e 05 	sts	0x050E, r24	; 0x80050e <s_Timer3_new_time.1777+0x2>
    166a:	90 93 0f 05 	sts	0x050F, r25	; 0x80050f <s_Timer3_new_time.1777+0x3>
	// calculate the diff between now and last interrupt
	diff_time = s_Timer3_new_time - s_Timer3_old_time;
    166e:	80 91 0c 05 	lds	r24, 0x050C	; 0x80050c <s_Timer3_new_time.1777>
    1672:	90 91 0d 05 	lds	r25, 0x050D	; 0x80050d <s_Timer3_new_time.1777+0x1>
    1676:	a0 91 0e 05 	lds	r26, 0x050E	; 0x80050e <s_Timer3_new_time.1777+0x2>
    167a:	b0 91 0f 05 	lds	r27, 0x050F	; 0x80050f <s_Timer3_new_time.1777+0x3>
    167e:	40 91 08 05 	lds	r20, 0x0508	; 0x800508 <s_Timer3_old_time.1776>
    1682:	50 91 09 05 	lds	r21, 0x0509	; 0x800509 <s_Timer3_old_time.1776+0x1>
    1686:	60 91 0a 05 	lds	r22, 0x050A	; 0x80050a <s_Timer3_old_time.1776+0x2>
    168a:	70 91 0b 05 	lds	r23, 0x050B	; 0x80050b <s_Timer3_old_time.1776+0x3>
    168e:	84 1b       	sub	r24, r20
    1690:	95 0b       	sbc	r25, r21
    1692:	a6 0b       	sbc	r26, r22
    1694:	b7 0b       	sbc	r27, r23
    1696:	89 83       	std	Y+1, r24	; 0x01
    1698:	9a 83       	std	Y+2, r25	; 0x02
    169a:	ab 83       	std	Y+3, r26	; 0x03
    169c:	bc 83       	std	Y+4, r27	; 0x04
	// save the to the old time to next interrupt
	s_Timer3_old_time = s_Timer3_new_time;
    169e:	80 91 0c 05 	lds	r24, 0x050C	; 0x80050c <s_Timer3_new_time.1777>
    16a2:	90 91 0d 05 	lds	r25, 0x050D	; 0x80050d <s_Timer3_new_time.1777+0x1>
    16a6:	a0 91 0e 05 	lds	r26, 0x050E	; 0x80050e <s_Timer3_new_time.1777+0x2>
    16aa:	b0 91 0f 05 	lds	r27, 0x050F	; 0x80050f <s_Timer3_new_time.1777+0x3>
    16ae:	80 93 08 05 	sts	0x0508, r24	; 0x800508 <s_Timer3_old_time.1776>
    16b2:	90 93 09 05 	sts	0x0509, r25	; 0x800509 <s_Timer3_old_time.1776+0x1>
    16b6:	a0 93 0a 05 	sts	0x050A, r26	; 0x80050a <s_Timer3_old_time.1776+0x2>
    16ba:	b0 93 0b 05 	sts	0x050B, r27	; 0x80050b <s_Timer3_old_time.1776+0x3>
	//call back function on upper layer to get time
	g_timer3_config->isr_call_back(diff_time);
    16be:	69 81       	ldd	r22, Y+1	; 0x01
    16c0:	7a 81       	ldd	r23, Y+2	; 0x02
    16c2:	8b 81       	ldd	r24, Y+3	; 0x03
    16c4:	9c 81       	ldd	r25, Y+4	; 0x04
    16c6:	e0 91 0d 0c 	lds	r30, 0x0C0D	; 0x800c0d <g_timer3_config>
    16ca:	f0 91 0e 0c 	lds	r31, 0x0C0E	; 0x800c0e <g_timer3_config+0x1>
    16ce:	02 80       	ldd	r0, Z+2	; 0x02
    16d0:	f3 81       	ldd	r31, Z+3	; 0x03
    16d2:	e0 2d       	mov	r30, r0
    16d4:	19 95       	eicall
}
    16d6:	0f 90       	pop	r0
    16d8:	0f 90       	pop	r0
    16da:	0f 90       	pop	r0
    16dc:	0f 90       	pop	r0
    16de:	df 91       	pop	r29
    16e0:	cf 91       	pop	r28
    16e2:	ff 91       	pop	r31
    16e4:	ef 91       	pop	r30
    16e6:	bf 91       	pop	r27
    16e8:	af 91       	pop	r26
    16ea:	9f 91       	pop	r25
    16ec:	8f 91       	pop	r24
    16ee:	7f 91       	pop	r23
    16f0:	6f 91       	pop	r22
    16f2:	5f 91       	pop	r21
    16f4:	4f 91       	pop	r20
    16f6:	3f 91       	pop	r19
    16f8:	2f 91       	pop	r18
    16fa:	0f 90       	pop	r0
    16fc:	0b be       	out	0x3b, r0	; 59
    16fe:	0f 90       	pop	r0
    1700:	0f be       	out	0x3f, r0	; 63
    1702:	0f 90       	pop	r0
    1704:	1f 90       	pop	r1
    1706:	18 95       	reti

00001708 <__vector_42>:
// interrupted service routine when we have reach the number of  Ticks On Encoder
ISR(TIMER4_COMPA_vect)
{
    1708:	1f 92       	push	r1
    170a:	0f 92       	push	r0
    170c:	0f b6       	in	r0, 0x3f	; 63
    170e:	0f 92       	push	r0
    1710:	11 24       	eor	r1, r1
    1712:	0b b6       	in	r0, 0x3b	; 59
    1714:	0f 92       	push	r0
    1716:	2f 93       	push	r18
    1718:	3f 93       	push	r19
    171a:	4f 93       	push	r20
    171c:	5f 93       	push	r21
    171e:	6f 93       	push	r22
    1720:	7f 93       	push	r23
    1722:	8f 93       	push	r24
    1724:	9f 93       	push	r25
    1726:	af 93       	push	r26
    1728:	bf 93       	push	r27
    172a:	ef 93       	push	r30
    172c:	ff 93       	push	r31
    172e:	cf 93       	push	r28
    1730:	df 93       	push	r29
    1732:	00 d0       	rcall	.+0      	; 0x1734 <__vector_42+0x2c>
    1734:	1f 92       	push	r1
    1736:	cd b7       	in	r28, 0x3d	; 61
    1738:	de b7       	in	r29, 0x3e	; 62
	volatile uint32_t diff_time;      // to save the different between new time and old time
	volatile static uint32_t s_Timer4_old_time;
	volatile static uint32_t s_Timer4_new_time;
	// get the time now
	s_Timer4_new_time = Get_millis();
    173a:	0e 94 c9 17 	call	0x2f92	; 0x2f92 <Get_millis>
    173e:	60 93 04 05 	sts	0x0504, r22	; 0x800504 <s_Timer4_new_time.1785>
    1742:	70 93 05 05 	sts	0x0505, r23	; 0x800505 <s_Timer4_new_time.1785+0x1>
    1746:	80 93 06 05 	sts	0x0506, r24	; 0x800506 <s_Timer4_new_time.1785+0x2>
    174a:	90 93 07 05 	sts	0x0507, r25	; 0x800507 <s_Timer4_new_time.1785+0x3>
	// calculate the diff between now and last interrupt
	diff_time = s_Timer4_new_time - s_Timer4_old_time;
    174e:	80 91 04 05 	lds	r24, 0x0504	; 0x800504 <s_Timer4_new_time.1785>
    1752:	90 91 05 05 	lds	r25, 0x0505	; 0x800505 <s_Timer4_new_time.1785+0x1>
    1756:	a0 91 06 05 	lds	r26, 0x0506	; 0x800506 <s_Timer4_new_time.1785+0x2>
    175a:	b0 91 07 05 	lds	r27, 0x0507	; 0x800507 <s_Timer4_new_time.1785+0x3>
    175e:	40 91 00 05 	lds	r20, 0x0500	; 0x800500 <s_Timer4_old_time.1784>
    1762:	50 91 01 05 	lds	r21, 0x0501	; 0x800501 <s_Timer4_old_time.1784+0x1>
    1766:	60 91 02 05 	lds	r22, 0x0502	; 0x800502 <s_Timer4_old_time.1784+0x2>
    176a:	70 91 03 05 	lds	r23, 0x0503	; 0x800503 <s_Timer4_old_time.1784+0x3>
    176e:	84 1b       	sub	r24, r20
    1770:	95 0b       	sbc	r25, r21
    1772:	a6 0b       	sbc	r26, r22
    1774:	b7 0b       	sbc	r27, r23
    1776:	89 83       	std	Y+1, r24	; 0x01
    1778:	9a 83       	std	Y+2, r25	; 0x02
    177a:	ab 83       	std	Y+3, r26	; 0x03
    177c:	bc 83       	std	Y+4, r27	; 0x04
	// save the to the old time to next interrupt
	s_Timer4_old_time = s_Timer4_new_time;
    177e:	80 91 04 05 	lds	r24, 0x0504	; 0x800504 <s_Timer4_new_time.1785>
    1782:	90 91 05 05 	lds	r25, 0x0505	; 0x800505 <s_Timer4_new_time.1785+0x1>
    1786:	a0 91 06 05 	lds	r26, 0x0506	; 0x800506 <s_Timer4_new_time.1785+0x2>
    178a:	b0 91 07 05 	lds	r27, 0x0507	; 0x800507 <s_Timer4_new_time.1785+0x3>
    178e:	80 93 00 05 	sts	0x0500, r24	; 0x800500 <s_Timer4_old_time.1784>
    1792:	90 93 01 05 	sts	0x0501, r25	; 0x800501 <s_Timer4_old_time.1784+0x1>
    1796:	a0 93 02 05 	sts	0x0502, r26	; 0x800502 <s_Timer4_old_time.1784+0x2>
    179a:	b0 93 03 05 	sts	0x0503, r27	; 0x800503 <s_Timer4_old_time.1784+0x3>
	//call back function on upper layer to get time
	g_timer4_config->isr_call_back(diff_time);
    179e:	69 81       	ldd	r22, Y+1	; 0x01
    17a0:	7a 81       	ldd	r23, Y+2	; 0x02
    17a2:	8b 81       	ldd	r24, Y+3	; 0x03
    17a4:	9c 81       	ldd	r25, Y+4	; 0x04
    17a6:	e0 91 0f 0c 	lds	r30, 0x0C0F	; 0x800c0f <g_timer4_config>
    17aa:	f0 91 10 0c 	lds	r31, 0x0C10	; 0x800c10 <g_timer4_config+0x1>
    17ae:	02 80       	ldd	r0, Z+2	; 0x02
    17b0:	f3 81       	ldd	r31, Z+3	; 0x03
    17b2:	e0 2d       	mov	r30, r0
    17b4:	19 95       	eicall
}
    17b6:	0f 90       	pop	r0
    17b8:	0f 90       	pop	r0
    17ba:	0f 90       	pop	r0
    17bc:	0f 90       	pop	r0
    17be:	df 91       	pop	r29
    17c0:	cf 91       	pop	r28
    17c2:	ff 91       	pop	r31
    17c4:	ef 91       	pop	r30
    17c6:	bf 91       	pop	r27
    17c8:	af 91       	pop	r26
    17ca:	9f 91       	pop	r25
    17cc:	8f 91       	pop	r24
    17ce:	7f 91       	pop	r23
    17d0:	6f 91       	pop	r22
    17d2:	5f 91       	pop	r21
    17d4:	4f 91       	pop	r20
    17d6:	3f 91       	pop	r19
    17d8:	2f 91       	pop	r18
    17da:	0f 90       	pop	r0
    17dc:	0b be       	out	0x3b, r0	; 59
    17de:	0f 90       	pop	r0
    17e0:	0f be       	out	0x3f, r0	; 63
    17e2:	0f 90       	pop	r0
    17e4:	1f 90       	pop	r1
    17e6:	18 95       	reti

000017e8 <__vector_47>:
// interrupted service routine when we have reach the number of  Ticks On Encoder
ISR(TIMER5_COMPA_vect)
{
    17e8:	1f 92       	push	r1
    17ea:	0f 92       	push	r0
    17ec:	0f b6       	in	r0, 0x3f	; 63
    17ee:	0f 92       	push	r0
    17f0:	11 24       	eor	r1, r1
    17f2:	0b b6       	in	r0, 0x3b	; 59
    17f4:	0f 92       	push	r0
    17f6:	2f 93       	push	r18
    17f8:	3f 93       	push	r19
    17fa:	4f 93       	push	r20
    17fc:	5f 93       	push	r21
    17fe:	6f 93       	push	r22
    1800:	7f 93       	push	r23
    1802:	8f 93       	push	r24
    1804:	9f 93       	push	r25
    1806:	af 93       	push	r26
    1808:	bf 93       	push	r27
    180a:	ef 93       	push	r30
    180c:	ff 93       	push	r31
    180e:	cf 93       	push	r28
    1810:	df 93       	push	r29
    1812:	00 d0       	rcall	.+0      	; 0x1814 <__vector_47+0x2c>
    1814:	1f 92       	push	r1
    1816:	cd b7       	in	r28, 0x3d	; 61
    1818:	de b7       	in	r29, 0x3e	; 62
	volatile uint32_t diff_time;      // to save the different between new time and old time
	volatile static uint32_t s_Timer5_old_time;
	volatile static uint32_t s_Timer5_new_time;
	//TOG_BIT(PORTB,0);
	// get the time now
	s_Timer5_new_time = Get_millis();
    181a:	0e 94 c9 17 	call	0x2f92	; 0x2f92 <Get_millis>
    181e:	60 93 fc 04 	sts	0x04FC, r22	; 0x8004fc <s_Timer5_new_time.1793>
    1822:	70 93 fd 04 	sts	0x04FD, r23	; 0x8004fd <s_Timer5_new_time.1793+0x1>
    1826:	80 93 fe 04 	sts	0x04FE, r24	; 0x8004fe <s_Timer5_new_time.1793+0x2>
    182a:	90 93 ff 04 	sts	0x04FF, r25	; 0x8004ff <s_Timer5_new_time.1793+0x3>
	// calculate the difference between now and last interrupt
	diff_time = s_Timer5_new_time - s_Timer5_old_time;
    182e:	80 91 fc 04 	lds	r24, 0x04FC	; 0x8004fc <s_Timer5_new_time.1793>
    1832:	90 91 fd 04 	lds	r25, 0x04FD	; 0x8004fd <s_Timer5_new_time.1793+0x1>
    1836:	a0 91 fe 04 	lds	r26, 0x04FE	; 0x8004fe <s_Timer5_new_time.1793+0x2>
    183a:	b0 91 ff 04 	lds	r27, 0x04FF	; 0x8004ff <s_Timer5_new_time.1793+0x3>
    183e:	40 91 f8 04 	lds	r20, 0x04F8	; 0x8004f8 <s_Timer5_old_time.1792>
    1842:	50 91 f9 04 	lds	r21, 0x04F9	; 0x8004f9 <s_Timer5_old_time.1792+0x1>
    1846:	60 91 fa 04 	lds	r22, 0x04FA	; 0x8004fa <s_Timer5_old_time.1792+0x2>
    184a:	70 91 fb 04 	lds	r23, 0x04FB	; 0x8004fb <s_Timer5_old_time.1792+0x3>
    184e:	84 1b       	sub	r24, r20
    1850:	95 0b       	sbc	r25, r21
    1852:	a6 0b       	sbc	r26, r22
    1854:	b7 0b       	sbc	r27, r23
    1856:	89 83       	std	Y+1, r24	; 0x01
    1858:	9a 83       	std	Y+2, r25	; 0x02
    185a:	ab 83       	std	Y+3, r26	; 0x03
    185c:	bc 83       	std	Y+4, r27	; 0x04
	// save the to the old time to next interrupt
	s_Timer5_old_time = s_Timer5_new_time;
    185e:	80 91 fc 04 	lds	r24, 0x04FC	; 0x8004fc <s_Timer5_new_time.1793>
    1862:	90 91 fd 04 	lds	r25, 0x04FD	; 0x8004fd <s_Timer5_new_time.1793+0x1>
    1866:	a0 91 fe 04 	lds	r26, 0x04FE	; 0x8004fe <s_Timer5_new_time.1793+0x2>
    186a:	b0 91 ff 04 	lds	r27, 0x04FF	; 0x8004ff <s_Timer5_new_time.1793+0x3>
    186e:	80 93 f8 04 	sts	0x04F8, r24	; 0x8004f8 <s_Timer5_old_time.1792>
    1872:	90 93 f9 04 	sts	0x04F9, r25	; 0x8004f9 <s_Timer5_old_time.1792+0x1>
    1876:	a0 93 fa 04 	sts	0x04FA, r26	; 0x8004fa <s_Timer5_old_time.1792+0x2>
    187a:	b0 93 fb 04 	sts	0x04FB, r27	; 0x8004fb <s_Timer5_old_time.1792+0x3>
	// clear the counter
	TIMER5_COUNT_L = 0;
    187e:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <__TEXT_REGION_LENGTH__+0x700124>
	//call back function on upper layer to get time
	g_timer5_config->isr_call_back(diff_time);
    1882:	69 81       	ldd	r22, Y+1	; 0x01
    1884:	7a 81       	ldd	r23, Y+2	; 0x02
    1886:	8b 81       	ldd	r24, Y+3	; 0x03
    1888:	9c 81       	ldd	r25, Y+4	; 0x04
    188a:	e0 91 13 0c 	lds	r30, 0x0C13	; 0x800c13 <g_timer5_config>
    188e:	f0 91 14 0c 	lds	r31, 0x0C14	; 0x800c14 <g_timer5_config+0x1>
    1892:	02 80       	ldd	r0, Z+2	; 0x02
    1894:	f3 81       	ldd	r31, Z+3	; 0x03
    1896:	e0 2d       	mov	r30, r0
    1898:	19 95       	eicall
	
}
    189a:	0f 90       	pop	r0
    189c:	0f 90       	pop	r0
    189e:	0f 90       	pop	r0
    18a0:	0f 90       	pop	r0
    18a2:	df 91       	pop	r29
    18a4:	cf 91       	pop	r28
    18a6:	ff 91       	pop	r31
    18a8:	ef 91       	pop	r30
    18aa:	bf 91       	pop	r27
    18ac:	af 91       	pop	r26
    18ae:	9f 91       	pop	r25
    18b0:	8f 91       	pop	r24
    18b2:	7f 91       	pop	r23
    18b4:	6f 91       	pop	r22
    18b6:	5f 91       	pop	r21
    18b8:	4f 91       	pop	r20
    18ba:	3f 91       	pop	r19
    18bc:	2f 91       	pop	r18
    18be:	0f 90       	pop	r0
    18c0:	0b be       	out	0x3b, r0	; 59
    18c2:	0f 90       	pop	r0
    18c4:	0f be       	out	0x3f, r0	; 63
    18c6:	0f 90       	pop	r0
    18c8:	1f 90       	pop	r1
    18ca:	18 95       	reti

000018cc <__vector_25>:

	while ((c = pgm_read_byte(progmem_s++))) {
		UART3_putc(c);
	}

} /* UART3_puts_p */
    18cc:	1f 92       	push	r1
    18ce:	0f 92       	push	r0
    18d0:	0f b6       	in	r0, 0x3f	; 63
    18d2:	0f 92       	push	r0
    18d4:	11 24       	eor	r1, r1
    18d6:	0b b6       	in	r0, 0x3b	; 59
    18d8:	0f 92       	push	r0
    18da:	2f 93       	push	r18
    18dc:	3f 93       	push	r19
    18de:	4f 93       	push	r20
    18e0:	5f 93       	push	r21
    18e2:	8f 93       	push	r24
    18e4:	9f 93       	push	r25
    18e6:	ef 93       	push	r30
    18e8:	ff 93       	push	r31
    18ea:	20 91 c0 00 	lds	r18, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
    18ee:	30 91 c6 00 	lds	r19, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    18f2:	28 71       	andi	r18, 0x18	; 24
    18f4:	80 91 2d 08 	lds	r24, 0x082D	; 0x80082d <UART_RxHead>
    18f8:	90 e0       	ldi	r25, 0x00	; 0
    18fa:	01 96       	adiw	r24, 0x01	; 1
    18fc:	8f 77       	andi	r24, 0x7F	; 127
    18fe:	99 27       	eor	r25, r25
    1900:	40 91 2c 08 	lds	r20, 0x082C	; 0x80082c <UART_RxTail>
    1904:	50 e0       	ldi	r21, 0x00	; 0
    1906:	84 17       	cp	r24, r20
    1908:	95 07       	cpc	r25, r21
    190a:	39 f0       	breq	.+14     	; 0x191a <__vector_25+0x4e>
    190c:	80 93 2d 08 	sts	0x082D, r24	; 0x80082d <UART_RxHead>
    1910:	fc 01       	movw	r30, r24
    1912:	e0 5d       	subi	r30, 0xD0	; 208
    1914:	f7 4f       	sbci	r31, 0xF7	; 247
    1916:	30 83       	st	Z, r19
    1918:	01 c0       	rjmp	.+2      	; 0x191c <__vector_25+0x50>
    191a:	22 e0       	ldi	r18, 0x02	; 2
    191c:	20 93 2b 08 	sts	0x082B, r18	; 0x80082b <UART_LastRxError>
    1920:	ff 91       	pop	r31
    1922:	ef 91       	pop	r30
    1924:	9f 91       	pop	r25
    1926:	8f 91       	pop	r24
    1928:	5f 91       	pop	r21
    192a:	4f 91       	pop	r20
    192c:	3f 91       	pop	r19
    192e:	2f 91       	pop	r18
    1930:	0f 90       	pop	r0
    1932:	0b be       	out	0x3b, r0	; 59
    1934:	0f 90       	pop	r0
    1936:	0f be       	out	0x3f, r0	; 63
    1938:	0f 90       	pop	r0
    193a:	1f 90       	pop	r1
    193c:	18 95       	reti

0000193e <__vector_26>:
    193e:	1f 92       	push	r1
    1940:	0f 92       	push	r0
    1942:	0f b6       	in	r0, 0x3f	; 63
    1944:	0f 92       	push	r0
    1946:	11 24       	eor	r1, r1
    1948:	0b b6       	in	r0, 0x3b	; 59
    194a:	0f 92       	push	r0
    194c:	8f 93       	push	r24
    194e:	9f 93       	push	r25
    1950:	ef 93       	push	r30
    1952:	ff 93       	push	r31
    1954:	90 91 2f 08 	lds	r25, 0x082F	; 0x80082f <UART_TxHead>
    1958:	80 91 2e 08 	lds	r24, 0x082E	; 0x80082e <UART_TxTail>
    195c:	98 17       	cp	r25, r24
    195e:	89 f0       	breq	.+34     	; 0x1982 <__vector_26+0x44>
    1960:	80 91 2e 08 	lds	r24, 0x082E	; 0x80082e <UART_TxTail>
    1964:	90 e0       	ldi	r25, 0x00	; 0
    1966:	01 96       	adiw	r24, 0x01	; 1
    1968:	8f 77       	andi	r24, 0x7F	; 127
    196a:	99 27       	eor	r25, r25
    196c:	80 93 2e 08 	sts	0x082E, r24	; 0x80082e <UART_TxTail>
    1970:	fc 01       	movw	r30, r24
    1972:	e0 55       	subi	r30, 0x50	; 80
    1974:	f7 4f       	sbci	r31, 0xF7	; 247
    1976:	80 81       	ld	r24, Z
    1978:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    197c:	10 92 1b 05 	sts	0x051B, r1	; 0x80051b <UART0_Transmission_end>
    1980:	08 c0       	rjmp	.+16     	; 0x1992 <__vector_26+0x54>
    1982:	e1 ec       	ldi	r30, 0xC1	; 193
    1984:	f0 e0       	ldi	r31, 0x00	; 0
    1986:	80 81       	ld	r24, Z
    1988:	8f 7d       	andi	r24, 0xDF	; 223
    198a:	80 83       	st	Z, r24
    198c:	81 e0       	ldi	r24, 0x01	; 1
    198e:	80 93 1b 05 	sts	0x051B, r24	; 0x80051b <UART0_Transmission_end>
    1992:	ff 91       	pop	r31
    1994:	ef 91       	pop	r30
    1996:	9f 91       	pop	r25
    1998:	8f 91       	pop	r24
    199a:	0f 90       	pop	r0
    199c:	0b be       	out	0x3b, r0	; 59
    199e:	0f 90       	pop	r0
    19a0:	0f be       	out	0x3f, r0	; 63
    19a2:	0f 90       	pop	r0
    19a4:	1f 90       	pop	r1
    19a6:	18 95       	reti

000019a8 <UART0_init>:
    19a8:	0f 93       	push	r16
    19aa:	1f 93       	push	r17
    19ac:	8b 01       	movw	r16, r22
    19ae:	9c 01       	movw	r18, r24
    19b0:	f8 94       	cli
    19b2:	10 92 2f 08 	sts	0x082F, r1	; 0x80082f <UART_TxHead>
    19b6:	10 92 2e 08 	sts	0x082E, r1	; 0x80082e <UART_TxTail>
    19ba:	10 92 2d 08 	sts	0x082D, r1	; 0x80082d <UART_RxHead>
    19be:	10 92 2c 08 	sts	0x082C, r1	; 0x80082c <UART_RxTail>
    19c2:	78 94       	sei
    19c4:	dc 01       	movw	r26, r24
    19c6:	cb 01       	movw	r24, r22
    19c8:	80 58       	subi	r24, 0x80	; 128
    19ca:	9b 47       	sbci	r25, 0x7B	; 123
    19cc:	a1 4e       	sbci	r26, 0xE1	; 225
    19ce:	bf 4f       	sbci	r27, 0xFF	; 255
    19d0:	88 0f       	add	r24, r24
    19d2:	99 1f       	adc	r25, r25
    19d4:	aa 1f       	adc	r26, r26
    19d6:	bb 1f       	adc	r27, r27
    19d8:	88 0f       	add	r24, r24
    19da:	99 1f       	adc	r25, r25
    19dc:	aa 1f       	adc	r26, r26
    19de:	bb 1f       	adc	r27, r27
    19e0:	bc 01       	movw	r22, r24
    19e2:	cd 01       	movw	r24, r26
    19e4:	66 0f       	add	r22, r22
    19e6:	77 1f       	adc	r23, r23
    19e8:	88 1f       	adc	r24, r24
    19ea:	99 1f       	adc	r25, r25
    19ec:	00 0f       	add	r16, r16
    19ee:	11 1f       	adc	r17, r17
    19f0:	22 1f       	adc	r18, r18
    19f2:	33 1f       	adc	r19, r19
    19f4:	00 0f       	add	r16, r16
    19f6:	11 1f       	adc	r17, r17
    19f8:	22 1f       	adc	r18, r18
    19fa:	33 1f       	adc	r19, r19
    19fc:	a9 01       	movw	r20, r18
    19fe:	98 01       	movw	r18, r16
    1a00:	22 0f       	add	r18, r18
    1a02:	33 1f       	adc	r19, r19
    1a04:	44 1f       	adc	r20, r20
    1a06:	55 1f       	adc	r21, r21
    1a08:	22 0f       	add	r18, r18
    1a0a:	33 1f       	adc	r19, r19
    1a0c:	44 1f       	adc	r20, r20
    1a0e:	55 1f       	adc	r21, r21
    1a10:	0e 94 0f 1a 	call	0x341e	; 0x341e <__udivmodsi4>
    1a14:	ba 01       	movw	r22, r20
    1a16:	a9 01       	movw	r20, r18
    1a18:	41 50       	subi	r20, 0x01	; 1
    1a1a:	51 09       	sbc	r21, r1
    1a1c:	61 09       	sbc	r22, r1
    1a1e:	71 09       	sbc	r23, r1
    1a20:	57 ff       	sbrs	r21, 7
    1a22:	06 c0       	rjmp	.+12     	; 0x1a30 <UART0_init+0x88>
    1a24:	82 e0       	ldi	r24, 0x02	; 2
    1a26:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
    1a2a:	5f 77       	andi	r21, 0x7F	; 127
    1a2c:	66 27       	eor	r22, r22
    1a2e:	77 27       	eor	r23, r23
    1a30:	bb 27       	eor	r27, r27
    1a32:	a7 2f       	mov	r26, r23
    1a34:	96 2f       	mov	r25, r22
    1a36:	85 2f       	mov	r24, r21
    1a38:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
    1a3c:	40 93 c4 00 	sts	0x00C4, r20	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
    1a40:	88 e9       	ldi	r24, 0x98	; 152
    1a42:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    1a46:	86 e0       	ldi	r24, 0x06	; 6
    1a48:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
    1a4c:	1f 91       	pop	r17
    1a4e:	0f 91       	pop	r16
    1a50:	08 95       	ret

00001a52 <UART0_putc>:
    1a52:	40 91 2f 08 	lds	r20, 0x082F	; 0x80082f <UART_TxHead>
    1a56:	50 e0       	ldi	r21, 0x00	; 0
    1a58:	4f 5f       	subi	r20, 0xFF	; 255
    1a5a:	5f 4f       	sbci	r21, 0xFF	; 255
    1a5c:	4f 77       	andi	r20, 0x7F	; 127
    1a5e:	55 27       	eor	r21, r21
    1a60:	20 91 2e 08 	lds	r18, 0x082E	; 0x80082e <UART_TxTail>
    1a64:	30 e0       	ldi	r19, 0x00	; 0
    1a66:	42 17       	cp	r20, r18
    1a68:	53 07       	cpc	r21, r19
    1a6a:	d1 f3       	breq	.-12     	; 0x1a60 <UART0_putc+0xe>
    1a6c:	fa 01       	movw	r30, r20
    1a6e:	e0 55       	subi	r30, 0x50	; 80
    1a70:	f7 4f       	sbci	r31, 0xF7	; 247
    1a72:	80 83       	st	Z, r24
    1a74:	40 93 2f 08 	sts	0x082F, r20	; 0x80082f <UART_TxHead>
    1a78:	e1 ec       	ldi	r30, 0xC1	; 193
    1a7a:	f0 e0       	ldi	r31, 0x00	; 0
    1a7c:	80 81       	ld	r24, Z
    1a7e:	80 62       	ori	r24, 0x20	; 32
    1a80:	80 83       	st	Z, r24
    1a82:	08 95       	ret

00001a84 <UART0_puts>:
    1a84:	cf 93       	push	r28
    1a86:	df 93       	push	r29
    1a88:	ec 01       	movw	r28, r24
    1a8a:	88 81       	ld	r24, Y
    1a8c:	88 23       	and	r24, r24
    1a8e:	29 f0       	breq	.+10     	; 0x1a9a <UART0_puts+0x16>
    1a90:	21 96       	adiw	r28, 0x01	; 1
    1a92:	df df       	rcall	.-66     	; 0x1a52 <UART0_putc>
    1a94:	89 91       	ld	r24, Y+
    1a96:	81 11       	cpse	r24, r1
    1a98:	fc cf       	rjmp	.-8      	; 0x1a92 <UART0_puts+0xe>
    1a9a:	df 91       	pop	r29
    1a9c:	cf 91       	pop	r28
    1a9e:	08 95       	ret

00001aa0 <__vector_36>:
    1aa0:	1f 92       	push	r1
    1aa2:	0f 92       	push	r0
    1aa4:	0f b6       	in	r0, 0x3f	; 63
    1aa6:	0f 92       	push	r0
    1aa8:	11 24       	eor	r1, r1
    1aaa:	0b b6       	in	r0, 0x3b	; 59
    1aac:	0f 92       	push	r0
    1aae:	2f 93       	push	r18
    1ab0:	3f 93       	push	r19
    1ab2:	4f 93       	push	r20
    1ab4:	5f 93       	push	r21
    1ab6:	8f 93       	push	r24
    1ab8:	9f 93       	push	r25
    1aba:	ef 93       	push	r30
    1abc:	ff 93       	push	r31
    1abe:	20 91 c8 00 	lds	r18, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
    1ac2:	30 91 ce 00 	lds	r19, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    1ac6:	28 71       	andi	r18, 0x18	; 24
    1ac8:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <UART1_RxHead>
    1acc:	90 e0       	ldi	r25, 0x00	; 0
    1ace:	01 96       	adiw	r24, 0x01	; 1
    1ad0:	8f 77       	andi	r24, 0x7F	; 127
    1ad2:	99 27       	eor	r25, r25
    1ad4:	40 91 27 07 	lds	r20, 0x0727	; 0x800727 <UART1_RxTail>
    1ad8:	50 e0       	ldi	r21, 0x00	; 0
    1ada:	84 17       	cp	r24, r20
    1adc:	95 07       	cpc	r25, r21
    1ade:	39 f0       	breq	.+14     	; 0x1aee <__vector_36+0x4e>
    1ae0:	80 93 28 07 	sts	0x0728, r24	; 0x800728 <UART1_RxHead>
    1ae4:	fc 01       	movw	r30, r24
    1ae6:	e5 5d       	subi	r30, 0xD5	; 213
    1ae8:	f8 4f       	sbci	r31, 0xF8	; 248
    1aea:	30 83       	st	Z, r19
    1aec:	01 c0       	rjmp	.+2      	; 0x1af0 <__vector_36+0x50>
    1aee:	22 e0       	ldi	r18, 0x02	; 2
    1af0:	20 93 26 07 	sts	0x0726, r18	; 0x800726 <UART1_LastRxError>
    1af4:	ff 91       	pop	r31
    1af6:	ef 91       	pop	r30
    1af8:	9f 91       	pop	r25
    1afa:	8f 91       	pop	r24
    1afc:	5f 91       	pop	r21
    1afe:	4f 91       	pop	r20
    1b00:	3f 91       	pop	r19
    1b02:	2f 91       	pop	r18
    1b04:	0f 90       	pop	r0
    1b06:	0b be       	out	0x3b, r0	; 59
    1b08:	0f 90       	pop	r0
    1b0a:	0f be       	out	0x3f, r0	; 63
    1b0c:	0f 90       	pop	r0
    1b0e:	1f 90       	pop	r1
    1b10:	18 95       	reti

00001b12 <__vector_37>:
    1b12:	1f 92       	push	r1
    1b14:	0f 92       	push	r0
    1b16:	0f b6       	in	r0, 0x3f	; 63
    1b18:	0f 92       	push	r0
    1b1a:	11 24       	eor	r1, r1
    1b1c:	0b b6       	in	r0, 0x3b	; 59
    1b1e:	0f 92       	push	r0
    1b20:	8f 93       	push	r24
    1b22:	9f 93       	push	r25
    1b24:	ef 93       	push	r30
    1b26:	ff 93       	push	r31
    1b28:	90 91 2a 07 	lds	r25, 0x072A	; 0x80072a <UART1_TxHead>
    1b2c:	80 91 29 07 	lds	r24, 0x0729	; 0x800729 <UART1_TxTail>
    1b30:	98 17       	cp	r25, r24
    1b32:	89 f0       	breq	.+34     	; 0x1b56 <__vector_37+0x44>
    1b34:	80 91 29 07 	lds	r24, 0x0729	; 0x800729 <UART1_TxTail>
    1b38:	90 e0       	ldi	r25, 0x00	; 0
    1b3a:	01 96       	adiw	r24, 0x01	; 1
    1b3c:	8f 77       	andi	r24, 0x7F	; 127
    1b3e:	99 27       	eor	r25, r25
    1b40:	80 93 29 07 	sts	0x0729, r24	; 0x800729 <UART1_TxTail>
    1b44:	fc 01       	movw	r30, r24
    1b46:	e5 55       	subi	r30, 0x55	; 85
    1b48:	f8 4f       	sbci	r31, 0xF8	; 248
    1b4a:	80 81       	ld	r24, Z
    1b4c:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    1b50:	10 92 1a 05 	sts	0x051A, r1	; 0x80051a <UART1_Transmission_end>
    1b54:	08 c0       	rjmp	.+16     	; 0x1b66 <__vector_37+0x54>
    1b56:	e9 ec       	ldi	r30, 0xC9	; 201
    1b58:	f0 e0       	ldi	r31, 0x00	; 0
    1b5a:	80 81       	ld	r24, Z
    1b5c:	8f 7d       	andi	r24, 0xDF	; 223
    1b5e:	80 83       	st	Z, r24
    1b60:	81 e0       	ldi	r24, 0x01	; 1
    1b62:	80 93 1a 05 	sts	0x051A, r24	; 0x80051a <UART1_Transmission_end>
    1b66:	ff 91       	pop	r31
    1b68:	ef 91       	pop	r30
    1b6a:	9f 91       	pop	r25
    1b6c:	8f 91       	pop	r24
    1b6e:	0f 90       	pop	r0
    1b70:	0b be       	out	0x3b, r0	; 59
    1b72:	0f 90       	pop	r0
    1b74:	0f be       	out	0x3f, r0	; 63
    1b76:	0f 90       	pop	r0
    1b78:	1f 90       	pop	r1
    1b7a:	18 95       	reti

00001b7c <UART1_init>:
    1b7c:	0f 93       	push	r16
    1b7e:	1f 93       	push	r17
    1b80:	8b 01       	movw	r16, r22
    1b82:	9c 01       	movw	r18, r24
    1b84:	f8 94       	cli
    1b86:	10 92 2a 07 	sts	0x072A, r1	; 0x80072a <UART1_TxHead>
    1b8a:	10 92 29 07 	sts	0x0729, r1	; 0x800729 <UART1_TxTail>
    1b8e:	10 92 28 07 	sts	0x0728, r1	; 0x800728 <UART1_RxHead>
    1b92:	10 92 27 07 	sts	0x0727, r1	; 0x800727 <UART1_RxTail>
    1b96:	78 94       	sei
    1b98:	dc 01       	movw	r26, r24
    1b9a:	cb 01       	movw	r24, r22
    1b9c:	80 58       	subi	r24, 0x80	; 128
    1b9e:	9b 47       	sbci	r25, 0x7B	; 123
    1ba0:	a1 4e       	sbci	r26, 0xE1	; 225
    1ba2:	bf 4f       	sbci	r27, 0xFF	; 255
    1ba4:	88 0f       	add	r24, r24
    1ba6:	99 1f       	adc	r25, r25
    1ba8:	aa 1f       	adc	r26, r26
    1baa:	bb 1f       	adc	r27, r27
    1bac:	88 0f       	add	r24, r24
    1bae:	99 1f       	adc	r25, r25
    1bb0:	aa 1f       	adc	r26, r26
    1bb2:	bb 1f       	adc	r27, r27
    1bb4:	bc 01       	movw	r22, r24
    1bb6:	cd 01       	movw	r24, r26
    1bb8:	66 0f       	add	r22, r22
    1bba:	77 1f       	adc	r23, r23
    1bbc:	88 1f       	adc	r24, r24
    1bbe:	99 1f       	adc	r25, r25
    1bc0:	00 0f       	add	r16, r16
    1bc2:	11 1f       	adc	r17, r17
    1bc4:	22 1f       	adc	r18, r18
    1bc6:	33 1f       	adc	r19, r19
    1bc8:	00 0f       	add	r16, r16
    1bca:	11 1f       	adc	r17, r17
    1bcc:	22 1f       	adc	r18, r18
    1bce:	33 1f       	adc	r19, r19
    1bd0:	a9 01       	movw	r20, r18
    1bd2:	98 01       	movw	r18, r16
    1bd4:	22 0f       	add	r18, r18
    1bd6:	33 1f       	adc	r19, r19
    1bd8:	44 1f       	adc	r20, r20
    1bda:	55 1f       	adc	r21, r21
    1bdc:	22 0f       	add	r18, r18
    1bde:	33 1f       	adc	r19, r19
    1be0:	44 1f       	adc	r20, r20
    1be2:	55 1f       	adc	r21, r21
    1be4:	0e 94 0f 1a 	call	0x341e	; 0x341e <__udivmodsi4>
    1be8:	ba 01       	movw	r22, r20
    1bea:	a9 01       	movw	r20, r18
    1bec:	41 50       	subi	r20, 0x01	; 1
    1bee:	51 09       	sbc	r21, r1
    1bf0:	61 09       	sbc	r22, r1
    1bf2:	71 09       	sbc	r23, r1
    1bf4:	57 ff       	sbrs	r21, 7
    1bf6:	06 c0       	rjmp	.+12     	; 0x1c04 <UART1_init+0x88>
    1bf8:	82 e0       	ldi	r24, 0x02	; 2
    1bfa:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
    1bfe:	5f 77       	andi	r21, 0x7F	; 127
    1c00:	66 27       	eor	r22, r22
    1c02:	77 27       	eor	r23, r23
    1c04:	bb 27       	eor	r27, r27
    1c06:	a7 2f       	mov	r26, r23
    1c08:	96 2f       	mov	r25, r22
    1c0a:	85 2f       	mov	r24, r21
    1c0c:	80 93 cd 00 	sts	0x00CD, r24	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7000cd>
    1c10:	40 93 cc 00 	sts	0x00CC, r20	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7000cc>
    1c14:	88 e9       	ldi	r24, 0x98	; 152
    1c16:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7000c9>
    1c1a:	86 e0       	ldi	r24, 0x06	; 6
    1c1c:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7000ca>
    1c20:	1f 91       	pop	r17
    1c22:	0f 91       	pop	r16
    1c24:	08 95       	ret

00001c26 <UART1_getc>:
    1c26:	f8 94       	cli
    1c28:	90 91 28 07 	lds	r25, 0x0728	; 0x800728 <UART1_RxHead>
    1c2c:	80 91 27 07 	lds	r24, 0x0727	; 0x800727 <UART1_RxTail>
    1c30:	98 13       	cpse	r25, r24
    1c32:	04 c0       	rjmp	.+8      	; 0x1c3c <UART1_getc+0x16>
    1c34:	78 94       	sei
    1c36:	80 e0       	ldi	r24, 0x00	; 0
    1c38:	91 e0       	ldi	r25, 0x01	; 1
    1c3a:	08 95       	ret
    1c3c:	80 91 27 07 	lds	r24, 0x0727	; 0x800727 <UART1_RxTail>
    1c40:	90 e0       	ldi	r25, 0x00	; 0
    1c42:	01 96       	adiw	r24, 0x01	; 1
    1c44:	8f 77       	andi	r24, 0x7F	; 127
    1c46:	99 27       	eor	r25, r25
    1c48:	80 93 27 07 	sts	0x0727, r24	; 0x800727 <UART1_RxTail>
    1c4c:	78 94       	sei
    1c4e:	fc 01       	movw	r30, r24
    1c50:	e5 5d       	subi	r30, 0xD5	; 213
    1c52:	f8 4f       	sbci	r31, 0xF8	; 248
    1c54:	20 81       	ld	r18, Z
    1c56:	80 91 26 07 	lds	r24, 0x0726	; 0x800726 <UART1_LastRxError>
    1c5a:	90 e0       	ldi	r25, 0x00	; 0
    1c5c:	98 2f       	mov	r25, r24
    1c5e:	88 27       	eor	r24, r24
    1c60:	82 0f       	add	r24, r18
    1c62:	91 1d       	adc	r25, r1
    1c64:	08 95       	ret

00001c66 <UART1_putc>:
    1c66:	40 91 2a 07 	lds	r20, 0x072A	; 0x80072a <UART1_TxHead>
    1c6a:	50 e0       	ldi	r21, 0x00	; 0
    1c6c:	4f 5f       	subi	r20, 0xFF	; 255
    1c6e:	5f 4f       	sbci	r21, 0xFF	; 255
    1c70:	4f 77       	andi	r20, 0x7F	; 127
    1c72:	55 27       	eor	r21, r21
    1c74:	20 91 29 07 	lds	r18, 0x0729	; 0x800729 <UART1_TxTail>
    1c78:	30 e0       	ldi	r19, 0x00	; 0
    1c7a:	42 17       	cp	r20, r18
    1c7c:	53 07       	cpc	r21, r19
    1c7e:	d1 f3       	breq	.-12     	; 0x1c74 <UART1_putc+0xe>
    1c80:	fa 01       	movw	r30, r20
    1c82:	e5 55       	subi	r30, 0x55	; 85
    1c84:	f8 4f       	sbci	r31, 0xF8	; 248
    1c86:	80 83       	st	Z, r24
    1c88:	40 93 2a 07 	sts	0x072A, r20	; 0x80072a <UART1_TxHead>
    1c8c:	e9 ec       	ldi	r30, 0xC9	; 201
    1c8e:	f0 e0       	ldi	r31, 0x00	; 0
    1c90:	80 81       	ld	r24, Z
    1c92:	80 62       	ori	r24, 0x20	; 32
    1c94:	80 83       	st	Z, r24
    1c96:	08 95       	ret

00001c98 <UART1_available>:
    1c98:	f8 94       	cli
    1c9a:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <UART1_RxHead>
    1c9e:	20 91 27 07 	lds	r18, 0x0727	; 0x800727 <UART1_RxTail>
    1ca2:	78 94       	sei
    1ca4:	90 e0       	ldi	r25, 0x00	; 0
    1ca6:	80 58       	subi	r24, 0x80	; 128
    1ca8:	9f 4f       	sbci	r25, 0xFF	; 255
    1caa:	82 1b       	sub	r24, r18
    1cac:	91 09       	sbc	r25, r1
    1cae:	8f 77       	andi	r24, 0x7F	; 127
    1cb0:	99 27       	eor	r25, r25
    1cb2:	08 95       	ret

00001cb4 <UART1_flush>:
    1cb4:	80 91 1a 05 	lds	r24, 0x051A	; 0x80051a <UART1_Transmission_end>
    1cb8:	88 23       	and	r24, r24
    1cba:	e1 f3       	breq	.-8      	; 0x1cb4 <UART1_flush>
    1cbc:	08 95       	ret

00001cbe <__vector_51>:
    1cbe:	1f 92       	push	r1
    1cc0:	0f 92       	push	r0
    1cc2:	0f b6       	in	r0, 0x3f	; 63
    1cc4:	0f 92       	push	r0
    1cc6:	11 24       	eor	r1, r1
    1cc8:	0b b6       	in	r0, 0x3b	; 59
    1cca:	0f 92       	push	r0
    1ccc:	2f 93       	push	r18
    1cce:	3f 93       	push	r19
    1cd0:	4f 93       	push	r20
    1cd2:	5f 93       	push	r21
    1cd4:	8f 93       	push	r24
    1cd6:	9f 93       	push	r25
    1cd8:	ef 93       	push	r30
    1cda:	ff 93       	push	r31
    1cdc:	20 91 d0 00 	lds	r18, 0x00D0	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7000d0>
    1ce0:	30 91 d6 00 	lds	r19, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    1ce4:	28 71       	andi	r18, 0x18	; 24
    1ce6:	80 91 23 06 	lds	r24, 0x0623	; 0x800623 <UART2_RxHead>
    1cea:	90 e0       	ldi	r25, 0x00	; 0
    1cec:	01 96       	adiw	r24, 0x01	; 1
    1cee:	8f 77       	andi	r24, 0x7F	; 127
    1cf0:	99 27       	eor	r25, r25
    1cf2:	40 91 22 06 	lds	r20, 0x0622	; 0x800622 <UART2_RxTail>
    1cf6:	50 e0       	ldi	r21, 0x00	; 0
    1cf8:	84 17       	cp	r24, r20
    1cfa:	95 07       	cpc	r25, r21
    1cfc:	39 f0       	breq	.+14     	; 0x1d0c <__vector_51+0x4e>
    1cfe:	80 93 23 06 	sts	0x0623, r24	; 0x800623 <UART2_RxHead>
    1d02:	fc 01       	movw	r30, r24
    1d04:	ea 5d       	subi	r30, 0xDA	; 218
    1d06:	f9 4f       	sbci	r31, 0xF9	; 249
    1d08:	30 83       	st	Z, r19
    1d0a:	01 c0       	rjmp	.+2      	; 0x1d0e <__vector_51+0x50>
    1d0c:	22 e0       	ldi	r18, 0x02	; 2
    1d0e:	20 93 21 06 	sts	0x0621, r18	; 0x800621 <UART2_LastRxError>
    1d12:	ff 91       	pop	r31
    1d14:	ef 91       	pop	r30
    1d16:	9f 91       	pop	r25
    1d18:	8f 91       	pop	r24
    1d1a:	5f 91       	pop	r21
    1d1c:	4f 91       	pop	r20
    1d1e:	3f 91       	pop	r19
    1d20:	2f 91       	pop	r18
    1d22:	0f 90       	pop	r0
    1d24:	0b be       	out	0x3b, r0	; 59
    1d26:	0f 90       	pop	r0
    1d28:	0f be       	out	0x3f, r0	; 63
    1d2a:	0f 90       	pop	r0
    1d2c:	1f 90       	pop	r1
    1d2e:	18 95       	reti

00001d30 <__vector_52>:
    1d30:	1f 92       	push	r1
    1d32:	0f 92       	push	r0
    1d34:	0f b6       	in	r0, 0x3f	; 63
    1d36:	0f 92       	push	r0
    1d38:	11 24       	eor	r1, r1
    1d3a:	0b b6       	in	r0, 0x3b	; 59
    1d3c:	0f 92       	push	r0
    1d3e:	8f 93       	push	r24
    1d40:	9f 93       	push	r25
    1d42:	ef 93       	push	r30
    1d44:	ff 93       	push	r31
    1d46:	90 91 25 06 	lds	r25, 0x0625	; 0x800625 <UART2_TxHead>
    1d4a:	80 91 24 06 	lds	r24, 0x0624	; 0x800624 <UART2_TxTail>
    1d4e:	98 17       	cp	r25, r24
    1d50:	89 f0       	breq	.+34     	; 0x1d74 <__vector_52+0x44>
    1d52:	80 91 24 06 	lds	r24, 0x0624	; 0x800624 <UART2_TxTail>
    1d56:	90 e0       	ldi	r25, 0x00	; 0
    1d58:	01 96       	adiw	r24, 0x01	; 1
    1d5a:	8f 77       	andi	r24, 0x7F	; 127
    1d5c:	99 27       	eor	r25, r25
    1d5e:	80 93 24 06 	sts	0x0624, r24	; 0x800624 <UART2_TxTail>
    1d62:	fc 01       	movw	r30, r24
    1d64:	ea 55       	subi	r30, 0x5A	; 90
    1d66:	f9 4f       	sbci	r31, 0xF9	; 249
    1d68:	80 81       	ld	r24, Z
    1d6a:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    1d6e:	10 92 19 05 	sts	0x0519, r1	; 0x800519 <UART2_Transmission_end>
    1d72:	08 c0       	rjmp	.+16     	; 0x1d84 <__vector_52+0x54>
    1d74:	e1 ed       	ldi	r30, 0xD1	; 209
    1d76:	f0 e0       	ldi	r31, 0x00	; 0
    1d78:	80 81       	ld	r24, Z
    1d7a:	8f 7d       	andi	r24, 0xDF	; 223
    1d7c:	80 83       	st	Z, r24
    1d7e:	81 e0       	ldi	r24, 0x01	; 1
    1d80:	80 93 19 05 	sts	0x0519, r24	; 0x800519 <UART2_Transmission_end>
    1d84:	ff 91       	pop	r31
    1d86:	ef 91       	pop	r30
    1d88:	9f 91       	pop	r25
    1d8a:	8f 91       	pop	r24
    1d8c:	0f 90       	pop	r0
    1d8e:	0b be       	out	0x3b, r0	; 59
    1d90:	0f 90       	pop	r0
    1d92:	0f be       	out	0x3f, r0	; 63
    1d94:	0f 90       	pop	r0
    1d96:	1f 90       	pop	r1
    1d98:	18 95       	reti

00001d9a <UART2_init>:
    1d9a:	0f 93       	push	r16
    1d9c:	1f 93       	push	r17
    1d9e:	8b 01       	movw	r16, r22
    1da0:	9c 01       	movw	r18, r24
    1da2:	f8 94       	cli
    1da4:	10 92 25 06 	sts	0x0625, r1	; 0x800625 <UART2_TxHead>
    1da8:	10 92 24 06 	sts	0x0624, r1	; 0x800624 <UART2_TxTail>
    1dac:	10 92 23 06 	sts	0x0623, r1	; 0x800623 <UART2_RxHead>
    1db0:	10 92 22 06 	sts	0x0622, r1	; 0x800622 <UART2_RxTail>
    1db4:	78 94       	sei
    1db6:	dc 01       	movw	r26, r24
    1db8:	cb 01       	movw	r24, r22
    1dba:	80 58       	subi	r24, 0x80	; 128
    1dbc:	9b 47       	sbci	r25, 0x7B	; 123
    1dbe:	a1 4e       	sbci	r26, 0xE1	; 225
    1dc0:	bf 4f       	sbci	r27, 0xFF	; 255
    1dc2:	88 0f       	add	r24, r24
    1dc4:	99 1f       	adc	r25, r25
    1dc6:	aa 1f       	adc	r26, r26
    1dc8:	bb 1f       	adc	r27, r27
    1dca:	88 0f       	add	r24, r24
    1dcc:	99 1f       	adc	r25, r25
    1dce:	aa 1f       	adc	r26, r26
    1dd0:	bb 1f       	adc	r27, r27
    1dd2:	bc 01       	movw	r22, r24
    1dd4:	cd 01       	movw	r24, r26
    1dd6:	66 0f       	add	r22, r22
    1dd8:	77 1f       	adc	r23, r23
    1dda:	88 1f       	adc	r24, r24
    1ddc:	99 1f       	adc	r25, r25
    1dde:	00 0f       	add	r16, r16
    1de0:	11 1f       	adc	r17, r17
    1de2:	22 1f       	adc	r18, r18
    1de4:	33 1f       	adc	r19, r19
    1de6:	00 0f       	add	r16, r16
    1de8:	11 1f       	adc	r17, r17
    1dea:	22 1f       	adc	r18, r18
    1dec:	33 1f       	adc	r19, r19
    1dee:	a9 01       	movw	r20, r18
    1df0:	98 01       	movw	r18, r16
    1df2:	22 0f       	add	r18, r18
    1df4:	33 1f       	adc	r19, r19
    1df6:	44 1f       	adc	r20, r20
    1df8:	55 1f       	adc	r21, r21
    1dfa:	22 0f       	add	r18, r18
    1dfc:	33 1f       	adc	r19, r19
    1dfe:	44 1f       	adc	r20, r20
    1e00:	55 1f       	adc	r21, r21
    1e02:	0e 94 0f 1a 	call	0x341e	; 0x341e <__udivmodsi4>
    1e06:	ba 01       	movw	r22, r20
    1e08:	a9 01       	movw	r20, r18
    1e0a:	41 50       	subi	r20, 0x01	; 1
    1e0c:	51 09       	sbc	r21, r1
    1e0e:	61 09       	sbc	r22, r1
    1e10:	71 09       	sbc	r23, r1
    1e12:	57 ff       	sbrs	r21, 7
    1e14:	06 c0       	rjmp	.+12     	; 0x1e22 <UART2_init+0x88>
    1e16:	82 e0       	ldi	r24, 0x02	; 2
    1e18:	80 93 d0 00 	sts	0x00D0, r24	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7000d0>
    1e1c:	5f 77       	andi	r21, 0x7F	; 127
    1e1e:	66 27       	eor	r22, r22
    1e20:	77 27       	eor	r23, r23
    1e22:	bb 27       	eor	r27, r27
    1e24:	a7 2f       	mov	r26, r23
    1e26:	96 2f       	mov	r25, r22
    1e28:	85 2f       	mov	r24, r21
    1e2a:	80 93 d5 00 	sts	0x00D5, r24	; 0x8000d5 <__TEXT_REGION_LENGTH__+0x7000d5>
    1e2e:	40 93 d4 00 	sts	0x00D4, r20	; 0x8000d4 <__TEXT_REGION_LENGTH__+0x7000d4>
    1e32:	88 e9       	ldi	r24, 0x98	; 152
    1e34:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7000d1>
    1e38:	86 e0       	ldi	r24, 0x06	; 6
    1e3a:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7000d2>
    1e3e:	1f 91       	pop	r17
    1e40:	0f 91       	pop	r16
    1e42:	08 95       	ret

00001e44 <UART2_getc>:
    1e44:	90 91 23 06 	lds	r25, 0x0623	; 0x800623 <UART2_RxHead>
    1e48:	80 91 22 06 	lds	r24, 0x0622	; 0x800622 <UART2_RxTail>
    1e4c:	98 17       	cp	r25, r24
    1e4e:	a1 f0       	breq	.+40     	; 0x1e78 <UART2_getc+0x34>
    1e50:	80 91 22 06 	lds	r24, 0x0622	; 0x800622 <UART2_RxTail>
    1e54:	90 e0       	ldi	r25, 0x00	; 0
    1e56:	01 96       	adiw	r24, 0x01	; 1
    1e58:	8f 77       	andi	r24, 0x7F	; 127
    1e5a:	99 27       	eor	r25, r25
    1e5c:	80 93 22 06 	sts	0x0622, r24	; 0x800622 <UART2_RxTail>
    1e60:	fc 01       	movw	r30, r24
    1e62:	ea 5d       	subi	r30, 0xDA	; 218
    1e64:	f9 4f       	sbci	r31, 0xF9	; 249
    1e66:	20 81       	ld	r18, Z
    1e68:	80 91 21 06 	lds	r24, 0x0621	; 0x800621 <UART2_LastRxError>
    1e6c:	90 e0       	ldi	r25, 0x00	; 0
    1e6e:	98 2f       	mov	r25, r24
    1e70:	88 27       	eor	r24, r24
    1e72:	82 0f       	add	r24, r18
    1e74:	91 1d       	adc	r25, r1
    1e76:	08 95       	ret
    1e78:	80 e0       	ldi	r24, 0x00	; 0
    1e7a:	91 e0       	ldi	r25, 0x01	; 1
    1e7c:	08 95       	ret

00001e7e <UART2_putc>:
    1e7e:	40 91 25 06 	lds	r20, 0x0625	; 0x800625 <UART2_TxHead>
    1e82:	50 e0       	ldi	r21, 0x00	; 0
    1e84:	4f 5f       	subi	r20, 0xFF	; 255
    1e86:	5f 4f       	sbci	r21, 0xFF	; 255
    1e88:	4f 77       	andi	r20, 0x7F	; 127
    1e8a:	55 27       	eor	r21, r21
    1e8c:	20 91 24 06 	lds	r18, 0x0624	; 0x800624 <UART2_TxTail>
    1e90:	30 e0       	ldi	r19, 0x00	; 0
    1e92:	42 17       	cp	r20, r18
    1e94:	53 07       	cpc	r21, r19
    1e96:	d1 f3       	breq	.-12     	; 0x1e8c <UART2_putc+0xe>
    1e98:	fa 01       	movw	r30, r20
    1e9a:	ea 55       	subi	r30, 0x5A	; 90
    1e9c:	f9 4f       	sbci	r31, 0xF9	; 249
    1e9e:	80 83       	st	Z, r24
    1ea0:	40 93 25 06 	sts	0x0625, r20	; 0x800625 <UART2_TxHead>
    1ea4:	e1 ed       	ldi	r30, 0xD1	; 209
    1ea6:	f0 e0       	ldi	r31, 0x00	; 0
    1ea8:	80 81       	ld	r24, Z
    1eaa:	80 62       	ori	r24, 0x20	; 32
    1eac:	80 83       	st	Z, r24
    1eae:	08 95       	ret

00001eb0 <UART2_available>:
    1eb0:	f8 94       	cli
    1eb2:	80 91 23 06 	lds	r24, 0x0623	; 0x800623 <UART2_RxHead>
    1eb6:	20 91 22 06 	lds	r18, 0x0622	; 0x800622 <UART2_RxTail>
    1eba:	78 94       	sei
    1ebc:	90 e0       	ldi	r25, 0x00	; 0
    1ebe:	80 58       	subi	r24, 0x80	; 128
    1ec0:	9f 4f       	sbci	r25, 0xFF	; 255
    1ec2:	82 1b       	sub	r24, r18
    1ec4:	91 09       	sbc	r25, r1
    1ec6:	8f 77       	andi	r24, 0x7F	; 127
    1ec8:	99 27       	eor	r25, r25
    1eca:	08 95       	ret

00001ecc <UART2_flush>:
    1ecc:	80 91 19 05 	lds	r24, 0x0519	; 0x800519 <UART2_Transmission_end>
    1ed0:	88 23       	and	r24, r24
    1ed2:	e1 f3       	breq	.-8      	; 0x1ecc <UART2_flush>
    1ed4:	08 95       	ret

00001ed6 <__vector_54>:
    1ed6:	1f 92       	push	r1
    1ed8:	0f 92       	push	r0
    1eda:	0f b6       	in	r0, 0x3f	; 63
    1edc:	0f 92       	push	r0
    1ede:	11 24       	eor	r1, r1
    1ee0:	0b b6       	in	r0, 0x3b	; 59
    1ee2:	0f 92       	push	r0
    1ee4:	2f 93       	push	r18
    1ee6:	3f 93       	push	r19
    1ee8:	4f 93       	push	r20
    1eea:	5f 93       	push	r21
    1eec:	8f 93       	push	r24
    1eee:	9f 93       	push	r25
    1ef0:	ef 93       	push	r30
    1ef2:	ff 93       	push	r31
    1ef4:	20 91 30 01 	lds	r18, 0x0130	; 0x800130 <__TEXT_REGION_LENGTH__+0x700130>
    1ef8:	30 91 36 01 	lds	r19, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    1efc:	28 71       	andi	r18, 0x18	; 24
    1efe:	80 91 1e 05 	lds	r24, 0x051E	; 0x80051e <UART3_RxHead>
    1f02:	90 e0       	ldi	r25, 0x00	; 0
    1f04:	01 96       	adiw	r24, 0x01	; 1
    1f06:	8f 77       	andi	r24, 0x7F	; 127
    1f08:	99 27       	eor	r25, r25
    1f0a:	40 91 1d 05 	lds	r20, 0x051D	; 0x80051d <UART3_RxTail>
    1f0e:	50 e0       	ldi	r21, 0x00	; 0
    1f10:	84 17       	cp	r24, r20
    1f12:	95 07       	cpc	r25, r21
    1f14:	39 f0       	breq	.+14     	; 0x1f24 <__vector_54+0x4e>
    1f16:	80 93 1e 05 	sts	0x051E, r24	; 0x80051e <UART3_RxHead>
    1f1a:	fc 01       	movw	r30, r24
    1f1c:	ef 5d       	subi	r30, 0xDF	; 223
    1f1e:	fa 4f       	sbci	r31, 0xFA	; 250
    1f20:	30 83       	st	Z, r19
    1f22:	01 c0       	rjmp	.+2      	; 0x1f26 <__vector_54+0x50>
    1f24:	22 e0       	ldi	r18, 0x02	; 2
    1f26:	20 93 1c 05 	sts	0x051C, r18	; 0x80051c <UART3_LastRxError>
    1f2a:	ff 91       	pop	r31
    1f2c:	ef 91       	pop	r30
    1f2e:	9f 91       	pop	r25
    1f30:	8f 91       	pop	r24
    1f32:	5f 91       	pop	r21
    1f34:	4f 91       	pop	r20
    1f36:	3f 91       	pop	r19
    1f38:	2f 91       	pop	r18
    1f3a:	0f 90       	pop	r0
    1f3c:	0b be       	out	0x3b, r0	; 59
    1f3e:	0f 90       	pop	r0
    1f40:	0f be       	out	0x3f, r0	; 63
    1f42:	0f 90       	pop	r0
    1f44:	1f 90       	pop	r1
    1f46:	18 95       	reti

00001f48 <__vector_55>:
    1f48:	1f 92       	push	r1
    1f4a:	0f 92       	push	r0
    1f4c:	0f b6       	in	r0, 0x3f	; 63
    1f4e:	0f 92       	push	r0
    1f50:	11 24       	eor	r1, r1
    1f52:	0b b6       	in	r0, 0x3b	; 59
    1f54:	0f 92       	push	r0
    1f56:	8f 93       	push	r24
    1f58:	9f 93       	push	r25
    1f5a:	ef 93       	push	r30
    1f5c:	ff 93       	push	r31
    1f5e:	90 91 20 05 	lds	r25, 0x0520	; 0x800520 <UART3_TxHead>
    1f62:	80 91 1f 05 	lds	r24, 0x051F	; 0x80051f <UART3_TxTail>
    1f66:	98 17       	cp	r25, r24
    1f68:	89 f0       	breq	.+34     	; 0x1f8c <__vector_55+0x44>
    1f6a:	80 91 1f 05 	lds	r24, 0x051F	; 0x80051f <UART3_TxTail>
    1f6e:	90 e0       	ldi	r25, 0x00	; 0
    1f70:	01 96       	adiw	r24, 0x01	; 1
    1f72:	8f 77       	andi	r24, 0x7F	; 127
    1f74:	99 27       	eor	r25, r25
    1f76:	80 93 1f 05 	sts	0x051F, r24	; 0x80051f <UART3_TxTail>
    1f7a:	fc 01       	movw	r30, r24
    1f7c:	ef 55       	subi	r30, 0x5F	; 95
    1f7e:	fa 4f       	sbci	r31, 0xFA	; 250
    1f80:	80 81       	ld	r24, Z
    1f82:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    1f86:	10 92 18 05 	sts	0x0518, r1	; 0x800518 <UART3_Transmission_end>
    1f8a:	08 c0       	rjmp	.+16     	; 0x1f9c <__vector_55+0x54>
    1f8c:	e1 e3       	ldi	r30, 0x31	; 49
    1f8e:	f1 e0       	ldi	r31, 0x01	; 1
    1f90:	80 81       	ld	r24, Z
    1f92:	8f 7d       	andi	r24, 0xDF	; 223
    1f94:	80 83       	st	Z, r24
    1f96:	81 e0       	ldi	r24, 0x01	; 1
    1f98:	80 93 18 05 	sts	0x0518, r24	; 0x800518 <UART3_Transmission_end>
    1f9c:	ff 91       	pop	r31
    1f9e:	ef 91       	pop	r30
    1fa0:	9f 91       	pop	r25
    1fa2:	8f 91       	pop	r24
    1fa4:	0f 90       	pop	r0
    1fa6:	0b be       	out	0x3b, r0	; 59
    1fa8:	0f 90       	pop	r0
    1faa:	0f be       	out	0x3f, r0	; 63
    1fac:	0f 90       	pop	r0
    1fae:	1f 90       	pop	r1
    1fb0:	18 95       	reti

00001fb2 <UART3_init>:
    1fb2:	0f 93       	push	r16
    1fb4:	1f 93       	push	r17
    1fb6:	8b 01       	movw	r16, r22
    1fb8:	9c 01       	movw	r18, r24
    1fba:	f8 94       	cli
    1fbc:	10 92 20 05 	sts	0x0520, r1	; 0x800520 <UART3_TxHead>
    1fc0:	10 92 1f 05 	sts	0x051F, r1	; 0x80051f <UART3_TxTail>
    1fc4:	10 92 1e 05 	sts	0x051E, r1	; 0x80051e <UART3_RxHead>
    1fc8:	10 92 1d 05 	sts	0x051D, r1	; 0x80051d <UART3_RxTail>
    1fcc:	78 94       	sei
    1fce:	dc 01       	movw	r26, r24
    1fd0:	cb 01       	movw	r24, r22
    1fd2:	80 58       	subi	r24, 0x80	; 128
    1fd4:	9b 47       	sbci	r25, 0x7B	; 123
    1fd6:	a1 4e       	sbci	r26, 0xE1	; 225
    1fd8:	bf 4f       	sbci	r27, 0xFF	; 255
    1fda:	88 0f       	add	r24, r24
    1fdc:	99 1f       	adc	r25, r25
    1fde:	aa 1f       	adc	r26, r26
    1fe0:	bb 1f       	adc	r27, r27
    1fe2:	88 0f       	add	r24, r24
    1fe4:	99 1f       	adc	r25, r25
    1fe6:	aa 1f       	adc	r26, r26
    1fe8:	bb 1f       	adc	r27, r27
    1fea:	bc 01       	movw	r22, r24
    1fec:	cd 01       	movw	r24, r26
    1fee:	66 0f       	add	r22, r22
    1ff0:	77 1f       	adc	r23, r23
    1ff2:	88 1f       	adc	r24, r24
    1ff4:	99 1f       	adc	r25, r25
    1ff6:	00 0f       	add	r16, r16
    1ff8:	11 1f       	adc	r17, r17
    1ffa:	22 1f       	adc	r18, r18
    1ffc:	33 1f       	adc	r19, r19
    1ffe:	00 0f       	add	r16, r16
    2000:	11 1f       	adc	r17, r17
    2002:	22 1f       	adc	r18, r18
    2004:	33 1f       	adc	r19, r19
    2006:	a9 01       	movw	r20, r18
    2008:	98 01       	movw	r18, r16
    200a:	22 0f       	add	r18, r18
    200c:	33 1f       	adc	r19, r19
    200e:	44 1f       	adc	r20, r20
    2010:	55 1f       	adc	r21, r21
    2012:	22 0f       	add	r18, r18
    2014:	33 1f       	adc	r19, r19
    2016:	44 1f       	adc	r20, r20
    2018:	55 1f       	adc	r21, r21
    201a:	0e 94 0f 1a 	call	0x341e	; 0x341e <__udivmodsi4>
    201e:	ba 01       	movw	r22, r20
    2020:	a9 01       	movw	r20, r18
    2022:	41 50       	subi	r20, 0x01	; 1
    2024:	51 09       	sbc	r21, r1
    2026:	61 09       	sbc	r22, r1
    2028:	71 09       	sbc	r23, r1
    202a:	57 ff       	sbrs	r21, 7
    202c:	06 c0       	rjmp	.+12     	; 0x203a <UART3_init+0x88>
    202e:	82 e0       	ldi	r24, 0x02	; 2
    2030:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <__TEXT_REGION_LENGTH__+0x700130>
    2034:	5f 77       	andi	r21, 0x7F	; 127
    2036:	66 27       	eor	r22, r22
    2038:	77 27       	eor	r23, r23
    203a:	bb 27       	eor	r27, r27
    203c:	a7 2f       	mov	r26, r23
    203e:	96 2f       	mov	r25, r22
    2040:	85 2f       	mov	r24, r21
    2042:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <__TEXT_REGION_LENGTH__+0x700135>
    2046:	40 93 34 01 	sts	0x0134, r20	; 0x800134 <__TEXT_REGION_LENGTH__+0x700134>
    204a:	88 e9       	ldi	r24, 0x98	; 152
    204c:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <__TEXT_REGION_LENGTH__+0x700131>
    2050:	86 e0       	ldi	r24, 0x06	; 6
    2052:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <__TEXT_REGION_LENGTH__+0x700132>
    2056:	1f 91       	pop	r17
    2058:	0f 91       	pop	r16
    205a:	08 95       	ret

0000205c <UART3_getc>:
    205c:	90 91 1e 05 	lds	r25, 0x051E	; 0x80051e <UART3_RxHead>
    2060:	80 91 1d 05 	lds	r24, 0x051D	; 0x80051d <UART3_RxTail>
    2064:	98 17       	cp	r25, r24
    2066:	a1 f0       	breq	.+40     	; 0x2090 <UART3_getc+0x34>
    2068:	80 91 1d 05 	lds	r24, 0x051D	; 0x80051d <UART3_RxTail>
    206c:	90 e0       	ldi	r25, 0x00	; 0
    206e:	01 96       	adiw	r24, 0x01	; 1
    2070:	8f 77       	andi	r24, 0x7F	; 127
    2072:	99 27       	eor	r25, r25
    2074:	80 93 1d 05 	sts	0x051D, r24	; 0x80051d <UART3_RxTail>
    2078:	fc 01       	movw	r30, r24
    207a:	ef 5d       	subi	r30, 0xDF	; 223
    207c:	fa 4f       	sbci	r31, 0xFA	; 250
    207e:	20 81       	ld	r18, Z
    2080:	80 91 1c 05 	lds	r24, 0x051C	; 0x80051c <UART3_LastRxError>
    2084:	90 e0       	ldi	r25, 0x00	; 0
    2086:	98 2f       	mov	r25, r24
    2088:	88 27       	eor	r24, r24
    208a:	82 0f       	add	r24, r18
    208c:	91 1d       	adc	r25, r1
    208e:	08 95       	ret
    2090:	80 e0       	ldi	r24, 0x00	; 0
    2092:	91 e0       	ldi	r25, 0x01	; 1
    2094:	08 95       	ret

00002096 <UART3_putc>:
    2096:	40 91 20 05 	lds	r20, 0x0520	; 0x800520 <UART3_TxHead>
    209a:	50 e0       	ldi	r21, 0x00	; 0
    209c:	4f 5f       	subi	r20, 0xFF	; 255
    209e:	5f 4f       	sbci	r21, 0xFF	; 255
    20a0:	4f 77       	andi	r20, 0x7F	; 127
    20a2:	55 27       	eor	r21, r21
    20a4:	20 91 1f 05 	lds	r18, 0x051F	; 0x80051f <UART3_TxTail>
    20a8:	30 e0       	ldi	r19, 0x00	; 0
    20aa:	42 17       	cp	r20, r18
    20ac:	53 07       	cpc	r21, r19
    20ae:	d1 f3       	breq	.-12     	; 0x20a4 <UART3_putc+0xe>
    20b0:	fa 01       	movw	r30, r20
    20b2:	ef 55       	subi	r30, 0x5F	; 95
    20b4:	fa 4f       	sbci	r31, 0xFA	; 250
    20b6:	80 83       	st	Z, r24
    20b8:	40 93 20 05 	sts	0x0520, r20	; 0x800520 <UART3_TxHead>
    20bc:	e1 e3       	ldi	r30, 0x31	; 49
    20be:	f1 e0       	ldi	r31, 0x01	; 1
    20c0:	80 81       	ld	r24, Z
    20c2:	80 62       	ori	r24, 0x20	; 32
    20c4:	80 83       	st	Z, r24
    20c6:	08 95       	ret

000020c8 <UART3_available>:
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    20c8:	f8 94       	cli
uint16_t UART3_available(void)
{
	uint16_t ret;
	
	ATOMIC_BLOCK(ATOMIC_FORCEON) {
		ret = (UART_RX3_BUFFER_SIZE + UART3_RxHead - UART3_RxTail) & UART_RX3_BUFFER_MASK;
    20ca:	80 91 1e 05 	lds	r24, 0x051E	; 0x80051e <UART3_RxHead>
    20ce:	20 91 1d 05 	lds	r18, 0x051D	; 0x80051d <UART3_RxTail>
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
    20d2:	78 94       	sei
	}
	return ret;
    20d4:	90 e0       	ldi	r25, 0x00	; 0
    20d6:	80 58       	subi	r24, 0x80	; 128
    20d8:	9f 4f       	sbci	r25, 0xFF	; 255
    20da:	82 1b       	sub	r24, r18
    20dc:	91 09       	sbc	r25, r1
} /* UART3_available */
    20de:	8f 77       	andi	r24, 0x7F	; 127
    20e0:	99 27       	eor	r25, r25
    20e2:	08 95       	ret

000020e4 <UART3_flush>:
void UART3_flush(void)
{
//	ATOMIC_BLOCK(ATOMIC_FORCEON) {
//		UART3_RxHead = UART3_RxTail;
//	} commented by mohab
	while(0 == UART3_Transmission_end);
    20e4:	80 91 18 05 	lds	r24, 0x0518	; 0x800518 <UART3_Transmission_end>
    20e8:	88 23       	and	r24, r24
    20ea:	e1 f3       	breq	.-8      	; 0x20e4 <UART3_flush>
} /* UART3_flush */
    20ec:	08 95       	ret

000020ee <RTE_drum_init>:


/*static uint16_t Conveyor_speed;*/
static uint16_t Drum_speed = 0;

void RTE_drum_init(void){
    20ee:	08 95       	ret

000020f0 <RTE_invertersetting_init>:

static SemaphoreHandle_t Sema_Time_second_handle;
static StaticSemaphore_t Sema_Time_second_Buffer;
static uint16_t Time_second;

void RTE_invertersetting_init(void){
    20f0:	0f 93       	push	r16
	Sema_Gear_ratio_handle = xSemaphoreCreateBinaryStatic(&Sema_Gear_ratio_Buffer);
    20f2:	03 e0       	ldi	r16, 0x03	; 3
    20f4:	25 ed       	ldi	r18, 0xD5	; 213
    20f6:	39 e0       	ldi	r19, 0x09	; 9
    20f8:	40 e0       	ldi	r20, 0x00	; 0
    20fa:	50 e0       	ldi	r21, 0x00	; 0
    20fc:	60 e0       	ldi	r22, 0x00	; 0
    20fe:	81 e0       	ldi	r24, 0x01	; 1
    2100:	1e d3       	rcall	.+1596   	; 0x273e <xQueueGenericCreateStatic>
    2102:	90 93 f5 09 	sts	0x09F5, r25	; 0x8009f5 <Sema_Gear_ratio_handle+0x1>
    2106:	80 93 f4 09 	sts	0x09F4, r24	; 0x8009f4 <Sema_Gear_ratio_handle>
	Sema_RPM_max_handle = xSemaphoreCreateBinaryStatic(&Sema_RPM_max_Buffer);
    210a:	24 eb       	ldi	r18, 0xB4	; 180
    210c:	39 e0       	ldi	r19, 0x09	; 9
    210e:	40 e0       	ldi	r20, 0x00	; 0
    2110:	50 e0       	ldi	r21, 0x00	; 0
    2112:	60 e0       	ldi	r22, 0x00	; 0
    2114:	81 e0       	ldi	r24, 0x01	; 1
    2116:	13 d3       	rcall	.+1574   	; 0x273e <xQueueGenericCreateStatic>
    2118:	90 93 d4 09 	sts	0x09D4, r25	; 0x8009d4 <Sema_RPM_max_handle+0x1>
    211c:	80 93 d3 09 	sts	0x09D3, r24	; 0x8009d3 <Sema_RPM_max_handle>
	Sema_Conveyor_length_handle =  xSemaphoreCreateBinaryStatic(&Sema_Conveyor_length_Buffer);
    2120:	23 e9       	ldi	r18, 0x93	; 147
    2122:	39 e0       	ldi	r19, 0x09	; 9
    2124:	40 e0       	ldi	r20, 0x00	; 0
    2126:	50 e0       	ldi	r21, 0x00	; 0
    2128:	60 e0       	ldi	r22, 0x00	; 0
    212a:	81 e0       	ldi	r24, 0x01	; 1
    212c:	08 d3       	rcall	.+1552   	; 0x273e <xQueueGenericCreateStatic>
    212e:	90 93 b3 09 	sts	0x09B3, r25	; 0x8009b3 <Sema_Conveyor_length_handle+0x1>
    2132:	80 93 b2 09 	sts	0x09B2, r24	; 0x8009b2 <Sema_Conveyor_length_handle>
	Sema_Driver_diameter_handle =  xSemaphoreCreateBinaryStatic(&Sema_Driver_diameter_Buffer);
    2136:	22 e7       	ldi	r18, 0x72	; 114
    2138:	39 e0       	ldi	r19, 0x09	; 9
    213a:	40 e0       	ldi	r20, 0x00	; 0
    213c:	50 e0       	ldi	r21, 0x00	; 0
    213e:	60 e0       	ldi	r22, 0x00	; 0
    2140:	81 e0       	ldi	r24, 0x01	; 1
    2142:	fd d2       	rcall	.+1530   	; 0x273e <xQueueGenericCreateStatic>
    2144:	90 93 92 09 	sts	0x0992, r25	; 0x800992 <Sema_Driver_diameter_handle+0x1>
    2148:	80 93 91 09 	sts	0x0991, r24	; 0x800991 <Sema_Driver_diameter_handle>
	Sema_Time_minute_handle =  xSemaphoreCreateBinaryStatic(&Sema_Time_minute_Buffer);
    214c:	21 e5       	ldi	r18, 0x51	; 81
    214e:	39 e0       	ldi	r19, 0x09	; 9
    2150:	40 e0       	ldi	r20, 0x00	; 0
    2152:	50 e0       	ldi	r21, 0x00	; 0
    2154:	60 e0       	ldi	r22, 0x00	; 0
    2156:	81 e0       	ldi	r24, 0x01	; 1
    2158:	f2 d2       	rcall	.+1508   	; 0x273e <xQueueGenericCreateStatic>
    215a:	90 93 71 09 	sts	0x0971, r25	; 0x800971 <Sema_Time_minute_handle+0x1>
    215e:	80 93 70 09 	sts	0x0970, r24	; 0x800970 <Sema_Time_minute_handle>
	Sema_Time_second_handle =  xSemaphoreCreateBinaryStatic(&Sema_Time_second_Buffer);
    2162:	20 e3       	ldi	r18, 0x30	; 48
    2164:	39 e0       	ldi	r19, 0x09	; 9
    2166:	40 e0       	ldi	r20, 0x00	; 0
    2168:	50 e0       	ldi	r21, 0x00	; 0
    216a:	60 e0       	ldi	r22, 0x00	; 0
    216c:	81 e0       	ldi	r24, 0x01	; 1
    216e:	e7 d2       	rcall	.+1486   	; 0x273e <xQueueGenericCreateStatic>
    2170:	90 93 50 09 	sts	0x0950, r25	; 0x800950 <Sema_Time_second_handle+0x1>
    2174:	80 93 4f 09 	sts	0x094F, r24	; 0x80094f <Sema_Time_second_handle>
}
    2178:	0f 91       	pop	r16
    217a:	08 95       	ret

0000217c <RTE_levels_init>:

static SemaphoreHandle_t Sema_blancher_level_handle;
static StaticSemaphore_t Sema_blancher_level_Buffer;
static uint16_t blancher_level;

void RTE_levels_init(void){
    217c:	0f 93       	push	r16
	Sema_tank_level_handle = xSemaphoreCreateBinaryStatic(&Sema_tank_level_Buffer);
    217e:	03 e0       	ldi	r16, 0x03	; 3
    2180:	27 e1       	ldi	r18, 0x17	; 23
    2182:	3a e0       	ldi	r19, 0x0A	; 10
    2184:	40 e0       	ldi	r20, 0x00	; 0
    2186:	50 e0       	ldi	r21, 0x00	; 0
    2188:	60 e0       	ldi	r22, 0x00	; 0
    218a:	81 e0       	ldi	r24, 0x01	; 1
    218c:	d8 d2       	rcall	.+1456   	; 0x273e <xQueueGenericCreateStatic>
    218e:	90 93 37 0a 	sts	0x0A37, r25	; 0x800a37 <Sema_tank_level_handle+0x1>
    2192:	80 93 36 0a 	sts	0x0A36, r24	; 0x800a36 <Sema_tank_level_handle>
	Sema_blancher_level_handle = xSemaphoreCreateBinaryStatic(&Sema_blancher_level_Buffer);
    2196:	26 ef       	ldi	r18, 0xF6	; 246
    2198:	39 e0       	ldi	r19, 0x09	; 9
    219a:	40 e0       	ldi	r20, 0x00	; 0
    219c:	50 e0       	ldi	r21, 0x00	; 0
    219e:	60 e0       	ldi	r22, 0x00	; 0
    21a0:	81 e0       	ldi	r24, 0x01	; 1
    21a2:	cd d2       	rcall	.+1434   	; 0x273e <xQueueGenericCreateStatic>
    21a4:	90 93 16 0a 	sts	0x0A16, r25	; 0x800a16 <Sema_blancher_level_handle+0x1>
    21a8:	80 93 15 0a 	sts	0x0A15, r24	; 0x800a15 <Sema_blancher_level_handle>
}
    21ac:	0f 91       	pop	r16
    21ae:	08 95       	ret

000021b0 <RTE_init>:
#include "RTE_levels.h"
#include "RTE_temperature.h"
#include "RTE_main.h"

void RTE_init(void){
	RTE_drum_init();
    21b0:	9e df       	rcall	.-196    	; 0x20ee <RTE_drum_init>
	RTE_invertersetting_init();
    21b2:	9e df       	rcall	.-196    	; 0x20f0 <RTE_invertersetting_init>
	RTE_operations_init();
    21b4:	03 d0       	rcall	.+6      	; 0x21bc <RTE_operations_init>
	RTE_levels_init();
    21b6:	e2 df       	rcall	.-60     	; 0x217c <RTE_levels_init>
    21b8:	31 c0       	rjmp	.+98     	; 0x221c <RTE_temperature_init>
	RTE_temperature_init();
    21ba:	08 95       	ret

000021bc <RTE_operations_init>:
    21bc:	0f 93       	push	r16
    21be:	03 e0       	ldi	r16, 0x03	; 3
static SemaphoreHandle_t Sema_Tank_Calibration_Operation_handle;
static StaticSemaphore_t Sema_Tank_Calibration_Operation_Buffer;
static uint16_t Tank_Calibration_Operation;

void RTE_operations_init(void){
	Sema_System_on_handle = xSemaphoreCreateBinaryStatic(&Sema_System_on_Buffer);
    21c0:	2b e9       	ldi	r18, 0x9B	; 155
    21c2:	3a e0       	ldi	r19, 0x0A	; 10
    21c4:	40 e0       	ldi	r20, 0x00	; 0
    21c6:	50 e0       	ldi	r21, 0x00	; 0
    21c8:	60 e0       	ldi	r22, 0x00	; 0
    21ca:	81 e0       	ldi	r24, 0x01	; 1
    21cc:	b8 d2       	rcall	.+1392   	; 0x273e <xQueueGenericCreateStatic>
    21ce:	90 93 bb 0a 	sts	0x0ABB, r25	; 0x800abb <Sema_System_on_handle+0x1>
    21d2:	80 93 ba 0a 	sts	0x0ABA, r24	; 0x800aba <Sema_System_on_handle>
	Sema_Start_blancher_Operation_handle = xSemaphoreCreateBinaryStatic(&Sema_Start_blancher_Operation_Buffer);
    21d6:	2a e7       	ldi	r18, 0x7A	; 122
    21d8:	3a e0       	ldi	r19, 0x0A	; 10
    21da:	40 e0       	ldi	r20, 0x00	; 0
    21dc:	50 e0       	ldi	r21, 0x00	; 0
    21de:	60 e0       	ldi	r22, 0x00	; 0
    21e0:	81 e0       	ldi	r24, 0x01	; 1
    21e2:	ad d2       	rcall	.+1370   	; 0x273e <xQueueGenericCreateStatic>
    21e4:	90 93 9a 0a 	sts	0x0A9A, r25	; 0x800a9a <Sema_Start_blancher_Operation_handle+0x1>
    21e8:	80 93 99 0a 	sts	0x0A99, r24	; 0x800a99 <Sema_Start_blancher_Operation_handle>
	Sema_Wash_Operation_handle = xSemaphoreCreateBinaryStatic(&Sema_Wash_Operation_Buffer);
    21ec:	29 e5       	ldi	r18, 0x59	; 89
    21ee:	3a e0       	ldi	r19, 0x0A	; 10
    21f0:	40 e0       	ldi	r20, 0x00	; 0
    21f2:	50 e0       	ldi	r21, 0x00	; 0
    21f4:	60 e0       	ldi	r22, 0x00	; 0
    21f6:	81 e0       	ldi	r24, 0x01	; 1
    21f8:	a2 d2       	rcall	.+1348   	; 0x273e <xQueueGenericCreateStatic>
    21fa:	90 93 79 0a 	sts	0x0A79, r25	; 0x800a79 <Sema_Wash_Operation_handle+0x1>
    21fe:	80 93 78 0a 	sts	0x0A78, r24	; 0x800a78 <Sema_Wash_Operation_handle>
	Sema_Tank_Calibration_Operation_handle = xSemaphoreCreateBinaryStatic(&Sema_Tank_Calibration_Operation_Buffer);
    2202:	28 e3       	ldi	r18, 0x38	; 56
    2204:	3a e0       	ldi	r19, 0x0A	; 10
    2206:	40 e0       	ldi	r20, 0x00	; 0
    2208:	50 e0       	ldi	r21, 0x00	; 0
    220a:	60 e0       	ldi	r22, 0x00	; 0
    220c:	81 e0       	ldi	r24, 0x01	; 1
    220e:	97 d2       	rcall	.+1326   	; 0x273e <xQueueGenericCreateStatic>
    2210:	90 93 58 0a 	sts	0x0A58, r25	; 0x800a58 <Sema_Tank_Calibration_Operation_handle+0x1>
    2214:	80 93 57 0a 	sts	0x0A57, r24	; 0x800a57 <Sema_Tank_Calibration_Operation_handle>

}
    2218:	0f 91       	pop	r16
    221a:	08 95       	ret

0000221c <RTE_temperature_init>:

static uint16_t Current_temperature;



void RTE_temperature_init(void){
    221c:	0f 93       	push	r16
	Sema_Sleep_temp_handle = xSemaphoreCreateBinaryStatic(&Sema_Sleep_temp_Buffer);
    221e:	03 e0       	ldi	r16, 0x03	; 3
    2220:	22 e8       	ldi	r18, 0x82	; 130
    2222:	3b e0       	ldi	r19, 0x0B	; 11
    2224:	40 e0       	ldi	r20, 0x00	; 0
    2226:	50 e0       	ldi	r21, 0x00	; 0
    2228:	60 e0       	ldi	r22, 0x00	; 0
    222a:	81 e0       	ldi	r24, 0x01	; 1
    222c:	88 d2       	rcall	.+1296   	; 0x273e <xQueueGenericCreateStatic>
    222e:	90 93 a2 0b 	sts	0x0BA2, r25	; 0x800ba2 <Sema_Sleep_temp_handle+0x1>
    2232:	80 93 a1 0b 	sts	0x0BA1, r24	; 0x800ba1 <Sema_Sleep_temp_handle>
	Sema_Set_temp_handle = xSemaphoreCreateBinaryStatic(&Sema_Set_temp_Buffer);
    2236:	21 e6       	ldi	r18, 0x61	; 97
    2238:	3b e0       	ldi	r19, 0x0B	; 11
    223a:	40 e0       	ldi	r20, 0x00	; 0
    223c:	50 e0       	ldi	r21, 0x00	; 0
    223e:	60 e0       	ldi	r22, 0x00	; 0
    2240:	81 e0       	ldi	r24, 0x01	; 1
    2242:	7d d2       	rcall	.+1274   	; 0x273e <xQueueGenericCreateStatic>
    2244:	90 93 81 0b 	sts	0x0B81, r25	; 0x800b81 <Sema_Set_temp_handle+0x1>
    2248:	80 93 80 0b 	sts	0x0B80, r24	; 0x800b80 <Sema_Set_temp_handle>
	Sema_threshold_set_temp_handle = xSemaphoreCreateBinaryStatic(&Sema_threshold_set_temp_Buffer);
    224c:	20 e4       	ldi	r18, 0x40	; 64
    224e:	3b e0       	ldi	r19, 0x0B	; 11
    2250:	40 e0       	ldi	r20, 0x00	; 0
    2252:	50 e0       	ldi	r21, 0x00	; 0
    2254:	60 e0       	ldi	r22, 0x00	; 0
    2256:	81 e0       	ldi	r24, 0x01	; 1
    2258:	72 d2       	rcall	.+1252   	; 0x273e <xQueueGenericCreateStatic>
    225a:	90 93 60 0b 	sts	0x0B60, r25	; 0x800b60 <Sema_threshold_set_temp_handle+0x1>
    225e:	80 93 5f 0b 	sts	0x0B5F, r24	; 0x800b5f <Sema_threshold_set_temp_handle>
	Sema_threshold_sleep_temp_handle = xSemaphoreCreateBinaryStatic(&Sema_threshold_sleep_temp_Buffer);
    2262:	2f e1       	ldi	r18, 0x1F	; 31
    2264:	3b e0       	ldi	r19, 0x0B	; 11
    2266:	40 e0       	ldi	r20, 0x00	; 0
    2268:	50 e0       	ldi	r21, 0x00	; 0
    226a:	60 e0       	ldi	r22, 0x00	; 0
    226c:	81 e0       	ldi	r24, 0x01	; 1
    226e:	67 d2       	rcall	.+1230   	; 0x273e <xQueueGenericCreateStatic>
    2270:	90 93 3f 0b 	sts	0x0B3F, r25	; 0x800b3f <Sema_threshold_sleep_temp_handle+0x1>
    2274:	80 93 3e 0b 	sts	0x0B3E, r24	; 0x800b3e <Sema_threshold_sleep_temp_handle>
	Sema_Positive_offset_temp_handle = xSemaphoreCreateBinaryStatic(&Sema_Positive_offset_temp_Buffer);
    2278:	2e ef       	ldi	r18, 0xFE	; 254
    227a:	3a e0       	ldi	r19, 0x0A	; 10
    227c:	40 e0       	ldi	r20, 0x00	; 0
    227e:	50 e0       	ldi	r21, 0x00	; 0
    2280:	60 e0       	ldi	r22, 0x00	; 0
    2282:	81 e0       	ldi	r24, 0x01	; 1
    2284:	5c d2       	rcall	.+1208   	; 0x273e <xQueueGenericCreateStatic>
    2286:	90 93 1e 0b 	sts	0x0B1E, r25	; 0x800b1e <Sema_Positive_offset_temp_handle+0x1>
    228a:	80 93 1d 0b 	sts	0x0B1D, r24	; 0x800b1d <Sema_Positive_offset_temp_handle>
	Sema_Negative_offset_temp_handle = xSemaphoreCreateBinaryStatic(&Sema_Negative_offset_temp_Buffer);
    228e:	2d ed       	ldi	r18, 0xDD	; 221
    2290:	3a e0       	ldi	r19, 0x0A	; 10
    2292:	40 e0       	ldi	r20, 0x00	; 0
    2294:	50 e0       	ldi	r21, 0x00	; 0
    2296:	60 e0       	ldi	r22, 0x00	; 0
    2298:	81 e0       	ldi	r24, 0x01	; 1
    229a:	51 d2       	rcall	.+1186   	; 0x273e <xQueueGenericCreateStatic>
    229c:	90 93 fd 0a 	sts	0x0AFD, r25	; 0x800afd <Sema_Negative_offset_temp_handle+0x1>
    22a0:	80 93 fc 0a 	sts	0x0AFC, r24	; 0x800afc <Sema_Negative_offset_temp_handle>
	Sema_APP_current_temp_handle = xSemaphoreCreateBinaryStatic(&Sema_APP_current_temp_Buffer);
    22a4:	2c eb       	ldi	r18, 0xBC	; 188
    22a6:	3a e0       	ldi	r19, 0x0A	; 10
    22a8:	40 e0       	ldi	r20, 0x00	; 0
    22aa:	50 e0       	ldi	r21, 0x00	; 0
    22ac:	60 e0       	ldi	r22, 0x00	; 0
    22ae:	81 e0       	ldi	r24, 0x01	; 1
    22b0:	46 d2       	rcall	.+1164   	; 0x273e <xQueueGenericCreateStatic>
    22b2:	90 93 dc 0a 	sts	0x0ADC, r25	; 0x800adc <Sema_APP_current_temp_handle+0x1>
    22b6:	80 93 db 0a 	sts	0x0ADB, r24	; 0x800adb <Sema_APP_current_temp_handle>

}
    22ba:	0f 91       	pop	r16
    22bc:	08 95       	ret

000022be <vApplicationStackOverflowHook>:
	   This routine will never return.
	   This routine is referenced in the task.c file of FreeRTOS as an extern.
	\*---------------------------------------------------------------------------*/

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
	DDRB  |= _BV(DDB7);
    22be:	27 9a       	sbi	0x04, 7	; 4
	PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    22c0:	2f 9a       	sbi	0x05, 7	; 5
    22c2:	2f ef       	ldi	r18, 0xFF	; 255
    22c4:	87 ea       	ldi	r24, 0xA7	; 167
    22c6:	91 e6       	ldi	r25, 0x61	; 97
    22c8:	21 50       	subi	r18, 0x01	; 1
    22ca:	80 40       	sbci	r24, 0x00	; 0
    22cc:	90 40       	sbci	r25, 0x00	; 0
    22ce:	e1 f7       	brne	.-8      	; 0x22c8 <vApplicationStackOverflowHook+0xa>
    22d0:	00 c0       	rjmp	.+0      	; 0x22d2 <vApplicationStackOverflowHook+0x14>
    22d2:	00 00       	nop
	for(;;)
	{
		_delay_ms(2000);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
		PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED slow blink.
    22d4:	1f 9a       	sbi	0x03, 7	; 3
    22d6:	f5 cf       	rjmp	.-22     	; 0x22c2 <vApplicationStackOverflowHook+0x4>

000022d8 <vListInitialise>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
    22d8:	fc 01       	movw	r30, r24
    22da:	03 96       	adiw	r24, 0x03	; 3
    22dc:	92 83       	std	Z+2, r25	; 0x02
    22de:	81 83       	std	Z+1, r24	; 0x01
    22e0:	2f ef       	ldi	r18, 0xFF	; 255
    22e2:	3f ef       	ldi	r19, 0xFF	; 255
    22e4:	34 83       	std	Z+4, r19	; 0x04
    22e6:	23 83       	std	Z+3, r18	; 0x03
    22e8:	96 83       	std	Z+6, r25	; 0x06
    22ea:	85 83       	std	Z+5, r24	; 0x05
    22ec:	90 87       	std	Z+8, r25	; 0x08
    22ee:	87 83       	std	Z+7, r24	; 0x07
    22f0:	10 82       	st	Z, r1
    22f2:	08 95       	ret

000022f4 <vListInsertEnd>:
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    22f4:	cf 93       	push	r28
    22f6:	df 93       	push	r29
    22f8:	9c 01       	movw	r18, r24
    22fa:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
    22fc:	dc 01       	movw	r26, r24
    22fe:	11 96       	adiw	r26, 0x01	; 1
    2300:	cd 91       	ld	r28, X+
    2302:	dc 91       	ld	r29, X
    2304:	12 97       	sbiw	r26, 0x02	; 2
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
    makes the new list item the last item to be removed by a call to
    listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
    2306:	d3 83       	std	Z+3, r29	; 0x03
    2308:	c2 83       	std	Z+2, r28	; 0x02
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    230a:	8c 81       	ldd	r24, Y+4	; 0x04
    230c:	9d 81       	ldd	r25, Y+5	; 0x05
    230e:	95 83       	std	Z+5, r25	; 0x05
    2310:	84 83       	std	Z+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
    2312:	8c 81       	ldd	r24, Y+4	; 0x04
    2314:	9d 81       	ldd	r25, Y+5	; 0x05
    2316:	dc 01       	movw	r26, r24
    2318:	13 96       	adiw	r26, 0x03	; 3
    231a:	7c 93       	st	X, r23
    231c:	6e 93       	st	-X, r22
    231e:	12 97       	sbiw	r26, 0x02	; 2
    pxIndex->pxPrevious = pxNewListItem;
    2320:	7d 83       	std	Y+5, r23	; 0x05
    2322:	6c 83       	std	Y+4, r22	; 0x04

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
    2324:	31 87       	std	Z+9, r19	; 0x09
    2326:	20 87       	std	Z+8, r18	; 0x08

    ( pxList->uxNumberOfItems )++;
    2328:	f9 01       	movw	r30, r18
    232a:	80 81       	ld	r24, Z
    232c:	8f 5f       	subi	r24, 0xFF	; 255
    232e:	80 83       	st	Z, r24
}
    2330:	df 91       	pop	r29
    2332:	cf 91       	pop	r28
    2334:	08 95       	ret

00002336 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    2336:	cf 93       	push	r28
    2338:	df 93       	push	r29
    233a:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    233c:	48 81       	ld	r20, Y
    233e:	59 81       	ldd	r21, Y+1	; 0x01
    new list item should be placed after it.  This ensures that TCBs which are
    stored in ready lists (all of which have the same xItemValue value) get a
    share of the CPU.  However, if the xItemValue is the same as the back marker
    the iteration loop below will not end.  Therefore the value is checked
    first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
    2340:	4f 3f       	cpi	r20, 0xFF	; 255
    2342:	2f ef       	ldi	r18, 0xFF	; 255
    2344:	52 07       	cpc	r21, r18
    2346:	21 f4       	brne	.+8      	; 0x2350 <vListInsert+0x1a>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
    2348:	fc 01       	movw	r30, r24
    234a:	a7 81       	ldd	r26, Z+7	; 0x07
    234c:	b0 85       	ldd	r27, Z+8	; 0x08
    234e:	0d c0       	rjmp	.+26     	; 0x236a <vListInsert+0x34>
            4) Using a queue or semaphore before it has been initialised or
               before the scheduler has been started (are interrupts firing
               before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
    2350:	dc 01       	movw	r26, r24
    2352:	13 96       	adiw	r26, 0x03	; 3
    2354:	01 c0       	rjmp	.+2      	; 0x2358 <vListInsert+0x22>
    2356:	df 01       	movw	r26, r30
    2358:	12 96       	adiw	r26, 0x02	; 2
    235a:	ed 91       	ld	r30, X+
    235c:	fc 91       	ld	r31, X
    235e:	13 97       	sbiw	r26, 0x03	; 3
    2360:	20 81       	ld	r18, Z
    2362:	31 81       	ldd	r19, Z+1	; 0x01
    2364:	42 17       	cp	r20, r18
    2366:	53 07       	cpc	r21, r19
    2368:	b0 f7       	brcc	.-20     	; 0x2356 <vListInsert+0x20>
            /* There is nothing to do here, just iterating to the wanted
            insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
    236a:	12 96       	adiw	r26, 0x02	; 2
    236c:	ed 91       	ld	r30, X+
    236e:	fc 91       	ld	r31, X
    2370:	13 97       	sbiw	r26, 0x03	; 3
    2372:	fb 83       	std	Y+3, r31	; 0x03
    2374:	ea 83       	std	Y+2, r30	; 0x02
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    2376:	d5 83       	std	Z+5, r29	; 0x05
    2378:	c4 83       	std	Z+4, r28	; 0x04
    pxNewListItem->pxPrevious = pxIterator;
    237a:	bd 83       	std	Y+5, r27	; 0x05
    237c:	ac 83       	std	Y+4, r26	; 0x04
    pxIterator->pxNext = pxNewListItem;
    237e:	13 96       	adiw	r26, 0x03	; 3
    2380:	dc 93       	st	X, r29
    2382:	ce 93       	st	-X, r28
    2384:	12 97       	sbiw	r26, 0x02	; 2

    /* Remember which list the item is in.  This allows fast removal of the
    item later. */
    pxNewListItem->pxContainer = pxList;
    2386:	99 87       	std	Y+9, r25	; 0x09
    2388:	88 87       	std	Y+8, r24	; 0x08

    ( pxList->uxNumberOfItems )++;
    238a:	fc 01       	movw	r30, r24
    238c:	20 81       	ld	r18, Z
    238e:	2f 5f       	subi	r18, 0xFF	; 255
    2390:	20 83       	st	Z, r18
}
    2392:	df 91       	pop	r29
    2394:	cf 91       	pop	r28
    2396:	08 95       	ret

00002398 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    2398:	cf 93       	push	r28
    239a:	df 93       	push	r29
    239c:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
    239e:	a0 85       	ldd	r26, Z+8	; 0x08
    23a0:	b1 85       	ldd	r27, Z+9	; 0x09

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    23a2:	c2 81       	ldd	r28, Z+2	; 0x02
    23a4:	d3 81       	ldd	r29, Z+3	; 0x03
    23a6:	84 81       	ldd	r24, Z+4	; 0x04
    23a8:	95 81       	ldd	r25, Z+5	; 0x05
    23aa:	9d 83       	std	Y+5, r25	; 0x05
    23ac:	8c 83       	std	Y+4, r24	; 0x04
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    23ae:	c4 81       	ldd	r28, Z+4	; 0x04
    23b0:	d5 81       	ldd	r29, Z+5	; 0x05
    23b2:	82 81       	ldd	r24, Z+2	; 0x02
    23b4:	93 81       	ldd	r25, Z+3	; 0x03
    23b6:	9b 83       	std	Y+3, r25	; 0x03
    23b8:	8a 83       	std	Y+2, r24	; 0x02

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
    23ba:	11 96       	adiw	r26, 0x01	; 1
    23bc:	8d 91       	ld	r24, X+
    23be:	9c 91       	ld	r25, X
    23c0:	12 97       	sbiw	r26, 0x02	; 2
    23c2:	e8 17       	cp	r30, r24
    23c4:	f9 07       	cpc	r31, r25
    23c6:	31 f4       	brne	.+12     	; 0x23d4 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
    23c8:	84 81       	ldd	r24, Z+4	; 0x04
    23ca:	95 81       	ldd	r25, Z+5	; 0x05
    23cc:	12 96       	adiw	r26, 0x02	; 2
    23ce:	9c 93       	st	X, r25
    23d0:	8e 93       	st	-X, r24
    23d2:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
    23d4:	11 86       	std	Z+9, r1	; 0x09
    23d6:	10 86       	std	Z+8, r1	; 0x08
    ( pxList->uxNumberOfItems )--;
    23d8:	8c 91       	ld	r24, X
    23da:	81 50       	subi	r24, 0x01	; 1
    23dc:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
    23de:	8c 91       	ld	r24, X
}
    23e0:	df 91       	pop	r29
    23e2:	cf 91       	pop	r28
    23e4:	08 95       	ret

000023e6 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    23e6:	0f 92       	push	r0
    23e8:	0f b6       	in	r0, 0x3f	; 63
    23ea:	f8 94       	cli
    23ec:	0f 92       	push	r0
    23ee:	0b b6       	in	r0, 0x3b	; 59
    23f0:	0f 92       	push	r0
    23f2:	0c b6       	in	r0, 0x3c	; 60
    23f4:	0f 92       	push	r0
    23f6:	1f 92       	push	r1
    23f8:	11 24       	eor	r1, r1
    23fa:	2f 92       	push	r2
    23fc:	3f 92       	push	r3
    23fe:	4f 92       	push	r4
    2400:	5f 92       	push	r5
    2402:	6f 92       	push	r6
    2404:	7f 92       	push	r7
    2406:	8f 92       	push	r8
    2408:	9f 92       	push	r9
    240a:	af 92       	push	r10
    240c:	bf 92       	push	r11
    240e:	cf 92       	push	r12
    2410:	df 92       	push	r13
    2412:	ef 92       	push	r14
    2414:	ff 92       	push	r15
    2416:	0f 93       	push	r16
    2418:	1f 93       	push	r17
    241a:	2f 93       	push	r18
    241c:	3f 93       	push	r19
    241e:	4f 93       	push	r20
    2420:	5f 93       	push	r21
    2422:	6f 93       	push	r22
    2424:	7f 93       	push	r23
    2426:	8f 93       	push	r24
    2428:	9f 93       	push	r25
    242a:	af 93       	push	r26
    242c:	bf 93       	push	r27
    242e:	cf 93       	push	r28
    2430:	df 93       	push	r29
    2432:	ef 93       	push	r30
    2434:	ff 93       	push	r31
    2436:	a0 91 de 0b 	lds	r26, 0x0BDE	; 0x800bde <pxCurrentTCB>
    243a:	b0 91 df 0b 	lds	r27, 0x0BDF	; 0x800bdf <pxCurrentTCB+0x1>
    243e:	0d b6       	in	r0, 0x3d	; 61
    2440:	0d 92       	st	X+, r0
    2442:	0e b6       	in	r0, 0x3e	; 62
    2444:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    2446:	b8 d3       	rcall	.+1904   	; 0x2bb8 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    2448:	a0 91 de 0b 	lds	r26, 0x0BDE	; 0x800bde <pxCurrentTCB>
    244c:	b0 91 df 0b 	lds	r27, 0x0BDF	; 0x800bdf <pxCurrentTCB+0x1>
    2450:	cd 91       	ld	r28, X+
    2452:	cd bf       	out	0x3d, r28	; 61
    2454:	dd 91       	ld	r29, X+
    2456:	de bf       	out	0x3e, r29	; 62
    2458:	ff 91       	pop	r31
    245a:	ef 91       	pop	r30
    245c:	df 91       	pop	r29
    245e:	cf 91       	pop	r28
    2460:	bf 91       	pop	r27
    2462:	af 91       	pop	r26
    2464:	9f 91       	pop	r25
    2466:	8f 91       	pop	r24
    2468:	7f 91       	pop	r23
    246a:	6f 91       	pop	r22
    246c:	5f 91       	pop	r21
    246e:	4f 91       	pop	r20
    2470:	3f 91       	pop	r19
    2472:	2f 91       	pop	r18
    2474:	1f 91       	pop	r17
    2476:	0f 91       	pop	r16
    2478:	ff 90       	pop	r15
    247a:	ef 90       	pop	r14
    247c:	df 90       	pop	r13
    247e:	cf 90       	pop	r12
    2480:	bf 90       	pop	r11
    2482:	af 90       	pop	r10
    2484:	9f 90       	pop	r9
    2486:	8f 90       	pop	r8
    2488:	7f 90       	pop	r7
    248a:	6f 90       	pop	r6
    248c:	5f 90       	pop	r5
    248e:	4f 90       	pop	r4
    2490:	3f 90       	pop	r3
    2492:	2f 90       	pop	r2
    2494:	1f 90       	pop	r1
    2496:	0f 90       	pop	r0
    2498:	0c be       	out	0x3c, r0	; 60
    249a:	0f 90       	pop	r0
    249c:	0b be       	out	0x3b, r0	; 59
    249e:	0f 90       	pop	r0
    24a0:	0f be       	out	0x3f, r0	; 63
    24a2:	0f 90       	pop	r0

	__asm__ __volatile__ ( "ret" );
    24a4:	08 95       	ret

000024a6 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    24a6:	0f 92       	push	r0
    24a8:	0f b6       	in	r0, 0x3f	; 63
    24aa:	f8 94       	cli
    24ac:	0f 92       	push	r0
    24ae:	0b b6       	in	r0, 0x3b	; 59
    24b0:	0f 92       	push	r0
    24b2:	0c b6       	in	r0, 0x3c	; 60
    24b4:	0f 92       	push	r0
    24b6:	1f 92       	push	r1
    24b8:	11 24       	eor	r1, r1
    24ba:	2f 92       	push	r2
    24bc:	3f 92       	push	r3
    24be:	4f 92       	push	r4
    24c0:	5f 92       	push	r5
    24c2:	6f 92       	push	r6
    24c4:	7f 92       	push	r7
    24c6:	8f 92       	push	r8
    24c8:	9f 92       	push	r9
    24ca:	af 92       	push	r10
    24cc:	bf 92       	push	r11
    24ce:	cf 92       	push	r12
    24d0:	df 92       	push	r13
    24d2:	ef 92       	push	r14
    24d4:	ff 92       	push	r15
    24d6:	0f 93       	push	r16
    24d8:	1f 93       	push	r17
    24da:	2f 93       	push	r18
    24dc:	3f 93       	push	r19
    24de:	4f 93       	push	r20
    24e0:	5f 93       	push	r21
    24e2:	6f 93       	push	r22
    24e4:	7f 93       	push	r23
    24e6:	8f 93       	push	r24
    24e8:	9f 93       	push	r25
    24ea:	af 93       	push	r26
    24ec:	bf 93       	push	r27
    24ee:	cf 93       	push	r28
    24f0:	df 93       	push	r29
    24f2:	ef 93       	push	r30
    24f4:	ff 93       	push	r31
    24f6:	a0 91 de 0b 	lds	r26, 0x0BDE	; 0x800bde <pxCurrentTCB>
    24fa:	b0 91 df 0b 	lds	r27, 0x0BDF	; 0x800bdf <pxCurrentTCB+0x1>
    24fe:	0d b6       	in	r0, 0x3d	; 61
    2500:	0d 92       	st	X+, r0
    2502:	0e b6       	in	r0, 0x3e	; 62
    2504:	0d 92       	st	X+, r0

	sleep_reset();		//	 reset the sleep_mode() faster than sleep_disable();
    2506:	13 be       	out	0x33, r1	; 51

	if( xTaskIncrementTick() != pdFALSE )
    2508:	27 d2       	rcall	.+1102   	; 0x2958 <xTaskIncrementTick>
    250a:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
    250c:	55 d3       	rcall	.+1706   	; 0x2bb8 <vTaskSwitchContext>
    250e:	a0 91 de 0b 	lds	r26, 0x0BDE	; 0x800bde <pxCurrentTCB>
	}

	portRESTORE_CONTEXT();
    2512:	b0 91 df 0b 	lds	r27, 0x0BDF	; 0x800bdf <pxCurrentTCB+0x1>
    2516:	cd 91       	ld	r28, X+
    2518:	cd bf       	out	0x3d, r28	; 61
    251a:	dd 91       	ld	r29, X+
    251c:	de bf       	out	0x3e, r29	; 62
    251e:	ff 91       	pop	r31
    2520:	ef 91       	pop	r30
    2522:	df 91       	pop	r29
    2524:	cf 91       	pop	r28
    2526:	bf 91       	pop	r27
    2528:	af 91       	pop	r26
    252a:	9f 91       	pop	r25
    252c:	8f 91       	pop	r24
    252e:	7f 91       	pop	r23
    2530:	6f 91       	pop	r22
    2532:	5f 91       	pop	r21
    2534:	4f 91       	pop	r20
    2536:	3f 91       	pop	r19
    2538:	2f 91       	pop	r18
    253a:	1f 91       	pop	r17
    253c:	0f 91       	pop	r16
    253e:	ff 90       	pop	r15
    2540:	ef 90       	pop	r14
    2542:	df 90       	pop	r13
    2544:	cf 90       	pop	r12
    2546:	bf 90       	pop	r11
    2548:	af 90       	pop	r10
    254a:	9f 90       	pop	r9
    254c:	8f 90       	pop	r8
    254e:	7f 90       	pop	r7
    2550:	6f 90       	pop	r6
    2552:	5f 90       	pop	r5
    2554:	4f 90       	pop	r4
    2556:	3f 90       	pop	r3
    2558:	2f 90       	pop	r2
    255a:	1f 90       	pop	r1
    255c:	0f 90       	pop	r0
    255e:	0c be       	out	0x3c, r0	; 60
    2560:	0f 90       	pop	r0
    2562:	0b be       	out	0x3b, r0	; 59
    2564:	0f 90       	pop	r0
    2566:	0f be       	out	0x3f, r0	; 63
    2568:	0f 90       	pop	r0
    256a:	08 95       	ret

0000256c <__vector_12>:

	__asm__ __volatile__ ( "ret" );
    256c:	9c df       	rcall	.-200    	; 0x24a6 <vPortYieldFromTick>
//	ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
	ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
	ISR(portSCHEDULER_ISR)
	{
		vPortYieldFromTick();
		__asm__ __volatile__ ( "reti" );
    256e:	18 95       	reti

00002570 <prvCopyDataToQueue>:
        {
            traceCREATE_COUNTING_SEMAPHORE_FAILED();
        }

        return xHandle;
    }
    2570:	0f 93       	push	r16
    2572:	1f 93       	push	r17
    2574:	cf 93       	push	r28
    2576:	df 93       	push	r29
    2578:	ec 01       	movw	r28, r24
    257a:	04 2f       	mov	r16, r20
    257c:	1a 8d       	ldd	r17, Y+26	; 0x1a
    257e:	4c 8d       	ldd	r20, Y+28	; 0x1c
    2580:	41 11       	cpse	r20, r1
    2582:	0b c0       	rjmp	.+22     	; 0x259a <prvCopyDataToQueue+0x2a>
    2584:	88 81       	ld	r24, Y
    2586:	99 81       	ldd	r25, Y+1	; 0x01
    2588:	89 2b       	or	r24, r25
    258a:	09 f0       	breq	.+2      	; 0x258e <prvCopyDataToQueue+0x1e>
    258c:	3f c0       	rjmp	.+126    	; 0x260c <prvCopyDataToQueue+0x9c>
    258e:	8c 81       	ldd	r24, Y+4	; 0x04
    2590:	9d 81       	ldd	r25, Y+5	; 0x05
    2592:	20 d4       	rcall	.+2112   	; 0x2dd4 <xTaskPriorityDisinherit>
    2594:	1d 82       	std	Y+5, r1	; 0x05
    2596:	1c 82       	std	Y+4, r1	; 0x04
    2598:	40 c0       	rjmp	.+128    	; 0x261a <prvCopyDataToQueue+0xaa>
    259a:	01 11       	cpse	r16, r1
    259c:	16 c0       	rjmp	.+44     	; 0x25ca <prvCopyDataToQueue+0x5a>
    259e:	50 e0       	ldi	r21, 0x00	; 0
    25a0:	8a 81       	ldd	r24, Y+2	; 0x02
    25a2:	9b 81       	ldd	r25, Y+3	; 0x03
    25a4:	6d d7       	rcall	.+3802   	; 0x3480 <memcpy>
    25a6:	2c 8d       	ldd	r18, Y+28	; 0x1c
    25a8:	8a 81       	ldd	r24, Y+2	; 0x02
    25aa:	9b 81       	ldd	r25, Y+3	; 0x03
    25ac:	82 0f       	add	r24, r18
    25ae:	91 1d       	adc	r25, r1
    25b0:	9b 83       	std	Y+3, r25	; 0x03
    25b2:	8a 83       	std	Y+2, r24	; 0x02
    25b4:	2c 81       	ldd	r18, Y+4	; 0x04
    25b6:	3d 81       	ldd	r19, Y+5	; 0x05
    25b8:	82 17       	cp	r24, r18
    25ba:	93 07       	cpc	r25, r19
    25bc:	48 f1       	brcs	.+82     	; 0x2610 <prvCopyDataToQueue+0xa0>
    25be:	88 81       	ld	r24, Y
    25c0:	99 81       	ldd	r25, Y+1	; 0x01
    25c2:	9b 83       	std	Y+3, r25	; 0x03
    25c4:	8a 83       	std	Y+2, r24	; 0x02
    25c6:	80 e0       	ldi	r24, 0x00	; 0
    25c8:	28 c0       	rjmp	.+80     	; 0x261a <prvCopyDataToQueue+0xaa>
    25ca:	50 e0       	ldi	r21, 0x00	; 0
    25cc:	8e 81       	ldd	r24, Y+6	; 0x06
    25ce:	9f 81       	ldd	r25, Y+7	; 0x07
    25d0:	57 d7       	rcall	.+3758   	; 0x3480 <memcpy>
    25d2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    25d4:	90 e0       	ldi	r25, 0x00	; 0
    25d6:	91 95       	neg	r25
    25d8:	81 95       	neg	r24
    25da:	91 09       	sbc	r25, r1
    25dc:	2e 81       	ldd	r18, Y+6	; 0x06
    25de:	3f 81       	ldd	r19, Y+7	; 0x07
    25e0:	28 0f       	add	r18, r24
    25e2:	39 1f       	adc	r19, r25
    25e4:	3f 83       	std	Y+7, r19	; 0x07
    25e6:	2e 83       	std	Y+6, r18	; 0x06
    25e8:	48 81       	ld	r20, Y
    25ea:	59 81       	ldd	r21, Y+1	; 0x01
    25ec:	24 17       	cp	r18, r20
    25ee:	35 07       	cpc	r19, r21
    25f0:	30 f4       	brcc	.+12     	; 0x25fe <prvCopyDataToQueue+0x8e>
    25f2:	2c 81       	ldd	r18, Y+4	; 0x04
    25f4:	3d 81       	ldd	r19, Y+5	; 0x05
    25f6:	82 0f       	add	r24, r18
    25f8:	93 1f       	adc	r25, r19
    25fa:	9f 83       	std	Y+7, r25	; 0x07
    25fc:	8e 83       	std	Y+6, r24	; 0x06
    25fe:	02 30       	cpi	r16, 0x02	; 2
    2600:	49 f4       	brne	.+18     	; 0x2614 <prvCopyDataToQueue+0xa4>
    2602:	11 23       	and	r17, r17
    2604:	49 f0       	breq	.+18     	; 0x2618 <prvCopyDataToQueue+0xa8>
    2606:	11 50       	subi	r17, 0x01	; 1
    2608:	80 e0       	ldi	r24, 0x00	; 0
    260a:	07 c0       	rjmp	.+14     	; 0x261a <prvCopyDataToQueue+0xaa>
    260c:	80 e0       	ldi	r24, 0x00	; 0
    260e:	05 c0       	rjmp	.+10     	; 0x261a <prvCopyDataToQueue+0xaa>
    2610:	80 e0       	ldi	r24, 0x00	; 0
    2612:	03 c0       	rjmp	.+6      	; 0x261a <prvCopyDataToQueue+0xaa>
    2614:	80 e0       	ldi	r24, 0x00	; 0
    2616:	01 c0       	rjmp	.+2      	; 0x261a <prvCopyDataToQueue+0xaa>
    2618:	80 e0       	ldi	r24, 0x00	; 0
    261a:	1f 5f       	subi	r17, 0xFF	; 255
    261c:	1a 8f       	std	Y+26, r17	; 0x1a
    261e:	df 91       	pop	r29
    2620:	cf 91       	pop	r28
    2622:	1f 91       	pop	r17
    2624:	0f 91       	pop	r16
    2626:	08 95       	ret

00002628 <prvUnlockQueue>:
    2628:	ef 92       	push	r14
    262a:	ff 92       	push	r15
    262c:	0f 93       	push	r16
    262e:	1f 93       	push	r17
    2630:	cf 93       	push	r28
    2632:	8c 01       	movw	r16, r24
    2634:	0f b6       	in	r0, 0x3f	; 63
    2636:	f8 94       	cli
    2638:	0f 92       	push	r0
    263a:	fc 01       	movw	r30, r24
    263c:	c6 8d       	ldd	r28, Z+30	; 0x1e
    263e:	1c 16       	cp	r1, r28
    2640:	9c f4       	brge	.+38     	; 0x2668 <prvUnlockQueue+0x40>
    2642:	81 89       	ldd	r24, Z+17	; 0x11
    2644:	81 11       	cpse	r24, r1
    2646:	06 c0       	rjmp	.+12     	; 0x2654 <prvUnlockQueue+0x2c>
    2648:	0f c0       	rjmp	.+30     	; 0x2668 <prvUnlockQueue+0x40>
    264a:	f8 01       	movw	r30, r16
    264c:	81 89       	ldd	r24, Z+17	; 0x11
    264e:	81 11       	cpse	r24, r1
    2650:	05 c0       	rjmp	.+10     	; 0x265c <prvUnlockQueue+0x34>
    2652:	0a c0       	rjmp	.+20     	; 0x2668 <prvUnlockQueue+0x40>
    2654:	78 01       	movw	r14, r16
    2656:	f1 e1       	ldi	r31, 0x11	; 17
    2658:	ef 0e       	add	r14, r31
    265a:	f1 1c       	adc	r15, r1
    265c:	c7 01       	movw	r24, r14
    265e:	3c d3       	rcall	.+1656   	; 0x2cd8 <xTaskRemoveFromEventList>
    2660:	81 11       	cpse	r24, r1
    2662:	b4 d3       	rcall	.+1896   	; 0x2dcc <vTaskMissedYield>
    2664:	c1 50       	subi	r28, 0x01	; 1
    2666:	89 f7       	brne	.-30     	; 0x264a <prvUnlockQueue+0x22>
    2668:	8f ef       	ldi	r24, 0xFF	; 255
    266a:	f8 01       	movw	r30, r16
    266c:	86 8f       	std	Z+30, r24	; 0x1e
    266e:	0f 90       	pop	r0
    2670:	0f be       	out	0x3f, r0	; 63
    2672:	0f b6       	in	r0, 0x3f	; 63
    2674:	f8 94       	cli
    2676:	0f 92       	push	r0
    2678:	c5 8d       	ldd	r28, Z+29	; 0x1d
    267a:	1c 16       	cp	r1, r28
    267c:	9c f4       	brge	.+38     	; 0x26a4 <prvUnlockQueue+0x7c>
    267e:	80 85       	ldd	r24, Z+8	; 0x08
    2680:	81 11       	cpse	r24, r1
    2682:	06 c0       	rjmp	.+12     	; 0x2690 <prvUnlockQueue+0x68>
    2684:	0f c0       	rjmp	.+30     	; 0x26a4 <prvUnlockQueue+0x7c>
    2686:	f8 01       	movw	r30, r16
    2688:	80 85       	ldd	r24, Z+8	; 0x08
    268a:	81 11       	cpse	r24, r1
    268c:	05 c0       	rjmp	.+10     	; 0x2698 <prvUnlockQueue+0x70>
    268e:	0a c0       	rjmp	.+20     	; 0x26a4 <prvUnlockQueue+0x7c>
    2690:	78 01       	movw	r14, r16
    2692:	f8 e0       	ldi	r31, 0x08	; 8
    2694:	ef 0e       	add	r14, r31
    2696:	f1 1c       	adc	r15, r1
    2698:	c7 01       	movw	r24, r14
    269a:	1e d3       	rcall	.+1596   	; 0x2cd8 <xTaskRemoveFromEventList>
    269c:	81 11       	cpse	r24, r1
    269e:	96 d3       	rcall	.+1836   	; 0x2dcc <vTaskMissedYield>
    26a0:	c1 50       	subi	r28, 0x01	; 1
    26a2:	89 f7       	brne	.-30     	; 0x2686 <prvUnlockQueue+0x5e>
    26a4:	8f ef       	ldi	r24, 0xFF	; 255
    26a6:	f8 01       	movw	r30, r16
    26a8:	85 8f       	std	Z+29, r24	; 0x1d
    26aa:	0f 90       	pop	r0
    26ac:	0f be       	out	0x3f, r0	; 63
    26ae:	cf 91       	pop	r28
    26b0:	1f 91       	pop	r17
    26b2:	0f 91       	pop	r16
    26b4:	ff 90       	pop	r15
    26b6:	ef 90       	pop	r14
    26b8:	08 95       	ret

000026ba <xQueueGenericReset>:
    26ba:	cf 93       	push	r28
    26bc:	df 93       	push	r29
    26be:	ec 01       	movw	r28, r24
    26c0:	0f b6       	in	r0, 0x3f	; 63
    26c2:	f8 94       	cli
    26c4:	0f 92       	push	r0
    26c6:	e8 81       	ld	r30, Y
    26c8:	f9 81       	ldd	r31, Y+1	; 0x01
    26ca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26cc:	2c 8d       	ldd	r18, Y+28	; 0x1c
    26ce:	90 e0       	ldi	r25, 0x00	; 0
    26d0:	30 e0       	ldi	r19, 0x00	; 0
    26d2:	82 9f       	mul	r24, r18
    26d4:	a0 01       	movw	r20, r0
    26d6:	83 9f       	mul	r24, r19
    26d8:	50 0d       	add	r21, r0
    26da:	92 9f       	mul	r25, r18
    26dc:	50 0d       	add	r21, r0
    26de:	11 24       	eor	r1, r1
    26e0:	4e 0f       	add	r20, r30
    26e2:	5f 1f       	adc	r21, r31
    26e4:	5d 83       	std	Y+5, r21	; 0x05
    26e6:	4c 83       	std	Y+4, r20	; 0x04
    26e8:	1a 8e       	std	Y+26, r1	; 0x1a
    26ea:	fb 83       	std	Y+3, r31	; 0x03
    26ec:	ea 83       	std	Y+2, r30	; 0x02
    26ee:	01 97       	sbiw	r24, 0x01	; 1
    26f0:	82 9f       	mul	r24, r18
    26f2:	a0 01       	movw	r20, r0
    26f4:	83 9f       	mul	r24, r19
    26f6:	50 0d       	add	r21, r0
    26f8:	92 9f       	mul	r25, r18
    26fa:	50 0d       	add	r21, r0
    26fc:	11 24       	eor	r1, r1
    26fe:	cf 01       	movw	r24, r30
    2700:	84 0f       	add	r24, r20
    2702:	95 1f       	adc	r25, r21
    2704:	9f 83       	std	Y+7, r25	; 0x07
    2706:	8e 83       	std	Y+6, r24	; 0x06
    2708:	8f ef       	ldi	r24, 0xFF	; 255
    270a:	8d 8f       	std	Y+29, r24	; 0x1d
    270c:	8e 8f       	std	Y+30, r24	; 0x1e
    270e:	61 11       	cpse	r22, r1
    2710:	0a c0       	rjmp	.+20     	; 0x2726 <xQueueGenericReset+0x6c>
    2712:	88 85       	ldd	r24, Y+8	; 0x08
    2714:	88 23       	and	r24, r24
    2716:	69 f0       	breq	.+26     	; 0x2732 <xQueueGenericReset+0x78>
    2718:	ce 01       	movw	r24, r28
    271a:	08 96       	adiw	r24, 0x08	; 8
    271c:	dd d2       	rcall	.+1466   	; 0x2cd8 <xTaskRemoveFromEventList>
    271e:	88 23       	and	r24, r24
    2720:	41 f0       	breq	.+16     	; 0x2732 <xQueueGenericReset+0x78>
    2722:	61 de       	rcall	.-830    	; 0x23e6 <vPortYield>
    2724:	06 c0       	rjmp	.+12     	; 0x2732 <xQueueGenericReset+0x78>
    2726:	ce 01       	movw	r24, r28
    2728:	08 96       	adiw	r24, 0x08	; 8
    272a:	d6 dd       	rcall	.-1108   	; 0x22d8 <vListInitialise>
    272c:	ce 01       	movw	r24, r28
    272e:	41 96       	adiw	r24, 0x11	; 17
    2730:	d3 dd       	rcall	.-1114   	; 0x22d8 <vListInitialise>
    2732:	0f 90       	pop	r0
    2734:	0f be       	out	0x3f, r0	; 63
    2736:	81 e0       	ldi	r24, 0x01	; 1
    2738:	df 91       	pop	r29
    273a:	cf 91       	pop	r28
    273c:	08 95       	ret

0000273e <xQueueGenericCreateStatic>:
    273e:	cf 93       	push	r28
    2740:	df 93       	push	r29
    2742:	e9 01       	movw	r28, r18
    2744:	20 97       	sbiw	r28, 0x00	; 0
    2746:	61 f0       	breq	.+24     	; 0x2760 <xQueueGenericCreateStatic+0x22>
    2748:	61 11       	cpse	r22, r1
    274a:	03 c0       	rjmp	.+6      	; 0x2752 <xQueueGenericCreateStatic+0x14>
    274c:	39 83       	std	Y+1, r19	; 0x01
    274e:	28 83       	st	Y, r18
    2750:	02 c0       	rjmp	.+4      	; 0x2756 <xQueueGenericCreateStatic+0x18>
    2752:	59 83       	std	Y+1, r21	; 0x01
    2754:	48 83       	st	Y, r20
    2756:	8b 8f       	std	Y+27, r24	; 0x1b
    2758:	6c 8f       	std	Y+28, r22	; 0x1c
    275a:	61 e0       	ldi	r22, 0x01	; 1
    275c:	ce 01       	movw	r24, r28
    275e:	ad df       	rcall	.-166    	; 0x26ba <xQueueGenericReset>
    2760:	ce 01       	movw	r24, r28
    2762:	df 91       	pop	r29
    2764:	cf 91       	pop	r28
    2766:	08 95       	ret

00002768 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
    2768:	9f 92       	push	r9
    276a:	af 92       	push	r10
    276c:	bf 92       	push	r11
    276e:	cf 92       	push	r12
    2770:	df 92       	push	r13
    2772:	ef 92       	push	r14
    2774:	ff 92       	push	r15
    2776:	0f 93       	push	r16
    2778:	1f 93       	push	r17
    277a:	cf 93       	push	r28
    277c:	df 93       	push	r29
    277e:	00 d0       	rcall	.+0      	; 0x2780 <xQueueGenericSend+0x18>
    2780:	1f 92       	push	r1
    2782:	1f 92       	push	r1
    2784:	cd b7       	in	r28, 0x3d	; 61
    2786:	de b7       	in	r29, 0x3e	; 62
    2788:	8c 01       	movw	r16, r24
    278a:	6b 01       	movw	r12, r22
    278c:	5d 83       	std	Y+5, r21	; 0x05
    278e:	4c 83       	std	Y+4, r20	; 0x04
    2790:	a2 2e       	mov	r10, r18
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
    2792:	b1 2c       	mov	r11, r1
                else if( xEntryTimeSet == pdFALSE )
                {
                    /* The queue was full and a block time was specified so
                    configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
                    xEntryTimeSet = pdTRUE;
    2794:	99 24       	eor	r9, r9
    2796:	93 94       	inc	r9
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    2798:	7c 01       	movw	r14, r24
    279a:	88 e0       	ldi	r24, 0x08	; 8
    279c:	e8 0e       	add	r14, r24
    279e:	f1 1c       	adc	r15, r1
    /*lint -save -e904 This function relaxes the coding standard somewhat to
    allow return statements within the function itself.  This is done in the
    interest of execution time efficiency. */
    for( ;; )
    {
        taskENTER_CRITICAL();
    27a0:	0f b6       	in	r0, 0x3f	; 63
    27a2:	f8 94       	cli
    27a4:	0f 92       	push	r0
        {
            /* Is there room on the queue now?  The running task must be the
            highest priority task wanting to access the queue.  If the head item
            in the queue is to be overwritten then it does not matter if the
            queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    27a6:	f8 01       	movw	r30, r16
    27a8:	92 8d       	ldd	r25, Z+26	; 0x1a
    27aa:	83 8d       	ldd	r24, Z+27	; 0x1b
    27ac:	98 17       	cp	r25, r24
    27ae:	18 f0       	brcs	.+6      	; 0x27b6 <xQueueGenericSend+0x4e>
    27b0:	f2 e0       	ldi	r31, 0x02	; 2
    27b2:	af 12       	cpse	r10, r31
    27b4:	15 c0       	rjmp	.+42     	; 0x27e0 <xQueueGenericSend+0x78>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    27b6:	4a 2d       	mov	r20, r10
    27b8:	b6 01       	movw	r22, r12
    27ba:	c8 01       	movw	r24, r16
    27bc:	d9 de       	rcall	.-590    	; 0x2570 <prvCopyDataToQueue>

                    /* If there was a task waiting for data to arrive on the
                    queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    27be:	f8 01       	movw	r30, r16
    27c0:	91 89       	ldd	r25, Z+17	; 0x11
    27c2:	99 23       	and	r25, r25
    27c4:	39 f0       	breq	.+14     	; 0x27d4 <xQueueGenericSend+0x6c>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    27c6:	c8 01       	movw	r24, r16
    27c8:	41 96       	adiw	r24, 0x11	; 17
    27ca:	86 d2       	rcall	.+1292   	; 0x2cd8 <xTaskRemoveFromEventList>
    27cc:	88 23       	and	r24, r24
                        {
                            /* The unblocked task has a priority higher than
                            our own so yield immediately.  Yes it is ok to do
                            this from within the critical section - the kernel
                            takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
    27ce:	21 f0       	breq	.+8      	; 0x27d8 <xQueueGenericSend+0x70>
    27d0:	0a de       	rcall	.-1004   	; 0x23e6 <vPortYield>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
    27d2:	02 c0       	rjmp	.+4      	; 0x27d8 <xQueueGenericSend+0x70>
                    {
                        /* This path is a special case that will only get
                        executed if the task was holding multiple mutexes and
                        the mutexes were given back in an order that is
                        different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
    27d4:	81 11       	cpse	r24, r1
    27d6:	07 de       	rcall	.-1010   	; 0x23e6 <vPortYield>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
    27d8:	0f 90       	pop	r0
    27da:	0f be       	out	0x3f, r0	; 63
                return pdPASS;
    27dc:	81 e0       	ldi	r24, 0x01	; 1
    27de:	45 c0       	rjmp	.+138    	; 0x286a <xQueueGenericSend+0x102>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
    27e0:	8c 81       	ldd	r24, Y+4	; 0x04
    27e2:	9d 81       	ldd	r25, Y+5	; 0x05
    27e4:	89 2b       	or	r24, r25
    27e6:	21 f4       	brne	.+8      	; 0x27f0 <xQueueGenericSend+0x88>
                {
                    /* The queue was full and no block time is specified (or
                    the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
    27e8:	0f 90       	pop	r0
    27ea:	0f be       	out	0x3f, r0	; 63

                    /* Return to the original privilege level before exiting
                    the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
    27ec:	80 e0       	ldi	r24, 0x00	; 0
    27ee:	3d c0       	rjmp	.+122    	; 0x286a <xQueueGenericSend+0x102>
                }
                else if( xEntryTimeSet == pdFALSE )
    27f0:	b1 10       	cpse	r11, r1
                {
                    /* The queue was full and a block time was specified so
                    configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
    27f2:	04 c0       	rjmp	.+8      	; 0x27fc <xQueueGenericSend+0x94>
    27f4:	ce 01       	movw	r24, r28
    27f6:	01 96       	adiw	r24, 0x01	; 1
                    xEntryTimeSet = pdTRUE;
    27f8:	b3 d2       	rcall	.+1382   	; 0x2d60 <vTaskInternalSetTimeOutState>
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
    27fa:	b9 2c       	mov	r11, r9
    27fc:	0f 90       	pop	r0

        /* Interrupts and other tasks can send to and receive from the queue
        now the critical section has been exited. */

        vTaskSuspendAll();
    27fe:	0f be       	out	0x3f, r0	; 63
    2800:	a5 d0       	rcall	.+330    	; 0x294c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
    2802:	0f b6       	in	r0, 0x3f	; 63
    2804:	f8 94       	cli
    2806:	0f 92       	push	r0
    2808:	f8 01       	movw	r30, r16
    280a:	85 8d       	ldd	r24, Z+29	; 0x1d
    280c:	8f 3f       	cpi	r24, 0xFF	; 255
    280e:	09 f4       	brne	.+2      	; 0x2812 <xQueueGenericSend+0xaa>
    2810:	15 8e       	std	Z+29, r1	; 0x1d
    2812:	f8 01       	movw	r30, r16
    2814:	86 8d       	ldd	r24, Z+30	; 0x1e
    2816:	8f 3f       	cpi	r24, 0xFF	; 255
    2818:	09 f4       	brne	.+2      	; 0x281c <xQueueGenericSend+0xb4>
    281a:	16 8e       	std	Z+30, r1	; 0x1e
    281c:	0f 90       	pop	r0

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    281e:	0f be       	out	0x3f, r0	; 63
    2820:	be 01       	movw	r22, r28
    2822:	6c 5f       	subi	r22, 0xFC	; 252
    2824:	7f 4f       	sbci	r23, 0xFF	; 255
    2826:	ce 01       	movw	r24, r28
    2828:	01 96       	adiw	r24, 0x01	; 1
    282a:	a5 d2       	rcall	.+1354   	; 0x2d76 <xTaskCheckForTimeOut>
    282c:	81 11       	cpse	r24, r1
    282e:	19 c0       	rjmp	.+50     	; 0x2862 <xQueueGenericSend+0xfa>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

    taskENTER_CRITICAL();
    2830:	0f b6       	in	r0, 0x3f	; 63
    2832:	f8 94       	cli
    2834:	0f 92       	push	r0
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    2836:	f8 01       	movw	r30, r16
    2838:	92 8d       	ldd	r25, Z+26	; 0x1a
    283a:	83 8d       	ldd	r24, Z+27	; 0x1b
        else
        {
            xReturn = pdFALSE;
        }
    }
    taskEXIT_CRITICAL();
    283c:	0f 90       	pop	r0
        prvLockQueue( pxQueue );

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
    283e:	0f be       	out	0x3f, r0	; 63
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    2840:	98 13       	cpse	r25, r24
    2842:	0b c0       	rjmp	.+22     	; 0x285a <xQueueGenericSend+0xf2>
    2844:	6c 81       	ldd	r22, Y+4	; 0x04
    2846:	7d 81       	ldd	r23, Y+5	; 0x05
                /* Unlocking the queue means queue events can effect the
                event list.  It is possible that interrupts occurring now
                remove this task from the event list again - but as the
                scheduler is suspended the task will go onto the pending
                ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
    2848:	c7 01       	movw	r24, r14
                /* Resuming the scheduler will move tasks from the pending
                ready list into the ready list - so it is feasible that this
                task is already in a ready list before it yields - in which
                case the yield will not cause a context switch unless there
                is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
    284a:	36 d2       	rcall	.+1132   	; 0x2cb8 <vTaskPlaceOnEventList>
    284c:	c8 01       	movw	r24, r16
                {
                    portYIELD_WITHIN_API();
    284e:	ec de       	rcall	.-552    	; 0x2628 <prvUnlockQueue>
    2850:	3a d1       	rcall	.+628    	; 0x2ac6 <xTaskResumeAll>
    2852:	81 11       	cpse	r24, r1
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
    2854:	a5 cf       	rjmp	.-182    	; 0x27a0 <xQueueGenericSend+0x38>
    2856:	c7 dd       	rcall	.-1138   	; 0x23e6 <vPortYield>
    2858:	a3 cf       	rjmp	.-186    	; 0x27a0 <xQueueGenericSend+0x38>
                ( void ) xTaskResumeAll();
    285a:	c8 01       	movw	r24, r16
    285c:	e5 de       	rcall	.-566    	; 0x2628 <prvUnlockQueue>
    285e:	33 d1       	rcall	.+614    	; 0x2ac6 <xTaskResumeAll>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
    2860:	9f cf       	rjmp	.-194    	; 0x27a0 <xQueueGenericSend+0x38>
    2862:	c8 01       	movw	r24, r16
    2864:	e1 de       	rcall	.-574    	; 0x2628 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
    2866:	2f d1       	rcall	.+606    	; 0x2ac6 <xTaskResumeAll>
    2868:	80 e0       	ldi	r24, 0x00	; 0

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
    286a:	0f 90       	pop	r0
        }
    } /*lint -restore */
}
    286c:	0f 90       	pop	r0
    286e:	0f 90       	pop	r0
    2870:	0f 90       	pop	r0
    2872:	0f 90       	pop	r0
    2874:	df 91       	pop	r29
    2876:	cf 91       	pop	r28
    2878:	1f 91       	pop	r17
    287a:	0f 91       	pop	r16
    287c:	ff 90       	pop	r15
    287e:	ef 90       	pop	r14
    2880:	df 90       	pop	r13
    2882:	cf 90       	pop	r12
    2884:	bf 90       	pop	r11
    2886:	af 90       	pop	r10
    2888:	9f 90       	pop	r9
    288a:	08 95       	ret

0000288c <prvResetNextTaskUnblockTime>:
    288c:	e0 91 b8 0b 	lds	r30, 0x0BB8	; 0x800bb8 <pxDelayedTaskList>
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    2890:	f0 91 b9 0b 	lds	r31, 0x0BB9	; 0x800bb9 <pxDelayedTaskList+0x1>
    2894:	80 81       	ld	r24, Z
    2896:	81 11       	cpse	r24, r1
    2898:	07 c0       	rjmp	.+14     	; 0x28a8 <prvResetNextTaskUnblockTime+0x1c>
    289a:	8f ef       	ldi	r24, 0xFF	; 255
    289c:	9f ef       	ldi	r25, 0xFF	; 255
    289e:	90 93 a5 0b 	sts	0x0BA5, r25	; 0x800ba5 <xNextTaskUnblockTime+0x1>
    28a2:	80 93 a4 0b 	sts	0x0BA4, r24	; 0x800ba4 <xNextTaskUnblockTime>
    28a6:	08 95       	ret
    28a8:	e0 91 b8 0b 	lds	r30, 0x0BB8	; 0x800bb8 <pxDelayedTaskList>
    28ac:	f0 91 b9 0b 	lds	r31, 0x0BB9	; 0x800bb9 <pxDelayedTaskList+0x1>
    28b0:	05 80       	ldd	r0, Z+5	; 0x05
    28b2:	f6 81       	ldd	r31, Z+6	; 0x06
    28b4:	e0 2d       	mov	r30, r0
    28b6:	06 80       	ldd	r0, Z+6	; 0x06
    28b8:	f7 81       	ldd	r31, Z+7	; 0x07
    28ba:	e0 2d       	mov	r30, r0
    28bc:	82 81       	ldd	r24, Z+2	; 0x02
    28be:	93 81       	ldd	r25, Z+3	; 0x03
    28c0:	90 93 a5 0b 	sts	0x0BA5, r25	; 0x800ba5 <xNextTaskUnblockTime+0x1>
    28c4:	80 93 a4 0b 	sts	0x0BA4, r24	; 0x800ba4 <xNextTaskUnblockTime>
    28c8:	08 95       	ret

000028ca <prvAddCurrentTaskToDelayedList>:
    28ca:	0f 93       	push	r16
    28cc:	1f 93       	push	r17
    28ce:	cf 93       	push	r28
    28d0:	df 93       	push	r29
    28d2:	ec 01       	movw	r28, r24
    28d4:	00 91 aa 0b 	lds	r16, 0x0BAA	; 0x800baa <xTickCount>
    28d8:	10 91 ab 0b 	lds	r17, 0x0BAB	; 0x800bab <xTickCount+0x1>
    28dc:	80 91 de 0b 	lds	r24, 0x0BDE	; 0x800bde <pxCurrentTCB>
    28e0:	90 91 df 0b 	lds	r25, 0x0BDF	; 0x800bdf <pxCurrentTCB+0x1>
    28e4:	02 96       	adiw	r24, 0x02	; 2
    28e6:	58 dd       	rcall	.-1360   	; 0x2398 <uxListRemove>
    28e8:	c0 0f       	add	r28, r16
    28ea:	d1 1f       	adc	r29, r17
    28ec:	e0 91 de 0b 	lds	r30, 0x0BDE	; 0x800bde <pxCurrentTCB>
    28f0:	f0 91 df 0b 	lds	r31, 0x0BDF	; 0x800bdf <pxCurrentTCB+0x1>
    28f4:	d3 83       	std	Z+3, r29	; 0x03
    28f6:	c2 83       	std	Z+2, r28	; 0x02
    28f8:	c0 17       	cp	r28, r16
    28fa:	d1 07       	cpc	r29, r17
    28fc:	60 f4       	brcc	.+24     	; 0x2916 <prvAddCurrentTaskToDelayedList+0x4c>
    28fe:	60 91 de 0b 	lds	r22, 0x0BDE	; 0x800bde <pxCurrentTCB>
    2902:	70 91 df 0b 	lds	r23, 0x0BDF	; 0x800bdf <pxCurrentTCB+0x1>
    2906:	80 91 b6 0b 	lds	r24, 0x0BB6	; 0x800bb6 <pxOverflowDelayedTaskList>
    290a:	90 91 b7 0b 	lds	r25, 0x0BB7	; 0x800bb7 <pxOverflowDelayedTaskList+0x1>
    290e:	6e 5f       	subi	r22, 0xFE	; 254
    2910:	7f 4f       	sbci	r23, 0xFF	; 255
    2912:	11 dd       	rcall	.-1502   	; 0x2336 <vListInsert>
    2914:	16 c0       	rjmp	.+44     	; 0x2942 <prvAddCurrentTaskToDelayedList+0x78>
    2916:	60 91 de 0b 	lds	r22, 0x0BDE	; 0x800bde <pxCurrentTCB>
    291a:	70 91 df 0b 	lds	r23, 0x0BDF	; 0x800bdf <pxCurrentTCB+0x1>
    291e:	80 91 b8 0b 	lds	r24, 0x0BB8	; 0x800bb8 <pxDelayedTaskList>
    2922:	90 91 b9 0b 	lds	r25, 0x0BB9	; 0x800bb9 <pxDelayedTaskList+0x1>
    2926:	6e 5f       	subi	r22, 0xFE	; 254
    2928:	7f 4f       	sbci	r23, 0xFF	; 255
    292a:	05 dd       	rcall	.-1526   	; 0x2336 <vListInsert>
    292c:	80 91 a4 0b 	lds	r24, 0x0BA4	; 0x800ba4 <xNextTaskUnblockTime>
    2930:	90 91 a5 0b 	lds	r25, 0x0BA5	; 0x800ba5 <xNextTaskUnblockTime+0x1>
    2934:	c8 17       	cp	r28, r24
    2936:	d9 07       	cpc	r29, r25
    2938:	20 f4       	brcc	.+8      	; 0x2942 <prvAddCurrentTaskToDelayedList+0x78>
    293a:	d0 93 a5 0b 	sts	0x0BA5, r29	; 0x800ba5 <xNextTaskUnblockTime+0x1>
    293e:	c0 93 a4 0b 	sts	0x0BA4, r28	; 0x800ba4 <xNextTaskUnblockTime>
    2942:	df 91       	pop	r29
    2944:	cf 91       	pop	r28
    2946:	1f 91       	pop	r17
    2948:	0f 91       	pop	r16
    294a:	08 95       	ret

0000294c <vTaskSuspendAll>:
    294c:	80 91 a3 0b 	lds	r24, 0x0BA3	; 0x800ba3 <uxSchedulerSuspended>
    2950:	8f 5f       	subi	r24, 0xFF	; 255
    2952:	80 93 a3 0b 	sts	0x0BA3, r24	; 0x800ba3 <uxSchedulerSuspended>
    2956:	08 95       	ret

00002958 <xTaskIncrementTick>:
    2958:	cf 92       	push	r12
    295a:	df 92       	push	r13
    295c:	ef 92       	push	r14
    295e:	ff 92       	push	r15
    2960:	0f 93       	push	r16
    2962:	1f 93       	push	r17
    2964:	cf 93       	push	r28
    2966:	df 93       	push	r29
    2968:	80 91 a3 0b 	lds	r24, 0x0BA3	; 0x800ba3 <uxSchedulerSuspended>
    296c:	81 11       	cpse	r24, r1
    296e:	95 c0       	rjmp	.+298    	; 0x2a9a <xTaskIncrementTick+0x142>
    2970:	e0 90 aa 0b 	lds	r14, 0x0BAA	; 0x800baa <xTickCount>
    2974:	f0 90 ab 0b 	lds	r15, 0x0BAB	; 0x800bab <xTickCount+0x1>
    2978:	8f ef       	ldi	r24, 0xFF	; 255
    297a:	e8 1a       	sub	r14, r24
    297c:	f8 0a       	sbc	r15, r24
    297e:	f0 92 ab 0b 	sts	0x0BAB, r15	; 0x800bab <xTickCount+0x1>
    2982:	e0 92 aa 0b 	sts	0x0BAA, r14	; 0x800baa <xTickCount>
    2986:	e1 14       	cp	r14, r1
    2988:	f1 04       	cpc	r15, r1
    298a:	b1 f4       	brne	.+44     	; 0x29b8 <xTaskIncrementTick+0x60>
    298c:	80 91 b8 0b 	lds	r24, 0x0BB8	; 0x800bb8 <pxDelayedTaskList>
    2990:	90 91 b9 0b 	lds	r25, 0x0BB9	; 0x800bb9 <pxDelayedTaskList+0x1>
    2994:	20 91 b6 0b 	lds	r18, 0x0BB6	; 0x800bb6 <pxOverflowDelayedTaskList>
    2998:	30 91 b7 0b 	lds	r19, 0x0BB7	; 0x800bb7 <pxOverflowDelayedTaskList+0x1>
    299c:	30 93 b9 0b 	sts	0x0BB9, r19	; 0x800bb9 <pxDelayedTaskList+0x1>
    29a0:	20 93 b8 0b 	sts	0x0BB8, r18	; 0x800bb8 <pxDelayedTaskList>
    29a4:	90 93 b7 0b 	sts	0x0BB7, r25	; 0x800bb7 <pxOverflowDelayedTaskList+0x1>
    29a8:	80 93 b6 0b 	sts	0x0BB6, r24	; 0x800bb6 <pxOverflowDelayedTaskList>
    29ac:	80 91 a6 0b 	lds	r24, 0x0BA6	; 0x800ba6 <xNumOfOverflows>
    29b0:	8f 5f       	subi	r24, 0xFF	; 255
    29b2:	80 93 a6 0b 	sts	0x0BA6, r24	; 0x800ba6 <xNumOfOverflows>
    29b6:	6a df       	rcall	.-300    	; 0x288c <prvResetNextTaskUnblockTime>
    29b8:	80 91 a4 0b 	lds	r24, 0x0BA4	; 0x800ba4 <xNextTaskUnblockTime>
    29bc:	90 91 a5 0b 	lds	r25, 0x0BA5	; 0x800ba5 <xNextTaskUnblockTime+0x1>
    29c0:	e8 16       	cp	r14, r24
    29c2:	f9 06       	cpc	r15, r25
    29c4:	10 f4       	brcc	.+4      	; 0x29ca <xTaskIncrementTick+0x72>
    29c6:	d1 2c       	mov	r13, r1
    29c8:	50 c0       	rjmp	.+160    	; 0x2a6a <xTaskIncrementTick+0x112>
    29ca:	d1 2c       	mov	r13, r1
    29cc:	cc 24       	eor	r12, r12
    29ce:	c3 94       	inc	r12
    29d0:	e0 91 b8 0b 	lds	r30, 0x0BB8	; 0x800bb8 <pxDelayedTaskList>
    29d4:	f0 91 b9 0b 	lds	r31, 0x0BB9	; 0x800bb9 <pxDelayedTaskList+0x1>
    29d8:	80 81       	ld	r24, Z
    29da:	81 11       	cpse	r24, r1
    29dc:	07 c0       	rjmp	.+14     	; 0x29ec <xTaskIncrementTick+0x94>
    29de:	8f ef       	ldi	r24, 0xFF	; 255
    29e0:	9f ef       	ldi	r25, 0xFF	; 255
    29e2:	90 93 a5 0b 	sts	0x0BA5, r25	; 0x800ba5 <xNextTaskUnblockTime+0x1>
    29e6:	80 93 a4 0b 	sts	0x0BA4, r24	; 0x800ba4 <xNextTaskUnblockTime>
    29ea:	3f c0       	rjmp	.+126    	; 0x2a6a <xTaskIncrementTick+0x112>
    29ec:	e0 91 b8 0b 	lds	r30, 0x0BB8	; 0x800bb8 <pxDelayedTaskList>
    29f0:	f0 91 b9 0b 	lds	r31, 0x0BB9	; 0x800bb9 <pxDelayedTaskList+0x1>
    29f4:	05 80       	ldd	r0, Z+5	; 0x05
    29f6:	f6 81       	ldd	r31, Z+6	; 0x06
    29f8:	e0 2d       	mov	r30, r0
    29fa:	c6 81       	ldd	r28, Z+6	; 0x06
    29fc:	d7 81       	ldd	r29, Z+7	; 0x07
    29fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2a00:	9b 81       	ldd	r25, Y+3	; 0x03
    2a02:	e8 16       	cp	r14, r24
    2a04:	f9 06       	cpc	r15, r25
    2a06:	28 f4       	brcc	.+10     	; 0x2a12 <xTaskIncrementTick+0xba>
    2a08:	90 93 a5 0b 	sts	0x0BA5, r25	; 0x800ba5 <xNextTaskUnblockTime+0x1>
    2a0c:	80 93 a4 0b 	sts	0x0BA4, r24	; 0x800ba4 <xNextTaskUnblockTime>
    2a10:	2c c0       	rjmp	.+88     	; 0x2a6a <xTaskIncrementTick+0x112>
    2a12:	8e 01       	movw	r16, r28
    2a14:	0e 5f       	subi	r16, 0xFE	; 254
    2a16:	1f 4f       	sbci	r17, 0xFF	; 255
    2a18:	c8 01       	movw	r24, r16
    2a1a:	be dc       	rcall	.-1668   	; 0x2398 <uxListRemove>
    2a1c:	8c 89       	ldd	r24, Y+20	; 0x14
    2a1e:	9d 89       	ldd	r25, Y+21	; 0x15
    2a20:	89 2b       	or	r24, r25
    2a22:	19 f0       	breq	.+6      	; 0x2a2a <xTaskIncrementTick+0xd2>
    2a24:	ce 01       	movw	r24, r28
    2a26:	0c 96       	adiw	r24, 0x0c	; 12
    2a28:	b7 dc       	rcall	.-1682   	; 0x2398 <uxListRemove>
    2a2a:	8e 89       	ldd	r24, Y+22	; 0x16
    2a2c:	90 91 a9 0b 	lds	r25, 0x0BA9	; 0x800ba9 <uxTopReadyPriority>
    2a30:	98 17       	cp	r25, r24
    2a32:	10 f4       	brcc	.+4      	; 0x2a38 <xTaskIncrementTick+0xe0>
    2a34:	80 93 a9 0b 	sts	0x0BA9, r24	; 0x800ba9 <uxTopReadyPriority>
    2a38:	90 e0       	ldi	r25, 0x00	; 0
    2a3a:	9c 01       	movw	r18, r24
    2a3c:	22 0f       	add	r18, r18
    2a3e:	33 1f       	adc	r19, r19
    2a40:	22 0f       	add	r18, r18
    2a42:	33 1f       	adc	r19, r19
    2a44:	22 0f       	add	r18, r18
    2a46:	33 1f       	adc	r19, r19
    2a48:	82 0f       	add	r24, r18
    2a4a:	93 1f       	adc	r25, r19
    2a4c:	b8 01       	movw	r22, r16
    2a4e:	86 54       	subi	r24, 0x46	; 70
    2a50:	94 4f       	sbci	r25, 0xF4	; 244
    2a52:	50 dc       	rcall	.-1888   	; 0x22f4 <vListInsertEnd>
    2a54:	e0 91 de 0b 	lds	r30, 0x0BDE	; 0x800bde <pxCurrentTCB>
    2a58:	f0 91 df 0b 	lds	r31, 0x0BDF	; 0x800bdf <pxCurrentTCB+0x1>
    2a5c:	9e 89       	ldd	r25, Y+22	; 0x16
    2a5e:	86 89       	ldd	r24, Z+22	; 0x16
    2a60:	98 17       	cp	r25, r24
    2a62:	08 f4       	brcc	.+2      	; 0x2a66 <xTaskIncrementTick+0x10e>
    2a64:	b5 cf       	rjmp	.-150    	; 0x29d0 <xTaskIncrementTick+0x78>
    2a66:	dc 2c       	mov	r13, r12
    2a68:	b3 cf       	rjmp	.-154    	; 0x29d0 <xTaskIncrementTick+0x78>
    2a6a:	e0 91 de 0b 	lds	r30, 0x0BDE	; 0x800bde <pxCurrentTCB>
    2a6e:	f0 91 df 0b 	lds	r31, 0x0BDF	; 0x800bdf <pxCurrentTCB+0x1>
    2a72:	86 89       	ldd	r24, Z+22	; 0x16
    2a74:	90 e0       	ldi	r25, 0x00	; 0
    2a76:	fc 01       	movw	r30, r24
    2a78:	ee 0f       	add	r30, r30
    2a7a:	ff 1f       	adc	r31, r31
    2a7c:	ee 0f       	add	r30, r30
    2a7e:	ff 1f       	adc	r31, r31
    2a80:	ee 0f       	add	r30, r30
    2a82:	ff 1f       	adc	r31, r31
    2a84:	8e 0f       	add	r24, r30
    2a86:	9f 1f       	adc	r25, r31
    2a88:	fc 01       	movw	r30, r24
    2a8a:	e6 54       	subi	r30, 0x46	; 70
    2a8c:	f4 4f       	sbci	r31, 0xF4	; 244
    2a8e:	80 81       	ld	r24, Z
    2a90:	82 30       	cpi	r24, 0x02	; 2
    2a92:	48 f0       	brcs	.+18     	; 0x2aa6 <xTaskIncrementTick+0x14e>
    2a94:	dd 24       	eor	r13, r13
    2a96:	d3 94       	inc	r13
    2a98:	06 c0       	rjmp	.+12     	; 0x2aa6 <xTaskIncrementTick+0x14e>
    2a9a:	80 91 a8 0b 	lds	r24, 0x0BA8	; 0x800ba8 <uxPendedTicks>
    2a9e:	8f 5f       	subi	r24, 0xFF	; 255
    2aa0:	80 93 a8 0b 	sts	0x0BA8, r24	; 0x800ba8 <uxPendedTicks>
    2aa4:	d1 2c       	mov	r13, r1
    2aa6:	80 91 a7 0b 	lds	r24, 0x0BA7	; 0x800ba7 <xYieldPending>
    2aaa:	88 23       	and	r24, r24
    2aac:	11 f0       	breq	.+4      	; 0x2ab2 <xTaskIncrementTick+0x15a>
    2aae:	dd 24       	eor	r13, r13
    2ab0:	d3 94       	inc	r13
    2ab2:	8d 2d       	mov	r24, r13
    2ab4:	df 91       	pop	r29
    2ab6:	cf 91       	pop	r28
    2ab8:	1f 91       	pop	r17
    2aba:	0f 91       	pop	r16
    2abc:	ff 90       	pop	r15
    2abe:	ef 90       	pop	r14
    2ac0:	df 90       	pop	r13
    2ac2:	cf 90       	pop	r12
    2ac4:	08 95       	ret

00002ac6 <xTaskResumeAll>:
    2ac6:	df 92       	push	r13
    2ac8:	ef 92       	push	r14
    2aca:	ff 92       	push	r15
    2acc:	0f 93       	push	r16
    2ace:	1f 93       	push	r17
    2ad0:	cf 93       	push	r28
    2ad2:	df 93       	push	r29
    2ad4:	0f b6       	in	r0, 0x3f	; 63
    2ad6:	f8 94       	cli
    2ad8:	0f 92       	push	r0
    2ada:	80 91 a3 0b 	lds	r24, 0x0BA3	; 0x800ba3 <uxSchedulerSuspended>
    2ade:	81 50       	subi	r24, 0x01	; 1
    2ae0:	80 93 a3 0b 	sts	0x0BA3, r24	; 0x800ba3 <uxSchedulerSuspended>
    2ae4:	80 91 a3 0b 	lds	r24, 0x0BA3	; 0x800ba3 <uxSchedulerSuspended>
    2ae8:	81 11       	cpse	r24, r1
    2aea:	59 c0       	rjmp	.+178    	; 0x2b9e <xTaskResumeAll+0xd8>
    2aec:	80 91 ac 0b 	lds	r24, 0x0BAC	; 0x800bac <uxCurrentNumberOfTasks>
    2af0:	81 11       	cpse	r24, r1
    2af2:	30 c0       	rjmp	.+96     	; 0x2b54 <xTaskResumeAll+0x8e>
    2af4:	57 c0       	rjmp	.+174    	; 0x2ba4 <xTaskResumeAll+0xde>
    2af6:	d7 01       	movw	r26, r14
    2af8:	15 96       	adiw	r26, 0x05	; 5
    2afa:	ed 91       	ld	r30, X+
    2afc:	fc 91       	ld	r31, X
    2afe:	16 97       	sbiw	r26, 0x06	; 6
    2b00:	c6 81       	ldd	r28, Z+6	; 0x06
    2b02:	d7 81       	ldd	r29, Z+7	; 0x07
    2b04:	ce 01       	movw	r24, r28
    2b06:	0c 96       	adiw	r24, 0x0c	; 12
    2b08:	47 dc       	rcall	.-1906   	; 0x2398 <uxListRemove>
    2b0a:	8e 01       	movw	r16, r28
    2b0c:	0e 5f       	subi	r16, 0xFE	; 254
    2b0e:	1f 4f       	sbci	r17, 0xFF	; 255
    2b10:	c8 01       	movw	r24, r16
    2b12:	42 dc       	rcall	.-1916   	; 0x2398 <uxListRemove>
    2b14:	8e 89       	ldd	r24, Y+22	; 0x16
    2b16:	90 91 a9 0b 	lds	r25, 0x0BA9	; 0x800ba9 <uxTopReadyPriority>
    2b1a:	98 17       	cp	r25, r24
    2b1c:	10 f4       	brcc	.+4      	; 0x2b22 <xTaskResumeAll+0x5c>
    2b1e:	80 93 a9 0b 	sts	0x0BA9, r24	; 0x800ba9 <uxTopReadyPriority>
    2b22:	90 e0       	ldi	r25, 0x00	; 0
    2b24:	9c 01       	movw	r18, r24
    2b26:	22 0f       	add	r18, r18
    2b28:	33 1f       	adc	r19, r19
    2b2a:	22 0f       	add	r18, r18
    2b2c:	33 1f       	adc	r19, r19
    2b2e:	22 0f       	add	r18, r18
    2b30:	33 1f       	adc	r19, r19
    2b32:	82 0f       	add	r24, r18
    2b34:	93 1f       	adc	r25, r19
    2b36:	b8 01       	movw	r22, r16
    2b38:	86 54       	subi	r24, 0x46	; 70
    2b3a:	94 4f       	sbci	r25, 0xF4	; 244
    2b3c:	db db       	rcall	.-2122   	; 0x22f4 <vListInsertEnd>
    2b3e:	e0 91 de 0b 	lds	r30, 0x0BDE	; 0x800bde <pxCurrentTCB>
    2b42:	f0 91 df 0b 	lds	r31, 0x0BDF	; 0x800bdf <pxCurrentTCB+0x1>
    2b46:	9e 89       	ldd	r25, Y+22	; 0x16
    2b48:	86 89       	ldd	r24, Z+22	; 0x16
    2b4a:	98 17       	cp	r25, r24
    2b4c:	68 f0       	brcs	.+26     	; 0x2b68 <xTaskResumeAll+0xa2>
    2b4e:	d0 92 a7 0b 	sts	0x0BA7, r13	; 0x800ba7 <xYieldPending>
    2b52:	0a c0       	rjmp	.+20     	; 0x2b68 <xTaskResumeAll+0xa2>
    2b54:	c0 e0       	ldi	r28, 0x00	; 0
    2b56:	d0 e0       	ldi	r29, 0x00	; 0
    2b58:	0f 2e       	mov	r0, r31
    2b5a:	fd ea       	ldi	r31, 0xAD	; 173
    2b5c:	ef 2e       	mov	r14, r31
    2b5e:	fb e0       	ldi	r31, 0x0B	; 11
    2b60:	ff 2e       	mov	r15, r31
    2b62:	f0 2d       	mov	r31, r0
    2b64:	dd 24       	eor	r13, r13
    2b66:	d3 94       	inc	r13
    2b68:	f7 01       	movw	r30, r14
    2b6a:	80 81       	ld	r24, Z
    2b6c:	81 11       	cpse	r24, r1
    2b6e:	c3 cf       	rjmp	.-122    	; 0x2af6 <xTaskResumeAll+0x30>
    2b70:	cd 2b       	or	r28, r29
    2b72:	09 f0       	breq	.+2      	; 0x2b76 <xTaskResumeAll+0xb0>
    2b74:	8b de       	rcall	.-746    	; 0x288c <prvResetNextTaskUnblockTime>
    2b76:	c0 91 a8 0b 	lds	r28, 0x0BA8	; 0x800ba8 <uxPendedTicks>
    2b7a:	cc 23       	and	r28, r28
    2b7c:	49 f0       	breq	.+18     	; 0x2b90 <xTaskResumeAll+0xca>
    2b7e:	d1 e0       	ldi	r29, 0x01	; 1
    2b80:	eb de       	rcall	.-554    	; 0x2958 <xTaskIncrementTick>
    2b82:	81 11       	cpse	r24, r1
    2b84:	d0 93 a7 0b 	sts	0x0BA7, r29	; 0x800ba7 <xYieldPending>
    2b88:	c1 50       	subi	r28, 0x01	; 1
    2b8a:	d1 f7       	brne	.-12     	; 0x2b80 <xTaskResumeAll+0xba>
    2b8c:	10 92 a8 0b 	sts	0x0BA8, r1	; 0x800ba8 <uxPendedTicks>
    2b90:	80 91 a7 0b 	lds	r24, 0x0BA7	; 0x800ba7 <xYieldPending>
    2b94:	88 23       	and	r24, r24
    2b96:	29 f0       	breq	.+10     	; 0x2ba2 <xTaskResumeAll+0xdc>
    2b98:	26 dc       	rcall	.-1972   	; 0x23e6 <vPortYield>
    2b9a:	81 e0       	ldi	r24, 0x01	; 1
    2b9c:	03 c0       	rjmp	.+6      	; 0x2ba4 <xTaskResumeAll+0xde>
    2b9e:	80 e0       	ldi	r24, 0x00	; 0
    2ba0:	01 c0       	rjmp	.+2      	; 0x2ba4 <xTaskResumeAll+0xde>
    2ba2:	80 e0       	ldi	r24, 0x00	; 0
    2ba4:	0f 90       	pop	r0
    2ba6:	0f be       	out	0x3f, r0	; 63
    2ba8:	df 91       	pop	r29
    2baa:	cf 91       	pop	r28
    2bac:	1f 91       	pop	r17
    2bae:	0f 91       	pop	r16
    2bb0:	ff 90       	pop	r15
    2bb2:	ef 90       	pop	r14
    2bb4:	df 90       	pop	r13
    2bb6:	08 95       	ret

00002bb8 <vTaskSwitchContext>:
    2bb8:	80 91 a3 0b 	lds	r24, 0x0BA3	; 0x800ba3 <uxSchedulerSuspended>
    2bbc:	88 23       	and	r24, r24
    2bbe:	21 f0       	breq	.+8      	; 0x2bc8 <vTaskSwitchContext+0x10>
    2bc0:	81 e0       	ldi	r24, 0x01	; 1
    2bc2:	80 93 a7 0b 	sts	0x0BA7, r24	; 0x800ba7 <xYieldPending>
    2bc6:	08 95       	ret
    2bc8:	10 92 a7 0b 	sts	0x0BA7, r1	; 0x800ba7 <xYieldPending>
    2bcc:	a0 91 de 0b 	lds	r26, 0x0BDE	; 0x800bde <pxCurrentTCB>
    2bd0:	b0 91 df 0b 	lds	r27, 0x0BDF	; 0x800bdf <pxCurrentTCB+0x1>
    2bd4:	e0 91 de 0b 	lds	r30, 0x0BDE	; 0x800bde <pxCurrentTCB>
    2bd8:	f0 91 df 0b 	lds	r31, 0x0BDF	; 0x800bdf <pxCurrentTCB+0x1>
    2bdc:	2d 91       	ld	r18, X+
    2bde:	3c 91       	ld	r19, X
    2be0:	87 89       	ldd	r24, Z+23	; 0x17
    2be2:	90 8d       	ldd	r25, Z+24	; 0x18
    2be4:	82 17       	cp	r24, r18
    2be6:	93 07       	cpc	r25, r19
    2be8:	58 f0       	brcs	.+22     	; 0x2c00 <vTaskSwitchContext+0x48>
    2bea:	60 91 de 0b 	lds	r22, 0x0BDE	; 0x800bde <pxCurrentTCB>
    2bee:	70 91 df 0b 	lds	r23, 0x0BDF	; 0x800bdf <pxCurrentTCB+0x1>
    2bf2:	80 91 de 0b 	lds	r24, 0x0BDE	; 0x800bde <pxCurrentTCB>
    2bf6:	90 91 df 0b 	lds	r25, 0x0BDF	; 0x800bdf <pxCurrentTCB+0x1>
    2bfa:	67 5e       	subi	r22, 0xE7	; 231
    2bfc:	7f 4f       	sbci	r23, 0xFF	; 255
    2bfe:	5f db       	rcall	.-2370   	; 0x22be <vApplicationStackOverflowHook>
    2c00:	20 91 a9 0b 	lds	r18, 0x0BA9	; 0x800ba9 <uxTopReadyPriority>
    2c04:	82 2f       	mov	r24, r18
    2c06:	90 e0       	ldi	r25, 0x00	; 0
    2c08:	fc 01       	movw	r30, r24
    2c0a:	ee 0f       	add	r30, r30
    2c0c:	ff 1f       	adc	r31, r31
    2c0e:	ee 0f       	add	r30, r30
    2c10:	ff 1f       	adc	r31, r31
    2c12:	ee 0f       	add	r30, r30
    2c14:	ff 1f       	adc	r31, r31
    2c16:	e8 0f       	add	r30, r24
    2c18:	f9 1f       	adc	r31, r25
    2c1a:	e6 54       	subi	r30, 0x46	; 70
    2c1c:	f4 4f       	sbci	r31, 0xF4	; 244
    2c1e:	30 81       	ld	r19, Z
    2c20:	31 11       	cpse	r19, r1
    2c22:	11 c0       	rjmp	.+34     	; 0x2c46 <vTaskSwitchContext+0x8e>
    2c24:	21 50       	subi	r18, 0x01	; 1
    2c26:	82 2f       	mov	r24, r18
    2c28:	90 e0       	ldi	r25, 0x00	; 0
    2c2a:	fc 01       	movw	r30, r24
    2c2c:	ee 0f       	add	r30, r30
    2c2e:	ff 1f       	adc	r31, r31
    2c30:	ee 0f       	add	r30, r30
    2c32:	ff 1f       	adc	r31, r31
    2c34:	ee 0f       	add	r30, r30
    2c36:	ff 1f       	adc	r31, r31
    2c38:	e8 0f       	add	r30, r24
    2c3a:	f9 1f       	adc	r31, r25
    2c3c:	e6 54       	subi	r30, 0x46	; 70
    2c3e:	f4 4f       	sbci	r31, 0xF4	; 244
    2c40:	30 81       	ld	r19, Z
    2c42:	33 23       	and	r19, r19
    2c44:	79 f3       	breq	.-34     	; 0x2c24 <vTaskSwitchContext+0x6c>
    2c46:	ac 01       	movw	r20, r24
    2c48:	44 0f       	add	r20, r20
    2c4a:	55 1f       	adc	r21, r21
    2c4c:	44 0f       	add	r20, r20
    2c4e:	55 1f       	adc	r21, r21
    2c50:	44 0f       	add	r20, r20
    2c52:	55 1f       	adc	r21, r21
    2c54:	48 0f       	add	r20, r24
    2c56:	59 1f       	adc	r21, r25
    2c58:	da 01       	movw	r26, r20
    2c5a:	a6 54       	subi	r26, 0x46	; 70
    2c5c:	b4 4f       	sbci	r27, 0xF4	; 244
    2c5e:	11 96       	adiw	r26, 0x01	; 1
    2c60:	ed 91       	ld	r30, X+
    2c62:	fc 91       	ld	r31, X
    2c64:	12 97       	sbiw	r26, 0x02	; 2
    2c66:	02 80       	ldd	r0, Z+2	; 0x02
    2c68:	f3 81       	ldd	r31, Z+3	; 0x03
    2c6a:	e0 2d       	mov	r30, r0
    2c6c:	12 96       	adiw	r26, 0x02	; 2
    2c6e:	fc 93       	st	X, r31
    2c70:	ee 93       	st	-X, r30
    2c72:	11 97       	sbiw	r26, 0x01	; 1
    2c74:	43 54       	subi	r20, 0x43	; 67
    2c76:	54 4f       	sbci	r21, 0xF4	; 244
    2c78:	e4 17       	cp	r30, r20
    2c7a:	f5 07       	cpc	r31, r21
    2c7c:	29 f4       	brne	.+10     	; 0x2c88 <vTaskSwitchContext+0xd0>
    2c7e:	42 81       	ldd	r20, Z+2	; 0x02
    2c80:	53 81       	ldd	r21, Z+3	; 0x03
    2c82:	fd 01       	movw	r30, r26
    2c84:	52 83       	std	Z+2, r21	; 0x02
    2c86:	41 83       	std	Z+1, r20	; 0x01
    2c88:	fc 01       	movw	r30, r24
    2c8a:	ee 0f       	add	r30, r30
    2c8c:	ff 1f       	adc	r31, r31
    2c8e:	ee 0f       	add	r30, r30
    2c90:	ff 1f       	adc	r31, r31
    2c92:	ee 0f       	add	r30, r30
    2c94:	ff 1f       	adc	r31, r31
    2c96:	8e 0f       	add	r24, r30
    2c98:	9f 1f       	adc	r25, r31
    2c9a:	fc 01       	movw	r30, r24
    2c9c:	e6 54       	subi	r30, 0x46	; 70
    2c9e:	f4 4f       	sbci	r31, 0xF4	; 244
    2ca0:	01 80       	ldd	r0, Z+1	; 0x01
    2ca2:	f2 81       	ldd	r31, Z+2	; 0x02
    2ca4:	e0 2d       	mov	r30, r0
    2ca6:	86 81       	ldd	r24, Z+6	; 0x06
    2ca8:	97 81       	ldd	r25, Z+7	; 0x07
    2caa:	90 93 df 0b 	sts	0x0BDF, r25	; 0x800bdf <pxCurrentTCB+0x1>
    2cae:	80 93 de 0b 	sts	0x0BDE, r24	; 0x800bde <pxCurrentTCB>
    2cb2:	20 93 a9 0b 	sts	0x0BA9, r18	; 0x800ba9 <uxTopReadyPriority>
    2cb6:	08 95       	ret

00002cb8 <vTaskPlaceOnEventList>:
    2cb8:	cf 93       	push	r28
    2cba:	df 93       	push	r29
    2cbc:	eb 01       	movw	r28, r22
    2cbe:	60 91 de 0b 	lds	r22, 0x0BDE	; 0x800bde <pxCurrentTCB>
    2cc2:	70 91 df 0b 	lds	r23, 0x0BDF	; 0x800bdf <pxCurrentTCB+0x1>
    2cc6:	64 5f       	subi	r22, 0xF4	; 244
    2cc8:	7f 4f       	sbci	r23, 0xFF	; 255
    2cca:	35 db       	rcall	.-2454   	; 0x2336 <vListInsert>
    2ccc:	61 e0       	ldi	r22, 0x01	; 1
    2cce:	ce 01       	movw	r24, r28
    2cd0:	fc dd       	rcall	.-1032   	; 0x28ca <prvAddCurrentTaskToDelayedList>
    2cd2:	df 91       	pop	r29
    2cd4:	cf 91       	pop	r28
    2cd6:	08 95       	ret

00002cd8 <xTaskRemoveFromEventList>:
    2cd8:	0f 93       	push	r16
    2cda:	1f 93       	push	r17
    2cdc:	cf 93       	push	r28
    2cde:	df 93       	push	r29
    2ce0:	dc 01       	movw	r26, r24
    2ce2:	15 96       	adiw	r26, 0x05	; 5
    2ce4:	ed 91       	ld	r30, X+
    2ce6:	fc 91       	ld	r31, X
    2ce8:	16 97       	sbiw	r26, 0x06	; 6
    2cea:	c6 81       	ldd	r28, Z+6	; 0x06
    2cec:	d7 81       	ldd	r29, Z+7	; 0x07
    2cee:	8e 01       	movw	r16, r28
    2cf0:	04 5f       	subi	r16, 0xF4	; 244
    2cf2:	1f 4f       	sbci	r17, 0xFF	; 255
    2cf4:	c8 01       	movw	r24, r16
    2cf6:	50 db       	rcall	.-2400   	; 0x2398 <uxListRemove>
    2cf8:	80 91 a3 0b 	lds	r24, 0x0BA3	; 0x800ba3 <uxSchedulerSuspended>
    2cfc:	81 11       	cpse	r24, r1
    2cfe:	1a c0       	rjmp	.+52     	; 0x2d34 <xTaskRemoveFromEventList+0x5c>
    2d00:	0a 50       	subi	r16, 0x0A	; 10
    2d02:	11 09       	sbc	r17, r1
    2d04:	c8 01       	movw	r24, r16
    2d06:	48 db       	rcall	.-2416   	; 0x2398 <uxListRemove>
    2d08:	8e 89       	ldd	r24, Y+22	; 0x16
    2d0a:	90 91 a9 0b 	lds	r25, 0x0BA9	; 0x800ba9 <uxTopReadyPriority>
    2d0e:	98 17       	cp	r25, r24
    2d10:	10 f4       	brcc	.+4      	; 0x2d16 <xTaskRemoveFromEventList+0x3e>
    2d12:	80 93 a9 0b 	sts	0x0BA9, r24	; 0x800ba9 <uxTopReadyPriority>
    2d16:	90 e0       	ldi	r25, 0x00	; 0
    2d18:	9c 01       	movw	r18, r24
    2d1a:	22 0f       	add	r18, r18
    2d1c:	33 1f       	adc	r19, r19
    2d1e:	22 0f       	add	r18, r18
    2d20:	33 1f       	adc	r19, r19
    2d22:	22 0f       	add	r18, r18
    2d24:	33 1f       	adc	r19, r19
    2d26:	82 0f       	add	r24, r18
    2d28:	93 1f       	adc	r25, r19
    2d2a:	b8 01       	movw	r22, r16
    2d2c:	86 54       	subi	r24, 0x46	; 70
    2d2e:	94 4f       	sbci	r25, 0xF4	; 244
    2d30:	e1 da       	rcall	.-2622   	; 0x22f4 <vListInsertEnd>
    2d32:	04 c0       	rjmp	.+8      	; 0x2d3c <xTaskRemoveFromEventList+0x64>
    2d34:	b8 01       	movw	r22, r16
    2d36:	8d ea       	ldi	r24, 0xAD	; 173
    2d38:	9b e0       	ldi	r25, 0x0B	; 11
    2d3a:	dc da       	rcall	.-2632   	; 0x22f4 <vListInsertEnd>
    2d3c:	e0 91 de 0b 	lds	r30, 0x0BDE	; 0x800bde <pxCurrentTCB>
    2d40:	f0 91 df 0b 	lds	r31, 0x0BDF	; 0x800bdf <pxCurrentTCB+0x1>
    2d44:	9e 89       	ldd	r25, Y+22	; 0x16
    2d46:	86 89       	ldd	r24, Z+22	; 0x16
    2d48:	89 17       	cp	r24, r25
    2d4a:	20 f4       	brcc	.+8      	; 0x2d54 <xTaskRemoveFromEventList+0x7c>
    2d4c:	81 e0       	ldi	r24, 0x01	; 1
    2d4e:	80 93 a7 0b 	sts	0x0BA7, r24	; 0x800ba7 <xYieldPending>
    2d52:	01 c0       	rjmp	.+2      	; 0x2d56 <xTaskRemoveFromEventList+0x7e>
    2d54:	80 e0       	ldi	r24, 0x00	; 0
    2d56:	df 91       	pop	r29
    2d58:	cf 91       	pop	r28
    2d5a:	1f 91       	pop	r17
    2d5c:	0f 91       	pop	r16
    2d5e:	08 95       	ret

00002d60 <vTaskInternalSetTimeOutState>:
    2d60:	20 91 a6 0b 	lds	r18, 0x0BA6	; 0x800ba6 <xNumOfOverflows>
    2d64:	fc 01       	movw	r30, r24
    2d66:	20 83       	st	Z, r18
    2d68:	20 91 aa 0b 	lds	r18, 0x0BAA	; 0x800baa <xTickCount>
    2d6c:	30 91 ab 0b 	lds	r19, 0x0BAB	; 0x800bab <xTickCount+0x1>
    2d70:	32 83       	std	Z+2, r19	; 0x02
    2d72:	21 83       	std	Z+1, r18	; 0x01
    2d74:	08 95       	ret

00002d76 <xTaskCheckForTimeOut>:
    2d76:	0f b6       	in	r0, 0x3f	; 63
    2d78:	f8 94       	cli
    2d7a:	0f 92       	push	r0
    2d7c:	20 91 aa 0b 	lds	r18, 0x0BAA	; 0x800baa <xTickCount>
    2d80:	30 91 ab 0b 	lds	r19, 0x0BAB	; 0x800bab <xTickCount+0x1>
    2d84:	dc 01       	movw	r26, r24
    2d86:	11 96       	adiw	r26, 0x01	; 1
    2d88:	4d 91       	ld	r20, X+
    2d8a:	5c 91       	ld	r21, X
    2d8c:	12 97       	sbiw	r26, 0x02	; 2
    2d8e:	e0 91 a6 0b 	lds	r30, 0x0BA6	; 0x800ba6 <xNumOfOverflows>
    2d92:	fc 91       	ld	r31, X
    2d94:	fe 17       	cp	r31, r30
    2d96:	19 f0       	breq	.+6      	; 0x2d9e <xTaskCheckForTimeOut+0x28>
    2d98:	24 17       	cp	r18, r20
    2d9a:	35 07       	cpc	r19, r21
    2d9c:	98 f4       	brcc	.+38     	; 0x2dc4 <xTaskCheckForTimeOut+0x4e>
    2d9e:	24 1b       	sub	r18, r20
    2da0:	35 0b       	sbc	r19, r21
    2da2:	fb 01       	movw	r30, r22
    2da4:	40 81       	ld	r20, Z
    2da6:	51 81       	ldd	r21, Z+1	; 0x01
    2da8:	24 17       	cp	r18, r20
    2daa:	35 07       	cpc	r19, r21
    2dac:	38 f4       	brcc	.+14     	; 0x2dbc <xTaskCheckForTimeOut+0x46>
    2dae:	42 1b       	sub	r20, r18
    2db0:	53 0b       	sbc	r21, r19
    2db2:	51 83       	std	Z+1, r21	; 0x01
    2db4:	40 83       	st	Z, r20
    2db6:	d4 df       	rcall	.-88     	; 0x2d60 <vTaskInternalSetTimeOutState>
    2db8:	80 e0       	ldi	r24, 0x00	; 0
    2dba:	05 c0       	rjmp	.+10     	; 0x2dc6 <xTaskCheckForTimeOut+0x50>
    2dbc:	11 82       	std	Z+1, r1	; 0x01
    2dbe:	10 82       	st	Z, r1
    2dc0:	81 e0       	ldi	r24, 0x01	; 1
    2dc2:	01 c0       	rjmp	.+2      	; 0x2dc6 <xTaskCheckForTimeOut+0x50>
    2dc4:	81 e0       	ldi	r24, 0x01	; 1
    2dc6:	0f 90       	pop	r0
    2dc8:	0f be       	out	0x3f, r0	; 63
    2dca:	08 95       	ret

00002dcc <vTaskMissedYield>:
    2dcc:	81 e0       	ldi	r24, 0x01	; 1
    2dce:	80 93 a7 0b 	sts	0x0BA7, r24	; 0x800ba7 <xYieldPending>
    2dd2:	08 95       	ret

00002dd4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
    2dd4:	0f 93       	push	r16
    2dd6:	1f 93       	push	r17
    2dd8:	cf 93       	push	r28
    2dda:	df 93       	push	r29
    2ddc:	fc 01       	movw	r30, r24
    TCB_t * const pxTCB = pxMutexHolder;
    BaseType_t xReturn = pdFALSE;

        if( pxMutexHolder != NULL )
    2dde:	89 2b       	or	r24, r25
    2de0:	69 f1       	breq	.+90     	; 0x2e3c <xTaskPriorityDisinherit+0x68>
            If the mutex is held by a task then it cannot be given from an
            interrupt, and if a mutex is given by the holding task then it must
            be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
            configASSERT( pxTCB->uxMutexesHeld );
            ( pxTCB->uxMutexesHeld )--;
    2de2:	82 a1       	ldd	r24, Z+34	; 0x22
    2de4:	81 50       	subi	r24, 0x01	; 1
    2de6:	82 a3       	std	Z+34, r24	; 0x22

            /* Has the holder of the mutex inherited the priority of another
            task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    2de8:	26 89       	ldd	r18, Z+22	; 0x16
    2dea:	91 a1       	ldd	r25, Z+33	; 0x21
    2dec:	29 17       	cp	r18, r25
    2dee:	41 f1       	breq	.+80     	; 0x2e40 <xTaskPriorityDisinherit+0x6c>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
    2df0:	81 11       	cpse	r24, r1
    2df2:	28 c0       	rjmp	.+80     	; 0x2e44 <xTaskPriorityDisinherit+0x70>
    2df4:	ef 01       	movw	r28, r30
                    /* A task can only have an inherited priority if it holds
                    the mutex.  If the mutex is held by a task then it cannot be
                    given from an interrupt, and if a mutex is given by the
                    holding task then it must be the running state task.  Remove
                    the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    2df6:	8f 01       	movw	r16, r30
    2df8:	0e 5f       	subi	r16, 0xFE	; 254
    2dfa:	1f 4f       	sbci	r17, 0xFF	; 255
    2dfc:	c8 01       	movw	r24, r16
    2dfe:	cc da       	rcall	.-2664   	; 0x2398 <uxListRemove>
                    }

                    /* Disinherit the priority before adding the task into the
                    new    ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
    2e00:	89 a1       	ldd	r24, Y+33	; 0x21
    2e02:	8e 8b       	std	Y+22, r24	; 0x16

                    /* Reset the event list item value.  It cannot be in use for
                    any other purpose if this task is running, and it must be
                    running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    2e04:	24 e0       	ldi	r18, 0x04	; 4
    2e06:	30 e0       	ldi	r19, 0x00	; 0
    2e08:	28 1b       	sub	r18, r24
    2e0a:	31 09       	sbc	r19, r1
    2e0c:	3d 87       	std	Y+13, r19	; 0x0d
    2e0e:	2c 87       	std	Y+12, r18	; 0x0c
                    prvAddTaskToReadyList( pxTCB );
    2e10:	90 91 a9 0b 	lds	r25, 0x0BA9	; 0x800ba9 <uxTopReadyPriority>
    2e14:	98 17       	cp	r25, r24
    2e16:	10 f4       	brcc	.+4      	; 0x2e1c <xTaskPriorityDisinherit+0x48>
    2e18:	80 93 a9 0b 	sts	0x0BA9, r24	; 0x800ba9 <uxTopReadyPriority>
    2e1c:	90 e0       	ldi	r25, 0x00	; 0
    2e1e:	9c 01       	movw	r18, r24
    2e20:	22 0f       	add	r18, r18
    2e22:	33 1f       	adc	r19, r19
    2e24:	22 0f       	add	r18, r18
    2e26:	33 1f       	adc	r19, r19
    2e28:	22 0f       	add	r18, r18
    2e2a:	33 1f       	adc	r19, r19
    2e2c:	82 0f       	add	r24, r18
    2e2e:	93 1f       	adc	r25, r19
    2e30:	b8 01       	movw	r22, r16
    2e32:	86 54       	subi	r24, 0x46	; 70
    2e34:	94 4f       	sbci	r25, 0xF4	; 244
    2e36:	5e da       	rcall	.-2884   	; 0x22f4 <vListInsertEnd>
                    in an order different to that in which they were taken.
                    If a context switch did not occur when the first mutex was
                    returned, even if a task was waiting on it, then a context
                    switch should occur when the last mutex is returned whether
                    a task is waiting on it or not. */
                    xReturn = pdTRUE;
    2e38:	81 e0       	ldi	r24, 0x01	; 1
    2e3a:	05 c0       	rjmp	.+10     	; 0x2e46 <xTaskPriorityDisinherit+0x72>
#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
    TCB_t * const pxTCB = pxMutexHolder;
    BaseType_t xReturn = pdFALSE;
    2e3c:	80 e0       	ldi	r24, 0x00	; 0
    2e3e:	03 c0       	rjmp	.+6      	; 0x2e46 <xTaskPriorityDisinherit+0x72>
    2e40:	80 e0       	ldi	r24, 0x00	; 0
    2e42:	01 c0       	rjmp	.+2      	; 0x2e46 <xTaskPriorityDisinherit+0x72>
    2e44:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    2e46:	df 91       	pop	r29
    2e48:	cf 91       	pop	r28
    2e4a:	1f 91       	pop	r17
    2e4c:	0f 91       	pop	r16
    2e4e:	08 95       	ret

00002e50 <Drum_speed_Tasks_init>:
#include "../RTE/RTE_drum.h"



void Drum_speed_Tasks_init(void){
	Drum_speed_init();
    2e50:	0c 94 9d 00 	jmp	0x13a	; 0x13a <Drum_speed_init>
    2e54:	08 95       	ret

00002e56 <LCD_main_err_Init>:

void (*g_callback_read_timeout)(void) = NULL;
void (*g_callback_write_timeout)(void) = NULL;

void LCD_main_err_Init( void(*callback_read_timeout)(void) , void(*callback_write_timeout)(void)){
	g_callback_read_timeout = callback_read_timeout;
    2e56:	90 93 e3 0b 	sts	0x0BE3, r25	; 0x800be3 <g_callback_read_timeout+0x1>
    2e5a:	80 93 e2 0b 	sts	0x0BE2, r24	; 0x800be2 <g_callback_read_timeout>
	g_callback_write_timeout = callback_write_timeout;
    2e5e:	70 93 e1 0b 	sts	0x0BE1, r23	; 0x800be1 <g_callback_write_timeout+0x1>
    2e62:	60 93 e0 0b 	sts	0x0BE0, r22	; 0x800be0 <g_callback_write_timeout>
    2e66:	08 95       	ret

00002e68 <Level_main_err_init>:

#include "../MCAL/UART.h"
 
void (*g_callback_level_sensor_fail) (void) = NULL;
void Level_main_err_init( void (*callback_level_sensor_fail) (void) ){
	 g_callback_level_sensor_fail = callback_level_sensor_fail;
    2e68:	90 93 e5 0b 	sts	0x0BE5, r25	; 0x800be5 <g_callback_level_sensor_fail+0x1>
    2e6c:	80 93 e4 0b 	sts	0x0BE4, r24	; 0x800be4 <g_callback_level_sensor_fail>
    2e70:	08 95       	ret

00002e72 <Service_init>:
#include "tank_operation.h"
#include "Drum_speed_Tasks.h"

void Service_init(void){
	
	Drum_speed_Tasks_init(); //fixed here because no main task
    2e72:	ee df       	rcall	.-36     	; 0x2e50 <Drum_speed_Tasks_init>
	Tank_operation_init();
    2e74:	3f c0       	rjmp	.+126    	; 0x2ef4 <Tank_operation_init>
    2e76:	08 95       	ret

00002e78 <Tank_out_callback>:
    2e78:	80 91 ea 0b 	lds	r24, 0x0BEA	; 0x800bea <g_out_liters_counter>
}

static void Tank_out_callback(void)
{
	
	g_out_liters_counter ++ ;
    2e7c:	90 91 eb 0b 	lds	r25, 0x0BEB	; 0x800beb <g_out_liters_counter+0x1>
    2e80:	01 96       	adiw	r24, 0x01	; 1
    2e82:	90 93 eb 0b 	sts	0x0BEB, r25	; 0x800beb <g_out_liters_counter+0x1>
    2e86:	80 93 ea 0b 	sts	0x0BEA, r24	; 0x800bea <g_out_liters_counter>
	if (g_out_liters_counter >= g_out_liters )
    2e8a:	20 91 ea 0b 	lds	r18, 0x0BEA	; 0x800bea <g_out_liters_counter>
    2e8e:	30 91 eb 0b 	lds	r19, 0x0BEB	; 0x800beb <g_out_liters_counter+0x1>
    2e92:	80 91 e6 0b 	lds	r24, 0x0BE6	; 0x800be6 <g_out_liters>
    2e96:	90 91 e7 0b 	lds	r25, 0x0BE7	; 0x800be7 <g_out_liters+0x1>
    2e9a:	28 17       	cp	r18, r24
    2e9c:	39 07       	cpc	r19, r25
    2e9e:	50 f0       	brcs	.+20     	; 0x2eb4 <Tank_out_callback+0x3c>
	{
		// release the semaphore
		xSemaphoreGive(outing_Semaphore );
    2ea0:	20 e0       	ldi	r18, 0x00	; 0
    2ea2:	40 e0       	ldi	r20, 0x00	; 0
    2ea4:	50 e0       	ldi	r21, 0x00	; 0
    2ea6:	60 e0       	ldi	r22, 0x00	; 0
    2ea8:	70 e0       	ldi	r23, 0x00	; 0
    2eaa:	80 91 15 0c 	lds	r24, 0x0C15	; 0x800c15 <outing_Semaphore>
    2eae:	90 91 16 0c 	lds	r25, 0x0C16	; 0x800c16 <outing_Semaphore+0x1>
    2eb2:	5a cc       	rjmp	.-1868   	; 0x2768 <xQueueGenericSend>
    2eb4:	08 95       	ret

00002eb6 <Tank_feed_callback>:


static void Tank_feed_callback (void)
{
	
	g_feeding_liters_counter ++ ;
    2eb6:	80 91 ec 0b 	lds	r24, 0x0BEC	; 0x800bec <g_feeding_liters_counter>
    2eba:	90 91 ed 0b 	lds	r25, 0x0BED	; 0x800bed <g_feeding_liters_counter+0x1>
    2ebe:	01 96       	adiw	r24, 0x01	; 1
    2ec0:	90 93 ed 0b 	sts	0x0BED, r25	; 0x800bed <g_feeding_liters_counter+0x1>
    2ec4:	80 93 ec 0b 	sts	0x0BEC, r24	; 0x800bec <g_feeding_liters_counter>
	// keep monitoring the amount of water .
	if (g_feeding_liters_counter >= g_feed_liters )
    2ec8:	20 91 ec 0b 	lds	r18, 0x0BEC	; 0x800bec <g_feeding_liters_counter>
    2ecc:	30 91 ed 0b 	lds	r19, 0x0BED	; 0x800bed <g_feeding_liters_counter+0x1>
    2ed0:	80 91 e8 0b 	lds	r24, 0x0BE8	; 0x800be8 <g_feed_liters>
    2ed4:	90 91 e9 0b 	lds	r25, 0x0BE9	; 0x800be9 <g_feed_liters+0x1>
    2ed8:	28 17       	cp	r18, r24
    2eda:	39 07       	cpc	r19, r25
    2edc:	50 f0       	brcs	.+20     	; 0x2ef2 <Tank_feed_callback+0x3c>
	{
		// release the semaphore
		xSemaphoreGive(Feeding_Semaphore);
    2ede:	20 e0       	ldi	r18, 0x00	; 0
    2ee0:	40 e0       	ldi	r20, 0x00	; 0
    2ee2:	50 e0       	ldi	r21, 0x00	; 0
    2ee4:	60 e0       	ldi	r22, 0x00	; 0
    2ee6:	70 e0       	ldi	r23, 0x00	; 0
    2ee8:	80 91 55 0c 	lds	r24, 0x0C55	; 0x800c55 <Feeding_Semaphore>
    2eec:	90 91 56 0c 	lds	r25, 0x0C56	; 0x800c56 <Feeding_Semaphore+0x1>
    2ef0:	3b cc       	rjmp	.-1930   	; 0x2768 <xQueueGenericSend>
    2ef2:	08 95       	ret

00002ef4 <Tank_operation_init>:




void Tank_operation_init(void)
{
    2ef4:	0f 93       	push	r16
	Flow_rate_init( Tank_feed_callback , Tank_out_callback);	
    2ef6:	6c e3       	ldi	r22, 0x3C	; 60
    2ef8:	77 e1       	ldi	r23, 0x17	; 23
    2efa:	8b e5       	ldi	r24, 0x5B	; 91
    2efc:	97 e1       	ldi	r25, 0x17	; 23
    2efe:	0e 94 bb 00 	call	0x176	; 0x176 <Flow_rate_init>
	Feeding_Semaphore = xSemaphoreCreateBinaryStatic( &feeding_SemaphoreBuffer );
    2f02:	03 e0       	ldi	r16, 0x03	; 3
    2f04:	26 e3       	ldi	r18, 0x36	; 54
    2f06:	3c e0       	ldi	r19, 0x0C	; 12
    2f08:	40 e0       	ldi	r20, 0x00	; 0
    2f0a:	50 e0       	ldi	r21, 0x00	; 0
    2f0c:	60 e0       	ldi	r22, 0x00	; 0
    2f0e:	81 e0       	ldi	r24, 0x01	; 1
    2f10:	16 dc       	rcall	.-2004   	; 0x273e <xQueueGenericCreateStatic>
    2f12:	90 93 56 0c 	sts	0x0C56, r25	; 0x800c56 <Feeding_Semaphore+0x1>
    2f16:	80 93 55 0c 	sts	0x0C55, r24	; 0x800c55 <Feeding_Semaphore>
	outing_Semaphore = xSemaphoreCreateBinaryStatic( &outing_SemaphoreBuffer );
    2f1a:	27 e1       	ldi	r18, 0x17	; 23
    2f1c:	3c e0       	ldi	r19, 0x0C	; 12
    2f1e:	40 e0       	ldi	r20, 0x00	; 0
    2f20:	50 e0       	ldi	r21, 0x00	; 0
    2f22:	60 e0       	ldi	r22, 0x00	; 0
    2f24:	81 e0       	ldi	r24, 0x01	; 1
    2f26:	0b dc       	rcall	.-2026   	; 0x273e <xQueueGenericCreateStatic>
    2f28:	90 93 16 0c 	sts	0x0C16, r25	; 0x800c16 <outing_Semaphore+0x1>
    2f2c:	80 93 15 0c 	sts	0x0C15, r24	; 0x800c15 <outing_Semaphore>
}
    2f30:	0f 91       	pop	r16
    2f32:	08 95       	ret

00002f34 <Temp_main_err_init>:
*Parameters @ Nothing
*return Nothing 
*/
void (*over_temp_callback)(void) = NULL;
void Temp_main_err_init( void (*callback_over_temp) (void) ){
	over_temp_callback = callback_over_temp;
    2f34:	90 93 ef 0b 	sts	0x0BEF, r25	; 0x800bef <over_temp_callback+0x1>
    2f38:	80 93 ee 0b 	sts	0x0BEE, r24	; 0x800bee <over_temp_callback>
    2f3c:	08 95       	ret

00002f3e <System_init>:


gSystemError System_init(void){
	
	gSystemError res = E_OK;
	DIO_init();
    2f3e:	0e 94 ed 09 	call	0x13da	; 0x13da <DIO_init>
	millis_init();	
    2f42:	18 d0       	rcall	.+48     	; 0x2f74 <millis_init>
	Service_error_init();
    2f44:	0e 94 9d 09 	call	0x133a	; 0x133a <Service_error_init>
	Service_init();
	RTE_init();
    2f48:	94 df       	rcall	.-216    	; 0x2e72 <Service_init>
    2f4a:	32 d9       	rcall	.-3484   	; 0x21b0 <RTE_init>
	//App_init();
	return res;

    2f4c:	80 e0       	ldi	r24, 0x00	; 0
    2f4e:	08 95       	ret

00002f50 <crc16_update>:

uint16_t crc16_update(uint16_t crc, uint8_t a)
{
  int i;

  crc ^= a;
    2f50:	86 27       	eor	r24, r22
    2f52:	28 e0       	ldi	r18, 0x08	; 8
    2f54:	30 e0       	ldi	r19, 0x00	; 0
  for (i = 0; i < 8; ++i)
  {
    if (crc & 1)
    2f56:	80 ff       	sbrs	r24, 0
    2f58:	07 c0       	rjmp	.+14     	; 0x2f68 <crc16_update+0x18>
      crc = (crc >> 1) ^ 0xA001;
    2f5a:	96 95       	lsr	r25
    2f5c:	87 95       	ror	r24
    2f5e:	41 e0       	ldi	r20, 0x01	; 1
    2f60:	84 27       	eor	r24, r20
    2f62:	40 ea       	ldi	r20, 0xA0	; 160
    2f64:	94 27       	eor	r25, r20
    2f66:	02 c0       	rjmp	.+4      	; 0x2f6c <crc16_update+0x1c>
    else
      crc = (crc >> 1);
    2f68:	96 95       	lsr	r25
    2f6a:	87 95       	ror	r24
    2f6c:	21 50       	subi	r18, 0x01	; 1
    2f6e:	31 09       	sbc	r19, r1
uint16_t crc16_update(uint16_t crc, uint8_t a)
{
  int i;

  crc ^= a;
  for (i = 0; i < 8; ++i)
    2f70:	91 f7       	brne	.-28     	; 0x2f56 <crc16_update+0x6>
    else
      crc = (crc >> 1);
  }

  return crc;
}
    2f72:	08 95       	ret

00002f74 <millis_init>:

//init the timer on ctc mode to calvulate millis
void millis_init()
{
	//CTC mode
	TIMER2_CONGFIG_A = 0x02;
    2f74:	82 e0       	ldi	r24, 0x02	; 2
    2f76:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
	// Clock/64
	TIMER2_CONGFIG_B = 0x04;
    2f7a:	84 e0       	ldi	r24, 0x04	; 4
    2f7c:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7000b1>
    // Load into the output compare
    TIMER2_COMPARE = CTC_MATCH_OVERFLOW;
    2f80:	8a ef       	ldi	r24, 0xFA	; 250
    2f82:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7000b3>
    // Enable the compare match interrupt
    SET_BIT(TIMER2_INTERUPT, TIMER2_COMPARE_INT);
    2f86:	e0 e7       	ldi	r30, 0x70	; 112
    2f88:	f0 e0       	ldi	r31, 0x00	; 0
    2f8a:	80 81       	ld	r24, Z
    2f8c:	82 60       	ori	r24, 0x02	; 2
    2f8e:	80 83       	st	Z, r24
    2f90:	08 95       	ret

00002f92 <Get_millis>:
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2f92:	f8 94       	cli
    unsigned long millis_return;

    // Ensure this cannot be disrupted
    ATOMIC_BLOCK(ATOMIC_FORCEON) {
    	// copy the ISR counter
        millis_return = timer1_millis;
    2f94:	60 91 57 0c 	lds	r22, 0x0C57	; 0x800c57 <timer1_millis>
    2f98:	70 91 58 0c 	lds	r23, 0x0C58	; 0x800c58 <timer1_millis+0x1>
    2f9c:	80 91 59 0c 	lds	r24, 0x0C59	; 0x800c59 <timer1_millis+0x2>
    2fa0:	90 91 5a 0c 	lds	r25, 0x0C5A	; 0x800c5a <timer1_millis+0x3>
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
    2fa4:	78 94       	sei
    }

    return millis_return;
}//Get_millis
    2fa6:	08 95       	ret

00002fa8 <__vector_13>:



ISR (TIMER2_COMPA_vect)
{
    2fa8:	1f 92       	push	r1
    2faa:	0f 92       	push	r0
    2fac:	0f b6       	in	r0, 0x3f	; 63
    2fae:	0f 92       	push	r0
    2fb0:	11 24       	eor	r1, r1
    2fb2:	8f 93       	push	r24
    2fb4:	9f 93       	push	r25
    2fb6:	af 93       	push	r26
    2fb8:	bf 93       	push	r27
	//MILLI SEC
    timer1_millis++;
    2fba:	80 91 57 0c 	lds	r24, 0x0C57	; 0x800c57 <timer1_millis>
    2fbe:	90 91 58 0c 	lds	r25, 0x0C58	; 0x800c58 <timer1_millis+0x1>
    2fc2:	a0 91 59 0c 	lds	r26, 0x0C59	; 0x800c59 <timer1_millis+0x2>
    2fc6:	b0 91 5a 0c 	lds	r27, 0x0C5A	; 0x800c5a <timer1_millis+0x3>
    2fca:	01 96       	adiw	r24, 0x01	; 1
    2fcc:	a1 1d       	adc	r26, r1
    2fce:	b1 1d       	adc	r27, r1
    2fd0:	80 93 57 0c 	sts	0x0C57, r24	; 0x800c57 <timer1_millis>
    2fd4:	90 93 58 0c 	sts	0x0C58, r25	; 0x800c58 <timer1_millis+0x1>
    2fd8:	a0 93 59 0c 	sts	0x0C59, r26	; 0x800c59 <timer1_millis+0x2>
    2fdc:	b0 93 5a 0c 	sts	0x0C5A, r27	; 0x800c5a <timer1_millis+0x3>
}//ISR
    2fe0:	bf 91       	pop	r27
    2fe2:	af 91       	pop	r26
    2fe4:	9f 91       	pop	r25
    2fe6:	8f 91       	pop	r24
    2fe8:	0f 90       	pop	r0
    2fea:	0f be       	out	0x3f, r0	; 63
    2fec:	0f 90       	pop	r0
    2fee:	1f 90       	pop	r1
    2ff0:	18 95       	reti

00002ff2 <__subsf3>:
    2ff2:	50 58       	subi	r21, 0x80	; 128

00002ff4 <__addsf3>:
    2ff4:	bb 27       	eor	r27, r27
    2ff6:	aa 27       	eor	r26, r26
    2ff8:	0e d0       	rcall	.+28     	; 0x3016 <__addsf3x>
    2ffa:	70 c1       	rjmp	.+736    	; 0x32dc <__fp_round>
    2ffc:	61 d1       	rcall	.+706    	; 0x32c0 <__fp_pscA>
    2ffe:	30 f0       	brcs	.+12     	; 0x300c <__addsf3+0x18>
    3000:	66 d1       	rcall	.+716    	; 0x32ce <__fp_pscB>
    3002:	20 f0       	brcs	.+8      	; 0x300c <__addsf3+0x18>
    3004:	31 f4       	brne	.+12     	; 0x3012 <__addsf3+0x1e>
    3006:	9f 3f       	cpi	r25, 0xFF	; 255
    3008:	11 f4       	brne	.+4      	; 0x300e <__addsf3+0x1a>
    300a:	1e f4       	brtc	.+6      	; 0x3012 <__addsf3+0x1e>
    300c:	56 c1       	rjmp	.+684    	; 0x32ba <__fp_nan>
    300e:	0e f4       	brtc	.+2      	; 0x3012 <__addsf3+0x1e>
    3010:	e0 95       	com	r30
    3012:	e7 fb       	bst	r30, 7
    3014:	4c c1       	rjmp	.+664    	; 0x32ae <__fp_inf>

00003016 <__addsf3x>:
    3016:	e9 2f       	mov	r30, r25
    3018:	72 d1       	rcall	.+740    	; 0x32fe <__fp_split3>
    301a:	80 f3       	brcs	.-32     	; 0x2ffc <__addsf3+0x8>
    301c:	ba 17       	cp	r27, r26
    301e:	62 07       	cpc	r22, r18
    3020:	73 07       	cpc	r23, r19
    3022:	84 07       	cpc	r24, r20
    3024:	95 07       	cpc	r25, r21
    3026:	18 f0       	brcs	.+6      	; 0x302e <__addsf3x+0x18>
    3028:	71 f4       	brne	.+28     	; 0x3046 <__addsf3x+0x30>
    302a:	9e f5       	brtc	.+102    	; 0x3092 <__addsf3x+0x7c>
    302c:	8a c1       	rjmp	.+788    	; 0x3342 <__fp_zero>
    302e:	0e f4       	brtc	.+2      	; 0x3032 <__addsf3x+0x1c>
    3030:	e0 95       	com	r30
    3032:	0b 2e       	mov	r0, r27
    3034:	ba 2f       	mov	r27, r26
    3036:	a0 2d       	mov	r26, r0
    3038:	0b 01       	movw	r0, r22
    303a:	b9 01       	movw	r22, r18
    303c:	90 01       	movw	r18, r0
    303e:	0c 01       	movw	r0, r24
    3040:	ca 01       	movw	r24, r20
    3042:	a0 01       	movw	r20, r0
    3044:	11 24       	eor	r1, r1
    3046:	ff 27       	eor	r31, r31
    3048:	59 1b       	sub	r21, r25
    304a:	99 f0       	breq	.+38     	; 0x3072 <__addsf3x+0x5c>
    304c:	59 3f       	cpi	r21, 0xF9	; 249
    304e:	50 f4       	brcc	.+20     	; 0x3064 <__addsf3x+0x4e>
    3050:	50 3e       	cpi	r21, 0xE0	; 224
    3052:	68 f1       	brcs	.+90     	; 0x30ae <__addsf3x+0x98>
    3054:	1a 16       	cp	r1, r26
    3056:	f0 40       	sbci	r31, 0x00	; 0
    3058:	a2 2f       	mov	r26, r18
    305a:	23 2f       	mov	r18, r19
    305c:	34 2f       	mov	r19, r20
    305e:	44 27       	eor	r20, r20
    3060:	58 5f       	subi	r21, 0xF8	; 248
    3062:	f3 cf       	rjmp	.-26     	; 0x304a <__addsf3x+0x34>
    3064:	46 95       	lsr	r20
    3066:	37 95       	ror	r19
    3068:	27 95       	ror	r18
    306a:	a7 95       	ror	r26
    306c:	f0 40       	sbci	r31, 0x00	; 0
    306e:	53 95       	inc	r21
    3070:	c9 f7       	brne	.-14     	; 0x3064 <__addsf3x+0x4e>
    3072:	7e f4       	brtc	.+30     	; 0x3092 <__addsf3x+0x7c>
    3074:	1f 16       	cp	r1, r31
    3076:	ba 0b       	sbc	r27, r26
    3078:	62 0b       	sbc	r22, r18
    307a:	73 0b       	sbc	r23, r19
    307c:	84 0b       	sbc	r24, r20
    307e:	ba f0       	brmi	.+46     	; 0x30ae <__addsf3x+0x98>
    3080:	91 50       	subi	r25, 0x01	; 1
    3082:	a1 f0       	breq	.+40     	; 0x30ac <__addsf3x+0x96>
    3084:	ff 0f       	add	r31, r31
    3086:	bb 1f       	adc	r27, r27
    3088:	66 1f       	adc	r22, r22
    308a:	77 1f       	adc	r23, r23
    308c:	88 1f       	adc	r24, r24
    308e:	c2 f7       	brpl	.-16     	; 0x3080 <__addsf3x+0x6a>
    3090:	0e c0       	rjmp	.+28     	; 0x30ae <__addsf3x+0x98>
    3092:	ba 0f       	add	r27, r26
    3094:	62 1f       	adc	r22, r18
    3096:	73 1f       	adc	r23, r19
    3098:	84 1f       	adc	r24, r20
    309a:	48 f4       	brcc	.+18     	; 0x30ae <__addsf3x+0x98>
    309c:	87 95       	ror	r24
    309e:	77 95       	ror	r23
    30a0:	67 95       	ror	r22
    30a2:	b7 95       	ror	r27
    30a4:	f7 95       	ror	r31
    30a6:	9e 3f       	cpi	r25, 0xFE	; 254
    30a8:	08 f0       	brcs	.+2      	; 0x30ac <__addsf3x+0x96>
    30aa:	b3 cf       	rjmp	.-154    	; 0x3012 <__addsf3+0x1e>
    30ac:	93 95       	inc	r25
    30ae:	88 0f       	add	r24, r24
    30b0:	08 f0       	brcs	.+2      	; 0x30b4 <__addsf3x+0x9e>
    30b2:	99 27       	eor	r25, r25
    30b4:	ee 0f       	add	r30, r30
    30b6:	97 95       	ror	r25
    30b8:	87 95       	ror	r24
    30ba:	08 95       	ret

000030bc <__cmpsf2>:
    30bc:	d4 d0       	rcall	.+424    	; 0x3266 <__fp_cmp>
    30be:	08 f4       	brcc	.+2      	; 0x30c2 <__cmpsf2+0x6>
    30c0:	81 e0       	ldi	r24, 0x01	; 1
    30c2:	08 95       	ret

000030c4 <__divsf3>:
    30c4:	0c d0       	rcall	.+24     	; 0x30de <__divsf3x>
    30c6:	0a c1       	rjmp	.+532    	; 0x32dc <__fp_round>
    30c8:	02 d1       	rcall	.+516    	; 0x32ce <__fp_pscB>
    30ca:	40 f0       	brcs	.+16     	; 0x30dc <__divsf3+0x18>
    30cc:	f9 d0       	rcall	.+498    	; 0x32c0 <__fp_pscA>
    30ce:	30 f0       	brcs	.+12     	; 0x30dc <__divsf3+0x18>
    30d0:	21 f4       	brne	.+8      	; 0x30da <__divsf3+0x16>
    30d2:	5f 3f       	cpi	r21, 0xFF	; 255
    30d4:	19 f0       	breq	.+6      	; 0x30dc <__divsf3+0x18>
    30d6:	eb c0       	rjmp	.+470    	; 0x32ae <__fp_inf>
    30d8:	51 11       	cpse	r21, r1
    30da:	34 c1       	rjmp	.+616    	; 0x3344 <__fp_szero>
    30dc:	ee c0       	rjmp	.+476    	; 0x32ba <__fp_nan>

000030de <__divsf3x>:
    30de:	0f d1       	rcall	.+542    	; 0x32fe <__fp_split3>
    30e0:	98 f3       	brcs	.-26     	; 0x30c8 <__divsf3+0x4>

000030e2 <__divsf3_pse>:
    30e2:	99 23       	and	r25, r25
    30e4:	c9 f3       	breq	.-14     	; 0x30d8 <__divsf3+0x14>
    30e6:	55 23       	and	r21, r21
    30e8:	b1 f3       	breq	.-20     	; 0x30d6 <__divsf3+0x12>
    30ea:	95 1b       	sub	r25, r21
    30ec:	55 0b       	sbc	r21, r21
    30ee:	bb 27       	eor	r27, r27
    30f0:	aa 27       	eor	r26, r26
    30f2:	62 17       	cp	r22, r18
    30f4:	73 07       	cpc	r23, r19
    30f6:	84 07       	cpc	r24, r20
    30f8:	38 f0       	brcs	.+14     	; 0x3108 <__divsf3_pse+0x26>
    30fa:	9f 5f       	subi	r25, 0xFF	; 255
    30fc:	5f 4f       	sbci	r21, 0xFF	; 255
    30fe:	22 0f       	add	r18, r18
    3100:	33 1f       	adc	r19, r19
    3102:	44 1f       	adc	r20, r20
    3104:	aa 1f       	adc	r26, r26
    3106:	a9 f3       	breq	.-22     	; 0x30f2 <__divsf3_pse+0x10>
    3108:	33 d0       	rcall	.+102    	; 0x3170 <__divsf3_pse+0x8e>
    310a:	0e 2e       	mov	r0, r30
    310c:	3a f0       	brmi	.+14     	; 0x311c <__divsf3_pse+0x3a>
    310e:	e0 e8       	ldi	r30, 0x80	; 128
    3110:	30 d0       	rcall	.+96     	; 0x3172 <__divsf3_pse+0x90>
    3112:	91 50       	subi	r25, 0x01	; 1
    3114:	50 40       	sbci	r21, 0x00	; 0
    3116:	e6 95       	lsr	r30
    3118:	00 1c       	adc	r0, r0
    311a:	ca f7       	brpl	.-14     	; 0x310e <__divsf3_pse+0x2c>
    311c:	29 d0       	rcall	.+82     	; 0x3170 <__divsf3_pse+0x8e>
    311e:	fe 2f       	mov	r31, r30
    3120:	27 d0       	rcall	.+78     	; 0x3170 <__divsf3_pse+0x8e>
    3122:	66 0f       	add	r22, r22
    3124:	77 1f       	adc	r23, r23
    3126:	88 1f       	adc	r24, r24
    3128:	bb 1f       	adc	r27, r27
    312a:	26 17       	cp	r18, r22
    312c:	37 07       	cpc	r19, r23
    312e:	48 07       	cpc	r20, r24
    3130:	ab 07       	cpc	r26, r27
    3132:	b0 e8       	ldi	r27, 0x80	; 128
    3134:	09 f0       	breq	.+2      	; 0x3138 <__divsf3_pse+0x56>
    3136:	bb 0b       	sbc	r27, r27
    3138:	80 2d       	mov	r24, r0
    313a:	bf 01       	movw	r22, r30
    313c:	ff 27       	eor	r31, r31
    313e:	93 58       	subi	r25, 0x83	; 131
    3140:	5f 4f       	sbci	r21, 0xFF	; 255
    3142:	2a f0       	brmi	.+10     	; 0x314e <__divsf3_pse+0x6c>
    3144:	9e 3f       	cpi	r25, 0xFE	; 254
    3146:	51 05       	cpc	r21, r1
    3148:	68 f0       	brcs	.+26     	; 0x3164 <__divsf3_pse+0x82>
    314a:	b1 c0       	rjmp	.+354    	; 0x32ae <__fp_inf>
    314c:	fb c0       	rjmp	.+502    	; 0x3344 <__fp_szero>
    314e:	5f 3f       	cpi	r21, 0xFF	; 255
    3150:	ec f3       	brlt	.-6      	; 0x314c <__divsf3_pse+0x6a>
    3152:	98 3e       	cpi	r25, 0xE8	; 232
    3154:	dc f3       	brlt	.-10     	; 0x314c <__divsf3_pse+0x6a>
    3156:	86 95       	lsr	r24
    3158:	77 95       	ror	r23
    315a:	67 95       	ror	r22
    315c:	b7 95       	ror	r27
    315e:	f7 95       	ror	r31
    3160:	9f 5f       	subi	r25, 0xFF	; 255
    3162:	c9 f7       	brne	.-14     	; 0x3156 <__divsf3_pse+0x74>
    3164:	88 0f       	add	r24, r24
    3166:	91 1d       	adc	r25, r1
    3168:	96 95       	lsr	r25
    316a:	87 95       	ror	r24
    316c:	97 f9       	bld	r25, 7
    316e:	08 95       	ret
    3170:	e1 e0       	ldi	r30, 0x01	; 1
    3172:	66 0f       	add	r22, r22
    3174:	77 1f       	adc	r23, r23
    3176:	88 1f       	adc	r24, r24
    3178:	bb 1f       	adc	r27, r27
    317a:	62 17       	cp	r22, r18
    317c:	73 07       	cpc	r23, r19
    317e:	84 07       	cpc	r24, r20
    3180:	ba 07       	cpc	r27, r26
    3182:	20 f0       	brcs	.+8      	; 0x318c <__divsf3_pse+0xaa>
    3184:	62 1b       	sub	r22, r18
    3186:	73 0b       	sbc	r23, r19
    3188:	84 0b       	sbc	r24, r20
    318a:	ba 0b       	sbc	r27, r26
    318c:	ee 1f       	adc	r30, r30
    318e:	88 f7       	brcc	.-30     	; 0x3172 <__divsf3_pse+0x90>
    3190:	e0 95       	com	r30
    3192:	08 95       	ret

00003194 <__fixunssfsi>:
    3194:	bc d0       	rcall	.+376    	; 0x330e <__fp_splitA>
    3196:	88 f0       	brcs	.+34     	; 0x31ba <__fixunssfsi+0x26>
    3198:	9f 57       	subi	r25, 0x7F	; 127
    319a:	90 f0       	brcs	.+36     	; 0x31c0 <__fixunssfsi+0x2c>
    319c:	b9 2f       	mov	r27, r25
    319e:	99 27       	eor	r25, r25
    31a0:	b7 51       	subi	r27, 0x17	; 23
    31a2:	a0 f0       	brcs	.+40     	; 0x31cc <__fixunssfsi+0x38>
    31a4:	d1 f0       	breq	.+52     	; 0x31da <__fixunssfsi+0x46>
    31a6:	66 0f       	add	r22, r22
    31a8:	77 1f       	adc	r23, r23
    31aa:	88 1f       	adc	r24, r24
    31ac:	99 1f       	adc	r25, r25
    31ae:	1a f0       	brmi	.+6      	; 0x31b6 <__fixunssfsi+0x22>
    31b0:	ba 95       	dec	r27
    31b2:	c9 f7       	brne	.-14     	; 0x31a6 <__fixunssfsi+0x12>
    31b4:	12 c0       	rjmp	.+36     	; 0x31da <__fixunssfsi+0x46>
    31b6:	b1 30       	cpi	r27, 0x01	; 1
    31b8:	81 f0       	breq	.+32     	; 0x31da <__fixunssfsi+0x46>
    31ba:	c3 d0       	rcall	.+390    	; 0x3342 <__fp_zero>
    31bc:	b1 e0       	ldi	r27, 0x01	; 1
    31be:	08 95       	ret
    31c0:	c0 c0       	rjmp	.+384    	; 0x3342 <__fp_zero>
    31c2:	67 2f       	mov	r22, r23
    31c4:	78 2f       	mov	r23, r24
    31c6:	88 27       	eor	r24, r24
    31c8:	b8 5f       	subi	r27, 0xF8	; 248
    31ca:	39 f0       	breq	.+14     	; 0x31da <__fixunssfsi+0x46>
    31cc:	b9 3f       	cpi	r27, 0xF9	; 249
    31ce:	cc f3       	brlt	.-14     	; 0x31c2 <__fixunssfsi+0x2e>
    31d0:	86 95       	lsr	r24
    31d2:	77 95       	ror	r23
    31d4:	67 95       	ror	r22
    31d6:	b3 95       	inc	r27
    31d8:	d9 f7       	brne	.-10     	; 0x31d0 <__fixunssfsi+0x3c>
    31da:	3e f4       	brtc	.+14     	; 0x31ea <__fixunssfsi+0x56>
    31dc:	90 95       	com	r25
    31de:	80 95       	com	r24
    31e0:	70 95       	com	r23
    31e2:	61 95       	neg	r22
    31e4:	7f 4f       	sbci	r23, 0xFF	; 255
    31e6:	8f 4f       	sbci	r24, 0xFF	; 255
    31e8:	9f 4f       	sbci	r25, 0xFF	; 255
    31ea:	08 95       	ret

000031ec <__floatunsisf>:
    31ec:	e8 94       	clt
    31ee:	09 c0       	rjmp	.+18     	; 0x3202 <__floatsisf+0x12>

000031f0 <__floatsisf>:
    31f0:	97 fb       	bst	r25, 7
    31f2:	3e f4       	brtc	.+14     	; 0x3202 <__floatsisf+0x12>
    31f4:	90 95       	com	r25
    31f6:	80 95       	com	r24
    31f8:	70 95       	com	r23
    31fa:	61 95       	neg	r22
    31fc:	7f 4f       	sbci	r23, 0xFF	; 255
    31fe:	8f 4f       	sbci	r24, 0xFF	; 255
    3200:	9f 4f       	sbci	r25, 0xFF	; 255
    3202:	99 23       	and	r25, r25
    3204:	a9 f0       	breq	.+42     	; 0x3230 <__floatsisf+0x40>
    3206:	f9 2f       	mov	r31, r25
    3208:	96 e9       	ldi	r25, 0x96	; 150
    320a:	bb 27       	eor	r27, r27
    320c:	93 95       	inc	r25
    320e:	f6 95       	lsr	r31
    3210:	87 95       	ror	r24
    3212:	77 95       	ror	r23
    3214:	67 95       	ror	r22
    3216:	b7 95       	ror	r27
    3218:	f1 11       	cpse	r31, r1
    321a:	f8 cf       	rjmp	.-16     	; 0x320c <__floatsisf+0x1c>
    321c:	fa f4       	brpl	.+62     	; 0x325c <__floatsisf+0x6c>
    321e:	bb 0f       	add	r27, r27
    3220:	11 f4       	brne	.+4      	; 0x3226 <__floatsisf+0x36>
    3222:	60 ff       	sbrs	r22, 0
    3224:	1b c0       	rjmp	.+54     	; 0x325c <__floatsisf+0x6c>
    3226:	6f 5f       	subi	r22, 0xFF	; 255
    3228:	7f 4f       	sbci	r23, 0xFF	; 255
    322a:	8f 4f       	sbci	r24, 0xFF	; 255
    322c:	9f 4f       	sbci	r25, 0xFF	; 255
    322e:	16 c0       	rjmp	.+44     	; 0x325c <__floatsisf+0x6c>
    3230:	88 23       	and	r24, r24
    3232:	11 f0       	breq	.+4      	; 0x3238 <__floatsisf+0x48>
    3234:	96 e9       	ldi	r25, 0x96	; 150
    3236:	11 c0       	rjmp	.+34     	; 0x325a <__floatsisf+0x6a>
    3238:	77 23       	and	r23, r23
    323a:	21 f0       	breq	.+8      	; 0x3244 <__floatsisf+0x54>
    323c:	9e e8       	ldi	r25, 0x8E	; 142
    323e:	87 2f       	mov	r24, r23
    3240:	76 2f       	mov	r23, r22
    3242:	05 c0       	rjmp	.+10     	; 0x324e <__floatsisf+0x5e>
    3244:	66 23       	and	r22, r22
    3246:	71 f0       	breq	.+28     	; 0x3264 <__floatsisf+0x74>
    3248:	96 e8       	ldi	r25, 0x86	; 134
    324a:	86 2f       	mov	r24, r22
    324c:	70 e0       	ldi	r23, 0x00	; 0
    324e:	60 e0       	ldi	r22, 0x00	; 0
    3250:	2a f0       	brmi	.+10     	; 0x325c <__floatsisf+0x6c>
    3252:	9a 95       	dec	r25
    3254:	66 0f       	add	r22, r22
    3256:	77 1f       	adc	r23, r23
    3258:	88 1f       	adc	r24, r24
    325a:	da f7       	brpl	.-10     	; 0x3252 <__floatsisf+0x62>
    325c:	88 0f       	add	r24, r24
    325e:	96 95       	lsr	r25
    3260:	87 95       	ror	r24
    3262:	97 f9       	bld	r25, 7
    3264:	08 95       	ret

00003266 <__fp_cmp>:
    3266:	99 0f       	add	r25, r25
    3268:	00 08       	sbc	r0, r0
    326a:	55 0f       	add	r21, r21
    326c:	aa 0b       	sbc	r26, r26
    326e:	e0 e8       	ldi	r30, 0x80	; 128
    3270:	fe ef       	ldi	r31, 0xFE	; 254
    3272:	16 16       	cp	r1, r22
    3274:	17 06       	cpc	r1, r23
    3276:	e8 07       	cpc	r30, r24
    3278:	f9 07       	cpc	r31, r25
    327a:	c0 f0       	brcs	.+48     	; 0x32ac <__fp_cmp+0x46>
    327c:	12 16       	cp	r1, r18
    327e:	13 06       	cpc	r1, r19
    3280:	e4 07       	cpc	r30, r20
    3282:	f5 07       	cpc	r31, r21
    3284:	98 f0       	brcs	.+38     	; 0x32ac <__fp_cmp+0x46>
    3286:	62 1b       	sub	r22, r18
    3288:	73 0b       	sbc	r23, r19
    328a:	84 0b       	sbc	r24, r20
    328c:	95 0b       	sbc	r25, r21
    328e:	39 f4       	brne	.+14     	; 0x329e <__fp_cmp+0x38>
    3290:	0a 26       	eor	r0, r26
    3292:	61 f0       	breq	.+24     	; 0x32ac <__fp_cmp+0x46>
    3294:	23 2b       	or	r18, r19
    3296:	24 2b       	or	r18, r20
    3298:	25 2b       	or	r18, r21
    329a:	21 f4       	brne	.+8      	; 0x32a4 <__fp_cmp+0x3e>
    329c:	08 95       	ret
    329e:	0a 26       	eor	r0, r26
    32a0:	09 f4       	brne	.+2      	; 0x32a4 <__fp_cmp+0x3e>
    32a2:	a1 40       	sbci	r26, 0x01	; 1
    32a4:	a6 95       	lsr	r26
    32a6:	8f ef       	ldi	r24, 0xFF	; 255
    32a8:	81 1d       	adc	r24, r1
    32aa:	81 1d       	adc	r24, r1
    32ac:	08 95       	ret

000032ae <__fp_inf>:
    32ae:	97 f9       	bld	r25, 7
    32b0:	9f 67       	ori	r25, 0x7F	; 127
    32b2:	80 e8       	ldi	r24, 0x80	; 128
    32b4:	70 e0       	ldi	r23, 0x00	; 0
    32b6:	60 e0       	ldi	r22, 0x00	; 0
    32b8:	08 95       	ret

000032ba <__fp_nan>:
    32ba:	9f ef       	ldi	r25, 0xFF	; 255
    32bc:	80 ec       	ldi	r24, 0xC0	; 192
    32be:	08 95       	ret

000032c0 <__fp_pscA>:
    32c0:	00 24       	eor	r0, r0
    32c2:	0a 94       	dec	r0
    32c4:	16 16       	cp	r1, r22
    32c6:	17 06       	cpc	r1, r23
    32c8:	18 06       	cpc	r1, r24
    32ca:	09 06       	cpc	r0, r25
    32cc:	08 95       	ret

000032ce <__fp_pscB>:
    32ce:	00 24       	eor	r0, r0
    32d0:	0a 94       	dec	r0
    32d2:	12 16       	cp	r1, r18
    32d4:	13 06       	cpc	r1, r19
    32d6:	14 06       	cpc	r1, r20
    32d8:	05 06       	cpc	r0, r21
    32da:	08 95       	ret

000032dc <__fp_round>:
    32dc:	09 2e       	mov	r0, r25
    32de:	03 94       	inc	r0
    32e0:	00 0c       	add	r0, r0
    32e2:	11 f4       	brne	.+4      	; 0x32e8 <__fp_round+0xc>
    32e4:	88 23       	and	r24, r24
    32e6:	52 f0       	brmi	.+20     	; 0x32fc <__fp_round+0x20>
    32e8:	bb 0f       	add	r27, r27
    32ea:	40 f4       	brcc	.+16     	; 0x32fc <__fp_round+0x20>
    32ec:	bf 2b       	or	r27, r31
    32ee:	11 f4       	brne	.+4      	; 0x32f4 <__fp_round+0x18>
    32f0:	60 ff       	sbrs	r22, 0
    32f2:	04 c0       	rjmp	.+8      	; 0x32fc <__fp_round+0x20>
    32f4:	6f 5f       	subi	r22, 0xFF	; 255
    32f6:	7f 4f       	sbci	r23, 0xFF	; 255
    32f8:	8f 4f       	sbci	r24, 0xFF	; 255
    32fa:	9f 4f       	sbci	r25, 0xFF	; 255
    32fc:	08 95       	ret

000032fe <__fp_split3>:
    32fe:	57 fd       	sbrc	r21, 7
    3300:	90 58       	subi	r25, 0x80	; 128
    3302:	44 0f       	add	r20, r20
    3304:	55 1f       	adc	r21, r21
    3306:	59 f0       	breq	.+22     	; 0x331e <__fp_splitA+0x10>
    3308:	5f 3f       	cpi	r21, 0xFF	; 255
    330a:	71 f0       	breq	.+28     	; 0x3328 <__fp_splitA+0x1a>
    330c:	47 95       	ror	r20

0000330e <__fp_splitA>:
    330e:	88 0f       	add	r24, r24
    3310:	97 fb       	bst	r25, 7
    3312:	99 1f       	adc	r25, r25
    3314:	61 f0       	breq	.+24     	; 0x332e <__fp_splitA+0x20>
    3316:	9f 3f       	cpi	r25, 0xFF	; 255
    3318:	79 f0       	breq	.+30     	; 0x3338 <__fp_splitA+0x2a>
    331a:	87 95       	ror	r24
    331c:	08 95       	ret
    331e:	12 16       	cp	r1, r18
    3320:	13 06       	cpc	r1, r19
    3322:	14 06       	cpc	r1, r20
    3324:	55 1f       	adc	r21, r21
    3326:	f2 cf       	rjmp	.-28     	; 0x330c <__fp_split3+0xe>
    3328:	46 95       	lsr	r20
    332a:	f1 df       	rcall	.-30     	; 0x330e <__fp_splitA>
    332c:	08 c0       	rjmp	.+16     	; 0x333e <__fp_splitA+0x30>
    332e:	16 16       	cp	r1, r22
    3330:	17 06       	cpc	r1, r23
    3332:	18 06       	cpc	r1, r24
    3334:	99 1f       	adc	r25, r25
    3336:	f1 cf       	rjmp	.-30     	; 0x331a <__fp_splitA+0xc>
    3338:	86 95       	lsr	r24
    333a:	71 05       	cpc	r23, r1
    333c:	61 05       	cpc	r22, r1
    333e:	08 94       	sec
    3340:	08 95       	ret

00003342 <__fp_zero>:
    3342:	e8 94       	clt

00003344 <__fp_szero>:
    3344:	bb 27       	eor	r27, r27
    3346:	66 27       	eor	r22, r22
    3348:	77 27       	eor	r23, r23
    334a:	cb 01       	movw	r24, r22
    334c:	97 f9       	bld	r25, 7
    334e:	08 95       	ret

00003350 <__gesf2>:
    3350:	8a df       	rcall	.-236    	; 0x3266 <__fp_cmp>
    3352:	08 f4       	brcc	.+2      	; 0x3356 <__gesf2+0x6>
    3354:	8f ef       	ldi	r24, 0xFF	; 255
    3356:	08 95       	ret

00003358 <__mulsf3>:
    3358:	0b d0       	rcall	.+22     	; 0x3370 <__mulsf3x>
    335a:	c0 cf       	rjmp	.-128    	; 0x32dc <__fp_round>
    335c:	b1 df       	rcall	.-158    	; 0x32c0 <__fp_pscA>
    335e:	28 f0       	brcs	.+10     	; 0x336a <__mulsf3+0x12>
    3360:	b6 df       	rcall	.-148    	; 0x32ce <__fp_pscB>
    3362:	18 f0       	brcs	.+6      	; 0x336a <__mulsf3+0x12>
    3364:	95 23       	and	r25, r21
    3366:	09 f0       	breq	.+2      	; 0x336a <__mulsf3+0x12>
    3368:	a2 cf       	rjmp	.-188    	; 0x32ae <__fp_inf>
    336a:	a7 cf       	rjmp	.-178    	; 0x32ba <__fp_nan>
    336c:	11 24       	eor	r1, r1
    336e:	ea cf       	rjmp	.-44     	; 0x3344 <__fp_szero>

00003370 <__mulsf3x>:
    3370:	c6 df       	rcall	.-116    	; 0x32fe <__fp_split3>
    3372:	a0 f3       	brcs	.-24     	; 0x335c <__mulsf3+0x4>

00003374 <__mulsf3_pse>:
    3374:	95 9f       	mul	r25, r21
    3376:	d1 f3       	breq	.-12     	; 0x336c <__mulsf3+0x14>
    3378:	95 0f       	add	r25, r21
    337a:	50 e0       	ldi	r21, 0x00	; 0
    337c:	55 1f       	adc	r21, r21
    337e:	62 9f       	mul	r22, r18
    3380:	f0 01       	movw	r30, r0
    3382:	72 9f       	mul	r23, r18
    3384:	bb 27       	eor	r27, r27
    3386:	f0 0d       	add	r31, r0
    3388:	b1 1d       	adc	r27, r1
    338a:	63 9f       	mul	r22, r19
    338c:	aa 27       	eor	r26, r26
    338e:	f0 0d       	add	r31, r0
    3390:	b1 1d       	adc	r27, r1
    3392:	aa 1f       	adc	r26, r26
    3394:	64 9f       	mul	r22, r20
    3396:	66 27       	eor	r22, r22
    3398:	b0 0d       	add	r27, r0
    339a:	a1 1d       	adc	r26, r1
    339c:	66 1f       	adc	r22, r22
    339e:	82 9f       	mul	r24, r18
    33a0:	22 27       	eor	r18, r18
    33a2:	b0 0d       	add	r27, r0
    33a4:	a1 1d       	adc	r26, r1
    33a6:	62 1f       	adc	r22, r18
    33a8:	73 9f       	mul	r23, r19
    33aa:	b0 0d       	add	r27, r0
    33ac:	a1 1d       	adc	r26, r1
    33ae:	62 1f       	adc	r22, r18
    33b0:	83 9f       	mul	r24, r19
    33b2:	a0 0d       	add	r26, r0
    33b4:	61 1d       	adc	r22, r1
    33b6:	22 1f       	adc	r18, r18
    33b8:	74 9f       	mul	r23, r20
    33ba:	33 27       	eor	r19, r19
    33bc:	a0 0d       	add	r26, r0
    33be:	61 1d       	adc	r22, r1
    33c0:	23 1f       	adc	r18, r19
    33c2:	84 9f       	mul	r24, r20
    33c4:	60 0d       	add	r22, r0
    33c6:	21 1d       	adc	r18, r1
    33c8:	82 2f       	mov	r24, r18
    33ca:	76 2f       	mov	r23, r22
    33cc:	6a 2f       	mov	r22, r26
    33ce:	11 24       	eor	r1, r1
    33d0:	9f 57       	subi	r25, 0x7F	; 127
    33d2:	50 40       	sbci	r21, 0x00	; 0
    33d4:	8a f0       	brmi	.+34     	; 0x33f8 <__mulsf3_pse+0x84>
    33d6:	e1 f0       	breq	.+56     	; 0x3410 <__mulsf3_pse+0x9c>
    33d8:	88 23       	and	r24, r24
    33da:	4a f0       	brmi	.+18     	; 0x33ee <__mulsf3_pse+0x7a>
    33dc:	ee 0f       	add	r30, r30
    33de:	ff 1f       	adc	r31, r31
    33e0:	bb 1f       	adc	r27, r27
    33e2:	66 1f       	adc	r22, r22
    33e4:	77 1f       	adc	r23, r23
    33e6:	88 1f       	adc	r24, r24
    33e8:	91 50       	subi	r25, 0x01	; 1
    33ea:	50 40       	sbci	r21, 0x00	; 0
    33ec:	a9 f7       	brne	.-22     	; 0x33d8 <__mulsf3_pse+0x64>
    33ee:	9e 3f       	cpi	r25, 0xFE	; 254
    33f0:	51 05       	cpc	r21, r1
    33f2:	70 f0       	brcs	.+28     	; 0x3410 <__mulsf3_pse+0x9c>
    33f4:	5c cf       	rjmp	.-328    	; 0x32ae <__fp_inf>
    33f6:	a6 cf       	rjmp	.-180    	; 0x3344 <__fp_szero>
    33f8:	5f 3f       	cpi	r21, 0xFF	; 255
    33fa:	ec f3       	brlt	.-6      	; 0x33f6 <__mulsf3_pse+0x82>
    33fc:	98 3e       	cpi	r25, 0xE8	; 232
    33fe:	dc f3       	brlt	.-10     	; 0x33f6 <__mulsf3_pse+0x82>
    3400:	86 95       	lsr	r24
    3402:	77 95       	ror	r23
    3404:	67 95       	ror	r22
    3406:	b7 95       	ror	r27
    3408:	f7 95       	ror	r31
    340a:	e7 95       	ror	r30
    340c:	9f 5f       	subi	r25, 0xFF	; 255
    340e:	c1 f7       	brne	.-16     	; 0x3400 <__mulsf3_pse+0x8c>
    3410:	fe 2b       	or	r31, r30
    3412:	88 0f       	add	r24, r24
    3414:	91 1d       	adc	r25, r1
    3416:	96 95       	lsr	r25
    3418:	87 95       	ror	r24
    341a:	97 f9       	bld	r25, 7
    341c:	08 95       	ret

0000341e <__udivmodsi4>:
    341e:	a1 e2       	ldi	r26, 0x21	; 33
    3420:	1a 2e       	mov	r1, r26
    3422:	aa 1b       	sub	r26, r26
    3424:	bb 1b       	sub	r27, r27
    3426:	fd 01       	movw	r30, r26
    3428:	0d c0       	rjmp	.+26     	; 0x3444 <__udivmodsi4_ep>

0000342a <__udivmodsi4_loop>:
    342a:	aa 1f       	adc	r26, r26
    342c:	bb 1f       	adc	r27, r27
    342e:	ee 1f       	adc	r30, r30
    3430:	ff 1f       	adc	r31, r31
    3432:	a2 17       	cp	r26, r18
    3434:	b3 07       	cpc	r27, r19
    3436:	e4 07       	cpc	r30, r20
    3438:	f5 07       	cpc	r31, r21
    343a:	20 f0       	brcs	.+8      	; 0x3444 <__udivmodsi4_ep>
    343c:	a2 1b       	sub	r26, r18
    343e:	b3 0b       	sbc	r27, r19
    3440:	e4 0b       	sbc	r30, r20
    3442:	f5 0b       	sbc	r31, r21

00003444 <__udivmodsi4_ep>:
    3444:	66 1f       	adc	r22, r22
    3446:	77 1f       	adc	r23, r23
    3448:	88 1f       	adc	r24, r24
    344a:	99 1f       	adc	r25, r25
    344c:	1a 94       	dec	r1
    344e:	69 f7       	brne	.-38     	; 0x342a <__udivmodsi4_loop>
    3450:	60 95       	com	r22
    3452:	70 95       	com	r23
    3454:	80 95       	com	r24
    3456:	90 95       	com	r25
    3458:	9b 01       	movw	r18, r22
    345a:	ac 01       	movw	r20, r24
    345c:	bd 01       	movw	r22, r26
    345e:	cf 01       	movw	r24, r30
    3460:	08 95       	ret

00003462 <__umulhisi3>:
    3462:	a2 9f       	mul	r26, r18
    3464:	b0 01       	movw	r22, r0
    3466:	b3 9f       	mul	r27, r19
    3468:	c0 01       	movw	r24, r0
    346a:	a3 9f       	mul	r26, r19
    346c:	70 0d       	add	r23, r0
    346e:	81 1d       	adc	r24, r1
    3470:	11 24       	eor	r1, r1
    3472:	91 1d       	adc	r25, r1
    3474:	b2 9f       	mul	r27, r18
    3476:	70 0d       	add	r23, r0
    3478:	81 1d       	adc	r24, r1
    347a:	11 24       	eor	r1, r1
    347c:	91 1d       	adc	r25, r1
    347e:	08 95       	ret

00003480 <memcpy>:
    3480:	fb 01       	movw	r30, r22
    3482:	dc 01       	movw	r26, r24
    3484:	02 c0       	rjmp	.+4      	; 0x348a <memcpy+0xa>
    3486:	01 90       	ld	r0, Z+
    3488:	0d 92       	st	X+, r0
    348a:	41 50       	subi	r20, 0x01	; 1
    348c:	50 40       	sbci	r21, 0x00	; 0
    348e:	d8 f7       	brcc	.-10     	; 0x3486 <memcpy+0x6>
    3490:	08 95       	ret

00003492 <_exit>:
    3492:	f8 94       	cli

00003494 <__stop_program>:
    3494:	ff cf       	rjmp	.-2      	; 0x3494 <__stop_program>
