
blancher.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000026  00800200  000025f4  00002688  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000025f4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000707  00800226  00800226  000026ae  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000026ae  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000026e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000848  00000000  00000000  00002720  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000086c4  00000000  00000000  00002f68  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000250d  00000000  00000000  0000b62c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000076db  00000000  00000000  0000db39  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000015e4  00000000  00000000  00015214  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00017d18  00000000  00000000  000167f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000069ba  00000000  00000000  0002e510  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000858  00000000  00000000  00034eca  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000593e  00000000  00000000  00035722  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
       2:	00 00       	nop
       4:	90 c0       	rjmp	.+288    	; 0x126 <__bad_interrupt>
       6:	00 00       	nop
       8:	8e c0       	rjmp	.+284    	; 0x126 <__bad_interrupt>
       a:	00 00       	nop
       c:	8c c0       	rjmp	.+280    	; 0x126 <__bad_interrupt>
       e:	00 00       	nop
      10:	8a c0       	rjmp	.+276    	; 0x126 <__bad_interrupt>
      12:	00 00       	nop
      14:	88 c0       	rjmp	.+272    	; 0x126 <__bad_interrupt>
      16:	00 00       	nop
      18:	86 c0       	rjmp	.+268    	; 0x126 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	84 c0       	rjmp	.+264    	; 0x126 <__bad_interrupt>
      1e:	00 00       	nop
      20:	82 c0       	rjmp	.+260    	; 0x126 <__bad_interrupt>
      22:	00 00       	nop
      24:	80 c0       	rjmp	.+256    	; 0x126 <__bad_interrupt>
      26:	00 00       	nop
      28:	7e c0       	rjmp	.+252    	; 0x126 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7c c0       	rjmp	.+248    	; 0x126 <__bad_interrupt>
      2e:	00 00       	nop
      30:	0c 94 d8 10 	jmp	0x21b0	; 0x21b0 <__vector_12>
      34:	0c 94 b1 12 	jmp	0x2562	; 0x2562 <__vector_13>
      38:	76 c0       	rjmp	.+236    	; 0x126 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	74 c0       	rjmp	.+232    	; 0x126 <__bad_interrupt>
      3e:	00 00       	nop
      40:	72 c0       	rjmp	.+228    	; 0x126 <__bad_interrupt>
      42:	00 00       	nop
      44:	71 c0       	rjmp	.+226    	; 0x128 <__vector_17>
      46:	00 00       	nop
      48:	6e c0       	rjmp	.+220    	; 0x126 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6c c0       	rjmp	.+216    	; 0x126 <__bad_interrupt>
      4e:	00 00       	nop
      50:	6a c0       	rjmp	.+212    	; 0x126 <__bad_interrupt>
      52:	00 00       	nop
      54:	68 c0       	rjmp	.+208    	; 0x126 <__bad_interrupt>
      56:	00 00       	nop
      58:	66 c0       	rjmp	.+204    	; 0x126 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	64 c0       	rjmp	.+200    	; 0x126 <__bad_interrupt>
      5e:	00 00       	nop
      60:	62 c0       	rjmp	.+196    	; 0x126 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 44 0b 	jmp	0x1688	; 0x1688 <__vector_25>
      68:	0c 94 7d 0b 	jmp	0x16fa	; 0x16fa <__vector_26>
      6c:	5c c0       	rjmp	.+184    	; 0x126 <__bad_interrupt>
      6e:	00 00       	nop
      70:	5a c0       	rjmp	.+180    	; 0x126 <__bad_interrupt>
      72:	00 00       	nop
      74:	0c 94 e0 0a 	jmp	0x15c0	; 0x15c0 <__vector_29>
      78:	56 c0       	rjmp	.+172    	; 0x126 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	54 c0       	rjmp	.+168    	; 0x126 <__bad_interrupt>
      7e:	00 00       	nop
      80:	b9 c0       	rjmp	.+370    	; 0x1f4 <__vector_32>
      82:	00 00       	nop
      84:	50 c0       	rjmp	.+160    	; 0x126 <__bad_interrupt>
      86:	00 00       	nop
      88:	4e c0       	rjmp	.+156    	; 0x126 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	4c c0       	rjmp	.+152    	; 0x126 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 48 0c 	jmp	0x1890	; 0x1890 <__vector_36>
      94:	0c 94 81 0c 	jmp	0x1902	; 0x1902 <__vector_37>
      98:	46 c0       	rjmp	.+140    	; 0x126 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	44 c0       	rjmp	.+136    	; 0x126 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	42 c0       	rjmp	.+132    	; 0x126 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	40 c0       	rjmp	.+128    	; 0x126 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	0b c1       	rjmp	.+534    	; 0x2c0 <__vector_42>
      aa:	00 00       	nop
      ac:	3c c0       	rjmp	.+120    	; 0x126 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	3a c0       	rjmp	.+116    	; 0x126 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	38 c0       	rjmp	.+112    	; 0x126 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	36 c0       	rjmp	.+108    	; 0x126 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	67 c1       	rjmp	.+718    	; 0x38c <__vector_47>
      be:	00 00       	nop
      c0:	32 c0       	rjmp	.+100    	; 0x126 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	30 c0       	rjmp	.+96     	; 0x126 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	2e c0       	rjmp	.+92     	; 0x126 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 56 0d 	jmp	0x1aac	; 0x1aac <__vector_51>
      d0:	0c 94 8f 0d 	jmp	0x1b1e	; 0x1b1e <__vector_52>
      d4:	28 c0       	rjmp	.+80     	; 0x126 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 61 0e 	jmp	0x1cc2	; 0x1cc2 <__vector_54>
      dc:	0c 94 9a 0e 	jmp	0x1d34	; 0x1d34 <__vector_55>
      e0:	22 c0       	rjmp	.+68     	; 0x126 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e4 ef       	ldi	r30, 0xF4	; 244
      fc:	f5 e2       	ldi	r31, 0x25	; 37
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a6 32       	cpi	r26, 0x26	; 38
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	29 e0       	ldi	r18, 0x09	; 9
     110:	a6 e2       	ldi	r26, 0x26	; 38
     112:	b2 e0       	ldi	r27, 0x02	; 2
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	ad 32       	cpi	r26, 0x2D	; 45
     11a:	b2 07       	cpc	r27, r18
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <main>
     122:	0c 94 f8 12 	jmp	0x25f0	; 0x25f0 <_exit>

00000126 <__bad_interrupt>:
     126:	6c cf       	rjmp	.-296    	; 0x0 <__vectors>

00000128 <__vector_17>:
    return 1;// Setup done ok
}//timer_init

// intruptted service routine when we have rech the number of  Ticks On Encoder
ISR(TIMER1_COMPA_vect)
{
     128:	1f 92       	push	r1
     12a:	0f 92       	push	r0
     12c:	0f b6       	in	r0, 0x3f	; 63
     12e:	0f 92       	push	r0
     130:	11 24       	eor	r1, r1
     132:	0b b6       	in	r0, 0x3b	; 59
     134:	0f 92       	push	r0
     136:	cf 92       	push	r12
     138:	df 92       	push	r13
     13a:	ef 92       	push	r14
     13c:	ff 92       	push	r15
     13e:	0f 93       	push	r16
     140:	1f 93       	push	r17
     142:	2f 93       	push	r18
     144:	3f 93       	push	r19
     146:	4f 93       	push	r20
     148:	5f 93       	push	r21
     14a:	6f 93       	push	r22
     14c:	7f 93       	push	r23
     14e:	8f 93       	push	r24
     150:	9f 93       	push	r25
     152:	af 93       	push	r26
     154:	bf 93       	push	r27
     156:	ef 93       	push	r30
     158:	ff 93       	push	r31
	// get the time now
	g_Timer1_new_time = Get_millis();
     15a:	0e 94 a6 12 	call	0x254c	; 0x254c <Get_millis>
     15e:	8b 01       	movw	r16, r22
     160:	9c 01       	movw	r18, r24
     162:	60 93 ff 08 	sts	0x08FF, r22	; 0x8008ff <g_Timer1_new_time>
     166:	70 93 00 09 	sts	0x0900, r23	; 0x800900 <g_Timer1_new_time+0x1>
     16a:	80 93 01 09 	sts	0x0901, r24	; 0x800901 <g_Timer1_new_time+0x2>
     16e:	90 93 02 09 	sts	0x0902, r25	; 0x800902 <g_Timer1_new_time+0x3>
	// calculate the diff between now and last interrupt
	g_diff_time = g_Timer1_new_time - g_Timer1_old_time;
     172:	40 91 df 08 	lds	r20, 0x08DF	; 0x8008df <g_Timer1_old_time>
     176:	50 91 e0 08 	lds	r21, 0x08E0	; 0x8008e0 <g_Timer1_old_time+0x1>
     17a:	60 91 e1 08 	lds	r22, 0x08E1	; 0x8008e1 <g_Timer1_old_time+0x2>
     17e:	70 91 e2 08 	lds	r23, 0x08E2	; 0x8008e2 <g_Timer1_old_time+0x3>
     182:	68 01       	movw	r12, r16
     184:	79 01       	movw	r14, r18
     186:	c4 1a       	sub	r12, r20
     188:	d5 0a       	sbc	r13, r21
     18a:	e6 0a       	sbc	r14, r22
     18c:	f7 0a       	sbc	r15, r23
     18e:	c7 01       	movw	r24, r14
     190:	b6 01       	movw	r22, r12
     192:	c0 92 e7 08 	sts	0x08E7, r12	; 0x8008e7 <g_diff_time>
     196:	d0 92 e8 08 	sts	0x08E8, r13	; 0x8008e8 <g_diff_time+0x1>
     19a:	e0 92 e9 08 	sts	0x08E9, r14	; 0x8008e9 <g_diff_time+0x2>
     19e:	f0 92 ea 08 	sts	0x08EA, r15	; 0x8008ea <g_diff_time+0x3>
	// save the to the old time to next interrupt
	g_Timer1_old_time = g_Timer1_new_time;
     1a2:	00 93 df 08 	sts	0x08DF, r16	; 0x8008df <g_Timer1_old_time>
     1a6:	10 93 e0 08 	sts	0x08E0, r17	; 0x8008e0 <g_Timer1_old_time+0x1>
     1aa:	20 93 e1 08 	sts	0x08E1, r18	; 0x8008e1 <g_Timer1_old_time+0x2>
     1ae:	30 93 e2 08 	sts	0x08E2, r19	; 0x8008e2 <g_Timer1_old_time+0x3>
	//call back function on upper layer to get time
	g_timer1_config->isr_call_back(g_diff_time);
     1b2:	e0 91 f9 08 	lds	r30, 0x08F9	; 0x8008f9 <g_timer1_config>
     1b6:	f0 91 fa 08 	lds	r31, 0x08FA	; 0x8008fa <g_timer1_config+0x1>
     1ba:	02 80       	ldd	r0, Z+2	; 0x02
     1bc:	f3 81       	ldd	r31, Z+3	; 0x03
     1be:	e0 2d       	mov	r30, r0
     1c0:	19 95       	eicall
}
     1c2:	ff 91       	pop	r31
     1c4:	ef 91       	pop	r30
     1c6:	bf 91       	pop	r27
     1c8:	af 91       	pop	r26
     1ca:	9f 91       	pop	r25
     1cc:	8f 91       	pop	r24
     1ce:	7f 91       	pop	r23
     1d0:	6f 91       	pop	r22
     1d2:	5f 91       	pop	r21
     1d4:	4f 91       	pop	r20
     1d6:	3f 91       	pop	r19
     1d8:	2f 91       	pop	r18
     1da:	1f 91       	pop	r17
     1dc:	0f 91       	pop	r16
     1de:	ff 90       	pop	r15
     1e0:	ef 90       	pop	r14
     1e2:	df 90       	pop	r13
     1e4:	cf 90       	pop	r12
     1e6:	0f 90       	pop	r0
     1e8:	0b be       	out	0x3b, r0	; 59
     1ea:	0f 90       	pop	r0
     1ec:	0f be       	out	0x3f, r0	; 63
     1ee:	0f 90       	pop	r0
     1f0:	1f 90       	pop	r1
     1f2:	18 95       	reti

000001f4 <__vector_32>:
// intruptted service routine when we have rech the number of  Ticks On Encoder
ISR(TIMER3_COMPA_vect)
{
     1f4:	1f 92       	push	r1
     1f6:	0f 92       	push	r0
     1f8:	0f b6       	in	r0, 0x3f	; 63
     1fa:	0f 92       	push	r0
     1fc:	11 24       	eor	r1, r1
     1fe:	0b b6       	in	r0, 0x3b	; 59
     200:	0f 92       	push	r0
     202:	cf 92       	push	r12
     204:	df 92       	push	r13
     206:	ef 92       	push	r14
     208:	ff 92       	push	r15
     20a:	0f 93       	push	r16
     20c:	1f 93       	push	r17
     20e:	2f 93       	push	r18
     210:	3f 93       	push	r19
     212:	4f 93       	push	r20
     214:	5f 93       	push	r21
     216:	6f 93       	push	r22
     218:	7f 93       	push	r23
     21a:	8f 93       	push	r24
     21c:	9f 93       	push	r25
     21e:	af 93       	push	r26
     220:	bf 93       	push	r27
     222:	ef 93       	push	r30
     224:	ff 93       	push	r31
	// get the time now
	g_Timer3_new_time = Get_millis();
     226:	0e 94 a6 12 	call	0x254c	; 0x254c <Get_millis>
     22a:	8b 01       	movw	r16, r22
     22c:	9c 01       	movw	r18, r24
     22e:	60 93 f5 08 	sts	0x08F5, r22	; 0x8008f5 <g_Timer3_new_time>
     232:	70 93 f6 08 	sts	0x08F6, r23	; 0x8008f6 <g_Timer3_new_time+0x1>
     236:	80 93 f7 08 	sts	0x08F7, r24	; 0x8008f7 <g_Timer3_new_time+0x2>
     23a:	90 93 f8 08 	sts	0x08F8, r25	; 0x8008f8 <g_Timer3_new_time+0x3>
	// calculate the diff between now and last interrupt
	g_diff_time = g_Timer3_new_time - g_Timer3_old_time;
     23e:	40 91 d9 08 	lds	r20, 0x08D9	; 0x8008d9 <g_Timer3_old_time>
     242:	50 91 da 08 	lds	r21, 0x08DA	; 0x8008da <g_Timer3_old_time+0x1>
     246:	60 91 db 08 	lds	r22, 0x08DB	; 0x8008db <g_Timer3_old_time+0x2>
     24a:	70 91 dc 08 	lds	r23, 0x08DC	; 0x8008dc <g_Timer3_old_time+0x3>
     24e:	68 01       	movw	r12, r16
     250:	79 01       	movw	r14, r18
     252:	c4 1a       	sub	r12, r20
     254:	d5 0a       	sbc	r13, r21
     256:	e6 0a       	sbc	r14, r22
     258:	f7 0a       	sbc	r15, r23
     25a:	c7 01       	movw	r24, r14
     25c:	b6 01       	movw	r22, r12
     25e:	c0 92 e7 08 	sts	0x08E7, r12	; 0x8008e7 <g_diff_time>
     262:	d0 92 e8 08 	sts	0x08E8, r13	; 0x8008e8 <g_diff_time+0x1>
     266:	e0 92 e9 08 	sts	0x08E9, r14	; 0x8008e9 <g_diff_time+0x2>
     26a:	f0 92 ea 08 	sts	0x08EA, r15	; 0x8008ea <g_diff_time+0x3>
	// save the to the old time to next interrupt
	g_Timer3_old_time = g_Timer3_new_time;
     26e:	00 93 d9 08 	sts	0x08D9, r16	; 0x8008d9 <g_Timer3_old_time>
     272:	10 93 da 08 	sts	0x08DA, r17	; 0x8008da <g_Timer3_old_time+0x1>
     276:	20 93 db 08 	sts	0x08DB, r18	; 0x8008db <g_Timer3_old_time+0x2>
     27a:	30 93 dc 08 	sts	0x08DC, r19	; 0x8008dc <g_Timer3_old_time+0x3>
	//call back function on upper layer to get time
	g_timer3_config->isr_call_back(g_diff_time);
     27e:	e0 91 dd 08 	lds	r30, 0x08DD	; 0x8008dd <g_timer3_config>
     282:	f0 91 de 08 	lds	r31, 0x08DE	; 0x8008de <g_timer3_config+0x1>
     286:	02 80       	ldd	r0, Z+2	; 0x02
     288:	f3 81       	ldd	r31, Z+3	; 0x03
     28a:	e0 2d       	mov	r30, r0
     28c:	19 95       	eicall
}
     28e:	ff 91       	pop	r31
     290:	ef 91       	pop	r30
     292:	bf 91       	pop	r27
     294:	af 91       	pop	r26
     296:	9f 91       	pop	r25
     298:	8f 91       	pop	r24
     29a:	7f 91       	pop	r23
     29c:	6f 91       	pop	r22
     29e:	5f 91       	pop	r21
     2a0:	4f 91       	pop	r20
     2a2:	3f 91       	pop	r19
     2a4:	2f 91       	pop	r18
     2a6:	1f 91       	pop	r17
     2a8:	0f 91       	pop	r16
     2aa:	ff 90       	pop	r15
     2ac:	ef 90       	pop	r14
     2ae:	df 90       	pop	r13
     2b0:	cf 90       	pop	r12
     2b2:	0f 90       	pop	r0
     2b4:	0b be       	out	0x3b, r0	; 59
     2b6:	0f 90       	pop	r0
     2b8:	0f be       	out	0x3f, r0	; 63
     2ba:	0f 90       	pop	r0
     2bc:	1f 90       	pop	r1
     2be:	18 95       	reti

000002c0 <__vector_42>:
// intruptted service routine when we have rech the number of  Ticks On Encoder
ISR(TIMER4_COMPA_vect)
{
     2c0:	1f 92       	push	r1
     2c2:	0f 92       	push	r0
     2c4:	0f b6       	in	r0, 0x3f	; 63
     2c6:	0f 92       	push	r0
     2c8:	11 24       	eor	r1, r1
     2ca:	0b b6       	in	r0, 0x3b	; 59
     2cc:	0f 92       	push	r0
     2ce:	cf 92       	push	r12
     2d0:	df 92       	push	r13
     2d2:	ef 92       	push	r14
     2d4:	ff 92       	push	r15
     2d6:	0f 93       	push	r16
     2d8:	1f 93       	push	r17
     2da:	2f 93       	push	r18
     2dc:	3f 93       	push	r19
     2de:	4f 93       	push	r20
     2e0:	5f 93       	push	r21
     2e2:	6f 93       	push	r22
     2e4:	7f 93       	push	r23
     2e6:	8f 93       	push	r24
     2e8:	9f 93       	push	r25
     2ea:	af 93       	push	r26
     2ec:	bf 93       	push	r27
     2ee:	ef 93       	push	r30
     2f0:	ff 93       	push	r31
	// get the time now
	g_Timer4_new_time = Get_millis();
     2f2:	0e 94 a6 12 	call	0x254c	; 0x254c <Get_millis>
     2f6:	8b 01       	movw	r16, r22
     2f8:	9c 01       	movw	r18, r24
     2fa:	60 93 eb 08 	sts	0x08EB, r22	; 0x8008eb <g_Timer4_new_time>
     2fe:	70 93 ec 08 	sts	0x08EC, r23	; 0x8008ec <g_Timer4_new_time+0x1>
     302:	80 93 ed 08 	sts	0x08ED, r24	; 0x8008ed <g_Timer4_new_time+0x2>
     306:	90 93 ee 08 	sts	0x08EE, r25	; 0x8008ee <g_Timer4_new_time+0x3>
	// calculate the diff between now and last interrupt
	g_diff_time = g_Timer4_new_time - g_Timer4_old_time;
     30a:	40 91 fb 08 	lds	r20, 0x08FB	; 0x8008fb <g_Timer4_old_time>
     30e:	50 91 fc 08 	lds	r21, 0x08FC	; 0x8008fc <g_Timer4_old_time+0x1>
     312:	60 91 fd 08 	lds	r22, 0x08FD	; 0x8008fd <g_Timer4_old_time+0x2>
     316:	70 91 fe 08 	lds	r23, 0x08FE	; 0x8008fe <g_Timer4_old_time+0x3>
     31a:	68 01       	movw	r12, r16
     31c:	79 01       	movw	r14, r18
     31e:	c4 1a       	sub	r12, r20
     320:	d5 0a       	sbc	r13, r21
     322:	e6 0a       	sbc	r14, r22
     324:	f7 0a       	sbc	r15, r23
     326:	c7 01       	movw	r24, r14
     328:	b6 01       	movw	r22, r12
     32a:	c0 92 e7 08 	sts	0x08E7, r12	; 0x8008e7 <g_diff_time>
     32e:	d0 92 e8 08 	sts	0x08E8, r13	; 0x8008e8 <g_diff_time+0x1>
     332:	e0 92 e9 08 	sts	0x08E9, r14	; 0x8008e9 <g_diff_time+0x2>
     336:	f0 92 ea 08 	sts	0x08EA, r15	; 0x8008ea <g_diff_time+0x3>
	// save the to the old time to next interrupt
	g_Timer4_old_time = g_Timer4_new_time;
     33a:	00 93 fb 08 	sts	0x08FB, r16	; 0x8008fb <g_Timer4_old_time>
     33e:	10 93 fc 08 	sts	0x08FC, r17	; 0x8008fc <g_Timer4_old_time+0x1>
     342:	20 93 fd 08 	sts	0x08FD, r18	; 0x8008fd <g_Timer4_old_time+0x2>
     346:	30 93 fe 08 	sts	0x08FE, r19	; 0x8008fe <g_Timer4_old_time+0x3>
	//call back function on upper layer to get time
	g_timer4_config->isr_call_back(g_diff_time);
     34a:	e0 91 ef 08 	lds	r30, 0x08EF	; 0x8008ef <g_timer4_config>
     34e:	f0 91 f0 08 	lds	r31, 0x08F0	; 0x8008f0 <g_timer4_config+0x1>
     352:	02 80       	ldd	r0, Z+2	; 0x02
     354:	f3 81       	ldd	r31, Z+3	; 0x03
     356:	e0 2d       	mov	r30, r0
     358:	19 95       	eicall
}
     35a:	ff 91       	pop	r31
     35c:	ef 91       	pop	r30
     35e:	bf 91       	pop	r27
     360:	af 91       	pop	r26
     362:	9f 91       	pop	r25
     364:	8f 91       	pop	r24
     366:	7f 91       	pop	r23
     368:	6f 91       	pop	r22
     36a:	5f 91       	pop	r21
     36c:	4f 91       	pop	r20
     36e:	3f 91       	pop	r19
     370:	2f 91       	pop	r18
     372:	1f 91       	pop	r17
     374:	0f 91       	pop	r16
     376:	ff 90       	pop	r15
     378:	ef 90       	pop	r14
     37a:	df 90       	pop	r13
     37c:	cf 90       	pop	r12
     37e:	0f 90       	pop	r0
     380:	0b be       	out	0x3b, r0	; 59
     382:	0f 90       	pop	r0
     384:	0f be       	out	0x3f, r0	; 63
     386:	0f 90       	pop	r0
     388:	1f 90       	pop	r1
     38a:	18 95       	reti

0000038c <__vector_47>:
// intruptted service routine when we have rech the number of  Ticks On Encoder
ISR(TIMER5_COMPA_vect)
{
     38c:	1f 92       	push	r1
     38e:	0f 92       	push	r0
     390:	0f b6       	in	r0, 0x3f	; 63
     392:	0f 92       	push	r0
     394:	11 24       	eor	r1, r1
     396:	0b b6       	in	r0, 0x3b	; 59
     398:	0f 92       	push	r0
     39a:	2f 93       	push	r18
     39c:	3f 93       	push	r19
     39e:	4f 93       	push	r20
     3a0:	5f 93       	push	r21
     3a2:	6f 93       	push	r22
     3a4:	7f 93       	push	r23
     3a6:	8f 93       	push	r24
     3a8:	9f 93       	push	r25
     3aa:	af 93       	push	r26
     3ac:	bf 93       	push	r27
     3ae:	ef 93       	push	r30
     3b0:	ff 93       	push	r31
	// calculate the diff between now and last interrupt
	g_diff_time = g_Timer5_new_time - g_Timer5_old_time;
	// save the to the old time to next interrupt
	g_Timer5_old_time = g_Timer5_new_time;*/
	// clear the counter
	UART0_putc('a');
     3b2:	81 e6       	ldi	r24, 0x61	; 97
     3b4:	0e 94 06 0c 	call	0x180c	; 0x180c <UART0_putc>
	TIMER5_COUNT_L = 0;
     3b8:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <__TEXT_REGION_LENGTH__+0x700124>
	//call back function on upper layer to get time
	g_timer5_config->isr_call_back(g_diff_time);
     3bc:	60 91 e7 08 	lds	r22, 0x08E7	; 0x8008e7 <g_diff_time>
     3c0:	70 91 e8 08 	lds	r23, 0x08E8	; 0x8008e8 <g_diff_time+0x1>
     3c4:	80 91 e9 08 	lds	r24, 0x08E9	; 0x8008e9 <g_diff_time+0x2>
     3c8:	90 91 ea 08 	lds	r25, 0x08EA	; 0x8008ea <g_diff_time+0x3>
     3cc:	e0 91 03 09 	lds	r30, 0x0903	; 0x800903 <g_timer5_config>
     3d0:	f0 91 04 09 	lds	r31, 0x0904	; 0x800904 <g_timer5_config+0x1>
     3d4:	02 80       	ldd	r0, Z+2	; 0x02
     3d6:	f3 81       	ldd	r31, Z+3	; 0x03
     3d8:	e0 2d       	mov	r30, r0
     3da:	19 95       	eicall
	
}
     3dc:	ff 91       	pop	r31
     3de:	ef 91       	pop	r30
     3e0:	bf 91       	pop	r27
     3e2:	af 91       	pop	r26
     3e4:	9f 91       	pop	r25
     3e6:	8f 91       	pop	r24
     3e8:	7f 91       	pop	r23
     3ea:	6f 91       	pop	r22
     3ec:	5f 91       	pop	r21
     3ee:	4f 91       	pop	r20
     3f0:	3f 91       	pop	r19
     3f2:	2f 91       	pop	r18
     3f4:	0f 90       	pop	r0
     3f6:	0b be       	out	0x3b, r0	; 59
     3f8:	0f 90       	pop	r0
     3fa:	0f be       	out	0x3f, r0	; 63
     3fc:	0f 90       	pop	r0
     3fe:	1f 90       	pop	r1
     400:	18 95       	reti

00000402 <LCD_pre_transmission>:

//
void Lcd_Write(uint16_t address, uint16_t value){
	Modbus_Set_transmit_buffer(LCD,0, value);
    Modbus_Write_multiple_registers(LCD,address, 0x01);
}
     402:	61 e0       	ldi	r22, 0x01	; 1
     404:	80 e0       	ldi	r24, 0x00	; 0
     406:	0c 94 27 0b 	jmp	0x164e	; 0x164e <Modbus_change_state>
     40a:	08 95       	ret

0000040c <LCD_post_transmission>:
     40c:	60 e0       	ldi	r22, 0x00	; 0
     40e:	80 e0       	ldi	r24, 0x00	; 0
     410:	0c 94 27 0b 	jmp	0x164e	; 0x164e <Modbus_change_state>
     414:	08 95       	ret

00000416 <Lcd_init>:
     416:	e6 e2       	ldi	r30, 0x26	; 38
     418:	f2 e0       	ldi	r31, 0x02	; 2
     41a:	20 83       	st	Z, r18
     41c:	81 83       	std	Z+1, r24	; 0x01
     41e:	42 83       	std	Z+2, r20	; 0x02
     420:	53 83       	std	Z+3, r21	; 0x03
     422:	64 83       	std	Z+4, r22	; 0x04
     424:	75 83       	std	Z+5, r23	; 0x05
     426:	81 e0       	ldi	r24, 0x01	; 1
     428:	92 e0       	ldi	r25, 0x02	; 2
     42a:	97 83       	std	Z+7, r25	; 0x07
     42c:	86 83       	std	Z+6, r24	; 0x06
     42e:	86 e0       	ldi	r24, 0x06	; 6
     430:	92 e0       	ldi	r25, 0x02	; 2
     432:	91 87       	std	Z+9, r25	; 0x09
     434:	80 87       	std	Z+8, r24	; 0x08
     436:	bf 01       	movw	r22, r30
     438:	80 e0       	ldi	r24, 0x00	; 0
     43a:	d0 c6       	rjmp	.+3488   	; 0x11dc <Modbus_init>
     43c:	08 95       	ret

0000043e <Lcd_Read_multiple_data>:
 *
 *                    LCD Multiple Data functions 
 * 
************************************************************************************************************/

uint16_t Lcd_Read_multiple_data(uint16_t address ,uint16_t *pData,uint8_t QTY){
     43e:	ff 92       	push	r15
     440:	0f 93       	push	r16
     442:	1f 93       	push	r17
     444:	cf 93       	push	r28
     446:	df 93       	push	r29
     448:	f6 2e       	mov	r15, r22
     44a:	c7 2f       	mov	r28, r23
     44c:	d4 2f       	mov	r29, r20
	int err = Modbus_Read_holding_registers(LCD,address,QTY);
     44e:	50 e0       	ldi	r21, 0x00	; 0
     450:	bc 01       	movw	r22, r24
     452:	80 e0       	ldi	r24, 0x00	; 0
     454:	f5 d7       	rcall	.+4074   	; 0x1440 <Modbus_Read_holding_registers>
	if(err == 0){
     456:	81 11       	cpse	r24, r1
     458:	12 c0       	rjmp	.+36     	; 0x47e <Lcd_Read_multiple_data+0x40>
		for(uint8_t i=0; i<QTY;i++){
     45a:	dd 23       	and	r29, r29
     45c:	99 f0       	breq	.+38     	; 0x484 <Lcd_Read_multiple_data+0x46>
     45e:	0f 2d       	mov	r16, r15
     460:	1c 2f       	mov	r17, r28
     462:	c0 e0       	ldi	r28, 0x00	; 0
			(*(pData+i)) = Modbus_Get_response_buffer(LCD,i);
     464:	6c 2f       	mov	r22, r28
     466:	80 e0       	ldi	r24, 0x00	; 0
     468:	a7 d7       	rcall	.+3918   	; 0x13b8 <Modbus_Get_response_buffer>
     46a:	f8 01       	movw	r30, r16
     46c:	81 93       	st	Z+, r24
     46e:	91 93       	st	Z+, r25
     470:	8f 01       	movw	r16, r30
************************************************************************************************************/

uint16_t Lcd_Read_multiple_data(uint16_t address ,uint16_t *pData,uint8_t QTY){
	int err = Modbus_Read_holding_registers(LCD,address,QTY);
	if(err == 0){
		for(uint8_t i=0; i<QTY;i++){
     472:	cf 5f       	subi	r28, 0xFF	; 255
     474:	dc 13       	cpse	r29, r28
     476:	f6 cf       	rjmp	.-20     	; 0x464 <Lcd_Read_multiple_data+0x26>
			(*(pData+i)) = Modbus_Get_response_buffer(LCD,i);
		}
		return LCD_OK;	
     478:	80 e0       	ldi	r24, 0x00	; 0
     47a:	90 e0       	ldi	r25, 0x00	; 0
     47c:	05 c0       	rjmp	.+10     	; 0x488 <Lcd_Read_multiple_data+0x4a>
	}
	else {
		return LCD_READ_ERROR;
     47e:	89 e0       	ldi	r24, 0x09	; 9
     480:	90 e0       	ldi	r25, 0x00	; 0
     482:	02 c0       	rjmp	.+4      	; 0x488 <Lcd_Read_multiple_data+0x4a>
	int err = Modbus_Read_holding_registers(LCD,address,QTY);
	if(err == 0){
		for(uint8_t i=0; i<QTY;i++){
			(*(pData+i)) = Modbus_Get_response_buffer(LCD,i);
		}
		return LCD_OK;	
     484:	80 e0       	ldi	r24, 0x00	; 0
     486:	90 e0       	ldi	r25, 0x00	; 0
	}
	else {
		return LCD_READ_ERROR;
	}

}
     488:	df 91       	pop	r29
     48a:	cf 91       	pop	r28
     48c:	1f 91       	pop	r17
     48e:	0f 91       	pop	r16
     490:	ff 90       	pop	r15
     492:	08 95       	ret

00000494 <Lcd_Write_multiple_data>:

void Lcd_Write_multiple_data(uint16_t address ,uint16_t *pData,uint8_t QTY){
     494:	ef 92       	push	r14
     496:	ff 92       	push	r15
     498:	0f 93       	push	r16
     49a:	1f 93       	push	r17
     49c:	cf 93       	push	r28
     49e:	df 93       	push	r29
     4a0:	7c 01       	movw	r14, r24
     4a2:	d4 2f       	mov	r29, r20
	for(uint8_t i=0;i<QTY;i++){
     4a4:	44 23       	and	r20, r20
     4a6:	69 f0       	breq	.+26     	; 0x4c2 <Lcd_Write_multiple_data+0x2e>
     4a8:	06 2f       	mov	r16, r22
     4aa:	17 2f       	mov	r17, r23
     4ac:	c0 e0       	ldi	r28, 0x00	; 0
		Modbus_Set_transmit_buffer(LCD,i, (*(pData+i)));
     4ae:	f8 01       	movw	r30, r16
     4b0:	41 91       	ld	r20, Z+
     4b2:	51 91       	ld	r21, Z+
     4b4:	8f 01       	movw	r16, r30
     4b6:	6c 2f       	mov	r22, r28
     4b8:	80 e0       	ldi	r24, 0x00	; 0
     4ba:	a1 d7       	rcall	.+3906   	; 0x13fe <Modbus_Set_transmit_buffer>
	}

}

void Lcd_Write_multiple_data(uint16_t address ,uint16_t *pData,uint8_t QTY){
	for(uint8_t i=0;i<QTY;i++){
     4bc:	cf 5f       	subi	r28, 0xFF	; 255
     4be:	dc 13       	cpse	r29, r28
     4c0:	f6 cf       	rjmp	.-20     	; 0x4ae <Lcd_Write_multiple_data+0x1a>
		Modbus_Set_transmit_buffer(LCD,i, (*(pData+i)));
	}
	Modbus_Write_multiple_registers(LCD,address,QTY);
     4c2:	4d 2f       	mov	r20, r29
     4c4:	50 e0       	ldi	r21, 0x00	; 0
     4c6:	b7 01       	movw	r22, r14
     4c8:	80 e0       	ldi	r24, 0x00	; 0
     4ca:	d6 d7       	rcall	.+4012   	; 0x1478 <Modbus_Write_multiple_registers>
	
}
     4cc:	df 91       	pop	r29
     4ce:	cf 91       	pop	r28
     4d0:	1f 91       	pop	r17
     4d2:	0f 91       	pop	r16
     4d4:	ff 90       	pop	r15
     4d6:	ef 90       	pop	r14
     4d8:	08 95       	ret

000004da <Modbus_mster_transaction>:
		g_mod1_write_address = u16WriteAddress;
		g_mod1_write_qty = u16BitQty;
		return Modbus_mster_transaction(device, OUR_WRITE_MULTIPLE_COILS);
	}
	return INVALID_DEVICE; //error
}
     4da:	8f 92       	push	r8
     4dc:	9f 92       	push	r9
     4de:	af 92       	push	r10
     4e0:	bf 92       	push	r11
     4e2:	df 92       	push	r13
     4e4:	ef 92       	push	r14
     4e6:	ff 92       	push	r15
     4e8:	0f 93       	push	r16
     4ea:	1f 93       	push	r17
     4ec:	cf 93       	push	r28
     4ee:	df 93       	push	r29
     4f0:	cd b7       	in	r28, 0x3d	; 61
     4f2:	de b7       	in	r29, 0x3e	; 62
     4f4:	da 95       	dec	r29
     4f6:	0f b6       	in	r0, 0x3f	; 63
     4f8:	f8 94       	cli
     4fa:	de bf       	out	0x3e, r29	; 62
     4fc:	0f be       	out	0x3f, r0	; 63
     4fe:	cd bf       	out	0x3d, r28	; 61
     500:	d6 2e       	mov	r13, r22
     502:	81 11       	cpse	r24, r1
     504:	00 c3       	rjmp	.+1536   	; 0xb06 <Modbus_mster_transaction+0x62c>
     506:	80 91 66 04 	lds	r24, 0x0466	; 0x800466 <g_mod0_slave>
     50a:	89 83       	std	Y+1, r24	; 0x01
     50c:	2f ef       	ldi	r18, 0xFF	; 255
     50e:	62 13       	cpse	r22, r18
     510:	06 c0       	rjmp	.+12     	; 0x51e <Modbus_mster_transaction+0x44>
     512:	8f e0       	ldi	r24, 0x0F	; 15
     514:	8a 83       	std	Y+2, r24	; 0x02
     516:	68 94       	set
     518:	bb 24       	eor	r11, r11
     51a:	b1 f8       	bld	r11, 1
     51c:	32 c0       	rjmp	.+100    	; 0x582 <Modbus_mster_transaction+0xa8>
     51e:	6a 83       	std	Y+2, r22	; 0x02
     520:	81 e0       	ldi	r24, 0x01	; 1
     522:	68 17       	cp	r22, r24
     524:	b8 f0       	brcs	.+46     	; 0x554 <Modbus_mster_transaction+0x7a>
     526:	94 e0       	ldi	r25, 0x04	; 4
     528:	96 17       	cp	r25, r22
     52a:	18 f4       	brcc	.+6      	; 0x532 <Modbus_mster_transaction+0x58>
     52c:	a7 e1       	ldi	r26, 0x17	; 23
     52e:	6a 13       	cpse	r22, r26
     530:	11 c0       	rjmp	.+34     	; 0x554 <Modbus_mster_transaction+0x7a>
     532:	80 91 64 04 	lds	r24, 0x0464	; 0x800464 <g_mod0_read_address>
     536:	90 91 65 04 	lds	r25, 0x0465	; 0x800465 <g_mod0_read_address+0x1>
     53a:	9b 83       	std	Y+3, r25	; 0x03
     53c:	8c 83       	std	Y+4, r24	; 0x04
     53e:	80 91 62 04 	lds	r24, 0x0462	; 0x800462 <g_mod0_read_qty>
     542:	90 91 63 04 	lds	r25, 0x0463	; 0x800463 <g_mod0_read_qty+0x1>
     546:	9d 83       	std	Y+5, r25	; 0x05
     548:	8e 83       	std	Y+6, r24	; 0x06
     54a:	0f 2e       	mov	r0, r31
     54c:	f6 e0       	ldi	r31, 0x06	; 6
     54e:	bf 2e       	mov	r11, r31
     550:	f0 2d       	mov	r31, r0
     552:	03 c0       	rjmp	.+6      	; 0x55a <Modbus_mster_transaction+0x80>
     554:	68 94       	set
     556:	bb 24       	eor	r11, r11
     558:	b1 f8       	bld	r11, 1
     55a:	b0 e1       	ldi	r27, 0x10	; 16
     55c:	bd 15       	cp	r27, r13
     55e:	40 f0       	brcs	.+16     	; 0x570 <Modbus_mster_transaction+0x96>
     560:	ef e0       	ldi	r30, 0x0F	; 15
     562:	de 16       	cp	r13, r30
     564:	70 f4       	brcc	.+28     	; 0x582 <Modbus_mster_transaction+0xa8>
     566:	8b ef       	ldi	r24, 0xFB	; 251
     568:	8d 0d       	add	r24, r13
     56a:	82 30       	cpi	r24, 0x02	; 2
     56c:	00 f5       	brcc	.+64     	; 0x5ae <Modbus_mster_transaction+0xd4>
     56e:	09 c0       	rjmp	.+18     	; 0x582 <Modbus_mster_transaction+0xa8>
     570:	f6 e1       	ldi	r31, 0x16	; 22
     572:	df 16       	cp	r13, r31
     574:	e0 f0       	brcs	.+56     	; 0x5ae <Modbus_mster_transaction+0xd4>
     576:	27 e1       	ldi	r18, 0x17	; 23
     578:	2d 15       	cp	r18, r13
     57a:	18 f4       	brcc	.+6      	; 0x582 <Modbus_mster_transaction+0xa8>
     57c:	8f ef       	ldi	r24, 0xFF	; 255
     57e:	d8 12       	cpse	r13, r24
     580:	16 c0       	rjmp	.+44     	; 0x5ae <Modbus_mster_transaction+0xd4>
     582:	90 91 e0 03 	lds	r25, 0x03E0	; 0x8003e0 <g_mod0_write_address>
     586:	80 91 e1 03 	lds	r24, 0x03E1	; 0x8003e1 <g_mod0_write_address+0x1>
     58a:	e1 e0       	ldi	r30, 0x01	; 1
     58c:	f0 e0       	ldi	r31, 0x00	; 0
     58e:	ec 0f       	add	r30, r28
     590:	fd 1f       	adc	r31, r29
     592:	eb 0d       	add	r30, r11
     594:	f1 1d       	adc	r31, r1
     596:	80 83       	st	Z, r24
     598:	81 e0       	ldi	r24, 0x01	; 1
     59a:	8b 0d       	add	r24, r11
     59c:	e1 e0       	ldi	r30, 0x01	; 1
     59e:	f0 e0       	ldi	r31, 0x00	; 0
     5a0:	ec 0f       	add	r30, r28
     5a2:	fd 1f       	adc	r31, r29
     5a4:	e8 0f       	add	r30, r24
     5a6:	f1 1d       	adc	r31, r1
     5a8:	b3 94       	inc	r11
     5aa:	b3 94       	inc	r11
     5ac:	90 83       	st	Z, r25
     5ae:	90 e1       	ldi	r25, 0x10	; 16
     5b0:	d9 16       	cp	r13, r25
     5b2:	09 f4       	brne	.+2      	; 0x5b6 <Modbus_mster_transaction+0xdc>
     5b4:	ad c0       	rjmp	.+346    	; 0x710 <Modbus_mster_transaction+0x236>
     5b6:	9d 15       	cp	r25, r13
     5b8:	58 f0       	brcs	.+22     	; 0x5d0 <Modbus_mster_transaction+0xf6>
     5ba:	a6 e0       	ldi	r26, 0x06	; 6
     5bc:	da 16       	cp	r13, r26
     5be:	61 f1       	breq	.+88     	; 0x618 <Modbus_mster_transaction+0x13e>
     5c0:	bf e0       	ldi	r27, 0x0F	; 15
     5c2:	db 16       	cp	r13, r27
     5c4:	09 f4       	brne	.+2      	; 0x5c8 <Modbus_mster_transaction+0xee>
     5c6:	41 c0       	rjmp	.+130    	; 0x64a <Modbus_mster_transaction+0x170>
     5c8:	e5 e0       	ldi	r30, 0x05	; 5
     5ca:	de 12       	cpse	r13, r30
     5cc:	1a c1       	rjmp	.+564    	; 0x802 <Modbus_mster_transaction+0x328>
     5ce:	0d c0       	rjmp	.+26     	; 0x5ea <Modbus_mster_transaction+0x110>
     5d0:	f7 e1       	ldi	r31, 0x17	; 23
     5d2:	df 16       	cp	r13, r31
     5d4:	09 f4       	brne	.+2      	; 0x5d8 <Modbus_mster_transaction+0xfe>
     5d6:	9c c0       	rjmp	.+312    	; 0x710 <Modbus_mster_transaction+0x236>
     5d8:	2f ef       	ldi	r18, 0xFF	; 255
     5da:	d2 16       	cp	r13, r18
     5dc:	09 f4       	brne	.+2      	; 0x5e0 <Modbus_mster_transaction+0x106>
     5de:	98 c0       	rjmp	.+304    	; 0x710 <Modbus_mster_transaction+0x236>
     5e0:	86 e1       	ldi	r24, 0x16	; 22
     5e2:	d8 16       	cp	r13, r24
     5e4:	09 f4       	brne	.+2      	; 0x5e8 <Modbus_mster_transaction+0x10e>
     5e6:	df c0       	rjmp	.+446    	; 0x7a6 <Modbus_mster_transaction+0x2cc>
     5e8:	0c c1       	rjmp	.+536    	; 0x802 <Modbus_mster_transaction+0x328>
     5ea:	90 91 de 03 	lds	r25, 0x03DE	; 0x8003de <g_mod0_write_qty>
     5ee:	80 91 df 03 	lds	r24, 0x03DF	; 0x8003df <g_mod0_write_qty+0x1>
     5f2:	e1 e0       	ldi	r30, 0x01	; 1
     5f4:	f0 e0       	ldi	r31, 0x00	; 0
     5f6:	ec 0f       	add	r30, r28
     5f8:	fd 1f       	adc	r31, r29
     5fa:	eb 0d       	add	r30, r11
     5fc:	f1 1d       	adc	r31, r1
     5fe:	80 83       	st	Z, r24
     600:	81 e0       	ldi	r24, 0x01	; 1
     602:	8b 0d       	add	r24, r11
     604:	e1 e0       	ldi	r30, 0x01	; 1
     606:	f0 e0       	ldi	r31, 0x00	; 0
     608:	ec 0f       	add	r30, r28
     60a:	fd 1f       	adc	r31, r29
     60c:	e8 0f       	add	r30, r24
     60e:	f1 1d       	adc	r31, r1
     610:	b3 94       	inc	r11
     612:	b3 94       	inc	r11
     614:	90 83       	st	Z, r25
     616:	f5 c0       	rjmp	.+490    	; 0x802 <Modbus_mster_transaction+0x328>
     618:	ee e5       	ldi	r30, 0x5E	; 94
     61a:	f3 e0       	ldi	r31, 0x03	; 3
     61c:	80 81       	ld	r24, Z
     61e:	91 81       	ldd	r25, Z+1	; 0x01
     620:	a1 e0       	ldi	r26, 0x01	; 1
     622:	b0 e0       	ldi	r27, 0x00	; 0
     624:	ac 0f       	add	r26, r28
     626:	bd 1f       	adc	r27, r29
     628:	ab 0d       	add	r26, r11
     62a:	b1 1d       	adc	r27, r1
     62c:	9c 93       	st	X, r25
     62e:	20 81       	ld	r18, Z
     630:	31 81       	ldd	r19, Z+1	; 0x01
     632:	81 e0       	ldi	r24, 0x01	; 1
     634:	8b 0d       	add	r24, r11
     636:	e1 e0       	ldi	r30, 0x01	; 1
     638:	f0 e0       	ldi	r31, 0x00	; 0
     63a:	ec 0f       	add	r30, r28
     63c:	fd 1f       	adc	r31, r29
     63e:	e8 0f       	add	r30, r24
     640:	f1 1d       	adc	r31, r1
     642:	b3 94       	inc	r11
     644:	b3 94       	inc	r11
     646:	20 83       	st	Z, r18
     648:	dc c0       	rjmp	.+440    	; 0x802 <Modbus_mster_transaction+0x328>
     64a:	80 91 de 03 	lds	r24, 0x03DE	; 0x8003de <g_mod0_write_qty>
     64e:	90 91 df 03 	lds	r25, 0x03DF	; 0x8003df <g_mod0_write_qty+0x1>
     652:	e1 e0       	ldi	r30, 0x01	; 1
     654:	f0 e0       	ldi	r31, 0x00	; 0
     656:	ec 0f       	add	r30, r28
     658:	fd 1f       	adc	r31, r29
     65a:	eb 0d       	add	r30, r11
     65c:	f1 1d       	adc	r31, r1
     65e:	90 83       	st	Z, r25
     660:	32 e0       	ldi	r19, 0x02	; 2
     662:	3b 0d       	add	r19, r11
     664:	21 e0       	ldi	r18, 0x01	; 1
     666:	2b 0d       	add	r18, r11
     668:	e1 e0       	ldi	r30, 0x01	; 1
     66a:	f0 e0       	ldi	r31, 0x00	; 0
     66c:	ec 0f       	add	r30, r28
     66e:	fd 1f       	adc	r31, r29
     670:	e2 0f       	add	r30, r18
     672:	f1 1d       	adc	r31, r1
     674:	80 83       	st	Z, r24
     676:	ac 01       	movw	r20, r24
     678:	47 70       	andi	r20, 0x07	; 7
     67a:	55 27       	eor	r21, r21
     67c:	45 2b       	or	r20, r21
     67e:	49 f0       	breq	.+18     	; 0x692 <Modbus_mster_transaction+0x1b8>
     680:	96 95       	lsr	r25
     682:	87 95       	ror	r24
     684:	96 95       	lsr	r25
     686:	87 95       	ror	r24
     688:	96 95       	lsr	r25
     68a:	87 95       	ror	r24
     68c:	21 e0       	ldi	r18, 0x01	; 1
     68e:	28 0f       	add	r18, r24
     690:	07 c0       	rjmp	.+14     	; 0x6a0 <Modbus_mster_transaction+0x1c6>
     692:	96 95       	lsr	r25
     694:	87 95       	ror	r24
     696:	96 95       	lsr	r25
     698:	87 95       	ror	r24
     69a:	96 95       	lsr	r25
     69c:	87 95       	ror	r24
     69e:	28 2f       	mov	r18, r24
     6a0:	93 e0       	ldi	r25, 0x03	; 3
     6a2:	b9 0e       	add	r11, r25
     6a4:	fe 01       	movw	r30, r28
     6a6:	e3 0f       	add	r30, r19
     6a8:	f1 1d       	adc	r31, r1
     6aa:	21 83       	std	Z+1, r18	; 0x01
     6ac:	22 23       	and	r18, r18
     6ae:	09 f4       	brne	.+2      	; 0x6b2 <Modbus_mster_transaction+0x1d8>
     6b0:	a8 c0       	rjmp	.+336    	; 0x802 <Modbus_mster_transaction+0x328>
     6b2:	80 e0       	ldi	r24, 0x00	; 0
     6b4:	98 2f       	mov	r25, r24
     6b6:	91 70       	andi	r25, 0x01	; 1
     6b8:	80 ff       	sbrs	r24, 0
     6ba:	03 c0       	rjmp	.+6      	; 0x6c2 <Modbus_mster_transaction+0x1e8>
     6bc:	91 30       	cpi	r25, 0x01	; 1
     6be:	99 f0       	breq	.+38     	; 0x6e6 <Modbus_mster_transaction+0x20c>
     6c0:	23 c0       	rjmp	.+70     	; 0x708 <Modbus_mster_transaction+0x22e>
     6c2:	e8 2f       	mov	r30, r24
     6c4:	e6 95       	lsr	r30
     6c6:	f0 e0       	ldi	r31, 0x00	; 0
     6c8:	ee 0f       	add	r30, r30
     6ca:	ff 1f       	adc	r31, r31
     6cc:	e2 5a       	subi	r30, 0xA2	; 162
     6ce:	fc 4f       	sbci	r31, 0xFC	; 252
     6d0:	40 81       	ld	r20, Z
     6d2:	51 81       	ldd	r21, Z+1	; 0x01
     6d4:	e1 e0       	ldi	r30, 0x01	; 1
     6d6:	f0 e0       	ldi	r31, 0x00	; 0
     6d8:	ec 0f       	add	r30, r28
     6da:	fd 1f       	adc	r31, r29
     6dc:	eb 0d       	add	r30, r11
     6de:	f1 1d       	adc	r31, r1
     6e0:	40 83       	st	Z, r20
     6e2:	b3 94       	inc	r11
     6e4:	11 c0       	rjmp	.+34     	; 0x708 <Modbus_mster_transaction+0x22e>
     6e6:	e8 2f       	mov	r30, r24
     6e8:	e6 95       	lsr	r30
     6ea:	f0 e0       	ldi	r31, 0x00	; 0
     6ec:	ee 0f       	add	r30, r30
     6ee:	ff 1f       	adc	r31, r31
     6f0:	e2 5a       	subi	r30, 0xA2	; 162
     6f2:	fc 4f       	sbci	r31, 0xFC	; 252
     6f4:	40 81       	ld	r20, Z
     6f6:	51 81       	ldd	r21, Z+1	; 0x01
     6f8:	e1 e0       	ldi	r30, 0x01	; 1
     6fa:	f0 e0       	ldi	r31, 0x00	; 0
     6fc:	ec 0f       	add	r30, r28
     6fe:	fd 1f       	adc	r31, r29
     700:	eb 0d       	add	r30, r11
     702:	f1 1d       	adc	r31, r1
     704:	50 83       	st	Z, r21
     706:	b3 94       	inc	r11
     708:	8f 5f       	subi	r24, 0xFF	; 255
     70a:	28 13       	cpse	r18, r24
     70c:	d3 cf       	rjmp	.-90     	; 0x6b4 <Modbus_mster_transaction+0x1da>
     70e:	79 c0       	rjmp	.+242    	; 0x802 <Modbus_mster_transaction+0x328>
     710:	60 91 de 03 	lds	r22, 0x03DE	; 0x8003de <g_mod0_write_qty>
     714:	70 91 df 03 	lds	r23, 0x03DF	; 0x8003df <g_mod0_write_qty+0x1>
     718:	e1 e0       	ldi	r30, 0x01	; 1
     71a:	f0 e0       	ldi	r31, 0x00	; 0
     71c:	ec 0f       	add	r30, r28
     71e:	fd 1f       	adc	r31, r29
     720:	eb 0d       	add	r30, r11
     722:	f1 1d       	adc	r31, r1
     724:	70 83       	st	Z, r23
     726:	81 e0       	ldi	r24, 0x01	; 1
     728:	8b 0d       	add	r24, r11
     72a:	e1 e0       	ldi	r30, 0x01	; 1
     72c:	f0 e0       	ldi	r31, 0x00	; 0
     72e:	ec 0f       	add	r30, r28
     730:	fd 1f       	adc	r31, r29
     732:	e8 0f       	add	r30, r24
     734:	f1 1d       	adc	r31, r1
     736:	60 83       	st	Z, r22
     738:	82 e0       	ldi	r24, 0x02	; 2
     73a:	8b 0d       	add	r24, r11
     73c:	e1 e0       	ldi	r30, 0x01	; 1
     73e:	f0 e0       	ldi	r31, 0x00	; 0
     740:	ec 0f       	add	r30, r28
     742:	fd 1f       	adc	r31, r29
     744:	e8 0f       	add	r30, r24
     746:	f1 1d       	adc	r31, r1
     748:	a3 e0       	ldi	r26, 0x03	; 3
     74a:	ba 0e       	add	r11, r26
     74c:	86 2f       	mov	r24, r22
     74e:	88 0f       	add	r24, r24
     750:	80 83       	st	Z, r24
     752:	77 27       	eor	r23, r23
     754:	16 16       	cp	r1, r22
     756:	17 06       	cpc	r1, r23
     758:	0c f0       	brlt	.+2      	; 0x75c <Modbus_mster_transaction+0x282>
     75a:	53 c0       	rjmp	.+166    	; 0x802 <Modbus_mster_transaction+0x328>
     75c:	80 e0       	ldi	r24, 0x00	; 0
     75e:	90 e0       	ldi	r25, 0x00	; 0
     760:	20 e0       	ldi	r18, 0x00	; 0
     762:	88 0f       	add	r24, r24
     764:	99 1f       	adc	r25, r25
     766:	fc 01       	movw	r30, r24
     768:	e2 5a       	subi	r30, 0xA2	; 162
     76a:	fc 4f       	sbci	r31, 0xFC	; 252
     76c:	80 81       	ld	r24, Z
     76e:	91 81       	ldd	r25, Z+1	; 0x01
     770:	a1 e0       	ldi	r26, 0x01	; 1
     772:	b0 e0       	ldi	r27, 0x00	; 0
     774:	ac 0f       	add	r26, r28
     776:	bd 1f       	adc	r27, r29
     778:	ab 0d       	add	r26, r11
     77a:	b1 1d       	adc	r27, r1
     77c:	9c 93       	st	X, r25
     77e:	40 81       	ld	r20, Z
     780:	51 81       	ldd	r21, Z+1	; 0x01
     782:	81 e0       	ldi	r24, 0x01	; 1
     784:	8b 0d       	add	r24, r11
     786:	e1 e0       	ldi	r30, 0x01	; 1
     788:	f0 e0       	ldi	r31, 0x00	; 0
     78a:	ec 0f       	add	r30, r28
     78c:	fd 1f       	adc	r31, r29
     78e:	e8 0f       	add	r30, r24
     790:	f1 1d       	adc	r31, r1
     792:	b3 94       	inc	r11
     794:	b3 94       	inc	r11
     796:	40 83       	st	Z, r20
     798:	2f 5f       	subi	r18, 0xFF	; 255
     79a:	82 2f       	mov	r24, r18
     79c:	90 e0       	ldi	r25, 0x00	; 0
     79e:	86 17       	cp	r24, r22
     7a0:	97 07       	cpc	r25, r23
     7a2:	fc f2       	brlt	.-66     	; 0x762 <Modbus_mster_transaction+0x288>
     7a4:	2e c0       	rjmp	.+92     	; 0x802 <Modbus_mster_transaction+0x328>
     7a6:	ee e5       	ldi	r30, 0x5E	; 94
     7a8:	f3 e0       	ldi	r31, 0x03	; 3
     7aa:	80 81       	ld	r24, Z
     7ac:	91 81       	ldd	r25, Z+1	; 0x01
     7ae:	a1 e0       	ldi	r26, 0x01	; 1
     7b0:	b0 e0       	ldi	r27, 0x00	; 0
     7b2:	ac 0f       	add	r26, r28
     7b4:	bd 1f       	adc	r27, r29
     7b6:	ab 0d       	add	r26, r11
     7b8:	b1 1d       	adc	r27, r1
     7ba:	9c 93       	st	X, r25
     7bc:	80 81       	ld	r24, Z
     7be:	91 81       	ldd	r25, Z+1	; 0x01
     7c0:	91 e0       	ldi	r25, 0x01	; 1
     7c2:	9b 0d       	add	r25, r11
     7c4:	a1 e0       	ldi	r26, 0x01	; 1
     7c6:	b0 e0       	ldi	r27, 0x00	; 0
     7c8:	ac 0f       	add	r26, r28
     7ca:	bd 1f       	adc	r27, r29
     7cc:	a9 0f       	add	r26, r25
     7ce:	b1 1d       	adc	r27, r1
     7d0:	8c 93       	st	X, r24
     7d2:	82 81       	ldd	r24, Z+2	; 0x02
     7d4:	93 81       	ldd	r25, Z+3	; 0x03
     7d6:	82 e0       	ldi	r24, 0x02	; 2
     7d8:	8b 0d       	add	r24, r11
     7da:	a1 e0       	ldi	r26, 0x01	; 1
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	ac 0f       	add	r26, r28
     7e0:	bd 1f       	adc	r27, r29
     7e2:	a8 0f       	add	r26, r24
     7e4:	b1 1d       	adc	r27, r1
     7e6:	9c 93       	st	X, r25
     7e8:	22 81       	ldd	r18, Z+2	; 0x02
     7ea:	33 81       	ldd	r19, Z+3	; 0x03
     7ec:	83 e0       	ldi	r24, 0x03	; 3
     7ee:	8b 0d       	add	r24, r11
     7f0:	e1 e0       	ldi	r30, 0x01	; 1
     7f2:	f0 e0       	ldi	r31, 0x00	; 0
     7f4:	ec 0f       	add	r30, r28
     7f6:	fd 1f       	adc	r31, r29
     7f8:	e8 0f       	add	r30, r24
     7fa:	f1 1d       	adc	r31, r1
     7fc:	b4 e0       	ldi	r27, 0x04	; 4
     7fe:	bb 0e       	add	r11, r27
     800:	20 83       	st	Z, r18
     802:	bb 20       	and	r11, r11
     804:	b9 f0       	breq	.+46     	; 0x834 <Modbus_mster_transaction+0x35a>
     806:	8e 01       	movw	r16, r28
     808:	0f 5f       	subi	r16, 0xFF	; 255
     80a:	1f 4f       	sbci	r17, 0xFF	; 255
     80c:	ee 24       	eor	r14, r14
     80e:	ea 94       	dec	r14
     810:	eb 0c       	add	r14, r11
     812:	f1 2c       	mov	r15, r1
     814:	ef ef       	ldi	r30, 0xFF	; 255
     816:	ee 1a       	sub	r14, r30
     818:	fe 0a       	sbc	r15, r30
     81a:	e0 0e       	add	r14, r16
     81c:	f1 1e       	adc	r15, r17
     81e:	8f ef       	ldi	r24, 0xFF	; 255
     820:	9f ef       	ldi	r25, 0xFF	; 255
     822:	d8 01       	movw	r26, r16
     824:	6d 91       	ld	r22, X+
     826:	8d 01       	movw	r16, r26
     828:	0e 94 85 12 	call	0x250a	; 0x250a <crc16_update>
     82c:	0e 15       	cp	r16, r14
     82e:	1f 05       	cpc	r17, r15
     830:	c1 f7       	brne	.-16     	; 0x822 <Modbus_mster_transaction+0x348>
     832:	02 c0       	rjmp	.+4      	; 0x838 <Modbus_mster_transaction+0x35e>
     834:	8f ef       	ldi	r24, 0xFF	; 255
     836:	9f ef       	ldi	r25, 0xFF	; 255
     838:	ee 24       	eor	r14, r14
     83a:	e3 94       	inc	r14
     83c:	eb 0c       	add	r14, r11
     83e:	e1 e0       	ldi	r30, 0x01	; 1
     840:	f0 e0       	ldi	r31, 0x00	; 0
     842:	ec 0f       	add	r30, r28
     844:	fd 1f       	adc	r31, r29
     846:	eb 0d       	add	r30, r11
     848:	f1 1d       	adc	r31, r1
     84a:	80 83       	st	Z, r24
     84c:	b3 94       	inc	r11
     84e:	b3 94       	inc	r11
     850:	e1 e0       	ldi	r30, 0x01	; 1
     852:	f0 e0       	ldi	r31, 0x00	; 0
     854:	ec 0f       	add	r30, r28
     856:	fd 1f       	adc	r31, r29
     858:	ee 0d       	add	r30, r14
     85a:	f1 1d       	adc	r31, r1
     85c:	90 83       	st	Z, r25
     85e:	e1 e0       	ldi	r30, 0x01	; 1
     860:	f0 e0       	ldi	r31, 0x00	; 0
     862:	ec 0f       	add	r30, r28
     864:	fd 1f       	adc	r31, r29
     866:	eb 0d       	add	r30, r11
     868:	f1 1d       	adc	r31, r1
     86a:	10 82       	st	Z, r1
     86c:	e0 91 51 03 	lds	r30, 0x0351	; 0x800351 <g_mod0_Serial_getc>
     870:	f0 91 52 03 	lds	r31, 0x0352	; 0x800352 <g_mod0_Serial_getc+0x1>
     874:	19 95       	eicall
     876:	81 15       	cp	r24, r1
     878:	91 40       	sbci	r25, 0x01	; 1
     87a:	c1 f7       	brne	.-16     	; 0x86c <Modbus_mster_transaction+0x392>
     87c:	e0 91 57 03 	lds	r30, 0x0357	; 0x800357 <g_mod0_pre_transmission>
     880:	f0 91 58 03 	lds	r31, 0x0358	; 0x800358 <g_mod0_pre_transmission+0x1>
     884:	30 97       	sbiw	r30, 0x00	; 0
     886:	09 f0       	breq	.+2      	; 0x88a <Modbus_mster_transaction+0x3b0>
     888:	19 95       	eicall
     88a:	bb 20       	and	r11, r11
     88c:	a1 f0       	breq	.+40     	; 0x8b6 <Modbus_mster_transaction+0x3dc>
     88e:	8e 01       	movw	r16, r28
     890:	0f 5f       	subi	r16, 0xFF	; 255
     892:	1f 4f       	sbci	r17, 0xFF	; 255
     894:	f1 2c       	mov	r15, r1
     896:	ef ef       	ldi	r30, 0xFF	; 255
     898:	ee 1a       	sub	r14, r30
     89a:	fe 0a       	sbc	r15, r30
     89c:	e0 0e       	add	r14, r16
     89e:	f1 1e       	adc	r15, r17
     8a0:	e0 91 53 03 	lds	r30, 0x0353	; 0x800353 <g_mod0_Serial_putc>
     8a4:	f0 91 54 03 	lds	r31, 0x0354	; 0x800354 <g_mod0_Serial_putc+0x1>
     8a8:	d8 01       	movw	r26, r16
     8aa:	8d 91       	ld	r24, X+
     8ac:	8d 01       	movw	r16, r26
     8ae:	19 95       	eicall
     8b0:	0e 15       	cp	r16, r14
     8b2:	1f 05       	cpc	r17, r15
     8b4:	a9 f7       	brne	.-22     	; 0x8a0 <Modbus_mster_transaction+0x3c6>
     8b6:	e0 91 4f 03 	lds	r30, 0x034F	; 0x80034f <g_mod0_Serial_flush>
     8ba:	f0 91 50 03 	lds	r31, 0x0350	; 0x800350 <g_mod0_Serial_flush+0x1>
     8be:	19 95       	eicall
     8c0:	ef e8       	ldi	r30, 0x8F	; 143
     8c2:	f1 e0       	ldi	r31, 0x01	; 1
     8c4:	31 97       	sbiw	r30, 0x01	; 1
     8c6:	f1 f7       	brne	.-4      	; 0x8c4 <Modbus_mster_transaction+0x3ea>
     8c8:	00 c0       	rjmp	.+0      	; 0x8ca <Modbus_mster_transaction+0x3f0>
     8ca:	00 00       	nop
     8cc:	e0 91 55 03 	lds	r30, 0x0355	; 0x800355 <g_mod0_post_transmission>
     8d0:	f0 91 56 03 	lds	r31, 0x0356	; 0x800356 <g_mod0_post_transmission+0x1>
     8d4:	30 97       	sbiw	r30, 0x00	; 0
     8d6:	09 f0       	breq	.+2      	; 0x8da <Modbus_mster_transaction+0x400>
     8d8:	19 95       	eicall
     8da:	ff ef       	ldi	r31, 0xFF	; 255
     8dc:	23 ed       	ldi	r18, 0xD3	; 211
     8de:	80 e3       	ldi	r24, 0x30	; 48
     8e0:	f1 50       	subi	r31, 0x01	; 1
     8e2:	20 40       	sbci	r18, 0x00	; 0
     8e4:	80 40       	sbci	r24, 0x00	; 0
     8e6:	e1 f7       	brne	.-8      	; 0x8e0 <Modbus_mster_transaction+0x406>
     8e8:	00 c0       	rjmp	.+0      	; 0x8ea <Modbus_mster_transaction+0x410>
     8ea:	00 00       	nop
     8ec:	0e 94 a6 12 	call	0x254c	; 0x254c <Get_millis>
     8f0:	4b 01       	movw	r8, r22
     8f2:	5c 01       	movw	r10, r24
     8f4:	08 e0       	ldi	r16, 0x08	; 8
     8f6:	10 e0       	ldi	r17, 0x00	; 0
     8f8:	ed 2c       	mov	r14, r13
     8fa:	f1 2c       	mov	r15, r1
     8fc:	e0 91 4d 03 	lds	r30, 0x034D	; 0x80034d <g_mod0_Serial_available>
     900:	f0 91 4e 03 	lds	r31, 0x034E	; 0x80034e <g_mod0_Serial_available+0x1>
     904:	19 95       	eicall
     906:	89 2b       	or	r24, r25
     908:	91 f0       	breq	.+36     	; 0x92e <Modbus_mster_transaction+0x454>
     90a:	dd 24       	eor	r13, r13
     90c:	d3 94       	inc	r13
     90e:	d1 0e       	add	r13, r17
     910:	e0 91 51 03 	lds	r30, 0x0351	; 0x800351 <g_mod0_Serial_getc>
     914:	f0 91 52 03 	lds	r31, 0x0352	; 0x800352 <g_mod0_Serial_getc+0x1>
     918:	19 95       	eicall
     91a:	e1 e0       	ldi	r30, 0x01	; 1
     91c:	f0 e0       	ldi	r31, 0x00	; 0
     91e:	ec 0f       	add	r30, r28
     920:	fd 1f       	adc	r31, r29
     922:	e1 0f       	add	r30, r17
     924:	f1 1d       	adc	r31, r1
     926:	80 83       	st	Z, r24
     928:	01 50       	subi	r16, 0x01	; 1
     92a:	1d 2d       	mov	r17, r13
     92c:	07 c0       	rjmp	.+14     	; 0x93c <Modbus_mster_transaction+0x462>
     92e:	e0 91 59 03 	lds	r30, 0x0359	; 0x800359 <g_mod0_idle>
     932:	f0 91 5a 03 	lds	r31, 0x035A	; 0x80035a <g_mod0_idle+0x1>
     936:	30 97       	sbiw	r30, 0x00	; 0
     938:	09 f0       	breq	.+2      	; 0x93c <Modbus_mster_transaction+0x462>
     93a:	19 95       	eicall
     93c:	15 30       	cpi	r17, 0x05	; 5
     93e:	59 f5       	brne	.+86     	; 0x996 <Modbus_mster_transaction+0x4bc>
     940:	99 81       	ldd	r25, Y+1	; 0x01
     942:	80 91 66 04 	lds	r24, 0x0466	; 0x800466 <g_mod0_slave>
     946:	98 13       	cpse	r25, r24
     948:	2b c4       	rjmp	.+2134   	; 0x11a0 <Modbus_mster_transaction+0xcc6>
     94a:	8a 81       	ldd	r24, Y+2	; 0x02
     94c:	28 2f       	mov	r18, r24
     94e:	2f 77       	andi	r18, 0x7F	; 127
     950:	30 e0       	ldi	r19, 0x00	; 0
     952:	2e 15       	cp	r18, r14
     954:	3f 05       	cpc	r19, r15
     956:	09 f0       	breq	.+2      	; 0x95a <Modbus_mster_transaction+0x480>
     958:	25 c4       	rjmp	.+2122   	; 0x11a4 <Modbus_mster_transaction+0xcca>
     95a:	88 23       	and	r24, r24
     95c:	2c f4       	brge	.+10     	; 0x968 <Modbus_mster_transaction+0x48e>
     95e:	8b 81       	ldd	r24, Y+3	; 0x03
     960:	88 23       	and	r24, r24
     962:	09 f4       	brne	.+2      	; 0x966 <Modbus_mster_transaction+0x48c>
     964:	3d c0       	rjmp	.+122    	; 0x9e0 <Modbus_mster_transaction+0x506>
     966:	ca c0       	rjmp	.+404    	; 0xafc <Modbus_mster_transaction+0x622>
     968:	81 31       	cpi	r24, 0x11	; 17
     96a:	58 f4       	brcc	.+22     	; 0x982 <Modbus_mster_transaction+0x4a8>
     96c:	8f 30       	cpi	r24, 0x0F	; 15
     96e:	08 f0       	brcs	.+2      	; 0x972 <Modbus_mster_transaction+0x498>
     970:	b5 c3       	rjmp	.+1898   	; 0x10dc <Modbus_mster_transaction+0xc02>
     972:	81 30       	cpi	r24, 0x01	; 1
     974:	80 f0       	brcs	.+32     	; 0x996 <Modbus_mster_transaction+0x4bc>
     976:	85 30       	cpi	r24, 0x05	; 5
     978:	68 f0       	brcs	.+26     	; 0x994 <Modbus_mster_transaction+0x4ba>
     97a:	87 30       	cpi	r24, 0x07	; 7
     97c:	08 f4       	brcc	.+2      	; 0x980 <Modbus_mster_transaction+0x4a6>
     97e:	ae c3       	rjmp	.+1884   	; 0x10dc <Modbus_mster_transaction+0xc02>
     980:	0a c0       	rjmp	.+20     	; 0x996 <Modbus_mster_transaction+0x4bc>
     982:	87 31       	cpi	r24, 0x17	; 23
     984:	39 f0       	breq	.+14     	; 0x994 <Modbus_mster_transaction+0x4ba>
     986:	8f 3f       	cpi	r24, 0xFF	; 255
     988:	09 f4       	brne	.+2      	; 0x98c <Modbus_mster_transaction+0x4b2>
     98a:	a8 c3       	rjmp	.+1872   	; 0x10dc <Modbus_mster_transaction+0xc02>
     98c:	86 31       	cpi	r24, 0x16	; 22
     98e:	19 f4       	brne	.+6      	; 0x996 <Modbus_mster_transaction+0x4bc>
     990:	05 e0       	ldi	r16, 0x05	; 5
     992:	a5 c3       	rjmp	.+1866   	; 0x10de <Modbus_mster_transaction+0xc04>
     994:	0b 81       	ldd	r16, Y+3	; 0x03
     996:	0e 94 a6 12 	call	0x254c	; 0x254c <Get_millis>
     99a:	dc 01       	movw	r26, r24
     99c:	cb 01       	movw	r24, r22
     99e:	88 19       	sub	r24, r8
     9a0:	99 09       	sbc	r25, r9
     9a2:	aa 09       	sbc	r26, r10
     9a4:	bb 09       	sbc	r27, r11
     9a6:	81 3d       	cpi	r24, 0xD1	; 209
     9a8:	97 40       	sbci	r25, 0x07	; 7
     9aa:	a1 05       	cpc	r26, r1
     9ac:	b1 05       	cpc	r27, r1
     9ae:	08 f4       	brcc	.+2      	; 0x9b2 <Modbus_mster_transaction+0x4d8>
     9b0:	eb c3       	rjmp	.+2006   	; 0x1188 <Modbus_mster_transaction+0xcae>
     9b2:	80 e0       	ldi	r24, 0x00	; 0
     9b4:	92 e0       	ldi	r25, 0x02	; 2
     9b6:	5e d7       	rcall	.+3772   	; 0x1874 <UART0_puts>
     9b8:	8a e0       	ldi	r24, 0x0A	; 10
     9ba:	28 d7       	rcall	.+3664   	; 0x180c <UART0_putc>
     9bc:	01 11       	cpse	r16, r1
     9be:	f4 c3       	rjmp	.+2024   	; 0x11a8 <Modbus_mster_transaction+0xcce>
     9c0:	82 ee       	ldi	r24, 0xE2	; 226
     9c2:	81 11       	cpse	r24, r1
     9c4:	9b c0       	rjmp	.+310    	; 0xafc <Modbus_mster_transaction+0x622>
     9c6:	15 30       	cpi	r17, 0x05	; 5
     9c8:	08 f4       	brcc	.+2      	; 0x9cc <Modbus_mster_transaction+0x4f2>
     9ca:	a9 c3       	rjmp	.+1874   	; 0x111e <Modbus_mster_transaction+0xc44>
     9cc:	a1 2e       	mov	r10, r17
     9ce:	b1 2c       	mov	r11, r1
     9d0:	75 01       	movw	r14, r10
     9d2:	f2 e0       	ldi	r31, 0x02	; 2
     9d4:	ef 1a       	sub	r14, r31
     9d6:	f1 08       	sbc	r15, r1
     9d8:	1e 14       	cp	r1, r14
     9da:	1f 04       	cpc	r1, r15
     9dc:	5c f0       	brlt	.+22     	; 0x9f4 <Modbus_mster_transaction+0x51a>
     9de:	8e c3       	rjmp	.+1820   	; 0x10fc <Modbus_mster_transaction+0xc22>
     9e0:	0f 2e       	mov	r0, r31
     9e2:	f3 e0       	ldi	r31, 0x03	; 3
     9e4:	ef 2e       	mov	r14, r31
     9e6:	f1 2c       	mov	r15, r1
     9e8:	f0 2d       	mov	r31, r0
     9ea:	0f 2e       	mov	r0, r31
     9ec:	f5 e0       	ldi	r31, 0x05	; 5
     9ee:	af 2e       	mov	r10, r31
     9f0:	b1 2c       	mov	r11, r1
     9f2:	f0 2d       	mov	r31, r0
     9f4:	20 e0       	ldi	r18, 0x00	; 0
     9f6:	30 e0       	ldi	r19, 0x00	; 0
     9f8:	8f ef       	ldi	r24, 0xFF	; 255
     9fa:	9f ef       	ldi	r25, 0xFF	; 255
     9fc:	10 e0       	ldi	r17, 0x00	; 0
     9fe:	e1 e0       	ldi	r30, 0x01	; 1
     a00:	f0 e0       	ldi	r31, 0x00	; 0
     a02:	ec 0f       	add	r30, r28
     a04:	fd 1f       	adc	r31, r29
     a06:	e2 0f       	add	r30, r18
     a08:	f3 1f       	adc	r31, r19
     a0a:	60 81       	ld	r22, Z
     a0c:	0e 94 85 12 	call	0x250a	; 0x250a <crc16_update>
     a10:	1f 5f       	subi	r17, 0xFF	; 255
     a12:	21 2f       	mov	r18, r17
     a14:	30 e0       	ldi	r19, 0x00	; 0
     a16:	2e 15       	cp	r18, r14
     a18:	3f 05       	cpc	r19, r15
     a1a:	8c f3       	brlt	.-30     	; 0x9fe <Modbus_mster_transaction+0x524>
     a1c:	71 c3       	rjmp	.+1762   	; 0x1100 <Modbus_mster_transaction+0xc26>
     a1e:	89 2f       	mov	r24, r25
     a20:	99 27       	eor	r25, r25
     a22:	fe 01       	movw	r30, r28
     a24:	ea 0d       	add	r30, r10
     a26:	fb 1d       	adc	r31, r11
     a28:	20 81       	ld	r18, Z
     a2a:	30 e0       	ldi	r19, 0x00	; 0
     a2c:	82 17       	cp	r24, r18
     a2e:	93 07       	cpc	r25, r19
     a30:	09 f0       	breq	.+2      	; 0xa34 <Modbus_mster_transaction+0x55a>
     a32:	73 c3       	rjmp	.+1766   	; 0x111a <Modbus_mster_transaction+0xc40>
     a34:	74 c3       	rjmp	.+1768   	; 0x111e <Modbus_mster_transaction+0xc44>
     a36:	9b 81       	ldd	r25, Y+3	; 0x03
     a38:	96 95       	lsr	r25
     a3a:	e9 f5       	brne	.+122    	; 0xab6 <Modbus_mster_transaction+0x5dc>
     a3c:	80 e0       	ldi	r24, 0x00	; 0
     a3e:	5e c0       	rjmp	.+188    	; 0xafc <Modbus_mster_transaction+0x622>
     a40:	7b 81       	ldd	r23, Y+3	; 0x03
     a42:	97 2f       	mov	r25, r23
     a44:	96 95       	lsr	r25
     a46:	09 f4       	brne	.+2      	; 0xa4a <Modbus_mster_transaction+0x570>
     a48:	78 c3       	rjmp	.+1776   	; 0x113a <Modbus_mster_transaction+0xc60>
     a4a:	fe 01       	movw	r30, r28
     a4c:	31 96       	adiw	r30, 0x01	; 1
     a4e:	40 e0       	ldi	r20, 0x00	; 0
     a50:	50 e0       	ldi	r21, 0x00	; 0
     a52:	80 e0       	ldi	r24, 0x00	; 0
     a54:	80 34       	cpi	r24, 0x40	; 64
     a56:	70 f4       	brcc	.+28     	; 0xa74 <Modbus_mster_transaction+0x59a>
     a58:	24 81       	ldd	r18, Z+4	; 0x04
     a5a:	30 e0       	ldi	r19, 0x00	; 0
     a5c:	32 2f       	mov	r19, r18
     a5e:	22 27       	eor	r18, r18
     a60:	63 81       	ldd	r22, Z+3	; 0x03
     a62:	26 2b       	or	r18, r22
     a64:	da 01       	movw	r26, r20
     a66:	aa 0f       	add	r26, r26
     a68:	bb 1f       	adc	r27, r27
     a6a:	ae 51       	subi	r26, 0x1E	; 30
     a6c:	bc 4f       	sbci	r27, 0xFC	; 252
     a6e:	11 96       	adiw	r26, 0x01	; 1
     a70:	3c 93       	st	X, r19
     a72:	2e 93       	st	-X, r18
     a74:	8f 5f       	subi	r24, 0xFF	; 255
     a76:	4f 5f       	subi	r20, 0xFF	; 255
     a78:	5f 4f       	sbci	r21, 0xFF	; 255
     a7a:	32 96       	adiw	r30, 0x02	; 2
     a7c:	89 13       	cpse	r24, r25
     a7e:	ea cf       	rjmp	.-44     	; 0xa54 <Modbus_mster_transaction+0x57a>
     a80:	8f ef       	ldi	r24, 0xFF	; 255
     a82:	89 0f       	add	r24, r25
     a84:	80 93 5b 03 	sts	0x035B, r24	; 0x80035b <g_mod0_response_buffer_length>
     a88:	70 ff       	sbrs	r23, 0
     a8a:	35 c0       	rjmp	.+106    	; 0xaf6 <Modbus_mster_transaction+0x61c>
     a8c:	90 34       	cpi	r25, 0x40	; 64
     a8e:	70 f4       	brcc	.+28     	; 0xaac <Modbus_mster_transaction+0x5d2>
     a90:	29 2f       	mov	r18, r25
     a92:	30 e0       	ldi	r19, 0x00	; 0
     a94:	22 0f       	add	r18, r18
     a96:	33 1f       	adc	r19, r19
     a98:	fe 01       	movw	r30, r28
     a9a:	e2 0f       	add	r30, r18
     a9c:	f3 1f       	adc	r31, r19
     a9e:	44 81       	ldd	r20, Z+4	; 0x04
     aa0:	50 e0       	ldi	r21, 0x00	; 0
     aa2:	f9 01       	movw	r30, r18
     aa4:	ee 51       	subi	r30, 0x1E	; 30
     aa6:	fc 4f       	sbci	r31, 0xFC	; 252
     aa8:	51 83       	std	Z+1, r21	; 0x01
     aaa:	40 83       	st	Z, r20
     aac:	9f 5f       	subi	r25, 0xFF	; 255
     aae:	90 93 5b 03 	sts	0x035B, r25	; 0x80035b <g_mod0_response_buffer_length>
     ab2:	80 e0       	ldi	r24, 0x00	; 0
     ab4:	23 c0       	rjmp	.+70     	; 0xafc <Modbus_mster_transaction+0x622>
     ab6:	fe 01       	movw	r30, r28
     ab8:	31 96       	adiw	r30, 0x01	; 1
     aba:	40 e0       	ldi	r20, 0x00	; 0
     abc:	50 e0       	ldi	r21, 0x00	; 0
     abe:	80 e0       	ldi	r24, 0x00	; 0
     ac0:	80 34       	cpi	r24, 0x40	; 64
     ac2:	70 f4       	brcc	.+28     	; 0xae0 <Modbus_mster_transaction+0x606>
     ac4:	23 81       	ldd	r18, Z+3	; 0x03
     ac6:	30 e0       	ldi	r19, 0x00	; 0
     ac8:	32 2f       	mov	r19, r18
     aca:	22 27       	eor	r18, r18
     acc:	64 81       	ldd	r22, Z+4	; 0x04
     ace:	26 2b       	or	r18, r22
     ad0:	da 01       	movw	r26, r20
     ad2:	aa 0f       	add	r26, r26
     ad4:	bb 1f       	adc	r27, r27
     ad6:	ae 51       	subi	r26, 0x1E	; 30
     ad8:	bc 4f       	sbci	r27, 0xFC	; 252
     ada:	11 96       	adiw	r26, 0x01	; 1
     adc:	3c 93       	st	X, r19
     ade:	2e 93       	st	-X, r18
     ae0:	8f 5f       	subi	r24, 0xFF	; 255
     ae2:	4f 5f       	subi	r20, 0xFF	; 255
     ae4:	5f 4f       	sbci	r21, 0xFF	; 255
     ae6:	32 96       	adiw	r30, 0x02	; 2
     ae8:	89 13       	cpse	r24, r25
     aea:	ea cf       	rjmp	.-44     	; 0xac0 <Modbus_mster_transaction+0x5e6>
     aec:	91 50       	subi	r25, 0x01	; 1
     aee:	90 93 5b 03 	sts	0x035B, r25	; 0x80035b <g_mod0_response_buffer_length>
     af2:	80 e0       	ldi	r24, 0x00	; 0
     af4:	03 c0       	rjmp	.+6      	; 0xafc <Modbus_mster_transaction+0x622>
     af6:	80 e0       	ldi	r24, 0x00	; 0
     af8:	01 c0       	rjmp	.+2      	; 0xafc <Modbus_mster_transaction+0x622>
     afa:	80 e0       	ldi	r24, 0x00	; 0
     afc:	10 92 5d 03 	sts	0x035D, r1	; 0x80035d <g_mod0_transmit_buffer_index>
     b00:	10 92 5c 03 	sts	0x035C, r1	; 0x80035c <g_mod0_response_buffer_index>
     b04:	59 c3       	rjmp	.+1714   	; 0x11b8 <Modbus_mster_transaction+0xcde>
     b06:	81 30       	cpi	r24, 0x01	; 1
     b08:	09 f0       	breq	.+2      	; 0xb0c <Modbus_mster_transaction+0x632>
     b0a:	e6 c2       	rjmp	.+1484   	; 0x10d8 <Modbus_mster_transaction+0xbfe>
     b0c:	80 91 4c 03 	lds	r24, 0x034C	; 0x80034c <g_mod1_slave>
     b10:	89 83       	std	Y+1, r24	; 0x01
     b12:	2f ef       	ldi	r18, 0xFF	; 255
     b14:	62 13       	cpse	r22, r18
     b16:	06 c0       	rjmp	.+12     	; 0xb24 <Modbus_mster_transaction+0x64a>
     b18:	8f e0       	ldi	r24, 0x0F	; 15
     b1a:	8a 83       	std	Y+2, r24	; 0x02
     b1c:	68 94       	set
     b1e:	bb 24       	eor	r11, r11
     b20:	b1 f8       	bld	r11, 1
     b22:	32 c0       	rjmp	.+100    	; 0xb88 <Modbus_mster_transaction+0x6ae>
     b24:	6a 83       	std	Y+2, r22	; 0x02
     b26:	81 e0       	ldi	r24, 0x01	; 1
     b28:	68 17       	cp	r22, r24
     b2a:	b8 f0       	brcs	.+46     	; 0xb5a <Modbus_mster_transaction+0x680>
     b2c:	94 e0       	ldi	r25, 0x04	; 4
     b2e:	96 17       	cp	r25, r22
     b30:	18 f4       	brcc	.+6      	; 0xb38 <Modbus_mster_transaction+0x65e>
     b32:	a7 e1       	ldi	r26, 0x17	; 23
     b34:	6a 13       	cpse	r22, r26
     b36:	11 c0       	rjmp	.+34     	; 0xb5a <Modbus_mster_transaction+0x680>
     b38:	80 91 4a 03 	lds	r24, 0x034A	; 0x80034a <g_mod1_read_address>
     b3c:	90 91 4b 03 	lds	r25, 0x034B	; 0x80034b <g_mod1_read_address+0x1>
     b40:	9b 83       	std	Y+3, r25	; 0x03
     b42:	8c 83       	std	Y+4, r24	; 0x04
     b44:	80 91 48 03 	lds	r24, 0x0348	; 0x800348 <g_mod1_read_qty>
     b48:	90 91 49 03 	lds	r25, 0x0349	; 0x800349 <g_mod1_read_qty+0x1>
     b4c:	9d 83       	std	Y+5, r25	; 0x05
     b4e:	8e 83       	std	Y+6, r24	; 0x06
     b50:	0f 2e       	mov	r0, r31
     b52:	f6 e0       	ldi	r31, 0x06	; 6
     b54:	bf 2e       	mov	r11, r31
     b56:	f0 2d       	mov	r31, r0
     b58:	03 c0       	rjmp	.+6      	; 0xb60 <Modbus_mster_transaction+0x686>
     b5a:	68 94       	set
     b5c:	bb 24       	eor	r11, r11
     b5e:	b1 f8       	bld	r11, 1
     b60:	b0 e1       	ldi	r27, 0x10	; 16
     b62:	bd 15       	cp	r27, r13
     b64:	40 f0       	brcs	.+16     	; 0xb76 <Modbus_mster_transaction+0x69c>
     b66:	ef e0       	ldi	r30, 0x0F	; 15
     b68:	de 16       	cp	r13, r30
     b6a:	70 f4       	brcc	.+28     	; 0xb88 <Modbus_mster_transaction+0x6ae>
     b6c:	8b ef       	ldi	r24, 0xFB	; 251
     b6e:	8d 0d       	add	r24, r13
     b70:	82 30       	cpi	r24, 0x02	; 2
     b72:	00 f5       	brcc	.+64     	; 0xbb4 <Modbus_mster_transaction+0x6da>
     b74:	09 c0       	rjmp	.+18     	; 0xb88 <Modbus_mster_transaction+0x6ae>
     b76:	f6 e1       	ldi	r31, 0x16	; 22
     b78:	df 16       	cp	r13, r31
     b7a:	e0 f0       	brcs	.+56     	; 0xbb4 <Modbus_mster_transaction+0x6da>
     b7c:	27 e1       	ldi	r18, 0x17	; 23
     b7e:	2d 15       	cp	r18, r13
     b80:	18 f4       	brcc	.+6      	; 0xb88 <Modbus_mster_transaction+0x6ae>
     b82:	8f ef       	ldi	r24, 0xFF	; 255
     b84:	d8 12       	cpse	r13, r24
     b86:	16 c0       	rjmp	.+44     	; 0xbb4 <Modbus_mster_transaction+0x6da>
     b88:	90 91 c6 02 	lds	r25, 0x02C6	; 0x8002c6 <g_mod1_write_address>
     b8c:	80 91 c7 02 	lds	r24, 0x02C7	; 0x8002c7 <g_mod1_write_address+0x1>
     b90:	e1 e0       	ldi	r30, 0x01	; 1
     b92:	f0 e0       	ldi	r31, 0x00	; 0
     b94:	ec 0f       	add	r30, r28
     b96:	fd 1f       	adc	r31, r29
     b98:	eb 0d       	add	r30, r11
     b9a:	f1 1d       	adc	r31, r1
     b9c:	80 83       	st	Z, r24
     b9e:	81 e0       	ldi	r24, 0x01	; 1
     ba0:	8b 0d       	add	r24, r11
     ba2:	e1 e0       	ldi	r30, 0x01	; 1
     ba4:	f0 e0       	ldi	r31, 0x00	; 0
     ba6:	ec 0f       	add	r30, r28
     ba8:	fd 1f       	adc	r31, r29
     baa:	e8 0f       	add	r30, r24
     bac:	f1 1d       	adc	r31, r1
     bae:	b3 94       	inc	r11
     bb0:	b3 94       	inc	r11
     bb2:	90 83       	st	Z, r25
     bb4:	90 e1       	ldi	r25, 0x10	; 16
     bb6:	d9 16       	cp	r13, r25
     bb8:	09 f4       	brne	.+2      	; 0xbbc <Modbus_mster_transaction+0x6e2>
     bba:	ad c0       	rjmp	.+346    	; 0xd16 <Modbus_mster_transaction+0x83c>
     bbc:	9d 15       	cp	r25, r13
     bbe:	58 f0       	brcs	.+22     	; 0xbd6 <Modbus_mster_transaction+0x6fc>
     bc0:	a6 e0       	ldi	r26, 0x06	; 6
     bc2:	da 16       	cp	r13, r26
     bc4:	61 f1       	breq	.+88     	; 0xc1e <Modbus_mster_transaction+0x744>
     bc6:	bf e0       	ldi	r27, 0x0F	; 15
     bc8:	db 16       	cp	r13, r27
     bca:	09 f4       	brne	.+2      	; 0xbce <Modbus_mster_transaction+0x6f4>
     bcc:	41 c0       	rjmp	.+130    	; 0xc50 <Modbus_mster_transaction+0x776>
     bce:	e5 e0       	ldi	r30, 0x05	; 5
     bd0:	de 12       	cpse	r13, r30
     bd2:	1b c1       	rjmp	.+566    	; 0xe0a <Modbus_mster_transaction+0x930>
     bd4:	0d c0       	rjmp	.+26     	; 0xbf0 <Modbus_mster_transaction+0x716>
     bd6:	f7 e1       	ldi	r31, 0x17	; 23
     bd8:	df 16       	cp	r13, r31
     bda:	09 f4       	brne	.+2      	; 0xbde <Modbus_mster_transaction+0x704>
     bdc:	9c c0       	rjmp	.+312    	; 0xd16 <Modbus_mster_transaction+0x83c>
     bde:	2f ef       	ldi	r18, 0xFF	; 255
     be0:	d2 16       	cp	r13, r18
     be2:	09 f4       	brne	.+2      	; 0xbe6 <Modbus_mster_transaction+0x70c>
     be4:	98 c0       	rjmp	.+304    	; 0xd16 <Modbus_mster_transaction+0x83c>
     be6:	86 e1       	ldi	r24, 0x16	; 22
     be8:	d8 16       	cp	r13, r24
     bea:	09 f4       	brne	.+2      	; 0xbee <Modbus_mster_transaction+0x714>
     bec:	e0 c0       	rjmp	.+448    	; 0xdae <Modbus_mster_transaction+0x8d4>
     bee:	0d c1       	rjmp	.+538    	; 0xe0a <Modbus_mster_transaction+0x930>
     bf0:	90 91 c4 02 	lds	r25, 0x02C4	; 0x8002c4 <g_mod1_write_qty>
     bf4:	80 91 c5 02 	lds	r24, 0x02C5	; 0x8002c5 <g_mod1_write_qty+0x1>
     bf8:	e1 e0       	ldi	r30, 0x01	; 1
     bfa:	f0 e0       	ldi	r31, 0x00	; 0
     bfc:	ec 0f       	add	r30, r28
     bfe:	fd 1f       	adc	r31, r29
     c00:	eb 0d       	add	r30, r11
     c02:	f1 1d       	adc	r31, r1
     c04:	80 83       	st	Z, r24
     c06:	81 e0       	ldi	r24, 0x01	; 1
     c08:	8b 0d       	add	r24, r11
     c0a:	e1 e0       	ldi	r30, 0x01	; 1
     c0c:	f0 e0       	ldi	r31, 0x00	; 0
     c0e:	ec 0f       	add	r30, r28
     c10:	fd 1f       	adc	r31, r29
     c12:	e8 0f       	add	r30, r24
     c14:	f1 1d       	adc	r31, r1
     c16:	b3 94       	inc	r11
     c18:	b3 94       	inc	r11
     c1a:	90 83       	st	Z, r25
     c1c:	f6 c0       	rjmp	.+492    	; 0xe0a <Modbus_mster_transaction+0x930>
     c1e:	e4 e4       	ldi	r30, 0x44	; 68
     c20:	f2 e0       	ldi	r31, 0x02	; 2
     c22:	80 81       	ld	r24, Z
     c24:	91 81       	ldd	r25, Z+1	; 0x01
     c26:	a1 e0       	ldi	r26, 0x01	; 1
     c28:	b0 e0       	ldi	r27, 0x00	; 0
     c2a:	ac 0f       	add	r26, r28
     c2c:	bd 1f       	adc	r27, r29
     c2e:	ab 0d       	add	r26, r11
     c30:	b1 1d       	adc	r27, r1
     c32:	9c 93       	st	X, r25
     c34:	20 81       	ld	r18, Z
     c36:	31 81       	ldd	r19, Z+1	; 0x01
     c38:	81 e0       	ldi	r24, 0x01	; 1
     c3a:	8b 0d       	add	r24, r11
     c3c:	e1 e0       	ldi	r30, 0x01	; 1
     c3e:	f0 e0       	ldi	r31, 0x00	; 0
     c40:	ec 0f       	add	r30, r28
     c42:	fd 1f       	adc	r31, r29
     c44:	e8 0f       	add	r30, r24
     c46:	f1 1d       	adc	r31, r1
     c48:	b3 94       	inc	r11
     c4a:	b3 94       	inc	r11
     c4c:	20 83       	st	Z, r18
     c4e:	dd c0       	rjmp	.+442    	; 0xe0a <Modbus_mster_transaction+0x930>
     c50:	80 91 c4 02 	lds	r24, 0x02C4	; 0x8002c4 <g_mod1_write_qty>
     c54:	90 91 c5 02 	lds	r25, 0x02C5	; 0x8002c5 <g_mod1_write_qty+0x1>
     c58:	e1 e0       	ldi	r30, 0x01	; 1
     c5a:	f0 e0       	ldi	r31, 0x00	; 0
     c5c:	ec 0f       	add	r30, r28
     c5e:	fd 1f       	adc	r31, r29
     c60:	eb 0d       	add	r30, r11
     c62:	f1 1d       	adc	r31, r1
     c64:	90 83       	st	Z, r25
     c66:	22 e0       	ldi	r18, 0x02	; 2
     c68:	2b 0d       	add	r18, r11
     c6a:	31 e0       	ldi	r19, 0x01	; 1
     c6c:	3b 0d       	add	r19, r11
     c6e:	e1 e0       	ldi	r30, 0x01	; 1
     c70:	f0 e0       	ldi	r31, 0x00	; 0
     c72:	ec 0f       	add	r30, r28
     c74:	fd 1f       	adc	r31, r29
     c76:	e3 0f       	add	r30, r19
     c78:	f1 1d       	adc	r31, r1
     c7a:	80 83       	st	Z, r24
     c7c:	ac 01       	movw	r20, r24
     c7e:	47 70       	andi	r20, 0x07	; 7
     c80:	55 27       	eor	r21, r21
     c82:	45 2b       	or	r20, r21
     c84:	49 f0       	breq	.+18     	; 0xc98 <Modbus_mster_transaction+0x7be>
     c86:	96 95       	lsr	r25
     c88:	87 95       	ror	r24
     c8a:	96 95       	lsr	r25
     c8c:	87 95       	ror	r24
     c8e:	96 95       	lsr	r25
     c90:	87 95       	ror	r24
     c92:	91 e0       	ldi	r25, 0x01	; 1
     c94:	98 0f       	add	r25, r24
     c96:	07 c0       	rjmp	.+14     	; 0xca6 <Modbus_mster_transaction+0x7cc>
     c98:	96 95       	lsr	r25
     c9a:	87 95       	ror	r24
     c9c:	96 95       	lsr	r25
     c9e:	87 95       	ror	r24
     ca0:	96 95       	lsr	r25
     ca2:	87 95       	ror	r24
     ca4:	98 2f       	mov	r25, r24
     ca6:	a3 e0       	ldi	r26, 0x03	; 3
     ca8:	ba 0e       	add	r11, r26
     caa:	fe 01       	movw	r30, r28
     cac:	e2 0f       	add	r30, r18
     cae:	f1 1d       	adc	r31, r1
     cb0:	91 83       	std	Z+1, r25	; 0x01
     cb2:	99 23       	and	r25, r25
     cb4:	09 f4       	brne	.+2      	; 0xcb8 <Modbus_mster_transaction+0x7de>
     cb6:	a9 c0       	rjmp	.+338    	; 0xe0a <Modbus_mster_transaction+0x930>
     cb8:	80 e0       	ldi	r24, 0x00	; 0
     cba:	28 2f       	mov	r18, r24
     cbc:	21 70       	andi	r18, 0x01	; 1
     cbe:	80 ff       	sbrs	r24, 0
     cc0:	03 c0       	rjmp	.+6      	; 0xcc8 <Modbus_mster_transaction+0x7ee>
     cc2:	21 30       	cpi	r18, 0x01	; 1
     cc4:	99 f0       	breq	.+38     	; 0xcec <Modbus_mster_transaction+0x812>
     cc6:	23 c0       	rjmp	.+70     	; 0xd0e <Modbus_mster_transaction+0x834>
     cc8:	e8 2f       	mov	r30, r24
     cca:	e6 95       	lsr	r30
     ccc:	f0 e0       	ldi	r31, 0x00	; 0
     cce:	ee 0f       	add	r30, r30
     cd0:	ff 1f       	adc	r31, r31
     cd2:	ec 5b       	subi	r30, 0xBC	; 188
     cd4:	fd 4f       	sbci	r31, 0xFD	; 253
     cd6:	20 81       	ld	r18, Z
     cd8:	31 81       	ldd	r19, Z+1	; 0x01
     cda:	e1 e0       	ldi	r30, 0x01	; 1
     cdc:	f0 e0       	ldi	r31, 0x00	; 0
     cde:	ec 0f       	add	r30, r28
     ce0:	fd 1f       	adc	r31, r29
     ce2:	eb 0d       	add	r30, r11
     ce4:	f1 1d       	adc	r31, r1
     ce6:	20 83       	st	Z, r18
     ce8:	b3 94       	inc	r11
     cea:	11 c0       	rjmp	.+34     	; 0xd0e <Modbus_mster_transaction+0x834>
     cec:	e8 2f       	mov	r30, r24
     cee:	e6 95       	lsr	r30
     cf0:	f0 e0       	ldi	r31, 0x00	; 0
     cf2:	ee 0f       	add	r30, r30
     cf4:	ff 1f       	adc	r31, r31
     cf6:	ec 5b       	subi	r30, 0xBC	; 188
     cf8:	fd 4f       	sbci	r31, 0xFD	; 253
     cfa:	20 81       	ld	r18, Z
     cfc:	31 81       	ldd	r19, Z+1	; 0x01
     cfe:	e1 e0       	ldi	r30, 0x01	; 1
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	ec 0f       	add	r30, r28
     d04:	fd 1f       	adc	r31, r29
     d06:	eb 0d       	add	r30, r11
     d08:	f1 1d       	adc	r31, r1
     d0a:	30 83       	st	Z, r19
     d0c:	b3 94       	inc	r11
     d0e:	8f 5f       	subi	r24, 0xFF	; 255
     d10:	98 13       	cpse	r25, r24
     d12:	d3 cf       	rjmp	.-90     	; 0xcba <Modbus_mster_transaction+0x7e0>
     d14:	7a c0       	rjmp	.+244    	; 0xe0a <Modbus_mster_transaction+0x930>
     d16:	80 91 c4 02 	lds	r24, 0x02C4	; 0x8002c4 <g_mod1_write_qty>
     d1a:	90 91 c5 02 	lds	r25, 0x02C5	; 0x8002c5 <g_mod1_write_qty+0x1>
     d1e:	e1 e0       	ldi	r30, 0x01	; 1
     d20:	f0 e0       	ldi	r31, 0x00	; 0
     d22:	ec 0f       	add	r30, r28
     d24:	fd 1f       	adc	r31, r29
     d26:	eb 0d       	add	r30, r11
     d28:	f1 1d       	adc	r31, r1
     d2a:	90 83       	st	Z, r25
     d2c:	21 e0       	ldi	r18, 0x01	; 1
     d2e:	2b 0d       	add	r18, r11
     d30:	e1 e0       	ldi	r30, 0x01	; 1
     d32:	f0 e0       	ldi	r31, 0x00	; 0
     d34:	ec 0f       	add	r30, r28
     d36:	fd 1f       	adc	r31, r29
     d38:	e2 0f       	add	r30, r18
     d3a:	f1 1d       	adc	r31, r1
     d3c:	80 83       	st	Z, r24
     d3e:	22 e0       	ldi	r18, 0x02	; 2
     d40:	2b 0d       	add	r18, r11
     d42:	e1 e0       	ldi	r30, 0x01	; 1
     d44:	f0 e0       	ldi	r31, 0x00	; 0
     d46:	ec 0f       	add	r30, r28
     d48:	fd 1f       	adc	r31, r29
     d4a:	e2 0f       	add	r30, r18
     d4c:	f1 1d       	adc	r31, r1
     d4e:	b3 e0       	ldi	r27, 0x03	; 3
     d50:	bb 0e       	add	r11, r27
     d52:	28 2f       	mov	r18, r24
     d54:	22 0f       	add	r18, r18
     d56:	20 83       	st	Z, r18
     d58:	ac 01       	movw	r20, r24
     d5a:	55 27       	eor	r21, r21
     d5c:	14 16       	cp	r1, r20
     d5e:	15 06       	cpc	r1, r21
     d60:	0c f0       	brlt	.+2      	; 0xd64 <Modbus_mster_transaction+0x88a>
     d62:	53 c0       	rjmp	.+166    	; 0xe0a <Modbus_mster_transaction+0x930>
     d64:	80 e0       	ldi	r24, 0x00	; 0
     d66:	90 e0       	ldi	r25, 0x00	; 0
     d68:	20 e0       	ldi	r18, 0x00	; 0
     d6a:	88 0f       	add	r24, r24
     d6c:	99 1f       	adc	r25, r25
     d6e:	fc 01       	movw	r30, r24
     d70:	ec 5b       	subi	r30, 0xBC	; 188
     d72:	fd 4f       	sbci	r31, 0xFD	; 253
     d74:	80 81       	ld	r24, Z
     d76:	91 81       	ldd	r25, Z+1	; 0x01
     d78:	a1 e0       	ldi	r26, 0x01	; 1
     d7a:	b0 e0       	ldi	r27, 0x00	; 0
     d7c:	ac 0f       	add	r26, r28
     d7e:	bd 1f       	adc	r27, r29
     d80:	ab 0d       	add	r26, r11
     d82:	b1 1d       	adc	r27, r1
     d84:	9c 93       	st	X, r25
     d86:	60 81       	ld	r22, Z
     d88:	71 81       	ldd	r23, Z+1	; 0x01
     d8a:	81 e0       	ldi	r24, 0x01	; 1
     d8c:	8b 0d       	add	r24, r11
     d8e:	e1 e0       	ldi	r30, 0x01	; 1
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	ec 0f       	add	r30, r28
     d94:	fd 1f       	adc	r31, r29
     d96:	e8 0f       	add	r30, r24
     d98:	f1 1d       	adc	r31, r1
     d9a:	b3 94       	inc	r11
     d9c:	b3 94       	inc	r11
     d9e:	60 83       	st	Z, r22
     da0:	2f 5f       	subi	r18, 0xFF	; 255
     da2:	82 2f       	mov	r24, r18
     da4:	90 e0       	ldi	r25, 0x00	; 0
     da6:	84 17       	cp	r24, r20
     da8:	95 07       	cpc	r25, r21
     daa:	fc f2       	brlt	.-66     	; 0xd6a <Modbus_mster_transaction+0x890>
     dac:	2e c0       	rjmp	.+92     	; 0xe0a <Modbus_mster_transaction+0x930>
     dae:	e4 e4       	ldi	r30, 0x44	; 68
     db0:	f2 e0       	ldi	r31, 0x02	; 2
     db2:	80 81       	ld	r24, Z
     db4:	91 81       	ldd	r25, Z+1	; 0x01
     db6:	a1 e0       	ldi	r26, 0x01	; 1
     db8:	b0 e0       	ldi	r27, 0x00	; 0
     dba:	ac 0f       	add	r26, r28
     dbc:	bd 1f       	adc	r27, r29
     dbe:	ab 0d       	add	r26, r11
     dc0:	b1 1d       	adc	r27, r1
     dc2:	9c 93       	st	X, r25
     dc4:	80 81       	ld	r24, Z
     dc6:	91 81       	ldd	r25, Z+1	; 0x01
     dc8:	91 e0       	ldi	r25, 0x01	; 1
     dca:	9b 0d       	add	r25, r11
     dcc:	a1 e0       	ldi	r26, 0x01	; 1
     dce:	b0 e0       	ldi	r27, 0x00	; 0
     dd0:	ac 0f       	add	r26, r28
     dd2:	bd 1f       	adc	r27, r29
     dd4:	a9 0f       	add	r26, r25
     dd6:	b1 1d       	adc	r27, r1
     dd8:	8c 93       	st	X, r24
     dda:	82 81       	ldd	r24, Z+2	; 0x02
     ddc:	93 81       	ldd	r25, Z+3	; 0x03
     dde:	82 e0       	ldi	r24, 0x02	; 2
     de0:	8b 0d       	add	r24, r11
     de2:	a1 e0       	ldi	r26, 0x01	; 1
     de4:	b0 e0       	ldi	r27, 0x00	; 0
     de6:	ac 0f       	add	r26, r28
     de8:	bd 1f       	adc	r27, r29
     dea:	a8 0f       	add	r26, r24
     dec:	b1 1d       	adc	r27, r1
     dee:	9c 93       	st	X, r25
     df0:	22 81       	ldd	r18, Z+2	; 0x02
     df2:	33 81       	ldd	r19, Z+3	; 0x03
     df4:	83 e0       	ldi	r24, 0x03	; 3
     df6:	8b 0d       	add	r24, r11
     df8:	e1 e0       	ldi	r30, 0x01	; 1
     dfa:	f0 e0       	ldi	r31, 0x00	; 0
     dfc:	ec 0f       	add	r30, r28
     dfe:	fd 1f       	adc	r31, r29
     e00:	e8 0f       	add	r30, r24
     e02:	f1 1d       	adc	r31, r1
     e04:	84 e0       	ldi	r24, 0x04	; 4
     e06:	b8 0e       	add	r11, r24
     e08:	20 83       	st	Z, r18
     e0a:	bb 20       	and	r11, r11
     e0c:	b9 f0       	breq	.+46     	; 0xe3c <Modbus_mster_transaction+0x962>
     e0e:	8e 01       	movw	r16, r28
     e10:	0f 5f       	subi	r16, 0xFF	; 255
     e12:	1f 4f       	sbci	r17, 0xFF	; 255
     e14:	ee 24       	eor	r14, r14
     e16:	ea 94       	dec	r14
     e18:	eb 0c       	add	r14, r11
     e1a:	f1 2c       	mov	r15, r1
     e1c:	9f ef       	ldi	r25, 0xFF	; 255
     e1e:	e9 1a       	sub	r14, r25
     e20:	f9 0a       	sbc	r15, r25
     e22:	e0 0e       	add	r14, r16
     e24:	f1 1e       	adc	r15, r17
     e26:	8f ef       	ldi	r24, 0xFF	; 255
     e28:	9f ef       	ldi	r25, 0xFF	; 255
     e2a:	d8 01       	movw	r26, r16
     e2c:	6d 91       	ld	r22, X+
     e2e:	8d 01       	movw	r16, r26
     e30:	0e 94 85 12 	call	0x250a	; 0x250a <crc16_update>
     e34:	0e 15       	cp	r16, r14
     e36:	1f 05       	cpc	r17, r15
     e38:	c1 f7       	brne	.-16     	; 0xe2a <Modbus_mster_transaction+0x950>
     e3a:	02 c0       	rjmp	.+4      	; 0xe40 <Modbus_mster_transaction+0x966>
     e3c:	8f ef       	ldi	r24, 0xFF	; 255
     e3e:	9f ef       	ldi	r25, 0xFF	; 255
     e40:	ee 24       	eor	r14, r14
     e42:	e3 94       	inc	r14
     e44:	eb 0c       	add	r14, r11
     e46:	e1 e0       	ldi	r30, 0x01	; 1
     e48:	f0 e0       	ldi	r31, 0x00	; 0
     e4a:	ec 0f       	add	r30, r28
     e4c:	fd 1f       	adc	r31, r29
     e4e:	eb 0d       	add	r30, r11
     e50:	f1 1d       	adc	r31, r1
     e52:	80 83       	st	Z, r24
     e54:	b3 94       	inc	r11
     e56:	b3 94       	inc	r11
     e58:	e1 e0       	ldi	r30, 0x01	; 1
     e5a:	f0 e0       	ldi	r31, 0x00	; 0
     e5c:	ec 0f       	add	r30, r28
     e5e:	fd 1f       	adc	r31, r29
     e60:	ee 0d       	add	r30, r14
     e62:	f1 1d       	adc	r31, r1
     e64:	90 83       	st	Z, r25
     e66:	e1 e0       	ldi	r30, 0x01	; 1
     e68:	f0 e0       	ldi	r31, 0x00	; 0
     e6a:	ec 0f       	add	r30, r28
     e6c:	fd 1f       	adc	r31, r29
     e6e:	eb 0d       	add	r30, r11
     e70:	f1 1d       	adc	r31, r1
     e72:	10 82       	st	Z, r1
     e74:	e0 91 37 02 	lds	r30, 0x0237	; 0x800237 <g_mod1_Serial_getc>
     e78:	f0 91 38 02 	lds	r31, 0x0238	; 0x800238 <g_mod1_Serial_getc+0x1>
     e7c:	19 95       	eicall
     e7e:	81 15       	cp	r24, r1
     e80:	91 40       	sbci	r25, 0x01	; 1
     e82:	c1 f7       	brne	.-16     	; 0xe74 <Modbus_mster_transaction+0x99a>
     e84:	e0 91 3d 02 	lds	r30, 0x023D	; 0x80023d <g_mod1_pre_transmission>
     e88:	f0 91 3e 02 	lds	r31, 0x023E	; 0x80023e <g_mod1_pre_transmission+0x1>
     e8c:	30 97       	sbiw	r30, 0x00	; 0
     e8e:	09 f0       	breq	.+2      	; 0xe92 <Modbus_mster_transaction+0x9b8>
     e90:	19 95       	eicall
     e92:	bb 20       	and	r11, r11
     e94:	a1 f0       	breq	.+40     	; 0xebe <Modbus_mster_transaction+0x9e4>
     e96:	8e 01       	movw	r16, r28
     e98:	0f 5f       	subi	r16, 0xFF	; 255
     e9a:	1f 4f       	sbci	r17, 0xFF	; 255
     e9c:	f1 2c       	mov	r15, r1
     e9e:	ef ef       	ldi	r30, 0xFF	; 255
     ea0:	ee 1a       	sub	r14, r30
     ea2:	fe 0a       	sbc	r15, r30
     ea4:	e0 0e       	add	r14, r16
     ea6:	f1 1e       	adc	r15, r17
     ea8:	e0 91 39 02 	lds	r30, 0x0239	; 0x800239 <g_mod1_Serial_putc>
     eac:	f0 91 3a 02 	lds	r31, 0x023A	; 0x80023a <g_mod1_Serial_putc+0x1>
     eb0:	d8 01       	movw	r26, r16
     eb2:	8d 91       	ld	r24, X+
     eb4:	8d 01       	movw	r16, r26
     eb6:	19 95       	eicall
     eb8:	e0 16       	cp	r14, r16
     eba:	f1 06       	cpc	r15, r17
     ebc:	a9 f7       	brne	.-22     	; 0xea8 <Modbus_mster_transaction+0x9ce>
     ebe:	e0 91 33 02 	lds	r30, 0x0233	; 0x800233 <g_mod1_Serial_flush>
     ec2:	f0 91 34 02 	lds	r31, 0x0234	; 0x800234 <g_mod1_Serial_flush+0x1>
     ec6:	19 95       	eicall
     ec8:	e0 91 3b 02 	lds	r30, 0x023B	; 0x80023b <g_mod1_post_transmission>
     ecc:	f0 91 3c 02 	lds	r31, 0x023C	; 0x80023c <g_mod1_post_transmission+0x1>
     ed0:	30 97       	sbiw	r30, 0x00	; 0
     ed2:	09 f0       	breq	.+2      	; 0xed6 <Modbus_mster_transaction+0x9fc>
     ed4:	19 95       	eicall
     ed6:	0e 94 a6 12 	call	0x254c	; 0x254c <Get_millis>
     eda:	4b 01       	movw	r8, r22
     edc:	5c 01       	movw	r10, r24
     ede:	08 e0       	ldi	r16, 0x08	; 8
     ee0:	10 e0       	ldi	r17, 0x00	; 0
     ee2:	ed 2c       	mov	r14, r13
     ee4:	f1 2c       	mov	r15, r1
     ee6:	e0 91 35 02 	lds	r30, 0x0235	; 0x800235 <g_mod1_Serial_available>
     eea:	f0 91 36 02 	lds	r31, 0x0236	; 0x800236 <g_mod1_Serial_available+0x1>
     eee:	19 95       	eicall
     ef0:	89 2b       	or	r24, r25
     ef2:	91 f0       	breq	.+36     	; 0xf18 <Modbus_mster_transaction+0xa3e>
     ef4:	dd 24       	eor	r13, r13
     ef6:	d3 94       	inc	r13
     ef8:	d1 0e       	add	r13, r17
     efa:	e0 91 37 02 	lds	r30, 0x0237	; 0x800237 <g_mod1_Serial_getc>
     efe:	f0 91 38 02 	lds	r31, 0x0238	; 0x800238 <g_mod1_Serial_getc+0x1>
     f02:	19 95       	eicall
     f04:	e1 e0       	ldi	r30, 0x01	; 1
     f06:	f0 e0       	ldi	r31, 0x00	; 0
     f08:	ec 0f       	add	r30, r28
     f0a:	fd 1f       	adc	r31, r29
     f0c:	e1 0f       	add	r30, r17
     f0e:	f1 1d       	adc	r31, r1
     f10:	80 83       	st	Z, r24
     f12:	01 50       	subi	r16, 0x01	; 1
     f14:	1d 2d       	mov	r17, r13
     f16:	07 c0       	rjmp	.+14     	; 0xf26 <Modbus_mster_transaction+0xa4c>
     f18:	e0 91 3f 02 	lds	r30, 0x023F	; 0x80023f <g_mod1_idle>
     f1c:	f0 91 40 02 	lds	r31, 0x0240	; 0x800240 <g_mod1_idle+0x1>
     f20:	30 97       	sbiw	r30, 0x00	; 0
     f22:	09 f0       	breq	.+2      	; 0xf26 <Modbus_mster_transaction+0xa4c>
     f24:	19 95       	eicall
     f26:	15 30       	cpi	r17, 0x05	; 5
     f28:	51 f5       	brne	.+84     	; 0xf7e <Modbus_mster_transaction+0xaa4>
     f2a:	99 81       	ldd	r25, Y+1	; 0x01
     f2c:	80 91 4c 03 	lds	r24, 0x034C	; 0x80034c <g_mod1_slave>
     f30:	98 13       	cpse	r25, r24
     f32:	3c c1       	rjmp	.+632    	; 0x11ac <Modbus_mster_transaction+0xcd2>
     f34:	8a 81       	ldd	r24, Y+2	; 0x02
     f36:	28 2f       	mov	r18, r24
     f38:	2f 77       	andi	r18, 0x7F	; 127
     f3a:	30 e0       	ldi	r19, 0x00	; 0
     f3c:	2e 15       	cp	r18, r14
     f3e:	3f 05       	cpc	r19, r15
     f40:	09 f0       	breq	.+2      	; 0xf44 <Modbus_mster_transaction+0xa6a>
     f42:	36 c1       	rjmp	.+620    	; 0x11b0 <Modbus_mster_transaction+0xcd6>
     f44:	88 23       	and	r24, r24
     f46:	24 f4       	brge	.+8      	; 0xf50 <Modbus_mster_transaction+0xa76>
     f48:	8b 81       	ldd	r24, Y+3	; 0x03
     f4a:	88 23       	and	r24, r24
     f4c:	b1 f1       	breq	.+108    	; 0xfba <Modbus_mster_transaction+0xae0>
     f4e:	bf c0       	rjmp	.+382    	; 0x10ce <Modbus_mster_transaction+0xbf4>
     f50:	81 31       	cpi	r24, 0x11	; 17
     f52:	48 f4       	brcc	.+18     	; 0xf66 <Modbus_mster_transaction+0xa8c>
     f54:	8f 30       	cpi	r24, 0x0F	; 15
     f56:	70 f4       	brcc	.+28     	; 0xf74 <Modbus_mster_transaction+0xa9a>
     f58:	81 30       	cpi	r24, 0x01	; 1
     f5a:	88 f0       	brcs	.+34     	; 0xf7e <Modbus_mster_transaction+0xaa4>
     f5c:	85 30       	cpi	r24, 0x05	; 5
     f5e:	60 f0       	brcs	.+24     	; 0xf78 <Modbus_mster_transaction+0xa9e>
     f60:	87 30       	cpi	r24, 0x07	; 7
     f62:	40 f0       	brcs	.+16     	; 0xf74 <Modbus_mster_transaction+0xa9a>
     f64:	0c c0       	rjmp	.+24     	; 0xf7e <Modbus_mster_transaction+0xaa4>
     f66:	87 31       	cpi	r24, 0x17	; 23
     f68:	39 f0       	breq	.+14     	; 0xf78 <Modbus_mster_transaction+0xa9e>
     f6a:	8f 3f       	cpi	r24, 0xFF	; 255
     f6c:	19 f0       	breq	.+6      	; 0xf74 <Modbus_mster_transaction+0xa9a>
     f6e:	86 31       	cpi	r24, 0x16	; 22
     f70:	29 f0       	breq	.+10     	; 0xf7c <Modbus_mster_transaction+0xaa2>
     f72:	05 c0       	rjmp	.+10     	; 0xf7e <Modbus_mster_transaction+0xaa4>
     f74:	03 e0       	ldi	r16, 0x03	; 3
     f76:	03 c0       	rjmp	.+6      	; 0xf7e <Modbus_mster_transaction+0xaa4>
     f78:	0b 81       	ldd	r16, Y+3	; 0x03
     f7a:	01 c0       	rjmp	.+2      	; 0xf7e <Modbus_mster_transaction+0xaa4>
     f7c:	05 e0       	ldi	r16, 0x05	; 5
     f7e:	0e 94 a6 12 	call	0x254c	; 0x254c <Get_millis>
     f82:	dc 01       	movw	r26, r24
     f84:	cb 01       	movw	r24, r22
     f86:	88 19       	sub	r24, r8
     f88:	99 09       	sbc	r25, r9
     f8a:	aa 09       	sbc	r26, r10
     f8c:	bb 09       	sbc	r27, r11
     f8e:	81 3d       	cpi	r24, 0xD1	; 209
     f90:	97 40       	sbci	r25, 0x07	; 7
     f92:	a1 05       	cpc	r26, r1
     f94:	b1 05       	cpc	r27, r1
     f96:	08 f0       	brcs	.+2      	; 0xf9a <Modbus_mster_transaction+0xac0>
     f98:	fb c0       	rjmp	.+502    	; 0x1190 <Modbus_mster_transaction+0xcb6>
     f9a:	fe c0       	rjmp	.+508    	; 0x1198 <Modbus_mster_transaction+0xcbe>
     f9c:	81 11       	cpse	r24, r1
     f9e:	97 c0       	rjmp	.+302    	; 0x10ce <Modbus_mster_transaction+0xbf4>
     fa0:	15 30       	cpi	r17, 0x05	; 5
     fa2:	08 f4       	brcc	.+2      	; 0xfa6 <Modbus_mster_transaction+0xacc>
     fa4:	df c0       	rjmp	.+446    	; 0x1164 <Modbus_mster_transaction+0xc8a>
     fa6:	01 2f       	mov	r16, r17
     fa8:	10 e0       	ldi	r17, 0x00	; 0
     faa:	78 01       	movw	r14, r16
     fac:	f2 e0       	ldi	r31, 0x02	; 2
     fae:	ef 1a       	sub	r14, r31
     fb0:	f1 08       	sbc	r15, r1
     fb2:	1e 14       	cp	r1, r14
     fb4:	1f 04       	cpc	r1, r15
     fb6:	44 f0       	brlt	.+16     	; 0xfc8 <Modbus_mster_transaction+0xaee>
     fb8:	c4 c0       	rjmp	.+392    	; 0x1142 <Modbus_mster_transaction+0xc68>
     fba:	0f 2e       	mov	r0, r31
     fbc:	f3 e0       	ldi	r31, 0x03	; 3
     fbe:	ef 2e       	mov	r14, r31
     fc0:	f1 2c       	mov	r15, r1
     fc2:	f0 2d       	mov	r31, r0
     fc4:	05 e0       	ldi	r16, 0x05	; 5
     fc6:	10 e0       	ldi	r17, 0x00	; 0
     fc8:	20 e0       	ldi	r18, 0x00	; 0
     fca:	30 e0       	ldi	r19, 0x00	; 0
     fcc:	8f ef       	ldi	r24, 0xFF	; 255
     fce:	9f ef       	ldi	r25, 0xFF	; 255
     fd0:	d1 2c       	mov	r13, r1
     fd2:	e1 e0       	ldi	r30, 0x01	; 1
     fd4:	f0 e0       	ldi	r31, 0x00	; 0
     fd6:	ec 0f       	add	r30, r28
     fd8:	fd 1f       	adc	r31, r29
     fda:	e2 0f       	add	r30, r18
     fdc:	f3 1f       	adc	r31, r19
     fde:	60 81       	ld	r22, Z
     fe0:	0e 94 85 12 	call	0x250a	; 0x250a <crc16_update>
     fe4:	d3 94       	inc	r13
     fe6:	2d 2d       	mov	r18, r13
     fe8:	30 e0       	ldi	r19, 0x00	; 0
     fea:	2e 15       	cp	r18, r14
     fec:	3f 05       	cpc	r19, r15
     fee:	8c f3       	brlt	.-30     	; 0xfd2 <Modbus_mster_transaction+0xaf8>
     ff0:	aa c0       	rjmp	.+340    	; 0x1146 <Modbus_mster_transaction+0xc6c>
     ff2:	89 2f       	mov	r24, r25
     ff4:	99 27       	eor	r25, r25
     ff6:	fe 01       	movw	r30, r28
     ff8:	e0 0f       	add	r30, r16
     ffa:	f1 1f       	adc	r31, r17
     ffc:	20 81       	ld	r18, Z
     ffe:	30 e0       	ldi	r19, 0x00	; 0
    1000:	82 17       	cp	r24, r18
    1002:	93 07       	cpc	r25, r19
    1004:	09 f0       	breq	.+2      	; 0x1008 <Modbus_mster_transaction+0xb2e>
    1006:	ac c0       	rjmp	.+344    	; 0x1160 <Modbus_mster_transaction+0xc86>
    1008:	ad c0       	rjmp	.+346    	; 0x1164 <Modbus_mster_transaction+0xc8a>
    100a:	8b 81       	ldd	r24, Y+3	; 0x03
    100c:	86 95       	lsr	r24
    100e:	e1 f5       	brne	.+120    	; 0x1088 <Modbus_mster_transaction+0xbae>
    1010:	5e c0       	rjmp	.+188    	; 0x10ce <Modbus_mster_transaction+0xbf4>
    1012:	6b 81       	ldd	r22, Y+3	; 0x03
    1014:	86 2f       	mov	r24, r22
    1016:	86 95       	lsr	r24
    1018:	09 f4       	brne	.+2      	; 0x101c <Modbus_mster_transaction+0xb42>
    101a:	b2 c0       	rjmp	.+356    	; 0x1180 <Modbus_mster_transaction+0xca6>
    101c:	fe 01       	movw	r30, r28
    101e:	31 96       	adiw	r30, 0x01	; 1
    1020:	40 e0       	ldi	r20, 0x00	; 0
    1022:	50 e0       	ldi	r21, 0x00	; 0
    1024:	90 e0       	ldi	r25, 0x00	; 0
    1026:	90 34       	cpi	r25, 0x40	; 64
    1028:	70 f4       	brcc	.+28     	; 0x1046 <Modbus_mster_transaction+0xb6c>
    102a:	24 81       	ldd	r18, Z+4	; 0x04
    102c:	30 e0       	ldi	r19, 0x00	; 0
    102e:	32 2f       	mov	r19, r18
    1030:	22 27       	eor	r18, r18
    1032:	73 81       	ldd	r23, Z+3	; 0x03
    1034:	27 2b       	or	r18, r23
    1036:	da 01       	movw	r26, r20
    1038:	aa 0f       	add	r26, r26
    103a:	bb 1f       	adc	r27, r27
    103c:	a8 53       	subi	r26, 0x38	; 56
    103e:	bd 4f       	sbci	r27, 0xFD	; 253
    1040:	11 96       	adiw	r26, 0x01	; 1
    1042:	3c 93       	st	X, r19
    1044:	2e 93       	st	-X, r18
    1046:	9f 5f       	subi	r25, 0xFF	; 255
    1048:	4f 5f       	subi	r20, 0xFF	; 255
    104a:	5f 4f       	sbci	r21, 0xFF	; 255
    104c:	32 96       	adiw	r30, 0x02	; 2
    104e:	98 13       	cpse	r25, r24
    1050:	ea cf       	rjmp	.-44     	; 0x1026 <Modbus_mster_transaction+0xb4c>
    1052:	9f ef       	ldi	r25, 0xFF	; 255
    1054:	98 0f       	add	r25, r24
    1056:	90 93 41 02 	sts	0x0241, r25	; 0x800241 <g_mod1_response_buffer_length>
    105a:	60 ff       	sbrs	r22, 0
    105c:	35 c0       	rjmp	.+106    	; 0x10c8 <Modbus_mster_transaction+0xbee>
    105e:	80 34       	cpi	r24, 0x40	; 64
    1060:	70 f4       	brcc	.+28     	; 0x107e <Modbus_mster_transaction+0xba4>
    1062:	28 2f       	mov	r18, r24
    1064:	30 e0       	ldi	r19, 0x00	; 0
    1066:	22 0f       	add	r18, r18
    1068:	33 1f       	adc	r19, r19
    106a:	fe 01       	movw	r30, r28
    106c:	e2 0f       	add	r30, r18
    106e:	f3 1f       	adc	r31, r19
    1070:	44 81       	ldd	r20, Z+4	; 0x04
    1072:	50 e0       	ldi	r21, 0x00	; 0
    1074:	f9 01       	movw	r30, r18
    1076:	e8 53       	subi	r30, 0x38	; 56
    1078:	fd 4f       	sbci	r31, 0xFD	; 253
    107a:	51 83       	std	Z+1, r21	; 0x01
    107c:	40 83       	st	Z, r20
    107e:	8f 5f       	subi	r24, 0xFF	; 255
    1080:	80 93 41 02 	sts	0x0241, r24	; 0x800241 <g_mod1_response_buffer_length>
    1084:	80 e0       	ldi	r24, 0x00	; 0
    1086:	23 c0       	rjmp	.+70     	; 0x10ce <Modbus_mster_transaction+0xbf4>
    1088:	fe 01       	movw	r30, r28
    108a:	31 96       	adiw	r30, 0x01	; 1
    108c:	40 e0       	ldi	r20, 0x00	; 0
    108e:	50 e0       	ldi	r21, 0x00	; 0
    1090:	90 e0       	ldi	r25, 0x00	; 0
    1092:	90 34       	cpi	r25, 0x40	; 64
    1094:	70 f4       	brcc	.+28     	; 0x10b2 <Modbus_mster_transaction+0xbd8>
    1096:	23 81       	ldd	r18, Z+3	; 0x03
    1098:	30 e0       	ldi	r19, 0x00	; 0
    109a:	32 2f       	mov	r19, r18
    109c:	22 27       	eor	r18, r18
    109e:	64 81       	ldd	r22, Z+4	; 0x04
    10a0:	26 2b       	or	r18, r22
    10a2:	da 01       	movw	r26, r20
    10a4:	aa 0f       	add	r26, r26
    10a6:	bb 1f       	adc	r27, r27
    10a8:	a8 53       	subi	r26, 0x38	; 56
    10aa:	bd 4f       	sbci	r27, 0xFD	; 253
    10ac:	11 96       	adiw	r26, 0x01	; 1
    10ae:	3c 93       	st	X, r19
    10b0:	2e 93       	st	-X, r18
    10b2:	9f 5f       	subi	r25, 0xFF	; 255
    10b4:	4f 5f       	subi	r20, 0xFF	; 255
    10b6:	5f 4f       	sbci	r21, 0xFF	; 255
    10b8:	32 96       	adiw	r30, 0x02	; 2
    10ba:	98 13       	cpse	r25, r24
    10bc:	ea cf       	rjmp	.-44     	; 0x1092 <Modbus_mster_transaction+0xbb8>
    10be:	81 50       	subi	r24, 0x01	; 1
    10c0:	80 93 41 02 	sts	0x0241, r24	; 0x800241 <g_mod1_response_buffer_length>
    10c4:	80 e0       	ldi	r24, 0x00	; 0
    10c6:	03 c0       	rjmp	.+6      	; 0x10ce <Modbus_mster_transaction+0xbf4>
    10c8:	80 e0       	ldi	r24, 0x00	; 0
    10ca:	01 c0       	rjmp	.+2      	; 0x10ce <Modbus_mster_transaction+0xbf4>
    10cc:	80 e0       	ldi	r24, 0x00	; 0
    10ce:	10 92 43 02 	sts	0x0243, r1	; 0x800243 <g_mod1_transmit_buffer_index>
    10d2:	10 92 42 02 	sts	0x0242, r1	; 0x800242 <g_mod1_response_buffer_index>
    10d6:	70 c0       	rjmp	.+224    	; 0x11b8 <Modbus_mster_transaction+0xcde>
    10d8:	84 ee       	ldi	r24, 0xE4	; 228
    10da:	6e c0       	rjmp	.+220    	; 0x11b8 <Modbus_mster_transaction+0xcde>
    10dc:	03 e0       	ldi	r16, 0x03	; 3
    10de:	0e 94 a6 12 	call	0x254c	; 0x254c <Get_millis>
    10e2:	dc 01       	movw	r26, r24
    10e4:	cb 01       	movw	r24, r22
    10e6:	88 19       	sub	r24, r8
    10e8:	99 09       	sbc	r25, r9
    10ea:	aa 09       	sbc	r26, r10
    10ec:	bb 09       	sbc	r27, r11
    10ee:	81 3d       	cpi	r24, 0xD1	; 209
    10f0:	97 40       	sbci	r25, 0x07	; 7
    10f2:	a1 05       	cpc	r26, r1
    10f4:	b1 05       	cpc	r27, r1
    10f6:	08 f4       	brcc	.+2      	; 0x10fa <Modbus_mster_transaction+0xc20>
    10f8:	01 cc       	rjmp	.-2046   	; 0x8fc <Modbus_mster_transaction+0x422>
    10fa:	5b cc       	rjmp	.-1866   	; 0x9b2 <Modbus_mster_transaction+0x4d8>
    10fc:	8f ef       	ldi	r24, 0xFF	; 255
    10fe:	9f ef       	ldi	r25, 0xFF	; 255
    1100:	fe 01       	movw	r30, r28
    1102:	ee 0d       	add	r30, r14
    1104:	ff 1d       	adc	r31, r15
    1106:	21 81       	ldd	r18, Z+1	; 0x01
    1108:	30 e0       	ldi	r19, 0x00	; 0
    110a:	ac 01       	movw	r20, r24
    110c:	55 27       	eor	r21, r21
    110e:	42 17       	cp	r20, r18
    1110:	53 07       	cpc	r21, r19
    1112:	09 f4       	brne	.+2      	; 0x1116 <Modbus_mster_transaction+0xc3c>
    1114:	84 cc       	rjmp	.-1784   	; 0xa1e <Modbus_mster_transaction+0x544>
    1116:	83 ee       	ldi	r24, 0xE3	; 227
    1118:	f1 cc       	rjmp	.-1566   	; 0xafc <Modbus_mster_transaction+0x622>
    111a:	83 ee       	ldi	r24, 0xE3	; 227
    111c:	ef cc       	rjmp	.-1570   	; 0xafc <Modbus_mster_transaction+0x622>
    111e:	8a 81       	ldd	r24, Y+2	; 0x02
    1120:	85 30       	cpi	r24, 0x05	; 5
    1122:	38 f4       	brcc	.+14     	; 0x1132 <Modbus_mster_transaction+0xc58>
    1124:	83 30       	cpi	r24, 0x03	; 3
    1126:	08 f0       	brcs	.+2      	; 0x112a <Modbus_mster_transaction+0xc50>
    1128:	86 cc       	rjmp	.-1780   	; 0xa36 <Modbus_mster_transaction+0x55c>
    112a:	81 30       	cpi	r24, 0x01	; 1
    112c:	08 f0       	brcs	.+2      	; 0x1130 <Modbus_mster_transaction+0xc56>
    112e:	88 cc       	rjmp	.-1776   	; 0xa40 <Modbus_mster_transaction+0x566>
    1130:	e4 cc       	rjmp	.-1592   	; 0xafa <Modbus_mster_transaction+0x620>
    1132:	87 31       	cpi	r24, 0x17	; 23
    1134:	09 f4       	brne	.+2      	; 0x1138 <Modbus_mster_transaction+0xc5e>
    1136:	7f cc       	rjmp	.-1794   	; 0xa36 <Modbus_mster_transaction+0x55c>
    1138:	e0 cc       	rjmp	.-1600   	; 0xafa <Modbus_mster_transaction+0x620>
    113a:	70 fd       	sbrc	r23, 0
    113c:	a9 cc       	rjmp	.-1710   	; 0xa90 <Modbus_mster_transaction+0x5b6>
    113e:	80 e0       	ldi	r24, 0x00	; 0
    1140:	dd cc       	rjmp	.-1606   	; 0xafc <Modbus_mster_transaction+0x622>
    1142:	8f ef       	ldi	r24, 0xFF	; 255
    1144:	9f ef       	ldi	r25, 0xFF	; 255
    1146:	fe 01       	movw	r30, r28
    1148:	ee 0d       	add	r30, r14
    114a:	ff 1d       	adc	r31, r15
    114c:	21 81       	ldd	r18, Z+1	; 0x01
    114e:	30 e0       	ldi	r19, 0x00	; 0
    1150:	ac 01       	movw	r20, r24
    1152:	55 27       	eor	r21, r21
    1154:	42 17       	cp	r20, r18
    1156:	53 07       	cpc	r21, r19
    1158:	09 f4       	brne	.+2      	; 0x115c <Modbus_mster_transaction+0xc82>
    115a:	4b cf       	rjmp	.-362    	; 0xff2 <Modbus_mster_transaction+0xb18>
    115c:	83 ee       	ldi	r24, 0xE3	; 227
    115e:	b7 cf       	rjmp	.-146    	; 0x10ce <Modbus_mster_transaction+0xbf4>
    1160:	83 ee       	ldi	r24, 0xE3	; 227
    1162:	b5 cf       	rjmp	.-150    	; 0x10ce <Modbus_mster_transaction+0xbf4>
    1164:	8a 81       	ldd	r24, Y+2	; 0x02
    1166:	85 30       	cpi	r24, 0x05	; 5
    1168:	38 f4       	brcc	.+14     	; 0x1178 <Modbus_mster_transaction+0xc9e>
    116a:	83 30       	cpi	r24, 0x03	; 3
    116c:	08 f0       	brcs	.+2      	; 0x1170 <Modbus_mster_transaction+0xc96>
    116e:	4d cf       	rjmp	.-358    	; 0x100a <Modbus_mster_transaction+0xb30>
    1170:	81 30       	cpi	r24, 0x01	; 1
    1172:	08 f0       	brcs	.+2      	; 0x1176 <Modbus_mster_transaction+0xc9c>
    1174:	4e cf       	rjmp	.-356    	; 0x1012 <Modbus_mster_transaction+0xb38>
    1176:	aa cf       	rjmp	.-172    	; 0x10cc <Modbus_mster_transaction+0xbf2>
    1178:	87 31       	cpi	r24, 0x17	; 23
    117a:	09 f4       	brne	.+2      	; 0x117e <Modbus_mster_transaction+0xca4>
    117c:	46 cf       	rjmp	.-372    	; 0x100a <Modbus_mster_transaction+0xb30>
    117e:	a6 cf       	rjmp	.-180    	; 0x10cc <Modbus_mster_transaction+0xbf2>
    1180:	60 fd       	sbrc	r22, 0
    1182:	6f cf       	rjmp	.-290    	; 0x1062 <Modbus_mster_transaction+0xb88>
    1184:	80 e0       	ldi	r24, 0x00	; 0
    1186:	a3 cf       	rjmp	.-186    	; 0x10ce <Modbus_mster_transaction+0xbf4>
    1188:	01 11       	cpse	r16, r1
    118a:	b8 cb       	rjmp	.-2192   	; 0x8fc <Modbus_mster_transaction+0x422>
    118c:	80 e0       	ldi	r24, 0x00	; 0
    118e:	19 cc       	rjmp	.-1998   	; 0x9c2 <Modbus_mster_transaction+0x4e8>
    1190:	01 11       	cpse	r16, r1
    1192:	10 c0       	rjmp	.+32     	; 0x11b4 <Modbus_mster_transaction+0xcda>
    1194:	82 ee       	ldi	r24, 0xE2	; 226
    1196:	02 cf       	rjmp	.-508    	; 0xf9c <Modbus_mster_transaction+0xac2>
    1198:	01 11       	cpse	r16, r1
    119a:	a5 ce       	rjmp	.-694    	; 0xee6 <Modbus_mster_transaction+0xa0c>
    119c:	80 e0       	ldi	r24, 0x00	; 0
    119e:	fe ce       	rjmp	.-516    	; 0xf9c <Modbus_mster_transaction+0xac2>
    11a0:	80 ee       	ldi	r24, 0xE0	; 224
    11a2:	ac cc       	rjmp	.-1704   	; 0xafc <Modbus_mster_transaction+0x622>
    11a4:	81 ee       	ldi	r24, 0xE1	; 225
    11a6:	aa cc       	rjmp	.-1708   	; 0xafc <Modbus_mster_transaction+0x622>
    11a8:	82 ee       	ldi	r24, 0xE2	; 226
    11aa:	a8 cc       	rjmp	.-1712   	; 0xafc <Modbus_mster_transaction+0x622>
    11ac:	80 ee       	ldi	r24, 0xE0	; 224
    11ae:	8f cf       	rjmp	.-226    	; 0x10ce <Modbus_mster_transaction+0xbf4>
    11b0:	81 ee       	ldi	r24, 0xE1	; 225
    11b2:	8d cf       	rjmp	.-230    	; 0x10ce <Modbus_mster_transaction+0xbf4>
    11b4:	82 ee       	ldi	r24, 0xE2	; 226
    11b6:	8b cf       	rjmp	.-234    	; 0x10ce <Modbus_mster_transaction+0xbf4>
    11b8:	d3 95       	inc	r29
    11ba:	0f b6       	in	r0, 0x3f	; 63
    11bc:	f8 94       	cli
    11be:	de bf       	out	0x3e, r29	; 62
    11c0:	0f be       	out	0x3f, r0	; 63
    11c2:	cd bf       	out	0x3d, r28	; 61
    11c4:	df 91       	pop	r29
    11c6:	cf 91       	pop	r28
    11c8:	1f 91       	pop	r17
    11ca:	0f 91       	pop	r16
    11cc:	ff 90       	pop	r15
    11ce:	ef 90       	pop	r14
    11d0:	df 90       	pop	r13
    11d2:	bf 90       	pop	r11
    11d4:	af 90       	pop	r10
    11d6:	9f 90       	pop	r9
    11d8:	8f 90       	pop	r8
    11da:	08 95       	ret

000011dc <Modbus_init>:
    11dc:	fb 01       	movw	r30, r22
    11de:	81 11       	cpse	r24, r1
    11e0:	86 c0       	rjmp	.+268    	; 0x12ee <Modbus_init+0x112>
    11e2:	80 81       	ld	r24, Z
    11e4:	80 93 66 04 	sts	0x0466, r24	; 0x800466 <g_mod0_slave>
    11e8:	41 81       	ldd	r20, Z+1	; 0x01
    11ea:	62 81       	ldd	r22, Z+2	; 0x02
    11ec:	73 81       	ldd	r23, Z+3	; 0x03
    11ee:	84 81       	ldd	r24, Z+4	; 0x04
    11f0:	95 81       	ldd	r25, Z+5	; 0x05
    11f2:	26 81       	ldd	r18, Z+6	; 0x06
    11f4:	37 81       	ldd	r19, Z+7	; 0x07
    11f6:	30 93 58 03 	sts	0x0358, r19	; 0x800358 <g_mod0_pre_transmission+0x1>
    11fa:	20 93 57 03 	sts	0x0357, r18	; 0x800357 <g_mod0_pre_transmission>
    11fe:	20 85       	ldd	r18, Z+8	; 0x08
    1200:	31 85       	ldd	r19, Z+9	; 0x09
    1202:	30 93 56 03 	sts	0x0356, r19	; 0x800356 <g_mod0_post_transmission+0x1>
    1206:	20 93 55 03 	sts	0x0355, r18	; 0x800355 <g_mod0_post_transmission>
    120a:	10 92 5a 03 	sts	0x035A, r1	; 0x80035a <g_mod0_idle+0x1>
    120e:	10 92 59 03 	sts	0x0359, r1	; 0x800359 <g_mod0_idle>
    1212:	10 92 5c 03 	sts	0x035C, r1	; 0x80035c <g_mod0_response_buffer_index>
    1216:	10 92 5b 03 	sts	0x035B, r1	; 0x80035b <g_mod0_response_buffer_length>
    121a:	41 30       	cpi	r20, 0x01	; 1
    121c:	09 f5       	brne	.+66     	; 0x1260 <Modbus_init+0x84>
    121e:	20 91 32 02 	lds	r18, 0x0232	; 0x800232 <UART1_used.1994>
    1222:	21 11       	cpse	r18, r1
    1224:	c8 c0       	rjmp	.+400    	; 0x13b6 <Modbus_init+0x1da>
    1226:	21 e0       	ldi	r18, 0x01	; 1
    1228:	20 93 32 02 	sts	0x0232, r18	; 0x800232 <UART1_used.1994>
    122c:	9f d3       	rcall	.+1854   	; 0x196c <UART1_init>
    122e:	83 e4       	ldi	r24, 0x43	; 67
    1230:	9d e0       	ldi	r25, 0x0D	; 13
    1232:	90 93 4e 03 	sts	0x034E, r25	; 0x80034e <g_mod0_Serial_available+0x1>
    1236:	80 93 4d 03 	sts	0x034D, r24	; 0x80034d <g_mod0_Serial_available>
    123a:	81 e5       	ldi	r24, 0x51	; 81
    123c:	9d e0       	ldi	r25, 0x0D	; 13
    123e:	90 93 50 03 	sts	0x0350, r25	; 0x800350 <g_mod0_Serial_flush+0x1>
    1242:	80 93 4f 03 	sts	0x034F, r24	; 0x80034f <g_mod0_Serial_flush>
    1246:	8a e0       	ldi	r24, 0x0A	; 10
    1248:	9d e0       	ldi	r25, 0x0D	; 13
    124a:	90 93 52 03 	sts	0x0352, r25	; 0x800352 <g_mod0_Serial_getc+0x1>
    124e:	80 93 51 03 	sts	0x0351, r24	; 0x800351 <g_mod0_Serial_getc>
    1252:	8a e2       	ldi	r24, 0x2A	; 42
    1254:	9d e0       	ldi	r25, 0x0D	; 13
    1256:	90 93 54 03 	sts	0x0354, r25	; 0x800354 <g_mod0_Serial_putc+0x1>
    125a:	80 93 53 03 	sts	0x0353, r24	; 0x800353 <g_mod0_Serial_putc>
    125e:	08 95       	ret
    1260:	42 30       	cpi	r20, 0x02	; 2
    1262:	09 f5       	brne	.+66     	; 0x12a6 <Modbus_init+0xca>
    1264:	20 91 31 02 	lds	r18, 0x0231	; 0x800231 <UART2_used.1995>
    1268:	21 11       	cpse	r18, r1
    126a:	a5 c0       	rjmp	.+330    	; 0x13b6 <Modbus_init+0x1da>
    126c:	21 e0       	ldi	r18, 0x01	; 1
    126e:	20 93 31 02 	sts	0x0231, r18	; 0x800231 <UART2_used.1995>
    1272:	8a d4       	rcall	.+2324   	; 0x1b88 <UART2_init>
    1274:	8e e4       	ldi	r24, 0x4E	; 78
    1276:	9e e0       	ldi	r25, 0x0E	; 14
    1278:	90 93 4e 03 	sts	0x034E, r25	; 0x80034e <g_mod0_Serial_available+0x1>
    127c:	80 93 4d 03 	sts	0x034D, r24	; 0x80034d <g_mod0_Serial_available>
    1280:	8c e5       	ldi	r24, 0x5C	; 92
    1282:	9e e0       	ldi	r25, 0x0E	; 14
    1284:	90 93 50 03 	sts	0x0350, r25	; 0x800350 <g_mod0_Serial_flush+0x1>
    1288:	80 93 4f 03 	sts	0x034F, r24	; 0x80034f <g_mod0_Serial_flush>
    128c:	88 e1       	ldi	r24, 0x18	; 24
    128e:	9e e0       	ldi	r25, 0x0E	; 14
    1290:	90 93 52 03 	sts	0x0352, r25	; 0x800352 <g_mod0_Serial_getc+0x1>
    1294:	80 93 51 03 	sts	0x0351, r24	; 0x800351 <g_mod0_Serial_getc>
    1298:	85 e3       	ldi	r24, 0x35	; 53
    129a:	9e e0       	ldi	r25, 0x0E	; 14
    129c:	90 93 54 03 	sts	0x0354, r25	; 0x800354 <g_mod0_Serial_putc+0x1>
    12a0:	80 93 53 03 	sts	0x0353, r24	; 0x800353 <g_mod0_Serial_putc>
    12a4:	08 95       	ret
    12a6:	43 30       	cpi	r20, 0x03	; 3
    12a8:	09 f0       	breq	.+2      	; 0x12ac <Modbus_init+0xd0>
    12aa:	85 c0       	rjmp	.+266    	; 0x13b6 <Modbus_init+0x1da>
    12ac:	20 91 30 02 	lds	r18, 0x0230	; 0x800230 <UART3_used.1996>
    12b0:	21 11       	cpse	r18, r1
    12b2:	81 c0       	rjmp	.+258    	; 0x13b6 <Modbus_init+0x1da>
    12b4:	21 e0       	ldi	r18, 0x01	; 1
    12b6:	20 93 30 02 	sts	0x0230, r18	; 0x800230 <UART3_used.1996>
    12ba:	71 d5       	rcall	.+2786   	; 0x1d9e <UART3_init>
    12bc:	89 e5       	ldi	r24, 0x59	; 89
    12be:	9f e0       	ldi	r25, 0x0F	; 15
    12c0:	90 93 4e 03 	sts	0x034E, r25	; 0x80034e <g_mod0_Serial_available+0x1>
    12c4:	80 93 4d 03 	sts	0x034D, r24	; 0x80034d <g_mod0_Serial_available>
    12c8:	87 e6       	ldi	r24, 0x67	; 103
    12ca:	9f e0       	ldi	r25, 0x0F	; 15
    12cc:	90 93 50 03 	sts	0x0350, r25	; 0x800350 <g_mod0_Serial_flush+0x1>
    12d0:	80 93 4f 03 	sts	0x034F, r24	; 0x80034f <g_mod0_Serial_flush>
    12d4:	83 e2       	ldi	r24, 0x23	; 35
    12d6:	9f e0       	ldi	r25, 0x0F	; 15
    12d8:	90 93 52 03 	sts	0x0352, r25	; 0x800352 <g_mod0_Serial_getc+0x1>
    12dc:	80 93 51 03 	sts	0x0351, r24	; 0x800351 <g_mod0_Serial_getc>
    12e0:	80 e4       	ldi	r24, 0x40	; 64
    12e2:	9f e0       	ldi	r25, 0x0F	; 15
    12e4:	90 93 54 03 	sts	0x0354, r25	; 0x800354 <g_mod0_Serial_putc+0x1>
    12e8:	80 93 53 03 	sts	0x0353, r24	; 0x800353 <g_mod0_Serial_putc>
    12ec:	08 95       	ret
    12ee:	81 30       	cpi	r24, 0x01	; 1
    12f0:	09 f0       	breq	.+2      	; 0x12f4 <Modbus_init+0x118>
    12f2:	61 c0       	rjmp	.+194    	; 0x13b6 <Modbus_init+0x1da>
    12f4:	80 81       	ld	r24, Z
    12f6:	80 93 4c 03 	sts	0x034C, r24	; 0x80034c <g_mod1_slave>
    12fa:	41 81       	ldd	r20, Z+1	; 0x01
    12fc:	62 81       	ldd	r22, Z+2	; 0x02
    12fe:	73 81       	ldd	r23, Z+3	; 0x03
    1300:	84 81       	ldd	r24, Z+4	; 0x04
    1302:	95 81       	ldd	r25, Z+5	; 0x05
    1304:	26 81       	ldd	r18, Z+6	; 0x06
    1306:	37 81       	ldd	r19, Z+7	; 0x07
    1308:	30 93 3e 02 	sts	0x023E, r19	; 0x80023e <g_mod1_pre_transmission+0x1>
    130c:	20 93 3d 02 	sts	0x023D, r18	; 0x80023d <g_mod1_pre_transmission>
    1310:	20 85       	ldd	r18, Z+8	; 0x08
    1312:	31 85       	ldd	r19, Z+9	; 0x09
    1314:	30 93 3c 02 	sts	0x023C, r19	; 0x80023c <g_mod1_post_transmission+0x1>
    1318:	20 93 3b 02 	sts	0x023B, r18	; 0x80023b <g_mod1_post_transmission>
    131c:	10 92 40 02 	sts	0x0240, r1	; 0x800240 <g_mod1_idle+0x1>
    1320:	10 92 3f 02 	sts	0x023F, r1	; 0x80023f <g_mod1_idle>
    1324:	10 92 42 02 	sts	0x0242, r1	; 0x800242 <g_mod1_response_buffer_index>
    1328:	10 92 41 02 	sts	0x0241, r1	; 0x800241 <g_mod1_response_buffer_length>
    132c:	41 30       	cpi	r20, 0x01	; 1
    132e:	09 f5       	brne	.+66     	; 0x1372 <Modbus_init+0x196>
    1330:	20 91 32 02 	lds	r18, 0x0232	; 0x800232 <UART1_used.1994>
    1334:	21 11       	cpse	r18, r1
    1336:	3f c0       	rjmp	.+126    	; 0x13b6 <Modbus_init+0x1da>
    1338:	21 e0       	ldi	r18, 0x01	; 1
    133a:	20 93 32 02 	sts	0x0232, r18	; 0x800232 <UART1_used.1994>
    133e:	16 d3       	rcall	.+1580   	; 0x196c <UART1_init>
    1340:	83 e4       	ldi	r24, 0x43	; 67
    1342:	9d e0       	ldi	r25, 0x0D	; 13
    1344:	90 93 36 02 	sts	0x0236, r25	; 0x800236 <g_mod1_Serial_available+0x1>
    1348:	80 93 35 02 	sts	0x0235, r24	; 0x800235 <g_mod1_Serial_available>
    134c:	81 e5       	ldi	r24, 0x51	; 81
    134e:	9d e0       	ldi	r25, 0x0D	; 13
    1350:	90 93 34 02 	sts	0x0234, r25	; 0x800234 <g_mod1_Serial_flush+0x1>
    1354:	80 93 33 02 	sts	0x0233, r24	; 0x800233 <g_mod1_Serial_flush>
    1358:	8a e0       	ldi	r24, 0x0A	; 10
    135a:	9d e0       	ldi	r25, 0x0D	; 13
    135c:	90 93 38 02 	sts	0x0238, r25	; 0x800238 <g_mod1_Serial_getc+0x1>
    1360:	80 93 37 02 	sts	0x0237, r24	; 0x800237 <g_mod1_Serial_getc>
    1364:	8a e2       	ldi	r24, 0x2A	; 42
    1366:	9d e0       	ldi	r25, 0x0D	; 13
    1368:	90 93 3a 02 	sts	0x023A, r25	; 0x80023a <g_mod1_Serial_putc+0x1>
    136c:	80 93 39 02 	sts	0x0239, r24	; 0x800239 <g_mod1_Serial_putc>
    1370:	08 95       	ret
    1372:	42 30       	cpi	r20, 0x02	; 2
    1374:	01 f5       	brne	.+64     	; 0x13b6 <Modbus_init+0x1da>
    1376:	20 91 31 02 	lds	r18, 0x0231	; 0x800231 <UART2_used.1995>
    137a:	21 11       	cpse	r18, r1
    137c:	1c c0       	rjmp	.+56     	; 0x13b6 <Modbus_init+0x1da>
    137e:	21 e0       	ldi	r18, 0x01	; 1
    1380:	20 93 31 02 	sts	0x0231, r18	; 0x800231 <UART2_used.1995>
    1384:	01 d4       	rcall	.+2050   	; 0x1b88 <UART2_init>
    1386:	8e e4       	ldi	r24, 0x4E	; 78
    1388:	9e e0       	ldi	r25, 0x0E	; 14
    138a:	90 93 36 02 	sts	0x0236, r25	; 0x800236 <g_mod1_Serial_available+0x1>
    138e:	80 93 35 02 	sts	0x0235, r24	; 0x800235 <g_mod1_Serial_available>
    1392:	8c e5       	ldi	r24, 0x5C	; 92
    1394:	9e e0       	ldi	r25, 0x0E	; 14
    1396:	90 93 34 02 	sts	0x0234, r25	; 0x800234 <g_mod1_Serial_flush+0x1>
    139a:	80 93 33 02 	sts	0x0233, r24	; 0x800233 <g_mod1_Serial_flush>
    139e:	88 e1       	ldi	r24, 0x18	; 24
    13a0:	9e e0       	ldi	r25, 0x0E	; 14
    13a2:	90 93 38 02 	sts	0x0238, r25	; 0x800238 <g_mod1_Serial_getc+0x1>
    13a6:	80 93 37 02 	sts	0x0237, r24	; 0x800237 <g_mod1_Serial_getc>
    13aa:	85 e3       	ldi	r24, 0x35	; 53
    13ac:	9e e0       	ldi	r25, 0x0E	; 14
    13ae:	90 93 3a 02 	sts	0x023A, r25	; 0x80023a <g_mod1_Serial_putc+0x1>
    13b2:	80 93 39 02 	sts	0x0239, r24	; 0x800239 <g_mod1_Serial_putc>
    13b6:	08 95       	ret

000013b8 <Modbus_Get_response_buffer>:
    13b8:	81 11       	cpse	r24, r1
    13ba:	0b c0       	rjmp	.+22     	; 0x13d2 <Modbus_Get_response_buffer+0x1a>
    13bc:	60 34       	cpi	r22, 0x40	; 64
    13be:	b0 f4       	brcc	.+44     	; 0x13ec <Modbus_Get_response_buffer+0x34>
    13c0:	e6 2f       	mov	r30, r22
    13c2:	f0 e0       	ldi	r31, 0x00	; 0
    13c4:	ee 0f       	add	r30, r30
    13c6:	ff 1f       	adc	r31, r31
    13c8:	ee 51       	subi	r30, 0x1E	; 30
    13ca:	fc 4f       	sbci	r31, 0xFC	; 252
    13cc:	80 81       	ld	r24, Z
    13ce:	91 81       	ldd	r25, Z+1	; 0x01
    13d0:	08 95       	ret
    13d2:	81 30       	cpi	r24, 0x01	; 1
    13d4:	71 f4       	brne	.+28     	; 0x13f2 <Modbus_Get_response_buffer+0x3a>
    13d6:	60 34       	cpi	r22, 0x40	; 64
    13d8:	78 f4       	brcc	.+30     	; 0x13f8 <Modbus_Get_response_buffer+0x40>
    13da:	e6 2f       	mov	r30, r22
    13dc:	f0 e0       	ldi	r31, 0x00	; 0
    13de:	ee 0f       	add	r30, r30
    13e0:	ff 1f       	adc	r31, r31
    13e2:	e8 53       	subi	r30, 0x38	; 56
    13e4:	fd 4f       	sbci	r31, 0xFD	; 253
    13e6:	80 81       	ld	r24, Z
    13e8:	91 81       	ldd	r25, Z+1	; 0x01
    13ea:	08 95       	ret
    13ec:	8f ef       	ldi	r24, 0xFF	; 255
    13ee:	9f ef       	ldi	r25, 0xFF	; 255
    13f0:	08 95       	ret
    13f2:	8f ef       	ldi	r24, 0xFF	; 255
    13f4:	9f ef       	ldi	r25, 0xFF	; 255
    13f6:	08 95       	ret
    13f8:	8f ef       	ldi	r24, 0xFF	; 255
    13fa:	9f ef       	ldi	r25, 0xFF	; 255
    13fc:	08 95       	ret

000013fe <Modbus_Set_transmit_buffer>:
    13fe:	81 11       	cpse	r24, r1
    1400:	0b c0       	rjmp	.+22     	; 0x1418 <Modbus_Set_transmit_buffer+0x1a>
    1402:	60 34       	cpi	r22, 0x40	; 64
    1404:	b8 f4       	brcc	.+46     	; 0x1434 <Modbus_Set_transmit_buffer+0x36>
    1406:	e6 2f       	mov	r30, r22
    1408:	f0 e0       	ldi	r31, 0x00	; 0
    140a:	ee 0f       	add	r30, r30
    140c:	ff 1f       	adc	r31, r31
    140e:	e2 5a       	subi	r30, 0xA2	; 162
    1410:	fc 4f       	sbci	r31, 0xFC	; 252
    1412:	51 83       	std	Z+1, r21	; 0x01
    1414:	40 83       	st	Z, r20
    1416:	08 95       	ret
    1418:	81 30       	cpi	r24, 0x01	; 1
    141a:	71 f4       	brne	.+28     	; 0x1438 <Modbus_Set_transmit_buffer+0x3a>
    141c:	60 34       	cpi	r22, 0x40	; 64
    141e:	70 f4       	brcc	.+28     	; 0x143c <Modbus_Set_transmit_buffer+0x3e>
    1420:	e6 2f       	mov	r30, r22
    1422:	f0 e0       	ldi	r31, 0x00	; 0
    1424:	ee 0f       	add	r30, r30
    1426:	ff 1f       	adc	r31, r31
    1428:	ec 5b       	subi	r30, 0xBC	; 188
    142a:	fd 4f       	sbci	r31, 0xFD	; 253
    142c:	51 83       	std	Z+1, r21	; 0x01
    142e:	40 83       	st	Z, r20
    1430:	80 e0       	ldi	r24, 0x00	; 0
    1432:	08 95       	ret
    1434:	82 e0       	ldi	r24, 0x02	; 2
    1436:	08 95       	ret
    1438:	82 e0       	ldi	r24, 0x02	; 2
    143a:	08 95       	ret
    143c:	82 e0       	ldi	r24, 0x02	; 2
    143e:	08 95       	ret

00001440 <Modbus_Read_holding_registers>:
    1440:	81 11       	cpse	r24, r1
    1442:	0b c0       	rjmp	.+22     	; 0x145a <Modbus_Read_holding_registers+0x1a>
    1444:	70 93 65 04 	sts	0x0465, r23	; 0x800465 <g_mod0_read_address+0x1>
    1448:	60 93 64 04 	sts	0x0464, r22	; 0x800464 <g_mod0_read_address>
    144c:	50 93 63 04 	sts	0x0463, r21	; 0x800463 <g_mod0_read_qty+0x1>
    1450:	40 93 62 04 	sts	0x0462, r20	; 0x800462 <g_mod0_read_qty>
    1454:	63 e0       	ldi	r22, 0x03	; 3
    1456:	41 c8       	rjmp	.-3966   	; 0x4da <Modbus_mster_transaction>
    1458:	08 95       	ret
    145a:	81 30       	cpi	r24, 0x01	; 1
    145c:	59 f4       	brne	.+22     	; 0x1474 <Modbus_Read_holding_registers+0x34>
    145e:	70 93 4b 03 	sts	0x034B, r23	; 0x80034b <g_mod1_read_address+0x1>
    1462:	60 93 4a 03 	sts	0x034A, r22	; 0x80034a <g_mod1_read_address>
    1466:	50 93 49 03 	sts	0x0349, r21	; 0x800349 <g_mod1_read_qty+0x1>
    146a:	40 93 48 03 	sts	0x0348, r20	; 0x800348 <g_mod1_read_qty>
    146e:	63 e0       	ldi	r22, 0x03	; 3
    1470:	34 c8       	rjmp	.-3992   	; 0x4da <Modbus_mster_transaction>
    1472:	08 95       	ret
    1474:	84 ee       	ldi	r24, 0xE4	; 228
    1476:	08 95       	ret

00001478 <Modbus_Write_multiple_registers>:
@return 0 on success; exception number on failure
@ingroup register
*/
uint8_t Modbus_Write_multiple_registers(uint8_t device,uint16_t u16WriteAddress, uint16_t u16WriteQty)
{
	if(DEVICE_0 == device){
    1478:	81 11       	cpse	r24, r1
    147a:	0b c0       	rjmp	.+22     	; 0x1492 <Modbus_Write_multiple_registers+0x1a>
	
		g_mod0_write_address = u16WriteAddress;
    147c:	70 93 e1 03 	sts	0x03E1, r23	; 0x8003e1 <g_mod0_write_address+0x1>
    1480:	60 93 e0 03 	sts	0x03E0, r22	; 0x8003e0 <g_mod0_write_address>
		g_mod0_write_qty = u16WriteQty;
    1484:	50 93 df 03 	sts	0x03DF, r21	; 0x8003df <g_mod0_write_qty+0x1>
    1488:	40 93 de 03 	sts	0x03DE, r20	; 0x8003de <g_mod0_write_qty>
		return Modbus_mster_transaction(device, WRITE_MULTIPLE_REGISTERS);
    148c:	60 e1       	ldi	r22, 0x10	; 16
    148e:	25 c8       	rjmp	.-4022   	; 0x4da <Modbus_mster_transaction>
    1490:	08 95       	ret
	}
	else if(DEVICE_1 == device){
    1492:	81 30       	cpi	r24, 0x01	; 1
    1494:	59 f4       	brne	.+22     	; 0x14ac <Modbus_Write_multiple_registers+0x34>
		g_mod1_write_address = u16WriteAddress;
    1496:	70 93 c7 02 	sts	0x02C7, r23	; 0x8002c7 <g_mod1_write_address+0x1>
    149a:	60 93 c6 02 	sts	0x02C6, r22	; 0x8002c6 <g_mod1_write_address>
		g_mod1_write_qty = u16WriteQty;
    149e:	50 93 c5 02 	sts	0x02C5, r21	; 0x8002c5 <g_mod1_write_qty+0x1>
    14a2:	40 93 c4 02 	sts	0x02C4, r20	; 0x8002c4 <g_mod1_write_qty>
		return Modbus_mster_transaction(device, WRITE_MULTIPLE_REGISTERS);
    14a6:	60 e1       	ldi	r22, 0x10	; 16
    14a8:	18 c8       	rjmp	.-4048   	; 0x4da <Modbus_mster_transaction>
    14aa:	08 95       	ret
	}
	return  INVALID_DEVICE;
    14ac:	84 ee       	ldi	r24, 0xE4	; 228
}
    14ae:	08 95       	ret

000014b0 <main>:
static uint8_t ucStorageBuffer[ STORAGE_SIZE_BYTES ];
/* The variable used to hold the message buffer structure. */
StaticMessageBuffer_t xMessageBufferStruct;
MessageBufferHandle_t xMessageBuffer;

int main(void) {
    14b0:	cf 93       	push	r28
    14b2:	df 93       	push	r29
    14b4:	cd b7       	in	r28, 0x3d	; 61
    14b6:	de b7       	in	r29, 0x3e	; 62
    14b8:	a1 97       	sbiw	r28, 0x21	; 33
    14ba:	0f b6       	in	r0, 0x3f	; 63
    14bc:	f8 94       	cli
    14be:	de bf       	out	0x3e, r29	; 62
    14c0:	0f be       	out	0x3f, r0	; 63
    14c2:	cd bf       	out	0x3d, r28	; 61
	DDRE = 0xFF;
    14c4:	8f ef       	ldi	r24, 0xFF	; 255
    14c6:	8d b9       	out	0x0d, r24	; 13
	UART0_init(9600);
    14c8:	60 e8       	ldi	r22, 0x80	; 128
    14ca:	75 e2       	ldi	r23, 0x25	; 37
    14cc:	80 e0       	ldi	r24, 0x00	; 0
    14ce:	90 e0       	ldi	r25, 0x00	; 0
    14d0:	49 d1       	rcall	.+658    	; 0x1764 <UART0_init>
	millis_init();
    14d2:	0e 94 97 12 	call	0x252e	; 0x252e <millis_init>
	DIO_init();
    14d6:	91 d0       	rcall	.+290    	; 0x15fa <DIO_init>
	Lcd_init(UART3,115200,1);
    14d8:	21 e0       	ldi	r18, 0x01	; 1
    14da:	40 e0       	ldi	r20, 0x00	; 0
    14dc:	52 ec       	ldi	r21, 0xC2	; 194
    14de:	61 e0       	ldi	r22, 0x01	; 1
    14e0:	70 e0       	ldi	r23, 0x00	; 0
    14e2:	83 e0       	ldi	r24, 0x03	; 3
    14e4:	0e 94 0b 02 	call	0x416	; 0x416 <Lcd_init>
// 				&xTask2Buffer ); /* Variable to hold the task's data structure. */
// 
// 		xMessageBuffer = xMessageBufferCreateStatic( sizeof( ucStorageBuffer ),
// 														ucStorageBuffer, &xMessageBufferStruct );

	char x=0;
    14e8:	19 82       	std	Y+1, r1	; 0x01
	uint8_t xy=0;
    14ea:	80 e0       	ldi	r24, 0x00	; 0
    14ec:	7e 01       	movw	r14, r28
    14ee:	22 e2       	ldi	r18, 0x22	; 34
    14f0:	e2 0e       	add	r14, r18
    14f2:	f1 1c       	adc	r15, r1
	uint16_t DEBUG_array[16];
	while (1)
	{
		RTE_set_Drum_speed(xy++);
    14f4:	dd 24       	eor	r13, r13
    14f6:	d3 94       	inc	r13
    14f8:	d8 0e       	add	r13, r24
    14fa:	90 e0       	ldi	r25, 0x00	; 0
    14fc:	f2 d4       	rcall	.+2532   	; 0x1ee2 <RTE_set_Drum_speed>
		RTE_set_Current_temperature(xy);
    14fe:	8d 2d       	mov	r24, r13
    1500:	90 e0       	ldi	r25, 0x00	; 0
    1502:	94 d5       	rcall	.+2856   	; 0x202c <RTE_set_Current_temperature>
		LCD_main(&x);
    1504:	ce 01       	movw	r24, r28
    1506:	01 96       	adiw	r24, 0x01	; 1
    1508:	ab d7       	rcall	.+3926   	; 0x2460 <LCD_main>
		
		DEBUG_array[0]=RTE_get_Threshold_set_temperature();
    150a:	6d d5       	rcall	.+2778   	; 0x1fe6 <RTE_get_Threshold_set_temperature>
    150c:	9b 83       	std	Y+3, r25	; 0x03
    150e:	8a 83       	std	Y+2, r24	; 0x02
		DEBUG_array[1]=RTE_get_Threshold_sleep_temperature();
    1510:	74 d5       	rcall	.+2792   	; 0x1ffa <RTE_get_Threshold_sleep_temperature>
    1512:	9d 83       	std	Y+5, r25	; 0x05
    1514:	8c 83       	std	Y+4, r24	; 0x04
		DEBUG_array[2]=RTE_get_Positive_offset_temperature();
    1516:	7b d5       	rcall	.+2806   	; 0x200e <RTE_get_Positive_offset_temperature>
    1518:	9f 83       	std	Y+7, r25	; 0x07
    151a:	8e 83       	std	Y+6, r24	; 0x06
		DEBUG_array[3]=RTE_get_Negative_offset_temperature();
    151c:	82 d5       	rcall	.+2820   	; 0x2022 <RTE_get_Negative_offset_temperature>
    151e:	99 87       	std	Y+9, r25	; 0x09
    1520:	88 87       	std	Y+8, r24	; 0x08
		DEBUG_array[4]=RTE_get_Conveyor_length();
    1522:	fd d4       	rcall	.+2554   	; 0x1f1e <RTE_get_Conveyor_length>
    1524:	9b 87       	std	Y+11, r25	; 0x0b
    1526:	8a 87       	std	Y+10, r24	; 0x0a
		DEBUG_array[5]=RTE_get_Set_temperature();
    1528:	54 d5       	rcall	.+2728   	; 0x1fd2 <RTE_get_Set_temperature>
    152a:	9d 87       	std	Y+13, r25	; 0x0d
    152c:	8c 87       	std	Y+12, r24	; 0x0c
		DEBUG_array[6]=RTE_get_Sleep_temperature();
    152e:	47 d5       	rcall	.+2702   	; 0x1fbe <RTE_get_Sleep_temperature>
    1530:	9f 87       	std	Y+15, r25	; 0x0f
    1532:	8e 87       	std	Y+14, r24	; 0x0e
		DEBUG_array[7]=RTE_get_Wash_Operation();
    1534:	30 d5       	rcall	.+2656   	; 0x1f96 <RTE_get_Wash_Operation>
    1536:	99 8b       	std	Y+17, r25	; 0x11
    1538:	88 8b       	std	Y+16, r24	; 0x10
		DEBUG_array[8]=RTE_get_System_on();
    153a:	19 d5       	rcall	.+2610   	; 0x1f6e <RTE_get_System_on>
    153c:	9b 8b       	std	Y+19, r25	; 0x13
    153e:	8a 8b       	std	Y+18, r24	; 0x12
		DEBUG_array[9]=RTE_get_Tank_Calibration_Operation();
    1540:	34 d5       	rcall	.+2664   	; 0x1faa <RTE_get_Tank_Calibration_Operation>
    1542:	9d 8b       	std	Y+21, r25	; 0x15
    1544:	8c 8b       	std	Y+20, r24	; 0x14
		DEBUG_array[10]=RTE_get_Start_blancher_Operation(); 
    1546:	1d d5       	rcall	.+2618   	; 0x1f82 <RTE_get_Start_blancher_Operation>
    1548:	9f 8b       	std	Y+23, r25	; 0x17
    154a:	8e 8b       	std	Y+22, r24	; 0x16
		DEBUG_array[11]=RTE_get_Gear_ratio();
    154c:	d4 d4       	rcall	.+2472   	; 0x1ef6 <RTE_get_Gear_ratio>
    154e:	99 8f       	std	Y+25, r25	; 0x19
    1550:	88 8f       	std	Y+24, r24	; 0x18
    1552:	ef d4       	rcall	.+2526   	; 0x1f32 <RTE_get_Driver_diameter>
		DEBUG_array[12]=RTE_get_Driver_diameter();
    1554:	9b 8f       	std	Y+27, r25	; 0x1b
    1556:	8a 8f       	std	Y+26, r24	; 0x1a
    1558:	d8 d4       	rcall	.+2480   	; 0x1f0a <RTE_get_RPM_max>
		DEBUG_array[13]=RTE_get_RPM_max(); 
    155a:	9d 8f       	std	Y+29, r25	; 0x1d
    155c:	8c 8f       	std	Y+28, r24	; 0x1c
    155e:	f3 d4       	rcall	.+2534   	; 0x1f46 <RTE_get_Time_minute>
		DEBUG_array[14]=RTE_get_Time_minute();
    1560:	9f 8f       	std	Y+31, r25	; 0x1f
    1562:	8e 8f       	std	Y+30, r24	; 0x1e
    1564:	fa d4       	rcall	.+2548   	; 0x1f5a <RTE_get_Time_second>
		DEBUG_array[15]=RTE_get_Time_second();
    1566:	99 a3       	std	Y+33, r25	; 0x21
    1568:	88 a3       	std	Y+32, r24	; 0x20
    156a:	8e 01       	movw	r16, r28
    156c:	0e 5f       	subi	r16, 0xFE	; 254
    156e:	1f 4f       	sbci	r17, 0xFF	; 255
    1570:	81 2c       	mov	r8, r1
    1572:	91 2c       	mov	r9, r1
    1574:	54 01       	movw	r10, r8
	
		
		for (uint8_t i=0;i<16;i++)
		{
			UART0_puts("DEBUG_array[");
    1576:	83 e1       	ldi	r24, 0x13	; 19
    1578:	92 e0       	ldi	r25, 0x02	; 2
    157a:	7c d1       	rcall	.+760    	; 0x1874 <UART0_puts>
    157c:	c5 01       	movw	r24, r10
			UART0_OutUDec(i);
    157e:	b4 01       	movw	r22, r8
    1580:	5e d1       	rcall	.+700    	; 0x183e <UART0_OutUDec>
    1582:	80 e2       	ldi	r24, 0x20	; 32
    1584:	92 e0       	ldi	r25, 0x02	; 2
			UART0_puts("] = ");
    1586:	76 d1       	rcall	.+748    	; 0x1874 <UART0_puts>
    1588:	f8 01       	movw	r30, r16
    158a:	61 91       	ld	r22, Z+
    158c:	71 91       	ld	r23, Z+
			UART0_OutUDec(DEBUG_array[i]);
    158e:	8f 01       	movw	r16, r30
    1590:	80 e0       	ldi	r24, 0x00	; 0
    1592:	90 e0       	ldi	r25, 0x00	; 0
    1594:	54 d1       	rcall	.+680    	; 0x183e <UART0_OutUDec>
    1596:	8a e0       	ldi	r24, 0x0A	; 10
    1598:	39 d1       	rcall	.+626    	; 0x180c <UART0_putc>
    159a:	ff ef       	ldi	r31, 0xFF	; 255
    159c:	8f 1a       	sub	r8, r31
			UART0_putc('\n');
    159e:	9f 0a       	sbc	r9, r31
    15a0:	af 0a       	sbc	r10, r31
    15a2:	bf 0a       	sbc	r11, r31
    15a4:	0e 15       	cp	r16, r14
    15a6:	1f 05       	cpc	r17, r15
    15a8:	31 f7       	brne	.-52     	; 0x1576 <main+0xc6>
    15aa:	2f ef       	ldi	r18, 0xFF	; 255
    15ac:	89 e6       	ldi	r24, 0x69	; 105
		DEBUG_array[13]=RTE_get_RPM_max(); 
		DEBUG_array[14]=RTE_get_Time_minute();
		DEBUG_array[15]=RTE_get_Time_second();
	
		
		for (uint8_t i=0;i<16;i++)
    15ae:	98 e1       	ldi	r25, 0x18	; 24
    15b0:	21 50       	subi	r18, 0x01	; 1
    15b2:	80 40       	sbci	r24, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    15b4:	90 40       	sbci	r25, 0x00	; 0
    15b6:	e1 f7       	brne	.-8      	; 0x15b0 <main+0x100>
    15b8:	00 c0       	rjmp	.+0      	; 0x15ba <main+0x10a>
    15ba:	00 00       	nop
    15bc:	8d 2d       	mov	r24, r13
    15be:	9a cf       	rjmp	.-204    	; 0x14f4 <main+0x44>

000015c0 <__vector_29>:
    15c0:	1f 92       	push	r1
    15c2:	0f 92       	push	r0
    15c4:	0f b6       	in	r0, 0x3f	; 63
	char x=0;
	uint8_t xy=0;
	uint16_t DEBUG_array[16];
	while (1)
	{
		RTE_set_Drum_speed(xy++);
    15c6:	0f 92       	push	r0
    15c8:	11 24       	eor	r1, r1
	return returned_data ;
}


ISR(ADC_vect)
{
    15ca:	2f 93       	push	r18
    15cc:	8f 93       	push	r24
    15ce:	9f 93       	push	r25
	   uint8_t The_low_adc_reg = ADC_DATA_REG_LOW ;
    15d0:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
	  // get 10 bits out of the high and low register .
	  g_analog_data =  The_low_adc_reg | (ADC_DATA_REG_HIGH <<8);
    15d4:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
    15d8:	90 e0       	ldi	r25, 0x00	; 0
    15da:	92 2b       	or	r25, r18
    15dc:	90 93 69 04 	sts	0x0469, r25	; 0x800469 <g_analog_data+0x1>
    15e0:	80 93 68 04 	sts	0x0468, r24	; 0x800468 <g_analog_data>
	  g_converted = 1 ;
    15e4:	81 e0       	ldi	r24, 0x01	; 1
    15e6:	80 93 67 04 	sts	0x0467, r24	; 0x800467 <g_converted>
}
    15ea:	9f 91       	pop	r25
    15ec:	8f 91       	pop	r24
    15ee:	2f 91       	pop	r18
    15f0:	0f 90       	pop	r0
    15f2:	0f be       	out	0x3f, r0	; 63
    15f4:	0f 90       	pop	r0
    15f6:	1f 90       	pop	r1
    15f8:	18 95       	reti

000015fa <DIO_init>:
void Spark_change_state(uint8_t state)
{
	if (HIGH == state)
		SET_BIT(SPARK_DATA_REG , SPARK_PIN);
	else if(LOW == state)
		CLR_BIT(SPARK_DATA_REG , SPARK_PIN);
    15fa:	50 98       	cbi	0x0a, 0	; 10
    15fc:	51 98       	cbi	0x0a, 1	; 10
    15fe:	51 98       	cbi	0x0a, 1	; 10
    1600:	53 98       	cbi	0x0a, 3	; 10
    1602:	20 98       	cbi	0x04, 0	; 4
    1604:	55 98       	cbi	0x0a, 5	; 10
    1606:	54 98       	cbi	0x0a, 4	; 10
    1608:	3c 9a       	sbi	0x07, 4	; 7
    160a:	3f 9a       	sbi	0x07, 7	; 7
    160c:	3d 9a       	sbi	0x07, 5	; 7
    160e:	39 9a       	sbi	0x07, 1	; 7
    1610:	39 9a       	sbi	0x07, 1	; 7
    1612:	57 9a       	sbi	0x0a, 7	; 10
    1614:	38 9a       	sbi	0x07, 0	; 7
    1616:	38 98       	cbi	0x07, 0	; 7
    1618:	56 9a       	sbi	0x0a, 6	; 10
    161a:	3b 9a       	sbi	0x07, 3	; 7
    161c:	e4 e0       	ldi	r30, 0x04	; 4
    161e:	f1 e0       	ldi	r31, 0x01	; 1
    1620:	80 81       	ld	r24, Z
    1622:	84 60       	ori	r24, 0x04	; 4
    1624:	80 83       	st	Z, r24
    1626:	3f 9a       	sbi	0x07, 7	; 7
    1628:	3f 9a       	sbi	0x07, 7	; 7
    162a:	3f 9a       	sbi	0x07, 7	; 7
    162c:	e1 e0       	ldi	r30, 0x01	; 1
    162e:	f1 e0       	ldi	r31, 0x01	; 1
    1630:	80 81       	ld	r24, Z
    1632:	8e 7f       	andi	r24, 0xFE	; 254
    1634:	80 83       	st	Z, r24
    1636:	80 81       	ld	r24, Z
    1638:	82 60       	ori	r24, 0x02	; 2
    163a:	80 83       	st	Z, r24
    163c:	e2 e0       	ldi	r30, 0x02	; 2
    163e:	f1 e0       	ldi	r31, 0x01	; 1
    1640:	80 81       	ld	r24, Z
    1642:	81 60       	ori	r24, 0x01	; 1
    1644:	80 83       	st	Z, r24
    1646:	52 98       	cbi	0x0a, 2	; 10
    1648:	53 9a       	sbi	0x0a, 3	; 10
    164a:	5a 9a       	sbi	0x0b, 2	; 11
    164c:	08 95       	ret

0000164e <Modbus_change_state>:

//_________ MODE BUS initialize and enable______________________//

void Modbus_change_state(uint8_t device ,uint8_t state){
	
	switch (device){
    164e:	88 23       	and	r24, r24
    1650:	19 f0       	breq	.+6      	; 0x1658 <Modbus_change_state+0xa>
    1652:	81 30       	cpi	r24, 0x01	; 1
    1654:	89 f0       	breq	.+34     	; 0x1678 <Modbus_change_state+0x2a>
    1656:	08 95       	ret
		case DEVICE_0:
		 	if (HIGH == state)
    1658:	61 30       	cpi	r22, 0x01	; 1
    165a:	31 f4       	brne	.+12     	; 0x1668 <Modbus_change_state+0x1a>
		 		SET_BIT(DEVICE_0_MODBUS_DATA_REG , DEVICE_0_MODBUS_PIN);
    165c:	e5 e0       	ldi	r30, 0x05	; 5
    165e:	f1 e0       	ldi	r31, 0x01	; 1
    1660:	80 81       	ld	r24, Z
    1662:	84 60       	ori	r24, 0x04	; 4
    1664:	80 83       	st	Z, r24
    1666:	08 95       	ret
		 	else if(LOW == state)
    1668:	61 11       	cpse	r22, r1
    166a:	0d c0       	rjmp	.+26     	; 0x1686 <Modbus_change_state+0x38>
		 		CLR_BIT(DEVICE_0_MODBUS_DATA_REG , DEVICE_0_MODBUS_PIN);
    166c:	e5 e0       	ldi	r30, 0x05	; 5
    166e:	f1 e0       	ldi	r31, 0x01	; 1
    1670:	80 81       	ld	r24, Z
    1672:	8b 7f       	andi	r24, 0xFB	; 251
    1674:	80 83       	st	Z, r24
    1676:	08 95       	ret
			
			break;
		case DEVICE_1:
		     if (HIGH == state)
    1678:	61 30       	cpi	r22, 0x01	; 1
    167a:	11 f4       	brne	.+4      	; 0x1680 <Modbus_change_state+0x32>
		         SET_BIT(DEVICE_1_MODBUS_DATA_REG , DEVICE_1_MODBUS_PIN);
    167c:	47 9a       	sbi	0x08, 7	; 8
    167e:	08 95       	ret
		     else if(LOW == state)
    1680:	61 11       	cpse	r22, r1
    1682:	01 c0       	rjmp	.+2      	; 0x1686 <Modbus_change_state+0x38>
		         CLR_BIT(DEVICE_1_MODBUS_DATA_REG , DEVICE_1_MODBUS_PIN);
    1684:	47 98       	cbi	0x08, 7	; 8
    1686:	08 95       	ret

00001688 <__vector_25>:

	while ((c = pgm_read_byte(progmem_s++))) {
		UART3_putc(c);
	}

} /* UART3_puts_p */
    1688:	1f 92       	push	r1
    168a:	0f 92       	push	r0
    168c:	0f b6       	in	r0, 0x3f	; 63
    168e:	0f 92       	push	r0
    1690:	11 24       	eor	r1, r1
    1692:	0b b6       	in	r0, 0x3b	; 59
    1694:	0f 92       	push	r0
    1696:	2f 93       	push	r18
    1698:	3f 93       	push	r19
    169a:	4f 93       	push	r20
    169c:	5f 93       	push	r21
    169e:	8f 93       	push	r24
    16a0:	9f 93       	push	r25
    16a2:	ef 93       	push	r30
    16a4:	ff 93       	push	r31
    16a6:	20 91 c0 00 	lds	r18, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
    16aa:	30 91 c6 00 	lds	r19, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    16ae:	28 71       	andi	r18, 0x18	; 24
    16b0:	80 91 7f 07 	lds	r24, 0x077F	; 0x80077f <UART_RxHead>
    16b4:	90 e0       	ldi	r25, 0x00	; 0
    16b6:	01 96       	adiw	r24, 0x01	; 1
    16b8:	8f 77       	andi	r24, 0x7F	; 127
    16ba:	99 27       	eor	r25, r25
    16bc:	40 91 7e 07 	lds	r20, 0x077E	; 0x80077e <UART_RxTail>
    16c0:	50 e0       	ldi	r21, 0x00	; 0
    16c2:	84 17       	cp	r24, r20
    16c4:	95 07       	cpc	r25, r21
    16c6:	39 f0       	breq	.+14     	; 0x16d6 <__vector_25+0x4e>
    16c8:	80 93 7f 07 	sts	0x077F, r24	; 0x80077f <UART_RxHead>
    16cc:	fc 01       	movw	r30, r24
    16ce:	ee 57       	subi	r30, 0x7E	; 126
    16d0:	f8 4f       	sbci	r31, 0xF8	; 248
    16d2:	30 83       	st	Z, r19
    16d4:	01 c0       	rjmp	.+2      	; 0x16d8 <__vector_25+0x50>
    16d6:	22 e0       	ldi	r18, 0x02	; 2
    16d8:	20 93 7d 07 	sts	0x077D, r18	; 0x80077d <UART_LastRxError>
    16dc:	ff 91       	pop	r31
    16de:	ef 91       	pop	r30
    16e0:	9f 91       	pop	r25
    16e2:	8f 91       	pop	r24
    16e4:	5f 91       	pop	r21
    16e6:	4f 91       	pop	r20
    16e8:	3f 91       	pop	r19
    16ea:	2f 91       	pop	r18
    16ec:	0f 90       	pop	r0
    16ee:	0b be       	out	0x3b, r0	; 59
    16f0:	0f 90       	pop	r0
    16f2:	0f be       	out	0x3f, r0	; 63
    16f4:	0f 90       	pop	r0
    16f6:	1f 90       	pop	r1
    16f8:	18 95       	reti

000016fa <__vector_26>:
    16fa:	1f 92       	push	r1
    16fc:	0f 92       	push	r0
    16fe:	0f b6       	in	r0, 0x3f	; 63
    1700:	0f 92       	push	r0
    1702:	11 24       	eor	r1, r1
    1704:	0b b6       	in	r0, 0x3b	; 59
    1706:	0f 92       	push	r0
    1708:	8f 93       	push	r24
    170a:	9f 93       	push	r25
    170c:	ef 93       	push	r30
    170e:	ff 93       	push	r31
    1710:	90 91 81 07 	lds	r25, 0x0781	; 0x800781 <UART_TxHead>
    1714:	80 91 80 07 	lds	r24, 0x0780	; 0x800780 <UART_TxTail>
    1718:	98 17       	cp	r25, r24
    171a:	89 f0       	breq	.+34     	; 0x173e <__vector_26+0x44>
    171c:	80 91 80 07 	lds	r24, 0x0780	; 0x800780 <UART_TxTail>
    1720:	90 e0       	ldi	r25, 0x00	; 0
    1722:	01 96       	adiw	r24, 0x01	; 1
    1724:	8f 77       	andi	r24, 0x7F	; 127
    1726:	99 27       	eor	r25, r25
    1728:	80 93 80 07 	sts	0x0780, r24	; 0x800780 <UART_TxTail>
    172c:	fc 01       	movw	r30, r24
    172e:	ee 5f       	subi	r30, 0xFE	; 254
    1730:	f7 4f       	sbci	r31, 0xF7	; 247
    1732:	80 81       	ld	r24, Z
    1734:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    1738:	10 92 6d 04 	sts	0x046D, r1	; 0x80046d <UART0_Transmission_end>
    173c:	08 c0       	rjmp	.+16     	; 0x174e <__vector_26+0x54>
    173e:	e1 ec       	ldi	r30, 0xC1	; 193
    1740:	f0 e0       	ldi	r31, 0x00	; 0
    1742:	80 81       	ld	r24, Z
    1744:	8f 7d       	andi	r24, 0xDF	; 223
    1746:	80 83       	st	Z, r24
    1748:	81 e0       	ldi	r24, 0x01	; 1
    174a:	80 93 6d 04 	sts	0x046D, r24	; 0x80046d <UART0_Transmission_end>
    174e:	ff 91       	pop	r31
    1750:	ef 91       	pop	r30
    1752:	9f 91       	pop	r25
    1754:	8f 91       	pop	r24
    1756:	0f 90       	pop	r0
    1758:	0b be       	out	0x3b, r0	; 59
    175a:	0f 90       	pop	r0
    175c:	0f be       	out	0x3f, r0	; 63
    175e:	0f 90       	pop	r0
    1760:	1f 90       	pop	r1
    1762:	18 95       	reti

00001764 <UART0_init>:
    1764:	0f 93       	push	r16
    1766:	1f 93       	push	r17
    1768:	8b 01       	movw	r16, r22
    176a:	9c 01       	movw	r18, r24
    176c:	f8 94       	cli
    176e:	10 92 81 07 	sts	0x0781, r1	; 0x800781 <UART_TxHead>
    1772:	10 92 80 07 	sts	0x0780, r1	; 0x800780 <UART_TxTail>
    1776:	10 92 7f 07 	sts	0x077F, r1	; 0x80077f <UART_RxHead>
    177a:	10 92 7e 07 	sts	0x077E, r1	; 0x80077e <UART_RxTail>
    177e:	78 94       	sei
    1780:	dc 01       	movw	r26, r24
    1782:	cb 01       	movw	r24, r22
    1784:	80 58       	subi	r24, 0x80	; 128
    1786:	9b 47       	sbci	r25, 0x7B	; 123
    1788:	a1 4e       	sbci	r26, 0xE1	; 225
    178a:	bf 4f       	sbci	r27, 0xFF	; 255
    178c:	88 0f       	add	r24, r24
    178e:	99 1f       	adc	r25, r25
    1790:	aa 1f       	adc	r26, r26
    1792:	bb 1f       	adc	r27, r27
    1794:	88 0f       	add	r24, r24
    1796:	99 1f       	adc	r25, r25
    1798:	aa 1f       	adc	r26, r26
    179a:	bb 1f       	adc	r27, r27
    179c:	bc 01       	movw	r22, r24
    179e:	cd 01       	movw	r24, r26
    17a0:	66 0f       	add	r22, r22
    17a2:	77 1f       	adc	r23, r23
    17a4:	88 1f       	adc	r24, r24
    17a6:	99 1f       	adc	r25, r25
    17a8:	00 0f       	add	r16, r16
    17aa:	11 1f       	adc	r17, r17
    17ac:	22 1f       	adc	r18, r18
    17ae:	33 1f       	adc	r19, r19
    17b0:	00 0f       	add	r16, r16
    17b2:	11 1f       	adc	r17, r17
    17b4:	22 1f       	adc	r18, r18
    17b6:	33 1f       	adc	r19, r19
    17b8:	a9 01       	movw	r20, r18
    17ba:	98 01       	movw	r18, r16
    17bc:	22 0f       	add	r18, r18
    17be:	33 1f       	adc	r19, r19
    17c0:	44 1f       	adc	r20, r20
    17c2:	55 1f       	adc	r21, r21
    17c4:	22 0f       	add	r18, r18
    17c6:	33 1f       	adc	r19, r19
    17c8:	44 1f       	adc	r20, r20
    17ca:	55 1f       	adc	r21, r21
    17cc:	ef d6       	rcall	.+3550   	; 0x25ac <__udivmodsi4>
    17ce:	ba 01       	movw	r22, r20
    17d0:	a9 01       	movw	r20, r18
    17d2:	41 50       	subi	r20, 0x01	; 1
    17d4:	51 09       	sbc	r21, r1
    17d6:	61 09       	sbc	r22, r1
    17d8:	71 09       	sbc	r23, r1
    17da:	57 ff       	sbrs	r21, 7
    17dc:	06 c0       	rjmp	.+12     	; 0x17ea <UART0_init+0x86>
    17de:	82 e0       	ldi	r24, 0x02	; 2
    17e0:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
    17e4:	5f 77       	andi	r21, 0x7F	; 127
    17e6:	66 27       	eor	r22, r22
    17e8:	77 27       	eor	r23, r23
    17ea:	bb 27       	eor	r27, r27
    17ec:	a7 2f       	mov	r26, r23
    17ee:	96 2f       	mov	r25, r22
    17f0:	85 2f       	mov	r24, r21
    17f2:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
    17f6:	40 93 c4 00 	sts	0x00C4, r20	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
    17fa:	88 e9       	ldi	r24, 0x98	; 152
    17fc:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    1800:	86 e0       	ldi	r24, 0x06	; 6
    1802:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
    1806:	1f 91       	pop	r17
    1808:	0f 91       	pop	r16
    180a:	08 95       	ret

0000180c <UART0_putc>:
    180c:	40 91 81 07 	lds	r20, 0x0781	; 0x800781 <UART_TxHead>
    1810:	50 e0       	ldi	r21, 0x00	; 0
    1812:	4f 5f       	subi	r20, 0xFF	; 255
    1814:	5f 4f       	sbci	r21, 0xFF	; 255
    1816:	4f 77       	andi	r20, 0x7F	; 127
    1818:	55 27       	eor	r21, r21
    181a:	20 91 80 07 	lds	r18, 0x0780	; 0x800780 <UART_TxTail>
    181e:	30 e0       	ldi	r19, 0x00	; 0
    1820:	42 17       	cp	r20, r18
    1822:	53 07       	cpc	r21, r19
    1824:	d1 f3       	breq	.-12     	; 0x181a <UART0_putc+0xe>
    1826:	fa 01       	movw	r30, r20
    1828:	ee 5f       	subi	r30, 0xFE	; 254
    182a:	f7 4f       	sbci	r31, 0xF7	; 247
    182c:	80 83       	st	Z, r24
    182e:	40 93 81 07 	sts	0x0781, r20	; 0x800781 <UART_TxHead>
    1832:	e1 ec       	ldi	r30, 0xC1	; 193
    1834:	f0 e0       	ldi	r31, 0x00	; 0
    1836:	80 81       	ld	r24, Z
    1838:	80 62       	ori	r24, 0x20	; 32
    183a:	80 83       	st	Z, r24
    183c:	08 95       	ret

0000183e <UART0_OutUDec>:
    183e:	0f 93       	push	r16
    1840:	1f 93       	push	r17
    1842:	cf 93       	push	r28
    1844:	df 93       	push	r29
    1846:	6a 30       	cpi	r22, 0x0A	; 10
    1848:	71 05       	cpc	r23, r1
    184a:	81 05       	cpc	r24, r1
    184c:	91 05       	cpc	r25, r1
    184e:	50 f0       	brcs	.+20     	; 0x1864 <UART0_OutUDec+0x26>
    1850:	2a e0       	ldi	r18, 0x0A	; 10
    1852:	30 e0       	ldi	r19, 0x00	; 0
    1854:	40 e0       	ldi	r20, 0x00	; 0
    1856:	50 e0       	ldi	r21, 0x00	; 0
    1858:	a9 d6       	rcall	.+3410   	; 0x25ac <__udivmodsi4>
    185a:	06 2f       	mov	r16, r22
    185c:	ca 01       	movw	r24, r20
    185e:	b9 01       	movw	r22, r18
    1860:	ee df       	rcall	.-36     	; 0x183e <UART0_OutUDec>
    1862:	60 2f       	mov	r22, r16
    1864:	80 e3       	ldi	r24, 0x30	; 48
    1866:	86 0f       	add	r24, r22
    1868:	d1 df       	rcall	.-94     	; 0x180c <UART0_putc>
    186a:	df 91       	pop	r29
    186c:	cf 91       	pop	r28
    186e:	1f 91       	pop	r17
    1870:	0f 91       	pop	r16
    1872:	08 95       	ret

00001874 <UART0_puts>:
    1874:	cf 93       	push	r28
    1876:	df 93       	push	r29
    1878:	ec 01       	movw	r28, r24
    187a:	88 81       	ld	r24, Y
    187c:	88 23       	and	r24, r24
    187e:	29 f0       	breq	.+10     	; 0x188a <UART0_puts+0x16>
    1880:	21 96       	adiw	r28, 0x01	; 1
    1882:	c4 df       	rcall	.-120    	; 0x180c <UART0_putc>
    1884:	89 91       	ld	r24, Y+
    1886:	81 11       	cpse	r24, r1
    1888:	fc cf       	rjmp	.-8      	; 0x1882 <UART0_puts+0xe>
    188a:	df 91       	pop	r29
    188c:	cf 91       	pop	r28
    188e:	08 95       	ret

00001890 <__vector_36>:
    1890:	1f 92       	push	r1
    1892:	0f 92       	push	r0
    1894:	0f b6       	in	r0, 0x3f	; 63
    1896:	0f 92       	push	r0
    1898:	11 24       	eor	r1, r1
    189a:	0b b6       	in	r0, 0x3b	; 59
    189c:	0f 92       	push	r0
    189e:	2f 93       	push	r18
    18a0:	3f 93       	push	r19
    18a2:	4f 93       	push	r20
    18a4:	5f 93       	push	r21
    18a6:	8f 93       	push	r24
    18a8:	9f 93       	push	r25
    18aa:	ef 93       	push	r30
    18ac:	ff 93       	push	r31
    18ae:	20 91 c8 00 	lds	r18, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
    18b2:	30 91 ce 00 	lds	r19, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    18b6:	28 71       	andi	r18, 0x18	; 24
    18b8:	80 91 7a 06 	lds	r24, 0x067A	; 0x80067a <UART1_RxHead>
    18bc:	90 e0       	ldi	r25, 0x00	; 0
    18be:	01 96       	adiw	r24, 0x01	; 1
    18c0:	8f 77       	andi	r24, 0x7F	; 127
    18c2:	99 27       	eor	r25, r25
    18c4:	40 91 79 06 	lds	r20, 0x0679	; 0x800679 <UART1_RxTail>
    18c8:	50 e0       	ldi	r21, 0x00	; 0
    18ca:	84 17       	cp	r24, r20
    18cc:	95 07       	cpc	r25, r21
    18ce:	39 f0       	breq	.+14     	; 0x18de <__vector_36+0x4e>
    18d0:	80 93 7a 06 	sts	0x067A, r24	; 0x80067a <UART1_RxHead>
    18d4:	fc 01       	movw	r30, r24
    18d6:	e3 58       	subi	r30, 0x83	; 131
    18d8:	f9 4f       	sbci	r31, 0xF9	; 249
    18da:	30 83       	st	Z, r19
    18dc:	01 c0       	rjmp	.+2      	; 0x18e0 <__vector_36+0x50>
    18de:	22 e0       	ldi	r18, 0x02	; 2
    18e0:	20 93 78 06 	sts	0x0678, r18	; 0x800678 <UART1_LastRxError>
    18e4:	ff 91       	pop	r31
    18e6:	ef 91       	pop	r30
    18e8:	9f 91       	pop	r25
    18ea:	8f 91       	pop	r24
    18ec:	5f 91       	pop	r21
    18ee:	4f 91       	pop	r20
    18f0:	3f 91       	pop	r19
    18f2:	2f 91       	pop	r18
    18f4:	0f 90       	pop	r0
    18f6:	0b be       	out	0x3b, r0	; 59
    18f8:	0f 90       	pop	r0
    18fa:	0f be       	out	0x3f, r0	; 63
    18fc:	0f 90       	pop	r0
    18fe:	1f 90       	pop	r1
    1900:	18 95       	reti

00001902 <__vector_37>:
    1902:	1f 92       	push	r1
    1904:	0f 92       	push	r0
    1906:	0f b6       	in	r0, 0x3f	; 63
    1908:	0f 92       	push	r0
    190a:	11 24       	eor	r1, r1
    190c:	0b b6       	in	r0, 0x3b	; 59
    190e:	0f 92       	push	r0
    1910:	8f 93       	push	r24
    1912:	9f 93       	push	r25
    1914:	ef 93       	push	r30
    1916:	ff 93       	push	r31
    1918:	90 91 7c 06 	lds	r25, 0x067C	; 0x80067c <UART1_TxHead>
    191c:	80 91 7b 06 	lds	r24, 0x067B	; 0x80067b <UART1_TxTail>
    1920:	98 17       	cp	r25, r24
    1922:	89 f0       	breq	.+34     	; 0x1946 <__vector_37+0x44>
    1924:	80 91 7b 06 	lds	r24, 0x067B	; 0x80067b <UART1_TxTail>
    1928:	90 e0       	ldi	r25, 0x00	; 0
    192a:	01 96       	adiw	r24, 0x01	; 1
    192c:	8f 77       	andi	r24, 0x7F	; 127
    192e:	99 27       	eor	r25, r25
    1930:	80 93 7b 06 	sts	0x067B, r24	; 0x80067b <UART1_TxTail>
    1934:	fc 01       	movw	r30, r24
    1936:	e3 50       	subi	r30, 0x03	; 3
    1938:	f9 4f       	sbci	r31, 0xF9	; 249
    193a:	80 81       	ld	r24, Z
    193c:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    1940:	10 92 6c 04 	sts	0x046C, r1	; 0x80046c <UART1_Transmission_end>
    1944:	08 c0       	rjmp	.+16     	; 0x1956 <__vector_37+0x54>
    1946:	e9 ec       	ldi	r30, 0xC9	; 201
    1948:	f0 e0       	ldi	r31, 0x00	; 0
    194a:	80 81       	ld	r24, Z
    194c:	8f 7d       	andi	r24, 0xDF	; 223
    194e:	80 83       	st	Z, r24
    1950:	81 e0       	ldi	r24, 0x01	; 1
    1952:	80 93 6c 04 	sts	0x046C, r24	; 0x80046c <UART1_Transmission_end>
    1956:	ff 91       	pop	r31
    1958:	ef 91       	pop	r30
    195a:	9f 91       	pop	r25
    195c:	8f 91       	pop	r24
    195e:	0f 90       	pop	r0
    1960:	0b be       	out	0x3b, r0	; 59
    1962:	0f 90       	pop	r0
    1964:	0f be       	out	0x3f, r0	; 63
    1966:	0f 90       	pop	r0
    1968:	1f 90       	pop	r1
    196a:	18 95       	reti

0000196c <UART1_init>:
    196c:	0f 93       	push	r16
    196e:	1f 93       	push	r17
    1970:	8b 01       	movw	r16, r22
    1972:	9c 01       	movw	r18, r24
    1974:	f8 94       	cli
    1976:	10 92 7c 06 	sts	0x067C, r1	; 0x80067c <UART1_TxHead>
    197a:	10 92 7b 06 	sts	0x067B, r1	; 0x80067b <UART1_TxTail>
    197e:	10 92 7a 06 	sts	0x067A, r1	; 0x80067a <UART1_RxHead>
    1982:	10 92 79 06 	sts	0x0679, r1	; 0x800679 <UART1_RxTail>
    1986:	78 94       	sei
    1988:	dc 01       	movw	r26, r24
    198a:	cb 01       	movw	r24, r22
    198c:	80 58       	subi	r24, 0x80	; 128
    198e:	9b 47       	sbci	r25, 0x7B	; 123
    1990:	a1 4e       	sbci	r26, 0xE1	; 225
    1992:	bf 4f       	sbci	r27, 0xFF	; 255
    1994:	88 0f       	add	r24, r24
    1996:	99 1f       	adc	r25, r25
    1998:	aa 1f       	adc	r26, r26
    199a:	bb 1f       	adc	r27, r27
    199c:	88 0f       	add	r24, r24
    199e:	99 1f       	adc	r25, r25
    19a0:	aa 1f       	adc	r26, r26
    19a2:	bb 1f       	adc	r27, r27
    19a4:	bc 01       	movw	r22, r24
    19a6:	cd 01       	movw	r24, r26
    19a8:	66 0f       	add	r22, r22
    19aa:	77 1f       	adc	r23, r23
    19ac:	88 1f       	adc	r24, r24
    19ae:	99 1f       	adc	r25, r25
    19b0:	00 0f       	add	r16, r16
    19b2:	11 1f       	adc	r17, r17
    19b4:	22 1f       	adc	r18, r18
    19b6:	33 1f       	adc	r19, r19
    19b8:	00 0f       	add	r16, r16
    19ba:	11 1f       	adc	r17, r17
    19bc:	22 1f       	adc	r18, r18
    19be:	33 1f       	adc	r19, r19
    19c0:	a9 01       	movw	r20, r18
    19c2:	98 01       	movw	r18, r16
    19c4:	22 0f       	add	r18, r18
    19c6:	33 1f       	adc	r19, r19
    19c8:	44 1f       	adc	r20, r20
    19ca:	55 1f       	adc	r21, r21
    19cc:	22 0f       	add	r18, r18
    19ce:	33 1f       	adc	r19, r19
    19d0:	44 1f       	adc	r20, r20
    19d2:	55 1f       	adc	r21, r21
    19d4:	eb d5       	rcall	.+3030   	; 0x25ac <__udivmodsi4>
    19d6:	ba 01       	movw	r22, r20
    19d8:	a9 01       	movw	r20, r18
    19da:	41 50       	subi	r20, 0x01	; 1
    19dc:	51 09       	sbc	r21, r1
    19de:	61 09       	sbc	r22, r1
    19e0:	71 09       	sbc	r23, r1
    19e2:	57 ff       	sbrs	r21, 7
    19e4:	06 c0       	rjmp	.+12     	; 0x19f2 <UART1_init+0x86>
    19e6:	82 e0       	ldi	r24, 0x02	; 2
    19e8:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
    19ec:	5f 77       	andi	r21, 0x7F	; 127
    19ee:	66 27       	eor	r22, r22
    19f0:	77 27       	eor	r23, r23
    19f2:	bb 27       	eor	r27, r27
    19f4:	a7 2f       	mov	r26, r23
    19f6:	96 2f       	mov	r25, r22
    19f8:	85 2f       	mov	r24, r21
    19fa:	80 93 cd 00 	sts	0x00CD, r24	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7000cd>
    19fe:	40 93 cc 00 	sts	0x00CC, r20	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7000cc>
    1a02:	88 e9       	ldi	r24, 0x98	; 152
    1a04:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7000c9>
    1a08:	86 e0       	ldi	r24, 0x06	; 6
    1a0a:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7000ca>
    1a0e:	1f 91       	pop	r17
    1a10:	0f 91       	pop	r16
    1a12:	08 95       	ret

00001a14 <UART1_getc>:
    1a14:	f8 94       	cli
    1a16:	90 91 7a 06 	lds	r25, 0x067A	; 0x80067a <UART1_RxHead>
    1a1a:	80 91 79 06 	lds	r24, 0x0679	; 0x800679 <UART1_RxTail>
    1a1e:	98 13       	cpse	r25, r24
    1a20:	04 c0       	rjmp	.+8      	; 0x1a2a <UART1_getc+0x16>
    1a22:	78 94       	sei
    1a24:	80 e0       	ldi	r24, 0x00	; 0
    1a26:	91 e0       	ldi	r25, 0x01	; 1
    1a28:	08 95       	ret
    1a2a:	80 91 79 06 	lds	r24, 0x0679	; 0x800679 <UART1_RxTail>
    1a2e:	90 e0       	ldi	r25, 0x00	; 0
    1a30:	01 96       	adiw	r24, 0x01	; 1
    1a32:	8f 77       	andi	r24, 0x7F	; 127
    1a34:	99 27       	eor	r25, r25
    1a36:	80 93 79 06 	sts	0x0679, r24	; 0x800679 <UART1_RxTail>
    1a3a:	78 94       	sei
    1a3c:	fc 01       	movw	r30, r24
    1a3e:	e3 58       	subi	r30, 0x83	; 131
    1a40:	f9 4f       	sbci	r31, 0xF9	; 249
    1a42:	20 81       	ld	r18, Z
    1a44:	80 91 78 06 	lds	r24, 0x0678	; 0x800678 <UART1_LastRxError>
    1a48:	90 e0       	ldi	r25, 0x00	; 0
    1a4a:	98 2f       	mov	r25, r24
    1a4c:	88 27       	eor	r24, r24
    1a4e:	82 0f       	add	r24, r18
    1a50:	91 1d       	adc	r25, r1
    1a52:	08 95       	ret

00001a54 <UART1_putc>:
    1a54:	40 91 7c 06 	lds	r20, 0x067C	; 0x80067c <UART1_TxHead>
    1a58:	50 e0       	ldi	r21, 0x00	; 0
    1a5a:	4f 5f       	subi	r20, 0xFF	; 255
    1a5c:	5f 4f       	sbci	r21, 0xFF	; 255
    1a5e:	4f 77       	andi	r20, 0x7F	; 127
    1a60:	55 27       	eor	r21, r21
    1a62:	20 91 7b 06 	lds	r18, 0x067B	; 0x80067b <UART1_TxTail>
    1a66:	30 e0       	ldi	r19, 0x00	; 0
    1a68:	42 17       	cp	r20, r18
    1a6a:	53 07       	cpc	r21, r19
    1a6c:	d1 f3       	breq	.-12     	; 0x1a62 <UART1_putc+0xe>
    1a6e:	fa 01       	movw	r30, r20
    1a70:	e3 50       	subi	r30, 0x03	; 3
    1a72:	f9 4f       	sbci	r31, 0xF9	; 249
    1a74:	80 83       	st	Z, r24
    1a76:	40 93 7c 06 	sts	0x067C, r20	; 0x80067c <UART1_TxHead>
    1a7a:	e9 ec       	ldi	r30, 0xC9	; 201
    1a7c:	f0 e0       	ldi	r31, 0x00	; 0
    1a7e:	80 81       	ld	r24, Z
    1a80:	80 62       	ori	r24, 0x20	; 32
    1a82:	80 83       	st	Z, r24
    1a84:	08 95       	ret

00001a86 <UART1_available>:
    1a86:	f8 94       	cli
    1a88:	80 91 7a 06 	lds	r24, 0x067A	; 0x80067a <UART1_RxHead>
    1a8c:	20 91 79 06 	lds	r18, 0x0679	; 0x800679 <UART1_RxTail>
    1a90:	78 94       	sei
    1a92:	90 e0       	ldi	r25, 0x00	; 0
    1a94:	80 58       	subi	r24, 0x80	; 128
    1a96:	9f 4f       	sbci	r25, 0xFF	; 255
    1a98:	82 1b       	sub	r24, r18
    1a9a:	91 09       	sbc	r25, r1
    1a9c:	8f 77       	andi	r24, 0x7F	; 127
    1a9e:	99 27       	eor	r25, r25
    1aa0:	08 95       	ret

00001aa2 <UART1_flush>:
    1aa2:	80 91 6c 04 	lds	r24, 0x046C	; 0x80046c <UART1_Transmission_end>
    1aa6:	88 23       	and	r24, r24
    1aa8:	e1 f3       	breq	.-8      	; 0x1aa2 <UART1_flush>
    1aaa:	08 95       	ret

00001aac <__vector_51>:
    1aac:	1f 92       	push	r1
    1aae:	0f 92       	push	r0
    1ab0:	0f b6       	in	r0, 0x3f	; 63
    1ab2:	0f 92       	push	r0
    1ab4:	11 24       	eor	r1, r1
    1ab6:	0b b6       	in	r0, 0x3b	; 59
    1ab8:	0f 92       	push	r0
    1aba:	2f 93       	push	r18
    1abc:	3f 93       	push	r19
    1abe:	4f 93       	push	r20
    1ac0:	5f 93       	push	r21
    1ac2:	8f 93       	push	r24
    1ac4:	9f 93       	push	r25
    1ac6:	ef 93       	push	r30
    1ac8:	ff 93       	push	r31
    1aca:	20 91 d0 00 	lds	r18, 0x00D0	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7000d0>
    1ace:	30 91 d6 00 	lds	r19, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    1ad2:	28 71       	andi	r18, 0x18	; 24
    1ad4:	80 91 75 05 	lds	r24, 0x0575	; 0x800575 <UART2_RxHead>
    1ad8:	90 e0       	ldi	r25, 0x00	; 0
    1ada:	01 96       	adiw	r24, 0x01	; 1
    1adc:	8f 77       	andi	r24, 0x7F	; 127
    1ade:	99 27       	eor	r25, r25
    1ae0:	40 91 74 05 	lds	r20, 0x0574	; 0x800574 <UART2_RxTail>
    1ae4:	50 e0       	ldi	r21, 0x00	; 0
    1ae6:	84 17       	cp	r24, r20
    1ae8:	95 07       	cpc	r25, r21
    1aea:	39 f0       	breq	.+14     	; 0x1afa <__vector_51+0x4e>
    1aec:	80 93 75 05 	sts	0x0575, r24	; 0x800575 <UART2_RxHead>
    1af0:	fc 01       	movw	r30, r24
    1af2:	e8 58       	subi	r30, 0x88	; 136
    1af4:	fa 4f       	sbci	r31, 0xFA	; 250
    1af6:	30 83       	st	Z, r19
    1af8:	01 c0       	rjmp	.+2      	; 0x1afc <__vector_51+0x50>
    1afa:	22 e0       	ldi	r18, 0x02	; 2
    1afc:	20 93 73 05 	sts	0x0573, r18	; 0x800573 <UART2_LastRxError>
    1b00:	ff 91       	pop	r31
    1b02:	ef 91       	pop	r30
    1b04:	9f 91       	pop	r25
    1b06:	8f 91       	pop	r24
    1b08:	5f 91       	pop	r21
    1b0a:	4f 91       	pop	r20
    1b0c:	3f 91       	pop	r19
    1b0e:	2f 91       	pop	r18
    1b10:	0f 90       	pop	r0
    1b12:	0b be       	out	0x3b, r0	; 59
    1b14:	0f 90       	pop	r0
    1b16:	0f be       	out	0x3f, r0	; 63
    1b18:	0f 90       	pop	r0
    1b1a:	1f 90       	pop	r1
    1b1c:	18 95       	reti

00001b1e <__vector_52>:
    1b1e:	1f 92       	push	r1
    1b20:	0f 92       	push	r0
    1b22:	0f b6       	in	r0, 0x3f	; 63
    1b24:	0f 92       	push	r0
    1b26:	11 24       	eor	r1, r1
    1b28:	0b b6       	in	r0, 0x3b	; 59
    1b2a:	0f 92       	push	r0
    1b2c:	8f 93       	push	r24
    1b2e:	9f 93       	push	r25
    1b30:	ef 93       	push	r30
    1b32:	ff 93       	push	r31
    1b34:	90 91 77 05 	lds	r25, 0x0577	; 0x800577 <UART2_TxHead>
    1b38:	80 91 76 05 	lds	r24, 0x0576	; 0x800576 <UART2_TxTail>
    1b3c:	98 17       	cp	r25, r24
    1b3e:	89 f0       	breq	.+34     	; 0x1b62 <__vector_52+0x44>
    1b40:	80 91 76 05 	lds	r24, 0x0576	; 0x800576 <UART2_TxTail>
    1b44:	90 e0       	ldi	r25, 0x00	; 0
    1b46:	01 96       	adiw	r24, 0x01	; 1
    1b48:	8f 77       	andi	r24, 0x7F	; 127
    1b4a:	99 27       	eor	r25, r25
    1b4c:	80 93 76 05 	sts	0x0576, r24	; 0x800576 <UART2_TxTail>
    1b50:	fc 01       	movw	r30, r24
    1b52:	e8 50       	subi	r30, 0x08	; 8
    1b54:	fa 4f       	sbci	r31, 0xFA	; 250
    1b56:	80 81       	ld	r24, Z
    1b58:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    1b5c:	10 92 6b 04 	sts	0x046B, r1	; 0x80046b <UART2_Transmission_end>
    1b60:	08 c0       	rjmp	.+16     	; 0x1b72 <__vector_52+0x54>
    1b62:	e1 ed       	ldi	r30, 0xD1	; 209
    1b64:	f0 e0       	ldi	r31, 0x00	; 0
    1b66:	80 81       	ld	r24, Z
    1b68:	8f 7d       	andi	r24, 0xDF	; 223
    1b6a:	80 83       	st	Z, r24
    1b6c:	81 e0       	ldi	r24, 0x01	; 1
    1b6e:	80 93 6b 04 	sts	0x046B, r24	; 0x80046b <UART2_Transmission_end>
    1b72:	ff 91       	pop	r31
    1b74:	ef 91       	pop	r30
    1b76:	9f 91       	pop	r25
    1b78:	8f 91       	pop	r24
    1b7a:	0f 90       	pop	r0
    1b7c:	0b be       	out	0x3b, r0	; 59
    1b7e:	0f 90       	pop	r0
    1b80:	0f be       	out	0x3f, r0	; 63
    1b82:	0f 90       	pop	r0
    1b84:	1f 90       	pop	r1
    1b86:	18 95       	reti

00001b88 <UART2_init>:
    1b88:	0f 93       	push	r16
    1b8a:	1f 93       	push	r17
    1b8c:	8b 01       	movw	r16, r22
    1b8e:	9c 01       	movw	r18, r24
    1b90:	f8 94       	cli
    1b92:	10 92 77 05 	sts	0x0577, r1	; 0x800577 <UART2_TxHead>
    1b96:	10 92 76 05 	sts	0x0576, r1	; 0x800576 <UART2_TxTail>
    1b9a:	10 92 75 05 	sts	0x0575, r1	; 0x800575 <UART2_RxHead>
    1b9e:	10 92 74 05 	sts	0x0574, r1	; 0x800574 <UART2_RxTail>
    1ba2:	78 94       	sei
    1ba4:	dc 01       	movw	r26, r24
    1ba6:	cb 01       	movw	r24, r22
    1ba8:	80 58       	subi	r24, 0x80	; 128
    1baa:	9b 47       	sbci	r25, 0x7B	; 123
    1bac:	a1 4e       	sbci	r26, 0xE1	; 225
    1bae:	bf 4f       	sbci	r27, 0xFF	; 255
    1bb0:	88 0f       	add	r24, r24
    1bb2:	99 1f       	adc	r25, r25
    1bb4:	aa 1f       	adc	r26, r26
    1bb6:	bb 1f       	adc	r27, r27
    1bb8:	88 0f       	add	r24, r24
    1bba:	99 1f       	adc	r25, r25
    1bbc:	aa 1f       	adc	r26, r26
    1bbe:	bb 1f       	adc	r27, r27
    1bc0:	bc 01       	movw	r22, r24
    1bc2:	cd 01       	movw	r24, r26
    1bc4:	66 0f       	add	r22, r22
    1bc6:	77 1f       	adc	r23, r23
    1bc8:	88 1f       	adc	r24, r24
    1bca:	99 1f       	adc	r25, r25
    1bcc:	00 0f       	add	r16, r16
    1bce:	11 1f       	adc	r17, r17
    1bd0:	22 1f       	adc	r18, r18
    1bd2:	33 1f       	adc	r19, r19
    1bd4:	00 0f       	add	r16, r16
    1bd6:	11 1f       	adc	r17, r17
    1bd8:	22 1f       	adc	r18, r18
    1bda:	33 1f       	adc	r19, r19
    1bdc:	a9 01       	movw	r20, r18
    1bde:	98 01       	movw	r18, r16
    1be0:	22 0f       	add	r18, r18
    1be2:	33 1f       	adc	r19, r19
    1be4:	44 1f       	adc	r20, r20
    1be6:	55 1f       	adc	r21, r21
    1be8:	22 0f       	add	r18, r18
    1bea:	33 1f       	adc	r19, r19
    1bec:	44 1f       	adc	r20, r20
    1bee:	55 1f       	adc	r21, r21
    1bf0:	dd d4       	rcall	.+2490   	; 0x25ac <__udivmodsi4>
    1bf2:	ba 01       	movw	r22, r20
    1bf4:	a9 01       	movw	r20, r18
    1bf6:	41 50       	subi	r20, 0x01	; 1
    1bf8:	51 09       	sbc	r21, r1
    1bfa:	61 09       	sbc	r22, r1
    1bfc:	71 09       	sbc	r23, r1
    1bfe:	57 ff       	sbrs	r21, 7
    1c00:	06 c0       	rjmp	.+12     	; 0x1c0e <UART2_init+0x86>
    1c02:	82 e0       	ldi	r24, 0x02	; 2
    1c04:	80 93 d0 00 	sts	0x00D0, r24	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7000d0>
    1c08:	5f 77       	andi	r21, 0x7F	; 127
    1c0a:	66 27       	eor	r22, r22
    1c0c:	77 27       	eor	r23, r23
    1c0e:	bb 27       	eor	r27, r27
    1c10:	a7 2f       	mov	r26, r23
    1c12:	96 2f       	mov	r25, r22
    1c14:	85 2f       	mov	r24, r21
    1c16:	80 93 d5 00 	sts	0x00D5, r24	; 0x8000d5 <__TEXT_REGION_LENGTH__+0x7000d5>
    1c1a:	40 93 d4 00 	sts	0x00D4, r20	; 0x8000d4 <__TEXT_REGION_LENGTH__+0x7000d4>
    1c1e:	88 e9       	ldi	r24, 0x98	; 152
    1c20:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7000d1>
    1c24:	86 e0       	ldi	r24, 0x06	; 6
    1c26:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7000d2>
    1c2a:	1f 91       	pop	r17
    1c2c:	0f 91       	pop	r16
    1c2e:	08 95       	ret

00001c30 <UART2_getc>:
    1c30:	90 91 75 05 	lds	r25, 0x0575	; 0x800575 <UART2_RxHead>
    1c34:	80 91 74 05 	lds	r24, 0x0574	; 0x800574 <UART2_RxTail>
    1c38:	98 17       	cp	r25, r24
    1c3a:	a1 f0       	breq	.+40     	; 0x1c64 <UART2_getc+0x34>
    1c3c:	80 91 74 05 	lds	r24, 0x0574	; 0x800574 <UART2_RxTail>
    1c40:	90 e0       	ldi	r25, 0x00	; 0
    1c42:	01 96       	adiw	r24, 0x01	; 1
    1c44:	8f 77       	andi	r24, 0x7F	; 127
    1c46:	99 27       	eor	r25, r25
    1c48:	80 93 74 05 	sts	0x0574, r24	; 0x800574 <UART2_RxTail>
    1c4c:	fc 01       	movw	r30, r24
    1c4e:	e8 58       	subi	r30, 0x88	; 136
    1c50:	fa 4f       	sbci	r31, 0xFA	; 250
    1c52:	20 81       	ld	r18, Z
    1c54:	80 91 73 05 	lds	r24, 0x0573	; 0x800573 <UART2_LastRxError>
    1c58:	90 e0       	ldi	r25, 0x00	; 0
    1c5a:	98 2f       	mov	r25, r24
    1c5c:	88 27       	eor	r24, r24
    1c5e:	82 0f       	add	r24, r18
    1c60:	91 1d       	adc	r25, r1
    1c62:	08 95       	ret
    1c64:	80 e0       	ldi	r24, 0x00	; 0
    1c66:	91 e0       	ldi	r25, 0x01	; 1
    1c68:	08 95       	ret

00001c6a <UART2_putc>:
    1c6a:	40 91 77 05 	lds	r20, 0x0577	; 0x800577 <UART2_TxHead>
    1c6e:	50 e0       	ldi	r21, 0x00	; 0
    1c70:	4f 5f       	subi	r20, 0xFF	; 255
    1c72:	5f 4f       	sbci	r21, 0xFF	; 255
    1c74:	4f 77       	andi	r20, 0x7F	; 127
    1c76:	55 27       	eor	r21, r21
    1c78:	20 91 76 05 	lds	r18, 0x0576	; 0x800576 <UART2_TxTail>
    1c7c:	30 e0       	ldi	r19, 0x00	; 0
    1c7e:	42 17       	cp	r20, r18
    1c80:	53 07       	cpc	r21, r19
    1c82:	d1 f3       	breq	.-12     	; 0x1c78 <UART2_putc+0xe>
    1c84:	fa 01       	movw	r30, r20
    1c86:	e8 50       	subi	r30, 0x08	; 8
    1c88:	fa 4f       	sbci	r31, 0xFA	; 250
    1c8a:	80 83       	st	Z, r24
    1c8c:	40 93 77 05 	sts	0x0577, r20	; 0x800577 <UART2_TxHead>
    1c90:	e1 ed       	ldi	r30, 0xD1	; 209
    1c92:	f0 e0       	ldi	r31, 0x00	; 0
    1c94:	80 81       	ld	r24, Z
    1c96:	80 62       	ori	r24, 0x20	; 32
    1c98:	80 83       	st	Z, r24
    1c9a:	08 95       	ret

00001c9c <UART2_available>:
    1c9c:	f8 94       	cli
    1c9e:	80 91 75 05 	lds	r24, 0x0575	; 0x800575 <UART2_RxHead>
    1ca2:	20 91 74 05 	lds	r18, 0x0574	; 0x800574 <UART2_RxTail>
    1ca6:	78 94       	sei
    1ca8:	90 e0       	ldi	r25, 0x00	; 0
    1caa:	80 58       	subi	r24, 0x80	; 128
    1cac:	9f 4f       	sbci	r25, 0xFF	; 255
    1cae:	82 1b       	sub	r24, r18
    1cb0:	91 09       	sbc	r25, r1
    1cb2:	8f 77       	andi	r24, 0x7F	; 127
    1cb4:	99 27       	eor	r25, r25
    1cb6:	08 95       	ret

00001cb8 <UART2_flush>:
    1cb8:	80 91 6b 04 	lds	r24, 0x046B	; 0x80046b <UART2_Transmission_end>
    1cbc:	88 23       	and	r24, r24
    1cbe:	e1 f3       	breq	.-8      	; 0x1cb8 <UART2_flush>
    1cc0:	08 95       	ret

00001cc2 <__vector_54>:
    1cc2:	1f 92       	push	r1
    1cc4:	0f 92       	push	r0
    1cc6:	0f b6       	in	r0, 0x3f	; 63
    1cc8:	0f 92       	push	r0
    1cca:	11 24       	eor	r1, r1
    1ccc:	0b b6       	in	r0, 0x3b	; 59
    1cce:	0f 92       	push	r0
    1cd0:	2f 93       	push	r18
    1cd2:	3f 93       	push	r19
    1cd4:	4f 93       	push	r20
    1cd6:	5f 93       	push	r21
    1cd8:	8f 93       	push	r24
    1cda:	9f 93       	push	r25
    1cdc:	ef 93       	push	r30
    1cde:	ff 93       	push	r31
    1ce0:	20 91 30 01 	lds	r18, 0x0130	; 0x800130 <__TEXT_REGION_LENGTH__+0x700130>
    1ce4:	30 91 36 01 	lds	r19, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    1ce8:	28 71       	andi	r18, 0x18	; 24
    1cea:	80 91 70 04 	lds	r24, 0x0470	; 0x800470 <UART3_RxHead>
    1cee:	90 e0       	ldi	r25, 0x00	; 0
    1cf0:	01 96       	adiw	r24, 0x01	; 1
    1cf2:	8f 77       	andi	r24, 0x7F	; 127
    1cf4:	99 27       	eor	r25, r25
    1cf6:	40 91 6f 04 	lds	r20, 0x046F	; 0x80046f <UART3_RxTail>
    1cfa:	50 e0       	ldi	r21, 0x00	; 0
    1cfc:	84 17       	cp	r24, r20
    1cfe:	95 07       	cpc	r25, r21
    1d00:	39 f0       	breq	.+14     	; 0x1d10 <__vector_54+0x4e>
    1d02:	80 93 70 04 	sts	0x0470, r24	; 0x800470 <UART3_RxHead>
    1d06:	fc 01       	movw	r30, r24
    1d08:	ed 58       	subi	r30, 0x8D	; 141
    1d0a:	fb 4f       	sbci	r31, 0xFB	; 251
    1d0c:	30 83       	st	Z, r19
    1d0e:	01 c0       	rjmp	.+2      	; 0x1d12 <__vector_54+0x50>
    1d10:	22 e0       	ldi	r18, 0x02	; 2
    1d12:	20 93 6e 04 	sts	0x046E, r18	; 0x80046e <UART3_LastRxError>
    1d16:	ff 91       	pop	r31
    1d18:	ef 91       	pop	r30
    1d1a:	9f 91       	pop	r25
    1d1c:	8f 91       	pop	r24
    1d1e:	5f 91       	pop	r21
    1d20:	4f 91       	pop	r20
    1d22:	3f 91       	pop	r19
    1d24:	2f 91       	pop	r18
    1d26:	0f 90       	pop	r0
    1d28:	0b be       	out	0x3b, r0	; 59
    1d2a:	0f 90       	pop	r0
    1d2c:	0f be       	out	0x3f, r0	; 63
    1d2e:	0f 90       	pop	r0
    1d30:	1f 90       	pop	r1
    1d32:	18 95       	reti

00001d34 <__vector_55>:
    1d34:	1f 92       	push	r1
    1d36:	0f 92       	push	r0
    1d38:	0f b6       	in	r0, 0x3f	; 63
    1d3a:	0f 92       	push	r0
    1d3c:	11 24       	eor	r1, r1
    1d3e:	0b b6       	in	r0, 0x3b	; 59
    1d40:	0f 92       	push	r0
    1d42:	8f 93       	push	r24
    1d44:	9f 93       	push	r25
    1d46:	ef 93       	push	r30
    1d48:	ff 93       	push	r31
    1d4a:	90 91 72 04 	lds	r25, 0x0472	; 0x800472 <UART3_TxHead>
    1d4e:	80 91 71 04 	lds	r24, 0x0471	; 0x800471 <UART3_TxTail>
    1d52:	98 17       	cp	r25, r24
    1d54:	89 f0       	breq	.+34     	; 0x1d78 <__vector_55+0x44>
    1d56:	80 91 71 04 	lds	r24, 0x0471	; 0x800471 <UART3_TxTail>
    1d5a:	90 e0       	ldi	r25, 0x00	; 0
    1d5c:	01 96       	adiw	r24, 0x01	; 1
    1d5e:	8f 77       	andi	r24, 0x7F	; 127
    1d60:	99 27       	eor	r25, r25
    1d62:	80 93 71 04 	sts	0x0471, r24	; 0x800471 <UART3_TxTail>
    1d66:	fc 01       	movw	r30, r24
    1d68:	ed 50       	subi	r30, 0x0D	; 13
    1d6a:	fb 4f       	sbci	r31, 0xFB	; 251
    1d6c:	80 81       	ld	r24, Z
    1d6e:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    1d72:	10 92 6a 04 	sts	0x046A, r1	; 0x80046a <UART3_Transmission_end>
    1d76:	08 c0       	rjmp	.+16     	; 0x1d88 <__vector_55+0x54>
    1d78:	e1 e3       	ldi	r30, 0x31	; 49
    1d7a:	f1 e0       	ldi	r31, 0x01	; 1
    1d7c:	80 81       	ld	r24, Z
    1d7e:	8f 7d       	andi	r24, 0xDF	; 223
    1d80:	80 83       	st	Z, r24
    1d82:	81 e0       	ldi	r24, 0x01	; 1
    1d84:	80 93 6a 04 	sts	0x046A, r24	; 0x80046a <UART3_Transmission_end>
    1d88:	ff 91       	pop	r31
    1d8a:	ef 91       	pop	r30
    1d8c:	9f 91       	pop	r25
    1d8e:	8f 91       	pop	r24
    1d90:	0f 90       	pop	r0
    1d92:	0b be       	out	0x3b, r0	; 59
    1d94:	0f 90       	pop	r0
    1d96:	0f be       	out	0x3f, r0	; 63
    1d98:	0f 90       	pop	r0
    1d9a:	1f 90       	pop	r1
    1d9c:	18 95       	reti

00001d9e <UART3_init>:
    1d9e:	0f 93       	push	r16
    1da0:	1f 93       	push	r17
    1da2:	8b 01       	movw	r16, r22
    1da4:	9c 01       	movw	r18, r24
    1da6:	f8 94       	cli
    1da8:	10 92 72 04 	sts	0x0472, r1	; 0x800472 <UART3_TxHead>
    1dac:	10 92 71 04 	sts	0x0471, r1	; 0x800471 <UART3_TxTail>
    1db0:	10 92 70 04 	sts	0x0470, r1	; 0x800470 <UART3_RxHead>
    1db4:	10 92 6f 04 	sts	0x046F, r1	; 0x80046f <UART3_RxTail>
    1db8:	78 94       	sei
    1dba:	dc 01       	movw	r26, r24
    1dbc:	cb 01       	movw	r24, r22
    1dbe:	80 58       	subi	r24, 0x80	; 128
    1dc0:	9b 47       	sbci	r25, 0x7B	; 123
    1dc2:	a1 4e       	sbci	r26, 0xE1	; 225
    1dc4:	bf 4f       	sbci	r27, 0xFF	; 255
    1dc6:	88 0f       	add	r24, r24
    1dc8:	99 1f       	adc	r25, r25
    1dca:	aa 1f       	adc	r26, r26
    1dcc:	bb 1f       	adc	r27, r27
    1dce:	88 0f       	add	r24, r24
    1dd0:	99 1f       	adc	r25, r25
    1dd2:	aa 1f       	adc	r26, r26
    1dd4:	bb 1f       	adc	r27, r27
    1dd6:	bc 01       	movw	r22, r24
    1dd8:	cd 01       	movw	r24, r26
    1dda:	66 0f       	add	r22, r22
    1ddc:	77 1f       	adc	r23, r23
    1dde:	88 1f       	adc	r24, r24
    1de0:	99 1f       	adc	r25, r25
    1de2:	00 0f       	add	r16, r16
    1de4:	11 1f       	adc	r17, r17
    1de6:	22 1f       	adc	r18, r18
    1de8:	33 1f       	adc	r19, r19
    1dea:	00 0f       	add	r16, r16
    1dec:	11 1f       	adc	r17, r17
    1dee:	22 1f       	adc	r18, r18
    1df0:	33 1f       	adc	r19, r19
    1df2:	a9 01       	movw	r20, r18
    1df4:	98 01       	movw	r18, r16
    1df6:	22 0f       	add	r18, r18
    1df8:	33 1f       	adc	r19, r19
    1dfa:	44 1f       	adc	r20, r20
    1dfc:	55 1f       	adc	r21, r21
    1dfe:	22 0f       	add	r18, r18
    1e00:	33 1f       	adc	r19, r19
    1e02:	44 1f       	adc	r20, r20
    1e04:	55 1f       	adc	r21, r21
    1e06:	d2 d3       	rcall	.+1956   	; 0x25ac <__udivmodsi4>
    1e08:	ba 01       	movw	r22, r20
    1e0a:	a9 01       	movw	r20, r18
    1e0c:	41 50       	subi	r20, 0x01	; 1
    1e0e:	51 09       	sbc	r21, r1
    1e10:	61 09       	sbc	r22, r1
    1e12:	71 09       	sbc	r23, r1
    1e14:	57 ff       	sbrs	r21, 7
    1e16:	06 c0       	rjmp	.+12     	; 0x1e24 <UART3_init+0x86>
    1e18:	82 e0       	ldi	r24, 0x02	; 2
    1e1a:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <__TEXT_REGION_LENGTH__+0x700130>
    1e1e:	5f 77       	andi	r21, 0x7F	; 127
    1e20:	66 27       	eor	r22, r22
    1e22:	77 27       	eor	r23, r23
    1e24:	bb 27       	eor	r27, r27
    1e26:	a7 2f       	mov	r26, r23
    1e28:	96 2f       	mov	r25, r22
    1e2a:	85 2f       	mov	r24, r21
    1e2c:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <__TEXT_REGION_LENGTH__+0x700135>
    1e30:	40 93 34 01 	sts	0x0134, r20	; 0x800134 <__TEXT_REGION_LENGTH__+0x700134>
    1e34:	88 e9       	ldi	r24, 0x98	; 152
    1e36:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <__TEXT_REGION_LENGTH__+0x700131>
    1e3a:	86 e0       	ldi	r24, 0x06	; 6
    1e3c:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <__TEXT_REGION_LENGTH__+0x700132>
    1e40:	1f 91       	pop	r17
    1e42:	0f 91       	pop	r16
    1e44:	08 95       	ret

00001e46 <UART3_getc>:
    1e46:	90 91 70 04 	lds	r25, 0x0470	; 0x800470 <UART3_RxHead>
    1e4a:	80 91 6f 04 	lds	r24, 0x046F	; 0x80046f <UART3_RxTail>
    1e4e:	98 17       	cp	r25, r24
    1e50:	a1 f0       	breq	.+40     	; 0x1e7a <UART3_getc+0x34>
    1e52:	80 91 6f 04 	lds	r24, 0x046F	; 0x80046f <UART3_RxTail>
    1e56:	90 e0       	ldi	r25, 0x00	; 0
    1e58:	01 96       	adiw	r24, 0x01	; 1
    1e5a:	8f 77       	andi	r24, 0x7F	; 127
    1e5c:	99 27       	eor	r25, r25
    1e5e:	80 93 6f 04 	sts	0x046F, r24	; 0x80046f <UART3_RxTail>
    1e62:	fc 01       	movw	r30, r24
    1e64:	ed 58       	subi	r30, 0x8D	; 141
    1e66:	fb 4f       	sbci	r31, 0xFB	; 251
    1e68:	20 81       	ld	r18, Z
    1e6a:	80 91 6e 04 	lds	r24, 0x046E	; 0x80046e <UART3_LastRxError>
    1e6e:	90 e0       	ldi	r25, 0x00	; 0
    1e70:	98 2f       	mov	r25, r24
    1e72:	88 27       	eor	r24, r24
    1e74:	82 0f       	add	r24, r18
    1e76:	91 1d       	adc	r25, r1
    1e78:	08 95       	ret
    1e7a:	80 e0       	ldi	r24, 0x00	; 0
    1e7c:	91 e0       	ldi	r25, 0x01	; 1
    1e7e:	08 95       	ret

00001e80 <UART3_putc>:
    1e80:	40 91 72 04 	lds	r20, 0x0472	; 0x800472 <UART3_TxHead>
    1e84:	50 e0       	ldi	r21, 0x00	; 0
    1e86:	4f 5f       	subi	r20, 0xFF	; 255
    1e88:	5f 4f       	sbci	r21, 0xFF	; 255
    1e8a:	4f 77       	andi	r20, 0x7F	; 127
    1e8c:	55 27       	eor	r21, r21
    1e8e:	20 91 71 04 	lds	r18, 0x0471	; 0x800471 <UART3_TxTail>
    1e92:	30 e0       	ldi	r19, 0x00	; 0
    1e94:	42 17       	cp	r20, r18
    1e96:	53 07       	cpc	r21, r19
    1e98:	d1 f3       	breq	.-12     	; 0x1e8e <UART3_putc+0xe>
    1e9a:	fa 01       	movw	r30, r20
    1e9c:	ed 50       	subi	r30, 0x0D	; 13
    1e9e:	fb 4f       	sbci	r31, 0xFB	; 251
    1ea0:	80 83       	st	Z, r24
    1ea2:	40 93 72 04 	sts	0x0472, r20	; 0x800472 <UART3_TxHead>
    1ea6:	e1 e3       	ldi	r30, 0x31	; 49
    1ea8:	f1 e0       	ldi	r31, 0x01	; 1
    1eaa:	80 81       	ld	r24, Z
    1eac:	80 62       	ori	r24, 0x20	; 32
    1eae:	80 83       	st	Z, r24
    1eb0:	08 95       	ret

00001eb2 <UART3_available>:
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1eb2:	f8 94       	cli
uint16_t UART3_available(void)
{
	uint16_t ret;
	
	ATOMIC_BLOCK(ATOMIC_FORCEON) {
		ret = (UART_RX3_BUFFER_SIZE + UART3_RxHead - UART3_RxTail) & UART_RX3_BUFFER_MASK;
    1eb4:	80 91 70 04 	lds	r24, 0x0470	; 0x800470 <UART3_RxHead>
    1eb8:	20 91 6f 04 	lds	r18, 0x046F	; 0x80046f <UART3_RxTail>
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
    1ebc:	78 94       	sei
	}
	return ret;
    1ebe:	90 e0       	ldi	r25, 0x00	; 0
    1ec0:	80 58       	subi	r24, 0x80	; 128
    1ec2:	9f 4f       	sbci	r25, 0xFF	; 255
    1ec4:	82 1b       	sub	r24, r18
    1ec6:	91 09       	sbc	r25, r1
} /* UART3_available */
    1ec8:	8f 77       	andi	r24, 0x7F	; 127
    1eca:	99 27       	eor	r25, r25
    1ecc:	08 95       	ret

00001ece <UART3_flush>:
void UART3_flush(void)
{
//	ATOMIC_BLOCK(ATOMIC_FORCEON) {
//		UART3_RxHead = UART3_RxTail;
//	} commented by mohab
	while(0 == UART3_Transmission_end);
    1ece:	80 91 6a 04 	lds	r24, 0x046A	; 0x80046a <UART3_Transmission_end>
    1ed2:	88 23       	and	r24, r24
    1ed4:	e1 f3       	breq	.-8      	; 0x1ece <UART3_flush>
} /* UART3_flush */
    1ed6:	08 95       	ret

00001ed8 <RTE_get_Drum_speed>:



uint16_t RTE_get_Drum_speed(void){
	return Drum_speed;
}
    1ed8:	80 91 82 08 	lds	r24, 0x0882	; 0x800882 <Drum_speed>
    1edc:	90 91 83 08 	lds	r25, 0x0883	; 0x800883 <Drum_speed+0x1>
    1ee0:	08 95       	ret

00001ee2 <RTE_set_Drum_speed>:

void RTE_set_Drum_speed(uint16_t U16rteDrumSpeed){
	Drum_speed = U16rteDrumSpeed;
    1ee2:	90 93 83 08 	sts	0x0883, r25	; 0x800883 <Drum_speed+0x1>
    1ee6:	80 93 82 08 	sts	0x0882, r24	; 0x800882 <Drum_speed>
    1eea:	08 95       	ret

00001eec <RTE_set_Gear_ratio>:




void RTE_set_Gear_ratio(uint16_t u16GearRatio){
	Gear_ratio = u16GearRatio;
    1eec:	90 93 8f 08 	sts	0x088F, r25	; 0x80088f <Gear_ratio+0x1>
    1ef0:	80 93 8e 08 	sts	0x088E, r24	; 0x80088e <Gear_ratio>
    1ef4:	08 95       	ret

00001ef6 <RTE_get_Gear_ratio>:
}

uint16_t RTE_get_Gear_ratio(void){
	//xSemaphoreTake(Sema_Gear_ratio_handle,portMAX_DELAY);
	return Gear_ratio;
}
    1ef6:	80 91 8e 08 	lds	r24, 0x088E	; 0x80088e <Gear_ratio>
    1efa:	90 91 8f 08 	lds	r25, 0x088F	; 0x80088f <Gear_ratio+0x1>
    1efe:	08 95       	ret

00001f00 <RTE_set_RPM_max>:




void RTE_set_RPM_max(uint16_t u16RPMmax){
	RPM_max = u16RPMmax;
    1f00:	90 93 8d 08 	sts	0x088D, r25	; 0x80088d <RPM_max+0x1>
    1f04:	80 93 8c 08 	sts	0x088C, r24	; 0x80088c <RPM_max>
    1f08:	08 95       	ret

00001f0a <RTE_get_RPM_max>:
}

uint16_t RTE_get_RPM_max(void){
	//xSemaphoreTake(Sema_RPM_max_handle,portMAX_DELAY);
	return RPM_max;
}
    1f0a:	80 91 8c 08 	lds	r24, 0x088C	; 0x80088c <RPM_max>
    1f0e:	90 91 8d 08 	lds	r25, 0x088D	; 0x80088d <RPM_max+0x1>
    1f12:	08 95       	ret

00001f14 <RTE_set_Conveyor_length>:


void RTE_set_Conveyor_length(uint16_t u16ConveyorLength){
	Conveyor_length = u16ConveyorLength;
    1f14:	90 93 8b 08 	sts	0x088B, r25	; 0x80088b <Conveyor_length+0x1>
    1f18:	80 93 8a 08 	sts	0x088A, r24	; 0x80088a <Conveyor_length>
    1f1c:	08 95       	ret

00001f1e <RTE_get_Conveyor_length>:
	//xSemaphoreGive(Sema_Conveyor_length_handle);
}
uint16_t RTE_get_Conveyor_length(void){
	//xSemaphoreTake(Sema_Conveyor_length_handle,portMAX_DELAY);
	return Conveyor_length;
}
    1f1e:	80 91 8a 08 	lds	r24, 0x088A	; 0x80088a <Conveyor_length>
    1f22:	90 91 8b 08 	lds	r25, 0x088B	; 0x80088b <Conveyor_length+0x1>
    1f26:	08 95       	ret

00001f28 <RTE_set_Driver_diameter>:


void RTE_set_Driver_diameter(uint16_t u16Driverdiameter){
	Driver_diameter = u16Driverdiameter;
    1f28:	90 93 89 08 	sts	0x0889, r25	; 0x800889 <Driver_diameter+0x1>
    1f2c:	80 93 88 08 	sts	0x0888, r24	; 0x800888 <Driver_diameter>
    1f30:	08 95       	ret

00001f32 <RTE_get_Driver_diameter>:
}

uint16_t RTE_get_Driver_diameter(void){
	//xSemaphoreTake(Sema_Driver_diameter_handle,portMAX_DELAY);
	return Driver_diameter;
}
    1f32:	80 91 88 08 	lds	r24, 0x0888	; 0x800888 <Driver_diameter>
    1f36:	90 91 89 08 	lds	r25, 0x0889	; 0x800889 <Driver_diameter+0x1>
    1f3a:	08 95       	ret

00001f3c <RTE_set_Time_minute>:



void RTE_set_Time_minute(uint16_t u16Timeminute){
	Time_minute = u16Timeminute;
    1f3c:	90 93 87 08 	sts	0x0887, r25	; 0x800887 <Time_minute+0x1>
    1f40:	80 93 86 08 	sts	0x0886, r24	; 0x800886 <Time_minute>
    1f44:	08 95       	ret

00001f46 <RTE_get_Time_minute>:
}

uint16_t RTE_get_Time_minute(void){
	//xSemaphoreTake(Sema_Time_minute_handle,portMAX_DELAY);
	return Time_minute;
}
    1f46:	80 91 86 08 	lds	r24, 0x0886	; 0x800886 <Time_minute>
    1f4a:	90 91 87 08 	lds	r25, 0x0887	; 0x800887 <Time_minute+0x1>
    1f4e:	08 95       	ret

00001f50 <RTE_set_Time_second>:

void RTE_set_Time_second(uint16_t u16Timesecond){
	Time_second = u16Timesecond;
    1f50:	90 93 85 08 	sts	0x0885, r25	; 0x800885 <Time_second+0x1>
    1f54:	80 93 84 08 	sts	0x0884, r24	; 0x800884 <Time_second>
    1f58:	08 95       	ret

00001f5a <RTE_get_Time_second>:
}

uint16_t RTE_get_Time_second(void){
	//xSemaphoreTake(Sema_Time_second_handle,portMAX_DELAY);
	return Time_second;
}
    1f5a:	80 91 84 08 	lds	r24, 0x0884	; 0x800884 <Time_second>
    1f5e:	90 91 85 08 	lds	r25, 0x0885	; 0x800885 <Time_second+0x1>
    1f62:	08 95       	ret

00001f64 <RTE_set_System_on>:
}



void RTE_set_System_on(uint16_t u16System_on){
	System_on = u16System_on;
    1f64:	90 93 97 08 	sts	0x0897, r25	; 0x800897 <System_on+0x1>
    1f68:	80 93 96 08 	sts	0x0896, r24	; 0x800896 <System_on>
    1f6c:	08 95       	ret

00001f6e <RTE_get_System_on>:
}

uint16_t RTE_get_System_on(void){
	//xSemaphoreTake(Sema_System_on_handle,portMAX_DELAY);
	return System_on;
}
    1f6e:	80 91 96 08 	lds	r24, 0x0896	; 0x800896 <System_on>
    1f72:	90 91 97 08 	lds	r25, 0x0897	; 0x800897 <System_on+0x1>
    1f76:	08 95       	ret

00001f78 <RTE_set_Start_blancher_Operation>:




void RTE_set_Start_blancher_Operation(uint16_t u16Start_blancher_Operation){
	Start_blancher_Operation = u16Start_blancher_Operation;
    1f78:	90 93 95 08 	sts	0x0895, r25	; 0x800895 <Start_blancher_Operation+0x1>
    1f7c:	80 93 94 08 	sts	0x0894, r24	; 0x800894 <Start_blancher_Operation>
    1f80:	08 95       	ret

00001f82 <RTE_get_Start_blancher_Operation>:
}

uint16_t RTE_get_Start_blancher_Operation(void){
	//xSemaphoreTake(Sema_Start_blancher_Operation_handle,portMAX_DELAY);
	return Start_blancher_Operation;
}
    1f82:	80 91 94 08 	lds	r24, 0x0894	; 0x800894 <Start_blancher_Operation>
    1f86:	90 91 95 08 	lds	r25, 0x0895	; 0x800895 <Start_blancher_Operation+0x1>
    1f8a:	08 95       	ret

00001f8c <RTE_set_Wash_Operation>:




void RTE_set_Wash_Operation(uint16_t u16Wash_Operation){
	Wash_Operation = u16Wash_Operation;
    1f8c:	90 93 93 08 	sts	0x0893, r25	; 0x800893 <Wash_Operation+0x1>
    1f90:	80 93 92 08 	sts	0x0892, r24	; 0x800892 <Wash_Operation>
    1f94:	08 95       	ret

00001f96 <RTE_get_Wash_Operation>:
}

uint16_t RTE_get_Wash_Operation(void){
	//xSemaphoreTake(Sema_Wash_Operation_handle,portMAX_DELAY);
	return Wash_Operation;
}
    1f96:	80 91 92 08 	lds	r24, 0x0892	; 0x800892 <Wash_Operation>
    1f9a:	90 91 93 08 	lds	r25, 0x0893	; 0x800893 <Wash_Operation+0x1>
    1f9e:	08 95       	ret

00001fa0 <RTE_set_Tank_Calibration_Operation>:




void RTE_set_Tank_Calibration_Operation(uint16_t u16Tank_Calibration_Operation){
	Tank_Calibration_Operation = u16Tank_Calibration_Operation;
    1fa0:	90 93 91 08 	sts	0x0891, r25	; 0x800891 <Tank_Calibration_Operation+0x1>
    1fa4:	80 93 90 08 	sts	0x0890, r24	; 0x800890 <Tank_Calibration_Operation>
    1fa8:	08 95       	ret

00001faa <RTE_get_Tank_Calibration_Operation>:
}

uint16_t RTE_get_Tank_Calibration_Operation(void){
	//xSemaphoreTake(Sema_Tank_Calibration_Operation_handle,portMAX_DELAY);
	return Tank_Calibration_Operation;
}
    1faa:	80 91 90 08 	lds	r24, 0x0890	; 0x800890 <Tank_Calibration_Operation>
    1fae:	90 91 91 08 	lds	r25, 0x0891	; 0x800891 <Tank_Calibration_Operation+0x1>
    1fb2:	08 95       	ret

00001fb4 <RTE_set_Sleep_temperature>:
}



void RTE_set_Sleep_temperature(uint16_t u16sleepTemp){
	Sleep_temp = u16sleepTemp;
    1fb4:	90 93 a5 08 	sts	0x08A5, r25	; 0x8008a5 <Sleep_temp+0x1>
    1fb8:	80 93 a4 08 	sts	0x08A4, r24	; 0x8008a4 <Sleep_temp>
    1fbc:	08 95       	ret

00001fbe <RTE_get_Sleep_temperature>:
}

uint16_t RTE_get_Sleep_temperature(void){
	//xSemaphoreTake(Sema_Sleep_temp_handle,portMAX_DELAY);
	return Sleep_temp;
}
    1fbe:	80 91 a4 08 	lds	r24, 0x08A4	; 0x8008a4 <Sleep_temp>
    1fc2:	90 91 a5 08 	lds	r25, 0x08A5	; 0x8008a5 <Sleep_temp+0x1>
    1fc6:	08 95       	ret

00001fc8 <RTE_set_Set_temperature>:



void RTE_set_Set_temperature(uint16_t u16setTemp){
	Set_temp = u16setTemp;
    1fc8:	90 93 a3 08 	sts	0x08A3, r25	; 0x8008a3 <Set_temp+0x1>
    1fcc:	80 93 a2 08 	sts	0x08A2, r24	; 0x8008a2 <Set_temp>
    1fd0:	08 95       	ret

00001fd2 <RTE_get_Set_temperature>:
}

uint16_t RTE_get_Set_temperature(void){
	//xSemaphoreTake(Sema_Set_temp_handle,portMAX_DELAY);
	return Set_temp;
}
    1fd2:	80 91 a2 08 	lds	r24, 0x08A2	; 0x8008a2 <Set_temp>
    1fd6:	90 91 a3 08 	lds	r25, 0x08A3	; 0x8008a3 <Set_temp+0x1>
    1fda:	08 95       	ret

00001fdc <RTE_set_Threshold_set_temperature>:




void RTE_set_Threshold_set_temperature(uint16_t u16thresholdsetTemp){
	Threshold_set_temp = u16thresholdsetTemp;
    1fdc:	90 93 a1 08 	sts	0x08A1, r25	; 0x8008a1 <Threshold_set_temp+0x1>
    1fe0:	80 93 a0 08 	sts	0x08A0, r24	; 0x8008a0 <Threshold_set_temp>
    1fe4:	08 95       	ret

00001fe6 <RTE_get_Threshold_set_temperature>:
}

uint16_t RTE_get_Threshold_set_temperature(void){
	//xSemaphoreTake(Sema_threshold_set_temp_handle,portMAX_DELAY);
	return Threshold_set_temp;
}
    1fe6:	80 91 a0 08 	lds	r24, 0x08A0	; 0x8008a0 <Threshold_set_temp>
    1fea:	90 91 a1 08 	lds	r25, 0x08A1	; 0x8008a1 <Threshold_set_temp+0x1>
    1fee:	08 95       	ret

00001ff0 <RTE_set_Threshold_sleep_temperature>:



void RTE_set_Threshold_sleep_temperature(uint16_t u16thresholdsleepTemp){
	Threshold_sleep_temp = u16thresholdsleepTemp;
    1ff0:	90 93 9f 08 	sts	0x089F, r25	; 0x80089f <Threshold_sleep_temp+0x1>
    1ff4:	80 93 9e 08 	sts	0x089E, r24	; 0x80089e <Threshold_sleep_temp>
    1ff8:	08 95       	ret

00001ffa <RTE_get_Threshold_sleep_temperature>:
}

uint16_t RTE_get_Threshold_sleep_temperature(void){
	//xSemaphoreTake(Sema_threshold_sleep_temp_handle,portMAX_DELAY);
	return Threshold_sleep_temp;
}
    1ffa:	80 91 9e 08 	lds	r24, 0x089E	; 0x80089e <Threshold_sleep_temp>
    1ffe:	90 91 9f 08 	lds	r25, 0x089F	; 0x80089f <Threshold_sleep_temp+0x1>
    2002:	08 95       	ret

00002004 <RTE_set_Positive_offset_temperature>:



void RTE_set_Positive_offset_temperature(uint16_t u16positiveOffsetTemp){
	Positive_offset_temp = u16positiveOffsetTemp;
    2004:	90 93 9d 08 	sts	0x089D, r25	; 0x80089d <Positive_offset_temp+0x1>
    2008:	80 93 9c 08 	sts	0x089C, r24	; 0x80089c <Positive_offset_temp>
    200c:	08 95       	ret

0000200e <RTE_get_Positive_offset_temperature>:
}

uint16_t RTE_get_Positive_offset_temperature(void){
	//xSemaphoreTake(Sema_Positive_offset_temp_handle,portMAX_DELAY);
	return Positive_offset_temp;
}
    200e:	80 91 9c 08 	lds	r24, 0x089C	; 0x80089c <Positive_offset_temp>
    2012:	90 91 9d 08 	lds	r25, 0x089D	; 0x80089d <Positive_offset_temp+0x1>
    2016:	08 95       	ret

00002018 <RTE_set_Negative_offset_temperature>:


void RTE_set_Negative_offset_temperature(uint16_t u16negativeOffsetTemp){
	Negative_offset_temp = u16negativeOffsetTemp;
    2018:	90 93 9b 08 	sts	0x089B, r25	; 0x80089b <Negative_offset_temp+0x1>
    201c:	80 93 9a 08 	sts	0x089A, r24	; 0x80089a <Negative_offset_temp>
    2020:	08 95       	ret

00002022 <RTE_get_Negative_offset_temperature>:
}

uint16_t RTE_get_Negative_offset_temperature(void){
	//xSemaphoreTake(Sema_Negative_offset_temp_handle,portMAX_DELAY);
	return Negative_offset_temp;
}
    2022:	80 91 9a 08 	lds	r24, 0x089A	; 0x80089a <Negative_offset_temp>
    2026:	90 91 9b 08 	lds	r25, 0x089B	; 0x80089b <Negative_offset_temp+0x1>
    202a:	08 95       	ret

0000202c <RTE_set_Current_temperature>:




void RTE_set_Current_temperature(uint16_t u16Currenttemp){
	Current_temperature = u16Currenttemp;
    202c:	90 93 99 08 	sts	0x0899, r25	; 0x800899 <Current_temperature+0x1>
    2030:	80 93 98 08 	sts	0x0898, r24	; 0x800898 <Current_temperature>
    2034:	08 95       	ret

00002036 <RTE_get_Current_temperature>:
}

uint16_t RTE_get_Current_temperature(void){
	return Current_temperature;
}
    2036:	80 91 98 08 	lds	r24, 0x0898	; 0x800898 <Current_temperature>
    203a:	90 91 99 08 	lds	r25, 0x0899	; 0x800899 <Current_temperature+0x1>
    203e:	08 95       	ret

00002040 <vApplicationStackOverflowHook>:
	   This routine will never return.
	   This routine is referenced in the task.c file of FreeRTOS as an extern.
	\*---------------------------------------------------------------------------*/

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
	DDRB  |= _BV(DDB7);
    2040:	27 9a       	sbi	0x04, 7	; 4
	PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    2042:	2f 9a       	sbi	0x05, 7	; 5
    2044:	2f ef       	ldi	r18, 0xFF	; 255
    2046:	87 ea       	ldi	r24, 0xA7	; 167
    2048:	91 e6       	ldi	r25, 0x61	; 97
    204a:	21 50       	subi	r18, 0x01	; 1
    204c:	80 40       	sbci	r24, 0x00	; 0
    204e:	90 40       	sbci	r25, 0x00	; 0
    2050:	e1 f7       	brne	.-8      	; 0x204a <vApplicationStackOverflowHook+0xa>
    2052:	00 c0       	rjmp	.+0      	; 0x2054 <vApplicationStackOverflowHook+0x14>
    2054:	00 00       	nop
	for(;;)
	{
		_delay_ms(2000);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
		PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED slow blink.
    2056:	1f 9a       	sbi	0x03, 7	; 3
    2058:	f5 cf       	rjmp	.-22     	; 0x2044 <vApplicationStackOverflowHook+0x4>

0000205a <vListInsertEnd>:
    /* Remember which list the item is in.  This allows fast removal of the
    item later. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
    205a:	cf 93       	push	r28
    205c:	df 93       	push	r29
    205e:	9c 01       	movw	r18, r24
    2060:	fb 01       	movw	r30, r22
    2062:	dc 01       	movw	r26, r24
    2064:	11 96       	adiw	r26, 0x01	; 1
    2066:	cd 91       	ld	r28, X+
    2068:	dc 91       	ld	r29, X
    206a:	12 97       	sbiw	r26, 0x02	; 2
    206c:	d3 83       	std	Z+3, r29	; 0x03
    206e:	c2 83       	std	Z+2, r28	; 0x02
    2070:	8c 81       	ldd	r24, Y+4	; 0x04
    2072:	9d 81       	ldd	r25, Y+5	; 0x05
    2074:	95 83       	std	Z+5, r25	; 0x05
    2076:	84 83       	std	Z+4, r24	; 0x04
    2078:	8c 81       	ldd	r24, Y+4	; 0x04
    207a:	9d 81       	ldd	r25, Y+5	; 0x05
    207c:	dc 01       	movw	r26, r24
    207e:	13 96       	adiw	r26, 0x03	; 3
    2080:	7c 93       	st	X, r23
    2082:	6e 93       	st	-X, r22
    2084:	12 97       	sbiw	r26, 0x02	; 2
    2086:	7d 83       	std	Y+5, r23	; 0x05
    2088:	6c 83       	std	Y+4, r22	; 0x04
    208a:	31 87       	std	Z+9, r19	; 0x09
    208c:	20 87       	std	Z+8, r18	; 0x08
    208e:	f9 01       	movw	r30, r18
    2090:	80 81       	ld	r24, Z
    2092:	8f 5f       	subi	r24, 0xFF	; 255
    2094:	80 83       	st	Z, r24
    2096:	df 91       	pop	r29
    2098:	cf 91       	pop	r28
    209a:	08 95       	ret

0000209c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    209c:	cf 93       	push	r28
    209e:	df 93       	push	r29
    20a0:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
    20a2:	a0 85       	ldd	r26, Z+8	; 0x08
    20a4:	b1 85       	ldd	r27, Z+9	; 0x09

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    20a6:	c2 81       	ldd	r28, Z+2	; 0x02
    20a8:	d3 81       	ldd	r29, Z+3	; 0x03
    20aa:	84 81       	ldd	r24, Z+4	; 0x04
    20ac:	95 81       	ldd	r25, Z+5	; 0x05
    20ae:	9d 83       	std	Y+5, r25	; 0x05
    20b0:	8c 83       	std	Y+4, r24	; 0x04
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    20b2:	c4 81       	ldd	r28, Z+4	; 0x04
    20b4:	d5 81       	ldd	r29, Z+5	; 0x05
    20b6:	82 81       	ldd	r24, Z+2	; 0x02
    20b8:	93 81       	ldd	r25, Z+3	; 0x03
    20ba:	9b 83       	std	Y+3, r25	; 0x03
    20bc:	8a 83       	std	Y+2, r24	; 0x02

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
    20be:	11 96       	adiw	r26, 0x01	; 1
    20c0:	8d 91       	ld	r24, X+
    20c2:	9c 91       	ld	r25, X
    20c4:	12 97       	sbiw	r26, 0x02	; 2
    20c6:	e8 17       	cp	r30, r24
    20c8:	f9 07       	cpc	r31, r25
    20ca:	31 f4       	brne	.+12     	; 0x20d8 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
    20cc:	84 81       	ldd	r24, Z+4	; 0x04
    20ce:	95 81       	ldd	r25, Z+5	; 0x05
    20d0:	12 96       	adiw	r26, 0x02	; 2
    20d2:	9c 93       	st	X, r25
    20d4:	8e 93       	st	-X, r24
    20d6:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
    20d8:	11 86       	std	Z+9, r1	; 0x09
    20da:	10 86       	std	Z+8, r1	; 0x08
    ( pxList->uxNumberOfItems )--;
    20dc:	8c 91       	ld	r24, X
    20de:	81 50       	subi	r24, 0x01	; 1
    20e0:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
    20e2:	8c 91       	ld	r24, X
}
    20e4:	df 91       	pop	r29
    20e6:	cf 91       	pop	r28
    20e8:	08 95       	ret

000020ea <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    20ea:	0f 92       	push	r0
    20ec:	0f b6       	in	r0, 0x3f	; 63
    20ee:	f8 94       	cli
    20f0:	0f 92       	push	r0
    20f2:	0b b6       	in	r0, 0x3b	; 59
    20f4:	0f 92       	push	r0
    20f6:	0c b6       	in	r0, 0x3c	; 60
    20f8:	0f 92       	push	r0
    20fa:	1f 92       	push	r1
    20fc:	11 24       	eor	r1, r1
    20fe:	2f 92       	push	r2
    2100:	3f 92       	push	r3
    2102:	4f 92       	push	r4
    2104:	5f 92       	push	r5
    2106:	6f 92       	push	r6
    2108:	7f 92       	push	r7
    210a:	8f 92       	push	r8
    210c:	9f 92       	push	r9
    210e:	af 92       	push	r10
    2110:	bf 92       	push	r11
    2112:	cf 92       	push	r12
    2114:	df 92       	push	r13
    2116:	ef 92       	push	r14
    2118:	ff 92       	push	r15
    211a:	0f 93       	push	r16
    211c:	1f 93       	push	r17
    211e:	2f 93       	push	r18
    2120:	3f 93       	push	r19
    2122:	4f 93       	push	r20
    2124:	5f 93       	push	r21
    2126:	6f 93       	push	r22
    2128:	7f 93       	push	r23
    212a:	8f 93       	push	r24
    212c:	9f 93       	push	r25
    212e:	af 93       	push	r26
    2130:	bf 93       	push	r27
    2132:	cf 93       	push	r28
    2134:	df 93       	push	r29
    2136:	ef 93       	push	r30
    2138:	ff 93       	push	r31
    213a:	a0 91 d7 08 	lds	r26, 0x08D7	; 0x8008d7 <pxCurrentTCB>
    213e:	b0 91 d8 08 	lds	r27, 0x08D8	; 0x8008d8 <pxCurrentTCB+0x1>
    2142:	0d b6       	in	r0, 0x3d	; 61
    2144:	0d 92       	st	X+, r0
    2146:	0e b6       	in	r0, 0x3e	; 62
    2148:	0d 92       	st	X+, r0

	sleep_reset();		//	 reset the sleep_mode() faster than sleep_disable();
    214a:	13 be       	out	0x33, r1	; 51

	if( xTaskIncrementTick() != pdFALSE )
    214c:	52 d0       	rcall	.+164    	; 0x21f2 <xTaskIncrementTick>
    214e:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
    2150:	07 d1       	rcall	.+526    	; 0x2360 <vTaskSwitchContext>
    2152:	a0 91 d7 08 	lds	r26, 0x08D7	; 0x8008d7 <pxCurrentTCB>
	}

	portRESTORE_CONTEXT();
    2156:	b0 91 d8 08 	lds	r27, 0x08D8	; 0x8008d8 <pxCurrentTCB+0x1>
    215a:	cd 91       	ld	r28, X+
    215c:	cd bf       	out	0x3d, r28	; 61
    215e:	dd 91       	ld	r29, X+
    2160:	de bf       	out	0x3e, r29	; 62
    2162:	ff 91       	pop	r31
    2164:	ef 91       	pop	r30
    2166:	df 91       	pop	r29
    2168:	cf 91       	pop	r28
    216a:	bf 91       	pop	r27
    216c:	af 91       	pop	r26
    216e:	9f 91       	pop	r25
    2170:	8f 91       	pop	r24
    2172:	7f 91       	pop	r23
    2174:	6f 91       	pop	r22
    2176:	5f 91       	pop	r21
    2178:	4f 91       	pop	r20
    217a:	3f 91       	pop	r19
    217c:	2f 91       	pop	r18
    217e:	1f 91       	pop	r17
    2180:	0f 91       	pop	r16
    2182:	ff 90       	pop	r15
    2184:	ef 90       	pop	r14
    2186:	df 90       	pop	r13
    2188:	cf 90       	pop	r12
    218a:	bf 90       	pop	r11
    218c:	af 90       	pop	r10
    218e:	9f 90       	pop	r9
    2190:	8f 90       	pop	r8
    2192:	7f 90       	pop	r7
    2194:	6f 90       	pop	r6
    2196:	5f 90       	pop	r5
    2198:	4f 90       	pop	r4
    219a:	3f 90       	pop	r3
    219c:	2f 90       	pop	r2
    219e:	1f 90       	pop	r1
    21a0:	0f 90       	pop	r0
    21a2:	0c be       	out	0x3c, r0	; 60
    21a4:	0f 90       	pop	r0
    21a6:	0b be       	out	0x3b, r0	; 59
    21a8:	0f 90       	pop	r0
    21aa:	0f be       	out	0x3f, r0	; 63
    21ac:	0f 90       	pop	r0
    21ae:	08 95       	ret

000021b0 <__vector_12>:

	__asm__ __volatile__ ( "ret" );
    21b0:	9c df       	rcall	.-200    	; 0x20ea <vPortYieldFromTick>
//	ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
	ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
	ISR(portSCHEDULER_ISR)
	{
		vPortYieldFromTick();
		__asm__ __volatile__ ( "reti" );
    21b2:	18 95       	reti

000021b4 <prvResetNextTaskUnblockTime>:
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    21b4:	e0 91 b1 08 	lds	r30, 0x08B1	; 0x8008b1 <pxDelayedTaskList>
    21b8:	f0 91 b2 08 	lds	r31, 0x08B2	; 0x8008b2 <pxDelayedTaskList+0x1>
    21bc:	80 81       	ld	r24, Z
    21be:	81 11       	cpse	r24, r1
    21c0:	07 c0       	rjmp	.+14     	; 0x21d0 <prvResetNextTaskUnblockTime+0x1c>
    21c2:	8f ef       	ldi	r24, 0xFF	; 255
    21c4:	9f ef       	ldi	r25, 0xFF	; 255
    21c6:	90 93 a8 08 	sts	0x08A8, r25	; 0x8008a8 <xNextTaskUnblockTime+0x1>
    21ca:	80 93 a7 08 	sts	0x08A7, r24	; 0x8008a7 <xNextTaskUnblockTime>
    21ce:	08 95       	ret
    21d0:	e0 91 b1 08 	lds	r30, 0x08B1	; 0x8008b1 <pxDelayedTaskList>
    21d4:	f0 91 b2 08 	lds	r31, 0x08B2	; 0x8008b2 <pxDelayedTaskList+0x1>
    21d8:	05 80       	ldd	r0, Z+5	; 0x05
    21da:	f6 81       	ldd	r31, Z+6	; 0x06
    21dc:	e0 2d       	mov	r30, r0
    21de:	06 80       	ldd	r0, Z+6	; 0x06
    21e0:	f7 81       	ldd	r31, Z+7	; 0x07
    21e2:	e0 2d       	mov	r30, r0
    21e4:	82 81       	ldd	r24, Z+2	; 0x02
    21e6:	93 81       	ldd	r25, Z+3	; 0x03
    21e8:	90 93 a8 08 	sts	0x08A8, r25	; 0x8008a8 <xNextTaskUnblockTime+0x1>
    21ec:	80 93 a7 08 	sts	0x08A7, r24	; 0x8008a7 <xNextTaskUnblockTime>
    21f0:	08 95       	ret

000021f2 <xTaskIncrementTick>:
    21f2:	cf 92       	push	r12
    21f4:	df 92       	push	r13
    21f6:	ef 92       	push	r14
    21f8:	ff 92       	push	r15
    21fa:	0f 93       	push	r16
    21fc:	1f 93       	push	r17
    21fe:	cf 93       	push	r28
    2200:	df 93       	push	r29
    2202:	80 91 a6 08 	lds	r24, 0x08A6	; 0x8008a6 <uxSchedulerSuspended>
    2206:	81 11       	cpse	r24, r1
    2208:	95 c0       	rjmp	.+298    	; 0x2334 <__stack+0x135>
    220a:	e0 90 ad 08 	lds	r14, 0x08AD	; 0x8008ad <xTickCount>
    220e:	f0 90 ae 08 	lds	r15, 0x08AE	; 0x8008ae <xTickCount+0x1>
    2212:	8f ef       	ldi	r24, 0xFF	; 255
    2214:	e8 1a       	sub	r14, r24
    2216:	f8 0a       	sbc	r15, r24
    2218:	f0 92 ae 08 	sts	0x08AE, r15	; 0x8008ae <xTickCount+0x1>
    221c:	e0 92 ad 08 	sts	0x08AD, r14	; 0x8008ad <xTickCount>
    2220:	e1 14       	cp	r14, r1
    2222:	f1 04       	cpc	r15, r1
    2224:	b1 f4       	brne	.+44     	; 0x2252 <__stack+0x53>
    2226:	80 91 b1 08 	lds	r24, 0x08B1	; 0x8008b1 <pxDelayedTaskList>
    222a:	90 91 b2 08 	lds	r25, 0x08B2	; 0x8008b2 <pxDelayedTaskList+0x1>
    222e:	20 91 af 08 	lds	r18, 0x08AF	; 0x8008af <pxOverflowDelayedTaskList>
    2232:	30 91 b0 08 	lds	r19, 0x08B0	; 0x8008b0 <pxOverflowDelayedTaskList+0x1>
    2236:	30 93 b2 08 	sts	0x08B2, r19	; 0x8008b2 <pxDelayedTaskList+0x1>
    223a:	20 93 b1 08 	sts	0x08B1, r18	; 0x8008b1 <pxDelayedTaskList>
    223e:	90 93 b0 08 	sts	0x08B0, r25	; 0x8008b0 <pxOverflowDelayedTaskList+0x1>
    2242:	80 93 af 08 	sts	0x08AF, r24	; 0x8008af <pxOverflowDelayedTaskList>
    2246:	80 91 a9 08 	lds	r24, 0x08A9	; 0x8008a9 <xNumOfOverflows>
    224a:	8f 5f       	subi	r24, 0xFF	; 255
    224c:	80 93 a9 08 	sts	0x08A9, r24	; 0x8008a9 <xNumOfOverflows>
    2250:	b1 df       	rcall	.-158    	; 0x21b4 <prvResetNextTaskUnblockTime>
    2252:	80 91 a7 08 	lds	r24, 0x08A7	; 0x8008a7 <xNextTaskUnblockTime>
    2256:	90 91 a8 08 	lds	r25, 0x08A8	; 0x8008a8 <xNextTaskUnblockTime+0x1>
    225a:	e8 16       	cp	r14, r24
    225c:	f9 06       	cpc	r15, r25
    225e:	10 f4       	brcc	.+4      	; 0x2264 <__stack+0x65>
    2260:	d1 2c       	mov	r13, r1
    2262:	50 c0       	rjmp	.+160    	; 0x2304 <__stack+0x105>
    2264:	d1 2c       	mov	r13, r1
    2266:	cc 24       	eor	r12, r12
    2268:	c3 94       	inc	r12
    226a:	e0 91 b1 08 	lds	r30, 0x08B1	; 0x8008b1 <pxDelayedTaskList>
    226e:	f0 91 b2 08 	lds	r31, 0x08B2	; 0x8008b2 <pxDelayedTaskList+0x1>
    2272:	80 81       	ld	r24, Z
    2274:	81 11       	cpse	r24, r1
    2276:	07 c0       	rjmp	.+14     	; 0x2286 <__stack+0x87>
    2278:	8f ef       	ldi	r24, 0xFF	; 255
    227a:	9f ef       	ldi	r25, 0xFF	; 255
    227c:	90 93 a8 08 	sts	0x08A8, r25	; 0x8008a8 <xNextTaskUnblockTime+0x1>
    2280:	80 93 a7 08 	sts	0x08A7, r24	; 0x8008a7 <xNextTaskUnblockTime>
    2284:	3f c0       	rjmp	.+126    	; 0x2304 <__stack+0x105>
    2286:	e0 91 b1 08 	lds	r30, 0x08B1	; 0x8008b1 <pxDelayedTaskList>
    228a:	f0 91 b2 08 	lds	r31, 0x08B2	; 0x8008b2 <pxDelayedTaskList+0x1>
    228e:	05 80       	ldd	r0, Z+5	; 0x05
    2290:	f6 81       	ldd	r31, Z+6	; 0x06
    2292:	e0 2d       	mov	r30, r0
    2294:	c6 81       	ldd	r28, Z+6	; 0x06
    2296:	d7 81       	ldd	r29, Z+7	; 0x07
    2298:	8a 81       	ldd	r24, Y+2	; 0x02
    229a:	9b 81       	ldd	r25, Y+3	; 0x03
    229c:	e8 16       	cp	r14, r24
    229e:	f9 06       	cpc	r15, r25
    22a0:	28 f4       	brcc	.+10     	; 0x22ac <__stack+0xad>
    22a2:	90 93 a8 08 	sts	0x08A8, r25	; 0x8008a8 <xNextTaskUnblockTime+0x1>
    22a6:	80 93 a7 08 	sts	0x08A7, r24	; 0x8008a7 <xNextTaskUnblockTime>
    22aa:	2c c0       	rjmp	.+88     	; 0x2304 <__stack+0x105>
    22ac:	8e 01       	movw	r16, r28
    22ae:	0e 5f       	subi	r16, 0xFE	; 254
    22b0:	1f 4f       	sbci	r17, 0xFF	; 255
    22b2:	c8 01       	movw	r24, r16
    22b4:	f3 de       	rcall	.-538    	; 0x209c <uxListRemove>
    22b6:	8c 89       	ldd	r24, Y+20	; 0x14
    22b8:	9d 89       	ldd	r25, Y+21	; 0x15
    22ba:	89 2b       	or	r24, r25
    22bc:	19 f0       	breq	.+6      	; 0x22c4 <__stack+0xc5>
    22be:	ce 01       	movw	r24, r28
    22c0:	0c 96       	adiw	r24, 0x0c	; 12
    22c2:	ec de       	rcall	.-552    	; 0x209c <uxListRemove>
    22c4:	8e 89       	ldd	r24, Y+22	; 0x16
    22c6:	90 91 ac 08 	lds	r25, 0x08AC	; 0x8008ac <uxTopReadyPriority>
    22ca:	98 17       	cp	r25, r24
    22cc:	10 f4       	brcc	.+4      	; 0x22d2 <__stack+0xd3>
    22ce:	80 93 ac 08 	sts	0x08AC, r24	; 0x8008ac <uxTopReadyPriority>
    22d2:	90 e0       	ldi	r25, 0x00	; 0
    22d4:	9c 01       	movw	r18, r24
    22d6:	22 0f       	add	r18, r18
    22d8:	33 1f       	adc	r19, r19
    22da:	22 0f       	add	r18, r18
    22dc:	33 1f       	adc	r19, r19
    22de:	22 0f       	add	r18, r18
    22e0:	33 1f       	adc	r19, r19
    22e2:	82 0f       	add	r24, r18
    22e4:	93 1f       	adc	r25, r19
    22e6:	b8 01       	movw	r22, r16
    22e8:	8d 54       	subi	r24, 0x4D	; 77
    22ea:	97 4f       	sbci	r25, 0xF7	; 247
    22ec:	b6 de       	rcall	.-660    	; 0x205a <vListInsertEnd>
    22ee:	e0 91 d7 08 	lds	r30, 0x08D7	; 0x8008d7 <pxCurrentTCB>
    22f2:	f0 91 d8 08 	lds	r31, 0x08D8	; 0x8008d8 <pxCurrentTCB+0x1>
    22f6:	9e 89       	ldd	r25, Y+22	; 0x16
    22f8:	86 89       	ldd	r24, Z+22	; 0x16
    22fa:	98 17       	cp	r25, r24
    22fc:	08 f4       	brcc	.+2      	; 0x2300 <__stack+0x101>
    22fe:	b5 cf       	rjmp	.-150    	; 0x226a <__stack+0x6b>
    2300:	dc 2c       	mov	r13, r12
    2302:	b3 cf       	rjmp	.-154    	; 0x226a <__stack+0x6b>
    2304:	e0 91 d7 08 	lds	r30, 0x08D7	; 0x8008d7 <pxCurrentTCB>
    2308:	f0 91 d8 08 	lds	r31, 0x08D8	; 0x8008d8 <pxCurrentTCB+0x1>
    230c:	86 89       	ldd	r24, Z+22	; 0x16
    230e:	90 e0       	ldi	r25, 0x00	; 0
    2310:	fc 01       	movw	r30, r24
    2312:	ee 0f       	add	r30, r30
    2314:	ff 1f       	adc	r31, r31
    2316:	ee 0f       	add	r30, r30
    2318:	ff 1f       	adc	r31, r31
    231a:	ee 0f       	add	r30, r30
    231c:	ff 1f       	adc	r31, r31
    231e:	8e 0f       	add	r24, r30
    2320:	9f 1f       	adc	r25, r31
    2322:	fc 01       	movw	r30, r24
    2324:	ed 54       	subi	r30, 0x4D	; 77
    2326:	f7 4f       	sbci	r31, 0xF7	; 247
    2328:	80 81       	ld	r24, Z
    232a:	82 30       	cpi	r24, 0x02	; 2
    232c:	48 f0       	brcs	.+18     	; 0x2340 <__stack+0x141>
    232e:	dd 24       	eor	r13, r13
    2330:	d3 94       	inc	r13
    2332:	06 c0       	rjmp	.+12     	; 0x2340 <__stack+0x141>
    2334:	80 91 ab 08 	lds	r24, 0x08AB	; 0x8008ab <uxPendedTicks>
    2338:	8f 5f       	subi	r24, 0xFF	; 255
    233a:	80 93 ab 08 	sts	0x08AB, r24	; 0x8008ab <uxPendedTicks>
    233e:	d1 2c       	mov	r13, r1
    2340:	80 91 aa 08 	lds	r24, 0x08AA	; 0x8008aa <xYieldPending>
    2344:	88 23       	and	r24, r24
    2346:	11 f0       	breq	.+4      	; 0x234c <__stack+0x14d>
    2348:	dd 24       	eor	r13, r13
    234a:	d3 94       	inc	r13
    234c:	8d 2d       	mov	r24, r13
    234e:	df 91       	pop	r29
    2350:	cf 91       	pop	r28
    2352:	1f 91       	pop	r17
    2354:	0f 91       	pop	r16
    2356:	ff 90       	pop	r15
    2358:	ef 90       	pop	r14
    235a:	df 90       	pop	r13
    235c:	cf 90       	pop	r12
    235e:	08 95       	ret

00002360 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    2360:	80 91 a6 08 	lds	r24, 0x08A6	; 0x8008a6 <uxSchedulerSuspended>
    2364:	88 23       	and	r24, r24
    2366:	21 f0       	breq	.+8      	; 0x2370 <vTaskSwitchContext+0x10>
    {
        /* The scheduler is currently suspended - do not allow a context
        switch. */
        xYieldPending = pdTRUE;
    2368:	81 e0       	ldi	r24, 0x01	; 1
    236a:	80 93 aa 08 	sts	0x08AA, r24	; 0x8008aa <xYieldPending>
    236e:	08 95       	ret
    }
    else
    {
        xYieldPending = pdFALSE;
    2370:	10 92 aa 08 	sts	0x08AA, r1	; 0x8008aa <xYieldPending>
                ulTaskSwitchedInTime = ulTotalRunTime;
        }
        #endif /* configGENERATE_RUN_TIME_STATS */

        /* Check for stack overflow, if configured. */
        taskCHECK_FOR_STACK_OVERFLOW();
    2374:	a0 91 d7 08 	lds	r26, 0x08D7	; 0x8008d7 <pxCurrentTCB>
    2378:	b0 91 d8 08 	lds	r27, 0x08D8	; 0x8008d8 <pxCurrentTCB+0x1>
    237c:	e0 91 d7 08 	lds	r30, 0x08D7	; 0x8008d7 <pxCurrentTCB>
    2380:	f0 91 d8 08 	lds	r31, 0x08D8	; 0x8008d8 <pxCurrentTCB+0x1>
    2384:	2d 91       	ld	r18, X+
    2386:	3c 91       	ld	r19, X
    2388:	87 89       	ldd	r24, Z+23	; 0x17
    238a:	90 8d       	ldd	r25, Z+24	; 0x18
    238c:	82 17       	cp	r24, r18
    238e:	93 07       	cpc	r25, r19
    2390:	58 f0       	brcs	.+22     	; 0x23a8 <vTaskSwitchContext+0x48>
    2392:	60 91 d7 08 	lds	r22, 0x08D7	; 0x8008d7 <pxCurrentTCB>
    2396:	70 91 d8 08 	lds	r23, 0x08D8	; 0x8008d8 <pxCurrentTCB+0x1>
    239a:	80 91 d7 08 	lds	r24, 0x08D7	; 0x8008d7 <pxCurrentTCB>
    239e:	90 91 d8 08 	lds	r25, 0x08D8	; 0x8008d8 <pxCurrentTCB+0x1>
    23a2:	67 5e       	subi	r22, 0xE7	; 231
    23a4:	7f 4f       	sbci	r23, 0xFF	; 255
    23a6:	4c de       	rcall	.-872    	; 0x2040 <vApplicationStackOverflowHook>
        }
        #endif

        /* Select a new task to run using either the generic C or port
        optimised asm code. */
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    23a8:	20 91 ac 08 	lds	r18, 0x08AC	; 0x8008ac <uxTopReadyPriority>
    23ac:	82 2f       	mov	r24, r18
    23ae:	90 e0       	ldi	r25, 0x00	; 0
    23b0:	fc 01       	movw	r30, r24
    23b2:	ee 0f       	add	r30, r30
    23b4:	ff 1f       	adc	r31, r31
    23b6:	ee 0f       	add	r30, r30
    23b8:	ff 1f       	adc	r31, r31
    23ba:	ee 0f       	add	r30, r30
    23bc:	ff 1f       	adc	r31, r31
    23be:	e8 0f       	add	r30, r24
    23c0:	f9 1f       	adc	r31, r25
    23c2:	ed 54       	subi	r30, 0x4D	; 77
    23c4:	f7 4f       	sbci	r31, 0xF7	; 247
    23c6:	30 81       	ld	r19, Z
    23c8:	31 11       	cpse	r19, r1
    23ca:	11 c0       	rjmp	.+34     	; 0x23ee <vTaskSwitchContext+0x8e>
    23cc:	21 50       	subi	r18, 0x01	; 1
    23ce:	82 2f       	mov	r24, r18
    23d0:	90 e0       	ldi	r25, 0x00	; 0
    23d2:	fc 01       	movw	r30, r24
    23d4:	ee 0f       	add	r30, r30
    23d6:	ff 1f       	adc	r31, r31
    23d8:	ee 0f       	add	r30, r30
    23da:	ff 1f       	adc	r31, r31
    23dc:	ee 0f       	add	r30, r30
    23de:	ff 1f       	adc	r31, r31
    23e0:	e8 0f       	add	r30, r24
    23e2:	f9 1f       	adc	r31, r25
    23e4:	ed 54       	subi	r30, 0x4D	; 77
    23e6:	f7 4f       	sbci	r31, 0xF7	; 247
    23e8:	30 81       	ld	r19, Z
    23ea:	33 23       	and	r19, r19
    23ec:	79 f3       	breq	.-34     	; 0x23cc <vTaskSwitchContext+0x6c>
    23ee:	ac 01       	movw	r20, r24
    23f0:	44 0f       	add	r20, r20
    23f2:	55 1f       	adc	r21, r21
    23f4:	44 0f       	add	r20, r20
    23f6:	55 1f       	adc	r21, r21
    23f8:	44 0f       	add	r20, r20
    23fa:	55 1f       	adc	r21, r21
    23fc:	48 0f       	add	r20, r24
    23fe:	59 1f       	adc	r21, r25
    2400:	da 01       	movw	r26, r20
    2402:	ad 54       	subi	r26, 0x4D	; 77
    2404:	b7 4f       	sbci	r27, 0xF7	; 247
    2406:	11 96       	adiw	r26, 0x01	; 1
    2408:	ed 91       	ld	r30, X+
    240a:	fc 91       	ld	r31, X
    240c:	12 97       	sbiw	r26, 0x02	; 2
    240e:	02 80       	ldd	r0, Z+2	; 0x02
    2410:	f3 81       	ldd	r31, Z+3	; 0x03
    2412:	e0 2d       	mov	r30, r0
    2414:	12 96       	adiw	r26, 0x02	; 2
    2416:	fc 93       	st	X, r31
    2418:	ee 93       	st	-X, r30
    241a:	11 97       	sbiw	r26, 0x01	; 1
    241c:	4a 54       	subi	r20, 0x4A	; 74
    241e:	57 4f       	sbci	r21, 0xF7	; 247
    2420:	e4 17       	cp	r30, r20
    2422:	f5 07       	cpc	r31, r21
    2424:	29 f4       	brne	.+10     	; 0x2430 <vTaskSwitchContext+0xd0>
    2426:	42 81       	ldd	r20, Z+2	; 0x02
    2428:	53 81       	ldd	r21, Z+3	; 0x03
    242a:	fd 01       	movw	r30, r26
    242c:	52 83       	std	Z+2, r21	; 0x02
    242e:	41 83       	std	Z+1, r20	; 0x01
    2430:	fc 01       	movw	r30, r24
    2432:	ee 0f       	add	r30, r30
    2434:	ff 1f       	adc	r31, r31
    2436:	ee 0f       	add	r30, r30
    2438:	ff 1f       	adc	r31, r31
    243a:	ee 0f       	add	r30, r30
    243c:	ff 1f       	adc	r31, r31
    243e:	8e 0f       	add	r24, r30
    2440:	9f 1f       	adc	r25, r31
    2442:	fc 01       	movw	r30, r24
    2444:	ed 54       	subi	r30, 0x4D	; 77
    2446:	f7 4f       	sbci	r31, 0xF7	; 247
    2448:	01 80       	ldd	r0, Z+1	; 0x01
    244a:	f2 81       	ldd	r31, Z+2	; 0x02
    244c:	e0 2d       	mov	r30, r0
    244e:	86 81       	ldd	r24, Z+6	; 0x06
    2450:	97 81       	ldd	r25, Z+7	; 0x07
    2452:	90 93 d8 08 	sts	0x08D8, r25	; 0x8008d8 <pxCurrentTCB+0x1>
    2456:	80 93 d7 08 	sts	0x08D7, r24	; 0x8008d7 <pxCurrentTCB>
    245a:	20 93 ac 08 	sts	0x08AC, r18	; 0x8008ac <uxTopReadyPriority>
    245e:	08 95       	ret

00002460 <LCD_main>:
		s_Lcd_data_write.Drum_speed = RTE_get_Drum_speed();
		s_Lcd_data_write.Current_temperature = RTE_get_Current_temperature();
}

//#define __DEBUG
void LCD_main(void* pvParameters){
    2460:	cf 93       	push	r28
    2462:	df 93       	push	r29
s_LCD_DATA_WRITE_t   s_Lcd_data_write;

static void LCD_READ_Parameters(void){
	//call LCD_read_mutliple regs (fill the struct) and check for the errors //s_Lcd_data_read
	//set rte parameters
	Lcd_Read_multiple_data(LCD_START_READ_ADDRESS,(uint16_t*)&s_Lcd_data_read,LCD_READ_REGS_NUMBER);
    2464:	41 e1       	ldi	r20, 0x11	; 17
    2466:	69 e0       	ldi	r22, 0x09	; 9
    2468:	79 e0       	ldi	r23, 0x09	; 9
    246a:	81 e0       	ldi	r24, 0x01	; 1
    246c:	90 e0       	ldi	r25, 0x00	; 0
    246e:	0e 94 1f 02 	call	0x43e	; 0x43e <Lcd_Read_multiple_data>
}

//drum speed & current temp
//s_Lcd_data_read
static void LCD_RTE_FEED(void){
	RTE_set_Set_temperature(s_Lcd_data_read.Set_temp);
    2472:	c9 e0       	ldi	r28, 0x09	; 9
    2474:	d9 e0       	ldi	r29, 0x09	; 9
    2476:	8a 85       	ldd	r24, Y+10	; 0x0a
    2478:	9b 85       	ldd	r25, Y+11	; 0x0b
    247a:	a6 dd       	rcall	.-1204   	; 0x1fc8 <RTE_set_Set_temperature>
	RTE_set_Sleep_temperature(s_Lcd_data_read.Sleep_temp);
    247c:	88 85       	ldd	r24, Y+8	; 0x08
    247e:	99 85       	ldd	r25, Y+9	; 0x09
    2480:	99 dd       	rcall	.-1230   	; 0x1fb4 <RTE_set_Sleep_temperature>
	RTE_set_Threshold_set_temperature(s_Lcd_data_read.Threshold_set_temp);
    2482:	8c 85       	ldd	r24, Y+12	; 0x0c
    2484:	9d 85       	ldd	r25, Y+13	; 0x0d
    2486:	aa dd       	rcall	.-1196   	; 0x1fdc <RTE_set_Threshold_set_temperature>
	RTE_set_Threshold_sleep_temperature(s_Lcd_data_read.Threshold_sleep_temp);
    2488:	8e 85       	ldd	r24, Y+14	; 0x0e
    248a:	9f 85       	ldd	r25, Y+15	; 0x0f
    248c:	b1 dd       	rcall	.-1182   	; 0x1ff0 <RTE_set_Threshold_sleep_temperature>
	RTE_set_Negative_offset_temperature(s_Lcd_data_read.Negative_offset_temp);
    248e:	8a 89       	ldd	r24, Y+18	; 0x12
    2490:	9b 89       	ldd	r25, Y+19	; 0x13
    2492:	c2 dd       	rcall	.-1148   	; 0x2018 <RTE_set_Negative_offset_temperature>
	RTE_set_Positive_offset_temperature(s_Lcd_data_read.Positive_offset_temp);
    2494:	88 89       	ldd	r24, Y+16	; 0x10
    2496:	99 89       	ldd	r25, Y+17	; 0x11
    2498:	b5 dd       	rcall	.-1174   	; 0x2004 <RTE_set_Positive_offset_temperature>
	RTE_set_System_on(s_Lcd_data_read.System_on);
    249a:	88 81       	ld	r24, Y
    249c:	99 81       	ldd	r25, Y+1	; 0x01
    249e:	62 dd       	rcall	.-1340   	; 0x1f64 <RTE_set_System_on>
	RTE_set_Wash_Operation(s_Lcd_data_read.Wash_operation);
    24a0:	8c 81       	ldd	r24, Y+4	; 0x04
    24a2:	9d 81       	ldd	r25, Y+5	; 0x05
    24a4:	73 dd       	rcall	.-1306   	; 0x1f8c <RTE_set_Wash_Operation>
	RTE_set_Tank_Calibration_Operation(s_Lcd_data_read.Tank_calibration_operation);
    24a6:	8e 81       	ldd	r24, Y+6	; 0x06
    24a8:	9f 81       	ldd	r25, Y+7	; 0x07
    24aa:	7a dd       	rcall	.-1292   	; 0x1fa0 <RTE_set_Tank_Calibration_Operation>
	RTE_set_Gear_ratio(s_Lcd_data_read.Gear_ratio);
    24ac:	8c 89       	ldd	r24, Y+20	; 0x14
    24ae:	9d 89       	ldd	r25, Y+21	; 0x15
    24b0:	1d dd       	rcall	.-1478   	; 0x1eec <RTE_set_Gear_ratio>
	RTE_set_Conveyor_length(s_Lcd_data_read.Conveyor_length);
    24b2:	8e 89       	ldd	r24, Y+22	; 0x16
    24b4:	9f 89       	ldd	r25, Y+23	; 0x17
    24b6:	2e dd       	rcall	.-1444   	; 0x1f14 <RTE_set_Conveyor_length>
	RTE_set_Driver_diameter(s_Lcd_data_read.Driver_diameter);
    24b8:	88 8d       	ldd	r24, Y+24	; 0x18
    24ba:	99 8d       	ldd	r25, Y+25	; 0x19
    24bc:	35 dd       	rcall	.-1430   	; 0x1f28 <RTE_set_Driver_diameter>
	RTE_set_Time_minute(s_Lcd_data_read.Time_minute);
    24be:	8c 8d       	ldd	r24, Y+28	; 0x1c
    24c0:	9d 8d       	ldd	r25, Y+29	; 0x1d
    24c2:	3c dd       	rcall	.-1416   	; 0x1f3c <RTE_set_Time_minute>
	RTE_set_Time_second(s_Lcd_data_read.Time_second);
    24c4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    24c6:	9f 8d       	ldd	r25, Y+31	; 0x1f
    24c8:	43 dd       	rcall	.-1402   	; 0x1f50 <RTE_set_Time_second>
	RTE_set_RPM_max(s_Lcd_data_read.RPM_max);
    24ca:	8a 8d       	ldd	r24, Y+26	; 0x1a
    24cc:	9b 8d       	ldd	r25, Y+27	; 0x1b
    24ce:	18 dd       	rcall	.-1488   	; 0x1f00 <RTE_set_RPM_max>
    24d0:	8a 81       	ldd	r24, Y+2	; 0x02
	RTE_set_Start_blancher_Operation(s_Lcd_data_read.Start_blancher_operation);
    24d2:	9b 81       	ldd	r25, Y+3	; 0x03
    24d4:	51 dd       	rcall	.-1374   	; 0x1f78 <RTE_set_Start_blancher_Operation>
    24d6:	00 dd       	rcall	.-1536   	; 0x1ed8 <RTE_get_Drum_speed>
    24d8:	c5 e0       	ldi	r28, 0x05	; 5
}


static void LCD_RTE_COLLECT(void){
		s_Lcd_data_write.Drum_speed = RTE_get_Drum_speed();
    24da:	d9 e0       	ldi	r29, 0x09	; 9
    24dc:	99 83       	std	Y+1, r25	; 0x01
    24de:	88 83       	st	Y, r24
    24e0:	aa dd       	rcall	.-1196   	; 0x2036 <RTE_get_Current_temperature>
    24e2:	9b 83       	std	Y+3, r25	; 0x03
    24e4:	8a 83       	std	Y+2, r24	; 0x02
		s_Lcd_data_write.Current_temperature = RTE_get_Current_temperature();
    24e6:	42 e0       	ldi	r20, 0x02	; 2
    24e8:	be 01       	movw	r22, r28
    24ea:	80 e0       	ldi	r24, 0x00	; 0
    24ec:	9f e0       	ldi	r25, 0x0F	; 15
	
}


static void LCD_WRITE_Parameters(void){
	Lcd_Write_multiple_data(LCD_START_WRITE_ADDRESS,(uint16_t*)&s_Lcd_data_write,LCD_WRITE_REGS_NUMBER);
    24ee:	0e 94 4a 02 	call	0x494	; 0x494 <Lcd_Write_multiple_data>
    24f2:	2f ef       	ldi	r18, 0xFF	; 255
    24f4:	87 ea       	ldi	r24, 0xA7	; 167
    24f6:	91 e6       	ldi	r25, 0x61	; 97
    24f8:	21 50       	subi	r18, 0x01	; 1
    24fa:	80 40       	sbci	r24, 0x00	; 0
    24fc:	90 40       	sbci	r25, 0x00	; 0
    24fe:	e1 f7       	brne	.-8      	; 0x24f8 <LCD_main+0x98>
    2500:	00 c0       	rjmp	.+0      	; 0x2502 <LCD_main+0xa2>
    2502:	00 00       	nop
    2504:	df 91       	pop	r29
    2506:	cf 91       	pop	r28
    2508:	08 95       	ret

0000250a <crc16_update>:

uint16_t crc16_update(uint16_t crc, uint8_t a)
{
  int i;

  crc ^= a;
    250a:	86 27       	eor	r24, r22
    250c:	28 e0       	ldi	r18, 0x08	; 8
    250e:	30 e0       	ldi	r19, 0x00	; 0
  for (i = 0; i < 8; ++i)
  {
    if (crc & 1)
    2510:	80 ff       	sbrs	r24, 0
    2512:	07 c0       	rjmp	.+14     	; 0x2522 <crc16_update+0x18>
      crc = (crc >> 1) ^ 0xA001;
    2514:	96 95       	lsr	r25
    2516:	87 95       	ror	r24
    2518:	41 e0       	ldi	r20, 0x01	; 1
    251a:	84 27       	eor	r24, r20
    251c:	40 ea       	ldi	r20, 0xA0	; 160
    251e:	94 27       	eor	r25, r20
    2520:	02 c0       	rjmp	.+4      	; 0x2526 <crc16_update+0x1c>
    else
      crc = (crc >> 1);
    2522:	96 95       	lsr	r25
    2524:	87 95       	ror	r24
    2526:	21 50       	subi	r18, 0x01	; 1
    2528:	31 09       	sbc	r19, r1
uint16_t crc16_update(uint16_t crc, uint8_t a)
{
  int i;

  crc ^= a;
  for (i = 0; i < 8; ++i)
    252a:	91 f7       	brne	.-28     	; 0x2510 <crc16_update+0x6>
    else
      crc = (crc >> 1);
  }

  return crc;
}
    252c:	08 95       	ret

0000252e <millis_init>:

//init the timer on ctc mode to calvulate millis
void millis_init()
{
	//CTC mode
	TIMER2_CONGFIG_A = 0x02;
    252e:	82 e0       	ldi	r24, 0x02	; 2
    2530:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
	// Clock/64
	TIMER2_CONGFIG_B = 0x04;
    2534:	84 e0       	ldi	r24, 0x04	; 4
    2536:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7000b1>
    // Load into the output compare
    TIMER2_COMPARE = CTC_MATCH_OVERFLOW;
    253a:	8a ef       	ldi	r24, 0xFA	; 250
    253c:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7000b3>
    // Enable the compare match interrupt
    SET_BIT(TIMER2_INTERUPT, TIMER2_COMPARE_INT);
    2540:	e0 e7       	ldi	r30, 0x70	; 112
    2542:	f0 e0       	ldi	r31, 0x00	; 0
    2544:	80 81       	ld	r24, Z
    2546:	82 60       	ori	r24, 0x02	; 2
    2548:	80 83       	st	Z, r24
    254a:	08 95       	ret

0000254c <Get_millis>:
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    254c:	f8 94       	cli
    unsigned long millis_return;

    // Ensure this cannot be disrupted
    ATOMIC_BLOCK(ATOMIC_FORCEON) {
    	// copy the ISR counter
        millis_return = timer1_millis;
    254e:	60 91 29 09 	lds	r22, 0x0929	; 0x800929 <timer1_millis>
    2552:	70 91 2a 09 	lds	r23, 0x092A	; 0x80092a <timer1_millis+0x1>
    2556:	80 91 2b 09 	lds	r24, 0x092B	; 0x80092b <timer1_millis+0x2>
    255a:	90 91 2c 09 	lds	r25, 0x092C	; 0x80092c <timer1_millis+0x3>
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
    255e:	78 94       	sei
    }

    return millis_return;
}//Get_millis
    2560:	08 95       	ret

00002562 <__vector_13>:



ISR (TIMER2_COMPA_vect)
{
    2562:	1f 92       	push	r1
    2564:	0f 92       	push	r0
    2566:	0f b6       	in	r0, 0x3f	; 63
    2568:	0f 92       	push	r0
    256a:	11 24       	eor	r1, r1
    256c:	8f 93       	push	r24
    256e:	9f 93       	push	r25
    2570:	af 93       	push	r26
    2572:	bf 93       	push	r27
	//MILLI SEC
    timer1_millis++;
    2574:	80 91 29 09 	lds	r24, 0x0929	; 0x800929 <timer1_millis>
    2578:	90 91 2a 09 	lds	r25, 0x092A	; 0x80092a <timer1_millis+0x1>
    257c:	a0 91 2b 09 	lds	r26, 0x092B	; 0x80092b <timer1_millis+0x2>
    2580:	b0 91 2c 09 	lds	r27, 0x092C	; 0x80092c <timer1_millis+0x3>
    2584:	01 96       	adiw	r24, 0x01	; 1
    2586:	a1 1d       	adc	r26, r1
    2588:	b1 1d       	adc	r27, r1
    258a:	80 93 29 09 	sts	0x0929, r24	; 0x800929 <timer1_millis>
    258e:	90 93 2a 09 	sts	0x092A, r25	; 0x80092a <timer1_millis+0x1>
    2592:	a0 93 2b 09 	sts	0x092B, r26	; 0x80092b <timer1_millis+0x2>
    2596:	b0 93 2c 09 	sts	0x092C, r27	; 0x80092c <timer1_millis+0x3>
}//ISR
    259a:	bf 91       	pop	r27
    259c:	af 91       	pop	r26
    259e:	9f 91       	pop	r25
    25a0:	8f 91       	pop	r24
    25a2:	0f 90       	pop	r0
    25a4:	0f be       	out	0x3f, r0	; 63
    25a6:	0f 90       	pop	r0
    25a8:	1f 90       	pop	r1
    25aa:	18 95       	reti

000025ac <__udivmodsi4>:
    25ac:	a1 e2       	ldi	r26, 0x21	; 33
    25ae:	1a 2e       	mov	r1, r26
    25b0:	aa 1b       	sub	r26, r26
    25b2:	bb 1b       	sub	r27, r27
    25b4:	fd 01       	movw	r30, r26
    25b6:	0d c0       	rjmp	.+26     	; 0x25d2 <__udivmodsi4_ep>

000025b8 <__udivmodsi4_loop>:
    25b8:	aa 1f       	adc	r26, r26
    25ba:	bb 1f       	adc	r27, r27
    25bc:	ee 1f       	adc	r30, r30
    25be:	ff 1f       	adc	r31, r31
    25c0:	a2 17       	cp	r26, r18
    25c2:	b3 07       	cpc	r27, r19
    25c4:	e4 07       	cpc	r30, r20
    25c6:	f5 07       	cpc	r31, r21
    25c8:	20 f0       	brcs	.+8      	; 0x25d2 <__udivmodsi4_ep>
    25ca:	a2 1b       	sub	r26, r18
    25cc:	b3 0b       	sbc	r27, r19
    25ce:	e4 0b       	sbc	r30, r20
    25d0:	f5 0b       	sbc	r31, r21

000025d2 <__udivmodsi4_ep>:
    25d2:	66 1f       	adc	r22, r22
    25d4:	77 1f       	adc	r23, r23
    25d6:	88 1f       	adc	r24, r24
    25d8:	99 1f       	adc	r25, r25
    25da:	1a 94       	dec	r1
    25dc:	69 f7       	brne	.-38     	; 0x25b8 <__udivmodsi4_loop>
    25de:	60 95       	com	r22
    25e0:	70 95       	com	r23
    25e2:	80 95       	com	r24
    25e4:	90 95       	com	r25
    25e6:	9b 01       	movw	r18, r22
    25e8:	ac 01       	movw	r20, r24
    25ea:	bd 01       	movw	r22, r26
    25ec:	cf 01       	movw	r24, r30
    25ee:	08 95       	ret

000025f0 <_exit>:
    25f0:	f8 94       	cli

000025f2 <__stop_program>:
    25f2:	ff cf       	rjmp	.-2      	; 0x25f2 <__stop_program>
