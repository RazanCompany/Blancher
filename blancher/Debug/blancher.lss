
blancher.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000014a  00800200  00005134  000051c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005134  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00001457  0080034a  0080034a  00005312  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00005312  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00005344  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000cc0  00000000  00000000  00005384  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000e88d  00000000  00000000  00006044  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003f93  00000000  00000000  000148d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000c664  00000000  00000000  00018864  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002090  00000000  00000000  00024ec8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000193e3  00000000  00000000  00026f58  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000a26d  00000000  00000000  0004033b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000cb8  00000000  00000000  0004a5a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00004281  00000000  00000000  0004b260  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	db c0       	rjmp	.+438    	; 0x1b8 <__ctors_end>
       2:	00 00       	nop
       4:	fa c0       	rjmp	.+500    	; 0x1fa <__bad_interrupt>
       6:	00 00       	nop
       8:	f8 c0       	rjmp	.+496    	; 0x1fa <__bad_interrupt>
       a:	00 00       	nop
       c:	f6 c0       	rjmp	.+492    	; 0x1fa <__bad_interrupt>
       e:	00 00       	nop
      10:	f4 c0       	rjmp	.+488    	; 0x1fa <__bad_interrupt>
      12:	00 00       	nop
      14:	f2 c0       	rjmp	.+484    	; 0x1fa <__bad_interrupt>
      16:	00 00       	nop
      18:	f0 c0       	rjmp	.+480    	; 0x1fa <__bad_interrupt>
      1a:	00 00       	nop
      1c:	ee c0       	rjmp	.+476    	; 0x1fa <__bad_interrupt>
      1e:	00 00       	nop
      20:	ec c0       	rjmp	.+472    	; 0x1fa <__bad_interrupt>
      22:	00 00       	nop
      24:	ea c0       	rjmp	.+468    	; 0x1fa <__bad_interrupt>
      26:	00 00       	nop
      28:	e8 c0       	rjmp	.+464    	; 0x1fa <__bad_interrupt>
      2a:	00 00       	nop
      2c:	e6 c0       	rjmp	.+460    	; 0x1fa <__bad_interrupt>
      2e:	00 00       	nop
      30:	0c 94 1e 18 	jmp	0x303c	; 0x303c <__vector_12>
      34:	0c 94 b7 24 	jmp	0x496e	; 0x496e <__vector_13>
      38:	e0 c0       	rjmp	.+448    	; 0x1fa <__bad_interrupt>
      3a:	00 00       	nop
      3c:	de c0       	rjmp	.+444    	; 0x1fa <__bad_interrupt>
      3e:	00 00       	nop
      40:	dc c0       	rjmp	.+440    	; 0x1fa <__bad_interrupt>
      42:	00 00       	nop
      44:	0c 94 3e 0d 	jmp	0x1a7c	; 0x1a7c <__vector_17>
      48:	d8 c0       	rjmp	.+432    	; 0x1fa <__bad_interrupt>
      4a:	00 00       	nop
      4c:	d6 c0       	rjmp	.+428    	; 0x1fa <__bad_interrupt>
      4e:	00 00       	nop
      50:	d4 c0       	rjmp	.+424    	; 0x1fa <__bad_interrupt>
      52:	00 00       	nop
      54:	d2 c0       	rjmp	.+420    	; 0x1fa <__bad_interrupt>
      56:	00 00       	nop
      58:	d0 c0       	rjmp	.+416    	; 0x1fa <__bad_interrupt>
      5a:	00 00       	nop
      5c:	ce c0       	rjmp	.+412    	; 0x1fa <__bad_interrupt>
      5e:	00 00       	nop
      60:	cc c0       	rjmp	.+408    	; 0x1fa <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 00 0f 	jmp	0x1e00	; 0x1e00 <__vector_25>
      68:	0c 94 39 0f 	jmp	0x1e72	; 0x1e72 <__vector_26>
      6c:	c6 c0       	rjmp	.+396    	; 0x1fa <__bad_interrupt>
      6e:	00 00       	nop
      70:	c4 c0       	rjmp	.+392    	; 0x1fa <__bad_interrupt>
      72:	00 00       	nop
      74:	0c 94 45 0c 	jmp	0x188a	; 0x188a <__vector_29>
      78:	c0 c0       	rjmp	.+384    	; 0x1fa <__bad_interrupt>
      7a:	00 00       	nop
      7c:	be c0       	rjmp	.+380    	; 0x1fa <__bad_interrupt>
      7e:	00 00       	nop
      80:	0c 94 ae 0d 	jmp	0x1b5c	; 0x1b5c <__vector_32>
      84:	ba c0       	rjmp	.+372    	; 0x1fa <__bad_interrupt>
      86:	00 00       	nop
      88:	b8 c0       	rjmp	.+368    	; 0x1fa <__bad_interrupt>
      8a:	00 00       	nop
      8c:	b6 c0       	rjmp	.+364    	; 0x1fa <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 06 10 	jmp	0x200c	; 0x200c <__vector_36>
      94:	0c 94 3f 10 	jmp	0x207e	; 0x207e <__vector_37>
      98:	b0 c0       	rjmp	.+352    	; 0x1fa <__bad_interrupt>
      9a:	00 00       	nop
      9c:	ae c0       	rjmp	.+348    	; 0x1fa <__bad_interrupt>
      9e:	00 00       	nop
      a0:	ac c0       	rjmp	.+344    	; 0x1fa <__bad_interrupt>
      a2:	00 00       	nop
      a4:	aa c0       	rjmp	.+340    	; 0x1fa <__bad_interrupt>
      a6:	00 00       	nop
      a8:	0c 94 1e 0e 	jmp	0x1c3c	; 0x1c3c <__vector_42>
      ac:	a6 c0       	rjmp	.+332    	; 0x1fa <__bad_interrupt>
      ae:	00 00       	nop
      b0:	a4 c0       	rjmp	.+328    	; 0x1fa <__bad_interrupt>
      b2:	00 00       	nop
      b4:	a2 c0       	rjmp	.+324    	; 0x1fa <__bad_interrupt>
      b6:	00 00       	nop
      b8:	a0 c0       	rjmp	.+320    	; 0x1fa <__bad_interrupt>
      ba:	00 00       	nop
      bc:	0c 94 8e 0e 	jmp	0x1d1c	; 0x1d1c <__vector_47>
      c0:	9c c0       	rjmp	.+312    	; 0x1fa <__bad_interrupt>
      c2:	00 00       	nop
      c4:	9a c0       	rjmp	.+308    	; 0x1fa <__bad_interrupt>
      c6:	00 00       	nop
      c8:	98 c0       	rjmp	.+304    	; 0x1fa <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 51 11 	jmp	0x22a2	; 0x22a2 <__vector_51>
      d0:	0c 94 8a 11 	jmp	0x2314	; 0x2314 <__vector_52>
      d4:	92 c0       	rjmp	.+292    	; 0x1fa <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 99 12 	jmp	0x2532	; 0x2532 <__vector_54>
      dc:	0c 94 d2 12 	jmp	0x25a4	; 0x25a4 <__vector_55>
      e0:	8c c0       	rjmp	.+280    	; 0x1fa <__bad_interrupt>
      e2:	00 00       	nop
      e4:	07 63       	ori	r16, 0x37	; 55
      e6:	42 36       	cpi	r20, 0x62	; 98
      e8:	b7 9b       	sbis	0x16, 7	; 22
      ea:	d8 a7       	std	Y+40, r29	; 0x28
      ec:	1a 39       	cpi	r17, 0x9A	; 154
      ee:	68 56       	subi	r22, 0x68	; 104
      f0:	18 ae       	std	Y+56, r1	; 0x38
      f2:	ba ab       	std	Y+50, r27	; 0x32
      f4:	55 8c       	ldd	r5, Z+29	; 0x1d
      f6:	1d 3c       	cpi	r17, 0xCD	; 205
      f8:	b7 cc       	rjmp	.-1682   	; 0xfffffa68 <__eeprom_end+0xff7efa68>
      fa:	57 63       	ori	r21, 0x37	; 55
      fc:	bd 6d       	ori	r27, 0xDD	; 221
      fe:	ed fd       	.word	0xfded	; ????
     100:	75 3e       	cpi	r23, 0xE5	; 229
     102:	f6 17       	cp	r31, r22
     104:	72 31       	cpi	r23, 0x12	; 18
     106:	bf 00       	.word	0x00bf	; ????
     108:	00 00       	nop
     10a:	80 3f       	cpi	r24, 0xF0	; 240
     10c:	08 00       	.word	0x0008	; ????
     10e:	00 00       	nop
     110:	be 92       	st	-X, r11
     112:	24 49       	sbci	r18, 0x94	; 148
     114:	12 3e       	cpi	r17, 0xE2	; 226
     116:	ab aa       	std	Y+51, r10	; 0x33
     118:	aa 2a       	or	r10, r26
     11a:	be cd       	rjmp	.-1156   	; 0xfffffc98 <__eeprom_end+0xff7efc98>
     11c:	cc cc       	rjmp	.-1640   	; 0xfffffab6 <__eeprom_end+0xff7efab6>
     11e:	4c 3e       	cpi	r20, 0xEC	; 236
     120:	00 00       	nop
     122:	00 80       	ld	r0, Z
     124:	be ab       	std	Y+54, r27	; 0x36
     126:	aa aa       	std	Y+50, r10	; 0x32
     128:	aa 3e       	cpi	r26, 0xEA	; 234
     12a:	00 00       	nop
     12c:	00 00       	nop
     12e:	bf 00       	.word	0x00bf	; ????
     130:	00 00       	nop
     132:	80 3f       	cpi	r24, 0xF0	; 240
     134:	00 00       	nop
     136:	00 00       	nop
     138:	00 08       	sbc	r0, r0
     13a:	41 78       	andi	r20, 0x81	; 129
     13c:	d3 bb       	out	0x13, r29	; 19
     13e:	43 87       	std	Z+11, r20	; 0x0b
     140:	d1 13       	cpse	r29, r17
     142:	3d 19       	sub	r19, r13
     144:	0e 3c       	cpi	r16, 0xCE	; 206
     146:	c3 bd       	out	0x23, r28	; 35
     148:	42 82       	std	Z+2, r4	; 0x02
     14a:	ad 2b       	or	r26, r29
     14c:	3e 68       	ori	r19, 0x8E	; 142
     14e:	ec 82       	std	Y+4, r14	; 0x04
     150:	76 be       	out	0x36, r7	; 54
     152:	d9 8f       	std	Y+25, r29	; 0x19
     154:	e1 a9       	ldd	r30, Z+49	; 0x31
     156:	3e 4c       	sbci	r19, 0xCE	; 206
     158:	80 ef       	ldi	r24, 0xF0	; 240
     15a:	ff be       	out	0x3f, r15	; 63
     15c:	01 c4       	rjmp	.+2050   	; 0x960 <Modbus_mster_transaction+0x52c>
     15e:	ff 7f       	andi	r31, 0xFF	; 255
     160:	3f 00       	.word	0x003f	; ????
     162:	00 00       	nop
	...

00000166 <prvIdleTask>:
    /* Reset the event list item to its normal value - so it can be used with
    queues and semaphores. */
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */

    return uxReturn;
}
     166:	c2 eb       	ldi	r28, 0xB2	; 178
     168:	dd e0       	ldi	r29, 0x0D	; 13
     16a:	08 ec       	ldi	r16, 0xC8	; 200
     16c:	1d e0       	ldi	r17, 0x0D	; 13
     16e:	80 91 b1 0d 	lds	r24, 0x0DB1	; 0x800db1 <uxDeletedTasksWaitingCleanUp>
     172:	88 23       	and	r24, r24
     174:	d1 f0       	breq	.+52     	; 0x1aa <prvIdleTask+0x44>
     176:	0f b6       	in	r0, 0x3f	; 63
     178:	f8 94       	cli
     17a:	0f 92       	push	r0
     17c:	ed 81       	ldd	r30, Y+5	; 0x05
     17e:	fe 81       	ldd	r31, Y+6	; 0x06
     180:	86 81       	ldd	r24, Z+6	; 0x06
     182:	97 81       	ldd	r25, Z+7	; 0x07
     184:	02 96       	adiw	r24, 0x02	; 2
     186:	0e 94 86 16 	call	0x2d0c	; 0x2d0c <uxListRemove>
     18a:	80 91 b0 0d 	lds	r24, 0x0DB0	; 0x800db0 <uxCurrentNumberOfTasks>
     18e:	81 50       	subi	r24, 0x01	; 1
     190:	80 93 b0 0d 	sts	0x0DB0, r24	; 0x800db0 <uxCurrentNumberOfTasks>
     194:	80 91 b1 0d 	lds	r24, 0x0DB1	; 0x800db1 <uxDeletedTasksWaitingCleanUp>
     198:	81 50       	subi	r24, 0x01	; 1
     19a:	80 93 b1 0d 	sts	0x0DB1, r24	; 0x800db1 <uxDeletedTasksWaitingCleanUp>
     19e:	0f 90       	pop	r0
     1a0:	0f be       	out	0x3f, r0	; 63
     1a2:	80 91 b1 0d 	lds	r24, 0x0DB1	; 0x800db1 <uxDeletedTasksWaitingCleanUp>
     1a6:	81 11       	cpse	r24, r1
     1a8:	e6 cf       	rjmp	.-52     	; 0x176 <prvIdleTask+0x10>
     1aa:	f8 01       	movw	r30, r16
     1ac:	80 81       	ld	r24, Z
     1ae:	82 30       	cpi	r24, 0x02	; 2
     1b0:	f0 f2       	brcs	.-68     	; 0x16e <prvIdleTask+0x8>
     1b2:	0e 94 5b 17 	call	0x2eb6	; 0x2eb6 <vPortYield>
     1b6:	db cf       	rjmp	.-74     	; 0x16e <prvIdleTask+0x8>

000001b8 <__ctors_end>:
     1b8:	11 24       	eor	r1, r1
     1ba:	1f be       	out	0x3f, r1	; 63
     1bc:	cf ef       	ldi	r28, 0xFF	; 255
     1be:	d1 e2       	ldi	r29, 0x21	; 33
     1c0:	de bf       	out	0x3e, r29	; 62
     1c2:	cd bf       	out	0x3d, r28	; 61
     1c4:	00 e0       	ldi	r16, 0x00	; 0
     1c6:	0c bf       	out	0x3c, r16	; 60

000001c8 <__do_copy_data>:
     1c8:	13 e0       	ldi	r17, 0x03	; 3
     1ca:	a0 e0       	ldi	r26, 0x00	; 0
     1cc:	b2 e0       	ldi	r27, 0x02	; 2
     1ce:	e4 e3       	ldi	r30, 0x34	; 52
     1d0:	f1 e5       	ldi	r31, 0x51	; 81
     1d2:	00 e0       	ldi	r16, 0x00	; 0
     1d4:	0b bf       	out	0x3b, r16	; 59
     1d6:	02 c0       	rjmp	.+4      	; 0x1dc <__do_copy_data+0x14>
     1d8:	07 90       	elpm	r0, Z+
     1da:	0d 92       	st	X+, r0
     1dc:	aa 34       	cpi	r26, 0x4A	; 74
     1de:	b1 07       	cpc	r27, r17
     1e0:	d9 f7       	brne	.-10     	; 0x1d8 <__do_copy_data+0x10>

000001e2 <__do_clear_bss>:
     1e2:	27 e1       	ldi	r18, 0x17	; 23
     1e4:	aa e4       	ldi	r26, 0x4A	; 74
     1e6:	b3 e0       	ldi	r27, 0x03	; 3
     1e8:	01 c0       	rjmp	.+2      	; 0x1ec <.do_clear_bss_start>

000001ea <.do_clear_bss_loop>:
     1ea:	1d 92       	st	X+, r1

000001ec <.do_clear_bss_start>:
     1ec:	a1 3a       	cpi	r26, 0xA1	; 161
     1ee:	b2 07       	cpc	r27, r18
     1f0:	e1 f7       	brne	.-8      	; 0x1ea <.do_clear_bss_loop>
     1f2:	0e 94 99 0b 	call	0x1732	; 0x1732 <main>
     1f6:	0c 94 98 28 	jmp	0x5130	; 0x5130 <_exit>

000001fa <__bad_interrupt>:
     1fa:	02 cf       	rjmp	.-508    	; 0x0 <__vectors>

000001fc <Set_drum_time_callback>:
	Encoder_init(Set_drum_time_callback, 5, 16);
	
}
static void Set_drum_time_callback(uint32_t dif_time)
{
	g_drum_time = dif_time;
     1fc:	60 93 8c 0e 	sts	0x0E8C, r22	; 0x800e8c <g_drum_time>
     200:	70 93 8d 0e 	sts	0x0E8D, r23	; 0x800e8d <g_drum_time+0x1>
     204:	80 93 8e 0e 	sts	0x0E8E, r24	; 0x800e8e <g_drum_time+0x2>
     208:	90 93 8f 0e 	sts	0x0E8F, r25	; 0x800e8f <g_drum_time+0x3>
     20c:	08 95       	ret

0000020e <Drum_speed_init>:
 * call back function
 * parameters@ difference time between every ISR For Drum
 * return@ Nothing
 */
void Drum_speed_init(void){
	Encoder_init(Set_drum_time_callback, 5, 16);
     20e:	40 e1       	ldi	r20, 0x10	; 16
     210:	50 e0       	ldi	r21, 0x00	; 0
     212:	65 e0       	ldi	r22, 0x05	; 5
     214:	8e ef       	ldi	r24, 0xFE	; 254
     216:	90 e0       	ldi	r25, 0x00	; 0
     218:	01 c0       	rjmp	.+2      	; 0x21c <Encoder_init>
     21a:	08 95       	ret

0000021c <Encoder_init>:
 */

void Encoder_init(void (*pISR_callback)(uint32_t),uint8_t timer_number,uint16_t ticks_number )
{
	//encoder of Drum on timer 5
	Encoder_1_confg.timer_number = timer_number;
     21c:	e0 e9       	ldi	r30, 0x90	; 144
     21e:	fe e0       	ldi	r31, 0x0E	; 14
     220:	64 83       	std	Z+4, r22	; 0x04
	// number of ticks 16 to interrupted
	Encoder_1_confg.ticks = ticks_number;
     222:	51 83       	std	Z+1, r21	; 0x01
     224:	40 83       	st	Z, r20
	//Call back Function 
	Encoder_1_confg.isr_call_back = pISR_callback ; 
     226:	93 83       	std	Z+3, r25	; 0x03
     228:	82 83       	std	Z+2, r24	; 0x02
    timers_init(&Encoder_1_confg);
     22a:	cf 01       	movw	r24, r30
     22c:	0c 94 d6 0c 	jmp	0x19ac	; 0x19ac <timers_init>
     230:	08 95       	ret

00000232 <flowrate_feeding_callback>:
{
	/*
	*	this function is called back from the isr to increment the liters counter .
	*/
  // call the feeding operation callback .
     feeding_operation_callback();
     232:	e0 91 95 0e 	lds	r30, 0x0E95	; 0x800e95 <feeding_operation_callback>
     236:	f0 91 96 0e 	lds	r31, 0x0E96	; 0x800e96 <feeding_operation_callback+0x1>
     23a:	19 95       	eicall
     23c:	08 95       	ret

0000023e <flowrate_outing_callback>:
{
	/*
	*	this function is called back from the isr to increment the liters counter .
	*/
  // call the feeding operation callback .
     out_operation_callback();
     23e:	e0 91 97 0e 	lds	r30, 0x0E97	; 0x800e97 <out_operation_callback>
     242:	f0 91 98 0e 	lds	r31, 0x0E98	; 0x800e98 <out_operation_callback+0x1>
     246:	19 95       	eicall
     248:	08 95       	ret

0000024a <Flow_rate_init>:
// struts to hold the timers config .
g_Timer_Config feeding_configeration;
g_Timer_Config outing_configeration;

void Flow_rate_init(uint8_t flowrate1_timer_number,uint8_t flowrate2_timer_number,void (*callback1)(void) , void (*callback2)(void)) 
{
     24a:	cf 92       	push	r12
     24c:	df 92       	push	r13
     24e:	ef 92       	push	r14
     250:	ff 92       	push	r15
     252:	0f 93       	push	r16
     254:	1f 93       	push	r17
     256:	cf 93       	push	r28
     258:	df 93       	push	r29
     25a:	6a 01       	movw	r12, r20
     25c:	79 01       	movw	r14, r18
	
	feeding_configeration.ticks = TICKS_FOR_HALF_LITER ;
     25e:	ce e9       	ldi	r28, 0x9E	; 158
     260:	de e0       	ldi	r29, 0x0E	; 14
     262:	00 ef       	ldi	r16, 0xF0	; 240
     264:	10 e0       	ldi	r17, 0x00	; 0
     266:	19 83       	std	Y+1, r17	; 0x01
     268:	08 83       	st	Y, r16
	feeding_configeration.timer_number = 1 ;//flowrate1_timer_number
     26a:	81 e0       	ldi	r24, 0x01	; 1
     26c:	8c 83       	std	Y+4, r24	; 0x04
	feeding_configeration.isr_call_back = flowrate_feeding_callback ;
     26e:	89 e1       	ldi	r24, 0x19	; 25
     270:	91 e0       	ldi	r25, 0x01	; 1
     272:	9b 83       	std	Y+3, r25	; 0x03
     274:	8a 83       	std	Y+2, r24	; 0x02
	
	// initialize the needed timer with the previous config .
    timers_init(&feeding_configeration);
     276:	ce 01       	movw	r24, r28
     278:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <timers_init>
	
	// initialize other timer for the second flow rate .
	feeding_configeration.ticks = TICKS_FOR_HALF_LITER ;
     27c:	19 83       	std	Y+1, r17	; 0x01
     27e:	08 83       	st	Y, r16
	feeding_configeration.timer_number = 3 ;//flowrate2_timer_number
     280:	83 e0       	ldi	r24, 0x03	; 3
     282:	8c 83       	std	Y+4, r24	; 0x04
	feeding_configeration.isr_call_back = flowrate_outing_callback ;
     284:	8f e1       	ldi	r24, 0x1F	; 31
     286:	91 e0       	ldi	r25, 0x01	; 1
     288:	9b 83       	std	Y+3, r25	; 0x03
     28a:	8a 83       	std	Y+2, r24	; 0x02
	
	// initialize the needed timer with the previous config .
	timers_init(&outing_configeration);
     28c:	89 e9       	ldi	r24, 0x99	; 153
     28e:	9e e0       	ldi	r25, 0x0E	; 14
     290:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <timers_init>
	feeding_operation_callback = callback1;
     294:	d0 92 96 0e 	sts	0x0E96, r13	; 0x800e96 <feeding_operation_callback+0x1>
     298:	c0 92 95 0e 	sts	0x0E95, r12	; 0x800e95 <feeding_operation_callback>
	out_operation_callback = callback2 ;
     29c:	f0 92 98 0e 	sts	0x0E98, r15	; 0x800e98 <out_operation_callback+0x1>
     2a0:	e0 92 97 0e 	sts	0x0E97, r14	; 0x800e97 <out_operation_callback>
	DIO_init();
     2a4:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <DIO_init>
}
     2a8:	df 91       	pop	r29
     2aa:	cf 91       	pop	r28
     2ac:	1f 91       	pop	r17
     2ae:	0f 91       	pop	r16
     2b0:	ff 90       	pop	r15
     2b2:	ef 90       	pop	r14
     2b4:	df 90       	pop	r13
     2b6:	cf 90       	pop	r12
     2b8:	08 95       	ret

000002ba <Inverter_pre_transmition>:
 * set the enable pin for modbus to start send
 * parameters  Nothing
 * return Nothing
 */
void Inverter_pre_transmition(void) {
	Modbus_change_state(INVERTER, HIGH);
     2ba:	61 e0       	ldi	r22, 0x01	; 1
     2bc:	81 e0       	ldi	r24, 0x01	; 1
     2be:	0c 94 b9 0c 	jmp	0x1972	; 0x1972 <Modbus_change_state>
     2c2:	08 95       	ret

000002c4 <Inverter_post_transmition>:
 * Clear the enable pin for modbus to start send
 * parameters  Nothing
 * return Nothing
 */
void Inverter_post_transmition(void) {
	Modbus_change_state(INVERTER, LOW);
     2c4:	60 e0       	ldi	r22, 0x00	; 0
     2c6:	81 e0       	ldi	r24, 0x01	; 1
     2c8:	0c 94 b9 0c 	jmp	0x1972	; 0x1972 <Modbus_change_state>
     2cc:	08 95       	ret

000002ce <Inverter_init>:
 */
void Inverter_init( UART_Modules uart_n, uint32_t baudrate, uint8_t slave_id )
{
	
	// Modbus Parameters
	s_inv_mod_confg.uart_num = uart_n;
     2ce:	ea e4       	ldi	r30, 0x4A	; 74
     2d0:	f3 e0       	ldi	r31, 0x03	; 3
     2d2:	81 83       	std	Z+1, r24	; 0x01
	s_inv_mod_confg.baud_rate =  baudrate;
     2d4:	42 83       	std	Z+2, r20	; 0x02
     2d6:	53 83       	std	Z+3, r21	; 0x03
     2d8:	64 83       	std	Z+4, r22	; 0x04
     2da:	75 83       	std	Z+5, r23	; 0x05
	s_inv_mod_confg.slave_address = slave_id;
     2dc:	20 83       	st	Z, r18
	s_inv_mod_confg.post_transmission = Inverter_post_transmition;
     2de:	82 e6       	ldi	r24, 0x62	; 98
     2e0:	91 e0       	ldi	r25, 0x01	; 1
     2e2:	91 87       	std	Z+9, r25	; 0x09
     2e4:	80 87       	std	Z+8, r24	; 0x08
	s_inv_mod_confg.pre_transmission = Inverter_pre_transmition;
     2e6:	8d e5       	ldi	r24, 0x5D	; 93
     2e8:	91 e0       	ldi	r25, 0x01	; 1
     2ea:	97 83       	std	Z+7, r25	; 0x07
     2ec:	86 83       	std	Z+6, r24	; 0x06
// 	UART0_puts("slave id ");
// 	UART0_OutUDec(slave_id);

	// init the mod bus on Mod Bus
	
	Modbus_init(INVERTER, &s_inv_mod_confg);
     2ee:	bf 01       	movw	r22, r30
     2f0:	81 e0       	ldi	r24, 0x01	; 1
     2f2:	58 c7       	rjmp	.+3760   	; 0x11a4 <Modbus_init>
     2f4:	08 95       	ret

000002f6 <Modbus_idle_task>:

//
void Lcd_Write(uint16_t address, uint16_t value){
	Modbus_Set_transmit_buffer(LCD,0, value);
    Modbus_Write_multiple_registers(LCD,address, 0x01);
}
     2f6:	80 e0       	ldi	r24, 0x00	; 0
     2f8:	90 e0       	ldi	r25, 0x00	; 0
     2fa:	0c 94 71 1e 	jmp	0x3ce2	; 0x3ce2 <vTaskDelay>
     2fe:	08 95       	ret

00000300 <LCD_post_transmission>:
     300:	60 e0       	ldi	r22, 0x00	; 0
     302:	80 e0       	ldi	r24, 0x00	; 0
     304:	0c 94 b9 0c 	jmp	0x1972	; 0x1972 <Modbus_change_state>
     308:	08 95       	ret

0000030a <LCD_pre_transmission>:
     30a:	61 e0       	ldi	r22, 0x01	; 1
     30c:	80 e0       	ldi	r24, 0x00	; 0
     30e:	0c 94 b9 0c 	jmp	0x1972	; 0x1972 <Modbus_change_state>
     312:	08 95       	ret

00000314 <Lcd_init>:
     314:	e6 e5       	ldi	r30, 0x56	; 86
     316:	f3 e0       	ldi	r31, 0x03	; 3
     318:	20 83       	st	Z, r18
     31a:	81 83       	std	Z+1, r24	; 0x01
     31c:	42 83       	std	Z+2, r20	; 0x02
     31e:	53 83       	std	Z+3, r21	; 0x03
     320:	64 83       	std	Z+4, r22	; 0x04
     322:	75 83       	std	Z+5, r23	; 0x05
     324:	85 e8       	ldi	r24, 0x85	; 133
     326:	91 e0       	ldi	r25, 0x01	; 1
     328:	97 83       	std	Z+7, r25	; 0x07
     32a:	86 83       	std	Z+6, r24	; 0x06
     32c:	80 e8       	ldi	r24, 0x80	; 128
     32e:	91 e0       	ldi	r25, 0x01	; 1
     330:	91 87       	std	Z+9, r25	; 0x09
     332:	80 87       	std	Z+8, r24	; 0x08
     334:	8b e7       	ldi	r24, 0x7B	; 123
     336:	91 e0       	ldi	r25, 0x01	; 1
     338:	93 87       	std	Z+11, r25	; 0x0b
     33a:	82 87       	std	Z+10, r24	; 0x0a
     33c:	bf 01       	movw	r22, r30
     33e:	80 e0       	ldi	r24, 0x00	; 0
     340:	31 c7       	rjmp	.+3682   	; 0x11a4 <Modbus_init>
     342:	08 95       	ret

00000344 <Lcd_Read_multiple_data>:
 *
 *                    LCD Multiple Data functions 
 * 
************************************************************************************************************/

uint8_t Lcd_Read_multiple_data(uint16_t address ,uint16_t *pData,uint8_t QTY){
     344:	ff 92       	push	r15
     346:	0f 93       	push	r16
     348:	1f 93       	push	r17
     34a:	cf 93       	push	r28
     34c:	df 93       	push	r29
     34e:	f6 2e       	mov	r15, r22
     350:	c7 2f       	mov	r28, r23
     352:	d4 2f       	mov	r29, r20
	uint8_t err = Modbus_Read_holding_registers(LCD,address,QTY);
     354:	50 e0       	ldi	r21, 0x00	; 0
     356:	bc 01       	movw	r22, r24
     358:	80 e0       	ldi	r24, 0x00	; 0
     35a:	0e 94 82 0a 	call	0x1504	; 0x1504 <Modbus_Read_holding_registers>
	if(err == 0){
     35e:	81 11       	cpse	r24, r1
     360:	13 c0       	rjmp	.+38     	; 0x388 <Lcd_Read_multiple_data+0x44>
		for(uint8_t i=0; i<QTY;i++){
     362:	dd 23       	and	r29, r29
     364:	81 f0       	breq	.+32     	; 0x386 <Lcd_Read_multiple_data+0x42>
     366:	0f 2d       	mov	r16, r15
     368:	1c 2f       	mov	r17, r28
     36a:	c0 e0       	ldi	r28, 0x00	; 0
			(*(pData+i)) = Modbus_Get_response_buffer(LCD,i);
     36c:	6c 2f       	mov	r22, r28
     36e:	80 e0       	ldi	r24, 0x00	; 0
     370:	0e 94 3e 0a 	call	0x147c	; 0x147c <Modbus_Get_response_buffer>
     374:	f8 01       	movw	r30, r16
     376:	81 93       	st	Z+, r24
     378:	91 93       	st	Z+, r25
     37a:	8f 01       	movw	r16, r30
************************************************************************************************************/

uint8_t Lcd_Read_multiple_data(uint16_t address ,uint16_t *pData,uint8_t QTY){
	uint8_t err = Modbus_Read_holding_registers(LCD,address,QTY);
	if(err == 0){
		for(uint8_t i=0; i<QTY;i++){
     37c:	cf 5f       	subi	r28, 0xFF	; 255
     37e:	cd 13       	cpse	r28, r29
     380:	f5 cf       	rjmp	.-22     	; 0x36c <Lcd_Read_multiple_data+0x28>
			(*(pData+i)) = Modbus_Get_response_buffer(LCD,i);
		}
		return LCD_OK;	
     382:	80 e0       	ldi	r24, 0x00	; 0
     384:	01 c0       	rjmp	.+2      	; 0x388 <Lcd_Read_multiple_data+0x44>
     386:	80 e0       	ldi	r24, 0x00	; 0
	}
	else {
		return err;
	}

}
     388:	df 91       	pop	r29
     38a:	cf 91       	pop	r28
     38c:	1f 91       	pop	r17
     38e:	0f 91       	pop	r16
     390:	ff 90       	pop	r15
     392:	08 95       	ret

00000394 <Lcd_Write_multiple_data>:

uint8_t Lcd_Write_multiple_data(uint16_t address ,uint16_t *pData,uint8_t QTY){
     394:	ef 92       	push	r14
     396:	ff 92       	push	r15
     398:	0f 93       	push	r16
     39a:	1f 93       	push	r17
     39c:	cf 93       	push	r28
     39e:	df 93       	push	r29
     3a0:	7c 01       	movw	r14, r24
     3a2:	d4 2f       	mov	r29, r20
	for(uint8_t i=0;i<QTY;i++){
     3a4:	44 23       	and	r20, r20
     3a6:	71 f0       	breq	.+28     	; 0x3c4 <Lcd_Write_multiple_data+0x30>
     3a8:	06 2f       	mov	r16, r22
     3aa:	17 2f       	mov	r17, r23
     3ac:	c0 e0       	ldi	r28, 0x00	; 0
		Modbus_Set_transmit_buffer(LCD,i, (*(pData+i)));
     3ae:	f8 01       	movw	r30, r16
     3b0:	41 91       	ld	r20, Z+
     3b2:	51 91       	ld	r21, Z+
     3b4:	8f 01       	movw	r16, r30
     3b6:	6c 2f       	mov	r22, r28
     3b8:	80 e0       	ldi	r24, 0x00	; 0
     3ba:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <Modbus_Set_transmit_buffer>
	}

}

uint8_t Lcd_Write_multiple_data(uint16_t address ,uint16_t *pData,uint8_t QTY){
	for(uint8_t i=0;i<QTY;i++){
     3be:	cf 5f       	subi	r28, 0xFF	; 255
     3c0:	cd 13       	cpse	r28, r29
     3c2:	f5 cf       	rjmp	.-22     	; 0x3ae <Lcd_Write_multiple_data+0x1a>
		Modbus_Set_transmit_buffer(LCD,i, (*(pData+i)));
	}
	return Modbus_Write_multiple_registers(LCD,address,QTY);
     3c4:	4d 2f       	mov	r20, r29
     3c6:	50 e0       	ldi	r21, 0x00	; 0
     3c8:	b7 01       	movw	r22, r14
     3ca:	80 e0       	ldi	r24, 0x00	; 0
     3cc:	0e 94 a0 0a 	call	0x1540	; 0x1540 <Modbus_Write_multiple_registers>
	
}
     3d0:	df 91       	pop	r29
     3d2:	cf 91       	pop	r28
     3d4:	1f 91       	pop	r17
     3d6:	0f 91       	pop	r16
     3d8:	ff 90       	pop	r15
     3da:	ef 90       	pop	r14
     3dc:	08 95       	ret

000003de <Get_tank_level>:
#include "levels.h"
#include "../MCAL/DIO.h"

 
 uint8_t Get_tank_level(void)
 {
     3de:	cf 93       	push	r28
     3e0:	df 93       	push	r29
	uint8_t Tank_sensor = 0 ;
	Tank_sensor = Get_tank_level_state(1) | (Get_tank_level_state(2) << 1) | (Get_tank_level_state(3) << 2) ;
     3e2:	81 e0       	ldi	r24, 0x01	; 1
     3e4:	0e 94 94 0c 	call	0x1928	; 0x1928 <Get_tank_level_state>
     3e8:	c8 2f       	mov	r28, r24
     3ea:	82 e0       	ldi	r24, 0x02	; 2
     3ec:	0e 94 94 0c 	call	0x1928	; 0x1928 <Get_tank_level_state>
     3f0:	d8 2f       	mov	r29, r24
     3f2:	83 e0       	ldi	r24, 0x03	; 3
     3f4:	0e 94 94 0c 	call	0x1928	; 0x1928 <Get_tank_level_state>
     3f8:	dd 0f       	add	r29, r29
     3fa:	24 e0       	ldi	r18, 0x04	; 4
     3fc:	82 9f       	mul	r24, r18
     3fe:	c0 01       	movw	r24, r0
     400:	11 24       	eor	r1, r1
     402:	8d 2b       	or	r24, r29
     404:	8c 2b       	or	r24, r28
	if (Tank_sensor == 2 || Tank_sensor == 4 || Tank_sensor == 5 || Tank_sensor == 6  )
     406:	82 30       	cpi	r24, 0x02	; 2
     408:	51 f0       	breq	.+20     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
     40a:	9c ef       	ldi	r25, 0xFC	; 252
     40c:	98 0f       	add	r25, r24
     40e:	93 30       	cpi	r25, 0x03	; 3
     410:	40 f0       	brcs	.+16     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
	{
		return LEVEL_ERROR ;
	}
	if(Tank_sensor == 3) Tank_sensor =2;
     412:	83 30       	cpi	r24, 0x03	; 3
     414:	41 f0       	breq	.+16     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
	if(Tank_sensor == 7) Tank_sensor =3;
     416:	87 30       	cpi	r24, 0x07	; 7
     418:	39 f4       	brne	.+14     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
     41a:	83 e0       	ldi	r24, 0x03	; 3
     41c:	05 c0       	rjmp	.+10     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 {
	uint8_t Tank_sensor = 0 ;
	Tank_sensor = Get_tank_level_state(1) | (Get_tank_level_state(2) << 1) | (Get_tank_level_state(3) << 2) ;
	if (Tank_sensor == 2 || Tank_sensor == 4 || Tank_sensor == 5 || Tank_sensor == 6  )
	{
		return LEVEL_ERROR ;
     41e:	85 e5       	ldi	r24, 0x55	; 85
     420:	03 c0       	rjmp	.+6      	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
     422:	85 e5       	ldi	r24, 0x55	; 85
     424:	01 c0       	rjmp	.+2      	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
	}
	if(Tank_sensor == 3) Tank_sensor =2;
     426:	82 e0       	ldi	r24, 0x02	; 2
	if(Tank_sensor == 7) Tank_sensor =3;
	return Tank_sensor ;
 }
     428:	df 91       	pop	r29
     42a:	cf 91       	pop	r28
     42c:	08 95       	ret

0000042e <Get_blancher_level>:
 
uint8_t Get_blancher_level(void)
{
	uint8_t Blancher_level =0;
	Blancher_level = Get_blancher_level_state();
     42e:	0c 94 b4 0c 	jmp	0x1968	; 0x1968 <Get_blancher_level_state>
	return Blancher_level ;
}
     432:	08 95       	ret

00000434 <Modbus_mster_transaction>:
		g_mod1_write_address = u16WriteAddress;
		g_mod1_write_qty = u16BitQty;
		return Modbus_mster_transaction(device, OUR_WRITE_MULTIPLE_COILS);
	}
	return INVALID_DEVICE; //error
}
     434:	7f 92       	push	r7
     436:	8f 92       	push	r8
     438:	9f 92       	push	r9
     43a:	af 92       	push	r10
     43c:	bf 92       	push	r11
     43e:	cf 92       	push	r12
     440:	df 92       	push	r13
     442:	ef 92       	push	r14
     444:	ff 92       	push	r15
     446:	0f 93       	push	r16
     448:	1f 93       	push	r17
     44a:	cf 93       	push	r28
     44c:	df 93       	push	r29
     44e:	cd b7       	in	r28, 0x3d	; 61
     450:	de b7       	in	r29, 0x3e	; 62
     452:	da 95       	dec	r29
     454:	0f b6       	in	r0, 0x3f	; 63
     456:	f8 94       	cli
     458:	de bf       	out	0x3e, r29	; 62
     45a:	0f be       	out	0x3f, r0	; 63
     45c:	cd bf       	out	0x3d, r28	; 61
     45e:	d6 2e       	mov	r13, r22
     460:	81 11       	cpse	r24, r1
     462:	14 c3       	rjmp	.+1576   	; 0xa8c <Modbus_mster_transaction+0x658>
     464:	80 91 b2 05 	lds	r24, 0x05B2	; 0x8005b2 <g_mod0_slave>
     468:	89 83       	std	Y+1, r24	; 0x01
     46a:	2f ef       	ldi	r18, 0xFF	; 255
     46c:	62 13       	cpse	r22, r18
     46e:	06 c0       	rjmp	.+12     	; 0x47c <Modbus_mster_transaction+0x48>
     470:	8f e0       	ldi	r24, 0x0F	; 15
     472:	8a 83       	std	Y+2, r24	; 0x02
     474:	68 94       	set
     476:	cc 24       	eor	r12, r12
     478:	c1 f8       	bld	r12, 1
     47a:	32 c0       	rjmp	.+100    	; 0x4e0 <Modbus_mster_transaction+0xac>
     47c:	6a 83       	std	Y+2, r22	; 0x02
     47e:	81 e0       	ldi	r24, 0x01	; 1
     480:	68 17       	cp	r22, r24
     482:	b8 f0       	brcs	.+46     	; 0x4b2 <Modbus_mster_transaction+0x7e>
     484:	94 e0       	ldi	r25, 0x04	; 4
     486:	96 17       	cp	r25, r22
     488:	18 f4       	brcc	.+6      	; 0x490 <Modbus_mster_transaction+0x5c>
     48a:	a7 e1       	ldi	r26, 0x17	; 23
     48c:	6a 13       	cpse	r22, r26
     48e:	11 c0       	rjmp	.+34     	; 0x4b2 <Modbus_mster_transaction+0x7e>
     490:	80 91 ab 05 	lds	r24, 0x05AB	; 0x8005ab <g_mod0_read_address>
     494:	90 91 ac 05 	lds	r25, 0x05AC	; 0x8005ac <g_mod0_read_address+0x1>
     498:	9b 83       	std	Y+3, r25	; 0x03
     49a:	8c 83       	std	Y+4, r24	; 0x04
     49c:	80 91 a9 05 	lds	r24, 0x05A9	; 0x8005a9 <g_mod0_read_qty>
     4a0:	90 91 aa 05 	lds	r25, 0x05AA	; 0x8005aa <g_mod0_read_qty+0x1>
     4a4:	9d 83       	std	Y+5, r25	; 0x05
     4a6:	8e 83       	std	Y+6, r24	; 0x06
     4a8:	0f 2e       	mov	r0, r31
     4aa:	f6 e0       	ldi	r31, 0x06	; 6
     4ac:	cf 2e       	mov	r12, r31
     4ae:	f0 2d       	mov	r31, r0
     4b0:	03 c0       	rjmp	.+6      	; 0x4b8 <Modbus_mster_transaction+0x84>
     4b2:	68 94       	set
     4b4:	cc 24       	eor	r12, r12
     4b6:	c1 f8       	bld	r12, 1
     4b8:	b0 e1       	ldi	r27, 0x10	; 16
     4ba:	bd 15       	cp	r27, r13
     4bc:	40 f0       	brcs	.+16     	; 0x4ce <Modbus_mster_transaction+0x9a>
     4be:	ef e0       	ldi	r30, 0x0F	; 15
     4c0:	de 16       	cp	r13, r30
     4c2:	70 f4       	brcc	.+28     	; 0x4e0 <Modbus_mster_transaction+0xac>
     4c4:	8b ef       	ldi	r24, 0xFB	; 251
     4c6:	8d 0d       	add	r24, r13
     4c8:	82 30       	cpi	r24, 0x02	; 2
     4ca:	00 f5       	brcc	.+64     	; 0x50c <Modbus_mster_transaction+0xd8>
     4cc:	09 c0       	rjmp	.+18     	; 0x4e0 <Modbus_mster_transaction+0xac>
     4ce:	f6 e1       	ldi	r31, 0x16	; 22
     4d0:	df 16       	cp	r13, r31
     4d2:	e0 f0       	brcs	.+56     	; 0x50c <Modbus_mster_transaction+0xd8>
     4d4:	27 e1       	ldi	r18, 0x17	; 23
     4d6:	2d 15       	cp	r18, r13
     4d8:	18 f4       	brcc	.+6      	; 0x4e0 <Modbus_mster_transaction+0xac>
     4da:	8f ef       	ldi	r24, 0xFF	; 255
     4dc:	d8 12       	cpse	r13, r24
     4de:	16 c0       	rjmp	.+44     	; 0x50c <Modbus_mster_transaction+0xd8>
     4e0:	90 91 27 05 	lds	r25, 0x0527	; 0x800527 <g_mod0_write_address>
     4e4:	80 91 28 05 	lds	r24, 0x0528	; 0x800528 <g_mod0_write_address+0x1>
     4e8:	e1 e0       	ldi	r30, 0x01	; 1
     4ea:	f0 e0       	ldi	r31, 0x00	; 0
     4ec:	ec 0f       	add	r30, r28
     4ee:	fd 1f       	adc	r31, r29
     4f0:	ec 0d       	add	r30, r12
     4f2:	f1 1d       	adc	r31, r1
     4f4:	80 83       	st	Z, r24
     4f6:	81 e0       	ldi	r24, 0x01	; 1
     4f8:	8c 0d       	add	r24, r12
     4fa:	e1 e0       	ldi	r30, 0x01	; 1
     4fc:	f0 e0       	ldi	r31, 0x00	; 0
     4fe:	ec 0f       	add	r30, r28
     500:	fd 1f       	adc	r31, r29
     502:	e8 0f       	add	r30, r24
     504:	f1 1d       	adc	r31, r1
     506:	c3 94       	inc	r12
     508:	c3 94       	inc	r12
     50a:	90 83       	st	Z, r25
     50c:	90 e1       	ldi	r25, 0x10	; 16
     50e:	d9 16       	cp	r13, r25
     510:	09 f4       	brne	.+2      	; 0x514 <Modbus_mster_transaction+0xe0>
     512:	ad c0       	rjmp	.+346    	; 0x66e <Modbus_mster_transaction+0x23a>
     514:	9d 15       	cp	r25, r13
     516:	58 f0       	brcs	.+22     	; 0x52e <Modbus_mster_transaction+0xfa>
     518:	a6 e0       	ldi	r26, 0x06	; 6
     51a:	da 16       	cp	r13, r26
     51c:	61 f1       	breq	.+88     	; 0x576 <Modbus_mster_transaction+0x142>
     51e:	bf e0       	ldi	r27, 0x0F	; 15
     520:	db 16       	cp	r13, r27
     522:	09 f4       	brne	.+2      	; 0x526 <Modbus_mster_transaction+0xf2>
     524:	41 c0       	rjmp	.+130    	; 0x5a8 <Modbus_mster_transaction+0x174>
     526:	e5 e0       	ldi	r30, 0x05	; 5
     528:	de 12       	cpse	r13, r30
     52a:	1e c1       	rjmp	.+572    	; 0x768 <Modbus_mster_transaction+0x334>
     52c:	0d c0       	rjmp	.+26     	; 0x548 <Modbus_mster_transaction+0x114>
     52e:	f7 e1       	ldi	r31, 0x17	; 23
     530:	df 16       	cp	r13, r31
     532:	09 f4       	brne	.+2      	; 0x536 <Modbus_mster_transaction+0x102>
     534:	9c c0       	rjmp	.+312    	; 0x66e <Modbus_mster_transaction+0x23a>
     536:	2f ef       	ldi	r18, 0xFF	; 255
     538:	d2 16       	cp	r13, r18
     53a:	09 f4       	brne	.+2      	; 0x53e <Modbus_mster_transaction+0x10a>
     53c:	98 c0       	rjmp	.+304    	; 0x66e <Modbus_mster_transaction+0x23a>
     53e:	86 e1       	ldi	r24, 0x16	; 22
     540:	d8 16       	cp	r13, r24
     542:	09 f4       	brne	.+2      	; 0x546 <Modbus_mster_transaction+0x112>
     544:	e1 c0       	rjmp	.+450    	; 0x708 <Modbus_mster_transaction+0x2d4>
     546:	10 c1       	rjmp	.+544    	; 0x768 <Modbus_mster_transaction+0x334>
     548:	90 91 25 05 	lds	r25, 0x0525	; 0x800525 <g_mod0_write_qty>
     54c:	80 91 26 05 	lds	r24, 0x0526	; 0x800526 <g_mod0_write_qty+0x1>
     550:	e1 e0       	ldi	r30, 0x01	; 1
     552:	f0 e0       	ldi	r31, 0x00	; 0
     554:	ec 0f       	add	r30, r28
     556:	fd 1f       	adc	r31, r29
     558:	ec 0d       	add	r30, r12
     55a:	f1 1d       	adc	r31, r1
     55c:	80 83       	st	Z, r24
     55e:	81 e0       	ldi	r24, 0x01	; 1
     560:	8c 0d       	add	r24, r12
     562:	e1 e0       	ldi	r30, 0x01	; 1
     564:	f0 e0       	ldi	r31, 0x00	; 0
     566:	ec 0f       	add	r30, r28
     568:	fd 1f       	adc	r31, r29
     56a:	e8 0f       	add	r30, r24
     56c:	f1 1d       	adc	r31, r1
     56e:	c3 94       	inc	r12
     570:	c3 94       	inc	r12
     572:	90 83       	st	Z, r25
     574:	f9 c0       	rjmp	.+498    	; 0x768 <Modbus_mster_transaction+0x334>
     576:	e5 ea       	ldi	r30, 0xA5	; 165
     578:	f4 e0       	ldi	r31, 0x04	; 4
     57a:	80 81       	ld	r24, Z
     57c:	91 81       	ldd	r25, Z+1	; 0x01
     57e:	a1 e0       	ldi	r26, 0x01	; 1
     580:	b0 e0       	ldi	r27, 0x00	; 0
     582:	ac 0f       	add	r26, r28
     584:	bd 1f       	adc	r27, r29
     586:	ac 0d       	add	r26, r12
     588:	b1 1d       	adc	r27, r1
     58a:	9c 93       	st	X, r25
     58c:	20 81       	ld	r18, Z
     58e:	31 81       	ldd	r19, Z+1	; 0x01
     590:	81 e0       	ldi	r24, 0x01	; 1
     592:	8c 0d       	add	r24, r12
     594:	e1 e0       	ldi	r30, 0x01	; 1
     596:	f0 e0       	ldi	r31, 0x00	; 0
     598:	ec 0f       	add	r30, r28
     59a:	fd 1f       	adc	r31, r29
     59c:	e8 0f       	add	r30, r24
     59e:	f1 1d       	adc	r31, r1
     5a0:	c3 94       	inc	r12
     5a2:	c3 94       	inc	r12
     5a4:	20 83       	st	Z, r18
     5a6:	e0 c0       	rjmp	.+448    	; 0x768 <Modbus_mster_transaction+0x334>
     5a8:	80 91 25 05 	lds	r24, 0x0525	; 0x800525 <g_mod0_write_qty>
     5ac:	90 91 26 05 	lds	r25, 0x0526	; 0x800526 <g_mod0_write_qty+0x1>
     5b0:	e1 e0       	ldi	r30, 0x01	; 1
     5b2:	f0 e0       	ldi	r31, 0x00	; 0
     5b4:	ec 0f       	add	r30, r28
     5b6:	fd 1f       	adc	r31, r29
     5b8:	ec 0d       	add	r30, r12
     5ba:	f1 1d       	adc	r31, r1
     5bc:	90 83       	st	Z, r25
     5be:	32 e0       	ldi	r19, 0x02	; 2
     5c0:	3c 0d       	add	r19, r12
     5c2:	21 e0       	ldi	r18, 0x01	; 1
     5c4:	2c 0d       	add	r18, r12
     5c6:	e1 e0       	ldi	r30, 0x01	; 1
     5c8:	f0 e0       	ldi	r31, 0x00	; 0
     5ca:	ec 0f       	add	r30, r28
     5cc:	fd 1f       	adc	r31, r29
     5ce:	e2 0f       	add	r30, r18
     5d0:	f1 1d       	adc	r31, r1
     5d2:	80 83       	st	Z, r24
     5d4:	ac 01       	movw	r20, r24
     5d6:	47 70       	andi	r20, 0x07	; 7
     5d8:	55 27       	eor	r21, r21
     5da:	45 2b       	or	r20, r21
     5dc:	49 f0       	breq	.+18     	; 0x5f0 <Modbus_mster_transaction+0x1bc>
     5de:	96 95       	lsr	r25
     5e0:	87 95       	ror	r24
     5e2:	96 95       	lsr	r25
     5e4:	87 95       	ror	r24
     5e6:	96 95       	lsr	r25
     5e8:	87 95       	ror	r24
     5ea:	21 e0       	ldi	r18, 0x01	; 1
     5ec:	28 0f       	add	r18, r24
     5ee:	07 c0       	rjmp	.+14     	; 0x5fe <Modbus_mster_transaction+0x1ca>
     5f0:	96 95       	lsr	r25
     5f2:	87 95       	ror	r24
     5f4:	96 95       	lsr	r25
     5f6:	87 95       	ror	r24
     5f8:	96 95       	lsr	r25
     5fa:	87 95       	ror	r24
     5fc:	28 2f       	mov	r18, r24
     5fe:	93 e0       	ldi	r25, 0x03	; 3
     600:	c9 0e       	add	r12, r25
     602:	fe 01       	movw	r30, r28
     604:	e3 0f       	add	r30, r19
     606:	f1 1d       	adc	r31, r1
     608:	21 83       	std	Z+1, r18	; 0x01
     60a:	22 23       	and	r18, r18
     60c:	09 f4       	brne	.+2      	; 0x610 <Modbus_mster_transaction+0x1dc>
     60e:	ac c0       	rjmp	.+344    	; 0x768 <Modbus_mster_transaction+0x334>
     610:	80 e0       	ldi	r24, 0x00	; 0
     612:	98 2f       	mov	r25, r24
     614:	91 70       	andi	r25, 0x01	; 1
     616:	80 ff       	sbrs	r24, 0
     618:	03 c0       	rjmp	.+6      	; 0x620 <Modbus_mster_transaction+0x1ec>
     61a:	91 30       	cpi	r25, 0x01	; 1
     61c:	99 f0       	breq	.+38     	; 0x644 <Modbus_mster_transaction+0x210>
     61e:	23 c0       	rjmp	.+70     	; 0x666 <Modbus_mster_transaction+0x232>
     620:	e8 2f       	mov	r30, r24
     622:	e6 95       	lsr	r30
     624:	f0 e0       	ldi	r31, 0x00	; 0
     626:	ee 0f       	add	r30, r30
     628:	ff 1f       	adc	r31, r31
     62a:	eb 55       	subi	r30, 0x5B	; 91
     62c:	fb 4f       	sbci	r31, 0xFB	; 251
     62e:	40 81       	ld	r20, Z
     630:	51 81       	ldd	r21, Z+1	; 0x01
     632:	e1 e0       	ldi	r30, 0x01	; 1
     634:	f0 e0       	ldi	r31, 0x00	; 0
     636:	ec 0f       	add	r30, r28
     638:	fd 1f       	adc	r31, r29
     63a:	ec 0d       	add	r30, r12
     63c:	f1 1d       	adc	r31, r1
     63e:	40 83       	st	Z, r20
     640:	c3 94       	inc	r12
     642:	11 c0       	rjmp	.+34     	; 0x666 <Modbus_mster_transaction+0x232>
     644:	e8 2f       	mov	r30, r24
     646:	e6 95       	lsr	r30
     648:	f0 e0       	ldi	r31, 0x00	; 0
     64a:	ee 0f       	add	r30, r30
     64c:	ff 1f       	adc	r31, r31
     64e:	eb 55       	subi	r30, 0x5B	; 91
     650:	fb 4f       	sbci	r31, 0xFB	; 251
     652:	40 81       	ld	r20, Z
     654:	51 81       	ldd	r21, Z+1	; 0x01
     656:	e1 e0       	ldi	r30, 0x01	; 1
     658:	f0 e0       	ldi	r31, 0x00	; 0
     65a:	ec 0f       	add	r30, r28
     65c:	fd 1f       	adc	r31, r29
     65e:	ec 0d       	add	r30, r12
     660:	f1 1d       	adc	r31, r1
     662:	50 83       	st	Z, r21
     664:	c3 94       	inc	r12
     666:	8f 5f       	subi	r24, 0xFF	; 255
     668:	82 13       	cpse	r24, r18
     66a:	d3 cf       	rjmp	.-90     	; 0x612 <Modbus_mster_transaction+0x1de>
     66c:	7d c0       	rjmp	.+250    	; 0x768 <Modbus_mster_transaction+0x334>
     66e:	60 91 25 05 	lds	r22, 0x0525	; 0x800525 <g_mod0_write_qty>
     672:	80 91 26 05 	lds	r24, 0x0526	; 0x800526 <g_mod0_write_qty+0x1>
     676:	e1 e0       	ldi	r30, 0x01	; 1
     678:	f0 e0       	ldi	r31, 0x00	; 0
     67a:	ec 0f       	add	r30, r28
     67c:	fd 1f       	adc	r31, r29
     67e:	ec 0d       	add	r30, r12
     680:	f1 1d       	adc	r31, r1
     682:	80 83       	st	Z, r24
     684:	81 e0       	ldi	r24, 0x01	; 1
     686:	8c 0d       	add	r24, r12
     688:	e1 e0       	ldi	r30, 0x01	; 1
     68a:	f0 e0       	ldi	r31, 0x00	; 0
     68c:	ec 0f       	add	r30, r28
     68e:	fd 1f       	adc	r31, r29
     690:	e8 0f       	add	r30, r24
     692:	f1 1d       	adc	r31, r1
     694:	60 83       	st	Z, r22
     696:	73 e0       	ldi	r23, 0x03	; 3
     698:	7c 0d       	add	r23, r12
     69a:	82 e0       	ldi	r24, 0x02	; 2
     69c:	8c 0d       	add	r24, r12
     69e:	e1 e0       	ldi	r30, 0x01	; 1
     6a0:	f0 e0       	ldi	r31, 0x00	; 0
     6a2:	ec 0f       	add	r30, r28
     6a4:	fd 1f       	adc	r31, r29
     6a6:	e8 0f       	add	r30, r24
     6a8:	f1 1d       	adc	r31, r1
     6aa:	86 2f       	mov	r24, r22
     6ac:	88 0f       	add	r24, r24
     6ae:	80 83       	st	Z, r24
     6b0:	66 23       	and	r22, r22
     6b2:	09 f4       	brne	.+2      	; 0x6b6 <Modbus_mster_transaction+0x282>
     6b4:	58 c0       	rjmp	.+176    	; 0x766 <Modbus_mster_transaction+0x332>
     6b6:	86 2f       	mov	r24, r22
     6b8:	88 0f       	add	r24, r24
     6ba:	8d 5f       	subi	r24, 0xFD	; 253
     6bc:	c8 0e       	add	r12, r24
     6be:	87 2f       	mov	r24, r23
     6c0:	20 e0       	ldi	r18, 0x00	; 0
     6c2:	30 e0       	ldi	r19, 0x00	; 0
     6c4:	91 e0       	ldi	r25, 0x01	; 1
     6c6:	98 0f       	add	r25, r24
     6c8:	f9 01       	movw	r30, r18
     6ca:	ee 0f       	add	r30, r30
     6cc:	ff 1f       	adc	r31, r31
     6ce:	eb 55       	subi	r30, 0x5B	; 91
     6d0:	fb 4f       	sbci	r31, 0xFB	; 251
     6d2:	40 81       	ld	r20, Z
     6d4:	51 81       	ldd	r21, Z+1	; 0x01
     6d6:	a1 e0       	ldi	r26, 0x01	; 1
     6d8:	b0 e0       	ldi	r27, 0x00	; 0
     6da:	ac 0f       	add	r26, r28
     6dc:	bd 1f       	adc	r27, r29
     6de:	a8 0f       	add	r26, r24
     6e0:	b1 1d       	adc	r27, r1
     6e2:	5c 93       	st	X, r21
     6e4:	8e 5f       	subi	r24, 0xFE	; 254
     6e6:	40 81       	ld	r20, Z
     6e8:	51 81       	ldd	r21, Z+1	; 0x01
     6ea:	e1 e0       	ldi	r30, 0x01	; 1
     6ec:	f0 e0       	ldi	r31, 0x00	; 0
     6ee:	ec 0f       	add	r30, r28
     6f0:	fd 1f       	adc	r31, r29
     6f2:	e9 0f       	add	r30, r25
     6f4:	f1 1d       	adc	r31, r1
     6f6:	40 83       	st	Z, r20
     6f8:	2f 5f       	subi	r18, 0xFF	; 255
     6fa:	3f 4f       	sbci	r19, 0xFF	; 255
     6fc:	8c 11       	cpse	r24, r12
     6fe:	e2 cf       	rjmp	.-60     	; 0x6c4 <Modbus_mster_transaction+0x290>
     700:	66 0f       	add	r22, r22
     702:	c6 2e       	mov	r12, r22
     704:	c7 0e       	add	r12, r23
     706:	30 c0       	rjmp	.+96     	; 0x768 <Modbus_mster_transaction+0x334>
     708:	e5 ea       	ldi	r30, 0xA5	; 165
     70a:	f4 e0       	ldi	r31, 0x04	; 4
     70c:	80 81       	ld	r24, Z
     70e:	91 81       	ldd	r25, Z+1	; 0x01
     710:	a1 e0       	ldi	r26, 0x01	; 1
     712:	b0 e0       	ldi	r27, 0x00	; 0
     714:	ac 0f       	add	r26, r28
     716:	bd 1f       	adc	r27, r29
     718:	ac 0d       	add	r26, r12
     71a:	b1 1d       	adc	r27, r1
     71c:	9c 93       	st	X, r25
     71e:	80 81       	ld	r24, Z
     720:	91 81       	ldd	r25, Z+1	; 0x01
     722:	91 e0       	ldi	r25, 0x01	; 1
     724:	9c 0d       	add	r25, r12
     726:	a1 e0       	ldi	r26, 0x01	; 1
     728:	b0 e0       	ldi	r27, 0x00	; 0
     72a:	ac 0f       	add	r26, r28
     72c:	bd 1f       	adc	r27, r29
     72e:	a9 0f       	add	r26, r25
     730:	b1 1d       	adc	r27, r1
     732:	8c 93       	st	X, r24
     734:	82 81       	ldd	r24, Z+2	; 0x02
     736:	93 81       	ldd	r25, Z+3	; 0x03
     738:	82 e0       	ldi	r24, 0x02	; 2
     73a:	8c 0d       	add	r24, r12
     73c:	a1 e0       	ldi	r26, 0x01	; 1
     73e:	b0 e0       	ldi	r27, 0x00	; 0
     740:	ac 0f       	add	r26, r28
     742:	bd 1f       	adc	r27, r29
     744:	a8 0f       	add	r26, r24
     746:	b1 1d       	adc	r27, r1
     748:	9c 93       	st	X, r25
     74a:	22 81       	ldd	r18, Z+2	; 0x02
     74c:	33 81       	ldd	r19, Z+3	; 0x03
     74e:	83 e0       	ldi	r24, 0x03	; 3
     750:	8c 0d       	add	r24, r12
     752:	e1 e0       	ldi	r30, 0x01	; 1
     754:	f0 e0       	ldi	r31, 0x00	; 0
     756:	ec 0f       	add	r30, r28
     758:	fd 1f       	adc	r31, r29
     75a:	e8 0f       	add	r30, r24
     75c:	f1 1d       	adc	r31, r1
     75e:	a4 e0       	ldi	r26, 0x04	; 4
     760:	ca 0e       	add	r12, r26
     762:	20 83       	st	Z, r18
     764:	01 c0       	rjmp	.+2      	; 0x768 <Modbus_mster_transaction+0x334>
     766:	c7 2e       	mov	r12, r23
     768:	cc 20       	and	r12, r12
     76a:	b9 f0       	breq	.+46     	; 0x79a <Modbus_mster_transaction+0x366>
     76c:	8e 01       	movw	r16, r28
     76e:	0f 5f       	subi	r16, 0xFF	; 255
     770:	1f 4f       	sbci	r17, 0xFF	; 255
     772:	ee 24       	eor	r14, r14
     774:	ea 94       	dec	r14
     776:	ec 0c       	add	r14, r12
     778:	f1 2c       	mov	r15, r1
     77a:	bf ef       	ldi	r27, 0xFF	; 255
     77c:	eb 1a       	sub	r14, r27
     77e:	fb 0a       	sbc	r15, r27
     780:	e0 0e       	add	r14, r16
     782:	f1 1e       	adc	r15, r17
     784:	8f ef       	ldi	r24, 0xFF	; 255
     786:	9f ef       	ldi	r25, 0xFF	; 255
     788:	f8 01       	movw	r30, r16
     78a:	61 91       	ld	r22, Z+
     78c:	8f 01       	movw	r16, r30
     78e:	0e 94 8b 24 	call	0x4916	; 0x4916 <crc16_update>
     792:	0e 15       	cp	r16, r14
     794:	1f 05       	cpc	r17, r15
     796:	c1 f7       	brne	.-16     	; 0x788 <Modbus_mster_transaction+0x354>
     798:	02 c0       	rjmp	.+4      	; 0x79e <Modbus_mster_transaction+0x36a>
     79a:	8f ef       	ldi	r24, 0xFF	; 255
     79c:	9f ef       	ldi	r25, 0xFF	; 255
     79e:	ee 24       	eor	r14, r14
     7a0:	e3 94       	inc	r14
     7a2:	ec 0c       	add	r14, r12
     7a4:	e1 e0       	ldi	r30, 0x01	; 1
     7a6:	f0 e0       	ldi	r31, 0x00	; 0
     7a8:	ec 0f       	add	r30, r28
     7aa:	fd 1f       	adc	r31, r29
     7ac:	ec 0d       	add	r30, r12
     7ae:	f1 1d       	adc	r31, r1
     7b0:	80 83       	st	Z, r24
     7b2:	c3 94       	inc	r12
     7b4:	c3 94       	inc	r12
     7b6:	e1 e0       	ldi	r30, 0x01	; 1
     7b8:	f0 e0       	ldi	r31, 0x00	; 0
     7ba:	ec 0f       	add	r30, r28
     7bc:	fd 1f       	adc	r31, r29
     7be:	ee 0d       	add	r30, r14
     7c0:	f1 1d       	adc	r31, r1
     7c2:	90 83       	st	Z, r25
     7c4:	e1 e0       	ldi	r30, 0x01	; 1
     7c6:	f0 e0       	ldi	r31, 0x00	; 0
     7c8:	ec 0f       	add	r30, r28
     7ca:	fd 1f       	adc	r31, r29
     7cc:	ec 0d       	add	r30, r12
     7ce:	f1 1d       	adc	r31, r1
     7d0:	10 82       	st	Z, r1
     7d2:	e0 91 96 04 	lds	r30, 0x0496	; 0x800496 <g_mod0_Serial_getc>
     7d6:	f0 91 97 04 	lds	r31, 0x0497	; 0x800497 <g_mod0_Serial_getc+0x1>
     7da:	19 95       	eicall
     7dc:	81 15       	cp	r24, r1
     7de:	91 40       	sbci	r25, 0x01	; 1
     7e0:	c1 f7       	brne	.-16     	; 0x7d2 <Modbus_mster_transaction+0x39e>
     7e2:	e0 91 9c 04 	lds	r30, 0x049C	; 0x80049c <g_mod0_pre_transmission>
     7e6:	f0 91 9d 04 	lds	r31, 0x049D	; 0x80049d <g_mod0_pre_transmission+0x1>
     7ea:	30 97       	sbiw	r30, 0x00	; 0
     7ec:	09 f0       	breq	.+2      	; 0x7f0 <Modbus_mster_transaction+0x3bc>
     7ee:	19 95       	eicall
     7f0:	cc 20       	and	r12, r12
     7f2:	a1 f0       	breq	.+40     	; 0x81c <Modbus_mster_transaction+0x3e8>
     7f4:	8e 01       	movw	r16, r28
     7f6:	0f 5f       	subi	r16, 0xFF	; 255
     7f8:	1f 4f       	sbci	r17, 0xFF	; 255
     7fa:	f1 2c       	mov	r15, r1
     7fc:	2f ef       	ldi	r18, 0xFF	; 255
     7fe:	e2 1a       	sub	r14, r18
     800:	f2 0a       	sbc	r15, r18
     802:	e0 0e       	add	r14, r16
     804:	f1 1e       	adc	r15, r17
     806:	e0 91 98 04 	lds	r30, 0x0498	; 0x800498 <g_mod0_Serial_putc>
     80a:	f0 91 99 04 	lds	r31, 0x0499	; 0x800499 <g_mod0_Serial_putc+0x1>
     80e:	d8 01       	movw	r26, r16
     810:	8d 91       	ld	r24, X+
     812:	8d 01       	movw	r16, r26
     814:	19 95       	eicall
     816:	0e 15       	cp	r16, r14
     818:	1f 05       	cpc	r17, r15
     81a:	a9 f7       	brne	.-22     	; 0x806 <Modbus_mster_transaction+0x3d2>
     81c:	e0 91 94 04 	lds	r30, 0x0494	; 0x800494 <g_mod0_Serial_flush>
     820:	f0 91 95 04 	lds	r31, 0x0495	; 0x800495 <g_mod0_Serial_flush+0x1>
     824:	19 95       	eicall
     826:	ef e8       	ldi	r30, 0x8F	; 143
     828:	f1 e0       	ldi	r31, 0x01	; 1
     82a:	31 97       	sbiw	r30, 0x01	; 1
     82c:	f1 f7       	brne	.-4      	; 0x82a <Modbus_mster_transaction+0x3f6>
     82e:	00 c0       	rjmp	.+0      	; 0x830 <Modbus_mster_transaction+0x3fc>
     830:	00 00       	nop
     832:	e0 91 9a 04 	lds	r30, 0x049A	; 0x80049a <g_mod0_post_transmission>
     836:	f0 91 9b 04 	lds	r31, 0x049B	; 0x80049b <g_mod0_post_transmission+0x1>
     83a:	30 97       	sbiw	r30, 0x00	; 0
     83c:	09 f0       	breq	.+2      	; 0x840 <Modbus_mster_transaction+0x40c>
     83e:	19 95       	eicall
     840:	0e 94 ac 24 	call	0x4958	; 0x4958 <Get_millis>
     844:	4b 01       	movw	r8, r22
     846:	5c 01       	movw	r10, r24
     848:	08 e0       	ldi	r16, 0x08	; 8
     84a:	10 e0       	ldi	r17, 0x00	; 0
     84c:	ed 2c       	mov	r14, r13
     84e:	f1 2c       	mov	r15, r1
     850:	0f 2e       	mov	r0, r31
     852:	f3 e0       	ldi	r31, 0x03	; 3
     854:	cf 2e       	mov	r12, r31
     856:	f0 2d       	mov	r31, r0
     858:	0f 2e       	mov	r0, r31
     85a:	f5 e0       	ldi	r31, 0x05	; 5
     85c:	df 2e       	mov	r13, r31
     85e:	f0 2d       	mov	r31, r0
     860:	e0 91 90 04 	lds	r30, 0x0490	; 0x800490 <g_mod0_Serial_available>
     864:	f0 91 91 04 	lds	r31, 0x0491	; 0x800491 <g_mod0_Serial_available+0x1>
     868:	19 95       	eicall
     86a:	89 2b       	or	r24, r25
     86c:	91 f0       	breq	.+36     	; 0x892 <Modbus_mster_transaction+0x45e>
     86e:	77 24       	eor	r7, r7
     870:	73 94       	inc	r7
     872:	71 0e       	add	r7, r17
     874:	e0 91 96 04 	lds	r30, 0x0496	; 0x800496 <g_mod0_Serial_getc>
     878:	f0 91 97 04 	lds	r31, 0x0497	; 0x800497 <g_mod0_Serial_getc+0x1>
     87c:	19 95       	eicall
     87e:	e1 e0       	ldi	r30, 0x01	; 1
     880:	f0 e0       	ldi	r31, 0x00	; 0
     882:	ec 0f       	add	r30, r28
     884:	fd 1f       	adc	r31, r29
     886:	e1 0f       	add	r30, r17
     888:	f1 1d       	adc	r31, r1
     88a:	80 83       	st	Z, r24
     88c:	01 50       	subi	r16, 0x01	; 1
     88e:	17 2d       	mov	r17, r7
     890:	07 c0       	rjmp	.+14     	; 0x8a0 <Modbus_mster_transaction+0x46c>
     892:	e0 91 9e 04 	lds	r30, 0x049E	; 0x80049e <g_mod0_idle>
     896:	f0 91 9f 04 	lds	r31, 0x049F	; 0x80049f <g_mod0_idle+0x1>
     89a:	30 97       	sbiw	r30, 0x00	; 0
     89c:	09 f0       	breq	.+2      	; 0x8a0 <Modbus_mster_transaction+0x46c>
     89e:	19 95       	eicall
     8a0:	15 30       	cpi	r17, 0x05	; 5
     8a2:	59 f5       	brne	.+86     	; 0x8fa <Modbus_mster_transaction+0x4c6>
     8a4:	99 81       	ldd	r25, Y+1	; 0x01
     8a6:	80 91 b2 05 	lds	r24, 0x05B2	; 0x8005b2 <g_mod0_slave>
     8aa:	98 13       	cpse	r25, r24
     8ac:	18 c4       	rjmp	.+2096   	; 0x10de <Modbus_mster_transaction+0xcaa>
     8ae:	8a 81       	ldd	r24, Y+2	; 0x02
     8b0:	28 2f       	mov	r18, r24
     8b2:	2f 77       	andi	r18, 0x7F	; 127
     8b4:	30 e0       	ldi	r19, 0x00	; 0
     8b6:	2e 15       	cp	r18, r14
     8b8:	3f 05       	cpc	r19, r15
     8ba:	09 f0       	breq	.+2      	; 0x8be <Modbus_mster_transaction+0x48a>
     8bc:	12 c4       	rjmp	.+2084   	; 0x10e2 <Modbus_mster_transaction+0xcae>
     8be:	88 23       	and	r24, r24
     8c0:	2c f4       	brge	.+10     	; 0x8cc <Modbus_mster_transaction+0x498>
     8c2:	8b 81       	ldd	r24, Y+3	; 0x03
     8c4:	88 23       	and	r24, r24
     8c6:	09 f4       	brne	.+2      	; 0x8ca <Modbus_mster_transaction+0x496>
     8c8:	3d c0       	rjmp	.+122    	; 0x944 <Modbus_mster_transaction+0x510>
     8ca:	d7 c0       	rjmp	.+430    	; 0xa7a <Modbus_mster_transaction+0x646>
     8cc:	81 31       	cpi	r24, 0x11	; 17
     8ce:	58 f4       	brcc	.+22     	; 0x8e6 <Modbus_mster_transaction+0x4b2>
     8d0:	8f 30       	cpi	r24, 0x0F	; 15
     8d2:	08 f0       	brcs	.+2      	; 0x8d6 <Modbus_mster_transaction+0x4a2>
     8d4:	f4 c3       	rjmp	.+2024   	; 0x10be <Modbus_mster_transaction+0xc8a>
     8d6:	81 30       	cpi	r24, 0x01	; 1
     8d8:	80 f0       	brcs	.+32     	; 0x8fa <Modbus_mster_transaction+0x4c6>
     8da:	85 30       	cpi	r24, 0x05	; 5
     8dc:	68 f0       	brcs	.+26     	; 0x8f8 <Modbus_mster_transaction+0x4c4>
     8de:	87 30       	cpi	r24, 0x07	; 7
     8e0:	08 f4       	brcc	.+2      	; 0x8e4 <Modbus_mster_transaction+0x4b0>
     8e2:	ed c3       	rjmp	.+2010   	; 0x10be <Modbus_mster_transaction+0xc8a>
     8e4:	0a c0       	rjmp	.+20     	; 0x8fa <Modbus_mster_transaction+0x4c6>
     8e6:	87 31       	cpi	r24, 0x17	; 23
     8e8:	39 f0       	breq	.+14     	; 0x8f8 <Modbus_mster_transaction+0x4c4>
     8ea:	8f 3f       	cpi	r24, 0xFF	; 255
     8ec:	09 f4       	brne	.+2      	; 0x8f0 <Modbus_mster_transaction+0x4bc>
     8ee:	e7 c3       	rjmp	.+1998   	; 0x10be <Modbus_mster_transaction+0xc8a>
     8f0:	86 31       	cpi	r24, 0x16	; 22
     8f2:	19 f4       	brne	.+6      	; 0x8fa <Modbus_mster_transaction+0x4c6>
     8f4:	0d 2d       	mov	r16, r13
     8f6:	e4 c3       	rjmp	.+1992   	; 0x10c0 <Modbus_mster_transaction+0xc8c>
     8f8:	0b 81       	ldd	r16, Y+3	; 0x03
     8fa:	0e 94 ac 24 	call	0x4958	; 0x4958 <Get_millis>
     8fe:	dc 01       	movw	r26, r24
     900:	cb 01       	movw	r24, r22
     902:	88 19       	sub	r24, r8
     904:	99 09       	sbc	r25, r9
     906:	aa 09       	sbc	r26, r10
     908:	bb 09       	sbc	r27, r11
     90a:	89 3c       	cpi	r24, 0xC9	; 201
     90c:	91 05       	cpc	r25, r1
     90e:	a1 05       	cpc	r26, r1
     910:	b1 05       	cpc	r27, r1
     912:	08 f4       	brcc	.+2      	; 0x916 <Modbus_mster_transaction+0x4e2>
     914:	27 c4       	rjmp	.+2126   	; 0x1164 <Modbus_mster_transaction+0xd30>
     916:	80 e0       	ldi	r24, 0x00	; 0
     918:	92 e0       	ldi	r25, 0x02	; 2
     91a:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <UART0_puts>
     91e:	01 11       	cpse	r16, r1
     920:	e2 c3       	rjmp	.+1988   	; 0x10e6 <Modbus_mster_transaction+0xcb2>
     922:	91 2f       	mov	r25, r17
     924:	82 ee       	ldi	r24, 0xE2	; 226
     926:	22 ee       	ldi	r18, 0xE2	; 226
     928:	21 11       	cpse	r18, r1
     92a:	a7 c0       	rjmp	.+334    	; 0xa7a <Modbus_mster_transaction+0x646>
     92c:	95 30       	cpi	r25, 0x05	; 5
     92e:	78 f1       	brcs	.+94     	; 0x98e <Modbus_mster_transaction+0x55a>
     930:	c1 2e       	mov	r12, r17
     932:	d1 2c       	mov	r13, r1
     934:	76 01       	movw	r14, r12
     936:	f2 e0       	ldi	r31, 0x02	; 2
     938:	ef 1a       	sub	r14, r31
     93a:	f1 08       	sbc	r15, r1
     93c:	1e 14       	cp	r1, r14
     93e:	1f 04       	cpc	r1, r15
     940:	5c f0       	brlt	.+22     	; 0x958 <Modbus_mster_transaction+0x524>
     942:	d6 c3       	rjmp	.+1964   	; 0x10f0 <Modbus_mster_transaction+0xcbc>
     944:	0f 2e       	mov	r0, r31
     946:	f3 e0       	ldi	r31, 0x03	; 3
     948:	ef 2e       	mov	r14, r31
     94a:	f1 2c       	mov	r15, r1
     94c:	f0 2d       	mov	r31, r0
     94e:	0f 2e       	mov	r0, r31
     950:	f5 e0       	ldi	r31, 0x05	; 5
     952:	cf 2e       	mov	r12, r31
     954:	d1 2c       	mov	r13, r1
     956:	f0 2d       	mov	r31, r0
     958:	20 e0       	ldi	r18, 0x00	; 0
     95a:	30 e0       	ldi	r19, 0x00	; 0
     95c:	8f ef       	ldi	r24, 0xFF	; 255
     95e:	9f ef       	ldi	r25, 0xFF	; 255
     960:	00 e0       	ldi	r16, 0x00	; 0
     962:	e1 e0       	ldi	r30, 0x01	; 1
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	ec 0f       	add	r30, r28
     968:	fd 1f       	adc	r31, r29
     96a:	e2 0f       	add	r30, r18
     96c:	f3 1f       	adc	r31, r19
     96e:	60 81       	ld	r22, Z
     970:	0e 94 8b 24 	call	0x4916	; 0x4916 <crc16_update>
     974:	0f 5f       	subi	r16, 0xFF	; 255
     976:	20 2f       	mov	r18, r16
     978:	30 e0       	ldi	r19, 0x00	; 0
     97a:	2e 15       	cp	r18, r14
     97c:	3f 05       	cpc	r19, r15
     97e:	8c f3       	brlt	.-30     	; 0x962 <Modbus_mster_transaction+0x52e>
     980:	b9 c3       	rjmp	.+1906   	; 0x10f4 <Modbus_mster_transaction+0xcc0>
     982:	fe 01       	movw	r30, r28
     984:	ec 0d       	add	r30, r12
     986:	fd 1d       	adc	r31, r13
     988:	80 81       	ld	r24, Z
     98a:	89 13       	cpse	r24, r25
     98c:	bc c3       	rjmp	.+1912   	; 0x1106 <Modbus_mster_transaction+0xcd2>
     98e:	8a 81       	ldd	r24, Y+2	; 0x02
     990:	85 30       	cpi	r24, 0x05	; 5
     992:	28 f4       	brcc	.+10     	; 0x99e <Modbus_mster_transaction+0x56a>
     994:	83 30       	cpi	r24, 0x03	; 3
     996:	30 f4       	brcc	.+12     	; 0x9a4 <Modbus_mster_transaction+0x570>
     998:	81 30       	cpi	r24, 0x01	; 1
     99a:	50 f4       	brcc	.+20     	; 0x9b0 <Modbus_mster_transaction+0x57c>
     99c:	6b c0       	rjmp	.+214    	; 0xa74 <Modbus_mster_transaction+0x640>
     99e:	87 31       	cpi	r24, 0x17	; 23
     9a0:	09 f0       	breq	.+2      	; 0x9a4 <Modbus_mster_transaction+0x570>
     9a2:	68 c0       	rjmp	.+208    	; 0xa74 <Modbus_mster_transaction+0x640>
     9a4:	3b 81       	ldd	r19, Y+3	; 0x03
     9a6:	36 95       	lsr	r19
     9a8:	09 f0       	breq	.+2      	; 0x9ac <Modbus_mster_transaction+0x578>
     9aa:	40 c0       	rjmp	.+128    	; 0xa2c <Modbus_mster_transaction+0x5f8>
     9ac:	80 e0       	ldi	r24, 0x00	; 0
     9ae:	65 c0       	rjmp	.+202    	; 0xa7a <Modbus_mster_transaction+0x646>
     9b0:	7b 81       	ldd	r23, Y+3	; 0x03
     9b2:	67 2f       	mov	r22, r23
     9b4:	66 95       	lsr	r22
     9b6:	09 f4       	brne	.+2      	; 0x9ba <Modbus_mster_transaction+0x586>
     9b8:	a8 c3       	rjmp	.+1872   	; 0x110a <Modbus_mster_transaction+0xcd6>
     9ba:	fe 01       	movw	r30, r28
     9bc:	35 96       	adiw	r30, 0x05	; 5
     9be:	40 e0       	ldi	r20, 0x00	; 0
     9c0:	50 e0       	ldi	r21, 0x00	; 0
     9c2:	90 e0       	ldi	r25, 0x00	; 0
     9c4:	01 c0       	rjmp	.+2      	; 0x9c8 <Modbus_mster_transaction+0x594>
     9c6:	98 2f       	mov	r25, r24
     9c8:	90 34       	cpi	r25, 0x40	; 64
     9ca:	70 f4       	brcc	.+28     	; 0x9e8 <Modbus_mster_transaction+0x5b4>
     9cc:	df 01       	movw	r26, r30
     9ce:	11 97       	sbiw	r26, 0x01	; 1
     9d0:	2c 91       	ld	r18, X
     9d2:	80 81       	ld	r24, Z
     9d4:	30 e0       	ldi	r19, 0x00	; 0
     9d6:	38 2b       	or	r19, r24
     9d8:	da 01       	movw	r26, r20
     9da:	aa 0f       	add	r26, r26
     9dc:	bb 1f       	adc	r27, r27
     9de:	a7 5d       	subi	r26, 0xD7	; 215
     9e0:	ba 4f       	sbci	r27, 0xFA	; 250
     9e2:	11 96       	adiw	r26, 0x01	; 1
     9e4:	3c 93       	st	X, r19
     9e6:	2e 93       	st	-X, r18
     9e8:	81 e0       	ldi	r24, 0x01	; 1
     9ea:	89 0f       	add	r24, r25
     9ec:	4f 5f       	subi	r20, 0xFF	; 255
     9ee:	5f 4f       	sbci	r21, 0xFF	; 255
     9f0:	32 96       	adiw	r30, 0x02	; 2
     9f2:	86 17       	cp	r24, r22
     9f4:	40 f3       	brcs	.-48     	; 0x9c6 <Modbus_mster_transaction+0x592>
     9f6:	90 93 a0 04 	sts	0x04A0, r25	; 0x8004a0 <g_mod0_response_buffer_length>
     9fa:	70 ff       	sbrs	r23, 0
     9fc:	3d c0       	rjmp	.+122    	; 0xa78 <Modbus_mster_transaction+0x644>
     9fe:	80 34       	cpi	r24, 0x40	; 64
     a00:	80 f4       	brcc	.+32     	; 0xa22 <Modbus_mster_transaction+0x5ee>
     a02:	01 c0       	rjmp	.+2      	; 0xa06 <Modbus_mster_transaction+0x5d2>
     a04:	80 e0       	ldi	r24, 0x00	; 0
     a06:	28 2f       	mov	r18, r24
     a08:	30 e0       	ldi	r19, 0x00	; 0
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	fe 01       	movw	r30, r28
     a10:	e2 0f       	add	r30, r18
     a12:	f3 1f       	adc	r31, r19
     a14:	44 81       	ldd	r20, Z+4	; 0x04
     a16:	50 e0       	ldi	r21, 0x00	; 0
     a18:	f9 01       	movw	r30, r18
     a1a:	e7 5d       	subi	r30, 0xD7	; 215
     a1c:	fa 4f       	sbci	r31, 0xFA	; 250
     a1e:	51 83       	std	Z+1, r21	; 0x01
     a20:	40 83       	st	Z, r20
     a22:	8f 5f       	subi	r24, 0xFF	; 255
     a24:	80 93 a0 04 	sts	0x04A0, r24	; 0x8004a0 <g_mod0_response_buffer_length>
     a28:	80 e0       	ldi	r24, 0x00	; 0
     a2a:	27 c0       	rjmp	.+78     	; 0xa7a <Modbus_mster_transaction+0x646>
     a2c:	fe 01       	movw	r30, r28
     a2e:	35 96       	adiw	r30, 0x05	; 5
     a30:	40 e0       	ldi	r20, 0x00	; 0
     a32:	50 e0       	ldi	r21, 0x00	; 0
     a34:	20 e0       	ldi	r18, 0x00	; 0
     a36:	01 c0       	rjmp	.+2      	; 0xa3a <Modbus_mster_transaction+0x606>
     a38:	28 2f       	mov	r18, r24
     a3a:	20 34       	cpi	r18, 0x40	; 64
     a3c:	80 f4       	brcc	.+32     	; 0xa5e <Modbus_mster_transaction+0x62a>
     a3e:	df 01       	movw	r26, r30
     a40:	11 97       	sbiw	r26, 0x01	; 1
     a42:	8c 91       	ld	r24, X
     a44:	90 e0       	ldi	r25, 0x00	; 0
     a46:	98 2f       	mov	r25, r24
     a48:	88 27       	eor	r24, r24
     a4a:	60 81       	ld	r22, Z
     a4c:	86 2b       	or	r24, r22
     a4e:	da 01       	movw	r26, r20
     a50:	aa 0f       	add	r26, r26
     a52:	bb 1f       	adc	r27, r27
     a54:	a7 5d       	subi	r26, 0xD7	; 215
     a56:	ba 4f       	sbci	r27, 0xFA	; 250
     a58:	11 96       	adiw	r26, 0x01	; 1
     a5a:	9c 93       	st	X, r25
     a5c:	8e 93       	st	-X, r24
     a5e:	81 e0       	ldi	r24, 0x01	; 1
     a60:	82 0f       	add	r24, r18
     a62:	4f 5f       	subi	r20, 0xFF	; 255
     a64:	5f 4f       	sbci	r21, 0xFF	; 255
     a66:	32 96       	adiw	r30, 0x02	; 2
     a68:	83 17       	cp	r24, r19
     a6a:	30 f3       	brcs	.-52     	; 0xa38 <Modbus_mster_transaction+0x604>
     a6c:	20 93 a0 04 	sts	0x04A0, r18	; 0x8004a0 <g_mod0_response_buffer_length>
     a70:	80 e0       	ldi	r24, 0x00	; 0
     a72:	03 c0       	rjmp	.+6      	; 0xa7a <Modbus_mster_transaction+0x646>
     a74:	80 e0       	ldi	r24, 0x00	; 0
     a76:	01 c0       	rjmp	.+2      	; 0xa7a <Modbus_mster_transaction+0x646>
     a78:	80 e0       	ldi	r24, 0x00	; 0
     a7a:	10 92 a4 04 	sts	0x04A4, r1	; 0x8004a4 <g_mod0_transmit_buffer_index>
     a7e:	10 92 a3 04 	sts	0x04A3, r1	; 0x8004a3 <g_mod0_transmit_buffer_length+0x1>
     a82:	10 92 a2 04 	sts	0x04A2, r1	; 0x8004a2 <g_mod0_transmit_buffer_length>
     a86:	10 92 a1 04 	sts	0x04A1, r1	; 0x8004a1 <g_mod0_response_buffer_index>
     a8a:	78 c3       	rjmp	.+1776   	; 0x117c <Modbus_mster_transaction+0xd48>
     a8c:	81 30       	cpi	r24, 0x01	; 1
     a8e:	09 f0       	breq	.+2      	; 0xa92 <Modbus_mster_transaction+0x65e>
     a90:	14 c3       	rjmp	.+1576   	; 0x10ba <Modbus_mster_transaction+0xc86>
     a92:	80 91 8b 04 	lds	r24, 0x048B	; 0x80048b <g_mod1_slave>
     a96:	89 83       	std	Y+1, r24	; 0x01
     a98:	2f ef       	ldi	r18, 0xFF	; 255
     a9a:	62 13       	cpse	r22, r18
     a9c:	06 c0       	rjmp	.+12     	; 0xaaa <Modbus_mster_transaction+0x676>
     a9e:	8f e0       	ldi	r24, 0x0F	; 15
     aa0:	8a 83       	std	Y+2, r24	; 0x02
     aa2:	68 94       	set
     aa4:	cc 24       	eor	r12, r12
     aa6:	c1 f8       	bld	r12, 1
     aa8:	32 c0       	rjmp	.+100    	; 0xb0e <Modbus_mster_transaction+0x6da>
     aaa:	6a 83       	std	Y+2, r22	; 0x02
     aac:	81 e0       	ldi	r24, 0x01	; 1
     aae:	68 17       	cp	r22, r24
     ab0:	b8 f0       	brcs	.+46     	; 0xae0 <Modbus_mster_transaction+0x6ac>
     ab2:	94 e0       	ldi	r25, 0x04	; 4
     ab4:	96 17       	cp	r25, r22
     ab6:	18 f4       	brcc	.+6      	; 0xabe <Modbus_mster_transaction+0x68a>
     ab8:	a7 e1       	ldi	r26, 0x17	; 23
     aba:	6a 13       	cpse	r22, r26
     abc:	11 c0       	rjmp	.+34     	; 0xae0 <Modbus_mster_transaction+0x6ac>
     abe:	80 91 84 04 	lds	r24, 0x0484	; 0x800484 <g_mod1_read_address>
     ac2:	90 91 85 04 	lds	r25, 0x0485	; 0x800485 <g_mod1_read_address+0x1>
     ac6:	9b 83       	std	Y+3, r25	; 0x03
     ac8:	8c 83       	std	Y+4, r24	; 0x04
     aca:	80 91 82 04 	lds	r24, 0x0482	; 0x800482 <g_mod1_read_qty>
     ace:	90 91 83 04 	lds	r25, 0x0483	; 0x800483 <g_mod1_read_qty+0x1>
     ad2:	9d 83       	std	Y+5, r25	; 0x05
     ad4:	8e 83       	std	Y+6, r24	; 0x06
     ad6:	0f 2e       	mov	r0, r31
     ad8:	f6 e0       	ldi	r31, 0x06	; 6
     ada:	cf 2e       	mov	r12, r31
     adc:	f0 2d       	mov	r31, r0
     ade:	03 c0       	rjmp	.+6      	; 0xae6 <Modbus_mster_transaction+0x6b2>
     ae0:	68 94       	set
     ae2:	cc 24       	eor	r12, r12
     ae4:	c1 f8       	bld	r12, 1
     ae6:	b0 e1       	ldi	r27, 0x10	; 16
     ae8:	bd 15       	cp	r27, r13
     aea:	40 f0       	brcs	.+16     	; 0xafc <Modbus_mster_transaction+0x6c8>
     aec:	ef e0       	ldi	r30, 0x0F	; 15
     aee:	de 16       	cp	r13, r30
     af0:	70 f4       	brcc	.+28     	; 0xb0e <Modbus_mster_transaction+0x6da>
     af2:	8b ef       	ldi	r24, 0xFB	; 251
     af4:	8d 0d       	add	r24, r13
     af6:	82 30       	cpi	r24, 0x02	; 2
     af8:	00 f5       	brcc	.+64     	; 0xb3a <Modbus_mster_transaction+0x706>
     afa:	09 c0       	rjmp	.+18     	; 0xb0e <Modbus_mster_transaction+0x6da>
     afc:	f6 e1       	ldi	r31, 0x16	; 22
     afe:	df 16       	cp	r13, r31
     b00:	e0 f0       	brcs	.+56     	; 0xb3a <Modbus_mster_transaction+0x706>
     b02:	27 e1       	ldi	r18, 0x17	; 23
     b04:	2d 15       	cp	r18, r13
     b06:	18 f4       	brcc	.+6      	; 0xb0e <Modbus_mster_transaction+0x6da>
     b08:	8f ef       	ldi	r24, 0xFF	; 255
     b0a:	d8 12       	cpse	r13, r24
     b0c:	16 c0       	rjmp	.+44     	; 0xb3a <Modbus_mster_transaction+0x706>
     b0e:	90 91 00 04 	lds	r25, 0x0400	; 0x800400 <g_mod1_write_address>
     b12:	80 91 01 04 	lds	r24, 0x0401	; 0x800401 <g_mod1_write_address+0x1>
     b16:	e1 e0       	ldi	r30, 0x01	; 1
     b18:	f0 e0       	ldi	r31, 0x00	; 0
     b1a:	ec 0f       	add	r30, r28
     b1c:	fd 1f       	adc	r31, r29
     b1e:	ec 0d       	add	r30, r12
     b20:	f1 1d       	adc	r31, r1
     b22:	80 83       	st	Z, r24
     b24:	81 e0       	ldi	r24, 0x01	; 1
     b26:	8c 0d       	add	r24, r12
     b28:	e1 e0       	ldi	r30, 0x01	; 1
     b2a:	f0 e0       	ldi	r31, 0x00	; 0
     b2c:	ec 0f       	add	r30, r28
     b2e:	fd 1f       	adc	r31, r29
     b30:	e8 0f       	add	r30, r24
     b32:	f1 1d       	adc	r31, r1
     b34:	c3 94       	inc	r12
     b36:	c3 94       	inc	r12
     b38:	90 83       	st	Z, r25
     b3a:	90 e1       	ldi	r25, 0x10	; 16
     b3c:	d9 16       	cp	r13, r25
     b3e:	09 f4       	brne	.+2      	; 0xb42 <Modbus_mster_transaction+0x70e>
     b40:	ad c0       	rjmp	.+346    	; 0xc9c <Modbus_mster_transaction+0x868>
     b42:	9d 15       	cp	r25, r13
     b44:	58 f0       	brcs	.+22     	; 0xb5c <Modbus_mster_transaction+0x728>
     b46:	a6 e0       	ldi	r26, 0x06	; 6
     b48:	da 16       	cp	r13, r26
     b4a:	61 f1       	breq	.+88     	; 0xba4 <Modbus_mster_transaction+0x770>
     b4c:	bf e0       	ldi	r27, 0x0F	; 15
     b4e:	db 16       	cp	r13, r27
     b50:	09 f4       	brne	.+2      	; 0xb54 <Modbus_mster_transaction+0x720>
     b52:	41 c0       	rjmp	.+130    	; 0xbd6 <Modbus_mster_transaction+0x7a2>
     b54:	e5 e0       	ldi	r30, 0x05	; 5
     b56:	de 12       	cpse	r13, r30
     b58:	1e c1       	rjmp	.+572    	; 0xd96 <Modbus_mster_transaction+0x962>
     b5a:	0d c0       	rjmp	.+26     	; 0xb76 <Modbus_mster_transaction+0x742>
     b5c:	f7 e1       	ldi	r31, 0x17	; 23
     b5e:	df 16       	cp	r13, r31
     b60:	09 f4       	brne	.+2      	; 0xb64 <Modbus_mster_transaction+0x730>
     b62:	9c c0       	rjmp	.+312    	; 0xc9c <Modbus_mster_transaction+0x868>
     b64:	2f ef       	ldi	r18, 0xFF	; 255
     b66:	d2 16       	cp	r13, r18
     b68:	09 f4       	brne	.+2      	; 0xb6c <Modbus_mster_transaction+0x738>
     b6a:	98 c0       	rjmp	.+304    	; 0xc9c <Modbus_mster_transaction+0x868>
     b6c:	86 e1       	ldi	r24, 0x16	; 22
     b6e:	d8 16       	cp	r13, r24
     b70:	09 f4       	brne	.+2      	; 0xb74 <Modbus_mster_transaction+0x740>
     b72:	e1 c0       	rjmp	.+450    	; 0xd36 <Modbus_mster_transaction+0x902>
     b74:	10 c1       	rjmp	.+544    	; 0xd96 <Modbus_mster_transaction+0x962>
     b76:	90 91 fe 03 	lds	r25, 0x03FE	; 0x8003fe <g_mod1_write_qty>
     b7a:	80 91 ff 03 	lds	r24, 0x03FF	; 0x8003ff <g_mod1_write_qty+0x1>
     b7e:	e1 e0       	ldi	r30, 0x01	; 1
     b80:	f0 e0       	ldi	r31, 0x00	; 0
     b82:	ec 0f       	add	r30, r28
     b84:	fd 1f       	adc	r31, r29
     b86:	ec 0d       	add	r30, r12
     b88:	f1 1d       	adc	r31, r1
     b8a:	80 83       	st	Z, r24
     b8c:	81 e0       	ldi	r24, 0x01	; 1
     b8e:	8c 0d       	add	r24, r12
     b90:	e1 e0       	ldi	r30, 0x01	; 1
     b92:	f0 e0       	ldi	r31, 0x00	; 0
     b94:	ec 0f       	add	r30, r28
     b96:	fd 1f       	adc	r31, r29
     b98:	e8 0f       	add	r30, r24
     b9a:	f1 1d       	adc	r31, r1
     b9c:	c3 94       	inc	r12
     b9e:	c3 94       	inc	r12
     ba0:	90 83       	st	Z, r25
     ba2:	f9 c0       	rjmp	.+498    	; 0xd96 <Modbus_mster_transaction+0x962>
     ba4:	ee e7       	ldi	r30, 0x7E	; 126
     ba6:	f3 e0       	ldi	r31, 0x03	; 3
     ba8:	80 81       	ld	r24, Z
     baa:	91 81       	ldd	r25, Z+1	; 0x01
     bac:	a1 e0       	ldi	r26, 0x01	; 1
     bae:	b0 e0       	ldi	r27, 0x00	; 0
     bb0:	ac 0f       	add	r26, r28
     bb2:	bd 1f       	adc	r27, r29
     bb4:	ac 0d       	add	r26, r12
     bb6:	b1 1d       	adc	r27, r1
     bb8:	9c 93       	st	X, r25
     bba:	20 81       	ld	r18, Z
     bbc:	31 81       	ldd	r19, Z+1	; 0x01
     bbe:	81 e0       	ldi	r24, 0x01	; 1
     bc0:	8c 0d       	add	r24, r12
     bc2:	e1 e0       	ldi	r30, 0x01	; 1
     bc4:	f0 e0       	ldi	r31, 0x00	; 0
     bc6:	ec 0f       	add	r30, r28
     bc8:	fd 1f       	adc	r31, r29
     bca:	e8 0f       	add	r30, r24
     bcc:	f1 1d       	adc	r31, r1
     bce:	c3 94       	inc	r12
     bd0:	c3 94       	inc	r12
     bd2:	20 83       	st	Z, r18
     bd4:	e0 c0       	rjmp	.+448    	; 0xd96 <Modbus_mster_transaction+0x962>
     bd6:	80 91 fe 03 	lds	r24, 0x03FE	; 0x8003fe <g_mod1_write_qty>
     bda:	90 91 ff 03 	lds	r25, 0x03FF	; 0x8003ff <g_mod1_write_qty+0x1>
     bde:	e1 e0       	ldi	r30, 0x01	; 1
     be0:	f0 e0       	ldi	r31, 0x00	; 0
     be2:	ec 0f       	add	r30, r28
     be4:	fd 1f       	adc	r31, r29
     be6:	ec 0d       	add	r30, r12
     be8:	f1 1d       	adc	r31, r1
     bea:	90 83       	st	Z, r25
     bec:	22 e0       	ldi	r18, 0x02	; 2
     bee:	2c 0d       	add	r18, r12
     bf0:	31 e0       	ldi	r19, 0x01	; 1
     bf2:	3c 0d       	add	r19, r12
     bf4:	e1 e0       	ldi	r30, 0x01	; 1
     bf6:	f0 e0       	ldi	r31, 0x00	; 0
     bf8:	ec 0f       	add	r30, r28
     bfa:	fd 1f       	adc	r31, r29
     bfc:	e3 0f       	add	r30, r19
     bfe:	f1 1d       	adc	r31, r1
     c00:	80 83       	st	Z, r24
     c02:	ac 01       	movw	r20, r24
     c04:	47 70       	andi	r20, 0x07	; 7
     c06:	55 27       	eor	r21, r21
     c08:	45 2b       	or	r20, r21
     c0a:	49 f0       	breq	.+18     	; 0xc1e <Modbus_mster_transaction+0x7ea>
     c0c:	96 95       	lsr	r25
     c0e:	87 95       	ror	r24
     c10:	96 95       	lsr	r25
     c12:	87 95       	ror	r24
     c14:	96 95       	lsr	r25
     c16:	87 95       	ror	r24
     c18:	91 e0       	ldi	r25, 0x01	; 1
     c1a:	98 0f       	add	r25, r24
     c1c:	07 c0       	rjmp	.+14     	; 0xc2c <Modbus_mster_transaction+0x7f8>
     c1e:	96 95       	lsr	r25
     c20:	87 95       	ror	r24
     c22:	96 95       	lsr	r25
     c24:	87 95       	ror	r24
     c26:	96 95       	lsr	r25
     c28:	87 95       	ror	r24
     c2a:	98 2f       	mov	r25, r24
     c2c:	a3 e0       	ldi	r26, 0x03	; 3
     c2e:	ca 0e       	add	r12, r26
     c30:	fe 01       	movw	r30, r28
     c32:	e2 0f       	add	r30, r18
     c34:	f1 1d       	adc	r31, r1
     c36:	91 83       	std	Z+1, r25	; 0x01
     c38:	99 23       	and	r25, r25
     c3a:	09 f4       	brne	.+2      	; 0xc3e <Modbus_mster_transaction+0x80a>
     c3c:	ac c0       	rjmp	.+344    	; 0xd96 <Modbus_mster_transaction+0x962>
     c3e:	80 e0       	ldi	r24, 0x00	; 0
     c40:	28 2f       	mov	r18, r24
     c42:	21 70       	andi	r18, 0x01	; 1
     c44:	80 ff       	sbrs	r24, 0
     c46:	03 c0       	rjmp	.+6      	; 0xc4e <Modbus_mster_transaction+0x81a>
     c48:	21 30       	cpi	r18, 0x01	; 1
     c4a:	99 f0       	breq	.+38     	; 0xc72 <Modbus_mster_transaction+0x83e>
     c4c:	23 c0       	rjmp	.+70     	; 0xc94 <Modbus_mster_transaction+0x860>
     c4e:	e8 2f       	mov	r30, r24
     c50:	e6 95       	lsr	r30
     c52:	f0 e0       	ldi	r31, 0x00	; 0
     c54:	ee 0f       	add	r30, r30
     c56:	ff 1f       	adc	r31, r31
     c58:	e2 58       	subi	r30, 0x82	; 130
     c5a:	fc 4f       	sbci	r31, 0xFC	; 252
     c5c:	20 81       	ld	r18, Z
     c5e:	31 81       	ldd	r19, Z+1	; 0x01
     c60:	e1 e0       	ldi	r30, 0x01	; 1
     c62:	f0 e0       	ldi	r31, 0x00	; 0
     c64:	ec 0f       	add	r30, r28
     c66:	fd 1f       	adc	r31, r29
     c68:	ec 0d       	add	r30, r12
     c6a:	f1 1d       	adc	r31, r1
     c6c:	20 83       	st	Z, r18
     c6e:	c3 94       	inc	r12
     c70:	11 c0       	rjmp	.+34     	; 0xc94 <Modbus_mster_transaction+0x860>
     c72:	e8 2f       	mov	r30, r24
     c74:	e6 95       	lsr	r30
     c76:	f0 e0       	ldi	r31, 0x00	; 0
     c78:	ee 0f       	add	r30, r30
     c7a:	ff 1f       	adc	r31, r31
     c7c:	e2 58       	subi	r30, 0x82	; 130
     c7e:	fc 4f       	sbci	r31, 0xFC	; 252
     c80:	20 81       	ld	r18, Z
     c82:	31 81       	ldd	r19, Z+1	; 0x01
     c84:	e1 e0       	ldi	r30, 0x01	; 1
     c86:	f0 e0       	ldi	r31, 0x00	; 0
     c88:	ec 0f       	add	r30, r28
     c8a:	fd 1f       	adc	r31, r29
     c8c:	ec 0d       	add	r30, r12
     c8e:	f1 1d       	adc	r31, r1
     c90:	30 83       	st	Z, r19
     c92:	c3 94       	inc	r12
     c94:	8f 5f       	subi	r24, 0xFF	; 255
     c96:	89 13       	cpse	r24, r25
     c98:	d3 cf       	rjmp	.-90     	; 0xc40 <Modbus_mster_transaction+0x80c>
     c9a:	7d c0       	rjmp	.+250    	; 0xd96 <Modbus_mster_transaction+0x962>
     c9c:	60 91 fe 03 	lds	r22, 0x03FE	; 0x8003fe <g_mod1_write_qty>
     ca0:	80 91 ff 03 	lds	r24, 0x03FF	; 0x8003ff <g_mod1_write_qty+0x1>
     ca4:	e1 e0       	ldi	r30, 0x01	; 1
     ca6:	f0 e0       	ldi	r31, 0x00	; 0
     ca8:	ec 0f       	add	r30, r28
     caa:	fd 1f       	adc	r31, r29
     cac:	ec 0d       	add	r30, r12
     cae:	f1 1d       	adc	r31, r1
     cb0:	80 83       	st	Z, r24
     cb2:	81 e0       	ldi	r24, 0x01	; 1
     cb4:	8c 0d       	add	r24, r12
     cb6:	e1 e0       	ldi	r30, 0x01	; 1
     cb8:	f0 e0       	ldi	r31, 0x00	; 0
     cba:	ec 0f       	add	r30, r28
     cbc:	fd 1f       	adc	r31, r29
     cbe:	e8 0f       	add	r30, r24
     cc0:	f1 1d       	adc	r31, r1
     cc2:	60 83       	st	Z, r22
     cc4:	73 e0       	ldi	r23, 0x03	; 3
     cc6:	7c 0d       	add	r23, r12
     cc8:	82 e0       	ldi	r24, 0x02	; 2
     cca:	8c 0d       	add	r24, r12
     ccc:	e1 e0       	ldi	r30, 0x01	; 1
     cce:	f0 e0       	ldi	r31, 0x00	; 0
     cd0:	ec 0f       	add	r30, r28
     cd2:	fd 1f       	adc	r31, r29
     cd4:	e8 0f       	add	r30, r24
     cd6:	f1 1d       	adc	r31, r1
     cd8:	86 2f       	mov	r24, r22
     cda:	88 0f       	add	r24, r24
     cdc:	80 83       	st	Z, r24
     cde:	66 23       	and	r22, r22
     ce0:	09 f4       	brne	.+2      	; 0xce4 <Modbus_mster_transaction+0x8b0>
     ce2:	58 c0       	rjmp	.+176    	; 0xd94 <Modbus_mster_transaction+0x960>
     ce4:	86 2f       	mov	r24, r22
     ce6:	88 0f       	add	r24, r24
     ce8:	8d 5f       	subi	r24, 0xFD	; 253
     cea:	c8 0e       	add	r12, r24
     cec:	87 2f       	mov	r24, r23
     cee:	20 e0       	ldi	r18, 0x00	; 0
     cf0:	30 e0       	ldi	r19, 0x00	; 0
     cf2:	91 e0       	ldi	r25, 0x01	; 1
     cf4:	98 0f       	add	r25, r24
     cf6:	f9 01       	movw	r30, r18
     cf8:	ee 0f       	add	r30, r30
     cfa:	ff 1f       	adc	r31, r31
     cfc:	e2 58       	subi	r30, 0x82	; 130
     cfe:	fc 4f       	sbci	r31, 0xFC	; 252
     d00:	40 81       	ld	r20, Z
     d02:	51 81       	ldd	r21, Z+1	; 0x01
     d04:	a1 e0       	ldi	r26, 0x01	; 1
     d06:	b0 e0       	ldi	r27, 0x00	; 0
     d08:	ac 0f       	add	r26, r28
     d0a:	bd 1f       	adc	r27, r29
     d0c:	a8 0f       	add	r26, r24
     d0e:	b1 1d       	adc	r27, r1
     d10:	5c 93       	st	X, r21
     d12:	8e 5f       	subi	r24, 0xFE	; 254
     d14:	40 81       	ld	r20, Z
     d16:	51 81       	ldd	r21, Z+1	; 0x01
     d18:	e1 e0       	ldi	r30, 0x01	; 1
     d1a:	f0 e0       	ldi	r31, 0x00	; 0
     d1c:	ec 0f       	add	r30, r28
     d1e:	fd 1f       	adc	r31, r29
     d20:	e9 0f       	add	r30, r25
     d22:	f1 1d       	adc	r31, r1
     d24:	40 83       	st	Z, r20
     d26:	2f 5f       	subi	r18, 0xFF	; 255
     d28:	3f 4f       	sbci	r19, 0xFF	; 255
     d2a:	8c 11       	cpse	r24, r12
     d2c:	e2 cf       	rjmp	.-60     	; 0xcf2 <Modbus_mster_transaction+0x8be>
     d2e:	66 0f       	add	r22, r22
     d30:	c6 2e       	mov	r12, r22
     d32:	c7 0e       	add	r12, r23
     d34:	30 c0       	rjmp	.+96     	; 0xd96 <Modbus_mster_transaction+0x962>
     d36:	ee e7       	ldi	r30, 0x7E	; 126
     d38:	f3 e0       	ldi	r31, 0x03	; 3
     d3a:	80 81       	ld	r24, Z
     d3c:	91 81       	ldd	r25, Z+1	; 0x01
     d3e:	a1 e0       	ldi	r26, 0x01	; 1
     d40:	b0 e0       	ldi	r27, 0x00	; 0
     d42:	ac 0f       	add	r26, r28
     d44:	bd 1f       	adc	r27, r29
     d46:	ac 0d       	add	r26, r12
     d48:	b1 1d       	adc	r27, r1
     d4a:	9c 93       	st	X, r25
     d4c:	80 81       	ld	r24, Z
     d4e:	91 81       	ldd	r25, Z+1	; 0x01
     d50:	91 e0       	ldi	r25, 0x01	; 1
     d52:	9c 0d       	add	r25, r12
     d54:	a1 e0       	ldi	r26, 0x01	; 1
     d56:	b0 e0       	ldi	r27, 0x00	; 0
     d58:	ac 0f       	add	r26, r28
     d5a:	bd 1f       	adc	r27, r29
     d5c:	a9 0f       	add	r26, r25
     d5e:	b1 1d       	adc	r27, r1
     d60:	8c 93       	st	X, r24
     d62:	82 81       	ldd	r24, Z+2	; 0x02
     d64:	93 81       	ldd	r25, Z+3	; 0x03
     d66:	82 e0       	ldi	r24, 0x02	; 2
     d68:	8c 0d       	add	r24, r12
     d6a:	a1 e0       	ldi	r26, 0x01	; 1
     d6c:	b0 e0       	ldi	r27, 0x00	; 0
     d6e:	ac 0f       	add	r26, r28
     d70:	bd 1f       	adc	r27, r29
     d72:	a8 0f       	add	r26, r24
     d74:	b1 1d       	adc	r27, r1
     d76:	9c 93       	st	X, r25
     d78:	22 81       	ldd	r18, Z+2	; 0x02
     d7a:	33 81       	ldd	r19, Z+3	; 0x03
     d7c:	83 e0       	ldi	r24, 0x03	; 3
     d7e:	8c 0d       	add	r24, r12
     d80:	e1 e0       	ldi	r30, 0x01	; 1
     d82:	f0 e0       	ldi	r31, 0x00	; 0
     d84:	ec 0f       	add	r30, r28
     d86:	fd 1f       	adc	r31, r29
     d88:	e8 0f       	add	r30, r24
     d8a:	f1 1d       	adc	r31, r1
     d8c:	b4 e0       	ldi	r27, 0x04	; 4
     d8e:	cb 0e       	add	r12, r27
     d90:	20 83       	st	Z, r18
     d92:	01 c0       	rjmp	.+2      	; 0xd96 <Modbus_mster_transaction+0x962>
     d94:	c7 2e       	mov	r12, r23
     d96:	cc 20       	and	r12, r12
     d98:	b9 f0       	breq	.+46     	; 0xdc8 <Modbus_mster_transaction+0x994>
     d9a:	8e 01       	movw	r16, r28
     d9c:	0f 5f       	subi	r16, 0xFF	; 255
     d9e:	1f 4f       	sbci	r17, 0xFF	; 255
     da0:	ee 24       	eor	r14, r14
     da2:	ea 94       	dec	r14
     da4:	ec 0c       	add	r14, r12
     da6:	f1 2c       	mov	r15, r1
     da8:	ef ef       	ldi	r30, 0xFF	; 255
     daa:	ee 1a       	sub	r14, r30
     dac:	fe 0a       	sbc	r15, r30
     dae:	e0 0e       	add	r14, r16
     db0:	f1 1e       	adc	r15, r17
     db2:	8f ef       	ldi	r24, 0xFF	; 255
     db4:	9f ef       	ldi	r25, 0xFF	; 255
     db6:	d8 01       	movw	r26, r16
     db8:	6d 91       	ld	r22, X+
     dba:	8d 01       	movw	r16, r26
     dbc:	0e 94 8b 24 	call	0x4916	; 0x4916 <crc16_update>
     dc0:	0e 15       	cp	r16, r14
     dc2:	1f 05       	cpc	r17, r15
     dc4:	c1 f7       	brne	.-16     	; 0xdb6 <Modbus_mster_transaction+0x982>
     dc6:	02 c0       	rjmp	.+4      	; 0xdcc <Modbus_mster_transaction+0x998>
     dc8:	8f ef       	ldi	r24, 0xFF	; 255
     dca:	9f ef       	ldi	r25, 0xFF	; 255
     dcc:	ee 24       	eor	r14, r14
     dce:	e3 94       	inc	r14
     dd0:	ec 0c       	add	r14, r12
     dd2:	e1 e0       	ldi	r30, 0x01	; 1
     dd4:	f0 e0       	ldi	r31, 0x00	; 0
     dd6:	ec 0f       	add	r30, r28
     dd8:	fd 1f       	adc	r31, r29
     dda:	ec 0d       	add	r30, r12
     ddc:	f1 1d       	adc	r31, r1
     dde:	80 83       	st	Z, r24
     de0:	c3 94       	inc	r12
     de2:	c3 94       	inc	r12
     de4:	e1 e0       	ldi	r30, 0x01	; 1
     de6:	f0 e0       	ldi	r31, 0x00	; 0
     de8:	ec 0f       	add	r30, r28
     dea:	fd 1f       	adc	r31, r29
     dec:	ee 0d       	add	r30, r14
     dee:	f1 1d       	adc	r31, r1
     df0:	90 83       	st	Z, r25
     df2:	e1 e0       	ldi	r30, 0x01	; 1
     df4:	f0 e0       	ldi	r31, 0x00	; 0
     df6:	ec 0f       	add	r30, r28
     df8:	fd 1f       	adc	r31, r29
     dfa:	ec 0d       	add	r30, r12
     dfc:	f1 1d       	adc	r31, r1
     dfe:	10 82       	st	Z, r1
     e00:	e0 91 6f 03 	lds	r30, 0x036F	; 0x80036f <g_mod1_Serial_getc>
     e04:	f0 91 70 03 	lds	r31, 0x0370	; 0x800370 <g_mod1_Serial_getc+0x1>
     e08:	19 95       	eicall
     e0a:	81 15       	cp	r24, r1
     e0c:	91 40       	sbci	r25, 0x01	; 1
     e0e:	c1 f7       	brne	.-16     	; 0xe00 <Modbus_mster_transaction+0x9cc>
     e10:	e0 91 75 03 	lds	r30, 0x0375	; 0x800375 <g_mod1_pre_transmission>
     e14:	f0 91 76 03 	lds	r31, 0x0376	; 0x800376 <g_mod1_pre_transmission+0x1>
     e18:	30 97       	sbiw	r30, 0x00	; 0
     e1a:	09 f0       	breq	.+2      	; 0xe1e <Modbus_mster_transaction+0x9ea>
     e1c:	19 95       	eicall
     e1e:	cc 20       	and	r12, r12
     e20:	a1 f0       	breq	.+40     	; 0xe4a <Modbus_mster_transaction+0xa16>
     e22:	8e 01       	movw	r16, r28
     e24:	0f 5f       	subi	r16, 0xFF	; 255
     e26:	1f 4f       	sbci	r17, 0xFF	; 255
     e28:	f1 2c       	mov	r15, r1
     e2a:	ef ef       	ldi	r30, 0xFF	; 255
     e2c:	ee 1a       	sub	r14, r30
     e2e:	fe 0a       	sbc	r15, r30
     e30:	e0 0e       	add	r14, r16
     e32:	f1 1e       	adc	r15, r17
     e34:	e0 91 71 03 	lds	r30, 0x0371	; 0x800371 <g_mod1_Serial_putc>
     e38:	f0 91 72 03 	lds	r31, 0x0372	; 0x800372 <g_mod1_Serial_putc+0x1>
     e3c:	d8 01       	movw	r26, r16
     e3e:	8d 91       	ld	r24, X+
     e40:	8d 01       	movw	r16, r26
     e42:	19 95       	eicall
     e44:	0e 15       	cp	r16, r14
     e46:	1f 05       	cpc	r17, r15
     e48:	a9 f7       	brne	.-22     	; 0xe34 <Modbus_mster_transaction+0xa00>
     e4a:	e0 91 65 03 	lds	r30, 0x0365	; 0x800365 <g_mod1_Serial_flush>
     e4e:	f0 91 66 03 	lds	r31, 0x0366	; 0x800366 <g_mod1_Serial_flush+0x1>
     e52:	19 95       	eicall
     e54:	e7 e0       	ldi	r30, 0x07	; 7
     e56:	f7 e0       	ldi	r31, 0x07	; 7
     e58:	31 97       	sbiw	r30, 0x01	; 1
     e5a:	f1 f7       	brne	.-4      	; 0xe58 <Modbus_mster_transaction+0xa24>
     e5c:	00 c0       	rjmp	.+0      	; 0xe5e <Modbus_mster_transaction+0xa2a>
     e5e:	00 00       	nop
     e60:	e0 91 73 03 	lds	r30, 0x0373	; 0x800373 <g_mod1_post_transmission>
     e64:	f0 91 74 03 	lds	r31, 0x0374	; 0x800374 <g_mod1_post_transmission+0x1>
     e68:	30 97       	sbiw	r30, 0x00	; 0
     e6a:	09 f0       	breq	.+2      	; 0xe6e <Modbus_mster_transaction+0xa3a>
     e6c:	19 95       	eicall
     e6e:	0e 94 ac 24 	call	0x4958	; 0x4958 <Get_millis>
     e72:	4b 01       	movw	r8, r22
     e74:	5c 01       	movw	r10, r24
     e76:	08 e0       	ldi	r16, 0x08	; 8
     e78:	10 e0       	ldi	r17, 0x00	; 0
     e7a:	ed 2c       	mov	r14, r13
     e7c:	f1 2c       	mov	r15, r1
     e7e:	0f 2e       	mov	r0, r31
     e80:	f3 e0       	ldi	r31, 0x03	; 3
     e82:	cf 2e       	mov	r12, r31
     e84:	f0 2d       	mov	r31, r0
     e86:	0f 2e       	mov	r0, r31
     e88:	f5 e0       	ldi	r31, 0x05	; 5
     e8a:	df 2e       	mov	r13, r31
     e8c:	f0 2d       	mov	r31, r0
     e8e:	e0 91 67 03 	lds	r30, 0x0367	; 0x800367 <g_mod1_Serial_available>
     e92:	f0 91 68 03 	lds	r31, 0x0368	; 0x800368 <g_mod1_Serial_available+0x1>
     e96:	19 95       	eicall
     e98:	89 2b       	or	r24, r25
     e9a:	91 f0       	breq	.+36     	; 0xec0 <Modbus_mster_transaction+0xa8c>
     e9c:	77 24       	eor	r7, r7
     e9e:	73 94       	inc	r7
     ea0:	71 0e       	add	r7, r17
     ea2:	e0 91 6f 03 	lds	r30, 0x036F	; 0x80036f <g_mod1_Serial_getc>
     ea6:	f0 91 70 03 	lds	r31, 0x0370	; 0x800370 <g_mod1_Serial_getc+0x1>
     eaa:	19 95       	eicall
     eac:	e1 e0       	ldi	r30, 0x01	; 1
     eae:	f0 e0       	ldi	r31, 0x00	; 0
     eb0:	ec 0f       	add	r30, r28
     eb2:	fd 1f       	adc	r31, r29
     eb4:	e1 0f       	add	r30, r17
     eb6:	f1 1d       	adc	r31, r1
     eb8:	80 83       	st	Z, r24
     eba:	01 50       	subi	r16, 0x01	; 1
     ebc:	17 2d       	mov	r17, r7
     ebe:	07 c0       	rjmp	.+14     	; 0xece <Modbus_mster_transaction+0xa9a>
     ec0:	e0 91 77 03 	lds	r30, 0x0377	; 0x800377 <g_mod1_idle>
     ec4:	f0 91 78 03 	lds	r31, 0x0378	; 0x800378 <g_mod1_idle+0x1>
     ec8:	30 97       	sbiw	r30, 0x00	; 0
     eca:	09 f0       	breq	.+2      	; 0xece <Modbus_mster_transaction+0xa9a>
     ecc:	19 95       	eicall
     ece:	15 30       	cpi	r17, 0x05	; 5
     ed0:	59 f5       	brne	.+86     	; 0xf28 <Modbus_mster_transaction+0xaf4>
     ed2:	99 81       	ldd	r25, Y+1	; 0x01
     ed4:	80 91 8b 04 	lds	r24, 0x048B	; 0x80048b <g_mod1_slave>
     ed8:	98 13       	cpse	r25, r24
     eda:	2b c1       	rjmp	.+598    	; 0x1132 <Modbus_mster_transaction+0xcfe>
     edc:	8a 81       	ldd	r24, Y+2	; 0x02
     ede:	28 2f       	mov	r18, r24
     ee0:	2f 77       	andi	r18, 0x7F	; 127
     ee2:	30 e0       	ldi	r19, 0x00	; 0
     ee4:	2e 15       	cp	r18, r14
     ee6:	3f 05       	cpc	r19, r15
     ee8:	09 f0       	breq	.+2      	; 0xeec <Modbus_mster_transaction+0xab8>
     eea:	25 c1       	rjmp	.+586    	; 0x1136 <Modbus_mster_transaction+0xd02>
     eec:	88 23       	and	r24, r24
     eee:	2c f4       	brge	.+10     	; 0xefa <Modbus_mster_transaction+0xac6>
     ef0:	8b 81       	ldd	r24, Y+3	; 0x03
     ef2:	88 23       	and	r24, r24
     ef4:	09 f4       	brne	.+2      	; 0xef8 <Modbus_mster_transaction+0xac4>
     ef6:	3d c0       	rjmp	.+122    	; 0xf72 <Modbus_mster_transaction+0xb3e>
     ef8:	d7 c0       	rjmp	.+430    	; 0x10a8 <Modbus_mster_transaction+0xc74>
     efa:	81 31       	cpi	r24, 0x11	; 17
     efc:	58 f4       	brcc	.+22     	; 0xf14 <Modbus_mster_transaction+0xae0>
     efe:	8f 30       	cpi	r24, 0x0F	; 15
     f00:	08 f0       	brcs	.+2      	; 0xf04 <Modbus_mster_transaction+0xad0>
     f02:	07 c1       	rjmp	.+526    	; 0x1112 <Modbus_mster_transaction+0xcde>
     f04:	81 30       	cpi	r24, 0x01	; 1
     f06:	80 f0       	brcs	.+32     	; 0xf28 <Modbus_mster_transaction+0xaf4>
     f08:	85 30       	cpi	r24, 0x05	; 5
     f0a:	68 f0       	brcs	.+26     	; 0xf26 <Modbus_mster_transaction+0xaf2>
     f0c:	87 30       	cpi	r24, 0x07	; 7
     f0e:	08 f4       	brcc	.+2      	; 0xf12 <Modbus_mster_transaction+0xade>
     f10:	00 c1       	rjmp	.+512    	; 0x1112 <Modbus_mster_transaction+0xcde>
     f12:	0a c0       	rjmp	.+20     	; 0xf28 <Modbus_mster_transaction+0xaf4>
     f14:	87 31       	cpi	r24, 0x17	; 23
     f16:	39 f0       	breq	.+14     	; 0xf26 <Modbus_mster_transaction+0xaf2>
     f18:	8f 3f       	cpi	r24, 0xFF	; 255
     f1a:	09 f4       	brne	.+2      	; 0xf1e <Modbus_mster_transaction+0xaea>
     f1c:	fa c0       	rjmp	.+500    	; 0x1112 <Modbus_mster_transaction+0xcde>
     f1e:	86 31       	cpi	r24, 0x16	; 22
     f20:	19 f4       	brne	.+6      	; 0xf28 <Modbus_mster_transaction+0xaf4>
     f22:	0d 2d       	mov	r16, r13
     f24:	f7 c0       	rjmp	.+494    	; 0x1114 <Modbus_mster_transaction+0xce0>
     f26:	0b 81       	ldd	r16, Y+3	; 0x03
     f28:	0e 94 ac 24 	call	0x4958	; 0x4958 <Get_millis>
     f2c:	dc 01       	movw	r26, r24
     f2e:	cb 01       	movw	r24, r22
     f30:	88 19       	sub	r24, r8
     f32:	99 09       	sbc	r25, r9
     f34:	aa 09       	sbc	r26, r10
     f36:	bb 09       	sbc	r27, r11
     f38:	89 3c       	cpi	r24, 0xC9	; 201
     f3a:	91 05       	cpc	r25, r1
     f3c:	a1 05       	cpc	r26, r1
     f3e:	b1 05       	cpc	r27, r1
     f40:	08 f4       	brcc	.+2      	; 0xf44 <Modbus_mster_transaction+0xb10>
     f42:	16 c1       	rjmp	.+556    	; 0x1170 <Modbus_mster_transaction+0xd3c>
     f44:	80 e0       	ldi	r24, 0x00	; 0
     f46:	92 e0       	ldi	r25, 0x02	; 2
     f48:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <UART0_puts>
     f4c:	01 11       	cpse	r16, r1
     f4e:	f5 c0       	rjmp	.+490    	; 0x113a <Modbus_mster_transaction+0xd06>
     f50:	21 2f       	mov	r18, r17
     f52:	82 ee       	ldi	r24, 0xE2	; 226
     f54:	92 ee       	ldi	r25, 0xE2	; 226
     f56:	91 11       	cpse	r25, r1
     f58:	a7 c0       	rjmp	.+334    	; 0x10a8 <Modbus_mster_transaction+0xc74>
     f5a:	25 30       	cpi	r18, 0x05	; 5
     f5c:	78 f1       	brcs	.+94     	; 0xfbc <Modbus_mster_transaction+0xb88>
     f5e:	c1 2e       	mov	r12, r17
     f60:	d1 2c       	mov	r13, r1
     f62:	76 01       	movw	r14, r12
     f64:	f2 e0       	ldi	r31, 0x02	; 2
     f66:	ef 1a       	sub	r14, r31
     f68:	f1 08       	sbc	r15, r1
     f6a:	1e 14       	cp	r1, r14
     f6c:	1f 04       	cpc	r1, r15
     f6e:	5c f0       	brlt	.+22     	; 0xf86 <Modbus_mster_transaction+0xb52>
     f70:	e8 c0       	rjmp	.+464    	; 0x1142 <Modbus_mster_transaction+0xd0e>
     f72:	0f 2e       	mov	r0, r31
     f74:	f3 e0       	ldi	r31, 0x03	; 3
     f76:	ef 2e       	mov	r14, r31
     f78:	f1 2c       	mov	r15, r1
     f7a:	f0 2d       	mov	r31, r0
     f7c:	0f 2e       	mov	r0, r31
     f7e:	f5 e0       	ldi	r31, 0x05	; 5
     f80:	cf 2e       	mov	r12, r31
     f82:	d1 2c       	mov	r13, r1
     f84:	f0 2d       	mov	r31, r0
     f86:	20 e0       	ldi	r18, 0x00	; 0
     f88:	30 e0       	ldi	r19, 0x00	; 0
     f8a:	8f ef       	ldi	r24, 0xFF	; 255
     f8c:	9f ef       	ldi	r25, 0xFF	; 255
     f8e:	00 e0       	ldi	r16, 0x00	; 0
     f90:	e1 e0       	ldi	r30, 0x01	; 1
     f92:	f0 e0       	ldi	r31, 0x00	; 0
     f94:	ec 0f       	add	r30, r28
     f96:	fd 1f       	adc	r31, r29
     f98:	e2 0f       	add	r30, r18
     f9a:	f3 1f       	adc	r31, r19
     f9c:	60 81       	ld	r22, Z
     f9e:	0e 94 8b 24 	call	0x4916	; 0x4916 <crc16_update>
     fa2:	0f 5f       	subi	r16, 0xFF	; 255
     fa4:	20 2f       	mov	r18, r16
     fa6:	30 e0       	ldi	r19, 0x00	; 0
     fa8:	2e 15       	cp	r18, r14
     faa:	3f 05       	cpc	r19, r15
     fac:	8c f3       	brlt	.-30     	; 0xf90 <Modbus_mster_transaction+0xb5c>
     fae:	cb c0       	rjmp	.+406    	; 0x1146 <Modbus_mster_transaction+0xd12>
     fb0:	fe 01       	movw	r30, r28
     fb2:	ec 0d       	add	r30, r12
     fb4:	fd 1d       	adc	r31, r13
     fb6:	80 81       	ld	r24, Z
     fb8:	89 13       	cpse	r24, r25
     fba:	ce c0       	rjmp	.+412    	; 0x1158 <Modbus_mster_transaction+0xd24>
     fbc:	8a 81       	ldd	r24, Y+2	; 0x02
     fbe:	85 30       	cpi	r24, 0x05	; 5
     fc0:	28 f4       	brcc	.+10     	; 0xfcc <Modbus_mster_transaction+0xb98>
     fc2:	83 30       	cpi	r24, 0x03	; 3
     fc4:	30 f4       	brcc	.+12     	; 0xfd2 <Modbus_mster_transaction+0xb9e>
     fc6:	81 30       	cpi	r24, 0x01	; 1
     fc8:	50 f4       	brcc	.+20     	; 0xfde <Modbus_mster_transaction+0xbaa>
     fca:	6b c0       	rjmp	.+214    	; 0x10a2 <Modbus_mster_transaction+0xc6e>
     fcc:	87 31       	cpi	r24, 0x17	; 23
     fce:	09 f0       	breq	.+2      	; 0xfd2 <Modbus_mster_transaction+0xb9e>
     fd0:	68 c0       	rjmp	.+208    	; 0x10a2 <Modbus_mster_transaction+0xc6e>
     fd2:	9b 81       	ldd	r25, Y+3	; 0x03
     fd4:	96 95       	lsr	r25
     fd6:	09 f0       	breq	.+2      	; 0xfda <Modbus_mster_transaction+0xba6>
     fd8:	40 c0       	rjmp	.+128    	; 0x105a <Modbus_mster_transaction+0xc26>
     fda:	80 e0       	ldi	r24, 0x00	; 0
     fdc:	65 c0       	rjmp	.+202    	; 0x10a8 <Modbus_mster_transaction+0xc74>
     fde:	6b 81       	ldd	r22, Y+3	; 0x03
     fe0:	76 2f       	mov	r23, r22
     fe2:	76 95       	lsr	r23
     fe4:	09 f4       	brne	.+2      	; 0xfe8 <Modbus_mster_transaction+0xbb4>
     fe6:	ba c0       	rjmp	.+372    	; 0x115c <Modbus_mster_transaction+0xd28>
     fe8:	fe 01       	movw	r30, r28
     fea:	35 96       	adiw	r30, 0x05	; 5
     fec:	20 e0       	ldi	r18, 0x00	; 0
     fee:	30 e0       	ldi	r19, 0x00	; 0
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	01 c0       	rjmp	.+2      	; 0xff6 <Modbus_mster_transaction+0xbc2>
     ff4:	98 2f       	mov	r25, r24
     ff6:	90 34       	cpi	r25, 0x40	; 64
     ff8:	70 f4       	brcc	.+28     	; 0x1016 <Modbus_mster_transaction+0xbe2>
     ffa:	df 01       	movw	r26, r30
     ffc:	11 97       	sbiw	r26, 0x01	; 1
     ffe:	4c 91       	ld	r20, X
    1000:	80 81       	ld	r24, Z
    1002:	50 e0       	ldi	r21, 0x00	; 0
    1004:	58 2b       	or	r21, r24
    1006:	d9 01       	movw	r26, r18
    1008:	aa 0f       	add	r26, r26
    100a:	bb 1f       	adc	r27, r27
    100c:	ae 5f       	subi	r26, 0xFE	; 254
    100e:	bb 4f       	sbci	r27, 0xFB	; 251
    1010:	11 96       	adiw	r26, 0x01	; 1
    1012:	5c 93       	st	X, r21
    1014:	4e 93       	st	-X, r20
    1016:	81 e0       	ldi	r24, 0x01	; 1
    1018:	89 0f       	add	r24, r25
    101a:	2f 5f       	subi	r18, 0xFF	; 255
    101c:	3f 4f       	sbci	r19, 0xFF	; 255
    101e:	32 96       	adiw	r30, 0x02	; 2
    1020:	87 17       	cp	r24, r23
    1022:	40 f3       	brcs	.-48     	; 0xff4 <Modbus_mster_transaction+0xbc0>
    1024:	90 93 79 03 	sts	0x0379, r25	; 0x800379 <g_mod1_response_buffer_length>
    1028:	60 ff       	sbrs	r22, 0
    102a:	3d c0       	rjmp	.+122    	; 0x10a6 <Modbus_mster_transaction+0xc72>
    102c:	80 34       	cpi	r24, 0x40	; 64
    102e:	80 f4       	brcc	.+32     	; 0x1050 <Modbus_mster_transaction+0xc1c>
    1030:	01 c0       	rjmp	.+2      	; 0x1034 <Modbus_mster_transaction+0xc00>
    1032:	80 e0       	ldi	r24, 0x00	; 0
    1034:	28 2f       	mov	r18, r24
    1036:	30 e0       	ldi	r19, 0x00	; 0
    1038:	22 0f       	add	r18, r18
    103a:	33 1f       	adc	r19, r19
    103c:	fe 01       	movw	r30, r28
    103e:	e2 0f       	add	r30, r18
    1040:	f3 1f       	adc	r31, r19
    1042:	44 81       	ldd	r20, Z+4	; 0x04
    1044:	50 e0       	ldi	r21, 0x00	; 0
    1046:	f9 01       	movw	r30, r18
    1048:	ee 5f       	subi	r30, 0xFE	; 254
    104a:	fb 4f       	sbci	r31, 0xFB	; 251
    104c:	51 83       	std	Z+1, r21	; 0x01
    104e:	40 83       	st	Z, r20
    1050:	8f 5f       	subi	r24, 0xFF	; 255
    1052:	80 93 79 03 	sts	0x0379, r24	; 0x800379 <g_mod1_response_buffer_length>
    1056:	80 e0       	ldi	r24, 0x00	; 0
    1058:	27 c0       	rjmp	.+78     	; 0x10a8 <Modbus_mster_transaction+0xc74>
    105a:	fe 01       	movw	r30, r28
    105c:	35 96       	adiw	r30, 0x05	; 5
    105e:	40 e0       	ldi	r20, 0x00	; 0
    1060:	50 e0       	ldi	r21, 0x00	; 0
    1062:	80 e0       	ldi	r24, 0x00	; 0
    1064:	01 c0       	rjmp	.+2      	; 0x1068 <Modbus_mster_transaction+0xc34>
    1066:	82 2f       	mov	r24, r18
    1068:	80 34       	cpi	r24, 0x40	; 64
    106a:	80 f4       	brcc	.+32     	; 0x108c <Modbus_mster_transaction+0xc58>
    106c:	df 01       	movw	r26, r30
    106e:	11 97       	sbiw	r26, 0x01	; 1
    1070:	2c 91       	ld	r18, X
    1072:	30 e0       	ldi	r19, 0x00	; 0
    1074:	32 2f       	mov	r19, r18
    1076:	22 27       	eor	r18, r18
    1078:	60 81       	ld	r22, Z
    107a:	26 2b       	or	r18, r22
    107c:	da 01       	movw	r26, r20
    107e:	aa 0f       	add	r26, r26
    1080:	bb 1f       	adc	r27, r27
    1082:	ae 5f       	subi	r26, 0xFE	; 254
    1084:	bb 4f       	sbci	r27, 0xFB	; 251
    1086:	11 96       	adiw	r26, 0x01	; 1
    1088:	3c 93       	st	X, r19
    108a:	2e 93       	st	-X, r18
    108c:	21 e0       	ldi	r18, 0x01	; 1
    108e:	28 0f       	add	r18, r24
    1090:	4f 5f       	subi	r20, 0xFF	; 255
    1092:	5f 4f       	sbci	r21, 0xFF	; 255
    1094:	32 96       	adiw	r30, 0x02	; 2
    1096:	29 17       	cp	r18, r25
    1098:	30 f3       	brcs	.-52     	; 0x1066 <Modbus_mster_transaction+0xc32>
    109a:	80 93 79 03 	sts	0x0379, r24	; 0x800379 <g_mod1_response_buffer_length>
    109e:	80 e0       	ldi	r24, 0x00	; 0
    10a0:	03 c0       	rjmp	.+6      	; 0x10a8 <Modbus_mster_transaction+0xc74>
    10a2:	80 e0       	ldi	r24, 0x00	; 0
    10a4:	01 c0       	rjmp	.+2      	; 0x10a8 <Modbus_mster_transaction+0xc74>
    10a6:	80 e0       	ldi	r24, 0x00	; 0
    10a8:	10 92 7d 03 	sts	0x037D, r1	; 0x80037d <g_mod1_transmit_buffer_index>
    10ac:	10 92 7c 03 	sts	0x037C, r1	; 0x80037c <g_mod1_transmit_buffer_length+0x1>
    10b0:	10 92 7b 03 	sts	0x037B, r1	; 0x80037b <g_mod1_transmit_buffer_length>
    10b4:	10 92 7a 03 	sts	0x037A, r1	; 0x80037a <g_mod1_response_buffer_index>
    10b8:	61 c0       	rjmp	.+194    	; 0x117c <Modbus_mster_transaction+0xd48>
    10ba:	84 ee       	ldi	r24, 0xE4	; 228
    10bc:	5f c0       	rjmp	.+190    	; 0x117c <Modbus_mster_transaction+0xd48>
    10be:	0c 2d       	mov	r16, r12
    10c0:	0e 94 ac 24 	call	0x4958	; 0x4958 <Get_millis>
    10c4:	dc 01       	movw	r26, r24
    10c6:	cb 01       	movw	r24, r22
    10c8:	88 19       	sub	r24, r8
    10ca:	99 09       	sbc	r25, r9
    10cc:	aa 09       	sbc	r26, r10
    10ce:	bb 09       	sbc	r27, r11
    10d0:	89 3c       	cpi	r24, 0xC9	; 201
    10d2:	91 05       	cpc	r25, r1
    10d4:	a1 05       	cpc	r26, r1
    10d6:	b1 05       	cpc	r27, r1
    10d8:	08 f4       	brcc	.+2      	; 0x10dc <Modbus_mster_transaction+0xca8>
    10da:	c2 cb       	rjmp	.-2172   	; 0x860 <Modbus_mster_transaction+0x42c>
    10dc:	1c cc       	rjmp	.-1992   	; 0x916 <Modbus_mster_transaction+0x4e2>
    10de:	80 ee       	ldi	r24, 0xE0	; 224
    10e0:	03 c0       	rjmp	.+6      	; 0x10e8 <Modbus_mster_transaction+0xcb4>
    10e2:	81 ee       	ldi	r24, 0xE1	; 225
    10e4:	01 c0       	rjmp	.+2      	; 0x10e8 <Modbus_mster_transaction+0xcb4>
    10e6:	82 ee       	ldi	r24, 0xE2	; 226
    10e8:	88 23       	and	r24, r24
    10ea:	09 f4       	brne	.+2      	; 0x10ee <Modbus_mster_transaction+0xcba>
    10ec:	50 cc       	rjmp	.-1888   	; 0x98e <Modbus_mster_transaction+0x55a>
    10ee:	c5 cc       	rjmp	.-1654   	; 0xa7a <Modbus_mster_transaction+0x646>
    10f0:	8f ef       	ldi	r24, 0xFF	; 255
    10f2:	9f ef       	ldi	r25, 0xFF	; 255
    10f4:	fe 01       	movw	r30, r28
    10f6:	ee 0d       	add	r30, r14
    10f8:	ff 1d       	adc	r31, r15
    10fa:	21 81       	ldd	r18, Z+1	; 0x01
    10fc:	28 17       	cp	r18, r24
    10fe:	09 f4       	brne	.+2      	; 0x1102 <Modbus_mster_transaction+0xcce>
    1100:	40 cc       	rjmp	.-1920   	; 0x982 <Modbus_mster_transaction+0x54e>
    1102:	83 ee       	ldi	r24, 0xE3	; 227
    1104:	ba cc       	rjmp	.-1676   	; 0xa7a <Modbus_mster_transaction+0x646>
    1106:	83 ee       	ldi	r24, 0xE3	; 227
    1108:	b8 cc       	rjmp	.-1680   	; 0xa7a <Modbus_mster_transaction+0x646>
    110a:	70 fd       	sbrc	r23, 0
    110c:	7b cc       	rjmp	.-1802   	; 0xa04 <Modbus_mster_transaction+0x5d0>
    110e:	80 e0       	ldi	r24, 0x00	; 0
    1110:	b4 cc       	rjmp	.-1688   	; 0xa7a <Modbus_mster_transaction+0x646>
    1112:	0c 2d       	mov	r16, r12
    1114:	0e 94 ac 24 	call	0x4958	; 0x4958 <Get_millis>
    1118:	dc 01       	movw	r26, r24
    111a:	cb 01       	movw	r24, r22
    111c:	88 19       	sub	r24, r8
    111e:	99 09       	sbc	r25, r9
    1120:	aa 09       	sbc	r26, r10
    1122:	bb 09       	sbc	r27, r11
    1124:	89 3c       	cpi	r24, 0xC9	; 201
    1126:	91 05       	cpc	r25, r1
    1128:	a1 05       	cpc	r26, r1
    112a:	b1 05       	cpc	r27, r1
    112c:	08 f4       	brcc	.+2      	; 0x1130 <Modbus_mster_transaction+0xcfc>
    112e:	af ce       	rjmp	.-674    	; 0xe8e <Modbus_mster_transaction+0xa5a>
    1130:	09 cf       	rjmp	.-494    	; 0xf44 <Modbus_mster_transaction+0xb10>
    1132:	80 ee       	ldi	r24, 0xE0	; 224
    1134:	03 c0       	rjmp	.+6      	; 0x113c <Modbus_mster_transaction+0xd08>
    1136:	81 ee       	ldi	r24, 0xE1	; 225
    1138:	01 c0       	rjmp	.+2      	; 0x113c <Modbus_mster_transaction+0xd08>
    113a:	82 ee       	ldi	r24, 0xE2	; 226
    113c:	81 11       	cpse	r24, r1
    113e:	b4 cf       	rjmp	.-152    	; 0x10a8 <Modbus_mster_transaction+0xc74>
    1140:	3d cf       	rjmp	.-390    	; 0xfbc <Modbus_mster_transaction+0xb88>
    1142:	8f ef       	ldi	r24, 0xFF	; 255
    1144:	9f ef       	ldi	r25, 0xFF	; 255
    1146:	fe 01       	movw	r30, r28
    1148:	ee 0d       	add	r30, r14
    114a:	ff 1d       	adc	r31, r15
    114c:	21 81       	ldd	r18, Z+1	; 0x01
    114e:	28 17       	cp	r18, r24
    1150:	09 f4       	brne	.+2      	; 0x1154 <Modbus_mster_transaction+0xd20>
    1152:	2e cf       	rjmp	.-420    	; 0xfb0 <Modbus_mster_transaction+0xb7c>
    1154:	83 ee       	ldi	r24, 0xE3	; 227
    1156:	a8 cf       	rjmp	.-176    	; 0x10a8 <Modbus_mster_transaction+0xc74>
    1158:	83 ee       	ldi	r24, 0xE3	; 227
    115a:	a6 cf       	rjmp	.-180    	; 0x10a8 <Modbus_mster_transaction+0xc74>
    115c:	60 fd       	sbrc	r22, 0
    115e:	69 cf       	rjmp	.-302    	; 0x1032 <Modbus_mster_transaction+0xbfe>
    1160:	80 e0       	ldi	r24, 0x00	; 0
    1162:	a2 cf       	rjmp	.-188    	; 0x10a8 <Modbus_mster_transaction+0xc74>
    1164:	01 11       	cpse	r16, r1
    1166:	7c cb       	rjmp	.-2312   	; 0x860 <Modbus_mster_transaction+0x42c>
    1168:	91 2f       	mov	r25, r17
    116a:	80 e0       	ldi	r24, 0x00	; 0
    116c:	20 e0       	ldi	r18, 0x00	; 0
    116e:	dc cb       	rjmp	.-2120   	; 0x928 <Modbus_mster_transaction+0x4f4>
    1170:	01 11       	cpse	r16, r1
    1172:	8d ce       	rjmp	.-742    	; 0xe8e <Modbus_mster_transaction+0xa5a>
    1174:	21 2f       	mov	r18, r17
    1176:	80 e0       	ldi	r24, 0x00	; 0
    1178:	90 e0       	ldi	r25, 0x00	; 0
    117a:	ed ce       	rjmp	.-550    	; 0xf56 <Modbus_mster_transaction+0xb22>
    117c:	d3 95       	inc	r29
    117e:	0f b6       	in	r0, 0x3f	; 63
    1180:	f8 94       	cli
    1182:	de bf       	out	0x3e, r29	; 62
    1184:	0f be       	out	0x3f, r0	; 63
    1186:	cd bf       	out	0x3d, r28	; 61
    1188:	df 91       	pop	r29
    118a:	cf 91       	pop	r28
    118c:	1f 91       	pop	r17
    118e:	0f 91       	pop	r16
    1190:	ff 90       	pop	r15
    1192:	ef 90       	pop	r14
    1194:	df 90       	pop	r13
    1196:	cf 90       	pop	r12
    1198:	bf 90       	pop	r11
    119a:	af 90       	pop	r10
    119c:	9f 90       	pop	r9
    119e:	8f 90       	pop	r8
    11a0:	7f 90       	pop	r7
    11a2:	08 95       	ret

000011a4 <Modbus_init>:
    11a4:	fb 01       	movw	r30, r22
    11a6:	81 11       	cpse	r24, r1
    11a8:	d0 c0       	rjmp	.+416    	; 0x134a <Modbus_init+0x1a6>
    11aa:	80 81       	ld	r24, Z
    11ac:	80 93 b2 05 	sts	0x05B2, r24	; 0x8005b2 <g_mod0_slave>
    11b0:	81 81       	ldd	r24, Z+1	; 0x01
    11b2:	80 93 b1 05 	sts	0x05B1, r24	; 0x8005b1 <g_mod0_uart_no>
    11b6:	42 81       	ldd	r20, Z+2	; 0x02
    11b8:	53 81       	ldd	r21, Z+3	; 0x03
    11ba:	64 81       	ldd	r22, Z+4	; 0x04
    11bc:	75 81       	ldd	r23, Z+5	; 0x05
    11be:	40 93 ad 05 	sts	0x05AD, r20	; 0x8005ad <g_mod0_baud_rate>
    11c2:	50 93 ae 05 	sts	0x05AE, r21	; 0x8005ae <g_mod0_baud_rate+0x1>
    11c6:	60 93 af 05 	sts	0x05AF, r22	; 0x8005af <g_mod0_baud_rate+0x2>
    11ca:	70 93 b0 05 	sts	0x05B0, r23	; 0x8005b0 <g_mod0_baud_rate+0x3>
    11ce:	26 81       	ldd	r18, Z+6	; 0x06
    11d0:	37 81       	ldd	r19, Z+7	; 0x07
    11d2:	30 93 9d 04 	sts	0x049D, r19	; 0x80049d <g_mod0_pre_transmission+0x1>
    11d6:	20 93 9c 04 	sts	0x049C, r18	; 0x80049c <g_mod0_pre_transmission>
    11da:	20 85       	ldd	r18, Z+8	; 0x08
    11dc:	31 85       	ldd	r19, Z+9	; 0x09
    11de:	30 93 9b 04 	sts	0x049B, r19	; 0x80049b <g_mod0_post_transmission+0x1>
    11e2:	20 93 9a 04 	sts	0x049A, r18	; 0x80049a <g_mod0_post_transmission>
    11e6:	22 85       	ldd	r18, Z+10	; 0x0a
    11e8:	33 85       	ldd	r19, Z+11	; 0x0b
    11ea:	30 93 9f 04 	sts	0x049F, r19	; 0x80049f <g_mod0_idle+0x1>
    11ee:	20 93 9e 04 	sts	0x049E, r18	; 0x80049e <g_mod0_idle>
    11f2:	10 92 a1 04 	sts	0x04A1, r1	; 0x8004a1 <g_mod0_response_buffer_index>
    11f6:	10 92 a0 04 	sts	0x04A0, r1	; 0x8004a0 <g_mod0_response_buffer_length>
    11fa:	81 30       	cpi	r24, 0x01	; 1
    11fc:	a9 f5       	brne	.+106    	; 0x1268 <Modbus_init+0xc4>
    11fe:	80 91 64 03 	lds	r24, 0x0364	; 0x800364 <UART1_used.1877>
    1202:	81 11       	cpse	r24, r1
    1204:	3a c1       	rjmp	.+628    	; 0x147a <Modbus_init+0x2d6>
    1206:	81 e0       	ldi	r24, 0x01	; 1
    1208:	80 93 64 03 	sts	0x0364, r24	; 0x800364 <UART1_used.1877>
    120c:	cb 01       	movw	r24, r22
    120e:	ba 01       	movw	r22, r20
    1210:	6b d7       	rcall	.+3798   	; 0x20e8 <UART1_init>
    1212:	8e e3       	ldi	r24, 0x3E	; 62
    1214:	91 e1       	ldi	r25, 0x11	; 17
    1216:	90 93 91 04 	sts	0x0491, r25	; 0x800491 <g_mod0_Serial_available+0x1>
    121a:	80 93 90 04 	sts	0x0490, r24	; 0x800490 <g_mod0_Serial_available>
    121e:	89 ee       	ldi	r24, 0xE9	; 233
    1220:	90 e1       	ldi	r25, 0x10	; 16
    1222:	90 93 93 04 	sts	0x0493, r25	; 0x800493 <g_mod0_Serial_peek+0x1>
    1226:	80 93 92 04 	sts	0x0492, r24	; 0x800492 <g_mod0_Serial_peek>
    122a:	8c e4       	ldi	r24, 0x4C	; 76
    122c:	91 e1       	ldi	r25, 0x11	; 17
    122e:	90 93 95 04 	sts	0x0495, r25	; 0x800495 <g_mod0_Serial_flush+0x1>
    1232:	80 93 94 04 	sts	0x0494, r24	; 0x800494 <g_mod0_Serial_flush>
    1236:	8f e1       	ldi	r24, 0x1F	; 31
    1238:	91 e1       	ldi	r25, 0x11	; 17
    123a:	90 93 8f 04 	sts	0x048F, r25	; 0x80048f <g_mod0_Serial_puts+0x1>
    123e:	80 93 8e 04 	sts	0x048E, r24	; 0x80048e <g_mod0_Serial_puts>
    1242:	89 ec       	ldi	r24, 0xC9	; 201
    1244:	90 e1       	ldi	r25, 0x10	; 16
    1246:	90 93 97 04 	sts	0x0497, r25	; 0x800497 <g_mod0_Serial_getc+0x1>
    124a:	80 93 96 04 	sts	0x0496, r24	; 0x800496 <g_mod0_Serial_getc>
    124e:	86 e0       	ldi	r24, 0x06	; 6
    1250:	91 e1       	ldi	r25, 0x11	; 17
    1252:	90 93 99 04 	sts	0x0499, r25	; 0x800499 <g_mod0_Serial_putc+0x1>
    1256:	80 93 98 04 	sts	0x0498, r24	; 0x800498 <g_mod0_Serial_putc>
    125a:	8d e2       	ldi	r24, 0x2D	; 45
    125c:	91 e1       	ldi	r25, 0x11	; 17
    125e:	90 93 8d 04 	sts	0x048D, r25	; 0x80048d <g_mod0_Serial_puts_p+0x1>
    1262:	80 93 8c 04 	sts	0x048C, r24	; 0x80048c <g_mod0_Serial_puts_p>
    1266:	08 95       	ret
    1268:	82 30       	cpi	r24, 0x02	; 2
    126a:	b1 f5       	brne	.+108    	; 0x12d8 <Modbus_init+0x134>
    126c:	80 91 63 03 	lds	r24, 0x0363	; 0x800363 <UART2_used.1878>
    1270:	81 11       	cpse	r24, r1
    1272:	03 c1       	rjmp	.+518    	; 0x147a <Modbus_init+0x2d6>
    1274:	81 e0       	ldi	r24, 0x01	; 1
    1276:	80 93 63 03 	sts	0x0363, r24	; 0x800363 <UART2_used.1878>
    127a:	cb 01       	movw	r24, r22
    127c:	ba 01       	movw	r22, r20
    127e:	0e 94 bf 11 	call	0x237e	; 0x237e <UART2_init>
    1282:	86 e8       	ldi	r24, 0x86	; 134
    1284:	92 e1       	ldi	r25, 0x12	; 18
    1286:	90 93 91 04 	sts	0x0491, r25	; 0x800491 <g_mod0_Serial_available+0x1>
    128a:	80 93 90 04 	sts	0x0490, r24	; 0x800490 <g_mod0_Serial_available>
    128e:	81 e3       	ldi	r24, 0x31	; 49
    1290:	92 e1       	ldi	r25, 0x12	; 18
    1292:	90 93 93 04 	sts	0x0493, r25	; 0x800493 <g_mod0_Serial_peek+0x1>
    1296:	80 93 92 04 	sts	0x0492, r24	; 0x800492 <g_mod0_Serial_peek>
    129a:	84 e9       	ldi	r24, 0x94	; 148
    129c:	92 e1       	ldi	r25, 0x12	; 18
    129e:	90 93 95 04 	sts	0x0495, r25	; 0x800495 <g_mod0_Serial_flush+0x1>
    12a2:	80 93 94 04 	sts	0x0494, r24	; 0x800494 <g_mod0_Serial_flush>
    12a6:	87 e6       	ldi	r24, 0x67	; 103
    12a8:	92 e1       	ldi	r25, 0x12	; 18
    12aa:	90 93 8f 04 	sts	0x048F, r25	; 0x80048f <g_mod0_Serial_puts+0x1>
    12ae:	80 93 8e 04 	sts	0x048E, r24	; 0x80048e <g_mod0_Serial_puts>
    12b2:	84 e1       	ldi	r24, 0x14	; 20
    12b4:	92 e1       	ldi	r25, 0x12	; 18
    12b6:	90 93 97 04 	sts	0x0497, r25	; 0x800497 <g_mod0_Serial_getc+0x1>
    12ba:	80 93 96 04 	sts	0x0496, r24	; 0x800496 <g_mod0_Serial_getc>
    12be:	8e e4       	ldi	r24, 0x4E	; 78
    12c0:	92 e1       	ldi	r25, 0x12	; 18
    12c2:	90 93 99 04 	sts	0x0499, r25	; 0x800499 <g_mod0_Serial_putc+0x1>
    12c6:	80 93 98 04 	sts	0x0498, r24	; 0x800498 <g_mod0_Serial_putc>
    12ca:	85 e7       	ldi	r24, 0x75	; 117
    12cc:	92 e1       	ldi	r25, 0x12	; 18
    12ce:	90 93 8d 04 	sts	0x048D, r25	; 0x80048d <g_mod0_Serial_puts_p+0x1>
    12d2:	80 93 8c 04 	sts	0x048C, r24	; 0x80048c <g_mod0_Serial_puts_p>
    12d6:	08 95       	ret
    12d8:	83 30       	cpi	r24, 0x03	; 3
    12da:	09 f0       	breq	.+2      	; 0x12de <Modbus_init+0x13a>
    12dc:	ce c0       	rjmp	.+412    	; 0x147a <Modbus_init+0x2d6>
    12de:	80 91 62 03 	lds	r24, 0x0362	; 0x800362 <UART3_used.1879>
    12e2:	81 11       	cpse	r24, r1
    12e4:	ca c0       	rjmp	.+404    	; 0x147a <Modbus_init+0x2d6>
    12e6:	81 e0       	ldi	r24, 0x01	; 1
    12e8:	80 93 62 03 	sts	0x0362, r24	; 0x800362 <UART3_used.1879>
    12ec:	cb 01       	movw	r24, r22
    12ee:	ba 01       	movw	r22, r20
    12f0:	0e 94 07 13 	call	0x260e	; 0x260e <UART3_init>
    12f4:	8e ec       	ldi	r24, 0xCE	; 206
    12f6:	93 e1       	ldi	r25, 0x13	; 19
    12f8:	90 93 91 04 	sts	0x0491, r25	; 0x800491 <g_mod0_Serial_available+0x1>
    12fc:	80 93 90 04 	sts	0x0490, r24	; 0x800490 <g_mod0_Serial_available>
    1300:	89 e7       	ldi	r24, 0x79	; 121
    1302:	93 e1       	ldi	r25, 0x13	; 19
    1304:	90 93 93 04 	sts	0x0493, r25	; 0x800493 <g_mod0_Serial_peek+0x1>
    1308:	80 93 92 04 	sts	0x0492, r24	; 0x800492 <g_mod0_Serial_peek>
    130c:	8c ed       	ldi	r24, 0xDC	; 220
    130e:	93 e1       	ldi	r25, 0x13	; 19
    1310:	90 93 95 04 	sts	0x0495, r25	; 0x800495 <g_mod0_Serial_flush+0x1>
    1314:	80 93 94 04 	sts	0x0494, r24	; 0x800494 <g_mod0_Serial_flush>
    1318:	8f ea       	ldi	r24, 0xAF	; 175
    131a:	93 e1       	ldi	r25, 0x13	; 19
    131c:	90 93 8f 04 	sts	0x048F, r25	; 0x80048f <g_mod0_Serial_puts+0x1>
    1320:	80 93 8e 04 	sts	0x048E, r24	; 0x80048e <g_mod0_Serial_puts>
    1324:	8c e5       	ldi	r24, 0x5C	; 92
    1326:	93 e1       	ldi	r25, 0x13	; 19
    1328:	90 93 97 04 	sts	0x0497, r25	; 0x800497 <g_mod0_Serial_getc+0x1>
    132c:	80 93 96 04 	sts	0x0496, r24	; 0x800496 <g_mod0_Serial_getc>
    1330:	86 e9       	ldi	r24, 0x96	; 150
    1332:	93 e1       	ldi	r25, 0x13	; 19
    1334:	90 93 99 04 	sts	0x0499, r25	; 0x800499 <g_mod0_Serial_putc+0x1>
    1338:	80 93 98 04 	sts	0x0498, r24	; 0x800498 <g_mod0_Serial_putc>
    133c:	8d eb       	ldi	r24, 0xBD	; 189
    133e:	93 e1       	ldi	r25, 0x13	; 19
    1340:	90 93 8d 04 	sts	0x048D, r25	; 0x80048d <g_mod0_Serial_puts_p+0x1>
    1344:	80 93 8c 04 	sts	0x048C, r24	; 0x80048c <g_mod0_Serial_puts_p>
    1348:	08 95       	ret
    134a:	81 30       	cpi	r24, 0x01	; 1
    134c:	09 f0       	breq	.+2      	; 0x1350 <Modbus_init+0x1ac>
    134e:	95 c0       	rjmp	.+298    	; 0x147a <Modbus_init+0x2d6>
    1350:	80 81       	ld	r24, Z
    1352:	80 93 8b 04 	sts	0x048B, r24	; 0x80048b <g_mod1_slave>
    1356:	81 81       	ldd	r24, Z+1	; 0x01
    1358:	80 93 8a 04 	sts	0x048A, r24	; 0x80048a <g_mod1_uart_no>
    135c:	42 81       	ldd	r20, Z+2	; 0x02
    135e:	53 81       	ldd	r21, Z+3	; 0x03
    1360:	64 81       	ldd	r22, Z+4	; 0x04
    1362:	75 81       	ldd	r23, Z+5	; 0x05
    1364:	40 93 86 04 	sts	0x0486, r20	; 0x800486 <g_mod1_baud_rate>
    1368:	50 93 87 04 	sts	0x0487, r21	; 0x800487 <g_mod1_baud_rate+0x1>
    136c:	60 93 88 04 	sts	0x0488, r22	; 0x800488 <g_mod1_baud_rate+0x2>
    1370:	70 93 89 04 	sts	0x0489, r23	; 0x800489 <g_mod1_baud_rate+0x3>
    1374:	26 81       	ldd	r18, Z+6	; 0x06
    1376:	37 81       	ldd	r19, Z+7	; 0x07
    1378:	30 93 76 03 	sts	0x0376, r19	; 0x800376 <g_mod1_pre_transmission+0x1>
    137c:	20 93 75 03 	sts	0x0375, r18	; 0x800375 <g_mod1_pre_transmission>
    1380:	20 85       	ldd	r18, Z+8	; 0x08
    1382:	31 85       	ldd	r19, Z+9	; 0x09
    1384:	30 93 74 03 	sts	0x0374, r19	; 0x800374 <g_mod1_post_transmission+0x1>
    1388:	20 93 73 03 	sts	0x0373, r18	; 0x800373 <g_mod1_post_transmission>
    138c:	22 85       	ldd	r18, Z+10	; 0x0a
    138e:	33 85       	ldd	r19, Z+11	; 0x0b
    1390:	30 93 78 03 	sts	0x0378, r19	; 0x800378 <g_mod1_idle+0x1>
    1394:	20 93 77 03 	sts	0x0377, r18	; 0x800377 <g_mod1_idle>
    1398:	10 92 7a 03 	sts	0x037A, r1	; 0x80037a <g_mod1_response_buffer_index>
    139c:	10 92 79 03 	sts	0x0379, r1	; 0x800379 <g_mod1_response_buffer_length>
    13a0:	81 30       	cpi	r24, 0x01	; 1
    13a2:	a9 f5       	brne	.+106    	; 0x140e <Modbus_init+0x26a>
    13a4:	80 91 64 03 	lds	r24, 0x0364	; 0x800364 <UART1_used.1877>
    13a8:	81 11       	cpse	r24, r1
    13aa:	67 c0       	rjmp	.+206    	; 0x147a <Modbus_init+0x2d6>
    13ac:	81 e0       	ldi	r24, 0x01	; 1
    13ae:	80 93 64 03 	sts	0x0364, r24	; 0x800364 <UART1_used.1877>
    13b2:	cb 01       	movw	r24, r22
    13b4:	ba 01       	movw	r22, r20
    13b6:	98 d6       	rcall	.+3376   	; 0x20e8 <UART1_init>
    13b8:	8e e3       	ldi	r24, 0x3E	; 62
    13ba:	91 e1       	ldi	r25, 0x11	; 17
    13bc:	90 93 68 03 	sts	0x0368, r25	; 0x800368 <g_mod1_Serial_available+0x1>
    13c0:	80 93 67 03 	sts	0x0367, r24	; 0x800367 <g_mod1_Serial_available>
    13c4:	89 ee       	ldi	r24, 0xE9	; 233
    13c6:	90 e1       	ldi	r25, 0x10	; 16
    13c8:	90 93 6e 03 	sts	0x036E, r25	; 0x80036e <g_mod1_Serial_peek+0x1>
    13cc:	80 93 6d 03 	sts	0x036D, r24	; 0x80036d <g_mod1_Serial_peek>
    13d0:	8c e4       	ldi	r24, 0x4C	; 76
    13d2:	91 e1       	ldi	r25, 0x11	; 17
    13d4:	90 93 66 03 	sts	0x0366, r25	; 0x800366 <g_mod1_Serial_flush+0x1>
    13d8:	80 93 65 03 	sts	0x0365, r24	; 0x800365 <g_mod1_Serial_flush>
    13dc:	8f e1       	ldi	r24, 0x1F	; 31
    13de:	91 e1       	ldi	r25, 0x11	; 17
    13e0:	90 93 6c 03 	sts	0x036C, r25	; 0x80036c <g_mod1_Serial_puts+0x1>
    13e4:	80 93 6b 03 	sts	0x036B, r24	; 0x80036b <g_mod1_Serial_puts>
    13e8:	89 ec       	ldi	r24, 0xC9	; 201
    13ea:	90 e1       	ldi	r25, 0x10	; 16
    13ec:	90 93 70 03 	sts	0x0370, r25	; 0x800370 <g_mod1_Serial_getc+0x1>
    13f0:	80 93 6f 03 	sts	0x036F, r24	; 0x80036f <g_mod1_Serial_getc>
    13f4:	86 e0       	ldi	r24, 0x06	; 6
    13f6:	91 e1       	ldi	r25, 0x11	; 17
    13f8:	90 93 72 03 	sts	0x0372, r25	; 0x800372 <g_mod1_Serial_putc+0x1>
    13fc:	80 93 71 03 	sts	0x0371, r24	; 0x800371 <g_mod1_Serial_putc>
    1400:	8d e2       	ldi	r24, 0x2D	; 45
    1402:	91 e1       	ldi	r25, 0x11	; 17
    1404:	90 93 6a 03 	sts	0x036A, r25	; 0x80036a <g_mod1_Serial_puts_p+0x1>
    1408:	80 93 69 03 	sts	0x0369, r24	; 0x800369 <g_mod1_Serial_puts_p>
    140c:	08 95       	ret
    140e:	82 30       	cpi	r24, 0x02	; 2
    1410:	a1 f5       	brne	.+104    	; 0x147a <Modbus_init+0x2d6>
    1412:	80 91 63 03 	lds	r24, 0x0363	; 0x800363 <UART2_used.1878>
    1416:	81 11       	cpse	r24, r1
    1418:	30 c0       	rjmp	.+96     	; 0x147a <Modbus_init+0x2d6>
    141a:	81 e0       	ldi	r24, 0x01	; 1
    141c:	80 93 63 03 	sts	0x0363, r24	; 0x800363 <UART2_used.1878>
    1420:	cb 01       	movw	r24, r22
    1422:	ba 01       	movw	r22, r20
    1424:	ac d7       	rcall	.+3928   	; 0x237e <UART2_init>
    1426:	86 e8       	ldi	r24, 0x86	; 134
    1428:	92 e1       	ldi	r25, 0x12	; 18
    142a:	90 93 68 03 	sts	0x0368, r25	; 0x800368 <g_mod1_Serial_available+0x1>
    142e:	80 93 67 03 	sts	0x0367, r24	; 0x800367 <g_mod1_Serial_available>
    1432:	81 e3       	ldi	r24, 0x31	; 49
    1434:	92 e1       	ldi	r25, 0x12	; 18
    1436:	90 93 6e 03 	sts	0x036E, r25	; 0x80036e <g_mod1_Serial_peek+0x1>
    143a:	80 93 6d 03 	sts	0x036D, r24	; 0x80036d <g_mod1_Serial_peek>
    143e:	84 e9       	ldi	r24, 0x94	; 148
    1440:	92 e1       	ldi	r25, 0x12	; 18
    1442:	90 93 66 03 	sts	0x0366, r25	; 0x800366 <g_mod1_Serial_flush+0x1>
    1446:	80 93 65 03 	sts	0x0365, r24	; 0x800365 <g_mod1_Serial_flush>
    144a:	87 e6       	ldi	r24, 0x67	; 103
    144c:	92 e1       	ldi	r25, 0x12	; 18
    144e:	90 93 6c 03 	sts	0x036C, r25	; 0x80036c <g_mod1_Serial_puts+0x1>
    1452:	80 93 6b 03 	sts	0x036B, r24	; 0x80036b <g_mod1_Serial_puts>
    1456:	84 e1       	ldi	r24, 0x14	; 20
    1458:	92 e1       	ldi	r25, 0x12	; 18
    145a:	90 93 70 03 	sts	0x0370, r25	; 0x800370 <g_mod1_Serial_getc+0x1>
    145e:	80 93 6f 03 	sts	0x036F, r24	; 0x80036f <g_mod1_Serial_getc>
    1462:	8e e4       	ldi	r24, 0x4E	; 78
    1464:	92 e1       	ldi	r25, 0x12	; 18
    1466:	90 93 72 03 	sts	0x0372, r25	; 0x800372 <g_mod1_Serial_putc+0x1>
    146a:	80 93 71 03 	sts	0x0371, r24	; 0x800371 <g_mod1_Serial_putc>
    146e:	85 e7       	ldi	r24, 0x75	; 117
    1470:	92 e1       	ldi	r25, 0x12	; 18
    1472:	90 93 6a 03 	sts	0x036A, r25	; 0x80036a <g_mod1_Serial_puts_p+0x1>
    1476:	80 93 69 03 	sts	0x0369, r24	; 0x800369 <g_mod1_Serial_puts_p>
    147a:	08 95       	ret

0000147c <Modbus_Get_response_buffer>:
    147c:	81 11       	cpse	r24, r1
    147e:	0b c0       	rjmp	.+22     	; 0x1496 <Modbus_Get_response_buffer+0x1a>
    1480:	60 34       	cpi	r22, 0x40	; 64
    1482:	b0 f4       	brcc	.+44     	; 0x14b0 <Modbus_Get_response_buffer+0x34>
    1484:	e6 2f       	mov	r30, r22
    1486:	f0 e0       	ldi	r31, 0x00	; 0
    1488:	ee 0f       	add	r30, r30
    148a:	ff 1f       	adc	r31, r31
    148c:	e7 5d       	subi	r30, 0xD7	; 215
    148e:	fa 4f       	sbci	r31, 0xFA	; 250
    1490:	80 81       	ld	r24, Z
    1492:	91 81       	ldd	r25, Z+1	; 0x01
    1494:	08 95       	ret
    1496:	81 30       	cpi	r24, 0x01	; 1
    1498:	71 f4       	brne	.+28     	; 0x14b6 <Modbus_Get_response_buffer+0x3a>
    149a:	60 34       	cpi	r22, 0x40	; 64
    149c:	78 f4       	brcc	.+30     	; 0x14bc <Modbus_Get_response_buffer+0x40>
    149e:	e6 2f       	mov	r30, r22
    14a0:	f0 e0       	ldi	r31, 0x00	; 0
    14a2:	ee 0f       	add	r30, r30
    14a4:	ff 1f       	adc	r31, r31
    14a6:	ee 5f       	subi	r30, 0xFE	; 254
    14a8:	fb 4f       	sbci	r31, 0xFB	; 251
    14aa:	80 81       	ld	r24, Z
    14ac:	91 81       	ldd	r25, Z+1	; 0x01
    14ae:	08 95       	ret
    14b0:	8f ef       	ldi	r24, 0xFF	; 255
    14b2:	9f ef       	ldi	r25, 0xFF	; 255
    14b4:	08 95       	ret
    14b6:	8f ef       	ldi	r24, 0xFF	; 255
    14b8:	9f ef       	ldi	r25, 0xFF	; 255
    14ba:	08 95       	ret
    14bc:	8f ef       	ldi	r24, 0xFF	; 255
    14be:	9f ef       	ldi	r25, 0xFF	; 255
    14c0:	08 95       	ret

000014c2 <Modbus_Set_transmit_buffer>:
    14c2:	81 11       	cpse	r24, r1
    14c4:	0b c0       	rjmp	.+22     	; 0x14dc <Modbus_Set_transmit_buffer+0x1a>
    14c6:	60 34       	cpi	r22, 0x40	; 64
    14c8:	b8 f4       	brcc	.+46     	; 0x14f8 <Modbus_Set_transmit_buffer+0x36>
    14ca:	e6 2f       	mov	r30, r22
    14cc:	f0 e0       	ldi	r31, 0x00	; 0
    14ce:	ee 0f       	add	r30, r30
    14d0:	ff 1f       	adc	r31, r31
    14d2:	eb 55       	subi	r30, 0x5B	; 91
    14d4:	fb 4f       	sbci	r31, 0xFB	; 251
    14d6:	51 83       	std	Z+1, r21	; 0x01
    14d8:	40 83       	st	Z, r20
    14da:	08 95       	ret
    14dc:	81 30       	cpi	r24, 0x01	; 1
    14de:	71 f4       	brne	.+28     	; 0x14fc <Modbus_Set_transmit_buffer+0x3a>
    14e0:	60 34       	cpi	r22, 0x40	; 64
    14e2:	70 f4       	brcc	.+28     	; 0x1500 <Modbus_Set_transmit_buffer+0x3e>
    14e4:	e6 2f       	mov	r30, r22
    14e6:	f0 e0       	ldi	r31, 0x00	; 0
    14e8:	ee 0f       	add	r30, r30
    14ea:	ff 1f       	adc	r31, r31
    14ec:	e2 58       	subi	r30, 0x82	; 130
    14ee:	fc 4f       	sbci	r31, 0xFC	; 252
    14f0:	51 83       	std	Z+1, r21	; 0x01
    14f2:	40 83       	st	Z, r20
    14f4:	80 e0       	ldi	r24, 0x00	; 0
    14f6:	08 95       	ret
    14f8:	82 e0       	ldi	r24, 0x02	; 2
    14fa:	08 95       	ret
    14fc:	82 e0       	ldi	r24, 0x02	; 2
    14fe:	08 95       	ret
    1500:	82 e0       	ldi	r24, 0x02	; 2
    1502:	08 95       	ret

00001504 <Modbus_Read_holding_registers>:
    1504:	81 11       	cpse	r24, r1
    1506:	0c c0       	rjmp	.+24     	; 0x1520 <Modbus_Read_holding_registers+0x1c>
    1508:	70 93 ac 05 	sts	0x05AC, r23	; 0x8005ac <g_mod0_read_address+0x1>
    150c:	60 93 ab 05 	sts	0x05AB, r22	; 0x8005ab <g_mod0_read_address>
    1510:	50 93 aa 05 	sts	0x05AA, r21	; 0x8005aa <g_mod0_read_qty+0x1>
    1514:	40 93 a9 05 	sts	0x05A9, r20	; 0x8005a9 <g_mod0_read_qty>
    1518:	63 e0       	ldi	r22, 0x03	; 3
    151a:	0c 94 1a 02 	jmp	0x434	; 0x434 <Modbus_mster_transaction>
    151e:	08 95       	ret
    1520:	81 30       	cpi	r24, 0x01	; 1
    1522:	61 f4       	brne	.+24     	; 0x153c <Modbus_Read_holding_registers+0x38>
    1524:	70 93 85 04 	sts	0x0485, r23	; 0x800485 <g_mod1_read_address+0x1>
    1528:	60 93 84 04 	sts	0x0484, r22	; 0x800484 <g_mod1_read_address>
    152c:	50 93 83 04 	sts	0x0483, r21	; 0x800483 <g_mod1_read_qty+0x1>
    1530:	40 93 82 04 	sts	0x0482, r20	; 0x800482 <g_mod1_read_qty>
    1534:	63 e0       	ldi	r22, 0x03	; 3
    1536:	0c 94 1a 02 	jmp	0x434	; 0x434 <Modbus_mster_transaction>
    153a:	08 95       	ret
    153c:	84 ee       	ldi	r24, 0xE4	; 228
    153e:	08 95       	ret

00001540 <Modbus_Write_multiple_registers>:
@return 0 on success; exception number on failure
@ingroup register
*/
uint8_t Modbus_Write_multiple_registers(uint8_t device,uint16_t u16WriteAddress, uint16_t u16WriteQty)
{
	if(DEVICE_0 == device){
    1540:	81 11       	cpse	r24, r1
    1542:	0c c0       	rjmp	.+24     	; 0x155c <Modbus_Write_multiple_registers+0x1c>
	
		g_mod0_write_address = u16WriteAddress;
    1544:	70 93 28 05 	sts	0x0528, r23	; 0x800528 <g_mod0_write_address+0x1>
    1548:	60 93 27 05 	sts	0x0527, r22	; 0x800527 <g_mod0_write_address>
		g_mod0_write_qty = u16WriteQty;
    154c:	50 93 26 05 	sts	0x0526, r21	; 0x800526 <g_mod0_write_qty+0x1>
    1550:	40 93 25 05 	sts	0x0525, r20	; 0x800525 <g_mod0_write_qty>
		return Modbus_mster_transaction(device, WRITE_MULTIPLE_REGISTERS);
    1554:	60 e1       	ldi	r22, 0x10	; 16
    1556:	0c 94 1a 02 	jmp	0x434	; 0x434 <Modbus_mster_transaction>
    155a:	08 95       	ret
	}
	else if(DEVICE_1 == device){
    155c:	81 30       	cpi	r24, 0x01	; 1
    155e:	61 f4       	brne	.+24     	; 0x1578 <Modbus_Write_multiple_registers+0x38>
		g_mod1_write_address = u16WriteAddress;
    1560:	70 93 01 04 	sts	0x0401, r23	; 0x800401 <g_mod1_write_address+0x1>
    1564:	60 93 00 04 	sts	0x0400, r22	; 0x800400 <g_mod1_write_address>
		g_mod1_write_qty = u16WriteQty;
    1568:	50 93 ff 03 	sts	0x03FF, r21	; 0x8003ff <g_mod1_write_qty+0x1>
    156c:	40 93 fe 03 	sts	0x03FE, r20	; 0x8003fe <g_mod1_write_qty>
		return Modbus_mster_transaction(device, WRITE_MULTIPLE_REGISTERS);
    1570:	60 e1       	ldi	r22, 0x10	; 16
    1572:	0c 94 1a 02 	jmp	0x434	; 0x434 <Modbus_mster_transaction>
    1576:	08 95       	ret
	}
	return  INVALID_DEVICE;
    1578:	84 ee       	ldi	r24, 0xE4	; 228
}
    157a:	08 95       	ret

0000157c <temp_init>:

void temp_init(uint8_t channal)
{
	// initialize the ADC module in order to be able
	// to get reading from the sensor.
	ADC_init(channal);
    157c:	54 c1       	rjmp	.+680    	; 0x1826 <ADC_init>
    157e:	08 95       	ret

00001580 <temp_read>:
}

uint16_t temp_read(void)
{
    1580:	cf 92       	push	r12
    1582:	df 92       	push	r13
    1584:	ef 92       	push	r14
    1586:	ff 92       	push	r15
    1588:	cf 93       	push	r28
    158a:	cf e0       	ldi	r28, 0x0F	; 15
	// this function returns the temperature sensor reading
	double Temp ,  vout, rt, a = 0.0039083 , r0 =100, y, b = -0.000000577,x ;
	// sum of samples taken
	double sum = 0.0;
    158c:	c1 2c       	mov	r12, r1
    158e:	d1 2c       	mov	r13, r1
    1590:	76 01       	movw	r14, r12
	unsigned char sample_count = 0;

    // read 30 values of ADC and take their average.
 	while (sample_count < 15)
	{
	      uint16_t xx  = ADC_read();
    1592:	6b d1       	rcall	.+726    	; 0x186a <ADC_read>
	      sum += xx;
    1594:	bc 01       	movw	r22, r24
    1596:	80 e0       	ldi	r24, 0x00	; 0
    1598:	90 e0       	ldi	r25, 0x00	; 0
    159a:	0e 94 d5 25 	call	0x4baa	; 0x4baa <__floatunsisf>
    159e:	9b 01       	movw	r18, r22
    15a0:	ac 01       	movw	r20, r24
    15a2:	c7 01       	movw	r24, r14
    15a4:	b6 01       	movw	r22, r12
    15a6:	0e 94 dd 24 	call	0x49ba	; 0x49ba <__addsf3>
    15aa:	6b 01       	movw	r12, r22
    15ac:	7c 01       	movw	r14, r24
	      sample_count++;
		  vTaskDelay(1/portTICK_PERIOD_MS);
    15ae:	80 e0       	ldi	r24, 0x00	; 0
    15b0:	90 e0       	ldi	r25, 0x00	; 0
    15b2:	0e 94 71 1e 	call	0x3ce2	; 0x3ce2 <vTaskDelay>
    15b6:	c1 50       	subi	r28, 0x01	; 1
	double sum = 0.0;
	// current sample number
	unsigned char sample_count = 0;

    // read 30 values of ADC and take their average.
 	while (sample_count < 15)
    15b8:	61 f7       	brne	.-40     	; 0x1592 <temp_read+0x12>
	      sample_count++;
		  vTaskDelay(1/portTICK_PERIOD_MS);
	}
     
    // the average of ADC readings
	 vout = (double)sum / (double)15;
    15ba:	20 e0       	ldi	r18, 0x00	; 0
    15bc:	30 e0       	ldi	r19, 0x00	; 0
    15be:	40 e7       	ldi	r20, 0x70	; 112
    15c0:	51 e4       	ldi	r21, 0x41	; 65
    15c2:	c7 01       	movw	r24, r14
    15c4:	b6 01       	movw	r22, r12
    15c6:	0e 94 41 25 	call	0x4a82	; 0x4a82 <__divsf3>
	 //UART0_puts("volt :");

     
	 vout  = vout * 2.484;
    15ca:	2b ed       	ldi	r18, 0xDB	; 219
    15cc:	39 ef       	ldi	r19, 0xF9	; 249
    15ce:	4e e1       	ldi	r20, 0x1E	; 30
    15d0:	50 e4       	ldi	r21, 0x40	; 64
    15d2:	0e 94 63 26 	call	0x4cc6	; 0x4cc6 <__mulsf3>
	 vout /= 1024.0;
    15d6:	20 e0       	ldi	r18, 0x00	; 0
    15d8:	30 e0       	ldi	r19, 0x00	; 0
    15da:	40 e8       	ldi	r20, 0x80	; 128
    15dc:	5a e3       	ldi	r21, 0x3A	; 58
    15de:	0e 94 63 26 	call	0x4cc6	; 0x4cc6 <__mulsf3>
// 	 UART0_OutUDec((uint16_t) vout);
// 	 UART0_putc('\n');
      
	  
	 rt = vout * 1000 / 7.5636 ;
    15e2:	20 e0       	ldi	r18, 0x00	; 0
    15e4:	30 e0       	ldi	r19, 0x00	; 0
    15e6:	4a e7       	ldi	r20, 0x7A	; 122
    15e8:	54 e4       	ldi	r21, 0x44	; 68
    15ea:	0e 94 63 26 	call	0x4cc6	; 0x4cc6 <__mulsf3>
    15ee:	23 e0       	ldi	r18, 0x03	; 3
    15f0:	39 e0       	ldi	r19, 0x09	; 9
    15f2:	42 ef       	ldi	r20, 0xF2	; 242
    15f4:	50 e4       	ldi	r21, 0x40	; 64
    15f6:	0e 94 41 25 	call	0x4a82	; 0x4a82 <__divsf3>


	 // some math equations to Get The temperature value from ADC reading.
	 Temp = (-1 * a) ;
	 x =  pow(a,2);
	 y = 4  * b * (1 - (rt/r0));
    15fa:	20 e0       	ldi	r18, 0x00	; 0
    15fc:	30 e0       	ldi	r19, 0x00	; 0
    15fe:	48 ec       	ldi	r20, 0xC8	; 200
    1600:	52 e4       	ldi	r21, 0x42	; 66
    1602:	0e 94 41 25 	call	0x4a82	; 0x4a82 <__divsf3>
    1606:	9b 01       	movw	r18, r22
    1608:	ac 01       	movw	r20, r24
    160a:	60 e0       	ldi	r22, 0x00	; 0
    160c:	70 e0       	ldi	r23, 0x00	; 0
    160e:	80 e8       	ldi	r24, 0x80	; 128
    1610:	9f e3       	ldi	r25, 0x3F	; 63
    1612:	0e 94 dc 24 	call	0x49b8	; 0x49b8 <__subsf3>
    1616:	23 e2       	ldi	r18, 0x23	; 35
    1618:	33 ee       	ldi	r19, 0xE3	; 227
    161a:	4a e1       	ldi	r20, 0x1A	; 26
    161c:	56 eb       	ldi	r21, 0xB6	; 182
    161e:	0e 94 63 26 	call	0x4cc6	; 0x4cc6 <__mulsf3>
    1622:	9b 01       	movw	r18, r22
    1624:	ac 01       	movw	r20, r24
	 x = x - y;
    1626:	66 e6       	ldi	r22, 0x66	; 102
    1628:	72 e2       	ldi	r23, 0x22	; 34
    162a:	80 e8       	ldi	r24, 0x80	; 128
    162c:	97 e3       	ldi	r25, 0x37	; 55
    162e:	0e 94 dc 24 	call	0x49b8	; 0x49b8 <__subsf3>
	 x = pow(x,0.5);
    1632:	20 e0       	ldi	r18, 0x00	; 0
    1634:	30 e0       	ldi	r19, 0x00	; 0
    1636:	40 e0       	ldi	r20, 0x00	; 0
    1638:	5f e3       	ldi	r21, 0x3F	; 63
    163a:	0e 94 c6 26 	call	0x4d8c	; 0x4d8c <pow>
	 Temp = Temp + x ;
    163e:	22 e3       	ldi	r18, 0x32	; 50
    1640:	31 e1       	ldi	r19, 0x11	; 17
    1642:	40 e8       	ldi	r20, 0x80	; 128
    1644:	5b e3       	ldi	r21, 0x3B	; 59
    1646:	0e 94 dc 24 	call	0x49b8	; 0x49b8 <__subsf3>
	 Temp /= (2 * b);
    164a:	23 e2       	ldi	r18, 0x23	; 35
    164c:	33 ee       	ldi	r19, 0xE3	; 227
    164e:	4a e9       	ldi	r20, 0x9A	; 154
    1650:	55 eb       	ldi	r21, 0xB5	; 181
    1652:	0e 94 41 25 	call	0x4a82	; 0x4a82 <__divsf3>

	 return round(Temp);
    1656:	0e 94 12 27 	call	0x4e24	; 0x4e24 <round>
    165a:	0e 94 a9 25 	call	0x4b52	; 0x4b52 <__fixunssfsi>
}
    165e:	cb 01       	movw	r24, r22
    1660:	cf 91       	pop	r28
    1662:	ff 90       	pop	r15
    1664:	ef 90       	pop	r14
    1666:	df 90       	pop	r13
    1668:	cf 90       	pop	r12
    166a:	08 95       	ret

0000166c <Temperature_over_temp>:
	UART0_puts("Level_sensor_error_callback \n");
}

/******* Over Temp functions for error callbacks **********************************************/
static void Temperature_over_temp(void){
	UART0_puts("Temperature_over_temp \n");
    166c:	84 e1       	ldi	r24, 0x14	; 20
    166e:	92 e0       	ldi	r25, 0x02	; 2
    1670:	bf c4       	rjmp	.+2430   	; 0x1ff0 <UART0_puts>
    1672:	08 95       	ret

00001674 <Level_sensor_error_callback>:
	
}

/******* Level sensors functions for error callbacks **********************************************/
static void Level_sensor_error_callback(void){
	UART0_puts("Level_sensor_error_callback \n");
    1674:	8c e2       	ldi	r24, 0x2C	; 44
    1676:	92 e0       	ldi	r25, 0x02	; 2
    1678:	bb c4       	rjmp	.+2422   	; 0x1ff0 <UART0_puts>
    167a:	08 95       	ret

0000167c <LCD_writeTimeout>:
static void LCD_readTimeout(void){
	UART0_puts("LCD_READ_TIMEOUT ---------------------------- \n");
}

static void LCD_writeTimeout(void){
	UART0_puts("LCD_WRITE_TIMEOUT ++++++++++++++++++++++++++++ \n");
    167c:	8a e4       	ldi	r24, 0x4A	; 74
    167e:	92 e0       	ldi	r25, 0x02	; 2
    1680:	b7 c4       	rjmp	.+2414   	; 0x1ff0 <UART0_puts>
    1682:	08 95       	ret

00001684 <LCD_readTimeout>:

//debug
#include "MCAL/UART.h"
/******* LCD callback functions for errors callbacks ***********************************************/
static void LCD_readTimeout(void){
	UART0_puts("LCD_READ_TIMEOUT ---------------------------- \n");
    1684:	8b e7       	ldi	r24, 0x7B	; 123
    1686:	92 e0       	ldi	r25, 0x02	; 2
    1688:	b3 c4       	rjmp	.+2406   	; 0x1ff0 <UART0_puts>
    168a:	08 95       	ret

0000168c <Service_error_init>:
	
}


void Service_error_init(void){
		LCD_main_err_Init(LCD_readTimeout,LCD_writeTimeout);
    168c:	6e e3       	ldi	r22, 0x3E	; 62
    168e:	7b e0       	ldi	r23, 0x0B	; 11
    1690:	82 e4       	ldi	r24, 0x42	; 66
    1692:	9b e0       	ldi	r25, 0x0B	; 11
    1694:	0e 94 12 23 	call	0x4624	; 0x4624 <LCD_main_err_Init>
		Level_main_err_init(Level_sensor_error_callback);
    1698:	8a e3       	ldi	r24, 0x3A	; 58
    169a:	9b e0       	ldi	r25, 0x0B	; 11
    169c:	0e 94 ca 23 	call	0x4794	; 0x4794 <Level_main_err_init>
		Temp_main_err_init(Temperature_over_temp);
    16a0:	86 e3       	ldi	r24, 0x36	; 54
    16a2:	9b e0       	ldi	r25, 0x0B	; 11
    16a4:	0c 94 49 24 	jmp	0x4892	; 0x4892 <Temp_main_err_init>
    16a8:	08 95       	ret

000016aa <vTask4>:
	Temp_main(&x);
}

static void vTask4(void* pvParameters)
{
	UART0_puts("Enter Task4\n");
    16aa:	8b ea       	ldi	r24, 0xAB	; 171
    16ac:	92 e0       	ldi	r25, 0x02	; 2
    16ae:	a0 d4       	rcall	.+2368   	; 0x1ff0 <UART0_puts>
		while (1)
		{
			UART0_puts("vTask4 Exist\n");
    16b0:	88 eb       	ldi	r24, 0xB8	; 184
    16b2:	92 e0       	ldi	r25, 0x02	; 2
    16b4:	9d d4       	rcall	.+2362   	; 0x1ff0 <UART0_puts>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    16b6:	2f ef       	ldi	r18, 0xFF	; 255
    16b8:	83 ed       	ldi	r24, 0xD3	; 211
    16ba:	90 e3       	ldi	r25, 0x30	; 48
    16bc:	21 50       	subi	r18, 0x01	; 1
    16be:	80 40       	sbci	r24, 0x00	; 0
    16c0:	90 40       	sbci	r25, 0x00	; 0
    16c2:	e1 f7       	brne	.-8      	; 0x16bc <vTask4+0x12>
    16c4:	00 c0       	rjmp	.+0      	; 0x16c6 <vTask4+0x1c>
    16c6:	00 00       	nop
			_delay_ms(1000);
			vTaskDelay(500/portTICK_PERIOD_MS);
    16c8:	8f e1       	ldi	r24, 0x1F	; 31
    16ca:	90 e0       	ldi	r25, 0x00	; 0
    16cc:	0e 94 71 1e 	call	0x3ce2	; 0x3ce2 <vTaskDelay>
		}
    16d0:	ef cf       	rjmp	.-34     	; 0x16b0 <vTask4+0x6>

000016d2 <vTask3>:
	LCD_main(&x);
}


static void vTask3(void* pvParameters)
{
    16d2:	cf 93       	push	r28
    16d4:	df 93       	push	r29
    16d6:	1f 92       	push	r1
    16d8:	cd b7       	in	r28, 0x3d	; 61
    16da:	de b7       	in	r29, 0x3e	; 62
	char x=0;
    16dc:	19 82       	std	Y+1, r1	; 0x01
	UART0_puts("LEVEL Task3 \n");
    16de:	86 ec       	ldi	r24, 0xC6	; 198
    16e0:	92 e0       	ldi	r25, 0x02	; 2
    16e2:	86 d4       	rcall	.+2316   	; 0x1ff0 <UART0_puts>
	Temp_main(&x);
    16e4:	ce 01       	movw	r24, r28
    16e6:	01 96       	adiw	r24, 0x01	; 1
    16e8:	0e 94 4e 24 	call	0x489c	; 0x489c <Temp_main>
}
    16ec:	0f 90       	pop	r0
    16ee:	df 91       	pop	r29
    16f0:	cf 91       	pop	r28
    16f2:	08 95       	ret

000016f4 <vTask2>:
	UART0_puts("Level Task1 \n");
	Level_main(&x);

}
static void vTask2(void* pvParameters)
{
    16f4:	cf 93       	push	r28
    16f6:	df 93       	push	r29
    16f8:	1f 92       	push	r1
    16fa:	cd b7       	in	r28, 0x3d	; 61
    16fc:	de b7       	in	r29, 0x3e	; 62
	char x=0;
    16fe:	19 82       	std	Y+1, r1	; 0x01
	LCD_main(&x);
    1700:	ce 01       	movw	r24, r28
    1702:	01 96       	adiw	r24, 0x01	; 1
    1704:	0e 94 1b 23 	call	0x4636	; 0x4636 <LCD_main>
}
    1708:	0f 90       	pop	r0
    170a:	df 91       	pop	r29
    170c:	cf 91       	pop	r28
    170e:	08 95       	ret

00001710 <vTask1>:




static void vTask1(void* pvParameters)
{
    1710:	cf 93       	push	r28
    1712:	df 93       	push	r29
    1714:	1f 92       	push	r1
    1716:	cd b7       	in	r28, 0x3d	; 61
    1718:	de b7       	in	r29, 0x3e	; 62
	char x=0;
    171a:	19 82       	std	Y+1, r1	; 0x01
	UART0_puts("Level Task1 \n");
    171c:	84 ed       	ldi	r24, 0xD4	; 212
    171e:	92 e0       	ldi	r25, 0x02	; 2
    1720:	67 d4       	rcall	.+2254   	; 0x1ff0 <UART0_puts>
	Level_main(&x);
    1722:	ce 01       	movw	r24, r28
    1724:	01 96       	adiw	r24, 0x01	; 1
    1726:	0e 94 cf 23 	call	0x479e	; 0x479e <Level_main>

}
    172a:	0f 90       	pop	r0
    172c:	df 91       	pop	r29
    172e:	cf 91       	pop	r28
    1730:	08 95       	ret

00001732 <main>:




int main(void) {
	DDRE = 0xFF;
    1732:	8f ef       	ldi	r24, 0xFF	; 255
    1734:	8d b9       	out	0x0d, r24	; 13
	UART0_init(9600); //for debug
    1736:	60 e8       	ldi	r22, 0x80	; 128
    1738:	75 e2       	ldi	r23, 0x25	; 37
    173a:	80 e0       	ldi	r24, 0x00	; 0
    173c:	90 e0       	ldi	r25, 0x00	; 0
    173e:	ce d3       	rcall	.+1948   	; 0x1edc <UART0_init>
    System_init();
    1740:	0e 94 6f 24 	call	0x48de	; 0x48de <System_init>
	Tank_operation_init();
    1744:	0e 94 40 24 	call	0x4880	; 0x4880 <Tank_operation_init>
	//Lcd_init(UART3,115200,1);
	UART0_puts("HELLO \n");
    1748:	82 ee       	ldi	r24, 0xE2	; 226
    174a:	92 e0       	ldi	r25, 0x02	; 2
    174c:	51 d4       	rcall	.+2210   	; 0x1ff0 <UART0_puts>
// // Inverter_change_state(0);
//    _delay_ms(3000);
// }
	//Temp_main_init();
	/* Create the task without using any dynamic memory allocation. */
	xHandle1 = xTaskCreateStatic( //print LCD data from RTE lowest priority
    174e:	0f 2e       	mov	r0, r31
    1750:	fd ec       	ldi	r31, 0xCD	; 205
    1752:	cf 2e       	mov	r12, r31
    1754:	fe e0       	ldi	r31, 0x0E	; 14
    1756:	df 2e       	mov	r13, r31
    1758:	f0 2d       	mov	r31, r0
    175a:	0f 2e       	mov	r0, r31
    175c:	f0 e2       	ldi	r31, 0x20	; 32
    175e:	ef 2e       	mov	r14, r31
    1760:	f1 e1       	ldi	r31, 0x11	; 17
    1762:	ff 2e       	mov	r15, r31
    1764:	f0 2d       	mov	r31, r0
    1766:	02 e0       	ldi	r16, 0x02	; 2
    1768:	20 e0       	ldi	r18, 0x00	; 0
    176a:	30 e0       	ldi	r19, 0x00	; 0
    176c:	44 ef       	ldi	r20, 0xF4	; 244
    176e:	51 e0       	ldi	r21, 0x01	; 1
    1770:	6a ee       	ldi	r22, 0xEA	; 234
    1772:	72 e0       	ldi	r23, 0x02	; 2
    1774:	88 e8       	ldi	r24, 0x88	; 136
    1776:	9b e0       	ldi	r25, 0x0B	; 11
    1778:	0e 94 eb 1b 	call	0x37d6	; 0x37d6 <xTaskCreateStatic>
    177c:	90 93 ba 05 	sts	0x05BA, r25	; 0x8005ba <xHandle1+0x1>
    1780:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <xHandle1>
					NULL, /* Parameter passed into the task. */
					2,/* Priority at which the task is created. */
					xStack1, /* Array to use as the task's stack. */
					&xTask1Buffer); /* Variable to hold the task's data structure. */
	
	xHandle2 = xTaskCreateStatic( //LCD highest priority
    1784:	0f 2e       	mov	r0, r31
    1786:	f7 ef       	ldi	r31, 0xF7	; 247
    1788:	cf 2e       	mov	r12, r31
    178a:	fe e0       	ldi	r31, 0x0E	; 14
    178c:	df 2e       	mov	r13, r31
    178e:	f0 2d       	mov	r31, r0
    1790:	0f 2e       	mov	r0, r31
    1792:	fe e3       	ldi	r31, 0x3E	; 62
    1794:	ef 2e       	mov	r14, r31
    1796:	f3 e1       	ldi	r31, 0x13	; 19
    1798:	ff 2e       	mov	r15, r31
    179a:	f0 2d       	mov	r31, r0
    179c:	20 e0       	ldi	r18, 0x00	; 0
    179e:	30 e0       	ldi	r19, 0x00	; 0
    17a0:	44 ef       	ldi	r20, 0xF4	; 244
    17a2:	51 e0       	ldi	r21, 0x01	; 1
    17a4:	60 ef       	ldi	r22, 0xF0	; 240
    17a6:	72 e0       	ldi	r23, 0x02	; 2
    17a8:	8a e7       	ldi	r24, 0x7A	; 122
    17aa:	9b e0       	ldi	r25, 0x0B	; 11
    17ac:	0e 94 eb 1b 	call	0x37d6	; 0x37d6 <xTaskCreateStatic>
    17b0:	90 93 b8 05 	sts	0x05B8, r25	; 0x8005b8 <xHandle2+0x1>
    17b4:	80 93 b7 05 	sts	0x05B7, r24	; 0x8005b7 <xHandle2>
				NULL, /* Parameter passed into the task. */
				2,/* Priority at which the task is created. */
				xStack2, /* Array to use as the task's stack. */
				&xTask2Buffer); /* Variable to hold the task's data structure. */
				
	xHandle3 = xTaskCreateStatic( //temp mid priority
    17b8:	0f 2e       	mov	r0, r31
    17ba:	f4 e1       	ldi	r31, 0x14	; 20
    17bc:	cf 2e       	mov	r12, r31
    17be:	f3 e1       	ldi	r31, 0x13	; 19
    17c0:	df 2e       	mov	r13, r31
    17c2:	f0 2d       	mov	r31, r0
    17c4:	0f 2e       	mov	r0, r31
    17c6:	f9 e3       	ldi	r31, 0x39	; 57
    17c8:	ef 2e       	mov	r14, r31
    17ca:	f5 e1       	ldi	r31, 0x15	; 21
    17cc:	ff 2e       	mov	r15, r31
    17ce:	f0 2d       	mov	r31, r0
    17d0:	20 e0       	ldi	r18, 0x00	; 0
    17d2:	30 e0       	ldi	r19, 0x00	; 0
    17d4:	44 ef       	ldi	r20, 0xF4	; 244
    17d6:	51 e0       	ldi	r21, 0x01	; 1
    17d8:	66 ef       	ldi	r22, 0xF6	; 246
    17da:	72 e0       	ldi	r23, 0x02	; 2
    17dc:	89 e6       	ldi	r24, 0x69	; 105
    17de:	9b e0       	ldi	r25, 0x0B	; 11
    17e0:	0e 94 eb 1b 	call	0x37d6	; 0x37d6 <xTaskCreateStatic>
    17e4:	90 93 b6 05 	sts	0x05B6, r25	; 0x8005b6 <xHandle3+0x1>
    17e8:	80 93 b5 05 	sts	0x05B5, r24	; 0x8005b5 <xHandle3>
				NULL, /* Parameter passed into the task. */
				2,/* Priority at which the task is created. */
				xStack3, /* Array to use as the task's stack. */
				&xTask3Buffer); /* Variable to hold the task's data structure. */
	
	xHandle4 = xTaskCreateStatic(
    17ec:	0f 2e       	mov	r0, r31
    17ee:	f3 ea       	ldi	r31, 0xA3	; 163
    17f0:	cf 2e       	mov	r12, r31
    17f2:	fe e0       	ldi	r31, 0x0E	; 14
    17f4:	df 2e       	mov	r13, r31
    17f6:	f0 2d       	mov	r31, r0
    17f8:	0f 2e       	mov	r0, r31
    17fa:	fc e2       	ldi	r31, 0x2C	; 44
    17fc:	ef 2e       	mov	r14, r31
    17fe:	ff e0       	ldi	r31, 0x0F	; 15
    1800:	ff 2e       	mov	r15, r31
    1802:	f0 2d       	mov	r31, r0
    1804:	20 e0       	ldi	r18, 0x00	; 0
    1806:	30 e0       	ldi	r19, 0x00	; 0
    1808:	44 ef       	ldi	r20, 0xF4	; 244
    180a:	51 e0       	ldi	r21, 0x01	; 1
    180c:	6c ef       	ldi	r22, 0xFC	; 252
    180e:	72 e0       	ldi	r23, 0x02	; 2
    1810:	85 e5       	ldi	r24, 0x55	; 85
    1812:	9b e0       	ldi	r25, 0x0B	; 11
    1814:	0e 94 eb 1b 	call	0x37d6	; 0x37d6 <xTaskCreateStatic>
    1818:	90 93 b4 05 	sts	0x05B4, r25	; 0x8005b4 <xHandle4+0x1>
    181c:	80 93 b3 05 	sts	0x05B3, r24	; 0x8005b3 <xHandle4>
// 		
// 	}
	

	  // Start scheduler.
	  vTaskStartScheduler();
    1820:	0e 94 e5 1c 	call	0x39ca	; 0x39ca <vTaskStartScheduler>

	while (1)
	{
		
	}
    1824:	ff cf       	rjmp	.-2      	; 0x1824 <main+0xf2>

00001826 <ADC_init>:
	 * this function configure ADC module and
	 * you  pass the channel you work with from 0 to 7
	 */

   // make the ADC pin as input.
  CLR_BIT(ADC_DIRECTION_REG ,channel );
    1826:	90 b3       	in	r25, 0x10	; 16
    1828:	21 e0       	ldi	r18, 0x01	; 1
    182a:	30 e0       	ldi	r19, 0x00	; 0
    182c:	08 2e       	mov	r0, r24
    182e:	02 c0       	rjmp	.+4      	; 0x1834 <ADC_init+0xe>
    1830:	22 0f       	add	r18, r18
    1832:	33 1f       	adc	r19, r19
    1834:	0a 94       	dec	r0
    1836:	e2 f7       	brpl	.-8      	; 0x1830 <ADC_init+0xa>
    1838:	20 95       	com	r18
    183a:	29 23       	and	r18, r25
    183c:	20 bb       	out	0x10, r18	; 16
  //   external ref .
  CLR_HIGH_NIBBLE(ADC_MULTIPLEXER_SELECTION_REG);
    183e:	ec e7       	ldi	r30, 0x7C	; 124
    1840:	f0 e0       	ldi	r31, 0x00	; 0
    1842:	90 81       	ld	r25, Z
    1844:	9f 70       	andi	r25, 0x0F	; 15
    1846:	90 83       	st	Z, r25
  //   operated channel ( channel ) .
  PUT_VAL_LOW_NIBBLE(ADC_MULTIPLEXER_SELECTION_REG , channel);
    1848:	90 81       	ld	r25, Z
    184a:	90 7f       	andi	r25, 0xF0	; 240
    184c:	90 83       	st	Z, r25
    184e:	8f 70       	andi	r24, 0x0F	; 15
    1850:	98 2b       	or	r25, r24
    1852:	90 83       	st	Z, r25
  //  enable ADC  & enable interrupt && ps / 128.
  PUT_VAL_reg(ADC_CONTROL_STATUS_A_REG , 0x8f);
    1854:	8f e8       	ldi	r24, 0x8F	; 143
    1856:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>

  // enable global interrupt.
  sei();
    185a:	78 94       	sei
    185c:	08 95       	ret

0000185e <ADC_enable_reading>:
}

void ADC_enable_reading(void)
{
	// restart the conversion .
	SET_BIT(ADC_CONTROL_STATUS_A_REG , ADC_START_CONVERSION_bit);
    185e:	ea e7       	ldi	r30, 0x7A	; 122
    1860:	f0 e0       	ldi	r31, 0x00	; 0
    1862:	80 81       	ld	r24, Z
    1864:	80 64       	ori	r24, 0x40	; 64
    1866:	80 83       	st	Z, r24
    1868:	08 95       	ret

0000186a <ADC_read>:
}

uint16_t ADC_read(void)
{
	// re-start the conversion .
	ADC_enable_reading();
    186a:	f9 df       	rcall	.-14     	; 0x185e <ADC_enable_reading>
	static uint16_t returned_data;
	g_converted = 0 ;
    186c:	10 92 bd 05 	sts	0x05BD, r1	; 0x8005bd <g_converted>
    1870:	80 ec       	ldi	r24, 0xC0	; 192
    1872:	92 e1       	ldi	r25, 0x12	; 18
    1874:	01 97       	sbiw	r24, 0x01	; 1
	// the conversion takes about 260 us so we will wait 4800 ticks till it ends .
	uint16_t time_out = 4800 ;
	while(!g_converted && 0 != time_out ){time_out --; }
    1876:	f1 f7       	brne	.-4      	; 0x1874 <ADC_read+0xa>
	returned_data = g_analog_data ;
    1878:	80 91 be 05 	lds	r24, 0x05BE	; 0x8005be <g_analog_data>
    187c:	90 91 bf 05 	lds	r25, 0x05BF	; 0x8005bf <g_analog_data+0x1>
    1880:	90 93 bc 05 	sts	0x05BC, r25	; 0x8005bc <returned_data.1707+0x1>
    1884:	80 93 bb 05 	sts	0x05BB, r24	; 0x8005bb <returned_data.1707>
		return returned_data ;
}
    1888:	08 95       	ret

0000188a <__vector_29>:


ISR(ADC_vect)
{
    188a:	1f 92       	push	r1
    188c:	0f 92       	push	r0
    188e:	0f b6       	in	r0, 0x3f	; 63
    1890:	0f 92       	push	r0
    1892:	11 24       	eor	r1, r1
    1894:	2f 93       	push	r18
    1896:	8f 93       	push	r24
    1898:	9f 93       	push	r25
	   uint8_t The_low_adc_reg = ADC_DATA_REG_LOW ;
    189a:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
	  // get 10 bits out of the high and low register .
	  g_analog_data =  The_low_adc_reg | (ADC_DATA_REG_HIGH <<8);
    189e:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
    18a2:	90 e0       	ldi	r25, 0x00	; 0
    18a4:	92 2b       	or	r25, r18
    18a6:	90 93 bf 05 	sts	0x05BF, r25	; 0x8005bf <g_analog_data+0x1>
    18aa:	80 93 be 05 	sts	0x05BE, r24	; 0x8005be <g_analog_data>
	//  UART0_OutUDec(g_analog_data);
	 // UART0_putc('\n');
	  g_converted = 1 ;
    18ae:	81 e0       	ldi	r24, 0x01	; 1
    18b0:	80 93 bd 05 	sts	0x05BD, r24	; 0x8005bd <g_converted>
}
    18b4:	9f 91       	pop	r25
    18b6:	8f 91       	pop	r24
    18b8:	2f 91       	pop	r18
    18ba:	0f 90       	pop	r0
    18bc:	0f be       	out	0x3f, r0	; 63
    18be:	0f 90       	pop	r0
    18c0:	1f 90       	pop	r1
    18c2:	18 95       	reti

000018c4 <DIO_init>:
void Spark_change_state(uint8_t state)
{
	if (HIGH == state)
		SET_BIT(SPARK_DATA_REG , SPARK_PIN);
	else if(LOW == state)
		CLR_BIT(SPARK_DATA_REG , SPARK_PIN);
    18c4:	ea e0       	ldi	r30, 0x0A	; 10
    18c6:	f1 e0       	ldi	r31, 0x01	; 1
    18c8:	80 81       	ld	r24, Z
    18ca:	8f 7e       	andi	r24, 0xEF	; 239
    18cc:	80 83       	st	Z, r24
    18ce:	80 81       	ld	r24, Z
    18d0:	8f 7d       	andi	r24, 0xDF	; 223
    18d2:	80 83       	st	Z, r24
    18d4:	80 81       	ld	r24, Z
    18d6:	8f 7b       	andi	r24, 0xBF	; 191
    18d8:	80 83       	st	Z, r24
    18da:	53 98       	cbi	0x0a, 3	; 10
    18dc:	20 98       	cbi	0x04, 0	; 4
    18de:	3a 98       	cbi	0x07, 2	; 7
    18e0:	54 98       	cbi	0x0a, 4	; 10
    18e2:	3c 9a       	sbi	0x07, 4	; 7
    18e4:	3f 9a       	sbi	0x07, 7	; 7
    18e6:	3d 9a       	sbi	0x07, 5	; 7
    18e8:	39 9a       	sbi	0x07, 1	; 7
    18ea:	39 9a       	sbi	0x07, 1	; 7
    18ec:	57 9a       	sbi	0x0a, 7	; 10
    18ee:	38 9a       	sbi	0x07, 0	; 7
    18f0:	38 98       	cbi	0x07, 0	; 7
    18f2:	56 9a       	sbi	0x0a, 6	; 10
    18f4:	3b 9a       	sbi	0x07, 3	; 7
    18f6:	e4 e0       	ldi	r30, 0x04	; 4
    18f8:	f1 e0       	ldi	r31, 0x01	; 1
    18fa:	80 81       	ld	r24, Z
    18fc:	84 60       	ori	r24, 0x04	; 4
    18fe:	80 83       	st	Z, r24
    1900:	54 9a       	sbi	0x0a, 4	; 10
    1902:	3f 9a       	sbi	0x07, 7	; 7
    1904:	3f 9a       	sbi	0x07, 7	; 7
    1906:	e1 e0       	ldi	r30, 0x01	; 1
    1908:	f1 e0       	ldi	r31, 0x01	; 1
    190a:	80 81       	ld	r24, Z
    190c:	8e 7f       	andi	r24, 0xFE	; 254
    190e:	80 83       	st	Z, r24
    1910:	80 81       	ld	r24, Z
    1912:	82 60       	ori	r24, 0x02	; 2
    1914:	80 83       	st	Z, r24
    1916:	e2 e0       	ldi	r30, 0x02	; 2
    1918:	f1 e0       	ldi	r31, 0x01	; 1
    191a:	80 81       	ld	r24, Z
    191c:	81 60       	ori	r24, 0x01	; 1
    191e:	80 83       	st	Z, r24
    1920:	52 98       	cbi	0x0a, 2	; 10
    1922:	53 9a       	sbi	0x0a, 3	; 10
    1924:	5a 9a       	sbi	0x0b, 2	; 11
    1926:	08 95       	ret

00001928 <Get_tank_level_state>:
    1928:	81 30       	cpi	r24, 0x01	; 1
    192a:	41 f4       	brne	.+16     	; 0x193c <Get_tank_level_state+0x14>
    192c:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x700109>
    1930:	84 fb       	bst	r24, 4
    1932:	99 27       	eor	r25, r25
    1934:	90 f9       	bld	r25, 0
    1936:	81 e0       	ldi	r24, 0x01	; 1
    1938:	89 27       	eor	r24, r25
    193a:	08 95       	ret
    193c:	82 30       	cpi	r24, 0x02	; 2
    193e:	41 f4       	brne	.+16     	; 0x1950 <Get_tank_level_state+0x28>
    1940:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x700109>
    1944:	85 fb       	bst	r24, 5
    1946:	99 27       	eor	r25, r25
    1948:	90 f9       	bld	r25, 0
    194a:	81 e0       	ldi	r24, 0x01	; 1
    194c:	89 27       	eor	r24, r25
    194e:	08 95       	ret
    1950:	83 30       	cpi	r24, 0x03	; 3
    1952:	41 f4       	brne	.+16     	; 0x1964 <Get_tank_level_state+0x3c>
    1954:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x700109>
    1958:	86 fb       	bst	r24, 6
    195a:	99 27       	eor	r25, r25
    195c:	90 f9       	bld	r25, 0
    195e:	81 e0       	ldi	r24, 0x01	; 1
    1960:	89 27       	eor	r24, r25
    1962:	08 95       	ret
    1964:	8f ef       	ldi	r24, 0xFF	; 255
    1966:	08 95       	ret

00001968 <Get_blancher_level_state>:
    1968:	89 b1       	in	r24, 0x09	; 9
    196a:	83 fb       	bst	r24, 3
    196c:	88 27       	eor	r24, r24
    196e:	80 f9       	bld	r24, 0
    1970:	08 95       	ret

00001972 <Modbus_change_state>:

//_________ MODE BUS initialize and enable______________________//

void Modbus_change_state(uint8_t device ,uint8_t state){
	
	switch (device){
    1972:	88 23       	and	r24, r24
    1974:	19 f0       	breq	.+6      	; 0x197c <Modbus_change_state+0xa>
    1976:	81 30       	cpi	r24, 0x01	; 1
    1978:	89 f0       	breq	.+34     	; 0x199c <Modbus_change_state+0x2a>
    197a:	08 95       	ret
		case DEVICE_0:
		 	if (HIGH == state)
    197c:	61 30       	cpi	r22, 0x01	; 1
    197e:	31 f4       	brne	.+12     	; 0x198c <Modbus_change_state+0x1a>
		 		SET_BIT(DEVICE_0_MODBUS_DATA_REG , DEVICE_0_MODBUS_PIN);
    1980:	e5 e0       	ldi	r30, 0x05	; 5
    1982:	f1 e0       	ldi	r31, 0x01	; 1
    1984:	80 81       	ld	r24, Z
    1986:	84 60       	ori	r24, 0x04	; 4
    1988:	80 83       	st	Z, r24
    198a:	08 95       	ret
		 	else if(LOW == state)
    198c:	61 11       	cpse	r22, r1
    198e:	0d c0       	rjmp	.+26     	; 0x19aa <Modbus_change_state+0x38>
		 		CLR_BIT(DEVICE_0_MODBUS_DATA_REG , DEVICE_0_MODBUS_PIN);
    1990:	e5 e0       	ldi	r30, 0x05	; 5
    1992:	f1 e0       	ldi	r31, 0x01	; 1
    1994:	80 81       	ld	r24, Z
    1996:	8b 7f       	andi	r24, 0xFB	; 251
    1998:	80 83       	st	Z, r24
    199a:	08 95       	ret
			
			break;
		case DEVICE_1:
		     if (HIGH == state)
    199c:	61 30       	cpi	r22, 0x01	; 1
    199e:	11 f4       	brne	.+4      	; 0x19a4 <Modbus_change_state+0x32>
		         SET_BIT(DEVICE_1_MODBUS_DATA_REG , DEVICE_1_MODBUS_PIN);
    19a0:	5c 9a       	sbi	0x0b, 4	; 11
    19a2:	08 95       	ret
		     else if(LOW == state)
    19a4:	61 11       	cpse	r22, r1
    19a6:	01 c0       	rjmp	.+2      	; 0x19aa <Modbus_change_state+0x38>
		         CLR_BIT(DEVICE_1_MODBUS_DATA_REG , DEVICE_1_MODBUS_PIN);
    19a8:	5c 98       	cbi	0x0b, 4	; 11
    19aa:	08 95       	ret

000019ac <timers_init>:
 * set_up the timer and interrupt config and
 * parameters timer_ config struct contain all info about Timer
 * return 1 if the function setup OK -1 if not
 */
uint8_t timers_init(g_Timer_Config *config)
{
    19ac:	fc 01       	movw	r30, r24
	//millis_init(); //start this timer to get the time between ticks

	// choose the timer number depend on the config timer_number
	if(config->timer_number == 1){
    19ae:	94 81       	ldd	r25, Z+4	; 0x04
    19b0:	91 30       	cpi	r25, 0x01	; 1
    19b2:	b1 f4       	brne	.+44     	; 0x19e0 <timers_init+0x34>

		// off all the modes of  first config register on timer
		TIMER1_CONGFIG_A = 0X00;
    19b4:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
		// External counter on T1 and set the Top vale is OCRnA
		TIMER1_CONGFIG_B = 0x0E;
    19b8:	8e e0       	ldi	r24, 0x0E	; 14
    19ba:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
		// number of Encoder Tick for Each interrupt
		TIMER1_COMPARE = config->ticks - 1;
    19be:	80 81       	ld	r24, Z
    19c0:	91 81       	ldd	r25, Z+1	; 0x01
    19c2:	01 97       	sbiw	r24, 0x01	; 1
    19c4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
    19c8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
		// Enable interrupt Bit on the timer Mask
		SET_BIT(TIMER1_INTERUPT, TIMER1_COMPARE_INT);
    19cc:	af e6       	ldi	r26, 0x6F	; 111
    19ce:	b0 e0       	ldi	r27, 0x00	; 0
    19d0:	8c 91       	ld	r24, X
    19d2:	82 60       	ori	r24, 0x02	; 2
    19d4:	8c 93       	st	X, r24
		// copy the config parameter to Timer stuct
		g_timer1_config = config;
    19d6:	f0 93 32 17 	sts	0x1732, r31	; 0x801732 <g_timer1_config+0x1>
    19da:	e0 93 31 17 	sts	0x1731, r30	; 0x801731 <g_timer1_config>
    19de:	49 c0       	rjmp	.+146    	; 0x1a72 <timers_init+0xc6>
		// set the time before get ticks ISR time
		//g_Timer1_old_time = Get_millis();
	}// timer_number = 1

	else if(config->timer_number == 3)
    19e0:	93 30       	cpi	r25, 0x03	; 3
    19e2:	b1 f4       	brne	.+44     	; 0x1a10 <timers_init+0x64>
	{
		// off all the modes of  first config register on timer
		TIMER3_CONGFIG_A = 0X00;
    19e4:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
		//External counter on T1 and set the Top vale is OCRnA
		TIMER3_CONGFIG_B = 0x0E;
    19e8:	8e e0       	ldi	r24, 0x0E	; 14
    19ea:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>
		// number of Encoder Tick for Each interrupt
		TIMER3_COMPARE = config->ticks - 1;
    19ee:	80 81       	ld	r24, Z
    19f0:	91 81       	ldd	r25, Z+1	; 0x01
    19f2:	01 97       	sbiw	r24, 0x01	; 1
    19f4:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
    19f8:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>
		// Enable interrupt Bit on the timer Mask
		SET_BIT(TIMER3_INTERUPT, TIMER3_COMPARE_INT);
    19fc:	a1 e7       	ldi	r26, 0x71	; 113
    19fe:	b0 e0       	ldi	r27, 0x00	; 0
    1a00:	8c 91       	ld	r24, X
    1a02:	82 60       	ori	r24, 0x02	; 2
    1a04:	8c 93       	st	X, r24
		// copy the config parameter to Timer stuct
		g_timer3_config = config;
    1a06:	f0 93 2e 17 	sts	0x172E, r31	; 0x80172e <g_timer3_config+0x1>
    1a0a:	e0 93 2d 17 	sts	0x172D, r30	; 0x80172d <g_timer3_config>
    1a0e:	31 c0       	rjmp	.+98     	; 0x1a72 <timers_init+0xc6>
		// set the time before get ticks ISR time
		//g_Timer3_old_time = Get_millis();
	}//timer_number = 3
	else if(config->timer_number == 4){
    1a10:	94 30       	cpi	r25, 0x04	; 4
    1a12:	b1 f4       	brne	.+44     	; 0x1a40 <timers_init+0x94>
		// off all the modes of  first config register on timer
		TIMER4_CONGFIG_A = 0X00;
    1a14:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
		// External counter on T1 and set the Top vale is OCRnA
		TIMER4_CONGFIG_B = 0x0E;
    1a18:	8e e0       	ldi	r24, 0x0E	; 14
    1a1a:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>
		// number of Encoder Tick for Each interrupt
		TIMER4_COMPARE = config->ticks - 1;
    1a1e:	80 81       	ld	r24, Z
    1a20:	91 81       	ldd	r25, Z+1	; 0x01
    1a22:	01 97       	sbiw	r24, 0x01	; 1
    1a24:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
    1a28:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
		// Enable interrupt Bit on the timer Mask
		SET_BIT(TIMER5_INTERUPT, TIMER5_COMPARE_INT);
    1a2c:	a3 e7       	ldi	r26, 0x73	; 115
    1a2e:	b0 e0       	ldi	r27, 0x00	; 0
    1a30:	8c 91       	ld	r24, X
    1a32:	82 60       	ori	r24, 0x02	; 2
    1a34:	8c 93       	st	X, r24
		// copy the config parameter to Timer stuct
		g_timer4_config = config;
    1a36:	f0 93 30 17 	sts	0x1730, r31	; 0x801730 <g_timer4_config+0x1>
    1a3a:	e0 93 2f 17 	sts	0x172F, r30	; 0x80172f <g_timer4_config>
    1a3e:	19 c0       	rjmp	.+50     	; 0x1a72 <timers_init+0xc6>
		// set the time before get ticks ISR time
		//g_Timer4_old_time = Get_millis();
	}//timer_number = 4

	else if(config->timer_number == 5){
    1a40:	95 30       	cpi	r25, 0x05	; 5
    1a42:	d1 f4       	brne	.+52     	; 0x1a78 <timers_init+0xcc>
		// off all the modes of  first config register on timer
		TIMER5_CONGFIG_A = 0X00;
    1a44:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
		//  External counter on T1 and set the Top vale is OCRnA
		TIMER5_CONGFIG_B = 0x0E;
    1a48:	8e e0       	ldi	r24, 0x0E	; 14
    1a4a:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <__TEXT_REGION_LENGTH__+0x700121>
		//number of Encoder Tick for Each interrupt
		TIMER5_COMPARE = config->ticks - 1;
    1a4e:	80 81       	ld	r24, Z
    1a50:	91 81       	ldd	r25, Z+1	; 0x01
    1a52:	01 97       	sbiw	r24, 0x01	; 1
    1a54:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
    1a58:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
		// Enable interrupt Bit on the timer Mask
		SET_BIT(TIMER5_INTERUPT, TIMER5_COMPARE_INT);
    1a5c:	a3 e7       	ldi	r26, 0x73	; 115
    1a5e:	b0 e0       	ldi	r27, 0x00	; 0
    1a60:	8c 91       	ld	r24, X
    1a62:	82 60       	ori	r24, 0x02	; 2
    1a64:	8c 93       	st	X, r24
		// copy the config parameter to Timer struct
		g_timer5_config = config;
    1a66:	f0 93 34 17 	sts	0x1734, r31	; 0x801734 <g_timer5_config+0x1>
    1a6a:	e0 93 33 17 	sts	0x1733, r30	; 0x801733 <g_timer5_config>
		// set the time before get ticks ISR time
		//g_Timer5_old_time = Get_millis();
		//Clear the counter number
		TIMER5_COUNT_L = 0;
    1a6e:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <__TEXT_REGION_LENGTH__+0x700124>
	{
		//Error the timer number not valid
		return -1;
	}// Else

    sei();
    1a72:	78 94       	sei
    return 1;// Setup done ok
    1a74:	81 e0       	ldi	r24, 0x01	; 1
    1a76:	08 95       	ret
	}//timer_number = 5

	else
	{
		//Error the timer number not valid
		return -1;
    1a78:	8f ef       	ldi	r24, 0xFF	; 255
	}// Else

    sei();
    return 1;// Setup done ok
}//timer_init
    1a7a:	08 95       	ret

00001a7c <__vector_17>:

// interrupted service routine when we have reach the number of  Ticks On Encoder
ISR(TIMER1_COMPA_vect)
{
    1a7c:	1f 92       	push	r1
    1a7e:	0f 92       	push	r0
    1a80:	0f b6       	in	r0, 0x3f	; 63
    1a82:	0f 92       	push	r0
    1a84:	11 24       	eor	r1, r1
    1a86:	0b b6       	in	r0, 0x3b	; 59
    1a88:	0f 92       	push	r0
    1a8a:	2f 93       	push	r18
    1a8c:	3f 93       	push	r19
    1a8e:	4f 93       	push	r20
    1a90:	5f 93       	push	r21
    1a92:	6f 93       	push	r22
    1a94:	7f 93       	push	r23
    1a96:	8f 93       	push	r24
    1a98:	9f 93       	push	r25
    1a9a:	af 93       	push	r26
    1a9c:	bf 93       	push	r27
    1a9e:	ef 93       	push	r30
    1aa0:	ff 93       	push	r31
    1aa2:	cf 93       	push	r28
    1aa4:	df 93       	push	r29
    1aa6:	00 d0       	rcall	.+0      	; 0x1aa8 <__vector_17+0x2c>
    1aa8:	1f 92       	push	r1
    1aaa:	cd b7       	in	r28, 0x3d	; 61
    1aac:	de b7       	in	r29, 0x3e	; 62
	volatile uint32_t diff_time;      // to save the different between new time and old time
	volatile static uint32_t s_Timer1_old_time;
	volatile static uint32_t s_Timer1_new_time;
	// get the time now
	s_Timer1_new_time = Get_millis();
    1aae:	0e 94 ac 24 	call	0x4958	; 0x4958 <Get_millis>
    1ab2:	60 93 dc 05 	sts	0x05DC, r22	; 0x8005dc <s_Timer1_new_time.1650>
    1ab6:	70 93 dd 05 	sts	0x05DD, r23	; 0x8005dd <s_Timer1_new_time.1650+0x1>
    1aba:	80 93 de 05 	sts	0x05DE, r24	; 0x8005de <s_Timer1_new_time.1650+0x2>
    1abe:	90 93 df 05 	sts	0x05DF, r25	; 0x8005df <s_Timer1_new_time.1650+0x3>
	// calculate the diff between now and last interrupt
	diff_time = s_Timer1_new_time - s_Timer1_old_time;
    1ac2:	80 91 dc 05 	lds	r24, 0x05DC	; 0x8005dc <s_Timer1_new_time.1650>
    1ac6:	90 91 dd 05 	lds	r25, 0x05DD	; 0x8005dd <s_Timer1_new_time.1650+0x1>
    1aca:	a0 91 de 05 	lds	r26, 0x05DE	; 0x8005de <s_Timer1_new_time.1650+0x2>
    1ace:	b0 91 df 05 	lds	r27, 0x05DF	; 0x8005df <s_Timer1_new_time.1650+0x3>
    1ad2:	40 91 d8 05 	lds	r20, 0x05D8	; 0x8005d8 <s_Timer1_old_time.1649>
    1ad6:	50 91 d9 05 	lds	r21, 0x05D9	; 0x8005d9 <s_Timer1_old_time.1649+0x1>
    1ada:	60 91 da 05 	lds	r22, 0x05DA	; 0x8005da <s_Timer1_old_time.1649+0x2>
    1ade:	70 91 db 05 	lds	r23, 0x05DB	; 0x8005db <s_Timer1_old_time.1649+0x3>
    1ae2:	84 1b       	sub	r24, r20
    1ae4:	95 0b       	sbc	r25, r21
    1ae6:	a6 0b       	sbc	r26, r22
    1ae8:	b7 0b       	sbc	r27, r23
    1aea:	89 83       	std	Y+1, r24	; 0x01
    1aec:	9a 83       	std	Y+2, r25	; 0x02
    1aee:	ab 83       	std	Y+3, r26	; 0x03
    1af0:	bc 83       	std	Y+4, r27	; 0x04
	// save the to the old time to next interrupt
	s_Timer1_old_time = s_Timer1_new_time;
    1af2:	80 91 dc 05 	lds	r24, 0x05DC	; 0x8005dc <s_Timer1_new_time.1650>
    1af6:	90 91 dd 05 	lds	r25, 0x05DD	; 0x8005dd <s_Timer1_new_time.1650+0x1>
    1afa:	a0 91 de 05 	lds	r26, 0x05DE	; 0x8005de <s_Timer1_new_time.1650+0x2>
    1afe:	b0 91 df 05 	lds	r27, 0x05DF	; 0x8005df <s_Timer1_new_time.1650+0x3>
    1b02:	80 93 d8 05 	sts	0x05D8, r24	; 0x8005d8 <s_Timer1_old_time.1649>
    1b06:	90 93 d9 05 	sts	0x05D9, r25	; 0x8005d9 <s_Timer1_old_time.1649+0x1>
    1b0a:	a0 93 da 05 	sts	0x05DA, r26	; 0x8005da <s_Timer1_old_time.1649+0x2>
    1b0e:	b0 93 db 05 	sts	0x05DB, r27	; 0x8005db <s_Timer1_old_time.1649+0x3>
	//call back function on upper layer to get time
	g_timer1_config->isr_call_back(diff_time);
    1b12:	69 81       	ldd	r22, Y+1	; 0x01
    1b14:	7a 81       	ldd	r23, Y+2	; 0x02
    1b16:	8b 81       	ldd	r24, Y+3	; 0x03
    1b18:	9c 81       	ldd	r25, Y+4	; 0x04
    1b1a:	e0 91 31 17 	lds	r30, 0x1731	; 0x801731 <g_timer1_config>
    1b1e:	f0 91 32 17 	lds	r31, 0x1732	; 0x801732 <g_timer1_config+0x1>
    1b22:	02 80       	ldd	r0, Z+2	; 0x02
    1b24:	f3 81       	ldd	r31, Z+3	; 0x03
    1b26:	e0 2d       	mov	r30, r0
    1b28:	19 95       	eicall
}
    1b2a:	0f 90       	pop	r0
    1b2c:	0f 90       	pop	r0
    1b2e:	0f 90       	pop	r0
    1b30:	0f 90       	pop	r0
    1b32:	df 91       	pop	r29
    1b34:	cf 91       	pop	r28
    1b36:	ff 91       	pop	r31
    1b38:	ef 91       	pop	r30
    1b3a:	bf 91       	pop	r27
    1b3c:	af 91       	pop	r26
    1b3e:	9f 91       	pop	r25
    1b40:	8f 91       	pop	r24
    1b42:	7f 91       	pop	r23
    1b44:	6f 91       	pop	r22
    1b46:	5f 91       	pop	r21
    1b48:	4f 91       	pop	r20
    1b4a:	3f 91       	pop	r19
    1b4c:	2f 91       	pop	r18
    1b4e:	0f 90       	pop	r0
    1b50:	0b be       	out	0x3b, r0	; 59
    1b52:	0f 90       	pop	r0
    1b54:	0f be       	out	0x3f, r0	; 63
    1b56:	0f 90       	pop	r0
    1b58:	1f 90       	pop	r1
    1b5a:	18 95       	reti

00001b5c <__vector_32>:
// interrupted service routine when we have reach the number of  Ticks On Encoder
ISR(TIMER3_COMPA_vect)
{
    1b5c:	1f 92       	push	r1
    1b5e:	0f 92       	push	r0
    1b60:	0f b6       	in	r0, 0x3f	; 63
    1b62:	0f 92       	push	r0
    1b64:	11 24       	eor	r1, r1
    1b66:	0b b6       	in	r0, 0x3b	; 59
    1b68:	0f 92       	push	r0
    1b6a:	2f 93       	push	r18
    1b6c:	3f 93       	push	r19
    1b6e:	4f 93       	push	r20
    1b70:	5f 93       	push	r21
    1b72:	6f 93       	push	r22
    1b74:	7f 93       	push	r23
    1b76:	8f 93       	push	r24
    1b78:	9f 93       	push	r25
    1b7a:	af 93       	push	r26
    1b7c:	bf 93       	push	r27
    1b7e:	ef 93       	push	r30
    1b80:	ff 93       	push	r31
    1b82:	cf 93       	push	r28
    1b84:	df 93       	push	r29
    1b86:	00 d0       	rcall	.+0      	; 0x1b88 <__vector_32+0x2c>
    1b88:	1f 92       	push	r1
    1b8a:	cd b7       	in	r28, 0x3d	; 61
    1b8c:	de b7       	in	r29, 0x3e	; 62
	volatile uint32_t diff_time;      // to save the different between new time and old time
	volatile static uint32_t s_Timer3_old_time;
	volatile static uint32_t s_Timer3_new_time;
	// get the time now
	s_Timer3_new_time = Get_millis();
    1b8e:	0e 94 ac 24 	call	0x4958	; 0x4958 <Get_millis>
    1b92:	60 93 d4 05 	sts	0x05D4, r22	; 0x8005d4 <s_Timer3_new_time.1658>
    1b96:	70 93 d5 05 	sts	0x05D5, r23	; 0x8005d5 <s_Timer3_new_time.1658+0x1>
    1b9a:	80 93 d6 05 	sts	0x05D6, r24	; 0x8005d6 <s_Timer3_new_time.1658+0x2>
    1b9e:	90 93 d7 05 	sts	0x05D7, r25	; 0x8005d7 <s_Timer3_new_time.1658+0x3>
	// calculate the diff between now and last interrupt
	diff_time = s_Timer3_new_time - s_Timer3_old_time;
    1ba2:	80 91 d4 05 	lds	r24, 0x05D4	; 0x8005d4 <s_Timer3_new_time.1658>
    1ba6:	90 91 d5 05 	lds	r25, 0x05D5	; 0x8005d5 <s_Timer3_new_time.1658+0x1>
    1baa:	a0 91 d6 05 	lds	r26, 0x05D6	; 0x8005d6 <s_Timer3_new_time.1658+0x2>
    1bae:	b0 91 d7 05 	lds	r27, 0x05D7	; 0x8005d7 <s_Timer3_new_time.1658+0x3>
    1bb2:	40 91 d0 05 	lds	r20, 0x05D0	; 0x8005d0 <s_Timer3_old_time.1657>
    1bb6:	50 91 d1 05 	lds	r21, 0x05D1	; 0x8005d1 <s_Timer3_old_time.1657+0x1>
    1bba:	60 91 d2 05 	lds	r22, 0x05D2	; 0x8005d2 <s_Timer3_old_time.1657+0x2>
    1bbe:	70 91 d3 05 	lds	r23, 0x05D3	; 0x8005d3 <s_Timer3_old_time.1657+0x3>
    1bc2:	84 1b       	sub	r24, r20
    1bc4:	95 0b       	sbc	r25, r21
    1bc6:	a6 0b       	sbc	r26, r22
    1bc8:	b7 0b       	sbc	r27, r23
    1bca:	89 83       	std	Y+1, r24	; 0x01
    1bcc:	9a 83       	std	Y+2, r25	; 0x02
    1bce:	ab 83       	std	Y+3, r26	; 0x03
    1bd0:	bc 83       	std	Y+4, r27	; 0x04
	// save the to the old time to next interrupt
	s_Timer3_old_time = s_Timer3_new_time;
    1bd2:	80 91 d4 05 	lds	r24, 0x05D4	; 0x8005d4 <s_Timer3_new_time.1658>
    1bd6:	90 91 d5 05 	lds	r25, 0x05D5	; 0x8005d5 <s_Timer3_new_time.1658+0x1>
    1bda:	a0 91 d6 05 	lds	r26, 0x05D6	; 0x8005d6 <s_Timer3_new_time.1658+0x2>
    1bde:	b0 91 d7 05 	lds	r27, 0x05D7	; 0x8005d7 <s_Timer3_new_time.1658+0x3>
    1be2:	80 93 d0 05 	sts	0x05D0, r24	; 0x8005d0 <s_Timer3_old_time.1657>
    1be6:	90 93 d1 05 	sts	0x05D1, r25	; 0x8005d1 <s_Timer3_old_time.1657+0x1>
    1bea:	a0 93 d2 05 	sts	0x05D2, r26	; 0x8005d2 <s_Timer3_old_time.1657+0x2>
    1bee:	b0 93 d3 05 	sts	0x05D3, r27	; 0x8005d3 <s_Timer3_old_time.1657+0x3>
	//call back function on upper layer to get time
	g_timer3_config->isr_call_back(diff_time);
    1bf2:	69 81       	ldd	r22, Y+1	; 0x01
    1bf4:	7a 81       	ldd	r23, Y+2	; 0x02
    1bf6:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf8:	9c 81       	ldd	r25, Y+4	; 0x04
    1bfa:	e0 91 2d 17 	lds	r30, 0x172D	; 0x80172d <g_timer3_config>
    1bfe:	f0 91 2e 17 	lds	r31, 0x172E	; 0x80172e <g_timer3_config+0x1>
    1c02:	02 80       	ldd	r0, Z+2	; 0x02
    1c04:	f3 81       	ldd	r31, Z+3	; 0x03
    1c06:	e0 2d       	mov	r30, r0
    1c08:	19 95       	eicall
}
    1c0a:	0f 90       	pop	r0
    1c0c:	0f 90       	pop	r0
    1c0e:	0f 90       	pop	r0
    1c10:	0f 90       	pop	r0
    1c12:	df 91       	pop	r29
    1c14:	cf 91       	pop	r28
    1c16:	ff 91       	pop	r31
    1c18:	ef 91       	pop	r30
    1c1a:	bf 91       	pop	r27
    1c1c:	af 91       	pop	r26
    1c1e:	9f 91       	pop	r25
    1c20:	8f 91       	pop	r24
    1c22:	7f 91       	pop	r23
    1c24:	6f 91       	pop	r22
    1c26:	5f 91       	pop	r21
    1c28:	4f 91       	pop	r20
    1c2a:	3f 91       	pop	r19
    1c2c:	2f 91       	pop	r18
    1c2e:	0f 90       	pop	r0
    1c30:	0b be       	out	0x3b, r0	; 59
    1c32:	0f 90       	pop	r0
    1c34:	0f be       	out	0x3f, r0	; 63
    1c36:	0f 90       	pop	r0
    1c38:	1f 90       	pop	r1
    1c3a:	18 95       	reti

00001c3c <__vector_42>:
// interrupted service routine when we have reach the number of  Ticks On Encoder
ISR(TIMER4_COMPA_vect)
{
    1c3c:	1f 92       	push	r1
    1c3e:	0f 92       	push	r0
    1c40:	0f b6       	in	r0, 0x3f	; 63
    1c42:	0f 92       	push	r0
    1c44:	11 24       	eor	r1, r1
    1c46:	0b b6       	in	r0, 0x3b	; 59
    1c48:	0f 92       	push	r0
    1c4a:	2f 93       	push	r18
    1c4c:	3f 93       	push	r19
    1c4e:	4f 93       	push	r20
    1c50:	5f 93       	push	r21
    1c52:	6f 93       	push	r22
    1c54:	7f 93       	push	r23
    1c56:	8f 93       	push	r24
    1c58:	9f 93       	push	r25
    1c5a:	af 93       	push	r26
    1c5c:	bf 93       	push	r27
    1c5e:	ef 93       	push	r30
    1c60:	ff 93       	push	r31
    1c62:	cf 93       	push	r28
    1c64:	df 93       	push	r29
    1c66:	00 d0       	rcall	.+0      	; 0x1c68 <__vector_42+0x2c>
    1c68:	1f 92       	push	r1
    1c6a:	cd b7       	in	r28, 0x3d	; 61
    1c6c:	de b7       	in	r29, 0x3e	; 62
	volatile uint32_t diff_time;      // to save the different between new time and old time
	volatile static uint32_t s_Timer4_old_time;
	volatile static uint32_t s_Timer4_new_time;
	// get the time now
	s_Timer4_new_time = Get_millis();
    1c6e:	0e 94 ac 24 	call	0x4958	; 0x4958 <Get_millis>
    1c72:	60 93 cc 05 	sts	0x05CC, r22	; 0x8005cc <s_Timer4_new_time.1666>
    1c76:	70 93 cd 05 	sts	0x05CD, r23	; 0x8005cd <s_Timer4_new_time.1666+0x1>
    1c7a:	80 93 ce 05 	sts	0x05CE, r24	; 0x8005ce <s_Timer4_new_time.1666+0x2>
    1c7e:	90 93 cf 05 	sts	0x05CF, r25	; 0x8005cf <s_Timer4_new_time.1666+0x3>
	// calculate the diff between now and last interrupt
	diff_time = s_Timer4_new_time - s_Timer4_old_time;
    1c82:	80 91 cc 05 	lds	r24, 0x05CC	; 0x8005cc <s_Timer4_new_time.1666>
    1c86:	90 91 cd 05 	lds	r25, 0x05CD	; 0x8005cd <s_Timer4_new_time.1666+0x1>
    1c8a:	a0 91 ce 05 	lds	r26, 0x05CE	; 0x8005ce <s_Timer4_new_time.1666+0x2>
    1c8e:	b0 91 cf 05 	lds	r27, 0x05CF	; 0x8005cf <s_Timer4_new_time.1666+0x3>
    1c92:	40 91 c8 05 	lds	r20, 0x05C8	; 0x8005c8 <s_Timer4_old_time.1665>
    1c96:	50 91 c9 05 	lds	r21, 0x05C9	; 0x8005c9 <s_Timer4_old_time.1665+0x1>
    1c9a:	60 91 ca 05 	lds	r22, 0x05CA	; 0x8005ca <s_Timer4_old_time.1665+0x2>
    1c9e:	70 91 cb 05 	lds	r23, 0x05CB	; 0x8005cb <s_Timer4_old_time.1665+0x3>
    1ca2:	84 1b       	sub	r24, r20
    1ca4:	95 0b       	sbc	r25, r21
    1ca6:	a6 0b       	sbc	r26, r22
    1ca8:	b7 0b       	sbc	r27, r23
    1caa:	89 83       	std	Y+1, r24	; 0x01
    1cac:	9a 83       	std	Y+2, r25	; 0x02
    1cae:	ab 83       	std	Y+3, r26	; 0x03
    1cb0:	bc 83       	std	Y+4, r27	; 0x04
	// save the to the old time to next interrupt
	s_Timer4_old_time = s_Timer4_new_time;
    1cb2:	80 91 cc 05 	lds	r24, 0x05CC	; 0x8005cc <s_Timer4_new_time.1666>
    1cb6:	90 91 cd 05 	lds	r25, 0x05CD	; 0x8005cd <s_Timer4_new_time.1666+0x1>
    1cba:	a0 91 ce 05 	lds	r26, 0x05CE	; 0x8005ce <s_Timer4_new_time.1666+0x2>
    1cbe:	b0 91 cf 05 	lds	r27, 0x05CF	; 0x8005cf <s_Timer4_new_time.1666+0x3>
    1cc2:	80 93 c8 05 	sts	0x05C8, r24	; 0x8005c8 <s_Timer4_old_time.1665>
    1cc6:	90 93 c9 05 	sts	0x05C9, r25	; 0x8005c9 <s_Timer4_old_time.1665+0x1>
    1cca:	a0 93 ca 05 	sts	0x05CA, r26	; 0x8005ca <s_Timer4_old_time.1665+0x2>
    1cce:	b0 93 cb 05 	sts	0x05CB, r27	; 0x8005cb <s_Timer4_old_time.1665+0x3>
	//call back function on upper layer to get time
	g_timer4_config->isr_call_back(diff_time);
    1cd2:	69 81       	ldd	r22, Y+1	; 0x01
    1cd4:	7a 81       	ldd	r23, Y+2	; 0x02
    1cd6:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd8:	9c 81       	ldd	r25, Y+4	; 0x04
    1cda:	e0 91 2f 17 	lds	r30, 0x172F	; 0x80172f <g_timer4_config>
    1cde:	f0 91 30 17 	lds	r31, 0x1730	; 0x801730 <g_timer4_config+0x1>
    1ce2:	02 80       	ldd	r0, Z+2	; 0x02
    1ce4:	f3 81       	ldd	r31, Z+3	; 0x03
    1ce6:	e0 2d       	mov	r30, r0
    1ce8:	19 95       	eicall
}
    1cea:	0f 90       	pop	r0
    1cec:	0f 90       	pop	r0
    1cee:	0f 90       	pop	r0
    1cf0:	0f 90       	pop	r0
    1cf2:	df 91       	pop	r29
    1cf4:	cf 91       	pop	r28
    1cf6:	ff 91       	pop	r31
    1cf8:	ef 91       	pop	r30
    1cfa:	bf 91       	pop	r27
    1cfc:	af 91       	pop	r26
    1cfe:	9f 91       	pop	r25
    1d00:	8f 91       	pop	r24
    1d02:	7f 91       	pop	r23
    1d04:	6f 91       	pop	r22
    1d06:	5f 91       	pop	r21
    1d08:	4f 91       	pop	r20
    1d0a:	3f 91       	pop	r19
    1d0c:	2f 91       	pop	r18
    1d0e:	0f 90       	pop	r0
    1d10:	0b be       	out	0x3b, r0	; 59
    1d12:	0f 90       	pop	r0
    1d14:	0f be       	out	0x3f, r0	; 63
    1d16:	0f 90       	pop	r0
    1d18:	1f 90       	pop	r1
    1d1a:	18 95       	reti

00001d1c <__vector_47>:
// interrupted service routine when we have reach the number of  Ticks On Encoder
ISR(TIMER5_COMPA_vect)
{
    1d1c:	1f 92       	push	r1
    1d1e:	0f 92       	push	r0
    1d20:	0f b6       	in	r0, 0x3f	; 63
    1d22:	0f 92       	push	r0
    1d24:	11 24       	eor	r1, r1
    1d26:	0b b6       	in	r0, 0x3b	; 59
    1d28:	0f 92       	push	r0
    1d2a:	2f 93       	push	r18
    1d2c:	3f 93       	push	r19
    1d2e:	4f 93       	push	r20
    1d30:	5f 93       	push	r21
    1d32:	6f 93       	push	r22
    1d34:	7f 93       	push	r23
    1d36:	8f 93       	push	r24
    1d38:	9f 93       	push	r25
    1d3a:	af 93       	push	r26
    1d3c:	bf 93       	push	r27
    1d3e:	ef 93       	push	r30
    1d40:	ff 93       	push	r31
    1d42:	cf 93       	push	r28
    1d44:	df 93       	push	r29
    1d46:	00 d0       	rcall	.+0      	; 0x1d48 <__vector_47+0x2c>
    1d48:	1f 92       	push	r1
    1d4a:	cd b7       	in	r28, 0x3d	; 61
    1d4c:	de b7       	in	r29, 0x3e	; 62
	volatile uint32_t diff_time;      // to save the different between new time and old time
	volatile static uint32_t s_Timer5_old_time;
	volatile static uint32_t s_Timer5_new_time;
	//TOG_BIT(PORTB,0);
	// get the time now
	s_Timer5_new_time = Get_millis();
    1d4e:	0e 94 ac 24 	call	0x4958	; 0x4958 <Get_millis>
    1d52:	60 93 c4 05 	sts	0x05C4, r22	; 0x8005c4 <s_Timer5_new_time.1674>
    1d56:	70 93 c5 05 	sts	0x05C5, r23	; 0x8005c5 <s_Timer5_new_time.1674+0x1>
    1d5a:	80 93 c6 05 	sts	0x05C6, r24	; 0x8005c6 <s_Timer5_new_time.1674+0x2>
    1d5e:	90 93 c7 05 	sts	0x05C7, r25	; 0x8005c7 <s_Timer5_new_time.1674+0x3>
	// calculate the difference between now and last interrupt
	diff_time = s_Timer5_new_time - s_Timer5_old_time;
    1d62:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <s_Timer5_new_time.1674>
    1d66:	90 91 c5 05 	lds	r25, 0x05C5	; 0x8005c5 <s_Timer5_new_time.1674+0x1>
    1d6a:	a0 91 c6 05 	lds	r26, 0x05C6	; 0x8005c6 <s_Timer5_new_time.1674+0x2>
    1d6e:	b0 91 c7 05 	lds	r27, 0x05C7	; 0x8005c7 <s_Timer5_new_time.1674+0x3>
    1d72:	40 91 c0 05 	lds	r20, 0x05C0	; 0x8005c0 <s_Timer5_old_time.1673>
    1d76:	50 91 c1 05 	lds	r21, 0x05C1	; 0x8005c1 <s_Timer5_old_time.1673+0x1>
    1d7a:	60 91 c2 05 	lds	r22, 0x05C2	; 0x8005c2 <s_Timer5_old_time.1673+0x2>
    1d7e:	70 91 c3 05 	lds	r23, 0x05C3	; 0x8005c3 <s_Timer5_old_time.1673+0x3>
    1d82:	84 1b       	sub	r24, r20
    1d84:	95 0b       	sbc	r25, r21
    1d86:	a6 0b       	sbc	r26, r22
    1d88:	b7 0b       	sbc	r27, r23
    1d8a:	89 83       	std	Y+1, r24	; 0x01
    1d8c:	9a 83       	std	Y+2, r25	; 0x02
    1d8e:	ab 83       	std	Y+3, r26	; 0x03
    1d90:	bc 83       	std	Y+4, r27	; 0x04
	// save the to the old time to next interrupt
	s_Timer5_old_time = s_Timer5_new_time;
    1d92:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <s_Timer5_new_time.1674>
    1d96:	90 91 c5 05 	lds	r25, 0x05C5	; 0x8005c5 <s_Timer5_new_time.1674+0x1>
    1d9a:	a0 91 c6 05 	lds	r26, 0x05C6	; 0x8005c6 <s_Timer5_new_time.1674+0x2>
    1d9e:	b0 91 c7 05 	lds	r27, 0x05C7	; 0x8005c7 <s_Timer5_new_time.1674+0x3>
    1da2:	80 93 c0 05 	sts	0x05C0, r24	; 0x8005c0 <s_Timer5_old_time.1673>
    1da6:	90 93 c1 05 	sts	0x05C1, r25	; 0x8005c1 <s_Timer5_old_time.1673+0x1>
    1daa:	a0 93 c2 05 	sts	0x05C2, r26	; 0x8005c2 <s_Timer5_old_time.1673+0x2>
    1dae:	b0 93 c3 05 	sts	0x05C3, r27	; 0x8005c3 <s_Timer5_old_time.1673+0x3>
	// clear the counter
	TIMER5_COUNT_L = 0;
    1db2:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <__TEXT_REGION_LENGTH__+0x700124>
	//call back function on upper layer to get time
	g_timer5_config->isr_call_back(diff_time);
    1db6:	69 81       	ldd	r22, Y+1	; 0x01
    1db8:	7a 81       	ldd	r23, Y+2	; 0x02
    1dba:	8b 81       	ldd	r24, Y+3	; 0x03
    1dbc:	9c 81       	ldd	r25, Y+4	; 0x04
    1dbe:	e0 91 33 17 	lds	r30, 0x1733	; 0x801733 <g_timer5_config>
    1dc2:	f0 91 34 17 	lds	r31, 0x1734	; 0x801734 <g_timer5_config+0x1>
    1dc6:	02 80       	ldd	r0, Z+2	; 0x02
    1dc8:	f3 81       	ldd	r31, Z+3	; 0x03
    1dca:	e0 2d       	mov	r30, r0
    1dcc:	19 95       	eicall
	
}
    1dce:	0f 90       	pop	r0
    1dd0:	0f 90       	pop	r0
    1dd2:	0f 90       	pop	r0
    1dd4:	0f 90       	pop	r0
    1dd6:	df 91       	pop	r29
    1dd8:	cf 91       	pop	r28
    1dda:	ff 91       	pop	r31
    1ddc:	ef 91       	pop	r30
    1dde:	bf 91       	pop	r27
    1de0:	af 91       	pop	r26
    1de2:	9f 91       	pop	r25
    1de4:	8f 91       	pop	r24
    1de6:	7f 91       	pop	r23
    1de8:	6f 91       	pop	r22
    1dea:	5f 91       	pop	r21
    1dec:	4f 91       	pop	r20
    1dee:	3f 91       	pop	r19
    1df0:	2f 91       	pop	r18
    1df2:	0f 90       	pop	r0
    1df4:	0b be       	out	0x3b, r0	; 59
    1df6:	0f 90       	pop	r0
    1df8:	0f be       	out	0x3f, r0	; 63
    1dfa:	0f 90       	pop	r0
    1dfc:	1f 90       	pop	r1
    1dfe:	18 95       	reti

00001e00 <__vector_25>:
  if(n >= 10){
    UART3_OutUDec(n/10);
    n = n%10;
  }
  UART3_putc(n+'0'); /* n is between 0 and 9 */
}
    1e00:	1f 92       	push	r1
    1e02:	0f 92       	push	r0
    1e04:	0f b6       	in	r0, 0x3f	; 63
    1e06:	0f 92       	push	r0
    1e08:	11 24       	eor	r1, r1
    1e0a:	0b b6       	in	r0, 0x3b	; 59
    1e0c:	0f 92       	push	r0
    1e0e:	2f 93       	push	r18
    1e10:	3f 93       	push	r19
    1e12:	4f 93       	push	r20
    1e14:	5f 93       	push	r21
    1e16:	8f 93       	push	r24
    1e18:	9f 93       	push	r25
    1e1a:	ef 93       	push	r30
    1e1c:	ff 93       	push	r31
    1e1e:	20 91 c0 00 	lds	r18, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
    1e22:	30 91 c6 00 	lds	r19, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    1e26:	28 71       	andi	r18, 0x18	; 24
    1e28:	80 91 f5 08 	lds	r24, 0x08F5	; 0x8008f5 <UART_RxHead>
    1e2c:	90 e0       	ldi	r25, 0x00	; 0
    1e2e:	01 96       	adiw	r24, 0x01	; 1
    1e30:	8f 77       	andi	r24, 0x7F	; 127
    1e32:	99 27       	eor	r25, r25
    1e34:	40 91 f4 08 	lds	r20, 0x08F4	; 0x8008f4 <UART_RxTail>
    1e38:	50 e0       	ldi	r21, 0x00	; 0
    1e3a:	48 17       	cp	r20, r24
    1e3c:	59 07       	cpc	r21, r25
    1e3e:	39 f0       	breq	.+14     	; 0x1e4e <__vector_25+0x4e>
    1e40:	80 93 f5 08 	sts	0x08F5, r24	; 0x8008f5 <UART_RxHead>
    1e44:	fc 01       	movw	r30, r24
    1e46:	e8 50       	subi	r30, 0x08	; 8
    1e48:	f7 4f       	sbci	r31, 0xF7	; 247
    1e4a:	30 83       	st	Z, r19
    1e4c:	01 c0       	rjmp	.+2      	; 0x1e50 <__vector_25+0x50>
    1e4e:	22 e0       	ldi	r18, 0x02	; 2
    1e50:	20 93 f3 08 	sts	0x08F3, r18	; 0x8008f3 <UART_LastRxError>
    1e54:	ff 91       	pop	r31
    1e56:	ef 91       	pop	r30
    1e58:	9f 91       	pop	r25
    1e5a:	8f 91       	pop	r24
    1e5c:	5f 91       	pop	r21
    1e5e:	4f 91       	pop	r20
    1e60:	3f 91       	pop	r19
    1e62:	2f 91       	pop	r18
    1e64:	0f 90       	pop	r0
    1e66:	0b be       	out	0x3b, r0	; 59
    1e68:	0f 90       	pop	r0
    1e6a:	0f be       	out	0x3f, r0	; 63
    1e6c:	0f 90       	pop	r0
    1e6e:	1f 90       	pop	r1
    1e70:	18 95       	reti

00001e72 <__vector_26>:
    1e72:	1f 92       	push	r1
    1e74:	0f 92       	push	r0
    1e76:	0f b6       	in	r0, 0x3f	; 63
    1e78:	0f 92       	push	r0
    1e7a:	11 24       	eor	r1, r1
    1e7c:	0b b6       	in	r0, 0x3b	; 59
    1e7e:	0f 92       	push	r0
    1e80:	8f 93       	push	r24
    1e82:	9f 93       	push	r25
    1e84:	ef 93       	push	r30
    1e86:	ff 93       	push	r31
    1e88:	90 91 f7 08 	lds	r25, 0x08F7	; 0x8008f7 <UART_TxHead>
    1e8c:	80 91 f6 08 	lds	r24, 0x08F6	; 0x8008f6 <UART_TxTail>
    1e90:	98 17       	cp	r25, r24
    1e92:	89 f0       	breq	.+34     	; 0x1eb6 <__vector_26+0x44>
    1e94:	80 91 f6 08 	lds	r24, 0x08F6	; 0x8008f6 <UART_TxTail>
    1e98:	90 e0       	ldi	r25, 0x00	; 0
    1e9a:	01 96       	adiw	r24, 0x01	; 1
    1e9c:	8f 77       	andi	r24, 0x7F	; 127
    1e9e:	99 27       	eor	r25, r25
    1ea0:	80 93 f6 08 	sts	0x08F6, r24	; 0x8008f6 <UART_TxTail>
    1ea4:	fc 01       	movw	r30, r24
    1ea6:	e8 58       	subi	r30, 0x88	; 136
    1ea8:	f6 4f       	sbci	r31, 0xF6	; 246
    1eaa:	80 81       	ld	r24, Z
    1eac:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    1eb0:	10 92 e3 05 	sts	0x05E3, r1	; 0x8005e3 <UART0_Transmission_end>
    1eb4:	08 c0       	rjmp	.+16     	; 0x1ec6 <__vector_26+0x54>
    1eb6:	e1 ec       	ldi	r30, 0xC1	; 193
    1eb8:	f0 e0       	ldi	r31, 0x00	; 0
    1eba:	80 81       	ld	r24, Z
    1ebc:	8f 7d       	andi	r24, 0xDF	; 223
    1ebe:	80 83       	st	Z, r24
    1ec0:	81 e0       	ldi	r24, 0x01	; 1
    1ec2:	80 93 e3 05 	sts	0x05E3, r24	; 0x8005e3 <UART0_Transmission_end>
    1ec6:	ff 91       	pop	r31
    1ec8:	ef 91       	pop	r30
    1eca:	9f 91       	pop	r25
    1ecc:	8f 91       	pop	r24
    1ece:	0f 90       	pop	r0
    1ed0:	0b be       	out	0x3b, r0	; 59
    1ed2:	0f 90       	pop	r0
    1ed4:	0f be       	out	0x3f, r0	; 63
    1ed6:	0f 90       	pop	r0
    1ed8:	1f 90       	pop	r1
    1eda:	18 95       	reti

00001edc <UART0_init>:
    1edc:	0f 93       	push	r16
    1ede:	1f 93       	push	r17
    1ee0:	8b 01       	movw	r16, r22
    1ee2:	9c 01       	movw	r18, r24
    1ee4:	f8 94       	cli
    1ee6:	10 92 f7 08 	sts	0x08F7, r1	; 0x8008f7 <UART_TxHead>
    1eea:	10 92 f6 08 	sts	0x08F6, r1	; 0x8008f6 <UART_TxTail>
    1eee:	10 92 f5 08 	sts	0x08F5, r1	; 0x8008f5 <UART_RxHead>
    1ef2:	10 92 f4 08 	sts	0x08F4, r1	; 0x8008f4 <UART_RxTail>
    1ef6:	78 94       	sei
    1ef8:	dc 01       	movw	r26, r24
    1efa:	cb 01       	movw	r24, r22
    1efc:	80 58       	subi	r24, 0x80	; 128
    1efe:	9b 47       	sbci	r25, 0x7B	; 123
    1f00:	a1 4e       	sbci	r26, 0xE1	; 225
    1f02:	bf 4f       	sbci	r27, 0xFF	; 255
    1f04:	88 0f       	add	r24, r24
    1f06:	99 1f       	adc	r25, r25
    1f08:	aa 1f       	adc	r26, r26
    1f0a:	bb 1f       	adc	r27, r27
    1f0c:	88 0f       	add	r24, r24
    1f0e:	99 1f       	adc	r25, r25
    1f10:	aa 1f       	adc	r26, r26
    1f12:	bb 1f       	adc	r27, r27
    1f14:	bc 01       	movw	r22, r24
    1f16:	cd 01       	movw	r24, r26
    1f18:	66 0f       	add	r22, r22
    1f1a:	77 1f       	adc	r23, r23
    1f1c:	88 1f       	adc	r24, r24
    1f1e:	99 1f       	adc	r25, r25
    1f20:	00 0f       	add	r16, r16
    1f22:	11 1f       	adc	r17, r17
    1f24:	22 1f       	adc	r18, r18
    1f26:	33 1f       	adc	r19, r19
    1f28:	00 0f       	add	r16, r16
    1f2a:	11 1f       	adc	r17, r17
    1f2c:	22 1f       	adc	r18, r18
    1f2e:	33 1f       	adc	r19, r19
    1f30:	a9 01       	movw	r20, r18
    1f32:	98 01       	movw	r18, r16
    1f34:	22 0f       	add	r18, r18
    1f36:	33 1f       	adc	r19, r19
    1f38:	44 1f       	adc	r20, r20
    1f3a:	55 1f       	adc	r21, r21
    1f3c:	22 0f       	add	r18, r18
    1f3e:	33 1f       	adc	r19, r19
    1f40:	44 1f       	adc	r20, r20
    1f42:	55 1f       	adc	r21, r21
    1f44:	0e 94 66 28 	call	0x50cc	; 0x50cc <__udivmodsi4>
    1f48:	ba 01       	movw	r22, r20
    1f4a:	a9 01       	movw	r20, r18
    1f4c:	41 50       	subi	r20, 0x01	; 1
    1f4e:	51 09       	sbc	r21, r1
    1f50:	61 09       	sbc	r22, r1
    1f52:	71 09       	sbc	r23, r1
    1f54:	57 ff       	sbrs	r21, 7
    1f56:	06 c0       	rjmp	.+12     	; 0x1f64 <UART0_init+0x88>
    1f58:	82 e0       	ldi	r24, 0x02	; 2
    1f5a:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
    1f5e:	5f 77       	andi	r21, 0x7F	; 127
    1f60:	66 27       	eor	r22, r22
    1f62:	77 27       	eor	r23, r23
    1f64:	bb 27       	eor	r27, r27
    1f66:	a7 2f       	mov	r26, r23
    1f68:	96 2f       	mov	r25, r22
    1f6a:	85 2f       	mov	r24, r21
    1f6c:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
    1f70:	40 93 c4 00 	sts	0x00C4, r20	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
    1f74:	88 e9       	ldi	r24, 0x98	; 152
    1f76:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    1f7a:	86 e0       	ldi	r24, 0x06	; 6
    1f7c:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
    1f80:	1f 91       	pop	r17
    1f82:	0f 91       	pop	r16
    1f84:	08 95       	ret

00001f86 <UART0_putc>:
    1f86:	40 91 f7 08 	lds	r20, 0x08F7	; 0x8008f7 <UART_TxHead>
    1f8a:	50 e0       	ldi	r21, 0x00	; 0
    1f8c:	4f 5f       	subi	r20, 0xFF	; 255
    1f8e:	5f 4f       	sbci	r21, 0xFF	; 255
    1f90:	4f 77       	andi	r20, 0x7F	; 127
    1f92:	55 27       	eor	r21, r21
    1f94:	20 91 f6 08 	lds	r18, 0x08F6	; 0x8008f6 <UART_TxTail>
    1f98:	30 e0       	ldi	r19, 0x00	; 0
    1f9a:	24 17       	cp	r18, r20
    1f9c:	35 07       	cpc	r19, r21
    1f9e:	d1 f3       	breq	.-12     	; 0x1f94 <UART0_putc+0xe>
    1fa0:	fa 01       	movw	r30, r20
    1fa2:	e8 58       	subi	r30, 0x88	; 136
    1fa4:	f6 4f       	sbci	r31, 0xF6	; 246
    1fa6:	80 83       	st	Z, r24
    1fa8:	40 93 f7 08 	sts	0x08F7, r20	; 0x8008f7 <UART_TxHead>
    1fac:	e1 ec       	ldi	r30, 0xC1	; 193
    1fae:	f0 e0       	ldi	r31, 0x00	; 0
    1fb0:	80 81       	ld	r24, Z
    1fb2:	80 62       	ori	r24, 0x20	; 32
    1fb4:	80 83       	st	Z, r24
    1fb6:	08 95       	ret

00001fb8 <UART0_OutUDec>:
    1fb8:	0f 93       	push	r16
    1fba:	1f 93       	push	r17
    1fbc:	cf 93       	push	r28
    1fbe:	df 93       	push	r29
    1fc0:	6a 30       	cpi	r22, 0x0A	; 10
    1fc2:	71 05       	cpc	r23, r1
    1fc4:	81 05       	cpc	r24, r1
    1fc6:	91 05       	cpc	r25, r1
    1fc8:	58 f0       	brcs	.+22     	; 0x1fe0 <UART0_OutUDec+0x28>
    1fca:	2a e0       	ldi	r18, 0x0A	; 10
    1fcc:	30 e0       	ldi	r19, 0x00	; 0
    1fce:	40 e0       	ldi	r20, 0x00	; 0
    1fd0:	50 e0       	ldi	r21, 0x00	; 0
    1fd2:	0e 94 66 28 	call	0x50cc	; 0x50cc <__udivmodsi4>
    1fd6:	06 2f       	mov	r16, r22
    1fd8:	ca 01       	movw	r24, r20
    1fda:	b9 01       	movw	r22, r18
    1fdc:	ed df       	rcall	.-38     	; 0x1fb8 <UART0_OutUDec>
    1fde:	60 2f       	mov	r22, r16
    1fe0:	80 e3       	ldi	r24, 0x30	; 48
    1fe2:	86 0f       	add	r24, r22
    1fe4:	d0 df       	rcall	.-96     	; 0x1f86 <UART0_putc>
    1fe6:	df 91       	pop	r29
    1fe8:	cf 91       	pop	r28
    1fea:	1f 91       	pop	r17
    1fec:	0f 91       	pop	r16
    1fee:	08 95       	ret

00001ff0 <UART0_puts>:
    1ff0:	cf 93       	push	r28
    1ff2:	df 93       	push	r29
    1ff4:	ec 01       	movw	r28, r24
    1ff6:	88 81       	ld	r24, Y
    1ff8:	88 23       	and	r24, r24
    1ffa:	29 f0       	breq	.+10     	; 0x2006 <UART0_puts+0x16>
    1ffc:	21 96       	adiw	r28, 0x01	; 1
    1ffe:	c3 df       	rcall	.-122    	; 0x1f86 <UART0_putc>
    2000:	89 91       	ld	r24, Y+
    2002:	81 11       	cpse	r24, r1
    2004:	fc cf       	rjmp	.-8      	; 0x1ffe <UART0_puts+0xe>
    2006:	df 91       	pop	r29
    2008:	cf 91       	pop	r28
    200a:	08 95       	ret

0000200c <__vector_36>:
    200c:	1f 92       	push	r1
    200e:	0f 92       	push	r0
    2010:	0f b6       	in	r0, 0x3f	; 63
    2012:	0f 92       	push	r0
    2014:	11 24       	eor	r1, r1
    2016:	0b b6       	in	r0, 0x3b	; 59
    2018:	0f 92       	push	r0
    201a:	2f 93       	push	r18
    201c:	3f 93       	push	r19
    201e:	4f 93       	push	r20
    2020:	5f 93       	push	r21
    2022:	8f 93       	push	r24
    2024:	9f 93       	push	r25
    2026:	ef 93       	push	r30
    2028:	ff 93       	push	r31
    202a:	20 91 c8 00 	lds	r18, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
    202e:	30 91 ce 00 	lds	r19, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    2032:	28 71       	andi	r18, 0x18	; 24
    2034:	80 91 f0 07 	lds	r24, 0x07F0	; 0x8007f0 <UART1_RxHead>
    2038:	90 e0       	ldi	r25, 0x00	; 0
    203a:	01 96       	adiw	r24, 0x01	; 1
    203c:	8f 77       	andi	r24, 0x7F	; 127
    203e:	99 27       	eor	r25, r25
    2040:	40 91 ef 07 	lds	r20, 0x07EF	; 0x8007ef <UART1_RxTail>
    2044:	50 e0       	ldi	r21, 0x00	; 0
    2046:	48 17       	cp	r20, r24
    2048:	59 07       	cpc	r21, r25
    204a:	39 f0       	breq	.+14     	; 0x205a <__vector_36+0x4e>
    204c:	80 93 f0 07 	sts	0x07F0, r24	; 0x8007f0 <UART1_RxHead>
    2050:	fc 01       	movw	r30, r24
    2052:	ed 50       	subi	r30, 0x0D	; 13
    2054:	f8 4f       	sbci	r31, 0xF8	; 248
    2056:	30 83       	st	Z, r19
    2058:	01 c0       	rjmp	.+2      	; 0x205c <__vector_36+0x50>
    205a:	22 e0       	ldi	r18, 0x02	; 2
    205c:	20 93 ee 07 	sts	0x07EE, r18	; 0x8007ee <UART1_LastRxError>
    2060:	ff 91       	pop	r31
    2062:	ef 91       	pop	r30
    2064:	9f 91       	pop	r25
    2066:	8f 91       	pop	r24
    2068:	5f 91       	pop	r21
    206a:	4f 91       	pop	r20
    206c:	3f 91       	pop	r19
    206e:	2f 91       	pop	r18
    2070:	0f 90       	pop	r0
    2072:	0b be       	out	0x3b, r0	; 59
    2074:	0f 90       	pop	r0
    2076:	0f be       	out	0x3f, r0	; 63
    2078:	0f 90       	pop	r0
    207a:	1f 90       	pop	r1
    207c:	18 95       	reti

0000207e <__vector_37>:
    207e:	1f 92       	push	r1
    2080:	0f 92       	push	r0
    2082:	0f b6       	in	r0, 0x3f	; 63
    2084:	0f 92       	push	r0
    2086:	11 24       	eor	r1, r1
    2088:	0b b6       	in	r0, 0x3b	; 59
    208a:	0f 92       	push	r0
    208c:	8f 93       	push	r24
    208e:	9f 93       	push	r25
    2090:	ef 93       	push	r30
    2092:	ff 93       	push	r31
    2094:	90 91 f2 07 	lds	r25, 0x07F2	; 0x8007f2 <UART1_TxHead>
    2098:	80 91 f1 07 	lds	r24, 0x07F1	; 0x8007f1 <UART1_TxTail>
    209c:	98 17       	cp	r25, r24
    209e:	89 f0       	breq	.+34     	; 0x20c2 <__vector_37+0x44>
    20a0:	80 91 f1 07 	lds	r24, 0x07F1	; 0x8007f1 <UART1_TxTail>
    20a4:	90 e0       	ldi	r25, 0x00	; 0
    20a6:	01 96       	adiw	r24, 0x01	; 1
    20a8:	8f 77       	andi	r24, 0x7F	; 127
    20aa:	99 27       	eor	r25, r25
    20ac:	80 93 f1 07 	sts	0x07F1, r24	; 0x8007f1 <UART1_TxTail>
    20b0:	fc 01       	movw	r30, r24
    20b2:	ed 58       	subi	r30, 0x8D	; 141
    20b4:	f7 4f       	sbci	r31, 0xF7	; 247
    20b6:	80 81       	ld	r24, Z
    20b8:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    20bc:	10 92 e2 05 	sts	0x05E2, r1	; 0x8005e2 <UART1_Transmission_end>
    20c0:	08 c0       	rjmp	.+16     	; 0x20d2 <__vector_37+0x54>
    20c2:	e9 ec       	ldi	r30, 0xC9	; 201
    20c4:	f0 e0       	ldi	r31, 0x00	; 0
    20c6:	80 81       	ld	r24, Z
    20c8:	8f 7d       	andi	r24, 0xDF	; 223
    20ca:	80 83       	st	Z, r24
    20cc:	81 e0       	ldi	r24, 0x01	; 1
    20ce:	80 93 e2 05 	sts	0x05E2, r24	; 0x8005e2 <UART1_Transmission_end>
    20d2:	ff 91       	pop	r31
    20d4:	ef 91       	pop	r30
    20d6:	9f 91       	pop	r25
    20d8:	8f 91       	pop	r24
    20da:	0f 90       	pop	r0
    20dc:	0b be       	out	0x3b, r0	; 59
    20de:	0f 90       	pop	r0
    20e0:	0f be       	out	0x3f, r0	; 63
    20e2:	0f 90       	pop	r0
    20e4:	1f 90       	pop	r1
    20e6:	18 95       	reti

000020e8 <UART1_init>:
    20e8:	0f 93       	push	r16
    20ea:	1f 93       	push	r17
    20ec:	8b 01       	movw	r16, r22
    20ee:	9c 01       	movw	r18, r24
    20f0:	f8 94       	cli
    20f2:	10 92 f2 07 	sts	0x07F2, r1	; 0x8007f2 <UART1_TxHead>
    20f6:	10 92 f1 07 	sts	0x07F1, r1	; 0x8007f1 <UART1_TxTail>
    20fa:	10 92 f0 07 	sts	0x07F0, r1	; 0x8007f0 <UART1_RxHead>
    20fe:	10 92 ef 07 	sts	0x07EF, r1	; 0x8007ef <UART1_RxTail>
    2102:	78 94       	sei
    2104:	dc 01       	movw	r26, r24
    2106:	cb 01       	movw	r24, r22
    2108:	80 58       	subi	r24, 0x80	; 128
    210a:	9b 47       	sbci	r25, 0x7B	; 123
    210c:	a1 4e       	sbci	r26, 0xE1	; 225
    210e:	bf 4f       	sbci	r27, 0xFF	; 255
    2110:	88 0f       	add	r24, r24
    2112:	99 1f       	adc	r25, r25
    2114:	aa 1f       	adc	r26, r26
    2116:	bb 1f       	adc	r27, r27
    2118:	88 0f       	add	r24, r24
    211a:	99 1f       	adc	r25, r25
    211c:	aa 1f       	adc	r26, r26
    211e:	bb 1f       	adc	r27, r27
    2120:	bc 01       	movw	r22, r24
    2122:	cd 01       	movw	r24, r26
    2124:	66 0f       	add	r22, r22
    2126:	77 1f       	adc	r23, r23
    2128:	88 1f       	adc	r24, r24
    212a:	99 1f       	adc	r25, r25
    212c:	00 0f       	add	r16, r16
    212e:	11 1f       	adc	r17, r17
    2130:	22 1f       	adc	r18, r18
    2132:	33 1f       	adc	r19, r19
    2134:	00 0f       	add	r16, r16
    2136:	11 1f       	adc	r17, r17
    2138:	22 1f       	adc	r18, r18
    213a:	33 1f       	adc	r19, r19
    213c:	a9 01       	movw	r20, r18
    213e:	98 01       	movw	r18, r16
    2140:	22 0f       	add	r18, r18
    2142:	33 1f       	adc	r19, r19
    2144:	44 1f       	adc	r20, r20
    2146:	55 1f       	adc	r21, r21
    2148:	22 0f       	add	r18, r18
    214a:	33 1f       	adc	r19, r19
    214c:	44 1f       	adc	r20, r20
    214e:	55 1f       	adc	r21, r21
    2150:	0e 94 66 28 	call	0x50cc	; 0x50cc <__udivmodsi4>
    2154:	ba 01       	movw	r22, r20
    2156:	a9 01       	movw	r20, r18
    2158:	41 50       	subi	r20, 0x01	; 1
    215a:	51 09       	sbc	r21, r1
    215c:	61 09       	sbc	r22, r1
    215e:	71 09       	sbc	r23, r1
    2160:	57 ff       	sbrs	r21, 7
    2162:	06 c0       	rjmp	.+12     	; 0x2170 <UART1_init+0x88>
    2164:	82 e0       	ldi	r24, 0x02	; 2
    2166:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
    216a:	5f 77       	andi	r21, 0x7F	; 127
    216c:	66 27       	eor	r22, r22
    216e:	77 27       	eor	r23, r23
    2170:	bb 27       	eor	r27, r27
    2172:	a7 2f       	mov	r26, r23
    2174:	96 2f       	mov	r25, r22
    2176:	85 2f       	mov	r24, r21
    2178:	80 93 cd 00 	sts	0x00CD, r24	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7000cd>
    217c:	40 93 cc 00 	sts	0x00CC, r20	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7000cc>
    2180:	88 e9       	ldi	r24, 0x98	; 152
    2182:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7000c9>
    2186:	86 e0       	ldi	r24, 0x06	; 6
    2188:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7000ca>
    218c:	1f 91       	pop	r17
    218e:	0f 91       	pop	r16
    2190:	08 95       	ret

00002192 <UART1_getc>:
    2192:	f8 94       	cli
    2194:	90 91 f0 07 	lds	r25, 0x07F0	; 0x8007f0 <UART1_RxHead>
    2198:	80 91 ef 07 	lds	r24, 0x07EF	; 0x8007ef <UART1_RxTail>
    219c:	98 13       	cpse	r25, r24
    219e:	04 c0       	rjmp	.+8      	; 0x21a8 <UART1_getc+0x16>
    21a0:	78 94       	sei
    21a2:	80 e0       	ldi	r24, 0x00	; 0
    21a4:	91 e0       	ldi	r25, 0x01	; 1
    21a6:	08 95       	ret
    21a8:	80 91 ef 07 	lds	r24, 0x07EF	; 0x8007ef <UART1_RxTail>
    21ac:	90 e0       	ldi	r25, 0x00	; 0
    21ae:	01 96       	adiw	r24, 0x01	; 1
    21b0:	8f 77       	andi	r24, 0x7F	; 127
    21b2:	99 27       	eor	r25, r25
    21b4:	80 93 ef 07 	sts	0x07EF, r24	; 0x8007ef <UART1_RxTail>
    21b8:	78 94       	sei
    21ba:	fc 01       	movw	r30, r24
    21bc:	ed 50       	subi	r30, 0x0D	; 13
    21be:	f8 4f       	sbci	r31, 0xF8	; 248
    21c0:	20 81       	ld	r18, Z
    21c2:	80 91 ee 07 	lds	r24, 0x07EE	; 0x8007ee <UART1_LastRxError>
    21c6:	90 e0       	ldi	r25, 0x00	; 0
    21c8:	98 2f       	mov	r25, r24
    21ca:	88 27       	eor	r24, r24
    21cc:	82 0f       	add	r24, r18
    21ce:	91 1d       	adc	r25, r1
    21d0:	08 95       	ret

000021d2 <UART1_peek>:
    21d2:	f8 94       	cli
    21d4:	90 91 f0 07 	lds	r25, 0x07F0	; 0x8007f0 <UART1_RxHead>
    21d8:	80 91 ef 07 	lds	r24, 0x07EF	; 0x8007ef <UART1_RxTail>
    21dc:	98 13       	cpse	r25, r24
    21de:	04 c0       	rjmp	.+8      	; 0x21e8 <UART1_peek+0x16>
    21e0:	78 94       	sei
    21e2:	80 e0       	ldi	r24, 0x00	; 0
    21e4:	91 e0       	ldi	r25, 0x01	; 1
    21e6:	08 95       	ret
    21e8:	78 94       	sei
    21ea:	e0 91 ef 07 	lds	r30, 0x07EF	; 0x8007ef <UART1_RxTail>
    21ee:	f0 e0       	ldi	r31, 0x00	; 0
    21f0:	31 96       	adiw	r30, 0x01	; 1
    21f2:	ef 77       	andi	r30, 0x7F	; 127
    21f4:	ff 27       	eor	r31, r31
    21f6:	ed 50       	subi	r30, 0x0D	; 13
    21f8:	f8 4f       	sbci	r31, 0xF8	; 248
    21fa:	20 81       	ld	r18, Z
    21fc:	80 91 ee 07 	lds	r24, 0x07EE	; 0x8007ee <UART1_LastRxError>
    2200:	90 e0       	ldi	r25, 0x00	; 0
    2202:	98 2f       	mov	r25, r24
    2204:	88 27       	eor	r24, r24
    2206:	82 0f       	add	r24, r18
    2208:	91 1d       	adc	r25, r1
    220a:	08 95       	ret

0000220c <UART1_putc>:
    220c:	40 91 f2 07 	lds	r20, 0x07F2	; 0x8007f2 <UART1_TxHead>
    2210:	50 e0       	ldi	r21, 0x00	; 0
    2212:	4f 5f       	subi	r20, 0xFF	; 255
    2214:	5f 4f       	sbci	r21, 0xFF	; 255
    2216:	4f 77       	andi	r20, 0x7F	; 127
    2218:	55 27       	eor	r21, r21
    221a:	20 91 f1 07 	lds	r18, 0x07F1	; 0x8007f1 <UART1_TxTail>
    221e:	30 e0       	ldi	r19, 0x00	; 0
    2220:	24 17       	cp	r18, r20
    2222:	35 07       	cpc	r19, r21
    2224:	d1 f3       	breq	.-12     	; 0x221a <UART1_putc+0xe>
    2226:	fa 01       	movw	r30, r20
    2228:	ed 58       	subi	r30, 0x8D	; 141
    222a:	f7 4f       	sbci	r31, 0xF7	; 247
    222c:	80 83       	st	Z, r24
    222e:	40 93 f2 07 	sts	0x07F2, r20	; 0x8007f2 <UART1_TxHead>
    2232:	e9 ec       	ldi	r30, 0xC9	; 201
    2234:	f0 e0       	ldi	r31, 0x00	; 0
    2236:	80 81       	ld	r24, Z
    2238:	80 62       	ori	r24, 0x20	; 32
    223a:	80 83       	st	Z, r24
    223c:	08 95       	ret

0000223e <UART1_puts>:
    223e:	cf 93       	push	r28
    2240:	df 93       	push	r29
    2242:	ec 01       	movw	r28, r24
    2244:	88 81       	ld	r24, Y
    2246:	88 23       	and	r24, r24
    2248:	29 f0       	breq	.+10     	; 0x2254 <UART1_puts+0x16>
    224a:	21 96       	adiw	r28, 0x01	; 1
    224c:	df df       	rcall	.-66     	; 0x220c <UART1_putc>
    224e:	89 91       	ld	r24, Y+
    2250:	81 11       	cpse	r24, r1
    2252:	fc cf       	rjmp	.-8      	; 0x224c <UART1_puts+0xe>
    2254:	df 91       	pop	r29
    2256:	cf 91       	pop	r28
    2258:	08 95       	ret

0000225a <UART1_puts_p>:
    225a:	cf 93       	push	r28
    225c:	df 93       	push	r29
    225e:	ec 01       	movw	r28, r24
    2260:	21 96       	adiw	r28, 0x01	; 1
    2262:	fc 01       	movw	r30, r24
    2264:	84 91       	lpm	r24, Z
    2266:	88 23       	and	r24, r24
    2268:	31 f0       	breq	.+12     	; 0x2276 <UART1_puts_p+0x1c>
    226a:	d0 df       	rcall	.-96     	; 0x220c <UART1_putc>
    226c:	fe 01       	movw	r30, r28
    226e:	84 91       	lpm	r24, Z
    2270:	21 96       	adiw	r28, 0x01	; 1
    2272:	81 11       	cpse	r24, r1
    2274:	fa cf       	rjmp	.-12     	; 0x226a <UART1_puts_p+0x10>
    2276:	df 91       	pop	r29
    2278:	cf 91       	pop	r28
    227a:	08 95       	ret

0000227c <UART1_available>:
    227c:	f8 94       	cli
    227e:	80 91 f0 07 	lds	r24, 0x07F0	; 0x8007f0 <UART1_RxHead>
    2282:	20 91 ef 07 	lds	r18, 0x07EF	; 0x8007ef <UART1_RxTail>
    2286:	78 94       	sei
    2288:	90 e0       	ldi	r25, 0x00	; 0
    228a:	80 58       	subi	r24, 0x80	; 128
    228c:	9f 4f       	sbci	r25, 0xFF	; 255
    228e:	82 1b       	sub	r24, r18
    2290:	91 09       	sbc	r25, r1
    2292:	8f 77       	andi	r24, 0x7F	; 127
    2294:	99 27       	eor	r25, r25
    2296:	08 95       	ret

00002298 <UART1_flush>:
    2298:	80 91 e2 05 	lds	r24, 0x05E2	; 0x8005e2 <UART1_Transmission_end>
    229c:	88 23       	and	r24, r24
    229e:	e1 f3       	breq	.-8      	; 0x2298 <UART1_flush>
    22a0:	08 95       	ret

000022a2 <__vector_51>:
    22a2:	1f 92       	push	r1
    22a4:	0f 92       	push	r0
    22a6:	0f b6       	in	r0, 0x3f	; 63
    22a8:	0f 92       	push	r0
    22aa:	11 24       	eor	r1, r1
    22ac:	0b b6       	in	r0, 0x3b	; 59
    22ae:	0f 92       	push	r0
    22b0:	2f 93       	push	r18
    22b2:	3f 93       	push	r19
    22b4:	4f 93       	push	r20
    22b6:	5f 93       	push	r21
    22b8:	8f 93       	push	r24
    22ba:	9f 93       	push	r25
    22bc:	ef 93       	push	r30
    22be:	ff 93       	push	r31
    22c0:	20 91 d0 00 	lds	r18, 0x00D0	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7000d0>
    22c4:	30 91 d6 00 	lds	r19, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    22c8:	28 71       	andi	r18, 0x18	; 24
    22ca:	80 91 eb 06 	lds	r24, 0x06EB	; 0x8006eb <UART2_RxHead>
    22ce:	90 e0       	ldi	r25, 0x00	; 0
    22d0:	01 96       	adiw	r24, 0x01	; 1
    22d2:	8f 77       	andi	r24, 0x7F	; 127
    22d4:	99 27       	eor	r25, r25
    22d6:	40 91 ea 06 	lds	r20, 0x06EA	; 0x8006ea <UART2_RxTail>
    22da:	50 e0       	ldi	r21, 0x00	; 0
    22dc:	48 17       	cp	r20, r24
    22de:	59 07       	cpc	r21, r25
    22e0:	39 f0       	breq	.+14     	; 0x22f0 <__vector_51+0x4e>
    22e2:	80 93 eb 06 	sts	0x06EB, r24	; 0x8006eb <UART2_RxHead>
    22e6:	fc 01       	movw	r30, r24
    22e8:	e2 51       	subi	r30, 0x12	; 18
    22ea:	f9 4f       	sbci	r31, 0xF9	; 249
    22ec:	30 83       	st	Z, r19
    22ee:	01 c0       	rjmp	.+2      	; 0x22f2 <__vector_51+0x50>
    22f0:	22 e0       	ldi	r18, 0x02	; 2
    22f2:	20 93 e9 06 	sts	0x06E9, r18	; 0x8006e9 <UART2_LastRxError>
    22f6:	ff 91       	pop	r31
    22f8:	ef 91       	pop	r30
    22fa:	9f 91       	pop	r25
    22fc:	8f 91       	pop	r24
    22fe:	5f 91       	pop	r21
    2300:	4f 91       	pop	r20
    2302:	3f 91       	pop	r19
    2304:	2f 91       	pop	r18
    2306:	0f 90       	pop	r0
    2308:	0b be       	out	0x3b, r0	; 59
    230a:	0f 90       	pop	r0
    230c:	0f be       	out	0x3f, r0	; 63
    230e:	0f 90       	pop	r0
    2310:	1f 90       	pop	r1
    2312:	18 95       	reti

00002314 <__vector_52>:
    2314:	1f 92       	push	r1
    2316:	0f 92       	push	r0
    2318:	0f b6       	in	r0, 0x3f	; 63
    231a:	0f 92       	push	r0
    231c:	11 24       	eor	r1, r1
    231e:	0b b6       	in	r0, 0x3b	; 59
    2320:	0f 92       	push	r0
    2322:	8f 93       	push	r24
    2324:	9f 93       	push	r25
    2326:	ef 93       	push	r30
    2328:	ff 93       	push	r31
    232a:	90 91 ed 06 	lds	r25, 0x06ED	; 0x8006ed <UART2_TxHead>
    232e:	80 91 ec 06 	lds	r24, 0x06EC	; 0x8006ec <UART2_TxTail>
    2332:	98 17       	cp	r25, r24
    2334:	89 f0       	breq	.+34     	; 0x2358 <__vector_52+0x44>
    2336:	80 91 ec 06 	lds	r24, 0x06EC	; 0x8006ec <UART2_TxTail>
    233a:	90 e0       	ldi	r25, 0x00	; 0
    233c:	01 96       	adiw	r24, 0x01	; 1
    233e:	8f 77       	andi	r24, 0x7F	; 127
    2340:	99 27       	eor	r25, r25
    2342:	80 93 ec 06 	sts	0x06EC, r24	; 0x8006ec <UART2_TxTail>
    2346:	fc 01       	movw	r30, r24
    2348:	e2 59       	subi	r30, 0x92	; 146
    234a:	f8 4f       	sbci	r31, 0xF8	; 248
    234c:	80 81       	ld	r24, Z
    234e:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    2352:	10 92 e1 05 	sts	0x05E1, r1	; 0x8005e1 <UART2_Transmission_end>
    2356:	08 c0       	rjmp	.+16     	; 0x2368 <__vector_52+0x54>
    2358:	e1 ed       	ldi	r30, 0xD1	; 209
    235a:	f0 e0       	ldi	r31, 0x00	; 0
    235c:	80 81       	ld	r24, Z
    235e:	8f 7d       	andi	r24, 0xDF	; 223
    2360:	80 83       	st	Z, r24
    2362:	81 e0       	ldi	r24, 0x01	; 1
    2364:	80 93 e1 05 	sts	0x05E1, r24	; 0x8005e1 <UART2_Transmission_end>
    2368:	ff 91       	pop	r31
    236a:	ef 91       	pop	r30
    236c:	9f 91       	pop	r25
    236e:	8f 91       	pop	r24
    2370:	0f 90       	pop	r0
    2372:	0b be       	out	0x3b, r0	; 59
    2374:	0f 90       	pop	r0
    2376:	0f be       	out	0x3f, r0	; 63
    2378:	0f 90       	pop	r0
    237a:	1f 90       	pop	r1
    237c:	18 95       	reti

0000237e <UART2_init>:
    237e:	0f 93       	push	r16
    2380:	1f 93       	push	r17
    2382:	8b 01       	movw	r16, r22
    2384:	9c 01       	movw	r18, r24
    2386:	f8 94       	cli
    2388:	10 92 ed 06 	sts	0x06ED, r1	; 0x8006ed <UART2_TxHead>
    238c:	10 92 ec 06 	sts	0x06EC, r1	; 0x8006ec <UART2_TxTail>
    2390:	10 92 eb 06 	sts	0x06EB, r1	; 0x8006eb <UART2_RxHead>
    2394:	10 92 ea 06 	sts	0x06EA, r1	; 0x8006ea <UART2_RxTail>
    2398:	78 94       	sei
    239a:	dc 01       	movw	r26, r24
    239c:	cb 01       	movw	r24, r22
    239e:	80 58       	subi	r24, 0x80	; 128
    23a0:	9b 47       	sbci	r25, 0x7B	; 123
    23a2:	a1 4e       	sbci	r26, 0xE1	; 225
    23a4:	bf 4f       	sbci	r27, 0xFF	; 255
    23a6:	88 0f       	add	r24, r24
    23a8:	99 1f       	adc	r25, r25
    23aa:	aa 1f       	adc	r26, r26
    23ac:	bb 1f       	adc	r27, r27
    23ae:	88 0f       	add	r24, r24
    23b0:	99 1f       	adc	r25, r25
    23b2:	aa 1f       	adc	r26, r26
    23b4:	bb 1f       	adc	r27, r27
    23b6:	bc 01       	movw	r22, r24
    23b8:	cd 01       	movw	r24, r26
    23ba:	66 0f       	add	r22, r22
    23bc:	77 1f       	adc	r23, r23
    23be:	88 1f       	adc	r24, r24
    23c0:	99 1f       	adc	r25, r25
    23c2:	00 0f       	add	r16, r16
    23c4:	11 1f       	adc	r17, r17
    23c6:	22 1f       	adc	r18, r18
    23c8:	33 1f       	adc	r19, r19
    23ca:	00 0f       	add	r16, r16
    23cc:	11 1f       	adc	r17, r17
    23ce:	22 1f       	adc	r18, r18
    23d0:	33 1f       	adc	r19, r19
    23d2:	a9 01       	movw	r20, r18
    23d4:	98 01       	movw	r18, r16
    23d6:	22 0f       	add	r18, r18
    23d8:	33 1f       	adc	r19, r19
    23da:	44 1f       	adc	r20, r20
    23dc:	55 1f       	adc	r21, r21
    23de:	22 0f       	add	r18, r18
    23e0:	33 1f       	adc	r19, r19
    23e2:	44 1f       	adc	r20, r20
    23e4:	55 1f       	adc	r21, r21
    23e6:	0e 94 66 28 	call	0x50cc	; 0x50cc <__udivmodsi4>
    23ea:	ba 01       	movw	r22, r20
    23ec:	a9 01       	movw	r20, r18
    23ee:	41 50       	subi	r20, 0x01	; 1
    23f0:	51 09       	sbc	r21, r1
    23f2:	61 09       	sbc	r22, r1
    23f4:	71 09       	sbc	r23, r1
    23f6:	57 ff       	sbrs	r21, 7
    23f8:	06 c0       	rjmp	.+12     	; 0x2406 <UART2_init+0x88>
    23fa:	82 e0       	ldi	r24, 0x02	; 2
    23fc:	80 93 d0 00 	sts	0x00D0, r24	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7000d0>
    2400:	5f 77       	andi	r21, 0x7F	; 127
    2402:	66 27       	eor	r22, r22
    2404:	77 27       	eor	r23, r23
    2406:	bb 27       	eor	r27, r27
    2408:	a7 2f       	mov	r26, r23
    240a:	96 2f       	mov	r25, r22
    240c:	85 2f       	mov	r24, r21
    240e:	80 93 d5 00 	sts	0x00D5, r24	; 0x8000d5 <__TEXT_REGION_LENGTH__+0x7000d5>
    2412:	40 93 d4 00 	sts	0x00D4, r20	; 0x8000d4 <__TEXT_REGION_LENGTH__+0x7000d4>
    2416:	88 e9       	ldi	r24, 0x98	; 152
    2418:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7000d1>
    241c:	86 e0       	ldi	r24, 0x06	; 6
    241e:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7000d2>
    2422:	1f 91       	pop	r17
    2424:	0f 91       	pop	r16
    2426:	08 95       	ret

00002428 <UART2_getc>:
    2428:	90 91 eb 06 	lds	r25, 0x06EB	; 0x8006eb <UART2_RxHead>
    242c:	80 91 ea 06 	lds	r24, 0x06EA	; 0x8006ea <UART2_RxTail>
    2430:	98 17       	cp	r25, r24
    2432:	a1 f0       	breq	.+40     	; 0x245c <UART2_getc+0x34>
    2434:	80 91 ea 06 	lds	r24, 0x06EA	; 0x8006ea <UART2_RxTail>
    2438:	90 e0       	ldi	r25, 0x00	; 0
    243a:	01 96       	adiw	r24, 0x01	; 1
    243c:	8f 77       	andi	r24, 0x7F	; 127
    243e:	99 27       	eor	r25, r25
    2440:	80 93 ea 06 	sts	0x06EA, r24	; 0x8006ea <UART2_RxTail>
    2444:	fc 01       	movw	r30, r24
    2446:	e2 51       	subi	r30, 0x12	; 18
    2448:	f9 4f       	sbci	r31, 0xF9	; 249
    244a:	20 81       	ld	r18, Z
    244c:	80 91 e9 06 	lds	r24, 0x06E9	; 0x8006e9 <UART2_LastRxError>
    2450:	90 e0       	ldi	r25, 0x00	; 0
    2452:	98 2f       	mov	r25, r24
    2454:	88 27       	eor	r24, r24
    2456:	82 0f       	add	r24, r18
    2458:	91 1d       	adc	r25, r1
    245a:	08 95       	ret
    245c:	80 e0       	ldi	r24, 0x00	; 0
    245e:	91 e0       	ldi	r25, 0x01	; 1
    2460:	08 95       	ret

00002462 <UART2_peek>:
    2462:	f8 94       	cli
    2464:	90 91 eb 06 	lds	r25, 0x06EB	; 0x8006eb <UART2_RxHead>
    2468:	80 91 ea 06 	lds	r24, 0x06EA	; 0x8006ea <UART2_RxTail>
    246c:	98 13       	cpse	r25, r24
    246e:	04 c0       	rjmp	.+8      	; 0x2478 <UART2_peek+0x16>
    2470:	78 94       	sei
    2472:	80 e0       	ldi	r24, 0x00	; 0
    2474:	91 e0       	ldi	r25, 0x01	; 1
    2476:	08 95       	ret
    2478:	78 94       	sei
    247a:	e0 91 ea 06 	lds	r30, 0x06EA	; 0x8006ea <UART2_RxTail>
    247e:	f0 e0       	ldi	r31, 0x00	; 0
    2480:	31 96       	adiw	r30, 0x01	; 1
    2482:	ef 77       	andi	r30, 0x7F	; 127
    2484:	ff 27       	eor	r31, r31
    2486:	e2 51       	subi	r30, 0x12	; 18
    2488:	f9 4f       	sbci	r31, 0xF9	; 249
    248a:	20 81       	ld	r18, Z
    248c:	80 91 e9 06 	lds	r24, 0x06E9	; 0x8006e9 <UART2_LastRxError>
    2490:	90 e0       	ldi	r25, 0x00	; 0
    2492:	98 2f       	mov	r25, r24
    2494:	88 27       	eor	r24, r24
    2496:	82 0f       	add	r24, r18
    2498:	91 1d       	adc	r25, r1
    249a:	08 95       	ret

0000249c <UART2_putc>:
    249c:	40 91 ed 06 	lds	r20, 0x06ED	; 0x8006ed <UART2_TxHead>
    24a0:	50 e0       	ldi	r21, 0x00	; 0
    24a2:	4f 5f       	subi	r20, 0xFF	; 255
    24a4:	5f 4f       	sbci	r21, 0xFF	; 255
    24a6:	4f 77       	andi	r20, 0x7F	; 127
    24a8:	55 27       	eor	r21, r21
    24aa:	20 91 ec 06 	lds	r18, 0x06EC	; 0x8006ec <UART2_TxTail>
    24ae:	30 e0       	ldi	r19, 0x00	; 0
    24b0:	24 17       	cp	r18, r20
    24b2:	35 07       	cpc	r19, r21
    24b4:	d1 f3       	breq	.-12     	; 0x24aa <UART2_putc+0xe>
    24b6:	fa 01       	movw	r30, r20
    24b8:	e2 59       	subi	r30, 0x92	; 146
    24ba:	f8 4f       	sbci	r31, 0xF8	; 248
    24bc:	80 83       	st	Z, r24
    24be:	40 93 ed 06 	sts	0x06ED, r20	; 0x8006ed <UART2_TxHead>
    24c2:	e1 ed       	ldi	r30, 0xD1	; 209
    24c4:	f0 e0       	ldi	r31, 0x00	; 0
    24c6:	80 81       	ld	r24, Z
    24c8:	80 62       	ori	r24, 0x20	; 32
    24ca:	80 83       	st	Z, r24
    24cc:	08 95       	ret

000024ce <UART2_puts>:
    24ce:	cf 93       	push	r28
    24d0:	df 93       	push	r29
    24d2:	ec 01       	movw	r28, r24
    24d4:	88 81       	ld	r24, Y
    24d6:	88 23       	and	r24, r24
    24d8:	29 f0       	breq	.+10     	; 0x24e4 <UART2_puts+0x16>
    24da:	21 96       	adiw	r28, 0x01	; 1
    24dc:	df df       	rcall	.-66     	; 0x249c <UART2_putc>
    24de:	89 91       	ld	r24, Y+
    24e0:	81 11       	cpse	r24, r1
    24e2:	fc cf       	rjmp	.-8      	; 0x24dc <UART2_puts+0xe>
    24e4:	df 91       	pop	r29
    24e6:	cf 91       	pop	r28
    24e8:	08 95       	ret

000024ea <UART2_puts_p>:
    24ea:	cf 93       	push	r28
    24ec:	df 93       	push	r29
    24ee:	ec 01       	movw	r28, r24
    24f0:	21 96       	adiw	r28, 0x01	; 1
    24f2:	fc 01       	movw	r30, r24
    24f4:	84 91       	lpm	r24, Z
    24f6:	88 23       	and	r24, r24
    24f8:	31 f0       	breq	.+12     	; 0x2506 <UART2_puts_p+0x1c>
    24fa:	d0 df       	rcall	.-96     	; 0x249c <UART2_putc>
    24fc:	fe 01       	movw	r30, r28
    24fe:	84 91       	lpm	r24, Z
    2500:	21 96       	adiw	r28, 0x01	; 1
    2502:	81 11       	cpse	r24, r1
    2504:	fa cf       	rjmp	.-12     	; 0x24fa <UART2_puts_p+0x10>
    2506:	df 91       	pop	r29
    2508:	cf 91       	pop	r28
    250a:	08 95       	ret

0000250c <UART2_available>:
    250c:	f8 94       	cli
    250e:	80 91 eb 06 	lds	r24, 0x06EB	; 0x8006eb <UART2_RxHead>
    2512:	20 91 ea 06 	lds	r18, 0x06EA	; 0x8006ea <UART2_RxTail>
    2516:	78 94       	sei
    2518:	90 e0       	ldi	r25, 0x00	; 0
    251a:	80 58       	subi	r24, 0x80	; 128
    251c:	9f 4f       	sbci	r25, 0xFF	; 255
    251e:	82 1b       	sub	r24, r18
    2520:	91 09       	sbc	r25, r1
    2522:	8f 77       	andi	r24, 0x7F	; 127
    2524:	99 27       	eor	r25, r25
    2526:	08 95       	ret

00002528 <UART2_flush>:
    2528:	80 91 e1 05 	lds	r24, 0x05E1	; 0x8005e1 <UART2_Transmission_end>
    252c:	88 23       	and	r24, r24
    252e:	e1 f3       	breq	.-8      	; 0x2528 <UART2_flush>
    2530:	08 95       	ret

00002532 <__vector_54>:
    2532:	1f 92       	push	r1
    2534:	0f 92       	push	r0
    2536:	0f b6       	in	r0, 0x3f	; 63
    2538:	0f 92       	push	r0
    253a:	11 24       	eor	r1, r1
    253c:	0b b6       	in	r0, 0x3b	; 59
    253e:	0f 92       	push	r0
    2540:	2f 93       	push	r18
    2542:	3f 93       	push	r19
    2544:	4f 93       	push	r20
    2546:	5f 93       	push	r21
    2548:	8f 93       	push	r24
    254a:	9f 93       	push	r25
    254c:	ef 93       	push	r30
    254e:	ff 93       	push	r31
    2550:	20 91 30 01 	lds	r18, 0x0130	; 0x800130 <__TEXT_REGION_LENGTH__+0x700130>
    2554:	30 91 36 01 	lds	r19, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    2558:	28 71       	andi	r18, 0x18	; 24
    255a:	80 91 e6 05 	lds	r24, 0x05E6	; 0x8005e6 <UART3_RxHead>
    255e:	90 e0       	ldi	r25, 0x00	; 0
    2560:	01 96       	adiw	r24, 0x01	; 1
    2562:	8f 77       	andi	r24, 0x7F	; 127
    2564:	99 27       	eor	r25, r25
    2566:	40 91 e5 05 	lds	r20, 0x05E5	; 0x8005e5 <UART3_RxTail>
    256a:	50 e0       	ldi	r21, 0x00	; 0
    256c:	48 17       	cp	r20, r24
    256e:	59 07       	cpc	r21, r25
    2570:	39 f0       	breq	.+14     	; 0x2580 <__vector_54+0x4e>
    2572:	80 93 e6 05 	sts	0x05E6, r24	; 0x8005e6 <UART3_RxHead>
    2576:	fc 01       	movw	r30, r24
    2578:	e7 51       	subi	r30, 0x17	; 23
    257a:	fa 4f       	sbci	r31, 0xFA	; 250
    257c:	30 83       	st	Z, r19
    257e:	01 c0       	rjmp	.+2      	; 0x2582 <__vector_54+0x50>
    2580:	22 e0       	ldi	r18, 0x02	; 2
    2582:	20 93 e4 05 	sts	0x05E4, r18	; 0x8005e4 <UART3_LastRxError>
    2586:	ff 91       	pop	r31
    2588:	ef 91       	pop	r30
    258a:	9f 91       	pop	r25
    258c:	8f 91       	pop	r24
    258e:	5f 91       	pop	r21
    2590:	4f 91       	pop	r20
    2592:	3f 91       	pop	r19
    2594:	2f 91       	pop	r18
    2596:	0f 90       	pop	r0
    2598:	0b be       	out	0x3b, r0	; 59
    259a:	0f 90       	pop	r0
    259c:	0f be       	out	0x3f, r0	; 63
    259e:	0f 90       	pop	r0
    25a0:	1f 90       	pop	r1
    25a2:	18 95       	reti

000025a4 <__vector_55>:
    25a4:	1f 92       	push	r1
    25a6:	0f 92       	push	r0
    25a8:	0f b6       	in	r0, 0x3f	; 63
    25aa:	0f 92       	push	r0
    25ac:	11 24       	eor	r1, r1
    25ae:	0b b6       	in	r0, 0x3b	; 59
    25b0:	0f 92       	push	r0
    25b2:	8f 93       	push	r24
    25b4:	9f 93       	push	r25
    25b6:	ef 93       	push	r30
    25b8:	ff 93       	push	r31
    25ba:	90 91 e8 05 	lds	r25, 0x05E8	; 0x8005e8 <UART3_TxHead>
    25be:	80 91 e7 05 	lds	r24, 0x05E7	; 0x8005e7 <UART3_TxTail>
    25c2:	98 17       	cp	r25, r24
    25c4:	89 f0       	breq	.+34     	; 0x25e8 <__vector_55+0x44>
    25c6:	80 91 e7 05 	lds	r24, 0x05E7	; 0x8005e7 <UART3_TxTail>
    25ca:	90 e0       	ldi	r25, 0x00	; 0
    25cc:	01 96       	adiw	r24, 0x01	; 1
    25ce:	8f 77       	andi	r24, 0x7F	; 127
    25d0:	99 27       	eor	r25, r25
    25d2:	80 93 e7 05 	sts	0x05E7, r24	; 0x8005e7 <UART3_TxTail>
    25d6:	fc 01       	movw	r30, r24
    25d8:	e7 59       	subi	r30, 0x97	; 151
    25da:	f9 4f       	sbci	r31, 0xF9	; 249
    25dc:	80 81       	ld	r24, Z
    25de:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    25e2:	10 92 e0 05 	sts	0x05E0, r1	; 0x8005e0 <UART3_Transmission_end>
    25e6:	08 c0       	rjmp	.+16     	; 0x25f8 <__vector_55+0x54>
    25e8:	e1 e3       	ldi	r30, 0x31	; 49
    25ea:	f1 e0       	ldi	r31, 0x01	; 1
    25ec:	80 81       	ld	r24, Z
    25ee:	8f 7d       	andi	r24, 0xDF	; 223
    25f0:	80 83       	st	Z, r24
    25f2:	81 e0       	ldi	r24, 0x01	; 1
    25f4:	80 93 e0 05 	sts	0x05E0, r24	; 0x8005e0 <UART3_Transmission_end>
    25f8:	ff 91       	pop	r31
    25fa:	ef 91       	pop	r30
    25fc:	9f 91       	pop	r25
    25fe:	8f 91       	pop	r24
    2600:	0f 90       	pop	r0
    2602:	0b be       	out	0x3b, r0	; 59
    2604:	0f 90       	pop	r0
    2606:	0f be       	out	0x3f, r0	; 63
    2608:	0f 90       	pop	r0
    260a:	1f 90       	pop	r1
    260c:	18 95       	reti

0000260e <UART3_init>:
    260e:	0f 93       	push	r16
    2610:	1f 93       	push	r17
    2612:	8b 01       	movw	r16, r22
    2614:	9c 01       	movw	r18, r24
    2616:	f8 94       	cli
    2618:	10 92 e8 05 	sts	0x05E8, r1	; 0x8005e8 <UART3_TxHead>
    261c:	10 92 e7 05 	sts	0x05E7, r1	; 0x8005e7 <UART3_TxTail>
    2620:	10 92 e6 05 	sts	0x05E6, r1	; 0x8005e6 <UART3_RxHead>
    2624:	10 92 e5 05 	sts	0x05E5, r1	; 0x8005e5 <UART3_RxTail>
    2628:	78 94       	sei
    262a:	dc 01       	movw	r26, r24
    262c:	cb 01       	movw	r24, r22
    262e:	80 58       	subi	r24, 0x80	; 128
    2630:	9b 47       	sbci	r25, 0x7B	; 123
    2632:	a1 4e       	sbci	r26, 0xE1	; 225
    2634:	bf 4f       	sbci	r27, 0xFF	; 255
    2636:	88 0f       	add	r24, r24
    2638:	99 1f       	adc	r25, r25
    263a:	aa 1f       	adc	r26, r26
    263c:	bb 1f       	adc	r27, r27
    263e:	88 0f       	add	r24, r24
    2640:	99 1f       	adc	r25, r25
    2642:	aa 1f       	adc	r26, r26
    2644:	bb 1f       	adc	r27, r27
    2646:	bc 01       	movw	r22, r24
    2648:	cd 01       	movw	r24, r26
    264a:	66 0f       	add	r22, r22
    264c:	77 1f       	adc	r23, r23
    264e:	88 1f       	adc	r24, r24
    2650:	99 1f       	adc	r25, r25
    2652:	00 0f       	add	r16, r16
    2654:	11 1f       	adc	r17, r17
    2656:	22 1f       	adc	r18, r18
    2658:	33 1f       	adc	r19, r19
    265a:	00 0f       	add	r16, r16
    265c:	11 1f       	adc	r17, r17
    265e:	22 1f       	adc	r18, r18
    2660:	33 1f       	adc	r19, r19
    2662:	a9 01       	movw	r20, r18
    2664:	98 01       	movw	r18, r16
    2666:	22 0f       	add	r18, r18
    2668:	33 1f       	adc	r19, r19
    266a:	44 1f       	adc	r20, r20
    266c:	55 1f       	adc	r21, r21
    266e:	22 0f       	add	r18, r18
    2670:	33 1f       	adc	r19, r19
    2672:	44 1f       	adc	r20, r20
    2674:	55 1f       	adc	r21, r21
    2676:	0e 94 66 28 	call	0x50cc	; 0x50cc <__udivmodsi4>
    267a:	ba 01       	movw	r22, r20
    267c:	a9 01       	movw	r20, r18
    267e:	41 50       	subi	r20, 0x01	; 1
    2680:	51 09       	sbc	r21, r1
    2682:	61 09       	sbc	r22, r1
    2684:	71 09       	sbc	r23, r1
    2686:	57 ff       	sbrs	r21, 7
    2688:	06 c0       	rjmp	.+12     	; 0x2696 <UART3_init+0x88>
    268a:	82 e0       	ldi	r24, 0x02	; 2
    268c:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <__TEXT_REGION_LENGTH__+0x700130>
    2690:	5f 77       	andi	r21, 0x7F	; 127
    2692:	66 27       	eor	r22, r22
    2694:	77 27       	eor	r23, r23
    2696:	bb 27       	eor	r27, r27
    2698:	a7 2f       	mov	r26, r23
    269a:	96 2f       	mov	r25, r22
    269c:	85 2f       	mov	r24, r21
    269e:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <__TEXT_REGION_LENGTH__+0x700135>
    26a2:	40 93 34 01 	sts	0x0134, r20	; 0x800134 <__TEXT_REGION_LENGTH__+0x700134>
    26a6:	88 e9       	ldi	r24, 0x98	; 152
    26a8:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <__TEXT_REGION_LENGTH__+0x700131>
    26ac:	86 e0       	ldi	r24, 0x06	; 6
    26ae:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <__TEXT_REGION_LENGTH__+0x700132>
    26b2:	1f 91       	pop	r17
    26b4:	0f 91       	pop	r16
    26b6:	08 95       	ret

000026b8 <UART3_getc>:
    26b8:	90 91 e6 05 	lds	r25, 0x05E6	; 0x8005e6 <UART3_RxHead>
    26bc:	80 91 e5 05 	lds	r24, 0x05E5	; 0x8005e5 <UART3_RxTail>
    26c0:	98 17       	cp	r25, r24
    26c2:	a1 f0       	breq	.+40     	; 0x26ec <UART3_getc+0x34>
    26c4:	80 91 e5 05 	lds	r24, 0x05E5	; 0x8005e5 <UART3_RxTail>
    26c8:	90 e0       	ldi	r25, 0x00	; 0
    26ca:	01 96       	adiw	r24, 0x01	; 1
    26cc:	8f 77       	andi	r24, 0x7F	; 127
    26ce:	99 27       	eor	r25, r25
    26d0:	80 93 e5 05 	sts	0x05E5, r24	; 0x8005e5 <UART3_RxTail>
    26d4:	fc 01       	movw	r30, r24
    26d6:	e7 51       	subi	r30, 0x17	; 23
    26d8:	fa 4f       	sbci	r31, 0xFA	; 250
    26da:	20 81       	ld	r18, Z
    26dc:	80 91 e4 05 	lds	r24, 0x05E4	; 0x8005e4 <UART3_LastRxError>
    26e0:	90 e0       	ldi	r25, 0x00	; 0
    26e2:	98 2f       	mov	r25, r24
    26e4:	88 27       	eor	r24, r24
    26e6:	82 0f       	add	r24, r18
    26e8:	91 1d       	adc	r25, r1
    26ea:	08 95       	ret
    26ec:	80 e0       	ldi	r24, 0x00	; 0
    26ee:	91 e0       	ldi	r25, 0x01	; 1
    26f0:	08 95       	ret

000026f2 <UART3_peek>:
    26f2:	f8 94       	cli
    26f4:	90 91 e6 05 	lds	r25, 0x05E6	; 0x8005e6 <UART3_RxHead>
    26f8:	80 91 e5 05 	lds	r24, 0x05E5	; 0x8005e5 <UART3_RxTail>
    26fc:	98 13       	cpse	r25, r24
    26fe:	04 c0       	rjmp	.+8      	; 0x2708 <UART3_peek+0x16>
    2700:	78 94       	sei
    2702:	80 e0       	ldi	r24, 0x00	; 0
    2704:	91 e0       	ldi	r25, 0x01	; 1
    2706:	08 95       	ret
    2708:	78 94       	sei
    270a:	e0 91 e5 05 	lds	r30, 0x05E5	; 0x8005e5 <UART3_RxTail>
    270e:	f0 e0       	ldi	r31, 0x00	; 0
    2710:	31 96       	adiw	r30, 0x01	; 1
    2712:	ef 77       	andi	r30, 0x7F	; 127
    2714:	ff 27       	eor	r31, r31
    2716:	e7 51       	subi	r30, 0x17	; 23
    2718:	fa 4f       	sbci	r31, 0xFA	; 250
    271a:	20 81       	ld	r18, Z
    271c:	80 91 e4 05 	lds	r24, 0x05E4	; 0x8005e4 <UART3_LastRxError>
    2720:	90 e0       	ldi	r25, 0x00	; 0
    2722:	98 2f       	mov	r25, r24
    2724:	88 27       	eor	r24, r24
    2726:	82 0f       	add	r24, r18
    2728:	91 1d       	adc	r25, r1
    272a:	08 95       	ret

0000272c <UART3_putc>:
    272c:	40 91 e8 05 	lds	r20, 0x05E8	; 0x8005e8 <UART3_TxHead>
    2730:	50 e0       	ldi	r21, 0x00	; 0
    2732:	4f 5f       	subi	r20, 0xFF	; 255
    2734:	5f 4f       	sbci	r21, 0xFF	; 255
    2736:	4f 77       	andi	r20, 0x7F	; 127
    2738:	55 27       	eor	r21, r21
    273a:	20 91 e7 05 	lds	r18, 0x05E7	; 0x8005e7 <UART3_TxTail>
    273e:	30 e0       	ldi	r19, 0x00	; 0
    2740:	24 17       	cp	r18, r20
    2742:	35 07       	cpc	r19, r21
    2744:	d1 f3       	breq	.-12     	; 0x273a <UART3_putc+0xe>
    2746:	fa 01       	movw	r30, r20
    2748:	e7 59       	subi	r30, 0x97	; 151
    274a:	f9 4f       	sbci	r31, 0xF9	; 249
    274c:	80 83       	st	Z, r24
    274e:	40 93 e8 05 	sts	0x05E8, r20	; 0x8005e8 <UART3_TxHead>
    2752:	e1 e3       	ldi	r30, 0x31	; 49
    2754:	f1 e0       	ldi	r31, 0x01	; 1
    2756:	80 81       	ld	r24, Z
    2758:	80 62       	ori	r24, 0x20	; 32
    275a:	80 83       	st	Z, r24
    275c:	08 95       	ret

0000275e <UART3_puts>:
Purpose:  transmit string to UART3
Input:    string to be transmitted
Returns:  none
**************************************************************************/
void UART3_puts(const char *s)
{
    275e:	cf 93       	push	r28
    2760:	df 93       	push	r29
    2762:	ec 01       	movw	r28, r24
	while (*s) {
    2764:	88 81       	ld	r24, Y
    2766:	88 23       	and	r24, r24
    2768:	29 f0       	breq	.+10     	; 0x2774 <UART3_puts+0x16>
    276a:	21 96       	adiw	r28, 0x01	; 1
		UART3_putc(*s++);
    276c:	df df       	rcall	.-66     	; 0x272c <UART3_putc>
Input:    string to be transmitted
Returns:  none
**************************************************************************/
void UART3_puts(const char *s)
{
	while (*s) {
    276e:	89 91       	ld	r24, Y+
    2770:	81 11       	cpse	r24, r1
    2772:	fc cf       	rjmp	.-8      	; 0x276c <UART3_puts+0xe>
		UART3_putc(*s++);
	}

} /* UART3_puts */
    2774:	df 91       	pop	r29
    2776:	cf 91       	pop	r28
    2778:	08 95       	ret

0000277a <UART3_puts_p>:
Purpose:  transmit string from program memory to UART3
Input:    program memory string to be transmitted
Returns:  none
**************************************************************************/
void UART3_puts_p(const char *progmem_s)
{
    277a:	cf 93       	push	r28
    277c:	df 93       	push	r29
	register char c;

	while ((c = pgm_read_byte(progmem_s++))) {
    277e:	ec 01       	movw	r28, r24
    2780:	21 96       	adiw	r28, 0x01	; 1
    2782:	fc 01       	movw	r30, r24
    2784:	84 91       	lpm	r24, Z
    2786:	88 23       	and	r24, r24
    2788:	31 f0       	breq	.+12     	; 0x2796 <UART3_puts_p+0x1c>
		UART3_putc(c);
    278a:	d0 df       	rcall	.-96     	; 0x272c <UART3_putc>
**************************************************************************/
void UART3_puts_p(const char *progmem_s)
{
	register char c;

	while ((c = pgm_read_byte(progmem_s++))) {
    278c:	fe 01       	movw	r30, r28
    278e:	84 91       	lpm	r24, Z
    2790:	21 96       	adiw	r28, 0x01	; 1
    2792:	81 11       	cpse	r24, r1
    2794:	fa cf       	rjmp	.-12     	; 0x278a <UART3_puts_p+0x10>
		UART3_putc(c);
	}

} /* UART3_puts_p */
    2796:	df 91       	pop	r29
    2798:	cf 91       	pop	r28
    279a:	08 95       	ret

0000279c <UART3_available>:
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    279c:	f8 94       	cli
uint16_t UART3_available(void)
{
	uint16_t ret;
	
	ATOMIC_BLOCK(ATOMIC_FORCEON) {
		ret = (UART_RX3_BUFFER_SIZE + UART3_RxHead - UART3_RxTail) & UART_RX3_BUFFER_MASK;
    279e:	80 91 e6 05 	lds	r24, 0x05E6	; 0x8005e6 <UART3_RxHead>
    27a2:	20 91 e5 05 	lds	r18, 0x05E5	; 0x8005e5 <UART3_RxTail>
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
    27a6:	78 94       	sei
    27a8:	90 e0       	ldi	r25, 0x00	; 0
    27aa:	80 58       	subi	r24, 0x80	; 128
    27ac:	9f 4f       	sbci	r25, 0xFF	; 255
    27ae:	82 1b       	sub	r24, r18
    27b0:	91 09       	sbc	r25, r1
	}
	return ret;
} /* UART3_available */
    27b2:	8f 77       	andi	r24, 0x7F	; 127
    27b4:	99 27       	eor	r25, r25
    27b6:	08 95       	ret

000027b8 <UART3_flush>:
void UART3_flush(void)
{
//	ATOMIC_BLOCK(ATOMIC_FORCEON) {
//		UART3_RxHead = UART3_RxTail;
//	} commented by mohab
	while(0 == UART3_Transmission_end);
    27b8:	80 91 e0 05 	lds	r24, 0x05E0	; 0x8005e0 <UART3_Transmission_end>
    27bc:	88 23       	and	r24, r24
    27be:	e1 f3       	breq	.-8      	; 0x27b8 <UART3_flush>
} /* UART3_flush */
    27c0:	08 95       	ret

000027c2 <RTE_drum_init>:


/*static uint16_t Conveyor_speed;*/
static uint16_t Drum_speed = 0;

void RTE_drum_init(void){
    27c2:	08 95       	ret

000027c4 <RTE_get_Drum_speed>:
}


uint16_t RTE_get_Drum_speed(void){
	return Drum_speed;
}
    27c4:	80 91 f8 09 	lds	r24, 0x09F8	; 0x8009f8 <Drum_speed>
    27c8:	90 91 f9 09 	lds	r25, 0x09F9	; 0x8009f9 <Drum_speed+0x1>
    27cc:	08 95       	ret

000027ce <RTE_invertersetting_init>:
}

uint16_t RTE_get_Time_minute(void){
	xSemaphoreTake(Sema_Time_minute_handle,portMAX_DELAY);
	return Time_minute;
}
    27ce:	0f 93       	push	r16
    27d0:	03 e0       	ldi	r16, 0x03	; 3
    27d2:	2b ea       	ldi	r18, 0xAB	; 171
    27d4:	3a e0       	ldi	r19, 0x0A	; 10
    27d6:	40 e0       	ldi	r20, 0x00	; 0
    27d8:	50 e0       	ldi	r21, 0x00	; 0
    27da:	60 e0       	ldi	r22, 0x00	; 0
    27dc:	81 e0       	ldi	r24, 0x01	; 1
    27de:	40 d5       	rcall	.+2688   	; 0x3260 <xQueueGenericCreateStatic>
    27e0:	90 93 cb 0a 	sts	0x0ACB, r25	; 0x800acb <Sema_Gear_ratio_handle+0x1>
    27e4:	80 93 ca 0a 	sts	0x0ACA, r24	; 0x800aca <Sema_Gear_ratio_handle>
    27e8:	28 e8       	ldi	r18, 0x88	; 136
    27ea:	3a e0       	ldi	r19, 0x0A	; 10
    27ec:	40 e0       	ldi	r20, 0x00	; 0
    27ee:	50 e0       	ldi	r21, 0x00	; 0
    27f0:	60 e0       	ldi	r22, 0x00	; 0
    27f2:	81 e0       	ldi	r24, 0x01	; 1
    27f4:	35 d5       	rcall	.+2666   	; 0x3260 <xQueueGenericCreateStatic>
    27f6:	90 93 a8 0a 	sts	0x0AA8, r25	; 0x800aa8 <Sema_RPM_max_handle+0x1>
    27fa:	80 93 a7 0a 	sts	0x0AA7, r24	; 0x800aa7 <Sema_RPM_max_handle>
    27fe:	25 e6       	ldi	r18, 0x65	; 101
    2800:	3a e0       	ldi	r19, 0x0A	; 10
    2802:	40 e0       	ldi	r20, 0x00	; 0
    2804:	50 e0       	ldi	r21, 0x00	; 0
    2806:	60 e0       	ldi	r22, 0x00	; 0
    2808:	81 e0       	ldi	r24, 0x01	; 1
    280a:	2a d5       	rcall	.+2644   	; 0x3260 <xQueueGenericCreateStatic>
    280c:	90 93 85 0a 	sts	0x0A85, r25	; 0x800a85 <Sema_Conveyor_length_handle+0x1>
    2810:	80 93 84 0a 	sts	0x0A84, r24	; 0x800a84 <Sema_Conveyor_length_handle>
    2814:	22 e4       	ldi	r18, 0x42	; 66
    2816:	3a e0       	ldi	r19, 0x0A	; 10
    2818:	40 e0       	ldi	r20, 0x00	; 0
    281a:	50 e0       	ldi	r21, 0x00	; 0
    281c:	60 e0       	ldi	r22, 0x00	; 0
    281e:	81 e0       	ldi	r24, 0x01	; 1
    2820:	1f d5       	rcall	.+2622   	; 0x3260 <xQueueGenericCreateStatic>
    2822:	90 93 62 0a 	sts	0x0A62, r25	; 0x800a62 <Sema_Driver_diameter_handle+0x1>
    2826:	80 93 61 0a 	sts	0x0A61, r24	; 0x800a61 <Sema_Driver_diameter_handle>
    282a:	2f e1       	ldi	r18, 0x1F	; 31
    282c:	3a e0       	ldi	r19, 0x0A	; 10
    282e:	40 e0       	ldi	r20, 0x00	; 0
    2830:	50 e0       	ldi	r21, 0x00	; 0
    2832:	60 e0       	ldi	r22, 0x00	; 0
    2834:	81 e0       	ldi	r24, 0x01	; 1
    2836:	14 d5       	rcall	.+2600   	; 0x3260 <xQueueGenericCreateStatic>
    2838:	90 93 3f 0a 	sts	0x0A3F, r25	; 0x800a3f <Sema_Time_minute_handle+0x1>
    283c:	80 93 3e 0a 	sts	0x0A3E, r24	; 0x800a3e <Sema_Time_minute_handle>
    2840:	2c ef       	ldi	r18, 0xFC	; 252
    2842:	39 e0       	ldi	r19, 0x09	; 9
    2844:	40 e0       	ldi	r20, 0x00	; 0
    2846:	50 e0       	ldi	r21, 0x00	; 0
    2848:	60 e0       	ldi	r22, 0x00	; 0
    284a:	81 e0       	ldi	r24, 0x01	; 1
    284c:	09 d5       	rcall	.+2578   	; 0x3260 <xQueueGenericCreateStatic>
    284e:	90 93 1c 0a 	sts	0x0A1C, r25	; 0x800a1c <Sema_Time_second_handle+0x1>
    2852:	80 93 1b 0a 	sts	0x0A1B, r24	; 0x800a1b <Sema_Time_second_handle>
    2856:	0f 91       	pop	r16
    2858:	08 95       	ret

0000285a <RTE_set_Gear_ratio>:
    285a:	90 93 aa 0a 	sts	0x0AAA, r25	; 0x800aaa <Gear_ratio+0x1>
    285e:	80 93 a9 0a 	sts	0x0AA9, r24	; 0x800aa9 <Gear_ratio>
    2862:	20 e0       	ldi	r18, 0x00	; 0
    2864:	40 e0       	ldi	r20, 0x00	; 0
    2866:	50 e0       	ldi	r21, 0x00	; 0
    2868:	60 e0       	ldi	r22, 0x00	; 0
    286a:	70 e0       	ldi	r23, 0x00	; 0
    286c:	80 91 ca 0a 	lds	r24, 0x0ACA	; 0x800aca <Sema_Gear_ratio_handle>
    2870:	90 91 cb 0a 	lds	r25, 0x0ACB	; 0x800acb <Sema_Gear_ratio_handle+0x1>
    2874:	0a c5       	rjmp	.+2580   	; 0x328a <xQueueGenericSend>
    2876:	08 95       	ret

00002878 <RTE_set_RPM_max>:
    2878:	90 93 87 0a 	sts	0x0A87, r25	; 0x800a87 <RPM_max+0x1>
    287c:	80 93 86 0a 	sts	0x0A86, r24	; 0x800a86 <RPM_max>
    2880:	20 e0       	ldi	r18, 0x00	; 0
    2882:	40 e0       	ldi	r20, 0x00	; 0
    2884:	50 e0       	ldi	r21, 0x00	; 0
    2886:	60 e0       	ldi	r22, 0x00	; 0
    2888:	70 e0       	ldi	r23, 0x00	; 0
    288a:	80 91 a7 0a 	lds	r24, 0x0AA7	; 0x800aa7 <Sema_RPM_max_handle>
    288e:	90 91 a8 0a 	lds	r25, 0x0AA8	; 0x800aa8 <Sema_RPM_max_handle+0x1>
    2892:	fb c4       	rjmp	.+2550   	; 0x328a <xQueueGenericSend>
    2894:	08 95       	ret

00002896 <RTE_set_Conveyor_length>:
    2896:	90 93 64 0a 	sts	0x0A64, r25	; 0x800a64 <Conveyor_length+0x1>
    289a:	80 93 63 0a 	sts	0x0A63, r24	; 0x800a63 <Conveyor_length>
    289e:	20 e0       	ldi	r18, 0x00	; 0
    28a0:	40 e0       	ldi	r20, 0x00	; 0
    28a2:	50 e0       	ldi	r21, 0x00	; 0
    28a4:	60 e0       	ldi	r22, 0x00	; 0
    28a6:	70 e0       	ldi	r23, 0x00	; 0
    28a8:	80 91 84 0a 	lds	r24, 0x0A84	; 0x800a84 <Sema_Conveyor_length_handle>
    28ac:	90 91 85 0a 	lds	r25, 0x0A85	; 0x800a85 <Sema_Conveyor_length_handle+0x1>
    28b0:	ec c4       	rjmp	.+2520   	; 0x328a <xQueueGenericSend>
    28b2:	08 95       	ret

000028b4 <RTE_set_Driver_diameter>:
    28b4:	90 93 41 0a 	sts	0x0A41, r25	; 0x800a41 <Driver_diameter+0x1>
    28b8:	80 93 40 0a 	sts	0x0A40, r24	; 0x800a40 <Driver_diameter>
    28bc:	20 e0       	ldi	r18, 0x00	; 0
    28be:	40 e0       	ldi	r20, 0x00	; 0
    28c0:	50 e0       	ldi	r21, 0x00	; 0
    28c2:	60 e0       	ldi	r22, 0x00	; 0
    28c4:	70 e0       	ldi	r23, 0x00	; 0
    28c6:	80 91 61 0a 	lds	r24, 0x0A61	; 0x800a61 <Sema_Driver_diameter_handle>
    28ca:	90 91 62 0a 	lds	r25, 0x0A62	; 0x800a62 <Sema_Driver_diameter_handle+0x1>
    28ce:	dd c4       	rjmp	.+2490   	; 0x328a <xQueueGenericSend>
    28d0:	08 95       	ret

000028d2 <RTE_set_Time_minute>:
    28d2:	90 93 1e 0a 	sts	0x0A1E, r25	; 0x800a1e <Time_minute+0x1>
    28d6:	80 93 1d 0a 	sts	0x0A1D, r24	; 0x800a1d <Time_minute>
    28da:	20 e0       	ldi	r18, 0x00	; 0
    28dc:	40 e0       	ldi	r20, 0x00	; 0
    28de:	50 e0       	ldi	r21, 0x00	; 0
    28e0:	60 e0       	ldi	r22, 0x00	; 0
    28e2:	70 e0       	ldi	r23, 0x00	; 0
    28e4:	80 91 3e 0a 	lds	r24, 0x0A3E	; 0x800a3e <Sema_Time_minute_handle>
    28e8:	90 91 3f 0a 	lds	r25, 0x0A3F	; 0x800a3f <Sema_Time_minute_handle+0x1>
    28ec:	ce c4       	rjmp	.+2460   	; 0x328a <xQueueGenericSend>
    28ee:	08 95       	ret

000028f0 <RTE_set_Time_second>:

void RTE_set_Time_second(uint16_t u16Timesecond){
	Time_second = u16Timesecond;
    28f0:	90 93 fb 09 	sts	0x09FB, r25	; 0x8009fb <Time_second+0x1>
    28f4:	80 93 fa 09 	sts	0x09FA, r24	; 0x8009fa <Time_second>
	xSemaphoreGive(Sema_Time_second_handle);
    28f8:	20 e0       	ldi	r18, 0x00	; 0
    28fa:	40 e0       	ldi	r20, 0x00	; 0
    28fc:	50 e0       	ldi	r21, 0x00	; 0
    28fe:	60 e0       	ldi	r22, 0x00	; 0
    2900:	70 e0       	ldi	r23, 0x00	; 0
    2902:	80 91 1b 0a 	lds	r24, 0x0A1B	; 0x800a1b <Sema_Time_second_handle>
    2906:	90 91 1c 0a 	lds	r25, 0x0A1C	; 0x800a1c <Sema_Time_second_handle+0x1>
    290a:	bf c4       	rjmp	.+2430   	; 0x328a <xQueueGenericSend>
    290c:	08 95       	ret

0000290e <RTE_levels_init>:

uint16_t RTE_get_tank_level(void)
{
	xSemaphoreTake(Sema_tank_level_handle,portMAX_DELAY);
	return tank_level ;
}
    290e:	0f 93       	push	r16
    2910:	03 e0       	ldi	r16, 0x03	; 3
    2912:	2f ee       	ldi	r18, 0xEF	; 239
    2914:	3a e0       	ldi	r19, 0x0A	; 10
    2916:	40 e0       	ldi	r20, 0x00	; 0
    2918:	50 e0       	ldi	r21, 0x00	; 0
    291a:	60 e0       	ldi	r22, 0x00	; 0
    291c:	81 e0       	ldi	r24, 0x01	; 1
    291e:	a0 d4       	rcall	.+2368   	; 0x3260 <xQueueGenericCreateStatic>
    2920:	90 93 0f 0b 	sts	0x0B0F, r25	; 0x800b0f <Sema_tank_level_handle+0x1>
    2924:	80 93 0e 0b 	sts	0x0B0E, r24	; 0x800b0e <Sema_tank_level_handle>
    2928:	2c ec       	ldi	r18, 0xCC	; 204
    292a:	3a e0       	ldi	r19, 0x0A	; 10
    292c:	40 e0       	ldi	r20, 0x00	; 0
    292e:	50 e0       	ldi	r21, 0x00	; 0
    2930:	60 e0       	ldi	r22, 0x00	; 0
    2932:	81 e0       	ldi	r24, 0x01	; 1
    2934:	95 d4       	rcall	.+2346   	; 0x3260 <xQueueGenericCreateStatic>
    2936:	90 93 ec 0a 	sts	0x0AEC, r25	; 0x800aec <Sema_blancher_level_handle+0x1>
    293a:	80 93 eb 0a 	sts	0x0AEB, r24	; 0x800aeb <Sema_blancher_level_handle>
    293e:	0f 91       	pop	r16
    2940:	08 95       	ret

00002942 <RTE_set_tank_level>:
    2942:	90 93 ee 0a 	sts	0x0AEE, r25	; 0x800aee <tank_level+0x1>
    2946:	80 93 ed 0a 	sts	0x0AED, r24	; 0x800aed <tank_level>
    294a:	20 e0       	ldi	r18, 0x00	; 0
    294c:	40 e0       	ldi	r20, 0x00	; 0
    294e:	50 e0       	ldi	r21, 0x00	; 0
    2950:	60 e0       	ldi	r22, 0x00	; 0
    2952:	70 e0       	ldi	r23, 0x00	; 0
    2954:	80 91 0e 0b 	lds	r24, 0x0B0E	; 0x800b0e <Sema_tank_level_handle>
    2958:	90 91 0f 0b 	lds	r25, 0x0B0F	; 0x800b0f <Sema_tank_level_handle+0x1>
    295c:	96 c4       	rjmp	.+2348   	; 0x328a <xQueueGenericSend>
    295e:	08 95       	ret

00002960 <RTE_set_blancher_level>:

void RTE_set_blancher_level(uint16_t u16blancher_level)
{
	tank_level = u16blancher_level ;
    2960:	90 93 ee 0a 	sts	0x0AEE, r25	; 0x800aee <tank_level+0x1>
    2964:	80 93 ed 0a 	sts	0x0AED, r24	; 0x800aed <tank_level>
	xSemaphoreGive(Sema_blancher_level_handle);
    2968:	20 e0       	ldi	r18, 0x00	; 0
    296a:	40 e0       	ldi	r20, 0x00	; 0
    296c:	50 e0       	ldi	r21, 0x00	; 0
    296e:	60 e0       	ldi	r22, 0x00	; 0
    2970:	70 e0       	ldi	r23, 0x00	; 0
    2972:	80 91 eb 0a 	lds	r24, 0x0AEB	; 0x800aeb <Sema_blancher_level_handle>
    2976:	90 91 ec 0a 	lds	r25, 0x0AEC	; 0x800aec <Sema_blancher_level_handle+0x1>
    297a:	87 c4       	rjmp	.+2318   	; 0x328a <xQueueGenericSend>
    297c:	08 95       	ret

0000297e <RTE_init>:
#include "RTE_levels.h"
#include "RTE_temperature.h"
#include "RTE_main.h"

void RTE_init(void){
	RTE_drum_init();
    297e:	21 df       	rcall	.-446    	; 0x27c2 <RTE_drum_init>
	RTE_invertersetting_init();
    2980:	26 df       	rcall	.-436    	; 0x27ce <RTE_invertersetting_init>
	RTE_operations_init();
    2982:	03 d0       	rcall	.+6      	; 0x298a <RTE_operations_init>
	RTE_levels_init();
    2984:	c4 df       	rcall	.-120    	; 0x290e <RTE_levels_init>
	RTE_temperature_init();
    2986:	6d c0       	rjmp	.+218    	; 0x2a62 <RTE_temperature_init>
    2988:	08 95       	ret

0000298a <RTE_operations_init>:
}

uint16_t RTE_get_Wash_Operation(void){
	xSemaphoreTake(Sema_Wash_Operation_handle,portMAX_DELAY);
	return Wash_Operation;
}
    298a:	0f 93       	push	r16
    298c:	03 e0       	ldi	r16, 0x03	; 3
    298e:	2b e7       	ldi	r18, 0x7B	; 123
    2990:	3b e0       	ldi	r19, 0x0B	; 11
    2992:	40 e0       	ldi	r20, 0x00	; 0
    2994:	50 e0       	ldi	r21, 0x00	; 0
    2996:	60 e0       	ldi	r22, 0x00	; 0
    2998:	81 e0       	ldi	r24, 0x01	; 1
    299a:	62 d4       	rcall	.+2244   	; 0x3260 <xQueueGenericCreateStatic>
    299c:	90 93 9b 0b 	sts	0x0B9B, r25	; 0x800b9b <Sema_System_on_handle+0x1>
    29a0:	80 93 9a 0b 	sts	0x0B9A, r24	; 0x800b9a <Sema_System_on_handle>
    29a4:	28 e5       	ldi	r18, 0x58	; 88
    29a6:	3b e0       	ldi	r19, 0x0B	; 11
    29a8:	40 e0       	ldi	r20, 0x00	; 0
    29aa:	50 e0       	ldi	r21, 0x00	; 0
    29ac:	60 e0       	ldi	r22, 0x00	; 0
    29ae:	81 e0       	ldi	r24, 0x01	; 1
    29b0:	57 d4       	rcall	.+2222   	; 0x3260 <xQueueGenericCreateStatic>
    29b2:	90 93 78 0b 	sts	0x0B78, r25	; 0x800b78 <Sema_Start_blancher_Operation_handle+0x1>
    29b6:	80 93 77 0b 	sts	0x0B77, r24	; 0x800b77 <Sema_Start_blancher_Operation_handle>
    29ba:	25 e3       	ldi	r18, 0x35	; 53
    29bc:	3b e0       	ldi	r19, 0x0B	; 11
    29be:	40 e0       	ldi	r20, 0x00	; 0
    29c0:	50 e0       	ldi	r21, 0x00	; 0
    29c2:	60 e0       	ldi	r22, 0x00	; 0
    29c4:	81 e0       	ldi	r24, 0x01	; 1
    29c6:	4c d4       	rcall	.+2200   	; 0x3260 <xQueueGenericCreateStatic>
    29c8:	90 93 55 0b 	sts	0x0B55, r25	; 0x800b55 <Sema_Wash_Operation_handle+0x1>
    29cc:	80 93 54 0b 	sts	0x0B54, r24	; 0x800b54 <Sema_Wash_Operation_handle>
    29d0:	22 e1       	ldi	r18, 0x12	; 18
    29d2:	3b e0       	ldi	r19, 0x0B	; 11
    29d4:	40 e0       	ldi	r20, 0x00	; 0
    29d6:	50 e0       	ldi	r21, 0x00	; 0
    29d8:	60 e0       	ldi	r22, 0x00	; 0
    29da:	81 e0       	ldi	r24, 0x01	; 1
    29dc:	41 d4       	rcall	.+2178   	; 0x3260 <xQueueGenericCreateStatic>
    29de:	90 93 32 0b 	sts	0x0B32, r25	; 0x800b32 <Sema_Tank_Calibration_Operation_handle+0x1>
    29e2:	80 93 31 0b 	sts	0x0B31, r24	; 0x800b31 <Sema_Tank_Calibration_Operation_handle>
    29e6:	0f 91       	pop	r16
    29e8:	08 95       	ret

000029ea <RTE_set_System_on>:
    29ea:	90 93 7a 0b 	sts	0x0B7A, r25	; 0x800b7a <System_on+0x1>
    29ee:	80 93 79 0b 	sts	0x0B79, r24	; 0x800b79 <System_on>
    29f2:	20 e0       	ldi	r18, 0x00	; 0
    29f4:	40 e0       	ldi	r20, 0x00	; 0
    29f6:	50 e0       	ldi	r21, 0x00	; 0
    29f8:	60 e0       	ldi	r22, 0x00	; 0
    29fa:	70 e0       	ldi	r23, 0x00	; 0
    29fc:	80 91 9a 0b 	lds	r24, 0x0B9A	; 0x800b9a <Sema_System_on_handle>
    2a00:	90 91 9b 0b 	lds	r25, 0x0B9B	; 0x800b9b <Sema_System_on_handle+0x1>
    2a04:	42 c4       	rjmp	.+2180   	; 0x328a <xQueueGenericSend>
    2a06:	08 95       	ret

00002a08 <RTE_set_Start_blancher_Operation>:
    2a08:	90 93 57 0b 	sts	0x0B57, r25	; 0x800b57 <Start_blancher_Operation+0x1>
    2a0c:	80 93 56 0b 	sts	0x0B56, r24	; 0x800b56 <Start_blancher_Operation>
    2a10:	20 e0       	ldi	r18, 0x00	; 0
    2a12:	40 e0       	ldi	r20, 0x00	; 0
    2a14:	50 e0       	ldi	r21, 0x00	; 0
    2a16:	60 e0       	ldi	r22, 0x00	; 0
    2a18:	70 e0       	ldi	r23, 0x00	; 0
    2a1a:	80 91 77 0b 	lds	r24, 0x0B77	; 0x800b77 <Sema_Start_blancher_Operation_handle>
    2a1e:	90 91 78 0b 	lds	r25, 0x0B78	; 0x800b78 <Sema_Start_blancher_Operation_handle+0x1>
    2a22:	33 c4       	rjmp	.+2150   	; 0x328a <xQueueGenericSend>
    2a24:	08 95       	ret

00002a26 <RTE_set_Wash_Operation>:
    2a26:	90 93 34 0b 	sts	0x0B34, r25	; 0x800b34 <Wash_Operation+0x1>
    2a2a:	80 93 33 0b 	sts	0x0B33, r24	; 0x800b33 <Wash_Operation>
    2a2e:	20 e0       	ldi	r18, 0x00	; 0
    2a30:	40 e0       	ldi	r20, 0x00	; 0
    2a32:	50 e0       	ldi	r21, 0x00	; 0
    2a34:	60 e0       	ldi	r22, 0x00	; 0
    2a36:	70 e0       	ldi	r23, 0x00	; 0
    2a38:	80 91 54 0b 	lds	r24, 0x0B54	; 0x800b54 <Sema_Wash_Operation_handle>
    2a3c:	90 91 55 0b 	lds	r25, 0x0B55	; 0x800b55 <Sema_Wash_Operation_handle+0x1>
    2a40:	24 c4       	rjmp	.+2120   	; 0x328a <xQueueGenericSend>
    2a42:	08 95       	ret

00002a44 <RTE_set_Tank_Calibration_Operation>:




void RTE_set_Tank_Calibration_Operation(uint16_t u16Tank_Calibration_Operation){
	Tank_Calibration_Operation = u16Tank_Calibration_Operation;
    2a44:	90 93 11 0b 	sts	0x0B11, r25	; 0x800b11 <Tank_Calibration_Operation+0x1>
    2a48:	80 93 10 0b 	sts	0x0B10, r24	; 0x800b10 <Tank_Calibration_Operation>
	xSemaphoreGive(Sema_Tank_Calibration_Operation_handle);
    2a4c:	20 e0       	ldi	r18, 0x00	; 0
    2a4e:	40 e0       	ldi	r20, 0x00	; 0
    2a50:	50 e0       	ldi	r21, 0x00	; 0
    2a52:	60 e0       	ldi	r22, 0x00	; 0
    2a54:	70 e0       	ldi	r23, 0x00	; 0
    2a56:	80 91 31 0b 	lds	r24, 0x0B31	; 0x800b31 <Sema_Tank_Calibration_Operation_handle>
    2a5a:	90 91 32 0b 	lds	r25, 0x0B32	; 0x800b32 <Sema_Tank_Calibration_Operation_handle+0x1>
    2a5e:	15 c4       	rjmp	.+2090   	; 0x328a <xQueueGenericSend>
    2a60:	08 95       	ret

00002a62 <RTE_temperature_init>:
}

uint16_t RTE_get_Negative_offset_temperature(void){
	xSemaphoreTake(Sema_Negative_offset_temp_handle,portMAX_DELAY);
	return Negative_offset_temp;
}
    2a62:	0f 93       	push	r16
    2a64:	03 e0       	ldi	r16, 0x03	; 3
    2a66:	22 e7       	ldi	r18, 0x72	; 114
    2a68:	3c e0       	ldi	r19, 0x0C	; 12
    2a6a:	40 e0       	ldi	r20, 0x00	; 0
    2a6c:	50 e0       	ldi	r21, 0x00	; 0
    2a6e:	60 e0       	ldi	r22, 0x00	; 0
    2a70:	81 e0       	ldi	r24, 0x01	; 1
    2a72:	f6 d3       	rcall	.+2028   	; 0x3260 <xQueueGenericCreateStatic>
    2a74:	90 93 92 0c 	sts	0x0C92, r25	; 0x800c92 <Sema_Sleep_temp_handle+0x1>
    2a78:	80 93 91 0c 	sts	0x0C91, r24	; 0x800c91 <Sema_Sleep_temp_handle>
    2a7c:	2f e4       	ldi	r18, 0x4F	; 79
    2a7e:	3c e0       	ldi	r19, 0x0C	; 12
    2a80:	40 e0       	ldi	r20, 0x00	; 0
    2a82:	50 e0       	ldi	r21, 0x00	; 0
    2a84:	60 e0       	ldi	r22, 0x00	; 0
    2a86:	81 e0       	ldi	r24, 0x01	; 1
    2a88:	eb d3       	rcall	.+2006   	; 0x3260 <xQueueGenericCreateStatic>
    2a8a:	90 93 6f 0c 	sts	0x0C6F, r25	; 0x800c6f <Sema_Set_temp_handle+0x1>
    2a8e:	80 93 6e 0c 	sts	0x0C6E, r24	; 0x800c6e <Sema_Set_temp_handle>
    2a92:	2c e2       	ldi	r18, 0x2C	; 44
    2a94:	3c e0       	ldi	r19, 0x0C	; 12
    2a96:	40 e0       	ldi	r20, 0x00	; 0
    2a98:	50 e0       	ldi	r21, 0x00	; 0
    2a9a:	60 e0       	ldi	r22, 0x00	; 0
    2a9c:	81 e0       	ldi	r24, 0x01	; 1
    2a9e:	e0 d3       	rcall	.+1984   	; 0x3260 <xQueueGenericCreateStatic>
    2aa0:	90 93 4c 0c 	sts	0x0C4C, r25	; 0x800c4c <Sema_threshold_set_temp_handle+0x1>
    2aa4:	80 93 4b 0c 	sts	0x0C4B, r24	; 0x800c4b <Sema_threshold_set_temp_handle>
    2aa8:	29 e0       	ldi	r18, 0x09	; 9
    2aaa:	3c e0       	ldi	r19, 0x0C	; 12
    2aac:	40 e0       	ldi	r20, 0x00	; 0
    2aae:	50 e0       	ldi	r21, 0x00	; 0
    2ab0:	60 e0       	ldi	r22, 0x00	; 0
    2ab2:	81 e0       	ldi	r24, 0x01	; 1
    2ab4:	d5 d3       	rcall	.+1962   	; 0x3260 <xQueueGenericCreateStatic>
    2ab6:	90 93 29 0c 	sts	0x0C29, r25	; 0x800c29 <Sema_threshold_sleep_temp_handle+0x1>
    2aba:	80 93 28 0c 	sts	0x0C28, r24	; 0x800c28 <Sema_threshold_sleep_temp_handle>
    2abe:	26 ee       	ldi	r18, 0xE6	; 230
    2ac0:	3b e0       	ldi	r19, 0x0B	; 11
    2ac2:	40 e0       	ldi	r20, 0x00	; 0
    2ac4:	50 e0       	ldi	r21, 0x00	; 0
    2ac6:	60 e0       	ldi	r22, 0x00	; 0
    2ac8:	81 e0       	ldi	r24, 0x01	; 1
    2aca:	ca d3       	rcall	.+1940   	; 0x3260 <xQueueGenericCreateStatic>
    2acc:	90 93 06 0c 	sts	0x0C06, r25	; 0x800c06 <Sema_Positive_offset_temp_handle+0x1>
    2ad0:	80 93 05 0c 	sts	0x0C05, r24	; 0x800c05 <Sema_Positive_offset_temp_handle>
    2ad4:	23 ec       	ldi	r18, 0xC3	; 195
    2ad6:	3b e0       	ldi	r19, 0x0B	; 11
    2ad8:	40 e0       	ldi	r20, 0x00	; 0
    2ada:	50 e0       	ldi	r21, 0x00	; 0
    2adc:	60 e0       	ldi	r22, 0x00	; 0
    2ade:	81 e0       	ldi	r24, 0x01	; 1
    2ae0:	bf d3       	rcall	.+1918   	; 0x3260 <xQueueGenericCreateStatic>
    2ae2:	90 93 e3 0b 	sts	0x0BE3, r25	; 0x800be3 <Sema_Negative_offset_temp_handle+0x1>
    2ae6:	80 93 e2 0b 	sts	0x0BE2, r24	; 0x800be2 <Sema_Negative_offset_temp_handle>
    2aea:	20 ea       	ldi	r18, 0xA0	; 160
    2aec:	3b e0       	ldi	r19, 0x0B	; 11
    2aee:	40 e0       	ldi	r20, 0x00	; 0
    2af0:	50 e0       	ldi	r21, 0x00	; 0
    2af2:	60 e0       	ldi	r22, 0x00	; 0
    2af4:	81 e0       	ldi	r24, 0x01	; 1
    2af6:	b4 d3       	rcall	.+1896   	; 0x3260 <xQueueGenericCreateStatic>
    2af8:	90 93 c0 0b 	sts	0x0BC0, r25	; 0x800bc0 <Sema_APP_current_temp_handle+0x1>
    2afc:	80 93 bf 0b 	sts	0x0BBF, r24	; 0x800bbf <Sema_APP_current_temp_handle>
    2b00:	0f 91       	pop	r16
    2b02:	08 95       	ret

00002b04 <RTE_set_Sleep_temperature>:
    2b04:	90 93 71 0c 	sts	0x0C71, r25	; 0x800c71 <Sleep_temp+0x1>
    2b08:	80 93 70 0c 	sts	0x0C70, r24	; 0x800c70 <Sleep_temp>
    2b0c:	20 e0       	ldi	r18, 0x00	; 0
    2b0e:	40 e0       	ldi	r20, 0x00	; 0
    2b10:	50 e0       	ldi	r21, 0x00	; 0
    2b12:	60 e0       	ldi	r22, 0x00	; 0
    2b14:	70 e0       	ldi	r23, 0x00	; 0
    2b16:	80 91 91 0c 	lds	r24, 0x0C91	; 0x800c91 <Sema_Sleep_temp_handle>
    2b1a:	90 91 92 0c 	lds	r25, 0x0C92	; 0x800c92 <Sema_Sleep_temp_handle+0x1>
    2b1e:	b5 c3       	rjmp	.+1898   	; 0x328a <xQueueGenericSend>
    2b20:	08 95       	ret

00002b22 <RTE_set_Set_temperature>:
    2b22:	90 93 4e 0c 	sts	0x0C4E, r25	; 0x800c4e <Set_temp+0x1>
    2b26:	80 93 4d 0c 	sts	0x0C4D, r24	; 0x800c4d <Set_temp>
    2b2a:	20 e0       	ldi	r18, 0x00	; 0
    2b2c:	40 e0       	ldi	r20, 0x00	; 0
    2b2e:	50 e0       	ldi	r21, 0x00	; 0
    2b30:	60 e0       	ldi	r22, 0x00	; 0
    2b32:	70 e0       	ldi	r23, 0x00	; 0
    2b34:	80 91 6e 0c 	lds	r24, 0x0C6E	; 0x800c6e <Sema_Set_temp_handle>
    2b38:	90 91 6f 0c 	lds	r25, 0x0C6F	; 0x800c6f <Sema_Set_temp_handle+0x1>
    2b3c:	a6 c3       	rjmp	.+1868   	; 0x328a <xQueueGenericSend>
    2b3e:	08 95       	ret

00002b40 <RTE_set_Threshold_set_temperature>:
    2b40:	90 93 2b 0c 	sts	0x0C2B, r25	; 0x800c2b <Threshold_set_temp+0x1>
    2b44:	80 93 2a 0c 	sts	0x0C2A, r24	; 0x800c2a <Threshold_set_temp>
    2b48:	20 e0       	ldi	r18, 0x00	; 0
    2b4a:	40 e0       	ldi	r20, 0x00	; 0
    2b4c:	50 e0       	ldi	r21, 0x00	; 0
    2b4e:	60 e0       	ldi	r22, 0x00	; 0
    2b50:	70 e0       	ldi	r23, 0x00	; 0
    2b52:	80 91 4b 0c 	lds	r24, 0x0C4B	; 0x800c4b <Sema_threshold_set_temp_handle>
    2b56:	90 91 4c 0c 	lds	r25, 0x0C4C	; 0x800c4c <Sema_threshold_set_temp_handle+0x1>
    2b5a:	97 c3       	rjmp	.+1838   	; 0x328a <xQueueGenericSend>
    2b5c:	08 95       	ret

00002b5e <RTE_set_Threshold_sleep_temperature>:
    2b5e:	90 93 08 0c 	sts	0x0C08, r25	; 0x800c08 <Threshold_sleep_temp+0x1>
    2b62:	80 93 07 0c 	sts	0x0C07, r24	; 0x800c07 <Threshold_sleep_temp>
    2b66:	20 e0       	ldi	r18, 0x00	; 0
    2b68:	40 e0       	ldi	r20, 0x00	; 0
    2b6a:	50 e0       	ldi	r21, 0x00	; 0
    2b6c:	60 e0       	ldi	r22, 0x00	; 0
    2b6e:	70 e0       	ldi	r23, 0x00	; 0
    2b70:	80 91 28 0c 	lds	r24, 0x0C28	; 0x800c28 <Sema_threshold_sleep_temp_handle>
    2b74:	90 91 29 0c 	lds	r25, 0x0C29	; 0x800c29 <Sema_threshold_sleep_temp_handle+0x1>
    2b78:	88 c3       	rjmp	.+1808   	; 0x328a <xQueueGenericSend>
    2b7a:	08 95       	ret

00002b7c <RTE_set_Positive_offset_temperature>:
    2b7c:	90 93 e5 0b 	sts	0x0BE5, r25	; 0x800be5 <Positive_offset_temp+0x1>
    2b80:	80 93 e4 0b 	sts	0x0BE4, r24	; 0x800be4 <Positive_offset_temp>
    2b84:	20 e0       	ldi	r18, 0x00	; 0
    2b86:	40 e0       	ldi	r20, 0x00	; 0
    2b88:	50 e0       	ldi	r21, 0x00	; 0
    2b8a:	60 e0       	ldi	r22, 0x00	; 0
    2b8c:	70 e0       	ldi	r23, 0x00	; 0
    2b8e:	80 91 05 0c 	lds	r24, 0x0C05	; 0x800c05 <Sema_Positive_offset_temp_handle>
    2b92:	90 91 06 0c 	lds	r25, 0x0C06	; 0x800c06 <Sema_Positive_offset_temp_handle+0x1>
    2b96:	79 c3       	rjmp	.+1778   	; 0x328a <xQueueGenericSend>
    2b98:	08 95       	ret

00002b9a <RTE_set_Negative_offset_temperature>:
    2b9a:	90 93 c2 0b 	sts	0x0BC2, r25	; 0x800bc2 <Negative_offset_temp+0x1>
    2b9e:	80 93 c1 0b 	sts	0x0BC1, r24	; 0x800bc1 <Negative_offset_temp>
    2ba2:	20 e0       	ldi	r18, 0x00	; 0
    2ba4:	40 e0       	ldi	r20, 0x00	; 0
    2ba6:	50 e0       	ldi	r21, 0x00	; 0
    2ba8:	60 e0       	ldi	r22, 0x00	; 0
    2baa:	70 e0       	ldi	r23, 0x00	; 0
    2bac:	80 91 e2 0b 	lds	r24, 0x0BE2	; 0x800be2 <Sema_Negative_offset_temp_handle>
    2bb0:	90 91 e3 0b 	lds	r25, 0x0BE3	; 0x800be3 <Sema_Negative_offset_temp_handle+0x1>
    2bb4:	6a c3       	rjmp	.+1748   	; 0x328a <xQueueGenericSend>
    2bb6:	08 95       	ret

00002bb8 <RTE_set_Current_temperature>:




void RTE_set_Current_temperature(uint16_t u16Currenttemp){
	Current_temperature = u16Currenttemp;
    2bb8:	90 93 9d 0b 	sts	0x0B9D, r25	; 0x800b9d <Current_temperature+0x1>
    2bbc:	80 93 9c 0b 	sts	0x0B9C, r24	; 0x800b9c <Current_temperature>
    2bc0:	08 95       	ret

00002bc2 <RTE_get_Current_temperature>:
}

uint16_t RTE_get_Current_temperature(void){
	return Current_temperature;
}
    2bc2:	80 91 9c 0b 	lds	r24, 0x0B9C	; 0x800b9c <Current_temperature>
    2bc6:	90 91 9d 0b 	lds	r25, 0x0B9D	; 0x800b9d <Current_temperature+0x1>
    2bca:	08 95       	ret

00002bcc <RTE_set_app_Current_temperature>:

void RTE_set_app_Current_temperature(uint16_t u16Currenttemp){
	APP_current_temp = u16Currenttemp;
    2bcc:	90 93 9f 0b 	sts	0x0B9F, r25	; 0x800b9f <APP_current_temp+0x1>
    2bd0:	80 93 9e 0b 	sts	0x0B9E, r24	; 0x800b9e <APP_current_temp>
	xSemaphoreGive(Sema_APP_current_temp_handle);
    2bd4:	20 e0       	ldi	r18, 0x00	; 0
    2bd6:	40 e0       	ldi	r20, 0x00	; 0
    2bd8:	50 e0       	ldi	r21, 0x00	; 0
    2bda:	60 e0       	ldi	r22, 0x00	; 0
    2bdc:	70 e0       	ldi	r23, 0x00	; 0
    2bde:	80 91 bf 0b 	lds	r24, 0x0BBF	; 0x800bbf <Sema_APP_current_temp_handle>
    2be2:	90 91 c0 0b 	lds	r25, 0x0BC0	; 0x800bc0 <Sema_APP_current_temp_handle+0x1>
    2be6:	51 c3       	rjmp	.+1698   	; 0x328a <xQueueGenericSend>
    2be8:	08 95       	ret

00002bea <vApplicationStackOverflowHook>:
	   This routine will never return.
	   This routine is referenced in the task.c file of FreeRTOS as an extern.
	\*---------------------------------------------------------------------------*/

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
	DDRB  |= _BV(DDB7);
    2bea:	27 9a       	sbi	0x04, 7	; 4
	PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    2bec:	2f 9a       	sbi	0x05, 7	; 5
    2bee:	2f ef       	ldi	r18, 0xFF	; 255
    2bf0:	87 ea       	ldi	r24, 0xA7	; 167
    2bf2:	91 e6       	ldi	r25, 0x61	; 97
    2bf4:	21 50       	subi	r18, 0x01	; 1
    2bf6:	80 40       	sbci	r24, 0x00	; 0
    2bf8:	90 40       	sbci	r25, 0x00	; 0
    2bfa:	e1 f7       	brne	.-8      	; 0x2bf4 <vApplicationStackOverflowHook+0xa>
    2bfc:	00 c0       	rjmp	.+0      	; 0x2bfe <vApplicationStackOverflowHook+0x14>
    2bfe:	00 00       	nop
	for(;;)
	{
		_delay_ms(2000);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
		PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED slow blink.
    2c00:	1f 9a       	sbi	0x03, 7	; 3
#elif defined(__AVR_ATmega32U4__) || defined(__AVR_ATmega16U4__) // assume we're using an Arduino Leonardo with 32u4
		PINC  |= _BV(PINC7);       // Main (red PC7) LED toggle. Main LED slow blink.

#endif

	}
    2c02:	f5 cf       	rjmp	.-22     	; 0x2bee <vApplicationStackOverflowHook+0x4>

00002c04 <vApplicationGetIdleTaskMemory>:
                                    configSTACK_DEPTH_TYPE *pulIdleTaskStackSize )
{
    static StaticTask_t xIdleTaskTCB;
    static StackType_t uxIdleTaskStack[ configMINIMAL_STACK_SIZE ];

    *ppxIdleTaskTCBBuffer = &xIdleTaskTCB;
    2c04:	27 e6       	ldi	r18, 0x67	; 103
    2c06:	3d e0       	ldi	r19, 0x0D	; 13
    2c08:	fc 01       	movw	r30, r24
    2c0a:	31 83       	std	Z+1, r19	; 0x01
    2c0c:	20 83       	st	Z, r18
    *ppxIdleTaskStackBuffer = uxIdleTaskStack;
    2c0e:	82 e1       	ldi	r24, 0x12	; 18
    2c10:	9d e0       	ldi	r25, 0x0D	; 13
    2c12:	fb 01       	movw	r30, r22
    2c14:	91 83       	std	Z+1, r25	; 0x01
    2c16:	80 83       	st	Z, r24
    *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
    2c18:	85 e5       	ldi	r24, 0x55	; 85
    2c1a:	90 e0       	ldi	r25, 0x00	; 0
    2c1c:	fa 01       	movw	r30, r20
    2c1e:	91 83       	std	Z+1, r25	; 0x01
    2c20:	80 83       	st	Z, r24
    2c22:	08 95       	ret

00002c24 <vApplicationGetTimerTaskMemory>:
                                     configSTACK_DEPTH_TYPE *pulTimerTaskStackSize )
{
    static StaticTask_t xTimerTaskTCB;
    static StackType_t uxTimerTaskStack[ configTIMER_TASK_STACK_DEPTH ];

    *ppxTimerTaskTCBBuffer = &xTimerTaskTCB;
    2c24:	28 ee       	ldi	r18, 0xE8	; 232
    2c26:	3c e0       	ldi	r19, 0x0C	; 12
    2c28:	fc 01       	movw	r30, r24
    2c2a:	31 83       	std	Z+1, r19	; 0x01
    2c2c:	20 83       	st	Z, r18
    *ppxTimerTaskStackBuffer = uxTimerTaskStack;
    2c2e:	83 e9       	ldi	r24, 0x93	; 147
    2c30:	9c e0       	ldi	r25, 0x0C	; 12
    2c32:	fb 01       	movw	r30, r22
    2c34:	91 83       	std	Z+1, r25	; 0x01
    2c36:	80 83       	st	Z, r24
    *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
    2c38:	85 e5       	ldi	r24, 0x55	; 85
    2c3a:	90 e0       	ldi	r25, 0x00	; 0
    2c3c:	fa 01       	movw	r30, r20
    2c3e:	91 83       	std	Z+1, r25	; 0x01
    2c40:	80 83       	st	Z, r24
    2c42:	08 95       	ret

00002c44 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    2c44:	fc 01       	movw	r30, r24
    /* The list structure contains a list item which is used to mark the
    end of the list.  To initialise the list the list end is inserted
    as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );            /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    2c46:	03 96       	adiw	r24, 0x03	; 3
    2c48:	92 83       	std	Z+2, r25	; 0x02
    2c4a:	81 83       	std	Z+1, r24	; 0x01

    /* The list end value is the highest possible value in the list to
    ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
    2c4c:	2f ef       	ldi	r18, 0xFF	; 255
    2c4e:	3f ef       	ldi	r19, 0xFF	; 255
    2c50:	34 83       	std	Z+4, r19	; 0x04
    2c52:	23 83       	std	Z+3, r18	; 0x03

    /* The list end next and previous pointers point to itself so we know
    when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );    /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    2c54:	96 83       	std	Z+6, r25	; 0x06
    2c56:	85 83       	std	Z+5, r24	; 0x05
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    2c58:	90 87       	std	Z+8, r25	; 0x08
    2c5a:	87 83       	std	Z+7, r24	; 0x07

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    2c5c:	10 82       	st	Z, r1
    2c5e:	08 95       	ret

00002c60 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
    2c60:	fc 01       	movw	r30, r24
    2c62:	11 86       	std	Z+9, r1	; 0x09
    2c64:	10 86       	std	Z+8, r1	; 0x08
    2c66:	08 95       	ret

00002c68 <vListInsertEnd>:
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    2c68:	cf 93       	push	r28
    2c6a:	df 93       	push	r29
    2c6c:	9c 01       	movw	r18, r24
    2c6e:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
    2c70:	dc 01       	movw	r26, r24
    2c72:	11 96       	adiw	r26, 0x01	; 1
    2c74:	cd 91       	ld	r28, X+
    2c76:	dc 91       	ld	r29, X
    2c78:	12 97       	sbiw	r26, 0x02	; 2
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
    makes the new list item the last item to be removed by a call to
    listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
    2c7a:	d3 83       	std	Z+3, r29	; 0x03
    2c7c:	c2 83       	std	Z+2, r28	; 0x02
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    2c7e:	8c 81       	ldd	r24, Y+4	; 0x04
    2c80:	9d 81       	ldd	r25, Y+5	; 0x05
    2c82:	95 83       	std	Z+5, r25	; 0x05
    2c84:	84 83       	std	Z+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
    2c86:	8c 81       	ldd	r24, Y+4	; 0x04
    2c88:	9d 81       	ldd	r25, Y+5	; 0x05
    2c8a:	dc 01       	movw	r26, r24
    2c8c:	13 96       	adiw	r26, 0x03	; 3
    2c8e:	7c 93       	st	X, r23
    2c90:	6e 93       	st	-X, r22
    2c92:	12 97       	sbiw	r26, 0x02	; 2
    pxIndex->pxPrevious = pxNewListItem;
    2c94:	7d 83       	std	Y+5, r23	; 0x05
    2c96:	6c 83       	std	Y+4, r22	; 0x04

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
    2c98:	31 87       	std	Z+9, r19	; 0x09
    2c9a:	20 87       	std	Z+8, r18	; 0x08

    ( pxList->uxNumberOfItems )++;
    2c9c:	f9 01       	movw	r30, r18
    2c9e:	80 81       	ld	r24, Z
    2ca0:	8f 5f       	subi	r24, 0xFF	; 255
    2ca2:	80 83       	st	Z, r24
}
    2ca4:	df 91       	pop	r29
    2ca6:	cf 91       	pop	r28
    2ca8:	08 95       	ret

00002caa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    2caa:	cf 93       	push	r28
    2cac:	df 93       	push	r29
    2cae:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    2cb0:	48 81       	ld	r20, Y
    2cb2:	59 81       	ldd	r21, Y+1	; 0x01
    new list item should be placed after it.  This ensures that TCBs which are
    stored in ready lists (all of which have the same xItemValue value) get a
    share of the CPU.  However, if the xItemValue is the same as the back marker
    the iteration loop below will not end.  Therefore the value is checked
    first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
    2cb4:	4f 3f       	cpi	r20, 0xFF	; 255
    2cb6:	2f ef       	ldi	r18, 0xFF	; 255
    2cb8:	52 07       	cpc	r21, r18
    2cba:	21 f4       	brne	.+8      	; 0x2cc4 <vListInsert+0x1a>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
    2cbc:	fc 01       	movw	r30, r24
    2cbe:	a7 81       	ldd	r26, Z+7	; 0x07
    2cc0:	b0 85       	ldd	r27, Z+8	; 0x08
    2cc2:	0d c0       	rjmp	.+26     	; 0x2cde <vListInsert+0x34>
            4) Using a queue or semaphore before it has been initialised or
               before the scheduler has been started (are interrupts firing
               before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
    2cc4:	dc 01       	movw	r26, r24
    2cc6:	13 96       	adiw	r26, 0x03	; 3
    2cc8:	01 c0       	rjmp	.+2      	; 0x2ccc <vListInsert+0x22>
    2cca:	df 01       	movw	r26, r30
    2ccc:	12 96       	adiw	r26, 0x02	; 2
    2cce:	ed 91       	ld	r30, X+
    2cd0:	fc 91       	ld	r31, X
    2cd2:	13 97       	sbiw	r26, 0x03	; 3
    2cd4:	20 81       	ld	r18, Z
    2cd6:	31 81       	ldd	r19, Z+1	; 0x01
    2cd8:	42 17       	cp	r20, r18
    2cda:	53 07       	cpc	r21, r19
    2cdc:	b0 f7       	brcc	.-20     	; 0x2cca <vListInsert+0x20>
            /* There is nothing to do here, just iterating to the wanted
            insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
    2cde:	12 96       	adiw	r26, 0x02	; 2
    2ce0:	ed 91       	ld	r30, X+
    2ce2:	fc 91       	ld	r31, X
    2ce4:	13 97       	sbiw	r26, 0x03	; 3
    2ce6:	fb 83       	std	Y+3, r31	; 0x03
    2ce8:	ea 83       	std	Y+2, r30	; 0x02
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    2cea:	d5 83       	std	Z+5, r29	; 0x05
    2cec:	c4 83       	std	Z+4, r28	; 0x04
    pxNewListItem->pxPrevious = pxIterator;
    2cee:	bd 83       	std	Y+5, r27	; 0x05
    2cf0:	ac 83       	std	Y+4, r26	; 0x04
    pxIterator->pxNext = pxNewListItem;
    2cf2:	13 96       	adiw	r26, 0x03	; 3
    2cf4:	dc 93       	st	X, r29
    2cf6:	ce 93       	st	-X, r28
    2cf8:	12 97       	sbiw	r26, 0x02	; 2

    /* Remember which list the item is in.  This allows fast removal of the
    item later. */
    pxNewListItem->pxContainer = pxList;
    2cfa:	99 87       	std	Y+9, r25	; 0x09
    2cfc:	88 87       	std	Y+8, r24	; 0x08

    ( pxList->uxNumberOfItems )++;
    2cfe:	fc 01       	movw	r30, r24
    2d00:	20 81       	ld	r18, Z
    2d02:	2f 5f       	subi	r18, 0xFF	; 255
    2d04:	20 83       	st	Z, r18
}
    2d06:	df 91       	pop	r29
    2d08:	cf 91       	pop	r28
    2d0a:	08 95       	ret

00002d0c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    2d0c:	cf 93       	push	r28
    2d0e:	df 93       	push	r29
    2d10:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
    2d12:	a0 85       	ldd	r26, Z+8	; 0x08
    2d14:	b1 85       	ldd	r27, Z+9	; 0x09

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    2d16:	c2 81       	ldd	r28, Z+2	; 0x02
    2d18:	d3 81       	ldd	r29, Z+3	; 0x03
    2d1a:	84 81       	ldd	r24, Z+4	; 0x04
    2d1c:	95 81       	ldd	r25, Z+5	; 0x05
    2d1e:	9d 83       	std	Y+5, r25	; 0x05
    2d20:	8c 83       	std	Y+4, r24	; 0x04
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    2d22:	c4 81       	ldd	r28, Z+4	; 0x04
    2d24:	d5 81       	ldd	r29, Z+5	; 0x05
    2d26:	82 81       	ldd	r24, Z+2	; 0x02
    2d28:	93 81       	ldd	r25, Z+3	; 0x03
    2d2a:	9b 83       	std	Y+3, r25	; 0x03
    2d2c:	8a 83       	std	Y+2, r24	; 0x02

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
    2d2e:	11 96       	adiw	r26, 0x01	; 1
    2d30:	cd 91       	ld	r28, X+
    2d32:	dc 91       	ld	r29, X
    2d34:	12 97       	sbiw	r26, 0x02	; 2
    2d36:	ce 17       	cp	r28, r30
    2d38:	df 07       	cpc	r29, r31
    2d3a:	31 f4       	brne	.+12     	; 0x2d48 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
    2d3c:	8c 81       	ldd	r24, Y+4	; 0x04
    2d3e:	9d 81       	ldd	r25, Y+5	; 0x05
    2d40:	12 96       	adiw	r26, 0x02	; 2
    2d42:	9c 93       	st	X, r25
    2d44:	8e 93       	st	-X, r24
    2d46:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
    2d48:	11 86       	std	Z+9, r1	; 0x09
    2d4a:	10 86       	std	Z+8, r1	; 0x08
    ( pxList->uxNumberOfItems )--;
    2d4c:	8c 91       	ld	r24, X
    2d4e:	81 50       	subi	r24, 0x01	; 1
    2d50:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
    2d52:	8c 91       	ld	r24, X
}
    2d54:	df 91       	pop	r29
    2d56:	cf 91       	pop	r28
    2d58:	08 95       	ret

00002d5a <pxPortInitialiseStack>:
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
    2d5a:	31 e1       	ldi	r19, 0x11	; 17
    2d5c:	fc 01       	movw	r30, r24
    2d5e:	30 83       	st	Z, r19
    2d60:	31 97       	sbiw	r30, 0x01	; 1
    2d62:	22 e2       	ldi	r18, 0x22	; 34
    2d64:	20 83       	st	Z, r18
    2d66:	31 97       	sbiw	r30, 0x01	; 1
    2d68:	a3 e3       	ldi	r26, 0x33	; 51
    2d6a:	a0 83       	st	Z, r26
    2d6c:	31 97       	sbiw	r30, 0x01	; 1
    2d6e:	60 83       	st	Z, r22
    2d70:	31 97       	sbiw	r30, 0x01	; 1
    2d72:	70 83       	st	Z, r23
    2d74:	31 97       	sbiw	r30, 0x01	; 1
    2d76:	10 82       	st	Z, r1
    2d78:	31 97       	sbiw	r30, 0x01	; 1
    2d7a:	10 82       	st	Z, r1
    2d7c:	31 97       	sbiw	r30, 0x01	; 1
    2d7e:	60 e8       	ldi	r22, 0x80	; 128
    2d80:	60 83       	st	Z, r22
    2d82:	31 97       	sbiw	r30, 0x01	; 1
    2d84:	10 82       	st	Z, r1
    2d86:	31 97       	sbiw	r30, 0x01	; 1
    2d88:	10 82       	st	Z, r1
    2d8a:	31 97       	sbiw	r30, 0x01	; 1
    2d8c:	10 82       	st	Z, r1
    2d8e:	31 97       	sbiw	r30, 0x01	; 1
    2d90:	62 e0       	ldi	r22, 0x02	; 2
    2d92:	60 83       	st	Z, r22
    2d94:	31 97       	sbiw	r30, 0x01	; 1
    2d96:	63 e0       	ldi	r22, 0x03	; 3
    2d98:	60 83       	st	Z, r22
    2d9a:	31 97       	sbiw	r30, 0x01	; 1
    2d9c:	64 e0       	ldi	r22, 0x04	; 4
    2d9e:	60 83       	st	Z, r22
    2da0:	31 97       	sbiw	r30, 0x01	; 1
    2da2:	65 e0       	ldi	r22, 0x05	; 5
    2da4:	60 83       	st	Z, r22
    2da6:	31 97       	sbiw	r30, 0x01	; 1
    2da8:	66 e0       	ldi	r22, 0x06	; 6
    2daa:	60 83       	st	Z, r22
    2dac:	31 97       	sbiw	r30, 0x01	; 1
    2dae:	67 e0       	ldi	r22, 0x07	; 7
    2db0:	60 83       	st	Z, r22
    2db2:	31 97       	sbiw	r30, 0x01	; 1
    2db4:	68 e0       	ldi	r22, 0x08	; 8
    2db6:	60 83       	st	Z, r22
    2db8:	31 97       	sbiw	r30, 0x01	; 1
    2dba:	69 e0       	ldi	r22, 0x09	; 9
    2dbc:	60 83       	st	Z, r22
    2dbe:	31 97       	sbiw	r30, 0x01	; 1
    2dc0:	60 e1       	ldi	r22, 0x10	; 16
    2dc2:	60 83       	st	Z, r22
    2dc4:	31 97       	sbiw	r30, 0x01	; 1
    2dc6:	30 83       	st	Z, r19
    2dc8:	31 97       	sbiw	r30, 0x01	; 1
    2dca:	32 e1       	ldi	r19, 0x12	; 18
    2dcc:	30 83       	st	Z, r19
    2dce:	31 97       	sbiw	r30, 0x01	; 1
    2dd0:	33 e1       	ldi	r19, 0x13	; 19
    2dd2:	30 83       	st	Z, r19
    2dd4:	31 97       	sbiw	r30, 0x01	; 1
    2dd6:	34 e1       	ldi	r19, 0x14	; 20
    2dd8:	30 83       	st	Z, r19
    2dda:	31 97       	sbiw	r30, 0x01	; 1
    2ddc:	35 e1       	ldi	r19, 0x15	; 21
    2dde:	30 83       	st	Z, r19
    2de0:	31 97       	sbiw	r30, 0x01	; 1
    2de2:	36 e1       	ldi	r19, 0x16	; 22
    2de4:	30 83       	st	Z, r19
    2de6:	31 97       	sbiw	r30, 0x01	; 1
    2de8:	37 e1       	ldi	r19, 0x17	; 23
    2dea:	30 83       	st	Z, r19
    2dec:	31 97       	sbiw	r30, 0x01	; 1
    2dee:	38 e1       	ldi	r19, 0x18	; 24
    2df0:	30 83       	st	Z, r19
    2df2:	31 97       	sbiw	r30, 0x01	; 1
    2df4:	39 e1       	ldi	r19, 0x19	; 25
    2df6:	30 83       	st	Z, r19
    2df8:	31 97       	sbiw	r30, 0x01	; 1
    2dfa:	30 e2       	ldi	r19, 0x20	; 32
    2dfc:	30 83       	st	Z, r19
    2dfe:	31 97       	sbiw	r30, 0x01	; 1
    2e00:	31 e2       	ldi	r19, 0x21	; 33
    2e02:	30 83       	st	Z, r19
    2e04:	31 97       	sbiw	r30, 0x01	; 1
    2e06:	20 83       	st	Z, r18
    2e08:	31 97       	sbiw	r30, 0x01	; 1
    2e0a:	23 e2       	ldi	r18, 0x23	; 35
    2e0c:	20 83       	st	Z, r18
    2e0e:	31 97       	sbiw	r30, 0x01	; 1
    2e10:	40 83       	st	Z, r20
    2e12:	31 97       	sbiw	r30, 0x01	; 1
    2e14:	50 83       	st	Z, r21
    2e16:	31 97       	sbiw	r30, 0x01	; 1
    2e18:	26 e2       	ldi	r18, 0x26	; 38
    2e1a:	20 83       	st	Z, r18
    2e1c:	31 97       	sbiw	r30, 0x01	; 1
    2e1e:	27 e2       	ldi	r18, 0x27	; 39
    2e20:	20 83       	st	Z, r18
    2e22:	31 97       	sbiw	r30, 0x01	; 1
    2e24:	28 e2       	ldi	r18, 0x28	; 40
    2e26:	20 83       	st	Z, r18
    2e28:	31 97       	sbiw	r30, 0x01	; 1
    2e2a:	29 e2       	ldi	r18, 0x29	; 41
    2e2c:	20 83       	st	Z, r18
    2e2e:	31 97       	sbiw	r30, 0x01	; 1
    2e30:	20 e3       	ldi	r18, 0x30	; 48
    2e32:	20 83       	st	Z, r18
    2e34:	31 97       	sbiw	r30, 0x01	; 1
    2e36:	21 e3       	ldi	r18, 0x31	; 49
    2e38:	20 83       	st	Z, r18
    2e3a:	89 97       	sbiw	r24, 0x29	; 41
    2e3c:	08 95       	ret

00002e3e <xPortStartScheduler>:
    2e3e:	a8 95       	wdr
    2e40:	90 ec       	ldi	r25, 0xC0	; 192
    2e42:	88 e1       	ldi	r24, 0x18	; 24
    2e44:	0f b6       	in	r0, 0x3f	; 63
    2e46:	f8 94       	cli
    2e48:	a8 95       	wdr
    2e4a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
    2e4e:	0f be       	out	0x3f, r0	; 63
    2e50:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
    2e54:	a0 91 ec 0d 	lds	r26, 0x0DEC	; 0x800dec <pxCurrentTCB>
    2e58:	b0 91 ed 0d 	lds	r27, 0x0DED	; 0x800ded <pxCurrentTCB+0x1>
    2e5c:	cd 91       	ld	r28, X+
    2e5e:	cd bf       	out	0x3d, r28	; 61
    2e60:	dd 91       	ld	r29, X+
    2e62:	de bf       	out	0x3e, r29	; 62
    2e64:	ff 91       	pop	r31
    2e66:	ef 91       	pop	r30
    2e68:	df 91       	pop	r29
    2e6a:	cf 91       	pop	r28
    2e6c:	bf 91       	pop	r27
    2e6e:	af 91       	pop	r26
    2e70:	9f 91       	pop	r25
    2e72:	8f 91       	pop	r24
    2e74:	7f 91       	pop	r23
    2e76:	6f 91       	pop	r22
    2e78:	5f 91       	pop	r21
    2e7a:	4f 91       	pop	r20
    2e7c:	3f 91       	pop	r19
    2e7e:	2f 91       	pop	r18
    2e80:	1f 91       	pop	r17
    2e82:	0f 91       	pop	r16
    2e84:	ff 90       	pop	r15
    2e86:	ef 90       	pop	r14
    2e88:	df 90       	pop	r13
    2e8a:	cf 90       	pop	r12
    2e8c:	bf 90       	pop	r11
    2e8e:	af 90       	pop	r10
    2e90:	9f 90       	pop	r9
    2e92:	8f 90       	pop	r8
    2e94:	7f 90       	pop	r7
    2e96:	6f 90       	pop	r6
    2e98:	5f 90       	pop	r5
    2e9a:	4f 90       	pop	r4
    2e9c:	3f 90       	pop	r3
    2e9e:	2f 90       	pop	r2
    2ea0:	1f 90       	pop	r1
    2ea2:	0f 90       	pop	r0
    2ea4:	0c be       	out	0x3c, r0	; 60
    2ea6:	0f 90       	pop	r0
    2ea8:	0b be       	out	0x3b, r0	; 59
    2eaa:	0f 90       	pop	r0
    2eac:	0f be       	out	0x3f, r0	; 63
    2eae:	0f 90       	pop	r0
    2eb0:	08 95       	ret
    2eb2:	81 e0       	ldi	r24, 0x01	; 1
    2eb4:	08 95       	ret

00002eb6 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    2eb6:	0f 92       	push	r0
    2eb8:	0f b6       	in	r0, 0x3f	; 63
    2eba:	f8 94       	cli
    2ebc:	0f 92       	push	r0
    2ebe:	0b b6       	in	r0, 0x3b	; 59
    2ec0:	0f 92       	push	r0
    2ec2:	0c b6       	in	r0, 0x3c	; 60
    2ec4:	0f 92       	push	r0
    2ec6:	1f 92       	push	r1
    2ec8:	11 24       	eor	r1, r1
    2eca:	2f 92       	push	r2
    2ecc:	3f 92       	push	r3
    2ece:	4f 92       	push	r4
    2ed0:	5f 92       	push	r5
    2ed2:	6f 92       	push	r6
    2ed4:	7f 92       	push	r7
    2ed6:	8f 92       	push	r8
    2ed8:	9f 92       	push	r9
    2eda:	af 92       	push	r10
    2edc:	bf 92       	push	r11
    2ede:	cf 92       	push	r12
    2ee0:	df 92       	push	r13
    2ee2:	ef 92       	push	r14
    2ee4:	ff 92       	push	r15
    2ee6:	0f 93       	push	r16
    2ee8:	1f 93       	push	r17
    2eea:	2f 93       	push	r18
    2eec:	3f 93       	push	r19
    2eee:	4f 93       	push	r20
    2ef0:	5f 93       	push	r21
    2ef2:	6f 93       	push	r22
    2ef4:	7f 93       	push	r23
    2ef6:	8f 93       	push	r24
    2ef8:	9f 93       	push	r25
    2efa:	af 93       	push	r26
    2efc:	bf 93       	push	r27
    2efe:	cf 93       	push	r28
    2f00:	df 93       	push	r29
    2f02:	ef 93       	push	r30
    2f04:	ff 93       	push	r31
    2f06:	a0 91 ec 0d 	lds	r26, 0x0DEC	; 0x800dec <pxCurrentTCB>
    2f0a:	b0 91 ed 0d 	lds	r27, 0x0DED	; 0x800ded <pxCurrentTCB+0x1>
    2f0e:	0d b6       	in	r0, 0x3d	; 61
    2f10:	0d 92       	st	X+, r0
    2f12:	0e b6       	in	r0, 0x3e	; 62
    2f14:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    2f16:	f5 d6       	rcall	.+3562   	; 0x3d02 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    2f18:	a0 91 ec 0d 	lds	r26, 0x0DEC	; 0x800dec <pxCurrentTCB>
    2f1c:	b0 91 ed 0d 	lds	r27, 0x0DED	; 0x800ded <pxCurrentTCB+0x1>
    2f20:	cd 91       	ld	r28, X+
    2f22:	cd bf       	out	0x3d, r28	; 61
    2f24:	dd 91       	ld	r29, X+
    2f26:	de bf       	out	0x3e, r29	; 62
    2f28:	ff 91       	pop	r31
    2f2a:	ef 91       	pop	r30
    2f2c:	df 91       	pop	r29
    2f2e:	cf 91       	pop	r28
    2f30:	bf 91       	pop	r27
    2f32:	af 91       	pop	r26
    2f34:	9f 91       	pop	r25
    2f36:	8f 91       	pop	r24
    2f38:	7f 91       	pop	r23
    2f3a:	6f 91       	pop	r22
    2f3c:	5f 91       	pop	r21
    2f3e:	4f 91       	pop	r20
    2f40:	3f 91       	pop	r19
    2f42:	2f 91       	pop	r18
    2f44:	1f 91       	pop	r17
    2f46:	0f 91       	pop	r16
    2f48:	ff 90       	pop	r15
    2f4a:	ef 90       	pop	r14
    2f4c:	df 90       	pop	r13
    2f4e:	cf 90       	pop	r12
    2f50:	bf 90       	pop	r11
    2f52:	af 90       	pop	r10
    2f54:	9f 90       	pop	r9
    2f56:	8f 90       	pop	r8
    2f58:	7f 90       	pop	r7
    2f5a:	6f 90       	pop	r6
    2f5c:	5f 90       	pop	r5
    2f5e:	4f 90       	pop	r4
    2f60:	3f 90       	pop	r3
    2f62:	2f 90       	pop	r2
    2f64:	1f 90       	pop	r1
    2f66:	0f 90       	pop	r0
    2f68:	0c be       	out	0x3c, r0	; 60
    2f6a:	0f 90       	pop	r0
    2f6c:	0b be       	out	0x3b, r0	; 59
    2f6e:	0f 90       	pop	r0
    2f70:	0f be       	out	0x3f, r0	; 63
    2f72:	0f 90       	pop	r0

	__asm__ __volatile__ ( "ret" );
    2f74:	08 95       	ret

00002f76 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    2f76:	0f 92       	push	r0
    2f78:	0f b6       	in	r0, 0x3f	; 63
    2f7a:	f8 94       	cli
    2f7c:	0f 92       	push	r0
    2f7e:	0b b6       	in	r0, 0x3b	; 59
    2f80:	0f 92       	push	r0
    2f82:	0c b6       	in	r0, 0x3c	; 60
    2f84:	0f 92       	push	r0
    2f86:	1f 92       	push	r1
    2f88:	11 24       	eor	r1, r1
    2f8a:	2f 92       	push	r2
    2f8c:	3f 92       	push	r3
    2f8e:	4f 92       	push	r4
    2f90:	5f 92       	push	r5
    2f92:	6f 92       	push	r6
    2f94:	7f 92       	push	r7
    2f96:	8f 92       	push	r8
    2f98:	9f 92       	push	r9
    2f9a:	af 92       	push	r10
    2f9c:	bf 92       	push	r11
    2f9e:	cf 92       	push	r12
    2fa0:	df 92       	push	r13
    2fa2:	ef 92       	push	r14
    2fa4:	ff 92       	push	r15
    2fa6:	0f 93       	push	r16
    2fa8:	1f 93       	push	r17
    2faa:	2f 93       	push	r18
    2fac:	3f 93       	push	r19
    2fae:	4f 93       	push	r20
    2fb0:	5f 93       	push	r21
    2fb2:	6f 93       	push	r22
    2fb4:	7f 93       	push	r23
    2fb6:	8f 93       	push	r24
    2fb8:	9f 93       	push	r25
    2fba:	af 93       	push	r26
    2fbc:	bf 93       	push	r27
    2fbe:	cf 93       	push	r28
    2fc0:	df 93       	push	r29
    2fc2:	ef 93       	push	r30
    2fc4:	ff 93       	push	r31
    2fc6:	a0 91 ec 0d 	lds	r26, 0x0DEC	; 0x800dec <pxCurrentTCB>
    2fca:	b0 91 ed 0d 	lds	r27, 0x0DED	; 0x800ded <pxCurrentTCB+0x1>
    2fce:	0d b6       	in	r0, 0x3d	; 61
    2fd0:	0d 92       	st	X+, r0
    2fd2:	0e b6       	in	r0, 0x3e	; 62
    2fd4:	0d 92       	st	X+, r0

	sleep_reset();		//	 reset the sleep_mode() faster than sleep_disable();
    2fd6:	13 be       	out	0x33, r1	; 51

	if( xTaskIncrementTick() != pdFALSE )
    2fd8:	54 d5       	rcall	.+2728   	; 0x3a82 <xTaskIncrementTick>
    2fda:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
    2fdc:	92 d6       	rcall	.+3364   	; 0x3d02 <vTaskSwitchContext>
	}

	portRESTORE_CONTEXT();
    2fde:	a0 91 ec 0d 	lds	r26, 0x0DEC	; 0x800dec <pxCurrentTCB>
    2fe2:	b0 91 ed 0d 	lds	r27, 0x0DED	; 0x800ded <pxCurrentTCB+0x1>
    2fe6:	cd 91       	ld	r28, X+
    2fe8:	cd bf       	out	0x3d, r28	; 61
    2fea:	dd 91       	ld	r29, X+
    2fec:	de bf       	out	0x3e, r29	; 62
    2fee:	ff 91       	pop	r31
    2ff0:	ef 91       	pop	r30
    2ff2:	df 91       	pop	r29
    2ff4:	cf 91       	pop	r28
    2ff6:	bf 91       	pop	r27
    2ff8:	af 91       	pop	r26
    2ffa:	9f 91       	pop	r25
    2ffc:	8f 91       	pop	r24
    2ffe:	7f 91       	pop	r23
    3000:	6f 91       	pop	r22
    3002:	5f 91       	pop	r21
    3004:	4f 91       	pop	r20
    3006:	3f 91       	pop	r19
    3008:	2f 91       	pop	r18
    300a:	1f 91       	pop	r17
    300c:	0f 91       	pop	r16
    300e:	ff 90       	pop	r15
    3010:	ef 90       	pop	r14
    3012:	df 90       	pop	r13
    3014:	cf 90       	pop	r12
    3016:	bf 90       	pop	r11
    3018:	af 90       	pop	r10
    301a:	9f 90       	pop	r9
    301c:	8f 90       	pop	r8
    301e:	7f 90       	pop	r7
    3020:	6f 90       	pop	r6
    3022:	5f 90       	pop	r5
    3024:	4f 90       	pop	r4
    3026:	3f 90       	pop	r3
    3028:	2f 90       	pop	r2
    302a:	1f 90       	pop	r1
    302c:	0f 90       	pop	r0
    302e:	0c be       	out	0x3c, r0	; 60
    3030:	0f 90       	pop	r0
    3032:	0b be       	out	0x3b, r0	; 59
    3034:	0f 90       	pop	r0
    3036:	0f be       	out	0x3f, r0	; 63
    3038:	0f 90       	pop	r0

	__asm__ __volatile__ ( "ret" );
    303a:	08 95       	ret

0000303c <__vector_12>:
	 */
//	ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
	ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
	ISR(portSCHEDULER_ISR)
	{
		vPortYieldFromTick();
    303c:	9c df       	rcall	.-200    	; 0x2f76 <vPortYieldFromTick>
		__asm__ __volatile__ ( "reti" );
    303e:	18 95       	reti

00003040 <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    3040:	0f b6       	in	r0, 0x3f	; 63
    3042:	f8 94       	cli
    3044:	0f 92       	push	r0
    3046:	fc 01       	movw	r30, r24
    3048:	92 8d       	ldd	r25, Z+26	; 0x1a
    304a:	0f 90       	pop	r0
    304c:	0f be       	out	0x3f, r0	; 63
    304e:	81 e0       	ldi	r24, 0x01	; 1
    3050:	91 11       	cpse	r25, r1
    3052:	80 e0       	ldi	r24, 0x00	; 0
    3054:	08 95       	ret

00003056 <prvCopyDataToQueue>:
    3056:	0f 93       	push	r16
    3058:	1f 93       	push	r17
    305a:	cf 93       	push	r28
    305c:	df 93       	push	r29
    305e:	ec 01       	movw	r28, r24
    3060:	04 2f       	mov	r16, r20
    3062:	1a 8d       	ldd	r17, Y+26	; 0x1a
    3064:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3066:	81 11       	cpse	r24, r1
    3068:	0b c0       	rjmp	.+22     	; 0x3080 <prvCopyDataToQueue+0x2a>
    306a:	88 81       	ld	r24, Y
    306c:	99 81       	ldd	r25, Y+1	; 0x01
    306e:	89 2b       	or	r24, r25
    3070:	09 f0       	breq	.+2      	; 0x3074 <prvCopyDataToQueue+0x1e>
    3072:	43 c0       	rjmp	.+134    	; 0x30fa <prvCopyDataToQueue+0xa4>
    3074:	8c 81       	ldd	r24, Y+4	; 0x04
    3076:	9d 81       	ldd	r25, Y+5	; 0x05
    3078:	f2 d7       	rcall	.+4068   	; 0x405e <xTaskPriorityDisinherit>
    307a:	1d 82       	std	Y+5, r1	; 0x05
    307c:	1c 82       	std	Y+4, r1	; 0x04
    307e:	44 c0       	rjmp	.+136    	; 0x3108 <prvCopyDataToQueue+0xb2>
    3080:	41 11       	cpse	r20, r1
    3082:	18 c0       	rjmp	.+48     	; 0x30b4 <prvCopyDataToQueue+0x5e>
    3084:	48 2f       	mov	r20, r24
    3086:	50 e0       	ldi	r21, 0x00	; 0
    3088:	8a 81       	ldd	r24, Y+2	; 0x02
    308a:	9b 81       	ldd	r25, Y+3	; 0x03
    308c:	0e 94 88 28 	call	0x5110	; 0x5110 <memcpy>
    3090:	2c 8d       	ldd	r18, Y+28	; 0x1c
    3092:	8a 81       	ldd	r24, Y+2	; 0x02
    3094:	9b 81       	ldd	r25, Y+3	; 0x03
    3096:	82 0f       	add	r24, r18
    3098:	91 1d       	adc	r25, r1
    309a:	9b 83       	std	Y+3, r25	; 0x03
    309c:	8a 83       	std	Y+2, r24	; 0x02
    309e:	2c 81       	ldd	r18, Y+4	; 0x04
    30a0:	3d 81       	ldd	r19, Y+5	; 0x05
    30a2:	82 17       	cp	r24, r18
    30a4:	93 07       	cpc	r25, r19
    30a6:	58 f1       	brcs	.+86     	; 0x30fe <prvCopyDataToQueue+0xa8>
    30a8:	88 81       	ld	r24, Y
    30aa:	99 81       	ldd	r25, Y+1	; 0x01
    30ac:	9b 83       	std	Y+3, r25	; 0x03
    30ae:	8a 83       	std	Y+2, r24	; 0x02
    30b0:	80 e0       	ldi	r24, 0x00	; 0
    30b2:	2a c0       	rjmp	.+84     	; 0x3108 <prvCopyDataToQueue+0xb2>
    30b4:	48 2f       	mov	r20, r24
    30b6:	50 e0       	ldi	r21, 0x00	; 0
    30b8:	8e 81       	ldd	r24, Y+6	; 0x06
    30ba:	9f 81       	ldd	r25, Y+7	; 0x07
    30bc:	0e 94 88 28 	call	0x5110	; 0x5110 <memcpy>
    30c0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    30c2:	90 e0       	ldi	r25, 0x00	; 0
    30c4:	91 95       	neg	r25
    30c6:	81 95       	neg	r24
    30c8:	91 09       	sbc	r25, r1
    30ca:	2e 81       	ldd	r18, Y+6	; 0x06
    30cc:	3f 81       	ldd	r19, Y+7	; 0x07
    30ce:	28 0f       	add	r18, r24
    30d0:	39 1f       	adc	r19, r25
    30d2:	3f 83       	std	Y+7, r19	; 0x07
    30d4:	2e 83       	std	Y+6, r18	; 0x06
    30d6:	48 81       	ld	r20, Y
    30d8:	59 81       	ldd	r21, Y+1	; 0x01
    30da:	24 17       	cp	r18, r20
    30dc:	35 07       	cpc	r19, r21
    30de:	30 f4       	brcc	.+12     	; 0x30ec <prvCopyDataToQueue+0x96>
    30e0:	2c 81       	ldd	r18, Y+4	; 0x04
    30e2:	3d 81       	ldd	r19, Y+5	; 0x05
    30e4:	82 0f       	add	r24, r18
    30e6:	93 1f       	adc	r25, r19
    30e8:	9f 83       	std	Y+7, r25	; 0x07
    30ea:	8e 83       	std	Y+6, r24	; 0x06
    30ec:	02 30       	cpi	r16, 0x02	; 2
    30ee:	49 f4       	brne	.+18     	; 0x3102 <prvCopyDataToQueue+0xac>
    30f0:	11 23       	and	r17, r17
    30f2:	49 f0       	breq	.+18     	; 0x3106 <prvCopyDataToQueue+0xb0>
    30f4:	11 50       	subi	r17, 0x01	; 1
    30f6:	80 e0       	ldi	r24, 0x00	; 0
    30f8:	07 c0       	rjmp	.+14     	; 0x3108 <prvCopyDataToQueue+0xb2>
    30fa:	80 e0       	ldi	r24, 0x00	; 0
    30fc:	05 c0       	rjmp	.+10     	; 0x3108 <prvCopyDataToQueue+0xb2>
    30fe:	80 e0       	ldi	r24, 0x00	; 0
    3100:	03 c0       	rjmp	.+6      	; 0x3108 <prvCopyDataToQueue+0xb2>
    3102:	80 e0       	ldi	r24, 0x00	; 0
    3104:	01 c0       	rjmp	.+2      	; 0x3108 <prvCopyDataToQueue+0xb2>
    3106:	80 e0       	ldi	r24, 0x00	; 0
    3108:	1f 5f       	subi	r17, 0xFF	; 255
    310a:	1a 8f       	std	Y+26, r17	; 0x1a
    310c:	df 91       	pop	r29
    310e:	cf 91       	pop	r28
    3110:	1f 91       	pop	r17
    3112:	0f 91       	pop	r16
    3114:	08 95       	ret

00003116 <prvCopyDataFromQueue>:
    3116:	fc 01       	movw	r30, r24
    3118:	44 8d       	ldd	r20, Z+28	; 0x1c
    311a:	44 23       	and	r20, r20
    311c:	a9 f0       	breq	.+42     	; 0x3148 <prvCopyDataFromQueue+0x32>
    311e:	50 e0       	ldi	r21, 0x00	; 0
    3120:	26 81       	ldd	r18, Z+6	; 0x06
    3122:	37 81       	ldd	r19, Z+7	; 0x07
    3124:	24 0f       	add	r18, r20
    3126:	35 1f       	adc	r19, r21
    3128:	37 83       	std	Z+7, r19	; 0x07
    312a:	26 83       	std	Z+6, r18	; 0x06
    312c:	84 81       	ldd	r24, Z+4	; 0x04
    312e:	95 81       	ldd	r25, Z+5	; 0x05
    3130:	28 17       	cp	r18, r24
    3132:	39 07       	cpc	r19, r25
    3134:	20 f0       	brcs	.+8      	; 0x313e <prvCopyDataFromQueue+0x28>
    3136:	80 81       	ld	r24, Z
    3138:	91 81       	ldd	r25, Z+1	; 0x01
    313a:	97 83       	std	Z+7, r25	; 0x07
    313c:	86 83       	std	Z+6, r24	; 0x06
    313e:	cb 01       	movw	r24, r22
    3140:	66 81       	ldd	r22, Z+6	; 0x06
    3142:	77 81       	ldd	r23, Z+7	; 0x07
    3144:	0c 94 88 28 	jmp	0x5110	; 0x5110 <memcpy>
    3148:	08 95       	ret

0000314a <prvUnlockQueue>:
    314a:	ef 92       	push	r14
    314c:	ff 92       	push	r15
    314e:	0f 93       	push	r16
    3150:	1f 93       	push	r17
    3152:	cf 93       	push	r28
    3154:	8c 01       	movw	r16, r24
    3156:	0f b6       	in	r0, 0x3f	; 63
    3158:	f8 94       	cli
    315a:	0f 92       	push	r0
    315c:	fc 01       	movw	r30, r24
    315e:	c6 8d       	ldd	r28, Z+30	; 0x1e
    3160:	1c 16       	cp	r1, r28
    3162:	9c f4       	brge	.+38     	; 0x318a <prvUnlockQueue+0x40>
    3164:	81 89       	ldd	r24, Z+17	; 0x11
    3166:	81 11       	cpse	r24, r1
    3168:	06 c0       	rjmp	.+12     	; 0x3176 <prvUnlockQueue+0x2c>
    316a:	0f c0       	rjmp	.+30     	; 0x318a <prvUnlockQueue+0x40>
    316c:	f8 01       	movw	r30, r16
    316e:	91 89       	ldd	r25, Z+17	; 0x11
    3170:	91 11       	cpse	r25, r1
    3172:	05 c0       	rjmp	.+10     	; 0x317e <prvUnlockQueue+0x34>
    3174:	0a c0       	rjmp	.+20     	; 0x318a <prvUnlockQueue+0x40>
    3176:	78 01       	movw	r14, r16
    3178:	f1 e1       	ldi	r31, 0x11	; 17
    317a:	ef 0e       	add	r14, r31
    317c:	f1 1c       	adc	r15, r1
    317e:	c7 01       	movw	r24, r14
    3180:	6c d6       	rcall	.+3288   	; 0x3e5a <xTaskRemoveFromEventList>
    3182:	81 11       	cpse	r24, r1
    3184:	e8 d6       	rcall	.+3536   	; 0x3f56 <vTaskMissedYield>
    3186:	c1 50       	subi	r28, 0x01	; 1
    3188:	89 f7       	brne	.-30     	; 0x316c <prvUnlockQueue+0x22>
    318a:	8f ef       	ldi	r24, 0xFF	; 255
    318c:	f8 01       	movw	r30, r16
    318e:	86 8f       	std	Z+30, r24	; 0x1e
    3190:	0f 90       	pop	r0
    3192:	0f be       	out	0x3f, r0	; 63
    3194:	0f b6       	in	r0, 0x3f	; 63
    3196:	f8 94       	cli
    3198:	0f 92       	push	r0
    319a:	c5 8d       	ldd	r28, Z+29	; 0x1d
    319c:	1c 16       	cp	r1, r28
    319e:	9c f4       	brge	.+38     	; 0x31c6 <prvUnlockQueue+0x7c>
    31a0:	80 85       	ldd	r24, Z+8	; 0x08
    31a2:	81 11       	cpse	r24, r1
    31a4:	06 c0       	rjmp	.+12     	; 0x31b2 <prvUnlockQueue+0x68>
    31a6:	0f c0       	rjmp	.+30     	; 0x31c6 <prvUnlockQueue+0x7c>
    31a8:	f8 01       	movw	r30, r16
    31aa:	90 85       	ldd	r25, Z+8	; 0x08
    31ac:	91 11       	cpse	r25, r1
    31ae:	05 c0       	rjmp	.+10     	; 0x31ba <prvUnlockQueue+0x70>
    31b0:	0a c0       	rjmp	.+20     	; 0x31c6 <prvUnlockQueue+0x7c>
    31b2:	78 01       	movw	r14, r16
    31b4:	f8 e0       	ldi	r31, 0x08	; 8
    31b6:	ef 0e       	add	r14, r31
    31b8:	f1 1c       	adc	r15, r1
    31ba:	c7 01       	movw	r24, r14
    31bc:	4e d6       	rcall	.+3228   	; 0x3e5a <xTaskRemoveFromEventList>
    31be:	81 11       	cpse	r24, r1
    31c0:	ca d6       	rcall	.+3476   	; 0x3f56 <vTaskMissedYield>
    31c2:	c1 50       	subi	r28, 0x01	; 1
    31c4:	89 f7       	brne	.-30     	; 0x31a8 <prvUnlockQueue+0x5e>
    31c6:	8f ef       	ldi	r24, 0xFF	; 255
    31c8:	f8 01       	movw	r30, r16
    31ca:	85 8f       	std	Z+29, r24	; 0x1d
    31cc:	0f 90       	pop	r0
    31ce:	0f be       	out	0x3f, r0	; 63
    31d0:	cf 91       	pop	r28
    31d2:	1f 91       	pop	r17
    31d4:	0f 91       	pop	r16
    31d6:	ff 90       	pop	r15
    31d8:	ef 90       	pop	r14
    31da:	08 95       	ret

000031dc <xQueueGenericReset>:
    31dc:	cf 93       	push	r28
    31de:	df 93       	push	r29
    31e0:	ec 01       	movw	r28, r24
    31e2:	0f b6       	in	r0, 0x3f	; 63
    31e4:	f8 94       	cli
    31e6:	0f 92       	push	r0
    31e8:	e8 81       	ld	r30, Y
    31ea:	f9 81       	ldd	r31, Y+1	; 0x01
    31ec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    31ee:	2c 8d       	ldd	r18, Y+28	; 0x1c
    31f0:	90 e0       	ldi	r25, 0x00	; 0
    31f2:	30 e0       	ldi	r19, 0x00	; 0
    31f4:	82 9f       	mul	r24, r18
    31f6:	a0 01       	movw	r20, r0
    31f8:	83 9f       	mul	r24, r19
    31fa:	50 0d       	add	r21, r0
    31fc:	92 9f       	mul	r25, r18
    31fe:	50 0d       	add	r21, r0
    3200:	11 24       	eor	r1, r1
    3202:	4e 0f       	add	r20, r30
    3204:	5f 1f       	adc	r21, r31
    3206:	5d 83       	std	Y+5, r21	; 0x05
    3208:	4c 83       	std	Y+4, r20	; 0x04
    320a:	1a 8e       	std	Y+26, r1	; 0x1a
    320c:	fb 83       	std	Y+3, r31	; 0x03
    320e:	ea 83       	std	Y+2, r30	; 0x02
    3210:	01 97       	sbiw	r24, 0x01	; 1
    3212:	82 9f       	mul	r24, r18
    3214:	a0 01       	movw	r20, r0
    3216:	83 9f       	mul	r24, r19
    3218:	50 0d       	add	r21, r0
    321a:	92 9f       	mul	r25, r18
    321c:	50 0d       	add	r21, r0
    321e:	11 24       	eor	r1, r1
    3220:	cf 01       	movw	r24, r30
    3222:	84 0f       	add	r24, r20
    3224:	95 1f       	adc	r25, r21
    3226:	9f 83       	std	Y+7, r25	; 0x07
    3228:	8e 83       	std	Y+6, r24	; 0x06
    322a:	8f ef       	ldi	r24, 0xFF	; 255
    322c:	8d 8f       	std	Y+29, r24	; 0x1d
    322e:	8e 8f       	std	Y+30, r24	; 0x1e
    3230:	61 11       	cpse	r22, r1
    3232:	0a c0       	rjmp	.+20     	; 0x3248 <xQueueGenericReset+0x6c>
    3234:	88 85       	ldd	r24, Y+8	; 0x08
    3236:	88 23       	and	r24, r24
    3238:	69 f0       	breq	.+26     	; 0x3254 <xQueueGenericReset+0x78>
    323a:	ce 01       	movw	r24, r28
    323c:	08 96       	adiw	r24, 0x08	; 8
    323e:	0d d6       	rcall	.+3098   	; 0x3e5a <xTaskRemoveFromEventList>
    3240:	88 23       	and	r24, r24
    3242:	41 f0       	breq	.+16     	; 0x3254 <xQueueGenericReset+0x78>
    3244:	38 de       	rcall	.-912    	; 0x2eb6 <vPortYield>
    3246:	06 c0       	rjmp	.+12     	; 0x3254 <xQueueGenericReset+0x78>
    3248:	ce 01       	movw	r24, r28
    324a:	08 96       	adiw	r24, 0x08	; 8
    324c:	fb dc       	rcall	.-1546   	; 0x2c44 <vListInitialise>
    324e:	ce 01       	movw	r24, r28
    3250:	41 96       	adiw	r24, 0x11	; 17
    3252:	f8 dc       	rcall	.-1552   	; 0x2c44 <vListInitialise>
    3254:	0f 90       	pop	r0
    3256:	0f be       	out	0x3f, r0	; 63
    3258:	81 e0       	ldi	r24, 0x01	; 1
    325a:	df 91       	pop	r29
    325c:	cf 91       	pop	r28
    325e:	08 95       	ret

00003260 <xQueueGenericCreateStatic>:
    3260:	cf 93       	push	r28
    3262:	df 93       	push	r29
    3264:	e9 01       	movw	r28, r18
    3266:	20 97       	sbiw	r28, 0x00	; 0
    3268:	61 f0       	breq	.+24     	; 0x3282 <xQueueGenericCreateStatic+0x22>
    326a:	61 11       	cpse	r22, r1
    326c:	03 c0       	rjmp	.+6      	; 0x3274 <xQueueGenericCreateStatic+0x14>
    326e:	39 83       	std	Y+1, r19	; 0x01
    3270:	28 83       	st	Y, r18
    3272:	02 c0       	rjmp	.+4      	; 0x3278 <xQueueGenericCreateStatic+0x18>
    3274:	59 83       	std	Y+1, r21	; 0x01
    3276:	48 83       	st	Y, r20
    3278:	8b 8f       	std	Y+27, r24	; 0x1b
    327a:	6c 8f       	std	Y+28, r22	; 0x1c
    327c:	61 e0       	ldi	r22, 0x01	; 1
    327e:	ce 01       	movw	r24, r28
    3280:	ad df       	rcall	.-166    	; 0x31dc <xQueueGenericReset>
    3282:	ce 01       	movw	r24, r28
    3284:	df 91       	pop	r29
    3286:	cf 91       	pop	r28
    3288:	08 95       	ret

0000328a <xQueueGenericSend>:
    328a:	9f 92       	push	r9
    328c:	af 92       	push	r10
    328e:	bf 92       	push	r11
    3290:	cf 92       	push	r12
    3292:	df 92       	push	r13
    3294:	ef 92       	push	r14
    3296:	ff 92       	push	r15
    3298:	0f 93       	push	r16
    329a:	1f 93       	push	r17
    329c:	cf 93       	push	r28
    329e:	df 93       	push	r29
    32a0:	00 d0       	rcall	.+0      	; 0x32a2 <xQueueGenericSend+0x18>
    32a2:	1f 92       	push	r1
    32a4:	1f 92       	push	r1
    32a6:	cd b7       	in	r28, 0x3d	; 61
    32a8:	de b7       	in	r29, 0x3e	; 62
    32aa:	8c 01       	movw	r16, r24
    32ac:	6b 01       	movw	r12, r22
    32ae:	5d 83       	std	Y+5, r21	; 0x05
    32b0:	4c 83       	std	Y+4, r20	; 0x04
    32b2:	a2 2e       	mov	r10, r18
    32b4:	b1 2c       	mov	r11, r1
    32b6:	99 24       	eor	r9, r9
    32b8:	93 94       	inc	r9
    32ba:	7c 01       	movw	r14, r24
    32bc:	88 e0       	ldi	r24, 0x08	; 8
    32be:	e8 0e       	add	r14, r24
    32c0:	f1 1c       	adc	r15, r1
    32c2:	0f b6       	in	r0, 0x3f	; 63
    32c4:	f8 94       	cli
    32c6:	0f 92       	push	r0
    32c8:	f8 01       	movw	r30, r16
    32ca:	32 8d       	ldd	r19, Z+26	; 0x1a
    32cc:	93 8d       	ldd	r25, Z+27	; 0x1b
    32ce:	39 17       	cp	r19, r25
    32d0:	18 f0       	brcs	.+6      	; 0x32d8 <xQueueGenericSend+0x4e>
    32d2:	f2 e0       	ldi	r31, 0x02	; 2
    32d4:	af 12       	cpse	r10, r31
    32d6:	15 c0       	rjmp	.+42     	; 0x3302 <xQueueGenericSend+0x78>
    32d8:	4a 2d       	mov	r20, r10
    32da:	b6 01       	movw	r22, r12
    32dc:	c8 01       	movw	r24, r16
    32de:	bb de       	rcall	.-650    	; 0x3056 <prvCopyDataToQueue>
    32e0:	f8 01       	movw	r30, r16
    32e2:	91 89       	ldd	r25, Z+17	; 0x11
    32e4:	99 23       	and	r25, r25
    32e6:	39 f0       	breq	.+14     	; 0x32f6 <xQueueGenericSend+0x6c>
    32e8:	c8 01       	movw	r24, r16
    32ea:	41 96       	adiw	r24, 0x11	; 17
    32ec:	b6 d5       	rcall	.+2924   	; 0x3e5a <xTaskRemoveFromEventList>
    32ee:	88 23       	and	r24, r24
    32f0:	21 f0       	breq	.+8      	; 0x32fa <xQueueGenericSend+0x70>
    32f2:	e1 dd       	rcall	.-1086   	; 0x2eb6 <vPortYield>
    32f4:	02 c0       	rjmp	.+4      	; 0x32fa <xQueueGenericSend+0x70>
    32f6:	81 11       	cpse	r24, r1
    32f8:	de dd       	rcall	.-1092   	; 0x2eb6 <vPortYield>
    32fa:	0f 90       	pop	r0
    32fc:	0f be       	out	0x3f, r0	; 63
    32fe:	81 e0       	ldi	r24, 0x01	; 1
    3300:	45 c0       	rjmp	.+138    	; 0x338c <xQueueGenericSend+0x102>
    3302:	ec 81       	ldd	r30, Y+4	; 0x04
    3304:	fd 81       	ldd	r31, Y+5	; 0x05
    3306:	ef 2b       	or	r30, r31
    3308:	21 f4       	brne	.+8      	; 0x3312 <xQueueGenericSend+0x88>
    330a:	0f 90       	pop	r0
    330c:	0f be       	out	0x3f, r0	; 63
    330e:	80 e0       	ldi	r24, 0x00	; 0
    3310:	3d c0       	rjmp	.+122    	; 0x338c <xQueueGenericSend+0x102>
    3312:	b1 10       	cpse	r11, r1
    3314:	04 c0       	rjmp	.+8      	; 0x331e <xQueueGenericSend+0x94>
    3316:	ce 01       	movw	r24, r28
    3318:	01 96       	adiw	r24, 0x01	; 1
    331a:	e7 d5       	rcall	.+3022   	; 0x3eea <vTaskInternalSetTimeOutState>
    331c:	b9 2c       	mov	r11, r9
    331e:	0f 90       	pop	r0
    3320:	0f be       	out	0x3f, r0	; 63
    3322:	9f d3       	rcall	.+1854   	; 0x3a62 <vTaskSuspendAll>
    3324:	0f b6       	in	r0, 0x3f	; 63
    3326:	f8 94       	cli
    3328:	0f 92       	push	r0
    332a:	f8 01       	movw	r30, r16
    332c:	85 8d       	ldd	r24, Z+29	; 0x1d
    332e:	8f 3f       	cpi	r24, 0xFF	; 255
    3330:	09 f4       	brne	.+2      	; 0x3334 <xQueueGenericSend+0xaa>
    3332:	15 8e       	std	Z+29, r1	; 0x1d
    3334:	f8 01       	movw	r30, r16
    3336:	86 8d       	ldd	r24, Z+30	; 0x1e
    3338:	8f 3f       	cpi	r24, 0xFF	; 255
    333a:	09 f4       	brne	.+2      	; 0x333e <xQueueGenericSend+0xb4>
    333c:	16 8e       	std	Z+30, r1	; 0x1e
    333e:	0f 90       	pop	r0
    3340:	0f be       	out	0x3f, r0	; 63
    3342:	be 01       	movw	r22, r28
    3344:	6c 5f       	subi	r22, 0xFC	; 252
    3346:	7f 4f       	sbci	r23, 0xFF	; 255
    3348:	ce 01       	movw	r24, r28
    334a:	01 96       	adiw	r24, 0x01	; 1
    334c:	d9 d5       	rcall	.+2994   	; 0x3f00 <xTaskCheckForTimeOut>
    334e:	81 11       	cpse	r24, r1
    3350:	19 c0       	rjmp	.+50     	; 0x3384 <xQueueGenericSend+0xfa>
    3352:	0f b6       	in	r0, 0x3f	; 63
    3354:	f8 94       	cli
    3356:	0f 92       	push	r0
    3358:	f8 01       	movw	r30, r16
    335a:	92 8d       	ldd	r25, Z+26	; 0x1a
    335c:	83 8d       	ldd	r24, Z+27	; 0x1b
    335e:	0f 90       	pop	r0
    3360:	0f be       	out	0x3f, r0	; 63
    3362:	98 13       	cpse	r25, r24
    3364:	0b c0       	rjmp	.+22     	; 0x337c <xQueueGenericSend+0xf2>
    3366:	6c 81       	ldd	r22, Y+4	; 0x04
    3368:	7d 81       	ldd	r23, Y+5	; 0x05
    336a:	c7 01       	movw	r24, r14
    336c:	4b d5       	rcall	.+2710   	; 0x3e04 <vTaskPlaceOnEventList>
    336e:	c8 01       	movw	r24, r16
    3370:	ec de       	rcall	.-552    	; 0x314a <prvUnlockQueue>
    3372:	3e d4       	rcall	.+2172   	; 0x3bf0 <xTaskResumeAll>
    3374:	81 11       	cpse	r24, r1
    3376:	a5 cf       	rjmp	.-182    	; 0x32c2 <xQueueGenericSend+0x38>
    3378:	9e dd       	rcall	.-1220   	; 0x2eb6 <vPortYield>
    337a:	a3 cf       	rjmp	.-186    	; 0x32c2 <xQueueGenericSend+0x38>
    337c:	c8 01       	movw	r24, r16
    337e:	e5 de       	rcall	.-566    	; 0x314a <prvUnlockQueue>
    3380:	37 d4       	rcall	.+2158   	; 0x3bf0 <xTaskResumeAll>
    3382:	9f cf       	rjmp	.-194    	; 0x32c2 <xQueueGenericSend+0x38>
    3384:	c8 01       	movw	r24, r16
    3386:	e1 de       	rcall	.-574    	; 0x314a <prvUnlockQueue>
    3388:	33 d4       	rcall	.+2150   	; 0x3bf0 <xTaskResumeAll>
    338a:	80 e0       	ldi	r24, 0x00	; 0
    338c:	0f 90       	pop	r0
    338e:	0f 90       	pop	r0
    3390:	0f 90       	pop	r0
    3392:	0f 90       	pop	r0
    3394:	0f 90       	pop	r0
    3396:	df 91       	pop	r29
    3398:	cf 91       	pop	r28
    339a:	1f 91       	pop	r17
    339c:	0f 91       	pop	r16
    339e:	ff 90       	pop	r15
    33a0:	ef 90       	pop	r14
    33a2:	df 90       	pop	r13
    33a4:	cf 90       	pop	r12
    33a6:	bf 90       	pop	r11
    33a8:	af 90       	pop	r10
    33aa:	9f 90       	pop	r9
    33ac:	08 95       	ret

000033ae <xQueueCreateMutexStatic>:
    33ae:	cf 93       	push	r28
    33b0:	df 93       	push	r29
    33b2:	eb 01       	movw	r28, r22
    33b4:	20 97       	sbiw	r28, 0x00	; 0
    33b6:	a1 f0       	breq	.+40     	; 0x33e0 <xQueueCreateMutexStatic+0x32>
    33b8:	79 83       	std	Y+1, r23	; 0x01
    33ba:	68 83       	st	Y, r22
    33bc:	81 e0       	ldi	r24, 0x01	; 1
    33be:	8b 8f       	std	Y+27, r24	; 0x1b
    33c0:	1c 8e       	std	Y+28, r1	; 0x1c
    33c2:	61 e0       	ldi	r22, 0x01	; 1
    33c4:	ce 01       	movw	r24, r28
    33c6:	0a df       	rcall	.-492    	; 0x31dc <xQueueGenericReset>
    33c8:	1d 82       	std	Y+5, r1	; 0x05
    33ca:	1c 82       	std	Y+4, r1	; 0x04
    33cc:	19 82       	std	Y+1, r1	; 0x01
    33ce:	18 82       	st	Y, r1
    33d0:	1e 82       	std	Y+6, r1	; 0x06
    33d2:	20 e0       	ldi	r18, 0x00	; 0
    33d4:	40 e0       	ldi	r20, 0x00	; 0
    33d6:	50 e0       	ldi	r21, 0x00	; 0
    33d8:	60 e0       	ldi	r22, 0x00	; 0
    33da:	70 e0       	ldi	r23, 0x00	; 0
    33dc:	ce 01       	movw	r24, r28
    33de:	55 df       	rcall	.-342    	; 0x328a <xQueueGenericSend>
    33e0:	ce 01       	movw	r24, r28
    33e2:	df 91       	pop	r29
    33e4:	cf 91       	pop	r28
    33e6:	08 95       	ret

000033e8 <xQueueGenericSendFromISR>:
    33e8:	ef 92       	push	r14
    33ea:	ff 92       	push	r15
    33ec:	0f 93       	push	r16
    33ee:	1f 93       	push	r17
    33f0:	cf 93       	push	r28
    33f2:	df 93       	push	r29
    33f4:	8a 01       	movw	r16, r20
    33f6:	fc 01       	movw	r30, r24
    33f8:	52 8d       	ldd	r21, Z+26	; 0x1a
    33fa:	33 8d       	ldd	r19, Z+27	; 0x1b
    33fc:	53 17       	cp	r21, r19
    33fe:	10 f0       	brcs	.+4      	; 0x3404 <xQueueGenericSendFromISR+0x1c>
    3400:	22 30       	cpi	r18, 0x02	; 2
    3402:	e1 f4       	brne	.+56     	; 0x343c <xQueueGenericSendFromISR+0x54>
    3404:	42 2f       	mov	r20, r18
    3406:	78 01       	movw	r14, r16
    3408:	ec 01       	movw	r28, r24
    340a:	1e 8d       	ldd	r17, Y+30	; 0x1e
    340c:	24 de       	rcall	.-952    	; 0x3056 <prvCopyDataToQueue>
    340e:	1f 3f       	cpi	r17, 0xFF	; 255
    3410:	79 f4       	brne	.+30     	; 0x3430 <xQueueGenericSendFromISR+0x48>
    3412:	89 89       	ldd	r24, Y+17	; 0x11
    3414:	88 23       	and	r24, r24
    3416:	a1 f0       	breq	.+40     	; 0x3440 <xQueueGenericSendFromISR+0x58>
    3418:	ce 01       	movw	r24, r28
    341a:	41 96       	adiw	r24, 0x11	; 17
    341c:	1e d5       	rcall	.+2620   	; 0x3e5a <xTaskRemoveFromEventList>
    341e:	88 23       	and	r24, r24
    3420:	89 f0       	breq	.+34     	; 0x3444 <xQueueGenericSendFromISR+0x5c>
    3422:	e1 14       	cp	r14, r1
    3424:	f1 04       	cpc	r15, r1
    3426:	81 f0       	breq	.+32     	; 0x3448 <xQueueGenericSendFromISR+0x60>
    3428:	81 e0       	ldi	r24, 0x01	; 1
    342a:	f7 01       	movw	r30, r14
    342c:	80 83       	st	Z, r24
    342e:	0d c0       	rjmp	.+26     	; 0x344a <xQueueGenericSendFromISR+0x62>
    3430:	ff 24       	eor	r15, r15
    3432:	f3 94       	inc	r15
    3434:	f1 0e       	add	r15, r17
    3436:	fe 8e       	std	Y+30, r15	; 0x1e
    3438:	81 e0       	ldi	r24, 0x01	; 1
    343a:	07 c0       	rjmp	.+14     	; 0x344a <xQueueGenericSendFromISR+0x62>
    343c:	80 e0       	ldi	r24, 0x00	; 0
    343e:	05 c0       	rjmp	.+10     	; 0x344a <xQueueGenericSendFromISR+0x62>
    3440:	81 e0       	ldi	r24, 0x01	; 1
    3442:	03 c0       	rjmp	.+6      	; 0x344a <xQueueGenericSendFromISR+0x62>
    3444:	81 e0       	ldi	r24, 0x01	; 1
    3446:	01 c0       	rjmp	.+2      	; 0x344a <xQueueGenericSendFromISR+0x62>
    3448:	81 e0       	ldi	r24, 0x01	; 1
    344a:	df 91       	pop	r29
    344c:	cf 91       	pop	r28
    344e:	1f 91       	pop	r17
    3450:	0f 91       	pop	r16
    3452:	ff 90       	pop	r15
    3454:	ef 90       	pop	r14
    3456:	08 95       	ret

00003458 <xQueueReceive>:
    3458:	9f 92       	push	r9
    345a:	af 92       	push	r10
    345c:	bf 92       	push	r11
    345e:	cf 92       	push	r12
    3460:	df 92       	push	r13
    3462:	ef 92       	push	r14
    3464:	ff 92       	push	r15
    3466:	0f 93       	push	r16
    3468:	1f 93       	push	r17
    346a:	cf 93       	push	r28
    346c:	df 93       	push	r29
    346e:	00 d0       	rcall	.+0      	; 0x3470 <xQueueReceive+0x18>
    3470:	1f 92       	push	r1
    3472:	1f 92       	push	r1
    3474:	cd b7       	in	r28, 0x3d	; 61
    3476:	de b7       	in	r29, 0x3e	; 62
    3478:	8c 01       	movw	r16, r24
    347a:	5b 01       	movw	r10, r22
    347c:	5d 83       	std	Y+5, r21	; 0x05
    347e:	4c 83       	std	Y+4, r20	; 0x04
    3480:	e1 2c       	mov	r14, r1
    3482:	99 24       	eor	r9, r9
    3484:	93 94       	inc	r9
    3486:	6c 01       	movw	r12, r24
    3488:	81 e1       	ldi	r24, 0x11	; 17
    348a:	c8 0e       	add	r12, r24
    348c:	d1 1c       	adc	r13, r1
    348e:	0f b6       	in	r0, 0x3f	; 63
    3490:	f8 94       	cli
    3492:	0f 92       	push	r0
    3494:	f8 01       	movw	r30, r16
    3496:	f2 8c       	ldd	r15, Z+26	; 0x1a
    3498:	ff 20       	and	r15, r15
    349a:	91 f0       	breq	.+36     	; 0x34c0 <xQueueReceive+0x68>
    349c:	b5 01       	movw	r22, r10
    349e:	c8 01       	movw	r24, r16
    34a0:	3a de       	rcall	.-908    	; 0x3116 <prvCopyDataFromQueue>
    34a2:	fa 94       	dec	r15
    34a4:	f8 01       	movw	r30, r16
    34a6:	f2 8e       	std	Z+26, r15	; 0x1a
    34a8:	80 85       	ldd	r24, Z+8	; 0x08
    34aa:	88 23       	and	r24, r24
    34ac:	29 f0       	breq	.+10     	; 0x34b8 <xQueueReceive+0x60>
    34ae:	c8 01       	movw	r24, r16
    34b0:	08 96       	adiw	r24, 0x08	; 8
    34b2:	d3 d4       	rcall	.+2470   	; 0x3e5a <xTaskRemoveFromEventList>
    34b4:	81 11       	cpse	r24, r1
    34b6:	ff dc       	rcall	.-1538   	; 0x2eb6 <vPortYield>
    34b8:	0f 90       	pop	r0
    34ba:	0f be       	out	0x3f, r0	; 63
    34bc:	81 e0       	ldi	r24, 0x01	; 1
    34be:	44 c0       	rjmp	.+136    	; 0x3548 <xQueueReceive+0xf0>
    34c0:	2c 81       	ldd	r18, Y+4	; 0x04
    34c2:	3d 81       	ldd	r19, Y+5	; 0x05
    34c4:	23 2b       	or	r18, r19
    34c6:	21 f4       	brne	.+8      	; 0x34d0 <xQueueReceive+0x78>
    34c8:	0f 90       	pop	r0
    34ca:	0f be       	out	0x3f, r0	; 63
    34cc:	80 e0       	ldi	r24, 0x00	; 0
    34ce:	3c c0       	rjmp	.+120    	; 0x3548 <xQueueReceive+0xf0>
    34d0:	e1 10       	cpse	r14, r1
    34d2:	04 c0       	rjmp	.+8      	; 0x34dc <xQueueReceive+0x84>
    34d4:	ce 01       	movw	r24, r28
    34d6:	01 96       	adiw	r24, 0x01	; 1
    34d8:	08 d5       	rcall	.+2576   	; 0x3eea <vTaskInternalSetTimeOutState>
    34da:	e9 2c       	mov	r14, r9
    34dc:	0f 90       	pop	r0
    34de:	0f be       	out	0x3f, r0	; 63
    34e0:	c0 d2       	rcall	.+1408   	; 0x3a62 <vTaskSuspendAll>
    34e2:	0f b6       	in	r0, 0x3f	; 63
    34e4:	f8 94       	cli
    34e6:	0f 92       	push	r0
    34e8:	f8 01       	movw	r30, r16
    34ea:	85 8d       	ldd	r24, Z+29	; 0x1d
    34ec:	8f 3f       	cpi	r24, 0xFF	; 255
    34ee:	09 f4       	brne	.+2      	; 0x34f2 <xQueueReceive+0x9a>
    34f0:	15 8e       	std	Z+29, r1	; 0x1d
    34f2:	f8 01       	movw	r30, r16
    34f4:	96 8d       	ldd	r25, Z+30	; 0x1e
    34f6:	9f 3f       	cpi	r25, 0xFF	; 255
    34f8:	09 f4       	brne	.+2      	; 0x34fc <xQueueReceive+0xa4>
    34fa:	16 8e       	std	Z+30, r1	; 0x1e
    34fc:	0f 90       	pop	r0
    34fe:	0f be       	out	0x3f, r0	; 63
    3500:	be 01       	movw	r22, r28
    3502:	6c 5f       	subi	r22, 0xFC	; 252
    3504:	7f 4f       	sbci	r23, 0xFF	; 255
    3506:	ce 01       	movw	r24, r28
    3508:	01 96       	adiw	r24, 0x01	; 1
    350a:	fa d4       	rcall	.+2548   	; 0x3f00 <xTaskCheckForTimeOut>
    350c:	81 11       	cpse	r24, r1
    350e:	13 c0       	rjmp	.+38     	; 0x3536 <xQueueReceive+0xde>
    3510:	c8 01       	movw	r24, r16
    3512:	96 dd       	rcall	.-1236   	; 0x3040 <prvIsQueueEmpty>
    3514:	88 23       	and	r24, r24
    3516:	59 f0       	breq	.+22     	; 0x352e <xQueueReceive+0xd6>
    3518:	6c 81       	ldd	r22, Y+4	; 0x04
    351a:	7d 81       	ldd	r23, Y+5	; 0x05
    351c:	c6 01       	movw	r24, r12
    351e:	72 d4       	rcall	.+2276   	; 0x3e04 <vTaskPlaceOnEventList>
    3520:	c8 01       	movw	r24, r16
    3522:	13 de       	rcall	.-986    	; 0x314a <prvUnlockQueue>
    3524:	65 d3       	rcall	.+1738   	; 0x3bf0 <xTaskResumeAll>
    3526:	81 11       	cpse	r24, r1
    3528:	b2 cf       	rjmp	.-156    	; 0x348e <xQueueReceive+0x36>
    352a:	c5 dc       	rcall	.-1654   	; 0x2eb6 <vPortYield>
    352c:	b0 cf       	rjmp	.-160    	; 0x348e <xQueueReceive+0x36>
    352e:	c8 01       	movw	r24, r16
    3530:	0c de       	rcall	.-1000   	; 0x314a <prvUnlockQueue>
    3532:	5e d3       	rcall	.+1724   	; 0x3bf0 <xTaskResumeAll>
    3534:	ac cf       	rjmp	.-168    	; 0x348e <xQueueReceive+0x36>
    3536:	c8 01       	movw	r24, r16
    3538:	08 de       	rcall	.-1008   	; 0x314a <prvUnlockQueue>
    353a:	5a d3       	rcall	.+1716   	; 0x3bf0 <xTaskResumeAll>
    353c:	c8 01       	movw	r24, r16
    353e:	80 dd       	rcall	.-1280   	; 0x3040 <prvIsQueueEmpty>
    3540:	88 23       	and	r24, r24
    3542:	09 f4       	brne	.+2      	; 0x3546 <xQueueReceive+0xee>
    3544:	a4 cf       	rjmp	.-184    	; 0x348e <xQueueReceive+0x36>
    3546:	80 e0       	ldi	r24, 0x00	; 0
    3548:	0f 90       	pop	r0
    354a:	0f 90       	pop	r0
    354c:	0f 90       	pop	r0
    354e:	0f 90       	pop	r0
    3550:	0f 90       	pop	r0
    3552:	df 91       	pop	r29
    3554:	cf 91       	pop	r28
    3556:	1f 91       	pop	r17
    3558:	0f 91       	pop	r16
    355a:	ff 90       	pop	r15
    355c:	ef 90       	pop	r14
    355e:	df 90       	pop	r13
    3560:	cf 90       	pop	r12
    3562:	bf 90       	pop	r11
    3564:	af 90       	pop	r10
    3566:	9f 90       	pop	r9
    3568:	08 95       	ret

0000356a <xQueueSemaphoreTake>:
    356a:	bf 92       	push	r11
    356c:	cf 92       	push	r12
    356e:	df 92       	push	r13
    3570:	ef 92       	push	r14
    3572:	ff 92       	push	r15
    3574:	0f 93       	push	r16
    3576:	1f 93       	push	r17
    3578:	cf 93       	push	r28
    357a:	df 93       	push	r29
    357c:	00 d0       	rcall	.+0      	; 0x357e <xQueueSemaphoreTake+0x14>
    357e:	1f 92       	push	r1
    3580:	1f 92       	push	r1
    3582:	cd b7       	in	r28, 0x3d	; 61
    3584:	de b7       	in	r29, 0x3e	; 62
    3586:	8c 01       	movw	r16, r24
    3588:	7d 83       	std	Y+5, r23	; 0x05
    358a:	6c 83       	std	Y+4, r22	; 0x04
    358c:	b1 2c       	mov	r11, r1
    358e:	d1 2c       	mov	r13, r1
    3590:	cc 24       	eor	r12, r12
    3592:	c3 94       	inc	r12
    3594:	7c 01       	movw	r14, r24
    3596:	81 e1       	ldi	r24, 0x11	; 17
    3598:	e8 0e       	add	r14, r24
    359a:	f1 1c       	adc	r15, r1
    359c:	0f b6       	in	r0, 0x3f	; 63
    359e:	f8 94       	cli
    35a0:	0f 92       	push	r0
    35a2:	d8 01       	movw	r26, r16
    35a4:	5a 96       	adiw	r26, 0x1a	; 26
    35a6:	9c 91       	ld	r25, X
    35a8:	5a 97       	sbiw	r26, 0x1a	; 26
    35aa:	99 23       	and	r25, r25
    35ac:	d1 f0       	breq	.+52     	; 0x35e2 <xQueueSemaphoreTake+0x78>
    35ae:	91 50       	subi	r25, 0x01	; 1
    35b0:	5a 96       	adiw	r26, 0x1a	; 26
    35b2:	9c 93       	st	X, r25
    35b4:	5a 97       	sbiw	r26, 0x1a	; 26
    35b6:	8d 91       	ld	r24, X+
    35b8:	9c 91       	ld	r25, X
    35ba:	89 2b       	or	r24, r25
    35bc:	21 f4       	brne	.+8      	; 0x35c6 <xQueueSemaphoreTake+0x5c>
    35be:	df d5       	rcall	.+3006   	; 0x417e <pvTaskIncrementMutexHeldCount>
    35c0:	f8 01       	movw	r30, r16
    35c2:	95 83       	std	Z+5, r25	; 0x05
    35c4:	84 83       	std	Z+4, r24	; 0x04
    35c6:	d8 01       	movw	r26, r16
    35c8:	18 96       	adiw	r26, 0x08	; 8
    35ca:	8c 91       	ld	r24, X
    35cc:	88 23       	and	r24, r24
    35ce:	29 f0       	breq	.+10     	; 0x35da <xQueueSemaphoreTake+0x70>
    35d0:	c8 01       	movw	r24, r16
    35d2:	08 96       	adiw	r24, 0x08	; 8
    35d4:	42 d4       	rcall	.+2180   	; 0x3e5a <xTaskRemoveFromEventList>
    35d6:	81 11       	cpse	r24, r1
    35d8:	6e dc       	rcall	.-1828   	; 0x2eb6 <vPortYield>
    35da:	0f 90       	pop	r0
    35dc:	0f be       	out	0x3f, r0	; 63
    35de:	81 e0       	ldi	r24, 0x01	; 1
    35e0:	70 c0       	rjmp	.+224    	; 0x36c2 <xQueueSemaphoreTake+0x158>
    35e2:	2c 81       	ldd	r18, Y+4	; 0x04
    35e4:	3d 81       	ldd	r19, Y+5	; 0x05
    35e6:	23 2b       	or	r18, r19
    35e8:	21 f4       	brne	.+8      	; 0x35f2 <xQueueSemaphoreTake+0x88>
    35ea:	0f 90       	pop	r0
    35ec:	0f be       	out	0x3f, r0	; 63
    35ee:	80 e0       	ldi	r24, 0x00	; 0
    35f0:	68 c0       	rjmp	.+208    	; 0x36c2 <xQueueSemaphoreTake+0x158>
    35f2:	d1 10       	cpse	r13, r1
    35f4:	04 c0       	rjmp	.+8      	; 0x35fe <xQueueSemaphoreTake+0x94>
    35f6:	ce 01       	movw	r24, r28
    35f8:	01 96       	adiw	r24, 0x01	; 1
    35fa:	77 d4       	rcall	.+2286   	; 0x3eea <vTaskInternalSetTimeOutState>
    35fc:	dc 2c       	mov	r13, r12
    35fe:	0f 90       	pop	r0
    3600:	0f be       	out	0x3f, r0	; 63
    3602:	2f d2       	rcall	.+1118   	; 0x3a62 <vTaskSuspendAll>
    3604:	0f b6       	in	r0, 0x3f	; 63
    3606:	f8 94       	cli
    3608:	0f 92       	push	r0
    360a:	f8 01       	movw	r30, r16
    360c:	95 8d       	ldd	r25, Z+29	; 0x1d
    360e:	9f 3f       	cpi	r25, 0xFF	; 255
    3610:	09 f4       	brne	.+2      	; 0x3614 <xQueueSemaphoreTake+0xaa>
    3612:	15 8e       	std	Z+29, r1	; 0x1d
    3614:	d8 01       	movw	r26, r16
    3616:	5e 96       	adiw	r26, 0x1e	; 30
    3618:	9c 91       	ld	r25, X
    361a:	5e 97       	sbiw	r26, 0x1e	; 30
    361c:	9f 3f       	cpi	r25, 0xFF	; 255
    361e:	11 f4       	brne	.+4      	; 0x3624 <xQueueSemaphoreTake+0xba>
    3620:	5e 96       	adiw	r26, 0x1e	; 30
    3622:	1c 92       	st	X, r1
    3624:	0f 90       	pop	r0
    3626:	0f be       	out	0x3f, r0	; 63
    3628:	be 01       	movw	r22, r28
    362a:	6c 5f       	subi	r22, 0xFC	; 252
    362c:	7f 4f       	sbci	r23, 0xFF	; 255
    362e:	ce 01       	movw	r24, r28
    3630:	01 96       	adiw	r24, 0x01	; 1
    3632:	66 d4       	rcall	.+2252   	; 0x3f00 <xTaskCheckForTimeOut>
    3634:	81 11       	cpse	r24, r1
    3636:	21 c0       	rjmp	.+66     	; 0x367a <xQueueSemaphoreTake+0x110>
    3638:	c8 01       	movw	r24, r16
    363a:	02 dd       	rcall	.-1532   	; 0x3040 <prvIsQueueEmpty>
    363c:	88 23       	and	r24, r24
    363e:	c9 f0       	breq	.+50     	; 0x3672 <xQueueSemaphoreTake+0x108>
    3640:	f8 01       	movw	r30, r16
    3642:	20 81       	ld	r18, Z
    3644:	31 81       	ldd	r19, Z+1	; 0x01
    3646:	23 2b       	or	r18, r19
    3648:	49 f4       	brne	.+18     	; 0x365c <xQueueSemaphoreTake+0xf2>
    364a:	0f b6       	in	r0, 0x3f	; 63
    364c:	f8 94       	cli
    364e:	0f 92       	push	r0
    3650:	84 81       	ldd	r24, Z+4	; 0x04
    3652:	95 81       	ldd	r25, Z+5	; 0x05
    3654:	92 d4       	rcall	.+2340   	; 0x3f7a <xTaskPriorityInherit>
    3656:	b8 2e       	mov	r11, r24
    3658:	0f 90       	pop	r0
    365a:	0f be       	out	0x3f, r0	; 63
    365c:	6c 81       	ldd	r22, Y+4	; 0x04
    365e:	7d 81       	ldd	r23, Y+5	; 0x05
    3660:	c7 01       	movw	r24, r14
    3662:	d0 d3       	rcall	.+1952   	; 0x3e04 <vTaskPlaceOnEventList>
    3664:	c8 01       	movw	r24, r16
    3666:	71 dd       	rcall	.-1310   	; 0x314a <prvUnlockQueue>
    3668:	c3 d2       	rcall	.+1414   	; 0x3bf0 <xTaskResumeAll>
    366a:	81 11       	cpse	r24, r1
    366c:	97 cf       	rjmp	.-210    	; 0x359c <xQueueSemaphoreTake+0x32>
    366e:	23 dc       	rcall	.-1978   	; 0x2eb6 <vPortYield>
    3670:	95 cf       	rjmp	.-214    	; 0x359c <xQueueSemaphoreTake+0x32>
    3672:	c8 01       	movw	r24, r16
    3674:	6a dd       	rcall	.-1324   	; 0x314a <prvUnlockQueue>
    3676:	bc d2       	rcall	.+1400   	; 0x3bf0 <xTaskResumeAll>
    3678:	91 cf       	rjmp	.-222    	; 0x359c <xQueueSemaphoreTake+0x32>
    367a:	c8 01       	movw	r24, r16
    367c:	66 dd       	rcall	.-1332   	; 0x314a <prvUnlockQueue>
    367e:	b8 d2       	rcall	.+1392   	; 0x3bf0 <xTaskResumeAll>
    3680:	c8 01       	movw	r24, r16
    3682:	de dc       	rcall	.-1604   	; 0x3040 <prvIsQueueEmpty>
    3684:	88 23       	and	r24, r24
    3686:	09 f4       	brne	.+2      	; 0x368a <xQueueSemaphoreTake+0x120>
    3688:	89 cf       	rjmp	.-238    	; 0x359c <xQueueSemaphoreTake+0x32>
    368a:	bb 20       	and	r11, r11
    368c:	c9 f0       	breq	.+50     	; 0x36c0 <xQueueSemaphoreTake+0x156>
    368e:	0f b6       	in	r0, 0x3f	; 63
    3690:	f8 94       	cli
    3692:	0f 92       	push	r0
    3694:	f8 01       	movw	r30, r16
    3696:	81 89       	ldd	r24, Z+17	; 0x11
    3698:	88 23       	and	r24, r24
    369a:	39 f0       	breq	.+14     	; 0x36aa <xQueueSemaphoreTake+0x140>
    369c:	06 88       	ldd	r0, Z+22	; 0x16
    369e:	f7 89       	ldd	r31, Z+23	; 0x17
    36a0:	e0 2d       	mov	r30, r0
    36a2:	80 81       	ld	r24, Z
    36a4:	64 e0       	ldi	r22, 0x04	; 4
    36a6:	68 1b       	sub	r22, r24
    36a8:	01 c0       	rjmp	.+2      	; 0x36ac <xQueueSemaphoreTake+0x142>
    36aa:	60 e0       	ldi	r22, 0x00	; 0
    36ac:	d8 01       	movw	r26, r16
    36ae:	14 96       	adiw	r26, 0x04	; 4
    36b0:	8d 91       	ld	r24, X+
    36b2:	9c 91       	ld	r25, X
    36b4:	15 97       	sbiw	r26, 0x05	; 5
    36b6:	13 d5       	rcall	.+2598   	; 0x40de <vTaskPriorityDisinheritAfterTimeout>
    36b8:	0f 90       	pop	r0
    36ba:	0f be       	out	0x3f, r0	; 63
    36bc:	80 e0       	ldi	r24, 0x00	; 0
    36be:	01 c0       	rjmp	.+2      	; 0x36c2 <xQueueSemaphoreTake+0x158>
    36c0:	80 e0       	ldi	r24, 0x00	; 0
    36c2:	0f 90       	pop	r0
    36c4:	0f 90       	pop	r0
    36c6:	0f 90       	pop	r0
    36c8:	0f 90       	pop	r0
    36ca:	0f 90       	pop	r0
    36cc:	df 91       	pop	r29
    36ce:	cf 91       	pop	r28
    36d0:	1f 91       	pop	r17
    36d2:	0f 91       	pop	r16
    36d4:	ff 90       	pop	r15
    36d6:	ef 90       	pop	r14
    36d8:	df 90       	pop	r13
    36da:	cf 90       	pop	r12
    36dc:	bf 90       	pop	r11
    36de:	08 95       	ret

000036e0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
    {
    36e0:	cf 93       	push	r28
    36e2:	df 93       	push	r29
    36e4:	ec 01       	movw	r28, r24
        will not actually cause the task to block, just place it on a blocked
        list.  It will not block until the scheduler is unlocked - at which
        time a yield will be performed.  If an item is added to the queue while
        the queue is locked, and the calling task blocks on the queue, then the
        calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    36e6:	0f b6       	in	r0, 0x3f	; 63
    36e8:	f8 94       	cli
    36ea:	0f 92       	push	r0
    36ec:	8d 8d       	ldd	r24, Y+29	; 0x1d
    36ee:	8f 3f       	cpi	r24, 0xFF	; 255
    36f0:	09 f4       	brne	.+2      	; 0x36f4 <vQueueWaitForMessageRestricted+0x14>
    36f2:	1d 8e       	std	Y+29, r1	; 0x1d
    36f4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    36f6:	8f 3f       	cpi	r24, 0xFF	; 255
    36f8:	09 f4       	brne	.+2      	; 0x36fc <vQueueWaitForMessageRestricted+0x1c>
    36fa:	1e 8e       	std	Y+30, r1	; 0x1e
    36fc:	0f 90       	pop	r0
    36fe:	0f be       	out	0x3f, r0	; 63
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    3700:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3702:	81 11       	cpse	r24, r1
    3704:	03 c0       	rjmp	.+6      	; 0x370c <vQueueWaitForMessageRestricted+0x2c>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    3706:	ce 01       	movw	r24, r28
    3708:	41 96       	adiw	r24, 0x11	; 17
    370a:	8e d3       	rcall	.+1820   	; 0x3e28 <vTaskPlaceOnEventListRestricted>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
        prvUnlockQueue( pxQueue );
    370c:	ce 01       	movw	r24, r28
    370e:	1d dd       	rcall	.-1478   	; 0x314a <prvUnlockQueue>
    }
    3710:	df 91       	pop	r29
    3712:	cf 91       	pop	r28
    3714:	08 95       	ret

00003716 <prvResetNextTaskUnblockTime>:
    3716:	e0 91 c6 0d 	lds	r30, 0x0DC6	; 0x800dc6 <pxDelayedTaskList>
    371a:	f0 91 c7 0d 	lds	r31, 0x0DC7	; 0x800dc7 <pxDelayedTaskList+0x1>
    371e:	80 81       	ld	r24, Z
    3720:	81 11       	cpse	r24, r1
    3722:	07 c0       	rjmp	.+14     	; 0x3732 <prvResetNextTaskUnblockTime+0x1c>
    3724:	8f ef       	ldi	r24, 0xFF	; 255
    3726:	9f ef       	ldi	r25, 0xFF	; 255
    3728:	90 93 a7 0d 	sts	0x0DA7, r25	; 0x800da7 <xNextTaskUnblockTime+0x1>
    372c:	80 93 a6 0d 	sts	0x0DA6, r24	; 0x800da6 <xNextTaskUnblockTime>
    3730:	08 95       	ret
    3732:	e0 91 c6 0d 	lds	r30, 0x0DC6	; 0x800dc6 <pxDelayedTaskList>
    3736:	f0 91 c7 0d 	lds	r31, 0x0DC7	; 0x800dc7 <pxDelayedTaskList+0x1>
    373a:	05 80       	ldd	r0, Z+5	; 0x05
    373c:	f6 81       	ldd	r31, Z+6	; 0x06
    373e:	e0 2d       	mov	r30, r0
    3740:	06 80       	ldd	r0, Z+6	; 0x06
    3742:	f7 81       	ldd	r31, Z+7	; 0x07
    3744:	e0 2d       	mov	r30, r0
    3746:	82 81       	ldd	r24, Z+2	; 0x02
    3748:	93 81       	ldd	r25, Z+3	; 0x03
    374a:	90 93 a7 0d 	sts	0x0DA7, r25	; 0x800da7 <xNextTaskUnblockTime+0x1>
    374e:	80 93 a6 0d 	sts	0x0DA6, r24	; 0x800da6 <xNextTaskUnblockTime>
    3752:	08 95       	ret

00003754 <prvAddCurrentTaskToDelayedList>:
    3754:	0f 93       	push	r16
    3756:	1f 93       	push	r17
    3758:	cf 93       	push	r28
    375a:	df 93       	push	r29
    375c:	ec 01       	movw	r28, r24
    375e:	00 91 ae 0d 	lds	r16, 0x0DAE	; 0x800dae <xTickCount>
    3762:	10 91 af 0d 	lds	r17, 0x0DAF	; 0x800daf <xTickCount+0x1>
    3766:	80 91 ec 0d 	lds	r24, 0x0DEC	; 0x800dec <pxCurrentTCB>
    376a:	90 91 ed 0d 	lds	r25, 0x0DED	; 0x800ded <pxCurrentTCB+0x1>
    376e:	02 96       	adiw	r24, 0x02	; 2
    3770:	cd da       	rcall	.-2662   	; 0x2d0c <uxListRemove>
    3772:	c0 0f       	add	r28, r16
    3774:	d1 1f       	adc	r29, r17
    3776:	e0 91 ec 0d 	lds	r30, 0x0DEC	; 0x800dec <pxCurrentTCB>
    377a:	f0 91 ed 0d 	lds	r31, 0x0DED	; 0x800ded <pxCurrentTCB+0x1>
    377e:	d3 83       	std	Z+3, r29	; 0x03
    3780:	c2 83       	std	Z+2, r28	; 0x02
    3782:	c0 17       	cp	r28, r16
    3784:	d1 07       	cpc	r29, r17
    3786:	60 f4       	brcc	.+24     	; 0x37a0 <prvAddCurrentTaskToDelayedList+0x4c>
    3788:	60 91 ec 0d 	lds	r22, 0x0DEC	; 0x800dec <pxCurrentTCB>
    378c:	70 91 ed 0d 	lds	r23, 0x0DED	; 0x800ded <pxCurrentTCB+0x1>
    3790:	80 91 c4 0d 	lds	r24, 0x0DC4	; 0x800dc4 <pxOverflowDelayedTaskList>
    3794:	90 91 c5 0d 	lds	r25, 0x0DC5	; 0x800dc5 <pxOverflowDelayedTaskList+0x1>
    3798:	6e 5f       	subi	r22, 0xFE	; 254
    379a:	7f 4f       	sbci	r23, 0xFF	; 255
    379c:	86 da       	rcall	.-2804   	; 0x2caa <vListInsert>
    379e:	16 c0       	rjmp	.+44     	; 0x37cc <prvAddCurrentTaskToDelayedList+0x78>
    37a0:	60 91 ec 0d 	lds	r22, 0x0DEC	; 0x800dec <pxCurrentTCB>
    37a4:	70 91 ed 0d 	lds	r23, 0x0DED	; 0x800ded <pxCurrentTCB+0x1>
    37a8:	80 91 c6 0d 	lds	r24, 0x0DC6	; 0x800dc6 <pxDelayedTaskList>
    37ac:	90 91 c7 0d 	lds	r25, 0x0DC7	; 0x800dc7 <pxDelayedTaskList+0x1>
    37b0:	6e 5f       	subi	r22, 0xFE	; 254
    37b2:	7f 4f       	sbci	r23, 0xFF	; 255
    37b4:	7a da       	rcall	.-2828   	; 0x2caa <vListInsert>
    37b6:	80 91 a6 0d 	lds	r24, 0x0DA6	; 0x800da6 <xNextTaskUnblockTime>
    37ba:	90 91 a7 0d 	lds	r25, 0x0DA7	; 0x800da7 <xNextTaskUnblockTime+0x1>
    37be:	c8 17       	cp	r28, r24
    37c0:	d9 07       	cpc	r29, r25
    37c2:	20 f4       	brcc	.+8      	; 0x37cc <prvAddCurrentTaskToDelayedList+0x78>
    37c4:	d0 93 a7 0d 	sts	0x0DA7, r29	; 0x800da7 <xNextTaskUnblockTime+0x1>
    37c8:	c0 93 a6 0d 	sts	0x0DA6, r28	; 0x800da6 <xNextTaskUnblockTime>
    37cc:	df 91       	pop	r29
    37ce:	cf 91       	pop	r28
    37d0:	1f 91       	pop	r17
    37d2:	0f 91       	pop	r16
    37d4:	08 95       	ret

000037d6 <xTaskCreateStatic>:
    37d6:	6f 92       	push	r6
    37d8:	7f 92       	push	r7
    37da:	8f 92       	push	r8
    37dc:	9f 92       	push	r9
    37de:	af 92       	push	r10
    37e0:	bf 92       	push	r11
    37e2:	cf 92       	push	r12
    37e4:	df 92       	push	r13
    37e6:	ef 92       	push	r14
    37e8:	ff 92       	push	r15
    37ea:	0f 93       	push	r16
    37ec:	cf 93       	push	r28
    37ee:	df 93       	push	r29
    37f0:	4c 01       	movw	r8, r24
    37f2:	eb 01       	movw	r28, r22
    37f4:	5a 01       	movw	r10, r20
    37f6:	39 01       	movw	r6, r18
    37f8:	c1 14       	cp	r12, r1
    37fa:	d1 04       	cpc	r13, r1
    37fc:	09 f4       	brne	.+2      	; 0x3800 <xTaskCreateStatic+0x2a>
    37fe:	cc c0       	rjmp	.+408    	; 0x3998 <xTaskCreateStatic+0x1c2>
    3800:	e1 14       	cp	r14, r1
    3802:	f1 04       	cpc	r15, r1
    3804:	09 f4       	brne	.+2      	; 0x3808 <xTaskCreateStatic+0x32>
    3806:	cb c0       	rjmp	.+406    	; 0x399e <xTaskCreateStatic+0x1c8>
    3808:	f6 01       	movw	r30, r12
    380a:	f0 8e       	std	Z+24, r15	; 0x18
    380c:	e7 8a       	std	Z+23, r14	; 0x17
    380e:	65 ea       	ldi	r22, 0xA5	; 165
    3810:	70 e0       	ldi	r23, 0x00	; 0
    3812:	c7 01       	movw	r24, r14
    3814:	0e 94 91 28 	call	0x5122	; 0x5122 <memset>
    3818:	f1 e0       	ldi	r31, 0x01	; 1
    381a:	af 1a       	sub	r10, r31
    381c:	b1 08       	sbc	r11, r1
    381e:	f6 01       	movw	r30, r12
    3820:	87 89       	ldd	r24, Z+23	; 0x17
    3822:	90 8d       	ldd	r25, Z+24	; 0x18
    3824:	a8 0e       	add	r10, r24
    3826:	b9 1e       	adc	r11, r25
    3828:	88 81       	ld	r24, Y
    382a:	81 8f       	std	Z+25, r24	; 0x19
    382c:	88 81       	ld	r24, Y
    382e:	88 23       	and	r24, r24
    3830:	89 f0       	breq	.+34     	; 0x3854 <xTaskCreateStatic+0x7e>
    3832:	d6 01       	movw	r26, r12
    3834:	5a 96       	adiw	r26, 0x1a	; 26
    3836:	fe 01       	movw	r30, r28
    3838:	31 96       	adiw	r30, 0x01	; 1
    383a:	ae 01       	movw	r20, r28
    383c:	48 5f       	subi	r20, 0xF8	; 248
    383e:	5f 4f       	sbci	r21, 0xFF	; 255
    3840:	cf 01       	movw	r24, r30
    3842:	21 91       	ld	r18, Z+
    3844:	2d 93       	st	X+, r18
    3846:	ec 01       	movw	r28, r24
    3848:	88 81       	ld	r24, Y
    384a:	88 23       	and	r24, r24
    384c:	19 f0       	breq	.+6      	; 0x3854 <xTaskCreateStatic+0x7e>
    384e:	e4 17       	cp	r30, r20
    3850:	f5 07       	cpc	r31, r21
    3852:	b1 f7       	brne	.-20     	; 0x3840 <xTaskCreateStatic+0x6a>
    3854:	f6 01       	movw	r30, r12
    3856:	10 a2       	std	Z+32, r1	; 0x20
    3858:	04 30       	cpi	r16, 0x04	; 4
    385a:	08 f0       	brcs	.+2      	; 0x385e <xTaskCreateStatic+0x88>
    385c:	03 e0       	ldi	r16, 0x03	; 3
    385e:	e6 01       	movw	r28, r12
    3860:	0e 8b       	std	Y+22, r16	; 0x16
    3862:	09 a3       	std	Y+33, r16	; 0x21
    3864:	1a a2       	std	Y+34, r1	; 0x22
    3866:	22 96       	adiw	r28, 0x02	; 2
    3868:	ce 01       	movw	r24, r28
    386a:	fa d9       	rcall	.-3084   	; 0x2c60 <vListInitialiseItem>
    386c:	c6 01       	movw	r24, r12
    386e:	0c 96       	adiw	r24, 0x0c	; 12
    3870:	f7 d9       	rcall	.-3090   	; 0x2c60 <vListInitialiseItem>
    3872:	f6 01       	movw	r30, r12
    3874:	d1 86       	std	Z+9, r13	; 0x09
    3876:	c0 86       	std	Z+8, r12	; 0x08
    3878:	84 e0       	ldi	r24, 0x04	; 4
    387a:	90 e0       	ldi	r25, 0x00	; 0
    387c:	80 1b       	sub	r24, r16
    387e:	91 09       	sbc	r25, r1
    3880:	95 87       	std	Z+13, r25	; 0x0d
    3882:	84 87       	std	Z+12, r24	; 0x0c
    3884:	d3 8a       	std	Z+19, r13	; 0x13
    3886:	c2 8a       	std	Z+18, r12	; 0x12
    3888:	14 a2       	std	Z+36, r1	; 0x24
    388a:	13 a2       	std	Z+35, r1	; 0x23
    388c:	15 a2       	std	Z+37, r1	; 0x25
    388e:	16 a2       	std	Z+38, r1	; 0x26
    3890:	17 a2       	std	Z+39, r1	; 0x27
    3892:	10 a6       	std	Z+40, r1	; 0x28
    3894:	11 a6       	std	Z+41, r1	; 0x29
    3896:	a3 01       	movw	r20, r6
    3898:	b4 01       	movw	r22, r8
    389a:	c5 01       	movw	r24, r10
    389c:	5e da       	rcall	.-2884   	; 0x2d5a <pxPortInitialiseStack>
    389e:	f6 01       	movw	r30, r12
    38a0:	91 83       	std	Z+1, r25	; 0x01
    38a2:	80 83       	st	Z, r24
    38a4:	0f b6       	in	r0, 0x3f	; 63
    38a6:	f8 94       	cli
    38a8:	0f 92       	push	r0
    38aa:	80 91 b0 0d 	lds	r24, 0x0DB0	; 0x800db0 <uxCurrentNumberOfTasks>
    38ae:	8f 5f       	subi	r24, 0xFF	; 255
    38b0:	80 93 b0 0d 	sts	0x0DB0, r24	; 0x800db0 <uxCurrentNumberOfTasks>
    38b4:	80 91 ec 0d 	lds	r24, 0x0DEC	; 0x800dec <pxCurrentTCB>
    38b8:	90 91 ed 0d 	lds	r25, 0x0DED	; 0x800ded <pxCurrentTCB+0x1>
    38bc:	89 2b       	or	r24, r25
    38be:	69 f5       	brne	.+90     	; 0x391a <xTaskCreateStatic+0x144>
    38c0:	d0 92 ed 0d 	sts	0x0DED, r13	; 0x800ded <pxCurrentTCB+0x1>
    38c4:	c0 92 ec 0d 	sts	0x0DEC, r12	; 0x800dec <pxCurrentTCB>
    38c8:	80 91 b0 0d 	lds	r24, 0x0DB0	; 0x800db0 <uxCurrentNumberOfTasks>
    38cc:	81 30       	cpi	r24, 0x01	; 1
    38ce:	b1 f5       	brne	.+108    	; 0x393c <xTaskCreateStatic+0x166>
    38d0:	88 ec       	ldi	r24, 0xC8	; 200
    38d2:	9d e0       	ldi	r25, 0x0D	; 13
    38d4:	b7 d9       	rcall	.-3218   	; 0x2c44 <vListInitialise>
    38d6:	81 ed       	ldi	r24, 0xD1	; 209
    38d8:	9d e0       	ldi	r25, 0x0D	; 13
    38da:	b4 d9       	rcall	.-3224   	; 0x2c44 <vListInitialise>
    38dc:	8a ed       	ldi	r24, 0xDA	; 218
    38de:	9d e0       	ldi	r25, 0x0D	; 13
    38e0:	b1 d9       	rcall	.-3230   	; 0x2c44 <vListInitialise>
    38e2:	83 ee       	ldi	r24, 0xE3	; 227
    38e4:	9d e0       	ldi	r25, 0x0D	; 13
    38e6:	ae d9       	rcall	.-3236   	; 0x2c44 <vListInitialise>
    38e8:	8a e9       	ldi	r24, 0x9A	; 154
    38ea:	9d e0       	ldi	r25, 0x0D	; 13
    38ec:	ab d9       	rcall	.-3242   	; 0x2c44 <vListInitialise>
    38ee:	81 e9       	ldi	r24, 0x91	; 145
    38f0:	9d e0       	ldi	r25, 0x0D	; 13
    38f2:	a8 d9       	rcall	.-3248   	; 0x2c44 <vListInitialise>
    38f4:	8b eb       	ldi	r24, 0xBB	; 187
    38f6:	9d e0       	ldi	r25, 0x0D	; 13
    38f8:	a5 d9       	rcall	.-3254   	; 0x2c44 <vListInitialise>
    38fa:	82 eb       	ldi	r24, 0xB2	; 178
    38fc:	9d e0       	ldi	r25, 0x0D	; 13
    38fe:	a2 d9       	rcall	.-3260   	; 0x2c44 <vListInitialise>
    3900:	8a e9       	ldi	r24, 0x9A	; 154
    3902:	9d e0       	ldi	r25, 0x0D	; 13
    3904:	90 93 c7 0d 	sts	0x0DC7, r25	; 0x800dc7 <pxDelayedTaskList+0x1>
    3908:	80 93 c6 0d 	sts	0x0DC6, r24	; 0x800dc6 <pxDelayedTaskList>
    390c:	81 e9       	ldi	r24, 0x91	; 145
    390e:	9d e0       	ldi	r25, 0x0D	; 13
    3910:	90 93 c5 0d 	sts	0x0DC5, r25	; 0x800dc5 <pxOverflowDelayedTaskList+0x1>
    3914:	80 93 c4 0d 	sts	0x0DC4, r24	; 0x800dc4 <pxOverflowDelayedTaskList>
    3918:	11 c0       	rjmp	.+34     	; 0x393c <xTaskCreateStatic+0x166>
    391a:	80 91 ac 0d 	lds	r24, 0x0DAC	; 0x800dac <xSchedulerRunning>
    391e:	81 11       	cpse	r24, r1
    3920:	0d c0       	rjmp	.+26     	; 0x393c <xTaskCreateStatic+0x166>
    3922:	e0 91 ec 0d 	lds	r30, 0x0DEC	; 0x800dec <pxCurrentTCB>
    3926:	f0 91 ed 0d 	lds	r31, 0x0DED	; 0x800ded <pxCurrentTCB+0x1>
    392a:	96 89       	ldd	r25, Z+22	; 0x16
    392c:	f6 01       	movw	r30, r12
    392e:	86 89       	ldd	r24, Z+22	; 0x16
    3930:	89 17       	cp	r24, r25
    3932:	20 f0       	brcs	.+8      	; 0x393c <xTaskCreateStatic+0x166>
    3934:	d0 92 ed 0d 	sts	0x0DED, r13	; 0x800ded <pxCurrentTCB+0x1>
    3938:	c0 92 ec 0d 	sts	0x0DEC, r12	; 0x800dec <pxCurrentTCB>
    393c:	80 91 a8 0d 	lds	r24, 0x0DA8	; 0x800da8 <uxTaskNumber>
    3940:	8f 5f       	subi	r24, 0xFF	; 255
    3942:	80 93 a8 0d 	sts	0x0DA8, r24	; 0x800da8 <uxTaskNumber>
    3946:	f6 01       	movw	r30, r12
    3948:	86 89       	ldd	r24, Z+22	; 0x16
    394a:	90 91 ad 0d 	lds	r25, 0x0DAD	; 0x800dad <uxTopReadyPriority>
    394e:	98 17       	cp	r25, r24
    3950:	10 f4       	brcc	.+4      	; 0x3956 <xTaskCreateStatic+0x180>
    3952:	80 93 ad 0d 	sts	0x0DAD, r24	; 0x800dad <uxTopReadyPriority>
    3956:	90 e0       	ldi	r25, 0x00	; 0
    3958:	9c 01       	movw	r18, r24
    395a:	22 0f       	add	r18, r18
    395c:	33 1f       	adc	r19, r19
    395e:	22 0f       	add	r18, r18
    3960:	33 1f       	adc	r19, r19
    3962:	22 0f       	add	r18, r18
    3964:	33 1f       	adc	r19, r19
    3966:	82 0f       	add	r24, r18
    3968:	93 1f       	adc	r25, r19
    396a:	be 01       	movw	r22, r28
    396c:	88 53       	subi	r24, 0x38	; 56
    396e:	92 4f       	sbci	r25, 0xF2	; 242
    3970:	7b d9       	rcall	.-3338   	; 0x2c68 <vListInsertEnd>
    3972:	0f 90       	pop	r0
    3974:	0f be       	out	0x3f, r0	; 63
    3976:	80 91 ac 0d 	lds	r24, 0x0DAC	; 0x800dac <xSchedulerRunning>
    397a:	88 23       	and	r24, r24
    397c:	99 f0       	breq	.+38     	; 0x39a4 <xTaskCreateStatic+0x1ce>
    397e:	e0 91 ec 0d 	lds	r30, 0x0DEC	; 0x800dec <pxCurrentTCB>
    3982:	f0 91 ed 0d 	lds	r31, 0x0DED	; 0x800ded <pxCurrentTCB+0x1>
    3986:	96 89       	ldd	r25, Z+22	; 0x16
    3988:	e6 01       	movw	r28, r12
    398a:	8e 89       	ldd	r24, Y+22	; 0x16
    398c:	98 17       	cp	r25, r24
    398e:	68 f4       	brcc	.+26     	; 0x39aa <xTaskCreateStatic+0x1d4>
    3990:	92 da       	rcall	.-2780   	; 0x2eb6 <vPortYield>
    3992:	8c 2d       	mov	r24, r12
    3994:	9d 2d       	mov	r25, r13
    3996:	0b c0       	rjmp	.+22     	; 0x39ae <xTaskCreateStatic+0x1d8>
    3998:	80 e0       	ldi	r24, 0x00	; 0
    399a:	90 e0       	ldi	r25, 0x00	; 0
    399c:	08 c0       	rjmp	.+16     	; 0x39ae <xTaskCreateStatic+0x1d8>
    399e:	80 e0       	ldi	r24, 0x00	; 0
    39a0:	90 e0       	ldi	r25, 0x00	; 0
    39a2:	05 c0       	rjmp	.+10     	; 0x39ae <xTaskCreateStatic+0x1d8>
    39a4:	8c 2d       	mov	r24, r12
    39a6:	9d 2d       	mov	r25, r13
    39a8:	02 c0       	rjmp	.+4      	; 0x39ae <xTaskCreateStatic+0x1d8>
    39aa:	8c 2d       	mov	r24, r12
    39ac:	9d 2d       	mov	r25, r13
    39ae:	df 91       	pop	r29
    39b0:	cf 91       	pop	r28
    39b2:	0f 91       	pop	r16
    39b4:	ff 90       	pop	r15
    39b6:	ef 90       	pop	r14
    39b8:	df 90       	pop	r13
    39ba:	cf 90       	pop	r12
    39bc:	bf 90       	pop	r11
    39be:	af 90       	pop	r10
    39c0:	9f 90       	pop	r9
    39c2:	8f 90       	pop	r8
    39c4:	7f 90       	pop	r7
    39c6:	6f 90       	pop	r6
    39c8:	08 95       	ret

000039ca <vTaskStartScheduler>:
    39ca:	cf 92       	push	r12
    39cc:	df 92       	push	r13
    39ce:	ef 92       	push	r14
    39d0:	ff 92       	push	r15
    39d2:	0f 93       	push	r16
    39d4:	cf 93       	push	r28
    39d6:	df 93       	push	r29
    39d8:	00 d0       	rcall	.+0      	; 0x39da <vTaskStartScheduler+0x10>
    39da:	00 d0       	rcall	.+0      	; 0x39dc <vTaskStartScheduler+0x12>
    39dc:	cd b7       	in	r28, 0x3d	; 61
    39de:	de b7       	in	r29, 0x3e	; 62
    39e0:	1e 82       	std	Y+6, r1	; 0x06
    39e2:	1d 82       	std	Y+5, r1	; 0x05
    39e4:	1c 82       	std	Y+4, r1	; 0x04
    39e6:	1b 82       	std	Y+3, r1	; 0x03
    39e8:	ae 01       	movw	r20, r28
    39ea:	4f 5f       	subi	r20, 0xFF	; 255
    39ec:	5f 4f       	sbci	r21, 0xFF	; 255
    39ee:	be 01       	movw	r22, r28
    39f0:	6d 5f       	subi	r22, 0xFD	; 253
    39f2:	7f 4f       	sbci	r23, 0xFF	; 255
    39f4:	ce 01       	movw	r24, r28
    39f6:	05 96       	adiw	r24, 0x05	; 5
    39f8:	05 d9       	rcall	.-3574   	; 0x2c04 <vApplicationGetIdleTaskMemory>
    39fa:	cd 80       	ldd	r12, Y+5	; 0x05
    39fc:	de 80       	ldd	r13, Y+6	; 0x06
    39fe:	eb 80       	ldd	r14, Y+3	; 0x03
    3a00:	fc 80       	ldd	r15, Y+4	; 0x04
    3a02:	49 81       	ldd	r20, Y+1	; 0x01
    3a04:	5a 81       	ldd	r21, Y+2	; 0x02
    3a06:	00 e0       	ldi	r16, 0x00	; 0
    3a08:	20 e0       	ldi	r18, 0x00	; 0
    3a0a:	30 e0       	ldi	r19, 0x00	; 0
    3a0c:	62 e0       	ldi	r22, 0x02	; 2
    3a0e:	73 e0       	ldi	r23, 0x03	; 3
    3a10:	83 eb       	ldi	r24, 0xB3	; 179
    3a12:	90 e0       	ldi	r25, 0x00	; 0
    3a14:	e0 de       	rcall	.-576    	; 0x37d6 <xTaskCreateStatic>
    3a16:	90 93 a5 0d 	sts	0x0DA5, r25	; 0x800da5 <xIdleTaskHandle+0x1>
    3a1a:	80 93 a4 0d 	sts	0x0DA4, r24	; 0x800da4 <xIdleTaskHandle>
    3a1e:	89 2b       	or	r24, r25
    3a20:	91 f0       	breq	.+36     	; 0x3a46 <vTaskStartScheduler+0x7c>
    3a22:	1c d4       	rcall	.+2104   	; 0x425c <xTimerCreateTimerTask>
    3a24:	81 30       	cpi	r24, 0x01	; 1
    3a26:	79 f4       	brne	.+30     	; 0x3a46 <vTaskStartScheduler+0x7c>
    3a28:	f8 94       	cli
    3a2a:	8f ef       	ldi	r24, 0xFF	; 255
    3a2c:	9f ef       	ldi	r25, 0xFF	; 255
    3a2e:	90 93 a7 0d 	sts	0x0DA7, r25	; 0x800da7 <xNextTaskUnblockTime+0x1>
    3a32:	80 93 a6 0d 	sts	0x0DA6, r24	; 0x800da6 <xNextTaskUnblockTime>
    3a36:	81 e0       	ldi	r24, 0x01	; 1
    3a38:	80 93 ac 0d 	sts	0x0DAC, r24	; 0x800dac <xSchedulerRunning>
    3a3c:	10 92 af 0d 	sts	0x0DAF, r1	; 0x800daf <xTickCount+0x1>
    3a40:	10 92 ae 0d 	sts	0x0DAE, r1	; 0x800dae <xTickCount>
    3a44:	fc d9       	rcall	.-3080   	; 0x2e3e <xPortStartScheduler>
    3a46:	26 96       	adiw	r28, 0x06	; 6
    3a48:	0f b6       	in	r0, 0x3f	; 63
    3a4a:	f8 94       	cli
    3a4c:	de bf       	out	0x3e, r29	; 62
    3a4e:	0f be       	out	0x3f, r0	; 63
    3a50:	cd bf       	out	0x3d, r28	; 61
    3a52:	df 91       	pop	r29
    3a54:	cf 91       	pop	r28
    3a56:	0f 91       	pop	r16
    3a58:	ff 90       	pop	r15
    3a5a:	ef 90       	pop	r14
    3a5c:	df 90       	pop	r13
    3a5e:	cf 90       	pop	r12
    3a60:	08 95       	ret

00003a62 <vTaskSuspendAll>:
    3a62:	80 91 a3 0d 	lds	r24, 0x0DA3	; 0x800da3 <uxSchedulerSuspended>
    3a66:	8f 5f       	subi	r24, 0xFF	; 255
    3a68:	80 93 a3 0d 	sts	0x0DA3, r24	; 0x800da3 <uxSchedulerSuspended>
    3a6c:	08 95       	ret

00003a6e <xTaskGetTickCount>:
    3a6e:	0f b6       	in	r0, 0x3f	; 63
    3a70:	f8 94       	cli
    3a72:	0f 92       	push	r0
    3a74:	80 91 ae 0d 	lds	r24, 0x0DAE	; 0x800dae <xTickCount>
    3a78:	90 91 af 0d 	lds	r25, 0x0DAF	; 0x800daf <xTickCount+0x1>
    3a7c:	0f 90       	pop	r0
    3a7e:	0f be       	out	0x3f, r0	; 63
    3a80:	08 95       	ret

00003a82 <xTaskIncrementTick>:
    3a82:	cf 92       	push	r12
    3a84:	df 92       	push	r13
    3a86:	ef 92       	push	r14
    3a88:	ff 92       	push	r15
    3a8a:	0f 93       	push	r16
    3a8c:	1f 93       	push	r17
    3a8e:	cf 93       	push	r28
    3a90:	df 93       	push	r29
    3a92:	80 91 a3 0d 	lds	r24, 0x0DA3	; 0x800da3 <uxSchedulerSuspended>
    3a96:	81 11       	cpse	r24, r1
    3a98:	95 c0       	rjmp	.+298    	; 0x3bc4 <xTaskIncrementTick+0x142>
    3a9a:	e0 90 ae 0d 	lds	r14, 0x0DAE	; 0x800dae <xTickCount>
    3a9e:	f0 90 af 0d 	lds	r15, 0x0DAF	; 0x800daf <xTickCount+0x1>
    3aa2:	8f ef       	ldi	r24, 0xFF	; 255
    3aa4:	e8 1a       	sub	r14, r24
    3aa6:	f8 0a       	sbc	r15, r24
    3aa8:	f0 92 af 0d 	sts	0x0DAF, r15	; 0x800daf <xTickCount+0x1>
    3aac:	e0 92 ae 0d 	sts	0x0DAE, r14	; 0x800dae <xTickCount>
    3ab0:	e1 14       	cp	r14, r1
    3ab2:	f1 04       	cpc	r15, r1
    3ab4:	b1 f4       	brne	.+44     	; 0x3ae2 <xTaskIncrementTick+0x60>
    3ab6:	80 91 c6 0d 	lds	r24, 0x0DC6	; 0x800dc6 <pxDelayedTaskList>
    3aba:	90 91 c7 0d 	lds	r25, 0x0DC7	; 0x800dc7 <pxDelayedTaskList+0x1>
    3abe:	20 91 c4 0d 	lds	r18, 0x0DC4	; 0x800dc4 <pxOverflowDelayedTaskList>
    3ac2:	30 91 c5 0d 	lds	r19, 0x0DC5	; 0x800dc5 <pxOverflowDelayedTaskList+0x1>
    3ac6:	30 93 c7 0d 	sts	0x0DC7, r19	; 0x800dc7 <pxDelayedTaskList+0x1>
    3aca:	20 93 c6 0d 	sts	0x0DC6, r18	; 0x800dc6 <pxDelayedTaskList>
    3ace:	90 93 c5 0d 	sts	0x0DC5, r25	; 0x800dc5 <pxOverflowDelayedTaskList+0x1>
    3ad2:	80 93 c4 0d 	sts	0x0DC4, r24	; 0x800dc4 <pxOverflowDelayedTaskList>
    3ad6:	80 91 a9 0d 	lds	r24, 0x0DA9	; 0x800da9 <xNumOfOverflows>
    3ada:	8f 5f       	subi	r24, 0xFF	; 255
    3adc:	80 93 a9 0d 	sts	0x0DA9, r24	; 0x800da9 <xNumOfOverflows>
    3ae0:	1a de       	rcall	.-972    	; 0x3716 <prvResetNextTaskUnblockTime>
    3ae2:	80 91 a6 0d 	lds	r24, 0x0DA6	; 0x800da6 <xNextTaskUnblockTime>
    3ae6:	90 91 a7 0d 	lds	r25, 0x0DA7	; 0x800da7 <xNextTaskUnblockTime+0x1>
    3aea:	e8 16       	cp	r14, r24
    3aec:	f9 06       	cpc	r15, r25
    3aee:	10 f4       	brcc	.+4      	; 0x3af4 <xTaskIncrementTick+0x72>
    3af0:	d1 2c       	mov	r13, r1
    3af2:	50 c0       	rjmp	.+160    	; 0x3b94 <xTaskIncrementTick+0x112>
    3af4:	d1 2c       	mov	r13, r1
    3af6:	cc 24       	eor	r12, r12
    3af8:	c3 94       	inc	r12
    3afa:	e0 91 c6 0d 	lds	r30, 0x0DC6	; 0x800dc6 <pxDelayedTaskList>
    3afe:	f0 91 c7 0d 	lds	r31, 0x0DC7	; 0x800dc7 <pxDelayedTaskList+0x1>
    3b02:	90 81       	ld	r25, Z
    3b04:	91 11       	cpse	r25, r1
    3b06:	07 c0       	rjmp	.+14     	; 0x3b16 <xTaskIncrementTick+0x94>
    3b08:	8f ef       	ldi	r24, 0xFF	; 255
    3b0a:	9f ef       	ldi	r25, 0xFF	; 255
    3b0c:	90 93 a7 0d 	sts	0x0DA7, r25	; 0x800da7 <xNextTaskUnblockTime+0x1>
    3b10:	80 93 a6 0d 	sts	0x0DA6, r24	; 0x800da6 <xNextTaskUnblockTime>
    3b14:	3f c0       	rjmp	.+126    	; 0x3b94 <xTaskIncrementTick+0x112>
    3b16:	e0 91 c6 0d 	lds	r30, 0x0DC6	; 0x800dc6 <pxDelayedTaskList>
    3b1a:	f0 91 c7 0d 	lds	r31, 0x0DC7	; 0x800dc7 <pxDelayedTaskList+0x1>
    3b1e:	05 80       	ldd	r0, Z+5	; 0x05
    3b20:	f6 81       	ldd	r31, Z+6	; 0x06
    3b22:	e0 2d       	mov	r30, r0
    3b24:	c6 81       	ldd	r28, Z+6	; 0x06
    3b26:	d7 81       	ldd	r29, Z+7	; 0x07
    3b28:	2a 81       	ldd	r18, Y+2	; 0x02
    3b2a:	3b 81       	ldd	r19, Y+3	; 0x03
    3b2c:	e2 16       	cp	r14, r18
    3b2e:	f3 06       	cpc	r15, r19
    3b30:	28 f4       	brcc	.+10     	; 0x3b3c <xTaskIncrementTick+0xba>
    3b32:	30 93 a7 0d 	sts	0x0DA7, r19	; 0x800da7 <xNextTaskUnblockTime+0x1>
    3b36:	20 93 a6 0d 	sts	0x0DA6, r18	; 0x800da6 <xNextTaskUnblockTime>
    3b3a:	2c c0       	rjmp	.+88     	; 0x3b94 <xTaskIncrementTick+0x112>
    3b3c:	8e 01       	movw	r16, r28
    3b3e:	0e 5f       	subi	r16, 0xFE	; 254
    3b40:	1f 4f       	sbci	r17, 0xFF	; 255
    3b42:	c8 01       	movw	r24, r16
    3b44:	e3 d8       	rcall	.-3642   	; 0x2d0c <uxListRemove>
    3b46:	8c 89       	ldd	r24, Y+20	; 0x14
    3b48:	9d 89       	ldd	r25, Y+21	; 0x15
    3b4a:	89 2b       	or	r24, r25
    3b4c:	19 f0       	breq	.+6      	; 0x3b54 <xTaskIncrementTick+0xd2>
    3b4e:	ce 01       	movw	r24, r28
    3b50:	0c 96       	adiw	r24, 0x0c	; 12
    3b52:	dc d8       	rcall	.-3656   	; 0x2d0c <uxListRemove>
    3b54:	2e 89       	ldd	r18, Y+22	; 0x16
    3b56:	80 91 ad 0d 	lds	r24, 0x0DAD	; 0x800dad <uxTopReadyPriority>
    3b5a:	82 17       	cp	r24, r18
    3b5c:	10 f4       	brcc	.+4      	; 0x3b62 <xTaskIncrementTick+0xe0>
    3b5e:	20 93 ad 0d 	sts	0x0DAD, r18	; 0x800dad <uxTopReadyPriority>
    3b62:	30 e0       	ldi	r19, 0x00	; 0
    3b64:	c9 01       	movw	r24, r18
    3b66:	88 0f       	add	r24, r24
    3b68:	99 1f       	adc	r25, r25
    3b6a:	88 0f       	add	r24, r24
    3b6c:	99 1f       	adc	r25, r25
    3b6e:	88 0f       	add	r24, r24
    3b70:	99 1f       	adc	r25, r25
    3b72:	82 0f       	add	r24, r18
    3b74:	93 1f       	adc	r25, r19
    3b76:	b8 01       	movw	r22, r16
    3b78:	88 53       	subi	r24, 0x38	; 56
    3b7a:	92 4f       	sbci	r25, 0xF2	; 242
    3b7c:	75 d8       	rcall	.-3862   	; 0x2c68 <vListInsertEnd>
    3b7e:	e0 91 ec 0d 	lds	r30, 0x0DEC	; 0x800dec <pxCurrentTCB>
    3b82:	f0 91 ed 0d 	lds	r31, 0x0DED	; 0x800ded <pxCurrentTCB+0x1>
    3b86:	9e 89       	ldd	r25, Y+22	; 0x16
    3b88:	86 89       	ldd	r24, Z+22	; 0x16
    3b8a:	98 17       	cp	r25, r24
    3b8c:	08 f4       	brcc	.+2      	; 0x3b90 <xTaskIncrementTick+0x10e>
    3b8e:	b5 cf       	rjmp	.-150    	; 0x3afa <xTaskIncrementTick+0x78>
    3b90:	dc 2c       	mov	r13, r12
    3b92:	b3 cf       	rjmp	.-154    	; 0x3afa <xTaskIncrementTick+0x78>
    3b94:	e0 91 ec 0d 	lds	r30, 0x0DEC	; 0x800dec <pxCurrentTCB>
    3b98:	f0 91 ed 0d 	lds	r31, 0x0DED	; 0x800ded <pxCurrentTCB+0x1>
    3b9c:	86 89       	ldd	r24, Z+22	; 0x16
    3b9e:	90 e0       	ldi	r25, 0x00	; 0
    3ba0:	fc 01       	movw	r30, r24
    3ba2:	ee 0f       	add	r30, r30
    3ba4:	ff 1f       	adc	r31, r31
    3ba6:	ee 0f       	add	r30, r30
    3ba8:	ff 1f       	adc	r31, r31
    3baa:	ee 0f       	add	r30, r30
    3bac:	ff 1f       	adc	r31, r31
    3bae:	8e 0f       	add	r24, r30
    3bb0:	9f 1f       	adc	r25, r31
    3bb2:	fc 01       	movw	r30, r24
    3bb4:	e8 53       	subi	r30, 0x38	; 56
    3bb6:	f2 4f       	sbci	r31, 0xF2	; 242
    3bb8:	80 81       	ld	r24, Z
    3bba:	82 30       	cpi	r24, 0x02	; 2
    3bbc:	48 f0       	brcs	.+18     	; 0x3bd0 <xTaskIncrementTick+0x14e>
    3bbe:	dd 24       	eor	r13, r13
    3bc0:	d3 94       	inc	r13
    3bc2:	06 c0       	rjmp	.+12     	; 0x3bd0 <xTaskIncrementTick+0x14e>
    3bc4:	80 91 ab 0d 	lds	r24, 0x0DAB	; 0x800dab <uxPendedTicks>
    3bc8:	8f 5f       	subi	r24, 0xFF	; 255
    3bca:	80 93 ab 0d 	sts	0x0DAB, r24	; 0x800dab <uxPendedTicks>
    3bce:	d1 2c       	mov	r13, r1
    3bd0:	80 91 aa 0d 	lds	r24, 0x0DAA	; 0x800daa <xYieldPending>
    3bd4:	88 23       	and	r24, r24
    3bd6:	11 f0       	breq	.+4      	; 0x3bdc <xTaskIncrementTick+0x15a>
    3bd8:	dd 24       	eor	r13, r13
    3bda:	d3 94       	inc	r13
    3bdc:	8d 2d       	mov	r24, r13
    3bde:	df 91       	pop	r29
    3be0:	cf 91       	pop	r28
    3be2:	1f 91       	pop	r17
    3be4:	0f 91       	pop	r16
    3be6:	ff 90       	pop	r15
    3be8:	ef 90       	pop	r14
    3bea:	df 90       	pop	r13
    3bec:	cf 90       	pop	r12
    3bee:	08 95       	ret

00003bf0 <xTaskResumeAll>:
    3bf0:	df 92       	push	r13
    3bf2:	ef 92       	push	r14
    3bf4:	ff 92       	push	r15
    3bf6:	0f 93       	push	r16
    3bf8:	1f 93       	push	r17
    3bfa:	cf 93       	push	r28
    3bfc:	df 93       	push	r29
    3bfe:	0f b6       	in	r0, 0x3f	; 63
    3c00:	f8 94       	cli
    3c02:	0f 92       	push	r0
    3c04:	80 91 a3 0d 	lds	r24, 0x0DA3	; 0x800da3 <uxSchedulerSuspended>
    3c08:	81 50       	subi	r24, 0x01	; 1
    3c0a:	80 93 a3 0d 	sts	0x0DA3, r24	; 0x800da3 <uxSchedulerSuspended>
    3c0e:	80 91 a3 0d 	lds	r24, 0x0DA3	; 0x800da3 <uxSchedulerSuspended>
    3c12:	81 11       	cpse	r24, r1
    3c14:	59 c0       	rjmp	.+178    	; 0x3cc8 <xTaskResumeAll+0xd8>
    3c16:	80 91 b0 0d 	lds	r24, 0x0DB0	; 0x800db0 <uxCurrentNumberOfTasks>
    3c1a:	81 11       	cpse	r24, r1
    3c1c:	30 c0       	rjmp	.+96     	; 0x3c7e <xTaskResumeAll+0x8e>
    3c1e:	57 c0       	rjmp	.+174    	; 0x3cce <xTaskResumeAll+0xde>
    3c20:	d7 01       	movw	r26, r14
    3c22:	15 96       	adiw	r26, 0x05	; 5
    3c24:	ed 91       	ld	r30, X+
    3c26:	fc 91       	ld	r31, X
    3c28:	16 97       	sbiw	r26, 0x06	; 6
    3c2a:	c6 81       	ldd	r28, Z+6	; 0x06
    3c2c:	d7 81       	ldd	r29, Z+7	; 0x07
    3c2e:	ce 01       	movw	r24, r28
    3c30:	0c 96       	adiw	r24, 0x0c	; 12
    3c32:	6c d8       	rcall	.-3880   	; 0x2d0c <uxListRemove>
    3c34:	8e 01       	movw	r16, r28
    3c36:	0e 5f       	subi	r16, 0xFE	; 254
    3c38:	1f 4f       	sbci	r17, 0xFF	; 255
    3c3a:	c8 01       	movw	r24, r16
    3c3c:	67 d8       	rcall	.-3890   	; 0x2d0c <uxListRemove>
    3c3e:	2e 89       	ldd	r18, Y+22	; 0x16
    3c40:	80 91 ad 0d 	lds	r24, 0x0DAD	; 0x800dad <uxTopReadyPriority>
    3c44:	82 17       	cp	r24, r18
    3c46:	10 f4       	brcc	.+4      	; 0x3c4c <xTaskResumeAll+0x5c>
    3c48:	20 93 ad 0d 	sts	0x0DAD, r18	; 0x800dad <uxTopReadyPriority>
    3c4c:	30 e0       	ldi	r19, 0x00	; 0
    3c4e:	c9 01       	movw	r24, r18
    3c50:	88 0f       	add	r24, r24
    3c52:	99 1f       	adc	r25, r25
    3c54:	88 0f       	add	r24, r24
    3c56:	99 1f       	adc	r25, r25
    3c58:	88 0f       	add	r24, r24
    3c5a:	99 1f       	adc	r25, r25
    3c5c:	82 0f       	add	r24, r18
    3c5e:	93 1f       	adc	r25, r19
    3c60:	b8 01       	movw	r22, r16
    3c62:	88 53       	subi	r24, 0x38	; 56
    3c64:	92 4f       	sbci	r25, 0xF2	; 242
    3c66:	00 d8       	rcall	.-4096   	; 0x2c68 <vListInsertEnd>
    3c68:	e0 91 ec 0d 	lds	r30, 0x0DEC	; 0x800dec <pxCurrentTCB>
    3c6c:	f0 91 ed 0d 	lds	r31, 0x0DED	; 0x800ded <pxCurrentTCB+0x1>
    3c70:	9e 89       	ldd	r25, Y+22	; 0x16
    3c72:	86 89       	ldd	r24, Z+22	; 0x16
    3c74:	98 17       	cp	r25, r24
    3c76:	68 f0       	brcs	.+26     	; 0x3c92 <xTaskResumeAll+0xa2>
    3c78:	d0 92 aa 0d 	sts	0x0DAA, r13	; 0x800daa <xYieldPending>
    3c7c:	0a c0       	rjmp	.+20     	; 0x3c92 <xTaskResumeAll+0xa2>
    3c7e:	c0 e0       	ldi	r28, 0x00	; 0
    3c80:	d0 e0       	ldi	r29, 0x00	; 0
    3c82:	0f 2e       	mov	r0, r31
    3c84:	fb eb       	ldi	r31, 0xBB	; 187
    3c86:	ef 2e       	mov	r14, r31
    3c88:	fd e0       	ldi	r31, 0x0D	; 13
    3c8a:	ff 2e       	mov	r15, r31
    3c8c:	f0 2d       	mov	r31, r0
    3c8e:	dd 24       	eor	r13, r13
    3c90:	d3 94       	inc	r13
    3c92:	f7 01       	movw	r30, r14
    3c94:	80 81       	ld	r24, Z
    3c96:	81 11       	cpse	r24, r1
    3c98:	c3 cf       	rjmp	.-122    	; 0x3c20 <xTaskResumeAll+0x30>
    3c9a:	cd 2b       	or	r28, r29
    3c9c:	09 f0       	breq	.+2      	; 0x3ca0 <xTaskResumeAll+0xb0>
    3c9e:	3b dd       	rcall	.-1418   	; 0x3716 <prvResetNextTaskUnblockTime>
    3ca0:	c0 91 ab 0d 	lds	r28, 0x0DAB	; 0x800dab <uxPendedTicks>
    3ca4:	cc 23       	and	r28, r28
    3ca6:	49 f0       	breq	.+18     	; 0x3cba <xTaskResumeAll+0xca>
    3ca8:	d1 e0       	ldi	r29, 0x01	; 1
    3caa:	eb de       	rcall	.-554    	; 0x3a82 <xTaskIncrementTick>
    3cac:	81 11       	cpse	r24, r1
    3cae:	d0 93 aa 0d 	sts	0x0DAA, r29	; 0x800daa <xYieldPending>
    3cb2:	c1 50       	subi	r28, 0x01	; 1
    3cb4:	d1 f7       	brne	.-12     	; 0x3caa <xTaskResumeAll+0xba>
    3cb6:	10 92 ab 0d 	sts	0x0DAB, r1	; 0x800dab <uxPendedTicks>
    3cba:	80 91 aa 0d 	lds	r24, 0x0DAA	; 0x800daa <xYieldPending>
    3cbe:	88 23       	and	r24, r24
    3cc0:	29 f0       	breq	.+10     	; 0x3ccc <xTaskResumeAll+0xdc>
    3cc2:	f9 d8       	rcall	.-3598   	; 0x2eb6 <vPortYield>
    3cc4:	81 e0       	ldi	r24, 0x01	; 1
    3cc6:	03 c0       	rjmp	.+6      	; 0x3cce <xTaskResumeAll+0xde>
    3cc8:	80 e0       	ldi	r24, 0x00	; 0
    3cca:	01 c0       	rjmp	.+2      	; 0x3cce <xTaskResumeAll+0xde>
    3ccc:	80 e0       	ldi	r24, 0x00	; 0
    3cce:	0f 90       	pop	r0
    3cd0:	0f be       	out	0x3f, r0	; 63
    3cd2:	df 91       	pop	r29
    3cd4:	cf 91       	pop	r28
    3cd6:	1f 91       	pop	r17
    3cd8:	0f 91       	pop	r16
    3cda:	ff 90       	pop	r15
    3cdc:	ef 90       	pop	r14
    3cde:	df 90       	pop	r13
    3ce0:	08 95       	ret

00003ce2 <vTaskDelay>:
    3ce2:	cf 93       	push	r28
    3ce4:	df 93       	push	r29
    3ce6:	ec 01       	movw	r28, r24
    3ce8:	89 2b       	or	r24, r25
    3cea:	39 f0       	breq	.+14     	; 0x3cfa <vTaskDelay+0x18>
    3cec:	ba de       	rcall	.-652    	; 0x3a62 <vTaskSuspendAll>
    3cee:	60 e0       	ldi	r22, 0x00	; 0
    3cf0:	ce 01       	movw	r24, r28
    3cf2:	30 dd       	rcall	.-1440   	; 0x3754 <prvAddCurrentTaskToDelayedList>
    3cf4:	7d df       	rcall	.-262    	; 0x3bf0 <xTaskResumeAll>
    3cf6:	81 11       	cpse	r24, r1
    3cf8:	01 c0       	rjmp	.+2      	; 0x3cfc <vTaskDelay+0x1a>
    3cfa:	dd d8       	rcall	.-3654   	; 0x2eb6 <vPortYield>
    3cfc:	df 91       	pop	r29
    3cfe:	cf 91       	pop	r28
    3d00:	08 95       	ret

00003d02 <vTaskSwitchContext>:
    3d02:	80 91 a3 0d 	lds	r24, 0x0DA3	; 0x800da3 <uxSchedulerSuspended>
    3d06:	88 23       	and	r24, r24
    3d08:	21 f0       	breq	.+8      	; 0x3d12 <vTaskSwitchContext+0x10>
    3d0a:	81 e0       	ldi	r24, 0x01	; 1
    3d0c:	80 93 aa 0d 	sts	0x0DAA, r24	; 0x800daa <xYieldPending>
    3d10:	08 95       	ret
    3d12:	10 92 aa 0d 	sts	0x0DAA, r1	; 0x800daa <xYieldPending>
    3d16:	a0 91 ec 0d 	lds	r26, 0x0DEC	; 0x800dec <pxCurrentTCB>
    3d1a:	b0 91 ed 0d 	lds	r27, 0x0DED	; 0x800ded <pxCurrentTCB+0x1>
    3d1e:	e0 91 ec 0d 	lds	r30, 0x0DEC	; 0x800dec <pxCurrentTCB>
    3d22:	f0 91 ed 0d 	lds	r31, 0x0DED	; 0x800ded <pxCurrentTCB+0x1>
    3d26:	2d 91       	ld	r18, X+
    3d28:	3c 91       	ld	r19, X
    3d2a:	87 89       	ldd	r24, Z+23	; 0x17
    3d2c:	90 8d       	ldd	r25, Z+24	; 0x18
    3d2e:	82 17       	cp	r24, r18
    3d30:	93 07       	cpc	r25, r19
    3d32:	60 f0       	brcs	.+24     	; 0x3d4c <vTaskSwitchContext+0x4a>
    3d34:	60 91 ec 0d 	lds	r22, 0x0DEC	; 0x800dec <pxCurrentTCB>
    3d38:	70 91 ed 0d 	lds	r23, 0x0DED	; 0x800ded <pxCurrentTCB+0x1>
    3d3c:	80 91 ec 0d 	lds	r24, 0x0DEC	; 0x800dec <pxCurrentTCB>
    3d40:	90 91 ed 0d 	lds	r25, 0x0DED	; 0x800ded <pxCurrentTCB+0x1>
    3d44:	67 5e       	subi	r22, 0xE7	; 231
    3d46:	7f 4f       	sbci	r23, 0xFF	; 255
    3d48:	0e 94 f5 15 	call	0x2bea	; 0x2bea <vApplicationStackOverflowHook>
    3d4c:	20 91 ad 0d 	lds	r18, 0x0DAD	; 0x800dad <uxTopReadyPriority>
    3d50:	82 2f       	mov	r24, r18
    3d52:	90 e0       	ldi	r25, 0x00	; 0
    3d54:	fc 01       	movw	r30, r24
    3d56:	ee 0f       	add	r30, r30
    3d58:	ff 1f       	adc	r31, r31
    3d5a:	ee 0f       	add	r30, r30
    3d5c:	ff 1f       	adc	r31, r31
    3d5e:	ee 0f       	add	r30, r30
    3d60:	ff 1f       	adc	r31, r31
    3d62:	e8 0f       	add	r30, r24
    3d64:	f9 1f       	adc	r31, r25
    3d66:	e8 53       	subi	r30, 0x38	; 56
    3d68:	f2 4f       	sbci	r31, 0xF2	; 242
    3d6a:	30 81       	ld	r19, Z
    3d6c:	31 11       	cpse	r19, r1
    3d6e:	11 c0       	rjmp	.+34     	; 0x3d92 <vTaskSwitchContext+0x90>
    3d70:	21 50       	subi	r18, 0x01	; 1
    3d72:	82 2f       	mov	r24, r18
    3d74:	90 e0       	ldi	r25, 0x00	; 0
    3d76:	fc 01       	movw	r30, r24
    3d78:	ee 0f       	add	r30, r30
    3d7a:	ff 1f       	adc	r31, r31
    3d7c:	ee 0f       	add	r30, r30
    3d7e:	ff 1f       	adc	r31, r31
    3d80:	ee 0f       	add	r30, r30
    3d82:	ff 1f       	adc	r31, r31
    3d84:	e8 0f       	add	r30, r24
    3d86:	f9 1f       	adc	r31, r25
    3d88:	e8 53       	subi	r30, 0x38	; 56
    3d8a:	f2 4f       	sbci	r31, 0xF2	; 242
    3d8c:	30 81       	ld	r19, Z
    3d8e:	33 23       	and	r19, r19
    3d90:	79 f3       	breq	.-34     	; 0x3d70 <vTaskSwitchContext+0x6e>
    3d92:	ac 01       	movw	r20, r24
    3d94:	44 0f       	add	r20, r20
    3d96:	55 1f       	adc	r21, r21
    3d98:	44 0f       	add	r20, r20
    3d9a:	55 1f       	adc	r21, r21
    3d9c:	44 0f       	add	r20, r20
    3d9e:	55 1f       	adc	r21, r21
    3da0:	48 0f       	add	r20, r24
    3da2:	59 1f       	adc	r21, r25
    3da4:	da 01       	movw	r26, r20
    3da6:	a8 53       	subi	r26, 0x38	; 56
    3da8:	b2 4f       	sbci	r27, 0xF2	; 242
    3daa:	11 96       	adiw	r26, 0x01	; 1
    3dac:	ed 91       	ld	r30, X+
    3dae:	fc 91       	ld	r31, X
    3db0:	12 97       	sbiw	r26, 0x02	; 2
    3db2:	02 80       	ldd	r0, Z+2	; 0x02
    3db4:	f3 81       	ldd	r31, Z+3	; 0x03
    3db6:	e0 2d       	mov	r30, r0
    3db8:	12 96       	adiw	r26, 0x02	; 2
    3dba:	fc 93       	st	X, r31
    3dbc:	ee 93       	st	-X, r30
    3dbe:	11 97       	sbiw	r26, 0x01	; 1
    3dc0:	45 53       	subi	r20, 0x35	; 53
    3dc2:	52 4f       	sbci	r21, 0xF2	; 242
    3dc4:	e4 17       	cp	r30, r20
    3dc6:	f5 07       	cpc	r31, r21
    3dc8:	29 f4       	brne	.+10     	; 0x3dd4 <vTaskSwitchContext+0xd2>
    3dca:	42 81       	ldd	r20, Z+2	; 0x02
    3dcc:	53 81       	ldd	r21, Z+3	; 0x03
    3dce:	fd 01       	movw	r30, r26
    3dd0:	52 83       	std	Z+2, r21	; 0x02
    3dd2:	41 83       	std	Z+1, r20	; 0x01
    3dd4:	fc 01       	movw	r30, r24
    3dd6:	ee 0f       	add	r30, r30
    3dd8:	ff 1f       	adc	r31, r31
    3dda:	ee 0f       	add	r30, r30
    3ddc:	ff 1f       	adc	r31, r31
    3dde:	ee 0f       	add	r30, r30
    3de0:	ff 1f       	adc	r31, r31
    3de2:	8e 0f       	add	r24, r30
    3de4:	9f 1f       	adc	r25, r31
    3de6:	fc 01       	movw	r30, r24
    3de8:	e8 53       	subi	r30, 0x38	; 56
    3dea:	f2 4f       	sbci	r31, 0xF2	; 242
    3dec:	01 80       	ldd	r0, Z+1	; 0x01
    3dee:	f2 81       	ldd	r31, Z+2	; 0x02
    3df0:	e0 2d       	mov	r30, r0
    3df2:	86 81       	ldd	r24, Z+6	; 0x06
    3df4:	97 81       	ldd	r25, Z+7	; 0x07
    3df6:	90 93 ed 0d 	sts	0x0DED, r25	; 0x800ded <pxCurrentTCB+0x1>
    3dfa:	80 93 ec 0d 	sts	0x0DEC, r24	; 0x800dec <pxCurrentTCB>
    3dfe:	20 93 ad 0d 	sts	0x0DAD, r18	; 0x800dad <uxTopReadyPriority>
    3e02:	08 95       	ret

00003e04 <vTaskPlaceOnEventList>:
    3e04:	cf 93       	push	r28
    3e06:	df 93       	push	r29
    3e08:	eb 01       	movw	r28, r22
    3e0a:	20 91 ec 0d 	lds	r18, 0x0DEC	; 0x800dec <pxCurrentTCB>
    3e0e:	30 91 ed 0d 	lds	r19, 0x0DED	; 0x800ded <pxCurrentTCB+0x1>
    3e12:	b9 01       	movw	r22, r18
    3e14:	64 5f       	subi	r22, 0xF4	; 244
    3e16:	7f 4f       	sbci	r23, 0xFF	; 255
    3e18:	0e 94 55 16 	call	0x2caa	; 0x2caa <vListInsert>
    3e1c:	61 e0       	ldi	r22, 0x01	; 1
    3e1e:	ce 01       	movw	r24, r28
    3e20:	99 dc       	rcall	.-1742   	; 0x3754 <prvAddCurrentTaskToDelayedList>
    3e22:	df 91       	pop	r29
    3e24:	cf 91       	pop	r28
    3e26:	08 95       	ret

00003e28 <vTaskPlaceOnEventListRestricted>:
    3e28:	0f 93       	push	r16
    3e2a:	1f 93       	push	r17
    3e2c:	cf 93       	push	r28
    3e2e:	8b 01       	movw	r16, r22
    3e30:	c4 2f       	mov	r28, r20
    3e32:	20 91 ec 0d 	lds	r18, 0x0DEC	; 0x800dec <pxCurrentTCB>
    3e36:	30 91 ed 0d 	lds	r19, 0x0DED	; 0x800ded <pxCurrentTCB+0x1>
    3e3a:	b9 01       	movw	r22, r18
    3e3c:	64 5f       	subi	r22, 0xF4	; 244
    3e3e:	7f 4f       	sbci	r23, 0xFF	; 255
    3e40:	0e 94 34 16 	call	0x2c68	; 0x2c68 <vListInsertEnd>
    3e44:	cc 23       	and	r28, r28
    3e46:	11 f0       	breq	.+4      	; 0x3e4c <vTaskPlaceOnEventListRestricted+0x24>
    3e48:	0f ef       	ldi	r16, 0xFF	; 255
    3e4a:	1f ef       	ldi	r17, 0xFF	; 255
    3e4c:	6c 2f       	mov	r22, r28
    3e4e:	c8 01       	movw	r24, r16
    3e50:	81 dc       	rcall	.-1790   	; 0x3754 <prvAddCurrentTaskToDelayedList>
    3e52:	cf 91       	pop	r28
    3e54:	1f 91       	pop	r17
    3e56:	0f 91       	pop	r16
    3e58:	08 95       	ret

00003e5a <xTaskRemoveFromEventList>:
    3e5a:	0f 93       	push	r16
    3e5c:	1f 93       	push	r17
    3e5e:	cf 93       	push	r28
    3e60:	df 93       	push	r29
    3e62:	dc 01       	movw	r26, r24
    3e64:	15 96       	adiw	r26, 0x05	; 5
    3e66:	ed 91       	ld	r30, X+
    3e68:	fc 91       	ld	r31, X
    3e6a:	16 97       	sbiw	r26, 0x06	; 6
    3e6c:	c6 81       	ldd	r28, Z+6	; 0x06
    3e6e:	d7 81       	ldd	r29, Z+7	; 0x07
    3e70:	8e 01       	movw	r16, r28
    3e72:	04 5f       	subi	r16, 0xF4	; 244
    3e74:	1f 4f       	sbci	r17, 0xFF	; 255
    3e76:	c8 01       	movw	r24, r16
    3e78:	0e 94 86 16 	call	0x2d0c	; 0x2d0c <uxListRemove>
    3e7c:	80 91 a3 0d 	lds	r24, 0x0DA3	; 0x800da3 <uxSchedulerSuspended>
    3e80:	81 11       	cpse	r24, r1
    3e82:	1c c0       	rjmp	.+56     	; 0x3ebc <xTaskRemoveFromEventList+0x62>
    3e84:	0a 50       	subi	r16, 0x0A	; 10
    3e86:	11 09       	sbc	r17, r1
    3e88:	c8 01       	movw	r24, r16
    3e8a:	0e 94 86 16 	call	0x2d0c	; 0x2d0c <uxListRemove>
    3e8e:	2e 89       	ldd	r18, Y+22	; 0x16
    3e90:	80 91 ad 0d 	lds	r24, 0x0DAD	; 0x800dad <uxTopReadyPriority>
    3e94:	82 17       	cp	r24, r18
    3e96:	10 f4       	brcc	.+4      	; 0x3e9c <xTaskRemoveFromEventList+0x42>
    3e98:	20 93 ad 0d 	sts	0x0DAD, r18	; 0x800dad <uxTopReadyPriority>
    3e9c:	30 e0       	ldi	r19, 0x00	; 0
    3e9e:	c9 01       	movw	r24, r18
    3ea0:	88 0f       	add	r24, r24
    3ea2:	99 1f       	adc	r25, r25
    3ea4:	88 0f       	add	r24, r24
    3ea6:	99 1f       	adc	r25, r25
    3ea8:	88 0f       	add	r24, r24
    3eaa:	99 1f       	adc	r25, r25
    3eac:	82 0f       	add	r24, r18
    3eae:	93 1f       	adc	r25, r19
    3eb0:	b8 01       	movw	r22, r16
    3eb2:	88 53       	subi	r24, 0x38	; 56
    3eb4:	92 4f       	sbci	r25, 0xF2	; 242
    3eb6:	0e 94 34 16 	call	0x2c68	; 0x2c68 <vListInsertEnd>
    3eba:	05 c0       	rjmp	.+10     	; 0x3ec6 <xTaskRemoveFromEventList+0x6c>
    3ebc:	b8 01       	movw	r22, r16
    3ebe:	8b eb       	ldi	r24, 0xBB	; 187
    3ec0:	9d e0       	ldi	r25, 0x0D	; 13
    3ec2:	0e 94 34 16 	call	0x2c68	; 0x2c68 <vListInsertEnd>
    3ec6:	e0 91 ec 0d 	lds	r30, 0x0DEC	; 0x800dec <pxCurrentTCB>
    3eca:	f0 91 ed 0d 	lds	r31, 0x0DED	; 0x800ded <pxCurrentTCB+0x1>
    3ece:	9e 89       	ldd	r25, Y+22	; 0x16
    3ed0:	86 89       	ldd	r24, Z+22	; 0x16
    3ed2:	89 17       	cp	r24, r25
    3ed4:	20 f4       	brcc	.+8      	; 0x3ede <xTaskRemoveFromEventList+0x84>
    3ed6:	81 e0       	ldi	r24, 0x01	; 1
    3ed8:	80 93 aa 0d 	sts	0x0DAA, r24	; 0x800daa <xYieldPending>
    3edc:	01 c0       	rjmp	.+2      	; 0x3ee0 <xTaskRemoveFromEventList+0x86>
    3ede:	80 e0       	ldi	r24, 0x00	; 0
    3ee0:	df 91       	pop	r29
    3ee2:	cf 91       	pop	r28
    3ee4:	1f 91       	pop	r17
    3ee6:	0f 91       	pop	r16
    3ee8:	08 95       	ret

00003eea <vTaskInternalSetTimeOutState>:
    3eea:	20 91 a9 0d 	lds	r18, 0x0DA9	; 0x800da9 <xNumOfOverflows>
    3eee:	fc 01       	movw	r30, r24
    3ef0:	20 83       	st	Z, r18
    3ef2:	20 91 ae 0d 	lds	r18, 0x0DAE	; 0x800dae <xTickCount>
    3ef6:	30 91 af 0d 	lds	r19, 0x0DAF	; 0x800daf <xTickCount+0x1>
    3efa:	32 83       	std	Z+2, r19	; 0x02
    3efc:	21 83       	std	Z+1, r18	; 0x01
    3efe:	08 95       	ret

00003f00 <xTaskCheckForTimeOut>:
    3f00:	0f b6       	in	r0, 0x3f	; 63
    3f02:	f8 94       	cli
    3f04:	0f 92       	push	r0
    3f06:	20 91 ae 0d 	lds	r18, 0x0DAE	; 0x800dae <xTickCount>
    3f0a:	30 91 af 0d 	lds	r19, 0x0DAF	; 0x800daf <xTickCount+0x1>
    3f0e:	dc 01       	movw	r26, r24
    3f10:	11 96       	adiw	r26, 0x01	; 1
    3f12:	4d 91       	ld	r20, X+
    3f14:	5c 91       	ld	r21, X
    3f16:	12 97       	sbiw	r26, 0x02	; 2
    3f18:	e0 91 a9 0d 	lds	r30, 0x0DA9	; 0x800da9 <xNumOfOverflows>
    3f1c:	fc 91       	ld	r31, X
    3f1e:	fe 17       	cp	r31, r30
    3f20:	19 f0       	breq	.+6      	; 0x3f28 <xTaskCheckForTimeOut+0x28>
    3f22:	24 17       	cp	r18, r20
    3f24:	35 07       	cpc	r19, r21
    3f26:	98 f4       	brcc	.+38     	; 0x3f4e <xTaskCheckForTimeOut+0x4e>
    3f28:	24 1b       	sub	r18, r20
    3f2a:	35 0b       	sbc	r19, r21
    3f2c:	fb 01       	movw	r30, r22
    3f2e:	40 81       	ld	r20, Z
    3f30:	51 81       	ldd	r21, Z+1	; 0x01
    3f32:	24 17       	cp	r18, r20
    3f34:	35 07       	cpc	r19, r21
    3f36:	38 f4       	brcc	.+14     	; 0x3f46 <xTaskCheckForTimeOut+0x46>
    3f38:	42 1b       	sub	r20, r18
    3f3a:	53 0b       	sbc	r21, r19
    3f3c:	51 83       	std	Z+1, r21	; 0x01
    3f3e:	40 83       	st	Z, r20
    3f40:	d4 df       	rcall	.-88     	; 0x3eea <vTaskInternalSetTimeOutState>
    3f42:	80 e0       	ldi	r24, 0x00	; 0
    3f44:	05 c0       	rjmp	.+10     	; 0x3f50 <xTaskCheckForTimeOut+0x50>
    3f46:	11 82       	std	Z+1, r1	; 0x01
    3f48:	10 82       	st	Z, r1
    3f4a:	81 e0       	ldi	r24, 0x01	; 1
    3f4c:	01 c0       	rjmp	.+2      	; 0x3f50 <xTaskCheckForTimeOut+0x50>
    3f4e:	81 e0       	ldi	r24, 0x01	; 1
    3f50:	0f 90       	pop	r0
    3f52:	0f be       	out	0x3f, r0	; 63
    3f54:	08 95       	ret

00003f56 <vTaskMissedYield>:
    3f56:	81 e0       	ldi	r24, 0x01	; 1
    3f58:	80 93 aa 0d 	sts	0x0DAA, r24	; 0x800daa <xYieldPending>
    3f5c:	08 95       	ret

00003f5e <xTaskGetSchedulerState>:
    3f5e:	80 91 ac 0d 	lds	r24, 0x0DAC	; 0x800dac <xSchedulerRunning>
    3f62:	88 23       	and	r24, r24
    3f64:	31 f0       	breq	.+12     	; 0x3f72 <xTaskGetSchedulerState+0x14>
    3f66:	80 91 a3 0d 	lds	r24, 0x0DA3	; 0x800da3 <uxSchedulerSuspended>
    3f6a:	88 23       	and	r24, r24
    3f6c:	21 f0       	breq	.+8      	; 0x3f76 <xTaskGetSchedulerState+0x18>
    3f6e:	80 e0       	ldi	r24, 0x00	; 0
    3f70:	08 95       	ret
    3f72:	81 e0       	ldi	r24, 0x01	; 1
    3f74:	08 95       	ret
    3f76:	82 e0       	ldi	r24, 0x02	; 2
    3f78:	08 95       	ret

00003f7a <xTaskPriorityInherit>:
    3f7a:	0f 93       	push	r16
    3f7c:	1f 93       	push	r17
    3f7e:	cf 93       	push	r28
    3f80:	df 93       	push	r29
    3f82:	fc 01       	movw	r30, r24
    3f84:	89 2b       	or	r24, r25
    3f86:	09 f4       	brne	.+2      	; 0x3f8a <xTaskPriorityInherit+0x10>
    3f88:	64 c0       	rjmp	.+200    	; 0x4052 <xTaskPriorityInherit+0xd8>
    3f8a:	26 89       	ldd	r18, Z+22	; 0x16
    3f8c:	a0 91 ec 0d 	lds	r26, 0x0DEC	; 0x800dec <pxCurrentTCB>
    3f90:	b0 91 ed 0d 	lds	r27, 0x0DED	; 0x800ded <pxCurrentTCB+0x1>
    3f94:	56 96       	adiw	r26, 0x16	; 22
    3f96:	8c 91       	ld	r24, X
    3f98:	28 17       	cp	r18, r24
    3f9a:	08 f0       	brcs	.+2      	; 0x3f9e <xTaskPriorityInherit+0x24>
    3f9c:	4e c0       	rjmp	.+156    	; 0x403a <xTaskPriorityInherit+0xc0>
    3f9e:	84 85       	ldd	r24, Z+12	; 0x0c
    3fa0:	95 85       	ldd	r25, Z+13	; 0x0d
    3fa2:	99 23       	and	r25, r25
    3fa4:	64 f0       	brlt	.+24     	; 0x3fbe <xTaskPriorityInherit+0x44>
    3fa6:	a0 91 ec 0d 	lds	r26, 0x0DEC	; 0x800dec <pxCurrentTCB>
    3faa:	b0 91 ed 0d 	lds	r27, 0x0DED	; 0x800ded <pxCurrentTCB+0x1>
    3fae:	56 96       	adiw	r26, 0x16	; 22
    3fb0:	3c 91       	ld	r19, X
    3fb2:	84 e0       	ldi	r24, 0x04	; 4
    3fb4:	90 e0       	ldi	r25, 0x00	; 0
    3fb6:	83 1b       	sub	r24, r19
    3fb8:	91 09       	sbc	r25, r1
    3fba:	95 87       	std	Z+13, r25	; 0x0d
    3fbc:	84 87       	std	Z+12, r24	; 0x0c
    3fbe:	30 e0       	ldi	r19, 0x00	; 0
    3fc0:	c9 01       	movw	r24, r18
    3fc2:	88 0f       	add	r24, r24
    3fc4:	99 1f       	adc	r25, r25
    3fc6:	88 0f       	add	r24, r24
    3fc8:	99 1f       	adc	r25, r25
    3fca:	88 0f       	add	r24, r24
    3fcc:	99 1f       	adc	r25, r25
    3fce:	28 0f       	add	r18, r24
    3fd0:	39 1f       	adc	r19, r25
    3fd2:	28 53       	subi	r18, 0x38	; 56
    3fd4:	32 4f       	sbci	r19, 0xF2	; 242
    3fd6:	82 85       	ldd	r24, Z+10	; 0x0a
    3fd8:	93 85       	ldd	r25, Z+11	; 0x0b
    3fda:	82 17       	cp	r24, r18
    3fdc:	93 07       	cpc	r25, r19
    3fde:	21 f5       	brne	.+72     	; 0x4028 <xTaskPriorityInherit+0xae>
    3fe0:	8f 01       	movw	r16, r30
    3fe2:	ef 01       	movw	r28, r30
    3fe4:	22 96       	adiw	r28, 0x02	; 2
    3fe6:	ce 01       	movw	r24, r28
    3fe8:	0e 94 86 16 	call	0x2d0c	; 0x2d0c <uxListRemove>
    3fec:	e0 91 ec 0d 	lds	r30, 0x0DEC	; 0x800dec <pxCurrentTCB>
    3ff0:	f0 91 ed 0d 	lds	r31, 0x0DED	; 0x800ded <pxCurrentTCB+0x1>
    3ff4:	26 89       	ldd	r18, Z+22	; 0x16
    3ff6:	f8 01       	movw	r30, r16
    3ff8:	26 8b       	std	Z+22, r18	; 0x16
    3ffa:	80 91 ad 0d 	lds	r24, 0x0DAD	; 0x800dad <uxTopReadyPriority>
    3ffe:	82 17       	cp	r24, r18
    4000:	10 f4       	brcc	.+4      	; 0x4006 <xTaskPriorityInherit+0x8c>
    4002:	20 93 ad 0d 	sts	0x0DAD, r18	; 0x800dad <uxTopReadyPriority>
    4006:	30 e0       	ldi	r19, 0x00	; 0
    4008:	c9 01       	movw	r24, r18
    400a:	88 0f       	add	r24, r24
    400c:	99 1f       	adc	r25, r25
    400e:	88 0f       	add	r24, r24
    4010:	99 1f       	adc	r25, r25
    4012:	88 0f       	add	r24, r24
    4014:	99 1f       	adc	r25, r25
    4016:	82 0f       	add	r24, r18
    4018:	93 1f       	adc	r25, r19
    401a:	be 01       	movw	r22, r28
    401c:	88 53       	subi	r24, 0x38	; 56
    401e:	92 4f       	sbci	r25, 0xF2	; 242
    4020:	0e 94 34 16 	call	0x2c68	; 0x2c68 <vListInsertEnd>
    4024:	81 e0       	ldi	r24, 0x01	; 1
    4026:	16 c0       	rjmp	.+44     	; 0x4054 <xTaskPriorityInherit+0xda>
    4028:	a0 91 ec 0d 	lds	r26, 0x0DEC	; 0x800dec <pxCurrentTCB>
    402c:	b0 91 ed 0d 	lds	r27, 0x0DED	; 0x800ded <pxCurrentTCB+0x1>
    4030:	56 96       	adiw	r26, 0x16	; 22
    4032:	8c 91       	ld	r24, X
    4034:	86 8b       	std	Z+22, r24	; 0x16
    4036:	81 e0       	ldi	r24, 0x01	; 1
    4038:	0d c0       	rjmp	.+26     	; 0x4054 <xTaskPriorityInherit+0xda>
    403a:	a0 91 ec 0d 	lds	r26, 0x0DEC	; 0x800dec <pxCurrentTCB>
    403e:	b0 91 ed 0d 	lds	r27, 0x0DED	; 0x800ded <pxCurrentTCB+0x1>
    4042:	81 e0       	ldi	r24, 0x01	; 1
    4044:	21 a1       	ldd	r18, Z+33	; 0x21
    4046:	56 96       	adiw	r26, 0x16	; 22
    4048:	9c 91       	ld	r25, X
    404a:	29 17       	cp	r18, r25
    404c:	18 f0       	brcs	.+6      	; 0x4054 <xTaskPriorityInherit+0xda>
    404e:	80 e0       	ldi	r24, 0x00	; 0
    4050:	01 c0       	rjmp	.+2      	; 0x4054 <xTaskPriorityInherit+0xda>
    4052:	80 e0       	ldi	r24, 0x00	; 0
    4054:	df 91       	pop	r29
    4056:	cf 91       	pop	r28
    4058:	1f 91       	pop	r17
    405a:	0f 91       	pop	r16
    405c:	08 95       	ret

0000405e <xTaskPriorityDisinherit>:
    405e:	0f 93       	push	r16
    4060:	1f 93       	push	r17
    4062:	cf 93       	push	r28
    4064:	df 93       	push	r29
    4066:	fc 01       	movw	r30, r24
    4068:	89 2b       	or	r24, r25
    406a:	79 f1       	breq	.+94     	; 0x40ca <xTaskPriorityDisinherit+0x6c>
    406c:	82 a1       	ldd	r24, Z+34	; 0x22
    406e:	81 50       	subi	r24, 0x01	; 1
    4070:	82 a3       	std	Z+34, r24	; 0x22
    4072:	26 89       	ldd	r18, Z+22	; 0x16
    4074:	91 a1       	ldd	r25, Z+33	; 0x21
    4076:	29 17       	cp	r18, r25
    4078:	51 f1       	breq	.+84     	; 0x40ce <xTaskPriorityDisinherit+0x70>
    407a:	81 11       	cpse	r24, r1
    407c:	2a c0       	rjmp	.+84     	; 0x40d2 <xTaskPriorityDisinherit+0x74>
    407e:	ef 01       	movw	r28, r30
    4080:	8f 01       	movw	r16, r30
    4082:	0e 5f       	subi	r16, 0xFE	; 254
    4084:	1f 4f       	sbci	r17, 0xFF	; 255
    4086:	c8 01       	movw	r24, r16
    4088:	0e 94 86 16 	call	0x2d0c	; 0x2d0c <uxListRemove>
    408c:	29 a1       	ldd	r18, Y+33	; 0x21
    408e:	2e 8b       	std	Y+22, r18	; 0x16
    4090:	44 e0       	ldi	r20, 0x04	; 4
    4092:	50 e0       	ldi	r21, 0x00	; 0
    4094:	42 1b       	sub	r20, r18
    4096:	51 09       	sbc	r21, r1
    4098:	5d 87       	std	Y+13, r21	; 0x0d
    409a:	4c 87       	std	Y+12, r20	; 0x0c
    409c:	80 91 ad 0d 	lds	r24, 0x0DAD	; 0x800dad <uxTopReadyPriority>
    40a0:	82 17       	cp	r24, r18
    40a2:	10 f4       	brcc	.+4      	; 0x40a8 <xTaskPriorityDisinherit+0x4a>
    40a4:	20 93 ad 0d 	sts	0x0DAD, r18	; 0x800dad <uxTopReadyPriority>
    40a8:	30 e0       	ldi	r19, 0x00	; 0
    40aa:	c9 01       	movw	r24, r18
    40ac:	88 0f       	add	r24, r24
    40ae:	99 1f       	adc	r25, r25
    40b0:	88 0f       	add	r24, r24
    40b2:	99 1f       	adc	r25, r25
    40b4:	88 0f       	add	r24, r24
    40b6:	99 1f       	adc	r25, r25
    40b8:	82 0f       	add	r24, r18
    40ba:	93 1f       	adc	r25, r19
    40bc:	b8 01       	movw	r22, r16
    40be:	88 53       	subi	r24, 0x38	; 56
    40c0:	92 4f       	sbci	r25, 0xF2	; 242
    40c2:	0e 94 34 16 	call	0x2c68	; 0x2c68 <vListInsertEnd>
    40c6:	81 e0       	ldi	r24, 0x01	; 1
    40c8:	05 c0       	rjmp	.+10     	; 0x40d4 <xTaskPriorityDisinherit+0x76>
    40ca:	80 e0       	ldi	r24, 0x00	; 0
    40cc:	03 c0       	rjmp	.+6      	; 0x40d4 <xTaskPriorityDisinherit+0x76>
    40ce:	80 e0       	ldi	r24, 0x00	; 0
    40d0:	01 c0       	rjmp	.+2      	; 0x40d4 <xTaskPriorityDisinherit+0x76>
    40d2:	80 e0       	ldi	r24, 0x00	; 0
    40d4:	df 91       	pop	r29
    40d6:	cf 91       	pop	r28
    40d8:	1f 91       	pop	r17
    40da:	0f 91       	pop	r16
    40dc:	08 95       	ret

000040de <vTaskPriorityDisinheritAfterTimeout>:
    40de:	0f 93       	push	r16
    40e0:	1f 93       	push	r17
    40e2:	cf 93       	push	r28
    40e4:	df 93       	push	r29
    40e6:	fc 01       	movw	r30, r24
    40e8:	89 2b       	or	r24, r25
    40ea:	09 f4       	brne	.+2      	; 0x40ee <vTaskPriorityDisinheritAfterTimeout+0x10>
    40ec:	43 c0       	rjmp	.+134    	; 0x4174 <vTaskPriorityDisinheritAfterTimeout+0x96>
    40ee:	81 a1       	ldd	r24, Z+33	; 0x21
    40f0:	68 17       	cp	r22, r24
    40f2:	08 f4       	brcc	.+2      	; 0x40f6 <vTaskPriorityDisinheritAfterTimeout+0x18>
    40f4:	68 2f       	mov	r22, r24
    40f6:	86 89       	ldd	r24, Z+22	; 0x16
    40f8:	86 17       	cp	r24, r22
    40fa:	e1 f1       	breq	.+120    	; 0x4174 <vTaskPriorityDisinheritAfterTimeout+0x96>
    40fc:	92 a1       	ldd	r25, Z+34	; 0x22
    40fe:	91 30       	cpi	r25, 0x01	; 1
    4100:	c9 f5       	brne	.+114    	; 0x4174 <vTaskPriorityDisinheritAfterTimeout+0x96>
    4102:	66 8b       	std	Z+22, r22	; 0x16
    4104:	24 85       	ldd	r18, Z+12	; 0x0c
    4106:	35 85       	ldd	r19, Z+13	; 0x0d
    4108:	33 23       	and	r19, r19
    410a:	34 f0       	brlt	.+12     	; 0x4118 <vTaskPriorityDisinheritAfterTimeout+0x3a>
    410c:	24 e0       	ldi	r18, 0x04	; 4
    410e:	30 e0       	ldi	r19, 0x00	; 0
    4110:	26 1b       	sub	r18, r22
    4112:	31 09       	sbc	r19, r1
    4114:	35 87       	std	Z+13, r19	; 0x0d
    4116:	24 87       	std	Z+12, r18	; 0x0c
    4118:	90 e0       	ldi	r25, 0x00	; 0
    411a:	9c 01       	movw	r18, r24
    411c:	22 0f       	add	r18, r18
    411e:	33 1f       	adc	r19, r19
    4120:	22 0f       	add	r18, r18
    4122:	33 1f       	adc	r19, r19
    4124:	22 0f       	add	r18, r18
    4126:	33 1f       	adc	r19, r19
    4128:	82 0f       	add	r24, r18
    412a:	93 1f       	adc	r25, r19
    412c:	88 53       	subi	r24, 0x38	; 56
    412e:	92 4f       	sbci	r25, 0xF2	; 242
    4130:	22 85       	ldd	r18, Z+10	; 0x0a
    4132:	33 85       	ldd	r19, Z+11	; 0x0b
    4134:	28 17       	cp	r18, r24
    4136:	39 07       	cpc	r19, r25
    4138:	e9 f4       	brne	.+58     	; 0x4174 <vTaskPriorityDisinheritAfterTimeout+0x96>
    413a:	ef 01       	movw	r28, r30
    413c:	8f 01       	movw	r16, r30
    413e:	0e 5f       	subi	r16, 0xFE	; 254
    4140:	1f 4f       	sbci	r17, 0xFF	; 255
    4142:	c8 01       	movw	r24, r16
    4144:	0e 94 86 16 	call	0x2d0c	; 0x2d0c <uxListRemove>
    4148:	2e 89       	ldd	r18, Y+22	; 0x16
    414a:	80 91 ad 0d 	lds	r24, 0x0DAD	; 0x800dad <uxTopReadyPriority>
    414e:	82 17       	cp	r24, r18
    4150:	10 f4       	brcc	.+4      	; 0x4156 <vTaskPriorityDisinheritAfterTimeout+0x78>
    4152:	20 93 ad 0d 	sts	0x0DAD, r18	; 0x800dad <uxTopReadyPriority>
    4156:	30 e0       	ldi	r19, 0x00	; 0
    4158:	c9 01       	movw	r24, r18
    415a:	88 0f       	add	r24, r24
    415c:	99 1f       	adc	r25, r25
    415e:	88 0f       	add	r24, r24
    4160:	99 1f       	adc	r25, r25
    4162:	88 0f       	add	r24, r24
    4164:	99 1f       	adc	r25, r25
    4166:	82 0f       	add	r24, r18
    4168:	93 1f       	adc	r25, r19
    416a:	b8 01       	movw	r22, r16
    416c:	88 53       	subi	r24, 0x38	; 56
    416e:	92 4f       	sbci	r25, 0xF2	; 242
    4170:	0e 94 34 16 	call	0x2c68	; 0x2c68 <vListInsertEnd>
    4174:	df 91       	pop	r29
    4176:	cf 91       	pop	r28
    4178:	1f 91       	pop	r17
    417a:	0f 91       	pop	r16
    417c:	08 95       	ret

0000417e <pvTaskIncrementMutexHeldCount>:

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
        then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
    417e:	80 91 ec 0d 	lds	r24, 0x0DEC	; 0x800dec <pxCurrentTCB>
    4182:	90 91 ed 0d 	lds	r25, 0x0DED	; 0x800ded <pxCurrentTCB+0x1>
    4186:	89 2b       	or	r24, r25
    4188:	39 f0       	breq	.+14     	; 0x4198 <pvTaskIncrementMutexHeldCount+0x1a>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
    418a:	e0 91 ec 0d 	lds	r30, 0x0DEC	; 0x800dec <pxCurrentTCB>
    418e:	f0 91 ed 0d 	lds	r31, 0x0DED	; 0x800ded <pxCurrentTCB+0x1>
    4192:	82 a1       	ldd	r24, Z+34	; 0x22
    4194:	8f 5f       	subi	r24, 0xFF	; 255
    4196:	82 a3       	std	Z+34, r24	; 0x22
        }

        return pxCurrentTCB;
    4198:	80 91 ec 0d 	lds	r24, 0x0DEC	; 0x800dec <pxCurrentTCB>
    419c:	90 91 ed 0d 	lds	r25, 0x0DED	; 0x800ded <pxCurrentTCB+0x1>
    }
    41a0:	08 95       	ret

000041a2 <prvInsertTimerInActiveList>:
            }
            #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
        }

        return pxNewTimer;
    }
    41a2:	fc 01       	movw	r30, r24
    41a4:	73 83       	std	Z+3, r23	; 0x03
    41a6:	62 83       	std	Z+2, r22	; 0x02
    41a8:	91 87       	std	Z+9, r25	; 0x09
    41aa:	80 87       	std	Z+8, r24	; 0x08
    41ac:	46 17       	cp	r20, r22
    41ae:	57 07       	cpc	r21, r23
    41b0:	90 f0       	brcs	.+36     	; 0x41d6 <prvInsertTimerInActiveList+0x34>
    41b2:	42 1b       	sub	r20, r18
    41b4:	53 0b       	sbc	r21, r19
    41b6:	84 85       	ldd	r24, Z+12	; 0x0c
    41b8:	95 85       	ldd	r25, Z+13	; 0x0d
    41ba:	48 17       	cp	r20, r24
    41bc:	59 07       	cpc	r21, r25
    41be:	e0 f4       	brcc	.+56     	; 0x41f8 <prvInsertTimerInActiveList+0x56>
    41c0:	bf 01       	movw	r22, r30
    41c2:	6e 5f       	subi	r22, 0xFE	; 254
    41c4:	7f 4f       	sbci	r23, 0xFF	; 255
    41c6:	80 91 57 0e 	lds	r24, 0x0E57	; 0x800e57 <pxOverflowTimerList>
    41ca:	90 91 58 0e 	lds	r25, 0x0E58	; 0x800e58 <pxOverflowTimerList+0x1>
    41ce:	0e 94 55 16 	call	0x2caa	; 0x2caa <vListInsert>
    41d2:	80 e0       	ldi	r24, 0x00	; 0
    41d4:	08 95       	ret
    41d6:	42 17       	cp	r20, r18
    41d8:	53 07       	cpc	r21, r19
    41da:	18 f4       	brcc	.+6      	; 0x41e2 <prvInsertTimerInActiveList+0x40>
    41dc:	62 17       	cp	r22, r18
    41de:	73 07       	cpc	r23, r19
    41e0:	68 f4       	brcc	.+26     	; 0x41fc <prvInsertTimerInActiveList+0x5a>
    41e2:	bf 01       	movw	r22, r30
    41e4:	6e 5f       	subi	r22, 0xFE	; 254
    41e6:	7f 4f       	sbci	r23, 0xFF	; 255
    41e8:	80 91 59 0e 	lds	r24, 0x0E59	; 0x800e59 <pxCurrentTimerList>
    41ec:	90 91 5a 0e 	lds	r25, 0x0E5A	; 0x800e5a <pxCurrentTimerList+0x1>
    41f0:	0e 94 55 16 	call	0x2caa	; 0x2caa <vListInsert>
    41f4:	80 e0       	ldi	r24, 0x00	; 0
    41f6:	08 95       	ret
    41f8:	81 e0       	ldi	r24, 0x01	; 1
    41fa:	08 95       	ret
    41fc:	81 e0       	ldi	r24, 0x01	; 1
    41fe:	08 95       	ret

00004200 <prvCheckForValidListAndQueue>:
    4200:	0f 93       	push	r16
    4202:	0f b6       	in	r0, 0x3f	; 63
    4204:	f8 94       	cli
    4206:	0f 92       	push	r0
    4208:	80 91 55 0e 	lds	r24, 0x0E55	; 0x800e55 <xTimerQueue>
    420c:	90 91 56 0e 	lds	r25, 0x0E56	; 0x800e56 <xTimerQueue+0x1>
    4210:	89 2b       	or	r24, r25
    4212:	01 f5       	brne	.+64     	; 0x4254 <prvCheckForValidListAndQueue+0x54>
    4214:	88 e4       	ldi	r24, 0x48	; 72
    4216:	9e e0       	ldi	r25, 0x0E	; 14
    4218:	0e 94 22 16 	call	0x2c44	; 0x2c44 <vListInitialise>
    421c:	8f e3       	ldi	r24, 0x3F	; 63
    421e:	9e e0       	ldi	r25, 0x0E	; 14
    4220:	0e 94 22 16 	call	0x2c44	; 0x2c44 <vListInitialise>
    4224:	88 e4       	ldi	r24, 0x48	; 72
    4226:	9e e0       	ldi	r25, 0x0E	; 14
    4228:	90 93 5a 0e 	sts	0x0E5A, r25	; 0x800e5a <pxCurrentTimerList+0x1>
    422c:	80 93 59 0e 	sts	0x0E59, r24	; 0x800e59 <pxCurrentTimerList>
    4230:	8f e3       	ldi	r24, 0x3F	; 63
    4232:	9e e0       	ldi	r25, 0x0E	; 14
    4234:	90 93 58 0e 	sts	0x0E58, r25	; 0x800e58 <pxOverflowTimerList+0x1>
    4238:	80 93 57 0e 	sts	0x0E57, r24	; 0x800e57 <pxOverflowTimerList>
    423c:	00 e0       	ldi	r16, 0x00	; 0
    423e:	2e ee       	ldi	r18, 0xEE	; 238
    4240:	3d e0       	ldi	r19, 0x0D	; 13
    4242:	4d e0       	ldi	r20, 0x0D	; 13
    4244:	5e e0       	ldi	r21, 0x0E	; 14
    4246:	65 e0       	ldi	r22, 0x05	; 5
    4248:	8a e0       	ldi	r24, 0x0A	; 10
    424a:	0a d8       	rcall	.-4076   	; 0x3260 <xQueueGenericCreateStatic>
    424c:	90 93 56 0e 	sts	0x0E56, r25	; 0x800e56 <xTimerQueue+0x1>
    4250:	80 93 55 0e 	sts	0x0E55, r24	; 0x800e55 <xTimerQueue>
    4254:	0f 90       	pop	r0
    4256:	0f be       	out	0x3f, r0	; 63
    4258:	0f 91       	pop	r16
    425a:	08 95       	ret

0000425c <xTimerCreateTimerTask>:
    425c:	cf 92       	push	r12
    425e:	df 92       	push	r13
    4260:	ef 92       	push	r14
    4262:	ff 92       	push	r15
    4264:	0f 93       	push	r16
    4266:	cf 93       	push	r28
    4268:	df 93       	push	r29
    426a:	00 d0       	rcall	.+0      	; 0x426c <xTimerCreateTimerTask+0x10>
    426c:	00 d0       	rcall	.+0      	; 0x426e <xTimerCreateTimerTask+0x12>
    426e:	cd b7       	in	r28, 0x3d	; 61
    4270:	de b7       	in	r29, 0x3e	; 62
    4272:	c6 df       	rcall	.-116    	; 0x4200 <prvCheckForValidListAndQueue>
    4274:	80 91 55 0e 	lds	r24, 0x0E55	; 0x800e55 <xTimerQueue>
    4278:	90 91 56 0e 	lds	r25, 0x0E56	; 0x800e56 <xTimerQueue+0x1>
    427c:	89 2b       	or	r24, r25
    427e:	31 f1       	breq	.+76     	; 0x42cc <xTimerCreateTimerTask+0x70>
    4280:	1e 82       	std	Y+6, r1	; 0x06
    4282:	1d 82       	std	Y+5, r1	; 0x05
    4284:	1c 82       	std	Y+4, r1	; 0x04
    4286:	1b 82       	std	Y+3, r1	; 0x03
    4288:	ae 01       	movw	r20, r28
    428a:	4f 5f       	subi	r20, 0xFF	; 255
    428c:	5f 4f       	sbci	r21, 0xFF	; 255
    428e:	be 01       	movw	r22, r28
    4290:	6d 5f       	subi	r22, 0xFD	; 253
    4292:	7f 4f       	sbci	r23, 0xFF	; 255
    4294:	ce 01       	movw	r24, r28
    4296:	05 96       	adiw	r24, 0x05	; 5
    4298:	0e 94 12 16 	call	0x2c24	; 0x2c24 <vApplicationGetTimerTaskMemory>
    429c:	cd 80       	ldd	r12, Y+5	; 0x05
    429e:	de 80       	ldd	r13, Y+6	; 0x06
    42a0:	eb 80       	ldd	r14, Y+3	; 0x03
    42a2:	fc 80       	ldd	r15, Y+4	; 0x04
    42a4:	49 81       	ldd	r20, Y+1	; 0x01
    42a6:	5a 81       	ldd	r21, Y+2	; 0x02
    42a8:	03 e0       	ldi	r16, 0x03	; 3
    42aa:	20 e0       	ldi	r18, 0x00	; 0
    42ac:	30 e0       	ldi	r19, 0x00	; 0
    42ae:	67 e0       	ldi	r22, 0x07	; 7
    42b0:	73 e0       	ldi	r23, 0x03	; 3
    42b2:	89 e2       	ldi	r24, 0x29	; 41
    42b4:	92 e2       	ldi	r25, 0x22	; 34
    42b6:	8f da       	rcall	.-2786   	; 0x37d6 <xTaskCreateStatic>
    42b8:	9c 01       	movw	r18, r24
    42ba:	90 93 54 0e 	sts	0x0E54, r25	; 0x800e54 <xTimerTaskHandle+0x1>
    42be:	80 93 53 0e 	sts	0x0E53, r24	; 0x800e53 <xTimerTaskHandle>
    42c2:	81 e0       	ldi	r24, 0x01	; 1
    42c4:	23 2b       	or	r18, r19
    42c6:	19 f4       	brne	.+6      	; 0x42ce <xTimerCreateTimerTask+0x72>
    42c8:	80 e0       	ldi	r24, 0x00	; 0
    42ca:	01 c0       	rjmp	.+2      	; 0x42ce <xTimerCreateTimerTask+0x72>
    42cc:	80 e0       	ldi	r24, 0x00	; 0
    42ce:	26 96       	adiw	r28, 0x06	; 6
    42d0:	0f b6       	in	r0, 0x3f	; 63
    42d2:	f8 94       	cli
    42d4:	de bf       	out	0x3e, r29	; 62
    42d6:	0f be       	out	0x3f, r0	; 63
    42d8:	cd bf       	out	0x3d, r28	; 61
    42da:	df 91       	pop	r29
    42dc:	cf 91       	pop	r28
    42de:	0f 91       	pop	r16
    42e0:	ff 90       	pop	r15
    42e2:	ef 90       	pop	r14
    42e4:	df 90       	pop	r13
    42e6:	cf 90       	pop	r12
    42e8:	08 95       	ret

000042ea <xTimerGenericCommand>:
    }
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
    42ea:	0f 93       	push	r16
    42ec:	1f 93       	push	r17
    42ee:	cf 93       	push	r28
    42f0:	df 93       	push	r29
    42f2:	00 d0       	rcall	.+0      	; 0x42f4 <xTimerGenericCommand+0xa>
    42f4:	1f 92       	push	r1
    42f6:	1f 92       	push	r1
    42f8:	cd b7       	in	r28, 0x3d	; 61
    42fa:	de b7       	in	r29, 0x3e	; 62

    configASSERT( xTimer );

    /* Send a message to the timer service task to perform a particular action
    on a particular timer definition. */
    if( xTimerQueue != NULL )
    42fc:	e0 91 55 0e 	lds	r30, 0x0E55	; 0x800e55 <xTimerQueue>
    4300:	f0 91 56 0e 	lds	r31, 0x0E56	; 0x800e56 <xTimerQueue+0x1>
    4304:	30 97       	sbiw	r30, 0x00	; 0
    4306:	61 f1       	breq	.+88     	; 0x4360 <xTimerGenericCommand+0x76>
    4308:	d9 01       	movw	r26, r18
    {
        /* Send a command to the timer service task to start the xTimer timer. */
        xMessage.xMessageID = xCommandID;
    430a:	69 83       	std	Y+1, r22	; 0x01
        xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    430c:	5b 83       	std	Y+3, r21	; 0x03
    430e:	4a 83       	std	Y+2, r20	; 0x02
        xMessage.u.xTimerParameters.pxTimer = xTimer;
    4310:	9d 83       	std	Y+5, r25	; 0x05
    4312:	8c 83       	std	Y+4, r24	; 0x04

        if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    4314:	66 30       	cpi	r22, 0x06	; 6
    4316:	e4 f4       	brge	.+56     	; 0x4350 <xTimerGenericCommand+0x66>
        {
            if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    4318:	22 de       	rcall	.-956    	; 0x3f5e <xTaskGetSchedulerState>
    431a:	82 30       	cpi	r24, 0x02	; 2
    431c:	61 f4       	brne	.+24     	; 0x4336 <xTimerGenericCommand+0x4c>
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    431e:	20 e0       	ldi	r18, 0x00	; 0
    4320:	a8 01       	movw	r20, r16
    4322:	be 01       	movw	r22, r28
    4324:	6f 5f       	subi	r22, 0xFF	; 255
    4326:	7f 4f       	sbci	r23, 0xFF	; 255
    4328:	80 91 55 0e 	lds	r24, 0x0E55	; 0x800e55 <xTimerQueue>
    432c:	90 91 56 0e 	lds	r25, 0x0E56	; 0x800e56 <xTimerQueue+0x1>
    4330:	0e 94 45 19 	call	0x328a	; 0x328a <xQueueGenericSend>
    4334:	16 c0       	rjmp	.+44     	; 0x4362 <xTimerGenericCommand+0x78>
            }
            else
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    4336:	20 e0       	ldi	r18, 0x00	; 0
    4338:	40 e0       	ldi	r20, 0x00	; 0
    433a:	50 e0       	ldi	r21, 0x00	; 0
    433c:	be 01       	movw	r22, r28
    433e:	6f 5f       	subi	r22, 0xFF	; 255
    4340:	7f 4f       	sbci	r23, 0xFF	; 255
    4342:	80 91 55 0e 	lds	r24, 0x0E55	; 0x800e55 <xTimerQueue>
    4346:	90 91 56 0e 	lds	r25, 0x0E56	; 0x800e56 <xTimerQueue+0x1>
    434a:	0e 94 45 19 	call	0x328a	; 0x328a <xQueueGenericSend>
    434e:	09 c0       	rjmp	.+18     	; 0x4362 <xTimerGenericCommand+0x78>
            }
        }
        else
        {
            xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    4350:	20 e0       	ldi	r18, 0x00	; 0
    4352:	ad 01       	movw	r20, r26
    4354:	be 01       	movw	r22, r28
    4356:	6f 5f       	subi	r22, 0xFF	; 255
    4358:	7f 4f       	sbci	r23, 0xFF	; 255
    435a:	cf 01       	movw	r24, r30
    435c:	45 d8       	rcall	.-3958   	; 0x33e8 <xQueueGenericSendFromISR>
    435e:	01 c0       	rjmp	.+2      	; 0x4362 <xTimerGenericCommand+0x78>
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
    4360:	80 e0       	ldi	r24, 0x00	; 0
    {
        mtCOVERAGE_TEST_MARKER();
    }

    return xReturn;
}
    4362:	0f 90       	pop	r0
    4364:	0f 90       	pop	r0
    4366:	0f 90       	pop	r0
    4368:	0f 90       	pop	r0
    436a:	0f 90       	pop	r0
    436c:	df 91       	pop	r29
    436e:	cf 91       	pop	r28
    4370:	1f 91       	pop	r17
    4372:	0f 91       	pop	r16
    4374:	08 95       	ret

00004376 <prvSampleTimeNow>:
    return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
    4376:	af 92       	push	r10
    4378:	bf 92       	push	r11
    437a:	cf 92       	push	r12
    437c:	df 92       	push	r13
    437e:	ef 92       	push	r14
    4380:	ff 92       	push	r15
    4382:	0f 93       	push	r16
    4384:	1f 93       	push	r17
    4386:	cf 93       	push	r28
    4388:	df 93       	push	r29
    438a:	6c 01       	movw	r12, r24
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

    xTimeNow = xTaskGetTickCount();
    438c:	70 db       	rcall	.-2336   	; 0x3a6e <xTaskGetTickCount>
    438e:	7c 01       	movw	r14, r24

    if( xTimeNow < xLastTime )
    4390:	80 91 51 0e 	lds	r24, 0x0E51	; 0x800e51 <xLastTime.2278>
    4394:	90 91 52 0e 	lds	r25, 0x0E52	; 0x800e52 <xLastTime.2278+0x1>
    4398:	e8 16       	cp	r14, r24
    439a:	f9 06       	cpc	r15, r25
    439c:	08 f0       	brcs	.+2      	; 0x43a0 <prvSampleTimeNow+0x2a>
    439e:	47 c0       	rjmp	.+142    	; 0x442e <prvSampleTimeNow+0xb8>
    43a0:	2f c0       	rjmp	.+94     	; 0x4400 <prvSampleTimeNow+0x8a>
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    {
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    43a2:	05 80       	ldd	r0, Z+5	; 0x05
    43a4:	f6 81       	ldd	r31, Z+6	; 0x06
    43a6:	e0 2d       	mov	r30, r0
    43a8:	a0 80       	ld	r10, Z
    43aa:	b1 80       	ldd	r11, Z+1	; 0x01

        /* Remove the timer from the list. */
        pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    43ac:	c6 81       	ldd	r28, Z+6	; 0x06
    43ae:	d7 81       	ldd	r29, Z+7	; 0x07
        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    43b0:	8e 01       	movw	r16, r28
    43b2:	0e 5f       	subi	r16, 0xFE	; 254
    43b4:	1f 4f       	sbci	r17, 0xFF	; 255
    43b6:	c8 01       	movw	r24, r16
    43b8:	0e 94 86 16 	call	0x2d0c	; 0x2d0c <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* Execute its callback, then send a command to restart the timer if
        it is an auto-reload timer.  It cannot be restarted here as the lists
        have not yet been switched. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    43bc:	e9 89       	ldd	r30, Y+17	; 0x11
    43be:	fa 89       	ldd	r31, Y+18	; 0x12
    43c0:	ce 01       	movw	r24, r28
    43c2:	19 95       	eicall

        if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    43c4:	8e 85       	ldd	r24, Y+14	; 0x0e
    43c6:	81 30       	cpi	r24, 0x01	; 1
    43c8:	d9 f4       	brne	.+54     	; 0x4400 <prvSampleTimeNow+0x8a>
            the timer going into the same timer list then it has already expired
            and the timer should be re-inserted into the current list so it is
            processed again within this loop.  Otherwise a command should be sent
            to restart the timer to ensure it is only inserted into a list after
            the lists have been swapped. */
            xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    43ca:	8c 85       	ldd	r24, Y+12	; 0x0c
    43cc:	9d 85       	ldd	r25, Y+13	; 0x0d
    43ce:	8a 0d       	add	r24, r10
    43d0:	9b 1d       	adc	r25, r11
            if( xReloadTime > xNextExpireTime )
    43d2:	a8 16       	cp	r10, r24
    43d4:	b9 06       	cpc	r11, r25
    43d6:	60 f4       	brcc	.+24     	; 0x43f0 <prvSampleTimeNow+0x7a>
            {
                listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    43d8:	9b 83       	std	Y+3, r25	; 0x03
    43da:	8a 83       	std	Y+2, r24	; 0x02
                listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    43dc:	d9 87       	std	Y+9, r29	; 0x09
    43de:	c8 87       	std	Y+8, r28	; 0x08
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    43e0:	b8 01       	movw	r22, r16
    43e2:	80 91 59 0e 	lds	r24, 0x0E59	; 0x800e59 <pxCurrentTimerList>
    43e6:	90 91 5a 0e 	lds	r25, 0x0E5A	; 0x800e5a <pxCurrentTimerList+0x1>
    43ea:	0e 94 55 16 	call	0x2caa	; 0x2caa <vListInsert>
    43ee:	08 c0       	rjmp	.+16     	; 0x4400 <prvSampleTimeNow+0x8a>
            }
            else
            {
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    43f0:	00 e0       	ldi	r16, 0x00	; 0
    43f2:	10 e0       	ldi	r17, 0x00	; 0
    43f4:	20 e0       	ldi	r18, 0x00	; 0
    43f6:	30 e0       	ldi	r19, 0x00	; 0
    43f8:	a5 01       	movw	r20, r10
    43fa:	60 e0       	ldi	r22, 0x00	; 0
    43fc:	ce 01       	movw	r24, r28
    43fe:	75 df       	rcall	.-278    	; 0x42ea <xTimerGenericCommand>

    /* The tick count has overflowed.  The timer lists must be switched.
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    4400:	e0 91 59 0e 	lds	r30, 0x0E59	; 0x800e59 <pxCurrentTimerList>
    4404:	f0 91 5a 0e 	lds	r31, 0x0E5A	; 0x800e5a <pxCurrentTimerList+0x1>
    4408:	90 81       	ld	r25, Z
    440a:	91 11       	cpse	r25, r1
    440c:	ca cf       	rjmp	.-108    	; 0x43a2 <prvSampleTimeNow+0x2c>
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxTemp = pxCurrentTimerList;
    pxCurrentTimerList = pxOverflowTimerList;
    440e:	80 91 57 0e 	lds	r24, 0x0E57	; 0x800e57 <pxOverflowTimerList>
    4412:	90 91 58 0e 	lds	r25, 0x0E58	; 0x800e58 <pxOverflowTimerList+0x1>
    4416:	90 93 5a 0e 	sts	0x0E5A, r25	; 0x800e5a <pxCurrentTimerList+0x1>
    441a:	80 93 59 0e 	sts	0x0E59, r24	; 0x800e59 <pxCurrentTimerList>
    pxOverflowTimerList = pxTemp;
    441e:	f0 93 58 0e 	sts	0x0E58, r31	; 0x800e58 <pxOverflowTimerList+0x1>
    4422:	e0 93 57 0e 	sts	0x0E57, r30	; 0x800e57 <pxOverflowTimerList>
    xTimeNow = xTaskGetTickCount();

    if( xTimeNow < xLastTime )
    {
        prvSwitchTimerLists();
        *pxTimerListsWereSwitched = pdTRUE;
    4426:	81 e0       	ldi	r24, 0x01	; 1
    4428:	f6 01       	movw	r30, r12
    442a:	80 83       	st	Z, r24
    442c:	02 c0       	rjmp	.+4      	; 0x4432 <prvSampleTimeNow+0xbc>
    }
    else
    {
        *pxTimerListsWereSwitched = pdFALSE;
    442e:	f6 01       	movw	r30, r12
    4430:	10 82       	st	Z, r1
    }

    xLastTime = xTimeNow;
    4432:	f0 92 52 0e 	sts	0x0E52, r15	; 0x800e52 <xLastTime.2278+0x1>
    4436:	e0 92 51 0e 	sts	0x0E51, r14	; 0x800e51 <xLastTime.2278>

    return xTimeNow;
}
    443a:	c7 01       	movw	r24, r14
    443c:	df 91       	pop	r29
    443e:	cf 91       	pop	r28
    4440:	1f 91       	pop	r17
    4442:	0f 91       	pop	r16
    4444:	ff 90       	pop	r15
    4446:	ef 90       	pop	r14
    4448:	df 90       	pop	r13
    444a:	cf 90       	pop	r12
    444c:	bf 90       	pop	r11
    444e:	af 90       	pop	r10
    4450:	08 95       	ret

00004452 <prvTimerTask>:
    pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
}
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
    4452:	cf 93       	push	r28
    4454:	df 93       	push	r29
    4456:	00 d0       	rcall	.+0      	; 0x4458 <prvTimerTask+0x6>
    4458:	00 d0       	rcall	.+0      	; 0x445a <prvTimerTask+0x8>
    445a:	cd b7       	in	r28, 0x3d	; 61
    445c:	de b7       	in	r29, 0x3e	; 62
        /* Obtain the time now to make an assessment as to whether the timer
        has expired or not.  If obtaining the time causes the lists to switch
        then don't process this timer as any timers that remained in the list
        when the lists were switched will have been processed within the
        prvSampleTimeNow() function. */
        xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    445e:	ce 01       	movw	r24, r28
    4460:	01 96       	adiw	r24, 0x01	; 1
    4462:	4c 01       	movw	r8, r24
                case when the current timer list is empty. */
                if( xListWasEmpty != pdFALSE )
                {
                    /* The current timer list is empty - is the overflow list
                    also empty? */
                    xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    4464:	55 24       	eor	r5, r5
    4466:	53 94       	inc	r5
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    }
    else
    {
        /* Ensure the task unblocks when the tick count rolls over. */
        xNextExpireTime = ( TickType_t ) 0U;
    4468:	e1 2c       	mov	r14, r1
    446a:	f1 2c       	mov	r15, r1
                case when the current timer list is empty. */
                if( xListWasEmpty != pdFALSE )
                {
                    /* The current timer list is empty - is the overflow list
                    also empty? */
                    xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    446c:	41 2c       	mov	r4, r1
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

    while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    446e:	c8 2e       	mov	r12, r24
    4470:	d9 2c       	mov	r13, r9
    the timer with the nearest expiry time will expire.  If there are no
    active timers then just set the next expire time to 0.  That will cause
    this task to unblock when the tick count overflows, at which point the
    timer lists will be switched and the next expiry time can be
    re-assessed.  */
    *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    4472:	e0 91 59 0e 	lds	r30, 0x0E59	; 0x800e59 <pxCurrentTimerList>
    4476:	f0 91 5a 0e 	lds	r31, 0x0E5A	; 0x800e5a <pxCurrentTimerList+0x1>
    447a:	80 81       	ld	r24, Z
    if( *pxListWasEmpty == pdFALSE )
    447c:	88 23       	and	r24, r24
    447e:	69 f0       	breq	.+26     	; 0x449a <prvTimerTask+0x48>
    {
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    4480:	05 80       	ldd	r0, Z+5	; 0x05
    4482:	f6 81       	ldd	r31, Z+6	; 0x06
    4484:	e0 2d       	mov	r30, r0
    4486:	a0 80       	ld	r10, Z
    4488:	b1 80       	ldd	r11, Z+1	; 0x01
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

    vTaskSuspendAll();
    448a:	eb da       	rcall	.-2602   	; 0x3a62 <vTaskSuspendAll>
        /* Obtain the time now to make an assessment as to whether the timer
        has expired or not.  If obtaining the time causes the lists to switch
        then don't process this timer as any timers that remained in the list
        when the lists were switched will have been processed within the
        prvSampleTimeNow() function. */
        xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    448c:	c4 01       	movw	r24, r8
    448e:	73 df       	rcall	.-282    	; 0x4376 <prvSampleTimeNow>
    4490:	8c 01       	movw	r16, r24
        if( xTimerListsWereSwitched == pdFALSE )
    4492:	89 81       	ldd	r24, Y+1	; 0x01
    4494:	88 23       	and	r24, r24
    4496:	49 f0       	breq	.+18     	; 0x44aa <prvTimerTask+0x58>
    4498:	56 c0       	rjmp	.+172    	; 0x4546 <prvTimerTask+0xf4>
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

    vTaskSuspendAll();
    449a:	e3 da       	rcall	.-2618   	; 0x3a62 <vTaskSuspendAll>
        /* Obtain the time now to make an assessment as to whether the timer
        has expired or not.  If obtaining the time causes the lists to switch
        then don't process this timer as any timers that remained in the list
        when the lists were switched will have been processed within the
        prvSampleTimeNow() function. */
        xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    449c:	c4 01       	movw	r24, r8
    449e:	6b df       	rcall	.-298    	; 0x4376 <prvSampleTimeNow>
    44a0:	8c 01       	movw	r16, r24
        if( xTimerListsWereSwitched == pdFALSE )
    44a2:	89 81       	ldd	r24, Y+1	; 0x01
    44a4:	88 23       	and	r24, r24
    44a6:	a9 f1       	breq	.+106    	; 0x4512 <prvTimerTask+0xc0>
    44a8:	4e c0       	rjmp	.+156    	; 0x4546 <prvTimerTask+0xf4>
        {
            /* The tick count has not overflowed, has the timer expired? */
            if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    44aa:	0a 15       	cp	r16, r10
    44ac:	1b 05       	cpc	r17, r11
    44ae:	08 f4       	brcc	.+2      	; 0x44b2 <prvTimerTask+0x60>
    44b0:	3b c0       	rjmp	.+118    	; 0x4528 <prvTimerTask+0xd6>
            {
                ( void ) xTaskResumeAll();
    44b2:	9e db       	rcall	.-2244   	; 0x3bf0 <xTaskResumeAll>
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    44b4:	e0 91 59 0e 	lds	r30, 0x0E59	; 0x800e59 <pxCurrentTimerList>
    44b8:	f0 91 5a 0e 	lds	r31, 0x0E5A	; 0x800e5a <pxCurrentTimerList+0x1>
    44bc:	05 80       	ldd	r0, Z+5	; 0x05
    44be:	f6 81       	ldd	r31, Z+6	; 0x06
    44c0:	e0 2d       	mov	r30, r0
    44c2:	66 80       	ldd	r6, Z+6	; 0x06
    44c4:	77 80       	ldd	r7, Z+7	; 0x07

    /* Remove the timer from the list of active timers.  A check has already
    been performed to ensure the list is not empty. */
    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    44c6:	c3 01       	movw	r24, r6
    44c8:	02 96       	adiw	r24, 0x02	; 2
    44ca:	0e 94 86 16 	call	0x2d0c	; 0x2d0c <uxListRemove>
    traceTIMER_EXPIRED( pxTimer );

    /* If the timer is an auto reload timer then calculate the next
    expiry time and re-insert the timer in the list of active timers. */
    if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    44ce:	d3 01       	movw	r26, r6
    44d0:	1e 96       	adiw	r26, 0x0e	; 14
    44d2:	8c 91       	ld	r24, X
    44d4:	1e 97       	sbiw	r26, 0x0e	; 14
    44d6:	81 30       	cpi	r24, 0x01	; 1
    44d8:	a1 f4       	brne	.+40     	; 0x4502 <prvTimerTask+0xb0>
    {
        /* The timer is inserted into a list using a time relative to anything
        other than the current time.  It will therefore be inserted into the
        correct list relative to the time this task thinks it is now. */
        if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    44da:	1c 96       	adiw	r26, 0x0c	; 12
    44dc:	6d 91       	ld	r22, X+
    44de:	7c 91       	ld	r23, X
    44e0:	1d 97       	sbiw	r26, 0x0d	; 13
    44e2:	6a 0d       	add	r22, r10
    44e4:	7b 1d       	adc	r23, r11
    44e6:	95 01       	movw	r18, r10
    44e8:	a8 01       	movw	r20, r16
    44ea:	c3 01       	movw	r24, r6
    44ec:	5a de       	rcall	.-844    	; 0x41a2 <prvInsertTimerInActiveList>
    44ee:	88 23       	and	r24, r24
    44f0:	41 f0       	breq	.+16     	; 0x4502 <prvTimerTask+0xb0>
        {
            /* The timer expired before it was added to the active timer
            list.  Reload it now.  */
            xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    44f2:	0e 2d       	mov	r16, r14
    44f4:	1f 2d       	mov	r17, r15
    44f6:	2e 2d       	mov	r18, r14
    44f8:	3f 2d       	mov	r19, r15
    44fa:	a5 01       	movw	r20, r10
    44fc:	64 2d       	mov	r22, r4
    44fe:	c3 01       	movw	r24, r6
    4500:	f4 de       	rcall	.-536    	; 0x42ea <xTimerGenericCommand>
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* Call the timer callback. */
    pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    4502:	d3 01       	movw	r26, r6
    4504:	51 96       	adiw	r26, 0x11	; 17
    4506:	ed 91       	ld	r30, X+
    4508:	fc 91       	ld	r31, X
    450a:	52 97       	sbiw	r26, 0x12	; 18
    450c:	c3 01       	movw	r24, r6
    450e:	19 95       	eicall
    4510:	6f c0       	rjmp	.+222    	; 0x45f0 <prvTimerTask+0x19e>
                case when the current timer list is empty. */
                if( xListWasEmpty != pdFALSE )
                {
                    /* The current timer list is empty - is the overflow list
                    also empty? */
                    xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    4512:	e0 91 57 0e 	lds	r30, 0x0E57	; 0x800e57 <pxOverflowTimerList>
    4516:	f0 91 58 0e 	lds	r31, 0x0E58	; 0x800e58 <pxOverflowTimerList+0x1>
    451a:	80 81       	ld	r24, Z
    451c:	45 2d       	mov	r20, r5
    451e:	81 11       	cpse	r24, r1
    4520:	44 2d       	mov	r20, r4
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    }
    else
    {
        /* Ensure the task unblocks when the tick count rolls over. */
        xNextExpireTime = ( TickType_t ) 0U;
    4522:	ae 2c       	mov	r10, r14
    4524:	bf 2c       	mov	r11, r15
    4526:	01 c0       	rjmp	.+2      	; 0x452a <prvTimerTask+0xd8>
        prvSampleTimeNow() function. */
        xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
        if( xTimerListsWereSwitched == pdFALSE )
        {
            /* The tick count has not overflowed, has the timer expired? */
            if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    4528:	44 2d       	mov	r20, r4
                    /* The current timer list is empty - is the overflow list
                    also empty? */
                    xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
                }

                vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    452a:	b5 01       	movw	r22, r10
    452c:	60 1b       	sub	r22, r16
    452e:	71 0b       	sbc	r23, r17
    4530:	80 91 55 0e 	lds	r24, 0x0E55	; 0x800e55 <xTimerQueue>
    4534:	90 91 56 0e 	lds	r25, 0x0E56	; 0x800e56 <xTimerQueue+0x1>
    4538:	d3 d8       	rcall	.-3674   	; 0x36e0 <vQueueWaitForMessageRestricted>

                if( xTaskResumeAll() == pdFALSE )
    453a:	5a db       	rcall	.-2380   	; 0x3bf0 <xTaskResumeAll>
    453c:	81 11       	cpse	r24, r1
    453e:	58 c0       	rjmp	.+176    	; 0x45f0 <prvTimerTask+0x19e>
                {
                    /* Yield to wait for either a command to arrive, or the
                    block time to expire.  If a command arrived between the
                    critical section being exited and this yield then the yield
                    will not cause the task to block. */
                    portYIELD_WITHIN_API();
    4540:	0e 94 5b 17 	call	0x2eb6	; 0x2eb6 <vPortYield>
    4544:	55 c0       	rjmp	.+170    	; 0x45f0 <prvTimerTask+0x19e>
                }
            }
        }
        else
        {
            ( void ) xTaskResumeAll();
    4546:	54 db       	rcall	.-2392   	; 0x3bf0 <xTaskResumeAll>
    4548:	53 c0       	rjmp	.+166    	; 0x45f0 <prvTimerTask+0x19e>
        }
        #endif /* INCLUDE_xTimerPendFunctionCall */

        /* Commands that are positive are timer commands rather than pended
        function calls. */
        if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    454a:	89 81       	ldd	r24, Y+1	; 0x01
    454c:	88 23       	and	r24, r24
    454e:	0c f4       	brge	.+2      	; 0x4552 <prvTimerTask+0x100>
    4550:	4f c0       	rjmp	.+158    	; 0x45f0 <prvTimerTask+0x19e>
        {
            /* The messages uses the xTimerParameters member to work on a
            software timer. */
            pxTimer = xMessage.u.xTimerParameters.pxTimer;
    4552:	ac 80       	ldd	r10, Y+4	; 0x04
    4554:	bd 80       	ldd	r11, Y+5	; 0x05

        if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    4556:	f5 01       	movw	r30, r10
    4558:	82 85       	ldd	r24, Z+10	; 0x0a
    455a:	93 85       	ldd	r25, Z+11	; 0x0b
    455c:	89 2b       	or	r24, r25
    455e:	21 f0       	breq	.+8      	; 0x4568 <prvTimerTask+0x116>
            {
                /* The timer is in a list, remove it. */
                ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    4560:	c5 01       	movw	r24, r10
    4562:	02 96       	adiw	r24, 0x02	; 2
    4564:	0e 94 86 16 	call	0x2d0c	; 0x2d0c <uxListRemove>
            it must be present in the function call.  prvSampleTimeNow() must be
            called after the message is received from xTimerQueue so there is no
            possibility of a higher priority task adding a message to the message
            queue with a time that is ahead of the timer daemon task (because it
            pre-empted the timer daemon task after the xTimeNow value was set). */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    4568:	ce 01       	movw	r24, r28
    456a:	06 96       	adiw	r24, 0x06	; 6
    456c:	04 df       	rcall	.-504    	; 0x4376 <prvSampleTimeNow>
    456e:	ac 01       	movw	r20, r24

            switch( xMessage.xMessageID )
    4570:	99 81       	ldd	r25, Y+1	; 0x01
    4572:	94 30       	cpi	r25, 0x04	; 4
    4574:	89 f1       	breq	.+98     	; 0x45d8 <prvTimerTask+0x186>
    4576:	1c f4       	brge	.+6      	; 0x457e <prvTimerTask+0x12c>
    4578:	93 30       	cpi	r25, 0x03	; 3
    457a:	d0 f5       	brcc	.+116    	; 0x45f0 <prvTimerTask+0x19e>
    457c:	07 c0       	rjmp	.+14     	; 0x458c <prvTimerTask+0x13a>
    457e:	96 30       	cpi	r25, 0x06	; 6
    4580:	bc f1       	brlt	.+110    	; 0x45f0 <prvTimerTask+0x19e>
    4582:	98 30       	cpi	r25, 0x08	; 8
    4584:	1c f0       	brlt	.+6      	; 0x458c <prvTimerTask+0x13a>
    4586:	99 30       	cpi	r25, 0x09	; 9
    4588:	39 f1       	breq	.+78     	; 0x45d8 <prvTimerTask+0x186>
    458a:	32 c0       	rjmp	.+100    	; 0x45f0 <prvTimerTask+0x19e>
                case tmrCOMMAND_START_FROM_ISR :
                case tmrCOMMAND_RESET :
                case tmrCOMMAND_RESET_FROM_ISR :
                case tmrCOMMAND_START_DONT_TRACE :
                    /* Start or restart a timer. */
                    if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    458c:	2a 81       	ldd	r18, Y+2	; 0x02
    458e:	3b 81       	ldd	r19, Y+3	; 0x03
    4590:	d5 01       	movw	r26, r10
    4592:	1c 96       	adiw	r26, 0x0c	; 12
    4594:	6d 91       	ld	r22, X+
    4596:	7c 91       	ld	r23, X
    4598:	1d 97       	sbiw	r26, 0x0d	; 13
    459a:	62 0f       	add	r22, r18
    459c:	73 1f       	adc	r23, r19
    459e:	c5 01       	movw	r24, r10
    45a0:	00 de       	rcall	.-1024   	; 0x41a2 <prvInsertTimerInActiveList>
    45a2:	88 23       	and	r24, r24
    45a4:	29 f1       	breq	.+74     	; 0x45f0 <prvTimerTask+0x19e>
                    {
                        /* The timer expired before it was added to the active
                        timer list.  Process it now. */
                        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    45a6:	d5 01       	movw	r26, r10
    45a8:	51 96       	adiw	r26, 0x11	; 17
    45aa:	ed 91       	ld	r30, X+
    45ac:	fc 91       	ld	r31, X
    45ae:	52 97       	sbiw	r26, 0x12	; 18
    45b0:	c5 01       	movw	r24, r10
    45b2:	19 95       	eicall
                        traceTIMER_EXPIRED( pxTimer );

                        if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    45b4:	f5 01       	movw	r30, r10
    45b6:	86 85       	ldd	r24, Z+14	; 0x0e
    45b8:	81 30       	cpi	r24, 0x01	; 1
    45ba:	d1 f4       	brne	.+52     	; 0x45f0 <prvTimerTask+0x19e>
                        {
                            xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    45bc:	44 85       	ldd	r20, Z+12	; 0x0c
    45be:	55 85       	ldd	r21, Z+13	; 0x0d
    45c0:	8a 81       	ldd	r24, Y+2	; 0x02
    45c2:	9b 81       	ldd	r25, Y+3	; 0x03
    45c4:	48 0f       	add	r20, r24
    45c6:	59 1f       	adc	r21, r25
    45c8:	0e 2d       	mov	r16, r14
    45ca:	1f 2d       	mov	r17, r15
    45cc:	2e 2d       	mov	r18, r14
    45ce:	3f 2d       	mov	r19, r15
    45d0:	64 2d       	mov	r22, r4
    45d2:	c5 01       	movw	r24, r10
    45d4:	8a de       	rcall	.-748    	; 0x42ea <xTimerGenericCommand>
    45d6:	0c c0       	rjmp	.+24     	; 0x45f0 <prvTimerTask+0x19e>
                    There is nothing to do here. */
                    break;

                case tmrCOMMAND_CHANGE_PERIOD :
                case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
                    pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    45d8:	6a 81       	ldd	r22, Y+2	; 0x02
    45da:	7b 81       	ldd	r23, Y+3	; 0x03
    45dc:	d5 01       	movw	r26, r10
    45de:	1d 96       	adiw	r26, 0x0d	; 13
    45e0:	7c 93       	st	X, r23
    45e2:	6e 93       	st	-X, r22
    45e4:	1c 97       	sbiw	r26, 0x0c	; 12
                    be longer or shorter than the old one.  The command time is
                    therefore set to the current time, and as the period cannot
                    be zero the next expiry time can only be in the future,
                    meaning (unlike for the xTimerStart() case above) there is
                    no fail case that needs to be handled here. */
                    ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    45e6:	64 0f       	add	r22, r20
    45e8:	75 1f       	adc	r23, r21
    45ea:	9a 01       	movw	r18, r20
    45ec:	c5 01       	movw	r24, r10
    45ee:	d9 dd       	rcall	.-1102   	; 0x41a2 <prvInsertTimerInActiveList>
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

    while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    45f0:	4e 2d       	mov	r20, r14
    45f2:	5f 2d       	mov	r21, r15
    45f4:	6c 2d       	mov	r22, r12
    45f6:	7d 2d       	mov	r23, r13
    45f8:	80 91 55 0e 	lds	r24, 0x0E55	; 0x800e55 <xTimerQueue>
    45fc:	90 91 56 0e 	lds	r25, 0x0E56	; 0x800e56 <xTimerQueue+0x1>
    4600:	0e 94 2c 1a 	call	0x3458	; 0x3458 <xQueueReceive>
    4604:	81 11       	cpse	r24, r1
    4606:	a1 cf       	rjmp	.-190    	; 0x454a <prvTimerTask+0xf8>
    4608:	34 cf       	rjmp	.-408    	; 0x4472 <prvTimerTask+0x20>

0000460a <RTOS_sync_init>:



void RTOS_sync_init(void)
{
    LCD_mutex_handle = xSemaphoreCreateMutexStatic( &LCD_mutex_Buffer );
    460a:	6b e5       	ldi	r22, 0x5B	; 91
    460c:	7e e0       	ldi	r23, 0x0E	; 14
    460e:	81 e0       	ldi	r24, 0x01	; 1
    4610:	0e 94 d7 19 	call	0x33ae	; 0x33ae <xQueueCreateMutexStatic>
    4614:	90 93 36 17 	sts	0x1736, r25	; 0x801736 <LCD_mutex_handle+0x1>
    4618:	80 93 35 17 	sts	0x1735, r24	; 0x801735 <LCD_mutex_handle>
    461c:	08 95       	ret

0000461e <Drum_speed_Tasks_init>:
#include "../RTE/RTE_drum.h"



void Drum_speed_Tasks_init(void){
	Drum_speed_init();
    461e:	0c 94 07 01 	jmp	0x20e	; 0x20e <Drum_speed_init>
    4622:	08 95       	ret

00004624 <LCD_main_err_Init>:

void (*g_callback_read_timeout)(void) = NULL;
void (*g_callback_write_timeout)(void) = NULL;

void LCD_main_err_Init( void(*callback_read_timeout)(void) , void(*callback_write_timeout)(void)){
	g_callback_read_timeout = callback_read_timeout;
    4624:	90 93 7f 0e 	sts	0x0E7F, r25	; 0x800e7f <g_callback_read_timeout+0x1>
    4628:	80 93 7e 0e 	sts	0x0E7E, r24	; 0x800e7e <g_callback_read_timeout>
	g_callback_write_timeout = callback_write_timeout;
    462c:	70 93 7d 0e 	sts	0x0E7D, r23	; 0x800e7d <g_callback_write_timeout+0x1>
    4630:	60 93 7c 0e 	sts	0x0E7C, r22	; 0x800e7c <g_callback_write_timeout>
    4634:	08 95       	ret

00004636 <LCD_main>:
	RTE_set_Start_blancher_Operation(s_Lcd_data_read.Start_blancher_operation);
}


static void LCD_RTE_COLLECT(void){
		s_Lcd_data_write.Drum_speed = RTE_get_Drum_speed();
    4636:	07 e3       	ldi	r16, 0x37	; 55
    4638:	17 e1       	ldi	r17, 0x17	; 23
	//unsigned int x_time = 0;
	while(1){
		
		//x_time = Get_millis();
		//UART0_puts("LCD alive task \n");
		xSemaphoreTake(LCD_mutex_handle , portMAX_DELAY);
    463a:	6f ef       	ldi	r22, 0xFF	; 255
    463c:	7f ef       	ldi	r23, 0xFF	; 255
    463e:	80 91 35 17 	lds	r24, 0x1735	; 0x801735 <LCD_mutex_handle>
    4642:	90 91 36 17 	lds	r25, 0x1736	; 0x801736 <LCD_mutex_handle+0x1>
    4646:	0e 94 b5 1a 	call	0x356a	; 0x356a <xQueueSemaphoreTake>


static uint8_t LCD_READ_Parameters(void){
	//call LCD_read_mutliple regs (fill the struct) and check for the errors //s_Lcd_data_read
	//set rte parameters
	return Lcd_Read_multiple_data(LCD_START_READ_ADDRESS,(uint16_t*)&s_Lcd_data_read,LCD_READ_REGS_NUMBER);
    464a:	41 e1       	ldi	r20, 0x11	; 17
    464c:	6b e3       	ldi	r22, 0x3B	; 59
    464e:	77 e1       	ldi	r23, 0x17	; 23
    4650:	81 e0       	ldi	r24, 0x01	; 1
    4652:	90 e0       	ldi	r25, 0x00	; 0
    4654:	0e 94 a2 01 	call	0x344	; 0x344 <Lcd_Read_multiple_data>
    4658:	c8 2f       	mov	r28, r24
		
		//x_time = Get_millis();
		//UART0_puts("LCD alive task \n");
		xSemaphoreTake(LCD_mutex_handle , portMAX_DELAY);
		r_err =  LCD_READ_Parameters();
		xSemaphoreGive(LCD_mutex_handle ) ;
    465a:	20 e0       	ldi	r18, 0x00	; 0
    465c:	40 e0       	ldi	r20, 0x00	; 0
    465e:	50 e0       	ldi	r21, 0x00	; 0
    4660:	60 e0       	ldi	r22, 0x00	; 0
    4662:	70 e0       	ldi	r23, 0x00	; 0
    4664:	80 91 35 17 	lds	r24, 0x1735	; 0x801735 <LCD_mutex_handle>
    4668:	90 91 36 17 	lds	r25, 0x1736	; 0x801736 <LCD_mutex_handle+0x1>
    466c:	0e 94 45 19 	call	0x328a	; 0x328a <xQueueGenericSend>
		
 		if(LCD_RESPONCE_TIMED_OUT == r_err)
    4670:	c2 3e       	cpi	r28, 0xE2	; 226
    4672:	89 f4       	brne	.+34     	; 0x4696 <LCD_main+0x60>
 		{
			 read_err_counter++;
    4674:	80 91 7b 0e 	lds	r24, 0x0E7B	; 0x800e7b <read_err_counter.2481>
    4678:	8f 5f       	subi	r24, 0xFF	; 255
    467a:	80 93 7b 0e 	sts	0x0E7B, r24	; 0x800e7b <read_err_counter.2481>
			 if(LCD_READING_TIMEOUT_MATURE == read_err_counter){
    467e:	85 30       	cpi	r24, 0x05	; 5
    4680:	09 f0       	breq	.+2      	; 0x4684 <LCD_main+0x4e>
    4682:	4d c0       	rjmp	.+154    	; 0x471e <LCD_main+0xe8>
				//  callback error notification for reading timeout
				if(g_callback_read_timeout == NULL){
    4684:	e0 91 7e 0e 	lds	r30, 0x0E7E	; 0x800e7e <g_callback_read_timeout>
    4688:	f0 91 7f 0e 	lds	r31, 0x0E7F	; 0x800e7f <g_callback_read_timeout+0x1>
    468c:	30 97       	sbiw	r30, 0x00	; 0
    468e:	09 f4       	brne	.+2      	; 0x4692 <LCD_main+0x5c>
    4690:	46 c0       	rjmp	.+140    	; 0x471e <LCD_main+0xe8>
					//no entry
				}
				else
				{
					g_callback_read_timeout();
    4692:	19 95       	eicall
    4694:	44 c0       	rjmp	.+136    	; 0x471e <LCD_main+0xe8>
}

//drum speed & current temp
//s_Lcd_data_read
static void LCD_RTE_FEED(void){
	RTE_set_Set_temperature(s_Lcd_data_read.Set_temp);
    4696:	cb e3       	ldi	r28, 0x3B	; 59
    4698:	d7 e1       	ldi	r29, 0x17	; 23
    469a:	8a 85       	ldd	r24, Y+10	; 0x0a
    469c:	9b 85       	ldd	r25, Y+11	; 0x0b
    469e:	0e 94 91 15 	call	0x2b22	; 0x2b22 <RTE_set_Set_temperature>
	RTE_set_Sleep_temperature(s_Lcd_data_read.Sleep_temp);
    46a2:	88 85       	ldd	r24, Y+8	; 0x08
    46a4:	99 85       	ldd	r25, Y+9	; 0x09
    46a6:	0e 94 82 15 	call	0x2b04	; 0x2b04 <RTE_set_Sleep_temperature>
	RTE_set_Threshold_set_temperature(s_Lcd_data_read.Threshold_set_temp);
    46aa:	8c 85       	ldd	r24, Y+12	; 0x0c
    46ac:	9d 85       	ldd	r25, Y+13	; 0x0d
    46ae:	0e 94 a0 15 	call	0x2b40	; 0x2b40 <RTE_set_Threshold_set_temperature>
	RTE_set_Threshold_sleep_temperature(s_Lcd_data_read.Threshold_sleep_temp);
    46b2:	8e 85       	ldd	r24, Y+14	; 0x0e
    46b4:	9f 85       	ldd	r25, Y+15	; 0x0f
    46b6:	0e 94 af 15 	call	0x2b5e	; 0x2b5e <RTE_set_Threshold_sleep_temperature>
	RTE_set_Negative_offset_temperature(s_Lcd_data_read.Negative_offset_temp);
    46ba:	8a 89       	ldd	r24, Y+18	; 0x12
    46bc:	9b 89       	ldd	r25, Y+19	; 0x13
    46be:	0e 94 cd 15 	call	0x2b9a	; 0x2b9a <RTE_set_Negative_offset_temperature>
	RTE_set_Positive_offset_temperature(s_Lcd_data_read.Positive_offset_temp);
    46c2:	88 89       	ldd	r24, Y+16	; 0x10
    46c4:	99 89       	ldd	r25, Y+17	; 0x11
    46c6:	0e 94 be 15 	call	0x2b7c	; 0x2b7c <RTE_set_Positive_offset_temperature>
	RTE_set_System_on(s_Lcd_data_read.System_on);
    46ca:	88 81       	ld	r24, Y
    46cc:	99 81       	ldd	r25, Y+1	; 0x01
    46ce:	0e 94 f5 14 	call	0x29ea	; 0x29ea <RTE_set_System_on>
	RTE_set_Wash_Operation(s_Lcd_data_read.Wash_operation);
    46d2:	8c 81       	ldd	r24, Y+4	; 0x04
    46d4:	9d 81       	ldd	r25, Y+5	; 0x05
    46d6:	0e 94 13 15 	call	0x2a26	; 0x2a26 <RTE_set_Wash_Operation>
	RTE_set_Tank_Calibration_Operation(s_Lcd_data_read.Tank_calibration_operation);
    46da:	8e 81       	ldd	r24, Y+6	; 0x06
    46dc:	9f 81       	ldd	r25, Y+7	; 0x07
    46de:	0e 94 22 15 	call	0x2a44	; 0x2a44 <RTE_set_Tank_Calibration_Operation>
	RTE_set_Gear_ratio(s_Lcd_data_read.Gear_ratio);
    46e2:	8c 89       	ldd	r24, Y+20	; 0x14
    46e4:	9d 89       	ldd	r25, Y+21	; 0x15
    46e6:	0e 94 2d 14 	call	0x285a	; 0x285a <RTE_set_Gear_ratio>
	RTE_set_Conveyor_length(s_Lcd_data_read.Conveyor_length);
    46ea:	8e 89       	ldd	r24, Y+22	; 0x16
    46ec:	9f 89       	ldd	r25, Y+23	; 0x17
    46ee:	0e 94 4b 14 	call	0x2896	; 0x2896 <RTE_set_Conveyor_length>
	RTE_set_Driver_diameter(s_Lcd_data_read.Driver_diameter);
    46f2:	88 8d       	ldd	r24, Y+24	; 0x18
    46f4:	99 8d       	ldd	r25, Y+25	; 0x19
    46f6:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <RTE_set_Driver_diameter>
	RTE_set_Time_minute(s_Lcd_data_read.Time_minute);
    46fa:	8c 8d       	ldd	r24, Y+28	; 0x1c
    46fc:	9d 8d       	ldd	r25, Y+29	; 0x1d
    46fe:	0e 94 69 14 	call	0x28d2	; 0x28d2 <RTE_set_Time_minute>
	RTE_set_Time_second(s_Lcd_data_read.Time_second);
    4702:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4704:	9f 8d       	ldd	r25, Y+31	; 0x1f
    4706:	0e 94 78 14 	call	0x28f0	; 0x28f0 <RTE_set_Time_second>
	RTE_set_RPM_max(s_Lcd_data_read.RPM_max);
    470a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    470c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    470e:	0e 94 3c 14 	call	0x2878	; 0x2878 <RTE_set_RPM_max>
	RTE_set_Start_blancher_Operation(s_Lcd_data_read.Start_blancher_operation);
    4712:	8a 81       	ldd	r24, Y+2	; 0x02
    4714:	9b 81       	ldd	r25, Y+3	; 0x03
    4716:	0e 94 04 15 	call	0x2a08	; 0x2a08 <RTE_set_Start_blancher_Operation>
			 }
			 
 		}
	    else{
 			LCD_RTE_FEED();	
			read_err_counter = 0;
    471a:	10 92 7b 0e 	sts	0x0E7B, r1	; 0x800e7b <read_err_counter.2481>
	RTE_set_Start_blancher_Operation(s_Lcd_data_read.Start_blancher_operation);
}


static void LCD_RTE_COLLECT(void){
		s_Lcd_data_write.Drum_speed = RTE_get_Drum_speed();
    471e:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <RTE_get_Drum_speed>
    4722:	f8 01       	movw	r30, r16
    4724:	93 83       	std	Z+3, r25	; 0x03
    4726:	82 83       	std	Z+2, r24	; 0x02
		s_Lcd_data_write.Current_temperature = RTE_get_Current_temperature();
    4728:	0e 94 e1 15 	call	0x2bc2	; 0x2bc2 <RTE_get_Current_temperature>
    472c:	f8 01       	movw	r30, r16
    472e:	91 83       	std	Z+1, r25	; 0x01
    4730:	80 83       	st	Z, r24
 			LCD_RTE_FEED();	
			read_err_counter = 0;
 		}
 		
  		LCD_RTE_COLLECT();
		xSemaphoreTake(LCD_mutex_handle , portMAX_DELAY);
    4732:	6f ef       	ldi	r22, 0xFF	; 255
    4734:	7f ef       	ldi	r23, 0xFF	; 255
    4736:	80 91 35 17 	lds	r24, 0x1735	; 0x801735 <LCD_mutex_handle>
    473a:	90 91 36 17 	lds	r25, 0x1736	; 0x801736 <LCD_mutex_handle+0x1>
    473e:	0e 94 b5 1a 	call	0x356a	; 0x356a <xQueueSemaphoreTake>

}


static uint8_t LCD_WRITE_Parameters(void){
	return Lcd_Write_multiple_data(LCD_START_WRITE_ADDRESS,(uint16_t*)&s_Lcd_data_write,LCD_WRITE_REGS_NUMBER);
    4742:	42 e0       	ldi	r20, 0x02	; 2
    4744:	b8 01       	movw	r22, r16
    4746:	80 e0       	ldi	r24, 0x00	; 0
    4748:	9f e0       	ldi	r25, 0x0F	; 15
    474a:	0e 94 ca 01 	call	0x394	; 0x394 <Lcd_Write_multiple_data>
    474e:	c8 2f       	mov	r28, r24
 		}
 		
  		LCD_RTE_COLLECT();
		xSemaphoreTake(LCD_mutex_handle , portMAX_DELAY);
 		w_err = LCD_WRITE_Parameters();
		xSemaphoreGive(LCD_mutex_handle ) ; 
    4750:	20 e0       	ldi	r18, 0x00	; 0
    4752:	40 e0       	ldi	r20, 0x00	; 0
    4754:	50 e0       	ldi	r21, 0x00	; 0
    4756:	60 e0       	ldi	r22, 0x00	; 0
    4758:	70 e0       	ldi	r23, 0x00	; 0
    475a:	80 91 35 17 	lds	r24, 0x1735	; 0x801735 <LCD_mutex_handle>
    475e:	90 91 36 17 	lds	r25, 0x1736	; 0x801736 <LCD_mutex_handle+0x1>
    4762:	0e 94 45 19 	call	0x328a	; 0x328a <xQueueGenericSend>
		
		if(LCD_RESPONCE_TIMED_OUT == w_err)
    4766:	c2 3e       	cpi	r28, 0xE2	; 226
    4768:	79 f4       	brne	.+30     	; 0x4788 <LCD_main+0x152>
		{
			write_err_counter++;
    476a:	80 91 7a 0e 	lds	r24, 0x0E7A	; 0x800e7a <write_err_counter.2482>
    476e:	8f 5f       	subi	r24, 0xFF	; 255
    4770:	80 93 7a 0e 	sts	0x0E7A, r24	; 0x800e7a <write_err_counter.2482>
			if( LCD_WRITING_TIMEOUT_MATURE == write_err_counter){
    4774:	85 30       	cpi	r24, 0x05	; 5
    4776:	51 f4       	brne	.+20     	; 0x478c <LCD_main+0x156>
				//callback error notification for writing timeout
				if(g_callback_write_timeout == NULL){
    4778:	e0 91 7c 0e 	lds	r30, 0x0E7C	; 0x800e7c <g_callback_write_timeout>
    477c:	f0 91 7d 0e 	lds	r31, 0x0E7D	; 0x800e7d <g_callback_write_timeout+0x1>
    4780:	30 97       	sbiw	r30, 0x00	; 0
    4782:	21 f0       	breq	.+8      	; 0x478c <LCD_main+0x156>
					//no entry
				}
				else{
					g_callback_write_timeout();
    4784:	19 95       	eicall
    4786:	02 c0       	rjmp	.+4      	; 0x478c <LCD_main+0x156>
				}	
			}
		}
		else{
			write_err_counter = 0;
    4788:	10 92 7a 0e 	sts	0x0E7A, r1	; 0x800e7a <write_err_counter.2482>
		//x_time =  Get_millis() - x_time;
		//UART0_puts("LCD Exe time = ");
		//UART0_OutUDec(x_time);
		//UART0_putc('\n');
		//_delay_ms(1000);
		vTaskDelay(200/portTICK_PERIOD_MS);
    478c:	8c e0       	ldi	r24, 0x0C	; 12
    478e:	90 e0       	ldi	r25, 0x00	; 0
    4790:	a8 da       	rcall	.-2736   	; 0x3ce2 <vTaskDelay>
		//_delay_ms(2000);
	}
    4792:	53 cf       	rjmp	.-346    	; 0x463a <LCD_main+0x4>

00004794 <Level_main_err_init>:

#include "../MCAL/UART.h"
 
void (*g_callback_level_sensor_fail) (void) = NULL;
void Level_main_err_init( void (*callback_level_sensor_fail) (void) ){
	 g_callback_level_sensor_fail = callback_level_sensor_fail;
    4794:	90 93 81 0e 	sts	0x0E81, r25	; 0x800e81 <g_callback_level_sensor_fail+0x1>
    4798:	80 93 80 0e 	sts	0x0E80, r24	; 0x800e80 <g_callback_level_sensor_fail>
    479c:	08 95       	ret

0000479e <Level_main>:
	uint8_t Tank_level = 0;
	uint8_t Blancher_level = 0;
	
	while (1)
	{
		UART0_puts("Level task alive \n");
    479e:	8f e0       	ldi	r24, 0x0F	; 15
    47a0:	93 e0       	ldi	r25, 0x03	; 3
    47a2:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <UART0_puts>
		Tank_level = Get_tank_level();
    47a6:	0e 94 ef 01 	call	0x3de	; 0x3de <Get_tank_level>
    47aa:	c8 2f       	mov	r28, r24
		Blancher_level = Get_blancher_level();
    47ac:	0e 94 17 02 	call	0x42e	; 0x42e <Get_blancher_level>
    47b0:	d8 2f       	mov	r29, r24
		if (LEVEL_ERROR == Tank_level)
    47b2:	c5 35       	cpi	r28, 0x55	; 85
    47b4:	61 f4       	brne	.+24     	; 0x47ce <Level_main+0x30>
		{
		
			if(g_callback_level_sensor_fail == NULL){
    47b6:	e0 91 80 0e 	lds	r30, 0x0E80	; 0x800e80 <g_callback_level_sensor_fail>
    47ba:	f0 91 81 0e 	lds	r31, 0x0E81	; 0x800e81 <g_callback_level_sensor_fail+0x1>
    47be:	30 97       	sbiw	r30, 0x00	; 0
    47c0:	09 f0       	breq	.+2      	; 0x47c4 <Level_main+0x26>
				
			}
			else{
				// callback error function .
				g_callback_level_sensor_fail();
    47c2:	19 95       	eicall
			}
			RTE_set_tank_level(INVALID_DATA);
    47c4:	8a ef       	ldi	r24, 0xFA	; 250
    47c6:	9f ea       	ldi	r25, 0xAF	; 175
    47c8:	0e 94 a1 14 	call	0x2942	; 0x2942 <RTE_set_tank_level>
    47cc:	15 c0       	rjmp	.+42     	; 0x47f8 <Level_main+0x5a>
			
			//UART0_puts("level error !!!");
		}
		else 
		{
			RTE_set_tank_level(Tank_level);
    47ce:	8c 2f       	mov	r24, r28
    47d0:	90 e0       	ldi	r25, 0x00	; 0
    47d2:	0e 94 a1 14 	call	0x2942	; 0x2942 <RTE_set_tank_level>
			UART0_puts("TANK level =         ");
    47d6:	82 e2       	ldi	r24, 0x22	; 34
    47d8:	93 e0       	ldi	r25, 0x03	; 3
    47da:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <UART0_puts>
			UART0_OutUDec(Tank_level);
    47de:	6c 2f       	mov	r22, r28
    47e0:	70 e0       	ldi	r23, 0x00	; 0
    47e2:	80 e0       	ldi	r24, 0x00	; 0
    47e4:	90 e0       	ldi	r25, 0x00	; 0
    47e6:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <UART0_OutUDec>
			UART0_putc('\n');
    47ea:	8a e0       	ldi	r24, 0x0A	; 10
    47ec:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <UART0_putc>
			RTE_set_blancher_level(Blancher_level);
    47f0:	8d 2f       	mov	r24, r29
    47f2:	90 e0       	ldi	r25, 0x00	; 0
    47f4:	0e 94 b0 14 	call	0x2960	; 0x2960 <RTE_set_blancher_level>
		}
		vTaskDelay(50/portTICK_PERIOD_MS) ;
    47f8:	83 e0       	ldi	r24, 0x03	; 3
    47fa:	90 e0       	ldi	r25, 0x00	; 0
    47fc:	72 da       	rcall	.-2844   	; 0x3ce2 <vTaskDelay>
	}
    47fe:	cf cf       	rjmp	.-98     	; 0x479e <Level_main>

00004800 <Tank_out_callback>:
}

static void Tank_out_callback(void)
{
	
	g_out_liters_counter ++ ;
    4800:	80 91 86 0e 	lds	r24, 0x0E86	; 0x800e86 <g_out_liters_counter>
    4804:	90 91 87 0e 	lds	r25, 0x0E87	; 0x800e87 <g_out_liters_counter+0x1>
    4808:	01 96       	adiw	r24, 0x01	; 1
    480a:	90 93 87 0e 	sts	0x0E87, r25	; 0x800e87 <g_out_liters_counter+0x1>
    480e:	80 93 86 0e 	sts	0x0E86, r24	; 0x800e86 <g_out_liters_counter>
	if (g_out_liters_counter >= g_out_liters )
    4812:	20 91 86 0e 	lds	r18, 0x0E86	; 0x800e86 <g_out_liters_counter>
    4816:	30 91 87 0e 	lds	r19, 0x0E87	; 0x800e87 <g_out_liters_counter+0x1>
    481a:	80 91 82 0e 	lds	r24, 0x0E82	; 0x800e82 <g_out_liters>
    481e:	90 91 83 0e 	lds	r25, 0x0E83	; 0x800e83 <g_out_liters+0x1>
    4822:	28 17       	cp	r18, r24
    4824:	39 07       	cpc	r19, r25
    4826:	58 f0       	brcs	.+22     	; 0x483e <Tank_out_callback+0x3e>
	{
		// release the semaphore
		xSemaphoreGive(outing_Semaphore );
    4828:	20 e0       	ldi	r18, 0x00	; 0
    482a:	40 e0       	ldi	r20, 0x00	; 0
    482c:	50 e0       	ldi	r21, 0x00	; 0
    482e:	60 e0       	ldi	r22, 0x00	; 0
    4830:	70 e0       	ldi	r23, 0x00	; 0
    4832:	80 91 5b 17 	lds	r24, 0x175B	; 0x80175b <outing_Semaphore>
    4836:	90 91 5c 17 	lds	r25, 0x175C	; 0x80175c <outing_Semaphore+0x1>
    483a:	0c 94 45 19 	jmp	0x328a	; 0x328a <xQueueGenericSend>
    483e:	08 95       	ret

00004840 <Tank_feed_callback>:


static void Tank_feed_callback (void)
{
	
	g_feeding_liters_counter ++ ;
    4840:	80 91 88 0e 	lds	r24, 0x0E88	; 0x800e88 <g_feeding_liters_counter>
    4844:	90 91 89 0e 	lds	r25, 0x0E89	; 0x800e89 <g_feeding_liters_counter+0x1>
    4848:	01 96       	adiw	r24, 0x01	; 1
    484a:	90 93 89 0e 	sts	0x0E89, r25	; 0x800e89 <g_feeding_liters_counter+0x1>
    484e:	80 93 88 0e 	sts	0x0E88, r24	; 0x800e88 <g_feeding_liters_counter>
	// keep monitoring the amount of water .
	if (g_feeding_liters_counter >= g_feed_liters )
    4852:	20 91 88 0e 	lds	r18, 0x0E88	; 0x800e88 <g_feeding_liters_counter>
    4856:	30 91 89 0e 	lds	r19, 0x0E89	; 0x800e89 <g_feeding_liters_counter+0x1>
    485a:	80 91 84 0e 	lds	r24, 0x0E84	; 0x800e84 <g_feed_liters>
    485e:	90 91 85 0e 	lds	r25, 0x0E85	; 0x800e85 <g_feed_liters+0x1>
    4862:	28 17       	cp	r18, r24
    4864:	39 07       	cpc	r19, r25
    4866:	58 f0       	brcs	.+22     	; 0x487e <Tank_feed_callback+0x3e>
	{
		// release the semaphore
		xSemaphoreGive(Feeding_Semaphore);
    4868:	20 e0       	ldi	r18, 0x00	; 0
    486a:	40 e0       	ldi	r20, 0x00	; 0
    486c:	50 e0       	ldi	r21, 0x00	; 0
    486e:	60 e0       	ldi	r22, 0x00	; 0
    4870:	70 e0       	ldi	r23, 0x00	; 0
    4872:	80 91 9b 17 	lds	r24, 0x179B	; 0x80179b <Feeding_Semaphore>
    4876:	90 91 9c 17 	lds	r25, 0x179C	; 0x80179c <Feeding_Semaphore+0x1>
    487a:	0c 94 45 19 	jmp	0x328a	; 0x328a <xQueueGenericSend>
    487e:	08 95       	ret

00004880 <Tank_operation_init>:



void Tank_operation_init(void)
{
	Flow_rate_init(FLOWRATE_SENSOR_1_TIMER_NUMBER ,FLOWRATE_SENSOR_2_TIMER_NUMBER, Tank_feed_callback , Tank_out_callback);	
    4880:	20 e0       	ldi	r18, 0x00	; 0
    4882:	34 e2       	ldi	r19, 0x24	; 36
    4884:	40 e2       	ldi	r20, 0x20	; 32
    4886:	54 e2       	ldi	r21, 0x24	; 36
    4888:	63 e0       	ldi	r22, 0x03	; 3
    488a:	81 e0       	ldi	r24, 0x01	; 1
    488c:	0c 94 25 01 	jmp	0x24a	; 0x24a <Flow_rate_init>
    4890:	08 95       	ret

00004892 <Temp_main_err_init>:
*Parameters @ Nothing
*return Nothing 
*/
void (*over_temp_callback)(void) = NULL;
void Temp_main_err_init( void (*callback_over_temp) (void) ){
	over_temp_callback = callback_over_temp;
    4892:	90 93 8b 0e 	sts	0x0E8B, r25	; 0x800e8b <over_temp_callback+0x1>
    4896:	80 93 8a 0e 	sts	0x0E8A, r24	; 0x800e8a <over_temp_callback>
    489a:	08 95       	ret

0000489c <Temp_main>:

void Temp_main(void* pvParameters){
	uint16_t current_temp=0;
	uint8_t count=0;
	//uint16_t x_time = 0;
	temp_init(0);
    489c:	80 e0       	ldi	r24, 0x00	; 0
    489e:	0e 94 be 0a 	call	0x157c	; 0x157c <temp_init>
	over_temp_callback = callback_over_temp;
}

void Temp_main(void* pvParameters){
	uint16_t current_temp=0;
	uint8_t count=0;
    48a2:	10 e0       	ldi	r17, 0x00	; 0
	//uint16_t x_time = 0;
	temp_init(0);
	while (1)
	{
		UART0_puts("Temp task alive\n");
    48a4:	88 e3       	ldi	r24, 0x38	; 56
    48a6:	93 e0       	ldi	r25, 0x03	; 3
    48a8:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <UART0_puts>
		//x_time = Get_millis();
		current_temp = temp_read();
    48ac:	0e 94 c0 0a 	call	0x1580	; 0x1580 <temp_read>
    48b0:	ec 01       	movw	r28, r24
		//UART0_puts("current temp = ");
 		//UART0_OutUDec(current_temp);
 		//UART0_putc('\n');
		if(current_temp > TEMP_OVER_TEMP){
    48b2:	cd 97       	sbiw	r24, 0x3d	; 61
    48b4:	50 f0       	brcs	.+20     	; 0x48ca <Temp_main+0x2e>
			count++;
    48b6:	1f 5f       	subi	r17, 0xFF	; 255
			if(count >= TEMP_OVER_TEMP_STILL_TIME){
    48b8:	16 30       	cpi	r17, 0x06	; 6
    48ba:	38 f0       	brcs	.+14     	; 0x48ca <Temp_main+0x2e>
				//callback
				if(over_temp_callback == NULL){
    48bc:	e0 91 8a 0e 	lds	r30, 0x0E8A	; 0x800e8a <over_temp_callback>
    48c0:	f0 91 8b 0e 	lds	r31, 0x0E8B	; 0x800e8b <over_temp_callback+0x1>
    48c4:	30 97       	sbiw	r30, 0x00	; 0
    48c6:	09 f0       	breq	.+2      	; 0x48ca <Temp_main+0x2e>
					
				}
				else
				{
					 over_temp_callback();
    48c8:	19 95       	eicall
				}
			}
		}
		// set temp for LCD 
		RTE_set_Current_temperature(current_temp);
    48ca:	ce 01       	movw	r24, r28
    48cc:	0e 94 dc 15 	call	0x2bb8	; 0x2bb8 <RTE_set_Current_temperature>
		// set the temp for the application .
		RTE_set_app_Current_temperature(current_temp);
    48d0:	ce 01       	movw	r24, r28
    48d2:	0e 94 e6 15 	call	0x2bcc	; 0x2bcc <RTE_set_app_Current_temperature>
		//x_time =  Get_millis() - x_time ;
		//UART0_puts("temp ex time = ");
		//UART0_OutUDec(x_time);
		//UART0_putc('\n');
		vTaskDelay(50/portTICK_PERIOD_MS) ;
    48d6:	83 e0       	ldi	r24, 0x03	; 3
    48d8:	90 e0       	ldi	r25, 0x00	; 0
    48da:	03 da       	rcall	.-3066   	; 0x3ce2 <vTaskDelay>
	}
    48dc:	e3 cf       	rjmp	.-58     	; 0x48a4 <Temp_main+0x8>

000048de <System_init>:


gSystemError System_init(void){
	
	gSystemError res = E_OK;
	DIO_init();
    48de:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <DIO_init>
	millis_init();	
    48e2:	2b d0       	rcall	.+86     	; 0x493a <millis_init>
	Service_error_init();
    48e4:	0e 94 46 0b 	call	0x168c	; 0x168c <Service_error_init>
	RTE_init();
    48e8:	0e 94 bf 14 	call	0x297e	; 0x297e <RTE_init>
	RTOS_sync_init();
    48ec:	8e de       	rcall	.-740    	; 0x460a <RTOS_sync_init>
	Inverter_init(UART1,38400,3);
    48ee:	23 e0       	ldi	r18, 0x03	; 3
    48f0:	40 e0       	ldi	r20, 0x00	; 0
    48f2:	56 e9       	ldi	r21, 0x96	; 150
    48f4:	60 e0       	ldi	r22, 0x00	; 0
    48f6:	70 e0       	ldi	r23, 0x00	; 0
    48f8:	81 e0       	ldi	r24, 0x01	; 1
    48fa:	0e 94 67 01 	call	0x2ce	; 0x2ce <Inverter_init>
	Lcd_init(UART3,115200,1);
    48fe:	21 e0       	ldi	r18, 0x01	; 1
    4900:	40 e0       	ldi	r20, 0x00	; 0
    4902:	52 ec       	ldi	r21, 0xC2	; 194
    4904:	61 e0       	ldi	r22, 0x01	; 1
    4906:	70 e0       	ldi	r23, 0x00	; 0
    4908:	83 e0       	ldi	r24, 0x03	; 3
    490a:	0e 94 8a 01 	call	0x314	; 0x314 <Lcd_init>
	Drum_speed_Tasks_init();         //fixed here because no main task
    490e:	87 de       	rcall	.-754    	; 0x461e <Drum_speed_Tasks_init>
	Tank_operation_init();
    4910:	b7 df       	rcall	.-146    	; 0x4880 <Tank_operation_init>
	return res;

    4912:	80 e0       	ldi	r24, 0x00	; 0
    4914:	08 95       	ret

00004916 <crc16_update>:

uint16_t crc16_update(uint16_t crc, uint8_t a)
{
  int i;

  crc ^= a;
    4916:	86 27       	eor	r24, r22
    4918:	28 e0       	ldi	r18, 0x08	; 8
    491a:	30 e0       	ldi	r19, 0x00	; 0
  for (i = 0; i < 8; ++i)
  {
    if (crc & 1)
    491c:	80 ff       	sbrs	r24, 0
    491e:	07 c0       	rjmp	.+14     	; 0x492e <crc16_update+0x18>
      crc = (crc >> 1) ^ 0xA001;
    4920:	96 95       	lsr	r25
    4922:	87 95       	ror	r24
    4924:	41 e0       	ldi	r20, 0x01	; 1
    4926:	84 27       	eor	r24, r20
    4928:	40 ea       	ldi	r20, 0xA0	; 160
    492a:	94 27       	eor	r25, r20
    492c:	02 c0       	rjmp	.+4      	; 0x4932 <crc16_update+0x1c>
    else
      crc = (crc >> 1);
    492e:	96 95       	lsr	r25
    4930:	87 95       	ror	r24
    4932:	21 50       	subi	r18, 0x01	; 1
    4934:	31 09       	sbc	r19, r1
uint16_t crc16_update(uint16_t crc, uint8_t a)
{
  int i;

  crc ^= a;
  for (i = 0; i < 8; ++i)
    4936:	91 f7       	brne	.-28     	; 0x491c <crc16_update+0x6>
    else
      crc = (crc >> 1);
  }

  return crc;
}
    4938:	08 95       	ret

0000493a <millis_init>:

//init the timer on ctc mode to calvulate millis
void millis_init()
{
	//CTC mode
	TIMER2_CONGFIG_A = 0x02;
    493a:	82 e0       	ldi	r24, 0x02	; 2
    493c:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
	// Clock/64
	TIMER2_CONGFIG_B = 0x04;
    4940:	84 e0       	ldi	r24, 0x04	; 4
    4942:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7000b1>
    // Load into the output compare
    TIMER2_COMPARE = CTC_MATCH_OVERFLOW;
    4946:	8a ef       	ldi	r24, 0xFA	; 250
    4948:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7000b3>
    // Enable the compare match interrupt
    SET_BIT(TIMER2_INTERUPT, TIMER2_COMPARE_INT);
    494c:	e0 e7       	ldi	r30, 0x70	; 112
    494e:	f0 e0       	ldi	r31, 0x00	; 0
    4950:	80 81       	ld	r24, Z
    4952:	82 60       	ori	r24, 0x02	; 2
    4954:	80 83       	st	Z, r24
    4956:	08 95       	ret

00004958 <Get_millis>:
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    4958:	f8 94       	cli
    unsigned long millis_return;

    // Ensure this cannot be disrupted
    ATOMIC_BLOCK(ATOMIC_FORCEON) {
    	// copy the ISR counter
        millis_return = timer1_millis;
    495a:	60 91 9d 17 	lds	r22, 0x179D	; 0x80179d <timer1_millis>
    495e:	70 91 9e 17 	lds	r23, 0x179E	; 0x80179e <timer1_millis+0x1>
    4962:	80 91 9f 17 	lds	r24, 0x179F	; 0x80179f <timer1_millis+0x2>
    4966:	90 91 a0 17 	lds	r25, 0x17A0	; 0x8017a0 <timer1_millis+0x3>
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
    496a:	78 94       	sei
    }

    return millis_return;
}//Get_millis
    496c:	08 95       	ret

0000496e <__vector_13>:



ISR (TIMER2_COMPA_vect)
{
    496e:	1f 92       	push	r1
    4970:	0f 92       	push	r0
    4972:	0f b6       	in	r0, 0x3f	; 63
    4974:	0f 92       	push	r0
    4976:	11 24       	eor	r1, r1
    4978:	8f 93       	push	r24
    497a:	9f 93       	push	r25
    497c:	af 93       	push	r26
    497e:	bf 93       	push	r27
	//MILLI SEC
    timer1_millis++;
    4980:	80 91 9d 17 	lds	r24, 0x179D	; 0x80179d <timer1_millis>
    4984:	90 91 9e 17 	lds	r25, 0x179E	; 0x80179e <timer1_millis+0x1>
    4988:	a0 91 9f 17 	lds	r26, 0x179F	; 0x80179f <timer1_millis+0x2>
    498c:	b0 91 a0 17 	lds	r27, 0x17A0	; 0x8017a0 <timer1_millis+0x3>
    4990:	01 96       	adiw	r24, 0x01	; 1
    4992:	a1 1d       	adc	r26, r1
    4994:	b1 1d       	adc	r27, r1
    4996:	80 93 9d 17 	sts	0x179D, r24	; 0x80179d <timer1_millis>
    499a:	90 93 9e 17 	sts	0x179E, r25	; 0x80179e <timer1_millis+0x1>
    499e:	a0 93 9f 17 	sts	0x179F, r26	; 0x80179f <timer1_millis+0x2>
    49a2:	b0 93 a0 17 	sts	0x17A0, r27	; 0x8017a0 <timer1_millis+0x3>
}//ISR
    49a6:	bf 91       	pop	r27
    49a8:	af 91       	pop	r26
    49aa:	9f 91       	pop	r25
    49ac:	8f 91       	pop	r24
    49ae:	0f 90       	pop	r0
    49b0:	0f be       	out	0x3f, r0	; 63
    49b2:	0f 90       	pop	r0
    49b4:	1f 90       	pop	r1
    49b6:	18 95       	reti

000049b8 <__subsf3>:
    49b8:	50 58       	subi	r21, 0x80	; 128

000049ba <__addsf3>:
    49ba:	bb 27       	eor	r27, r27
    49bc:	aa 27       	eor	r26, r26
    49be:	0e d0       	rcall	.+28     	; 0x49dc <__addsf3x>
    49c0:	48 c1       	rjmp	.+656    	; 0x4c52 <__fp_round>
    49c2:	39 d1       	rcall	.+626    	; 0x4c36 <__fp_pscA>
    49c4:	30 f0       	brcs	.+12     	; 0x49d2 <__addsf3+0x18>
    49c6:	3e d1       	rcall	.+636    	; 0x4c44 <__fp_pscB>
    49c8:	20 f0       	brcs	.+8      	; 0x49d2 <__addsf3+0x18>
    49ca:	31 f4       	brne	.+12     	; 0x49d8 <__addsf3+0x1e>
    49cc:	9f 3f       	cpi	r25, 0xFF	; 255
    49ce:	11 f4       	brne	.+4      	; 0x49d4 <__addsf3+0x1a>
    49d0:	1e f4       	brtc	.+6      	; 0x49d8 <__addsf3+0x1e>
    49d2:	2e c1       	rjmp	.+604    	; 0x4c30 <__fp_nan>
    49d4:	0e f4       	brtc	.+2      	; 0x49d8 <__addsf3+0x1e>
    49d6:	e0 95       	com	r30
    49d8:	e7 fb       	bst	r30, 7
    49da:	24 c1       	rjmp	.+584    	; 0x4c24 <__fp_inf>

000049dc <__addsf3x>:
    49dc:	e9 2f       	mov	r30, r25
    49de:	4a d1       	rcall	.+660    	; 0x4c74 <__fp_split3>
    49e0:	80 f3       	brcs	.-32     	; 0x49c2 <__addsf3+0x8>
    49e2:	ba 17       	cp	r27, r26
    49e4:	62 07       	cpc	r22, r18
    49e6:	73 07       	cpc	r23, r19
    49e8:	84 07       	cpc	r24, r20
    49ea:	95 07       	cpc	r25, r21
    49ec:	18 f0       	brcs	.+6      	; 0x49f4 <__addsf3x+0x18>
    49ee:	71 f4       	brne	.+28     	; 0x4a0c <__addsf3x+0x30>
    49f0:	9e f5       	brtc	.+102    	; 0x4a58 <__addsf3x+0x7c>
    49f2:	62 c1       	rjmp	.+708    	; 0x4cb8 <__fp_zero>
    49f4:	0e f4       	brtc	.+2      	; 0x49f8 <__addsf3x+0x1c>
    49f6:	e0 95       	com	r30
    49f8:	0b 2e       	mov	r0, r27
    49fa:	ba 2f       	mov	r27, r26
    49fc:	a0 2d       	mov	r26, r0
    49fe:	0b 01       	movw	r0, r22
    4a00:	b9 01       	movw	r22, r18
    4a02:	90 01       	movw	r18, r0
    4a04:	0c 01       	movw	r0, r24
    4a06:	ca 01       	movw	r24, r20
    4a08:	a0 01       	movw	r20, r0
    4a0a:	11 24       	eor	r1, r1
    4a0c:	ff 27       	eor	r31, r31
    4a0e:	59 1b       	sub	r21, r25
    4a10:	99 f0       	breq	.+38     	; 0x4a38 <__addsf3x+0x5c>
    4a12:	59 3f       	cpi	r21, 0xF9	; 249
    4a14:	50 f4       	brcc	.+20     	; 0x4a2a <__addsf3x+0x4e>
    4a16:	50 3e       	cpi	r21, 0xE0	; 224
    4a18:	68 f1       	brcs	.+90     	; 0x4a74 <__addsf3x+0x98>
    4a1a:	1a 16       	cp	r1, r26
    4a1c:	f0 40       	sbci	r31, 0x00	; 0
    4a1e:	a2 2f       	mov	r26, r18
    4a20:	23 2f       	mov	r18, r19
    4a22:	34 2f       	mov	r19, r20
    4a24:	44 27       	eor	r20, r20
    4a26:	58 5f       	subi	r21, 0xF8	; 248
    4a28:	f3 cf       	rjmp	.-26     	; 0x4a10 <__addsf3x+0x34>
    4a2a:	46 95       	lsr	r20
    4a2c:	37 95       	ror	r19
    4a2e:	27 95       	ror	r18
    4a30:	a7 95       	ror	r26
    4a32:	f0 40       	sbci	r31, 0x00	; 0
    4a34:	53 95       	inc	r21
    4a36:	c9 f7       	brne	.-14     	; 0x4a2a <__addsf3x+0x4e>
    4a38:	7e f4       	brtc	.+30     	; 0x4a58 <__addsf3x+0x7c>
    4a3a:	1f 16       	cp	r1, r31
    4a3c:	ba 0b       	sbc	r27, r26
    4a3e:	62 0b       	sbc	r22, r18
    4a40:	73 0b       	sbc	r23, r19
    4a42:	84 0b       	sbc	r24, r20
    4a44:	ba f0       	brmi	.+46     	; 0x4a74 <__addsf3x+0x98>
    4a46:	91 50       	subi	r25, 0x01	; 1
    4a48:	a1 f0       	breq	.+40     	; 0x4a72 <__addsf3x+0x96>
    4a4a:	ff 0f       	add	r31, r31
    4a4c:	bb 1f       	adc	r27, r27
    4a4e:	66 1f       	adc	r22, r22
    4a50:	77 1f       	adc	r23, r23
    4a52:	88 1f       	adc	r24, r24
    4a54:	c2 f7       	brpl	.-16     	; 0x4a46 <__addsf3x+0x6a>
    4a56:	0e c0       	rjmp	.+28     	; 0x4a74 <__addsf3x+0x98>
    4a58:	ba 0f       	add	r27, r26
    4a5a:	62 1f       	adc	r22, r18
    4a5c:	73 1f       	adc	r23, r19
    4a5e:	84 1f       	adc	r24, r20
    4a60:	48 f4       	brcc	.+18     	; 0x4a74 <__addsf3x+0x98>
    4a62:	87 95       	ror	r24
    4a64:	77 95       	ror	r23
    4a66:	67 95       	ror	r22
    4a68:	b7 95       	ror	r27
    4a6a:	f7 95       	ror	r31
    4a6c:	9e 3f       	cpi	r25, 0xFE	; 254
    4a6e:	08 f0       	brcs	.+2      	; 0x4a72 <__addsf3x+0x96>
    4a70:	b3 cf       	rjmp	.-154    	; 0x49d8 <__addsf3+0x1e>
    4a72:	93 95       	inc	r25
    4a74:	88 0f       	add	r24, r24
    4a76:	08 f0       	brcs	.+2      	; 0x4a7a <__addsf3x+0x9e>
    4a78:	99 27       	eor	r25, r25
    4a7a:	ee 0f       	add	r30, r30
    4a7c:	97 95       	ror	r25
    4a7e:	87 95       	ror	r24
    4a80:	08 95       	ret

00004a82 <__divsf3>:
    4a82:	0c d0       	rcall	.+24     	; 0x4a9c <__divsf3x>
    4a84:	e6 c0       	rjmp	.+460    	; 0x4c52 <__fp_round>
    4a86:	de d0       	rcall	.+444    	; 0x4c44 <__fp_pscB>
    4a88:	40 f0       	brcs	.+16     	; 0x4a9a <__divsf3+0x18>
    4a8a:	d5 d0       	rcall	.+426    	; 0x4c36 <__fp_pscA>
    4a8c:	30 f0       	brcs	.+12     	; 0x4a9a <__divsf3+0x18>
    4a8e:	21 f4       	brne	.+8      	; 0x4a98 <__divsf3+0x16>
    4a90:	5f 3f       	cpi	r21, 0xFF	; 255
    4a92:	19 f0       	breq	.+6      	; 0x4a9a <__divsf3+0x18>
    4a94:	c7 c0       	rjmp	.+398    	; 0x4c24 <__fp_inf>
    4a96:	51 11       	cpse	r21, r1
    4a98:	10 c1       	rjmp	.+544    	; 0x4cba <__fp_szero>
    4a9a:	ca c0       	rjmp	.+404    	; 0x4c30 <__fp_nan>

00004a9c <__divsf3x>:
    4a9c:	eb d0       	rcall	.+470    	; 0x4c74 <__fp_split3>
    4a9e:	98 f3       	brcs	.-26     	; 0x4a86 <__divsf3+0x4>

00004aa0 <__divsf3_pse>:
    4aa0:	99 23       	and	r25, r25
    4aa2:	c9 f3       	breq	.-14     	; 0x4a96 <__divsf3+0x14>
    4aa4:	55 23       	and	r21, r21
    4aa6:	b1 f3       	breq	.-20     	; 0x4a94 <__divsf3+0x12>
    4aa8:	95 1b       	sub	r25, r21
    4aaa:	55 0b       	sbc	r21, r21
    4aac:	bb 27       	eor	r27, r27
    4aae:	aa 27       	eor	r26, r26
    4ab0:	62 17       	cp	r22, r18
    4ab2:	73 07       	cpc	r23, r19
    4ab4:	84 07       	cpc	r24, r20
    4ab6:	38 f0       	brcs	.+14     	; 0x4ac6 <__divsf3_pse+0x26>
    4ab8:	9f 5f       	subi	r25, 0xFF	; 255
    4aba:	5f 4f       	sbci	r21, 0xFF	; 255
    4abc:	22 0f       	add	r18, r18
    4abe:	33 1f       	adc	r19, r19
    4ac0:	44 1f       	adc	r20, r20
    4ac2:	aa 1f       	adc	r26, r26
    4ac4:	a9 f3       	breq	.-22     	; 0x4ab0 <__divsf3_pse+0x10>
    4ac6:	33 d0       	rcall	.+102    	; 0x4b2e <__divsf3_pse+0x8e>
    4ac8:	0e 2e       	mov	r0, r30
    4aca:	3a f0       	brmi	.+14     	; 0x4ada <__divsf3_pse+0x3a>
    4acc:	e0 e8       	ldi	r30, 0x80	; 128
    4ace:	30 d0       	rcall	.+96     	; 0x4b30 <__divsf3_pse+0x90>
    4ad0:	91 50       	subi	r25, 0x01	; 1
    4ad2:	50 40       	sbci	r21, 0x00	; 0
    4ad4:	e6 95       	lsr	r30
    4ad6:	00 1c       	adc	r0, r0
    4ad8:	ca f7       	brpl	.-14     	; 0x4acc <__divsf3_pse+0x2c>
    4ada:	29 d0       	rcall	.+82     	; 0x4b2e <__divsf3_pse+0x8e>
    4adc:	fe 2f       	mov	r31, r30
    4ade:	27 d0       	rcall	.+78     	; 0x4b2e <__divsf3_pse+0x8e>
    4ae0:	66 0f       	add	r22, r22
    4ae2:	77 1f       	adc	r23, r23
    4ae4:	88 1f       	adc	r24, r24
    4ae6:	bb 1f       	adc	r27, r27
    4ae8:	26 17       	cp	r18, r22
    4aea:	37 07       	cpc	r19, r23
    4aec:	48 07       	cpc	r20, r24
    4aee:	ab 07       	cpc	r26, r27
    4af0:	b0 e8       	ldi	r27, 0x80	; 128
    4af2:	09 f0       	breq	.+2      	; 0x4af6 <__divsf3_pse+0x56>
    4af4:	bb 0b       	sbc	r27, r27
    4af6:	80 2d       	mov	r24, r0
    4af8:	bf 01       	movw	r22, r30
    4afa:	ff 27       	eor	r31, r31
    4afc:	93 58       	subi	r25, 0x83	; 131
    4afe:	5f 4f       	sbci	r21, 0xFF	; 255
    4b00:	2a f0       	brmi	.+10     	; 0x4b0c <__divsf3_pse+0x6c>
    4b02:	9e 3f       	cpi	r25, 0xFE	; 254
    4b04:	51 05       	cpc	r21, r1
    4b06:	68 f0       	brcs	.+26     	; 0x4b22 <__divsf3_pse+0x82>
    4b08:	8d c0       	rjmp	.+282    	; 0x4c24 <__fp_inf>
    4b0a:	d7 c0       	rjmp	.+430    	; 0x4cba <__fp_szero>
    4b0c:	5f 3f       	cpi	r21, 0xFF	; 255
    4b0e:	ec f3       	brlt	.-6      	; 0x4b0a <__divsf3_pse+0x6a>
    4b10:	98 3e       	cpi	r25, 0xE8	; 232
    4b12:	dc f3       	brlt	.-10     	; 0x4b0a <__divsf3_pse+0x6a>
    4b14:	86 95       	lsr	r24
    4b16:	77 95       	ror	r23
    4b18:	67 95       	ror	r22
    4b1a:	b7 95       	ror	r27
    4b1c:	f7 95       	ror	r31
    4b1e:	9f 5f       	subi	r25, 0xFF	; 255
    4b20:	c9 f7       	brne	.-14     	; 0x4b14 <__divsf3_pse+0x74>
    4b22:	88 0f       	add	r24, r24
    4b24:	91 1d       	adc	r25, r1
    4b26:	96 95       	lsr	r25
    4b28:	87 95       	ror	r24
    4b2a:	97 f9       	bld	r25, 7
    4b2c:	08 95       	ret
    4b2e:	e1 e0       	ldi	r30, 0x01	; 1
    4b30:	66 0f       	add	r22, r22
    4b32:	77 1f       	adc	r23, r23
    4b34:	88 1f       	adc	r24, r24
    4b36:	bb 1f       	adc	r27, r27
    4b38:	62 17       	cp	r22, r18
    4b3a:	73 07       	cpc	r23, r19
    4b3c:	84 07       	cpc	r24, r20
    4b3e:	ba 07       	cpc	r27, r26
    4b40:	20 f0       	brcs	.+8      	; 0x4b4a <__divsf3_pse+0xaa>
    4b42:	62 1b       	sub	r22, r18
    4b44:	73 0b       	sbc	r23, r19
    4b46:	84 0b       	sbc	r24, r20
    4b48:	ba 0b       	sbc	r27, r26
    4b4a:	ee 1f       	adc	r30, r30
    4b4c:	88 f7       	brcc	.-30     	; 0x4b30 <__divsf3_pse+0x90>
    4b4e:	e0 95       	com	r30
    4b50:	08 95       	ret

00004b52 <__fixunssfsi>:
    4b52:	98 d0       	rcall	.+304    	; 0x4c84 <__fp_splitA>
    4b54:	88 f0       	brcs	.+34     	; 0x4b78 <__fixunssfsi+0x26>
    4b56:	9f 57       	subi	r25, 0x7F	; 127
    4b58:	90 f0       	brcs	.+36     	; 0x4b7e <__fixunssfsi+0x2c>
    4b5a:	b9 2f       	mov	r27, r25
    4b5c:	99 27       	eor	r25, r25
    4b5e:	b7 51       	subi	r27, 0x17	; 23
    4b60:	a0 f0       	brcs	.+40     	; 0x4b8a <__fixunssfsi+0x38>
    4b62:	d1 f0       	breq	.+52     	; 0x4b98 <__fixunssfsi+0x46>
    4b64:	66 0f       	add	r22, r22
    4b66:	77 1f       	adc	r23, r23
    4b68:	88 1f       	adc	r24, r24
    4b6a:	99 1f       	adc	r25, r25
    4b6c:	1a f0       	brmi	.+6      	; 0x4b74 <__fixunssfsi+0x22>
    4b6e:	ba 95       	dec	r27
    4b70:	c9 f7       	brne	.-14     	; 0x4b64 <__fixunssfsi+0x12>
    4b72:	12 c0       	rjmp	.+36     	; 0x4b98 <__fixunssfsi+0x46>
    4b74:	b1 30       	cpi	r27, 0x01	; 1
    4b76:	81 f0       	breq	.+32     	; 0x4b98 <__fixunssfsi+0x46>
    4b78:	9f d0       	rcall	.+318    	; 0x4cb8 <__fp_zero>
    4b7a:	b1 e0       	ldi	r27, 0x01	; 1
    4b7c:	08 95       	ret
    4b7e:	9c c0       	rjmp	.+312    	; 0x4cb8 <__fp_zero>
    4b80:	67 2f       	mov	r22, r23
    4b82:	78 2f       	mov	r23, r24
    4b84:	88 27       	eor	r24, r24
    4b86:	b8 5f       	subi	r27, 0xF8	; 248
    4b88:	39 f0       	breq	.+14     	; 0x4b98 <__fixunssfsi+0x46>
    4b8a:	b9 3f       	cpi	r27, 0xF9	; 249
    4b8c:	cc f3       	brlt	.-14     	; 0x4b80 <__fixunssfsi+0x2e>
    4b8e:	86 95       	lsr	r24
    4b90:	77 95       	ror	r23
    4b92:	67 95       	ror	r22
    4b94:	b3 95       	inc	r27
    4b96:	d9 f7       	brne	.-10     	; 0x4b8e <__fixunssfsi+0x3c>
    4b98:	3e f4       	brtc	.+14     	; 0x4ba8 <__fixunssfsi+0x56>
    4b9a:	90 95       	com	r25
    4b9c:	80 95       	com	r24
    4b9e:	70 95       	com	r23
    4ba0:	61 95       	neg	r22
    4ba2:	7f 4f       	sbci	r23, 0xFF	; 255
    4ba4:	8f 4f       	sbci	r24, 0xFF	; 255
    4ba6:	9f 4f       	sbci	r25, 0xFF	; 255
    4ba8:	08 95       	ret

00004baa <__floatunsisf>:
    4baa:	e8 94       	clt
    4bac:	09 c0       	rjmp	.+18     	; 0x4bc0 <__floatsisf+0x12>

00004bae <__floatsisf>:
    4bae:	97 fb       	bst	r25, 7
    4bb0:	3e f4       	brtc	.+14     	; 0x4bc0 <__floatsisf+0x12>
    4bb2:	90 95       	com	r25
    4bb4:	80 95       	com	r24
    4bb6:	70 95       	com	r23
    4bb8:	61 95       	neg	r22
    4bba:	7f 4f       	sbci	r23, 0xFF	; 255
    4bbc:	8f 4f       	sbci	r24, 0xFF	; 255
    4bbe:	9f 4f       	sbci	r25, 0xFF	; 255
    4bc0:	99 23       	and	r25, r25
    4bc2:	a9 f0       	breq	.+42     	; 0x4bee <__floatsisf+0x40>
    4bc4:	f9 2f       	mov	r31, r25
    4bc6:	96 e9       	ldi	r25, 0x96	; 150
    4bc8:	bb 27       	eor	r27, r27
    4bca:	93 95       	inc	r25
    4bcc:	f6 95       	lsr	r31
    4bce:	87 95       	ror	r24
    4bd0:	77 95       	ror	r23
    4bd2:	67 95       	ror	r22
    4bd4:	b7 95       	ror	r27
    4bd6:	f1 11       	cpse	r31, r1
    4bd8:	f8 cf       	rjmp	.-16     	; 0x4bca <__floatsisf+0x1c>
    4bda:	fa f4       	brpl	.+62     	; 0x4c1a <__floatsisf+0x6c>
    4bdc:	bb 0f       	add	r27, r27
    4bde:	11 f4       	brne	.+4      	; 0x4be4 <__floatsisf+0x36>
    4be0:	60 ff       	sbrs	r22, 0
    4be2:	1b c0       	rjmp	.+54     	; 0x4c1a <__floatsisf+0x6c>
    4be4:	6f 5f       	subi	r22, 0xFF	; 255
    4be6:	7f 4f       	sbci	r23, 0xFF	; 255
    4be8:	8f 4f       	sbci	r24, 0xFF	; 255
    4bea:	9f 4f       	sbci	r25, 0xFF	; 255
    4bec:	16 c0       	rjmp	.+44     	; 0x4c1a <__floatsisf+0x6c>
    4bee:	88 23       	and	r24, r24
    4bf0:	11 f0       	breq	.+4      	; 0x4bf6 <__floatsisf+0x48>
    4bf2:	96 e9       	ldi	r25, 0x96	; 150
    4bf4:	11 c0       	rjmp	.+34     	; 0x4c18 <__floatsisf+0x6a>
    4bf6:	77 23       	and	r23, r23
    4bf8:	21 f0       	breq	.+8      	; 0x4c02 <__floatsisf+0x54>
    4bfa:	9e e8       	ldi	r25, 0x8E	; 142
    4bfc:	87 2f       	mov	r24, r23
    4bfe:	76 2f       	mov	r23, r22
    4c00:	05 c0       	rjmp	.+10     	; 0x4c0c <__floatsisf+0x5e>
    4c02:	66 23       	and	r22, r22
    4c04:	71 f0       	breq	.+28     	; 0x4c22 <__floatsisf+0x74>
    4c06:	96 e8       	ldi	r25, 0x86	; 134
    4c08:	86 2f       	mov	r24, r22
    4c0a:	70 e0       	ldi	r23, 0x00	; 0
    4c0c:	60 e0       	ldi	r22, 0x00	; 0
    4c0e:	2a f0       	brmi	.+10     	; 0x4c1a <__floatsisf+0x6c>
    4c10:	9a 95       	dec	r25
    4c12:	66 0f       	add	r22, r22
    4c14:	77 1f       	adc	r23, r23
    4c16:	88 1f       	adc	r24, r24
    4c18:	da f7       	brpl	.-10     	; 0x4c10 <__floatsisf+0x62>
    4c1a:	88 0f       	add	r24, r24
    4c1c:	96 95       	lsr	r25
    4c1e:	87 95       	ror	r24
    4c20:	97 f9       	bld	r25, 7
    4c22:	08 95       	ret

00004c24 <__fp_inf>:
    4c24:	97 f9       	bld	r25, 7
    4c26:	9f 67       	ori	r25, 0x7F	; 127
    4c28:	80 e8       	ldi	r24, 0x80	; 128
    4c2a:	70 e0       	ldi	r23, 0x00	; 0
    4c2c:	60 e0       	ldi	r22, 0x00	; 0
    4c2e:	08 95       	ret

00004c30 <__fp_nan>:
    4c30:	9f ef       	ldi	r25, 0xFF	; 255
    4c32:	80 ec       	ldi	r24, 0xC0	; 192
    4c34:	08 95       	ret

00004c36 <__fp_pscA>:
    4c36:	00 24       	eor	r0, r0
    4c38:	0a 94       	dec	r0
    4c3a:	16 16       	cp	r1, r22
    4c3c:	17 06       	cpc	r1, r23
    4c3e:	18 06       	cpc	r1, r24
    4c40:	09 06       	cpc	r0, r25
    4c42:	08 95       	ret

00004c44 <__fp_pscB>:
    4c44:	00 24       	eor	r0, r0
    4c46:	0a 94       	dec	r0
    4c48:	12 16       	cp	r1, r18
    4c4a:	13 06       	cpc	r1, r19
    4c4c:	14 06       	cpc	r1, r20
    4c4e:	05 06       	cpc	r0, r21
    4c50:	08 95       	ret

00004c52 <__fp_round>:
    4c52:	09 2e       	mov	r0, r25
    4c54:	03 94       	inc	r0
    4c56:	00 0c       	add	r0, r0
    4c58:	11 f4       	brne	.+4      	; 0x4c5e <__fp_round+0xc>
    4c5a:	88 23       	and	r24, r24
    4c5c:	52 f0       	brmi	.+20     	; 0x4c72 <__fp_round+0x20>
    4c5e:	bb 0f       	add	r27, r27
    4c60:	40 f4       	brcc	.+16     	; 0x4c72 <__fp_round+0x20>
    4c62:	bf 2b       	or	r27, r31
    4c64:	11 f4       	brne	.+4      	; 0x4c6a <__fp_round+0x18>
    4c66:	60 ff       	sbrs	r22, 0
    4c68:	04 c0       	rjmp	.+8      	; 0x4c72 <__fp_round+0x20>
    4c6a:	6f 5f       	subi	r22, 0xFF	; 255
    4c6c:	7f 4f       	sbci	r23, 0xFF	; 255
    4c6e:	8f 4f       	sbci	r24, 0xFF	; 255
    4c70:	9f 4f       	sbci	r25, 0xFF	; 255
    4c72:	08 95       	ret

00004c74 <__fp_split3>:
    4c74:	57 fd       	sbrc	r21, 7
    4c76:	90 58       	subi	r25, 0x80	; 128
    4c78:	44 0f       	add	r20, r20
    4c7a:	55 1f       	adc	r21, r21
    4c7c:	59 f0       	breq	.+22     	; 0x4c94 <__fp_splitA+0x10>
    4c7e:	5f 3f       	cpi	r21, 0xFF	; 255
    4c80:	71 f0       	breq	.+28     	; 0x4c9e <__fp_splitA+0x1a>
    4c82:	47 95       	ror	r20

00004c84 <__fp_splitA>:
    4c84:	88 0f       	add	r24, r24
    4c86:	97 fb       	bst	r25, 7
    4c88:	99 1f       	adc	r25, r25
    4c8a:	61 f0       	breq	.+24     	; 0x4ca4 <__fp_splitA+0x20>
    4c8c:	9f 3f       	cpi	r25, 0xFF	; 255
    4c8e:	79 f0       	breq	.+30     	; 0x4cae <__fp_splitA+0x2a>
    4c90:	87 95       	ror	r24
    4c92:	08 95       	ret
    4c94:	12 16       	cp	r1, r18
    4c96:	13 06       	cpc	r1, r19
    4c98:	14 06       	cpc	r1, r20
    4c9a:	55 1f       	adc	r21, r21
    4c9c:	f2 cf       	rjmp	.-28     	; 0x4c82 <__fp_split3+0xe>
    4c9e:	46 95       	lsr	r20
    4ca0:	f1 df       	rcall	.-30     	; 0x4c84 <__fp_splitA>
    4ca2:	08 c0       	rjmp	.+16     	; 0x4cb4 <__fp_splitA+0x30>
    4ca4:	16 16       	cp	r1, r22
    4ca6:	17 06       	cpc	r1, r23
    4ca8:	18 06       	cpc	r1, r24
    4caa:	99 1f       	adc	r25, r25
    4cac:	f1 cf       	rjmp	.-30     	; 0x4c90 <__fp_splitA+0xc>
    4cae:	86 95       	lsr	r24
    4cb0:	71 05       	cpc	r23, r1
    4cb2:	61 05       	cpc	r22, r1
    4cb4:	08 94       	sec
    4cb6:	08 95       	ret

00004cb8 <__fp_zero>:
    4cb8:	e8 94       	clt

00004cba <__fp_szero>:
    4cba:	bb 27       	eor	r27, r27
    4cbc:	66 27       	eor	r22, r22
    4cbe:	77 27       	eor	r23, r23
    4cc0:	cb 01       	movw	r24, r22
    4cc2:	97 f9       	bld	r25, 7
    4cc4:	08 95       	ret

00004cc6 <__mulsf3>:
    4cc6:	0b d0       	rcall	.+22     	; 0x4cde <__mulsf3x>
    4cc8:	c4 cf       	rjmp	.-120    	; 0x4c52 <__fp_round>
    4cca:	b5 df       	rcall	.-150    	; 0x4c36 <__fp_pscA>
    4ccc:	28 f0       	brcs	.+10     	; 0x4cd8 <__mulsf3+0x12>
    4cce:	ba df       	rcall	.-140    	; 0x4c44 <__fp_pscB>
    4cd0:	18 f0       	brcs	.+6      	; 0x4cd8 <__mulsf3+0x12>
    4cd2:	95 23       	and	r25, r21
    4cd4:	09 f0       	breq	.+2      	; 0x4cd8 <__mulsf3+0x12>
    4cd6:	a6 cf       	rjmp	.-180    	; 0x4c24 <__fp_inf>
    4cd8:	ab cf       	rjmp	.-170    	; 0x4c30 <__fp_nan>
    4cda:	11 24       	eor	r1, r1
    4cdc:	ee cf       	rjmp	.-36     	; 0x4cba <__fp_szero>

00004cde <__mulsf3x>:
    4cde:	ca df       	rcall	.-108    	; 0x4c74 <__fp_split3>
    4ce0:	a0 f3       	brcs	.-24     	; 0x4cca <__mulsf3+0x4>

00004ce2 <__mulsf3_pse>:
    4ce2:	95 9f       	mul	r25, r21
    4ce4:	d1 f3       	breq	.-12     	; 0x4cda <__mulsf3+0x14>
    4ce6:	95 0f       	add	r25, r21
    4ce8:	50 e0       	ldi	r21, 0x00	; 0
    4cea:	55 1f       	adc	r21, r21
    4cec:	62 9f       	mul	r22, r18
    4cee:	f0 01       	movw	r30, r0
    4cf0:	72 9f       	mul	r23, r18
    4cf2:	bb 27       	eor	r27, r27
    4cf4:	f0 0d       	add	r31, r0
    4cf6:	b1 1d       	adc	r27, r1
    4cf8:	63 9f       	mul	r22, r19
    4cfa:	aa 27       	eor	r26, r26
    4cfc:	f0 0d       	add	r31, r0
    4cfe:	b1 1d       	adc	r27, r1
    4d00:	aa 1f       	adc	r26, r26
    4d02:	64 9f       	mul	r22, r20
    4d04:	66 27       	eor	r22, r22
    4d06:	b0 0d       	add	r27, r0
    4d08:	a1 1d       	adc	r26, r1
    4d0a:	66 1f       	adc	r22, r22
    4d0c:	82 9f       	mul	r24, r18
    4d0e:	22 27       	eor	r18, r18
    4d10:	b0 0d       	add	r27, r0
    4d12:	a1 1d       	adc	r26, r1
    4d14:	62 1f       	adc	r22, r18
    4d16:	73 9f       	mul	r23, r19
    4d18:	b0 0d       	add	r27, r0
    4d1a:	a1 1d       	adc	r26, r1
    4d1c:	62 1f       	adc	r22, r18
    4d1e:	83 9f       	mul	r24, r19
    4d20:	a0 0d       	add	r26, r0
    4d22:	61 1d       	adc	r22, r1
    4d24:	22 1f       	adc	r18, r18
    4d26:	74 9f       	mul	r23, r20
    4d28:	33 27       	eor	r19, r19
    4d2a:	a0 0d       	add	r26, r0
    4d2c:	61 1d       	adc	r22, r1
    4d2e:	23 1f       	adc	r18, r19
    4d30:	84 9f       	mul	r24, r20
    4d32:	60 0d       	add	r22, r0
    4d34:	21 1d       	adc	r18, r1
    4d36:	82 2f       	mov	r24, r18
    4d38:	76 2f       	mov	r23, r22
    4d3a:	6a 2f       	mov	r22, r26
    4d3c:	11 24       	eor	r1, r1
    4d3e:	9f 57       	subi	r25, 0x7F	; 127
    4d40:	50 40       	sbci	r21, 0x00	; 0
    4d42:	8a f0       	brmi	.+34     	; 0x4d66 <__mulsf3_pse+0x84>
    4d44:	e1 f0       	breq	.+56     	; 0x4d7e <__mulsf3_pse+0x9c>
    4d46:	88 23       	and	r24, r24
    4d48:	4a f0       	brmi	.+18     	; 0x4d5c <__mulsf3_pse+0x7a>
    4d4a:	ee 0f       	add	r30, r30
    4d4c:	ff 1f       	adc	r31, r31
    4d4e:	bb 1f       	adc	r27, r27
    4d50:	66 1f       	adc	r22, r22
    4d52:	77 1f       	adc	r23, r23
    4d54:	88 1f       	adc	r24, r24
    4d56:	91 50       	subi	r25, 0x01	; 1
    4d58:	50 40       	sbci	r21, 0x00	; 0
    4d5a:	a9 f7       	brne	.-22     	; 0x4d46 <__mulsf3_pse+0x64>
    4d5c:	9e 3f       	cpi	r25, 0xFE	; 254
    4d5e:	51 05       	cpc	r21, r1
    4d60:	70 f0       	brcs	.+28     	; 0x4d7e <__mulsf3_pse+0x9c>
    4d62:	60 cf       	rjmp	.-320    	; 0x4c24 <__fp_inf>
    4d64:	aa cf       	rjmp	.-172    	; 0x4cba <__fp_szero>
    4d66:	5f 3f       	cpi	r21, 0xFF	; 255
    4d68:	ec f3       	brlt	.-6      	; 0x4d64 <__mulsf3_pse+0x82>
    4d6a:	98 3e       	cpi	r25, 0xE8	; 232
    4d6c:	dc f3       	brlt	.-10     	; 0x4d64 <__mulsf3_pse+0x82>
    4d6e:	86 95       	lsr	r24
    4d70:	77 95       	ror	r23
    4d72:	67 95       	ror	r22
    4d74:	b7 95       	ror	r27
    4d76:	f7 95       	ror	r31
    4d78:	e7 95       	ror	r30
    4d7a:	9f 5f       	subi	r25, 0xFF	; 255
    4d7c:	c1 f7       	brne	.-16     	; 0x4d6e <__mulsf3_pse+0x8c>
    4d7e:	fe 2b       	or	r31, r30
    4d80:	88 0f       	add	r24, r24
    4d82:	91 1d       	adc	r25, r1
    4d84:	96 95       	lsr	r25
    4d86:	87 95       	ror	r24
    4d88:	97 f9       	bld	r25, 7
    4d8a:	08 95       	ret

00004d8c <pow>:
    4d8c:	fa 01       	movw	r30, r20
    4d8e:	ee 0f       	add	r30, r30
    4d90:	ff 1f       	adc	r31, r31
    4d92:	30 96       	adiw	r30, 0x00	; 0
    4d94:	21 05       	cpc	r18, r1
    4d96:	31 05       	cpc	r19, r1
    4d98:	99 f1       	breq	.+102    	; 0x4e00 <pow+0x74>
    4d9a:	61 15       	cp	r22, r1
    4d9c:	71 05       	cpc	r23, r1
    4d9e:	61 f4       	brne	.+24     	; 0x4db8 <pow+0x2c>
    4da0:	80 38       	cpi	r24, 0x80	; 128
    4da2:	bf e3       	ldi	r27, 0x3F	; 63
    4da4:	9b 07       	cpc	r25, r27
    4da6:	49 f1       	breq	.+82     	; 0x4dfa <pow+0x6e>
    4da8:	68 94       	set
    4daa:	90 38       	cpi	r25, 0x80	; 128
    4dac:	81 05       	cpc	r24, r1
    4dae:	61 f0       	breq	.+24     	; 0x4dc8 <pow+0x3c>
    4db0:	80 38       	cpi	r24, 0x80	; 128
    4db2:	bf ef       	ldi	r27, 0xFF	; 255
    4db4:	9b 07       	cpc	r25, r27
    4db6:	41 f0       	breq	.+16     	; 0x4dc8 <pow+0x3c>
    4db8:	99 23       	and	r25, r25
    4dba:	42 f5       	brpl	.+80     	; 0x4e0c <pow+0x80>
    4dbc:	ff 3f       	cpi	r31, 0xFF	; 255
    4dbe:	e1 05       	cpc	r30, r1
    4dc0:	31 05       	cpc	r19, r1
    4dc2:	21 05       	cpc	r18, r1
    4dc4:	11 f1       	breq	.+68     	; 0x4e0a <pow+0x7e>
    4dc6:	e8 94       	clt
    4dc8:	08 94       	sec
    4dca:	e7 95       	ror	r30
    4dcc:	d9 01       	movw	r26, r18
    4dce:	aa 23       	and	r26, r26
    4dd0:	29 f4       	brne	.+10     	; 0x4ddc <pow+0x50>
    4dd2:	ab 2f       	mov	r26, r27
    4dd4:	be 2f       	mov	r27, r30
    4dd6:	f8 5f       	subi	r31, 0xF8	; 248
    4dd8:	d0 f3       	brcs	.-12     	; 0x4dce <pow+0x42>
    4dda:	10 c0       	rjmp	.+32     	; 0x4dfc <pow+0x70>
    4ddc:	ff 5f       	subi	r31, 0xFF	; 255
    4dde:	70 f4       	brcc	.+28     	; 0x4dfc <pow+0x70>
    4de0:	a6 95       	lsr	r26
    4de2:	e0 f7       	brcc	.-8      	; 0x4ddc <pow+0x50>
    4de4:	f7 39       	cpi	r31, 0x97	; 151
    4de6:	50 f0       	brcs	.+20     	; 0x4dfc <pow+0x70>
    4de8:	19 f0       	breq	.+6      	; 0x4df0 <pow+0x64>
    4dea:	ff 3a       	cpi	r31, 0xAF	; 175
    4dec:	38 f4       	brcc	.+14     	; 0x4dfc <pow+0x70>
    4dee:	9f 77       	andi	r25, 0x7F	; 127
    4df0:	9f 93       	push	r25
    4df2:	0c d0       	rcall	.+24     	; 0x4e0c <pow+0x80>
    4df4:	0f 90       	pop	r0
    4df6:	07 fc       	sbrc	r0, 7
    4df8:	90 58       	subi	r25, 0x80	; 128
    4dfa:	08 95       	ret
    4dfc:	3e f0       	brts	.+14     	; 0x4e0c <pow+0x80>
    4dfe:	18 cf       	rjmp	.-464    	; 0x4c30 <__fp_nan>
    4e00:	60 e0       	ldi	r22, 0x00	; 0
    4e02:	70 e0       	ldi	r23, 0x00	; 0
    4e04:	80 e8       	ldi	r24, 0x80	; 128
    4e06:	9f e3       	ldi	r25, 0x3F	; 63
    4e08:	08 95       	ret
    4e0a:	4f e7       	ldi	r20, 0x7F	; 127
    4e0c:	9f 77       	andi	r25, 0x7F	; 127
    4e0e:	5f 93       	push	r21
    4e10:	4f 93       	push	r20
    4e12:	3f 93       	push	r19
    4e14:	2f 93       	push	r18
    4e16:	e7 d0       	rcall	.+462    	; 0x4fe6 <log>
    4e18:	2f 91       	pop	r18
    4e1a:	3f 91       	pop	r19
    4e1c:	4f 91       	pop	r20
    4e1e:	5f 91       	pop	r21
    4e20:	52 df       	rcall	.-348    	; 0x4cc6 <__mulsf3>
    4e22:	25 c0       	rjmp	.+74     	; 0x4e6e <exp>

00004e24 <round>:
    4e24:	2f df       	rcall	.-418    	; 0x4c84 <__fp_splitA>
    4e26:	e0 f0       	brcs	.+56     	; 0x4e60 <round+0x3c>
    4e28:	9e 37       	cpi	r25, 0x7E	; 126
    4e2a:	d8 f0       	brcs	.+54     	; 0x4e62 <round+0x3e>
    4e2c:	96 39       	cpi	r25, 0x96	; 150
    4e2e:	b8 f4       	brcc	.+46     	; 0x4e5e <round+0x3a>
    4e30:	9e 38       	cpi	r25, 0x8E	; 142
    4e32:	48 f4       	brcc	.+18     	; 0x4e46 <round+0x22>
    4e34:	67 2f       	mov	r22, r23
    4e36:	78 2f       	mov	r23, r24
    4e38:	88 27       	eor	r24, r24
    4e3a:	98 5f       	subi	r25, 0xF8	; 248
    4e3c:	f9 cf       	rjmp	.-14     	; 0x4e30 <round+0xc>
    4e3e:	86 95       	lsr	r24
    4e40:	77 95       	ror	r23
    4e42:	67 95       	ror	r22
    4e44:	93 95       	inc	r25
    4e46:	95 39       	cpi	r25, 0x95	; 149
    4e48:	d0 f3       	brcs	.-12     	; 0x4e3e <round+0x1a>
    4e4a:	b6 2f       	mov	r27, r22
    4e4c:	b1 70       	andi	r27, 0x01	; 1
    4e4e:	6b 0f       	add	r22, r27
    4e50:	71 1d       	adc	r23, r1
    4e52:	81 1d       	adc	r24, r1
    4e54:	20 f4       	brcc	.+8      	; 0x4e5e <round+0x3a>
    4e56:	87 95       	ror	r24
    4e58:	77 95       	ror	r23
    4e5a:	67 95       	ror	r22
    4e5c:	93 95       	inc	r25
    4e5e:	33 c0       	rjmp	.+102    	; 0x4ec6 <__fp_mintl>
    4e60:	4d c0       	rjmp	.+154    	; 0x4efc <__fp_mpack>
    4e62:	2b cf       	rjmp	.-426    	; 0x4cba <__fp_szero>
    4e64:	19 f4       	brne	.+6      	; 0x4e6c <round+0x48>
    4e66:	0e f0       	brts	.+2      	; 0x4e6a <round+0x46>
    4e68:	dd ce       	rjmp	.-582    	; 0x4c24 <__fp_inf>
    4e6a:	26 cf       	rjmp	.-436    	; 0x4cb8 <__fp_zero>
    4e6c:	e1 ce       	rjmp	.-574    	; 0x4c30 <__fp_nan>

00004e6e <exp>:
    4e6e:	0a df       	rcall	.-492    	; 0x4c84 <__fp_splitA>
    4e70:	c8 f3       	brcs	.-14     	; 0x4e64 <round+0x40>
    4e72:	96 38       	cpi	r25, 0x86	; 134
    4e74:	c0 f7       	brcc	.-16     	; 0x4e66 <round+0x42>
    4e76:	07 f8       	bld	r0, 7
    4e78:	0f 92       	push	r0
    4e7a:	e8 94       	clt
    4e7c:	2b e3       	ldi	r18, 0x3B	; 59
    4e7e:	3a ea       	ldi	r19, 0xAA	; 170
    4e80:	48 eb       	ldi	r20, 0xB8	; 184
    4e82:	5f e7       	ldi	r21, 0x7F	; 127
    4e84:	2e df       	rcall	.-420    	; 0x4ce2 <__mulsf3_pse>
    4e86:	0f 92       	push	r0
    4e88:	0f 92       	push	r0
    4e8a:	0f 92       	push	r0
    4e8c:	4d b7       	in	r20, 0x3d	; 61
    4e8e:	5e b7       	in	r21, 0x3e	; 62
    4e90:	0f 92       	push	r0
    4e92:	e9 d0       	rcall	.+466    	; 0x5066 <modf>
    4e94:	e4 ee       	ldi	r30, 0xE4	; 228
    4e96:	f0 e0       	ldi	r31, 0x00	; 0
    4e98:	3f d0       	rcall	.+126    	; 0x4f18 <__fp_powser>
    4e9a:	4f 91       	pop	r20
    4e9c:	5f 91       	pop	r21
    4e9e:	ef 91       	pop	r30
    4ea0:	ff 91       	pop	r31
    4ea2:	e5 95       	asr	r30
    4ea4:	ee 1f       	adc	r30, r30
    4ea6:	ff 1f       	adc	r31, r31
    4ea8:	49 f0       	breq	.+18     	; 0x4ebc <exp+0x4e>
    4eaa:	fe 57       	subi	r31, 0x7E	; 126
    4eac:	e0 68       	ori	r30, 0x80	; 128
    4eae:	44 27       	eor	r20, r20
    4eb0:	ee 0f       	add	r30, r30
    4eb2:	44 1f       	adc	r20, r20
    4eb4:	fa 95       	dec	r31
    4eb6:	e1 f7       	brne	.-8      	; 0x4eb0 <exp+0x42>
    4eb8:	41 95       	neg	r20
    4eba:	55 0b       	sbc	r21, r21
    4ebc:	5b d0       	rcall	.+182    	; 0x4f74 <ldexp>
    4ebe:	0f 90       	pop	r0
    4ec0:	07 fe       	sbrs	r0, 7
    4ec2:	4f c0       	rjmp	.+158    	; 0x4f62 <inverse>
    4ec4:	08 95       	ret

00004ec6 <__fp_mintl>:
    4ec6:	88 23       	and	r24, r24
    4ec8:	71 f4       	brne	.+28     	; 0x4ee6 <__fp_mintl+0x20>
    4eca:	77 23       	and	r23, r23
    4ecc:	21 f0       	breq	.+8      	; 0x4ed6 <__fp_mintl+0x10>
    4ece:	98 50       	subi	r25, 0x08	; 8
    4ed0:	87 2b       	or	r24, r23
    4ed2:	76 2f       	mov	r23, r22
    4ed4:	07 c0       	rjmp	.+14     	; 0x4ee4 <__fp_mintl+0x1e>
    4ed6:	66 23       	and	r22, r22
    4ed8:	11 f4       	brne	.+4      	; 0x4ede <__fp_mintl+0x18>
    4eda:	99 27       	eor	r25, r25
    4edc:	0d c0       	rjmp	.+26     	; 0x4ef8 <__fp_mintl+0x32>
    4ede:	90 51       	subi	r25, 0x10	; 16
    4ee0:	86 2b       	or	r24, r22
    4ee2:	70 e0       	ldi	r23, 0x00	; 0
    4ee4:	60 e0       	ldi	r22, 0x00	; 0
    4ee6:	2a f0       	brmi	.+10     	; 0x4ef2 <__fp_mintl+0x2c>
    4ee8:	9a 95       	dec	r25
    4eea:	66 0f       	add	r22, r22
    4eec:	77 1f       	adc	r23, r23
    4eee:	88 1f       	adc	r24, r24
    4ef0:	da f7       	brpl	.-10     	; 0x4ee8 <__fp_mintl+0x22>
    4ef2:	88 0f       	add	r24, r24
    4ef4:	96 95       	lsr	r25
    4ef6:	87 95       	ror	r24
    4ef8:	97 f9       	bld	r25, 7
    4efa:	08 95       	ret

00004efc <__fp_mpack>:
    4efc:	9f 3f       	cpi	r25, 0xFF	; 255
    4efe:	31 f0       	breq	.+12     	; 0x4f0c <__fp_mpack_finite+0xc>

00004f00 <__fp_mpack_finite>:
    4f00:	91 50       	subi	r25, 0x01	; 1
    4f02:	20 f4       	brcc	.+8      	; 0x4f0c <__fp_mpack_finite+0xc>
    4f04:	87 95       	ror	r24
    4f06:	77 95       	ror	r23
    4f08:	67 95       	ror	r22
    4f0a:	b7 95       	ror	r27
    4f0c:	88 0f       	add	r24, r24
    4f0e:	91 1d       	adc	r25, r1
    4f10:	96 95       	lsr	r25
    4f12:	87 95       	ror	r24
    4f14:	97 f9       	bld	r25, 7
    4f16:	08 95       	ret

00004f18 <__fp_powser>:
    4f18:	df 93       	push	r29
    4f1a:	cf 93       	push	r28
    4f1c:	1f 93       	push	r17
    4f1e:	0f 93       	push	r16
    4f20:	ff 92       	push	r15
    4f22:	ef 92       	push	r14
    4f24:	df 92       	push	r13
    4f26:	7b 01       	movw	r14, r22
    4f28:	8c 01       	movw	r16, r24
    4f2a:	68 94       	set
    4f2c:	05 c0       	rjmp	.+10     	; 0x4f38 <__fp_powser+0x20>
    4f2e:	da 2e       	mov	r13, r26
    4f30:	ef 01       	movw	r28, r30
    4f32:	d5 de       	rcall	.-598    	; 0x4cde <__mulsf3x>
    4f34:	fe 01       	movw	r30, r28
    4f36:	e8 94       	clt
    4f38:	a5 91       	lpm	r26, Z+
    4f3a:	25 91       	lpm	r18, Z+
    4f3c:	35 91       	lpm	r19, Z+
    4f3e:	45 91       	lpm	r20, Z+
    4f40:	55 91       	lpm	r21, Z+
    4f42:	ae f3       	brts	.-22     	; 0x4f2e <__fp_powser+0x16>
    4f44:	ef 01       	movw	r28, r30
    4f46:	4a dd       	rcall	.-1388   	; 0x49dc <__addsf3x>
    4f48:	fe 01       	movw	r30, r28
    4f4a:	97 01       	movw	r18, r14
    4f4c:	a8 01       	movw	r20, r16
    4f4e:	da 94       	dec	r13
    4f50:	79 f7       	brne	.-34     	; 0x4f30 <__fp_powser+0x18>
    4f52:	df 90       	pop	r13
    4f54:	ef 90       	pop	r14
    4f56:	ff 90       	pop	r15
    4f58:	0f 91       	pop	r16
    4f5a:	1f 91       	pop	r17
    4f5c:	cf 91       	pop	r28
    4f5e:	df 91       	pop	r29
    4f60:	08 95       	ret

00004f62 <inverse>:
    4f62:	9b 01       	movw	r18, r22
    4f64:	ac 01       	movw	r20, r24
    4f66:	60 e0       	ldi	r22, 0x00	; 0
    4f68:	70 e0       	ldi	r23, 0x00	; 0
    4f6a:	80 e8       	ldi	r24, 0x80	; 128
    4f6c:	9f e3       	ldi	r25, 0x3F	; 63
    4f6e:	89 cd       	rjmp	.-1262   	; 0x4a82 <__divsf3>
    4f70:	59 ce       	rjmp	.-846    	; 0x4c24 <__fp_inf>
    4f72:	c4 cf       	rjmp	.-120    	; 0x4efc <__fp_mpack>

00004f74 <ldexp>:
    4f74:	87 de       	rcall	.-754    	; 0x4c84 <__fp_splitA>
    4f76:	e8 f3       	brcs	.-6      	; 0x4f72 <inverse+0x10>
    4f78:	99 23       	and	r25, r25
    4f7a:	d9 f3       	breq	.-10     	; 0x4f72 <inverse+0x10>
    4f7c:	94 0f       	add	r25, r20
    4f7e:	51 1d       	adc	r21, r1
    4f80:	bb f3       	brvs	.-18     	; 0x4f70 <inverse+0xe>
    4f82:	91 50       	subi	r25, 0x01	; 1
    4f84:	50 40       	sbci	r21, 0x00	; 0
    4f86:	94 f0       	brlt	.+36     	; 0x4fac <ldexp+0x38>
    4f88:	59 f0       	breq	.+22     	; 0x4fa0 <ldexp+0x2c>
    4f8a:	88 23       	and	r24, r24
    4f8c:	32 f0       	brmi	.+12     	; 0x4f9a <ldexp+0x26>
    4f8e:	66 0f       	add	r22, r22
    4f90:	77 1f       	adc	r23, r23
    4f92:	88 1f       	adc	r24, r24
    4f94:	91 50       	subi	r25, 0x01	; 1
    4f96:	50 40       	sbci	r21, 0x00	; 0
    4f98:	c1 f7       	brne	.-16     	; 0x4f8a <ldexp+0x16>
    4f9a:	9e 3f       	cpi	r25, 0xFE	; 254
    4f9c:	51 05       	cpc	r21, r1
    4f9e:	44 f7       	brge	.-48     	; 0x4f70 <inverse+0xe>
    4fa0:	88 0f       	add	r24, r24
    4fa2:	91 1d       	adc	r25, r1
    4fa4:	96 95       	lsr	r25
    4fa6:	87 95       	ror	r24
    4fa8:	97 f9       	bld	r25, 7
    4faa:	08 95       	ret
    4fac:	5f 3f       	cpi	r21, 0xFF	; 255
    4fae:	ac f0       	brlt	.+42     	; 0x4fda <ldexp+0x66>
    4fb0:	98 3e       	cpi	r25, 0xE8	; 232
    4fb2:	9c f0       	brlt	.+38     	; 0x4fda <ldexp+0x66>
    4fb4:	bb 27       	eor	r27, r27
    4fb6:	86 95       	lsr	r24
    4fb8:	77 95       	ror	r23
    4fba:	67 95       	ror	r22
    4fbc:	b7 95       	ror	r27
    4fbe:	08 f4       	brcc	.+2      	; 0x4fc2 <ldexp+0x4e>
    4fc0:	b1 60       	ori	r27, 0x01	; 1
    4fc2:	93 95       	inc	r25
    4fc4:	c1 f7       	brne	.-16     	; 0x4fb6 <ldexp+0x42>
    4fc6:	bb 0f       	add	r27, r27
    4fc8:	58 f7       	brcc	.-42     	; 0x4fa0 <ldexp+0x2c>
    4fca:	11 f4       	brne	.+4      	; 0x4fd0 <ldexp+0x5c>
    4fcc:	60 ff       	sbrs	r22, 0
    4fce:	e8 cf       	rjmp	.-48     	; 0x4fa0 <ldexp+0x2c>
    4fd0:	6f 5f       	subi	r22, 0xFF	; 255
    4fd2:	7f 4f       	sbci	r23, 0xFF	; 255
    4fd4:	8f 4f       	sbci	r24, 0xFF	; 255
    4fd6:	9f 4f       	sbci	r25, 0xFF	; 255
    4fd8:	e3 cf       	rjmp	.-58     	; 0x4fa0 <ldexp+0x2c>
    4fda:	6f ce       	rjmp	.-802    	; 0x4cba <__fp_szero>
    4fdc:	0e f0       	brts	.+2      	; 0x4fe0 <ldexp+0x6c>
    4fde:	8e cf       	rjmp	.-228    	; 0x4efc <__fp_mpack>
    4fe0:	27 ce       	rjmp	.-946    	; 0x4c30 <__fp_nan>
    4fe2:	68 94       	set
    4fe4:	1f ce       	rjmp	.-962    	; 0x4c24 <__fp_inf>

00004fe6 <log>:
    4fe6:	4e de       	rcall	.-868    	; 0x4c84 <__fp_splitA>
    4fe8:	c8 f3       	brcs	.-14     	; 0x4fdc <ldexp+0x68>
    4fea:	99 23       	and	r25, r25
    4fec:	d1 f3       	breq	.-12     	; 0x4fe2 <ldexp+0x6e>
    4fee:	c6 f3       	brts	.-16     	; 0x4fe0 <ldexp+0x6c>
    4ff0:	df 93       	push	r29
    4ff2:	cf 93       	push	r28
    4ff4:	1f 93       	push	r17
    4ff6:	0f 93       	push	r16
    4ff8:	ff 92       	push	r15
    4ffa:	c9 2f       	mov	r28, r25
    4ffc:	dd 27       	eor	r29, r29
    4ffe:	88 23       	and	r24, r24
    5000:	2a f0       	brmi	.+10     	; 0x500c <log+0x26>
    5002:	21 97       	sbiw	r28, 0x01	; 1
    5004:	66 0f       	add	r22, r22
    5006:	77 1f       	adc	r23, r23
    5008:	88 1f       	adc	r24, r24
    500a:	da f7       	brpl	.-10     	; 0x5002 <log+0x1c>
    500c:	20 e0       	ldi	r18, 0x00	; 0
    500e:	30 e0       	ldi	r19, 0x00	; 0
    5010:	40 e8       	ldi	r20, 0x80	; 128
    5012:	5f eb       	ldi	r21, 0xBF	; 191
    5014:	9f e3       	ldi	r25, 0x3F	; 63
    5016:	88 39       	cpi	r24, 0x98	; 152
    5018:	20 f0       	brcs	.+8      	; 0x5022 <log+0x3c>
    501a:	80 3e       	cpi	r24, 0xE0	; 224
    501c:	30 f0       	brcs	.+12     	; 0x502a <log+0x44>
    501e:	21 96       	adiw	r28, 0x01	; 1
    5020:	8f 77       	andi	r24, 0x7F	; 127
    5022:	cb dc       	rcall	.-1642   	; 0x49ba <__addsf3>
    5024:	ec e0       	ldi	r30, 0x0C	; 12
    5026:	f1 e0       	ldi	r31, 0x01	; 1
    5028:	03 c0       	rjmp	.+6      	; 0x5030 <log+0x4a>
    502a:	c7 dc       	rcall	.-1650   	; 0x49ba <__addsf3>
    502c:	e9 e3       	ldi	r30, 0x39	; 57
    502e:	f1 e0       	ldi	r31, 0x01	; 1
    5030:	73 df       	rcall	.-282    	; 0x4f18 <__fp_powser>
    5032:	8b 01       	movw	r16, r22
    5034:	be 01       	movw	r22, r28
    5036:	ec 01       	movw	r28, r24
    5038:	fb 2e       	mov	r15, r27
    503a:	6f 57       	subi	r22, 0x7F	; 127
    503c:	71 09       	sbc	r23, r1
    503e:	75 95       	asr	r23
    5040:	77 1f       	adc	r23, r23
    5042:	88 0b       	sbc	r24, r24
    5044:	99 0b       	sbc	r25, r25
    5046:	b3 dd       	rcall	.-1178   	; 0x4bae <__floatsisf>
    5048:	28 e1       	ldi	r18, 0x18	; 24
    504a:	32 e7       	ldi	r19, 0x72	; 114
    504c:	41 e3       	ldi	r20, 0x31	; 49
    504e:	5f e3       	ldi	r21, 0x3F	; 63
    5050:	46 de       	rcall	.-884    	; 0x4cde <__mulsf3x>
    5052:	af 2d       	mov	r26, r15
    5054:	98 01       	movw	r18, r16
    5056:	ae 01       	movw	r20, r28
    5058:	ff 90       	pop	r15
    505a:	0f 91       	pop	r16
    505c:	1f 91       	pop	r17
    505e:	cf 91       	pop	r28
    5060:	df 91       	pop	r29
    5062:	bc dc       	rcall	.-1672   	; 0x49dc <__addsf3x>
    5064:	f6 cd       	rjmp	.-1044   	; 0x4c52 <__fp_round>

00005066 <modf>:
    5066:	fa 01       	movw	r30, r20
    5068:	dc 01       	movw	r26, r24
    506a:	aa 0f       	add	r26, r26
    506c:	bb 1f       	adc	r27, r27
    506e:	9b 01       	movw	r18, r22
    5070:	ac 01       	movw	r20, r24
    5072:	bf 57       	subi	r27, 0x7F	; 127
    5074:	28 f4       	brcc	.+10     	; 0x5080 <modf+0x1a>
    5076:	22 27       	eor	r18, r18
    5078:	33 27       	eor	r19, r19
    507a:	44 27       	eor	r20, r20
    507c:	50 78       	andi	r21, 0x80	; 128
    507e:	1f c0       	rjmp	.+62     	; 0x50be <modf+0x58>
    5080:	b7 51       	subi	r27, 0x17	; 23
    5082:	88 f4       	brcc	.+34     	; 0x50a6 <modf+0x40>
    5084:	ab 2f       	mov	r26, r27
    5086:	00 24       	eor	r0, r0
    5088:	46 95       	lsr	r20
    508a:	37 95       	ror	r19
    508c:	27 95       	ror	r18
    508e:	01 1c       	adc	r0, r1
    5090:	a3 95       	inc	r26
    5092:	d2 f3       	brmi	.-12     	; 0x5088 <modf+0x22>
    5094:	00 20       	and	r0, r0
    5096:	69 f0       	breq	.+26     	; 0x50b2 <modf+0x4c>
    5098:	22 0f       	add	r18, r18
    509a:	33 1f       	adc	r19, r19
    509c:	44 1f       	adc	r20, r20
    509e:	b3 95       	inc	r27
    50a0:	da f3       	brmi	.-10     	; 0x5098 <modf+0x32>
    50a2:	0d d0       	rcall	.+26     	; 0x50be <modf+0x58>
    50a4:	89 cc       	rjmp	.-1774   	; 0x49b8 <__subsf3>
    50a6:	61 30       	cpi	r22, 0x01	; 1
    50a8:	71 05       	cpc	r23, r1
    50aa:	a0 e8       	ldi	r26, 0x80	; 128
    50ac:	8a 07       	cpc	r24, r26
    50ae:	b9 46       	sbci	r27, 0x69	; 105
    50b0:	30 f4       	brcc	.+12     	; 0x50be <modf+0x58>
    50b2:	9b 01       	movw	r18, r22
    50b4:	ac 01       	movw	r20, r24
    50b6:	66 27       	eor	r22, r22
    50b8:	77 27       	eor	r23, r23
    50ba:	88 27       	eor	r24, r24
    50bc:	90 78       	andi	r25, 0x80	; 128
    50be:	30 96       	adiw	r30, 0x00	; 0
    50c0:	21 f0       	breq	.+8      	; 0x50ca <modf+0x64>
    50c2:	20 83       	st	Z, r18
    50c4:	31 83       	std	Z+1, r19	; 0x01
    50c6:	42 83       	std	Z+2, r20	; 0x02
    50c8:	53 83       	std	Z+3, r21	; 0x03
    50ca:	08 95       	ret

000050cc <__udivmodsi4>:
    50cc:	a1 e2       	ldi	r26, 0x21	; 33
    50ce:	1a 2e       	mov	r1, r26
    50d0:	aa 1b       	sub	r26, r26
    50d2:	bb 1b       	sub	r27, r27
    50d4:	fd 01       	movw	r30, r26
    50d6:	0d c0       	rjmp	.+26     	; 0x50f2 <__udivmodsi4_ep>

000050d8 <__udivmodsi4_loop>:
    50d8:	aa 1f       	adc	r26, r26
    50da:	bb 1f       	adc	r27, r27
    50dc:	ee 1f       	adc	r30, r30
    50de:	ff 1f       	adc	r31, r31
    50e0:	a2 17       	cp	r26, r18
    50e2:	b3 07       	cpc	r27, r19
    50e4:	e4 07       	cpc	r30, r20
    50e6:	f5 07       	cpc	r31, r21
    50e8:	20 f0       	brcs	.+8      	; 0x50f2 <__udivmodsi4_ep>
    50ea:	a2 1b       	sub	r26, r18
    50ec:	b3 0b       	sbc	r27, r19
    50ee:	e4 0b       	sbc	r30, r20
    50f0:	f5 0b       	sbc	r31, r21

000050f2 <__udivmodsi4_ep>:
    50f2:	66 1f       	adc	r22, r22
    50f4:	77 1f       	adc	r23, r23
    50f6:	88 1f       	adc	r24, r24
    50f8:	99 1f       	adc	r25, r25
    50fa:	1a 94       	dec	r1
    50fc:	69 f7       	brne	.-38     	; 0x50d8 <__udivmodsi4_loop>
    50fe:	60 95       	com	r22
    5100:	70 95       	com	r23
    5102:	80 95       	com	r24
    5104:	90 95       	com	r25
    5106:	9b 01       	movw	r18, r22
    5108:	ac 01       	movw	r20, r24
    510a:	bd 01       	movw	r22, r26
    510c:	cf 01       	movw	r24, r30
    510e:	08 95       	ret

00005110 <memcpy>:
    5110:	fb 01       	movw	r30, r22
    5112:	dc 01       	movw	r26, r24
    5114:	02 c0       	rjmp	.+4      	; 0x511a <memcpy+0xa>
    5116:	01 90       	ld	r0, Z+
    5118:	0d 92       	st	X+, r0
    511a:	41 50       	subi	r20, 0x01	; 1
    511c:	50 40       	sbci	r21, 0x00	; 0
    511e:	d8 f7       	brcc	.-10     	; 0x5116 <memcpy+0x6>
    5120:	08 95       	ret

00005122 <memset>:
    5122:	dc 01       	movw	r26, r24
    5124:	01 c0       	rjmp	.+2      	; 0x5128 <memset+0x6>
    5126:	6d 93       	st	X+, r22
    5128:	41 50       	subi	r20, 0x01	; 1
    512a:	50 40       	sbci	r21, 0x00	; 0
    512c:	e0 f7       	brcc	.-8      	; 0x5126 <memset+0x4>
    512e:	08 95       	ret

00005130 <_exit>:
    5130:	f8 94       	cli

00005132 <__stop_program>:
    5132:	ff cf       	rjmp	.-2      	; 0x5132 <__stop_program>
