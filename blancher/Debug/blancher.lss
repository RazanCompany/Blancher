
blancher.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000080  00800200  0000324c  000032e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000324c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000956  00800280  00800280  00003360  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00003360  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003390  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000768  00000000  00000000  000033d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000089e5  00000000  00000000  00003b38  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000021dc  00000000  00000000  0000c51d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00006a43  00000000  00000000  0000e6f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001734  00000000  00000000  0001513c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00016ef4  00000000  00000000  00016870  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00008d2d  00000000  00000000  0002d764  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000007b8  00000000  00000000  00036491  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00006067  00000000  00000000  00036c49  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
       2:	00 00       	nop
       4:	90 c0       	rjmp	.+288    	; 0x126 <__bad_interrupt>
       6:	00 00       	nop
       8:	8e c0       	rjmp	.+284    	; 0x126 <__bad_interrupt>
       a:	00 00       	nop
       c:	8c c0       	rjmp	.+280    	; 0x126 <__bad_interrupt>
       e:	00 00       	nop
      10:	8a c0       	rjmp	.+276    	; 0x126 <__bad_interrupt>
      12:	00 00       	nop
      14:	88 c0       	rjmp	.+272    	; 0x126 <__bad_interrupt>
      16:	00 00       	nop
      18:	86 c0       	rjmp	.+268    	; 0x126 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	84 c0       	rjmp	.+264    	; 0x126 <__bad_interrupt>
      1e:	00 00       	nop
      20:	82 c0       	rjmp	.+260    	; 0x126 <__bad_interrupt>
      22:	00 00       	nop
      24:	80 c0       	rjmp	.+256    	; 0x126 <__bad_interrupt>
      26:	00 00       	nop
      28:	7e c0       	rjmp	.+252    	; 0x126 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7c c0       	rjmp	.+248    	; 0x126 <__bad_interrupt>
      2e:	00 00       	nop
      30:	0c 94 ab 11 	jmp	0x2356	; 0x2356 <__vector_12>
      34:	0c 94 cd 18 	jmp	0x319a	; 0x319a <__vector_13>
      38:	76 c0       	rjmp	.+236    	; 0x126 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	74 c0       	rjmp	.+232    	; 0x126 <__bad_interrupt>
      3e:	00 00       	nop
      40:	72 c0       	rjmp	.+228    	; 0x126 <__bad_interrupt>
      42:	00 00       	nop
      44:	71 c0       	rjmp	.+226    	; 0x128 <__vector_17>
      46:	00 00       	nop
      48:	6e c0       	rjmp	.+220    	; 0x126 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6c c0       	rjmp	.+216    	; 0x126 <__bad_interrupt>
      4e:	00 00       	nop
      50:	6a c0       	rjmp	.+212    	; 0x126 <__bad_interrupt>
      52:	00 00       	nop
      54:	68 c0       	rjmp	.+208    	; 0x126 <__bad_interrupt>
      56:	00 00       	nop
      58:	66 c0       	rjmp	.+204    	; 0x126 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	64 c0       	rjmp	.+200    	; 0x126 <__bad_interrupt>
      5e:	00 00       	nop
      60:	62 c0       	rjmp	.+196    	; 0x126 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 b1 0b 	jmp	0x1762	; 0x1762 <__vector_25>
      68:	0c 94 ea 0b 	jmp	0x17d4	; 0x17d4 <__vector_26>
      6c:	5c c0       	rjmp	.+184    	; 0x126 <__bad_interrupt>
      6e:	00 00       	nop
      70:	5a c0       	rjmp	.+180    	; 0x126 <__bad_interrupt>
      72:	00 00       	nop
      74:	0c 94 4d 0b 	jmp	0x169a	; 0x169a <__vector_29>
      78:	56 c0       	rjmp	.+172    	; 0x126 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	54 c0       	rjmp	.+168    	; 0x126 <__bad_interrupt>
      7e:	00 00       	nop
      80:	b9 c0       	rjmp	.+370    	; 0x1f4 <__vector_32>
      82:	00 00       	nop
      84:	50 c0       	rjmp	.+160    	; 0x126 <__bad_interrupt>
      86:	00 00       	nop
      88:	4e c0       	rjmp	.+156    	; 0x126 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	4c c0       	rjmp	.+152    	; 0x126 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 b7 0c 	jmp	0x196e	; 0x196e <__vector_36>
      94:	0c 94 f0 0c 	jmp	0x19e0	; 0x19e0 <__vector_37>
      98:	46 c0       	rjmp	.+140    	; 0x126 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	44 c0       	rjmp	.+136    	; 0x126 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	42 c0       	rjmp	.+132    	; 0x126 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	40 c0       	rjmp	.+128    	; 0x126 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	0b c1       	rjmp	.+534    	; 0x2c0 <__vector_42>
      aa:	00 00       	nop
      ac:	3c c0       	rjmp	.+120    	; 0x126 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	3a c0       	rjmp	.+116    	; 0x126 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	38 c0       	rjmp	.+112    	; 0x126 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	36 c0       	rjmp	.+108    	; 0x126 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	67 c1       	rjmp	.+718    	; 0x38c <__vector_47>
      be:	00 00       	nop
      c0:	32 c0       	rjmp	.+100    	; 0x126 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	30 c0       	rjmp	.+96     	; 0x126 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	2e c0       	rjmp	.+92     	; 0x126 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 c6 0d 	jmp	0x1b8c	; 0x1b8c <__vector_51>
      d0:	0c 94 ff 0d 	jmp	0x1bfe	; 0x1bfe <__vector_52>
      d4:	28 c0       	rjmp	.+80     	; 0x126 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 d2 0e 	jmp	0x1da4	; 0x1da4 <__vector_54>
      dc:	0c 94 0b 0f 	jmp	0x1e16	; 0x1e16 <__vector_55>
      e0:	22 c0       	rjmp	.+68     	; 0x126 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	ec e4       	ldi	r30, 0x4C	; 76
      fc:	f2 e3       	ldi	r31, 0x32	; 50
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a0 38       	cpi	r26, 0x80	; 128
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	2b e0       	ldi	r18, 0x0B	; 11
     110:	a0 e8       	ldi	r26, 0x80	; 128
     112:	b2 e0       	ldi	r27, 0x02	; 2
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	a6 3d       	cpi	r26, 0xD6	; 214
     11a:	b2 07       	cpc	r27, r18
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	0e 94 a9 0a 	call	0x1552	; 0x1552 <main>
     122:	0c 94 24 19 	jmp	0x3248	; 0x3248 <_exit>

00000126 <__bad_interrupt>:
     126:	6c cf       	rjmp	.-296    	; 0x0 <__vectors>

00000128 <__vector_17>:
     128:	1f 92       	push	r1
     12a:	0f 92       	push	r0
     12c:	0f b6       	in	r0, 0x3f	; 63
     12e:	0f 92       	push	r0
     130:	11 24       	eor	r1, r1
     132:	0b b6       	in	r0, 0x3b	; 59
     134:	0f 92       	push	r0
     136:	cf 92       	push	r12
     138:	df 92       	push	r13
     13a:	ef 92       	push	r14
     13c:	ff 92       	push	r15
     13e:	0f 93       	push	r16
     140:	1f 93       	push	r17
     142:	2f 93       	push	r18
     144:	3f 93       	push	r19
     146:	4f 93       	push	r20
     148:	5f 93       	push	r21
     14a:	6f 93       	push	r22
     14c:	7f 93       	push	r23
     14e:	8f 93       	push	r24
     150:	9f 93       	push	r25
     152:	af 93       	push	r26
     154:	bf 93       	push	r27
     156:	ef 93       	push	r30
     158:	ff 93       	push	r31
     15a:	0e 94 c2 18 	call	0x3184	; 0x3184 <Get_millis>
     15e:	8b 01       	movw	r16, r22
     160:	9c 01       	movw	r18, r24
     162:	60 93 c9 09 	sts	0x09C9, r22	; 0x8009c9 <g_Timer1_new_time>
     166:	70 93 ca 09 	sts	0x09CA, r23	; 0x8009ca <g_Timer1_new_time+0x1>
     16a:	80 93 cb 09 	sts	0x09CB, r24	; 0x8009cb <g_Timer1_new_time+0x2>
     16e:	90 93 cc 09 	sts	0x09CC, r25	; 0x8009cc <g_Timer1_new_time+0x3>
     172:	40 91 a9 09 	lds	r20, 0x09A9	; 0x8009a9 <g_Timer1_old_time>
     176:	50 91 aa 09 	lds	r21, 0x09AA	; 0x8009aa <g_Timer1_old_time+0x1>
     17a:	60 91 ab 09 	lds	r22, 0x09AB	; 0x8009ab <g_Timer1_old_time+0x2>
     17e:	70 91 ac 09 	lds	r23, 0x09AC	; 0x8009ac <g_Timer1_old_time+0x3>
     182:	68 01       	movw	r12, r16
     184:	79 01       	movw	r14, r18
     186:	c4 1a       	sub	r12, r20
     188:	d5 0a       	sbc	r13, r21
     18a:	e6 0a       	sbc	r14, r22
     18c:	f7 0a       	sbc	r15, r23
     18e:	c7 01       	movw	r24, r14
     190:	b6 01       	movw	r22, r12
     192:	c0 92 b1 09 	sts	0x09B1, r12	; 0x8009b1 <g_diff_time>
     196:	d0 92 b2 09 	sts	0x09B2, r13	; 0x8009b2 <g_diff_time+0x1>
     19a:	e0 92 b3 09 	sts	0x09B3, r14	; 0x8009b3 <g_diff_time+0x2>
     19e:	f0 92 b4 09 	sts	0x09B4, r15	; 0x8009b4 <g_diff_time+0x3>
     1a2:	00 93 a9 09 	sts	0x09A9, r16	; 0x8009a9 <g_Timer1_old_time>
     1a6:	10 93 aa 09 	sts	0x09AA, r17	; 0x8009aa <g_Timer1_old_time+0x1>
     1aa:	20 93 ab 09 	sts	0x09AB, r18	; 0x8009ab <g_Timer1_old_time+0x2>
     1ae:	30 93 ac 09 	sts	0x09AC, r19	; 0x8009ac <g_Timer1_old_time+0x3>
     1b2:	e0 91 c3 09 	lds	r30, 0x09C3	; 0x8009c3 <g_timer1_config>
     1b6:	f0 91 c4 09 	lds	r31, 0x09C4	; 0x8009c4 <g_timer1_config+0x1>
     1ba:	02 80       	ldd	r0, Z+2	; 0x02
     1bc:	f3 81       	ldd	r31, Z+3	; 0x03
     1be:	e0 2d       	mov	r30, r0
     1c0:	19 95       	eicall
     1c2:	ff 91       	pop	r31
     1c4:	ef 91       	pop	r30
     1c6:	bf 91       	pop	r27
     1c8:	af 91       	pop	r26
     1ca:	9f 91       	pop	r25
     1cc:	8f 91       	pop	r24
     1ce:	7f 91       	pop	r23
     1d0:	6f 91       	pop	r22
     1d2:	5f 91       	pop	r21
     1d4:	4f 91       	pop	r20
     1d6:	3f 91       	pop	r19
     1d8:	2f 91       	pop	r18
     1da:	1f 91       	pop	r17
     1dc:	0f 91       	pop	r16
     1de:	ff 90       	pop	r15
     1e0:	ef 90       	pop	r14
     1e2:	df 90       	pop	r13
     1e4:	cf 90       	pop	r12
     1e6:	0f 90       	pop	r0
     1e8:	0b be       	out	0x3b, r0	; 59
     1ea:	0f 90       	pop	r0
     1ec:	0f be       	out	0x3f, r0	; 63
     1ee:	0f 90       	pop	r0
     1f0:	1f 90       	pop	r1
     1f2:	18 95       	reti

000001f4 <__vector_32>:
     1f4:	1f 92       	push	r1
     1f6:	0f 92       	push	r0
     1f8:	0f b6       	in	r0, 0x3f	; 63
     1fa:	0f 92       	push	r0
     1fc:	11 24       	eor	r1, r1
     1fe:	0b b6       	in	r0, 0x3b	; 59
     200:	0f 92       	push	r0
     202:	cf 92       	push	r12
     204:	df 92       	push	r13
     206:	ef 92       	push	r14
     208:	ff 92       	push	r15
     20a:	0f 93       	push	r16
     20c:	1f 93       	push	r17
     20e:	2f 93       	push	r18
     210:	3f 93       	push	r19
     212:	4f 93       	push	r20
     214:	5f 93       	push	r21
     216:	6f 93       	push	r22
     218:	7f 93       	push	r23
     21a:	8f 93       	push	r24
     21c:	9f 93       	push	r25
     21e:	af 93       	push	r26
     220:	bf 93       	push	r27
     222:	ef 93       	push	r30
     224:	ff 93       	push	r31
     226:	0e 94 c2 18 	call	0x3184	; 0x3184 <Get_millis>
     22a:	8b 01       	movw	r16, r22
     22c:	9c 01       	movw	r18, r24
     22e:	60 93 bf 09 	sts	0x09BF, r22	; 0x8009bf <g_Timer3_new_time>
     232:	70 93 c0 09 	sts	0x09C0, r23	; 0x8009c0 <g_Timer3_new_time+0x1>
     236:	80 93 c1 09 	sts	0x09C1, r24	; 0x8009c1 <g_Timer3_new_time+0x2>
     23a:	90 93 c2 09 	sts	0x09C2, r25	; 0x8009c2 <g_Timer3_new_time+0x3>
     23e:	40 91 a3 09 	lds	r20, 0x09A3	; 0x8009a3 <g_Timer3_old_time>
     242:	50 91 a4 09 	lds	r21, 0x09A4	; 0x8009a4 <g_Timer3_old_time+0x1>
     246:	60 91 a5 09 	lds	r22, 0x09A5	; 0x8009a5 <g_Timer3_old_time+0x2>
     24a:	70 91 a6 09 	lds	r23, 0x09A6	; 0x8009a6 <g_Timer3_old_time+0x3>
     24e:	68 01       	movw	r12, r16
     250:	79 01       	movw	r14, r18
     252:	c4 1a       	sub	r12, r20
     254:	d5 0a       	sbc	r13, r21
     256:	e6 0a       	sbc	r14, r22
     258:	f7 0a       	sbc	r15, r23
     25a:	c7 01       	movw	r24, r14
     25c:	b6 01       	movw	r22, r12
     25e:	c0 92 b1 09 	sts	0x09B1, r12	; 0x8009b1 <g_diff_time>
     262:	d0 92 b2 09 	sts	0x09B2, r13	; 0x8009b2 <g_diff_time+0x1>
     266:	e0 92 b3 09 	sts	0x09B3, r14	; 0x8009b3 <g_diff_time+0x2>
     26a:	f0 92 b4 09 	sts	0x09B4, r15	; 0x8009b4 <g_diff_time+0x3>
     26e:	00 93 a3 09 	sts	0x09A3, r16	; 0x8009a3 <g_Timer3_old_time>
     272:	10 93 a4 09 	sts	0x09A4, r17	; 0x8009a4 <g_Timer3_old_time+0x1>
     276:	20 93 a5 09 	sts	0x09A5, r18	; 0x8009a5 <g_Timer3_old_time+0x2>
     27a:	30 93 a6 09 	sts	0x09A6, r19	; 0x8009a6 <g_Timer3_old_time+0x3>
     27e:	e0 91 a7 09 	lds	r30, 0x09A7	; 0x8009a7 <g_timer3_config>
     282:	f0 91 a8 09 	lds	r31, 0x09A8	; 0x8009a8 <g_timer3_config+0x1>
     286:	02 80       	ldd	r0, Z+2	; 0x02
     288:	f3 81       	ldd	r31, Z+3	; 0x03
     28a:	e0 2d       	mov	r30, r0
     28c:	19 95       	eicall
     28e:	ff 91       	pop	r31
     290:	ef 91       	pop	r30
     292:	bf 91       	pop	r27
     294:	af 91       	pop	r26
     296:	9f 91       	pop	r25
     298:	8f 91       	pop	r24
     29a:	7f 91       	pop	r23
     29c:	6f 91       	pop	r22
     29e:	5f 91       	pop	r21
     2a0:	4f 91       	pop	r20
     2a2:	3f 91       	pop	r19
     2a4:	2f 91       	pop	r18
     2a6:	1f 91       	pop	r17
     2a8:	0f 91       	pop	r16
     2aa:	ff 90       	pop	r15
     2ac:	ef 90       	pop	r14
     2ae:	df 90       	pop	r13
     2b0:	cf 90       	pop	r12
     2b2:	0f 90       	pop	r0
     2b4:	0b be       	out	0x3b, r0	; 59
     2b6:	0f 90       	pop	r0
     2b8:	0f be       	out	0x3f, r0	; 63
     2ba:	0f 90       	pop	r0
     2bc:	1f 90       	pop	r1
     2be:	18 95       	reti

000002c0 <__vector_42>:
     2c0:	1f 92       	push	r1
     2c2:	0f 92       	push	r0
     2c4:	0f b6       	in	r0, 0x3f	; 63
     2c6:	0f 92       	push	r0
     2c8:	11 24       	eor	r1, r1
     2ca:	0b b6       	in	r0, 0x3b	; 59
     2cc:	0f 92       	push	r0
     2ce:	cf 92       	push	r12
     2d0:	df 92       	push	r13
     2d2:	ef 92       	push	r14
     2d4:	ff 92       	push	r15
     2d6:	0f 93       	push	r16
     2d8:	1f 93       	push	r17
     2da:	2f 93       	push	r18
     2dc:	3f 93       	push	r19
     2de:	4f 93       	push	r20
     2e0:	5f 93       	push	r21
     2e2:	6f 93       	push	r22
     2e4:	7f 93       	push	r23
     2e6:	8f 93       	push	r24
     2e8:	9f 93       	push	r25
     2ea:	af 93       	push	r26
     2ec:	bf 93       	push	r27
     2ee:	ef 93       	push	r30
     2f0:	ff 93       	push	r31
     2f2:	0e 94 c2 18 	call	0x3184	; 0x3184 <Get_millis>
     2f6:	8b 01       	movw	r16, r22
     2f8:	9c 01       	movw	r18, r24
     2fa:	60 93 b5 09 	sts	0x09B5, r22	; 0x8009b5 <g_Timer4_new_time>
     2fe:	70 93 b6 09 	sts	0x09B6, r23	; 0x8009b6 <g_Timer4_new_time+0x1>
     302:	80 93 b7 09 	sts	0x09B7, r24	; 0x8009b7 <g_Timer4_new_time+0x2>
     306:	90 93 b8 09 	sts	0x09B8, r25	; 0x8009b8 <g_Timer4_new_time+0x3>
     30a:	40 91 c5 09 	lds	r20, 0x09C5	; 0x8009c5 <g_Timer4_old_time>
     30e:	50 91 c6 09 	lds	r21, 0x09C6	; 0x8009c6 <g_Timer4_old_time+0x1>
     312:	60 91 c7 09 	lds	r22, 0x09C7	; 0x8009c7 <g_Timer4_old_time+0x2>
     316:	70 91 c8 09 	lds	r23, 0x09C8	; 0x8009c8 <g_Timer4_old_time+0x3>
     31a:	68 01       	movw	r12, r16
     31c:	79 01       	movw	r14, r18
     31e:	c4 1a       	sub	r12, r20
     320:	d5 0a       	sbc	r13, r21
     322:	e6 0a       	sbc	r14, r22
     324:	f7 0a       	sbc	r15, r23
     326:	c7 01       	movw	r24, r14
     328:	b6 01       	movw	r22, r12
     32a:	c0 92 b1 09 	sts	0x09B1, r12	; 0x8009b1 <g_diff_time>
     32e:	d0 92 b2 09 	sts	0x09B2, r13	; 0x8009b2 <g_diff_time+0x1>
     332:	e0 92 b3 09 	sts	0x09B3, r14	; 0x8009b3 <g_diff_time+0x2>
     336:	f0 92 b4 09 	sts	0x09B4, r15	; 0x8009b4 <g_diff_time+0x3>
     33a:	00 93 c5 09 	sts	0x09C5, r16	; 0x8009c5 <g_Timer4_old_time>
     33e:	10 93 c6 09 	sts	0x09C6, r17	; 0x8009c6 <g_Timer4_old_time+0x1>
     342:	20 93 c7 09 	sts	0x09C7, r18	; 0x8009c7 <g_Timer4_old_time+0x2>
     346:	30 93 c8 09 	sts	0x09C8, r19	; 0x8009c8 <g_Timer4_old_time+0x3>
     34a:	e0 91 b9 09 	lds	r30, 0x09B9	; 0x8009b9 <g_timer4_config>
     34e:	f0 91 ba 09 	lds	r31, 0x09BA	; 0x8009ba <g_timer4_config+0x1>
     352:	02 80       	ldd	r0, Z+2	; 0x02
     354:	f3 81       	ldd	r31, Z+3	; 0x03
     356:	e0 2d       	mov	r30, r0
     358:	19 95       	eicall
     35a:	ff 91       	pop	r31
     35c:	ef 91       	pop	r30
     35e:	bf 91       	pop	r27
     360:	af 91       	pop	r26
     362:	9f 91       	pop	r25
     364:	8f 91       	pop	r24
     366:	7f 91       	pop	r23
     368:	6f 91       	pop	r22
     36a:	5f 91       	pop	r21
     36c:	4f 91       	pop	r20
     36e:	3f 91       	pop	r19
     370:	2f 91       	pop	r18
     372:	1f 91       	pop	r17
     374:	0f 91       	pop	r16
     376:	ff 90       	pop	r15
     378:	ef 90       	pop	r14
     37a:	df 90       	pop	r13
     37c:	cf 90       	pop	r12
     37e:	0f 90       	pop	r0
     380:	0b be       	out	0x3b, r0	; 59
     382:	0f 90       	pop	r0
     384:	0f be       	out	0x3f, r0	; 63
     386:	0f 90       	pop	r0
     388:	1f 90       	pop	r1
     38a:	18 95       	reti

0000038c <__vector_47>:
     38c:	1f 92       	push	r1
     38e:	0f 92       	push	r0
     390:	0f b6       	in	r0, 0x3f	; 63
     392:	0f 92       	push	r0
     394:	11 24       	eor	r1, r1
     396:	0b b6       	in	r0, 0x3b	; 59
     398:	0f 92       	push	r0
     39a:	cf 92       	push	r12
     39c:	df 92       	push	r13
     39e:	ef 92       	push	r14
     3a0:	ff 92       	push	r15
     3a2:	0f 93       	push	r16
     3a4:	1f 93       	push	r17
     3a6:	2f 93       	push	r18
     3a8:	3f 93       	push	r19
     3aa:	4f 93       	push	r20
     3ac:	5f 93       	push	r21
     3ae:	6f 93       	push	r22
     3b0:	7f 93       	push	r23
     3b2:	8f 93       	push	r24
     3b4:	9f 93       	push	r25
     3b6:	af 93       	push	r26
     3b8:	bf 93       	push	r27
     3ba:	ef 93       	push	r30
     3bc:	ff 93       	push	r31
     3be:	95 b1       	in	r25, 0x05	; 5
     3c0:	81 e0       	ldi	r24, 0x01	; 1
     3c2:	89 27       	eor	r24, r25
     3c4:	85 b9       	out	0x05, r24	; 5
     3c6:	0e 94 c2 18 	call	0x3184	; 0x3184 <Get_millis>
     3ca:	8b 01       	movw	r16, r22
     3cc:	9c 01       	movw	r18, r24
     3ce:	60 93 bb 09 	sts	0x09BB, r22	; 0x8009bb <g_Timer5_new_time>
     3d2:	70 93 bc 09 	sts	0x09BC, r23	; 0x8009bc <g_Timer5_new_time+0x1>
     3d6:	80 93 bd 09 	sts	0x09BD, r24	; 0x8009bd <g_Timer5_new_time+0x2>
     3da:	90 93 be 09 	sts	0x09BE, r25	; 0x8009be <g_Timer5_new_time+0x3>
     3de:	40 91 ad 09 	lds	r20, 0x09AD	; 0x8009ad <g_Timer5_old_time>
     3e2:	50 91 ae 09 	lds	r21, 0x09AE	; 0x8009ae <g_Timer5_old_time+0x1>
     3e6:	60 91 af 09 	lds	r22, 0x09AF	; 0x8009af <g_Timer5_old_time+0x2>
     3ea:	70 91 b0 09 	lds	r23, 0x09B0	; 0x8009b0 <g_Timer5_old_time+0x3>
     3ee:	68 01       	movw	r12, r16
     3f0:	79 01       	movw	r14, r18
     3f2:	c4 1a       	sub	r12, r20
     3f4:	d5 0a       	sbc	r13, r21
     3f6:	e6 0a       	sbc	r14, r22
     3f8:	f7 0a       	sbc	r15, r23
     3fa:	c7 01       	movw	r24, r14
     3fc:	b6 01       	movw	r22, r12
     3fe:	c0 92 b1 09 	sts	0x09B1, r12	; 0x8009b1 <g_diff_time>
     402:	d0 92 b2 09 	sts	0x09B2, r13	; 0x8009b2 <g_diff_time+0x1>
     406:	e0 92 b3 09 	sts	0x09B3, r14	; 0x8009b3 <g_diff_time+0x2>
     40a:	f0 92 b4 09 	sts	0x09B4, r15	; 0x8009b4 <g_diff_time+0x3>
     40e:	00 93 ad 09 	sts	0x09AD, r16	; 0x8009ad <g_Timer5_old_time>
     412:	10 93 ae 09 	sts	0x09AE, r17	; 0x8009ae <g_Timer5_old_time+0x1>
     416:	20 93 af 09 	sts	0x09AF, r18	; 0x8009af <g_Timer5_old_time+0x2>
     41a:	30 93 b0 09 	sts	0x09B0, r19	; 0x8009b0 <g_Timer5_old_time+0x3>
     41e:	e0 91 cd 09 	lds	r30, 0x09CD	; 0x8009cd <g_timer5_config>
     422:	f0 91 ce 09 	lds	r31, 0x09CE	; 0x8009ce <g_timer5_config+0x1>
     426:	02 80       	ldd	r0, Z+2	; 0x02
     428:	f3 81       	ldd	r31, Z+3	; 0x03
     42a:	e0 2d       	mov	r30, r0
     42c:	19 95       	eicall
     42e:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <__TEXT_REGION_LENGTH__+0x700124>
     432:	ff 91       	pop	r31
     434:	ef 91       	pop	r30
     436:	bf 91       	pop	r27
     438:	af 91       	pop	r26
     43a:	9f 91       	pop	r25
     43c:	8f 91       	pop	r24
     43e:	7f 91       	pop	r23
     440:	6f 91       	pop	r22
     442:	5f 91       	pop	r21
     444:	4f 91       	pop	r20
     446:	3f 91       	pop	r19
     448:	2f 91       	pop	r18
     44a:	1f 91       	pop	r17
     44c:	0f 91       	pop	r16
     44e:	ff 90       	pop	r15
     450:	ef 90       	pop	r14
     452:	df 90       	pop	r13
     454:	cf 90       	pop	r12
     456:	0f 90       	pop	r0
     458:	0b be       	out	0x3b, r0	; 59
     45a:	0f 90       	pop	r0
     45c:	0f be       	out	0x3f, r0	; 63
     45e:	0f 90       	pop	r0
     460:	1f 90       	pop	r1
     462:	18 95       	reti

00000464 <LCD_pre_transmission>:

// jump to spacific image
void lcd_Jump_to(uint16_t pic_id){ // v
	
		Modbus_Set_transmit_buffer(LCD,0,pic_id);
		Modbus_Our_write_multiple_coils(LCD,LCD_CURRENT_PIC_REG, 1);
     464:	61 e0       	ldi	r22, 0x01	; 1
     466:	80 e0       	ldi	r24, 0x00	; 0
     468:	0c 94 94 0b 	jmp	0x1728	; 0x1728 <Modbus_change_state>
     46c:	08 95       	ret

0000046e <LCD_post_transmission>:
     46e:	60 e0       	ldi	r22, 0x00	; 0
     470:	80 e0       	ldi	r24, 0x00	; 0
     472:	0c 94 94 0b 	jmp	0x1728	; 0x1728 <Modbus_change_state>
     476:	08 95       	ret

00000478 <Lcd_init>:
     478:	e0 e8       	ldi	r30, 0x80	; 128
     47a:	f2 e0       	ldi	r31, 0x02	; 2
     47c:	20 83       	st	Z, r18
     47e:	81 83       	std	Z+1, r24	; 0x01
     480:	42 83       	std	Z+2, r20	; 0x02
     482:	53 83       	std	Z+3, r21	; 0x03
     484:	64 83       	std	Z+4, r22	; 0x04
     486:	75 83       	std	Z+5, r23	; 0x05
     488:	82 e3       	ldi	r24, 0x32	; 50
     48a:	92 e0       	ldi	r25, 0x02	; 2
     48c:	97 83       	std	Z+7, r25	; 0x07
     48e:	86 83       	std	Z+6, r24	; 0x06
     490:	87 e3       	ldi	r24, 0x37	; 55
     492:	92 e0       	ldi	r25, 0x02	; 2
     494:	91 87       	std	Z+9, r25	; 0x09
     496:	80 87       	std	Z+8, r24	; 0x08
     498:	bf 01       	movw	r22, r30
     49a:	80 e0       	ldi	r24, 0x00	; 0
     49c:	9c c6       	rjmp	.+3384   	; 0x11d6 <Modbus_init>
     49e:	08 95       	ret

000004a0 <Lcd_Write>:
     4a0:	cf 93       	push	r28
     4a2:	df 93       	push	r29
     4a4:	ec 01       	movw	r28, r24
     4a6:	ab 01       	movw	r20, r22
     4a8:	60 e0       	ldi	r22, 0x00	; 0
     4aa:	80 e0       	ldi	r24, 0x00	; 0
     4ac:	82 d7       	rcall	.+3844   	; 0x13b2 <Modbus_Set_transmit_buffer>
     4ae:	41 e0       	ldi	r20, 0x01	; 1
     4b0:	50 e0       	ldi	r21, 0x00	; 0
     4b2:	be 01       	movw	r22, r28
     4b4:	80 e0       	ldi	r24, 0x00	; 0
     4b6:	ba d7       	rcall	.+3956   	; 0x142c <Modbus_Write_multiple_registers>
     4b8:	df 91       	pop	r29
     4ba:	cf 91       	pop	r28
     4bc:	08 95       	ret

000004be <lcd_set_buzzer>:
}

// to open buzzer to 2 second pass 200 to this function
void lcd_set_buzzer(uint16_t value){ //v

		Modbus_Set_transmit_buffer(LCD,0,value);
     4be:	ac 01       	movw	r20, r24
     4c0:	60 e0       	ldi	r22, 0x00	; 0
     4c2:	80 e0       	ldi	r24, 0x00	; 0
     4c4:	76 d7       	rcall	.+3820   	; 0x13b2 <Modbus_Set_transmit_buffer>
		Modbus_Write_multiple_coils(LCD,LCD_BUZZER_REG, 1);
     4c6:	41 e0       	ldi	r20, 0x01	; 1
     4c8:	50 e0       	ldi	r21, 0x00	; 0
     4ca:	62 e0       	ldi	r22, 0x02	; 2
     4cc:	70 e0       	ldi	r23, 0x00	; 0
     4ce:	80 e0       	ldi	r24, 0x00	; 0
     4d0:	91 c7       	rjmp	.+3874   	; 0x13f4 <Modbus_Write_multiple_coils>
     4d2:	08 95       	ret

000004d4 <Modbus_mster_transaction>:
		g_mod1_write_address = u16WriteAddress;
		g_mod1_write_qty = u16BitQty;
		return Modbus_mster_transaction(device, OUR_WRITE_MULTIPLE_COILS);
	}
	return INVALID_DEVICE; //error
}
     4d4:	8f 92       	push	r8
     4d6:	9f 92       	push	r9
     4d8:	af 92       	push	r10
     4da:	bf 92       	push	r11
     4dc:	df 92       	push	r13
     4de:	ef 92       	push	r14
     4e0:	ff 92       	push	r15
     4e2:	0f 93       	push	r16
     4e4:	1f 93       	push	r17
     4e6:	cf 93       	push	r28
     4e8:	df 93       	push	r29
     4ea:	cd b7       	in	r28, 0x3d	; 61
     4ec:	de b7       	in	r29, 0x3e	; 62
     4ee:	da 95       	dec	r29
     4f0:	0f b6       	in	r0, 0x3f	; 63
     4f2:	f8 94       	cli
     4f4:	de bf       	out	0x3e, r29	; 62
     4f6:	0f be       	out	0x3f, r0	; 63
     4f8:	cd bf       	out	0x3d, r28	; 61
     4fa:	d6 2e       	mov	r13, r22
     4fc:	81 11       	cpse	r24, r1
     4fe:	00 c3       	rjmp	.+1536   	; 0xb00 <Modbus_mster_transaction+0x62c>
     500:	80 91 c0 04 	lds	r24, 0x04C0	; 0x8004c0 <g_mod0_slave>
     504:	89 83       	std	Y+1, r24	; 0x01
     506:	2f ef       	ldi	r18, 0xFF	; 255
     508:	62 13       	cpse	r22, r18
     50a:	06 c0       	rjmp	.+12     	; 0x518 <Modbus_mster_transaction+0x44>
     50c:	8f e0       	ldi	r24, 0x0F	; 15
     50e:	8a 83       	std	Y+2, r24	; 0x02
     510:	68 94       	set
     512:	bb 24       	eor	r11, r11
     514:	b1 f8       	bld	r11, 1
     516:	32 c0       	rjmp	.+100    	; 0x57c <Modbus_mster_transaction+0xa8>
     518:	6a 83       	std	Y+2, r22	; 0x02
     51a:	81 e0       	ldi	r24, 0x01	; 1
     51c:	68 17       	cp	r22, r24
     51e:	b8 f0       	brcs	.+46     	; 0x54e <Modbus_mster_transaction+0x7a>
     520:	94 e0       	ldi	r25, 0x04	; 4
     522:	96 17       	cp	r25, r22
     524:	18 f4       	brcc	.+6      	; 0x52c <Modbus_mster_transaction+0x58>
     526:	a7 e1       	ldi	r26, 0x17	; 23
     528:	6a 13       	cpse	r22, r26
     52a:	11 c0       	rjmp	.+34     	; 0x54e <Modbus_mster_transaction+0x7a>
     52c:	80 91 be 04 	lds	r24, 0x04BE	; 0x8004be <g_mod0_read_address>
     530:	90 91 bf 04 	lds	r25, 0x04BF	; 0x8004bf <g_mod0_read_address+0x1>
     534:	9b 83       	std	Y+3, r25	; 0x03
     536:	8c 83       	std	Y+4, r24	; 0x04
     538:	80 91 bc 04 	lds	r24, 0x04BC	; 0x8004bc <g_mod0_read_qty>
     53c:	90 91 bd 04 	lds	r25, 0x04BD	; 0x8004bd <g_mod0_read_qty+0x1>
     540:	9d 83       	std	Y+5, r25	; 0x05
     542:	8e 83       	std	Y+6, r24	; 0x06
     544:	0f 2e       	mov	r0, r31
     546:	f6 e0       	ldi	r31, 0x06	; 6
     548:	bf 2e       	mov	r11, r31
     54a:	f0 2d       	mov	r31, r0
     54c:	03 c0       	rjmp	.+6      	; 0x554 <Modbus_mster_transaction+0x80>
     54e:	68 94       	set
     550:	bb 24       	eor	r11, r11
     552:	b1 f8       	bld	r11, 1
     554:	b0 e1       	ldi	r27, 0x10	; 16
     556:	bd 15       	cp	r27, r13
     558:	40 f0       	brcs	.+16     	; 0x56a <Modbus_mster_transaction+0x96>
     55a:	ef e0       	ldi	r30, 0x0F	; 15
     55c:	de 16       	cp	r13, r30
     55e:	70 f4       	brcc	.+28     	; 0x57c <Modbus_mster_transaction+0xa8>
     560:	8b ef       	ldi	r24, 0xFB	; 251
     562:	8d 0d       	add	r24, r13
     564:	82 30       	cpi	r24, 0x02	; 2
     566:	00 f5       	brcc	.+64     	; 0x5a8 <Modbus_mster_transaction+0xd4>
     568:	09 c0       	rjmp	.+18     	; 0x57c <Modbus_mster_transaction+0xa8>
     56a:	f6 e1       	ldi	r31, 0x16	; 22
     56c:	df 16       	cp	r13, r31
     56e:	e0 f0       	brcs	.+56     	; 0x5a8 <Modbus_mster_transaction+0xd4>
     570:	27 e1       	ldi	r18, 0x17	; 23
     572:	2d 15       	cp	r18, r13
     574:	18 f4       	brcc	.+6      	; 0x57c <Modbus_mster_transaction+0xa8>
     576:	8f ef       	ldi	r24, 0xFF	; 255
     578:	d8 12       	cpse	r13, r24
     57a:	16 c0       	rjmp	.+44     	; 0x5a8 <Modbus_mster_transaction+0xd4>
     57c:	90 91 3a 04 	lds	r25, 0x043A	; 0x80043a <g_mod0_write_address>
     580:	80 91 3b 04 	lds	r24, 0x043B	; 0x80043b <g_mod0_write_address+0x1>
     584:	e1 e0       	ldi	r30, 0x01	; 1
     586:	f0 e0       	ldi	r31, 0x00	; 0
     588:	ec 0f       	add	r30, r28
     58a:	fd 1f       	adc	r31, r29
     58c:	eb 0d       	add	r30, r11
     58e:	f1 1d       	adc	r31, r1
     590:	80 83       	st	Z, r24
     592:	81 e0       	ldi	r24, 0x01	; 1
     594:	8b 0d       	add	r24, r11
     596:	e1 e0       	ldi	r30, 0x01	; 1
     598:	f0 e0       	ldi	r31, 0x00	; 0
     59a:	ec 0f       	add	r30, r28
     59c:	fd 1f       	adc	r31, r29
     59e:	e8 0f       	add	r30, r24
     5a0:	f1 1d       	adc	r31, r1
     5a2:	b3 94       	inc	r11
     5a4:	b3 94       	inc	r11
     5a6:	90 83       	st	Z, r25
     5a8:	90 e1       	ldi	r25, 0x10	; 16
     5aa:	d9 16       	cp	r13, r25
     5ac:	09 f4       	brne	.+2      	; 0x5b0 <Modbus_mster_transaction+0xdc>
     5ae:	ad c0       	rjmp	.+346    	; 0x70a <Modbus_mster_transaction+0x236>
     5b0:	9d 15       	cp	r25, r13
     5b2:	58 f0       	brcs	.+22     	; 0x5ca <Modbus_mster_transaction+0xf6>
     5b4:	a6 e0       	ldi	r26, 0x06	; 6
     5b6:	da 16       	cp	r13, r26
     5b8:	61 f1       	breq	.+88     	; 0x612 <Modbus_mster_transaction+0x13e>
     5ba:	bf e0       	ldi	r27, 0x0F	; 15
     5bc:	db 16       	cp	r13, r27
     5be:	09 f4       	brne	.+2      	; 0x5c2 <Modbus_mster_transaction+0xee>
     5c0:	41 c0       	rjmp	.+130    	; 0x644 <Modbus_mster_transaction+0x170>
     5c2:	e5 e0       	ldi	r30, 0x05	; 5
     5c4:	de 12       	cpse	r13, r30
     5c6:	1a c1       	rjmp	.+564    	; 0x7fc <Modbus_mster_transaction+0x328>
     5c8:	0d c0       	rjmp	.+26     	; 0x5e4 <Modbus_mster_transaction+0x110>
     5ca:	f7 e1       	ldi	r31, 0x17	; 23
     5cc:	df 16       	cp	r13, r31
     5ce:	09 f4       	brne	.+2      	; 0x5d2 <Modbus_mster_transaction+0xfe>
     5d0:	9c c0       	rjmp	.+312    	; 0x70a <Modbus_mster_transaction+0x236>
     5d2:	2f ef       	ldi	r18, 0xFF	; 255
     5d4:	d2 16       	cp	r13, r18
     5d6:	09 f4       	brne	.+2      	; 0x5da <Modbus_mster_transaction+0x106>
     5d8:	98 c0       	rjmp	.+304    	; 0x70a <Modbus_mster_transaction+0x236>
     5da:	86 e1       	ldi	r24, 0x16	; 22
     5dc:	d8 16       	cp	r13, r24
     5de:	09 f4       	brne	.+2      	; 0x5e2 <Modbus_mster_transaction+0x10e>
     5e0:	df c0       	rjmp	.+446    	; 0x7a0 <Modbus_mster_transaction+0x2cc>
     5e2:	0c c1       	rjmp	.+536    	; 0x7fc <Modbus_mster_transaction+0x328>
     5e4:	90 91 38 04 	lds	r25, 0x0438	; 0x800438 <g_mod0_write_qty>
     5e8:	80 91 39 04 	lds	r24, 0x0439	; 0x800439 <g_mod0_write_qty+0x1>
     5ec:	e1 e0       	ldi	r30, 0x01	; 1
     5ee:	f0 e0       	ldi	r31, 0x00	; 0
     5f0:	ec 0f       	add	r30, r28
     5f2:	fd 1f       	adc	r31, r29
     5f4:	eb 0d       	add	r30, r11
     5f6:	f1 1d       	adc	r31, r1
     5f8:	80 83       	st	Z, r24
     5fa:	81 e0       	ldi	r24, 0x01	; 1
     5fc:	8b 0d       	add	r24, r11
     5fe:	e1 e0       	ldi	r30, 0x01	; 1
     600:	f0 e0       	ldi	r31, 0x00	; 0
     602:	ec 0f       	add	r30, r28
     604:	fd 1f       	adc	r31, r29
     606:	e8 0f       	add	r30, r24
     608:	f1 1d       	adc	r31, r1
     60a:	b3 94       	inc	r11
     60c:	b3 94       	inc	r11
     60e:	90 83       	st	Z, r25
     610:	f5 c0       	rjmp	.+490    	; 0x7fc <Modbus_mster_transaction+0x328>
     612:	e8 eb       	ldi	r30, 0xB8	; 184
     614:	f3 e0       	ldi	r31, 0x03	; 3
     616:	80 81       	ld	r24, Z
     618:	91 81       	ldd	r25, Z+1	; 0x01
     61a:	a1 e0       	ldi	r26, 0x01	; 1
     61c:	b0 e0       	ldi	r27, 0x00	; 0
     61e:	ac 0f       	add	r26, r28
     620:	bd 1f       	adc	r27, r29
     622:	ab 0d       	add	r26, r11
     624:	b1 1d       	adc	r27, r1
     626:	9c 93       	st	X, r25
     628:	20 81       	ld	r18, Z
     62a:	31 81       	ldd	r19, Z+1	; 0x01
     62c:	81 e0       	ldi	r24, 0x01	; 1
     62e:	8b 0d       	add	r24, r11
     630:	e1 e0       	ldi	r30, 0x01	; 1
     632:	f0 e0       	ldi	r31, 0x00	; 0
     634:	ec 0f       	add	r30, r28
     636:	fd 1f       	adc	r31, r29
     638:	e8 0f       	add	r30, r24
     63a:	f1 1d       	adc	r31, r1
     63c:	b3 94       	inc	r11
     63e:	b3 94       	inc	r11
     640:	20 83       	st	Z, r18
     642:	dc c0       	rjmp	.+440    	; 0x7fc <Modbus_mster_transaction+0x328>
     644:	80 91 38 04 	lds	r24, 0x0438	; 0x800438 <g_mod0_write_qty>
     648:	90 91 39 04 	lds	r25, 0x0439	; 0x800439 <g_mod0_write_qty+0x1>
     64c:	e1 e0       	ldi	r30, 0x01	; 1
     64e:	f0 e0       	ldi	r31, 0x00	; 0
     650:	ec 0f       	add	r30, r28
     652:	fd 1f       	adc	r31, r29
     654:	eb 0d       	add	r30, r11
     656:	f1 1d       	adc	r31, r1
     658:	90 83       	st	Z, r25
     65a:	32 e0       	ldi	r19, 0x02	; 2
     65c:	3b 0d       	add	r19, r11
     65e:	21 e0       	ldi	r18, 0x01	; 1
     660:	2b 0d       	add	r18, r11
     662:	e1 e0       	ldi	r30, 0x01	; 1
     664:	f0 e0       	ldi	r31, 0x00	; 0
     666:	ec 0f       	add	r30, r28
     668:	fd 1f       	adc	r31, r29
     66a:	e2 0f       	add	r30, r18
     66c:	f1 1d       	adc	r31, r1
     66e:	80 83       	st	Z, r24
     670:	ac 01       	movw	r20, r24
     672:	47 70       	andi	r20, 0x07	; 7
     674:	55 27       	eor	r21, r21
     676:	45 2b       	or	r20, r21
     678:	49 f0       	breq	.+18     	; 0x68c <Modbus_mster_transaction+0x1b8>
     67a:	96 95       	lsr	r25
     67c:	87 95       	ror	r24
     67e:	96 95       	lsr	r25
     680:	87 95       	ror	r24
     682:	96 95       	lsr	r25
     684:	87 95       	ror	r24
     686:	21 e0       	ldi	r18, 0x01	; 1
     688:	28 0f       	add	r18, r24
     68a:	07 c0       	rjmp	.+14     	; 0x69a <Modbus_mster_transaction+0x1c6>
     68c:	96 95       	lsr	r25
     68e:	87 95       	ror	r24
     690:	96 95       	lsr	r25
     692:	87 95       	ror	r24
     694:	96 95       	lsr	r25
     696:	87 95       	ror	r24
     698:	28 2f       	mov	r18, r24
     69a:	93 e0       	ldi	r25, 0x03	; 3
     69c:	b9 0e       	add	r11, r25
     69e:	fe 01       	movw	r30, r28
     6a0:	e3 0f       	add	r30, r19
     6a2:	f1 1d       	adc	r31, r1
     6a4:	21 83       	std	Z+1, r18	; 0x01
     6a6:	22 23       	and	r18, r18
     6a8:	09 f4       	brne	.+2      	; 0x6ac <Modbus_mster_transaction+0x1d8>
     6aa:	a8 c0       	rjmp	.+336    	; 0x7fc <Modbus_mster_transaction+0x328>
     6ac:	80 e0       	ldi	r24, 0x00	; 0
     6ae:	98 2f       	mov	r25, r24
     6b0:	91 70       	andi	r25, 0x01	; 1
     6b2:	80 ff       	sbrs	r24, 0
     6b4:	03 c0       	rjmp	.+6      	; 0x6bc <Modbus_mster_transaction+0x1e8>
     6b6:	91 30       	cpi	r25, 0x01	; 1
     6b8:	99 f0       	breq	.+38     	; 0x6e0 <Modbus_mster_transaction+0x20c>
     6ba:	23 c0       	rjmp	.+70     	; 0x702 <Modbus_mster_transaction+0x22e>
     6bc:	e8 2f       	mov	r30, r24
     6be:	e6 95       	lsr	r30
     6c0:	f0 e0       	ldi	r31, 0x00	; 0
     6c2:	ee 0f       	add	r30, r30
     6c4:	ff 1f       	adc	r31, r31
     6c6:	e8 54       	subi	r30, 0x48	; 72
     6c8:	fc 4f       	sbci	r31, 0xFC	; 252
     6ca:	40 81       	ld	r20, Z
     6cc:	51 81       	ldd	r21, Z+1	; 0x01
     6ce:	e1 e0       	ldi	r30, 0x01	; 1
     6d0:	f0 e0       	ldi	r31, 0x00	; 0
     6d2:	ec 0f       	add	r30, r28
     6d4:	fd 1f       	adc	r31, r29
     6d6:	eb 0d       	add	r30, r11
     6d8:	f1 1d       	adc	r31, r1
     6da:	40 83       	st	Z, r20
     6dc:	b3 94       	inc	r11
     6de:	11 c0       	rjmp	.+34     	; 0x702 <Modbus_mster_transaction+0x22e>
     6e0:	e8 2f       	mov	r30, r24
     6e2:	e6 95       	lsr	r30
     6e4:	f0 e0       	ldi	r31, 0x00	; 0
     6e6:	ee 0f       	add	r30, r30
     6e8:	ff 1f       	adc	r31, r31
     6ea:	e8 54       	subi	r30, 0x48	; 72
     6ec:	fc 4f       	sbci	r31, 0xFC	; 252
     6ee:	40 81       	ld	r20, Z
     6f0:	51 81       	ldd	r21, Z+1	; 0x01
     6f2:	e1 e0       	ldi	r30, 0x01	; 1
     6f4:	f0 e0       	ldi	r31, 0x00	; 0
     6f6:	ec 0f       	add	r30, r28
     6f8:	fd 1f       	adc	r31, r29
     6fa:	eb 0d       	add	r30, r11
     6fc:	f1 1d       	adc	r31, r1
     6fe:	50 83       	st	Z, r21
     700:	b3 94       	inc	r11
     702:	8f 5f       	subi	r24, 0xFF	; 255
     704:	28 13       	cpse	r18, r24
     706:	d3 cf       	rjmp	.-90     	; 0x6ae <Modbus_mster_transaction+0x1da>
     708:	79 c0       	rjmp	.+242    	; 0x7fc <Modbus_mster_transaction+0x328>
     70a:	60 91 38 04 	lds	r22, 0x0438	; 0x800438 <g_mod0_write_qty>
     70e:	70 91 39 04 	lds	r23, 0x0439	; 0x800439 <g_mod0_write_qty+0x1>
     712:	e1 e0       	ldi	r30, 0x01	; 1
     714:	f0 e0       	ldi	r31, 0x00	; 0
     716:	ec 0f       	add	r30, r28
     718:	fd 1f       	adc	r31, r29
     71a:	eb 0d       	add	r30, r11
     71c:	f1 1d       	adc	r31, r1
     71e:	70 83       	st	Z, r23
     720:	81 e0       	ldi	r24, 0x01	; 1
     722:	8b 0d       	add	r24, r11
     724:	e1 e0       	ldi	r30, 0x01	; 1
     726:	f0 e0       	ldi	r31, 0x00	; 0
     728:	ec 0f       	add	r30, r28
     72a:	fd 1f       	adc	r31, r29
     72c:	e8 0f       	add	r30, r24
     72e:	f1 1d       	adc	r31, r1
     730:	60 83       	st	Z, r22
     732:	82 e0       	ldi	r24, 0x02	; 2
     734:	8b 0d       	add	r24, r11
     736:	e1 e0       	ldi	r30, 0x01	; 1
     738:	f0 e0       	ldi	r31, 0x00	; 0
     73a:	ec 0f       	add	r30, r28
     73c:	fd 1f       	adc	r31, r29
     73e:	e8 0f       	add	r30, r24
     740:	f1 1d       	adc	r31, r1
     742:	a3 e0       	ldi	r26, 0x03	; 3
     744:	ba 0e       	add	r11, r26
     746:	86 2f       	mov	r24, r22
     748:	88 0f       	add	r24, r24
     74a:	80 83       	st	Z, r24
     74c:	77 27       	eor	r23, r23
     74e:	16 16       	cp	r1, r22
     750:	17 06       	cpc	r1, r23
     752:	0c f0       	brlt	.+2      	; 0x756 <Modbus_mster_transaction+0x282>
     754:	53 c0       	rjmp	.+166    	; 0x7fc <Modbus_mster_transaction+0x328>
     756:	80 e0       	ldi	r24, 0x00	; 0
     758:	90 e0       	ldi	r25, 0x00	; 0
     75a:	20 e0       	ldi	r18, 0x00	; 0
     75c:	88 0f       	add	r24, r24
     75e:	99 1f       	adc	r25, r25
     760:	fc 01       	movw	r30, r24
     762:	e8 54       	subi	r30, 0x48	; 72
     764:	fc 4f       	sbci	r31, 0xFC	; 252
     766:	80 81       	ld	r24, Z
     768:	91 81       	ldd	r25, Z+1	; 0x01
     76a:	a1 e0       	ldi	r26, 0x01	; 1
     76c:	b0 e0       	ldi	r27, 0x00	; 0
     76e:	ac 0f       	add	r26, r28
     770:	bd 1f       	adc	r27, r29
     772:	ab 0d       	add	r26, r11
     774:	b1 1d       	adc	r27, r1
     776:	9c 93       	st	X, r25
     778:	40 81       	ld	r20, Z
     77a:	51 81       	ldd	r21, Z+1	; 0x01
     77c:	81 e0       	ldi	r24, 0x01	; 1
     77e:	8b 0d       	add	r24, r11
     780:	e1 e0       	ldi	r30, 0x01	; 1
     782:	f0 e0       	ldi	r31, 0x00	; 0
     784:	ec 0f       	add	r30, r28
     786:	fd 1f       	adc	r31, r29
     788:	e8 0f       	add	r30, r24
     78a:	f1 1d       	adc	r31, r1
     78c:	b3 94       	inc	r11
     78e:	b3 94       	inc	r11
     790:	40 83       	st	Z, r20
     792:	2f 5f       	subi	r18, 0xFF	; 255
     794:	82 2f       	mov	r24, r18
     796:	90 e0       	ldi	r25, 0x00	; 0
     798:	86 17       	cp	r24, r22
     79a:	97 07       	cpc	r25, r23
     79c:	fc f2       	brlt	.-66     	; 0x75c <Modbus_mster_transaction+0x288>
     79e:	2e c0       	rjmp	.+92     	; 0x7fc <Modbus_mster_transaction+0x328>
     7a0:	e8 eb       	ldi	r30, 0xB8	; 184
     7a2:	f3 e0       	ldi	r31, 0x03	; 3
     7a4:	80 81       	ld	r24, Z
     7a6:	91 81       	ldd	r25, Z+1	; 0x01
     7a8:	a1 e0       	ldi	r26, 0x01	; 1
     7aa:	b0 e0       	ldi	r27, 0x00	; 0
     7ac:	ac 0f       	add	r26, r28
     7ae:	bd 1f       	adc	r27, r29
     7b0:	ab 0d       	add	r26, r11
     7b2:	b1 1d       	adc	r27, r1
     7b4:	9c 93       	st	X, r25
     7b6:	80 81       	ld	r24, Z
     7b8:	91 81       	ldd	r25, Z+1	; 0x01
     7ba:	91 e0       	ldi	r25, 0x01	; 1
     7bc:	9b 0d       	add	r25, r11
     7be:	a1 e0       	ldi	r26, 0x01	; 1
     7c0:	b0 e0       	ldi	r27, 0x00	; 0
     7c2:	ac 0f       	add	r26, r28
     7c4:	bd 1f       	adc	r27, r29
     7c6:	a9 0f       	add	r26, r25
     7c8:	b1 1d       	adc	r27, r1
     7ca:	8c 93       	st	X, r24
     7cc:	82 81       	ldd	r24, Z+2	; 0x02
     7ce:	93 81       	ldd	r25, Z+3	; 0x03
     7d0:	82 e0       	ldi	r24, 0x02	; 2
     7d2:	8b 0d       	add	r24, r11
     7d4:	a1 e0       	ldi	r26, 0x01	; 1
     7d6:	b0 e0       	ldi	r27, 0x00	; 0
     7d8:	ac 0f       	add	r26, r28
     7da:	bd 1f       	adc	r27, r29
     7dc:	a8 0f       	add	r26, r24
     7de:	b1 1d       	adc	r27, r1
     7e0:	9c 93       	st	X, r25
     7e2:	22 81       	ldd	r18, Z+2	; 0x02
     7e4:	33 81       	ldd	r19, Z+3	; 0x03
     7e6:	83 e0       	ldi	r24, 0x03	; 3
     7e8:	8b 0d       	add	r24, r11
     7ea:	e1 e0       	ldi	r30, 0x01	; 1
     7ec:	f0 e0       	ldi	r31, 0x00	; 0
     7ee:	ec 0f       	add	r30, r28
     7f0:	fd 1f       	adc	r31, r29
     7f2:	e8 0f       	add	r30, r24
     7f4:	f1 1d       	adc	r31, r1
     7f6:	b4 e0       	ldi	r27, 0x04	; 4
     7f8:	bb 0e       	add	r11, r27
     7fa:	20 83       	st	Z, r18
     7fc:	bb 20       	and	r11, r11
     7fe:	b9 f0       	breq	.+46     	; 0x82e <Modbus_mster_transaction+0x35a>
     800:	8e 01       	movw	r16, r28
     802:	0f 5f       	subi	r16, 0xFF	; 255
     804:	1f 4f       	sbci	r17, 0xFF	; 255
     806:	ee 24       	eor	r14, r14
     808:	ea 94       	dec	r14
     80a:	eb 0c       	add	r14, r11
     80c:	f1 2c       	mov	r15, r1
     80e:	ef ef       	ldi	r30, 0xFF	; 255
     810:	ee 1a       	sub	r14, r30
     812:	fe 0a       	sbc	r15, r30
     814:	e0 0e       	add	r14, r16
     816:	f1 1e       	adc	r15, r17
     818:	8f ef       	ldi	r24, 0xFF	; 255
     81a:	9f ef       	ldi	r25, 0xFF	; 255
     81c:	d8 01       	movw	r26, r16
     81e:	6d 91       	ld	r22, X+
     820:	8d 01       	movw	r16, r26
     822:	0e 94 a1 18 	call	0x3142	; 0x3142 <crc16_update>
     826:	0e 15       	cp	r16, r14
     828:	1f 05       	cpc	r17, r15
     82a:	c1 f7       	brne	.-16     	; 0x81c <Modbus_mster_transaction+0x348>
     82c:	02 c0       	rjmp	.+4      	; 0x832 <Modbus_mster_transaction+0x35e>
     82e:	8f ef       	ldi	r24, 0xFF	; 255
     830:	9f ef       	ldi	r25, 0xFF	; 255
     832:	ee 24       	eor	r14, r14
     834:	e3 94       	inc	r14
     836:	eb 0c       	add	r14, r11
     838:	e1 e0       	ldi	r30, 0x01	; 1
     83a:	f0 e0       	ldi	r31, 0x00	; 0
     83c:	ec 0f       	add	r30, r28
     83e:	fd 1f       	adc	r31, r29
     840:	eb 0d       	add	r30, r11
     842:	f1 1d       	adc	r31, r1
     844:	80 83       	st	Z, r24
     846:	b3 94       	inc	r11
     848:	b3 94       	inc	r11
     84a:	e1 e0       	ldi	r30, 0x01	; 1
     84c:	f0 e0       	ldi	r31, 0x00	; 0
     84e:	ec 0f       	add	r30, r28
     850:	fd 1f       	adc	r31, r29
     852:	ee 0d       	add	r30, r14
     854:	f1 1d       	adc	r31, r1
     856:	90 83       	st	Z, r25
     858:	e1 e0       	ldi	r30, 0x01	; 1
     85a:	f0 e0       	ldi	r31, 0x00	; 0
     85c:	ec 0f       	add	r30, r28
     85e:	fd 1f       	adc	r31, r29
     860:	eb 0d       	add	r30, r11
     862:	f1 1d       	adc	r31, r1
     864:	10 82       	st	Z, r1
     866:	e0 91 ab 03 	lds	r30, 0x03AB	; 0x8003ab <g_mod0_Serial_getc>
     86a:	f0 91 ac 03 	lds	r31, 0x03AC	; 0x8003ac <g_mod0_Serial_getc+0x1>
     86e:	19 95       	eicall
     870:	81 15       	cp	r24, r1
     872:	91 40       	sbci	r25, 0x01	; 1
     874:	c1 f7       	brne	.-16     	; 0x866 <Modbus_mster_transaction+0x392>
     876:	e0 91 b1 03 	lds	r30, 0x03B1	; 0x8003b1 <g_mod0_pre_transmission>
     87a:	f0 91 b2 03 	lds	r31, 0x03B2	; 0x8003b2 <g_mod0_pre_transmission+0x1>
     87e:	30 97       	sbiw	r30, 0x00	; 0
     880:	09 f0       	breq	.+2      	; 0x884 <Modbus_mster_transaction+0x3b0>
     882:	19 95       	eicall
     884:	bb 20       	and	r11, r11
     886:	a1 f0       	breq	.+40     	; 0x8b0 <Modbus_mster_transaction+0x3dc>
     888:	8e 01       	movw	r16, r28
     88a:	0f 5f       	subi	r16, 0xFF	; 255
     88c:	1f 4f       	sbci	r17, 0xFF	; 255
     88e:	f1 2c       	mov	r15, r1
     890:	ef ef       	ldi	r30, 0xFF	; 255
     892:	ee 1a       	sub	r14, r30
     894:	fe 0a       	sbc	r15, r30
     896:	e0 0e       	add	r14, r16
     898:	f1 1e       	adc	r15, r17
     89a:	e0 91 ad 03 	lds	r30, 0x03AD	; 0x8003ad <g_mod0_Serial_putc>
     89e:	f0 91 ae 03 	lds	r31, 0x03AE	; 0x8003ae <g_mod0_Serial_putc+0x1>
     8a2:	d8 01       	movw	r26, r16
     8a4:	8d 91       	ld	r24, X+
     8a6:	8d 01       	movw	r16, r26
     8a8:	19 95       	eicall
     8aa:	0e 15       	cp	r16, r14
     8ac:	1f 05       	cpc	r17, r15
     8ae:	a9 f7       	brne	.-22     	; 0x89a <Modbus_mster_transaction+0x3c6>
     8b0:	e0 91 a9 03 	lds	r30, 0x03A9	; 0x8003a9 <g_mod0_Serial_flush>
     8b4:	f0 91 aa 03 	lds	r31, 0x03AA	; 0x8003aa <g_mod0_Serial_flush+0x1>
     8b8:	19 95       	eicall
     8ba:	ef e8       	ldi	r30, 0x8F	; 143
     8bc:	f1 e0       	ldi	r31, 0x01	; 1
     8be:	31 97       	sbiw	r30, 0x01	; 1
     8c0:	f1 f7       	brne	.-4      	; 0x8be <Modbus_mster_transaction+0x3ea>
     8c2:	00 c0       	rjmp	.+0      	; 0x8c4 <Modbus_mster_transaction+0x3f0>
     8c4:	00 00       	nop
     8c6:	e0 91 af 03 	lds	r30, 0x03AF	; 0x8003af <g_mod0_post_transmission>
     8ca:	f0 91 b0 03 	lds	r31, 0x03B0	; 0x8003b0 <g_mod0_post_transmission+0x1>
     8ce:	30 97       	sbiw	r30, 0x00	; 0
     8d0:	09 f0       	breq	.+2      	; 0x8d4 <Modbus_mster_transaction+0x400>
     8d2:	19 95       	eicall
     8d4:	ff ef       	ldi	r31, 0xFF	; 255
     8d6:	23 ed       	ldi	r18, 0xD3	; 211
     8d8:	80 e3       	ldi	r24, 0x30	; 48
     8da:	f1 50       	subi	r31, 0x01	; 1
     8dc:	20 40       	sbci	r18, 0x00	; 0
     8de:	80 40       	sbci	r24, 0x00	; 0
     8e0:	e1 f7       	brne	.-8      	; 0x8da <Modbus_mster_transaction+0x406>
     8e2:	00 c0       	rjmp	.+0      	; 0x8e4 <Modbus_mster_transaction+0x410>
     8e4:	00 00       	nop
     8e6:	0e 94 c2 18 	call	0x3184	; 0x3184 <Get_millis>
     8ea:	4b 01       	movw	r8, r22
     8ec:	5c 01       	movw	r10, r24
     8ee:	08 e0       	ldi	r16, 0x08	; 8
     8f0:	10 e0       	ldi	r17, 0x00	; 0
     8f2:	ed 2c       	mov	r14, r13
     8f4:	f1 2c       	mov	r15, r1
     8f6:	e0 91 a7 03 	lds	r30, 0x03A7	; 0x8003a7 <g_mod0_Serial_available>
     8fa:	f0 91 a8 03 	lds	r31, 0x03A8	; 0x8003a8 <g_mod0_Serial_available+0x1>
     8fe:	19 95       	eicall
     900:	89 2b       	or	r24, r25
     902:	91 f0       	breq	.+36     	; 0x928 <Modbus_mster_transaction+0x454>
     904:	dd 24       	eor	r13, r13
     906:	d3 94       	inc	r13
     908:	d1 0e       	add	r13, r17
     90a:	e0 91 ab 03 	lds	r30, 0x03AB	; 0x8003ab <g_mod0_Serial_getc>
     90e:	f0 91 ac 03 	lds	r31, 0x03AC	; 0x8003ac <g_mod0_Serial_getc+0x1>
     912:	19 95       	eicall
     914:	e1 e0       	ldi	r30, 0x01	; 1
     916:	f0 e0       	ldi	r31, 0x00	; 0
     918:	ec 0f       	add	r30, r28
     91a:	fd 1f       	adc	r31, r29
     91c:	e1 0f       	add	r30, r17
     91e:	f1 1d       	adc	r31, r1
     920:	80 83       	st	Z, r24
     922:	01 50       	subi	r16, 0x01	; 1
     924:	1d 2d       	mov	r17, r13
     926:	07 c0       	rjmp	.+14     	; 0x936 <Modbus_mster_transaction+0x462>
     928:	e0 91 b3 03 	lds	r30, 0x03B3	; 0x8003b3 <g_mod0_idle>
     92c:	f0 91 b4 03 	lds	r31, 0x03B4	; 0x8003b4 <g_mod0_idle+0x1>
     930:	30 97       	sbiw	r30, 0x00	; 0
     932:	09 f0       	breq	.+2      	; 0x936 <Modbus_mster_transaction+0x462>
     934:	19 95       	eicall
     936:	15 30       	cpi	r17, 0x05	; 5
     938:	59 f5       	brne	.+86     	; 0x990 <Modbus_mster_transaction+0x4bc>
     93a:	99 81       	ldd	r25, Y+1	; 0x01
     93c:	80 91 c0 04 	lds	r24, 0x04C0	; 0x8004c0 <g_mod0_slave>
     940:	98 13       	cpse	r25, r24
     942:	2b c4       	rjmp	.+2134   	; 0x119a <Modbus_mster_transaction+0xcc6>
     944:	8a 81       	ldd	r24, Y+2	; 0x02
     946:	28 2f       	mov	r18, r24
     948:	2f 77       	andi	r18, 0x7F	; 127
     94a:	30 e0       	ldi	r19, 0x00	; 0
     94c:	2e 15       	cp	r18, r14
     94e:	3f 05       	cpc	r19, r15
     950:	09 f0       	breq	.+2      	; 0x954 <Modbus_mster_transaction+0x480>
     952:	25 c4       	rjmp	.+2122   	; 0x119e <Modbus_mster_transaction+0xcca>
     954:	88 23       	and	r24, r24
     956:	2c f4       	brge	.+10     	; 0x962 <Modbus_mster_transaction+0x48e>
     958:	8b 81       	ldd	r24, Y+3	; 0x03
     95a:	88 23       	and	r24, r24
     95c:	09 f4       	brne	.+2      	; 0x960 <Modbus_mster_transaction+0x48c>
     95e:	3d c0       	rjmp	.+122    	; 0x9da <Modbus_mster_transaction+0x506>
     960:	ca c0       	rjmp	.+404    	; 0xaf6 <Modbus_mster_transaction+0x622>
     962:	81 31       	cpi	r24, 0x11	; 17
     964:	58 f4       	brcc	.+22     	; 0x97c <Modbus_mster_transaction+0x4a8>
     966:	8f 30       	cpi	r24, 0x0F	; 15
     968:	08 f0       	brcs	.+2      	; 0x96c <Modbus_mster_transaction+0x498>
     96a:	b5 c3       	rjmp	.+1898   	; 0x10d6 <Modbus_mster_transaction+0xc02>
     96c:	81 30       	cpi	r24, 0x01	; 1
     96e:	80 f0       	brcs	.+32     	; 0x990 <Modbus_mster_transaction+0x4bc>
     970:	85 30       	cpi	r24, 0x05	; 5
     972:	68 f0       	brcs	.+26     	; 0x98e <Modbus_mster_transaction+0x4ba>
     974:	87 30       	cpi	r24, 0x07	; 7
     976:	08 f4       	brcc	.+2      	; 0x97a <Modbus_mster_transaction+0x4a6>
     978:	ae c3       	rjmp	.+1884   	; 0x10d6 <Modbus_mster_transaction+0xc02>
     97a:	0a c0       	rjmp	.+20     	; 0x990 <Modbus_mster_transaction+0x4bc>
     97c:	87 31       	cpi	r24, 0x17	; 23
     97e:	39 f0       	breq	.+14     	; 0x98e <Modbus_mster_transaction+0x4ba>
     980:	8f 3f       	cpi	r24, 0xFF	; 255
     982:	09 f4       	brne	.+2      	; 0x986 <Modbus_mster_transaction+0x4b2>
     984:	a8 c3       	rjmp	.+1872   	; 0x10d6 <Modbus_mster_transaction+0xc02>
     986:	86 31       	cpi	r24, 0x16	; 22
     988:	19 f4       	brne	.+6      	; 0x990 <Modbus_mster_transaction+0x4bc>
     98a:	05 e0       	ldi	r16, 0x05	; 5
     98c:	a5 c3       	rjmp	.+1866   	; 0x10d8 <Modbus_mster_transaction+0xc04>
     98e:	0b 81       	ldd	r16, Y+3	; 0x03
     990:	0e 94 c2 18 	call	0x3184	; 0x3184 <Get_millis>
     994:	dc 01       	movw	r26, r24
     996:	cb 01       	movw	r24, r22
     998:	88 19       	sub	r24, r8
     99a:	99 09       	sbc	r25, r9
     99c:	aa 09       	sbc	r26, r10
     99e:	bb 09       	sbc	r27, r11
     9a0:	81 3d       	cpi	r24, 0xD1	; 209
     9a2:	97 40       	sbci	r25, 0x07	; 7
     9a4:	a1 05       	cpc	r26, r1
     9a6:	b1 05       	cpc	r27, r1
     9a8:	08 f4       	brcc	.+2      	; 0x9ac <Modbus_mster_transaction+0x4d8>
     9aa:	eb c3       	rjmp	.+2006   	; 0x1182 <Modbus_mster_transaction+0xcae>
     9ac:	80 e0       	ldi	r24, 0x00	; 0
     9ae:	92 e0       	ldi	r25, 0x02	; 2
     9b0:	d0 d7       	rcall	.+4000   	; 0x1952 <UART0_puts>
     9b2:	8a e0       	ldi	r24, 0x0A	; 10
     9b4:	99 d7       	rcall	.+3890   	; 0x18e8 <UART0_putc>
     9b6:	01 11       	cpse	r16, r1
     9b8:	f4 c3       	rjmp	.+2024   	; 0x11a2 <Modbus_mster_transaction+0xcce>
     9ba:	82 ee       	ldi	r24, 0xE2	; 226
     9bc:	81 11       	cpse	r24, r1
     9be:	9b c0       	rjmp	.+310    	; 0xaf6 <Modbus_mster_transaction+0x622>
     9c0:	15 30       	cpi	r17, 0x05	; 5
     9c2:	08 f4       	brcc	.+2      	; 0x9c6 <Modbus_mster_transaction+0x4f2>
     9c4:	a9 c3       	rjmp	.+1874   	; 0x1118 <Modbus_mster_transaction+0xc44>
     9c6:	a1 2e       	mov	r10, r17
     9c8:	b1 2c       	mov	r11, r1
     9ca:	75 01       	movw	r14, r10
     9cc:	f2 e0       	ldi	r31, 0x02	; 2
     9ce:	ef 1a       	sub	r14, r31
     9d0:	f1 08       	sbc	r15, r1
     9d2:	1e 14       	cp	r1, r14
     9d4:	1f 04       	cpc	r1, r15
     9d6:	5c f0       	brlt	.+22     	; 0x9ee <Modbus_mster_transaction+0x51a>
     9d8:	8e c3       	rjmp	.+1820   	; 0x10f6 <Modbus_mster_transaction+0xc22>
     9da:	0f 2e       	mov	r0, r31
     9dc:	f3 e0       	ldi	r31, 0x03	; 3
     9de:	ef 2e       	mov	r14, r31
     9e0:	f1 2c       	mov	r15, r1
     9e2:	f0 2d       	mov	r31, r0
     9e4:	0f 2e       	mov	r0, r31
     9e6:	f5 e0       	ldi	r31, 0x05	; 5
     9e8:	af 2e       	mov	r10, r31
     9ea:	b1 2c       	mov	r11, r1
     9ec:	f0 2d       	mov	r31, r0
     9ee:	20 e0       	ldi	r18, 0x00	; 0
     9f0:	30 e0       	ldi	r19, 0x00	; 0
     9f2:	8f ef       	ldi	r24, 0xFF	; 255
     9f4:	9f ef       	ldi	r25, 0xFF	; 255
     9f6:	10 e0       	ldi	r17, 0x00	; 0
     9f8:	e1 e0       	ldi	r30, 0x01	; 1
     9fa:	f0 e0       	ldi	r31, 0x00	; 0
     9fc:	ec 0f       	add	r30, r28
     9fe:	fd 1f       	adc	r31, r29
     a00:	e2 0f       	add	r30, r18
     a02:	f3 1f       	adc	r31, r19
     a04:	60 81       	ld	r22, Z
     a06:	0e 94 a1 18 	call	0x3142	; 0x3142 <crc16_update>
     a0a:	1f 5f       	subi	r17, 0xFF	; 255
     a0c:	21 2f       	mov	r18, r17
     a0e:	30 e0       	ldi	r19, 0x00	; 0
     a10:	2e 15       	cp	r18, r14
     a12:	3f 05       	cpc	r19, r15
     a14:	8c f3       	brlt	.-30     	; 0x9f8 <Modbus_mster_transaction+0x524>
     a16:	71 c3       	rjmp	.+1762   	; 0x10fa <Modbus_mster_transaction+0xc26>
     a18:	89 2f       	mov	r24, r25
     a1a:	99 27       	eor	r25, r25
     a1c:	fe 01       	movw	r30, r28
     a1e:	ea 0d       	add	r30, r10
     a20:	fb 1d       	adc	r31, r11
     a22:	20 81       	ld	r18, Z
     a24:	30 e0       	ldi	r19, 0x00	; 0
     a26:	82 17       	cp	r24, r18
     a28:	93 07       	cpc	r25, r19
     a2a:	09 f0       	breq	.+2      	; 0xa2e <Modbus_mster_transaction+0x55a>
     a2c:	73 c3       	rjmp	.+1766   	; 0x1114 <Modbus_mster_transaction+0xc40>
     a2e:	74 c3       	rjmp	.+1768   	; 0x1118 <Modbus_mster_transaction+0xc44>
     a30:	9b 81       	ldd	r25, Y+3	; 0x03
     a32:	96 95       	lsr	r25
     a34:	e9 f5       	brne	.+122    	; 0xab0 <Modbus_mster_transaction+0x5dc>
     a36:	80 e0       	ldi	r24, 0x00	; 0
     a38:	5e c0       	rjmp	.+188    	; 0xaf6 <Modbus_mster_transaction+0x622>
     a3a:	7b 81       	ldd	r23, Y+3	; 0x03
     a3c:	97 2f       	mov	r25, r23
     a3e:	96 95       	lsr	r25
     a40:	09 f4       	brne	.+2      	; 0xa44 <Modbus_mster_transaction+0x570>
     a42:	78 c3       	rjmp	.+1776   	; 0x1134 <Modbus_mster_transaction+0xc60>
     a44:	fe 01       	movw	r30, r28
     a46:	31 96       	adiw	r30, 0x01	; 1
     a48:	40 e0       	ldi	r20, 0x00	; 0
     a4a:	50 e0       	ldi	r21, 0x00	; 0
     a4c:	80 e0       	ldi	r24, 0x00	; 0
     a4e:	80 34       	cpi	r24, 0x40	; 64
     a50:	70 f4       	brcc	.+28     	; 0xa6e <Modbus_mster_transaction+0x59a>
     a52:	24 81       	ldd	r18, Z+4	; 0x04
     a54:	30 e0       	ldi	r19, 0x00	; 0
     a56:	32 2f       	mov	r19, r18
     a58:	22 27       	eor	r18, r18
     a5a:	63 81       	ldd	r22, Z+3	; 0x03
     a5c:	26 2b       	or	r18, r22
     a5e:	da 01       	movw	r26, r20
     a60:	aa 0f       	add	r26, r26
     a62:	bb 1f       	adc	r27, r27
     a64:	a4 5c       	subi	r26, 0xC4	; 196
     a66:	bb 4f       	sbci	r27, 0xFB	; 251
     a68:	11 96       	adiw	r26, 0x01	; 1
     a6a:	3c 93       	st	X, r19
     a6c:	2e 93       	st	-X, r18
     a6e:	8f 5f       	subi	r24, 0xFF	; 255
     a70:	4f 5f       	subi	r20, 0xFF	; 255
     a72:	5f 4f       	sbci	r21, 0xFF	; 255
     a74:	32 96       	adiw	r30, 0x02	; 2
     a76:	89 13       	cpse	r24, r25
     a78:	ea cf       	rjmp	.-44     	; 0xa4e <Modbus_mster_transaction+0x57a>
     a7a:	8f ef       	ldi	r24, 0xFF	; 255
     a7c:	89 0f       	add	r24, r25
     a7e:	80 93 b5 03 	sts	0x03B5, r24	; 0x8003b5 <g_mod0_response_buffer_length>
     a82:	70 ff       	sbrs	r23, 0
     a84:	35 c0       	rjmp	.+106    	; 0xaf0 <Modbus_mster_transaction+0x61c>
     a86:	90 34       	cpi	r25, 0x40	; 64
     a88:	70 f4       	brcc	.+28     	; 0xaa6 <Modbus_mster_transaction+0x5d2>
     a8a:	29 2f       	mov	r18, r25
     a8c:	30 e0       	ldi	r19, 0x00	; 0
     a8e:	22 0f       	add	r18, r18
     a90:	33 1f       	adc	r19, r19
     a92:	fe 01       	movw	r30, r28
     a94:	e2 0f       	add	r30, r18
     a96:	f3 1f       	adc	r31, r19
     a98:	44 81       	ldd	r20, Z+4	; 0x04
     a9a:	50 e0       	ldi	r21, 0x00	; 0
     a9c:	f9 01       	movw	r30, r18
     a9e:	e4 5c       	subi	r30, 0xC4	; 196
     aa0:	fb 4f       	sbci	r31, 0xFB	; 251
     aa2:	51 83       	std	Z+1, r21	; 0x01
     aa4:	40 83       	st	Z, r20
     aa6:	9f 5f       	subi	r25, 0xFF	; 255
     aa8:	90 93 b5 03 	sts	0x03B5, r25	; 0x8003b5 <g_mod0_response_buffer_length>
     aac:	80 e0       	ldi	r24, 0x00	; 0
     aae:	23 c0       	rjmp	.+70     	; 0xaf6 <Modbus_mster_transaction+0x622>
     ab0:	fe 01       	movw	r30, r28
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	40 e0       	ldi	r20, 0x00	; 0
     ab6:	50 e0       	ldi	r21, 0x00	; 0
     ab8:	80 e0       	ldi	r24, 0x00	; 0
     aba:	80 34       	cpi	r24, 0x40	; 64
     abc:	70 f4       	brcc	.+28     	; 0xada <Modbus_mster_transaction+0x606>
     abe:	23 81       	ldd	r18, Z+3	; 0x03
     ac0:	30 e0       	ldi	r19, 0x00	; 0
     ac2:	32 2f       	mov	r19, r18
     ac4:	22 27       	eor	r18, r18
     ac6:	64 81       	ldd	r22, Z+4	; 0x04
     ac8:	26 2b       	or	r18, r22
     aca:	da 01       	movw	r26, r20
     acc:	aa 0f       	add	r26, r26
     ace:	bb 1f       	adc	r27, r27
     ad0:	a4 5c       	subi	r26, 0xC4	; 196
     ad2:	bb 4f       	sbci	r27, 0xFB	; 251
     ad4:	11 96       	adiw	r26, 0x01	; 1
     ad6:	3c 93       	st	X, r19
     ad8:	2e 93       	st	-X, r18
     ada:	8f 5f       	subi	r24, 0xFF	; 255
     adc:	4f 5f       	subi	r20, 0xFF	; 255
     ade:	5f 4f       	sbci	r21, 0xFF	; 255
     ae0:	32 96       	adiw	r30, 0x02	; 2
     ae2:	89 13       	cpse	r24, r25
     ae4:	ea cf       	rjmp	.-44     	; 0xaba <Modbus_mster_transaction+0x5e6>
     ae6:	91 50       	subi	r25, 0x01	; 1
     ae8:	90 93 b5 03 	sts	0x03B5, r25	; 0x8003b5 <g_mod0_response_buffer_length>
     aec:	80 e0       	ldi	r24, 0x00	; 0
     aee:	03 c0       	rjmp	.+6      	; 0xaf6 <Modbus_mster_transaction+0x622>
     af0:	80 e0       	ldi	r24, 0x00	; 0
     af2:	01 c0       	rjmp	.+2      	; 0xaf6 <Modbus_mster_transaction+0x622>
     af4:	80 e0       	ldi	r24, 0x00	; 0
     af6:	10 92 b7 03 	sts	0x03B7, r1	; 0x8003b7 <g_mod0_transmit_buffer_index>
     afa:	10 92 b6 03 	sts	0x03B6, r1	; 0x8003b6 <g_mod0_response_buffer_index>
     afe:	59 c3       	rjmp	.+1714   	; 0x11b2 <Modbus_mster_transaction+0xcde>
     b00:	81 30       	cpi	r24, 0x01	; 1
     b02:	09 f0       	breq	.+2      	; 0xb06 <Modbus_mster_transaction+0x632>
     b04:	e6 c2       	rjmp	.+1484   	; 0x10d2 <Modbus_mster_transaction+0xbfe>
     b06:	80 91 a6 03 	lds	r24, 0x03A6	; 0x8003a6 <g_mod1_slave>
     b0a:	89 83       	std	Y+1, r24	; 0x01
     b0c:	2f ef       	ldi	r18, 0xFF	; 255
     b0e:	62 13       	cpse	r22, r18
     b10:	06 c0       	rjmp	.+12     	; 0xb1e <Modbus_mster_transaction+0x64a>
     b12:	8f e0       	ldi	r24, 0x0F	; 15
     b14:	8a 83       	std	Y+2, r24	; 0x02
     b16:	68 94       	set
     b18:	bb 24       	eor	r11, r11
     b1a:	b1 f8       	bld	r11, 1
     b1c:	32 c0       	rjmp	.+100    	; 0xb82 <Modbus_mster_transaction+0x6ae>
     b1e:	6a 83       	std	Y+2, r22	; 0x02
     b20:	81 e0       	ldi	r24, 0x01	; 1
     b22:	68 17       	cp	r22, r24
     b24:	b8 f0       	brcs	.+46     	; 0xb54 <Modbus_mster_transaction+0x680>
     b26:	94 e0       	ldi	r25, 0x04	; 4
     b28:	96 17       	cp	r25, r22
     b2a:	18 f4       	brcc	.+6      	; 0xb32 <Modbus_mster_transaction+0x65e>
     b2c:	a7 e1       	ldi	r26, 0x17	; 23
     b2e:	6a 13       	cpse	r22, r26
     b30:	11 c0       	rjmp	.+34     	; 0xb54 <Modbus_mster_transaction+0x680>
     b32:	80 91 a4 03 	lds	r24, 0x03A4	; 0x8003a4 <g_mod1_read_address>
     b36:	90 91 a5 03 	lds	r25, 0x03A5	; 0x8003a5 <g_mod1_read_address+0x1>
     b3a:	9b 83       	std	Y+3, r25	; 0x03
     b3c:	8c 83       	std	Y+4, r24	; 0x04
     b3e:	80 91 a2 03 	lds	r24, 0x03A2	; 0x8003a2 <g_mod1_read_qty>
     b42:	90 91 a3 03 	lds	r25, 0x03A3	; 0x8003a3 <g_mod1_read_qty+0x1>
     b46:	9d 83       	std	Y+5, r25	; 0x05
     b48:	8e 83       	std	Y+6, r24	; 0x06
     b4a:	0f 2e       	mov	r0, r31
     b4c:	f6 e0       	ldi	r31, 0x06	; 6
     b4e:	bf 2e       	mov	r11, r31
     b50:	f0 2d       	mov	r31, r0
     b52:	03 c0       	rjmp	.+6      	; 0xb5a <Modbus_mster_transaction+0x686>
     b54:	68 94       	set
     b56:	bb 24       	eor	r11, r11
     b58:	b1 f8       	bld	r11, 1
     b5a:	b0 e1       	ldi	r27, 0x10	; 16
     b5c:	bd 15       	cp	r27, r13
     b5e:	40 f0       	brcs	.+16     	; 0xb70 <Modbus_mster_transaction+0x69c>
     b60:	ef e0       	ldi	r30, 0x0F	; 15
     b62:	de 16       	cp	r13, r30
     b64:	70 f4       	brcc	.+28     	; 0xb82 <Modbus_mster_transaction+0x6ae>
     b66:	8b ef       	ldi	r24, 0xFB	; 251
     b68:	8d 0d       	add	r24, r13
     b6a:	82 30       	cpi	r24, 0x02	; 2
     b6c:	00 f5       	brcc	.+64     	; 0xbae <Modbus_mster_transaction+0x6da>
     b6e:	09 c0       	rjmp	.+18     	; 0xb82 <Modbus_mster_transaction+0x6ae>
     b70:	f6 e1       	ldi	r31, 0x16	; 22
     b72:	df 16       	cp	r13, r31
     b74:	e0 f0       	brcs	.+56     	; 0xbae <Modbus_mster_transaction+0x6da>
     b76:	27 e1       	ldi	r18, 0x17	; 23
     b78:	2d 15       	cp	r18, r13
     b7a:	18 f4       	brcc	.+6      	; 0xb82 <Modbus_mster_transaction+0x6ae>
     b7c:	8f ef       	ldi	r24, 0xFF	; 255
     b7e:	d8 12       	cpse	r13, r24
     b80:	16 c0       	rjmp	.+44     	; 0xbae <Modbus_mster_transaction+0x6da>
     b82:	90 91 20 03 	lds	r25, 0x0320	; 0x800320 <g_mod1_write_address>
     b86:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <g_mod1_write_address+0x1>
     b8a:	e1 e0       	ldi	r30, 0x01	; 1
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	ec 0f       	add	r30, r28
     b90:	fd 1f       	adc	r31, r29
     b92:	eb 0d       	add	r30, r11
     b94:	f1 1d       	adc	r31, r1
     b96:	80 83       	st	Z, r24
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	8b 0d       	add	r24, r11
     b9c:	e1 e0       	ldi	r30, 0x01	; 1
     b9e:	f0 e0       	ldi	r31, 0x00	; 0
     ba0:	ec 0f       	add	r30, r28
     ba2:	fd 1f       	adc	r31, r29
     ba4:	e8 0f       	add	r30, r24
     ba6:	f1 1d       	adc	r31, r1
     ba8:	b3 94       	inc	r11
     baa:	b3 94       	inc	r11
     bac:	90 83       	st	Z, r25
     bae:	90 e1       	ldi	r25, 0x10	; 16
     bb0:	d9 16       	cp	r13, r25
     bb2:	09 f4       	brne	.+2      	; 0xbb6 <Modbus_mster_transaction+0x6e2>
     bb4:	ad c0       	rjmp	.+346    	; 0xd10 <Modbus_mster_transaction+0x83c>
     bb6:	9d 15       	cp	r25, r13
     bb8:	58 f0       	brcs	.+22     	; 0xbd0 <Modbus_mster_transaction+0x6fc>
     bba:	a6 e0       	ldi	r26, 0x06	; 6
     bbc:	da 16       	cp	r13, r26
     bbe:	61 f1       	breq	.+88     	; 0xc18 <Modbus_mster_transaction+0x744>
     bc0:	bf e0       	ldi	r27, 0x0F	; 15
     bc2:	db 16       	cp	r13, r27
     bc4:	09 f4       	brne	.+2      	; 0xbc8 <Modbus_mster_transaction+0x6f4>
     bc6:	41 c0       	rjmp	.+130    	; 0xc4a <Modbus_mster_transaction+0x776>
     bc8:	e5 e0       	ldi	r30, 0x05	; 5
     bca:	de 12       	cpse	r13, r30
     bcc:	1b c1       	rjmp	.+566    	; 0xe04 <Modbus_mster_transaction+0x930>
     bce:	0d c0       	rjmp	.+26     	; 0xbea <Modbus_mster_transaction+0x716>
     bd0:	f7 e1       	ldi	r31, 0x17	; 23
     bd2:	df 16       	cp	r13, r31
     bd4:	09 f4       	brne	.+2      	; 0xbd8 <Modbus_mster_transaction+0x704>
     bd6:	9c c0       	rjmp	.+312    	; 0xd10 <Modbus_mster_transaction+0x83c>
     bd8:	2f ef       	ldi	r18, 0xFF	; 255
     bda:	d2 16       	cp	r13, r18
     bdc:	09 f4       	brne	.+2      	; 0xbe0 <Modbus_mster_transaction+0x70c>
     bde:	98 c0       	rjmp	.+304    	; 0xd10 <Modbus_mster_transaction+0x83c>
     be0:	86 e1       	ldi	r24, 0x16	; 22
     be2:	d8 16       	cp	r13, r24
     be4:	09 f4       	brne	.+2      	; 0xbe8 <Modbus_mster_transaction+0x714>
     be6:	e0 c0       	rjmp	.+448    	; 0xda8 <Modbus_mster_transaction+0x8d4>
     be8:	0d c1       	rjmp	.+538    	; 0xe04 <Modbus_mster_transaction+0x930>
     bea:	90 91 1e 03 	lds	r25, 0x031E	; 0x80031e <g_mod1_write_qty>
     bee:	80 91 1f 03 	lds	r24, 0x031F	; 0x80031f <g_mod1_write_qty+0x1>
     bf2:	e1 e0       	ldi	r30, 0x01	; 1
     bf4:	f0 e0       	ldi	r31, 0x00	; 0
     bf6:	ec 0f       	add	r30, r28
     bf8:	fd 1f       	adc	r31, r29
     bfa:	eb 0d       	add	r30, r11
     bfc:	f1 1d       	adc	r31, r1
     bfe:	80 83       	st	Z, r24
     c00:	81 e0       	ldi	r24, 0x01	; 1
     c02:	8b 0d       	add	r24, r11
     c04:	e1 e0       	ldi	r30, 0x01	; 1
     c06:	f0 e0       	ldi	r31, 0x00	; 0
     c08:	ec 0f       	add	r30, r28
     c0a:	fd 1f       	adc	r31, r29
     c0c:	e8 0f       	add	r30, r24
     c0e:	f1 1d       	adc	r31, r1
     c10:	b3 94       	inc	r11
     c12:	b3 94       	inc	r11
     c14:	90 83       	st	Z, r25
     c16:	f6 c0       	rjmp	.+492    	; 0xe04 <Modbus_mster_transaction+0x930>
     c18:	ee e9       	ldi	r30, 0x9E	; 158
     c1a:	f2 e0       	ldi	r31, 0x02	; 2
     c1c:	80 81       	ld	r24, Z
     c1e:	91 81       	ldd	r25, Z+1	; 0x01
     c20:	a1 e0       	ldi	r26, 0x01	; 1
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	ac 0f       	add	r26, r28
     c26:	bd 1f       	adc	r27, r29
     c28:	ab 0d       	add	r26, r11
     c2a:	b1 1d       	adc	r27, r1
     c2c:	9c 93       	st	X, r25
     c2e:	20 81       	ld	r18, Z
     c30:	31 81       	ldd	r19, Z+1	; 0x01
     c32:	81 e0       	ldi	r24, 0x01	; 1
     c34:	8b 0d       	add	r24, r11
     c36:	e1 e0       	ldi	r30, 0x01	; 1
     c38:	f0 e0       	ldi	r31, 0x00	; 0
     c3a:	ec 0f       	add	r30, r28
     c3c:	fd 1f       	adc	r31, r29
     c3e:	e8 0f       	add	r30, r24
     c40:	f1 1d       	adc	r31, r1
     c42:	b3 94       	inc	r11
     c44:	b3 94       	inc	r11
     c46:	20 83       	st	Z, r18
     c48:	dd c0       	rjmp	.+442    	; 0xe04 <Modbus_mster_transaction+0x930>
     c4a:	80 91 1e 03 	lds	r24, 0x031E	; 0x80031e <g_mod1_write_qty>
     c4e:	90 91 1f 03 	lds	r25, 0x031F	; 0x80031f <g_mod1_write_qty+0x1>
     c52:	e1 e0       	ldi	r30, 0x01	; 1
     c54:	f0 e0       	ldi	r31, 0x00	; 0
     c56:	ec 0f       	add	r30, r28
     c58:	fd 1f       	adc	r31, r29
     c5a:	eb 0d       	add	r30, r11
     c5c:	f1 1d       	adc	r31, r1
     c5e:	90 83       	st	Z, r25
     c60:	22 e0       	ldi	r18, 0x02	; 2
     c62:	2b 0d       	add	r18, r11
     c64:	31 e0       	ldi	r19, 0x01	; 1
     c66:	3b 0d       	add	r19, r11
     c68:	e1 e0       	ldi	r30, 0x01	; 1
     c6a:	f0 e0       	ldi	r31, 0x00	; 0
     c6c:	ec 0f       	add	r30, r28
     c6e:	fd 1f       	adc	r31, r29
     c70:	e3 0f       	add	r30, r19
     c72:	f1 1d       	adc	r31, r1
     c74:	80 83       	st	Z, r24
     c76:	ac 01       	movw	r20, r24
     c78:	47 70       	andi	r20, 0x07	; 7
     c7a:	55 27       	eor	r21, r21
     c7c:	45 2b       	or	r20, r21
     c7e:	49 f0       	breq	.+18     	; 0xc92 <Modbus_mster_transaction+0x7be>
     c80:	96 95       	lsr	r25
     c82:	87 95       	ror	r24
     c84:	96 95       	lsr	r25
     c86:	87 95       	ror	r24
     c88:	96 95       	lsr	r25
     c8a:	87 95       	ror	r24
     c8c:	91 e0       	ldi	r25, 0x01	; 1
     c8e:	98 0f       	add	r25, r24
     c90:	07 c0       	rjmp	.+14     	; 0xca0 <Modbus_mster_transaction+0x7cc>
     c92:	96 95       	lsr	r25
     c94:	87 95       	ror	r24
     c96:	96 95       	lsr	r25
     c98:	87 95       	ror	r24
     c9a:	96 95       	lsr	r25
     c9c:	87 95       	ror	r24
     c9e:	98 2f       	mov	r25, r24
     ca0:	a3 e0       	ldi	r26, 0x03	; 3
     ca2:	ba 0e       	add	r11, r26
     ca4:	fe 01       	movw	r30, r28
     ca6:	e2 0f       	add	r30, r18
     ca8:	f1 1d       	adc	r31, r1
     caa:	91 83       	std	Z+1, r25	; 0x01
     cac:	99 23       	and	r25, r25
     cae:	09 f4       	brne	.+2      	; 0xcb2 <Modbus_mster_transaction+0x7de>
     cb0:	a9 c0       	rjmp	.+338    	; 0xe04 <Modbus_mster_transaction+0x930>
     cb2:	80 e0       	ldi	r24, 0x00	; 0
     cb4:	28 2f       	mov	r18, r24
     cb6:	21 70       	andi	r18, 0x01	; 1
     cb8:	80 ff       	sbrs	r24, 0
     cba:	03 c0       	rjmp	.+6      	; 0xcc2 <Modbus_mster_transaction+0x7ee>
     cbc:	21 30       	cpi	r18, 0x01	; 1
     cbe:	99 f0       	breq	.+38     	; 0xce6 <Modbus_mster_transaction+0x812>
     cc0:	23 c0       	rjmp	.+70     	; 0xd08 <Modbus_mster_transaction+0x834>
     cc2:	e8 2f       	mov	r30, r24
     cc4:	e6 95       	lsr	r30
     cc6:	f0 e0       	ldi	r31, 0x00	; 0
     cc8:	ee 0f       	add	r30, r30
     cca:	ff 1f       	adc	r31, r31
     ccc:	e2 56       	subi	r30, 0x62	; 98
     cce:	fd 4f       	sbci	r31, 0xFD	; 253
     cd0:	20 81       	ld	r18, Z
     cd2:	31 81       	ldd	r19, Z+1	; 0x01
     cd4:	e1 e0       	ldi	r30, 0x01	; 1
     cd6:	f0 e0       	ldi	r31, 0x00	; 0
     cd8:	ec 0f       	add	r30, r28
     cda:	fd 1f       	adc	r31, r29
     cdc:	eb 0d       	add	r30, r11
     cde:	f1 1d       	adc	r31, r1
     ce0:	20 83       	st	Z, r18
     ce2:	b3 94       	inc	r11
     ce4:	11 c0       	rjmp	.+34     	; 0xd08 <Modbus_mster_transaction+0x834>
     ce6:	e8 2f       	mov	r30, r24
     ce8:	e6 95       	lsr	r30
     cea:	f0 e0       	ldi	r31, 0x00	; 0
     cec:	ee 0f       	add	r30, r30
     cee:	ff 1f       	adc	r31, r31
     cf0:	e2 56       	subi	r30, 0x62	; 98
     cf2:	fd 4f       	sbci	r31, 0xFD	; 253
     cf4:	20 81       	ld	r18, Z
     cf6:	31 81       	ldd	r19, Z+1	; 0x01
     cf8:	e1 e0       	ldi	r30, 0x01	; 1
     cfa:	f0 e0       	ldi	r31, 0x00	; 0
     cfc:	ec 0f       	add	r30, r28
     cfe:	fd 1f       	adc	r31, r29
     d00:	eb 0d       	add	r30, r11
     d02:	f1 1d       	adc	r31, r1
     d04:	30 83       	st	Z, r19
     d06:	b3 94       	inc	r11
     d08:	8f 5f       	subi	r24, 0xFF	; 255
     d0a:	98 13       	cpse	r25, r24
     d0c:	d3 cf       	rjmp	.-90     	; 0xcb4 <Modbus_mster_transaction+0x7e0>
     d0e:	7a c0       	rjmp	.+244    	; 0xe04 <Modbus_mster_transaction+0x930>
     d10:	80 91 1e 03 	lds	r24, 0x031E	; 0x80031e <g_mod1_write_qty>
     d14:	90 91 1f 03 	lds	r25, 0x031F	; 0x80031f <g_mod1_write_qty+0x1>
     d18:	e1 e0       	ldi	r30, 0x01	; 1
     d1a:	f0 e0       	ldi	r31, 0x00	; 0
     d1c:	ec 0f       	add	r30, r28
     d1e:	fd 1f       	adc	r31, r29
     d20:	eb 0d       	add	r30, r11
     d22:	f1 1d       	adc	r31, r1
     d24:	90 83       	st	Z, r25
     d26:	21 e0       	ldi	r18, 0x01	; 1
     d28:	2b 0d       	add	r18, r11
     d2a:	e1 e0       	ldi	r30, 0x01	; 1
     d2c:	f0 e0       	ldi	r31, 0x00	; 0
     d2e:	ec 0f       	add	r30, r28
     d30:	fd 1f       	adc	r31, r29
     d32:	e2 0f       	add	r30, r18
     d34:	f1 1d       	adc	r31, r1
     d36:	80 83       	st	Z, r24
     d38:	22 e0       	ldi	r18, 0x02	; 2
     d3a:	2b 0d       	add	r18, r11
     d3c:	e1 e0       	ldi	r30, 0x01	; 1
     d3e:	f0 e0       	ldi	r31, 0x00	; 0
     d40:	ec 0f       	add	r30, r28
     d42:	fd 1f       	adc	r31, r29
     d44:	e2 0f       	add	r30, r18
     d46:	f1 1d       	adc	r31, r1
     d48:	b3 e0       	ldi	r27, 0x03	; 3
     d4a:	bb 0e       	add	r11, r27
     d4c:	28 2f       	mov	r18, r24
     d4e:	22 0f       	add	r18, r18
     d50:	20 83       	st	Z, r18
     d52:	ac 01       	movw	r20, r24
     d54:	55 27       	eor	r21, r21
     d56:	14 16       	cp	r1, r20
     d58:	15 06       	cpc	r1, r21
     d5a:	0c f0       	brlt	.+2      	; 0xd5e <Modbus_mster_transaction+0x88a>
     d5c:	53 c0       	rjmp	.+166    	; 0xe04 <Modbus_mster_transaction+0x930>
     d5e:	80 e0       	ldi	r24, 0x00	; 0
     d60:	90 e0       	ldi	r25, 0x00	; 0
     d62:	20 e0       	ldi	r18, 0x00	; 0
     d64:	88 0f       	add	r24, r24
     d66:	99 1f       	adc	r25, r25
     d68:	fc 01       	movw	r30, r24
     d6a:	e2 56       	subi	r30, 0x62	; 98
     d6c:	fd 4f       	sbci	r31, 0xFD	; 253
     d6e:	80 81       	ld	r24, Z
     d70:	91 81       	ldd	r25, Z+1	; 0x01
     d72:	a1 e0       	ldi	r26, 0x01	; 1
     d74:	b0 e0       	ldi	r27, 0x00	; 0
     d76:	ac 0f       	add	r26, r28
     d78:	bd 1f       	adc	r27, r29
     d7a:	ab 0d       	add	r26, r11
     d7c:	b1 1d       	adc	r27, r1
     d7e:	9c 93       	st	X, r25
     d80:	60 81       	ld	r22, Z
     d82:	71 81       	ldd	r23, Z+1	; 0x01
     d84:	81 e0       	ldi	r24, 0x01	; 1
     d86:	8b 0d       	add	r24, r11
     d88:	e1 e0       	ldi	r30, 0x01	; 1
     d8a:	f0 e0       	ldi	r31, 0x00	; 0
     d8c:	ec 0f       	add	r30, r28
     d8e:	fd 1f       	adc	r31, r29
     d90:	e8 0f       	add	r30, r24
     d92:	f1 1d       	adc	r31, r1
     d94:	b3 94       	inc	r11
     d96:	b3 94       	inc	r11
     d98:	60 83       	st	Z, r22
     d9a:	2f 5f       	subi	r18, 0xFF	; 255
     d9c:	82 2f       	mov	r24, r18
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	84 17       	cp	r24, r20
     da2:	95 07       	cpc	r25, r21
     da4:	fc f2       	brlt	.-66     	; 0xd64 <Modbus_mster_transaction+0x890>
     da6:	2e c0       	rjmp	.+92     	; 0xe04 <Modbus_mster_transaction+0x930>
     da8:	ee e9       	ldi	r30, 0x9E	; 158
     daa:	f2 e0       	ldi	r31, 0x02	; 2
     dac:	80 81       	ld	r24, Z
     dae:	91 81       	ldd	r25, Z+1	; 0x01
     db0:	a1 e0       	ldi	r26, 0x01	; 1
     db2:	b0 e0       	ldi	r27, 0x00	; 0
     db4:	ac 0f       	add	r26, r28
     db6:	bd 1f       	adc	r27, r29
     db8:	ab 0d       	add	r26, r11
     dba:	b1 1d       	adc	r27, r1
     dbc:	9c 93       	st	X, r25
     dbe:	80 81       	ld	r24, Z
     dc0:	91 81       	ldd	r25, Z+1	; 0x01
     dc2:	91 e0       	ldi	r25, 0x01	; 1
     dc4:	9b 0d       	add	r25, r11
     dc6:	a1 e0       	ldi	r26, 0x01	; 1
     dc8:	b0 e0       	ldi	r27, 0x00	; 0
     dca:	ac 0f       	add	r26, r28
     dcc:	bd 1f       	adc	r27, r29
     dce:	a9 0f       	add	r26, r25
     dd0:	b1 1d       	adc	r27, r1
     dd2:	8c 93       	st	X, r24
     dd4:	82 81       	ldd	r24, Z+2	; 0x02
     dd6:	93 81       	ldd	r25, Z+3	; 0x03
     dd8:	82 e0       	ldi	r24, 0x02	; 2
     dda:	8b 0d       	add	r24, r11
     ddc:	a1 e0       	ldi	r26, 0x01	; 1
     dde:	b0 e0       	ldi	r27, 0x00	; 0
     de0:	ac 0f       	add	r26, r28
     de2:	bd 1f       	adc	r27, r29
     de4:	a8 0f       	add	r26, r24
     de6:	b1 1d       	adc	r27, r1
     de8:	9c 93       	st	X, r25
     dea:	22 81       	ldd	r18, Z+2	; 0x02
     dec:	33 81       	ldd	r19, Z+3	; 0x03
     dee:	83 e0       	ldi	r24, 0x03	; 3
     df0:	8b 0d       	add	r24, r11
     df2:	e1 e0       	ldi	r30, 0x01	; 1
     df4:	f0 e0       	ldi	r31, 0x00	; 0
     df6:	ec 0f       	add	r30, r28
     df8:	fd 1f       	adc	r31, r29
     dfa:	e8 0f       	add	r30, r24
     dfc:	f1 1d       	adc	r31, r1
     dfe:	84 e0       	ldi	r24, 0x04	; 4
     e00:	b8 0e       	add	r11, r24
     e02:	20 83       	st	Z, r18
     e04:	bb 20       	and	r11, r11
     e06:	b9 f0       	breq	.+46     	; 0xe36 <Modbus_mster_transaction+0x962>
     e08:	8e 01       	movw	r16, r28
     e0a:	0f 5f       	subi	r16, 0xFF	; 255
     e0c:	1f 4f       	sbci	r17, 0xFF	; 255
     e0e:	ee 24       	eor	r14, r14
     e10:	ea 94       	dec	r14
     e12:	eb 0c       	add	r14, r11
     e14:	f1 2c       	mov	r15, r1
     e16:	9f ef       	ldi	r25, 0xFF	; 255
     e18:	e9 1a       	sub	r14, r25
     e1a:	f9 0a       	sbc	r15, r25
     e1c:	e0 0e       	add	r14, r16
     e1e:	f1 1e       	adc	r15, r17
     e20:	8f ef       	ldi	r24, 0xFF	; 255
     e22:	9f ef       	ldi	r25, 0xFF	; 255
     e24:	d8 01       	movw	r26, r16
     e26:	6d 91       	ld	r22, X+
     e28:	8d 01       	movw	r16, r26
     e2a:	0e 94 a1 18 	call	0x3142	; 0x3142 <crc16_update>
     e2e:	0e 15       	cp	r16, r14
     e30:	1f 05       	cpc	r17, r15
     e32:	c1 f7       	brne	.-16     	; 0xe24 <Modbus_mster_transaction+0x950>
     e34:	02 c0       	rjmp	.+4      	; 0xe3a <Modbus_mster_transaction+0x966>
     e36:	8f ef       	ldi	r24, 0xFF	; 255
     e38:	9f ef       	ldi	r25, 0xFF	; 255
     e3a:	ee 24       	eor	r14, r14
     e3c:	e3 94       	inc	r14
     e3e:	eb 0c       	add	r14, r11
     e40:	e1 e0       	ldi	r30, 0x01	; 1
     e42:	f0 e0       	ldi	r31, 0x00	; 0
     e44:	ec 0f       	add	r30, r28
     e46:	fd 1f       	adc	r31, r29
     e48:	eb 0d       	add	r30, r11
     e4a:	f1 1d       	adc	r31, r1
     e4c:	80 83       	st	Z, r24
     e4e:	b3 94       	inc	r11
     e50:	b3 94       	inc	r11
     e52:	e1 e0       	ldi	r30, 0x01	; 1
     e54:	f0 e0       	ldi	r31, 0x00	; 0
     e56:	ec 0f       	add	r30, r28
     e58:	fd 1f       	adc	r31, r29
     e5a:	ee 0d       	add	r30, r14
     e5c:	f1 1d       	adc	r31, r1
     e5e:	90 83       	st	Z, r25
     e60:	e1 e0       	ldi	r30, 0x01	; 1
     e62:	f0 e0       	ldi	r31, 0x00	; 0
     e64:	ec 0f       	add	r30, r28
     e66:	fd 1f       	adc	r31, r29
     e68:	eb 0d       	add	r30, r11
     e6a:	f1 1d       	adc	r31, r1
     e6c:	10 82       	st	Z, r1
     e6e:	e0 91 91 02 	lds	r30, 0x0291	; 0x800291 <g_mod1_Serial_getc>
     e72:	f0 91 92 02 	lds	r31, 0x0292	; 0x800292 <g_mod1_Serial_getc+0x1>
     e76:	19 95       	eicall
     e78:	81 15       	cp	r24, r1
     e7a:	91 40       	sbci	r25, 0x01	; 1
     e7c:	c1 f7       	brne	.-16     	; 0xe6e <Modbus_mster_transaction+0x99a>
     e7e:	e0 91 97 02 	lds	r30, 0x0297	; 0x800297 <g_mod1_pre_transmission>
     e82:	f0 91 98 02 	lds	r31, 0x0298	; 0x800298 <g_mod1_pre_transmission+0x1>
     e86:	30 97       	sbiw	r30, 0x00	; 0
     e88:	09 f0       	breq	.+2      	; 0xe8c <Modbus_mster_transaction+0x9b8>
     e8a:	19 95       	eicall
     e8c:	bb 20       	and	r11, r11
     e8e:	a1 f0       	breq	.+40     	; 0xeb8 <Modbus_mster_transaction+0x9e4>
     e90:	8e 01       	movw	r16, r28
     e92:	0f 5f       	subi	r16, 0xFF	; 255
     e94:	1f 4f       	sbci	r17, 0xFF	; 255
     e96:	f1 2c       	mov	r15, r1
     e98:	ef ef       	ldi	r30, 0xFF	; 255
     e9a:	ee 1a       	sub	r14, r30
     e9c:	fe 0a       	sbc	r15, r30
     e9e:	e0 0e       	add	r14, r16
     ea0:	f1 1e       	adc	r15, r17
     ea2:	e0 91 93 02 	lds	r30, 0x0293	; 0x800293 <g_mod1_Serial_putc>
     ea6:	f0 91 94 02 	lds	r31, 0x0294	; 0x800294 <g_mod1_Serial_putc+0x1>
     eaa:	d8 01       	movw	r26, r16
     eac:	8d 91       	ld	r24, X+
     eae:	8d 01       	movw	r16, r26
     eb0:	19 95       	eicall
     eb2:	e0 16       	cp	r14, r16
     eb4:	f1 06       	cpc	r15, r17
     eb6:	a9 f7       	brne	.-22     	; 0xea2 <Modbus_mster_transaction+0x9ce>
     eb8:	e0 91 8d 02 	lds	r30, 0x028D	; 0x80028d <g_mod1_Serial_flush>
     ebc:	f0 91 8e 02 	lds	r31, 0x028E	; 0x80028e <g_mod1_Serial_flush+0x1>
     ec0:	19 95       	eicall
     ec2:	e0 91 95 02 	lds	r30, 0x0295	; 0x800295 <g_mod1_post_transmission>
     ec6:	f0 91 96 02 	lds	r31, 0x0296	; 0x800296 <g_mod1_post_transmission+0x1>
     eca:	30 97       	sbiw	r30, 0x00	; 0
     ecc:	09 f0       	breq	.+2      	; 0xed0 <Modbus_mster_transaction+0x9fc>
     ece:	19 95       	eicall
     ed0:	0e 94 c2 18 	call	0x3184	; 0x3184 <Get_millis>
     ed4:	4b 01       	movw	r8, r22
     ed6:	5c 01       	movw	r10, r24
     ed8:	08 e0       	ldi	r16, 0x08	; 8
     eda:	10 e0       	ldi	r17, 0x00	; 0
     edc:	ed 2c       	mov	r14, r13
     ede:	f1 2c       	mov	r15, r1
     ee0:	e0 91 8f 02 	lds	r30, 0x028F	; 0x80028f <g_mod1_Serial_available>
     ee4:	f0 91 90 02 	lds	r31, 0x0290	; 0x800290 <g_mod1_Serial_available+0x1>
     ee8:	19 95       	eicall
     eea:	89 2b       	or	r24, r25
     eec:	91 f0       	breq	.+36     	; 0xf12 <Modbus_mster_transaction+0xa3e>
     eee:	dd 24       	eor	r13, r13
     ef0:	d3 94       	inc	r13
     ef2:	d1 0e       	add	r13, r17
     ef4:	e0 91 91 02 	lds	r30, 0x0291	; 0x800291 <g_mod1_Serial_getc>
     ef8:	f0 91 92 02 	lds	r31, 0x0292	; 0x800292 <g_mod1_Serial_getc+0x1>
     efc:	19 95       	eicall
     efe:	e1 e0       	ldi	r30, 0x01	; 1
     f00:	f0 e0       	ldi	r31, 0x00	; 0
     f02:	ec 0f       	add	r30, r28
     f04:	fd 1f       	adc	r31, r29
     f06:	e1 0f       	add	r30, r17
     f08:	f1 1d       	adc	r31, r1
     f0a:	80 83       	st	Z, r24
     f0c:	01 50       	subi	r16, 0x01	; 1
     f0e:	1d 2d       	mov	r17, r13
     f10:	07 c0       	rjmp	.+14     	; 0xf20 <Modbus_mster_transaction+0xa4c>
     f12:	e0 91 99 02 	lds	r30, 0x0299	; 0x800299 <g_mod1_idle>
     f16:	f0 91 9a 02 	lds	r31, 0x029A	; 0x80029a <g_mod1_idle+0x1>
     f1a:	30 97       	sbiw	r30, 0x00	; 0
     f1c:	09 f0       	breq	.+2      	; 0xf20 <Modbus_mster_transaction+0xa4c>
     f1e:	19 95       	eicall
     f20:	15 30       	cpi	r17, 0x05	; 5
     f22:	51 f5       	brne	.+84     	; 0xf78 <Modbus_mster_transaction+0xaa4>
     f24:	99 81       	ldd	r25, Y+1	; 0x01
     f26:	80 91 a6 03 	lds	r24, 0x03A6	; 0x8003a6 <g_mod1_slave>
     f2a:	98 13       	cpse	r25, r24
     f2c:	3c c1       	rjmp	.+632    	; 0x11a6 <Modbus_mster_transaction+0xcd2>
     f2e:	8a 81       	ldd	r24, Y+2	; 0x02
     f30:	28 2f       	mov	r18, r24
     f32:	2f 77       	andi	r18, 0x7F	; 127
     f34:	30 e0       	ldi	r19, 0x00	; 0
     f36:	2e 15       	cp	r18, r14
     f38:	3f 05       	cpc	r19, r15
     f3a:	09 f0       	breq	.+2      	; 0xf3e <Modbus_mster_transaction+0xa6a>
     f3c:	36 c1       	rjmp	.+620    	; 0x11aa <Modbus_mster_transaction+0xcd6>
     f3e:	88 23       	and	r24, r24
     f40:	24 f4       	brge	.+8      	; 0xf4a <Modbus_mster_transaction+0xa76>
     f42:	8b 81       	ldd	r24, Y+3	; 0x03
     f44:	88 23       	and	r24, r24
     f46:	b1 f1       	breq	.+108    	; 0xfb4 <Modbus_mster_transaction+0xae0>
     f48:	bf c0       	rjmp	.+382    	; 0x10c8 <Modbus_mster_transaction+0xbf4>
     f4a:	81 31       	cpi	r24, 0x11	; 17
     f4c:	48 f4       	brcc	.+18     	; 0xf60 <Modbus_mster_transaction+0xa8c>
     f4e:	8f 30       	cpi	r24, 0x0F	; 15
     f50:	70 f4       	brcc	.+28     	; 0xf6e <Modbus_mster_transaction+0xa9a>
     f52:	81 30       	cpi	r24, 0x01	; 1
     f54:	88 f0       	brcs	.+34     	; 0xf78 <Modbus_mster_transaction+0xaa4>
     f56:	85 30       	cpi	r24, 0x05	; 5
     f58:	60 f0       	brcs	.+24     	; 0xf72 <Modbus_mster_transaction+0xa9e>
     f5a:	87 30       	cpi	r24, 0x07	; 7
     f5c:	40 f0       	brcs	.+16     	; 0xf6e <Modbus_mster_transaction+0xa9a>
     f5e:	0c c0       	rjmp	.+24     	; 0xf78 <Modbus_mster_transaction+0xaa4>
     f60:	87 31       	cpi	r24, 0x17	; 23
     f62:	39 f0       	breq	.+14     	; 0xf72 <Modbus_mster_transaction+0xa9e>
     f64:	8f 3f       	cpi	r24, 0xFF	; 255
     f66:	19 f0       	breq	.+6      	; 0xf6e <Modbus_mster_transaction+0xa9a>
     f68:	86 31       	cpi	r24, 0x16	; 22
     f6a:	29 f0       	breq	.+10     	; 0xf76 <Modbus_mster_transaction+0xaa2>
     f6c:	05 c0       	rjmp	.+10     	; 0xf78 <Modbus_mster_transaction+0xaa4>
     f6e:	03 e0       	ldi	r16, 0x03	; 3
     f70:	03 c0       	rjmp	.+6      	; 0xf78 <Modbus_mster_transaction+0xaa4>
     f72:	0b 81       	ldd	r16, Y+3	; 0x03
     f74:	01 c0       	rjmp	.+2      	; 0xf78 <Modbus_mster_transaction+0xaa4>
     f76:	05 e0       	ldi	r16, 0x05	; 5
     f78:	0e 94 c2 18 	call	0x3184	; 0x3184 <Get_millis>
     f7c:	dc 01       	movw	r26, r24
     f7e:	cb 01       	movw	r24, r22
     f80:	88 19       	sub	r24, r8
     f82:	99 09       	sbc	r25, r9
     f84:	aa 09       	sbc	r26, r10
     f86:	bb 09       	sbc	r27, r11
     f88:	81 3d       	cpi	r24, 0xD1	; 209
     f8a:	97 40       	sbci	r25, 0x07	; 7
     f8c:	a1 05       	cpc	r26, r1
     f8e:	b1 05       	cpc	r27, r1
     f90:	08 f0       	brcs	.+2      	; 0xf94 <Modbus_mster_transaction+0xac0>
     f92:	fb c0       	rjmp	.+502    	; 0x118a <Modbus_mster_transaction+0xcb6>
     f94:	fe c0       	rjmp	.+508    	; 0x1192 <Modbus_mster_transaction+0xcbe>
     f96:	81 11       	cpse	r24, r1
     f98:	97 c0       	rjmp	.+302    	; 0x10c8 <Modbus_mster_transaction+0xbf4>
     f9a:	15 30       	cpi	r17, 0x05	; 5
     f9c:	08 f4       	brcc	.+2      	; 0xfa0 <Modbus_mster_transaction+0xacc>
     f9e:	df c0       	rjmp	.+446    	; 0x115e <Modbus_mster_transaction+0xc8a>
     fa0:	01 2f       	mov	r16, r17
     fa2:	10 e0       	ldi	r17, 0x00	; 0
     fa4:	78 01       	movw	r14, r16
     fa6:	f2 e0       	ldi	r31, 0x02	; 2
     fa8:	ef 1a       	sub	r14, r31
     faa:	f1 08       	sbc	r15, r1
     fac:	1e 14       	cp	r1, r14
     fae:	1f 04       	cpc	r1, r15
     fb0:	44 f0       	brlt	.+16     	; 0xfc2 <Modbus_mster_transaction+0xaee>
     fb2:	c4 c0       	rjmp	.+392    	; 0x113c <Modbus_mster_transaction+0xc68>
     fb4:	0f 2e       	mov	r0, r31
     fb6:	f3 e0       	ldi	r31, 0x03	; 3
     fb8:	ef 2e       	mov	r14, r31
     fba:	f1 2c       	mov	r15, r1
     fbc:	f0 2d       	mov	r31, r0
     fbe:	05 e0       	ldi	r16, 0x05	; 5
     fc0:	10 e0       	ldi	r17, 0x00	; 0
     fc2:	20 e0       	ldi	r18, 0x00	; 0
     fc4:	30 e0       	ldi	r19, 0x00	; 0
     fc6:	8f ef       	ldi	r24, 0xFF	; 255
     fc8:	9f ef       	ldi	r25, 0xFF	; 255
     fca:	d1 2c       	mov	r13, r1
     fcc:	e1 e0       	ldi	r30, 0x01	; 1
     fce:	f0 e0       	ldi	r31, 0x00	; 0
     fd0:	ec 0f       	add	r30, r28
     fd2:	fd 1f       	adc	r31, r29
     fd4:	e2 0f       	add	r30, r18
     fd6:	f3 1f       	adc	r31, r19
     fd8:	60 81       	ld	r22, Z
     fda:	0e 94 a1 18 	call	0x3142	; 0x3142 <crc16_update>
     fde:	d3 94       	inc	r13
     fe0:	2d 2d       	mov	r18, r13
     fe2:	30 e0       	ldi	r19, 0x00	; 0
     fe4:	2e 15       	cp	r18, r14
     fe6:	3f 05       	cpc	r19, r15
     fe8:	8c f3       	brlt	.-30     	; 0xfcc <Modbus_mster_transaction+0xaf8>
     fea:	aa c0       	rjmp	.+340    	; 0x1140 <Modbus_mster_transaction+0xc6c>
     fec:	89 2f       	mov	r24, r25
     fee:	99 27       	eor	r25, r25
     ff0:	fe 01       	movw	r30, r28
     ff2:	e0 0f       	add	r30, r16
     ff4:	f1 1f       	adc	r31, r17
     ff6:	20 81       	ld	r18, Z
     ff8:	30 e0       	ldi	r19, 0x00	; 0
     ffa:	82 17       	cp	r24, r18
     ffc:	93 07       	cpc	r25, r19
     ffe:	09 f0       	breq	.+2      	; 0x1002 <Modbus_mster_transaction+0xb2e>
    1000:	ac c0       	rjmp	.+344    	; 0x115a <Modbus_mster_transaction+0xc86>
    1002:	ad c0       	rjmp	.+346    	; 0x115e <Modbus_mster_transaction+0xc8a>
    1004:	8b 81       	ldd	r24, Y+3	; 0x03
    1006:	86 95       	lsr	r24
    1008:	e1 f5       	brne	.+120    	; 0x1082 <Modbus_mster_transaction+0xbae>
    100a:	5e c0       	rjmp	.+188    	; 0x10c8 <Modbus_mster_transaction+0xbf4>
    100c:	6b 81       	ldd	r22, Y+3	; 0x03
    100e:	86 2f       	mov	r24, r22
    1010:	86 95       	lsr	r24
    1012:	09 f4       	brne	.+2      	; 0x1016 <Modbus_mster_transaction+0xb42>
    1014:	b2 c0       	rjmp	.+356    	; 0x117a <Modbus_mster_transaction+0xca6>
    1016:	fe 01       	movw	r30, r28
    1018:	31 96       	adiw	r30, 0x01	; 1
    101a:	40 e0       	ldi	r20, 0x00	; 0
    101c:	50 e0       	ldi	r21, 0x00	; 0
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	90 34       	cpi	r25, 0x40	; 64
    1022:	70 f4       	brcc	.+28     	; 0x1040 <Modbus_mster_transaction+0xb6c>
    1024:	24 81       	ldd	r18, Z+4	; 0x04
    1026:	30 e0       	ldi	r19, 0x00	; 0
    1028:	32 2f       	mov	r19, r18
    102a:	22 27       	eor	r18, r18
    102c:	73 81       	ldd	r23, Z+3	; 0x03
    102e:	27 2b       	or	r18, r23
    1030:	da 01       	movw	r26, r20
    1032:	aa 0f       	add	r26, r26
    1034:	bb 1f       	adc	r27, r27
    1036:	ae 5d       	subi	r26, 0xDE	; 222
    1038:	bc 4f       	sbci	r27, 0xFC	; 252
    103a:	11 96       	adiw	r26, 0x01	; 1
    103c:	3c 93       	st	X, r19
    103e:	2e 93       	st	-X, r18
    1040:	9f 5f       	subi	r25, 0xFF	; 255
    1042:	4f 5f       	subi	r20, 0xFF	; 255
    1044:	5f 4f       	sbci	r21, 0xFF	; 255
    1046:	32 96       	adiw	r30, 0x02	; 2
    1048:	98 13       	cpse	r25, r24
    104a:	ea cf       	rjmp	.-44     	; 0x1020 <Modbus_mster_transaction+0xb4c>
    104c:	9f ef       	ldi	r25, 0xFF	; 255
    104e:	98 0f       	add	r25, r24
    1050:	90 93 9b 02 	sts	0x029B, r25	; 0x80029b <g_mod1_response_buffer_length>
    1054:	60 ff       	sbrs	r22, 0
    1056:	35 c0       	rjmp	.+106    	; 0x10c2 <Modbus_mster_transaction+0xbee>
    1058:	80 34       	cpi	r24, 0x40	; 64
    105a:	70 f4       	brcc	.+28     	; 0x1078 <Modbus_mster_transaction+0xba4>
    105c:	28 2f       	mov	r18, r24
    105e:	30 e0       	ldi	r19, 0x00	; 0
    1060:	22 0f       	add	r18, r18
    1062:	33 1f       	adc	r19, r19
    1064:	fe 01       	movw	r30, r28
    1066:	e2 0f       	add	r30, r18
    1068:	f3 1f       	adc	r31, r19
    106a:	44 81       	ldd	r20, Z+4	; 0x04
    106c:	50 e0       	ldi	r21, 0x00	; 0
    106e:	f9 01       	movw	r30, r18
    1070:	ee 5d       	subi	r30, 0xDE	; 222
    1072:	fc 4f       	sbci	r31, 0xFC	; 252
    1074:	51 83       	std	Z+1, r21	; 0x01
    1076:	40 83       	st	Z, r20
    1078:	8f 5f       	subi	r24, 0xFF	; 255
    107a:	80 93 9b 02 	sts	0x029B, r24	; 0x80029b <g_mod1_response_buffer_length>
    107e:	80 e0       	ldi	r24, 0x00	; 0
    1080:	23 c0       	rjmp	.+70     	; 0x10c8 <Modbus_mster_transaction+0xbf4>
    1082:	fe 01       	movw	r30, r28
    1084:	31 96       	adiw	r30, 0x01	; 1
    1086:	40 e0       	ldi	r20, 0x00	; 0
    1088:	50 e0       	ldi	r21, 0x00	; 0
    108a:	90 e0       	ldi	r25, 0x00	; 0
    108c:	90 34       	cpi	r25, 0x40	; 64
    108e:	70 f4       	brcc	.+28     	; 0x10ac <Modbus_mster_transaction+0xbd8>
    1090:	23 81       	ldd	r18, Z+3	; 0x03
    1092:	30 e0       	ldi	r19, 0x00	; 0
    1094:	32 2f       	mov	r19, r18
    1096:	22 27       	eor	r18, r18
    1098:	64 81       	ldd	r22, Z+4	; 0x04
    109a:	26 2b       	or	r18, r22
    109c:	da 01       	movw	r26, r20
    109e:	aa 0f       	add	r26, r26
    10a0:	bb 1f       	adc	r27, r27
    10a2:	ae 5d       	subi	r26, 0xDE	; 222
    10a4:	bc 4f       	sbci	r27, 0xFC	; 252
    10a6:	11 96       	adiw	r26, 0x01	; 1
    10a8:	3c 93       	st	X, r19
    10aa:	2e 93       	st	-X, r18
    10ac:	9f 5f       	subi	r25, 0xFF	; 255
    10ae:	4f 5f       	subi	r20, 0xFF	; 255
    10b0:	5f 4f       	sbci	r21, 0xFF	; 255
    10b2:	32 96       	adiw	r30, 0x02	; 2
    10b4:	98 13       	cpse	r25, r24
    10b6:	ea cf       	rjmp	.-44     	; 0x108c <Modbus_mster_transaction+0xbb8>
    10b8:	81 50       	subi	r24, 0x01	; 1
    10ba:	80 93 9b 02 	sts	0x029B, r24	; 0x80029b <g_mod1_response_buffer_length>
    10be:	80 e0       	ldi	r24, 0x00	; 0
    10c0:	03 c0       	rjmp	.+6      	; 0x10c8 <Modbus_mster_transaction+0xbf4>
    10c2:	80 e0       	ldi	r24, 0x00	; 0
    10c4:	01 c0       	rjmp	.+2      	; 0x10c8 <Modbus_mster_transaction+0xbf4>
    10c6:	80 e0       	ldi	r24, 0x00	; 0
    10c8:	10 92 9d 02 	sts	0x029D, r1	; 0x80029d <g_mod1_transmit_buffer_index>
    10cc:	10 92 9c 02 	sts	0x029C, r1	; 0x80029c <g_mod1_response_buffer_index>
    10d0:	70 c0       	rjmp	.+224    	; 0x11b2 <Modbus_mster_transaction+0xcde>
    10d2:	84 ee       	ldi	r24, 0xE4	; 228
    10d4:	6e c0       	rjmp	.+220    	; 0x11b2 <Modbus_mster_transaction+0xcde>
    10d6:	03 e0       	ldi	r16, 0x03	; 3
    10d8:	0e 94 c2 18 	call	0x3184	; 0x3184 <Get_millis>
    10dc:	dc 01       	movw	r26, r24
    10de:	cb 01       	movw	r24, r22
    10e0:	88 19       	sub	r24, r8
    10e2:	99 09       	sbc	r25, r9
    10e4:	aa 09       	sbc	r26, r10
    10e6:	bb 09       	sbc	r27, r11
    10e8:	81 3d       	cpi	r24, 0xD1	; 209
    10ea:	97 40       	sbci	r25, 0x07	; 7
    10ec:	a1 05       	cpc	r26, r1
    10ee:	b1 05       	cpc	r27, r1
    10f0:	08 f4       	brcc	.+2      	; 0x10f4 <Modbus_mster_transaction+0xc20>
    10f2:	01 cc       	rjmp	.-2046   	; 0x8f6 <Modbus_mster_transaction+0x422>
    10f4:	5b cc       	rjmp	.-1866   	; 0x9ac <Modbus_mster_transaction+0x4d8>
    10f6:	8f ef       	ldi	r24, 0xFF	; 255
    10f8:	9f ef       	ldi	r25, 0xFF	; 255
    10fa:	fe 01       	movw	r30, r28
    10fc:	ee 0d       	add	r30, r14
    10fe:	ff 1d       	adc	r31, r15
    1100:	21 81       	ldd	r18, Z+1	; 0x01
    1102:	30 e0       	ldi	r19, 0x00	; 0
    1104:	ac 01       	movw	r20, r24
    1106:	55 27       	eor	r21, r21
    1108:	42 17       	cp	r20, r18
    110a:	53 07       	cpc	r21, r19
    110c:	09 f4       	brne	.+2      	; 0x1110 <Modbus_mster_transaction+0xc3c>
    110e:	84 cc       	rjmp	.-1784   	; 0xa18 <Modbus_mster_transaction+0x544>
    1110:	83 ee       	ldi	r24, 0xE3	; 227
    1112:	f1 cc       	rjmp	.-1566   	; 0xaf6 <Modbus_mster_transaction+0x622>
    1114:	83 ee       	ldi	r24, 0xE3	; 227
    1116:	ef cc       	rjmp	.-1570   	; 0xaf6 <Modbus_mster_transaction+0x622>
    1118:	8a 81       	ldd	r24, Y+2	; 0x02
    111a:	85 30       	cpi	r24, 0x05	; 5
    111c:	38 f4       	brcc	.+14     	; 0x112c <Modbus_mster_transaction+0xc58>
    111e:	83 30       	cpi	r24, 0x03	; 3
    1120:	08 f0       	brcs	.+2      	; 0x1124 <Modbus_mster_transaction+0xc50>
    1122:	86 cc       	rjmp	.-1780   	; 0xa30 <Modbus_mster_transaction+0x55c>
    1124:	81 30       	cpi	r24, 0x01	; 1
    1126:	08 f0       	brcs	.+2      	; 0x112a <Modbus_mster_transaction+0xc56>
    1128:	88 cc       	rjmp	.-1776   	; 0xa3a <Modbus_mster_transaction+0x566>
    112a:	e4 cc       	rjmp	.-1592   	; 0xaf4 <Modbus_mster_transaction+0x620>
    112c:	87 31       	cpi	r24, 0x17	; 23
    112e:	09 f4       	brne	.+2      	; 0x1132 <Modbus_mster_transaction+0xc5e>
    1130:	7f cc       	rjmp	.-1794   	; 0xa30 <Modbus_mster_transaction+0x55c>
    1132:	e0 cc       	rjmp	.-1600   	; 0xaf4 <Modbus_mster_transaction+0x620>
    1134:	70 fd       	sbrc	r23, 0
    1136:	a9 cc       	rjmp	.-1710   	; 0xa8a <Modbus_mster_transaction+0x5b6>
    1138:	80 e0       	ldi	r24, 0x00	; 0
    113a:	dd cc       	rjmp	.-1606   	; 0xaf6 <Modbus_mster_transaction+0x622>
    113c:	8f ef       	ldi	r24, 0xFF	; 255
    113e:	9f ef       	ldi	r25, 0xFF	; 255
    1140:	fe 01       	movw	r30, r28
    1142:	ee 0d       	add	r30, r14
    1144:	ff 1d       	adc	r31, r15
    1146:	21 81       	ldd	r18, Z+1	; 0x01
    1148:	30 e0       	ldi	r19, 0x00	; 0
    114a:	ac 01       	movw	r20, r24
    114c:	55 27       	eor	r21, r21
    114e:	42 17       	cp	r20, r18
    1150:	53 07       	cpc	r21, r19
    1152:	09 f4       	brne	.+2      	; 0x1156 <Modbus_mster_transaction+0xc82>
    1154:	4b cf       	rjmp	.-362    	; 0xfec <Modbus_mster_transaction+0xb18>
    1156:	83 ee       	ldi	r24, 0xE3	; 227
    1158:	b7 cf       	rjmp	.-146    	; 0x10c8 <Modbus_mster_transaction+0xbf4>
    115a:	83 ee       	ldi	r24, 0xE3	; 227
    115c:	b5 cf       	rjmp	.-150    	; 0x10c8 <Modbus_mster_transaction+0xbf4>
    115e:	8a 81       	ldd	r24, Y+2	; 0x02
    1160:	85 30       	cpi	r24, 0x05	; 5
    1162:	38 f4       	brcc	.+14     	; 0x1172 <Modbus_mster_transaction+0xc9e>
    1164:	83 30       	cpi	r24, 0x03	; 3
    1166:	08 f0       	brcs	.+2      	; 0x116a <Modbus_mster_transaction+0xc96>
    1168:	4d cf       	rjmp	.-358    	; 0x1004 <Modbus_mster_transaction+0xb30>
    116a:	81 30       	cpi	r24, 0x01	; 1
    116c:	08 f0       	brcs	.+2      	; 0x1170 <Modbus_mster_transaction+0xc9c>
    116e:	4e cf       	rjmp	.-356    	; 0x100c <Modbus_mster_transaction+0xb38>
    1170:	aa cf       	rjmp	.-172    	; 0x10c6 <Modbus_mster_transaction+0xbf2>
    1172:	87 31       	cpi	r24, 0x17	; 23
    1174:	09 f4       	brne	.+2      	; 0x1178 <Modbus_mster_transaction+0xca4>
    1176:	46 cf       	rjmp	.-372    	; 0x1004 <Modbus_mster_transaction+0xb30>
    1178:	a6 cf       	rjmp	.-180    	; 0x10c6 <Modbus_mster_transaction+0xbf2>
    117a:	60 fd       	sbrc	r22, 0
    117c:	6f cf       	rjmp	.-290    	; 0x105c <Modbus_mster_transaction+0xb88>
    117e:	80 e0       	ldi	r24, 0x00	; 0
    1180:	a3 cf       	rjmp	.-186    	; 0x10c8 <Modbus_mster_transaction+0xbf4>
    1182:	01 11       	cpse	r16, r1
    1184:	b8 cb       	rjmp	.-2192   	; 0x8f6 <Modbus_mster_transaction+0x422>
    1186:	80 e0       	ldi	r24, 0x00	; 0
    1188:	19 cc       	rjmp	.-1998   	; 0x9bc <Modbus_mster_transaction+0x4e8>
    118a:	01 11       	cpse	r16, r1
    118c:	10 c0       	rjmp	.+32     	; 0x11ae <Modbus_mster_transaction+0xcda>
    118e:	82 ee       	ldi	r24, 0xE2	; 226
    1190:	02 cf       	rjmp	.-508    	; 0xf96 <Modbus_mster_transaction+0xac2>
    1192:	01 11       	cpse	r16, r1
    1194:	a5 ce       	rjmp	.-694    	; 0xee0 <Modbus_mster_transaction+0xa0c>
    1196:	80 e0       	ldi	r24, 0x00	; 0
    1198:	fe ce       	rjmp	.-516    	; 0xf96 <Modbus_mster_transaction+0xac2>
    119a:	80 ee       	ldi	r24, 0xE0	; 224
    119c:	ac cc       	rjmp	.-1704   	; 0xaf6 <Modbus_mster_transaction+0x622>
    119e:	81 ee       	ldi	r24, 0xE1	; 225
    11a0:	aa cc       	rjmp	.-1708   	; 0xaf6 <Modbus_mster_transaction+0x622>
    11a2:	82 ee       	ldi	r24, 0xE2	; 226
    11a4:	a8 cc       	rjmp	.-1712   	; 0xaf6 <Modbus_mster_transaction+0x622>
    11a6:	80 ee       	ldi	r24, 0xE0	; 224
    11a8:	8f cf       	rjmp	.-226    	; 0x10c8 <Modbus_mster_transaction+0xbf4>
    11aa:	81 ee       	ldi	r24, 0xE1	; 225
    11ac:	8d cf       	rjmp	.-230    	; 0x10c8 <Modbus_mster_transaction+0xbf4>
    11ae:	82 ee       	ldi	r24, 0xE2	; 226
    11b0:	8b cf       	rjmp	.-234    	; 0x10c8 <Modbus_mster_transaction+0xbf4>
    11b2:	d3 95       	inc	r29
    11b4:	0f b6       	in	r0, 0x3f	; 63
    11b6:	f8 94       	cli
    11b8:	de bf       	out	0x3e, r29	; 62
    11ba:	0f be       	out	0x3f, r0	; 63
    11bc:	cd bf       	out	0x3d, r28	; 61
    11be:	df 91       	pop	r29
    11c0:	cf 91       	pop	r28
    11c2:	1f 91       	pop	r17
    11c4:	0f 91       	pop	r16
    11c6:	ff 90       	pop	r15
    11c8:	ef 90       	pop	r14
    11ca:	df 90       	pop	r13
    11cc:	bf 90       	pop	r11
    11ce:	af 90       	pop	r10
    11d0:	9f 90       	pop	r9
    11d2:	8f 90       	pop	r8
    11d4:	08 95       	ret

000011d6 <Modbus_init>:
    11d6:	fb 01       	movw	r30, r22
    11d8:	81 11       	cpse	r24, r1
    11da:	86 c0       	rjmp	.+268    	; 0x12e8 <Modbus_init+0x112>
    11dc:	80 81       	ld	r24, Z
    11de:	80 93 c0 04 	sts	0x04C0, r24	; 0x8004c0 <g_mod0_slave>
    11e2:	41 81       	ldd	r20, Z+1	; 0x01
    11e4:	62 81       	ldd	r22, Z+2	; 0x02
    11e6:	73 81       	ldd	r23, Z+3	; 0x03
    11e8:	84 81       	ldd	r24, Z+4	; 0x04
    11ea:	95 81       	ldd	r25, Z+5	; 0x05
    11ec:	26 81       	ldd	r18, Z+6	; 0x06
    11ee:	37 81       	ldd	r19, Z+7	; 0x07
    11f0:	30 93 b2 03 	sts	0x03B2, r19	; 0x8003b2 <g_mod0_pre_transmission+0x1>
    11f4:	20 93 b1 03 	sts	0x03B1, r18	; 0x8003b1 <g_mod0_pre_transmission>
    11f8:	20 85       	ldd	r18, Z+8	; 0x08
    11fa:	31 85       	ldd	r19, Z+9	; 0x09
    11fc:	30 93 b0 03 	sts	0x03B0, r19	; 0x8003b0 <g_mod0_post_transmission+0x1>
    1200:	20 93 af 03 	sts	0x03AF, r18	; 0x8003af <g_mod0_post_transmission>
    1204:	10 92 b4 03 	sts	0x03B4, r1	; 0x8003b4 <g_mod0_idle+0x1>
    1208:	10 92 b3 03 	sts	0x03B3, r1	; 0x8003b3 <g_mod0_idle>
    120c:	10 92 b6 03 	sts	0x03B6, r1	; 0x8003b6 <g_mod0_response_buffer_index>
    1210:	10 92 b5 03 	sts	0x03B5, r1	; 0x8003b5 <g_mod0_response_buffer_length>
    1214:	41 30       	cpi	r20, 0x01	; 1
    1216:	09 f5       	brne	.+66     	; 0x125a <Modbus_init+0x84>
    1218:	20 91 8c 02 	lds	r18, 0x028C	; 0x80028c <UART1_used.1979>
    121c:	21 11       	cpse	r18, r1
    121e:	c8 c0       	rjmp	.+400    	; 0x13b0 <Modbus_init+0x1da>
    1220:	21 e0       	ldi	r18, 0x01	; 1
    1222:	20 93 8c 02 	sts	0x028C, r18	; 0x80028c <UART1_used.1979>
    1226:	11 d4       	rcall	.+2082   	; 0x1a4a <UART1_init>
    1228:	83 eb       	ldi	r24, 0xB3	; 179
    122a:	9d e0       	ldi	r25, 0x0D	; 13
    122c:	90 93 a8 03 	sts	0x03A8, r25	; 0x8003a8 <g_mod0_Serial_available+0x1>
    1230:	80 93 a7 03 	sts	0x03A7, r24	; 0x8003a7 <g_mod0_Serial_available>
    1234:	81 ec       	ldi	r24, 0xC1	; 193
    1236:	9d e0       	ldi	r25, 0x0D	; 13
    1238:	90 93 aa 03 	sts	0x03AA, r25	; 0x8003aa <g_mod0_Serial_flush+0x1>
    123c:	80 93 a9 03 	sts	0x03A9, r24	; 0x8003a9 <g_mod0_Serial_flush>
    1240:	8a e7       	ldi	r24, 0x7A	; 122
    1242:	9d e0       	ldi	r25, 0x0D	; 13
    1244:	90 93 ac 03 	sts	0x03AC, r25	; 0x8003ac <g_mod0_Serial_getc+0x1>
    1248:	80 93 ab 03 	sts	0x03AB, r24	; 0x8003ab <g_mod0_Serial_getc>
    124c:	8a e9       	ldi	r24, 0x9A	; 154
    124e:	9d e0       	ldi	r25, 0x0D	; 13
    1250:	90 93 ae 03 	sts	0x03AE, r25	; 0x8003ae <g_mod0_Serial_putc+0x1>
    1254:	80 93 ad 03 	sts	0x03AD, r24	; 0x8003ad <g_mod0_Serial_putc>
    1258:	08 95       	ret
    125a:	42 30       	cpi	r20, 0x02	; 2
    125c:	09 f5       	brne	.+66     	; 0x12a0 <Modbus_init+0xca>
    125e:	20 91 8b 02 	lds	r18, 0x028B	; 0x80028b <UART2_used.1980>
    1262:	21 11       	cpse	r18, r1
    1264:	a5 c0       	rjmp	.+330    	; 0x13b0 <Modbus_init+0x1da>
    1266:	21 e0       	ldi	r18, 0x01	; 1
    1268:	20 93 8b 02 	sts	0x028B, r18	; 0x80028b <UART2_used.1980>
    126c:	fd d4       	rcall	.+2554   	; 0x1c68 <UART2_init>
    126e:	8f eb       	ldi	r24, 0xBF	; 191
    1270:	9e e0       	ldi	r25, 0x0E	; 14
    1272:	90 93 a8 03 	sts	0x03A8, r25	; 0x8003a8 <g_mod0_Serial_available+0x1>
    1276:	80 93 a7 03 	sts	0x03A7, r24	; 0x8003a7 <g_mod0_Serial_available>
    127a:	8d ec       	ldi	r24, 0xCD	; 205
    127c:	9e e0       	ldi	r25, 0x0E	; 14
    127e:	90 93 aa 03 	sts	0x03AA, r25	; 0x8003aa <g_mod0_Serial_flush+0x1>
    1282:	80 93 a9 03 	sts	0x03A9, r24	; 0x8003a9 <g_mod0_Serial_flush>
    1286:	89 e8       	ldi	r24, 0x89	; 137
    1288:	9e e0       	ldi	r25, 0x0E	; 14
    128a:	90 93 ac 03 	sts	0x03AC, r25	; 0x8003ac <g_mod0_Serial_getc+0x1>
    128e:	80 93 ab 03 	sts	0x03AB, r24	; 0x8003ab <g_mod0_Serial_getc>
    1292:	86 ea       	ldi	r24, 0xA6	; 166
    1294:	9e e0       	ldi	r25, 0x0E	; 14
    1296:	90 93 ae 03 	sts	0x03AE, r25	; 0x8003ae <g_mod0_Serial_putc+0x1>
    129a:	80 93 ad 03 	sts	0x03AD, r24	; 0x8003ad <g_mod0_Serial_putc>
    129e:	08 95       	ret
    12a0:	43 30       	cpi	r20, 0x03	; 3
    12a2:	09 f0       	breq	.+2      	; 0x12a6 <Modbus_init+0xd0>
    12a4:	85 c0       	rjmp	.+266    	; 0x13b0 <Modbus_init+0x1da>
    12a6:	20 91 8a 02 	lds	r18, 0x028A	; 0x80028a <UART3_used.1981>
    12aa:	21 11       	cpse	r18, r1
    12ac:	81 c0       	rjmp	.+258    	; 0x13b0 <Modbus_init+0x1da>
    12ae:	21 e0       	ldi	r18, 0x01	; 1
    12b0:	20 93 8a 02 	sts	0x028A, r18	; 0x80028a <UART3_used.1981>
    12b4:	e5 d5       	rcall	.+3018   	; 0x1e80 <UART3_init>
    12b6:	8b ec       	ldi	r24, 0xCB	; 203
    12b8:	9f e0       	ldi	r25, 0x0F	; 15
    12ba:	90 93 a8 03 	sts	0x03A8, r25	; 0x8003a8 <g_mod0_Serial_available+0x1>
    12be:	80 93 a7 03 	sts	0x03A7, r24	; 0x8003a7 <g_mod0_Serial_available>
    12c2:	89 ed       	ldi	r24, 0xD9	; 217
    12c4:	9f e0       	ldi	r25, 0x0F	; 15
    12c6:	90 93 aa 03 	sts	0x03AA, r25	; 0x8003aa <g_mod0_Serial_flush+0x1>
    12ca:	80 93 a9 03 	sts	0x03A9, r24	; 0x8003a9 <g_mod0_Serial_flush>
    12ce:	85 e9       	ldi	r24, 0x95	; 149
    12d0:	9f e0       	ldi	r25, 0x0F	; 15
    12d2:	90 93 ac 03 	sts	0x03AC, r25	; 0x8003ac <g_mod0_Serial_getc+0x1>
    12d6:	80 93 ab 03 	sts	0x03AB, r24	; 0x8003ab <g_mod0_Serial_getc>
    12da:	82 eb       	ldi	r24, 0xB2	; 178
    12dc:	9f e0       	ldi	r25, 0x0F	; 15
    12de:	90 93 ae 03 	sts	0x03AE, r25	; 0x8003ae <g_mod0_Serial_putc+0x1>
    12e2:	80 93 ad 03 	sts	0x03AD, r24	; 0x8003ad <g_mod0_Serial_putc>
    12e6:	08 95       	ret
    12e8:	81 30       	cpi	r24, 0x01	; 1
    12ea:	09 f0       	breq	.+2      	; 0x12ee <Modbus_init+0x118>
    12ec:	61 c0       	rjmp	.+194    	; 0x13b0 <Modbus_init+0x1da>
    12ee:	80 81       	ld	r24, Z
    12f0:	80 93 a6 03 	sts	0x03A6, r24	; 0x8003a6 <g_mod1_slave>
    12f4:	41 81       	ldd	r20, Z+1	; 0x01
    12f6:	62 81       	ldd	r22, Z+2	; 0x02
    12f8:	73 81       	ldd	r23, Z+3	; 0x03
    12fa:	84 81       	ldd	r24, Z+4	; 0x04
    12fc:	95 81       	ldd	r25, Z+5	; 0x05
    12fe:	26 81       	ldd	r18, Z+6	; 0x06
    1300:	37 81       	ldd	r19, Z+7	; 0x07
    1302:	30 93 98 02 	sts	0x0298, r19	; 0x800298 <g_mod1_pre_transmission+0x1>
    1306:	20 93 97 02 	sts	0x0297, r18	; 0x800297 <g_mod1_pre_transmission>
    130a:	20 85       	ldd	r18, Z+8	; 0x08
    130c:	31 85       	ldd	r19, Z+9	; 0x09
    130e:	30 93 96 02 	sts	0x0296, r19	; 0x800296 <g_mod1_post_transmission+0x1>
    1312:	20 93 95 02 	sts	0x0295, r18	; 0x800295 <g_mod1_post_transmission>
    1316:	10 92 9a 02 	sts	0x029A, r1	; 0x80029a <g_mod1_idle+0x1>
    131a:	10 92 99 02 	sts	0x0299, r1	; 0x800299 <g_mod1_idle>
    131e:	10 92 9c 02 	sts	0x029C, r1	; 0x80029c <g_mod1_response_buffer_index>
    1322:	10 92 9b 02 	sts	0x029B, r1	; 0x80029b <g_mod1_response_buffer_length>
    1326:	41 30       	cpi	r20, 0x01	; 1
    1328:	09 f5       	brne	.+66     	; 0x136c <Modbus_init+0x196>
    132a:	20 91 8c 02 	lds	r18, 0x028C	; 0x80028c <UART1_used.1979>
    132e:	21 11       	cpse	r18, r1
    1330:	3f c0       	rjmp	.+126    	; 0x13b0 <Modbus_init+0x1da>
    1332:	21 e0       	ldi	r18, 0x01	; 1
    1334:	20 93 8c 02 	sts	0x028C, r18	; 0x80028c <UART1_used.1979>
    1338:	88 d3       	rcall	.+1808   	; 0x1a4a <UART1_init>
    133a:	83 eb       	ldi	r24, 0xB3	; 179
    133c:	9d e0       	ldi	r25, 0x0D	; 13
    133e:	90 93 90 02 	sts	0x0290, r25	; 0x800290 <g_mod1_Serial_available+0x1>
    1342:	80 93 8f 02 	sts	0x028F, r24	; 0x80028f <g_mod1_Serial_available>
    1346:	81 ec       	ldi	r24, 0xC1	; 193
    1348:	9d e0       	ldi	r25, 0x0D	; 13
    134a:	90 93 8e 02 	sts	0x028E, r25	; 0x80028e <g_mod1_Serial_flush+0x1>
    134e:	80 93 8d 02 	sts	0x028D, r24	; 0x80028d <g_mod1_Serial_flush>
    1352:	8a e7       	ldi	r24, 0x7A	; 122
    1354:	9d e0       	ldi	r25, 0x0D	; 13
    1356:	90 93 92 02 	sts	0x0292, r25	; 0x800292 <g_mod1_Serial_getc+0x1>
    135a:	80 93 91 02 	sts	0x0291, r24	; 0x800291 <g_mod1_Serial_getc>
    135e:	8a e9       	ldi	r24, 0x9A	; 154
    1360:	9d e0       	ldi	r25, 0x0D	; 13
    1362:	90 93 94 02 	sts	0x0294, r25	; 0x800294 <g_mod1_Serial_putc+0x1>
    1366:	80 93 93 02 	sts	0x0293, r24	; 0x800293 <g_mod1_Serial_putc>
    136a:	08 95       	ret
    136c:	42 30       	cpi	r20, 0x02	; 2
    136e:	01 f5       	brne	.+64     	; 0x13b0 <Modbus_init+0x1da>
    1370:	20 91 8b 02 	lds	r18, 0x028B	; 0x80028b <UART2_used.1980>
    1374:	21 11       	cpse	r18, r1
    1376:	1c c0       	rjmp	.+56     	; 0x13b0 <Modbus_init+0x1da>
    1378:	21 e0       	ldi	r18, 0x01	; 1
    137a:	20 93 8b 02 	sts	0x028B, r18	; 0x80028b <UART2_used.1980>
    137e:	74 d4       	rcall	.+2280   	; 0x1c68 <UART2_init>
    1380:	8f eb       	ldi	r24, 0xBF	; 191
    1382:	9e e0       	ldi	r25, 0x0E	; 14
    1384:	90 93 90 02 	sts	0x0290, r25	; 0x800290 <g_mod1_Serial_available+0x1>
    1388:	80 93 8f 02 	sts	0x028F, r24	; 0x80028f <g_mod1_Serial_available>
    138c:	8d ec       	ldi	r24, 0xCD	; 205
    138e:	9e e0       	ldi	r25, 0x0E	; 14
    1390:	90 93 8e 02 	sts	0x028E, r25	; 0x80028e <g_mod1_Serial_flush+0x1>
    1394:	80 93 8d 02 	sts	0x028D, r24	; 0x80028d <g_mod1_Serial_flush>
    1398:	89 e8       	ldi	r24, 0x89	; 137
    139a:	9e e0       	ldi	r25, 0x0E	; 14
    139c:	90 93 92 02 	sts	0x0292, r25	; 0x800292 <g_mod1_Serial_getc+0x1>
    13a0:	80 93 91 02 	sts	0x0291, r24	; 0x800291 <g_mod1_Serial_getc>
    13a4:	86 ea       	ldi	r24, 0xA6	; 166
    13a6:	9e e0       	ldi	r25, 0x0E	; 14
    13a8:	90 93 94 02 	sts	0x0294, r25	; 0x800294 <g_mod1_Serial_putc+0x1>
    13ac:	80 93 93 02 	sts	0x0293, r24	; 0x800293 <g_mod1_Serial_putc>
    13b0:	08 95       	ret

000013b2 <Modbus_Set_transmit_buffer>:
    13b2:	81 11       	cpse	r24, r1
    13b4:	0b c0       	rjmp	.+22     	; 0x13cc <Modbus_Set_transmit_buffer+0x1a>
    13b6:	60 34       	cpi	r22, 0x40	; 64
    13b8:	b8 f4       	brcc	.+46     	; 0x13e8 <Modbus_Set_transmit_buffer+0x36>
    13ba:	e6 2f       	mov	r30, r22
    13bc:	f0 e0       	ldi	r31, 0x00	; 0
    13be:	ee 0f       	add	r30, r30
    13c0:	ff 1f       	adc	r31, r31
    13c2:	e8 54       	subi	r30, 0x48	; 72
    13c4:	fc 4f       	sbci	r31, 0xFC	; 252
    13c6:	51 83       	std	Z+1, r21	; 0x01
    13c8:	40 83       	st	Z, r20
    13ca:	08 95       	ret
    13cc:	81 30       	cpi	r24, 0x01	; 1
    13ce:	71 f4       	brne	.+28     	; 0x13ec <Modbus_Set_transmit_buffer+0x3a>
    13d0:	60 34       	cpi	r22, 0x40	; 64
    13d2:	70 f4       	brcc	.+28     	; 0x13f0 <Modbus_Set_transmit_buffer+0x3e>
    13d4:	e6 2f       	mov	r30, r22
    13d6:	f0 e0       	ldi	r31, 0x00	; 0
    13d8:	ee 0f       	add	r30, r30
    13da:	ff 1f       	adc	r31, r31
    13dc:	e2 56       	subi	r30, 0x62	; 98
    13de:	fd 4f       	sbci	r31, 0xFD	; 253
    13e0:	51 83       	std	Z+1, r21	; 0x01
    13e2:	40 83       	st	Z, r20
    13e4:	80 e0       	ldi	r24, 0x00	; 0
    13e6:	08 95       	ret
    13e8:	82 e0       	ldi	r24, 0x02	; 2
    13ea:	08 95       	ret
    13ec:	82 e0       	ldi	r24, 0x02	; 2
    13ee:	08 95       	ret
    13f0:	82 e0       	ldi	r24, 0x02	; 2
    13f2:	08 95       	ret

000013f4 <Modbus_Write_multiple_coils>:
    13f4:	81 11       	cpse	r24, r1
    13f6:	0b c0       	rjmp	.+22     	; 0x140e <Modbus_Write_multiple_coils+0x1a>
    13f8:	70 93 3b 04 	sts	0x043B, r23	; 0x80043b <g_mod0_write_address+0x1>
    13fc:	60 93 3a 04 	sts	0x043A, r22	; 0x80043a <g_mod0_write_address>
    1400:	50 93 39 04 	sts	0x0439, r21	; 0x800439 <g_mod0_write_qty+0x1>
    1404:	40 93 38 04 	sts	0x0438, r20	; 0x800438 <g_mod0_write_qty>
    1408:	6f e0       	ldi	r22, 0x0F	; 15
    140a:	64 c8       	rjmp	.-3896   	; 0x4d4 <Modbus_mster_transaction>
    140c:	08 95       	ret
    140e:	81 30       	cpi	r24, 0x01	; 1
    1410:	59 f4       	brne	.+22     	; 0x1428 <Modbus_Write_multiple_coils+0x34>
    1412:	70 93 21 03 	sts	0x0321, r23	; 0x800321 <g_mod1_write_address+0x1>
    1416:	60 93 20 03 	sts	0x0320, r22	; 0x800320 <g_mod1_write_address>
    141a:	50 93 1f 03 	sts	0x031F, r21	; 0x80031f <g_mod1_write_qty+0x1>
    141e:	40 93 1e 03 	sts	0x031E, r20	; 0x80031e <g_mod1_write_qty>
    1422:	6f e0       	ldi	r22, 0x0F	; 15
    1424:	57 c8       	rjmp	.-3922   	; 0x4d4 <Modbus_mster_transaction>
    1426:	08 95       	ret
    1428:	84 ee       	ldi	r24, 0xE4	; 228
    142a:	08 95       	ret

0000142c <Modbus_Write_multiple_registers>:
@return 0 on success; exception number on failure
@ingroup register
*/
uint8_t Modbus_Write_multiple_registers(uint8_t device,uint16_t u16WriteAddress, uint16_t u16WriteQty)
{
	if(DEVICE_0 == device){
    142c:	81 11       	cpse	r24, r1
    142e:	0b c0       	rjmp	.+22     	; 0x1446 <Modbus_Write_multiple_registers+0x1a>
	
		g_mod0_write_address = u16WriteAddress;
    1430:	70 93 3b 04 	sts	0x043B, r23	; 0x80043b <g_mod0_write_address+0x1>
    1434:	60 93 3a 04 	sts	0x043A, r22	; 0x80043a <g_mod0_write_address>
		g_mod0_write_qty = u16WriteQty;
    1438:	50 93 39 04 	sts	0x0439, r21	; 0x800439 <g_mod0_write_qty+0x1>
    143c:	40 93 38 04 	sts	0x0438, r20	; 0x800438 <g_mod0_write_qty>
		return Modbus_mster_transaction(device, WRITE_MULTIPLE_REGISTERS);
    1440:	60 e1       	ldi	r22, 0x10	; 16
    1442:	48 c8       	rjmp	.-3952   	; 0x4d4 <Modbus_mster_transaction>
    1444:	08 95       	ret
	}
	else if(DEVICE_1 == device){
    1446:	81 30       	cpi	r24, 0x01	; 1
    1448:	59 f4       	brne	.+22     	; 0x1460 <Modbus_Write_multiple_registers+0x34>
		g_mod1_write_address = u16WriteAddress;
    144a:	70 93 21 03 	sts	0x0321, r23	; 0x800321 <g_mod1_write_address+0x1>
    144e:	60 93 20 03 	sts	0x0320, r22	; 0x800320 <g_mod1_write_address>
		g_mod1_write_qty = u16WriteQty;
    1452:	50 93 1f 03 	sts	0x031F, r21	; 0x80031f <g_mod1_write_qty+0x1>
    1456:	40 93 1e 03 	sts	0x031E, r20	; 0x80031e <g_mod1_write_qty>
		return Modbus_mster_transaction(device, WRITE_MULTIPLE_REGISTERS);
    145a:	60 e1       	ldi	r22, 0x10	; 16
    145c:	3b c8       	rjmp	.-3978   	; 0x4d4 <Modbus_mster_transaction>
    145e:	08 95       	ret
	}
	return  INVALID_DEVICE;
    1460:	84 ee       	ldi	r24, 0xE4	; 228
}
    1462:	08 95       	ret

00001464 <vTask2>:
										
		
	}
}
static void vTask2(void* pvParameters)
{
    1464:	cf 93       	push	r28
    1466:	df 93       	push	r29
    1468:	00 d0       	rcall	.+0      	; 0x146a <vTask2+0x6>
    146a:	1f 92       	push	r1
    146c:	cd b7       	in	r28, 0x3d	; 61
    146e:	de b7       	in	r29, 0x3e	; 62
    1470:	7e 01       	movw	r14, r28
    1472:	85 e0       	ldi	r24, 0x05	; 5
    1474:	e8 0e       	add	r14, r24
    1476:	f1 1c       	adc	r15, r1
		size_t xReceivedBytes;
		const TickType_t xBlockTime = pdMS_TO_TICKS( 100 );
		/* Receive the next message from the message buffer. Wait in the Blocked
		state (so not using any CPU processing time) for a maximum of 100ms for
		a message to become available. */
		UART0_puts("Vtask2 requires data\n");
    1478:	83 e1       	ldi	r24, 0x13	; 19
    147a:	92 e0       	ldi	r25, 0x02	; 2
    147c:	6a d2       	rcall	.+1236   	; 0x1952 <UART0_puts>
		xReceivedBytes = xMessageBufferReceive( xMessageBuffer,
    147e:	26 e0       	ldi	r18, 0x06	; 6
    1480:	30 e0       	ldi	r19, 0x00	; 0
    1482:	44 e0       	ldi	r20, 0x04	; 4
    1484:	50 e0       	ldi	r21, 0x00	; 0
    1486:	be 01       	movw	r22, r28
    1488:	6f 5f       	subi	r22, 0xFF	; 255
    148a:	7f 4f       	sbci	r23, 0xFF	; 255
    148c:	80 91 f7 09 	lds	r24, 0x09F7	; 0x8009f7 <xMessageBuffer>
    1490:	90 91 f8 09 	lds	r25, 0x09F8	; 0x8009f8 <xMessageBuffer+0x1>
    1494:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <xStreamBufferReceive>
												( void * ) ucRxData,
												sizeof( ucRxData ),
												xBlockTime );
		if(xReceivedBytes==0){
    1498:	89 2b       	or	r24, r25
    149a:	21 f4       	brne	.+8      	; 0x14a4 <vTask2+0x40>
			UART0_puts("NO data\n");
    149c:	89 e2       	ldi	r24, 0x29	; 41
    149e:	92 e0       	ldi	r25, 0x02	; 2
    14a0:	58 d2       	rcall	.+1200   	; 0x1952 <UART0_puts>
    14a2:	ea cf       	rjmp	.-44     	; 0x1478 <vTask2+0x14>
		}
		else{
			UART0_puts("Vtask2 receives data\n");
    14a4:	82 e3       	ldi	r24, 0x32	; 50
    14a6:	92 e0       	ldi	r25, 0x02	; 2
    14a8:	54 d2       	rcall	.+1192   	; 0x1952 <UART0_puts>
    14aa:	8e 01       	movw	r16, r28
    14ac:	0f 5f       	subi	r16, 0xFF	; 255
    14ae:	1f 4f       	sbci	r17, 0xFF	; 255
			for(uint8_t i =0 ; i<4;i++){
				UART0_OutUDec(ucRxData[i]);
    14b0:	f8 01       	movw	r30, r16
    14b2:	61 91       	ld	r22, Z+
    14b4:	8f 01       	movw	r16, r30
    14b6:	70 e0       	ldi	r23, 0x00	; 0
    14b8:	80 e0       	ldi	r24, 0x00	; 0
    14ba:	90 e0       	ldi	r25, 0x00	; 0
				UART0_putc(',');
    14bc:	2e d2       	rcall	.+1116   	; 0x191a <UART0_OutUDec>
    14be:	8c e2       	ldi	r24, 0x2C	; 44
		if(xReceivedBytes==0){
			UART0_puts("NO data\n");
		}
		else{
			UART0_puts("Vtask2 receives data\n");
			for(uint8_t i =0 ; i<4;i++){
    14c0:	13 d2       	rcall	.+1062   	; 0x18e8 <UART0_putc>
    14c2:	0e 15       	cp	r16, r14
    14c4:	1f 05       	cpc	r17, r15
				UART0_OutUDec(ucRxData[i]);
				UART0_putc(',');
			}
			UART0_putc('\n');
    14c6:	a1 f7       	brne	.-24     	; 0x14b0 <vTask2+0x4c>
    14c8:	8a e0       	ldi	r24, 0x0A	; 10
    14ca:	0e d2       	rcall	.+1052   	; 0x18e8 <UART0_putc>
			//vTaskDelay(1000/portTICK_PERIOD_MS);
		
		}
	
	}
    14cc:	d5 cf       	rjmp	.-86     	; 0x1478 <vTask2+0x14>

000014ce <vTask1>:
	  vTaskStartScheduler();

	while (1){}
}
static void vTask1(void* pvParameters)
{
    14ce:	cf 93       	push	r28
    14d0:	df 93       	push	r29
    14d2:	00 d0       	rcall	.+0      	; 0x14d4 <vTask1+0x6>
    14d4:	1f 92       	push	r1
    14d6:	cd b7       	in	r28, 0x3d	; 61
    14d8:	de b7       	in	r29, 0x3e	; 62
	uint8_t ucArrayToSend[] = { 5, 6, 9, 1 };
    14da:	85 e0       	ldi	r24, 0x05	; 5
    14dc:	89 83       	std	Y+1, r24	; 0x01
    14de:	86 e0       	ldi	r24, 0x06	; 6
    14e0:	8a 83       	std	Y+2, r24	; 0x02
    14e2:	89 e0       	ldi	r24, 0x09	; 9
    14e4:	8b 83       	std	Y+3, r24	; 0x03
    14e6:	81 e0       	ldi	r24, 0x01	; 1
    14e8:	8c 83       	std	Y+4, r24	; 0x04
    14ea:	7e 01       	movw	r14, r28
    14ec:	85 e0       	ldi	r24, 0x05	; 5
    14ee:	e8 0e       	add	r14, r24
    14f0:	f1 1c       	adc	r15, r1
    14f2:	8e 01       	movw	r16, r28
    14f4:	0f 5f       	subi	r16, 0xFF	; 255
    14f6:	1f 4f       	sbci	r17, 0xFF	; 255
	  vTaskStartScheduler();

	while (1){}
}
static void vTask1(void* pvParameters)
{
    14f8:	f8 01       	movw	r30, r16
	while(1)
	{
			size_t xBytesSent;
		
			for(uint8_t i =0 ;i<4;i++){
				++ucArrayToSend[i];
    14fa:	80 81       	ld	r24, Z
    14fc:	8f 5f       	subi	r24, 0xFF	; 255
    14fe:	81 93       	st	Z+, r24
	uint8_t ucArrayToSend[] = { 5, 6, 9, 1 };
	while(1)
	{
			size_t xBytesSent;
		
			for(uint8_t i =0 ;i<4;i++){
    1500:	ee 15       	cp	r30, r14
    1502:	ff 05       	cpc	r31, r15
    1504:	d1 f7       	brne	.-12     	; 0x14fa <vTask1+0x2c>
				++ucArrayToSend[i];
			}
		const TickType_t x100ms = pdMS_TO_TICKS( 100 );
		/* Send an array to the message buffer, blocking for a maximum of 100ms to
		wait for enough space to be available in the message buffer. */
		UART0_puts("Vtask1 sends data\n");
    1506:	88 e4       	ldi	r24, 0x48	; 72
    1508:	92 e0       	ldi	r25, 0x02	; 2
    150a:	23 d2       	rcall	.+1094   	; 0x1952 <UART0_puts>
		for(uint8_t i =0 ; i<4;i++){
				UART0_OutUDec(ucArrayToSend[i]);
    150c:	f8 01       	movw	r30, r16
    150e:	61 91       	ld	r22, Z+
    1510:	8f 01       	movw	r16, r30
    1512:	70 e0       	ldi	r23, 0x00	; 0
    1514:	80 e0       	ldi	r24, 0x00	; 0
    1516:	90 e0       	ldi	r25, 0x00	; 0
    1518:	00 d2       	rcall	.+1024   	; 0x191a <UART0_OutUDec>
				UART0_putc(',');
    151a:	8c e2       	ldi	r24, 0x2C	; 44
    151c:	e5 d1       	rcall	.+970    	; 0x18e8 <UART0_putc>
    151e:	0e 15       	cp	r16, r14
			}
		const TickType_t x100ms = pdMS_TO_TICKS( 100 );
		/* Send an array to the message buffer, blocking for a maximum of 100ms to
		wait for enough space to be available in the message buffer. */
		UART0_puts("Vtask1 sends data\n");
		for(uint8_t i =0 ; i<4;i++){
    1520:	1f 05       	cpc	r17, r15
    1522:	a1 f7       	brne	.-24     	; 0x150c <vTask1+0x3e>
				UART0_OutUDec(ucArrayToSend[i]);
				UART0_putc(',');
		}
		UART0_putc('\n');
    1524:	8a e0       	ldi	r24, 0x0A	; 10
    1526:	e0 d1       	rcall	.+960    	; 0x18e8 <UART0_putc>
    1528:	20 e0       	ldi	r18, 0x00	; 0
		xBytesSent = xMessageBufferSend( xMessageBuffer,
    152a:	30 e0       	ldi	r19, 0x00	; 0
    152c:	44 e0       	ldi	r20, 0x04	; 4
    152e:	50 e0       	ldi	r21, 0x00	; 0
    1530:	be 01       	movw	r22, r28
    1532:	6f 5f       	subi	r22, 0xFF	; 255
    1534:	7f 4f       	sbci	r23, 0xFF	; 255
    1536:	80 91 f7 09 	lds	r24, 0x09F7	; 0x8009f7 <xMessageBuffer>
    153a:	90 91 f8 09 	lds	r25, 0x09F8	; 0x8009f8 <xMessageBuffer+0x1>
    153e:	0e 94 d4 12 	call	0x25a8	; 0x25a8 <xStreamBufferSend>
										( void * ) ucArrayToSend,
										sizeof( ucArrayToSend ),
										0 );
		UART0_puts("Vtask1 sent_____R data\n");
    1542:	8b e5       	ldi	r24, 0x5B	; 91
    1544:	92 e0       	ldi	r25, 0x02	; 2
    1546:	05 d2       	rcall	.+1034   	; 0x1952 <UART0_puts>
    1548:	8a ef       	ldi	r24, 0xFA	; 250
	    vTaskDelay(4000/portTICK_PERIOD_MS);
    154a:	90 e0       	ldi	r25, 0x00	; 0
    154c:	0e 94 a9 16 	call	0x2d52	; 0x2d52 <vTaskDelay>
    1550:	d0 cf       	rjmp	.-96     	; 0x14f2 <vTask1+0x24>

00001552 <main>:
										
		
	}
    1552:	8f ef       	ldi	r24, 0xFF	; 255
/* The variable used to hold the message buffer structure. */
StaticMessageBuffer_t xMessageBufferStruct;
MessageBufferHandle_t xMessageBuffer;

int main() {
	DDRE = 0xFF;
    1554:	8d b9       	out	0x0d, r24	; 13
	UART0_init(9600);
    1556:	60 e8       	ldi	r22, 0x80	; 128
    1558:	75 e2       	ldi	r23, 0x25	; 37
    155a:	80 e0       	ldi	r24, 0x00	; 0
    155c:	90 e0       	ldi	r25, 0x00	; 0
    155e:	6f d1       	rcall	.+734    	; 0x183e <UART0_init>
	millis_init();
    1560:	0e 94 b3 18 	call	0x3166	; 0x3166 <millis_init>
	DIO_init();
    1564:	b7 d0       	rcall	.+366    	; 0x16d4 <DIO_init>
	Lcd_init(UART3,115200,1);
    1566:	21 e0       	ldi	r18, 0x01	; 1
    1568:	40 e0       	ldi	r20, 0x00	; 0
    156a:	52 ec       	ldi	r21, 0xC2	; 194
    156c:	61 e0       	ldi	r22, 0x01	; 1
    156e:	70 e0       	ldi	r23, 0x00	; 0
    1570:	83 e0       	ldi	r24, 0x03	; 3
    1572:	0e 94 3c 02 	call	0x478	; 0x478 <Lcd_init>
	lcd_set_buzzer(1);
    1576:	81 e0       	ldi	r24, 0x01	; 1
    1578:	90 e0       	ldi	r25, 0x00	; 0
    157a:	0e 94 5f 02 	call	0x4be	; 0x4be <lcd_set_buzzer>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    157e:	2f ef       	ldi	r18, 0xFF	; 255
    1580:	83 ed       	ldi	r24, 0xD3	; 211
    1582:	90 e3       	ldi	r25, 0x30	; 48
    1584:	21 50       	subi	r18, 0x01	; 1
    1586:	80 40       	sbci	r24, 0x00	; 0
    1588:	90 40       	sbci	r25, 0x00	; 0
    158a:	e1 f7       	brne	.-8      	; 0x1584 <main+0x32>
    158c:	00 c0       	rjmp	.+0      	; 0x158e <main+0x3c>
    158e:	00 00       	nop
	_delay_ms(1000);
	lcd_set_buzzer(0);
    1590:	80 e0       	ldi	r24, 0x00	; 0
    1592:	90 e0       	ldi	r25, 0x00	; 0
    1594:	0e 94 5f 02 	call	0x4be	; 0x4be <lcd_set_buzzer>
    1598:	2f ef       	ldi	r18, 0xFF	; 255
    159a:	83 ed       	ldi	r24, 0xD3	; 211
    159c:	90 e3       	ldi	r25, 0x30	; 48
    159e:	21 50       	subi	r18, 0x01	; 1
    15a0:	80 40       	sbci	r24, 0x00	; 0
    15a2:	90 40       	sbci	r25, 0x00	; 0
    15a4:	e1 f7       	brne	.-8      	; 0x159e <main+0x4c>
    15a6:	00 c0       	rjmp	.+0      	; 0x15a8 <main+0x56>
    15a8:	00 00       	nop
	_delay_ms(1000);
	Lcd_Write(LCD_TEMP_DATA,50);
    15aa:	62 e3       	ldi	r22, 0x32	; 50
    15ac:	70 e0       	ldi	r23, 0x00	; 0
    15ae:	89 e0       	ldi	r24, 0x09	; 9
    15b0:	90 e0       	ldi	r25, 0x00	; 0
    15b2:	0e 94 50 02 	call	0x4a0	; 0x4a0 <Lcd_Write>
    15b6:	2f ef       	ldi	r18, 0xFF	; 255
    15b8:	83 ed       	ldi	r24, 0xD3	; 211
    15ba:	90 e3       	ldi	r25, 0x30	; 48
    15bc:	21 50       	subi	r18, 0x01	; 1
    15be:	80 40       	sbci	r24, 0x00	; 0
    15c0:	90 40       	sbci	r25, 0x00	; 0
    15c2:	e1 f7       	brne	.-8      	; 0x15bc <main+0x6a>
    15c4:	00 c0       	rjmp	.+0      	; 0x15c6 <main+0x74>
    15c6:	00 00       	nop
	_delay_ms(1000);
	Lcd_Write(LCD_TEMP_DATA,52);
    15c8:	64 e3       	ldi	r22, 0x34	; 52
    15ca:	70 e0       	ldi	r23, 0x00	; 0
    15cc:	89 e0       	ldi	r24, 0x09	; 9
    15ce:	90 e0       	ldi	r25, 0x00	; 0
    15d0:	0e 94 50 02 	call	0x4a0	; 0x4a0 <Lcd_Write>
    15d4:	2f ef       	ldi	r18, 0xFF	; 255
    15d6:	83 ed       	ldi	r24, 0xD3	; 211
    15d8:	90 e3       	ldi	r25, 0x30	; 48
    15da:	21 50       	subi	r18, 0x01	; 1
    15dc:	80 40       	sbci	r24, 0x00	; 0
    15de:	90 40       	sbci	r25, 0x00	; 0
    15e0:	e1 f7       	brne	.-8      	; 0x15da <main+0x88>
    15e2:	00 c0       	rjmp	.+0      	; 0x15e4 <main+0x92>
    15e4:	00 00       	nop
	_delay_ms(1000);
	
	TaskHandle_t xHandle1 = NULL , xHandle2 = NULL ;
	//UART2_init(115200);
	/* Create the task without using any dynamic memory allocation. */
	xHandle1 = xTaskCreateStatic(
    15e6:	0f 2e       	mov	r0, r31
    15e8:	ff ec       	ldi	r31, 0xCF	; 207
    15ea:	cf 2e       	mov	r12, r31
    15ec:	f9 e0       	ldi	r31, 0x09	; 9
    15ee:	df 2e       	mov	r13, r31
    15f0:	f0 2d       	mov	r31, r0
    15f2:	0f 2e       	mov	r0, r31
    15f4:	fc e2       	ldi	r31, 0x2C	; 44
    15f6:	ef 2e       	mov	r14, r31
    15f8:	fa e0       	ldi	r31, 0x0A	; 10
    15fa:	ff 2e       	mov	r15, r31
    15fc:	f0 2d       	mov	r31, r0
    15fe:	02 e0       	ldi	r16, 0x02	; 2
    1600:	20 e0       	ldi	r18, 0x00	; 0
    1602:	30 e0       	ldi	r19, 0x00	; 0
    1604:	48 ec       	ldi	r20, 0xC8	; 200
    1606:	50 e0       	ldi	r21, 0x00	; 0
    1608:	63 e7       	ldi	r22, 0x73	; 115
    160a:	72 e0       	ldi	r23, 0x02	; 2
    160c:	87 e6       	ldi	r24, 0x67	; 103
    160e:	9a e0       	ldi	r25, 0x0A	; 10
    1610:	0e 94 79 14 	call	0x28f2	; 0x28f2 <xTaskCreateStatic>
					NULL, /* Parameter passed into the task. */
					2,/* Priority at which the task is created. */
					xStack1, /* Array to use as the task's stack. */
					&xTask1Buffer); /* Variable to hold the task's data structure. */
	
	xHandle2 = xTaskCreateStatic(
    1614:	0f 2e       	mov	r0, r31
    1616:	f9 ef       	ldi	r31, 0xF9	; 249
    1618:	cf 2e       	mov	r12, r31
    161a:	f9 e0       	ldi	r31, 0x09	; 9
    161c:	df 2e       	mov	r13, r31
    161e:	f0 2d       	mov	r31, r0
    1620:	0f 2e       	mov	r0, r31
    1622:	f3 e0       	ldi	r31, 0x03	; 3
    1624:	ef 2e       	mov	r14, r31
    1626:	fb e0       	ldi	r31, 0x0B	; 11
    1628:	ff 2e       	mov	r15, r31
    162a:	f0 2d       	mov	r31, r0
    162c:	20 e0       	ldi	r18, 0x00	; 0
    162e:	30 e0       	ldi	r19, 0x00	; 0
    1630:	48 ec       	ldi	r20, 0xC8	; 200
    1632:	50 e0       	ldi	r21, 0x00	; 0
    1634:	69 e7       	ldi	r22, 0x79	; 121
    1636:	72 e0       	ldi	r23, 0x02	; 2
    1638:	82 e3       	ldi	r24, 0x32	; 50
    163a:	9a e0       	ldi	r25, 0x0A	; 10
    163c:	0e 94 79 14 	call	0x28f2	; 0x28f2 <xTaskCreateStatic>
				&xTask2Buffer ); /* Variable to hold the task's data structure. */



		//
		xMessageBuffer = xMessageBufferCreateStatic( sizeof( ucStorageBuffer ),
    1640:	04 ef       	ldi	r16, 0xF4	; 244
    1642:	1a e0       	ldi	r17, 0x0A	; 10
    1644:	21 ec       	ldi	r18, 0xC1	; 193
    1646:	34 e0       	ldi	r19, 0x04	; 4
    1648:	41 e0       	ldi	r20, 0x01	; 1
    164a:	60 e0       	ldi	r22, 0x00	; 0
    164c:	70 e0       	ldi	r23, 0x00	; 0
    164e:	84 e6       	ldi	r24, 0x64	; 100
    1650:	90 e0       	ldi	r25, 0x00	; 0
    1652:	69 d7       	rcall	.+3794   	; 0x2526 <xStreamBufferGenericCreateStatic>
    1654:	90 93 f8 09 	sts	0x09F8, r25	; 0x8009f8 <xMessageBuffer+0x1>
    1658:	80 93 f7 09 	sts	0x09F7, r24	; 0x8009f7 <xMessageBuffer>
														ucStorageBuffer, &xMessageBufferStruct );


while(1){
		Lcd_Write(LCD_TEMP_DATA,50);
    165c:	62 e3       	ldi	r22, 0x32	; 50
    165e:	70 e0       	ldi	r23, 0x00	; 0
    1660:	89 e0       	ldi	r24, 0x09	; 9
    1662:	90 e0       	ldi	r25, 0x00	; 0
    1664:	0e 94 50 02 	call	0x4a0	; 0x4a0 <Lcd_Write>
    1668:	2f ef       	ldi	r18, 0xFF	; 255
    166a:	83 ed       	ldi	r24, 0xD3	; 211
    166c:	90 e3       	ldi	r25, 0x30	; 48
    166e:	21 50       	subi	r18, 0x01	; 1
    1670:	80 40       	sbci	r24, 0x00	; 0
    1672:	90 40       	sbci	r25, 0x00	; 0
    1674:	e1 f7       	brne	.-8      	; 0x166e <main+0x11c>
    1676:	00 c0       	rjmp	.+0      	; 0x1678 <main+0x126>
    1678:	00 00       	nop
		_delay_ms(1000);
		Lcd_Write(LCD_TEMP_DATA,52);
    167a:	64 e3       	ldi	r22, 0x34	; 52
    167c:	70 e0       	ldi	r23, 0x00	; 0
    167e:	89 e0       	ldi	r24, 0x09	; 9
    1680:	90 e0       	ldi	r25, 0x00	; 0
    1682:	0e 94 50 02 	call	0x4a0	; 0x4a0 <Lcd_Write>
    1686:	2f ef       	ldi	r18, 0xFF	; 255
    1688:	83 ed       	ldi	r24, 0xD3	; 211
    168a:	90 e3       	ldi	r25, 0x30	; 48
    168c:	21 50       	subi	r18, 0x01	; 1
    168e:	80 40       	sbci	r24, 0x00	; 0
    1690:	90 40       	sbci	r25, 0x00	; 0
    1692:	e1 f7       	brne	.-8      	; 0x168c <main+0x13a>
    1694:	00 c0       	rjmp	.+0      	; 0x1696 <main+0x144>
    1696:	00 00       	nop
    1698:	e1 cf       	rjmp	.-62     	; 0x165c <main+0x10a>

0000169a <__vector_29>:
	return returned_data ;
}


ISR(ADC_vect)
{
    169a:	1f 92       	push	r1
    169c:	0f 92       	push	r0
    169e:	0f b6       	in	r0, 0x3f	; 63
    16a0:	0f 92       	push	r0
    16a2:	11 24       	eor	r1, r1
    16a4:	2f 93       	push	r18
    16a6:	8f 93       	push	r24
    16a8:	9f 93       	push	r25
	   uint8_t The_low_adc_reg = ADC_DATA_REG_LOW ;
    16aa:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
	  // get 10 bits out of the high and low register .
	  g_analog_data =  The_low_adc_reg | (ADC_DATA_REG_HIGH <<8);
    16ae:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
    16b2:	90 e0       	ldi	r25, 0x00	; 0
    16b4:	92 2b       	or	r25, r18
    16b6:	90 93 27 05 	sts	0x0527, r25	; 0x800527 <g_analog_data+0x1>
    16ba:	80 93 26 05 	sts	0x0526, r24	; 0x800526 <g_analog_data>
	  g_converted = 1 ;
    16be:	81 e0       	ldi	r24, 0x01	; 1
    16c0:	80 93 25 05 	sts	0x0525, r24	; 0x800525 <g_converted>
}
    16c4:	9f 91       	pop	r25
    16c6:	8f 91       	pop	r24
    16c8:	2f 91       	pop	r18
    16ca:	0f 90       	pop	r0
    16cc:	0f be       	out	0x3f, r0	; 63
    16ce:	0f 90       	pop	r0
    16d0:	1f 90       	pop	r1
    16d2:	18 95       	reti

000016d4 <DIO_init>:
void Spark_change_state(uint8_t state)
{
	if (HIGH == state)
		SET_BIT(SPARK_DATA_REG , SPARK_PIN);
	else if(LOW == state)
		CLR_BIT(SPARK_DATA_REG , SPARK_PIN);
    16d4:	50 98       	cbi	0x0a, 0	; 10
    16d6:	51 98       	cbi	0x0a, 1	; 10
    16d8:	51 98       	cbi	0x0a, 1	; 10
    16da:	53 98       	cbi	0x0a, 3	; 10
    16dc:	20 98       	cbi	0x04, 0	; 4
    16de:	55 98       	cbi	0x0a, 5	; 10
    16e0:	54 98       	cbi	0x0a, 4	; 10
    16e2:	3c 9a       	sbi	0x07, 4	; 7
    16e4:	3f 9a       	sbi	0x07, 7	; 7
    16e6:	3d 9a       	sbi	0x07, 5	; 7
    16e8:	39 9a       	sbi	0x07, 1	; 7
    16ea:	39 9a       	sbi	0x07, 1	; 7
    16ec:	57 9a       	sbi	0x0a, 7	; 10
    16ee:	38 9a       	sbi	0x07, 0	; 7
    16f0:	38 98       	cbi	0x07, 0	; 7
    16f2:	56 9a       	sbi	0x0a, 6	; 10
    16f4:	3b 9a       	sbi	0x07, 3	; 7
    16f6:	e4 e0       	ldi	r30, 0x04	; 4
    16f8:	f1 e0       	ldi	r31, 0x01	; 1
    16fa:	80 81       	ld	r24, Z
    16fc:	84 60       	ori	r24, 0x04	; 4
    16fe:	80 83       	st	Z, r24
    1700:	3f 9a       	sbi	0x07, 7	; 7
    1702:	3f 9a       	sbi	0x07, 7	; 7
    1704:	3f 9a       	sbi	0x07, 7	; 7
    1706:	e1 e0       	ldi	r30, 0x01	; 1
    1708:	f1 e0       	ldi	r31, 0x01	; 1
    170a:	80 81       	ld	r24, Z
    170c:	8e 7f       	andi	r24, 0xFE	; 254
    170e:	80 83       	st	Z, r24
    1710:	80 81       	ld	r24, Z
    1712:	82 60       	ori	r24, 0x02	; 2
    1714:	80 83       	st	Z, r24
    1716:	e2 e0       	ldi	r30, 0x02	; 2
    1718:	f1 e0       	ldi	r31, 0x01	; 1
    171a:	80 81       	ld	r24, Z
    171c:	81 60       	ori	r24, 0x01	; 1
    171e:	80 83       	st	Z, r24
    1720:	52 98       	cbi	0x0a, 2	; 10
    1722:	53 9a       	sbi	0x0a, 3	; 10
    1724:	5a 9a       	sbi	0x0b, 2	; 11
    1726:	08 95       	ret

00001728 <Modbus_change_state>:

//_________ MODE BUS initialize and enable______________________//

void Modbus_change_state(uint8_t device ,uint8_t state){
	
	switch (device){
    1728:	88 23       	and	r24, r24
    172a:	19 f0       	breq	.+6      	; 0x1732 <Modbus_change_state+0xa>
    172c:	81 30       	cpi	r24, 0x01	; 1
    172e:	89 f0       	breq	.+34     	; 0x1752 <Modbus_change_state+0x2a>
    1730:	08 95       	ret
		case DEVICE_0:
		 	if (HIGH == state)
    1732:	61 30       	cpi	r22, 0x01	; 1
    1734:	31 f4       	brne	.+12     	; 0x1742 <Modbus_change_state+0x1a>
		 		SET_BIT(DEVICE_0_MODBUS_DATA_REG , DEVICE_0_MODBUS_PIN);
    1736:	e5 e0       	ldi	r30, 0x05	; 5
    1738:	f1 e0       	ldi	r31, 0x01	; 1
    173a:	80 81       	ld	r24, Z
    173c:	84 60       	ori	r24, 0x04	; 4
    173e:	80 83       	st	Z, r24
    1740:	08 95       	ret
		 	else if(LOW == state)
    1742:	61 11       	cpse	r22, r1
    1744:	0d c0       	rjmp	.+26     	; 0x1760 <Modbus_change_state+0x38>
		 		CLR_BIT(DEVICE_0_MODBUS_DATA_REG , DEVICE_0_MODBUS_PIN);
    1746:	e5 e0       	ldi	r30, 0x05	; 5
    1748:	f1 e0       	ldi	r31, 0x01	; 1
    174a:	80 81       	ld	r24, Z
    174c:	8b 7f       	andi	r24, 0xFB	; 251
    174e:	80 83       	st	Z, r24
    1750:	08 95       	ret
			
			break;
		case DEVICE_1:
		     if (HIGH == state)
    1752:	61 30       	cpi	r22, 0x01	; 1
    1754:	11 f4       	brne	.+4      	; 0x175a <Modbus_change_state+0x32>
		         SET_BIT(DEVICE_1_MODBUS_DATA_REG , DEVICE_1_MODBUS_PIN);
    1756:	47 9a       	sbi	0x08, 7	; 8
    1758:	08 95       	ret
		     else if(LOW == state)
    175a:	61 11       	cpse	r22, r1
    175c:	01 c0       	rjmp	.+2      	; 0x1760 <Modbus_change_state+0x38>
		         CLR_BIT(DEVICE_1_MODBUS_DATA_REG , DEVICE_1_MODBUS_PIN);
    175e:	47 98       	cbi	0x08, 7	; 8
    1760:	08 95       	ret

00001762 <__vector_25>:

	while ((c = pgm_read_byte(progmem_s++))) {
		UART3_putc(c);
	}

} /* UART3_puts_p */
    1762:	1f 92       	push	r1
    1764:	0f 92       	push	r0
    1766:	0f b6       	in	r0, 0x3f	; 63
    1768:	0f 92       	push	r0
    176a:	11 24       	eor	r1, r1
    176c:	0b b6       	in	r0, 0x3b	; 59
    176e:	0f 92       	push	r0
    1770:	2f 93       	push	r18
    1772:	3f 93       	push	r19
    1774:	4f 93       	push	r20
    1776:	5f 93       	push	r21
    1778:	8f 93       	push	r24
    177a:	9f 93       	push	r25
    177c:	ef 93       	push	r30
    177e:	ff 93       	push	r31
    1780:	20 91 c0 00 	lds	r18, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
    1784:	30 91 c6 00 	lds	r19, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    1788:	28 71       	andi	r18, 0x18	; 24
    178a:	80 91 3d 08 	lds	r24, 0x083D	; 0x80083d <UART_RxHead>
    178e:	90 e0       	ldi	r25, 0x00	; 0
    1790:	01 96       	adiw	r24, 0x01	; 1
    1792:	8f 77       	andi	r24, 0x7F	; 127
    1794:	99 27       	eor	r25, r25
    1796:	40 91 3c 08 	lds	r20, 0x083C	; 0x80083c <UART_RxTail>
    179a:	50 e0       	ldi	r21, 0x00	; 0
    179c:	84 17       	cp	r24, r20
    179e:	95 07       	cpc	r25, r21
    17a0:	39 f0       	breq	.+14     	; 0x17b0 <__vector_25+0x4e>
    17a2:	80 93 3d 08 	sts	0x083D, r24	; 0x80083d <UART_RxHead>
    17a6:	fc 01       	movw	r30, r24
    17a8:	e0 5c       	subi	r30, 0xC0	; 192
    17aa:	f7 4f       	sbci	r31, 0xF7	; 247
    17ac:	30 83       	st	Z, r19
    17ae:	01 c0       	rjmp	.+2      	; 0x17b2 <__vector_25+0x50>
    17b0:	22 e0       	ldi	r18, 0x02	; 2
    17b2:	20 93 3b 08 	sts	0x083B, r18	; 0x80083b <UART_LastRxError>
    17b6:	ff 91       	pop	r31
    17b8:	ef 91       	pop	r30
    17ba:	9f 91       	pop	r25
    17bc:	8f 91       	pop	r24
    17be:	5f 91       	pop	r21
    17c0:	4f 91       	pop	r20
    17c2:	3f 91       	pop	r19
    17c4:	2f 91       	pop	r18
    17c6:	0f 90       	pop	r0
    17c8:	0b be       	out	0x3b, r0	; 59
    17ca:	0f 90       	pop	r0
    17cc:	0f be       	out	0x3f, r0	; 63
    17ce:	0f 90       	pop	r0
    17d0:	1f 90       	pop	r1
    17d2:	18 95       	reti

000017d4 <__vector_26>:
    17d4:	1f 92       	push	r1
    17d6:	0f 92       	push	r0
    17d8:	0f b6       	in	r0, 0x3f	; 63
    17da:	0f 92       	push	r0
    17dc:	11 24       	eor	r1, r1
    17de:	0b b6       	in	r0, 0x3b	; 59
    17e0:	0f 92       	push	r0
    17e2:	8f 93       	push	r24
    17e4:	9f 93       	push	r25
    17e6:	ef 93       	push	r30
    17e8:	ff 93       	push	r31
    17ea:	90 91 3f 08 	lds	r25, 0x083F	; 0x80083f <UART_TxHead>
    17ee:	80 91 3e 08 	lds	r24, 0x083E	; 0x80083e <UART_TxTail>
    17f2:	98 17       	cp	r25, r24
    17f4:	89 f0       	breq	.+34     	; 0x1818 <__vector_26+0x44>
    17f6:	80 91 3e 08 	lds	r24, 0x083E	; 0x80083e <UART_TxTail>
    17fa:	90 e0       	ldi	r25, 0x00	; 0
    17fc:	01 96       	adiw	r24, 0x01	; 1
    17fe:	8f 77       	andi	r24, 0x7F	; 127
    1800:	99 27       	eor	r25, r25
    1802:	80 93 3e 08 	sts	0x083E, r24	; 0x80083e <UART_TxTail>
    1806:	fc 01       	movw	r30, r24
    1808:	e0 54       	subi	r30, 0x40	; 64
    180a:	f7 4f       	sbci	r31, 0xF7	; 247
    180c:	80 81       	ld	r24, Z
    180e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    1812:	10 92 2b 05 	sts	0x052B, r1	; 0x80052b <UART0_Transmission_end>
    1816:	08 c0       	rjmp	.+16     	; 0x1828 <__vector_26+0x54>
    1818:	e1 ec       	ldi	r30, 0xC1	; 193
    181a:	f0 e0       	ldi	r31, 0x00	; 0
    181c:	80 81       	ld	r24, Z
    181e:	8f 7d       	andi	r24, 0xDF	; 223
    1820:	80 83       	st	Z, r24
    1822:	81 e0       	ldi	r24, 0x01	; 1
    1824:	80 93 2b 05 	sts	0x052B, r24	; 0x80052b <UART0_Transmission_end>
    1828:	ff 91       	pop	r31
    182a:	ef 91       	pop	r30
    182c:	9f 91       	pop	r25
    182e:	8f 91       	pop	r24
    1830:	0f 90       	pop	r0
    1832:	0b be       	out	0x3b, r0	; 59
    1834:	0f 90       	pop	r0
    1836:	0f be       	out	0x3f, r0	; 63
    1838:	0f 90       	pop	r0
    183a:	1f 90       	pop	r1
    183c:	18 95       	reti

0000183e <UART0_init>:
    183e:	0f 93       	push	r16
    1840:	1f 93       	push	r17
    1842:	8b 01       	movw	r16, r22
    1844:	9c 01       	movw	r18, r24
    1846:	f8 94       	cli
    1848:	10 92 3f 08 	sts	0x083F, r1	; 0x80083f <UART_TxHead>
    184c:	10 92 3e 08 	sts	0x083E, r1	; 0x80083e <UART_TxTail>
    1850:	10 92 3d 08 	sts	0x083D, r1	; 0x80083d <UART_RxHead>
    1854:	10 92 3c 08 	sts	0x083C, r1	; 0x80083c <UART_RxTail>
    1858:	78 94       	sei
    185a:	dc 01       	movw	r26, r24
    185c:	cb 01       	movw	r24, r22
    185e:	80 58       	subi	r24, 0x80	; 128
    1860:	9b 47       	sbci	r25, 0x7B	; 123
    1862:	a1 4e       	sbci	r26, 0xE1	; 225
    1864:	bf 4f       	sbci	r27, 0xFF	; 255
    1866:	88 0f       	add	r24, r24
    1868:	99 1f       	adc	r25, r25
    186a:	aa 1f       	adc	r26, r26
    186c:	bb 1f       	adc	r27, r27
    186e:	88 0f       	add	r24, r24
    1870:	99 1f       	adc	r25, r25
    1872:	aa 1f       	adc	r26, r26
    1874:	bb 1f       	adc	r27, r27
    1876:	bc 01       	movw	r22, r24
    1878:	cd 01       	movw	r24, r26
    187a:	66 0f       	add	r22, r22
    187c:	77 1f       	adc	r23, r23
    187e:	88 1f       	adc	r24, r24
    1880:	99 1f       	adc	r25, r25
    1882:	00 0f       	add	r16, r16
    1884:	11 1f       	adc	r17, r17
    1886:	22 1f       	adc	r18, r18
    1888:	33 1f       	adc	r19, r19
    188a:	00 0f       	add	r16, r16
    188c:	11 1f       	adc	r17, r17
    188e:	22 1f       	adc	r18, r18
    1890:	33 1f       	adc	r19, r19
    1892:	a9 01       	movw	r20, r18
    1894:	98 01       	movw	r18, r16
    1896:	22 0f       	add	r18, r18
    1898:	33 1f       	adc	r19, r19
    189a:	44 1f       	adc	r20, r20
    189c:	55 1f       	adc	r21, r21
    189e:	22 0f       	add	r18, r18
    18a0:	33 1f       	adc	r19, r19
    18a2:	44 1f       	adc	r20, r20
    18a4:	55 1f       	adc	r21, r21
    18a6:	0e 94 f2 18 	call	0x31e4	; 0x31e4 <__udivmodsi4>
    18aa:	ba 01       	movw	r22, r20
    18ac:	a9 01       	movw	r20, r18
    18ae:	41 50       	subi	r20, 0x01	; 1
    18b0:	51 09       	sbc	r21, r1
    18b2:	61 09       	sbc	r22, r1
    18b4:	71 09       	sbc	r23, r1
    18b6:	57 ff       	sbrs	r21, 7
    18b8:	06 c0       	rjmp	.+12     	; 0x18c6 <UART0_init+0x88>
    18ba:	82 e0       	ldi	r24, 0x02	; 2
    18bc:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
    18c0:	5f 77       	andi	r21, 0x7F	; 127
    18c2:	66 27       	eor	r22, r22
    18c4:	77 27       	eor	r23, r23
    18c6:	bb 27       	eor	r27, r27
    18c8:	a7 2f       	mov	r26, r23
    18ca:	96 2f       	mov	r25, r22
    18cc:	85 2f       	mov	r24, r21
    18ce:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
    18d2:	40 93 c4 00 	sts	0x00C4, r20	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
    18d6:	88 e9       	ldi	r24, 0x98	; 152
    18d8:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    18dc:	86 e0       	ldi	r24, 0x06	; 6
    18de:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
    18e2:	1f 91       	pop	r17
    18e4:	0f 91       	pop	r16
    18e6:	08 95       	ret

000018e8 <UART0_putc>:
    18e8:	40 91 3f 08 	lds	r20, 0x083F	; 0x80083f <UART_TxHead>
    18ec:	50 e0       	ldi	r21, 0x00	; 0
    18ee:	4f 5f       	subi	r20, 0xFF	; 255
    18f0:	5f 4f       	sbci	r21, 0xFF	; 255
    18f2:	4f 77       	andi	r20, 0x7F	; 127
    18f4:	55 27       	eor	r21, r21
    18f6:	20 91 3e 08 	lds	r18, 0x083E	; 0x80083e <UART_TxTail>
    18fa:	30 e0       	ldi	r19, 0x00	; 0
    18fc:	42 17       	cp	r20, r18
    18fe:	53 07       	cpc	r21, r19
    1900:	d1 f3       	breq	.-12     	; 0x18f6 <UART0_putc+0xe>
    1902:	fa 01       	movw	r30, r20
    1904:	e0 54       	subi	r30, 0x40	; 64
    1906:	f7 4f       	sbci	r31, 0xF7	; 247
    1908:	80 83       	st	Z, r24
    190a:	40 93 3f 08 	sts	0x083F, r20	; 0x80083f <UART_TxHead>
    190e:	e1 ec       	ldi	r30, 0xC1	; 193
    1910:	f0 e0       	ldi	r31, 0x00	; 0
    1912:	80 81       	ld	r24, Z
    1914:	80 62       	ori	r24, 0x20	; 32
    1916:	80 83       	st	Z, r24
    1918:	08 95       	ret

0000191a <UART0_OutUDec>:
    191a:	0f 93       	push	r16
    191c:	1f 93       	push	r17
    191e:	cf 93       	push	r28
    1920:	df 93       	push	r29
    1922:	6a 30       	cpi	r22, 0x0A	; 10
    1924:	71 05       	cpc	r23, r1
    1926:	81 05       	cpc	r24, r1
    1928:	91 05       	cpc	r25, r1
    192a:	58 f0       	brcs	.+22     	; 0x1942 <UART0_OutUDec+0x28>
    192c:	2a e0       	ldi	r18, 0x0A	; 10
    192e:	30 e0       	ldi	r19, 0x00	; 0
    1930:	40 e0       	ldi	r20, 0x00	; 0
    1932:	50 e0       	ldi	r21, 0x00	; 0
    1934:	0e 94 f2 18 	call	0x31e4	; 0x31e4 <__udivmodsi4>
    1938:	06 2f       	mov	r16, r22
    193a:	ca 01       	movw	r24, r20
    193c:	b9 01       	movw	r22, r18
    193e:	ed df       	rcall	.-38     	; 0x191a <UART0_OutUDec>
    1940:	60 2f       	mov	r22, r16
    1942:	80 e3       	ldi	r24, 0x30	; 48
    1944:	86 0f       	add	r24, r22
    1946:	d0 df       	rcall	.-96     	; 0x18e8 <UART0_putc>
    1948:	df 91       	pop	r29
    194a:	cf 91       	pop	r28
    194c:	1f 91       	pop	r17
    194e:	0f 91       	pop	r16
    1950:	08 95       	ret

00001952 <UART0_puts>:
    1952:	cf 93       	push	r28
    1954:	df 93       	push	r29
    1956:	ec 01       	movw	r28, r24
    1958:	88 81       	ld	r24, Y
    195a:	88 23       	and	r24, r24
    195c:	29 f0       	breq	.+10     	; 0x1968 <UART0_puts+0x16>
    195e:	21 96       	adiw	r28, 0x01	; 1
    1960:	c3 df       	rcall	.-122    	; 0x18e8 <UART0_putc>
    1962:	89 91       	ld	r24, Y+
    1964:	81 11       	cpse	r24, r1
    1966:	fc cf       	rjmp	.-8      	; 0x1960 <UART0_puts+0xe>
    1968:	df 91       	pop	r29
    196a:	cf 91       	pop	r28
    196c:	08 95       	ret

0000196e <__vector_36>:
    196e:	1f 92       	push	r1
    1970:	0f 92       	push	r0
    1972:	0f b6       	in	r0, 0x3f	; 63
    1974:	0f 92       	push	r0
    1976:	11 24       	eor	r1, r1
    1978:	0b b6       	in	r0, 0x3b	; 59
    197a:	0f 92       	push	r0
    197c:	2f 93       	push	r18
    197e:	3f 93       	push	r19
    1980:	4f 93       	push	r20
    1982:	5f 93       	push	r21
    1984:	8f 93       	push	r24
    1986:	9f 93       	push	r25
    1988:	ef 93       	push	r30
    198a:	ff 93       	push	r31
    198c:	20 91 c8 00 	lds	r18, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
    1990:	30 91 ce 00 	lds	r19, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    1994:	28 71       	andi	r18, 0x18	; 24
    1996:	80 91 38 07 	lds	r24, 0x0738	; 0x800738 <UART1_RxHead>
    199a:	90 e0       	ldi	r25, 0x00	; 0
    199c:	01 96       	adiw	r24, 0x01	; 1
    199e:	8f 77       	andi	r24, 0x7F	; 127
    19a0:	99 27       	eor	r25, r25
    19a2:	40 91 37 07 	lds	r20, 0x0737	; 0x800737 <UART1_RxTail>
    19a6:	50 e0       	ldi	r21, 0x00	; 0
    19a8:	84 17       	cp	r24, r20
    19aa:	95 07       	cpc	r25, r21
    19ac:	39 f0       	breq	.+14     	; 0x19bc <__vector_36+0x4e>
    19ae:	80 93 38 07 	sts	0x0738, r24	; 0x800738 <UART1_RxHead>
    19b2:	fc 01       	movw	r30, r24
    19b4:	e5 5c       	subi	r30, 0xC5	; 197
    19b6:	f8 4f       	sbci	r31, 0xF8	; 248
    19b8:	30 83       	st	Z, r19
    19ba:	01 c0       	rjmp	.+2      	; 0x19be <__vector_36+0x50>
    19bc:	22 e0       	ldi	r18, 0x02	; 2
    19be:	20 93 36 07 	sts	0x0736, r18	; 0x800736 <UART1_LastRxError>
    19c2:	ff 91       	pop	r31
    19c4:	ef 91       	pop	r30
    19c6:	9f 91       	pop	r25
    19c8:	8f 91       	pop	r24
    19ca:	5f 91       	pop	r21
    19cc:	4f 91       	pop	r20
    19ce:	3f 91       	pop	r19
    19d0:	2f 91       	pop	r18
    19d2:	0f 90       	pop	r0
    19d4:	0b be       	out	0x3b, r0	; 59
    19d6:	0f 90       	pop	r0
    19d8:	0f be       	out	0x3f, r0	; 63
    19da:	0f 90       	pop	r0
    19dc:	1f 90       	pop	r1
    19de:	18 95       	reti

000019e0 <__vector_37>:
    19e0:	1f 92       	push	r1
    19e2:	0f 92       	push	r0
    19e4:	0f b6       	in	r0, 0x3f	; 63
    19e6:	0f 92       	push	r0
    19e8:	11 24       	eor	r1, r1
    19ea:	0b b6       	in	r0, 0x3b	; 59
    19ec:	0f 92       	push	r0
    19ee:	8f 93       	push	r24
    19f0:	9f 93       	push	r25
    19f2:	ef 93       	push	r30
    19f4:	ff 93       	push	r31
    19f6:	90 91 3a 07 	lds	r25, 0x073A	; 0x80073a <UART1_TxHead>
    19fa:	80 91 39 07 	lds	r24, 0x0739	; 0x800739 <UART1_TxTail>
    19fe:	98 17       	cp	r25, r24
    1a00:	89 f0       	breq	.+34     	; 0x1a24 <__vector_37+0x44>
    1a02:	80 91 39 07 	lds	r24, 0x0739	; 0x800739 <UART1_TxTail>
    1a06:	90 e0       	ldi	r25, 0x00	; 0
    1a08:	01 96       	adiw	r24, 0x01	; 1
    1a0a:	8f 77       	andi	r24, 0x7F	; 127
    1a0c:	99 27       	eor	r25, r25
    1a0e:	80 93 39 07 	sts	0x0739, r24	; 0x800739 <UART1_TxTail>
    1a12:	fc 01       	movw	r30, r24
    1a14:	e5 54       	subi	r30, 0x45	; 69
    1a16:	f8 4f       	sbci	r31, 0xF8	; 248
    1a18:	80 81       	ld	r24, Z
    1a1a:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    1a1e:	10 92 2a 05 	sts	0x052A, r1	; 0x80052a <UART1_Transmission_end>
    1a22:	08 c0       	rjmp	.+16     	; 0x1a34 <__vector_37+0x54>
    1a24:	e9 ec       	ldi	r30, 0xC9	; 201
    1a26:	f0 e0       	ldi	r31, 0x00	; 0
    1a28:	80 81       	ld	r24, Z
    1a2a:	8f 7d       	andi	r24, 0xDF	; 223
    1a2c:	80 83       	st	Z, r24
    1a2e:	81 e0       	ldi	r24, 0x01	; 1
    1a30:	80 93 2a 05 	sts	0x052A, r24	; 0x80052a <UART1_Transmission_end>
    1a34:	ff 91       	pop	r31
    1a36:	ef 91       	pop	r30
    1a38:	9f 91       	pop	r25
    1a3a:	8f 91       	pop	r24
    1a3c:	0f 90       	pop	r0
    1a3e:	0b be       	out	0x3b, r0	; 59
    1a40:	0f 90       	pop	r0
    1a42:	0f be       	out	0x3f, r0	; 63
    1a44:	0f 90       	pop	r0
    1a46:	1f 90       	pop	r1
    1a48:	18 95       	reti

00001a4a <UART1_init>:
    1a4a:	0f 93       	push	r16
    1a4c:	1f 93       	push	r17
    1a4e:	8b 01       	movw	r16, r22
    1a50:	9c 01       	movw	r18, r24
    1a52:	f8 94       	cli
    1a54:	10 92 3a 07 	sts	0x073A, r1	; 0x80073a <UART1_TxHead>
    1a58:	10 92 39 07 	sts	0x0739, r1	; 0x800739 <UART1_TxTail>
    1a5c:	10 92 38 07 	sts	0x0738, r1	; 0x800738 <UART1_RxHead>
    1a60:	10 92 37 07 	sts	0x0737, r1	; 0x800737 <UART1_RxTail>
    1a64:	78 94       	sei
    1a66:	dc 01       	movw	r26, r24
    1a68:	cb 01       	movw	r24, r22
    1a6a:	80 58       	subi	r24, 0x80	; 128
    1a6c:	9b 47       	sbci	r25, 0x7B	; 123
    1a6e:	a1 4e       	sbci	r26, 0xE1	; 225
    1a70:	bf 4f       	sbci	r27, 0xFF	; 255
    1a72:	88 0f       	add	r24, r24
    1a74:	99 1f       	adc	r25, r25
    1a76:	aa 1f       	adc	r26, r26
    1a78:	bb 1f       	adc	r27, r27
    1a7a:	88 0f       	add	r24, r24
    1a7c:	99 1f       	adc	r25, r25
    1a7e:	aa 1f       	adc	r26, r26
    1a80:	bb 1f       	adc	r27, r27
    1a82:	bc 01       	movw	r22, r24
    1a84:	cd 01       	movw	r24, r26
    1a86:	66 0f       	add	r22, r22
    1a88:	77 1f       	adc	r23, r23
    1a8a:	88 1f       	adc	r24, r24
    1a8c:	99 1f       	adc	r25, r25
    1a8e:	00 0f       	add	r16, r16
    1a90:	11 1f       	adc	r17, r17
    1a92:	22 1f       	adc	r18, r18
    1a94:	33 1f       	adc	r19, r19
    1a96:	00 0f       	add	r16, r16
    1a98:	11 1f       	adc	r17, r17
    1a9a:	22 1f       	adc	r18, r18
    1a9c:	33 1f       	adc	r19, r19
    1a9e:	a9 01       	movw	r20, r18
    1aa0:	98 01       	movw	r18, r16
    1aa2:	22 0f       	add	r18, r18
    1aa4:	33 1f       	adc	r19, r19
    1aa6:	44 1f       	adc	r20, r20
    1aa8:	55 1f       	adc	r21, r21
    1aaa:	22 0f       	add	r18, r18
    1aac:	33 1f       	adc	r19, r19
    1aae:	44 1f       	adc	r20, r20
    1ab0:	55 1f       	adc	r21, r21
    1ab2:	0e 94 f2 18 	call	0x31e4	; 0x31e4 <__udivmodsi4>
    1ab6:	ba 01       	movw	r22, r20
    1ab8:	a9 01       	movw	r20, r18
    1aba:	41 50       	subi	r20, 0x01	; 1
    1abc:	51 09       	sbc	r21, r1
    1abe:	61 09       	sbc	r22, r1
    1ac0:	71 09       	sbc	r23, r1
    1ac2:	57 ff       	sbrs	r21, 7
    1ac4:	06 c0       	rjmp	.+12     	; 0x1ad2 <UART1_init+0x88>
    1ac6:	82 e0       	ldi	r24, 0x02	; 2
    1ac8:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
    1acc:	5f 77       	andi	r21, 0x7F	; 127
    1ace:	66 27       	eor	r22, r22
    1ad0:	77 27       	eor	r23, r23
    1ad2:	bb 27       	eor	r27, r27
    1ad4:	a7 2f       	mov	r26, r23
    1ad6:	96 2f       	mov	r25, r22
    1ad8:	85 2f       	mov	r24, r21
    1ada:	80 93 cd 00 	sts	0x00CD, r24	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7000cd>
    1ade:	40 93 cc 00 	sts	0x00CC, r20	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7000cc>
    1ae2:	88 e9       	ldi	r24, 0x98	; 152
    1ae4:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7000c9>
    1ae8:	86 e0       	ldi	r24, 0x06	; 6
    1aea:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7000ca>
    1aee:	1f 91       	pop	r17
    1af0:	0f 91       	pop	r16
    1af2:	08 95       	ret

00001af4 <UART1_getc>:
    1af4:	f8 94       	cli
    1af6:	90 91 38 07 	lds	r25, 0x0738	; 0x800738 <UART1_RxHead>
    1afa:	80 91 37 07 	lds	r24, 0x0737	; 0x800737 <UART1_RxTail>
    1afe:	98 13       	cpse	r25, r24
    1b00:	04 c0       	rjmp	.+8      	; 0x1b0a <UART1_getc+0x16>
    1b02:	78 94       	sei
    1b04:	80 e0       	ldi	r24, 0x00	; 0
    1b06:	91 e0       	ldi	r25, 0x01	; 1
    1b08:	08 95       	ret
    1b0a:	80 91 37 07 	lds	r24, 0x0737	; 0x800737 <UART1_RxTail>
    1b0e:	90 e0       	ldi	r25, 0x00	; 0
    1b10:	01 96       	adiw	r24, 0x01	; 1
    1b12:	8f 77       	andi	r24, 0x7F	; 127
    1b14:	99 27       	eor	r25, r25
    1b16:	80 93 37 07 	sts	0x0737, r24	; 0x800737 <UART1_RxTail>
    1b1a:	78 94       	sei
    1b1c:	fc 01       	movw	r30, r24
    1b1e:	e5 5c       	subi	r30, 0xC5	; 197
    1b20:	f8 4f       	sbci	r31, 0xF8	; 248
    1b22:	20 81       	ld	r18, Z
    1b24:	80 91 36 07 	lds	r24, 0x0736	; 0x800736 <UART1_LastRxError>
    1b28:	90 e0       	ldi	r25, 0x00	; 0
    1b2a:	98 2f       	mov	r25, r24
    1b2c:	88 27       	eor	r24, r24
    1b2e:	82 0f       	add	r24, r18
    1b30:	91 1d       	adc	r25, r1
    1b32:	08 95       	ret

00001b34 <UART1_putc>:
    1b34:	40 91 3a 07 	lds	r20, 0x073A	; 0x80073a <UART1_TxHead>
    1b38:	50 e0       	ldi	r21, 0x00	; 0
    1b3a:	4f 5f       	subi	r20, 0xFF	; 255
    1b3c:	5f 4f       	sbci	r21, 0xFF	; 255
    1b3e:	4f 77       	andi	r20, 0x7F	; 127
    1b40:	55 27       	eor	r21, r21
    1b42:	20 91 39 07 	lds	r18, 0x0739	; 0x800739 <UART1_TxTail>
    1b46:	30 e0       	ldi	r19, 0x00	; 0
    1b48:	42 17       	cp	r20, r18
    1b4a:	53 07       	cpc	r21, r19
    1b4c:	d1 f3       	breq	.-12     	; 0x1b42 <UART1_putc+0xe>
    1b4e:	fa 01       	movw	r30, r20
    1b50:	e5 54       	subi	r30, 0x45	; 69
    1b52:	f8 4f       	sbci	r31, 0xF8	; 248
    1b54:	80 83       	st	Z, r24
    1b56:	40 93 3a 07 	sts	0x073A, r20	; 0x80073a <UART1_TxHead>
    1b5a:	e9 ec       	ldi	r30, 0xC9	; 201
    1b5c:	f0 e0       	ldi	r31, 0x00	; 0
    1b5e:	80 81       	ld	r24, Z
    1b60:	80 62       	ori	r24, 0x20	; 32
    1b62:	80 83       	st	Z, r24
    1b64:	08 95       	ret

00001b66 <UART1_available>:
    1b66:	f8 94       	cli
    1b68:	80 91 38 07 	lds	r24, 0x0738	; 0x800738 <UART1_RxHead>
    1b6c:	20 91 37 07 	lds	r18, 0x0737	; 0x800737 <UART1_RxTail>
    1b70:	78 94       	sei
    1b72:	90 e0       	ldi	r25, 0x00	; 0
    1b74:	80 58       	subi	r24, 0x80	; 128
    1b76:	9f 4f       	sbci	r25, 0xFF	; 255
    1b78:	82 1b       	sub	r24, r18
    1b7a:	91 09       	sbc	r25, r1
    1b7c:	8f 77       	andi	r24, 0x7F	; 127
    1b7e:	99 27       	eor	r25, r25
    1b80:	08 95       	ret

00001b82 <UART1_flush>:
    1b82:	80 91 2a 05 	lds	r24, 0x052A	; 0x80052a <UART1_Transmission_end>
    1b86:	88 23       	and	r24, r24
    1b88:	e1 f3       	breq	.-8      	; 0x1b82 <UART1_flush>
    1b8a:	08 95       	ret

00001b8c <__vector_51>:
    1b8c:	1f 92       	push	r1
    1b8e:	0f 92       	push	r0
    1b90:	0f b6       	in	r0, 0x3f	; 63
    1b92:	0f 92       	push	r0
    1b94:	11 24       	eor	r1, r1
    1b96:	0b b6       	in	r0, 0x3b	; 59
    1b98:	0f 92       	push	r0
    1b9a:	2f 93       	push	r18
    1b9c:	3f 93       	push	r19
    1b9e:	4f 93       	push	r20
    1ba0:	5f 93       	push	r21
    1ba2:	8f 93       	push	r24
    1ba4:	9f 93       	push	r25
    1ba6:	ef 93       	push	r30
    1ba8:	ff 93       	push	r31
    1baa:	20 91 d0 00 	lds	r18, 0x00D0	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7000d0>
    1bae:	30 91 d6 00 	lds	r19, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    1bb2:	28 71       	andi	r18, 0x18	; 24
    1bb4:	80 91 33 06 	lds	r24, 0x0633	; 0x800633 <UART2_RxHead>
    1bb8:	90 e0       	ldi	r25, 0x00	; 0
    1bba:	01 96       	adiw	r24, 0x01	; 1
    1bbc:	8f 77       	andi	r24, 0x7F	; 127
    1bbe:	99 27       	eor	r25, r25
    1bc0:	40 91 32 06 	lds	r20, 0x0632	; 0x800632 <UART2_RxTail>
    1bc4:	50 e0       	ldi	r21, 0x00	; 0
    1bc6:	84 17       	cp	r24, r20
    1bc8:	95 07       	cpc	r25, r21
    1bca:	39 f0       	breq	.+14     	; 0x1bda <__vector_51+0x4e>
    1bcc:	80 93 33 06 	sts	0x0633, r24	; 0x800633 <UART2_RxHead>
    1bd0:	fc 01       	movw	r30, r24
    1bd2:	ea 5c       	subi	r30, 0xCA	; 202
    1bd4:	f9 4f       	sbci	r31, 0xF9	; 249
    1bd6:	30 83       	st	Z, r19
    1bd8:	01 c0       	rjmp	.+2      	; 0x1bdc <__vector_51+0x50>
    1bda:	22 e0       	ldi	r18, 0x02	; 2
    1bdc:	20 93 31 06 	sts	0x0631, r18	; 0x800631 <UART2_LastRxError>
    1be0:	ff 91       	pop	r31
    1be2:	ef 91       	pop	r30
    1be4:	9f 91       	pop	r25
    1be6:	8f 91       	pop	r24
    1be8:	5f 91       	pop	r21
    1bea:	4f 91       	pop	r20
    1bec:	3f 91       	pop	r19
    1bee:	2f 91       	pop	r18
    1bf0:	0f 90       	pop	r0
    1bf2:	0b be       	out	0x3b, r0	; 59
    1bf4:	0f 90       	pop	r0
    1bf6:	0f be       	out	0x3f, r0	; 63
    1bf8:	0f 90       	pop	r0
    1bfa:	1f 90       	pop	r1
    1bfc:	18 95       	reti

00001bfe <__vector_52>:
    1bfe:	1f 92       	push	r1
    1c00:	0f 92       	push	r0
    1c02:	0f b6       	in	r0, 0x3f	; 63
    1c04:	0f 92       	push	r0
    1c06:	11 24       	eor	r1, r1
    1c08:	0b b6       	in	r0, 0x3b	; 59
    1c0a:	0f 92       	push	r0
    1c0c:	8f 93       	push	r24
    1c0e:	9f 93       	push	r25
    1c10:	ef 93       	push	r30
    1c12:	ff 93       	push	r31
    1c14:	90 91 35 06 	lds	r25, 0x0635	; 0x800635 <UART2_TxHead>
    1c18:	80 91 34 06 	lds	r24, 0x0634	; 0x800634 <UART2_TxTail>
    1c1c:	98 17       	cp	r25, r24
    1c1e:	89 f0       	breq	.+34     	; 0x1c42 <__vector_52+0x44>
    1c20:	80 91 34 06 	lds	r24, 0x0634	; 0x800634 <UART2_TxTail>
    1c24:	90 e0       	ldi	r25, 0x00	; 0
    1c26:	01 96       	adiw	r24, 0x01	; 1
    1c28:	8f 77       	andi	r24, 0x7F	; 127
    1c2a:	99 27       	eor	r25, r25
    1c2c:	80 93 34 06 	sts	0x0634, r24	; 0x800634 <UART2_TxTail>
    1c30:	fc 01       	movw	r30, r24
    1c32:	ea 54       	subi	r30, 0x4A	; 74
    1c34:	f9 4f       	sbci	r31, 0xF9	; 249
    1c36:	80 81       	ld	r24, Z
    1c38:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    1c3c:	10 92 29 05 	sts	0x0529, r1	; 0x800529 <UART2_Transmission_end>
    1c40:	08 c0       	rjmp	.+16     	; 0x1c52 <__vector_52+0x54>
    1c42:	e1 ed       	ldi	r30, 0xD1	; 209
    1c44:	f0 e0       	ldi	r31, 0x00	; 0
    1c46:	80 81       	ld	r24, Z
    1c48:	8f 7d       	andi	r24, 0xDF	; 223
    1c4a:	80 83       	st	Z, r24
    1c4c:	81 e0       	ldi	r24, 0x01	; 1
    1c4e:	80 93 29 05 	sts	0x0529, r24	; 0x800529 <UART2_Transmission_end>
    1c52:	ff 91       	pop	r31
    1c54:	ef 91       	pop	r30
    1c56:	9f 91       	pop	r25
    1c58:	8f 91       	pop	r24
    1c5a:	0f 90       	pop	r0
    1c5c:	0b be       	out	0x3b, r0	; 59
    1c5e:	0f 90       	pop	r0
    1c60:	0f be       	out	0x3f, r0	; 63
    1c62:	0f 90       	pop	r0
    1c64:	1f 90       	pop	r1
    1c66:	18 95       	reti

00001c68 <UART2_init>:
    1c68:	0f 93       	push	r16
    1c6a:	1f 93       	push	r17
    1c6c:	8b 01       	movw	r16, r22
    1c6e:	9c 01       	movw	r18, r24
    1c70:	f8 94       	cli
    1c72:	10 92 35 06 	sts	0x0635, r1	; 0x800635 <UART2_TxHead>
    1c76:	10 92 34 06 	sts	0x0634, r1	; 0x800634 <UART2_TxTail>
    1c7a:	10 92 33 06 	sts	0x0633, r1	; 0x800633 <UART2_RxHead>
    1c7e:	10 92 32 06 	sts	0x0632, r1	; 0x800632 <UART2_RxTail>
    1c82:	78 94       	sei
    1c84:	dc 01       	movw	r26, r24
    1c86:	cb 01       	movw	r24, r22
    1c88:	80 58       	subi	r24, 0x80	; 128
    1c8a:	9b 47       	sbci	r25, 0x7B	; 123
    1c8c:	a1 4e       	sbci	r26, 0xE1	; 225
    1c8e:	bf 4f       	sbci	r27, 0xFF	; 255
    1c90:	88 0f       	add	r24, r24
    1c92:	99 1f       	adc	r25, r25
    1c94:	aa 1f       	adc	r26, r26
    1c96:	bb 1f       	adc	r27, r27
    1c98:	88 0f       	add	r24, r24
    1c9a:	99 1f       	adc	r25, r25
    1c9c:	aa 1f       	adc	r26, r26
    1c9e:	bb 1f       	adc	r27, r27
    1ca0:	bc 01       	movw	r22, r24
    1ca2:	cd 01       	movw	r24, r26
    1ca4:	66 0f       	add	r22, r22
    1ca6:	77 1f       	adc	r23, r23
    1ca8:	88 1f       	adc	r24, r24
    1caa:	99 1f       	adc	r25, r25
    1cac:	00 0f       	add	r16, r16
    1cae:	11 1f       	adc	r17, r17
    1cb0:	22 1f       	adc	r18, r18
    1cb2:	33 1f       	adc	r19, r19
    1cb4:	00 0f       	add	r16, r16
    1cb6:	11 1f       	adc	r17, r17
    1cb8:	22 1f       	adc	r18, r18
    1cba:	33 1f       	adc	r19, r19
    1cbc:	a9 01       	movw	r20, r18
    1cbe:	98 01       	movw	r18, r16
    1cc0:	22 0f       	add	r18, r18
    1cc2:	33 1f       	adc	r19, r19
    1cc4:	44 1f       	adc	r20, r20
    1cc6:	55 1f       	adc	r21, r21
    1cc8:	22 0f       	add	r18, r18
    1cca:	33 1f       	adc	r19, r19
    1ccc:	44 1f       	adc	r20, r20
    1cce:	55 1f       	adc	r21, r21
    1cd0:	0e 94 f2 18 	call	0x31e4	; 0x31e4 <__udivmodsi4>
    1cd4:	ba 01       	movw	r22, r20
    1cd6:	a9 01       	movw	r20, r18
    1cd8:	41 50       	subi	r20, 0x01	; 1
    1cda:	51 09       	sbc	r21, r1
    1cdc:	61 09       	sbc	r22, r1
    1cde:	71 09       	sbc	r23, r1
    1ce0:	57 ff       	sbrs	r21, 7
    1ce2:	06 c0       	rjmp	.+12     	; 0x1cf0 <UART2_init+0x88>
    1ce4:	82 e0       	ldi	r24, 0x02	; 2
    1ce6:	80 93 d0 00 	sts	0x00D0, r24	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7000d0>
    1cea:	5f 77       	andi	r21, 0x7F	; 127
    1cec:	66 27       	eor	r22, r22
    1cee:	77 27       	eor	r23, r23
    1cf0:	bb 27       	eor	r27, r27
    1cf2:	a7 2f       	mov	r26, r23
    1cf4:	96 2f       	mov	r25, r22
    1cf6:	85 2f       	mov	r24, r21
    1cf8:	80 93 d5 00 	sts	0x00D5, r24	; 0x8000d5 <__TEXT_REGION_LENGTH__+0x7000d5>
    1cfc:	40 93 d4 00 	sts	0x00D4, r20	; 0x8000d4 <__TEXT_REGION_LENGTH__+0x7000d4>
    1d00:	88 e9       	ldi	r24, 0x98	; 152
    1d02:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7000d1>
    1d06:	86 e0       	ldi	r24, 0x06	; 6
    1d08:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7000d2>
    1d0c:	1f 91       	pop	r17
    1d0e:	0f 91       	pop	r16
    1d10:	08 95       	ret

00001d12 <UART2_getc>:
    1d12:	90 91 33 06 	lds	r25, 0x0633	; 0x800633 <UART2_RxHead>
    1d16:	80 91 32 06 	lds	r24, 0x0632	; 0x800632 <UART2_RxTail>
    1d1a:	98 17       	cp	r25, r24
    1d1c:	a1 f0       	breq	.+40     	; 0x1d46 <UART2_getc+0x34>
    1d1e:	80 91 32 06 	lds	r24, 0x0632	; 0x800632 <UART2_RxTail>
    1d22:	90 e0       	ldi	r25, 0x00	; 0
    1d24:	01 96       	adiw	r24, 0x01	; 1
    1d26:	8f 77       	andi	r24, 0x7F	; 127
    1d28:	99 27       	eor	r25, r25
    1d2a:	80 93 32 06 	sts	0x0632, r24	; 0x800632 <UART2_RxTail>
    1d2e:	fc 01       	movw	r30, r24
    1d30:	ea 5c       	subi	r30, 0xCA	; 202
    1d32:	f9 4f       	sbci	r31, 0xF9	; 249
    1d34:	20 81       	ld	r18, Z
    1d36:	80 91 31 06 	lds	r24, 0x0631	; 0x800631 <UART2_LastRxError>
    1d3a:	90 e0       	ldi	r25, 0x00	; 0
    1d3c:	98 2f       	mov	r25, r24
    1d3e:	88 27       	eor	r24, r24
    1d40:	82 0f       	add	r24, r18
    1d42:	91 1d       	adc	r25, r1
    1d44:	08 95       	ret
    1d46:	80 e0       	ldi	r24, 0x00	; 0
    1d48:	91 e0       	ldi	r25, 0x01	; 1
    1d4a:	08 95       	ret

00001d4c <UART2_putc>:
    1d4c:	40 91 35 06 	lds	r20, 0x0635	; 0x800635 <UART2_TxHead>
    1d50:	50 e0       	ldi	r21, 0x00	; 0
    1d52:	4f 5f       	subi	r20, 0xFF	; 255
    1d54:	5f 4f       	sbci	r21, 0xFF	; 255
    1d56:	4f 77       	andi	r20, 0x7F	; 127
    1d58:	55 27       	eor	r21, r21
    1d5a:	20 91 34 06 	lds	r18, 0x0634	; 0x800634 <UART2_TxTail>
    1d5e:	30 e0       	ldi	r19, 0x00	; 0
    1d60:	42 17       	cp	r20, r18
    1d62:	53 07       	cpc	r21, r19
    1d64:	d1 f3       	breq	.-12     	; 0x1d5a <UART2_putc+0xe>
    1d66:	fa 01       	movw	r30, r20
    1d68:	ea 54       	subi	r30, 0x4A	; 74
    1d6a:	f9 4f       	sbci	r31, 0xF9	; 249
    1d6c:	80 83       	st	Z, r24
    1d6e:	40 93 35 06 	sts	0x0635, r20	; 0x800635 <UART2_TxHead>
    1d72:	e1 ed       	ldi	r30, 0xD1	; 209
    1d74:	f0 e0       	ldi	r31, 0x00	; 0
    1d76:	80 81       	ld	r24, Z
    1d78:	80 62       	ori	r24, 0x20	; 32
    1d7a:	80 83       	st	Z, r24
    1d7c:	08 95       	ret

00001d7e <UART2_available>:
    1d7e:	f8 94       	cli
    1d80:	80 91 33 06 	lds	r24, 0x0633	; 0x800633 <UART2_RxHead>
    1d84:	20 91 32 06 	lds	r18, 0x0632	; 0x800632 <UART2_RxTail>
    1d88:	78 94       	sei
    1d8a:	90 e0       	ldi	r25, 0x00	; 0
    1d8c:	80 58       	subi	r24, 0x80	; 128
    1d8e:	9f 4f       	sbci	r25, 0xFF	; 255
    1d90:	82 1b       	sub	r24, r18
    1d92:	91 09       	sbc	r25, r1
    1d94:	8f 77       	andi	r24, 0x7F	; 127
    1d96:	99 27       	eor	r25, r25
    1d98:	08 95       	ret

00001d9a <UART2_flush>:
    1d9a:	80 91 29 05 	lds	r24, 0x0529	; 0x800529 <UART2_Transmission_end>
    1d9e:	88 23       	and	r24, r24
    1da0:	e1 f3       	breq	.-8      	; 0x1d9a <UART2_flush>
    1da2:	08 95       	ret

00001da4 <__vector_54>:
    1da4:	1f 92       	push	r1
    1da6:	0f 92       	push	r0
    1da8:	0f b6       	in	r0, 0x3f	; 63
    1daa:	0f 92       	push	r0
    1dac:	11 24       	eor	r1, r1
    1dae:	0b b6       	in	r0, 0x3b	; 59
    1db0:	0f 92       	push	r0
    1db2:	2f 93       	push	r18
    1db4:	3f 93       	push	r19
    1db6:	4f 93       	push	r20
    1db8:	5f 93       	push	r21
    1dba:	8f 93       	push	r24
    1dbc:	9f 93       	push	r25
    1dbe:	ef 93       	push	r30
    1dc0:	ff 93       	push	r31
    1dc2:	20 91 30 01 	lds	r18, 0x0130	; 0x800130 <__TEXT_REGION_LENGTH__+0x700130>
    1dc6:	30 91 36 01 	lds	r19, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    1dca:	28 71       	andi	r18, 0x18	; 24
    1dcc:	80 91 2e 05 	lds	r24, 0x052E	; 0x80052e <UART3_RxHead>
    1dd0:	90 e0       	ldi	r25, 0x00	; 0
    1dd2:	01 96       	adiw	r24, 0x01	; 1
    1dd4:	8f 77       	andi	r24, 0x7F	; 127
    1dd6:	99 27       	eor	r25, r25
    1dd8:	40 91 2d 05 	lds	r20, 0x052D	; 0x80052d <UART3_RxTail>
    1ddc:	50 e0       	ldi	r21, 0x00	; 0
    1dde:	84 17       	cp	r24, r20
    1de0:	95 07       	cpc	r25, r21
    1de2:	39 f0       	breq	.+14     	; 0x1df2 <__vector_54+0x4e>
    1de4:	80 93 2e 05 	sts	0x052E, r24	; 0x80052e <UART3_RxHead>
    1de8:	fc 01       	movw	r30, r24
    1dea:	ef 5c       	subi	r30, 0xCF	; 207
    1dec:	fa 4f       	sbci	r31, 0xFA	; 250
    1dee:	30 83       	st	Z, r19
    1df0:	01 c0       	rjmp	.+2      	; 0x1df4 <__vector_54+0x50>
    1df2:	22 e0       	ldi	r18, 0x02	; 2
    1df4:	20 93 2c 05 	sts	0x052C, r18	; 0x80052c <UART3_LastRxError>
    1df8:	ff 91       	pop	r31
    1dfa:	ef 91       	pop	r30
    1dfc:	9f 91       	pop	r25
    1dfe:	8f 91       	pop	r24
    1e00:	5f 91       	pop	r21
    1e02:	4f 91       	pop	r20
    1e04:	3f 91       	pop	r19
    1e06:	2f 91       	pop	r18
    1e08:	0f 90       	pop	r0
    1e0a:	0b be       	out	0x3b, r0	; 59
    1e0c:	0f 90       	pop	r0
    1e0e:	0f be       	out	0x3f, r0	; 63
    1e10:	0f 90       	pop	r0
    1e12:	1f 90       	pop	r1
    1e14:	18 95       	reti

00001e16 <__vector_55>:
    1e16:	1f 92       	push	r1
    1e18:	0f 92       	push	r0
    1e1a:	0f b6       	in	r0, 0x3f	; 63
    1e1c:	0f 92       	push	r0
    1e1e:	11 24       	eor	r1, r1
    1e20:	0b b6       	in	r0, 0x3b	; 59
    1e22:	0f 92       	push	r0
    1e24:	8f 93       	push	r24
    1e26:	9f 93       	push	r25
    1e28:	ef 93       	push	r30
    1e2a:	ff 93       	push	r31
    1e2c:	90 91 30 05 	lds	r25, 0x0530	; 0x800530 <UART3_TxHead>
    1e30:	80 91 2f 05 	lds	r24, 0x052F	; 0x80052f <UART3_TxTail>
    1e34:	98 17       	cp	r25, r24
    1e36:	89 f0       	breq	.+34     	; 0x1e5a <__vector_55+0x44>
    1e38:	80 91 2f 05 	lds	r24, 0x052F	; 0x80052f <UART3_TxTail>
    1e3c:	90 e0       	ldi	r25, 0x00	; 0
    1e3e:	01 96       	adiw	r24, 0x01	; 1
    1e40:	8f 77       	andi	r24, 0x7F	; 127
    1e42:	99 27       	eor	r25, r25
    1e44:	80 93 2f 05 	sts	0x052F, r24	; 0x80052f <UART3_TxTail>
    1e48:	fc 01       	movw	r30, r24
    1e4a:	ef 54       	subi	r30, 0x4F	; 79
    1e4c:	fa 4f       	sbci	r31, 0xFA	; 250
    1e4e:	80 81       	ld	r24, Z
    1e50:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    1e54:	10 92 28 05 	sts	0x0528, r1	; 0x800528 <UART3_Transmission_end>
    1e58:	08 c0       	rjmp	.+16     	; 0x1e6a <__vector_55+0x54>
    1e5a:	e1 e3       	ldi	r30, 0x31	; 49
    1e5c:	f1 e0       	ldi	r31, 0x01	; 1
    1e5e:	80 81       	ld	r24, Z
    1e60:	8f 7d       	andi	r24, 0xDF	; 223
    1e62:	80 83       	st	Z, r24
    1e64:	81 e0       	ldi	r24, 0x01	; 1
    1e66:	80 93 28 05 	sts	0x0528, r24	; 0x800528 <UART3_Transmission_end>
    1e6a:	ff 91       	pop	r31
    1e6c:	ef 91       	pop	r30
    1e6e:	9f 91       	pop	r25
    1e70:	8f 91       	pop	r24
    1e72:	0f 90       	pop	r0
    1e74:	0b be       	out	0x3b, r0	; 59
    1e76:	0f 90       	pop	r0
    1e78:	0f be       	out	0x3f, r0	; 63
    1e7a:	0f 90       	pop	r0
    1e7c:	1f 90       	pop	r1
    1e7e:	18 95       	reti

00001e80 <UART3_init>:
    1e80:	0f 93       	push	r16
    1e82:	1f 93       	push	r17
    1e84:	8b 01       	movw	r16, r22
    1e86:	9c 01       	movw	r18, r24
    1e88:	f8 94       	cli
    1e8a:	10 92 30 05 	sts	0x0530, r1	; 0x800530 <UART3_TxHead>
    1e8e:	10 92 2f 05 	sts	0x052F, r1	; 0x80052f <UART3_TxTail>
    1e92:	10 92 2e 05 	sts	0x052E, r1	; 0x80052e <UART3_RxHead>
    1e96:	10 92 2d 05 	sts	0x052D, r1	; 0x80052d <UART3_RxTail>
    1e9a:	78 94       	sei
    1e9c:	dc 01       	movw	r26, r24
    1e9e:	cb 01       	movw	r24, r22
    1ea0:	80 58       	subi	r24, 0x80	; 128
    1ea2:	9b 47       	sbci	r25, 0x7B	; 123
    1ea4:	a1 4e       	sbci	r26, 0xE1	; 225
    1ea6:	bf 4f       	sbci	r27, 0xFF	; 255
    1ea8:	88 0f       	add	r24, r24
    1eaa:	99 1f       	adc	r25, r25
    1eac:	aa 1f       	adc	r26, r26
    1eae:	bb 1f       	adc	r27, r27
    1eb0:	88 0f       	add	r24, r24
    1eb2:	99 1f       	adc	r25, r25
    1eb4:	aa 1f       	adc	r26, r26
    1eb6:	bb 1f       	adc	r27, r27
    1eb8:	bc 01       	movw	r22, r24
    1eba:	cd 01       	movw	r24, r26
    1ebc:	66 0f       	add	r22, r22
    1ebe:	77 1f       	adc	r23, r23
    1ec0:	88 1f       	adc	r24, r24
    1ec2:	99 1f       	adc	r25, r25
    1ec4:	00 0f       	add	r16, r16
    1ec6:	11 1f       	adc	r17, r17
    1ec8:	22 1f       	adc	r18, r18
    1eca:	33 1f       	adc	r19, r19
    1ecc:	00 0f       	add	r16, r16
    1ece:	11 1f       	adc	r17, r17
    1ed0:	22 1f       	adc	r18, r18
    1ed2:	33 1f       	adc	r19, r19
    1ed4:	a9 01       	movw	r20, r18
    1ed6:	98 01       	movw	r18, r16
    1ed8:	22 0f       	add	r18, r18
    1eda:	33 1f       	adc	r19, r19
    1edc:	44 1f       	adc	r20, r20
    1ede:	55 1f       	adc	r21, r21
    1ee0:	22 0f       	add	r18, r18
    1ee2:	33 1f       	adc	r19, r19
    1ee4:	44 1f       	adc	r20, r20
    1ee6:	55 1f       	adc	r21, r21
    1ee8:	0e 94 f2 18 	call	0x31e4	; 0x31e4 <__udivmodsi4>
    1eec:	ba 01       	movw	r22, r20
    1eee:	a9 01       	movw	r20, r18
    1ef0:	41 50       	subi	r20, 0x01	; 1
    1ef2:	51 09       	sbc	r21, r1
    1ef4:	61 09       	sbc	r22, r1
    1ef6:	71 09       	sbc	r23, r1
    1ef8:	57 ff       	sbrs	r21, 7
    1efa:	06 c0       	rjmp	.+12     	; 0x1f08 <UART3_init+0x88>
    1efc:	82 e0       	ldi	r24, 0x02	; 2
    1efe:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <__TEXT_REGION_LENGTH__+0x700130>
    1f02:	5f 77       	andi	r21, 0x7F	; 127
    1f04:	66 27       	eor	r22, r22
    1f06:	77 27       	eor	r23, r23
    1f08:	bb 27       	eor	r27, r27
    1f0a:	a7 2f       	mov	r26, r23
    1f0c:	96 2f       	mov	r25, r22
    1f0e:	85 2f       	mov	r24, r21
    1f10:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <__TEXT_REGION_LENGTH__+0x700135>
    1f14:	40 93 34 01 	sts	0x0134, r20	; 0x800134 <__TEXT_REGION_LENGTH__+0x700134>
    1f18:	88 e9       	ldi	r24, 0x98	; 152
    1f1a:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <__TEXT_REGION_LENGTH__+0x700131>
    1f1e:	86 e0       	ldi	r24, 0x06	; 6
    1f20:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <__TEXT_REGION_LENGTH__+0x700132>
    1f24:	1f 91       	pop	r17
    1f26:	0f 91       	pop	r16
    1f28:	08 95       	ret

00001f2a <UART3_getc>:
    1f2a:	90 91 2e 05 	lds	r25, 0x052E	; 0x80052e <UART3_RxHead>
    1f2e:	80 91 2d 05 	lds	r24, 0x052D	; 0x80052d <UART3_RxTail>
    1f32:	98 17       	cp	r25, r24
    1f34:	a1 f0       	breq	.+40     	; 0x1f5e <UART3_getc+0x34>
    1f36:	80 91 2d 05 	lds	r24, 0x052D	; 0x80052d <UART3_RxTail>
    1f3a:	90 e0       	ldi	r25, 0x00	; 0
    1f3c:	01 96       	adiw	r24, 0x01	; 1
    1f3e:	8f 77       	andi	r24, 0x7F	; 127
    1f40:	99 27       	eor	r25, r25
    1f42:	80 93 2d 05 	sts	0x052D, r24	; 0x80052d <UART3_RxTail>
    1f46:	fc 01       	movw	r30, r24
    1f48:	ef 5c       	subi	r30, 0xCF	; 207
    1f4a:	fa 4f       	sbci	r31, 0xFA	; 250
    1f4c:	20 81       	ld	r18, Z
    1f4e:	80 91 2c 05 	lds	r24, 0x052C	; 0x80052c <UART3_LastRxError>
    1f52:	90 e0       	ldi	r25, 0x00	; 0
    1f54:	98 2f       	mov	r25, r24
    1f56:	88 27       	eor	r24, r24
    1f58:	82 0f       	add	r24, r18
    1f5a:	91 1d       	adc	r25, r1
    1f5c:	08 95       	ret
    1f5e:	80 e0       	ldi	r24, 0x00	; 0
    1f60:	91 e0       	ldi	r25, 0x01	; 1
    1f62:	08 95       	ret

00001f64 <UART3_putc>:
    1f64:	40 91 30 05 	lds	r20, 0x0530	; 0x800530 <UART3_TxHead>
    1f68:	50 e0       	ldi	r21, 0x00	; 0
    1f6a:	4f 5f       	subi	r20, 0xFF	; 255
    1f6c:	5f 4f       	sbci	r21, 0xFF	; 255
    1f6e:	4f 77       	andi	r20, 0x7F	; 127
    1f70:	55 27       	eor	r21, r21
    1f72:	20 91 2f 05 	lds	r18, 0x052F	; 0x80052f <UART3_TxTail>
    1f76:	30 e0       	ldi	r19, 0x00	; 0
    1f78:	42 17       	cp	r20, r18
    1f7a:	53 07       	cpc	r21, r19
    1f7c:	d1 f3       	breq	.-12     	; 0x1f72 <UART3_putc+0xe>
    1f7e:	fa 01       	movw	r30, r20
    1f80:	ef 54       	subi	r30, 0x4F	; 79
    1f82:	fa 4f       	sbci	r31, 0xFA	; 250
    1f84:	80 83       	st	Z, r24
    1f86:	40 93 30 05 	sts	0x0530, r20	; 0x800530 <UART3_TxHead>
    1f8a:	e1 e3       	ldi	r30, 0x31	; 49
    1f8c:	f1 e0       	ldi	r31, 0x01	; 1
    1f8e:	80 81       	ld	r24, Z
    1f90:	80 62       	ori	r24, 0x20	; 32
    1f92:	80 83       	st	Z, r24
    1f94:	08 95       	ret

00001f96 <UART3_available>:
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1f96:	f8 94       	cli
uint16_t UART3_available(void)
{
	uint16_t ret;
	
	ATOMIC_BLOCK(ATOMIC_FORCEON) {
		ret = (UART_RX3_BUFFER_SIZE + UART3_RxHead - UART3_RxTail) & UART_RX3_BUFFER_MASK;
    1f98:	80 91 2e 05 	lds	r24, 0x052E	; 0x80052e <UART3_RxHead>
    1f9c:	20 91 2d 05 	lds	r18, 0x052D	; 0x80052d <UART3_RxTail>
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
    1fa0:	78 94       	sei
	}
	return ret;
    1fa2:	90 e0       	ldi	r25, 0x00	; 0
    1fa4:	80 58       	subi	r24, 0x80	; 128
    1fa6:	9f 4f       	sbci	r25, 0xFF	; 255
    1fa8:	82 1b       	sub	r24, r18
    1faa:	91 09       	sbc	r25, r1
} /* UART3_available */
    1fac:	8f 77       	andi	r24, 0x7F	; 127
    1fae:	99 27       	eor	r25, r25
    1fb0:	08 95       	ret

00001fb2 <UART3_flush>:
void UART3_flush(void)
{
//	ATOMIC_BLOCK(ATOMIC_FORCEON) {
//		UART3_RxHead = UART3_RxTail;
//	} commented by mohab
	while(0 == UART3_Transmission_end);
    1fb2:	80 91 28 05 	lds	r24, 0x0528	; 0x800528 <UART3_Transmission_end>
    1fb6:	88 23       	and	r24, r24
    1fb8:	e1 f3       	breq	.-8      	; 0x1fb2 <UART3_flush>
} /* UART3_flush */
    1fba:	08 95       	ret

00001fbc <vApplicationStackOverflowHook>:
	   This routine will never return.
	   This routine is referenced in the task.c file of FreeRTOS as an extern.
	\*---------------------------------------------------------------------------*/

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
	DDRB  |= _BV(DDB7);
    1fbc:	27 9a       	sbi	0x04, 7	; 4
	PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    1fbe:	2f 9a       	sbi	0x05, 7	; 5
    1fc0:	2f e7       	ldi	r18, 0x7F	; 127
    1fc2:	8a e1       	ldi	r24, 0x1A	; 26
    1fc4:	96 e0       	ldi	r25, 0x06	; 6
    1fc6:	21 50       	subi	r18, 0x01	; 1
    1fc8:	80 40       	sbci	r24, 0x00	; 0
    1fca:	90 40       	sbci	r25, 0x00	; 0
    1fcc:	e1 f7       	brne	.-8      	; 0x1fc6 <vApplicationStackOverflowHook+0xa>
    1fce:	00 c0       	rjmp	.+0      	; 0x1fd0 <vApplicationStackOverflowHook+0x14>
    1fd0:	00 00       	nop
	for(;;)
	{
		_delay_ms(2000);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
		PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED slow blink.
    1fd2:	1f 9a       	sbi	0x03, 7	; 3
    1fd4:	f5 cf       	rjmp	.-22     	; 0x1fc0 <vApplicationStackOverflowHook+0x4>

00001fd6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    1fd6:	fc 01       	movw	r30, r24
    /* The list structure contains a list item which is used to mark the
    end of the list.  To initialise the list the list end is inserted
    as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );            /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1fd8:	03 96       	adiw	r24, 0x03	; 3
    1fda:	92 83       	std	Z+2, r25	; 0x02
    1fdc:	81 83       	std	Z+1, r24	; 0x01

    /* The list end value is the highest possible value in the list to
    ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
    1fde:	2f ef       	ldi	r18, 0xFF	; 255
    1fe0:	3f ef       	ldi	r19, 0xFF	; 255
    1fe2:	34 83       	std	Z+4, r19	; 0x04
    1fe4:	23 83       	std	Z+3, r18	; 0x03

    /* The list end next and previous pointers point to itself so we know
    when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );    /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1fe6:	96 83       	std	Z+6, r25	; 0x06
    1fe8:	85 83       	std	Z+5, r24	; 0x05
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1fea:	90 87       	std	Z+8, r25	; 0x08
    1fec:	87 83       	std	Z+7, r24	; 0x07

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    1fee:	10 82       	st	Z, r1
    1ff0:	08 95       	ret

00001ff2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
    1ff2:	fc 01       	movw	r30, r24
    1ff4:	11 86       	std	Z+9, r1	; 0x09
    1ff6:	10 86       	std	Z+8, r1	; 0x08
    1ff8:	08 95       	ret

00001ffa <vListInsertEnd>:
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    1ffa:	cf 93       	push	r28
    1ffc:	df 93       	push	r29
    1ffe:	9c 01       	movw	r18, r24
    2000:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
    2002:	dc 01       	movw	r26, r24
    2004:	11 96       	adiw	r26, 0x01	; 1
    2006:	cd 91       	ld	r28, X+
    2008:	dc 91       	ld	r29, X
    200a:	12 97       	sbiw	r26, 0x02	; 2
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
    makes the new list item the last item to be removed by a call to
    listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
    200c:	d3 83       	std	Z+3, r29	; 0x03
    200e:	c2 83       	std	Z+2, r28	; 0x02
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    2010:	8c 81       	ldd	r24, Y+4	; 0x04
    2012:	9d 81       	ldd	r25, Y+5	; 0x05
    2014:	95 83       	std	Z+5, r25	; 0x05
    2016:	84 83       	std	Z+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
    2018:	8c 81       	ldd	r24, Y+4	; 0x04
    201a:	9d 81       	ldd	r25, Y+5	; 0x05
    201c:	dc 01       	movw	r26, r24
    201e:	13 96       	adiw	r26, 0x03	; 3
    2020:	7c 93       	st	X, r23
    2022:	6e 93       	st	-X, r22
    2024:	12 97       	sbiw	r26, 0x02	; 2
    pxIndex->pxPrevious = pxNewListItem;
    2026:	7d 83       	std	Y+5, r23	; 0x05
    2028:	6c 83       	std	Y+4, r22	; 0x04

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
    202a:	31 87       	std	Z+9, r19	; 0x09
    202c:	20 87       	std	Z+8, r18	; 0x08

    ( pxList->uxNumberOfItems )++;
    202e:	f9 01       	movw	r30, r18
    2030:	80 81       	ld	r24, Z
    2032:	8f 5f       	subi	r24, 0xFF	; 255
    2034:	80 83       	st	Z, r24
}
    2036:	df 91       	pop	r29
    2038:	cf 91       	pop	r28
    203a:	08 95       	ret

0000203c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    203c:	cf 93       	push	r28
    203e:	df 93       	push	r29
    2040:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    2042:	48 81       	ld	r20, Y
    2044:	59 81       	ldd	r21, Y+1	; 0x01
    new list item should be placed after it.  This ensures that TCBs which are
    stored in ready lists (all of which have the same xItemValue value) get a
    share of the CPU.  However, if the xItemValue is the same as the back marker
    the iteration loop below will not end.  Therefore the value is checked
    first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
    2046:	4f 3f       	cpi	r20, 0xFF	; 255
    2048:	2f ef       	ldi	r18, 0xFF	; 255
    204a:	52 07       	cpc	r21, r18
    204c:	21 f4       	brne	.+8      	; 0x2056 <vListInsert+0x1a>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
    204e:	fc 01       	movw	r30, r24
    2050:	a7 81       	ldd	r26, Z+7	; 0x07
    2052:	b0 85       	ldd	r27, Z+8	; 0x08
    2054:	0d c0       	rjmp	.+26     	; 0x2070 <vListInsert+0x34>
            4) Using a queue or semaphore before it has been initialised or
               before the scheduler has been started (are interrupts firing
               before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
    2056:	dc 01       	movw	r26, r24
    2058:	13 96       	adiw	r26, 0x03	; 3
    205a:	01 c0       	rjmp	.+2      	; 0x205e <vListInsert+0x22>
    205c:	df 01       	movw	r26, r30
    205e:	12 96       	adiw	r26, 0x02	; 2
    2060:	ed 91       	ld	r30, X+
    2062:	fc 91       	ld	r31, X
    2064:	13 97       	sbiw	r26, 0x03	; 3
    2066:	20 81       	ld	r18, Z
    2068:	31 81       	ldd	r19, Z+1	; 0x01
    206a:	42 17       	cp	r20, r18
    206c:	53 07       	cpc	r21, r19
    206e:	b0 f7       	brcc	.-20     	; 0x205c <vListInsert+0x20>
            /* There is nothing to do here, just iterating to the wanted
            insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
    2070:	12 96       	adiw	r26, 0x02	; 2
    2072:	ed 91       	ld	r30, X+
    2074:	fc 91       	ld	r31, X
    2076:	13 97       	sbiw	r26, 0x03	; 3
    2078:	fb 83       	std	Y+3, r31	; 0x03
    207a:	ea 83       	std	Y+2, r30	; 0x02
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    207c:	d5 83       	std	Z+5, r29	; 0x05
    207e:	c4 83       	std	Z+4, r28	; 0x04
    pxNewListItem->pxPrevious = pxIterator;
    2080:	bd 83       	std	Y+5, r27	; 0x05
    2082:	ac 83       	std	Y+4, r26	; 0x04
    pxIterator->pxNext = pxNewListItem;
    2084:	13 96       	adiw	r26, 0x03	; 3
    2086:	dc 93       	st	X, r29
    2088:	ce 93       	st	-X, r28
    208a:	12 97       	sbiw	r26, 0x02	; 2

    /* Remember which list the item is in.  This allows fast removal of the
    item later. */
    pxNewListItem->pxContainer = pxList;
    208c:	99 87       	std	Y+9, r25	; 0x09
    208e:	88 87       	std	Y+8, r24	; 0x08

    ( pxList->uxNumberOfItems )++;
    2090:	fc 01       	movw	r30, r24
    2092:	20 81       	ld	r18, Z
    2094:	2f 5f       	subi	r18, 0xFF	; 255
    2096:	20 83       	st	Z, r18
}
    2098:	df 91       	pop	r29
    209a:	cf 91       	pop	r28
    209c:	08 95       	ret

0000209e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    209e:	cf 93       	push	r28
    20a0:	df 93       	push	r29
    20a2:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
    20a4:	a0 85       	ldd	r26, Z+8	; 0x08
    20a6:	b1 85       	ldd	r27, Z+9	; 0x09

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    20a8:	c2 81       	ldd	r28, Z+2	; 0x02
    20aa:	d3 81       	ldd	r29, Z+3	; 0x03
    20ac:	84 81       	ldd	r24, Z+4	; 0x04
    20ae:	95 81       	ldd	r25, Z+5	; 0x05
    20b0:	9d 83       	std	Y+5, r25	; 0x05
    20b2:	8c 83       	std	Y+4, r24	; 0x04
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    20b4:	c4 81       	ldd	r28, Z+4	; 0x04
    20b6:	d5 81       	ldd	r29, Z+5	; 0x05
    20b8:	82 81       	ldd	r24, Z+2	; 0x02
    20ba:	93 81       	ldd	r25, Z+3	; 0x03
    20bc:	9b 83       	std	Y+3, r25	; 0x03
    20be:	8a 83       	std	Y+2, r24	; 0x02

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
    20c0:	11 96       	adiw	r26, 0x01	; 1
    20c2:	8d 91       	ld	r24, X+
    20c4:	9c 91       	ld	r25, X
    20c6:	12 97       	sbiw	r26, 0x02	; 2
    20c8:	e8 17       	cp	r30, r24
    20ca:	f9 07       	cpc	r31, r25
    20cc:	31 f4       	brne	.+12     	; 0x20da <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
    20ce:	84 81       	ldd	r24, Z+4	; 0x04
    20d0:	95 81       	ldd	r25, Z+5	; 0x05
    20d2:	12 96       	adiw	r26, 0x02	; 2
    20d4:	9c 93       	st	X, r25
    20d6:	8e 93       	st	-X, r24
    20d8:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
    20da:	11 86       	std	Z+9, r1	; 0x09
    20dc:	10 86       	std	Z+8, r1	; 0x08
    ( pxList->uxNumberOfItems )--;
    20de:	8c 91       	ld	r24, X
    20e0:	81 50       	subi	r24, 0x01	; 1
    20e2:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
    20e4:	8c 91       	ld	r24, X
}
    20e6:	df 91       	pop	r29
    20e8:	cf 91       	pop	r28
    20ea:	08 95       	ret

000020ec <pxPortInitialiseStack>:
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
    20ec:	31 e1       	ldi	r19, 0x11	; 17
    20ee:	fc 01       	movw	r30, r24
    20f0:	30 83       	st	Z, r19
    20f2:	31 97       	sbiw	r30, 0x01	; 1
    20f4:	22 e2       	ldi	r18, 0x22	; 34
    20f6:	20 83       	st	Z, r18
    20f8:	31 97       	sbiw	r30, 0x01	; 1
    20fa:	a3 e3       	ldi	r26, 0x33	; 51
    20fc:	a0 83       	st	Z, r26
    20fe:	31 97       	sbiw	r30, 0x01	; 1
    2100:	60 83       	st	Z, r22
    2102:	31 97       	sbiw	r30, 0x01	; 1
    2104:	70 83       	st	Z, r23
    2106:	31 97       	sbiw	r30, 0x01	; 1
    2108:	10 82       	st	Z, r1
    210a:	31 97       	sbiw	r30, 0x01	; 1
    210c:	10 82       	st	Z, r1
    210e:	31 97       	sbiw	r30, 0x01	; 1
    2110:	60 e8       	ldi	r22, 0x80	; 128
    2112:	60 83       	st	Z, r22
    2114:	31 97       	sbiw	r30, 0x01	; 1
    2116:	10 82       	st	Z, r1
    2118:	31 97       	sbiw	r30, 0x01	; 1
    211a:	10 82       	st	Z, r1
    211c:	31 97       	sbiw	r30, 0x01	; 1
    211e:	10 82       	st	Z, r1
    2120:	31 97       	sbiw	r30, 0x01	; 1
    2122:	62 e0       	ldi	r22, 0x02	; 2
    2124:	60 83       	st	Z, r22
    2126:	31 97       	sbiw	r30, 0x01	; 1
    2128:	63 e0       	ldi	r22, 0x03	; 3
    212a:	60 83       	st	Z, r22
    212c:	31 97       	sbiw	r30, 0x01	; 1
    212e:	64 e0       	ldi	r22, 0x04	; 4
    2130:	60 83       	st	Z, r22
    2132:	31 97       	sbiw	r30, 0x01	; 1
    2134:	65 e0       	ldi	r22, 0x05	; 5
    2136:	60 83       	st	Z, r22
    2138:	31 97       	sbiw	r30, 0x01	; 1
    213a:	66 e0       	ldi	r22, 0x06	; 6
    213c:	60 83       	st	Z, r22
    213e:	31 97       	sbiw	r30, 0x01	; 1
    2140:	67 e0       	ldi	r22, 0x07	; 7
    2142:	60 83       	st	Z, r22
    2144:	31 97       	sbiw	r30, 0x01	; 1
    2146:	68 e0       	ldi	r22, 0x08	; 8
    2148:	60 83       	st	Z, r22
    214a:	31 97       	sbiw	r30, 0x01	; 1
    214c:	69 e0       	ldi	r22, 0x09	; 9
    214e:	60 83       	st	Z, r22
    2150:	31 97       	sbiw	r30, 0x01	; 1
    2152:	60 e1       	ldi	r22, 0x10	; 16
    2154:	60 83       	st	Z, r22
    2156:	31 97       	sbiw	r30, 0x01	; 1
    2158:	30 83       	st	Z, r19
    215a:	31 97       	sbiw	r30, 0x01	; 1
    215c:	32 e1       	ldi	r19, 0x12	; 18
    215e:	30 83       	st	Z, r19
    2160:	31 97       	sbiw	r30, 0x01	; 1
    2162:	33 e1       	ldi	r19, 0x13	; 19
    2164:	30 83       	st	Z, r19
    2166:	31 97       	sbiw	r30, 0x01	; 1
    2168:	34 e1       	ldi	r19, 0x14	; 20
    216a:	30 83       	st	Z, r19
    216c:	31 97       	sbiw	r30, 0x01	; 1
    216e:	35 e1       	ldi	r19, 0x15	; 21
    2170:	30 83       	st	Z, r19
    2172:	31 97       	sbiw	r30, 0x01	; 1
    2174:	36 e1       	ldi	r19, 0x16	; 22
    2176:	30 83       	st	Z, r19
    2178:	31 97       	sbiw	r30, 0x01	; 1
    217a:	37 e1       	ldi	r19, 0x17	; 23
    217c:	30 83       	st	Z, r19
    217e:	31 97       	sbiw	r30, 0x01	; 1
    2180:	38 e1       	ldi	r19, 0x18	; 24
    2182:	30 83       	st	Z, r19
    2184:	31 97       	sbiw	r30, 0x01	; 1
    2186:	39 e1       	ldi	r19, 0x19	; 25
    2188:	30 83       	st	Z, r19
    218a:	31 97       	sbiw	r30, 0x01	; 1
    218c:	30 e2       	ldi	r19, 0x20	; 32
    218e:	30 83       	st	Z, r19
    2190:	31 97       	sbiw	r30, 0x01	; 1
    2192:	31 e2       	ldi	r19, 0x21	; 33
    2194:	30 83       	st	Z, r19
    2196:	31 97       	sbiw	r30, 0x01	; 1
    2198:	20 83       	st	Z, r18
    219a:	31 97       	sbiw	r30, 0x01	; 1
    219c:	23 e2       	ldi	r18, 0x23	; 35
    219e:	20 83       	st	Z, r18
    21a0:	31 97       	sbiw	r30, 0x01	; 1
    21a2:	40 83       	st	Z, r20
    21a4:	31 97       	sbiw	r30, 0x01	; 1
    21a6:	50 83       	st	Z, r21
    21a8:	31 97       	sbiw	r30, 0x01	; 1
    21aa:	26 e2       	ldi	r18, 0x26	; 38
    21ac:	20 83       	st	Z, r18
    21ae:	31 97       	sbiw	r30, 0x01	; 1
    21b0:	27 e2       	ldi	r18, 0x27	; 39
    21b2:	20 83       	st	Z, r18
    21b4:	31 97       	sbiw	r30, 0x01	; 1
    21b6:	28 e2       	ldi	r18, 0x28	; 40
    21b8:	20 83       	st	Z, r18
    21ba:	31 97       	sbiw	r30, 0x01	; 1
    21bc:	29 e2       	ldi	r18, 0x29	; 41
    21be:	20 83       	st	Z, r18
    21c0:	31 97       	sbiw	r30, 0x01	; 1
    21c2:	20 e3       	ldi	r18, 0x30	; 48
    21c4:	20 83       	st	Z, r18
    21c6:	31 97       	sbiw	r30, 0x01	; 1
    21c8:	21 e3       	ldi	r18, 0x31	; 49
    21ca:	20 83       	st	Z, r18
    21cc:	89 97       	sbiw	r24, 0x29	; 41
    21ce:	08 95       	ret

000021d0 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    21d0:	0f 92       	push	r0
    21d2:	0f b6       	in	r0, 0x3f	; 63
    21d4:	f8 94       	cli
    21d6:	0f 92       	push	r0
    21d8:	0b b6       	in	r0, 0x3b	; 59
    21da:	0f 92       	push	r0
    21dc:	0c b6       	in	r0, 0x3c	; 60
    21de:	0f 92       	push	r0
    21e0:	1f 92       	push	r1
    21e2:	11 24       	eor	r1, r1
    21e4:	2f 92       	push	r2
    21e6:	3f 92       	push	r3
    21e8:	4f 92       	push	r4
    21ea:	5f 92       	push	r5
    21ec:	6f 92       	push	r6
    21ee:	7f 92       	push	r7
    21f0:	8f 92       	push	r8
    21f2:	9f 92       	push	r9
    21f4:	af 92       	push	r10
    21f6:	bf 92       	push	r11
    21f8:	cf 92       	push	r12
    21fa:	df 92       	push	r13
    21fc:	ef 92       	push	r14
    21fe:	ff 92       	push	r15
    2200:	0f 93       	push	r16
    2202:	1f 93       	push	r17
    2204:	2f 93       	push	r18
    2206:	3f 93       	push	r19
    2208:	4f 93       	push	r20
    220a:	5f 93       	push	r21
    220c:	6f 93       	push	r22
    220e:	7f 93       	push	r23
    2210:	8f 93       	push	r24
    2212:	9f 93       	push	r25
    2214:	af 93       	push	r26
    2216:	bf 93       	push	r27
    2218:	cf 93       	push	r28
    221a:	df 93       	push	r29
    221c:	ef 93       	push	r30
    221e:	ff 93       	push	r31
    2220:	a0 91 a1 09 	lds	r26, 0x09A1	; 0x8009a1 <pxCurrentTCB>
    2224:	b0 91 a2 09 	lds	r27, 0x09A2	; 0x8009a2 <pxCurrentTCB+0x1>
    2228:	0d b6       	in	r0, 0x3d	; 61
    222a:	0d 92       	st	X+, r0
    222c:	0e b6       	in	r0, 0x3e	; 62
    222e:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    2230:	a0 d5       	rcall	.+2880   	; 0x2d72 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    2232:	a0 91 a1 09 	lds	r26, 0x09A1	; 0x8009a1 <pxCurrentTCB>
    2236:	b0 91 a2 09 	lds	r27, 0x09A2	; 0x8009a2 <pxCurrentTCB+0x1>
    223a:	cd 91       	ld	r28, X+
    223c:	cd bf       	out	0x3d, r28	; 61
    223e:	dd 91       	ld	r29, X+
    2240:	de bf       	out	0x3e, r29	; 62
    2242:	ff 91       	pop	r31
    2244:	ef 91       	pop	r30
    2246:	df 91       	pop	r29
    2248:	cf 91       	pop	r28
    224a:	bf 91       	pop	r27
    224c:	af 91       	pop	r26
    224e:	9f 91       	pop	r25
    2250:	8f 91       	pop	r24
    2252:	7f 91       	pop	r23
    2254:	6f 91       	pop	r22
    2256:	5f 91       	pop	r21
    2258:	4f 91       	pop	r20
    225a:	3f 91       	pop	r19
    225c:	2f 91       	pop	r18
    225e:	1f 91       	pop	r17
    2260:	0f 91       	pop	r16
    2262:	ff 90       	pop	r15
    2264:	ef 90       	pop	r14
    2266:	df 90       	pop	r13
    2268:	cf 90       	pop	r12
    226a:	bf 90       	pop	r11
    226c:	af 90       	pop	r10
    226e:	9f 90       	pop	r9
    2270:	8f 90       	pop	r8
    2272:	7f 90       	pop	r7
    2274:	6f 90       	pop	r6
    2276:	5f 90       	pop	r5
    2278:	4f 90       	pop	r4
    227a:	3f 90       	pop	r3
    227c:	2f 90       	pop	r2
    227e:	1f 90       	pop	r1
    2280:	0f 90       	pop	r0
    2282:	0c be       	out	0x3c, r0	; 60
    2284:	0f 90       	pop	r0
    2286:	0b be       	out	0x3b, r0	; 59
    2288:	0f 90       	pop	r0
    228a:	0f be       	out	0x3f, r0	; 63
    228c:	0f 90       	pop	r0

	__asm__ __volatile__ ( "ret" );
    228e:	08 95       	ret

00002290 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    2290:	0f 92       	push	r0
    2292:	0f b6       	in	r0, 0x3f	; 63
    2294:	f8 94       	cli
    2296:	0f 92       	push	r0
    2298:	0b b6       	in	r0, 0x3b	; 59
    229a:	0f 92       	push	r0
    229c:	0c b6       	in	r0, 0x3c	; 60
    229e:	0f 92       	push	r0
    22a0:	1f 92       	push	r1
    22a2:	11 24       	eor	r1, r1
    22a4:	2f 92       	push	r2
    22a6:	3f 92       	push	r3
    22a8:	4f 92       	push	r4
    22aa:	5f 92       	push	r5
    22ac:	6f 92       	push	r6
    22ae:	7f 92       	push	r7
    22b0:	8f 92       	push	r8
    22b2:	9f 92       	push	r9
    22b4:	af 92       	push	r10
    22b6:	bf 92       	push	r11
    22b8:	cf 92       	push	r12
    22ba:	df 92       	push	r13
    22bc:	ef 92       	push	r14
    22be:	ff 92       	push	r15
    22c0:	0f 93       	push	r16
    22c2:	1f 93       	push	r17
    22c4:	2f 93       	push	r18
    22c6:	3f 93       	push	r19
    22c8:	4f 93       	push	r20
    22ca:	5f 93       	push	r21
    22cc:	6f 93       	push	r22
    22ce:	7f 93       	push	r23
    22d0:	8f 93       	push	r24
    22d2:	9f 93       	push	r25
    22d4:	af 93       	push	r26
    22d6:	bf 93       	push	r27
    22d8:	cf 93       	push	r28
    22da:	df 93       	push	r29
    22dc:	ef 93       	push	r30
    22de:	ff 93       	push	r31
    22e0:	a0 91 a1 09 	lds	r26, 0x09A1	; 0x8009a1 <pxCurrentTCB>
    22e4:	b0 91 a2 09 	lds	r27, 0x09A2	; 0x8009a2 <pxCurrentTCB+0x1>
    22e8:	0d b6       	in	r0, 0x3d	; 61
    22ea:	0d 92       	st	X+, r0
    22ec:	0e b6       	in	r0, 0x3e	; 62
    22ee:	0d 92       	st	X+, r0

	sleep_reset();		//	 reset the sleep_mode() faster than sleep_disable();
    22f0:	13 be       	out	0x33, r1	; 51

	if( xTaskIncrementTick() != pdFALSE )
    22f2:	ff d3       	rcall	.+2046   	; 0x2af2 <xTaskIncrementTick>
    22f4:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
    22f6:	3d d5       	rcall	.+2682   	; 0x2d72 <vTaskSwitchContext>
    22f8:	a0 91 a1 09 	lds	r26, 0x09A1	; 0x8009a1 <pxCurrentTCB>
	}

	portRESTORE_CONTEXT();
    22fc:	b0 91 a2 09 	lds	r27, 0x09A2	; 0x8009a2 <pxCurrentTCB+0x1>
    2300:	cd 91       	ld	r28, X+
    2302:	cd bf       	out	0x3d, r28	; 61
    2304:	dd 91       	ld	r29, X+
    2306:	de bf       	out	0x3e, r29	; 62
    2308:	ff 91       	pop	r31
    230a:	ef 91       	pop	r30
    230c:	df 91       	pop	r29
    230e:	cf 91       	pop	r28
    2310:	bf 91       	pop	r27
    2312:	af 91       	pop	r26
    2314:	9f 91       	pop	r25
    2316:	8f 91       	pop	r24
    2318:	7f 91       	pop	r23
    231a:	6f 91       	pop	r22
    231c:	5f 91       	pop	r21
    231e:	4f 91       	pop	r20
    2320:	3f 91       	pop	r19
    2322:	2f 91       	pop	r18
    2324:	1f 91       	pop	r17
    2326:	0f 91       	pop	r16
    2328:	ff 90       	pop	r15
    232a:	ef 90       	pop	r14
    232c:	df 90       	pop	r13
    232e:	cf 90       	pop	r12
    2330:	bf 90       	pop	r11
    2332:	af 90       	pop	r10
    2334:	9f 90       	pop	r9
    2336:	8f 90       	pop	r8
    2338:	7f 90       	pop	r7
    233a:	6f 90       	pop	r6
    233c:	5f 90       	pop	r5
    233e:	4f 90       	pop	r4
    2340:	3f 90       	pop	r3
    2342:	2f 90       	pop	r2
    2344:	1f 90       	pop	r1
    2346:	0f 90       	pop	r0
    2348:	0c be       	out	0x3c, r0	; 60
    234a:	0f 90       	pop	r0
    234c:	0b be       	out	0x3b, r0	; 59
    234e:	0f 90       	pop	r0
    2350:	0f be       	out	0x3f, r0	; 63
    2352:	0f 90       	pop	r0
    2354:	08 95       	ret

00002356 <__vector_12>:

	__asm__ __volatile__ ( "ret" );
    2356:	9c df       	rcall	.-200    	; 0x2290 <vPortYieldFromTick>
//	ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
	ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
	ISR(portSCHEDULER_ISR)
	{
		vPortYieldFromTick();
		__asm__ __volatile__ ( "reti" );
    2358:	18 95       	reti

0000235a <prvBytesInBuffer>:
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

    return xReturn;
}
    235a:	fc 01       	movw	r30, r24
    235c:	44 81       	ldd	r20, Z+4	; 0x04
    235e:	55 81       	ldd	r21, Z+5	; 0x05
    2360:	22 81       	ldd	r18, Z+2	; 0x02
    2362:	33 81       	ldd	r19, Z+3	; 0x03
    2364:	24 0f       	add	r18, r20
    2366:	35 1f       	adc	r19, r21
    2368:	80 81       	ld	r24, Z
    236a:	91 81       	ldd	r25, Z+1	; 0x01
    236c:	b9 01       	movw	r22, r18
    236e:	68 1b       	sub	r22, r24
    2370:	79 0b       	sbc	r23, r25
    2372:	cb 01       	movw	r24, r22
    2374:	64 17       	cp	r22, r20
    2376:	75 07       	cpc	r23, r21
    2378:	10 f0       	brcs	.+4      	; 0x237e <prvBytesInBuffer+0x24>
    237a:	84 1b       	sub	r24, r20
    237c:	95 0b       	sbc	r25, r21
    237e:	08 95       	ret

00002380 <prvWriteBytesToBuffer>:
    2380:	af 92       	push	r10
    2382:	bf 92       	push	r11
    2384:	cf 92       	push	r12
    2386:	df 92       	push	r13
    2388:	ef 92       	push	r14
    238a:	ff 92       	push	r15
    238c:	0f 93       	push	r16
    238e:	1f 93       	push	r17
    2390:	cf 93       	push	r28
    2392:	df 93       	push	r29
    2394:	6c 01       	movw	r12, r24
    2396:	5b 01       	movw	r10, r22
    2398:	7a 01       	movw	r14, r20
    239a:	fc 01       	movw	r30, r24
    239c:	c2 81       	ldd	r28, Z+2	; 0x02
    239e:	d3 81       	ldd	r29, Z+3	; 0x03
    23a0:	04 81       	ldd	r16, Z+4	; 0x04
    23a2:	15 81       	ldd	r17, Z+5	; 0x05
    23a4:	0c 1b       	sub	r16, r28
    23a6:	1d 0b       	sbc	r17, r29
    23a8:	40 17       	cp	r20, r16
    23aa:	51 07       	cpc	r21, r17
    23ac:	08 f4       	brcc	.+2      	; 0x23b0 <prvWriteBytesToBuffer+0x30>
    23ae:	8a 01       	movw	r16, r20
    23b0:	f6 01       	movw	r30, r12
    23b2:	84 85       	ldd	r24, Z+12	; 0x0c
    23b4:	95 85       	ldd	r25, Z+13	; 0x0d
    23b6:	a8 01       	movw	r20, r16
    23b8:	b5 01       	movw	r22, r10
    23ba:	8c 0f       	add	r24, r28
    23bc:	9d 1f       	adc	r25, r29
    23be:	34 d7       	rcall	.+3688   	; 0x3228 <memcpy>
    23c0:	0e 15       	cp	r16, r14
    23c2:	1f 05       	cpc	r17, r15
    23c4:	50 f4       	brcc	.+20     	; 0x23da <prvWriteBytesToBuffer+0x5a>
    23c6:	a7 01       	movw	r20, r14
    23c8:	40 1b       	sub	r20, r16
    23ca:	51 0b       	sbc	r21, r17
    23cc:	b5 01       	movw	r22, r10
    23ce:	60 0f       	add	r22, r16
    23d0:	71 1f       	adc	r23, r17
    23d2:	f6 01       	movw	r30, r12
    23d4:	84 85       	ldd	r24, Z+12	; 0x0c
    23d6:	95 85       	ldd	r25, Z+13	; 0x0d
    23d8:	27 d7       	rcall	.+3662   	; 0x3228 <memcpy>
    23da:	ce 01       	movw	r24, r28
    23dc:	8e 0d       	add	r24, r14
    23de:	9f 1d       	adc	r25, r15
    23e0:	f6 01       	movw	r30, r12
    23e2:	24 81       	ldd	r18, Z+4	; 0x04
    23e4:	35 81       	ldd	r19, Z+5	; 0x05
    23e6:	82 17       	cp	r24, r18
    23e8:	93 07       	cpc	r25, r19
    23ea:	10 f0       	brcs	.+4      	; 0x23f0 <prvWriteBytesToBuffer+0x70>
    23ec:	82 1b       	sub	r24, r18
    23ee:	93 0b       	sbc	r25, r19
    23f0:	f6 01       	movw	r30, r12
    23f2:	93 83       	std	Z+3, r25	; 0x03
    23f4:	82 83       	std	Z+2, r24	; 0x02
    23f6:	c7 01       	movw	r24, r14
    23f8:	df 91       	pop	r29
    23fa:	cf 91       	pop	r28
    23fc:	1f 91       	pop	r17
    23fe:	0f 91       	pop	r16
    2400:	ff 90       	pop	r15
    2402:	ef 90       	pop	r14
    2404:	df 90       	pop	r13
    2406:	cf 90       	pop	r12
    2408:	bf 90       	pop	r11
    240a:	af 90       	pop	r10
    240c:	08 95       	ret

0000240e <prvWriteMessageToBuffer>:
    240e:	cf 92       	push	r12
    2410:	df 92       	push	r13
    2412:	ef 92       	push	r14
    2414:	ff 92       	push	r15
    2416:	0f 93       	push	r16
    2418:	1f 93       	push	r17
    241a:	cf 93       	push	r28
    241c:	df 93       	push	r29
    241e:	1f 92       	push	r1
    2420:	1f 92       	push	r1
    2422:	cd b7       	in	r28, 0x3d	; 61
    2424:	de b7       	in	r29, 0x3e	; 62
    2426:	5a 83       	std	Y+2, r21	; 0x02
    2428:	49 83       	std	Y+1, r20	; 0x01
    242a:	21 15       	cp	r18, r1
    242c:	31 05       	cpc	r19, r1
    242e:	c9 f0       	breq	.+50     	; 0x2462 <prvWriteMessageToBuffer+0x54>
    2430:	6b 01       	movw	r12, r22
    2432:	7c 01       	movw	r14, r24
    2434:	fc 01       	movw	r30, r24
    2436:	86 85       	ldd	r24, Z+14	; 0x0e
    2438:	80 fd       	sbrc	r24, 0
    243a:	08 c0       	rjmp	.+16     	; 0x244c <prvWriteMessageToBuffer+0x3e>
    243c:	ca 01       	movw	r24, r20
    243e:	24 17       	cp	r18, r20
    2440:	35 07       	cpc	r19, r21
    2442:	08 f4       	brcc	.+2      	; 0x2446 <prvWriteMessageToBuffer+0x38>
    2444:	c9 01       	movw	r24, r18
    2446:	9a 83       	std	Y+2, r25	; 0x02
    2448:	89 83       	std	Y+1, r24	; 0x01
    244a:	11 c0       	rjmp	.+34     	; 0x246e <prvWriteMessageToBuffer+0x60>
    244c:	20 17       	cp	r18, r16
    244e:	31 07       	cpc	r19, r17
    2450:	58 f0       	brcs	.+22     	; 0x2468 <prvWriteMessageToBuffer+0x5a>
    2452:	42 e0       	ldi	r20, 0x02	; 2
    2454:	50 e0       	ldi	r21, 0x00	; 0
    2456:	be 01       	movw	r22, r28
    2458:	6f 5f       	subi	r22, 0xFF	; 255
    245a:	7f 4f       	sbci	r23, 0xFF	; 255
    245c:	c7 01       	movw	r24, r14
    245e:	90 df       	rcall	.-224    	; 0x2380 <prvWriteBytesToBuffer>
    2460:	06 c0       	rjmp	.+12     	; 0x246e <prvWriteMessageToBuffer+0x60>
    2462:	80 e0       	ldi	r24, 0x00	; 0
    2464:	90 e0       	ldi	r25, 0x00	; 0
    2466:	08 c0       	rjmp	.+16     	; 0x2478 <prvWriteMessageToBuffer+0x6a>
    2468:	80 e0       	ldi	r24, 0x00	; 0
    246a:	90 e0       	ldi	r25, 0x00	; 0
    246c:	05 c0       	rjmp	.+10     	; 0x2478 <prvWriteMessageToBuffer+0x6a>
    246e:	49 81       	ldd	r20, Y+1	; 0x01
    2470:	5a 81       	ldd	r21, Y+2	; 0x02
    2472:	b6 01       	movw	r22, r12
    2474:	c7 01       	movw	r24, r14
    2476:	84 df       	rcall	.-248    	; 0x2380 <prvWriteBytesToBuffer>
    2478:	0f 90       	pop	r0
    247a:	0f 90       	pop	r0
    247c:	df 91       	pop	r29
    247e:	cf 91       	pop	r28
    2480:	1f 91       	pop	r17
    2482:	0f 91       	pop	r16
    2484:	ff 90       	pop	r15
    2486:	ef 90       	pop	r14
    2488:	df 90       	pop	r13
    248a:	cf 90       	pop	r12
    248c:	08 95       	ret

0000248e <prvReadBytesFromBuffer>:
    248e:	af 92       	push	r10
    2490:	bf 92       	push	r11
    2492:	cf 92       	push	r12
    2494:	df 92       	push	r13
    2496:	ef 92       	push	r14
    2498:	ff 92       	push	r15
    249a:	0f 93       	push	r16
    249c:	1f 93       	push	r17
    249e:	cf 93       	push	r28
    24a0:	df 93       	push	r29
    24a2:	7c 01       	movw	r14, r24
    24a4:	5b 01       	movw	r10, r22
    24a6:	e9 01       	movw	r28, r18
    24a8:	42 17       	cp	r20, r18
    24aa:	53 07       	cpc	r21, r19
    24ac:	08 f4       	brcc	.+2      	; 0x24b0 <prvReadBytesFromBuffer+0x22>
    24ae:	ea 01       	movw	r28, r20
    24b0:	20 97       	sbiw	r28, 0x00	; 0
    24b2:	69 f1       	breq	.+90     	; 0x250e <prvReadBytesFromBuffer+0x80>
    24b4:	f7 01       	movw	r30, r14
    24b6:	00 81       	ld	r16, Z
    24b8:	11 81       	ldd	r17, Z+1	; 0x01
    24ba:	c4 80       	ldd	r12, Z+4	; 0x04
    24bc:	d5 80       	ldd	r13, Z+5	; 0x05
    24be:	c0 1a       	sub	r12, r16
    24c0:	d1 0a       	sbc	r13, r17
    24c2:	cc 15       	cp	r28, r12
    24c4:	dd 05       	cpc	r29, r13
    24c6:	08 f4       	brcc	.+2      	; 0x24ca <prvReadBytesFromBuffer+0x3c>
    24c8:	6e 01       	movw	r12, r28
    24ca:	f7 01       	movw	r30, r14
    24cc:	64 85       	ldd	r22, Z+12	; 0x0c
    24ce:	75 85       	ldd	r23, Z+13	; 0x0d
    24d0:	60 0f       	add	r22, r16
    24d2:	71 1f       	adc	r23, r17
    24d4:	a6 01       	movw	r20, r12
    24d6:	c5 01       	movw	r24, r10
    24d8:	a7 d6       	rcall	.+3406   	; 0x3228 <memcpy>
    24da:	cc 16       	cp	r12, r28
    24dc:	dd 06       	cpc	r13, r29
    24de:	50 f4       	brcc	.+20     	; 0x24f4 <prvReadBytesFromBuffer+0x66>
    24e0:	ae 01       	movw	r20, r28
    24e2:	4c 19       	sub	r20, r12
    24e4:	5d 09       	sbc	r21, r13
    24e6:	f7 01       	movw	r30, r14
    24e8:	64 85       	ldd	r22, Z+12	; 0x0c
    24ea:	75 85       	ldd	r23, Z+13	; 0x0d
    24ec:	c5 01       	movw	r24, r10
    24ee:	8c 0d       	add	r24, r12
    24f0:	9d 1d       	adc	r25, r13
    24f2:	9a d6       	rcall	.+3380   	; 0x3228 <memcpy>
    24f4:	0c 0f       	add	r16, r28
    24f6:	1d 1f       	adc	r17, r29
    24f8:	f7 01       	movw	r30, r14
    24fa:	84 81       	ldd	r24, Z+4	; 0x04
    24fc:	95 81       	ldd	r25, Z+5	; 0x05
    24fe:	08 17       	cp	r16, r24
    2500:	19 07       	cpc	r17, r25
    2502:	10 f0       	brcs	.+4      	; 0x2508 <prvReadBytesFromBuffer+0x7a>
    2504:	08 1b       	sub	r16, r24
    2506:	19 0b       	sbc	r17, r25
    2508:	f7 01       	movw	r30, r14
    250a:	11 83       	std	Z+1, r17	; 0x01
    250c:	00 83       	st	Z, r16
    250e:	ce 01       	movw	r24, r28
    2510:	df 91       	pop	r29
    2512:	cf 91       	pop	r28
    2514:	1f 91       	pop	r17
    2516:	0f 91       	pop	r16
    2518:	ff 90       	pop	r15
    251a:	ef 90       	pop	r14
    251c:	df 90       	pop	r13
    251e:	cf 90       	pop	r12
    2520:	bf 90       	pop	r11
    2522:	af 90       	pop	r10
    2524:	08 95       	ret

00002526 <xStreamBufferGenericCreateStatic>:
    2526:	0f 93       	push	r16
    2528:	1f 93       	push	r17
    252a:	cf 93       	push	r28
    252c:	df 93       	push	r29
    252e:	dc 01       	movw	r26, r24
    2530:	f8 01       	movw	r30, r16
    2532:	61 15       	cp	r22, r1
    2534:	71 05       	cpc	r23, r1
    2536:	11 f4       	brne	.+4      	; 0x253c <xStreamBufferGenericCreateStatic+0x16>
    2538:	61 e0       	ldi	r22, 0x01	; 1
    253a:	70 e0       	ldi	r23, 0x00	; 0
    253c:	41 11       	cpse	r20, r1
    253e:	02 c0       	rjmp	.+4      	; 0x2544 <xStreamBufferGenericCreateStatic+0x1e>
    2540:	92 e0       	ldi	r25, 0x02	; 2
    2542:	01 c0       	rjmp	.+2      	; 0x2546 <xStreamBufferGenericCreateStatic+0x20>
    2544:	93 e0       	ldi	r25, 0x03	; 3
    2546:	21 15       	cp	r18, r1
    2548:	31 05       	cpc	r19, r1
    254a:	91 f0       	breq	.+36     	; 0x2570 <xStreamBufferGenericCreateStatic+0x4a>
    254c:	30 97       	sbiw	r30, 0x00	; 0
    254e:	99 f0       	breq	.+38     	; 0x2576 <xStreamBufferGenericCreateStatic+0x50>
    2550:	8f e0       	ldi	r24, 0x0F	; 15
    2552:	ef 01       	movw	r28, r30
    2554:	19 92       	st	Y+, r1
    2556:	8a 95       	dec	r24
    2558:	e9 f7       	brne	.-6      	; 0x2554 <xStreamBufferGenericCreateStatic+0x2e>
    255a:	35 87       	std	Z+13, r19	; 0x0d
    255c:	24 87       	std	Z+12, r18	; 0x0c
    255e:	b5 83       	std	Z+5, r27	; 0x05
    2560:	a4 83       	std	Z+4, r26	; 0x04
    2562:	77 83       	std	Z+7, r23	; 0x07
    2564:	66 83       	std	Z+6, r22	; 0x06
    2566:	92 60       	ori	r25, 0x02	; 2
    2568:	96 87       	std	Z+14, r25	; 0x0e
    256a:	8e 2f       	mov	r24, r30
    256c:	9f 2f       	mov	r25, r31
    256e:	05 c0       	rjmp	.+10     	; 0x257a <xStreamBufferGenericCreateStatic+0x54>
    2570:	80 e0       	ldi	r24, 0x00	; 0
    2572:	90 e0       	ldi	r25, 0x00	; 0
    2574:	02 c0       	rjmp	.+4      	; 0x257a <xStreamBufferGenericCreateStatic+0x54>
    2576:	8e 2f       	mov	r24, r30
    2578:	9f 2f       	mov	r25, r31
    257a:	df 91       	pop	r29
    257c:	cf 91       	pop	r28
    257e:	1f 91       	pop	r17
    2580:	0f 91       	pop	r16
    2582:	08 95       	ret

00002584 <xStreamBufferSpacesAvailable>:
    2584:	fc 01       	movw	r30, r24
    2586:	24 81       	ldd	r18, Z+4	; 0x04
    2588:	35 81       	ldd	r19, Z+5	; 0x05
    258a:	80 81       	ld	r24, Z
    258c:	91 81       	ldd	r25, Z+1	; 0x01
    258e:	42 81       	ldd	r20, Z+2	; 0x02
    2590:	53 81       	ldd	r21, Z+3	; 0x03
    2592:	82 0f       	add	r24, r18
    2594:	93 1f       	adc	r25, r19
    2596:	01 97       	sbiw	r24, 0x01	; 1
    2598:	84 1b       	sub	r24, r20
    259a:	95 0b       	sbc	r25, r21
    259c:	82 17       	cp	r24, r18
    259e:	93 07       	cpc	r25, r19
    25a0:	10 f0       	brcs	.+4      	; 0x25a6 <xStreamBufferSpacesAvailable+0x22>
    25a2:	82 1b       	sub	r24, r18
    25a4:	93 0b       	sbc	r25, r19
    25a6:	08 95       	ret

000025a8 <xStreamBufferSend>:
    25a8:	4f 92       	push	r4
    25aa:	5f 92       	push	r5
    25ac:	6f 92       	push	r6
    25ae:	7f 92       	push	r7
    25b0:	8f 92       	push	r8
    25b2:	9f 92       	push	r9
    25b4:	af 92       	push	r10
    25b6:	bf 92       	push	r11
    25b8:	cf 92       	push	r12
    25ba:	df 92       	push	r13
    25bc:	ef 92       	push	r14
    25be:	ff 92       	push	r15
    25c0:	0f 93       	push	r16
    25c2:	1f 93       	push	r17
    25c4:	cf 93       	push	r28
    25c6:	df 93       	push	r29
    25c8:	00 d0       	rcall	.+0      	; 0x25ca <xStreamBufferSend+0x22>
    25ca:	1f 92       	push	r1
    25cc:	1f 92       	push	r1
    25ce:	cd b7       	in	r28, 0x3d	; 61
    25d0:	de b7       	in	r29, 0x3e	; 62
    25d2:	6c 01       	movw	r12, r24
    25d4:	2b 01       	movw	r4, r22
    25d6:	3a 01       	movw	r6, r20
    25d8:	3d 83       	std	Y+5, r19	; 0x05
    25da:	2c 83       	std	Y+4, r18	; 0x04
    25dc:	fc 01       	movw	r30, r24
    25de:	86 85       	ldd	r24, Z+14	; 0x0e
    25e0:	80 ff       	sbrs	r24, 0
    25e2:	05 c0       	rjmp	.+10     	; 0x25ee <xStreamBufferSend+0x46>
    25e4:	4a 01       	movw	r8, r20
    25e6:	f2 e0       	ldi	r31, 0x02	; 2
    25e8:	8f 0e       	add	r8, r31
    25ea:	91 1c       	adc	r9, r1
    25ec:	01 c0       	rjmp	.+2      	; 0x25f0 <xStreamBufferSend+0x48>
    25ee:	4a 01       	movw	r8, r20
    25f0:	8c 81       	ldd	r24, Y+4	; 0x04
    25f2:	9d 81       	ldd	r25, Y+5	; 0x05
    25f4:	89 2b       	or	r24, r25
    25f6:	09 f4       	brne	.+2      	; 0x25fa <xStreamBufferSend+0x52>
    25f8:	31 c0       	rjmp	.+98     	; 0x265c <xStreamBufferSend+0xb4>
    25fa:	ce 01       	movw	r24, r28
    25fc:	01 96       	adiw	r24, 0x01	; 1
    25fe:	39 d4       	rcall	.+2162   	; 0x2e72 <vTaskSetTimeOutState>
    2600:	0f b6       	in	r0, 0x3f	; 63
    2602:	f8 94       	cli
    2604:	0f 92       	push	r0
    2606:	c6 01       	movw	r24, r12
    2608:	bd df       	rcall	.-134    	; 0x2584 <xStreamBufferSpacesAvailable>
    260a:	5c 01       	movw	r10, r24
    260c:	88 15       	cp	r24, r8
    260e:	99 05       	cpc	r25, r9
    2610:	00 f5       	brcc	.+64     	; 0x2652 <xStreamBufferSend+0xaa>
    2612:	80 e0       	ldi	r24, 0x00	; 0
    2614:	90 e0       	ldi	r25, 0x00	; 0
    2616:	81 d5       	rcall	.+2818   	; 0x311a <xTaskNotifyStateClear>
    2618:	7c d4       	rcall	.+2296   	; 0x2f12 <xTaskGetCurrentTaskHandle>
    261a:	f6 01       	movw	r30, r12
    261c:	93 87       	std	Z+11, r25	; 0x0b
    261e:	82 87       	std	Z+10, r24	; 0x0a
    2620:	0f 90       	pop	r0
    2622:	0f be       	out	0x3f, r0	; 63
    2624:	ec 80       	ldd	r14, Y+4	; 0x04
    2626:	fd 80       	ldd	r15, Y+5	; 0x05
    2628:	00 e0       	ldi	r16, 0x00	; 0
    262a:	10 e0       	ldi	r17, 0x00	; 0
    262c:	20 e0       	ldi	r18, 0x00	; 0
    262e:	30 e0       	ldi	r19, 0x00	; 0
    2630:	a9 01       	movw	r20, r18
    2632:	60 e0       	ldi	r22, 0x00	; 0
    2634:	70 e0       	ldi	r23, 0x00	; 0
    2636:	cb 01       	movw	r24, r22
    2638:	71 d4       	rcall	.+2274   	; 0x2f1c <xTaskNotifyWait>
    263a:	f6 01       	movw	r30, r12
    263c:	13 86       	std	Z+11, r1	; 0x0b
    263e:	12 86       	std	Z+10, r1	; 0x0a
    2640:	be 01       	movw	r22, r28
    2642:	6c 5f       	subi	r22, 0xFC	; 252
    2644:	7f 4f       	sbci	r23, 0xFF	; 255
    2646:	ce 01       	movw	r24, r28
    2648:	01 96       	adiw	r24, 0x01	; 1
    264a:	2e d4       	rcall	.+2140   	; 0x2ea8 <xTaskCheckForTimeOut>
    264c:	88 23       	and	r24, r24
    264e:	c1 f2       	breq	.-80     	; 0x2600 <xStreamBufferSend+0x58>
    2650:	02 c0       	rjmp	.+4      	; 0x2656 <xStreamBufferSend+0xae>
    2652:	0f 90       	pop	r0
    2654:	0f be       	out	0x3f, r0	; 63
    2656:	a1 14       	cp	r10, r1
    2658:	b1 04       	cpc	r11, r1
    265a:	19 f4       	brne	.+6      	; 0x2662 <xStreamBufferSend+0xba>
    265c:	c6 01       	movw	r24, r12
    265e:	92 df       	rcall	.-220    	; 0x2584 <xStreamBufferSpacesAvailable>
    2660:	5c 01       	movw	r10, r24
    2662:	84 01       	movw	r16, r8
    2664:	95 01       	movw	r18, r10
    2666:	a3 01       	movw	r20, r6
    2668:	b2 01       	movw	r22, r4
    266a:	c6 01       	movw	r24, r12
    266c:	d0 de       	rcall	.-608    	; 0x240e <prvWriteMessageToBuffer>
    266e:	7c 01       	movw	r14, r24
    2670:	89 2b       	or	r24, r25
    2672:	d9 f0       	breq	.+54     	; 0x26aa <xStreamBufferSend+0x102>
    2674:	c6 01       	movw	r24, r12
    2676:	71 de       	rcall	.-798    	; 0x235a <prvBytesInBuffer>
    2678:	f6 01       	movw	r30, r12
    267a:	26 81       	ldd	r18, Z+6	; 0x06
    267c:	37 81       	ldd	r19, Z+7	; 0x07
    267e:	82 17       	cp	r24, r18
    2680:	93 07       	cpc	r25, r19
    2682:	98 f0       	brcs	.+38     	; 0x26aa <xStreamBufferSend+0x102>
    2684:	30 d2       	rcall	.+1120   	; 0x2ae6 <vTaskSuspendAll>
    2686:	f6 01       	movw	r30, r12
    2688:	80 85       	ldd	r24, Z+8	; 0x08
    268a:	91 85       	ldd	r25, Z+9	; 0x09
    268c:	89 2b       	or	r24, r25
    268e:	61 f0       	breq	.+24     	; 0x26a8 <xStreamBufferSend+0x100>
    2690:	80 85       	ldd	r24, Z+8	; 0x08
    2692:	91 85       	ldd	r25, Z+9	; 0x09
    2694:	00 e0       	ldi	r16, 0x00	; 0
    2696:	10 e0       	ldi	r17, 0x00	; 0
    2698:	20 e0       	ldi	r18, 0x00	; 0
    269a:	40 e0       	ldi	r20, 0x00	; 0
    269c:	50 e0       	ldi	r21, 0x00	; 0
    269e:	ba 01       	movw	r22, r20
    26a0:	bf d4       	rcall	.+2430   	; 0x3020 <xTaskGenericNotify>
    26a2:	f6 01       	movw	r30, r12
    26a4:	11 86       	std	Z+9, r1	; 0x09
    26a6:	10 86       	std	Z+8, r1	; 0x08
    26a8:	db d2       	rcall	.+1462   	; 0x2c60 <xTaskResumeAll>
    26aa:	c7 01       	movw	r24, r14
    26ac:	0f 90       	pop	r0
    26ae:	0f 90       	pop	r0
    26b0:	0f 90       	pop	r0
    26b2:	0f 90       	pop	r0
    26b4:	0f 90       	pop	r0
    26b6:	df 91       	pop	r29
    26b8:	cf 91       	pop	r28
    26ba:	1f 91       	pop	r17
    26bc:	0f 91       	pop	r16
    26be:	ff 90       	pop	r15
    26c0:	ef 90       	pop	r14
    26c2:	df 90       	pop	r13
    26c4:	cf 90       	pop	r12
    26c6:	bf 90       	pop	r11
    26c8:	af 90       	pop	r10
    26ca:	9f 90       	pop	r9
    26cc:	8f 90       	pop	r8
    26ce:	7f 90       	pop	r7
    26d0:	6f 90       	pop	r6
    26d2:	5f 90       	pop	r5
    26d4:	4f 90       	pop	r4
    26d6:	08 95       	ret

000026d8 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void *pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    26d8:	6f 92       	push	r6
    26da:	7f 92       	push	r7
    26dc:	8f 92       	push	r8
    26de:	9f 92       	push	r9
    26e0:	af 92       	push	r10
    26e2:	bf 92       	push	r11
    26e4:	cf 92       	push	r12
    26e6:	df 92       	push	r13
    26e8:	ef 92       	push	r14
    26ea:	ff 92       	push	r15
    26ec:	0f 93       	push	r16
    26ee:	1f 93       	push	r17
    26f0:	cf 93       	push	r28
    26f2:	df 93       	push	r29
    26f4:	1f 92       	push	r1
    26f6:	1f 92       	push	r1
    26f8:	cd b7       	in	r28, 0x3d	; 61
    26fa:	de b7       	in	r29, 0x3e	; 62
    26fc:	6c 01       	movw	r12, r24
    26fe:	3b 01       	movw	r6, r22
    2700:	4a 01       	movw	r8, r20
    2702:	79 01       	movw	r14, r18
    /* This receive function is used by both message buffers, which store
    discrete messages, and stream buffers, which store a continuous stream of
    bytes.  Discrete messages include an additional
    sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    2704:	fc 01       	movw	r30, r24
    2706:	86 85       	ldd	r24, Z+14	; 0x0e
    2708:	80 fd       	sbrc	r24, 0
    270a:	03 c0       	rjmp	.+6      	; 0x2712 <xStreamBufferReceive+0x3a>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    270c:	a1 2c       	mov	r10, r1
    270e:	b1 2c       	mov	r11, r1
    2710:	04 c0       	rjmp	.+8      	; 0x271a <xStreamBufferReceive+0x42>
    bytes.  Discrete messages include an additional
    sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    2712:	68 94       	set
    2714:	aa 24       	eor	r10, r10
    2716:	a1 f8       	bld	r10, 1
    2718:	b1 2c       	mov	r11, r1
    else
    {
        xBytesToStoreMessageLength = 0;
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    271a:	e1 14       	cp	r14, r1
    271c:	f1 04       	cpc	r15, r1
    271e:	29 f1       	breq	.+74     	; 0x276a <xStreamBufferReceive+0x92>
    {
        /* Checking if there is data and clearing the notification state must be
        performed atomically. */
        taskENTER_CRITICAL();
    2720:	0f b6       	in	r0, 0x3f	; 63
    2722:	f8 94       	cli
    2724:	0f 92       	push	r0
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    2726:	c6 01       	movw	r24, r12
    2728:	18 de       	rcall	.-976    	; 0x235a <prvBytesInBuffer>
    272a:	8c 01       	movw	r16, r24
            /* If this function was invoked by a message buffer read then
            xBytesToStoreMessageLength holds the number of bytes used to hold
            the length of the next discrete message.  If this function was
            invoked by a stream buffer read then xBytesToStoreMessageLength will
            be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
    272c:	a8 16       	cp	r10, r24
    272e:	b9 06       	cpc	r11, r25
    2730:	38 f0       	brcs	.+14     	; 0x2740 <xStreamBufferReceive+0x68>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
    2732:	80 e0       	ldi	r24, 0x00	; 0
    2734:	90 e0       	ldi	r25, 0x00	; 0

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    2736:	f1 d4       	rcall	.+2530   	; 0x311a <xTaskNotifyStateClear>
    2738:	ec d3       	rcall	.+2008   	; 0x2f12 <xTaskGetCurrentTaskHandle>
    273a:	f6 01       	movw	r30, r12
    273c:	91 87       	std	Z+9, r25	; 0x09
    273e:	80 87       	std	Z+8, r24	; 0x08
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    2740:	0f 90       	pop	r0
    2742:	0f be       	out	0x3f, r0	; 63

        if( xBytesAvailable <= xBytesToStoreMessageLength )
    2744:	a0 16       	cp	r10, r16
    2746:	b1 06       	cpc	r11, r17
    2748:	b0 f0       	brcs	.+44     	; 0x2776 <xStreamBufferReceive+0x9e>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    274a:	00 e0       	ldi	r16, 0x00	; 0
    274c:	10 e0       	ldi	r17, 0x00	; 0
    274e:	20 e0       	ldi	r18, 0x00	; 0
    2750:	30 e0       	ldi	r19, 0x00	; 0
    2752:	a9 01       	movw	r20, r18
    2754:	60 e0       	ldi	r22, 0x00	; 0
    2756:	70 e0       	ldi	r23, 0x00	; 0
    2758:	cb 01       	movw	r24, r22
    275a:	e0 d3       	rcall	.+1984   	; 0x2f1c <xTaskNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
    275c:	f6 01       	movw	r30, r12
    275e:	11 86       	std	Z+9, r1	; 0x09

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    2760:	10 86       	std	Z+8, r1	; 0x08
    2762:	c6 01       	movw	r24, r12
    2764:	fa dd       	rcall	.-1036   	; 0x235a <prvBytesInBuffer>
    2766:	8c 01       	movw	r16, r24
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    2768:	03 c0       	rjmp	.+6      	; 0x2770 <xStreamBufferReceive+0x98>
    276a:	c6 01       	movw	r24, r12
    276c:	f6 dd       	rcall	.-1044   	; 0x235a <prvBytesInBuffer>
    276e:	8c 01       	movw	r16, r24
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
    holds the number of bytes used to store the message length) or a stream of
    bytes (where xBytesToStoreMessageLength is zero), the number of bytes
    available must be greater than xBytesToStoreMessageLength to be able to
    read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    2770:	a0 16       	cp	r10, r16
    2772:	b1 06       	cpc	r11, r17
    2774:	b8 f5       	brcc	.+110    	; 0x27e4 <xStreamBufferReceive+0x10c>
                                        size_t xBytesToStoreMessageLength )
{
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

    if( xBytesToStoreMessageLength != ( size_t ) 0 )
    2776:	a1 14       	cp	r10, r1
    2778:	b1 04       	cpc	r11, r1
    277a:	c1 f0       	breq	.+48     	; 0x27ac <xStreamBufferReceive+0xd4>
    {
        /* A discrete message is being received.  First receive the length
        of the message.  A copy of the tail is stored so the buffer can be
        returned to its prior state if the length of the message is too
        large for the provided buffer. */
        xOriginalTail = pxStreamBuffer->xTail;
    277c:	f6 01       	movw	r30, r12
    277e:	e0 80       	ld	r14, Z
    2780:	f1 80       	ldd	r15, Z+1	; 0x01
        ( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
    2782:	98 01       	movw	r18, r16
    2784:	a5 01       	movw	r20, r10
    2786:	be 01       	movw	r22, r28
    2788:	6f 5f       	subi	r22, 0xFF	; 255
    278a:	7f 4f       	sbci	r23, 0xFF	; 255
    278c:	c6 01       	movw	r24, r12
    278e:	7f de       	rcall	.-770    	; 0x248e <prvReadBytesFromBuffer>
        xNextMessageLength = ( size_t ) xTempNextMessageLength;
    2790:	89 81       	ldd	r24, Y+1	; 0x01
    2792:	9a 81       	ldd	r25, Y+2	; 0x02

        /* Reduce the number of bytes available by the number of bytes just
        read out. */
        xBytesAvailable -= xBytesToStoreMessageLength;
    2794:	0a 19       	sub	r16, r10
    2796:	1b 09       	sbc	r17, r11

        /* Check there is enough space in the buffer provided by the
        user. */
        if( xNextMessageLength > xBufferLengthBytes )
    2798:	88 16       	cp	r8, r24
    279a:	99 06       	cpc	r9, r25
    279c:	30 f4       	brcc	.+12     	; 0x27aa <xStreamBufferReceive+0xd2>
        {
            /* The user has provided insufficient space to read the message
            so return the buffer to its previous state (so the length of
            the message is in the buffer again). */
            pxStreamBuffer->xTail = xOriginalTail;
    279e:	f6 01       	movw	r30, r12
    27a0:	f1 82       	std	Z+1, r15	; 0x01
    27a2:	e0 82       	st	Z, r14
            xNextMessageLength = 0;
    27a4:	81 2c       	mov	r8, r1
    27a6:	91 2c       	mov	r9, r1
        of the message.  A copy of the tail is stored so the buffer can be
        returned to its prior state if the length of the message is too
        large for the provided buffer. */
        xOriginalTail = pxStreamBuffer->xTail;
        ( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
        xNextMessageLength = ( size_t ) xTempNextMessageLength;
    27a8:	01 c0       	rjmp	.+2      	; 0x27ac <xStreamBufferReceive+0xd4>
        message), so read as many bytes as possible. */
        xNextMessageLength = xBufferLengthBytes;
    }

    /* Read the actual data. */
    xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
    27aa:	4c 01       	movw	r8, r24
    27ac:	98 01       	movw	r18, r16
    27ae:	a4 01       	movw	r20, r8
    27b0:	b3 01       	movw	r22, r6
    27b2:	c6 01       	movw	r24, r12
    27b4:	6c de       	rcall	.-808    	; 0x248e <prvReadBytesFromBuffer>
    if( xBytesAvailable > xBytesToStoreMessageLength )
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    27b6:	7c 01       	movw	r14, r24
    27b8:	89 2b       	or	r24, r25
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            sbRECEIVE_COMPLETED( pxStreamBuffer );
    27ba:	b1 f0       	breq	.+44     	; 0x27e8 <xStreamBufferReceive+0x110>
    27bc:	94 d1       	rcall	.+808    	; 0x2ae6 <vTaskSuspendAll>
    27be:	f6 01       	movw	r30, r12
    27c0:	82 85       	ldd	r24, Z+10	; 0x0a
    27c2:	93 85       	ldd	r25, Z+11	; 0x0b
    27c4:	89 2b       	or	r24, r25
    27c6:	61 f0       	breq	.+24     	; 0x27e0 <xStreamBufferReceive+0x108>
    27c8:	82 85       	ldd	r24, Z+10	; 0x0a
    27ca:	93 85       	ldd	r25, Z+11	; 0x0b
    27cc:	00 e0       	ldi	r16, 0x00	; 0
    27ce:	10 e0       	ldi	r17, 0x00	; 0
    27d0:	20 e0       	ldi	r18, 0x00	; 0
    27d2:	40 e0       	ldi	r20, 0x00	; 0
    27d4:	50 e0       	ldi	r21, 0x00	; 0
    27d6:	ba 01       	movw	r22, r20
    27d8:	23 d4       	rcall	.+2118   	; 0x3020 <xTaskGenericNotify>
    27da:	f6 01       	movw	r30, r12
    27dc:	13 86       	std	Z+11, r1	; 0x0b
    27de:	12 86       	std	Z+10, r1	; 0x0a
    27e0:	3f d2       	rcall	.+1150   	; 0x2c60 <xTaskResumeAll>
    27e2:	02 c0       	rjmp	.+4      	; 0x27e8 <xStreamBufferReceive+0x110>
                             void *pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    27e4:	e1 2c       	mov	r14, r1
    27e6:	f1 2c       	mov	r15, r1
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
}
    27e8:	c7 01       	movw	r24, r14
    27ea:	0f 90       	pop	r0
    27ec:	0f 90       	pop	r0
    27ee:	df 91       	pop	r29
    27f0:	cf 91       	pop	r28
    27f2:	1f 91       	pop	r17
    27f4:	0f 91       	pop	r16
    27f6:	ff 90       	pop	r15
    27f8:	ef 90       	pop	r14
    27fa:	df 90       	pop	r13
    27fc:	cf 90       	pop	r12
    27fe:	bf 90       	pop	r11
    2800:	af 90       	pop	r10
    2802:	9f 90       	pop	r9
    2804:	8f 90       	pop	r8
    2806:	7f 90       	pop	r7
    2808:	6f 90       	pop	r6
    280a:	08 95       	ret

0000280c <prvResetNextTaskUnblockTime>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
    280c:	e0 91 7b 09 	lds	r30, 0x097B	; 0x80097b <pxDelayedTaskList>
    2810:	f0 91 7c 09 	lds	r31, 0x097C	; 0x80097c <pxDelayedTaskList+0x1>
    2814:	80 81       	ld	r24, Z
    2816:	81 11       	cpse	r24, r1
    2818:	07 c0       	rjmp	.+14     	; 0x2828 <prvResetNextTaskUnblockTime+0x1c>
    281a:	8f ef       	ldi	r24, 0xFF	; 255
    281c:	9f ef       	ldi	r25, 0xFF	; 255
    281e:	90 93 54 09 	sts	0x0954, r25	; 0x800954 <xNextTaskUnblockTime+0x1>
    2822:	80 93 53 09 	sts	0x0953, r24	; 0x800953 <xNextTaskUnblockTime>
    2826:	08 95       	ret
    2828:	e0 91 7b 09 	lds	r30, 0x097B	; 0x80097b <pxDelayedTaskList>
    282c:	f0 91 7c 09 	lds	r31, 0x097C	; 0x80097c <pxDelayedTaskList+0x1>
    2830:	05 80       	ldd	r0, Z+5	; 0x05
    2832:	f6 81       	ldd	r31, Z+6	; 0x06
    2834:	e0 2d       	mov	r30, r0
    2836:	06 80       	ldd	r0, Z+6	; 0x06
    2838:	f7 81       	ldd	r31, Z+7	; 0x07
    283a:	e0 2d       	mov	r30, r0
    283c:	82 81       	ldd	r24, Z+2	; 0x02
    283e:	93 81       	ldd	r25, Z+3	; 0x03
    2840:	90 93 54 09 	sts	0x0954, r25	; 0x800954 <xNextTaskUnblockTime+0x1>
    2844:	80 93 53 09 	sts	0x0953, r24	; 0x800953 <xNextTaskUnblockTime>
    2848:	08 95       	ret

0000284a <prvAddCurrentTaskToDelayedList>:
    284a:	ff 92       	push	r15
    284c:	0f 93       	push	r16
    284e:	1f 93       	push	r17
    2850:	cf 93       	push	r28
    2852:	df 93       	push	r29
    2854:	ec 01       	movw	r28, r24
    2856:	f6 2e       	mov	r15, r22
    2858:	00 91 5b 09 	lds	r16, 0x095B	; 0x80095b <xTickCount>
    285c:	10 91 5c 09 	lds	r17, 0x095C	; 0x80095c <xTickCount+0x1>
    2860:	80 91 a1 09 	lds	r24, 0x09A1	; 0x8009a1 <pxCurrentTCB>
    2864:	90 91 a2 09 	lds	r25, 0x09A2	; 0x8009a2 <pxCurrentTCB+0x1>
    2868:	02 96       	adiw	r24, 0x02	; 2
    286a:	19 dc       	rcall	.-1998   	; 0x209e <uxListRemove>
    286c:	cf 3f       	cpi	r28, 0xFF	; 255
    286e:	8f ef       	ldi	r24, 0xFF	; 255
    2870:	d8 07       	cpc	r29, r24
    2872:	61 f4       	brne	.+24     	; 0x288c <prvAddCurrentTaskToDelayedList+0x42>
    2874:	ff 20       	and	r15, r15
    2876:	51 f0       	breq	.+20     	; 0x288c <prvAddCurrentTaskToDelayedList+0x42>
    2878:	60 91 a1 09 	lds	r22, 0x09A1	; 0x8009a1 <pxCurrentTCB>
    287c:	70 91 a2 09 	lds	r23, 0x09A2	; 0x8009a2 <pxCurrentTCB+0x1>
    2880:	6e 5f       	subi	r22, 0xFE	; 254
    2882:	7f 4f       	sbci	r23, 0xFF	; 255
    2884:	8e e5       	ldi	r24, 0x5E	; 94
    2886:	99 e0       	ldi	r25, 0x09	; 9
    2888:	b8 db       	rcall	.-2192   	; 0x1ffa <vListInsertEnd>
    288a:	2d c0       	rjmp	.+90     	; 0x28e6 <prvAddCurrentTaskToDelayedList+0x9c>
    288c:	c0 0f       	add	r28, r16
    288e:	d1 1f       	adc	r29, r17
    2890:	e0 91 a1 09 	lds	r30, 0x09A1	; 0x8009a1 <pxCurrentTCB>
    2894:	f0 91 a2 09 	lds	r31, 0x09A2	; 0x8009a2 <pxCurrentTCB+0x1>
    2898:	d3 83       	std	Z+3, r29	; 0x03
    289a:	c2 83       	std	Z+2, r28	; 0x02
    289c:	c0 17       	cp	r28, r16
    289e:	d1 07       	cpc	r29, r17
    28a0:	60 f4       	brcc	.+24     	; 0x28ba <prvAddCurrentTaskToDelayedList+0x70>
    28a2:	60 91 a1 09 	lds	r22, 0x09A1	; 0x8009a1 <pxCurrentTCB>
    28a6:	70 91 a2 09 	lds	r23, 0x09A2	; 0x8009a2 <pxCurrentTCB+0x1>
    28aa:	80 91 79 09 	lds	r24, 0x0979	; 0x800979 <pxOverflowDelayedTaskList>
    28ae:	90 91 7a 09 	lds	r25, 0x097A	; 0x80097a <pxOverflowDelayedTaskList+0x1>
    28b2:	6e 5f       	subi	r22, 0xFE	; 254
    28b4:	7f 4f       	sbci	r23, 0xFF	; 255
    28b6:	c2 db       	rcall	.-2172   	; 0x203c <vListInsert>
    28b8:	16 c0       	rjmp	.+44     	; 0x28e6 <prvAddCurrentTaskToDelayedList+0x9c>
    28ba:	60 91 a1 09 	lds	r22, 0x09A1	; 0x8009a1 <pxCurrentTCB>
    28be:	70 91 a2 09 	lds	r23, 0x09A2	; 0x8009a2 <pxCurrentTCB+0x1>
    28c2:	80 91 7b 09 	lds	r24, 0x097B	; 0x80097b <pxDelayedTaskList>
    28c6:	90 91 7c 09 	lds	r25, 0x097C	; 0x80097c <pxDelayedTaskList+0x1>
    28ca:	6e 5f       	subi	r22, 0xFE	; 254
    28cc:	7f 4f       	sbci	r23, 0xFF	; 255
    28ce:	b6 db       	rcall	.-2196   	; 0x203c <vListInsert>
    28d0:	80 91 53 09 	lds	r24, 0x0953	; 0x800953 <xNextTaskUnblockTime>
    28d4:	90 91 54 09 	lds	r25, 0x0954	; 0x800954 <xNextTaskUnblockTime+0x1>
    28d8:	c8 17       	cp	r28, r24
    28da:	d9 07       	cpc	r29, r25
    28dc:	20 f4       	brcc	.+8      	; 0x28e6 <prvAddCurrentTaskToDelayedList+0x9c>
    28de:	d0 93 54 09 	sts	0x0954, r29	; 0x800954 <xNextTaskUnblockTime+0x1>
    28e2:	c0 93 53 09 	sts	0x0953, r28	; 0x800953 <xNextTaskUnblockTime>
    28e6:	df 91       	pop	r29
    28e8:	cf 91       	pop	r28
    28ea:	1f 91       	pop	r17
    28ec:	0f 91       	pop	r16
    28ee:	ff 90       	pop	r15
    28f0:	08 95       	ret

000028f2 <xTaskCreateStatic>:
    28f2:	6f 92       	push	r6
    28f4:	7f 92       	push	r7
    28f6:	8f 92       	push	r8
    28f8:	9f 92       	push	r9
    28fa:	af 92       	push	r10
    28fc:	bf 92       	push	r11
    28fe:	cf 92       	push	r12
    2900:	df 92       	push	r13
    2902:	ef 92       	push	r14
    2904:	ff 92       	push	r15
    2906:	0f 93       	push	r16
    2908:	cf 93       	push	r28
    290a:	df 93       	push	r29
    290c:	c1 14       	cp	r12, r1
    290e:	d1 04       	cpc	r13, r1
    2910:	09 f4       	brne	.+2      	; 0x2914 <xTaskCreateStatic+0x22>
    2912:	d0 c0       	rjmp	.+416    	; 0x2ab4 <xTaskCreateStatic+0x1c2>
    2914:	e1 14       	cp	r14, r1
    2916:	f1 04       	cpc	r15, r1
    2918:	09 f4       	brne	.+2      	; 0x291c <xTaskCreateStatic+0x2a>
    291a:	cf c0       	rjmp	.+414    	; 0x2aba <xTaskCreateStatic+0x1c8>
    291c:	e6 01       	movw	r28, r12
    291e:	59 01       	movw	r10, r18
    2920:	3a 01       	movw	r6, r20
    2922:	4b 01       	movw	r8, r22
    2924:	6c 01       	movw	r12, r24
    2926:	f8 8e       	std	Y+24, r15	; 0x18
    2928:	ef 8a       	std	Y+23, r14	; 0x17
    292a:	65 ea       	ldi	r22, 0xA5	; 165
    292c:	70 e0       	ldi	r23, 0x00	; 0
    292e:	c7 01       	movw	r24, r14
    2930:	84 d4       	rcall	.+2312   	; 0x323a <memset>
    2932:	81 e0       	ldi	r24, 0x01	; 1
    2934:	68 1a       	sub	r6, r24
    2936:	71 08       	sbc	r7, r1
    2938:	ef 88       	ldd	r14, Y+23	; 0x17
    293a:	f8 8c       	ldd	r15, Y+24	; 0x18
    293c:	e6 0c       	add	r14, r6
    293e:	f7 1c       	adc	r15, r7
    2940:	d4 01       	movw	r26, r8
    2942:	8c 91       	ld	r24, X
    2944:	89 8f       	std	Y+25, r24	; 0x19
    2946:	8c 91       	ld	r24, X
    2948:	88 23       	and	r24, r24
    294a:	a1 f0       	breq	.+40     	; 0x2974 <xTaskCreateStatic+0x82>
    294c:	ae 01       	movw	r20, r28
    294e:	46 5e       	subi	r20, 0xE6	; 230
    2950:	5f 4f       	sbci	r21, 0xFF	; 255
    2952:	f4 01       	movw	r30, r8
    2954:	31 96       	adiw	r30, 0x01	; 1
    2956:	b8 e0       	ldi	r27, 0x08	; 8
    2958:	8b 0e       	add	r8, r27
    295a:	91 1c       	adc	r9, r1
    295c:	cf 01       	movw	r24, r30
    295e:	21 91       	ld	r18, Z+
    2960:	da 01       	movw	r26, r20
    2962:	2d 93       	st	X+, r18
    2964:	ad 01       	movw	r20, r26
    2966:	dc 01       	movw	r26, r24
    2968:	8c 91       	ld	r24, X
    296a:	88 23       	and	r24, r24
    296c:	19 f0       	breq	.+6      	; 0x2974 <xTaskCreateStatic+0x82>
    296e:	e8 15       	cp	r30, r8
    2970:	f9 05       	cpc	r31, r9
    2972:	a1 f7       	brne	.-24     	; 0x295c <xTaskCreateStatic+0x6a>
    2974:	18 a2       	std	Y+32, r1	; 0x20
    2976:	04 30       	cpi	r16, 0x04	; 4
    2978:	08 f0       	brcs	.+2      	; 0x297c <xTaskCreateStatic+0x8a>
    297a:	03 e0       	ldi	r16, 0x03	; 3
    297c:	0e 8b       	std	Y+22, r16	; 0x16
    297e:	09 a3       	std	Y+33, r16	; 0x21
    2980:	1a a2       	std	Y+34, r1	; 0x22
    2982:	4e 01       	movw	r8, r28
    2984:	b2 e0       	ldi	r27, 0x02	; 2
    2986:	8b 0e       	add	r8, r27
    2988:	91 1c       	adc	r9, r1
    298a:	c4 01       	movw	r24, r8
    298c:	32 db       	rcall	.-2460   	; 0x1ff2 <vListInitialiseItem>
    298e:	ce 01       	movw	r24, r28
    2990:	0c 96       	adiw	r24, 0x0c	; 12
    2992:	2f db       	rcall	.-2466   	; 0x1ff2 <vListInitialiseItem>
    2994:	d9 87       	std	Y+9, r29	; 0x09
    2996:	c8 87       	std	Y+8, r28	; 0x08
    2998:	84 e0       	ldi	r24, 0x04	; 4
    299a:	90 e0       	ldi	r25, 0x00	; 0
    299c:	80 1b       	sub	r24, r16
    299e:	91 09       	sbc	r25, r1
    29a0:	9d 87       	std	Y+13, r25	; 0x0d
    29a2:	8c 87       	std	Y+12, r24	; 0x0c
    29a4:	db 8b       	std	Y+19, r29	; 0x13
    29a6:	ca 8b       	std	Y+18, r28	; 0x12
    29a8:	1b a2       	std	Y+35, r1	; 0x23
    29aa:	1c a2       	std	Y+36, r1	; 0x24
    29ac:	1d a2       	std	Y+37, r1	; 0x25
    29ae:	1e a2       	std	Y+38, r1	; 0x26
    29b0:	1f a2       	std	Y+39, r1	; 0x27
    29b2:	a5 01       	movw	r20, r10
    29b4:	b6 01       	movw	r22, r12
    29b6:	c7 01       	movw	r24, r14
    29b8:	99 db       	rcall	.-2254   	; 0x20ec <pxPortInitialiseStack>
    29ba:	99 83       	std	Y+1, r25	; 0x01
    29bc:	88 83       	st	Y, r24
    29be:	0f b6       	in	r0, 0x3f	; 63
    29c0:	f8 94       	cli
    29c2:	0f 92       	push	r0
    29c4:	80 91 5d 09 	lds	r24, 0x095D	; 0x80095d <uxCurrentNumberOfTasks>
    29c8:	8f 5f       	subi	r24, 0xFF	; 255
    29ca:	80 93 5d 09 	sts	0x095D, r24	; 0x80095d <uxCurrentNumberOfTasks>
    29ce:	80 91 a1 09 	lds	r24, 0x09A1	; 0x8009a1 <pxCurrentTCB>
    29d2:	90 91 a2 09 	lds	r25, 0x09A2	; 0x8009a2 <pxCurrentTCB+0x1>
    29d6:	89 2b       	or	r24, r25
    29d8:	89 f5       	brne	.+98     	; 0x2a3c <xTaskCreateStatic+0x14a>
    29da:	d0 93 a2 09 	sts	0x09A2, r29	; 0x8009a2 <pxCurrentTCB+0x1>
    29de:	c0 93 a1 09 	sts	0x09A1, r28	; 0x8009a1 <pxCurrentTCB>
    29e2:	80 91 5d 09 	lds	r24, 0x095D	; 0x80095d <uxCurrentNumberOfTasks>
    29e6:	81 30       	cpi	r24, 0x01	; 1
    29e8:	09 f0       	breq	.+2      	; 0x29ec <xTaskCreateStatic+0xfa>
    29ea:	38 c0       	rjmp	.+112    	; 0x2a5c <xTaskCreateStatic+0x16a>
    29ec:	8d e7       	ldi	r24, 0x7D	; 125
    29ee:	99 e0       	ldi	r25, 0x09	; 9
    29f0:	f2 da       	rcall	.-2588   	; 0x1fd6 <vListInitialise>
    29f2:	86 e8       	ldi	r24, 0x86	; 134
    29f4:	99 e0       	ldi	r25, 0x09	; 9
    29f6:	ef da       	rcall	.-2594   	; 0x1fd6 <vListInitialise>
    29f8:	8f e8       	ldi	r24, 0x8F	; 143
    29fa:	99 e0       	ldi	r25, 0x09	; 9
    29fc:	ec da       	rcall	.-2600   	; 0x1fd6 <vListInitialise>
    29fe:	88 e9       	ldi	r24, 0x98	; 152
    2a00:	99 e0       	ldi	r25, 0x09	; 9
    2a02:	e9 da       	rcall	.-2606   	; 0x1fd6 <vListInitialise>
    2a04:	89 e4       	ldi	r24, 0x49	; 73
    2a06:	99 e0       	ldi	r25, 0x09	; 9
    2a08:	e6 da       	rcall	.-2612   	; 0x1fd6 <vListInitialise>
    2a0a:	80 e4       	ldi	r24, 0x40	; 64
    2a0c:	99 e0       	ldi	r25, 0x09	; 9
    2a0e:	e3 da       	rcall	.-2618   	; 0x1fd6 <vListInitialise>
    2a10:	80 e7       	ldi	r24, 0x70	; 112
    2a12:	99 e0       	ldi	r25, 0x09	; 9
    2a14:	e0 da       	rcall	.-2624   	; 0x1fd6 <vListInitialise>
    2a16:	87 e6       	ldi	r24, 0x67	; 103
    2a18:	99 e0       	ldi	r25, 0x09	; 9
    2a1a:	dd da       	rcall	.-2630   	; 0x1fd6 <vListInitialise>
    2a1c:	8e e5       	ldi	r24, 0x5E	; 94
    2a1e:	99 e0       	ldi	r25, 0x09	; 9
    2a20:	da da       	rcall	.-2636   	; 0x1fd6 <vListInitialise>
    2a22:	89 e4       	ldi	r24, 0x49	; 73
    2a24:	99 e0       	ldi	r25, 0x09	; 9
    2a26:	90 93 7c 09 	sts	0x097C, r25	; 0x80097c <pxDelayedTaskList+0x1>
    2a2a:	80 93 7b 09 	sts	0x097B, r24	; 0x80097b <pxDelayedTaskList>
    2a2e:	80 e4       	ldi	r24, 0x40	; 64
    2a30:	99 e0       	ldi	r25, 0x09	; 9
    2a32:	90 93 7a 09 	sts	0x097A, r25	; 0x80097a <pxOverflowDelayedTaskList+0x1>
    2a36:	80 93 79 09 	sts	0x0979, r24	; 0x800979 <pxOverflowDelayedTaskList>
    2a3a:	10 c0       	rjmp	.+32     	; 0x2a5c <xTaskCreateStatic+0x16a>
    2a3c:	80 91 59 09 	lds	r24, 0x0959	; 0x800959 <xSchedulerRunning>
    2a40:	81 11       	cpse	r24, r1
    2a42:	0c c0       	rjmp	.+24     	; 0x2a5c <xTaskCreateStatic+0x16a>
    2a44:	e0 91 a1 09 	lds	r30, 0x09A1	; 0x8009a1 <pxCurrentTCB>
    2a48:	f0 91 a2 09 	lds	r31, 0x09A2	; 0x8009a2 <pxCurrentTCB+0x1>
    2a4c:	96 89       	ldd	r25, Z+22	; 0x16
    2a4e:	8e 89       	ldd	r24, Y+22	; 0x16
    2a50:	89 17       	cp	r24, r25
    2a52:	20 f0       	brcs	.+8      	; 0x2a5c <xTaskCreateStatic+0x16a>
    2a54:	d0 93 a2 09 	sts	0x09A2, r29	; 0x8009a2 <pxCurrentTCB+0x1>
    2a58:	c0 93 a1 09 	sts	0x09A1, r28	; 0x8009a1 <pxCurrentTCB>
    2a5c:	80 91 55 09 	lds	r24, 0x0955	; 0x800955 <uxTaskNumber>
    2a60:	8f 5f       	subi	r24, 0xFF	; 255
    2a62:	80 93 55 09 	sts	0x0955, r24	; 0x800955 <uxTaskNumber>
    2a66:	8e 89       	ldd	r24, Y+22	; 0x16
    2a68:	90 91 5a 09 	lds	r25, 0x095A	; 0x80095a <uxTopReadyPriority>
    2a6c:	98 17       	cp	r25, r24
    2a6e:	10 f4       	brcc	.+4      	; 0x2a74 <xTaskCreateStatic+0x182>
    2a70:	80 93 5a 09 	sts	0x095A, r24	; 0x80095a <uxTopReadyPriority>
    2a74:	90 e0       	ldi	r25, 0x00	; 0
    2a76:	9c 01       	movw	r18, r24
    2a78:	22 0f       	add	r18, r18
    2a7a:	33 1f       	adc	r19, r19
    2a7c:	22 0f       	add	r18, r18
    2a7e:	33 1f       	adc	r19, r19
    2a80:	22 0f       	add	r18, r18
    2a82:	33 1f       	adc	r19, r19
    2a84:	82 0f       	add	r24, r18
    2a86:	93 1f       	adc	r25, r19
    2a88:	b4 01       	movw	r22, r8
    2a8a:	83 58       	subi	r24, 0x83	; 131
    2a8c:	96 4f       	sbci	r25, 0xF6	; 246
    2a8e:	b5 da       	rcall	.-2710   	; 0x1ffa <vListInsertEnd>
    2a90:	0f 90       	pop	r0
    2a92:	0f be       	out	0x3f, r0	; 63
    2a94:	80 91 59 09 	lds	r24, 0x0959	; 0x800959 <xSchedulerRunning>
    2a98:	88 23       	and	r24, r24
    2a9a:	91 f0       	breq	.+36     	; 0x2ac0 <xTaskCreateStatic+0x1ce>
    2a9c:	e0 91 a1 09 	lds	r30, 0x09A1	; 0x8009a1 <pxCurrentTCB>
    2aa0:	f0 91 a2 09 	lds	r31, 0x09A2	; 0x8009a2 <pxCurrentTCB+0x1>
    2aa4:	96 89       	ldd	r25, Z+22	; 0x16
    2aa6:	8e 89       	ldd	r24, Y+22	; 0x16
    2aa8:	98 17       	cp	r25, r24
    2aaa:	68 f4       	brcc	.+26     	; 0x2ac6 <xTaskCreateStatic+0x1d4>
    2aac:	91 db       	rcall	.-2270   	; 0x21d0 <vPortYield>
    2aae:	8c 2f       	mov	r24, r28
    2ab0:	9d 2f       	mov	r25, r29
    2ab2:	0b c0       	rjmp	.+22     	; 0x2aca <xTaskCreateStatic+0x1d8>
    2ab4:	80 e0       	ldi	r24, 0x00	; 0
    2ab6:	90 e0       	ldi	r25, 0x00	; 0
    2ab8:	08 c0       	rjmp	.+16     	; 0x2aca <xTaskCreateStatic+0x1d8>
    2aba:	80 e0       	ldi	r24, 0x00	; 0
    2abc:	90 e0       	ldi	r25, 0x00	; 0
    2abe:	05 c0       	rjmp	.+10     	; 0x2aca <xTaskCreateStatic+0x1d8>
    2ac0:	8c 2f       	mov	r24, r28
    2ac2:	9d 2f       	mov	r25, r29
    2ac4:	02 c0       	rjmp	.+4      	; 0x2aca <xTaskCreateStatic+0x1d8>
    2ac6:	8c 2f       	mov	r24, r28
    2ac8:	9d 2f       	mov	r25, r29
    2aca:	df 91       	pop	r29
    2acc:	cf 91       	pop	r28
    2ace:	0f 91       	pop	r16
    2ad0:	ff 90       	pop	r15
    2ad2:	ef 90       	pop	r14
    2ad4:	df 90       	pop	r13
    2ad6:	cf 90       	pop	r12
    2ad8:	bf 90       	pop	r11
    2ada:	af 90       	pop	r10
    2adc:	9f 90       	pop	r9
    2ade:	8f 90       	pop	r8
    2ae0:	7f 90       	pop	r7
    2ae2:	6f 90       	pop	r6
    2ae4:	08 95       	ret

00002ae6 <vTaskSuspendAll>:
    2ae6:	80 91 52 09 	lds	r24, 0x0952	; 0x800952 <uxSchedulerSuspended>
    2aea:	8f 5f       	subi	r24, 0xFF	; 255
    2aec:	80 93 52 09 	sts	0x0952, r24	; 0x800952 <uxSchedulerSuspended>
    2af0:	08 95       	ret

00002af2 <xTaskIncrementTick>:
    2af2:	cf 92       	push	r12
    2af4:	df 92       	push	r13
    2af6:	ef 92       	push	r14
    2af8:	ff 92       	push	r15
    2afa:	0f 93       	push	r16
    2afc:	1f 93       	push	r17
    2afe:	cf 93       	push	r28
    2b00:	df 93       	push	r29
    2b02:	80 91 52 09 	lds	r24, 0x0952	; 0x800952 <uxSchedulerSuspended>
    2b06:	81 11       	cpse	r24, r1
    2b08:	95 c0       	rjmp	.+298    	; 0x2c34 <xTaskIncrementTick+0x142>
    2b0a:	e0 90 5b 09 	lds	r14, 0x095B	; 0x80095b <xTickCount>
    2b0e:	f0 90 5c 09 	lds	r15, 0x095C	; 0x80095c <xTickCount+0x1>
    2b12:	8f ef       	ldi	r24, 0xFF	; 255
    2b14:	e8 1a       	sub	r14, r24
    2b16:	f8 0a       	sbc	r15, r24
    2b18:	f0 92 5c 09 	sts	0x095C, r15	; 0x80095c <xTickCount+0x1>
    2b1c:	e0 92 5b 09 	sts	0x095B, r14	; 0x80095b <xTickCount>
    2b20:	e1 14       	cp	r14, r1
    2b22:	f1 04       	cpc	r15, r1
    2b24:	b1 f4       	brne	.+44     	; 0x2b52 <xTaskIncrementTick+0x60>
    2b26:	80 91 7b 09 	lds	r24, 0x097B	; 0x80097b <pxDelayedTaskList>
    2b2a:	90 91 7c 09 	lds	r25, 0x097C	; 0x80097c <pxDelayedTaskList+0x1>
    2b2e:	20 91 79 09 	lds	r18, 0x0979	; 0x800979 <pxOverflowDelayedTaskList>
    2b32:	30 91 7a 09 	lds	r19, 0x097A	; 0x80097a <pxOverflowDelayedTaskList+0x1>
    2b36:	30 93 7c 09 	sts	0x097C, r19	; 0x80097c <pxDelayedTaskList+0x1>
    2b3a:	20 93 7b 09 	sts	0x097B, r18	; 0x80097b <pxDelayedTaskList>
    2b3e:	90 93 7a 09 	sts	0x097A, r25	; 0x80097a <pxOverflowDelayedTaskList+0x1>
    2b42:	80 93 79 09 	sts	0x0979, r24	; 0x800979 <pxOverflowDelayedTaskList>
    2b46:	80 91 56 09 	lds	r24, 0x0956	; 0x800956 <xNumOfOverflows>
    2b4a:	8f 5f       	subi	r24, 0xFF	; 255
    2b4c:	80 93 56 09 	sts	0x0956, r24	; 0x800956 <xNumOfOverflows>
    2b50:	5d de       	rcall	.-838    	; 0x280c <prvResetNextTaskUnblockTime>
    2b52:	80 91 53 09 	lds	r24, 0x0953	; 0x800953 <xNextTaskUnblockTime>
    2b56:	90 91 54 09 	lds	r25, 0x0954	; 0x800954 <xNextTaskUnblockTime+0x1>
    2b5a:	e8 16       	cp	r14, r24
    2b5c:	f9 06       	cpc	r15, r25
    2b5e:	10 f4       	brcc	.+4      	; 0x2b64 <xTaskIncrementTick+0x72>
    2b60:	d1 2c       	mov	r13, r1
    2b62:	50 c0       	rjmp	.+160    	; 0x2c04 <xTaskIncrementTick+0x112>
    2b64:	d1 2c       	mov	r13, r1
    2b66:	cc 24       	eor	r12, r12
    2b68:	c3 94       	inc	r12
    2b6a:	e0 91 7b 09 	lds	r30, 0x097B	; 0x80097b <pxDelayedTaskList>
    2b6e:	f0 91 7c 09 	lds	r31, 0x097C	; 0x80097c <pxDelayedTaskList+0x1>
    2b72:	80 81       	ld	r24, Z
    2b74:	81 11       	cpse	r24, r1
    2b76:	07 c0       	rjmp	.+14     	; 0x2b86 <xTaskIncrementTick+0x94>
    2b78:	8f ef       	ldi	r24, 0xFF	; 255
    2b7a:	9f ef       	ldi	r25, 0xFF	; 255
    2b7c:	90 93 54 09 	sts	0x0954, r25	; 0x800954 <xNextTaskUnblockTime+0x1>
    2b80:	80 93 53 09 	sts	0x0953, r24	; 0x800953 <xNextTaskUnblockTime>
    2b84:	3f c0       	rjmp	.+126    	; 0x2c04 <xTaskIncrementTick+0x112>
    2b86:	e0 91 7b 09 	lds	r30, 0x097B	; 0x80097b <pxDelayedTaskList>
    2b8a:	f0 91 7c 09 	lds	r31, 0x097C	; 0x80097c <pxDelayedTaskList+0x1>
    2b8e:	05 80       	ldd	r0, Z+5	; 0x05
    2b90:	f6 81       	ldd	r31, Z+6	; 0x06
    2b92:	e0 2d       	mov	r30, r0
    2b94:	c6 81       	ldd	r28, Z+6	; 0x06
    2b96:	d7 81       	ldd	r29, Z+7	; 0x07
    2b98:	8a 81       	ldd	r24, Y+2	; 0x02
    2b9a:	9b 81       	ldd	r25, Y+3	; 0x03
    2b9c:	e8 16       	cp	r14, r24
    2b9e:	f9 06       	cpc	r15, r25
    2ba0:	28 f4       	brcc	.+10     	; 0x2bac <xTaskIncrementTick+0xba>
    2ba2:	90 93 54 09 	sts	0x0954, r25	; 0x800954 <xNextTaskUnblockTime+0x1>
    2ba6:	80 93 53 09 	sts	0x0953, r24	; 0x800953 <xNextTaskUnblockTime>
    2baa:	2c c0       	rjmp	.+88     	; 0x2c04 <xTaskIncrementTick+0x112>
    2bac:	8e 01       	movw	r16, r28
    2bae:	0e 5f       	subi	r16, 0xFE	; 254
    2bb0:	1f 4f       	sbci	r17, 0xFF	; 255
    2bb2:	c8 01       	movw	r24, r16
    2bb4:	74 da       	rcall	.-2840   	; 0x209e <uxListRemove>
    2bb6:	8c 89       	ldd	r24, Y+20	; 0x14
    2bb8:	9d 89       	ldd	r25, Y+21	; 0x15
    2bba:	89 2b       	or	r24, r25
    2bbc:	19 f0       	breq	.+6      	; 0x2bc4 <xTaskIncrementTick+0xd2>
    2bbe:	ce 01       	movw	r24, r28
    2bc0:	0c 96       	adiw	r24, 0x0c	; 12
    2bc2:	6d da       	rcall	.-2854   	; 0x209e <uxListRemove>
    2bc4:	8e 89       	ldd	r24, Y+22	; 0x16
    2bc6:	90 91 5a 09 	lds	r25, 0x095A	; 0x80095a <uxTopReadyPriority>
    2bca:	98 17       	cp	r25, r24
    2bcc:	10 f4       	brcc	.+4      	; 0x2bd2 <xTaskIncrementTick+0xe0>
    2bce:	80 93 5a 09 	sts	0x095A, r24	; 0x80095a <uxTopReadyPriority>
    2bd2:	90 e0       	ldi	r25, 0x00	; 0
    2bd4:	9c 01       	movw	r18, r24
    2bd6:	22 0f       	add	r18, r18
    2bd8:	33 1f       	adc	r19, r19
    2bda:	22 0f       	add	r18, r18
    2bdc:	33 1f       	adc	r19, r19
    2bde:	22 0f       	add	r18, r18
    2be0:	33 1f       	adc	r19, r19
    2be2:	82 0f       	add	r24, r18
    2be4:	93 1f       	adc	r25, r19
    2be6:	b8 01       	movw	r22, r16
    2be8:	83 58       	subi	r24, 0x83	; 131
    2bea:	96 4f       	sbci	r25, 0xF6	; 246
    2bec:	06 da       	rcall	.-3060   	; 0x1ffa <vListInsertEnd>
    2bee:	e0 91 a1 09 	lds	r30, 0x09A1	; 0x8009a1 <pxCurrentTCB>
    2bf2:	f0 91 a2 09 	lds	r31, 0x09A2	; 0x8009a2 <pxCurrentTCB+0x1>
    2bf6:	9e 89       	ldd	r25, Y+22	; 0x16
    2bf8:	86 89       	ldd	r24, Z+22	; 0x16
    2bfa:	98 17       	cp	r25, r24
    2bfc:	08 f4       	brcc	.+2      	; 0x2c00 <xTaskIncrementTick+0x10e>
    2bfe:	b5 cf       	rjmp	.-150    	; 0x2b6a <xTaskIncrementTick+0x78>
    2c00:	dc 2c       	mov	r13, r12
    2c02:	b3 cf       	rjmp	.-154    	; 0x2b6a <xTaskIncrementTick+0x78>
    2c04:	e0 91 a1 09 	lds	r30, 0x09A1	; 0x8009a1 <pxCurrentTCB>
    2c08:	f0 91 a2 09 	lds	r31, 0x09A2	; 0x8009a2 <pxCurrentTCB+0x1>
    2c0c:	86 89       	ldd	r24, Z+22	; 0x16
    2c0e:	90 e0       	ldi	r25, 0x00	; 0
    2c10:	fc 01       	movw	r30, r24
    2c12:	ee 0f       	add	r30, r30
    2c14:	ff 1f       	adc	r31, r31
    2c16:	ee 0f       	add	r30, r30
    2c18:	ff 1f       	adc	r31, r31
    2c1a:	ee 0f       	add	r30, r30
    2c1c:	ff 1f       	adc	r31, r31
    2c1e:	8e 0f       	add	r24, r30
    2c20:	9f 1f       	adc	r25, r31
    2c22:	fc 01       	movw	r30, r24
    2c24:	e3 58       	subi	r30, 0x83	; 131
    2c26:	f6 4f       	sbci	r31, 0xF6	; 246
    2c28:	80 81       	ld	r24, Z
    2c2a:	82 30       	cpi	r24, 0x02	; 2
    2c2c:	48 f0       	brcs	.+18     	; 0x2c40 <xTaskIncrementTick+0x14e>
    2c2e:	dd 24       	eor	r13, r13
    2c30:	d3 94       	inc	r13
    2c32:	06 c0       	rjmp	.+12     	; 0x2c40 <xTaskIncrementTick+0x14e>
    2c34:	80 91 58 09 	lds	r24, 0x0958	; 0x800958 <uxPendedTicks>
    2c38:	8f 5f       	subi	r24, 0xFF	; 255
    2c3a:	80 93 58 09 	sts	0x0958, r24	; 0x800958 <uxPendedTicks>
    2c3e:	d1 2c       	mov	r13, r1
    2c40:	80 91 57 09 	lds	r24, 0x0957	; 0x800957 <xYieldPending>
    2c44:	88 23       	and	r24, r24
    2c46:	11 f0       	breq	.+4      	; 0x2c4c <xTaskIncrementTick+0x15a>
    2c48:	dd 24       	eor	r13, r13
    2c4a:	d3 94       	inc	r13
    2c4c:	8d 2d       	mov	r24, r13
    2c4e:	df 91       	pop	r29
    2c50:	cf 91       	pop	r28
    2c52:	1f 91       	pop	r17
    2c54:	0f 91       	pop	r16
    2c56:	ff 90       	pop	r15
    2c58:	ef 90       	pop	r14
    2c5a:	df 90       	pop	r13
    2c5c:	cf 90       	pop	r12
    2c5e:	08 95       	ret

00002c60 <xTaskResumeAll>:
    2c60:	df 92       	push	r13
    2c62:	ef 92       	push	r14
    2c64:	ff 92       	push	r15
    2c66:	0f 93       	push	r16
    2c68:	1f 93       	push	r17
    2c6a:	cf 93       	push	r28
    2c6c:	df 93       	push	r29
    2c6e:	0f b6       	in	r0, 0x3f	; 63
    2c70:	f8 94       	cli
    2c72:	0f 92       	push	r0
    2c74:	80 91 52 09 	lds	r24, 0x0952	; 0x800952 <uxSchedulerSuspended>
    2c78:	81 50       	subi	r24, 0x01	; 1
    2c7a:	80 93 52 09 	sts	0x0952, r24	; 0x800952 <uxSchedulerSuspended>
    2c7e:	80 91 52 09 	lds	r24, 0x0952	; 0x800952 <uxSchedulerSuspended>
    2c82:	81 11       	cpse	r24, r1
    2c84:	59 c0       	rjmp	.+178    	; 0x2d38 <xTaskResumeAll+0xd8>
    2c86:	80 91 5d 09 	lds	r24, 0x095D	; 0x80095d <uxCurrentNumberOfTasks>
    2c8a:	81 11       	cpse	r24, r1
    2c8c:	30 c0       	rjmp	.+96     	; 0x2cee <xTaskResumeAll+0x8e>
    2c8e:	57 c0       	rjmp	.+174    	; 0x2d3e <xTaskResumeAll+0xde>
    2c90:	d7 01       	movw	r26, r14
    2c92:	15 96       	adiw	r26, 0x05	; 5
    2c94:	ed 91       	ld	r30, X+
    2c96:	fc 91       	ld	r31, X
    2c98:	16 97       	sbiw	r26, 0x06	; 6
    2c9a:	c6 81       	ldd	r28, Z+6	; 0x06
    2c9c:	d7 81       	ldd	r29, Z+7	; 0x07
    2c9e:	ce 01       	movw	r24, r28
    2ca0:	0c 96       	adiw	r24, 0x0c	; 12
    2ca2:	fd d9       	rcall	.-3078   	; 0x209e <uxListRemove>
    2ca4:	8e 01       	movw	r16, r28
    2ca6:	0e 5f       	subi	r16, 0xFE	; 254
    2ca8:	1f 4f       	sbci	r17, 0xFF	; 255
    2caa:	c8 01       	movw	r24, r16
    2cac:	f8 d9       	rcall	.-3088   	; 0x209e <uxListRemove>
    2cae:	8e 89       	ldd	r24, Y+22	; 0x16
    2cb0:	90 91 5a 09 	lds	r25, 0x095A	; 0x80095a <uxTopReadyPriority>
    2cb4:	98 17       	cp	r25, r24
    2cb6:	10 f4       	brcc	.+4      	; 0x2cbc <xTaskResumeAll+0x5c>
    2cb8:	80 93 5a 09 	sts	0x095A, r24	; 0x80095a <uxTopReadyPriority>
    2cbc:	90 e0       	ldi	r25, 0x00	; 0
    2cbe:	9c 01       	movw	r18, r24
    2cc0:	22 0f       	add	r18, r18
    2cc2:	33 1f       	adc	r19, r19
    2cc4:	22 0f       	add	r18, r18
    2cc6:	33 1f       	adc	r19, r19
    2cc8:	22 0f       	add	r18, r18
    2cca:	33 1f       	adc	r19, r19
    2ccc:	82 0f       	add	r24, r18
    2cce:	93 1f       	adc	r25, r19
    2cd0:	b8 01       	movw	r22, r16
    2cd2:	83 58       	subi	r24, 0x83	; 131
    2cd4:	96 4f       	sbci	r25, 0xF6	; 246
    2cd6:	91 d9       	rcall	.-3294   	; 0x1ffa <vListInsertEnd>
    2cd8:	e0 91 a1 09 	lds	r30, 0x09A1	; 0x8009a1 <pxCurrentTCB>
    2cdc:	f0 91 a2 09 	lds	r31, 0x09A2	; 0x8009a2 <pxCurrentTCB+0x1>
    2ce0:	9e 89       	ldd	r25, Y+22	; 0x16
    2ce2:	86 89       	ldd	r24, Z+22	; 0x16
    2ce4:	98 17       	cp	r25, r24
    2ce6:	68 f0       	brcs	.+26     	; 0x2d02 <xTaskResumeAll+0xa2>
    2ce8:	d0 92 57 09 	sts	0x0957, r13	; 0x800957 <xYieldPending>
    2cec:	0a c0       	rjmp	.+20     	; 0x2d02 <xTaskResumeAll+0xa2>
    2cee:	c0 e0       	ldi	r28, 0x00	; 0
    2cf0:	d0 e0       	ldi	r29, 0x00	; 0
    2cf2:	0f 2e       	mov	r0, r31
    2cf4:	f0 e7       	ldi	r31, 0x70	; 112
    2cf6:	ef 2e       	mov	r14, r31
    2cf8:	f9 e0       	ldi	r31, 0x09	; 9
    2cfa:	ff 2e       	mov	r15, r31
    2cfc:	f0 2d       	mov	r31, r0
    2cfe:	dd 24       	eor	r13, r13
    2d00:	d3 94       	inc	r13
    2d02:	f7 01       	movw	r30, r14
    2d04:	80 81       	ld	r24, Z
    2d06:	81 11       	cpse	r24, r1
    2d08:	c3 cf       	rjmp	.-122    	; 0x2c90 <xTaskResumeAll+0x30>
    2d0a:	cd 2b       	or	r28, r29
    2d0c:	09 f0       	breq	.+2      	; 0x2d10 <xTaskResumeAll+0xb0>
    2d0e:	7e dd       	rcall	.-1284   	; 0x280c <prvResetNextTaskUnblockTime>
    2d10:	c0 91 58 09 	lds	r28, 0x0958	; 0x800958 <uxPendedTicks>
    2d14:	cc 23       	and	r28, r28
    2d16:	49 f0       	breq	.+18     	; 0x2d2a <xTaskResumeAll+0xca>
    2d18:	d1 e0       	ldi	r29, 0x01	; 1
    2d1a:	eb de       	rcall	.-554    	; 0x2af2 <xTaskIncrementTick>
    2d1c:	81 11       	cpse	r24, r1
    2d1e:	d0 93 57 09 	sts	0x0957, r29	; 0x800957 <xYieldPending>
    2d22:	c1 50       	subi	r28, 0x01	; 1
    2d24:	d1 f7       	brne	.-12     	; 0x2d1a <xTaskResumeAll+0xba>
    2d26:	10 92 58 09 	sts	0x0958, r1	; 0x800958 <uxPendedTicks>
    2d2a:	80 91 57 09 	lds	r24, 0x0957	; 0x800957 <xYieldPending>
    2d2e:	88 23       	and	r24, r24
    2d30:	29 f0       	breq	.+10     	; 0x2d3c <xTaskResumeAll+0xdc>
    2d32:	4e da       	rcall	.-2916   	; 0x21d0 <vPortYield>
    2d34:	81 e0       	ldi	r24, 0x01	; 1
    2d36:	03 c0       	rjmp	.+6      	; 0x2d3e <xTaskResumeAll+0xde>
    2d38:	80 e0       	ldi	r24, 0x00	; 0
    2d3a:	01 c0       	rjmp	.+2      	; 0x2d3e <xTaskResumeAll+0xde>
    2d3c:	80 e0       	ldi	r24, 0x00	; 0
    2d3e:	0f 90       	pop	r0
    2d40:	0f be       	out	0x3f, r0	; 63
    2d42:	df 91       	pop	r29
    2d44:	cf 91       	pop	r28
    2d46:	1f 91       	pop	r17
    2d48:	0f 91       	pop	r16
    2d4a:	ff 90       	pop	r15
    2d4c:	ef 90       	pop	r14
    2d4e:	df 90       	pop	r13
    2d50:	08 95       	ret

00002d52 <vTaskDelay>:
    2d52:	cf 93       	push	r28
    2d54:	df 93       	push	r29
    2d56:	ec 01       	movw	r28, r24
    2d58:	89 2b       	or	r24, r25
    2d5a:	39 f0       	breq	.+14     	; 0x2d6a <vTaskDelay+0x18>
    2d5c:	c4 de       	rcall	.-632    	; 0x2ae6 <vTaskSuspendAll>
    2d5e:	60 e0       	ldi	r22, 0x00	; 0
    2d60:	ce 01       	movw	r24, r28
    2d62:	73 dd       	rcall	.-1306   	; 0x284a <prvAddCurrentTaskToDelayedList>
    2d64:	7d df       	rcall	.-262    	; 0x2c60 <xTaskResumeAll>
    2d66:	81 11       	cpse	r24, r1
    2d68:	01 c0       	rjmp	.+2      	; 0x2d6c <vTaskDelay+0x1a>
    2d6a:	32 da       	rcall	.-2972   	; 0x21d0 <vPortYield>
    2d6c:	df 91       	pop	r29
    2d6e:	cf 91       	pop	r28
    2d70:	08 95       	ret

00002d72 <vTaskSwitchContext>:
    2d72:	80 91 52 09 	lds	r24, 0x0952	; 0x800952 <uxSchedulerSuspended>
    2d76:	88 23       	and	r24, r24
    2d78:	21 f0       	breq	.+8      	; 0x2d82 <vTaskSwitchContext+0x10>
    2d7a:	81 e0       	ldi	r24, 0x01	; 1
    2d7c:	80 93 57 09 	sts	0x0957, r24	; 0x800957 <xYieldPending>
    2d80:	08 95       	ret
    2d82:	10 92 57 09 	sts	0x0957, r1	; 0x800957 <xYieldPending>
    2d86:	a0 91 a1 09 	lds	r26, 0x09A1	; 0x8009a1 <pxCurrentTCB>
    2d8a:	b0 91 a2 09 	lds	r27, 0x09A2	; 0x8009a2 <pxCurrentTCB+0x1>
    2d8e:	e0 91 a1 09 	lds	r30, 0x09A1	; 0x8009a1 <pxCurrentTCB>
    2d92:	f0 91 a2 09 	lds	r31, 0x09A2	; 0x8009a2 <pxCurrentTCB+0x1>
    2d96:	2d 91       	ld	r18, X+
    2d98:	3c 91       	ld	r19, X
    2d9a:	87 89       	ldd	r24, Z+23	; 0x17
    2d9c:	90 8d       	ldd	r25, Z+24	; 0x18
    2d9e:	82 17       	cp	r24, r18
    2da0:	93 07       	cpc	r25, r19
    2da2:	58 f0       	brcs	.+22     	; 0x2dba <vTaskSwitchContext+0x48>
    2da4:	60 91 a1 09 	lds	r22, 0x09A1	; 0x8009a1 <pxCurrentTCB>
    2da8:	70 91 a2 09 	lds	r23, 0x09A2	; 0x8009a2 <pxCurrentTCB+0x1>
    2dac:	80 91 a1 09 	lds	r24, 0x09A1	; 0x8009a1 <pxCurrentTCB>
    2db0:	90 91 a2 09 	lds	r25, 0x09A2	; 0x8009a2 <pxCurrentTCB+0x1>
    2db4:	67 5e       	subi	r22, 0xE7	; 231
    2db6:	7f 4f       	sbci	r23, 0xFF	; 255
    2db8:	01 d9       	rcall	.-3582   	; 0x1fbc <vApplicationStackOverflowHook>
    2dba:	20 91 5a 09 	lds	r18, 0x095A	; 0x80095a <uxTopReadyPriority>
    2dbe:	82 2f       	mov	r24, r18
    2dc0:	90 e0       	ldi	r25, 0x00	; 0
    2dc2:	fc 01       	movw	r30, r24
    2dc4:	ee 0f       	add	r30, r30
    2dc6:	ff 1f       	adc	r31, r31
    2dc8:	ee 0f       	add	r30, r30
    2dca:	ff 1f       	adc	r31, r31
    2dcc:	ee 0f       	add	r30, r30
    2dce:	ff 1f       	adc	r31, r31
    2dd0:	e8 0f       	add	r30, r24
    2dd2:	f9 1f       	adc	r31, r25
    2dd4:	e3 58       	subi	r30, 0x83	; 131
    2dd6:	f6 4f       	sbci	r31, 0xF6	; 246
    2dd8:	30 81       	ld	r19, Z
    2dda:	31 11       	cpse	r19, r1
    2ddc:	11 c0       	rjmp	.+34     	; 0x2e00 <vTaskSwitchContext+0x8e>
    2dde:	21 50       	subi	r18, 0x01	; 1
    2de0:	82 2f       	mov	r24, r18
    2de2:	90 e0       	ldi	r25, 0x00	; 0
    2de4:	fc 01       	movw	r30, r24
    2de6:	ee 0f       	add	r30, r30
    2de8:	ff 1f       	adc	r31, r31
    2dea:	ee 0f       	add	r30, r30
    2dec:	ff 1f       	adc	r31, r31
    2dee:	ee 0f       	add	r30, r30
    2df0:	ff 1f       	adc	r31, r31
    2df2:	e8 0f       	add	r30, r24
    2df4:	f9 1f       	adc	r31, r25
    2df6:	e3 58       	subi	r30, 0x83	; 131
    2df8:	f6 4f       	sbci	r31, 0xF6	; 246
    2dfa:	30 81       	ld	r19, Z
    2dfc:	33 23       	and	r19, r19
    2dfe:	79 f3       	breq	.-34     	; 0x2dde <vTaskSwitchContext+0x6c>
    2e00:	ac 01       	movw	r20, r24
    2e02:	44 0f       	add	r20, r20
    2e04:	55 1f       	adc	r21, r21
    2e06:	44 0f       	add	r20, r20
    2e08:	55 1f       	adc	r21, r21
    2e0a:	44 0f       	add	r20, r20
    2e0c:	55 1f       	adc	r21, r21
    2e0e:	48 0f       	add	r20, r24
    2e10:	59 1f       	adc	r21, r25
    2e12:	da 01       	movw	r26, r20
    2e14:	a3 58       	subi	r26, 0x83	; 131
    2e16:	b6 4f       	sbci	r27, 0xF6	; 246
    2e18:	11 96       	adiw	r26, 0x01	; 1
    2e1a:	ed 91       	ld	r30, X+
    2e1c:	fc 91       	ld	r31, X
    2e1e:	12 97       	sbiw	r26, 0x02	; 2
    2e20:	02 80       	ldd	r0, Z+2	; 0x02
    2e22:	f3 81       	ldd	r31, Z+3	; 0x03
    2e24:	e0 2d       	mov	r30, r0
    2e26:	12 96       	adiw	r26, 0x02	; 2
    2e28:	fc 93       	st	X, r31
    2e2a:	ee 93       	st	-X, r30
    2e2c:	11 97       	sbiw	r26, 0x01	; 1
    2e2e:	40 58       	subi	r20, 0x80	; 128
    2e30:	56 4f       	sbci	r21, 0xF6	; 246
    2e32:	e4 17       	cp	r30, r20
    2e34:	f5 07       	cpc	r31, r21
    2e36:	29 f4       	brne	.+10     	; 0x2e42 <vTaskSwitchContext+0xd0>
    2e38:	42 81       	ldd	r20, Z+2	; 0x02
    2e3a:	53 81       	ldd	r21, Z+3	; 0x03
    2e3c:	fd 01       	movw	r30, r26
    2e3e:	52 83       	std	Z+2, r21	; 0x02
    2e40:	41 83       	std	Z+1, r20	; 0x01
    2e42:	fc 01       	movw	r30, r24
    2e44:	ee 0f       	add	r30, r30
    2e46:	ff 1f       	adc	r31, r31
    2e48:	ee 0f       	add	r30, r30
    2e4a:	ff 1f       	adc	r31, r31
    2e4c:	ee 0f       	add	r30, r30
    2e4e:	ff 1f       	adc	r31, r31
    2e50:	8e 0f       	add	r24, r30
    2e52:	9f 1f       	adc	r25, r31
    2e54:	fc 01       	movw	r30, r24
    2e56:	e3 58       	subi	r30, 0x83	; 131
    2e58:	f6 4f       	sbci	r31, 0xF6	; 246
    2e5a:	01 80       	ldd	r0, Z+1	; 0x01
    2e5c:	f2 81       	ldd	r31, Z+2	; 0x02
    2e5e:	e0 2d       	mov	r30, r0
    2e60:	86 81       	ldd	r24, Z+6	; 0x06
    2e62:	97 81       	ldd	r25, Z+7	; 0x07
    2e64:	90 93 a2 09 	sts	0x09A2, r25	; 0x8009a2 <pxCurrentTCB+0x1>
    2e68:	80 93 a1 09 	sts	0x09A1, r24	; 0x8009a1 <pxCurrentTCB>
    2e6c:	20 93 5a 09 	sts	0x095A, r18	; 0x80095a <uxTopReadyPriority>
    2e70:	08 95       	ret

00002e72 <vTaskSetTimeOutState>:
    2e72:	0f b6       	in	r0, 0x3f	; 63
    2e74:	f8 94       	cli
    2e76:	0f 92       	push	r0
    2e78:	20 91 56 09 	lds	r18, 0x0956	; 0x800956 <xNumOfOverflows>
    2e7c:	fc 01       	movw	r30, r24
    2e7e:	20 83       	st	Z, r18
    2e80:	20 91 5b 09 	lds	r18, 0x095B	; 0x80095b <xTickCount>
    2e84:	30 91 5c 09 	lds	r19, 0x095C	; 0x80095c <xTickCount+0x1>
    2e88:	32 83       	std	Z+2, r19	; 0x02
    2e8a:	21 83       	std	Z+1, r18	; 0x01
    2e8c:	0f 90       	pop	r0
    2e8e:	0f be       	out	0x3f, r0	; 63
    2e90:	08 95       	ret

00002e92 <vTaskInternalSetTimeOutState>:
    2e92:	20 91 56 09 	lds	r18, 0x0956	; 0x800956 <xNumOfOverflows>
    2e96:	fc 01       	movw	r30, r24
    2e98:	20 83       	st	Z, r18
    2e9a:	20 91 5b 09 	lds	r18, 0x095B	; 0x80095b <xTickCount>
    2e9e:	30 91 5c 09 	lds	r19, 0x095C	; 0x80095c <xTickCount+0x1>
    2ea2:	32 83       	std	Z+2, r19	; 0x02
    2ea4:	21 83       	std	Z+1, r18	; 0x01
    2ea6:	08 95       	ret

00002ea8 <xTaskCheckForTimeOut>:
    2ea8:	cf 93       	push	r28
    2eaa:	df 93       	push	r29
    2eac:	0f b6       	in	r0, 0x3f	; 63
    2eae:	f8 94       	cli
    2eb0:	0f 92       	push	r0
    2eb2:	20 91 5b 09 	lds	r18, 0x095B	; 0x80095b <xTickCount>
    2eb6:	30 91 5c 09 	lds	r19, 0x095C	; 0x80095c <xTickCount+0x1>
    2eba:	db 01       	movw	r26, r22
    2ebc:	4d 91       	ld	r20, X+
    2ebe:	5c 91       	ld	r21, X
    2ec0:	4f 3f       	cpi	r20, 0xFF	; 255
    2ec2:	bf ef       	ldi	r27, 0xFF	; 255
    2ec4:	5b 07       	cpc	r21, r27
    2ec6:	e9 f0       	breq	.+58     	; 0x2f02 <xTaskCheckForTimeOut+0x5a>
    2ec8:	ec 01       	movw	r28, r24
    2eca:	e9 81       	ldd	r30, Y+1	; 0x01
    2ecc:	fa 81       	ldd	r31, Y+2	; 0x02
    2ece:	a0 91 56 09 	lds	r26, 0x0956	; 0x800956 <xNumOfOverflows>
    2ed2:	b8 81       	ld	r27, Y
    2ed4:	ba 17       	cp	r27, r26
    2ed6:	19 f0       	breq	.+6      	; 0x2ede <xTaskCheckForTimeOut+0x36>
    2ed8:	2e 17       	cp	r18, r30
    2eda:	3f 07       	cpc	r19, r31
    2edc:	a0 f4       	brcc	.+40     	; 0x2f06 <xTaskCheckForTimeOut+0x5e>
    2ede:	2e 1b       	sub	r18, r30
    2ee0:	3f 0b       	sbc	r19, r31
    2ee2:	24 17       	cp	r18, r20
    2ee4:	35 07       	cpc	r19, r21
    2ee6:	40 f4       	brcc	.+16     	; 0x2ef8 <xTaskCheckForTimeOut+0x50>
    2ee8:	fb 01       	movw	r30, r22
    2eea:	42 1b       	sub	r20, r18
    2eec:	53 0b       	sbc	r21, r19
    2eee:	51 83       	std	Z+1, r21	; 0x01
    2ef0:	40 83       	st	Z, r20
    2ef2:	cf df       	rcall	.-98     	; 0x2e92 <vTaskInternalSetTimeOutState>
    2ef4:	80 e0       	ldi	r24, 0x00	; 0
    2ef6:	08 c0       	rjmp	.+16     	; 0x2f08 <xTaskCheckForTimeOut+0x60>
    2ef8:	fb 01       	movw	r30, r22
    2efa:	11 82       	std	Z+1, r1	; 0x01
    2efc:	10 82       	st	Z, r1
    2efe:	81 e0       	ldi	r24, 0x01	; 1
    2f00:	03 c0       	rjmp	.+6      	; 0x2f08 <xTaskCheckForTimeOut+0x60>
    2f02:	80 e0       	ldi	r24, 0x00	; 0
    2f04:	01 c0       	rjmp	.+2      	; 0x2f08 <xTaskCheckForTimeOut+0x60>
    2f06:	81 e0       	ldi	r24, 0x01	; 1
    2f08:	0f 90       	pop	r0
    2f0a:	0f be       	out	0x3f, r0	; 63
    2f0c:	df 91       	pop	r29
    2f0e:	cf 91       	pop	r28
    2f10:	08 95       	ret

00002f12 <xTaskGetCurrentTaskHandle>:
    2f12:	80 91 a1 09 	lds	r24, 0x09A1	; 0x8009a1 <pxCurrentTCB>
    2f16:	90 91 a2 09 	lds	r25, 0x09A2	; 0x8009a2 <pxCurrentTCB+0x1>
    2f1a:	08 95       	ret

00002f1c <xTaskNotifyWait>:
    2f1c:	4f 92       	push	r4
    2f1e:	5f 92       	push	r5
    2f20:	6f 92       	push	r6
    2f22:	7f 92       	push	r7
    2f24:	8f 92       	push	r8
    2f26:	9f 92       	push	r9
    2f28:	af 92       	push	r10
    2f2a:	bf 92       	push	r11
    2f2c:	ef 92       	push	r14
    2f2e:	ff 92       	push	r15
    2f30:	0f 93       	push	r16
    2f32:	1f 93       	push	r17
    2f34:	49 01       	movw	r8, r18
    2f36:	5a 01       	movw	r10, r20
    2f38:	0f b6       	in	r0, 0x3f	; 63
    2f3a:	f8 94       	cli
    2f3c:	0f 92       	push	r0
    2f3e:	e0 91 a1 09 	lds	r30, 0x09A1	; 0x8009a1 <pxCurrentTCB>
    2f42:	f0 91 a2 09 	lds	r31, 0x09A2	; 0x8009a2 <pxCurrentTCB+0x1>
    2f46:	27 a1       	ldd	r18, Z+39	; 0x27
    2f48:	22 30       	cpi	r18, 0x02	; 2
    2f4a:	19 f1       	breq	.+70     	; 0x2f92 <xTaskNotifyWait+0x76>
    2f4c:	e0 91 a1 09 	lds	r30, 0x09A1	; 0x8009a1 <pxCurrentTCB>
    2f50:	f0 91 a2 09 	lds	r31, 0x09A2	; 0x8009a2 <pxCurrentTCB+0x1>
    2f54:	43 a0       	ldd	r4, Z+35	; 0x23
    2f56:	54 a0       	ldd	r5, Z+36	; 0x24
    2f58:	65 a0       	ldd	r6, Z+37	; 0x25
    2f5a:	76 a0       	ldd	r7, Z+38	; 0x26
    2f5c:	dc 01       	movw	r26, r24
    2f5e:	cb 01       	movw	r24, r22
    2f60:	80 95       	com	r24
    2f62:	90 95       	com	r25
    2f64:	a0 95       	com	r26
    2f66:	b0 95       	com	r27
    2f68:	84 21       	and	r24, r4
    2f6a:	95 21       	and	r25, r5
    2f6c:	a6 21       	and	r26, r6
    2f6e:	b7 21       	and	r27, r7
    2f70:	83 a3       	std	Z+35, r24	; 0x23
    2f72:	94 a3       	std	Z+36, r25	; 0x24
    2f74:	a5 a3       	std	Z+37, r26	; 0x25
    2f76:	b6 a3       	std	Z+38, r27	; 0x26
    2f78:	e0 91 a1 09 	lds	r30, 0x09A1	; 0x8009a1 <pxCurrentTCB>
    2f7c:	f0 91 a2 09 	lds	r31, 0x09A2	; 0x8009a2 <pxCurrentTCB+0x1>
    2f80:	81 e0       	ldi	r24, 0x01	; 1
    2f82:	87 a3       	std	Z+39, r24	; 0x27
    2f84:	e1 14       	cp	r14, r1
    2f86:	f1 04       	cpc	r15, r1
    2f88:	21 f0       	breq	.+8      	; 0x2f92 <xTaskNotifyWait+0x76>
    2f8a:	61 e0       	ldi	r22, 0x01	; 1
    2f8c:	c7 01       	movw	r24, r14
    2f8e:	5d dc       	rcall	.-1862   	; 0x284a <prvAddCurrentTaskToDelayedList>
    2f90:	1f d9       	rcall	.-3522   	; 0x21d0 <vPortYield>
    2f92:	0f 90       	pop	r0
    2f94:	0f be       	out	0x3f, r0	; 63
    2f96:	0f b6       	in	r0, 0x3f	; 63
    2f98:	f8 94       	cli
    2f9a:	0f 92       	push	r0
    2f9c:	01 15       	cp	r16, r1
    2f9e:	11 05       	cpc	r17, r1
    2fa0:	69 f0       	breq	.+26     	; 0x2fbc <xTaskNotifyWait+0xa0>
    2fa2:	e0 91 a1 09 	lds	r30, 0x09A1	; 0x8009a1 <pxCurrentTCB>
    2fa6:	f0 91 a2 09 	lds	r31, 0x09A2	; 0x8009a2 <pxCurrentTCB+0x1>
    2faa:	83 a1       	ldd	r24, Z+35	; 0x23
    2fac:	94 a1       	ldd	r25, Z+36	; 0x24
    2fae:	a5 a1       	ldd	r26, Z+37	; 0x25
    2fb0:	b6 a1       	ldd	r27, Z+38	; 0x26
    2fb2:	f8 01       	movw	r30, r16
    2fb4:	80 83       	st	Z, r24
    2fb6:	91 83       	std	Z+1, r25	; 0x01
    2fb8:	a2 83       	std	Z+2, r26	; 0x02
    2fba:	b3 83       	std	Z+3, r27	; 0x03
    2fbc:	e0 91 a1 09 	lds	r30, 0x09A1	; 0x8009a1 <pxCurrentTCB>
    2fc0:	f0 91 a2 09 	lds	r31, 0x09A2	; 0x8009a2 <pxCurrentTCB+0x1>
    2fc4:	87 a1       	ldd	r24, Z+39	; 0x27
    2fc6:	82 30       	cpi	r24, 0x02	; 2
    2fc8:	b1 f4       	brne	.+44     	; 0x2ff6 <xTaskNotifyWait+0xda>
    2fca:	e0 91 a1 09 	lds	r30, 0x09A1	; 0x8009a1 <pxCurrentTCB>
    2fce:	f0 91 a2 09 	lds	r31, 0x09A2	; 0x8009a2 <pxCurrentTCB+0x1>
    2fd2:	83 a1       	ldd	r24, Z+35	; 0x23
    2fd4:	94 a1       	ldd	r25, Z+36	; 0x24
    2fd6:	a5 a1       	ldd	r26, Z+37	; 0x25
    2fd8:	b6 a1       	ldd	r27, Z+38	; 0x26
    2fda:	80 94       	com	r8
    2fdc:	90 94       	com	r9
    2fde:	a0 94       	com	r10
    2fe0:	b0 94       	com	r11
    2fe2:	88 22       	and	r8, r24
    2fe4:	99 22       	and	r9, r25
    2fe6:	aa 22       	and	r10, r26
    2fe8:	bb 22       	and	r11, r27
    2fea:	83 a2       	std	Z+35, r8	; 0x23
    2fec:	94 a2       	std	Z+36, r9	; 0x24
    2fee:	a5 a2       	std	Z+37, r10	; 0x25
    2ff0:	b6 a2       	std	Z+38, r11	; 0x26
    2ff2:	81 e0       	ldi	r24, 0x01	; 1
    2ff4:	01 c0       	rjmp	.+2      	; 0x2ff8 <xTaskNotifyWait+0xdc>
    2ff6:	80 e0       	ldi	r24, 0x00	; 0
    2ff8:	e0 91 a1 09 	lds	r30, 0x09A1	; 0x8009a1 <pxCurrentTCB>
    2ffc:	f0 91 a2 09 	lds	r31, 0x09A2	; 0x8009a2 <pxCurrentTCB+0x1>
    3000:	17 a2       	std	Z+39, r1	; 0x27
    3002:	0f 90       	pop	r0
    3004:	0f be       	out	0x3f, r0	; 63
    3006:	1f 91       	pop	r17
    3008:	0f 91       	pop	r16
    300a:	ff 90       	pop	r15
    300c:	ef 90       	pop	r14
    300e:	bf 90       	pop	r11
    3010:	af 90       	pop	r10
    3012:	9f 90       	pop	r9
    3014:	8f 90       	pop	r8
    3016:	7f 90       	pop	r7
    3018:	6f 90       	pop	r6
    301a:	5f 90       	pop	r5
    301c:	4f 90       	pop	r4
    301e:	08 95       	ret

00003020 <xTaskGenericNotify>:
    3020:	0f 93       	push	r16
    3022:	1f 93       	push	r17
    3024:	cf 93       	push	r28
    3026:	df 93       	push	r29
    3028:	fc 01       	movw	r30, r24
    302a:	0f b6       	in	r0, 0x3f	; 63
    302c:	f8 94       	cli
    302e:	0f 92       	push	r0
    3030:	01 15       	cp	r16, r1
    3032:	11 05       	cpc	r17, r1
    3034:	49 f0       	breq	.+18     	; 0x3048 <xTaskGenericNotify+0x28>
    3036:	83 a1       	ldd	r24, Z+35	; 0x23
    3038:	94 a1       	ldd	r25, Z+36	; 0x24
    303a:	a5 a1       	ldd	r26, Z+37	; 0x25
    303c:	b6 a1       	ldd	r27, Z+38	; 0x26
    303e:	e8 01       	movw	r28, r16
    3040:	88 83       	st	Y, r24
    3042:	99 83       	std	Y+1, r25	; 0x01
    3044:	aa 83       	std	Y+2, r26	; 0x02
    3046:	bb 83       	std	Y+3, r27	; 0x03
    3048:	87 a1       	ldd	r24, Z+39	; 0x27
    304a:	92 e0       	ldi	r25, 0x02	; 2
    304c:	97 a3       	std	Z+39, r25	; 0x27
    304e:	22 30       	cpi	r18, 0x02	; 2
    3050:	b1 f0       	breq	.+44     	; 0x307e <xTaskGenericNotify+0x5e>
    3052:	18 f4       	brcc	.+6      	; 0x305a <xTaskGenericNotify+0x3a>
    3054:	21 30       	cpi	r18, 0x01	; 1
    3056:	31 f0       	breq	.+12     	; 0x3064 <xTaskGenericNotify+0x44>
    3058:	2a c0       	rjmp	.+84     	; 0x30ae <xTaskGenericNotify+0x8e>
    305a:	23 30       	cpi	r18, 0x03	; 3
    305c:	e9 f0       	breq	.+58     	; 0x3098 <xTaskGenericNotify+0x78>
    305e:	24 30       	cpi	r18, 0x04	; 4
    3060:	01 f1       	breq	.+64     	; 0x30a2 <xTaskGenericNotify+0x82>
    3062:	25 c0       	rjmp	.+74     	; 0x30ae <xTaskGenericNotify+0x8e>
    3064:	03 a1       	ldd	r16, Z+35	; 0x23
    3066:	14 a1       	ldd	r17, Z+36	; 0x24
    3068:	25 a1       	ldd	r18, Z+37	; 0x25
    306a:	36 a1       	ldd	r19, Z+38	; 0x26
    306c:	40 2b       	or	r20, r16
    306e:	51 2b       	or	r21, r17
    3070:	62 2b       	or	r22, r18
    3072:	73 2b       	or	r23, r19
    3074:	43 a3       	std	Z+35, r20	; 0x23
    3076:	54 a3       	std	Z+36, r21	; 0x24
    3078:	65 a3       	std	Z+37, r22	; 0x25
    307a:	76 a3       	std	Z+38, r23	; 0x26
    307c:	18 c0       	rjmp	.+48     	; 0x30ae <xTaskGenericNotify+0x8e>
    307e:	43 a1       	ldd	r20, Z+35	; 0x23
    3080:	54 a1       	ldd	r21, Z+36	; 0x24
    3082:	65 a1       	ldd	r22, Z+37	; 0x25
    3084:	76 a1       	ldd	r23, Z+38	; 0x26
    3086:	4f 5f       	subi	r20, 0xFF	; 255
    3088:	5f 4f       	sbci	r21, 0xFF	; 255
    308a:	6f 4f       	sbci	r22, 0xFF	; 255
    308c:	7f 4f       	sbci	r23, 0xFF	; 255
    308e:	43 a3       	std	Z+35, r20	; 0x23
    3090:	54 a3       	std	Z+36, r21	; 0x24
    3092:	65 a3       	std	Z+37, r22	; 0x25
    3094:	76 a3       	std	Z+38, r23	; 0x26
    3096:	0b c0       	rjmp	.+22     	; 0x30ae <xTaskGenericNotify+0x8e>
    3098:	43 a3       	std	Z+35, r20	; 0x23
    309a:	54 a3       	std	Z+36, r21	; 0x24
    309c:	65 a3       	std	Z+37, r22	; 0x25
    309e:	76 a3       	std	Z+38, r23	; 0x26
    30a0:	06 c0       	rjmp	.+12     	; 0x30ae <xTaskGenericNotify+0x8e>
    30a2:	82 30       	cpi	r24, 0x02	; 2
    30a4:	71 f1       	breq	.+92     	; 0x3102 <xTaskGenericNotify+0xe2>
    30a6:	43 a3       	std	Z+35, r20	; 0x23
    30a8:	54 a3       	std	Z+36, r21	; 0x24
    30aa:	65 a3       	std	Z+37, r22	; 0x25
    30ac:	76 a3       	std	Z+38, r23	; 0x26
    30ae:	81 30       	cpi	r24, 0x01	; 1
    30b0:	51 f5       	brne	.+84     	; 0x3106 <xTaskGenericNotify+0xe6>
    30b2:	ef 01       	movw	r28, r30
    30b4:	8f 01       	movw	r16, r30
    30b6:	0e 5f       	subi	r16, 0xFE	; 254
    30b8:	1f 4f       	sbci	r17, 0xFF	; 255
    30ba:	c8 01       	movw	r24, r16
    30bc:	0e 94 4f 10 	call	0x209e	; 0x209e <uxListRemove>
    30c0:	8e 89       	ldd	r24, Y+22	; 0x16
    30c2:	90 91 5a 09 	lds	r25, 0x095A	; 0x80095a <uxTopReadyPriority>
    30c6:	98 17       	cp	r25, r24
    30c8:	10 f4       	brcc	.+4      	; 0x30ce <xTaskGenericNotify+0xae>
    30ca:	80 93 5a 09 	sts	0x095A, r24	; 0x80095a <uxTopReadyPriority>
    30ce:	90 e0       	ldi	r25, 0x00	; 0
    30d0:	9c 01       	movw	r18, r24
    30d2:	22 0f       	add	r18, r18
    30d4:	33 1f       	adc	r19, r19
    30d6:	22 0f       	add	r18, r18
    30d8:	33 1f       	adc	r19, r19
    30da:	22 0f       	add	r18, r18
    30dc:	33 1f       	adc	r19, r19
    30de:	82 0f       	add	r24, r18
    30e0:	93 1f       	adc	r25, r19
    30e2:	b8 01       	movw	r22, r16
    30e4:	83 58       	subi	r24, 0x83	; 131
    30e6:	96 4f       	sbci	r25, 0xF6	; 246
    30e8:	0e 94 fd 0f 	call	0x1ffa	; 0x1ffa <vListInsertEnd>
    30ec:	e0 91 a1 09 	lds	r30, 0x09A1	; 0x8009a1 <pxCurrentTCB>
    30f0:	f0 91 a2 09 	lds	r31, 0x09A2	; 0x8009a2 <pxCurrentTCB+0x1>
    30f4:	9e 89       	ldd	r25, Y+22	; 0x16
    30f6:	86 89       	ldd	r24, Z+22	; 0x16
    30f8:	89 17       	cp	r24, r25
    30fa:	38 f4       	brcc	.+14     	; 0x310a <xTaskGenericNotify+0xea>
    30fc:	69 d8       	rcall	.-3886   	; 0x21d0 <vPortYield>
    30fe:	81 e0       	ldi	r24, 0x01	; 1
    3100:	05 c0       	rjmp	.+10     	; 0x310c <xTaskGenericNotify+0xec>
    3102:	80 e0       	ldi	r24, 0x00	; 0
    3104:	03 c0       	rjmp	.+6      	; 0x310c <xTaskGenericNotify+0xec>
    3106:	81 e0       	ldi	r24, 0x01	; 1
    3108:	01 c0       	rjmp	.+2      	; 0x310c <xTaskGenericNotify+0xec>
    310a:	81 e0       	ldi	r24, 0x01	; 1
    310c:	0f 90       	pop	r0
    310e:	0f be       	out	0x3f, r0	; 63
    3110:	df 91       	pop	r29
    3112:	cf 91       	pop	r28
    3114:	1f 91       	pop	r17
    3116:	0f 91       	pop	r16
    3118:	08 95       	ret

0000311a <xTaskNotifyStateClear>:
    TCB_t *pxTCB;
    BaseType_t xReturn;

        /* If null is passed in here then it is the calling task that is having
        its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    311a:	00 97       	sbiw	r24, 0x00	; 0
    311c:	21 f4       	brne	.+8      	; 0x3126 <xTaskNotifyStateClear+0xc>
    311e:	80 91 a1 09 	lds	r24, 0x09A1	; 0x8009a1 <pxCurrentTCB>
    3122:	90 91 a2 09 	lds	r25, 0x09A2	; 0x8009a2 <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    3126:	0f b6       	in	r0, 0x3f	; 63
    3128:	f8 94       	cli
    312a:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
    312c:	fc 01       	movw	r30, r24
    312e:	27 a1       	ldd	r18, Z+39	; 0x27
    3130:	22 30       	cpi	r18, 0x02	; 2
    3132:	19 f4       	brne	.+6      	; 0x313a <xTaskNotifyStateClear+0x20>
            {
                pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    3134:	17 a2       	std	Z+39, r1	; 0x27
                xReturn = pdPASS;
    3136:	81 e0       	ldi	r24, 0x01	; 1
    3138:	01 c0       	rjmp	.+2      	; 0x313c <xTaskNotifyStateClear+0x22>
            }
            else
            {
                xReturn = pdFAIL;
    313a:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        taskEXIT_CRITICAL();
    313c:	0f 90       	pop	r0
    313e:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    }
    3140:	08 95       	ret

00003142 <crc16_update>:
    3142:	86 27       	eor	r24, r22
    3144:	28 e0       	ldi	r18, 0x08	; 8
    3146:	30 e0       	ldi	r19, 0x00	; 0
    3148:	80 ff       	sbrs	r24, 0
    314a:	07 c0       	rjmp	.+14     	; 0x315a <crc16_update+0x18>
    314c:	96 95       	lsr	r25
    314e:	87 95       	ror	r24
    3150:	41 e0       	ldi	r20, 0x01	; 1
    3152:	84 27       	eor	r24, r20
    3154:	40 ea       	ldi	r20, 0xA0	; 160
    3156:	94 27       	eor	r25, r20
    3158:	02 c0       	rjmp	.+4      	; 0x315e <crc16_update+0x1c>
    315a:	96 95       	lsr	r25
    315c:	87 95       	ror	r24
    315e:	21 50       	subi	r18, 0x01	; 1
    3160:	31 09       	sbc	r19, r1
    3162:	91 f7       	brne	.-28     	; 0x3148 <crc16_update+0x6>
    3164:	08 95       	ret

00003166 <millis_init>:
    3166:	82 e0       	ldi	r24, 0x02	; 2
    3168:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    316c:	84 e0       	ldi	r24, 0x04	; 4
    316e:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7000b1>
    3172:	8a ef       	ldi	r24, 0xFA	; 250
    3174:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7000b3>
    3178:	e0 e7       	ldi	r30, 0x70	; 112
    317a:	f0 e0       	ldi	r31, 0x00	; 0
    317c:	80 81       	ld	r24, Z
    317e:	82 60       	ori	r24, 0x02	; 2
    3180:	80 83       	st	Z, r24
    3182:	08 95       	ret

00003184 <Get_millis>:
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    3184:	f8 94       	cli
    3186:	60 91 d2 0b 	lds	r22, 0x0BD2	; 0x800bd2 <timer1_millis>
    318a:	70 91 d3 0b 	lds	r23, 0x0BD3	; 0x800bd3 <timer1_millis+0x1>
    318e:	80 91 d4 0b 	lds	r24, 0x0BD4	; 0x800bd4 <timer1_millis+0x2>
    3192:	90 91 d5 0b 	lds	r25, 0x0BD5	; 0x800bd5 <timer1_millis+0x3>
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
    3196:	78 94       	sei
    3198:	08 95       	ret

0000319a <__vector_13>:
    319a:	1f 92       	push	r1
    319c:	0f 92       	push	r0
    319e:	0f b6       	in	r0, 0x3f	; 63
    31a0:	0f 92       	push	r0
    31a2:	11 24       	eor	r1, r1
    31a4:	8f 93       	push	r24
    31a6:	9f 93       	push	r25
    31a8:	af 93       	push	r26
    31aa:	bf 93       	push	r27
    31ac:	80 91 d2 0b 	lds	r24, 0x0BD2	; 0x800bd2 <timer1_millis>
    31b0:	90 91 d3 0b 	lds	r25, 0x0BD3	; 0x800bd3 <timer1_millis+0x1>
    31b4:	a0 91 d4 0b 	lds	r26, 0x0BD4	; 0x800bd4 <timer1_millis+0x2>
    31b8:	b0 91 d5 0b 	lds	r27, 0x0BD5	; 0x800bd5 <timer1_millis+0x3>
    31bc:	01 96       	adiw	r24, 0x01	; 1
    31be:	a1 1d       	adc	r26, r1
    31c0:	b1 1d       	adc	r27, r1
    31c2:	80 93 d2 0b 	sts	0x0BD2, r24	; 0x800bd2 <timer1_millis>
    31c6:	90 93 d3 0b 	sts	0x0BD3, r25	; 0x800bd3 <timer1_millis+0x1>
    31ca:	a0 93 d4 0b 	sts	0x0BD4, r26	; 0x800bd4 <timer1_millis+0x2>
    31ce:	b0 93 d5 0b 	sts	0x0BD5, r27	; 0x800bd5 <timer1_millis+0x3>
    31d2:	bf 91       	pop	r27
    31d4:	af 91       	pop	r26
    31d6:	9f 91       	pop	r25
    31d8:	8f 91       	pop	r24
    31da:	0f 90       	pop	r0
    31dc:	0f be       	out	0x3f, r0	; 63
    31de:	0f 90       	pop	r0
    31e0:	1f 90       	pop	r1
    31e2:	18 95       	reti

000031e4 <__udivmodsi4>:
    31e4:	a1 e2       	ldi	r26, 0x21	; 33
    31e6:	1a 2e       	mov	r1, r26
    31e8:	aa 1b       	sub	r26, r26
    31ea:	bb 1b       	sub	r27, r27
    31ec:	fd 01       	movw	r30, r26
    31ee:	0d c0       	rjmp	.+26     	; 0x320a <__udivmodsi4_ep>

000031f0 <__udivmodsi4_loop>:
    31f0:	aa 1f       	adc	r26, r26
    31f2:	bb 1f       	adc	r27, r27
    31f4:	ee 1f       	adc	r30, r30
    31f6:	ff 1f       	adc	r31, r31
    31f8:	a2 17       	cp	r26, r18
    31fa:	b3 07       	cpc	r27, r19
    31fc:	e4 07       	cpc	r30, r20
    31fe:	f5 07       	cpc	r31, r21
    3200:	20 f0       	brcs	.+8      	; 0x320a <__udivmodsi4_ep>
    3202:	a2 1b       	sub	r26, r18
    3204:	b3 0b       	sbc	r27, r19
    3206:	e4 0b       	sbc	r30, r20
    3208:	f5 0b       	sbc	r31, r21

0000320a <__udivmodsi4_ep>:
    320a:	66 1f       	adc	r22, r22
    320c:	77 1f       	adc	r23, r23
    320e:	88 1f       	adc	r24, r24
    3210:	99 1f       	adc	r25, r25
    3212:	1a 94       	dec	r1
    3214:	69 f7       	brne	.-38     	; 0x31f0 <__udivmodsi4_loop>
    3216:	60 95       	com	r22
    3218:	70 95       	com	r23
    321a:	80 95       	com	r24
    321c:	90 95       	com	r25
    321e:	9b 01       	movw	r18, r22
    3220:	ac 01       	movw	r20, r24
    3222:	bd 01       	movw	r22, r26
    3224:	cf 01       	movw	r24, r30
    3226:	08 95       	ret

00003228 <memcpy>:
    3228:	fb 01       	movw	r30, r22
    322a:	dc 01       	movw	r26, r24
    322c:	02 c0       	rjmp	.+4      	; 0x3232 <memcpy+0xa>
    322e:	01 90       	ld	r0, Z+
    3230:	0d 92       	st	X+, r0
    3232:	41 50       	subi	r20, 0x01	; 1
    3234:	50 40       	sbci	r21, 0x00	; 0
    3236:	d8 f7       	brcc	.-10     	; 0x322e <memcpy+0x6>
    3238:	08 95       	ret

0000323a <memset>:
    323a:	dc 01       	movw	r26, r24
    323c:	01 c0       	rjmp	.+2      	; 0x3240 <memset+0x6>
    323e:	6d 93       	st	X+, r22
    3240:	41 50       	subi	r20, 0x01	; 1
    3242:	50 40       	sbci	r21, 0x00	; 0
    3244:	e0 f7       	brcc	.-8      	; 0x323e <memset+0x4>
    3246:	08 95       	ret

00003248 <_exit>:
    3248:	f8 94       	cli

0000324a <__stop_program>:
    324a:	ff cf       	rjmp	.-2      	; 0x324a <__stop_program>
