
blancher.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000fc  00800200  000049c6  00004a5a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000049c6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00001272  008002fc  008002fc  00004b56  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00004b56  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004b88  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000c10  00000000  00000000  00004bc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000d404  00000000  00000000  000057d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003783  00000000  00000000  00012bdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000b4a2  00000000  00000000  0001635f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001f74  00000000  00000000  00021804  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000190c4  00000000  00000000  00023778  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000a07e  00000000  00000000  0003c83c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000c48  00000000  00000000  000468ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00006b96  00000000  00000000  00047502  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	db c0       	rjmp	.+438    	; 0x1b8 <__ctors_end>
       2:	00 00       	nop
       4:	fa c0       	rjmp	.+500    	; 0x1fa <__bad_interrupt>
       6:	00 00       	nop
       8:	f8 c0       	rjmp	.+496    	; 0x1fa <__bad_interrupt>
       a:	00 00       	nop
       c:	f6 c0       	rjmp	.+492    	; 0x1fa <__bad_interrupt>
       e:	00 00       	nop
      10:	f4 c0       	rjmp	.+488    	; 0x1fa <__bad_interrupt>
      12:	00 00       	nop
      14:	f2 c0       	rjmp	.+484    	; 0x1fa <__bad_interrupt>
      16:	00 00       	nop
      18:	f0 c0       	rjmp	.+480    	; 0x1fa <__bad_interrupt>
      1a:	00 00       	nop
      1c:	ee c0       	rjmp	.+476    	; 0x1fa <__bad_interrupt>
      1e:	00 00       	nop
      20:	ec c0       	rjmp	.+472    	; 0x1fa <__bad_interrupt>
      22:	00 00       	nop
      24:	ea c0       	rjmp	.+468    	; 0x1fa <__bad_interrupt>
      26:	00 00       	nop
      28:	e8 c0       	rjmp	.+464    	; 0x1fa <__bad_interrupt>
      2a:	00 00       	nop
      2c:	e6 c0       	rjmp	.+460    	; 0x1fa <__bad_interrupt>
      2e:	00 00       	nop
      30:	0c 94 3e 16 	jmp	0x2c7c	; 0x2c7c <__vector_12>
      34:	0c 94 00 21 	jmp	0x4200	; 0x4200 <__vector_13>
      38:	e0 c0       	rjmp	.+448    	; 0x1fa <__bad_interrupt>
      3a:	00 00       	nop
      3c:	de c0       	rjmp	.+444    	; 0x1fa <__bad_interrupt>
      3e:	00 00       	nop
      40:	dc c0       	rjmp	.+440    	; 0x1fa <__bad_interrupt>
      42:	00 00       	nop
      44:	6b c1       	rjmp	.+726    	; 0x31c <__vector_17>
      46:	00 00       	nop
      48:	d8 c0       	rjmp	.+432    	; 0x1fa <__bad_interrupt>
      4a:	00 00       	nop
      4c:	d6 c0       	rjmp	.+428    	; 0x1fa <__bad_interrupt>
      4e:	00 00       	nop
      50:	d4 c0       	rjmp	.+424    	; 0x1fa <__bad_interrupt>
      52:	00 00       	nop
      54:	d2 c0       	rjmp	.+420    	; 0x1fa <__bad_interrupt>
      56:	00 00       	nop
      58:	d0 c0       	rjmp	.+416    	; 0x1fa <__bad_interrupt>
      5a:	00 00       	nop
      5c:	ce c0       	rjmp	.+412    	; 0x1fa <__bad_interrupt>
      5e:	00 00       	nop
      60:	cc c0       	rjmp	.+408    	; 0x1fa <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 d4 0d 	jmp	0x1ba8	; 0x1ba8 <__vector_25>
      68:	0c 94 0d 0e 	jmp	0x1c1a	; 0x1c1a <__vector_26>
      6c:	c6 c0       	rjmp	.+396    	; 0x1fa <__bad_interrupt>
      6e:	00 00       	nop
      70:	c4 c0       	rjmp	.+392    	; 0x1fa <__bad_interrupt>
      72:	00 00       	nop
      74:	0c 94 27 0d 	jmp	0x1a4e	; 0x1a4e <__vector_29>
      78:	c0 c0       	rjmp	.+384    	; 0x1fa <__bad_interrupt>
      7a:	00 00       	nop
      7c:	be c0       	rjmp	.+380    	; 0x1fa <__bad_interrupt>
      7e:	00 00       	nop
      80:	b3 c1       	rjmp	.+870    	; 0x3e8 <__vector_32>
      82:	00 00       	nop
      84:	ba c0       	rjmp	.+372    	; 0x1fa <__bad_interrupt>
      86:	00 00       	nop
      88:	b8 c0       	rjmp	.+368    	; 0x1fa <__bad_interrupt>
      8a:	00 00       	nop
      8c:	b6 c0       	rjmp	.+364    	; 0x1fa <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 da 0e 	jmp	0x1db4	; 0x1db4 <__vector_36>
      94:	0c 94 13 0f 	jmp	0x1e26	; 0x1e26 <__vector_37>
      98:	b0 c0       	rjmp	.+352    	; 0x1fa <__bad_interrupt>
      9a:	00 00       	nop
      9c:	ae c0       	rjmp	.+348    	; 0x1fa <__bad_interrupt>
      9e:	00 00       	nop
      a0:	ac c0       	rjmp	.+344    	; 0x1fa <__bad_interrupt>
      a2:	00 00       	nop
      a4:	aa c0       	rjmp	.+340    	; 0x1fa <__bad_interrupt>
      a6:	00 00       	nop
      a8:	05 c2       	rjmp	.+1034   	; 0x4b4 <__vector_42>
      aa:	00 00       	nop
      ac:	a6 c0       	rjmp	.+332    	; 0x1fa <__bad_interrupt>
      ae:	00 00       	nop
      b0:	a4 c0       	rjmp	.+328    	; 0x1fa <__bad_interrupt>
      b2:	00 00       	nop
      b4:	a2 c0       	rjmp	.+324    	; 0x1fa <__bad_interrupt>
      b6:	00 00       	nop
      b8:	a0 c0       	rjmp	.+320    	; 0x1fa <__bad_interrupt>
      ba:	00 00       	nop
      bc:	61 c2       	rjmp	.+1218   	; 0x580 <__vector_47>
      be:	00 00       	nop
      c0:	9c c0       	rjmp	.+312    	; 0x1fa <__bad_interrupt>
      c2:	00 00       	nop
      c4:	9a c0       	rjmp	.+308    	; 0x1fa <__bad_interrupt>
      c6:	00 00       	nop
      c8:	98 c0       	rjmp	.+304    	; 0x1fa <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 e9 0f 	jmp	0x1fd2	; 0x1fd2 <__vector_51>
      d0:	0c 94 22 10 	jmp	0x2044	; 0x2044 <__vector_52>
      d4:	92 c0       	rjmp	.+292    	; 0x1fa <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 f5 10 	jmp	0x21ea	; 0x21ea <__vector_54>
      dc:	0c 94 2e 11 	jmp	0x225c	; 0x225c <__vector_55>
      e0:	8c c0       	rjmp	.+280    	; 0x1fa <__bad_interrupt>
      e2:	00 00       	nop
      e4:	07 63       	ori	r16, 0x37	; 55
      e6:	42 36       	cpi	r20, 0x62	; 98
      e8:	b7 9b       	sbis	0x16, 7	; 22
      ea:	d8 a7       	std	Y+40, r29	; 0x28
      ec:	1a 39       	cpi	r17, 0x9A	; 154
      ee:	68 56       	subi	r22, 0x68	; 104
      f0:	18 ae       	std	Y+56, r1	; 0x38
      f2:	ba ab       	std	Y+50, r27	; 0x32
      f4:	55 8c       	ldd	r5, Z+29	; 0x1d
      f6:	1d 3c       	cpi	r17, 0xCD	; 205
      f8:	b7 cc       	rjmp	.-1682   	; 0xfffffa68 <__eeprom_end+0xff7efa68>
      fa:	57 63       	ori	r21, 0x37	; 55
      fc:	bd 6d       	ori	r27, 0xDD	; 221
      fe:	ed fd       	.word	0xfded	; ????
     100:	75 3e       	cpi	r23, 0xE5	; 229
     102:	f6 17       	cp	r31, r22
     104:	72 31       	cpi	r23, 0x12	; 18
     106:	bf 00       	.word	0x00bf	; ????
     108:	00 00       	nop
     10a:	80 3f       	cpi	r24, 0xF0	; 240
     10c:	08 00       	.word	0x0008	; ????
     10e:	00 00       	nop
     110:	be 92       	st	-X, r11
     112:	24 49       	sbci	r18, 0x94	; 148
     114:	12 3e       	cpi	r17, 0xE2	; 226
     116:	ab aa       	std	Y+51, r10	; 0x33
     118:	aa 2a       	or	r10, r26
     11a:	be cd       	rjmp	.-1156   	; 0xfffffc98 <__eeprom_end+0xff7efc98>
     11c:	cc cc       	rjmp	.-1640   	; 0xfffffab6 <__eeprom_end+0xff7efab6>
     11e:	4c 3e       	cpi	r20, 0xEC	; 236
     120:	00 00       	nop
     122:	00 80       	ld	r0, Z
     124:	be ab       	std	Y+54, r27	; 0x36
     126:	aa aa       	std	Y+50, r10	; 0x32
     128:	aa 3e       	cpi	r26, 0xEA	; 234
     12a:	00 00       	nop
     12c:	00 00       	nop
     12e:	bf 00       	.word	0x00bf	; ????
     130:	00 00       	nop
     132:	80 3f       	cpi	r24, 0xF0	; 240
     134:	00 00       	nop
     136:	00 00       	nop
     138:	00 08       	sbc	r0, r0
     13a:	41 78       	andi	r20, 0x81	; 129
     13c:	d3 bb       	out	0x13, r29	; 19
     13e:	43 87       	std	Z+11, r20	; 0x0b
     140:	d1 13       	cpse	r29, r17
     142:	3d 19       	sub	r19, r13
     144:	0e 3c       	cpi	r16, 0xCE	; 206
     146:	c3 bd       	out	0x23, r28	; 35
     148:	42 82       	std	Z+2, r4	; 0x02
     14a:	ad 2b       	or	r26, r29
     14c:	3e 68       	ori	r19, 0x8E	; 142
     14e:	ec 82       	std	Y+4, r14	; 0x04
     150:	76 be       	out	0x36, r7	; 54
     152:	d9 8f       	std	Y+25, r29	; 0x19
     154:	e1 a9       	ldd	r30, Z+49	; 0x31
     156:	3e 4c       	sbci	r19, 0xCE	; 206
     158:	80 ef       	ldi	r24, 0xF0	; 240
     15a:	ff be       	out	0x3f, r15	; 63
     15c:	01 c4       	rjmp	.+2050   	; 0x960 <Modbus_mster_transaction+0x1ce>
     15e:	ff 7f       	andi	r31, 0xFF	; 255
     160:	3f 00       	.word	0x003f	; ????
     162:	00 00       	nop
	...

00000166 <prvIdleTask>:
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
     166:	c4 e1       	ldi	r28, 0x14	; 20
     168:	dd e0       	ldi	r29, 0x0D	; 13
     16a:	0a e2       	ldi	r16, 0x2A	; 42
     16c:	1d e0       	ldi	r17, 0x0D	; 13
     16e:	80 91 13 0d 	lds	r24, 0x0D13	; 0x800d13 <uxDeletedTasksWaitingCleanUp>
     172:	88 23       	and	r24, r24
     174:	d1 f0       	breq	.+52     	; 0x1aa <prvIdleTask+0x44>
     176:	0f b6       	in	r0, 0x3f	; 63
     178:	f8 94       	cli
     17a:	0f 92       	push	r0
     17c:	ed 81       	ldd	r30, Y+5	; 0x05
     17e:	fe 81       	ldd	r31, Y+6	; 0x06
     180:	86 81       	ldd	r24, Z+6	; 0x06
     182:	97 81       	ldd	r25, Z+7	; 0x07
     184:	02 96       	adiw	r24, 0x02	; 2
     186:	0e 94 a6 14 	call	0x294c	; 0x294c <uxListRemove>
     18a:	80 91 12 0d 	lds	r24, 0x0D12	; 0x800d12 <uxCurrentNumberOfTasks>
     18e:	81 50       	subi	r24, 0x01	; 1
     190:	80 93 12 0d 	sts	0x0D12, r24	; 0x800d12 <uxCurrentNumberOfTasks>
     194:	80 91 13 0d 	lds	r24, 0x0D13	; 0x800d13 <uxDeletedTasksWaitingCleanUp>
     198:	81 50       	subi	r24, 0x01	; 1
     19a:	80 93 13 0d 	sts	0x0D13, r24	; 0x800d13 <uxDeletedTasksWaitingCleanUp>
     19e:	0f 90       	pop	r0
     1a0:	0f be       	out	0x3f, r0	; 63
     1a2:	80 91 13 0d 	lds	r24, 0x0D13	; 0x800d13 <uxDeletedTasksWaitingCleanUp>
     1a6:	81 11       	cpse	r24, r1
     1a8:	e6 cf       	rjmp	.-52     	; 0x176 <prvIdleTask+0x10>
     1aa:	f8 01       	movw	r30, r16
     1ac:	80 81       	ld	r24, Z
     1ae:	82 30       	cpi	r24, 0x02	; 2
     1b0:	f0 f2       	brcs	.-68     	; 0x16e <prvIdleTask+0x8>
     1b2:	0e 94 7b 15 	call	0x2af6	; 0x2af6 <vPortYield>
     1b6:	db cf       	rjmp	.-74     	; 0x16e <prvIdleTask+0x8>

000001b8 <__ctors_end>:
     1b8:	11 24       	eor	r1, r1
     1ba:	1f be       	out	0x3f, r1	; 63
     1bc:	cf ef       	ldi	r28, 0xFF	; 255
     1be:	d1 e2       	ldi	r29, 0x21	; 33
     1c0:	de bf       	out	0x3e, r29	; 62
     1c2:	cd bf       	out	0x3d, r28	; 61
     1c4:	00 e0       	ldi	r16, 0x00	; 0
     1c6:	0c bf       	out	0x3c, r16	; 60

000001c8 <__do_copy_data>:
     1c8:	12 e0       	ldi	r17, 0x02	; 2
     1ca:	a0 e0       	ldi	r26, 0x00	; 0
     1cc:	b2 e0       	ldi	r27, 0x02	; 2
     1ce:	e6 ec       	ldi	r30, 0xC6	; 198
     1d0:	f9 e4       	ldi	r31, 0x49	; 73
     1d2:	00 e0       	ldi	r16, 0x00	; 0
     1d4:	0b bf       	out	0x3b, r16	; 59
     1d6:	02 c0       	rjmp	.+4      	; 0x1dc <__do_copy_data+0x14>
     1d8:	07 90       	elpm	r0, Z+
     1da:	0d 92       	st	X+, r0
     1dc:	ac 3f       	cpi	r26, 0xFC	; 252
     1de:	b1 07       	cpc	r27, r17
     1e0:	d9 f7       	brne	.-10     	; 0x1d8 <__do_copy_data+0x10>

000001e2 <__do_clear_bss>:
     1e2:	25 e1       	ldi	r18, 0x15	; 21
     1e4:	ac ef       	ldi	r26, 0xFC	; 252
     1e6:	b2 e0       	ldi	r27, 0x02	; 2
     1e8:	01 c0       	rjmp	.+2      	; 0x1ec <.do_clear_bss_start>

000001ea <.do_clear_bss_loop>:
     1ea:	1d 92       	st	X+, r1

000001ec <.do_clear_bss_start>:
     1ec:	ae 36       	cpi	r26, 0x6E	; 110
     1ee:	b2 07       	cpc	r27, r18
     1f0:	e1 f7       	brne	.-8      	; 0x1ea <.do_clear_bss_loop>
     1f2:	0e 94 81 0c 	call	0x1902	; 0x1902 <main>
     1f6:	0c 94 e1 24 	jmp	0x49c2	; 0x49c2 <_exit>

000001fa <__bad_interrupt>:
     1fa:	02 cf       	rjmp	.-508    	; 0x0 <__vectors>

000001fc <timers_init>:
 * set_up the timer and interrupt config and
 * parameters timer_ config struct contain all info about Timer
 * return 1 if the function setup OK -1 if not
 */
uint8_t timers_init(g_Timer_Config *config)
{
     1fc:	fc 01       	movw	r30, r24
	//millis_init(); //start this timer to get the time between ticks

	// choose the timer number depend on the config timer_number
	if(config->timer_number == 1){
     1fe:	94 81       	ldd	r25, Z+4	; 0x04
     200:	91 30       	cpi	r25, 0x01	; 1
     202:	01 f5       	brne	.+64     	; 0x244 <timers_init+0x48>

		// off all the modes of  first config register on timer
		TIMER1_CONGFIG_A = 0X00;
     204:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
		// External counter on T1 and set the Top vale is OCRnA
		TIMER1_CONGFIG_B = 0x0E;
     208:	8e e0       	ldi	r24, 0x0E	; 14
     20a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
		// number of Encoder Tick for Each interrupt
		TIMER1_COMPARE = config->ticks - 1;
     20e:	80 81       	ld	r24, Z
     210:	91 81       	ldd	r25, Z+1	; 0x01
     212:	01 97       	sbiw	r24, 0x01	; 1
     214:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
     218:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
		// Enable interrupt Bit on the timer Mask
		SET_BIT(TIMER1_INTERUPT, TIMER1_COMPARE_INT);
     21c:	af e6       	ldi	r26, 0x6F	; 111
     21e:	b0 e0       	ldi	r27, 0x00	; 0
     220:	8c 91       	ld	r24, X
     222:	82 60       	ori	r24, 0x02	; 2
     224:	8c 93       	st	X, r24
		// copy the config parameter to Timer stuct
		g_timer1_config = config;
     226:	f0 93 f0 0d 	sts	0x0DF0, r31	; 0x800df0 <g_timer1_config+0x1>
     22a:	e0 93 ef 0d 	sts	0x0DEF, r30	; 0x800def <g_timer1_config>
		// set the time before get ticks ISR time
		g_Timer1_old_time = Get_millis();
     22e:	0e 94 f5 20 	call	0x41ea	; 0x41ea <Get_millis>
     232:	60 93 d5 0d 	sts	0x0DD5, r22	; 0x800dd5 <g_Timer1_old_time>
     236:	70 93 d6 0d 	sts	0x0DD6, r23	; 0x800dd6 <g_Timer1_old_time+0x1>
     23a:	80 93 d7 0d 	sts	0x0DD7, r24	; 0x800dd7 <g_Timer1_old_time+0x2>
     23e:	90 93 d8 0d 	sts	0x0DD8, r25	; 0x800dd8 <g_Timer1_old_time+0x3>
     242:	67 c0       	rjmp	.+206    	; 0x312 <timers_init+0x116>
	}// timer_number = 1

	else if(config->timer_number == 3)
     244:	93 30       	cpi	r25, 0x03	; 3
     246:	01 f5       	brne	.+64     	; 0x288 <timers_init+0x8c>
	{
		// off all the modes of  first config register on timer
		TIMER3_CONGFIG_A = 0X00;
     248:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
		//External counter on T1 and set the Top vale is OCRnA
		TIMER3_CONGFIG_B = 0x0E;
     24c:	8e e0       	ldi	r24, 0x0E	; 14
     24e:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>
		// number of Encoder Tick for Each interrupt
		TIMER3_COMPARE = config->ticks - 1;
     252:	80 81       	ld	r24, Z
     254:	91 81       	ldd	r25, Z+1	; 0x01
     256:	01 97       	sbiw	r24, 0x01	; 1
     258:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
     25c:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>
		// Enable interrupt Bit on the timer Mask
		SET_BIT(TIMER3_INTERUPT, TIMER3_COMPARE_INT);
     260:	a1 e7       	ldi	r26, 0x71	; 113
     262:	b0 e0       	ldi	r27, 0x00	; 0
     264:	8c 91       	ld	r24, X
     266:	82 60       	ori	r24, 0x02	; 2
     268:	8c 93       	st	X, r24
		// copy the config parameter to Timer stuct
		g_timer3_config = config;
     26a:	f0 93 d4 0d 	sts	0x0DD4, r31	; 0x800dd4 <g_timer3_config+0x1>
     26e:	e0 93 d3 0d 	sts	0x0DD3, r30	; 0x800dd3 <g_timer3_config>
		// set the time before get ticks ISR time
		g_Timer3_old_time = Get_millis();
     272:	0e 94 f5 20 	call	0x41ea	; 0x41ea <Get_millis>
     276:	60 93 cf 0d 	sts	0x0DCF, r22	; 0x800dcf <g_Timer3_old_time>
     27a:	70 93 d0 0d 	sts	0x0DD0, r23	; 0x800dd0 <g_Timer3_old_time+0x1>
     27e:	80 93 d1 0d 	sts	0x0DD1, r24	; 0x800dd1 <g_Timer3_old_time+0x2>
     282:	90 93 d2 0d 	sts	0x0DD2, r25	; 0x800dd2 <g_Timer3_old_time+0x3>
     286:	45 c0       	rjmp	.+138    	; 0x312 <timers_init+0x116>
	}//timer_number = 3
	else if(config->timer_number == 4){
     288:	94 30       	cpi	r25, 0x04	; 4
     28a:	01 f5       	brne	.+64     	; 0x2cc <timers_init+0xd0>
		// off all the modes of  first config register on timer
		TIMER4_CONGFIG_A = 0X00;
     28c:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
		// External counter on T1 and set the Top vale is OCRnA
		TIMER4_CONGFIG_B = 0x0E;
     290:	8e e0       	ldi	r24, 0x0E	; 14
     292:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>
		// number of Encoder Tick for Each interrupt
		TIMER4_COMPARE = config->ticks - 1;
     296:	80 81       	ld	r24, Z
     298:	91 81       	ldd	r25, Z+1	; 0x01
     29a:	01 97       	sbiw	r24, 0x01	; 1
     29c:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
     2a0:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
		// Enable interrupt Bit on the timer Mask
		SET_BIT(TIMER5_INTERUPT, TIMER5_COMPARE_INT);
     2a4:	a3 e7       	ldi	r26, 0x73	; 115
     2a6:	b0 e0       	ldi	r27, 0x00	; 0
     2a8:	8c 91       	ld	r24, X
     2aa:	82 60       	ori	r24, 0x02	; 2
     2ac:	8c 93       	st	X, r24
		// copy the config parameter to Timer stuct
		g_timer4_config = config;
     2ae:	f0 93 e6 0d 	sts	0x0DE6, r31	; 0x800de6 <g_timer4_config+0x1>
     2b2:	e0 93 e5 0d 	sts	0x0DE5, r30	; 0x800de5 <g_timer4_config>
		// set the time before get ticks ISR time
		g_Timer4_old_time = Get_millis();
     2b6:	0e 94 f5 20 	call	0x41ea	; 0x41ea <Get_millis>
     2ba:	60 93 f1 0d 	sts	0x0DF1, r22	; 0x800df1 <g_Timer4_old_time>
     2be:	70 93 f2 0d 	sts	0x0DF2, r23	; 0x800df2 <g_Timer4_old_time+0x1>
     2c2:	80 93 f3 0d 	sts	0x0DF3, r24	; 0x800df3 <g_Timer4_old_time+0x2>
     2c6:	90 93 f4 0d 	sts	0x0DF4, r25	; 0x800df4 <g_Timer4_old_time+0x3>
     2ca:	23 c0       	rjmp	.+70     	; 0x312 <timers_init+0x116>
	}//timer_number = 4

	else if(config->timer_number == 5){
     2cc:	95 30       	cpi	r25, 0x05	; 5
     2ce:	21 f5       	brne	.+72     	; 0x318 <timers_init+0x11c>
		// off all the modes of  first config register on timer
		TIMER5_CONGFIG_A = 0X00;
     2d0:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
		//  External counter on T1 and set the Top vale is OCRnA
		TIMER5_CONGFIG_B = 0x0E;
     2d4:	8e e0       	ldi	r24, 0x0E	; 14
     2d6:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <__TEXT_REGION_LENGTH__+0x700121>
		//number of Encoder Tick for Each interrupt
		TIMER5_COMPARE = config->ticks - 1;
     2da:	80 81       	ld	r24, Z
     2dc:	91 81       	ldd	r25, Z+1	; 0x01
     2de:	01 97       	sbiw	r24, 0x01	; 1
     2e0:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
     2e4:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
		// Enable interrupt Bit on the timer Mask
		SET_BIT(TIMER5_INTERUPT, TIMER5_COMPARE_INT);
     2e8:	a3 e7       	ldi	r26, 0x73	; 115
     2ea:	b0 e0       	ldi	r27, 0x00	; 0
     2ec:	8c 91       	ld	r24, X
     2ee:	82 60       	ori	r24, 0x02	; 2
     2f0:	8c 93       	st	X, r24
		// copy the config parameter to Timer stuct
		g_timer5_config = config;
     2f2:	f0 93 fa 0d 	sts	0x0DFA, r31	; 0x800dfa <g_timer5_config+0x1>
     2f6:	e0 93 f9 0d 	sts	0x0DF9, r30	; 0x800df9 <g_timer5_config>
		// set the time before get ticks ISR time
		g_Timer5_old_time = Get_millis();
     2fa:	0e 94 f5 20 	call	0x41ea	; 0x41ea <Get_millis>
     2fe:	60 93 d9 0d 	sts	0x0DD9, r22	; 0x800dd9 <g_Timer5_old_time>
     302:	70 93 da 0d 	sts	0x0DDA, r23	; 0x800dda <g_Timer5_old_time+0x1>
     306:	80 93 db 0d 	sts	0x0DDB, r24	; 0x800ddb <g_Timer5_old_time+0x2>
     30a:	90 93 dc 0d 	sts	0x0DDC, r25	; 0x800ddc <g_Timer5_old_time+0x3>
		//Clear the counter number
		TIMER5_COUNT_L = 0;
     30e:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <__TEXT_REGION_LENGTH__+0x700124>
	{
		//Error the timer number not valid
		return -1;
	}// Else

    sei();
     312:	78 94       	sei
    return 1;// Setup done ok
     314:	81 e0       	ldi	r24, 0x01	; 1
     316:	08 95       	ret
	}//timer_number = 5

	else
	{
		//Error the timer number not valid
		return -1;
     318:	8f ef       	ldi	r24, 0xFF	; 255
	}// Else

    sei();
    return 1;// Setup done ok
}//timer_init
     31a:	08 95       	ret

0000031c <__vector_17>:

// intruptted service routine when we have rech the number of  Ticks On Encoder
ISR(TIMER1_COMPA_vect)
{
     31c:	1f 92       	push	r1
     31e:	0f 92       	push	r0
     320:	0f b6       	in	r0, 0x3f	; 63
     322:	0f 92       	push	r0
     324:	11 24       	eor	r1, r1
     326:	0b b6       	in	r0, 0x3b	; 59
     328:	0f 92       	push	r0
     32a:	cf 92       	push	r12
     32c:	df 92       	push	r13
     32e:	ef 92       	push	r14
     330:	ff 92       	push	r15
     332:	0f 93       	push	r16
     334:	1f 93       	push	r17
     336:	2f 93       	push	r18
     338:	3f 93       	push	r19
     33a:	4f 93       	push	r20
     33c:	5f 93       	push	r21
     33e:	6f 93       	push	r22
     340:	7f 93       	push	r23
     342:	8f 93       	push	r24
     344:	9f 93       	push	r25
     346:	af 93       	push	r26
     348:	bf 93       	push	r27
     34a:	ef 93       	push	r30
     34c:	ff 93       	push	r31
	// get the time now
	g_Timer1_new_time = Get_millis();
     34e:	0e 94 f5 20 	call	0x41ea	; 0x41ea <Get_millis>
     352:	8b 01       	movw	r16, r22
     354:	9c 01       	movw	r18, r24
     356:	60 93 f5 0d 	sts	0x0DF5, r22	; 0x800df5 <g_Timer1_new_time>
     35a:	70 93 f6 0d 	sts	0x0DF6, r23	; 0x800df6 <g_Timer1_new_time+0x1>
     35e:	80 93 f7 0d 	sts	0x0DF7, r24	; 0x800df7 <g_Timer1_new_time+0x2>
     362:	90 93 f8 0d 	sts	0x0DF8, r25	; 0x800df8 <g_Timer1_new_time+0x3>
	// calculate the diff between now and last interrupt
	g_diff_time = g_Timer1_new_time - g_Timer1_old_time;
     366:	40 91 d5 0d 	lds	r20, 0x0DD5	; 0x800dd5 <g_Timer1_old_time>
     36a:	50 91 d6 0d 	lds	r21, 0x0DD6	; 0x800dd6 <g_Timer1_old_time+0x1>
     36e:	60 91 d7 0d 	lds	r22, 0x0DD7	; 0x800dd7 <g_Timer1_old_time+0x2>
     372:	70 91 d8 0d 	lds	r23, 0x0DD8	; 0x800dd8 <g_Timer1_old_time+0x3>
     376:	68 01       	movw	r12, r16
     378:	79 01       	movw	r14, r18
     37a:	c4 1a       	sub	r12, r20
     37c:	d5 0a       	sbc	r13, r21
     37e:	e6 0a       	sbc	r14, r22
     380:	f7 0a       	sbc	r15, r23
     382:	c7 01       	movw	r24, r14
     384:	b6 01       	movw	r22, r12
     386:	c0 92 dd 0d 	sts	0x0DDD, r12	; 0x800ddd <g_diff_time>
     38a:	d0 92 de 0d 	sts	0x0DDE, r13	; 0x800dde <g_diff_time+0x1>
     38e:	e0 92 df 0d 	sts	0x0DDF, r14	; 0x800ddf <g_diff_time+0x2>
     392:	f0 92 e0 0d 	sts	0x0DE0, r15	; 0x800de0 <g_diff_time+0x3>
	// save the to the old time to next interrupt
	g_Timer1_old_time = g_Timer1_new_time;
     396:	00 93 d5 0d 	sts	0x0DD5, r16	; 0x800dd5 <g_Timer1_old_time>
     39a:	10 93 d6 0d 	sts	0x0DD6, r17	; 0x800dd6 <g_Timer1_old_time+0x1>
     39e:	20 93 d7 0d 	sts	0x0DD7, r18	; 0x800dd7 <g_Timer1_old_time+0x2>
     3a2:	30 93 d8 0d 	sts	0x0DD8, r19	; 0x800dd8 <g_Timer1_old_time+0x3>
	//call back function on upper layer to get time
	g_timer1_config->isr_call_back(g_diff_time);
     3a6:	e0 91 ef 0d 	lds	r30, 0x0DEF	; 0x800def <g_timer1_config>
     3aa:	f0 91 f0 0d 	lds	r31, 0x0DF0	; 0x800df0 <g_timer1_config+0x1>
     3ae:	02 80       	ldd	r0, Z+2	; 0x02
     3b0:	f3 81       	ldd	r31, Z+3	; 0x03
     3b2:	e0 2d       	mov	r30, r0
     3b4:	19 95       	eicall
}
     3b6:	ff 91       	pop	r31
     3b8:	ef 91       	pop	r30
     3ba:	bf 91       	pop	r27
     3bc:	af 91       	pop	r26
     3be:	9f 91       	pop	r25
     3c0:	8f 91       	pop	r24
     3c2:	7f 91       	pop	r23
     3c4:	6f 91       	pop	r22
     3c6:	5f 91       	pop	r21
     3c8:	4f 91       	pop	r20
     3ca:	3f 91       	pop	r19
     3cc:	2f 91       	pop	r18
     3ce:	1f 91       	pop	r17
     3d0:	0f 91       	pop	r16
     3d2:	ff 90       	pop	r15
     3d4:	ef 90       	pop	r14
     3d6:	df 90       	pop	r13
     3d8:	cf 90       	pop	r12
     3da:	0f 90       	pop	r0
     3dc:	0b be       	out	0x3b, r0	; 59
     3de:	0f 90       	pop	r0
     3e0:	0f be       	out	0x3f, r0	; 63
     3e2:	0f 90       	pop	r0
     3e4:	1f 90       	pop	r1
     3e6:	18 95       	reti

000003e8 <__vector_32>:
// intruptted service routine when we have rech the number of  Ticks On Encoder
ISR(TIMER3_COMPA_vect)
{
     3e8:	1f 92       	push	r1
     3ea:	0f 92       	push	r0
     3ec:	0f b6       	in	r0, 0x3f	; 63
     3ee:	0f 92       	push	r0
     3f0:	11 24       	eor	r1, r1
     3f2:	0b b6       	in	r0, 0x3b	; 59
     3f4:	0f 92       	push	r0
     3f6:	cf 92       	push	r12
     3f8:	df 92       	push	r13
     3fa:	ef 92       	push	r14
     3fc:	ff 92       	push	r15
     3fe:	0f 93       	push	r16
     400:	1f 93       	push	r17
     402:	2f 93       	push	r18
     404:	3f 93       	push	r19
     406:	4f 93       	push	r20
     408:	5f 93       	push	r21
     40a:	6f 93       	push	r22
     40c:	7f 93       	push	r23
     40e:	8f 93       	push	r24
     410:	9f 93       	push	r25
     412:	af 93       	push	r26
     414:	bf 93       	push	r27
     416:	ef 93       	push	r30
     418:	ff 93       	push	r31
	// get the time now
	g_Timer3_new_time = Get_millis();
     41a:	0e 94 f5 20 	call	0x41ea	; 0x41ea <Get_millis>
     41e:	8b 01       	movw	r16, r22
     420:	9c 01       	movw	r18, r24
     422:	60 93 eb 0d 	sts	0x0DEB, r22	; 0x800deb <g_Timer3_new_time>
     426:	70 93 ec 0d 	sts	0x0DEC, r23	; 0x800dec <g_Timer3_new_time+0x1>
     42a:	80 93 ed 0d 	sts	0x0DED, r24	; 0x800ded <g_Timer3_new_time+0x2>
     42e:	90 93 ee 0d 	sts	0x0DEE, r25	; 0x800dee <g_Timer3_new_time+0x3>
	// calculate the diff between now and last interrupt
	g_diff_time = g_Timer3_new_time - g_Timer3_old_time;
     432:	40 91 cf 0d 	lds	r20, 0x0DCF	; 0x800dcf <g_Timer3_old_time>
     436:	50 91 d0 0d 	lds	r21, 0x0DD0	; 0x800dd0 <g_Timer3_old_time+0x1>
     43a:	60 91 d1 0d 	lds	r22, 0x0DD1	; 0x800dd1 <g_Timer3_old_time+0x2>
     43e:	70 91 d2 0d 	lds	r23, 0x0DD2	; 0x800dd2 <g_Timer3_old_time+0x3>
     442:	68 01       	movw	r12, r16
     444:	79 01       	movw	r14, r18
     446:	c4 1a       	sub	r12, r20
     448:	d5 0a       	sbc	r13, r21
     44a:	e6 0a       	sbc	r14, r22
     44c:	f7 0a       	sbc	r15, r23
     44e:	c7 01       	movw	r24, r14
     450:	b6 01       	movw	r22, r12
     452:	c0 92 dd 0d 	sts	0x0DDD, r12	; 0x800ddd <g_diff_time>
     456:	d0 92 de 0d 	sts	0x0DDE, r13	; 0x800dde <g_diff_time+0x1>
     45a:	e0 92 df 0d 	sts	0x0DDF, r14	; 0x800ddf <g_diff_time+0x2>
     45e:	f0 92 e0 0d 	sts	0x0DE0, r15	; 0x800de0 <g_diff_time+0x3>
	// save the to the old time to next interrupt
	g_Timer3_old_time = g_Timer3_new_time;
     462:	00 93 cf 0d 	sts	0x0DCF, r16	; 0x800dcf <g_Timer3_old_time>
     466:	10 93 d0 0d 	sts	0x0DD0, r17	; 0x800dd0 <g_Timer3_old_time+0x1>
     46a:	20 93 d1 0d 	sts	0x0DD1, r18	; 0x800dd1 <g_Timer3_old_time+0x2>
     46e:	30 93 d2 0d 	sts	0x0DD2, r19	; 0x800dd2 <g_Timer3_old_time+0x3>
	//call back function on upper layer to get time
	g_timer3_config->isr_call_back(g_diff_time);
     472:	e0 91 d3 0d 	lds	r30, 0x0DD3	; 0x800dd3 <g_timer3_config>
     476:	f0 91 d4 0d 	lds	r31, 0x0DD4	; 0x800dd4 <g_timer3_config+0x1>
     47a:	02 80       	ldd	r0, Z+2	; 0x02
     47c:	f3 81       	ldd	r31, Z+3	; 0x03
     47e:	e0 2d       	mov	r30, r0
     480:	19 95       	eicall
}
     482:	ff 91       	pop	r31
     484:	ef 91       	pop	r30
     486:	bf 91       	pop	r27
     488:	af 91       	pop	r26
     48a:	9f 91       	pop	r25
     48c:	8f 91       	pop	r24
     48e:	7f 91       	pop	r23
     490:	6f 91       	pop	r22
     492:	5f 91       	pop	r21
     494:	4f 91       	pop	r20
     496:	3f 91       	pop	r19
     498:	2f 91       	pop	r18
     49a:	1f 91       	pop	r17
     49c:	0f 91       	pop	r16
     49e:	ff 90       	pop	r15
     4a0:	ef 90       	pop	r14
     4a2:	df 90       	pop	r13
     4a4:	cf 90       	pop	r12
     4a6:	0f 90       	pop	r0
     4a8:	0b be       	out	0x3b, r0	; 59
     4aa:	0f 90       	pop	r0
     4ac:	0f be       	out	0x3f, r0	; 63
     4ae:	0f 90       	pop	r0
     4b0:	1f 90       	pop	r1
     4b2:	18 95       	reti

000004b4 <__vector_42>:
// intruptted service routine when we have rech the number of  Ticks On Encoder
ISR(TIMER4_COMPA_vect)
{
     4b4:	1f 92       	push	r1
     4b6:	0f 92       	push	r0
     4b8:	0f b6       	in	r0, 0x3f	; 63
     4ba:	0f 92       	push	r0
     4bc:	11 24       	eor	r1, r1
     4be:	0b b6       	in	r0, 0x3b	; 59
     4c0:	0f 92       	push	r0
     4c2:	cf 92       	push	r12
     4c4:	df 92       	push	r13
     4c6:	ef 92       	push	r14
     4c8:	ff 92       	push	r15
     4ca:	0f 93       	push	r16
     4cc:	1f 93       	push	r17
     4ce:	2f 93       	push	r18
     4d0:	3f 93       	push	r19
     4d2:	4f 93       	push	r20
     4d4:	5f 93       	push	r21
     4d6:	6f 93       	push	r22
     4d8:	7f 93       	push	r23
     4da:	8f 93       	push	r24
     4dc:	9f 93       	push	r25
     4de:	af 93       	push	r26
     4e0:	bf 93       	push	r27
     4e2:	ef 93       	push	r30
     4e4:	ff 93       	push	r31
	// get the time now
	g_Timer4_new_time = Get_millis();
     4e6:	0e 94 f5 20 	call	0x41ea	; 0x41ea <Get_millis>
     4ea:	8b 01       	movw	r16, r22
     4ec:	9c 01       	movw	r18, r24
     4ee:	60 93 e1 0d 	sts	0x0DE1, r22	; 0x800de1 <g_Timer4_new_time>
     4f2:	70 93 e2 0d 	sts	0x0DE2, r23	; 0x800de2 <g_Timer4_new_time+0x1>
     4f6:	80 93 e3 0d 	sts	0x0DE3, r24	; 0x800de3 <g_Timer4_new_time+0x2>
     4fa:	90 93 e4 0d 	sts	0x0DE4, r25	; 0x800de4 <g_Timer4_new_time+0x3>
	// calculate the diff between now and last interrupt
	g_diff_time = g_Timer4_new_time - g_Timer4_old_time;
     4fe:	40 91 f1 0d 	lds	r20, 0x0DF1	; 0x800df1 <g_Timer4_old_time>
     502:	50 91 f2 0d 	lds	r21, 0x0DF2	; 0x800df2 <g_Timer4_old_time+0x1>
     506:	60 91 f3 0d 	lds	r22, 0x0DF3	; 0x800df3 <g_Timer4_old_time+0x2>
     50a:	70 91 f4 0d 	lds	r23, 0x0DF4	; 0x800df4 <g_Timer4_old_time+0x3>
     50e:	68 01       	movw	r12, r16
     510:	79 01       	movw	r14, r18
     512:	c4 1a       	sub	r12, r20
     514:	d5 0a       	sbc	r13, r21
     516:	e6 0a       	sbc	r14, r22
     518:	f7 0a       	sbc	r15, r23
     51a:	c7 01       	movw	r24, r14
     51c:	b6 01       	movw	r22, r12
     51e:	c0 92 dd 0d 	sts	0x0DDD, r12	; 0x800ddd <g_diff_time>
     522:	d0 92 de 0d 	sts	0x0DDE, r13	; 0x800dde <g_diff_time+0x1>
     526:	e0 92 df 0d 	sts	0x0DDF, r14	; 0x800ddf <g_diff_time+0x2>
     52a:	f0 92 e0 0d 	sts	0x0DE0, r15	; 0x800de0 <g_diff_time+0x3>
	// save the to the old time to next interrupt
	g_Timer4_old_time = g_Timer4_new_time;
     52e:	00 93 f1 0d 	sts	0x0DF1, r16	; 0x800df1 <g_Timer4_old_time>
     532:	10 93 f2 0d 	sts	0x0DF2, r17	; 0x800df2 <g_Timer4_old_time+0x1>
     536:	20 93 f3 0d 	sts	0x0DF3, r18	; 0x800df3 <g_Timer4_old_time+0x2>
     53a:	30 93 f4 0d 	sts	0x0DF4, r19	; 0x800df4 <g_Timer4_old_time+0x3>
	//call back function on upper layer to get time
	g_timer4_config->isr_call_back(g_diff_time);
     53e:	e0 91 e5 0d 	lds	r30, 0x0DE5	; 0x800de5 <g_timer4_config>
     542:	f0 91 e6 0d 	lds	r31, 0x0DE6	; 0x800de6 <g_timer4_config+0x1>
     546:	02 80       	ldd	r0, Z+2	; 0x02
     548:	f3 81       	ldd	r31, Z+3	; 0x03
     54a:	e0 2d       	mov	r30, r0
     54c:	19 95       	eicall
}
     54e:	ff 91       	pop	r31
     550:	ef 91       	pop	r30
     552:	bf 91       	pop	r27
     554:	af 91       	pop	r26
     556:	9f 91       	pop	r25
     558:	8f 91       	pop	r24
     55a:	7f 91       	pop	r23
     55c:	6f 91       	pop	r22
     55e:	5f 91       	pop	r21
     560:	4f 91       	pop	r20
     562:	3f 91       	pop	r19
     564:	2f 91       	pop	r18
     566:	1f 91       	pop	r17
     568:	0f 91       	pop	r16
     56a:	ff 90       	pop	r15
     56c:	ef 90       	pop	r14
     56e:	df 90       	pop	r13
     570:	cf 90       	pop	r12
     572:	0f 90       	pop	r0
     574:	0b be       	out	0x3b, r0	; 59
     576:	0f 90       	pop	r0
     578:	0f be       	out	0x3f, r0	; 63
     57a:	0f 90       	pop	r0
     57c:	1f 90       	pop	r1
     57e:	18 95       	reti

00000580 <__vector_47>:
// intruptted service routine when we have rech the number of  Ticks On Encoder
ISR(TIMER5_COMPA_vect)
{
     580:	1f 92       	push	r1
     582:	0f 92       	push	r0
     584:	0f b6       	in	r0, 0x3f	; 63
     586:	0f 92       	push	r0
     588:	11 24       	eor	r1, r1
     58a:	0b b6       	in	r0, 0x3b	; 59
     58c:	0f 92       	push	r0
     58e:	2f 93       	push	r18
     590:	3f 93       	push	r19
     592:	4f 93       	push	r20
     594:	5f 93       	push	r21
     596:	6f 93       	push	r22
     598:	7f 93       	push	r23
     59a:	8f 93       	push	r24
     59c:	9f 93       	push	r25
     59e:	af 93       	push	r26
     5a0:	bf 93       	push	r27
     5a2:	ef 93       	push	r30
     5a4:	ff 93       	push	r31
	// calculate the diff between now and last interrupt
	g_diff_time = g_Timer5_new_time - g_Timer5_old_time;
	// save the to the old time to next interrupt
	g_Timer5_old_time = g_Timer5_new_time;*/
	// clear the counter
	UART0_putc('a');
     5a6:	81 e6       	ldi	r24, 0x61	; 97
     5a8:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <UART0_putc>
	TIMER5_COUNT_L = 0;
     5ac:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <__TEXT_REGION_LENGTH__+0x700124>
	//call back function on upper layer to get time
	g_timer5_config->isr_call_back(g_diff_time);
     5b0:	60 91 dd 0d 	lds	r22, 0x0DDD	; 0x800ddd <g_diff_time>
     5b4:	70 91 de 0d 	lds	r23, 0x0DDE	; 0x800dde <g_diff_time+0x1>
     5b8:	80 91 df 0d 	lds	r24, 0x0DDF	; 0x800ddf <g_diff_time+0x2>
     5bc:	90 91 e0 0d 	lds	r25, 0x0DE0	; 0x800de0 <g_diff_time+0x3>
     5c0:	e0 91 f9 0d 	lds	r30, 0x0DF9	; 0x800df9 <g_timer5_config>
     5c4:	f0 91 fa 0d 	lds	r31, 0x0DFA	; 0x800dfa <g_timer5_config+0x1>
     5c8:	02 80       	ldd	r0, Z+2	; 0x02
     5ca:	f3 81       	ldd	r31, Z+3	; 0x03
     5cc:	e0 2d       	mov	r30, r0
     5ce:	19 95       	eicall
	
}
     5d0:	ff 91       	pop	r31
     5d2:	ef 91       	pop	r30
     5d4:	bf 91       	pop	r27
     5d6:	af 91       	pop	r26
     5d8:	9f 91       	pop	r25
     5da:	8f 91       	pop	r24
     5dc:	7f 91       	pop	r23
     5de:	6f 91       	pop	r22
     5e0:	5f 91       	pop	r21
     5e2:	4f 91       	pop	r20
     5e4:	3f 91       	pop	r19
     5e6:	2f 91       	pop	r18
     5e8:	0f 90       	pop	r0
     5ea:	0b be       	out	0x3b, r0	; 59
     5ec:	0f 90       	pop	r0
     5ee:	0f be       	out	0x3f, r0	; 63
     5f0:	0f 90       	pop	r0
     5f2:	1f 90       	pop	r1
     5f4:	18 95       	reti

000005f6 <flowrate_feeding_callback>:
{
	/*
	*	this function is called back from the isr to increment the liters counter .
	*/
  // call the feeding operation callback .
     feeding_operation_callback();
     5f6:	e0 91 fb 0d 	lds	r30, 0x0DFB	; 0x800dfb <feeding_operation_callback>
     5fa:	f0 91 fc 0d 	lds	r31, 0x0DFC	; 0x800dfc <feeding_operation_callback+0x1>
     5fe:	19 95       	eicall
     600:	08 95       	ret

00000602 <flowrate_outing_callback>:
{
	/*
	*	this function is called back from the isr to increment the liters counter .
	*/
  // call the feeding operation callback .
     out_operation_callback();
     602:	e0 91 fd 0d 	lds	r30, 0x0DFD	; 0x800dfd <out_operation_callback>
     606:	f0 91 fe 0d 	lds	r31, 0x0DFE	; 0x800dfe <out_operation_callback+0x1>
     60a:	19 95       	eicall
     60c:	08 95       	ret

0000060e <Flow_rate_init>:
// structs to hold the timers config .
g_Timer_Config feeding_configeration;
g_Timer_Config outing_configeration;

void Flow_rate_init(void (*callback1)(void) , void (*callback2)(void)) 
{
     60e:	cf 92       	push	r12
     610:	df 92       	push	r13
     612:	ef 92       	push	r14
     614:	ff 92       	push	r15
     616:	0f 93       	push	r16
     618:	1f 93       	push	r17
     61a:	cf 93       	push	r28
     61c:	df 93       	push	r29
     61e:	6c 01       	movw	r12, r24
     620:	7b 01       	movw	r14, r22
	
	feeding_configeration.ticks = TICKS_FOR_HALF_LITER ;
     622:	c4 e0       	ldi	r28, 0x04	; 4
     624:	de e0       	ldi	r29, 0x0E	; 14
     626:	00 ef       	ldi	r16, 0xF0	; 240
     628:	10 e0       	ldi	r17, 0x00	; 0
     62a:	19 83       	std	Y+1, r17	; 0x01
     62c:	08 83       	st	Y, r16
	feeding_configeration.timer_number = 1 ;
     62e:	81 e0       	ldi	r24, 0x01	; 1
     630:	8c 83       	std	Y+4, r24	; 0x04
	feeding_configeration.isr_call_back = flowrate_feeding_callback ;
     632:	8b ef       	ldi	r24, 0xFB	; 251
     634:	92 e0       	ldi	r25, 0x02	; 2
     636:	9b 83       	std	Y+3, r25	; 0x03
     638:	8a 83       	std	Y+2, r24	; 0x02
	
	// initialize the needed timer with the previous config .
    timers_init(&feeding_configeration);
     63a:	ce 01       	movw	r24, r28
     63c:	df dd       	rcall	.-1090   	; 0x1fc <timers_init>
	
	// initialize other timer for the second flow rate .
	feeding_configeration.ticks = TICKS_FOR_HALF_LITER ;
     63e:	19 83       	std	Y+1, r17	; 0x01
     640:	08 83       	st	Y, r16
	feeding_configeration.timer_number = 3 ;
     642:	83 e0       	ldi	r24, 0x03	; 3
     644:	8c 83       	std	Y+4, r24	; 0x04
	feeding_configeration.isr_call_back = flowrate_outing_callback ;
     646:	81 e0       	ldi	r24, 0x01	; 1
     648:	93 e0       	ldi	r25, 0x03	; 3
     64a:	9b 83       	std	Y+3, r25	; 0x03
     64c:	8a 83       	std	Y+2, r24	; 0x02
	
	// initialize the needed timer with the previous config .
	timers_init(&outing_configeration);
     64e:	8f ef       	ldi	r24, 0xFF	; 255
     650:	9d e0       	ldi	r25, 0x0D	; 13
     652:	d4 dd       	rcall	.-1112   	; 0x1fc <timers_init>
	feeding_operation_callback = callback1;
     654:	d0 92 fc 0d 	sts	0x0DFC, r13	; 0x800dfc <feeding_operation_callback+0x1>
     658:	c0 92 fb 0d 	sts	0x0DFB, r12	; 0x800dfb <feeding_operation_callback>
	out_operation_callback = callback2 ;
     65c:	f0 92 fe 0d 	sts	0x0DFE, r15	; 0x800dfe <out_operation_callback+0x1>
     660:	e0 92 fd 0d 	sts	0x0DFD, r14	; 0x800dfd <out_operation_callback>
	DIO_init();
     664:	0e 94 61 0d 	call	0x1ac2	; 0x1ac2 <DIO_init>
}
     668:	df 91       	pop	r29
     66a:	cf 91       	pop	r28
     66c:	1f 91       	pop	r17
     66e:	0f 91       	pop	r16
     670:	ff 90       	pop	r15
     672:	ef 90       	pop	r14
     674:	df 90       	pop	r13
     676:	cf 90       	pop	r12
     678:	08 95       	ret

0000067a <LCD_post_transmission>:

//
void Lcd_Write(uint16_t address, uint16_t value){
	Modbus_Set_transmit_buffer(LCD,0, value);
    Modbus_Write_multiple_registers(LCD,address, 0x01);
}
     67a:	60 e0       	ldi	r22, 0x00	; 0
     67c:	80 e0       	ldi	r24, 0x00	; 0
     67e:	0c 94 b7 0d 	jmp	0x1b6e	; 0x1b6e <Modbus_change_state>
     682:	08 95       	ret

00000684 <LCD_pre_transmission>:
     684:	61 e0       	ldi	r22, 0x01	; 1
     686:	80 e0       	ldi	r24, 0x00	; 0
     688:	0c 94 b7 0d 	jmp	0x1b6e	; 0x1b6e <Modbus_change_state>
     68c:	08 95       	ret

0000068e <Lcd_init>:
     68e:	ec ef       	ldi	r30, 0xFC	; 252
     690:	f2 e0       	ldi	r31, 0x02	; 2
     692:	20 83       	st	Z, r18
     694:	81 83       	std	Z+1, r24	; 0x01
     696:	42 83       	std	Z+2, r20	; 0x02
     698:	53 83       	std	Z+3, r21	; 0x03
     69a:	64 83       	std	Z+4, r22	; 0x04
     69c:	75 83       	std	Z+5, r23	; 0x05
     69e:	82 e4       	ldi	r24, 0x42	; 66
     6a0:	93 e0       	ldi	r25, 0x03	; 3
     6a2:	97 83       	std	Z+7, r25	; 0x07
     6a4:	86 83       	std	Z+6, r24	; 0x06
     6a6:	8d e3       	ldi	r24, 0x3D	; 61
     6a8:	93 e0       	ldi	r25, 0x03	; 3
     6aa:	91 87       	std	Z+9, r25	; 0x09
     6ac:	80 87       	std	Z+8, r24	; 0x08
     6ae:	bf 01       	movw	r22, r30
     6b0:	80 e0       	ldi	r24, 0x00	; 0
     6b2:	f2 c6       	rjmp	.+3556   	; 0x1498 <Modbus_init>
     6b4:	08 95       	ret

000006b6 <Lcd_Read_multiple_data>:
 *
 *                    LCD Multiple Data functions 
 * 
************************************************************************************************************/

uint8_t Lcd_Read_multiple_data(uint16_t address ,uint16_t *pData,uint8_t QTY){
     6b6:	ff 92       	push	r15
     6b8:	0f 93       	push	r16
     6ba:	1f 93       	push	r17
     6bc:	cf 93       	push	r28
     6be:	df 93       	push	r29
     6c0:	f6 2e       	mov	r15, r22
     6c2:	c7 2f       	mov	r28, r23
     6c4:	d4 2f       	mov	r29, r20
	uint8_t err = Modbus_Read_holding_registers(LCD,address,QTY);
     6c6:	50 e0       	ldi	r21, 0x00	; 0
     6c8:	bc 01       	movw	r22, r24
     6ca:	80 e0       	ldi	r24, 0x00	; 0
     6cc:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <Modbus_Read_holding_registers>
	if(err == 0){
     6d0:	81 11       	cpse	r24, r1
     6d2:	12 c0       	rjmp	.+36     	; 0x6f8 <Lcd_Read_multiple_data+0x42>
		for(uint8_t i=0; i<QTY;i++){
     6d4:	dd 23       	and	r29, r29
     6d6:	79 f0       	breq	.+30     	; 0x6f6 <Lcd_Read_multiple_data+0x40>
     6d8:	0f 2d       	mov	r16, r15
     6da:	1c 2f       	mov	r17, r28
     6dc:	c0 e0       	ldi	r28, 0x00	; 0
			(*(pData+i)) = Modbus_Get_response_buffer(LCD,i);
     6de:	6c 2f       	mov	r22, r28
     6e0:	80 e0       	ldi	r24, 0x00	; 0
     6e2:	c8 d7       	rcall	.+3984   	; 0x1674 <Modbus_Get_response_buffer>
     6e4:	f8 01       	movw	r30, r16
     6e6:	81 93       	st	Z+, r24
     6e8:	91 93       	st	Z+, r25
     6ea:	8f 01       	movw	r16, r30
************************************************************************************************************/

uint8_t Lcd_Read_multiple_data(uint16_t address ,uint16_t *pData,uint8_t QTY){
	uint8_t err = Modbus_Read_holding_registers(LCD,address,QTY);
	if(err == 0){
		for(uint8_t i=0; i<QTY;i++){
     6ec:	cf 5f       	subi	r28, 0xFF	; 255
     6ee:	dc 13       	cpse	r29, r28
     6f0:	f6 cf       	rjmp	.-20     	; 0x6de <Lcd_Read_multiple_data+0x28>
			(*(pData+i)) = Modbus_Get_response_buffer(LCD,i);
		}
		return LCD_OK;	
     6f2:	80 e0       	ldi	r24, 0x00	; 0
     6f4:	01 c0       	rjmp	.+2      	; 0x6f8 <Lcd_Read_multiple_data+0x42>
     6f6:	80 e0       	ldi	r24, 0x00	; 0
	}
	else {
		return err;
	}

}
     6f8:	df 91       	pop	r29
     6fa:	cf 91       	pop	r28
     6fc:	1f 91       	pop	r17
     6fe:	0f 91       	pop	r16
     700:	ff 90       	pop	r15
     702:	08 95       	ret

00000704 <Lcd_Write_multiple_data>:

uint8_t Lcd_Write_multiple_data(uint16_t address ,uint16_t *pData,uint8_t QTY){
     704:	ef 92       	push	r14
     706:	ff 92       	push	r15
     708:	0f 93       	push	r16
     70a:	1f 93       	push	r17
     70c:	cf 93       	push	r28
     70e:	df 93       	push	r29
     710:	7c 01       	movw	r14, r24
     712:	d4 2f       	mov	r29, r20
	for(uint8_t i=0;i<QTY;i++){
     714:	44 23       	and	r20, r20
     716:	69 f0       	breq	.+26     	; 0x732 <Lcd_Write_multiple_data+0x2e>
     718:	06 2f       	mov	r16, r22
     71a:	17 2f       	mov	r17, r23
     71c:	c0 e0       	ldi	r28, 0x00	; 0
		Modbus_Set_transmit_buffer(LCD,i, (*(pData+i)));
     71e:	f8 01       	movw	r30, r16
     720:	41 91       	ld	r20, Z+
     722:	51 91       	ld	r21, Z+
     724:	8f 01       	movw	r16, r30
     726:	6c 2f       	mov	r22, r28
     728:	80 e0       	ldi	r24, 0x00	; 0
     72a:	c7 d7       	rcall	.+3982   	; 0x16ba <Modbus_Set_transmit_buffer>
	}

}

uint8_t Lcd_Write_multiple_data(uint16_t address ,uint16_t *pData,uint8_t QTY){
	for(uint8_t i=0;i<QTY;i++){
     72c:	cf 5f       	subi	r28, 0xFF	; 255
     72e:	dc 13       	cpse	r29, r28
     730:	f6 cf       	rjmp	.-20     	; 0x71e <Lcd_Write_multiple_data+0x1a>
		Modbus_Set_transmit_buffer(LCD,i, (*(pData+i)));
	}
	return Modbus_Write_multiple_registers(LCD,address,QTY);
     732:	4d 2f       	mov	r20, r29
     734:	50 e0       	ldi	r21, 0x00	; 0
     736:	b7 01       	movw	r22, r14
     738:	80 e0       	ldi	r24, 0x00	; 0
     73a:	fc d7       	rcall	.+4088   	; 0x1734 <Modbus_Write_multiple_registers>
	
}
     73c:	df 91       	pop	r29
     73e:	cf 91       	pop	r28
     740:	1f 91       	pop	r17
     742:	0f 91       	pop	r16
     744:	ff 90       	pop	r15
     746:	ef 90       	pop	r14
     748:	08 95       	ret

0000074a <Get_tank_level>:
#include "levels.h"
#include "../MCAL/DIO.h"

 
 uint8_t Get_tank_level(void)
 {
     74a:	cf 93       	push	r28
     74c:	df 93       	push	r29
	uint8_t Tank_sensor = 0 ;
	Tank_sensor = Get_tank_level_state(1) | (Get_tank_level_state(2) << 1) | (Get_tank_level_state(3) << 2) ;
     74e:	81 e0       	ldi	r24, 0x01	; 1
     750:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <Get_tank_level_state>
     754:	c8 2f       	mov	r28, r24
     756:	82 e0       	ldi	r24, 0x02	; 2
     758:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <Get_tank_level_state>
     75c:	d8 2f       	mov	r29, r24
     75e:	83 e0       	ldi	r24, 0x03	; 3
     760:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <Get_tank_level_state>
     764:	dd 0f       	add	r29, r29
     766:	24 e0       	ldi	r18, 0x04	; 4
     768:	82 9f       	mul	r24, r18
     76a:	c0 01       	movw	r24, r0
     76c:	11 24       	eor	r1, r1
     76e:	8d 2b       	or	r24, r29
     770:	8c 2b       	or	r24, r28
	if (Tank_sensor == 2 || Tank_sensor == 4 || Tank_sensor == 5 || Tank_sensor == 6  )
     772:	82 30       	cpi	r24, 0x02	; 2
     774:	29 f0       	breq	.+10     	; 0x780 <Get_tank_level+0x36>
     776:	9c ef       	ldi	r25, 0xFC	; 252
     778:	98 0f       	add	r25, r24
     77a:	93 30       	cpi	r25, 0x03	; 3
     77c:	18 f0       	brcs	.+6      	; 0x784 <Get_tank_level+0x3a>
     77e:	03 c0       	rjmp	.+6      	; 0x786 <Get_tank_level+0x3c>
	{
		return LEVEL_ERROR ;
     780:	85 e5       	ldi	r24, 0x55	; 85
     782:	01 c0       	rjmp	.+2      	; 0x786 <Get_tank_level+0x3c>
     784:	85 e5       	ldi	r24, 0x55	; 85
	}
	
	return Tank_sensor ;
 }
     786:	df 91       	pop	r29
     788:	cf 91       	pop	r28
     78a:	08 95       	ret

0000078c <Get_blancher_level>:
 
uint8_t Get_blancher_level(void)
{
	uint8_t Blancher_level =0;
	Blancher_level = Get_blancher_level_state();
     78c:	0c 94 b2 0d 	jmp	0x1b64	; 0x1b64 <Get_blancher_level_state>
	return Blancher_level ;
}
     790:	08 95       	ret

00000792 <Modbus_mster_transaction>:
     792:	8f 92       	push	r8
     794:	9f 92       	push	r9
     796:	af 92       	push	r10
     798:	bf 92       	push	r11
     79a:	df 92       	push	r13
     79c:	ef 92       	push	r14
     79e:	ff 92       	push	r15
     7a0:	0f 93       	push	r16
     7a2:	1f 93       	push	r17
     7a4:	cf 93       	push	r28
     7a6:	df 93       	push	r29
     7a8:	cd b7       	in	r28, 0x3d	; 61
     7aa:	de b7       	in	r29, 0x3e	; 62
     7ac:	da 95       	dec	r29
     7ae:	0f b6       	in	r0, 0x3f	; 63
     7b0:	f8 94       	cli
     7b2:	de bf       	out	0x3e, r29	; 62
     7b4:	0f be       	out	0x3f, r0	; 63
     7b6:	cd bf       	out	0x3d, r28	; 61
     7b8:	d6 2e       	mov	r13, r22
     7ba:	81 11       	cpse	r24, r1
     7bc:	02 c3       	rjmp	.+1540   	; 0xdc2 <Modbus_mster_transaction+0x630>
     7be:	80 91 3c 05 	lds	r24, 0x053C	; 0x80053c <g_mod0_slave>
     7c2:	89 83       	std	Y+1, r24	; 0x01
     7c4:	2f ef       	ldi	r18, 0xFF	; 255
     7c6:	62 13       	cpse	r22, r18
     7c8:	06 c0       	rjmp	.+12     	; 0x7d6 <Modbus_mster_transaction+0x44>
     7ca:	8f e0       	ldi	r24, 0x0F	; 15
     7cc:	8a 83       	std	Y+2, r24	; 0x02
     7ce:	68 94       	set
     7d0:	bb 24       	eor	r11, r11
     7d2:	b1 f8       	bld	r11, 1
     7d4:	32 c0       	rjmp	.+100    	; 0x83a <Modbus_mster_transaction+0xa8>
     7d6:	6a 83       	std	Y+2, r22	; 0x02
     7d8:	81 e0       	ldi	r24, 0x01	; 1
     7da:	68 17       	cp	r22, r24
     7dc:	b8 f0       	brcs	.+46     	; 0x80c <Modbus_mster_transaction+0x7a>
     7de:	94 e0       	ldi	r25, 0x04	; 4
     7e0:	96 17       	cp	r25, r22
     7e2:	18 f4       	brcc	.+6      	; 0x7ea <Modbus_mster_transaction+0x58>
     7e4:	a7 e1       	ldi	r26, 0x17	; 23
     7e6:	6a 13       	cpse	r22, r26
     7e8:	11 c0       	rjmp	.+34     	; 0x80c <Modbus_mster_transaction+0x7a>
     7ea:	80 91 3a 05 	lds	r24, 0x053A	; 0x80053a <g_mod0_read_address>
     7ee:	90 91 3b 05 	lds	r25, 0x053B	; 0x80053b <g_mod0_read_address+0x1>
     7f2:	9b 83       	std	Y+3, r25	; 0x03
     7f4:	8c 83       	std	Y+4, r24	; 0x04
     7f6:	80 91 38 05 	lds	r24, 0x0538	; 0x800538 <g_mod0_read_qty>
     7fa:	90 91 39 05 	lds	r25, 0x0539	; 0x800539 <g_mod0_read_qty+0x1>
     7fe:	9d 83       	std	Y+5, r25	; 0x05
     800:	8e 83       	std	Y+6, r24	; 0x06
     802:	0f 2e       	mov	r0, r31
     804:	f6 e0       	ldi	r31, 0x06	; 6
     806:	bf 2e       	mov	r11, r31
     808:	f0 2d       	mov	r31, r0
     80a:	03 c0       	rjmp	.+6      	; 0x812 <Modbus_mster_transaction+0x80>
     80c:	68 94       	set
     80e:	bb 24       	eor	r11, r11
     810:	b1 f8       	bld	r11, 1
     812:	b0 e1       	ldi	r27, 0x10	; 16
     814:	bd 15       	cp	r27, r13
     816:	40 f0       	brcs	.+16     	; 0x828 <Modbus_mster_transaction+0x96>
     818:	ef e0       	ldi	r30, 0x0F	; 15
     81a:	de 16       	cp	r13, r30
     81c:	70 f4       	brcc	.+28     	; 0x83a <Modbus_mster_transaction+0xa8>
     81e:	8b ef       	ldi	r24, 0xFB	; 251
     820:	8d 0d       	add	r24, r13
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	00 f5       	brcc	.+64     	; 0x866 <Modbus_mster_transaction+0xd4>
     826:	09 c0       	rjmp	.+18     	; 0x83a <Modbus_mster_transaction+0xa8>
     828:	f6 e1       	ldi	r31, 0x16	; 22
     82a:	df 16       	cp	r13, r31
     82c:	e0 f0       	brcs	.+56     	; 0x866 <Modbus_mster_transaction+0xd4>
     82e:	27 e1       	ldi	r18, 0x17	; 23
     830:	2d 15       	cp	r18, r13
     832:	18 f4       	brcc	.+6      	; 0x83a <Modbus_mster_transaction+0xa8>
     834:	8f ef       	ldi	r24, 0xFF	; 255
     836:	d8 12       	cpse	r13, r24
     838:	16 c0       	rjmp	.+44     	; 0x866 <Modbus_mster_transaction+0xd4>
     83a:	90 91 b6 04 	lds	r25, 0x04B6	; 0x8004b6 <g_mod0_write_address>
     83e:	80 91 b7 04 	lds	r24, 0x04B7	; 0x8004b7 <g_mod0_write_address+0x1>
     842:	e1 e0       	ldi	r30, 0x01	; 1
     844:	f0 e0       	ldi	r31, 0x00	; 0
     846:	ec 0f       	add	r30, r28
     848:	fd 1f       	adc	r31, r29
     84a:	eb 0d       	add	r30, r11
     84c:	f1 1d       	adc	r31, r1
     84e:	80 83       	st	Z, r24
     850:	81 e0       	ldi	r24, 0x01	; 1
     852:	8b 0d       	add	r24, r11
     854:	e1 e0       	ldi	r30, 0x01	; 1
     856:	f0 e0       	ldi	r31, 0x00	; 0
     858:	ec 0f       	add	r30, r28
     85a:	fd 1f       	adc	r31, r29
     85c:	e8 0f       	add	r30, r24
     85e:	f1 1d       	adc	r31, r1
     860:	b3 94       	inc	r11
     862:	b3 94       	inc	r11
     864:	90 83       	st	Z, r25
     866:	90 e1       	ldi	r25, 0x10	; 16
     868:	d9 16       	cp	r13, r25
     86a:	09 f4       	brne	.+2      	; 0x86e <Modbus_mster_transaction+0xdc>
     86c:	ad c0       	rjmp	.+346    	; 0x9c8 <Modbus_mster_transaction+0x236>
     86e:	9d 15       	cp	r25, r13
     870:	58 f0       	brcs	.+22     	; 0x888 <Modbus_mster_transaction+0xf6>
     872:	a6 e0       	ldi	r26, 0x06	; 6
     874:	da 16       	cp	r13, r26
     876:	61 f1       	breq	.+88     	; 0x8d0 <Modbus_mster_transaction+0x13e>
     878:	bf e0       	ldi	r27, 0x0F	; 15
     87a:	db 16       	cp	r13, r27
     87c:	09 f4       	brne	.+2      	; 0x880 <Modbus_mster_transaction+0xee>
     87e:	41 c0       	rjmp	.+130    	; 0x902 <Modbus_mster_transaction+0x170>
     880:	e5 e0       	ldi	r30, 0x05	; 5
     882:	de 12       	cpse	r13, r30
     884:	1a c1       	rjmp	.+564    	; 0xaba <Modbus_mster_transaction+0x328>
     886:	0d c0       	rjmp	.+26     	; 0x8a2 <Modbus_mster_transaction+0x110>
     888:	f7 e1       	ldi	r31, 0x17	; 23
     88a:	df 16       	cp	r13, r31
     88c:	09 f4       	brne	.+2      	; 0x890 <Modbus_mster_transaction+0xfe>
     88e:	9c c0       	rjmp	.+312    	; 0x9c8 <Modbus_mster_transaction+0x236>
     890:	2f ef       	ldi	r18, 0xFF	; 255
     892:	d2 16       	cp	r13, r18
     894:	09 f4       	brne	.+2      	; 0x898 <Modbus_mster_transaction+0x106>
     896:	98 c0       	rjmp	.+304    	; 0x9c8 <Modbus_mster_transaction+0x236>
     898:	86 e1       	ldi	r24, 0x16	; 22
     89a:	d8 16       	cp	r13, r24
     89c:	09 f4       	brne	.+2      	; 0x8a0 <Modbus_mster_transaction+0x10e>
     89e:	df c0       	rjmp	.+446    	; 0xa5e <Modbus_mster_transaction+0x2cc>
     8a0:	0c c1       	rjmp	.+536    	; 0xaba <Modbus_mster_transaction+0x328>
     8a2:	90 91 b4 04 	lds	r25, 0x04B4	; 0x8004b4 <g_mod0_write_qty>
     8a6:	80 91 b5 04 	lds	r24, 0x04B5	; 0x8004b5 <g_mod0_write_qty+0x1>
     8aa:	e1 e0       	ldi	r30, 0x01	; 1
     8ac:	f0 e0       	ldi	r31, 0x00	; 0
     8ae:	ec 0f       	add	r30, r28
     8b0:	fd 1f       	adc	r31, r29
     8b2:	eb 0d       	add	r30, r11
     8b4:	f1 1d       	adc	r31, r1
     8b6:	80 83       	st	Z, r24
     8b8:	81 e0       	ldi	r24, 0x01	; 1
     8ba:	8b 0d       	add	r24, r11
     8bc:	e1 e0       	ldi	r30, 0x01	; 1
     8be:	f0 e0       	ldi	r31, 0x00	; 0
     8c0:	ec 0f       	add	r30, r28
     8c2:	fd 1f       	adc	r31, r29
     8c4:	e8 0f       	add	r30, r24
     8c6:	f1 1d       	adc	r31, r1
     8c8:	b3 94       	inc	r11
     8ca:	b3 94       	inc	r11
     8cc:	90 83       	st	Z, r25
     8ce:	f5 c0       	rjmp	.+490    	; 0xaba <Modbus_mster_transaction+0x328>
     8d0:	e4 e3       	ldi	r30, 0x34	; 52
     8d2:	f4 e0       	ldi	r31, 0x04	; 4
     8d4:	80 81       	ld	r24, Z
     8d6:	91 81       	ldd	r25, Z+1	; 0x01
     8d8:	a1 e0       	ldi	r26, 0x01	; 1
     8da:	b0 e0       	ldi	r27, 0x00	; 0
     8dc:	ac 0f       	add	r26, r28
     8de:	bd 1f       	adc	r27, r29
     8e0:	ab 0d       	add	r26, r11
     8e2:	b1 1d       	adc	r27, r1
     8e4:	9c 93       	st	X, r25
     8e6:	20 81       	ld	r18, Z
     8e8:	31 81       	ldd	r19, Z+1	; 0x01
     8ea:	81 e0       	ldi	r24, 0x01	; 1
     8ec:	8b 0d       	add	r24, r11
     8ee:	e1 e0       	ldi	r30, 0x01	; 1
     8f0:	f0 e0       	ldi	r31, 0x00	; 0
     8f2:	ec 0f       	add	r30, r28
     8f4:	fd 1f       	adc	r31, r29
     8f6:	e8 0f       	add	r30, r24
     8f8:	f1 1d       	adc	r31, r1
     8fa:	b3 94       	inc	r11
     8fc:	b3 94       	inc	r11
     8fe:	20 83       	st	Z, r18
     900:	dc c0       	rjmp	.+440    	; 0xaba <Modbus_mster_transaction+0x328>
     902:	80 91 b4 04 	lds	r24, 0x04B4	; 0x8004b4 <g_mod0_write_qty>
     906:	90 91 b5 04 	lds	r25, 0x04B5	; 0x8004b5 <g_mod0_write_qty+0x1>
     90a:	e1 e0       	ldi	r30, 0x01	; 1
     90c:	f0 e0       	ldi	r31, 0x00	; 0
     90e:	ec 0f       	add	r30, r28
     910:	fd 1f       	adc	r31, r29
     912:	eb 0d       	add	r30, r11
     914:	f1 1d       	adc	r31, r1
     916:	90 83       	st	Z, r25
     918:	32 e0       	ldi	r19, 0x02	; 2
     91a:	3b 0d       	add	r19, r11
     91c:	21 e0       	ldi	r18, 0x01	; 1
     91e:	2b 0d       	add	r18, r11
     920:	e1 e0       	ldi	r30, 0x01	; 1
     922:	f0 e0       	ldi	r31, 0x00	; 0
     924:	ec 0f       	add	r30, r28
     926:	fd 1f       	adc	r31, r29
     928:	e2 0f       	add	r30, r18
     92a:	f1 1d       	adc	r31, r1
     92c:	80 83       	st	Z, r24
     92e:	ac 01       	movw	r20, r24
     930:	47 70       	andi	r20, 0x07	; 7
     932:	55 27       	eor	r21, r21
     934:	45 2b       	or	r20, r21
     936:	49 f0       	breq	.+18     	; 0x94a <Modbus_mster_transaction+0x1b8>
     938:	96 95       	lsr	r25
     93a:	87 95       	ror	r24
     93c:	96 95       	lsr	r25
     93e:	87 95       	ror	r24
     940:	96 95       	lsr	r25
     942:	87 95       	ror	r24
     944:	21 e0       	ldi	r18, 0x01	; 1
     946:	28 0f       	add	r18, r24
     948:	07 c0       	rjmp	.+14     	; 0x958 <Modbus_mster_transaction+0x1c6>
     94a:	96 95       	lsr	r25
     94c:	87 95       	ror	r24
     94e:	96 95       	lsr	r25
     950:	87 95       	ror	r24
     952:	96 95       	lsr	r25
     954:	87 95       	ror	r24
     956:	28 2f       	mov	r18, r24
     958:	93 e0       	ldi	r25, 0x03	; 3
     95a:	b9 0e       	add	r11, r25
     95c:	fe 01       	movw	r30, r28
     95e:	e3 0f       	add	r30, r19
     960:	f1 1d       	adc	r31, r1
     962:	21 83       	std	Z+1, r18	; 0x01
     964:	22 23       	and	r18, r18
     966:	09 f4       	brne	.+2      	; 0x96a <Modbus_mster_transaction+0x1d8>
     968:	a8 c0       	rjmp	.+336    	; 0xaba <Modbus_mster_transaction+0x328>
     96a:	80 e0       	ldi	r24, 0x00	; 0
     96c:	98 2f       	mov	r25, r24
     96e:	91 70       	andi	r25, 0x01	; 1
     970:	80 ff       	sbrs	r24, 0
     972:	03 c0       	rjmp	.+6      	; 0x97a <Modbus_mster_transaction+0x1e8>
     974:	91 30       	cpi	r25, 0x01	; 1
     976:	99 f0       	breq	.+38     	; 0x99e <Modbus_mster_transaction+0x20c>
     978:	23 c0       	rjmp	.+70     	; 0x9c0 <Modbus_mster_transaction+0x22e>
     97a:	e8 2f       	mov	r30, r24
     97c:	e6 95       	lsr	r30
     97e:	f0 e0       	ldi	r31, 0x00	; 0
     980:	ee 0f       	add	r30, r30
     982:	ff 1f       	adc	r31, r31
     984:	ec 5c       	subi	r30, 0xCC	; 204
     986:	fb 4f       	sbci	r31, 0xFB	; 251
     988:	40 81       	ld	r20, Z
     98a:	51 81       	ldd	r21, Z+1	; 0x01
     98c:	e1 e0       	ldi	r30, 0x01	; 1
     98e:	f0 e0       	ldi	r31, 0x00	; 0
     990:	ec 0f       	add	r30, r28
     992:	fd 1f       	adc	r31, r29
     994:	eb 0d       	add	r30, r11
     996:	f1 1d       	adc	r31, r1
     998:	40 83       	st	Z, r20
     99a:	b3 94       	inc	r11
     99c:	11 c0       	rjmp	.+34     	; 0x9c0 <Modbus_mster_transaction+0x22e>
     99e:	e8 2f       	mov	r30, r24
     9a0:	e6 95       	lsr	r30
     9a2:	f0 e0       	ldi	r31, 0x00	; 0
     9a4:	ee 0f       	add	r30, r30
     9a6:	ff 1f       	adc	r31, r31
     9a8:	ec 5c       	subi	r30, 0xCC	; 204
     9aa:	fb 4f       	sbci	r31, 0xFB	; 251
     9ac:	40 81       	ld	r20, Z
     9ae:	51 81       	ldd	r21, Z+1	; 0x01
     9b0:	e1 e0       	ldi	r30, 0x01	; 1
     9b2:	f0 e0       	ldi	r31, 0x00	; 0
     9b4:	ec 0f       	add	r30, r28
     9b6:	fd 1f       	adc	r31, r29
     9b8:	eb 0d       	add	r30, r11
     9ba:	f1 1d       	adc	r31, r1
     9bc:	50 83       	st	Z, r21
     9be:	b3 94       	inc	r11
     9c0:	8f 5f       	subi	r24, 0xFF	; 255
     9c2:	28 13       	cpse	r18, r24
     9c4:	d3 cf       	rjmp	.-90     	; 0x96c <Modbus_mster_transaction+0x1da>
     9c6:	79 c0       	rjmp	.+242    	; 0xaba <Modbus_mster_transaction+0x328>
     9c8:	60 91 b4 04 	lds	r22, 0x04B4	; 0x8004b4 <g_mod0_write_qty>
     9cc:	70 91 b5 04 	lds	r23, 0x04B5	; 0x8004b5 <g_mod0_write_qty+0x1>
     9d0:	e1 e0       	ldi	r30, 0x01	; 1
     9d2:	f0 e0       	ldi	r31, 0x00	; 0
     9d4:	ec 0f       	add	r30, r28
     9d6:	fd 1f       	adc	r31, r29
     9d8:	eb 0d       	add	r30, r11
     9da:	f1 1d       	adc	r31, r1
     9dc:	70 83       	st	Z, r23
     9de:	81 e0       	ldi	r24, 0x01	; 1
     9e0:	8b 0d       	add	r24, r11
     9e2:	e1 e0       	ldi	r30, 0x01	; 1
     9e4:	f0 e0       	ldi	r31, 0x00	; 0
     9e6:	ec 0f       	add	r30, r28
     9e8:	fd 1f       	adc	r31, r29
     9ea:	e8 0f       	add	r30, r24
     9ec:	f1 1d       	adc	r31, r1
     9ee:	60 83       	st	Z, r22
     9f0:	82 e0       	ldi	r24, 0x02	; 2
     9f2:	8b 0d       	add	r24, r11
     9f4:	e1 e0       	ldi	r30, 0x01	; 1
     9f6:	f0 e0       	ldi	r31, 0x00	; 0
     9f8:	ec 0f       	add	r30, r28
     9fa:	fd 1f       	adc	r31, r29
     9fc:	e8 0f       	add	r30, r24
     9fe:	f1 1d       	adc	r31, r1
     a00:	a3 e0       	ldi	r26, 0x03	; 3
     a02:	ba 0e       	add	r11, r26
     a04:	86 2f       	mov	r24, r22
     a06:	88 0f       	add	r24, r24
     a08:	80 83       	st	Z, r24
     a0a:	77 27       	eor	r23, r23
     a0c:	16 16       	cp	r1, r22
     a0e:	17 06       	cpc	r1, r23
     a10:	0c f0       	brlt	.+2      	; 0xa14 <Modbus_mster_transaction+0x282>
     a12:	53 c0       	rjmp	.+166    	; 0xaba <Modbus_mster_transaction+0x328>
     a14:	80 e0       	ldi	r24, 0x00	; 0
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	20 e0       	ldi	r18, 0x00	; 0
     a1a:	88 0f       	add	r24, r24
     a1c:	99 1f       	adc	r25, r25
     a1e:	fc 01       	movw	r30, r24
     a20:	ec 5c       	subi	r30, 0xCC	; 204
     a22:	fb 4f       	sbci	r31, 0xFB	; 251
     a24:	80 81       	ld	r24, Z
     a26:	91 81       	ldd	r25, Z+1	; 0x01
     a28:	a1 e0       	ldi	r26, 0x01	; 1
     a2a:	b0 e0       	ldi	r27, 0x00	; 0
     a2c:	ac 0f       	add	r26, r28
     a2e:	bd 1f       	adc	r27, r29
     a30:	ab 0d       	add	r26, r11
     a32:	b1 1d       	adc	r27, r1
     a34:	9c 93       	st	X, r25
     a36:	40 81       	ld	r20, Z
     a38:	51 81       	ldd	r21, Z+1	; 0x01
     a3a:	81 e0       	ldi	r24, 0x01	; 1
     a3c:	8b 0d       	add	r24, r11
     a3e:	e1 e0       	ldi	r30, 0x01	; 1
     a40:	f0 e0       	ldi	r31, 0x00	; 0
     a42:	ec 0f       	add	r30, r28
     a44:	fd 1f       	adc	r31, r29
     a46:	e8 0f       	add	r30, r24
     a48:	f1 1d       	adc	r31, r1
     a4a:	b3 94       	inc	r11
     a4c:	b3 94       	inc	r11
     a4e:	40 83       	st	Z, r20
     a50:	2f 5f       	subi	r18, 0xFF	; 255
     a52:	82 2f       	mov	r24, r18
     a54:	90 e0       	ldi	r25, 0x00	; 0
     a56:	86 17       	cp	r24, r22
     a58:	97 07       	cpc	r25, r23
     a5a:	fc f2       	brlt	.-66     	; 0xa1a <Modbus_mster_transaction+0x288>
     a5c:	2e c0       	rjmp	.+92     	; 0xaba <Modbus_mster_transaction+0x328>
     a5e:	e4 e3       	ldi	r30, 0x34	; 52
     a60:	f4 e0       	ldi	r31, 0x04	; 4
     a62:	80 81       	ld	r24, Z
     a64:	91 81       	ldd	r25, Z+1	; 0x01
     a66:	a1 e0       	ldi	r26, 0x01	; 1
     a68:	b0 e0       	ldi	r27, 0x00	; 0
     a6a:	ac 0f       	add	r26, r28
     a6c:	bd 1f       	adc	r27, r29
     a6e:	ab 0d       	add	r26, r11
     a70:	b1 1d       	adc	r27, r1
     a72:	9c 93       	st	X, r25
     a74:	80 81       	ld	r24, Z
     a76:	91 81       	ldd	r25, Z+1	; 0x01
     a78:	91 e0       	ldi	r25, 0x01	; 1
     a7a:	9b 0d       	add	r25, r11
     a7c:	a1 e0       	ldi	r26, 0x01	; 1
     a7e:	b0 e0       	ldi	r27, 0x00	; 0
     a80:	ac 0f       	add	r26, r28
     a82:	bd 1f       	adc	r27, r29
     a84:	a9 0f       	add	r26, r25
     a86:	b1 1d       	adc	r27, r1
     a88:	8c 93       	st	X, r24
     a8a:	82 81       	ldd	r24, Z+2	; 0x02
     a8c:	93 81       	ldd	r25, Z+3	; 0x03
     a8e:	82 e0       	ldi	r24, 0x02	; 2
     a90:	8b 0d       	add	r24, r11
     a92:	a1 e0       	ldi	r26, 0x01	; 1
     a94:	b0 e0       	ldi	r27, 0x00	; 0
     a96:	ac 0f       	add	r26, r28
     a98:	bd 1f       	adc	r27, r29
     a9a:	a8 0f       	add	r26, r24
     a9c:	b1 1d       	adc	r27, r1
     a9e:	9c 93       	st	X, r25
     aa0:	22 81       	ldd	r18, Z+2	; 0x02
     aa2:	33 81       	ldd	r19, Z+3	; 0x03
     aa4:	83 e0       	ldi	r24, 0x03	; 3
     aa6:	8b 0d       	add	r24, r11
     aa8:	e1 e0       	ldi	r30, 0x01	; 1
     aaa:	f0 e0       	ldi	r31, 0x00	; 0
     aac:	ec 0f       	add	r30, r28
     aae:	fd 1f       	adc	r31, r29
     ab0:	e8 0f       	add	r30, r24
     ab2:	f1 1d       	adc	r31, r1
     ab4:	b4 e0       	ldi	r27, 0x04	; 4
     ab6:	bb 0e       	add	r11, r27
     ab8:	20 83       	st	Z, r18
     aba:	bb 20       	and	r11, r11
     abc:	b9 f0       	breq	.+46     	; 0xaec <Modbus_mster_transaction+0x35a>
     abe:	8e 01       	movw	r16, r28
     ac0:	0f 5f       	subi	r16, 0xFF	; 255
     ac2:	1f 4f       	sbci	r17, 0xFF	; 255
     ac4:	ee 24       	eor	r14, r14
     ac6:	ea 94       	dec	r14
     ac8:	eb 0c       	add	r14, r11
     aca:	f1 2c       	mov	r15, r1
     acc:	ef ef       	ldi	r30, 0xFF	; 255
     ace:	ee 1a       	sub	r14, r30
     ad0:	fe 0a       	sbc	r15, r30
     ad2:	e0 0e       	add	r14, r16
     ad4:	f1 1e       	adc	r15, r17
     ad6:	8f ef       	ldi	r24, 0xFF	; 255
     ad8:	9f ef       	ldi	r25, 0xFF	; 255
     ada:	d8 01       	movw	r26, r16
     adc:	6d 91       	ld	r22, X+
     ade:	8d 01       	movw	r16, r26
     ae0:	0e 94 d4 20 	call	0x41a8	; 0x41a8 <crc16_update>
     ae4:	0e 15       	cp	r16, r14
     ae6:	1f 05       	cpc	r17, r15
     ae8:	c1 f7       	brne	.-16     	; 0xada <Modbus_mster_transaction+0x348>
     aea:	02 c0       	rjmp	.+4      	; 0xaf0 <Modbus_mster_transaction+0x35e>
     aec:	8f ef       	ldi	r24, 0xFF	; 255
     aee:	9f ef       	ldi	r25, 0xFF	; 255
     af0:	ee 24       	eor	r14, r14
     af2:	e3 94       	inc	r14
     af4:	eb 0c       	add	r14, r11
     af6:	e1 e0       	ldi	r30, 0x01	; 1
     af8:	f0 e0       	ldi	r31, 0x00	; 0
     afa:	ec 0f       	add	r30, r28
     afc:	fd 1f       	adc	r31, r29
     afe:	eb 0d       	add	r30, r11
     b00:	f1 1d       	adc	r31, r1
     b02:	80 83       	st	Z, r24
     b04:	b3 94       	inc	r11
     b06:	b3 94       	inc	r11
     b08:	e1 e0       	ldi	r30, 0x01	; 1
     b0a:	f0 e0       	ldi	r31, 0x00	; 0
     b0c:	ec 0f       	add	r30, r28
     b0e:	fd 1f       	adc	r31, r29
     b10:	ee 0d       	add	r30, r14
     b12:	f1 1d       	adc	r31, r1
     b14:	90 83       	st	Z, r25
     b16:	e1 e0       	ldi	r30, 0x01	; 1
     b18:	f0 e0       	ldi	r31, 0x00	; 0
     b1a:	ec 0f       	add	r30, r28
     b1c:	fd 1f       	adc	r31, r29
     b1e:	eb 0d       	add	r30, r11
     b20:	f1 1d       	adc	r31, r1
     b22:	10 82       	st	Z, r1
     b24:	e0 91 27 04 	lds	r30, 0x0427	; 0x800427 <g_mod0_Serial_getc>
     b28:	f0 91 28 04 	lds	r31, 0x0428	; 0x800428 <g_mod0_Serial_getc+0x1>
     b2c:	19 95       	eicall
     b2e:	81 15       	cp	r24, r1
     b30:	91 40       	sbci	r25, 0x01	; 1
     b32:	c1 f7       	brne	.-16     	; 0xb24 <Modbus_mster_transaction+0x392>
     b34:	e0 91 2d 04 	lds	r30, 0x042D	; 0x80042d <g_mod0_pre_transmission>
     b38:	f0 91 2e 04 	lds	r31, 0x042E	; 0x80042e <g_mod0_pre_transmission+0x1>
     b3c:	30 97       	sbiw	r30, 0x00	; 0
     b3e:	09 f0       	breq	.+2      	; 0xb42 <Modbus_mster_transaction+0x3b0>
     b40:	19 95       	eicall
     b42:	bb 20       	and	r11, r11
     b44:	a1 f0       	breq	.+40     	; 0xb6e <Modbus_mster_transaction+0x3dc>
     b46:	8e 01       	movw	r16, r28
     b48:	0f 5f       	subi	r16, 0xFF	; 255
     b4a:	1f 4f       	sbci	r17, 0xFF	; 255
     b4c:	f1 2c       	mov	r15, r1
     b4e:	ef ef       	ldi	r30, 0xFF	; 255
     b50:	ee 1a       	sub	r14, r30
     b52:	fe 0a       	sbc	r15, r30
     b54:	e0 0e       	add	r14, r16
     b56:	f1 1e       	adc	r15, r17
     b58:	e0 91 29 04 	lds	r30, 0x0429	; 0x800429 <g_mod0_Serial_putc>
     b5c:	f0 91 2a 04 	lds	r31, 0x042A	; 0x80042a <g_mod0_Serial_putc+0x1>
     b60:	d8 01       	movw	r26, r16
     b62:	8d 91       	ld	r24, X+
     b64:	8d 01       	movw	r16, r26
     b66:	19 95       	eicall
     b68:	0e 15       	cp	r16, r14
     b6a:	1f 05       	cpc	r17, r15
     b6c:	a9 f7       	brne	.-22     	; 0xb58 <Modbus_mster_transaction+0x3c6>
     b6e:	e0 91 25 04 	lds	r30, 0x0425	; 0x800425 <g_mod0_Serial_flush>
     b72:	f0 91 26 04 	lds	r31, 0x0426	; 0x800426 <g_mod0_Serial_flush+0x1>
     b76:	19 95       	eicall
     b78:	ef e8       	ldi	r30, 0x8F	; 143
     b7a:	f1 e0       	ldi	r31, 0x01	; 1
     b7c:	31 97       	sbiw	r30, 0x01	; 1
     b7e:	f1 f7       	brne	.-4      	; 0xb7c <Modbus_mster_transaction+0x3ea>
     b80:	00 c0       	rjmp	.+0      	; 0xb82 <Modbus_mster_transaction+0x3f0>
     b82:	00 00       	nop
     b84:	e0 91 2b 04 	lds	r30, 0x042B	; 0x80042b <g_mod0_post_transmission>
     b88:	f0 91 2c 04 	lds	r31, 0x042C	; 0x80042c <g_mod0_post_transmission+0x1>
     b8c:	30 97       	sbiw	r30, 0x00	; 0
     b8e:	09 f0       	breq	.+2      	; 0xb92 <Modbus_mster_transaction+0x400>
     b90:	19 95       	eicall
     b92:	ff ef       	ldi	r31, 0xFF	; 255
     b94:	23 ed       	ldi	r18, 0xD3	; 211
     b96:	80 e3       	ldi	r24, 0x30	; 48
     b98:	f1 50       	subi	r31, 0x01	; 1
     b9a:	20 40       	sbci	r18, 0x00	; 0
     b9c:	80 40       	sbci	r24, 0x00	; 0
     b9e:	e1 f7       	brne	.-8      	; 0xb98 <Modbus_mster_transaction+0x406>
     ba0:	00 c0       	rjmp	.+0      	; 0xba2 <Modbus_mster_transaction+0x410>
     ba2:	00 00       	nop
     ba4:	0e 94 f5 20 	call	0x41ea	; 0x41ea <Get_millis>
     ba8:	4b 01       	movw	r8, r22
     baa:	5c 01       	movw	r10, r24
     bac:	08 e0       	ldi	r16, 0x08	; 8
     bae:	10 e0       	ldi	r17, 0x00	; 0
     bb0:	ed 2c       	mov	r14, r13
     bb2:	f1 2c       	mov	r15, r1
     bb4:	e0 91 23 04 	lds	r30, 0x0423	; 0x800423 <g_mod0_Serial_available>
     bb8:	f0 91 24 04 	lds	r31, 0x0424	; 0x800424 <g_mod0_Serial_available+0x1>
     bbc:	19 95       	eicall
     bbe:	89 2b       	or	r24, r25
     bc0:	91 f0       	breq	.+36     	; 0xbe6 <Modbus_mster_transaction+0x454>
     bc2:	dd 24       	eor	r13, r13
     bc4:	d3 94       	inc	r13
     bc6:	d1 0e       	add	r13, r17
     bc8:	e0 91 27 04 	lds	r30, 0x0427	; 0x800427 <g_mod0_Serial_getc>
     bcc:	f0 91 28 04 	lds	r31, 0x0428	; 0x800428 <g_mod0_Serial_getc+0x1>
     bd0:	19 95       	eicall
     bd2:	e1 e0       	ldi	r30, 0x01	; 1
     bd4:	f0 e0       	ldi	r31, 0x00	; 0
     bd6:	ec 0f       	add	r30, r28
     bd8:	fd 1f       	adc	r31, r29
     bda:	e1 0f       	add	r30, r17
     bdc:	f1 1d       	adc	r31, r1
     bde:	80 83       	st	Z, r24
     be0:	01 50       	subi	r16, 0x01	; 1
     be2:	1d 2d       	mov	r17, r13
     be4:	07 c0       	rjmp	.+14     	; 0xbf4 <Modbus_mster_transaction+0x462>
     be6:	e0 91 2f 04 	lds	r30, 0x042F	; 0x80042f <g_mod0_idle>
     bea:	f0 91 30 04 	lds	r31, 0x0430	; 0x800430 <g_mod0_idle+0x1>
     bee:	30 97       	sbiw	r30, 0x00	; 0
     bf0:	09 f0       	breq	.+2      	; 0xbf4 <Modbus_mster_transaction+0x462>
     bf2:	19 95       	eicall
     bf4:	15 30       	cpi	r17, 0x05	; 5
     bf6:	59 f5       	brne	.+86     	; 0xc4e <Modbus_mster_transaction+0x4bc>
     bf8:	99 81       	ldd	r25, Y+1	; 0x01
     bfa:	80 91 3c 05 	lds	r24, 0x053C	; 0x80053c <g_mod0_slave>
     bfe:	98 13       	cpse	r25, r24
     c00:	2d c4       	rjmp	.+2138   	; 0x145c <Modbus_mster_transaction+0xcca>
     c02:	8a 81       	ldd	r24, Y+2	; 0x02
     c04:	28 2f       	mov	r18, r24
     c06:	2f 77       	andi	r18, 0x7F	; 127
     c08:	30 e0       	ldi	r19, 0x00	; 0
     c0a:	2e 15       	cp	r18, r14
     c0c:	3f 05       	cpc	r19, r15
     c0e:	09 f0       	breq	.+2      	; 0xc12 <Modbus_mster_transaction+0x480>
     c10:	27 c4       	rjmp	.+2126   	; 0x1460 <Modbus_mster_transaction+0xcce>
     c12:	88 23       	and	r24, r24
     c14:	2c f4       	brge	.+10     	; 0xc20 <Modbus_mster_transaction+0x48e>
     c16:	8b 81       	ldd	r24, Y+3	; 0x03
     c18:	88 23       	and	r24, r24
     c1a:	09 f4       	brne	.+2      	; 0xc1e <Modbus_mster_transaction+0x48c>
     c1c:	3f c0       	rjmp	.+126    	; 0xc9c <Modbus_mster_transaction+0x50a>
     c1e:	cc c0       	rjmp	.+408    	; 0xdb8 <Modbus_mster_transaction+0x626>
     c20:	81 31       	cpi	r24, 0x11	; 17
     c22:	58 f4       	brcc	.+22     	; 0xc3a <Modbus_mster_transaction+0x4a8>
     c24:	8f 30       	cpi	r24, 0x0F	; 15
     c26:	08 f0       	brcs	.+2      	; 0xc2a <Modbus_mster_transaction+0x498>
     c28:	b7 c3       	rjmp	.+1902   	; 0x1398 <Modbus_mster_transaction+0xc06>
     c2a:	81 30       	cpi	r24, 0x01	; 1
     c2c:	80 f0       	brcs	.+32     	; 0xc4e <Modbus_mster_transaction+0x4bc>
     c2e:	85 30       	cpi	r24, 0x05	; 5
     c30:	68 f0       	brcs	.+26     	; 0xc4c <Modbus_mster_transaction+0x4ba>
     c32:	87 30       	cpi	r24, 0x07	; 7
     c34:	08 f4       	brcc	.+2      	; 0xc38 <Modbus_mster_transaction+0x4a6>
     c36:	b0 c3       	rjmp	.+1888   	; 0x1398 <Modbus_mster_transaction+0xc06>
     c38:	0a c0       	rjmp	.+20     	; 0xc4e <Modbus_mster_transaction+0x4bc>
     c3a:	87 31       	cpi	r24, 0x17	; 23
     c3c:	39 f0       	breq	.+14     	; 0xc4c <Modbus_mster_transaction+0x4ba>
     c3e:	8f 3f       	cpi	r24, 0xFF	; 255
     c40:	09 f4       	brne	.+2      	; 0xc44 <Modbus_mster_transaction+0x4b2>
     c42:	aa c3       	rjmp	.+1876   	; 0x1398 <Modbus_mster_transaction+0xc06>
     c44:	86 31       	cpi	r24, 0x16	; 22
     c46:	19 f4       	brne	.+6      	; 0xc4e <Modbus_mster_transaction+0x4bc>
     c48:	05 e0       	ldi	r16, 0x05	; 5
     c4a:	a7 c3       	rjmp	.+1870   	; 0x139a <Modbus_mster_transaction+0xc08>
     c4c:	0b 81       	ldd	r16, Y+3	; 0x03
     c4e:	0e 94 f5 20 	call	0x41ea	; 0x41ea <Get_millis>
     c52:	dc 01       	movw	r26, r24
     c54:	cb 01       	movw	r24, r22
     c56:	88 19       	sub	r24, r8
     c58:	99 09       	sbc	r25, r9
     c5a:	aa 09       	sbc	r26, r10
     c5c:	bb 09       	sbc	r27, r11
     c5e:	81 3d       	cpi	r24, 0xD1	; 209
     c60:	97 40       	sbci	r25, 0x07	; 7
     c62:	a1 05       	cpc	r26, r1
     c64:	b1 05       	cpc	r27, r1
     c66:	08 f4       	brcc	.+2      	; 0xc6a <Modbus_mster_transaction+0x4d8>
     c68:	ed c3       	rjmp	.+2010   	; 0x1444 <Modbus_mster_transaction+0xcb2>
     c6a:	80 e0       	ldi	r24, 0x00	; 0
     c6c:	92 e0       	ldi	r25, 0x02	; 2
     c6e:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <UART0_puts>
     c72:	8a e0       	ldi	r24, 0x0A	; 10
     c74:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <UART0_putc>
     c78:	01 11       	cpse	r16, r1
     c7a:	f4 c3       	rjmp	.+2024   	; 0x1464 <Modbus_mster_transaction+0xcd2>
     c7c:	82 ee       	ldi	r24, 0xE2	; 226
     c7e:	81 11       	cpse	r24, r1
     c80:	9b c0       	rjmp	.+310    	; 0xdb8 <Modbus_mster_transaction+0x626>
     c82:	15 30       	cpi	r17, 0x05	; 5
     c84:	08 f4       	brcc	.+2      	; 0xc88 <Modbus_mster_transaction+0x4f6>
     c86:	a9 c3       	rjmp	.+1874   	; 0x13da <Modbus_mster_transaction+0xc48>
     c88:	a1 2e       	mov	r10, r17
     c8a:	b1 2c       	mov	r11, r1
     c8c:	75 01       	movw	r14, r10
     c8e:	f2 e0       	ldi	r31, 0x02	; 2
     c90:	ef 1a       	sub	r14, r31
     c92:	f1 08       	sbc	r15, r1
     c94:	1e 14       	cp	r1, r14
     c96:	1f 04       	cpc	r1, r15
     c98:	5c f0       	brlt	.+22     	; 0xcb0 <Modbus_mster_transaction+0x51e>
     c9a:	8e c3       	rjmp	.+1820   	; 0x13b8 <Modbus_mster_transaction+0xc26>
     c9c:	0f 2e       	mov	r0, r31
     c9e:	f3 e0       	ldi	r31, 0x03	; 3
     ca0:	ef 2e       	mov	r14, r31
     ca2:	f1 2c       	mov	r15, r1
     ca4:	f0 2d       	mov	r31, r0
     ca6:	0f 2e       	mov	r0, r31
     ca8:	f5 e0       	ldi	r31, 0x05	; 5
     caa:	af 2e       	mov	r10, r31
     cac:	b1 2c       	mov	r11, r1
     cae:	f0 2d       	mov	r31, r0
     cb0:	20 e0       	ldi	r18, 0x00	; 0
     cb2:	30 e0       	ldi	r19, 0x00	; 0
     cb4:	8f ef       	ldi	r24, 0xFF	; 255
     cb6:	9f ef       	ldi	r25, 0xFF	; 255
     cb8:	10 e0       	ldi	r17, 0x00	; 0
     cba:	e1 e0       	ldi	r30, 0x01	; 1
     cbc:	f0 e0       	ldi	r31, 0x00	; 0
     cbe:	ec 0f       	add	r30, r28
     cc0:	fd 1f       	adc	r31, r29
     cc2:	e2 0f       	add	r30, r18
     cc4:	f3 1f       	adc	r31, r19
     cc6:	60 81       	ld	r22, Z
     cc8:	0e 94 d4 20 	call	0x41a8	; 0x41a8 <crc16_update>
     ccc:	1f 5f       	subi	r17, 0xFF	; 255
     cce:	21 2f       	mov	r18, r17
     cd0:	30 e0       	ldi	r19, 0x00	; 0
     cd2:	2e 15       	cp	r18, r14
     cd4:	3f 05       	cpc	r19, r15
     cd6:	8c f3       	brlt	.-30     	; 0xcba <Modbus_mster_transaction+0x528>
     cd8:	71 c3       	rjmp	.+1762   	; 0x13bc <Modbus_mster_transaction+0xc2a>
     cda:	89 2f       	mov	r24, r25
     cdc:	99 27       	eor	r25, r25
     cde:	fe 01       	movw	r30, r28
     ce0:	ea 0d       	add	r30, r10
     ce2:	fb 1d       	adc	r31, r11
     ce4:	20 81       	ld	r18, Z
     ce6:	30 e0       	ldi	r19, 0x00	; 0
     ce8:	82 17       	cp	r24, r18
     cea:	93 07       	cpc	r25, r19
     cec:	09 f0       	breq	.+2      	; 0xcf0 <Modbus_mster_transaction+0x55e>
     cee:	73 c3       	rjmp	.+1766   	; 0x13d6 <Modbus_mster_transaction+0xc44>
     cf0:	74 c3       	rjmp	.+1768   	; 0x13da <Modbus_mster_transaction+0xc48>
     cf2:	9b 81       	ldd	r25, Y+3	; 0x03
     cf4:	96 95       	lsr	r25
     cf6:	e9 f5       	brne	.+122    	; 0xd72 <Modbus_mster_transaction+0x5e0>
     cf8:	80 e0       	ldi	r24, 0x00	; 0
     cfa:	5e c0       	rjmp	.+188    	; 0xdb8 <Modbus_mster_transaction+0x626>
     cfc:	7b 81       	ldd	r23, Y+3	; 0x03
     cfe:	97 2f       	mov	r25, r23
     d00:	96 95       	lsr	r25
     d02:	09 f4       	brne	.+2      	; 0xd06 <Modbus_mster_transaction+0x574>
     d04:	78 c3       	rjmp	.+1776   	; 0x13f6 <Modbus_mster_transaction+0xc64>
     d06:	fe 01       	movw	r30, r28
     d08:	31 96       	adiw	r30, 0x01	; 1
     d0a:	40 e0       	ldi	r20, 0x00	; 0
     d0c:	50 e0       	ldi	r21, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	80 34       	cpi	r24, 0x40	; 64
     d12:	70 f4       	brcc	.+28     	; 0xd30 <Modbus_mster_transaction+0x59e>
     d14:	24 81       	ldd	r18, Z+4	; 0x04
     d16:	30 e0       	ldi	r19, 0x00	; 0
     d18:	32 2f       	mov	r19, r18
     d1a:	22 27       	eor	r18, r18
     d1c:	63 81       	ldd	r22, Z+3	; 0x03
     d1e:	26 2b       	or	r18, r22
     d20:	da 01       	movw	r26, r20
     d22:	aa 0f       	add	r26, r26
     d24:	bb 1f       	adc	r27, r27
     d26:	a8 54       	subi	r26, 0x48	; 72
     d28:	bb 4f       	sbci	r27, 0xFB	; 251
     d2a:	11 96       	adiw	r26, 0x01	; 1
     d2c:	3c 93       	st	X, r19
     d2e:	2e 93       	st	-X, r18
     d30:	8f 5f       	subi	r24, 0xFF	; 255
     d32:	4f 5f       	subi	r20, 0xFF	; 255
     d34:	5f 4f       	sbci	r21, 0xFF	; 255
     d36:	32 96       	adiw	r30, 0x02	; 2
     d38:	89 13       	cpse	r24, r25
     d3a:	ea cf       	rjmp	.-44     	; 0xd10 <Modbus_mster_transaction+0x57e>
     d3c:	8f ef       	ldi	r24, 0xFF	; 255
     d3e:	89 0f       	add	r24, r25
     d40:	80 93 31 04 	sts	0x0431, r24	; 0x800431 <g_mod0_response_buffer_length>
     d44:	70 ff       	sbrs	r23, 0
     d46:	35 c0       	rjmp	.+106    	; 0xdb2 <Modbus_mster_transaction+0x620>
     d48:	90 34       	cpi	r25, 0x40	; 64
     d4a:	70 f4       	brcc	.+28     	; 0xd68 <Modbus_mster_transaction+0x5d6>
     d4c:	29 2f       	mov	r18, r25
     d4e:	30 e0       	ldi	r19, 0x00	; 0
     d50:	22 0f       	add	r18, r18
     d52:	33 1f       	adc	r19, r19
     d54:	fe 01       	movw	r30, r28
     d56:	e2 0f       	add	r30, r18
     d58:	f3 1f       	adc	r31, r19
     d5a:	44 81       	ldd	r20, Z+4	; 0x04
     d5c:	50 e0       	ldi	r21, 0x00	; 0
     d5e:	f9 01       	movw	r30, r18
     d60:	e8 54       	subi	r30, 0x48	; 72
     d62:	fb 4f       	sbci	r31, 0xFB	; 251
     d64:	51 83       	std	Z+1, r21	; 0x01
     d66:	40 83       	st	Z, r20
     d68:	9f 5f       	subi	r25, 0xFF	; 255
     d6a:	90 93 31 04 	sts	0x0431, r25	; 0x800431 <g_mod0_response_buffer_length>
     d6e:	80 e0       	ldi	r24, 0x00	; 0
     d70:	23 c0       	rjmp	.+70     	; 0xdb8 <Modbus_mster_transaction+0x626>
     d72:	fe 01       	movw	r30, r28
     d74:	31 96       	adiw	r30, 0x01	; 1
     d76:	40 e0       	ldi	r20, 0x00	; 0
     d78:	50 e0       	ldi	r21, 0x00	; 0
     d7a:	80 e0       	ldi	r24, 0x00	; 0
     d7c:	80 34       	cpi	r24, 0x40	; 64
     d7e:	70 f4       	brcc	.+28     	; 0xd9c <Modbus_mster_transaction+0x60a>
     d80:	23 81       	ldd	r18, Z+3	; 0x03
     d82:	30 e0       	ldi	r19, 0x00	; 0
     d84:	32 2f       	mov	r19, r18
     d86:	22 27       	eor	r18, r18
     d88:	64 81       	ldd	r22, Z+4	; 0x04
     d8a:	26 2b       	or	r18, r22
     d8c:	da 01       	movw	r26, r20
     d8e:	aa 0f       	add	r26, r26
     d90:	bb 1f       	adc	r27, r27
     d92:	a8 54       	subi	r26, 0x48	; 72
     d94:	bb 4f       	sbci	r27, 0xFB	; 251
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	3c 93       	st	X, r19
     d9a:	2e 93       	st	-X, r18
     d9c:	8f 5f       	subi	r24, 0xFF	; 255
     d9e:	4f 5f       	subi	r20, 0xFF	; 255
     da0:	5f 4f       	sbci	r21, 0xFF	; 255
     da2:	32 96       	adiw	r30, 0x02	; 2
     da4:	89 13       	cpse	r24, r25
     da6:	ea cf       	rjmp	.-44     	; 0xd7c <Modbus_mster_transaction+0x5ea>
     da8:	91 50       	subi	r25, 0x01	; 1
     daa:	90 93 31 04 	sts	0x0431, r25	; 0x800431 <g_mod0_response_buffer_length>
     dae:	80 e0       	ldi	r24, 0x00	; 0
     db0:	03 c0       	rjmp	.+6      	; 0xdb8 <Modbus_mster_transaction+0x626>
     db2:	80 e0       	ldi	r24, 0x00	; 0
     db4:	01 c0       	rjmp	.+2      	; 0xdb8 <Modbus_mster_transaction+0x626>
     db6:	80 e0       	ldi	r24, 0x00	; 0
     db8:	10 92 33 04 	sts	0x0433, r1	; 0x800433 <g_mod0_transmit_buffer_index>
     dbc:	10 92 32 04 	sts	0x0432, r1	; 0x800432 <g_mod0_response_buffer_index>
     dc0:	59 c3       	rjmp	.+1714   	; 0x1474 <Modbus_mster_transaction+0xce2>
     dc2:	81 30       	cpi	r24, 0x01	; 1
     dc4:	09 f0       	breq	.+2      	; 0xdc8 <Modbus_mster_transaction+0x636>
     dc6:	e6 c2       	rjmp	.+1484   	; 0x1394 <Modbus_mster_transaction+0xc02>
     dc8:	80 91 22 04 	lds	r24, 0x0422	; 0x800422 <g_mod1_slave>
     dcc:	89 83       	std	Y+1, r24	; 0x01
     dce:	2f ef       	ldi	r18, 0xFF	; 255
     dd0:	62 13       	cpse	r22, r18
     dd2:	06 c0       	rjmp	.+12     	; 0xde0 <Modbus_mster_transaction+0x64e>
     dd4:	8f e0       	ldi	r24, 0x0F	; 15
     dd6:	8a 83       	std	Y+2, r24	; 0x02
     dd8:	68 94       	set
     dda:	bb 24       	eor	r11, r11
     ddc:	b1 f8       	bld	r11, 1
     dde:	32 c0       	rjmp	.+100    	; 0xe44 <Modbus_mster_transaction+0x6b2>
     de0:	6a 83       	std	Y+2, r22	; 0x02
     de2:	81 e0       	ldi	r24, 0x01	; 1
     de4:	68 17       	cp	r22, r24
     de6:	b8 f0       	brcs	.+46     	; 0xe16 <Modbus_mster_transaction+0x684>
     de8:	94 e0       	ldi	r25, 0x04	; 4
     dea:	96 17       	cp	r25, r22
     dec:	18 f4       	brcc	.+6      	; 0xdf4 <Modbus_mster_transaction+0x662>
     dee:	a7 e1       	ldi	r26, 0x17	; 23
     df0:	6a 13       	cpse	r22, r26
     df2:	11 c0       	rjmp	.+34     	; 0xe16 <Modbus_mster_transaction+0x684>
     df4:	80 91 20 04 	lds	r24, 0x0420	; 0x800420 <g_mod1_read_address>
     df8:	90 91 21 04 	lds	r25, 0x0421	; 0x800421 <g_mod1_read_address+0x1>
     dfc:	9b 83       	std	Y+3, r25	; 0x03
     dfe:	8c 83       	std	Y+4, r24	; 0x04
     e00:	80 91 1e 04 	lds	r24, 0x041E	; 0x80041e <g_mod1_read_qty>
     e04:	90 91 1f 04 	lds	r25, 0x041F	; 0x80041f <g_mod1_read_qty+0x1>
     e08:	9d 83       	std	Y+5, r25	; 0x05
     e0a:	8e 83       	std	Y+6, r24	; 0x06
     e0c:	0f 2e       	mov	r0, r31
     e0e:	f6 e0       	ldi	r31, 0x06	; 6
     e10:	bf 2e       	mov	r11, r31
     e12:	f0 2d       	mov	r31, r0
     e14:	03 c0       	rjmp	.+6      	; 0xe1c <Modbus_mster_transaction+0x68a>
     e16:	68 94       	set
     e18:	bb 24       	eor	r11, r11
     e1a:	b1 f8       	bld	r11, 1
     e1c:	b0 e1       	ldi	r27, 0x10	; 16
     e1e:	bd 15       	cp	r27, r13
     e20:	40 f0       	brcs	.+16     	; 0xe32 <Modbus_mster_transaction+0x6a0>
     e22:	ef e0       	ldi	r30, 0x0F	; 15
     e24:	de 16       	cp	r13, r30
     e26:	70 f4       	brcc	.+28     	; 0xe44 <Modbus_mster_transaction+0x6b2>
     e28:	8b ef       	ldi	r24, 0xFB	; 251
     e2a:	8d 0d       	add	r24, r13
     e2c:	82 30       	cpi	r24, 0x02	; 2
     e2e:	00 f5       	brcc	.+64     	; 0xe70 <Modbus_mster_transaction+0x6de>
     e30:	09 c0       	rjmp	.+18     	; 0xe44 <Modbus_mster_transaction+0x6b2>
     e32:	f6 e1       	ldi	r31, 0x16	; 22
     e34:	df 16       	cp	r13, r31
     e36:	e0 f0       	brcs	.+56     	; 0xe70 <Modbus_mster_transaction+0x6de>
     e38:	27 e1       	ldi	r18, 0x17	; 23
     e3a:	2d 15       	cp	r18, r13
     e3c:	18 f4       	brcc	.+6      	; 0xe44 <Modbus_mster_transaction+0x6b2>
     e3e:	8f ef       	ldi	r24, 0xFF	; 255
     e40:	d8 12       	cpse	r13, r24
     e42:	16 c0       	rjmp	.+44     	; 0xe70 <Modbus_mster_transaction+0x6de>
     e44:	90 91 9c 03 	lds	r25, 0x039C	; 0x80039c <g_mod1_write_address>
     e48:	80 91 9d 03 	lds	r24, 0x039D	; 0x80039d <g_mod1_write_address+0x1>
     e4c:	e1 e0       	ldi	r30, 0x01	; 1
     e4e:	f0 e0       	ldi	r31, 0x00	; 0
     e50:	ec 0f       	add	r30, r28
     e52:	fd 1f       	adc	r31, r29
     e54:	eb 0d       	add	r30, r11
     e56:	f1 1d       	adc	r31, r1
     e58:	80 83       	st	Z, r24
     e5a:	81 e0       	ldi	r24, 0x01	; 1
     e5c:	8b 0d       	add	r24, r11
     e5e:	e1 e0       	ldi	r30, 0x01	; 1
     e60:	f0 e0       	ldi	r31, 0x00	; 0
     e62:	ec 0f       	add	r30, r28
     e64:	fd 1f       	adc	r31, r29
     e66:	e8 0f       	add	r30, r24
     e68:	f1 1d       	adc	r31, r1
     e6a:	b3 94       	inc	r11
     e6c:	b3 94       	inc	r11
     e6e:	90 83       	st	Z, r25
     e70:	90 e1       	ldi	r25, 0x10	; 16
     e72:	d9 16       	cp	r13, r25
     e74:	09 f4       	brne	.+2      	; 0xe78 <Modbus_mster_transaction+0x6e6>
     e76:	ad c0       	rjmp	.+346    	; 0xfd2 <Modbus_mster_transaction+0x840>
     e78:	9d 15       	cp	r25, r13
     e7a:	58 f0       	brcs	.+22     	; 0xe92 <Modbus_mster_transaction+0x700>
     e7c:	a6 e0       	ldi	r26, 0x06	; 6
     e7e:	da 16       	cp	r13, r26
     e80:	61 f1       	breq	.+88     	; 0xeda <Modbus_mster_transaction+0x748>
     e82:	bf e0       	ldi	r27, 0x0F	; 15
     e84:	db 16       	cp	r13, r27
     e86:	09 f4       	brne	.+2      	; 0xe8a <Modbus_mster_transaction+0x6f8>
     e88:	41 c0       	rjmp	.+130    	; 0xf0c <Modbus_mster_transaction+0x77a>
     e8a:	e5 e0       	ldi	r30, 0x05	; 5
     e8c:	de 12       	cpse	r13, r30
     e8e:	1b c1       	rjmp	.+566    	; 0x10c6 <Modbus_mster_transaction+0x934>
     e90:	0d c0       	rjmp	.+26     	; 0xeac <Modbus_mster_transaction+0x71a>
     e92:	f7 e1       	ldi	r31, 0x17	; 23
     e94:	df 16       	cp	r13, r31
     e96:	09 f4       	brne	.+2      	; 0xe9a <Modbus_mster_transaction+0x708>
     e98:	9c c0       	rjmp	.+312    	; 0xfd2 <Modbus_mster_transaction+0x840>
     e9a:	2f ef       	ldi	r18, 0xFF	; 255
     e9c:	d2 16       	cp	r13, r18
     e9e:	09 f4       	brne	.+2      	; 0xea2 <Modbus_mster_transaction+0x710>
     ea0:	98 c0       	rjmp	.+304    	; 0xfd2 <Modbus_mster_transaction+0x840>
     ea2:	86 e1       	ldi	r24, 0x16	; 22
     ea4:	d8 16       	cp	r13, r24
     ea6:	09 f4       	brne	.+2      	; 0xeaa <Modbus_mster_transaction+0x718>
     ea8:	e0 c0       	rjmp	.+448    	; 0x106a <Modbus_mster_transaction+0x8d8>
     eaa:	0d c1       	rjmp	.+538    	; 0x10c6 <Modbus_mster_transaction+0x934>
     eac:	90 91 9a 03 	lds	r25, 0x039A	; 0x80039a <g_mod1_write_qty>
     eb0:	80 91 9b 03 	lds	r24, 0x039B	; 0x80039b <g_mod1_write_qty+0x1>
     eb4:	e1 e0       	ldi	r30, 0x01	; 1
     eb6:	f0 e0       	ldi	r31, 0x00	; 0
     eb8:	ec 0f       	add	r30, r28
     eba:	fd 1f       	adc	r31, r29
     ebc:	eb 0d       	add	r30, r11
     ebe:	f1 1d       	adc	r31, r1
     ec0:	80 83       	st	Z, r24
     ec2:	81 e0       	ldi	r24, 0x01	; 1
     ec4:	8b 0d       	add	r24, r11
     ec6:	e1 e0       	ldi	r30, 0x01	; 1
     ec8:	f0 e0       	ldi	r31, 0x00	; 0
     eca:	ec 0f       	add	r30, r28
     ecc:	fd 1f       	adc	r31, r29
     ece:	e8 0f       	add	r30, r24
     ed0:	f1 1d       	adc	r31, r1
     ed2:	b3 94       	inc	r11
     ed4:	b3 94       	inc	r11
     ed6:	90 83       	st	Z, r25
     ed8:	f6 c0       	rjmp	.+492    	; 0x10c6 <Modbus_mster_transaction+0x934>
     eda:	ea e1       	ldi	r30, 0x1A	; 26
     edc:	f3 e0       	ldi	r31, 0x03	; 3
     ede:	80 81       	ld	r24, Z
     ee0:	91 81       	ldd	r25, Z+1	; 0x01
     ee2:	a1 e0       	ldi	r26, 0x01	; 1
     ee4:	b0 e0       	ldi	r27, 0x00	; 0
     ee6:	ac 0f       	add	r26, r28
     ee8:	bd 1f       	adc	r27, r29
     eea:	ab 0d       	add	r26, r11
     eec:	b1 1d       	adc	r27, r1
     eee:	9c 93       	st	X, r25
     ef0:	20 81       	ld	r18, Z
     ef2:	31 81       	ldd	r19, Z+1	; 0x01
     ef4:	81 e0       	ldi	r24, 0x01	; 1
     ef6:	8b 0d       	add	r24, r11
     ef8:	e1 e0       	ldi	r30, 0x01	; 1
     efa:	f0 e0       	ldi	r31, 0x00	; 0
     efc:	ec 0f       	add	r30, r28
     efe:	fd 1f       	adc	r31, r29
     f00:	e8 0f       	add	r30, r24
     f02:	f1 1d       	adc	r31, r1
     f04:	b3 94       	inc	r11
     f06:	b3 94       	inc	r11
     f08:	20 83       	st	Z, r18
     f0a:	dd c0       	rjmp	.+442    	; 0x10c6 <Modbus_mster_transaction+0x934>
     f0c:	80 91 9a 03 	lds	r24, 0x039A	; 0x80039a <g_mod1_write_qty>
     f10:	90 91 9b 03 	lds	r25, 0x039B	; 0x80039b <g_mod1_write_qty+0x1>
     f14:	e1 e0       	ldi	r30, 0x01	; 1
     f16:	f0 e0       	ldi	r31, 0x00	; 0
     f18:	ec 0f       	add	r30, r28
     f1a:	fd 1f       	adc	r31, r29
     f1c:	eb 0d       	add	r30, r11
     f1e:	f1 1d       	adc	r31, r1
     f20:	90 83       	st	Z, r25
     f22:	22 e0       	ldi	r18, 0x02	; 2
     f24:	2b 0d       	add	r18, r11
     f26:	31 e0       	ldi	r19, 0x01	; 1
     f28:	3b 0d       	add	r19, r11
     f2a:	e1 e0       	ldi	r30, 0x01	; 1
     f2c:	f0 e0       	ldi	r31, 0x00	; 0
     f2e:	ec 0f       	add	r30, r28
     f30:	fd 1f       	adc	r31, r29
     f32:	e3 0f       	add	r30, r19
     f34:	f1 1d       	adc	r31, r1
     f36:	80 83       	st	Z, r24
     f38:	ac 01       	movw	r20, r24
     f3a:	47 70       	andi	r20, 0x07	; 7
     f3c:	55 27       	eor	r21, r21
     f3e:	45 2b       	or	r20, r21
     f40:	49 f0       	breq	.+18     	; 0xf54 <Modbus_mster_transaction+0x7c2>
     f42:	96 95       	lsr	r25
     f44:	87 95       	ror	r24
     f46:	96 95       	lsr	r25
     f48:	87 95       	ror	r24
     f4a:	96 95       	lsr	r25
     f4c:	87 95       	ror	r24
     f4e:	91 e0       	ldi	r25, 0x01	; 1
     f50:	98 0f       	add	r25, r24
     f52:	07 c0       	rjmp	.+14     	; 0xf62 <Modbus_mster_transaction+0x7d0>
     f54:	96 95       	lsr	r25
     f56:	87 95       	ror	r24
     f58:	96 95       	lsr	r25
     f5a:	87 95       	ror	r24
     f5c:	96 95       	lsr	r25
     f5e:	87 95       	ror	r24
     f60:	98 2f       	mov	r25, r24
     f62:	a3 e0       	ldi	r26, 0x03	; 3
     f64:	ba 0e       	add	r11, r26
     f66:	fe 01       	movw	r30, r28
     f68:	e2 0f       	add	r30, r18
     f6a:	f1 1d       	adc	r31, r1
     f6c:	91 83       	std	Z+1, r25	; 0x01
     f6e:	99 23       	and	r25, r25
     f70:	09 f4       	brne	.+2      	; 0xf74 <Modbus_mster_transaction+0x7e2>
     f72:	a9 c0       	rjmp	.+338    	; 0x10c6 <Modbus_mster_transaction+0x934>
     f74:	80 e0       	ldi	r24, 0x00	; 0
     f76:	28 2f       	mov	r18, r24
     f78:	21 70       	andi	r18, 0x01	; 1
     f7a:	80 ff       	sbrs	r24, 0
     f7c:	03 c0       	rjmp	.+6      	; 0xf84 <Modbus_mster_transaction+0x7f2>
     f7e:	21 30       	cpi	r18, 0x01	; 1
     f80:	99 f0       	breq	.+38     	; 0xfa8 <Modbus_mster_transaction+0x816>
     f82:	23 c0       	rjmp	.+70     	; 0xfca <Modbus_mster_transaction+0x838>
     f84:	e8 2f       	mov	r30, r24
     f86:	e6 95       	lsr	r30
     f88:	f0 e0       	ldi	r31, 0x00	; 0
     f8a:	ee 0f       	add	r30, r30
     f8c:	ff 1f       	adc	r31, r31
     f8e:	e6 5e       	subi	r30, 0xE6	; 230
     f90:	fc 4f       	sbci	r31, 0xFC	; 252
     f92:	20 81       	ld	r18, Z
     f94:	31 81       	ldd	r19, Z+1	; 0x01
     f96:	e1 e0       	ldi	r30, 0x01	; 1
     f98:	f0 e0       	ldi	r31, 0x00	; 0
     f9a:	ec 0f       	add	r30, r28
     f9c:	fd 1f       	adc	r31, r29
     f9e:	eb 0d       	add	r30, r11
     fa0:	f1 1d       	adc	r31, r1
     fa2:	20 83       	st	Z, r18
     fa4:	b3 94       	inc	r11
     fa6:	11 c0       	rjmp	.+34     	; 0xfca <Modbus_mster_transaction+0x838>
     fa8:	e8 2f       	mov	r30, r24
     faa:	e6 95       	lsr	r30
     fac:	f0 e0       	ldi	r31, 0x00	; 0
     fae:	ee 0f       	add	r30, r30
     fb0:	ff 1f       	adc	r31, r31
     fb2:	e6 5e       	subi	r30, 0xE6	; 230
     fb4:	fc 4f       	sbci	r31, 0xFC	; 252
     fb6:	20 81       	ld	r18, Z
     fb8:	31 81       	ldd	r19, Z+1	; 0x01
     fba:	e1 e0       	ldi	r30, 0x01	; 1
     fbc:	f0 e0       	ldi	r31, 0x00	; 0
     fbe:	ec 0f       	add	r30, r28
     fc0:	fd 1f       	adc	r31, r29
     fc2:	eb 0d       	add	r30, r11
     fc4:	f1 1d       	adc	r31, r1
     fc6:	30 83       	st	Z, r19
     fc8:	b3 94       	inc	r11
     fca:	8f 5f       	subi	r24, 0xFF	; 255
     fcc:	98 13       	cpse	r25, r24
     fce:	d3 cf       	rjmp	.-90     	; 0xf76 <Modbus_mster_transaction+0x7e4>
     fd0:	7a c0       	rjmp	.+244    	; 0x10c6 <Modbus_mster_transaction+0x934>
     fd2:	80 91 9a 03 	lds	r24, 0x039A	; 0x80039a <g_mod1_write_qty>
     fd6:	90 91 9b 03 	lds	r25, 0x039B	; 0x80039b <g_mod1_write_qty+0x1>
     fda:	e1 e0       	ldi	r30, 0x01	; 1
     fdc:	f0 e0       	ldi	r31, 0x00	; 0
     fde:	ec 0f       	add	r30, r28
     fe0:	fd 1f       	adc	r31, r29
     fe2:	eb 0d       	add	r30, r11
     fe4:	f1 1d       	adc	r31, r1
     fe6:	90 83       	st	Z, r25
     fe8:	21 e0       	ldi	r18, 0x01	; 1
     fea:	2b 0d       	add	r18, r11
     fec:	e1 e0       	ldi	r30, 0x01	; 1
     fee:	f0 e0       	ldi	r31, 0x00	; 0
     ff0:	ec 0f       	add	r30, r28
     ff2:	fd 1f       	adc	r31, r29
     ff4:	e2 0f       	add	r30, r18
     ff6:	f1 1d       	adc	r31, r1
     ff8:	80 83       	st	Z, r24
     ffa:	22 e0       	ldi	r18, 0x02	; 2
     ffc:	2b 0d       	add	r18, r11
     ffe:	e1 e0       	ldi	r30, 0x01	; 1
    1000:	f0 e0       	ldi	r31, 0x00	; 0
    1002:	ec 0f       	add	r30, r28
    1004:	fd 1f       	adc	r31, r29
    1006:	e2 0f       	add	r30, r18
    1008:	f1 1d       	adc	r31, r1
    100a:	b3 e0       	ldi	r27, 0x03	; 3
    100c:	bb 0e       	add	r11, r27
    100e:	28 2f       	mov	r18, r24
    1010:	22 0f       	add	r18, r18
    1012:	20 83       	st	Z, r18
    1014:	ac 01       	movw	r20, r24
    1016:	55 27       	eor	r21, r21
    1018:	14 16       	cp	r1, r20
    101a:	15 06       	cpc	r1, r21
    101c:	0c f0       	brlt	.+2      	; 0x1020 <Modbus_mster_transaction+0x88e>
    101e:	53 c0       	rjmp	.+166    	; 0x10c6 <Modbus_mster_transaction+0x934>
    1020:	80 e0       	ldi	r24, 0x00	; 0
    1022:	90 e0       	ldi	r25, 0x00	; 0
    1024:	20 e0       	ldi	r18, 0x00	; 0
    1026:	88 0f       	add	r24, r24
    1028:	99 1f       	adc	r25, r25
    102a:	fc 01       	movw	r30, r24
    102c:	e6 5e       	subi	r30, 0xE6	; 230
    102e:	fc 4f       	sbci	r31, 0xFC	; 252
    1030:	80 81       	ld	r24, Z
    1032:	91 81       	ldd	r25, Z+1	; 0x01
    1034:	a1 e0       	ldi	r26, 0x01	; 1
    1036:	b0 e0       	ldi	r27, 0x00	; 0
    1038:	ac 0f       	add	r26, r28
    103a:	bd 1f       	adc	r27, r29
    103c:	ab 0d       	add	r26, r11
    103e:	b1 1d       	adc	r27, r1
    1040:	9c 93       	st	X, r25
    1042:	60 81       	ld	r22, Z
    1044:	71 81       	ldd	r23, Z+1	; 0x01
    1046:	81 e0       	ldi	r24, 0x01	; 1
    1048:	8b 0d       	add	r24, r11
    104a:	e1 e0       	ldi	r30, 0x01	; 1
    104c:	f0 e0       	ldi	r31, 0x00	; 0
    104e:	ec 0f       	add	r30, r28
    1050:	fd 1f       	adc	r31, r29
    1052:	e8 0f       	add	r30, r24
    1054:	f1 1d       	adc	r31, r1
    1056:	b3 94       	inc	r11
    1058:	b3 94       	inc	r11
    105a:	60 83       	st	Z, r22
    105c:	2f 5f       	subi	r18, 0xFF	; 255
    105e:	82 2f       	mov	r24, r18
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	84 17       	cp	r24, r20
    1064:	95 07       	cpc	r25, r21
    1066:	fc f2       	brlt	.-66     	; 0x1026 <Modbus_mster_transaction+0x894>
    1068:	2e c0       	rjmp	.+92     	; 0x10c6 <Modbus_mster_transaction+0x934>
    106a:	ea e1       	ldi	r30, 0x1A	; 26
    106c:	f3 e0       	ldi	r31, 0x03	; 3
    106e:	80 81       	ld	r24, Z
    1070:	91 81       	ldd	r25, Z+1	; 0x01
    1072:	a1 e0       	ldi	r26, 0x01	; 1
    1074:	b0 e0       	ldi	r27, 0x00	; 0
    1076:	ac 0f       	add	r26, r28
    1078:	bd 1f       	adc	r27, r29
    107a:	ab 0d       	add	r26, r11
    107c:	b1 1d       	adc	r27, r1
    107e:	9c 93       	st	X, r25
    1080:	80 81       	ld	r24, Z
    1082:	91 81       	ldd	r25, Z+1	; 0x01
    1084:	91 e0       	ldi	r25, 0x01	; 1
    1086:	9b 0d       	add	r25, r11
    1088:	a1 e0       	ldi	r26, 0x01	; 1
    108a:	b0 e0       	ldi	r27, 0x00	; 0
    108c:	ac 0f       	add	r26, r28
    108e:	bd 1f       	adc	r27, r29
    1090:	a9 0f       	add	r26, r25
    1092:	b1 1d       	adc	r27, r1
    1094:	8c 93       	st	X, r24
    1096:	82 81       	ldd	r24, Z+2	; 0x02
    1098:	93 81       	ldd	r25, Z+3	; 0x03
    109a:	82 e0       	ldi	r24, 0x02	; 2
    109c:	8b 0d       	add	r24, r11
    109e:	a1 e0       	ldi	r26, 0x01	; 1
    10a0:	b0 e0       	ldi	r27, 0x00	; 0
    10a2:	ac 0f       	add	r26, r28
    10a4:	bd 1f       	adc	r27, r29
    10a6:	a8 0f       	add	r26, r24
    10a8:	b1 1d       	adc	r27, r1
    10aa:	9c 93       	st	X, r25
    10ac:	22 81       	ldd	r18, Z+2	; 0x02
    10ae:	33 81       	ldd	r19, Z+3	; 0x03
    10b0:	83 e0       	ldi	r24, 0x03	; 3
    10b2:	8b 0d       	add	r24, r11
    10b4:	e1 e0       	ldi	r30, 0x01	; 1
    10b6:	f0 e0       	ldi	r31, 0x00	; 0
    10b8:	ec 0f       	add	r30, r28
    10ba:	fd 1f       	adc	r31, r29
    10bc:	e8 0f       	add	r30, r24
    10be:	f1 1d       	adc	r31, r1
    10c0:	84 e0       	ldi	r24, 0x04	; 4
    10c2:	b8 0e       	add	r11, r24
    10c4:	20 83       	st	Z, r18
    10c6:	bb 20       	and	r11, r11
    10c8:	b9 f0       	breq	.+46     	; 0x10f8 <Modbus_mster_transaction+0x966>
    10ca:	8e 01       	movw	r16, r28
    10cc:	0f 5f       	subi	r16, 0xFF	; 255
    10ce:	1f 4f       	sbci	r17, 0xFF	; 255
    10d0:	ee 24       	eor	r14, r14
    10d2:	ea 94       	dec	r14
    10d4:	eb 0c       	add	r14, r11
    10d6:	f1 2c       	mov	r15, r1
    10d8:	9f ef       	ldi	r25, 0xFF	; 255
    10da:	e9 1a       	sub	r14, r25
    10dc:	f9 0a       	sbc	r15, r25
    10de:	e0 0e       	add	r14, r16
    10e0:	f1 1e       	adc	r15, r17
    10e2:	8f ef       	ldi	r24, 0xFF	; 255
    10e4:	9f ef       	ldi	r25, 0xFF	; 255
    10e6:	d8 01       	movw	r26, r16
    10e8:	6d 91       	ld	r22, X+
    10ea:	8d 01       	movw	r16, r26
    10ec:	0e 94 d4 20 	call	0x41a8	; 0x41a8 <crc16_update>
    10f0:	0e 15       	cp	r16, r14
    10f2:	1f 05       	cpc	r17, r15
    10f4:	c1 f7       	brne	.-16     	; 0x10e6 <Modbus_mster_transaction+0x954>
    10f6:	02 c0       	rjmp	.+4      	; 0x10fc <Modbus_mster_transaction+0x96a>
    10f8:	8f ef       	ldi	r24, 0xFF	; 255
    10fa:	9f ef       	ldi	r25, 0xFF	; 255
    10fc:	ee 24       	eor	r14, r14
    10fe:	e3 94       	inc	r14
    1100:	eb 0c       	add	r14, r11
    1102:	e1 e0       	ldi	r30, 0x01	; 1
    1104:	f0 e0       	ldi	r31, 0x00	; 0
    1106:	ec 0f       	add	r30, r28
    1108:	fd 1f       	adc	r31, r29
    110a:	eb 0d       	add	r30, r11
    110c:	f1 1d       	adc	r31, r1
    110e:	80 83       	st	Z, r24
    1110:	b3 94       	inc	r11
    1112:	b3 94       	inc	r11
    1114:	e1 e0       	ldi	r30, 0x01	; 1
    1116:	f0 e0       	ldi	r31, 0x00	; 0
    1118:	ec 0f       	add	r30, r28
    111a:	fd 1f       	adc	r31, r29
    111c:	ee 0d       	add	r30, r14
    111e:	f1 1d       	adc	r31, r1
    1120:	90 83       	st	Z, r25
    1122:	e1 e0       	ldi	r30, 0x01	; 1
    1124:	f0 e0       	ldi	r31, 0x00	; 0
    1126:	ec 0f       	add	r30, r28
    1128:	fd 1f       	adc	r31, r29
    112a:	eb 0d       	add	r30, r11
    112c:	f1 1d       	adc	r31, r1
    112e:	10 82       	st	Z, r1
    1130:	e0 91 0d 03 	lds	r30, 0x030D	; 0x80030d <g_mod1_Serial_getc>
    1134:	f0 91 0e 03 	lds	r31, 0x030E	; 0x80030e <g_mod1_Serial_getc+0x1>
    1138:	19 95       	eicall
    113a:	81 15       	cp	r24, r1
    113c:	91 40       	sbci	r25, 0x01	; 1
    113e:	c1 f7       	brne	.-16     	; 0x1130 <Modbus_mster_transaction+0x99e>
    1140:	e0 91 13 03 	lds	r30, 0x0313	; 0x800313 <g_mod1_pre_transmission>
    1144:	f0 91 14 03 	lds	r31, 0x0314	; 0x800314 <g_mod1_pre_transmission+0x1>
    1148:	30 97       	sbiw	r30, 0x00	; 0
    114a:	09 f0       	breq	.+2      	; 0x114e <Modbus_mster_transaction+0x9bc>
    114c:	19 95       	eicall
    114e:	bb 20       	and	r11, r11
    1150:	a1 f0       	breq	.+40     	; 0x117a <Modbus_mster_transaction+0x9e8>
    1152:	8e 01       	movw	r16, r28
    1154:	0f 5f       	subi	r16, 0xFF	; 255
    1156:	1f 4f       	sbci	r17, 0xFF	; 255
    1158:	f1 2c       	mov	r15, r1
    115a:	ef ef       	ldi	r30, 0xFF	; 255
    115c:	ee 1a       	sub	r14, r30
    115e:	fe 0a       	sbc	r15, r30
    1160:	e0 0e       	add	r14, r16
    1162:	f1 1e       	adc	r15, r17
    1164:	e0 91 0f 03 	lds	r30, 0x030F	; 0x80030f <g_mod1_Serial_putc>
    1168:	f0 91 10 03 	lds	r31, 0x0310	; 0x800310 <g_mod1_Serial_putc+0x1>
    116c:	d8 01       	movw	r26, r16
    116e:	8d 91       	ld	r24, X+
    1170:	8d 01       	movw	r16, r26
    1172:	19 95       	eicall
    1174:	e0 16       	cp	r14, r16
    1176:	f1 06       	cpc	r15, r17
    1178:	a9 f7       	brne	.-22     	; 0x1164 <Modbus_mster_transaction+0x9d2>
    117a:	e0 91 09 03 	lds	r30, 0x0309	; 0x800309 <g_mod1_Serial_flush>
    117e:	f0 91 0a 03 	lds	r31, 0x030A	; 0x80030a <g_mod1_Serial_flush+0x1>
    1182:	19 95       	eicall
    1184:	e0 91 11 03 	lds	r30, 0x0311	; 0x800311 <g_mod1_post_transmission>
    1188:	f0 91 12 03 	lds	r31, 0x0312	; 0x800312 <g_mod1_post_transmission+0x1>
    118c:	30 97       	sbiw	r30, 0x00	; 0
    118e:	09 f0       	breq	.+2      	; 0x1192 <Modbus_mster_transaction+0xa00>
    1190:	19 95       	eicall
    1192:	0e 94 f5 20 	call	0x41ea	; 0x41ea <Get_millis>
    1196:	4b 01       	movw	r8, r22
    1198:	5c 01       	movw	r10, r24
    119a:	08 e0       	ldi	r16, 0x08	; 8
    119c:	10 e0       	ldi	r17, 0x00	; 0
    119e:	ed 2c       	mov	r14, r13
    11a0:	f1 2c       	mov	r15, r1
    11a2:	e0 91 0b 03 	lds	r30, 0x030B	; 0x80030b <g_mod1_Serial_available>
    11a6:	f0 91 0c 03 	lds	r31, 0x030C	; 0x80030c <g_mod1_Serial_available+0x1>
    11aa:	19 95       	eicall
    11ac:	89 2b       	or	r24, r25
    11ae:	91 f0       	breq	.+36     	; 0x11d4 <Modbus_mster_transaction+0xa42>
    11b0:	dd 24       	eor	r13, r13
    11b2:	d3 94       	inc	r13
    11b4:	d1 0e       	add	r13, r17
    11b6:	e0 91 0d 03 	lds	r30, 0x030D	; 0x80030d <g_mod1_Serial_getc>
    11ba:	f0 91 0e 03 	lds	r31, 0x030E	; 0x80030e <g_mod1_Serial_getc+0x1>
    11be:	19 95       	eicall
    11c0:	e1 e0       	ldi	r30, 0x01	; 1
    11c2:	f0 e0       	ldi	r31, 0x00	; 0
    11c4:	ec 0f       	add	r30, r28
    11c6:	fd 1f       	adc	r31, r29
    11c8:	e1 0f       	add	r30, r17
    11ca:	f1 1d       	adc	r31, r1
    11cc:	80 83       	st	Z, r24
    11ce:	01 50       	subi	r16, 0x01	; 1
    11d0:	1d 2d       	mov	r17, r13
    11d2:	07 c0       	rjmp	.+14     	; 0x11e2 <Modbus_mster_transaction+0xa50>
    11d4:	e0 91 15 03 	lds	r30, 0x0315	; 0x800315 <g_mod1_idle>
    11d8:	f0 91 16 03 	lds	r31, 0x0316	; 0x800316 <g_mod1_idle+0x1>
    11dc:	30 97       	sbiw	r30, 0x00	; 0
    11de:	09 f0       	breq	.+2      	; 0x11e2 <Modbus_mster_transaction+0xa50>
    11e0:	19 95       	eicall
    11e2:	15 30       	cpi	r17, 0x05	; 5
    11e4:	51 f5       	brne	.+84     	; 0x123a <Modbus_mster_transaction+0xaa8>
    11e6:	99 81       	ldd	r25, Y+1	; 0x01
    11e8:	80 91 22 04 	lds	r24, 0x0422	; 0x800422 <g_mod1_slave>
    11ec:	98 13       	cpse	r25, r24
    11ee:	3c c1       	rjmp	.+632    	; 0x1468 <Modbus_mster_transaction+0xcd6>
    11f0:	8a 81       	ldd	r24, Y+2	; 0x02
    11f2:	28 2f       	mov	r18, r24
    11f4:	2f 77       	andi	r18, 0x7F	; 127
    11f6:	30 e0       	ldi	r19, 0x00	; 0
    11f8:	2e 15       	cp	r18, r14
    11fa:	3f 05       	cpc	r19, r15
    11fc:	09 f0       	breq	.+2      	; 0x1200 <Modbus_mster_transaction+0xa6e>
    11fe:	36 c1       	rjmp	.+620    	; 0x146c <Modbus_mster_transaction+0xcda>
    1200:	88 23       	and	r24, r24
    1202:	24 f4       	brge	.+8      	; 0x120c <Modbus_mster_transaction+0xa7a>
    1204:	8b 81       	ldd	r24, Y+3	; 0x03
    1206:	88 23       	and	r24, r24
    1208:	b1 f1       	breq	.+108    	; 0x1276 <Modbus_mster_transaction+0xae4>
    120a:	bf c0       	rjmp	.+382    	; 0x138a <Modbus_mster_transaction+0xbf8>
    120c:	81 31       	cpi	r24, 0x11	; 17
    120e:	48 f4       	brcc	.+18     	; 0x1222 <Modbus_mster_transaction+0xa90>
    1210:	8f 30       	cpi	r24, 0x0F	; 15
    1212:	70 f4       	brcc	.+28     	; 0x1230 <Modbus_mster_transaction+0xa9e>
    1214:	81 30       	cpi	r24, 0x01	; 1
    1216:	88 f0       	brcs	.+34     	; 0x123a <Modbus_mster_transaction+0xaa8>
    1218:	85 30       	cpi	r24, 0x05	; 5
    121a:	60 f0       	brcs	.+24     	; 0x1234 <Modbus_mster_transaction+0xaa2>
    121c:	87 30       	cpi	r24, 0x07	; 7
    121e:	40 f0       	brcs	.+16     	; 0x1230 <Modbus_mster_transaction+0xa9e>
    1220:	0c c0       	rjmp	.+24     	; 0x123a <Modbus_mster_transaction+0xaa8>
    1222:	87 31       	cpi	r24, 0x17	; 23
    1224:	39 f0       	breq	.+14     	; 0x1234 <Modbus_mster_transaction+0xaa2>
    1226:	8f 3f       	cpi	r24, 0xFF	; 255
    1228:	19 f0       	breq	.+6      	; 0x1230 <Modbus_mster_transaction+0xa9e>
    122a:	86 31       	cpi	r24, 0x16	; 22
    122c:	29 f0       	breq	.+10     	; 0x1238 <Modbus_mster_transaction+0xaa6>
    122e:	05 c0       	rjmp	.+10     	; 0x123a <Modbus_mster_transaction+0xaa8>
    1230:	03 e0       	ldi	r16, 0x03	; 3
    1232:	03 c0       	rjmp	.+6      	; 0x123a <Modbus_mster_transaction+0xaa8>
    1234:	0b 81       	ldd	r16, Y+3	; 0x03
    1236:	01 c0       	rjmp	.+2      	; 0x123a <Modbus_mster_transaction+0xaa8>
    1238:	05 e0       	ldi	r16, 0x05	; 5
    123a:	0e 94 f5 20 	call	0x41ea	; 0x41ea <Get_millis>
    123e:	dc 01       	movw	r26, r24
    1240:	cb 01       	movw	r24, r22
    1242:	88 19       	sub	r24, r8
    1244:	99 09       	sbc	r25, r9
    1246:	aa 09       	sbc	r26, r10
    1248:	bb 09       	sbc	r27, r11
    124a:	81 3d       	cpi	r24, 0xD1	; 209
    124c:	97 40       	sbci	r25, 0x07	; 7
    124e:	a1 05       	cpc	r26, r1
    1250:	b1 05       	cpc	r27, r1
    1252:	08 f0       	brcs	.+2      	; 0x1256 <Modbus_mster_transaction+0xac4>
    1254:	fb c0       	rjmp	.+502    	; 0x144c <Modbus_mster_transaction+0xcba>
    1256:	fe c0       	rjmp	.+508    	; 0x1454 <Modbus_mster_transaction+0xcc2>
    1258:	81 11       	cpse	r24, r1
    125a:	97 c0       	rjmp	.+302    	; 0x138a <Modbus_mster_transaction+0xbf8>
    125c:	15 30       	cpi	r17, 0x05	; 5
    125e:	08 f4       	brcc	.+2      	; 0x1262 <Modbus_mster_transaction+0xad0>
    1260:	df c0       	rjmp	.+446    	; 0x1420 <Modbus_mster_transaction+0xc8e>
    1262:	01 2f       	mov	r16, r17
    1264:	10 e0       	ldi	r17, 0x00	; 0
    1266:	78 01       	movw	r14, r16
    1268:	f2 e0       	ldi	r31, 0x02	; 2
    126a:	ef 1a       	sub	r14, r31
    126c:	f1 08       	sbc	r15, r1
    126e:	1e 14       	cp	r1, r14
    1270:	1f 04       	cpc	r1, r15
    1272:	44 f0       	brlt	.+16     	; 0x1284 <Modbus_mster_transaction+0xaf2>
    1274:	c4 c0       	rjmp	.+392    	; 0x13fe <Modbus_mster_transaction+0xc6c>
    1276:	0f 2e       	mov	r0, r31
    1278:	f3 e0       	ldi	r31, 0x03	; 3
    127a:	ef 2e       	mov	r14, r31
    127c:	f1 2c       	mov	r15, r1
    127e:	f0 2d       	mov	r31, r0
    1280:	05 e0       	ldi	r16, 0x05	; 5
    1282:	10 e0       	ldi	r17, 0x00	; 0
    1284:	20 e0       	ldi	r18, 0x00	; 0
    1286:	30 e0       	ldi	r19, 0x00	; 0
    1288:	8f ef       	ldi	r24, 0xFF	; 255
    128a:	9f ef       	ldi	r25, 0xFF	; 255
    128c:	d1 2c       	mov	r13, r1
    128e:	e1 e0       	ldi	r30, 0x01	; 1
    1290:	f0 e0       	ldi	r31, 0x00	; 0
    1292:	ec 0f       	add	r30, r28
    1294:	fd 1f       	adc	r31, r29
    1296:	e2 0f       	add	r30, r18
    1298:	f3 1f       	adc	r31, r19
    129a:	60 81       	ld	r22, Z
    129c:	0e 94 d4 20 	call	0x41a8	; 0x41a8 <crc16_update>
    12a0:	d3 94       	inc	r13
    12a2:	2d 2d       	mov	r18, r13
    12a4:	30 e0       	ldi	r19, 0x00	; 0
    12a6:	2e 15       	cp	r18, r14
    12a8:	3f 05       	cpc	r19, r15
    12aa:	8c f3       	brlt	.-30     	; 0x128e <Modbus_mster_transaction+0xafc>
    12ac:	aa c0       	rjmp	.+340    	; 0x1402 <Modbus_mster_transaction+0xc70>
    12ae:	89 2f       	mov	r24, r25
    12b0:	99 27       	eor	r25, r25
    12b2:	fe 01       	movw	r30, r28
    12b4:	e0 0f       	add	r30, r16
    12b6:	f1 1f       	adc	r31, r17
    12b8:	20 81       	ld	r18, Z
    12ba:	30 e0       	ldi	r19, 0x00	; 0
    12bc:	82 17       	cp	r24, r18
    12be:	93 07       	cpc	r25, r19
    12c0:	09 f0       	breq	.+2      	; 0x12c4 <Modbus_mster_transaction+0xb32>
    12c2:	ac c0       	rjmp	.+344    	; 0x141c <Modbus_mster_transaction+0xc8a>
    12c4:	ad c0       	rjmp	.+346    	; 0x1420 <Modbus_mster_transaction+0xc8e>
    12c6:	8b 81       	ldd	r24, Y+3	; 0x03
    12c8:	86 95       	lsr	r24
    12ca:	e1 f5       	brne	.+120    	; 0x1344 <Modbus_mster_transaction+0xbb2>
    12cc:	5e c0       	rjmp	.+188    	; 0x138a <Modbus_mster_transaction+0xbf8>
    12ce:	6b 81       	ldd	r22, Y+3	; 0x03
    12d0:	86 2f       	mov	r24, r22
    12d2:	86 95       	lsr	r24
    12d4:	09 f4       	brne	.+2      	; 0x12d8 <Modbus_mster_transaction+0xb46>
    12d6:	b2 c0       	rjmp	.+356    	; 0x143c <Modbus_mster_transaction+0xcaa>
    12d8:	fe 01       	movw	r30, r28
    12da:	31 96       	adiw	r30, 0x01	; 1
    12dc:	40 e0       	ldi	r20, 0x00	; 0
    12de:	50 e0       	ldi	r21, 0x00	; 0
    12e0:	90 e0       	ldi	r25, 0x00	; 0
    12e2:	90 34       	cpi	r25, 0x40	; 64
    12e4:	70 f4       	brcc	.+28     	; 0x1302 <Modbus_mster_transaction+0xb70>
    12e6:	24 81       	ldd	r18, Z+4	; 0x04
    12e8:	30 e0       	ldi	r19, 0x00	; 0
    12ea:	32 2f       	mov	r19, r18
    12ec:	22 27       	eor	r18, r18
    12ee:	73 81       	ldd	r23, Z+3	; 0x03
    12f0:	27 2b       	or	r18, r23
    12f2:	da 01       	movw	r26, r20
    12f4:	aa 0f       	add	r26, r26
    12f6:	bb 1f       	adc	r27, r27
    12f8:	a2 56       	subi	r26, 0x62	; 98
    12fa:	bc 4f       	sbci	r27, 0xFC	; 252
    12fc:	11 96       	adiw	r26, 0x01	; 1
    12fe:	3c 93       	st	X, r19
    1300:	2e 93       	st	-X, r18
    1302:	9f 5f       	subi	r25, 0xFF	; 255
    1304:	4f 5f       	subi	r20, 0xFF	; 255
    1306:	5f 4f       	sbci	r21, 0xFF	; 255
    1308:	32 96       	adiw	r30, 0x02	; 2
    130a:	98 13       	cpse	r25, r24
    130c:	ea cf       	rjmp	.-44     	; 0x12e2 <Modbus_mster_transaction+0xb50>
    130e:	9f ef       	ldi	r25, 0xFF	; 255
    1310:	98 0f       	add	r25, r24
    1312:	90 93 17 03 	sts	0x0317, r25	; 0x800317 <g_mod1_response_buffer_length>
    1316:	60 ff       	sbrs	r22, 0
    1318:	35 c0       	rjmp	.+106    	; 0x1384 <Modbus_mster_transaction+0xbf2>
    131a:	80 34       	cpi	r24, 0x40	; 64
    131c:	70 f4       	brcc	.+28     	; 0x133a <Modbus_mster_transaction+0xba8>
    131e:	28 2f       	mov	r18, r24
    1320:	30 e0       	ldi	r19, 0x00	; 0
    1322:	22 0f       	add	r18, r18
    1324:	33 1f       	adc	r19, r19
    1326:	fe 01       	movw	r30, r28
    1328:	e2 0f       	add	r30, r18
    132a:	f3 1f       	adc	r31, r19
    132c:	44 81       	ldd	r20, Z+4	; 0x04
    132e:	50 e0       	ldi	r21, 0x00	; 0
    1330:	f9 01       	movw	r30, r18
    1332:	e2 56       	subi	r30, 0x62	; 98
    1334:	fc 4f       	sbci	r31, 0xFC	; 252
    1336:	51 83       	std	Z+1, r21	; 0x01
    1338:	40 83       	st	Z, r20
    133a:	8f 5f       	subi	r24, 0xFF	; 255
    133c:	80 93 17 03 	sts	0x0317, r24	; 0x800317 <g_mod1_response_buffer_length>
    1340:	80 e0       	ldi	r24, 0x00	; 0
    1342:	23 c0       	rjmp	.+70     	; 0x138a <Modbus_mster_transaction+0xbf8>
    1344:	fe 01       	movw	r30, r28
    1346:	31 96       	adiw	r30, 0x01	; 1
    1348:	40 e0       	ldi	r20, 0x00	; 0
    134a:	50 e0       	ldi	r21, 0x00	; 0
    134c:	90 e0       	ldi	r25, 0x00	; 0
    134e:	90 34       	cpi	r25, 0x40	; 64
    1350:	70 f4       	brcc	.+28     	; 0x136e <Modbus_mster_transaction+0xbdc>
    1352:	23 81       	ldd	r18, Z+3	; 0x03
    1354:	30 e0       	ldi	r19, 0x00	; 0
    1356:	32 2f       	mov	r19, r18
    1358:	22 27       	eor	r18, r18
    135a:	64 81       	ldd	r22, Z+4	; 0x04
    135c:	26 2b       	or	r18, r22
    135e:	da 01       	movw	r26, r20
    1360:	aa 0f       	add	r26, r26
    1362:	bb 1f       	adc	r27, r27
    1364:	a2 56       	subi	r26, 0x62	; 98
    1366:	bc 4f       	sbci	r27, 0xFC	; 252
    1368:	11 96       	adiw	r26, 0x01	; 1
    136a:	3c 93       	st	X, r19
    136c:	2e 93       	st	-X, r18
    136e:	9f 5f       	subi	r25, 0xFF	; 255
    1370:	4f 5f       	subi	r20, 0xFF	; 255
    1372:	5f 4f       	sbci	r21, 0xFF	; 255
    1374:	32 96       	adiw	r30, 0x02	; 2
    1376:	98 13       	cpse	r25, r24
    1378:	ea cf       	rjmp	.-44     	; 0x134e <Modbus_mster_transaction+0xbbc>
    137a:	81 50       	subi	r24, 0x01	; 1
    137c:	80 93 17 03 	sts	0x0317, r24	; 0x800317 <g_mod1_response_buffer_length>
    1380:	80 e0       	ldi	r24, 0x00	; 0
    1382:	03 c0       	rjmp	.+6      	; 0x138a <Modbus_mster_transaction+0xbf8>
    1384:	80 e0       	ldi	r24, 0x00	; 0
    1386:	01 c0       	rjmp	.+2      	; 0x138a <Modbus_mster_transaction+0xbf8>
    1388:	80 e0       	ldi	r24, 0x00	; 0
    138a:	10 92 19 03 	sts	0x0319, r1	; 0x800319 <g_mod1_transmit_buffer_index>
    138e:	10 92 18 03 	sts	0x0318, r1	; 0x800318 <g_mod1_response_buffer_index>
    1392:	70 c0       	rjmp	.+224    	; 0x1474 <Modbus_mster_transaction+0xce2>
    1394:	84 ee       	ldi	r24, 0xE4	; 228
    1396:	6e c0       	rjmp	.+220    	; 0x1474 <Modbus_mster_transaction+0xce2>
    1398:	03 e0       	ldi	r16, 0x03	; 3
    139a:	0e 94 f5 20 	call	0x41ea	; 0x41ea <Get_millis>
    139e:	dc 01       	movw	r26, r24
    13a0:	cb 01       	movw	r24, r22
    13a2:	88 19       	sub	r24, r8
    13a4:	99 09       	sbc	r25, r9
    13a6:	aa 09       	sbc	r26, r10
    13a8:	bb 09       	sbc	r27, r11
    13aa:	81 3d       	cpi	r24, 0xD1	; 209
    13ac:	97 40       	sbci	r25, 0x07	; 7
    13ae:	a1 05       	cpc	r26, r1
    13b0:	b1 05       	cpc	r27, r1
    13b2:	08 f4       	brcc	.+2      	; 0x13b6 <Modbus_mster_transaction+0xc24>
    13b4:	ff cb       	rjmp	.-2050   	; 0xbb4 <Modbus_mster_transaction+0x422>
    13b6:	59 cc       	rjmp	.-1870   	; 0xc6a <Modbus_mster_transaction+0x4d8>
    13b8:	8f ef       	ldi	r24, 0xFF	; 255
    13ba:	9f ef       	ldi	r25, 0xFF	; 255
    13bc:	fe 01       	movw	r30, r28
    13be:	ee 0d       	add	r30, r14
    13c0:	ff 1d       	adc	r31, r15
    13c2:	21 81       	ldd	r18, Z+1	; 0x01
    13c4:	30 e0       	ldi	r19, 0x00	; 0
    13c6:	ac 01       	movw	r20, r24
    13c8:	55 27       	eor	r21, r21
    13ca:	42 17       	cp	r20, r18
    13cc:	53 07       	cpc	r21, r19
    13ce:	09 f4       	brne	.+2      	; 0x13d2 <Modbus_mster_transaction+0xc40>
    13d0:	84 cc       	rjmp	.-1784   	; 0xcda <Modbus_mster_transaction+0x548>
    13d2:	83 ee       	ldi	r24, 0xE3	; 227
    13d4:	f1 cc       	rjmp	.-1566   	; 0xdb8 <Modbus_mster_transaction+0x626>
    13d6:	83 ee       	ldi	r24, 0xE3	; 227
    13d8:	ef cc       	rjmp	.-1570   	; 0xdb8 <Modbus_mster_transaction+0x626>
    13da:	8a 81       	ldd	r24, Y+2	; 0x02
    13dc:	85 30       	cpi	r24, 0x05	; 5
    13de:	38 f4       	brcc	.+14     	; 0x13ee <Modbus_mster_transaction+0xc5c>
    13e0:	83 30       	cpi	r24, 0x03	; 3
    13e2:	08 f0       	brcs	.+2      	; 0x13e6 <Modbus_mster_transaction+0xc54>
    13e4:	86 cc       	rjmp	.-1780   	; 0xcf2 <Modbus_mster_transaction+0x560>
    13e6:	81 30       	cpi	r24, 0x01	; 1
    13e8:	08 f0       	brcs	.+2      	; 0x13ec <Modbus_mster_transaction+0xc5a>
    13ea:	88 cc       	rjmp	.-1776   	; 0xcfc <Modbus_mster_transaction+0x56a>
    13ec:	e4 cc       	rjmp	.-1592   	; 0xdb6 <Modbus_mster_transaction+0x624>
    13ee:	87 31       	cpi	r24, 0x17	; 23
    13f0:	09 f4       	brne	.+2      	; 0x13f4 <Modbus_mster_transaction+0xc62>
    13f2:	7f cc       	rjmp	.-1794   	; 0xcf2 <Modbus_mster_transaction+0x560>
    13f4:	e0 cc       	rjmp	.-1600   	; 0xdb6 <Modbus_mster_transaction+0x624>
    13f6:	70 fd       	sbrc	r23, 0
    13f8:	a9 cc       	rjmp	.-1710   	; 0xd4c <Modbus_mster_transaction+0x5ba>
    13fa:	80 e0       	ldi	r24, 0x00	; 0
    13fc:	dd cc       	rjmp	.-1606   	; 0xdb8 <Modbus_mster_transaction+0x626>
    13fe:	8f ef       	ldi	r24, 0xFF	; 255
    1400:	9f ef       	ldi	r25, 0xFF	; 255
    1402:	fe 01       	movw	r30, r28
    1404:	ee 0d       	add	r30, r14
    1406:	ff 1d       	adc	r31, r15
    1408:	21 81       	ldd	r18, Z+1	; 0x01
    140a:	30 e0       	ldi	r19, 0x00	; 0
    140c:	ac 01       	movw	r20, r24
    140e:	55 27       	eor	r21, r21
    1410:	42 17       	cp	r20, r18
    1412:	53 07       	cpc	r21, r19
    1414:	09 f4       	brne	.+2      	; 0x1418 <Modbus_mster_transaction+0xc86>
    1416:	4b cf       	rjmp	.-362    	; 0x12ae <Modbus_mster_transaction+0xb1c>
    1418:	83 ee       	ldi	r24, 0xE3	; 227
    141a:	b7 cf       	rjmp	.-146    	; 0x138a <Modbus_mster_transaction+0xbf8>
    141c:	83 ee       	ldi	r24, 0xE3	; 227
    141e:	b5 cf       	rjmp	.-150    	; 0x138a <Modbus_mster_transaction+0xbf8>
    1420:	8a 81       	ldd	r24, Y+2	; 0x02
    1422:	85 30       	cpi	r24, 0x05	; 5
    1424:	38 f4       	brcc	.+14     	; 0x1434 <Modbus_mster_transaction+0xca2>
    1426:	83 30       	cpi	r24, 0x03	; 3
    1428:	08 f0       	brcs	.+2      	; 0x142c <Modbus_mster_transaction+0xc9a>
    142a:	4d cf       	rjmp	.-358    	; 0x12c6 <Modbus_mster_transaction+0xb34>
    142c:	81 30       	cpi	r24, 0x01	; 1
    142e:	08 f0       	brcs	.+2      	; 0x1432 <Modbus_mster_transaction+0xca0>
    1430:	4e cf       	rjmp	.-356    	; 0x12ce <Modbus_mster_transaction+0xb3c>
    1432:	aa cf       	rjmp	.-172    	; 0x1388 <Modbus_mster_transaction+0xbf6>
    1434:	87 31       	cpi	r24, 0x17	; 23
    1436:	09 f4       	brne	.+2      	; 0x143a <Modbus_mster_transaction+0xca8>
    1438:	46 cf       	rjmp	.-372    	; 0x12c6 <Modbus_mster_transaction+0xb34>
    143a:	a6 cf       	rjmp	.-180    	; 0x1388 <Modbus_mster_transaction+0xbf6>
    143c:	60 fd       	sbrc	r22, 0
    143e:	6f cf       	rjmp	.-290    	; 0x131e <Modbus_mster_transaction+0xb8c>
    1440:	80 e0       	ldi	r24, 0x00	; 0
    1442:	a3 cf       	rjmp	.-186    	; 0x138a <Modbus_mster_transaction+0xbf8>
    1444:	01 11       	cpse	r16, r1
    1446:	b6 cb       	rjmp	.-2196   	; 0xbb4 <Modbus_mster_transaction+0x422>
    1448:	80 e0       	ldi	r24, 0x00	; 0
    144a:	19 cc       	rjmp	.-1998   	; 0xc7e <Modbus_mster_transaction+0x4ec>
    144c:	01 11       	cpse	r16, r1
    144e:	10 c0       	rjmp	.+32     	; 0x1470 <Modbus_mster_transaction+0xcde>
    1450:	82 ee       	ldi	r24, 0xE2	; 226
    1452:	02 cf       	rjmp	.-508    	; 0x1258 <Modbus_mster_transaction+0xac6>
    1454:	01 11       	cpse	r16, r1
    1456:	a5 ce       	rjmp	.-694    	; 0x11a2 <Modbus_mster_transaction+0xa10>
    1458:	80 e0       	ldi	r24, 0x00	; 0
    145a:	fe ce       	rjmp	.-516    	; 0x1258 <Modbus_mster_transaction+0xac6>
    145c:	80 ee       	ldi	r24, 0xE0	; 224
    145e:	ac cc       	rjmp	.-1704   	; 0xdb8 <Modbus_mster_transaction+0x626>
    1460:	81 ee       	ldi	r24, 0xE1	; 225
    1462:	aa cc       	rjmp	.-1708   	; 0xdb8 <Modbus_mster_transaction+0x626>
    1464:	82 ee       	ldi	r24, 0xE2	; 226
    1466:	a8 cc       	rjmp	.-1712   	; 0xdb8 <Modbus_mster_transaction+0x626>
    1468:	80 ee       	ldi	r24, 0xE0	; 224
    146a:	8f cf       	rjmp	.-226    	; 0x138a <Modbus_mster_transaction+0xbf8>
    146c:	81 ee       	ldi	r24, 0xE1	; 225
    146e:	8d cf       	rjmp	.-230    	; 0x138a <Modbus_mster_transaction+0xbf8>
    1470:	82 ee       	ldi	r24, 0xE2	; 226
    1472:	8b cf       	rjmp	.-234    	; 0x138a <Modbus_mster_transaction+0xbf8>
    1474:	d3 95       	inc	r29
    1476:	0f b6       	in	r0, 0x3f	; 63
    1478:	f8 94       	cli
    147a:	de bf       	out	0x3e, r29	; 62
    147c:	0f be       	out	0x3f, r0	; 63
    147e:	cd bf       	out	0x3d, r28	; 61
    1480:	df 91       	pop	r29
    1482:	cf 91       	pop	r28
    1484:	1f 91       	pop	r17
    1486:	0f 91       	pop	r16
    1488:	ff 90       	pop	r15
    148a:	ef 90       	pop	r14
    148c:	df 90       	pop	r13
    148e:	bf 90       	pop	r11
    1490:	af 90       	pop	r10
    1492:	9f 90       	pop	r9
    1494:	8f 90       	pop	r8
    1496:	08 95       	ret

00001498 <Modbus_init>:
    1498:	fb 01       	movw	r30, r22
    149a:	81 11       	cpse	r24, r1
    149c:	86 c0       	rjmp	.+268    	; 0x15aa <Modbus_init+0x112>
    149e:	80 81       	ld	r24, Z
    14a0:	80 93 3c 05 	sts	0x053C, r24	; 0x80053c <g_mod0_slave>
    14a4:	41 81       	ldd	r20, Z+1	; 0x01
    14a6:	62 81       	ldd	r22, Z+2	; 0x02
    14a8:	73 81       	ldd	r23, Z+3	; 0x03
    14aa:	84 81       	ldd	r24, Z+4	; 0x04
    14ac:	95 81       	ldd	r25, Z+5	; 0x05
    14ae:	26 81       	ldd	r18, Z+6	; 0x06
    14b0:	37 81       	ldd	r19, Z+7	; 0x07
    14b2:	30 93 2e 04 	sts	0x042E, r19	; 0x80042e <g_mod0_pre_transmission+0x1>
    14b6:	20 93 2d 04 	sts	0x042D, r18	; 0x80042d <g_mod0_pre_transmission>
    14ba:	20 85       	ldd	r18, Z+8	; 0x08
    14bc:	31 85       	ldd	r19, Z+9	; 0x09
    14be:	30 93 2c 04 	sts	0x042C, r19	; 0x80042c <g_mod0_post_transmission+0x1>
    14c2:	20 93 2b 04 	sts	0x042B, r18	; 0x80042b <g_mod0_post_transmission>
    14c6:	10 92 30 04 	sts	0x0430, r1	; 0x800430 <g_mod0_idle+0x1>
    14ca:	10 92 2f 04 	sts	0x042F, r1	; 0x80042f <g_mod0_idle>
    14ce:	10 92 32 04 	sts	0x0432, r1	; 0x800432 <g_mod0_response_buffer_index>
    14d2:	10 92 31 04 	sts	0x0431, r1	; 0x800431 <g_mod0_response_buffer_length>
    14d6:	41 30       	cpi	r20, 0x01	; 1
    14d8:	09 f5       	brne	.+66     	; 0x151c <Modbus_init+0x84>
    14da:	20 91 08 03 	lds	r18, 0x0308	; 0x800308 <UART1_used.1994>
    14de:	21 11       	cpse	r18, r1
    14e0:	c8 c0       	rjmp	.+400    	; 0x1672 <Modbus_init+0x1da>
    14e2:	21 e0       	ldi	r18, 0x01	; 1
    14e4:	20 93 08 03 	sts	0x0308, r18	; 0x800308 <UART1_used.1994>
    14e8:	d3 d4       	rcall	.+2470   	; 0x1e90 <UART1_init>
    14ea:	86 ed       	ldi	r24, 0xD6	; 214
    14ec:	9f e0       	ldi	r25, 0x0F	; 15
    14ee:	90 93 24 04 	sts	0x0424, r25	; 0x800424 <g_mod0_Serial_available+0x1>
    14f2:	80 93 23 04 	sts	0x0423, r24	; 0x800423 <g_mod0_Serial_available>
    14f6:	84 ee       	ldi	r24, 0xE4	; 228
    14f8:	9f e0       	ldi	r25, 0x0F	; 15
    14fa:	90 93 26 04 	sts	0x0426, r25	; 0x800426 <g_mod0_Serial_flush+0x1>
    14fe:	80 93 25 04 	sts	0x0425, r24	; 0x800425 <g_mod0_Serial_flush>
    1502:	8d e9       	ldi	r24, 0x9D	; 157
    1504:	9f e0       	ldi	r25, 0x0F	; 15
    1506:	90 93 28 04 	sts	0x0428, r25	; 0x800428 <g_mod0_Serial_getc+0x1>
    150a:	80 93 27 04 	sts	0x0427, r24	; 0x800427 <g_mod0_Serial_getc>
    150e:	8d eb       	ldi	r24, 0xBD	; 189
    1510:	9f e0       	ldi	r25, 0x0F	; 15
    1512:	90 93 2a 04 	sts	0x042A, r25	; 0x80042a <g_mod0_Serial_putc+0x1>
    1516:	80 93 29 04 	sts	0x0429, r24	; 0x800429 <g_mod0_Serial_putc>
    151a:	08 95       	ret
    151c:	42 30       	cpi	r20, 0x02	; 2
    151e:	09 f5       	brne	.+66     	; 0x1562 <Modbus_init+0xca>
    1520:	20 91 07 03 	lds	r18, 0x0307	; 0x800307 <UART2_used.1995>
    1524:	21 11       	cpse	r18, r1
    1526:	a5 c0       	rjmp	.+330    	; 0x1672 <Modbus_init+0x1da>
    1528:	21 e0       	ldi	r18, 0x01	; 1
    152a:	20 93 07 03 	sts	0x0307, r18	; 0x800307 <UART2_used.1995>
    152e:	bf d5       	rcall	.+2942   	; 0x20ae <UART2_init>
    1530:	82 ee       	ldi	r24, 0xE2	; 226
    1532:	90 e1       	ldi	r25, 0x10	; 16
    1534:	90 93 24 04 	sts	0x0424, r25	; 0x800424 <g_mod0_Serial_available+0x1>
    1538:	80 93 23 04 	sts	0x0423, r24	; 0x800423 <g_mod0_Serial_available>
    153c:	80 ef       	ldi	r24, 0xF0	; 240
    153e:	90 e1       	ldi	r25, 0x10	; 16
    1540:	90 93 26 04 	sts	0x0426, r25	; 0x800426 <g_mod0_Serial_flush+0x1>
    1544:	80 93 25 04 	sts	0x0425, r24	; 0x800425 <g_mod0_Serial_flush>
    1548:	8c ea       	ldi	r24, 0xAC	; 172
    154a:	90 e1       	ldi	r25, 0x10	; 16
    154c:	90 93 28 04 	sts	0x0428, r25	; 0x800428 <g_mod0_Serial_getc+0x1>
    1550:	80 93 27 04 	sts	0x0427, r24	; 0x800427 <g_mod0_Serial_getc>
    1554:	89 ec       	ldi	r24, 0xC9	; 201
    1556:	90 e1       	ldi	r25, 0x10	; 16
    1558:	90 93 2a 04 	sts	0x042A, r25	; 0x80042a <g_mod0_Serial_putc+0x1>
    155c:	80 93 29 04 	sts	0x0429, r24	; 0x800429 <g_mod0_Serial_putc>
    1560:	08 95       	ret
    1562:	43 30       	cpi	r20, 0x03	; 3
    1564:	09 f0       	breq	.+2      	; 0x1568 <Modbus_init+0xd0>
    1566:	85 c0       	rjmp	.+266    	; 0x1672 <Modbus_init+0x1da>
    1568:	20 91 06 03 	lds	r18, 0x0306	; 0x800306 <UART3_used.1996>
    156c:	21 11       	cpse	r18, r1
    156e:	81 c0       	rjmp	.+258    	; 0x1672 <Modbus_init+0x1da>
    1570:	21 e0       	ldi	r18, 0x01	; 1
    1572:	20 93 06 03 	sts	0x0306, r18	; 0x800306 <UART3_used.1996>
    1576:	a7 d6       	rcall	.+3406   	; 0x22c6 <UART3_init>
    1578:	8e ee       	ldi	r24, 0xEE	; 238
    157a:	91 e1       	ldi	r25, 0x11	; 17
    157c:	90 93 24 04 	sts	0x0424, r25	; 0x800424 <g_mod0_Serial_available+0x1>
    1580:	80 93 23 04 	sts	0x0423, r24	; 0x800423 <g_mod0_Serial_available>
    1584:	8c ef       	ldi	r24, 0xFC	; 252
    1586:	91 e1       	ldi	r25, 0x11	; 17
    1588:	90 93 26 04 	sts	0x0426, r25	; 0x800426 <g_mod0_Serial_flush+0x1>
    158c:	80 93 25 04 	sts	0x0425, r24	; 0x800425 <g_mod0_Serial_flush>
    1590:	88 eb       	ldi	r24, 0xB8	; 184
    1592:	91 e1       	ldi	r25, 0x11	; 17
    1594:	90 93 28 04 	sts	0x0428, r25	; 0x800428 <g_mod0_Serial_getc+0x1>
    1598:	80 93 27 04 	sts	0x0427, r24	; 0x800427 <g_mod0_Serial_getc>
    159c:	85 ed       	ldi	r24, 0xD5	; 213
    159e:	91 e1       	ldi	r25, 0x11	; 17
    15a0:	90 93 2a 04 	sts	0x042A, r25	; 0x80042a <g_mod0_Serial_putc+0x1>
    15a4:	80 93 29 04 	sts	0x0429, r24	; 0x800429 <g_mod0_Serial_putc>
    15a8:	08 95       	ret
    15aa:	81 30       	cpi	r24, 0x01	; 1
    15ac:	09 f0       	breq	.+2      	; 0x15b0 <Modbus_init+0x118>
    15ae:	61 c0       	rjmp	.+194    	; 0x1672 <Modbus_init+0x1da>
    15b0:	80 81       	ld	r24, Z
    15b2:	80 93 22 04 	sts	0x0422, r24	; 0x800422 <g_mod1_slave>
    15b6:	41 81       	ldd	r20, Z+1	; 0x01
    15b8:	62 81       	ldd	r22, Z+2	; 0x02
    15ba:	73 81       	ldd	r23, Z+3	; 0x03
    15bc:	84 81       	ldd	r24, Z+4	; 0x04
    15be:	95 81       	ldd	r25, Z+5	; 0x05
    15c0:	26 81       	ldd	r18, Z+6	; 0x06
    15c2:	37 81       	ldd	r19, Z+7	; 0x07
    15c4:	30 93 14 03 	sts	0x0314, r19	; 0x800314 <g_mod1_pre_transmission+0x1>
    15c8:	20 93 13 03 	sts	0x0313, r18	; 0x800313 <g_mod1_pre_transmission>
    15cc:	20 85       	ldd	r18, Z+8	; 0x08
    15ce:	31 85       	ldd	r19, Z+9	; 0x09
    15d0:	30 93 12 03 	sts	0x0312, r19	; 0x800312 <g_mod1_post_transmission+0x1>
    15d4:	20 93 11 03 	sts	0x0311, r18	; 0x800311 <g_mod1_post_transmission>
    15d8:	10 92 16 03 	sts	0x0316, r1	; 0x800316 <g_mod1_idle+0x1>
    15dc:	10 92 15 03 	sts	0x0315, r1	; 0x800315 <g_mod1_idle>
    15e0:	10 92 18 03 	sts	0x0318, r1	; 0x800318 <g_mod1_response_buffer_index>
    15e4:	10 92 17 03 	sts	0x0317, r1	; 0x800317 <g_mod1_response_buffer_length>
    15e8:	41 30       	cpi	r20, 0x01	; 1
    15ea:	09 f5       	brne	.+66     	; 0x162e <Modbus_init+0x196>
    15ec:	20 91 08 03 	lds	r18, 0x0308	; 0x800308 <UART1_used.1994>
    15f0:	21 11       	cpse	r18, r1
    15f2:	3f c0       	rjmp	.+126    	; 0x1672 <Modbus_init+0x1da>
    15f4:	21 e0       	ldi	r18, 0x01	; 1
    15f6:	20 93 08 03 	sts	0x0308, r18	; 0x800308 <UART1_used.1994>
    15fa:	4a d4       	rcall	.+2196   	; 0x1e90 <UART1_init>
    15fc:	86 ed       	ldi	r24, 0xD6	; 214
    15fe:	9f e0       	ldi	r25, 0x0F	; 15
    1600:	90 93 0c 03 	sts	0x030C, r25	; 0x80030c <g_mod1_Serial_available+0x1>
    1604:	80 93 0b 03 	sts	0x030B, r24	; 0x80030b <g_mod1_Serial_available>
    1608:	84 ee       	ldi	r24, 0xE4	; 228
    160a:	9f e0       	ldi	r25, 0x0F	; 15
    160c:	90 93 0a 03 	sts	0x030A, r25	; 0x80030a <g_mod1_Serial_flush+0x1>
    1610:	80 93 09 03 	sts	0x0309, r24	; 0x800309 <g_mod1_Serial_flush>
    1614:	8d e9       	ldi	r24, 0x9D	; 157
    1616:	9f e0       	ldi	r25, 0x0F	; 15
    1618:	90 93 0e 03 	sts	0x030E, r25	; 0x80030e <g_mod1_Serial_getc+0x1>
    161c:	80 93 0d 03 	sts	0x030D, r24	; 0x80030d <g_mod1_Serial_getc>
    1620:	8d eb       	ldi	r24, 0xBD	; 189
    1622:	9f e0       	ldi	r25, 0x0F	; 15
    1624:	90 93 10 03 	sts	0x0310, r25	; 0x800310 <g_mod1_Serial_putc+0x1>
    1628:	80 93 0f 03 	sts	0x030F, r24	; 0x80030f <g_mod1_Serial_putc>
    162c:	08 95       	ret
    162e:	42 30       	cpi	r20, 0x02	; 2
    1630:	01 f5       	brne	.+64     	; 0x1672 <Modbus_init+0x1da>
    1632:	20 91 07 03 	lds	r18, 0x0307	; 0x800307 <UART2_used.1995>
    1636:	21 11       	cpse	r18, r1
    1638:	1c c0       	rjmp	.+56     	; 0x1672 <Modbus_init+0x1da>
    163a:	21 e0       	ldi	r18, 0x01	; 1
    163c:	20 93 07 03 	sts	0x0307, r18	; 0x800307 <UART2_used.1995>
    1640:	36 d5       	rcall	.+2668   	; 0x20ae <UART2_init>
    1642:	82 ee       	ldi	r24, 0xE2	; 226
    1644:	90 e1       	ldi	r25, 0x10	; 16
    1646:	90 93 0c 03 	sts	0x030C, r25	; 0x80030c <g_mod1_Serial_available+0x1>
    164a:	80 93 0b 03 	sts	0x030B, r24	; 0x80030b <g_mod1_Serial_available>
    164e:	80 ef       	ldi	r24, 0xF0	; 240
    1650:	90 e1       	ldi	r25, 0x10	; 16
    1652:	90 93 0a 03 	sts	0x030A, r25	; 0x80030a <g_mod1_Serial_flush+0x1>
    1656:	80 93 09 03 	sts	0x0309, r24	; 0x800309 <g_mod1_Serial_flush>
    165a:	8c ea       	ldi	r24, 0xAC	; 172
    165c:	90 e1       	ldi	r25, 0x10	; 16
    165e:	90 93 0e 03 	sts	0x030E, r25	; 0x80030e <g_mod1_Serial_getc+0x1>
    1662:	80 93 0d 03 	sts	0x030D, r24	; 0x80030d <g_mod1_Serial_getc>
    1666:	89 ec       	ldi	r24, 0xC9	; 201
    1668:	90 e1       	ldi	r25, 0x10	; 16
    166a:	90 93 10 03 	sts	0x0310, r25	; 0x800310 <g_mod1_Serial_putc+0x1>
    166e:	80 93 0f 03 	sts	0x030F, r24	; 0x80030f <g_mod1_Serial_putc>
    1672:	08 95       	ret

00001674 <Modbus_Get_response_buffer>:
    1674:	81 11       	cpse	r24, r1
    1676:	0b c0       	rjmp	.+22     	; 0x168e <Modbus_Get_response_buffer+0x1a>
    1678:	60 34       	cpi	r22, 0x40	; 64
    167a:	b0 f4       	brcc	.+44     	; 0x16a8 <Modbus_Get_response_buffer+0x34>
    167c:	e6 2f       	mov	r30, r22
    167e:	f0 e0       	ldi	r31, 0x00	; 0
    1680:	ee 0f       	add	r30, r30
    1682:	ff 1f       	adc	r31, r31
    1684:	e8 54       	subi	r30, 0x48	; 72
    1686:	fb 4f       	sbci	r31, 0xFB	; 251
    1688:	80 81       	ld	r24, Z
    168a:	91 81       	ldd	r25, Z+1	; 0x01
    168c:	08 95       	ret
    168e:	81 30       	cpi	r24, 0x01	; 1
    1690:	71 f4       	brne	.+28     	; 0x16ae <Modbus_Get_response_buffer+0x3a>
    1692:	60 34       	cpi	r22, 0x40	; 64
    1694:	78 f4       	brcc	.+30     	; 0x16b4 <Modbus_Get_response_buffer+0x40>
    1696:	e6 2f       	mov	r30, r22
    1698:	f0 e0       	ldi	r31, 0x00	; 0
    169a:	ee 0f       	add	r30, r30
    169c:	ff 1f       	adc	r31, r31
    169e:	e2 56       	subi	r30, 0x62	; 98
    16a0:	fc 4f       	sbci	r31, 0xFC	; 252
    16a2:	80 81       	ld	r24, Z
    16a4:	91 81       	ldd	r25, Z+1	; 0x01
    16a6:	08 95       	ret
    16a8:	8f ef       	ldi	r24, 0xFF	; 255
    16aa:	9f ef       	ldi	r25, 0xFF	; 255
    16ac:	08 95       	ret
    16ae:	8f ef       	ldi	r24, 0xFF	; 255
    16b0:	9f ef       	ldi	r25, 0xFF	; 255
    16b2:	08 95       	ret
    16b4:	8f ef       	ldi	r24, 0xFF	; 255
    16b6:	9f ef       	ldi	r25, 0xFF	; 255
    16b8:	08 95       	ret

000016ba <Modbus_Set_transmit_buffer>:
    16ba:	81 11       	cpse	r24, r1
    16bc:	0b c0       	rjmp	.+22     	; 0x16d4 <Modbus_Set_transmit_buffer+0x1a>
    16be:	60 34       	cpi	r22, 0x40	; 64
    16c0:	b8 f4       	brcc	.+46     	; 0x16f0 <Modbus_Set_transmit_buffer+0x36>
    16c2:	e6 2f       	mov	r30, r22
    16c4:	f0 e0       	ldi	r31, 0x00	; 0
    16c6:	ee 0f       	add	r30, r30
    16c8:	ff 1f       	adc	r31, r31
    16ca:	ec 5c       	subi	r30, 0xCC	; 204
    16cc:	fb 4f       	sbci	r31, 0xFB	; 251
    16ce:	51 83       	std	Z+1, r21	; 0x01
    16d0:	40 83       	st	Z, r20
    16d2:	08 95       	ret
    16d4:	81 30       	cpi	r24, 0x01	; 1
    16d6:	71 f4       	brne	.+28     	; 0x16f4 <Modbus_Set_transmit_buffer+0x3a>
    16d8:	60 34       	cpi	r22, 0x40	; 64
    16da:	70 f4       	brcc	.+28     	; 0x16f8 <Modbus_Set_transmit_buffer+0x3e>
    16dc:	e6 2f       	mov	r30, r22
    16de:	f0 e0       	ldi	r31, 0x00	; 0
    16e0:	ee 0f       	add	r30, r30
    16e2:	ff 1f       	adc	r31, r31
    16e4:	e6 5e       	subi	r30, 0xE6	; 230
    16e6:	fc 4f       	sbci	r31, 0xFC	; 252
    16e8:	51 83       	std	Z+1, r21	; 0x01
    16ea:	40 83       	st	Z, r20
    16ec:	80 e0       	ldi	r24, 0x00	; 0
    16ee:	08 95       	ret
    16f0:	82 e0       	ldi	r24, 0x02	; 2
    16f2:	08 95       	ret
    16f4:	82 e0       	ldi	r24, 0x02	; 2
    16f6:	08 95       	ret
    16f8:	82 e0       	ldi	r24, 0x02	; 2
    16fa:	08 95       	ret

000016fc <Modbus_Read_holding_registers>:
    16fc:	81 11       	cpse	r24, r1
    16fe:	0b c0       	rjmp	.+22     	; 0x1716 <Modbus_Read_holding_registers+0x1a>
    1700:	70 93 3b 05 	sts	0x053B, r23	; 0x80053b <g_mod0_read_address+0x1>
    1704:	60 93 3a 05 	sts	0x053A, r22	; 0x80053a <g_mod0_read_address>
    1708:	50 93 39 05 	sts	0x0539, r21	; 0x800539 <g_mod0_read_qty+0x1>
    170c:	40 93 38 05 	sts	0x0538, r20	; 0x800538 <g_mod0_read_qty>
    1710:	63 e0       	ldi	r22, 0x03	; 3
    1712:	3f c8       	rjmp	.-3970   	; 0x792 <Modbus_mster_transaction>
    1714:	08 95       	ret
    1716:	81 30       	cpi	r24, 0x01	; 1
    1718:	59 f4       	brne	.+22     	; 0x1730 <Modbus_Read_holding_registers+0x34>
    171a:	70 93 21 04 	sts	0x0421, r23	; 0x800421 <g_mod1_read_address+0x1>
    171e:	60 93 20 04 	sts	0x0420, r22	; 0x800420 <g_mod1_read_address>
    1722:	50 93 1f 04 	sts	0x041F, r21	; 0x80041f <g_mod1_read_qty+0x1>
    1726:	40 93 1e 04 	sts	0x041E, r20	; 0x80041e <g_mod1_read_qty>
    172a:	63 e0       	ldi	r22, 0x03	; 3
    172c:	32 c8       	rjmp	.-3996   	; 0x792 <Modbus_mster_transaction>
    172e:	08 95       	ret
    1730:	84 ee       	ldi	r24, 0xE4	; 228
    1732:	08 95       	ret

00001734 <Modbus_Write_multiple_registers>:
    1734:	81 11       	cpse	r24, r1
    1736:	0b c0       	rjmp	.+22     	; 0x174e <Modbus_Write_multiple_registers+0x1a>
    1738:	70 93 b7 04 	sts	0x04B7, r23	; 0x8004b7 <g_mod0_write_address+0x1>
    173c:	60 93 b6 04 	sts	0x04B6, r22	; 0x8004b6 <g_mod0_write_address>
    1740:	50 93 b5 04 	sts	0x04B5, r21	; 0x8004b5 <g_mod0_write_qty+0x1>
    1744:	40 93 b4 04 	sts	0x04B4, r20	; 0x8004b4 <g_mod0_write_qty>
    1748:	60 e1       	ldi	r22, 0x10	; 16
    174a:	23 c8       	rjmp	.-4026   	; 0x792 <Modbus_mster_transaction>
    174c:	08 95       	ret
    174e:	81 30       	cpi	r24, 0x01	; 1
    1750:	59 f4       	brne	.+22     	; 0x1768 <Modbus_Write_multiple_registers+0x34>
    1752:	70 93 9d 03 	sts	0x039D, r23	; 0x80039d <g_mod1_write_address+0x1>
    1756:	60 93 9c 03 	sts	0x039C, r22	; 0x80039c <g_mod1_write_address>
    175a:	50 93 9b 03 	sts	0x039B, r21	; 0x80039b <g_mod1_write_qty+0x1>
    175e:	40 93 9a 03 	sts	0x039A, r20	; 0x80039a <g_mod1_write_qty>
    1762:	60 e1       	ldi	r22, 0x10	; 16
    1764:	16 c8       	rjmp	.-4052   	; 0x792 <Modbus_mster_transaction>
    1766:	08 95       	ret
    1768:	84 ee       	ldi	r24, 0xE4	; 228
    176a:	08 95       	ret

0000176c <temp_init>:

void temp_init(uint8_t channal)
{
	// initialize the ADC module in order to be able
	// to get reading from the sensor.
	ADC_init(channal);
    176c:	42 c1       	rjmp	.+644    	; 0x19f2 <ADC_init>
    176e:	08 95       	ret

00001770 <temp_read>:
}

uint16_t temp_read(void)
{
    1770:	cf 92       	push	r12
    1772:	df 92       	push	r13
    1774:	ef 92       	push	r14
    1776:	ff 92       	push	r15
    1778:	cf 93       	push	r28
    177a:	ce e1       	ldi	r28, 0x1E	; 30
	// this function returns the temperature sensor reading
	double Temp ,  vout, rt, a = 0.0039083 , r0 =100, y, b = -0.000000577,x ;
	// sum of samples taken
	double sum = 0.0;
    177c:	c1 2c       	mov	r12, r1
    177e:	d1 2c       	mov	r13, r1
    1780:	76 01       	movw	r14, r12
	unsigned char sample_count = 0;

    // read 30 values of ADC and take their average.
	while (sample_count < 30)
	{
	       double x  = ADC_read();
    1782:	59 d1       	rcall	.+690    	; 0x1a36 <ADC_read>
	       sum += x;
    1784:	bc 01       	movw	r22, r24
    1786:	80 e0       	ldi	r24, 0x00	; 0
    1788:	90 e0       	ldi	r25, 0x00	; 0
    178a:	0e 94 1e 22 	call	0x443c	; 0x443c <__floatunsisf>
    178e:	9b 01       	movw	r18, r22
    1790:	ac 01       	movw	r20, r24
    1792:	c7 01       	movw	r24, r14
    1794:	b6 01       	movw	r22, r12
    1796:	0e 94 26 21 	call	0x424c	; 0x424c <__addsf3>
    179a:	6b 01       	movw	r12, r22
    179c:	7c 01       	movw	r14, r24
    179e:	c1 50       	subi	r28, 0x01	; 1
	double sum = 0.0;
	// current sample number
	unsigned char sample_count = 0;

    // read 30 values of ADC and take their average.
	while (sample_count < 30)
    17a0:	81 f7       	brne	.-32     	; 0x1782 <temp_read+0x12>
	       sum += x;
	       sample_count++;
	}

    // the average of ADC readings
	 vout = (double)sum / (double)30;
    17a2:	20 e0       	ldi	r18, 0x00	; 0
    17a4:	30 e0       	ldi	r19, 0x00	; 0
    17a6:	40 ef       	ldi	r20, 0xF0	; 240
    17a8:	51 e4       	ldi	r21, 0x41	; 65
    17aa:	0e 94 8a 21 	call	0x4314	; 0x4314 <__divsf3>

	 vout *= 2.50;
    17ae:	20 e0       	ldi	r18, 0x00	; 0
    17b0:	30 e0       	ldi	r19, 0x00	; 0
    17b2:	40 e2       	ldi	r20, 0x20	; 32
    17b4:	50 e4       	ldi	r21, 0x40	; 64
    17b6:	0e 94 ac 22 	call	0x4558	; 0x4558 <__mulsf3>

	 // some math equations to Get The temperature value from ADC reading.
	 Temp = (-1 * a) ;
	 x =  pow(a,2);
	 y = 4  * b * (1 - (rt/r0));
	 x = x - y;
    17ba:	20 e0       	ldi	r18, 0x00	; 0
    17bc:	30 e0       	ldi	r19, 0x00	; 0
    17be:	40 e8       	ldi	r20, 0x80	; 128
    17c0:	5a e3       	ldi	r21, 0x3A	; 58
    17c2:	0e 94 ac 22 	call	0x4558	; 0x4558 <__mulsf3>
    17c6:	20 e0       	ldi	r18, 0x00	; 0
    17c8:	30 e0       	ldi	r19, 0x00	; 0
    17ca:	4a e7       	ldi	r20, 0x7A	; 122
    17cc:	54 e4       	ldi	r21, 0x44	; 68
    17ce:	0e 94 ac 22 	call	0x4558	; 0x4558 <__mulsf3>
    17d2:	20 e0       	ldi	r18, 0x00	; 0
    17d4:	30 e0       	ldi	r19, 0x00	; 0
    17d6:	40 e2       	ldi	r20, 0x20	; 32
    17d8:	51 e4       	ldi	r21, 0x41	; 65
    17da:	0e 94 8a 21 	call	0x4314	; 0x4314 <__divsf3>
    17de:	20 e0       	ldi	r18, 0x00	; 0
    17e0:	30 e0       	ldi	r19, 0x00	; 0
    17e2:	48 ec       	ldi	r20, 0xC8	; 200
    17e4:	52 e4       	ldi	r21, 0x42	; 66
    17e6:	0e 94 8a 21 	call	0x4314	; 0x4314 <__divsf3>
    17ea:	9b 01       	movw	r18, r22
    17ec:	ac 01       	movw	r20, r24
    17ee:	60 e0       	ldi	r22, 0x00	; 0
    17f0:	70 e0       	ldi	r23, 0x00	; 0
    17f2:	80 e8       	ldi	r24, 0x80	; 128
    17f4:	9f e3       	ldi	r25, 0x3F	; 63
    17f6:	0e 94 25 21 	call	0x424a	; 0x424a <__subsf3>
    17fa:	23 e2       	ldi	r18, 0x23	; 35
    17fc:	33 ee       	ldi	r19, 0xE3	; 227
    17fe:	4a e1       	ldi	r20, 0x1A	; 26
    1800:	56 eb       	ldi	r21, 0xB6	; 182
    1802:	0e 94 ac 22 	call	0x4558	; 0x4558 <__mulsf3>
    1806:	9b 01       	movw	r18, r22
    1808:	ac 01       	movw	r20, r24
    180a:	66 e6       	ldi	r22, 0x66	; 102
    180c:	72 e2       	ldi	r23, 0x22	; 34
    180e:	80 e8       	ldi	r24, 0x80	; 128
    1810:	97 e3       	ldi	r25, 0x37	; 55
    1812:	0e 94 25 21 	call	0x424a	; 0x424a <__subsf3>
	 x = pow(x,0.5);
    1816:	20 e0       	ldi	r18, 0x00	; 0
    1818:	30 e0       	ldi	r19, 0x00	; 0
    181a:	40 e0       	ldi	r20, 0x00	; 0
    181c:	5f e3       	ldi	r21, 0x3F	; 63
    181e:	0e 94 0f 23 	call	0x461e	; 0x461e <pow>
	 Temp = Temp + x ;
    1822:	22 e3       	ldi	r18, 0x32	; 50
    1824:	31 e1       	ldi	r19, 0x11	; 17
    1826:	40 e8       	ldi	r20, 0x80	; 128
    1828:	5b e3       	ldi	r21, 0x3B	; 59
    182a:	0e 94 25 21 	call	0x424a	; 0x424a <__subsf3>
	 Temp /= (2 * b);

	 return round(Temp);
    182e:	23 e2       	ldi	r18, 0x23	; 35
    1830:	33 ee       	ldi	r19, 0xE3	; 227
    1832:	4a e9       	ldi	r20, 0x9A	; 154
    1834:	55 eb       	ldi	r21, 0xB5	; 181
    1836:	0e 94 8a 21 	call	0x4314	; 0x4314 <__divsf3>
    183a:	0e 94 5b 23 	call	0x46b6	; 0x46b6 <round>
    183e:	0e 94 f2 21 	call	0x43e4	; 0x43e4 <__fixunssfsi>
}
    1842:	cb 01       	movw	r24, r22
    1844:	cf 91       	pop	r28
    1846:	ff 90       	pop	r15
    1848:	ef 90       	pop	r14
    184a:	df 90       	pop	r13
    184c:	cf 90       	pop	r12
    184e:	08 95       	ret

00001850 <Temperature_over_temp>:
	UART0_puts("Level_sensor_error_callback \n");
}

/******* Over Temp functions for error callbacks **********************************************/
static void Temperature_over_temp(void){
	UART0_puts("Temperature_over_temp \n");
    1850:	83 e1       	ldi	r24, 0x13	; 19
    1852:	92 e0       	ldi	r25, 0x02	; 2
    1854:	a1 c2       	rjmp	.+1346   	; 0x1d98 <UART0_puts>
    1856:	08 95       	ret

00001858 <Level_sensor_error_callback>:
	
}

/******* Level sensors functions for error callbacks **********************************************/
static void Level_sensor_error_callback(void){
	UART0_puts("Level_sensor_error_callback \n");
    1858:	8b e2       	ldi	r24, 0x2B	; 43
    185a:	92 e0       	ldi	r25, 0x02	; 2
    185c:	9d c2       	rjmp	.+1338   	; 0x1d98 <UART0_puts>
    185e:	08 95       	ret

00001860 <LCD_writeTimeout>:
static void LCD_readTimeout(void){
	UART0_puts("LCD_READ_TIMEOUT \n");
}

static void LCD_writeTimeout(void){
	UART0_puts("LCD_WRITE_TIMEOUT \n");
    1860:	89 e4       	ldi	r24, 0x49	; 73
    1862:	92 e0       	ldi	r25, 0x02	; 2
    1864:	99 c2       	rjmp	.+1330   	; 0x1d98 <UART0_puts>
    1866:	08 95       	ret

00001868 <LCD_readTimeout>:

//debug
#include "MCAL/UART.h"
/******* LCD callback functions for errors callbacks ***********************************************/
static void LCD_readTimeout(void){
	UART0_puts("LCD_READ_TIMEOUT \n");
    1868:	8d e5       	ldi	r24, 0x5D	; 93
    186a:	92 e0       	ldi	r25, 0x02	; 2
    186c:	95 c2       	rjmp	.+1322   	; 0x1d98 <UART0_puts>
    186e:	08 95       	ret

00001870 <Service_error_init>:
	
}


void Service_error_init(void){
		LCD_main_err_Init(LCD_readTimeout,LCD_writeTimeout);
    1870:	60 e3       	ldi	r22, 0x30	; 48
    1872:	7c e0       	ldi	r23, 0x0C	; 12
    1874:	84 e3       	ldi	r24, 0x34	; 52
    1876:	9c e0       	ldi	r25, 0x0C	; 12
    1878:	0e 94 7e 1f 	call	0x3efc	; 0x3efc <LCD_main_err_Init>
		Level_main_err_init(Level_sensor_error_callback);
    187c:	8c e2       	ldi	r24, 0x2C	; 44
    187e:	9c e0       	ldi	r25, 0x0C	; 12
    1880:	0e 94 1a 20 	call	0x4034	; 0x4034 <Level_main_err_init>
		Temp_main_err_init(Temperature_over_temp);
    1884:	88 e2       	ldi	r24, 0x28	; 40
    1886:	9c e0       	ldi	r25, 0x0C	; 12
    1888:	0c 94 a4 20 	jmp	0x4148	; 0x4148 <Temp_main_err_init>
    188c:	08 95       	ret

0000188e <vTask4>:
}
static void vTask4(void* pvParameters)
{
// 	uint8_t x=0;
// 	uint16_t RTE_data=0;
	UART0_puts("Enter Task4\n");
    188e:	80 e7       	ldi	r24, 0x70	; 112
    1890:	92 e0       	ldi	r25, 0x02	; 2
    1892:	82 d2       	rcall	.+1284   	; 0x1d98 <UART0_puts>
// 		vTaskDelay(600/portTICK_PERIOD_MS);
// 		
// 	}
		while (1)
		{
			UART0_puts("vTask4 Exist\n");
    1894:	8d e7       	ldi	r24, 0x7D	; 125
    1896:	92 e0       	ldi	r25, 0x02	; 2
    1898:	7f d2       	rcall	.+1278   	; 0x1d98 <UART0_puts>
    189a:	fc cf       	rjmp	.-8      	; 0x1894 <vTask4+0x6>

0000189c <vTask3>:
	LCD_main(&x);
}


static void vTask3(void* pvParameters)
{
    189c:	cf 93       	push	r28
    189e:	df 93       	push	r29
    18a0:	1f 92       	push	r1
    18a2:	cd b7       	in	r28, 0x3d	; 61
    18a4:	de b7       	in	r29, 0x3e	; 62
	char x=0;
    18a6:	19 82       	std	Y+1, r1	; 0x01
	UART0_puts("LEVEL Task3 \n");
    18a8:	8b e8       	ldi	r24, 0x8B	; 139
    18aa:	92 e0       	ldi	r25, 0x02	; 2
    18ac:	75 d2       	rcall	.+1258   	; 0x1d98 <UART0_puts>
	Level_main(&x);
    18ae:	ce 01       	movw	r24, r28
    18b0:	01 96       	adiw	r24, 0x01	; 1
    18b2:	0e 94 1f 20 	call	0x403e	; 0x403e <Level_main>
	// 		xSemaphoreTake(Sema_Test_handle,portMAX_DELAY);
	// 		UART0_puts("Vtask1 Released data= ");
	// 		UART0_OutUDec(Test);
	// 		UART0_putc('\n');
	// 	}
}
    18b6:	0f 90       	pop	r0
    18b8:	df 91       	pop	r29
    18ba:	cf 91       	pop	r28
    18bc:	08 95       	ret

000018be <vTask2>:
// 		UART0_OutUDec(Test);
// 		UART0_putc('\n');
// 	}
}
static void vTask2(void* pvParameters)
{
    18be:	cf 93       	push	r28
    18c0:	df 93       	push	r29
    18c2:	1f 92       	push	r1
    18c4:	cd b7       	in	r28, 0x3d	; 61
    18c6:	de b7       	in	r29, 0x3e	; 62
	char x=0;
    18c8:	19 82       	std	Y+1, r1	; 0x01
// 	uint16_t RTE_data=0;
	UART0_puts("LCD Task2\n");
    18ca:	89 e9       	ldi	r24, 0x99	; 153
    18cc:	92 e0       	ldi	r25, 0x02	; 2
    18ce:	64 d2       	rcall	.+1224   	; 0x1d98 <UART0_puts>
// // 		UART0_putc('\n');
// 		vTaskDelay(600/portTICK_PERIOD_MS);
// 		
// 	}

	LCD_main(&x);
    18d0:	ce 01       	movw	r24, r28
    18d2:	01 96       	adiw	r24, 0x01	; 1
    18d4:	0e 94 87 1f 	call	0x3f0e	; 0x3f0e <LCD_main>
}
    18d8:	0f 90       	pop	r0
    18da:	df 91       	pop	r29
    18dc:	cf 91       	pop	r28
    18de:	08 95       	ret

000018e0 <vTask1>:
}



static void vTask1(void* pvParameters)
{
    18e0:	cf 93       	push	r28
    18e2:	df 93       	push	r29
    18e4:	1f 92       	push	r1
    18e6:	cd b7       	in	r28, 0x3d	; 61
    18e8:	de b7       	in	r29, 0x3e	; 62
	char x=0;
    18ea:	19 82       	std	Y+1, r1	; 0x01
	UART0_puts("Temperature Task1 \n");
    18ec:	84 ea       	ldi	r24, 0xA4	; 164
    18ee:	92 e0       	ldi	r25, 0x02	; 2
    18f0:	53 d2       	rcall	.+1190   	; 0x1d98 <UART0_puts>
	Temp_main(&x);
    18f2:	ce 01       	movw	r24, r28
    18f4:	01 96       	adiw	r24, 0x01	; 1
    18f6:	0e 94 a9 20 	call	0x4152	; 0x4152 <Temp_main>
// 		xSemaphoreTake(Sema_Test_handle,portMAX_DELAY);
// 		UART0_puts("Vtask1 Released data= ");
// 		UART0_OutUDec(Test);
// 		UART0_putc('\n');
// 	}
}
    18fa:	0f 90       	pop	r0
    18fc:	df 91       	pop	r29
    18fe:	cf 91       	pop	r28
    1900:	08 95       	ret

00001902 <main>:




int main(void) {
	DDRE = 0xFF;
    1902:	8f ef       	ldi	r24, 0xFF	; 255
    1904:	8d b9       	out	0x0d, r24	; 13
	UART0_init(9600); //for debug
    1906:	60 e8       	ldi	r22, 0x80	; 128
    1908:	75 e2       	ldi	r23, 0x25	; 37
    190a:	80 e0       	ldi	r24, 0x00	; 0
    190c:	90 e0       	ldi	r25, 0x00	; 0
    190e:	ba d1       	rcall	.+884    	; 0x1c84 <UART0_init>
    System_init();
    1910:	0e 94 ca 20 	call	0x4194	; 0x4194 <System_init>

	//Temp_main_init();
	/* Create the task without using any dynamic memory allocation. */
	xHandle1 = xTaskCreateStatic(
    1914:	0f 2e       	mov	r0, r31
    1916:	f1 e3       	ldi	r31, 0x31	; 49
    1918:	cf 2e       	mov	r12, r31
    191a:	fe e0       	ldi	r31, 0x0E	; 14
    191c:	df 2e       	mov	r13, r31
    191e:	f0 2d       	mov	r31, r0
    1920:	0f 2e       	mov	r0, r31
    1922:	fc e1       	ldi	r31, 0x1C	; 28
    1924:	ef 2e       	mov	r14, r31
    1926:	f0 e1       	ldi	r31, 0x10	; 16
    1928:	ff 2e       	mov	r15, r31
    192a:	f0 2d       	mov	r31, r0
    192c:	03 e0       	ldi	r16, 0x03	; 3
    192e:	20 e0       	ldi	r18, 0x00	; 0
    1930:	30 e0       	ldi	r19, 0x00	; 0
    1932:	40 e9       	ldi	r20, 0x90	; 144
    1934:	51 e0       	ldi	r21, 0x01	; 1
    1936:	68 eb       	ldi	r22, 0xB8	; 184
    1938:	72 e0       	ldi	r23, 0x02	; 2
    193a:	80 e7       	ldi	r24, 0x70	; 112
    193c:	9c e0       	ldi	r25, 0x0C	; 12
    193e:	0e 94 31 19 	call	0x3262	; 0x3262 <xTaskCreateStatic>
    1942:	90 93 44 05 	sts	0x0544, r25	; 0x800544 <xHandle1+0x1>
    1946:	80 93 43 05 	sts	0x0543, r24	; 0x800543 <xHandle1>
					NULL, /* Parameter passed into the task. */
					3,/* Priority at which the task is created. */
					xStack1, /* Array to use as the task's stack. */
					&xTask1Buffer); /* Variable to hold the task's data structure. */
	
	xHandle2 = xTaskCreateStatic(
    194a:	0f 2e       	mov	r0, r31
    194c:	f9 e5       	ldi	r31, 0x59	; 89
    194e:	cf 2e       	mov	r12, r31
    1950:	fe e0       	ldi	r31, 0x0E	; 14
    1952:	df 2e       	mov	r13, r31
    1954:	f0 2d       	mov	r31, r0
    1956:	0f 2e       	mov	r0, r31
    1958:	f4 ed       	ldi	r31, 0xD4	; 212
    195a:	ef 2e       	mov	r14, r31
    195c:	f1 e1       	ldi	r31, 0x11	; 17
    195e:	ff 2e       	mov	r15, r31
    1960:	f0 2d       	mov	r31, r0
    1962:	02 e0       	ldi	r16, 0x02	; 2
    1964:	20 e0       	ldi	r18, 0x00	; 0
    1966:	30 e0       	ldi	r19, 0x00	; 0
    1968:	40 e9       	ldi	r20, 0x90	; 144
    196a:	51 e0       	ldi	r21, 0x01	; 1
    196c:	6e eb       	ldi	r22, 0xBE	; 190
    196e:	72 e0       	ldi	r23, 0x02	; 2
    1970:	8f e5       	ldi	r24, 0x5F	; 95
    1972:	9c e0       	ldi	r25, 0x0C	; 12
    1974:	0e 94 31 19 	call	0x3262	; 0x3262 <xTaskCreateStatic>
    1978:	90 93 42 05 	sts	0x0542, r25	; 0x800542 <xHandle2+0x1>
    197c:	80 93 41 05 	sts	0x0541, r24	; 0x800541 <xHandle2>
				NULL, /* Parameter passed into the task. */
				2,/* Priority at which the task is created. */
				xStack2, /* Array to use as the task's stack. */
				&xTask2Buffer); /* Variable to hold the task's data structure. */
				
	xHandle3 = xTaskCreateStatic(
    1980:	0f 2e       	mov	r0, r31
    1982:	fc ea       	ldi	r31, 0xAC	; 172
    1984:	cf 2e       	mov	r12, r31
    1986:	f1 e1       	ldi	r31, 0x11	; 17
    1988:	df 2e       	mov	r13, r31
    198a:	f0 2d       	mov	r31, r0
    198c:	0f 2e       	mov	r0, r31
    198e:	fb e6       	ldi	r31, 0x6B	; 107
    1990:	ef 2e       	mov	r14, r31
    1992:	f3 e1       	ldi	r31, 0x13	; 19
    1994:	ff 2e       	mov	r15, r31
    1996:	f0 2d       	mov	r31, r0
    1998:	03 e0       	ldi	r16, 0x03	; 3
    199a:	20 e0       	ldi	r18, 0x00	; 0
    199c:	30 e0       	ldi	r19, 0x00	; 0
    199e:	40 e9       	ldi	r20, 0x90	; 144
    19a0:	51 e0       	ldi	r21, 0x01	; 1
    19a2:	64 ec       	ldi	r22, 0xC4	; 196
    19a4:	72 e0       	ldi	r23, 0x02	; 2
    19a6:	8e e4       	ldi	r24, 0x4E	; 78
    19a8:	9c e0       	ldi	r25, 0x0C	; 12
    19aa:	0e 94 31 19 	call	0x3262	; 0x3262 <xTaskCreateStatic>
    19ae:	90 93 40 05 	sts	0x0540, r25	; 0x800540 <xHandle3+0x1>
    19b2:	80 93 3f 05 	sts	0x053F, r24	; 0x80053f <xHandle3>
				NULL, /* Parameter passed into the task. */
				3,/* Priority at which the task is created. */
				xStack3, /* Array to use as the task's stack. */
				&xTask3Buffer); /* Variable to hold the task's data structure. */
	
	xHandle4 = xTaskCreateStatic(
    19b6:	0f 2e       	mov	r0, r31
    19b8:	f9 e0       	ldi	r31, 0x09	; 9
    19ba:	cf 2e       	mov	r12, r31
    19bc:	fe e0       	ldi	r31, 0x0E	; 14
    19be:	df 2e       	mov	r13, r31
    19c0:	f0 2d       	mov	r31, r0
    19c2:	0f 2e       	mov	r0, r31
    19c4:	fc e8       	ldi	r31, 0x8C	; 140
    19c6:	ef 2e       	mov	r14, r31
    19c8:	fe e0       	ldi	r31, 0x0E	; 14
    19ca:	ff 2e       	mov	r15, r31
    19cc:	f0 2d       	mov	r31, r0
    19ce:	02 e0       	ldi	r16, 0x02	; 2
    19d0:	20 e0       	ldi	r18, 0x00	; 0
    19d2:	30 e0       	ldi	r19, 0x00	; 0
    19d4:	40 e9       	ldi	r20, 0x90	; 144
    19d6:	51 e0       	ldi	r21, 0x01	; 1
    19d8:	6a ec       	ldi	r22, 0xCA	; 202
    19da:	72 e0       	ldi	r23, 0x02	; 2
    19dc:	87 e4       	ldi	r24, 0x47	; 71
    19de:	9c e0       	ldi	r25, 0x0C	; 12
    19e0:	0e 94 31 19 	call	0x3262	; 0x3262 <xTaskCreateStatic>
    19e4:	90 93 3e 05 	sts	0x053E, r25	; 0x80053e <xHandle4+0x1>
    19e8:	80 93 3d 05 	sts	0x053D, r24	; 0x80053d <xHandle4>
// 		
// 	}
// 	

	  // Start scheduler.
	  vTaskStartScheduler();
    19ec:	0e 94 28 1a 	call	0x3450	; 0x3450 <vTaskStartScheduler>
    19f0:	ff cf       	rjmp	.-2      	; 0x19f0 <main+0xee>

000019f2 <ADC_init>:
	 * this function configure ADC module and
	 * you  pass the channel you work with from 0 to 7
	 */

   // make the ADC pin as input.
  CLR_BIT(ADC_DIRECTION_REG ,channel );
    19f2:	90 b3       	in	r25, 0x10	; 16
    19f4:	21 e0       	ldi	r18, 0x01	; 1
    19f6:	30 e0       	ldi	r19, 0x00	; 0
    19f8:	08 2e       	mov	r0, r24
    19fa:	02 c0       	rjmp	.+4      	; 0x1a00 <ADC_init+0xe>
    19fc:	22 0f       	add	r18, r18
    19fe:	33 1f       	adc	r19, r19
    1a00:	0a 94       	dec	r0
    1a02:	e2 f7       	brpl	.-8      	; 0x19fc <ADC_init+0xa>
    1a04:	20 95       	com	r18
    1a06:	29 23       	and	r18, r25
    1a08:	20 bb       	out	0x10, r18	; 16
  //   external ref .
  CLR_HIGH_NIBBLE(ADC_MULTIPLEXER_SELECTION_REG);
    1a0a:	ec e7       	ldi	r30, 0x7C	; 124
    1a0c:	f0 e0       	ldi	r31, 0x00	; 0
    1a0e:	90 81       	ld	r25, Z
    1a10:	9f 70       	andi	r25, 0x0F	; 15
    1a12:	90 83       	st	Z, r25
  //   operated channel ( channel ) .
  PUT_VAL_LOW_NIBBLE(ADC_MULTIPLEXER_SELECTION_REG , channel);
    1a14:	90 81       	ld	r25, Z
    1a16:	90 7f       	andi	r25, 0xF0	; 240
    1a18:	90 83       	st	Z, r25
    1a1a:	8f 70       	andi	r24, 0x0F	; 15
    1a1c:	98 2b       	or	r25, r24
    1a1e:	90 83       	st	Z, r25
  //  enable ADC  & enable interrupt && ps / 128.
  PUT_VAL_reg(ADC_CONTROL_STATUS_A_REG , 0x8f);
    1a20:	8f e8       	ldi	r24, 0x8F	; 143
    1a22:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>

  // enable global interrupt.
  sei();
    1a26:	78 94       	sei
    1a28:	08 95       	ret

00001a2a <ADC_enable_reading>:
}

void ADC_enable_reading(void)
{
	// restart the conversion .
	SET_BIT(ADC_CONTROL_STATUS_A_REG , ADC_START_CONVERSION_bit);
    1a2a:	ea e7       	ldi	r30, 0x7A	; 122
    1a2c:	f0 e0       	ldi	r31, 0x00	; 0
    1a2e:	80 81       	ld	r24, Z
    1a30:	80 64       	ori	r24, 0x40	; 64
    1a32:	80 83       	st	Z, r24
    1a34:	08 95       	ret

00001a36 <ADC_read>:
}

uint16_t ADC_read(void)
{
	// re-start the conversion .
	ADC_enable_reading();
    1a36:	f9 df       	rcall	.-14     	; 0x1a2a <ADC_enable_reading>
	static uint16_t returned_data;
	g_converted = 0 ;
    1a38:	10 92 45 05 	sts	0x0545, r1	; 0x800545 <g_converted>
    1a3c:	80 ec       	ldi	r24, 0xC0	; 192
    1a3e:	92 e1       	ldi	r25, 0x12	; 18
    1a40:	01 97       	sbiw	r24, 0x01	; 1
	// the conversion takes about 260 us so we will wait 4800 ticks till it ends .
	uint16_t time_out = 4800 ;
	while(!g_converted && 0 != time_out ){time_out --; }
    1a42:	f1 f7       	brne	.-4      	; 0x1a40 <ADC_read+0xa>
	returned_data = g_analog_data ;
    1a44:	80 91 46 05 	lds	r24, 0x0546	; 0x800546 <g_analog_data>
    1a48:	90 91 47 05 	lds	r25, 0x0547	; 0x800547 <g_analog_data+0x1>
	return returned_data ;
}
    1a4c:	08 95       	ret

00001a4e <__vector_29>:


ISR(ADC_vect)
{
    1a4e:	1f 92       	push	r1
    1a50:	0f 92       	push	r0
    1a52:	0f b6       	in	r0, 0x3f	; 63
    1a54:	0f 92       	push	r0
    1a56:	11 24       	eor	r1, r1
    1a58:	0b b6       	in	r0, 0x3b	; 59
    1a5a:	0f 92       	push	r0
    1a5c:	2f 93       	push	r18
    1a5e:	3f 93       	push	r19
    1a60:	4f 93       	push	r20
    1a62:	5f 93       	push	r21
    1a64:	6f 93       	push	r22
    1a66:	7f 93       	push	r23
    1a68:	8f 93       	push	r24
    1a6a:	9f 93       	push	r25
    1a6c:	af 93       	push	r26
    1a6e:	bf 93       	push	r27
    1a70:	ef 93       	push	r30
    1a72:	ff 93       	push	r31
	   uint8_t The_low_adc_reg = ADC_DATA_REG_LOW ;
    1a74:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
	  // get 10 bits out of the high and low register .
	  g_analog_data =  The_low_adc_reg | (ADC_DATA_REG_HIGH <<8);
    1a78:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
    1a7c:	90 e0       	ldi	r25, 0x00	; 0
    1a7e:	92 2b       	or	r25, r18
    1a80:	90 93 47 05 	sts	0x0547, r25	; 0x800547 <g_analog_data+0x1>
    1a84:	80 93 46 05 	sts	0x0546, r24	; 0x800546 <g_analog_data>
	  UART0_OutUDec(g_analog_data);
    1a88:	60 91 46 05 	lds	r22, 0x0546	; 0x800546 <g_analog_data>
    1a8c:	70 91 47 05 	lds	r23, 0x0547	; 0x800547 <g_analog_data+0x1>
    1a90:	80 e0       	ldi	r24, 0x00	; 0
    1a92:	90 e0       	ldi	r25, 0x00	; 0
    1a94:	65 d1       	rcall	.+714    	; 0x1d60 <UART0_OutUDec>
	  g_converted = 1 ;
    1a96:	81 e0       	ldi	r24, 0x01	; 1
    1a98:	80 93 45 05 	sts	0x0545, r24	; 0x800545 <g_converted>
}
    1a9c:	ff 91       	pop	r31
    1a9e:	ef 91       	pop	r30
    1aa0:	bf 91       	pop	r27
    1aa2:	af 91       	pop	r26
    1aa4:	9f 91       	pop	r25
    1aa6:	8f 91       	pop	r24
    1aa8:	7f 91       	pop	r23
    1aaa:	6f 91       	pop	r22
    1aac:	5f 91       	pop	r21
    1aae:	4f 91       	pop	r20
    1ab0:	3f 91       	pop	r19
    1ab2:	2f 91       	pop	r18
    1ab4:	0f 90       	pop	r0
    1ab6:	0b be       	out	0x3b, r0	; 59
    1ab8:	0f 90       	pop	r0
    1aba:	0f be       	out	0x3f, r0	; 63
    1abc:	0f 90       	pop	r0
    1abe:	1f 90       	pop	r1
    1ac0:	18 95       	reti

00001ac2 <DIO_init>:
void Spark_change_state(uint8_t state)
{
	if (HIGH == state)
		SET_BIT(SPARK_DATA_REG , SPARK_PIN);
	else if(LOW == state)
		CLR_BIT(SPARK_DATA_REG , SPARK_PIN);
    1ac2:	ea e0       	ldi	r30, 0x0A	; 10
    1ac4:	f1 e0       	ldi	r31, 0x01	; 1
    1ac6:	80 81       	ld	r24, Z
    1ac8:	8f 7d       	andi	r24, 0xDF	; 223
    1aca:	80 83       	st	Z, r24
    1acc:	80 81       	ld	r24, Z
    1ace:	8f 7b       	andi	r24, 0xBF	; 191
    1ad0:	80 83       	st	Z, r24
    1ad2:	80 81       	ld	r24, Z
    1ad4:	8f 7e       	andi	r24, 0xEF	; 239
    1ad6:	80 83       	st	Z, r24
    1ad8:	53 98       	cbi	0x0a, 3	; 10
    1ada:	20 98       	cbi	0x04, 0	; 4
    1adc:	55 98       	cbi	0x0a, 5	; 10
    1ade:	54 98       	cbi	0x0a, 4	; 10
    1ae0:	3c 9a       	sbi	0x07, 4	; 7
    1ae2:	3f 9a       	sbi	0x07, 7	; 7
    1ae4:	3d 9a       	sbi	0x07, 5	; 7
    1ae6:	39 9a       	sbi	0x07, 1	; 7
    1ae8:	39 9a       	sbi	0x07, 1	; 7
    1aea:	57 9a       	sbi	0x0a, 7	; 10
    1aec:	38 9a       	sbi	0x07, 0	; 7
    1aee:	38 98       	cbi	0x07, 0	; 7
    1af0:	56 9a       	sbi	0x0a, 6	; 10
    1af2:	3b 9a       	sbi	0x07, 3	; 7
    1af4:	e4 e0       	ldi	r30, 0x04	; 4
    1af6:	f1 e0       	ldi	r31, 0x01	; 1
    1af8:	80 81       	ld	r24, Z
    1afa:	84 60       	ori	r24, 0x04	; 4
    1afc:	80 83       	st	Z, r24
    1afe:	3f 9a       	sbi	0x07, 7	; 7
    1b00:	3f 9a       	sbi	0x07, 7	; 7
    1b02:	3f 9a       	sbi	0x07, 7	; 7
    1b04:	e1 e0       	ldi	r30, 0x01	; 1
    1b06:	f1 e0       	ldi	r31, 0x01	; 1
    1b08:	80 81       	ld	r24, Z
    1b0a:	8e 7f       	andi	r24, 0xFE	; 254
    1b0c:	80 83       	st	Z, r24
    1b0e:	80 81       	ld	r24, Z
    1b10:	82 60       	ori	r24, 0x02	; 2
    1b12:	80 83       	st	Z, r24
    1b14:	e2 e0       	ldi	r30, 0x02	; 2
    1b16:	f1 e0       	ldi	r31, 0x01	; 1
    1b18:	80 81       	ld	r24, Z
    1b1a:	81 60       	ori	r24, 0x01	; 1
    1b1c:	80 83       	st	Z, r24
    1b1e:	52 98       	cbi	0x0a, 2	; 10
    1b20:	53 9a       	sbi	0x0a, 3	; 10
    1b22:	5a 9a       	sbi	0x0b, 2	; 11
    1b24:	08 95       	ret

00001b26 <Get_tank_level_state>:
    1b26:	81 30       	cpi	r24, 0x01	; 1
    1b28:	41 f4       	brne	.+16     	; 0x1b3a <Get_tank_level_state+0x14>
    1b2a:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x700109>
    1b2e:	85 fb       	bst	r24, 5
    1b30:	99 27       	eor	r25, r25
    1b32:	90 f9       	bld	r25, 0
    1b34:	81 e0       	ldi	r24, 0x01	; 1
    1b36:	89 27       	eor	r24, r25
    1b38:	08 95       	ret
    1b3a:	82 30       	cpi	r24, 0x02	; 2
    1b3c:	41 f4       	brne	.+16     	; 0x1b4e <Get_tank_level_state+0x28>
    1b3e:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x700109>
    1b42:	86 fb       	bst	r24, 6
    1b44:	99 27       	eor	r25, r25
    1b46:	90 f9       	bld	r25, 0
    1b48:	81 e0       	ldi	r24, 0x01	; 1
    1b4a:	89 27       	eor	r24, r25
    1b4c:	08 95       	ret
    1b4e:	83 30       	cpi	r24, 0x03	; 3
    1b50:	39 f4       	brne	.+14     	; 0x1b60 <Get_tank_level_state+0x3a>
    1b52:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x700109>
    1b56:	82 95       	swap	r24
    1b58:	81 70       	andi	r24, 0x01	; 1
    1b5a:	91 e0       	ldi	r25, 0x01	; 1
    1b5c:	89 27       	eor	r24, r25
    1b5e:	08 95       	ret
    1b60:	8f ef       	ldi	r24, 0xFF	; 255
    1b62:	08 95       	ret

00001b64 <Get_blancher_level_state>:
    1b64:	89 b1       	in	r24, 0x09	; 9
    1b66:	83 fb       	bst	r24, 3
    1b68:	88 27       	eor	r24, r24
    1b6a:	80 f9       	bld	r24, 0
    1b6c:	08 95       	ret

00001b6e <Modbus_change_state>:

//_________ MODE BUS initialize and enable______________________//

void Modbus_change_state(uint8_t device ,uint8_t state){
	
	switch (device){
    1b6e:	88 23       	and	r24, r24
    1b70:	19 f0       	breq	.+6      	; 0x1b78 <Modbus_change_state+0xa>
    1b72:	81 30       	cpi	r24, 0x01	; 1
    1b74:	89 f0       	breq	.+34     	; 0x1b98 <Modbus_change_state+0x2a>
    1b76:	08 95       	ret
		case DEVICE_0:
		 	if (HIGH == state)
    1b78:	61 30       	cpi	r22, 0x01	; 1
    1b7a:	31 f4       	brne	.+12     	; 0x1b88 <Modbus_change_state+0x1a>
		 		SET_BIT(DEVICE_0_MODBUS_DATA_REG , DEVICE_0_MODBUS_PIN);
    1b7c:	e5 e0       	ldi	r30, 0x05	; 5
    1b7e:	f1 e0       	ldi	r31, 0x01	; 1
    1b80:	80 81       	ld	r24, Z
    1b82:	84 60       	ori	r24, 0x04	; 4
    1b84:	80 83       	st	Z, r24
    1b86:	08 95       	ret
		 	else if(LOW == state)
    1b88:	61 11       	cpse	r22, r1
    1b8a:	0d c0       	rjmp	.+26     	; 0x1ba6 <Modbus_change_state+0x38>
		 		CLR_BIT(DEVICE_0_MODBUS_DATA_REG , DEVICE_0_MODBUS_PIN);
    1b8c:	e5 e0       	ldi	r30, 0x05	; 5
    1b8e:	f1 e0       	ldi	r31, 0x01	; 1
    1b90:	80 81       	ld	r24, Z
    1b92:	8b 7f       	andi	r24, 0xFB	; 251
    1b94:	80 83       	st	Z, r24
    1b96:	08 95       	ret
			
			break;
		case DEVICE_1:
		     if (HIGH == state)
    1b98:	61 30       	cpi	r22, 0x01	; 1
    1b9a:	11 f4       	brne	.+4      	; 0x1ba0 <Modbus_change_state+0x32>
		         SET_BIT(DEVICE_1_MODBUS_DATA_REG , DEVICE_1_MODBUS_PIN);
    1b9c:	47 9a       	sbi	0x08, 7	; 8
    1b9e:	08 95       	ret
		     else if(LOW == state)
    1ba0:	61 11       	cpse	r22, r1
    1ba2:	01 c0       	rjmp	.+2      	; 0x1ba6 <Modbus_change_state+0x38>
		         CLR_BIT(DEVICE_1_MODBUS_DATA_REG , DEVICE_1_MODBUS_PIN);
    1ba4:	47 98       	cbi	0x08, 7	; 8
    1ba6:	08 95       	ret

00001ba8 <__vector_25>:

	while ((c = pgm_read_byte(progmem_s++))) {
		UART3_putc(c);
	}

} /* UART3_puts_p */
    1ba8:	1f 92       	push	r1
    1baa:	0f 92       	push	r0
    1bac:	0f b6       	in	r0, 0x3f	; 63
    1bae:	0f 92       	push	r0
    1bb0:	11 24       	eor	r1, r1
    1bb2:	0b b6       	in	r0, 0x3b	; 59
    1bb4:	0f 92       	push	r0
    1bb6:	2f 93       	push	r18
    1bb8:	3f 93       	push	r19
    1bba:	4f 93       	push	r20
    1bbc:	5f 93       	push	r21
    1bbe:	8f 93       	push	r24
    1bc0:	9f 93       	push	r25
    1bc2:	ef 93       	push	r30
    1bc4:	ff 93       	push	r31
    1bc6:	20 91 c0 00 	lds	r18, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
    1bca:	30 91 c6 00 	lds	r19, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    1bce:	28 71       	andi	r18, 0x18	; 24
    1bd0:	80 91 5d 08 	lds	r24, 0x085D	; 0x80085d <UART_RxHead>
    1bd4:	90 e0       	ldi	r25, 0x00	; 0
    1bd6:	01 96       	adiw	r24, 0x01	; 1
    1bd8:	8f 77       	andi	r24, 0x7F	; 127
    1bda:	99 27       	eor	r25, r25
    1bdc:	40 91 5c 08 	lds	r20, 0x085C	; 0x80085c <UART_RxTail>
    1be0:	50 e0       	ldi	r21, 0x00	; 0
    1be2:	84 17       	cp	r24, r20
    1be4:	95 07       	cpc	r25, r21
    1be6:	39 f0       	breq	.+14     	; 0x1bf6 <__vector_25+0x4e>
    1be8:	80 93 5d 08 	sts	0x085D, r24	; 0x80085d <UART_RxHead>
    1bec:	fc 01       	movw	r30, r24
    1bee:	e0 5a       	subi	r30, 0xA0	; 160
    1bf0:	f7 4f       	sbci	r31, 0xF7	; 247
    1bf2:	30 83       	st	Z, r19
    1bf4:	01 c0       	rjmp	.+2      	; 0x1bf8 <__vector_25+0x50>
    1bf6:	22 e0       	ldi	r18, 0x02	; 2
    1bf8:	20 93 5b 08 	sts	0x085B, r18	; 0x80085b <UART_LastRxError>
    1bfc:	ff 91       	pop	r31
    1bfe:	ef 91       	pop	r30
    1c00:	9f 91       	pop	r25
    1c02:	8f 91       	pop	r24
    1c04:	5f 91       	pop	r21
    1c06:	4f 91       	pop	r20
    1c08:	3f 91       	pop	r19
    1c0a:	2f 91       	pop	r18
    1c0c:	0f 90       	pop	r0
    1c0e:	0b be       	out	0x3b, r0	; 59
    1c10:	0f 90       	pop	r0
    1c12:	0f be       	out	0x3f, r0	; 63
    1c14:	0f 90       	pop	r0
    1c16:	1f 90       	pop	r1
    1c18:	18 95       	reti

00001c1a <__vector_26>:
    1c1a:	1f 92       	push	r1
    1c1c:	0f 92       	push	r0
    1c1e:	0f b6       	in	r0, 0x3f	; 63
    1c20:	0f 92       	push	r0
    1c22:	11 24       	eor	r1, r1
    1c24:	0b b6       	in	r0, 0x3b	; 59
    1c26:	0f 92       	push	r0
    1c28:	8f 93       	push	r24
    1c2a:	9f 93       	push	r25
    1c2c:	ef 93       	push	r30
    1c2e:	ff 93       	push	r31
    1c30:	90 91 5f 08 	lds	r25, 0x085F	; 0x80085f <UART_TxHead>
    1c34:	80 91 5e 08 	lds	r24, 0x085E	; 0x80085e <UART_TxTail>
    1c38:	98 17       	cp	r25, r24
    1c3a:	89 f0       	breq	.+34     	; 0x1c5e <__vector_26+0x44>
    1c3c:	80 91 5e 08 	lds	r24, 0x085E	; 0x80085e <UART_TxTail>
    1c40:	90 e0       	ldi	r25, 0x00	; 0
    1c42:	01 96       	adiw	r24, 0x01	; 1
    1c44:	8f 77       	andi	r24, 0x7F	; 127
    1c46:	99 27       	eor	r25, r25
    1c48:	80 93 5e 08 	sts	0x085E, r24	; 0x80085e <UART_TxTail>
    1c4c:	fc 01       	movw	r30, r24
    1c4e:	e0 52       	subi	r30, 0x20	; 32
    1c50:	f7 4f       	sbci	r31, 0xF7	; 247
    1c52:	80 81       	ld	r24, Z
    1c54:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    1c58:	10 92 4b 05 	sts	0x054B, r1	; 0x80054b <UART0_Transmission_end>
    1c5c:	08 c0       	rjmp	.+16     	; 0x1c6e <__vector_26+0x54>
    1c5e:	e1 ec       	ldi	r30, 0xC1	; 193
    1c60:	f0 e0       	ldi	r31, 0x00	; 0
    1c62:	80 81       	ld	r24, Z
    1c64:	8f 7d       	andi	r24, 0xDF	; 223
    1c66:	80 83       	st	Z, r24
    1c68:	81 e0       	ldi	r24, 0x01	; 1
    1c6a:	80 93 4b 05 	sts	0x054B, r24	; 0x80054b <UART0_Transmission_end>
    1c6e:	ff 91       	pop	r31
    1c70:	ef 91       	pop	r30
    1c72:	9f 91       	pop	r25
    1c74:	8f 91       	pop	r24
    1c76:	0f 90       	pop	r0
    1c78:	0b be       	out	0x3b, r0	; 59
    1c7a:	0f 90       	pop	r0
    1c7c:	0f be       	out	0x3f, r0	; 63
    1c7e:	0f 90       	pop	r0
    1c80:	1f 90       	pop	r1
    1c82:	18 95       	reti

00001c84 <UART0_init>:
    1c84:	0f 93       	push	r16
    1c86:	1f 93       	push	r17
    1c88:	8b 01       	movw	r16, r22
    1c8a:	9c 01       	movw	r18, r24
    1c8c:	f8 94       	cli
    1c8e:	10 92 5f 08 	sts	0x085F, r1	; 0x80085f <UART_TxHead>
    1c92:	10 92 5e 08 	sts	0x085E, r1	; 0x80085e <UART_TxTail>
    1c96:	10 92 5d 08 	sts	0x085D, r1	; 0x80085d <UART_RxHead>
    1c9a:	10 92 5c 08 	sts	0x085C, r1	; 0x80085c <UART_RxTail>
    1c9e:	78 94       	sei
    1ca0:	dc 01       	movw	r26, r24
    1ca2:	cb 01       	movw	r24, r22
    1ca4:	80 58       	subi	r24, 0x80	; 128
    1ca6:	9b 47       	sbci	r25, 0x7B	; 123
    1ca8:	a1 4e       	sbci	r26, 0xE1	; 225
    1caa:	bf 4f       	sbci	r27, 0xFF	; 255
    1cac:	88 0f       	add	r24, r24
    1cae:	99 1f       	adc	r25, r25
    1cb0:	aa 1f       	adc	r26, r26
    1cb2:	bb 1f       	adc	r27, r27
    1cb4:	88 0f       	add	r24, r24
    1cb6:	99 1f       	adc	r25, r25
    1cb8:	aa 1f       	adc	r26, r26
    1cba:	bb 1f       	adc	r27, r27
    1cbc:	bc 01       	movw	r22, r24
    1cbe:	cd 01       	movw	r24, r26
    1cc0:	66 0f       	add	r22, r22
    1cc2:	77 1f       	adc	r23, r23
    1cc4:	88 1f       	adc	r24, r24
    1cc6:	99 1f       	adc	r25, r25
    1cc8:	00 0f       	add	r16, r16
    1cca:	11 1f       	adc	r17, r17
    1ccc:	22 1f       	adc	r18, r18
    1cce:	33 1f       	adc	r19, r19
    1cd0:	00 0f       	add	r16, r16
    1cd2:	11 1f       	adc	r17, r17
    1cd4:	22 1f       	adc	r18, r18
    1cd6:	33 1f       	adc	r19, r19
    1cd8:	a9 01       	movw	r20, r18
    1cda:	98 01       	movw	r18, r16
    1cdc:	22 0f       	add	r18, r18
    1cde:	33 1f       	adc	r19, r19
    1ce0:	44 1f       	adc	r20, r20
    1ce2:	55 1f       	adc	r21, r21
    1ce4:	22 0f       	add	r18, r18
    1ce6:	33 1f       	adc	r19, r19
    1ce8:	44 1f       	adc	r20, r20
    1cea:	55 1f       	adc	r21, r21
    1cec:	0e 94 af 24 	call	0x495e	; 0x495e <__udivmodsi4>
    1cf0:	ba 01       	movw	r22, r20
    1cf2:	a9 01       	movw	r20, r18
    1cf4:	41 50       	subi	r20, 0x01	; 1
    1cf6:	51 09       	sbc	r21, r1
    1cf8:	61 09       	sbc	r22, r1
    1cfa:	71 09       	sbc	r23, r1
    1cfc:	57 ff       	sbrs	r21, 7
    1cfe:	06 c0       	rjmp	.+12     	; 0x1d0c <UART0_init+0x88>
    1d00:	82 e0       	ldi	r24, 0x02	; 2
    1d02:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
    1d06:	5f 77       	andi	r21, 0x7F	; 127
    1d08:	66 27       	eor	r22, r22
    1d0a:	77 27       	eor	r23, r23
    1d0c:	bb 27       	eor	r27, r27
    1d0e:	a7 2f       	mov	r26, r23
    1d10:	96 2f       	mov	r25, r22
    1d12:	85 2f       	mov	r24, r21
    1d14:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
    1d18:	40 93 c4 00 	sts	0x00C4, r20	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
    1d1c:	88 e9       	ldi	r24, 0x98	; 152
    1d1e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    1d22:	86 e0       	ldi	r24, 0x06	; 6
    1d24:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
    1d28:	1f 91       	pop	r17
    1d2a:	0f 91       	pop	r16
    1d2c:	08 95       	ret

00001d2e <UART0_putc>:
    1d2e:	40 91 5f 08 	lds	r20, 0x085F	; 0x80085f <UART_TxHead>
    1d32:	50 e0       	ldi	r21, 0x00	; 0
    1d34:	4f 5f       	subi	r20, 0xFF	; 255
    1d36:	5f 4f       	sbci	r21, 0xFF	; 255
    1d38:	4f 77       	andi	r20, 0x7F	; 127
    1d3a:	55 27       	eor	r21, r21
    1d3c:	20 91 5e 08 	lds	r18, 0x085E	; 0x80085e <UART_TxTail>
    1d40:	30 e0       	ldi	r19, 0x00	; 0
    1d42:	42 17       	cp	r20, r18
    1d44:	53 07       	cpc	r21, r19
    1d46:	d1 f3       	breq	.-12     	; 0x1d3c <UART0_putc+0xe>
    1d48:	fa 01       	movw	r30, r20
    1d4a:	e0 52       	subi	r30, 0x20	; 32
    1d4c:	f7 4f       	sbci	r31, 0xF7	; 247
    1d4e:	80 83       	st	Z, r24
    1d50:	40 93 5f 08 	sts	0x085F, r20	; 0x80085f <UART_TxHead>
    1d54:	e1 ec       	ldi	r30, 0xC1	; 193
    1d56:	f0 e0       	ldi	r31, 0x00	; 0
    1d58:	80 81       	ld	r24, Z
    1d5a:	80 62       	ori	r24, 0x20	; 32
    1d5c:	80 83       	st	Z, r24
    1d5e:	08 95       	ret

00001d60 <UART0_OutUDec>:
    1d60:	0f 93       	push	r16
    1d62:	1f 93       	push	r17
    1d64:	cf 93       	push	r28
    1d66:	df 93       	push	r29
    1d68:	6a 30       	cpi	r22, 0x0A	; 10
    1d6a:	71 05       	cpc	r23, r1
    1d6c:	81 05       	cpc	r24, r1
    1d6e:	91 05       	cpc	r25, r1
    1d70:	58 f0       	brcs	.+22     	; 0x1d88 <UART0_OutUDec+0x28>
    1d72:	2a e0       	ldi	r18, 0x0A	; 10
    1d74:	30 e0       	ldi	r19, 0x00	; 0
    1d76:	40 e0       	ldi	r20, 0x00	; 0
    1d78:	50 e0       	ldi	r21, 0x00	; 0
    1d7a:	0e 94 af 24 	call	0x495e	; 0x495e <__udivmodsi4>
    1d7e:	06 2f       	mov	r16, r22
    1d80:	ca 01       	movw	r24, r20
    1d82:	b9 01       	movw	r22, r18
    1d84:	ed df       	rcall	.-38     	; 0x1d60 <UART0_OutUDec>
    1d86:	60 2f       	mov	r22, r16
    1d88:	80 e3       	ldi	r24, 0x30	; 48
    1d8a:	86 0f       	add	r24, r22
    1d8c:	d0 df       	rcall	.-96     	; 0x1d2e <UART0_putc>
    1d8e:	df 91       	pop	r29
    1d90:	cf 91       	pop	r28
    1d92:	1f 91       	pop	r17
    1d94:	0f 91       	pop	r16
    1d96:	08 95       	ret

00001d98 <UART0_puts>:
    1d98:	cf 93       	push	r28
    1d9a:	df 93       	push	r29
    1d9c:	ec 01       	movw	r28, r24
    1d9e:	88 81       	ld	r24, Y
    1da0:	88 23       	and	r24, r24
    1da2:	29 f0       	breq	.+10     	; 0x1dae <UART0_puts+0x16>
    1da4:	21 96       	adiw	r28, 0x01	; 1
    1da6:	c3 df       	rcall	.-122    	; 0x1d2e <UART0_putc>
    1da8:	89 91       	ld	r24, Y+
    1daa:	81 11       	cpse	r24, r1
    1dac:	fc cf       	rjmp	.-8      	; 0x1da6 <UART0_puts+0xe>
    1dae:	df 91       	pop	r29
    1db0:	cf 91       	pop	r28
    1db2:	08 95       	ret

00001db4 <__vector_36>:
    1db4:	1f 92       	push	r1
    1db6:	0f 92       	push	r0
    1db8:	0f b6       	in	r0, 0x3f	; 63
    1dba:	0f 92       	push	r0
    1dbc:	11 24       	eor	r1, r1
    1dbe:	0b b6       	in	r0, 0x3b	; 59
    1dc0:	0f 92       	push	r0
    1dc2:	2f 93       	push	r18
    1dc4:	3f 93       	push	r19
    1dc6:	4f 93       	push	r20
    1dc8:	5f 93       	push	r21
    1dca:	8f 93       	push	r24
    1dcc:	9f 93       	push	r25
    1dce:	ef 93       	push	r30
    1dd0:	ff 93       	push	r31
    1dd2:	20 91 c8 00 	lds	r18, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
    1dd6:	30 91 ce 00 	lds	r19, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    1dda:	28 71       	andi	r18, 0x18	; 24
    1ddc:	80 91 58 07 	lds	r24, 0x0758	; 0x800758 <UART1_RxHead>
    1de0:	90 e0       	ldi	r25, 0x00	; 0
    1de2:	01 96       	adiw	r24, 0x01	; 1
    1de4:	8f 77       	andi	r24, 0x7F	; 127
    1de6:	99 27       	eor	r25, r25
    1de8:	40 91 57 07 	lds	r20, 0x0757	; 0x800757 <UART1_RxTail>
    1dec:	50 e0       	ldi	r21, 0x00	; 0
    1dee:	84 17       	cp	r24, r20
    1df0:	95 07       	cpc	r25, r21
    1df2:	39 f0       	breq	.+14     	; 0x1e02 <__vector_36+0x4e>
    1df4:	80 93 58 07 	sts	0x0758, r24	; 0x800758 <UART1_RxHead>
    1df8:	fc 01       	movw	r30, r24
    1dfa:	e5 5a       	subi	r30, 0xA5	; 165
    1dfc:	f8 4f       	sbci	r31, 0xF8	; 248
    1dfe:	30 83       	st	Z, r19
    1e00:	01 c0       	rjmp	.+2      	; 0x1e04 <__vector_36+0x50>
    1e02:	22 e0       	ldi	r18, 0x02	; 2
    1e04:	20 93 56 07 	sts	0x0756, r18	; 0x800756 <UART1_LastRxError>
    1e08:	ff 91       	pop	r31
    1e0a:	ef 91       	pop	r30
    1e0c:	9f 91       	pop	r25
    1e0e:	8f 91       	pop	r24
    1e10:	5f 91       	pop	r21
    1e12:	4f 91       	pop	r20
    1e14:	3f 91       	pop	r19
    1e16:	2f 91       	pop	r18
    1e18:	0f 90       	pop	r0
    1e1a:	0b be       	out	0x3b, r0	; 59
    1e1c:	0f 90       	pop	r0
    1e1e:	0f be       	out	0x3f, r0	; 63
    1e20:	0f 90       	pop	r0
    1e22:	1f 90       	pop	r1
    1e24:	18 95       	reti

00001e26 <__vector_37>:
    1e26:	1f 92       	push	r1
    1e28:	0f 92       	push	r0
    1e2a:	0f b6       	in	r0, 0x3f	; 63
    1e2c:	0f 92       	push	r0
    1e2e:	11 24       	eor	r1, r1
    1e30:	0b b6       	in	r0, 0x3b	; 59
    1e32:	0f 92       	push	r0
    1e34:	8f 93       	push	r24
    1e36:	9f 93       	push	r25
    1e38:	ef 93       	push	r30
    1e3a:	ff 93       	push	r31
    1e3c:	90 91 5a 07 	lds	r25, 0x075A	; 0x80075a <UART1_TxHead>
    1e40:	80 91 59 07 	lds	r24, 0x0759	; 0x800759 <UART1_TxTail>
    1e44:	98 17       	cp	r25, r24
    1e46:	89 f0       	breq	.+34     	; 0x1e6a <__vector_37+0x44>
    1e48:	80 91 59 07 	lds	r24, 0x0759	; 0x800759 <UART1_TxTail>
    1e4c:	90 e0       	ldi	r25, 0x00	; 0
    1e4e:	01 96       	adiw	r24, 0x01	; 1
    1e50:	8f 77       	andi	r24, 0x7F	; 127
    1e52:	99 27       	eor	r25, r25
    1e54:	80 93 59 07 	sts	0x0759, r24	; 0x800759 <UART1_TxTail>
    1e58:	fc 01       	movw	r30, r24
    1e5a:	e5 52       	subi	r30, 0x25	; 37
    1e5c:	f8 4f       	sbci	r31, 0xF8	; 248
    1e5e:	80 81       	ld	r24, Z
    1e60:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    1e64:	10 92 4a 05 	sts	0x054A, r1	; 0x80054a <UART1_Transmission_end>
    1e68:	08 c0       	rjmp	.+16     	; 0x1e7a <__vector_37+0x54>
    1e6a:	e9 ec       	ldi	r30, 0xC9	; 201
    1e6c:	f0 e0       	ldi	r31, 0x00	; 0
    1e6e:	80 81       	ld	r24, Z
    1e70:	8f 7d       	andi	r24, 0xDF	; 223
    1e72:	80 83       	st	Z, r24
    1e74:	81 e0       	ldi	r24, 0x01	; 1
    1e76:	80 93 4a 05 	sts	0x054A, r24	; 0x80054a <UART1_Transmission_end>
    1e7a:	ff 91       	pop	r31
    1e7c:	ef 91       	pop	r30
    1e7e:	9f 91       	pop	r25
    1e80:	8f 91       	pop	r24
    1e82:	0f 90       	pop	r0
    1e84:	0b be       	out	0x3b, r0	; 59
    1e86:	0f 90       	pop	r0
    1e88:	0f be       	out	0x3f, r0	; 63
    1e8a:	0f 90       	pop	r0
    1e8c:	1f 90       	pop	r1
    1e8e:	18 95       	reti

00001e90 <UART1_init>:
    1e90:	0f 93       	push	r16
    1e92:	1f 93       	push	r17
    1e94:	8b 01       	movw	r16, r22
    1e96:	9c 01       	movw	r18, r24
    1e98:	f8 94       	cli
    1e9a:	10 92 5a 07 	sts	0x075A, r1	; 0x80075a <UART1_TxHead>
    1e9e:	10 92 59 07 	sts	0x0759, r1	; 0x800759 <UART1_TxTail>
    1ea2:	10 92 58 07 	sts	0x0758, r1	; 0x800758 <UART1_RxHead>
    1ea6:	10 92 57 07 	sts	0x0757, r1	; 0x800757 <UART1_RxTail>
    1eaa:	78 94       	sei
    1eac:	dc 01       	movw	r26, r24
    1eae:	cb 01       	movw	r24, r22
    1eb0:	80 58       	subi	r24, 0x80	; 128
    1eb2:	9b 47       	sbci	r25, 0x7B	; 123
    1eb4:	a1 4e       	sbci	r26, 0xE1	; 225
    1eb6:	bf 4f       	sbci	r27, 0xFF	; 255
    1eb8:	88 0f       	add	r24, r24
    1eba:	99 1f       	adc	r25, r25
    1ebc:	aa 1f       	adc	r26, r26
    1ebe:	bb 1f       	adc	r27, r27
    1ec0:	88 0f       	add	r24, r24
    1ec2:	99 1f       	adc	r25, r25
    1ec4:	aa 1f       	adc	r26, r26
    1ec6:	bb 1f       	adc	r27, r27
    1ec8:	bc 01       	movw	r22, r24
    1eca:	cd 01       	movw	r24, r26
    1ecc:	66 0f       	add	r22, r22
    1ece:	77 1f       	adc	r23, r23
    1ed0:	88 1f       	adc	r24, r24
    1ed2:	99 1f       	adc	r25, r25
    1ed4:	00 0f       	add	r16, r16
    1ed6:	11 1f       	adc	r17, r17
    1ed8:	22 1f       	adc	r18, r18
    1eda:	33 1f       	adc	r19, r19
    1edc:	00 0f       	add	r16, r16
    1ede:	11 1f       	adc	r17, r17
    1ee0:	22 1f       	adc	r18, r18
    1ee2:	33 1f       	adc	r19, r19
    1ee4:	a9 01       	movw	r20, r18
    1ee6:	98 01       	movw	r18, r16
    1ee8:	22 0f       	add	r18, r18
    1eea:	33 1f       	adc	r19, r19
    1eec:	44 1f       	adc	r20, r20
    1eee:	55 1f       	adc	r21, r21
    1ef0:	22 0f       	add	r18, r18
    1ef2:	33 1f       	adc	r19, r19
    1ef4:	44 1f       	adc	r20, r20
    1ef6:	55 1f       	adc	r21, r21
    1ef8:	0e 94 af 24 	call	0x495e	; 0x495e <__udivmodsi4>
    1efc:	ba 01       	movw	r22, r20
    1efe:	a9 01       	movw	r20, r18
    1f00:	41 50       	subi	r20, 0x01	; 1
    1f02:	51 09       	sbc	r21, r1
    1f04:	61 09       	sbc	r22, r1
    1f06:	71 09       	sbc	r23, r1
    1f08:	57 ff       	sbrs	r21, 7
    1f0a:	06 c0       	rjmp	.+12     	; 0x1f18 <UART1_init+0x88>
    1f0c:	82 e0       	ldi	r24, 0x02	; 2
    1f0e:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
    1f12:	5f 77       	andi	r21, 0x7F	; 127
    1f14:	66 27       	eor	r22, r22
    1f16:	77 27       	eor	r23, r23
    1f18:	bb 27       	eor	r27, r27
    1f1a:	a7 2f       	mov	r26, r23
    1f1c:	96 2f       	mov	r25, r22
    1f1e:	85 2f       	mov	r24, r21
    1f20:	80 93 cd 00 	sts	0x00CD, r24	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7000cd>
    1f24:	40 93 cc 00 	sts	0x00CC, r20	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7000cc>
    1f28:	88 e9       	ldi	r24, 0x98	; 152
    1f2a:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7000c9>
    1f2e:	86 e0       	ldi	r24, 0x06	; 6
    1f30:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7000ca>
    1f34:	1f 91       	pop	r17
    1f36:	0f 91       	pop	r16
    1f38:	08 95       	ret

00001f3a <UART1_getc>:
    1f3a:	f8 94       	cli
    1f3c:	90 91 58 07 	lds	r25, 0x0758	; 0x800758 <UART1_RxHead>
    1f40:	80 91 57 07 	lds	r24, 0x0757	; 0x800757 <UART1_RxTail>
    1f44:	98 13       	cpse	r25, r24
    1f46:	04 c0       	rjmp	.+8      	; 0x1f50 <UART1_getc+0x16>
    1f48:	78 94       	sei
    1f4a:	80 e0       	ldi	r24, 0x00	; 0
    1f4c:	91 e0       	ldi	r25, 0x01	; 1
    1f4e:	08 95       	ret
    1f50:	80 91 57 07 	lds	r24, 0x0757	; 0x800757 <UART1_RxTail>
    1f54:	90 e0       	ldi	r25, 0x00	; 0
    1f56:	01 96       	adiw	r24, 0x01	; 1
    1f58:	8f 77       	andi	r24, 0x7F	; 127
    1f5a:	99 27       	eor	r25, r25
    1f5c:	80 93 57 07 	sts	0x0757, r24	; 0x800757 <UART1_RxTail>
    1f60:	78 94       	sei
    1f62:	fc 01       	movw	r30, r24
    1f64:	e5 5a       	subi	r30, 0xA5	; 165
    1f66:	f8 4f       	sbci	r31, 0xF8	; 248
    1f68:	20 81       	ld	r18, Z
    1f6a:	80 91 56 07 	lds	r24, 0x0756	; 0x800756 <UART1_LastRxError>
    1f6e:	90 e0       	ldi	r25, 0x00	; 0
    1f70:	98 2f       	mov	r25, r24
    1f72:	88 27       	eor	r24, r24
    1f74:	82 0f       	add	r24, r18
    1f76:	91 1d       	adc	r25, r1
    1f78:	08 95       	ret

00001f7a <UART1_putc>:
    1f7a:	40 91 5a 07 	lds	r20, 0x075A	; 0x80075a <UART1_TxHead>
    1f7e:	50 e0       	ldi	r21, 0x00	; 0
    1f80:	4f 5f       	subi	r20, 0xFF	; 255
    1f82:	5f 4f       	sbci	r21, 0xFF	; 255
    1f84:	4f 77       	andi	r20, 0x7F	; 127
    1f86:	55 27       	eor	r21, r21
    1f88:	20 91 59 07 	lds	r18, 0x0759	; 0x800759 <UART1_TxTail>
    1f8c:	30 e0       	ldi	r19, 0x00	; 0
    1f8e:	42 17       	cp	r20, r18
    1f90:	53 07       	cpc	r21, r19
    1f92:	d1 f3       	breq	.-12     	; 0x1f88 <UART1_putc+0xe>
    1f94:	fa 01       	movw	r30, r20
    1f96:	e5 52       	subi	r30, 0x25	; 37
    1f98:	f8 4f       	sbci	r31, 0xF8	; 248
    1f9a:	80 83       	st	Z, r24
    1f9c:	40 93 5a 07 	sts	0x075A, r20	; 0x80075a <UART1_TxHead>
    1fa0:	e9 ec       	ldi	r30, 0xC9	; 201
    1fa2:	f0 e0       	ldi	r31, 0x00	; 0
    1fa4:	80 81       	ld	r24, Z
    1fa6:	80 62       	ori	r24, 0x20	; 32
    1fa8:	80 83       	st	Z, r24
    1faa:	08 95       	ret

00001fac <UART1_available>:
    1fac:	f8 94       	cli
    1fae:	80 91 58 07 	lds	r24, 0x0758	; 0x800758 <UART1_RxHead>
    1fb2:	20 91 57 07 	lds	r18, 0x0757	; 0x800757 <UART1_RxTail>
    1fb6:	78 94       	sei
    1fb8:	90 e0       	ldi	r25, 0x00	; 0
    1fba:	80 58       	subi	r24, 0x80	; 128
    1fbc:	9f 4f       	sbci	r25, 0xFF	; 255
    1fbe:	82 1b       	sub	r24, r18
    1fc0:	91 09       	sbc	r25, r1
    1fc2:	8f 77       	andi	r24, 0x7F	; 127
    1fc4:	99 27       	eor	r25, r25
    1fc6:	08 95       	ret

00001fc8 <UART1_flush>:
    1fc8:	80 91 4a 05 	lds	r24, 0x054A	; 0x80054a <UART1_Transmission_end>
    1fcc:	88 23       	and	r24, r24
    1fce:	e1 f3       	breq	.-8      	; 0x1fc8 <UART1_flush>
    1fd0:	08 95       	ret

00001fd2 <__vector_51>:
    1fd2:	1f 92       	push	r1
    1fd4:	0f 92       	push	r0
    1fd6:	0f b6       	in	r0, 0x3f	; 63
    1fd8:	0f 92       	push	r0
    1fda:	11 24       	eor	r1, r1
    1fdc:	0b b6       	in	r0, 0x3b	; 59
    1fde:	0f 92       	push	r0
    1fe0:	2f 93       	push	r18
    1fe2:	3f 93       	push	r19
    1fe4:	4f 93       	push	r20
    1fe6:	5f 93       	push	r21
    1fe8:	8f 93       	push	r24
    1fea:	9f 93       	push	r25
    1fec:	ef 93       	push	r30
    1fee:	ff 93       	push	r31
    1ff0:	20 91 d0 00 	lds	r18, 0x00D0	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7000d0>
    1ff4:	30 91 d6 00 	lds	r19, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    1ff8:	28 71       	andi	r18, 0x18	; 24
    1ffa:	80 91 53 06 	lds	r24, 0x0653	; 0x800653 <UART2_RxHead>
    1ffe:	90 e0       	ldi	r25, 0x00	; 0
    2000:	01 96       	adiw	r24, 0x01	; 1
    2002:	8f 77       	andi	r24, 0x7F	; 127
    2004:	99 27       	eor	r25, r25
    2006:	40 91 52 06 	lds	r20, 0x0652	; 0x800652 <UART2_RxTail>
    200a:	50 e0       	ldi	r21, 0x00	; 0
    200c:	84 17       	cp	r24, r20
    200e:	95 07       	cpc	r25, r21
    2010:	39 f0       	breq	.+14     	; 0x2020 <__vector_51+0x4e>
    2012:	80 93 53 06 	sts	0x0653, r24	; 0x800653 <UART2_RxHead>
    2016:	fc 01       	movw	r30, r24
    2018:	ea 5a       	subi	r30, 0xAA	; 170
    201a:	f9 4f       	sbci	r31, 0xF9	; 249
    201c:	30 83       	st	Z, r19
    201e:	01 c0       	rjmp	.+2      	; 0x2022 <__vector_51+0x50>
    2020:	22 e0       	ldi	r18, 0x02	; 2
    2022:	20 93 51 06 	sts	0x0651, r18	; 0x800651 <UART2_LastRxError>
    2026:	ff 91       	pop	r31
    2028:	ef 91       	pop	r30
    202a:	9f 91       	pop	r25
    202c:	8f 91       	pop	r24
    202e:	5f 91       	pop	r21
    2030:	4f 91       	pop	r20
    2032:	3f 91       	pop	r19
    2034:	2f 91       	pop	r18
    2036:	0f 90       	pop	r0
    2038:	0b be       	out	0x3b, r0	; 59
    203a:	0f 90       	pop	r0
    203c:	0f be       	out	0x3f, r0	; 63
    203e:	0f 90       	pop	r0
    2040:	1f 90       	pop	r1
    2042:	18 95       	reti

00002044 <__vector_52>:
    2044:	1f 92       	push	r1
    2046:	0f 92       	push	r0
    2048:	0f b6       	in	r0, 0x3f	; 63
    204a:	0f 92       	push	r0
    204c:	11 24       	eor	r1, r1
    204e:	0b b6       	in	r0, 0x3b	; 59
    2050:	0f 92       	push	r0
    2052:	8f 93       	push	r24
    2054:	9f 93       	push	r25
    2056:	ef 93       	push	r30
    2058:	ff 93       	push	r31
    205a:	90 91 55 06 	lds	r25, 0x0655	; 0x800655 <UART2_TxHead>
    205e:	80 91 54 06 	lds	r24, 0x0654	; 0x800654 <UART2_TxTail>
    2062:	98 17       	cp	r25, r24
    2064:	89 f0       	breq	.+34     	; 0x2088 <__vector_52+0x44>
    2066:	80 91 54 06 	lds	r24, 0x0654	; 0x800654 <UART2_TxTail>
    206a:	90 e0       	ldi	r25, 0x00	; 0
    206c:	01 96       	adiw	r24, 0x01	; 1
    206e:	8f 77       	andi	r24, 0x7F	; 127
    2070:	99 27       	eor	r25, r25
    2072:	80 93 54 06 	sts	0x0654, r24	; 0x800654 <UART2_TxTail>
    2076:	fc 01       	movw	r30, r24
    2078:	ea 52       	subi	r30, 0x2A	; 42
    207a:	f9 4f       	sbci	r31, 0xF9	; 249
    207c:	80 81       	ld	r24, Z
    207e:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    2082:	10 92 49 05 	sts	0x0549, r1	; 0x800549 <UART2_Transmission_end>
    2086:	08 c0       	rjmp	.+16     	; 0x2098 <__vector_52+0x54>
    2088:	e1 ed       	ldi	r30, 0xD1	; 209
    208a:	f0 e0       	ldi	r31, 0x00	; 0
    208c:	80 81       	ld	r24, Z
    208e:	8f 7d       	andi	r24, 0xDF	; 223
    2090:	80 83       	st	Z, r24
    2092:	81 e0       	ldi	r24, 0x01	; 1
    2094:	80 93 49 05 	sts	0x0549, r24	; 0x800549 <UART2_Transmission_end>
    2098:	ff 91       	pop	r31
    209a:	ef 91       	pop	r30
    209c:	9f 91       	pop	r25
    209e:	8f 91       	pop	r24
    20a0:	0f 90       	pop	r0
    20a2:	0b be       	out	0x3b, r0	; 59
    20a4:	0f 90       	pop	r0
    20a6:	0f be       	out	0x3f, r0	; 63
    20a8:	0f 90       	pop	r0
    20aa:	1f 90       	pop	r1
    20ac:	18 95       	reti

000020ae <UART2_init>:
    20ae:	0f 93       	push	r16
    20b0:	1f 93       	push	r17
    20b2:	8b 01       	movw	r16, r22
    20b4:	9c 01       	movw	r18, r24
    20b6:	f8 94       	cli
    20b8:	10 92 55 06 	sts	0x0655, r1	; 0x800655 <UART2_TxHead>
    20bc:	10 92 54 06 	sts	0x0654, r1	; 0x800654 <UART2_TxTail>
    20c0:	10 92 53 06 	sts	0x0653, r1	; 0x800653 <UART2_RxHead>
    20c4:	10 92 52 06 	sts	0x0652, r1	; 0x800652 <UART2_RxTail>
    20c8:	78 94       	sei
    20ca:	dc 01       	movw	r26, r24
    20cc:	cb 01       	movw	r24, r22
    20ce:	80 58       	subi	r24, 0x80	; 128
    20d0:	9b 47       	sbci	r25, 0x7B	; 123
    20d2:	a1 4e       	sbci	r26, 0xE1	; 225
    20d4:	bf 4f       	sbci	r27, 0xFF	; 255
    20d6:	88 0f       	add	r24, r24
    20d8:	99 1f       	adc	r25, r25
    20da:	aa 1f       	adc	r26, r26
    20dc:	bb 1f       	adc	r27, r27
    20de:	88 0f       	add	r24, r24
    20e0:	99 1f       	adc	r25, r25
    20e2:	aa 1f       	adc	r26, r26
    20e4:	bb 1f       	adc	r27, r27
    20e6:	bc 01       	movw	r22, r24
    20e8:	cd 01       	movw	r24, r26
    20ea:	66 0f       	add	r22, r22
    20ec:	77 1f       	adc	r23, r23
    20ee:	88 1f       	adc	r24, r24
    20f0:	99 1f       	adc	r25, r25
    20f2:	00 0f       	add	r16, r16
    20f4:	11 1f       	adc	r17, r17
    20f6:	22 1f       	adc	r18, r18
    20f8:	33 1f       	adc	r19, r19
    20fa:	00 0f       	add	r16, r16
    20fc:	11 1f       	adc	r17, r17
    20fe:	22 1f       	adc	r18, r18
    2100:	33 1f       	adc	r19, r19
    2102:	a9 01       	movw	r20, r18
    2104:	98 01       	movw	r18, r16
    2106:	22 0f       	add	r18, r18
    2108:	33 1f       	adc	r19, r19
    210a:	44 1f       	adc	r20, r20
    210c:	55 1f       	adc	r21, r21
    210e:	22 0f       	add	r18, r18
    2110:	33 1f       	adc	r19, r19
    2112:	44 1f       	adc	r20, r20
    2114:	55 1f       	adc	r21, r21
    2116:	0e 94 af 24 	call	0x495e	; 0x495e <__udivmodsi4>
    211a:	ba 01       	movw	r22, r20
    211c:	a9 01       	movw	r20, r18
    211e:	41 50       	subi	r20, 0x01	; 1
    2120:	51 09       	sbc	r21, r1
    2122:	61 09       	sbc	r22, r1
    2124:	71 09       	sbc	r23, r1
    2126:	57 ff       	sbrs	r21, 7
    2128:	06 c0       	rjmp	.+12     	; 0x2136 <UART2_init+0x88>
    212a:	82 e0       	ldi	r24, 0x02	; 2
    212c:	80 93 d0 00 	sts	0x00D0, r24	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7000d0>
    2130:	5f 77       	andi	r21, 0x7F	; 127
    2132:	66 27       	eor	r22, r22
    2134:	77 27       	eor	r23, r23
    2136:	bb 27       	eor	r27, r27
    2138:	a7 2f       	mov	r26, r23
    213a:	96 2f       	mov	r25, r22
    213c:	85 2f       	mov	r24, r21
    213e:	80 93 d5 00 	sts	0x00D5, r24	; 0x8000d5 <__TEXT_REGION_LENGTH__+0x7000d5>
    2142:	40 93 d4 00 	sts	0x00D4, r20	; 0x8000d4 <__TEXT_REGION_LENGTH__+0x7000d4>
    2146:	88 e9       	ldi	r24, 0x98	; 152
    2148:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7000d1>
    214c:	86 e0       	ldi	r24, 0x06	; 6
    214e:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7000d2>
    2152:	1f 91       	pop	r17
    2154:	0f 91       	pop	r16
    2156:	08 95       	ret

00002158 <UART2_getc>:
    2158:	90 91 53 06 	lds	r25, 0x0653	; 0x800653 <UART2_RxHead>
    215c:	80 91 52 06 	lds	r24, 0x0652	; 0x800652 <UART2_RxTail>
    2160:	98 17       	cp	r25, r24
    2162:	a1 f0       	breq	.+40     	; 0x218c <UART2_getc+0x34>
    2164:	80 91 52 06 	lds	r24, 0x0652	; 0x800652 <UART2_RxTail>
    2168:	90 e0       	ldi	r25, 0x00	; 0
    216a:	01 96       	adiw	r24, 0x01	; 1
    216c:	8f 77       	andi	r24, 0x7F	; 127
    216e:	99 27       	eor	r25, r25
    2170:	80 93 52 06 	sts	0x0652, r24	; 0x800652 <UART2_RxTail>
    2174:	fc 01       	movw	r30, r24
    2176:	ea 5a       	subi	r30, 0xAA	; 170
    2178:	f9 4f       	sbci	r31, 0xF9	; 249
    217a:	20 81       	ld	r18, Z
    217c:	80 91 51 06 	lds	r24, 0x0651	; 0x800651 <UART2_LastRxError>
    2180:	90 e0       	ldi	r25, 0x00	; 0
    2182:	98 2f       	mov	r25, r24
    2184:	88 27       	eor	r24, r24
    2186:	82 0f       	add	r24, r18
    2188:	91 1d       	adc	r25, r1
    218a:	08 95       	ret
    218c:	80 e0       	ldi	r24, 0x00	; 0
    218e:	91 e0       	ldi	r25, 0x01	; 1
    2190:	08 95       	ret

00002192 <UART2_putc>:
    2192:	40 91 55 06 	lds	r20, 0x0655	; 0x800655 <UART2_TxHead>
    2196:	50 e0       	ldi	r21, 0x00	; 0
    2198:	4f 5f       	subi	r20, 0xFF	; 255
    219a:	5f 4f       	sbci	r21, 0xFF	; 255
    219c:	4f 77       	andi	r20, 0x7F	; 127
    219e:	55 27       	eor	r21, r21
    21a0:	20 91 54 06 	lds	r18, 0x0654	; 0x800654 <UART2_TxTail>
    21a4:	30 e0       	ldi	r19, 0x00	; 0
    21a6:	42 17       	cp	r20, r18
    21a8:	53 07       	cpc	r21, r19
    21aa:	d1 f3       	breq	.-12     	; 0x21a0 <UART2_putc+0xe>
    21ac:	fa 01       	movw	r30, r20
    21ae:	ea 52       	subi	r30, 0x2A	; 42
    21b0:	f9 4f       	sbci	r31, 0xF9	; 249
    21b2:	80 83       	st	Z, r24
    21b4:	40 93 55 06 	sts	0x0655, r20	; 0x800655 <UART2_TxHead>
    21b8:	e1 ed       	ldi	r30, 0xD1	; 209
    21ba:	f0 e0       	ldi	r31, 0x00	; 0
    21bc:	80 81       	ld	r24, Z
    21be:	80 62       	ori	r24, 0x20	; 32
    21c0:	80 83       	st	Z, r24
    21c2:	08 95       	ret

000021c4 <UART2_available>:
    21c4:	f8 94       	cli
    21c6:	80 91 53 06 	lds	r24, 0x0653	; 0x800653 <UART2_RxHead>
    21ca:	20 91 52 06 	lds	r18, 0x0652	; 0x800652 <UART2_RxTail>
    21ce:	78 94       	sei
    21d0:	90 e0       	ldi	r25, 0x00	; 0
    21d2:	80 58       	subi	r24, 0x80	; 128
    21d4:	9f 4f       	sbci	r25, 0xFF	; 255
    21d6:	82 1b       	sub	r24, r18
    21d8:	91 09       	sbc	r25, r1
    21da:	8f 77       	andi	r24, 0x7F	; 127
    21dc:	99 27       	eor	r25, r25
    21de:	08 95       	ret

000021e0 <UART2_flush>:
    21e0:	80 91 49 05 	lds	r24, 0x0549	; 0x800549 <UART2_Transmission_end>
    21e4:	88 23       	and	r24, r24
    21e6:	e1 f3       	breq	.-8      	; 0x21e0 <UART2_flush>
    21e8:	08 95       	ret

000021ea <__vector_54>:
    21ea:	1f 92       	push	r1
    21ec:	0f 92       	push	r0
    21ee:	0f b6       	in	r0, 0x3f	; 63
    21f0:	0f 92       	push	r0
    21f2:	11 24       	eor	r1, r1
    21f4:	0b b6       	in	r0, 0x3b	; 59
    21f6:	0f 92       	push	r0
    21f8:	2f 93       	push	r18
    21fa:	3f 93       	push	r19
    21fc:	4f 93       	push	r20
    21fe:	5f 93       	push	r21
    2200:	8f 93       	push	r24
    2202:	9f 93       	push	r25
    2204:	ef 93       	push	r30
    2206:	ff 93       	push	r31
    2208:	20 91 30 01 	lds	r18, 0x0130	; 0x800130 <__TEXT_REGION_LENGTH__+0x700130>
    220c:	30 91 36 01 	lds	r19, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    2210:	28 71       	andi	r18, 0x18	; 24
    2212:	80 91 4e 05 	lds	r24, 0x054E	; 0x80054e <UART3_RxHead>
    2216:	90 e0       	ldi	r25, 0x00	; 0
    2218:	01 96       	adiw	r24, 0x01	; 1
    221a:	8f 77       	andi	r24, 0x7F	; 127
    221c:	99 27       	eor	r25, r25
    221e:	40 91 4d 05 	lds	r20, 0x054D	; 0x80054d <UART3_RxTail>
    2222:	50 e0       	ldi	r21, 0x00	; 0
    2224:	84 17       	cp	r24, r20
    2226:	95 07       	cpc	r25, r21
    2228:	39 f0       	breq	.+14     	; 0x2238 <__stack+0x39>
    222a:	80 93 4e 05 	sts	0x054E, r24	; 0x80054e <UART3_RxHead>
    222e:	fc 01       	movw	r30, r24
    2230:	ef 5a       	subi	r30, 0xAF	; 175
    2232:	fa 4f       	sbci	r31, 0xFA	; 250
    2234:	30 83       	st	Z, r19
    2236:	01 c0       	rjmp	.+2      	; 0x223a <__stack+0x3b>
    2238:	22 e0       	ldi	r18, 0x02	; 2
    223a:	20 93 4c 05 	sts	0x054C, r18	; 0x80054c <UART3_LastRxError>
    223e:	ff 91       	pop	r31
    2240:	ef 91       	pop	r30
    2242:	9f 91       	pop	r25
    2244:	8f 91       	pop	r24
    2246:	5f 91       	pop	r21
    2248:	4f 91       	pop	r20
    224a:	3f 91       	pop	r19
    224c:	2f 91       	pop	r18
    224e:	0f 90       	pop	r0
    2250:	0b be       	out	0x3b, r0	; 59
    2252:	0f 90       	pop	r0
    2254:	0f be       	out	0x3f, r0	; 63
    2256:	0f 90       	pop	r0
    2258:	1f 90       	pop	r1
    225a:	18 95       	reti

0000225c <__vector_55>:
    225c:	1f 92       	push	r1
    225e:	0f 92       	push	r0
    2260:	0f b6       	in	r0, 0x3f	; 63
    2262:	0f 92       	push	r0
    2264:	11 24       	eor	r1, r1
    2266:	0b b6       	in	r0, 0x3b	; 59
    2268:	0f 92       	push	r0
    226a:	8f 93       	push	r24
    226c:	9f 93       	push	r25
    226e:	ef 93       	push	r30
    2270:	ff 93       	push	r31
    2272:	90 91 50 05 	lds	r25, 0x0550	; 0x800550 <UART3_TxHead>
    2276:	80 91 4f 05 	lds	r24, 0x054F	; 0x80054f <UART3_TxTail>
    227a:	98 17       	cp	r25, r24
    227c:	89 f0       	breq	.+34     	; 0x22a0 <__vector_55+0x44>
    227e:	80 91 4f 05 	lds	r24, 0x054F	; 0x80054f <UART3_TxTail>
    2282:	90 e0       	ldi	r25, 0x00	; 0
    2284:	01 96       	adiw	r24, 0x01	; 1
    2286:	8f 77       	andi	r24, 0x7F	; 127
    2288:	99 27       	eor	r25, r25
    228a:	80 93 4f 05 	sts	0x054F, r24	; 0x80054f <UART3_TxTail>
    228e:	fc 01       	movw	r30, r24
    2290:	ef 52       	subi	r30, 0x2F	; 47
    2292:	fa 4f       	sbci	r31, 0xFA	; 250
    2294:	80 81       	ld	r24, Z
    2296:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    229a:	10 92 48 05 	sts	0x0548, r1	; 0x800548 <UART3_Transmission_end>
    229e:	08 c0       	rjmp	.+16     	; 0x22b0 <__vector_55+0x54>
    22a0:	e1 e3       	ldi	r30, 0x31	; 49
    22a2:	f1 e0       	ldi	r31, 0x01	; 1
    22a4:	80 81       	ld	r24, Z
    22a6:	8f 7d       	andi	r24, 0xDF	; 223
    22a8:	80 83       	st	Z, r24
    22aa:	81 e0       	ldi	r24, 0x01	; 1
    22ac:	80 93 48 05 	sts	0x0548, r24	; 0x800548 <UART3_Transmission_end>
    22b0:	ff 91       	pop	r31
    22b2:	ef 91       	pop	r30
    22b4:	9f 91       	pop	r25
    22b6:	8f 91       	pop	r24
    22b8:	0f 90       	pop	r0
    22ba:	0b be       	out	0x3b, r0	; 59
    22bc:	0f 90       	pop	r0
    22be:	0f be       	out	0x3f, r0	; 63
    22c0:	0f 90       	pop	r0
    22c2:	1f 90       	pop	r1
    22c4:	18 95       	reti

000022c6 <UART3_init>:
    22c6:	0f 93       	push	r16
    22c8:	1f 93       	push	r17
    22ca:	8b 01       	movw	r16, r22
    22cc:	9c 01       	movw	r18, r24
    22ce:	f8 94       	cli
    22d0:	10 92 50 05 	sts	0x0550, r1	; 0x800550 <UART3_TxHead>
    22d4:	10 92 4f 05 	sts	0x054F, r1	; 0x80054f <UART3_TxTail>
    22d8:	10 92 4e 05 	sts	0x054E, r1	; 0x80054e <UART3_RxHead>
    22dc:	10 92 4d 05 	sts	0x054D, r1	; 0x80054d <UART3_RxTail>
    22e0:	78 94       	sei
    22e2:	dc 01       	movw	r26, r24
    22e4:	cb 01       	movw	r24, r22
    22e6:	80 58       	subi	r24, 0x80	; 128
    22e8:	9b 47       	sbci	r25, 0x7B	; 123
    22ea:	a1 4e       	sbci	r26, 0xE1	; 225
    22ec:	bf 4f       	sbci	r27, 0xFF	; 255
    22ee:	88 0f       	add	r24, r24
    22f0:	99 1f       	adc	r25, r25
    22f2:	aa 1f       	adc	r26, r26
    22f4:	bb 1f       	adc	r27, r27
    22f6:	88 0f       	add	r24, r24
    22f8:	99 1f       	adc	r25, r25
    22fa:	aa 1f       	adc	r26, r26
    22fc:	bb 1f       	adc	r27, r27
    22fe:	bc 01       	movw	r22, r24
    2300:	cd 01       	movw	r24, r26
    2302:	66 0f       	add	r22, r22
    2304:	77 1f       	adc	r23, r23
    2306:	88 1f       	adc	r24, r24
    2308:	99 1f       	adc	r25, r25
    230a:	00 0f       	add	r16, r16
    230c:	11 1f       	adc	r17, r17
    230e:	22 1f       	adc	r18, r18
    2310:	33 1f       	adc	r19, r19
    2312:	00 0f       	add	r16, r16
    2314:	11 1f       	adc	r17, r17
    2316:	22 1f       	adc	r18, r18
    2318:	33 1f       	adc	r19, r19
    231a:	a9 01       	movw	r20, r18
    231c:	98 01       	movw	r18, r16
    231e:	22 0f       	add	r18, r18
    2320:	33 1f       	adc	r19, r19
    2322:	44 1f       	adc	r20, r20
    2324:	55 1f       	adc	r21, r21
    2326:	22 0f       	add	r18, r18
    2328:	33 1f       	adc	r19, r19
    232a:	44 1f       	adc	r20, r20
    232c:	55 1f       	adc	r21, r21
    232e:	0e 94 af 24 	call	0x495e	; 0x495e <__udivmodsi4>
    2332:	ba 01       	movw	r22, r20
    2334:	a9 01       	movw	r20, r18
    2336:	41 50       	subi	r20, 0x01	; 1
    2338:	51 09       	sbc	r21, r1
    233a:	61 09       	sbc	r22, r1
    233c:	71 09       	sbc	r23, r1
    233e:	57 ff       	sbrs	r21, 7
    2340:	06 c0       	rjmp	.+12     	; 0x234e <UART3_init+0x88>
    2342:	82 e0       	ldi	r24, 0x02	; 2
    2344:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <__TEXT_REGION_LENGTH__+0x700130>
    2348:	5f 77       	andi	r21, 0x7F	; 127
    234a:	66 27       	eor	r22, r22
    234c:	77 27       	eor	r23, r23
    234e:	bb 27       	eor	r27, r27
    2350:	a7 2f       	mov	r26, r23
    2352:	96 2f       	mov	r25, r22
    2354:	85 2f       	mov	r24, r21
    2356:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <__TEXT_REGION_LENGTH__+0x700135>
    235a:	40 93 34 01 	sts	0x0134, r20	; 0x800134 <__TEXT_REGION_LENGTH__+0x700134>
    235e:	88 e9       	ldi	r24, 0x98	; 152
    2360:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <__TEXT_REGION_LENGTH__+0x700131>
    2364:	86 e0       	ldi	r24, 0x06	; 6
    2366:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <__TEXT_REGION_LENGTH__+0x700132>
    236a:	1f 91       	pop	r17
    236c:	0f 91       	pop	r16
    236e:	08 95       	ret

00002370 <UART3_getc>:
    2370:	90 91 4e 05 	lds	r25, 0x054E	; 0x80054e <UART3_RxHead>
    2374:	80 91 4d 05 	lds	r24, 0x054D	; 0x80054d <UART3_RxTail>
    2378:	98 17       	cp	r25, r24
    237a:	a1 f0       	breq	.+40     	; 0x23a4 <UART3_getc+0x34>
    237c:	80 91 4d 05 	lds	r24, 0x054D	; 0x80054d <UART3_RxTail>
    2380:	90 e0       	ldi	r25, 0x00	; 0
    2382:	01 96       	adiw	r24, 0x01	; 1
    2384:	8f 77       	andi	r24, 0x7F	; 127
    2386:	99 27       	eor	r25, r25
    2388:	80 93 4d 05 	sts	0x054D, r24	; 0x80054d <UART3_RxTail>
    238c:	fc 01       	movw	r30, r24
    238e:	ef 5a       	subi	r30, 0xAF	; 175
    2390:	fa 4f       	sbci	r31, 0xFA	; 250
    2392:	20 81       	ld	r18, Z
    2394:	80 91 4c 05 	lds	r24, 0x054C	; 0x80054c <UART3_LastRxError>
    2398:	90 e0       	ldi	r25, 0x00	; 0
    239a:	98 2f       	mov	r25, r24
    239c:	88 27       	eor	r24, r24
    239e:	82 0f       	add	r24, r18
    23a0:	91 1d       	adc	r25, r1
    23a2:	08 95       	ret
    23a4:	80 e0       	ldi	r24, 0x00	; 0
    23a6:	91 e0       	ldi	r25, 0x01	; 1
    23a8:	08 95       	ret

000023aa <UART3_putc>:
    23aa:	40 91 50 05 	lds	r20, 0x0550	; 0x800550 <UART3_TxHead>
    23ae:	50 e0       	ldi	r21, 0x00	; 0
    23b0:	4f 5f       	subi	r20, 0xFF	; 255
    23b2:	5f 4f       	sbci	r21, 0xFF	; 255
    23b4:	4f 77       	andi	r20, 0x7F	; 127
    23b6:	55 27       	eor	r21, r21
    23b8:	20 91 4f 05 	lds	r18, 0x054F	; 0x80054f <UART3_TxTail>
    23bc:	30 e0       	ldi	r19, 0x00	; 0
    23be:	42 17       	cp	r20, r18
    23c0:	53 07       	cpc	r21, r19
    23c2:	d1 f3       	breq	.-12     	; 0x23b8 <UART3_putc+0xe>
    23c4:	fa 01       	movw	r30, r20
    23c6:	ef 52       	subi	r30, 0x2F	; 47
    23c8:	fa 4f       	sbci	r31, 0xFA	; 250
    23ca:	80 83       	st	Z, r24
    23cc:	40 93 50 05 	sts	0x0550, r20	; 0x800550 <UART3_TxHead>
    23d0:	e1 e3       	ldi	r30, 0x31	; 49
    23d2:	f1 e0       	ldi	r31, 0x01	; 1
    23d4:	80 81       	ld	r24, Z
    23d6:	80 62       	ori	r24, 0x20	; 32
    23d8:	80 83       	st	Z, r24
    23da:	08 95       	ret

000023dc <UART3_available>:
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    23dc:	f8 94       	cli
uint16_t UART3_available(void)
{
	uint16_t ret;
	
	ATOMIC_BLOCK(ATOMIC_FORCEON) {
		ret = (UART_RX3_BUFFER_SIZE + UART3_RxHead - UART3_RxTail) & UART_RX3_BUFFER_MASK;
    23de:	80 91 4e 05 	lds	r24, 0x054E	; 0x80054e <UART3_RxHead>
    23e2:	20 91 4d 05 	lds	r18, 0x054D	; 0x80054d <UART3_RxTail>
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
    23e6:	78 94       	sei
	}
	return ret;
    23e8:	90 e0       	ldi	r25, 0x00	; 0
    23ea:	80 58       	subi	r24, 0x80	; 128
    23ec:	9f 4f       	sbci	r25, 0xFF	; 255
    23ee:	82 1b       	sub	r24, r18
    23f0:	91 09       	sbc	r25, r1
} /* UART3_available */
    23f2:	8f 77       	andi	r24, 0x7F	; 127
    23f4:	99 27       	eor	r25, r25
    23f6:	08 95       	ret

000023f8 <UART3_flush>:
void UART3_flush(void)
{
//	ATOMIC_BLOCK(ATOMIC_FORCEON) {
//		UART3_RxHead = UART3_RxTail;
//	} commented by mohab
	while(0 == UART3_Transmission_end);
    23f8:	80 91 48 05 	lds	r24, 0x0548	; 0x800548 <UART3_Transmission_end>
    23fc:	88 23       	and	r24, r24
    23fe:	e1 f3       	breq	.-8      	; 0x23f8 <UART3_flush>
} /* UART3_flush */
    2400:	08 95       	ret

00002402 <RTE_encoder_init>:


/*static uint16_t Conveyor_speed;*/
static uint16_t Drum_speed;

void RTE_encoder_init(void){
    2402:	08 95       	ret

00002404 <RTE_get_Drum_speed>:



uint16_t RTE_get_Drum_speed(void){
	return Drum_speed;
}
    2404:	80 91 60 09 	lds	r24, 0x0960	; 0x800960 <Drum_speed>
    2408:	90 91 61 09 	lds	r25, 0x0961	; 0x800961 <Drum_speed+0x1>
    240c:	08 95       	ret

0000240e <RTE_invertersetting_init>:
}

uint16_t RTE_get_Time_minute(void){
	xSemaphoreTake(Sema_Time_minute_handle,portMAX_DELAY);
	return Time_minute;
}
    240e:	0f 93       	push	r16
    2410:	03 e0       	ldi	r16, 0x03	; 3
    2412:	23 e1       	ldi	r18, 0x13	; 19
    2414:	3a e0       	ldi	r19, 0x0A	; 10
    2416:	40 e0       	ldi	r20, 0x00	; 0
    2418:	50 e0       	ldi	r21, 0x00	; 0
    241a:	60 e0       	ldi	r22, 0x00	; 0
    241c:	81 e0       	ldi	r24, 0x01	; 1
    241e:	3e d5       	rcall	.+2684   	; 0x2e9c <xQueueGenericCreateStatic>
    2420:	90 93 33 0a 	sts	0x0A33, r25	; 0x800a33 <Sema_Gear_ratio_handle+0x1>
    2424:	80 93 32 0a 	sts	0x0A32, r24	; 0x800a32 <Sema_Gear_ratio_handle>
    2428:	20 ef       	ldi	r18, 0xF0	; 240
    242a:	39 e0       	ldi	r19, 0x09	; 9
    242c:	40 e0       	ldi	r20, 0x00	; 0
    242e:	50 e0       	ldi	r21, 0x00	; 0
    2430:	60 e0       	ldi	r22, 0x00	; 0
    2432:	81 e0       	ldi	r24, 0x01	; 1
    2434:	33 d5       	rcall	.+2662   	; 0x2e9c <xQueueGenericCreateStatic>
    2436:	90 93 10 0a 	sts	0x0A10, r25	; 0x800a10 <Sema_RPM_max_handle+0x1>
    243a:	80 93 0f 0a 	sts	0x0A0F, r24	; 0x800a0f <Sema_RPM_max_handle>
    243e:	2d ec       	ldi	r18, 0xCD	; 205
    2440:	39 e0       	ldi	r19, 0x09	; 9
    2442:	40 e0       	ldi	r20, 0x00	; 0
    2444:	50 e0       	ldi	r21, 0x00	; 0
    2446:	60 e0       	ldi	r22, 0x00	; 0
    2448:	81 e0       	ldi	r24, 0x01	; 1
    244a:	28 d5       	rcall	.+2640   	; 0x2e9c <xQueueGenericCreateStatic>
    244c:	90 93 ed 09 	sts	0x09ED, r25	; 0x8009ed <Sema_Conveyor_length_handle+0x1>
    2450:	80 93 ec 09 	sts	0x09EC, r24	; 0x8009ec <Sema_Conveyor_length_handle>
    2454:	2a ea       	ldi	r18, 0xAA	; 170
    2456:	39 e0       	ldi	r19, 0x09	; 9
    2458:	40 e0       	ldi	r20, 0x00	; 0
    245a:	50 e0       	ldi	r21, 0x00	; 0
    245c:	60 e0       	ldi	r22, 0x00	; 0
    245e:	81 e0       	ldi	r24, 0x01	; 1
    2460:	1d d5       	rcall	.+2618   	; 0x2e9c <xQueueGenericCreateStatic>
    2462:	90 93 ca 09 	sts	0x09CA, r25	; 0x8009ca <Sema_Driver_diameter_handle+0x1>
    2466:	80 93 c9 09 	sts	0x09C9, r24	; 0x8009c9 <Sema_Driver_diameter_handle>
    246a:	27 e8       	ldi	r18, 0x87	; 135
    246c:	39 e0       	ldi	r19, 0x09	; 9
    246e:	40 e0       	ldi	r20, 0x00	; 0
    2470:	50 e0       	ldi	r21, 0x00	; 0
    2472:	60 e0       	ldi	r22, 0x00	; 0
    2474:	81 e0       	ldi	r24, 0x01	; 1
    2476:	12 d5       	rcall	.+2596   	; 0x2e9c <xQueueGenericCreateStatic>
    2478:	90 93 a7 09 	sts	0x09A7, r25	; 0x8009a7 <Sema_Time_minute_handle+0x1>
    247c:	80 93 a6 09 	sts	0x09A6, r24	; 0x8009a6 <Sema_Time_minute_handle>
    2480:	24 e6       	ldi	r18, 0x64	; 100
    2482:	39 e0       	ldi	r19, 0x09	; 9
    2484:	40 e0       	ldi	r20, 0x00	; 0
    2486:	50 e0       	ldi	r21, 0x00	; 0
    2488:	60 e0       	ldi	r22, 0x00	; 0
    248a:	81 e0       	ldi	r24, 0x01	; 1
    248c:	07 d5       	rcall	.+2574   	; 0x2e9c <xQueueGenericCreateStatic>
    248e:	90 93 84 09 	sts	0x0984, r25	; 0x800984 <Sema_Time_second_handle+0x1>
    2492:	80 93 83 09 	sts	0x0983, r24	; 0x800983 <Sema_Time_second_handle>
    2496:	0f 91       	pop	r16
    2498:	08 95       	ret

0000249a <RTE_set_Gear_ratio>:
    249a:	90 93 12 0a 	sts	0x0A12, r25	; 0x800a12 <Gear_ratio+0x1>
    249e:	80 93 11 0a 	sts	0x0A11, r24	; 0x800a11 <Gear_ratio>
    24a2:	20 e0       	ldi	r18, 0x00	; 0
    24a4:	40 e0       	ldi	r20, 0x00	; 0
    24a6:	50 e0       	ldi	r21, 0x00	; 0
    24a8:	60 e0       	ldi	r22, 0x00	; 0
    24aa:	70 e0       	ldi	r23, 0x00	; 0
    24ac:	80 91 32 0a 	lds	r24, 0x0A32	; 0x800a32 <Sema_Gear_ratio_handle>
    24b0:	90 91 33 0a 	lds	r25, 0x0A33	; 0x800a33 <Sema_Gear_ratio_handle+0x1>
    24b4:	08 c5       	rjmp	.+2576   	; 0x2ec6 <xQueueGenericSend>
    24b6:	08 95       	ret

000024b8 <RTE_set_RPM_max>:
    24b8:	90 93 ef 09 	sts	0x09EF, r25	; 0x8009ef <RPM_max+0x1>
    24bc:	80 93 ee 09 	sts	0x09EE, r24	; 0x8009ee <RPM_max>
    24c0:	20 e0       	ldi	r18, 0x00	; 0
    24c2:	40 e0       	ldi	r20, 0x00	; 0
    24c4:	50 e0       	ldi	r21, 0x00	; 0
    24c6:	60 e0       	ldi	r22, 0x00	; 0
    24c8:	70 e0       	ldi	r23, 0x00	; 0
    24ca:	80 91 0f 0a 	lds	r24, 0x0A0F	; 0x800a0f <Sema_RPM_max_handle>
    24ce:	90 91 10 0a 	lds	r25, 0x0A10	; 0x800a10 <Sema_RPM_max_handle+0x1>
    24d2:	f9 c4       	rjmp	.+2546   	; 0x2ec6 <xQueueGenericSend>
    24d4:	08 95       	ret

000024d6 <RTE_set_Conveyor_length>:
    24d6:	90 93 cc 09 	sts	0x09CC, r25	; 0x8009cc <Conveyor_length+0x1>
    24da:	80 93 cb 09 	sts	0x09CB, r24	; 0x8009cb <Conveyor_length>
    24de:	20 e0       	ldi	r18, 0x00	; 0
    24e0:	40 e0       	ldi	r20, 0x00	; 0
    24e2:	50 e0       	ldi	r21, 0x00	; 0
    24e4:	60 e0       	ldi	r22, 0x00	; 0
    24e6:	70 e0       	ldi	r23, 0x00	; 0
    24e8:	80 91 ec 09 	lds	r24, 0x09EC	; 0x8009ec <Sema_Conveyor_length_handle>
    24ec:	90 91 ed 09 	lds	r25, 0x09ED	; 0x8009ed <Sema_Conveyor_length_handle+0x1>
    24f0:	ea c4       	rjmp	.+2516   	; 0x2ec6 <xQueueGenericSend>
    24f2:	08 95       	ret

000024f4 <RTE_set_Driver_diameter>:
    24f4:	90 93 a9 09 	sts	0x09A9, r25	; 0x8009a9 <Driver_diameter+0x1>
    24f8:	80 93 a8 09 	sts	0x09A8, r24	; 0x8009a8 <Driver_diameter>
    24fc:	20 e0       	ldi	r18, 0x00	; 0
    24fe:	40 e0       	ldi	r20, 0x00	; 0
    2500:	50 e0       	ldi	r21, 0x00	; 0
    2502:	60 e0       	ldi	r22, 0x00	; 0
    2504:	70 e0       	ldi	r23, 0x00	; 0
    2506:	80 91 c9 09 	lds	r24, 0x09C9	; 0x8009c9 <Sema_Driver_diameter_handle>
    250a:	90 91 ca 09 	lds	r25, 0x09CA	; 0x8009ca <Sema_Driver_diameter_handle+0x1>
    250e:	db c4       	rjmp	.+2486   	; 0x2ec6 <xQueueGenericSend>
    2510:	08 95       	ret

00002512 <RTE_set_Time_minute>:
    2512:	90 93 86 09 	sts	0x0986, r25	; 0x800986 <Time_minute+0x1>
    2516:	80 93 85 09 	sts	0x0985, r24	; 0x800985 <Time_minute>
    251a:	20 e0       	ldi	r18, 0x00	; 0
    251c:	40 e0       	ldi	r20, 0x00	; 0
    251e:	50 e0       	ldi	r21, 0x00	; 0
    2520:	60 e0       	ldi	r22, 0x00	; 0
    2522:	70 e0       	ldi	r23, 0x00	; 0
    2524:	80 91 a6 09 	lds	r24, 0x09A6	; 0x8009a6 <Sema_Time_minute_handle>
    2528:	90 91 a7 09 	lds	r25, 0x09A7	; 0x8009a7 <Sema_Time_minute_handle+0x1>
    252c:	cc c4       	rjmp	.+2456   	; 0x2ec6 <xQueueGenericSend>
    252e:	08 95       	ret

00002530 <RTE_set_Time_second>:

void RTE_set_Time_second(uint16_t u16Timesecond){
	Time_second = u16Timesecond;
    2530:	90 93 63 09 	sts	0x0963, r25	; 0x800963 <Time_second+0x1>
    2534:	80 93 62 09 	sts	0x0962, r24	; 0x800962 <Time_second>
	xSemaphoreGive(Sema_Time_second_handle);
    2538:	20 e0       	ldi	r18, 0x00	; 0
    253a:	40 e0       	ldi	r20, 0x00	; 0
    253c:	50 e0       	ldi	r21, 0x00	; 0
    253e:	60 e0       	ldi	r22, 0x00	; 0
    2540:	70 e0       	ldi	r23, 0x00	; 0
    2542:	80 91 83 09 	lds	r24, 0x0983	; 0x800983 <Sema_Time_second_handle>
    2546:	90 91 84 09 	lds	r25, 0x0984	; 0x800984 <Sema_Time_second_handle+0x1>
    254a:	bd c4       	rjmp	.+2426   	; 0x2ec6 <xQueueGenericSend>
    254c:	08 95       	ret

0000254e <RTE_levels_init>:

uint16_t RTE_get_tank_level(void)
{
	xSemaphoreTake(Sema_tank_level_handle,portMAX_DELAY);
	return tank_level ;
}
    254e:	0f 93       	push	r16
    2550:	03 e0       	ldi	r16, 0x03	; 3
    2552:	27 e5       	ldi	r18, 0x57	; 87
    2554:	3a e0       	ldi	r19, 0x0A	; 10
    2556:	40 e0       	ldi	r20, 0x00	; 0
    2558:	50 e0       	ldi	r21, 0x00	; 0
    255a:	60 e0       	ldi	r22, 0x00	; 0
    255c:	81 e0       	ldi	r24, 0x01	; 1
    255e:	9e d4       	rcall	.+2364   	; 0x2e9c <xQueueGenericCreateStatic>
    2560:	90 93 77 0a 	sts	0x0A77, r25	; 0x800a77 <Sema_tank_level_handle+0x1>
    2564:	80 93 76 0a 	sts	0x0A76, r24	; 0x800a76 <Sema_tank_level_handle>
    2568:	24 e3       	ldi	r18, 0x34	; 52
    256a:	3a e0       	ldi	r19, 0x0A	; 10
    256c:	40 e0       	ldi	r20, 0x00	; 0
    256e:	50 e0       	ldi	r21, 0x00	; 0
    2570:	60 e0       	ldi	r22, 0x00	; 0
    2572:	81 e0       	ldi	r24, 0x01	; 1
    2574:	93 d4       	rcall	.+2342   	; 0x2e9c <xQueueGenericCreateStatic>
    2576:	90 93 54 0a 	sts	0x0A54, r25	; 0x800a54 <Sema_blancher_level_handle+0x1>
    257a:	80 93 53 0a 	sts	0x0A53, r24	; 0x800a53 <Sema_blancher_level_handle>
    257e:	0f 91       	pop	r16
    2580:	08 95       	ret

00002582 <RTE_set_tank_level>:
    2582:	90 93 56 0a 	sts	0x0A56, r25	; 0x800a56 <tank_level+0x1>
    2586:	80 93 55 0a 	sts	0x0A55, r24	; 0x800a55 <tank_level>
    258a:	20 e0       	ldi	r18, 0x00	; 0
    258c:	40 e0       	ldi	r20, 0x00	; 0
    258e:	50 e0       	ldi	r21, 0x00	; 0
    2590:	60 e0       	ldi	r22, 0x00	; 0
    2592:	70 e0       	ldi	r23, 0x00	; 0
    2594:	80 91 76 0a 	lds	r24, 0x0A76	; 0x800a76 <Sema_tank_level_handle>
    2598:	90 91 77 0a 	lds	r25, 0x0A77	; 0x800a77 <Sema_tank_level_handle+0x1>
    259c:	94 c4       	rjmp	.+2344   	; 0x2ec6 <xQueueGenericSend>
    259e:	08 95       	ret

000025a0 <RTE_set_blancher_level>:

void RTE_set_blancher_level(uint16_t u16blancher_level)
{
	tank_level = u16blancher_level ;
    25a0:	90 93 56 0a 	sts	0x0A56, r25	; 0x800a56 <tank_level+0x1>
    25a4:	80 93 55 0a 	sts	0x0A55, r24	; 0x800a55 <tank_level>
	xSemaphoreGive(Sema_blancher_level_handle);
    25a8:	20 e0       	ldi	r18, 0x00	; 0
    25aa:	40 e0       	ldi	r20, 0x00	; 0
    25ac:	50 e0       	ldi	r21, 0x00	; 0
    25ae:	60 e0       	ldi	r22, 0x00	; 0
    25b0:	70 e0       	ldi	r23, 0x00	; 0
    25b2:	80 91 53 0a 	lds	r24, 0x0A53	; 0x800a53 <Sema_blancher_level_handle>
    25b6:	90 91 54 0a 	lds	r25, 0x0A54	; 0x800a54 <Sema_blancher_level_handle+0x1>
    25ba:	85 c4       	rjmp	.+2314   	; 0x2ec6 <xQueueGenericSend>
    25bc:	08 95       	ret

000025be <RTE_init>:
#include "RTE_levels.h"
#include "RTE_temperature.h"
#include "RTE_main.h"

void RTE_init(void){
	RTE_encoder_init();
    25be:	21 df       	rcall	.-446    	; 0x2402 <RTE_encoder_init>
	RTE_invertersetting_init();
    25c0:	26 df       	rcall	.-436    	; 0x240e <RTE_invertersetting_init>
	RTE_operations_init();
    25c2:	03 d0       	rcall	.+6      	; 0x25ca <RTE_operations_init>
	RTE_levels_init();
    25c4:	c4 df       	rcall	.-120    	; 0x254e <RTE_levels_init>
    25c6:	6d c0       	rjmp	.+218    	; 0x26a2 <RTE_temperature_init>
	RTE_temperature_init();
    25c8:	08 95       	ret

000025ca <RTE_operations_init>:
    25ca:	0f 93       	push	r16
    25cc:	03 e0       	ldi	r16, 0x03	; 3
}

uint16_t RTE_get_Wash_Operation(void){
	xSemaphoreTake(Sema_Wash_Operation_handle,portMAX_DELAY);
	return Wash_Operation;
}
    25ce:	23 ee       	ldi	r18, 0xE3	; 227
    25d0:	3a e0       	ldi	r19, 0x0A	; 10
    25d2:	40 e0       	ldi	r20, 0x00	; 0
    25d4:	50 e0       	ldi	r21, 0x00	; 0
    25d6:	60 e0       	ldi	r22, 0x00	; 0
    25d8:	81 e0       	ldi	r24, 0x01	; 1
    25da:	60 d4       	rcall	.+2240   	; 0x2e9c <xQueueGenericCreateStatic>
    25dc:	90 93 03 0b 	sts	0x0B03, r25	; 0x800b03 <Sema_System_on_handle+0x1>
    25e0:	80 93 02 0b 	sts	0x0B02, r24	; 0x800b02 <Sema_System_on_handle>
    25e4:	20 ec       	ldi	r18, 0xC0	; 192
    25e6:	3a e0       	ldi	r19, 0x0A	; 10
    25e8:	40 e0       	ldi	r20, 0x00	; 0
    25ea:	50 e0       	ldi	r21, 0x00	; 0
    25ec:	60 e0       	ldi	r22, 0x00	; 0
    25ee:	81 e0       	ldi	r24, 0x01	; 1
    25f0:	55 d4       	rcall	.+2218   	; 0x2e9c <xQueueGenericCreateStatic>
    25f2:	90 93 e0 0a 	sts	0x0AE0, r25	; 0x800ae0 <Sema_Start_blancher_Operation_handle+0x1>
    25f6:	80 93 df 0a 	sts	0x0ADF, r24	; 0x800adf <Sema_Start_blancher_Operation_handle>
    25fa:	2d e9       	ldi	r18, 0x9D	; 157
    25fc:	3a e0       	ldi	r19, 0x0A	; 10
    25fe:	40 e0       	ldi	r20, 0x00	; 0
    2600:	50 e0       	ldi	r21, 0x00	; 0
    2602:	60 e0       	ldi	r22, 0x00	; 0
    2604:	81 e0       	ldi	r24, 0x01	; 1
    2606:	4a d4       	rcall	.+2196   	; 0x2e9c <xQueueGenericCreateStatic>
    2608:	90 93 bd 0a 	sts	0x0ABD, r25	; 0x800abd <Sema_Wash_Operation_handle+0x1>
    260c:	80 93 bc 0a 	sts	0x0ABC, r24	; 0x800abc <Sema_Wash_Operation_handle>
    2610:	2a e7       	ldi	r18, 0x7A	; 122
    2612:	3a e0       	ldi	r19, 0x0A	; 10
    2614:	40 e0       	ldi	r20, 0x00	; 0
    2616:	50 e0       	ldi	r21, 0x00	; 0
    2618:	60 e0       	ldi	r22, 0x00	; 0
    261a:	81 e0       	ldi	r24, 0x01	; 1
    261c:	3f d4       	rcall	.+2174   	; 0x2e9c <xQueueGenericCreateStatic>
    261e:	90 93 9a 0a 	sts	0x0A9A, r25	; 0x800a9a <Sema_Tank_Calibration_Operation_handle+0x1>
    2622:	80 93 99 0a 	sts	0x0A99, r24	; 0x800a99 <Sema_Tank_Calibration_Operation_handle>
    2626:	0f 91       	pop	r16
    2628:	08 95       	ret

0000262a <RTE_set_System_on>:
    262a:	90 93 e2 0a 	sts	0x0AE2, r25	; 0x800ae2 <System_on+0x1>
    262e:	80 93 e1 0a 	sts	0x0AE1, r24	; 0x800ae1 <System_on>
    2632:	20 e0       	ldi	r18, 0x00	; 0
    2634:	40 e0       	ldi	r20, 0x00	; 0
    2636:	50 e0       	ldi	r21, 0x00	; 0
    2638:	60 e0       	ldi	r22, 0x00	; 0
    263a:	70 e0       	ldi	r23, 0x00	; 0
    263c:	80 91 02 0b 	lds	r24, 0x0B02	; 0x800b02 <Sema_System_on_handle>
    2640:	90 91 03 0b 	lds	r25, 0x0B03	; 0x800b03 <Sema_System_on_handle+0x1>
    2644:	40 c4       	rjmp	.+2176   	; 0x2ec6 <xQueueGenericSend>
    2646:	08 95       	ret

00002648 <RTE_set_Start_blancher_Operation>:
    2648:	90 93 bf 0a 	sts	0x0ABF, r25	; 0x800abf <Start_blancher_Operation+0x1>
    264c:	80 93 be 0a 	sts	0x0ABE, r24	; 0x800abe <Start_blancher_Operation>
    2650:	20 e0       	ldi	r18, 0x00	; 0
    2652:	40 e0       	ldi	r20, 0x00	; 0
    2654:	50 e0       	ldi	r21, 0x00	; 0
    2656:	60 e0       	ldi	r22, 0x00	; 0
    2658:	70 e0       	ldi	r23, 0x00	; 0
    265a:	80 91 df 0a 	lds	r24, 0x0ADF	; 0x800adf <Sema_Start_blancher_Operation_handle>
    265e:	90 91 e0 0a 	lds	r25, 0x0AE0	; 0x800ae0 <Sema_Start_blancher_Operation_handle+0x1>
    2662:	31 c4       	rjmp	.+2146   	; 0x2ec6 <xQueueGenericSend>
    2664:	08 95       	ret

00002666 <RTE_set_Wash_Operation>:
    2666:	90 93 9c 0a 	sts	0x0A9C, r25	; 0x800a9c <Wash_Operation+0x1>
    266a:	80 93 9b 0a 	sts	0x0A9B, r24	; 0x800a9b <Wash_Operation>
    266e:	20 e0       	ldi	r18, 0x00	; 0
    2670:	40 e0       	ldi	r20, 0x00	; 0
    2672:	50 e0       	ldi	r21, 0x00	; 0
    2674:	60 e0       	ldi	r22, 0x00	; 0
    2676:	70 e0       	ldi	r23, 0x00	; 0
    2678:	80 91 bc 0a 	lds	r24, 0x0ABC	; 0x800abc <Sema_Wash_Operation_handle>
    267c:	90 91 bd 0a 	lds	r25, 0x0ABD	; 0x800abd <Sema_Wash_Operation_handle+0x1>
    2680:	22 c4       	rjmp	.+2116   	; 0x2ec6 <xQueueGenericSend>
    2682:	08 95       	ret

00002684 <RTE_set_Tank_Calibration_Operation>:




void RTE_set_Tank_Calibration_Operation(uint16_t u16Tank_Calibration_Operation){
	Tank_Calibration_Operation = u16Tank_Calibration_Operation;
    2684:	90 93 79 0a 	sts	0x0A79, r25	; 0x800a79 <Tank_Calibration_Operation+0x1>
    2688:	80 93 78 0a 	sts	0x0A78, r24	; 0x800a78 <Tank_Calibration_Operation>
	xSemaphoreGive(Sema_Tank_Calibration_Operation_handle);
    268c:	20 e0       	ldi	r18, 0x00	; 0
    268e:	40 e0       	ldi	r20, 0x00	; 0
    2690:	50 e0       	ldi	r21, 0x00	; 0
    2692:	60 e0       	ldi	r22, 0x00	; 0
    2694:	70 e0       	ldi	r23, 0x00	; 0
    2696:	80 91 99 0a 	lds	r24, 0x0A99	; 0x800a99 <Sema_Tank_Calibration_Operation_handle>
    269a:	90 91 9a 0a 	lds	r25, 0x0A9A	; 0x800a9a <Sema_Tank_Calibration_Operation_handle+0x1>
    269e:	13 c4       	rjmp	.+2086   	; 0x2ec6 <xQueueGenericSend>
    26a0:	08 95       	ret

000026a2 <RTE_temperature_init>:
}

uint16_t RTE_get_Negative_offset_temperature(void){
	xSemaphoreTake(Sema_Negative_offset_temp_handle,portMAX_DELAY);
	return Negative_offset_temp;
}
    26a2:	0f 93       	push	r16
    26a4:	03 e0       	ldi	r16, 0x03	; 3
    26a6:	2a ed       	ldi	r18, 0xDA	; 218
    26a8:	3b e0       	ldi	r19, 0x0B	; 11
    26aa:	40 e0       	ldi	r20, 0x00	; 0
    26ac:	50 e0       	ldi	r21, 0x00	; 0
    26ae:	60 e0       	ldi	r22, 0x00	; 0
    26b0:	81 e0       	ldi	r24, 0x01	; 1
    26b2:	f4 d3       	rcall	.+2024   	; 0x2e9c <xQueueGenericCreateStatic>
    26b4:	90 93 fa 0b 	sts	0x0BFA, r25	; 0x800bfa <Sema_Sleep_temp_handle+0x1>
    26b8:	80 93 f9 0b 	sts	0x0BF9, r24	; 0x800bf9 <Sema_Sleep_temp_handle>
    26bc:	27 eb       	ldi	r18, 0xB7	; 183
    26be:	3b e0       	ldi	r19, 0x0B	; 11
    26c0:	40 e0       	ldi	r20, 0x00	; 0
    26c2:	50 e0       	ldi	r21, 0x00	; 0
    26c4:	60 e0       	ldi	r22, 0x00	; 0
    26c6:	81 e0       	ldi	r24, 0x01	; 1
    26c8:	e9 d3       	rcall	.+2002   	; 0x2e9c <xQueueGenericCreateStatic>
    26ca:	90 93 d7 0b 	sts	0x0BD7, r25	; 0x800bd7 <Sema_Set_temp_handle+0x1>
    26ce:	80 93 d6 0b 	sts	0x0BD6, r24	; 0x800bd6 <Sema_Set_temp_handle>
    26d2:	24 e9       	ldi	r18, 0x94	; 148
    26d4:	3b e0       	ldi	r19, 0x0B	; 11
    26d6:	40 e0       	ldi	r20, 0x00	; 0
    26d8:	50 e0       	ldi	r21, 0x00	; 0
    26da:	60 e0       	ldi	r22, 0x00	; 0
    26dc:	81 e0       	ldi	r24, 0x01	; 1
    26de:	de d3       	rcall	.+1980   	; 0x2e9c <xQueueGenericCreateStatic>
    26e0:	90 93 b4 0b 	sts	0x0BB4, r25	; 0x800bb4 <Sema_threshold_set_temp_handle+0x1>
    26e4:	80 93 b3 0b 	sts	0x0BB3, r24	; 0x800bb3 <Sema_threshold_set_temp_handle>
    26e8:	21 e7       	ldi	r18, 0x71	; 113
    26ea:	3b e0       	ldi	r19, 0x0B	; 11
    26ec:	40 e0       	ldi	r20, 0x00	; 0
    26ee:	50 e0       	ldi	r21, 0x00	; 0
    26f0:	60 e0       	ldi	r22, 0x00	; 0
    26f2:	81 e0       	ldi	r24, 0x01	; 1
    26f4:	d3 d3       	rcall	.+1958   	; 0x2e9c <xQueueGenericCreateStatic>
    26f6:	90 93 91 0b 	sts	0x0B91, r25	; 0x800b91 <Sema_threshold_sleep_temp_handle+0x1>
    26fa:	80 93 90 0b 	sts	0x0B90, r24	; 0x800b90 <Sema_threshold_sleep_temp_handle>
    26fe:	2e e4       	ldi	r18, 0x4E	; 78
    2700:	3b e0       	ldi	r19, 0x0B	; 11
    2702:	40 e0       	ldi	r20, 0x00	; 0
    2704:	50 e0       	ldi	r21, 0x00	; 0
    2706:	60 e0       	ldi	r22, 0x00	; 0
    2708:	81 e0       	ldi	r24, 0x01	; 1
    270a:	c8 d3       	rcall	.+1936   	; 0x2e9c <xQueueGenericCreateStatic>
    270c:	90 93 6e 0b 	sts	0x0B6E, r25	; 0x800b6e <Sema_Positive_offset_temp_handle+0x1>
    2710:	80 93 6d 0b 	sts	0x0B6D, r24	; 0x800b6d <Sema_Positive_offset_temp_handle>
    2714:	2b e2       	ldi	r18, 0x2B	; 43
    2716:	3b e0       	ldi	r19, 0x0B	; 11
    2718:	40 e0       	ldi	r20, 0x00	; 0
    271a:	50 e0       	ldi	r21, 0x00	; 0
    271c:	60 e0       	ldi	r22, 0x00	; 0
    271e:	81 e0       	ldi	r24, 0x01	; 1
    2720:	bd d3       	rcall	.+1914   	; 0x2e9c <xQueueGenericCreateStatic>
    2722:	90 93 4b 0b 	sts	0x0B4B, r25	; 0x800b4b <Sema_Negative_offset_temp_handle+0x1>
    2726:	80 93 4a 0b 	sts	0x0B4A, r24	; 0x800b4a <Sema_Negative_offset_temp_handle>
    272a:	28 e0       	ldi	r18, 0x08	; 8
    272c:	3b e0       	ldi	r19, 0x0B	; 11
    272e:	40 e0       	ldi	r20, 0x00	; 0
    2730:	50 e0       	ldi	r21, 0x00	; 0
    2732:	60 e0       	ldi	r22, 0x00	; 0
    2734:	81 e0       	ldi	r24, 0x01	; 1
    2736:	b2 d3       	rcall	.+1892   	; 0x2e9c <xQueueGenericCreateStatic>
    2738:	90 93 28 0b 	sts	0x0B28, r25	; 0x800b28 <Sema_APP_current_temp_handle+0x1>
    273c:	80 93 27 0b 	sts	0x0B27, r24	; 0x800b27 <Sema_APP_current_temp_handle>
    2740:	0f 91       	pop	r16
    2742:	08 95       	ret

00002744 <RTE_set_Sleep_temperature>:
    2744:	90 93 d9 0b 	sts	0x0BD9, r25	; 0x800bd9 <Sleep_temp+0x1>
    2748:	80 93 d8 0b 	sts	0x0BD8, r24	; 0x800bd8 <Sleep_temp>
    274c:	20 e0       	ldi	r18, 0x00	; 0
    274e:	40 e0       	ldi	r20, 0x00	; 0
    2750:	50 e0       	ldi	r21, 0x00	; 0
    2752:	60 e0       	ldi	r22, 0x00	; 0
    2754:	70 e0       	ldi	r23, 0x00	; 0
    2756:	80 91 f9 0b 	lds	r24, 0x0BF9	; 0x800bf9 <Sema_Sleep_temp_handle>
    275a:	90 91 fa 0b 	lds	r25, 0x0BFA	; 0x800bfa <Sema_Sleep_temp_handle+0x1>
    275e:	b3 c3       	rjmp	.+1894   	; 0x2ec6 <xQueueGenericSend>
    2760:	08 95       	ret

00002762 <RTE_set_Set_temperature>:
    2762:	90 93 b6 0b 	sts	0x0BB6, r25	; 0x800bb6 <Set_temp+0x1>
    2766:	80 93 b5 0b 	sts	0x0BB5, r24	; 0x800bb5 <Set_temp>
    276a:	20 e0       	ldi	r18, 0x00	; 0
    276c:	40 e0       	ldi	r20, 0x00	; 0
    276e:	50 e0       	ldi	r21, 0x00	; 0
    2770:	60 e0       	ldi	r22, 0x00	; 0
    2772:	70 e0       	ldi	r23, 0x00	; 0
    2774:	80 91 d6 0b 	lds	r24, 0x0BD6	; 0x800bd6 <Sema_Set_temp_handle>
    2778:	90 91 d7 0b 	lds	r25, 0x0BD7	; 0x800bd7 <Sema_Set_temp_handle+0x1>
    277c:	a4 c3       	rjmp	.+1864   	; 0x2ec6 <xQueueGenericSend>
    277e:	08 95       	ret

00002780 <RTE_set_Threshold_set_temperature>:
    2780:	90 93 93 0b 	sts	0x0B93, r25	; 0x800b93 <Threshold_set_temp+0x1>
    2784:	80 93 92 0b 	sts	0x0B92, r24	; 0x800b92 <Threshold_set_temp>
    2788:	20 e0       	ldi	r18, 0x00	; 0
    278a:	40 e0       	ldi	r20, 0x00	; 0
    278c:	50 e0       	ldi	r21, 0x00	; 0
    278e:	60 e0       	ldi	r22, 0x00	; 0
    2790:	70 e0       	ldi	r23, 0x00	; 0
    2792:	80 91 b3 0b 	lds	r24, 0x0BB3	; 0x800bb3 <Sema_threshold_set_temp_handle>
    2796:	90 91 b4 0b 	lds	r25, 0x0BB4	; 0x800bb4 <Sema_threshold_set_temp_handle+0x1>
    279a:	95 c3       	rjmp	.+1834   	; 0x2ec6 <xQueueGenericSend>
    279c:	08 95       	ret

0000279e <RTE_set_Threshold_sleep_temperature>:
    279e:	90 93 70 0b 	sts	0x0B70, r25	; 0x800b70 <Threshold_sleep_temp+0x1>
    27a2:	80 93 6f 0b 	sts	0x0B6F, r24	; 0x800b6f <Threshold_sleep_temp>
    27a6:	20 e0       	ldi	r18, 0x00	; 0
    27a8:	40 e0       	ldi	r20, 0x00	; 0
    27aa:	50 e0       	ldi	r21, 0x00	; 0
    27ac:	60 e0       	ldi	r22, 0x00	; 0
    27ae:	70 e0       	ldi	r23, 0x00	; 0
    27b0:	80 91 90 0b 	lds	r24, 0x0B90	; 0x800b90 <Sema_threshold_sleep_temp_handle>
    27b4:	90 91 91 0b 	lds	r25, 0x0B91	; 0x800b91 <Sema_threshold_sleep_temp_handle+0x1>
    27b8:	86 c3       	rjmp	.+1804   	; 0x2ec6 <xQueueGenericSend>
    27ba:	08 95       	ret

000027bc <RTE_set_Positive_offset_temperature>:
    27bc:	90 93 4d 0b 	sts	0x0B4D, r25	; 0x800b4d <Positive_offset_temp+0x1>
    27c0:	80 93 4c 0b 	sts	0x0B4C, r24	; 0x800b4c <Positive_offset_temp>
    27c4:	20 e0       	ldi	r18, 0x00	; 0
    27c6:	40 e0       	ldi	r20, 0x00	; 0
    27c8:	50 e0       	ldi	r21, 0x00	; 0
    27ca:	60 e0       	ldi	r22, 0x00	; 0
    27cc:	70 e0       	ldi	r23, 0x00	; 0
    27ce:	80 91 6d 0b 	lds	r24, 0x0B6D	; 0x800b6d <Sema_Positive_offset_temp_handle>
    27d2:	90 91 6e 0b 	lds	r25, 0x0B6E	; 0x800b6e <Sema_Positive_offset_temp_handle+0x1>
    27d6:	77 c3       	rjmp	.+1774   	; 0x2ec6 <xQueueGenericSend>
    27d8:	08 95       	ret

000027da <RTE_set_Negative_offset_temperature>:
    27da:	90 93 2a 0b 	sts	0x0B2A, r25	; 0x800b2a <Negative_offset_temp+0x1>
    27de:	80 93 29 0b 	sts	0x0B29, r24	; 0x800b29 <Negative_offset_temp>
    27e2:	20 e0       	ldi	r18, 0x00	; 0
    27e4:	40 e0       	ldi	r20, 0x00	; 0
    27e6:	50 e0       	ldi	r21, 0x00	; 0
    27e8:	60 e0       	ldi	r22, 0x00	; 0
    27ea:	70 e0       	ldi	r23, 0x00	; 0
    27ec:	80 91 4a 0b 	lds	r24, 0x0B4A	; 0x800b4a <Sema_Negative_offset_temp_handle>
    27f0:	90 91 4b 0b 	lds	r25, 0x0B4B	; 0x800b4b <Sema_Negative_offset_temp_handle+0x1>
    27f4:	68 c3       	rjmp	.+1744   	; 0x2ec6 <xQueueGenericSend>
    27f6:	08 95       	ret

000027f8 <RTE_set_Current_temperature>:




void RTE_set_Current_temperature(uint16_t u16Currenttemp){
	Current_temperature = u16Currenttemp;
    27f8:	90 93 05 0b 	sts	0x0B05, r25	; 0x800b05 <Current_temperature+0x1>
    27fc:	80 93 04 0b 	sts	0x0B04, r24	; 0x800b04 <Current_temperature>
    2800:	08 95       	ret

00002802 <RTE_get_Current_temperature>:
}

uint16_t RTE_get_Current_temperature(void){
	return Current_temperature;
}
    2802:	80 91 04 0b 	lds	r24, 0x0B04	; 0x800b04 <Current_temperature>
    2806:	90 91 05 0b 	lds	r25, 0x0B05	; 0x800b05 <Current_temperature+0x1>
    280a:	08 95       	ret

0000280c <RTE_set_app_Current_temperature>:

void RTE_set_app_Current_temperature(uint16_t u16Currenttemp){
	APP_current_temp = u16Currenttemp;
    280c:	90 93 07 0b 	sts	0x0B07, r25	; 0x800b07 <APP_current_temp+0x1>
    2810:	80 93 06 0b 	sts	0x0B06, r24	; 0x800b06 <APP_current_temp>
	xSemaphoreGive(Sema_APP_current_temp_handle);
    2814:	20 e0       	ldi	r18, 0x00	; 0
    2816:	40 e0       	ldi	r20, 0x00	; 0
    2818:	50 e0       	ldi	r21, 0x00	; 0
    281a:	60 e0       	ldi	r22, 0x00	; 0
    281c:	70 e0       	ldi	r23, 0x00	; 0
    281e:	80 91 27 0b 	lds	r24, 0x0B27	; 0x800b27 <Sema_APP_current_temp_handle>
    2822:	90 91 28 0b 	lds	r25, 0x0B28	; 0x800b28 <Sema_APP_current_temp_handle+0x1>
    2826:	4f c3       	rjmp	.+1694   	; 0x2ec6 <xQueueGenericSend>
    2828:	08 95       	ret

0000282a <vApplicationStackOverflowHook>:
	   This routine will never return.
	   This routine is referenced in the task.c file of FreeRTOS as an extern.
	\*---------------------------------------------------------------------------*/

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
	DDRB  |= _BV(DDB7);
    282a:	27 9a       	sbi	0x04, 7	; 4
	PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    282c:	2f 9a       	sbi	0x05, 7	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    282e:	2f ef       	ldi	r18, 0xFF	; 255
    2830:	87 ea       	ldi	r24, 0xA7	; 167
    2832:	91 e6       	ldi	r25, 0x61	; 97
    2834:	21 50       	subi	r18, 0x01	; 1
    2836:	80 40       	sbci	r24, 0x00	; 0
    2838:	90 40       	sbci	r25, 0x00	; 0
    283a:	e1 f7       	brne	.-8      	; 0x2834 <vApplicationStackOverflowHook+0xa>
    283c:	00 c0       	rjmp	.+0      	; 0x283e <vApplicationStackOverflowHook+0x14>
    283e:	00 00       	nop
	for(;;)
	{
		_delay_ms(2000);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
		PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED slow blink.
    2840:	1f 9a       	sbi	0x03, 7	; 3
    2842:	f5 cf       	rjmp	.-22     	; 0x282e <vApplicationStackOverflowHook+0x4>

00002844 <vApplicationGetIdleTaskMemory>:
                                    configSTACK_DEPTH_TYPE *pulIdleTaskStackSize )
{
    static StaticTask_t xIdleTaskTCB;
    static StackType_t uxIdleTaskStack[ configMINIMAL_STACK_SIZE ];

    *ppxIdleTaskTCBBuffer = &xIdleTaskTCB;
    2844:	2d ec       	ldi	r18, 0xCD	; 205
    2846:	3c e0       	ldi	r19, 0x0C	; 12
    2848:	fc 01       	movw	r30, r24
    284a:	31 83       	std	Z+1, r19	; 0x01
    284c:	20 83       	st	Z, r18
    *ppxIdleTaskStackBuffer = uxIdleTaskStack;
    284e:	88 e7       	ldi	r24, 0x78	; 120
    2850:	9c e0       	ldi	r25, 0x0C	; 12
    2852:	fb 01       	movw	r30, r22
    2854:	91 83       	std	Z+1, r25	; 0x01
    2856:	80 83       	st	Z, r24
    *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
    2858:	85 e5       	ldi	r24, 0x55	; 85
    285a:	90 e0       	ldi	r25, 0x00	; 0
    285c:	fa 01       	movw	r30, r20
    285e:	91 83       	std	Z+1, r25	; 0x01
    2860:	80 83       	st	Z, r24
    2862:	08 95       	ret

00002864 <vApplicationGetTimerTaskMemory>:
                                     configSTACK_DEPTH_TYPE *pulTimerTaskStackSize )
{
    static StaticTask_t xTimerTaskTCB;
    static StackType_t uxTimerTaskStack[ configTIMER_TASK_STACK_DEPTH ];

    *ppxTimerTaskTCBBuffer = &xTimerTaskTCB;
    2864:	20 e5       	ldi	r18, 0x50	; 80
    2866:	3c e0       	ldi	r19, 0x0C	; 12
    2868:	fc 01       	movw	r30, r24
    286a:	31 83       	std	Z+1, r19	; 0x01
    286c:	20 83       	st	Z, r18
    *ppxTimerTaskStackBuffer = uxTimerTaskStack;
    286e:	8b ef       	ldi	r24, 0xFB	; 251
    2870:	9b e0       	ldi	r25, 0x0B	; 11
    2872:	fb 01       	movw	r30, r22
    2874:	91 83       	std	Z+1, r25	; 0x01
    2876:	80 83       	st	Z, r24
    *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
    2878:	85 e5       	ldi	r24, 0x55	; 85
    287a:	90 e0       	ldi	r25, 0x00	; 0
    287c:	fa 01       	movw	r30, r20
    287e:	91 83       	std	Z+1, r25	; 0x01
    2880:	80 83       	st	Z, r24
    2882:	08 95       	ret

00002884 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    2884:	fc 01       	movw	r30, r24
    /* The list structure contains a list item which is used to mark the
    end of the list.  To initialise the list the list end is inserted
    as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );            /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    2886:	03 96       	adiw	r24, 0x03	; 3
    2888:	92 83       	std	Z+2, r25	; 0x02
    288a:	81 83       	std	Z+1, r24	; 0x01

    /* The list end value is the highest possible value in the list to
    ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
    288c:	2f ef       	ldi	r18, 0xFF	; 255
    288e:	3f ef       	ldi	r19, 0xFF	; 255
    2890:	34 83       	std	Z+4, r19	; 0x04
    2892:	23 83       	std	Z+3, r18	; 0x03

    /* The list end next and previous pointers point to itself so we know
    when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );    /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    2894:	96 83       	std	Z+6, r25	; 0x06
    2896:	85 83       	std	Z+5, r24	; 0x05
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    2898:	90 87       	std	Z+8, r25	; 0x08
    289a:	87 83       	std	Z+7, r24	; 0x07

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    289c:	10 82       	st	Z, r1
    289e:	08 95       	ret

000028a0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
    28a0:	fc 01       	movw	r30, r24
    28a2:	11 86       	std	Z+9, r1	; 0x09
    28a4:	10 86       	std	Z+8, r1	; 0x08
    28a6:	08 95       	ret

000028a8 <vListInsertEnd>:
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    28a8:	cf 93       	push	r28
    28aa:	df 93       	push	r29
    28ac:	9c 01       	movw	r18, r24
    28ae:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
    28b0:	dc 01       	movw	r26, r24
    28b2:	11 96       	adiw	r26, 0x01	; 1
    28b4:	cd 91       	ld	r28, X+
    28b6:	dc 91       	ld	r29, X
    28b8:	12 97       	sbiw	r26, 0x02	; 2
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
    makes the new list item the last item to be removed by a call to
    listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
    28ba:	d3 83       	std	Z+3, r29	; 0x03
    28bc:	c2 83       	std	Z+2, r28	; 0x02
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    28be:	8c 81       	ldd	r24, Y+4	; 0x04
    28c0:	9d 81       	ldd	r25, Y+5	; 0x05
    28c2:	95 83       	std	Z+5, r25	; 0x05
    28c4:	84 83       	std	Z+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
    28c6:	8c 81       	ldd	r24, Y+4	; 0x04
    28c8:	9d 81       	ldd	r25, Y+5	; 0x05
    28ca:	dc 01       	movw	r26, r24
    28cc:	13 96       	adiw	r26, 0x03	; 3
    28ce:	7c 93       	st	X, r23
    28d0:	6e 93       	st	-X, r22
    28d2:	12 97       	sbiw	r26, 0x02	; 2
    pxIndex->pxPrevious = pxNewListItem;
    28d4:	7d 83       	std	Y+5, r23	; 0x05
    28d6:	6c 83       	std	Y+4, r22	; 0x04

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
    28d8:	31 87       	std	Z+9, r19	; 0x09
    28da:	20 87       	std	Z+8, r18	; 0x08

    ( pxList->uxNumberOfItems )++;
    28dc:	f9 01       	movw	r30, r18
    28de:	80 81       	ld	r24, Z
    28e0:	8f 5f       	subi	r24, 0xFF	; 255
    28e2:	80 83       	st	Z, r24
}
    28e4:	df 91       	pop	r29
    28e6:	cf 91       	pop	r28
    28e8:	08 95       	ret

000028ea <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    28ea:	cf 93       	push	r28
    28ec:	df 93       	push	r29
    28ee:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    28f0:	48 81       	ld	r20, Y
    28f2:	59 81       	ldd	r21, Y+1	; 0x01
    new list item should be placed after it.  This ensures that TCBs which are
    stored in ready lists (all of which have the same xItemValue value) get a
    share of the CPU.  However, if the xItemValue is the same as the back marker
    the iteration loop below will not end.  Therefore the value is checked
    first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
    28f4:	4f 3f       	cpi	r20, 0xFF	; 255
    28f6:	2f ef       	ldi	r18, 0xFF	; 255
    28f8:	52 07       	cpc	r21, r18
    28fa:	21 f4       	brne	.+8      	; 0x2904 <vListInsert+0x1a>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
    28fc:	fc 01       	movw	r30, r24
    28fe:	a7 81       	ldd	r26, Z+7	; 0x07
    2900:	b0 85       	ldd	r27, Z+8	; 0x08
    2902:	0d c0       	rjmp	.+26     	; 0x291e <vListInsert+0x34>
            4) Using a queue or semaphore before it has been initialised or
               before the scheduler has been started (are interrupts firing
               before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
    2904:	dc 01       	movw	r26, r24
    2906:	13 96       	adiw	r26, 0x03	; 3
    2908:	01 c0       	rjmp	.+2      	; 0x290c <vListInsert+0x22>
    290a:	df 01       	movw	r26, r30
    290c:	12 96       	adiw	r26, 0x02	; 2
    290e:	ed 91       	ld	r30, X+
    2910:	fc 91       	ld	r31, X
    2912:	13 97       	sbiw	r26, 0x03	; 3
    2914:	20 81       	ld	r18, Z
    2916:	31 81       	ldd	r19, Z+1	; 0x01
    2918:	42 17       	cp	r20, r18
    291a:	53 07       	cpc	r21, r19
    291c:	b0 f7       	brcc	.-20     	; 0x290a <vListInsert+0x20>
            /* There is nothing to do here, just iterating to the wanted
            insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
    291e:	12 96       	adiw	r26, 0x02	; 2
    2920:	ed 91       	ld	r30, X+
    2922:	fc 91       	ld	r31, X
    2924:	13 97       	sbiw	r26, 0x03	; 3
    2926:	fb 83       	std	Y+3, r31	; 0x03
    2928:	ea 83       	std	Y+2, r30	; 0x02
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    292a:	d5 83       	std	Z+5, r29	; 0x05
    292c:	c4 83       	std	Z+4, r28	; 0x04
    pxNewListItem->pxPrevious = pxIterator;
    292e:	bd 83       	std	Y+5, r27	; 0x05
    2930:	ac 83       	std	Y+4, r26	; 0x04
    pxIterator->pxNext = pxNewListItem;
    2932:	13 96       	adiw	r26, 0x03	; 3
    2934:	dc 93       	st	X, r29
    2936:	ce 93       	st	-X, r28
    2938:	12 97       	sbiw	r26, 0x02	; 2

    /* Remember which list the item is in.  This allows fast removal of the
    item later. */
    pxNewListItem->pxContainer = pxList;
    293a:	99 87       	std	Y+9, r25	; 0x09
    293c:	88 87       	std	Y+8, r24	; 0x08

    ( pxList->uxNumberOfItems )++;
    293e:	fc 01       	movw	r30, r24
    2940:	20 81       	ld	r18, Z
    2942:	2f 5f       	subi	r18, 0xFF	; 255
    2944:	20 83       	st	Z, r18
}
    2946:	df 91       	pop	r29
    2948:	cf 91       	pop	r28
    294a:	08 95       	ret

0000294c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    294c:	cf 93       	push	r28
    294e:	df 93       	push	r29
    2950:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
    2952:	a0 85       	ldd	r26, Z+8	; 0x08
    2954:	b1 85       	ldd	r27, Z+9	; 0x09

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    2956:	c2 81       	ldd	r28, Z+2	; 0x02
    2958:	d3 81       	ldd	r29, Z+3	; 0x03
    295a:	84 81       	ldd	r24, Z+4	; 0x04
    295c:	95 81       	ldd	r25, Z+5	; 0x05
    295e:	9d 83       	std	Y+5, r25	; 0x05
    2960:	8c 83       	std	Y+4, r24	; 0x04
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    2962:	c4 81       	ldd	r28, Z+4	; 0x04
    2964:	d5 81       	ldd	r29, Z+5	; 0x05
    2966:	82 81       	ldd	r24, Z+2	; 0x02
    2968:	93 81       	ldd	r25, Z+3	; 0x03
    296a:	9b 83       	std	Y+3, r25	; 0x03
    296c:	8a 83       	std	Y+2, r24	; 0x02

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
    296e:	11 96       	adiw	r26, 0x01	; 1
    2970:	8d 91       	ld	r24, X+
    2972:	9c 91       	ld	r25, X
    2974:	12 97       	sbiw	r26, 0x02	; 2
    2976:	e8 17       	cp	r30, r24
    2978:	f9 07       	cpc	r31, r25
    297a:	31 f4       	brne	.+12     	; 0x2988 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
    297c:	84 81       	ldd	r24, Z+4	; 0x04
    297e:	95 81       	ldd	r25, Z+5	; 0x05
    2980:	12 96       	adiw	r26, 0x02	; 2
    2982:	9c 93       	st	X, r25
    2984:	8e 93       	st	-X, r24
    2986:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
    2988:	11 86       	std	Z+9, r1	; 0x09
    298a:	10 86       	std	Z+8, r1	; 0x08
    ( pxList->uxNumberOfItems )--;
    298c:	8c 91       	ld	r24, X
    298e:	81 50       	subi	r24, 0x01	; 1
    2990:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
    2992:	8c 91       	ld	r24, X
}
    2994:	df 91       	pop	r29
    2996:	cf 91       	pop	r28
    2998:	08 95       	ret

0000299a <pxPortInitialiseStack>:
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
    299a:	31 e1       	ldi	r19, 0x11	; 17
    299c:	fc 01       	movw	r30, r24
    299e:	30 83       	st	Z, r19
    29a0:	31 97       	sbiw	r30, 0x01	; 1
    29a2:	22 e2       	ldi	r18, 0x22	; 34
    29a4:	20 83       	st	Z, r18
    29a6:	31 97       	sbiw	r30, 0x01	; 1
    29a8:	a3 e3       	ldi	r26, 0x33	; 51
    29aa:	a0 83       	st	Z, r26
    29ac:	31 97       	sbiw	r30, 0x01	; 1
    29ae:	60 83       	st	Z, r22
    29b0:	31 97       	sbiw	r30, 0x01	; 1
    29b2:	70 83       	st	Z, r23
    29b4:	31 97       	sbiw	r30, 0x01	; 1
    29b6:	10 82       	st	Z, r1
    29b8:	31 97       	sbiw	r30, 0x01	; 1
    29ba:	10 82       	st	Z, r1
    29bc:	31 97       	sbiw	r30, 0x01	; 1
    29be:	60 e8       	ldi	r22, 0x80	; 128
    29c0:	60 83       	st	Z, r22
    29c2:	31 97       	sbiw	r30, 0x01	; 1
    29c4:	10 82       	st	Z, r1
    29c6:	31 97       	sbiw	r30, 0x01	; 1
    29c8:	10 82       	st	Z, r1
    29ca:	31 97       	sbiw	r30, 0x01	; 1
    29cc:	10 82       	st	Z, r1
    29ce:	31 97       	sbiw	r30, 0x01	; 1
    29d0:	62 e0       	ldi	r22, 0x02	; 2
    29d2:	60 83       	st	Z, r22
    29d4:	31 97       	sbiw	r30, 0x01	; 1
    29d6:	63 e0       	ldi	r22, 0x03	; 3
    29d8:	60 83       	st	Z, r22
    29da:	31 97       	sbiw	r30, 0x01	; 1
    29dc:	64 e0       	ldi	r22, 0x04	; 4
    29de:	60 83       	st	Z, r22
    29e0:	31 97       	sbiw	r30, 0x01	; 1
    29e2:	65 e0       	ldi	r22, 0x05	; 5
    29e4:	60 83       	st	Z, r22
    29e6:	31 97       	sbiw	r30, 0x01	; 1
    29e8:	66 e0       	ldi	r22, 0x06	; 6
    29ea:	60 83       	st	Z, r22
    29ec:	31 97       	sbiw	r30, 0x01	; 1
    29ee:	67 e0       	ldi	r22, 0x07	; 7
    29f0:	60 83       	st	Z, r22
    29f2:	31 97       	sbiw	r30, 0x01	; 1
    29f4:	68 e0       	ldi	r22, 0x08	; 8
    29f6:	60 83       	st	Z, r22
    29f8:	31 97       	sbiw	r30, 0x01	; 1
    29fa:	69 e0       	ldi	r22, 0x09	; 9
    29fc:	60 83       	st	Z, r22
    29fe:	31 97       	sbiw	r30, 0x01	; 1
    2a00:	60 e1       	ldi	r22, 0x10	; 16
    2a02:	60 83       	st	Z, r22
    2a04:	31 97       	sbiw	r30, 0x01	; 1
    2a06:	30 83       	st	Z, r19
    2a08:	31 97       	sbiw	r30, 0x01	; 1
    2a0a:	32 e1       	ldi	r19, 0x12	; 18
    2a0c:	30 83       	st	Z, r19
    2a0e:	31 97       	sbiw	r30, 0x01	; 1
    2a10:	33 e1       	ldi	r19, 0x13	; 19
    2a12:	30 83       	st	Z, r19
    2a14:	31 97       	sbiw	r30, 0x01	; 1
    2a16:	34 e1       	ldi	r19, 0x14	; 20
    2a18:	30 83       	st	Z, r19
    2a1a:	31 97       	sbiw	r30, 0x01	; 1
    2a1c:	35 e1       	ldi	r19, 0x15	; 21
    2a1e:	30 83       	st	Z, r19
    2a20:	31 97       	sbiw	r30, 0x01	; 1
    2a22:	36 e1       	ldi	r19, 0x16	; 22
    2a24:	30 83       	st	Z, r19
    2a26:	31 97       	sbiw	r30, 0x01	; 1
    2a28:	37 e1       	ldi	r19, 0x17	; 23
    2a2a:	30 83       	st	Z, r19
    2a2c:	31 97       	sbiw	r30, 0x01	; 1
    2a2e:	38 e1       	ldi	r19, 0x18	; 24
    2a30:	30 83       	st	Z, r19
    2a32:	31 97       	sbiw	r30, 0x01	; 1
    2a34:	39 e1       	ldi	r19, 0x19	; 25
    2a36:	30 83       	st	Z, r19
    2a38:	31 97       	sbiw	r30, 0x01	; 1
    2a3a:	30 e2       	ldi	r19, 0x20	; 32
    2a3c:	30 83       	st	Z, r19
    2a3e:	31 97       	sbiw	r30, 0x01	; 1
    2a40:	31 e2       	ldi	r19, 0x21	; 33
    2a42:	30 83       	st	Z, r19
    2a44:	31 97       	sbiw	r30, 0x01	; 1
    2a46:	20 83       	st	Z, r18
    2a48:	31 97       	sbiw	r30, 0x01	; 1
    2a4a:	23 e2       	ldi	r18, 0x23	; 35
    2a4c:	20 83       	st	Z, r18
    2a4e:	31 97       	sbiw	r30, 0x01	; 1
    2a50:	40 83       	st	Z, r20
    2a52:	31 97       	sbiw	r30, 0x01	; 1
    2a54:	50 83       	st	Z, r21
    2a56:	31 97       	sbiw	r30, 0x01	; 1
    2a58:	26 e2       	ldi	r18, 0x26	; 38
    2a5a:	20 83       	st	Z, r18
    2a5c:	31 97       	sbiw	r30, 0x01	; 1
    2a5e:	27 e2       	ldi	r18, 0x27	; 39
    2a60:	20 83       	st	Z, r18
    2a62:	31 97       	sbiw	r30, 0x01	; 1
    2a64:	28 e2       	ldi	r18, 0x28	; 40
    2a66:	20 83       	st	Z, r18
    2a68:	31 97       	sbiw	r30, 0x01	; 1
    2a6a:	29 e2       	ldi	r18, 0x29	; 41
    2a6c:	20 83       	st	Z, r18
    2a6e:	31 97       	sbiw	r30, 0x01	; 1
    2a70:	20 e3       	ldi	r18, 0x30	; 48
    2a72:	20 83       	st	Z, r18
    2a74:	31 97       	sbiw	r30, 0x01	; 1
    2a76:	21 e3       	ldi	r18, 0x31	; 49
    2a78:	20 83       	st	Z, r18
    2a7a:	89 97       	sbiw	r24, 0x29	; 41
    2a7c:	08 95       	ret

00002a7e <xPortStartScheduler>:
    2a7e:	a8 95       	wdr
    2a80:	90 ec       	ldi	r25, 0xC0	; 192
    2a82:	88 e1       	ldi	r24, 0x18	; 24
    2a84:	0f b6       	in	r0, 0x3f	; 63
    2a86:	f8 94       	cli
    2a88:	a8 95       	wdr
    2a8a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
    2a8e:	0f be       	out	0x3f, r0	; 63
    2a90:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
    2a94:	a0 91 4e 0d 	lds	r26, 0x0D4E	; 0x800d4e <pxCurrentTCB>
    2a98:	b0 91 4f 0d 	lds	r27, 0x0D4F	; 0x800d4f <pxCurrentTCB+0x1>
    2a9c:	cd 91       	ld	r28, X+
    2a9e:	cd bf       	out	0x3d, r28	; 61
    2aa0:	dd 91       	ld	r29, X+
    2aa2:	de bf       	out	0x3e, r29	; 62
    2aa4:	ff 91       	pop	r31
    2aa6:	ef 91       	pop	r30
    2aa8:	df 91       	pop	r29
    2aaa:	cf 91       	pop	r28
    2aac:	bf 91       	pop	r27
    2aae:	af 91       	pop	r26
    2ab0:	9f 91       	pop	r25
    2ab2:	8f 91       	pop	r24
    2ab4:	7f 91       	pop	r23
    2ab6:	6f 91       	pop	r22
    2ab8:	5f 91       	pop	r21
    2aba:	4f 91       	pop	r20
    2abc:	3f 91       	pop	r19
    2abe:	2f 91       	pop	r18
    2ac0:	1f 91       	pop	r17
    2ac2:	0f 91       	pop	r16
    2ac4:	ff 90       	pop	r15
    2ac6:	ef 90       	pop	r14
    2ac8:	df 90       	pop	r13
    2aca:	cf 90       	pop	r12
    2acc:	bf 90       	pop	r11
    2ace:	af 90       	pop	r10
    2ad0:	9f 90       	pop	r9
    2ad2:	8f 90       	pop	r8
    2ad4:	7f 90       	pop	r7
    2ad6:	6f 90       	pop	r6
    2ad8:	5f 90       	pop	r5
    2ada:	4f 90       	pop	r4
    2adc:	3f 90       	pop	r3
    2ade:	2f 90       	pop	r2
    2ae0:	1f 90       	pop	r1
    2ae2:	0f 90       	pop	r0
    2ae4:	0c be       	out	0x3c, r0	; 60
    2ae6:	0f 90       	pop	r0
    2ae8:	0b be       	out	0x3b, r0	; 59
    2aea:	0f 90       	pop	r0
    2aec:	0f be       	out	0x3f, r0	; 63
    2aee:	0f 90       	pop	r0
    2af0:	08 95       	ret
    2af2:	81 e0       	ldi	r24, 0x01	; 1
    2af4:	08 95       	ret

00002af6 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    2af6:	0f 92       	push	r0
    2af8:	0f b6       	in	r0, 0x3f	; 63
    2afa:	f8 94       	cli
    2afc:	0f 92       	push	r0
    2afe:	0b b6       	in	r0, 0x3b	; 59
    2b00:	0f 92       	push	r0
    2b02:	0c b6       	in	r0, 0x3c	; 60
    2b04:	0f 92       	push	r0
    2b06:	1f 92       	push	r1
    2b08:	11 24       	eor	r1, r1
    2b0a:	2f 92       	push	r2
    2b0c:	3f 92       	push	r3
    2b0e:	4f 92       	push	r4
    2b10:	5f 92       	push	r5
    2b12:	6f 92       	push	r6
    2b14:	7f 92       	push	r7
    2b16:	8f 92       	push	r8
    2b18:	9f 92       	push	r9
    2b1a:	af 92       	push	r10
    2b1c:	bf 92       	push	r11
    2b1e:	cf 92       	push	r12
    2b20:	df 92       	push	r13
    2b22:	ef 92       	push	r14
    2b24:	ff 92       	push	r15
    2b26:	0f 93       	push	r16
    2b28:	1f 93       	push	r17
    2b2a:	2f 93       	push	r18
    2b2c:	3f 93       	push	r19
    2b2e:	4f 93       	push	r20
    2b30:	5f 93       	push	r21
    2b32:	6f 93       	push	r22
    2b34:	7f 93       	push	r23
    2b36:	8f 93       	push	r24
    2b38:	9f 93       	push	r25
    2b3a:	af 93       	push	r26
    2b3c:	bf 93       	push	r27
    2b3e:	cf 93       	push	r28
    2b40:	df 93       	push	r29
    2b42:	ef 93       	push	r30
    2b44:	ff 93       	push	r31
    2b46:	a0 91 4e 0d 	lds	r26, 0x0D4E	; 0x800d4e <pxCurrentTCB>
    2b4a:	b0 91 4f 0d 	lds	r27, 0x0D4F	; 0x800d4f <pxCurrentTCB+0x1>
    2b4e:	0d b6       	in	r0, 0x3d	; 61
    2b50:	0d 92       	st	X+, r0
    2b52:	0e b6       	in	r0, 0x3e	; 62
    2b54:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    2b56:	14 d6       	rcall	.+3112   	; 0x3780 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    2b58:	a0 91 4e 0d 	lds	r26, 0x0D4E	; 0x800d4e <pxCurrentTCB>
    2b5c:	b0 91 4f 0d 	lds	r27, 0x0D4F	; 0x800d4f <pxCurrentTCB+0x1>
    2b60:	cd 91       	ld	r28, X+
    2b62:	cd bf       	out	0x3d, r28	; 61
    2b64:	dd 91       	ld	r29, X+
    2b66:	de bf       	out	0x3e, r29	; 62
    2b68:	ff 91       	pop	r31
    2b6a:	ef 91       	pop	r30
    2b6c:	df 91       	pop	r29
    2b6e:	cf 91       	pop	r28
    2b70:	bf 91       	pop	r27
    2b72:	af 91       	pop	r26
    2b74:	9f 91       	pop	r25
    2b76:	8f 91       	pop	r24
    2b78:	7f 91       	pop	r23
    2b7a:	6f 91       	pop	r22
    2b7c:	5f 91       	pop	r21
    2b7e:	4f 91       	pop	r20
    2b80:	3f 91       	pop	r19
    2b82:	2f 91       	pop	r18
    2b84:	1f 91       	pop	r17
    2b86:	0f 91       	pop	r16
    2b88:	ff 90       	pop	r15
    2b8a:	ef 90       	pop	r14
    2b8c:	df 90       	pop	r13
    2b8e:	cf 90       	pop	r12
    2b90:	bf 90       	pop	r11
    2b92:	af 90       	pop	r10
    2b94:	9f 90       	pop	r9
    2b96:	8f 90       	pop	r8
    2b98:	7f 90       	pop	r7
    2b9a:	6f 90       	pop	r6
    2b9c:	5f 90       	pop	r5
    2b9e:	4f 90       	pop	r4
    2ba0:	3f 90       	pop	r3
    2ba2:	2f 90       	pop	r2
    2ba4:	1f 90       	pop	r1
    2ba6:	0f 90       	pop	r0
    2ba8:	0c be       	out	0x3c, r0	; 60
    2baa:	0f 90       	pop	r0
    2bac:	0b be       	out	0x3b, r0	; 59
    2bae:	0f 90       	pop	r0
    2bb0:	0f be       	out	0x3f, r0	; 63
    2bb2:	0f 90       	pop	r0

	__asm__ __volatile__ ( "ret" );
    2bb4:	08 95       	ret

00002bb6 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    2bb6:	0f 92       	push	r0
    2bb8:	0f b6       	in	r0, 0x3f	; 63
    2bba:	f8 94       	cli
    2bbc:	0f 92       	push	r0
    2bbe:	0b b6       	in	r0, 0x3b	; 59
    2bc0:	0f 92       	push	r0
    2bc2:	0c b6       	in	r0, 0x3c	; 60
    2bc4:	0f 92       	push	r0
    2bc6:	1f 92       	push	r1
    2bc8:	11 24       	eor	r1, r1
    2bca:	2f 92       	push	r2
    2bcc:	3f 92       	push	r3
    2bce:	4f 92       	push	r4
    2bd0:	5f 92       	push	r5
    2bd2:	6f 92       	push	r6
    2bd4:	7f 92       	push	r7
    2bd6:	8f 92       	push	r8
    2bd8:	9f 92       	push	r9
    2bda:	af 92       	push	r10
    2bdc:	bf 92       	push	r11
    2bde:	cf 92       	push	r12
    2be0:	df 92       	push	r13
    2be2:	ef 92       	push	r14
    2be4:	ff 92       	push	r15
    2be6:	0f 93       	push	r16
    2be8:	1f 93       	push	r17
    2bea:	2f 93       	push	r18
    2bec:	3f 93       	push	r19
    2bee:	4f 93       	push	r20
    2bf0:	5f 93       	push	r21
    2bf2:	6f 93       	push	r22
    2bf4:	7f 93       	push	r23
    2bf6:	8f 93       	push	r24
    2bf8:	9f 93       	push	r25
    2bfa:	af 93       	push	r26
    2bfc:	bf 93       	push	r27
    2bfe:	cf 93       	push	r28
    2c00:	df 93       	push	r29
    2c02:	ef 93       	push	r30
    2c04:	ff 93       	push	r31
    2c06:	a0 91 4e 0d 	lds	r26, 0x0D4E	; 0x800d4e <pxCurrentTCB>
    2c0a:	b0 91 4f 0d 	lds	r27, 0x0D4F	; 0x800d4f <pxCurrentTCB+0x1>
    2c0e:	0d b6       	in	r0, 0x3d	; 61
    2c10:	0d 92       	st	X+, r0
    2c12:	0e b6       	in	r0, 0x3e	; 62
    2c14:	0d 92       	st	X+, r0

	sleep_reset();		//	 reset the sleep_mode() faster than sleep_disable();
    2c16:	13 be       	out	0x33, r1	; 51

	if( xTaskIncrementTick() != pdFALSE )
    2c18:	73 d4       	rcall	.+2278   	; 0x3500 <xTaskIncrementTick>
    2c1a:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
    2c1c:	b1 d5       	rcall	.+2914   	; 0x3780 <vTaskSwitchContext>
    2c1e:	a0 91 4e 0d 	lds	r26, 0x0D4E	; 0x800d4e <pxCurrentTCB>
	}

	portRESTORE_CONTEXT();
    2c22:	b0 91 4f 0d 	lds	r27, 0x0D4F	; 0x800d4f <pxCurrentTCB+0x1>
    2c26:	cd 91       	ld	r28, X+
    2c28:	cd bf       	out	0x3d, r28	; 61
    2c2a:	dd 91       	ld	r29, X+
    2c2c:	de bf       	out	0x3e, r29	; 62
    2c2e:	ff 91       	pop	r31
    2c30:	ef 91       	pop	r30
    2c32:	df 91       	pop	r29
    2c34:	cf 91       	pop	r28
    2c36:	bf 91       	pop	r27
    2c38:	af 91       	pop	r26
    2c3a:	9f 91       	pop	r25
    2c3c:	8f 91       	pop	r24
    2c3e:	7f 91       	pop	r23
    2c40:	6f 91       	pop	r22
    2c42:	5f 91       	pop	r21
    2c44:	4f 91       	pop	r20
    2c46:	3f 91       	pop	r19
    2c48:	2f 91       	pop	r18
    2c4a:	1f 91       	pop	r17
    2c4c:	0f 91       	pop	r16
    2c4e:	ff 90       	pop	r15
    2c50:	ef 90       	pop	r14
    2c52:	df 90       	pop	r13
    2c54:	cf 90       	pop	r12
    2c56:	bf 90       	pop	r11
    2c58:	af 90       	pop	r10
    2c5a:	9f 90       	pop	r9
    2c5c:	8f 90       	pop	r8
    2c5e:	7f 90       	pop	r7
    2c60:	6f 90       	pop	r6
    2c62:	5f 90       	pop	r5
    2c64:	4f 90       	pop	r4
    2c66:	3f 90       	pop	r3
    2c68:	2f 90       	pop	r2
    2c6a:	1f 90       	pop	r1
    2c6c:	0f 90       	pop	r0
    2c6e:	0c be       	out	0x3c, r0	; 60
    2c70:	0f 90       	pop	r0
    2c72:	0b be       	out	0x3b, r0	; 59
    2c74:	0f 90       	pop	r0
    2c76:	0f be       	out	0x3f, r0	; 63
    2c78:	0f 90       	pop	r0
    2c7a:	08 95       	ret

00002c7c <__vector_12>:

	__asm__ __volatile__ ( "ret" );
    2c7c:	9c df       	rcall	.-200    	; 0x2bb6 <vPortYieldFromTick>
//	ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
	ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
	ISR(portSCHEDULER_ISR)
	{
		vPortYieldFromTick();
		__asm__ __volatile__ ( "reti" );
    2c7e:	18 95       	reti

00002c80 <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    2c80:	0f b6       	in	r0, 0x3f	; 63
    2c82:	f8 94       	cli
    2c84:	0f 92       	push	r0
    2c86:	fc 01       	movw	r30, r24
    2c88:	92 8d       	ldd	r25, Z+26	; 0x1a
    2c8a:	0f 90       	pop	r0
    2c8c:	0f be       	out	0x3f, r0	; 63
    2c8e:	81 e0       	ldi	r24, 0x01	; 1
    2c90:	91 11       	cpse	r25, r1
    2c92:	80 e0       	ldi	r24, 0x00	; 0
    2c94:	08 95       	ret

00002c96 <prvCopyDataToQueue>:
    2c96:	0f 93       	push	r16
    2c98:	1f 93       	push	r17
    2c9a:	cf 93       	push	r28
    2c9c:	df 93       	push	r29
    2c9e:	ec 01       	movw	r28, r24
    2ca0:	04 2f       	mov	r16, r20
    2ca2:	1a 8d       	ldd	r17, Y+26	; 0x1a
    2ca4:	4c 8d       	ldd	r20, Y+28	; 0x1c
    2ca6:	41 11       	cpse	r20, r1
    2ca8:	0b c0       	rjmp	.+22     	; 0x2cc0 <prvCopyDataToQueue+0x2a>
    2caa:	88 81       	ld	r24, Y
    2cac:	99 81       	ldd	r25, Y+1	; 0x01
    2cae:	89 2b       	or	r24, r25
    2cb0:	09 f0       	breq	.+2      	; 0x2cb4 <prvCopyDataToQueue+0x1e>
    2cb2:	41 c0       	rjmp	.+130    	; 0x2d36 <prvCopyDataToQueue+0xa0>
    2cb4:	8c 81       	ldd	r24, Y+4	; 0x04
    2cb6:	9d 81       	ldd	r25, Y+5	; 0x05
    2cb8:	99 d6       	rcall	.+3378   	; 0x39ec <xTaskPriorityDisinherit>
    2cba:	1d 82       	std	Y+5, r1	; 0x05
    2cbc:	1c 82       	std	Y+4, r1	; 0x04
    2cbe:	42 c0       	rjmp	.+132    	; 0x2d44 <prvCopyDataToQueue+0xae>
    2cc0:	01 11       	cpse	r16, r1
    2cc2:	17 c0       	rjmp	.+46     	; 0x2cf2 <prvCopyDataToQueue+0x5c>
    2cc4:	50 e0       	ldi	r21, 0x00	; 0
    2cc6:	8a 81       	ldd	r24, Y+2	; 0x02
    2cc8:	9b 81       	ldd	r25, Y+3	; 0x03
    2cca:	0e 94 d1 24 	call	0x49a2	; 0x49a2 <memcpy>
    2cce:	2c 8d       	ldd	r18, Y+28	; 0x1c
    2cd0:	8a 81       	ldd	r24, Y+2	; 0x02
    2cd2:	9b 81       	ldd	r25, Y+3	; 0x03
    2cd4:	82 0f       	add	r24, r18
    2cd6:	91 1d       	adc	r25, r1
    2cd8:	9b 83       	std	Y+3, r25	; 0x03
    2cda:	8a 83       	std	Y+2, r24	; 0x02
    2cdc:	2c 81       	ldd	r18, Y+4	; 0x04
    2cde:	3d 81       	ldd	r19, Y+5	; 0x05
    2ce0:	82 17       	cp	r24, r18
    2ce2:	93 07       	cpc	r25, r19
    2ce4:	50 f1       	brcs	.+84     	; 0x2d3a <prvCopyDataToQueue+0xa4>
    2ce6:	88 81       	ld	r24, Y
    2ce8:	99 81       	ldd	r25, Y+1	; 0x01
    2cea:	9b 83       	std	Y+3, r25	; 0x03
    2cec:	8a 83       	std	Y+2, r24	; 0x02
    2cee:	80 e0       	ldi	r24, 0x00	; 0
    2cf0:	29 c0       	rjmp	.+82     	; 0x2d44 <prvCopyDataToQueue+0xae>
    2cf2:	50 e0       	ldi	r21, 0x00	; 0
    2cf4:	8e 81       	ldd	r24, Y+6	; 0x06
    2cf6:	9f 81       	ldd	r25, Y+7	; 0x07
    2cf8:	0e 94 d1 24 	call	0x49a2	; 0x49a2 <memcpy>
    2cfc:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2cfe:	90 e0       	ldi	r25, 0x00	; 0
    2d00:	91 95       	neg	r25
    2d02:	81 95       	neg	r24
    2d04:	91 09       	sbc	r25, r1
    2d06:	2e 81       	ldd	r18, Y+6	; 0x06
    2d08:	3f 81       	ldd	r19, Y+7	; 0x07
    2d0a:	28 0f       	add	r18, r24
    2d0c:	39 1f       	adc	r19, r25
    2d0e:	3f 83       	std	Y+7, r19	; 0x07
    2d10:	2e 83       	std	Y+6, r18	; 0x06
    2d12:	48 81       	ld	r20, Y
    2d14:	59 81       	ldd	r21, Y+1	; 0x01
    2d16:	24 17       	cp	r18, r20
    2d18:	35 07       	cpc	r19, r21
    2d1a:	30 f4       	brcc	.+12     	; 0x2d28 <prvCopyDataToQueue+0x92>
    2d1c:	2c 81       	ldd	r18, Y+4	; 0x04
    2d1e:	3d 81       	ldd	r19, Y+5	; 0x05
    2d20:	82 0f       	add	r24, r18
    2d22:	93 1f       	adc	r25, r19
    2d24:	9f 83       	std	Y+7, r25	; 0x07
    2d26:	8e 83       	std	Y+6, r24	; 0x06
    2d28:	02 30       	cpi	r16, 0x02	; 2
    2d2a:	49 f4       	brne	.+18     	; 0x2d3e <prvCopyDataToQueue+0xa8>
    2d2c:	11 23       	and	r17, r17
    2d2e:	49 f0       	breq	.+18     	; 0x2d42 <prvCopyDataToQueue+0xac>
    2d30:	11 50       	subi	r17, 0x01	; 1
    2d32:	80 e0       	ldi	r24, 0x00	; 0
    2d34:	07 c0       	rjmp	.+14     	; 0x2d44 <prvCopyDataToQueue+0xae>
    2d36:	80 e0       	ldi	r24, 0x00	; 0
    2d38:	05 c0       	rjmp	.+10     	; 0x2d44 <prvCopyDataToQueue+0xae>
    2d3a:	80 e0       	ldi	r24, 0x00	; 0
    2d3c:	03 c0       	rjmp	.+6      	; 0x2d44 <prvCopyDataToQueue+0xae>
    2d3e:	80 e0       	ldi	r24, 0x00	; 0
    2d40:	01 c0       	rjmp	.+2      	; 0x2d44 <prvCopyDataToQueue+0xae>
    2d42:	80 e0       	ldi	r24, 0x00	; 0
    2d44:	1f 5f       	subi	r17, 0xFF	; 255
    2d46:	1a 8f       	std	Y+26, r17	; 0x1a
    2d48:	df 91       	pop	r29
    2d4a:	cf 91       	pop	r28
    2d4c:	1f 91       	pop	r17
    2d4e:	0f 91       	pop	r16
    2d50:	08 95       	ret

00002d52 <prvCopyDataFromQueue>:
    2d52:	fc 01       	movw	r30, r24
    2d54:	44 8d       	ldd	r20, Z+28	; 0x1c
    2d56:	44 23       	and	r20, r20
    2d58:	a9 f0       	breq	.+42     	; 0x2d84 <prvCopyDataFromQueue+0x32>
    2d5a:	50 e0       	ldi	r21, 0x00	; 0
    2d5c:	26 81       	ldd	r18, Z+6	; 0x06
    2d5e:	37 81       	ldd	r19, Z+7	; 0x07
    2d60:	24 0f       	add	r18, r20
    2d62:	35 1f       	adc	r19, r21
    2d64:	37 83       	std	Z+7, r19	; 0x07
    2d66:	26 83       	std	Z+6, r18	; 0x06
    2d68:	84 81       	ldd	r24, Z+4	; 0x04
    2d6a:	95 81       	ldd	r25, Z+5	; 0x05
    2d6c:	28 17       	cp	r18, r24
    2d6e:	39 07       	cpc	r19, r25
    2d70:	20 f0       	brcs	.+8      	; 0x2d7a <prvCopyDataFromQueue+0x28>
    2d72:	80 81       	ld	r24, Z
    2d74:	91 81       	ldd	r25, Z+1	; 0x01
    2d76:	97 83       	std	Z+7, r25	; 0x07
    2d78:	86 83       	std	Z+6, r24	; 0x06
    2d7a:	cb 01       	movw	r24, r22
    2d7c:	66 81       	ldd	r22, Z+6	; 0x06
    2d7e:	77 81       	ldd	r23, Z+7	; 0x07
    2d80:	0c 94 d1 24 	jmp	0x49a2	; 0x49a2 <memcpy>
    2d84:	08 95       	ret

00002d86 <prvUnlockQueue>:
    2d86:	ef 92       	push	r14
    2d88:	ff 92       	push	r15
    2d8a:	0f 93       	push	r16
    2d8c:	1f 93       	push	r17
    2d8e:	cf 93       	push	r28
    2d90:	8c 01       	movw	r16, r24
    2d92:	0f b6       	in	r0, 0x3f	; 63
    2d94:	f8 94       	cli
    2d96:	0f 92       	push	r0
    2d98:	fc 01       	movw	r30, r24
    2d9a:	c6 8d       	ldd	r28, Z+30	; 0x1e
    2d9c:	1c 16       	cp	r1, r28
    2d9e:	9c f4       	brge	.+38     	; 0x2dc6 <prvUnlockQueue+0x40>
    2da0:	81 89       	ldd	r24, Z+17	; 0x11
    2da2:	81 11       	cpse	r24, r1
    2da4:	06 c0       	rjmp	.+12     	; 0x2db2 <prvUnlockQueue+0x2c>
    2da6:	0f c0       	rjmp	.+30     	; 0x2dc6 <prvUnlockQueue+0x40>
    2da8:	f8 01       	movw	r30, r16
    2daa:	81 89       	ldd	r24, Z+17	; 0x11
    2dac:	81 11       	cpse	r24, r1
    2dae:	05 c0       	rjmp	.+10     	; 0x2dba <prvUnlockQueue+0x34>
    2db0:	0a c0       	rjmp	.+20     	; 0x2dc6 <prvUnlockQueue+0x40>
    2db2:	78 01       	movw	r14, r16
    2db4:	f1 e1       	ldi	r31, 0x11	; 17
    2db6:	ef 0e       	add	r14, r31
    2db8:	f1 1c       	adc	r15, r1
    2dba:	c7 01       	movw	r24, r14
    2dbc:	89 d5       	rcall	.+2834   	; 0x38d0 <xTaskRemoveFromEventList>
    2dbe:	81 11       	cpse	r24, r1
    2dc0:	03 d6       	rcall	.+3078   	; 0x39c8 <vTaskMissedYield>
    2dc2:	c1 50       	subi	r28, 0x01	; 1
    2dc4:	89 f7       	brne	.-30     	; 0x2da8 <prvUnlockQueue+0x22>
    2dc6:	8f ef       	ldi	r24, 0xFF	; 255
    2dc8:	f8 01       	movw	r30, r16
    2dca:	86 8f       	std	Z+30, r24	; 0x1e
    2dcc:	0f 90       	pop	r0
    2dce:	0f be       	out	0x3f, r0	; 63
    2dd0:	0f b6       	in	r0, 0x3f	; 63
    2dd2:	f8 94       	cli
    2dd4:	0f 92       	push	r0
    2dd6:	c5 8d       	ldd	r28, Z+29	; 0x1d
    2dd8:	1c 16       	cp	r1, r28
    2dda:	9c f4       	brge	.+38     	; 0x2e02 <prvUnlockQueue+0x7c>
    2ddc:	80 85       	ldd	r24, Z+8	; 0x08
    2dde:	81 11       	cpse	r24, r1
    2de0:	06 c0       	rjmp	.+12     	; 0x2dee <prvUnlockQueue+0x68>
    2de2:	0f c0       	rjmp	.+30     	; 0x2e02 <prvUnlockQueue+0x7c>
    2de4:	f8 01       	movw	r30, r16
    2de6:	80 85       	ldd	r24, Z+8	; 0x08
    2de8:	81 11       	cpse	r24, r1
    2dea:	05 c0       	rjmp	.+10     	; 0x2df6 <prvUnlockQueue+0x70>
    2dec:	0a c0       	rjmp	.+20     	; 0x2e02 <prvUnlockQueue+0x7c>
    2dee:	78 01       	movw	r14, r16
    2df0:	f8 e0       	ldi	r31, 0x08	; 8
    2df2:	ef 0e       	add	r14, r31
    2df4:	f1 1c       	adc	r15, r1
    2df6:	c7 01       	movw	r24, r14
    2df8:	6b d5       	rcall	.+2774   	; 0x38d0 <xTaskRemoveFromEventList>
    2dfa:	81 11       	cpse	r24, r1
    2dfc:	e5 d5       	rcall	.+3018   	; 0x39c8 <vTaskMissedYield>
    2dfe:	c1 50       	subi	r28, 0x01	; 1
    2e00:	89 f7       	brne	.-30     	; 0x2de4 <prvUnlockQueue+0x5e>
    2e02:	8f ef       	ldi	r24, 0xFF	; 255
    2e04:	f8 01       	movw	r30, r16
    2e06:	85 8f       	std	Z+29, r24	; 0x1d
    2e08:	0f 90       	pop	r0
    2e0a:	0f be       	out	0x3f, r0	; 63
    2e0c:	cf 91       	pop	r28
    2e0e:	1f 91       	pop	r17
    2e10:	0f 91       	pop	r16
    2e12:	ff 90       	pop	r15
    2e14:	ef 90       	pop	r14
    2e16:	08 95       	ret

00002e18 <xQueueGenericReset>:
    2e18:	cf 93       	push	r28
    2e1a:	df 93       	push	r29
    2e1c:	ec 01       	movw	r28, r24
    2e1e:	0f b6       	in	r0, 0x3f	; 63
    2e20:	f8 94       	cli
    2e22:	0f 92       	push	r0
    2e24:	e8 81       	ld	r30, Y
    2e26:	f9 81       	ldd	r31, Y+1	; 0x01
    2e28:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e2a:	2c 8d       	ldd	r18, Y+28	; 0x1c
    2e2c:	90 e0       	ldi	r25, 0x00	; 0
    2e2e:	30 e0       	ldi	r19, 0x00	; 0
    2e30:	82 9f       	mul	r24, r18
    2e32:	a0 01       	movw	r20, r0
    2e34:	83 9f       	mul	r24, r19
    2e36:	50 0d       	add	r21, r0
    2e38:	92 9f       	mul	r25, r18
    2e3a:	50 0d       	add	r21, r0
    2e3c:	11 24       	eor	r1, r1
    2e3e:	4e 0f       	add	r20, r30
    2e40:	5f 1f       	adc	r21, r31
    2e42:	5d 83       	std	Y+5, r21	; 0x05
    2e44:	4c 83       	std	Y+4, r20	; 0x04
    2e46:	1a 8e       	std	Y+26, r1	; 0x1a
    2e48:	fb 83       	std	Y+3, r31	; 0x03
    2e4a:	ea 83       	std	Y+2, r30	; 0x02
    2e4c:	01 97       	sbiw	r24, 0x01	; 1
    2e4e:	82 9f       	mul	r24, r18
    2e50:	a0 01       	movw	r20, r0
    2e52:	83 9f       	mul	r24, r19
    2e54:	50 0d       	add	r21, r0
    2e56:	92 9f       	mul	r25, r18
    2e58:	50 0d       	add	r21, r0
    2e5a:	11 24       	eor	r1, r1
    2e5c:	cf 01       	movw	r24, r30
    2e5e:	84 0f       	add	r24, r20
    2e60:	95 1f       	adc	r25, r21
    2e62:	9f 83       	std	Y+7, r25	; 0x07
    2e64:	8e 83       	std	Y+6, r24	; 0x06
    2e66:	8f ef       	ldi	r24, 0xFF	; 255
    2e68:	8d 8f       	std	Y+29, r24	; 0x1d
    2e6a:	8e 8f       	std	Y+30, r24	; 0x1e
    2e6c:	61 11       	cpse	r22, r1
    2e6e:	0a c0       	rjmp	.+20     	; 0x2e84 <xQueueGenericReset+0x6c>
    2e70:	88 85       	ldd	r24, Y+8	; 0x08
    2e72:	88 23       	and	r24, r24
    2e74:	69 f0       	breq	.+26     	; 0x2e90 <xQueueGenericReset+0x78>
    2e76:	ce 01       	movw	r24, r28
    2e78:	08 96       	adiw	r24, 0x08	; 8
    2e7a:	2a d5       	rcall	.+2644   	; 0x38d0 <xTaskRemoveFromEventList>
    2e7c:	88 23       	and	r24, r24
    2e7e:	41 f0       	breq	.+16     	; 0x2e90 <xQueueGenericReset+0x78>
    2e80:	3a de       	rcall	.-908    	; 0x2af6 <vPortYield>
    2e82:	06 c0       	rjmp	.+12     	; 0x2e90 <xQueueGenericReset+0x78>
    2e84:	ce 01       	movw	r24, r28
    2e86:	08 96       	adiw	r24, 0x08	; 8
    2e88:	fd dc       	rcall	.-1542   	; 0x2884 <vListInitialise>
    2e8a:	ce 01       	movw	r24, r28
    2e8c:	41 96       	adiw	r24, 0x11	; 17
    2e8e:	fa dc       	rcall	.-1548   	; 0x2884 <vListInitialise>
    2e90:	0f 90       	pop	r0
    2e92:	0f be       	out	0x3f, r0	; 63
    2e94:	81 e0       	ldi	r24, 0x01	; 1
    2e96:	df 91       	pop	r29
    2e98:	cf 91       	pop	r28
    2e9a:	08 95       	ret

00002e9c <xQueueGenericCreateStatic>:
    2e9c:	cf 93       	push	r28
    2e9e:	df 93       	push	r29
    2ea0:	e9 01       	movw	r28, r18
    2ea2:	20 97       	sbiw	r28, 0x00	; 0
    2ea4:	61 f0       	breq	.+24     	; 0x2ebe <xQueueGenericCreateStatic+0x22>
    2ea6:	61 11       	cpse	r22, r1
    2ea8:	03 c0       	rjmp	.+6      	; 0x2eb0 <xQueueGenericCreateStatic+0x14>
    2eaa:	39 83       	std	Y+1, r19	; 0x01
    2eac:	28 83       	st	Y, r18
    2eae:	02 c0       	rjmp	.+4      	; 0x2eb4 <xQueueGenericCreateStatic+0x18>
    2eb0:	59 83       	std	Y+1, r21	; 0x01
    2eb2:	48 83       	st	Y, r20
    2eb4:	8b 8f       	std	Y+27, r24	; 0x1b
    2eb6:	6c 8f       	std	Y+28, r22	; 0x1c
    2eb8:	61 e0       	ldi	r22, 0x01	; 1
    2eba:	ce 01       	movw	r24, r28
    2ebc:	ad df       	rcall	.-166    	; 0x2e18 <xQueueGenericReset>
    2ebe:	ce 01       	movw	r24, r28
    2ec0:	df 91       	pop	r29
    2ec2:	cf 91       	pop	r28
    2ec4:	08 95       	ret

00002ec6 <xQueueGenericSend>:
    2ec6:	9f 92       	push	r9
    2ec8:	af 92       	push	r10
    2eca:	bf 92       	push	r11
    2ecc:	cf 92       	push	r12
    2ece:	df 92       	push	r13
    2ed0:	ef 92       	push	r14
    2ed2:	ff 92       	push	r15
    2ed4:	0f 93       	push	r16
    2ed6:	1f 93       	push	r17
    2ed8:	cf 93       	push	r28
    2eda:	df 93       	push	r29
    2edc:	00 d0       	rcall	.+0      	; 0x2ede <xQueueGenericSend+0x18>
    2ede:	1f 92       	push	r1
    2ee0:	1f 92       	push	r1
    2ee2:	cd b7       	in	r28, 0x3d	; 61
    2ee4:	de b7       	in	r29, 0x3e	; 62
    2ee6:	8c 01       	movw	r16, r24
    2ee8:	6b 01       	movw	r12, r22
    2eea:	5d 83       	std	Y+5, r21	; 0x05
    2eec:	4c 83       	std	Y+4, r20	; 0x04
    2eee:	a2 2e       	mov	r10, r18
    2ef0:	b1 2c       	mov	r11, r1
    2ef2:	99 24       	eor	r9, r9
    2ef4:	93 94       	inc	r9
    2ef6:	7c 01       	movw	r14, r24
    2ef8:	88 e0       	ldi	r24, 0x08	; 8
    2efa:	e8 0e       	add	r14, r24
    2efc:	f1 1c       	adc	r15, r1
    2efe:	0f b6       	in	r0, 0x3f	; 63
    2f00:	f8 94       	cli
    2f02:	0f 92       	push	r0
    2f04:	f8 01       	movw	r30, r16
    2f06:	92 8d       	ldd	r25, Z+26	; 0x1a
    2f08:	83 8d       	ldd	r24, Z+27	; 0x1b
    2f0a:	98 17       	cp	r25, r24
    2f0c:	18 f0       	brcs	.+6      	; 0x2f14 <xQueueGenericSend+0x4e>
    2f0e:	f2 e0       	ldi	r31, 0x02	; 2
    2f10:	af 12       	cpse	r10, r31
    2f12:	15 c0       	rjmp	.+42     	; 0x2f3e <xQueueGenericSend+0x78>
    2f14:	4a 2d       	mov	r20, r10
    2f16:	b6 01       	movw	r22, r12
    2f18:	c8 01       	movw	r24, r16
    2f1a:	bd de       	rcall	.-646    	; 0x2c96 <prvCopyDataToQueue>
    2f1c:	f8 01       	movw	r30, r16
    2f1e:	91 89       	ldd	r25, Z+17	; 0x11
    2f20:	99 23       	and	r25, r25
    2f22:	39 f0       	breq	.+14     	; 0x2f32 <xQueueGenericSend+0x6c>
    2f24:	c8 01       	movw	r24, r16
    2f26:	41 96       	adiw	r24, 0x11	; 17
    2f28:	d3 d4       	rcall	.+2470   	; 0x38d0 <xTaskRemoveFromEventList>
    2f2a:	88 23       	and	r24, r24
    2f2c:	21 f0       	breq	.+8      	; 0x2f36 <xQueueGenericSend+0x70>
    2f2e:	e3 dd       	rcall	.-1082   	; 0x2af6 <vPortYield>
    2f30:	02 c0       	rjmp	.+4      	; 0x2f36 <xQueueGenericSend+0x70>
    2f32:	81 11       	cpse	r24, r1
    2f34:	e0 dd       	rcall	.-1088   	; 0x2af6 <vPortYield>
    2f36:	0f 90       	pop	r0
    2f38:	0f be       	out	0x3f, r0	; 63
    2f3a:	81 e0       	ldi	r24, 0x01	; 1
    2f3c:	45 c0       	rjmp	.+138    	; 0x2fc8 <xQueueGenericSend+0x102>
    2f3e:	8c 81       	ldd	r24, Y+4	; 0x04
    2f40:	9d 81       	ldd	r25, Y+5	; 0x05
    2f42:	89 2b       	or	r24, r25
    2f44:	21 f4       	brne	.+8      	; 0x2f4e <xQueueGenericSend+0x88>
    2f46:	0f 90       	pop	r0
    2f48:	0f be       	out	0x3f, r0	; 63
    2f4a:	80 e0       	ldi	r24, 0x00	; 0
    2f4c:	3d c0       	rjmp	.+122    	; 0x2fc8 <xQueueGenericSend+0x102>
    2f4e:	b1 10       	cpse	r11, r1
    2f50:	04 c0       	rjmp	.+8      	; 0x2f5a <xQueueGenericSend+0x94>
    2f52:	ce 01       	movw	r24, r28
    2f54:	01 96       	adiw	r24, 0x01	; 1
    2f56:	02 d5       	rcall	.+2564   	; 0x395c <vTaskInternalSetTimeOutState>
    2f58:	b9 2c       	mov	r11, r9
    2f5a:	0f 90       	pop	r0
    2f5c:	0f be       	out	0x3f, r0	; 63
    2f5e:	c0 d2       	rcall	.+1408   	; 0x34e0 <vTaskSuspendAll>
    2f60:	0f b6       	in	r0, 0x3f	; 63
    2f62:	f8 94       	cli
    2f64:	0f 92       	push	r0
    2f66:	f8 01       	movw	r30, r16
    2f68:	85 8d       	ldd	r24, Z+29	; 0x1d
    2f6a:	8f 3f       	cpi	r24, 0xFF	; 255
    2f6c:	09 f4       	brne	.+2      	; 0x2f70 <xQueueGenericSend+0xaa>
    2f6e:	15 8e       	std	Z+29, r1	; 0x1d
    2f70:	f8 01       	movw	r30, r16
    2f72:	86 8d       	ldd	r24, Z+30	; 0x1e
    2f74:	8f 3f       	cpi	r24, 0xFF	; 255
    2f76:	09 f4       	brne	.+2      	; 0x2f7a <xQueueGenericSend+0xb4>
    2f78:	16 8e       	std	Z+30, r1	; 0x1e
    2f7a:	0f 90       	pop	r0
    2f7c:	0f be       	out	0x3f, r0	; 63
    2f7e:	be 01       	movw	r22, r28
    2f80:	6c 5f       	subi	r22, 0xFC	; 252
    2f82:	7f 4f       	sbci	r23, 0xFF	; 255
    2f84:	ce 01       	movw	r24, r28
    2f86:	01 96       	adiw	r24, 0x01	; 1
    2f88:	f4 d4       	rcall	.+2536   	; 0x3972 <xTaskCheckForTimeOut>
    2f8a:	81 11       	cpse	r24, r1
    2f8c:	19 c0       	rjmp	.+50     	; 0x2fc0 <xQueueGenericSend+0xfa>
    2f8e:	0f b6       	in	r0, 0x3f	; 63
    2f90:	f8 94       	cli
    2f92:	0f 92       	push	r0
    2f94:	f8 01       	movw	r30, r16
    2f96:	92 8d       	ldd	r25, Z+26	; 0x1a
    2f98:	83 8d       	ldd	r24, Z+27	; 0x1b
    2f9a:	0f 90       	pop	r0
    2f9c:	0f be       	out	0x3f, r0	; 63
    2f9e:	98 13       	cpse	r25, r24
    2fa0:	0b c0       	rjmp	.+22     	; 0x2fb8 <xQueueGenericSend+0xf2>
    2fa2:	6c 81       	ldd	r22, Y+4	; 0x04
    2fa4:	7d 81       	ldd	r23, Y+5	; 0x05
    2fa6:	c7 01       	movw	r24, r14
    2fa8:	6b d4       	rcall	.+2262   	; 0x3880 <vTaskPlaceOnEventList>
    2faa:	c8 01       	movw	r24, r16
    2fac:	ec de       	rcall	.-552    	; 0x2d86 <prvUnlockQueue>
    2fae:	5f d3       	rcall	.+1726   	; 0x366e <xTaskResumeAll>
    2fb0:	81 11       	cpse	r24, r1
    2fb2:	a5 cf       	rjmp	.-182    	; 0x2efe <xQueueGenericSend+0x38>
    2fb4:	a0 dd       	rcall	.-1216   	; 0x2af6 <vPortYield>
    2fb6:	a3 cf       	rjmp	.-186    	; 0x2efe <xQueueGenericSend+0x38>
    2fb8:	c8 01       	movw	r24, r16
    2fba:	e5 de       	rcall	.-566    	; 0x2d86 <prvUnlockQueue>
    2fbc:	58 d3       	rcall	.+1712   	; 0x366e <xTaskResumeAll>
    2fbe:	9f cf       	rjmp	.-194    	; 0x2efe <xQueueGenericSend+0x38>
    2fc0:	c8 01       	movw	r24, r16
    2fc2:	e1 de       	rcall	.-574    	; 0x2d86 <prvUnlockQueue>
    2fc4:	54 d3       	rcall	.+1704   	; 0x366e <xTaskResumeAll>
    2fc6:	80 e0       	ldi	r24, 0x00	; 0
    2fc8:	0f 90       	pop	r0
    2fca:	0f 90       	pop	r0
    2fcc:	0f 90       	pop	r0
    2fce:	0f 90       	pop	r0
    2fd0:	0f 90       	pop	r0
    2fd2:	df 91       	pop	r29
    2fd4:	cf 91       	pop	r28
    2fd6:	1f 91       	pop	r17
    2fd8:	0f 91       	pop	r16
    2fda:	ff 90       	pop	r15
    2fdc:	ef 90       	pop	r14
    2fde:	df 90       	pop	r13
    2fe0:	cf 90       	pop	r12
    2fe2:	bf 90       	pop	r11
    2fe4:	af 90       	pop	r10
    2fe6:	9f 90       	pop	r9
    2fe8:	08 95       	ret

00002fea <xQueueGenericSendFromISR>:
    2fea:	ef 92       	push	r14
    2fec:	ff 92       	push	r15
    2fee:	0f 93       	push	r16
    2ff0:	1f 93       	push	r17
    2ff2:	cf 93       	push	r28
    2ff4:	df 93       	push	r29
    2ff6:	8a 01       	movw	r16, r20
    2ff8:	fc 01       	movw	r30, r24
    2ffa:	52 8d       	ldd	r21, Z+26	; 0x1a
    2ffc:	33 8d       	ldd	r19, Z+27	; 0x1b
    2ffe:	53 17       	cp	r21, r19
    3000:	10 f0       	brcs	.+4      	; 0x3006 <xQueueGenericSendFromISR+0x1c>
    3002:	22 30       	cpi	r18, 0x02	; 2
    3004:	e1 f4       	brne	.+56     	; 0x303e <xQueueGenericSendFromISR+0x54>
    3006:	42 2f       	mov	r20, r18
    3008:	78 01       	movw	r14, r16
    300a:	ec 01       	movw	r28, r24
    300c:	1e 8d       	ldd	r17, Y+30	; 0x1e
    300e:	43 de       	rcall	.-890    	; 0x2c96 <prvCopyDataToQueue>
    3010:	1f 3f       	cpi	r17, 0xFF	; 255
    3012:	79 f4       	brne	.+30     	; 0x3032 <xQueueGenericSendFromISR+0x48>
    3014:	89 89       	ldd	r24, Y+17	; 0x11
    3016:	88 23       	and	r24, r24
    3018:	a1 f0       	breq	.+40     	; 0x3042 <xQueueGenericSendFromISR+0x58>
    301a:	ce 01       	movw	r24, r28
    301c:	41 96       	adiw	r24, 0x11	; 17
    301e:	58 d4       	rcall	.+2224   	; 0x38d0 <xTaskRemoveFromEventList>
    3020:	88 23       	and	r24, r24
    3022:	89 f0       	breq	.+34     	; 0x3046 <xQueueGenericSendFromISR+0x5c>
    3024:	e1 14       	cp	r14, r1
    3026:	f1 04       	cpc	r15, r1
    3028:	81 f0       	breq	.+32     	; 0x304a <xQueueGenericSendFromISR+0x60>
    302a:	81 e0       	ldi	r24, 0x01	; 1
    302c:	f7 01       	movw	r30, r14
    302e:	80 83       	st	Z, r24
    3030:	0d c0       	rjmp	.+26     	; 0x304c <xQueueGenericSendFromISR+0x62>
    3032:	ff 24       	eor	r15, r15
    3034:	f3 94       	inc	r15
    3036:	f1 0e       	add	r15, r17
    3038:	fe 8e       	std	Y+30, r15	; 0x1e
    303a:	81 e0       	ldi	r24, 0x01	; 1
    303c:	07 c0       	rjmp	.+14     	; 0x304c <xQueueGenericSendFromISR+0x62>
    303e:	80 e0       	ldi	r24, 0x00	; 0
    3040:	05 c0       	rjmp	.+10     	; 0x304c <xQueueGenericSendFromISR+0x62>
    3042:	81 e0       	ldi	r24, 0x01	; 1
    3044:	03 c0       	rjmp	.+6      	; 0x304c <xQueueGenericSendFromISR+0x62>
    3046:	81 e0       	ldi	r24, 0x01	; 1
    3048:	01 c0       	rjmp	.+2      	; 0x304c <xQueueGenericSendFromISR+0x62>
    304a:	81 e0       	ldi	r24, 0x01	; 1
    304c:	df 91       	pop	r29
    304e:	cf 91       	pop	r28
    3050:	1f 91       	pop	r17
    3052:	0f 91       	pop	r16
    3054:	ff 90       	pop	r15
    3056:	ef 90       	pop	r14
    3058:	08 95       	ret

0000305a <xQueueReceive>:
    305a:	9f 92       	push	r9
    305c:	af 92       	push	r10
    305e:	bf 92       	push	r11
    3060:	cf 92       	push	r12
    3062:	df 92       	push	r13
    3064:	ef 92       	push	r14
    3066:	ff 92       	push	r15
    3068:	0f 93       	push	r16
    306a:	1f 93       	push	r17
    306c:	cf 93       	push	r28
    306e:	df 93       	push	r29
    3070:	00 d0       	rcall	.+0      	; 0x3072 <xQueueReceive+0x18>
    3072:	1f 92       	push	r1
    3074:	1f 92       	push	r1
    3076:	cd b7       	in	r28, 0x3d	; 61
    3078:	de b7       	in	r29, 0x3e	; 62
    307a:	8c 01       	movw	r16, r24
    307c:	5b 01       	movw	r10, r22
    307e:	5d 83       	std	Y+5, r21	; 0x05
    3080:	4c 83       	std	Y+4, r20	; 0x04
    3082:	e1 2c       	mov	r14, r1
    3084:	99 24       	eor	r9, r9
    3086:	93 94       	inc	r9
    3088:	6c 01       	movw	r12, r24
    308a:	81 e1       	ldi	r24, 0x11	; 17
    308c:	c8 0e       	add	r12, r24
    308e:	d1 1c       	adc	r13, r1
    3090:	0f b6       	in	r0, 0x3f	; 63
    3092:	f8 94       	cli
    3094:	0f 92       	push	r0
    3096:	f8 01       	movw	r30, r16
    3098:	f2 8c       	ldd	r15, Z+26	; 0x1a
    309a:	ff 20       	and	r15, r15
    309c:	91 f0       	breq	.+36     	; 0x30c2 <xQueueReceive+0x68>
    309e:	b5 01       	movw	r22, r10
    30a0:	c8 01       	movw	r24, r16
    30a2:	57 de       	rcall	.-850    	; 0x2d52 <prvCopyDataFromQueue>
    30a4:	fa 94       	dec	r15
    30a6:	f8 01       	movw	r30, r16
    30a8:	f2 8e       	std	Z+26, r15	; 0x1a
    30aa:	80 85       	ldd	r24, Z+8	; 0x08
    30ac:	88 23       	and	r24, r24
    30ae:	29 f0       	breq	.+10     	; 0x30ba <xQueueReceive+0x60>
    30b0:	c8 01       	movw	r24, r16
    30b2:	08 96       	adiw	r24, 0x08	; 8
    30b4:	0d d4       	rcall	.+2074   	; 0x38d0 <xTaskRemoveFromEventList>
    30b6:	81 11       	cpse	r24, r1
    30b8:	1e dd       	rcall	.-1476   	; 0x2af6 <vPortYield>
    30ba:	0f 90       	pop	r0
    30bc:	0f be       	out	0x3f, r0	; 63
    30be:	81 e0       	ldi	r24, 0x01	; 1
    30c0:	44 c0       	rjmp	.+136    	; 0x314a <xQueueReceive+0xf0>
    30c2:	8c 81       	ldd	r24, Y+4	; 0x04
    30c4:	9d 81       	ldd	r25, Y+5	; 0x05
    30c6:	89 2b       	or	r24, r25
    30c8:	21 f4       	brne	.+8      	; 0x30d2 <xQueueReceive+0x78>
    30ca:	0f 90       	pop	r0
    30cc:	0f be       	out	0x3f, r0	; 63
    30ce:	80 e0       	ldi	r24, 0x00	; 0
    30d0:	3c c0       	rjmp	.+120    	; 0x314a <xQueueReceive+0xf0>
    30d2:	e1 10       	cpse	r14, r1
    30d4:	04 c0       	rjmp	.+8      	; 0x30de <xQueueReceive+0x84>
    30d6:	ce 01       	movw	r24, r28
    30d8:	01 96       	adiw	r24, 0x01	; 1
    30da:	40 d4       	rcall	.+2176   	; 0x395c <vTaskInternalSetTimeOutState>
    30dc:	e9 2c       	mov	r14, r9
    30de:	0f 90       	pop	r0
    30e0:	0f be       	out	0x3f, r0	; 63
    30e2:	fe d1       	rcall	.+1020   	; 0x34e0 <vTaskSuspendAll>
    30e4:	0f b6       	in	r0, 0x3f	; 63
    30e6:	f8 94       	cli
    30e8:	0f 92       	push	r0
    30ea:	f8 01       	movw	r30, r16
    30ec:	85 8d       	ldd	r24, Z+29	; 0x1d
    30ee:	8f 3f       	cpi	r24, 0xFF	; 255
    30f0:	09 f4       	brne	.+2      	; 0x30f4 <xQueueReceive+0x9a>
    30f2:	15 8e       	std	Z+29, r1	; 0x1d
    30f4:	f8 01       	movw	r30, r16
    30f6:	86 8d       	ldd	r24, Z+30	; 0x1e
    30f8:	8f 3f       	cpi	r24, 0xFF	; 255
    30fa:	09 f4       	brne	.+2      	; 0x30fe <xQueueReceive+0xa4>
    30fc:	16 8e       	std	Z+30, r1	; 0x1e
    30fe:	0f 90       	pop	r0
    3100:	0f be       	out	0x3f, r0	; 63
    3102:	be 01       	movw	r22, r28
    3104:	6c 5f       	subi	r22, 0xFC	; 252
    3106:	7f 4f       	sbci	r23, 0xFF	; 255
    3108:	ce 01       	movw	r24, r28
    310a:	01 96       	adiw	r24, 0x01	; 1
    310c:	32 d4       	rcall	.+2148   	; 0x3972 <xTaskCheckForTimeOut>
    310e:	81 11       	cpse	r24, r1
    3110:	13 c0       	rjmp	.+38     	; 0x3138 <xQueueReceive+0xde>
    3112:	c8 01       	movw	r24, r16
    3114:	b5 dd       	rcall	.-1174   	; 0x2c80 <prvIsQueueEmpty>
    3116:	88 23       	and	r24, r24
    3118:	59 f0       	breq	.+22     	; 0x3130 <xQueueReceive+0xd6>
    311a:	6c 81       	ldd	r22, Y+4	; 0x04
    311c:	7d 81       	ldd	r23, Y+5	; 0x05
    311e:	c6 01       	movw	r24, r12
    3120:	af d3       	rcall	.+1886   	; 0x3880 <vTaskPlaceOnEventList>
    3122:	c8 01       	movw	r24, r16
    3124:	30 de       	rcall	.-928    	; 0x2d86 <prvUnlockQueue>
    3126:	a3 d2       	rcall	.+1350   	; 0x366e <xTaskResumeAll>
    3128:	81 11       	cpse	r24, r1
    312a:	b2 cf       	rjmp	.-156    	; 0x3090 <xQueueReceive+0x36>
    312c:	e4 dc       	rcall	.-1592   	; 0x2af6 <vPortYield>
    312e:	b0 cf       	rjmp	.-160    	; 0x3090 <xQueueReceive+0x36>
    3130:	c8 01       	movw	r24, r16
    3132:	29 de       	rcall	.-942    	; 0x2d86 <prvUnlockQueue>
    3134:	9c d2       	rcall	.+1336   	; 0x366e <xTaskResumeAll>
    3136:	ac cf       	rjmp	.-168    	; 0x3090 <xQueueReceive+0x36>
    3138:	c8 01       	movw	r24, r16
    313a:	25 de       	rcall	.-950    	; 0x2d86 <prvUnlockQueue>
    313c:	98 d2       	rcall	.+1328   	; 0x366e <xTaskResumeAll>
    313e:	c8 01       	movw	r24, r16
    3140:	9f dd       	rcall	.-1218   	; 0x2c80 <prvIsQueueEmpty>
    3142:	88 23       	and	r24, r24
    3144:	09 f4       	brne	.+2      	; 0x3148 <xQueueReceive+0xee>
    3146:	a4 cf       	rjmp	.-184    	; 0x3090 <xQueueReceive+0x36>
    3148:	80 e0       	ldi	r24, 0x00	; 0
    314a:	0f 90       	pop	r0
    314c:	0f 90       	pop	r0
    314e:	0f 90       	pop	r0
    3150:	0f 90       	pop	r0
    3152:	0f 90       	pop	r0
    3154:	df 91       	pop	r29
    3156:	cf 91       	pop	r28
    3158:	1f 91       	pop	r17
    315a:	0f 91       	pop	r16
    315c:	ff 90       	pop	r15
    315e:	ef 90       	pop	r14
    3160:	df 90       	pop	r13
    3162:	cf 90       	pop	r12
    3164:	bf 90       	pop	r11
    3166:	af 90       	pop	r10
    3168:	9f 90       	pop	r9
    316a:	08 95       	ret

0000316c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
    {
    316c:	cf 93       	push	r28
    316e:	df 93       	push	r29
    3170:	ec 01       	movw	r28, r24
        will not actually cause the task to block, just place it on a blocked
        list.  It will not block until the scheduler is unlocked - at which
        time a yield will be performed.  If an item is added to the queue while
        the queue is locked, and the calling task blocks on the queue, then the
        calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    3172:	0f b6       	in	r0, 0x3f	; 63
    3174:	f8 94       	cli
    3176:	0f 92       	push	r0
    3178:	8d 8d       	ldd	r24, Y+29	; 0x1d
    317a:	8f 3f       	cpi	r24, 0xFF	; 255
    317c:	09 f4       	brne	.+2      	; 0x3180 <vQueueWaitForMessageRestricted+0x14>
    317e:	1d 8e       	std	Y+29, r1	; 0x1d
    3180:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3182:	8f 3f       	cpi	r24, 0xFF	; 255
    3184:	09 f4       	brne	.+2      	; 0x3188 <vQueueWaitForMessageRestricted+0x1c>
    3186:	1e 8e       	std	Y+30, r1	; 0x1e
    3188:	0f 90       	pop	r0
    318a:	0f be       	out	0x3f, r0	; 63
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    318c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    318e:	81 11       	cpse	r24, r1
    3190:	03 c0       	rjmp	.+6      	; 0x3198 <vQueueWaitForMessageRestricted+0x2c>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    3192:	ce 01       	movw	r24, r28
    3194:	41 96       	adiw	r24, 0x11	; 17
    3196:	84 d3       	rcall	.+1800   	; 0x38a0 <vTaskPlaceOnEventListRestricted>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
        prvUnlockQueue( pxQueue );
    3198:	ce 01       	movw	r24, r28
    319a:	f5 dd       	rcall	.-1046   	; 0x2d86 <prvUnlockQueue>
    }
    319c:	df 91       	pop	r29
    319e:	cf 91       	pop	r28
    31a0:	08 95       	ret

000031a2 <prvResetNextTaskUnblockTime>:
    31a2:	e0 91 28 0d 	lds	r30, 0x0D28	; 0x800d28 <pxDelayedTaskList>
    31a6:	f0 91 29 0d 	lds	r31, 0x0D29	; 0x800d29 <pxDelayedTaskList+0x1>
    31aa:	80 81       	ld	r24, Z
    31ac:	81 11       	cpse	r24, r1
    31ae:	07 c0       	rjmp	.+14     	; 0x31be <prvResetNextTaskUnblockTime+0x1c>
    31b0:	8f ef       	ldi	r24, 0xFF	; 255
    31b2:	9f ef       	ldi	r25, 0xFF	; 255
    31b4:	90 93 09 0d 	sts	0x0D09, r25	; 0x800d09 <xNextTaskUnblockTime+0x1>
    31b8:	80 93 08 0d 	sts	0x0D08, r24	; 0x800d08 <xNextTaskUnblockTime>
    31bc:	08 95       	ret
    31be:	e0 91 28 0d 	lds	r30, 0x0D28	; 0x800d28 <pxDelayedTaskList>
    31c2:	f0 91 29 0d 	lds	r31, 0x0D29	; 0x800d29 <pxDelayedTaskList+0x1>
    31c6:	05 80       	ldd	r0, Z+5	; 0x05
    31c8:	f6 81       	ldd	r31, Z+6	; 0x06
    31ca:	e0 2d       	mov	r30, r0
    31cc:	06 80       	ldd	r0, Z+6	; 0x06
    31ce:	f7 81       	ldd	r31, Z+7	; 0x07
    31d0:	e0 2d       	mov	r30, r0
    31d2:	82 81       	ldd	r24, Z+2	; 0x02
    31d4:	93 81       	ldd	r25, Z+3	; 0x03
    31d6:	90 93 09 0d 	sts	0x0D09, r25	; 0x800d09 <xNextTaskUnblockTime+0x1>
    31da:	80 93 08 0d 	sts	0x0D08, r24	; 0x800d08 <xNextTaskUnblockTime>
    31de:	08 95       	ret

000031e0 <prvAddCurrentTaskToDelayedList>:
    31e0:	0f 93       	push	r16
    31e2:	1f 93       	push	r17
    31e4:	cf 93       	push	r28
    31e6:	df 93       	push	r29
    31e8:	ec 01       	movw	r28, r24
    31ea:	00 91 10 0d 	lds	r16, 0x0D10	; 0x800d10 <xTickCount>
    31ee:	10 91 11 0d 	lds	r17, 0x0D11	; 0x800d11 <xTickCount+0x1>
    31f2:	80 91 4e 0d 	lds	r24, 0x0D4E	; 0x800d4e <pxCurrentTCB>
    31f6:	90 91 4f 0d 	lds	r25, 0x0D4F	; 0x800d4f <pxCurrentTCB+0x1>
    31fa:	02 96       	adiw	r24, 0x02	; 2
    31fc:	a7 db       	rcall	.-2226   	; 0x294c <uxListRemove>
    31fe:	c0 0f       	add	r28, r16
    3200:	d1 1f       	adc	r29, r17
    3202:	e0 91 4e 0d 	lds	r30, 0x0D4E	; 0x800d4e <pxCurrentTCB>
    3206:	f0 91 4f 0d 	lds	r31, 0x0D4F	; 0x800d4f <pxCurrentTCB+0x1>
    320a:	d3 83       	std	Z+3, r29	; 0x03
    320c:	c2 83       	std	Z+2, r28	; 0x02
    320e:	c0 17       	cp	r28, r16
    3210:	d1 07       	cpc	r29, r17
    3212:	60 f4       	brcc	.+24     	; 0x322c <prvAddCurrentTaskToDelayedList+0x4c>
    3214:	60 91 4e 0d 	lds	r22, 0x0D4E	; 0x800d4e <pxCurrentTCB>
    3218:	70 91 4f 0d 	lds	r23, 0x0D4F	; 0x800d4f <pxCurrentTCB+0x1>
    321c:	80 91 26 0d 	lds	r24, 0x0D26	; 0x800d26 <pxOverflowDelayedTaskList>
    3220:	90 91 27 0d 	lds	r25, 0x0D27	; 0x800d27 <pxOverflowDelayedTaskList+0x1>
    3224:	6e 5f       	subi	r22, 0xFE	; 254
    3226:	7f 4f       	sbci	r23, 0xFF	; 255
    3228:	60 db       	rcall	.-2368   	; 0x28ea <vListInsert>
    322a:	16 c0       	rjmp	.+44     	; 0x3258 <prvAddCurrentTaskToDelayedList+0x78>
    322c:	60 91 4e 0d 	lds	r22, 0x0D4E	; 0x800d4e <pxCurrentTCB>
    3230:	70 91 4f 0d 	lds	r23, 0x0D4F	; 0x800d4f <pxCurrentTCB+0x1>
    3234:	80 91 28 0d 	lds	r24, 0x0D28	; 0x800d28 <pxDelayedTaskList>
    3238:	90 91 29 0d 	lds	r25, 0x0D29	; 0x800d29 <pxDelayedTaskList+0x1>
    323c:	6e 5f       	subi	r22, 0xFE	; 254
    323e:	7f 4f       	sbci	r23, 0xFF	; 255
    3240:	54 db       	rcall	.-2392   	; 0x28ea <vListInsert>
    3242:	80 91 08 0d 	lds	r24, 0x0D08	; 0x800d08 <xNextTaskUnblockTime>
    3246:	90 91 09 0d 	lds	r25, 0x0D09	; 0x800d09 <xNextTaskUnblockTime+0x1>
    324a:	c8 17       	cp	r28, r24
    324c:	d9 07       	cpc	r29, r25
    324e:	20 f4       	brcc	.+8      	; 0x3258 <prvAddCurrentTaskToDelayedList+0x78>
    3250:	d0 93 09 0d 	sts	0x0D09, r29	; 0x800d09 <xNextTaskUnblockTime+0x1>
    3254:	c0 93 08 0d 	sts	0x0D08, r28	; 0x800d08 <xNextTaskUnblockTime>
    3258:	df 91       	pop	r29
    325a:	cf 91       	pop	r28
    325c:	1f 91       	pop	r17
    325e:	0f 91       	pop	r16
    3260:	08 95       	ret

00003262 <xTaskCreateStatic>:
    3262:	6f 92       	push	r6
    3264:	7f 92       	push	r7
    3266:	8f 92       	push	r8
    3268:	9f 92       	push	r9
    326a:	af 92       	push	r10
    326c:	bf 92       	push	r11
    326e:	cf 92       	push	r12
    3270:	df 92       	push	r13
    3272:	ef 92       	push	r14
    3274:	ff 92       	push	r15
    3276:	0f 93       	push	r16
    3278:	cf 93       	push	r28
    327a:	df 93       	push	r29
    327c:	c1 14       	cp	r12, r1
    327e:	d1 04       	cpc	r13, r1
    3280:	09 f4       	brne	.+2      	; 0x3284 <xTaskCreateStatic+0x22>
    3282:	cd c0       	rjmp	.+410    	; 0x341e <xTaskCreateStatic+0x1bc>
    3284:	e1 14       	cp	r14, r1
    3286:	f1 04       	cpc	r15, r1
    3288:	09 f4       	brne	.+2      	; 0x328c <xTaskCreateStatic+0x2a>
    328a:	cc c0       	rjmp	.+408    	; 0x3424 <xTaskCreateStatic+0x1c2>
    328c:	e6 01       	movw	r28, r12
    328e:	59 01       	movw	r10, r18
    3290:	3a 01       	movw	r6, r20
    3292:	4b 01       	movw	r8, r22
    3294:	6c 01       	movw	r12, r24
    3296:	f8 8e       	std	Y+24, r15	; 0x18
    3298:	ef 8a       	std	Y+23, r14	; 0x17
    329a:	65 ea       	ldi	r22, 0xA5	; 165
    329c:	70 e0       	ldi	r23, 0x00	; 0
    329e:	c7 01       	movw	r24, r14
    32a0:	0e 94 da 24 	call	0x49b4	; 0x49b4 <memset>
    32a4:	81 e0       	ldi	r24, 0x01	; 1
    32a6:	68 1a       	sub	r6, r24
    32a8:	71 08       	sbc	r7, r1
    32aa:	ef 88       	ldd	r14, Y+23	; 0x17
    32ac:	f8 8c       	ldd	r15, Y+24	; 0x18
    32ae:	e6 0c       	add	r14, r6
    32b0:	f7 1c       	adc	r15, r7
    32b2:	d4 01       	movw	r26, r8
    32b4:	8c 91       	ld	r24, X
    32b6:	89 8f       	std	Y+25, r24	; 0x19
    32b8:	8c 91       	ld	r24, X
    32ba:	88 23       	and	r24, r24
    32bc:	a1 f0       	breq	.+40     	; 0x32e6 <xTaskCreateStatic+0x84>
    32be:	ae 01       	movw	r20, r28
    32c0:	46 5e       	subi	r20, 0xE6	; 230
    32c2:	5f 4f       	sbci	r21, 0xFF	; 255
    32c4:	f4 01       	movw	r30, r8
    32c6:	31 96       	adiw	r30, 0x01	; 1
    32c8:	b8 e0       	ldi	r27, 0x08	; 8
    32ca:	8b 0e       	add	r8, r27
    32cc:	91 1c       	adc	r9, r1
    32ce:	cf 01       	movw	r24, r30
    32d0:	21 91       	ld	r18, Z+
    32d2:	da 01       	movw	r26, r20
    32d4:	2d 93       	st	X+, r18
    32d6:	ad 01       	movw	r20, r26
    32d8:	dc 01       	movw	r26, r24
    32da:	8c 91       	ld	r24, X
    32dc:	88 23       	and	r24, r24
    32de:	19 f0       	breq	.+6      	; 0x32e6 <xTaskCreateStatic+0x84>
    32e0:	e8 15       	cp	r30, r8
    32e2:	f9 05       	cpc	r31, r9
    32e4:	a1 f7       	brne	.-24     	; 0x32ce <xTaskCreateStatic+0x6c>
    32e6:	18 a2       	std	Y+32, r1	; 0x20
    32e8:	04 30       	cpi	r16, 0x04	; 4
    32ea:	08 f0       	brcs	.+2      	; 0x32ee <xTaskCreateStatic+0x8c>
    32ec:	03 e0       	ldi	r16, 0x03	; 3
    32ee:	0e 8b       	std	Y+22, r16	; 0x16
    32f0:	09 a3       	std	Y+33, r16	; 0x21
    32f2:	1a a2       	std	Y+34, r1	; 0x22
    32f4:	4e 01       	movw	r8, r28
    32f6:	b2 e0       	ldi	r27, 0x02	; 2
    32f8:	8b 0e       	add	r8, r27
    32fa:	91 1c       	adc	r9, r1
    32fc:	c4 01       	movw	r24, r8
    32fe:	d0 da       	rcall	.-2656   	; 0x28a0 <vListInitialiseItem>
    3300:	ce 01       	movw	r24, r28
    3302:	0c 96       	adiw	r24, 0x0c	; 12
    3304:	cd da       	rcall	.-2662   	; 0x28a0 <vListInitialiseItem>
    3306:	d9 87       	std	Y+9, r29	; 0x09
    3308:	c8 87       	std	Y+8, r28	; 0x08
    330a:	84 e0       	ldi	r24, 0x04	; 4
    330c:	90 e0       	ldi	r25, 0x00	; 0
    330e:	80 1b       	sub	r24, r16
    3310:	91 09       	sbc	r25, r1
    3312:	9d 87       	std	Y+13, r25	; 0x0d
    3314:	8c 87       	std	Y+12, r24	; 0x0c
    3316:	db 8b       	std	Y+19, r29	; 0x13
    3318:	ca 8b       	std	Y+18, r28	; 0x12
    331a:	1b a2       	std	Y+35, r1	; 0x23
    331c:	1c a2       	std	Y+36, r1	; 0x24
    331e:	1d a2       	std	Y+37, r1	; 0x25
    3320:	1e a2       	std	Y+38, r1	; 0x26
    3322:	1f a2       	std	Y+39, r1	; 0x27
    3324:	a5 01       	movw	r20, r10
    3326:	b6 01       	movw	r22, r12
    3328:	c7 01       	movw	r24, r14
    332a:	37 db       	rcall	.-2450   	; 0x299a <pxPortInitialiseStack>
    332c:	99 83       	std	Y+1, r25	; 0x01
    332e:	88 83       	st	Y, r24
    3330:	0f b6       	in	r0, 0x3f	; 63
    3332:	f8 94       	cli
    3334:	0f 92       	push	r0
    3336:	80 91 12 0d 	lds	r24, 0x0D12	; 0x800d12 <uxCurrentNumberOfTasks>
    333a:	8f 5f       	subi	r24, 0xFF	; 255
    333c:	80 93 12 0d 	sts	0x0D12, r24	; 0x800d12 <uxCurrentNumberOfTasks>
    3340:	80 91 4e 0d 	lds	r24, 0x0D4E	; 0x800d4e <pxCurrentTCB>
    3344:	90 91 4f 0d 	lds	r25, 0x0D4F	; 0x800d4f <pxCurrentTCB+0x1>
    3348:	89 2b       	or	r24, r25
    334a:	69 f5       	brne	.+90     	; 0x33a6 <xTaskCreateStatic+0x144>
    334c:	d0 93 4f 0d 	sts	0x0D4F, r29	; 0x800d4f <pxCurrentTCB+0x1>
    3350:	c0 93 4e 0d 	sts	0x0D4E, r28	; 0x800d4e <pxCurrentTCB>
    3354:	80 91 12 0d 	lds	r24, 0x0D12	; 0x800d12 <uxCurrentNumberOfTasks>
    3358:	81 30       	cpi	r24, 0x01	; 1
    335a:	a9 f5       	brne	.+106    	; 0x33c6 <xTaskCreateStatic+0x164>
    335c:	8a e2       	ldi	r24, 0x2A	; 42
    335e:	9d e0       	ldi	r25, 0x0D	; 13
    3360:	91 da       	rcall	.-2782   	; 0x2884 <vListInitialise>
    3362:	83 e3       	ldi	r24, 0x33	; 51
    3364:	9d e0       	ldi	r25, 0x0D	; 13
    3366:	8e da       	rcall	.-2788   	; 0x2884 <vListInitialise>
    3368:	8c e3       	ldi	r24, 0x3C	; 60
    336a:	9d e0       	ldi	r25, 0x0D	; 13
    336c:	8b da       	rcall	.-2794   	; 0x2884 <vListInitialise>
    336e:	85 e4       	ldi	r24, 0x45	; 69
    3370:	9d e0       	ldi	r25, 0x0D	; 13
    3372:	88 da       	rcall	.-2800   	; 0x2884 <vListInitialise>
    3374:	8e ef       	ldi	r24, 0xFE	; 254
    3376:	9c e0       	ldi	r25, 0x0C	; 12
    3378:	85 da       	rcall	.-2806   	; 0x2884 <vListInitialise>
    337a:	85 ef       	ldi	r24, 0xF5	; 245
    337c:	9c e0       	ldi	r25, 0x0C	; 12
    337e:	82 da       	rcall	.-2812   	; 0x2884 <vListInitialise>
    3380:	8d e1       	ldi	r24, 0x1D	; 29
    3382:	9d e0       	ldi	r25, 0x0D	; 13
    3384:	7f da       	rcall	.-2818   	; 0x2884 <vListInitialise>
    3386:	84 e1       	ldi	r24, 0x14	; 20
    3388:	9d e0       	ldi	r25, 0x0D	; 13
    338a:	7c da       	rcall	.-2824   	; 0x2884 <vListInitialise>
    338c:	8e ef       	ldi	r24, 0xFE	; 254
    338e:	9c e0       	ldi	r25, 0x0C	; 12
    3390:	90 93 29 0d 	sts	0x0D29, r25	; 0x800d29 <pxDelayedTaskList+0x1>
    3394:	80 93 28 0d 	sts	0x0D28, r24	; 0x800d28 <pxDelayedTaskList>
    3398:	85 ef       	ldi	r24, 0xF5	; 245
    339a:	9c e0       	ldi	r25, 0x0C	; 12
    339c:	90 93 27 0d 	sts	0x0D27, r25	; 0x800d27 <pxOverflowDelayedTaskList+0x1>
    33a0:	80 93 26 0d 	sts	0x0D26, r24	; 0x800d26 <pxOverflowDelayedTaskList>
    33a4:	10 c0       	rjmp	.+32     	; 0x33c6 <xTaskCreateStatic+0x164>
    33a6:	80 91 0e 0d 	lds	r24, 0x0D0E	; 0x800d0e <xSchedulerRunning>
    33aa:	81 11       	cpse	r24, r1
    33ac:	0c c0       	rjmp	.+24     	; 0x33c6 <xTaskCreateStatic+0x164>
    33ae:	e0 91 4e 0d 	lds	r30, 0x0D4E	; 0x800d4e <pxCurrentTCB>
    33b2:	f0 91 4f 0d 	lds	r31, 0x0D4F	; 0x800d4f <pxCurrentTCB+0x1>
    33b6:	96 89       	ldd	r25, Z+22	; 0x16
    33b8:	8e 89       	ldd	r24, Y+22	; 0x16
    33ba:	89 17       	cp	r24, r25
    33bc:	20 f0       	brcs	.+8      	; 0x33c6 <xTaskCreateStatic+0x164>
    33be:	d0 93 4f 0d 	sts	0x0D4F, r29	; 0x800d4f <pxCurrentTCB+0x1>
    33c2:	c0 93 4e 0d 	sts	0x0D4E, r28	; 0x800d4e <pxCurrentTCB>
    33c6:	80 91 0a 0d 	lds	r24, 0x0D0A	; 0x800d0a <uxTaskNumber>
    33ca:	8f 5f       	subi	r24, 0xFF	; 255
    33cc:	80 93 0a 0d 	sts	0x0D0A, r24	; 0x800d0a <uxTaskNumber>
    33d0:	8e 89       	ldd	r24, Y+22	; 0x16
    33d2:	90 91 0f 0d 	lds	r25, 0x0D0F	; 0x800d0f <uxTopReadyPriority>
    33d6:	98 17       	cp	r25, r24
    33d8:	10 f4       	brcc	.+4      	; 0x33de <xTaskCreateStatic+0x17c>
    33da:	80 93 0f 0d 	sts	0x0D0F, r24	; 0x800d0f <uxTopReadyPriority>
    33de:	90 e0       	ldi	r25, 0x00	; 0
    33e0:	9c 01       	movw	r18, r24
    33e2:	22 0f       	add	r18, r18
    33e4:	33 1f       	adc	r19, r19
    33e6:	22 0f       	add	r18, r18
    33e8:	33 1f       	adc	r19, r19
    33ea:	22 0f       	add	r18, r18
    33ec:	33 1f       	adc	r19, r19
    33ee:	82 0f       	add	r24, r18
    33f0:	93 1f       	adc	r25, r19
    33f2:	b4 01       	movw	r22, r8
    33f4:	86 5d       	subi	r24, 0xD6	; 214
    33f6:	92 4f       	sbci	r25, 0xF2	; 242
    33f8:	57 da       	rcall	.-2898   	; 0x28a8 <vListInsertEnd>
    33fa:	0f 90       	pop	r0
    33fc:	0f be       	out	0x3f, r0	; 63
    33fe:	80 91 0e 0d 	lds	r24, 0x0D0E	; 0x800d0e <xSchedulerRunning>
    3402:	88 23       	and	r24, r24
    3404:	91 f0       	breq	.+36     	; 0x342a <xTaskCreateStatic+0x1c8>
    3406:	e0 91 4e 0d 	lds	r30, 0x0D4E	; 0x800d4e <pxCurrentTCB>
    340a:	f0 91 4f 0d 	lds	r31, 0x0D4F	; 0x800d4f <pxCurrentTCB+0x1>
    340e:	96 89       	ldd	r25, Z+22	; 0x16
    3410:	8e 89       	ldd	r24, Y+22	; 0x16
    3412:	98 17       	cp	r25, r24
    3414:	68 f4       	brcc	.+26     	; 0x3430 <xTaskCreateStatic+0x1ce>
    3416:	6f db       	rcall	.-2338   	; 0x2af6 <vPortYield>
    3418:	8c 2f       	mov	r24, r28
    341a:	9d 2f       	mov	r25, r29
    341c:	0b c0       	rjmp	.+22     	; 0x3434 <xTaskCreateStatic+0x1d2>
    341e:	80 e0       	ldi	r24, 0x00	; 0
    3420:	90 e0       	ldi	r25, 0x00	; 0
    3422:	08 c0       	rjmp	.+16     	; 0x3434 <xTaskCreateStatic+0x1d2>
    3424:	80 e0       	ldi	r24, 0x00	; 0
    3426:	90 e0       	ldi	r25, 0x00	; 0
    3428:	05 c0       	rjmp	.+10     	; 0x3434 <xTaskCreateStatic+0x1d2>
    342a:	8c 2f       	mov	r24, r28
    342c:	9d 2f       	mov	r25, r29
    342e:	02 c0       	rjmp	.+4      	; 0x3434 <xTaskCreateStatic+0x1d2>
    3430:	8c 2f       	mov	r24, r28
    3432:	9d 2f       	mov	r25, r29
    3434:	df 91       	pop	r29
    3436:	cf 91       	pop	r28
    3438:	0f 91       	pop	r16
    343a:	ff 90       	pop	r15
    343c:	ef 90       	pop	r14
    343e:	df 90       	pop	r13
    3440:	cf 90       	pop	r12
    3442:	bf 90       	pop	r11
    3444:	af 90       	pop	r10
    3446:	9f 90       	pop	r9
    3448:	8f 90       	pop	r8
    344a:	7f 90       	pop	r7
    344c:	6f 90       	pop	r6
    344e:	08 95       	ret

00003450 <vTaskStartScheduler>:
    3450:	cf 92       	push	r12
    3452:	df 92       	push	r13
    3454:	ef 92       	push	r14
    3456:	ff 92       	push	r15
    3458:	0f 93       	push	r16
    345a:	cf 93       	push	r28
    345c:	df 93       	push	r29
    345e:	00 d0       	rcall	.+0      	; 0x3460 <vTaskStartScheduler+0x10>
    3460:	00 d0       	rcall	.+0      	; 0x3462 <vTaskStartScheduler+0x12>
    3462:	cd b7       	in	r28, 0x3d	; 61
    3464:	de b7       	in	r29, 0x3e	; 62
    3466:	1e 82       	std	Y+6, r1	; 0x06
    3468:	1d 82       	std	Y+5, r1	; 0x05
    346a:	1c 82       	std	Y+4, r1	; 0x04
    346c:	1b 82       	std	Y+3, r1	; 0x03
    346e:	ae 01       	movw	r20, r28
    3470:	4f 5f       	subi	r20, 0xFF	; 255
    3472:	5f 4f       	sbci	r21, 0xFF	; 255
    3474:	be 01       	movw	r22, r28
    3476:	6d 5f       	subi	r22, 0xFD	; 253
    3478:	7f 4f       	sbci	r23, 0xFF	; 255
    347a:	ce 01       	movw	r24, r28
    347c:	05 96       	adiw	r24, 0x05	; 5
    347e:	e2 d9       	rcall	.-3132   	; 0x2844 <vApplicationGetIdleTaskMemory>
    3480:	cd 80       	ldd	r12, Y+5	; 0x05
    3482:	de 80       	ldd	r13, Y+6	; 0x06
    3484:	eb 80       	ldd	r14, Y+3	; 0x03
    3486:	fc 80       	ldd	r15, Y+4	; 0x04
    3488:	49 81       	ldd	r20, Y+1	; 0x01
    348a:	5a 81       	ldd	r21, Y+2	; 0x02
    348c:	00 e0       	ldi	r16, 0x00	; 0
    348e:	20 e0       	ldi	r18, 0x00	; 0
    3490:	30 e0       	ldi	r19, 0x00	; 0
    3492:	60 ed       	ldi	r22, 0xD0	; 208
    3494:	72 e0       	ldi	r23, 0x02	; 2
    3496:	83 eb       	ldi	r24, 0xB3	; 179
    3498:	90 e0       	ldi	r25, 0x00	; 0
    349a:	e3 de       	rcall	.-570    	; 0x3262 <xTaskCreateStatic>
    349c:	89 2b       	or	r24, r25
    349e:	91 f0       	breq	.+36     	; 0x34c4 <vTaskStartScheduler+0x74>
    34a0:	42 d3       	rcall	.+1668   	; 0x3b26 <xTimerCreateTimerTask>
    34a2:	81 30       	cpi	r24, 0x01	; 1
    34a4:	79 f4       	brne	.+30     	; 0x34c4 <vTaskStartScheduler+0x74>
    34a6:	f8 94       	cli
    34a8:	8f ef       	ldi	r24, 0xFF	; 255
    34aa:	9f ef       	ldi	r25, 0xFF	; 255
    34ac:	90 93 09 0d 	sts	0x0D09, r25	; 0x800d09 <xNextTaskUnblockTime+0x1>
    34b0:	80 93 08 0d 	sts	0x0D08, r24	; 0x800d08 <xNextTaskUnblockTime>
    34b4:	81 e0       	ldi	r24, 0x01	; 1
    34b6:	80 93 0e 0d 	sts	0x0D0E, r24	; 0x800d0e <xSchedulerRunning>
    34ba:	10 92 11 0d 	sts	0x0D11, r1	; 0x800d11 <xTickCount+0x1>
    34be:	10 92 10 0d 	sts	0x0D10, r1	; 0x800d10 <xTickCount>
    34c2:	dd da       	rcall	.-2630   	; 0x2a7e <xPortStartScheduler>
    34c4:	26 96       	adiw	r28, 0x06	; 6
    34c6:	0f b6       	in	r0, 0x3f	; 63
    34c8:	f8 94       	cli
    34ca:	de bf       	out	0x3e, r29	; 62
    34cc:	0f be       	out	0x3f, r0	; 63
    34ce:	cd bf       	out	0x3d, r28	; 61
    34d0:	df 91       	pop	r29
    34d2:	cf 91       	pop	r28
    34d4:	0f 91       	pop	r16
    34d6:	ff 90       	pop	r15
    34d8:	ef 90       	pop	r14
    34da:	df 90       	pop	r13
    34dc:	cf 90       	pop	r12
    34de:	08 95       	ret

000034e0 <vTaskSuspendAll>:
    34e0:	80 91 07 0d 	lds	r24, 0x0D07	; 0x800d07 <uxSchedulerSuspended>
    34e4:	8f 5f       	subi	r24, 0xFF	; 255
    34e6:	80 93 07 0d 	sts	0x0D07, r24	; 0x800d07 <uxSchedulerSuspended>
    34ea:	08 95       	ret

000034ec <xTaskGetTickCount>:
    34ec:	0f b6       	in	r0, 0x3f	; 63
    34ee:	f8 94       	cli
    34f0:	0f 92       	push	r0
    34f2:	80 91 10 0d 	lds	r24, 0x0D10	; 0x800d10 <xTickCount>
    34f6:	90 91 11 0d 	lds	r25, 0x0D11	; 0x800d11 <xTickCount+0x1>
    34fa:	0f 90       	pop	r0
    34fc:	0f be       	out	0x3f, r0	; 63
    34fe:	08 95       	ret

00003500 <xTaskIncrementTick>:
    3500:	cf 92       	push	r12
    3502:	df 92       	push	r13
    3504:	ef 92       	push	r14
    3506:	ff 92       	push	r15
    3508:	0f 93       	push	r16
    350a:	1f 93       	push	r17
    350c:	cf 93       	push	r28
    350e:	df 93       	push	r29
    3510:	80 91 07 0d 	lds	r24, 0x0D07	; 0x800d07 <uxSchedulerSuspended>
    3514:	81 11       	cpse	r24, r1
    3516:	95 c0       	rjmp	.+298    	; 0x3642 <xTaskIncrementTick+0x142>
    3518:	e0 90 10 0d 	lds	r14, 0x0D10	; 0x800d10 <xTickCount>
    351c:	f0 90 11 0d 	lds	r15, 0x0D11	; 0x800d11 <xTickCount+0x1>
    3520:	8f ef       	ldi	r24, 0xFF	; 255
    3522:	e8 1a       	sub	r14, r24
    3524:	f8 0a       	sbc	r15, r24
    3526:	f0 92 11 0d 	sts	0x0D11, r15	; 0x800d11 <xTickCount+0x1>
    352a:	e0 92 10 0d 	sts	0x0D10, r14	; 0x800d10 <xTickCount>
    352e:	e1 14       	cp	r14, r1
    3530:	f1 04       	cpc	r15, r1
    3532:	b1 f4       	brne	.+44     	; 0x3560 <xTaskIncrementTick+0x60>
    3534:	80 91 28 0d 	lds	r24, 0x0D28	; 0x800d28 <pxDelayedTaskList>
    3538:	90 91 29 0d 	lds	r25, 0x0D29	; 0x800d29 <pxDelayedTaskList+0x1>
    353c:	20 91 26 0d 	lds	r18, 0x0D26	; 0x800d26 <pxOverflowDelayedTaskList>
    3540:	30 91 27 0d 	lds	r19, 0x0D27	; 0x800d27 <pxOverflowDelayedTaskList+0x1>
    3544:	30 93 29 0d 	sts	0x0D29, r19	; 0x800d29 <pxDelayedTaskList+0x1>
    3548:	20 93 28 0d 	sts	0x0D28, r18	; 0x800d28 <pxDelayedTaskList>
    354c:	90 93 27 0d 	sts	0x0D27, r25	; 0x800d27 <pxOverflowDelayedTaskList+0x1>
    3550:	80 93 26 0d 	sts	0x0D26, r24	; 0x800d26 <pxOverflowDelayedTaskList>
    3554:	80 91 0b 0d 	lds	r24, 0x0D0B	; 0x800d0b <xNumOfOverflows>
    3558:	8f 5f       	subi	r24, 0xFF	; 255
    355a:	80 93 0b 0d 	sts	0x0D0B, r24	; 0x800d0b <xNumOfOverflows>
    355e:	21 de       	rcall	.-958    	; 0x31a2 <prvResetNextTaskUnblockTime>
    3560:	80 91 08 0d 	lds	r24, 0x0D08	; 0x800d08 <xNextTaskUnblockTime>
    3564:	90 91 09 0d 	lds	r25, 0x0D09	; 0x800d09 <xNextTaskUnblockTime+0x1>
    3568:	e8 16       	cp	r14, r24
    356a:	f9 06       	cpc	r15, r25
    356c:	10 f4       	brcc	.+4      	; 0x3572 <xTaskIncrementTick+0x72>
    356e:	d1 2c       	mov	r13, r1
    3570:	50 c0       	rjmp	.+160    	; 0x3612 <xTaskIncrementTick+0x112>
    3572:	d1 2c       	mov	r13, r1
    3574:	cc 24       	eor	r12, r12
    3576:	c3 94       	inc	r12
    3578:	e0 91 28 0d 	lds	r30, 0x0D28	; 0x800d28 <pxDelayedTaskList>
    357c:	f0 91 29 0d 	lds	r31, 0x0D29	; 0x800d29 <pxDelayedTaskList+0x1>
    3580:	80 81       	ld	r24, Z
    3582:	81 11       	cpse	r24, r1
    3584:	07 c0       	rjmp	.+14     	; 0x3594 <xTaskIncrementTick+0x94>
    3586:	8f ef       	ldi	r24, 0xFF	; 255
    3588:	9f ef       	ldi	r25, 0xFF	; 255
    358a:	90 93 09 0d 	sts	0x0D09, r25	; 0x800d09 <xNextTaskUnblockTime+0x1>
    358e:	80 93 08 0d 	sts	0x0D08, r24	; 0x800d08 <xNextTaskUnblockTime>
    3592:	3f c0       	rjmp	.+126    	; 0x3612 <xTaskIncrementTick+0x112>
    3594:	e0 91 28 0d 	lds	r30, 0x0D28	; 0x800d28 <pxDelayedTaskList>
    3598:	f0 91 29 0d 	lds	r31, 0x0D29	; 0x800d29 <pxDelayedTaskList+0x1>
    359c:	05 80       	ldd	r0, Z+5	; 0x05
    359e:	f6 81       	ldd	r31, Z+6	; 0x06
    35a0:	e0 2d       	mov	r30, r0
    35a2:	c6 81       	ldd	r28, Z+6	; 0x06
    35a4:	d7 81       	ldd	r29, Z+7	; 0x07
    35a6:	8a 81       	ldd	r24, Y+2	; 0x02
    35a8:	9b 81       	ldd	r25, Y+3	; 0x03
    35aa:	e8 16       	cp	r14, r24
    35ac:	f9 06       	cpc	r15, r25
    35ae:	28 f4       	brcc	.+10     	; 0x35ba <xTaskIncrementTick+0xba>
    35b0:	90 93 09 0d 	sts	0x0D09, r25	; 0x800d09 <xNextTaskUnblockTime+0x1>
    35b4:	80 93 08 0d 	sts	0x0D08, r24	; 0x800d08 <xNextTaskUnblockTime>
    35b8:	2c c0       	rjmp	.+88     	; 0x3612 <xTaskIncrementTick+0x112>
    35ba:	8e 01       	movw	r16, r28
    35bc:	0e 5f       	subi	r16, 0xFE	; 254
    35be:	1f 4f       	sbci	r17, 0xFF	; 255
    35c0:	c8 01       	movw	r24, r16
    35c2:	c4 d9       	rcall	.-3192   	; 0x294c <uxListRemove>
    35c4:	8c 89       	ldd	r24, Y+20	; 0x14
    35c6:	9d 89       	ldd	r25, Y+21	; 0x15
    35c8:	89 2b       	or	r24, r25
    35ca:	19 f0       	breq	.+6      	; 0x35d2 <xTaskIncrementTick+0xd2>
    35cc:	ce 01       	movw	r24, r28
    35ce:	0c 96       	adiw	r24, 0x0c	; 12
    35d0:	bd d9       	rcall	.-3206   	; 0x294c <uxListRemove>
    35d2:	8e 89       	ldd	r24, Y+22	; 0x16
    35d4:	90 91 0f 0d 	lds	r25, 0x0D0F	; 0x800d0f <uxTopReadyPriority>
    35d8:	98 17       	cp	r25, r24
    35da:	10 f4       	brcc	.+4      	; 0x35e0 <xTaskIncrementTick+0xe0>
    35dc:	80 93 0f 0d 	sts	0x0D0F, r24	; 0x800d0f <uxTopReadyPriority>
    35e0:	90 e0       	ldi	r25, 0x00	; 0
    35e2:	9c 01       	movw	r18, r24
    35e4:	22 0f       	add	r18, r18
    35e6:	33 1f       	adc	r19, r19
    35e8:	22 0f       	add	r18, r18
    35ea:	33 1f       	adc	r19, r19
    35ec:	22 0f       	add	r18, r18
    35ee:	33 1f       	adc	r19, r19
    35f0:	82 0f       	add	r24, r18
    35f2:	93 1f       	adc	r25, r19
    35f4:	b8 01       	movw	r22, r16
    35f6:	86 5d       	subi	r24, 0xD6	; 214
    35f8:	92 4f       	sbci	r25, 0xF2	; 242
    35fa:	56 d9       	rcall	.-3412   	; 0x28a8 <vListInsertEnd>
    35fc:	e0 91 4e 0d 	lds	r30, 0x0D4E	; 0x800d4e <pxCurrentTCB>
    3600:	f0 91 4f 0d 	lds	r31, 0x0D4F	; 0x800d4f <pxCurrentTCB+0x1>
    3604:	9e 89       	ldd	r25, Y+22	; 0x16
    3606:	86 89       	ldd	r24, Z+22	; 0x16
    3608:	98 17       	cp	r25, r24
    360a:	08 f4       	brcc	.+2      	; 0x360e <xTaskIncrementTick+0x10e>
    360c:	b5 cf       	rjmp	.-150    	; 0x3578 <xTaskIncrementTick+0x78>
    360e:	dc 2c       	mov	r13, r12
    3610:	b3 cf       	rjmp	.-154    	; 0x3578 <xTaskIncrementTick+0x78>
    3612:	e0 91 4e 0d 	lds	r30, 0x0D4E	; 0x800d4e <pxCurrentTCB>
    3616:	f0 91 4f 0d 	lds	r31, 0x0D4F	; 0x800d4f <pxCurrentTCB+0x1>
    361a:	86 89       	ldd	r24, Z+22	; 0x16
    361c:	90 e0       	ldi	r25, 0x00	; 0
    361e:	fc 01       	movw	r30, r24
    3620:	ee 0f       	add	r30, r30
    3622:	ff 1f       	adc	r31, r31
    3624:	ee 0f       	add	r30, r30
    3626:	ff 1f       	adc	r31, r31
    3628:	ee 0f       	add	r30, r30
    362a:	ff 1f       	adc	r31, r31
    362c:	8e 0f       	add	r24, r30
    362e:	9f 1f       	adc	r25, r31
    3630:	fc 01       	movw	r30, r24
    3632:	e6 5d       	subi	r30, 0xD6	; 214
    3634:	f2 4f       	sbci	r31, 0xF2	; 242
    3636:	80 81       	ld	r24, Z
    3638:	82 30       	cpi	r24, 0x02	; 2
    363a:	48 f0       	brcs	.+18     	; 0x364e <xTaskIncrementTick+0x14e>
    363c:	dd 24       	eor	r13, r13
    363e:	d3 94       	inc	r13
    3640:	06 c0       	rjmp	.+12     	; 0x364e <xTaskIncrementTick+0x14e>
    3642:	80 91 0d 0d 	lds	r24, 0x0D0D	; 0x800d0d <uxPendedTicks>
    3646:	8f 5f       	subi	r24, 0xFF	; 255
    3648:	80 93 0d 0d 	sts	0x0D0D, r24	; 0x800d0d <uxPendedTicks>
    364c:	d1 2c       	mov	r13, r1
    364e:	80 91 0c 0d 	lds	r24, 0x0D0C	; 0x800d0c <xYieldPending>
    3652:	88 23       	and	r24, r24
    3654:	11 f0       	breq	.+4      	; 0x365a <xTaskIncrementTick+0x15a>
    3656:	dd 24       	eor	r13, r13
    3658:	d3 94       	inc	r13
    365a:	8d 2d       	mov	r24, r13
    365c:	df 91       	pop	r29
    365e:	cf 91       	pop	r28
    3660:	1f 91       	pop	r17
    3662:	0f 91       	pop	r16
    3664:	ff 90       	pop	r15
    3666:	ef 90       	pop	r14
    3668:	df 90       	pop	r13
    366a:	cf 90       	pop	r12
    366c:	08 95       	ret

0000366e <xTaskResumeAll>:
    366e:	df 92       	push	r13
    3670:	ef 92       	push	r14
    3672:	ff 92       	push	r15
    3674:	0f 93       	push	r16
    3676:	1f 93       	push	r17
    3678:	cf 93       	push	r28
    367a:	df 93       	push	r29
    367c:	0f b6       	in	r0, 0x3f	; 63
    367e:	f8 94       	cli
    3680:	0f 92       	push	r0
    3682:	80 91 07 0d 	lds	r24, 0x0D07	; 0x800d07 <uxSchedulerSuspended>
    3686:	81 50       	subi	r24, 0x01	; 1
    3688:	80 93 07 0d 	sts	0x0D07, r24	; 0x800d07 <uxSchedulerSuspended>
    368c:	80 91 07 0d 	lds	r24, 0x0D07	; 0x800d07 <uxSchedulerSuspended>
    3690:	81 11       	cpse	r24, r1
    3692:	59 c0       	rjmp	.+178    	; 0x3746 <xTaskResumeAll+0xd8>
    3694:	80 91 12 0d 	lds	r24, 0x0D12	; 0x800d12 <uxCurrentNumberOfTasks>
    3698:	81 11       	cpse	r24, r1
    369a:	30 c0       	rjmp	.+96     	; 0x36fc <xTaskResumeAll+0x8e>
    369c:	57 c0       	rjmp	.+174    	; 0x374c <xTaskResumeAll+0xde>
    369e:	d7 01       	movw	r26, r14
    36a0:	15 96       	adiw	r26, 0x05	; 5
    36a2:	ed 91       	ld	r30, X+
    36a4:	fc 91       	ld	r31, X
    36a6:	16 97       	sbiw	r26, 0x06	; 6
    36a8:	c6 81       	ldd	r28, Z+6	; 0x06
    36aa:	d7 81       	ldd	r29, Z+7	; 0x07
    36ac:	ce 01       	movw	r24, r28
    36ae:	0c 96       	adiw	r24, 0x0c	; 12
    36b0:	4d d9       	rcall	.-3430   	; 0x294c <uxListRemove>
    36b2:	8e 01       	movw	r16, r28
    36b4:	0e 5f       	subi	r16, 0xFE	; 254
    36b6:	1f 4f       	sbci	r17, 0xFF	; 255
    36b8:	c8 01       	movw	r24, r16
    36ba:	48 d9       	rcall	.-3440   	; 0x294c <uxListRemove>
    36bc:	8e 89       	ldd	r24, Y+22	; 0x16
    36be:	90 91 0f 0d 	lds	r25, 0x0D0F	; 0x800d0f <uxTopReadyPriority>
    36c2:	98 17       	cp	r25, r24
    36c4:	10 f4       	brcc	.+4      	; 0x36ca <xTaskResumeAll+0x5c>
    36c6:	80 93 0f 0d 	sts	0x0D0F, r24	; 0x800d0f <uxTopReadyPriority>
    36ca:	90 e0       	ldi	r25, 0x00	; 0
    36cc:	9c 01       	movw	r18, r24
    36ce:	22 0f       	add	r18, r18
    36d0:	33 1f       	adc	r19, r19
    36d2:	22 0f       	add	r18, r18
    36d4:	33 1f       	adc	r19, r19
    36d6:	22 0f       	add	r18, r18
    36d8:	33 1f       	adc	r19, r19
    36da:	82 0f       	add	r24, r18
    36dc:	93 1f       	adc	r25, r19
    36de:	b8 01       	movw	r22, r16
    36e0:	86 5d       	subi	r24, 0xD6	; 214
    36e2:	92 4f       	sbci	r25, 0xF2	; 242
    36e4:	e1 d8       	rcall	.-3646   	; 0x28a8 <vListInsertEnd>
    36e6:	e0 91 4e 0d 	lds	r30, 0x0D4E	; 0x800d4e <pxCurrentTCB>
    36ea:	f0 91 4f 0d 	lds	r31, 0x0D4F	; 0x800d4f <pxCurrentTCB+0x1>
    36ee:	9e 89       	ldd	r25, Y+22	; 0x16
    36f0:	86 89       	ldd	r24, Z+22	; 0x16
    36f2:	98 17       	cp	r25, r24
    36f4:	68 f0       	brcs	.+26     	; 0x3710 <xTaskResumeAll+0xa2>
    36f6:	d0 92 0c 0d 	sts	0x0D0C, r13	; 0x800d0c <xYieldPending>
    36fa:	0a c0       	rjmp	.+20     	; 0x3710 <xTaskResumeAll+0xa2>
    36fc:	c0 e0       	ldi	r28, 0x00	; 0
    36fe:	d0 e0       	ldi	r29, 0x00	; 0
    3700:	0f 2e       	mov	r0, r31
    3702:	fd e1       	ldi	r31, 0x1D	; 29
    3704:	ef 2e       	mov	r14, r31
    3706:	fd e0       	ldi	r31, 0x0D	; 13
    3708:	ff 2e       	mov	r15, r31
    370a:	f0 2d       	mov	r31, r0
    370c:	dd 24       	eor	r13, r13
    370e:	d3 94       	inc	r13
    3710:	f7 01       	movw	r30, r14
    3712:	80 81       	ld	r24, Z
    3714:	81 11       	cpse	r24, r1
    3716:	c3 cf       	rjmp	.-122    	; 0x369e <xTaskResumeAll+0x30>
    3718:	cd 2b       	or	r28, r29
    371a:	09 f0       	breq	.+2      	; 0x371e <xTaskResumeAll+0xb0>
    371c:	42 dd       	rcall	.-1404   	; 0x31a2 <prvResetNextTaskUnblockTime>
    371e:	c0 91 0d 0d 	lds	r28, 0x0D0D	; 0x800d0d <uxPendedTicks>
    3722:	cc 23       	and	r28, r28
    3724:	49 f0       	breq	.+18     	; 0x3738 <xTaskResumeAll+0xca>
    3726:	d1 e0       	ldi	r29, 0x01	; 1
    3728:	eb de       	rcall	.-554    	; 0x3500 <xTaskIncrementTick>
    372a:	81 11       	cpse	r24, r1
    372c:	d0 93 0c 0d 	sts	0x0D0C, r29	; 0x800d0c <xYieldPending>
    3730:	c1 50       	subi	r28, 0x01	; 1
    3732:	d1 f7       	brne	.-12     	; 0x3728 <xTaskResumeAll+0xba>
    3734:	10 92 0d 0d 	sts	0x0D0D, r1	; 0x800d0d <uxPendedTicks>
    3738:	80 91 0c 0d 	lds	r24, 0x0D0C	; 0x800d0c <xYieldPending>
    373c:	88 23       	and	r24, r24
    373e:	29 f0       	breq	.+10     	; 0x374a <xTaskResumeAll+0xdc>
    3740:	da d9       	rcall	.-3148   	; 0x2af6 <vPortYield>
    3742:	81 e0       	ldi	r24, 0x01	; 1
    3744:	03 c0       	rjmp	.+6      	; 0x374c <xTaskResumeAll+0xde>
    3746:	80 e0       	ldi	r24, 0x00	; 0
    3748:	01 c0       	rjmp	.+2      	; 0x374c <xTaskResumeAll+0xde>
    374a:	80 e0       	ldi	r24, 0x00	; 0
    374c:	0f 90       	pop	r0
    374e:	0f be       	out	0x3f, r0	; 63
    3750:	df 91       	pop	r29
    3752:	cf 91       	pop	r28
    3754:	1f 91       	pop	r17
    3756:	0f 91       	pop	r16
    3758:	ff 90       	pop	r15
    375a:	ef 90       	pop	r14
    375c:	df 90       	pop	r13
    375e:	08 95       	ret

00003760 <vTaskDelay>:
    3760:	cf 93       	push	r28
    3762:	df 93       	push	r29
    3764:	ec 01       	movw	r28, r24
    3766:	89 2b       	or	r24, r25
    3768:	39 f0       	breq	.+14     	; 0x3778 <vTaskDelay+0x18>
    376a:	ba de       	rcall	.-652    	; 0x34e0 <vTaskSuspendAll>
    376c:	60 e0       	ldi	r22, 0x00	; 0
    376e:	ce 01       	movw	r24, r28
    3770:	37 dd       	rcall	.-1426   	; 0x31e0 <prvAddCurrentTaskToDelayedList>
    3772:	7d df       	rcall	.-262    	; 0x366e <xTaskResumeAll>
    3774:	81 11       	cpse	r24, r1
    3776:	01 c0       	rjmp	.+2      	; 0x377a <vTaskDelay+0x1a>
    3778:	be d9       	rcall	.-3204   	; 0x2af6 <vPortYield>
    377a:	df 91       	pop	r29
    377c:	cf 91       	pop	r28
    377e:	08 95       	ret

00003780 <vTaskSwitchContext>:
    3780:	80 91 07 0d 	lds	r24, 0x0D07	; 0x800d07 <uxSchedulerSuspended>
    3784:	88 23       	and	r24, r24
    3786:	21 f0       	breq	.+8      	; 0x3790 <vTaskSwitchContext+0x10>
    3788:	81 e0       	ldi	r24, 0x01	; 1
    378a:	80 93 0c 0d 	sts	0x0D0C, r24	; 0x800d0c <xYieldPending>
    378e:	08 95       	ret
    3790:	10 92 0c 0d 	sts	0x0D0C, r1	; 0x800d0c <xYieldPending>
    3794:	a0 91 4e 0d 	lds	r26, 0x0D4E	; 0x800d4e <pxCurrentTCB>
    3798:	b0 91 4f 0d 	lds	r27, 0x0D4F	; 0x800d4f <pxCurrentTCB+0x1>
    379c:	e0 91 4e 0d 	lds	r30, 0x0D4E	; 0x800d4e <pxCurrentTCB>
    37a0:	f0 91 4f 0d 	lds	r31, 0x0D4F	; 0x800d4f <pxCurrentTCB+0x1>
    37a4:	2d 91       	ld	r18, X+
    37a6:	3c 91       	ld	r19, X
    37a8:	87 89       	ldd	r24, Z+23	; 0x17
    37aa:	90 8d       	ldd	r25, Z+24	; 0x18
    37ac:	82 17       	cp	r24, r18
    37ae:	93 07       	cpc	r25, r19
    37b0:	58 f0       	brcs	.+22     	; 0x37c8 <vTaskSwitchContext+0x48>
    37b2:	60 91 4e 0d 	lds	r22, 0x0D4E	; 0x800d4e <pxCurrentTCB>
    37b6:	70 91 4f 0d 	lds	r23, 0x0D4F	; 0x800d4f <pxCurrentTCB+0x1>
    37ba:	80 91 4e 0d 	lds	r24, 0x0D4E	; 0x800d4e <pxCurrentTCB>
    37be:	90 91 4f 0d 	lds	r25, 0x0D4F	; 0x800d4f <pxCurrentTCB+0x1>
    37c2:	67 5e       	subi	r22, 0xE7	; 231
    37c4:	7f 4f       	sbci	r23, 0xFF	; 255
    37c6:	31 d8       	rcall	.-3998   	; 0x282a <vApplicationStackOverflowHook>
    37c8:	20 91 0f 0d 	lds	r18, 0x0D0F	; 0x800d0f <uxTopReadyPriority>
    37cc:	82 2f       	mov	r24, r18
    37ce:	90 e0       	ldi	r25, 0x00	; 0
    37d0:	fc 01       	movw	r30, r24
    37d2:	ee 0f       	add	r30, r30
    37d4:	ff 1f       	adc	r31, r31
    37d6:	ee 0f       	add	r30, r30
    37d8:	ff 1f       	adc	r31, r31
    37da:	ee 0f       	add	r30, r30
    37dc:	ff 1f       	adc	r31, r31
    37de:	e8 0f       	add	r30, r24
    37e0:	f9 1f       	adc	r31, r25
    37e2:	e6 5d       	subi	r30, 0xD6	; 214
    37e4:	f2 4f       	sbci	r31, 0xF2	; 242
    37e6:	30 81       	ld	r19, Z
    37e8:	31 11       	cpse	r19, r1
    37ea:	11 c0       	rjmp	.+34     	; 0x380e <vTaskSwitchContext+0x8e>
    37ec:	21 50       	subi	r18, 0x01	; 1
    37ee:	82 2f       	mov	r24, r18
    37f0:	90 e0       	ldi	r25, 0x00	; 0
    37f2:	fc 01       	movw	r30, r24
    37f4:	ee 0f       	add	r30, r30
    37f6:	ff 1f       	adc	r31, r31
    37f8:	ee 0f       	add	r30, r30
    37fa:	ff 1f       	adc	r31, r31
    37fc:	ee 0f       	add	r30, r30
    37fe:	ff 1f       	adc	r31, r31
    3800:	e8 0f       	add	r30, r24
    3802:	f9 1f       	adc	r31, r25
    3804:	e6 5d       	subi	r30, 0xD6	; 214
    3806:	f2 4f       	sbci	r31, 0xF2	; 242
    3808:	30 81       	ld	r19, Z
    380a:	33 23       	and	r19, r19
    380c:	79 f3       	breq	.-34     	; 0x37ec <vTaskSwitchContext+0x6c>
    380e:	ac 01       	movw	r20, r24
    3810:	44 0f       	add	r20, r20
    3812:	55 1f       	adc	r21, r21
    3814:	44 0f       	add	r20, r20
    3816:	55 1f       	adc	r21, r21
    3818:	44 0f       	add	r20, r20
    381a:	55 1f       	adc	r21, r21
    381c:	48 0f       	add	r20, r24
    381e:	59 1f       	adc	r21, r25
    3820:	da 01       	movw	r26, r20
    3822:	a6 5d       	subi	r26, 0xD6	; 214
    3824:	b2 4f       	sbci	r27, 0xF2	; 242
    3826:	11 96       	adiw	r26, 0x01	; 1
    3828:	ed 91       	ld	r30, X+
    382a:	fc 91       	ld	r31, X
    382c:	12 97       	sbiw	r26, 0x02	; 2
    382e:	02 80       	ldd	r0, Z+2	; 0x02
    3830:	f3 81       	ldd	r31, Z+3	; 0x03
    3832:	e0 2d       	mov	r30, r0
    3834:	12 96       	adiw	r26, 0x02	; 2
    3836:	fc 93       	st	X, r31
    3838:	ee 93       	st	-X, r30
    383a:	11 97       	sbiw	r26, 0x01	; 1
    383c:	43 5d       	subi	r20, 0xD3	; 211
    383e:	52 4f       	sbci	r21, 0xF2	; 242
    3840:	e4 17       	cp	r30, r20
    3842:	f5 07       	cpc	r31, r21
    3844:	29 f4       	brne	.+10     	; 0x3850 <vTaskSwitchContext+0xd0>
    3846:	42 81       	ldd	r20, Z+2	; 0x02
    3848:	53 81       	ldd	r21, Z+3	; 0x03
    384a:	fd 01       	movw	r30, r26
    384c:	52 83       	std	Z+2, r21	; 0x02
    384e:	41 83       	std	Z+1, r20	; 0x01
    3850:	fc 01       	movw	r30, r24
    3852:	ee 0f       	add	r30, r30
    3854:	ff 1f       	adc	r31, r31
    3856:	ee 0f       	add	r30, r30
    3858:	ff 1f       	adc	r31, r31
    385a:	ee 0f       	add	r30, r30
    385c:	ff 1f       	adc	r31, r31
    385e:	8e 0f       	add	r24, r30
    3860:	9f 1f       	adc	r25, r31
    3862:	fc 01       	movw	r30, r24
    3864:	e6 5d       	subi	r30, 0xD6	; 214
    3866:	f2 4f       	sbci	r31, 0xF2	; 242
    3868:	01 80       	ldd	r0, Z+1	; 0x01
    386a:	f2 81       	ldd	r31, Z+2	; 0x02
    386c:	e0 2d       	mov	r30, r0
    386e:	86 81       	ldd	r24, Z+6	; 0x06
    3870:	97 81       	ldd	r25, Z+7	; 0x07
    3872:	90 93 4f 0d 	sts	0x0D4F, r25	; 0x800d4f <pxCurrentTCB+0x1>
    3876:	80 93 4e 0d 	sts	0x0D4E, r24	; 0x800d4e <pxCurrentTCB>
    387a:	20 93 0f 0d 	sts	0x0D0F, r18	; 0x800d0f <uxTopReadyPriority>
    387e:	08 95       	ret

00003880 <vTaskPlaceOnEventList>:
    3880:	cf 93       	push	r28
    3882:	df 93       	push	r29
    3884:	eb 01       	movw	r28, r22
    3886:	60 91 4e 0d 	lds	r22, 0x0D4E	; 0x800d4e <pxCurrentTCB>
    388a:	70 91 4f 0d 	lds	r23, 0x0D4F	; 0x800d4f <pxCurrentTCB+0x1>
    388e:	64 5f       	subi	r22, 0xF4	; 244
    3890:	7f 4f       	sbci	r23, 0xFF	; 255
    3892:	2b d8       	rcall	.-4010   	; 0x28ea <vListInsert>
    3894:	61 e0       	ldi	r22, 0x01	; 1
    3896:	ce 01       	movw	r24, r28
    3898:	a3 dc       	rcall	.-1722   	; 0x31e0 <prvAddCurrentTaskToDelayedList>
    389a:	df 91       	pop	r29
    389c:	cf 91       	pop	r28
    389e:	08 95       	ret

000038a0 <vTaskPlaceOnEventListRestricted>:
    38a0:	0f 93       	push	r16
    38a2:	1f 93       	push	r17
    38a4:	cf 93       	push	r28
    38a6:	8b 01       	movw	r16, r22
    38a8:	c4 2f       	mov	r28, r20
    38aa:	60 91 4e 0d 	lds	r22, 0x0D4E	; 0x800d4e <pxCurrentTCB>
    38ae:	70 91 4f 0d 	lds	r23, 0x0D4F	; 0x800d4f <pxCurrentTCB+0x1>
    38b2:	64 5f       	subi	r22, 0xF4	; 244
    38b4:	7f 4f       	sbci	r23, 0xFF	; 255
    38b6:	0e 94 54 14 	call	0x28a8	; 0x28a8 <vListInsertEnd>
    38ba:	cc 23       	and	r28, r28
    38bc:	11 f0       	breq	.+4      	; 0x38c2 <vTaskPlaceOnEventListRestricted+0x22>
    38be:	0f ef       	ldi	r16, 0xFF	; 255
    38c0:	1f ef       	ldi	r17, 0xFF	; 255
    38c2:	6c 2f       	mov	r22, r28
    38c4:	c8 01       	movw	r24, r16
    38c6:	8c dc       	rcall	.-1768   	; 0x31e0 <prvAddCurrentTaskToDelayedList>
    38c8:	cf 91       	pop	r28
    38ca:	1f 91       	pop	r17
    38cc:	0f 91       	pop	r16
    38ce:	08 95       	ret

000038d0 <xTaskRemoveFromEventList>:
    38d0:	0f 93       	push	r16
    38d2:	1f 93       	push	r17
    38d4:	cf 93       	push	r28
    38d6:	df 93       	push	r29
    38d8:	dc 01       	movw	r26, r24
    38da:	15 96       	adiw	r26, 0x05	; 5
    38dc:	ed 91       	ld	r30, X+
    38de:	fc 91       	ld	r31, X
    38e0:	16 97       	sbiw	r26, 0x06	; 6
    38e2:	c6 81       	ldd	r28, Z+6	; 0x06
    38e4:	d7 81       	ldd	r29, Z+7	; 0x07
    38e6:	8e 01       	movw	r16, r28
    38e8:	04 5f       	subi	r16, 0xF4	; 244
    38ea:	1f 4f       	sbci	r17, 0xFF	; 255
    38ec:	c8 01       	movw	r24, r16
    38ee:	2e d8       	rcall	.-4004   	; 0x294c <uxListRemove>
    38f0:	80 91 07 0d 	lds	r24, 0x0D07	; 0x800d07 <uxSchedulerSuspended>
    38f4:	81 11       	cpse	r24, r1
    38f6:	1b c0       	rjmp	.+54     	; 0x392e <xTaskRemoveFromEventList+0x5e>
    38f8:	0a 50       	subi	r16, 0x0A	; 10
    38fa:	11 09       	sbc	r17, r1
    38fc:	c8 01       	movw	r24, r16
    38fe:	26 d8       	rcall	.-4020   	; 0x294c <uxListRemove>
    3900:	8e 89       	ldd	r24, Y+22	; 0x16
    3902:	90 91 0f 0d 	lds	r25, 0x0D0F	; 0x800d0f <uxTopReadyPriority>
    3906:	98 17       	cp	r25, r24
    3908:	10 f4       	brcc	.+4      	; 0x390e <xTaskRemoveFromEventList+0x3e>
    390a:	80 93 0f 0d 	sts	0x0D0F, r24	; 0x800d0f <uxTopReadyPriority>
    390e:	90 e0       	ldi	r25, 0x00	; 0
    3910:	9c 01       	movw	r18, r24
    3912:	22 0f       	add	r18, r18
    3914:	33 1f       	adc	r19, r19
    3916:	22 0f       	add	r18, r18
    3918:	33 1f       	adc	r19, r19
    391a:	22 0f       	add	r18, r18
    391c:	33 1f       	adc	r19, r19
    391e:	82 0f       	add	r24, r18
    3920:	93 1f       	adc	r25, r19
    3922:	b8 01       	movw	r22, r16
    3924:	86 5d       	subi	r24, 0xD6	; 214
    3926:	92 4f       	sbci	r25, 0xF2	; 242
    3928:	0e 94 54 14 	call	0x28a8	; 0x28a8 <vListInsertEnd>
    392c:	05 c0       	rjmp	.+10     	; 0x3938 <xTaskRemoveFromEventList+0x68>
    392e:	b8 01       	movw	r22, r16
    3930:	8d e1       	ldi	r24, 0x1D	; 29
    3932:	9d e0       	ldi	r25, 0x0D	; 13
    3934:	0e 94 54 14 	call	0x28a8	; 0x28a8 <vListInsertEnd>
    3938:	e0 91 4e 0d 	lds	r30, 0x0D4E	; 0x800d4e <pxCurrentTCB>
    393c:	f0 91 4f 0d 	lds	r31, 0x0D4F	; 0x800d4f <pxCurrentTCB+0x1>
    3940:	9e 89       	ldd	r25, Y+22	; 0x16
    3942:	86 89       	ldd	r24, Z+22	; 0x16
    3944:	89 17       	cp	r24, r25
    3946:	20 f4       	brcc	.+8      	; 0x3950 <xTaskRemoveFromEventList+0x80>
    3948:	81 e0       	ldi	r24, 0x01	; 1
    394a:	80 93 0c 0d 	sts	0x0D0C, r24	; 0x800d0c <xYieldPending>
    394e:	01 c0       	rjmp	.+2      	; 0x3952 <xTaskRemoveFromEventList+0x82>
    3950:	80 e0       	ldi	r24, 0x00	; 0
    3952:	df 91       	pop	r29
    3954:	cf 91       	pop	r28
    3956:	1f 91       	pop	r17
    3958:	0f 91       	pop	r16
    395a:	08 95       	ret

0000395c <vTaskInternalSetTimeOutState>:
    395c:	20 91 0b 0d 	lds	r18, 0x0D0B	; 0x800d0b <xNumOfOverflows>
    3960:	fc 01       	movw	r30, r24
    3962:	20 83       	st	Z, r18
    3964:	20 91 10 0d 	lds	r18, 0x0D10	; 0x800d10 <xTickCount>
    3968:	30 91 11 0d 	lds	r19, 0x0D11	; 0x800d11 <xTickCount+0x1>
    396c:	32 83       	std	Z+2, r19	; 0x02
    396e:	21 83       	std	Z+1, r18	; 0x01
    3970:	08 95       	ret

00003972 <xTaskCheckForTimeOut>:
    3972:	0f b6       	in	r0, 0x3f	; 63
    3974:	f8 94       	cli
    3976:	0f 92       	push	r0
    3978:	20 91 10 0d 	lds	r18, 0x0D10	; 0x800d10 <xTickCount>
    397c:	30 91 11 0d 	lds	r19, 0x0D11	; 0x800d11 <xTickCount+0x1>
    3980:	dc 01       	movw	r26, r24
    3982:	11 96       	adiw	r26, 0x01	; 1
    3984:	4d 91       	ld	r20, X+
    3986:	5c 91       	ld	r21, X
    3988:	12 97       	sbiw	r26, 0x02	; 2
    398a:	e0 91 0b 0d 	lds	r30, 0x0D0B	; 0x800d0b <xNumOfOverflows>
    398e:	fc 91       	ld	r31, X
    3990:	fe 17       	cp	r31, r30
    3992:	19 f0       	breq	.+6      	; 0x399a <xTaskCheckForTimeOut+0x28>
    3994:	24 17       	cp	r18, r20
    3996:	35 07       	cpc	r19, r21
    3998:	98 f4       	brcc	.+38     	; 0x39c0 <xTaskCheckForTimeOut+0x4e>
    399a:	24 1b       	sub	r18, r20
    399c:	35 0b       	sbc	r19, r21
    399e:	fb 01       	movw	r30, r22
    39a0:	40 81       	ld	r20, Z
    39a2:	51 81       	ldd	r21, Z+1	; 0x01
    39a4:	24 17       	cp	r18, r20
    39a6:	35 07       	cpc	r19, r21
    39a8:	38 f4       	brcc	.+14     	; 0x39b8 <xTaskCheckForTimeOut+0x46>
    39aa:	42 1b       	sub	r20, r18
    39ac:	53 0b       	sbc	r21, r19
    39ae:	51 83       	std	Z+1, r21	; 0x01
    39b0:	40 83       	st	Z, r20
    39b2:	d4 df       	rcall	.-88     	; 0x395c <vTaskInternalSetTimeOutState>
    39b4:	80 e0       	ldi	r24, 0x00	; 0
    39b6:	05 c0       	rjmp	.+10     	; 0x39c2 <xTaskCheckForTimeOut+0x50>
    39b8:	11 82       	std	Z+1, r1	; 0x01
    39ba:	10 82       	st	Z, r1
    39bc:	81 e0       	ldi	r24, 0x01	; 1
    39be:	01 c0       	rjmp	.+2      	; 0x39c2 <xTaskCheckForTimeOut+0x50>
    39c0:	81 e0       	ldi	r24, 0x01	; 1
    39c2:	0f 90       	pop	r0
    39c4:	0f be       	out	0x3f, r0	; 63
    39c6:	08 95       	ret

000039c8 <vTaskMissedYield>:
    39c8:	81 e0       	ldi	r24, 0x01	; 1
    39ca:	80 93 0c 0d 	sts	0x0D0C, r24	; 0x800d0c <xYieldPending>
    39ce:	08 95       	ret

000039d0 <xTaskGetSchedulerState>:
    39d0:	80 91 0e 0d 	lds	r24, 0x0D0E	; 0x800d0e <xSchedulerRunning>
    39d4:	88 23       	and	r24, r24
    39d6:	31 f0       	breq	.+12     	; 0x39e4 <xTaskGetSchedulerState+0x14>
    39d8:	80 91 07 0d 	lds	r24, 0x0D07	; 0x800d07 <uxSchedulerSuspended>
    39dc:	88 23       	and	r24, r24
    39de:	21 f0       	breq	.+8      	; 0x39e8 <xTaskGetSchedulerState+0x18>
    39e0:	80 e0       	ldi	r24, 0x00	; 0
    39e2:	08 95       	ret
    39e4:	81 e0       	ldi	r24, 0x01	; 1
    39e6:	08 95       	ret
    39e8:	82 e0       	ldi	r24, 0x02	; 2
    39ea:	08 95       	ret

000039ec <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
    39ec:	0f 93       	push	r16
    39ee:	1f 93       	push	r17
    39f0:	cf 93       	push	r28
    39f2:	df 93       	push	r29
    39f4:	fc 01       	movw	r30, r24
    TCB_t * const pxTCB = pxMutexHolder;
    BaseType_t xReturn = pdFALSE;

        if( pxMutexHolder != NULL )
    39f6:	89 2b       	or	r24, r25
    39f8:	79 f1       	breq	.+94     	; 0x3a58 <xTaskPriorityDisinherit+0x6c>
            If the mutex is held by a task then it cannot be given from an
            interrupt, and if a mutex is given by the holding task then it must
            be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
            configASSERT( pxTCB->uxMutexesHeld );
            ( pxTCB->uxMutexesHeld )--;
    39fa:	82 a1       	ldd	r24, Z+34	; 0x22
    39fc:	81 50       	subi	r24, 0x01	; 1
    39fe:	82 a3       	std	Z+34, r24	; 0x22

            /* Has the holder of the mutex inherited the priority of another
            task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    3a00:	26 89       	ldd	r18, Z+22	; 0x16
    3a02:	91 a1       	ldd	r25, Z+33	; 0x21
    3a04:	29 17       	cp	r18, r25
    3a06:	51 f1       	breq	.+84     	; 0x3a5c <xTaskPriorityDisinherit+0x70>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
    3a08:	81 11       	cpse	r24, r1
    3a0a:	2a c0       	rjmp	.+84     	; 0x3a60 <xTaskPriorityDisinherit+0x74>
    3a0c:	ef 01       	movw	r28, r30
                    /* A task can only have an inherited priority if it holds
                    the mutex.  If the mutex is held by a task then it cannot be
                    given from an interrupt, and if a mutex is given by the
                    holding task then it must be the running state task.  Remove
                    the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    3a0e:	8f 01       	movw	r16, r30
    3a10:	0e 5f       	subi	r16, 0xFE	; 254
    3a12:	1f 4f       	sbci	r17, 0xFF	; 255
    3a14:	c8 01       	movw	r24, r16
    3a16:	0e 94 a6 14 	call	0x294c	; 0x294c <uxListRemove>
                    }

                    /* Disinherit the priority before adding the task into the
                    new    ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
    3a1a:	89 a1       	ldd	r24, Y+33	; 0x21
    3a1c:	8e 8b       	std	Y+22, r24	; 0x16

                    /* Reset the event list item value.  It cannot be in use for
                    any other purpose if this task is running, and it must be
                    running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    3a1e:	24 e0       	ldi	r18, 0x04	; 4
    3a20:	30 e0       	ldi	r19, 0x00	; 0
    3a22:	28 1b       	sub	r18, r24
    3a24:	31 09       	sbc	r19, r1
    3a26:	3d 87       	std	Y+13, r19	; 0x0d
    3a28:	2c 87       	std	Y+12, r18	; 0x0c
                    prvAddTaskToReadyList( pxTCB );
    3a2a:	90 91 0f 0d 	lds	r25, 0x0D0F	; 0x800d0f <uxTopReadyPriority>
    3a2e:	98 17       	cp	r25, r24
    3a30:	10 f4       	brcc	.+4      	; 0x3a36 <xTaskPriorityDisinherit+0x4a>
    3a32:	80 93 0f 0d 	sts	0x0D0F, r24	; 0x800d0f <uxTopReadyPriority>
    3a36:	90 e0       	ldi	r25, 0x00	; 0
    3a38:	9c 01       	movw	r18, r24
    3a3a:	22 0f       	add	r18, r18
    3a3c:	33 1f       	adc	r19, r19
    3a3e:	22 0f       	add	r18, r18
    3a40:	33 1f       	adc	r19, r19
    3a42:	22 0f       	add	r18, r18
    3a44:	33 1f       	adc	r19, r19
    3a46:	82 0f       	add	r24, r18
    3a48:	93 1f       	adc	r25, r19
    3a4a:	b8 01       	movw	r22, r16
    3a4c:	86 5d       	subi	r24, 0xD6	; 214
    3a4e:	92 4f       	sbci	r25, 0xF2	; 242
    3a50:	0e 94 54 14 	call	0x28a8	; 0x28a8 <vListInsertEnd>
                    in an order different to that in which they were taken.
                    If a context switch did not occur when the first mutex was
                    returned, even if a task was waiting on it, then a context
                    switch should occur when the last mutex is returned whether
                    a task is waiting on it or not. */
                    xReturn = pdTRUE;
    3a54:	81 e0       	ldi	r24, 0x01	; 1
    3a56:	05 c0       	rjmp	.+10     	; 0x3a62 <xTaskPriorityDisinherit+0x76>
#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
    TCB_t * const pxTCB = pxMutexHolder;
    BaseType_t xReturn = pdFALSE;
    3a58:	80 e0       	ldi	r24, 0x00	; 0
    3a5a:	03 c0       	rjmp	.+6      	; 0x3a62 <xTaskPriorityDisinherit+0x76>
    3a5c:	80 e0       	ldi	r24, 0x00	; 0
    3a5e:	01 c0       	rjmp	.+2      	; 0x3a62 <xTaskPriorityDisinherit+0x76>
    3a60:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    3a62:	df 91       	pop	r29
    3a64:	cf 91       	pop	r28
    3a66:	1f 91       	pop	r17
    3a68:	0f 91       	pop	r16
    3a6a:	08 95       	ret

00003a6c <prvInsertTimerInActiveList>:
            }
            #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
        }

        return pxNewTimer;
    }
    3a6c:	fc 01       	movw	r30, r24
    3a6e:	73 83       	std	Z+3, r23	; 0x03
    3a70:	62 83       	std	Z+2, r22	; 0x02
    3a72:	91 87       	std	Z+9, r25	; 0x09
    3a74:	80 87       	std	Z+8, r24	; 0x08
    3a76:	46 17       	cp	r20, r22
    3a78:	57 07       	cpc	r21, r23
    3a7a:	90 f0       	brcs	.+36     	; 0x3aa0 <prvInsertTimerInActiveList+0x34>
    3a7c:	42 1b       	sub	r20, r18
    3a7e:	53 0b       	sbc	r21, r19
    3a80:	84 85       	ldd	r24, Z+12	; 0x0c
    3a82:	95 85       	ldd	r25, Z+13	; 0x0d
    3a84:	48 17       	cp	r20, r24
    3a86:	59 07       	cpc	r21, r25
    3a88:	e0 f4       	brcc	.+56     	; 0x3ac2 <prvInsertTimerInActiveList+0x56>
    3a8a:	bf 01       	movw	r22, r30
    3a8c:	6e 5f       	subi	r22, 0xFE	; 254
    3a8e:	7f 4f       	sbci	r23, 0xFF	; 255
    3a90:	80 91 b9 0d 	lds	r24, 0x0DB9	; 0x800db9 <pxOverflowTimerList>
    3a94:	90 91 ba 0d 	lds	r25, 0x0DBA	; 0x800dba <pxOverflowTimerList+0x1>
    3a98:	0e 94 75 14 	call	0x28ea	; 0x28ea <vListInsert>
    3a9c:	80 e0       	ldi	r24, 0x00	; 0
    3a9e:	08 95       	ret
    3aa0:	42 17       	cp	r20, r18
    3aa2:	53 07       	cpc	r21, r19
    3aa4:	18 f4       	brcc	.+6      	; 0x3aac <prvInsertTimerInActiveList+0x40>
    3aa6:	62 17       	cp	r22, r18
    3aa8:	73 07       	cpc	r23, r19
    3aaa:	68 f4       	brcc	.+26     	; 0x3ac6 <prvInsertTimerInActiveList+0x5a>
    3aac:	bf 01       	movw	r22, r30
    3aae:	6e 5f       	subi	r22, 0xFE	; 254
    3ab0:	7f 4f       	sbci	r23, 0xFF	; 255
    3ab2:	80 91 bb 0d 	lds	r24, 0x0DBB	; 0x800dbb <pxCurrentTimerList>
    3ab6:	90 91 bc 0d 	lds	r25, 0x0DBC	; 0x800dbc <pxCurrentTimerList+0x1>
    3aba:	0e 94 75 14 	call	0x28ea	; 0x28ea <vListInsert>
    3abe:	80 e0       	ldi	r24, 0x00	; 0
    3ac0:	08 95       	ret
    3ac2:	81 e0       	ldi	r24, 0x01	; 1
    3ac4:	08 95       	ret
    3ac6:	81 e0       	ldi	r24, 0x01	; 1
    3ac8:	08 95       	ret

00003aca <prvCheckForValidListAndQueue>:
    3aca:	0f 93       	push	r16
    3acc:	0f b6       	in	r0, 0x3f	; 63
    3ace:	f8 94       	cli
    3ad0:	0f 92       	push	r0
    3ad2:	80 91 b7 0d 	lds	r24, 0x0DB7	; 0x800db7 <xTimerQueue>
    3ad6:	90 91 b8 0d 	lds	r25, 0x0DB8	; 0x800db8 <xTimerQueue+0x1>
    3ada:	89 2b       	or	r24, r25
    3adc:	01 f5       	brne	.+64     	; 0x3b1e <prvCheckForValidListAndQueue+0x54>
    3ade:	8a ea       	ldi	r24, 0xAA	; 170
    3ae0:	9d e0       	ldi	r25, 0x0D	; 13
    3ae2:	0e 94 42 14 	call	0x2884	; 0x2884 <vListInitialise>
    3ae6:	81 ea       	ldi	r24, 0xA1	; 161
    3ae8:	9d e0       	ldi	r25, 0x0D	; 13
    3aea:	0e 94 42 14 	call	0x2884	; 0x2884 <vListInitialise>
    3aee:	8a ea       	ldi	r24, 0xAA	; 170
    3af0:	9d e0       	ldi	r25, 0x0D	; 13
    3af2:	90 93 bc 0d 	sts	0x0DBC, r25	; 0x800dbc <pxCurrentTimerList+0x1>
    3af6:	80 93 bb 0d 	sts	0x0DBB, r24	; 0x800dbb <pxCurrentTimerList>
    3afa:	81 ea       	ldi	r24, 0xA1	; 161
    3afc:	9d e0       	ldi	r25, 0x0D	; 13
    3afe:	90 93 ba 0d 	sts	0x0DBA, r25	; 0x800dba <pxOverflowTimerList+0x1>
    3b02:	80 93 b9 0d 	sts	0x0DB9, r24	; 0x800db9 <pxOverflowTimerList>
    3b06:	00 e0       	ldi	r16, 0x00	; 0
    3b08:	20 e5       	ldi	r18, 0x50	; 80
    3b0a:	3d e0       	ldi	r19, 0x0D	; 13
    3b0c:	4f e6       	ldi	r20, 0x6F	; 111
    3b0e:	5d e0       	ldi	r21, 0x0D	; 13
    3b10:	65 e0       	ldi	r22, 0x05	; 5
    3b12:	8a e0       	ldi	r24, 0x0A	; 10
    3b14:	c3 d9       	rcall	.-3194   	; 0x2e9c <xQueueGenericCreateStatic>
    3b16:	90 93 b8 0d 	sts	0x0DB8, r25	; 0x800db8 <xTimerQueue+0x1>
    3b1a:	80 93 b7 0d 	sts	0x0DB7, r24	; 0x800db7 <xTimerQueue>
    3b1e:	0f 90       	pop	r0
    3b20:	0f be       	out	0x3f, r0	; 63
    3b22:	0f 91       	pop	r16
    3b24:	08 95       	ret

00003b26 <xTimerCreateTimerTask>:
    3b26:	cf 92       	push	r12
    3b28:	df 92       	push	r13
    3b2a:	ef 92       	push	r14
    3b2c:	ff 92       	push	r15
    3b2e:	0f 93       	push	r16
    3b30:	cf 93       	push	r28
    3b32:	df 93       	push	r29
    3b34:	00 d0       	rcall	.+0      	; 0x3b36 <xTimerCreateTimerTask+0x10>
    3b36:	00 d0       	rcall	.+0      	; 0x3b38 <xTimerCreateTimerTask+0x12>
    3b38:	cd b7       	in	r28, 0x3d	; 61
    3b3a:	de b7       	in	r29, 0x3e	; 62
    3b3c:	c6 df       	rcall	.-116    	; 0x3aca <prvCheckForValidListAndQueue>
    3b3e:	80 91 b7 0d 	lds	r24, 0x0DB7	; 0x800db7 <xTimerQueue>
    3b42:	90 91 b8 0d 	lds	r25, 0x0DB8	; 0x800db8 <xTimerQueue+0x1>
    3b46:	89 2b       	or	r24, r25
    3b48:	31 f1       	breq	.+76     	; 0x3b96 <xTimerCreateTimerTask+0x70>
    3b4a:	1e 82       	std	Y+6, r1	; 0x06
    3b4c:	1d 82       	std	Y+5, r1	; 0x05
    3b4e:	1c 82       	std	Y+4, r1	; 0x04
    3b50:	1b 82       	std	Y+3, r1	; 0x03
    3b52:	ae 01       	movw	r20, r28
    3b54:	4f 5f       	subi	r20, 0xFF	; 255
    3b56:	5f 4f       	sbci	r21, 0xFF	; 255
    3b58:	be 01       	movw	r22, r28
    3b5a:	6d 5f       	subi	r22, 0xFD	; 253
    3b5c:	7f 4f       	sbci	r23, 0xFF	; 255
    3b5e:	ce 01       	movw	r24, r28
    3b60:	05 96       	adiw	r24, 0x05	; 5
    3b62:	0e 94 32 14 	call	0x2864	; 0x2864 <vApplicationGetTimerTaskMemory>
    3b66:	cd 80       	ldd	r12, Y+5	; 0x05
    3b68:	de 80       	ldd	r13, Y+6	; 0x06
    3b6a:	eb 80       	ldd	r14, Y+3	; 0x03
    3b6c:	fc 80       	ldd	r15, Y+4	; 0x04
    3b6e:	49 81       	ldd	r20, Y+1	; 0x01
    3b70:	5a 81       	ldd	r21, Y+2	; 0x02
    3b72:	03 e0       	ldi	r16, 0x03	; 3
    3b74:	20 e0       	ldi	r18, 0x00	; 0
    3b76:	30 e0       	ldi	r19, 0x00	; 0
    3b78:	65 ed       	ldi	r22, 0xD5	; 213
    3b7a:	72 e0       	ldi	r23, 0x02	; 2
    3b7c:	8c e8       	ldi	r24, 0x8C	; 140
    3b7e:	9e e1       	ldi	r25, 0x1E	; 30
    3b80:	70 db       	rcall	.-2336   	; 0x3262 <xTaskCreateStatic>
    3b82:	9c 01       	movw	r18, r24
    3b84:	90 93 b6 0d 	sts	0x0DB6, r25	; 0x800db6 <xTimerTaskHandle+0x1>
    3b88:	80 93 b5 0d 	sts	0x0DB5, r24	; 0x800db5 <xTimerTaskHandle>
    3b8c:	81 e0       	ldi	r24, 0x01	; 1
    3b8e:	23 2b       	or	r18, r19
    3b90:	19 f4       	brne	.+6      	; 0x3b98 <xTimerCreateTimerTask+0x72>
    3b92:	80 e0       	ldi	r24, 0x00	; 0
    3b94:	01 c0       	rjmp	.+2      	; 0x3b98 <xTimerCreateTimerTask+0x72>
    3b96:	80 e0       	ldi	r24, 0x00	; 0
    3b98:	26 96       	adiw	r28, 0x06	; 6
    3b9a:	0f b6       	in	r0, 0x3f	; 63
    3b9c:	f8 94       	cli
    3b9e:	de bf       	out	0x3e, r29	; 62
    3ba0:	0f be       	out	0x3f, r0	; 63
    3ba2:	cd bf       	out	0x3d, r28	; 61
    3ba4:	df 91       	pop	r29
    3ba6:	cf 91       	pop	r28
    3ba8:	0f 91       	pop	r16
    3baa:	ff 90       	pop	r15
    3bac:	ef 90       	pop	r14
    3bae:	df 90       	pop	r13
    3bb0:	cf 90       	pop	r12
    3bb2:	08 95       	ret

00003bb4 <xTimerGenericCommand>:
    }
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
    3bb4:	0f 93       	push	r16
    3bb6:	1f 93       	push	r17
    3bb8:	cf 93       	push	r28
    3bba:	df 93       	push	r29
    3bbc:	00 d0       	rcall	.+0      	; 0x3bbe <xTimerGenericCommand+0xa>
    3bbe:	1f 92       	push	r1
    3bc0:	1f 92       	push	r1
    3bc2:	cd b7       	in	r28, 0x3d	; 61
    3bc4:	de b7       	in	r29, 0x3e	; 62

    configASSERT( xTimer );

    /* Send a message to the timer service task to perform a particular action
    on a particular timer definition. */
    if( xTimerQueue != NULL )
    3bc6:	e0 91 b7 0d 	lds	r30, 0x0DB7	; 0x800db7 <xTimerQueue>
    3bca:	f0 91 b8 0d 	lds	r31, 0x0DB8	; 0x800db8 <xTimerQueue+0x1>
    3bce:	30 97       	sbiw	r30, 0x00	; 0
    3bd0:	51 f1       	breq	.+84     	; 0x3c26 <xTimerGenericCommand+0x72>
    3bd2:	d9 01       	movw	r26, r18
    {
        /* Send a command to the timer service task to start the xTimer timer. */
        xMessage.xMessageID = xCommandID;
    3bd4:	69 83       	std	Y+1, r22	; 0x01
        xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    3bd6:	5b 83       	std	Y+3, r21	; 0x03
    3bd8:	4a 83       	std	Y+2, r20	; 0x02
        xMessage.u.xTimerParameters.pxTimer = xTimer;
    3bda:	9d 83       	std	Y+5, r25	; 0x05
    3bdc:	8c 83       	std	Y+4, r24	; 0x04

        if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    3bde:	66 30       	cpi	r22, 0x06	; 6
    3be0:	d4 f4       	brge	.+52     	; 0x3c16 <xTimerGenericCommand+0x62>
        {
            if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    3be2:	f6 de       	rcall	.-532    	; 0x39d0 <xTaskGetSchedulerState>
    3be4:	82 30       	cpi	r24, 0x02	; 2
    3be6:	59 f4       	brne	.+22     	; 0x3bfe <xTimerGenericCommand+0x4a>
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    3be8:	20 e0       	ldi	r18, 0x00	; 0
    3bea:	a8 01       	movw	r20, r16
    3bec:	be 01       	movw	r22, r28
    3bee:	6f 5f       	subi	r22, 0xFF	; 255
    3bf0:	7f 4f       	sbci	r23, 0xFF	; 255
    3bf2:	80 91 b7 0d 	lds	r24, 0x0DB7	; 0x800db7 <xTimerQueue>
    3bf6:	90 91 b8 0d 	lds	r25, 0x0DB8	; 0x800db8 <xTimerQueue+0x1>
    3bfa:	65 d9       	rcall	.-3382   	; 0x2ec6 <xQueueGenericSend>
    3bfc:	15 c0       	rjmp	.+42     	; 0x3c28 <xTimerGenericCommand+0x74>
            }
            else
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    3bfe:	20 e0       	ldi	r18, 0x00	; 0
    3c00:	40 e0       	ldi	r20, 0x00	; 0
    3c02:	50 e0       	ldi	r21, 0x00	; 0
    3c04:	be 01       	movw	r22, r28
    3c06:	6f 5f       	subi	r22, 0xFF	; 255
    3c08:	7f 4f       	sbci	r23, 0xFF	; 255
    3c0a:	80 91 b7 0d 	lds	r24, 0x0DB7	; 0x800db7 <xTimerQueue>
    3c0e:	90 91 b8 0d 	lds	r25, 0x0DB8	; 0x800db8 <xTimerQueue+0x1>
    3c12:	59 d9       	rcall	.-3406   	; 0x2ec6 <xQueueGenericSend>
    3c14:	09 c0       	rjmp	.+18     	; 0x3c28 <xTimerGenericCommand+0x74>
            }
        }
        else
        {
            xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    3c16:	20 e0       	ldi	r18, 0x00	; 0
    3c18:	ad 01       	movw	r20, r26
    3c1a:	be 01       	movw	r22, r28
    3c1c:	6f 5f       	subi	r22, 0xFF	; 255
    3c1e:	7f 4f       	sbci	r23, 0xFF	; 255
    3c20:	cf 01       	movw	r24, r30
    3c22:	e3 d9       	rcall	.-3130   	; 0x2fea <xQueueGenericSendFromISR>
    3c24:	01 c0       	rjmp	.+2      	; 0x3c28 <xTimerGenericCommand+0x74>
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
    3c26:	80 e0       	ldi	r24, 0x00	; 0
    {
        mtCOVERAGE_TEST_MARKER();
    }

    return xReturn;
}
    3c28:	0f 90       	pop	r0
    3c2a:	0f 90       	pop	r0
    3c2c:	0f 90       	pop	r0
    3c2e:	0f 90       	pop	r0
    3c30:	0f 90       	pop	r0
    3c32:	df 91       	pop	r29
    3c34:	cf 91       	pop	r28
    3c36:	1f 91       	pop	r17
    3c38:	0f 91       	pop	r16
    3c3a:	08 95       	ret

00003c3c <prvSampleTimeNow>:
    return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
    3c3c:	af 92       	push	r10
    3c3e:	bf 92       	push	r11
    3c40:	cf 92       	push	r12
    3c42:	df 92       	push	r13
    3c44:	ef 92       	push	r14
    3c46:	ff 92       	push	r15
    3c48:	0f 93       	push	r16
    3c4a:	1f 93       	push	r17
    3c4c:	cf 93       	push	r28
    3c4e:	df 93       	push	r29
    3c50:	6c 01       	movw	r12, r24
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

    xTimeNow = xTaskGetTickCount();
    3c52:	4c dc       	rcall	.-1896   	; 0x34ec <xTaskGetTickCount>
    3c54:	7c 01       	movw	r14, r24

    if( xTimeNow < xLastTime )
    3c56:	80 91 b3 0d 	lds	r24, 0x0DB3	; 0x800db3 <xLastTime.2391>
    3c5a:	90 91 b4 0d 	lds	r25, 0x0DB4	; 0x800db4 <xLastTime.2391+0x1>
    3c5e:	e8 16       	cp	r14, r24
    3c60:	f9 06       	cpc	r15, r25
    3c62:	08 f0       	brcs	.+2      	; 0x3c66 <prvSampleTimeNow+0x2a>
    3c64:	47 c0       	rjmp	.+142    	; 0x3cf4 <prvSampleTimeNow+0xb8>
    3c66:	2f c0       	rjmp	.+94     	; 0x3cc6 <prvSampleTimeNow+0x8a>
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    {
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    3c68:	05 80       	ldd	r0, Z+5	; 0x05
    3c6a:	f6 81       	ldd	r31, Z+6	; 0x06
    3c6c:	e0 2d       	mov	r30, r0
    3c6e:	a0 80       	ld	r10, Z
    3c70:	b1 80       	ldd	r11, Z+1	; 0x01

        /* Remove the timer from the list. */
        pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    3c72:	c6 81       	ldd	r28, Z+6	; 0x06
    3c74:	d7 81       	ldd	r29, Z+7	; 0x07
        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    3c76:	8e 01       	movw	r16, r28
    3c78:	0e 5f       	subi	r16, 0xFE	; 254
    3c7a:	1f 4f       	sbci	r17, 0xFF	; 255
    3c7c:	c8 01       	movw	r24, r16
    3c7e:	0e 94 a6 14 	call	0x294c	; 0x294c <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* Execute its callback, then send a command to restart the timer if
        it is an auto-reload timer.  It cannot be restarted here as the lists
        have not yet been switched. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    3c82:	e9 89       	ldd	r30, Y+17	; 0x11
    3c84:	fa 89       	ldd	r31, Y+18	; 0x12
    3c86:	ce 01       	movw	r24, r28
    3c88:	19 95       	eicall

        if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    3c8a:	8e 85       	ldd	r24, Y+14	; 0x0e
    3c8c:	81 30       	cpi	r24, 0x01	; 1
    3c8e:	d9 f4       	brne	.+54     	; 0x3cc6 <prvSampleTimeNow+0x8a>
            the timer going into the same timer list then it has already expired
            and the timer should be re-inserted into the current list so it is
            processed again within this loop.  Otherwise a command should be sent
            to restart the timer to ensure it is only inserted into a list after
            the lists have been swapped. */
            xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    3c90:	8c 85       	ldd	r24, Y+12	; 0x0c
    3c92:	9d 85       	ldd	r25, Y+13	; 0x0d
    3c94:	8a 0d       	add	r24, r10
    3c96:	9b 1d       	adc	r25, r11
            if( xReloadTime > xNextExpireTime )
    3c98:	a8 16       	cp	r10, r24
    3c9a:	b9 06       	cpc	r11, r25
    3c9c:	60 f4       	brcc	.+24     	; 0x3cb6 <prvSampleTimeNow+0x7a>
            {
                listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    3c9e:	9b 83       	std	Y+3, r25	; 0x03
    3ca0:	8a 83       	std	Y+2, r24	; 0x02
                listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    3ca2:	d9 87       	std	Y+9, r29	; 0x09
    3ca4:	c8 87       	std	Y+8, r28	; 0x08
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    3ca6:	b8 01       	movw	r22, r16
    3ca8:	80 91 bb 0d 	lds	r24, 0x0DBB	; 0x800dbb <pxCurrentTimerList>
    3cac:	90 91 bc 0d 	lds	r25, 0x0DBC	; 0x800dbc <pxCurrentTimerList+0x1>
    3cb0:	0e 94 75 14 	call	0x28ea	; 0x28ea <vListInsert>
    3cb4:	08 c0       	rjmp	.+16     	; 0x3cc6 <prvSampleTimeNow+0x8a>
            }
            else
            {
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    3cb6:	00 e0       	ldi	r16, 0x00	; 0
    3cb8:	10 e0       	ldi	r17, 0x00	; 0
    3cba:	20 e0       	ldi	r18, 0x00	; 0
    3cbc:	30 e0       	ldi	r19, 0x00	; 0
    3cbe:	a5 01       	movw	r20, r10
    3cc0:	60 e0       	ldi	r22, 0x00	; 0
    3cc2:	ce 01       	movw	r24, r28
    3cc4:	77 df       	rcall	.-274    	; 0x3bb4 <xTimerGenericCommand>

    /* The tick count has overflowed.  The timer lists must be switched.
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    3cc6:	e0 91 bb 0d 	lds	r30, 0x0DBB	; 0x800dbb <pxCurrentTimerList>
    3cca:	f0 91 bc 0d 	lds	r31, 0x0DBC	; 0x800dbc <pxCurrentTimerList+0x1>
    3cce:	80 81       	ld	r24, Z
    3cd0:	81 11       	cpse	r24, r1
    3cd2:	ca cf       	rjmp	.-108    	; 0x3c68 <prvSampleTimeNow+0x2c>
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxTemp = pxCurrentTimerList;
    pxCurrentTimerList = pxOverflowTimerList;
    3cd4:	80 91 b9 0d 	lds	r24, 0x0DB9	; 0x800db9 <pxOverflowTimerList>
    3cd8:	90 91 ba 0d 	lds	r25, 0x0DBA	; 0x800dba <pxOverflowTimerList+0x1>
    3cdc:	90 93 bc 0d 	sts	0x0DBC, r25	; 0x800dbc <pxCurrentTimerList+0x1>
    3ce0:	80 93 bb 0d 	sts	0x0DBB, r24	; 0x800dbb <pxCurrentTimerList>
    pxOverflowTimerList = pxTemp;
    3ce4:	f0 93 ba 0d 	sts	0x0DBA, r31	; 0x800dba <pxOverflowTimerList+0x1>
    3ce8:	e0 93 b9 0d 	sts	0x0DB9, r30	; 0x800db9 <pxOverflowTimerList>
    xTimeNow = xTaskGetTickCount();

    if( xTimeNow < xLastTime )
    {
        prvSwitchTimerLists();
        *pxTimerListsWereSwitched = pdTRUE;
    3cec:	81 e0       	ldi	r24, 0x01	; 1
    3cee:	f6 01       	movw	r30, r12
    3cf0:	80 83       	st	Z, r24
    3cf2:	02 c0       	rjmp	.+4      	; 0x3cf8 <prvSampleTimeNow+0xbc>
    }
    else
    {
        *pxTimerListsWereSwitched = pdFALSE;
    3cf4:	f6 01       	movw	r30, r12
    3cf6:	10 82       	st	Z, r1
    }

    xLastTime = xTimeNow;
    3cf8:	f0 92 b4 0d 	sts	0x0DB4, r15	; 0x800db4 <xLastTime.2391+0x1>
    3cfc:	e0 92 b3 0d 	sts	0x0DB3, r14	; 0x800db3 <xLastTime.2391>

    return xTimeNow;
}
    3d00:	c7 01       	movw	r24, r14
    3d02:	df 91       	pop	r29
    3d04:	cf 91       	pop	r28
    3d06:	1f 91       	pop	r17
    3d08:	0f 91       	pop	r16
    3d0a:	ff 90       	pop	r15
    3d0c:	ef 90       	pop	r14
    3d0e:	df 90       	pop	r13
    3d10:	cf 90       	pop	r12
    3d12:	bf 90       	pop	r11
    3d14:	af 90       	pop	r10
    3d16:	08 95       	ret

00003d18 <prvTimerTask>:
    pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
}
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
    3d18:	cf 93       	push	r28
    3d1a:	df 93       	push	r29
    3d1c:	00 d0       	rcall	.+0      	; 0x3d1e <prvTimerTask+0x6>
    3d1e:	00 d0       	rcall	.+0      	; 0x3d20 <prvTimerTask+0x8>
    3d20:	cd b7       	in	r28, 0x3d	; 61
    3d22:	de b7       	in	r29, 0x3e	; 62
        /* Obtain the time now to make an assessment as to whether the timer
        has expired or not.  If obtaining the time causes the lists to switch
        then don't process this timer as any timers that remained in the list
        when the lists were switched will have been processed within the
        prvSampleTimeNow() function. */
        xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    3d24:	ce 01       	movw	r24, r28
    3d26:	01 96       	adiw	r24, 0x01	; 1
    3d28:	4c 01       	movw	r8, r24
                case when the current timer list is empty. */
                if( xListWasEmpty != pdFALSE )
                {
                    /* The current timer list is empty - is the overflow list
                    also empty? */
                    xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    3d2a:	44 24       	eor	r4, r4
    3d2c:	43 94       	inc	r4
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    }
    else
    {
        /* Ensure the task unblocks when the tick count rolls over. */
        xNextExpireTime = ( TickType_t ) 0U;
    3d2e:	e1 2c       	mov	r14, r1
    3d30:	f1 2c       	mov	r15, r1
                case when the current timer list is empty. */
                if( xListWasEmpty != pdFALSE )
                {
                    /* The current timer list is empty - is the overflow list
                    also empty? */
                    xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    3d32:	51 2c       	mov	r5, r1
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

    while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    3d34:	c8 2e       	mov	r12, r24
    3d36:	d9 2c       	mov	r13, r9
    the timer with the nearest expiry time will expire.  If there are no
    active timers then just set the next expire time to 0.  That will cause
    this task to unblock when the tick count overflows, at which point the
    timer lists will be switched and the next expiry time can be
    re-assessed.  */
    *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    3d38:	e0 91 bb 0d 	lds	r30, 0x0DBB	; 0x800dbb <pxCurrentTimerList>
    3d3c:	f0 91 bc 0d 	lds	r31, 0x0DBC	; 0x800dbc <pxCurrentTimerList+0x1>
    3d40:	80 81       	ld	r24, Z
    if( *pxListWasEmpty == pdFALSE )
    3d42:	88 23       	and	r24, r24
    3d44:	09 f4       	brne	.+2      	; 0x3d48 <prvTimerTask+0x30>
    3d46:	af c0       	rjmp	.+350    	; 0x3ea6 <prvTimerTask+0x18e>
    {
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    3d48:	05 80       	ldd	r0, Z+5	; 0x05
    3d4a:	f6 81       	ldd	r31, Z+6	; 0x06
    3d4c:	e0 2d       	mov	r30, r0
    3d4e:	a0 80       	ld	r10, Z
    3d50:	b1 80       	ldd	r11, Z+1	; 0x01
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

    vTaskSuspendAll();
    3d52:	c6 db       	rcall	.-2164   	; 0x34e0 <vTaskSuspendAll>
        /* Obtain the time now to make an assessment as to whether the timer
        has expired or not.  If obtaining the time causes the lists to switch
        then don't process this timer as any timers that remained in the list
        when the lists were switched will have been processed within the
        prvSampleTimeNow() function. */
        xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    3d54:	c4 01       	movw	r24, r8
    3d56:	72 df       	rcall	.-284    	; 0x3c3c <prvSampleTimeNow>
    3d58:	8c 01       	movw	r16, r24
        if( xTimerListsWereSwitched == pdFALSE )
    3d5a:	89 81       	ldd	r24, Y+1	; 0x01
    3d5c:	81 11       	cpse	r24, r1
    3d5e:	42 c0       	rjmp	.+132    	; 0x3de4 <prvTimerTask+0xcc>
        {
            /* The tick count has not overflowed, has the timer expired? */
            if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    3d60:	0a 15       	cp	r16, r10
    3d62:	1b 05       	cpc	r17, r11
            {
                ( void ) xTaskResumeAll();
    3d64:	80 f1       	brcs	.+96     	; 0x3dc6 <prvTimerTask+0xae>
    3d66:	83 dc       	rcall	.-1786   	; 0x366e <xTaskResumeAll>
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    3d68:	e0 91 bb 0d 	lds	r30, 0x0DBB	; 0x800dbb <pxCurrentTimerList>
    3d6c:	f0 91 bc 0d 	lds	r31, 0x0DBC	; 0x800dbc <pxCurrentTimerList+0x1>
    3d70:	05 80       	ldd	r0, Z+5	; 0x05
    3d72:	f6 81       	ldd	r31, Z+6	; 0x06
    3d74:	e0 2d       	mov	r30, r0
    3d76:	66 80       	ldd	r6, Z+6	; 0x06
    3d78:	77 80       	ldd	r7, Z+7	; 0x07

    /* Remove the timer from the list of active timers.  A check has already
    been performed to ensure the list is not empty. */
    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    3d7a:	c3 01       	movw	r24, r6
    3d7c:	02 96       	adiw	r24, 0x02	; 2
    3d7e:	0e 94 a6 14 	call	0x294c	; 0x294c <uxListRemove>
    traceTIMER_EXPIRED( pxTimer );

    /* If the timer is an auto reload timer then calculate the next
    expiry time and re-insert the timer in the list of active timers. */
    if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    3d82:	d3 01       	movw	r26, r6
    3d84:	1e 96       	adiw	r26, 0x0e	; 14
    3d86:	8c 91       	ld	r24, X
    3d88:	1e 97       	sbiw	r26, 0x0e	; 14
    3d8a:	81 30       	cpi	r24, 0x01	; 1
    3d8c:	a1 f4       	brne	.+40     	; 0x3db6 <prvTimerTask+0x9e>
    {
        /* The timer is inserted into a list using a time relative to anything
        other than the current time.  It will therefore be inserted into the
        correct list relative to the time this task thinks it is now. */
        if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    3d8e:	1c 96       	adiw	r26, 0x0c	; 12
    3d90:	6d 91       	ld	r22, X+
    3d92:	7c 91       	ld	r23, X
    3d94:	1d 97       	sbiw	r26, 0x0d	; 13
    3d96:	6a 0d       	add	r22, r10
    3d98:	7b 1d       	adc	r23, r11
    3d9a:	95 01       	movw	r18, r10
    3d9c:	a8 01       	movw	r20, r16
    3d9e:	c3 01       	movw	r24, r6
    3da0:	65 de       	rcall	.-822    	; 0x3a6c <prvInsertTimerInActiveList>
    3da2:	88 23       	and	r24, r24
    3da4:	41 f0       	breq	.+16     	; 0x3db6 <prvTimerTask+0x9e>
        {
            /* The timer expired before it was added to the active timer
            list.  Reload it now.  */
            xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    3da6:	0e 2d       	mov	r16, r14
    3da8:	1f 2d       	mov	r17, r15
    3daa:	2e 2d       	mov	r18, r14
    3dac:	3f 2d       	mov	r19, r15
    3dae:	a5 01       	movw	r20, r10
    3db0:	65 2d       	mov	r22, r5
    3db2:	c3 01       	movw	r24, r6
    3db4:	ff de       	rcall	.-514    	; 0x3bb4 <xTimerGenericCommand>
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* Call the timer callback. */
    pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    3db6:	d3 01       	movw	r26, r6
    3db8:	51 96       	adiw	r26, 0x11	; 17
    3dba:	ed 91       	ld	r30, X+
    3dbc:	fc 91       	ld	r31, X
    3dbe:	52 97       	sbiw	r26, 0x12	; 18
    3dc0:	c3 01       	movw	r24, r6
    3dc2:	19 95       	eicall
    3dc4:	64 c0       	rjmp	.+200    	; 0x3e8e <prvTimerTask+0x176>
        prvSampleTimeNow() function. */
        xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
        if( xTimerListsWereSwitched == pdFALSE )
        {
            /* The tick count has not overflowed, has the timer expired? */
            if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    3dc6:	45 2d       	mov	r20, r5
                    /* The current timer list is empty - is the overflow list
                    also empty? */
                    xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
                }

                vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    3dc8:	b5 01       	movw	r22, r10
    3dca:	60 1b       	sub	r22, r16
    3dcc:	71 0b       	sbc	r23, r17
    3dce:	80 91 b7 0d 	lds	r24, 0x0DB7	; 0x800db7 <xTimerQueue>
    3dd2:	90 91 b8 0d 	lds	r25, 0x0DB8	; 0x800db8 <xTimerQueue+0x1>

                if( xTaskResumeAll() == pdFALSE )
    3dd6:	ca d9       	rcall	.-3180   	; 0x316c <vQueueWaitForMessageRestricted>
    3dd8:	4a dc       	rcall	.-1900   	; 0x366e <xTaskResumeAll>
    3dda:	81 11       	cpse	r24, r1
                {
                    /* Yield to wait for either a command to arrive, or the
                    block time to expire.  If a command arrived between the
                    critical section being exited and this yield then the yield
                    will not cause the task to block. */
                    portYIELD_WITHIN_API();
    3ddc:	58 c0       	rjmp	.+176    	; 0x3e8e <prvTimerTask+0x176>
    3dde:	0e 94 7b 15 	call	0x2af6	; 0x2af6 <vPortYield>
                }
            }
        }
        else
        {
            ( void ) xTaskResumeAll();
    3de2:	55 c0       	rjmp	.+170    	; 0x3e8e <prvTimerTask+0x176>
    3de4:	44 dc       	rcall	.-1912   	; 0x366e <xTaskResumeAll>
    3de6:	53 c0       	rjmp	.+166    	; 0x3e8e <prvTimerTask+0x176>
        }
        #endif /* INCLUDE_xTimerPendFunctionCall */

        /* Commands that are positive are timer commands rather than pended
        function calls. */
        if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    3de8:	89 81       	ldd	r24, Y+1	; 0x01
    3dea:	88 23       	and	r24, r24
    3dec:	0c f4       	brge	.+2      	; 0x3df0 <prvTimerTask+0xd8>
    3dee:	4f c0       	rjmp	.+158    	; 0x3e8e <prvTimerTask+0x176>
        {
            /* The messages uses the xTimerParameters member to work on a
            software timer. */
            pxTimer = xMessage.u.xTimerParameters.pxTimer;
    3df0:	ac 80       	ldd	r10, Y+4	; 0x04
    3df2:	bd 80       	ldd	r11, Y+5	; 0x05

        if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    3df4:	f5 01       	movw	r30, r10
    3df6:	82 85       	ldd	r24, Z+10	; 0x0a
    3df8:	93 85       	ldd	r25, Z+11	; 0x0b
    3dfa:	89 2b       	or	r24, r25
            {
                /* The timer is in a list, remove it. */
                ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    3dfc:	21 f0       	breq	.+8      	; 0x3e06 <prvTimerTask+0xee>
    3dfe:	c5 01       	movw	r24, r10
    3e00:	02 96       	adiw	r24, 0x02	; 2
    3e02:	0e 94 a6 14 	call	0x294c	; 0x294c <uxListRemove>
            it must be present in the function call.  prvSampleTimeNow() must be
            called after the message is received from xTimerQueue so there is no
            possibility of a higher priority task adding a message to the message
            queue with a time that is ahead of the timer daemon task (because it
            pre-empted the timer daemon task after the xTimeNow value was set). */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    3e06:	ce 01       	movw	r24, r28
    3e08:	06 96       	adiw	r24, 0x06	; 6
    3e0a:	18 df       	rcall	.-464    	; 0x3c3c <prvSampleTimeNow>
    3e0c:	ac 01       	movw	r20, r24

            switch( xMessage.xMessageID )
    3e0e:	99 81       	ldd	r25, Y+1	; 0x01
    3e10:	94 30       	cpi	r25, 0x04	; 4
    3e12:	89 f1       	breq	.+98     	; 0x3e76 <prvTimerTask+0x15e>
    3e14:	1c f4       	brge	.+6      	; 0x3e1c <prvTimerTask+0x104>
    3e16:	93 30       	cpi	r25, 0x03	; 3
    3e18:	d0 f5       	brcc	.+116    	; 0x3e8e <prvTimerTask+0x176>
    3e1a:	07 c0       	rjmp	.+14     	; 0x3e2a <prvTimerTask+0x112>
    3e1c:	96 30       	cpi	r25, 0x06	; 6
    3e1e:	bc f1       	brlt	.+110    	; 0x3e8e <prvTimerTask+0x176>
    3e20:	98 30       	cpi	r25, 0x08	; 8
    3e22:	1c f0       	brlt	.+6      	; 0x3e2a <prvTimerTask+0x112>
    3e24:	99 30       	cpi	r25, 0x09	; 9
    3e26:	39 f1       	breq	.+78     	; 0x3e76 <prvTimerTask+0x15e>
    3e28:	32 c0       	rjmp	.+100    	; 0x3e8e <prvTimerTask+0x176>
                case tmrCOMMAND_START_FROM_ISR :
                case tmrCOMMAND_RESET :
                case tmrCOMMAND_RESET_FROM_ISR :
                case tmrCOMMAND_START_DONT_TRACE :
                    /* Start or restart a timer. */
                    if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    3e2a:	2a 81       	ldd	r18, Y+2	; 0x02
    3e2c:	3b 81       	ldd	r19, Y+3	; 0x03
    3e2e:	d5 01       	movw	r26, r10
    3e30:	1c 96       	adiw	r26, 0x0c	; 12
    3e32:	6d 91       	ld	r22, X+
    3e34:	7c 91       	ld	r23, X
    3e36:	1d 97       	sbiw	r26, 0x0d	; 13
    3e38:	62 0f       	add	r22, r18
    3e3a:	73 1f       	adc	r23, r19
    3e3c:	c5 01       	movw	r24, r10
    3e3e:	16 de       	rcall	.-980    	; 0x3a6c <prvInsertTimerInActiveList>
    3e40:	88 23       	and	r24, r24
    3e42:	29 f1       	breq	.+74     	; 0x3e8e <prvTimerTask+0x176>
                    {
                        /* The timer expired before it was added to the active
                        timer list.  Process it now. */
                        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    3e44:	d5 01       	movw	r26, r10
    3e46:	51 96       	adiw	r26, 0x11	; 17
    3e48:	ed 91       	ld	r30, X+
    3e4a:	fc 91       	ld	r31, X
    3e4c:	52 97       	sbiw	r26, 0x12	; 18
    3e4e:	c5 01       	movw	r24, r10
    3e50:	19 95       	eicall
                        traceTIMER_EXPIRED( pxTimer );

                        if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    3e52:	f5 01       	movw	r30, r10
    3e54:	86 85       	ldd	r24, Z+14	; 0x0e
    3e56:	81 30       	cpi	r24, 0x01	; 1
    3e58:	d1 f4       	brne	.+52     	; 0x3e8e <prvTimerTask+0x176>
                        {
                            xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    3e5a:	4a 81       	ldd	r20, Y+2	; 0x02
    3e5c:	5b 81       	ldd	r21, Y+3	; 0x03
    3e5e:	84 85       	ldd	r24, Z+12	; 0x0c
    3e60:	95 85       	ldd	r25, Z+13	; 0x0d
    3e62:	48 0f       	add	r20, r24
    3e64:	59 1f       	adc	r21, r25
    3e66:	0e 2d       	mov	r16, r14
    3e68:	1f 2d       	mov	r17, r15
    3e6a:	2e 2d       	mov	r18, r14
    3e6c:	3f 2d       	mov	r19, r15
    3e6e:	65 2d       	mov	r22, r5
    3e70:	c5 01       	movw	r24, r10
    3e72:	a0 de       	rcall	.-704    	; 0x3bb4 <xTimerGenericCommand>
    3e74:	0c c0       	rjmp	.+24     	; 0x3e8e <prvTimerTask+0x176>
                    There is nothing to do here. */
                    break;

                case tmrCOMMAND_CHANGE_PERIOD :
                case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
                    pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    3e76:	6a 81       	ldd	r22, Y+2	; 0x02
    3e78:	7b 81       	ldd	r23, Y+3	; 0x03
    3e7a:	d5 01       	movw	r26, r10
    3e7c:	1d 96       	adiw	r26, 0x0d	; 13
    3e7e:	7c 93       	st	X, r23
    3e80:	6e 93       	st	-X, r22
                    be longer or shorter than the old one.  The command time is
                    therefore set to the current time, and as the period cannot
                    be zero the next expiry time can only be in the future,
                    meaning (unlike for the xTimerStart() case above) there is
                    no fail case that needs to be handled here. */
                    ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    3e82:	1c 97       	sbiw	r26, 0x0c	; 12
    3e84:	64 0f       	add	r22, r20
    3e86:	75 1f       	adc	r23, r21
    3e88:	9a 01       	movw	r18, r20
    3e8a:	c5 01       	movw	r24, r10
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

    while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    3e8c:	ef dd       	rcall	.-1058   	; 0x3a6c <prvInsertTimerInActiveList>
    3e8e:	4e 2d       	mov	r20, r14
    3e90:	5f 2d       	mov	r21, r15
    3e92:	6c 2d       	mov	r22, r12
    3e94:	7d 2d       	mov	r23, r13
    3e96:	80 91 b7 0d 	lds	r24, 0x0DB7	; 0x800db7 <xTimerQueue>
    3e9a:	90 91 b8 0d 	lds	r25, 0x0DB8	; 0x800db8 <xTimerQueue+0x1>
    3e9e:	dd d8       	rcall	.-3654   	; 0x305a <xQueueReceive>
    3ea0:	81 11       	cpse	r24, r1
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

    vTaskSuspendAll();
    3ea2:	a2 cf       	rjmp	.-188    	; 0x3de8 <prvTimerTask+0xd0>
    3ea4:	49 cf       	rjmp	.-366    	; 0x3d38 <prvTimerTask+0x20>
        /* Obtain the time now to make an assessment as to whether the timer
        has expired or not.  If obtaining the time causes the lists to switch
        then don't process this timer as any timers that remained in the list
        when the lists were switched will have been processed within the
        prvSampleTimeNow() function. */
        xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    3ea6:	1c db       	rcall	.-2504   	; 0x34e0 <vTaskSuspendAll>
    3ea8:	c4 01       	movw	r24, r8
    3eaa:	c8 de       	rcall	.-624    	; 0x3c3c <prvSampleTimeNow>
    3eac:	8c 01       	movw	r16, r24
        if( xTimerListsWereSwitched == pdFALSE )
    3eae:	89 81       	ldd	r24, Y+1	; 0x01
    3eb0:	81 11       	cpse	r24, r1
    3eb2:	98 cf       	rjmp	.-208    	; 0x3de4 <prvTimerTask+0xcc>
                case when the current timer list is empty. */
                if( xListWasEmpty != pdFALSE )
                {
                    /* The current timer list is empty - is the overflow list
                    also empty? */
                    xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    3eb4:	e0 91 b9 0d 	lds	r30, 0x0DB9	; 0x800db9 <pxOverflowTimerList>
    3eb8:	f0 91 ba 0d 	lds	r31, 0x0DBA	; 0x800dba <pxOverflowTimerList+0x1>
    3ebc:	80 81       	ld	r24, Z
    3ebe:	44 2d       	mov	r20, r4
    3ec0:	81 11       	cpse	r24, r1
    3ec2:	45 2d       	mov	r20, r5
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    }
    else
    {
        /* Ensure the task unblocks when the tick count rolls over. */
        xNextExpireTime = ( TickType_t ) 0U;
    3ec4:	ae 2c       	mov	r10, r14
    3ec6:	bf 2c       	mov	r11, r15
    3ec8:	7f cf       	rjmp	.-258    	; 0x3dc8 <prvTimerTask+0xb0>

00003eca <Set_drum_time>:
 * parameters@ difference time between every ISR For Drum
 * return@ Nothing
 */
static void Set_drum_time(uint32_t dif_time)
{
	g_drum_time = dif_time;
    3eca:	60 93 00 15 	sts	0x1500, r22	; 0x801500 <g_drum_time>
    3ece:	70 93 01 15 	sts	0x1501, r23	; 0x801501 <g_drum_time+0x1>
    3ed2:	80 93 02 15 	sts	0x1502, r24	; 0x801502 <g_drum_time+0x2>
    3ed6:	90 93 03 15 	sts	0x1503, r25	; 0x801503 <g_drum_time+0x3>
    3eda:	08 95       	ret

00003edc <Encoder_init>:
// 	//Call back Function 
// 	g_conveyor.isr_call_back = Set_conveyor_time;
// 	timers_init(&g_conveyor);
	
	//encoder of conveyor on timer 5
	g_drum.timer_number = 5;
    3edc:	eb ef       	ldi	r30, 0xFB	; 251
    3ede:	f4 e1       	ldi	r31, 0x14	; 20
    3ee0:	85 e0       	ldi	r24, 0x05	; 5
    3ee2:	84 83       	std	Z+4, r24	; 0x04
	// number of ticks 16 to interrupted
	g_drum.ticks = 16;
    3ee4:	80 e1       	ldi	r24, 0x10	; 16
    3ee6:	90 e0       	ldi	r25, 0x00	; 0
    3ee8:	91 83       	std	Z+1, r25	; 0x01
    3eea:	80 83       	st	Z, r24
	//Call back Function 
	g_drum.isr_call_back = Set_drum_time ; 
    3eec:	85 e6       	ldi	r24, 0x65	; 101
    3eee:	9f e1       	ldi	r25, 0x1F	; 31
    3ef0:	93 83       	std	Z+3, r25	; 0x03
    3ef2:	82 83       	std	Z+2, r24	; 0x02
    timers_init(&g_drum);
    3ef4:	cf 01       	movw	r24, r30
    3ef6:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <timers_init>
    3efa:	08 95       	ret

00003efc <LCD_main_err_Init>:

void (*g_callback_read_timeout)(void) = NULL;
void (*g_callback_write_timeout)(void) = NULL;

void LCD_main_err_Init( void(*callback_read_timeout)(void) , void(*callback_write_timeout)(void)){
	g_callback_read_timeout = callback_read_timeout;
    3efc:	90 93 c2 0d 	sts	0x0DC2, r25	; 0x800dc2 <g_callback_read_timeout+0x1>
    3f00:	80 93 c1 0d 	sts	0x0DC1, r24	; 0x800dc1 <g_callback_read_timeout>
	g_callback_write_timeout = callback_write_timeout;
    3f04:	70 93 c0 0d 	sts	0x0DC0, r23	; 0x800dc0 <g_callback_write_timeout+0x1>
    3f08:	60 93 bf 0d 	sts	0x0DBF, r22	; 0x800dbf <g_callback_write_timeout>
    3f0c:	08 95       	ret

00003f0e <LCD_main>:
	#ifdef __DEBUG
	uint16_t *Debug_read;
	#endif
	uint8_t r_err, w_err;
	static uint8_t read_err_counter = 0 ,write_err_counter = 0 ;
    Lcd_init(UART3,115200,1);
    3f0e:	21 e0       	ldi	r18, 0x01	; 1
    3f10:	40 e0       	ldi	r20, 0x00	; 0
    3f12:	52 ec       	ldi	r21, 0xC2	; 194
    3f14:	61 e0       	ldi	r22, 0x01	; 1
    3f16:	70 e0       	ldi	r23, 0x00	; 0
    3f18:	83 e0       	ldi	r24, 0x03	; 3
    3f1a:	0e 94 47 03 	call	0x68e	; 0x68e <Lcd_init>
	RTE_set_Start_blancher_Operation(s_Lcd_data_read.Start_blancher_operation);
}


static void LCD_RTE_COLLECT(void){
		s_Lcd_data_write.Drum_speed = RTE_get_Drum_speed();
    3f1e:	04 e0       	ldi	r16, 0x04	; 4
    3f20:	15 e1       	ldi	r17, 0x15	; 21
	#endif
	uint8_t r_err, w_err;
	static uint8_t read_err_counter = 0 ,write_err_counter = 0 ;
    Lcd_init(UART3,115200,1);
	while(1){
		UART0_puts("TASK1 alive \n");
    3f22:	8d ed       	ldi	r24, 0xDD	; 221
    3f24:	92 e0       	ldi	r25, 0x02	; 2
    3f26:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <UART0_puts>


static uint8_t LCD_READ_Parameters(void){
	//call LCD_read_mutliple regs (fill the struct) and check for the errors //s_Lcd_data_read
	//set rte parameters
	return Lcd_Read_multiple_data(LCD_START_READ_ADDRESS,(uint16_t*)&s_Lcd_data_read,LCD_READ_REGS_NUMBER);
    3f2a:	41 e1       	ldi	r20, 0x11	; 17
    3f2c:	68 e0       	ldi	r22, 0x08	; 8
    3f2e:	75 e1       	ldi	r23, 0x15	; 21
    3f30:	81 e0       	ldi	r24, 0x01	; 1
    3f32:	90 e0       	ldi	r25, 0x00	; 0
    3f34:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <Lcd_Read_multiple_data>
	static uint8_t read_err_counter = 0 ,write_err_counter = 0 ;
    Lcd_init(UART3,115200,1);
	while(1){
		UART0_puts("TASK1 alive \n");
		r_err =  LCD_READ_Parameters();
 		if(LCD_RESPONCE_TIMED_OUT == r_err)
    3f38:	82 3e       	cpi	r24, 0xE2	; 226
    3f3a:	89 f4       	brne	.+34     	; 0x3f5e <LCD_main+0x50>
 		{
			 read_err_counter++;
    3f3c:	80 91 be 0d 	lds	r24, 0x0DBE	; 0x800dbe <read_err_counter.2570>
    3f40:	8f 5f       	subi	r24, 0xFF	; 255
    3f42:	80 93 be 0d 	sts	0x0DBE, r24	; 0x800dbe <read_err_counter.2570>
			 if(LCD_READING_TIMEOUT_MATURE == read_err_counter){
    3f46:	85 30       	cpi	r24, 0x05	; 5
    3f48:	09 f0       	breq	.+2      	; 0x3f4c <LCD_main+0x3e>
    3f4a:	4d c0       	rjmp	.+154    	; 0x3fe6 <LCD_main+0xd8>
				//  callback error notification for reading timeout
				if(g_callback_read_timeout == NULL){
    3f4c:	e0 91 c1 0d 	lds	r30, 0x0DC1	; 0x800dc1 <g_callback_read_timeout>
    3f50:	f0 91 c2 0d 	lds	r31, 0x0DC2	; 0x800dc2 <g_callback_read_timeout+0x1>
    3f54:	30 97       	sbiw	r30, 0x00	; 0
    3f56:	09 f4       	brne	.+2      	; 0x3f5a <LCD_main+0x4c>
    3f58:	46 c0       	rjmp	.+140    	; 0x3fe6 <LCD_main+0xd8>
					//no entry
				}
				else
				{
					g_callback_read_timeout();
    3f5a:	19 95       	eicall
    3f5c:	44 c0       	rjmp	.+136    	; 0x3fe6 <LCD_main+0xd8>
}

//drum speed & current temp
//s_Lcd_data_read
static void LCD_RTE_FEED(void){
	RTE_set_Set_temperature(s_Lcd_data_read.Set_temp);
    3f5e:	c8 e0       	ldi	r28, 0x08	; 8
    3f60:	d5 e1       	ldi	r29, 0x15	; 21
    3f62:	8a 85       	ldd	r24, Y+10	; 0x0a
    3f64:	9b 85       	ldd	r25, Y+11	; 0x0b
    3f66:	0e 94 b1 13 	call	0x2762	; 0x2762 <RTE_set_Set_temperature>
	RTE_set_Sleep_temperature(s_Lcd_data_read.Sleep_temp);
    3f6a:	88 85       	ldd	r24, Y+8	; 0x08
    3f6c:	99 85       	ldd	r25, Y+9	; 0x09
    3f6e:	0e 94 a2 13 	call	0x2744	; 0x2744 <RTE_set_Sleep_temperature>
	RTE_set_Threshold_set_temperature(s_Lcd_data_read.Threshold_set_temp);
    3f72:	8c 85       	ldd	r24, Y+12	; 0x0c
    3f74:	9d 85       	ldd	r25, Y+13	; 0x0d
    3f76:	0e 94 c0 13 	call	0x2780	; 0x2780 <RTE_set_Threshold_set_temperature>
	RTE_set_Threshold_sleep_temperature(s_Lcd_data_read.Threshold_sleep_temp);
    3f7a:	8e 85       	ldd	r24, Y+14	; 0x0e
    3f7c:	9f 85       	ldd	r25, Y+15	; 0x0f
    3f7e:	0e 94 cf 13 	call	0x279e	; 0x279e <RTE_set_Threshold_sleep_temperature>
	RTE_set_Negative_offset_temperature(s_Lcd_data_read.Negative_offset_temp);
    3f82:	8a 89       	ldd	r24, Y+18	; 0x12
    3f84:	9b 89       	ldd	r25, Y+19	; 0x13
    3f86:	0e 94 ed 13 	call	0x27da	; 0x27da <RTE_set_Negative_offset_temperature>
	RTE_set_Positive_offset_temperature(s_Lcd_data_read.Positive_offset_temp);
    3f8a:	88 89       	ldd	r24, Y+16	; 0x10
    3f8c:	99 89       	ldd	r25, Y+17	; 0x11
    3f8e:	0e 94 de 13 	call	0x27bc	; 0x27bc <RTE_set_Positive_offset_temperature>
	RTE_set_System_on(s_Lcd_data_read.System_on);
    3f92:	88 81       	ld	r24, Y
    3f94:	99 81       	ldd	r25, Y+1	; 0x01
    3f96:	0e 94 15 13 	call	0x262a	; 0x262a <RTE_set_System_on>
	RTE_set_Wash_Operation(s_Lcd_data_read.Wash_operation);
    3f9a:	8c 81       	ldd	r24, Y+4	; 0x04
    3f9c:	9d 81       	ldd	r25, Y+5	; 0x05
    3f9e:	0e 94 33 13 	call	0x2666	; 0x2666 <RTE_set_Wash_Operation>
	RTE_set_Tank_Calibration_Operation(s_Lcd_data_read.Tank_calibration_operation);
    3fa2:	8e 81       	ldd	r24, Y+6	; 0x06
    3fa4:	9f 81       	ldd	r25, Y+7	; 0x07
    3fa6:	0e 94 42 13 	call	0x2684	; 0x2684 <RTE_set_Tank_Calibration_Operation>
	RTE_set_Gear_ratio(s_Lcd_data_read.Gear_ratio);
    3faa:	8c 89       	ldd	r24, Y+20	; 0x14
    3fac:	9d 89       	ldd	r25, Y+21	; 0x15
    3fae:	0e 94 4d 12 	call	0x249a	; 0x249a <RTE_set_Gear_ratio>
	RTE_set_Conveyor_length(s_Lcd_data_read.Conveyor_length);
    3fb2:	8e 89       	ldd	r24, Y+22	; 0x16
    3fb4:	9f 89       	ldd	r25, Y+23	; 0x17
    3fb6:	0e 94 6b 12 	call	0x24d6	; 0x24d6 <RTE_set_Conveyor_length>
	RTE_set_Driver_diameter(s_Lcd_data_read.Driver_diameter);
    3fba:	88 8d       	ldd	r24, Y+24	; 0x18
    3fbc:	99 8d       	ldd	r25, Y+25	; 0x19
    3fbe:	0e 94 7a 12 	call	0x24f4	; 0x24f4 <RTE_set_Driver_diameter>
	RTE_set_Time_minute(s_Lcd_data_read.Time_minute);
    3fc2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3fc4:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3fc6:	0e 94 89 12 	call	0x2512	; 0x2512 <RTE_set_Time_minute>
	RTE_set_Time_second(s_Lcd_data_read.Time_second);
    3fca:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3fcc:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3fce:	0e 94 98 12 	call	0x2530	; 0x2530 <RTE_set_Time_second>
	RTE_set_RPM_max(s_Lcd_data_read.RPM_max);
    3fd2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3fd4:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3fd6:	0e 94 5c 12 	call	0x24b8	; 0x24b8 <RTE_set_RPM_max>
	RTE_set_Start_blancher_Operation(s_Lcd_data_read.Start_blancher_operation);
    3fda:	8a 81       	ldd	r24, Y+2	; 0x02
    3fdc:	9b 81       	ldd	r25, Y+3	; 0x03
    3fde:	0e 94 24 13 	call	0x2648	; 0x2648 <RTE_set_Start_blancher_Operation>
			 }
			 
 		}
	    else{
 			LCD_RTE_FEED();	
			read_err_counter = 0;
    3fe2:	10 92 be 0d 	sts	0x0DBE, r1	; 0x800dbe <read_err_counter.2570>
	RTE_set_Start_blancher_Operation(s_Lcd_data_read.Start_blancher_operation);
}


static void LCD_RTE_COLLECT(void){
		s_Lcd_data_write.Drum_speed = RTE_get_Drum_speed();
    3fe6:	0e 94 02 12 	call	0x2404	; 0x2404 <RTE_get_Drum_speed>
    3fea:	f8 01       	movw	r30, r16
    3fec:	91 83       	std	Z+1, r25	; 0x01
    3fee:	80 83       	st	Z, r24
		s_Lcd_data_write.Current_temperature = RTE_get_Current_temperature();
    3ff0:	0e 94 01 14 	call	0x2802	; 0x2802 <RTE_get_Current_temperature>
    3ff4:	f8 01       	movw	r30, r16
    3ff6:	93 83       	std	Z+3, r25	; 0x03
    3ff8:	82 83       	std	Z+2, r24	; 0x02

}


static uint8_t LCD_WRITE_Parameters(void){
	return Lcd_Write_multiple_data(LCD_START_WRITE_ADDRESS,(uint16_t*)&s_Lcd_data_write,LCD_WRITE_REGS_NUMBER);
    3ffa:	42 e0       	ldi	r20, 0x02	; 2
    3ffc:	b8 01       	movw	r22, r16
    3ffe:	80 e0       	ldi	r24, 0x00	; 0
    4000:	9f e0       	ldi	r25, 0x0F	; 15
    4002:	0e 94 82 03 	call	0x704	; 0x704 <Lcd_Write_multiple_data>
			read_err_counter = 0;
 		}
 		
  		LCD_RTE_COLLECT();
 		w_err = LCD_WRITE_Parameters();
		if(LCD_RESPONCE_TIMED_OUT == w_err)
    4006:	82 3e       	cpi	r24, 0xE2	; 226
    4008:	79 f4       	brne	.+30     	; 0x4028 <LCD_main+0x11a>
		{
			write_err_counter++;
    400a:	80 91 bd 0d 	lds	r24, 0x0DBD	; 0x800dbd <write_err_counter.2571>
    400e:	8f 5f       	subi	r24, 0xFF	; 255
    4010:	80 93 bd 0d 	sts	0x0DBD, r24	; 0x800dbd <write_err_counter.2571>
			if( LCD_WRITING_TIMEOUT_MATURE == write_err_counter){
    4014:	85 30       	cpi	r24, 0x05	; 5
    4016:	51 f4       	brne	.+20     	; 0x402c <LCD_main+0x11e>
				//callback error notification for writing timeout
				if(g_callback_write_timeout == NULL){
    4018:	e0 91 bf 0d 	lds	r30, 0x0DBF	; 0x800dbf <g_callback_write_timeout>
    401c:	f0 91 c0 0d 	lds	r31, 0x0DC0	; 0x800dc0 <g_callback_write_timeout+0x1>
    4020:	30 97       	sbiw	r30, 0x00	; 0
    4022:	21 f0       	breq	.+8      	; 0x402c <LCD_main+0x11e>
					//no entry
				}
				else{
					g_callback_write_timeout();
    4024:	19 95       	eicall
    4026:	02 c0       	rjmp	.+4      	; 0x402c <LCD_main+0x11e>
				}	
			}
		}
		else{
			write_err_counter = 0;
    4028:	10 92 bd 0d 	sts	0x0DBD, r1	; 0x800dbd <write_err_counter.2571>
				UART0_OutUDec(Debug_read[i]);
				UART0_puts("\n");
				
			}
		#endif
		vTaskDelay(200/portTICK_PERIOD_MS);
    402c:	8c e0       	ldi	r24, 0x0C	; 12
    402e:	90 e0       	ldi	r25, 0x00	; 0
    4030:	97 db       	rcall	.-2258   	; 0x3760 <vTaskDelay>
		//_delay_ms(2000);
	}
    4032:	77 cf       	rjmp	.-274    	; 0x3f22 <LCD_main+0x14>

00004034 <Level_main_err_init>:

#include "../MCAL/UART.h"
 
void (*g_callback_level_sensor_fail) (void) = NULL;
void Level_main_err_init( void (*callback_level_sensor_fail) (void) ){
	 g_callback_level_sensor_fail = callback_level_sensor_fail;
    4034:	90 93 c4 0d 	sts	0x0DC4, r25	; 0x800dc4 <g_callback_level_sensor_fail+0x1>
    4038:	80 93 c3 0d 	sts	0x0DC3, r24	; 0x800dc3 <g_callback_level_sensor_fail>
    403c:	08 95       	ret

0000403e <Level_main>:
	uint8_t Tank_level = 0;
	uint8_t Blancher_level = 0;
	
	while (1)
	{
		Tank_level = Get_tank_level();
    403e:	0e 94 a5 03 	call	0x74a	; 0x74a <Get_tank_level>
    4042:	c8 2f       	mov	r28, r24
		Blancher_level = Get_blancher_level();
    4044:	0e 94 c6 03 	call	0x78c	; 0x78c <Get_blancher_level>
    4048:	d8 2f       	mov	r29, r24
		if (LEVEL_ERROR == Tank_level)
    404a:	c5 35       	cpi	r28, 0x55	; 85
    404c:	61 f4       	brne	.+24     	; 0x4066 <Level_main+0x28>
		{
		
			if(g_callback_level_sensor_fail == NULL){
    404e:	e0 91 c3 0d 	lds	r30, 0x0DC3	; 0x800dc3 <g_callback_level_sensor_fail>
    4052:	f0 91 c4 0d 	lds	r31, 0x0DC4	; 0x800dc4 <g_callback_level_sensor_fail+0x1>
    4056:	30 97       	sbiw	r30, 0x00	; 0
    4058:	09 f0       	breq	.+2      	; 0x405c <Level_main+0x1e>
				
			}
			else{
				// callback error function .
				g_callback_level_sensor_fail();
    405a:	19 95       	eicall
			}
			RTE_set_tank_level(INVALID_DATA);
    405c:	8a ef       	ldi	r24, 0xFA	; 250
    405e:	9f ea       	ldi	r25, 0xAF	; 175
    4060:	0e 94 c1 12 	call	0x2582	; 0x2582 <RTE_set_tank_level>
    4064:	08 c0       	rjmp	.+16     	; 0x4076 <Level_main+0x38>
			
			//UART0_puts("level error !!!");
		}
		else 
		{
			RTE_set_tank_level(Tank_level);
    4066:	8c 2f       	mov	r24, r28
    4068:	90 e0       	ldi	r25, 0x00	; 0
    406a:	0e 94 c1 12 	call	0x2582	; 0x2582 <RTE_set_tank_level>
			RTE_set_blancher_level(Blancher_level);
    406e:	8d 2f       	mov	r24, r29
    4070:	90 e0       	ldi	r25, 0x00	; 0
    4072:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <RTE_set_blancher_level>
		}
		vTaskDelay(500/portTICK_PERIOD_MS) ;
    4076:	8f e1       	ldi	r24, 0x1F	; 31
    4078:	90 e0       	ldi	r25, 0x00	; 0
    407a:	72 db       	rcall	.-2332   	; 0x3760 <vTaskDelay>
	}
    407c:	e0 cf       	rjmp	.-64     	; 0x403e <Level_main>

0000407e <Service_init>:
#include "tank_operation.h"
#include "Encoder_Tasks.h"

void Service_init(void){
	
	Encoder_init(); //fixed here because no main task
    407e:	2e df       	rcall	.-420    	; 0x3edc <Encoder_init>
	Tank_operation_init();
    4080:	41 c0       	rjmp	.+130    	; 0x4104 <Tank_operation_init>
    4082:	08 95       	ret

00004084 <Tank_out_callback>:
    4084:	80 91 c9 0d 	lds	r24, 0x0DC9	; 0x800dc9 <g_out_liters_counter>
    4088:	90 91 ca 0d 	lds	r25, 0x0DCA	; 0x800dca <g_out_liters_counter+0x1>
    408c:	01 96       	adiw	r24, 0x01	; 1
    408e:	90 93 ca 0d 	sts	0x0DCA, r25	; 0x800dca <g_out_liters_counter+0x1>
    4092:	80 93 c9 0d 	sts	0x0DC9, r24	; 0x800dc9 <g_out_liters_counter>
    4096:	20 91 c9 0d 	lds	r18, 0x0DC9	; 0x800dc9 <g_out_liters_counter>
    409a:	30 91 ca 0d 	lds	r19, 0x0DCA	; 0x800dca <g_out_liters_counter+0x1>
    409e:	80 91 c5 0d 	lds	r24, 0x0DC5	; 0x800dc5 <g_out_liters>
    40a2:	90 91 c6 0d 	lds	r25, 0x0DC6	; 0x800dc6 <g_out_liters+0x1>
    40a6:	28 17       	cp	r18, r24
    40a8:	39 07       	cpc	r19, r25
    40aa:	58 f0       	brcs	.+22     	; 0x40c2 <Tank_out_callback+0x3e>
    40ac:	20 e0       	ldi	r18, 0x00	; 0
    40ae:	40 e0       	ldi	r20, 0x00	; 0
    40b0:	50 e0       	ldi	r21, 0x00	; 0
    40b2:	60 e0       	ldi	r22, 0x00	; 0
    40b4:	70 e0       	ldi	r23, 0x00	; 0
    40b6:	80 91 28 15 	lds	r24, 0x1528	; 0x801528 <outing_Semaphore>
    40ba:	90 91 29 15 	lds	r25, 0x1529	; 0x801529 <outing_Semaphore+0x1>
    40be:	0c 94 63 17 	jmp	0x2ec6	; 0x2ec6 <xQueueGenericSend>
    40c2:	08 95       	ret

000040c4 <Tank_feed_callback>:
    40c4:	80 91 cb 0d 	lds	r24, 0x0DCB	; 0x800dcb <g_feeding_liters_counter>
    40c8:	90 91 cc 0d 	lds	r25, 0x0DCC	; 0x800dcc <g_feeding_liters_counter+0x1>
    40cc:	01 96       	adiw	r24, 0x01	; 1
    40ce:	90 93 cc 0d 	sts	0x0DCC, r25	; 0x800dcc <g_feeding_liters_counter+0x1>
    40d2:	80 93 cb 0d 	sts	0x0DCB, r24	; 0x800dcb <g_feeding_liters_counter>
    40d6:	20 91 cb 0d 	lds	r18, 0x0DCB	; 0x800dcb <g_feeding_liters_counter>
    40da:	30 91 cc 0d 	lds	r19, 0x0DCC	; 0x800dcc <g_feeding_liters_counter+0x1>
    40de:	80 91 c7 0d 	lds	r24, 0x0DC7	; 0x800dc7 <g_feed_liters>
    40e2:	90 91 c8 0d 	lds	r25, 0x0DC8	; 0x800dc8 <g_feed_liters+0x1>
    40e6:	28 17       	cp	r18, r24
    40e8:	39 07       	cpc	r19, r25
    40ea:	58 f0       	brcs	.+22     	; 0x4102 <Tank_feed_callback+0x3e>
    40ec:	20 e0       	ldi	r18, 0x00	; 0
    40ee:	40 e0       	ldi	r20, 0x00	; 0
    40f0:	50 e0       	ldi	r21, 0x00	; 0
    40f2:	60 e0       	ldi	r22, 0x00	; 0
    40f4:	70 e0       	ldi	r23, 0x00	; 0
    40f6:	80 91 68 15 	lds	r24, 0x1568	; 0x801568 <Feeding_Semaphore>
    40fa:	90 91 69 15 	lds	r25, 0x1569	; 0x801569 <Feeding_Semaphore+0x1>
    40fe:	0c 94 63 17 	jmp	0x2ec6	; 0x2ec6 <xQueueGenericSend>
    4102:	08 95       	ret

00004104 <Tank_operation_init>:
    4104:	0f 93       	push	r16
    4106:	62 e4       	ldi	r22, 0x42	; 66
    4108:	70 e2       	ldi	r23, 0x20	; 32
    410a:	82 e6       	ldi	r24, 0x62	; 98
    410c:	90 e2       	ldi	r25, 0x20	; 32
    410e:	0e 94 07 03 	call	0x60e	; 0x60e <Flow_rate_init>
    4112:	03 e0       	ldi	r16, 0x03	; 3
    4114:	29 e4       	ldi	r18, 0x49	; 73
    4116:	35 e1       	ldi	r19, 0x15	; 21
    4118:	40 e0       	ldi	r20, 0x00	; 0
    411a:	50 e0       	ldi	r21, 0x00	; 0
    411c:	60 e0       	ldi	r22, 0x00	; 0
    411e:	81 e0       	ldi	r24, 0x01	; 1
    4120:	0e 94 4e 17 	call	0x2e9c	; 0x2e9c <xQueueGenericCreateStatic>
    4124:	90 93 69 15 	sts	0x1569, r25	; 0x801569 <Feeding_Semaphore+0x1>
    4128:	80 93 68 15 	sts	0x1568, r24	; 0x801568 <Feeding_Semaphore>
    412c:	2a e2       	ldi	r18, 0x2A	; 42
    412e:	35 e1       	ldi	r19, 0x15	; 21
    4130:	40 e0       	ldi	r20, 0x00	; 0
    4132:	50 e0       	ldi	r21, 0x00	; 0
    4134:	60 e0       	ldi	r22, 0x00	; 0
    4136:	81 e0       	ldi	r24, 0x01	; 1
    4138:	0e 94 4e 17 	call	0x2e9c	; 0x2e9c <xQueueGenericCreateStatic>
    413c:	90 93 29 15 	sts	0x1529, r25	; 0x801529 <outing_Semaphore+0x1>
    4140:	80 93 28 15 	sts	0x1528, r24	; 0x801528 <outing_Semaphore>
    4144:	0f 91       	pop	r16
    4146:	08 95       	ret

00004148 <Temp_main_err_init>:
*Parameters @ Nothing
*return Nothing 
*/
void (*over_temp_callback)(void) = NULL;
void Temp_main_err_init( void (*callback_over_temp) (void) ){
	over_temp_callback = callback_over_temp;
    4148:	90 93 ce 0d 	sts	0x0DCE, r25	; 0x800dce <over_temp_callback+0x1>
    414c:	80 93 cd 0d 	sts	0x0DCD, r24	; 0x800dcd <over_temp_callback>
    4150:	08 95       	ret

00004152 <Temp_main>:
}

void Temp_main(void* pvParameters){
	uint16_t current_temp=0;
	uint8_t count=0;
	temp_init(0);
    4152:	80 e0       	ldi	r24, 0x00	; 0
    4154:	0e 94 b6 0b 	call	0x176c	; 0x176c <temp_init>
	over_temp_callback = callback_over_temp;
}

void Temp_main(void* pvParameters){
	uint16_t current_temp=0;
	uint8_t count=0;
    4158:	10 e0       	ldi	r17, 0x00	; 0
	temp_init(0);
	while (1)
	{
		UART0_puts("Temp task alive\n");
    415a:	8b ee       	ldi	r24, 0xEB	; 235
    415c:	92 e0       	ldi	r25, 0x02	; 2
    415e:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <UART0_puts>
		current_temp = temp_read();
    4162:	0e 94 b8 0b 	call	0x1770	; 0x1770 <temp_read>
    4166:	ec 01       	movw	r28, r24
// 		UART0_OutUDec(s_current_temp);
// 		UART0_putc('\n');
		if(current_temp > TEMP_OVER_TEMP){
    4168:	cd 97       	sbiw	r24, 0x3d	; 61
    416a:	50 f0       	brcs	.+20     	; 0x4180 <Temp_main+0x2e>
			count++;
    416c:	1f 5f       	subi	r17, 0xFF	; 255
			if(count >= TEMP_OVER_TEMP_STILL_TIME){
    416e:	16 30       	cpi	r17, 0x06	; 6
    4170:	38 f0       	brcs	.+14     	; 0x4180 <Temp_main+0x2e>
				//callback
				if(over_temp_callback == NULL){
    4172:	e0 91 cd 0d 	lds	r30, 0x0DCD	; 0x800dcd <over_temp_callback>
    4176:	f0 91 ce 0d 	lds	r31, 0x0DCE	; 0x800dce <over_temp_callback+0x1>
    417a:	30 97       	sbiw	r30, 0x00	; 0
    417c:	09 f0       	breq	.+2      	; 0x4180 <Temp_main+0x2e>
					
				}
				else
				{
					 over_temp_callback();
    417e:	19 95       	eicall
				}
			}
		}
		// set temp for LCD 
		RTE_set_Current_temperature(current_temp);
    4180:	ce 01       	movw	r24, r28
    4182:	0e 94 fc 13 	call	0x27f8	; 0x27f8 <RTE_set_Current_temperature>
		// set the temp for the application .
		RTE_set_app_Current_temperature(current_temp);
    4186:	ce 01       	movw	r24, r28
    4188:	0e 94 06 14 	call	0x280c	; 0x280c <RTE_set_app_Current_temperature>
		vTaskDelay(50/portTICK_PERIOD_MS) ;
    418c:	83 e0       	ldi	r24, 0x03	; 3
    418e:	90 e0       	ldi	r25, 0x00	; 0
    4190:	e7 da       	rcall	.-2610   	; 0x3760 <vTaskDelay>
	}
    4192:	e3 cf       	rjmp	.-58     	; 0x415a <Temp_main+0x8>

00004194 <System_init>:


gSystemError System_init(void){
	
	gSystemError res = E_OK;
	DIO_init();
    4194:	0e 94 61 0d 	call	0x1ac2	; 0x1ac2 <DIO_init>
	millis_init();	
    4198:	19 d0       	rcall	.+50     	; 0x41cc <millis_init>
	Service_error_init();
    419a:	0e 94 38 0c 	call	0x1870	; 0x1870 <Service_error_init>
	Service_init();
    419e:	6f df       	rcall	.-290    	; 0x407e <Service_init>
	RTE_init();
    41a0:	0e 94 df 12 	call	0x25be	; 0x25be <RTE_init>
	//App_init();
	return res;

    41a4:	80 e0       	ldi	r24, 0x00	; 0
    41a6:	08 95       	ret

000041a8 <crc16_update>:

uint16_t crc16_update(uint16_t crc, uint8_t a)
{
  int i;

  crc ^= a;
    41a8:	86 27       	eor	r24, r22
    41aa:	28 e0       	ldi	r18, 0x08	; 8
    41ac:	30 e0       	ldi	r19, 0x00	; 0
  for (i = 0; i < 8; ++i)
  {
    if (crc & 1)
    41ae:	80 ff       	sbrs	r24, 0
    41b0:	07 c0       	rjmp	.+14     	; 0x41c0 <crc16_update+0x18>
      crc = (crc >> 1) ^ 0xA001;
    41b2:	96 95       	lsr	r25
    41b4:	87 95       	ror	r24
    41b6:	41 e0       	ldi	r20, 0x01	; 1
    41b8:	84 27       	eor	r24, r20
    41ba:	40 ea       	ldi	r20, 0xA0	; 160
    41bc:	94 27       	eor	r25, r20
    41be:	02 c0       	rjmp	.+4      	; 0x41c4 <crc16_update+0x1c>
    else
      crc = (crc >> 1);
    41c0:	96 95       	lsr	r25
    41c2:	87 95       	ror	r24
    41c4:	21 50       	subi	r18, 0x01	; 1
    41c6:	31 09       	sbc	r19, r1
uint16_t crc16_update(uint16_t crc, uint8_t a)
{
  int i;

  crc ^= a;
  for (i = 0; i < 8; ++i)
    41c8:	91 f7       	brne	.-28     	; 0x41ae <crc16_update+0x6>
    else
      crc = (crc >> 1);
  }

  return crc;
}
    41ca:	08 95       	ret

000041cc <millis_init>:

//init the timer on ctc mode to calvulate millis
void millis_init()
{
	//CTC mode
	TIMER2_CONGFIG_A = 0x02;
    41cc:	82 e0       	ldi	r24, 0x02	; 2
    41ce:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
	// Clock/64
	TIMER2_CONGFIG_B = 0x04;
    41d2:	84 e0       	ldi	r24, 0x04	; 4
    41d4:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7000b1>
    // Load into the output compare
    TIMER2_COMPARE = CTC_MATCH_OVERFLOW;
    41d8:	8a ef       	ldi	r24, 0xFA	; 250
    41da:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7000b3>
    // Enable the compare match interrupt
    SET_BIT(TIMER2_INTERUPT, TIMER2_COMPARE_INT);
    41de:	e0 e7       	ldi	r30, 0x70	; 112
    41e0:	f0 e0       	ldi	r31, 0x00	; 0
    41e2:	80 81       	ld	r24, Z
    41e4:	82 60       	ori	r24, 0x02	; 2
    41e6:	80 83       	st	Z, r24
    41e8:	08 95       	ret

000041ea <Get_millis>:
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    41ea:	f8 94       	cli
    unsigned long millis_return;

    // Ensure this cannot be disrupted
    ATOMIC_BLOCK(ATOMIC_FORCEON) {
    	// copy the ISR counter
        millis_return = timer1_millis;
    41ec:	60 91 6a 15 	lds	r22, 0x156A	; 0x80156a <timer1_millis>
    41f0:	70 91 6b 15 	lds	r23, 0x156B	; 0x80156b <timer1_millis+0x1>
    41f4:	80 91 6c 15 	lds	r24, 0x156C	; 0x80156c <timer1_millis+0x2>
    41f8:	90 91 6d 15 	lds	r25, 0x156D	; 0x80156d <timer1_millis+0x3>
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
    41fc:	78 94       	sei
    }

    return millis_return;
}//Get_millis
    41fe:	08 95       	ret

00004200 <__vector_13>:



ISR (TIMER2_COMPA_vect)
{
    4200:	1f 92       	push	r1
    4202:	0f 92       	push	r0
    4204:	0f b6       	in	r0, 0x3f	; 63
    4206:	0f 92       	push	r0
    4208:	11 24       	eor	r1, r1
    420a:	8f 93       	push	r24
    420c:	9f 93       	push	r25
    420e:	af 93       	push	r26
    4210:	bf 93       	push	r27
	//MILLI SEC
    timer1_millis++;
    4212:	80 91 6a 15 	lds	r24, 0x156A	; 0x80156a <timer1_millis>
    4216:	90 91 6b 15 	lds	r25, 0x156B	; 0x80156b <timer1_millis+0x1>
    421a:	a0 91 6c 15 	lds	r26, 0x156C	; 0x80156c <timer1_millis+0x2>
    421e:	b0 91 6d 15 	lds	r27, 0x156D	; 0x80156d <timer1_millis+0x3>
    4222:	01 96       	adiw	r24, 0x01	; 1
    4224:	a1 1d       	adc	r26, r1
    4226:	b1 1d       	adc	r27, r1
    4228:	80 93 6a 15 	sts	0x156A, r24	; 0x80156a <timer1_millis>
    422c:	90 93 6b 15 	sts	0x156B, r25	; 0x80156b <timer1_millis+0x1>
    4230:	a0 93 6c 15 	sts	0x156C, r26	; 0x80156c <timer1_millis+0x2>
    4234:	b0 93 6d 15 	sts	0x156D, r27	; 0x80156d <timer1_millis+0x3>
}//ISR
    4238:	bf 91       	pop	r27
    423a:	af 91       	pop	r26
    423c:	9f 91       	pop	r25
    423e:	8f 91       	pop	r24
    4240:	0f 90       	pop	r0
    4242:	0f be       	out	0x3f, r0	; 63
    4244:	0f 90       	pop	r0
    4246:	1f 90       	pop	r1
    4248:	18 95       	reti

0000424a <__subsf3>:
    424a:	50 58       	subi	r21, 0x80	; 128

0000424c <__addsf3>:
    424c:	bb 27       	eor	r27, r27
    424e:	aa 27       	eor	r26, r26
    4250:	0e d0       	rcall	.+28     	; 0x426e <__addsf3x>
    4252:	48 c1       	rjmp	.+656    	; 0x44e4 <__fp_round>
    4254:	39 d1       	rcall	.+626    	; 0x44c8 <__fp_pscA>
    4256:	30 f0       	brcs	.+12     	; 0x4264 <__addsf3+0x18>
    4258:	3e d1       	rcall	.+636    	; 0x44d6 <__fp_pscB>
    425a:	20 f0       	brcs	.+8      	; 0x4264 <__addsf3+0x18>
    425c:	31 f4       	brne	.+12     	; 0x426a <__addsf3+0x1e>
    425e:	9f 3f       	cpi	r25, 0xFF	; 255
    4260:	11 f4       	brne	.+4      	; 0x4266 <__addsf3+0x1a>
    4262:	1e f4       	brtc	.+6      	; 0x426a <__addsf3+0x1e>
    4264:	2e c1       	rjmp	.+604    	; 0x44c2 <__fp_nan>
    4266:	0e f4       	brtc	.+2      	; 0x426a <__addsf3+0x1e>
    4268:	e0 95       	com	r30
    426a:	e7 fb       	bst	r30, 7
    426c:	24 c1       	rjmp	.+584    	; 0x44b6 <__fp_inf>

0000426e <__addsf3x>:
    426e:	e9 2f       	mov	r30, r25
    4270:	4a d1       	rcall	.+660    	; 0x4506 <__fp_split3>
    4272:	80 f3       	brcs	.-32     	; 0x4254 <__addsf3+0x8>
    4274:	ba 17       	cp	r27, r26
    4276:	62 07       	cpc	r22, r18
    4278:	73 07       	cpc	r23, r19
    427a:	84 07       	cpc	r24, r20
    427c:	95 07       	cpc	r25, r21
    427e:	18 f0       	brcs	.+6      	; 0x4286 <__addsf3x+0x18>
    4280:	71 f4       	brne	.+28     	; 0x429e <__addsf3x+0x30>
    4282:	9e f5       	brtc	.+102    	; 0x42ea <__addsf3x+0x7c>
    4284:	62 c1       	rjmp	.+708    	; 0x454a <__fp_zero>
    4286:	0e f4       	brtc	.+2      	; 0x428a <__addsf3x+0x1c>
    4288:	e0 95       	com	r30
    428a:	0b 2e       	mov	r0, r27
    428c:	ba 2f       	mov	r27, r26
    428e:	a0 2d       	mov	r26, r0
    4290:	0b 01       	movw	r0, r22
    4292:	b9 01       	movw	r22, r18
    4294:	90 01       	movw	r18, r0
    4296:	0c 01       	movw	r0, r24
    4298:	ca 01       	movw	r24, r20
    429a:	a0 01       	movw	r20, r0
    429c:	11 24       	eor	r1, r1
    429e:	ff 27       	eor	r31, r31
    42a0:	59 1b       	sub	r21, r25
    42a2:	99 f0       	breq	.+38     	; 0x42ca <__addsf3x+0x5c>
    42a4:	59 3f       	cpi	r21, 0xF9	; 249
    42a6:	50 f4       	brcc	.+20     	; 0x42bc <__addsf3x+0x4e>
    42a8:	50 3e       	cpi	r21, 0xE0	; 224
    42aa:	68 f1       	brcs	.+90     	; 0x4306 <__addsf3x+0x98>
    42ac:	1a 16       	cp	r1, r26
    42ae:	f0 40       	sbci	r31, 0x00	; 0
    42b0:	a2 2f       	mov	r26, r18
    42b2:	23 2f       	mov	r18, r19
    42b4:	34 2f       	mov	r19, r20
    42b6:	44 27       	eor	r20, r20
    42b8:	58 5f       	subi	r21, 0xF8	; 248
    42ba:	f3 cf       	rjmp	.-26     	; 0x42a2 <__addsf3x+0x34>
    42bc:	46 95       	lsr	r20
    42be:	37 95       	ror	r19
    42c0:	27 95       	ror	r18
    42c2:	a7 95       	ror	r26
    42c4:	f0 40       	sbci	r31, 0x00	; 0
    42c6:	53 95       	inc	r21
    42c8:	c9 f7       	brne	.-14     	; 0x42bc <__addsf3x+0x4e>
    42ca:	7e f4       	brtc	.+30     	; 0x42ea <__addsf3x+0x7c>
    42cc:	1f 16       	cp	r1, r31
    42ce:	ba 0b       	sbc	r27, r26
    42d0:	62 0b       	sbc	r22, r18
    42d2:	73 0b       	sbc	r23, r19
    42d4:	84 0b       	sbc	r24, r20
    42d6:	ba f0       	brmi	.+46     	; 0x4306 <__addsf3x+0x98>
    42d8:	91 50       	subi	r25, 0x01	; 1
    42da:	a1 f0       	breq	.+40     	; 0x4304 <__addsf3x+0x96>
    42dc:	ff 0f       	add	r31, r31
    42de:	bb 1f       	adc	r27, r27
    42e0:	66 1f       	adc	r22, r22
    42e2:	77 1f       	adc	r23, r23
    42e4:	88 1f       	adc	r24, r24
    42e6:	c2 f7       	brpl	.-16     	; 0x42d8 <__addsf3x+0x6a>
    42e8:	0e c0       	rjmp	.+28     	; 0x4306 <__addsf3x+0x98>
    42ea:	ba 0f       	add	r27, r26
    42ec:	62 1f       	adc	r22, r18
    42ee:	73 1f       	adc	r23, r19
    42f0:	84 1f       	adc	r24, r20
    42f2:	48 f4       	brcc	.+18     	; 0x4306 <__addsf3x+0x98>
    42f4:	87 95       	ror	r24
    42f6:	77 95       	ror	r23
    42f8:	67 95       	ror	r22
    42fa:	b7 95       	ror	r27
    42fc:	f7 95       	ror	r31
    42fe:	9e 3f       	cpi	r25, 0xFE	; 254
    4300:	08 f0       	brcs	.+2      	; 0x4304 <__addsf3x+0x96>
    4302:	b3 cf       	rjmp	.-154    	; 0x426a <__addsf3+0x1e>
    4304:	93 95       	inc	r25
    4306:	88 0f       	add	r24, r24
    4308:	08 f0       	brcs	.+2      	; 0x430c <__addsf3x+0x9e>
    430a:	99 27       	eor	r25, r25
    430c:	ee 0f       	add	r30, r30
    430e:	97 95       	ror	r25
    4310:	87 95       	ror	r24
    4312:	08 95       	ret

00004314 <__divsf3>:
    4314:	0c d0       	rcall	.+24     	; 0x432e <__divsf3x>
    4316:	e6 c0       	rjmp	.+460    	; 0x44e4 <__fp_round>
    4318:	de d0       	rcall	.+444    	; 0x44d6 <__fp_pscB>
    431a:	40 f0       	brcs	.+16     	; 0x432c <__divsf3+0x18>
    431c:	d5 d0       	rcall	.+426    	; 0x44c8 <__fp_pscA>
    431e:	30 f0       	brcs	.+12     	; 0x432c <__divsf3+0x18>
    4320:	21 f4       	brne	.+8      	; 0x432a <__divsf3+0x16>
    4322:	5f 3f       	cpi	r21, 0xFF	; 255
    4324:	19 f0       	breq	.+6      	; 0x432c <__divsf3+0x18>
    4326:	c7 c0       	rjmp	.+398    	; 0x44b6 <__fp_inf>
    4328:	51 11       	cpse	r21, r1
    432a:	10 c1       	rjmp	.+544    	; 0x454c <__fp_szero>
    432c:	ca c0       	rjmp	.+404    	; 0x44c2 <__fp_nan>

0000432e <__divsf3x>:
    432e:	eb d0       	rcall	.+470    	; 0x4506 <__fp_split3>
    4330:	98 f3       	brcs	.-26     	; 0x4318 <__divsf3+0x4>

00004332 <__divsf3_pse>:
    4332:	99 23       	and	r25, r25
    4334:	c9 f3       	breq	.-14     	; 0x4328 <__divsf3+0x14>
    4336:	55 23       	and	r21, r21
    4338:	b1 f3       	breq	.-20     	; 0x4326 <__divsf3+0x12>
    433a:	95 1b       	sub	r25, r21
    433c:	55 0b       	sbc	r21, r21
    433e:	bb 27       	eor	r27, r27
    4340:	aa 27       	eor	r26, r26
    4342:	62 17       	cp	r22, r18
    4344:	73 07       	cpc	r23, r19
    4346:	84 07       	cpc	r24, r20
    4348:	38 f0       	brcs	.+14     	; 0x4358 <__divsf3_pse+0x26>
    434a:	9f 5f       	subi	r25, 0xFF	; 255
    434c:	5f 4f       	sbci	r21, 0xFF	; 255
    434e:	22 0f       	add	r18, r18
    4350:	33 1f       	adc	r19, r19
    4352:	44 1f       	adc	r20, r20
    4354:	aa 1f       	adc	r26, r26
    4356:	a9 f3       	breq	.-22     	; 0x4342 <__divsf3_pse+0x10>
    4358:	33 d0       	rcall	.+102    	; 0x43c0 <__divsf3_pse+0x8e>
    435a:	0e 2e       	mov	r0, r30
    435c:	3a f0       	brmi	.+14     	; 0x436c <__divsf3_pse+0x3a>
    435e:	e0 e8       	ldi	r30, 0x80	; 128
    4360:	30 d0       	rcall	.+96     	; 0x43c2 <__divsf3_pse+0x90>
    4362:	91 50       	subi	r25, 0x01	; 1
    4364:	50 40       	sbci	r21, 0x00	; 0
    4366:	e6 95       	lsr	r30
    4368:	00 1c       	adc	r0, r0
    436a:	ca f7       	brpl	.-14     	; 0x435e <__divsf3_pse+0x2c>
    436c:	29 d0       	rcall	.+82     	; 0x43c0 <__divsf3_pse+0x8e>
    436e:	fe 2f       	mov	r31, r30
    4370:	27 d0       	rcall	.+78     	; 0x43c0 <__divsf3_pse+0x8e>
    4372:	66 0f       	add	r22, r22
    4374:	77 1f       	adc	r23, r23
    4376:	88 1f       	adc	r24, r24
    4378:	bb 1f       	adc	r27, r27
    437a:	26 17       	cp	r18, r22
    437c:	37 07       	cpc	r19, r23
    437e:	48 07       	cpc	r20, r24
    4380:	ab 07       	cpc	r26, r27
    4382:	b0 e8       	ldi	r27, 0x80	; 128
    4384:	09 f0       	breq	.+2      	; 0x4388 <__divsf3_pse+0x56>
    4386:	bb 0b       	sbc	r27, r27
    4388:	80 2d       	mov	r24, r0
    438a:	bf 01       	movw	r22, r30
    438c:	ff 27       	eor	r31, r31
    438e:	93 58       	subi	r25, 0x83	; 131
    4390:	5f 4f       	sbci	r21, 0xFF	; 255
    4392:	2a f0       	brmi	.+10     	; 0x439e <__divsf3_pse+0x6c>
    4394:	9e 3f       	cpi	r25, 0xFE	; 254
    4396:	51 05       	cpc	r21, r1
    4398:	68 f0       	brcs	.+26     	; 0x43b4 <__divsf3_pse+0x82>
    439a:	8d c0       	rjmp	.+282    	; 0x44b6 <__fp_inf>
    439c:	d7 c0       	rjmp	.+430    	; 0x454c <__fp_szero>
    439e:	5f 3f       	cpi	r21, 0xFF	; 255
    43a0:	ec f3       	brlt	.-6      	; 0x439c <__divsf3_pse+0x6a>
    43a2:	98 3e       	cpi	r25, 0xE8	; 232
    43a4:	dc f3       	brlt	.-10     	; 0x439c <__divsf3_pse+0x6a>
    43a6:	86 95       	lsr	r24
    43a8:	77 95       	ror	r23
    43aa:	67 95       	ror	r22
    43ac:	b7 95       	ror	r27
    43ae:	f7 95       	ror	r31
    43b0:	9f 5f       	subi	r25, 0xFF	; 255
    43b2:	c9 f7       	brne	.-14     	; 0x43a6 <__divsf3_pse+0x74>
    43b4:	88 0f       	add	r24, r24
    43b6:	91 1d       	adc	r25, r1
    43b8:	96 95       	lsr	r25
    43ba:	87 95       	ror	r24
    43bc:	97 f9       	bld	r25, 7
    43be:	08 95       	ret
    43c0:	e1 e0       	ldi	r30, 0x01	; 1
    43c2:	66 0f       	add	r22, r22
    43c4:	77 1f       	adc	r23, r23
    43c6:	88 1f       	adc	r24, r24
    43c8:	bb 1f       	adc	r27, r27
    43ca:	62 17       	cp	r22, r18
    43cc:	73 07       	cpc	r23, r19
    43ce:	84 07       	cpc	r24, r20
    43d0:	ba 07       	cpc	r27, r26
    43d2:	20 f0       	brcs	.+8      	; 0x43dc <__divsf3_pse+0xaa>
    43d4:	62 1b       	sub	r22, r18
    43d6:	73 0b       	sbc	r23, r19
    43d8:	84 0b       	sbc	r24, r20
    43da:	ba 0b       	sbc	r27, r26
    43dc:	ee 1f       	adc	r30, r30
    43de:	88 f7       	brcc	.-30     	; 0x43c2 <__divsf3_pse+0x90>
    43e0:	e0 95       	com	r30
    43e2:	08 95       	ret

000043e4 <__fixunssfsi>:
    43e4:	98 d0       	rcall	.+304    	; 0x4516 <__fp_splitA>
    43e6:	88 f0       	brcs	.+34     	; 0x440a <__fixunssfsi+0x26>
    43e8:	9f 57       	subi	r25, 0x7F	; 127
    43ea:	90 f0       	brcs	.+36     	; 0x4410 <__fixunssfsi+0x2c>
    43ec:	b9 2f       	mov	r27, r25
    43ee:	99 27       	eor	r25, r25
    43f0:	b7 51       	subi	r27, 0x17	; 23
    43f2:	a0 f0       	brcs	.+40     	; 0x441c <__fixunssfsi+0x38>
    43f4:	d1 f0       	breq	.+52     	; 0x442a <__fixunssfsi+0x46>
    43f6:	66 0f       	add	r22, r22
    43f8:	77 1f       	adc	r23, r23
    43fa:	88 1f       	adc	r24, r24
    43fc:	99 1f       	adc	r25, r25
    43fe:	1a f0       	brmi	.+6      	; 0x4406 <__fixunssfsi+0x22>
    4400:	ba 95       	dec	r27
    4402:	c9 f7       	brne	.-14     	; 0x43f6 <__fixunssfsi+0x12>
    4404:	12 c0       	rjmp	.+36     	; 0x442a <__fixunssfsi+0x46>
    4406:	b1 30       	cpi	r27, 0x01	; 1
    4408:	81 f0       	breq	.+32     	; 0x442a <__fixunssfsi+0x46>
    440a:	9f d0       	rcall	.+318    	; 0x454a <__fp_zero>
    440c:	b1 e0       	ldi	r27, 0x01	; 1
    440e:	08 95       	ret
    4410:	9c c0       	rjmp	.+312    	; 0x454a <__fp_zero>
    4412:	67 2f       	mov	r22, r23
    4414:	78 2f       	mov	r23, r24
    4416:	88 27       	eor	r24, r24
    4418:	b8 5f       	subi	r27, 0xF8	; 248
    441a:	39 f0       	breq	.+14     	; 0x442a <__fixunssfsi+0x46>
    441c:	b9 3f       	cpi	r27, 0xF9	; 249
    441e:	cc f3       	brlt	.-14     	; 0x4412 <__fixunssfsi+0x2e>
    4420:	86 95       	lsr	r24
    4422:	77 95       	ror	r23
    4424:	67 95       	ror	r22
    4426:	b3 95       	inc	r27
    4428:	d9 f7       	brne	.-10     	; 0x4420 <__fixunssfsi+0x3c>
    442a:	3e f4       	brtc	.+14     	; 0x443a <__fixunssfsi+0x56>
    442c:	90 95       	com	r25
    442e:	80 95       	com	r24
    4430:	70 95       	com	r23
    4432:	61 95       	neg	r22
    4434:	7f 4f       	sbci	r23, 0xFF	; 255
    4436:	8f 4f       	sbci	r24, 0xFF	; 255
    4438:	9f 4f       	sbci	r25, 0xFF	; 255
    443a:	08 95       	ret

0000443c <__floatunsisf>:
    443c:	e8 94       	clt
    443e:	09 c0       	rjmp	.+18     	; 0x4452 <__floatsisf+0x12>

00004440 <__floatsisf>:
    4440:	97 fb       	bst	r25, 7
    4442:	3e f4       	brtc	.+14     	; 0x4452 <__floatsisf+0x12>
    4444:	90 95       	com	r25
    4446:	80 95       	com	r24
    4448:	70 95       	com	r23
    444a:	61 95       	neg	r22
    444c:	7f 4f       	sbci	r23, 0xFF	; 255
    444e:	8f 4f       	sbci	r24, 0xFF	; 255
    4450:	9f 4f       	sbci	r25, 0xFF	; 255
    4452:	99 23       	and	r25, r25
    4454:	a9 f0       	breq	.+42     	; 0x4480 <__floatsisf+0x40>
    4456:	f9 2f       	mov	r31, r25
    4458:	96 e9       	ldi	r25, 0x96	; 150
    445a:	bb 27       	eor	r27, r27
    445c:	93 95       	inc	r25
    445e:	f6 95       	lsr	r31
    4460:	87 95       	ror	r24
    4462:	77 95       	ror	r23
    4464:	67 95       	ror	r22
    4466:	b7 95       	ror	r27
    4468:	f1 11       	cpse	r31, r1
    446a:	f8 cf       	rjmp	.-16     	; 0x445c <__floatsisf+0x1c>
    446c:	fa f4       	brpl	.+62     	; 0x44ac <__floatsisf+0x6c>
    446e:	bb 0f       	add	r27, r27
    4470:	11 f4       	brne	.+4      	; 0x4476 <__floatsisf+0x36>
    4472:	60 ff       	sbrs	r22, 0
    4474:	1b c0       	rjmp	.+54     	; 0x44ac <__floatsisf+0x6c>
    4476:	6f 5f       	subi	r22, 0xFF	; 255
    4478:	7f 4f       	sbci	r23, 0xFF	; 255
    447a:	8f 4f       	sbci	r24, 0xFF	; 255
    447c:	9f 4f       	sbci	r25, 0xFF	; 255
    447e:	16 c0       	rjmp	.+44     	; 0x44ac <__floatsisf+0x6c>
    4480:	88 23       	and	r24, r24
    4482:	11 f0       	breq	.+4      	; 0x4488 <__floatsisf+0x48>
    4484:	96 e9       	ldi	r25, 0x96	; 150
    4486:	11 c0       	rjmp	.+34     	; 0x44aa <__floatsisf+0x6a>
    4488:	77 23       	and	r23, r23
    448a:	21 f0       	breq	.+8      	; 0x4494 <__floatsisf+0x54>
    448c:	9e e8       	ldi	r25, 0x8E	; 142
    448e:	87 2f       	mov	r24, r23
    4490:	76 2f       	mov	r23, r22
    4492:	05 c0       	rjmp	.+10     	; 0x449e <__floatsisf+0x5e>
    4494:	66 23       	and	r22, r22
    4496:	71 f0       	breq	.+28     	; 0x44b4 <__floatsisf+0x74>
    4498:	96 e8       	ldi	r25, 0x86	; 134
    449a:	86 2f       	mov	r24, r22
    449c:	70 e0       	ldi	r23, 0x00	; 0
    449e:	60 e0       	ldi	r22, 0x00	; 0
    44a0:	2a f0       	brmi	.+10     	; 0x44ac <__floatsisf+0x6c>
    44a2:	9a 95       	dec	r25
    44a4:	66 0f       	add	r22, r22
    44a6:	77 1f       	adc	r23, r23
    44a8:	88 1f       	adc	r24, r24
    44aa:	da f7       	brpl	.-10     	; 0x44a2 <__floatsisf+0x62>
    44ac:	88 0f       	add	r24, r24
    44ae:	96 95       	lsr	r25
    44b0:	87 95       	ror	r24
    44b2:	97 f9       	bld	r25, 7
    44b4:	08 95       	ret

000044b6 <__fp_inf>:
    44b6:	97 f9       	bld	r25, 7
    44b8:	9f 67       	ori	r25, 0x7F	; 127
    44ba:	80 e8       	ldi	r24, 0x80	; 128
    44bc:	70 e0       	ldi	r23, 0x00	; 0
    44be:	60 e0       	ldi	r22, 0x00	; 0
    44c0:	08 95       	ret

000044c2 <__fp_nan>:
    44c2:	9f ef       	ldi	r25, 0xFF	; 255
    44c4:	80 ec       	ldi	r24, 0xC0	; 192
    44c6:	08 95       	ret

000044c8 <__fp_pscA>:
    44c8:	00 24       	eor	r0, r0
    44ca:	0a 94       	dec	r0
    44cc:	16 16       	cp	r1, r22
    44ce:	17 06       	cpc	r1, r23
    44d0:	18 06       	cpc	r1, r24
    44d2:	09 06       	cpc	r0, r25
    44d4:	08 95       	ret

000044d6 <__fp_pscB>:
    44d6:	00 24       	eor	r0, r0
    44d8:	0a 94       	dec	r0
    44da:	12 16       	cp	r1, r18
    44dc:	13 06       	cpc	r1, r19
    44de:	14 06       	cpc	r1, r20
    44e0:	05 06       	cpc	r0, r21
    44e2:	08 95       	ret

000044e4 <__fp_round>:
    44e4:	09 2e       	mov	r0, r25
    44e6:	03 94       	inc	r0
    44e8:	00 0c       	add	r0, r0
    44ea:	11 f4       	brne	.+4      	; 0x44f0 <__fp_round+0xc>
    44ec:	88 23       	and	r24, r24
    44ee:	52 f0       	brmi	.+20     	; 0x4504 <__fp_round+0x20>
    44f0:	bb 0f       	add	r27, r27
    44f2:	40 f4       	brcc	.+16     	; 0x4504 <__fp_round+0x20>
    44f4:	bf 2b       	or	r27, r31
    44f6:	11 f4       	brne	.+4      	; 0x44fc <__fp_round+0x18>
    44f8:	60 ff       	sbrs	r22, 0
    44fa:	04 c0       	rjmp	.+8      	; 0x4504 <__fp_round+0x20>
    44fc:	6f 5f       	subi	r22, 0xFF	; 255
    44fe:	7f 4f       	sbci	r23, 0xFF	; 255
    4500:	8f 4f       	sbci	r24, 0xFF	; 255
    4502:	9f 4f       	sbci	r25, 0xFF	; 255
    4504:	08 95       	ret

00004506 <__fp_split3>:
    4506:	57 fd       	sbrc	r21, 7
    4508:	90 58       	subi	r25, 0x80	; 128
    450a:	44 0f       	add	r20, r20
    450c:	55 1f       	adc	r21, r21
    450e:	59 f0       	breq	.+22     	; 0x4526 <__fp_splitA+0x10>
    4510:	5f 3f       	cpi	r21, 0xFF	; 255
    4512:	71 f0       	breq	.+28     	; 0x4530 <__fp_splitA+0x1a>
    4514:	47 95       	ror	r20

00004516 <__fp_splitA>:
    4516:	88 0f       	add	r24, r24
    4518:	97 fb       	bst	r25, 7
    451a:	99 1f       	adc	r25, r25
    451c:	61 f0       	breq	.+24     	; 0x4536 <__fp_splitA+0x20>
    451e:	9f 3f       	cpi	r25, 0xFF	; 255
    4520:	79 f0       	breq	.+30     	; 0x4540 <__fp_splitA+0x2a>
    4522:	87 95       	ror	r24
    4524:	08 95       	ret
    4526:	12 16       	cp	r1, r18
    4528:	13 06       	cpc	r1, r19
    452a:	14 06       	cpc	r1, r20
    452c:	55 1f       	adc	r21, r21
    452e:	f2 cf       	rjmp	.-28     	; 0x4514 <__fp_split3+0xe>
    4530:	46 95       	lsr	r20
    4532:	f1 df       	rcall	.-30     	; 0x4516 <__fp_splitA>
    4534:	08 c0       	rjmp	.+16     	; 0x4546 <__fp_splitA+0x30>
    4536:	16 16       	cp	r1, r22
    4538:	17 06       	cpc	r1, r23
    453a:	18 06       	cpc	r1, r24
    453c:	99 1f       	adc	r25, r25
    453e:	f1 cf       	rjmp	.-30     	; 0x4522 <__fp_splitA+0xc>
    4540:	86 95       	lsr	r24
    4542:	71 05       	cpc	r23, r1
    4544:	61 05       	cpc	r22, r1
    4546:	08 94       	sec
    4548:	08 95       	ret

0000454a <__fp_zero>:
    454a:	e8 94       	clt

0000454c <__fp_szero>:
    454c:	bb 27       	eor	r27, r27
    454e:	66 27       	eor	r22, r22
    4550:	77 27       	eor	r23, r23
    4552:	cb 01       	movw	r24, r22
    4554:	97 f9       	bld	r25, 7
    4556:	08 95       	ret

00004558 <__mulsf3>:
    4558:	0b d0       	rcall	.+22     	; 0x4570 <__mulsf3x>
    455a:	c4 cf       	rjmp	.-120    	; 0x44e4 <__fp_round>
    455c:	b5 df       	rcall	.-150    	; 0x44c8 <__fp_pscA>
    455e:	28 f0       	brcs	.+10     	; 0x456a <__mulsf3+0x12>
    4560:	ba df       	rcall	.-140    	; 0x44d6 <__fp_pscB>
    4562:	18 f0       	brcs	.+6      	; 0x456a <__mulsf3+0x12>
    4564:	95 23       	and	r25, r21
    4566:	09 f0       	breq	.+2      	; 0x456a <__mulsf3+0x12>
    4568:	a6 cf       	rjmp	.-180    	; 0x44b6 <__fp_inf>
    456a:	ab cf       	rjmp	.-170    	; 0x44c2 <__fp_nan>
    456c:	11 24       	eor	r1, r1
    456e:	ee cf       	rjmp	.-36     	; 0x454c <__fp_szero>

00004570 <__mulsf3x>:
    4570:	ca df       	rcall	.-108    	; 0x4506 <__fp_split3>
    4572:	a0 f3       	brcs	.-24     	; 0x455c <__mulsf3+0x4>

00004574 <__mulsf3_pse>:
    4574:	95 9f       	mul	r25, r21
    4576:	d1 f3       	breq	.-12     	; 0x456c <__mulsf3+0x14>
    4578:	95 0f       	add	r25, r21
    457a:	50 e0       	ldi	r21, 0x00	; 0
    457c:	55 1f       	adc	r21, r21
    457e:	62 9f       	mul	r22, r18
    4580:	f0 01       	movw	r30, r0
    4582:	72 9f       	mul	r23, r18
    4584:	bb 27       	eor	r27, r27
    4586:	f0 0d       	add	r31, r0
    4588:	b1 1d       	adc	r27, r1
    458a:	63 9f       	mul	r22, r19
    458c:	aa 27       	eor	r26, r26
    458e:	f0 0d       	add	r31, r0
    4590:	b1 1d       	adc	r27, r1
    4592:	aa 1f       	adc	r26, r26
    4594:	64 9f       	mul	r22, r20
    4596:	66 27       	eor	r22, r22
    4598:	b0 0d       	add	r27, r0
    459a:	a1 1d       	adc	r26, r1
    459c:	66 1f       	adc	r22, r22
    459e:	82 9f       	mul	r24, r18
    45a0:	22 27       	eor	r18, r18
    45a2:	b0 0d       	add	r27, r0
    45a4:	a1 1d       	adc	r26, r1
    45a6:	62 1f       	adc	r22, r18
    45a8:	73 9f       	mul	r23, r19
    45aa:	b0 0d       	add	r27, r0
    45ac:	a1 1d       	adc	r26, r1
    45ae:	62 1f       	adc	r22, r18
    45b0:	83 9f       	mul	r24, r19
    45b2:	a0 0d       	add	r26, r0
    45b4:	61 1d       	adc	r22, r1
    45b6:	22 1f       	adc	r18, r18
    45b8:	74 9f       	mul	r23, r20
    45ba:	33 27       	eor	r19, r19
    45bc:	a0 0d       	add	r26, r0
    45be:	61 1d       	adc	r22, r1
    45c0:	23 1f       	adc	r18, r19
    45c2:	84 9f       	mul	r24, r20
    45c4:	60 0d       	add	r22, r0
    45c6:	21 1d       	adc	r18, r1
    45c8:	82 2f       	mov	r24, r18
    45ca:	76 2f       	mov	r23, r22
    45cc:	6a 2f       	mov	r22, r26
    45ce:	11 24       	eor	r1, r1
    45d0:	9f 57       	subi	r25, 0x7F	; 127
    45d2:	50 40       	sbci	r21, 0x00	; 0
    45d4:	8a f0       	brmi	.+34     	; 0x45f8 <__mulsf3_pse+0x84>
    45d6:	e1 f0       	breq	.+56     	; 0x4610 <__mulsf3_pse+0x9c>
    45d8:	88 23       	and	r24, r24
    45da:	4a f0       	brmi	.+18     	; 0x45ee <__mulsf3_pse+0x7a>
    45dc:	ee 0f       	add	r30, r30
    45de:	ff 1f       	adc	r31, r31
    45e0:	bb 1f       	adc	r27, r27
    45e2:	66 1f       	adc	r22, r22
    45e4:	77 1f       	adc	r23, r23
    45e6:	88 1f       	adc	r24, r24
    45e8:	91 50       	subi	r25, 0x01	; 1
    45ea:	50 40       	sbci	r21, 0x00	; 0
    45ec:	a9 f7       	brne	.-22     	; 0x45d8 <__mulsf3_pse+0x64>
    45ee:	9e 3f       	cpi	r25, 0xFE	; 254
    45f0:	51 05       	cpc	r21, r1
    45f2:	70 f0       	brcs	.+28     	; 0x4610 <__mulsf3_pse+0x9c>
    45f4:	60 cf       	rjmp	.-320    	; 0x44b6 <__fp_inf>
    45f6:	aa cf       	rjmp	.-172    	; 0x454c <__fp_szero>
    45f8:	5f 3f       	cpi	r21, 0xFF	; 255
    45fa:	ec f3       	brlt	.-6      	; 0x45f6 <__mulsf3_pse+0x82>
    45fc:	98 3e       	cpi	r25, 0xE8	; 232
    45fe:	dc f3       	brlt	.-10     	; 0x45f6 <__mulsf3_pse+0x82>
    4600:	86 95       	lsr	r24
    4602:	77 95       	ror	r23
    4604:	67 95       	ror	r22
    4606:	b7 95       	ror	r27
    4608:	f7 95       	ror	r31
    460a:	e7 95       	ror	r30
    460c:	9f 5f       	subi	r25, 0xFF	; 255
    460e:	c1 f7       	brne	.-16     	; 0x4600 <__mulsf3_pse+0x8c>
    4610:	fe 2b       	or	r31, r30
    4612:	88 0f       	add	r24, r24
    4614:	91 1d       	adc	r25, r1
    4616:	96 95       	lsr	r25
    4618:	87 95       	ror	r24
    461a:	97 f9       	bld	r25, 7
    461c:	08 95       	ret

0000461e <pow>:
    461e:	fa 01       	movw	r30, r20
    4620:	ee 0f       	add	r30, r30
    4622:	ff 1f       	adc	r31, r31
    4624:	30 96       	adiw	r30, 0x00	; 0
    4626:	21 05       	cpc	r18, r1
    4628:	31 05       	cpc	r19, r1
    462a:	99 f1       	breq	.+102    	; 0x4692 <pow+0x74>
    462c:	61 15       	cp	r22, r1
    462e:	71 05       	cpc	r23, r1
    4630:	61 f4       	brne	.+24     	; 0x464a <pow+0x2c>
    4632:	80 38       	cpi	r24, 0x80	; 128
    4634:	bf e3       	ldi	r27, 0x3F	; 63
    4636:	9b 07       	cpc	r25, r27
    4638:	49 f1       	breq	.+82     	; 0x468c <pow+0x6e>
    463a:	68 94       	set
    463c:	90 38       	cpi	r25, 0x80	; 128
    463e:	81 05       	cpc	r24, r1
    4640:	61 f0       	breq	.+24     	; 0x465a <pow+0x3c>
    4642:	80 38       	cpi	r24, 0x80	; 128
    4644:	bf ef       	ldi	r27, 0xFF	; 255
    4646:	9b 07       	cpc	r25, r27
    4648:	41 f0       	breq	.+16     	; 0x465a <pow+0x3c>
    464a:	99 23       	and	r25, r25
    464c:	42 f5       	brpl	.+80     	; 0x469e <pow+0x80>
    464e:	ff 3f       	cpi	r31, 0xFF	; 255
    4650:	e1 05       	cpc	r30, r1
    4652:	31 05       	cpc	r19, r1
    4654:	21 05       	cpc	r18, r1
    4656:	11 f1       	breq	.+68     	; 0x469c <pow+0x7e>
    4658:	e8 94       	clt
    465a:	08 94       	sec
    465c:	e7 95       	ror	r30
    465e:	d9 01       	movw	r26, r18
    4660:	aa 23       	and	r26, r26
    4662:	29 f4       	brne	.+10     	; 0x466e <pow+0x50>
    4664:	ab 2f       	mov	r26, r27
    4666:	be 2f       	mov	r27, r30
    4668:	f8 5f       	subi	r31, 0xF8	; 248
    466a:	d0 f3       	brcs	.-12     	; 0x4660 <pow+0x42>
    466c:	10 c0       	rjmp	.+32     	; 0x468e <pow+0x70>
    466e:	ff 5f       	subi	r31, 0xFF	; 255
    4670:	70 f4       	brcc	.+28     	; 0x468e <pow+0x70>
    4672:	a6 95       	lsr	r26
    4674:	e0 f7       	brcc	.-8      	; 0x466e <pow+0x50>
    4676:	f7 39       	cpi	r31, 0x97	; 151
    4678:	50 f0       	brcs	.+20     	; 0x468e <pow+0x70>
    467a:	19 f0       	breq	.+6      	; 0x4682 <pow+0x64>
    467c:	ff 3a       	cpi	r31, 0xAF	; 175
    467e:	38 f4       	brcc	.+14     	; 0x468e <pow+0x70>
    4680:	9f 77       	andi	r25, 0x7F	; 127
    4682:	9f 93       	push	r25
    4684:	0c d0       	rcall	.+24     	; 0x469e <pow+0x80>
    4686:	0f 90       	pop	r0
    4688:	07 fc       	sbrc	r0, 7
    468a:	90 58       	subi	r25, 0x80	; 128
    468c:	08 95       	ret
    468e:	3e f0       	brts	.+14     	; 0x469e <pow+0x80>
    4690:	18 cf       	rjmp	.-464    	; 0x44c2 <__fp_nan>
    4692:	60 e0       	ldi	r22, 0x00	; 0
    4694:	70 e0       	ldi	r23, 0x00	; 0
    4696:	80 e8       	ldi	r24, 0x80	; 128
    4698:	9f e3       	ldi	r25, 0x3F	; 63
    469a:	08 95       	ret
    469c:	4f e7       	ldi	r20, 0x7F	; 127
    469e:	9f 77       	andi	r25, 0x7F	; 127
    46a0:	5f 93       	push	r21
    46a2:	4f 93       	push	r20
    46a4:	3f 93       	push	r19
    46a6:	2f 93       	push	r18
    46a8:	e7 d0       	rcall	.+462    	; 0x4878 <log>
    46aa:	2f 91       	pop	r18
    46ac:	3f 91       	pop	r19
    46ae:	4f 91       	pop	r20
    46b0:	5f 91       	pop	r21
    46b2:	52 df       	rcall	.-348    	; 0x4558 <__mulsf3>
    46b4:	25 c0       	rjmp	.+74     	; 0x4700 <exp>

000046b6 <round>:
    46b6:	2f df       	rcall	.-418    	; 0x4516 <__fp_splitA>
    46b8:	e0 f0       	brcs	.+56     	; 0x46f2 <round+0x3c>
    46ba:	9e 37       	cpi	r25, 0x7E	; 126
    46bc:	d8 f0       	brcs	.+54     	; 0x46f4 <round+0x3e>
    46be:	96 39       	cpi	r25, 0x96	; 150
    46c0:	b8 f4       	brcc	.+46     	; 0x46f0 <round+0x3a>
    46c2:	9e 38       	cpi	r25, 0x8E	; 142
    46c4:	48 f4       	brcc	.+18     	; 0x46d8 <round+0x22>
    46c6:	67 2f       	mov	r22, r23
    46c8:	78 2f       	mov	r23, r24
    46ca:	88 27       	eor	r24, r24
    46cc:	98 5f       	subi	r25, 0xF8	; 248
    46ce:	f9 cf       	rjmp	.-14     	; 0x46c2 <round+0xc>
    46d0:	86 95       	lsr	r24
    46d2:	77 95       	ror	r23
    46d4:	67 95       	ror	r22
    46d6:	93 95       	inc	r25
    46d8:	95 39       	cpi	r25, 0x95	; 149
    46da:	d0 f3       	brcs	.-12     	; 0x46d0 <round+0x1a>
    46dc:	b6 2f       	mov	r27, r22
    46de:	b1 70       	andi	r27, 0x01	; 1
    46e0:	6b 0f       	add	r22, r27
    46e2:	71 1d       	adc	r23, r1
    46e4:	81 1d       	adc	r24, r1
    46e6:	20 f4       	brcc	.+8      	; 0x46f0 <round+0x3a>
    46e8:	87 95       	ror	r24
    46ea:	77 95       	ror	r23
    46ec:	67 95       	ror	r22
    46ee:	93 95       	inc	r25
    46f0:	33 c0       	rjmp	.+102    	; 0x4758 <__fp_mintl>
    46f2:	4d c0       	rjmp	.+154    	; 0x478e <__fp_mpack>
    46f4:	2b cf       	rjmp	.-426    	; 0x454c <__fp_szero>
    46f6:	19 f4       	brne	.+6      	; 0x46fe <round+0x48>
    46f8:	0e f0       	brts	.+2      	; 0x46fc <round+0x46>
    46fa:	dd ce       	rjmp	.-582    	; 0x44b6 <__fp_inf>
    46fc:	26 cf       	rjmp	.-436    	; 0x454a <__fp_zero>
    46fe:	e1 ce       	rjmp	.-574    	; 0x44c2 <__fp_nan>

00004700 <exp>:
    4700:	0a df       	rcall	.-492    	; 0x4516 <__fp_splitA>
    4702:	c8 f3       	brcs	.-14     	; 0x46f6 <round+0x40>
    4704:	96 38       	cpi	r25, 0x86	; 134
    4706:	c0 f7       	brcc	.-16     	; 0x46f8 <round+0x42>
    4708:	07 f8       	bld	r0, 7
    470a:	0f 92       	push	r0
    470c:	e8 94       	clt
    470e:	2b e3       	ldi	r18, 0x3B	; 59
    4710:	3a ea       	ldi	r19, 0xAA	; 170
    4712:	48 eb       	ldi	r20, 0xB8	; 184
    4714:	5f e7       	ldi	r21, 0x7F	; 127
    4716:	2e df       	rcall	.-420    	; 0x4574 <__mulsf3_pse>
    4718:	0f 92       	push	r0
    471a:	0f 92       	push	r0
    471c:	0f 92       	push	r0
    471e:	4d b7       	in	r20, 0x3d	; 61
    4720:	5e b7       	in	r21, 0x3e	; 62
    4722:	0f 92       	push	r0
    4724:	e9 d0       	rcall	.+466    	; 0x48f8 <modf>
    4726:	e4 ee       	ldi	r30, 0xE4	; 228
    4728:	f0 e0       	ldi	r31, 0x00	; 0
    472a:	3f d0       	rcall	.+126    	; 0x47aa <__fp_powser>
    472c:	4f 91       	pop	r20
    472e:	5f 91       	pop	r21
    4730:	ef 91       	pop	r30
    4732:	ff 91       	pop	r31
    4734:	e5 95       	asr	r30
    4736:	ee 1f       	adc	r30, r30
    4738:	ff 1f       	adc	r31, r31
    473a:	49 f0       	breq	.+18     	; 0x474e <exp+0x4e>
    473c:	fe 57       	subi	r31, 0x7E	; 126
    473e:	e0 68       	ori	r30, 0x80	; 128
    4740:	44 27       	eor	r20, r20
    4742:	ee 0f       	add	r30, r30
    4744:	44 1f       	adc	r20, r20
    4746:	fa 95       	dec	r31
    4748:	e1 f7       	brne	.-8      	; 0x4742 <exp+0x42>
    474a:	41 95       	neg	r20
    474c:	55 0b       	sbc	r21, r21
    474e:	5b d0       	rcall	.+182    	; 0x4806 <ldexp>
    4750:	0f 90       	pop	r0
    4752:	07 fe       	sbrs	r0, 7
    4754:	4f c0       	rjmp	.+158    	; 0x47f4 <inverse>
    4756:	08 95       	ret

00004758 <__fp_mintl>:
    4758:	88 23       	and	r24, r24
    475a:	71 f4       	brne	.+28     	; 0x4778 <__fp_mintl+0x20>
    475c:	77 23       	and	r23, r23
    475e:	21 f0       	breq	.+8      	; 0x4768 <__fp_mintl+0x10>
    4760:	98 50       	subi	r25, 0x08	; 8
    4762:	87 2b       	or	r24, r23
    4764:	76 2f       	mov	r23, r22
    4766:	07 c0       	rjmp	.+14     	; 0x4776 <__fp_mintl+0x1e>
    4768:	66 23       	and	r22, r22
    476a:	11 f4       	brne	.+4      	; 0x4770 <__fp_mintl+0x18>
    476c:	99 27       	eor	r25, r25
    476e:	0d c0       	rjmp	.+26     	; 0x478a <__fp_mintl+0x32>
    4770:	90 51       	subi	r25, 0x10	; 16
    4772:	86 2b       	or	r24, r22
    4774:	70 e0       	ldi	r23, 0x00	; 0
    4776:	60 e0       	ldi	r22, 0x00	; 0
    4778:	2a f0       	brmi	.+10     	; 0x4784 <__fp_mintl+0x2c>
    477a:	9a 95       	dec	r25
    477c:	66 0f       	add	r22, r22
    477e:	77 1f       	adc	r23, r23
    4780:	88 1f       	adc	r24, r24
    4782:	da f7       	brpl	.-10     	; 0x477a <__fp_mintl+0x22>
    4784:	88 0f       	add	r24, r24
    4786:	96 95       	lsr	r25
    4788:	87 95       	ror	r24
    478a:	97 f9       	bld	r25, 7
    478c:	08 95       	ret

0000478e <__fp_mpack>:
    478e:	9f 3f       	cpi	r25, 0xFF	; 255
    4790:	31 f0       	breq	.+12     	; 0x479e <__fp_mpack_finite+0xc>

00004792 <__fp_mpack_finite>:
    4792:	91 50       	subi	r25, 0x01	; 1
    4794:	20 f4       	brcc	.+8      	; 0x479e <__fp_mpack_finite+0xc>
    4796:	87 95       	ror	r24
    4798:	77 95       	ror	r23
    479a:	67 95       	ror	r22
    479c:	b7 95       	ror	r27
    479e:	88 0f       	add	r24, r24
    47a0:	91 1d       	adc	r25, r1
    47a2:	96 95       	lsr	r25
    47a4:	87 95       	ror	r24
    47a6:	97 f9       	bld	r25, 7
    47a8:	08 95       	ret

000047aa <__fp_powser>:
    47aa:	df 93       	push	r29
    47ac:	cf 93       	push	r28
    47ae:	1f 93       	push	r17
    47b0:	0f 93       	push	r16
    47b2:	ff 92       	push	r15
    47b4:	ef 92       	push	r14
    47b6:	df 92       	push	r13
    47b8:	7b 01       	movw	r14, r22
    47ba:	8c 01       	movw	r16, r24
    47bc:	68 94       	set
    47be:	05 c0       	rjmp	.+10     	; 0x47ca <__fp_powser+0x20>
    47c0:	da 2e       	mov	r13, r26
    47c2:	ef 01       	movw	r28, r30
    47c4:	d5 de       	rcall	.-598    	; 0x4570 <__mulsf3x>
    47c6:	fe 01       	movw	r30, r28
    47c8:	e8 94       	clt
    47ca:	a5 91       	lpm	r26, Z+
    47cc:	25 91       	lpm	r18, Z+
    47ce:	35 91       	lpm	r19, Z+
    47d0:	45 91       	lpm	r20, Z+
    47d2:	55 91       	lpm	r21, Z+
    47d4:	ae f3       	brts	.-22     	; 0x47c0 <__fp_powser+0x16>
    47d6:	ef 01       	movw	r28, r30
    47d8:	4a dd       	rcall	.-1388   	; 0x426e <__addsf3x>
    47da:	fe 01       	movw	r30, r28
    47dc:	97 01       	movw	r18, r14
    47de:	a8 01       	movw	r20, r16
    47e0:	da 94       	dec	r13
    47e2:	79 f7       	brne	.-34     	; 0x47c2 <__fp_powser+0x18>
    47e4:	df 90       	pop	r13
    47e6:	ef 90       	pop	r14
    47e8:	ff 90       	pop	r15
    47ea:	0f 91       	pop	r16
    47ec:	1f 91       	pop	r17
    47ee:	cf 91       	pop	r28
    47f0:	df 91       	pop	r29
    47f2:	08 95       	ret

000047f4 <inverse>:
    47f4:	9b 01       	movw	r18, r22
    47f6:	ac 01       	movw	r20, r24
    47f8:	60 e0       	ldi	r22, 0x00	; 0
    47fa:	70 e0       	ldi	r23, 0x00	; 0
    47fc:	80 e8       	ldi	r24, 0x80	; 128
    47fe:	9f e3       	ldi	r25, 0x3F	; 63
    4800:	89 cd       	rjmp	.-1262   	; 0x4314 <__divsf3>
    4802:	59 ce       	rjmp	.-846    	; 0x44b6 <__fp_inf>
    4804:	c4 cf       	rjmp	.-120    	; 0x478e <__fp_mpack>

00004806 <ldexp>:
    4806:	87 de       	rcall	.-754    	; 0x4516 <__fp_splitA>
    4808:	e8 f3       	brcs	.-6      	; 0x4804 <inverse+0x10>
    480a:	99 23       	and	r25, r25
    480c:	d9 f3       	breq	.-10     	; 0x4804 <inverse+0x10>
    480e:	94 0f       	add	r25, r20
    4810:	51 1d       	adc	r21, r1
    4812:	bb f3       	brvs	.-18     	; 0x4802 <inverse+0xe>
    4814:	91 50       	subi	r25, 0x01	; 1
    4816:	50 40       	sbci	r21, 0x00	; 0
    4818:	94 f0       	brlt	.+36     	; 0x483e <ldexp+0x38>
    481a:	59 f0       	breq	.+22     	; 0x4832 <ldexp+0x2c>
    481c:	88 23       	and	r24, r24
    481e:	32 f0       	brmi	.+12     	; 0x482c <ldexp+0x26>
    4820:	66 0f       	add	r22, r22
    4822:	77 1f       	adc	r23, r23
    4824:	88 1f       	adc	r24, r24
    4826:	91 50       	subi	r25, 0x01	; 1
    4828:	50 40       	sbci	r21, 0x00	; 0
    482a:	c1 f7       	brne	.-16     	; 0x481c <ldexp+0x16>
    482c:	9e 3f       	cpi	r25, 0xFE	; 254
    482e:	51 05       	cpc	r21, r1
    4830:	44 f7       	brge	.-48     	; 0x4802 <inverse+0xe>
    4832:	88 0f       	add	r24, r24
    4834:	91 1d       	adc	r25, r1
    4836:	96 95       	lsr	r25
    4838:	87 95       	ror	r24
    483a:	97 f9       	bld	r25, 7
    483c:	08 95       	ret
    483e:	5f 3f       	cpi	r21, 0xFF	; 255
    4840:	ac f0       	brlt	.+42     	; 0x486c <ldexp+0x66>
    4842:	98 3e       	cpi	r25, 0xE8	; 232
    4844:	9c f0       	brlt	.+38     	; 0x486c <ldexp+0x66>
    4846:	bb 27       	eor	r27, r27
    4848:	86 95       	lsr	r24
    484a:	77 95       	ror	r23
    484c:	67 95       	ror	r22
    484e:	b7 95       	ror	r27
    4850:	08 f4       	brcc	.+2      	; 0x4854 <ldexp+0x4e>
    4852:	b1 60       	ori	r27, 0x01	; 1
    4854:	93 95       	inc	r25
    4856:	c1 f7       	brne	.-16     	; 0x4848 <ldexp+0x42>
    4858:	bb 0f       	add	r27, r27
    485a:	58 f7       	brcc	.-42     	; 0x4832 <ldexp+0x2c>
    485c:	11 f4       	brne	.+4      	; 0x4862 <ldexp+0x5c>
    485e:	60 ff       	sbrs	r22, 0
    4860:	e8 cf       	rjmp	.-48     	; 0x4832 <ldexp+0x2c>
    4862:	6f 5f       	subi	r22, 0xFF	; 255
    4864:	7f 4f       	sbci	r23, 0xFF	; 255
    4866:	8f 4f       	sbci	r24, 0xFF	; 255
    4868:	9f 4f       	sbci	r25, 0xFF	; 255
    486a:	e3 cf       	rjmp	.-58     	; 0x4832 <ldexp+0x2c>
    486c:	6f ce       	rjmp	.-802    	; 0x454c <__fp_szero>
    486e:	0e f0       	brts	.+2      	; 0x4872 <ldexp+0x6c>
    4870:	8e cf       	rjmp	.-228    	; 0x478e <__fp_mpack>
    4872:	27 ce       	rjmp	.-946    	; 0x44c2 <__fp_nan>
    4874:	68 94       	set
    4876:	1f ce       	rjmp	.-962    	; 0x44b6 <__fp_inf>

00004878 <log>:
    4878:	4e de       	rcall	.-868    	; 0x4516 <__fp_splitA>
    487a:	c8 f3       	brcs	.-14     	; 0x486e <ldexp+0x68>
    487c:	99 23       	and	r25, r25
    487e:	d1 f3       	breq	.-12     	; 0x4874 <ldexp+0x6e>
    4880:	c6 f3       	brts	.-16     	; 0x4872 <ldexp+0x6c>
    4882:	df 93       	push	r29
    4884:	cf 93       	push	r28
    4886:	1f 93       	push	r17
    4888:	0f 93       	push	r16
    488a:	ff 92       	push	r15
    488c:	c9 2f       	mov	r28, r25
    488e:	dd 27       	eor	r29, r29
    4890:	88 23       	and	r24, r24
    4892:	2a f0       	brmi	.+10     	; 0x489e <log+0x26>
    4894:	21 97       	sbiw	r28, 0x01	; 1
    4896:	66 0f       	add	r22, r22
    4898:	77 1f       	adc	r23, r23
    489a:	88 1f       	adc	r24, r24
    489c:	da f7       	brpl	.-10     	; 0x4894 <log+0x1c>
    489e:	20 e0       	ldi	r18, 0x00	; 0
    48a0:	30 e0       	ldi	r19, 0x00	; 0
    48a2:	40 e8       	ldi	r20, 0x80	; 128
    48a4:	5f eb       	ldi	r21, 0xBF	; 191
    48a6:	9f e3       	ldi	r25, 0x3F	; 63
    48a8:	88 39       	cpi	r24, 0x98	; 152
    48aa:	20 f0       	brcs	.+8      	; 0x48b4 <log+0x3c>
    48ac:	80 3e       	cpi	r24, 0xE0	; 224
    48ae:	30 f0       	brcs	.+12     	; 0x48bc <log+0x44>
    48b0:	21 96       	adiw	r28, 0x01	; 1
    48b2:	8f 77       	andi	r24, 0x7F	; 127
    48b4:	cb dc       	rcall	.-1642   	; 0x424c <__addsf3>
    48b6:	ec e0       	ldi	r30, 0x0C	; 12
    48b8:	f1 e0       	ldi	r31, 0x01	; 1
    48ba:	03 c0       	rjmp	.+6      	; 0x48c2 <log+0x4a>
    48bc:	c7 dc       	rcall	.-1650   	; 0x424c <__addsf3>
    48be:	e9 e3       	ldi	r30, 0x39	; 57
    48c0:	f1 e0       	ldi	r31, 0x01	; 1
    48c2:	73 df       	rcall	.-282    	; 0x47aa <__fp_powser>
    48c4:	8b 01       	movw	r16, r22
    48c6:	be 01       	movw	r22, r28
    48c8:	ec 01       	movw	r28, r24
    48ca:	fb 2e       	mov	r15, r27
    48cc:	6f 57       	subi	r22, 0x7F	; 127
    48ce:	71 09       	sbc	r23, r1
    48d0:	75 95       	asr	r23
    48d2:	77 1f       	adc	r23, r23
    48d4:	88 0b       	sbc	r24, r24
    48d6:	99 0b       	sbc	r25, r25
    48d8:	b3 dd       	rcall	.-1178   	; 0x4440 <__floatsisf>
    48da:	28 e1       	ldi	r18, 0x18	; 24
    48dc:	32 e7       	ldi	r19, 0x72	; 114
    48de:	41 e3       	ldi	r20, 0x31	; 49
    48e0:	5f e3       	ldi	r21, 0x3F	; 63
    48e2:	46 de       	rcall	.-884    	; 0x4570 <__mulsf3x>
    48e4:	af 2d       	mov	r26, r15
    48e6:	98 01       	movw	r18, r16
    48e8:	ae 01       	movw	r20, r28
    48ea:	ff 90       	pop	r15
    48ec:	0f 91       	pop	r16
    48ee:	1f 91       	pop	r17
    48f0:	cf 91       	pop	r28
    48f2:	df 91       	pop	r29
    48f4:	bc dc       	rcall	.-1672   	; 0x426e <__addsf3x>
    48f6:	f6 cd       	rjmp	.-1044   	; 0x44e4 <__fp_round>

000048f8 <modf>:
    48f8:	fa 01       	movw	r30, r20
    48fa:	dc 01       	movw	r26, r24
    48fc:	aa 0f       	add	r26, r26
    48fe:	bb 1f       	adc	r27, r27
    4900:	9b 01       	movw	r18, r22
    4902:	ac 01       	movw	r20, r24
    4904:	bf 57       	subi	r27, 0x7F	; 127
    4906:	28 f4       	brcc	.+10     	; 0x4912 <modf+0x1a>
    4908:	22 27       	eor	r18, r18
    490a:	33 27       	eor	r19, r19
    490c:	44 27       	eor	r20, r20
    490e:	50 78       	andi	r21, 0x80	; 128
    4910:	1f c0       	rjmp	.+62     	; 0x4950 <modf+0x58>
    4912:	b7 51       	subi	r27, 0x17	; 23
    4914:	88 f4       	brcc	.+34     	; 0x4938 <modf+0x40>
    4916:	ab 2f       	mov	r26, r27
    4918:	00 24       	eor	r0, r0
    491a:	46 95       	lsr	r20
    491c:	37 95       	ror	r19
    491e:	27 95       	ror	r18
    4920:	01 1c       	adc	r0, r1
    4922:	a3 95       	inc	r26
    4924:	d2 f3       	brmi	.-12     	; 0x491a <modf+0x22>
    4926:	00 20       	and	r0, r0
    4928:	69 f0       	breq	.+26     	; 0x4944 <modf+0x4c>
    492a:	22 0f       	add	r18, r18
    492c:	33 1f       	adc	r19, r19
    492e:	44 1f       	adc	r20, r20
    4930:	b3 95       	inc	r27
    4932:	da f3       	brmi	.-10     	; 0x492a <modf+0x32>
    4934:	0d d0       	rcall	.+26     	; 0x4950 <modf+0x58>
    4936:	89 cc       	rjmp	.-1774   	; 0x424a <__subsf3>
    4938:	61 30       	cpi	r22, 0x01	; 1
    493a:	71 05       	cpc	r23, r1
    493c:	a0 e8       	ldi	r26, 0x80	; 128
    493e:	8a 07       	cpc	r24, r26
    4940:	b9 46       	sbci	r27, 0x69	; 105
    4942:	30 f4       	brcc	.+12     	; 0x4950 <modf+0x58>
    4944:	9b 01       	movw	r18, r22
    4946:	ac 01       	movw	r20, r24
    4948:	66 27       	eor	r22, r22
    494a:	77 27       	eor	r23, r23
    494c:	88 27       	eor	r24, r24
    494e:	90 78       	andi	r25, 0x80	; 128
    4950:	30 96       	adiw	r30, 0x00	; 0
    4952:	21 f0       	breq	.+8      	; 0x495c <modf+0x64>
    4954:	20 83       	st	Z, r18
    4956:	31 83       	std	Z+1, r19	; 0x01
    4958:	42 83       	std	Z+2, r20	; 0x02
    495a:	53 83       	std	Z+3, r21	; 0x03
    495c:	08 95       	ret

0000495e <__udivmodsi4>:
    495e:	a1 e2       	ldi	r26, 0x21	; 33
    4960:	1a 2e       	mov	r1, r26
    4962:	aa 1b       	sub	r26, r26
    4964:	bb 1b       	sub	r27, r27
    4966:	fd 01       	movw	r30, r26
    4968:	0d c0       	rjmp	.+26     	; 0x4984 <__udivmodsi4_ep>

0000496a <__udivmodsi4_loop>:
    496a:	aa 1f       	adc	r26, r26
    496c:	bb 1f       	adc	r27, r27
    496e:	ee 1f       	adc	r30, r30
    4970:	ff 1f       	adc	r31, r31
    4972:	a2 17       	cp	r26, r18
    4974:	b3 07       	cpc	r27, r19
    4976:	e4 07       	cpc	r30, r20
    4978:	f5 07       	cpc	r31, r21
    497a:	20 f0       	brcs	.+8      	; 0x4984 <__udivmodsi4_ep>
    497c:	a2 1b       	sub	r26, r18
    497e:	b3 0b       	sbc	r27, r19
    4980:	e4 0b       	sbc	r30, r20
    4982:	f5 0b       	sbc	r31, r21

00004984 <__udivmodsi4_ep>:
    4984:	66 1f       	adc	r22, r22
    4986:	77 1f       	adc	r23, r23
    4988:	88 1f       	adc	r24, r24
    498a:	99 1f       	adc	r25, r25
    498c:	1a 94       	dec	r1
    498e:	69 f7       	brne	.-38     	; 0x496a <__udivmodsi4_loop>
    4990:	60 95       	com	r22
    4992:	70 95       	com	r23
    4994:	80 95       	com	r24
    4996:	90 95       	com	r25
    4998:	9b 01       	movw	r18, r22
    499a:	ac 01       	movw	r20, r24
    499c:	bd 01       	movw	r22, r26
    499e:	cf 01       	movw	r24, r30
    49a0:	08 95       	ret

000049a2 <memcpy>:
    49a2:	fb 01       	movw	r30, r22
    49a4:	dc 01       	movw	r26, r24
    49a6:	02 c0       	rjmp	.+4      	; 0x49ac <memcpy+0xa>
    49a8:	01 90       	ld	r0, Z+
    49aa:	0d 92       	st	X+, r0
    49ac:	41 50       	subi	r20, 0x01	; 1
    49ae:	50 40       	sbci	r21, 0x00	; 0
    49b0:	d8 f7       	brcc	.-10     	; 0x49a8 <memcpy+0x6>
    49b2:	08 95       	ret

000049b4 <memset>:
    49b4:	dc 01       	movw	r26, r24
    49b6:	01 c0       	rjmp	.+2      	; 0x49ba <memset+0x6>
    49b8:	6d 93       	st	X+, r22
    49ba:	41 50       	subi	r20, 0x01	; 1
    49bc:	50 40       	sbci	r21, 0x00	; 0
    49be:	e0 f7       	brcc	.-8      	; 0x49b8 <memset+0x4>
    49c0:	08 95       	ret

000049c2 <_exit>:
    49c2:	f8 94       	cli

000049c4 <__stop_program>:
    49c4:	ff cf       	rjmp	.-2      	; 0x49c4 <__stop_program>
