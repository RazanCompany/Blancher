
blancher.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000072  00800200  0000416e  00004202  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000416e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000cfa  00800272  00800272  00004274  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00004274  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000042a4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000a48  00000000  00000000  000042e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000c45f  00000000  00000000  00004d2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000317d  00000000  00000000  0001118b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00009790  00000000  00000000  00014308  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001c24  00000000  00000000  0001da98  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0001895a  00000000  00000000  0001f6bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000096a9  00000000  00000000  00038016  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000b00  00000000  00000000  000416bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00006931  00000000  00000000  000421bf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	9a c0       	rjmp	.+308    	; 0x136 <__ctors_end>
       2:	00 00       	nop
       4:	b9 c0       	rjmp	.+370    	; 0x178 <__bad_interrupt>
       6:	00 00       	nop
       8:	b7 c0       	rjmp	.+366    	; 0x178 <__bad_interrupt>
       a:	00 00       	nop
       c:	b5 c0       	rjmp	.+362    	; 0x178 <__bad_interrupt>
       e:	00 00       	nop
      10:	b3 c0       	rjmp	.+358    	; 0x178 <__bad_interrupt>
      12:	00 00       	nop
      14:	b1 c0       	rjmp	.+354    	; 0x178 <__bad_interrupt>
      16:	00 00       	nop
      18:	af c0       	rjmp	.+350    	; 0x178 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	ad c0       	rjmp	.+346    	; 0x178 <__bad_interrupt>
      1e:	00 00       	nop
      20:	ab c0       	rjmp	.+342    	; 0x178 <__bad_interrupt>
      22:	00 00       	nop
      24:	a9 c0       	rjmp	.+338    	; 0x178 <__bad_interrupt>
      26:	00 00       	nop
      28:	a7 c0       	rjmp	.+334    	; 0x178 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	a5 c0       	rjmp	.+330    	; 0x178 <__bad_interrupt>
      2e:	00 00       	nop
      30:	0c 94 fd 14 	jmp	0x29fa	; 0x29fa <__vector_12>
      34:	0c 94 5e 20 	jmp	0x40bc	; 0x40bc <__vector_13>
      38:	9f c0       	rjmp	.+318    	; 0x178 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	9d c0       	rjmp	.+314    	; 0x178 <__bad_interrupt>
      3e:	00 00       	nop
      40:	9b c0       	rjmp	.+310    	; 0x178 <__bad_interrupt>
      42:	00 00       	nop
      44:	9a c0       	rjmp	.+308    	; 0x17a <__vector_17>
      46:	00 00       	nop
      48:	97 c0       	rjmp	.+302    	; 0x178 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	95 c0       	rjmp	.+298    	; 0x178 <__bad_interrupt>
      4e:	00 00       	nop
      50:	93 c0       	rjmp	.+294    	; 0x178 <__bad_interrupt>
      52:	00 00       	nop
      54:	91 c0       	rjmp	.+290    	; 0x178 <__bad_interrupt>
      56:	00 00       	nop
      58:	8f c0       	rjmp	.+286    	; 0x178 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	8d c0       	rjmp	.+282    	; 0x178 <__bad_interrupt>
      5e:	00 00       	nop
      60:	8b c0       	rjmp	.+278    	; 0x178 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 0b 0c 	jmp	0x1816	; 0x1816 <__vector_25>
      68:	0c 94 44 0c 	jmp	0x1888	; 0x1888 <__vector_26>
      6c:	85 c0       	rjmp	.+266    	; 0x178 <__bad_interrupt>
      6e:	00 00       	nop
      70:	83 c0       	rjmp	.+262    	; 0x178 <__bad_interrupt>
      72:	00 00       	nop
      74:	0c 94 a7 0b 	jmp	0x174e	; 0x174e <__vector_29>
      78:	7f c0       	rjmp	.+254    	; 0x178 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	7d c0       	rjmp	.+250    	; 0x178 <__bad_interrupt>
      7e:	00 00       	nop
      80:	e2 c0       	rjmp	.+452    	; 0x246 <__vector_32>
      82:	00 00       	nop
      84:	79 c0       	rjmp	.+242    	; 0x178 <__bad_interrupt>
      86:	00 00       	nop
      88:	77 c0       	rjmp	.+238    	; 0x178 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	75 c0       	rjmp	.+234    	; 0x178 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 11 0d 	jmp	0x1a22	; 0x1a22 <__vector_36>
      94:	0c 94 4a 0d 	jmp	0x1a94	; 0x1a94 <__vector_37>
      98:	6f c0       	rjmp	.+222    	; 0x178 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	6d c0       	rjmp	.+218    	; 0x178 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	6b c0       	rjmp	.+214    	; 0x178 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	69 c0       	rjmp	.+210    	; 0x178 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	34 c1       	rjmp	.+616    	; 0x312 <__vector_42>
      aa:	00 00       	nop
      ac:	65 c0       	rjmp	.+202    	; 0x178 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	63 c0       	rjmp	.+198    	; 0x178 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	61 c0       	rjmp	.+194    	; 0x178 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	5f c0       	rjmp	.+190    	; 0x178 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	90 c1       	rjmp	.+800    	; 0x3de <__vector_47>
      be:	00 00       	nop
      c0:	5b c0       	rjmp	.+182    	; 0x178 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	59 c0       	rjmp	.+178    	; 0x178 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	57 c0       	rjmp	.+174    	; 0x178 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 5c 0e 	jmp	0x1cb8	; 0x1cb8 <__vector_51>
      d0:	0c 94 95 0e 	jmp	0x1d2a	; 0x1d2a <__vector_52>
      d4:	51 c0       	rjmp	.+162    	; 0x178 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 a4 0f 	jmp	0x1f48	; 0x1f48 <__vector_54>
      dc:	0c 94 dd 0f 	jmp	0x1fba	; 0x1fba <__vector_55>
      e0:	4b c0       	rjmp	.+150    	; 0x178 <__bad_interrupt>
	...

000000e4 <prvIdleTask>:
    /* Reset the event list item to its normal value - so it can be used with
    queues and semaphores. */
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */

    return uxReturn;
}
      e4:	cd e7       	ldi	r28, 0x7D	; 125
      e6:	dc e0       	ldi	r29, 0x0C	; 12
      e8:	03 e9       	ldi	r16, 0x93	; 147
      ea:	1c e0       	ldi	r17, 0x0C	; 12
      ec:	80 91 7c 0c 	lds	r24, 0x0C7C	; 0x800c7c <uxDeletedTasksWaitingCleanUp>
      f0:	88 23       	and	r24, r24
      f2:	d1 f0       	breq	.+52     	; 0x128 <prvIdleTask+0x44>
      f4:	0f b6       	in	r0, 0x3f	; 63
      f6:	f8 94       	cli
      f8:	0f 92       	push	r0
      fa:	ed 81       	ldd	r30, Y+5	; 0x05
      fc:	fe 81       	ldd	r31, Y+6	; 0x06
      fe:	86 81       	ldd	r24, Z+6	; 0x06
     100:	97 81       	ldd	r25, Z+7	; 0x07
     102:	02 96       	adiw	r24, 0x02	; 2
     104:	0e 94 65 13 	call	0x26ca	; 0x26ca <uxListRemove>
     108:	80 91 7b 0c 	lds	r24, 0x0C7B	; 0x800c7b <uxCurrentNumberOfTasks>
     10c:	81 50       	subi	r24, 0x01	; 1
     10e:	80 93 7b 0c 	sts	0x0C7B, r24	; 0x800c7b <uxCurrentNumberOfTasks>
     112:	80 91 7c 0c 	lds	r24, 0x0C7C	; 0x800c7c <uxDeletedTasksWaitingCleanUp>
     116:	81 50       	subi	r24, 0x01	; 1
     118:	80 93 7c 0c 	sts	0x0C7C, r24	; 0x800c7c <uxDeletedTasksWaitingCleanUp>
     11c:	0f 90       	pop	r0
     11e:	0f be       	out	0x3f, r0	; 63
     120:	80 91 7c 0c 	lds	r24, 0x0C7C	; 0x800c7c <uxDeletedTasksWaitingCleanUp>
     124:	81 11       	cpse	r24, r1
     126:	e6 cf       	rjmp	.-52     	; 0xf4 <prvIdleTask+0x10>
     128:	f8 01       	movw	r30, r16
     12a:	80 81       	ld	r24, Z
     12c:	82 30       	cpi	r24, 0x02	; 2
     12e:	f0 f2       	brcs	.-68     	; 0xec <prvIdleTask+0x8>
     130:	0e 94 3a 14 	call	0x2874	; 0x2874 <vPortYield>
     134:	db cf       	rjmp	.-74     	; 0xec <prvIdleTask+0x8>

00000136 <__ctors_end>:
     136:	11 24       	eor	r1, r1
     138:	1f be       	out	0x3f, r1	; 63
     13a:	cf ef       	ldi	r28, 0xFF	; 255
     13c:	d1 e2       	ldi	r29, 0x21	; 33
     13e:	de bf       	out	0x3e, r29	; 62
     140:	cd bf       	out	0x3d, r28	; 61
     142:	00 e0       	ldi	r16, 0x00	; 0
     144:	0c bf       	out	0x3c, r16	; 60

00000146 <__do_copy_data>:
     146:	12 e0       	ldi	r17, 0x02	; 2
     148:	a0 e0       	ldi	r26, 0x00	; 0
     14a:	b2 e0       	ldi	r27, 0x02	; 2
     14c:	ee e6       	ldi	r30, 0x6E	; 110
     14e:	f1 e4       	ldi	r31, 0x41	; 65
     150:	00 e0       	ldi	r16, 0x00	; 0
     152:	0b bf       	out	0x3b, r16	; 59
     154:	02 c0       	rjmp	.+4      	; 0x15a <__do_copy_data+0x14>
     156:	07 90       	elpm	r0, Z+
     158:	0d 92       	st	X+, r0
     15a:	a2 37       	cpi	r26, 0x72	; 114
     15c:	b1 07       	cpc	r27, r17
     15e:	d9 f7       	brne	.-10     	; 0x156 <__do_copy_data+0x10>

00000160 <__do_clear_bss>:
     160:	2f e0       	ldi	r18, 0x0F	; 15
     162:	a2 e7       	ldi	r26, 0x72	; 114
     164:	b2 e0       	ldi	r27, 0x02	; 2
     166:	01 c0       	rjmp	.+2      	; 0x16a <.do_clear_bss_start>

00000168 <.do_clear_bss_loop>:
     168:	1d 92       	st	X+, r1

0000016a <.do_clear_bss_start>:
     16a:	ac 36       	cpi	r26, 0x6C	; 108
     16c:	b2 07       	cpc	r27, r18
     16e:	e1 f7       	brne	.-8      	; 0x168 <.do_clear_bss_loop>
     170:	0e 94 66 0b 	call	0x16cc	; 0x16cc <main>
     174:	0c 94 b5 20 	jmp	0x416a	; 0x416a <_exit>

00000178 <__bad_interrupt>:
     178:	43 cf       	rjmp	.-378    	; 0x0 <__vectors>

0000017a <__vector_17>:
    return 1;// Setup done ok
}//timer_init

// intruptted service routine when we have rech the number of  Ticks On Encoder
ISR(TIMER1_COMPA_vect)
{
     17a:	1f 92       	push	r1
     17c:	0f 92       	push	r0
     17e:	0f b6       	in	r0, 0x3f	; 63
     180:	0f 92       	push	r0
     182:	11 24       	eor	r1, r1
     184:	0b b6       	in	r0, 0x3b	; 59
     186:	0f 92       	push	r0
     188:	cf 92       	push	r12
     18a:	df 92       	push	r13
     18c:	ef 92       	push	r14
     18e:	ff 92       	push	r15
     190:	0f 93       	push	r16
     192:	1f 93       	push	r17
     194:	2f 93       	push	r18
     196:	3f 93       	push	r19
     198:	4f 93       	push	r20
     19a:	5f 93       	push	r21
     19c:	6f 93       	push	r22
     19e:	7f 93       	push	r23
     1a0:	8f 93       	push	r24
     1a2:	9f 93       	push	r25
     1a4:	af 93       	push	r26
     1a6:	bf 93       	push	r27
     1a8:	ef 93       	push	r30
     1aa:	ff 93       	push	r31
	// get the time now
	g_Timer1_new_time = Get_millis();
     1ac:	0e 94 53 20 	call	0x40a6	; 0x40a6 <Get_millis>
     1b0:	8b 01       	movw	r16, r22
     1b2:	9c 01       	movw	r18, r24
     1b4:	60 93 4c 0d 	sts	0x0D4C, r22	; 0x800d4c <g_Timer1_new_time>
     1b8:	70 93 4d 0d 	sts	0x0D4D, r23	; 0x800d4d <g_Timer1_new_time+0x1>
     1bc:	80 93 4e 0d 	sts	0x0D4E, r24	; 0x800d4e <g_Timer1_new_time+0x2>
     1c0:	90 93 4f 0d 	sts	0x0D4F, r25	; 0x800d4f <g_Timer1_new_time+0x3>
	// calculate the diff between now and last interrupt
	g_diff_time = g_Timer1_new_time - g_Timer1_old_time;
     1c4:	40 91 2c 0d 	lds	r20, 0x0D2C	; 0x800d2c <g_Timer1_old_time>
     1c8:	50 91 2d 0d 	lds	r21, 0x0D2D	; 0x800d2d <g_Timer1_old_time+0x1>
     1cc:	60 91 2e 0d 	lds	r22, 0x0D2E	; 0x800d2e <g_Timer1_old_time+0x2>
     1d0:	70 91 2f 0d 	lds	r23, 0x0D2F	; 0x800d2f <g_Timer1_old_time+0x3>
     1d4:	68 01       	movw	r12, r16
     1d6:	79 01       	movw	r14, r18
     1d8:	c4 1a       	sub	r12, r20
     1da:	d5 0a       	sbc	r13, r21
     1dc:	e6 0a       	sbc	r14, r22
     1de:	f7 0a       	sbc	r15, r23
     1e0:	c7 01       	movw	r24, r14
     1e2:	b6 01       	movw	r22, r12
     1e4:	c0 92 34 0d 	sts	0x0D34, r12	; 0x800d34 <g_diff_time>
     1e8:	d0 92 35 0d 	sts	0x0D35, r13	; 0x800d35 <g_diff_time+0x1>
     1ec:	e0 92 36 0d 	sts	0x0D36, r14	; 0x800d36 <g_diff_time+0x2>
     1f0:	f0 92 37 0d 	sts	0x0D37, r15	; 0x800d37 <g_diff_time+0x3>
	// save the to the old time to next interrupt
	g_Timer1_old_time = g_Timer1_new_time;
     1f4:	00 93 2c 0d 	sts	0x0D2C, r16	; 0x800d2c <g_Timer1_old_time>
     1f8:	10 93 2d 0d 	sts	0x0D2D, r17	; 0x800d2d <g_Timer1_old_time+0x1>
     1fc:	20 93 2e 0d 	sts	0x0D2E, r18	; 0x800d2e <g_Timer1_old_time+0x2>
     200:	30 93 2f 0d 	sts	0x0D2F, r19	; 0x800d2f <g_Timer1_old_time+0x3>
	//call back function on upper layer to get time
	g_timer1_config->isr_call_back(g_diff_time);
     204:	e0 91 46 0d 	lds	r30, 0x0D46	; 0x800d46 <g_timer1_config>
     208:	f0 91 47 0d 	lds	r31, 0x0D47	; 0x800d47 <g_timer1_config+0x1>
     20c:	02 80       	ldd	r0, Z+2	; 0x02
     20e:	f3 81       	ldd	r31, Z+3	; 0x03
     210:	e0 2d       	mov	r30, r0
     212:	19 95       	eicall
}
     214:	ff 91       	pop	r31
     216:	ef 91       	pop	r30
     218:	bf 91       	pop	r27
     21a:	af 91       	pop	r26
     21c:	9f 91       	pop	r25
     21e:	8f 91       	pop	r24
     220:	7f 91       	pop	r23
     222:	6f 91       	pop	r22
     224:	5f 91       	pop	r21
     226:	4f 91       	pop	r20
     228:	3f 91       	pop	r19
     22a:	2f 91       	pop	r18
     22c:	1f 91       	pop	r17
     22e:	0f 91       	pop	r16
     230:	ff 90       	pop	r15
     232:	ef 90       	pop	r14
     234:	df 90       	pop	r13
     236:	cf 90       	pop	r12
     238:	0f 90       	pop	r0
     23a:	0b be       	out	0x3b, r0	; 59
     23c:	0f 90       	pop	r0
     23e:	0f be       	out	0x3f, r0	; 63
     240:	0f 90       	pop	r0
     242:	1f 90       	pop	r1
     244:	18 95       	reti

00000246 <__vector_32>:
// intruptted service routine when we have rech the number of  Ticks On Encoder
ISR(TIMER3_COMPA_vect)
{
     246:	1f 92       	push	r1
     248:	0f 92       	push	r0
     24a:	0f b6       	in	r0, 0x3f	; 63
     24c:	0f 92       	push	r0
     24e:	11 24       	eor	r1, r1
     250:	0b b6       	in	r0, 0x3b	; 59
     252:	0f 92       	push	r0
     254:	cf 92       	push	r12
     256:	df 92       	push	r13
     258:	ef 92       	push	r14
     25a:	ff 92       	push	r15
     25c:	0f 93       	push	r16
     25e:	1f 93       	push	r17
     260:	2f 93       	push	r18
     262:	3f 93       	push	r19
     264:	4f 93       	push	r20
     266:	5f 93       	push	r21
     268:	6f 93       	push	r22
     26a:	7f 93       	push	r23
     26c:	8f 93       	push	r24
     26e:	9f 93       	push	r25
     270:	af 93       	push	r26
     272:	bf 93       	push	r27
     274:	ef 93       	push	r30
     276:	ff 93       	push	r31
	// get the time now
	g_Timer3_new_time = Get_millis();
     278:	0e 94 53 20 	call	0x40a6	; 0x40a6 <Get_millis>
     27c:	8b 01       	movw	r16, r22
     27e:	9c 01       	movw	r18, r24
     280:	60 93 42 0d 	sts	0x0D42, r22	; 0x800d42 <g_Timer3_new_time>
     284:	70 93 43 0d 	sts	0x0D43, r23	; 0x800d43 <g_Timer3_new_time+0x1>
     288:	80 93 44 0d 	sts	0x0D44, r24	; 0x800d44 <g_Timer3_new_time+0x2>
     28c:	90 93 45 0d 	sts	0x0D45, r25	; 0x800d45 <g_Timer3_new_time+0x3>
	// calculate the diff between now and last interrupt
	g_diff_time = g_Timer3_new_time - g_Timer3_old_time;
     290:	40 91 26 0d 	lds	r20, 0x0D26	; 0x800d26 <g_Timer3_old_time>
     294:	50 91 27 0d 	lds	r21, 0x0D27	; 0x800d27 <g_Timer3_old_time+0x1>
     298:	60 91 28 0d 	lds	r22, 0x0D28	; 0x800d28 <g_Timer3_old_time+0x2>
     29c:	70 91 29 0d 	lds	r23, 0x0D29	; 0x800d29 <g_Timer3_old_time+0x3>
     2a0:	68 01       	movw	r12, r16
     2a2:	79 01       	movw	r14, r18
     2a4:	c4 1a       	sub	r12, r20
     2a6:	d5 0a       	sbc	r13, r21
     2a8:	e6 0a       	sbc	r14, r22
     2aa:	f7 0a       	sbc	r15, r23
     2ac:	c7 01       	movw	r24, r14
     2ae:	b6 01       	movw	r22, r12
     2b0:	c0 92 34 0d 	sts	0x0D34, r12	; 0x800d34 <g_diff_time>
     2b4:	d0 92 35 0d 	sts	0x0D35, r13	; 0x800d35 <g_diff_time+0x1>
     2b8:	e0 92 36 0d 	sts	0x0D36, r14	; 0x800d36 <g_diff_time+0x2>
     2bc:	f0 92 37 0d 	sts	0x0D37, r15	; 0x800d37 <g_diff_time+0x3>
	// save the to the old time to next interrupt
	g_Timer3_old_time = g_Timer3_new_time;
     2c0:	00 93 26 0d 	sts	0x0D26, r16	; 0x800d26 <g_Timer3_old_time>
     2c4:	10 93 27 0d 	sts	0x0D27, r17	; 0x800d27 <g_Timer3_old_time+0x1>
     2c8:	20 93 28 0d 	sts	0x0D28, r18	; 0x800d28 <g_Timer3_old_time+0x2>
     2cc:	30 93 29 0d 	sts	0x0D29, r19	; 0x800d29 <g_Timer3_old_time+0x3>
	//call back function on upper layer to get time
	g_timer3_config->isr_call_back(g_diff_time);
     2d0:	e0 91 2a 0d 	lds	r30, 0x0D2A	; 0x800d2a <g_timer3_config>
     2d4:	f0 91 2b 0d 	lds	r31, 0x0D2B	; 0x800d2b <g_timer3_config+0x1>
     2d8:	02 80       	ldd	r0, Z+2	; 0x02
     2da:	f3 81       	ldd	r31, Z+3	; 0x03
     2dc:	e0 2d       	mov	r30, r0
     2de:	19 95       	eicall
}
     2e0:	ff 91       	pop	r31
     2e2:	ef 91       	pop	r30
     2e4:	bf 91       	pop	r27
     2e6:	af 91       	pop	r26
     2e8:	9f 91       	pop	r25
     2ea:	8f 91       	pop	r24
     2ec:	7f 91       	pop	r23
     2ee:	6f 91       	pop	r22
     2f0:	5f 91       	pop	r21
     2f2:	4f 91       	pop	r20
     2f4:	3f 91       	pop	r19
     2f6:	2f 91       	pop	r18
     2f8:	1f 91       	pop	r17
     2fa:	0f 91       	pop	r16
     2fc:	ff 90       	pop	r15
     2fe:	ef 90       	pop	r14
     300:	df 90       	pop	r13
     302:	cf 90       	pop	r12
     304:	0f 90       	pop	r0
     306:	0b be       	out	0x3b, r0	; 59
     308:	0f 90       	pop	r0
     30a:	0f be       	out	0x3f, r0	; 63
     30c:	0f 90       	pop	r0
     30e:	1f 90       	pop	r1
     310:	18 95       	reti

00000312 <__vector_42>:
// intruptted service routine when we have rech the number of  Ticks On Encoder
ISR(TIMER4_COMPA_vect)
{
     312:	1f 92       	push	r1
     314:	0f 92       	push	r0
     316:	0f b6       	in	r0, 0x3f	; 63
     318:	0f 92       	push	r0
     31a:	11 24       	eor	r1, r1
     31c:	0b b6       	in	r0, 0x3b	; 59
     31e:	0f 92       	push	r0
     320:	cf 92       	push	r12
     322:	df 92       	push	r13
     324:	ef 92       	push	r14
     326:	ff 92       	push	r15
     328:	0f 93       	push	r16
     32a:	1f 93       	push	r17
     32c:	2f 93       	push	r18
     32e:	3f 93       	push	r19
     330:	4f 93       	push	r20
     332:	5f 93       	push	r21
     334:	6f 93       	push	r22
     336:	7f 93       	push	r23
     338:	8f 93       	push	r24
     33a:	9f 93       	push	r25
     33c:	af 93       	push	r26
     33e:	bf 93       	push	r27
     340:	ef 93       	push	r30
     342:	ff 93       	push	r31
	// get the time now
	g_Timer4_new_time = Get_millis();
     344:	0e 94 53 20 	call	0x40a6	; 0x40a6 <Get_millis>
     348:	8b 01       	movw	r16, r22
     34a:	9c 01       	movw	r18, r24
     34c:	60 93 38 0d 	sts	0x0D38, r22	; 0x800d38 <g_Timer4_new_time>
     350:	70 93 39 0d 	sts	0x0D39, r23	; 0x800d39 <g_Timer4_new_time+0x1>
     354:	80 93 3a 0d 	sts	0x0D3A, r24	; 0x800d3a <g_Timer4_new_time+0x2>
     358:	90 93 3b 0d 	sts	0x0D3B, r25	; 0x800d3b <g_Timer4_new_time+0x3>
	// calculate the diff between now and last interrupt
	g_diff_time = g_Timer4_new_time - g_Timer4_old_time;
     35c:	40 91 48 0d 	lds	r20, 0x0D48	; 0x800d48 <g_Timer4_old_time>
     360:	50 91 49 0d 	lds	r21, 0x0D49	; 0x800d49 <g_Timer4_old_time+0x1>
     364:	60 91 4a 0d 	lds	r22, 0x0D4A	; 0x800d4a <g_Timer4_old_time+0x2>
     368:	70 91 4b 0d 	lds	r23, 0x0D4B	; 0x800d4b <g_Timer4_old_time+0x3>
     36c:	68 01       	movw	r12, r16
     36e:	79 01       	movw	r14, r18
     370:	c4 1a       	sub	r12, r20
     372:	d5 0a       	sbc	r13, r21
     374:	e6 0a       	sbc	r14, r22
     376:	f7 0a       	sbc	r15, r23
     378:	c7 01       	movw	r24, r14
     37a:	b6 01       	movw	r22, r12
     37c:	c0 92 34 0d 	sts	0x0D34, r12	; 0x800d34 <g_diff_time>
     380:	d0 92 35 0d 	sts	0x0D35, r13	; 0x800d35 <g_diff_time+0x1>
     384:	e0 92 36 0d 	sts	0x0D36, r14	; 0x800d36 <g_diff_time+0x2>
     388:	f0 92 37 0d 	sts	0x0D37, r15	; 0x800d37 <g_diff_time+0x3>
	// save the to the old time to next interrupt
	g_Timer4_old_time = g_Timer4_new_time;
     38c:	00 93 48 0d 	sts	0x0D48, r16	; 0x800d48 <g_Timer4_old_time>
     390:	10 93 49 0d 	sts	0x0D49, r17	; 0x800d49 <g_Timer4_old_time+0x1>
     394:	20 93 4a 0d 	sts	0x0D4A, r18	; 0x800d4a <g_Timer4_old_time+0x2>
     398:	30 93 4b 0d 	sts	0x0D4B, r19	; 0x800d4b <g_Timer4_old_time+0x3>
	//call back function on upper layer to get time
	g_timer4_config->isr_call_back(g_diff_time);
     39c:	e0 91 3c 0d 	lds	r30, 0x0D3C	; 0x800d3c <g_timer4_config>
     3a0:	f0 91 3d 0d 	lds	r31, 0x0D3D	; 0x800d3d <g_timer4_config+0x1>
     3a4:	02 80       	ldd	r0, Z+2	; 0x02
     3a6:	f3 81       	ldd	r31, Z+3	; 0x03
     3a8:	e0 2d       	mov	r30, r0
     3aa:	19 95       	eicall
}
     3ac:	ff 91       	pop	r31
     3ae:	ef 91       	pop	r30
     3b0:	bf 91       	pop	r27
     3b2:	af 91       	pop	r26
     3b4:	9f 91       	pop	r25
     3b6:	8f 91       	pop	r24
     3b8:	7f 91       	pop	r23
     3ba:	6f 91       	pop	r22
     3bc:	5f 91       	pop	r21
     3be:	4f 91       	pop	r20
     3c0:	3f 91       	pop	r19
     3c2:	2f 91       	pop	r18
     3c4:	1f 91       	pop	r17
     3c6:	0f 91       	pop	r16
     3c8:	ff 90       	pop	r15
     3ca:	ef 90       	pop	r14
     3cc:	df 90       	pop	r13
     3ce:	cf 90       	pop	r12
     3d0:	0f 90       	pop	r0
     3d2:	0b be       	out	0x3b, r0	; 59
     3d4:	0f 90       	pop	r0
     3d6:	0f be       	out	0x3f, r0	; 63
     3d8:	0f 90       	pop	r0
     3da:	1f 90       	pop	r1
     3dc:	18 95       	reti

000003de <__vector_47>:
// intruptted service routine when we have rech the number of  Ticks On Encoder
ISR(TIMER5_COMPA_vect)
{
     3de:	1f 92       	push	r1
     3e0:	0f 92       	push	r0
     3e2:	0f b6       	in	r0, 0x3f	; 63
     3e4:	0f 92       	push	r0
     3e6:	11 24       	eor	r1, r1
     3e8:	0b b6       	in	r0, 0x3b	; 59
     3ea:	0f 92       	push	r0
     3ec:	2f 93       	push	r18
     3ee:	3f 93       	push	r19
     3f0:	4f 93       	push	r20
     3f2:	5f 93       	push	r21
     3f4:	6f 93       	push	r22
     3f6:	7f 93       	push	r23
     3f8:	8f 93       	push	r24
     3fa:	9f 93       	push	r25
     3fc:	af 93       	push	r26
     3fe:	bf 93       	push	r27
     400:	ef 93       	push	r30
     402:	ff 93       	push	r31
	// calculate the diff between now and last interrupt
	g_diff_time = g_Timer5_new_time - g_Timer5_old_time;
	// save the to the old time to next interrupt
	g_Timer5_old_time = g_Timer5_new_time;*/
	// clear the counter
	UART0_putc('a');
     404:	81 e6       	ldi	r24, 0x61	; 97
     406:	0e 94 ce 0c 	call	0x199c	; 0x199c <UART0_putc>
	TIMER5_COUNT_L = 0;
     40a:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <__TEXT_REGION_LENGTH__+0x700124>
	//call back function on upper layer to get time
	g_timer5_config->isr_call_back(g_diff_time);
     40e:	e0 91 50 0d 	lds	r30, 0x0D50	; 0x800d50 <g_timer5_config>
     412:	f0 91 51 0d 	lds	r31, 0x0D51	; 0x800d51 <g_timer5_config+0x1>
     416:	60 91 34 0d 	lds	r22, 0x0D34	; 0x800d34 <g_diff_time>
     41a:	70 91 35 0d 	lds	r23, 0x0D35	; 0x800d35 <g_diff_time+0x1>
     41e:	80 91 36 0d 	lds	r24, 0x0D36	; 0x800d36 <g_diff_time+0x2>
     422:	90 91 37 0d 	lds	r25, 0x0D37	; 0x800d37 <g_diff_time+0x3>
     426:	02 80       	ldd	r0, Z+2	; 0x02
     428:	f3 81       	ldd	r31, Z+3	; 0x03
     42a:	e0 2d       	mov	r30, r0
     42c:	19 95       	eicall
	
}
     42e:	ff 91       	pop	r31
     430:	ef 91       	pop	r30
     432:	bf 91       	pop	r27
     434:	af 91       	pop	r26
     436:	9f 91       	pop	r25
     438:	8f 91       	pop	r24
     43a:	7f 91       	pop	r23
     43c:	6f 91       	pop	r22
     43e:	5f 91       	pop	r21
     440:	4f 91       	pop	r20
     442:	3f 91       	pop	r19
     444:	2f 91       	pop	r18
     446:	0f 90       	pop	r0
     448:	0b be       	out	0x3b, r0	; 59
     44a:	0f 90       	pop	r0
     44c:	0f be       	out	0x3f, r0	; 63
     44e:	0f 90       	pop	r0
     450:	1f 90       	pop	r1
     452:	18 95       	reti

00000454 <LCD_post_transmission>:

//
void Lcd_Write(uint16_t address, uint16_t value){
	Modbus_Set_transmit_buffer(LCD,0, value);
    Modbus_Write_multiple_registers(LCD,address, 0x01);
}
     454:	60 e0       	ldi	r22, 0x00	; 0
     456:	80 e0       	ldi	r24, 0x00	; 0
     458:	0c 94 ee 0b 	jmp	0x17dc	; 0x17dc <Modbus_change_state>
     45c:	08 95       	ret

0000045e <LCD_pre_transmission>:
     45e:	61 e0       	ldi	r22, 0x01	; 1
     460:	80 e0       	ldi	r24, 0x00	; 0
     462:	0c 94 ee 0b 	jmp	0x17dc	; 0x17dc <Modbus_change_state>
     466:	08 95       	ret

00000468 <Lcd_init>:
     468:	e2 e7       	ldi	r30, 0x72	; 114
     46a:	f2 e0       	ldi	r31, 0x02	; 2
     46c:	20 83       	st	Z, r18
     46e:	81 83       	std	Z+1, r24	; 0x01
     470:	42 83       	std	Z+2, r20	; 0x02
     472:	53 83       	std	Z+3, r21	; 0x03
     474:	64 83       	std	Z+4, r22	; 0x04
     476:	75 83       	std	Z+5, r23	; 0x05
     478:	8f e2       	ldi	r24, 0x2F	; 47
     47a:	92 e0       	ldi	r25, 0x02	; 2
     47c:	97 83       	std	Z+7, r25	; 0x07
     47e:	86 83       	std	Z+6, r24	; 0x06
     480:	8a e2       	ldi	r24, 0x2A	; 42
     482:	92 e0       	ldi	r25, 0x02	; 2
     484:	91 87       	std	Z+9, r25	; 0x09
     486:	80 87       	std	Z+8, r24	; 0x08
     488:	bf 01       	movw	r22, r30
     48a:	80 e0       	ldi	r24, 0x00	; 0
     48c:	0a c7       	rjmp	.+3604   	; 0x12a2 <Modbus_init>
     48e:	08 95       	ret

00000490 <Lcd_Read_multiple_data>:
 *
 *                    LCD Multiple Data functions 
 * 
************************************************************************************************************/

uint16_t Lcd_Read_multiple_data(uint16_t address ,uint16_t *pData,uint8_t QTY){
     490:	ff 92       	push	r15
     492:	0f 93       	push	r16
     494:	1f 93       	push	r17
     496:	cf 93       	push	r28
     498:	df 93       	push	r29
     49a:	f6 2e       	mov	r15, r22
     49c:	c7 2f       	mov	r28, r23
     49e:	d4 2f       	mov	r29, r20
	int err = Modbus_Read_holding_registers(LCD,address,QTY);
     4a0:	50 e0       	ldi	r21, 0x00	; 0
     4a2:	bc 01       	movw	r22, r24
     4a4:	80 e0       	ldi	r24, 0x00	; 0
     4a6:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <Modbus_Read_holding_registers>
	if(err == 0){
     4aa:	81 11       	cpse	r24, r1
     4ac:	13 c0       	rjmp	.+38     	; 0x4d4 <Lcd_Read_multiple_data+0x44>
		for(uint8_t i=0; i<QTY;i++){
     4ae:	dd 23       	and	r29, r29
     4b0:	a1 f0       	breq	.+40     	; 0x4da <Lcd_Read_multiple_data+0x4a>
     4b2:	0f 2d       	mov	r16, r15
     4b4:	1c 2f       	mov	r17, r28
     4b6:	c0 e0       	ldi	r28, 0x00	; 0
			(*(pData+i)) = Modbus_Get_response_buffer(LCD,i);
     4b8:	6c 2f       	mov	r22, r28
     4ba:	80 e0       	ldi	r24, 0x00	; 0
     4bc:	0e 94 b7 0a 	call	0x156e	; 0x156e <Modbus_Get_response_buffer>
     4c0:	f8 01       	movw	r30, r16
     4c2:	81 93       	st	Z+, r24
     4c4:	91 93       	st	Z+, r25
     4c6:	8f 01       	movw	r16, r30
************************************************************************************************************/

uint16_t Lcd_Read_multiple_data(uint16_t address ,uint16_t *pData,uint8_t QTY){
	int err = Modbus_Read_holding_registers(LCD,address,QTY);
	if(err == 0){
		for(uint8_t i=0; i<QTY;i++){
     4c8:	cf 5f       	subi	r28, 0xFF	; 255
     4ca:	cd 13       	cpse	r28, r29
     4cc:	f5 cf       	rjmp	.-22     	; 0x4b8 <Lcd_Read_multiple_data+0x28>
			(*(pData+i)) = Modbus_Get_response_buffer(LCD,i);
		}
		return LCD_OK;	
     4ce:	80 e0       	ldi	r24, 0x00	; 0
     4d0:	90 e0       	ldi	r25, 0x00	; 0
     4d2:	05 c0       	rjmp	.+10     	; 0x4de <Lcd_Read_multiple_data+0x4e>
	}
	else {
		return LCD_READ_ERROR;
     4d4:	89 e0       	ldi	r24, 0x09	; 9
     4d6:	90 e0       	ldi	r25, 0x00	; 0
     4d8:	02 c0       	rjmp	.+4      	; 0x4de <Lcd_Read_multiple_data+0x4e>
	int err = Modbus_Read_holding_registers(LCD,address,QTY);
	if(err == 0){
		for(uint8_t i=0; i<QTY;i++){
			(*(pData+i)) = Modbus_Get_response_buffer(LCD,i);
		}
		return LCD_OK;	
     4da:	80 e0       	ldi	r24, 0x00	; 0
     4dc:	90 e0       	ldi	r25, 0x00	; 0
	}
	else {
		return LCD_READ_ERROR;
	}

}
     4de:	df 91       	pop	r29
     4e0:	cf 91       	pop	r28
     4e2:	1f 91       	pop	r17
     4e4:	0f 91       	pop	r16
     4e6:	ff 90       	pop	r15
     4e8:	08 95       	ret

000004ea <Lcd_Write_multiple_data>:

void Lcd_Write_multiple_data(uint16_t address ,uint16_t *pData,uint8_t QTY){
     4ea:	ef 92       	push	r14
     4ec:	ff 92       	push	r15
     4ee:	0f 93       	push	r16
     4f0:	1f 93       	push	r17
     4f2:	cf 93       	push	r28
     4f4:	df 93       	push	r29
     4f6:	7c 01       	movw	r14, r24
     4f8:	d4 2f       	mov	r29, r20
	for(uint8_t i=0;i<QTY;i++){
     4fa:	44 23       	and	r20, r20
     4fc:	71 f0       	breq	.+28     	; 0x51a <Lcd_Write_multiple_data+0x30>
     4fe:	06 2f       	mov	r16, r22
     500:	17 2f       	mov	r17, r23
     502:	c0 e0       	ldi	r28, 0x00	; 0
		Modbus_Set_transmit_buffer(LCD,i, (*(pData+i)));
     504:	f8 01       	movw	r30, r16
     506:	41 91       	ld	r20, Z+
     508:	51 91       	ld	r21, Z+
     50a:	8f 01       	movw	r16, r30
     50c:	6c 2f       	mov	r22, r28
     50e:	80 e0       	ldi	r24, 0x00	; 0
     510:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <Modbus_Set_transmit_buffer>
	}

}

void Lcd_Write_multiple_data(uint16_t address ,uint16_t *pData,uint8_t QTY){
	for(uint8_t i=0;i<QTY;i++){
     514:	cf 5f       	subi	r28, 0xFF	; 255
     516:	cd 13       	cpse	r28, r29
     518:	f5 cf       	rjmp	.-22     	; 0x504 <Lcd_Write_multiple_data+0x1a>
		Modbus_Set_transmit_buffer(LCD,i, (*(pData+i)));
	}
	Modbus_Write_multiple_registers(LCD,address,QTY);
     51a:	4d 2f       	mov	r20, r29
     51c:	50 e0       	ldi	r21, 0x00	; 0
     51e:	b7 01       	movw	r22, r14
     520:	80 e0       	ldi	r24, 0x00	; 0
     522:	0e 94 19 0b 	call	0x1632	; 0x1632 <Modbus_Write_multiple_registers>
	
}
     526:	df 91       	pop	r29
     528:	cf 91       	pop	r28
     52a:	1f 91       	pop	r17
     52c:	0f 91       	pop	r16
     52e:	ff 90       	pop	r15
     530:	ef 90       	pop	r14
     532:	08 95       	ret

00000534 <Modbus_mster_transaction>:
		g_mod1_write_address = u16WriteAddress;
		g_mod1_write_qty = u16BitQty;
		return Modbus_mster_transaction(device, OUR_WRITE_MULTIPLE_COILS);
	}
	return INVALID_DEVICE; //error
}
     534:	7f 92       	push	r7
     536:	8f 92       	push	r8
     538:	9f 92       	push	r9
     53a:	af 92       	push	r10
     53c:	bf 92       	push	r11
     53e:	cf 92       	push	r12
     540:	df 92       	push	r13
     542:	ef 92       	push	r14
     544:	ff 92       	push	r15
     546:	0f 93       	push	r16
     548:	1f 93       	push	r17
     54a:	cf 93       	push	r28
     54c:	df 93       	push	r29
     54e:	cd b7       	in	r28, 0x3d	; 61
     550:	de b7       	in	r29, 0x3e	; 62
     552:	da 95       	dec	r29
     554:	0f b6       	in	r0, 0x3f	; 63
     556:	f8 94       	cli
     558:	de bf       	out	0x3e, r29	; 62
     55a:	0f be       	out	0x3f, r0	; 63
     55c:	cd bf       	out	0x3d, r28	; 61
     55e:	d6 2e       	mov	r13, r22
     560:	81 11       	cpse	r24, r1
     562:	1e c3       	rjmp	.+1596   	; 0xba0 <Modbus_mster_transaction+0x66c>
     564:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <g_mod0_slave>
     568:	89 83       	std	Y+1, r24	; 0x01
     56a:	2f ef       	ldi	r18, 0xFF	; 255
     56c:	62 13       	cpse	r22, r18
     56e:	06 c0       	rjmp	.+12     	; 0x57c <Modbus_mster_transaction+0x48>
     570:	8f e0       	ldi	r24, 0x0F	; 15
     572:	8a 83       	std	Y+2, r24	; 0x02
     574:	68 94       	set
     576:	cc 24       	eor	r12, r12
     578:	c1 f8       	bld	r12, 1
     57a:	32 c0       	rjmp	.+100    	; 0x5e0 <Modbus_mster_transaction+0xac>
     57c:	6a 83       	std	Y+2, r22	; 0x02
     57e:	81 e0       	ldi	r24, 0x01	; 1
     580:	68 17       	cp	r22, r24
     582:	b8 f0       	brcs	.+46     	; 0x5b2 <Modbus_mster_transaction+0x7e>
     584:	94 e0       	ldi	r25, 0x04	; 4
     586:	96 17       	cp	r25, r22
     588:	18 f4       	brcc	.+6      	; 0x590 <Modbus_mster_transaction+0x5c>
     58a:	a7 e1       	ldi	r26, 0x17	; 23
     58c:	6a 13       	cpse	r22, r26
     58e:	11 c0       	rjmp	.+34     	; 0x5b2 <Modbus_mster_transaction+0x7e>
     590:	80 91 c5 04 	lds	r24, 0x04C5	; 0x8004c5 <g_mod0_read_address>
     594:	90 91 c6 04 	lds	r25, 0x04C6	; 0x8004c6 <g_mod0_read_address+0x1>
     598:	9b 83       	std	Y+3, r25	; 0x03
     59a:	8c 83       	std	Y+4, r24	; 0x04
     59c:	80 91 c3 04 	lds	r24, 0x04C3	; 0x8004c3 <g_mod0_read_qty>
     5a0:	90 91 c4 04 	lds	r25, 0x04C4	; 0x8004c4 <g_mod0_read_qty+0x1>
     5a4:	9d 83       	std	Y+5, r25	; 0x05
     5a6:	8e 83       	std	Y+6, r24	; 0x06
     5a8:	0f 2e       	mov	r0, r31
     5aa:	f6 e0       	ldi	r31, 0x06	; 6
     5ac:	cf 2e       	mov	r12, r31
     5ae:	f0 2d       	mov	r31, r0
     5b0:	03 c0       	rjmp	.+6      	; 0x5b8 <Modbus_mster_transaction+0x84>
     5b2:	68 94       	set
     5b4:	cc 24       	eor	r12, r12
     5b6:	c1 f8       	bld	r12, 1
     5b8:	b0 e1       	ldi	r27, 0x10	; 16
     5ba:	bd 15       	cp	r27, r13
     5bc:	40 f0       	brcs	.+16     	; 0x5ce <Modbus_mster_transaction+0x9a>
     5be:	ef e0       	ldi	r30, 0x0F	; 15
     5c0:	de 16       	cp	r13, r30
     5c2:	70 f4       	brcc	.+28     	; 0x5e0 <Modbus_mster_transaction+0xac>
     5c4:	8b ef       	ldi	r24, 0xFB	; 251
     5c6:	8d 0d       	add	r24, r13
     5c8:	82 30       	cpi	r24, 0x02	; 2
     5ca:	00 f5       	brcc	.+64     	; 0x60c <Modbus_mster_transaction+0xd8>
     5cc:	09 c0       	rjmp	.+18     	; 0x5e0 <Modbus_mster_transaction+0xac>
     5ce:	f6 e1       	ldi	r31, 0x16	; 22
     5d0:	df 16       	cp	r13, r31
     5d2:	e0 f0       	brcs	.+56     	; 0x60c <Modbus_mster_transaction+0xd8>
     5d4:	27 e1       	ldi	r18, 0x17	; 23
     5d6:	2d 15       	cp	r18, r13
     5d8:	18 f4       	brcc	.+6      	; 0x5e0 <Modbus_mster_transaction+0xac>
     5da:	8f ef       	ldi	r24, 0xFF	; 255
     5dc:	d8 12       	cpse	r13, r24
     5de:	16 c0       	rjmp	.+44     	; 0x60c <Modbus_mster_transaction+0xd8>
     5e0:	90 91 41 04 	lds	r25, 0x0441	; 0x800441 <g_mod0_write_address>
     5e4:	80 91 42 04 	lds	r24, 0x0442	; 0x800442 <g_mod0_write_address+0x1>
     5e8:	e1 e0       	ldi	r30, 0x01	; 1
     5ea:	f0 e0       	ldi	r31, 0x00	; 0
     5ec:	ec 0f       	add	r30, r28
     5ee:	fd 1f       	adc	r31, r29
     5f0:	ec 0d       	add	r30, r12
     5f2:	f1 1d       	adc	r31, r1
     5f4:	80 83       	st	Z, r24
     5f6:	81 e0       	ldi	r24, 0x01	; 1
     5f8:	8c 0d       	add	r24, r12
     5fa:	e1 e0       	ldi	r30, 0x01	; 1
     5fc:	f0 e0       	ldi	r31, 0x00	; 0
     5fe:	ec 0f       	add	r30, r28
     600:	fd 1f       	adc	r31, r29
     602:	e8 0f       	add	r30, r24
     604:	f1 1d       	adc	r31, r1
     606:	c3 94       	inc	r12
     608:	c3 94       	inc	r12
     60a:	90 83       	st	Z, r25
     60c:	90 e1       	ldi	r25, 0x10	; 16
     60e:	d9 16       	cp	r13, r25
     610:	09 f4       	brne	.+2      	; 0x614 <Modbus_mster_transaction+0xe0>
     612:	ad c0       	rjmp	.+346    	; 0x76e <Modbus_mster_transaction+0x23a>
     614:	9d 15       	cp	r25, r13
     616:	58 f0       	brcs	.+22     	; 0x62e <Modbus_mster_transaction+0xfa>
     618:	a6 e0       	ldi	r26, 0x06	; 6
     61a:	da 16       	cp	r13, r26
     61c:	61 f1       	breq	.+88     	; 0x676 <Modbus_mster_transaction+0x142>
     61e:	bf e0       	ldi	r27, 0x0F	; 15
     620:	db 16       	cp	r13, r27
     622:	09 f4       	brne	.+2      	; 0x626 <Modbus_mster_transaction+0xf2>
     624:	41 c0       	rjmp	.+130    	; 0x6a8 <Modbus_mster_transaction+0x174>
     626:	e5 e0       	ldi	r30, 0x05	; 5
     628:	de 12       	cpse	r13, r30
     62a:	1e c1       	rjmp	.+572    	; 0x868 <Modbus_mster_transaction+0x334>
     62c:	0d c0       	rjmp	.+26     	; 0x648 <Modbus_mster_transaction+0x114>
     62e:	f7 e1       	ldi	r31, 0x17	; 23
     630:	df 16       	cp	r13, r31
     632:	09 f4       	brne	.+2      	; 0x636 <Modbus_mster_transaction+0x102>
     634:	9c c0       	rjmp	.+312    	; 0x76e <Modbus_mster_transaction+0x23a>
     636:	2f ef       	ldi	r18, 0xFF	; 255
     638:	d2 16       	cp	r13, r18
     63a:	09 f4       	brne	.+2      	; 0x63e <Modbus_mster_transaction+0x10a>
     63c:	98 c0       	rjmp	.+304    	; 0x76e <Modbus_mster_transaction+0x23a>
     63e:	86 e1       	ldi	r24, 0x16	; 22
     640:	d8 16       	cp	r13, r24
     642:	09 f4       	brne	.+2      	; 0x646 <Modbus_mster_transaction+0x112>
     644:	e1 c0       	rjmp	.+450    	; 0x808 <Modbus_mster_transaction+0x2d4>
     646:	10 c1       	rjmp	.+544    	; 0x868 <Modbus_mster_transaction+0x334>
     648:	90 91 3f 04 	lds	r25, 0x043F	; 0x80043f <g_mod0_write_qty>
     64c:	80 91 40 04 	lds	r24, 0x0440	; 0x800440 <g_mod0_write_qty+0x1>
     650:	e1 e0       	ldi	r30, 0x01	; 1
     652:	f0 e0       	ldi	r31, 0x00	; 0
     654:	ec 0f       	add	r30, r28
     656:	fd 1f       	adc	r31, r29
     658:	ec 0d       	add	r30, r12
     65a:	f1 1d       	adc	r31, r1
     65c:	80 83       	st	Z, r24
     65e:	81 e0       	ldi	r24, 0x01	; 1
     660:	8c 0d       	add	r24, r12
     662:	e1 e0       	ldi	r30, 0x01	; 1
     664:	f0 e0       	ldi	r31, 0x00	; 0
     666:	ec 0f       	add	r30, r28
     668:	fd 1f       	adc	r31, r29
     66a:	e8 0f       	add	r30, r24
     66c:	f1 1d       	adc	r31, r1
     66e:	c3 94       	inc	r12
     670:	c3 94       	inc	r12
     672:	90 83       	st	Z, r25
     674:	f9 c0       	rjmp	.+498    	; 0x868 <Modbus_mster_transaction+0x334>
     676:	ef eb       	ldi	r30, 0xBF	; 191
     678:	f3 e0       	ldi	r31, 0x03	; 3
     67a:	80 81       	ld	r24, Z
     67c:	91 81       	ldd	r25, Z+1	; 0x01
     67e:	a1 e0       	ldi	r26, 0x01	; 1
     680:	b0 e0       	ldi	r27, 0x00	; 0
     682:	ac 0f       	add	r26, r28
     684:	bd 1f       	adc	r27, r29
     686:	ac 0d       	add	r26, r12
     688:	b1 1d       	adc	r27, r1
     68a:	9c 93       	st	X, r25
     68c:	20 81       	ld	r18, Z
     68e:	31 81       	ldd	r19, Z+1	; 0x01
     690:	81 e0       	ldi	r24, 0x01	; 1
     692:	8c 0d       	add	r24, r12
     694:	e1 e0       	ldi	r30, 0x01	; 1
     696:	f0 e0       	ldi	r31, 0x00	; 0
     698:	ec 0f       	add	r30, r28
     69a:	fd 1f       	adc	r31, r29
     69c:	e8 0f       	add	r30, r24
     69e:	f1 1d       	adc	r31, r1
     6a0:	c3 94       	inc	r12
     6a2:	c3 94       	inc	r12
     6a4:	20 83       	st	Z, r18
     6a6:	e0 c0       	rjmp	.+448    	; 0x868 <Modbus_mster_transaction+0x334>
     6a8:	80 91 3f 04 	lds	r24, 0x043F	; 0x80043f <g_mod0_write_qty>
     6ac:	90 91 40 04 	lds	r25, 0x0440	; 0x800440 <g_mod0_write_qty+0x1>
     6b0:	e1 e0       	ldi	r30, 0x01	; 1
     6b2:	f0 e0       	ldi	r31, 0x00	; 0
     6b4:	ec 0f       	add	r30, r28
     6b6:	fd 1f       	adc	r31, r29
     6b8:	ec 0d       	add	r30, r12
     6ba:	f1 1d       	adc	r31, r1
     6bc:	90 83       	st	Z, r25
     6be:	32 e0       	ldi	r19, 0x02	; 2
     6c0:	3c 0d       	add	r19, r12
     6c2:	21 e0       	ldi	r18, 0x01	; 1
     6c4:	2c 0d       	add	r18, r12
     6c6:	e1 e0       	ldi	r30, 0x01	; 1
     6c8:	f0 e0       	ldi	r31, 0x00	; 0
     6ca:	ec 0f       	add	r30, r28
     6cc:	fd 1f       	adc	r31, r29
     6ce:	e2 0f       	add	r30, r18
     6d0:	f1 1d       	adc	r31, r1
     6d2:	80 83       	st	Z, r24
     6d4:	ac 01       	movw	r20, r24
     6d6:	47 70       	andi	r20, 0x07	; 7
     6d8:	55 27       	eor	r21, r21
     6da:	45 2b       	or	r20, r21
     6dc:	49 f0       	breq	.+18     	; 0x6f0 <Modbus_mster_transaction+0x1bc>
     6de:	96 95       	lsr	r25
     6e0:	87 95       	ror	r24
     6e2:	96 95       	lsr	r25
     6e4:	87 95       	ror	r24
     6e6:	96 95       	lsr	r25
     6e8:	87 95       	ror	r24
     6ea:	21 e0       	ldi	r18, 0x01	; 1
     6ec:	28 0f       	add	r18, r24
     6ee:	07 c0       	rjmp	.+14     	; 0x6fe <Modbus_mster_transaction+0x1ca>
     6f0:	96 95       	lsr	r25
     6f2:	87 95       	ror	r24
     6f4:	96 95       	lsr	r25
     6f6:	87 95       	ror	r24
     6f8:	96 95       	lsr	r25
     6fa:	87 95       	ror	r24
     6fc:	28 2f       	mov	r18, r24
     6fe:	93 e0       	ldi	r25, 0x03	; 3
     700:	c9 0e       	add	r12, r25
     702:	fe 01       	movw	r30, r28
     704:	e3 0f       	add	r30, r19
     706:	f1 1d       	adc	r31, r1
     708:	21 83       	std	Z+1, r18	; 0x01
     70a:	22 23       	and	r18, r18
     70c:	09 f4       	brne	.+2      	; 0x710 <Modbus_mster_transaction+0x1dc>
     70e:	ac c0       	rjmp	.+344    	; 0x868 <Modbus_mster_transaction+0x334>
     710:	80 e0       	ldi	r24, 0x00	; 0
     712:	98 2f       	mov	r25, r24
     714:	91 70       	andi	r25, 0x01	; 1
     716:	80 ff       	sbrs	r24, 0
     718:	03 c0       	rjmp	.+6      	; 0x720 <Modbus_mster_transaction+0x1ec>
     71a:	91 30       	cpi	r25, 0x01	; 1
     71c:	99 f0       	breq	.+38     	; 0x744 <Modbus_mster_transaction+0x210>
     71e:	23 c0       	rjmp	.+70     	; 0x766 <Modbus_mster_transaction+0x232>
     720:	e8 2f       	mov	r30, r24
     722:	e6 95       	lsr	r30
     724:	f0 e0       	ldi	r31, 0x00	; 0
     726:	ee 0f       	add	r30, r30
     728:	ff 1f       	adc	r31, r31
     72a:	e1 54       	subi	r30, 0x41	; 65
     72c:	fc 4f       	sbci	r31, 0xFC	; 252
     72e:	40 81       	ld	r20, Z
     730:	51 81       	ldd	r21, Z+1	; 0x01
     732:	e1 e0       	ldi	r30, 0x01	; 1
     734:	f0 e0       	ldi	r31, 0x00	; 0
     736:	ec 0f       	add	r30, r28
     738:	fd 1f       	adc	r31, r29
     73a:	ec 0d       	add	r30, r12
     73c:	f1 1d       	adc	r31, r1
     73e:	40 83       	st	Z, r20
     740:	c3 94       	inc	r12
     742:	11 c0       	rjmp	.+34     	; 0x766 <Modbus_mster_transaction+0x232>
     744:	e8 2f       	mov	r30, r24
     746:	e6 95       	lsr	r30
     748:	f0 e0       	ldi	r31, 0x00	; 0
     74a:	ee 0f       	add	r30, r30
     74c:	ff 1f       	adc	r31, r31
     74e:	e1 54       	subi	r30, 0x41	; 65
     750:	fc 4f       	sbci	r31, 0xFC	; 252
     752:	40 81       	ld	r20, Z
     754:	51 81       	ldd	r21, Z+1	; 0x01
     756:	e1 e0       	ldi	r30, 0x01	; 1
     758:	f0 e0       	ldi	r31, 0x00	; 0
     75a:	ec 0f       	add	r30, r28
     75c:	fd 1f       	adc	r31, r29
     75e:	ec 0d       	add	r30, r12
     760:	f1 1d       	adc	r31, r1
     762:	50 83       	st	Z, r21
     764:	c3 94       	inc	r12
     766:	8f 5f       	subi	r24, 0xFF	; 255
     768:	82 13       	cpse	r24, r18
     76a:	d3 cf       	rjmp	.-90     	; 0x712 <Modbus_mster_transaction+0x1de>
     76c:	7d c0       	rjmp	.+250    	; 0x868 <Modbus_mster_transaction+0x334>
     76e:	60 91 3f 04 	lds	r22, 0x043F	; 0x80043f <g_mod0_write_qty>
     772:	80 91 40 04 	lds	r24, 0x0440	; 0x800440 <g_mod0_write_qty+0x1>
     776:	e1 e0       	ldi	r30, 0x01	; 1
     778:	f0 e0       	ldi	r31, 0x00	; 0
     77a:	ec 0f       	add	r30, r28
     77c:	fd 1f       	adc	r31, r29
     77e:	ec 0d       	add	r30, r12
     780:	f1 1d       	adc	r31, r1
     782:	80 83       	st	Z, r24
     784:	81 e0       	ldi	r24, 0x01	; 1
     786:	8c 0d       	add	r24, r12
     788:	e1 e0       	ldi	r30, 0x01	; 1
     78a:	f0 e0       	ldi	r31, 0x00	; 0
     78c:	ec 0f       	add	r30, r28
     78e:	fd 1f       	adc	r31, r29
     790:	e8 0f       	add	r30, r24
     792:	f1 1d       	adc	r31, r1
     794:	60 83       	st	Z, r22
     796:	73 e0       	ldi	r23, 0x03	; 3
     798:	7c 0d       	add	r23, r12
     79a:	82 e0       	ldi	r24, 0x02	; 2
     79c:	8c 0d       	add	r24, r12
     79e:	e1 e0       	ldi	r30, 0x01	; 1
     7a0:	f0 e0       	ldi	r31, 0x00	; 0
     7a2:	ec 0f       	add	r30, r28
     7a4:	fd 1f       	adc	r31, r29
     7a6:	e8 0f       	add	r30, r24
     7a8:	f1 1d       	adc	r31, r1
     7aa:	86 2f       	mov	r24, r22
     7ac:	88 0f       	add	r24, r24
     7ae:	80 83       	st	Z, r24
     7b0:	66 23       	and	r22, r22
     7b2:	09 f4       	brne	.+2      	; 0x7b6 <Modbus_mster_transaction+0x282>
     7b4:	58 c0       	rjmp	.+176    	; 0x866 <Modbus_mster_transaction+0x332>
     7b6:	86 2f       	mov	r24, r22
     7b8:	88 0f       	add	r24, r24
     7ba:	8d 5f       	subi	r24, 0xFD	; 253
     7bc:	c8 0e       	add	r12, r24
     7be:	87 2f       	mov	r24, r23
     7c0:	20 e0       	ldi	r18, 0x00	; 0
     7c2:	30 e0       	ldi	r19, 0x00	; 0
     7c4:	91 e0       	ldi	r25, 0x01	; 1
     7c6:	98 0f       	add	r25, r24
     7c8:	f9 01       	movw	r30, r18
     7ca:	ee 0f       	add	r30, r30
     7cc:	ff 1f       	adc	r31, r31
     7ce:	e1 54       	subi	r30, 0x41	; 65
     7d0:	fc 4f       	sbci	r31, 0xFC	; 252
     7d2:	40 81       	ld	r20, Z
     7d4:	51 81       	ldd	r21, Z+1	; 0x01
     7d6:	a1 e0       	ldi	r26, 0x01	; 1
     7d8:	b0 e0       	ldi	r27, 0x00	; 0
     7da:	ac 0f       	add	r26, r28
     7dc:	bd 1f       	adc	r27, r29
     7de:	a8 0f       	add	r26, r24
     7e0:	b1 1d       	adc	r27, r1
     7e2:	5c 93       	st	X, r21
     7e4:	8e 5f       	subi	r24, 0xFE	; 254
     7e6:	40 81       	ld	r20, Z
     7e8:	51 81       	ldd	r21, Z+1	; 0x01
     7ea:	e1 e0       	ldi	r30, 0x01	; 1
     7ec:	f0 e0       	ldi	r31, 0x00	; 0
     7ee:	ec 0f       	add	r30, r28
     7f0:	fd 1f       	adc	r31, r29
     7f2:	e9 0f       	add	r30, r25
     7f4:	f1 1d       	adc	r31, r1
     7f6:	40 83       	st	Z, r20
     7f8:	2f 5f       	subi	r18, 0xFF	; 255
     7fa:	3f 4f       	sbci	r19, 0xFF	; 255
     7fc:	8c 11       	cpse	r24, r12
     7fe:	e2 cf       	rjmp	.-60     	; 0x7c4 <Modbus_mster_transaction+0x290>
     800:	66 0f       	add	r22, r22
     802:	c6 2e       	mov	r12, r22
     804:	c7 0e       	add	r12, r23
     806:	30 c0       	rjmp	.+96     	; 0x868 <Modbus_mster_transaction+0x334>
     808:	ef eb       	ldi	r30, 0xBF	; 191
     80a:	f3 e0       	ldi	r31, 0x03	; 3
     80c:	80 81       	ld	r24, Z
     80e:	91 81       	ldd	r25, Z+1	; 0x01
     810:	a1 e0       	ldi	r26, 0x01	; 1
     812:	b0 e0       	ldi	r27, 0x00	; 0
     814:	ac 0f       	add	r26, r28
     816:	bd 1f       	adc	r27, r29
     818:	ac 0d       	add	r26, r12
     81a:	b1 1d       	adc	r27, r1
     81c:	9c 93       	st	X, r25
     81e:	80 81       	ld	r24, Z
     820:	91 81       	ldd	r25, Z+1	; 0x01
     822:	91 e0       	ldi	r25, 0x01	; 1
     824:	9c 0d       	add	r25, r12
     826:	a1 e0       	ldi	r26, 0x01	; 1
     828:	b0 e0       	ldi	r27, 0x00	; 0
     82a:	ac 0f       	add	r26, r28
     82c:	bd 1f       	adc	r27, r29
     82e:	a9 0f       	add	r26, r25
     830:	b1 1d       	adc	r27, r1
     832:	8c 93       	st	X, r24
     834:	82 81       	ldd	r24, Z+2	; 0x02
     836:	93 81       	ldd	r25, Z+3	; 0x03
     838:	82 e0       	ldi	r24, 0x02	; 2
     83a:	8c 0d       	add	r24, r12
     83c:	a1 e0       	ldi	r26, 0x01	; 1
     83e:	b0 e0       	ldi	r27, 0x00	; 0
     840:	ac 0f       	add	r26, r28
     842:	bd 1f       	adc	r27, r29
     844:	a8 0f       	add	r26, r24
     846:	b1 1d       	adc	r27, r1
     848:	9c 93       	st	X, r25
     84a:	22 81       	ldd	r18, Z+2	; 0x02
     84c:	33 81       	ldd	r19, Z+3	; 0x03
     84e:	83 e0       	ldi	r24, 0x03	; 3
     850:	8c 0d       	add	r24, r12
     852:	e1 e0       	ldi	r30, 0x01	; 1
     854:	f0 e0       	ldi	r31, 0x00	; 0
     856:	ec 0f       	add	r30, r28
     858:	fd 1f       	adc	r31, r29
     85a:	e8 0f       	add	r30, r24
     85c:	f1 1d       	adc	r31, r1
     85e:	a4 e0       	ldi	r26, 0x04	; 4
     860:	ca 0e       	add	r12, r26
     862:	20 83       	st	Z, r18
     864:	01 c0       	rjmp	.+2      	; 0x868 <Modbus_mster_transaction+0x334>
     866:	c7 2e       	mov	r12, r23
     868:	cc 20       	and	r12, r12
     86a:	b9 f0       	breq	.+46     	; 0x89a <Modbus_mster_transaction+0x366>
     86c:	8e 01       	movw	r16, r28
     86e:	0f 5f       	subi	r16, 0xFF	; 255
     870:	1f 4f       	sbci	r17, 0xFF	; 255
     872:	ee 24       	eor	r14, r14
     874:	ea 94       	dec	r14
     876:	ec 0c       	add	r14, r12
     878:	f1 2c       	mov	r15, r1
     87a:	bf ef       	ldi	r27, 0xFF	; 255
     87c:	eb 1a       	sub	r14, r27
     87e:	fb 0a       	sbc	r15, r27
     880:	e0 0e       	add	r14, r16
     882:	f1 1e       	adc	r15, r17
     884:	8f ef       	ldi	r24, 0xFF	; 255
     886:	9f ef       	ldi	r25, 0xFF	; 255
     888:	f8 01       	movw	r30, r16
     88a:	61 91       	ld	r22, Z+
     88c:	8f 01       	movw	r16, r30
     88e:	0e 94 32 20 	call	0x4064	; 0x4064 <crc16_update>
     892:	0e 15       	cp	r16, r14
     894:	1f 05       	cpc	r17, r15
     896:	c1 f7       	brne	.-16     	; 0x888 <Modbus_mster_transaction+0x354>
     898:	02 c0       	rjmp	.+4      	; 0x89e <Modbus_mster_transaction+0x36a>
     89a:	8f ef       	ldi	r24, 0xFF	; 255
     89c:	9f ef       	ldi	r25, 0xFF	; 255
     89e:	ee 24       	eor	r14, r14
     8a0:	e3 94       	inc	r14
     8a2:	ec 0c       	add	r14, r12
     8a4:	e1 e0       	ldi	r30, 0x01	; 1
     8a6:	f0 e0       	ldi	r31, 0x00	; 0
     8a8:	ec 0f       	add	r30, r28
     8aa:	fd 1f       	adc	r31, r29
     8ac:	ec 0d       	add	r30, r12
     8ae:	f1 1d       	adc	r31, r1
     8b0:	80 83       	st	Z, r24
     8b2:	c3 94       	inc	r12
     8b4:	c3 94       	inc	r12
     8b6:	e1 e0       	ldi	r30, 0x01	; 1
     8b8:	f0 e0       	ldi	r31, 0x00	; 0
     8ba:	ec 0f       	add	r30, r28
     8bc:	fd 1f       	adc	r31, r29
     8be:	ee 0d       	add	r30, r14
     8c0:	f1 1d       	adc	r31, r1
     8c2:	90 83       	st	Z, r25
     8c4:	e1 e0       	ldi	r30, 0x01	; 1
     8c6:	f0 e0       	ldi	r31, 0x00	; 0
     8c8:	ec 0f       	add	r30, r28
     8ca:	fd 1f       	adc	r31, r29
     8cc:	ec 0d       	add	r30, r12
     8ce:	f1 1d       	adc	r31, r1
     8d0:	10 82       	st	Z, r1
     8d2:	e0 91 b0 03 	lds	r30, 0x03B0	; 0x8003b0 <g_mod0_Serial_getc>
     8d6:	f0 91 b1 03 	lds	r31, 0x03B1	; 0x8003b1 <g_mod0_Serial_getc+0x1>
     8da:	19 95       	eicall
     8dc:	81 15       	cp	r24, r1
     8de:	91 40       	sbci	r25, 0x01	; 1
     8e0:	c1 f7       	brne	.-16     	; 0x8d2 <Modbus_mster_transaction+0x39e>
     8e2:	e0 91 b6 03 	lds	r30, 0x03B6	; 0x8003b6 <g_mod0_pre_transmission>
     8e6:	f0 91 b7 03 	lds	r31, 0x03B7	; 0x8003b7 <g_mod0_pre_transmission+0x1>
     8ea:	30 97       	sbiw	r30, 0x00	; 0
     8ec:	09 f0       	breq	.+2      	; 0x8f0 <Modbus_mster_transaction+0x3bc>
     8ee:	19 95       	eicall
     8f0:	cc 20       	and	r12, r12
     8f2:	a1 f0       	breq	.+40     	; 0x91c <Modbus_mster_transaction+0x3e8>
     8f4:	8e 01       	movw	r16, r28
     8f6:	0f 5f       	subi	r16, 0xFF	; 255
     8f8:	1f 4f       	sbci	r17, 0xFF	; 255
     8fa:	f1 2c       	mov	r15, r1
     8fc:	2f ef       	ldi	r18, 0xFF	; 255
     8fe:	e2 1a       	sub	r14, r18
     900:	f2 0a       	sbc	r15, r18
     902:	e0 0e       	add	r14, r16
     904:	f1 1e       	adc	r15, r17
     906:	e0 91 b2 03 	lds	r30, 0x03B2	; 0x8003b2 <g_mod0_Serial_putc>
     90a:	f0 91 b3 03 	lds	r31, 0x03B3	; 0x8003b3 <g_mod0_Serial_putc+0x1>
     90e:	d8 01       	movw	r26, r16
     910:	8d 91       	ld	r24, X+
     912:	8d 01       	movw	r16, r26
     914:	19 95       	eicall
     916:	0e 15       	cp	r16, r14
     918:	1f 05       	cpc	r17, r15
     91a:	a9 f7       	brne	.-22     	; 0x906 <Modbus_mster_transaction+0x3d2>
     91c:	e0 91 ae 03 	lds	r30, 0x03AE	; 0x8003ae <g_mod0_Serial_flush>
     920:	f0 91 af 03 	lds	r31, 0x03AF	; 0x8003af <g_mod0_Serial_flush+0x1>
     924:	19 95       	eicall
     926:	ef e8       	ldi	r30, 0x8F	; 143
     928:	f1 e0       	ldi	r31, 0x01	; 1
     92a:	31 97       	sbiw	r30, 0x01	; 1
     92c:	f1 f7       	brne	.-4      	; 0x92a <Modbus_mster_transaction+0x3f6>
     92e:	00 c0       	rjmp	.+0      	; 0x930 <Modbus_mster_transaction+0x3fc>
     930:	00 00       	nop
     932:	e0 91 b4 03 	lds	r30, 0x03B4	; 0x8003b4 <g_mod0_post_transmission>
     936:	f0 91 b5 03 	lds	r31, 0x03B5	; 0x8003b5 <g_mod0_post_transmission+0x1>
     93a:	30 97       	sbiw	r30, 0x00	; 0
     93c:	09 f0       	breq	.+2      	; 0x940 <Modbus_mster_transaction+0x40c>
     93e:	19 95       	eicall
     940:	ff ef       	ldi	r31, 0xFF	; 255
     942:	23 ed       	ldi	r18, 0xD3	; 211
     944:	80 e3       	ldi	r24, 0x30	; 48
     946:	f1 50       	subi	r31, 0x01	; 1
     948:	20 40       	sbci	r18, 0x00	; 0
     94a:	80 40       	sbci	r24, 0x00	; 0
     94c:	e1 f7       	brne	.-8      	; 0x946 <Modbus_mster_transaction+0x412>
     94e:	00 c0       	rjmp	.+0      	; 0x950 <Modbus_mster_transaction+0x41c>
     950:	00 00       	nop
     952:	0e 94 53 20 	call	0x40a6	; 0x40a6 <Get_millis>
     956:	4b 01       	movw	r8, r22
     958:	5c 01       	movw	r10, r24
     95a:	08 e0       	ldi	r16, 0x08	; 8
     95c:	10 e0       	ldi	r17, 0x00	; 0
     95e:	ed 2c       	mov	r14, r13
     960:	f1 2c       	mov	r15, r1
     962:	0f 2e       	mov	r0, r31
     964:	f3 e0       	ldi	r31, 0x03	; 3
     966:	cf 2e       	mov	r12, r31
     968:	f0 2d       	mov	r31, r0
     96a:	0f 2e       	mov	r0, r31
     96c:	f5 e0       	ldi	r31, 0x05	; 5
     96e:	df 2e       	mov	r13, r31
     970:	f0 2d       	mov	r31, r0
     972:	e0 91 aa 03 	lds	r30, 0x03AA	; 0x8003aa <g_mod0_Serial_available>
     976:	f0 91 ab 03 	lds	r31, 0x03AB	; 0x8003ab <g_mod0_Serial_available+0x1>
     97a:	19 95       	eicall
     97c:	89 2b       	or	r24, r25
     97e:	91 f0       	breq	.+36     	; 0x9a4 <Modbus_mster_transaction+0x470>
     980:	77 24       	eor	r7, r7
     982:	73 94       	inc	r7
     984:	71 0e       	add	r7, r17
     986:	e0 91 b0 03 	lds	r30, 0x03B0	; 0x8003b0 <g_mod0_Serial_getc>
     98a:	f0 91 b1 03 	lds	r31, 0x03B1	; 0x8003b1 <g_mod0_Serial_getc+0x1>
     98e:	19 95       	eicall
     990:	e1 e0       	ldi	r30, 0x01	; 1
     992:	f0 e0       	ldi	r31, 0x00	; 0
     994:	ec 0f       	add	r30, r28
     996:	fd 1f       	adc	r31, r29
     998:	e1 0f       	add	r30, r17
     99a:	f1 1d       	adc	r31, r1
     99c:	80 83       	st	Z, r24
     99e:	01 50       	subi	r16, 0x01	; 1
     9a0:	17 2d       	mov	r17, r7
     9a2:	07 c0       	rjmp	.+14     	; 0x9b2 <Modbus_mster_transaction+0x47e>
     9a4:	e0 91 b8 03 	lds	r30, 0x03B8	; 0x8003b8 <g_mod0_idle>
     9a8:	f0 91 b9 03 	lds	r31, 0x03B9	; 0x8003b9 <g_mod0_idle+0x1>
     9ac:	30 97       	sbiw	r30, 0x00	; 0
     9ae:	09 f0       	breq	.+2      	; 0x9b2 <Modbus_mster_transaction+0x47e>
     9b0:	19 95       	eicall
     9b2:	15 30       	cpi	r17, 0x05	; 5
     9b4:	59 f5       	brne	.+86     	; 0xa0c <Modbus_mster_transaction+0x4d8>
     9b6:	99 81       	ldd	r25, Y+1	; 0x01
     9b8:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <g_mod0_slave>
     9bc:	98 13       	cpse	r25, r24
     9be:	0e c4       	rjmp	.+2076   	; 0x11dc <Modbus_mster_transaction+0xca8>
     9c0:	8a 81       	ldd	r24, Y+2	; 0x02
     9c2:	28 2f       	mov	r18, r24
     9c4:	2f 77       	andi	r18, 0x7F	; 127
     9c6:	30 e0       	ldi	r19, 0x00	; 0
     9c8:	2e 15       	cp	r18, r14
     9ca:	3f 05       	cpc	r19, r15
     9cc:	09 f0       	breq	.+2      	; 0x9d0 <Modbus_mster_transaction+0x49c>
     9ce:	08 c4       	rjmp	.+2064   	; 0x11e0 <Modbus_mster_transaction+0xcac>
     9d0:	88 23       	and	r24, r24
     9d2:	2c f4       	brge	.+10     	; 0x9de <Modbus_mster_transaction+0x4aa>
     9d4:	8b 81       	ldd	r24, Y+3	; 0x03
     9d6:	88 23       	and	r24, r24
     9d8:	09 f4       	brne	.+2      	; 0x9dc <Modbus_mster_transaction+0x4a8>
     9da:	3e c0       	rjmp	.+124    	; 0xa58 <Modbus_mster_transaction+0x524>
     9dc:	d8 c0       	rjmp	.+432    	; 0xb8e <Modbus_mster_transaction+0x65a>
     9de:	81 31       	cpi	r24, 0x11	; 17
     9e0:	58 f4       	brcc	.+22     	; 0x9f8 <Modbus_mster_transaction+0x4c4>
     9e2:	8f 30       	cpi	r24, 0x0F	; 15
     9e4:	08 f0       	brcs	.+2      	; 0x9e8 <Modbus_mster_transaction+0x4b4>
     9e6:	ea c3       	rjmp	.+2004   	; 0x11bc <Modbus_mster_transaction+0xc88>
     9e8:	81 30       	cpi	r24, 0x01	; 1
     9ea:	80 f0       	brcs	.+32     	; 0xa0c <Modbus_mster_transaction+0x4d8>
     9ec:	85 30       	cpi	r24, 0x05	; 5
     9ee:	68 f0       	brcs	.+26     	; 0xa0a <Modbus_mster_transaction+0x4d6>
     9f0:	87 30       	cpi	r24, 0x07	; 7
     9f2:	08 f4       	brcc	.+2      	; 0x9f6 <Modbus_mster_transaction+0x4c2>
     9f4:	e3 c3       	rjmp	.+1990   	; 0x11bc <Modbus_mster_transaction+0xc88>
     9f6:	0a c0       	rjmp	.+20     	; 0xa0c <Modbus_mster_transaction+0x4d8>
     9f8:	87 31       	cpi	r24, 0x17	; 23
     9fa:	39 f0       	breq	.+14     	; 0xa0a <Modbus_mster_transaction+0x4d6>
     9fc:	8f 3f       	cpi	r24, 0xFF	; 255
     9fe:	09 f4       	brne	.+2      	; 0xa02 <Modbus_mster_transaction+0x4ce>
     a00:	dd c3       	rjmp	.+1978   	; 0x11bc <Modbus_mster_transaction+0xc88>
     a02:	86 31       	cpi	r24, 0x16	; 22
     a04:	19 f4       	brne	.+6      	; 0xa0c <Modbus_mster_transaction+0x4d8>
     a06:	0d 2d       	mov	r16, r13
     a08:	da c3       	rjmp	.+1972   	; 0x11be <Modbus_mster_transaction+0xc8a>
     a0a:	0b 81       	ldd	r16, Y+3	; 0x03
     a0c:	0e 94 53 20 	call	0x40a6	; 0x40a6 <Get_millis>
     a10:	dc 01       	movw	r26, r24
     a12:	cb 01       	movw	r24, r22
     a14:	88 19       	sub	r24, r8
     a16:	99 09       	sbc	r25, r9
     a18:	aa 09       	sbc	r26, r10
     a1a:	bb 09       	sbc	r27, r11
     a1c:	81 3d       	cpi	r24, 0xD1	; 209
     a1e:	97 40       	sbci	r25, 0x07	; 7
     a20:	a1 05       	cpc	r26, r1
     a22:	b1 05       	cpc	r27, r1
     a24:	08 f4       	brcc	.+2      	; 0xa28 <Modbus_mster_transaction+0x4f4>
     a26:	1d c4       	rjmp	.+2106   	; 0x1262 <Modbus_mster_transaction+0xd2e>
     a28:	80 e0       	ldi	r24, 0x00	; 0
     a2a:	92 e0       	ldi	r25, 0x02	; 2
     a2c:	ec d7       	rcall	.+4056   	; 0x1a06 <UART0_puts>
     a2e:	8a e0       	ldi	r24, 0x0A	; 10
     a30:	b5 d7       	rcall	.+3946   	; 0x199c <UART0_putc>
     a32:	01 11       	cpse	r16, r1
     a34:	d7 c3       	rjmp	.+1966   	; 0x11e4 <Modbus_mster_transaction+0xcb0>
     a36:	91 2f       	mov	r25, r17
     a38:	82 ee       	ldi	r24, 0xE2	; 226
     a3a:	22 ee       	ldi	r18, 0xE2	; 226
     a3c:	21 11       	cpse	r18, r1
     a3e:	a7 c0       	rjmp	.+334    	; 0xb8e <Modbus_mster_transaction+0x65a>
     a40:	95 30       	cpi	r25, 0x05	; 5
     a42:	78 f1       	brcs	.+94     	; 0xaa2 <Modbus_mster_transaction+0x56e>
     a44:	c1 2e       	mov	r12, r17
     a46:	d1 2c       	mov	r13, r1
     a48:	76 01       	movw	r14, r12
     a4a:	f2 e0       	ldi	r31, 0x02	; 2
     a4c:	ef 1a       	sub	r14, r31
     a4e:	f1 08       	sbc	r15, r1
     a50:	1e 14       	cp	r1, r14
     a52:	1f 04       	cpc	r1, r15
     a54:	5c f0       	brlt	.+22     	; 0xa6c <Modbus_mster_transaction+0x538>
     a56:	cb c3       	rjmp	.+1942   	; 0x11ee <Modbus_mster_transaction+0xcba>
     a58:	0f 2e       	mov	r0, r31
     a5a:	f3 e0       	ldi	r31, 0x03	; 3
     a5c:	ef 2e       	mov	r14, r31
     a5e:	f1 2c       	mov	r15, r1
     a60:	f0 2d       	mov	r31, r0
     a62:	0f 2e       	mov	r0, r31
     a64:	f5 e0       	ldi	r31, 0x05	; 5
     a66:	cf 2e       	mov	r12, r31
     a68:	d1 2c       	mov	r13, r1
     a6a:	f0 2d       	mov	r31, r0
     a6c:	20 e0       	ldi	r18, 0x00	; 0
     a6e:	30 e0       	ldi	r19, 0x00	; 0
     a70:	8f ef       	ldi	r24, 0xFF	; 255
     a72:	9f ef       	ldi	r25, 0xFF	; 255
     a74:	00 e0       	ldi	r16, 0x00	; 0
     a76:	e1 e0       	ldi	r30, 0x01	; 1
     a78:	f0 e0       	ldi	r31, 0x00	; 0
     a7a:	ec 0f       	add	r30, r28
     a7c:	fd 1f       	adc	r31, r29
     a7e:	e2 0f       	add	r30, r18
     a80:	f3 1f       	adc	r31, r19
     a82:	60 81       	ld	r22, Z
     a84:	0e 94 32 20 	call	0x4064	; 0x4064 <crc16_update>
     a88:	0f 5f       	subi	r16, 0xFF	; 255
     a8a:	20 2f       	mov	r18, r16
     a8c:	30 e0       	ldi	r19, 0x00	; 0
     a8e:	2e 15       	cp	r18, r14
     a90:	3f 05       	cpc	r19, r15
     a92:	8c f3       	brlt	.-30     	; 0xa76 <Modbus_mster_transaction+0x542>
     a94:	ae c3       	rjmp	.+1884   	; 0x11f2 <Modbus_mster_transaction+0xcbe>
     a96:	fe 01       	movw	r30, r28
     a98:	ec 0d       	add	r30, r12
     a9a:	fd 1d       	adc	r31, r13
     a9c:	80 81       	ld	r24, Z
     a9e:	89 13       	cpse	r24, r25
     aa0:	b1 c3       	rjmp	.+1890   	; 0x1204 <Modbus_mster_transaction+0xcd0>
     aa2:	8a 81       	ldd	r24, Y+2	; 0x02
     aa4:	85 30       	cpi	r24, 0x05	; 5
     aa6:	28 f4       	brcc	.+10     	; 0xab2 <Modbus_mster_transaction+0x57e>
     aa8:	83 30       	cpi	r24, 0x03	; 3
     aaa:	30 f4       	brcc	.+12     	; 0xab8 <Modbus_mster_transaction+0x584>
     aac:	81 30       	cpi	r24, 0x01	; 1
     aae:	50 f4       	brcc	.+20     	; 0xac4 <Modbus_mster_transaction+0x590>
     ab0:	6b c0       	rjmp	.+214    	; 0xb88 <Modbus_mster_transaction+0x654>
     ab2:	87 31       	cpi	r24, 0x17	; 23
     ab4:	09 f0       	breq	.+2      	; 0xab8 <Modbus_mster_transaction+0x584>
     ab6:	68 c0       	rjmp	.+208    	; 0xb88 <Modbus_mster_transaction+0x654>
     ab8:	3b 81       	ldd	r19, Y+3	; 0x03
     aba:	36 95       	lsr	r19
     abc:	09 f0       	breq	.+2      	; 0xac0 <Modbus_mster_transaction+0x58c>
     abe:	40 c0       	rjmp	.+128    	; 0xb40 <Modbus_mster_transaction+0x60c>
     ac0:	80 e0       	ldi	r24, 0x00	; 0
     ac2:	65 c0       	rjmp	.+202    	; 0xb8e <Modbus_mster_transaction+0x65a>
     ac4:	7b 81       	ldd	r23, Y+3	; 0x03
     ac6:	67 2f       	mov	r22, r23
     ac8:	66 95       	lsr	r22
     aca:	09 f4       	brne	.+2      	; 0xace <Modbus_mster_transaction+0x59a>
     acc:	9d c3       	rjmp	.+1850   	; 0x1208 <Modbus_mster_transaction+0xcd4>
     ace:	fe 01       	movw	r30, r28
     ad0:	35 96       	adiw	r30, 0x05	; 5
     ad2:	40 e0       	ldi	r20, 0x00	; 0
     ad4:	50 e0       	ldi	r21, 0x00	; 0
     ad6:	90 e0       	ldi	r25, 0x00	; 0
     ad8:	01 c0       	rjmp	.+2      	; 0xadc <Modbus_mster_transaction+0x5a8>
     ada:	98 2f       	mov	r25, r24
     adc:	90 34       	cpi	r25, 0x40	; 64
     ade:	70 f4       	brcc	.+28     	; 0xafc <Modbus_mster_transaction+0x5c8>
     ae0:	df 01       	movw	r26, r30
     ae2:	11 97       	sbiw	r26, 0x01	; 1
     ae4:	2c 91       	ld	r18, X
     ae6:	80 81       	ld	r24, Z
     ae8:	30 e0       	ldi	r19, 0x00	; 0
     aea:	38 2b       	or	r19, r24
     aec:	da 01       	movw	r26, r20
     aee:	aa 0f       	add	r26, r26
     af0:	bb 1f       	adc	r27, r27
     af2:	ad 5b       	subi	r26, 0xBD	; 189
     af4:	bb 4f       	sbci	r27, 0xFB	; 251
     af6:	11 96       	adiw	r26, 0x01	; 1
     af8:	3c 93       	st	X, r19
     afa:	2e 93       	st	-X, r18
     afc:	81 e0       	ldi	r24, 0x01	; 1
     afe:	89 0f       	add	r24, r25
     b00:	4f 5f       	subi	r20, 0xFF	; 255
     b02:	5f 4f       	sbci	r21, 0xFF	; 255
     b04:	32 96       	adiw	r30, 0x02	; 2
     b06:	86 17       	cp	r24, r22
     b08:	40 f3       	brcs	.-48     	; 0xada <Modbus_mster_transaction+0x5a6>
     b0a:	90 93 ba 03 	sts	0x03BA, r25	; 0x8003ba <g_mod0_response_buffer_length>
     b0e:	70 ff       	sbrs	r23, 0
     b10:	3d c0       	rjmp	.+122    	; 0xb8c <Modbus_mster_transaction+0x658>
     b12:	80 34       	cpi	r24, 0x40	; 64
     b14:	80 f4       	brcc	.+32     	; 0xb36 <Modbus_mster_transaction+0x602>
     b16:	01 c0       	rjmp	.+2      	; 0xb1a <Modbus_mster_transaction+0x5e6>
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	22 0f       	add	r18, r18
     b20:	33 1f       	adc	r19, r19
     b22:	fe 01       	movw	r30, r28
     b24:	e2 0f       	add	r30, r18
     b26:	f3 1f       	adc	r31, r19
     b28:	44 81       	ldd	r20, Z+4	; 0x04
     b2a:	50 e0       	ldi	r21, 0x00	; 0
     b2c:	f9 01       	movw	r30, r18
     b2e:	ed 5b       	subi	r30, 0xBD	; 189
     b30:	fb 4f       	sbci	r31, 0xFB	; 251
     b32:	51 83       	std	Z+1, r21	; 0x01
     b34:	40 83       	st	Z, r20
     b36:	8f 5f       	subi	r24, 0xFF	; 255
     b38:	80 93 ba 03 	sts	0x03BA, r24	; 0x8003ba <g_mod0_response_buffer_length>
     b3c:	80 e0       	ldi	r24, 0x00	; 0
     b3e:	27 c0       	rjmp	.+78     	; 0xb8e <Modbus_mster_transaction+0x65a>
     b40:	fe 01       	movw	r30, r28
     b42:	35 96       	adiw	r30, 0x05	; 5
     b44:	40 e0       	ldi	r20, 0x00	; 0
     b46:	50 e0       	ldi	r21, 0x00	; 0
     b48:	20 e0       	ldi	r18, 0x00	; 0
     b4a:	01 c0       	rjmp	.+2      	; 0xb4e <Modbus_mster_transaction+0x61a>
     b4c:	28 2f       	mov	r18, r24
     b4e:	20 34       	cpi	r18, 0x40	; 64
     b50:	80 f4       	brcc	.+32     	; 0xb72 <Modbus_mster_transaction+0x63e>
     b52:	df 01       	movw	r26, r30
     b54:	11 97       	sbiw	r26, 0x01	; 1
     b56:	8c 91       	ld	r24, X
     b58:	90 e0       	ldi	r25, 0x00	; 0
     b5a:	98 2f       	mov	r25, r24
     b5c:	88 27       	eor	r24, r24
     b5e:	60 81       	ld	r22, Z
     b60:	86 2b       	or	r24, r22
     b62:	da 01       	movw	r26, r20
     b64:	aa 0f       	add	r26, r26
     b66:	bb 1f       	adc	r27, r27
     b68:	ad 5b       	subi	r26, 0xBD	; 189
     b6a:	bb 4f       	sbci	r27, 0xFB	; 251
     b6c:	11 96       	adiw	r26, 0x01	; 1
     b6e:	9c 93       	st	X, r25
     b70:	8e 93       	st	-X, r24
     b72:	81 e0       	ldi	r24, 0x01	; 1
     b74:	82 0f       	add	r24, r18
     b76:	4f 5f       	subi	r20, 0xFF	; 255
     b78:	5f 4f       	sbci	r21, 0xFF	; 255
     b7a:	32 96       	adiw	r30, 0x02	; 2
     b7c:	83 17       	cp	r24, r19
     b7e:	30 f3       	brcs	.-52     	; 0xb4c <Modbus_mster_transaction+0x618>
     b80:	20 93 ba 03 	sts	0x03BA, r18	; 0x8003ba <g_mod0_response_buffer_length>
     b84:	80 e0       	ldi	r24, 0x00	; 0
     b86:	03 c0       	rjmp	.+6      	; 0xb8e <Modbus_mster_transaction+0x65a>
     b88:	80 e0       	ldi	r24, 0x00	; 0
     b8a:	01 c0       	rjmp	.+2      	; 0xb8e <Modbus_mster_transaction+0x65a>
     b8c:	80 e0       	ldi	r24, 0x00	; 0
     b8e:	10 92 be 03 	sts	0x03BE, r1	; 0x8003be <g_mod0_transmit_buffer_index>
     b92:	10 92 bd 03 	sts	0x03BD, r1	; 0x8003bd <g_mod0_transmit_buffer_length+0x1>
     b96:	10 92 bc 03 	sts	0x03BC, r1	; 0x8003bc <g_mod0_transmit_buffer_length>
     b9a:	10 92 bb 03 	sts	0x03BB, r1	; 0x8003bb <g_mod0_response_buffer_index>
     b9e:	6d c3       	rjmp	.+1754   	; 0x127a <Modbus_mster_transaction+0xd46>
     ba0:	81 30       	cpi	r24, 0x01	; 1
     ba2:	09 f0       	breq	.+2      	; 0xba6 <Modbus_mster_transaction+0x672>
     ba4:	09 c3       	rjmp	.+1554   	; 0x11b8 <Modbus_mster_transaction+0xc84>
     ba6:	80 91 a5 03 	lds	r24, 0x03A5	; 0x8003a5 <g_mod1_slave>
     baa:	89 83       	std	Y+1, r24	; 0x01
     bac:	2f ef       	ldi	r18, 0xFF	; 255
     bae:	62 13       	cpse	r22, r18
     bb0:	06 c0       	rjmp	.+12     	; 0xbbe <Modbus_mster_transaction+0x68a>
     bb2:	8f e0       	ldi	r24, 0x0F	; 15
     bb4:	8a 83       	std	Y+2, r24	; 0x02
     bb6:	68 94       	set
     bb8:	cc 24       	eor	r12, r12
     bba:	c1 f8       	bld	r12, 1
     bbc:	32 c0       	rjmp	.+100    	; 0xc22 <Modbus_mster_transaction+0x6ee>
     bbe:	6a 83       	std	Y+2, r22	; 0x02
     bc0:	81 e0       	ldi	r24, 0x01	; 1
     bc2:	68 17       	cp	r22, r24
     bc4:	b8 f0       	brcs	.+46     	; 0xbf4 <Modbus_mster_transaction+0x6c0>
     bc6:	94 e0       	ldi	r25, 0x04	; 4
     bc8:	96 17       	cp	r25, r22
     bca:	18 f4       	brcc	.+6      	; 0xbd2 <Modbus_mster_transaction+0x69e>
     bcc:	a7 e1       	ldi	r26, 0x17	; 23
     bce:	6a 13       	cpse	r22, r26
     bd0:	11 c0       	rjmp	.+34     	; 0xbf4 <Modbus_mster_transaction+0x6c0>
     bd2:	80 91 9e 03 	lds	r24, 0x039E	; 0x80039e <g_mod1_read_address>
     bd6:	90 91 9f 03 	lds	r25, 0x039F	; 0x80039f <g_mod1_read_address+0x1>
     bda:	9b 83       	std	Y+3, r25	; 0x03
     bdc:	8c 83       	std	Y+4, r24	; 0x04
     bde:	80 91 9c 03 	lds	r24, 0x039C	; 0x80039c <g_mod1_read_qty>
     be2:	90 91 9d 03 	lds	r25, 0x039D	; 0x80039d <g_mod1_read_qty+0x1>
     be6:	9d 83       	std	Y+5, r25	; 0x05
     be8:	8e 83       	std	Y+6, r24	; 0x06
     bea:	0f 2e       	mov	r0, r31
     bec:	f6 e0       	ldi	r31, 0x06	; 6
     bee:	cf 2e       	mov	r12, r31
     bf0:	f0 2d       	mov	r31, r0
     bf2:	03 c0       	rjmp	.+6      	; 0xbfa <Modbus_mster_transaction+0x6c6>
     bf4:	68 94       	set
     bf6:	cc 24       	eor	r12, r12
     bf8:	c1 f8       	bld	r12, 1
     bfa:	b0 e1       	ldi	r27, 0x10	; 16
     bfc:	bd 15       	cp	r27, r13
     bfe:	40 f0       	brcs	.+16     	; 0xc10 <Modbus_mster_transaction+0x6dc>
     c00:	ef e0       	ldi	r30, 0x0F	; 15
     c02:	de 16       	cp	r13, r30
     c04:	70 f4       	brcc	.+28     	; 0xc22 <Modbus_mster_transaction+0x6ee>
     c06:	8b ef       	ldi	r24, 0xFB	; 251
     c08:	8d 0d       	add	r24, r13
     c0a:	82 30       	cpi	r24, 0x02	; 2
     c0c:	00 f5       	brcc	.+64     	; 0xc4e <Modbus_mster_transaction+0x71a>
     c0e:	09 c0       	rjmp	.+18     	; 0xc22 <Modbus_mster_transaction+0x6ee>
     c10:	f6 e1       	ldi	r31, 0x16	; 22
     c12:	df 16       	cp	r13, r31
     c14:	e0 f0       	brcs	.+56     	; 0xc4e <Modbus_mster_transaction+0x71a>
     c16:	27 e1       	ldi	r18, 0x17	; 23
     c18:	2d 15       	cp	r18, r13
     c1a:	18 f4       	brcc	.+6      	; 0xc22 <Modbus_mster_transaction+0x6ee>
     c1c:	8f ef       	ldi	r24, 0xFF	; 255
     c1e:	d8 12       	cpse	r13, r24
     c20:	16 c0       	rjmp	.+44     	; 0xc4e <Modbus_mster_transaction+0x71a>
     c22:	90 91 1a 03 	lds	r25, 0x031A	; 0x80031a <g_mod1_write_address>
     c26:	80 91 1b 03 	lds	r24, 0x031B	; 0x80031b <g_mod1_write_address+0x1>
     c2a:	e1 e0       	ldi	r30, 0x01	; 1
     c2c:	f0 e0       	ldi	r31, 0x00	; 0
     c2e:	ec 0f       	add	r30, r28
     c30:	fd 1f       	adc	r31, r29
     c32:	ec 0d       	add	r30, r12
     c34:	f1 1d       	adc	r31, r1
     c36:	80 83       	st	Z, r24
     c38:	81 e0       	ldi	r24, 0x01	; 1
     c3a:	8c 0d       	add	r24, r12
     c3c:	e1 e0       	ldi	r30, 0x01	; 1
     c3e:	f0 e0       	ldi	r31, 0x00	; 0
     c40:	ec 0f       	add	r30, r28
     c42:	fd 1f       	adc	r31, r29
     c44:	e8 0f       	add	r30, r24
     c46:	f1 1d       	adc	r31, r1
     c48:	c3 94       	inc	r12
     c4a:	c3 94       	inc	r12
     c4c:	90 83       	st	Z, r25
     c4e:	90 e1       	ldi	r25, 0x10	; 16
     c50:	d9 16       	cp	r13, r25
     c52:	09 f4       	brne	.+2      	; 0xc56 <Modbus_mster_transaction+0x722>
     c54:	ad c0       	rjmp	.+346    	; 0xdb0 <Modbus_mster_transaction+0x87c>
     c56:	9d 15       	cp	r25, r13
     c58:	58 f0       	brcs	.+22     	; 0xc70 <Modbus_mster_transaction+0x73c>
     c5a:	a6 e0       	ldi	r26, 0x06	; 6
     c5c:	da 16       	cp	r13, r26
     c5e:	61 f1       	breq	.+88     	; 0xcb8 <Modbus_mster_transaction+0x784>
     c60:	bf e0       	ldi	r27, 0x0F	; 15
     c62:	db 16       	cp	r13, r27
     c64:	09 f4       	brne	.+2      	; 0xc68 <Modbus_mster_transaction+0x734>
     c66:	41 c0       	rjmp	.+130    	; 0xcea <Modbus_mster_transaction+0x7b6>
     c68:	e5 e0       	ldi	r30, 0x05	; 5
     c6a:	de 12       	cpse	r13, r30
     c6c:	1e c1       	rjmp	.+572    	; 0xeaa <Modbus_mster_transaction+0x976>
     c6e:	0d c0       	rjmp	.+26     	; 0xc8a <Modbus_mster_transaction+0x756>
     c70:	f7 e1       	ldi	r31, 0x17	; 23
     c72:	df 16       	cp	r13, r31
     c74:	09 f4       	brne	.+2      	; 0xc78 <Modbus_mster_transaction+0x744>
     c76:	9c c0       	rjmp	.+312    	; 0xdb0 <Modbus_mster_transaction+0x87c>
     c78:	2f ef       	ldi	r18, 0xFF	; 255
     c7a:	d2 16       	cp	r13, r18
     c7c:	09 f4       	brne	.+2      	; 0xc80 <Modbus_mster_transaction+0x74c>
     c7e:	98 c0       	rjmp	.+304    	; 0xdb0 <Modbus_mster_transaction+0x87c>
     c80:	86 e1       	ldi	r24, 0x16	; 22
     c82:	d8 16       	cp	r13, r24
     c84:	09 f4       	brne	.+2      	; 0xc88 <Modbus_mster_transaction+0x754>
     c86:	e1 c0       	rjmp	.+450    	; 0xe4a <Modbus_mster_transaction+0x916>
     c88:	10 c1       	rjmp	.+544    	; 0xeaa <Modbus_mster_transaction+0x976>
     c8a:	90 91 18 03 	lds	r25, 0x0318	; 0x800318 <g_mod1_write_qty>
     c8e:	80 91 19 03 	lds	r24, 0x0319	; 0x800319 <g_mod1_write_qty+0x1>
     c92:	e1 e0       	ldi	r30, 0x01	; 1
     c94:	f0 e0       	ldi	r31, 0x00	; 0
     c96:	ec 0f       	add	r30, r28
     c98:	fd 1f       	adc	r31, r29
     c9a:	ec 0d       	add	r30, r12
     c9c:	f1 1d       	adc	r31, r1
     c9e:	80 83       	st	Z, r24
     ca0:	81 e0       	ldi	r24, 0x01	; 1
     ca2:	8c 0d       	add	r24, r12
     ca4:	e1 e0       	ldi	r30, 0x01	; 1
     ca6:	f0 e0       	ldi	r31, 0x00	; 0
     ca8:	ec 0f       	add	r30, r28
     caa:	fd 1f       	adc	r31, r29
     cac:	e8 0f       	add	r30, r24
     cae:	f1 1d       	adc	r31, r1
     cb0:	c3 94       	inc	r12
     cb2:	c3 94       	inc	r12
     cb4:	90 83       	st	Z, r25
     cb6:	f9 c0       	rjmp	.+498    	; 0xeaa <Modbus_mster_transaction+0x976>
     cb8:	e8 e9       	ldi	r30, 0x98	; 152
     cba:	f2 e0       	ldi	r31, 0x02	; 2
     cbc:	80 81       	ld	r24, Z
     cbe:	91 81       	ldd	r25, Z+1	; 0x01
     cc0:	a1 e0       	ldi	r26, 0x01	; 1
     cc2:	b0 e0       	ldi	r27, 0x00	; 0
     cc4:	ac 0f       	add	r26, r28
     cc6:	bd 1f       	adc	r27, r29
     cc8:	ac 0d       	add	r26, r12
     cca:	b1 1d       	adc	r27, r1
     ccc:	9c 93       	st	X, r25
     cce:	20 81       	ld	r18, Z
     cd0:	31 81       	ldd	r19, Z+1	; 0x01
     cd2:	81 e0       	ldi	r24, 0x01	; 1
     cd4:	8c 0d       	add	r24, r12
     cd6:	e1 e0       	ldi	r30, 0x01	; 1
     cd8:	f0 e0       	ldi	r31, 0x00	; 0
     cda:	ec 0f       	add	r30, r28
     cdc:	fd 1f       	adc	r31, r29
     cde:	e8 0f       	add	r30, r24
     ce0:	f1 1d       	adc	r31, r1
     ce2:	c3 94       	inc	r12
     ce4:	c3 94       	inc	r12
     ce6:	20 83       	st	Z, r18
     ce8:	e0 c0       	rjmp	.+448    	; 0xeaa <Modbus_mster_transaction+0x976>
     cea:	80 91 18 03 	lds	r24, 0x0318	; 0x800318 <g_mod1_write_qty>
     cee:	90 91 19 03 	lds	r25, 0x0319	; 0x800319 <g_mod1_write_qty+0x1>
     cf2:	e1 e0       	ldi	r30, 0x01	; 1
     cf4:	f0 e0       	ldi	r31, 0x00	; 0
     cf6:	ec 0f       	add	r30, r28
     cf8:	fd 1f       	adc	r31, r29
     cfa:	ec 0d       	add	r30, r12
     cfc:	f1 1d       	adc	r31, r1
     cfe:	90 83       	st	Z, r25
     d00:	22 e0       	ldi	r18, 0x02	; 2
     d02:	2c 0d       	add	r18, r12
     d04:	31 e0       	ldi	r19, 0x01	; 1
     d06:	3c 0d       	add	r19, r12
     d08:	e1 e0       	ldi	r30, 0x01	; 1
     d0a:	f0 e0       	ldi	r31, 0x00	; 0
     d0c:	ec 0f       	add	r30, r28
     d0e:	fd 1f       	adc	r31, r29
     d10:	e3 0f       	add	r30, r19
     d12:	f1 1d       	adc	r31, r1
     d14:	80 83       	st	Z, r24
     d16:	ac 01       	movw	r20, r24
     d18:	47 70       	andi	r20, 0x07	; 7
     d1a:	55 27       	eor	r21, r21
     d1c:	45 2b       	or	r20, r21
     d1e:	49 f0       	breq	.+18     	; 0xd32 <Modbus_mster_transaction+0x7fe>
     d20:	96 95       	lsr	r25
     d22:	87 95       	ror	r24
     d24:	96 95       	lsr	r25
     d26:	87 95       	ror	r24
     d28:	96 95       	lsr	r25
     d2a:	87 95       	ror	r24
     d2c:	91 e0       	ldi	r25, 0x01	; 1
     d2e:	98 0f       	add	r25, r24
     d30:	07 c0       	rjmp	.+14     	; 0xd40 <Modbus_mster_transaction+0x80c>
     d32:	96 95       	lsr	r25
     d34:	87 95       	ror	r24
     d36:	96 95       	lsr	r25
     d38:	87 95       	ror	r24
     d3a:	96 95       	lsr	r25
     d3c:	87 95       	ror	r24
     d3e:	98 2f       	mov	r25, r24
     d40:	a3 e0       	ldi	r26, 0x03	; 3
     d42:	ca 0e       	add	r12, r26
     d44:	fe 01       	movw	r30, r28
     d46:	e2 0f       	add	r30, r18
     d48:	f1 1d       	adc	r31, r1
     d4a:	91 83       	std	Z+1, r25	; 0x01
     d4c:	99 23       	and	r25, r25
     d4e:	09 f4       	brne	.+2      	; 0xd52 <Modbus_mster_transaction+0x81e>
     d50:	ac c0       	rjmp	.+344    	; 0xeaa <Modbus_mster_transaction+0x976>
     d52:	80 e0       	ldi	r24, 0x00	; 0
     d54:	28 2f       	mov	r18, r24
     d56:	21 70       	andi	r18, 0x01	; 1
     d58:	80 ff       	sbrs	r24, 0
     d5a:	03 c0       	rjmp	.+6      	; 0xd62 <Modbus_mster_transaction+0x82e>
     d5c:	21 30       	cpi	r18, 0x01	; 1
     d5e:	99 f0       	breq	.+38     	; 0xd86 <Modbus_mster_transaction+0x852>
     d60:	23 c0       	rjmp	.+70     	; 0xda8 <Modbus_mster_transaction+0x874>
     d62:	e8 2f       	mov	r30, r24
     d64:	e6 95       	lsr	r30
     d66:	f0 e0       	ldi	r31, 0x00	; 0
     d68:	ee 0f       	add	r30, r30
     d6a:	ff 1f       	adc	r31, r31
     d6c:	e8 56       	subi	r30, 0x68	; 104
     d6e:	fd 4f       	sbci	r31, 0xFD	; 253
     d70:	20 81       	ld	r18, Z
     d72:	31 81       	ldd	r19, Z+1	; 0x01
     d74:	e1 e0       	ldi	r30, 0x01	; 1
     d76:	f0 e0       	ldi	r31, 0x00	; 0
     d78:	ec 0f       	add	r30, r28
     d7a:	fd 1f       	adc	r31, r29
     d7c:	ec 0d       	add	r30, r12
     d7e:	f1 1d       	adc	r31, r1
     d80:	20 83       	st	Z, r18
     d82:	c3 94       	inc	r12
     d84:	11 c0       	rjmp	.+34     	; 0xda8 <Modbus_mster_transaction+0x874>
     d86:	e8 2f       	mov	r30, r24
     d88:	e6 95       	lsr	r30
     d8a:	f0 e0       	ldi	r31, 0x00	; 0
     d8c:	ee 0f       	add	r30, r30
     d8e:	ff 1f       	adc	r31, r31
     d90:	e8 56       	subi	r30, 0x68	; 104
     d92:	fd 4f       	sbci	r31, 0xFD	; 253
     d94:	20 81       	ld	r18, Z
     d96:	31 81       	ldd	r19, Z+1	; 0x01
     d98:	e1 e0       	ldi	r30, 0x01	; 1
     d9a:	f0 e0       	ldi	r31, 0x00	; 0
     d9c:	ec 0f       	add	r30, r28
     d9e:	fd 1f       	adc	r31, r29
     da0:	ec 0d       	add	r30, r12
     da2:	f1 1d       	adc	r31, r1
     da4:	30 83       	st	Z, r19
     da6:	c3 94       	inc	r12
     da8:	8f 5f       	subi	r24, 0xFF	; 255
     daa:	89 13       	cpse	r24, r25
     dac:	d3 cf       	rjmp	.-90     	; 0xd54 <Modbus_mster_transaction+0x820>
     dae:	7d c0       	rjmp	.+250    	; 0xeaa <Modbus_mster_transaction+0x976>
     db0:	60 91 18 03 	lds	r22, 0x0318	; 0x800318 <g_mod1_write_qty>
     db4:	80 91 19 03 	lds	r24, 0x0319	; 0x800319 <g_mod1_write_qty+0x1>
     db8:	e1 e0       	ldi	r30, 0x01	; 1
     dba:	f0 e0       	ldi	r31, 0x00	; 0
     dbc:	ec 0f       	add	r30, r28
     dbe:	fd 1f       	adc	r31, r29
     dc0:	ec 0d       	add	r30, r12
     dc2:	f1 1d       	adc	r31, r1
     dc4:	80 83       	st	Z, r24
     dc6:	81 e0       	ldi	r24, 0x01	; 1
     dc8:	8c 0d       	add	r24, r12
     dca:	e1 e0       	ldi	r30, 0x01	; 1
     dcc:	f0 e0       	ldi	r31, 0x00	; 0
     dce:	ec 0f       	add	r30, r28
     dd0:	fd 1f       	adc	r31, r29
     dd2:	e8 0f       	add	r30, r24
     dd4:	f1 1d       	adc	r31, r1
     dd6:	60 83       	st	Z, r22
     dd8:	73 e0       	ldi	r23, 0x03	; 3
     dda:	7c 0d       	add	r23, r12
     ddc:	82 e0       	ldi	r24, 0x02	; 2
     dde:	8c 0d       	add	r24, r12
     de0:	e1 e0       	ldi	r30, 0x01	; 1
     de2:	f0 e0       	ldi	r31, 0x00	; 0
     de4:	ec 0f       	add	r30, r28
     de6:	fd 1f       	adc	r31, r29
     de8:	e8 0f       	add	r30, r24
     dea:	f1 1d       	adc	r31, r1
     dec:	86 2f       	mov	r24, r22
     dee:	88 0f       	add	r24, r24
     df0:	80 83       	st	Z, r24
     df2:	66 23       	and	r22, r22
     df4:	09 f4       	brne	.+2      	; 0xdf8 <Modbus_mster_transaction+0x8c4>
     df6:	58 c0       	rjmp	.+176    	; 0xea8 <Modbus_mster_transaction+0x974>
     df8:	86 2f       	mov	r24, r22
     dfa:	88 0f       	add	r24, r24
     dfc:	8d 5f       	subi	r24, 0xFD	; 253
     dfe:	c8 0e       	add	r12, r24
     e00:	87 2f       	mov	r24, r23
     e02:	20 e0       	ldi	r18, 0x00	; 0
     e04:	30 e0       	ldi	r19, 0x00	; 0
     e06:	91 e0       	ldi	r25, 0x01	; 1
     e08:	98 0f       	add	r25, r24
     e0a:	f9 01       	movw	r30, r18
     e0c:	ee 0f       	add	r30, r30
     e0e:	ff 1f       	adc	r31, r31
     e10:	e8 56       	subi	r30, 0x68	; 104
     e12:	fd 4f       	sbci	r31, 0xFD	; 253
     e14:	40 81       	ld	r20, Z
     e16:	51 81       	ldd	r21, Z+1	; 0x01
     e18:	a1 e0       	ldi	r26, 0x01	; 1
     e1a:	b0 e0       	ldi	r27, 0x00	; 0
     e1c:	ac 0f       	add	r26, r28
     e1e:	bd 1f       	adc	r27, r29
     e20:	a8 0f       	add	r26, r24
     e22:	b1 1d       	adc	r27, r1
     e24:	5c 93       	st	X, r21
     e26:	8e 5f       	subi	r24, 0xFE	; 254
     e28:	40 81       	ld	r20, Z
     e2a:	51 81       	ldd	r21, Z+1	; 0x01
     e2c:	e1 e0       	ldi	r30, 0x01	; 1
     e2e:	f0 e0       	ldi	r31, 0x00	; 0
     e30:	ec 0f       	add	r30, r28
     e32:	fd 1f       	adc	r31, r29
     e34:	e9 0f       	add	r30, r25
     e36:	f1 1d       	adc	r31, r1
     e38:	40 83       	st	Z, r20
     e3a:	2f 5f       	subi	r18, 0xFF	; 255
     e3c:	3f 4f       	sbci	r19, 0xFF	; 255
     e3e:	8c 11       	cpse	r24, r12
     e40:	e2 cf       	rjmp	.-60     	; 0xe06 <Modbus_mster_transaction+0x8d2>
     e42:	66 0f       	add	r22, r22
     e44:	c6 2e       	mov	r12, r22
     e46:	c7 0e       	add	r12, r23
     e48:	30 c0       	rjmp	.+96     	; 0xeaa <Modbus_mster_transaction+0x976>
     e4a:	e8 e9       	ldi	r30, 0x98	; 152
     e4c:	f2 e0       	ldi	r31, 0x02	; 2
     e4e:	80 81       	ld	r24, Z
     e50:	91 81       	ldd	r25, Z+1	; 0x01
     e52:	a1 e0       	ldi	r26, 0x01	; 1
     e54:	b0 e0       	ldi	r27, 0x00	; 0
     e56:	ac 0f       	add	r26, r28
     e58:	bd 1f       	adc	r27, r29
     e5a:	ac 0d       	add	r26, r12
     e5c:	b1 1d       	adc	r27, r1
     e5e:	9c 93       	st	X, r25
     e60:	80 81       	ld	r24, Z
     e62:	91 81       	ldd	r25, Z+1	; 0x01
     e64:	91 e0       	ldi	r25, 0x01	; 1
     e66:	9c 0d       	add	r25, r12
     e68:	a1 e0       	ldi	r26, 0x01	; 1
     e6a:	b0 e0       	ldi	r27, 0x00	; 0
     e6c:	ac 0f       	add	r26, r28
     e6e:	bd 1f       	adc	r27, r29
     e70:	a9 0f       	add	r26, r25
     e72:	b1 1d       	adc	r27, r1
     e74:	8c 93       	st	X, r24
     e76:	82 81       	ldd	r24, Z+2	; 0x02
     e78:	93 81       	ldd	r25, Z+3	; 0x03
     e7a:	82 e0       	ldi	r24, 0x02	; 2
     e7c:	8c 0d       	add	r24, r12
     e7e:	a1 e0       	ldi	r26, 0x01	; 1
     e80:	b0 e0       	ldi	r27, 0x00	; 0
     e82:	ac 0f       	add	r26, r28
     e84:	bd 1f       	adc	r27, r29
     e86:	a8 0f       	add	r26, r24
     e88:	b1 1d       	adc	r27, r1
     e8a:	9c 93       	st	X, r25
     e8c:	22 81       	ldd	r18, Z+2	; 0x02
     e8e:	33 81       	ldd	r19, Z+3	; 0x03
     e90:	83 e0       	ldi	r24, 0x03	; 3
     e92:	8c 0d       	add	r24, r12
     e94:	e1 e0       	ldi	r30, 0x01	; 1
     e96:	f0 e0       	ldi	r31, 0x00	; 0
     e98:	ec 0f       	add	r30, r28
     e9a:	fd 1f       	adc	r31, r29
     e9c:	e8 0f       	add	r30, r24
     e9e:	f1 1d       	adc	r31, r1
     ea0:	b4 e0       	ldi	r27, 0x04	; 4
     ea2:	cb 0e       	add	r12, r27
     ea4:	20 83       	st	Z, r18
     ea6:	01 c0       	rjmp	.+2      	; 0xeaa <Modbus_mster_transaction+0x976>
     ea8:	c7 2e       	mov	r12, r23
     eaa:	cc 20       	and	r12, r12
     eac:	b9 f0       	breq	.+46     	; 0xedc <Modbus_mster_transaction+0x9a8>
     eae:	8e 01       	movw	r16, r28
     eb0:	0f 5f       	subi	r16, 0xFF	; 255
     eb2:	1f 4f       	sbci	r17, 0xFF	; 255
     eb4:	ee 24       	eor	r14, r14
     eb6:	ea 94       	dec	r14
     eb8:	ec 0c       	add	r14, r12
     eba:	f1 2c       	mov	r15, r1
     ebc:	ef ef       	ldi	r30, 0xFF	; 255
     ebe:	ee 1a       	sub	r14, r30
     ec0:	fe 0a       	sbc	r15, r30
     ec2:	e0 0e       	add	r14, r16
     ec4:	f1 1e       	adc	r15, r17
     ec6:	8f ef       	ldi	r24, 0xFF	; 255
     ec8:	9f ef       	ldi	r25, 0xFF	; 255
     eca:	d8 01       	movw	r26, r16
     ecc:	6d 91       	ld	r22, X+
     ece:	8d 01       	movw	r16, r26
     ed0:	0e 94 32 20 	call	0x4064	; 0x4064 <crc16_update>
     ed4:	0e 15       	cp	r16, r14
     ed6:	1f 05       	cpc	r17, r15
     ed8:	c1 f7       	brne	.-16     	; 0xeca <Modbus_mster_transaction+0x996>
     eda:	02 c0       	rjmp	.+4      	; 0xee0 <Modbus_mster_transaction+0x9ac>
     edc:	8f ef       	ldi	r24, 0xFF	; 255
     ede:	9f ef       	ldi	r25, 0xFF	; 255
     ee0:	ee 24       	eor	r14, r14
     ee2:	e3 94       	inc	r14
     ee4:	ec 0c       	add	r14, r12
     ee6:	e1 e0       	ldi	r30, 0x01	; 1
     ee8:	f0 e0       	ldi	r31, 0x00	; 0
     eea:	ec 0f       	add	r30, r28
     eec:	fd 1f       	adc	r31, r29
     eee:	ec 0d       	add	r30, r12
     ef0:	f1 1d       	adc	r31, r1
     ef2:	80 83       	st	Z, r24
     ef4:	c3 94       	inc	r12
     ef6:	c3 94       	inc	r12
     ef8:	e1 e0       	ldi	r30, 0x01	; 1
     efa:	f0 e0       	ldi	r31, 0x00	; 0
     efc:	ec 0f       	add	r30, r28
     efe:	fd 1f       	adc	r31, r29
     f00:	ee 0d       	add	r30, r14
     f02:	f1 1d       	adc	r31, r1
     f04:	90 83       	st	Z, r25
     f06:	e1 e0       	ldi	r30, 0x01	; 1
     f08:	f0 e0       	ldi	r31, 0x00	; 0
     f0a:	ec 0f       	add	r30, r28
     f0c:	fd 1f       	adc	r31, r29
     f0e:	ec 0d       	add	r30, r12
     f10:	f1 1d       	adc	r31, r1
     f12:	10 82       	st	Z, r1
     f14:	e0 91 89 02 	lds	r30, 0x0289	; 0x800289 <g_mod1_Serial_getc>
     f18:	f0 91 8a 02 	lds	r31, 0x028A	; 0x80028a <g_mod1_Serial_getc+0x1>
     f1c:	19 95       	eicall
     f1e:	81 15       	cp	r24, r1
     f20:	91 40       	sbci	r25, 0x01	; 1
     f22:	c1 f7       	brne	.-16     	; 0xf14 <Modbus_mster_transaction+0x9e0>
     f24:	e0 91 8f 02 	lds	r30, 0x028F	; 0x80028f <g_mod1_pre_transmission>
     f28:	f0 91 90 02 	lds	r31, 0x0290	; 0x800290 <g_mod1_pre_transmission+0x1>
     f2c:	30 97       	sbiw	r30, 0x00	; 0
     f2e:	09 f0       	breq	.+2      	; 0xf32 <Modbus_mster_transaction+0x9fe>
     f30:	19 95       	eicall
     f32:	cc 20       	and	r12, r12
     f34:	a1 f0       	breq	.+40     	; 0xf5e <Modbus_mster_transaction+0xa2a>
     f36:	8e 01       	movw	r16, r28
     f38:	0f 5f       	subi	r16, 0xFF	; 255
     f3a:	1f 4f       	sbci	r17, 0xFF	; 255
     f3c:	f1 2c       	mov	r15, r1
     f3e:	ef ef       	ldi	r30, 0xFF	; 255
     f40:	ee 1a       	sub	r14, r30
     f42:	fe 0a       	sbc	r15, r30
     f44:	e0 0e       	add	r14, r16
     f46:	f1 1e       	adc	r15, r17
     f48:	e0 91 8b 02 	lds	r30, 0x028B	; 0x80028b <g_mod1_Serial_putc>
     f4c:	f0 91 8c 02 	lds	r31, 0x028C	; 0x80028c <g_mod1_Serial_putc+0x1>
     f50:	d8 01       	movw	r26, r16
     f52:	8d 91       	ld	r24, X+
     f54:	8d 01       	movw	r16, r26
     f56:	19 95       	eicall
     f58:	0e 15       	cp	r16, r14
     f5a:	1f 05       	cpc	r17, r15
     f5c:	a9 f7       	brne	.-22     	; 0xf48 <Modbus_mster_transaction+0xa14>
     f5e:	e0 91 7f 02 	lds	r30, 0x027F	; 0x80027f <g_mod1_Serial_flush>
     f62:	f0 91 80 02 	lds	r31, 0x0280	; 0x800280 <g_mod1_Serial_flush+0x1>
     f66:	19 95       	eicall
     f68:	e0 91 8d 02 	lds	r30, 0x028D	; 0x80028d <g_mod1_post_transmission>
     f6c:	f0 91 8e 02 	lds	r31, 0x028E	; 0x80028e <g_mod1_post_transmission+0x1>
     f70:	30 97       	sbiw	r30, 0x00	; 0
     f72:	09 f0       	breq	.+2      	; 0xf76 <Modbus_mster_transaction+0xa42>
     f74:	19 95       	eicall
     f76:	0e 94 53 20 	call	0x40a6	; 0x40a6 <Get_millis>
     f7a:	4b 01       	movw	r8, r22
     f7c:	5c 01       	movw	r10, r24
     f7e:	08 e0       	ldi	r16, 0x08	; 8
     f80:	10 e0       	ldi	r17, 0x00	; 0
     f82:	ed 2c       	mov	r14, r13
     f84:	f1 2c       	mov	r15, r1
     f86:	0f 2e       	mov	r0, r31
     f88:	f3 e0       	ldi	r31, 0x03	; 3
     f8a:	cf 2e       	mov	r12, r31
     f8c:	f0 2d       	mov	r31, r0
     f8e:	0f 2e       	mov	r0, r31
     f90:	f5 e0       	ldi	r31, 0x05	; 5
     f92:	df 2e       	mov	r13, r31
     f94:	f0 2d       	mov	r31, r0
     f96:	e0 91 81 02 	lds	r30, 0x0281	; 0x800281 <g_mod1_Serial_available>
     f9a:	f0 91 82 02 	lds	r31, 0x0282	; 0x800282 <g_mod1_Serial_available+0x1>
     f9e:	19 95       	eicall
     fa0:	89 2b       	or	r24, r25
     fa2:	91 f0       	breq	.+36     	; 0xfc8 <Modbus_mster_transaction+0xa94>
     fa4:	77 24       	eor	r7, r7
     fa6:	73 94       	inc	r7
     fa8:	71 0e       	add	r7, r17
     faa:	e0 91 89 02 	lds	r30, 0x0289	; 0x800289 <g_mod1_Serial_getc>
     fae:	f0 91 8a 02 	lds	r31, 0x028A	; 0x80028a <g_mod1_Serial_getc+0x1>
     fb2:	19 95       	eicall
     fb4:	e1 e0       	ldi	r30, 0x01	; 1
     fb6:	f0 e0       	ldi	r31, 0x00	; 0
     fb8:	ec 0f       	add	r30, r28
     fba:	fd 1f       	adc	r31, r29
     fbc:	e1 0f       	add	r30, r17
     fbe:	f1 1d       	adc	r31, r1
     fc0:	80 83       	st	Z, r24
     fc2:	01 50       	subi	r16, 0x01	; 1
     fc4:	17 2d       	mov	r17, r7
     fc6:	07 c0       	rjmp	.+14     	; 0xfd6 <Modbus_mster_transaction+0xaa2>
     fc8:	e0 91 91 02 	lds	r30, 0x0291	; 0x800291 <g_mod1_idle>
     fcc:	f0 91 92 02 	lds	r31, 0x0292	; 0x800292 <g_mod1_idle+0x1>
     fd0:	30 97       	sbiw	r30, 0x00	; 0
     fd2:	09 f0       	breq	.+2      	; 0xfd6 <Modbus_mster_transaction+0xaa2>
     fd4:	19 95       	eicall
     fd6:	15 30       	cpi	r17, 0x05	; 5
     fd8:	51 f5       	brne	.+84     	; 0x102e <Modbus_mster_transaction+0xafa>
     fda:	99 81       	ldd	r25, Y+1	; 0x01
     fdc:	80 91 a5 03 	lds	r24, 0x03A5	; 0x8003a5 <g_mod1_slave>
     fe0:	98 13       	cpse	r25, r24
     fe2:	26 c1       	rjmp	.+588    	; 0x1230 <Modbus_mster_transaction+0xcfc>
     fe4:	8a 81       	ldd	r24, Y+2	; 0x02
     fe6:	28 2f       	mov	r18, r24
     fe8:	2f 77       	andi	r18, 0x7F	; 127
     fea:	30 e0       	ldi	r19, 0x00	; 0
     fec:	2e 15       	cp	r18, r14
     fee:	3f 05       	cpc	r19, r15
     ff0:	09 f0       	breq	.+2      	; 0xff4 <Modbus_mster_transaction+0xac0>
     ff2:	20 c1       	rjmp	.+576    	; 0x1234 <Modbus_mster_transaction+0xd00>
     ff4:	88 23       	and	r24, r24
     ff6:	24 f4       	brge	.+8      	; 0x1000 <Modbus_mster_transaction+0xacc>
     ff8:	8b 81       	ldd	r24, Y+3	; 0x03
     ffa:	88 23       	and	r24, r24
     ffc:	c9 f1       	breq	.+114    	; 0x1070 <Modbus_mster_transaction+0xb3c>
     ffe:	d3 c0       	rjmp	.+422    	; 0x11a6 <Modbus_mster_transaction+0xc72>
    1000:	81 31       	cpi	r24, 0x11	; 17
    1002:	58 f4       	brcc	.+22     	; 0x101a <Modbus_mster_transaction+0xae6>
    1004:	8f 30       	cpi	r24, 0x0F	; 15
    1006:	08 f0       	brcs	.+2      	; 0x100a <Modbus_mster_transaction+0xad6>
    1008:	03 c1       	rjmp	.+518    	; 0x1210 <Modbus_mster_transaction+0xcdc>
    100a:	81 30       	cpi	r24, 0x01	; 1
    100c:	80 f0       	brcs	.+32     	; 0x102e <Modbus_mster_transaction+0xafa>
    100e:	85 30       	cpi	r24, 0x05	; 5
    1010:	68 f0       	brcs	.+26     	; 0x102c <Modbus_mster_transaction+0xaf8>
    1012:	87 30       	cpi	r24, 0x07	; 7
    1014:	08 f4       	brcc	.+2      	; 0x1018 <Modbus_mster_transaction+0xae4>
    1016:	fc c0       	rjmp	.+504    	; 0x1210 <Modbus_mster_transaction+0xcdc>
    1018:	0a c0       	rjmp	.+20     	; 0x102e <Modbus_mster_transaction+0xafa>
    101a:	87 31       	cpi	r24, 0x17	; 23
    101c:	39 f0       	breq	.+14     	; 0x102c <Modbus_mster_transaction+0xaf8>
    101e:	8f 3f       	cpi	r24, 0xFF	; 255
    1020:	09 f4       	brne	.+2      	; 0x1024 <Modbus_mster_transaction+0xaf0>
    1022:	f6 c0       	rjmp	.+492    	; 0x1210 <Modbus_mster_transaction+0xcdc>
    1024:	86 31       	cpi	r24, 0x16	; 22
    1026:	19 f4       	brne	.+6      	; 0x102e <Modbus_mster_transaction+0xafa>
    1028:	0d 2d       	mov	r16, r13
    102a:	f3 c0       	rjmp	.+486    	; 0x1212 <Modbus_mster_transaction+0xcde>
    102c:	0b 81       	ldd	r16, Y+3	; 0x03
    102e:	0e 94 53 20 	call	0x40a6	; 0x40a6 <Get_millis>
    1032:	dc 01       	movw	r26, r24
    1034:	cb 01       	movw	r24, r22
    1036:	88 19       	sub	r24, r8
    1038:	99 09       	sbc	r25, r9
    103a:	aa 09       	sbc	r26, r10
    103c:	bb 09       	sbc	r27, r11
    103e:	81 3d       	cpi	r24, 0xD1	; 209
    1040:	97 40       	sbci	r25, 0x07	; 7
    1042:	a1 05       	cpc	r26, r1
    1044:	b1 05       	cpc	r27, r1
    1046:	08 f4       	brcc	.+2      	; 0x104a <Modbus_mster_transaction+0xb16>
    1048:	12 c1       	rjmp	.+548    	; 0x126e <Modbus_mster_transaction+0xd3a>
    104a:	01 11       	cpse	r16, r1
    104c:	f5 c0       	rjmp	.+490    	; 0x1238 <Modbus_mster_transaction+0xd04>
    104e:	21 2f       	mov	r18, r17
    1050:	82 ee       	ldi	r24, 0xE2	; 226
    1052:	92 ee       	ldi	r25, 0xE2	; 226
    1054:	91 11       	cpse	r25, r1
    1056:	a7 c0       	rjmp	.+334    	; 0x11a6 <Modbus_mster_transaction+0xc72>
    1058:	25 30       	cpi	r18, 0x05	; 5
    105a:	78 f1       	brcs	.+94     	; 0x10ba <Modbus_mster_transaction+0xb86>
    105c:	c1 2e       	mov	r12, r17
    105e:	d1 2c       	mov	r13, r1
    1060:	76 01       	movw	r14, r12
    1062:	f2 e0       	ldi	r31, 0x02	; 2
    1064:	ef 1a       	sub	r14, r31
    1066:	f1 08       	sbc	r15, r1
    1068:	1e 14       	cp	r1, r14
    106a:	1f 04       	cpc	r1, r15
    106c:	5c f0       	brlt	.+22     	; 0x1084 <Modbus_mster_transaction+0xb50>
    106e:	e8 c0       	rjmp	.+464    	; 0x1240 <Modbus_mster_transaction+0xd0c>
    1070:	0f 2e       	mov	r0, r31
    1072:	f3 e0       	ldi	r31, 0x03	; 3
    1074:	ef 2e       	mov	r14, r31
    1076:	f1 2c       	mov	r15, r1
    1078:	f0 2d       	mov	r31, r0
    107a:	0f 2e       	mov	r0, r31
    107c:	f5 e0       	ldi	r31, 0x05	; 5
    107e:	cf 2e       	mov	r12, r31
    1080:	d1 2c       	mov	r13, r1
    1082:	f0 2d       	mov	r31, r0
    1084:	20 e0       	ldi	r18, 0x00	; 0
    1086:	30 e0       	ldi	r19, 0x00	; 0
    1088:	8f ef       	ldi	r24, 0xFF	; 255
    108a:	9f ef       	ldi	r25, 0xFF	; 255
    108c:	00 e0       	ldi	r16, 0x00	; 0
    108e:	e1 e0       	ldi	r30, 0x01	; 1
    1090:	f0 e0       	ldi	r31, 0x00	; 0
    1092:	ec 0f       	add	r30, r28
    1094:	fd 1f       	adc	r31, r29
    1096:	e2 0f       	add	r30, r18
    1098:	f3 1f       	adc	r31, r19
    109a:	60 81       	ld	r22, Z
    109c:	0e 94 32 20 	call	0x4064	; 0x4064 <crc16_update>
    10a0:	0f 5f       	subi	r16, 0xFF	; 255
    10a2:	20 2f       	mov	r18, r16
    10a4:	30 e0       	ldi	r19, 0x00	; 0
    10a6:	2e 15       	cp	r18, r14
    10a8:	3f 05       	cpc	r19, r15
    10aa:	8c f3       	brlt	.-30     	; 0x108e <Modbus_mster_transaction+0xb5a>
    10ac:	cb c0       	rjmp	.+406    	; 0x1244 <Modbus_mster_transaction+0xd10>
    10ae:	fe 01       	movw	r30, r28
    10b0:	ec 0d       	add	r30, r12
    10b2:	fd 1d       	adc	r31, r13
    10b4:	80 81       	ld	r24, Z
    10b6:	89 13       	cpse	r24, r25
    10b8:	ce c0       	rjmp	.+412    	; 0x1256 <Modbus_mster_transaction+0xd22>
    10ba:	8a 81       	ldd	r24, Y+2	; 0x02
    10bc:	85 30       	cpi	r24, 0x05	; 5
    10be:	28 f4       	brcc	.+10     	; 0x10ca <Modbus_mster_transaction+0xb96>
    10c0:	83 30       	cpi	r24, 0x03	; 3
    10c2:	30 f4       	brcc	.+12     	; 0x10d0 <Modbus_mster_transaction+0xb9c>
    10c4:	81 30       	cpi	r24, 0x01	; 1
    10c6:	50 f4       	brcc	.+20     	; 0x10dc <Modbus_mster_transaction+0xba8>
    10c8:	6b c0       	rjmp	.+214    	; 0x11a0 <Modbus_mster_transaction+0xc6c>
    10ca:	87 31       	cpi	r24, 0x17	; 23
    10cc:	09 f0       	breq	.+2      	; 0x10d0 <Modbus_mster_transaction+0xb9c>
    10ce:	68 c0       	rjmp	.+208    	; 0x11a0 <Modbus_mster_transaction+0xc6c>
    10d0:	9b 81       	ldd	r25, Y+3	; 0x03
    10d2:	96 95       	lsr	r25
    10d4:	09 f0       	breq	.+2      	; 0x10d8 <Modbus_mster_transaction+0xba4>
    10d6:	40 c0       	rjmp	.+128    	; 0x1158 <Modbus_mster_transaction+0xc24>
    10d8:	80 e0       	ldi	r24, 0x00	; 0
    10da:	65 c0       	rjmp	.+202    	; 0x11a6 <Modbus_mster_transaction+0xc72>
    10dc:	6b 81       	ldd	r22, Y+3	; 0x03
    10de:	76 2f       	mov	r23, r22
    10e0:	76 95       	lsr	r23
    10e2:	09 f4       	brne	.+2      	; 0x10e6 <Modbus_mster_transaction+0xbb2>
    10e4:	ba c0       	rjmp	.+372    	; 0x125a <Modbus_mster_transaction+0xd26>
    10e6:	fe 01       	movw	r30, r28
    10e8:	35 96       	adiw	r30, 0x05	; 5
    10ea:	20 e0       	ldi	r18, 0x00	; 0
    10ec:	30 e0       	ldi	r19, 0x00	; 0
    10ee:	90 e0       	ldi	r25, 0x00	; 0
    10f0:	01 c0       	rjmp	.+2      	; 0x10f4 <Modbus_mster_transaction+0xbc0>
    10f2:	98 2f       	mov	r25, r24
    10f4:	90 34       	cpi	r25, 0x40	; 64
    10f6:	70 f4       	brcc	.+28     	; 0x1114 <Modbus_mster_transaction+0xbe0>
    10f8:	df 01       	movw	r26, r30
    10fa:	11 97       	sbiw	r26, 0x01	; 1
    10fc:	4c 91       	ld	r20, X
    10fe:	80 81       	ld	r24, Z
    1100:	50 e0       	ldi	r21, 0x00	; 0
    1102:	58 2b       	or	r21, r24
    1104:	d9 01       	movw	r26, r18
    1106:	aa 0f       	add	r26, r26
    1108:	bb 1f       	adc	r27, r27
    110a:	a4 5e       	subi	r26, 0xE4	; 228
    110c:	bc 4f       	sbci	r27, 0xFC	; 252
    110e:	11 96       	adiw	r26, 0x01	; 1
    1110:	5c 93       	st	X, r21
    1112:	4e 93       	st	-X, r20
    1114:	81 e0       	ldi	r24, 0x01	; 1
    1116:	89 0f       	add	r24, r25
    1118:	2f 5f       	subi	r18, 0xFF	; 255
    111a:	3f 4f       	sbci	r19, 0xFF	; 255
    111c:	32 96       	adiw	r30, 0x02	; 2
    111e:	87 17       	cp	r24, r23
    1120:	40 f3       	brcs	.-48     	; 0x10f2 <Modbus_mster_transaction+0xbbe>
    1122:	90 93 93 02 	sts	0x0293, r25	; 0x800293 <g_mod1_response_buffer_length>
    1126:	60 ff       	sbrs	r22, 0
    1128:	3d c0       	rjmp	.+122    	; 0x11a4 <Modbus_mster_transaction+0xc70>
    112a:	80 34       	cpi	r24, 0x40	; 64
    112c:	80 f4       	brcc	.+32     	; 0x114e <Modbus_mster_transaction+0xc1a>
    112e:	01 c0       	rjmp	.+2      	; 0x1132 <Modbus_mster_transaction+0xbfe>
    1130:	80 e0       	ldi	r24, 0x00	; 0
    1132:	28 2f       	mov	r18, r24
    1134:	30 e0       	ldi	r19, 0x00	; 0
    1136:	22 0f       	add	r18, r18
    1138:	33 1f       	adc	r19, r19
    113a:	fe 01       	movw	r30, r28
    113c:	e2 0f       	add	r30, r18
    113e:	f3 1f       	adc	r31, r19
    1140:	44 81       	ldd	r20, Z+4	; 0x04
    1142:	50 e0       	ldi	r21, 0x00	; 0
    1144:	f9 01       	movw	r30, r18
    1146:	e4 5e       	subi	r30, 0xE4	; 228
    1148:	fc 4f       	sbci	r31, 0xFC	; 252
    114a:	51 83       	std	Z+1, r21	; 0x01
    114c:	40 83       	st	Z, r20
    114e:	8f 5f       	subi	r24, 0xFF	; 255
    1150:	80 93 93 02 	sts	0x0293, r24	; 0x800293 <g_mod1_response_buffer_length>
    1154:	80 e0       	ldi	r24, 0x00	; 0
    1156:	27 c0       	rjmp	.+78     	; 0x11a6 <Modbus_mster_transaction+0xc72>
    1158:	fe 01       	movw	r30, r28
    115a:	35 96       	adiw	r30, 0x05	; 5
    115c:	40 e0       	ldi	r20, 0x00	; 0
    115e:	50 e0       	ldi	r21, 0x00	; 0
    1160:	80 e0       	ldi	r24, 0x00	; 0
    1162:	01 c0       	rjmp	.+2      	; 0x1166 <Modbus_mster_transaction+0xc32>
    1164:	82 2f       	mov	r24, r18
    1166:	80 34       	cpi	r24, 0x40	; 64
    1168:	80 f4       	brcc	.+32     	; 0x118a <Modbus_mster_transaction+0xc56>
    116a:	df 01       	movw	r26, r30
    116c:	11 97       	sbiw	r26, 0x01	; 1
    116e:	2c 91       	ld	r18, X
    1170:	30 e0       	ldi	r19, 0x00	; 0
    1172:	32 2f       	mov	r19, r18
    1174:	22 27       	eor	r18, r18
    1176:	60 81       	ld	r22, Z
    1178:	26 2b       	or	r18, r22
    117a:	da 01       	movw	r26, r20
    117c:	aa 0f       	add	r26, r26
    117e:	bb 1f       	adc	r27, r27
    1180:	a4 5e       	subi	r26, 0xE4	; 228
    1182:	bc 4f       	sbci	r27, 0xFC	; 252
    1184:	11 96       	adiw	r26, 0x01	; 1
    1186:	3c 93       	st	X, r19
    1188:	2e 93       	st	-X, r18
    118a:	21 e0       	ldi	r18, 0x01	; 1
    118c:	28 0f       	add	r18, r24
    118e:	4f 5f       	subi	r20, 0xFF	; 255
    1190:	5f 4f       	sbci	r21, 0xFF	; 255
    1192:	32 96       	adiw	r30, 0x02	; 2
    1194:	29 17       	cp	r18, r25
    1196:	30 f3       	brcs	.-52     	; 0x1164 <Modbus_mster_transaction+0xc30>
    1198:	80 93 93 02 	sts	0x0293, r24	; 0x800293 <g_mod1_response_buffer_length>
    119c:	80 e0       	ldi	r24, 0x00	; 0
    119e:	03 c0       	rjmp	.+6      	; 0x11a6 <Modbus_mster_transaction+0xc72>
    11a0:	80 e0       	ldi	r24, 0x00	; 0
    11a2:	01 c0       	rjmp	.+2      	; 0x11a6 <Modbus_mster_transaction+0xc72>
    11a4:	80 e0       	ldi	r24, 0x00	; 0
    11a6:	10 92 97 02 	sts	0x0297, r1	; 0x800297 <g_mod1_transmit_buffer_index>
    11aa:	10 92 96 02 	sts	0x0296, r1	; 0x800296 <g_mod1_transmit_buffer_length+0x1>
    11ae:	10 92 95 02 	sts	0x0295, r1	; 0x800295 <g_mod1_transmit_buffer_length>
    11b2:	10 92 94 02 	sts	0x0294, r1	; 0x800294 <g_mod1_response_buffer_index>
    11b6:	61 c0       	rjmp	.+194    	; 0x127a <Modbus_mster_transaction+0xd46>
    11b8:	84 ee       	ldi	r24, 0xE4	; 228
    11ba:	5f c0       	rjmp	.+190    	; 0x127a <Modbus_mster_transaction+0xd46>
    11bc:	0c 2d       	mov	r16, r12
    11be:	0e 94 53 20 	call	0x40a6	; 0x40a6 <Get_millis>
    11c2:	dc 01       	movw	r26, r24
    11c4:	cb 01       	movw	r24, r22
    11c6:	88 19       	sub	r24, r8
    11c8:	99 09       	sbc	r25, r9
    11ca:	aa 09       	sbc	r26, r10
    11cc:	bb 09       	sbc	r27, r11
    11ce:	81 3d       	cpi	r24, 0xD1	; 209
    11d0:	97 40       	sbci	r25, 0x07	; 7
    11d2:	a1 05       	cpc	r26, r1
    11d4:	b1 05       	cpc	r27, r1
    11d6:	08 f4       	brcc	.+2      	; 0x11da <Modbus_mster_transaction+0xca6>
    11d8:	cc cb       	rjmp	.-2152   	; 0x972 <Modbus_mster_transaction+0x43e>
    11da:	26 cc       	rjmp	.-1972   	; 0xa28 <Modbus_mster_transaction+0x4f4>
    11dc:	80 ee       	ldi	r24, 0xE0	; 224
    11de:	03 c0       	rjmp	.+6      	; 0x11e6 <Modbus_mster_transaction+0xcb2>
    11e0:	81 ee       	ldi	r24, 0xE1	; 225
    11e2:	01 c0       	rjmp	.+2      	; 0x11e6 <Modbus_mster_transaction+0xcb2>
    11e4:	82 ee       	ldi	r24, 0xE2	; 226
    11e6:	88 23       	and	r24, r24
    11e8:	09 f4       	brne	.+2      	; 0x11ec <Modbus_mster_transaction+0xcb8>
    11ea:	5b cc       	rjmp	.-1866   	; 0xaa2 <Modbus_mster_transaction+0x56e>
    11ec:	d0 cc       	rjmp	.-1632   	; 0xb8e <Modbus_mster_transaction+0x65a>
    11ee:	8f ef       	ldi	r24, 0xFF	; 255
    11f0:	9f ef       	ldi	r25, 0xFF	; 255
    11f2:	fe 01       	movw	r30, r28
    11f4:	ee 0d       	add	r30, r14
    11f6:	ff 1d       	adc	r31, r15
    11f8:	21 81       	ldd	r18, Z+1	; 0x01
    11fa:	28 17       	cp	r18, r24
    11fc:	09 f4       	brne	.+2      	; 0x1200 <Modbus_mster_transaction+0xccc>
    11fe:	4b cc       	rjmp	.-1898   	; 0xa96 <Modbus_mster_transaction+0x562>
    1200:	83 ee       	ldi	r24, 0xE3	; 227
    1202:	c5 cc       	rjmp	.-1654   	; 0xb8e <Modbus_mster_transaction+0x65a>
    1204:	83 ee       	ldi	r24, 0xE3	; 227
    1206:	c3 cc       	rjmp	.-1658   	; 0xb8e <Modbus_mster_transaction+0x65a>
    1208:	70 fd       	sbrc	r23, 0
    120a:	86 cc       	rjmp	.-1780   	; 0xb18 <Modbus_mster_transaction+0x5e4>
    120c:	80 e0       	ldi	r24, 0x00	; 0
    120e:	bf cc       	rjmp	.-1666   	; 0xb8e <Modbus_mster_transaction+0x65a>
    1210:	0c 2d       	mov	r16, r12
    1212:	0e 94 53 20 	call	0x40a6	; 0x40a6 <Get_millis>
    1216:	dc 01       	movw	r26, r24
    1218:	cb 01       	movw	r24, r22
    121a:	88 19       	sub	r24, r8
    121c:	99 09       	sbc	r25, r9
    121e:	aa 09       	sbc	r26, r10
    1220:	bb 09       	sbc	r27, r11
    1222:	81 3d       	cpi	r24, 0xD1	; 209
    1224:	97 40       	sbci	r25, 0x07	; 7
    1226:	a1 05       	cpc	r26, r1
    1228:	b1 05       	cpc	r27, r1
    122a:	08 f0       	brcs	.+2      	; 0x122e <Modbus_mster_transaction+0xcfa>
    122c:	0e cf       	rjmp	.-484    	; 0x104a <Modbus_mster_transaction+0xb16>
    122e:	b3 ce       	rjmp	.-666    	; 0xf96 <Modbus_mster_transaction+0xa62>
    1230:	80 ee       	ldi	r24, 0xE0	; 224
    1232:	03 c0       	rjmp	.+6      	; 0x123a <Modbus_mster_transaction+0xd06>
    1234:	81 ee       	ldi	r24, 0xE1	; 225
    1236:	01 c0       	rjmp	.+2      	; 0x123a <Modbus_mster_transaction+0xd06>
    1238:	82 ee       	ldi	r24, 0xE2	; 226
    123a:	81 11       	cpse	r24, r1
    123c:	b4 cf       	rjmp	.-152    	; 0x11a6 <Modbus_mster_transaction+0xc72>
    123e:	3d cf       	rjmp	.-390    	; 0x10ba <Modbus_mster_transaction+0xb86>
    1240:	8f ef       	ldi	r24, 0xFF	; 255
    1242:	9f ef       	ldi	r25, 0xFF	; 255
    1244:	fe 01       	movw	r30, r28
    1246:	ee 0d       	add	r30, r14
    1248:	ff 1d       	adc	r31, r15
    124a:	21 81       	ldd	r18, Z+1	; 0x01
    124c:	28 17       	cp	r18, r24
    124e:	09 f4       	brne	.+2      	; 0x1252 <Modbus_mster_transaction+0xd1e>
    1250:	2e cf       	rjmp	.-420    	; 0x10ae <Modbus_mster_transaction+0xb7a>
    1252:	83 ee       	ldi	r24, 0xE3	; 227
    1254:	a8 cf       	rjmp	.-176    	; 0x11a6 <Modbus_mster_transaction+0xc72>
    1256:	83 ee       	ldi	r24, 0xE3	; 227
    1258:	a6 cf       	rjmp	.-180    	; 0x11a6 <Modbus_mster_transaction+0xc72>
    125a:	60 fd       	sbrc	r22, 0
    125c:	69 cf       	rjmp	.-302    	; 0x1130 <Modbus_mster_transaction+0xbfc>
    125e:	80 e0       	ldi	r24, 0x00	; 0
    1260:	a2 cf       	rjmp	.-188    	; 0x11a6 <Modbus_mster_transaction+0xc72>
    1262:	01 11       	cpse	r16, r1
    1264:	86 cb       	rjmp	.-2292   	; 0x972 <Modbus_mster_transaction+0x43e>
    1266:	91 2f       	mov	r25, r17
    1268:	80 e0       	ldi	r24, 0x00	; 0
    126a:	20 e0       	ldi	r18, 0x00	; 0
    126c:	e7 cb       	rjmp	.-2098   	; 0xa3c <Modbus_mster_transaction+0x508>
    126e:	01 11       	cpse	r16, r1
    1270:	92 ce       	rjmp	.-732    	; 0xf96 <Modbus_mster_transaction+0xa62>
    1272:	21 2f       	mov	r18, r17
    1274:	80 e0       	ldi	r24, 0x00	; 0
    1276:	90 e0       	ldi	r25, 0x00	; 0
    1278:	ed ce       	rjmp	.-550    	; 0x1054 <Modbus_mster_transaction+0xb20>
    127a:	d3 95       	inc	r29
    127c:	0f b6       	in	r0, 0x3f	; 63
    127e:	f8 94       	cli
    1280:	de bf       	out	0x3e, r29	; 62
    1282:	0f be       	out	0x3f, r0	; 63
    1284:	cd bf       	out	0x3d, r28	; 61
    1286:	df 91       	pop	r29
    1288:	cf 91       	pop	r28
    128a:	1f 91       	pop	r17
    128c:	0f 91       	pop	r16
    128e:	ff 90       	pop	r15
    1290:	ef 90       	pop	r14
    1292:	df 90       	pop	r13
    1294:	cf 90       	pop	r12
    1296:	bf 90       	pop	r11
    1298:	af 90       	pop	r10
    129a:	9f 90       	pop	r9
    129c:	8f 90       	pop	r8
    129e:	7f 90       	pop	r7
    12a0:	08 95       	ret

000012a2 <Modbus_init>:
    12a2:	fb 01       	movw	r30, r22
    12a4:	81 11       	cpse	r24, r1
    12a6:	cc c0       	rjmp	.+408    	; 0x1440 <Modbus_init+0x19e>
    12a8:	80 81       	ld	r24, Z
    12aa:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <g_mod0_slave>
    12ae:	81 81       	ldd	r24, Z+1	; 0x01
    12b0:	80 93 cb 04 	sts	0x04CB, r24	; 0x8004cb <g_mod0_uart_no>
    12b4:	42 81       	ldd	r20, Z+2	; 0x02
    12b6:	53 81       	ldd	r21, Z+3	; 0x03
    12b8:	64 81       	ldd	r22, Z+4	; 0x04
    12ba:	75 81       	ldd	r23, Z+5	; 0x05
    12bc:	40 93 c7 04 	sts	0x04C7, r20	; 0x8004c7 <g_mod0_baud_rate>
    12c0:	50 93 c8 04 	sts	0x04C8, r21	; 0x8004c8 <g_mod0_baud_rate+0x1>
    12c4:	60 93 c9 04 	sts	0x04C9, r22	; 0x8004c9 <g_mod0_baud_rate+0x2>
    12c8:	70 93 ca 04 	sts	0x04CA, r23	; 0x8004ca <g_mod0_baud_rate+0x3>
    12cc:	26 81       	ldd	r18, Z+6	; 0x06
    12ce:	37 81       	ldd	r19, Z+7	; 0x07
    12d0:	30 93 b7 03 	sts	0x03B7, r19	; 0x8003b7 <g_mod0_pre_transmission+0x1>
    12d4:	20 93 b6 03 	sts	0x03B6, r18	; 0x8003b6 <g_mod0_pre_transmission>
    12d8:	20 85       	ldd	r18, Z+8	; 0x08
    12da:	31 85       	ldd	r19, Z+9	; 0x09
    12dc:	30 93 b5 03 	sts	0x03B5, r19	; 0x8003b5 <g_mod0_post_transmission+0x1>
    12e0:	20 93 b4 03 	sts	0x03B4, r18	; 0x8003b4 <g_mod0_post_transmission>
    12e4:	10 92 b9 03 	sts	0x03B9, r1	; 0x8003b9 <g_mod0_idle+0x1>
    12e8:	10 92 b8 03 	sts	0x03B8, r1	; 0x8003b8 <g_mod0_idle>
    12ec:	10 92 bb 03 	sts	0x03BB, r1	; 0x8003bb <g_mod0_response_buffer_index>
    12f0:	10 92 ba 03 	sts	0x03BA, r1	; 0x8003ba <g_mod0_response_buffer_length>
    12f4:	81 30       	cpi	r24, 0x01	; 1
    12f6:	a9 f5       	brne	.+106    	; 0x1362 <Modbus_init+0xc0>
    12f8:	80 91 7e 02 	lds	r24, 0x027E	; 0x80027e <UART1_used.1875>
    12fc:	81 11       	cpse	r24, r1
    12fe:	36 c1       	rjmp	.+620    	; 0x156c <Modbus_init+0x2ca>
    1300:	81 e0       	ldi	r24, 0x01	; 1
    1302:	80 93 7e 02 	sts	0x027E, r24	; 0x80027e <UART1_used.1875>
    1306:	cb 01       	movw	r24, r22
    1308:	ba 01       	movw	r22, r20
    130a:	f9 d3       	rcall	.+2034   	; 0x1afe <UART1_init>
    130c:	89 e4       	ldi	r24, 0x49	; 73
    130e:	9e e0       	ldi	r25, 0x0E	; 14
    1310:	90 93 ab 03 	sts	0x03AB, r25	; 0x8003ab <g_mod0_Serial_available+0x1>
    1314:	80 93 aa 03 	sts	0x03AA, r24	; 0x8003aa <g_mod0_Serial_available>
    1318:	84 ef       	ldi	r24, 0xF4	; 244
    131a:	9d e0       	ldi	r25, 0x0D	; 13
    131c:	90 93 ad 03 	sts	0x03AD, r25	; 0x8003ad <g_mod0_Serial_peek+0x1>
    1320:	80 93 ac 03 	sts	0x03AC, r24	; 0x8003ac <g_mod0_Serial_peek>
    1324:	87 e5       	ldi	r24, 0x57	; 87
    1326:	9e e0       	ldi	r25, 0x0E	; 14
    1328:	90 93 af 03 	sts	0x03AF, r25	; 0x8003af <g_mod0_Serial_flush+0x1>
    132c:	80 93 ae 03 	sts	0x03AE, r24	; 0x8003ae <g_mod0_Serial_flush>
    1330:	8a e2       	ldi	r24, 0x2A	; 42
    1332:	9e e0       	ldi	r25, 0x0E	; 14
    1334:	90 93 a9 03 	sts	0x03A9, r25	; 0x8003a9 <g_mod0_Serial_puts+0x1>
    1338:	80 93 a8 03 	sts	0x03A8, r24	; 0x8003a8 <g_mod0_Serial_puts>
    133c:	84 ed       	ldi	r24, 0xD4	; 212
    133e:	9d e0       	ldi	r25, 0x0D	; 13
    1340:	90 93 b1 03 	sts	0x03B1, r25	; 0x8003b1 <g_mod0_Serial_getc+0x1>
    1344:	80 93 b0 03 	sts	0x03B0, r24	; 0x8003b0 <g_mod0_Serial_getc>
    1348:	81 e1       	ldi	r24, 0x11	; 17
    134a:	9e e0       	ldi	r25, 0x0E	; 14
    134c:	90 93 b3 03 	sts	0x03B3, r25	; 0x8003b3 <g_mod0_Serial_putc+0x1>
    1350:	80 93 b2 03 	sts	0x03B2, r24	; 0x8003b2 <g_mod0_Serial_putc>
    1354:	88 e3       	ldi	r24, 0x38	; 56
    1356:	9e e0       	ldi	r25, 0x0E	; 14
    1358:	90 93 a7 03 	sts	0x03A7, r25	; 0x8003a7 <g_mod0_Serial_puts_p+0x1>
    135c:	80 93 a6 03 	sts	0x03A6, r24	; 0x8003a6 <g_mod0_Serial_puts_p>
    1360:	08 95       	ret
    1362:	82 30       	cpi	r24, 0x02	; 2
    1364:	a9 f5       	brne	.+106    	; 0x13d0 <Modbus_init+0x12e>
    1366:	80 91 7d 02 	lds	r24, 0x027D	; 0x80027d <UART2_used.1876>
    136a:	81 11       	cpse	r24, r1
    136c:	ff c0       	rjmp	.+510    	; 0x156c <Modbus_init+0x2ca>
    136e:	81 e0       	ldi	r24, 0x01	; 1
    1370:	80 93 7d 02 	sts	0x027D, r24	; 0x80027d <UART2_used.1876>
    1374:	cb 01       	movw	r24, r22
    1376:	ba 01       	movw	r22, r20
    1378:	0d d5       	rcall	.+2586   	; 0x1d94 <UART2_init>
    137a:	81 e9       	ldi	r24, 0x91	; 145
    137c:	9f e0       	ldi	r25, 0x0F	; 15
    137e:	90 93 ab 03 	sts	0x03AB, r25	; 0x8003ab <g_mod0_Serial_available+0x1>
    1382:	80 93 aa 03 	sts	0x03AA, r24	; 0x8003aa <g_mod0_Serial_available>
    1386:	8c e3       	ldi	r24, 0x3C	; 60
    1388:	9f e0       	ldi	r25, 0x0F	; 15
    138a:	90 93 ad 03 	sts	0x03AD, r25	; 0x8003ad <g_mod0_Serial_peek+0x1>
    138e:	80 93 ac 03 	sts	0x03AC, r24	; 0x8003ac <g_mod0_Serial_peek>
    1392:	8f e9       	ldi	r24, 0x9F	; 159
    1394:	9f e0       	ldi	r25, 0x0F	; 15
    1396:	90 93 af 03 	sts	0x03AF, r25	; 0x8003af <g_mod0_Serial_flush+0x1>
    139a:	80 93 ae 03 	sts	0x03AE, r24	; 0x8003ae <g_mod0_Serial_flush>
    139e:	82 e7       	ldi	r24, 0x72	; 114
    13a0:	9f e0       	ldi	r25, 0x0F	; 15
    13a2:	90 93 a9 03 	sts	0x03A9, r25	; 0x8003a9 <g_mod0_Serial_puts+0x1>
    13a6:	80 93 a8 03 	sts	0x03A8, r24	; 0x8003a8 <g_mod0_Serial_puts>
    13aa:	8f e1       	ldi	r24, 0x1F	; 31
    13ac:	9f e0       	ldi	r25, 0x0F	; 15
    13ae:	90 93 b1 03 	sts	0x03B1, r25	; 0x8003b1 <g_mod0_Serial_getc+0x1>
    13b2:	80 93 b0 03 	sts	0x03B0, r24	; 0x8003b0 <g_mod0_Serial_getc>
    13b6:	89 e5       	ldi	r24, 0x59	; 89
    13b8:	9f e0       	ldi	r25, 0x0F	; 15
    13ba:	90 93 b3 03 	sts	0x03B3, r25	; 0x8003b3 <g_mod0_Serial_putc+0x1>
    13be:	80 93 b2 03 	sts	0x03B2, r24	; 0x8003b2 <g_mod0_Serial_putc>
    13c2:	80 e8       	ldi	r24, 0x80	; 128
    13c4:	9f e0       	ldi	r25, 0x0F	; 15
    13c6:	90 93 a7 03 	sts	0x03A7, r25	; 0x8003a7 <g_mod0_Serial_puts_p+0x1>
    13ca:	80 93 a6 03 	sts	0x03A6, r24	; 0x8003a6 <g_mod0_Serial_puts_p>
    13ce:	08 95       	ret
    13d0:	83 30       	cpi	r24, 0x03	; 3
    13d2:	09 f0       	breq	.+2      	; 0x13d6 <Modbus_init+0x134>
    13d4:	cb c0       	rjmp	.+406    	; 0x156c <Modbus_init+0x2ca>
    13d6:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <UART3_used.1877>
    13da:	81 11       	cpse	r24, r1
    13dc:	c7 c0       	rjmp	.+398    	; 0x156c <Modbus_init+0x2ca>
    13de:	81 e0       	ldi	r24, 0x01	; 1
    13e0:	80 93 7c 02 	sts	0x027C, r24	; 0x80027c <UART3_used.1877>
    13e4:	cb 01       	movw	r24, r22
    13e6:	ba 01       	movw	r22, r20
    13e8:	1d d6       	rcall	.+3130   	; 0x2024 <UART3_init>
    13ea:	89 ed       	ldi	r24, 0xD9	; 217
    13ec:	90 e1       	ldi	r25, 0x10	; 16
    13ee:	90 93 ab 03 	sts	0x03AB, r25	; 0x8003ab <g_mod0_Serial_available+0x1>
    13f2:	80 93 aa 03 	sts	0x03AA, r24	; 0x8003aa <g_mod0_Serial_available>
    13f6:	84 e8       	ldi	r24, 0x84	; 132
    13f8:	90 e1       	ldi	r25, 0x10	; 16
    13fa:	90 93 ad 03 	sts	0x03AD, r25	; 0x8003ad <g_mod0_Serial_peek+0x1>
    13fe:	80 93 ac 03 	sts	0x03AC, r24	; 0x8003ac <g_mod0_Serial_peek>
    1402:	87 ee       	ldi	r24, 0xE7	; 231
    1404:	90 e1       	ldi	r25, 0x10	; 16
    1406:	90 93 af 03 	sts	0x03AF, r25	; 0x8003af <g_mod0_Serial_flush+0x1>
    140a:	80 93 ae 03 	sts	0x03AE, r24	; 0x8003ae <g_mod0_Serial_flush>
    140e:	8a eb       	ldi	r24, 0xBA	; 186
    1410:	90 e1       	ldi	r25, 0x10	; 16
    1412:	90 93 a9 03 	sts	0x03A9, r25	; 0x8003a9 <g_mod0_Serial_puts+0x1>
    1416:	80 93 a8 03 	sts	0x03A8, r24	; 0x8003a8 <g_mod0_Serial_puts>
    141a:	87 e6       	ldi	r24, 0x67	; 103
    141c:	90 e1       	ldi	r25, 0x10	; 16
    141e:	90 93 b1 03 	sts	0x03B1, r25	; 0x8003b1 <g_mod0_Serial_getc+0x1>
    1422:	80 93 b0 03 	sts	0x03B0, r24	; 0x8003b0 <g_mod0_Serial_getc>
    1426:	81 ea       	ldi	r24, 0xA1	; 161
    1428:	90 e1       	ldi	r25, 0x10	; 16
    142a:	90 93 b3 03 	sts	0x03B3, r25	; 0x8003b3 <g_mod0_Serial_putc+0x1>
    142e:	80 93 b2 03 	sts	0x03B2, r24	; 0x8003b2 <g_mod0_Serial_putc>
    1432:	88 ec       	ldi	r24, 0xC8	; 200
    1434:	90 e1       	ldi	r25, 0x10	; 16
    1436:	90 93 a7 03 	sts	0x03A7, r25	; 0x8003a7 <g_mod0_Serial_puts_p+0x1>
    143a:	80 93 a6 03 	sts	0x03A6, r24	; 0x8003a6 <g_mod0_Serial_puts_p>
    143e:	08 95       	ret
    1440:	81 30       	cpi	r24, 0x01	; 1
    1442:	09 f0       	breq	.+2      	; 0x1446 <Modbus_init+0x1a4>
    1444:	93 c0       	rjmp	.+294    	; 0x156c <Modbus_init+0x2ca>
    1446:	80 81       	ld	r24, Z
    1448:	80 93 a5 03 	sts	0x03A5, r24	; 0x8003a5 <g_mod1_slave>
    144c:	81 81       	ldd	r24, Z+1	; 0x01
    144e:	80 93 a4 03 	sts	0x03A4, r24	; 0x8003a4 <g_mod1_uart_no>
    1452:	42 81       	ldd	r20, Z+2	; 0x02
    1454:	53 81       	ldd	r21, Z+3	; 0x03
    1456:	64 81       	ldd	r22, Z+4	; 0x04
    1458:	75 81       	ldd	r23, Z+5	; 0x05
    145a:	40 93 a0 03 	sts	0x03A0, r20	; 0x8003a0 <g_mod1_baud_rate>
    145e:	50 93 a1 03 	sts	0x03A1, r21	; 0x8003a1 <g_mod1_baud_rate+0x1>
    1462:	60 93 a2 03 	sts	0x03A2, r22	; 0x8003a2 <g_mod1_baud_rate+0x2>
    1466:	70 93 a3 03 	sts	0x03A3, r23	; 0x8003a3 <g_mod1_baud_rate+0x3>
    146a:	26 81       	ldd	r18, Z+6	; 0x06
    146c:	37 81       	ldd	r19, Z+7	; 0x07
    146e:	30 93 90 02 	sts	0x0290, r19	; 0x800290 <g_mod1_pre_transmission+0x1>
    1472:	20 93 8f 02 	sts	0x028F, r18	; 0x80028f <g_mod1_pre_transmission>
    1476:	20 85       	ldd	r18, Z+8	; 0x08
    1478:	31 85       	ldd	r19, Z+9	; 0x09
    147a:	30 93 8e 02 	sts	0x028E, r19	; 0x80028e <g_mod1_post_transmission+0x1>
    147e:	20 93 8d 02 	sts	0x028D, r18	; 0x80028d <g_mod1_post_transmission>
    1482:	10 92 92 02 	sts	0x0292, r1	; 0x800292 <g_mod1_idle+0x1>
    1486:	10 92 91 02 	sts	0x0291, r1	; 0x800291 <g_mod1_idle>
    148a:	10 92 94 02 	sts	0x0294, r1	; 0x800294 <g_mod1_response_buffer_index>
    148e:	10 92 93 02 	sts	0x0293, r1	; 0x800293 <g_mod1_response_buffer_length>
    1492:	81 30       	cpi	r24, 0x01	; 1
    1494:	a9 f5       	brne	.+106    	; 0x1500 <Modbus_init+0x25e>
    1496:	80 91 7e 02 	lds	r24, 0x027E	; 0x80027e <UART1_used.1875>
    149a:	81 11       	cpse	r24, r1
    149c:	67 c0       	rjmp	.+206    	; 0x156c <Modbus_init+0x2ca>
    149e:	81 e0       	ldi	r24, 0x01	; 1
    14a0:	80 93 7e 02 	sts	0x027E, r24	; 0x80027e <UART1_used.1875>
    14a4:	cb 01       	movw	r24, r22
    14a6:	ba 01       	movw	r22, r20
    14a8:	2a d3       	rcall	.+1620   	; 0x1afe <UART1_init>
    14aa:	89 e4       	ldi	r24, 0x49	; 73
    14ac:	9e e0       	ldi	r25, 0x0E	; 14
    14ae:	90 93 82 02 	sts	0x0282, r25	; 0x800282 <g_mod1_Serial_available+0x1>
    14b2:	80 93 81 02 	sts	0x0281, r24	; 0x800281 <g_mod1_Serial_available>
    14b6:	84 ef       	ldi	r24, 0xF4	; 244
    14b8:	9d e0       	ldi	r25, 0x0D	; 13
    14ba:	90 93 88 02 	sts	0x0288, r25	; 0x800288 <g_mod1_Serial_peek+0x1>
    14be:	80 93 87 02 	sts	0x0287, r24	; 0x800287 <g_mod1_Serial_peek>
    14c2:	87 e5       	ldi	r24, 0x57	; 87
    14c4:	9e e0       	ldi	r25, 0x0E	; 14
    14c6:	90 93 80 02 	sts	0x0280, r25	; 0x800280 <g_mod1_Serial_flush+0x1>
    14ca:	80 93 7f 02 	sts	0x027F, r24	; 0x80027f <g_mod1_Serial_flush>
    14ce:	8a e2       	ldi	r24, 0x2A	; 42
    14d0:	9e e0       	ldi	r25, 0x0E	; 14
    14d2:	90 93 86 02 	sts	0x0286, r25	; 0x800286 <g_mod1_Serial_puts+0x1>
    14d6:	80 93 85 02 	sts	0x0285, r24	; 0x800285 <g_mod1_Serial_puts>
    14da:	84 ed       	ldi	r24, 0xD4	; 212
    14dc:	9d e0       	ldi	r25, 0x0D	; 13
    14de:	90 93 8a 02 	sts	0x028A, r25	; 0x80028a <g_mod1_Serial_getc+0x1>
    14e2:	80 93 89 02 	sts	0x0289, r24	; 0x800289 <g_mod1_Serial_getc>
    14e6:	81 e1       	ldi	r24, 0x11	; 17
    14e8:	9e e0       	ldi	r25, 0x0E	; 14
    14ea:	90 93 8c 02 	sts	0x028C, r25	; 0x80028c <g_mod1_Serial_putc+0x1>
    14ee:	80 93 8b 02 	sts	0x028B, r24	; 0x80028b <g_mod1_Serial_putc>
    14f2:	88 e3       	ldi	r24, 0x38	; 56
    14f4:	9e e0       	ldi	r25, 0x0E	; 14
    14f6:	90 93 84 02 	sts	0x0284, r25	; 0x800284 <g_mod1_Serial_puts_p+0x1>
    14fa:	80 93 83 02 	sts	0x0283, r24	; 0x800283 <g_mod1_Serial_puts_p>
    14fe:	08 95       	ret
    1500:	82 30       	cpi	r24, 0x02	; 2
    1502:	a1 f5       	brne	.+104    	; 0x156c <Modbus_init+0x2ca>
    1504:	80 91 7d 02 	lds	r24, 0x027D	; 0x80027d <UART2_used.1876>
    1508:	81 11       	cpse	r24, r1
    150a:	30 c0       	rjmp	.+96     	; 0x156c <Modbus_init+0x2ca>
    150c:	81 e0       	ldi	r24, 0x01	; 1
    150e:	80 93 7d 02 	sts	0x027D, r24	; 0x80027d <UART2_used.1876>
    1512:	cb 01       	movw	r24, r22
    1514:	ba 01       	movw	r22, r20
    1516:	3e d4       	rcall	.+2172   	; 0x1d94 <UART2_init>
    1518:	81 e9       	ldi	r24, 0x91	; 145
    151a:	9f e0       	ldi	r25, 0x0F	; 15
    151c:	90 93 82 02 	sts	0x0282, r25	; 0x800282 <g_mod1_Serial_available+0x1>
    1520:	80 93 81 02 	sts	0x0281, r24	; 0x800281 <g_mod1_Serial_available>
    1524:	8c e3       	ldi	r24, 0x3C	; 60
    1526:	9f e0       	ldi	r25, 0x0F	; 15
    1528:	90 93 88 02 	sts	0x0288, r25	; 0x800288 <g_mod1_Serial_peek+0x1>
    152c:	80 93 87 02 	sts	0x0287, r24	; 0x800287 <g_mod1_Serial_peek>
    1530:	8f e9       	ldi	r24, 0x9F	; 159
    1532:	9f e0       	ldi	r25, 0x0F	; 15
    1534:	90 93 80 02 	sts	0x0280, r25	; 0x800280 <g_mod1_Serial_flush+0x1>
    1538:	80 93 7f 02 	sts	0x027F, r24	; 0x80027f <g_mod1_Serial_flush>
    153c:	82 e7       	ldi	r24, 0x72	; 114
    153e:	9f e0       	ldi	r25, 0x0F	; 15
    1540:	90 93 86 02 	sts	0x0286, r25	; 0x800286 <g_mod1_Serial_puts+0x1>
    1544:	80 93 85 02 	sts	0x0285, r24	; 0x800285 <g_mod1_Serial_puts>
    1548:	8f e1       	ldi	r24, 0x1F	; 31
    154a:	9f e0       	ldi	r25, 0x0F	; 15
    154c:	90 93 8a 02 	sts	0x028A, r25	; 0x80028a <g_mod1_Serial_getc+0x1>
    1550:	80 93 89 02 	sts	0x0289, r24	; 0x800289 <g_mod1_Serial_getc>
    1554:	89 e5       	ldi	r24, 0x59	; 89
    1556:	9f e0       	ldi	r25, 0x0F	; 15
    1558:	90 93 8c 02 	sts	0x028C, r25	; 0x80028c <g_mod1_Serial_putc+0x1>
    155c:	80 93 8b 02 	sts	0x028B, r24	; 0x80028b <g_mod1_Serial_putc>
    1560:	80 e8       	ldi	r24, 0x80	; 128
    1562:	9f e0       	ldi	r25, 0x0F	; 15
    1564:	90 93 84 02 	sts	0x0284, r25	; 0x800284 <g_mod1_Serial_puts_p+0x1>
    1568:	80 93 83 02 	sts	0x0283, r24	; 0x800283 <g_mod1_Serial_puts_p>
    156c:	08 95       	ret

0000156e <Modbus_Get_response_buffer>:
    156e:	81 11       	cpse	r24, r1
    1570:	0b c0       	rjmp	.+22     	; 0x1588 <Modbus_Get_response_buffer+0x1a>
    1572:	60 34       	cpi	r22, 0x40	; 64
    1574:	b0 f4       	brcc	.+44     	; 0x15a2 <Modbus_Get_response_buffer+0x34>
    1576:	e6 2f       	mov	r30, r22
    1578:	f0 e0       	ldi	r31, 0x00	; 0
    157a:	ee 0f       	add	r30, r30
    157c:	ff 1f       	adc	r31, r31
    157e:	ed 5b       	subi	r30, 0xBD	; 189
    1580:	fb 4f       	sbci	r31, 0xFB	; 251
    1582:	80 81       	ld	r24, Z
    1584:	91 81       	ldd	r25, Z+1	; 0x01
    1586:	08 95       	ret
    1588:	81 30       	cpi	r24, 0x01	; 1
    158a:	71 f4       	brne	.+28     	; 0x15a8 <Modbus_Get_response_buffer+0x3a>
    158c:	60 34       	cpi	r22, 0x40	; 64
    158e:	78 f4       	brcc	.+30     	; 0x15ae <Modbus_Get_response_buffer+0x40>
    1590:	e6 2f       	mov	r30, r22
    1592:	f0 e0       	ldi	r31, 0x00	; 0
    1594:	ee 0f       	add	r30, r30
    1596:	ff 1f       	adc	r31, r31
    1598:	e4 5e       	subi	r30, 0xE4	; 228
    159a:	fc 4f       	sbci	r31, 0xFC	; 252
    159c:	80 81       	ld	r24, Z
    159e:	91 81       	ldd	r25, Z+1	; 0x01
    15a0:	08 95       	ret
    15a2:	8f ef       	ldi	r24, 0xFF	; 255
    15a4:	9f ef       	ldi	r25, 0xFF	; 255
    15a6:	08 95       	ret
    15a8:	8f ef       	ldi	r24, 0xFF	; 255
    15aa:	9f ef       	ldi	r25, 0xFF	; 255
    15ac:	08 95       	ret
    15ae:	8f ef       	ldi	r24, 0xFF	; 255
    15b0:	9f ef       	ldi	r25, 0xFF	; 255
    15b2:	08 95       	ret

000015b4 <Modbus_Set_transmit_buffer>:
    15b4:	81 11       	cpse	r24, r1
    15b6:	0b c0       	rjmp	.+22     	; 0x15ce <Modbus_Set_transmit_buffer+0x1a>
    15b8:	60 34       	cpi	r22, 0x40	; 64
    15ba:	b8 f4       	brcc	.+46     	; 0x15ea <Modbus_Set_transmit_buffer+0x36>
    15bc:	e6 2f       	mov	r30, r22
    15be:	f0 e0       	ldi	r31, 0x00	; 0
    15c0:	ee 0f       	add	r30, r30
    15c2:	ff 1f       	adc	r31, r31
    15c4:	e1 54       	subi	r30, 0x41	; 65
    15c6:	fc 4f       	sbci	r31, 0xFC	; 252
    15c8:	51 83       	std	Z+1, r21	; 0x01
    15ca:	40 83       	st	Z, r20
    15cc:	08 95       	ret
    15ce:	81 30       	cpi	r24, 0x01	; 1
    15d0:	71 f4       	brne	.+28     	; 0x15ee <Modbus_Set_transmit_buffer+0x3a>
    15d2:	60 34       	cpi	r22, 0x40	; 64
    15d4:	70 f4       	brcc	.+28     	; 0x15f2 <Modbus_Set_transmit_buffer+0x3e>
    15d6:	e6 2f       	mov	r30, r22
    15d8:	f0 e0       	ldi	r31, 0x00	; 0
    15da:	ee 0f       	add	r30, r30
    15dc:	ff 1f       	adc	r31, r31
    15de:	e8 56       	subi	r30, 0x68	; 104
    15e0:	fd 4f       	sbci	r31, 0xFD	; 253
    15e2:	51 83       	std	Z+1, r21	; 0x01
    15e4:	40 83       	st	Z, r20
    15e6:	80 e0       	ldi	r24, 0x00	; 0
    15e8:	08 95       	ret
    15ea:	82 e0       	ldi	r24, 0x02	; 2
    15ec:	08 95       	ret
    15ee:	82 e0       	ldi	r24, 0x02	; 2
    15f0:	08 95       	ret
    15f2:	82 e0       	ldi	r24, 0x02	; 2
    15f4:	08 95       	ret

000015f6 <Modbus_Read_holding_registers>:
    15f6:	81 11       	cpse	r24, r1
    15f8:	0c c0       	rjmp	.+24     	; 0x1612 <Modbus_Read_holding_registers+0x1c>
    15fa:	70 93 c6 04 	sts	0x04C6, r23	; 0x8004c6 <g_mod0_read_address+0x1>
    15fe:	60 93 c5 04 	sts	0x04C5, r22	; 0x8004c5 <g_mod0_read_address>
    1602:	50 93 c4 04 	sts	0x04C4, r21	; 0x8004c4 <g_mod0_read_qty+0x1>
    1606:	40 93 c3 04 	sts	0x04C3, r20	; 0x8004c3 <g_mod0_read_qty>
    160a:	63 e0       	ldi	r22, 0x03	; 3
    160c:	0c 94 9a 02 	jmp	0x534	; 0x534 <Modbus_mster_transaction>
    1610:	08 95       	ret
    1612:	81 30       	cpi	r24, 0x01	; 1
    1614:	61 f4       	brne	.+24     	; 0x162e <Modbus_Read_holding_registers+0x38>
    1616:	70 93 9f 03 	sts	0x039F, r23	; 0x80039f <g_mod1_read_address+0x1>
    161a:	60 93 9e 03 	sts	0x039E, r22	; 0x80039e <g_mod1_read_address>
    161e:	50 93 9d 03 	sts	0x039D, r21	; 0x80039d <g_mod1_read_qty+0x1>
    1622:	40 93 9c 03 	sts	0x039C, r20	; 0x80039c <g_mod1_read_qty>
    1626:	63 e0       	ldi	r22, 0x03	; 3
    1628:	0c 94 9a 02 	jmp	0x534	; 0x534 <Modbus_mster_transaction>
    162c:	08 95       	ret
    162e:	84 ee       	ldi	r24, 0xE4	; 228
    1630:	08 95       	ret

00001632 <Modbus_Write_multiple_registers>:
@return 0 on success; exception number on failure
@ingroup register
*/
uint8_t Modbus_Write_multiple_registers(uint8_t device,uint16_t u16WriteAddress, uint16_t u16WriteQty)
{
	if(DEVICE_0 == device){
    1632:	81 11       	cpse	r24, r1
    1634:	0c c0       	rjmp	.+24     	; 0x164e <Modbus_Write_multiple_registers+0x1c>
	
		g_mod0_write_address = u16WriteAddress;
    1636:	70 93 42 04 	sts	0x0442, r23	; 0x800442 <g_mod0_write_address+0x1>
    163a:	60 93 41 04 	sts	0x0441, r22	; 0x800441 <g_mod0_write_address>
		g_mod0_write_qty = u16WriteQty;
    163e:	50 93 40 04 	sts	0x0440, r21	; 0x800440 <g_mod0_write_qty+0x1>
    1642:	40 93 3f 04 	sts	0x043F, r20	; 0x80043f <g_mod0_write_qty>
		return Modbus_mster_transaction(device, WRITE_MULTIPLE_REGISTERS);
    1646:	60 e1       	ldi	r22, 0x10	; 16
    1648:	0c 94 9a 02 	jmp	0x534	; 0x534 <Modbus_mster_transaction>
    164c:	08 95       	ret
	}
	else if(DEVICE_1 == device){
    164e:	81 30       	cpi	r24, 0x01	; 1
    1650:	61 f4       	brne	.+24     	; 0x166a <Modbus_Write_multiple_registers+0x38>
		g_mod1_write_address = u16WriteAddress;
    1652:	70 93 1b 03 	sts	0x031B, r23	; 0x80031b <g_mod1_write_address+0x1>
    1656:	60 93 1a 03 	sts	0x031A, r22	; 0x80031a <g_mod1_write_address>
		g_mod1_write_qty = u16WriteQty;
    165a:	50 93 19 03 	sts	0x0319, r21	; 0x800319 <g_mod1_write_qty+0x1>
    165e:	40 93 18 03 	sts	0x0318, r20	; 0x800318 <g_mod1_write_qty>
		return Modbus_mster_transaction(device, WRITE_MULTIPLE_REGISTERS);
    1662:	60 e1       	ldi	r22, 0x10	; 16
    1664:	0c 94 9a 02 	jmp	0x534	; 0x534 <Modbus_mster_transaction>
    1668:	08 95       	ret
	}
	return  INVALID_DEVICE;
    166a:	84 ee       	ldi	r24, 0xE4	; 228
}
    166c:	08 95       	ret

0000166e <vTask2>:
}
static void vTask2(void* pvParameters)
{
	uint8_t x=0;
	uint16_t RTE_data=0;
	UART0_puts("Enter Task2");
    166e:	83 e1       	ldi	r24, 0x13	; 19
    1670:	92 e0       	ldi	r25, 0x02	; 2
    1672:	c9 d1       	rcall	.+914    	; 0x1a06 <UART0_puts>
// 		UART0_putc('\n');
// 	}
}
static void vTask2(void* pvParameters)
{
	uint8_t x=0;
    1674:	c0 e0       	ldi	r28, 0x00	; 0
	uint16_t RTE_data=0;
	UART0_puts("Enter Task2");
	while(1){
		UART0_puts("Task2 set current temp with =");
    1676:	8f e1       	ldi	r24, 0x1F	; 31
    1678:	92 e0       	ldi	r25, 0x02	; 2
    167a:	c5 d1       	rcall	.+906    	; 0x1a06 <UART0_puts>
		UART0_OutUDec(x);
    167c:	6c 2f       	mov	r22, r28
    167e:	70 e0       	ldi	r23, 0x00	; 0
    1680:	80 e0       	ldi	r24, 0x00	; 0
    1682:	90 e0       	ldi	r25, 0x00	; 0
    1684:	a4 d1       	rcall	.+840    	; 0x19ce <UART0_OutUDec>
		UART0_putc('\n');
    1686:	8a e0       	ldi	r24, 0x0A	; 10
    1688:	89 d1       	rcall	.+786    	; 0x199c <UART0_putc>
		RTE_set_Current_temperature(++x);
    168a:	cf 5f       	subi	r28, 0xFF	; 255
    168c:	8c 2f       	mov	r24, r28
    168e:	90 e0       	ldi	r25, 0x00	; 0
    1690:	81 d7       	rcall	.+3842   	; 0x2594 <RTE_set_Current_temperature>
		UART0_puts("Task2 Requires ");
    1692:	8d e3       	ldi	r24, 0x3D	; 61
    1694:	92 e0       	ldi	r25, 0x02	; 2
    1696:	b7 d1       	rcall	.+878    	; 0x1a06 <UART0_puts>
		RTE_data = RTE_get_RPM_max();
    1698:	09 d6       	rcall	.+3090   	; 0x22ac <RTE_get_RPM_max>
    169a:	8c 01       	movw	r16, r24
		UART0_puts("Task2 RTE_data = ");
    169c:	8d e4       	ldi	r24, 0x4D	; 77
    169e:	92 e0       	ldi	r25, 0x02	; 2
    16a0:	b2 d1       	rcall	.+868    	; 0x1a06 <UART0_puts>
		UART0_OutUDec(RTE_data);
    16a2:	b8 01       	movw	r22, r16
    16a4:	80 e0       	ldi	r24, 0x00	; 0
    16a6:	90 e0       	ldi	r25, 0x00	; 0
    16a8:	92 d1       	rcall	.+804    	; 0x19ce <UART0_OutUDec>
		UART0_putc('\n');
    16aa:	8a e0       	ldi	r24, 0x0A	; 10
    16ac:	77 d1       	rcall	.+750    	; 0x199c <UART0_putc>
		
		
	}
    16ae:	e3 cf       	rjmp	.-58     	; 0x1676 <vTask2+0x8>

000016b0 <vTask1>:
}



static void vTask1(void* pvParameters)
{
    16b0:	cf 93       	push	r28
    16b2:	df 93       	push	r29
    16b4:	1f 92       	push	r1
    16b6:	cd b7       	in	r28, 0x3d	; 61
    16b8:	de b7       	in	r29, 0x3e	; 62
	char x=0;
    16ba:	19 82       	std	Y+1, r1	; 0x01
	LCD_main(&x);
    16bc:	ce 01       	movw	r24, r28
    16be:	01 96       	adiw	r24, 0x01	; 1
    16c0:	0e 94 c4 1f 	call	0x3f88	; 0x3f88 <LCD_main>
// 		xSemaphoreTake(Sema_Test_handle,portMAX_DELAY);
// 		UART0_puts("Vtask1 Released data= ");
// 		UART0_OutUDec(Test);
// 		UART0_putc('\n');
// 	}
}
    16c4:	0f 90       	pop	r0
    16c6:	df 91       	pop	r29
    16c8:	cf 91       	pop	r28
    16ca:	08 95       	ret

000016cc <main>:

TaskHandle_t xHandle1 = NULL , xHandle2 = NULL;


int main(void) {
	DDRE = 0xFF;
    16cc:	8f ef       	ldi	r24, 0xFF	; 255
    16ce:	8d b9       	out	0x0d, r24	; 13
	UART0_init(9600); //for debug
    16d0:	60 e8       	ldi	r22, 0x80	; 128
    16d2:	75 e2       	ldi	r23, 0x25	; 37
    16d4:	80 e0       	ldi	r24, 0x00	; 0
    16d6:	90 e0       	ldi	r25, 0x00	; 0
    16d8:	0c d1       	rcall	.+536    	; 0x18f2 <UART0_init>
    System_init();
    16da:	0e 94 23 20 	call	0x4046	; 0x4046 <System_init>
		
	
	/* Create the task without using any dynamic memory allocation. */
	xHandle1 = xTaskCreateStatic(
    16de:	0f 2e       	mov	r0, r31
    16e0:	f2 e5       	ldi	r31, 0x52	; 82
    16e2:	cf 2e       	mov	r12, r31
    16e4:	fd e0       	ldi	r31, 0x0D	; 13
    16e6:	df 2e       	mov	r13, r31
    16e8:	f0 2d       	mov	r31, r0
    16ea:	0f 2e       	mov	r0, r31
    16ec:	fd ea       	ldi	r31, 0xAD	; 173
    16ee:	ef 2e       	mov	r14, r31
    16f0:	fd e0       	ldi	r31, 0x0D	; 13
    16f2:	ff 2e       	mov	r15, r31
    16f4:	f0 2d       	mov	r31, r0
    16f6:	02 e0       	ldi	r16, 0x02	; 2
    16f8:	20 e0       	ldi	r18, 0x00	; 0
    16fa:	30 e0       	ldi	r19, 0x00	; 0
    16fc:	48 ec       	ldi	r20, 0xC8	; 200
    16fe:	50 e0       	ldi	r21, 0x00	; 0
    1700:	6f e5       	ldi	r22, 0x5F	; 95
    1702:	72 e0       	ldi	r23, 0x02	; 2
    1704:	88 e5       	ldi	r24, 0x58	; 88
    1706:	9b e0       	ldi	r25, 0x0B	; 11
    1708:	0e 94 ad 18 	call	0x315a	; 0x315a <xTaskCreateStatic>
    170c:	90 93 d0 04 	sts	0x04D0, r25	; 0x8004d0 <xHandle1+0x1>
    1710:	80 93 cf 04 	sts	0x04CF, r24	; 0x8004cf <xHandle1>
					NULL, /* Parameter passed into the task. */
					2,/* Priority at which the task is created. */
					xStack1, /* Array to use as the task's stack. */
					&xTask1Buffer); /* Variable to hold the task's data structure. */
	
	xHandle2 = xTaskCreateStatic(
    1714:	0f 2e       	mov	r0, r31
    1716:	fa e7       	ldi	r31, 0x7A	; 122
    1718:	cf 2e       	mov	r12, r31
    171a:	fd e0       	ldi	r31, 0x0D	; 13
    171c:	df 2e       	mov	r13, r31
    171e:	f0 2d       	mov	r31, r0
    1720:	0f 2e       	mov	r0, r31
    1722:	f5 e7       	ldi	r31, 0x75	; 117
    1724:	ef 2e       	mov	r14, r31
    1726:	fe e0       	ldi	r31, 0x0E	; 14
    1728:	ff 2e       	mov	r15, r31
    172a:	f0 2d       	mov	r31, r0
    172c:	20 e0       	ldi	r18, 0x00	; 0
    172e:	30 e0       	ldi	r19, 0x00	; 0
    1730:	48 ec       	ldi	r20, 0xC8	; 200
    1732:	50 e0       	ldi	r21, 0x00	; 0
    1734:	69 e1       	ldi	r22, 0x19	; 25
    1736:	72 e0       	ldi	r23, 0x02	; 2
    1738:	87 e3       	ldi	r24, 0x37	; 55
    173a:	9b e0       	ldi	r25, 0x0B	; 11
    173c:	0e 94 ad 18 	call	0x315a	; 0x315a <xTaskCreateStatic>
    1740:	90 93 ce 04 	sts	0x04CE, r25	; 0x8004ce <xHandle2+0x1>
    1744:	80 93 cd 04 	sts	0x04CD, r24	; 0x8004cd <xHandle2>
// 		
// 	}
// 	

	  // Start scheduler.
	  vTaskStartScheduler();
    1748:	0e 94 a4 19 	call	0x3348	; 0x3348 <vTaskStartScheduler>

	while (1)
	{
	}
    174c:	ff cf       	rjmp	.-2      	; 0x174c <main+0x80>

0000174e <__vector_29>:
	return returned_data ;
}


ISR(ADC_vect)
{
    174e:	1f 92       	push	r1
    1750:	0f 92       	push	r0
    1752:	0f b6       	in	r0, 0x3f	; 63
    1754:	0f 92       	push	r0
    1756:	11 24       	eor	r1, r1
    1758:	2f 93       	push	r18
    175a:	8f 93       	push	r24
    175c:	9f 93       	push	r25
	   uint8_t The_low_adc_reg = ADC_DATA_REG_LOW ;
    175e:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
	  // get 10 bits out of the high and low register .
	  g_analog_data =  The_low_adc_reg | (ADC_DATA_REG_HIGH <<8);
    1762:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
    1766:	90 e0       	ldi	r25, 0x00	; 0
    1768:	92 2b       	or	r25, r18
    176a:	90 93 d3 04 	sts	0x04D3, r25	; 0x8004d3 <g_analog_data+0x1>
    176e:	80 93 d2 04 	sts	0x04D2, r24	; 0x8004d2 <g_analog_data>
	  g_converted = 1 ;
    1772:	81 e0       	ldi	r24, 0x01	; 1
    1774:	80 93 d1 04 	sts	0x04D1, r24	; 0x8004d1 <g_converted>
}
    1778:	9f 91       	pop	r25
    177a:	8f 91       	pop	r24
    177c:	2f 91       	pop	r18
    177e:	0f 90       	pop	r0
    1780:	0f be       	out	0x3f, r0	; 63
    1782:	0f 90       	pop	r0
    1784:	1f 90       	pop	r1
    1786:	18 95       	reti

00001788 <DIO_init>:
void Spark_change_state(uint8_t state)
{
	if (HIGH == state)
		SET_BIT(SPARK_DATA_REG , SPARK_PIN);
	else if(LOW == state)
		CLR_BIT(SPARK_DATA_REG , SPARK_PIN);
    1788:	50 98       	cbi	0x0a, 0	; 10
    178a:	51 98       	cbi	0x0a, 1	; 10
    178c:	51 98       	cbi	0x0a, 1	; 10
    178e:	53 98       	cbi	0x0a, 3	; 10
    1790:	20 98       	cbi	0x04, 0	; 4
    1792:	55 98       	cbi	0x0a, 5	; 10
    1794:	54 98       	cbi	0x0a, 4	; 10
    1796:	3c 9a       	sbi	0x07, 4	; 7
    1798:	3f 9a       	sbi	0x07, 7	; 7
    179a:	3d 9a       	sbi	0x07, 5	; 7
    179c:	39 9a       	sbi	0x07, 1	; 7
    179e:	39 9a       	sbi	0x07, 1	; 7
    17a0:	57 9a       	sbi	0x0a, 7	; 10
    17a2:	38 9a       	sbi	0x07, 0	; 7
    17a4:	38 98       	cbi	0x07, 0	; 7
    17a6:	56 9a       	sbi	0x0a, 6	; 10
    17a8:	3b 9a       	sbi	0x07, 3	; 7
    17aa:	e4 e0       	ldi	r30, 0x04	; 4
    17ac:	f1 e0       	ldi	r31, 0x01	; 1
    17ae:	80 81       	ld	r24, Z
    17b0:	84 60       	ori	r24, 0x04	; 4
    17b2:	80 83       	st	Z, r24
    17b4:	3f 9a       	sbi	0x07, 7	; 7
    17b6:	3f 9a       	sbi	0x07, 7	; 7
    17b8:	3f 9a       	sbi	0x07, 7	; 7
    17ba:	e1 e0       	ldi	r30, 0x01	; 1
    17bc:	f1 e0       	ldi	r31, 0x01	; 1
    17be:	80 81       	ld	r24, Z
    17c0:	8e 7f       	andi	r24, 0xFE	; 254
    17c2:	80 83       	st	Z, r24
    17c4:	80 81       	ld	r24, Z
    17c6:	82 60       	ori	r24, 0x02	; 2
    17c8:	80 83       	st	Z, r24
    17ca:	e2 e0       	ldi	r30, 0x02	; 2
    17cc:	f1 e0       	ldi	r31, 0x01	; 1
    17ce:	80 81       	ld	r24, Z
    17d0:	81 60       	ori	r24, 0x01	; 1
    17d2:	80 83       	st	Z, r24
    17d4:	52 98       	cbi	0x0a, 2	; 10
    17d6:	53 9a       	sbi	0x0a, 3	; 10
    17d8:	5a 9a       	sbi	0x0b, 2	; 11
    17da:	08 95       	ret

000017dc <Modbus_change_state>:

//_________ MODE BUS initialize and enable______________________//

void Modbus_change_state(uint8_t device ,uint8_t state){
	
	switch (device){
    17dc:	88 23       	and	r24, r24
    17de:	19 f0       	breq	.+6      	; 0x17e6 <Modbus_change_state+0xa>
    17e0:	81 30       	cpi	r24, 0x01	; 1
    17e2:	89 f0       	breq	.+34     	; 0x1806 <Modbus_change_state+0x2a>
    17e4:	08 95       	ret
		case DEVICE_0:
		 	if (HIGH == state)
    17e6:	61 30       	cpi	r22, 0x01	; 1
    17e8:	31 f4       	brne	.+12     	; 0x17f6 <Modbus_change_state+0x1a>
		 		SET_BIT(DEVICE_0_MODBUS_DATA_REG , DEVICE_0_MODBUS_PIN);
    17ea:	e5 e0       	ldi	r30, 0x05	; 5
    17ec:	f1 e0       	ldi	r31, 0x01	; 1
    17ee:	80 81       	ld	r24, Z
    17f0:	84 60       	ori	r24, 0x04	; 4
    17f2:	80 83       	st	Z, r24
    17f4:	08 95       	ret
		 	else if(LOW == state)
    17f6:	61 11       	cpse	r22, r1
    17f8:	0d c0       	rjmp	.+26     	; 0x1814 <Modbus_change_state+0x38>
		 		CLR_BIT(DEVICE_0_MODBUS_DATA_REG , DEVICE_0_MODBUS_PIN);
    17fa:	e5 e0       	ldi	r30, 0x05	; 5
    17fc:	f1 e0       	ldi	r31, 0x01	; 1
    17fe:	80 81       	ld	r24, Z
    1800:	8b 7f       	andi	r24, 0xFB	; 251
    1802:	80 83       	st	Z, r24
    1804:	08 95       	ret
			
			break;
		case DEVICE_1:
		     if (HIGH == state)
    1806:	61 30       	cpi	r22, 0x01	; 1
    1808:	11 f4       	brne	.+4      	; 0x180e <Modbus_change_state+0x32>
		         SET_BIT(DEVICE_1_MODBUS_DATA_REG , DEVICE_1_MODBUS_PIN);
    180a:	47 9a       	sbi	0x08, 7	; 8
    180c:	08 95       	ret
		     else if(LOW == state)
    180e:	61 11       	cpse	r22, r1
    1810:	01 c0       	rjmp	.+2      	; 0x1814 <Modbus_change_state+0x38>
		         CLR_BIT(DEVICE_1_MODBUS_DATA_REG , DEVICE_1_MODBUS_PIN);
    1812:	47 98       	cbi	0x08, 7	; 8
    1814:	08 95       	ret

00001816 <__vector_25>:
  if(n >= 10){
    UART3_OutUDec(n/10);
    n = n%10;
  }
  UART3_putc(n+'0'); /* n is between 0 and 9 */
}
    1816:	1f 92       	push	r1
    1818:	0f 92       	push	r0
    181a:	0f b6       	in	r0, 0x3f	; 63
    181c:	0f 92       	push	r0
    181e:	11 24       	eor	r1, r1
    1820:	0b b6       	in	r0, 0x3b	; 59
    1822:	0f 92       	push	r0
    1824:	2f 93       	push	r18
    1826:	3f 93       	push	r19
    1828:	4f 93       	push	r20
    182a:	5f 93       	push	r21
    182c:	8f 93       	push	r24
    182e:	9f 93       	push	r25
    1830:	ef 93       	push	r30
    1832:	ff 93       	push	r31
    1834:	20 91 c0 00 	lds	r18, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
    1838:	30 91 c6 00 	lds	r19, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    183c:	28 71       	andi	r18, 0x18	; 24
    183e:	80 91 e9 07 	lds	r24, 0x07E9	; 0x8007e9 <UART_RxHead>
    1842:	90 e0       	ldi	r25, 0x00	; 0
    1844:	01 96       	adiw	r24, 0x01	; 1
    1846:	8f 77       	andi	r24, 0x7F	; 127
    1848:	99 27       	eor	r25, r25
    184a:	40 91 e8 07 	lds	r20, 0x07E8	; 0x8007e8 <UART_RxTail>
    184e:	50 e0       	ldi	r21, 0x00	; 0
    1850:	48 17       	cp	r20, r24
    1852:	59 07       	cpc	r21, r25
    1854:	39 f0       	breq	.+14     	; 0x1864 <__vector_25+0x4e>
    1856:	80 93 e9 07 	sts	0x07E9, r24	; 0x8007e9 <UART_RxHead>
    185a:	fc 01       	movw	r30, r24
    185c:	e4 51       	subi	r30, 0x14	; 20
    185e:	f8 4f       	sbci	r31, 0xF8	; 248
    1860:	30 83       	st	Z, r19
    1862:	01 c0       	rjmp	.+2      	; 0x1866 <__vector_25+0x50>
    1864:	22 e0       	ldi	r18, 0x02	; 2
    1866:	20 93 e7 07 	sts	0x07E7, r18	; 0x8007e7 <UART_LastRxError>
    186a:	ff 91       	pop	r31
    186c:	ef 91       	pop	r30
    186e:	9f 91       	pop	r25
    1870:	8f 91       	pop	r24
    1872:	5f 91       	pop	r21
    1874:	4f 91       	pop	r20
    1876:	3f 91       	pop	r19
    1878:	2f 91       	pop	r18
    187a:	0f 90       	pop	r0
    187c:	0b be       	out	0x3b, r0	; 59
    187e:	0f 90       	pop	r0
    1880:	0f be       	out	0x3f, r0	; 63
    1882:	0f 90       	pop	r0
    1884:	1f 90       	pop	r1
    1886:	18 95       	reti

00001888 <__vector_26>:
    1888:	1f 92       	push	r1
    188a:	0f 92       	push	r0
    188c:	0f b6       	in	r0, 0x3f	; 63
    188e:	0f 92       	push	r0
    1890:	11 24       	eor	r1, r1
    1892:	0b b6       	in	r0, 0x3b	; 59
    1894:	0f 92       	push	r0
    1896:	8f 93       	push	r24
    1898:	9f 93       	push	r25
    189a:	ef 93       	push	r30
    189c:	ff 93       	push	r31
    189e:	90 91 eb 07 	lds	r25, 0x07EB	; 0x8007eb <UART_TxHead>
    18a2:	80 91 ea 07 	lds	r24, 0x07EA	; 0x8007ea <UART_TxTail>
    18a6:	98 17       	cp	r25, r24
    18a8:	89 f0       	breq	.+34     	; 0x18cc <__vector_26+0x44>
    18aa:	80 91 ea 07 	lds	r24, 0x07EA	; 0x8007ea <UART_TxTail>
    18ae:	90 e0       	ldi	r25, 0x00	; 0
    18b0:	01 96       	adiw	r24, 0x01	; 1
    18b2:	8f 77       	andi	r24, 0x7F	; 127
    18b4:	99 27       	eor	r25, r25
    18b6:	80 93 ea 07 	sts	0x07EA, r24	; 0x8007ea <UART_TxTail>
    18ba:	fc 01       	movw	r30, r24
    18bc:	e4 59       	subi	r30, 0x94	; 148
    18be:	f7 4f       	sbci	r31, 0xF7	; 247
    18c0:	80 81       	ld	r24, Z
    18c2:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    18c6:	10 92 d7 04 	sts	0x04D7, r1	; 0x8004d7 <UART0_Transmission_end>
    18ca:	08 c0       	rjmp	.+16     	; 0x18dc <__vector_26+0x54>
    18cc:	e1 ec       	ldi	r30, 0xC1	; 193
    18ce:	f0 e0       	ldi	r31, 0x00	; 0
    18d0:	80 81       	ld	r24, Z
    18d2:	8f 7d       	andi	r24, 0xDF	; 223
    18d4:	80 83       	st	Z, r24
    18d6:	81 e0       	ldi	r24, 0x01	; 1
    18d8:	80 93 d7 04 	sts	0x04D7, r24	; 0x8004d7 <UART0_Transmission_end>
    18dc:	ff 91       	pop	r31
    18de:	ef 91       	pop	r30
    18e0:	9f 91       	pop	r25
    18e2:	8f 91       	pop	r24
    18e4:	0f 90       	pop	r0
    18e6:	0b be       	out	0x3b, r0	; 59
    18e8:	0f 90       	pop	r0
    18ea:	0f be       	out	0x3f, r0	; 63
    18ec:	0f 90       	pop	r0
    18ee:	1f 90       	pop	r1
    18f0:	18 95       	reti

000018f2 <UART0_init>:
    18f2:	0f 93       	push	r16
    18f4:	1f 93       	push	r17
    18f6:	8b 01       	movw	r16, r22
    18f8:	9c 01       	movw	r18, r24
    18fa:	f8 94       	cli
    18fc:	10 92 eb 07 	sts	0x07EB, r1	; 0x8007eb <UART_TxHead>
    1900:	10 92 ea 07 	sts	0x07EA, r1	; 0x8007ea <UART_TxTail>
    1904:	10 92 e9 07 	sts	0x07E9, r1	; 0x8007e9 <UART_RxHead>
    1908:	10 92 e8 07 	sts	0x07E8, r1	; 0x8007e8 <UART_RxTail>
    190c:	78 94       	sei
    190e:	dc 01       	movw	r26, r24
    1910:	cb 01       	movw	r24, r22
    1912:	80 58       	subi	r24, 0x80	; 128
    1914:	9b 47       	sbci	r25, 0x7B	; 123
    1916:	a1 4e       	sbci	r26, 0xE1	; 225
    1918:	bf 4f       	sbci	r27, 0xFF	; 255
    191a:	88 0f       	add	r24, r24
    191c:	99 1f       	adc	r25, r25
    191e:	aa 1f       	adc	r26, r26
    1920:	bb 1f       	adc	r27, r27
    1922:	88 0f       	add	r24, r24
    1924:	99 1f       	adc	r25, r25
    1926:	aa 1f       	adc	r26, r26
    1928:	bb 1f       	adc	r27, r27
    192a:	bc 01       	movw	r22, r24
    192c:	cd 01       	movw	r24, r26
    192e:	66 0f       	add	r22, r22
    1930:	77 1f       	adc	r23, r23
    1932:	88 1f       	adc	r24, r24
    1934:	99 1f       	adc	r25, r25
    1936:	00 0f       	add	r16, r16
    1938:	11 1f       	adc	r17, r17
    193a:	22 1f       	adc	r18, r18
    193c:	33 1f       	adc	r19, r19
    193e:	00 0f       	add	r16, r16
    1940:	11 1f       	adc	r17, r17
    1942:	22 1f       	adc	r18, r18
    1944:	33 1f       	adc	r19, r19
    1946:	a9 01       	movw	r20, r18
    1948:	98 01       	movw	r18, r16
    194a:	22 0f       	add	r18, r18
    194c:	33 1f       	adc	r19, r19
    194e:	44 1f       	adc	r20, r20
    1950:	55 1f       	adc	r21, r21
    1952:	22 0f       	add	r18, r18
    1954:	33 1f       	adc	r19, r19
    1956:	44 1f       	adc	r20, r20
    1958:	55 1f       	adc	r21, r21
    195a:	0e 94 83 20 	call	0x4106	; 0x4106 <__udivmodsi4>
    195e:	ba 01       	movw	r22, r20
    1960:	a9 01       	movw	r20, r18
    1962:	41 50       	subi	r20, 0x01	; 1
    1964:	51 09       	sbc	r21, r1
    1966:	61 09       	sbc	r22, r1
    1968:	71 09       	sbc	r23, r1
    196a:	57 ff       	sbrs	r21, 7
    196c:	06 c0       	rjmp	.+12     	; 0x197a <UART0_init+0x88>
    196e:	82 e0       	ldi	r24, 0x02	; 2
    1970:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
    1974:	5f 77       	andi	r21, 0x7F	; 127
    1976:	66 27       	eor	r22, r22
    1978:	77 27       	eor	r23, r23
    197a:	bb 27       	eor	r27, r27
    197c:	a7 2f       	mov	r26, r23
    197e:	96 2f       	mov	r25, r22
    1980:	85 2f       	mov	r24, r21
    1982:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
    1986:	40 93 c4 00 	sts	0x00C4, r20	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
    198a:	88 e9       	ldi	r24, 0x98	; 152
    198c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    1990:	86 e0       	ldi	r24, 0x06	; 6
    1992:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
    1996:	1f 91       	pop	r17
    1998:	0f 91       	pop	r16
    199a:	08 95       	ret

0000199c <UART0_putc>:
    199c:	40 91 eb 07 	lds	r20, 0x07EB	; 0x8007eb <UART_TxHead>
    19a0:	50 e0       	ldi	r21, 0x00	; 0
    19a2:	4f 5f       	subi	r20, 0xFF	; 255
    19a4:	5f 4f       	sbci	r21, 0xFF	; 255
    19a6:	4f 77       	andi	r20, 0x7F	; 127
    19a8:	55 27       	eor	r21, r21
    19aa:	20 91 ea 07 	lds	r18, 0x07EA	; 0x8007ea <UART_TxTail>
    19ae:	30 e0       	ldi	r19, 0x00	; 0
    19b0:	24 17       	cp	r18, r20
    19b2:	35 07       	cpc	r19, r21
    19b4:	d1 f3       	breq	.-12     	; 0x19aa <UART0_putc+0xe>
    19b6:	fa 01       	movw	r30, r20
    19b8:	e4 59       	subi	r30, 0x94	; 148
    19ba:	f7 4f       	sbci	r31, 0xF7	; 247
    19bc:	80 83       	st	Z, r24
    19be:	40 93 eb 07 	sts	0x07EB, r20	; 0x8007eb <UART_TxHead>
    19c2:	e1 ec       	ldi	r30, 0xC1	; 193
    19c4:	f0 e0       	ldi	r31, 0x00	; 0
    19c6:	80 81       	ld	r24, Z
    19c8:	80 62       	ori	r24, 0x20	; 32
    19ca:	80 83       	st	Z, r24
    19cc:	08 95       	ret

000019ce <UART0_OutUDec>:
    19ce:	0f 93       	push	r16
    19d0:	1f 93       	push	r17
    19d2:	cf 93       	push	r28
    19d4:	df 93       	push	r29
    19d6:	6a 30       	cpi	r22, 0x0A	; 10
    19d8:	71 05       	cpc	r23, r1
    19da:	81 05       	cpc	r24, r1
    19dc:	91 05       	cpc	r25, r1
    19de:	58 f0       	brcs	.+22     	; 0x19f6 <UART0_OutUDec+0x28>
    19e0:	2a e0       	ldi	r18, 0x0A	; 10
    19e2:	30 e0       	ldi	r19, 0x00	; 0
    19e4:	40 e0       	ldi	r20, 0x00	; 0
    19e6:	50 e0       	ldi	r21, 0x00	; 0
    19e8:	0e 94 83 20 	call	0x4106	; 0x4106 <__udivmodsi4>
    19ec:	06 2f       	mov	r16, r22
    19ee:	ca 01       	movw	r24, r20
    19f0:	b9 01       	movw	r22, r18
    19f2:	ed df       	rcall	.-38     	; 0x19ce <UART0_OutUDec>
    19f4:	60 2f       	mov	r22, r16
    19f6:	80 e3       	ldi	r24, 0x30	; 48
    19f8:	86 0f       	add	r24, r22
    19fa:	d0 df       	rcall	.-96     	; 0x199c <UART0_putc>
    19fc:	df 91       	pop	r29
    19fe:	cf 91       	pop	r28
    1a00:	1f 91       	pop	r17
    1a02:	0f 91       	pop	r16
    1a04:	08 95       	ret

00001a06 <UART0_puts>:
    1a06:	cf 93       	push	r28
    1a08:	df 93       	push	r29
    1a0a:	ec 01       	movw	r28, r24
    1a0c:	88 81       	ld	r24, Y
    1a0e:	88 23       	and	r24, r24
    1a10:	29 f0       	breq	.+10     	; 0x1a1c <UART0_puts+0x16>
    1a12:	21 96       	adiw	r28, 0x01	; 1
    1a14:	c3 df       	rcall	.-122    	; 0x199c <UART0_putc>
    1a16:	89 91       	ld	r24, Y+
    1a18:	81 11       	cpse	r24, r1
    1a1a:	fc cf       	rjmp	.-8      	; 0x1a14 <UART0_puts+0xe>
    1a1c:	df 91       	pop	r29
    1a1e:	cf 91       	pop	r28
    1a20:	08 95       	ret

00001a22 <__vector_36>:
    1a22:	1f 92       	push	r1
    1a24:	0f 92       	push	r0
    1a26:	0f b6       	in	r0, 0x3f	; 63
    1a28:	0f 92       	push	r0
    1a2a:	11 24       	eor	r1, r1
    1a2c:	0b b6       	in	r0, 0x3b	; 59
    1a2e:	0f 92       	push	r0
    1a30:	2f 93       	push	r18
    1a32:	3f 93       	push	r19
    1a34:	4f 93       	push	r20
    1a36:	5f 93       	push	r21
    1a38:	8f 93       	push	r24
    1a3a:	9f 93       	push	r25
    1a3c:	ef 93       	push	r30
    1a3e:	ff 93       	push	r31
    1a40:	20 91 c8 00 	lds	r18, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
    1a44:	30 91 ce 00 	lds	r19, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    1a48:	28 71       	andi	r18, 0x18	; 24
    1a4a:	80 91 e4 06 	lds	r24, 0x06E4	; 0x8006e4 <UART1_RxHead>
    1a4e:	90 e0       	ldi	r25, 0x00	; 0
    1a50:	01 96       	adiw	r24, 0x01	; 1
    1a52:	8f 77       	andi	r24, 0x7F	; 127
    1a54:	99 27       	eor	r25, r25
    1a56:	40 91 e3 06 	lds	r20, 0x06E3	; 0x8006e3 <UART1_RxTail>
    1a5a:	50 e0       	ldi	r21, 0x00	; 0
    1a5c:	48 17       	cp	r20, r24
    1a5e:	59 07       	cpc	r21, r25
    1a60:	39 f0       	breq	.+14     	; 0x1a70 <__vector_36+0x4e>
    1a62:	80 93 e4 06 	sts	0x06E4, r24	; 0x8006e4 <UART1_RxHead>
    1a66:	fc 01       	movw	r30, r24
    1a68:	e9 51       	subi	r30, 0x19	; 25
    1a6a:	f9 4f       	sbci	r31, 0xF9	; 249
    1a6c:	30 83       	st	Z, r19
    1a6e:	01 c0       	rjmp	.+2      	; 0x1a72 <__vector_36+0x50>
    1a70:	22 e0       	ldi	r18, 0x02	; 2
    1a72:	20 93 e2 06 	sts	0x06E2, r18	; 0x8006e2 <UART1_LastRxError>
    1a76:	ff 91       	pop	r31
    1a78:	ef 91       	pop	r30
    1a7a:	9f 91       	pop	r25
    1a7c:	8f 91       	pop	r24
    1a7e:	5f 91       	pop	r21
    1a80:	4f 91       	pop	r20
    1a82:	3f 91       	pop	r19
    1a84:	2f 91       	pop	r18
    1a86:	0f 90       	pop	r0
    1a88:	0b be       	out	0x3b, r0	; 59
    1a8a:	0f 90       	pop	r0
    1a8c:	0f be       	out	0x3f, r0	; 63
    1a8e:	0f 90       	pop	r0
    1a90:	1f 90       	pop	r1
    1a92:	18 95       	reti

00001a94 <__vector_37>:
    1a94:	1f 92       	push	r1
    1a96:	0f 92       	push	r0
    1a98:	0f b6       	in	r0, 0x3f	; 63
    1a9a:	0f 92       	push	r0
    1a9c:	11 24       	eor	r1, r1
    1a9e:	0b b6       	in	r0, 0x3b	; 59
    1aa0:	0f 92       	push	r0
    1aa2:	8f 93       	push	r24
    1aa4:	9f 93       	push	r25
    1aa6:	ef 93       	push	r30
    1aa8:	ff 93       	push	r31
    1aaa:	90 91 e6 06 	lds	r25, 0x06E6	; 0x8006e6 <UART1_TxHead>
    1aae:	80 91 e5 06 	lds	r24, 0x06E5	; 0x8006e5 <UART1_TxTail>
    1ab2:	98 17       	cp	r25, r24
    1ab4:	89 f0       	breq	.+34     	; 0x1ad8 <__vector_37+0x44>
    1ab6:	80 91 e5 06 	lds	r24, 0x06E5	; 0x8006e5 <UART1_TxTail>
    1aba:	90 e0       	ldi	r25, 0x00	; 0
    1abc:	01 96       	adiw	r24, 0x01	; 1
    1abe:	8f 77       	andi	r24, 0x7F	; 127
    1ac0:	99 27       	eor	r25, r25
    1ac2:	80 93 e5 06 	sts	0x06E5, r24	; 0x8006e5 <UART1_TxTail>
    1ac6:	fc 01       	movw	r30, r24
    1ac8:	e9 59       	subi	r30, 0x99	; 153
    1aca:	f8 4f       	sbci	r31, 0xF8	; 248
    1acc:	80 81       	ld	r24, Z
    1ace:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    1ad2:	10 92 d6 04 	sts	0x04D6, r1	; 0x8004d6 <UART1_Transmission_end>
    1ad6:	08 c0       	rjmp	.+16     	; 0x1ae8 <__vector_37+0x54>
    1ad8:	e9 ec       	ldi	r30, 0xC9	; 201
    1ada:	f0 e0       	ldi	r31, 0x00	; 0
    1adc:	80 81       	ld	r24, Z
    1ade:	8f 7d       	andi	r24, 0xDF	; 223
    1ae0:	80 83       	st	Z, r24
    1ae2:	81 e0       	ldi	r24, 0x01	; 1
    1ae4:	80 93 d6 04 	sts	0x04D6, r24	; 0x8004d6 <UART1_Transmission_end>
    1ae8:	ff 91       	pop	r31
    1aea:	ef 91       	pop	r30
    1aec:	9f 91       	pop	r25
    1aee:	8f 91       	pop	r24
    1af0:	0f 90       	pop	r0
    1af2:	0b be       	out	0x3b, r0	; 59
    1af4:	0f 90       	pop	r0
    1af6:	0f be       	out	0x3f, r0	; 63
    1af8:	0f 90       	pop	r0
    1afa:	1f 90       	pop	r1
    1afc:	18 95       	reti

00001afe <UART1_init>:
    1afe:	0f 93       	push	r16
    1b00:	1f 93       	push	r17
    1b02:	8b 01       	movw	r16, r22
    1b04:	9c 01       	movw	r18, r24
    1b06:	f8 94       	cli
    1b08:	10 92 e6 06 	sts	0x06E6, r1	; 0x8006e6 <UART1_TxHead>
    1b0c:	10 92 e5 06 	sts	0x06E5, r1	; 0x8006e5 <UART1_TxTail>
    1b10:	10 92 e4 06 	sts	0x06E4, r1	; 0x8006e4 <UART1_RxHead>
    1b14:	10 92 e3 06 	sts	0x06E3, r1	; 0x8006e3 <UART1_RxTail>
    1b18:	78 94       	sei
    1b1a:	dc 01       	movw	r26, r24
    1b1c:	cb 01       	movw	r24, r22
    1b1e:	80 58       	subi	r24, 0x80	; 128
    1b20:	9b 47       	sbci	r25, 0x7B	; 123
    1b22:	a1 4e       	sbci	r26, 0xE1	; 225
    1b24:	bf 4f       	sbci	r27, 0xFF	; 255
    1b26:	88 0f       	add	r24, r24
    1b28:	99 1f       	adc	r25, r25
    1b2a:	aa 1f       	adc	r26, r26
    1b2c:	bb 1f       	adc	r27, r27
    1b2e:	88 0f       	add	r24, r24
    1b30:	99 1f       	adc	r25, r25
    1b32:	aa 1f       	adc	r26, r26
    1b34:	bb 1f       	adc	r27, r27
    1b36:	bc 01       	movw	r22, r24
    1b38:	cd 01       	movw	r24, r26
    1b3a:	66 0f       	add	r22, r22
    1b3c:	77 1f       	adc	r23, r23
    1b3e:	88 1f       	adc	r24, r24
    1b40:	99 1f       	adc	r25, r25
    1b42:	00 0f       	add	r16, r16
    1b44:	11 1f       	adc	r17, r17
    1b46:	22 1f       	adc	r18, r18
    1b48:	33 1f       	adc	r19, r19
    1b4a:	00 0f       	add	r16, r16
    1b4c:	11 1f       	adc	r17, r17
    1b4e:	22 1f       	adc	r18, r18
    1b50:	33 1f       	adc	r19, r19
    1b52:	a9 01       	movw	r20, r18
    1b54:	98 01       	movw	r18, r16
    1b56:	22 0f       	add	r18, r18
    1b58:	33 1f       	adc	r19, r19
    1b5a:	44 1f       	adc	r20, r20
    1b5c:	55 1f       	adc	r21, r21
    1b5e:	22 0f       	add	r18, r18
    1b60:	33 1f       	adc	r19, r19
    1b62:	44 1f       	adc	r20, r20
    1b64:	55 1f       	adc	r21, r21
    1b66:	0e 94 83 20 	call	0x4106	; 0x4106 <__udivmodsi4>
    1b6a:	ba 01       	movw	r22, r20
    1b6c:	a9 01       	movw	r20, r18
    1b6e:	41 50       	subi	r20, 0x01	; 1
    1b70:	51 09       	sbc	r21, r1
    1b72:	61 09       	sbc	r22, r1
    1b74:	71 09       	sbc	r23, r1
    1b76:	57 ff       	sbrs	r21, 7
    1b78:	06 c0       	rjmp	.+12     	; 0x1b86 <UART1_init+0x88>
    1b7a:	82 e0       	ldi	r24, 0x02	; 2
    1b7c:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
    1b80:	5f 77       	andi	r21, 0x7F	; 127
    1b82:	66 27       	eor	r22, r22
    1b84:	77 27       	eor	r23, r23
    1b86:	bb 27       	eor	r27, r27
    1b88:	a7 2f       	mov	r26, r23
    1b8a:	96 2f       	mov	r25, r22
    1b8c:	85 2f       	mov	r24, r21
    1b8e:	80 93 cd 00 	sts	0x00CD, r24	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7000cd>
    1b92:	40 93 cc 00 	sts	0x00CC, r20	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7000cc>
    1b96:	88 e9       	ldi	r24, 0x98	; 152
    1b98:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7000c9>
    1b9c:	86 e0       	ldi	r24, 0x06	; 6
    1b9e:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7000ca>
    1ba2:	1f 91       	pop	r17
    1ba4:	0f 91       	pop	r16
    1ba6:	08 95       	ret

00001ba8 <UART1_getc>:
    1ba8:	f8 94       	cli
    1baa:	90 91 e4 06 	lds	r25, 0x06E4	; 0x8006e4 <UART1_RxHead>
    1bae:	80 91 e3 06 	lds	r24, 0x06E3	; 0x8006e3 <UART1_RxTail>
    1bb2:	98 13       	cpse	r25, r24
    1bb4:	04 c0       	rjmp	.+8      	; 0x1bbe <UART1_getc+0x16>
    1bb6:	78 94       	sei
    1bb8:	80 e0       	ldi	r24, 0x00	; 0
    1bba:	91 e0       	ldi	r25, 0x01	; 1
    1bbc:	08 95       	ret
    1bbe:	80 91 e3 06 	lds	r24, 0x06E3	; 0x8006e3 <UART1_RxTail>
    1bc2:	90 e0       	ldi	r25, 0x00	; 0
    1bc4:	01 96       	adiw	r24, 0x01	; 1
    1bc6:	8f 77       	andi	r24, 0x7F	; 127
    1bc8:	99 27       	eor	r25, r25
    1bca:	80 93 e3 06 	sts	0x06E3, r24	; 0x8006e3 <UART1_RxTail>
    1bce:	78 94       	sei
    1bd0:	fc 01       	movw	r30, r24
    1bd2:	e9 51       	subi	r30, 0x19	; 25
    1bd4:	f9 4f       	sbci	r31, 0xF9	; 249
    1bd6:	20 81       	ld	r18, Z
    1bd8:	80 91 e2 06 	lds	r24, 0x06E2	; 0x8006e2 <UART1_LastRxError>
    1bdc:	90 e0       	ldi	r25, 0x00	; 0
    1bde:	98 2f       	mov	r25, r24
    1be0:	88 27       	eor	r24, r24
    1be2:	82 0f       	add	r24, r18
    1be4:	91 1d       	adc	r25, r1
    1be6:	08 95       	ret

00001be8 <UART1_peek>:
    1be8:	f8 94       	cli
    1bea:	90 91 e4 06 	lds	r25, 0x06E4	; 0x8006e4 <UART1_RxHead>
    1bee:	80 91 e3 06 	lds	r24, 0x06E3	; 0x8006e3 <UART1_RxTail>
    1bf2:	98 13       	cpse	r25, r24
    1bf4:	04 c0       	rjmp	.+8      	; 0x1bfe <UART1_peek+0x16>
    1bf6:	78 94       	sei
    1bf8:	80 e0       	ldi	r24, 0x00	; 0
    1bfa:	91 e0       	ldi	r25, 0x01	; 1
    1bfc:	08 95       	ret
    1bfe:	78 94       	sei
    1c00:	e0 91 e3 06 	lds	r30, 0x06E3	; 0x8006e3 <UART1_RxTail>
    1c04:	f0 e0       	ldi	r31, 0x00	; 0
    1c06:	31 96       	adiw	r30, 0x01	; 1
    1c08:	ef 77       	andi	r30, 0x7F	; 127
    1c0a:	ff 27       	eor	r31, r31
    1c0c:	e9 51       	subi	r30, 0x19	; 25
    1c0e:	f9 4f       	sbci	r31, 0xF9	; 249
    1c10:	20 81       	ld	r18, Z
    1c12:	80 91 e2 06 	lds	r24, 0x06E2	; 0x8006e2 <UART1_LastRxError>
    1c16:	90 e0       	ldi	r25, 0x00	; 0
    1c18:	98 2f       	mov	r25, r24
    1c1a:	88 27       	eor	r24, r24
    1c1c:	82 0f       	add	r24, r18
    1c1e:	91 1d       	adc	r25, r1
    1c20:	08 95       	ret

00001c22 <UART1_putc>:
    1c22:	40 91 e6 06 	lds	r20, 0x06E6	; 0x8006e6 <UART1_TxHead>
    1c26:	50 e0       	ldi	r21, 0x00	; 0
    1c28:	4f 5f       	subi	r20, 0xFF	; 255
    1c2a:	5f 4f       	sbci	r21, 0xFF	; 255
    1c2c:	4f 77       	andi	r20, 0x7F	; 127
    1c2e:	55 27       	eor	r21, r21
    1c30:	20 91 e5 06 	lds	r18, 0x06E5	; 0x8006e5 <UART1_TxTail>
    1c34:	30 e0       	ldi	r19, 0x00	; 0
    1c36:	24 17       	cp	r18, r20
    1c38:	35 07       	cpc	r19, r21
    1c3a:	d1 f3       	breq	.-12     	; 0x1c30 <UART1_putc+0xe>
    1c3c:	fa 01       	movw	r30, r20
    1c3e:	e9 59       	subi	r30, 0x99	; 153
    1c40:	f8 4f       	sbci	r31, 0xF8	; 248
    1c42:	80 83       	st	Z, r24
    1c44:	40 93 e6 06 	sts	0x06E6, r20	; 0x8006e6 <UART1_TxHead>
    1c48:	e9 ec       	ldi	r30, 0xC9	; 201
    1c4a:	f0 e0       	ldi	r31, 0x00	; 0
    1c4c:	80 81       	ld	r24, Z
    1c4e:	80 62       	ori	r24, 0x20	; 32
    1c50:	80 83       	st	Z, r24
    1c52:	08 95       	ret

00001c54 <UART1_puts>:
    1c54:	cf 93       	push	r28
    1c56:	df 93       	push	r29
    1c58:	ec 01       	movw	r28, r24
    1c5a:	88 81       	ld	r24, Y
    1c5c:	88 23       	and	r24, r24
    1c5e:	29 f0       	breq	.+10     	; 0x1c6a <UART1_puts+0x16>
    1c60:	21 96       	adiw	r28, 0x01	; 1
    1c62:	df df       	rcall	.-66     	; 0x1c22 <UART1_putc>
    1c64:	89 91       	ld	r24, Y+
    1c66:	81 11       	cpse	r24, r1
    1c68:	fc cf       	rjmp	.-8      	; 0x1c62 <UART1_puts+0xe>
    1c6a:	df 91       	pop	r29
    1c6c:	cf 91       	pop	r28
    1c6e:	08 95       	ret

00001c70 <UART1_puts_p>:
    1c70:	cf 93       	push	r28
    1c72:	df 93       	push	r29
    1c74:	ec 01       	movw	r28, r24
    1c76:	21 96       	adiw	r28, 0x01	; 1
    1c78:	fc 01       	movw	r30, r24
    1c7a:	84 91       	lpm	r24, Z
    1c7c:	88 23       	and	r24, r24
    1c7e:	31 f0       	breq	.+12     	; 0x1c8c <UART1_puts_p+0x1c>
    1c80:	d0 df       	rcall	.-96     	; 0x1c22 <UART1_putc>
    1c82:	fe 01       	movw	r30, r28
    1c84:	84 91       	lpm	r24, Z
    1c86:	21 96       	adiw	r28, 0x01	; 1
    1c88:	81 11       	cpse	r24, r1
    1c8a:	fa cf       	rjmp	.-12     	; 0x1c80 <UART1_puts_p+0x10>
    1c8c:	df 91       	pop	r29
    1c8e:	cf 91       	pop	r28
    1c90:	08 95       	ret

00001c92 <UART1_available>:
    1c92:	f8 94       	cli
    1c94:	80 91 e4 06 	lds	r24, 0x06E4	; 0x8006e4 <UART1_RxHead>
    1c98:	20 91 e3 06 	lds	r18, 0x06E3	; 0x8006e3 <UART1_RxTail>
    1c9c:	78 94       	sei
    1c9e:	90 e0       	ldi	r25, 0x00	; 0
    1ca0:	80 58       	subi	r24, 0x80	; 128
    1ca2:	9f 4f       	sbci	r25, 0xFF	; 255
    1ca4:	82 1b       	sub	r24, r18
    1ca6:	91 09       	sbc	r25, r1
    1ca8:	8f 77       	andi	r24, 0x7F	; 127
    1caa:	99 27       	eor	r25, r25
    1cac:	08 95       	ret

00001cae <UART1_flush>:
    1cae:	80 91 d6 04 	lds	r24, 0x04D6	; 0x8004d6 <UART1_Transmission_end>
    1cb2:	88 23       	and	r24, r24
    1cb4:	e1 f3       	breq	.-8      	; 0x1cae <UART1_flush>
    1cb6:	08 95       	ret

00001cb8 <__vector_51>:
    1cb8:	1f 92       	push	r1
    1cba:	0f 92       	push	r0
    1cbc:	0f b6       	in	r0, 0x3f	; 63
    1cbe:	0f 92       	push	r0
    1cc0:	11 24       	eor	r1, r1
    1cc2:	0b b6       	in	r0, 0x3b	; 59
    1cc4:	0f 92       	push	r0
    1cc6:	2f 93       	push	r18
    1cc8:	3f 93       	push	r19
    1cca:	4f 93       	push	r20
    1ccc:	5f 93       	push	r21
    1cce:	8f 93       	push	r24
    1cd0:	9f 93       	push	r25
    1cd2:	ef 93       	push	r30
    1cd4:	ff 93       	push	r31
    1cd6:	20 91 d0 00 	lds	r18, 0x00D0	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7000d0>
    1cda:	30 91 d6 00 	lds	r19, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    1cde:	28 71       	andi	r18, 0x18	; 24
    1ce0:	80 91 df 05 	lds	r24, 0x05DF	; 0x8005df <UART2_RxHead>
    1ce4:	90 e0       	ldi	r25, 0x00	; 0
    1ce6:	01 96       	adiw	r24, 0x01	; 1
    1ce8:	8f 77       	andi	r24, 0x7F	; 127
    1cea:	99 27       	eor	r25, r25
    1cec:	40 91 de 05 	lds	r20, 0x05DE	; 0x8005de <UART2_RxTail>
    1cf0:	50 e0       	ldi	r21, 0x00	; 0
    1cf2:	48 17       	cp	r20, r24
    1cf4:	59 07       	cpc	r21, r25
    1cf6:	39 f0       	breq	.+14     	; 0x1d06 <__vector_51+0x4e>
    1cf8:	80 93 df 05 	sts	0x05DF, r24	; 0x8005df <UART2_RxHead>
    1cfc:	fc 01       	movw	r30, r24
    1cfe:	ee 51       	subi	r30, 0x1E	; 30
    1d00:	fa 4f       	sbci	r31, 0xFA	; 250
    1d02:	30 83       	st	Z, r19
    1d04:	01 c0       	rjmp	.+2      	; 0x1d08 <__vector_51+0x50>
    1d06:	22 e0       	ldi	r18, 0x02	; 2
    1d08:	20 93 dd 05 	sts	0x05DD, r18	; 0x8005dd <UART2_LastRxError>
    1d0c:	ff 91       	pop	r31
    1d0e:	ef 91       	pop	r30
    1d10:	9f 91       	pop	r25
    1d12:	8f 91       	pop	r24
    1d14:	5f 91       	pop	r21
    1d16:	4f 91       	pop	r20
    1d18:	3f 91       	pop	r19
    1d1a:	2f 91       	pop	r18
    1d1c:	0f 90       	pop	r0
    1d1e:	0b be       	out	0x3b, r0	; 59
    1d20:	0f 90       	pop	r0
    1d22:	0f be       	out	0x3f, r0	; 63
    1d24:	0f 90       	pop	r0
    1d26:	1f 90       	pop	r1
    1d28:	18 95       	reti

00001d2a <__vector_52>:
    1d2a:	1f 92       	push	r1
    1d2c:	0f 92       	push	r0
    1d2e:	0f b6       	in	r0, 0x3f	; 63
    1d30:	0f 92       	push	r0
    1d32:	11 24       	eor	r1, r1
    1d34:	0b b6       	in	r0, 0x3b	; 59
    1d36:	0f 92       	push	r0
    1d38:	8f 93       	push	r24
    1d3a:	9f 93       	push	r25
    1d3c:	ef 93       	push	r30
    1d3e:	ff 93       	push	r31
    1d40:	90 91 e1 05 	lds	r25, 0x05E1	; 0x8005e1 <UART2_TxHead>
    1d44:	80 91 e0 05 	lds	r24, 0x05E0	; 0x8005e0 <UART2_TxTail>
    1d48:	98 17       	cp	r25, r24
    1d4a:	89 f0       	breq	.+34     	; 0x1d6e <__vector_52+0x44>
    1d4c:	80 91 e0 05 	lds	r24, 0x05E0	; 0x8005e0 <UART2_TxTail>
    1d50:	90 e0       	ldi	r25, 0x00	; 0
    1d52:	01 96       	adiw	r24, 0x01	; 1
    1d54:	8f 77       	andi	r24, 0x7F	; 127
    1d56:	99 27       	eor	r25, r25
    1d58:	80 93 e0 05 	sts	0x05E0, r24	; 0x8005e0 <UART2_TxTail>
    1d5c:	fc 01       	movw	r30, r24
    1d5e:	ee 59       	subi	r30, 0x9E	; 158
    1d60:	f9 4f       	sbci	r31, 0xF9	; 249
    1d62:	80 81       	ld	r24, Z
    1d64:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    1d68:	10 92 d5 04 	sts	0x04D5, r1	; 0x8004d5 <UART2_Transmission_end>
    1d6c:	08 c0       	rjmp	.+16     	; 0x1d7e <__vector_52+0x54>
    1d6e:	e1 ed       	ldi	r30, 0xD1	; 209
    1d70:	f0 e0       	ldi	r31, 0x00	; 0
    1d72:	80 81       	ld	r24, Z
    1d74:	8f 7d       	andi	r24, 0xDF	; 223
    1d76:	80 83       	st	Z, r24
    1d78:	81 e0       	ldi	r24, 0x01	; 1
    1d7a:	80 93 d5 04 	sts	0x04D5, r24	; 0x8004d5 <UART2_Transmission_end>
    1d7e:	ff 91       	pop	r31
    1d80:	ef 91       	pop	r30
    1d82:	9f 91       	pop	r25
    1d84:	8f 91       	pop	r24
    1d86:	0f 90       	pop	r0
    1d88:	0b be       	out	0x3b, r0	; 59
    1d8a:	0f 90       	pop	r0
    1d8c:	0f be       	out	0x3f, r0	; 63
    1d8e:	0f 90       	pop	r0
    1d90:	1f 90       	pop	r1
    1d92:	18 95       	reti

00001d94 <UART2_init>:
    1d94:	0f 93       	push	r16
    1d96:	1f 93       	push	r17
    1d98:	8b 01       	movw	r16, r22
    1d9a:	9c 01       	movw	r18, r24
    1d9c:	f8 94       	cli
    1d9e:	10 92 e1 05 	sts	0x05E1, r1	; 0x8005e1 <UART2_TxHead>
    1da2:	10 92 e0 05 	sts	0x05E0, r1	; 0x8005e0 <UART2_TxTail>
    1da6:	10 92 df 05 	sts	0x05DF, r1	; 0x8005df <UART2_RxHead>
    1daa:	10 92 de 05 	sts	0x05DE, r1	; 0x8005de <UART2_RxTail>
    1dae:	78 94       	sei
    1db0:	dc 01       	movw	r26, r24
    1db2:	cb 01       	movw	r24, r22
    1db4:	80 58       	subi	r24, 0x80	; 128
    1db6:	9b 47       	sbci	r25, 0x7B	; 123
    1db8:	a1 4e       	sbci	r26, 0xE1	; 225
    1dba:	bf 4f       	sbci	r27, 0xFF	; 255
    1dbc:	88 0f       	add	r24, r24
    1dbe:	99 1f       	adc	r25, r25
    1dc0:	aa 1f       	adc	r26, r26
    1dc2:	bb 1f       	adc	r27, r27
    1dc4:	88 0f       	add	r24, r24
    1dc6:	99 1f       	adc	r25, r25
    1dc8:	aa 1f       	adc	r26, r26
    1dca:	bb 1f       	adc	r27, r27
    1dcc:	bc 01       	movw	r22, r24
    1dce:	cd 01       	movw	r24, r26
    1dd0:	66 0f       	add	r22, r22
    1dd2:	77 1f       	adc	r23, r23
    1dd4:	88 1f       	adc	r24, r24
    1dd6:	99 1f       	adc	r25, r25
    1dd8:	00 0f       	add	r16, r16
    1dda:	11 1f       	adc	r17, r17
    1ddc:	22 1f       	adc	r18, r18
    1dde:	33 1f       	adc	r19, r19
    1de0:	00 0f       	add	r16, r16
    1de2:	11 1f       	adc	r17, r17
    1de4:	22 1f       	adc	r18, r18
    1de6:	33 1f       	adc	r19, r19
    1de8:	a9 01       	movw	r20, r18
    1dea:	98 01       	movw	r18, r16
    1dec:	22 0f       	add	r18, r18
    1dee:	33 1f       	adc	r19, r19
    1df0:	44 1f       	adc	r20, r20
    1df2:	55 1f       	adc	r21, r21
    1df4:	22 0f       	add	r18, r18
    1df6:	33 1f       	adc	r19, r19
    1df8:	44 1f       	adc	r20, r20
    1dfa:	55 1f       	adc	r21, r21
    1dfc:	0e 94 83 20 	call	0x4106	; 0x4106 <__udivmodsi4>
    1e00:	ba 01       	movw	r22, r20
    1e02:	a9 01       	movw	r20, r18
    1e04:	41 50       	subi	r20, 0x01	; 1
    1e06:	51 09       	sbc	r21, r1
    1e08:	61 09       	sbc	r22, r1
    1e0a:	71 09       	sbc	r23, r1
    1e0c:	57 ff       	sbrs	r21, 7
    1e0e:	06 c0       	rjmp	.+12     	; 0x1e1c <UART2_init+0x88>
    1e10:	82 e0       	ldi	r24, 0x02	; 2
    1e12:	80 93 d0 00 	sts	0x00D0, r24	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7000d0>
    1e16:	5f 77       	andi	r21, 0x7F	; 127
    1e18:	66 27       	eor	r22, r22
    1e1a:	77 27       	eor	r23, r23
    1e1c:	bb 27       	eor	r27, r27
    1e1e:	a7 2f       	mov	r26, r23
    1e20:	96 2f       	mov	r25, r22
    1e22:	85 2f       	mov	r24, r21
    1e24:	80 93 d5 00 	sts	0x00D5, r24	; 0x8000d5 <__TEXT_REGION_LENGTH__+0x7000d5>
    1e28:	40 93 d4 00 	sts	0x00D4, r20	; 0x8000d4 <__TEXT_REGION_LENGTH__+0x7000d4>
    1e2c:	88 e9       	ldi	r24, 0x98	; 152
    1e2e:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7000d1>
    1e32:	86 e0       	ldi	r24, 0x06	; 6
    1e34:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7000d2>
    1e38:	1f 91       	pop	r17
    1e3a:	0f 91       	pop	r16
    1e3c:	08 95       	ret

00001e3e <UART2_getc>:
    1e3e:	90 91 df 05 	lds	r25, 0x05DF	; 0x8005df <UART2_RxHead>
    1e42:	80 91 de 05 	lds	r24, 0x05DE	; 0x8005de <UART2_RxTail>
    1e46:	98 17       	cp	r25, r24
    1e48:	a1 f0       	breq	.+40     	; 0x1e72 <UART2_getc+0x34>
    1e4a:	80 91 de 05 	lds	r24, 0x05DE	; 0x8005de <UART2_RxTail>
    1e4e:	90 e0       	ldi	r25, 0x00	; 0
    1e50:	01 96       	adiw	r24, 0x01	; 1
    1e52:	8f 77       	andi	r24, 0x7F	; 127
    1e54:	99 27       	eor	r25, r25
    1e56:	80 93 de 05 	sts	0x05DE, r24	; 0x8005de <UART2_RxTail>
    1e5a:	fc 01       	movw	r30, r24
    1e5c:	ee 51       	subi	r30, 0x1E	; 30
    1e5e:	fa 4f       	sbci	r31, 0xFA	; 250
    1e60:	20 81       	ld	r18, Z
    1e62:	80 91 dd 05 	lds	r24, 0x05DD	; 0x8005dd <UART2_LastRxError>
    1e66:	90 e0       	ldi	r25, 0x00	; 0
    1e68:	98 2f       	mov	r25, r24
    1e6a:	88 27       	eor	r24, r24
    1e6c:	82 0f       	add	r24, r18
    1e6e:	91 1d       	adc	r25, r1
    1e70:	08 95       	ret
    1e72:	80 e0       	ldi	r24, 0x00	; 0
    1e74:	91 e0       	ldi	r25, 0x01	; 1
    1e76:	08 95       	ret

00001e78 <UART2_peek>:
    1e78:	f8 94       	cli
    1e7a:	90 91 df 05 	lds	r25, 0x05DF	; 0x8005df <UART2_RxHead>
    1e7e:	80 91 de 05 	lds	r24, 0x05DE	; 0x8005de <UART2_RxTail>
    1e82:	98 13       	cpse	r25, r24
    1e84:	04 c0       	rjmp	.+8      	; 0x1e8e <UART2_peek+0x16>
    1e86:	78 94       	sei
    1e88:	80 e0       	ldi	r24, 0x00	; 0
    1e8a:	91 e0       	ldi	r25, 0x01	; 1
    1e8c:	08 95       	ret
    1e8e:	78 94       	sei
    1e90:	e0 91 de 05 	lds	r30, 0x05DE	; 0x8005de <UART2_RxTail>
    1e94:	f0 e0       	ldi	r31, 0x00	; 0
    1e96:	31 96       	adiw	r30, 0x01	; 1
    1e98:	ef 77       	andi	r30, 0x7F	; 127
    1e9a:	ff 27       	eor	r31, r31
    1e9c:	ee 51       	subi	r30, 0x1E	; 30
    1e9e:	fa 4f       	sbci	r31, 0xFA	; 250
    1ea0:	20 81       	ld	r18, Z
    1ea2:	80 91 dd 05 	lds	r24, 0x05DD	; 0x8005dd <UART2_LastRxError>
    1ea6:	90 e0       	ldi	r25, 0x00	; 0
    1ea8:	98 2f       	mov	r25, r24
    1eaa:	88 27       	eor	r24, r24
    1eac:	82 0f       	add	r24, r18
    1eae:	91 1d       	adc	r25, r1
    1eb0:	08 95       	ret

00001eb2 <UART2_putc>:
    1eb2:	40 91 e1 05 	lds	r20, 0x05E1	; 0x8005e1 <UART2_TxHead>
    1eb6:	50 e0       	ldi	r21, 0x00	; 0
    1eb8:	4f 5f       	subi	r20, 0xFF	; 255
    1eba:	5f 4f       	sbci	r21, 0xFF	; 255
    1ebc:	4f 77       	andi	r20, 0x7F	; 127
    1ebe:	55 27       	eor	r21, r21
    1ec0:	20 91 e0 05 	lds	r18, 0x05E0	; 0x8005e0 <UART2_TxTail>
    1ec4:	30 e0       	ldi	r19, 0x00	; 0
    1ec6:	24 17       	cp	r18, r20
    1ec8:	35 07       	cpc	r19, r21
    1eca:	d1 f3       	breq	.-12     	; 0x1ec0 <UART2_putc+0xe>
    1ecc:	fa 01       	movw	r30, r20
    1ece:	ee 59       	subi	r30, 0x9E	; 158
    1ed0:	f9 4f       	sbci	r31, 0xF9	; 249
    1ed2:	80 83       	st	Z, r24
    1ed4:	40 93 e1 05 	sts	0x05E1, r20	; 0x8005e1 <UART2_TxHead>
    1ed8:	e1 ed       	ldi	r30, 0xD1	; 209
    1eda:	f0 e0       	ldi	r31, 0x00	; 0
    1edc:	80 81       	ld	r24, Z
    1ede:	80 62       	ori	r24, 0x20	; 32
    1ee0:	80 83       	st	Z, r24
    1ee2:	08 95       	ret

00001ee4 <UART2_puts>:
    1ee4:	cf 93       	push	r28
    1ee6:	df 93       	push	r29
    1ee8:	ec 01       	movw	r28, r24
    1eea:	88 81       	ld	r24, Y
    1eec:	88 23       	and	r24, r24
    1eee:	29 f0       	breq	.+10     	; 0x1efa <UART2_puts+0x16>
    1ef0:	21 96       	adiw	r28, 0x01	; 1
    1ef2:	df df       	rcall	.-66     	; 0x1eb2 <UART2_putc>
    1ef4:	89 91       	ld	r24, Y+
    1ef6:	81 11       	cpse	r24, r1
    1ef8:	fc cf       	rjmp	.-8      	; 0x1ef2 <UART2_puts+0xe>
    1efa:	df 91       	pop	r29
    1efc:	cf 91       	pop	r28
    1efe:	08 95       	ret

00001f00 <UART2_puts_p>:
    1f00:	cf 93       	push	r28
    1f02:	df 93       	push	r29
    1f04:	ec 01       	movw	r28, r24
    1f06:	21 96       	adiw	r28, 0x01	; 1
    1f08:	fc 01       	movw	r30, r24
    1f0a:	84 91       	lpm	r24, Z
    1f0c:	88 23       	and	r24, r24
    1f0e:	31 f0       	breq	.+12     	; 0x1f1c <UART2_puts_p+0x1c>
    1f10:	d0 df       	rcall	.-96     	; 0x1eb2 <UART2_putc>
    1f12:	fe 01       	movw	r30, r28
    1f14:	84 91       	lpm	r24, Z
    1f16:	21 96       	adiw	r28, 0x01	; 1
    1f18:	81 11       	cpse	r24, r1
    1f1a:	fa cf       	rjmp	.-12     	; 0x1f10 <UART2_puts_p+0x10>
    1f1c:	df 91       	pop	r29
    1f1e:	cf 91       	pop	r28
    1f20:	08 95       	ret

00001f22 <UART2_available>:
    1f22:	f8 94       	cli
    1f24:	80 91 df 05 	lds	r24, 0x05DF	; 0x8005df <UART2_RxHead>
    1f28:	20 91 de 05 	lds	r18, 0x05DE	; 0x8005de <UART2_RxTail>
    1f2c:	78 94       	sei
    1f2e:	90 e0       	ldi	r25, 0x00	; 0
    1f30:	80 58       	subi	r24, 0x80	; 128
    1f32:	9f 4f       	sbci	r25, 0xFF	; 255
    1f34:	82 1b       	sub	r24, r18
    1f36:	91 09       	sbc	r25, r1
    1f38:	8f 77       	andi	r24, 0x7F	; 127
    1f3a:	99 27       	eor	r25, r25
    1f3c:	08 95       	ret

00001f3e <UART2_flush>:
    1f3e:	80 91 d5 04 	lds	r24, 0x04D5	; 0x8004d5 <UART2_Transmission_end>
    1f42:	88 23       	and	r24, r24
    1f44:	e1 f3       	breq	.-8      	; 0x1f3e <UART2_flush>
    1f46:	08 95       	ret

00001f48 <__vector_54>:
    1f48:	1f 92       	push	r1
    1f4a:	0f 92       	push	r0
    1f4c:	0f b6       	in	r0, 0x3f	; 63
    1f4e:	0f 92       	push	r0
    1f50:	11 24       	eor	r1, r1
    1f52:	0b b6       	in	r0, 0x3b	; 59
    1f54:	0f 92       	push	r0
    1f56:	2f 93       	push	r18
    1f58:	3f 93       	push	r19
    1f5a:	4f 93       	push	r20
    1f5c:	5f 93       	push	r21
    1f5e:	8f 93       	push	r24
    1f60:	9f 93       	push	r25
    1f62:	ef 93       	push	r30
    1f64:	ff 93       	push	r31
    1f66:	20 91 30 01 	lds	r18, 0x0130	; 0x800130 <__TEXT_REGION_LENGTH__+0x700130>
    1f6a:	30 91 36 01 	lds	r19, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    1f6e:	28 71       	andi	r18, 0x18	; 24
    1f70:	80 91 da 04 	lds	r24, 0x04DA	; 0x8004da <UART3_RxHead>
    1f74:	90 e0       	ldi	r25, 0x00	; 0
    1f76:	01 96       	adiw	r24, 0x01	; 1
    1f78:	8f 77       	andi	r24, 0x7F	; 127
    1f7a:	99 27       	eor	r25, r25
    1f7c:	40 91 d9 04 	lds	r20, 0x04D9	; 0x8004d9 <UART3_RxTail>
    1f80:	50 e0       	ldi	r21, 0x00	; 0
    1f82:	48 17       	cp	r20, r24
    1f84:	59 07       	cpc	r21, r25
    1f86:	39 f0       	breq	.+14     	; 0x1f96 <__vector_54+0x4e>
    1f88:	80 93 da 04 	sts	0x04DA, r24	; 0x8004da <UART3_RxHead>
    1f8c:	fc 01       	movw	r30, r24
    1f8e:	e3 52       	subi	r30, 0x23	; 35
    1f90:	fb 4f       	sbci	r31, 0xFB	; 251
    1f92:	30 83       	st	Z, r19
    1f94:	01 c0       	rjmp	.+2      	; 0x1f98 <__vector_54+0x50>
    1f96:	22 e0       	ldi	r18, 0x02	; 2
    1f98:	20 93 d8 04 	sts	0x04D8, r18	; 0x8004d8 <UART3_LastRxError>
    1f9c:	ff 91       	pop	r31
    1f9e:	ef 91       	pop	r30
    1fa0:	9f 91       	pop	r25
    1fa2:	8f 91       	pop	r24
    1fa4:	5f 91       	pop	r21
    1fa6:	4f 91       	pop	r20
    1fa8:	3f 91       	pop	r19
    1faa:	2f 91       	pop	r18
    1fac:	0f 90       	pop	r0
    1fae:	0b be       	out	0x3b, r0	; 59
    1fb0:	0f 90       	pop	r0
    1fb2:	0f be       	out	0x3f, r0	; 63
    1fb4:	0f 90       	pop	r0
    1fb6:	1f 90       	pop	r1
    1fb8:	18 95       	reti

00001fba <__vector_55>:
    1fba:	1f 92       	push	r1
    1fbc:	0f 92       	push	r0
    1fbe:	0f b6       	in	r0, 0x3f	; 63
    1fc0:	0f 92       	push	r0
    1fc2:	11 24       	eor	r1, r1
    1fc4:	0b b6       	in	r0, 0x3b	; 59
    1fc6:	0f 92       	push	r0
    1fc8:	8f 93       	push	r24
    1fca:	9f 93       	push	r25
    1fcc:	ef 93       	push	r30
    1fce:	ff 93       	push	r31
    1fd0:	90 91 dc 04 	lds	r25, 0x04DC	; 0x8004dc <UART3_TxHead>
    1fd4:	80 91 db 04 	lds	r24, 0x04DB	; 0x8004db <UART3_TxTail>
    1fd8:	98 17       	cp	r25, r24
    1fda:	89 f0       	breq	.+34     	; 0x1ffe <__vector_55+0x44>
    1fdc:	80 91 db 04 	lds	r24, 0x04DB	; 0x8004db <UART3_TxTail>
    1fe0:	90 e0       	ldi	r25, 0x00	; 0
    1fe2:	01 96       	adiw	r24, 0x01	; 1
    1fe4:	8f 77       	andi	r24, 0x7F	; 127
    1fe6:	99 27       	eor	r25, r25
    1fe8:	80 93 db 04 	sts	0x04DB, r24	; 0x8004db <UART3_TxTail>
    1fec:	fc 01       	movw	r30, r24
    1fee:	e3 5a       	subi	r30, 0xA3	; 163
    1ff0:	fa 4f       	sbci	r31, 0xFA	; 250
    1ff2:	80 81       	ld	r24, Z
    1ff4:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    1ff8:	10 92 d4 04 	sts	0x04D4, r1	; 0x8004d4 <UART3_Transmission_end>
    1ffc:	08 c0       	rjmp	.+16     	; 0x200e <__vector_55+0x54>
    1ffe:	e1 e3       	ldi	r30, 0x31	; 49
    2000:	f1 e0       	ldi	r31, 0x01	; 1
    2002:	80 81       	ld	r24, Z
    2004:	8f 7d       	andi	r24, 0xDF	; 223
    2006:	80 83       	st	Z, r24
    2008:	81 e0       	ldi	r24, 0x01	; 1
    200a:	80 93 d4 04 	sts	0x04D4, r24	; 0x8004d4 <UART3_Transmission_end>
    200e:	ff 91       	pop	r31
    2010:	ef 91       	pop	r30
    2012:	9f 91       	pop	r25
    2014:	8f 91       	pop	r24
    2016:	0f 90       	pop	r0
    2018:	0b be       	out	0x3b, r0	; 59
    201a:	0f 90       	pop	r0
    201c:	0f be       	out	0x3f, r0	; 63
    201e:	0f 90       	pop	r0
    2020:	1f 90       	pop	r1
    2022:	18 95       	reti

00002024 <UART3_init>:
    2024:	0f 93       	push	r16
    2026:	1f 93       	push	r17
    2028:	8b 01       	movw	r16, r22
    202a:	9c 01       	movw	r18, r24
    202c:	f8 94       	cli
    202e:	10 92 dc 04 	sts	0x04DC, r1	; 0x8004dc <UART3_TxHead>
    2032:	10 92 db 04 	sts	0x04DB, r1	; 0x8004db <UART3_TxTail>
    2036:	10 92 da 04 	sts	0x04DA, r1	; 0x8004da <UART3_RxHead>
    203a:	10 92 d9 04 	sts	0x04D9, r1	; 0x8004d9 <UART3_RxTail>
    203e:	78 94       	sei
    2040:	dc 01       	movw	r26, r24
    2042:	cb 01       	movw	r24, r22
    2044:	80 58       	subi	r24, 0x80	; 128
    2046:	9b 47       	sbci	r25, 0x7B	; 123
    2048:	a1 4e       	sbci	r26, 0xE1	; 225
    204a:	bf 4f       	sbci	r27, 0xFF	; 255
    204c:	88 0f       	add	r24, r24
    204e:	99 1f       	adc	r25, r25
    2050:	aa 1f       	adc	r26, r26
    2052:	bb 1f       	adc	r27, r27
    2054:	88 0f       	add	r24, r24
    2056:	99 1f       	adc	r25, r25
    2058:	aa 1f       	adc	r26, r26
    205a:	bb 1f       	adc	r27, r27
    205c:	bc 01       	movw	r22, r24
    205e:	cd 01       	movw	r24, r26
    2060:	66 0f       	add	r22, r22
    2062:	77 1f       	adc	r23, r23
    2064:	88 1f       	adc	r24, r24
    2066:	99 1f       	adc	r25, r25
    2068:	00 0f       	add	r16, r16
    206a:	11 1f       	adc	r17, r17
    206c:	22 1f       	adc	r18, r18
    206e:	33 1f       	adc	r19, r19
    2070:	00 0f       	add	r16, r16
    2072:	11 1f       	adc	r17, r17
    2074:	22 1f       	adc	r18, r18
    2076:	33 1f       	adc	r19, r19
    2078:	a9 01       	movw	r20, r18
    207a:	98 01       	movw	r18, r16
    207c:	22 0f       	add	r18, r18
    207e:	33 1f       	adc	r19, r19
    2080:	44 1f       	adc	r20, r20
    2082:	55 1f       	adc	r21, r21
    2084:	22 0f       	add	r18, r18
    2086:	33 1f       	adc	r19, r19
    2088:	44 1f       	adc	r20, r20
    208a:	55 1f       	adc	r21, r21
    208c:	0e 94 83 20 	call	0x4106	; 0x4106 <__udivmodsi4>
    2090:	ba 01       	movw	r22, r20
    2092:	a9 01       	movw	r20, r18
    2094:	41 50       	subi	r20, 0x01	; 1
    2096:	51 09       	sbc	r21, r1
    2098:	61 09       	sbc	r22, r1
    209a:	71 09       	sbc	r23, r1
    209c:	57 ff       	sbrs	r21, 7
    209e:	06 c0       	rjmp	.+12     	; 0x20ac <UART3_init+0x88>
    20a0:	82 e0       	ldi	r24, 0x02	; 2
    20a2:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <__TEXT_REGION_LENGTH__+0x700130>
    20a6:	5f 77       	andi	r21, 0x7F	; 127
    20a8:	66 27       	eor	r22, r22
    20aa:	77 27       	eor	r23, r23
    20ac:	bb 27       	eor	r27, r27
    20ae:	a7 2f       	mov	r26, r23
    20b0:	96 2f       	mov	r25, r22
    20b2:	85 2f       	mov	r24, r21
    20b4:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <__TEXT_REGION_LENGTH__+0x700135>
    20b8:	40 93 34 01 	sts	0x0134, r20	; 0x800134 <__TEXT_REGION_LENGTH__+0x700134>
    20bc:	88 e9       	ldi	r24, 0x98	; 152
    20be:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <__TEXT_REGION_LENGTH__+0x700131>
    20c2:	86 e0       	ldi	r24, 0x06	; 6
    20c4:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <__TEXT_REGION_LENGTH__+0x700132>
    20c8:	1f 91       	pop	r17
    20ca:	0f 91       	pop	r16
    20cc:	08 95       	ret

000020ce <UART3_getc>:
    20ce:	90 91 da 04 	lds	r25, 0x04DA	; 0x8004da <UART3_RxHead>
    20d2:	80 91 d9 04 	lds	r24, 0x04D9	; 0x8004d9 <UART3_RxTail>
    20d6:	98 17       	cp	r25, r24
    20d8:	a1 f0       	breq	.+40     	; 0x2102 <UART3_getc+0x34>
    20da:	80 91 d9 04 	lds	r24, 0x04D9	; 0x8004d9 <UART3_RxTail>
    20de:	90 e0       	ldi	r25, 0x00	; 0
    20e0:	01 96       	adiw	r24, 0x01	; 1
    20e2:	8f 77       	andi	r24, 0x7F	; 127
    20e4:	99 27       	eor	r25, r25
    20e6:	80 93 d9 04 	sts	0x04D9, r24	; 0x8004d9 <UART3_RxTail>
    20ea:	fc 01       	movw	r30, r24
    20ec:	e3 52       	subi	r30, 0x23	; 35
    20ee:	fb 4f       	sbci	r31, 0xFB	; 251
    20f0:	20 81       	ld	r18, Z
    20f2:	80 91 d8 04 	lds	r24, 0x04D8	; 0x8004d8 <UART3_LastRxError>
    20f6:	90 e0       	ldi	r25, 0x00	; 0
    20f8:	98 2f       	mov	r25, r24
    20fa:	88 27       	eor	r24, r24
    20fc:	82 0f       	add	r24, r18
    20fe:	91 1d       	adc	r25, r1
    2100:	08 95       	ret
    2102:	80 e0       	ldi	r24, 0x00	; 0
    2104:	91 e0       	ldi	r25, 0x01	; 1
    2106:	08 95       	ret

00002108 <UART3_peek>:
    2108:	f8 94       	cli
    210a:	90 91 da 04 	lds	r25, 0x04DA	; 0x8004da <UART3_RxHead>
    210e:	80 91 d9 04 	lds	r24, 0x04D9	; 0x8004d9 <UART3_RxTail>
    2112:	98 13       	cpse	r25, r24
    2114:	04 c0       	rjmp	.+8      	; 0x211e <UART3_peek+0x16>
    2116:	78 94       	sei
    2118:	80 e0       	ldi	r24, 0x00	; 0
    211a:	91 e0       	ldi	r25, 0x01	; 1
    211c:	08 95       	ret
    211e:	78 94       	sei
    2120:	e0 91 d9 04 	lds	r30, 0x04D9	; 0x8004d9 <UART3_RxTail>
    2124:	f0 e0       	ldi	r31, 0x00	; 0
    2126:	31 96       	adiw	r30, 0x01	; 1
    2128:	ef 77       	andi	r30, 0x7F	; 127
    212a:	ff 27       	eor	r31, r31
    212c:	e3 52       	subi	r30, 0x23	; 35
    212e:	fb 4f       	sbci	r31, 0xFB	; 251
    2130:	20 81       	ld	r18, Z
    2132:	80 91 d8 04 	lds	r24, 0x04D8	; 0x8004d8 <UART3_LastRxError>
    2136:	90 e0       	ldi	r25, 0x00	; 0
    2138:	98 2f       	mov	r25, r24
    213a:	88 27       	eor	r24, r24
    213c:	82 0f       	add	r24, r18
    213e:	91 1d       	adc	r25, r1
    2140:	08 95       	ret

00002142 <UART3_putc>:
    2142:	40 91 dc 04 	lds	r20, 0x04DC	; 0x8004dc <UART3_TxHead>
    2146:	50 e0       	ldi	r21, 0x00	; 0
    2148:	4f 5f       	subi	r20, 0xFF	; 255
    214a:	5f 4f       	sbci	r21, 0xFF	; 255
    214c:	4f 77       	andi	r20, 0x7F	; 127
    214e:	55 27       	eor	r21, r21
    2150:	20 91 db 04 	lds	r18, 0x04DB	; 0x8004db <UART3_TxTail>
    2154:	30 e0       	ldi	r19, 0x00	; 0
    2156:	24 17       	cp	r18, r20
    2158:	35 07       	cpc	r19, r21
    215a:	d1 f3       	breq	.-12     	; 0x2150 <UART3_putc+0xe>
    215c:	fa 01       	movw	r30, r20
    215e:	e3 5a       	subi	r30, 0xA3	; 163
    2160:	fa 4f       	sbci	r31, 0xFA	; 250
    2162:	80 83       	st	Z, r24
    2164:	40 93 dc 04 	sts	0x04DC, r20	; 0x8004dc <UART3_TxHead>
    2168:	e1 e3       	ldi	r30, 0x31	; 49
    216a:	f1 e0       	ldi	r31, 0x01	; 1
    216c:	80 81       	ld	r24, Z
    216e:	80 62       	ori	r24, 0x20	; 32
    2170:	80 83       	st	Z, r24
    2172:	08 95       	ret

00002174 <UART3_puts>:
Purpose:  transmit string to UART3
Input:    string to be transmitted
Returns:  none
**************************************************************************/
void UART3_puts(const char *s)
{
    2174:	cf 93       	push	r28
    2176:	df 93       	push	r29
    2178:	ec 01       	movw	r28, r24
	while (*s) {
    217a:	88 81       	ld	r24, Y
    217c:	88 23       	and	r24, r24
    217e:	29 f0       	breq	.+10     	; 0x218a <UART3_puts+0x16>
    2180:	21 96       	adiw	r28, 0x01	; 1
		UART3_putc(*s++);
    2182:	df df       	rcall	.-66     	; 0x2142 <UART3_putc>
Input:    string to be transmitted
Returns:  none
**************************************************************************/
void UART3_puts(const char *s)
{
	while (*s) {
    2184:	89 91       	ld	r24, Y+
    2186:	81 11       	cpse	r24, r1
    2188:	fc cf       	rjmp	.-8      	; 0x2182 <UART3_puts+0xe>
		UART3_putc(*s++);
	}

} /* UART3_puts */
    218a:	df 91       	pop	r29
    218c:	cf 91       	pop	r28
    218e:	08 95       	ret

00002190 <UART3_puts_p>:
Purpose:  transmit string from program memory to UART3
Input:    program memory string to be transmitted
Returns:  none
**************************************************************************/
void UART3_puts_p(const char *progmem_s)
{
    2190:	cf 93       	push	r28
    2192:	df 93       	push	r29
	register char c;

	while ((c = pgm_read_byte(progmem_s++))) {
    2194:	ec 01       	movw	r28, r24
    2196:	21 96       	adiw	r28, 0x01	; 1
    2198:	fc 01       	movw	r30, r24
    219a:	84 91       	lpm	r24, Z
    219c:	88 23       	and	r24, r24
    219e:	31 f0       	breq	.+12     	; 0x21ac <UART3_puts_p+0x1c>
		UART3_putc(c);
    21a0:	d0 df       	rcall	.-96     	; 0x2142 <UART3_putc>
**************************************************************************/
void UART3_puts_p(const char *progmem_s)
{
	register char c;

	while ((c = pgm_read_byte(progmem_s++))) {
    21a2:	fe 01       	movw	r30, r28
    21a4:	84 91       	lpm	r24, Z
    21a6:	21 96       	adiw	r28, 0x01	; 1
    21a8:	81 11       	cpse	r24, r1
    21aa:	fa cf       	rjmp	.-12     	; 0x21a0 <UART3_puts_p+0x10>
		UART3_putc(c);
	}

} /* UART3_puts_p */
    21ac:	df 91       	pop	r29
    21ae:	cf 91       	pop	r28
    21b0:	08 95       	ret

000021b2 <UART3_available>:
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    21b2:	f8 94       	cli
uint16_t UART3_available(void)
{
	uint16_t ret;
	
	ATOMIC_BLOCK(ATOMIC_FORCEON) {
		ret = (UART_RX3_BUFFER_SIZE + UART3_RxHead - UART3_RxTail) & UART_RX3_BUFFER_MASK;
    21b4:	80 91 da 04 	lds	r24, 0x04DA	; 0x8004da <UART3_RxHead>
    21b8:	20 91 d9 04 	lds	r18, 0x04D9	; 0x8004d9 <UART3_RxTail>
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
    21bc:	78 94       	sei
    21be:	90 e0       	ldi	r25, 0x00	; 0
    21c0:	80 58       	subi	r24, 0x80	; 128
    21c2:	9f 4f       	sbci	r25, 0xFF	; 255
    21c4:	82 1b       	sub	r24, r18
    21c6:	91 09       	sbc	r25, r1
	}
	return ret;
} /* UART3_available */
    21c8:	8f 77       	andi	r24, 0x7F	; 127
    21ca:	99 27       	eor	r25, r25
    21cc:	08 95       	ret

000021ce <UART3_flush>:
void UART3_flush(void)
{
//	ATOMIC_BLOCK(ATOMIC_FORCEON) {
//		UART3_RxHead = UART3_RxTail;
//	} commented by mohab
	while(0 == UART3_Transmission_end);
    21ce:	80 91 d4 04 	lds	r24, 0x04D4	; 0x8004d4 <UART3_Transmission_end>
    21d2:	88 23       	and	r24, r24
    21d4:	e1 f3       	breq	.-8      	; 0x21ce <UART3_flush>
} /* UART3_flush */
    21d6:	08 95       	ret

000021d8 <RTE_encoder_init>:


/*static uint16_t Conveyor_speed;*/
static uint16_t Drum_speed;

void RTE_encoder_init(void){
    21d8:	08 95       	ret

000021da <RTE_get_Drum_speed>:



uint16_t RTE_get_Drum_speed(void){
	return Drum_speed;
}
    21da:	80 91 ec 08 	lds	r24, 0x08EC	; 0x8008ec <Drum_speed>
    21de:	90 91 ed 08 	lds	r25, 0x08ED	; 0x8008ed <Drum_speed+0x1>
    21e2:	08 95       	ret

000021e4 <RTE_invertersetting_init>:
}

uint16_t RTE_get_Time_minute(void){
	xSemaphoreTake(Sema_Time_minute_handle,portMAX_DELAY);
	return Time_minute;
}
    21e4:	0f 93       	push	r16
    21e6:	03 e0       	ldi	r16, 0x03	; 3
    21e8:	2f e9       	ldi	r18, 0x9F	; 159
    21ea:	39 e0       	ldi	r19, 0x09	; 9
    21ec:	40 e0       	ldi	r20, 0x00	; 0
    21ee:	50 e0       	ldi	r21, 0x00	; 0
    21f0:	60 e0       	ldi	r22, 0x00	; 0
    21f2:	81 e0       	ldi	r24, 0x01	; 1
    21f4:	14 d5       	rcall	.+2600   	; 0x2c1e <xQueueGenericCreateStatic>
    21f6:	90 93 bf 09 	sts	0x09BF, r25	; 0x8009bf <Sema_Gear_ratio_handle+0x1>
    21fa:	80 93 be 09 	sts	0x09BE, r24	; 0x8009be <Sema_Gear_ratio_handle>
    21fe:	2c e7       	ldi	r18, 0x7C	; 124
    2200:	39 e0       	ldi	r19, 0x09	; 9
    2202:	40 e0       	ldi	r20, 0x00	; 0
    2204:	50 e0       	ldi	r21, 0x00	; 0
    2206:	60 e0       	ldi	r22, 0x00	; 0
    2208:	81 e0       	ldi	r24, 0x01	; 1
    220a:	09 d5       	rcall	.+2578   	; 0x2c1e <xQueueGenericCreateStatic>
    220c:	90 93 9c 09 	sts	0x099C, r25	; 0x80099c <Sema_RPM_max_handle+0x1>
    2210:	80 93 9b 09 	sts	0x099B, r24	; 0x80099b <Sema_RPM_max_handle>
    2214:	29 e5       	ldi	r18, 0x59	; 89
    2216:	39 e0       	ldi	r19, 0x09	; 9
    2218:	40 e0       	ldi	r20, 0x00	; 0
    221a:	50 e0       	ldi	r21, 0x00	; 0
    221c:	60 e0       	ldi	r22, 0x00	; 0
    221e:	81 e0       	ldi	r24, 0x01	; 1
    2220:	fe d4       	rcall	.+2556   	; 0x2c1e <xQueueGenericCreateStatic>
    2222:	90 93 79 09 	sts	0x0979, r25	; 0x800979 <Sema_Conveyor_length_handle+0x1>
    2226:	80 93 78 09 	sts	0x0978, r24	; 0x800978 <Sema_Conveyor_length_handle>
    222a:	26 e3       	ldi	r18, 0x36	; 54
    222c:	39 e0       	ldi	r19, 0x09	; 9
    222e:	40 e0       	ldi	r20, 0x00	; 0
    2230:	50 e0       	ldi	r21, 0x00	; 0
    2232:	60 e0       	ldi	r22, 0x00	; 0
    2234:	81 e0       	ldi	r24, 0x01	; 1
    2236:	f3 d4       	rcall	.+2534   	; 0x2c1e <xQueueGenericCreateStatic>
    2238:	90 93 56 09 	sts	0x0956, r25	; 0x800956 <Sema_Driver_diameter_handle+0x1>
    223c:	80 93 55 09 	sts	0x0955, r24	; 0x800955 <Sema_Driver_diameter_handle>
    2240:	23 e1       	ldi	r18, 0x13	; 19
    2242:	39 e0       	ldi	r19, 0x09	; 9
    2244:	40 e0       	ldi	r20, 0x00	; 0
    2246:	50 e0       	ldi	r21, 0x00	; 0
    2248:	60 e0       	ldi	r22, 0x00	; 0
    224a:	81 e0       	ldi	r24, 0x01	; 1
    224c:	e8 d4       	rcall	.+2512   	; 0x2c1e <xQueueGenericCreateStatic>
    224e:	90 93 33 09 	sts	0x0933, r25	; 0x800933 <Sema_Time_minute_handle+0x1>
    2252:	80 93 32 09 	sts	0x0932, r24	; 0x800932 <Sema_Time_minute_handle>
    2256:	20 ef       	ldi	r18, 0xF0	; 240
    2258:	38 e0       	ldi	r19, 0x08	; 8
    225a:	40 e0       	ldi	r20, 0x00	; 0
    225c:	50 e0       	ldi	r21, 0x00	; 0
    225e:	60 e0       	ldi	r22, 0x00	; 0
    2260:	81 e0       	ldi	r24, 0x01	; 1
    2262:	dd d4       	rcall	.+2490   	; 0x2c1e <xQueueGenericCreateStatic>
    2264:	90 93 10 09 	sts	0x0910, r25	; 0x800910 <Sema_Time_second_handle+0x1>
    2268:	80 93 0f 09 	sts	0x090F, r24	; 0x80090f <Sema_Time_second_handle>
    226c:	0f 91       	pop	r16
    226e:	08 95       	ret

00002270 <RTE_set_Gear_ratio>:
    2270:	90 93 9e 09 	sts	0x099E, r25	; 0x80099e <Gear_ratio+0x1>
    2274:	80 93 9d 09 	sts	0x099D, r24	; 0x80099d <Gear_ratio>
    2278:	20 e0       	ldi	r18, 0x00	; 0
    227a:	40 e0       	ldi	r20, 0x00	; 0
    227c:	50 e0       	ldi	r21, 0x00	; 0
    227e:	60 e0       	ldi	r22, 0x00	; 0
    2280:	70 e0       	ldi	r23, 0x00	; 0
    2282:	80 91 be 09 	lds	r24, 0x09BE	; 0x8009be <Sema_Gear_ratio_handle>
    2286:	90 91 bf 09 	lds	r25, 0x09BF	; 0x8009bf <Sema_Gear_ratio_handle+0x1>
    228a:	de c4       	rjmp	.+2492   	; 0x2c48 <xQueueGenericSend>
    228c:	08 95       	ret

0000228e <RTE_set_RPM_max>:
    228e:	90 93 7b 09 	sts	0x097B, r25	; 0x80097b <RPM_max+0x1>
    2292:	80 93 7a 09 	sts	0x097A, r24	; 0x80097a <RPM_max>
    2296:	20 e0       	ldi	r18, 0x00	; 0
    2298:	40 e0       	ldi	r20, 0x00	; 0
    229a:	50 e0       	ldi	r21, 0x00	; 0
    229c:	60 e0       	ldi	r22, 0x00	; 0
    229e:	70 e0       	ldi	r23, 0x00	; 0
    22a0:	80 91 9b 09 	lds	r24, 0x099B	; 0x80099b <Sema_RPM_max_handle>
    22a4:	90 91 9c 09 	lds	r25, 0x099C	; 0x80099c <Sema_RPM_max_handle+0x1>
    22a8:	cf c4       	rjmp	.+2462   	; 0x2c48 <xQueueGenericSend>
    22aa:	08 95       	ret

000022ac <RTE_get_RPM_max>:
    22ac:	6f ef       	ldi	r22, 0xFF	; 255
    22ae:	7f ef       	ldi	r23, 0xFF	; 255
    22b0:	80 91 9b 09 	lds	r24, 0x099B	; 0x80099b <Sema_RPM_max_handle>
    22b4:	90 91 9c 09 	lds	r25, 0x099C	; 0x80099c <Sema_RPM_max_handle+0x1>
    22b8:	1a d6       	rcall	.+3124   	; 0x2eee <xQueueSemaphoreTake>
    22ba:	80 91 7a 09 	lds	r24, 0x097A	; 0x80097a <RPM_max>
    22be:	90 91 7b 09 	lds	r25, 0x097B	; 0x80097b <RPM_max+0x1>
    22c2:	08 95       	ret

000022c4 <RTE_set_Conveyor_length>:
    22c4:	90 93 58 09 	sts	0x0958, r25	; 0x800958 <Conveyor_length+0x1>
    22c8:	80 93 57 09 	sts	0x0957, r24	; 0x800957 <Conveyor_length>
    22cc:	20 e0       	ldi	r18, 0x00	; 0
    22ce:	40 e0       	ldi	r20, 0x00	; 0
    22d0:	50 e0       	ldi	r21, 0x00	; 0
    22d2:	60 e0       	ldi	r22, 0x00	; 0
    22d4:	70 e0       	ldi	r23, 0x00	; 0
    22d6:	80 91 78 09 	lds	r24, 0x0978	; 0x800978 <Sema_Conveyor_length_handle>
    22da:	90 91 79 09 	lds	r25, 0x0979	; 0x800979 <Sema_Conveyor_length_handle+0x1>
    22de:	b4 c4       	rjmp	.+2408   	; 0x2c48 <xQueueGenericSend>
    22e0:	08 95       	ret

000022e2 <RTE_set_Driver_diameter>:
    22e2:	90 93 35 09 	sts	0x0935, r25	; 0x800935 <Driver_diameter+0x1>
    22e6:	80 93 34 09 	sts	0x0934, r24	; 0x800934 <Driver_diameter>
    22ea:	20 e0       	ldi	r18, 0x00	; 0
    22ec:	40 e0       	ldi	r20, 0x00	; 0
    22ee:	50 e0       	ldi	r21, 0x00	; 0
    22f0:	60 e0       	ldi	r22, 0x00	; 0
    22f2:	70 e0       	ldi	r23, 0x00	; 0
    22f4:	80 91 55 09 	lds	r24, 0x0955	; 0x800955 <Sema_Driver_diameter_handle>
    22f8:	90 91 56 09 	lds	r25, 0x0956	; 0x800956 <Sema_Driver_diameter_handle+0x1>
    22fc:	a5 c4       	rjmp	.+2378   	; 0x2c48 <xQueueGenericSend>
    22fe:	08 95       	ret

00002300 <RTE_set_Time_minute>:
    2300:	90 93 12 09 	sts	0x0912, r25	; 0x800912 <Time_minute+0x1>
    2304:	80 93 11 09 	sts	0x0911, r24	; 0x800911 <Time_minute>
    2308:	20 e0       	ldi	r18, 0x00	; 0
    230a:	40 e0       	ldi	r20, 0x00	; 0
    230c:	50 e0       	ldi	r21, 0x00	; 0
    230e:	60 e0       	ldi	r22, 0x00	; 0
    2310:	70 e0       	ldi	r23, 0x00	; 0
    2312:	80 91 32 09 	lds	r24, 0x0932	; 0x800932 <Sema_Time_minute_handle>
    2316:	90 91 33 09 	lds	r25, 0x0933	; 0x800933 <Sema_Time_minute_handle+0x1>
    231a:	96 c4       	rjmp	.+2348   	; 0x2c48 <xQueueGenericSend>
    231c:	08 95       	ret

0000231e <RTE_set_Time_second>:

void RTE_set_Time_second(uint16_t u16Timesecond){
	Time_second = u16Timesecond;
    231e:	90 93 ef 08 	sts	0x08EF, r25	; 0x8008ef <Time_second+0x1>
    2322:	80 93 ee 08 	sts	0x08EE, r24	; 0x8008ee <Time_second>
	xSemaphoreGive(Sema_Time_second_handle);
    2326:	20 e0       	ldi	r18, 0x00	; 0
    2328:	40 e0       	ldi	r20, 0x00	; 0
    232a:	50 e0       	ldi	r21, 0x00	; 0
    232c:	60 e0       	ldi	r22, 0x00	; 0
    232e:	70 e0       	ldi	r23, 0x00	; 0
    2330:	80 91 0f 09 	lds	r24, 0x090F	; 0x80090f <Sema_Time_second_handle>
    2334:	90 91 10 09 	lds	r25, 0x0910	; 0x800910 <Sema_Time_second_handle+0x1>
    2338:	87 c4       	rjmp	.+2318   	; 0x2c48 <xQueueGenericSend>
    233a:	08 95       	ret

0000233c <RTE_levels_init>:

static SemaphoreHandle_t Sema_blancher_level_handle;
static StaticSemaphore_t Sema_blancher_level_Buffer;
static uint16_t blancher_level;

void RTE_levels_init(void){
    233c:	0f 93       	push	r16
	Sema_tank_level_handle = xSemaphoreCreateBinaryStatic(&Sema_tank_level_Buffer);
    233e:	03 e0       	ldi	r16, 0x03	; 3
    2340:	21 ee       	ldi	r18, 0xE1	; 225
    2342:	39 e0       	ldi	r19, 0x09	; 9
    2344:	40 e0       	ldi	r20, 0x00	; 0
    2346:	50 e0       	ldi	r21, 0x00	; 0
    2348:	60 e0       	ldi	r22, 0x00	; 0
    234a:	81 e0       	ldi	r24, 0x01	; 1
    234c:	68 d4       	rcall	.+2256   	; 0x2c1e <xQueueGenericCreateStatic>
    234e:	90 93 01 0a 	sts	0x0A01, r25	; 0x800a01 <Sema_tank_level_handle+0x1>
    2352:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <Sema_tank_level_handle>
	Sema_blancher_level_handle = xSemaphoreCreateBinaryStatic(&Sema_blancher_level_Buffer);
    2356:	20 ec       	ldi	r18, 0xC0	; 192
    2358:	39 e0       	ldi	r19, 0x09	; 9
    235a:	40 e0       	ldi	r20, 0x00	; 0
    235c:	50 e0       	ldi	r21, 0x00	; 0
    235e:	60 e0       	ldi	r22, 0x00	; 0
    2360:	81 e0       	ldi	r24, 0x01	; 1
    2362:	5d d4       	rcall	.+2234   	; 0x2c1e <xQueueGenericCreateStatic>
    2364:	90 93 e0 09 	sts	0x09E0, r25	; 0x8009e0 <Sema_blancher_level_handle+0x1>
    2368:	80 93 df 09 	sts	0x09DF, r24	; 0x8009df <Sema_blancher_level_handle>
}
    236c:	0f 91       	pop	r16
    236e:	08 95       	ret

00002370 <RTE_init>:
#include "RTE_levels.h"
#include "RTE_temperature.h"
#include "RTE_main.h"

void RTE_init(void){
	RTE_encoder_init();
    2370:	33 df       	rcall	.-410    	; 0x21d8 <RTE_encoder_init>
	RTE_invertersetting_init();
    2372:	38 df       	rcall	.-400    	; 0x21e4 <RTE_invertersetting_init>
	RTE_operations_init();
    2374:	03 d0       	rcall	.+6      	; 0x237c <RTE_operations_init>
	RTE_levels_init();
    2376:	e2 df       	rcall	.-60     	; 0x233c <RTE_levels_init>
	RTE_temperature_init();
    2378:	6d c0       	rjmp	.+218    	; 0x2454 <RTE_temperature_init>
    237a:	08 95       	ret

0000237c <RTE_operations_init>:
}

uint16_t RTE_get_Wash_Operation(void){
	xSemaphoreTake(Sema_Wash_Operation_handle,portMAX_DELAY);
	return Wash_Operation;
}
    237c:	0f 93       	push	r16
    237e:	03 e0       	ldi	r16, 0x03	; 3
    2380:	2d e6       	ldi	r18, 0x6D	; 109
    2382:	3a e0       	ldi	r19, 0x0A	; 10
    2384:	40 e0       	ldi	r20, 0x00	; 0
    2386:	50 e0       	ldi	r21, 0x00	; 0
    2388:	60 e0       	ldi	r22, 0x00	; 0
    238a:	81 e0       	ldi	r24, 0x01	; 1
    238c:	48 d4       	rcall	.+2192   	; 0x2c1e <xQueueGenericCreateStatic>
    238e:	90 93 8d 0a 	sts	0x0A8D, r25	; 0x800a8d <Sema_System_on_handle+0x1>
    2392:	80 93 8c 0a 	sts	0x0A8C, r24	; 0x800a8c <Sema_System_on_handle>
    2396:	2a e4       	ldi	r18, 0x4A	; 74
    2398:	3a e0       	ldi	r19, 0x0A	; 10
    239a:	40 e0       	ldi	r20, 0x00	; 0
    239c:	50 e0       	ldi	r21, 0x00	; 0
    239e:	60 e0       	ldi	r22, 0x00	; 0
    23a0:	81 e0       	ldi	r24, 0x01	; 1
    23a2:	3d d4       	rcall	.+2170   	; 0x2c1e <xQueueGenericCreateStatic>
    23a4:	90 93 6a 0a 	sts	0x0A6A, r25	; 0x800a6a <Sema_Start_blancher_Operation_handle+0x1>
    23a8:	80 93 69 0a 	sts	0x0A69, r24	; 0x800a69 <Sema_Start_blancher_Operation_handle>
    23ac:	27 e2       	ldi	r18, 0x27	; 39
    23ae:	3a e0       	ldi	r19, 0x0A	; 10
    23b0:	40 e0       	ldi	r20, 0x00	; 0
    23b2:	50 e0       	ldi	r21, 0x00	; 0
    23b4:	60 e0       	ldi	r22, 0x00	; 0
    23b6:	81 e0       	ldi	r24, 0x01	; 1
    23b8:	32 d4       	rcall	.+2148   	; 0x2c1e <xQueueGenericCreateStatic>
    23ba:	90 93 47 0a 	sts	0x0A47, r25	; 0x800a47 <Sema_Wash_Operation_handle+0x1>
    23be:	80 93 46 0a 	sts	0x0A46, r24	; 0x800a46 <Sema_Wash_Operation_handle>
    23c2:	24 e0       	ldi	r18, 0x04	; 4
    23c4:	3a e0       	ldi	r19, 0x0A	; 10
    23c6:	40 e0       	ldi	r20, 0x00	; 0
    23c8:	50 e0       	ldi	r21, 0x00	; 0
    23ca:	60 e0       	ldi	r22, 0x00	; 0
    23cc:	81 e0       	ldi	r24, 0x01	; 1
    23ce:	27 d4       	rcall	.+2126   	; 0x2c1e <xQueueGenericCreateStatic>
    23d0:	90 93 24 0a 	sts	0x0A24, r25	; 0x800a24 <Sema_Tank_Calibration_Operation_handle+0x1>
    23d4:	80 93 23 0a 	sts	0x0A23, r24	; 0x800a23 <Sema_Tank_Calibration_Operation_handle>
    23d8:	0f 91       	pop	r16
    23da:	08 95       	ret

000023dc <RTE_set_System_on>:
    23dc:	90 93 6c 0a 	sts	0x0A6C, r25	; 0x800a6c <System_on+0x1>
    23e0:	80 93 6b 0a 	sts	0x0A6B, r24	; 0x800a6b <System_on>
    23e4:	20 e0       	ldi	r18, 0x00	; 0
    23e6:	40 e0       	ldi	r20, 0x00	; 0
    23e8:	50 e0       	ldi	r21, 0x00	; 0
    23ea:	60 e0       	ldi	r22, 0x00	; 0
    23ec:	70 e0       	ldi	r23, 0x00	; 0
    23ee:	80 91 8c 0a 	lds	r24, 0x0A8C	; 0x800a8c <Sema_System_on_handle>
    23f2:	90 91 8d 0a 	lds	r25, 0x0A8D	; 0x800a8d <Sema_System_on_handle+0x1>
    23f6:	28 c4       	rjmp	.+2128   	; 0x2c48 <xQueueGenericSend>
    23f8:	08 95       	ret

000023fa <RTE_set_Start_blancher_Operation>:
    23fa:	90 93 49 0a 	sts	0x0A49, r25	; 0x800a49 <Start_blancher_Operation+0x1>
    23fe:	80 93 48 0a 	sts	0x0A48, r24	; 0x800a48 <Start_blancher_Operation>
    2402:	20 e0       	ldi	r18, 0x00	; 0
    2404:	40 e0       	ldi	r20, 0x00	; 0
    2406:	50 e0       	ldi	r21, 0x00	; 0
    2408:	60 e0       	ldi	r22, 0x00	; 0
    240a:	70 e0       	ldi	r23, 0x00	; 0
    240c:	80 91 69 0a 	lds	r24, 0x0A69	; 0x800a69 <Sema_Start_blancher_Operation_handle>
    2410:	90 91 6a 0a 	lds	r25, 0x0A6A	; 0x800a6a <Sema_Start_blancher_Operation_handle+0x1>
    2414:	19 c4       	rjmp	.+2098   	; 0x2c48 <xQueueGenericSend>
    2416:	08 95       	ret

00002418 <RTE_set_Wash_Operation>:
    2418:	90 93 26 0a 	sts	0x0A26, r25	; 0x800a26 <Wash_Operation+0x1>
    241c:	80 93 25 0a 	sts	0x0A25, r24	; 0x800a25 <Wash_Operation>
    2420:	20 e0       	ldi	r18, 0x00	; 0
    2422:	40 e0       	ldi	r20, 0x00	; 0
    2424:	50 e0       	ldi	r21, 0x00	; 0
    2426:	60 e0       	ldi	r22, 0x00	; 0
    2428:	70 e0       	ldi	r23, 0x00	; 0
    242a:	80 91 46 0a 	lds	r24, 0x0A46	; 0x800a46 <Sema_Wash_Operation_handle>
    242e:	90 91 47 0a 	lds	r25, 0x0A47	; 0x800a47 <Sema_Wash_Operation_handle+0x1>
    2432:	0a c4       	rjmp	.+2068   	; 0x2c48 <xQueueGenericSend>
    2434:	08 95       	ret

00002436 <RTE_set_Tank_Calibration_Operation>:




void RTE_set_Tank_Calibration_Operation(uint16_t u16Tank_Calibration_Operation){
	Tank_Calibration_Operation = u16Tank_Calibration_Operation;
    2436:	90 93 03 0a 	sts	0x0A03, r25	; 0x800a03 <Tank_Calibration_Operation+0x1>
    243a:	80 93 02 0a 	sts	0x0A02, r24	; 0x800a02 <Tank_Calibration_Operation>
	xSemaphoreGive(Sema_Tank_Calibration_Operation_handle);
    243e:	20 e0       	ldi	r18, 0x00	; 0
    2440:	40 e0       	ldi	r20, 0x00	; 0
    2442:	50 e0       	ldi	r21, 0x00	; 0
    2444:	60 e0       	ldi	r22, 0x00	; 0
    2446:	70 e0       	ldi	r23, 0x00	; 0
    2448:	80 91 23 0a 	lds	r24, 0x0A23	; 0x800a23 <Sema_Tank_Calibration_Operation_handle>
    244c:	90 91 24 0a 	lds	r25, 0x0A24	; 0x800a24 <Sema_Tank_Calibration_Operation_handle+0x1>
    2450:	fb c3       	rjmp	.+2038   	; 0x2c48 <xQueueGenericSend>
    2452:	08 95       	ret

00002454 <RTE_temperature_init>:
}

uint16_t RTE_get_Negative_offset_temperature(void){
	xSemaphoreTake(Sema_Negative_offset_temp_handle,portMAX_DELAY);
	return Negative_offset_temp;
}
    2454:	0f 93       	push	r16
    2456:	03 e0       	ldi	r16, 0x03	; 3
    2458:	21 e4       	ldi	r18, 0x41	; 65
    245a:	3b e0       	ldi	r19, 0x0B	; 11
    245c:	40 e0       	ldi	r20, 0x00	; 0
    245e:	50 e0       	ldi	r21, 0x00	; 0
    2460:	60 e0       	ldi	r22, 0x00	; 0
    2462:	81 e0       	ldi	r24, 0x01	; 1
    2464:	dc d3       	rcall	.+1976   	; 0x2c1e <xQueueGenericCreateStatic>
    2466:	90 93 61 0b 	sts	0x0B61, r25	; 0x800b61 <Sema_Sleep_temp_handle+0x1>
    246a:	80 93 60 0b 	sts	0x0B60, r24	; 0x800b60 <Sema_Sleep_temp_handle>
    246e:	2e e1       	ldi	r18, 0x1E	; 30
    2470:	3b e0       	ldi	r19, 0x0B	; 11
    2472:	40 e0       	ldi	r20, 0x00	; 0
    2474:	50 e0       	ldi	r21, 0x00	; 0
    2476:	60 e0       	ldi	r22, 0x00	; 0
    2478:	81 e0       	ldi	r24, 0x01	; 1
    247a:	d1 d3       	rcall	.+1954   	; 0x2c1e <xQueueGenericCreateStatic>
    247c:	90 93 3e 0b 	sts	0x0B3E, r25	; 0x800b3e <Sema_Set_temp_handle+0x1>
    2480:	80 93 3d 0b 	sts	0x0B3D, r24	; 0x800b3d <Sema_Set_temp_handle>
    2484:	2b ef       	ldi	r18, 0xFB	; 251
    2486:	3a e0       	ldi	r19, 0x0A	; 10
    2488:	40 e0       	ldi	r20, 0x00	; 0
    248a:	50 e0       	ldi	r21, 0x00	; 0
    248c:	60 e0       	ldi	r22, 0x00	; 0
    248e:	81 e0       	ldi	r24, 0x01	; 1
    2490:	c6 d3       	rcall	.+1932   	; 0x2c1e <xQueueGenericCreateStatic>
    2492:	90 93 1b 0b 	sts	0x0B1B, r25	; 0x800b1b <Sema_threshold_set_temp_handle+0x1>
    2496:	80 93 1a 0b 	sts	0x0B1A, r24	; 0x800b1a <Sema_threshold_set_temp_handle>
    249a:	28 ed       	ldi	r18, 0xD8	; 216
    249c:	3a e0       	ldi	r19, 0x0A	; 10
    249e:	40 e0       	ldi	r20, 0x00	; 0
    24a0:	50 e0       	ldi	r21, 0x00	; 0
    24a2:	60 e0       	ldi	r22, 0x00	; 0
    24a4:	81 e0       	ldi	r24, 0x01	; 1
    24a6:	bb d3       	rcall	.+1910   	; 0x2c1e <xQueueGenericCreateStatic>
    24a8:	90 93 f8 0a 	sts	0x0AF8, r25	; 0x800af8 <Sema_threshold_sleep_temp_handle+0x1>
    24ac:	80 93 f7 0a 	sts	0x0AF7, r24	; 0x800af7 <Sema_threshold_sleep_temp_handle>
    24b0:	25 eb       	ldi	r18, 0xB5	; 181
    24b2:	3a e0       	ldi	r19, 0x0A	; 10
    24b4:	40 e0       	ldi	r20, 0x00	; 0
    24b6:	50 e0       	ldi	r21, 0x00	; 0
    24b8:	60 e0       	ldi	r22, 0x00	; 0
    24ba:	81 e0       	ldi	r24, 0x01	; 1
    24bc:	b0 d3       	rcall	.+1888   	; 0x2c1e <xQueueGenericCreateStatic>
    24be:	90 93 d5 0a 	sts	0x0AD5, r25	; 0x800ad5 <Sema_Positive_offset_temp_handle+0x1>
    24c2:	80 93 d4 0a 	sts	0x0AD4, r24	; 0x800ad4 <Sema_Positive_offset_temp_handle>
    24c6:	22 e9       	ldi	r18, 0x92	; 146
    24c8:	3a e0       	ldi	r19, 0x0A	; 10
    24ca:	40 e0       	ldi	r20, 0x00	; 0
    24cc:	50 e0       	ldi	r21, 0x00	; 0
    24ce:	60 e0       	ldi	r22, 0x00	; 0
    24d0:	81 e0       	ldi	r24, 0x01	; 1
    24d2:	a5 d3       	rcall	.+1866   	; 0x2c1e <xQueueGenericCreateStatic>
    24d4:	90 93 b2 0a 	sts	0x0AB2, r25	; 0x800ab2 <Sema_Negative_offset_temp_handle+0x1>
    24d8:	80 93 b1 0a 	sts	0x0AB1, r24	; 0x800ab1 <Sema_Negative_offset_temp_handle>
    24dc:	0f 91       	pop	r16
    24de:	08 95       	ret

000024e0 <RTE_set_Sleep_temperature>:
    24e0:	90 93 40 0b 	sts	0x0B40, r25	; 0x800b40 <Sleep_temp+0x1>
    24e4:	80 93 3f 0b 	sts	0x0B3F, r24	; 0x800b3f <Sleep_temp>
    24e8:	20 e0       	ldi	r18, 0x00	; 0
    24ea:	40 e0       	ldi	r20, 0x00	; 0
    24ec:	50 e0       	ldi	r21, 0x00	; 0
    24ee:	60 e0       	ldi	r22, 0x00	; 0
    24f0:	70 e0       	ldi	r23, 0x00	; 0
    24f2:	80 91 60 0b 	lds	r24, 0x0B60	; 0x800b60 <Sema_Sleep_temp_handle>
    24f6:	90 91 61 0b 	lds	r25, 0x0B61	; 0x800b61 <Sema_Sleep_temp_handle+0x1>
    24fa:	a6 c3       	rjmp	.+1868   	; 0x2c48 <xQueueGenericSend>
    24fc:	08 95       	ret

000024fe <RTE_set_Set_temperature>:
    24fe:	90 93 1d 0b 	sts	0x0B1D, r25	; 0x800b1d <Set_temp+0x1>
    2502:	80 93 1c 0b 	sts	0x0B1C, r24	; 0x800b1c <Set_temp>
    2506:	20 e0       	ldi	r18, 0x00	; 0
    2508:	40 e0       	ldi	r20, 0x00	; 0
    250a:	50 e0       	ldi	r21, 0x00	; 0
    250c:	60 e0       	ldi	r22, 0x00	; 0
    250e:	70 e0       	ldi	r23, 0x00	; 0
    2510:	80 91 3d 0b 	lds	r24, 0x0B3D	; 0x800b3d <Sema_Set_temp_handle>
    2514:	90 91 3e 0b 	lds	r25, 0x0B3E	; 0x800b3e <Sema_Set_temp_handle+0x1>
    2518:	97 c3       	rjmp	.+1838   	; 0x2c48 <xQueueGenericSend>
    251a:	08 95       	ret

0000251c <RTE_set_Threshold_set_temperature>:
    251c:	90 93 fa 0a 	sts	0x0AFA, r25	; 0x800afa <Threshold_set_temp+0x1>
    2520:	80 93 f9 0a 	sts	0x0AF9, r24	; 0x800af9 <Threshold_set_temp>
    2524:	20 e0       	ldi	r18, 0x00	; 0
    2526:	40 e0       	ldi	r20, 0x00	; 0
    2528:	50 e0       	ldi	r21, 0x00	; 0
    252a:	60 e0       	ldi	r22, 0x00	; 0
    252c:	70 e0       	ldi	r23, 0x00	; 0
    252e:	80 91 1a 0b 	lds	r24, 0x0B1A	; 0x800b1a <Sema_threshold_set_temp_handle>
    2532:	90 91 1b 0b 	lds	r25, 0x0B1B	; 0x800b1b <Sema_threshold_set_temp_handle+0x1>
    2536:	88 c3       	rjmp	.+1808   	; 0x2c48 <xQueueGenericSend>
    2538:	08 95       	ret

0000253a <RTE_set_Threshold_sleep_temperature>:
    253a:	90 93 d7 0a 	sts	0x0AD7, r25	; 0x800ad7 <Threshold_sleep_temp+0x1>
    253e:	80 93 d6 0a 	sts	0x0AD6, r24	; 0x800ad6 <Threshold_sleep_temp>
    2542:	20 e0       	ldi	r18, 0x00	; 0
    2544:	40 e0       	ldi	r20, 0x00	; 0
    2546:	50 e0       	ldi	r21, 0x00	; 0
    2548:	60 e0       	ldi	r22, 0x00	; 0
    254a:	70 e0       	ldi	r23, 0x00	; 0
    254c:	80 91 f7 0a 	lds	r24, 0x0AF7	; 0x800af7 <Sema_threshold_sleep_temp_handle>
    2550:	90 91 f8 0a 	lds	r25, 0x0AF8	; 0x800af8 <Sema_threshold_sleep_temp_handle+0x1>
    2554:	79 c3       	rjmp	.+1778   	; 0x2c48 <xQueueGenericSend>
    2556:	08 95       	ret

00002558 <RTE_set_Positive_offset_temperature>:
    2558:	90 93 b4 0a 	sts	0x0AB4, r25	; 0x800ab4 <Positive_offset_temp+0x1>
    255c:	80 93 b3 0a 	sts	0x0AB3, r24	; 0x800ab3 <Positive_offset_temp>
    2560:	20 e0       	ldi	r18, 0x00	; 0
    2562:	40 e0       	ldi	r20, 0x00	; 0
    2564:	50 e0       	ldi	r21, 0x00	; 0
    2566:	60 e0       	ldi	r22, 0x00	; 0
    2568:	70 e0       	ldi	r23, 0x00	; 0
    256a:	80 91 d4 0a 	lds	r24, 0x0AD4	; 0x800ad4 <Sema_Positive_offset_temp_handle>
    256e:	90 91 d5 0a 	lds	r25, 0x0AD5	; 0x800ad5 <Sema_Positive_offset_temp_handle+0x1>
    2572:	6a c3       	rjmp	.+1748   	; 0x2c48 <xQueueGenericSend>
    2574:	08 95       	ret

00002576 <RTE_set_Negative_offset_temperature>:
    2576:	90 93 91 0a 	sts	0x0A91, r25	; 0x800a91 <Negative_offset_temp+0x1>
    257a:	80 93 90 0a 	sts	0x0A90, r24	; 0x800a90 <Negative_offset_temp>
    257e:	20 e0       	ldi	r18, 0x00	; 0
    2580:	40 e0       	ldi	r20, 0x00	; 0
    2582:	50 e0       	ldi	r21, 0x00	; 0
    2584:	60 e0       	ldi	r22, 0x00	; 0
    2586:	70 e0       	ldi	r23, 0x00	; 0
    2588:	80 91 b1 0a 	lds	r24, 0x0AB1	; 0x800ab1 <Sema_Negative_offset_temp_handle>
    258c:	90 91 b2 0a 	lds	r25, 0x0AB2	; 0x800ab2 <Sema_Negative_offset_temp_handle+0x1>
    2590:	5b c3       	rjmp	.+1718   	; 0x2c48 <xQueueGenericSend>
    2592:	08 95       	ret

00002594 <RTE_set_Current_temperature>:




void RTE_set_Current_temperature(uint16_t u16Currenttemp){
	Current_temperature = u16Currenttemp;
    2594:	90 93 8f 0a 	sts	0x0A8F, r25	; 0x800a8f <Current_temperature+0x1>
    2598:	80 93 8e 0a 	sts	0x0A8E, r24	; 0x800a8e <Current_temperature>
    259c:	08 95       	ret

0000259e <RTE_get_Current_temperature>:
}

uint16_t RTE_get_Current_temperature(void){
	return Current_temperature;
}
    259e:	80 91 8e 0a 	lds	r24, 0x0A8E	; 0x800a8e <Current_temperature>
    25a2:	90 91 8f 0a 	lds	r25, 0x0A8F	; 0x800a8f <Current_temperature+0x1>
    25a6:	08 95       	ret

000025a8 <vApplicationStackOverflowHook>:
	   This routine will never return.
	   This routine is referenced in the task.c file of FreeRTOS as an extern.
	\*---------------------------------------------------------------------------*/

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
	DDRB  |= _BV(DDB7);
    25a8:	27 9a       	sbi	0x04, 7	; 4
	PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    25aa:	2f 9a       	sbi	0x05, 7	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    25ac:	2f ef       	ldi	r18, 0xFF	; 255
    25ae:	87 ea       	ldi	r24, 0xA7	; 167
    25b0:	91 e6       	ldi	r25, 0x61	; 97
    25b2:	21 50       	subi	r18, 0x01	; 1
    25b4:	80 40       	sbci	r24, 0x00	; 0
    25b6:	90 40       	sbci	r25, 0x00	; 0
    25b8:	e1 f7       	brne	.-8      	; 0x25b2 <vApplicationStackOverflowHook+0xa>
    25ba:	00 c0       	rjmp	.+0      	; 0x25bc <vApplicationStackOverflowHook+0x14>
    25bc:	00 00       	nop
	for(;;)
	{
		_delay_ms(2000);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
		PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED slow blink.
    25be:	1f 9a       	sbi	0x03, 7	; 3
#elif defined(__AVR_ATmega32U4__) || defined(__AVR_ATmega16U4__) // assume we're using an Arduino Leonardo with 32u4
		PINC  |= _BV(PINC7);       // Main (red PC7) LED toggle. Main LED slow blink.

#endif

	}
    25c0:	f5 cf       	rjmp	.-22     	; 0x25ac <vApplicationStackOverflowHook+0x4>

000025c2 <vApplicationGetIdleTaskMemory>:
                                    configSTACK_DEPTH_TYPE *pulIdleTaskStackSize )
{
    static StaticTask_t xIdleTaskTCB;
    static StackType_t uxIdleTaskStack[ configMINIMAL_STACK_SIZE ];

    *ppxIdleTaskTCBBuffer = &xIdleTaskTCB;
    25c2:	24 e3       	ldi	r18, 0x34	; 52
    25c4:	3c e0       	ldi	r19, 0x0C	; 12
    25c6:	fc 01       	movw	r30, r24
    25c8:	31 83       	std	Z+1, r19	; 0x01
    25ca:	20 83       	st	Z, r18
    *ppxIdleTaskStackBuffer = uxIdleTaskStack;
    25cc:	8f ed       	ldi	r24, 0xDF	; 223
    25ce:	9b e0       	ldi	r25, 0x0B	; 11
    25d0:	fb 01       	movw	r30, r22
    25d2:	91 83       	std	Z+1, r25	; 0x01
    25d4:	80 83       	st	Z, r24
    *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
    25d6:	85 e5       	ldi	r24, 0x55	; 85
    25d8:	90 e0       	ldi	r25, 0x00	; 0
    25da:	fa 01       	movw	r30, r20
    25dc:	91 83       	std	Z+1, r25	; 0x01
    25de:	80 83       	st	Z, r24
    25e0:	08 95       	ret

000025e2 <vApplicationGetTimerTaskMemory>:
                                     configSTACK_DEPTH_TYPE *pulTimerTaskStackSize )
{
    static StaticTask_t xTimerTaskTCB;
    static StackType_t uxTimerTaskStack[ configTIMER_TASK_STACK_DEPTH ];

    *ppxTimerTaskTCBBuffer = &xTimerTaskTCB;
    25e2:	27 eb       	ldi	r18, 0xB7	; 183
    25e4:	3b e0       	ldi	r19, 0x0B	; 11
    25e6:	fc 01       	movw	r30, r24
    25e8:	31 83       	std	Z+1, r19	; 0x01
    25ea:	20 83       	st	Z, r18
    *ppxTimerTaskStackBuffer = uxTimerTaskStack;
    25ec:	82 e6       	ldi	r24, 0x62	; 98
    25ee:	9b e0       	ldi	r25, 0x0B	; 11
    25f0:	fb 01       	movw	r30, r22
    25f2:	91 83       	std	Z+1, r25	; 0x01
    25f4:	80 83       	st	Z, r24
    *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
    25f6:	85 e5       	ldi	r24, 0x55	; 85
    25f8:	90 e0       	ldi	r25, 0x00	; 0
    25fa:	fa 01       	movw	r30, r20
    25fc:	91 83       	std	Z+1, r25	; 0x01
    25fe:	80 83       	st	Z, r24
    2600:	08 95       	ret

00002602 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    2602:	fc 01       	movw	r30, r24
    /* The list structure contains a list item which is used to mark the
    end of the list.  To initialise the list the list end is inserted
    as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );            /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    2604:	03 96       	adiw	r24, 0x03	; 3
    2606:	92 83       	std	Z+2, r25	; 0x02
    2608:	81 83       	std	Z+1, r24	; 0x01

    /* The list end value is the highest possible value in the list to
    ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
    260a:	2f ef       	ldi	r18, 0xFF	; 255
    260c:	3f ef       	ldi	r19, 0xFF	; 255
    260e:	34 83       	std	Z+4, r19	; 0x04
    2610:	23 83       	std	Z+3, r18	; 0x03

    /* The list end next and previous pointers point to itself so we know
    when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );    /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    2612:	96 83       	std	Z+6, r25	; 0x06
    2614:	85 83       	std	Z+5, r24	; 0x05
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    2616:	90 87       	std	Z+8, r25	; 0x08
    2618:	87 83       	std	Z+7, r24	; 0x07

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    261a:	10 82       	st	Z, r1
    261c:	08 95       	ret

0000261e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
    261e:	fc 01       	movw	r30, r24
    2620:	11 86       	std	Z+9, r1	; 0x09
    2622:	10 86       	std	Z+8, r1	; 0x08
    2624:	08 95       	ret

00002626 <vListInsertEnd>:
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    2626:	cf 93       	push	r28
    2628:	df 93       	push	r29
    262a:	9c 01       	movw	r18, r24
    262c:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
    262e:	dc 01       	movw	r26, r24
    2630:	11 96       	adiw	r26, 0x01	; 1
    2632:	cd 91       	ld	r28, X+
    2634:	dc 91       	ld	r29, X
    2636:	12 97       	sbiw	r26, 0x02	; 2
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
    makes the new list item the last item to be removed by a call to
    listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
    2638:	d3 83       	std	Z+3, r29	; 0x03
    263a:	c2 83       	std	Z+2, r28	; 0x02
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    263c:	8c 81       	ldd	r24, Y+4	; 0x04
    263e:	9d 81       	ldd	r25, Y+5	; 0x05
    2640:	95 83       	std	Z+5, r25	; 0x05
    2642:	84 83       	std	Z+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
    2644:	8c 81       	ldd	r24, Y+4	; 0x04
    2646:	9d 81       	ldd	r25, Y+5	; 0x05
    2648:	dc 01       	movw	r26, r24
    264a:	13 96       	adiw	r26, 0x03	; 3
    264c:	7c 93       	st	X, r23
    264e:	6e 93       	st	-X, r22
    2650:	12 97       	sbiw	r26, 0x02	; 2
    pxIndex->pxPrevious = pxNewListItem;
    2652:	7d 83       	std	Y+5, r23	; 0x05
    2654:	6c 83       	std	Y+4, r22	; 0x04

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
    2656:	31 87       	std	Z+9, r19	; 0x09
    2658:	20 87       	std	Z+8, r18	; 0x08

    ( pxList->uxNumberOfItems )++;
    265a:	f9 01       	movw	r30, r18
    265c:	80 81       	ld	r24, Z
    265e:	8f 5f       	subi	r24, 0xFF	; 255
    2660:	80 83       	st	Z, r24
}
    2662:	df 91       	pop	r29
    2664:	cf 91       	pop	r28
    2666:	08 95       	ret

00002668 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    2668:	cf 93       	push	r28
    266a:	df 93       	push	r29
    266c:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    266e:	48 81       	ld	r20, Y
    2670:	59 81       	ldd	r21, Y+1	; 0x01
    new list item should be placed after it.  This ensures that TCBs which are
    stored in ready lists (all of which have the same xItemValue value) get a
    share of the CPU.  However, if the xItemValue is the same as the back marker
    the iteration loop below will not end.  Therefore the value is checked
    first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
    2672:	4f 3f       	cpi	r20, 0xFF	; 255
    2674:	2f ef       	ldi	r18, 0xFF	; 255
    2676:	52 07       	cpc	r21, r18
    2678:	21 f4       	brne	.+8      	; 0x2682 <vListInsert+0x1a>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
    267a:	fc 01       	movw	r30, r24
    267c:	a7 81       	ldd	r26, Z+7	; 0x07
    267e:	b0 85       	ldd	r27, Z+8	; 0x08
    2680:	0d c0       	rjmp	.+26     	; 0x269c <vListInsert+0x34>
            4) Using a queue or semaphore before it has been initialised or
               before the scheduler has been started (are interrupts firing
               before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
    2682:	dc 01       	movw	r26, r24
    2684:	13 96       	adiw	r26, 0x03	; 3
    2686:	01 c0       	rjmp	.+2      	; 0x268a <vListInsert+0x22>
    2688:	df 01       	movw	r26, r30
    268a:	12 96       	adiw	r26, 0x02	; 2
    268c:	ed 91       	ld	r30, X+
    268e:	fc 91       	ld	r31, X
    2690:	13 97       	sbiw	r26, 0x03	; 3
    2692:	20 81       	ld	r18, Z
    2694:	31 81       	ldd	r19, Z+1	; 0x01
    2696:	42 17       	cp	r20, r18
    2698:	53 07       	cpc	r21, r19
    269a:	b0 f7       	brcc	.-20     	; 0x2688 <vListInsert+0x20>
            /* There is nothing to do here, just iterating to the wanted
            insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
    269c:	12 96       	adiw	r26, 0x02	; 2
    269e:	ed 91       	ld	r30, X+
    26a0:	fc 91       	ld	r31, X
    26a2:	13 97       	sbiw	r26, 0x03	; 3
    26a4:	fb 83       	std	Y+3, r31	; 0x03
    26a6:	ea 83       	std	Y+2, r30	; 0x02
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    26a8:	d5 83       	std	Z+5, r29	; 0x05
    26aa:	c4 83       	std	Z+4, r28	; 0x04
    pxNewListItem->pxPrevious = pxIterator;
    26ac:	bd 83       	std	Y+5, r27	; 0x05
    26ae:	ac 83       	std	Y+4, r26	; 0x04
    pxIterator->pxNext = pxNewListItem;
    26b0:	13 96       	adiw	r26, 0x03	; 3
    26b2:	dc 93       	st	X, r29
    26b4:	ce 93       	st	-X, r28
    26b6:	12 97       	sbiw	r26, 0x02	; 2

    /* Remember which list the item is in.  This allows fast removal of the
    item later. */
    pxNewListItem->pxContainer = pxList;
    26b8:	99 87       	std	Y+9, r25	; 0x09
    26ba:	88 87       	std	Y+8, r24	; 0x08

    ( pxList->uxNumberOfItems )++;
    26bc:	fc 01       	movw	r30, r24
    26be:	20 81       	ld	r18, Z
    26c0:	2f 5f       	subi	r18, 0xFF	; 255
    26c2:	20 83       	st	Z, r18
}
    26c4:	df 91       	pop	r29
    26c6:	cf 91       	pop	r28
    26c8:	08 95       	ret

000026ca <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    26ca:	cf 93       	push	r28
    26cc:	df 93       	push	r29
    26ce:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
    26d0:	a0 85       	ldd	r26, Z+8	; 0x08
    26d2:	b1 85       	ldd	r27, Z+9	; 0x09

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    26d4:	c2 81       	ldd	r28, Z+2	; 0x02
    26d6:	d3 81       	ldd	r29, Z+3	; 0x03
    26d8:	84 81       	ldd	r24, Z+4	; 0x04
    26da:	95 81       	ldd	r25, Z+5	; 0x05
    26dc:	9d 83       	std	Y+5, r25	; 0x05
    26de:	8c 83       	std	Y+4, r24	; 0x04
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    26e0:	c4 81       	ldd	r28, Z+4	; 0x04
    26e2:	d5 81       	ldd	r29, Z+5	; 0x05
    26e4:	82 81       	ldd	r24, Z+2	; 0x02
    26e6:	93 81       	ldd	r25, Z+3	; 0x03
    26e8:	9b 83       	std	Y+3, r25	; 0x03
    26ea:	8a 83       	std	Y+2, r24	; 0x02

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
    26ec:	11 96       	adiw	r26, 0x01	; 1
    26ee:	cd 91       	ld	r28, X+
    26f0:	dc 91       	ld	r29, X
    26f2:	12 97       	sbiw	r26, 0x02	; 2
    26f4:	ce 17       	cp	r28, r30
    26f6:	df 07       	cpc	r29, r31
    26f8:	31 f4       	brne	.+12     	; 0x2706 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
    26fa:	8c 81       	ldd	r24, Y+4	; 0x04
    26fc:	9d 81       	ldd	r25, Y+5	; 0x05
    26fe:	12 96       	adiw	r26, 0x02	; 2
    2700:	9c 93       	st	X, r25
    2702:	8e 93       	st	-X, r24
    2704:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
    2706:	11 86       	std	Z+9, r1	; 0x09
    2708:	10 86       	std	Z+8, r1	; 0x08
    ( pxList->uxNumberOfItems )--;
    270a:	8c 91       	ld	r24, X
    270c:	81 50       	subi	r24, 0x01	; 1
    270e:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
    2710:	8c 91       	ld	r24, X
}
    2712:	df 91       	pop	r29
    2714:	cf 91       	pop	r28
    2716:	08 95       	ret

00002718 <pxPortInitialiseStack>:
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
    2718:	31 e1       	ldi	r19, 0x11	; 17
    271a:	fc 01       	movw	r30, r24
    271c:	30 83       	st	Z, r19
    271e:	31 97       	sbiw	r30, 0x01	; 1
    2720:	22 e2       	ldi	r18, 0x22	; 34
    2722:	20 83       	st	Z, r18
    2724:	31 97       	sbiw	r30, 0x01	; 1
    2726:	a3 e3       	ldi	r26, 0x33	; 51
    2728:	a0 83       	st	Z, r26
    272a:	31 97       	sbiw	r30, 0x01	; 1
    272c:	60 83       	st	Z, r22
    272e:	31 97       	sbiw	r30, 0x01	; 1
    2730:	70 83       	st	Z, r23
    2732:	31 97       	sbiw	r30, 0x01	; 1
    2734:	10 82       	st	Z, r1
    2736:	31 97       	sbiw	r30, 0x01	; 1
    2738:	10 82       	st	Z, r1
    273a:	31 97       	sbiw	r30, 0x01	; 1
    273c:	60 e8       	ldi	r22, 0x80	; 128
    273e:	60 83       	st	Z, r22
    2740:	31 97       	sbiw	r30, 0x01	; 1
    2742:	10 82       	st	Z, r1
    2744:	31 97       	sbiw	r30, 0x01	; 1
    2746:	10 82       	st	Z, r1
    2748:	31 97       	sbiw	r30, 0x01	; 1
    274a:	10 82       	st	Z, r1
    274c:	31 97       	sbiw	r30, 0x01	; 1
    274e:	62 e0       	ldi	r22, 0x02	; 2
    2750:	60 83       	st	Z, r22
    2752:	31 97       	sbiw	r30, 0x01	; 1
    2754:	63 e0       	ldi	r22, 0x03	; 3
    2756:	60 83       	st	Z, r22
    2758:	31 97       	sbiw	r30, 0x01	; 1
    275a:	64 e0       	ldi	r22, 0x04	; 4
    275c:	60 83       	st	Z, r22
    275e:	31 97       	sbiw	r30, 0x01	; 1
    2760:	65 e0       	ldi	r22, 0x05	; 5
    2762:	60 83       	st	Z, r22
    2764:	31 97       	sbiw	r30, 0x01	; 1
    2766:	66 e0       	ldi	r22, 0x06	; 6
    2768:	60 83       	st	Z, r22
    276a:	31 97       	sbiw	r30, 0x01	; 1
    276c:	67 e0       	ldi	r22, 0x07	; 7
    276e:	60 83       	st	Z, r22
    2770:	31 97       	sbiw	r30, 0x01	; 1
    2772:	68 e0       	ldi	r22, 0x08	; 8
    2774:	60 83       	st	Z, r22
    2776:	31 97       	sbiw	r30, 0x01	; 1
    2778:	69 e0       	ldi	r22, 0x09	; 9
    277a:	60 83       	st	Z, r22
    277c:	31 97       	sbiw	r30, 0x01	; 1
    277e:	60 e1       	ldi	r22, 0x10	; 16
    2780:	60 83       	st	Z, r22
    2782:	31 97       	sbiw	r30, 0x01	; 1
    2784:	30 83       	st	Z, r19
    2786:	31 97       	sbiw	r30, 0x01	; 1
    2788:	32 e1       	ldi	r19, 0x12	; 18
    278a:	30 83       	st	Z, r19
    278c:	31 97       	sbiw	r30, 0x01	; 1
    278e:	33 e1       	ldi	r19, 0x13	; 19
    2790:	30 83       	st	Z, r19
    2792:	31 97       	sbiw	r30, 0x01	; 1
    2794:	34 e1       	ldi	r19, 0x14	; 20
    2796:	30 83       	st	Z, r19
    2798:	31 97       	sbiw	r30, 0x01	; 1
    279a:	35 e1       	ldi	r19, 0x15	; 21
    279c:	30 83       	st	Z, r19
    279e:	31 97       	sbiw	r30, 0x01	; 1
    27a0:	36 e1       	ldi	r19, 0x16	; 22
    27a2:	30 83       	st	Z, r19
    27a4:	31 97       	sbiw	r30, 0x01	; 1
    27a6:	37 e1       	ldi	r19, 0x17	; 23
    27a8:	30 83       	st	Z, r19
    27aa:	31 97       	sbiw	r30, 0x01	; 1
    27ac:	38 e1       	ldi	r19, 0x18	; 24
    27ae:	30 83       	st	Z, r19
    27b0:	31 97       	sbiw	r30, 0x01	; 1
    27b2:	39 e1       	ldi	r19, 0x19	; 25
    27b4:	30 83       	st	Z, r19
    27b6:	31 97       	sbiw	r30, 0x01	; 1
    27b8:	30 e2       	ldi	r19, 0x20	; 32
    27ba:	30 83       	st	Z, r19
    27bc:	31 97       	sbiw	r30, 0x01	; 1
    27be:	31 e2       	ldi	r19, 0x21	; 33
    27c0:	30 83       	st	Z, r19
    27c2:	31 97       	sbiw	r30, 0x01	; 1
    27c4:	20 83       	st	Z, r18
    27c6:	31 97       	sbiw	r30, 0x01	; 1
    27c8:	23 e2       	ldi	r18, 0x23	; 35
    27ca:	20 83       	st	Z, r18
    27cc:	31 97       	sbiw	r30, 0x01	; 1
    27ce:	40 83       	st	Z, r20
    27d0:	31 97       	sbiw	r30, 0x01	; 1
    27d2:	50 83       	st	Z, r21
    27d4:	31 97       	sbiw	r30, 0x01	; 1
    27d6:	26 e2       	ldi	r18, 0x26	; 38
    27d8:	20 83       	st	Z, r18
    27da:	31 97       	sbiw	r30, 0x01	; 1
    27dc:	27 e2       	ldi	r18, 0x27	; 39
    27de:	20 83       	st	Z, r18
    27e0:	31 97       	sbiw	r30, 0x01	; 1
    27e2:	28 e2       	ldi	r18, 0x28	; 40
    27e4:	20 83       	st	Z, r18
    27e6:	31 97       	sbiw	r30, 0x01	; 1
    27e8:	29 e2       	ldi	r18, 0x29	; 41
    27ea:	20 83       	st	Z, r18
    27ec:	31 97       	sbiw	r30, 0x01	; 1
    27ee:	20 e3       	ldi	r18, 0x30	; 48
    27f0:	20 83       	st	Z, r18
    27f2:	31 97       	sbiw	r30, 0x01	; 1
    27f4:	21 e3       	ldi	r18, 0x31	; 49
    27f6:	20 83       	st	Z, r18
    27f8:	89 97       	sbiw	r24, 0x29	; 41
    27fa:	08 95       	ret

000027fc <xPortStartScheduler>:
    27fc:	a8 95       	wdr
    27fe:	90 ec       	ldi	r25, 0xC0	; 192
    2800:	88 e1       	ldi	r24, 0x18	; 24
    2802:	0f b6       	in	r0, 0x3f	; 63
    2804:	f8 94       	cli
    2806:	a8 95       	wdr
    2808:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
    280c:	0f be       	out	0x3f, r0	; 63
    280e:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
    2812:	a0 91 b7 0c 	lds	r26, 0x0CB7	; 0x800cb7 <pxCurrentTCB>
    2816:	b0 91 b8 0c 	lds	r27, 0x0CB8	; 0x800cb8 <pxCurrentTCB+0x1>
    281a:	cd 91       	ld	r28, X+
    281c:	cd bf       	out	0x3d, r28	; 61
    281e:	dd 91       	ld	r29, X+
    2820:	de bf       	out	0x3e, r29	; 62
    2822:	ff 91       	pop	r31
    2824:	ef 91       	pop	r30
    2826:	df 91       	pop	r29
    2828:	cf 91       	pop	r28
    282a:	bf 91       	pop	r27
    282c:	af 91       	pop	r26
    282e:	9f 91       	pop	r25
    2830:	8f 91       	pop	r24
    2832:	7f 91       	pop	r23
    2834:	6f 91       	pop	r22
    2836:	5f 91       	pop	r21
    2838:	4f 91       	pop	r20
    283a:	3f 91       	pop	r19
    283c:	2f 91       	pop	r18
    283e:	1f 91       	pop	r17
    2840:	0f 91       	pop	r16
    2842:	ff 90       	pop	r15
    2844:	ef 90       	pop	r14
    2846:	df 90       	pop	r13
    2848:	cf 90       	pop	r12
    284a:	bf 90       	pop	r11
    284c:	af 90       	pop	r10
    284e:	9f 90       	pop	r9
    2850:	8f 90       	pop	r8
    2852:	7f 90       	pop	r7
    2854:	6f 90       	pop	r6
    2856:	5f 90       	pop	r5
    2858:	4f 90       	pop	r4
    285a:	3f 90       	pop	r3
    285c:	2f 90       	pop	r2
    285e:	1f 90       	pop	r1
    2860:	0f 90       	pop	r0
    2862:	0c be       	out	0x3c, r0	; 60
    2864:	0f 90       	pop	r0
    2866:	0b be       	out	0x3b, r0	; 59
    2868:	0f 90       	pop	r0
    286a:	0f be       	out	0x3f, r0	; 63
    286c:	0f 90       	pop	r0
    286e:	08 95       	ret
    2870:	81 e0       	ldi	r24, 0x01	; 1
    2872:	08 95       	ret

00002874 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    2874:	0f 92       	push	r0
    2876:	0f b6       	in	r0, 0x3f	; 63
    2878:	f8 94       	cli
    287a:	0f 92       	push	r0
    287c:	0b b6       	in	r0, 0x3b	; 59
    287e:	0f 92       	push	r0
    2880:	0c b6       	in	r0, 0x3c	; 60
    2882:	0f 92       	push	r0
    2884:	1f 92       	push	r1
    2886:	11 24       	eor	r1, r1
    2888:	2f 92       	push	r2
    288a:	3f 92       	push	r3
    288c:	4f 92       	push	r4
    288e:	5f 92       	push	r5
    2890:	6f 92       	push	r6
    2892:	7f 92       	push	r7
    2894:	8f 92       	push	r8
    2896:	9f 92       	push	r9
    2898:	af 92       	push	r10
    289a:	bf 92       	push	r11
    289c:	cf 92       	push	r12
    289e:	df 92       	push	r13
    28a0:	ef 92       	push	r14
    28a2:	ff 92       	push	r15
    28a4:	0f 93       	push	r16
    28a6:	1f 93       	push	r17
    28a8:	2f 93       	push	r18
    28aa:	3f 93       	push	r19
    28ac:	4f 93       	push	r20
    28ae:	5f 93       	push	r21
    28b0:	6f 93       	push	r22
    28b2:	7f 93       	push	r23
    28b4:	8f 93       	push	r24
    28b6:	9f 93       	push	r25
    28b8:	af 93       	push	r26
    28ba:	bf 93       	push	r27
    28bc:	cf 93       	push	r28
    28be:	df 93       	push	r29
    28c0:	ef 93       	push	r30
    28c2:	ff 93       	push	r31
    28c4:	a0 91 b7 0c 	lds	r26, 0x0CB7	; 0x800cb7 <pxCurrentTCB>
    28c8:	b0 91 b8 0c 	lds	r27, 0x0CB8	; 0x800cb8 <pxCurrentTCB+0x1>
    28cc:	0d b6       	in	r0, 0x3d	; 61
    28ce:	0d 92       	st	X+, r0
    28d0:	0e b6       	in	r0, 0x3e	; 62
    28d2:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    28d4:	d5 d6       	rcall	.+3498   	; 0x3680 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    28d6:	a0 91 b7 0c 	lds	r26, 0x0CB7	; 0x800cb7 <pxCurrentTCB>
    28da:	b0 91 b8 0c 	lds	r27, 0x0CB8	; 0x800cb8 <pxCurrentTCB+0x1>
    28de:	cd 91       	ld	r28, X+
    28e0:	cd bf       	out	0x3d, r28	; 61
    28e2:	dd 91       	ld	r29, X+
    28e4:	de bf       	out	0x3e, r29	; 62
    28e6:	ff 91       	pop	r31
    28e8:	ef 91       	pop	r30
    28ea:	df 91       	pop	r29
    28ec:	cf 91       	pop	r28
    28ee:	bf 91       	pop	r27
    28f0:	af 91       	pop	r26
    28f2:	9f 91       	pop	r25
    28f4:	8f 91       	pop	r24
    28f6:	7f 91       	pop	r23
    28f8:	6f 91       	pop	r22
    28fa:	5f 91       	pop	r21
    28fc:	4f 91       	pop	r20
    28fe:	3f 91       	pop	r19
    2900:	2f 91       	pop	r18
    2902:	1f 91       	pop	r17
    2904:	0f 91       	pop	r16
    2906:	ff 90       	pop	r15
    2908:	ef 90       	pop	r14
    290a:	df 90       	pop	r13
    290c:	cf 90       	pop	r12
    290e:	bf 90       	pop	r11
    2910:	af 90       	pop	r10
    2912:	9f 90       	pop	r9
    2914:	8f 90       	pop	r8
    2916:	7f 90       	pop	r7
    2918:	6f 90       	pop	r6
    291a:	5f 90       	pop	r5
    291c:	4f 90       	pop	r4
    291e:	3f 90       	pop	r3
    2920:	2f 90       	pop	r2
    2922:	1f 90       	pop	r1
    2924:	0f 90       	pop	r0
    2926:	0c be       	out	0x3c, r0	; 60
    2928:	0f 90       	pop	r0
    292a:	0b be       	out	0x3b, r0	; 59
    292c:	0f 90       	pop	r0
    292e:	0f be       	out	0x3f, r0	; 63
    2930:	0f 90       	pop	r0

	__asm__ __volatile__ ( "ret" );
    2932:	08 95       	ret

00002934 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    2934:	0f 92       	push	r0
    2936:	0f b6       	in	r0, 0x3f	; 63
    2938:	f8 94       	cli
    293a:	0f 92       	push	r0
    293c:	0b b6       	in	r0, 0x3b	; 59
    293e:	0f 92       	push	r0
    2940:	0c b6       	in	r0, 0x3c	; 60
    2942:	0f 92       	push	r0
    2944:	1f 92       	push	r1
    2946:	11 24       	eor	r1, r1
    2948:	2f 92       	push	r2
    294a:	3f 92       	push	r3
    294c:	4f 92       	push	r4
    294e:	5f 92       	push	r5
    2950:	6f 92       	push	r6
    2952:	7f 92       	push	r7
    2954:	8f 92       	push	r8
    2956:	9f 92       	push	r9
    2958:	af 92       	push	r10
    295a:	bf 92       	push	r11
    295c:	cf 92       	push	r12
    295e:	df 92       	push	r13
    2960:	ef 92       	push	r14
    2962:	ff 92       	push	r15
    2964:	0f 93       	push	r16
    2966:	1f 93       	push	r17
    2968:	2f 93       	push	r18
    296a:	3f 93       	push	r19
    296c:	4f 93       	push	r20
    296e:	5f 93       	push	r21
    2970:	6f 93       	push	r22
    2972:	7f 93       	push	r23
    2974:	8f 93       	push	r24
    2976:	9f 93       	push	r25
    2978:	af 93       	push	r26
    297a:	bf 93       	push	r27
    297c:	cf 93       	push	r28
    297e:	df 93       	push	r29
    2980:	ef 93       	push	r30
    2982:	ff 93       	push	r31
    2984:	a0 91 b7 0c 	lds	r26, 0x0CB7	; 0x800cb7 <pxCurrentTCB>
    2988:	b0 91 b8 0c 	lds	r27, 0x0CB8	; 0x800cb8 <pxCurrentTCB+0x1>
    298c:	0d b6       	in	r0, 0x3d	; 61
    298e:	0d 92       	st	X+, r0
    2990:	0e b6       	in	r0, 0x3e	; 62
    2992:	0d 92       	st	X+, r0

	sleep_reset();		//	 reset the sleep_mode() faster than sleep_disable();
    2994:	13 be       	out	0x33, r1	; 51

	if( xTaskIncrementTick() != pdFALSE )
    2996:	34 d5       	rcall	.+2664   	; 0x3400 <xTaskIncrementTick>
    2998:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
    299a:	72 d6       	rcall	.+3300   	; 0x3680 <vTaskSwitchContext>
	}

	portRESTORE_CONTEXT();
    299c:	a0 91 b7 0c 	lds	r26, 0x0CB7	; 0x800cb7 <pxCurrentTCB>
    29a0:	b0 91 b8 0c 	lds	r27, 0x0CB8	; 0x800cb8 <pxCurrentTCB+0x1>
    29a4:	cd 91       	ld	r28, X+
    29a6:	cd bf       	out	0x3d, r28	; 61
    29a8:	dd 91       	ld	r29, X+
    29aa:	de bf       	out	0x3e, r29	; 62
    29ac:	ff 91       	pop	r31
    29ae:	ef 91       	pop	r30
    29b0:	df 91       	pop	r29
    29b2:	cf 91       	pop	r28
    29b4:	bf 91       	pop	r27
    29b6:	af 91       	pop	r26
    29b8:	9f 91       	pop	r25
    29ba:	8f 91       	pop	r24
    29bc:	7f 91       	pop	r23
    29be:	6f 91       	pop	r22
    29c0:	5f 91       	pop	r21
    29c2:	4f 91       	pop	r20
    29c4:	3f 91       	pop	r19
    29c6:	2f 91       	pop	r18
    29c8:	1f 91       	pop	r17
    29ca:	0f 91       	pop	r16
    29cc:	ff 90       	pop	r15
    29ce:	ef 90       	pop	r14
    29d0:	df 90       	pop	r13
    29d2:	cf 90       	pop	r12
    29d4:	bf 90       	pop	r11
    29d6:	af 90       	pop	r10
    29d8:	9f 90       	pop	r9
    29da:	8f 90       	pop	r8
    29dc:	7f 90       	pop	r7
    29de:	6f 90       	pop	r6
    29e0:	5f 90       	pop	r5
    29e2:	4f 90       	pop	r4
    29e4:	3f 90       	pop	r3
    29e6:	2f 90       	pop	r2
    29e8:	1f 90       	pop	r1
    29ea:	0f 90       	pop	r0
    29ec:	0c be       	out	0x3c, r0	; 60
    29ee:	0f 90       	pop	r0
    29f0:	0b be       	out	0x3b, r0	; 59
    29f2:	0f 90       	pop	r0
    29f4:	0f be       	out	0x3f, r0	; 63
    29f6:	0f 90       	pop	r0

	__asm__ __volatile__ ( "ret" );
    29f8:	08 95       	ret

000029fa <__vector_12>:
	 */
//	ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
	ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
	ISR(portSCHEDULER_ISR)
	{
		vPortYieldFromTick();
    29fa:	9c df       	rcall	.-200    	; 0x2934 <vPortYieldFromTick>
		__asm__ __volatile__ ( "reti" );
    29fc:	18 95       	reti

000029fe <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    29fe:	0f b6       	in	r0, 0x3f	; 63
    2a00:	f8 94       	cli
    2a02:	0f 92       	push	r0
    2a04:	fc 01       	movw	r30, r24
    2a06:	92 8d       	ldd	r25, Z+26	; 0x1a
    2a08:	0f 90       	pop	r0
    2a0a:	0f be       	out	0x3f, r0	; 63
    2a0c:	81 e0       	ldi	r24, 0x01	; 1
    2a0e:	91 11       	cpse	r25, r1
    2a10:	80 e0       	ldi	r24, 0x00	; 0
    2a12:	08 95       	ret

00002a14 <prvCopyDataToQueue>:
    2a14:	0f 93       	push	r16
    2a16:	1f 93       	push	r17
    2a18:	cf 93       	push	r28
    2a1a:	df 93       	push	r29
    2a1c:	ec 01       	movw	r28, r24
    2a1e:	04 2f       	mov	r16, r20
    2a20:	1a 8d       	ldd	r17, Y+26	; 0x1a
    2a22:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2a24:	81 11       	cpse	r24, r1
    2a26:	0b c0       	rjmp	.+22     	; 0x2a3e <prvCopyDataToQueue+0x2a>
    2a28:	88 81       	ld	r24, Y
    2a2a:	99 81       	ldd	r25, Y+1	; 0x01
    2a2c:	89 2b       	or	r24, r25
    2a2e:	09 f0       	breq	.+2      	; 0x2a32 <prvCopyDataToQueue+0x1e>
    2a30:	43 c0       	rjmp	.+134    	; 0x2ab8 <prvCopyDataToQueue+0xa4>
    2a32:	8c 81       	ldd	r24, Y+4	; 0x04
    2a34:	9d 81       	ldd	r25, Y+5	; 0x05
    2a36:	d2 d7       	rcall	.+4004   	; 0x39dc <xTaskPriorityDisinherit>
    2a38:	1d 82       	std	Y+5, r1	; 0x05
    2a3a:	1c 82       	std	Y+4, r1	; 0x04
    2a3c:	44 c0       	rjmp	.+136    	; 0x2ac6 <prvCopyDataToQueue+0xb2>
    2a3e:	41 11       	cpse	r20, r1
    2a40:	18 c0       	rjmp	.+48     	; 0x2a72 <prvCopyDataToQueue+0x5e>
    2a42:	48 2f       	mov	r20, r24
    2a44:	50 e0       	ldi	r21, 0x00	; 0
    2a46:	8a 81       	ldd	r24, Y+2	; 0x02
    2a48:	9b 81       	ldd	r25, Y+3	; 0x03
    2a4a:	0e 94 a5 20 	call	0x414a	; 0x414a <memcpy>
    2a4e:	2c 8d       	ldd	r18, Y+28	; 0x1c
    2a50:	8a 81       	ldd	r24, Y+2	; 0x02
    2a52:	9b 81       	ldd	r25, Y+3	; 0x03
    2a54:	82 0f       	add	r24, r18
    2a56:	91 1d       	adc	r25, r1
    2a58:	9b 83       	std	Y+3, r25	; 0x03
    2a5a:	8a 83       	std	Y+2, r24	; 0x02
    2a5c:	2c 81       	ldd	r18, Y+4	; 0x04
    2a5e:	3d 81       	ldd	r19, Y+5	; 0x05
    2a60:	82 17       	cp	r24, r18
    2a62:	93 07       	cpc	r25, r19
    2a64:	58 f1       	brcs	.+86     	; 0x2abc <prvCopyDataToQueue+0xa8>
    2a66:	88 81       	ld	r24, Y
    2a68:	99 81       	ldd	r25, Y+1	; 0x01
    2a6a:	9b 83       	std	Y+3, r25	; 0x03
    2a6c:	8a 83       	std	Y+2, r24	; 0x02
    2a6e:	80 e0       	ldi	r24, 0x00	; 0
    2a70:	2a c0       	rjmp	.+84     	; 0x2ac6 <prvCopyDataToQueue+0xb2>
    2a72:	48 2f       	mov	r20, r24
    2a74:	50 e0       	ldi	r21, 0x00	; 0
    2a76:	8e 81       	ldd	r24, Y+6	; 0x06
    2a78:	9f 81       	ldd	r25, Y+7	; 0x07
    2a7a:	0e 94 a5 20 	call	0x414a	; 0x414a <memcpy>
    2a7e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2a80:	90 e0       	ldi	r25, 0x00	; 0
    2a82:	91 95       	neg	r25
    2a84:	81 95       	neg	r24
    2a86:	91 09       	sbc	r25, r1
    2a88:	2e 81       	ldd	r18, Y+6	; 0x06
    2a8a:	3f 81       	ldd	r19, Y+7	; 0x07
    2a8c:	28 0f       	add	r18, r24
    2a8e:	39 1f       	adc	r19, r25
    2a90:	3f 83       	std	Y+7, r19	; 0x07
    2a92:	2e 83       	std	Y+6, r18	; 0x06
    2a94:	48 81       	ld	r20, Y
    2a96:	59 81       	ldd	r21, Y+1	; 0x01
    2a98:	24 17       	cp	r18, r20
    2a9a:	35 07       	cpc	r19, r21
    2a9c:	30 f4       	brcc	.+12     	; 0x2aaa <prvCopyDataToQueue+0x96>
    2a9e:	2c 81       	ldd	r18, Y+4	; 0x04
    2aa0:	3d 81       	ldd	r19, Y+5	; 0x05
    2aa2:	82 0f       	add	r24, r18
    2aa4:	93 1f       	adc	r25, r19
    2aa6:	9f 83       	std	Y+7, r25	; 0x07
    2aa8:	8e 83       	std	Y+6, r24	; 0x06
    2aaa:	02 30       	cpi	r16, 0x02	; 2
    2aac:	49 f4       	brne	.+18     	; 0x2ac0 <prvCopyDataToQueue+0xac>
    2aae:	11 23       	and	r17, r17
    2ab0:	49 f0       	breq	.+18     	; 0x2ac4 <prvCopyDataToQueue+0xb0>
    2ab2:	11 50       	subi	r17, 0x01	; 1
    2ab4:	80 e0       	ldi	r24, 0x00	; 0
    2ab6:	07 c0       	rjmp	.+14     	; 0x2ac6 <prvCopyDataToQueue+0xb2>
    2ab8:	80 e0       	ldi	r24, 0x00	; 0
    2aba:	05 c0       	rjmp	.+10     	; 0x2ac6 <prvCopyDataToQueue+0xb2>
    2abc:	80 e0       	ldi	r24, 0x00	; 0
    2abe:	03 c0       	rjmp	.+6      	; 0x2ac6 <prvCopyDataToQueue+0xb2>
    2ac0:	80 e0       	ldi	r24, 0x00	; 0
    2ac2:	01 c0       	rjmp	.+2      	; 0x2ac6 <prvCopyDataToQueue+0xb2>
    2ac4:	80 e0       	ldi	r24, 0x00	; 0
    2ac6:	1f 5f       	subi	r17, 0xFF	; 255
    2ac8:	1a 8f       	std	Y+26, r17	; 0x1a
    2aca:	df 91       	pop	r29
    2acc:	cf 91       	pop	r28
    2ace:	1f 91       	pop	r17
    2ad0:	0f 91       	pop	r16
    2ad2:	08 95       	ret

00002ad4 <prvCopyDataFromQueue>:
    2ad4:	fc 01       	movw	r30, r24
    2ad6:	44 8d       	ldd	r20, Z+28	; 0x1c
    2ad8:	44 23       	and	r20, r20
    2ada:	a9 f0       	breq	.+42     	; 0x2b06 <prvCopyDataFromQueue+0x32>
    2adc:	50 e0       	ldi	r21, 0x00	; 0
    2ade:	26 81       	ldd	r18, Z+6	; 0x06
    2ae0:	37 81       	ldd	r19, Z+7	; 0x07
    2ae2:	24 0f       	add	r18, r20
    2ae4:	35 1f       	adc	r19, r21
    2ae6:	37 83       	std	Z+7, r19	; 0x07
    2ae8:	26 83       	std	Z+6, r18	; 0x06
    2aea:	84 81       	ldd	r24, Z+4	; 0x04
    2aec:	95 81       	ldd	r25, Z+5	; 0x05
    2aee:	28 17       	cp	r18, r24
    2af0:	39 07       	cpc	r19, r25
    2af2:	20 f0       	brcs	.+8      	; 0x2afc <prvCopyDataFromQueue+0x28>
    2af4:	80 81       	ld	r24, Z
    2af6:	91 81       	ldd	r25, Z+1	; 0x01
    2af8:	97 83       	std	Z+7, r25	; 0x07
    2afa:	86 83       	std	Z+6, r24	; 0x06
    2afc:	cb 01       	movw	r24, r22
    2afe:	66 81       	ldd	r22, Z+6	; 0x06
    2b00:	77 81       	ldd	r23, Z+7	; 0x07
    2b02:	0c 94 a5 20 	jmp	0x414a	; 0x414a <memcpy>
    2b06:	08 95       	ret

00002b08 <prvUnlockQueue>:
    2b08:	ef 92       	push	r14
    2b0a:	ff 92       	push	r15
    2b0c:	0f 93       	push	r16
    2b0e:	1f 93       	push	r17
    2b10:	cf 93       	push	r28
    2b12:	8c 01       	movw	r16, r24
    2b14:	0f b6       	in	r0, 0x3f	; 63
    2b16:	f8 94       	cli
    2b18:	0f 92       	push	r0
    2b1a:	fc 01       	movw	r30, r24
    2b1c:	c6 8d       	ldd	r28, Z+30	; 0x1e
    2b1e:	1c 16       	cp	r1, r28
    2b20:	9c f4       	brge	.+38     	; 0x2b48 <prvUnlockQueue+0x40>
    2b22:	81 89       	ldd	r24, Z+17	; 0x11
    2b24:	81 11       	cpse	r24, r1
    2b26:	06 c0       	rjmp	.+12     	; 0x2b34 <prvUnlockQueue+0x2c>
    2b28:	0f c0       	rjmp	.+30     	; 0x2b48 <prvUnlockQueue+0x40>
    2b2a:	f8 01       	movw	r30, r16
    2b2c:	91 89       	ldd	r25, Z+17	; 0x11
    2b2e:	91 11       	cpse	r25, r1
    2b30:	05 c0       	rjmp	.+10     	; 0x2b3c <prvUnlockQueue+0x34>
    2b32:	0a c0       	rjmp	.+20     	; 0x2b48 <prvUnlockQueue+0x40>
    2b34:	78 01       	movw	r14, r16
    2b36:	f1 e1       	ldi	r31, 0x11	; 17
    2b38:	ef 0e       	add	r14, r31
    2b3a:	f1 1c       	adc	r15, r1
    2b3c:	c7 01       	movw	r24, r14
    2b3e:	4c d6       	rcall	.+3224   	; 0x37d8 <xTaskRemoveFromEventList>
    2b40:	81 11       	cpse	r24, r1
    2b42:	c8 d6       	rcall	.+3472   	; 0x38d4 <vTaskMissedYield>
    2b44:	c1 50       	subi	r28, 0x01	; 1
    2b46:	89 f7       	brne	.-30     	; 0x2b2a <prvUnlockQueue+0x22>
    2b48:	8f ef       	ldi	r24, 0xFF	; 255
    2b4a:	f8 01       	movw	r30, r16
    2b4c:	86 8f       	std	Z+30, r24	; 0x1e
    2b4e:	0f 90       	pop	r0
    2b50:	0f be       	out	0x3f, r0	; 63
    2b52:	0f b6       	in	r0, 0x3f	; 63
    2b54:	f8 94       	cli
    2b56:	0f 92       	push	r0
    2b58:	c5 8d       	ldd	r28, Z+29	; 0x1d
    2b5a:	1c 16       	cp	r1, r28
    2b5c:	9c f4       	brge	.+38     	; 0x2b84 <prvUnlockQueue+0x7c>
    2b5e:	80 85       	ldd	r24, Z+8	; 0x08
    2b60:	81 11       	cpse	r24, r1
    2b62:	06 c0       	rjmp	.+12     	; 0x2b70 <prvUnlockQueue+0x68>
    2b64:	0f c0       	rjmp	.+30     	; 0x2b84 <prvUnlockQueue+0x7c>
    2b66:	f8 01       	movw	r30, r16
    2b68:	90 85       	ldd	r25, Z+8	; 0x08
    2b6a:	91 11       	cpse	r25, r1
    2b6c:	05 c0       	rjmp	.+10     	; 0x2b78 <prvUnlockQueue+0x70>
    2b6e:	0a c0       	rjmp	.+20     	; 0x2b84 <prvUnlockQueue+0x7c>
    2b70:	78 01       	movw	r14, r16
    2b72:	f8 e0       	ldi	r31, 0x08	; 8
    2b74:	ef 0e       	add	r14, r31
    2b76:	f1 1c       	adc	r15, r1
    2b78:	c7 01       	movw	r24, r14
    2b7a:	2e d6       	rcall	.+3164   	; 0x37d8 <xTaskRemoveFromEventList>
    2b7c:	81 11       	cpse	r24, r1
    2b7e:	aa d6       	rcall	.+3412   	; 0x38d4 <vTaskMissedYield>
    2b80:	c1 50       	subi	r28, 0x01	; 1
    2b82:	89 f7       	brne	.-30     	; 0x2b66 <prvUnlockQueue+0x5e>
    2b84:	8f ef       	ldi	r24, 0xFF	; 255
    2b86:	f8 01       	movw	r30, r16
    2b88:	85 8f       	std	Z+29, r24	; 0x1d
    2b8a:	0f 90       	pop	r0
    2b8c:	0f be       	out	0x3f, r0	; 63
    2b8e:	cf 91       	pop	r28
    2b90:	1f 91       	pop	r17
    2b92:	0f 91       	pop	r16
    2b94:	ff 90       	pop	r15
    2b96:	ef 90       	pop	r14
    2b98:	08 95       	ret

00002b9a <xQueueGenericReset>:
    2b9a:	cf 93       	push	r28
    2b9c:	df 93       	push	r29
    2b9e:	ec 01       	movw	r28, r24
    2ba0:	0f b6       	in	r0, 0x3f	; 63
    2ba2:	f8 94       	cli
    2ba4:	0f 92       	push	r0
    2ba6:	e8 81       	ld	r30, Y
    2ba8:	f9 81       	ldd	r31, Y+1	; 0x01
    2baa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2bac:	2c 8d       	ldd	r18, Y+28	; 0x1c
    2bae:	90 e0       	ldi	r25, 0x00	; 0
    2bb0:	30 e0       	ldi	r19, 0x00	; 0
    2bb2:	82 9f       	mul	r24, r18
    2bb4:	a0 01       	movw	r20, r0
    2bb6:	83 9f       	mul	r24, r19
    2bb8:	50 0d       	add	r21, r0
    2bba:	92 9f       	mul	r25, r18
    2bbc:	50 0d       	add	r21, r0
    2bbe:	11 24       	eor	r1, r1
    2bc0:	4e 0f       	add	r20, r30
    2bc2:	5f 1f       	adc	r21, r31
    2bc4:	5d 83       	std	Y+5, r21	; 0x05
    2bc6:	4c 83       	std	Y+4, r20	; 0x04
    2bc8:	1a 8e       	std	Y+26, r1	; 0x1a
    2bca:	fb 83       	std	Y+3, r31	; 0x03
    2bcc:	ea 83       	std	Y+2, r30	; 0x02
    2bce:	01 97       	sbiw	r24, 0x01	; 1
    2bd0:	82 9f       	mul	r24, r18
    2bd2:	a0 01       	movw	r20, r0
    2bd4:	83 9f       	mul	r24, r19
    2bd6:	50 0d       	add	r21, r0
    2bd8:	92 9f       	mul	r25, r18
    2bda:	50 0d       	add	r21, r0
    2bdc:	11 24       	eor	r1, r1
    2bde:	cf 01       	movw	r24, r30
    2be0:	84 0f       	add	r24, r20
    2be2:	95 1f       	adc	r25, r21
    2be4:	9f 83       	std	Y+7, r25	; 0x07
    2be6:	8e 83       	std	Y+6, r24	; 0x06
    2be8:	8f ef       	ldi	r24, 0xFF	; 255
    2bea:	8d 8f       	std	Y+29, r24	; 0x1d
    2bec:	8e 8f       	std	Y+30, r24	; 0x1e
    2bee:	61 11       	cpse	r22, r1
    2bf0:	0a c0       	rjmp	.+20     	; 0x2c06 <xQueueGenericReset+0x6c>
    2bf2:	88 85       	ldd	r24, Y+8	; 0x08
    2bf4:	88 23       	and	r24, r24
    2bf6:	69 f0       	breq	.+26     	; 0x2c12 <xQueueGenericReset+0x78>
    2bf8:	ce 01       	movw	r24, r28
    2bfa:	08 96       	adiw	r24, 0x08	; 8
    2bfc:	ed d5       	rcall	.+3034   	; 0x37d8 <xTaskRemoveFromEventList>
    2bfe:	88 23       	and	r24, r24
    2c00:	41 f0       	breq	.+16     	; 0x2c12 <xQueueGenericReset+0x78>
    2c02:	38 de       	rcall	.-912    	; 0x2874 <vPortYield>
    2c04:	06 c0       	rjmp	.+12     	; 0x2c12 <xQueueGenericReset+0x78>
    2c06:	ce 01       	movw	r24, r28
    2c08:	08 96       	adiw	r24, 0x08	; 8
    2c0a:	fb dc       	rcall	.-1546   	; 0x2602 <vListInitialise>
    2c0c:	ce 01       	movw	r24, r28
    2c0e:	41 96       	adiw	r24, 0x11	; 17
    2c10:	f8 dc       	rcall	.-1552   	; 0x2602 <vListInitialise>
    2c12:	0f 90       	pop	r0
    2c14:	0f be       	out	0x3f, r0	; 63
    2c16:	81 e0       	ldi	r24, 0x01	; 1
    2c18:	df 91       	pop	r29
    2c1a:	cf 91       	pop	r28
    2c1c:	08 95       	ret

00002c1e <xQueueGenericCreateStatic>:
    2c1e:	cf 93       	push	r28
    2c20:	df 93       	push	r29
    2c22:	e9 01       	movw	r28, r18
    2c24:	20 97       	sbiw	r28, 0x00	; 0
    2c26:	61 f0       	breq	.+24     	; 0x2c40 <xQueueGenericCreateStatic+0x22>
    2c28:	61 11       	cpse	r22, r1
    2c2a:	03 c0       	rjmp	.+6      	; 0x2c32 <xQueueGenericCreateStatic+0x14>
    2c2c:	39 83       	std	Y+1, r19	; 0x01
    2c2e:	28 83       	st	Y, r18
    2c30:	02 c0       	rjmp	.+4      	; 0x2c36 <xQueueGenericCreateStatic+0x18>
    2c32:	59 83       	std	Y+1, r21	; 0x01
    2c34:	48 83       	st	Y, r20
    2c36:	8b 8f       	std	Y+27, r24	; 0x1b
    2c38:	6c 8f       	std	Y+28, r22	; 0x1c
    2c3a:	61 e0       	ldi	r22, 0x01	; 1
    2c3c:	ce 01       	movw	r24, r28
    2c3e:	ad df       	rcall	.-166    	; 0x2b9a <xQueueGenericReset>
    2c40:	ce 01       	movw	r24, r28
    2c42:	df 91       	pop	r29
    2c44:	cf 91       	pop	r28
    2c46:	08 95       	ret

00002c48 <xQueueGenericSend>:
    2c48:	9f 92       	push	r9
    2c4a:	af 92       	push	r10
    2c4c:	bf 92       	push	r11
    2c4e:	cf 92       	push	r12
    2c50:	df 92       	push	r13
    2c52:	ef 92       	push	r14
    2c54:	ff 92       	push	r15
    2c56:	0f 93       	push	r16
    2c58:	1f 93       	push	r17
    2c5a:	cf 93       	push	r28
    2c5c:	df 93       	push	r29
    2c5e:	00 d0       	rcall	.+0      	; 0x2c60 <xQueueGenericSend+0x18>
    2c60:	1f 92       	push	r1
    2c62:	1f 92       	push	r1
    2c64:	cd b7       	in	r28, 0x3d	; 61
    2c66:	de b7       	in	r29, 0x3e	; 62
    2c68:	8c 01       	movw	r16, r24
    2c6a:	6b 01       	movw	r12, r22
    2c6c:	5d 83       	std	Y+5, r21	; 0x05
    2c6e:	4c 83       	std	Y+4, r20	; 0x04
    2c70:	a2 2e       	mov	r10, r18
    2c72:	b1 2c       	mov	r11, r1
    2c74:	99 24       	eor	r9, r9
    2c76:	93 94       	inc	r9
    2c78:	7c 01       	movw	r14, r24
    2c7a:	88 e0       	ldi	r24, 0x08	; 8
    2c7c:	e8 0e       	add	r14, r24
    2c7e:	f1 1c       	adc	r15, r1
    2c80:	0f b6       	in	r0, 0x3f	; 63
    2c82:	f8 94       	cli
    2c84:	0f 92       	push	r0
    2c86:	f8 01       	movw	r30, r16
    2c88:	32 8d       	ldd	r19, Z+26	; 0x1a
    2c8a:	93 8d       	ldd	r25, Z+27	; 0x1b
    2c8c:	39 17       	cp	r19, r25
    2c8e:	18 f0       	brcs	.+6      	; 0x2c96 <xQueueGenericSend+0x4e>
    2c90:	f2 e0       	ldi	r31, 0x02	; 2
    2c92:	af 12       	cpse	r10, r31
    2c94:	15 c0       	rjmp	.+42     	; 0x2cc0 <xQueueGenericSend+0x78>
    2c96:	4a 2d       	mov	r20, r10
    2c98:	b6 01       	movw	r22, r12
    2c9a:	c8 01       	movw	r24, r16
    2c9c:	bb de       	rcall	.-650    	; 0x2a14 <prvCopyDataToQueue>
    2c9e:	f8 01       	movw	r30, r16
    2ca0:	91 89       	ldd	r25, Z+17	; 0x11
    2ca2:	99 23       	and	r25, r25
    2ca4:	39 f0       	breq	.+14     	; 0x2cb4 <xQueueGenericSend+0x6c>
    2ca6:	c8 01       	movw	r24, r16
    2ca8:	41 96       	adiw	r24, 0x11	; 17
    2caa:	96 d5       	rcall	.+2860   	; 0x37d8 <xTaskRemoveFromEventList>
    2cac:	88 23       	and	r24, r24
    2cae:	21 f0       	breq	.+8      	; 0x2cb8 <xQueueGenericSend+0x70>
    2cb0:	e1 dd       	rcall	.-1086   	; 0x2874 <vPortYield>
    2cb2:	02 c0       	rjmp	.+4      	; 0x2cb8 <xQueueGenericSend+0x70>
    2cb4:	81 11       	cpse	r24, r1
    2cb6:	de dd       	rcall	.-1092   	; 0x2874 <vPortYield>
    2cb8:	0f 90       	pop	r0
    2cba:	0f be       	out	0x3f, r0	; 63
    2cbc:	81 e0       	ldi	r24, 0x01	; 1
    2cbe:	45 c0       	rjmp	.+138    	; 0x2d4a <xQueueGenericSend+0x102>
    2cc0:	ec 81       	ldd	r30, Y+4	; 0x04
    2cc2:	fd 81       	ldd	r31, Y+5	; 0x05
    2cc4:	ef 2b       	or	r30, r31
    2cc6:	21 f4       	brne	.+8      	; 0x2cd0 <xQueueGenericSend+0x88>
    2cc8:	0f 90       	pop	r0
    2cca:	0f be       	out	0x3f, r0	; 63
    2ccc:	80 e0       	ldi	r24, 0x00	; 0
    2cce:	3d c0       	rjmp	.+122    	; 0x2d4a <xQueueGenericSend+0x102>
    2cd0:	b1 10       	cpse	r11, r1
    2cd2:	04 c0       	rjmp	.+8      	; 0x2cdc <xQueueGenericSend+0x94>
    2cd4:	ce 01       	movw	r24, r28
    2cd6:	01 96       	adiw	r24, 0x01	; 1
    2cd8:	c7 d5       	rcall	.+2958   	; 0x3868 <vTaskInternalSetTimeOutState>
    2cda:	b9 2c       	mov	r11, r9
    2cdc:	0f 90       	pop	r0
    2cde:	0f be       	out	0x3f, r0	; 63
    2ce0:	7f d3       	rcall	.+1790   	; 0x33e0 <vTaskSuspendAll>
    2ce2:	0f b6       	in	r0, 0x3f	; 63
    2ce4:	f8 94       	cli
    2ce6:	0f 92       	push	r0
    2ce8:	f8 01       	movw	r30, r16
    2cea:	85 8d       	ldd	r24, Z+29	; 0x1d
    2cec:	8f 3f       	cpi	r24, 0xFF	; 255
    2cee:	09 f4       	brne	.+2      	; 0x2cf2 <xQueueGenericSend+0xaa>
    2cf0:	15 8e       	std	Z+29, r1	; 0x1d
    2cf2:	f8 01       	movw	r30, r16
    2cf4:	86 8d       	ldd	r24, Z+30	; 0x1e
    2cf6:	8f 3f       	cpi	r24, 0xFF	; 255
    2cf8:	09 f4       	brne	.+2      	; 0x2cfc <xQueueGenericSend+0xb4>
    2cfa:	16 8e       	std	Z+30, r1	; 0x1e
    2cfc:	0f 90       	pop	r0
    2cfe:	0f be       	out	0x3f, r0	; 63
    2d00:	be 01       	movw	r22, r28
    2d02:	6c 5f       	subi	r22, 0xFC	; 252
    2d04:	7f 4f       	sbci	r23, 0xFF	; 255
    2d06:	ce 01       	movw	r24, r28
    2d08:	01 96       	adiw	r24, 0x01	; 1
    2d0a:	b9 d5       	rcall	.+2930   	; 0x387e <xTaskCheckForTimeOut>
    2d0c:	81 11       	cpse	r24, r1
    2d0e:	19 c0       	rjmp	.+50     	; 0x2d42 <xQueueGenericSend+0xfa>
    2d10:	0f b6       	in	r0, 0x3f	; 63
    2d12:	f8 94       	cli
    2d14:	0f 92       	push	r0
    2d16:	f8 01       	movw	r30, r16
    2d18:	92 8d       	ldd	r25, Z+26	; 0x1a
    2d1a:	83 8d       	ldd	r24, Z+27	; 0x1b
    2d1c:	0f 90       	pop	r0
    2d1e:	0f be       	out	0x3f, r0	; 63
    2d20:	98 13       	cpse	r25, r24
    2d22:	0b c0       	rjmp	.+22     	; 0x2d3a <xQueueGenericSend+0xf2>
    2d24:	6c 81       	ldd	r22, Y+4	; 0x04
    2d26:	7d 81       	ldd	r23, Y+5	; 0x05
    2d28:	c7 01       	movw	r24, r14
    2d2a:	2b d5       	rcall	.+2646   	; 0x3782 <vTaskPlaceOnEventList>
    2d2c:	c8 01       	movw	r24, r16
    2d2e:	ec de       	rcall	.-552    	; 0x2b08 <prvUnlockQueue>
    2d30:	1e d4       	rcall	.+2108   	; 0x356e <xTaskResumeAll>
    2d32:	81 11       	cpse	r24, r1
    2d34:	a5 cf       	rjmp	.-182    	; 0x2c80 <xQueueGenericSend+0x38>
    2d36:	9e dd       	rcall	.-1220   	; 0x2874 <vPortYield>
    2d38:	a3 cf       	rjmp	.-186    	; 0x2c80 <xQueueGenericSend+0x38>
    2d3a:	c8 01       	movw	r24, r16
    2d3c:	e5 de       	rcall	.-566    	; 0x2b08 <prvUnlockQueue>
    2d3e:	17 d4       	rcall	.+2094   	; 0x356e <xTaskResumeAll>
    2d40:	9f cf       	rjmp	.-194    	; 0x2c80 <xQueueGenericSend+0x38>
    2d42:	c8 01       	movw	r24, r16
    2d44:	e1 de       	rcall	.-574    	; 0x2b08 <prvUnlockQueue>
    2d46:	13 d4       	rcall	.+2086   	; 0x356e <xTaskResumeAll>
    2d48:	80 e0       	ldi	r24, 0x00	; 0
    2d4a:	0f 90       	pop	r0
    2d4c:	0f 90       	pop	r0
    2d4e:	0f 90       	pop	r0
    2d50:	0f 90       	pop	r0
    2d52:	0f 90       	pop	r0
    2d54:	df 91       	pop	r29
    2d56:	cf 91       	pop	r28
    2d58:	1f 91       	pop	r17
    2d5a:	0f 91       	pop	r16
    2d5c:	ff 90       	pop	r15
    2d5e:	ef 90       	pop	r14
    2d60:	df 90       	pop	r13
    2d62:	cf 90       	pop	r12
    2d64:	bf 90       	pop	r11
    2d66:	af 90       	pop	r10
    2d68:	9f 90       	pop	r9
    2d6a:	08 95       	ret

00002d6c <xQueueGenericSendFromISR>:
    2d6c:	ef 92       	push	r14
    2d6e:	ff 92       	push	r15
    2d70:	0f 93       	push	r16
    2d72:	1f 93       	push	r17
    2d74:	cf 93       	push	r28
    2d76:	df 93       	push	r29
    2d78:	8a 01       	movw	r16, r20
    2d7a:	fc 01       	movw	r30, r24
    2d7c:	52 8d       	ldd	r21, Z+26	; 0x1a
    2d7e:	33 8d       	ldd	r19, Z+27	; 0x1b
    2d80:	53 17       	cp	r21, r19
    2d82:	10 f0       	brcs	.+4      	; 0x2d88 <xQueueGenericSendFromISR+0x1c>
    2d84:	22 30       	cpi	r18, 0x02	; 2
    2d86:	e1 f4       	brne	.+56     	; 0x2dc0 <xQueueGenericSendFromISR+0x54>
    2d88:	42 2f       	mov	r20, r18
    2d8a:	78 01       	movw	r14, r16
    2d8c:	ec 01       	movw	r28, r24
    2d8e:	1e 8d       	ldd	r17, Y+30	; 0x1e
    2d90:	41 de       	rcall	.-894    	; 0x2a14 <prvCopyDataToQueue>
    2d92:	1f 3f       	cpi	r17, 0xFF	; 255
    2d94:	79 f4       	brne	.+30     	; 0x2db4 <xQueueGenericSendFromISR+0x48>
    2d96:	89 89       	ldd	r24, Y+17	; 0x11
    2d98:	88 23       	and	r24, r24
    2d9a:	a1 f0       	breq	.+40     	; 0x2dc4 <xQueueGenericSendFromISR+0x58>
    2d9c:	ce 01       	movw	r24, r28
    2d9e:	41 96       	adiw	r24, 0x11	; 17
    2da0:	1b d5       	rcall	.+2614   	; 0x37d8 <xTaskRemoveFromEventList>
    2da2:	88 23       	and	r24, r24
    2da4:	89 f0       	breq	.+34     	; 0x2dc8 <xQueueGenericSendFromISR+0x5c>
    2da6:	e1 14       	cp	r14, r1
    2da8:	f1 04       	cpc	r15, r1
    2daa:	81 f0       	breq	.+32     	; 0x2dcc <xQueueGenericSendFromISR+0x60>
    2dac:	81 e0       	ldi	r24, 0x01	; 1
    2dae:	f7 01       	movw	r30, r14
    2db0:	80 83       	st	Z, r24
    2db2:	0d c0       	rjmp	.+26     	; 0x2dce <xQueueGenericSendFromISR+0x62>
    2db4:	ff 24       	eor	r15, r15
    2db6:	f3 94       	inc	r15
    2db8:	f1 0e       	add	r15, r17
    2dba:	fe 8e       	std	Y+30, r15	; 0x1e
    2dbc:	81 e0       	ldi	r24, 0x01	; 1
    2dbe:	07 c0       	rjmp	.+14     	; 0x2dce <xQueueGenericSendFromISR+0x62>
    2dc0:	80 e0       	ldi	r24, 0x00	; 0
    2dc2:	05 c0       	rjmp	.+10     	; 0x2dce <xQueueGenericSendFromISR+0x62>
    2dc4:	81 e0       	ldi	r24, 0x01	; 1
    2dc6:	03 c0       	rjmp	.+6      	; 0x2dce <xQueueGenericSendFromISR+0x62>
    2dc8:	81 e0       	ldi	r24, 0x01	; 1
    2dca:	01 c0       	rjmp	.+2      	; 0x2dce <xQueueGenericSendFromISR+0x62>
    2dcc:	81 e0       	ldi	r24, 0x01	; 1
    2dce:	df 91       	pop	r29
    2dd0:	cf 91       	pop	r28
    2dd2:	1f 91       	pop	r17
    2dd4:	0f 91       	pop	r16
    2dd6:	ff 90       	pop	r15
    2dd8:	ef 90       	pop	r14
    2dda:	08 95       	ret

00002ddc <xQueueReceive>:
    2ddc:	9f 92       	push	r9
    2dde:	af 92       	push	r10
    2de0:	bf 92       	push	r11
    2de2:	cf 92       	push	r12
    2de4:	df 92       	push	r13
    2de6:	ef 92       	push	r14
    2de8:	ff 92       	push	r15
    2dea:	0f 93       	push	r16
    2dec:	1f 93       	push	r17
    2dee:	cf 93       	push	r28
    2df0:	df 93       	push	r29
    2df2:	00 d0       	rcall	.+0      	; 0x2df4 <xQueueReceive+0x18>
    2df4:	1f 92       	push	r1
    2df6:	1f 92       	push	r1
    2df8:	cd b7       	in	r28, 0x3d	; 61
    2dfa:	de b7       	in	r29, 0x3e	; 62
    2dfc:	8c 01       	movw	r16, r24
    2dfe:	5b 01       	movw	r10, r22
    2e00:	5d 83       	std	Y+5, r21	; 0x05
    2e02:	4c 83       	std	Y+4, r20	; 0x04
    2e04:	e1 2c       	mov	r14, r1
    2e06:	99 24       	eor	r9, r9
    2e08:	93 94       	inc	r9
    2e0a:	6c 01       	movw	r12, r24
    2e0c:	81 e1       	ldi	r24, 0x11	; 17
    2e0e:	c8 0e       	add	r12, r24
    2e10:	d1 1c       	adc	r13, r1
    2e12:	0f b6       	in	r0, 0x3f	; 63
    2e14:	f8 94       	cli
    2e16:	0f 92       	push	r0
    2e18:	f8 01       	movw	r30, r16
    2e1a:	f2 8c       	ldd	r15, Z+26	; 0x1a
    2e1c:	ff 20       	and	r15, r15
    2e1e:	91 f0       	breq	.+36     	; 0x2e44 <xQueueReceive+0x68>
    2e20:	b5 01       	movw	r22, r10
    2e22:	c8 01       	movw	r24, r16
    2e24:	57 de       	rcall	.-850    	; 0x2ad4 <prvCopyDataFromQueue>
    2e26:	fa 94       	dec	r15
    2e28:	f8 01       	movw	r30, r16
    2e2a:	f2 8e       	std	Z+26, r15	; 0x1a
    2e2c:	80 85       	ldd	r24, Z+8	; 0x08
    2e2e:	88 23       	and	r24, r24
    2e30:	29 f0       	breq	.+10     	; 0x2e3c <xQueueReceive+0x60>
    2e32:	c8 01       	movw	r24, r16
    2e34:	08 96       	adiw	r24, 0x08	; 8
    2e36:	d0 d4       	rcall	.+2464   	; 0x37d8 <xTaskRemoveFromEventList>
    2e38:	81 11       	cpse	r24, r1
    2e3a:	1c dd       	rcall	.-1480   	; 0x2874 <vPortYield>
    2e3c:	0f 90       	pop	r0
    2e3e:	0f be       	out	0x3f, r0	; 63
    2e40:	81 e0       	ldi	r24, 0x01	; 1
    2e42:	44 c0       	rjmp	.+136    	; 0x2ecc <xQueueReceive+0xf0>
    2e44:	2c 81       	ldd	r18, Y+4	; 0x04
    2e46:	3d 81       	ldd	r19, Y+5	; 0x05
    2e48:	23 2b       	or	r18, r19
    2e4a:	21 f4       	brne	.+8      	; 0x2e54 <xQueueReceive+0x78>
    2e4c:	0f 90       	pop	r0
    2e4e:	0f be       	out	0x3f, r0	; 63
    2e50:	80 e0       	ldi	r24, 0x00	; 0
    2e52:	3c c0       	rjmp	.+120    	; 0x2ecc <xQueueReceive+0xf0>
    2e54:	e1 10       	cpse	r14, r1
    2e56:	04 c0       	rjmp	.+8      	; 0x2e60 <xQueueReceive+0x84>
    2e58:	ce 01       	movw	r24, r28
    2e5a:	01 96       	adiw	r24, 0x01	; 1
    2e5c:	05 d5       	rcall	.+2570   	; 0x3868 <vTaskInternalSetTimeOutState>
    2e5e:	e9 2c       	mov	r14, r9
    2e60:	0f 90       	pop	r0
    2e62:	0f be       	out	0x3f, r0	; 63
    2e64:	bd d2       	rcall	.+1402   	; 0x33e0 <vTaskSuspendAll>
    2e66:	0f b6       	in	r0, 0x3f	; 63
    2e68:	f8 94       	cli
    2e6a:	0f 92       	push	r0
    2e6c:	f8 01       	movw	r30, r16
    2e6e:	85 8d       	ldd	r24, Z+29	; 0x1d
    2e70:	8f 3f       	cpi	r24, 0xFF	; 255
    2e72:	09 f4       	brne	.+2      	; 0x2e76 <xQueueReceive+0x9a>
    2e74:	15 8e       	std	Z+29, r1	; 0x1d
    2e76:	f8 01       	movw	r30, r16
    2e78:	96 8d       	ldd	r25, Z+30	; 0x1e
    2e7a:	9f 3f       	cpi	r25, 0xFF	; 255
    2e7c:	09 f4       	brne	.+2      	; 0x2e80 <xQueueReceive+0xa4>
    2e7e:	16 8e       	std	Z+30, r1	; 0x1e
    2e80:	0f 90       	pop	r0
    2e82:	0f be       	out	0x3f, r0	; 63
    2e84:	be 01       	movw	r22, r28
    2e86:	6c 5f       	subi	r22, 0xFC	; 252
    2e88:	7f 4f       	sbci	r23, 0xFF	; 255
    2e8a:	ce 01       	movw	r24, r28
    2e8c:	01 96       	adiw	r24, 0x01	; 1
    2e8e:	f7 d4       	rcall	.+2542   	; 0x387e <xTaskCheckForTimeOut>
    2e90:	81 11       	cpse	r24, r1
    2e92:	13 c0       	rjmp	.+38     	; 0x2eba <xQueueReceive+0xde>
    2e94:	c8 01       	movw	r24, r16
    2e96:	b3 dd       	rcall	.-1178   	; 0x29fe <prvIsQueueEmpty>
    2e98:	88 23       	and	r24, r24
    2e9a:	59 f0       	breq	.+22     	; 0x2eb2 <xQueueReceive+0xd6>
    2e9c:	6c 81       	ldd	r22, Y+4	; 0x04
    2e9e:	7d 81       	ldd	r23, Y+5	; 0x05
    2ea0:	c6 01       	movw	r24, r12
    2ea2:	6f d4       	rcall	.+2270   	; 0x3782 <vTaskPlaceOnEventList>
    2ea4:	c8 01       	movw	r24, r16
    2ea6:	30 de       	rcall	.-928    	; 0x2b08 <prvUnlockQueue>
    2ea8:	62 d3       	rcall	.+1732   	; 0x356e <xTaskResumeAll>
    2eaa:	81 11       	cpse	r24, r1
    2eac:	b2 cf       	rjmp	.-156    	; 0x2e12 <xQueueReceive+0x36>
    2eae:	e2 dc       	rcall	.-1596   	; 0x2874 <vPortYield>
    2eb0:	b0 cf       	rjmp	.-160    	; 0x2e12 <xQueueReceive+0x36>
    2eb2:	c8 01       	movw	r24, r16
    2eb4:	29 de       	rcall	.-942    	; 0x2b08 <prvUnlockQueue>
    2eb6:	5b d3       	rcall	.+1718   	; 0x356e <xTaskResumeAll>
    2eb8:	ac cf       	rjmp	.-168    	; 0x2e12 <xQueueReceive+0x36>
    2eba:	c8 01       	movw	r24, r16
    2ebc:	25 de       	rcall	.-950    	; 0x2b08 <prvUnlockQueue>
    2ebe:	57 d3       	rcall	.+1710   	; 0x356e <xTaskResumeAll>
    2ec0:	c8 01       	movw	r24, r16
    2ec2:	9d dd       	rcall	.-1222   	; 0x29fe <prvIsQueueEmpty>
    2ec4:	88 23       	and	r24, r24
    2ec6:	09 f4       	brne	.+2      	; 0x2eca <xQueueReceive+0xee>
    2ec8:	a4 cf       	rjmp	.-184    	; 0x2e12 <xQueueReceive+0x36>
    2eca:	80 e0       	ldi	r24, 0x00	; 0
    2ecc:	0f 90       	pop	r0
    2ece:	0f 90       	pop	r0
    2ed0:	0f 90       	pop	r0
    2ed2:	0f 90       	pop	r0
    2ed4:	0f 90       	pop	r0
    2ed6:	df 91       	pop	r29
    2ed8:	cf 91       	pop	r28
    2eda:	1f 91       	pop	r17
    2edc:	0f 91       	pop	r16
    2ede:	ff 90       	pop	r15
    2ee0:	ef 90       	pop	r14
    2ee2:	df 90       	pop	r13
    2ee4:	cf 90       	pop	r12
    2ee6:	bf 90       	pop	r11
    2ee8:	af 90       	pop	r10
    2eea:	9f 90       	pop	r9
    2eec:	08 95       	ret

00002eee <xQueueSemaphoreTake>:
    2eee:	bf 92       	push	r11
    2ef0:	cf 92       	push	r12
    2ef2:	df 92       	push	r13
    2ef4:	ef 92       	push	r14
    2ef6:	ff 92       	push	r15
    2ef8:	0f 93       	push	r16
    2efa:	1f 93       	push	r17
    2efc:	cf 93       	push	r28
    2efe:	df 93       	push	r29
    2f00:	00 d0       	rcall	.+0      	; 0x2f02 <xQueueSemaphoreTake+0x14>
    2f02:	1f 92       	push	r1
    2f04:	1f 92       	push	r1
    2f06:	cd b7       	in	r28, 0x3d	; 61
    2f08:	de b7       	in	r29, 0x3e	; 62
    2f0a:	8c 01       	movw	r16, r24
    2f0c:	7d 83       	std	Y+5, r23	; 0x05
    2f0e:	6c 83       	std	Y+4, r22	; 0x04
    2f10:	b1 2c       	mov	r11, r1
    2f12:	d1 2c       	mov	r13, r1
    2f14:	cc 24       	eor	r12, r12
    2f16:	c3 94       	inc	r12
    2f18:	7c 01       	movw	r14, r24
    2f1a:	81 e1       	ldi	r24, 0x11	; 17
    2f1c:	e8 0e       	add	r14, r24
    2f1e:	f1 1c       	adc	r15, r1
    2f20:	0f b6       	in	r0, 0x3f	; 63
    2f22:	f8 94       	cli
    2f24:	0f 92       	push	r0
    2f26:	d8 01       	movw	r26, r16
    2f28:	5a 96       	adiw	r26, 0x1a	; 26
    2f2a:	9c 91       	ld	r25, X
    2f2c:	5a 97       	sbiw	r26, 0x1a	; 26
    2f2e:	99 23       	and	r25, r25
    2f30:	d1 f0       	breq	.+52     	; 0x2f66 <xQueueSemaphoreTake+0x78>
    2f32:	91 50       	subi	r25, 0x01	; 1
    2f34:	5a 96       	adiw	r26, 0x1a	; 26
    2f36:	9c 93       	st	X, r25
    2f38:	5a 97       	sbiw	r26, 0x1a	; 26
    2f3a:	8d 91       	ld	r24, X+
    2f3c:	9c 91       	ld	r25, X
    2f3e:	89 2b       	or	r24, r25
    2f40:	21 f4       	brne	.+8      	; 0x2f4a <xQueueSemaphoreTake+0x5c>
    2f42:	dc d5       	rcall	.+3000   	; 0x3afc <pvTaskIncrementMutexHeldCount>
    2f44:	f8 01       	movw	r30, r16
    2f46:	95 83       	std	Z+5, r25	; 0x05
    2f48:	84 83       	std	Z+4, r24	; 0x04
    2f4a:	d8 01       	movw	r26, r16
    2f4c:	18 96       	adiw	r26, 0x08	; 8
    2f4e:	8c 91       	ld	r24, X
    2f50:	88 23       	and	r24, r24
    2f52:	29 f0       	breq	.+10     	; 0x2f5e <xQueueSemaphoreTake+0x70>
    2f54:	c8 01       	movw	r24, r16
    2f56:	08 96       	adiw	r24, 0x08	; 8
    2f58:	3f d4       	rcall	.+2174   	; 0x37d8 <xTaskRemoveFromEventList>
    2f5a:	81 11       	cpse	r24, r1
    2f5c:	8b dc       	rcall	.-1770   	; 0x2874 <vPortYield>
    2f5e:	0f 90       	pop	r0
    2f60:	0f be       	out	0x3f, r0	; 63
    2f62:	81 e0       	ldi	r24, 0x01	; 1
    2f64:	70 c0       	rjmp	.+224    	; 0x3046 <xQueueSemaphoreTake+0x158>
    2f66:	2c 81       	ldd	r18, Y+4	; 0x04
    2f68:	3d 81       	ldd	r19, Y+5	; 0x05
    2f6a:	23 2b       	or	r18, r19
    2f6c:	21 f4       	brne	.+8      	; 0x2f76 <xQueueSemaphoreTake+0x88>
    2f6e:	0f 90       	pop	r0
    2f70:	0f be       	out	0x3f, r0	; 63
    2f72:	80 e0       	ldi	r24, 0x00	; 0
    2f74:	68 c0       	rjmp	.+208    	; 0x3046 <xQueueSemaphoreTake+0x158>
    2f76:	d1 10       	cpse	r13, r1
    2f78:	04 c0       	rjmp	.+8      	; 0x2f82 <xQueueSemaphoreTake+0x94>
    2f7a:	ce 01       	movw	r24, r28
    2f7c:	01 96       	adiw	r24, 0x01	; 1
    2f7e:	74 d4       	rcall	.+2280   	; 0x3868 <vTaskInternalSetTimeOutState>
    2f80:	dc 2c       	mov	r13, r12
    2f82:	0f 90       	pop	r0
    2f84:	0f be       	out	0x3f, r0	; 63
    2f86:	2c d2       	rcall	.+1112   	; 0x33e0 <vTaskSuspendAll>
    2f88:	0f b6       	in	r0, 0x3f	; 63
    2f8a:	f8 94       	cli
    2f8c:	0f 92       	push	r0
    2f8e:	f8 01       	movw	r30, r16
    2f90:	95 8d       	ldd	r25, Z+29	; 0x1d
    2f92:	9f 3f       	cpi	r25, 0xFF	; 255
    2f94:	09 f4       	brne	.+2      	; 0x2f98 <xQueueSemaphoreTake+0xaa>
    2f96:	15 8e       	std	Z+29, r1	; 0x1d
    2f98:	d8 01       	movw	r26, r16
    2f9a:	5e 96       	adiw	r26, 0x1e	; 30
    2f9c:	9c 91       	ld	r25, X
    2f9e:	5e 97       	sbiw	r26, 0x1e	; 30
    2fa0:	9f 3f       	cpi	r25, 0xFF	; 255
    2fa2:	11 f4       	brne	.+4      	; 0x2fa8 <xQueueSemaphoreTake+0xba>
    2fa4:	5e 96       	adiw	r26, 0x1e	; 30
    2fa6:	1c 92       	st	X, r1
    2fa8:	0f 90       	pop	r0
    2faa:	0f be       	out	0x3f, r0	; 63
    2fac:	be 01       	movw	r22, r28
    2fae:	6c 5f       	subi	r22, 0xFC	; 252
    2fb0:	7f 4f       	sbci	r23, 0xFF	; 255
    2fb2:	ce 01       	movw	r24, r28
    2fb4:	01 96       	adiw	r24, 0x01	; 1
    2fb6:	63 d4       	rcall	.+2246   	; 0x387e <xTaskCheckForTimeOut>
    2fb8:	81 11       	cpse	r24, r1
    2fba:	21 c0       	rjmp	.+66     	; 0x2ffe <xQueueSemaphoreTake+0x110>
    2fbc:	c8 01       	movw	r24, r16
    2fbe:	1f dd       	rcall	.-1474   	; 0x29fe <prvIsQueueEmpty>
    2fc0:	88 23       	and	r24, r24
    2fc2:	c9 f0       	breq	.+50     	; 0x2ff6 <xQueueSemaphoreTake+0x108>
    2fc4:	f8 01       	movw	r30, r16
    2fc6:	20 81       	ld	r18, Z
    2fc8:	31 81       	ldd	r19, Z+1	; 0x01
    2fca:	23 2b       	or	r18, r19
    2fcc:	49 f4       	brne	.+18     	; 0x2fe0 <xQueueSemaphoreTake+0xf2>
    2fce:	0f b6       	in	r0, 0x3f	; 63
    2fd0:	f8 94       	cli
    2fd2:	0f 92       	push	r0
    2fd4:	84 81       	ldd	r24, Z+4	; 0x04
    2fd6:	95 81       	ldd	r25, Z+5	; 0x05
    2fd8:	8f d4       	rcall	.+2334   	; 0x38f8 <xTaskPriorityInherit>
    2fda:	b8 2e       	mov	r11, r24
    2fdc:	0f 90       	pop	r0
    2fde:	0f be       	out	0x3f, r0	; 63
    2fe0:	6c 81       	ldd	r22, Y+4	; 0x04
    2fe2:	7d 81       	ldd	r23, Y+5	; 0x05
    2fe4:	c7 01       	movw	r24, r14
    2fe6:	cd d3       	rcall	.+1946   	; 0x3782 <vTaskPlaceOnEventList>
    2fe8:	c8 01       	movw	r24, r16
    2fea:	8e dd       	rcall	.-1252   	; 0x2b08 <prvUnlockQueue>
    2fec:	c0 d2       	rcall	.+1408   	; 0x356e <xTaskResumeAll>
    2fee:	81 11       	cpse	r24, r1
    2ff0:	97 cf       	rjmp	.-210    	; 0x2f20 <xQueueSemaphoreTake+0x32>
    2ff2:	40 dc       	rcall	.-1920   	; 0x2874 <vPortYield>
    2ff4:	95 cf       	rjmp	.-214    	; 0x2f20 <xQueueSemaphoreTake+0x32>
    2ff6:	c8 01       	movw	r24, r16
    2ff8:	87 dd       	rcall	.-1266   	; 0x2b08 <prvUnlockQueue>
    2ffa:	b9 d2       	rcall	.+1394   	; 0x356e <xTaskResumeAll>
    2ffc:	91 cf       	rjmp	.-222    	; 0x2f20 <xQueueSemaphoreTake+0x32>
    2ffe:	c8 01       	movw	r24, r16
    3000:	83 dd       	rcall	.-1274   	; 0x2b08 <prvUnlockQueue>
    3002:	b5 d2       	rcall	.+1386   	; 0x356e <xTaskResumeAll>
    3004:	c8 01       	movw	r24, r16
    3006:	fb dc       	rcall	.-1546   	; 0x29fe <prvIsQueueEmpty>
    3008:	88 23       	and	r24, r24
    300a:	09 f4       	brne	.+2      	; 0x300e <xQueueSemaphoreTake+0x120>
    300c:	89 cf       	rjmp	.-238    	; 0x2f20 <xQueueSemaphoreTake+0x32>
    300e:	bb 20       	and	r11, r11
    3010:	c9 f0       	breq	.+50     	; 0x3044 <xQueueSemaphoreTake+0x156>
    3012:	0f b6       	in	r0, 0x3f	; 63
    3014:	f8 94       	cli
    3016:	0f 92       	push	r0
    3018:	f8 01       	movw	r30, r16
    301a:	81 89       	ldd	r24, Z+17	; 0x11
    301c:	88 23       	and	r24, r24
    301e:	39 f0       	breq	.+14     	; 0x302e <xQueueSemaphoreTake+0x140>
    3020:	06 88       	ldd	r0, Z+22	; 0x16
    3022:	f7 89       	ldd	r31, Z+23	; 0x17
    3024:	e0 2d       	mov	r30, r0
    3026:	80 81       	ld	r24, Z
    3028:	64 e0       	ldi	r22, 0x04	; 4
    302a:	68 1b       	sub	r22, r24
    302c:	01 c0       	rjmp	.+2      	; 0x3030 <xQueueSemaphoreTake+0x142>
    302e:	60 e0       	ldi	r22, 0x00	; 0
    3030:	d8 01       	movw	r26, r16
    3032:	14 96       	adiw	r26, 0x04	; 4
    3034:	8d 91       	ld	r24, X+
    3036:	9c 91       	ld	r25, X
    3038:	15 97       	sbiw	r26, 0x05	; 5
    303a:	10 d5       	rcall	.+2592   	; 0x3a5c <vTaskPriorityDisinheritAfterTimeout>
    303c:	0f 90       	pop	r0
    303e:	0f be       	out	0x3f, r0	; 63
    3040:	80 e0       	ldi	r24, 0x00	; 0
    3042:	01 c0       	rjmp	.+2      	; 0x3046 <xQueueSemaphoreTake+0x158>
    3044:	80 e0       	ldi	r24, 0x00	; 0
    3046:	0f 90       	pop	r0
    3048:	0f 90       	pop	r0
    304a:	0f 90       	pop	r0
    304c:	0f 90       	pop	r0
    304e:	0f 90       	pop	r0
    3050:	df 91       	pop	r29
    3052:	cf 91       	pop	r28
    3054:	1f 91       	pop	r17
    3056:	0f 91       	pop	r16
    3058:	ff 90       	pop	r15
    305a:	ef 90       	pop	r14
    305c:	df 90       	pop	r13
    305e:	cf 90       	pop	r12
    3060:	bf 90       	pop	r11
    3062:	08 95       	ret

00003064 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
    {
    3064:	cf 93       	push	r28
    3066:	df 93       	push	r29
    3068:	ec 01       	movw	r28, r24
        will not actually cause the task to block, just place it on a blocked
        list.  It will not block until the scheduler is unlocked - at which
        time a yield will be performed.  If an item is added to the queue while
        the queue is locked, and the calling task blocks on the queue, then the
        calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    306a:	0f b6       	in	r0, 0x3f	; 63
    306c:	f8 94       	cli
    306e:	0f 92       	push	r0
    3070:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3072:	8f 3f       	cpi	r24, 0xFF	; 255
    3074:	09 f4       	brne	.+2      	; 0x3078 <vQueueWaitForMessageRestricted+0x14>
    3076:	1d 8e       	std	Y+29, r1	; 0x1d
    3078:	8e 8d       	ldd	r24, Y+30	; 0x1e
    307a:	8f 3f       	cpi	r24, 0xFF	; 255
    307c:	09 f4       	brne	.+2      	; 0x3080 <vQueueWaitForMessageRestricted+0x1c>
    307e:	1e 8e       	std	Y+30, r1	; 0x1e
    3080:	0f 90       	pop	r0
    3082:	0f be       	out	0x3f, r0	; 63
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    3084:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3086:	81 11       	cpse	r24, r1
    3088:	03 c0       	rjmp	.+6      	; 0x3090 <vQueueWaitForMessageRestricted+0x2c>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    308a:	ce 01       	movw	r24, r28
    308c:	41 96       	adiw	r24, 0x11	; 17
    308e:	8b d3       	rcall	.+1814   	; 0x37a6 <vTaskPlaceOnEventListRestricted>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
        prvUnlockQueue( pxQueue );
    3090:	ce 01       	movw	r24, r28
    3092:	3a dd       	rcall	.-1420   	; 0x2b08 <prvUnlockQueue>
    }
    3094:	df 91       	pop	r29
    3096:	cf 91       	pop	r28
    3098:	08 95       	ret

0000309a <prvResetNextTaskUnblockTime>:
    309a:	e0 91 91 0c 	lds	r30, 0x0C91	; 0x800c91 <pxDelayedTaskList>
    309e:	f0 91 92 0c 	lds	r31, 0x0C92	; 0x800c92 <pxDelayedTaskList+0x1>
    30a2:	80 81       	ld	r24, Z
    30a4:	81 11       	cpse	r24, r1
    30a6:	07 c0       	rjmp	.+14     	; 0x30b6 <prvResetNextTaskUnblockTime+0x1c>
    30a8:	8f ef       	ldi	r24, 0xFF	; 255
    30aa:	9f ef       	ldi	r25, 0xFF	; 255
    30ac:	90 93 72 0c 	sts	0x0C72, r25	; 0x800c72 <xNextTaskUnblockTime+0x1>
    30b0:	80 93 71 0c 	sts	0x0C71, r24	; 0x800c71 <xNextTaskUnblockTime>
    30b4:	08 95       	ret
    30b6:	e0 91 91 0c 	lds	r30, 0x0C91	; 0x800c91 <pxDelayedTaskList>
    30ba:	f0 91 92 0c 	lds	r31, 0x0C92	; 0x800c92 <pxDelayedTaskList+0x1>
    30be:	05 80       	ldd	r0, Z+5	; 0x05
    30c0:	f6 81       	ldd	r31, Z+6	; 0x06
    30c2:	e0 2d       	mov	r30, r0
    30c4:	06 80       	ldd	r0, Z+6	; 0x06
    30c6:	f7 81       	ldd	r31, Z+7	; 0x07
    30c8:	e0 2d       	mov	r30, r0
    30ca:	82 81       	ldd	r24, Z+2	; 0x02
    30cc:	93 81       	ldd	r25, Z+3	; 0x03
    30ce:	90 93 72 0c 	sts	0x0C72, r25	; 0x800c72 <xNextTaskUnblockTime+0x1>
    30d2:	80 93 71 0c 	sts	0x0C71, r24	; 0x800c71 <xNextTaskUnblockTime>
    30d6:	08 95       	ret

000030d8 <prvAddCurrentTaskToDelayedList>:
    30d8:	0f 93       	push	r16
    30da:	1f 93       	push	r17
    30dc:	cf 93       	push	r28
    30de:	df 93       	push	r29
    30e0:	ec 01       	movw	r28, r24
    30e2:	00 91 79 0c 	lds	r16, 0x0C79	; 0x800c79 <xTickCount>
    30e6:	10 91 7a 0c 	lds	r17, 0x0C7A	; 0x800c7a <xTickCount+0x1>
    30ea:	80 91 b7 0c 	lds	r24, 0x0CB7	; 0x800cb7 <pxCurrentTCB>
    30ee:	90 91 b8 0c 	lds	r25, 0x0CB8	; 0x800cb8 <pxCurrentTCB+0x1>
    30f2:	02 96       	adiw	r24, 0x02	; 2
    30f4:	ea da       	rcall	.-2604   	; 0x26ca <uxListRemove>
    30f6:	c0 0f       	add	r28, r16
    30f8:	d1 1f       	adc	r29, r17
    30fa:	e0 91 b7 0c 	lds	r30, 0x0CB7	; 0x800cb7 <pxCurrentTCB>
    30fe:	f0 91 b8 0c 	lds	r31, 0x0CB8	; 0x800cb8 <pxCurrentTCB+0x1>
    3102:	d3 83       	std	Z+3, r29	; 0x03
    3104:	c2 83       	std	Z+2, r28	; 0x02
    3106:	c0 17       	cp	r28, r16
    3108:	d1 07       	cpc	r29, r17
    310a:	60 f4       	brcc	.+24     	; 0x3124 <prvAddCurrentTaskToDelayedList+0x4c>
    310c:	60 91 b7 0c 	lds	r22, 0x0CB7	; 0x800cb7 <pxCurrentTCB>
    3110:	70 91 b8 0c 	lds	r23, 0x0CB8	; 0x800cb8 <pxCurrentTCB+0x1>
    3114:	80 91 8f 0c 	lds	r24, 0x0C8F	; 0x800c8f <pxOverflowDelayedTaskList>
    3118:	90 91 90 0c 	lds	r25, 0x0C90	; 0x800c90 <pxOverflowDelayedTaskList+0x1>
    311c:	6e 5f       	subi	r22, 0xFE	; 254
    311e:	7f 4f       	sbci	r23, 0xFF	; 255
    3120:	a3 da       	rcall	.-2746   	; 0x2668 <vListInsert>
    3122:	16 c0       	rjmp	.+44     	; 0x3150 <prvAddCurrentTaskToDelayedList+0x78>
    3124:	60 91 b7 0c 	lds	r22, 0x0CB7	; 0x800cb7 <pxCurrentTCB>
    3128:	70 91 b8 0c 	lds	r23, 0x0CB8	; 0x800cb8 <pxCurrentTCB+0x1>
    312c:	80 91 91 0c 	lds	r24, 0x0C91	; 0x800c91 <pxDelayedTaskList>
    3130:	90 91 92 0c 	lds	r25, 0x0C92	; 0x800c92 <pxDelayedTaskList+0x1>
    3134:	6e 5f       	subi	r22, 0xFE	; 254
    3136:	7f 4f       	sbci	r23, 0xFF	; 255
    3138:	97 da       	rcall	.-2770   	; 0x2668 <vListInsert>
    313a:	80 91 71 0c 	lds	r24, 0x0C71	; 0x800c71 <xNextTaskUnblockTime>
    313e:	90 91 72 0c 	lds	r25, 0x0C72	; 0x800c72 <xNextTaskUnblockTime+0x1>
    3142:	c8 17       	cp	r28, r24
    3144:	d9 07       	cpc	r29, r25
    3146:	20 f4       	brcc	.+8      	; 0x3150 <prvAddCurrentTaskToDelayedList+0x78>
    3148:	d0 93 72 0c 	sts	0x0C72, r29	; 0x800c72 <xNextTaskUnblockTime+0x1>
    314c:	c0 93 71 0c 	sts	0x0C71, r28	; 0x800c71 <xNextTaskUnblockTime>
    3150:	df 91       	pop	r29
    3152:	cf 91       	pop	r28
    3154:	1f 91       	pop	r17
    3156:	0f 91       	pop	r16
    3158:	08 95       	ret

0000315a <xTaskCreateStatic>:
    315a:	6f 92       	push	r6
    315c:	7f 92       	push	r7
    315e:	8f 92       	push	r8
    3160:	9f 92       	push	r9
    3162:	af 92       	push	r10
    3164:	bf 92       	push	r11
    3166:	cf 92       	push	r12
    3168:	df 92       	push	r13
    316a:	ef 92       	push	r14
    316c:	ff 92       	push	r15
    316e:	0f 93       	push	r16
    3170:	cf 93       	push	r28
    3172:	df 93       	push	r29
    3174:	4c 01       	movw	r8, r24
    3176:	eb 01       	movw	r28, r22
    3178:	5a 01       	movw	r10, r20
    317a:	39 01       	movw	r6, r18
    317c:	c1 14       	cp	r12, r1
    317e:	d1 04       	cpc	r13, r1
    3180:	09 f4       	brne	.+2      	; 0x3184 <xTaskCreateStatic+0x2a>
    3182:	c9 c0       	rjmp	.+402    	; 0x3316 <xTaskCreateStatic+0x1bc>
    3184:	e1 14       	cp	r14, r1
    3186:	f1 04       	cpc	r15, r1
    3188:	09 f4       	brne	.+2      	; 0x318c <xTaskCreateStatic+0x32>
    318a:	c8 c0       	rjmp	.+400    	; 0x331c <xTaskCreateStatic+0x1c2>
    318c:	f6 01       	movw	r30, r12
    318e:	f0 8e       	std	Z+24, r15	; 0x18
    3190:	e7 8a       	std	Z+23, r14	; 0x17
    3192:	65 ea       	ldi	r22, 0xA5	; 165
    3194:	70 e0       	ldi	r23, 0x00	; 0
    3196:	c7 01       	movw	r24, r14
    3198:	e1 d7       	rcall	.+4034   	; 0x415c <memset>
    319a:	f1 e0       	ldi	r31, 0x01	; 1
    319c:	af 1a       	sub	r10, r31
    319e:	b1 08       	sbc	r11, r1
    31a0:	f6 01       	movw	r30, r12
    31a2:	87 89       	ldd	r24, Z+23	; 0x17
    31a4:	90 8d       	ldd	r25, Z+24	; 0x18
    31a6:	a8 0e       	add	r10, r24
    31a8:	b9 1e       	adc	r11, r25
    31aa:	88 81       	ld	r24, Y
    31ac:	81 8f       	std	Z+25, r24	; 0x19
    31ae:	88 81       	ld	r24, Y
    31b0:	88 23       	and	r24, r24
    31b2:	89 f0       	breq	.+34     	; 0x31d6 <xTaskCreateStatic+0x7c>
    31b4:	d6 01       	movw	r26, r12
    31b6:	5a 96       	adiw	r26, 0x1a	; 26
    31b8:	fe 01       	movw	r30, r28
    31ba:	31 96       	adiw	r30, 0x01	; 1
    31bc:	ae 01       	movw	r20, r28
    31be:	48 5f       	subi	r20, 0xF8	; 248
    31c0:	5f 4f       	sbci	r21, 0xFF	; 255
    31c2:	cf 01       	movw	r24, r30
    31c4:	21 91       	ld	r18, Z+
    31c6:	2d 93       	st	X+, r18
    31c8:	ec 01       	movw	r28, r24
    31ca:	88 81       	ld	r24, Y
    31cc:	88 23       	and	r24, r24
    31ce:	19 f0       	breq	.+6      	; 0x31d6 <xTaskCreateStatic+0x7c>
    31d0:	e4 17       	cp	r30, r20
    31d2:	f5 07       	cpc	r31, r21
    31d4:	b1 f7       	brne	.-20     	; 0x31c2 <xTaskCreateStatic+0x68>
    31d6:	f6 01       	movw	r30, r12
    31d8:	10 a2       	std	Z+32, r1	; 0x20
    31da:	04 30       	cpi	r16, 0x04	; 4
    31dc:	08 f0       	brcs	.+2      	; 0x31e0 <xTaskCreateStatic+0x86>
    31de:	03 e0       	ldi	r16, 0x03	; 3
    31e0:	e6 01       	movw	r28, r12
    31e2:	0e 8b       	std	Y+22, r16	; 0x16
    31e4:	09 a3       	std	Y+33, r16	; 0x21
    31e6:	1a a2       	std	Y+34, r1	; 0x22
    31e8:	22 96       	adiw	r28, 0x02	; 2
    31ea:	ce 01       	movw	r24, r28
    31ec:	18 da       	rcall	.-3024   	; 0x261e <vListInitialiseItem>
    31ee:	c6 01       	movw	r24, r12
    31f0:	0c 96       	adiw	r24, 0x0c	; 12
    31f2:	15 da       	rcall	.-3030   	; 0x261e <vListInitialiseItem>
    31f4:	f6 01       	movw	r30, r12
    31f6:	d1 86       	std	Z+9, r13	; 0x09
    31f8:	c0 86       	std	Z+8, r12	; 0x08
    31fa:	84 e0       	ldi	r24, 0x04	; 4
    31fc:	90 e0       	ldi	r25, 0x00	; 0
    31fe:	80 1b       	sub	r24, r16
    3200:	91 09       	sbc	r25, r1
    3202:	95 87       	std	Z+13, r25	; 0x0d
    3204:	84 87       	std	Z+12, r24	; 0x0c
    3206:	d3 8a       	std	Z+19, r13	; 0x13
    3208:	c2 8a       	std	Z+18, r12	; 0x12
    320a:	13 a2       	std	Z+35, r1	; 0x23
    320c:	14 a2       	std	Z+36, r1	; 0x24
    320e:	15 a2       	std	Z+37, r1	; 0x25
    3210:	16 a2       	std	Z+38, r1	; 0x26
    3212:	17 a2       	std	Z+39, r1	; 0x27
    3214:	a3 01       	movw	r20, r6
    3216:	b4 01       	movw	r22, r8
    3218:	c5 01       	movw	r24, r10
    321a:	7e da       	rcall	.-2820   	; 0x2718 <pxPortInitialiseStack>
    321c:	f6 01       	movw	r30, r12
    321e:	91 83       	std	Z+1, r25	; 0x01
    3220:	80 83       	st	Z, r24
    3222:	0f b6       	in	r0, 0x3f	; 63
    3224:	f8 94       	cli
    3226:	0f 92       	push	r0
    3228:	80 91 7b 0c 	lds	r24, 0x0C7B	; 0x800c7b <uxCurrentNumberOfTasks>
    322c:	8f 5f       	subi	r24, 0xFF	; 255
    322e:	80 93 7b 0c 	sts	0x0C7B, r24	; 0x800c7b <uxCurrentNumberOfTasks>
    3232:	80 91 b7 0c 	lds	r24, 0x0CB7	; 0x800cb7 <pxCurrentTCB>
    3236:	90 91 b8 0c 	lds	r25, 0x0CB8	; 0x800cb8 <pxCurrentTCB+0x1>
    323a:	89 2b       	or	r24, r25
    323c:	69 f5       	brne	.+90     	; 0x3298 <xTaskCreateStatic+0x13e>
    323e:	d0 92 b8 0c 	sts	0x0CB8, r13	; 0x800cb8 <pxCurrentTCB+0x1>
    3242:	c0 92 b7 0c 	sts	0x0CB7, r12	; 0x800cb7 <pxCurrentTCB>
    3246:	80 91 7b 0c 	lds	r24, 0x0C7B	; 0x800c7b <uxCurrentNumberOfTasks>
    324a:	81 30       	cpi	r24, 0x01	; 1
    324c:	b1 f5       	brne	.+108    	; 0x32ba <xTaskCreateStatic+0x160>
    324e:	83 e9       	ldi	r24, 0x93	; 147
    3250:	9c e0       	ldi	r25, 0x0C	; 12
    3252:	d7 d9       	rcall	.-3154   	; 0x2602 <vListInitialise>
    3254:	8c e9       	ldi	r24, 0x9C	; 156
    3256:	9c e0       	ldi	r25, 0x0C	; 12
    3258:	d4 d9       	rcall	.-3160   	; 0x2602 <vListInitialise>
    325a:	85 ea       	ldi	r24, 0xA5	; 165
    325c:	9c e0       	ldi	r25, 0x0C	; 12
    325e:	d1 d9       	rcall	.-3166   	; 0x2602 <vListInitialise>
    3260:	8e ea       	ldi	r24, 0xAE	; 174
    3262:	9c e0       	ldi	r25, 0x0C	; 12
    3264:	ce d9       	rcall	.-3172   	; 0x2602 <vListInitialise>
    3266:	85 e6       	ldi	r24, 0x65	; 101
    3268:	9c e0       	ldi	r25, 0x0C	; 12
    326a:	cb d9       	rcall	.-3178   	; 0x2602 <vListInitialise>
    326c:	8c e5       	ldi	r24, 0x5C	; 92
    326e:	9c e0       	ldi	r25, 0x0C	; 12
    3270:	c8 d9       	rcall	.-3184   	; 0x2602 <vListInitialise>
    3272:	86 e8       	ldi	r24, 0x86	; 134
    3274:	9c e0       	ldi	r25, 0x0C	; 12
    3276:	c5 d9       	rcall	.-3190   	; 0x2602 <vListInitialise>
    3278:	8d e7       	ldi	r24, 0x7D	; 125
    327a:	9c e0       	ldi	r25, 0x0C	; 12
    327c:	c2 d9       	rcall	.-3196   	; 0x2602 <vListInitialise>
    327e:	85 e6       	ldi	r24, 0x65	; 101
    3280:	9c e0       	ldi	r25, 0x0C	; 12
    3282:	90 93 92 0c 	sts	0x0C92, r25	; 0x800c92 <pxDelayedTaskList+0x1>
    3286:	80 93 91 0c 	sts	0x0C91, r24	; 0x800c91 <pxDelayedTaskList>
    328a:	8c e5       	ldi	r24, 0x5C	; 92
    328c:	9c e0       	ldi	r25, 0x0C	; 12
    328e:	90 93 90 0c 	sts	0x0C90, r25	; 0x800c90 <pxOverflowDelayedTaskList+0x1>
    3292:	80 93 8f 0c 	sts	0x0C8F, r24	; 0x800c8f <pxOverflowDelayedTaskList>
    3296:	11 c0       	rjmp	.+34     	; 0x32ba <xTaskCreateStatic+0x160>
    3298:	80 91 77 0c 	lds	r24, 0x0C77	; 0x800c77 <xSchedulerRunning>
    329c:	81 11       	cpse	r24, r1
    329e:	0d c0       	rjmp	.+26     	; 0x32ba <xTaskCreateStatic+0x160>
    32a0:	e0 91 b7 0c 	lds	r30, 0x0CB7	; 0x800cb7 <pxCurrentTCB>
    32a4:	f0 91 b8 0c 	lds	r31, 0x0CB8	; 0x800cb8 <pxCurrentTCB+0x1>
    32a8:	96 89       	ldd	r25, Z+22	; 0x16
    32aa:	f6 01       	movw	r30, r12
    32ac:	86 89       	ldd	r24, Z+22	; 0x16
    32ae:	89 17       	cp	r24, r25
    32b0:	20 f0       	brcs	.+8      	; 0x32ba <xTaskCreateStatic+0x160>
    32b2:	d0 92 b8 0c 	sts	0x0CB8, r13	; 0x800cb8 <pxCurrentTCB+0x1>
    32b6:	c0 92 b7 0c 	sts	0x0CB7, r12	; 0x800cb7 <pxCurrentTCB>
    32ba:	80 91 73 0c 	lds	r24, 0x0C73	; 0x800c73 <uxTaskNumber>
    32be:	8f 5f       	subi	r24, 0xFF	; 255
    32c0:	80 93 73 0c 	sts	0x0C73, r24	; 0x800c73 <uxTaskNumber>
    32c4:	f6 01       	movw	r30, r12
    32c6:	86 89       	ldd	r24, Z+22	; 0x16
    32c8:	90 91 78 0c 	lds	r25, 0x0C78	; 0x800c78 <uxTopReadyPriority>
    32cc:	98 17       	cp	r25, r24
    32ce:	10 f4       	brcc	.+4      	; 0x32d4 <xTaskCreateStatic+0x17a>
    32d0:	80 93 78 0c 	sts	0x0C78, r24	; 0x800c78 <uxTopReadyPriority>
    32d4:	90 e0       	ldi	r25, 0x00	; 0
    32d6:	9c 01       	movw	r18, r24
    32d8:	22 0f       	add	r18, r18
    32da:	33 1f       	adc	r19, r19
    32dc:	22 0f       	add	r18, r18
    32de:	33 1f       	adc	r19, r19
    32e0:	22 0f       	add	r18, r18
    32e2:	33 1f       	adc	r19, r19
    32e4:	82 0f       	add	r24, r18
    32e6:	93 1f       	adc	r25, r19
    32e8:	be 01       	movw	r22, r28
    32ea:	8d 56       	subi	r24, 0x6D	; 109
    32ec:	93 4f       	sbci	r25, 0xF3	; 243
    32ee:	9b d9       	rcall	.-3274   	; 0x2626 <vListInsertEnd>
    32f0:	0f 90       	pop	r0
    32f2:	0f be       	out	0x3f, r0	; 63
    32f4:	80 91 77 0c 	lds	r24, 0x0C77	; 0x800c77 <xSchedulerRunning>
    32f8:	88 23       	and	r24, r24
    32fa:	99 f0       	breq	.+38     	; 0x3322 <xTaskCreateStatic+0x1c8>
    32fc:	e0 91 b7 0c 	lds	r30, 0x0CB7	; 0x800cb7 <pxCurrentTCB>
    3300:	f0 91 b8 0c 	lds	r31, 0x0CB8	; 0x800cb8 <pxCurrentTCB+0x1>
    3304:	96 89       	ldd	r25, Z+22	; 0x16
    3306:	e6 01       	movw	r28, r12
    3308:	8e 89       	ldd	r24, Y+22	; 0x16
    330a:	98 17       	cp	r25, r24
    330c:	68 f4       	brcc	.+26     	; 0x3328 <xTaskCreateStatic+0x1ce>
    330e:	b2 da       	rcall	.-2716   	; 0x2874 <vPortYield>
    3310:	8c 2d       	mov	r24, r12
    3312:	9d 2d       	mov	r25, r13
    3314:	0b c0       	rjmp	.+22     	; 0x332c <xTaskCreateStatic+0x1d2>
    3316:	80 e0       	ldi	r24, 0x00	; 0
    3318:	90 e0       	ldi	r25, 0x00	; 0
    331a:	08 c0       	rjmp	.+16     	; 0x332c <xTaskCreateStatic+0x1d2>
    331c:	80 e0       	ldi	r24, 0x00	; 0
    331e:	90 e0       	ldi	r25, 0x00	; 0
    3320:	05 c0       	rjmp	.+10     	; 0x332c <xTaskCreateStatic+0x1d2>
    3322:	8c 2d       	mov	r24, r12
    3324:	9d 2d       	mov	r25, r13
    3326:	02 c0       	rjmp	.+4      	; 0x332c <xTaskCreateStatic+0x1d2>
    3328:	8c 2d       	mov	r24, r12
    332a:	9d 2d       	mov	r25, r13
    332c:	df 91       	pop	r29
    332e:	cf 91       	pop	r28
    3330:	0f 91       	pop	r16
    3332:	ff 90       	pop	r15
    3334:	ef 90       	pop	r14
    3336:	df 90       	pop	r13
    3338:	cf 90       	pop	r12
    333a:	bf 90       	pop	r11
    333c:	af 90       	pop	r10
    333e:	9f 90       	pop	r9
    3340:	8f 90       	pop	r8
    3342:	7f 90       	pop	r7
    3344:	6f 90       	pop	r6
    3346:	08 95       	ret

00003348 <vTaskStartScheduler>:
    3348:	cf 92       	push	r12
    334a:	df 92       	push	r13
    334c:	ef 92       	push	r14
    334e:	ff 92       	push	r15
    3350:	0f 93       	push	r16
    3352:	cf 93       	push	r28
    3354:	df 93       	push	r29
    3356:	00 d0       	rcall	.+0      	; 0x3358 <vTaskStartScheduler+0x10>
    3358:	00 d0       	rcall	.+0      	; 0x335a <vTaskStartScheduler+0x12>
    335a:	cd b7       	in	r28, 0x3d	; 61
    335c:	de b7       	in	r29, 0x3e	; 62
    335e:	1e 82       	std	Y+6, r1	; 0x06
    3360:	1d 82       	std	Y+5, r1	; 0x05
    3362:	1c 82       	std	Y+4, r1	; 0x04
    3364:	1b 82       	std	Y+3, r1	; 0x03
    3366:	ae 01       	movw	r20, r28
    3368:	4f 5f       	subi	r20, 0xFF	; 255
    336a:	5f 4f       	sbci	r21, 0xFF	; 255
    336c:	be 01       	movw	r22, r28
    336e:	6d 5f       	subi	r22, 0xFD	; 253
    3370:	7f 4f       	sbci	r23, 0xFF	; 255
    3372:	ce 01       	movw	r24, r28
    3374:	05 96       	adiw	r24, 0x05	; 5
    3376:	25 d9       	rcall	.-3510   	; 0x25c2 <vApplicationGetIdleTaskMemory>
    3378:	cd 80       	ldd	r12, Y+5	; 0x05
    337a:	de 80       	ldd	r13, Y+6	; 0x06
    337c:	eb 80       	ldd	r14, Y+3	; 0x03
    337e:	fc 80       	ldd	r15, Y+4	; 0x04
    3380:	49 81       	ldd	r20, Y+1	; 0x01
    3382:	5a 81       	ldd	r21, Y+2	; 0x02
    3384:	00 e0       	ldi	r16, 0x00	; 0
    3386:	20 e0       	ldi	r18, 0x00	; 0
    3388:	30 e0       	ldi	r19, 0x00	; 0
    338a:	65 e6       	ldi	r22, 0x65	; 101
    338c:	72 e0       	ldi	r23, 0x02	; 2
    338e:	82 e7       	ldi	r24, 0x72	; 114
    3390:	90 e0       	ldi	r25, 0x00	; 0
    3392:	e3 de       	rcall	.-570    	; 0x315a <xTaskCreateStatic>
    3394:	90 93 70 0c 	sts	0x0C70, r25	; 0x800c70 <xIdleTaskHandle+0x1>
    3398:	80 93 6f 0c 	sts	0x0C6F, r24	; 0x800c6f <xIdleTaskHandle>
    339c:	89 2b       	or	r24, r25
    339e:	91 f0       	breq	.+36     	; 0x33c4 <vTaskStartScheduler+0x7c>
    33a0:	1c d4       	rcall	.+2104   	; 0x3bda <xTimerCreateTimerTask>
    33a2:	81 30       	cpi	r24, 0x01	; 1
    33a4:	79 f4       	brne	.+30     	; 0x33c4 <vTaskStartScheduler+0x7c>
    33a6:	f8 94       	cli
    33a8:	8f ef       	ldi	r24, 0xFF	; 255
    33aa:	9f ef       	ldi	r25, 0xFF	; 255
    33ac:	90 93 72 0c 	sts	0x0C72, r25	; 0x800c72 <xNextTaskUnblockTime+0x1>
    33b0:	80 93 71 0c 	sts	0x0C71, r24	; 0x800c71 <xNextTaskUnblockTime>
    33b4:	81 e0       	ldi	r24, 0x01	; 1
    33b6:	80 93 77 0c 	sts	0x0C77, r24	; 0x800c77 <xSchedulerRunning>
    33ba:	10 92 7a 0c 	sts	0x0C7A, r1	; 0x800c7a <xTickCount+0x1>
    33be:	10 92 79 0c 	sts	0x0C79, r1	; 0x800c79 <xTickCount>
    33c2:	1c da       	rcall	.-3016   	; 0x27fc <xPortStartScheduler>
    33c4:	26 96       	adiw	r28, 0x06	; 6
    33c6:	0f b6       	in	r0, 0x3f	; 63
    33c8:	f8 94       	cli
    33ca:	de bf       	out	0x3e, r29	; 62
    33cc:	0f be       	out	0x3f, r0	; 63
    33ce:	cd bf       	out	0x3d, r28	; 61
    33d0:	df 91       	pop	r29
    33d2:	cf 91       	pop	r28
    33d4:	0f 91       	pop	r16
    33d6:	ff 90       	pop	r15
    33d8:	ef 90       	pop	r14
    33da:	df 90       	pop	r13
    33dc:	cf 90       	pop	r12
    33de:	08 95       	ret

000033e0 <vTaskSuspendAll>:
    33e0:	80 91 6e 0c 	lds	r24, 0x0C6E	; 0x800c6e <uxSchedulerSuspended>
    33e4:	8f 5f       	subi	r24, 0xFF	; 255
    33e6:	80 93 6e 0c 	sts	0x0C6E, r24	; 0x800c6e <uxSchedulerSuspended>
    33ea:	08 95       	ret

000033ec <xTaskGetTickCount>:
    33ec:	0f b6       	in	r0, 0x3f	; 63
    33ee:	f8 94       	cli
    33f0:	0f 92       	push	r0
    33f2:	80 91 79 0c 	lds	r24, 0x0C79	; 0x800c79 <xTickCount>
    33f6:	90 91 7a 0c 	lds	r25, 0x0C7A	; 0x800c7a <xTickCount+0x1>
    33fa:	0f 90       	pop	r0
    33fc:	0f be       	out	0x3f, r0	; 63
    33fe:	08 95       	ret

00003400 <xTaskIncrementTick>:
    3400:	cf 92       	push	r12
    3402:	df 92       	push	r13
    3404:	ef 92       	push	r14
    3406:	ff 92       	push	r15
    3408:	0f 93       	push	r16
    340a:	1f 93       	push	r17
    340c:	cf 93       	push	r28
    340e:	df 93       	push	r29
    3410:	80 91 6e 0c 	lds	r24, 0x0C6E	; 0x800c6e <uxSchedulerSuspended>
    3414:	81 11       	cpse	r24, r1
    3416:	95 c0       	rjmp	.+298    	; 0x3542 <xTaskIncrementTick+0x142>
    3418:	e0 90 79 0c 	lds	r14, 0x0C79	; 0x800c79 <xTickCount>
    341c:	f0 90 7a 0c 	lds	r15, 0x0C7A	; 0x800c7a <xTickCount+0x1>
    3420:	8f ef       	ldi	r24, 0xFF	; 255
    3422:	e8 1a       	sub	r14, r24
    3424:	f8 0a       	sbc	r15, r24
    3426:	f0 92 7a 0c 	sts	0x0C7A, r15	; 0x800c7a <xTickCount+0x1>
    342a:	e0 92 79 0c 	sts	0x0C79, r14	; 0x800c79 <xTickCount>
    342e:	e1 14       	cp	r14, r1
    3430:	f1 04       	cpc	r15, r1
    3432:	b1 f4       	brne	.+44     	; 0x3460 <xTaskIncrementTick+0x60>
    3434:	80 91 91 0c 	lds	r24, 0x0C91	; 0x800c91 <pxDelayedTaskList>
    3438:	90 91 92 0c 	lds	r25, 0x0C92	; 0x800c92 <pxDelayedTaskList+0x1>
    343c:	20 91 8f 0c 	lds	r18, 0x0C8F	; 0x800c8f <pxOverflowDelayedTaskList>
    3440:	30 91 90 0c 	lds	r19, 0x0C90	; 0x800c90 <pxOverflowDelayedTaskList+0x1>
    3444:	30 93 92 0c 	sts	0x0C92, r19	; 0x800c92 <pxDelayedTaskList+0x1>
    3448:	20 93 91 0c 	sts	0x0C91, r18	; 0x800c91 <pxDelayedTaskList>
    344c:	90 93 90 0c 	sts	0x0C90, r25	; 0x800c90 <pxOverflowDelayedTaskList+0x1>
    3450:	80 93 8f 0c 	sts	0x0C8F, r24	; 0x800c8f <pxOverflowDelayedTaskList>
    3454:	80 91 74 0c 	lds	r24, 0x0C74	; 0x800c74 <xNumOfOverflows>
    3458:	8f 5f       	subi	r24, 0xFF	; 255
    345a:	80 93 74 0c 	sts	0x0C74, r24	; 0x800c74 <xNumOfOverflows>
    345e:	1d de       	rcall	.-966    	; 0x309a <prvResetNextTaskUnblockTime>
    3460:	80 91 71 0c 	lds	r24, 0x0C71	; 0x800c71 <xNextTaskUnblockTime>
    3464:	90 91 72 0c 	lds	r25, 0x0C72	; 0x800c72 <xNextTaskUnblockTime+0x1>
    3468:	e8 16       	cp	r14, r24
    346a:	f9 06       	cpc	r15, r25
    346c:	10 f4       	brcc	.+4      	; 0x3472 <xTaskIncrementTick+0x72>
    346e:	d1 2c       	mov	r13, r1
    3470:	50 c0       	rjmp	.+160    	; 0x3512 <xTaskIncrementTick+0x112>
    3472:	d1 2c       	mov	r13, r1
    3474:	cc 24       	eor	r12, r12
    3476:	c3 94       	inc	r12
    3478:	e0 91 91 0c 	lds	r30, 0x0C91	; 0x800c91 <pxDelayedTaskList>
    347c:	f0 91 92 0c 	lds	r31, 0x0C92	; 0x800c92 <pxDelayedTaskList+0x1>
    3480:	90 81       	ld	r25, Z
    3482:	91 11       	cpse	r25, r1
    3484:	07 c0       	rjmp	.+14     	; 0x3494 <xTaskIncrementTick+0x94>
    3486:	8f ef       	ldi	r24, 0xFF	; 255
    3488:	9f ef       	ldi	r25, 0xFF	; 255
    348a:	90 93 72 0c 	sts	0x0C72, r25	; 0x800c72 <xNextTaskUnblockTime+0x1>
    348e:	80 93 71 0c 	sts	0x0C71, r24	; 0x800c71 <xNextTaskUnblockTime>
    3492:	3f c0       	rjmp	.+126    	; 0x3512 <xTaskIncrementTick+0x112>
    3494:	e0 91 91 0c 	lds	r30, 0x0C91	; 0x800c91 <pxDelayedTaskList>
    3498:	f0 91 92 0c 	lds	r31, 0x0C92	; 0x800c92 <pxDelayedTaskList+0x1>
    349c:	05 80       	ldd	r0, Z+5	; 0x05
    349e:	f6 81       	ldd	r31, Z+6	; 0x06
    34a0:	e0 2d       	mov	r30, r0
    34a2:	c6 81       	ldd	r28, Z+6	; 0x06
    34a4:	d7 81       	ldd	r29, Z+7	; 0x07
    34a6:	2a 81       	ldd	r18, Y+2	; 0x02
    34a8:	3b 81       	ldd	r19, Y+3	; 0x03
    34aa:	e2 16       	cp	r14, r18
    34ac:	f3 06       	cpc	r15, r19
    34ae:	28 f4       	brcc	.+10     	; 0x34ba <xTaskIncrementTick+0xba>
    34b0:	30 93 72 0c 	sts	0x0C72, r19	; 0x800c72 <xNextTaskUnblockTime+0x1>
    34b4:	20 93 71 0c 	sts	0x0C71, r18	; 0x800c71 <xNextTaskUnblockTime>
    34b8:	2c c0       	rjmp	.+88     	; 0x3512 <xTaskIncrementTick+0x112>
    34ba:	8e 01       	movw	r16, r28
    34bc:	0e 5f       	subi	r16, 0xFE	; 254
    34be:	1f 4f       	sbci	r17, 0xFF	; 255
    34c0:	c8 01       	movw	r24, r16
    34c2:	03 d9       	rcall	.-3578   	; 0x26ca <uxListRemove>
    34c4:	8c 89       	ldd	r24, Y+20	; 0x14
    34c6:	9d 89       	ldd	r25, Y+21	; 0x15
    34c8:	89 2b       	or	r24, r25
    34ca:	19 f0       	breq	.+6      	; 0x34d2 <xTaskIncrementTick+0xd2>
    34cc:	ce 01       	movw	r24, r28
    34ce:	0c 96       	adiw	r24, 0x0c	; 12
    34d0:	fc d8       	rcall	.-3592   	; 0x26ca <uxListRemove>
    34d2:	2e 89       	ldd	r18, Y+22	; 0x16
    34d4:	80 91 78 0c 	lds	r24, 0x0C78	; 0x800c78 <uxTopReadyPriority>
    34d8:	82 17       	cp	r24, r18
    34da:	10 f4       	brcc	.+4      	; 0x34e0 <xTaskIncrementTick+0xe0>
    34dc:	20 93 78 0c 	sts	0x0C78, r18	; 0x800c78 <uxTopReadyPriority>
    34e0:	30 e0       	ldi	r19, 0x00	; 0
    34e2:	c9 01       	movw	r24, r18
    34e4:	88 0f       	add	r24, r24
    34e6:	99 1f       	adc	r25, r25
    34e8:	88 0f       	add	r24, r24
    34ea:	99 1f       	adc	r25, r25
    34ec:	88 0f       	add	r24, r24
    34ee:	99 1f       	adc	r25, r25
    34f0:	82 0f       	add	r24, r18
    34f2:	93 1f       	adc	r25, r19
    34f4:	b8 01       	movw	r22, r16
    34f6:	8d 56       	subi	r24, 0x6D	; 109
    34f8:	93 4f       	sbci	r25, 0xF3	; 243
    34fa:	95 d8       	rcall	.-3798   	; 0x2626 <vListInsertEnd>
    34fc:	e0 91 b7 0c 	lds	r30, 0x0CB7	; 0x800cb7 <pxCurrentTCB>
    3500:	f0 91 b8 0c 	lds	r31, 0x0CB8	; 0x800cb8 <pxCurrentTCB+0x1>
    3504:	9e 89       	ldd	r25, Y+22	; 0x16
    3506:	86 89       	ldd	r24, Z+22	; 0x16
    3508:	98 17       	cp	r25, r24
    350a:	08 f4       	brcc	.+2      	; 0x350e <xTaskIncrementTick+0x10e>
    350c:	b5 cf       	rjmp	.-150    	; 0x3478 <xTaskIncrementTick+0x78>
    350e:	dc 2c       	mov	r13, r12
    3510:	b3 cf       	rjmp	.-154    	; 0x3478 <xTaskIncrementTick+0x78>
    3512:	e0 91 b7 0c 	lds	r30, 0x0CB7	; 0x800cb7 <pxCurrentTCB>
    3516:	f0 91 b8 0c 	lds	r31, 0x0CB8	; 0x800cb8 <pxCurrentTCB+0x1>
    351a:	86 89       	ldd	r24, Z+22	; 0x16
    351c:	90 e0       	ldi	r25, 0x00	; 0
    351e:	fc 01       	movw	r30, r24
    3520:	ee 0f       	add	r30, r30
    3522:	ff 1f       	adc	r31, r31
    3524:	ee 0f       	add	r30, r30
    3526:	ff 1f       	adc	r31, r31
    3528:	ee 0f       	add	r30, r30
    352a:	ff 1f       	adc	r31, r31
    352c:	8e 0f       	add	r24, r30
    352e:	9f 1f       	adc	r25, r31
    3530:	fc 01       	movw	r30, r24
    3532:	ed 56       	subi	r30, 0x6D	; 109
    3534:	f3 4f       	sbci	r31, 0xF3	; 243
    3536:	80 81       	ld	r24, Z
    3538:	82 30       	cpi	r24, 0x02	; 2
    353a:	48 f0       	brcs	.+18     	; 0x354e <xTaskIncrementTick+0x14e>
    353c:	dd 24       	eor	r13, r13
    353e:	d3 94       	inc	r13
    3540:	06 c0       	rjmp	.+12     	; 0x354e <xTaskIncrementTick+0x14e>
    3542:	80 91 76 0c 	lds	r24, 0x0C76	; 0x800c76 <uxPendedTicks>
    3546:	8f 5f       	subi	r24, 0xFF	; 255
    3548:	80 93 76 0c 	sts	0x0C76, r24	; 0x800c76 <uxPendedTicks>
    354c:	d1 2c       	mov	r13, r1
    354e:	80 91 75 0c 	lds	r24, 0x0C75	; 0x800c75 <xYieldPending>
    3552:	88 23       	and	r24, r24
    3554:	11 f0       	breq	.+4      	; 0x355a <xTaskIncrementTick+0x15a>
    3556:	dd 24       	eor	r13, r13
    3558:	d3 94       	inc	r13
    355a:	8d 2d       	mov	r24, r13
    355c:	df 91       	pop	r29
    355e:	cf 91       	pop	r28
    3560:	1f 91       	pop	r17
    3562:	0f 91       	pop	r16
    3564:	ff 90       	pop	r15
    3566:	ef 90       	pop	r14
    3568:	df 90       	pop	r13
    356a:	cf 90       	pop	r12
    356c:	08 95       	ret

0000356e <xTaskResumeAll>:
    356e:	df 92       	push	r13
    3570:	ef 92       	push	r14
    3572:	ff 92       	push	r15
    3574:	0f 93       	push	r16
    3576:	1f 93       	push	r17
    3578:	cf 93       	push	r28
    357a:	df 93       	push	r29
    357c:	0f b6       	in	r0, 0x3f	; 63
    357e:	f8 94       	cli
    3580:	0f 92       	push	r0
    3582:	80 91 6e 0c 	lds	r24, 0x0C6E	; 0x800c6e <uxSchedulerSuspended>
    3586:	81 50       	subi	r24, 0x01	; 1
    3588:	80 93 6e 0c 	sts	0x0C6E, r24	; 0x800c6e <uxSchedulerSuspended>
    358c:	80 91 6e 0c 	lds	r24, 0x0C6E	; 0x800c6e <uxSchedulerSuspended>
    3590:	81 11       	cpse	r24, r1
    3592:	59 c0       	rjmp	.+178    	; 0x3646 <xTaskResumeAll+0xd8>
    3594:	80 91 7b 0c 	lds	r24, 0x0C7B	; 0x800c7b <uxCurrentNumberOfTasks>
    3598:	81 11       	cpse	r24, r1
    359a:	30 c0       	rjmp	.+96     	; 0x35fc <xTaskResumeAll+0x8e>
    359c:	57 c0       	rjmp	.+174    	; 0x364c <xTaskResumeAll+0xde>
    359e:	d7 01       	movw	r26, r14
    35a0:	15 96       	adiw	r26, 0x05	; 5
    35a2:	ed 91       	ld	r30, X+
    35a4:	fc 91       	ld	r31, X
    35a6:	16 97       	sbiw	r26, 0x06	; 6
    35a8:	c6 81       	ldd	r28, Z+6	; 0x06
    35aa:	d7 81       	ldd	r29, Z+7	; 0x07
    35ac:	ce 01       	movw	r24, r28
    35ae:	0c 96       	adiw	r24, 0x0c	; 12
    35b0:	8c d8       	rcall	.-3816   	; 0x26ca <uxListRemove>
    35b2:	8e 01       	movw	r16, r28
    35b4:	0e 5f       	subi	r16, 0xFE	; 254
    35b6:	1f 4f       	sbci	r17, 0xFF	; 255
    35b8:	c8 01       	movw	r24, r16
    35ba:	87 d8       	rcall	.-3826   	; 0x26ca <uxListRemove>
    35bc:	2e 89       	ldd	r18, Y+22	; 0x16
    35be:	80 91 78 0c 	lds	r24, 0x0C78	; 0x800c78 <uxTopReadyPriority>
    35c2:	82 17       	cp	r24, r18
    35c4:	10 f4       	brcc	.+4      	; 0x35ca <xTaskResumeAll+0x5c>
    35c6:	20 93 78 0c 	sts	0x0C78, r18	; 0x800c78 <uxTopReadyPriority>
    35ca:	30 e0       	ldi	r19, 0x00	; 0
    35cc:	c9 01       	movw	r24, r18
    35ce:	88 0f       	add	r24, r24
    35d0:	99 1f       	adc	r25, r25
    35d2:	88 0f       	add	r24, r24
    35d4:	99 1f       	adc	r25, r25
    35d6:	88 0f       	add	r24, r24
    35d8:	99 1f       	adc	r25, r25
    35da:	82 0f       	add	r24, r18
    35dc:	93 1f       	adc	r25, r19
    35de:	b8 01       	movw	r22, r16
    35e0:	8d 56       	subi	r24, 0x6D	; 109
    35e2:	93 4f       	sbci	r25, 0xF3	; 243
    35e4:	20 d8       	rcall	.-4032   	; 0x2626 <vListInsertEnd>
    35e6:	e0 91 b7 0c 	lds	r30, 0x0CB7	; 0x800cb7 <pxCurrentTCB>
    35ea:	f0 91 b8 0c 	lds	r31, 0x0CB8	; 0x800cb8 <pxCurrentTCB+0x1>
    35ee:	9e 89       	ldd	r25, Y+22	; 0x16
    35f0:	86 89       	ldd	r24, Z+22	; 0x16
    35f2:	98 17       	cp	r25, r24
    35f4:	68 f0       	brcs	.+26     	; 0x3610 <xTaskResumeAll+0xa2>
    35f6:	d0 92 75 0c 	sts	0x0C75, r13	; 0x800c75 <xYieldPending>
    35fa:	0a c0       	rjmp	.+20     	; 0x3610 <xTaskResumeAll+0xa2>
    35fc:	c0 e0       	ldi	r28, 0x00	; 0
    35fe:	d0 e0       	ldi	r29, 0x00	; 0
    3600:	0f 2e       	mov	r0, r31
    3602:	f6 e8       	ldi	r31, 0x86	; 134
    3604:	ef 2e       	mov	r14, r31
    3606:	fc e0       	ldi	r31, 0x0C	; 12
    3608:	ff 2e       	mov	r15, r31
    360a:	f0 2d       	mov	r31, r0
    360c:	dd 24       	eor	r13, r13
    360e:	d3 94       	inc	r13
    3610:	f7 01       	movw	r30, r14
    3612:	80 81       	ld	r24, Z
    3614:	81 11       	cpse	r24, r1
    3616:	c3 cf       	rjmp	.-122    	; 0x359e <xTaskResumeAll+0x30>
    3618:	cd 2b       	or	r28, r29
    361a:	09 f0       	breq	.+2      	; 0x361e <xTaskResumeAll+0xb0>
    361c:	3e dd       	rcall	.-1412   	; 0x309a <prvResetNextTaskUnblockTime>
    361e:	c0 91 76 0c 	lds	r28, 0x0C76	; 0x800c76 <uxPendedTicks>
    3622:	cc 23       	and	r28, r28
    3624:	49 f0       	breq	.+18     	; 0x3638 <xTaskResumeAll+0xca>
    3626:	d1 e0       	ldi	r29, 0x01	; 1
    3628:	eb de       	rcall	.-554    	; 0x3400 <xTaskIncrementTick>
    362a:	81 11       	cpse	r24, r1
    362c:	d0 93 75 0c 	sts	0x0C75, r29	; 0x800c75 <xYieldPending>
    3630:	c1 50       	subi	r28, 0x01	; 1
    3632:	d1 f7       	brne	.-12     	; 0x3628 <xTaskResumeAll+0xba>
    3634:	10 92 76 0c 	sts	0x0C76, r1	; 0x800c76 <uxPendedTicks>
    3638:	80 91 75 0c 	lds	r24, 0x0C75	; 0x800c75 <xYieldPending>
    363c:	88 23       	and	r24, r24
    363e:	29 f0       	breq	.+10     	; 0x364a <xTaskResumeAll+0xdc>
    3640:	19 d9       	rcall	.-3534   	; 0x2874 <vPortYield>
    3642:	81 e0       	ldi	r24, 0x01	; 1
    3644:	03 c0       	rjmp	.+6      	; 0x364c <xTaskResumeAll+0xde>
    3646:	80 e0       	ldi	r24, 0x00	; 0
    3648:	01 c0       	rjmp	.+2      	; 0x364c <xTaskResumeAll+0xde>
    364a:	80 e0       	ldi	r24, 0x00	; 0
    364c:	0f 90       	pop	r0
    364e:	0f be       	out	0x3f, r0	; 63
    3650:	df 91       	pop	r29
    3652:	cf 91       	pop	r28
    3654:	1f 91       	pop	r17
    3656:	0f 91       	pop	r16
    3658:	ff 90       	pop	r15
    365a:	ef 90       	pop	r14
    365c:	df 90       	pop	r13
    365e:	08 95       	ret

00003660 <vTaskDelay>:
    3660:	cf 93       	push	r28
    3662:	df 93       	push	r29
    3664:	ec 01       	movw	r28, r24
    3666:	89 2b       	or	r24, r25
    3668:	39 f0       	breq	.+14     	; 0x3678 <vTaskDelay+0x18>
    366a:	ba de       	rcall	.-652    	; 0x33e0 <vTaskSuspendAll>
    366c:	60 e0       	ldi	r22, 0x00	; 0
    366e:	ce 01       	movw	r24, r28
    3670:	33 dd       	rcall	.-1434   	; 0x30d8 <prvAddCurrentTaskToDelayedList>
    3672:	7d df       	rcall	.-262    	; 0x356e <xTaskResumeAll>
    3674:	81 11       	cpse	r24, r1
    3676:	01 c0       	rjmp	.+2      	; 0x367a <vTaskDelay+0x1a>
    3678:	fd d8       	rcall	.-3590   	; 0x2874 <vPortYield>
    367a:	df 91       	pop	r29
    367c:	cf 91       	pop	r28
    367e:	08 95       	ret

00003680 <vTaskSwitchContext>:
    3680:	80 91 6e 0c 	lds	r24, 0x0C6E	; 0x800c6e <uxSchedulerSuspended>
    3684:	88 23       	and	r24, r24
    3686:	21 f0       	breq	.+8      	; 0x3690 <vTaskSwitchContext+0x10>
    3688:	81 e0       	ldi	r24, 0x01	; 1
    368a:	80 93 75 0c 	sts	0x0C75, r24	; 0x800c75 <xYieldPending>
    368e:	08 95       	ret
    3690:	10 92 75 0c 	sts	0x0C75, r1	; 0x800c75 <xYieldPending>
    3694:	a0 91 b7 0c 	lds	r26, 0x0CB7	; 0x800cb7 <pxCurrentTCB>
    3698:	b0 91 b8 0c 	lds	r27, 0x0CB8	; 0x800cb8 <pxCurrentTCB+0x1>
    369c:	e0 91 b7 0c 	lds	r30, 0x0CB7	; 0x800cb7 <pxCurrentTCB>
    36a0:	f0 91 b8 0c 	lds	r31, 0x0CB8	; 0x800cb8 <pxCurrentTCB+0x1>
    36a4:	2d 91       	ld	r18, X+
    36a6:	3c 91       	ld	r19, X
    36a8:	87 89       	ldd	r24, Z+23	; 0x17
    36aa:	90 8d       	ldd	r25, Z+24	; 0x18
    36ac:	82 17       	cp	r24, r18
    36ae:	93 07       	cpc	r25, r19
    36b0:	60 f0       	brcs	.+24     	; 0x36ca <vTaskSwitchContext+0x4a>
    36b2:	60 91 b7 0c 	lds	r22, 0x0CB7	; 0x800cb7 <pxCurrentTCB>
    36b6:	70 91 b8 0c 	lds	r23, 0x0CB8	; 0x800cb8 <pxCurrentTCB+0x1>
    36ba:	80 91 b7 0c 	lds	r24, 0x0CB7	; 0x800cb7 <pxCurrentTCB>
    36be:	90 91 b8 0c 	lds	r25, 0x0CB8	; 0x800cb8 <pxCurrentTCB+0x1>
    36c2:	67 5e       	subi	r22, 0xE7	; 231
    36c4:	7f 4f       	sbci	r23, 0xFF	; 255
    36c6:	0e 94 d4 12 	call	0x25a8	; 0x25a8 <vApplicationStackOverflowHook>
    36ca:	20 91 78 0c 	lds	r18, 0x0C78	; 0x800c78 <uxTopReadyPriority>
    36ce:	82 2f       	mov	r24, r18
    36d0:	90 e0       	ldi	r25, 0x00	; 0
    36d2:	fc 01       	movw	r30, r24
    36d4:	ee 0f       	add	r30, r30
    36d6:	ff 1f       	adc	r31, r31
    36d8:	ee 0f       	add	r30, r30
    36da:	ff 1f       	adc	r31, r31
    36dc:	ee 0f       	add	r30, r30
    36de:	ff 1f       	adc	r31, r31
    36e0:	e8 0f       	add	r30, r24
    36e2:	f9 1f       	adc	r31, r25
    36e4:	ed 56       	subi	r30, 0x6D	; 109
    36e6:	f3 4f       	sbci	r31, 0xF3	; 243
    36e8:	30 81       	ld	r19, Z
    36ea:	31 11       	cpse	r19, r1
    36ec:	11 c0       	rjmp	.+34     	; 0x3710 <vTaskSwitchContext+0x90>
    36ee:	21 50       	subi	r18, 0x01	; 1
    36f0:	82 2f       	mov	r24, r18
    36f2:	90 e0       	ldi	r25, 0x00	; 0
    36f4:	fc 01       	movw	r30, r24
    36f6:	ee 0f       	add	r30, r30
    36f8:	ff 1f       	adc	r31, r31
    36fa:	ee 0f       	add	r30, r30
    36fc:	ff 1f       	adc	r31, r31
    36fe:	ee 0f       	add	r30, r30
    3700:	ff 1f       	adc	r31, r31
    3702:	e8 0f       	add	r30, r24
    3704:	f9 1f       	adc	r31, r25
    3706:	ed 56       	subi	r30, 0x6D	; 109
    3708:	f3 4f       	sbci	r31, 0xF3	; 243
    370a:	30 81       	ld	r19, Z
    370c:	33 23       	and	r19, r19
    370e:	79 f3       	breq	.-34     	; 0x36ee <vTaskSwitchContext+0x6e>
    3710:	ac 01       	movw	r20, r24
    3712:	44 0f       	add	r20, r20
    3714:	55 1f       	adc	r21, r21
    3716:	44 0f       	add	r20, r20
    3718:	55 1f       	adc	r21, r21
    371a:	44 0f       	add	r20, r20
    371c:	55 1f       	adc	r21, r21
    371e:	48 0f       	add	r20, r24
    3720:	59 1f       	adc	r21, r25
    3722:	da 01       	movw	r26, r20
    3724:	ad 56       	subi	r26, 0x6D	; 109
    3726:	b3 4f       	sbci	r27, 0xF3	; 243
    3728:	11 96       	adiw	r26, 0x01	; 1
    372a:	ed 91       	ld	r30, X+
    372c:	fc 91       	ld	r31, X
    372e:	12 97       	sbiw	r26, 0x02	; 2
    3730:	02 80       	ldd	r0, Z+2	; 0x02
    3732:	f3 81       	ldd	r31, Z+3	; 0x03
    3734:	e0 2d       	mov	r30, r0
    3736:	12 96       	adiw	r26, 0x02	; 2
    3738:	fc 93       	st	X, r31
    373a:	ee 93       	st	-X, r30
    373c:	11 97       	sbiw	r26, 0x01	; 1
    373e:	4a 56       	subi	r20, 0x6A	; 106
    3740:	53 4f       	sbci	r21, 0xF3	; 243
    3742:	e4 17       	cp	r30, r20
    3744:	f5 07       	cpc	r31, r21
    3746:	29 f4       	brne	.+10     	; 0x3752 <vTaskSwitchContext+0xd2>
    3748:	42 81       	ldd	r20, Z+2	; 0x02
    374a:	53 81       	ldd	r21, Z+3	; 0x03
    374c:	fd 01       	movw	r30, r26
    374e:	52 83       	std	Z+2, r21	; 0x02
    3750:	41 83       	std	Z+1, r20	; 0x01
    3752:	fc 01       	movw	r30, r24
    3754:	ee 0f       	add	r30, r30
    3756:	ff 1f       	adc	r31, r31
    3758:	ee 0f       	add	r30, r30
    375a:	ff 1f       	adc	r31, r31
    375c:	ee 0f       	add	r30, r30
    375e:	ff 1f       	adc	r31, r31
    3760:	8e 0f       	add	r24, r30
    3762:	9f 1f       	adc	r25, r31
    3764:	fc 01       	movw	r30, r24
    3766:	ed 56       	subi	r30, 0x6D	; 109
    3768:	f3 4f       	sbci	r31, 0xF3	; 243
    376a:	01 80       	ldd	r0, Z+1	; 0x01
    376c:	f2 81       	ldd	r31, Z+2	; 0x02
    376e:	e0 2d       	mov	r30, r0
    3770:	86 81       	ldd	r24, Z+6	; 0x06
    3772:	97 81       	ldd	r25, Z+7	; 0x07
    3774:	90 93 b8 0c 	sts	0x0CB8, r25	; 0x800cb8 <pxCurrentTCB+0x1>
    3778:	80 93 b7 0c 	sts	0x0CB7, r24	; 0x800cb7 <pxCurrentTCB>
    377c:	20 93 78 0c 	sts	0x0C78, r18	; 0x800c78 <uxTopReadyPriority>
    3780:	08 95       	ret

00003782 <vTaskPlaceOnEventList>:
    3782:	cf 93       	push	r28
    3784:	df 93       	push	r29
    3786:	eb 01       	movw	r28, r22
    3788:	20 91 b7 0c 	lds	r18, 0x0CB7	; 0x800cb7 <pxCurrentTCB>
    378c:	30 91 b8 0c 	lds	r19, 0x0CB8	; 0x800cb8 <pxCurrentTCB+0x1>
    3790:	b9 01       	movw	r22, r18
    3792:	64 5f       	subi	r22, 0xF4	; 244
    3794:	7f 4f       	sbci	r23, 0xFF	; 255
    3796:	0e 94 34 13 	call	0x2668	; 0x2668 <vListInsert>
    379a:	61 e0       	ldi	r22, 0x01	; 1
    379c:	ce 01       	movw	r24, r28
    379e:	9c dc       	rcall	.-1736   	; 0x30d8 <prvAddCurrentTaskToDelayedList>
    37a0:	df 91       	pop	r29
    37a2:	cf 91       	pop	r28
    37a4:	08 95       	ret

000037a6 <vTaskPlaceOnEventListRestricted>:
    37a6:	0f 93       	push	r16
    37a8:	1f 93       	push	r17
    37aa:	cf 93       	push	r28
    37ac:	8b 01       	movw	r16, r22
    37ae:	c4 2f       	mov	r28, r20
    37b0:	20 91 b7 0c 	lds	r18, 0x0CB7	; 0x800cb7 <pxCurrentTCB>
    37b4:	30 91 b8 0c 	lds	r19, 0x0CB8	; 0x800cb8 <pxCurrentTCB+0x1>
    37b8:	b9 01       	movw	r22, r18
    37ba:	64 5f       	subi	r22, 0xF4	; 244
    37bc:	7f 4f       	sbci	r23, 0xFF	; 255
    37be:	0e 94 13 13 	call	0x2626	; 0x2626 <vListInsertEnd>
    37c2:	cc 23       	and	r28, r28
    37c4:	11 f0       	breq	.+4      	; 0x37ca <vTaskPlaceOnEventListRestricted+0x24>
    37c6:	0f ef       	ldi	r16, 0xFF	; 255
    37c8:	1f ef       	ldi	r17, 0xFF	; 255
    37ca:	6c 2f       	mov	r22, r28
    37cc:	c8 01       	movw	r24, r16
    37ce:	84 dc       	rcall	.-1784   	; 0x30d8 <prvAddCurrentTaskToDelayedList>
    37d0:	cf 91       	pop	r28
    37d2:	1f 91       	pop	r17
    37d4:	0f 91       	pop	r16
    37d6:	08 95       	ret

000037d8 <xTaskRemoveFromEventList>:
    37d8:	0f 93       	push	r16
    37da:	1f 93       	push	r17
    37dc:	cf 93       	push	r28
    37de:	df 93       	push	r29
    37e0:	dc 01       	movw	r26, r24
    37e2:	15 96       	adiw	r26, 0x05	; 5
    37e4:	ed 91       	ld	r30, X+
    37e6:	fc 91       	ld	r31, X
    37e8:	16 97       	sbiw	r26, 0x06	; 6
    37ea:	c6 81       	ldd	r28, Z+6	; 0x06
    37ec:	d7 81       	ldd	r29, Z+7	; 0x07
    37ee:	8e 01       	movw	r16, r28
    37f0:	04 5f       	subi	r16, 0xF4	; 244
    37f2:	1f 4f       	sbci	r17, 0xFF	; 255
    37f4:	c8 01       	movw	r24, r16
    37f6:	0e 94 65 13 	call	0x26ca	; 0x26ca <uxListRemove>
    37fa:	80 91 6e 0c 	lds	r24, 0x0C6E	; 0x800c6e <uxSchedulerSuspended>
    37fe:	81 11       	cpse	r24, r1
    3800:	1c c0       	rjmp	.+56     	; 0x383a <xTaskRemoveFromEventList+0x62>
    3802:	0a 50       	subi	r16, 0x0A	; 10
    3804:	11 09       	sbc	r17, r1
    3806:	c8 01       	movw	r24, r16
    3808:	0e 94 65 13 	call	0x26ca	; 0x26ca <uxListRemove>
    380c:	2e 89       	ldd	r18, Y+22	; 0x16
    380e:	80 91 78 0c 	lds	r24, 0x0C78	; 0x800c78 <uxTopReadyPriority>
    3812:	82 17       	cp	r24, r18
    3814:	10 f4       	brcc	.+4      	; 0x381a <xTaskRemoveFromEventList+0x42>
    3816:	20 93 78 0c 	sts	0x0C78, r18	; 0x800c78 <uxTopReadyPriority>
    381a:	30 e0       	ldi	r19, 0x00	; 0
    381c:	c9 01       	movw	r24, r18
    381e:	88 0f       	add	r24, r24
    3820:	99 1f       	adc	r25, r25
    3822:	88 0f       	add	r24, r24
    3824:	99 1f       	adc	r25, r25
    3826:	88 0f       	add	r24, r24
    3828:	99 1f       	adc	r25, r25
    382a:	82 0f       	add	r24, r18
    382c:	93 1f       	adc	r25, r19
    382e:	b8 01       	movw	r22, r16
    3830:	8d 56       	subi	r24, 0x6D	; 109
    3832:	93 4f       	sbci	r25, 0xF3	; 243
    3834:	0e 94 13 13 	call	0x2626	; 0x2626 <vListInsertEnd>
    3838:	05 c0       	rjmp	.+10     	; 0x3844 <xTaskRemoveFromEventList+0x6c>
    383a:	b8 01       	movw	r22, r16
    383c:	86 e8       	ldi	r24, 0x86	; 134
    383e:	9c e0       	ldi	r25, 0x0C	; 12
    3840:	0e 94 13 13 	call	0x2626	; 0x2626 <vListInsertEnd>
    3844:	e0 91 b7 0c 	lds	r30, 0x0CB7	; 0x800cb7 <pxCurrentTCB>
    3848:	f0 91 b8 0c 	lds	r31, 0x0CB8	; 0x800cb8 <pxCurrentTCB+0x1>
    384c:	9e 89       	ldd	r25, Y+22	; 0x16
    384e:	86 89       	ldd	r24, Z+22	; 0x16
    3850:	89 17       	cp	r24, r25
    3852:	20 f4       	brcc	.+8      	; 0x385c <xTaskRemoveFromEventList+0x84>
    3854:	81 e0       	ldi	r24, 0x01	; 1
    3856:	80 93 75 0c 	sts	0x0C75, r24	; 0x800c75 <xYieldPending>
    385a:	01 c0       	rjmp	.+2      	; 0x385e <xTaskRemoveFromEventList+0x86>
    385c:	80 e0       	ldi	r24, 0x00	; 0
    385e:	df 91       	pop	r29
    3860:	cf 91       	pop	r28
    3862:	1f 91       	pop	r17
    3864:	0f 91       	pop	r16
    3866:	08 95       	ret

00003868 <vTaskInternalSetTimeOutState>:
    3868:	20 91 74 0c 	lds	r18, 0x0C74	; 0x800c74 <xNumOfOverflows>
    386c:	fc 01       	movw	r30, r24
    386e:	20 83       	st	Z, r18
    3870:	20 91 79 0c 	lds	r18, 0x0C79	; 0x800c79 <xTickCount>
    3874:	30 91 7a 0c 	lds	r19, 0x0C7A	; 0x800c7a <xTickCount+0x1>
    3878:	32 83       	std	Z+2, r19	; 0x02
    387a:	21 83       	std	Z+1, r18	; 0x01
    387c:	08 95       	ret

0000387e <xTaskCheckForTimeOut>:
    387e:	0f b6       	in	r0, 0x3f	; 63
    3880:	f8 94       	cli
    3882:	0f 92       	push	r0
    3884:	20 91 79 0c 	lds	r18, 0x0C79	; 0x800c79 <xTickCount>
    3888:	30 91 7a 0c 	lds	r19, 0x0C7A	; 0x800c7a <xTickCount+0x1>
    388c:	dc 01       	movw	r26, r24
    388e:	11 96       	adiw	r26, 0x01	; 1
    3890:	4d 91       	ld	r20, X+
    3892:	5c 91       	ld	r21, X
    3894:	12 97       	sbiw	r26, 0x02	; 2
    3896:	e0 91 74 0c 	lds	r30, 0x0C74	; 0x800c74 <xNumOfOverflows>
    389a:	fc 91       	ld	r31, X
    389c:	fe 17       	cp	r31, r30
    389e:	19 f0       	breq	.+6      	; 0x38a6 <xTaskCheckForTimeOut+0x28>
    38a0:	24 17       	cp	r18, r20
    38a2:	35 07       	cpc	r19, r21
    38a4:	98 f4       	brcc	.+38     	; 0x38cc <xTaskCheckForTimeOut+0x4e>
    38a6:	24 1b       	sub	r18, r20
    38a8:	35 0b       	sbc	r19, r21
    38aa:	fb 01       	movw	r30, r22
    38ac:	40 81       	ld	r20, Z
    38ae:	51 81       	ldd	r21, Z+1	; 0x01
    38b0:	24 17       	cp	r18, r20
    38b2:	35 07       	cpc	r19, r21
    38b4:	38 f4       	brcc	.+14     	; 0x38c4 <xTaskCheckForTimeOut+0x46>
    38b6:	42 1b       	sub	r20, r18
    38b8:	53 0b       	sbc	r21, r19
    38ba:	51 83       	std	Z+1, r21	; 0x01
    38bc:	40 83       	st	Z, r20
    38be:	d4 df       	rcall	.-88     	; 0x3868 <vTaskInternalSetTimeOutState>
    38c0:	80 e0       	ldi	r24, 0x00	; 0
    38c2:	05 c0       	rjmp	.+10     	; 0x38ce <xTaskCheckForTimeOut+0x50>
    38c4:	11 82       	std	Z+1, r1	; 0x01
    38c6:	10 82       	st	Z, r1
    38c8:	81 e0       	ldi	r24, 0x01	; 1
    38ca:	01 c0       	rjmp	.+2      	; 0x38ce <xTaskCheckForTimeOut+0x50>
    38cc:	81 e0       	ldi	r24, 0x01	; 1
    38ce:	0f 90       	pop	r0
    38d0:	0f be       	out	0x3f, r0	; 63
    38d2:	08 95       	ret

000038d4 <vTaskMissedYield>:
    38d4:	81 e0       	ldi	r24, 0x01	; 1
    38d6:	80 93 75 0c 	sts	0x0C75, r24	; 0x800c75 <xYieldPending>
    38da:	08 95       	ret

000038dc <xTaskGetSchedulerState>:
    38dc:	80 91 77 0c 	lds	r24, 0x0C77	; 0x800c77 <xSchedulerRunning>
    38e0:	88 23       	and	r24, r24
    38e2:	31 f0       	breq	.+12     	; 0x38f0 <xTaskGetSchedulerState+0x14>
    38e4:	80 91 6e 0c 	lds	r24, 0x0C6E	; 0x800c6e <uxSchedulerSuspended>
    38e8:	88 23       	and	r24, r24
    38ea:	21 f0       	breq	.+8      	; 0x38f4 <xTaskGetSchedulerState+0x18>
    38ec:	80 e0       	ldi	r24, 0x00	; 0
    38ee:	08 95       	ret
    38f0:	81 e0       	ldi	r24, 0x01	; 1
    38f2:	08 95       	ret
    38f4:	82 e0       	ldi	r24, 0x02	; 2
    38f6:	08 95       	ret

000038f8 <xTaskPriorityInherit>:
    38f8:	0f 93       	push	r16
    38fa:	1f 93       	push	r17
    38fc:	cf 93       	push	r28
    38fe:	df 93       	push	r29
    3900:	fc 01       	movw	r30, r24
    3902:	89 2b       	or	r24, r25
    3904:	09 f4       	brne	.+2      	; 0x3908 <xTaskPriorityInherit+0x10>
    3906:	64 c0       	rjmp	.+200    	; 0x39d0 <xTaskPriorityInherit+0xd8>
    3908:	26 89       	ldd	r18, Z+22	; 0x16
    390a:	a0 91 b7 0c 	lds	r26, 0x0CB7	; 0x800cb7 <pxCurrentTCB>
    390e:	b0 91 b8 0c 	lds	r27, 0x0CB8	; 0x800cb8 <pxCurrentTCB+0x1>
    3912:	56 96       	adiw	r26, 0x16	; 22
    3914:	8c 91       	ld	r24, X
    3916:	28 17       	cp	r18, r24
    3918:	08 f0       	brcs	.+2      	; 0x391c <xTaskPriorityInherit+0x24>
    391a:	4e c0       	rjmp	.+156    	; 0x39b8 <xTaskPriorityInherit+0xc0>
    391c:	84 85       	ldd	r24, Z+12	; 0x0c
    391e:	95 85       	ldd	r25, Z+13	; 0x0d
    3920:	99 23       	and	r25, r25
    3922:	64 f0       	brlt	.+24     	; 0x393c <xTaskPriorityInherit+0x44>
    3924:	a0 91 b7 0c 	lds	r26, 0x0CB7	; 0x800cb7 <pxCurrentTCB>
    3928:	b0 91 b8 0c 	lds	r27, 0x0CB8	; 0x800cb8 <pxCurrentTCB+0x1>
    392c:	56 96       	adiw	r26, 0x16	; 22
    392e:	3c 91       	ld	r19, X
    3930:	84 e0       	ldi	r24, 0x04	; 4
    3932:	90 e0       	ldi	r25, 0x00	; 0
    3934:	83 1b       	sub	r24, r19
    3936:	91 09       	sbc	r25, r1
    3938:	95 87       	std	Z+13, r25	; 0x0d
    393a:	84 87       	std	Z+12, r24	; 0x0c
    393c:	30 e0       	ldi	r19, 0x00	; 0
    393e:	c9 01       	movw	r24, r18
    3940:	88 0f       	add	r24, r24
    3942:	99 1f       	adc	r25, r25
    3944:	88 0f       	add	r24, r24
    3946:	99 1f       	adc	r25, r25
    3948:	88 0f       	add	r24, r24
    394a:	99 1f       	adc	r25, r25
    394c:	28 0f       	add	r18, r24
    394e:	39 1f       	adc	r19, r25
    3950:	2d 56       	subi	r18, 0x6D	; 109
    3952:	33 4f       	sbci	r19, 0xF3	; 243
    3954:	82 85       	ldd	r24, Z+10	; 0x0a
    3956:	93 85       	ldd	r25, Z+11	; 0x0b
    3958:	82 17       	cp	r24, r18
    395a:	93 07       	cpc	r25, r19
    395c:	21 f5       	brne	.+72     	; 0x39a6 <xTaskPriorityInherit+0xae>
    395e:	8f 01       	movw	r16, r30
    3960:	ef 01       	movw	r28, r30
    3962:	22 96       	adiw	r28, 0x02	; 2
    3964:	ce 01       	movw	r24, r28
    3966:	0e 94 65 13 	call	0x26ca	; 0x26ca <uxListRemove>
    396a:	e0 91 b7 0c 	lds	r30, 0x0CB7	; 0x800cb7 <pxCurrentTCB>
    396e:	f0 91 b8 0c 	lds	r31, 0x0CB8	; 0x800cb8 <pxCurrentTCB+0x1>
    3972:	26 89       	ldd	r18, Z+22	; 0x16
    3974:	f8 01       	movw	r30, r16
    3976:	26 8b       	std	Z+22, r18	; 0x16
    3978:	80 91 78 0c 	lds	r24, 0x0C78	; 0x800c78 <uxTopReadyPriority>
    397c:	82 17       	cp	r24, r18
    397e:	10 f4       	brcc	.+4      	; 0x3984 <xTaskPriorityInherit+0x8c>
    3980:	20 93 78 0c 	sts	0x0C78, r18	; 0x800c78 <uxTopReadyPriority>
    3984:	30 e0       	ldi	r19, 0x00	; 0
    3986:	c9 01       	movw	r24, r18
    3988:	88 0f       	add	r24, r24
    398a:	99 1f       	adc	r25, r25
    398c:	88 0f       	add	r24, r24
    398e:	99 1f       	adc	r25, r25
    3990:	88 0f       	add	r24, r24
    3992:	99 1f       	adc	r25, r25
    3994:	82 0f       	add	r24, r18
    3996:	93 1f       	adc	r25, r19
    3998:	be 01       	movw	r22, r28
    399a:	8d 56       	subi	r24, 0x6D	; 109
    399c:	93 4f       	sbci	r25, 0xF3	; 243
    399e:	0e 94 13 13 	call	0x2626	; 0x2626 <vListInsertEnd>
    39a2:	81 e0       	ldi	r24, 0x01	; 1
    39a4:	16 c0       	rjmp	.+44     	; 0x39d2 <xTaskPriorityInherit+0xda>
    39a6:	a0 91 b7 0c 	lds	r26, 0x0CB7	; 0x800cb7 <pxCurrentTCB>
    39aa:	b0 91 b8 0c 	lds	r27, 0x0CB8	; 0x800cb8 <pxCurrentTCB+0x1>
    39ae:	56 96       	adiw	r26, 0x16	; 22
    39b0:	8c 91       	ld	r24, X
    39b2:	86 8b       	std	Z+22, r24	; 0x16
    39b4:	81 e0       	ldi	r24, 0x01	; 1
    39b6:	0d c0       	rjmp	.+26     	; 0x39d2 <xTaskPriorityInherit+0xda>
    39b8:	a0 91 b7 0c 	lds	r26, 0x0CB7	; 0x800cb7 <pxCurrentTCB>
    39bc:	b0 91 b8 0c 	lds	r27, 0x0CB8	; 0x800cb8 <pxCurrentTCB+0x1>
    39c0:	81 e0       	ldi	r24, 0x01	; 1
    39c2:	21 a1       	ldd	r18, Z+33	; 0x21
    39c4:	56 96       	adiw	r26, 0x16	; 22
    39c6:	9c 91       	ld	r25, X
    39c8:	29 17       	cp	r18, r25
    39ca:	18 f0       	brcs	.+6      	; 0x39d2 <xTaskPriorityInherit+0xda>
    39cc:	80 e0       	ldi	r24, 0x00	; 0
    39ce:	01 c0       	rjmp	.+2      	; 0x39d2 <xTaskPriorityInherit+0xda>
    39d0:	80 e0       	ldi	r24, 0x00	; 0
    39d2:	df 91       	pop	r29
    39d4:	cf 91       	pop	r28
    39d6:	1f 91       	pop	r17
    39d8:	0f 91       	pop	r16
    39da:	08 95       	ret

000039dc <xTaskPriorityDisinherit>:
    39dc:	0f 93       	push	r16
    39de:	1f 93       	push	r17
    39e0:	cf 93       	push	r28
    39e2:	df 93       	push	r29
    39e4:	fc 01       	movw	r30, r24
    39e6:	89 2b       	or	r24, r25
    39e8:	79 f1       	breq	.+94     	; 0x3a48 <xTaskPriorityDisinherit+0x6c>
    39ea:	82 a1       	ldd	r24, Z+34	; 0x22
    39ec:	81 50       	subi	r24, 0x01	; 1
    39ee:	82 a3       	std	Z+34, r24	; 0x22
    39f0:	26 89       	ldd	r18, Z+22	; 0x16
    39f2:	91 a1       	ldd	r25, Z+33	; 0x21
    39f4:	29 17       	cp	r18, r25
    39f6:	51 f1       	breq	.+84     	; 0x3a4c <xTaskPriorityDisinherit+0x70>
    39f8:	81 11       	cpse	r24, r1
    39fa:	2a c0       	rjmp	.+84     	; 0x3a50 <xTaskPriorityDisinherit+0x74>
    39fc:	ef 01       	movw	r28, r30
    39fe:	8f 01       	movw	r16, r30
    3a00:	0e 5f       	subi	r16, 0xFE	; 254
    3a02:	1f 4f       	sbci	r17, 0xFF	; 255
    3a04:	c8 01       	movw	r24, r16
    3a06:	0e 94 65 13 	call	0x26ca	; 0x26ca <uxListRemove>
    3a0a:	29 a1       	ldd	r18, Y+33	; 0x21
    3a0c:	2e 8b       	std	Y+22, r18	; 0x16
    3a0e:	44 e0       	ldi	r20, 0x04	; 4
    3a10:	50 e0       	ldi	r21, 0x00	; 0
    3a12:	42 1b       	sub	r20, r18
    3a14:	51 09       	sbc	r21, r1
    3a16:	5d 87       	std	Y+13, r21	; 0x0d
    3a18:	4c 87       	std	Y+12, r20	; 0x0c
    3a1a:	80 91 78 0c 	lds	r24, 0x0C78	; 0x800c78 <uxTopReadyPriority>
    3a1e:	82 17       	cp	r24, r18
    3a20:	10 f4       	brcc	.+4      	; 0x3a26 <xTaskPriorityDisinherit+0x4a>
    3a22:	20 93 78 0c 	sts	0x0C78, r18	; 0x800c78 <uxTopReadyPriority>
    3a26:	30 e0       	ldi	r19, 0x00	; 0
    3a28:	c9 01       	movw	r24, r18
    3a2a:	88 0f       	add	r24, r24
    3a2c:	99 1f       	adc	r25, r25
    3a2e:	88 0f       	add	r24, r24
    3a30:	99 1f       	adc	r25, r25
    3a32:	88 0f       	add	r24, r24
    3a34:	99 1f       	adc	r25, r25
    3a36:	82 0f       	add	r24, r18
    3a38:	93 1f       	adc	r25, r19
    3a3a:	b8 01       	movw	r22, r16
    3a3c:	8d 56       	subi	r24, 0x6D	; 109
    3a3e:	93 4f       	sbci	r25, 0xF3	; 243
    3a40:	0e 94 13 13 	call	0x2626	; 0x2626 <vListInsertEnd>
    3a44:	81 e0       	ldi	r24, 0x01	; 1
    3a46:	05 c0       	rjmp	.+10     	; 0x3a52 <xTaskPriorityDisinherit+0x76>
    3a48:	80 e0       	ldi	r24, 0x00	; 0
    3a4a:	03 c0       	rjmp	.+6      	; 0x3a52 <xTaskPriorityDisinherit+0x76>
    3a4c:	80 e0       	ldi	r24, 0x00	; 0
    3a4e:	01 c0       	rjmp	.+2      	; 0x3a52 <xTaskPriorityDisinherit+0x76>
    3a50:	80 e0       	ldi	r24, 0x00	; 0
    3a52:	df 91       	pop	r29
    3a54:	cf 91       	pop	r28
    3a56:	1f 91       	pop	r17
    3a58:	0f 91       	pop	r16
    3a5a:	08 95       	ret

00003a5c <vTaskPriorityDisinheritAfterTimeout>:
    3a5c:	0f 93       	push	r16
    3a5e:	1f 93       	push	r17
    3a60:	cf 93       	push	r28
    3a62:	df 93       	push	r29
    3a64:	fc 01       	movw	r30, r24
    3a66:	89 2b       	or	r24, r25
    3a68:	09 f4       	brne	.+2      	; 0x3a6c <vTaskPriorityDisinheritAfterTimeout+0x10>
    3a6a:	43 c0       	rjmp	.+134    	; 0x3af2 <vTaskPriorityDisinheritAfterTimeout+0x96>
    3a6c:	81 a1       	ldd	r24, Z+33	; 0x21
    3a6e:	68 17       	cp	r22, r24
    3a70:	08 f4       	brcc	.+2      	; 0x3a74 <vTaskPriorityDisinheritAfterTimeout+0x18>
    3a72:	68 2f       	mov	r22, r24
    3a74:	86 89       	ldd	r24, Z+22	; 0x16
    3a76:	86 17       	cp	r24, r22
    3a78:	e1 f1       	breq	.+120    	; 0x3af2 <vTaskPriorityDisinheritAfterTimeout+0x96>
    3a7a:	92 a1       	ldd	r25, Z+34	; 0x22
    3a7c:	91 30       	cpi	r25, 0x01	; 1
    3a7e:	c9 f5       	brne	.+114    	; 0x3af2 <vTaskPriorityDisinheritAfterTimeout+0x96>
    3a80:	66 8b       	std	Z+22, r22	; 0x16
    3a82:	24 85       	ldd	r18, Z+12	; 0x0c
    3a84:	35 85       	ldd	r19, Z+13	; 0x0d
    3a86:	33 23       	and	r19, r19
    3a88:	34 f0       	brlt	.+12     	; 0x3a96 <vTaskPriorityDisinheritAfterTimeout+0x3a>
    3a8a:	24 e0       	ldi	r18, 0x04	; 4
    3a8c:	30 e0       	ldi	r19, 0x00	; 0
    3a8e:	26 1b       	sub	r18, r22
    3a90:	31 09       	sbc	r19, r1
    3a92:	35 87       	std	Z+13, r19	; 0x0d
    3a94:	24 87       	std	Z+12, r18	; 0x0c
    3a96:	90 e0       	ldi	r25, 0x00	; 0
    3a98:	9c 01       	movw	r18, r24
    3a9a:	22 0f       	add	r18, r18
    3a9c:	33 1f       	adc	r19, r19
    3a9e:	22 0f       	add	r18, r18
    3aa0:	33 1f       	adc	r19, r19
    3aa2:	22 0f       	add	r18, r18
    3aa4:	33 1f       	adc	r19, r19
    3aa6:	82 0f       	add	r24, r18
    3aa8:	93 1f       	adc	r25, r19
    3aaa:	8d 56       	subi	r24, 0x6D	; 109
    3aac:	93 4f       	sbci	r25, 0xF3	; 243
    3aae:	22 85       	ldd	r18, Z+10	; 0x0a
    3ab0:	33 85       	ldd	r19, Z+11	; 0x0b
    3ab2:	28 17       	cp	r18, r24
    3ab4:	39 07       	cpc	r19, r25
    3ab6:	e9 f4       	brne	.+58     	; 0x3af2 <vTaskPriorityDisinheritAfterTimeout+0x96>
    3ab8:	ef 01       	movw	r28, r30
    3aba:	8f 01       	movw	r16, r30
    3abc:	0e 5f       	subi	r16, 0xFE	; 254
    3abe:	1f 4f       	sbci	r17, 0xFF	; 255
    3ac0:	c8 01       	movw	r24, r16
    3ac2:	0e 94 65 13 	call	0x26ca	; 0x26ca <uxListRemove>
    3ac6:	2e 89       	ldd	r18, Y+22	; 0x16
    3ac8:	80 91 78 0c 	lds	r24, 0x0C78	; 0x800c78 <uxTopReadyPriority>
    3acc:	82 17       	cp	r24, r18
    3ace:	10 f4       	brcc	.+4      	; 0x3ad4 <vTaskPriorityDisinheritAfterTimeout+0x78>
    3ad0:	20 93 78 0c 	sts	0x0C78, r18	; 0x800c78 <uxTopReadyPriority>
    3ad4:	30 e0       	ldi	r19, 0x00	; 0
    3ad6:	c9 01       	movw	r24, r18
    3ad8:	88 0f       	add	r24, r24
    3ada:	99 1f       	adc	r25, r25
    3adc:	88 0f       	add	r24, r24
    3ade:	99 1f       	adc	r25, r25
    3ae0:	88 0f       	add	r24, r24
    3ae2:	99 1f       	adc	r25, r25
    3ae4:	82 0f       	add	r24, r18
    3ae6:	93 1f       	adc	r25, r19
    3ae8:	b8 01       	movw	r22, r16
    3aea:	8d 56       	subi	r24, 0x6D	; 109
    3aec:	93 4f       	sbci	r25, 0xF3	; 243
    3aee:	0e 94 13 13 	call	0x2626	; 0x2626 <vListInsertEnd>
    3af2:	df 91       	pop	r29
    3af4:	cf 91       	pop	r28
    3af6:	1f 91       	pop	r17
    3af8:	0f 91       	pop	r16
    3afa:	08 95       	ret

00003afc <pvTaskIncrementMutexHeldCount>:

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
        then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
    3afc:	80 91 b7 0c 	lds	r24, 0x0CB7	; 0x800cb7 <pxCurrentTCB>
    3b00:	90 91 b8 0c 	lds	r25, 0x0CB8	; 0x800cb8 <pxCurrentTCB+0x1>
    3b04:	89 2b       	or	r24, r25
    3b06:	39 f0       	breq	.+14     	; 0x3b16 <pvTaskIncrementMutexHeldCount+0x1a>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
    3b08:	e0 91 b7 0c 	lds	r30, 0x0CB7	; 0x800cb7 <pxCurrentTCB>
    3b0c:	f0 91 b8 0c 	lds	r31, 0x0CB8	; 0x800cb8 <pxCurrentTCB+0x1>
    3b10:	82 a1       	ldd	r24, Z+34	; 0x22
    3b12:	8f 5f       	subi	r24, 0xFF	; 255
    3b14:	82 a3       	std	Z+34, r24	; 0x22
        }

        return pxCurrentTCB;
    3b16:	80 91 b7 0c 	lds	r24, 0x0CB7	; 0x800cb7 <pxCurrentTCB>
    3b1a:	90 91 b8 0c 	lds	r25, 0x0CB8	; 0x800cb8 <pxCurrentTCB+0x1>
    }
    3b1e:	08 95       	ret

00003b20 <prvInsertTimerInActiveList>:
            }
            #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
        }

        return pxNewTimer;
    }
    3b20:	fc 01       	movw	r30, r24
    3b22:	73 83       	std	Z+3, r23	; 0x03
    3b24:	62 83       	std	Z+2, r22	; 0x02
    3b26:	91 87       	std	Z+9, r25	; 0x09
    3b28:	80 87       	std	Z+8, r24	; 0x08
    3b2a:	46 17       	cp	r20, r22
    3b2c:	57 07       	cpc	r21, r23
    3b2e:	90 f0       	brcs	.+36     	; 0x3b54 <prvInsertTimerInActiveList+0x34>
    3b30:	42 1b       	sub	r20, r18
    3b32:	53 0b       	sbc	r21, r19
    3b34:	84 85       	ldd	r24, Z+12	; 0x0c
    3b36:	95 85       	ldd	r25, Z+13	; 0x0d
    3b38:	48 17       	cp	r20, r24
    3b3a:	59 07       	cpc	r21, r25
    3b3c:	e0 f4       	brcc	.+56     	; 0x3b76 <prvInsertTimerInActiveList+0x56>
    3b3e:	bf 01       	movw	r22, r30
    3b40:	6e 5f       	subi	r22, 0xFE	; 254
    3b42:	7f 4f       	sbci	r23, 0xFF	; 255
    3b44:	80 91 22 0d 	lds	r24, 0x0D22	; 0x800d22 <pxOverflowTimerList>
    3b48:	90 91 23 0d 	lds	r25, 0x0D23	; 0x800d23 <pxOverflowTimerList+0x1>
    3b4c:	0e 94 34 13 	call	0x2668	; 0x2668 <vListInsert>
    3b50:	80 e0       	ldi	r24, 0x00	; 0
    3b52:	08 95       	ret
    3b54:	42 17       	cp	r20, r18
    3b56:	53 07       	cpc	r21, r19
    3b58:	18 f4       	brcc	.+6      	; 0x3b60 <prvInsertTimerInActiveList+0x40>
    3b5a:	62 17       	cp	r22, r18
    3b5c:	73 07       	cpc	r23, r19
    3b5e:	68 f4       	brcc	.+26     	; 0x3b7a <prvInsertTimerInActiveList+0x5a>
    3b60:	bf 01       	movw	r22, r30
    3b62:	6e 5f       	subi	r22, 0xFE	; 254
    3b64:	7f 4f       	sbci	r23, 0xFF	; 255
    3b66:	80 91 24 0d 	lds	r24, 0x0D24	; 0x800d24 <pxCurrentTimerList>
    3b6a:	90 91 25 0d 	lds	r25, 0x0D25	; 0x800d25 <pxCurrentTimerList+0x1>
    3b6e:	0e 94 34 13 	call	0x2668	; 0x2668 <vListInsert>
    3b72:	80 e0       	ldi	r24, 0x00	; 0
    3b74:	08 95       	ret
    3b76:	81 e0       	ldi	r24, 0x01	; 1
    3b78:	08 95       	ret
    3b7a:	81 e0       	ldi	r24, 0x01	; 1
    3b7c:	08 95       	ret

00003b7e <prvCheckForValidListAndQueue>:
    3b7e:	0f 93       	push	r16
    3b80:	0f b6       	in	r0, 0x3f	; 63
    3b82:	f8 94       	cli
    3b84:	0f 92       	push	r0
    3b86:	80 91 20 0d 	lds	r24, 0x0D20	; 0x800d20 <xTimerQueue>
    3b8a:	90 91 21 0d 	lds	r25, 0x0D21	; 0x800d21 <xTimerQueue+0x1>
    3b8e:	89 2b       	or	r24, r25
    3b90:	01 f5       	brne	.+64     	; 0x3bd2 <prvCheckForValidListAndQueue+0x54>
    3b92:	83 e1       	ldi	r24, 0x13	; 19
    3b94:	9d e0       	ldi	r25, 0x0D	; 13
    3b96:	0e 94 01 13 	call	0x2602	; 0x2602 <vListInitialise>
    3b9a:	8a e0       	ldi	r24, 0x0A	; 10
    3b9c:	9d e0       	ldi	r25, 0x0D	; 13
    3b9e:	0e 94 01 13 	call	0x2602	; 0x2602 <vListInitialise>
    3ba2:	83 e1       	ldi	r24, 0x13	; 19
    3ba4:	9d e0       	ldi	r25, 0x0D	; 13
    3ba6:	90 93 25 0d 	sts	0x0D25, r25	; 0x800d25 <pxCurrentTimerList+0x1>
    3baa:	80 93 24 0d 	sts	0x0D24, r24	; 0x800d24 <pxCurrentTimerList>
    3bae:	8a e0       	ldi	r24, 0x0A	; 10
    3bb0:	9d e0       	ldi	r25, 0x0D	; 13
    3bb2:	90 93 23 0d 	sts	0x0D23, r25	; 0x800d23 <pxOverflowTimerList+0x1>
    3bb6:	80 93 22 0d 	sts	0x0D22, r24	; 0x800d22 <pxOverflowTimerList>
    3bba:	00 e0       	ldi	r16, 0x00	; 0
    3bbc:	29 eb       	ldi	r18, 0xB9	; 185
    3bbe:	3c e0       	ldi	r19, 0x0C	; 12
    3bc0:	48 ed       	ldi	r20, 0xD8	; 216
    3bc2:	5c e0       	ldi	r21, 0x0C	; 12
    3bc4:	65 e0       	ldi	r22, 0x05	; 5
    3bc6:	8a e0       	ldi	r24, 0x0A	; 10
    3bc8:	2a d8       	rcall	.-4012   	; 0x2c1e <xQueueGenericCreateStatic>
    3bca:	90 93 21 0d 	sts	0x0D21, r25	; 0x800d21 <xTimerQueue+0x1>
    3bce:	80 93 20 0d 	sts	0x0D20, r24	; 0x800d20 <xTimerQueue>
    3bd2:	0f 90       	pop	r0
    3bd4:	0f be       	out	0x3f, r0	; 63
    3bd6:	0f 91       	pop	r16
    3bd8:	08 95       	ret

00003bda <xTimerCreateTimerTask>:
    3bda:	cf 92       	push	r12
    3bdc:	df 92       	push	r13
    3bde:	ef 92       	push	r14
    3be0:	ff 92       	push	r15
    3be2:	0f 93       	push	r16
    3be4:	cf 93       	push	r28
    3be6:	df 93       	push	r29
    3be8:	00 d0       	rcall	.+0      	; 0x3bea <xTimerCreateTimerTask+0x10>
    3bea:	00 d0       	rcall	.+0      	; 0x3bec <xTimerCreateTimerTask+0x12>
    3bec:	cd b7       	in	r28, 0x3d	; 61
    3bee:	de b7       	in	r29, 0x3e	; 62
    3bf0:	c6 df       	rcall	.-116    	; 0x3b7e <prvCheckForValidListAndQueue>
    3bf2:	80 91 20 0d 	lds	r24, 0x0D20	; 0x800d20 <xTimerQueue>
    3bf6:	90 91 21 0d 	lds	r25, 0x0D21	; 0x800d21 <xTimerQueue+0x1>
    3bfa:	89 2b       	or	r24, r25
    3bfc:	31 f1       	breq	.+76     	; 0x3c4a <xTimerCreateTimerTask+0x70>
    3bfe:	1e 82       	std	Y+6, r1	; 0x06
    3c00:	1d 82       	std	Y+5, r1	; 0x05
    3c02:	1c 82       	std	Y+4, r1	; 0x04
    3c04:	1b 82       	std	Y+3, r1	; 0x03
    3c06:	ae 01       	movw	r20, r28
    3c08:	4f 5f       	subi	r20, 0xFF	; 255
    3c0a:	5f 4f       	sbci	r21, 0xFF	; 255
    3c0c:	be 01       	movw	r22, r28
    3c0e:	6d 5f       	subi	r22, 0xFD	; 253
    3c10:	7f 4f       	sbci	r23, 0xFF	; 255
    3c12:	ce 01       	movw	r24, r28
    3c14:	05 96       	adiw	r24, 0x05	; 5
    3c16:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <vApplicationGetTimerTaskMemory>
    3c1a:	cd 80       	ldd	r12, Y+5	; 0x05
    3c1c:	de 80       	ldd	r13, Y+6	; 0x06
    3c1e:	eb 80       	ldd	r14, Y+3	; 0x03
    3c20:	fc 80       	ldd	r15, Y+4	; 0x04
    3c22:	49 81       	ldd	r20, Y+1	; 0x01
    3c24:	5a 81       	ldd	r21, Y+2	; 0x02
    3c26:	03 e0       	ldi	r16, 0x03	; 3
    3c28:	20 e0       	ldi	r18, 0x00	; 0
    3c2a:	30 e0       	ldi	r19, 0x00	; 0
    3c2c:	6a e6       	ldi	r22, 0x6A	; 106
    3c2e:	72 e0       	ldi	r23, 0x02	; 2
    3c30:	88 ee       	ldi	r24, 0xE8	; 232
    3c32:	9e e1       	ldi	r25, 0x1E	; 30
    3c34:	92 da       	rcall	.-2780   	; 0x315a <xTaskCreateStatic>
    3c36:	9c 01       	movw	r18, r24
    3c38:	90 93 1f 0d 	sts	0x0D1F, r25	; 0x800d1f <xTimerTaskHandle+0x1>
    3c3c:	80 93 1e 0d 	sts	0x0D1E, r24	; 0x800d1e <xTimerTaskHandle>
    3c40:	81 e0       	ldi	r24, 0x01	; 1
    3c42:	23 2b       	or	r18, r19
    3c44:	19 f4       	brne	.+6      	; 0x3c4c <xTimerCreateTimerTask+0x72>
    3c46:	80 e0       	ldi	r24, 0x00	; 0
    3c48:	01 c0       	rjmp	.+2      	; 0x3c4c <xTimerCreateTimerTask+0x72>
    3c4a:	80 e0       	ldi	r24, 0x00	; 0
    3c4c:	26 96       	adiw	r28, 0x06	; 6
    3c4e:	0f b6       	in	r0, 0x3f	; 63
    3c50:	f8 94       	cli
    3c52:	de bf       	out	0x3e, r29	; 62
    3c54:	0f be       	out	0x3f, r0	; 63
    3c56:	cd bf       	out	0x3d, r28	; 61
    3c58:	df 91       	pop	r29
    3c5a:	cf 91       	pop	r28
    3c5c:	0f 91       	pop	r16
    3c5e:	ff 90       	pop	r15
    3c60:	ef 90       	pop	r14
    3c62:	df 90       	pop	r13
    3c64:	cf 90       	pop	r12
    3c66:	08 95       	ret

00003c68 <xTimerGenericCommand>:
    }
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
    3c68:	0f 93       	push	r16
    3c6a:	1f 93       	push	r17
    3c6c:	cf 93       	push	r28
    3c6e:	df 93       	push	r29
    3c70:	00 d0       	rcall	.+0      	; 0x3c72 <xTimerGenericCommand+0xa>
    3c72:	1f 92       	push	r1
    3c74:	1f 92       	push	r1
    3c76:	cd b7       	in	r28, 0x3d	; 61
    3c78:	de b7       	in	r29, 0x3e	; 62

    configASSERT( xTimer );

    /* Send a message to the timer service task to perform a particular action
    on a particular timer definition. */
    if( xTimerQueue != NULL )
    3c7a:	e0 91 20 0d 	lds	r30, 0x0D20	; 0x800d20 <xTimerQueue>
    3c7e:	f0 91 21 0d 	lds	r31, 0x0D21	; 0x800d21 <xTimerQueue+0x1>
    3c82:	30 97       	sbiw	r30, 0x00	; 0
    3c84:	61 f1       	breq	.+88     	; 0x3cde <xTimerGenericCommand+0x76>
    3c86:	d9 01       	movw	r26, r18
    {
        /* Send a command to the timer service task to start the xTimer timer. */
        xMessage.xMessageID = xCommandID;
    3c88:	69 83       	std	Y+1, r22	; 0x01
        xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    3c8a:	5b 83       	std	Y+3, r21	; 0x03
    3c8c:	4a 83       	std	Y+2, r20	; 0x02
        xMessage.u.xTimerParameters.pxTimer = xTimer;
    3c8e:	9d 83       	std	Y+5, r25	; 0x05
    3c90:	8c 83       	std	Y+4, r24	; 0x04

        if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    3c92:	66 30       	cpi	r22, 0x06	; 6
    3c94:	e4 f4       	brge	.+56     	; 0x3cce <xTimerGenericCommand+0x66>
        {
            if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    3c96:	22 de       	rcall	.-956    	; 0x38dc <xTaskGetSchedulerState>
    3c98:	82 30       	cpi	r24, 0x02	; 2
    3c9a:	61 f4       	brne	.+24     	; 0x3cb4 <xTimerGenericCommand+0x4c>
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    3c9c:	20 e0       	ldi	r18, 0x00	; 0
    3c9e:	a8 01       	movw	r20, r16
    3ca0:	be 01       	movw	r22, r28
    3ca2:	6f 5f       	subi	r22, 0xFF	; 255
    3ca4:	7f 4f       	sbci	r23, 0xFF	; 255
    3ca6:	80 91 20 0d 	lds	r24, 0x0D20	; 0x800d20 <xTimerQueue>
    3caa:	90 91 21 0d 	lds	r25, 0x0D21	; 0x800d21 <xTimerQueue+0x1>
    3cae:	0e 94 24 16 	call	0x2c48	; 0x2c48 <xQueueGenericSend>
    3cb2:	16 c0       	rjmp	.+44     	; 0x3ce0 <xTimerGenericCommand+0x78>
            }
            else
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    3cb4:	20 e0       	ldi	r18, 0x00	; 0
    3cb6:	40 e0       	ldi	r20, 0x00	; 0
    3cb8:	50 e0       	ldi	r21, 0x00	; 0
    3cba:	be 01       	movw	r22, r28
    3cbc:	6f 5f       	subi	r22, 0xFF	; 255
    3cbe:	7f 4f       	sbci	r23, 0xFF	; 255
    3cc0:	80 91 20 0d 	lds	r24, 0x0D20	; 0x800d20 <xTimerQueue>
    3cc4:	90 91 21 0d 	lds	r25, 0x0D21	; 0x800d21 <xTimerQueue+0x1>
    3cc8:	0e 94 24 16 	call	0x2c48	; 0x2c48 <xQueueGenericSend>
    3ccc:	09 c0       	rjmp	.+18     	; 0x3ce0 <xTimerGenericCommand+0x78>
            }
        }
        else
        {
            xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    3cce:	20 e0       	ldi	r18, 0x00	; 0
    3cd0:	ad 01       	movw	r20, r26
    3cd2:	be 01       	movw	r22, r28
    3cd4:	6f 5f       	subi	r22, 0xFF	; 255
    3cd6:	7f 4f       	sbci	r23, 0xFF	; 255
    3cd8:	cf 01       	movw	r24, r30
    3cda:	48 d8       	rcall	.-3952   	; 0x2d6c <xQueueGenericSendFromISR>
    3cdc:	01 c0       	rjmp	.+2      	; 0x3ce0 <xTimerGenericCommand+0x78>
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
    3cde:	80 e0       	ldi	r24, 0x00	; 0
    {
        mtCOVERAGE_TEST_MARKER();
    }

    return xReturn;
}
    3ce0:	0f 90       	pop	r0
    3ce2:	0f 90       	pop	r0
    3ce4:	0f 90       	pop	r0
    3ce6:	0f 90       	pop	r0
    3ce8:	0f 90       	pop	r0
    3cea:	df 91       	pop	r29
    3cec:	cf 91       	pop	r28
    3cee:	1f 91       	pop	r17
    3cf0:	0f 91       	pop	r16
    3cf2:	08 95       	ret

00003cf4 <prvSampleTimeNow>:
    return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
    3cf4:	af 92       	push	r10
    3cf6:	bf 92       	push	r11
    3cf8:	cf 92       	push	r12
    3cfa:	df 92       	push	r13
    3cfc:	ef 92       	push	r14
    3cfe:	ff 92       	push	r15
    3d00:	0f 93       	push	r16
    3d02:	1f 93       	push	r17
    3d04:	cf 93       	push	r28
    3d06:	df 93       	push	r29
    3d08:	6c 01       	movw	r12, r24
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

    xTimeNow = xTaskGetTickCount();
    3d0a:	70 db       	rcall	.-2336   	; 0x33ec <xTaskGetTickCount>
    3d0c:	7c 01       	movw	r14, r24

    if( xTimeNow < xLastTime )
    3d0e:	80 91 1c 0d 	lds	r24, 0x0D1C	; 0x800d1c <xLastTime.2272>
    3d12:	90 91 1d 0d 	lds	r25, 0x0D1D	; 0x800d1d <xLastTime.2272+0x1>
    3d16:	e8 16       	cp	r14, r24
    3d18:	f9 06       	cpc	r15, r25
    3d1a:	08 f0       	brcs	.+2      	; 0x3d1e <prvSampleTimeNow+0x2a>
    3d1c:	47 c0       	rjmp	.+142    	; 0x3dac <prvSampleTimeNow+0xb8>
    3d1e:	2f c0       	rjmp	.+94     	; 0x3d7e <prvSampleTimeNow+0x8a>
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    {
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    3d20:	05 80       	ldd	r0, Z+5	; 0x05
    3d22:	f6 81       	ldd	r31, Z+6	; 0x06
    3d24:	e0 2d       	mov	r30, r0
    3d26:	a0 80       	ld	r10, Z
    3d28:	b1 80       	ldd	r11, Z+1	; 0x01

        /* Remove the timer from the list. */
        pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    3d2a:	c6 81       	ldd	r28, Z+6	; 0x06
    3d2c:	d7 81       	ldd	r29, Z+7	; 0x07
        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    3d2e:	8e 01       	movw	r16, r28
    3d30:	0e 5f       	subi	r16, 0xFE	; 254
    3d32:	1f 4f       	sbci	r17, 0xFF	; 255
    3d34:	c8 01       	movw	r24, r16
    3d36:	0e 94 65 13 	call	0x26ca	; 0x26ca <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* Execute its callback, then send a command to restart the timer if
        it is an auto-reload timer.  It cannot be restarted here as the lists
        have not yet been switched. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    3d3a:	e9 89       	ldd	r30, Y+17	; 0x11
    3d3c:	fa 89       	ldd	r31, Y+18	; 0x12
    3d3e:	ce 01       	movw	r24, r28
    3d40:	19 95       	eicall

        if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    3d42:	8e 85       	ldd	r24, Y+14	; 0x0e
    3d44:	81 30       	cpi	r24, 0x01	; 1
    3d46:	d9 f4       	brne	.+54     	; 0x3d7e <prvSampleTimeNow+0x8a>
            the timer going into the same timer list then it has already expired
            and the timer should be re-inserted into the current list so it is
            processed again within this loop.  Otherwise a command should be sent
            to restart the timer to ensure it is only inserted into a list after
            the lists have been swapped. */
            xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    3d48:	8c 85       	ldd	r24, Y+12	; 0x0c
    3d4a:	9d 85       	ldd	r25, Y+13	; 0x0d
    3d4c:	8a 0d       	add	r24, r10
    3d4e:	9b 1d       	adc	r25, r11
            if( xReloadTime > xNextExpireTime )
    3d50:	a8 16       	cp	r10, r24
    3d52:	b9 06       	cpc	r11, r25
    3d54:	60 f4       	brcc	.+24     	; 0x3d6e <prvSampleTimeNow+0x7a>
            {
                listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    3d56:	9b 83       	std	Y+3, r25	; 0x03
    3d58:	8a 83       	std	Y+2, r24	; 0x02
                listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    3d5a:	d9 87       	std	Y+9, r29	; 0x09
    3d5c:	c8 87       	std	Y+8, r28	; 0x08
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    3d5e:	b8 01       	movw	r22, r16
    3d60:	80 91 24 0d 	lds	r24, 0x0D24	; 0x800d24 <pxCurrentTimerList>
    3d64:	90 91 25 0d 	lds	r25, 0x0D25	; 0x800d25 <pxCurrentTimerList+0x1>
    3d68:	0e 94 34 13 	call	0x2668	; 0x2668 <vListInsert>
    3d6c:	08 c0       	rjmp	.+16     	; 0x3d7e <prvSampleTimeNow+0x8a>
            }
            else
            {
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    3d6e:	00 e0       	ldi	r16, 0x00	; 0
    3d70:	10 e0       	ldi	r17, 0x00	; 0
    3d72:	20 e0       	ldi	r18, 0x00	; 0
    3d74:	30 e0       	ldi	r19, 0x00	; 0
    3d76:	a5 01       	movw	r20, r10
    3d78:	60 e0       	ldi	r22, 0x00	; 0
    3d7a:	ce 01       	movw	r24, r28
    3d7c:	75 df       	rcall	.-278    	; 0x3c68 <xTimerGenericCommand>

    /* The tick count has overflowed.  The timer lists must be switched.
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    3d7e:	e0 91 24 0d 	lds	r30, 0x0D24	; 0x800d24 <pxCurrentTimerList>
    3d82:	f0 91 25 0d 	lds	r31, 0x0D25	; 0x800d25 <pxCurrentTimerList+0x1>
    3d86:	90 81       	ld	r25, Z
    3d88:	91 11       	cpse	r25, r1
    3d8a:	ca cf       	rjmp	.-108    	; 0x3d20 <prvSampleTimeNow+0x2c>
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxTemp = pxCurrentTimerList;
    pxCurrentTimerList = pxOverflowTimerList;
    3d8c:	80 91 22 0d 	lds	r24, 0x0D22	; 0x800d22 <pxOverflowTimerList>
    3d90:	90 91 23 0d 	lds	r25, 0x0D23	; 0x800d23 <pxOverflowTimerList+0x1>
    3d94:	90 93 25 0d 	sts	0x0D25, r25	; 0x800d25 <pxCurrentTimerList+0x1>
    3d98:	80 93 24 0d 	sts	0x0D24, r24	; 0x800d24 <pxCurrentTimerList>
    pxOverflowTimerList = pxTemp;
    3d9c:	f0 93 23 0d 	sts	0x0D23, r31	; 0x800d23 <pxOverflowTimerList+0x1>
    3da0:	e0 93 22 0d 	sts	0x0D22, r30	; 0x800d22 <pxOverflowTimerList>
    xTimeNow = xTaskGetTickCount();

    if( xTimeNow < xLastTime )
    {
        prvSwitchTimerLists();
        *pxTimerListsWereSwitched = pdTRUE;
    3da4:	81 e0       	ldi	r24, 0x01	; 1
    3da6:	f6 01       	movw	r30, r12
    3da8:	80 83       	st	Z, r24
    3daa:	02 c0       	rjmp	.+4      	; 0x3db0 <prvSampleTimeNow+0xbc>
    }
    else
    {
        *pxTimerListsWereSwitched = pdFALSE;
    3dac:	f6 01       	movw	r30, r12
    3dae:	10 82       	st	Z, r1
    }

    xLastTime = xTimeNow;
    3db0:	f0 92 1d 0d 	sts	0x0D1D, r15	; 0x800d1d <xLastTime.2272+0x1>
    3db4:	e0 92 1c 0d 	sts	0x0D1C, r14	; 0x800d1c <xLastTime.2272>

    return xTimeNow;
}
    3db8:	c7 01       	movw	r24, r14
    3dba:	df 91       	pop	r29
    3dbc:	cf 91       	pop	r28
    3dbe:	1f 91       	pop	r17
    3dc0:	0f 91       	pop	r16
    3dc2:	ff 90       	pop	r15
    3dc4:	ef 90       	pop	r14
    3dc6:	df 90       	pop	r13
    3dc8:	cf 90       	pop	r12
    3dca:	bf 90       	pop	r11
    3dcc:	af 90       	pop	r10
    3dce:	08 95       	ret

00003dd0 <prvTimerTask>:
    pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
}
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
    3dd0:	cf 93       	push	r28
    3dd2:	df 93       	push	r29
    3dd4:	00 d0       	rcall	.+0      	; 0x3dd6 <prvTimerTask+0x6>
    3dd6:	00 d0       	rcall	.+0      	; 0x3dd8 <prvTimerTask+0x8>
    3dd8:	cd b7       	in	r28, 0x3d	; 61
    3dda:	de b7       	in	r29, 0x3e	; 62
        /* Obtain the time now to make an assessment as to whether the timer
        has expired or not.  If obtaining the time causes the lists to switch
        then don't process this timer as any timers that remained in the list
        when the lists were switched will have been processed within the
        prvSampleTimeNow() function. */
        xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    3ddc:	ce 01       	movw	r24, r28
    3dde:	01 96       	adiw	r24, 0x01	; 1
    3de0:	4c 01       	movw	r8, r24
                case when the current timer list is empty. */
                if( xListWasEmpty != pdFALSE )
                {
                    /* The current timer list is empty - is the overflow list
                    also empty? */
                    xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    3de2:	55 24       	eor	r5, r5
    3de4:	53 94       	inc	r5
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    }
    else
    {
        /* Ensure the task unblocks when the tick count rolls over. */
        xNextExpireTime = ( TickType_t ) 0U;
    3de6:	e1 2c       	mov	r14, r1
    3de8:	f1 2c       	mov	r15, r1
                case when the current timer list is empty. */
                if( xListWasEmpty != pdFALSE )
                {
                    /* The current timer list is empty - is the overflow list
                    also empty? */
                    xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    3dea:	41 2c       	mov	r4, r1
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

    while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    3dec:	c8 2e       	mov	r12, r24
    3dee:	d9 2c       	mov	r13, r9
    the timer with the nearest expiry time will expire.  If there are no
    active timers then just set the next expire time to 0.  That will cause
    this task to unblock when the tick count overflows, at which point the
    timer lists will be switched and the next expiry time can be
    re-assessed.  */
    *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    3df0:	e0 91 24 0d 	lds	r30, 0x0D24	; 0x800d24 <pxCurrentTimerList>
    3df4:	f0 91 25 0d 	lds	r31, 0x0D25	; 0x800d25 <pxCurrentTimerList+0x1>
    3df8:	80 81       	ld	r24, Z
    if( *pxListWasEmpty == pdFALSE )
    3dfa:	88 23       	and	r24, r24
    3dfc:	69 f0       	breq	.+26     	; 0x3e18 <prvTimerTask+0x48>
    {
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    3dfe:	05 80       	ldd	r0, Z+5	; 0x05
    3e00:	f6 81       	ldd	r31, Z+6	; 0x06
    3e02:	e0 2d       	mov	r30, r0
    3e04:	a0 80       	ld	r10, Z
    3e06:	b1 80       	ldd	r11, Z+1	; 0x01
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

    vTaskSuspendAll();
    3e08:	eb da       	rcall	.-2602   	; 0x33e0 <vTaskSuspendAll>
        /* Obtain the time now to make an assessment as to whether the timer
        has expired or not.  If obtaining the time causes the lists to switch
        then don't process this timer as any timers that remained in the list
        when the lists were switched will have been processed within the
        prvSampleTimeNow() function. */
        xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    3e0a:	c4 01       	movw	r24, r8
    3e0c:	73 df       	rcall	.-282    	; 0x3cf4 <prvSampleTimeNow>
    3e0e:	8c 01       	movw	r16, r24
        if( xTimerListsWereSwitched == pdFALSE )
    3e10:	89 81       	ldd	r24, Y+1	; 0x01
    3e12:	88 23       	and	r24, r24
    3e14:	49 f0       	breq	.+18     	; 0x3e28 <prvTimerTask+0x58>
    3e16:	56 c0       	rjmp	.+172    	; 0x3ec4 <prvTimerTask+0xf4>
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

    vTaskSuspendAll();
    3e18:	e3 da       	rcall	.-2618   	; 0x33e0 <vTaskSuspendAll>
        /* Obtain the time now to make an assessment as to whether the timer
        has expired or not.  If obtaining the time causes the lists to switch
        then don't process this timer as any timers that remained in the list
        when the lists were switched will have been processed within the
        prvSampleTimeNow() function. */
        xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    3e1a:	c4 01       	movw	r24, r8
    3e1c:	6b df       	rcall	.-298    	; 0x3cf4 <prvSampleTimeNow>
    3e1e:	8c 01       	movw	r16, r24
        if( xTimerListsWereSwitched == pdFALSE )
    3e20:	89 81       	ldd	r24, Y+1	; 0x01
    3e22:	88 23       	and	r24, r24
    3e24:	a9 f1       	breq	.+106    	; 0x3e90 <prvTimerTask+0xc0>
    3e26:	4e c0       	rjmp	.+156    	; 0x3ec4 <prvTimerTask+0xf4>
        {
            /* The tick count has not overflowed, has the timer expired? */
            if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    3e28:	0a 15       	cp	r16, r10
    3e2a:	1b 05       	cpc	r17, r11
    3e2c:	08 f4       	brcc	.+2      	; 0x3e30 <prvTimerTask+0x60>
    3e2e:	3b c0       	rjmp	.+118    	; 0x3ea6 <prvTimerTask+0xd6>
            {
                ( void ) xTaskResumeAll();
    3e30:	9e db       	rcall	.-2244   	; 0x356e <xTaskResumeAll>
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    3e32:	e0 91 24 0d 	lds	r30, 0x0D24	; 0x800d24 <pxCurrentTimerList>
    3e36:	f0 91 25 0d 	lds	r31, 0x0D25	; 0x800d25 <pxCurrentTimerList+0x1>
    3e3a:	05 80       	ldd	r0, Z+5	; 0x05
    3e3c:	f6 81       	ldd	r31, Z+6	; 0x06
    3e3e:	e0 2d       	mov	r30, r0
    3e40:	66 80       	ldd	r6, Z+6	; 0x06
    3e42:	77 80       	ldd	r7, Z+7	; 0x07

    /* Remove the timer from the list of active timers.  A check has already
    been performed to ensure the list is not empty. */
    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    3e44:	c3 01       	movw	r24, r6
    3e46:	02 96       	adiw	r24, 0x02	; 2
    3e48:	0e 94 65 13 	call	0x26ca	; 0x26ca <uxListRemove>
    traceTIMER_EXPIRED( pxTimer );

    /* If the timer is an auto reload timer then calculate the next
    expiry time and re-insert the timer in the list of active timers. */
    if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    3e4c:	d3 01       	movw	r26, r6
    3e4e:	1e 96       	adiw	r26, 0x0e	; 14
    3e50:	8c 91       	ld	r24, X
    3e52:	1e 97       	sbiw	r26, 0x0e	; 14
    3e54:	81 30       	cpi	r24, 0x01	; 1
    3e56:	a1 f4       	brne	.+40     	; 0x3e80 <prvTimerTask+0xb0>
    {
        /* The timer is inserted into a list using a time relative to anything
        other than the current time.  It will therefore be inserted into the
        correct list relative to the time this task thinks it is now. */
        if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    3e58:	1c 96       	adiw	r26, 0x0c	; 12
    3e5a:	6d 91       	ld	r22, X+
    3e5c:	7c 91       	ld	r23, X
    3e5e:	1d 97       	sbiw	r26, 0x0d	; 13
    3e60:	6a 0d       	add	r22, r10
    3e62:	7b 1d       	adc	r23, r11
    3e64:	95 01       	movw	r18, r10
    3e66:	a8 01       	movw	r20, r16
    3e68:	c3 01       	movw	r24, r6
    3e6a:	5a de       	rcall	.-844    	; 0x3b20 <prvInsertTimerInActiveList>
    3e6c:	88 23       	and	r24, r24
    3e6e:	41 f0       	breq	.+16     	; 0x3e80 <prvTimerTask+0xb0>
        {
            /* The timer expired before it was added to the active timer
            list.  Reload it now.  */
            xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    3e70:	0e 2d       	mov	r16, r14
    3e72:	1f 2d       	mov	r17, r15
    3e74:	2e 2d       	mov	r18, r14
    3e76:	3f 2d       	mov	r19, r15
    3e78:	a5 01       	movw	r20, r10
    3e7a:	64 2d       	mov	r22, r4
    3e7c:	c3 01       	movw	r24, r6
    3e7e:	f4 de       	rcall	.-536    	; 0x3c68 <xTimerGenericCommand>
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* Call the timer callback. */
    pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    3e80:	d3 01       	movw	r26, r6
    3e82:	51 96       	adiw	r26, 0x11	; 17
    3e84:	ed 91       	ld	r30, X+
    3e86:	fc 91       	ld	r31, X
    3e88:	52 97       	sbiw	r26, 0x12	; 18
    3e8a:	c3 01       	movw	r24, r6
    3e8c:	19 95       	eicall
    3e8e:	6f c0       	rjmp	.+222    	; 0x3f6e <prvTimerTask+0x19e>
                case when the current timer list is empty. */
                if( xListWasEmpty != pdFALSE )
                {
                    /* The current timer list is empty - is the overflow list
                    also empty? */
                    xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    3e90:	e0 91 22 0d 	lds	r30, 0x0D22	; 0x800d22 <pxOverflowTimerList>
    3e94:	f0 91 23 0d 	lds	r31, 0x0D23	; 0x800d23 <pxOverflowTimerList+0x1>
    3e98:	80 81       	ld	r24, Z
    3e9a:	45 2d       	mov	r20, r5
    3e9c:	81 11       	cpse	r24, r1
    3e9e:	44 2d       	mov	r20, r4
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    }
    else
    {
        /* Ensure the task unblocks when the tick count rolls over. */
        xNextExpireTime = ( TickType_t ) 0U;
    3ea0:	ae 2c       	mov	r10, r14
    3ea2:	bf 2c       	mov	r11, r15
    3ea4:	01 c0       	rjmp	.+2      	; 0x3ea8 <prvTimerTask+0xd8>
        prvSampleTimeNow() function. */
        xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
        if( xTimerListsWereSwitched == pdFALSE )
        {
            /* The tick count has not overflowed, has the timer expired? */
            if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    3ea6:	44 2d       	mov	r20, r4
                    /* The current timer list is empty - is the overflow list
                    also empty? */
                    xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
                }

                vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    3ea8:	b5 01       	movw	r22, r10
    3eaa:	60 1b       	sub	r22, r16
    3eac:	71 0b       	sbc	r23, r17
    3eae:	80 91 20 0d 	lds	r24, 0x0D20	; 0x800d20 <xTimerQueue>
    3eb2:	90 91 21 0d 	lds	r25, 0x0D21	; 0x800d21 <xTimerQueue+0x1>
    3eb6:	d6 d8       	rcall	.-3668   	; 0x3064 <vQueueWaitForMessageRestricted>

                if( xTaskResumeAll() == pdFALSE )
    3eb8:	5a db       	rcall	.-2380   	; 0x356e <xTaskResumeAll>
    3eba:	81 11       	cpse	r24, r1
    3ebc:	58 c0       	rjmp	.+176    	; 0x3f6e <prvTimerTask+0x19e>
                {
                    /* Yield to wait for either a command to arrive, or the
                    block time to expire.  If a command arrived between the
                    critical section being exited and this yield then the yield
                    will not cause the task to block. */
                    portYIELD_WITHIN_API();
    3ebe:	0e 94 3a 14 	call	0x2874	; 0x2874 <vPortYield>
    3ec2:	55 c0       	rjmp	.+170    	; 0x3f6e <prvTimerTask+0x19e>
                }
            }
        }
        else
        {
            ( void ) xTaskResumeAll();
    3ec4:	54 db       	rcall	.-2392   	; 0x356e <xTaskResumeAll>
    3ec6:	53 c0       	rjmp	.+166    	; 0x3f6e <prvTimerTask+0x19e>
        }
        #endif /* INCLUDE_xTimerPendFunctionCall */

        /* Commands that are positive are timer commands rather than pended
        function calls. */
        if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    3ec8:	89 81       	ldd	r24, Y+1	; 0x01
    3eca:	88 23       	and	r24, r24
    3ecc:	0c f4       	brge	.+2      	; 0x3ed0 <prvTimerTask+0x100>
    3ece:	4f c0       	rjmp	.+158    	; 0x3f6e <prvTimerTask+0x19e>
        {
            /* The messages uses the xTimerParameters member to work on a
            software timer. */
            pxTimer = xMessage.u.xTimerParameters.pxTimer;
    3ed0:	ac 80       	ldd	r10, Y+4	; 0x04
    3ed2:	bd 80       	ldd	r11, Y+5	; 0x05

        if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    3ed4:	f5 01       	movw	r30, r10
    3ed6:	82 85       	ldd	r24, Z+10	; 0x0a
    3ed8:	93 85       	ldd	r25, Z+11	; 0x0b
    3eda:	89 2b       	or	r24, r25
    3edc:	21 f0       	breq	.+8      	; 0x3ee6 <prvTimerTask+0x116>
            {
                /* The timer is in a list, remove it. */
                ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    3ede:	c5 01       	movw	r24, r10
    3ee0:	02 96       	adiw	r24, 0x02	; 2
    3ee2:	0e 94 65 13 	call	0x26ca	; 0x26ca <uxListRemove>
            it must be present in the function call.  prvSampleTimeNow() must be
            called after the message is received from xTimerQueue so there is no
            possibility of a higher priority task adding a message to the message
            queue with a time that is ahead of the timer daemon task (because it
            pre-empted the timer daemon task after the xTimeNow value was set). */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    3ee6:	ce 01       	movw	r24, r28
    3ee8:	06 96       	adiw	r24, 0x06	; 6
    3eea:	04 df       	rcall	.-504    	; 0x3cf4 <prvSampleTimeNow>
    3eec:	ac 01       	movw	r20, r24

            switch( xMessage.xMessageID )
    3eee:	99 81       	ldd	r25, Y+1	; 0x01
    3ef0:	94 30       	cpi	r25, 0x04	; 4
    3ef2:	89 f1       	breq	.+98     	; 0x3f56 <prvTimerTask+0x186>
    3ef4:	1c f4       	brge	.+6      	; 0x3efc <prvTimerTask+0x12c>
    3ef6:	93 30       	cpi	r25, 0x03	; 3
    3ef8:	d0 f5       	brcc	.+116    	; 0x3f6e <prvTimerTask+0x19e>
    3efa:	07 c0       	rjmp	.+14     	; 0x3f0a <prvTimerTask+0x13a>
    3efc:	96 30       	cpi	r25, 0x06	; 6
    3efe:	bc f1       	brlt	.+110    	; 0x3f6e <prvTimerTask+0x19e>
    3f00:	98 30       	cpi	r25, 0x08	; 8
    3f02:	1c f0       	brlt	.+6      	; 0x3f0a <prvTimerTask+0x13a>
    3f04:	99 30       	cpi	r25, 0x09	; 9
    3f06:	39 f1       	breq	.+78     	; 0x3f56 <prvTimerTask+0x186>
    3f08:	32 c0       	rjmp	.+100    	; 0x3f6e <prvTimerTask+0x19e>
                case tmrCOMMAND_START_FROM_ISR :
                case tmrCOMMAND_RESET :
                case tmrCOMMAND_RESET_FROM_ISR :
                case tmrCOMMAND_START_DONT_TRACE :
                    /* Start or restart a timer. */
                    if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    3f0a:	2a 81       	ldd	r18, Y+2	; 0x02
    3f0c:	3b 81       	ldd	r19, Y+3	; 0x03
    3f0e:	d5 01       	movw	r26, r10
    3f10:	1c 96       	adiw	r26, 0x0c	; 12
    3f12:	6d 91       	ld	r22, X+
    3f14:	7c 91       	ld	r23, X
    3f16:	1d 97       	sbiw	r26, 0x0d	; 13
    3f18:	62 0f       	add	r22, r18
    3f1a:	73 1f       	adc	r23, r19
    3f1c:	c5 01       	movw	r24, r10
    3f1e:	00 de       	rcall	.-1024   	; 0x3b20 <prvInsertTimerInActiveList>
    3f20:	88 23       	and	r24, r24
    3f22:	29 f1       	breq	.+74     	; 0x3f6e <prvTimerTask+0x19e>
                    {
                        /* The timer expired before it was added to the active
                        timer list.  Process it now. */
                        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    3f24:	d5 01       	movw	r26, r10
    3f26:	51 96       	adiw	r26, 0x11	; 17
    3f28:	ed 91       	ld	r30, X+
    3f2a:	fc 91       	ld	r31, X
    3f2c:	52 97       	sbiw	r26, 0x12	; 18
    3f2e:	c5 01       	movw	r24, r10
    3f30:	19 95       	eicall
                        traceTIMER_EXPIRED( pxTimer );

                        if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    3f32:	f5 01       	movw	r30, r10
    3f34:	86 85       	ldd	r24, Z+14	; 0x0e
    3f36:	81 30       	cpi	r24, 0x01	; 1
    3f38:	d1 f4       	brne	.+52     	; 0x3f6e <prvTimerTask+0x19e>
                        {
                            xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    3f3a:	44 85       	ldd	r20, Z+12	; 0x0c
    3f3c:	55 85       	ldd	r21, Z+13	; 0x0d
    3f3e:	8a 81       	ldd	r24, Y+2	; 0x02
    3f40:	9b 81       	ldd	r25, Y+3	; 0x03
    3f42:	48 0f       	add	r20, r24
    3f44:	59 1f       	adc	r21, r25
    3f46:	0e 2d       	mov	r16, r14
    3f48:	1f 2d       	mov	r17, r15
    3f4a:	2e 2d       	mov	r18, r14
    3f4c:	3f 2d       	mov	r19, r15
    3f4e:	64 2d       	mov	r22, r4
    3f50:	c5 01       	movw	r24, r10
    3f52:	8a de       	rcall	.-748    	; 0x3c68 <xTimerGenericCommand>
    3f54:	0c c0       	rjmp	.+24     	; 0x3f6e <prvTimerTask+0x19e>
                    There is nothing to do here. */
                    break;

                case tmrCOMMAND_CHANGE_PERIOD :
                case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
                    pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    3f56:	6a 81       	ldd	r22, Y+2	; 0x02
    3f58:	7b 81       	ldd	r23, Y+3	; 0x03
    3f5a:	d5 01       	movw	r26, r10
    3f5c:	1d 96       	adiw	r26, 0x0d	; 13
    3f5e:	7c 93       	st	X, r23
    3f60:	6e 93       	st	-X, r22
    3f62:	1c 97       	sbiw	r26, 0x0c	; 12
                    be longer or shorter than the old one.  The command time is
                    therefore set to the current time, and as the period cannot
                    be zero the next expiry time can only be in the future,
                    meaning (unlike for the xTimerStart() case above) there is
                    no fail case that needs to be handled here. */
                    ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    3f64:	64 0f       	add	r22, r20
    3f66:	75 1f       	adc	r23, r21
    3f68:	9a 01       	movw	r18, r20
    3f6a:	c5 01       	movw	r24, r10
    3f6c:	d9 dd       	rcall	.-1102   	; 0x3b20 <prvInsertTimerInActiveList>
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

    while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    3f6e:	4e 2d       	mov	r20, r14
    3f70:	5f 2d       	mov	r21, r15
    3f72:	6c 2d       	mov	r22, r12
    3f74:	7d 2d       	mov	r23, r13
    3f76:	80 91 20 0d 	lds	r24, 0x0D20	; 0x800d20 <xTimerQueue>
    3f7a:	90 91 21 0d 	lds	r25, 0x0D21	; 0x800d21 <xTimerQueue+0x1>
    3f7e:	0e 94 ee 16 	call	0x2ddc	; 0x2ddc <xQueueReceive>
    3f82:	81 11       	cpse	r24, r1
    3f84:	a1 cf       	rjmp	.-190    	; 0x3ec8 <prvTimerTask+0xf8>
    3f86:	34 cf       	rjmp	.-408    	; 0x3df0 <prvTimerTask+0x20>

00003f88 <LCD_main>:
	RTE_set_Start_blancher_Operation(s_Lcd_data_read.Start_blancher_operation);
}


static void LCD_RTE_COLLECT(void){
		s_Lcd_data_write.Drum_speed = RTE_get_Drum_speed();
    3f88:	04 e4       	ldi	r16, 0x44	; 68
    3f8a:	1f e0       	ldi	r17, 0x0F	; 15
s_LCD_DATA_WRITE_t   s_Lcd_data_write;

static void LCD_READ_Parameters(void){
	//call LCD_read_mutliple regs (fill the struct) and check for the errors //s_Lcd_data_read
	//set rte parameters
	Lcd_Read_multiple_data(LCD_START_READ_ADDRESS,(uint16_t*)&s_Lcd_data_read,LCD_READ_REGS_NUMBER);
    3f8c:	41 e1       	ldi	r20, 0x11	; 17
    3f8e:	68 e4       	ldi	r22, 0x48	; 72
    3f90:	7f e0       	ldi	r23, 0x0F	; 15
    3f92:	81 e0       	ldi	r24, 0x01	; 1
    3f94:	90 e0       	ldi	r25, 0x00	; 0
    3f96:	0e 94 48 02 	call	0x490	; 0x490 <Lcd_Read_multiple_data>
}

//drum speed & current temp
//s_Lcd_data_read
static void LCD_RTE_FEED(void){
	RTE_set_Set_temperature(s_Lcd_data_read.Set_temp);
    3f9a:	c8 e4       	ldi	r28, 0x48	; 72
    3f9c:	df e0       	ldi	r29, 0x0F	; 15
    3f9e:	8a 85       	ldd	r24, Y+10	; 0x0a
    3fa0:	9b 85       	ldd	r25, Y+11	; 0x0b
    3fa2:	0e 94 7f 12 	call	0x24fe	; 0x24fe <RTE_set_Set_temperature>
	RTE_set_Sleep_temperature(s_Lcd_data_read.Sleep_temp);
    3fa6:	88 85       	ldd	r24, Y+8	; 0x08
    3fa8:	99 85       	ldd	r25, Y+9	; 0x09
    3faa:	0e 94 70 12 	call	0x24e0	; 0x24e0 <RTE_set_Sleep_temperature>
	RTE_set_Threshold_set_temperature(s_Lcd_data_read.Threshold_set_temp);
    3fae:	8c 85       	ldd	r24, Y+12	; 0x0c
    3fb0:	9d 85       	ldd	r25, Y+13	; 0x0d
    3fb2:	0e 94 8e 12 	call	0x251c	; 0x251c <RTE_set_Threshold_set_temperature>
	RTE_set_Threshold_sleep_temperature(s_Lcd_data_read.Threshold_sleep_temp);
    3fb6:	8e 85       	ldd	r24, Y+14	; 0x0e
    3fb8:	9f 85       	ldd	r25, Y+15	; 0x0f
    3fba:	0e 94 9d 12 	call	0x253a	; 0x253a <RTE_set_Threshold_sleep_temperature>
	RTE_set_Negative_offset_temperature(s_Lcd_data_read.Negative_offset_temp);
    3fbe:	8a 89       	ldd	r24, Y+18	; 0x12
    3fc0:	9b 89       	ldd	r25, Y+19	; 0x13
    3fc2:	0e 94 bb 12 	call	0x2576	; 0x2576 <RTE_set_Negative_offset_temperature>
	RTE_set_Positive_offset_temperature(s_Lcd_data_read.Positive_offset_temp);
    3fc6:	88 89       	ldd	r24, Y+16	; 0x10
    3fc8:	99 89       	ldd	r25, Y+17	; 0x11
    3fca:	0e 94 ac 12 	call	0x2558	; 0x2558 <RTE_set_Positive_offset_temperature>
	RTE_set_System_on(s_Lcd_data_read.System_on);
    3fce:	88 81       	ld	r24, Y
    3fd0:	99 81       	ldd	r25, Y+1	; 0x01
    3fd2:	0e 94 ee 11 	call	0x23dc	; 0x23dc <RTE_set_System_on>
	RTE_set_Wash_Operation(s_Lcd_data_read.Wash_operation);
    3fd6:	8c 81       	ldd	r24, Y+4	; 0x04
    3fd8:	9d 81       	ldd	r25, Y+5	; 0x05
    3fda:	0e 94 0c 12 	call	0x2418	; 0x2418 <RTE_set_Wash_Operation>
	RTE_set_Tank_Calibration_Operation(s_Lcd_data_read.Tank_calibration_operation);
    3fde:	8e 81       	ldd	r24, Y+6	; 0x06
    3fe0:	9f 81       	ldd	r25, Y+7	; 0x07
    3fe2:	0e 94 1b 12 	call	0x2436	; 0x2436 <RTE_set_Tank_Calibration_Operation>
	RTE_set_Gear_ratio(s_Lcd_data_read.Gear_ratio);
    3fe6:	8c 89       	ldd	r24, Y+20	; 0x14
    3fe8:	9d 89       	ldd	r25, Y+21	; 0x15
    3fea:	0e 94 38 11 	call	0x2270	; 0x2270 <RTE_set_Gear_ratio>
	RTE_set_Conveyor_length(s_Lcd_data_read.Conveyor_length);
    3fee:	8e 89       	ldd	r24, Y+22	; 0x16
    3ff0:	9f 89       	ldd	r25, Y+23	; 0x17
    3ff2:	0e 94 62 11 	call	0x22c4	; 0x22c4 <RTE_set_Conveyor_length>
	RTE_set_Driver_diameter(s_Lcd_data_read.Driver_diameter);
    3ff6:	88 8d       	ldd	r24, Y+24	; 0x18
    3ff8:	99 8d       	ldd	r25, Y+25	; 0x19
    3ffa:	0e 94 71 11 	call	0x22e2	; 0x22e2 <RTE_set_Driver_diameter>
	RTE_set_Time_minute(s_Lcd_data_read.Time_minute);
    3ffe:	8c 8d       	ldd	r24, Y+28	; 0x1c
    4000:	9d 8d       	ldd	r25, Y+29	; 0x1d
    4002:	0e 94 80 11 	call	0x2300	; 0x2300 <RTE_set_Time_minute>
	RTE_set_Time_second(s_Lcd_data_read.Time_second);
    4006:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4008:	9f 8d       	ldd	r25, Y+31	; 0x1f
    400a:	0e 94 8f 11 	call	0x231e	; 0x231e <RTE_set_Time_second>
	RTE_set_RPM_max(s_Lcd_data_read.RPM_max);
    400e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    4010:	9b 8d       	ldd	r25, Y+27	; 0x1b
    4012:	0e 94 47 11 	call	0x228e	; 0x228e <RTE_set_RPM_max>
	RTE_set_Start_blancher_Operation(s_Lcd_data_read.Start_blancher_operation);
    4016:	8a 81       	ldd	r24, Y+2	; 0x02
    4018:	9b 81       	ldd	r25, Y+3	; 0x03
    401a:	0e 94 fd 11 	call	0x23fa	; 0x23fa <RTE_set_Start_blancher_Operation>
}


static void LCD_RTE_COLLECT(void){
		s_Lcd_data_write.Drum_speed = RTE_get_Drum_speed();
    401e:	0e 94 ed 10 	call	0x21da	; 0x21da <RTE_get_Drum_speed>
    4022:	f8 01       	movw	r30, r16
    4024:	91 83       	std	Z+1, r25	; 0x01
    4026:	80 83       	st	Z, r24
		s_Lcd_data_write.Current_temperature = RTE_get_Current_temperature();
    4028:	0e 94 cf 12 	call	0x259e	; 0x259e <RTE_get_Current_temperature>
    402c:	f8 01       	movw	r30, r16
    402e:	93 83       	std	Z+3, r25	; 0x03
    4030:	82 83       	std	Z+2, r24	; 0x02
	
}


static void LCD_WRITE_Parameters(void){
	Lcd_Write_multiple_data(LCD_START_WRITE_ADDRESS,(uint16_t*)&s_Lcd_data_write,LCD_WRITE_REGS_NUMBER);
    4032:	42 e0       	ldi	r20, 0x02	; 2
    4034:	b8 01       	movw	r22, r16
    4036:	80 e0       	ldi	r24, 0x00	; 0
    4038:	9f e0       	ldi	r25, 0x0F	; 15
    403a:	0e 94 75 02 	call	0x4ea	; 0x4ea <Lcd_Write_multiple_data>
				UART0_OutUDec(Debug_read[i]);
				UART0_puts("\n");
				
			}
		#endif
		vTaskDelay(4000/portTICK_PERIOD_MS);
    403e:	8a ef       	ldi	r24, 0xFA	; 250
    4040:	90 e0       	ldi	r25, 0x00	; 0
    4042:	0e db       	rcall	.-2532   	; 0x3660 <vTaskDelay>
		//_delay_ms(2000);
	}
    4044:	a3 cf       	rjmp	.-186    	; 0x3f8c <LCD_main+0x4>

00004046 <System_init>:


gSystemError System_init(void){
	
	gSystemError res = E_OK;
	DIO_init();
    4046:	0e 94 c4 0b 	call	0x1788	; 0x1788 <DIO_init>
	millis_init();	
    404a:	1e d0       	rcall	.+60     	; 0x4088 <millis_init>
	Lcd_init(UART3,115200,1);
    404c:	21 e0       	ldi	r18, 0x01	; 1
    404e:	40 e0       	ldi	r20, 0x00	; 0
    4050:	52 ec       	ldi	r21, 0xC2	; 194
    4052:	61 e0       	ldi	r22, 0x01	; 1
    4054:	70 e0       	ldi	r23, 0x00	; 0
    4056:	83 e0       	ldi	r24, 0x03	; 3
    4058:	0e 94 34 02 	call	0x468	; 0x468 <Lcd_init>
	RTE_init();
    405c:	0e 94 b8 11 	call	0x2370	; 0x2370 <RTE_init>
	return res;

    4060:	80 e0       	ldi	r24, 0x00	; 0
    4062:	08 95       	ret

00004064 <crc16_update>:

uint16_t crc16_update(uint16_t crc, uint8_t a)
{
  int i;

  crc ^= a;
    4064:	86 27       	eor	r24, r22
    4066:	28 e0       	ldi	r18, 0x08	; 8
    4068:	30 e0       	ldi	r19, 0x00	; 0
  for (i = 0; i < 8; ++i)
  {
    if (crc & 1)
    406a:	80 ff       	sbrs	r24, 0
    406c:	07 c0       	rjmp	.+14     	; 0x407c <crc16_update+0x18>
      crc = (crc >> 1) ^ 0xA001;
    406e:	96 95       	lsr	r25
    4070:	87 95       	ror	r24
    4072:	41 e0       	ldi	r20, 0x01	; 1
    4074:	84 27       	eor	r24, r20
    4076:	40 ea       	ldi	r20, 0xA0	; 160
    4078:	94 27       	eor	r25, r20
    407a:	02 c0       	rjmp	.+4      	; 0x4080 <crc16_update+0x1c>
    else
      crc = (crc >> 1);
    407c:	96 95       	lsr	r25
    407e:	87 95       	ror	r24
    4080:	21 50       	subi	r18, 0x01	; 1
    4082:	31 09       	sbc	r19, r1
uint16_t crc16_update(uint16_t crc, uint8_t a)
{
  int i;

  crc ^= a;
  for (i = 0; i < 8; ++i)
    4084:	91 f7       	brne	.-28     	; 0x406a <crc16_update+0x6>
    else
      crc = (crc >> 1);
  }

  return crc;
}
    4086:	08 95       	ret

00004088 <millis_init>:

//init the timer on ctc mode to calvulate millis
void millis_init()
{
	//CTC mode
	TIMER2_CONGFIG_A = 0x02;
    4088:	82 e0       	ldi	r24, 0x02	; 2
    408a:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
	// Clock/64
	TIMER2_CONGFIG_B = 0x04;
    408e:	84 e0       	ldi	r24, 0x04	; 4
    4090:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7000b1>
    // Load into the output compare
    TIMER2_COMPARE = CTC_MATCH_OVERFLOW;
    4094:	8a ef       	ldi	r24, 0xFA	; 250
    4096:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7000b3>
    // Enable the compare match interrupt
    SET_BIT(TIMER2_INTERUPT, TIMER2_COMPARE_INT);
    409a:	e0 e7       	ldi	r30, 0x70	; 112
    409c:	f0 e0       	ldi	r31, 0x00	; 0
    409e:	80 81       	ld	r24, Z
    40a0:	82 60       	ori	r24, 0x02	; 2
    40a2:	80 83       	st	Z, r24
    40a4:	08 95       	ret

000040a6 <Get_millis>:
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    40a6:	f8 94       	cli
    unsigned long millis_return;

    // Ensure this cannot be disrupted
    ATOMIC_BLOCK(ATOMIC_FORCEON) {
    	// copy the ISR counter
        millis_return = timer1_millis;
    40a8:	60 91 68 0f 	lds	r22, 0x0F68	; 0x800f68 <timer1_millis>
    40ac:	70 91 69 0f 	lds	r23, 0x0F69	; 0x800f69 <timer1_millis+0x1>
    40b0:	80 91 6a 0f 	lds	r24, 0x0F6A	; 0x800f6a <timer1_millis+0x2>
    40b4:	90 91 6b 0f 	lds	r25, 0x0F6B	; 0x800f6b <timer1_millis+0x3>
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
    40b8:	78 94       	sei
    }

    return millis_return;
}//Get_millis
    40ba:	08 95       	ret

000040bc <__vector_13>:



ISR (TIMER2_COMPA_vect)
{
    40bc:	1f 92       	push	r1
    40be:	0f 92       	push	r0
    40c0:	0f b6       	in	r0, 0x3f	; 63
    40c2:	0f 92       	push	r0
    40c4:	11 24       	eor	r1, r1
    40c6:	8f 93       	push	r24
    40c8:	9f 93       	push	r25
    40ca:	af 93       	push	r26
    40cc:	bf 93       	push	r27
	//MILLI SEC
    timer1_millis++;
    40ce:	80 91 68 0f 	lds	r24, 0x0F68	; 0x800f68 <timer1_millis>
    40d2:	90 91 69 0f 	lds	r25, 0x0F69	; 0x800f69 <timer1_millis+0x1>
    40d6:	a0 91 6a 0f 	lds	r26, 0x0F6A	; 0x800f6a <timer1_millis+0x2>
    40da:	b0 91 6b 0f 	lds	r27, 0x0F6B	; 0x800f6b <timer1_millis+0x3>
    40de:	01 96       	adiw	r24, 0x01	; 1
    40e0:	a1 1d       	adc	r26, r1
    40e2:	b1 1d       	adc	r27, r1
    40e4:	80 93 68 0f 	sts	0x0F68, r24	; 0x800f68 <timer1_millis>
    40e8:	90 93 69 0f 	sts	0x0F69, r25	; 0x800f69 <timer1_millis+0x1>
    40ec:	a0 93 6a 0f 	sts	0x0F6A, r26	; 0x800f6a <timer1_millis+0x2>
    40f0:	b0 93 6b 0f 	sts	0x0F6B, r27	; 0x800f6b <timer1_millis+0x3>
}//ISR
    40f4:	bf 91       	pop	r27
    40f6:	af 91       	pop	r26
    40f8:	9f 91       	pop	r25
    40fa:	8f 91       	pop	r24
    40fc:	0f 90       	pop	r0
    40fe:	0f be       	out	0x3f, r0	; 63
    4100:	0f 90       	pop	r0
    4102:	1f 90       	pop	r1
    4104:	18 95       	reti

00004106 <__udivmodsi4>:
    4106:	a1 e2       	ldi	r26, 0x21	; 33
    4108:	1a 2e       	mov	r1, r26
    410a:	aa 1b       	sub	r26, r26
    410c:	bb 1b       	sub	r27, r27
    410e:	fd 01       	movw	r30, r26
    4110:	0d c0       	rjmp	.+26     	; 0x412c <__udivmodsi4_ep>

00004112 <__udivmodsi4_loop>:
    4112:	aa 1f       	adc	r26, r26
    4114:	bb 1f       	adc	r27, r27
    4116:	ee 1f       	adc	r30, r30
    4118:	ff 1f       	adc	r31, r31
    411a:	a2 17       	cp	r26, r18
    411c:	b3 07       	cpc	r27, r19
    411e:	e4 07       	cpc	r30, r20
    4120:	f5 07       	cpc	r31, r21
    4122:	20 f0       	brcs	.+8      	; 0x412c <__udivmodsi4_ep>
    4124:	a2 1b       	sub	r26, r18
    4126:	b3 0b       	sbc	r27, r19
    4128:	e4 0b       	sbc	r30, r20
    412a:	f5 0b       	sbc	r31, r21

0000412c <__udivmodsi4_ep>:
    412c:	66 1f       	adc	r22, r22
    412e:	77 1f       	adc	r23, r23
    4130:	88 1f       	adc	r24, r24
    4132:	99 1f       	adc	r25, r25
    4134:	1a 94       	dec	r1
    4136:	69 f7       	brne	.-38     	; 0x4112 <__udivmodsi4_loop>
    4138:	60 95       	com	r22
    413a:	70 95       	com	r23
    413c:	80 95       	com	r24
    413e:	90 95       	com	r25
    4140:	9b 01       	movw	r18, r22
    4142:	ac 01       	movw	r20, r24
    4144:	bd 01       	movw	r22, r26
    4146:	cf 01       	movw	r24, r30
    4148:	08 95       	ret

0000414a <memcpy>:
    414a:	fb 01       	movw	r30, r22
    414c:	dc 01       	movw	r26, r24
    414e:	02 c0       	rjmp	.+4      	; 0x4154 <memcpy+0xa>
    4150:	01 90       	ld	r0, Z+
    4152:	0d 92       	st	X+, r0
    4154:	41 50       	subi	r20, 0x01	; 1
    4156:	50 40       	sbci	r21, 0x00	; 0
    4158:	d8 f7       	brcc	.-10     	; 0x4150 <memcpy+0x6>
    415a:	08 95       	ret

0000415c <memset>:
    415c:	dc 01       	movw	r26, r24
    415e:	01 c0       	rjmp	.+2      	; 0x4162 <memset+0x6>
    4160:	6d 93       	st	X+, r22
    4162:	41 50       	subi	r20, 0x01	; 1
    4164:	50 40       	sbci	r21, 0x00	; 0
    4166:	e0 f7       	brcc	.-8      	; 0x4160 <memset+0x4>
    4168:	08 95       	ret

0000416a <_exit>:
    416a:	f8 94       	cli

0000416c <__stop_program>:
    416c:	ff cf       	rjmp	.-2      	; 0x416c <__stop_program>
